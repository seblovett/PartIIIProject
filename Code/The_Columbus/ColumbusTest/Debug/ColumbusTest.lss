
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f218  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80011400  80011400  00011800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001858  80011600  80011600  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00001114  00000004  80012e58  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e0  00001118  80013f6c  00014518  2**2
                  ALLOC
  7 .comment      00000090  00000000  00000000  00014518  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001c10  00000000  00000000  000145a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00004b27  00000000  00000000  000161b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004073e  00000000  00000000  0001acdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008219  00000000  00000000  0005b41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e6bb  00000000  00000000  00063636  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004cf0  00000000  00000000  00081cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a33f  00000000  00000000  000869e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000159a3  00000000  00000000  00090d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 0285aa45  00000000  00000000  000a66c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 18 .debug_ranges 00002278  00000000  00000000  0290110b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b0 6c 	sub	pc,pc,-20372

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	17 58       	ld.sh	r8,--r11
8000210c:	00 00       	add	r0,r0
8000210e:	17 56       	ld.sh	r6,--r11
80002110:	00 00       	add	r0,r0
80002112:	17 44       	ld.w	r4,--r11
80002114:	00 00       	add	r0,r0
80002116:	17 4c       	ld.w	r12,--r11
80002118:	00 00       	add	r0,r0
8000211a:	17 50       	ld.sh	r0,--r11
8000211c:	00 00       	add	r0,r0
8000211e:	17 4e       	ld.w	lr,--r11

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	3a b2       	mov	r2,-85
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	3a ce       	mov	lr,-84

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	39 82       	mov	r2,-104
800021a4:	00 00       	add	r0,r0
800021a6:	17 68       	ld.uh	r8,--r11
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	39 ce       	mov	lr,-100
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	11 18       	ld.sh	r8,r8++
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	11 18       	ld.sh	r8,r8++
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	3a b2       	mov	r2,-85
800022ac:	00 00       	add	r0,r0
800022ae:	17 68       	ld.uh	r8,--r11
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 82       	mov	r2,-104
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	17 68       	ld.uh	r8,--r11
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	39 ce       	mov	lr,-100

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	11 30       	ld.ub	r0,r8++
80002364:	00 00       	add	r0,r0
80002366:	17 68       	ld.uh	r8,--r11
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	3a b2       	mov	r2,-85
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	39 82       	mov	r2,-104
800024a0:	00 00       	add	r0,r0
800024a2:	17 56       	ld.sh	r6,--r11
800024a4:	00 00       	add	r0,r0
800024a6:	11 18       	ld.sh	r8,r8++
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	17 68       	ld.uh	r8,--r11
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	39 ce       	mov	lr,-100
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	3a b2       	mov	r2,-85
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	39 82       	mov	r2,-104
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	17 68       	ld.uh	r8,--r11
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	39 ce       	mov	lr,-100
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	39 82       	mov	r2,-104
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	17 68       	ld.uh	r8,--r11
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	39 ce       	mov	lr,-100
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	39 82       	mov	r2,-104
80002730:	00 00       	add	r0,r0
80002732:	17 56       	ld.sh	r6,--r11
80002734:	00 00       	add	r0,r0
80002736:	11 18       	ld.sh	r8,r8++
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	17 68       	ld.uh	r8,--r11
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	39 ce       	mov	lr,-100
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3a b2       	mov	r2,-85
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	3a ce       	mov	lr,-84

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	39 82       	mov	r2,-104
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	17 68       	ld.uh	r8,--r11
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	39 ce       	mov	lr,-100
80002834:	00 00       	add	r0,r0
80002836:	11 30       	ld.ub	r0,r8++
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	3a b2       	mov	r2,-85
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	3a ce       	mov	lr,-84

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	11 1c       	ld.sh	r12,r8++
80002ab0:	00 00       	add	r0,r0
80002ab2:	11 2c       	ld.uh	r12,r8++
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	39 f4       	mov	r4,-97
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	39 82       	mov	r2,-104
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	3a b2       	mov	r2,-85
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	39 ce       	mov	lr,-100
80002ac4:	00 00       	add	r0,r0
80002ac6:	11 30       	ld.ub	r0,r8++
80002ac8:	00 00       	add	r0,r0
80002aca:	17 56       	ld.sh	r6,--r11
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	17 68       	ld.uh	r8,--r11
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	17 58       	ld.sh	r8,--r11
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	11 30       	ld.ub	r0,r8++
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	11 2c       	ld.uh	r12,r8++
80002b3c:	00 00       	add	r0,r0
80002b3e:	11 1c       	ld.sh	r12,r8++
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	11 30       	ld.ub	r0,r8++
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	11 30       	ld.ub	r0,r8++
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	11 30       	ld.ub	r0,r8++
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	11 30       	ld.ub	r0,r8++
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	17 50       	ld.sh	r0,--r11

80002cd0 <acifa_is_aca_ready>:
#include "compiler.h"
#include "acifa.h"

static bool acifa_is_aca_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACARDY_MASK) != 0;
80002cd0:	79 0c       	ld.w	r12,r12[0x40]
}
80002cd2:	f9 dc c3 01 	bfextu	r12,r12,0x18,0x1
80002cd6:	5e fc       	retal	r12

80002cd8 <acifa_is_acb_ready>:

static bool acifa_is_acb_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBRDY_MASK) != 0;
80002cd8:	79 0c       	ld.w	r12,r12[0x40]
}
80002cda:	f9 dc c3 21 	bfextu	r12,r12,0x19,0x1
80002cde:	5e fc       	retal	r12

80002ce0 <acifa_configure>:
void acifa_configure(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel,
		uint8_t input_p,
		uint8_t input_n,
		uint32_t pb_hz)
{
80002ce0:	d4 01       	pushm	lr
	Assert( acifa != NULL );
	if (comp_sel == ACIFA_COMP_SELA) {
80002ce2:	30 1e       	mov	lr,1
80002ce4:	fc 0b 18 00 	cp.b	r11,lr
80002ce8:	c0 a1       	brne	80002cfc <acifa_configure+0x1c>
		acifa->confa
80002cea:	b1 69       	lsl	r9,0x10
80002cec:	e6 19 00 0f 	andh	r9,0xf,COH
80002cf0:	a9 6a       	lsl	r10,0x8
80002cf2:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002cf6:	14 49       	or	r9,r10
80002cf8:	99 09       	st.w	r12[0x0],r9
80002cfa:	c0 98       	rjmp	80002d0c <acifa_configure+0x2c>
				AVR32_ACIFA_CONFA_INSELP_MASK) |
				((input_n <<
				AVR32_ACIFA_CONFA_INSELN_OFFSET) &
				AVR32_ACIFA_CONFA_INSELN_MASK);
	} else {
		acifa->confb
80002cfc:	b1 69       	lsl	r9,0x10
80002cfe:	e6 19 00 0f 	andh	r9,0xf,COH
80002d02:	a9 6a       	lsl	r10,0x8
80002d04:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002d08:	14 49       	or	r9,r10
80002d0a:	99 19       	st.w	r12[0x4],r9
				AVR32_ACIFA_CONFB_INSELN_OFFSET) &
				AVR32_ACIFA_CONFB_INSELN_MASK);
	}

	/* Startup Time of up to 10us max. */
	acifa->sut = (pb_hz / 100000);
80002d0c:	f0 09 16 05 	lsr	r9,r8,0x5
80002d10:	e0 6a 5a c5 	mov	r10,23237
80002d14:	ea 1a 0a 7c 	orh	r10,0xa7c
80002d18:	f2 0a 06 48 	mulu.d	r8,r9,r10
80002d1c:	f2 08 16 07 	lsr	r8,r9,0x7
80002d20:	99 98       	st.w	r12[0x24],r8
}
80002d22:	d8 02       	popm	pc

80002d24 <acifa_configure_hysteresis>:
		uint8_t level)
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
80002d24:	30 18       	mov	r8,1
80002d26:	f0 0b 18 00 	cp.b	r11,r8
80002d2a:	c0 81       	brne	80002d3a <acifa_configure_hysteresis+0x16>
		acifa->confa
			|= ((level <<
80002d2c:	78 08       	ld.w	r8,r12[0x0]
80002d2e:	b9 6a       	lsl	r10,0x18
80002d30:	e6 1a 03 00 	andh	r10,0x300,COH
80002d34:	10 4a       	or	r10,r8
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
		acifa->confa
80002d36:	99 0a       	st.w	r12[0x0],r10
80002d38:	5e fc       	retal	r12
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
			|= ((level <<
80002d3a:	78 18       	ld.w	r8,r12[0x4]
80002d3c:	b9 6a       	lsl	r10,0x18
80002d3e:	e6 1a 03 00 	andh	r10,0x300,COH
80002d42:	10 4a       	or	r10,r8
		acifa->confa
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
80002d44:	99 1a       	st.w	r12[0x4],r10
80002d46:	5e fc       	retal	r12

80002d48 <acifa_start>:
 * \param *acifa        Base address of the ACIFA
 * \param comp_sel      Comparator Selection
 */
void acifa_start(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	18 97       	mov	r7,r12
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002d4e:	30 18       	mov	r8,1
80002d50:	f0 0b 18 00 	cp.b	r11,r8
80002d54:	c0 91       	brne	80002d66 <acifa_start+0x1e>
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d56:	30 98       	mov	r8,9
80002d58:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0f 	mcall	80002d98 <acifa_start+0x50>
80002d60:	cf d0       	breq	80002d5a <acifa_start+0x12>
80002d62:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACA */
		}
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002d66:	30 28       	mov	r8,2
80002d68:	f0 0b 18 00 	cp.b	r11,r8
80002d6c:	c0 91       	brne	80002d7e <acifa_start+0x36>
		acifa->en = (AVR32_ACIFA_EN_ACBEN_MASK) |
80002d6e:	31 28       	mov	r8,18
80002d70:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_acb_ready(acifa)) {
80002d72:	0e 9c       	mov	r12,r7
80002d74:	f0 1f 00 0a 	mcall	80002d9c <acifa_start+0x54>
80002d78:	cf d0       	breq	80002d72 <acifa_start+0x2a>
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACB */
		}
	} else {
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d7e:	31 b8       	mov	r8,27
80002d80:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK) |
				(AVR32_ACIFA_EN_ACBEN_MASK) |
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d82:	0e 9c       	mov	r12,r7
80002d84:	f0 1f 00 05 	mcall	80002d98 <acifa_start+0x50>
80002d88:	cf d0       	breq	80002d82 <acifa_start+0x3a>
			/* Wait for ACA */
		}
		while (!acifa_is_acb_ready(acifa)) {
80002d8a:	0e 9c       	mov	r12,r7
80002d8c:	f0 1f 00 04 	mcall	80002d9c <acifa_start+0x54>
80002d90:	cf d0       	breq	80002d8a <acifa_start+0x42>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c d8       	sub	r8,-51

80002da0 <acifa_is_aca_inp_higher>:
 *  \retval true when ACA Input P is higher than Input N
 *  \retval false when ACA Input P is Lower than Input N
 */
bool acifa_is_aca_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACACS_MASK) != 0;
80002da0:	79 0c       	ld.w	r12,r12[0x40]
}
80002da2:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
80002da6:	5e fc       	retal	r12

80002da8 <acifa_is_acb_inp_higher>:
 *  \retval true when ACB Input P is higher than Input N
 *  \retval false when ACB Input P is Lower than Input N
 */
bool acifa_is_acb_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBCS_MASK) != 0;
80002da8:	79 0c       	ld.w	r12,r12[0x40]
}
80002daa:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80002dae:	5e fc       	retal	r12

80002db0 <acifa_clear_flags>:
 * \param acifa         Base address of the ACIFA
 * \param flag_mask     Flag Mask Value
 */
void acifa_clear_flags(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	acifa->scr = flag_mask;
80002db0:	f9 4b 00 44 	st.w	r12[68],r11
}
80002db4:	5e fc       	retal	r12

80002db6 <acifa_enable_interrupt_toggle>:
void acifa_enable_interrupt_toggle(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002db6:	30 18       	mov	r8,1
80002db8:	f0 0b 18 00 	cp.b	r11,r8
80002dbc:	c0 71       	brne	80002dca <acifa_enable_interrupt_toggle+0x14>
		acifa->CONFA.is = 2;
80002dbe:	78 08       	ld.w	r8,r12[0x0]
80002dc0:	30 29       	mov	r9,2
80002dc2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dc6:	99 08       	st.w	r12[0x0],r8
80002dc8:	5e fc       	retal	r12
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002dca:	30 28       	mov	r8,2
80002dcc:	f0 0b 18 00 	cp.b	r11,r8
80002dd0:	5e 1c       	retne	r12
		acifa->CONFB.is = 2;
80002dd2:	78 18       	ld.w	r8,r12[0x4]
80002dd4:	30 29       	mov	r9,2
80002dd6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dda:	99 18       	st.w	r12[0x4],r8
80002ddc:	5e fc       	retal	r12

80002dde <acifa_enable_interrupt>:
 */
void acifa_enable_interrupt(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	Assert( acifa != NULL );

	acifa->ier = flag_mask;
80002dde:	99 ab       	st.w	r12[0x28],r11
}
80002de0:	5e fc       	retal	r12

80002de2 <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002de2:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002de6:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002dea:	18 38       	cp.w	r8,r12
80002dec:	e0 88 00 06 	brls	80002df8 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002df0:	e1 b8 00 42 	mfsr	r8,0x108
80002df4:	10 3c       	cp.w	r12,r8
80002df6:	cf d3       	brcs	80002df0 <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002df8:	e1 b8 00 42 	mfsr	r8,0x108
80002dfc:	10 3c       	cp.w	r12,r8
80002dfe:	fe 9b ff fd 	brhi	80002df8 <sdramc_ck_delay+0x16>
}
80002e02:	5e fc       	retal	r12

80002e04 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002e04:	d4 31       	pushm	r0-r7,lr
80002e06:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002e08:	ee 78 42 3f 	mov	r8,999999
80002e0c:	f8 08 00 09 	add	r9,r12,r8
80002e10:	e0 60 de 83 	mov	r0,56963
80002e14:	ea 10 43 1b 	orh	r0,0x431b
80002e18:	f2 00 06 48 	mulu.d	r8,r9,r0
80002e1c:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002e20:	32 5b       	mov	r11,37
80002e22:	4c 9c       	lddpc	r12,80002f44 <sdramc_init+0x140>
80002e24:	f0 1f 00 49 	mcall	80002f48 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002e28:	fe 68 20 00 	mov	r8,-122880
80002e2c:	f0 f9 01 28 	ld.w	r9,r8[296]
80002e30:	a1 b9       	sbr	r9,0x1
80002e32:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002e36:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002e3a:	ec 08 15 04 	lsl	r8,r6,0x4
80002e3e:	0c 18       	sub	r8,r6
80002e40:	f0 c3 fc 19 	sub	r3,r8,-999
80002e44:	e0 65 4d d3 	mov	r5,19923
80002e48:	ea 15 10 62 	orh	r5,0x1062
80002e4c:	e6 05 06 42 	mulu.d	r2,r3,r5
80002e50:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002e52:	ec 02 15 05 	lsl	r2,r6,0x5
80002e56:	0c 02       	add	r2,r6
80002e58:	a1 72       	lsl	r2,0x1
80002e5a:	e4 06 00 0b 	add	r11,r2,r6
80002e5e:	f6 cb fc 19 	sub	r11,r11,-999
80002e62:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002e66:	f6 0a 16 06 	lsr	r10,r11,0x6
80002e6a:	bd 6a       	lsl	r10,0x1c
80002e6c:	e8 1a 00 f0 	orl	r10,0xf0
80002e70:	e6 09 15 08 	lsl	r9,r3,0x8
80002e74:	e2 19 0f 00 	andl	r9,0xf00,COH
80002e78:	12 4a       	or	r10,r9
80002e7a:	f0 09 15 02 	lsl	r9,r8,0x2
80002e7e:	f2 c9 fc 19 	sub	r9,r9,-999
80002e82:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e86:	a7 69       	lsl	r9,0x6
80002e88:	e2 19 f0 00 	andl	r9,0xf000,COH
80002e8c:	f5 e9 10 08 	or	r8,r10,r9
80002e90:	e6 09 15 10 	lsl	r9,r3,0x10
80002e94:	e6 19 00 0f 	andh	r9,0xf,COH
80002e98:	12 48       	or	r8,r9
80002e9a:	e6 09 15 14 	lsl	r9,r3,0x14
80002e9e:	e6 19 00 f0 	andh	r9,0xf0,COH
80002ea2:	12 48       	or	r8,r9
80002ea4:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002ea8:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002eac:	f6 cb fc 19 	sub	r11,r11,-999
80002eb0:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002eb4:	f6 09 15 12 	lsl	r9,r11,0x12
80002eb8:	e6 19 0f 00 	andh	r9,0xf00,COH
80002ebc:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002ebe:	fe 67 2c 00 	mov	r7,-119808
80002ec2:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002ec4:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002ec6:	30 18       	mov	r8,1
80002ec8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eca:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ecc:	fc 14 d0 00 	movh	r4,0xd000
80002ed0:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002ed2:	ec 0c 10 64 	mul	r12,r6,100
80002ed6:	f0 1f 00 1e 	mcall	80002f4c <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002eda:	30 28       	mov	r8,2
80002edc:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ede:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ee0:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002ee2:	06 9c       	mov	r12,r3
80002ee4:	f0 1f 00 1a 	mcall	80002f4c <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002ee8:	30 48       	mov	r8,4
80002eea:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eec:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002eee:	e4 c3 fc 19 	sub	r3,r2,-999
80002ef2:	e6 05 06 42 	mulu.d	r2,r3,r5
80002ef6:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002ef8:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002efa:	06 9c       	mov	r12,r3
80002efc:	f0 1f 00 14 	mcall	80002f4c <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002f00:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002f02:	06 9c       	mov	r12,r3
80002f04:	f0 1f 00 12 	mcall	80002f4c <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002f08:	30 38       	mov	r8,3
80002f0a:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f0c:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f0e:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002f10:	ec 09 15 01 	lsl	r9,r6,0x1
80002f14:	f2 c9 fc 19 	sub	r9,r9,-999
80002f18:	f2 05 06 48 	mulu.d	r8,r9,r5
80002f1c:	f2 0c 16 06 	lsr	r12,r9,0x6
80002f20:	f0 1f 00 0b 	mcall	80002f4c <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002f24:	30 08       	mov	r8,0
80002f26:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f28:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f2a:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002f2c:	e2 00 06 40 	mulu.d	r0,r1,r0
80002f30:	b3 81       	lsr	r1,0x12
80002f32:	e0 68 1e 84 	mov	r8,7812
80002f36:	b1 31       	mul	r1,r8
80002f38:	e2 05 06 44 	mulu.d	r4,r1,r5
80002f3c:	a7 85       	lsr	r5,0x6
80002f3e:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002f40:	6e 18       	ld.w	r8,r7[0x4]
}
80002f42:	d8 32       	popm	r0-r7,pc
80002f44:	80 01       	ld.sh	r1,r0[0x0]
80002f46:	16 00       	add	r0,r11
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	31 c4       	mov	r4,28
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2d e2       	sub	r2,-34

80002f50 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002f50:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002f54:	58 0a       	cp.w	r10,0
80002f56:	c6 30       	breq	8000301c <eic_init+0xcc>
80002f58:	30 08       	mov	r8,0
80002f5a:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f5c:	30 19       	mov	r9,1
80002f5e:	30 1e       	mov	lr,1
80002f60:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002f64:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002f68:	11 96       	ld.ub	r6,r8[0x1]
80002f6a:	f2 06 18 00 	cp.b	r6,r9
80002f6e:	c0 71       	brne	80002f7c <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002f70:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f72:	11 86       	ld.ub	r6,r8[0x0]
80002f74:	fc 06 09 46 	lsl	r6,lr,r6
80002f78:	0a 46       	or	r6,r5
80002f7a:	c0 78       	rjmp	80002f88 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002f7c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f7e:	11 86       	ld.ub	r6,r8[0x0]
80002f80:	fc 06 09 46 	lsl	r6,lr,r6
80002f84:	5c d6       	com	r6
80002f86:	0a 66       	and	r6,r5
80002f88:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f8a:	11 a6       	ld.ub	r6,r8[0x2]
80002f8c:	f2 06 18 00 	cp.b	r6,r9
80002f90:	c0 71       	brne	80002f9e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002f92:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f94:	11 86       	ld.ub	r6,r8[0x0]
80002f96:	fc 06 09 46 	lsl	r6,lr,r6
80002f9a:	0a 46       	or	r6,r5
80002f9c:	c0 78       	rjmp	80002faa <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002f9e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002fa0:	11 86       	ld.ub	r6,r8[0x0]
80002fa2:	fc 06 09 46 	lsl	r6,lr,r6
80002fa6:	5c d6       	com	r6
80002fa8:	0a 66       	and	r6,r5
80002faa:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fac:	11 b6       	ld.ub	r6,r8[0x3]
80002fae:	f2 06 18 00 	cp.b	r6,r9
80002fb2:	c0 71       	brne	80002fc0 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002fb4:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fb6:	11 86       	ld.ub	r6,r8[0x0]
80002fb8:	fc 06 09 46 	lsl	r6,lr,r6
80002fbc:	0a 46       	or	r6,r5
80002fbe:	c0 78       	rjmp	80002fcc <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002fc0:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fc2:	11 86       	ld.ub	r6,r8[0x0]
80002fc4:	fc 06 09 46 	lsl	r6,lr,r6
80002fc8:	5c d6       	com	r6
80002fca:	0a 66       	and	r6,r5
80002fcc:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fce:	11 c6       	ld.ub	r6,r8[0x4]
80002fd0:	f2 06 18 00 	cp.b	r6,r9
80002fd4:	c0 71       	brne	80002fe2 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002fd6:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fd8:	11 86       	ld.ub	r6,r8[0x0]
80002fda:	fc 06 09 46 	lsl	r6,lr,r6
80002fde:	0a 46       	or	r6,r5
80002fe0:	c0 78       	rjmp	80002fee <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002fe2:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fe4:	11 86       	ld.ub	r6,r8[0x0]
80002fe6:	fc 06 09 46 	lsl	r6,lr,r6
80002fea:	5c d6       	com	r6
80002fec:	0a 66       	and	r6,r5
80002fee:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ff0:	11 d6       	ld.ub	r6,r8[0x5]
80002ff2:	f2 06 18 00 	cp.b	r6,r9
80002ff6:	c0 71       	brne	80003004 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002ff8:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ffa:	11 88       	ld.ub	r8,r8[0x0]
80002ffc:	fc 08 09 48 	lsl	r8,lr,r8
80003000:	0c 48       	or	r8,r6
80003002:	c0 78       	rjmp	80003010 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003004:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003006:	11 88       	ld.ub	r8,r8[0x0]
80003008:	fc 08 09 48 	lsl	r8,lr,r8
8000300c:	5c d8       	com	r8
8000300e:	0c 68       	and	r8,r6
80003010:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80003012:	2f f7       	sub	r7,-1
80003014:	0e 98       	mov	r8,r7
80003016:	0e 3a       	cp.w	r10,r7
80003018:	fe 9b ff a4 	brhi	80002f60 <eic_init+0x10>
8000301c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003020 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80003020:	30 18       	mov	r8,1
80003022:	f0 0b 09 48 	lsl	r8,r8,r11
80003026:	99 c8       	st.w	r12[0x30],r8
}
80003028:	5e fc       	retal	r12

8000302a <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
8000302a:	30 18       	mov	r8,1
8000302c:	f0 0b 09 48 	lsl	r8,r8,r11
80003030:	99 08       	st.w	r12[0x0],r8
}
80003032:	5e fc       	retal	r12

80003034 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003034:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003038:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
8000303a:	30 19       	mov	r9,1
8000303c:	f2 0b 09 4b 	lsl	r11,r9,r11
80003040:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80003042:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003044:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80003048:	5e fc       	retal	r12

8000304a <eic_disable_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000304a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000304e:	d3 03       	ssrf	0x10

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->idr = 1 << line_number;
80003050:	30 19       	mov	r9,1
80003052:	f2 0b 09 4b 	lsl	r11,r9,r11
80003056:	99 1b       	st.w	r12[0x4],r11
	eic->imr;
80003058:	78 29       	ld.w	r9,r12[0x8]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000305a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
8000305e:	5e fc       	retal	r12

80003060 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003060:	fe 68 00 00 	mov	r8,-131072
80003064:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003066:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000306a:	91 09       	st.w	r8[0x0],r9
}
8000306c:	5e fc       	retal	r12

8000306e <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000306e:	fe 68 00 00 	mov	r8,-131072
80003072:	70 2c       	ld.w	r12,r8[0x8]
}
80003074:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003078:	5e fc       	retal	r12
8000307a:	d7 03       	nop

8000307c <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
8000307c:	d4 01       	pushm	lr
	while (!flashc_is_ready());
8000307e:	f0 1f 00 03 	mcall	80003088 <flashc_default_wait_until_ready+0xc>
80003082:	cf e0       	breq	8000307e <flashc_default_wait_until_ready+0x2>
}
80003084:	d8 02       	popm	pc
80003086:	00 00       	add	r0,r0
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 6e       	mov	lr,6

8000308c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000308c:	eb cd 40 c0 	pushm	r6-r7,lr
80003090:	18 96       	mov	r6,r12
80003092:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003094:	48 e8       	lddpc	r8,800030cc <flashc_issue_command+0x40>
80003096:	70 08       	ld.w	r8,r8[0x0]
80003098:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000309a:	fe 68 00 00 	mov	r8,-131072
8000309e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800030a0:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800030a4:	58 07       	cp.w	r7,0
800030a6:	c0 35       	brlt	800030ac <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800030a8:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800030ac:	3a 59       	mov	r9,-91
800030ae:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800030b2:	fe 69 00 00 	mov	r9,-131072
800030b6:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800030b8:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800030ba:	e2 19 00 0c 	andl	r9,0xc,COH
800030be:	48 58       	lddpc	r8,800030d0 <flashc_issue_command+0x44>
800030c0:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800030c2:	48 38       	lddpc	r8,800030cc <flashc_issue_command+0x40>
800030c4:	70 08       	ld.w	r8,r8[0x0]
800030c6:	5d 18       	icall	r8
}
800030c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030cc:	00 00       	add	r0,r0
800030ce:	00 08       	add	r8,r0
800030d0:	00 00       	add	r0,r0
800030d2:	11 34       	ld.ub	r4,r8++

800030d4 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800030da:	e0 68 8a 40 	mov	r8,35392
800030de:	ea 18 01 f7 	orh	r8,0x1f7
800030e2:	10 3c       	cp.w	r12,r8
800030e4:	e0 88 00 18 	brls	80003114 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
800030e8:	30 1c       	mov	r12,1
800030ea:	f0 1f 00 10 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800030ee:	e0 68 14 80 	mov	r8,5248
800030f2:	ea 18 03 ef 	orh	r8,0x3ef
800030f6:	10 37       	cp.w	r7,r8
800030f8:	e0 8b 00 08 	brhi	80003108 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800030fc:	3f fb       	mov	r11,-1
800030fe:	31 1c       	mov	r12,17
80003100:	f0 1f 00 0b 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80003108:	3f fb       	mov	r11,-1
8000310a:	31 0c       	mov	r12,16
8000310c:	f0 1f 00 08 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003110:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80003114:	30 0c       	mov	r12,0
80003116:	f0 1f 00 05 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8000311a:	3f fb       	mov	r11,-1
8000311c:	31 1c       	mov	r12,17
8000311e:	f0 1f 00 04 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003122:	e3 cd 80 80 	ldm	sp++,r7,pc
80003126:	00 00       	add	r0,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	30 60       	mov	r0,6
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	30 8c       	mov	r12,8

80003130 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003130:	f8 08 16 05 	lsr	r8,r12,0x5
80003134:	a9 78       	lsl	r8,0x9
80003136:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
8000313a:	58 7b       	cp.w	r11,7
8000313c:	e0 8b 00 05 	brhi	80003146 <gpio_enable_module_pin+0x16>
80003140:	4a 09       	lddpc	r9,800031c0 <gpio_enable_module_pin+0x90>
80003142:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80003146:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003148:	30 19       	mov	r9,1
8000314a:	f2 0c 09 49 	lsl	r9,r9,r12
8000314e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003150:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003152:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003154:	c3 18       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003156:	30 19       	mov	r9,1
80003158:	f2 0c 09 49 	lsl	r9,r9,r12
8000315c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000315e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003160:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003162:	c2 a8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003164:	30 19       	mov	r9,1
80003166:	f2 0c 09 49 	lsl	r9,r9,r12
8000316a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000316c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000316e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003170:	c2 38       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003172:	30 19       	mov	r9,1
80003174:	f2 0c 09 49 	lsl	r9,r9,r12
80003178:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000317a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000317c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000317e:	c1 c8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003180:	30 19       	mov	r9,1
80003182:	f2 0c 09 49 	lsl	r9,r9,r12
80003186:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003188:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000318a:	91 d9       	st.w	r8[0x34],r9
		break;
8000318c:	c1 58       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000318e:	30 19       	mov	r9,1
80003190:	f2 0c 09 49 	lsl	r9,r9,r12
80003194:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003196:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003198:	91 d9       	st.w	r8[0x34],r9
		break;
8000319a:	c0 e8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000319c:	30 19       	mov	r9,1
8000319e:	f2 0c 09 49 	lsl	r9,r9,r12
800031a2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031a4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031a6:	91 d9       	st.w	r8[0x34],r9
		break;
800031a8:	c0 78       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031aa:	30 19       	mov	r9,1
800031ac:	f2 0c 09 49 	lsl	r9,r9,r12
800031b0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031b2:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031b4:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800031b6:	30 19       	mov	r9,1
800031b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800031bc:	91 2c       	st.w	r8[0x8],r12
800031be:	5e fd       	retal	0
800031c0:	80 01       	ld.sh	r1,r0[0x0]
800031c2:	17 28       	ld.uh	r8,r11++

800031c4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c4:	d4 21       	pushm	r4-r7,lr
800031c6:	18 97       	mov	r7,r12
800031c8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031ca:	58 0b       	cp.w	r11,0
800031cc:	c0 31       	brne	800031d2 <gpio_enable_module+0xe>
800031ce:	30 05       	mov	r5,0
800031d0:	c0 d8       	rjmp	800031ea <gpio_enable_module+0x26>
800031d2:	30 05       	mov	r5,0
800031d4:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031d6:	6e 1b       	ld.w	r11,r7[0x4]
800031d8:	6e 0c       	ld.w	r12,r7[0x0]
800031da:	f0 1f 00 06 	mcall	800031f0 <gpio_enable_module+0x2c>
800031de:	18 45       	or	r5,r12
		gpiomap++;
800031e0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031e2:	2f f6       	sub	r6,-1
800031e4:	0c 34       	cp.w	r4,r6
800031e6:	fe 9b ff f8 	brhi	800031d6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800031ea:	0a 9c       	mov	r12,r5
800031ec:	d8 22       	popm	r4-r7,pc
800031ee:	00 00       	add	r0,r0
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	31 30       	mov	r0,19

800031f4 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031f4:	f8 08 16 05 	lsr	r8,r12,0x5
800031f8:	a9 78       	lsl	r8,0x9
800031fa:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
800031fe:	30 19       	mov	r9,1
80003200:	f2 0c 09 4c 	lsl	r12,r9,r12
80003204:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80003208:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
8000320c:	5e fc       	retal	r12

8000320e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000320e:	f8 08 16 05 	lsr	r8,r12,0x5
80003212:	a9 78       	lsl	r8,0x9
80003214:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003218:	30 19       	mov	r9,1
8000321a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000321e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003222:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003226:	91 1c       	st.w	r8[0x4],r12
}
80003228:	5e fc       	retal	r12

8000322a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000322a:	f8 08 16 05 	lsr	r8,r12,0x5
8000322e:	a9 78       	lsl	r8,0x9
80003230:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003234:	30 19       	mov	r9,1
80003236:	f2 0c 09 4c 	lsl	r12,r9,r12
8000323a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000323e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003242:	91 1c       	st.w	r8[0x4],r12
}
80003244:	5e fc       	retal	r12

80003246 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003246:	c0 08       	rjmp	80003246 <_unhandled_interrupt>

80003248 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003248:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000324c:	49 99       	lddpc	r9,800032b0 <INTC_register_interrupt+0x68>
8000324e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003252:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003256:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003258:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000325c:	58 0a       	cp.w	r10,0
8000325e:	c0 91       	brne	80003270 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003260:	49 59       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003262:	49 6a       	lddpc	r10,800032b8 <INTC_register_interrupt+0x70>
80003264:	12 1a       	sub	r10,r9
80003266:	fe 79 00 00 	mov	r9,-65536
8000326a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000326e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003270:	58 1a       	cp.w	r10,1
80003272:	c0 a1       	brne	80003286 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003274:	49 09       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003276:	49 2a       	lddpc	r10,800032bc <INTC_register_interrupt+0x74>
80003278:	12 1a       	sub	r10,r9
8000327a:	bf aa       	sbr	r10,0x1e
8000327c:	fe 79 00 00 	mov	r9,-65536
80003280:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003284:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003286:	58 2a       	cp.w	r10,2
80003288:	c0 a1       	brne	8000329c <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000328a:	48 b9       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000328c:	48 da       	lddpc	r10,800032c0 <INTC_register_interrupt+0x78>
8000328e:	12 1a       	sub	r10,r9
80003290:	bf ba       	sbr	r10,0x1f
80003292:	fe 79 00 00 	mov	r9,-65536
80003296:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000329a:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000329c:	48 69       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000329e:	48 aa       	lddpc	r10,800032c4 <INTC_register_interrupt+0x7c>
800032a0:	12 1a       	sub	r10,r9
800032a2:	ea 1a c0 00 	orh	r10,0xc000
800032a6:	fe 79 00 00 	mov	r9,-65536
800032aa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800032ae:	5e fc       	retal	r12
800032b0:	80 01       	ld.sh	r1,r0[0x0]
800032b2:	17 48       	ld.w	r8,--r11
800032b4:	80 01       	ld.sh	r1,r0[0x0]
800032b6:	14 00       	add	r0,r10
800032b8:	80 01       	ld.sh	r1,r0[0x0]
800032ba:	15 04       	ld.w	r4,r10++
800032bc:	80 01       	ld.sh	r1,r0[0x0]
800032be:	15 12       	ld.sh	r2,r10++
800032c0:	80 01       	ld.sh	r1,r0[0x0]
800032c2:	15 20       	ld.uh	r0,r10++
800032c4:	80 01       	ld.sh	r1,r0[0x0]
800032c6:	15 2e       	ld.uh	lr,r10++

800032c8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032ca:	49 18       	lddpc	r8,8000330c <INTC_init_interrupts+0x44>
800032cc:	e3 b8 00 01 	mtsr	0x4,r8
800032d0:	49 0e       	lddpc	lr,80003310 <INTC_init_interrupts+0x48>
800032d2:	30 07       	mov	r7,0
800032d4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d6:	49 0c       	lddpc	r12,80003314 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d8:	49 05       	lddpc	r5,80003318 <INTC_init_interrupts+0x50>
800032da:	10 15       	sub	r5,r8
800032dc:	fe 76 00 00 	mov	r6,-65536
800032e0:	c1 18       	rjmp	80003302 <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032e2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032ec:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ee:	10 3a       	cp.w	r10,r8
800032f0:	fe 9b ff fc 	brhi	800032e8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f8:	2f f7       	sub	r7,-1
800032fa:	2f 8e       	sub	lr,-8
800032fc:	e0 47 00 2f 	cp.w	r7,47
80003300:	c0 50       	breq	8000330a <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003302:	7c 08       	ld.w	r8,lr[0x0]
80003304:	58 08       	cp.w	r8,0
80003306:	ce e1       	brne	800032e2 <INTC_init_interrupts+0x1a>
80003308:	cf 6b       	rjmp	800032f4 <INTC_init_interrupts+0x2c>
8000330a:	d8 22       	popm	r4-r7,pc
8000330c:	80 01       	ld.sh	r1,r0[0x0]
8000330e:	14 00       	add	r0,r10
80003310:	80 01       	ld.sh	r1,r0[0x0]
80003312:	17 48       	ld.w	r8,--r11
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	32 46       	mov	r6,36
80003318:	80 01       	ld.sh	r1,r0[0x0]
8000331a:	15 04       	ld.w	r4,r10++

8000331c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000331c:	fe 78 00 00 	mov	r8,-65536
80003320:	e0 69 00 83 	mov	r9,131
80003324:	f2 0c 01 0c 	sub	r12,r9,r12
80003328:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000332c:	f2 ca ff c0 	sub	r10,r9,-64
80003330:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003334:	58 08       	cp.w	r8,0
80003336:	c0 21       	brne	8000333a <_get_interrupt_handler+0x1e>
80003338:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000333a:	f0 08 12 00 	clz	r8,r8
8000333e:	48 5a       	lddpc	r10,80003350 <_get_interrupt_handler+0x34>
80003340:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003344:	f0 08 11 1f 	rsub	r8,r8,31
80003348:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000334a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334e:	5e fc       	retal	r12
80003350:	80 01       	ld.sh	r1,r0[0x0]
80003352:	17 48       	ld.w	r8,--r11

80003354 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003354:	e1 b9 00 00 	mfsr	r9,0x0
80003358:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000335a:	fe 78 04 00 	mov	r8,-64512
8000335e:	fc 1a aa 00 	movh	r10,0xaa00
80003362:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80003366:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80003368:	12 98       	mov	r8,r9
8000336a:	e6 18 00 01 	andh	r8,0x1,COH
8000336e:	c0 21       	brne	80003372 <pm_set_mclk_source+0x1e>
80003370:	d5 03       	csrf	0x10

  return PASS;
}
80003372:	5e fd       	retal	0

80003374 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003374:	eb cd 40 c0 	pushm	r6-r7,lr
80003378:	16 97       	mov	r7,r11
8000337a:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
8000337c:	58 0c       	cp.w	r12,0
8000337e:	c0 50       	breq	80003388 <pcl_switch_to_osc+0x14>
80003380:	fe 7c d8 f0 	mov	r12,-10000
80003384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80003388:	30 0c       	mov	r12,0
8000338a:	f0 1f 00 08 	mcall	800033a8 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
8000338e:	30 1a       	mov	r10,1
80003390:	0c 9b       	mov	r11,r6
80003392:	30 0c       	mov	r12,0
80003394:	f0 1f 00 06 	mcall	800033ac <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003398:	0e 9c       	mov	r12,r7
8000339a:	f0 1f 00 06 	mcall	800033b0 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000339e:	30 1c       	mov	r12,1
800033a0:	f0 1f 00 05 	mcall	800033b4 <pcl_switch_to_osc+0x40>
800033a4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	38 1c       	mov	r12,-127
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	37 a8       	mov	r8,122
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	30 d4       	mov	r4,13
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 54       	mov	r4,53

800033b8 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
800033b8:	58 2c       	cp.w	r12,2
800033ba:	c2 80       	breq	8000340a <pwm_write_protect_sw_unlock+0x52>
800033bc:	e0 89 00 07 	brgt	800033ca <pwm_write_protect_sw_unlock+0x12>
800033c0:	58 0c       	cp.w	r12,0
800033c2:	c0 a0       	breq	800033d6 <pwm_write_protect_sw_unlock+0x1e>
800033c4:	58 1c       	cp.w	r12,1
800033c6:	c5 61       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033c8:	c1 48       	rjmp	800033f0 <pwm_write_protect_sw_unlock+0x38>
800033ca:	58 4c       	cp.w	r12,4
800033cc:	c3 90       	breq	8000343e <pwm_write_protect_sw_unlock+0x86>
800033ce:	c2 b5       	brlt	80003424 <pwm_write_protect_sw_unlock+0x6c>
800033d0:	58 5c       	cp.w	r12,5
800033d2:	c5 01       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033d4:	c4 28       	rjmp	80003458 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033d6:	fe 78 4c 00 	mov	r8,-46080
800033da:	e0 69 4d 04 	mov	r9,19716
800033de:	ea 19 50 57 	orh	r9,0x5057
800033e2:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033e6:	f0 f8 00 e8 	ld.w	r8,r8[232]
800033ea:	58 08       	cp.w	r8,0
800033ec:	c4 30       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
800033ee:	c4 18       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033f0:	fe 78 4c 00 	mov	r8,-46080
800033f4:	e0 69 4d 08 	mov	r9,19720
800033f8:	ea 19 50 57 	orh	r9,0x5057
800033fc:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003400:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003404:	58 08       	cp.w	r8,0
80003406:	c3 60       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003408:	c3 48       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000340a:	fe 78 4c 00 	mov	r8,-46080
8000340e:	e0 69 4d 10 	mov	r9,19728
80003412:	ea 19 50 57 	orh	r9,0x5057
80003416:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000341a:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000341e:	58 08       	cp.w	r8,0
80003420:	c2 90       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003422:	c2 78       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003424:	fe 78 4c 00 	mov	r8,-46080
80003428:	e0 69 4d 20 	mov	r9,19744
8000342c:	ea 19 50 57 	orh	r9,0x5057
80003430:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003434:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003438:	58 08       	cp.w	r8,0
8000343a:	c1 c0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
8000343c:	c1 a8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000343e:	fe 78 4c 00 	mov	r8,-46080
80003442:	e0 69 4d 40 	mov	r9,19776
80003446:	ea 19 50 57 	orh	r9,0x5057
8000344a:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000344e:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003452:	58 08       	cp.w	r8,0
80003454:	c0 f0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003456:	c0 d8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003458:	fe 78 4c 00 	mov	r8,-46080
8000345c:	e0 69 4d 80 	mov	r9,19840
80003460:	ea 19 50 57 	orh	r9,0x5057
80003464:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003468:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000346c:	58 08       	cp.w	r8,0
8000346e:	c0 20       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003470:	5e fe       	retal	-1
80003472:	5e fd       	retal	0

80003474 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003474:	58 0b       	cp.w	r11,0
80003476:	c1 d0       	breq	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003478:	58 4c       	cp.w	r12,4
8000347a:	e0 8b 00 1b 	brhi	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000347e:	76 0a       	ld.w	r10,r11[0x0]
80003480:	fe 78 4c 00 	mov	r8,-46080
80003484:	f8 c9 ff f0 	sub	r9,r12,-16
80003488:	a5 79       	lsl	r9,0x5
8000348a:	f0 09 00 09 	add	r9,r8,r9
8000348e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003490:	76 19       	ld.w	r9,r11[0x4]
80003492:	a5 7c       	lsl	r12,0x5
80003494:	f0 0c 00 0c 	add	r12,r8,r12
80003498:	f8 c8 fd fc 	sub	r8,r12,-516
8000349c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000349e:	76 39       	ld.w	r9,r11[0xc]
800034a0:	f8 c8 fd f4 	sub	r8,r12,-524
800034a4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
800034a6:	76 68       	ld.w	r8,r11[0x18]
800034a8:	f8 cc fd e8 	sub	r12,r12,-536
800034ac:	99 08       	st.w	r12[0x0],r8
800034ae:	5e fd       	retal	0
  return PWM_SUCCESS;
800034b0:	5e ff       	retal	1

800034b2 <pwm_stop_channels>:
  return PWM_SUCCESS;
}

int pwm_stop_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034b2:	18 98       	mov	r8,r12
800034b4:	e0 18 ff e0 	andl	r8,0xffe0
800034b8:	c0 20       	breq	800034bc <pwm_stop_channels+0xa>
800034ba:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.dis = channels_bitmask; // Disable channels.
800034bc:	fe 78 4c 00 	mov	r8,-46080
800034c0:	91 2c       	st.w	r8[0x8],r12
800034c2:	5e fd       	retal	0

800034c4 <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
800034c4:	fe 78 4c 00 	mov	r8,-46080
800034c8:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
800034ca:	5e fd       	retal	0

800034cc <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
800034cc:	eb cd 40 c0 	pushm	r6-r7,lr
800034d0:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034d2:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
800034d6:	58 0c       	cp.w	r12,0
800034d8:	c0 31       	brne	800034de <pwm_init+0x12>
800034da:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800034de:	ee 16 00 01 	eorh	r6,0x1
800034e2:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
800034e6:	30 0c       	mov	r12,0
800034e8:	f0 1f 00 37 	mcall	800035c4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
800034ec:	30 1c       	mov	r12,1
800034ee:	f0 1f 00 36 	mcall	800035c4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
800034f2:	30 2c       	mov	r12,2
800034f4:	f0 1f 00 34 	mcall	800035c4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
800034f8:	30 3c       	mov	r12,3
800034fa:	f0 1f 00 33 	mcall	800035c4 <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800034fe:	58 06       	cp.w	r6,0
80003500:	c0 20       	breq	80003504 <pwm_init+0x38>
80003502:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
80003504:	31 f9       	mov	r9,31
80003506:	fe 78 4c 00 	mov	r8,-46080
8000350a:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
8000350c:	ef 39 00 14 	ld.ub	r9,r7[20]
80003510:	30 08       	mov	r8,0
80003512:	f0 09 18 00 	cp.b	r9,r8
80003516:	c0 70       	breq	80003524 <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
80003518:	fe 78 4c 00 	mov	r8,-46080
8000351c:	70 59       	ld.w	r9,r8[0x14]
8000351e:	ea 19 00 1f 	orh	r9,0x1f
80003522:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
80003524:	fe 78 4c 00 	mov	r8,-46080
80003528:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
8000352a:	ef 39 00 15 	ld.ub	r9,r7[21]
8000352e:	30 08       	mov	r8,0
80003530:	f0 09 18 00 	cp.b	r9,r8
80003534:	c1 40       	breq	8000355c <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
80003536:	30 99       	mov	r9,9
80003538:	fe 78 4c 00 	mov	r8,-46080
8000353c:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
8000353e:	ef 39 00 16 	ld.ub	r9,r7[22]
80003542:	30 28       	mov	r8,2
80003544:	f0 09 18 00 	cp.b	r9,r8
80003548:	c0 71       	brne	80003556 <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
8000354a:	fe 78 4c 00 	mov	r8,-46080
8000354e:	70 e9       	ld.w	r9,r8[0x38]
80003550:	e8 19 00 06 	orl	r9,0x6
80003554:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
80003556:	fe 78 4c 00 	mov	r8,-46080
8000355a:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
8000355c:	58 06       	cp.w	r6,0
8000355e:	c0 20       	breq	80003562 <pwm_init+0x96>
80003560:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003562:	6e 08       	ld.w	r8,r7[0x0]
80003564:	6e 39       	ld.w	r9,r7[0xc]
80003566:	a9 69       	lsl	r9,0x8
80003568:	f3 e8 11 09 	or	r9,r9,r8<<0x10
8000356c:	6e 18       	ld.w	r8,r7[0x4]
8000356e:	10 49       	or	r9,r8
80003570:	6e 28       	ld.w	r8,r7[0x8]
80003572:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80003576:	6e 48       	ld.w	r8,r7[0x10]
80003578:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
8000357c:	fe 78 4c 00 	mov	r8,-46080
80003580:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
80003582:	ef 3a 00 16 	ld.ub	r10,r7[22]
80003586:	70 89       	ld.w	r9,r8[0x20]
80003588:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
8000358c:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
8000358e:	70 89       	ld.w	r9,r8[0x20]
80003590:	ef 3a 00 17 	ld.ub	r10,r7[23]
80003594:	f5 e9 10 09 	or	r9,r10,r9
80003598:	91 89       	st.w	r8[0x20],r9
8000359a:	70 89       	ld.w	r9,r8[0x20]
8000359c:	ef 3a 00 18 	ld.ub	r10,r7[24]
800035a0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800035a4:	91 89       	st.w	r8[0x20],r9
800035a6:	70 89       	ld.w	r9,r8[0x20]
800035a8:	ef 3a 00 19 	ld.ub	r10,r7[25]
800035ac:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800035b0:	91 89       	st.w	r8[0x20],r9
800035b2:	70 89       	ld.w	r9,r8[0x20]
800035b4:	ef 3a 00 1a 	ld.ub	r10,r7[26]
800035b8:	f3 ea 10 39 	or	r9,r9,r10<<0x3
800035bc:	91 89       	st.w	r8[0x20],r9
800035be:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035c2:	00 00       	add	r0,r0
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	33 b8       	mov	r8,59

800035c8 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800035c8:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035cc:	fe 7a 08 00 	mov	r10,-63488
800035d0:	c0 48       	rjmp	800035d8 <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800035d2:	20 18       	sub	r8,1
800035d4:	c0 21       	brne	800035d8 <scif_pclksr_statushigh_wait+0x10>
800035d6:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035d8:	74 59       	ld.w	r9,r10[0x14]
800035da:	f9 e9 00 09 	and	r9,r12,r9
800035de:	cf a0       	breq	800035d2 <scif_pclksr_statushigh_wait+0xa>
800035e0:	5e fd       	retal	0

800035e2 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
800035e2:	58 0c       	cp.w	r12,0
800035e4:	c0 81       	brne	800035f4 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800035e6:	fe 79 08 00 	mov	r9,-63488
800035ea:	72 58       	ld.w	r8,r9[0x14]
800035ec:	e2 18 00 10 	andl	r8,0x10,COH
800035f0:	cf d0       	breq	800035ea <scif_wait_for_pll_locked+0x8>
800035f2:	c0 78       	rjmp	80003600 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
800035f4:	fe 79 08 00 	mov	r9,-63488
800035f8:	72 58       	ld.w	r8,r9[0x14]
800035fa:	e2 18 00 20 	andl	r8,0x20,COH
800035fe:	cf d0       	breq	800035f8 <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80003600:	5e fd       	retal	0

80003602 <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80003602:	fe 78 08 00 	mov	r8,-63488
80003606:	f8 c9 ff e7 	sub	r9,r12,-25
8000360a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000360e:	a1 ca       	cbr	r10,0x0
80003610:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003614:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003618:	fe 7a 08 00 	mov	r10,-63488
8000361c:	12 9c       	mov	r12,r9
8000361e:	c0 48       	rjmp	80003626 <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
80003620:	20 18       	sub	r8,1
80003622:	c0 21       	brne	80003626 <scif_stop_gclk+0x24>
80003624:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003626:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
8000362a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000362e:	cf 91       	brne	80003620 <scif_stop_gclk+0x1e>
80003630:	5e fd       	retal	0
80003632:	d7 03       	nop

80003634 <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80003634:	d4 21       	pushm	r4-r7,lr
80003636:	18 97       	mov	r7,r12
80003638:	16 95       	mov	r5,r11
8000363a:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
8000363c:	a1 99       	lsr	r9,0x1
8000363e:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003642:	f8 c9 ff e7 	sub	r9,r12,-25
80003646:	fe 78 08 00 	mov	r8,-63488
8000364a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000364e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003652:	c0 50       	breq	8000365c <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
80003654:	f0 1f 00 18 	mcall	800036b4 <scif_gc_setup+0x80>
80003658:	c1 44       	brge	80003680 <scif_gc_setup+0x4c>
8000365a:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000365c:	a1 76       	lsl	r6,0x1
8000365e:	e2 16 00 02 	andl	r6,0x2,COH
80003662:	a9 65       	lsl	r5,0x8
80003664:	e2 15 0f 00 	andl	r5,0xf00,COH
80003668:	0a 46       	or	r6,r5
8000366a:	b1 64       	lsl	r4,0x10
8000366c:	e6 14 00 ff 	andh	r4,0xff,COH
80003670:	ed e4 10 04 	or	r4,r6,r4
80003674:	2e 77       	sub	r7,-25
80003676:	fe 78 08 00 	mov	r8,-63488
8000367a:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
8000367e:	d8 2a       	popm	r4-r7,pc,r12=0
80003680:	ec 09 15 01 	lsl	r9,r6,0x1
80003684:	e2 19 00 02 	andl	r9,0x2,COH
80003688:	ea 08 15 08 	lsl	r8,r5,0x8
8000368c:	e2 18 0f 00 	andl	r8,0xf00,COH
80003690:	10 49       	or	r9,r8
80003692:	e8 08 15 10 	lsl	r8,r4,0x10
80003696:	e6 18 00 ff 	andh	r8,0xff,COH
8000369a:	10 49       	or	r9,r8
8000369c:	fe 78 08 00 	mov	r8,-63488
800036a0:	2e 77       	sub	r7,-25
800036a2:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
800036a6:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
800036aa:	a1 a9       	sbr	r9,0x0
800036ac:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
800036b0:	d8 2a       	popm	r4-r7,pc,r12=0
800036b2:	00 00       	add	r0,r0
800036b4:	80 00       	ld.sh	r0,r0[0x0]
800036b6:	36 02       	mov	r2,96

800036b8 <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800036b8:	f8 c9 ff e7 	sub	r9,r12,-25
800036bc:	fe 78 08 00 	mov	r8,-63488
800036c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036c8:	c0 91       	brne	800036da <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800036ca:	fe 78 08 00 	mov	r8,-63488
800036ce:	12 9c       	mov	r12,r9
800036d0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036d4:	a1 a9       	sbr	r9,0x0
800036d6:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
800036da:	5e fd       	retal	0

800036dc <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
800036dc:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800036de:	fa c8 ff f8 	sub	r8,sp,-8
800036e2:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800036e6:	fe 78 08 00 	mov	r8,-63488
800036ea:	2f 9c       	sub	r12,-7
800036ec:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
800036f0:	30 1b       	mov	r11,1
800036f2:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
800036f6:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
800036fa:	e1 ba 00 00 	mfsr	r10,0x0
800036fe:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003700:	f8 0b 15 02 	lsl	r11,r12,0x2
80003704:	ea 1b aa 00 	orh	r11,0xaa00
80003708:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000370a:	f2 f9 ff f8 	ld.w	r9,r9[-8]
8000370e:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80003712:	14 98       	mov	r8,r10
80003714:	e6 18 00 01 	andh	r8,0x1,COH
80003718:	c0 21       	brne	8000371c <scif_pll_enable+0x40>
8000371a:	d5 03       	csrf	0x10

  return PASS;
}
8000371c:	2f ed       	sub	sp,-8
8000371e:	5e fd       	retal	0

80003720 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80003720:	eb cd 40 c0 	pushm	r6-r7,lr
80003724:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80003726:	fa c9 ff f8 	sub	r9,sp,-8
8000372a:	f2 0c 00 28 	add	r8,r9,r12<<0x2
8000372e:	fe 79 08 00 	mov	r9,-63488
80003732:	2f 9c       	sub	r12,-7
80003734:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
80003738:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
8000373c:	f7 3e 00 10 	ld.ub	lr,r11[16]
80003740:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80003744:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
80003748:	17 a7       	ld.ub	r7,r11[0x2]
8000374a:	17 9e       	ld.ub	lr,r11[0x1]
8000374c:	a3 6e       	lsl	lr,0x2
8000374e:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80003752:	17 87       	ld.ub	r7,r11[0x0]
80003754:	0e 96       	mov	r6,r7
80003756:	0e 4e       	or	lr,r7
80003758:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
8000375c:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80003760:	76 2e       	ld.w	lr,r11[0x8]
80003762:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
80003766:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
8000376a:	76 1e       	ld.w	lr,r11[0x4]
8000376c:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80003770:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80003774:	76 3b       	ld.w	r11,r11[0xc]
80003776:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
8000377a:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
8000377e:	e1 ba 00 00 	mfsr	r10,0x0
80003782:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003784:	f8 0b 15 02 	lsl	r11,r12,0x2
80003788:	ea 1b aa 00 	orh	r11,0xaa00
8000378c:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000378e:	f0 f8 ff f8 	ld.w	r8,r8[-8]
80003792:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80003796:	14 98       	mov	r8,r10
80003798:	e6 18 00 01 	andh	r8,0x1,COH
8000379c:	c0 21       	brne	800037a0 <scif_pll_setup+0x80>
8000379e:	d5 03       	csrf	0x10

  return PASS;
}
800037a0:	2f ed       	sub	sp,-8
800037a2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800037a6:	d7 03       	nop

800037a8 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800037a8:	eb cd 40 80 	pushm	r7,lr
800037ac:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800037ae:	fa c8 ff f8 	sub	r8,sp,-8
800037b2:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800037b6:	fe 78 08 00 	mov	r8,-63488
800037ba:	f8 c9 ff f7 	sub	r9,r12,-9
800037be:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800037c2:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800037c6:	30 1b       	mov	r11,1
800037c8:	ef db d2 01 	bfins	r7,r11,0x10,0x1
800037cc:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
800037d0:	e1 bb 00 00 	mfsr	r11,0x0
800037d4:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800037d6:	f2 07 15 02 	lsl	r7,r9,0x2
800037da:	ea 17 aa 00 	orh	r7,0xaa00
800037de:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800037e0:	fc fe ff f8 	ld.w	lr,lr[-8]
800037e4:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
800037e8:	16 98       	mov	r8,r11
800037ea:	e6 18 00 01 	andh	r8,0x1,COH
800037ee:	c0 21       	brne	800037f2 <scif_enable_osc+0x4a>
800037f0:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800037f2:	58 0a       	cp.w	r10,0
800037f4:	c0 e0       	breq	80003810 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
800037f6:	58 0c       	cp.w	r12,0
800037f8:	c0 61       	brne	80003804 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
800037fa:	30 1c       	mov	r12,1
800037fc:	f0 1f 00 07 	mcall	80003818 <scif_enable_osc+0x70>
80003800:	c0 80       	breq	80003810 <scif_enable_osc+0x68>
80003802:	c0 58       	rjmp	8000380c <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003804:	30 2c       	mov	r12,2
80003806:	f0 1f 00 05 	mcall	80003818 <scif_enable_osc+0x70>
8000380a:	c0 30       	breq	80003810 <scif_enable_osc+0x68>
8000380c:	3f fc       	mov	r12,-1
8000380e:	c0 28       	rjmp	80003812 <scif_enable_osc+0x6a>
80003810:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003812:	2f ed       	sub	sp,-8
80003814:	e3 cd 80 80 	ldm	sp++,r7,pc
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	35 c8       	mov	r8,92

8000381c <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
8000381c:	58 0c       	cp.w	r12,0
8000381e:	c3 41       	brne	80003886 <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003820:	fe 78 08 00 	mov	r8,-63488
80003824:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003826:	e0 69 84 7f 	mov	r9,33919
8000382a:	ea 19 00 1e 	orh	r9,0x1e
8000382e:	12 3b       	cp.w	r11,r9
80003830:	e0 8b 00 04 	brhi	80003838 <scif_configure_osc_crystalmode+0x1c>
80003834:	30 0b       	mov	r11,0
80003836:	c1 38       	rjmp	8000385c <scif_configure_osc_crystalmode+0x40>
80003838:	e0 69 96 7f 	mov	r9,38527
8000383c:	ea 19 00 98 	orh	r9,0x98
80003840:	12 3b       	cp.w	r11,r9
80003842:	e0 8b 00 04 	brhi	8000384a <scif_configure_osc_crystalmode+0x2e>
80003846:	30 1b       	mov	r11,1
80003848:	c0 a8       	rjmp	8000385c <scif_configure_osc_crystalmode+0x40>
8000384a:	e0 69 24 00 	mov	r9,9216
8000384e:	ea 19 00 f4 	orh	r9,0xf4
80003852:	12 3b       	cp.w	r11,r9
80003854:	f9 bb 03 02 	movlo	r11,2
80003858:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000385c:	30 19       	mov	r9,1
8000385e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003862:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80003866:	e1 ba 00 00 	mfsr	r10,0x0
8000386a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
8000386c:	fe 79 08 00 	mov	r9,-63488
80003870:	32 4b       	mov	r11,36
80003872:	ea 1b aa 00 	orh	r11,0xaa00
80003876:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80003878:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000387a:	14 98       	mov	r8,r10
8000387c:	e6 18 00 01 	andh	r8,0x1,COH
80003880:	c3 51       	brne	800038ea <scif_configure_osc_crystalmode+0xce>
80003882:	d5 03       	csrf	0x10
80003884:	c3 38       	rjmp	800038ea <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
80003886:	fe 78 08 00 	mov	r8,-63488
8000388a:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
8000388c:	e0 69 84 7f 	mov	r9,33919
80003890:	ea 19 00 1e 	orh	r9,0x1e
80003894:	12 3b       	cp.w	r11,r9
80003896:	e0 8b 00 04 	brhi	8000389e <scif_configure_osc_crystalmode+0x82>
8000389a:	30 0b       	mov	r11,0
8000389c:	c1 38       	rjmp	800038c2 <scif_configure_osc_crystalmode+0xa6>
8000389e:	e0 69 96 7f 	mov	r9,38527
800038a2:	ea 19 00 98 	orh	r9,0x98
800038a6:	12 3b       	cp.w	r11,r9
800038a8:	e0 8b 00 04 	brhi	800038b0 <scif_configure_osc_crystalmode+0x94>
800038ac:	30 1b       	mov	r11,1
800038ae:	c0 a8       	rjmp	800038c2 <scif_configure_osc_crystalmode+0xa6>
800038b0:	e0 69 24 00 	mov	r9,9216
800038b4:	ea 19 00 f4 	orh	r9,0xf4
800038b8:	12 3b       	cp.w	r11,r9
800038ba:	f9 bb 03 02 	movlo	r11,2
800038be:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800038c2:	30 19       	mov	r9,1
800038c4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038c8:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800038cc:	e1 ba 00 00 	mfsr	r10,0x0
800038d0:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800038d2:	fe 79 08 00 	mov	r9,-63488
800038d6:	32 8b       	mov	r11,40
800038d8:	ea 1b aa 00 	orh	r11,0xaa00
800038dc:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800038de:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800038e0:	14 98       	mov	r8,r10
800038e2:	e6 18 00 01 	andh	r8,0x1,COH
800038e6:	c0 21       	brne	800038ea <scif_configure_osc_crystalmode+0xce>
800038e8:	d5 03       	csrf	0x10
  }

  return PASS;
}
800038ea:	5e fd       	retal	0

800038ec <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800038ec:	f8 c8 00 01 	sub	r8,r12,1
800038f0:	f0 0b 00 0b 	add	r11,r8,r11
800038f4:	f6 0c 0d 0a 	divu	r10,r11,r12
800038f8:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800038fa:	f4 c8 00 01 	sub	r8,r10,1
800038fe:	e0 48 00 fe 	cp.w	r8,254
80003902:	e0 88 00 03 	brls	80003908 <getBaudDiv+0x1c>
80003906:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003908:	5c 8c       	casts.h	r12
}
8000390a:	5e fc       	retal	r12

8000390c <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000390c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003910:	30 18       	mov	r8,1
80003912:	f0 09 18 00 	cp.b	r9,r8
80003916:	e0 88 00 04 	brls	8000391e <spi_initMaster+0x12>
8000391a:	30 2c       	mov	r12,2
8000391c:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000391e:	e0 68 00 80 	mov	r8,128
80003922:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003924:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003926:	30 19       	mov	r9,1
80003928:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000392c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003930:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003934:	30 09       	mov	r9,0
80003936:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000393a:	30 fa       	mov	r10,15
8000393c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003940:	99 18       	st.w	r12[0x4],r8
80003942:	5e f9       	retal	r9

80003944 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003944:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003948:	30 1e       	mov	lr,1
8000394a:	f6 0e 18 00 	cp.b	lr,r11
8000394e:	f9 be 02 00 	movhs	lr,0
80003952:	30 18       	mov	r8,1
80003954:	f4 08 18 00 	cp.b	r8,r10
80003958:	f9 b8 02 00 	movhs	r8,0
8000395c:	fd e8 10 08 	or	r8,lr,r8
80003960:	30 07       	mov	r7,0
80003962:	ee 08 18 00 	cp.b	r8,r7
80003966:	c0 40       	breq	8000396e <spi_selectionMode+0x2a>
80003968:	30 2c       	mov	r12,2
8000396a:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000396e:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003970:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003974:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003978:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000397c:	99 18       	st.w	r12[0x4],r8
8000397e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003982 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003982:	78 18       	ld.w	r8,r12[0x4]
80003984:	ea 18 00 0f 	orh	r8,0xf
80003988:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000398a:	78 18       	ld.w	r8,r12[0x4]
8000398c:	e2 18 00 04 	andl	r8,0x4,COH
80003990:	c0 f0       	breq	800039ae <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003992:	30 e8       	mov	r8,14
80003994:	f0 0b 18 00 	cp.b	r11,r8
80003998:	e0 8b 00 19 	brhi	800039ca <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000399c:	78 18       	ld.w	r8,r12[0x4]
8000399e:	b1 6b       	lsl	r11,0x10
800039a0:	ea 1b ff f0 	orh	r11,0xfff0
800039a4:	e8 1b ff ff 	orl	r11,0xffff
800039a8:	10 6b       	and	r11,r8
800039aa:	99 1b       	st.w	r12[0x4],r11
800039ac:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800039ae:	30 38       	mov	r8,3
800039b0:	f0 0b 18 00 	cp.b	r11,r8
800039b4:	e0 8b 00 0b 	brhi	800039ca <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800039b8:	78 18       	ld.w	r8,r12[0x4]
800039ba:	2f 0b       	sub	r11,-16
800039bc:	30 19       	mov	r9,1
800039be:	f2 0b 09 4b 	lsl	r11,r9,r11
800039c2:	5c db       	com	r11
800039c4:	10 6b       	and	r11,r8
800039c6:	99 1b       	st.w	r12[0x4],r11
800039c8:	5e fd       	retal	0
800039ca:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800039cc:	5e fc       	retal	r12

800039ce <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039ce:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039d2:	c0 58       	rjmp	800039dc <spi_unselectChip+0xe>
		if (!timeout--) {
800039d4:	58 08       	cp.w	r8,0
800039d6:	c0 21       	brne	800039da <spi_unselectChip+0xc>
800039d8:	5e ff       	retal	1
800039da:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039dc:	78 49       	ld.w	r9,r12[0x10]
800039de:	e2 19 02 00 	andl	r9,0x200,COH
800039e2:	cf 90       	breq	800039d4 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039e4:	78 18       	ld.w	r8,r12[0x4]
800039e6:	ea 18 00 0f 	orh	r8,0xf
800039ea:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800039ec:	fc 18 01 00 	movh	r8,0x100
800039f0:	99 08       	st.w	r12[0x0],r8
800039f2:	5e fd       	retal	0

800039f4 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800039f4:	eb cd 40 f8 	pushm	r3-r7,lr
800039f8:	18 95       	mov	r5,r12
800039fa:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800039fc:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a00:	30 38       	mov	r8,3
80003a02:	f0 06 18 00 	cp.b	r6,r8
80003a06:	e0 8b 00 4d 	brhi	80003aa0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003a0a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a0e:	30 18       	mov	r8,1
80003a10:	f0 04 18 00 	cp.b	r4,r8
80003a14:	e0 8b 00 46 	brhi	80003aa0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a18:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a1c:	30 78       	mov	r8,7
80003a1e:	f0 03 18 00 	cp.b	r3,r8
80003a22:	e0 88 00 3f 	brls	80003aa0 <spi_setupChipReg+0xac>
80003a26:	31 08       	mov	r8,16
80003a28:	f0 03 18 00 	cp.b	r3,r8
80003a2c:	e0 8b 00 3a 	brhi	80003aa0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a30:	14 9b       	mov	r11,r10
80003a32:	6e 1c       	ld.w	r12,r7[0x4]
80003a34:	f0 1f 00 1d 	mcall	80003aa8 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003a38:	c3 45       	brlt	80003aa0 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003a3a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003a3c:	ec 09 16 01 	lsr	r9,r6,0x1
80003a40:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003a44:	ec 16 00 01 	eorl	r6,0x1
80003a48:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003a4c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003a50:	20 83       	sub	r3,8
80003a52:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003a56:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003a5a:	ef 39 00 09 	ld.ub	r9,r7[9]
80003a5e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003a62:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003a66:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003a6a:	0f 89       	ld.ub	r9,r7[0x0]
80003a6c:	30 1a       	mov	r10,1
80003a6e:	f4 09 18 00 	cp.b	r9,r10
80003a72:	c0 e0       	breq	80003a8e <spi_setupChipReg+0x9a>
80003a74:	c0 a3       	brcs	80003a88 <spi_setupChipReg+0x94>
80003a76:	30 2a       	mov	r10,2
80003a78:	f4 09 18 00 	cp.b	r9,r10
80003a7c:	c0 c0       	breq	80003a94 <spi_setupChipReg+0xa0>
80003a7e:	30 3a       	mov	r10,3
80003a80:	f4 09 18 00 	cp.b	r9,r10
80003a84:	c0 e1       	brne	80003aa0 <spi_setupChipReg+0xac>
80003a86:	c0 a8       	rjmp	80003a9a <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003a88:	8b c8       	st.w	r5[0x30],r8
80003a8a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003a8e:	8b d8       	st.w	r5[0x34],r8
80003a90:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003a94:	8b e8       	st.w	r5[0x38],r8
80003a96:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003a9a:	8b f8       	st.w	r5[0x3c],r8
80003a9c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003aa0:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003aa2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003aa6:	00 00       	add	r0,r0
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	38 ec       	mov	r12,-114

80003aac <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003aac:	30 18       	mov	r8,1
80003aae:	99 08       	st.w	r12[0x0],r8
}
80003ab0:	5e fc       	retal	r12

80003ab2 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003ab2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ab6:	c0 58       	rjmp	80003ac0 <spi_write+0xe>
		if (!timeout--) {
80003ab8:	58 08       	cp.w	r8,0
80003aba:	c0 21       	brne	80003abe <spi_write+0xc>
80003abc:	5e ff       	retal	1
80003abe:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ac0:	78 49       	ld.w	r9,r12[0x10]
80003ac2:	e2 19 00 02 	andl	r9,0x2,COH
80003ac6:	cf 90       	breq	80003ab8 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003ac8:	5c 7b       	castu.h	r11
80003aca:	99 3b       	st.w	r12[0xc],r11
80003acc:	5e fd       	retal	0

80003ace <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003ace:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003ad2:	c0 58       	rjmp	80003adc <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003ad4:	58 08       	cp.w	r8,0
80003ad6:	c0 21       	brne	80003ada <spi_read+0xc>
80003ad8:	5e ff       	retal	1
80003ada:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003adc:	78 49       	ld.w	r9,r12[0x10]
80003ade:	e2 19 02 01 	andl	r9,0x201,COH
80003ae2:	e0 49 02 01 	cp.w	r9,513
80003ae6:	cf 71       	brne	80003ad4 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003ae8:	78 28       	ld.w	r8,r12[0x8]
80003aea:	b6 08       	st.h	r11[0x0],r8
80003aec:	5e fd       	retal	0
80003aee:	d7 03       	nop

80003af0 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003af0:	4a e8       	lddpc	r8,80003ba8 <twim_master_interrupt_handler+0xb8>
80003af2:	70 08       	ld.w	r8,r8[0x0]
80003af4:	70 79       	ld.w	r9,r8[0x1c]
80003af6:	4a ea       	lddpc	r10,80003bac <twim_master_interrupt_handler+0xbc>
80003af8:	74 0a       	ld.w	r10,r10[0x0]
80003afa:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003afe:	12 9a       	mov	r10,r9
80003b00:	e2 1a 07 00 	andl	r10,0x700,COH
80003b04:	c1 40       	breq	80003b2c <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003b06:	e2 19 03 00 	andl	r9,0x300,COH
80003b0a:	f9 b9 01 fc 	movne	r9,-4
80003b0e:	f9 b9 00 fe 	moveq	r9,-2
80003b12:	4a 8a       	lddpc	r10,80003bb0 <twim_master_interrupt_handler+0xc0>
80003b14:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003b16:	70 3a       	ld.w	r10,r8[0xc]
80003b18:	30 09       	mov	r9,0
80003b1a:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80003b1e:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003b20:	3f fa       	mov	r10,-1
80003b22:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003b24:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003b26:	4a 48       	lddpc	r8,80003bb4 <twim_master_interrupt_handler+0xc4>
80003b28:	b0 89       	st.b	r8[0x0],r9
80003b2a:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003b2c:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003b30:	c1 30       	breq	80003b56 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003b32:	4a 2a       	lddpc	r10,80003bb8 <twim_master_interrupt_handler+0xc8>
80003b34:	70 5b       	ld.w	r11,r8[0x14]
80003b36:	74 09       	ld.w	r9,r10[0x0]
80003b38:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80003b3a:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003b3c:	4a 09       	lddpc	r9,80003bbc <twim_master_interrupt_handler+0xcc>
80003b3e:	72 0a       	ld.w	r10,r9[0x0]
80003b40:	20 1a       	sub	r10,1
80003b42:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003b44:	72 09       	ld.w	r9,r9[0x0]
80003b46:	58 09       	cp.w	r9,0
80003b48:	c2 f1       	brne	80003ba6 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80003b4a:	30 19       	mov	r9,1
80003b4c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b4e:	30 09       	mov	r9,0
80003b50:	49 98       	lddpc	r8,80003bb4 <twim_master_interrupt_handler+0xc4>
80003b52:	b0 89       	st.b	r8[0x0],r9
80003b54:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003b56:	e2 19 00 02 	andl	r9,0x2,COH
80003b5a:	c2 60       	breq	80003ba6 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80003b5c:	49 99       	lddpc	r9,80003bc0 <twim_master_interrupt_handler+0xd0>
80003b5e:	72 09       	ld.w	r9,r9[0x0]
80003b60:	58 09       	cp.w	r9,0
80003b62:	c0 71       	brne	80003b70 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003b64:	30 29       	mov	r9,2
80003b66:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b68:	30 09       	mov	r9,0
80003b6a:	49 38       	lddpc	r8,80003bb4 <twim_master_interrupt_handler+0xc4>
80003b6c:	b0 89       	st.b	r8[0x0],r9
80003b6e:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80003b70:	49 5a       	lddpc	r10,80003bc4 <twim_master_interrupt_handler+0xd4>
80003b72:	74 09       	ld.w	r9,r10[0x0]
80003b74:	13 3b       	ld.ub	r11,r9++
80003b76:	91 6b       	st.w	r8[0x18],r11
80003b78:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003b7a:	49 28       	lddpc	r8,80003bc0 <twim_master_interrupt_handler+0xd0>
80003b7c:	70 09       	ld.w	r9,r8[0x0]
80003b7e:	20 19       	sub	r9,1
80003b80:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80003b82:	70 08       	ld.w	r8,r8[0x0]
80003b84:	58 08       	cp.w	r8,0
80003b86:	c1 01       	brne	80003ba6 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003b88:	48 b8       	lddpc	r8,80003bb4 <twim_master_interrupt_handler+0xc4>
80003b8a:	11 88       	ld.ub	r8,r8[0x0]
80003b8c:	58 08       	cp.w	r8,0
80003b8e:	c0 c0       	breq	80003ba6 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80003b90:	30 09       	mov	r9,0
80003b92:	48 98       	lddpc	r8,80003bb4 <twim_master_interrupt_handler+0xc4>
80003b94:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003b96:	48 d8       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xd8>
80003b98:	70 08       	ld.w	r8,r8[0x0]
80003b9a:	70 3a       	ld.w	r10,r8[0xc]
80003b9c:	48 99       	lddpc	r9,80003bc0 <twim_master_interrupt_handler+0xd0>
80003b9e:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80003ba0:	70 29       	ld.w	r9,r8[0x8]
80003ba2:	48 98       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xd4>
80003ba4:	91 09       	st.w	r8[0x0],r9
80003ba6:	d6 03       	rete
80003ba8:	00 00       	add	r0,r0
80003baa:	13 00       	ld.w	r0,r9++
80003bac:	00 00       	add	r0,r0
80003bae:	13 14       	ld.sh	r4,r9++
80003bb0:	00 00       	add	r0,r0
80003bb2:	13 0c       	ld.w	r12,r9++
80003bb4:	00 00       	add	r0,r0
80003bb6:	13 18       	ld.sh	r8,r9++
80003bb8:	00 00       	add	r0,r0
80003bba:	13 04       	ld.w	r4,r9++
80003bbc:	00 00       	add	r0,r0
80003bbe:	13 08       	ld.w	r8,r9++
80003bc0:	00 00       	add	r0,r0
80003bc2:	13 20       	ld.uh	r0,r9++
80003bc4:	00 00       	add	r0,r0
80003bc6:	13 10       	ld.sh	r0,r9++
80003bc8:	00 00       	add	r0,r0
80003bca:	13 1c       	ld.sh	r12,r9++

80003bcc <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003bcc:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003bd0:	f4 0b 0d 0a 	divu	r10,r10,r11
80003bd4:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003bd8:	e0 48 00 ff 	cp.w	r8,255
80003bdc:	e0 8b 00 04 	brhi	80003be4 <twim_set_speed+0x18>
80003be0:	30 09       	mov	r9,0
80003be2:	c2 18       	rjmp	80003c24 <twim_set_speed+0x58>
80003be4:	30 09       	mov	r9,0
80003be6:	30 16       	mov	r6,1
80003be8:	30 7a       	mov	r10,7
80003bea:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003bec:	2f f9       	sub	r9,-1
80003bee:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003bf0:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003bf2:	e0 48 00 ff 	cp.w	r8,255
80003bf6:	f9 be 0b 01 	movhi	lr,1
80003bfa:	f9 be 08 00 	movls	lr,0
80003bfe:	f2 0a 18 00 	cp.b	r10,r9
80003c02:	ec 0b 17 20 	movhs	r11,r6
80003c06:	f9 bb 03 00 	movlo	r11,0
80003c0a:	fd eb 00 0b 	and	r11,lr,r11
80003c0e:	ee 0b 18 00 	cp.b	r11,r7
80003c12:	ce d1       	brne	80003bec <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003c14:	30 7a       	mov	r10,7
80003c16:	f4 09 18 00 	cp.b	r9,r10
80003c1a:	e0 88 00 05 	brls	80003c24 <twim_set_speed+0x58>
80003c1e:	3f 8c       	mov	r12,-8
80003c20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003c24:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003c28:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80003c2c:	14 18       	sub	r8,r10
80003c2e:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003c32:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003c36:	99 19       	st.w	r12[0x4],r9
80003c38:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80003c3c <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80003c3c:	48 38       	lddpc	r8,80003c48 <twim_status+0xc>
80003c3e:	70 08       	ld.w	r8,r8[0x0]
80003c40:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003c42:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003c46:	5e fc       	retal	r12
80003c48:	00 00       	add	r0,r0
80003c4a:	13 00       	ld.w	r0,r9++

80003c4c <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003c4c:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003c50:	e6 18 00 01 	andh	r8,0x1,COH
80003c54:	c0 21       	brne	80003c58 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003c56:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003c58:	3f f8       	mov	r8,-1
80003c5a:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80003c5c:	99 b8       	st.w	r12[0x2c],r8
}
80003c5e:	5e fc       	retal	r12

80003c60 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80003c60:	eb cd 40 fe 	pushm	r1-r7,lr
80003c64:	18 97       	mov	r7,r12
80003c66:	16 93       	mov	r3,r11
80003c68:	14 95       	mov	r5,r10
80003c6a:	12 92       	mov	r2,r9
80003c6c:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003c6e:	30 14       	mov	r4,1
80003c70:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003c72:	e0 68 00 80 	mov	r8,128
80003c76:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003c78:	30 28       	mov	r8,2
80003c7a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003c7c:	49 e6       	lddpc	r6,80003cf4 <twim_write+0x94>
80003c7e:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80003c80:	f0 1f 00 1e 	mcall	80003cf8 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003c84:	49 e8       	lddpc	r8,80003cfc <twim_write+0x9c>
80003c86:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003c88:	49 e8       	lddpc	r8,80003d00 <twim_write+0xa0>
80003c8a:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003c8c:	30 09       	mov	r9,0
80003c8e:	49 e8       	lddpc	r8,80003d04 <twim_write+0xa4>
80003c90:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003c92:	49 e9       	lddpc	r9,80003d08 <twim_write+0xa8>
80003c94:	30 08       	mov	r8,0
80003c96:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003c98:	6c 08       	ld.w	r8,r6[0x0]
80003c9a:	b1 65       	lsl	r5,0x10
80003c9c:	e8 15 e0 00 	orl	r5,0xe000
80003ca0:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003ca4:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003ca8:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003caa:	49 9a       	lddpc	r10,80003d0c <twim_write+0xac>
80003cac:	e0 6b 03 02 	mov	r11,770
80003cb0:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80003cb2:	74 0a       	ld.w	r10,r10[0x0]
80003cb4:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003cb6:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003cb8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cba:	72 08       	ld.w	r8,r9[0x0]
80003cbc:	58 08       	cp.w	r8,0
80003cbe:	c0 80       	breq	80003cce <twim_write+0x6e>
80003cc0:	c0 b8       	rjmp	80003cd6 <twim_write+0x76>
		cpu_relax();
80003cc2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cc6:	6c 08       	ld.w	r8,r6[0x0]
80003cc8:	58 08       	cp.w	r8,0
80003cca:	c0 30       	breq	80003cd0 <twim_write+0x70>
80003ccc:	c0 58       	rjmp	80003cd6 <twim_write+0x76>
80003cce:	48 f6       	lddpc	r6,80003d08 <twim_write+0xa8>
80003cd0:	f0 1f 00 10 	mcall	80003d10 <twim_write+0xb0>
80003cd4:	cf 70       	breq	80003cc2 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003cd6:	30 28       	mov	r8,2
80003cd8:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cda:	48 c8       	lddpc	r8,80003d08 <twim_write+0xa8>
80003cdc:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cde:	5b c8       	cp.w	r8,-4
80003ce0:	c0 70       	breq	80003cee <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003ce2:	48 a8       	lddpc	r8,80003d08 <twim_write+0xa8>
80003ce4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003ce6:	5b e8       	cp.w	r8,-2
80003ce8:	c0 30       	breq	80003cee <twim_write+0x8e>
80003cea:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003cee:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003cf2:	00 00       	add	r0,r0
80003cf4:	00 00       	add	r0,r0
80003cf6:	13 00       	ld.w	r0,r9++
80003cf8:	80 00       	ld.sh	r0,r0[0x0]
80003cfa:	3c 4c       	mov	r12,-60
80003cfc:	00 00       	add	r0,r0
80003cfe:	13 10       	ld.sh	r0,r9++
80003d00:	00 00       	add	r0,r0
80003d02:	13 20       	ld.uh	r0,r9++
80003d04:	00 00       	add	r0,r0
80003d06:	13 18       	ld.sh	r8,r9++
80003d08:	00 00       	add	r0,r0
80003d0a:	13 0c       	ld.w	r12,r9++
80003d0c:	00 00       	add	r0,r0
80003d0e:	13 14       	ld.sh	r4,r9++
80003d10:	80 00       	ld.sh	r0,r0[0x0]
80003d12:	3c 3c       	mov	r12,-61

80003d14 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003d14:	d4 01       	pushm	lr
80003d16:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003d18:	30 08       	mov	r8,0
80003d1a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80003d1c:	30 08       	mov	r8,0
80003d1e:	16 99       	mov	r9,r11
80003d20:	10 9a       	mov	r10,r8
80003d22:	1a 9b       	mov	r11,sp
80003d24:	f0 1f 00 02 	mcall	80003d2c <twim_probe+0x18>
}
80003d28:	2f fd       	sub	sp,-4
80003d2a:	d8 02       	popm	pc
80003d2c:	80 00       	ld.sh	r0,r0[0x0]
80003d2e:	3c 60       	mov	r0,-58

80003d30 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003d30:	eb cd 40 e0 	pushm	r5-r7,lr
80003d34:	18 97       	mov	r7,r12
80003d36:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003d38:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003d3c:	30 0a       	mov	r10,0
80003d3e:	4a 59       	lddpc	r9,80003dd0 <twim_master_init+0xa0>
80003d40:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003d42:	e6 18 00 01 	andh	r8,0x1,COH
80003d46:	c0 b1       	brne	80003d5c <twim_master_init+0x2c>
		cpu_irq_disable ();
80003d48:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80003d4a:	3f f8       	mov	r8,-1
80003d4c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d4e:	30 18       	mov	r8,1
80003d50:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d52:	e0 68 00 80 	mov	r8,128
80003d56:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003d58:	d5 03       	csrf	0x10
80003d5a:	c0 88       	rjmp	80003d6a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80003d5c:	3f f8       	mov	r8,-1
80003d5e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d60:	30 18       	mov	r8,1
80003d62:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d64:	e0 68 00 80 	mov	r8,128
80003d68:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003d6a:	3f f8       	mov	r8,-1
80003d6c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d6e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003d72:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003d74:	30 1a       	mov	r10,1
80003d76:	e0 6b 03 20 	mov	r11,800
80003d7a:	49 7c       	lddpc	r12,80003dd4 <twim_master_init+0xa4>
80003d7c:	f0 1f 00 17 	mcall	80003dd8 <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003d80:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003d84:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003d88:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003d8a:	f0 09 18 00 	cp.b	r9,r8
80003d8e:	f9 b8 01 10 	movne	r8,16
80003d92:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003d96:	f9 b8 01 ff 	movne	r8,-1
80003d9a:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80003d9e:	6a 0a       	ld.w	r10,r5[0x0]
80003da0:	6a 1b       	ld.w	r11,r5[0x4]
80003da2:	0e 9c       	mov	r12,r7
80003da4:	f0 1f 00 0e 	mcall	80003ddc <twim_master_init+0xac>
80003da8:	5b 8c       	cp.w	r12,-8
80003daa:	c1 00       	breq	80003dca <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003dac:	6a 2b       	ld.w	r11,r5[0x8]
80003dae:	0e 9c       	mov	r12,r7
80003db0:	f0 1f 00 0c 	mcall	80003de0 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003db4:	48 78       	lddpc	r8,80003dd0 <twim_master_init+0xa0>
80003db6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003db8:	5b c8       	cp.w	r8,-4
80003dba:	c0 70       	breq	80003dc8 <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dbc:	48 58       	lddpc	r8,80003dd0 <twim_master_init+0xa0>
80003dbe:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dc0:	5b e8       	cp.w	r8,-2
80003dc2:	c0 30       	breq	80003dc8 <twim_master_init+0x98>
80003dc4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003dc8:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003dca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003dce:	00 00       	add	r0,r0
80003dd0:	00 00       	add	r0,r0
80003dd2:	13 0c       	ld.w	r12,r9++
80003dd4:	80 00       	ld.sh	r0,r0[0x0]
80003dd6:	3a f0       	mov	r0,-81
80003dd8:	80 00       	ld.sh	r0,r0[0x0]
80003dda:	32 48       	mov	r8,36
80003ddc:	80 00       	ld.sh	r0,r0[0x0]
80003dde:	3b cc       	mov	r12,-68
80003de0:	80 00       	ld.sh	r0,r0[0x0]
80003de2:	3d 14       	mov	r4,-47

80003de4 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003de4:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003de6:	f6 08 15 04 	lsl	r8,r11,0x4
80003dea:	14 38       	cp.w	r8,r10
80003dec:	f9 b8 08 10 	movls	r8,16
80003df0:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003df4:	f0 0b 02 4b 	mul	r11,r8,r11
80003df8:	f6 09 16 01 	lsr	r9,r11,0x1
80003dfc:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003e00:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003e04:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003e08:	f2 cb 00 01 	sub	r11,r9,1
80003e0c:	e0 4b ff fe 	cp.w	r11,65534
80003e10:	e0 88 00 03 	brls	80003e16 <usart_set_async_baudrate+0x32>
80003e14:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003e16:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003e18:	e8 6e 00 00 	mov	lr,524288
80003e1c:	59 08       	cp.w	r8,16
80003e1e:	fc 08 17 10 	movne	r8,lr
80003e22:	f9 b8 00 00 	moveq	r8,0
80003e26:	e4 1b ff f7 	andh	r11,0xfff7
80003e2a:	e0 1b fe cf 	andl	r11,0xfecf
80003e2e:	16 48       	or	r8,r11
80003e30:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003e32:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003e36:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003e3a:	99 89       	st.w	r12[0x20],r9
80003e3c:	d8 0a       	popm	pc,r12=0

80003e3e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003e3e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003e40:	e2 18 00 02 	andl	r8,0x2,COH
80003e44:	c0 31       	brne	80003e4a <usart_write_char+0xc>
80003e46:	30 2c       	mov	r12,2
80003e48:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003e4a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003e4e:	99 7b       	st.w	r12[0x1c],r11
80003e50:	5e fd       	retal	0
80003e52:	d7 03       	nop

80003e54 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003e54:	eb cd 40 e0 	pushm	r5-r7,lr
80003e58:	18 96       	mov	r6,r12
80003e5a:	16 95       	mov	r5,r11
80003e5c:	e0 67 27 0f 	mov	r7,9999
80003e60:	c0 68       	rjmp	80003e6c <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003e62:	58 07       	cp.w	r7,0
80003e64:	c0 31       	brne	80003e6a <usart_putchar+0x16>
80003e66:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003e6a:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003e6c:	0a 9b       	mov	r11,r5
80003e6e:	0c 9c       	mov	r12,r6
80003e70:	f0 1f 00 03 	mcall	80003e7c <usart_putchar+0x28>
80003e74:	cf 71       	brne	80003e62 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003e76:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e7a:	00 00       	add	r0,r0
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	3e 3e       	mov	lr,-29

80003e80 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80003e80:	78 58       	ld.w	r8,r12[0x14]
80003e82:	e2 18 00 e0 	andl	r8,0xe0,COH
80003e86:	c0 30       	breq	80003e8c <usart_read_char+0xc>
80003e88:	30 4c       	mov	r12,4
80003e8a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80003e8c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80003e8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e92:	c0 31       	brne	80003e98 <usart_read_char+0x18>
80003e94:	30 3c       	mov	r12,3
80003e96:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80003e98:	78 68       	ld.w	r8,r12[0x18]
80003e9a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003e9e:	97 08       	st.w	r11[0x0],r8
80003ea0:	5e fd       	retal	0
80003ea2:	d7 03       	nop

80003ea4 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80003ea4:	eb cd 40 c0 	pushm	r6-r7,lr
80003ea8:	20 1d       	sub	sp,4
80003eaa:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80003eac:	1a 97       	mov	r7,sp
80003eae:	1a 9b       	mov	r11,sp
80003eb0:	0c 9c       	mov	r12,r6
80003eb2:	f0 1f 00 07 	mcall	80003ecc <usart_getchar+0x28>
80003eb6:	58 3c       	cp.w	r12,3
80003eb8:	cf b0       	breq	80003eae <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
80003eba:	58 4c       	cp.w	r12,4
80003ebc:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80003ec0:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80003ec4:	2f fd       	sub	sp,-4
80003ec6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003eca:	00 00       	add	r0,r0
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	3e 80       	mov	r0,-24

80003ed0 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003ed0:	eb cd 40 c0 	pushm	r6-r7,lr
80003ed4:	18 96       	mov	r6,r12
80003ed6:	16 97       	mov	r7,r11
  while (*string != '\0')
80003ed8:	17 8b       	ld.ub	r11,r11[0x0]
80003eda:	58 0b       	cp.w	r11,0
80003edc:	c0 80       	breq	80003eec <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003ede:	2f f7       	sub	r7,-1
80003ee0:	0c 9c       	mov	r12,r6
80003ee2:	f0 1f 00 04 	mcall	80003ef0 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003ee6:	0f 8b       	ld.ub	r11,r7[0x0]
80003ee8:	58 0b       	cp.w	r11,0
80003eea:	cf a1       	brne	80003ede <usart_write_line+0xe>
80003eec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ef0:	80 00       	ld.sh	r0,r0[0x0]
80003ef2:	3e 54       	mov	r4,-27

80003ef4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003ef4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003ef8:	e6 18 00 01 	andh	r8,0x1,COH
80003efc:	c0 71       	brne	80003f0a <usart_reset+0x16>
80003efe:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003f00:	3f f8       	mov	r8,-1
80003f02:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003f04:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003f06:	d5 03       	csrf	0x10
80003f08:	c0 48       	rjmp	80003f10 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003f0a:	3f f8       	mov	r8,-1
80003f0c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003f0e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003f10:	30 08       	mov	r8,0
80003f12:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003f14:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003f16:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003f18:	ea 68 61 0c 	mov	r8,680204
80003f1c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003f1e:	5e fc       	retal	r12

80003f20 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003f20:	eb cd 40 e0 	pushm	r5-r7,lr
80003f24:	18 96       	mov	r6,r12
80003f26:	16 97       	mov	r7,r11
80003f28:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003f2a:	f0 1f 00 2f 	mcall	80003fe4 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80003f2e:	58 07       	cp.w	r7,0
80003f30:	c5 80       	breq	80003fe0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003f32:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f34:	30 49       	mov	r9,4
80003f36:	f2 08 18 00 	cp.b	r8,r9
80003f3a:	e0 88 00 53 	brls	80003fe0 <usart_init_rs232+0xc0>
80003f3e:	30 99       	mov	r9,9
80003f40:	f2 08 18 00 	cp.b	r8,r9
80003f44:	e0 8b 00 4e 	brhi	80003fe0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003f48:	0f d9       	ld.ub	r9,r7[0x5]
80003f4a:	30 78       	mov	r8,7
80003f4c:	f0 09 18 00 	cp.b	r9,r8
80003f50:	e0 8b 00 48 	brhi	80003fe0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003f54:	8e 39       	ld.sh	r9,r7[0x6]
80003f56:	e0 68 01 01 	mov	r8,257
80003f5a:	f0 09 19 00 	cp.h	r9,r8
80003f5e:	e0 8b 00 41 	brhi	80003fe0 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003f62:	ef 39 00 08 	ld.ub	r9,r7[8]
80003f66:	30 38       	mov	r8,3
80003f68:	f0 09 18 00 	cp.b	r9,r8
80003f6c:	e0 8b 00 3a 	brhi	80003fe0 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003f70:	0a 9a       	mov	r10,r5
80003f72:	6e 0b       	ld.w	r11,r7[0x0]
80003f74:	0c 9c       	mov	r12,r6
80003f76:	f0 1f 00 1d 	mcall	80003fe8 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f7a:	58 1c       	cp.w	r12,1
80003f7c:	c3 20       	breq	80003fe0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80003f7e:	0f c8       	ld.ub	r8,r7[0x4]
80003f80:	30 99       	mov	r9,9
80003f82:	f2 08 18 00 	cp.b	r8,r9
80003f86:	c0 51       	brne	80003f90 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003f88:	6c 18       	ld.w	r8,r6[0x4]
80003f8a:	b1 b8       	sbr	r8,0x11
80003f8c:	8d 18       	st.w	r6[0x4],r8
80003f8e:	c0 68       	rjmp	80003f9a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003f90:	6c 19       	ld.w	r9,r6[0x4]
80003f92:	20 58       	sub	r8,5
80003f94:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003f98:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003f9a:	6c 19       	ld.w	r9,r6[0x4]
80003f9c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003fa0:	0f d8       	ld.ub	r8,r7[0x5]
80003fa2:	a9 78       	lsl	r8,0x9
80003fa4:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003fa8:	12 48       	or	r8,r9
80003faa:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003fac:	8e 38       	ld.sh	r8,r7[0x6]
80003fae:	30 29       	mov	r9,2
80003fb0:	f2 08 19 00 	cp.h	r8,r9
80003fb4:	e0 88 00 09 	brls	80003fc6 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003fb8:	6c 18       	ld.w	r8,r6[0x4]
80003fba:	ad b8       	sbr	r8,0xd
80003fbc:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003fbe:	8e b8       	ld.uh	r8,r7[0x6]
80003fc0:	20 28       	sub	r8,2
80003fc2:	8d a8       	st.w	r6[0x28],r8
80003fc4:	c0 68       	rjmp	80003fd0 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003fc6:	6c 19       	ld.w	r9,r6[0x4]
80003fc8:	5c 78       	castu.h	r8
80003fca:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003fce:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003fd0:	6c 18       	ld.w	r8,r6[0x4]
80003fd2:	e0 18 ff f0 	andl	r8,0xfff0
80003fd6:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003fd8:	35 08       	mov	r8,80
80003fda:	8d 08       	st.w	r6[0x0],r8
80003fdc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003fe0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003fe4:	80 00       	ld.sh	r0,r0[0x0]
80003fe6:	3e f4       	mov	r4,-17
80003fe8:	80 00       	ld.sh	r0,r0[0x0]
80003fea:	3d e4       	mov	r4,-34

80003fec <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80003fec:	48 68       	lddpc	r8,80004004 <fat_check_open+0x18>
80003fee:	11 89       	ld.ub	r9,r8[0x0]
80003ff0:	30 08       	mov	r8,0
80003ff2:	f0 09 18 00 	cp.b	r9,r8
80003ff6:	c0 20       	breq	80003ffa <fat_check_open+0xe>
80003ff8:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80003ffa:	31 79       	mov	r9,23
80003ffc:	48 38       	lddpc	r8,80004008 <fat_check_open+0x1c>
80003ffe:	b0 89       	st.b	r8[0x0],r9
80004000:	5e fd       	retal	0
80004002:	00 00       	add	r0,r0
80004004:	00 00       	add	r0,r0
80004006:	17 70       	ld.ub	r0,--r11
80004008:	00 00       	add	r0,r0
8000400a:	1a 00       	add	r0,sp

8000400c <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
8000400c:	48 68       	lddpc	r8,80004024 <fat_check_select+0x18>
8000400e:	90 19       	ld.sh	r9,r8[0x2]
80004010:	3f f8       	mov	r8,-1
80004012:	f0 09 19 00 	cp.h	r9,r8
80004016:	c0 20       	breq	8000401a <fat_check_select+0xe>
80004018:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
8000401a:	30 f9       	mov	r9,15
8000401c:	48 38       	lddpc	r8,80004028 <fat_check_select+0x1c>
8000401e:	b0 89       	st.b	r8[0x0],r9
80004020:	5e fd       	retal	0
80004022:	00 00       	add	r0,r0
80004024:	00 00       	add	r0,r0
80004026:	19 fc       	ld.ub	r12,r12[0x7]
80004028:	00 00       	add	r0,r0
8000402a:	1a 00       	add	r0,sp

8000402c <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
8000402c:	48 58       	lddpc	r8,80004040 <fat_check_is_file+0x14>
8000402e:	11 a8       	ld.ub	r8,r8[0x2]
80004030:	e2 18 00 18 	andl	r8,0x18,COH
80004034:	c0 21       	brne	80004038 <fat_check_is_file+0xc>
80004036:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80004038:	31 39       	mov	r9,19
8000403a:	48 38       	lddpc	r8,80004044 <fat_check_is_file+0x18>
8000403c:	b0 89       	st.b	r8[0x0],r9
8000403e:	5e fd       	retal	0
80004040:	00 00       	add	r0,r0
80004042:	17 70       	ld.ub	r0,--r11
80004044:	00 00       	add	r0,r0
80004046:	1a 00       	add	r0,sp

80004048 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80004048:	49 68       	lddpc	r8,800040a0 <fat_checkcluster+0x58>
8000404a:	70 18       	ld.w	r8,r8[0x4]
8000404c:	58 08       	cp.w	r8,0
8000404e:	c0 21       	brne	80004052 <fat_checkcluster+0xa>
80004050:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80004052:	49 59       	lddpc	r9,800040a4 <fat_checkcluster+0x5c>
80004054:	13 89       	ld.ub	r9,r9[0x0]
80004056:	30 3a       	mov	r10,3
80004058:	f4 09 18 00 	cp.b	r9,r10
8000405c:	c0 a1       	brne	80004070 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000405e:	e0 69 ff f7 	mov	r9,65527
80004062:	ea 19 0f ff 	orh	r9,0xfff
80004066:	12 38       	cp.w	r8,r9
80004068:	e0 8b 00 19 	brhi	8000409a <fat_checkcluster+0x52>
8000406c:	5f 0c       	sreq	r12
8000406e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004070:	30 2a       	mov	r10,2
80004072:	f4 09 18 00 	cp.b	r9,r10
80004076:	c0 71       	brne	80004084 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80004078:	e0 48 ff f7 	cp.w	r8,65527
8000407c:	e0 8b 00 0f 	brhi	8000409a <fat_checkcluster+0x52>
80004080:	5f 0c       	sreq	r12
80004082:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004084:	30 1a       	mov	r10,1
80004086:	f4 09 18 00 	cp.b	r9,r10
8000408a:	c0 20       	breq	8000408e <fat_checkcluster+0x46>
8000408c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
8000408e:	e0 48 0f f7 	cp.w	r8,4087
80004092:	e0 8b 00 04 	brhi	8000409a <fat_checkcluster+0x52>
80004096:	5f 0c       	sreq	r12
80004098:	5e fc       	retal	r12
8000409a:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
8000409c:	5e fc       	retal	r12
8000409e:	00 00       	add	r0,r0
800040a0:	00 00       	add	r0,r0
800040a2:	1a 50       	eor	r0,sp
800040a4:	00 00       	add	r0,r0
800040a6:	19 fc       	ld.ub	r12,r12[0x7]

800040a8 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800040a8:	30 0a       	mov	r10,0
800040aa:	48 88       	lddpc	r8,800040c8 <fat_cache_clusterlist_reset+0x20>
800040ac:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800040ae:	48 88       	lddpc	r8,800040cc <fat_cache_clusterlist_reset+0x24>
800040b0:	30 19       	mov	r9,1
800040b2:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800040b4:	3f f9       	mov	r9,-1
800040b6:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800040b8:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800040ba:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800040be:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800040c2:	f1 69 00 15 	st.b	r8[21],r9
   }
}
800040c6:	5e fc       	retal	r12
800040c8:	00 00       	add	r0,r0
800040ca:	1a 02       	add	r2,sp
800040cc:	00 00       	add	r0,r0
800040ce:	17 84       	ld.ub	r4,r11[0x0]

800040d0 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800040d0:	48 c9       	lddpc	r9,80004100 <fat_cache_clusterlist_update_start+0x30>
800040d2:	13 88       	ld.ub	r8,r9[0x0]
800040d4:	f8 08 18 00 	cp.b	r8,r12
800040d8:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800040da:	48 ba       	lddpc	r10,80004104 <fat_cache_clusterlist_update_start+0x34>
800040dc:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800040de:	f0 0a 15 02 	lsl	r10,r8,0x2
800040e2:	10 0a       	add	r10,r8
800040e4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800040e8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800040ea:	3f fb       	mov	r11,-1
800040ec:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800040ee:	2f fa       	sub	r10,-1
800040f0:	48 6b       	lddpc	r11,80004108 <fat_cache_clusterlist_update_start+0x38>
800040f2:	76 0b       	ld.w	r11,r11[0x0]
800040f4:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800040f8:	48 59       	lddpc	r9,8000410c <fat_cache_clusterlist_update_start+0x3c>
800040fa:	72 19       	ld.w	r9,r9[0x4]
800040fc:	91 29       	st.w	r8[0x8],r9
}
800040fe:	5e fc       	retal	r12
80004100:	00 00       	add	r0,r0
80004102:	17 84       	ld.ub	r4,r11[0x0]
80004104:	00 00       	add	r0,r0
80004106:	1a 02       	add	r2,sp
80004108:	00 00       	add	r0,r0
8000410a:	1a 50       	eor	r0,sp
8000410c:	00 00       	add	r0,r0
8000410e:	1a 58       	eor	r8,sp

80004110 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80004110:	49 88       	lddpc	r8,80004170 <fat_cache_clusterlist_update_select+0x60>
80004112:	11 88       	ld.ub	r8,r8[0x0]
80004114:	49 8a       	lddpc	r10,80004174 <fat_cache_clusterlist_update_select+0x64>
80004116:	f0 08 00 2b 	add	r11,r8,r8<<0x2
8000411a:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
8000411e:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80004120:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004122:	15 8a       	ld.ub	r10,r10[0x0]
80004124:	f2 0a 18 00 	cp.b	r10,r9
80004128:	c0 a1       	brne	8000413c <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
8000412a:	49 3a       	lddpc	r10,80004174 <fat_cache_clusterlist_update_select+0x64>
8000412c:	15 9a       	ld.ub	r10,r10[0x1]
8000412e:	f4 0b 18 00 	cp.b	r11,r10
80004132:	e0 88 00 05 	brls	8000413c <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004136:	2f fa       	sub	r10,-1
80004138:	48 fc       	lddpc	r12,80004174 <fat_cache_clusterlist_update_select+0x64>
8000413a:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
8000413c:	48 ea       	lddpc	r10,80004174 <fat_cache_clusterlist_update_select+0x64>
8000413e:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004142:	f2 0a 18 00 	cp.b	r10,r9
80004146:	c0 c1       	brne	8000415e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80004148:	48 b9       	lddpc	r9,80004174 <fat_cache_clusterlist_update_select+0x64>
8000414a:	f3 39 00 15 	ld.ub	r9,r9[21]
8000414e:	f2 0b 18 00 	cp.b	r11,r9
80004152:	e0 88 00 06 	brls	8000415e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004156:	2f f9       	sub	r9,-1
80004158:	48 7a       	lddpc	r10,80004174 <fat_cache_clusterlist_update_select+0x64>
8000415a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
8000415e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004162:	48 59       	lddpc	r9,80004174 <fat_cache_clusterlist_update_select+0x64>
80004164:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004168:	30 09       	mov	r9,0
8000416a:	b0 99       	st.b	r8[0x1],r9
}
8000416c:	5e fc       	retal	r12
8000416e:	00 00       	add	r0,r0
80004170:	00 00       	add	r0,r0
80004172:	1a 02       	add	r2,sp
80004174:	00 00       	add	r0,r0
80004176:	17 84       	ld.ub	r4,r11[0x0]

80004178 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80004178:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
8000417c:	49 08       	lddpc	r8,800041bc <fat_cache_clusterlist_update_finish+0x44>
8000417e:	11 88       	ld.ub	r8,r8[0x0]
80004180:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004184:	48 f9       	lddpc	r9,800041c0 <fat_cache_clusterlist_update_finish+0x48>
80004186:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000418a:	f0 ca ff f8 	sub	r10,r8,-8
8000418e:	48 eb       	lddpc	r11,800041c4 <fat_cache_clusterlist_update_finish+0x4c>
80004190:	17 97       	ld.ub	r7,r11[0x1]
80004192:	74 09       	ld.w	r9,r10[0x0]
80004194:	f2 07 0d 06 	divu	r6,r9,r7
80004198:	0e 99       	mov	r9,r7
8000419a:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
8000419c:	17 8b       	ld.ub	r11,r11[0x0]
8000419e:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
800041a0:	74 0b       	ld.w	r11,r10[0x0]
800041a2:	12 1b       	sub	r11,r9
800041a4:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
800041a6:	48 9a       	lddpc	r10,800041c8 <fat_cache_clusterlist_update_finish+0x50>
800041a8:	74 0b       	ld.w	r11,r10[0x0]
800041aa:	12 1b       	sub	r11,r9
800041ac:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
800041ae:	74 1a       	ld.w	r10,r10[0x4]
800041b0:	14 09       	add	r9,r10
800041b2:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
800041b4:	f0 1f 00 06 	mcall	800041cc <fat_cache_clusterlist_update_finish+0x54>
}
800041b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041bc:	00 00       	add	r0,r0
800041be:	1a 02       	add	r2,sp
800041c0:	00 00       	add	r0,r0
800041c2:	17 84       	ld.ub	r4,r11[0x0]
800041c4:	00 00       	add	r0,r0
800041c6:	19 b0       	ld.ub	r0,r12[0x3]
800041c8:	00 00       	add	r0,r0
800041ca:	1a 58       	eor	r8,sp
800041cc:	80 00       	ld.sh	r0,r0[0x0]
800041ce:	41 10       	lddsp	r0,sp[0x44]

800041d0 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
800041d0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
800041d4:	4c 18       	lddpc	r8,800042d8 <fat_cache_clusterlist_update_read+0x108>
800041d6:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041d8:	4c 18       	lddpc	r8,800042dc <fat_cache_clusterlist_update_read+0x10c>
800041da:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041dc:	4c 18       	lddpc	r8,800042e0 <fat_cache_clusterlist_update_read+0x110>
800041de:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041e0:	4c 18       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
800041e2:	11 88       	ld.ub	r8,r8[0x0]
800041e4:	f8 08 18 00 	cp.b	r8,r12
800041e8:	c1 11       	brne	8000420a <fat_cache_clusterlist_update_read+0x3a>
800041ea:	4b f8       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
800041ec:	11 a8       	ld.ub	r8,r8[0x2]
800041ee:	f2 08 18 00 	cp.b	r8,r9
800041f2:	c0 c1       	brne	8000420a <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041f4:	4b c8       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
800041f6:	70 18       	ld.w	r8,r8[0x4]
800041f8:	14 38       	cp.w	r8,r10
800041fa:	c0 81       	brne	8000420a <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041fc:	4b a8       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
800041fe:	70 28       	ld.w	r8,r8[0x8]
80004200:	10 3b       	cp.w	r11,r8
80004202:	c0 43       	brcs	8000420a <fat_cache_clusterlist_update_read+0x3a>
80004204:	30 0a       	mov	r10,0
80004206:	14 99       	mov	r9,r10
80004208:	c1 88       	rjmp	80004238 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
8000420a:	4b 78       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
8000420c:	f1 38 00 14 	ld.ub	r8,r8[20]
80004210:	f8 08 18 00 	cp.b	r8,r12
80004214:	c5 e1       	brne	800042d0 <fat_cache_clusterlist_update_read+0x100>
80004216:	4b 48       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
80004218:	f1 38 00 16 	ld.ub	r8,r8[22]
8000421c:	f2 08 18 00 	cp.b	r8,r9
80004220:	c5 81       	brne	800042d0 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004222:	4b 18       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
80004224:	70 68       	ld.w	r8,r8[0x18]
80004226:	14 38       	cp.w	r8,r10
80004228:	c5 41       	brne	800042d0 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
8000422a:	4a f8       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
8000422c:	70 78       	ld.w	r8,r8[0x1c]
8000422e:	16 38       	cp.w	r8,r11
80004230:	e0 8b 00 50 	brhi	800042d0 <fat_cache_clusterlist_update_read+0x100>
80004234:	30 1a       	mov	r10,1
80004236:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80004238:	f2 0e 15 02 	lsl	lr,r9,0x2
8000423c:	12 0e       	add	lr,r9
8000423e:	4a ac       	lddpc	r12,800042e4 <fat_cache_clusterlist_update_read+0x114>
80004240:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80004244:	78 4c       	ld.w	r12,r12[0x10]
80004246:	f6 08 01 08 	sub	r8,r11,r8
8000424a:	10 3c       	cp.w	r12,r8
8000424c:	e0 88 00 16 	brls	80004278 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004250:	4a 4b       	lddpc	r11,800042e0 <fat_cache_clusterlist_update_read+0x110>
80004252:	f2 0e 15 02 	lsl	lr,r9,0x2
80004256:	fc 09 00 09 	add	r9,lr,r9
8000425a:	4a 3e       	lddpc	lr,800042e4 <fat_cache_clusterlist_update_read+0x114>
8000425c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80004260:	72 39       	ld.w	r9,r9[0xc]
80004262:	f0 09 00 09 	add	r9,r8,r9
80004266:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80004268:	10 1c       	sub	r12,r8
8000426a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
8000426c:	49 f8       	lddpc	r8,800042e8 <fat_cache_clusterlist_update_read+0x118>
8000426e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004270:	f0 1f 00 1f 	mcall	800042ec <fat_cache_clusterlist_update_read+0x11c>
80004274:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80004278:	49 c8       	lddpc	r8,800042e8 <fat_cache_clusterlist_update_read+0x118>
8000427a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
8000427c:	f2 08 15 02 	lsl	r8,r9,0x2
80004280:	f0 09 00 09 	add	r9,r8,r9
80004284:	49 88       	lddpc	r8,800042e4 <fat_cache_clusterlist_update_read+0x114>
80004286:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000428a:	3f f9       	mov	r9,-1
8000428c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000428e:	70 4c       	ld.w	r12,r8[0x10]
80004290:	49 2a       	lddpc	r10,800042d8 <fat_cache_clusterlist_update_read+0x108>
80004292:	15 99       	ld.ub	r9,r10[0x1]
80004294:	70 3e       	ld.w	lr,r8[0xc]
80004296:	f8 0e 00 0e 	add	lr,r12,lr
8000429a:	20 1e       	sub	lr,1
8000429c:	74 57       	ld.w	r7,r10[0x14]
8000429e:	fc 07 01 07 	sub	r7,lr,r7
800042a2:	74 4a       	ld.w	r10,r10[0x10]
800042a4:	14 17       	sub	r7,r10
800042a6:	ee 09 0d 06 	divu	r6,r7,r9
800042aa:	0c 97       	mov	r7,r6
800042ac:	2f e7       	sub	r7,-2
800042ae:	48 ca       	lddpc	r10,800042dc <fat_cache_clusterlist_update_read+0x10c>
800042b0:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
800042b2:	2f 88       	sub	r8,-8
800042b4:	70 0a       	ld.w	r10,r8[0x0]
800042b6:	14 0c       	add	r12,r10
800042b8:	f8 c7 00 01 	sub	r7,r12,1
800042bc:	ee 09 0d 06 	divu	r6,r7,r9
800042c0:	ad 39       	mul	r9,r6
800042c2:	48 8a       	lddpc	r10,800042e0 <fat_cache_clusterlist_update_read+0x110>
800042c4:	f6 09 01 09 	sub	r9,r11,r9
800042c8:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
800042ca:	91 0b       	st.w	r8[0x0],r11
800042cc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
800042d0:	f0 1f 00 08 	mcall	800042f0 <fat_cache_clusterlist_update_read+0x120>
800042d4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800042d8:	00 00       	add	r0,r0
800042da:	19 b0       	ld.ub	r0,r12[0x3]
800042dc:	00 00       	add	r0,r0
800042de:	1a 50       	eor	r0,sp
800042e0:	00 00       	add	r0,r0
800042e2:	1a 58       	eor	r8,sp
800042e4:	00 00       	add	r0,r0
800042e6:	17 84       	ld.ub	r4,r11[0x0]
800042e8:	00 00       	add	r0,r0
800042ea:	1a 02       	add	r2,sp
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	41 10       	lddsp	r0,sp[0x44]
800042f0:	80 00       	ld.sh	r0,r0[0x0]
800042f2:	40 d0       	lddsp	r0,sp[0x34]

800042f4 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
800042f4:	30 d9       	mov	r9,13
800042f6:	48 48       	lddpc	r8,80004304 <fat_entry_is_dir+0x10>
800042f8:	b0 89       	st.b	r8[0x0],r9
800042fa:	48 48       	lddpc	r8,80004308 <fat_entry_is_dir+0x14>
800042fc:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
800042fe:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80004302:	5e fc       	retal	r12
80004304:	00 00       	add	r0,r0
80004306:	1a 00       	add	r0,sp
80004308:	00 00       	add	r0,r0
8000430a:	17 70       	ld.ub	r0,--r11

8000430c <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000430c:	3f f9       	mov	r9,-1
8000430e:	48 c8       	lddpc	r8,8000433c <fat_clear_entry_info_and_ptr+0x30>
80004310:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80004312:	48 c8       	lddpc	r8,80004340 <fat_clear_entry_info_and_ptr+0x34>
80004314:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80004318:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000431c:	30 08       	mov	r8,0
8000431e:	f0 09 18 00 	cp.b	r9,r8
80004322:	c0 51       	brne	8000432c <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80004324:	10 99       	mov	r9,r8
80004326:	48 78       	lddpc	r8,80004340 <fat_clear_entry_info_and_ptr+0x34>
80004328:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
8000432c:	48 68       	lddpc	r8,80004344 <fat_clear_entry_info_and_ptr+0x38>
8000432e:	30 09       	mov	r9,0
80004330:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80004332:	30 0a       	mov	r10,0
80004334:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80004336:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80004338:	b0 89       	st.b	r8[0x0],r9
}
8000433a:	5e fc       	retal	r12
8000433c:	00 00       	add	r0,r0
8000433e:	19 fc       	ld.ub	r12,r12[0x7]
80004340:	00 00       	add	r0,r0
80004342:	19 b0       	ld.ub	r0,r12[0x3]
80004344:	00 00       	add	r0,r0
80004346:	17 70       	ld.ub	r0,--r11

80004348 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80004348:	30 08       	mov	r8,0
8000434a:	f0 0c 19 00 	cp.h	r12,r8
8000434e:	5f 0a       	sreq	r10
80004350:	35 c9       	mov	r9,92
80004352:	f2 0c 19 00 	cp.h	r12,r9
80004356:	5f 09       	sreq	r9
80004358:	f5 e9 10 09 	or	r9,r10,r9
8000435c:	f0 09 18 00 	cp.b	r9,r8
80004360:	c0 20       	breq	80004364 <fat_check_eof_name+0x1c>
80004362:	5e ff       	retal	1
80004364:	32 f8       	mov	r8,47
80004366:	f0 0c 19 00 	cp.h	r12,r8
8000436a:	5f 0c       	sreq	r12
}
8000436c:	5e fc       	retal	r12
8000436e:	d7 03       	nop

80004370 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80004370:	48 48       	lddpc	r8,80004380 <fat_get_ptr_entry+0x10>
80004372:	90 98       	ld.uh	r8,r8[0x2]
80004374:	a5 78       	lsl	r8,0x5
80004376:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000437a:	48 3c       	lddpc	r12,80004384 <fat_get_ptr_entry+0x14>
8000437c:	10 0c       	add	r12,r8
8000437e:	5e fc       	retal	r12
80004380:	00 00       	add	r0,r0
80004382:	19 fc       	ld.ub	r12,r12[0x7]
80004384:	00 00       	add	r0,r0
80004386:	17 b0       	ld.ub	r0,r11[0x3]

80004388 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80004388:	d4 31       	pushm	r0-r7,lr
8000438a:	20 3d       	sub	sp,12
8000438c:	18 97       	mov	r7,r12
8000438e:	16 94       	mov	r4,r11
80004390:	14 96       	mov	r6,r10
80004392:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80004394:	f0 1f 00 5e 	mcall	8000450c <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80004398:	19 88       	ld.ub	r8,r12[0x0]
8000439a:	30 09       	mov	r9,0
8000439c:	f2 08 18 00 	cp.b	r8,r9
800043a0:	5f 0b       	sreq	r11
800043a2:	3e 5a       	mov	r10,-27
800043a4:	f4 08 18 00 	cp.b	r8,r10
800043a8:	5f 0a       	sreq	r10
800043aa:	f7 ea 10 0a 	or	r10,r11,r10
800043ae:	f2 0a 18 00 	cp.b	r10,r9
800043b2:	c0 71       	brne	800043c0 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
800043b4:	f9 3a 00 0b 	ld.ub	r10,r12[11]
800043b8:	30 f9       	mov	r9,15
800043ba:	f2 0a 18 00 	cp.b	r10,r9
800043be:	c0 60       	breq	800043ca <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
800043c0:	30 b9       	mov	r9,11
800043c2:	4d 48       	lddpc	r8,80004510 <fat_entry_longname+0x188>
800043c4:	b0 89       	st.b	r8[0x0],r9
800043c6:	30 0c       	mov	r12,0
      return false;
800043c8:	c9 c8       	rjmp	80004500 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
800043ca:	4d 39       	lddpc	r9,80004514 <fat_entry_longname+0x18c>
800043cc:	13 8a       	ld.ub	r10,r9[0x0]
800043ce:	30 09       	mov	r9,0
800043d0:	f2 0a 18 00 	cp.b	r10,r9
800043d4:	c0 90       	breq	800043e6 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
800043d6:	e2 18 00 40 	andl	r8,0x40,COH
800043da:	c0 61       	brne	800043e6 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800043dc:	31 09       	mov	r9,16
800043de:	4c d8       	lddpc	r8,80004510 <fat_entry_longname+0x188>
800043e0:	b0 89       	st.b	r8[0x0],r9
800043e2:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800043e4:	c8 e8       	rjmp	80004500 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800043e6:	2f fc       	sub	r12,-1
800043e8:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043ea:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043ee:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800043f0:	4c 95       	lddpc	r5,80004514 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043f2:	20 14       	sub	r4,1
800043f4:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800043f6:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800043f8:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043fa:	19 89       	ld.ub	r9,r12[0x0]
800043fc:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
800043fe:	19 99       	ld.ub	r9,r12[0x1]
80004400:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
80004402:	58 06       	cp.w	r6,0
80004404:	c0 f0       	breq	80004422 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
80004406:	0b 89       	ld.ub	r9,r5[0x0]
80004408:	f6 09 18 00 	cp.b	r9,r11
8000440c:	c3 91       	brne	8000447e <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000440e:	40 1e       	lddsp	lr,sp[0x4]
80004410:	1c 38       	cp.w	r8,lr
80004412:	c0 55       	brlt	8000441c <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80004414:	30 08       	mov	r8,0
80004416:	ae 88       	st.b	r7[0x0],r8
80004418:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
8000441a:	c7 38       	rjmp	80004500 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000441c:	9a 59       	ld.sh	r9,sp[0xa]
8000441e:	ae 89       	st.b	r7[0x0],r9
80004420:	c2 f8       	rjmp	8000447e <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
80004422:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80004424:	32 a3       	mov	r3,42
80004426:	e6 09 19 00 	cp.h	r9,r3
8000442a:	c6 a0       	breq	800044fe <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000442c:	9a 5e       	ld.sh	lr,sp[0xa]
8000442e:	58 0e       	cp.w	lr,0
80004430:	c0 e1       	brne	8000444c <fat_entry_longname+0xc4>
80004432:	35 c0       	mov	r0,92
80004434:	e0 09 19 00 	cp.h	r9,r0
80004438:	5f 12       	srne	r2
8000443a:	32 f3       	mov	r3,47
8000443c:	e6 09 19 00 	cp.h	r9,r3
80004440:	5f 13       	srne	r3
80004442:	e5 e3 00 03 	and	r3,r2,r3
80004446:	f6 03 18 00 	cp.b	r3,r11
8000444a:	c1 e0       	breq	80004486 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000444c:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80004450:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80004454:	e4 c0 ff e0 	sub	r0,r2,-32
80004458:	00 33       	cp.w	r3,r0
8000445a:	c0 41       	brne	80004462 <fat_entry_longname+0xda>
8000445c:	40 00       	lddsp	r0,sp[0x0]
8000445e:	58 00       	cp.w	r0,0
80004460:	c0 f0       	breq	8000447e <fat_entry_longname+0xf6>
80004462:	22 02       	sub	r2,32
80004464:	04 33       	cp.w	r3,r2
80004466:	c0 41       	brne	8000446e <fat_entry_longname+0xe6>
80004468:	40 03       	lddsp	r3,sp[0x0]
8000446a:	58 03       	cp.w	r3,0
8000446c:	c0 90       	breq	8000447e <fat_entry_longname+0xf6>
8000446e:	fc 09 19 00 	cp.h	r9,lr
80004472:	c0 60       	breq	8000447e <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80004474:	31 69       	mov	r9,22
80004476:	4a 78       	lddpc	r8,80004510 <fat_entry_longname+0x188>
80004478:	b0 89       	st.b	r8[0x0],r9
8000447a:	30 0c       	mov	r12,0
           return false;
8000447c:	c4 28       	rjmp	80004500 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
8000447e:	9a 59       	ld.sh	r9,sp[0xa]
80004480:	e2 09 19 00 	cp.h	r9,r1
80004484:	c0 b1       	brne	8000449a <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80004486:	4a 49       	lddpc	r9,80004514 <fat_entry_longname+0x18c>
80004488:	13 8a       	ld.ub	r10,r9[0x0]
8000448a:	30 09       	mov	r9,0
8000448c:	f2 0a 18 00 	cp.b	r10,r9
80004490:	c3 70       	breq	800044fe <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80004492:	2f f8       	sub	r8,-1
80004494:	ae 08       	st.h	r7[0x0],r8
80004496:	30 1c       	mov	r12,1
80004498:	c3 48       	rjmp	80004500 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000449a:	e8 08 18 00 	cp.b	r8,r4
8000449e:	c0 31       	brne	800044a4 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
800044a0:	2f dc       	sub	r12,-3
800044a2:	c2 58       	rjmp	800044ec <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
800044a4:	30 a9       	mov	r9,10
800044a6:	f2 08 18 00 	cp.b	r8,r9
800044aa:	c0 31       	brne	800044b0 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
800044ac:	2f ec       	sub	r12,-2
800044ae:	c1 f8       	rjmp	800044ec <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
800044b0:	30 c9       	mov	r9,12
800044b2:	f2 08 18 00 	cp.b	r8,r9
800044b6:	c1 b1       	brne	800044ec <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
800044b8:	f9 38 ff e2 	ld.ub	r8,r12[-30]
800044bc:	e2 18 00 40 	andl	r8,0x40,COH
800044c0:	c0 61       	brne	800044cc <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
800044c2:	31 09       	mov	r9,16
800044c4:	49 38       	lddpc	r8,80004510 <fat_entry_longname+0x188>
800044c6:	b0 89       	st.b	r8[0x0],r9
800044c8:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
800044ca:	c1 b8       	rjmp	80004500 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800044cc:	58 06       	cp.w	r6,0
800044ce:	c0 b0       	breq	800044e4 <fat_entry_longname+0x15c>
800044d0:	49 18       	lddpc	r8,80004514 <fat_entry_longname+0x18c>
800044d2:	11 89       	ld.ub	r9,r8[0x0]
800044d4:	30 08       	mov	r8,0
800044d6:	f0 09 18 00 	cp.b	r9,r8
800044da:	c1 50       	breq	80004504 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800044dc:	30 e8       	mov	r8,14
800044de:	ae 08       	st.h	r7[0x0],r8
800044e0:	30 1c       	mov	r12,1
               return true;
800044e2:	c0 f8       	rjmp	80004500 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800044e4:	0f 9c       	ld.ub	r12,r7[0x1]
800044e6:	f0 1f 00 0d 	mcall	80004518 <fat_entry_longname+0x190>
800044ea:	c0 b8       	rjmp	80004500 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800044ec:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800044ee:	f6 09 18 00 	cp.b	r9,r11
800044f2:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800044f6:	2f f8       	sub	r8,-1
800044f8:	5c 58       	castu.b	r8
      ptr_entry+=2;
800044fa:	2f ec       	sub	r12,-2
   }
800044fc:	c7 fb       	rjmp	800043fa <fat_entry_longname+0x72>
800044fe:	30 1c       	mov	r12,1
}
80004500:	2f dd       	sub	sp,-12
80004502:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80004504:	30 08       	mov	r8,0
80004506:	ae 98       	st.b	r7[0x1],r8
80004508:	30 1c       	mov	r12,1
               }
               return true;
8000450a:	cf bb       	rjmp	80004500 <fat_entry_longname+0x178>
8000450c:	80 00       	ld.sh	r0,r0[0x0]
8000450e:	43 70       	lddsp	r0,sp[0xdc]
80004510:	00 00       	add	r0,r0
80004512:	1a 00       	add	r0,sp
80004514:	00 00       	add	r0,r0
80004516:	1a 01       	add	r1,sp
80004518:	80 00       	ld.sh	r0,r0[0x0]
8000451a:	43 48       	lddsp	r8,sp[0xd0]

8000451c <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
8000451c:	d4 31       	pushm	r0-r7,lr
8000451e:	20 2d       	sub	sp,8
80004520:	18 97       	mov	r7,r12
80004522:	50 1b       	stdsp	sp[0x4],r11
80004524:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80004526:	31 69       	mov	r9,22
80004528:	4b c8       	lddpc	r8,80004618 <fat_entry_shortname+0xfc>
8000452a:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
8000452c:	f0 1f 00 3c 	mcall	8000461c <fat_entry_shortname+0x100>
80004530:	30 08       	mov	r8,0
80004532:	10 9a       	mov	r10,r8
80004534:	30 1b       	mov	r11,1
80004536:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004538:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000453a:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000453c:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000453e:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80004540:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004542:	fc 08 18 00 	cp.b	r8,lr
80004546:	c1 90       	breq	80004578 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80004548:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000454c:	ea 08 18 00 	cp.b	r8,r5
80004550:	c0 41       	brne	80004558 <fat_entry_shortname+0x3c>
80004552:	40 01       	lddsp	r1,sp[0x0]
80004554:	58 01       	cp.w	r1,0
80004556:	c0 81       	brne	80004566 <fat_entry_shortname+0x4a>
80004558:	e8 09 18 00 	cp.b	r9,r4
8000455c:	c0 f1       	brne	8000457a <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000455e:	ea 08 18 00 	cp.b	r8,r5
80004562:	e0 8b 00 0b 	brhi	80004578 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80004566:	f9 39 00 08 	ld.ub	r9,r12[8]
8000456a:	e8 09 18 00 	cp.b	r9,r4
8000456e:	c0 50       	breq	80004578 <fat_entry_shortname+0x5c>
80004570:	30 78       	mov	r8,7
80004572:	32 e9       	mov	r9,46
80004574:	50 03       	stdsp	sp[0x0],r3
80004576:	c0 28       	rjmp	8000457a <fat_entry_shortname+0x5e>
80004578:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000457a:	58 06       	cp.w	r6,0
8000457c:	c1 80       	breq	800045ac <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
8000457e:	4a 9b       	lddpc	r11,80004620 <fat_entry_shortname+0x104>
80004580:	17 81       	ld.ub	r1,r11[0x0]
80004582:	30 0b       	mov	r11,0
80004584:	f6 01 18 00 	cp.b	r1,r11
80004588:	c2 c1       	brne	800045e0 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000458a:	40 1b       	lddsp	r11,sp[0x4]
8000458c:	20 1b       	sub	r11,1
8000458e:	16 3a       	cp.w	r10,r11
80004590:	c0 35       	brlt	80004596 <fat_entry_shortname+0x7a>
80004592:	06 99       	mov	r9,r3
80004594:	c0 a8       	rjmp	800045a8 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80004596:	f2 c1 00 41 	sub	r1,r9,65
8000459a:	31 9b       	mov	r11,25
8000459c:	f6 01 18 00 	cp.b	r1,r11
800045a0:	e0 8b 00 04 	brhi	800045a8 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
800045a4:	2e 09       	sub	r9,-32
800045a6:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
800045a8:	ae 89       	st.b	r7[0x0],r9
800045aa:	c1 b8       	rjmp	800045e0 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
800045ac:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
800045ae:	e4 0b 18 00 	cp.b	r11,r2
800045b2:	c2 f0       	breq	80004610 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
800045b4:	58 09       	cp.w	r9,0
800045b6:	c0 c1       	brne	800045ce <fat_entry_shortname+0xb2>
800045b8:	35 c1       	mov	r1,92
800045ba:	e2 0b 18 00 	cp.b	r11,r1
800045be:	5f 10       	srne	r0
800045c0:	32 f1       	mov	r1,47
800045c2:	e2 0b 18 00 	cp.b	r11,r1
800045c6:	5f 11       	srne	r1
800045c8:	e1 e1 00 01 	and	r1,r0,r1
800045cc:	c0 c0       	breq	800045e4 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
800045ce:	f2 0b 18 00 	cp.b	r11,r9
800045d2:	c0 70       	breq	800045e0 <fat_entry_shortname+0xc4>
800045d4:	f2 c1 ff e0 	sub	r1,r9,-32
800045d8:	02 3b       	cp.w	r11,r1
800045da:	c0 30       	breq	800045e0 <fat_entry_shortname+0xc4>
800045dc:	30 0c       	mov	r12,0
800045de:	c1 a8       	rjmp	80004612 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800045e0:	58 09       	cp.w	r9,0
800045e2:	c0 b1       	brne	800045f8 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800045e4:	48 f8       	lddpc	r8,80004620 <fat_entry_shortname+0x104>
800045e6:	11 89       	ld.ub	r9,r8[0x0]
800045e8:	30 08       	mov	r8,0
800045ea:	f0 09 18 00 	cp.b	r9,r8
800045ee:	c1 10       	breq	80004610 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800045f0:	2f fa       	sub	r10,-1
800045f2:	ae 0a       	st.h	r7[0x0],r10
800045f4:	30 1c       	mov	r12,1
800045f6:	c0 e8       	rjmp	80004612 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800045f8:	48 a9       	lddpc	r9,80004620 <fat_entry_shortname+0x104>
800045fa:	13 8b       	ld.ub	r11,r9[0x0]
800045fc:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
800045fe:	f2 0b 18 00 	cp.b	r11,r9
80004602:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80004606:	2f fa       	sub	r10,-1
80004608:	5c 5a       	castu.b	r10
      u8_pos_entry++;
8000460a:	2f f8       	sub	r8,-1
8000460c:	5c 58       	castu.b	r8
   }
8000460e:	c9 ab       	rjmp	80004542 <fat_entry_shortname+0x26>
80004610:	30 1c       	mov	r12,1
}
80004612:	2f ed       	sub	sp,-8
80004614:	d8 32       	popm	r0-r7,pc
80004616:	00 00       	add	r0,r0
80004618:	00 00       	add	r0,r0
8000461a:	1a 00       	add	r0,sp
8000461c:	80 00       	ld.sh	r0,r0[0x0]
8000461e:	43 70       	lddsp	r0,sp[0xdc]
80004620:	00 00       	add	r0,r0
80004622:	1a 01       	add	r1,sp

80004624 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
80004624:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80004626:	f0 1f 00 10 	mcall	80004664 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000462a:	49 08       	lddpc	r8,80004668 <fat_get_entry_info+0x44>
8000462c:	f9 39 00 0b 	ld.ub	r9,r12[11]
80004630:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80004632:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80004636:	f0 c9 ff fc 	sub	r9,r8,-4
8000463a:	15 8b       	ld.ub	r11,r10[0x0]
8000463c:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000463e:	15 9a       	ld.ub	r10,r10[0x1]
80004640:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80004642:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80004646:	15 8b       	ld.ub	r11,r10[0x0]
80004648:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000464a:	15 9a       	ld.ub	r10,r10[0x1]
8000464c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000464e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80004650:	2f 88       	sub	r8,-8
80004652:	19 89       	ld.ub	r9,r12[0x0]
80004654:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80004656:	19 99       	ld.ub	r9,r12[0x1]
80004658:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000465a:	19 a9       	ld.ub	r9,r12[0x2]
8000465c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000465e:	19 b9       	ld.ub	r9,r12[0x3]
80004660:	b0 89       	st.b	r8[0x0],r9
}
80004662:	d8 02       	popm	pc
80004664:	80 00       	ld.sh	r0,r0[0x0]
80004666:	43 70       	lddsp	r0,sp[0xdc]
80004668:	00 00       	add	r0,r0
8000466a:	17 70       	ld.ub	r0,--r11

8000466c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000466c:	eb cd 40 80 	pushm	r7,lr
80004670:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80004672:	f0 1f 00 14 	mcall	800046c0 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80004676:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80004678:	58 08       	cp.w	r8,0
8000467a:	c0 61       	brne	80004686 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000467c:	30 a9       	mov	r9,10
8000467e:	49 28       	lddpc	r8,800046c4 <fat_entry_check+0x58>
80004680:	b0 89       	st.b	r8[0x0],r9
80004682:	30 07       	mov	r7,0
      return false;
80004684:	c1 a8       	rjmp	800046b8 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80004686:	30 ba       	mov	r10,11
80004688:	48 f9       	lddpc	r9,800046c4 <fat_entry_check+0x58>
8000468a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000468c:	3e 59       	mov	r9,-27
8000468e:	f2 08 18 00 	cp.b	r8,r9
80004692:	c1 20       	breq	800046b6 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80004694:	32 e9       	mov	r9,46
80004696:	f2 08 18 00 	cp.b	r8,r9
8000469a:	c0 e0       	breq	800046b6 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
8000469c:	f9 38 00 0b 	ld.ub	r8,r12[11]
800046a0:	10 99       	mov	r9,r8
800046a2:	e2 19 00 08 	andl	r9,0x8,COH
800046a6:	c0 81       	brne	800046b6 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
800046a8:	e2 18 00 10 	andl	r8,0x10,COH
800046ac:	c0 60       	breq	800046b8 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
800046ae:	ec 17 00 01 	eorl	r7,0x1
800046b2:	5c 57       	castu.b	r7
800046b4:	c0 28       	rjmp	800046b8 <fat_entry_check+0x4c>
800046b6:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
800046b8:	0e 9c       	mov	r12,r7
800046ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800046be:	00 00       	add	r0,r0
800046c0:	80 00       	ld.sh	r0,r0[0x0]
800046c2:	43 70       	lddsp	r0,sp[0xdc]
800046c4:	00 00       	add	r0,r0
800046c6:	1a 00       	add	r0,sp

800046c8 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800046c8:	48 58       	lddpc	r8,800046dc <fat_cache_reset+0x14>
800046ca:	3f f9       	mov	r9,-1
800046cc:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
800046ce:	30 09       	mov	r9,0
800046d0:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800046d4:	3f f9       	mov	r9,-1
800046d6:	91 39       	st.w	r8[0xc],r9
}
800046d8:	5e fc       	retal	r12
800046da:	00 00       	add	r0,r0
800046dc:	00 00       	add	r0,r0
800046de:	1a 38       	cp.w	r8,sp

800046e0 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800046e0:	30 19       	mov	r9,1
800046e2:	48 38       	lddpc	r8,800046ec <fat_cache_mark_sector_as_dirty+0xc>
800046e4:	f1 69 00 08 	st.b	r8[8],r9
}
800046e8:	5e fc       	retal	r12
800046ea:	00 00       	add	r0,r0
800046ec:	00 00       	add	r0,r0
800046ee:	1a 38       	cp.w	r8,sp

800046f0 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
800046f0:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
800046f2:	f0 1f 00 11 	mcall	80004734 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
800046f6:	f0 1f 00 11 	mcall	80004738 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
800046fa:	49 18       	lddpc	r8,8000473c <fat_write_entry_file+0x4c>
800046fc:	11 a9       	ld.ub	r9,r8[0x2]
800046fe:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80004702:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80004706:	f0 c9 ff fc 	sub	r9,r8,-4
8000470a:	13 9b       	ld.ub	r11,r9[0x1]
8000470c:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000470e:	13 8b       	ld.ub	r11,r9[0x0]
80004710:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
80004712:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80004716:	13 bb       	ld.ub	r11,r9[0x3]
80004718:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000471a:	13 a9       	ld.ub	r9,r9[0x2]
8000471c:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
8000471e:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80004720:	2f 88       	sub	r8,-8
80004722:	11 b9       	ld.ub	r9,r8[0x3]
80004724:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80004726:	11 a9       	ld.ub	r9,r8[0x2]
80004728:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000472a:	11 99       	ld.ub	r9,r8[0x1]
8000472c:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000472e:	11 88       	ld.ub	r8,r8[0x0]
80004730:	b8 b8       	st.b	r12[0x3],r8
}
80004732:	d8 02       	popm	pc
80004734:	80 00       	ld.sh	r0,r0[0x0]
80004736:	46 e0       	lddsp	r0,sp[0x1b8]
80004738:	80 00       	ld.sh	r0,r0[0x0]
8000473a:	43 70       	lddsp	r0,sp[0xdc]
8000473c:	00 00       	add	r0,r0
8000473e:	17 70       	ld.ub	r0,--r11

80004740 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80004740:	49 88       	lddpc	r8,800047a0 <fat_check_nav_access_file+0x60>
80004742:	11 89       	ld.ub	r9,r8[0x0]
80004744:	30 08       	mov	r8,0
80004746:	f0 09 18 00 	cp.b	r9,r8
8000474a:	c2 a0       	breq	8000479e <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000474c:	49 68       	lddpc	r8,800047a4 <fat_check_nav_access_file+0x64>
8000474e:	11 89       	ld.ub	r9,r8[0x0]
80004750:	49 68       	lddpc	r8,800047a8 <fat_check_nav_access_file+0x68>
80004752:	11 88       	ld.ub	r8,r8[0x0]
80004754:	f0 09 18 00 	cp.b	r9,r8
80004758:	c2 31       	brne	8000479e <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000475a:	49 38       	lddpc	r8,800047a4 <fat_check_nav_access_file+0x64>
8000475c:	70 89       	ld.w	r9,r8[0x20]
8000475e:	49 38       	lddpc	r8,800047a8 <fat_check_nav_access_file+0x68>
80004760:	70 88       	ld.w	r8,r8[0x20]
80004762:	10 39       	cp.w	r9,r8
80004764:	c1 d1       	brne	8000479e <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80004766:	49 28       	lddpc	r8,800047ac <fat_check_nav_access_file+0x6c>
80004768:	90 19       	ld.sh	r9,r8[0x2]
8000476a:	48 e8       	lddpc	r8,800047a0 <fat_check_nav_access_file+0x60>
8000476c:	90 18       	ld.sh	r8,r8[0x2]
8000476e:	f0 09 19 00 	cp.h	r9,r8
80004772:	c1 61       	brne	8000479e <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004774:	58 0c       	cp.w	r12,0
80004776:	c0 b0       	breq	8000478c <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80004778:	48 e8       	lddpc	r8,800047b0 <fat_check_nav_access_file+0x70>
8000477a:	11 89       	ld.ub	r9,r8[0x0]
8000477c:	30 08       	mov	r8,0
8000477e:	f0 09 18 00 	cp.b	r9,r8
80004782:	c0 e0       	breq	8000479e <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004784:	32 89       	mov	r9,40
80004786:	48 c8       	lddpc	r8,800047b4 <fat_check_nav_access_file+0x74>
80004788:	b0 89       	st.b	r8[0x0],r9
8000478a:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000478c:	48 98       	lddpc	r8,800047b0 <fat_check_nav_access_file+0x70>
8000478e:	11 88       	ld.ub	r8,r8[0x0]
80004790:	e2 18 00 02 	andl	r8,0x2,COH
80004794:	c0 50       	breq	8000479e <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
80004796:	32 99       	mov	r9,41
80004798:	48 78       	lddpc	r8,800047b4 <fat_check_nav_access_file+0x74>
8000479a:	b0 89       	st.b	r8[0x0],r9
8000479c:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
8000479e:	5e ff       	retal	1
800047a0:	00 00       	add	r0,r0
800047a2:	19 f8       	ld.ub	r8,r12[0x7]
800047a4:	00 00       	add	r0,r0
800047a6:	19 b0       	ld.ub	r0,r12[0x3]
800047a8:	00 00       	add	r0,r0
800047aa:	1a 04       	add	r4,sp
800047ac:	00 00       	add	r0,r0
800047ae:	19 fc       	ld.ub	r12,r12[0x7]
800047b0:	00 00       	add	r0,r0
800047b2:	19 e8       	ld.ub	r8,r12[0x6]
800047b4:	00 00       	add	r0,r0
800047b6:	1a 00       	add	r0,sp

800047b8 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
800047b8:	d4 21       	pushm	r4-r7,lr
800047ba:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
800047bc:	58 0c       	cp.w	r12,0
800047be:	c6 20       	breq	80004882 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
800047c0:	1a 97       	mov	r7,sp
800047c2:	4b 28       	lddpc	r8,80004888 <fat_invert_nav+0xd0>
800047c4:	70 09       	ld.w	r9,r8[0x0]
800047c6:	50 09       	stdsp	sp[0x0],r9
800047c8:	70 19       	ld.w	r9,r8[0x4]
800047ca:	50 19       	stdsp	sp[0x4],r9
800047cc:	70 29       	ld.w	r9,r8[0x8]
800047ce:	50 29       	stdsp	sp[0x8],r9
800047d0:	70 39       	ld.w	r9,r8[0xc]
800047d2:	50 39       	stdsp	sp[0xc],r9
800047d4:	fa c9 ff f0 	sub	r9,sp,-16
800047d8:	f0 ca ff f0 	sub	r10,r8,-16
800047dc:	74 0b       	ld.w	r11,r10[0x0]
800047de:	93 0b       	st.w	r9[0x0],r11
800047e0:	74 1b       	ld.w	r11,r10[0x4]
800047e2:	93 1b       	st.w	r9[0x4],r11
800047e4:	74 2b       	ld.w	r11,r10[0x8]
800047e6:	93 2b       	st.w	r9[0x8],r11
800047e8:	74 3a       	ld.w	r10,r10[0xc]
800047ea:	93 3a       	st.w	r9[0xc],r10
800047ec:	fa c9 ff e0 	sub	r9,sp,-32
800047f0:	f0 ca ff e0 	sub	r10,r8,-32
800047f4:	74 0b       	ld.w	r11,r10[0x0]
800047f6:	93 0b       	st.w	r9[0x0],r11
800047f8:	74 1b       	ld.w	r11,r10[0x4]
800047fa:	93 1b       	st.w	r9[0x4],r11
800047fc:	74 2b       	ld.w	r11,r10[0x8]
800047fe:	93 2b       	st.w	r9[0x8],r11
80004800:	74 3a       	ld.w	r10,r10[0xc]
80004802:	93 3a       	st.w	r9[0xc],r10
80004804:	70 c9       	ld.w	r9,r8[0x30]
80004806:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80004808:	f8 c6 00 01 	sub	r6,r12,1
8000480c:	5c 56       	castu.b	r6
8000480e:	ec 04 10 34 	mul	r4,r6,52
80004812:	49 f9       	lddpc	r9,8000488c <fat_invert_nav+0xd4>
80004814:	12 04       	add	r4,r9
80004816:	33 45       	mov	r5,52
80004818:	0a 9a       	mov	r10,r5
8000481a:	08 9b       	mov	r11,r4
8000481c:	10 9c       	mov	r12,r8
8000481e:	f0 1f 00 1d 	mcall	80004890 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80004822:	0a 9a       	mov	r10,r5
80004824:	1a 9b       	mov	r11,sp
80004826:	08 9c       	mov	r12,r4
80004828:	f0 1f 00 1a 	mcall	80004890 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000482c:	49 ac       	lddpc	r12,80004894 <fat_invert_nav+0xdc>
8000482e:	78 08       	ld.w	r8,r12[0x0]
80004830:	50 08       	stdsp	sp[0x0],r8
80004832:	78 18       	ld.w	r8,r12[0x4]
80004834:	50 18       	stdsp	sp[0x4],r8
80004836:	78 28       	ld.w	r8,r12[0x8]
80004838:	50 28       	stdsp	sp[0x8],r8
8000483a:	78 38       	ld.w	r8,r12[0xc]
8000483c:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000483e:	ec 04 15 04 	lsl	r4,r6,0x4
80004842:	49 68       	lddpc	r8,80004898 <fat_invert_nav+0xe0>
80004844:	10 04       	add	r4,r8
80004846:	31 05       	mov	r5,16
80004848:	0a 9a       	mov	r10,r5
8000484a:	08 9b       	mov	r11,r4
8000484c:	f0 1f 00 11 	mcall	80004890 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80004850:	0a 9a       	mov	r10,r5
80004852:	1a 9b       	mov	r11,sp
80004854:	08 9c       	mov	r12,r4
80004856:	f0 1f 00 0f 	mcall	80004890 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000485a:	49 14       	lddpc	r4,8000489c <fat_invert_nav+0xe4>
8000485c:	30 45       	mov	r5,4
8000485e:	0a 9a       	mov	r10,r5
80004860:	08 9b       	mov	r11,r4
80004862:	1a 9c       	mov	r12,sp
80004864:	f0 1f 00 0b 	mcall	80004890 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80004868:	48 e8       	lddpc	r8,800048a0 <fat_invert_nav+0xe8>
8000486a:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000486e:	0a 9a       	mov	r10,r5
80004870:	0c 9b       	mov	r11,r6
80004872:	08 9c       	mov	r12,r4
80004874:	f0 1f 00 07 	mcall	80004890 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80004878:	0a 9a       	mov	r10,r5
8000487a:	1a 9b       	mov	r11,sp
8000487c:	0c 9c       	mov	r12,r6
8000487e:	f0 1f 00 05 	mcall	80004890 <fat_invert_nav+0xd8>
}
80004882:	2f 3d       	sub	sp,-52
80004884:	d8 22       	popm	r4-r7,pc
80004886:	00 00       	add	r0,r0
80004888:	00 00       	add	r0,r0
8000488a:	19 b0       	ld.ub	r0,r12[0x3]
8000488c:	00 00       	add	r0,r0
8000488e:	1a 04       	add	r4,sp
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	b9 a6       	sbr	r6,0x18
80004894:	00 00       	add	r0,r0
80004896:	17 70       	ld.ub	r0,--r11
80004898:	00 00       	add	r0,r0
8000489a:	19 e8       	ld.ub	r8,r12[0x6]
8000489c:	00 00       	add	r0,r0
8000489e:	19 fc       	ld.ub	r12,r12[0x7]
800048a0:	00 00       	add	r0,r0
800048a2:	19 f8       	ld.ub	r8,r12[0x7]

800048a4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
800048a4:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800048a6:	49 08       	lddpc	r8,800048e4 <fat_cache_flush+0x40>
800048a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800048ac:	30 18       	mov	r8,1
800048ae:	f0 09 18 00 	cp.b	r9,r8
800048b2:	c1 81       	brne	800048e2 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800048b4:	48 c8       	lddpc	r8,800048e4 <fat_cache_flush+0x40>
800048b6:	30 09       	mov	r9,0
800048b8:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800048bc:	11 8c       	ld.ub	r12,r8[0x0]
800048be:	f0 1f 00 0b 	mcall	800048e8 <fat_cache_flush+0x44>
800048c2:	c0 50       	breq	800048cc <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
800048c4:	31 49       	mov	r9,20
800048c6:	48 a8       	lddpc	r8,800048ec <fat_cache_flush+0x48>
800048c8:	b0 89       	st.b	r8[0x0],r9
800048ca:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800048cc:	48 68       	lddpc	r8,800048e4 <fat_cache_flush+0x40>
800048ce:	48 9a       	lddpc	r10,800048f0 <fat_cache_flush+0x4c>
800048d0:	70 1b       	ld.w	r11,r8[0x4]
800048d2:	11 8c       	ld.ub	r12,r8[0x0]
800048d4:	f0 1f 00 08 	mcall	800048f4 <fat_cache_flush+0x50>
800048d8:	c0 50       	breq	800048e2 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
800048da:	30 19       	mov	r9,1
800048dc:	48 48       	lddpc	r8,800048ec <fat_cache_flush+0x48>
800048de:	b0 89       	st.b	r8[0x0],r9
800048e0:	d8 0a       	popm	pc,r12=0
         return false;
800048e2:	da 0a       	popm	pc,r12=1
800048e4:	00 00       	add	r0,r0
800048e6:	1a 38       	cp.w	r8,sp
800048e8:	80 00       	ld.sh	r0,r0[0x0]
800048ea:	72 24       	ld.w	r4,r9[0x8]
800048ec:	00 00       	add	r0,r0
800048ee:	1a 00       	add	r0,sp
800048f0:	00 00       	add	r0,r0
800048f2:	17 b0       	ld.ub	r0,r11[0x3]
800048f4:	80 00       	ld.sh	r0,r0[0x0]
800048f6:	72 54       	ld.w	r4,r9[0x14]

800048f8 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
800048f8:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
800048fa:	e0 6a 02 00 	mov	r10,512
800048fe:	30 0b       	mov	r11,0
80004900:	48 2c       	lddpc	r12,80004908 <fat_cache_clear+0x10>
80004902:	f0 1f 00 03 	mcall	8000490c <fat_cache_clear+0x14>
}
80004906:	d8 02       	popm	pc
80004908:	00 00       	add	r0,r0
8000490a:	17 b0       	ld.ub	r0,r11[0x3]
8000490c:	80 00       	ld.sh	r0,r0[0x0]
8000490e:	ba ee       	st.b	sp[0x6],lr

80004910 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80004910:	eb cd 40 80 	pushm	r7,lr
80004914:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004916:	49 78       	lddpc	r8,80004970 <fat_cache_read_sector+0x60>
80004918:	11 89       	ld.ub	r9,r8[0x0]
8000491a:	49 78       	lddpc	r8,80004974 <fat_cache_read_sector+0x64>
8000491c:	11 88       	ld.ub	r8,r8[0x0]
8000491e:	f0 09 18 00 	cp.b	r9,r8
80004922:	c0 91       	brne	80004934 <fat_cache_read_sector+0x24>
80004924:	49 38       	lddpc	r8,80004970 <fat_cache_read_sector+0x60>
80004926:	70 19       	ld.w	r9,r8[0x4]
80004928:	49 48       	lddpc	r8,80004978 <fat_cache_read_sector+0x68>
8000492a:	70 08       	ld.w	r8,r8[0x0]
8000492c:	10 39       	cp.w	r9,r8
8000492e:	c0 31       	brne	80004934 <fat_cache_read_sector+0x24>
80004930:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80004934:	f0 1f 00 12 	mcall	8000497c <fat_cache_read_sector+0x6c>
80004938:	c1 90       	breq	8000496a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
8000493a:	f0 1f 00 12 	mcall	80004980 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000493e:	48 f8       	lddpc	r8,80004978 <fat_cache_read_sector+0x68>
80004940:	70 0b       	ld.w	r11,r8[0x0]
80004942:	48 c8       	lddpc	r8,80004970 <fat_cache_read_sector+0x60>
80004944:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80004946:	58 07       	cp.w	r7,0
80004948:	c0 c0       	breq	80004960 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000494a:	48 fa       	lddpc	r10,80004984 <fat_cache_read_sector+0x74>
8000494c:	48 a8       	lddpc	r8,80004974 <fat_cache_read_sector+0x64>
8000494e:	11 8c       	ld.ub	r12,r8[0x0]
80004950:	f0 1f 00 0e 	mcall	80004988 <fat_cache_read_sector+0x78>
80004954:	c0 60       	breq	80004960 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80004956:	30 19       	mov	r9,1
80004958:	48 d8       	lddpc	r8,8000498c <fat_cache_read_sector+0x7c>
8000495a:	b0 89       	st.b	r8[0x0],r9
8000495c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004960:	48 58       	lddpc	r8,80004974 <fat_cache_read_sector+0x64>
80004962:	11 89       	ld.ub	r9,r8[0x0]
80004964:	48 38       	lddpc	r8,80004970 <fat_cache_read_sector+0x60>
80004966:	b0 89       	st.b	r8[0x0],r9
80004968:	30 1c       	mov	r12,1
   return true;
}
8000496a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000496e:	00 00       	add	r0,r0
80004970:	00 00       	add	r0,r0
80004972:	1a 38       	cp.w	r8,sp
80004974:	00 00       	add	r0,r0
80004976:	19 b0       	ld.ub	r0,r12[0x3]
80004978:	00 00       	add	r0,r0
8000497a:	17 6c       	ld.uh	r12,--r11
8000497c:	80 00       	ld.sh	r0,r0[0x0]
8000497e:	48 a4       	lddpc	r4,800049a4 <fat_cluster_readnext+0x14>
80004980:	80 00       	ld.sh	r0,r0[0x0]
80004982:	46 c8       	lddsp	r8,sp[0x1b0]
80004984:	00 00       	add	r0,r0
80004986:	17 b0       	ld.ub	r0,r11[0x3]
80004988:	80 00       	ld.sh	r0,r0[0x0]
8000498a:	72 38       	ld.w	r8,r9[0xc]
8000498c:	00 00       	add	r0,r0
8000498e:	1a 00       	add	r0,sp

80004990 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80004990:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80004992:	49 f8       	lddpc	r8,80004a0c <fat_cluster_readnext+0x7c>
80004994:	11 89       	ld.ub	r9,r8[0x0]
80004996:	30 38       	mov	r8,3
80004998:	f0 09 18 00 	cp.b	r9,r8
8000499c:	c0 61       	brne	800049a8 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
8000499e:	49 d8       	lddpc	r8,80004a10 <fat_cluster_readnext+0x80>
800049a0:	90 09       	ld.sh	r9,r8[0x0]
800049a2:	2f c9       	sub	r9,-4
800049a4:	b0 09       	st.h	r8[0x0],r9
800049a6:	c0 58       	rjmp	800049b0 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
800049a8:	49 a8       	lddpc	r8,80004a10 <fat_cluster_readnext+0x80>
800049aa:	90 09       	ld.sh	r9,r8[0x0]
800049ac:	2f e9       	sub	r9,-2
800049ae:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800049b0:	49 88       	lddpc	r8,80004a10 <fat_cluster_readnext+0x80>
800049b2:	90 09       	ld.sh	r9,r8[0x0]
800049b4:	e0 68 02 00 	mov	r8,512
800049b8:	f0 09 19 00 	cp.h	r9,r8
800049bc:	c0 c1       	brne	800049d4 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800049be:	30 09       	mov	r9,0
800049c0:	49 48       	lddpc	r8,80004a10 <fat_cluster_readnext+0x80>
800049c2:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
800049c4:	49 48       	lddpc	r8,80004a14 <fat_cluster_readnext+0x84>
800049c6:	70 09       	ld.w	r9,r8[0x0]
800049c8:	2f f9       	sub	r9,-1
800049ca:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800049cc:	30 1c       	mov	r12,1
800049ce:	f0 1f 00 13 	mcall	80004a18 <fat_cluster_readnext+0x88>
800049d2:	c1 b0       	breq	80004a08 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800049d4:	49 28       	lddpc	r8,80004a1c <fat_cluster_readnext+0x8c>
800049d6:	2f c8       	sub	r8,-4
800049d8:	48 e9       	lddpc	r9,80004a10 <fat_cluster_readnext+0x80>
800049da:	92 89       	ld.uh	r9,r9[0x0]
800049dc:	49 1a       	lddpc	r10,80004a20 <fat_cluster_readnext+0x90>
800049de:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800049e2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800049e4:	12 0a       	add	r10,r9
800049e6:	15 9a       	ld.ub	r10,r10[0x1]
800049e8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800049ea:	48 9a       	lddpc	r10,80004a0c <fat_cluster_readnext+0x7c>
800049ec:	15 8b       	ld.ub	r11,r10[0x0]
800049ee:	30 3a       	mov	r10,3
800049f0:	f4 0b 18 00 	cp.b	r11,r10
800049f4:	c0 20       	breq	800049f8 <fat_cluster_readnext+0x68>
800049f6:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800049f8:	48 aa       	lddpc	r10,80004a20 <fat_cluster_readnext+0x90>
800049fa:	f4 09 00 09 	add	r9,r10,r9
800049fe:	13 aa       	ld.ub	r10,r9[0x2]
80004a00:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80004a02:	13 b9       	ld.ub	r9,r9[0x3]
80004a04:	b0 89       	st.b	r8[0x0],r9
80004a06:	30 1c       	mov	r12,1
   }
   return true;
}
80004a08:	d8 02       	popm	pc
80004a0a:	00 00       	add	r0,r0
80004a0c:	00 00       	add	r0,r0
80004a0e:	19 fc       	ld.ub	r12,r12[0x7]
80004a10:	00 00       	add	r0,r0
80004a12:	17 80       	ld.ub	r0,r11[0x0]
80004a14:	00 00       	add	r0,r0
80004a16:	17 6c       	ld.uh	r12,--r11
80004a18:	80 00       	ld.sh	r0,r0[0x0]
80004a1a:	49 10       	lddpc	r0,80004a5c <fat_cluster_val+0x38>
80004a1c:	00 00       	add	r0,r0
80004a1e:	1a 50       	eor	r0,sp
80004a20:	00 00       	add	r0,r0
80004a22:	17 b0       	ld.ub	r0,r11[0x3]

80004a24 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80004a24:	d4 31       	pushm	r0-r7,lr
80004a26:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80004a28:	fe f8 02 18 	ld.w	r8,pc[536]
80004a2c:	11 88       	ld.ub	r8,r8[0x0]
80004a2e:	30 39       	mov	r9,3
80004a30:	f2 08 18 00 	cp.b	r8,r9
80004a34:	c0 d1       	brne	80004a4e <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80004a36:	fe fa 02 0e 	ld.w	r10,pc[526]
80004a3a:	74 09       	ld.w	r9,r10[0x0]
80004a3c:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80004a3e:	15 bb       	ld.ub	r11,r10[0x3]
80004a40:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004a44:	a3 6b       	lsl	r11,0x2
80004a46:	fe fa 02 02 	ld.w	r10,pc[514]
80004a4a:	b4 0b       	st.h	r10[0x0],r11
80004a4c:	c2 08       	rjmp	80004a8c <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80004a4e:	30 29       	mov	r9,2
80004a50:	f2 08 18 00 	cp.b	r8,r9
80004a54:	c0 81       	brne	80004a64 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004a56:	4f ca       	lddpc	r10,80004c44 <fat_cluster_val+0x220>
80004a58:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004a5a:	15 bb       	ld.ub	r11,r10[0x3]
80004a5c:	a1 7b       	lsl	r11,0x1
80004a5e:	4f ba       	lddpc	r10,80004c48 <fat_cluster_val+0x224>
80004a60:	b4 0b       	st.h	r10[0x0],r11
80004a62:	c1 58       	rjmp	80004a8c <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004a64:	30 19       	mov	r9,1
80004a66:	f2 08 18 00 	cp.b	r8,r9
80004a6a:	c0 30       	breq	80004a70 <fat_cluster_val+0x4c>
80004a6c:	30 09       	mov	r9,0
80004a6e:	c0 f8       	rjmp	80004a8c <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004a70:	4f 59       	lddpc	r9,80004c44 <fat_cluster_val+0x220>
80004a72:	72 09       	ld.w	r9,r9[0x0]
80004a74:	4f 5a       	lddpc	r10,80004c48 <fat_cluster_val+0x224>
80004a76:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80004a7a:	12 0b       	add	r11,r9
80004a7c:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80004a7e:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004a82:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004a86:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004a8a:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80004a8c:	58 05       	cp.w	r5,0
80004a8e:	c2 20       	breq	80004ad2 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004a90:	4e fa       	lddpc	r10,80004c4c <fat_cluster_val+0x228>
80004a92:	74 0a       	ld.w	r10,r10[0x0]
80004a94:	14 39       	cp.w	r9,r10
80004a96:	c0 32       	brcc	80004a9c <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004a98:	4e da       	lddpc	r10,80004c4c <fat_cluster_val+0x228>
80004a9a:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80004a9c:	4e da       	lddpc	r10,80004c50 <fat_cluster_val+0x22c>
80004a9e:	74 0a       	ld.w	r10,r10[0x0]
80004aa0:	14 39       	cp.w	r9,r10
80004aa2:	e0 88 00 04 	brls	80004aaa <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004aa6:	4e ba       	lddpc	r10,80004c50 <fat_cluster_val+0x22c>
80004aa8:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80004aaa:	30 1a       	mov	r10,1
80004aac:	f4 08 18 00 	cp.b	r8,r10
80004ab0:	c1 11       	brne	80004ad2 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ab2:	4e 68       	lddpc	r8,80004c48 <fat_cluster_val+0x224>
80004ab4:	90 0a       	ld.sh	r10,r8[0x0]
80004ab6:	e0 68 01 ff 	mov	r8,511
80004aba:	f0 0a 19 00 	cp.h	r10,r8
80004abe:	c0 a1       	brne	80004ad2 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004ac0:	f2 c8 ff ff 	sub	r8,r9,-1
80004ac4:	4e 3a       	lddpc	r10,80004c50 <fat_cluster_val+0x22c>
80004ac6:	74 0a       	ld.w	r10,r10[0x0]
80004ac8:	14 38       	cp.w	r8,r10
80004aca:	e0 88 00 04 	brls	80004ad2 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004ace:	4e 1a       	lddpc	r10,80004c50 <fat_cluster_val+0x22c>
80004ad0:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004ad2:	4e 18       	lddpc	r8,80004c54 <fat_cluster_val+0x230>
80004ad4:	70 48       	ld.w	r8,r8[0x10]
80004ad6:	10 09       	add	r9,r8
80004ad8:	4e 08       	lddpc	r8,80004c58 <fat_cluster_val+0x234>
80004ada:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004adc:	30 1c       	mov	r12,1
80004ade:	f0 1f 00 60 	mcall	80004c5c <fat_cluster_val+0x238>
80004ae2:	e0 80 00 ad 	breq	80004c3c <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80004ae6:	4d 98       	lddpc	r8,80004c48 <fat_cluster_val+0x224>
80004ae8:	90 08       	ld.sh	r8,r8[0x0]
80004aea:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80004aee:	4d d9       	lddpc	r9,80004c60 <fat_cluster_val+0x23c>
80004af0:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80004af2:	0c 97       	mov	r7,r6
80004af4:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80004af6:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80004af8:	ec c4 ff fe 	sub	r4,r6,-2
80004afc:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80004afe:	ec c3 ff fd 	sub	r3,r6,-3
80004b02:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80004b04:	4c f9       	lddpc	r9,80004c40 <fat_cluster_val+0x21c>
80004b06:	13 8a       	ld.ub	r10,r9[0x0]
80004b08:	30 19       	mov	r9,1
80004b0a:	f2 0a 18 00 	cp.b	r10,r9
80004b0e:	c1 11       	brne	80004b30 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004b10:	e0 69 01 ff 	mov	r9,511
80004b14:	f2 08 19 00 	cp.h	r8,r9
80004b18:	c0 c1       	brne	80004b30 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80004b1a:	4d 08       	lddpc	r8,80004c58 <fat_cluster_val+0x234>
80004b1c:	70 09       	ld.w	r9,r8[0x0]
80004b1e:	2f f9       	sub	r9,-1
80004b20:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004b22:	30 1c       	mov	r12,1
80004b24:	f0 1f 00 4e 	mcall	80004c5c <fat_cluster_val+0x238>
80004b28:	e0 80 00 8a 	breq	80004c3c <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80004b2c:	4c d8       	lddpc	r8,80004c60 <fat_cluster_val+0x23c>
80004b2e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004b30:	58 05       	cp.w	r5,0
80004b32:	c3 11       	brne	80004b94 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004b34:	4c 48       	lddpc	r8,80004c44 <fat_cluster_val+0x220>
80004b36:	f0 c9 ff fc 	sub	r9,r8,-4
80004b3a:	f0 cc ff f9 	sub	r12,r8,-7
80004b3e:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004b40:	2f a8       	sub	r8,-6
80004b42:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004b44:	4b fa       	lddpc	r10,80004c40 <fat_cluster_val+0x21c>
80004b46:	15 8a       	ld.ub	r10,r10[0x0]
80004b48:	30 3b       	mov	r11,3
80004b4a:	f6 0a 18 00 	cp.b	r10,r11
80004b4e:	c0 61       	brne	80004b5a <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004b50:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004b52:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004b56:	b2 80       	st.b	r9[0x0],r0
80004b58:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004b5a:	30 0b       	mov	r11,0
80004b5c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80004b5e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004b60:	30 19       	mov	r9,1
80004b62:	f2 0a 18 00 	cp.b	r10,r9
80004b66:	c0 20       	breq	80004b6a <fat_cluster_val+0x146>
80004b68:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b6a:	4b 79       	lddpc	r9,80004c44 <fat_cluster_val+0x220>
80004b6c:	13 b9       	ld.ub	r9,r9[0x3]
80004b6e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004b72:	c0 c0       	breq	80004b8a <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004b74:	19 8b       	ld.ub	r11,r12[0x0]
80004b76:	a5 8b       	lsr	r11,0x4
80004b78:	11 89       	ld.ub	r9,r8[0x0]
80004b7a:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b7e:	f6 0a 00 0a 	add	r10,r11,r10
80004b82:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004b84:	a5 89       	lsr	r9,0x4
80004b86:	b0 89       	st.b	r8[0x0],r9
80004b88:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80004b8a:	11 89       	ld.ub	r9,r8[0x0]
80004b8c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004b90:	b0 89       	st.b	r8[0x0],r9
80004b92:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004b94:	4a b8       	lddpc	r8,80004c40 <fat_cluster_val+0x21c>
80004b96:	11 88       	ld.ub	r8,r8[0x0]
80004b98:	30 19       	mov	r9,1
80004b9a:	f2 08 18 00 	cp.b	r8,r9
80004b9e:	c3 a1       	brne	80004c12 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004ba0:	4a 98       	lddpc	r8,80004c44 <fat_cluster_val+0x220>
80004ba2:	11 b8       	ld.ub	r8,r8[0x3]
80004ba4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004ba8:	c1 10       	breq	80004bca <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80004baa:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80004bae:	4a 68       	lddpc	r8,80004c44 <fat_cluster_val+0x220>
80004bb0:	2f c8       	sub	r8,-4
80004bb2:	11 b9       	ld.ub	r9,r8[0x3]
80004bb4:	f2 0a 15 04 	lsl	r10,r9,0x4
80004bb8:	14 05       	add	r5,r10
80004bba:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004bbc:	a5 89       	lsr	r9,0x4
80004bbe:	11 a8       	ld.ub	r8,r8[0x2]
80004bc0:	a5 68       	lsl	r8,0x4
80004bc2:	f2 08 00 0a 	add	r10,r9,r8
80004bc6:	5c 5a       	castu.b	r10
80004bc8:	c0 c8       	rjmp	80004be0 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80004bca:	49 f8       	lddpc	r8,80004c44 <fat_cluster_val+0x220>
80004bcc:	2f c8       	sub	r8,-4
80004bce:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004bd0:	16 9a       	mov	r10,r11
80004bd2:	e2 1a 00 f0 	andl	r10,0xf0,COH
80004bd6:	11 a8       	ld.ub	r8,r8[0x2]
80004bd8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004bdc:	10 0a       	add	r10,r8
80004bde:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004be0:	49 a8       	lddpc	r8,80004c48 <fat_cluster_val+0x224>
80004be2:	90 09       	ld.sh	r9,r8[0x0]
80004be4:	e0 68 01 ff 	mov	r8,511
80004be8:	f0 09 19 00 	cp.h	r9,r8
80004bec:	c2 31       	brne	80004c32 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80004bee:	49 d8       	lddpc	r8,80004c60 <fat_cluster_val+0x23c>
80004bf0:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80004bf2:	f0 1f 00 1d 	mcall	80004c64 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80004bf6:	49 98       	lddpc	r8,80004c58 <fat_cluster_val+0x234>
80004bf8:	70 09       	ld.w	r9,r8[0x0]
80004bfa:	20 19       	sub	r9,1
80004bfc:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80004bfe:	30 1c       	mov	r12,1
80004c00:	f0 1f 00 17 	mcall	80004c5c <fat_cluster_val+0x238>
80004c04:	c1 c0       	breq	80004c3c <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80004c06:	49 78       	lddpc	r8,80004c60 <fat_cluster_val+0x23c>
80004c08:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80004c0c:	f0 1f 00 16 	mcall	80004c64 <fat_cluster_val+0x240>
80004c10:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004c12:	48 d9       	lddpc	r9,80004c44 <fat_cluster_val+0x220>
80004c14:	2f c9       	sub	r9,-4
80004c16:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004c18:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80004c1a:	30 3b       	mov	r11,3
80004c1c:	f6 08 18 00 	cp.b	r8,r11
80004c20:	c0 91       	brne	80004c32 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004c22:	13 98       	ld.ub	r8,r9[0x1]
80004c24:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004c26:	e0 10 ff f0 	andl	r0,0xfff0
80004c2a:	13 88       	ld.ub	r8,r9[0x0]
80004c2c:	f0 00 00 00 	add	r0,r8,r0
80004c30:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004c32:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004c34:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004c36:	f0 1f 00 0c 	mcall	80004c64 <fat_cluster_val+0x240>
80004c3a:	da 3a       	popm	r0-r7,pc,r12=1
80004c3c:	d8 3a       	popm	r0-r7,pc,r12=0
80004c3e:	00 00       	add	r0,r0
80004c40:	00 00       	add	r0,r0
80004c42:	19 fc       	ld.ub	r12,r12[0x7]
80004c44:	00 00       	add	r0,r0
80004c46:	1a 50       	eor	r0,sp
80004c48:	00 00       	add	r0,r0
80004c4a:	17 80       	ld.ub	r0,r11[0x0]
80004c4c:	00 00       	add	r0,r0
80004c4e:	19 e4       	ld.ub	r4,r12[0x6]
80004c50:	00 00       	add	r0,r0
80004c52:	17 ac       	ld.ub	r12,r11[0x2]
80004c54:	00 00       	add	r0,r0
80004c56:	19 b0       	ld.ub	r0,r12[0x3]
80004c58:	00 00       	add	r0,r0
80004c5a:	17 6c       	ld.uh	r12,--r11
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	49 10       	lddpc	r0,80004ca0 <fat_cluster_list+0x38>
80004c60:	00 00       	add	r0,r0
80004c62:	17 b0       	ld.ub	r0,r11[0x3]
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	46 e0       	lddsp	r0,sp[0x1b8]

80004c68 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80004c68:	d4 31       	pushm	r0-r7,lr
80004c6a:	20 2d       	sub	sp,8
80004c6c:	18 93       	mov	r3,r12
80004c6e:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004c70:	30 89       	mov	r9,8
80004c72:	fe f8 02 8e 	ld.w	r8,pc[654]
80004c76:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004c78:	30 38       	mov	r8,3
80004c7a:	f0 0c 18 00 	cp.b	r12,r8
80004c7e:	5f 0a       	sreq	r10
80004c80:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004c82:	fe f9 02 82 	ld.w	r9,pc[642]
80004c86:	13 89       	ld.ub	r9,r9[0x0]
80004c88:	f0 09 18 00 	cp.b	r9,r8
80004c8c:	5f 08       	sreq	r8
80004c8e:	f5 e8 00 08 	and	r8,r10,r8
80004c92:	c0 60       	breq	80004c9e <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004c94:	3f fc       	mov	r12,-1
80004c96:	f0 1f 00 9d 	mcall	80004f08 <fat_cluster_list+0x2a0>
80004c9a:	e0 80 01 2f 	breq	80004ef8 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004c9e:	fe f8 02 6e 	ld.w	r8,pc[622]
80004ca2:	70 08       	ld.w	r8,r8[0x0]
80004ca4:	58 08       	cp.w	r8,0
80004ca6:	c3 b1       	brne	80004d1c <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004ca8:	40 09       	lddsp	r9,sp[0x0]
80004caa:	58 09       	cp.w	r9,0
80004cac:	e0 81 01 26 	brne	80004ef8 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004cb0:	fe f8 02 54 	ld.w	r8,pc[596]
80004cb4:	11 88       	ld.ub	r8,r8[0x0]
80004cb6:	f0 ca 00 01 	sub	r10,r8,1
80004cba:	30 19       	mov	r9,1
80004cbc:	f2 0a 18 00 	cp.b	r10,r9
80004cc0:	e0 8b 00 23 	brhi	80004d06 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004cc4:	fe f8 02 48 	ld.w	r8,pc[584]
80004cc8:	70 18       	ld.w	r8,r8[0x4]
80004cca:	fe f9 02 46 	ld.w	r9,pc[582]
80004cce:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004cd2:	12 38       	cp.w	r8,r9
80004cd4:	c1 32       	brcc	80004cfa <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004cd6:	fe f9 02 36 	ld.w	r9,pc[566]
80004cda:	fe fa 02 36 	ld.w	r10,pc[566]
80004cde:	74 4b       	ld.w	r11,r10[0x10]
80004ce0:	16 08       	add	r8,r11
80004ce2:	f5 1b 00 18 	ld.uh	r11,r10[24]
80004ce6:	16 08       	add	r8,r11
80004ce8:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004cea:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004cee:	72 18       	ld.w	r8,r9[0x4]
80004cf0:	f4 08 01 08 	sub	r8,r10,r8
80004cf4:	93 18       	st.w	r9[0x4],r8
80004cf6:	30 1c       	mov	r12,1
            return true;
80004cf8:	c0 19       	rjmp	80004efa <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80004cfa:	31 a9       	mov	r9,26
80004cfc:	fe f8 02 04 	ld.w	r8,pc[516]
80004d00:	b0 89       	st.b	r8[0x0],r9
80004d02:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004d04:	cf b8       	rjmp	80004efa <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004d06:	30 39       	mov	r9,3
80004d08:	f2 08 18 00 	cp.b	r8,r9
80004d0c:	c0 a1       	brne	80004d20 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004d0e:	fe f8 02 02 	ld.w	r8,pc[514]
80004d12:	70 69       	ld.w	r9,r8[0x18]
80004d14:	fe f8 02 00 	ld.w	r8,pc[512]
80004d18:	91 09       	st.w	r8[0x0],r9
80004d1a:	c0 38       	rjmp	80004d20 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004d1c:	4f e9       	lddpc	r9,80004f14 <fat_cluster_list+0x2ac>
80004d1e:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004d20:	30 38       	mov	r8,3
80004d22:	f0 03 18 00 	cp.b	r3,r8
80004d26:	c0 70       	breq	80004d34 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004d28:	0e 9c       	mov	r12,r7
80004d2a:	f0 1f 00 7c 	mcall	80004f18 <fat_cluster_list+0x2b0>
80004d2e:	c0 70       	breq	80004d3c <fat_cluster_list+0xd4>
80004d30:	30 1c       	mov	r12,1
80004d32:	ce 48       	rjmp	80004efa <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004d34:	f0 1f 00 7a 	mcall	80004f1c <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004d38:	f0 1f 00 7a 	mcall	80004f20 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80004d3c:	4f 40       	lddpc	r0,80004f0c <fat_cluster_list+0x2a4>
80004d3e:	3f f8       	mov	r8,-1
80004d40:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d42:	00 96       	mov	r6,r0
80004d44:	4f 35       	lddpc	r5,80004f10 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d46:	4f 47       	lddpc	r7,80004f14 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d48:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d4a:	e0 c8 ff f9 	sub	r8,r0,-7
80004d4e:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d50:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d52:	6c 19       	ld.w	r9,r6[0x4]
80004d54:	0b 98       	ld.ub	r8,r5[0x1]
80004d56:	10 39       	cp.w	r9,r8
80004d58:	c4 32       	brcc	80004dde <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d5a:	6a 4a       	ld.w	r10,r5[0x10]
80004d5c:	14 09       	add	r9,r10
80004d5e:	6a 5a       	ld.w	r10,r5[0x14]
80004d60:	14 09       	add	r9,r10
80004d62:	6e 0a       	ld.w	r10,r7[0x0]
80004d64:	20 2a       	sub	r10,2
80004d66:	f4 08 02 48 	mul	r8,r10,r8
80004d6a:	f2 08 00 08 	add	r8,r9,r8
80004d6e:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d70:	e2 03 18 00 	cp.b	r3,r1
80004d74:	c0 d1       	brne	80004d8e <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004d76:	4e 67       	lddpc	r7,80004f0c <fat_cluster_list+0x2a4>
80004d78:	4e 68       	lddpc	r8,80004f10 <fat_cluster_list+0x2a8>
80004d7a:	11 99       	ld.ub	r9,r8[0x1]
80004d7c:	6e 18       	ld.w	r8,r7[0x4]
80004d7e:	f2 08 01 08 	sub	r8,r9,r8
80004d82:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004d84:	f0 1f 00 68 	mcall	80004f24 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004d88:	30 1c       	mov	r12,1
80004d8a:	8f 1c       	st.w	r7[0x4],r12
            return true;
80004d8c:	cb 78       	rjmp	80004efa <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d8e:	0b 99       	ld.ub	r9,r5[0x1]
80004d90:	40 1a       	lddsp	r10,sp[0x4]
80004d92:	15 88       	ld.ub	r8,r10[0x0]
80004d94:	f2 08 01 08 	sub	r8,r9,r8
80004d98:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d9a:	e4 03 18 00 	cp.b	r3,r2
80004d9e:	c2 01       	brne	80004dde <fat_cluster_list+0x176>
80004da0:	4d 99       	lddpc	r9,80004f04 <fat_cluster_list+0x29c>
80004da2:	13 88       	ld.ub	r8,r9[0x0]
80004da4:	e4 08 18 00 	cp.b	r8,r2
80004da8:	c1 b0       	breq	80004dde <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004daa:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004dac:	30 0c       	mov	r12,0
80004dae:	f0 1f 00 5f 	mcall	80004f28 <fat_cluster_list+0x2c0>
80004db2:	e0 80 00 a3 	breq	80004ef8 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004db6:	6e 09       	ld.w	r9,r7[0x0]
80004db8:	f2 c8 ff ff 	sub	r8,r9,-1
80004dbc:	8f 08       	st.w	r7[0x0],r8
80004dbe:	6e 1a       	ld.w	r10,r7[0x4]
80004dc0:	14 38       	cp.w	r8,r10
80004dc2:	c0 a0       	breq	80004dd6 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004dc4:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004dc6:	08 19       	sub	r9,r4
80004dc8:	0b 98       	ld.ub	r8,r5[0x1]
80004dca:	b1 39       	mul	r9,r8
80004dcc:	6c 18       	ld.w	r8,r6[0x4]
80004dce:	f2 08 00 08 	add	r8,r9,r8
80004dd2:	8d 18       	st.w	r6[0x4],r8
                  break;
80004dd4:	c0 58       	rjmp	80004dde <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80004dd6:	f0 1f 00 56 	mcall	80004f2c <fat_cluster_list+0x2c4>
80004dda:	ce e1       	brne	80004db6 <fat_cluster_list+0x14e>
80004ddc:	c8 e8       	rjmp	80004ef8 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004dde:	30 0c       	mov	r12,0
80004de0:	f0 1f 00 52 	mcall	80004f28 <fat_cluster_list+0x2c0>
80004de4:	e0 80 00 8a 	breq	80004ef8 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004de8:	f0 1f 00 52 	mcall	80004f30 <fat_cluster_list+0x2c8>
80004dec:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80004dee:	e4 0c 18 00 	cp.b	r12,r2
80004df2:	e0 80 00 83 	breq	80004ef8 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004df6:	01 89       	ld.ub	r9,r0[0x0]
80004df8:	3f f8       	mov	r8,-1
80004dfa:	f0 09 18 00 	cp.b	r9,r8
80004dfe:	c4 61       	brne	80004e8a <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004e00:	e2 0c 18 00 	cp.b	r12,r1
80004e04:	c2 b1       	brne	80004e5a <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004e06:	4c 28       	lddpc	r8,80004f0c <fat_cluster_list+0x2a4>
80004e08:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004e0a:	4c b9       	lddpc	r9,80004f34 <fat_cluster_list+0x2cc>
80004e0c:	13 89       	ld.ub	r9,r9[0x0]
80004e0e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004e12:	4c aa       	lddpc	r10,80004f38 <fat_cluster_list+0x2d0>
80004e14:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004e18:	72 2a       	ld.w	r10,r9[0x8]
80004e1a:	0e 1a       	sub	r10,r7
80004e1c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004e1e:	4b d9       	lddpc	r9,80004f10 <fat_cluster_list+0x2a8>
80004e20:	72 5b       	ld.w	r11,r9[0x14]
80004e22:	72 4a       	ld.w	r10,r9[0x10]
80004e24:	14 0b       	add	r11,r10
80004e26:	13 99       	ld.ub	r9,r9[0x1]
80004e28:	4b ba       	lddpc	r10,80004f14 <fat_cluster_list+0x2ac>
80004e2a:	74 0a       	ld.w	r10,r10[0x0]
80004e2c:	20 2a       	sub	r10,2
80004e2e:	f2 0a 02 4a 	mul	r10,r9,r10
80004e32:	f6 0a 00 0a 	add	r10,r11,r10
80004e36:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004e38:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80004e3a:	30 38       	mov	r8,3
80004e3c:	f0 03 18 00 	cp.b	r3,r8
80004e40:	c0 30       	breq	80004e46 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004e42:	f0 1f 00 39 	mcall	80004f24 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004e46:	4b 28       	lddpc	r8,80004f0c <fat_cluster_list+0x2a4>
80004e48:	4b 39       	lddpc	r9,80004f14 <fat_cluster_list+0x2ac>
80004e4a:	72 09       	ld.w	r9,r9[0x0]
80004e4c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80004e4e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004e50:	31 a9       	mov	r9,26
80004e52:	4a c8       	lddpc	r8,80004f00 <fat_cluster_list+0x298>
80004e54:	b0 89       	st.b	r8[0x0],r9
80004e56:	30 0c       	mov	r12,0
            return false;
80004e58:	c5 18       	rjmp	80004efa <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e5a:	0b 98       	ld.ub	r8,r5[0x1]
80004e5c:	6c 19       	ld.w	r9,r6[0x4]
80004e5e:	f2 08 01 08 	sub	r8,r9,r8
80004e62:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e64:	40 0a       	lddsp	r10,sp[0x0]
80004e66:	58 0a       	cp.w	r10,0
80004e68:	c4 50       	breq	80004ef2 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80004e6a:	58 08       	cp.w	r8,0
80004e6c:	c4 31       	brne	80004ef2 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004e6e:	6e 18       	ld.w	r8,r7[0x4]
80004e70:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004e72:	e0 68 ff ff 	mov	r8,65535
80004e76:	ea 18 0f ff 	orh	r8,0xfff
80004e7a:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e7c:	30 1c       	mov	r12,1
80004e7e:	f0 1f 00 2b 	mcall	80004f28 <fat_cluster_list+0x2c0>
80004e82:	c3 b0       	breq	80004ef8 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004e84:	6c 08       	ld.w	r8,r6[0x0]
80004e86:	8f 18       	st.w	r7[0x4],r8
80004e88:	c3 58       	rjmp	80004ef2 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004e8a:	e4 03 18 00 	cp.b	r3,r2
80004e8e:	c0 a1       	brne	80004ea2 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004e90:	6e 09       	ld.w	r9,r7[0x0]
80004e92:	2f f9       	sub	r9,-1
80004e94:	6e 18       	ld.w	r8,r7[0x4]
80004e96:	10 39       	cp.w	r9,r8
80004e98:	c1 b0       	breq	80004ece <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004e9a:	f0 1f 00 23 	mcall	80004f24 <fat_cluster_list+0x2bc>
80004e9e:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004ea0:	c2 d8       	rjmp	80004efa <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004ea2:	40 09       	lddsp	r9,sp[0x0]
80004ea4:	58 09       	cp.w	r9,0
80004ea6:	c1 40       	breq	80004ece <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004ea8:	6e 18       	ld.w	r8,r7[0x4]
80004eaa:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80004eac:	30 08       	mov	r8,0
80004eae:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004eb0:	0b 98       	ld.ub	r8,r5[0x1]
80004eb2:	6c 19       	ld.w	r9,r6[0x4]
80004eb4:	10 39       	cp.w	r9,r8
80004eb6:	c0 62       	brcc	80004ec2 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004eb8:	e0 68 ff ff 	mov	r8,65535
80004ebc:	ea 18 0f ff 	orh	r8,0xfff
80004ec0:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004ec2:	30 1c       	mov	r12,1
80004ec4:	f0 1f 00 19 	mcall	80004f28 <fat_cluster_list+0x2c0>
80004ec8:	c1 80       	breq	80004ef8 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80004eca:	6c 08       	ld.w	r8,r6[0x0]
80004ecc:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80004ece:	e2 04 18 00 	cp.b	r4,r1
80004ed2:	c0 b1       	brne	80004ee8 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004ed4:	40 0a       	lddsp	r10,sp[0x0]
80004ed6:	58 0a       	cp.w	r10,0
80004ed8:	c0 40       	breq	80004ee0 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80004eda:	f0 1f 00 19 	mcall	80004f3c <fat_cluster_list+0x2d4>
80004ede:	c0 e8       	rjmp	80004efa <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80004ee0:	f0 1f 00 11 	mcall	80004f24 <fat_cluster_list+0x2bc>
80004ee4:	30 1c       	mov	r12,1
            return true; // End of segment
80004ee6:	c0 a8       	rjmp	80004efa <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004ee8:	0b 99       	ld.ub	r9,r5[0x1]
80004eea:	6c 18       	ld.w	r8,r6[0x4]
80004eec:	f2 08 00 08 	add	r8,r9,r8
80004ef0:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004ef2:	6e 18       	ld.w	r8,r7[0x4]
80004ef4:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004ef6:	c2 eb       	rjmp	80004d52 <fat_cluster_list+0xea>
80004ef8:	30 0c       	mov	r12,0
}
80004efa:	2f ed       	sub	sp,-8
80004efc:	d8 32       	popm	r0-r7,pc
80004efe:	00 00       	add	r0,r0
80004f00:	00 00       	add	r0,r0
80004f02:	1a 00       	add	r0,sp
80004f04:	00 00       	add	r0,r0
80004f06:	19 fc       	ld.ub	r12,r12[0x7]
80004f08:	80 00       	ld.sh	r0,r0[0x0]
80004f0a:	57 3c       	stdsp	sp[0x1cc],r12
80004f0c:	00 00       	add	r0,r0
80004f0e:	1a 58       	eor	r8,sp
80004f10:	00 00       	add	r0,r0
80004f12:	19 b0       	ld.ub	r0,r12[0x3]
80004f14:	00 00       	add	r0,r0
80004f16:	1a 50       	eor	r0,sp
80004f18:	80 00       	ld.sh	r0,r0[0x0]
80004f1a:	41 d0       	lddsp	r0,sp[0x74]
80004f1c:	80 00       	ld.sh	r0,r0[0x0]
80004f1e:	40 a8       	lddsp	r8,sp[0x28]
80004f20:	80 00       	ld.sh	r0,r0[0x0]
80004f22:	53 98       	stdsp	sp[0xe4],r8
80004f24:	80 00       	ld.sh	r0,r0[0x0]
80004f26:	41 78       	lddsp	r8,sp[0x5c]
80004f28:	80 00       	ld.sh	r0,r0[0x0]
80004f2a:	4a 24       	lddpc	r4,80004fb0 <fat_read_dir+0x70>
80004f2c:	80 00       	ld.sh	r0,r0[0x0]
80004f2e:	49 90       	lddpc	r0,80004f90 <fat_read_dir+0x50>
80004f30:	80 00       	ld.sh	r0,r0[0x0]
80004f32:	40 48       	lddsp	r8,sp[0x10]
80004f34:	00 00       	add	r0,r0
80004f36:	1a 02       	add	r2,sp
80004f38:	00 00       	add	r0,r0
80004f3a:	17 84       	ld.ub	r4,r11[0x0]
80004f3c:	80 00       	ld.sh	r0,r0[0x0]
80004f3e:	54 24       	stdsp	sp[0x108],r4

80004f40 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004f40:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f44:	49 98       	lddpc	r8,80004fa8 <fat_read_dir+0x68>
80004f46:	90 97       	ld.uh	r7,r8[0x2]
80004f48:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f4a:	49 98       	lddpc	r8,80004fac <fat_read_dir+0x6c>
80004f4c:	11 89       	ld.ub	r9,r8[0x0]
80004f4e:	49 98       	lddpc	r8,80004fb0 <fat_read_dir+0x70>
80004f50:	11 88       	ld.ub	r8,r8[0x0]
80004f52:	f0 09 18 00 	cp.b	r9,r8
80004f56:	c0 d1       	brne	80004f70 <fat_read_dir+0x30>
80004f58:	49 58       	lddpc	r8,80004fac <fat_read_dir+0x6c>
80004f5a:	70 39       	ld.w	r9,r8[0xc]
80004f5c:	49 58       	lddpc	r8,80004fb0 <fat_read_dir+0x70>
80004f5e:	70 88       	ld.w	r8,r8[0x20]
80004f60:	10 39       	cp.w	r9,r8
80004f62:	c0 71       	brne	80004f70 <fat_read_dir+0x30>
80004f64:	49 28       	lddpc	r8,80004fac <fat_read_dir+0x6c>
80004f66:	70 48       	ld.w	r8,r8[0x10]
80004f68:	0e 38       	cp.w	r8,r7
80004f6a:	c0 31       	brne	80004f70 <fat_read_dir+0x30>
80004f6c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004f70:	49 18       	lddpc	r8,80004fb4 <fat_read_dir+0x74>
80004f72:	49 09       	lddpc	r9,80004fb0 <fat_read_dir+0x70>
80004f74:	72 89       	ld.w	r9,r9[0x20]
80004f76:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004f78:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004f7a:	30 0b       	mov	r11,0
80004f7c:	30 2c       	mov	r12,2
80004f7e:	f0 1f 00 0f 	mcall	80004fb8 <fat_read_dir+0x78>
80004f82:	c1 00       	breq	80004fa2 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004f84:	48 c8       	lddpc	r8,80004fb4 <fat_read_dir+0x74>
80004f86:	70 09       	ld.w	r9,r8[0x0]
80004f88:	48 d8       	lddpc	r8,80004fbc <fat_read_dir+0x7c>
80004f8a:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004f8c:	30 1c       	mov	r12,1
80004f8e:	f0 1f 00 0d 	mcall	80004fc0 <fat_read_dir+0x80>
80004f92:	c0 80       	breq	80004fa2 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004f94:	48 68       	lddpc	r8,80004fac <fat_read_dir+0x6c>
80004f96:	48 79       	lddpc	r9,80004fb0 <fat_read_dir+0x70>
80004f98:	72 89       	ld.w	r9,r9[0x20]
80004f9a:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004f9c:	91 47       	st.w	r8[0x10],r7
80004f9e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004fa2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004fa6:	00 00       	add	r0,r0
80004fa8:	00 00       	add	r0,r0
80004faa:	19 fc       	ld.ub	r12,r12[0x7]
80004fac:	00 00       	add	r0,r0
80004fae:	1a 38       	cp.w	r8,sp
80004fb0:	00 00       	add	r0,r0
80004fb2:	19 b0       	ld.ub	r0,r12[0x3]
80004fb4:	00 00       	add	r0,r0
80004fb6:	1a 58       	eor	r8,sp
80004fb8:	80 00       	ld.sh	r0,r0[0x0]
80004fba:	4c 68       	lddpc	r8,800050d0 <fat_write_file+0x30>
80004fbc:	00 00       	add	r0,r0
80004fbe:	17 6c       	ld.uh	r12,--r11
80004fc0:	80 00       	ld.sh	r0,r0[0x0]
80004fc2:	49 10       	lddpc	r0,80005004 <fat_read_file+0x40>

80004fc4 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004fc4:	eb cd 40 c0 	pushm	r6-r7,lr
80004fc8:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004fca:	4a e8       	lddpc	r8,80005080 <fat_read_file+0xbc>
80004fcc:	70 38       	ld.w	r8,r8[0xc]
80004fce:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80004fd2:	30 29       	mov	r9,2
80004fd4:	f2 0c 18 00 	cp.b	r12,r9
80004fd8:	c1 31       	brne	80004ffe <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004fda:	4a b8       	lddpc	r8,80005084 <fat_read_file+0xc0>
80004fdc:	11 89       	ld.ub	r9,r8[0x0]
80004fde:	4a b8       	lddpc	r8,80005088 <fat_read_file+0xc4>
80004fe0:	11 88       	ld.ub	r8,r8[0x0]
80004fe2:	f0 09 18 00 	cp.b	r9,r8
80004fe6:	c1 91       	brne	80005018 <fat_read_file+0x54>
80004fe8:	4a 78       	lddpc	r8,80005084 <fat_read_file+0xc0>
80004fea:	70 39       	ld.w	r9,r8[0xc]
80004fec:	4a 58       	lddpc	r8,80005080 <fat_read_file+0xbc>
80004fee:	70 18       	ld.w	r8,r8[0x4]
80004ff0:	10 39       	cp.w	r9,r8
80004ff2:	c1 31       	brne	80005018 <fat_read_file+0x54>
80004ff4:	4a 48       	lddpc	r8,80005084 <fat_read_file+0xc0>
80004ff6:	70 48       	ld.w	r8,r8[0x10]
80004ff8:	0c 38       	cp.w	r8,r6
80004ffa:	c0 f1       	brne	80005018 <fat_read_file+0x54>
80004ffc:	c3 38       	rjmp	80005062 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004ffe:	30 39       	mov	r9,3
80005000:	f2 0c 18 00 	cp.b	r12,r9
80005004:	c3 31       	brne	8000506a <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80005006:	49 f9       	lddpc	r9,80005080 <fat_read_file+0xbc>
80005008:	72 19       	ld.w	r9,r9[0x4]
8000500a:	58 09       	cp.w	r9,0
8000500c:	c2 b0       	breq	80005062 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
8000500e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80005012:	c2 c0       	breq	8000506a <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80005014:	2f f6       	sub	r6,-1
80005016:	c2 a8       	rjmp	8000506a <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80005018:	49 d8       	lddpc	r8,8000508c <fat_read_file+0xc8>
8000501a:	49 a9       	lddpc	r9,80005080 <fat_read_file+0xbc>
8000501c:	72 19       	ld.w	r9,r9[0x4]
8000501e:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005020:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80005022:	30 1b       	mov	r11,1
80005024:	16 9c       	mov	r12,r11
80005026:	f0 1f 00 1b 	mcall	80005090 <fat_read_file+0xcc>
8000502a:	c1 e0       	breq	80005066 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
8000502c:	49 88       	lddpc	r8,8000508c <fat_read_file+0xc8>
8000502e:	70 09       	ld.w	r9,r8[0x0]
80005030:	49 98       	lddpc	r8,80005094 <fat_read_file+0xd0>
80005032:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80005034:	30 1c       	mov	r12,1
80005036:	f0 1f 00 19 	mcall	80005098 <fat_read_file+0xd4>
8000503a:	c1 60       	breq	80005066 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
8000503c:	49 28       	lddpc	r8,80005084 <fat_read_file+0xc0>
8000503e:	49 19       	lddpc	r9,80005080 <fat_read_file+0xbc>
80005040:	72 19       	ld.w	r9,r9[0x4]
80005042:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005044:	91 46       	st.w	r8[0x10],r6
80005046:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000504a:	30 38       	mov	r8,3
8000504c:	f0 07 18 00 	cp.b	r7,r8
80005050:	c0 b1       	brne	80005066 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80005052:	49 38       	lddpc	r8,8000509c <fat_read_file+0xd8>
80005054:	11 89       	ld.ub	r9,r8[0x0]
80005056:	31 a8       	mov	r8,26
80005058:	f0 09 18 00 	cp.b	r9,r8
8000505c:	5f 0c       	sreq	r12
8000505e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005062:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80005066:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000506a:	48 98       	lddpc	r8,8000508c <fat_read_file+0xc8>
8000506c:	48 59       	lddpc	r9,80005080 <fat_read_file+0xbc>
8000506e:	72 19       	ld.w	r9,r9[0x4]
80005070:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005072:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005074:	30 1b       	mov	r11,1
80005076:	0e 9c       	mov	r12,r7
80005078:	f0 1f 00 06 	mcall	80005090 <fat_read_file+0xcc>
8000507c:	ce 70       	breq	8000504a <fat_read_file+0x86>
8000507e:	cf 2b       	rjmp	80005062 <fat_read_file+0x9e>
80005080:	00 00       	add	r0,r0
80005082:	17 70       	ld.ub	r0,--r11
80005084:	00 00       	add	r0,r0
80005086:	1a 38       	cp.w	r8,sp
80005088:	00 00       	add	r0,r0
8000508a:	19 b0       	ld.ub	r0,r12[0x3]
8000508c:	00 00       	add	r0,r0
8000508e:	1a 58       	eor	r8,sp
80005090:	80 00       	ld.sh	r0,r0[0x0]
80005092:	4c 68       	lddpc	r8,800051a8 <fat_check_device>
80005094:	00 00       	add	r0,r0
80005096:	17 6c       	ld.uh	r12,--r11
80005098:	80 00       	ld.sh	r0,r0[0x0]
8000509a:	49 10       	lddpc	r0,800050dc <fat_write_file+0x3c>
8000509c:	00 00       	add	r0,r0
8000509e:	1a 00       	add	r0,sp

800050a0 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
800050a0:	eb cd 40 c0 	pushm	r6-r7,lr
800050a4:	18 97       	mov	r7,r12
800050a6:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
800050a8:	4b 68       	lddpc	r8,80005180 <fat_write_file+0xe0>
800050aa:	70 18       	ld.w	r8,r8[0x4]
800050ac:	58 08       	cp.w	r8,0
800050ae:	c0 a1       	brne	800050c2 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
800050b0:	4b 58       	lddpc	r8,80005184 <fat_write_file+0xe4>
800050b2:	3f f9       	mov	r9,-1
800050b4:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
800050b6:	30 09       	mov	r9,0
800050b8:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
800050ba:	30 1c       	mov	r12,1
800050bc:	f0 1f 00 33 	mcall	80005188 <fat_write_file+0xe8>
800050c0:	c1 c8       	rjmp	800050f8 <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
800050c2:	f0 1f 00 33 	mcall	8000518c <fat_write_file+0xec>
800050c6:	c0 30       	breq	800050cc <fat_write_file+0x2c>
800050c8:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
800050cc:	4b 18       	lddpc	r8,80005190 <fat_write_file+0xf0>
800050ce:	11 89       	ld.ub	r9,r8[0x0]
800050d0:	31 a8       	mov	r8,26
800050d2:	f0 09 18 00 	cp.b	r9,r8
800050d6:	c5 21       	brne	8000517a <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800050d8:	4a f8       	lddpc	r8,80005194 <fat_write_file+0xf4>
800050da:	11 88       	ld.ub	r8,r8[0x0]
800050dc:	f0 08 00 28 	add	r8,r8,r8<<0x2
800050e0:	4a e9       	lddpc	r9,80005198 <fat_write_file+0xf8>
800050e2:	f2 08 00 28 	add	r8,r9,r8<<0x2
800050e6:	3f f9       	mov	r9,-1
800050e8:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
800050ea:	2f 88       	sub	r8,-8
800050ec:	4a c9       	lddpc	r9,8000519c <fat_write_file+0xfc>
800050ee:	13 9a       	ld.ub	r10,r9[0x1]
800050f0:	70 09       	ld.w	r9,r8[0x0]
800050f2:	f4 09 00 09 	add	r9,r10,r9
800050f6:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
800050f8:	30 18       	mov	r8,1
800050fa:	f0 07 18 00 	cp.b	r7,r8
800050fe:	c0 41       	brne	80005106 <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
80005100:	4a 18       	lddpc	r8,80005184 <fat_write_file+0xe4>
80005102:	91 16       	st.w	r8[0x4],r6
80005104:	c0 48       	rjmp	8000510c <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80005106:	30 19       	mov	r9,1
80005108:	49 f8       	lddpc	r8,80005184 <fat_write_file+0xe4>
8000510a:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
8000510c:	f0 1f 00 25 	mcall	800051a0 <fat_write_file+0x100>
80005110:	c3 50       	breq	8000517a <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80005112:	49 c8       	lddpc	r8,80005180 <fat_write_file+0xe0>
80005114:	70 18       	ld.w	r8,r8[0x4]
80005116:	58 08       	cp.w	r8,0
80005118:	c0 d1       	brne	80005132 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
8000511a:	49 b8       	lddpc	r8,80005184 <fat_write_file+0xe4>
8000511c:	70 08       	ld.w	r8,r8[0x0]
8000511e:	49 e9       	lddpc	r9,80005194 <fat_write_file+0xf4>
80005120:	13 89       	ld.ub	r9,r9[0x0]
80005122:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005126:	2f f9       	sub	r9,-1
80005128:	49 ca       	lddpc	r10,80005198 <fat_write_file+0xf8>
8000512a:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
8000512e:	49 59       	lddpc	r9,80005180 <fat_write_file+0xe0>
80005130:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80005132:	30 18       	mov	r8,1
80005134:	f0 07 18 00 	cp.b	r7,r8
80005138:	c0 71       	brne	80005146 <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
8000513a:	49 38       	lddpc	r8,80005184 <fat_write_file+0xe4>
8000513c:	70 19       	ld.w	r9,r8[0x4]
8000513e:	ec 09 01 09 	sub	r9,r6,r9
80005142:	91 19       	st.w	r8[0x4],r9
80005144:	c0 68       	rjmp	80005150 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80005146:	49 08       	lddpc	r8,80005184 <fat_write_file+0xe4>
80005148:	70 19       	ld.w	r9,r8[0x4]
8000514a:	f2 09 11 01 	rsub	r9,r9,1
8000514e:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005150:	48 d9       	lddpc	r9,80005184 <fat_write_file+0xe4>
80005152:	49 38       	lddpc	r8,8000519c <fat_write_file+0xfc>
80005154:	70 5b       	ld.w	r11,r8[0x14]
80005156:	70 4a       	ld.w	r10,r8[0x10]
80005158:	f6 0a 00 0a 	add	r10,r11,r10
8000515c:	11 9b       	ld.ub	r11,r8[0x1]
8000515e:	72 08       	ld.w	r8,r9[0x0]
80005160:	20 28       	sub	r8,2
80005162:	f6 08 02 48 	mul	r8,r11,r8
80005166:	f4 08 00 08 	add	r8,r10,r8
8000516a:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
8000516c:	f0 1f 00 0e 	mcall	800051a4 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80005170:	0e 9c       	mov	r12,r7
80005172:	f0 1f 00 07 	mcall	8000518c <fat_write_file+0xec>
80005176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000517a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000517e:	00 00       	add	r0,r0
80005180:	00 00       	add	r0,r0
80005182:	17 70       	ld.ub	r0,--r11
80005184:	00 00       	add	r0,r0
80005186:	1a 58       	eor	r8,sp
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	40 d0       	lddsp	r0,sp[0x34]
8000518c:	80 00       	ld.sh	r0,r0[0x0]
8000518e:	4f c4       	lddpc	r4,8000537c <fat_translate_char_shortname+0x30>
80005190:	00 00       	add	r0,r0
80005192:	1a 00       	add	r0,sp
80005194:	00 00       	add	r0,r0
80005196:	1a 02       	add	r2,sp
80005198:	00 00       	add	r0,r0
8000519a:	17 84       	ld.ub	r4,r11[0x0]
8000519c:	00 00       	add	r0,r0
8000519e:	19 b0       	ld.ub	r0,r12[0x3]
800051a0:	80 00       	ld.sh	r0,r0[0x0]
800051a2:	57 dc       	stdsp	sp[0x1f4],r12
800051a4:	80 00       	ld.sh	r0,r0[0x0]
800051a6:	41 78       	lddsp	r8,sp[0x5c]

800051a8 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
800051a8:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
800051aa:	4a 28       	lddpc	r8,80005230 <fat_check_device+0x88>
800051ac:	11 89       	ld.ub	r9,r8[0x0]
800051ae:	30 08       	mov	r8,0
800051b0:	f0 09 18 00 	cp.b	r9,r8
800051b4:	c3 c1       	brne	8000522c <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
800051b6:	4a 08       	lddpc	r8,80005234 <fat_check_device+0x8c>
800051b8:	11 89       	ld.ub	r9,r8[0x0]
800051ba:	3f f8       	mov	r8,-1
800051bc:	f0 09 18 00 	cp.b	r9,r8
800051c0:	c0 51       	brne	800051ca <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
800051c2:	30 19       	mov	r9,1
800051c4:	49 d8       	lddpc	r8,80005238 <fat_check_device+0x90>
800051c6:	b0 89       	st.b	r8[0x0],r9
800051c8:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
800051ca:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800051cc:	49 a5       	lddpc	r5,80005234 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051ce:	49 c1       	lddpc	r1,8000523c <fat_check_device+0x94>
800051d0:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
800051d2:	49 c0       	lddpc	r0,80005240 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051d4:	49 c4       	lddpc	r4,80005244 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800051d6:	49 d3       	lddpc	r3,80005248 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800051d8:	0b 8c       	ld.ub	r12,r5[0x0]
800051da:	f0 1f 00 1d 	mcall	8000524c <fat_check_device+0xa4>
800051de:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
800051e0:	c2 60       	breq	8000522c <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051e2:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
800051e4:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051e6:	0b 88       	ld.ub	r8,r5[0x0]
800051e8:	09 89       	ld.ub	r9,r4[0x0]
800051ea:	f0 09 18 00 	cp.b	r9,r8
800051ee:	c0 51       	brne	800051f8 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800051f0:	49 89       	lddpc	r9,80005250 <fat_check_device+0xa8>
800051f2:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800051f4:	49 89       	lddpc	r9,80005254 <fat_check_device+0xac>
800051f6:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800051f8:	07 89       	ld.ub	r9,r3[0x0]
800051fa:	f0 09 18 00 	cp.b	r9,r8
800051fe:	c0 31       	brne	80005204 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80005200:	f0 1f 00 16 	mcall	80005258 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80005204:	f0 1f 00 16 	mcall	8000525c <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80005208:	30 18       	mov	r8,1
8000520a:	48 c9       	lddpc	r9,80005238 <fat_check_device+0x90>
8000520c:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
8000520e:	58 37       	cp.w	r7,3
80005210:	c0 81       	brne	80005220 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80005212:	10 02       	add	r2,r8
80005214:	5c 52       	castu.b	r2
80005216:	36 48       	mov	r8,100
80005218:	f0 02 18 00 	cp.b	r2,r8
8000521c:	cd e1       	brne	800051d8 <fat_check_device+0x30>
8000521e:	c0 88       	rjmp	8000522e <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80005220:	58 27       	cp.w	r7,2
80005222:	c0 61       	brne	8000522e <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80005224:	31 89       	mov	r9,24
80005226:	48 58       	lddpc	r8,80005238 <fat_check_device+0x90>
80005228:	b0 89       	st.b	r8[0x0],r9
8000522a:	d8 3a       	popm	r0-r7,pc,r12=0
8000522c:	da 3a       	popm	r0-r7,pc,r12=1
8000522e:	d8 3a       	popm	r0-r7,pc,r12=0
80005230:	00 00       	add	r0,r0
80005232:	17 82       	ld.ub	r2,r11[0x0]
80005234:	00 00       	add	r0,r0
80005236:	19 b0       	ld.ub	r0,r12[0x3]
80005238:	00 00       	add	r0,r0
8000523a:	1a 00       	add	r0,sp
8000523c:	00 00       	add	r0,r0
8000523e:	19 fc       	ld.ub	r12,r12[0x7]
80005240:	00 00       	add	r0,r0
80005242:	17 70       	ld.ub	r0,--r11
80005244:	00 00       	add	r0,r0
80005246:	1a 04       	add	r4,sp
80005248:	00 00       	add	r0,r0
8000524a:	1a 38       	cp.w	r8,sp
8000524c:	80 00       	ld.sh	r0,r0[0x0]
8000524e:	71 f0       	ld.w	r0,r8[0x7c]
80005250:	00 00       	add	r0,r0
80005252:	19 f8       	ld.ub	r8,r12[0x7]
80005254:	00 00       	add	r0,r0
80005256:	19 e8       	ld.ub	r8,r12[0x6]
80005258:	80 00       	ld.sh	r0,r0[0x0]
8000525a:	46 c8       	lddsp	r8,sp[0x1b0]
8000525c:	80 00       	ld.sh	r0,r0[0x0]
8000525e:	40 a8       	lddsp	r8,sp[0x28]

80005260 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80005260:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005262:	f0 1f 00 0b 	mcall	8000528c <fat_check_noopen+0x2c>
80005266:	c1 10       	breq	80005288 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005268:	48 a8       	lddpc	r8,80005290 <fat_check_noopen+0x30>
8000526a:	11 89       	ld.ub	r9,r8[0x0]
8000526c:	30 08       	mov	r8,0
8000526e:	f0 09 18 00 	cp.b	r9,r8
80005272:	c0 b0       	breq	80005288 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005274:	48 88       	lddpc	r8,80005294 <fat_check_noopen+0x34>
80005276:	11 89       	ld.ub	r9,r8[0x0]
80005278:	30 08       	mov	r8,0
8000527a:	f0 09 18 00 	cp.b	r9,r8
8000527e:	c0 50       	breq	80005288 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005280:	30 59       	mov	r9,5
80005282:	48 68       	lddpc	r8,80005298 <fat_check_noopen+0x38>
80005284:	b0 89       	st.b	r8[0x0],r9
80005286:	d8 0a       	popm	pc,r12=0
      return false;
80005288:	da 0a       	popm	pc,r12=1
8000528a:	00 00       	add	r0,r0
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	51 a8       	stdsp	sp[0x68],r8
80005290:	00 00       	add	r0,r0
80005292:	19 fc       	ld.ub	r12,r12[0x7]
80005294:	00 00       	add	r0,r0
80005296:	17 70       	ld.ub	r0,--r11
80005298:	00 00       	add	r0,r0
8000529a:	1a 00       	add	r0,sp

8000529c <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
8000529c:	d4 01       	pushm	lr
   if( !fat_check_device() )
8000529e:	f0 1f 00 0a 	mcall	800052c4 <fat_check_mount+0x28>
800052a2:	c0 f0       	breq	800052c0 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800052a4:	48 98       	lddpc	r8,800052c8 <fat_check_mount+0x2c>
800052a6:	11 89       	ld.ub	r9,r8[0x0]
800052a8:	30 08       	mov	r8,0
800052aa:	f0 09 18 00 	cp.b	r9,r8
800052ae:	c0 81       	brne	800052be <fat_check_mount+0x22>
   {
      if( !fat_mount() )
800052b0:	f0 1f 00 07 	mcall	800052cc <fat_check_mount+0x30>
800052b4:	c0 51       	brne	800052be <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
800052b6:	30 e9       	mov	r9,14
800052b8:	48 68       	lddpc	r8,800052d0 <fat_check_mount+0x34>
800052ba:	b0 89       	st.b	r8[0x0],r9
         return false;
800052bc:	d8 02       	popm	pc
800052be:	30 1c       	mov	r12,1
      }
   }
   return true;
}
800052c0:	d8 02       	popm	pc
800052c2:	00 00       	add	r0,r0
800052c4:	80 00       	ld.sh	r0,r0[0x0]
800052c6:	51 a8       	stdsp	sp[0x68],r8
800052c8:	00 00       	add	r0,r0
800052ca:	19 fc       	ld.ub	r12,r12[0x7]
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	5d 74       	*unknown*
800052d0:	00 00       	add	r0,r0
800052d2:	1a 00       	add	r0,sp

800052d4 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
800052d4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052d6:	f0 1f 00 04 	mcall	800052e4 <fat_check_mount_select+0x10>
800052da:	c0 30       	breq	800052e0 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
800052dc:	f0 1f 00 03 	mcall	800052e8 <fat_check_mount_select+0x14>
}
800052e0:	d8 02       	popm	pc
800052e2:	00 00       	add	r0,r0
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	52 9c       	stdsp	sp[0xa4],r12
800052e8:	80 00       	ld.sh	r0,r0[0x0]
800052ea:	40 0c       	lddsp	r12,sp[0x0]

800052ec <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
800052ec:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052ee:	f0 1f 00 06 	mcall	80005304 <fat_check_mount_select_open+0x18>
800052f2:	c0 70       	breq	80005300 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
800052f4:	f0 1f 00 05 	mcall	80005308 <fat_check_mount_select_open+0x1c>
800052f8:	c0 40       	breq	80005300 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
800052fa:	f0 1f 00 05 	mcall	8000530c <fat_check_mount_select_open+0x20>
800052fe:	d8 02       	popm	pc
80005300:	d8 0a       	popm	pc,r12=0
80005302:	00 00       	add	r0,r0
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	52 9c       	stdsp	sp[0xa4],r12
80005308:	80 00       	ld.sh	r0,r0[0x0]
8000530a:	40 0c       	lddsp	r12,sp[0x0]
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	3f ec       	mov	r12,-2

80005310 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80005310:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005312:	f0 1f 00 06 	mcall	80005328 <fat_check_mount_select_noopen+0x18>
80005316:	c0 70       	breq	80005324 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80005318:	f0 1f 00 05 	mcall	8000532c <fat_check_mount_select_noopen+0x1c>
8000531c:	c0 40       	breq	80005324 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
8000531e:	f0 1f 00 05 	mcall	80005330 <fat_check_mount_select_noopen+0x20>
80005322:	d8 02       	popm	pc
80005324:	d8 0a       	popm	pc,r12=0
80005326:	00 00       	add	r0,r0
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	52 9c       	stdsp	sp[0xa4],r12
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	40 0c       	lddsp	r12,sp[0x0]
80005330:	80 00       	ld.sh	r0,r0[0x0]
80005332:	52 60       	stdsp	sp[0x98],r0

80005334 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80005334:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005336:	f0 1f 00 04 	mcall	80005344 <fat_check_mount_noopen+0x10>
8000533a:	c0 30       	breq	80005340 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
8000533c:	f0 1f 00 03 	mcall	80005348 <fat_check_mount_noopen+0x14>
}
80005340:	d8 02       	popm	pc
80005342:	00 00       	add	r0,r0
80005344:	80 00       	ld.sh	r0,r0[0x0]
80005346:	52 9c       	stdsp	sp[0xa4],r12
80005348:	80 00       	ld.sh	r0,r0[0x0]
8000534a:	52 60       	stdsp	sp[0x98],r0

8000534c <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000534c:	f8 c9 00 21 	sub	r9,r12,33
80005350:	35 d8       	mov	r8,93
80005352:	f0 09 18 00 	cp.b	r9,r8
80005356:	e0 8b 00 1d 	brhi	80005390 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000535a:	f8 c9 00 61 	sub	r9,r12,97
8000535e:	31 98       	mov	r8,25
80005360:	f0 09 18 00 	cp.b	r9,r8
80005364:	e0 88 00 07 	brls	80005372 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005368:	32 b8       	mov	r8,43
8000536a:	f0 0c 18 00 	cp.b	r12,r8
8000536e:	c0 51       	brne	80005378 <fat_translate_char_shortname+0x2c>
80005370:	c1 08       	rjmp	80005390 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80005372:	22 0c       	sub	r12,32
80005374:	5c 5c       	castu.b	r12
80005376:	5e fc       	retal	r12
80005378:	48 7a       	lddpc	r10,80005394 <fat_translate_char_shortname+0x48>
8000537a:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
8000537e:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005380:	11 89       	ld.ub	r9,r8[0x0]
80005382:	f8 09 18 00 	cp.b	r9,r12
80005386:	c0 50       	breq	80005390 <fat_translate_char_shortname+0x44>
80005388:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000538a:	14 38       	cp.w	r8,r10
8000538c:	cf a1       	brne	80005380 <fat_translate_char_shortname+0x34>
8000538e:	5e fc       	retal	r12
80005390:	5e fd       	retal	0
80005392:	00 00       	add	r0,r0
80005394:	80 01       	ld.sh	r1,r0[0x0]
80005396:	18 cc       	st.b	r12++,r12

80005398 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
80005398:	3f f9       	mov	r9,-1
8000539a:	48 48       	lddpc	r8,800053a8 <fat_clear_info_fat_mod+0x10>
8000539c:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
8000539e:	30 09       	mov	r9,0
800053a0:	48 38       	lddpc	r8,800053ac <fat_clear_info_fat_mod+0x14>
800053a2:	91 09       	st.w	r8[0x0],r9
}
800053a4:	5e fc       	retal	r12
800053a6:	00 00       	add	r0,r0
800053a8:	00 00       	add	r0,r0
800053aa:	19 e4       	ld.ub	r4,r12[0x6]
800053ac:	00 00       	add	r0,r0
800053ae:	17 ac       	ld.ub	r12,r11[0x2]

800053b0 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
800053b0:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
800053b2:	30 0b       	mov	r11,0
800053b4:	49 58       	lddpc	r8,80005408 <fat_clear_cluster+0x58>
800053b6:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
800053b8:	30 2c       	mov	r12,2
800053ba:	f0 1f 00 15 	mcall	8000540c <fat_clear_cluster+0x5c>
800053be:	c2 30       	breq	80005404 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800053c0:	49 48       	lddpc	r8,80005410 <fat_clear_cluster+0x60>
800053c2:	11 98       	ld.ub	r8,r8[0x1]
800053c4:	49 19       	lddpc	r9,80005408 <fat_clear_cluster+0x58>
800053c6:	72 0a       	ld.w	r10,r9[0x0]
800053c8:	20 1a       	sub	r10,1
800053ca:	10 0a       	add	r10,r8
800053cc:	49 29       	lddpc	r9,80005414 <fat_clear_cluster+0x64>
800053ce:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
800053d0:	58 08       	cp.w	r8,0
800053d2:	c1 a0       	breq	80005406 <fat_clear_cluster+0x56>
800053d4:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053d6:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
800053d8:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800053da:	48 e5       	lddpc	r5,80005410 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053dc:	08 9c       	mov	r12,r4
800053de:	f0 1f 00 0f 	mcall	80005418 <fat_clear_cluster+0x68>
800053e2:	c1 10       	breq	80005404 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800053e4:	58 07       	cp.w	r7,0
800053e6:	c0 31       	brne	800053ec <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800053e8:	f0 1f 00 0d 	mcall	8000541c <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800053ec:	f0 1f 00 0d 	mcall	80005420 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
800053f0:	6c 08       	ld.w	r8,r6[0x0]
800053f2:	20 18       	sub	r8,1
800053f4:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800053f6:	2f f7       	sub	r7,-1
800053f8:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800053fa:	0b 98       	ld.ub	r8,r5[0x1]
800053fc:	ee 08 18 00 	cp.b	r8,r7
80005400:	ce e1       	brne	800053dc <fat_clear_cluster+0x2c>
80005402:	c0 28       	rjmp	80005406 <fat_clear_cluster+0x56>
80005404:	d8 2a       	popm	r4-r7,pc,r12=0
80005406:	da 2a       	popm	r4-r7,pc,r12=1
80005408:	00 00       	add	r0,r0
8000540a:	1a 58       	eor	r8,sp
8000540c:	80 00       	ld.sh	r0,r0[0x0]
8000540e:	4c 68       	lddpc	r8,80005524 <fat_initialize_dir+0x8c>
80005410:	00 00       	add	r0,r0
80005412:	19 b0       	ld.ub	r0,r12[0x3]
80005414:	00 00       	add	r0,r0
80005416:	17 6c       	ld.uh	r12,--r11
80005418:	80 00       	ld.sh	r0,r0[0x0]
8000541a:	49 10       	lddpc	r0,8000545c <fat_update_fat2+0x38>
8000541c:	80 00       	ld.sh	r0,r0[0x0]
8000541e:	48 f8       	lddpc	r8,80005458 <fat_update_fat2+0x34>
80005420:	80 00       	ld.sh	r0,r0[0x0]
80005422:	46 e0       	lddsp	r0,sp[0x1b8]

80005424 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80005424:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005428:	49 68       	lddpc	r8,80005480 <fat_update_fat2+0x5c>
8000542a:	70 08       	ld.w	r8,r8[0x0]
8000542c:	49 69       	lddpc	r9,80005484 <fat_update_fat2+0x60>
8000542e:	72 09       	ld.w	r9,r9[0x0]
80005430:	12 38       	cp.w	r8,r9
80005432:	e0 8b 00 25 	brhi	8000547c <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005436:	49 55       	lddpc	r5,80005488 <fat_update_fat2+0x64>
80005438:	49 57       	lddpc	r7,8000548c <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000543a:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000543c:	49 16       	lddpc	r6,80005480 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000543e:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005440:	49 14       	lddpc	r4,80005484 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005442:	6e 49       	ld.w	r9,r7[0x10]
80005444:	12 08       	add	r8,r9
80005446:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80005448:	06 9c       	mov	r12,r3
8000544a:	f0 1f 00 12 	mcall	80005490 <fat_update_fat2+0x6c>
8000544e:	c1 50       	breq	80005478 <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005450:	6e 19       	ld.w	r9,r7[0x4]
80005452:	6e 48       	ld.w	r8,r7[0x10]
80005454:	f2 08 00 08 	add	r8,r9,r8
80005458:	6c 09       	ld.w	r9,r6[0x0]
8000545a:	12 08       	add	r8,r9
8000545c:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000545e:	04 9c       	mov	r12,r2
80005460:	f0 1f 00 0c 	mcall	80005490 <fat_update_fat2+0x6c>
80005464:	c0 a0       	breq	80005478 <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80005466:	f0 1f 00 0c 	mcall	80005494 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000546a:	6c 08       	ld.w	r8,r6[0x0]
8000546c:	2f f8       	sub	r8,-1
8000546e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005470:	68 09       	ld.w	r9,r4[0x0]
80005472:	10 39       	cp.w	r9,r8
80005474:	ce 72       	brcc	80005442 <fat_update_fat2+0x1e>
80005476:	c0 38       	rjmp	8000547c <fat_update_fat2+0x58>
80005478:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000547c:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005480:	00 00       	add	r0,r0
80005482:	19 e4       	ld.ub	r4,r12[0x6]
80005484:	00 00       	add	r0,r0
80005486:	17 ac       	ld.ub	r12,r11[0x2]
80005488:	00 00       	add	r0,r0
8000548a:	17 6c       	ld.uh	r12,--r11
8000548c:	00 00       	add	r0,r0
8000548e:	19 b0       	ld.ub	r0,r12[0x3]
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	49 10       	lddpc	r0,800054d4 <fat_initialize_dir+0x3c>
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	46 e0       	lddsp	r0,sp[0x1b8]

80005498 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
80005498:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000549a:	f0 1f 00 21 	mcall	8000551c <fat_initialize_dir+0x84>
8000549e:	c3 e0       	breq	8000551a <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
800054a0:	f0 1f 00 20 	mcall	80005520 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
800054a4:	4a 0b       	lddpc	r11,80005524 <fat_initialize_dir+0x8c>
800054a6:	16 98       	mov	r8,r11
800054a8:	32 e9       	mov	r9,46
800054aa:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054ac:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
800054b0:	32 09       	mov	r9,32
800054b2:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
800054b4:	14 38       	cp.w	r8,r10
800054b6:	cf e1       	brne	800054b2 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
800054b8:	49 b8       	lddpc	r8,80005524 <fat_initialize_dir+0x8c>
800054ba:	31 09       	mov	r9,16
800054bc:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
800054c0:	49 a9       	lddpc	r9,80005528 <fat_initialize_dir+0x90>
800054c2:	2f c9       	sub	r9,-4
800054c4:	13 ba       	ld.ub	r10,r9[0x3]
800054c6:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
800054ca:	13 aa       	ld.ub	r10,r9[0x2]
800054cc:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
800054d0:	13 9a       	ld.ub	r10,r9[0x1]
800054d2:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
800054d6:	13 89       	ld.ub	r9,r9[0x0]
800054d8:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
800054dc:	32 e9       	mov	r9,46
800054de:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
800054e2:	f1 69 00 21 	st.b	r8[33],r9
800054e6:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054e8:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800054ec:	32 09       	mov	r9,32
800054ee:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
800054f0:	14 38       	cp.w	r8,r10
800054f2:	cf e1       	brne	800054ee <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
800054f4:	48 c8       	lddpc	r8,80005524 <fat_initialize_dir+0x8c>
800054f6:	31 09       	mov	r9,16
800054f8:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
800054fc:	48 c9       	lddpc	r9,8000552c <fat_initialize_dir+0x94>
800054fe:	2e 09       	sub	r9,-32
80005500:	13 ba       	ld.ub	r10,r9[0x3]
80005502:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80005506:	13 aa       	ld.ub	r10,r9[0x2]
80005508:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000550c:	13 9a       	ld.ub	r10,r9[0x1]
8000550e:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80005512:	13 89       	ld.ub	r9,r9[0x0]
80005514:	f1 69 00 35 	st.b	r8[53],r9
80005518:	30 1c       	mov	r12,1

   return true;
}
8000551a:	d8 02       	popm	pc
8000551c:	80 00       	ld.sh	r0,r0[0x0]
8000551e:	53 b0       	stdsp	sp[0xec],r0
80005520:	80 00       	ld.sh	r0,r0[0x0]
80005522:	46 e0       	lddsp	r0,sp[0x1b8]
80005524:	00 00       	add	r0,r0
80005526:	17 b0       	ld.ub	r0,r11[0x3]
80005528:	00 00       	add	r0,r0
8000552a:	17 70       	ld.ub	r0,--r11
8000552c:	00 00       	add	r0,r0
8000552e:	19 b0       	ld.ub	r0,r12[0x3]

80005530 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
80005530:	d4 31       	pushm	r0-r7,lr
80005532:	20 5d       	sub	sp,20
80005534:	18 97       	mov	r7,r12
80005536:	50 3b       	stdsp	sp[0xc],r11
80005538:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
8000553a:	f0 1f 00 30 	mcall	800055f8 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
8000553e:	f0 1f 00 30 	mcall	800055fc <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80005542:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80005544:	30 01       	mov	r1,0
80005546:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80005548:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000554a:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
8000554c:	30 c6       	mov	r6,12
8000554e:	31 ab       	mov	r11,26
80005550:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005552:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80005554:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005556:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80005558:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000555a:	f2 08 18 00 	cp.b	r8,r9
8000555e:	c0 31       	brne	80005564 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80005560:	b8 83       	st.b	r12[0x0],r3
         continue;
80005562:	c4 58       	rjmp	800055ec <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80005564:	ec 08 18 00 	cp.b	r8,r6
80005568:	5f 00       	sreq	r0
8000556a:	f6 08 18 00 	cp.b	r8,r11
8000556e:	5f 04       	sreq	r4
80005570:	08 40       	or	r0,r4
80005572:	00 94       	mov	r4,r0
80005574:	f4 00 18 00 	cp.b	r0,r10
80005578:	c3 21       	brne	800055dc <fat_create_long_name_entry+0xac>
8000557a:	ea 08 18 00 	cp.b	r8,r5
8000557e:	c3 70       	breq	800055ec <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005580:	e4 08 18 00 	cp.b	r8,r2
80005584:	c0 41       	brne	8000558c <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
80005586:	40 34       	lddsp	r4,sp[0xc]
80005588:	b8 84       	st.b	r12[0x0],r4
         continue;
8000558a:	c3 18       	rjmp	800055ec <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
8000558c:	40 01       	lddsp	r1,sp[0x0]
8000558e:	58 01       	cp.w	r1,0
80005590:	c2 41       	brne	800055d8 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005592:	0f 84       	ld.ub	r4,r7[0x0]
80005594:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
80005598:	35 c1       	mov	r1,92
8000559a:	e2 04 19 00 	cp.h	r4,r1
8000559e:	5f 00       	sreq	r0
800055a0:	50 20       	stdsp	sp[0x8],r0
800055a2:	32 f0       	mov	r0,47
800055a4:	e0 04 19 00 	cp.h	r4,r0
800055a8:	5f 01       	sreq	r1
800055aa:	40 20       	lddsp	r0,sp[0x8]
800055ac:	02 40       	or	r0,r1
800055ae:	f4 00 18 00 	cp.b	r0,r10
800055b2:	c0 50       	breq	800055bc <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
800055b4:	30 04       	mov	r4,0
800055b6:	fb 54 00 12 	st.h	sp[18],r4
800055ba:	c0 38       	rjmp	800055c0 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
800055bc:	58 04       	cp.w	r4,0
800055be:	c0 31       	brne	800055c4 <fat_create_long_name_entry+0x94>
800055c0:	30 14       	mov	r4,1
800055c2:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800055c4:	fa c4 ff ee 	sub	r4,sp,-18
800055c8:	09 90       	ld.ub	r0,r4[0x1]
800055ca:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
800055cc:	09 84       	ld.ub	r4,r4[0x0]
800055ce:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
800055d0:	2f f8       	sub	r8,-1
800055d2:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
800055d4:	2f f7       	sub	r7,-1
800055d6:	c0 38       	rjmp	800055dc <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800055d8:	3f f1       	mov	r1,-1
800055da:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800055dc:	2f f8       	sub	r8,-1
800055de:	5c 58       	castu.b	r8
800055e0:	fc 08 18 00 	cp.b	r8,lr
800055e4:	e0 8b 00 08 	brhi	800055f4 <fat_create_long_name_entry+0xc4>
800055e8:	2f fc       	sub	r12,-1
800055ea:	cb 8b       	rjmp	8000555a <fat_create_long_name_entry+0x2a>
800055ec:	2f f8       	sub	r8,-1
800055ee:	5c 58       	castu.b	r8
800055f0:	2f fc       	sub	r12,-1
800055f2:	cb 4b       	rjmp	8000555a <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
800055f4:	2f bd       	sub	sp,-20
800055f6:	d8 32       	popm	r0-r7,pc
800055f8:	80 00       	ld.sh	r0,r0[0x0]
800055fa:	46 e0       	lddsp	r0,sp[0x1b8]
800055fc:	80 00       	ld.sh	r0,r0[0x0]
800055fe:	43 70       	lddsp	r0,sp[0xdc]

80005600 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
80005600:	d4 31       	pushm	r0-r7,lr
80005602:	18 90       	mov	r0,r12
80005604:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80005606:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80005608:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000560a:	49 56       	lddpc	r6,8000565c <fat_delete_file+0x5c>
8000560c:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000560e:	f0 1f 00 15 	mcall	80005660 <fat_delete_file+0x60>
80005612:	c2 40       	breq	8000565a <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80005614:	f0 1f 00 14 	mcall	80005664 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
80005618:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000561a:	f8 c7 ff f5 	sub	r7,r12,-11
8000561e:	0f 88       	ld.ub	r8,r7[0x0]
80005620:	ea 08 18 00 	cp.b	r8,r5
80005624:	c0 30       	breq	8000562a <fat_delete_file+0x2a>
80005626:	58 04       	cp.w	r4,0
80005628:	c1 01       	brne	80005648 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
8000562a:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
8000562c:	f0 1f 00 0f 	mcall	80005668 <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
80005630:	0f 88       	ld.ub	r8,r7[0x0]
80005632:	ea 08 18 00 	cp.b	r8,r5
80005636:	c0 41       	brne	8000563e <fat_delete_file+0x3e>
80005638:	e2 12 00 40 	andl	r2,0x40,COH
8000563c:	c0 61       	brne	80005648 <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000563e:	8c 18       	ld.sh	r8,r6[0x2]
80005640:	20 18       	sub	r8,1
80005642:	ac 18       	st.h	r6[0x2],r8
80005644:	02 94       	mov	r4,r1
   }  // end of while(1)
80005646:	ce 4b       	rjmp	8000560e <fat_delete_file+0xe>

   if( b_cluster_list )
80005648:	58 00       	cp.w	r0,0
8000564a:	c0 21       	brne	8000564e <fat_delete_file+0x4e>
8000564c:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000564e:	30 09       	mov	r9,0
80005650:	48 78       	lddpc	r8,8000566c <fat_delete_file+0x6c>
80005652:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80005654:	30 3c       	mov	r12,3
80005656:	f0 1f 00 07 	mcall	80005670 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
8000565a:	d8 32       	popm	r0-r7,pc
8000565c:	00 00       	add	r0,r0
8000565e:	19 fc       	ld.ub	r12,r12[0x7]
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	4f 40       	lddpc	r0,80005830 <fat_allocfreespace+0x54>
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	43 70       	lddsp	r0,sp[0xdc]
80005668:	80 00       	ld.sh	r0,r0[0x0]
8000566a:	46 e0       	lddsp	r0,sp[0x1b8]
8000566c:	00 00       	add	r0,r0
8000566e:	17 70       	ld.ub	r0,--r11
80005670:	80 00       	ld.sh	r0,r0[0x0]
80005672:	4f c4       	lddpc	r4,80005860 <fat_allocfreespace+0x84>

80005674 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80005674:	eb cd 40 fc 	pushm	r2-r7,lr
80005678:	20 8d       	sub	sp,32
8000567a:	30 06       	mov	r6,0
8000567c:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000567e:	4a 95       	lddpc	r5,80005720 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80005680:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80005682:	1a 93       	mov	r3,sp
80005684:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80005686:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005688:	f0 1f 00 27 	mcall	80005724 <fat_garbage_collector_entry+0xb0>
8000568c:	c0 81       	brne	8000569c <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000568e:	4a 78       	lddpc	r8,80005728 <fat_garbage_collector_entry+0xb4>
80005690:	11 89       	ld.ub	r9,r8[0x0]
80005692:	31 a8       	mov	r8,26
80005694:	f0 09 18 00 	cp.b	r9,r8
80005698:	c3 d1       	brne	80005712 <fat_garbage_collector_entry+0x9e>
8000569a:	c0 68       	rjmp	800056a6 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000569c:	f0 1f 00 24 	mcall	8000572c <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
800056a0:	19 88       	ld.ub	r8,r12[0x0]
800056a2:	58 08       	cp.w	r8,0
800056a4:	c1 b1       	brne	800056da <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800056a6:	49 f8       	lddpc	r8,80005720 <fat_garbage_collector_entry+0xac>
800056a8:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800056aa:	ec 07 19 00 	cp.h	r7,r6
800056ae:	c3 40       	breq	80005716 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800056b0:	32 05       	mov	r5,32
800056b2:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800056b4:	49 b6       	lddpc	r6,80005720 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800056b6:	f0 1f 00 1c 	mcall	80005724 <fat_garbage_collector_entry+0xb0>
800056ba:	c2 c0       	breq	80005712 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800056bc:	f0 1f 00 1c 	mcall	8000572c <fat_garbage_collector_entry+0xb8>
800056c0:	0a 9a       	mov	r10,r5
800056c2:	08 9b       	mov	r11,r4
800056c4:	f0 1f 00 1b 	mcall	80005730 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
800056c8:	f0 1f 00 1b 	mcall	80005734 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800056cc:	8c 18       	ld.sh	r8,r6[0x2]
800056ce:	2f f8       	sub	r8,-1
800056d0:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800056d2:	f0 07 19 00 	cp.h	r7,r8
800056d6:	cf 01       	brne	800056b6 <fat_garbage_collector_entry+0x42>
800056d8:	c1 f8       	rjmp	80005716 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
800056da:	e8 08 18 00 	cp.b	r8,r4
800056de:	c1 70       	breq	8000570c <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800056e0:	ec 07 19 00 	cp.h	r7,r6
800056e4:	c1 20       	breq	80005708 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800056e6:	04 9a       	mov	r10,r2
800056e8:	18 9b       	mov	r11,r12
800056ea:	1a 9c       	mov	r12,sp
800056ec:	f0 1f 00 13 	mcall	80005738 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800056f0:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800056f2:	f0 1f 00 0d 	mcall	80005724 <fat_garbage_collector_entry+0xb0>
800056f6:	c0 e0       	breq	80005712 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
800056f8:	f0 1f 00 0d 	mcall	8000572c <fat_garbage_collector_entry+0xb8>
800056fc:	04 9a       	mov	r10,r2
800056fe:	1a 9b       	mov	r11,sp
80005700:	f0 1f 00 0e 	mcall	80005738 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
80005704:	f0 1f 00 0c 	mcall	80005734 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
80005708:	2f f6       	sub	r6,-1
8000570a:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
8000570c:	2f f7       	sub	r7,-1
8000570e:	5c 87       	casts.h	r7
   }  // end of while(1)
80005710:	cb bb       	rjmp	80005686 <fat_garbage_collector_entry+0x12>
80005712:	30 0c       	mov	r12,0
80005714:	c0 28       	rjmp	80005718 <fat_garbage_collector_entry+0xa4>
80005716:	30 1c       	mov	r12,1
}
80005718:	2f 8d       	sub	sp,-32
8000571a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000571e:	00 00       	add	r0,r0
80005720:	00 00       	add	r0,r0
80005722:	19 fc       	ld.ub	r12,r12[0x7]
80005724:	80 00       	ld.sh	r0,r0[0x0]
80005726:	4f 40       	lddpc	r0,800058f4 <fat_allocfreespace+0x118>
80005728:	00 00       	add	r0,r0
8000572a:	1a 00       	add	r0,sp
8000572c:	80 00       	ld.sh	r0,r0[0x0]
8000572e:	43 70       	lddsp	r0,sp[0xdc]
80005730:	80 00       	ld.sh	r0,r0[0x0]
80005732:	ba ee       	st.b	sp[0x6],lr
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	46 e0       	lddsp	r0,sp[0x1b8]
80005738:	80 00       	ld.sh	r0,r0[0x0]
8000573a:	b9 a6       	sbr	r6,0x18

8000573c <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000573c:	eb cd 40 c0 	pushm	r6-r7,lr
80005740:	20 1d       	sub	sp,4
80005742:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005744:	49 c8       	lddpc	r8,800057b4 <fat_write_fat32_FSInfo+0x78>
80005746:	90 c9       	ld.uh	r9,r8[0x8]
80005748:	70 4a       	ld.w	r10,r8[0x10]
8000574a:	49 c8       	lddpc	r8,800057b8 <fat_write_fat32_FSInfo+0x7c>
8000574c:	12 1a       	sub	r10,r9
8000574e:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80005750:	30 0c       	mov	r12,0
80005752:	f0 1f 00 1b 	mcall	800057bc <fat_write_fat32_FSInfo+0x80>
80005756:	c2 c0       	breq	800057ae <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80005758:	f0 1f 00 1a 	mcall	800057c0 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
8000575c:	f0 1f 00 1a 	mcall	800057c4 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80005760:	49 a7       	lddpc	r7,800057c8 <fat_write_fat32_FSInfo+0x8c>
80005762:	30 46       	mov	r6,4
80005764:	0c 9a       	mov	r10,r6
80005766:	49 ab       	lddpc	r11,800057cc <fat_write_fat32_FSInfo+0x90>
80005768:	0e 9c       	mov	r12,r7
8000576a:	f0 1f 00 1a 	mcall	800057d0 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000576e:	0c 9a       	mov	r10,r6
80005770:	49 9b       	lddpc	r11,800057d4 <fat_write_fat32_FSInfo+0x98>
80005772:	ee cc fe 1c 	sub	r12,r7,-484
80005776:	f0 1f 00 17 	mcall	800057d0 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000577a:	1b b9       	ld.ub	r9,sp[0x3]
8000577c:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80005780:	1b a9       	ld.ub	r9,sp[0x2]
80005782:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80005786:	1b 99       	ld.ub	r9,sp[0x1]
80005788:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000578c:	1b 88       	ld.ub	r8,sp[0x0]
8000578e:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80005792:	0c 9a       	mov	r10,r6
80005794:	e0 6b 00 ff 	mov	r11,255
80005798:	ee cc fe 14 	sub	r12,r7,-492
8000579c:	f0 1f 00 0f 	mcall	800057d8 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
800057a0:	35 58       	mov	r8,85
800057a2:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
800057a6:	3a a8       	mov	r8,-86
800057a8:	ef 68 01 ff 	st.b	r7[511],r8
800057ac:	30 1c       	mov	r12,1
   return true;
}
800057ae:	2f fd       	sub	sp,-4
800057b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800057b4:	00 00       	add	r0,r0
800057b6:	19 b0       	ld.ub	r0,r12[0x3]
800057b8:	00 00       	add	r0,r0
800057ba:	17 6c       	ld.uh	r12,--r11
800057bc:	80 00       	ld.sh	r0,r0[0x0]
800057be:	49 10       	lddpc	r0,80005800 <fat_allocfreespace+0x24>
800057c0:	80 00       	ld.sh	r0,r0[0x0]
800057c2:	46 e0       	lddsp	r0,sp[0x1b8]
800057c4:	80 00       	ld.sh	r0,r0[0x0]
800057c6:	48 f8       	lddpc	r8,80005800 <fat_allocfreespace+0x24>
800057c8:	00 00       	add	r0,r0
800057ca:	17 b0       	ld.ub	r0,r11[0x3]
800057cc:	80 01       	ld.sh	r1,r0[0x0]
800057ce:	18 c0       	st.b	r12++,r0
800057d0:	80 00       	ld.sh	r0,r0[0x0]
800057d2:	b9 a6       	sbr	r6,0x18
800057d4:	80 01       	ld.sh	r1,r0[0x0]
800057d6:	18 d4       	st.w	--r12,r4
800057d8:	80 00       	ld.sh	r0,r0[0x0]
800057da:	ba ee       	st.b	sp[0x6],lr

800057dc <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800057dc:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800057de:	4c 78       	lddpc	r8,800058f8 <fat_allocfreespace+0x11c>
800057e0:	11 89       	ld.ub	r9,r8[0x0]
800057e2:	30 38       	mov	r8,3
800057e4:	f0 09 18 00 	cp.b	r9,r8
800057e8:	c0 61       	brne	800057f4 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800057ea:	3f fc       	mov	r12,-1
800057ec:	f0 1f 00 44 	mcall	800058fc <fat_allocfreespace+0x120>
800057f0:	e0 80 00 83 	breq	800058f6 <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800057f4:	4c 31       	lddpc	r1,80005900 <fat_allocfreespace+0x124>
800057f6:	03 89       	ld.ub	r9,r1[0x0]
800057f8:	3f f8       	mov	r8,-1
800057fa:	f0 09 18 00 	cp.b	r9,r8
800057fe:	c0 61       	brne	8000580a <fat_allocfreespace+0x2e>
80005800:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80005802:	30 29       	mov	r9,2
80005804:	4c 08       	lddpc	r8,80005904 <fat_allocfreespace+0x128>
80005806:	91 09       	st.w	r8[0x0],r9
80005808:	c0 78       	rjmp	80005816 <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000580a:	4b e8       	lddpc	r8,80005900 <fat_allocfreespace+0x124>
8000580c:	70 09       	ld.w	r9,r8[0x0]
8000580e:	2f f9       	sub	r9,-1
80005810:	4b d8       	lddpc	r8,80005904 <fat_allocfreespace+0x128>
80005812:	91 09       	st.w	r8[0x0],r9
80005814:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
80005816:	f0 1f 00 3d 	mcall	80005908 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
8000581a:	4b b8       	lddpc	r8,80005904 <fat_allocfreespace+0x128>
8000581c:	70 09       	ld.w	r9,r8[0x0]
8000581e:	4b c8       	lddpc	r8,8000590c <fat_allocfreespace+0x130>
80005820:	70 38       	ld.w	r8,r8[0xc]
80005822:	10 39       	cp.w	r9,r8
80005824:	c5 e2       	brcc	800058e0 <fat_allocfreespace+0x104>
80005826:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005828:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000582a:	4b 77       	lddpc	r7,80005904 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000582c:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000582e:	4b 55       	lddpc	r5,80005900 <fat_allocfreespace+0x124>
80005830:	4b 76       	lddpc	r6,8000590c <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005832:	04 9c       	mov	r12,r2
80005834:	f0 1f 00 37 	mcall	80005910 <fat_allocfreespace+0x134>
80005838:	c5 f0       	breq	800058f6 <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000583a:	6e 18       	ld.w	r8,r7[0x4]
8000583c:	58 08       	cp.w	r8,0
8000583e:	c4 01       	brne	800058be <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005840:	6e 08       	ld.w	r8,r7[0x0]
80005842:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005844:	58 04       	cp.w	r4,0
80005846:	c0 80       	breq	80005856 <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80005848:	20 18       	sub	r8,1
8000584a:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000584c:	06 9c       	mov	r12,r3
8000584e:	f0 1f 00 31 	mcall	80005910 <fat_allocfreespace+0x134>
80005852:	c1 e1       	brne	8000588e <fat_allocfreespace+0xb2>
80005854:	c5 18       	rjmp	800058f6 <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80005856:	03 88       	ld.ub	r8,r1[0x0]
80005858:	3f f9       	mov	r9,-1
8000585a:	f2 08 18 00 	cp.b	r8,r9
8000585e:	c1 60       	breq	8000588a <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005860:	6a 08       	ld.w	r8,r5[0x0]
80005862:	58 08       	cp.w	r8,0
80005864:	c0 e1       	brne	80005880 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80005866:	4a 59       	lddpc	r9,800058f8 <fat_allocfreespace+0x11c>
80005868:	13 88       	ld.ub	r8,r9[0x0]
8000586a:	30 39       	mov	r9,3
8000586c:	f2 08 18 00 	cp.b	r8,r9
80005870:	c0 50       	breq	8000587a <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005872:	31 b9       	mov	r9,27
80005874:	4a 88       	lddpc	r8,80005914 <fat_allocfreespace+0x138>
80005876:	b0 89       	st.b	r8[0x0],r9
80005878:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000587a:	6c 68       	ld.w	r8,r6[0x18]
8000587c:	8f 08       	st.w	r7[0x0],r8
8000587e:	c0 28       	rjmp	80005882 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005880:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005882:	06 9c       	mov	r12,r3
80005884:	f0 1f 00 23 	mcall	80005910 <fat_allocfreespace+0x134>
80005888:	c3 70       	breq	800058f6 <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000588a:	6e 18       	ld.w	r8,r7[0x4]
8000588c:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000588e:	6e 18       	ld.w	r8,r7[0x4]
80005890:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80005892:	e0 68 ff ff 	mov	r8,65535
80005896:	ea 18 0f ff 	orh	r8,0xfff
8000589a:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000589c:	06 9c       	mov	r12,r3
8000589e:	f0 1f 00 1d 	mcall	80005910 <fat_allocfreespace+0x134>
800058a2:	c2 a0       	breq	800058f6 <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
800058a4:	6a 19       	ld.w	r9,r5[0x4]
800058a6:	0d 98       	ld.ub	r8,r6[0x1]
800058a8:	10 39       	cp.w	r9,r8
800058aa:	e0 8b 00 06 	brhi	800058b6 <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
800058ae:	30 09       	mov	r9,0
800058b0:	49 48       	lddpc	r8,80005900 <fat_allocfreespace+0x124>
800058b2:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
800058b4:	c1 e8       	rjmp	800058f0 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800058b6:	10 19       	sub	r9,r8
800058b8:	8b 19       	st.w	r5[0x4],r9
800058ba:	06 94       	mov	r4,r3
800058bc:	c0 98       	rjmp	800058ce <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
800058be:	58 04       	cp.w	r4,0
800058c0:	c1 81       	brne	800058f0 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
800058c2:	58 00       	cp.w	r0,0
800058c4:	c0 50       	breq	800058ce <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
800058c6:	6e 08       	ld.w	r8,r7[0x0]
800058c8:	f0 c8 fe 0c 	sub	r8,r8,-500
800058cc:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800058ce:	6e 08       	ld.w	r8,r7[0x0]
800058d0:	2f f8       	sub	r8,-1
800058d2:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800058d4:	6c 39       	ld.w	r9,r6[0xc]
800058d6:	10 39       	cp.w	r9,r8
800058d8:	fe 9b ff ad 	brhi	80005832 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800058dc:	58 04       	cp.w	r4,0
800058de:	c0 91       	brne	800058f0 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800058e0:	58 00       	cp.w	r0,0
800058e2:	c0 30       	breq	800058e8 <fat_allocfreespace+0x10c>
800058e4:	30 00       	mov	r0,0
800058e6:	c8 eb       	rjmp	80005802 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800058e8:	31 b9       	mov	r9,27
800058ea:	48 b8       	lddpc	r8,80005914 <fat_allocfreespace+0x138>
800058ec:	b0 89       	st.b	r8[0x0],r9
800058ee:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
800058f0:	f0 1f 00 0a 	mcall	80005918 <fat_allocfreespace+0x13c>
800058f4:	d8 32       	popm	r0-r7,pc
800058f6:	d8 3a       	popm	r0-r7,pc,r12=0
800058f8:	00 00       	add	r0,r0
800058fa:	19 fc       	ld.ub	r12,r12[0x7]
800058fc:	80 00       	ld.sh	r0,r0[0x0]
800058fe:	57 3c       	stdsp	sp[0x1cc],r12
80005900:	00 00       	add	r0,r0
80005902:	1a 58       	eor	r8,sp
80005904:	00 00       	add	r0,r0
80005906:	1a 50       	eor	r0,sp
80005908:	80 00       	ld.sh	r0,r0[0x0]
8000590a:	53 98       	stdsp	sp[0xe4],r8
8000590c:	00 00       	add	r0,r0
8000590e:	19 b0       	ld.ub	r0,r12[0x3]
80005910:	80 00       	ld.sh	r0,r0[0x0]
80005912:	4a 24       	lddpc	r4,80005998 <fat_alloc_entry_free+0x7c>
80005914:	00 00       	add	r0,r0
80005916:	1a 00       	add	r0,sp
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	54 24       	stdsp	sp[0x108],r4

8000591c <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000591c:	d4 31       	pushm	r0-r7,lr
8000591e:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005920:	30 09       	mov	r9,0
80005922:	4a 38       	lddpc	r8,800059ac <fat_alloc_entry_free+0x90>
80005924:	b0 19       	st.h	r8[0x2],r9
80005926:	18 92       	mov	r2,r12
80005928:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000592a:	4a 26       	lddpc	r6,800059b0 <fat_alloc_entry_free+0x94>
8000592c:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000592e:	4a 21       	lddpc	r1,800059b4 <fat_alloc_entry_free+0x98>
80005930:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005932:	10 97       	mov	r7,r8
80005934:	12 90       	mov	r0,r9
80005936:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005938:	f0 1f 00 20 	mcall	800059b8 <fat_alloc_entry_free+0x9c>
8000593c:	c1 61       	brne	80005968 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000593e:	0d 88       	ld.ub	r8,r6[0x0]
80005940:	e6 08 18 00 	cp.b	r8,r3
80005944:	c3 11       	brne	800059a6 <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80005946:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80005948:	f0 1f 00 1d 	mcall	800059bc <fat_alloc_entry_free+0xa0>
8000594c:	c0 a1       	brne	80005960 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000594e:	58 04       	cp.w	r4,0
80005950:	c2 b1       	brne	800059a6 <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80005952:	f0 1f 00 1c 	mcall	800059c0 <fat_alloc_entry_free+0xa4>
80005956:	c2 80       	breq	800059a6 <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005958:	ae 10       	st.h	r7[0x2],r0
8000595a:	40 02       	lddsp	r2,sp[0x0]
8000595c:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
8000595e:	ce db       	rjmp	80005938 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005960:	f0 1f 00 19 	mcall	800059c4 <fat_alloc_entry_free+0xa8>
80005964:	ce a1       	brne	80005938 <fat_alloc_entry_free+0x1c>
80005966:	c2 08       	rjmp	800059a6 <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005968:	f0 1f 00 18 	mcall	800059c8 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
8000596c:	19 88       	ld.ub	r8,r12[0x0]
8000596e:	30 09       	mov	r9,0
80005970:	f2 08 18 00 	cp.b	r8,r9
80005974:	c0 61       	brne	80005980 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
80005976:	20 12       	sub	r2,1
80005978:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000597a:	c0 31       	brne	80005980 <fat_alloc_entry_free+0x64>
8000597c:	30 1c       	mov	r12,1
8000597e:	c1 58       	rjmp	800059a8 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005980:	8e 18       	ld.sh	r8,r7[0x2]
80005982:	2f f8       	sub	r8,-1
80005984:	5c 88       	casts.h	r8
80005986:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005988:	cd 81       	brne	80005938 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000598a:	58 04       	cp.w	r4,0
8000598c:	c0 60       	breq	80005998 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000598e:	31 b9       	mov	r9,27
80005990:	48 88       	lddpc	r8,800059b0 <fat_alloc_entry_free+0x94>
80005992:	b0 89       	st.b	r8[0x0],r9
80005994:	30 0c       	mov	r12,0
            return false;
80005996:	c0 98       	rjmp	800059a8 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
80005998:	f0 1f 00 0a 	mcall	800059c0 <fat_alloc_entry_free+0xa4>
8000599c:	c0 50       	breq	800059a6 <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000599e:	ae 10       	st.h	r7[0x2],r0
800059a0:	40 02       	lddsp	r2,sp[0x0]
800059a2:	0a 94       	mov	r4,r5
800059a4:	cc ab       	rjmp	80005938 <fat_alloc_entry_free+0x1c>
800059a6:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
800059a8:	2f fd       	sub	sp,-4
800059aa:	d8 32       	popm	r0-r7,pc
800059ac:	00 00       	add	r0,r0
800059ae:	19 fc       	ld.ub	r12,r12[0x7]
800059b0:	00 00       	add	r0,r0
800059b2:	1a 00       	add	r0,sp
800059b4:	00 00       	add	r0,r0
800059b6:	1a 58       	eor	r8,sp
800059b8:	80 00       	ld.sh	r0,r0[0x0]
800059ba:	4f 40       	lddpc	r0,80005b88 <fat_create_short_entry_name+0x148>
800059bc:	80 00       	ld.sh	r0,r0[0x0]
800059be:	57 dc       	stdsp	sp[0x1f4],r12
800059c0:	80 00       	ld.sh	r0,r0[0x0]
800059c2:	56 74       	stdsp	sp[0x19c],r4
800059c4:	80 00       	ld.sh	r0,r0[0x0]
800059c6:	53 b0       	stdsp	sp[0xec],r0
800059c8:	80 00       	ld.sh	r0,r0[0x0]
800059ca:	43 70       	lddsp	r0,sp[0xdc]

800059cc <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800059cc:	d4 31       	pushm	r0-r7,lr
800059ce:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059d0:	33 a2       	mov	r2,58
800059d2:	30 d5       	mov	r5,13
800059d4:	30 23       	mov	r3,2
800059d6:	49 86       	lddpc	r6,80005a34 <fat_check_name+0x68>
800059d8:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800059dc:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800059de:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800059e0:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800059e2:	0e 9c       	mov	r12,r7
800059e4:	f0 1f 00 15 	mcall	80005a38 <fat_check_name+0x6c>
800059e8:	c1 a1       	brne	80005a1c <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059ea:	ee 02 19 00 	cp.h	r2,r7
800059ee:	c0 60       	breq	800059fa <fat_check_name+0x2e>
800059f0:	02 98       	mov	r8,r1
800059f2:	11 89       	ld.ub	r9,r8[0x0]
800059f4:	ee 09 19 00 	cp.h	r9,r7
800059f8:	c0 61       	brne	80005a04 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800059fa:	31 c9       	mov	r9,28
800059fc:	49 08       	lddpc	r8,80005a3c <fat_check_name+0x70>
800059fe:	b0 89       	st.b	r8[0x0],r9
80005a00:	30 03       	mov	r3,0
            return 0;      // incorrect character
80005a02:	c1 68       	rjmp	80005a2e <fat_check_name+0x62>
80005a04:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80005a06:	0c 38       	cp.w	r8,r6
80005a08:	cf 51       	brne	800059f2 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
80005a0a:	58 05       	cp.w	r5,0
80005a0c:	c0 41       	brne	80005a14 <fat_check_name+0x48>
      {
         u8_nb_entry++;
80005a0e:	2f f3       	sub	r3,-1
80005a10:	5c 53       	castu.b	r3
80005a12:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
80005a14:	20 15       	sub	r5,1
80005a16:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80005a18:	2f f4       	sub	r4,-1
   }
80005a1a:	ce 3b       	rjmp	800059e0 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
80005a1c:	31 48       	mov	r8,20
80005a1e:	f0 03 18 00 	cp.b	r3,r8
80005a22:	e0 88 00 06 	brls	80005a2e <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80005a26:	32 b9       	mov	r9,43
80005a28:	48 58       	lddpc	r8,80005a3c <fat_check_name+0x70>
80005a2a:	b0 89       	st.b	r8[0x0],r9
80005a2c:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
80005a2e:	06 9c       	mov	r12,r3
80005a30:	d8 32       	popm	r0-r7,pc
80005a32:	00 00       	add	r0,r0
80005a34:	80 01       	ld.sh	r1,r0[0x0]
80005a36:	18 c4       	st.b	r12++,r4
80005a38:	80 00       	ld.sh	r0,r0[0x0]
80005a3a:	43 48       	lddsp	r8,sp[0xd0]
80005a3c:	00 00       	add	r0,r0
80005a3e:	1a 00       	add	r0,sp

80005a40 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005a40:	d4 31       	pushm	r0-r7,lr
80005a42:	20 8d       	sub	sp,32
80005a44:	18 94       	mov	r4,r12
80005a46:	50 2b       	stdsp	sp[0x8],r11
80005a48:	14 97       	mov	r7,r10
80005a4a:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80005a4c:	58 09       	cp.w	r9,0
80005a4e:	c0 40       	breq	80005a56 <fat_create_short_entry_name+0x16>
80005a50:	30 09       	mov	r9,0
80005a52:	50 19       	stdsp	sp[0x4],r9
80005a54:	c0 68       	rjmp	80005a60 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005a56:	f0 1f 00 66 	mcall	80005bec <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80005a5a:	f0 1f 00 66 	mcall	80005bf0 <fat_create_short_entry_name+0x1b0>
80005a5e:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005a60:	30 98       	mov	r8,9
80005a62:	f0 07 18 00 	cp.b	r7,r8
80005a66:	e0 8b 00 04 	brhi	80005a6e <fat_create_short_entry_name+0x2e>
80005a6a:	30 18       	mov	r8,1
80005a6c:	c0 88       	rjmp	80005a7c <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80005a6e:	36 38       	mov	r8,99
80005a70:	ee 08 18 00 	cp.b	r8,r7
80005a74:	f9 b8 02 02 	movhs	r8,2
80005a78:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80005a7c:	e0 6a cc cd 	mov	r10,52429
80005a80:	ea 1a cc cc 	orh	r10,0xcccc
80005a84:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005a88:	e6 09 16 03 	lsr	r9,r3,0x3
80005a8c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005a90:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80005a94:	2d 09       	sub	r9,-48
80005a96:	5c 59       	castu.b	r9
80005a98:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80005a9a:	e0 63 85 1f 	mov	r3,34079
80005a9e:	ea 13 51 eb 	orh	r3,0x51eb
80005aa2:	ee 03 06 42 	mulu.d	r2,r7,r3
80005aa6:	e6 09 16 05 	lsr	r9,r3,0x5
80005aaa:	f2 0b 10 64 	mul	r11,r9,100
80005aae:	ee 0b 01 0b 	sub	r11,r7,r11
80005ab2:	5c 5b       	castu.b	r11
80005ab4:	f6 0a 06 4a 	mulu.d	r10,r11,r10
80005ab8:	f6 0a 16 03 	lsr	r10,r11,0x3
80005abc:	2d 0a       	sub	r10,-48
80005abe:	5c 5a       	castu.b	r10
80005ac0:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005ac2:	2d 09       	sub	r9,-48
80005ac4:	5c 59       	castu.b	r9
80005ac6:	50 49       	stdsp	sp[0x10],r9
80005ac8:	30 01       	mov	r1,0
80005aca:	30 17       	mov	r7,1
80005acc:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80005ace:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005ad0:	f0 09 11 ff 	rsub	r9,r8,-1
80005ad4:	2f 89       	sub	r9,-8
80005ad6:	50 39       	stdsp	sp[0xc],r9
80005ad8:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
80005ada:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005adc:	f0 08 11 06 	rsub	r8,r8,6
80005ae0:	5c 58       	castu.b	r8
80005ae2:	50 78       	stdsp	sp[0x1c],r8
80005ae4:	c0 28       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005ae6:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80005ae8:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
80005aea:	e6 07 18 00 	cp.b	r7,r3
80005aee:	c1 41       	brne	80005b16 <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005af0:	40 39       	lddsp	r9,sp[0xc]
80005af2:	0a 39       	cp.w	r9,r5
80005af4:	5f 09       	sreq	r9
80005af6:	e0 06 18 00 	cp.b	r6,r0
80005afa:	5f 08       	sreq	r8
80005afc:	f3 e8 10 08 	or	r8,r9,r8
80005b00:	30 09       	mov	r9,0
80005b02:	f2 08 18 00 	cp.b	r8,r9
80005b06:	c0 51       	brne	80005b10 <fat_create_short_entry_name+0xd0>
80005b08:	0c 9c       	mov	r12,r6
80005b0a:	f0 1f 00 3b 	mcall	80005bf4 <fat_create_short_entry_name+0x1b4>
80005b0e:	c1 10       	breq	80005b30 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005b10:	2f f7       	sub	r7,-1
80005b12:	5c 57       	castu.b	r7
            continue;
80005b14:	ce ab       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005b16:	e4 07 18 00 	cp.b	r7,r2
80005b1a:	c1 21       	brne	80005b3e <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005b1c:	30 b9       	mov	r9,11
80005b1e:	f2 05 18 00 	cp.b	r5,r9
80005b22:	c0 50       	breq	80005b2c <fat_create_short_entry_name+0xec>
80005b24:	0c 9c       	mov	r12,r6
80005b26:	f0 1f 00 34 	mcall	80005bf4 <fat_create_short_entry_name+0x1b4>
80005b2a:	c0 30       	breq	80005b30 <fat_create_short_entry_name+0xf0>
80005b2c:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80005b2e:	cd db       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005b30:	0c 9c       	mov	r12,r6
80005b32:	f0 1f 00 32 	mcall	80005bf8 <fat_create_short_entry_name+0x1b8>
80005b36:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005b38:	2f f4       	sub	r4,-1
         if( 0 == character )
80005b3a:	58 0c       	cp.w	r12,0
80005b3c:	cd 60       	breq	80005ae8 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80005b3e:	30 78       	mov	r8,7
80005b40:	f0 07 18 00 	cp.b	r7,r8
80005b44:	c0 c1       	brne	80005b5c <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005b46:	e0 06 18 00 	cp.b	r6,r0
80005b4a:	c0 50       	breq	80005b54 <fat_create_short_entry_name+0x114>
80005b4c:	0c 9c       	mov	r12,r6
80005b4e:	f0 1f 00 2a 	mcall	80005bf4 <fat_create_short_entry_name+0x1b4>
80005b52:	c0 30       	breq	80005b58 <fat_create_short_entry_name+0x118>
80005b54:	30 87       	mov	r7,8
80005b56:	cc 9b       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005b58:	2f f4       	sub	r4,-1
80005b5a:	cc 7b       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80005b5c:	30 68       	mov	r8,6
80005b5e:	f0 07 18 00 	cp.b	r7,r8
80005b62:	c0 61       	brne	80005b6e <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005b64:	e4 05 18 00 	cp.b	r5,r2
80005b68:	cb f0       	breq	80005ae6 <fat_create_short_entry_name+0xa6>
80005b6a:	32 06       	mov	r6,32
80005b6c:	c1 28       	rjmp	80005b90 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80005b6e:	30 98       	mov	r8,9
80005b70:	f0 07 18 00 	cp.b	r7,r8
80005b74:	c0 71       	brne	80005b82 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005b76:	30 b8       	mov	r8,11
80005b78:	f0 05 18 00 	cp.b	r5,r8
80005b7c:	c3 50       	breq	80005be6 <fat_create_short_entry_name+0x1a6>
80005b7e:	32 06       	mov	r6,32
80005b80:	c0 f8       	rjmp	80005b9e <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005b82:	30 58       	mov	r8,5
80005b84:	f0 07 18 00 	cp.b	r7,r8
80005b88:	c0 41       	brne	80005b90 <fat_create_short_entry_name+0x150>
80005b8a:	40 66       	lddsp	r6,sp[0x18]
80005b8c:	30 67       	mov	r7,6
80005b8e:	c0 f8       	rjmp	80005bac <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005b90:	30 48       	mov	r8,4
80005b92:	f0 07 18 00 	cp.b	r7,r8
80005b96:	c0 41       	brne	80005b9e <fat_create_short_entry_name+0x15e>
80005b98:	40 56       	lddsp	r6,sp[0x14]
80005b9a:	30 57       	mov	r7,5
80005b9c:	c1 28       	rjmp	80005bc0 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80005b9e:	30 38       	mov	r8,3
80005ba0:	f0 07 18 00 	cp.b	r7,r8
80005ba4:	c0 41       	brne	80005bac <fat_create_short_entry_name+0x16c>
80005ba6:	40 46       	lddsp	r6,sp[0x10]
80005ba8:	30 47       	mov	r7,4
80005baa:	c0 b8       	rjmp	80005bc0 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80005bac:	30 28       	mov	r8,2
80005bae:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005bb0:	f0 07 18 00 	cp.b	r7,r8
80005bb4:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
80005bb8:	f0 09 18 00 	cp.b	r9,r8
80005bbc:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
80005bc0:	40 08       	lddsp	r8,sp[0x0]
80005bc2:	58 08       	cp.w	r8,0
80005bc4:	c0 50       	breq	80005bce <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
80005bc6:	40 29       	lddsp	r9,sp[0x8]
80005bc8:	12 c6       	st.b	r9++,r6
80005bca:	50 29       	stdsp	sp[0x8],r9
80005bcc:	c0 48       	rjmp	80005bd4 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80005bce:	40 18       	lddsp	r8,sp[0x4]
80005bd0:	10 c6       	st.b	r8++,r6
80005bd2:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80005bd4:	2f f5       	sub	r5,-1
80005bd6:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005bd8:	e2 08 16 01 	lsr	r8,r1,0x1
80005bdc:	a7 71       	lsl	r1,0x7
80005bde:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005be0:	0c 01       	add	r1,r6
80005be2:	5c 51       	castu.b	r1
80005be4:	c8 2b       	rjmp	80005ae8 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005be6:	02 9c       	mov	r12,r1
80005be8:	2f 8d       	sub	sp,-32
80005bea:	d8 32       	popm	r0-r7,pc
80005bec:	80 00       	ld.sh	r0,r0[0x0]
80005bee:	46 e0       	lddsp	r0,sp[0x1b8]
80005bf0:	80 00       	ld.sh	r0,r0[0x0]
80005bf2:	43 70       	lddsp	r0,sp[0xdc]
80005bf4:	80 00       	ld.sh	r0,r0[0x0]
80005bf6:	43 48       	lddsp	r8,sp[0xd0]
80005bf8:	80 00       	ld.sh	r0,r0[0x0]
80005bfa:	53 4c       	stdsp	sp[0xd0],r12

80005bfc <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80005bfc:	eb cd 40 80 	pushm	r7,lr
80005c00:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005c02:	f0 1f 00 12 	mcall	80005c48 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005c06:	19 88       	ld.ub	r8,r12[0x0]
80005c08:	58 08       	cp.w	r8,0
80005c0a:	c0 61       	brne	80005c16 <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80005c0c:	30 a9       	mov	r9,10
80005c0e:	49 08       	lddpc	r8,80005c4c <fat_entry_shortname_compare+0x50>
80005c10:	b0 89       	st.b	r8[0x0],r9
80005c12:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005c16:	3e 59       	mov	r9,-27
80005c18:	f2 08 18 00 	cp.b	r8,r9
80005c1c:	c0 70       	breq	80005c2a <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80005c1e:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005c22:	30 f8       	mov	r8,15
80005c24:	f0 09 18 00 	cp.b	r9,r8
80005c28:	c0 61       	brne	80005c34 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005c2a:	30 b9       	mov	r9,11
80005c2c:	48 88       	lddpc	r8,80005c4c <fat_entry_shortname_compare+0x50>
80005c2e:	b0 89       	st.b	r8[0x0],r9
80005c30:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005c34:	30 b9       	mov	r9,11
80005c36:	48 68       	lddpc	r8,80005c4c <fat_entry_shortname_compare+0x50>
80005c38:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80005c3a:	30 ba       	mov	r10,11
80005c3c:	0e 9b       	mov	r11,r7
80005c3e:	f0 1f 00 05 	mcall	80005c50 <fat_entry_shortname_compare+0x54>
80005c42:	5f 0c       	sreq	r12
}
80005c44:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c48:	80 00       	ld.sh	r0,r0[0x0]
80005c4a:	43 70       	lddsp	r0,sp[0xdc]
80005c4c:	00 00       	add	r0,r0
80005c4e:	1a 00       	add	r0,sp
80005c50:	80 00       	ld.sh	r0,r0[0x0]
80005c52:	b9 80       	lsr	r0,0x18

80005c54 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005c54:	d4 31       	pushm	r0-r7,lr
80005c56:	20 3d       	sub	sp,12
80005c58:	18 93       	mov	r3,r12
80005c5a:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c5c:	1a 96       	mov	r6,sp
80005c5e:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c60:	49 65       	lddpc	r5,80005cb8 <fat_find_short_entry_name+0x64>
80005c62:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c64:	49 61       	lddpc	r1,80005cbc <fat_find_short_entry_name+0x68>
80005c66:	30 a0       	mov	r0,10
80005c68:	c0 58       	rjmp	80005c72 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80005c6a:	3f f8       	mov	r8,-1
80005c6c:	f0 07 18 00 	cp.b	r7,r8
80005c70:	c2 00       	breq	80005cb0 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80005c72:	2f f7       	sub	r7,-1
80005c74:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c76:	04 99       	mov	r9,r2
80005c78:	0e 9a       	mov	r10,r7
80005c7a:	1a 9b       	mov	r11,sp
80005c7c:	06 9c       	mov	r12,r3
80005c7e:	f0 1f 00 11 	mcall	80005cc0 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c82:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005c84:	f0 1f 00 10 	mcall	80005cc4 <fat_find_short_entry_name+0x70>
80005c88:	c0 81       	brne	80005c98 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80005c8a:	48 d8       	lddpc	r8,80005cbc <fat_find_short_entry_name+0x68>
80005c8c:	11 89       	ld.ub	r9,r8[0x0]
80005c8e:	31 a8       	mov	r8,26
80005c90:	f0 09 18 00 	cp.b	r9,r8
80005c94:	c0 e1       	brne	80005cb0 <fat_find_short_entry_name+0x5c>
80005c96:	c0 e8       	rjmp	80005cb2 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005c98:	1a 9c       	mov	r12,sp
80005c9a:	f0 1f 00 0c 	mcall	80005cc8 <fat_find_short_entry_name+0x74>
80005c9e:	ce 61       	brne	80005c6a <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005ca0:	03 88       	ld.ub	r8,r1[0x0]
80005ca2:	e0 08 18 00 	cp.b	r8,r0
80005ca6:	c0 60       	breq	80005cb2 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005ca8:	8a 18       	ld.sh	r8,r5[0x2]
80005caa:	2f f8       	sub	r8,-1
80005cac:	aa 18       	st.h	r5[0x2],r8
      }
80005cae:	ce bb       	rjmp	80005c84 <fat_find_short_entry_name+0x30>
80005cb0:	30 07       	mov	r7,0
   }
}
80005cb2:	0e 9c       	mov	r12,r7
80005cb4:	2f dd       	sub	sp,-12
80005cb6:	d8 32       	popm	r0-r7,pc
80005cb8:	00 00       	add	r0,r0
80005cba:	19 fc       	ld.ub	r12,r12[0x7]
80005cbc:	00 00       	add	r0,r0
80005cbe:	1a 00       	add	r0,sp
80005cc0:	80 00       	ld.sh	r0,r0[0x0]
80005cc2:	5a 40       	cp.w	r0,-28
80005cc4:	80 00       	ld.sh	r0,r0[0x0]
80005cc6:	4f 40       	lddpc	r0,80005e94 <fat_mount+0x120>
80005cc8:	80 00       	ld.sh	r0,r0[0x0]
80005cca:	5b fc       	cp.w	r12,-1

80005ccc <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80005ccc:	eb cd 40 fc 	pushm	r2-r7,lr
80005cd0:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005cd2:	f0 1f 00 21 	mcall	80005d54 <fat_create_entry_file_name+0x88>
80005cd6:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005cd8:	c3 b0       	breq	80005d4e <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005cda:	0c 9c       	mov	r12,r6
80005cdc:	f0 1f 00 1f 	mcall	80005d58 <fat_create_entry_file_name+0x8c>
80005ce0:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005ce2:	c0 61       	brne	80005cee <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005ce4:	32 a9       	mov	r9,42
80005ce6:	49 e8       	lddpc	r8,80005d5c <fat_create_entry_file_name+0x90>
80005ce8:	b0 89       	st.b	r8[0x0],r9
80005cea:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005cee:	0a 9c       	mov	r12,r5
80005cf0:	f0 1f 00 1c 	mcall	80005d60 <fat_create_entry_file_name+0x94>
80005cf4:	c2 d0       	breq	80005d4e <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005cf6:	30 09       	mov	r9,0
80005cf8:	0e 9a       	mov	r10,r7
80005cfa:	12 9b       	mov	r11,r9
80005cfc:	0c 9c       	mov	r12,r6
80005cfe:	f0 1f 00 1a 	mcall	80005d64 <fat_create_entry_file_name+0x98>
80005d02:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005d04:	20 15       	sub	r5,1
80005d06:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005d08:	c1 c0       	breq	80005d40 <fat_create_entry_file_name+0x74>
80005d0a:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005d0c:	49 74       	lddpc	r4,80005d68 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005d0e:	ea c3 ff c0 	sub	r3,r5,-64
80005d12:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005d14:	88 18       	ld.sh	r8,r4[0x2]
80005d16:	20 18       	sub	r8,1
80005d18:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80005d1a:	f0 1f 00 15 	mcall	80005d6c <fat_create_entry_file_name+0xa0>
80005d1e:	c1 80       	breq	80005d4e <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005d20:	ea 07 18 00 	cp.b	r7,r5
80005d24:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005d28:	0e 9a       	mov	r10,r7
80005d2a:	04 9b       	mov	r11,r2
80005d2c:	0c 9c       	mov	r12,r6
80005d2e:	f0 1f 00 11 	mcall	80005d70 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005d32:	2f f7       	sub	r7,-1
80005d34:	5c 57       	castu.b	r7
80005d36:	ee 05 18 00 	cp.b	r5,r7
80005d3a:	c0 33       	brcs	80005d40 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005d3c:	2f 36       	sub	r6,-13
80005d3e:	ce bb       	rjmp	80005d14 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005d40:	48 a8       	lddpc	r8,80005d68 <fat_create_entry_file_name+0x9c>
80005d42:	90 19       	ld.sh	r9,r8[0x2]
80005d44:	f2 05 00 05 	add	r5,r9,r5
80005d48:	b0 15       	st.h	r8[0x2],r5
80005d4a:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80005d4e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005d52:	00 00       	add	r0,r0
80005d54:	80 00       	ld.sh	r0,r0[0x0]
80005d56:	59 cc       	cp.w	r12,28
80005d58:	80 00       	ld.sh	r0,r0[0x0]
80005d5a:	5c 54       	castu.b	r4
80005d5c:	00 00       	add	r0,r0
80005d5e:	1a 00       	add	r0,sp
80005d60:	80 00       	ld.sh	r0,r0[0x0]
80005d62:	59 1c       	cp.w	r12,17
80005d64:	80 00       	ld.sh	r0,r0[0x0]
80005d66:	5a 40       	cp.w	r0,-28
80005d68:	00 00       	add	r0,r0
80005d6a:	19 fc       	ld.ub	r12,r12[0x7]
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	4f 40       	lddpc	r0,80005f3c <fat_mount+0x1c8>
80005d70:	80 00       	ld.sh	r0,r0[0x0]
80005d72:	55 30       	stdsp	sp[0x14c],r0

80005d74 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005d74:	d4 31       	pushm	r0-r7,lr
80005d76:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005d78:	30 07       	mov	r7,0
80005d7a:	fe f8 02 d2 	ld.w	r8,pc[722]
80005d7e:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005d80:	f0 1f 00 b4 	mcall	80006050 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005d84:	fe f8 02 d0 	ld.w	r8,pc[720]
80005d88:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005d8a:	fe f8 02 ce 	ld.w	r8,pc[718]
80005d8e:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80005d90:	f0 1f 00 b3 	mcall	8000605c <fat_mount+0x2e8>
80005d94:	e0 80 01 58 	breq	80006044 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d98:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005d9c:	ea c8 fe 42 	sub	r8,r5,-446
80005da0:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005da2:	38 04       	mov	r4,-128
80005da4:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005da6:	30 1c       	mov	r12,1
80005da8:	f0 1f 00 af 	mcall	80006064 <fat_mount+0x2f0>
80005dac:	e0 80 01 4c 	breq	80006044 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005db0:	eb 39 01 fe 	ld.ub	r9,r5[510]
80005db4:	35 58       	mov	r8,85
80005db6:	f0 09 18 00 	cp.b	r9,r8
80005dba:	c0 d0       	breq	80005dd4 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005dbc:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005dc0:	3a a8       	mov	r8,-86
80005dc2:	f0 09 18 00 	cp.b	r9,r8
80005dc6:	c0 70       	breq	80005dd4 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005dc8:	30 29       	mov	r9,2
80005dca:	fe f8 02 9e 	ld.w	r8,pc[670]
80005dce:	b0 89       	st.b	r8[0x0],r9
80005dd0:	30 0c       	mov	r12,0
         return false;
80005dd2:	c3 a9       	rjmp	80006046 <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80005dd4:	fe f8 02 84 	ld.w	r8,pc[644]
80005dd8:	70 08       	ld.w	r8,r8[0x0]
80005dda:	58 08       	cp.w	r8,0
80005ddc:	c5 21       	brne	80005e80 <fat_mount+0x10c>
80005dde:	40 08       	lddsp	r8,sp[0x0]
80005de0:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005de2:	30 1e       	mov	lr,1
80005de4:	30 63       	mov	r3,6
80005de6:	30 e2       	mov	r2,14
80005de8:	30 b1       	mov	r1,11
80005dea:	30 c0       	mov	r0,12
80005dec:	11 89       	ld.ub	r9,r8[0x0]
80005dee:	e8 09 18 00 	cp.b	r9,r4
80005df2:	5f 0b       	sreq	r11
80005df4:	ee 09 18 00 	cp.b	r9,r7
80005df8:	5f 09       	sreq	r9
80005dfa:	f7 e9 10 09 	or	r9,r11,r9
80005dfe:	ee 09 18 00 	cp.b	r9,r7
80005e02:	c1 90       	breq	80005e34 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005e04:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005e06:	fc 09 18 00 	cp.b	r9,lr
80005e0a:	5f 0c       	sreq	r12
80005e0c:	ec 09 18 00 	cp.b	r9,r6
80005e10:	5f 0b       	sreq	r11
80005e12:	f9 eb 10 0b 	or	r11,r12,r11
80005e16:	ee 0b 18 00 	cp.b	r11,r7
80005e1a:	c1 41       	brne	80005e42 <fat_mount+0xce>
80005e1c:	e6 09 18 00 	cp.b	r9,r3
80005e20:	c1 10       	breq	80005e42 <fat_mount+0xce>
80005e22:	e4 09 18 00 	cp.b	r9,r2
80005e26:	c0 e0       	breq	80005e42 <fat_mount+0xce>
80005e28:	e2 09 18 00 	cp.b	r9,r1
80005e2c:	c0 b0       	breq	80005e42 <fat_mount+0xce>
80005e2e:	e0 09 18 00 	cp.b	r9,r0
80005e32:	c0 80       	breq	80005e42 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005e34:	2f fa       	sub	r10,-1
80005e36:	5c 5a       	castu.b	r10
80005e38:	2f 08       	sub	r8,-16
80005e3a:	ec 0a 18 00 	cp.b	r10,r6
80005e3e:	cd 71       	brne	80005dec <fat_mount+0x78>
80005e40:	c2 08       	rjmp	80005e80 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005e42:	ec 0a 18 00 	cp.b	r10,r6
80005e46:	c1 d0       	breq	80005e80 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005e48:	fe f3 02 10 	ld.w	r3,pc[528]
80005e4c:	a5 6a       	lsl	r10,0x4
80005e4e:	f4 ca fe 42 	sub	r10,r10,-446
80005e52:	ea 0a 00 0a 	add	r10,r5,r10
80005e56:	f5 38 00 08 	ld.ub	r8,r10[8]
80005e5a:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005e5c:	f5 38 00 09 	ld.ub	r8,r10[9]
80005e60:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005e62:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005e66:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005e68:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005e6c:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005e6e:	4f 88       	lddpc	r8,8000604c <fat_mount+0x2d8>
80005e70:	11 8c       	ld.ub	r12,r8[0x0]
80005e72:	f0 1f 00 7f 	mcall	8000606c <fat_mount+0x2f8>
80005e76:	66 08       	ld.w	r8,r3[0x0]
80005e78:	f8 08 02 48 	mul	r8,r12,r8
80005e7c:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005e7e:	c9 4b       	rjmp	80005da6 <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005e80:	4f 88       	lddpc	r8,80006060 <fat_mount+0x2ec>
80005e82:	11 89       	ld.ub	r9,r8[0x0]
80005e84:	3e b8       	mov	r8,-21
80005e86:	f0 09 18 00 	cp.b	r9,r8
80005e8a:	c0 f1       	brne	80005ea8 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005e8c:	4f 58       	lddpc	r8,80006060 <fat_mount+0x2ec>
80005e8e:	11 a9       	ld.ub	r9,r8[0x2]
80005e90:	39 08       	mov	r8,-112
80005e92:	f0 09 18 00 	cp.b	r9,r8
80005e96:	c0 91       	brne	80005ea8 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005e98:	4f 28       	lddpc	r8,80006060 <fat_mount+0x2ec>
80005e9a:	f1 38 00 15 	ld.ub	r8,r8[21]
80005e9e:	e2 18 00 f0 	andl	r8,0xf0,COH
80005ea2:	e0 48 00 f0 	cp.w	r8,240
80005ea6:	c0 60       	breq	80005eb2 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005ea8:	30 39       	mov	r9,3
80005eaa:	4f 08       	lddpc	r8,80006068 <fat_mount+0x2f4>
80005eac:	b0 89       	st.b	r8[0x0],r9
80005eae:	30 0c       	mov	r12,0
      return false;
80005eb0:	cc b8       	rjmp	80006046 <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005eb2:	30 49       	mov	r9,4
80005eb4:	4e d8       	lddpc	r8,80006068 <fat_mount+0x2f4>
80005eb6:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005eb8:	4e aa       	lddpc	r10,80006060 <fat_mount+0x2ec>
80005eba:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005ebe:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005ec0:	f5 38 00 0d 	ld.ub	r8,r10[13]
80005ec4:	b3 38       	mul	r8,r9
80005ec6:	5c 58       	castu.b	r8
80005ec8:	4e 1b       	lddpc	r11,8000604c <fat_mount+0x2d8>
80005eca:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005ecc:	30 0b       	mov	r11,0
80005ece:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005ed0:	fa cb ff fc 	sub	r11,sp,-4
80005ed4:	fa c7 ff f9 	sub	r7,sp,-7
80005ed8:	f5 3c 00 16 	ld.ub	r12,r10[22]
80005edc:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005ede:	fa ce ff fa 	sub	lr,sp,-6
80005ee2:	f5 3a 00 17 	ld.ub	r10,r10[23]
80005ee6:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80005ee8:	40 1a       	lddsp	r10,sp[0x4]
80005eea:	58 0a       	cp.w	r10,0
80005eec:	c0 e1       	brne	80005f08 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005eee:	4d da       	lddpc	r10,80006060 <fat_mount+0x2ec>
80005ef0:	f5 3c 00 24 	ld.ub	r12,r10[36]
80005ef4:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005ef6:	f5 3c 00 25 	ld.ub	r12,r10[37]
80005efa:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005efc:	f5 3c 00 26 	ld.ub	r12,r10[38]
80005f00:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80005f02:	f5 3a 00 27 	ld.ub	r10,r10[39]
80005f06:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80005f08:	12 95       	mov	r5,r9
80005f0a:	40 1c       	lddsp	r12,sp[0x4]
80005f0c:	f2 0c 02 4c 	mul	r12,r9,r12
80005f10:	4c fa       	lddpc	r10,8000604c <fat_mount+0x2d8>
80005f12:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f14:	4d 3a       	lddpc	r10,80006060 <fat_mount+0x2ec>
80005f16:	f5 3a 00 13 	ld.ub	r10,r10[19]
80005f1a:	58 0a       	cp.w	r10,0
80005f1c:	c1 61       	brne	80005f48 <fat_mount+0x1d4>
80005f1e:	4d 16       	lddpc	r6,80006060 <fat_mount+0x2ec>
80005f20:	ed 34 00 14 	ld.ub	r4,r6[20]
80005f24:	30 06       	mov	r6,0
80005f26:	ec 04 18 00 	cp.b	r4,r6
80005f2a:	c0 f1       	brne	80005f48 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005f2c:	4c da       	lddpc	r10,80006060 <fat_mount+0x2ec>
80005f2e:	f5 36 00 20 	ld.ub	r6,r10[32]
80005f32:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005f34:	f5 37 00 21 	ld.ub	r7,r10[33]
80005f38:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005f3a:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005f3e:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005f40:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005f44:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f46:	c0 98       	rjmp	80005f58 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005f48:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005f4a:	4c 6a       	lddpc	r10,80006060 <fat_mount+0x2ec>
80005f4c:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005f50:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005f52:	30 0a       	mov	r10,0
80005f54:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005f56:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005f58:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005f5a:	4b da       	lddpc	r10,8000604c <fat_mount+0x2d8>
80005f5c:	f8 0b 15 01 	lsl	r11,r12,0x1
80005f60:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005f64:	fa c6 ff f6 	sub	r6,sp,-10
80005f68:	fa c7 ff f4 	sub	r7,sp,-12
80005f6c:	4b db       	lddpc	r11,80006060 <fat_mount+0x2ec>
80005f6e:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005f72:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005f74:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005f78:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005f7a:	f2 03 15 04 	lsl	r3,r9,0x4
80005f7e:	9a de       	ld.uh	lr,sp[0xa]
80005f80:	e6 0e 00 0e 	add	lr,r3,lr
80005f84:	a5 7e       	lsl	lr,0x5
80005f86:	20 1e       	sub	lr,1
80005f88:	f2 03 15 09 	lsl	r3,r9,0x9
80005f8c:	fc 03 0c 02 	divs	r2,lr,r3
80005f90:	e4 09 02 4e 	mul	lr,r2,r9
80005f94:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005f98:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005f9c:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005f9e:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005fa2:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005fa4:	9a 57       	ld.sh	r7,sp[0xa]
80005fa6:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005faa:	0e 96       	mov	r6,r7
80005fac:	ee 0b 01 0b 	sub	r11,r7,r11
80005fb0:	b3 3b       	mul	r11,r9
80005fb2:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005fb4:	ee 09 02 49 	mul	r9,r7,r9
80005fb8:	5c 79       	castu.h	r9
80005fba:	4a 8b       	lddpc	r11,80006058 <fat_mount+0x2e4>
80005fbc:	76 0b       	ld.w	r11,r11[0x0]
80005fbe:	f2 0b 00 0b 	add	r11,r9,r11
80005fc2:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005fc4:	5c 7e       	castu.h	lr
80005fc6:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005fca:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005fcc:	58 08       	cp.w	r8,0
80005fce:	c3 b0       	breq	80006044 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005fd0:	a9 35       	mul	r5,r4
80005fd2:	ea 09 01 09 	sub	r9,r5,r9
80005fd6:	18 19       	sub	r9,r12
80005fd8:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005fda:	30 1a       	mov	r10,1
80005fdc:	f4 08 18 00 	cp.b	r8,r10
80005fe0:	c0 70       	breq	80005fee <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005fe2:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005fe4:	a1 98       	lsr	r8,0x1
80005fe6:	f4 08 18 00 	cp.b	r8,r10
80005fea:	cf c1       	brne	80005fe2 <fat_mount+0x26e>
80005fec:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005fee:	40 18       	lddsp	r8,sp[0x4]
80005ff0:	f0 ca ff fe 	sub	r10,r8,-2
80005ff4:	49 69       	lddpc	r9,8000604c <fat_mount+0x2d8>
80005ff6:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80005ff8:	e0 48 0f f4 	cp.w	r8,4084
80005ffc:	e0 8b 00 07 	brhi	8000600a <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80006000:	30 19       	mov	r9,1
80006002:	49 58       	lddpc	r8,80006054 <fat_mount+0x2e0>
80006004:	b0 89       	st.b	r8[0x0],r9
80006006:	30 1c       	mov	r12,1
80006008:	c1 f8       	rjmp	80006046 <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
8000600a:	e0 48 ff f4 	cp.w	r8,65524
8000600e:	e0 8b 00 07 	brhi	8000601c <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80006012:	30 29       	mov	r9,2
80006014:	49 08       	lddpc	r8,80006054 <fat_mount+0x2e0>
80006016:	b0 89       	st.b	r8[0x0],r9
80006018:	30 1c       	mov	r12,1
8000601a:	c1 68       	rjmp	80006046 <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000601c:	30 39       	mov	r9,3
8000601e:	48 e8       	lddpc	r8,80006054 <fat_mount+0x2e0>
80006020:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80006022:	48 b8       	lddpc	r8,8000604c <fat_mount+0x2d8>
80006024:	2e 88       	sub	r8,-24
80006026:	48 f9       	lddpc	r9,80006060 <fat_mount+0x2ec>
80006028:	f3 3a 00 2c 	ld.ub	r10,r9[44]
8000602c:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000602e:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80006032:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80006034:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80006038:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000603a:	f3 39 00 2f 	ld.ub	r9,r9[47]
8000603e:	b0 89       	st.b	r8[0x0],r9
80006040:	30 1c       	mov	r12,1
80006042:	c0 28       	rjmp	80006046 <fat_mount+0x2d2>
80006044:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80006046:	2f dd       	sub	sp,-12
80006048:	d8 32       	popm	r0-r7,pc
8000604a:	00 00       	add	r0,r0
8000604c:	00 00       	add	r0,r0
8000604e:	19 b0       	ld.ub	r0,r12[0x3]
80006050:	80 00       	ld.sh	r0,r0[0x0]
80006052:	43 0c       	lddsp	r12,sp[0xc0]
80006054:	00 00       	add	r0,r0
80006056:	19 fc       	ld.ub	r12,r12[0x7]
80006058:	00 00       	add	r0,r0
8000605a:	17 6c       	ld.uh	r12,--r11
8000605c:	80 00       	ld.sh	r0,r0[0x0]
8000605e:	51 a8       	stdsp	sp[0x68],r8
80006060:	00 00       	add	r0,r0
80006062:	17 b0       	ld.ub	r0,r11[0x3]
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	49 10       	lddpc	r0,800060a8 <file_close+0x10>
80006068:	00 00       	add	r0,r0
8000606a:	1a 00       	add	r0,sp
8000606c:	80 00       	ld.sh	r0,r0[0x0]
8000606e:	72 1c       	ld.w	r12,r9[0x4]

80006070 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80006070:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80006072:	f0 1f 00 08 	mcall	80006090 <file_eof+0x20>
80006076:	c0 41       	brne	8000607e <file_eof+0xe>
80006078:	e0 6c 00 ff 	mov	r12,255
8000607c:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
8000607e:	48 68       	lddpc	r8,80006094 <file_eof+0x24>
80006080:	30 1c       	mov	r12,1
80006082:	70 29       	ld.w	r9,r8[0x8]
80006084:	70 38       	ld.w	r8,r8[0xc]
80006086:	10 39       	cp.w	r9,r8
80006088:	f9 bc 0b 00 	movhi	r12,0
}
8000608c:	d8 02       	popm	pc
8000608e:	00 00       	add	r0,r0
80006090:	80 00       	ld.sh	r0,r0[0x0]
80006092:	52 ec       	stdsp	sp[0xb8],r12
80006094:	00 00       	add	r0,r0
80006096:	17 70       	ld.ub	r0,--r11

80006098 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80006098:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
8000609a:	f0 1f 00 0a 	mcall	800060c0 <file_close+0x28>
8000609e:	c1 00       	breq	800060be <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
800060a0:	48 98       	lddpc	r8,800060c4 <file_close+0x2c>
800060a2:	11 88       	ld.ub	r8,r8[0x0]
800060a4:	e2 18 00 02 	andl	r8,0x2,COH
800060a8:	c0 80       	breq	800060b8 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
800060aa:	f0 1f 00 08 	mcall	800060c8 <file_close+0x30>
800060ae:	c0 80       	breq	800060be <file_close+0x26>
            return;           // error
         fat_write_entry_file();
800060b0:	f0 1f 00 07 	mcall	800060cc <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
800060b4:	f0 1f 00 07 	mcall	800060d0 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
800060b8:	30 09       	mov	r9,0
800060ba:	48 38       	lddpc	r8,800060c4 <file_close+0x2c>
800060bc:	b0 89       	st.b	r8[0x0],r9
800060be:	d8 02       	popm	pc
800060c0:	80 00       	ld.sh	r0,r0[0x0]
800060c2:	52 ec       	stdsp	sp[0xb8],r12
800060c4:	00 00       	add	r0,r0
800060c6:	17 70       	ld.ub	r0,--r11
800060c8:	80 00       	ld.sh	r0,r0[0x0]
800060ca:	4f 40       	lddpc	r0,80006298 <file_getc+0x50>
800060cc:	80 00       	ld.sh	r0,r0[0x0]
800060ce:	46 f0       	lddsp	r0,sp[0x1bc]
800060d0:	80 00       	ld.sh	r0,r0[0x0]
800060d2:	48 a4       	lddpc	r4,800060f8 <file_write_buf+0x24>

800060d4 <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
800060d4:	d4 31       	pushm	r0-r7,lr
800060d6:	20 1d       	sub	sp,4
800060d8:	18 95       	mov	r5,r12
800060da:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
800060dc:	f0 1f 00 4f 	mcall	80006218 <file_write_buf+0x144>
800060e0:	e0 80 00 98 	breq	80006210 <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
800060e4:	4c e8       	lddpc	r8,8000621c <file_write_buf+0x148>
800060e6:	11 88       	ld.ub	r8,r8[0x0]
800060e8:	e2 18 00 02 	andl	r8,0x2,COH
800060ec:	c0 40       	breq	800060f4 <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800060ee:	58 06       	cp.w	r6,0
800060f0:	c0 71       	brne	800060fe <file_write_buf+0x2a>
800060f2:	c8 f8       	rjmp	80006210 <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
800060f4:	31 59       	mov	r9,21
800060f6:	4c b8       	lddpc	r8,80006220 <file_write_buf+0x14c>
800060f8:	b0 89       	st.b	r8[0x0],r9
800060fa:	30 00       	mov	r0,0
      return false;
800060fc:	c8 b8       	rjmp	80006212 <file_write_buf+0x13e>
800060fe:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
80006100:	4c 74       	lddpc	r4,8000621c <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
80006102:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80006106:	4c 87       	lddpc	r7,80006224 <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
80006108:	68 39       	ld.w	r9,r4[0xc]
8000610a:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
8000610e:	30 0b       	mov	r11,0
80006110:	f6 02 19 00 	cp.h	r2,r11
80006114:	5f 08       	sreq	r8
80006116:	ec 01 19 00 	cp.h	r1,r6
8000611a:	f9 ba 03 01 	movlo	r10,1
8000611e:	f9 ba 02 00 	movhs	r10,0
80006122:	f1 ea 00 0a 	and	r10,r8,r10
80006126:	f6 0a 18 00 	cp.b	r10,r11
8000612a:	c3 10       	breq	8000618c <file_write_buf+0xb8>
8000612c:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
80006130:	c2 e1       	brne	8000618c <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
80006132:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
80006136:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
8000613a:	06 9b       	mov	r11,r3
8000613c:	30 1c       	mov	r12,1
8000613e:	f0 1f 00 3b 	mcall	80006228 <file_write_buf+0x154>
80006142:	c6 70       	breq	80006210 <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
80006144:	6e 18       	ld.w	r8,r7[0x4]
80006146:	10 33       	cp.w	r3,r8
80006148:	c0 62       	brcc	80006154 <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
8000614a:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
8000614c:	6e 18       	ld.w	r8,r7[0x4]
8000614e:	58 08       	cp.w	r8,0
80006150:	c0 51       	brne	8000615a <file_write_buf+0x86>
80006152:	c1 98       	rjmp	80006184 <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
80006154:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
80006158:	cf ab       	rjmp	8000614c <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
8000615a:	0a 9a       	mov	r10,r5
8000615c:	6e 0b       	ld.w	r11,r7[0x0]
8000615e:	4b 49       	lddpc	r9,8000622c <file_write_buf+0x158>
80006160:	13 8c       	ld.ub	r12,r9[0x0]
80006162:	f0 1f 00 34 	mcall	80006230 <file_write_buf+0x15c>
80006166:	c0 50       	breq	80006170 <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
80006168:	30 19       	mov	r9,1
8000616a:	4a e8       	lddpc	r8,80006220 <file_write_buf+0x14c>
8000616c:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
8000616e:	c5 28       	rjmp	80006212 <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
80006170:	6e 18       	ld.w	r8,r7[0x4]
80006172:	20 18       	sub	r8,1
80006174:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006176:	6e 09       	ld.w	r9,r7[0x0]
80006178:	2f f9       	sub	r9,-1
8000617a:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
8000617c:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80006180:	58 08       	cp.w	r8,0
80006182:	ce c1       	brne	8000615a <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80006184:	e4 03 15 09 	lsl	r3,r2,0x9
80006188:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
8000618a:	c3 08       	rjmp	800061ea <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
8000618c:	68 2a       	ld.w	r10,r4[0x8]
8000618e:	14 39       	cp.w	r9,r10
80006190:	5f 09       	sreq	r9
80006192:	12 68       	and	r8,r9
80006194:	30 0b       	mov	r11,0
80006196:	f6 08 18 00 	cp.b	r8,r11
8000619a:	c0 e0       	breq	800061b6 <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
8000619c:	30 1b       	mov	r11,1
8000619e:	16 9c       	mov	r12,r11
800061a0:	f0 1f 00 22 	mcall	80006228 <file_write_buf+0x154>
800061a4:	c3 60       	breq	80006210 <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
800061a6:	6e 09       	ld.w	r9,r7[0x0]
800061a8:	4a 38       	lddpc	r8,80006234 <file_write_buf+0x160>
800061aa:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
800061ac:	30 0c       	mov	r12,0
800061ae:	f0 1f 00 23 	mcall	80006238 <file_write_buf+0x164>
800061b2:	c0 71       	brne	800061c0 <file_write_buf+0xec>
800061b4:	c2 e8       	rjmp	80006210 <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
800061b6:	30 1b       	mov	r11,1
800061b8:	30 2c       	mov	r12,2
800061ba:	f0 1f 00 1c 	mcall	80006228 <file_write_buf+0x154>
800061be:	c2 90       	breq	80006210 <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
800061c0:	f0 1f 00 1f 	mcall	8000623c <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
800061c4:	e0 63 02 00 	mov	r3,512
800061c8:	04 13       	sub	r3,r2
800061ca:	ec 03 19 00 	cp.h	r3,r6
800061ce:	ec 03 17 20 	movhs	r3,r6
800061d2:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
800061d4:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
800061d8:	50 09       	stdsp	sp[0x0],r9
800061da:	12 9a       	mov	r10,r9
800061dc:	0a 9b       	mov	r11,r5
800061de:	49 9c       	lddpc	r12,80006240 <file_write_buf+0x16c>
800061e0:	04 0c       	add	r12,r2
800061e2:	f0 1f 00 19 	mcall	80006244 <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
800061e6:	40 08       	lddsp	r8,sp[0x0]
800061e8:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
800061ea:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
800061ee:	68 38       	ld.w	r8,r4[0xc]
800061f0:	f2 08 00 08 	add	r8,r9,r8
800061f4:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
800061f6:	e6 00 00 00 	add	r0,r3,r0
800061fa:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
800061fc:	06 16       	sub	r6,r3
800061fe:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
80006200:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80006202:	12 38       	cp.w	r8,r9
80006204:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
80006208:	58 06       	cp.w	r6,0
8000620a:	fe 91 ff 7f 	brne	80006108 <file_write_buf+0x34>
8000620e:	c0 28       	rjmp	80006212 <file_write_buf+0x13e>
80006210:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
80006212:	00 9c       	mov	r12,r0
80006214:	2f fd       	sub	sp,-4
80006216:	d8 32       	popm	r0-r7,pc
80006218:	80 00       	ld.sh	r0,r0[0x0]
8000621a:	52 ec       	stdsp	sp[0xb8],r12
8000621c:	00 00       	add	r0,r0
8000621e:	17 70       	ld.ub	r0,--r11
80006220:	00 00       	add	r0,r0
80006222:	1a 00       	add	r0,sp
80006224:	00 00       	add	r0,r0
80006226:	1a 58       	eor	r8,sp
80006228:	80 00       	ld.sh	r0,r0[0x0]
8000622a:	50 a0       	stdsp	sp[0x28],r0
8000622c:	00 00       	add	r0,r0
8000622e:	19 b0       	ld.ub	r0,r12[0x3]
80006230:	80 00       	ld.sh	r0,r0[0x0]
80006232:	72 54       	ld.w	r4,r9[0x14]
80006234:	00 00       	add	r0,r0
80006236:	17 6c       	ld.uh	r12,--r11
80006238:	80 00       	ld.sh	r0,r0[0x0]
8000623a:	49 10       	lddpc	r0,8000627c <file_getc+0x34>
8000623c:	80 00       	ld.sh	r0,r0[0x0]
8000623e:	46 e0       	lddsp	r0,sp[0x1b8]
80006240:	00 00       	add	r0,r0
80006242:	17 b0       	ld.ub	r0,r11[0x3]
80006244:	80 00       	ld.sh	r0,r0[0x0]
80006246:	b9 a6       	sbr	r6,0x18

80006248 <file_getc>:
//!
//! @return    The byte read
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
80006248:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
8000624a:	49 78       	lddpc	r8,800062a4 <file_getc+0x5c>
8000624c:	11 88       	ld.ub	r8,r8[0x0]
8000624e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006252:	c0 51       	brne	8000625c <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80006254:	31 e9       	mov	r9,30
80006256:	49 58       	lddpc	r8,800062a8 <file_getc+0x60>
80006258:	b0 89       	st.b	r8[0x0],r9
8000625a:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
8000625c:	49 28       	lddpc	r8,800062a4 <file_getc+0x5c>
8000625e:	70 29       	ld.w	r9,r8[0x8]
80006260:	70 38       	ld.w	r8,r8[0xc]
80006262:	10 39       	cp.w	r9,r8
80006264:	e0 8b 00 06 	brhi	80006270 <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
80006268:	32 09       	mov	r9,32
8000626a:	49 08       	lddpc	r8,800062a8 <file_getc+0x60>
8000626c:	b0 89       	st.b	r8[0x0],r9
8000626e:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80006270:	30 2c       	mov	r12,2
80006272:	f0 1f 00 0f 	mcall	800062ac <file_getc+0x64>
80006276:	c0 c1       	brne	8000628e <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
80006278:	48 c8       	lddpc	r8,800062a8 <file_getc+0x60>
8000627a:	11 89       	ld.ub	r9,r8[0x0]
8000627c:	31 a8       	mov	r8,26
8000627e:	f0 09 18 00 	cp.b	r9,r8
80006282:	c0 20       	breq	80006286 <file_getc+0x3e>
80006284:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
80006286:	32 09       	mov	r9,32
80006288:	48 88       	lddpc	r8,800062a8 <file_getc+0x60>
8000628a:	b0 89       	st.b	r8[0x0],r9
8000628c:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
8000628e:	48 68       	lddpc	r8,800062a4 <file_getc+0x5c>
80006290:	70 39       	ld.w	r9,r8[0xc]
80006292:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80006296:	48 7b       	lddpc	r11,800062b0 <file_getc+0x68>
80006298:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
8000629c:	2f f9       	sub	r9,-1
8000629e:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data read
}
800062a0:	d8 02       	popm	pc
800062a2:	00 00       	add	r0,r0
800062a4:	00 00       	add	r0,r0
800062a6:	17 70       	ld.ub	r0,--r11
800062a8:	00 00       	add	r0,r0
800062aa:	1a 00       	add	r0,sp
800062ac:	80 00       	ld.sh	r0,r0[0x0]
800062ae:	4f c4       	lddpc	r4,8000649c <file_open+0x5c>
800062b0:	00 00       	add	r0,r0
800062b2:	17 b0       	ld.ub	r0,r11[0x3]

800062b4 <file_read_buf>:
//!
//! @return    number of byte read
//! @return    0, in case of error
//!
uint16_t   file_read_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
800062b4:	d4 31       	pushm	r0-r7,lr
800062b6:	18 95       	mov	r5,r12
800062b8:	16 94       	mov	r4,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_read_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_read;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;
   _MEM_TYPE_FAST_ uint32_t u32_byte_remaining;

   if( !fat_check_mount_select_open())
800062ba:	f0 1f 00 58 	mcall	80006418 <file_read_buf+0x164>
800062be:	e0 80 00 aa 	breq	80006412 <file_read_buf+0x15e>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
800062c2:	4d 78       	lddpc	r8,8000641c <file_read_buf+0x168>
800062c4:	11 88       	ld.ub	r8,r8[0x0]
800062c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800062ca:	c0 40       	breq	800062d2 <file_read_buf+0x1e>
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
800062cc:	58 04       	cp.w	r4,0
800062ce:	c0 71       	brne	800062dc <file_read_buf+0x28>
800062d0:	ca 18       	rjmp	80006412 <file_read_buf+0x15e>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
800062d2:	31 e9       	mov	r9,30
800062d4:	4d 38       	lddpc	r8,80006420 <file_read_buf+0x16c>
800062d6:	b0 89       	st.b	r8[0x0],r9
800062d8:	30 00       	mov	r0,0
      return false;
800062da:	c9 d8       	rjmp	80006414 <file_read_buf+0x160>
800062dc:	30 00       	mov	r0,0
      if ( file_eof() )
      {
         fs_g_status = FS_ERR_EOF;
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
800062de:	4d 03       	lddpc	r3,8000641c <file_read_buf+0x168>
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
800062e0:	4d 17       	lddpc	r7,80006424 <file_read_buf+0x170>

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
   {
      if ( file_eof() )
800062e2:	f0 1f 00 52 	mcall	80006428 <file_read_buf+0x174>
800062e6:	c0 50       	breq	800062f0 <file_read_buf+0x3c>
      {
         fs_g_status = FS_ERR_EOF;
800062e8:	32 09       	mov	r9,32
800062ea:	4c e8       	lddpc	r8,80006420 <file_read_buf+0x16c>
800062ec:	b0 89       	st.b	r8[0x0],r9
         return u16_nb_read;     // End of the file
800062ee:	c9 38       	rjmp	80006414 <file_read_buf+0x160>
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
800062f0:	66 31       	ld.w	r1,r3[0xc]
800062f2:	66 22       	ld.w	r2,r3[0x8]
800062f4:	02 12       	sub	r2,r1
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800062f6:	e3 d1 c0 09 	bfextu	r1,r1,0x0,0x9

      if( (0== u16_pos_in_sector)
800062fa:	30 09       	mov	r9,0
800062fc:	f2 01 19 00 	cp.h	r1,r9
80006300:	5f 09       	sreq	r9
80006302:	e0 42 01 ff 	cp.w	r2,511
80006306:	f9 b8 0b 01 	movhi	r8,1
8000630a:	f9 b8 08 00 	movls	r8,0
8000630e:	f3 e8 00 08 	and	r8,r9,r8
80006312:	30 09       	mov	r9,0
80006314:	f2 08 18 00 	cp.b	r8,r9
80006318:	c4 90       	breq	800063aa <file_read_buf+0xf6>
8000631a:	e0 68 01 ff 	mov	r8,511
8000631e:	f0 04 19 00 	cp.h	r4,r8
80006322:	e0 88 00 44 	brls	800063aa <file_read_buf+0xf6>
80006326:	f1 d5 c0 02 	bfextu	r8,r5,0x0,0x2
8000632a:	c4 01       	brne	800063aa <file_read_buf+0xf6>
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
8000632c:	08 98       	mov	r8,r4
8000632e:	5c 78       	castu.h	r8
80006330:	10 32       	cp.w	r2,r8
80006332:	c0 43       	brcs	8000633a <file_read_buf+0x86>
80006334:	08 96       	mov	r6,r4
80006336:	5c 86       	casts.h	r6
80006338:	c0 38       	rjmp	8000633e <file_read_buf+0x8a>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
8000633a:	ed d2 b0 10 	bfexts	r6,r2,0x0,0x10
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size

         // Get following sector segment of file
         if( !fat_read_file(FS_CLUST_ACT_SEG))
8000633e:	30 1c       	mov	r12,1
80006340:	f0 1f 00 3b 	mcall	8000642c <file_read_buf+0x178>
80006344:	c0 b1       	brne	8000635a <file_read_buf+0xa6>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80006346:	4b 78       	lddpc	r8,80006420 <file_read_buf+0x16c>
80006348:	11 89       	ld.ub	r9,r8[0x0]
8000634a:	31 a8       	mov	r8,26
8000634c:	f0 09 18 00 	cp.b	r9,r8
80006350:	c6 21       	brne	80006414 <file_read_buf+0x160>
               fs_g_status = FS_ERR_EOF;  // translate the error
80006352:	32 09       	mov	r9,32
80006354:	4b 38       	lddpc	r8,80006420 <file_read_buf+0x16c>
80006356:	b0 89       	st.b	r8[0x0],r9
80006358:	c5 e8       	rjmp	80006414 <file_read_buf+0x160>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size
8000635a:	ed d6 c1 27 	bfextu	r6,r6,0x9,0x7
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
8000635e:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
80006362:	6e 19       	ld.w	r9,r7[0x4]
80006364:	12 38       	cp.w	r8,r9
80006366:	e0 88 00 08 	brls	80006376 <file_read_buf+0xc2>
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
8000636a:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
8000636e:	6e 18       	ld.w	r8,r7[0x4]
80006370:	58 08       	cp.w	r8,0
80006372:	c0 41       	brne	8000637a <file_read_buf+0xc6>
80006374:	c1 88       	rjmp	800063a4 <file_read_buf+0xf0>
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
80006376:	8f 18       	st.w	r7[0x4],r8
80006378:	cf bb       	rjmp	8000636e <file_read_buf+0xba>
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
8000637a:	0a 9a       	mov	r10,r5
8000637c:	6e 0b       	ld.w	r11,r7[0x0]
8000637e:	4a d8       	lddpc	r8,80006430 <file_read_buf+0x17c>
80006380:	11 8c       	ld.ub	r12,r8[0x0]
80006382:	f0 1f 00 2d 	mcall	80006434 <file_read_buf+0x180>
80006386:	c0 50       	breq	80006390 <file_read_buf+0xdc>
            {
               fs_g_status = FS_ERR_HW;
80006388:	30 19       	mov	r9,1
8000638a:	4a 68       	lddpc	r8,80006420 <file_read_buf+0x16c>
8000638c:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_read;
8000638e:	c4 38       	rjmp	80006414 <file_read_buf+0x160>
            }
            fs_g_seg.u32_size_or_pos--;
80006390:	6e 18       	ld.w	r8,r7[0x4]
80006392:	20 18       	sub	r8,1
80006394:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006396:	6e 09       	ld.w	r9,r7[0x0]
80006398:	2f f9       	sub	r9,-1
8000639a:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
8000639c:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
800063a0:	58 08       	cp.w	r8,0
800063a2:	ce c1       	brne	8000637a <file_read_buf+0xc6>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_read_tmp *= FS_512B;
800063a4:	a9 76       	lsl	r6,0x9
800063a6:	5c 86       	casts.h	r6
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
800063a8:	c2 78       	rjmp	800063f6 <file_read_buf+0x142>
      else
      {
         // The file data can't been directly transfer from memory to buffer, the internal cache must be used

         // Transfer data from memory to internal cache
         if( !fat_read_file( FS_CLUST_ACT_ONE ))
800063aa:	30 2c       	mov	r12,2
800063ac:	f0 1f 00 20 	mcall	8000642c <file_read_buf+0x178>
800063b0:	c0 b1       	brne	800063c6 <file_read_buf+0x112>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800063b2:	49 c8       	lddpc	r8,80006420 <file_read_buf+0x16c>
800063b4:	11 89       	ld.ub	r9,r8[0x0]
800063b6:	31 a8       	mov	r8,26
800063b8:	f0 09 18 00 	cp.b	r9,r8
800063bc:	c2 c1       	brne	80006414 <file_read_buf+0x160>
            {  // Translate the error
               fs_g_status = FS_ERR_EOF;   // End of file
800063be:	32 09       	mov	r9,32
800063c0:	49 88       	lddpc	r8,80006420 <file_read_buf+0x16c>
800063c2:	b0 89       	st.b	r8[0x0],r9
800063c4:	c2 88       	rjmp	80006414 <file_read_buf+0x160>
            }
            return u16_nb_read;
         }

         // Compute the number of data to transfer
         u16_nb_read_tmp = FS_512B - u16_pos_in_sector;  // The number is limited at sector size
800063c6:	e0 66 02 00 	mov	r6,512
800063ca:	02 16       	sub	r6,r1
800063cc:	5c 86       	casts.h	r6
         if( u16_nb_read_tmp > u32_byte_remaining )
800063ce:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
800063d2:	10 32       	cp.w	r2,r8
800063d4:	c0 32       	brcc	800063da <file_read_buf+0x126>
            u16_nb_read_tmp = u32_byte_remaining;
800063d6:	ed d2 b0 10 	bfexts	r6,r2,0x0,0x10
800063da:	ec 04 19 00 	cp.h	r4,r6
800063de:	e8 06 17 30 	movlo	r6,r4
800063e2:	5c 86       	casts.h	r6
         if( u16_nb_read_tmp > u16_buf_size )
            u16_nb_read_tmp = u16_buf_size;

         // Transfer data from internal cache to buffer
         memcpy_ram2ram( buffer , &fs_g_sector[ u16_pos_in_sector ], u16_nb_read_tmp );
800063e4:	e5 d6 c0 10 	bfextu	r2,r6,0x0,0x10
800063e8:	04 9a       	mov	r10,r2
800063ea:	49 4b       	lddpc	r11,80006438 <file_read_buf+0x184>
800063ec:	02 0b       	add	r11,r1
800063ee:	0a 9c       	mov	r12,r5
800063f0:	f0 1f 00 13 	mcall	8000643c <file_read_buf+0x188>
         buffer += u16_nb_read_tmp;
800063f4:	04 05       	add	r5,r2
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
800063f6:	f3 d6 c0 10 	bfextu	r9,r6,0x0,0x10
800063fa:	66 38       	ld.w	r8,r3[0xc]
800063fc:	f2 08 00 08 	add	r8,r9,r8
80006400:	87 38       	st.w	r3[0xc],r8
      u16_nb_read                      += u16_nb_read_tmp;
80006402:	ec 00 00 00 	add	r0,r6,r0
80006406:	5c 80       	casts.h	r0
      u16_buf_size                     -= u16_nb_read_tmp;
80006408:	0c 14       	sub	r4,r6
8000640a:	5c 84       	casts.h	r4
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
8000640c:	fe 91 ff 6b 	brne	800062e2 <file_read_buf+0x2e>
80006410:	c0 28       	rjmp	80006414 <file_read_buf+0x160>
80006412:	30 00       	mov	r0,0
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
      u16_nb_read                      += u16_nb_read_tmp;
      u16_buf_size                     -= u16_nb_read_tmp;
   }
   return u16_nb_read;  // Buffer is full
}
80006414:	00 9c       	mov	r12,r0
80006416:	d8 32       	popm	r0-r7,pc
80006418:	80 00       	ld.sh	r0,r0[0x0]
8000641a:	52 ec       	stdsp	sp[0xb8],r12
8000641c:	00 00       	add	r0,r0
8000641e:	17 70       	ld.ub	r0,--r11
80006420:	00 00       	add	r0,r0
80006422:	1a 00       	add	r0,sp
80006424:	00 00       	add	r0,r0
80006426:	1a 58       	eor	r8,sp
80006428:	80 00       	ld.sh	r0,r0[0x0]
8000642a:	60 70       	ld.w	r0,r0[0x1c]
8000642c:	80 00       	ld.sh	r0,r0[0x0]
8000642e:	4f c4       	lddpc	r4,8000661c <nav_filelist_set+0x2c>
80006430:	00 00       	add	r0,r0
80006432:	19 b0       	ld.ub	r0,r12[0x3]
80006434:	80 00       	ld.sh	r0,r0[0x0]
80006436:	72 38       	ld.w	r8,r9[0xc]
80006438:	00 00       	add	r0,r0
8000643a:	17 b0       	ld.ub	r0,r11[0x3]
8000643c:	80 00       	ld.sh	r0,r0[0x0]
8000643e:	b9 a6       	sbr	r6,0x18

80006440 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
80006440:	eb cd 40 c0 	pushm	r6-r7,lr
80006444:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
80006446:	f0 1f 00 20 	mcall	800064c4 <file_open+0x84>
8000644a:	c3 a0       	breq	800064be <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
8000644c:	f0 1f 00 1f 	mcall	800064c8 <file_open+0x88>
80006450:	c3 70       	breq	800064be <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
80006452:	0e 96       	mov	r6,r7
80006454:	0e 98       	mov	r8,r7
80006456:	e2 18 00 02 	andl	r8,0x2,COH
8000645a:	c1 90       	breq	8000648c <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
8000645c:	30 1c       	mov	r12,1
8000645e:	f0 1f 00 1c 	mcall	800064cc <file_open+0x8c>
80006462:	c2 e0       	breq	800064be <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80006464:	49 b8       	lddpc	r8,800064d0 <file_open+0x90>
80006466:	11 a8       	ld.ub	r8,r8[0x2]
80006468:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000646c:	c0 60       	breq	80006478 <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
8000646e:	31 59       	mov	r9,21
80006470:	49 98       	lddpc	r8,800064d4 <file_open+0x94>
80006472:	b0 89       	st.b	r8[0x0],r9
80006474:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
80006478:	49 88       	lddpc	r8,800064d8 <file_open+0x98>
8000647a:	11 8c       	ld.ub	r12,r8[0x0]
8000647c:	f0 1f 00 18 	mcall	800064dc <file_open+0x9c>
80006480:	c0 a0       	breq	80006494 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006482:	31 49       	mov	r9,20
80006484:	49 48       	lddpc	r8,800064d4 <file_open+0x94>
80006486:	b0 89       	st.b	r8[0x0],r9
80006488:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
8000648c:	30 0c       	mov	r12,0
8000648e:	f0 1f 00 10 	mcall	800064cc <file_open+0x8c>
80006492:	c1 60       	breq	800064be <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006494:	0c 98       	mov	r8,r6
80006496:	e2 18 00 04 	andl	r8,0x4,COH
8000649a:	c0 40       	breq	800064a2 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
8000649c:	30 09       	mov	r9,0
8000649e:	48 d8       	lddpc	r8,800064d0 <file_open+0x90>
800064a0:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
800064a2:	e2 16 00 08 	andl	r6,0x8,COH
800064a6:	c0 50       	breq	800064b0 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
800064a8:	30 09       	mov	r9,0
800064aa:	48 a8       	lddpc	r8,800064d0 <file_open+0x90>
800064ac:	91 39       	st.w	r8[0xc],r9
800064ae:	c0 48       	rjmp	800064b6 <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
800064b0:	48 88       	lddpc	r8,800064d0 <file_open+0x90>
800064b2:	70 29       	ld.w	r9,r8[0x8]
800064b4:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
800064b6:	48 78       	lddpc	r8,800064d0 <file_open+0x90>
800064b8:	b0 87       	st.b	r8[0x0],r7
800064ba:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
800064be:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800064c2:	00 00       	add	r0,r0
800064c4:	80 00       	ld.sh	r0,r0[0x0]
800064c6:	53 10       	stdsp	sp[0xc4],r0
800064c8:	80 00       	ld.sh	r0,r0[0x0]
800064ca:	40 2c       	lddsp	r12,sp[0x8]
800064cc:	80 00       	ld.sh	r0,r0[0x0]
800064ce:	47 40       	lddsp	r0,sp[0x1d0]
800064d0:	00 00       	add	r0,r0
800064d2:	17 70       	ld.ub	r0,--r11
800064d4:	00 00       	add	r0,r0
800064d6:	1a 00       	add	r0,sp
800064d8:	00 00       	add	r0,r0
800064da:	19 b0       	ld.ub	r0,r12[0x3]
800064dc:	80 00       	ld.sh	r0,r0[0x0]
800064de:	72 24       	ld.w	r4,r9[0x8]

800064e0 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
800064e0:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
800064e2:	48 69       	lddpc	r9,800064f8 <nav_getindex+0x18>
800064e4:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
800064e6:	48 6a       	lddpc	r10,800064fc <nav_getindex+0x1c>
800064e8:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
800064ea:	13 89       	ld.ub	r9,r9[0x0]
800064ec:	b8 89       	st.b	r12[0x0],r9
800064ee:	99 1b       	st.w	r12[0x4],r11
800064f0:	b8 4a       	st.h	r12[0x8],r10
}
800064f2:	2f dd       	sub	sp,-12
800064f4:	5e fc       	retal	r12
800064f6:	00 00       	add	r0,r0
800064f8:	00 00       	add	r0,r0
800064fa:	19 b0       	ld.ub	r0,r12[0x3]
800064fc:	00 00       	add	r0,r0
800064fe:	19 fc       	ld.ub	r12,r12[0x7]

80006500 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
80006500:	d4 01       	pushm	lr
   return fat_entry_is_dir();
80006502:	f0 1f 00 02 	mcall	80006508 <nav_file_isdir+0x8>
}
80006506:	d8 02       	popm	pc
80006508:	80 00       	ld.sh	r0,r0[0x0]
8000650a:	42 f4       	lddsp	r4,sp[0xbc]

8000650c <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
8000650c:	d4 31       	pushm	r0-r7,lr
8000650e:	20 1d       	sub	sp,4
80006510:	18 95       	mov	r5,r12
80006512:	16 96       	mov	r6,r11
80006514:	14 97       	mov	r7,r10
80006516:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80006518:	f0 1f 00 2f 	mcall	800065d4 <nav_file_name+0xc8>
8000651c:	c5 80       	breq	800065cc <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000651e:	58 07       	cp.w	r7,0
80006520:	c0 50       	breq	8000652a <nav_file_name+0x1e>
80006522:	58 06       	cp.w	r6,0
80006524:	c0 31       	brne	8000652a <nav_file_name+0x1e>
80006526:	30 1c       	mov	r12,1
80006528:	c5 38       	rjmp	800065ce <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000652a:	4a c8       	lddpc	r8,800065d8 <nav_file_name+0xcc>
8000652c:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000652e:	58 04       	cp.w	r4,0
80006530:	c0 31       	brne	80006536 <nav_file_name+0x2a>
80006532:	30 10       	mov	r0,1
80006534:	c0 68       	rjmp	80006540 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80006536:	08 99       	mov	r9,r4
80006538:	20 19       	sub	r9,1
8000653a:	4a 88       	lddpc	r8,800065d8 <nav_file_name+0xcc>
8000653c:	b0 19       	st.h	r8[0x2],r9
8000653e:	30 00       	mov	r0,0
80006540:	30 09       	mov	r9,0
80006542:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006544:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006546:	4a 52       	lddpc	r2,800065d8 <nav_file_name+0xcc>
80006548:	c0 28       	rjmp	8000654c <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000654a:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
8000654c:	f0 1f 00 24 	mcall	800065dc <nav_file_name+0xd0>
80006550:	c3 e0       	breq	800065cc <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
80006552:	58 00       	cp.w	r0,0
80006554:	c0 70       	breq	80006562 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80006556:	0e 9a       	mov	r10,r7
80006558:	0c 9b       	mov	r11,r6
8000655a:	0a 9c       	mov	r12,r5
8000655c:	f0 1f 00 21 	mcall	800065e0 <nav_file_name+0xd4>
80006560:	c3 78       	rjmp	800065ce <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80006562:	06 99       	mov	r9,r3
80006564:	0e 9a       	mov	r10,r7
80006566:	0c 9b       	mov	r11,r6
80006568:	0a 9c       	mov	r12,r5
8000656a:	f0 1f 00 1f 	mcall	800065e4 <nav_file_name+0xd8>
8000656e:	c1 20       	breq	80006592 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80006570:	49 e8       	lddpc	r8,800065e8 <nav_file_name+0xdc>
80006572:	11 89       	ld.ub	r9,r8[0x0]
80006574:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80006576:	f0 09 18 00 	cp.b	r9,r8
8000657a:	eb f8 12 00 	ld.shne	r8,r5[0x0]
8000657e:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80006582:	f1 d9 e1 08 	addne	r8,r8,r9
80006586:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000658a:	49 48       	lddpc	r8,800065d8 <nav_file_name+0xcc>
8000658c:	b0 14       	st.h	r8[0x2],r4
8000658e:	30 1c       	mov	r12,1
         return true;
80006590:	c1 f8       	rjmp	800065ce <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006592:	49 79       	lddpc	r9,800065ec <nav_file_name+0xe0>
80006594:	13 88       	ld.ub	r8,r9[0x0]
80006596:	e2 08 18 00 	cp.b	r8,r1
8000659a:	c0 70       	breq	800065a8 <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000659c:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000659e:	30 b9       	mov	r9,11
800065a0:	f2 08 18 00 	cp.b	r8,r9
800065a4:	c1 41       	brne	800065cc <nav_file_name+0xc0>
800065a6:	cd 2b       	rjmp	8000654a <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800065a8:	49 09       	lddpc	r9,800065e8 <nav_file_name+0xdc>
800065aa:	13 88       	ld.ub	r8,r9[0x0]
800065ac:	30 09       	mov	r9,0
800065ae:	f2 08 18 00 	cp.b	r8,r9
800065b2:	c0 60       	breq	800065be <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800065b4:	40 08       	lddsp	r8,sp[0x0]
800065b6:	2f 38       	sub	r8,-13
800065b8:	5c 88       	casts.h	r8
800065ba:	50 08       	stdsp	sp[0x0],r8
800065bc:	c0 48       	rjmp	800065c4 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
800065be:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800065c0:	20 d6       	sub	r6,13
800065c2:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800065c4:	84 18       	ld.sh	r8,r2[0x2]
800065c6:	20 18       	sub	r8,1
800065c8:	a4 18       	st.h	r2[0x2],r8
800065ca:	cc 1b       	rjmp	8000654c <nav_file_name+0x40>
800065cc:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
800065ce:	2f fd       	sub	sp,-4
800065d0:	d8 32       	popm	r0-r7,pc
800065d2:	00 00       	add	r0,r0
800065d4:	80 00       	ld.sh	r0,r0[0x0]
800065d6:	52 d4       	stdsp	sp[0xb4],r4
800065d8:	00 00       	add	r0,r0
800065da:	19 fc       	ld.ub	r12,r12[0x7]
800065dc:	80 00       	ld.sh	r0,r0[0x0]
800065de:	4f 40       	lddpc	r0,800067ac <nav_file_create+0xc>
800065e0:	80 00       	ld.sh	r0,r0[0x0]
800065e2:	45 1c       	lddsp	r12,sp[0x144]
800065e4:	80 00       	ld.sh	r0,r0[0x0]
800065e6:	43 88       	lddsp	r8,sp[0xe0]
800065e8:	00 00       	add	r0,r0
800065ea:	1a 01       	add	r1,sp
800065ec:	00 00       	add	r0,r0
800065ee:	1a 00       	add	r0,sp

800065f0 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
800065f0:	d4 31       	pushm	r0-r7,lr
800065f2:	20 4d       	sub	sp,16
800065f4:	50 0c       	stdsp	sp[0x0],r12
800065f6:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
800065f8:	f0 1f 00 51 	mcall	8000673c <nav_filelist_set+0x14c>
800065fc:	e0 80 00 9e 	breq	80006738 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80006600:	4d 08       	lddpc	r8,80006740 <nav_filelist_set+0x150>
80006602:	90 18       	ld.sh	r8,r8[0x2]
80006604:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80006606:	4d 08       	lddpc	r8,80006744 <nav_filelist_set+0x154>
80006608:	f1 0a 00 24 	ld.sh	r10,r8[36]
8000660c:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000660e:	f1 38 00 2c 	ld.ub	r8,r8[44]
80006612:	50 38       	stdsp	sp[0xc],r8
80006614:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80006616:	4c b7       	lddpc	r7,80006740 <nav_filelist_set+0x150>
80006618:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000661a:	4c b6       	lddpc	r6,80006744 <nav_filelist_set+0x154>
8000661c:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000661e:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80006620:	4c a5       	lddpc	r5,80006748 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80006622:	58 02       	cp.w	r2,0
80006624:	c0 31       	brne	8000662a <nav_filelist_set+0x3a>
80006626:	58 03       	cp.w	r3,0
80006628:	c0 c0       	breq	80006640 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000662a:	8e 18       	ld.sh	r8,r7[0x2]
8000662c:	e2 08 19 00 	cp.h	r8,r1
80006630:	c0 51       	brne	8000663a <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80006632:	30 89       	mov	r9,8
80006634:	4c 58       	lddpc	r8,80006748 <nav_filelist_set+0x158>
80006636:	b0 89       	st.b	r8[0x0],r9
            break;
80006638:	c7 38       	rjmp	8000671e <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000663a:	2f f8       	sub	r8,-1
8000663c:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000663e:	c1 d8       	rjmp	80006678 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80006640:	8e 18       	ld.sh	r8,r7[0x2]
80006642:	e0 08 19 00 	cp.h	r8,r0
80006646:	c0 51       	brne	80006650 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80006648:	30 99       	mov	r9,9
8000664a:	4c 08       	lddpc	r8,80006748 <nav_filelist_set+0x158>
8000664c:	b0 89       	st.b	r8[0x0],r9
            break;
8000664e:	c6 88       	rjmp	8000671e <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80006650:	58 08       	cp.w	r8,0
80006652:	c1 11       	brne	80006674 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80006654:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006658:	e8 08 18 00 	cp.b	r8,r4
8000665c:	c0 80       	breq	8000666c <nav_filelist_set+0x7c>
8000665e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006662:	e8 08 18 00 	cp.b	r8,r4
80006666:	c0 31       	brne	8000666c <nav_filelist_set+0x7c>
80006668:	30 13       	mov	r3,1
8000666a:	c0 78       	rjmp	80006678 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000666c:	30 99       	mov	r9,9
8000666e:	4b 78       	lddpc	r8,80006748 <nav_filelist_set+0x158>
80006670:	b0 89       	st.b	r8[0x0],r9
               break;
80006672:	c5 68       	rjmp	8000671e <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006674:	20 18       	sub	r8,1
80006676:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
80006678:	f0 1f 00 35 	mcall	8000674c <nav_filelist_set+0x15c>
8000667c:	c0 71       	brne	8000668a <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000667e:	0b 89       	ld.ub	r9,r5[0x0]
80006680:	31 a8       	mov	r8,26
80006682:	f0 09 18 00 	cp.b	r9,r8
80006686:	c3 20       	breq	800066ea <nav_filelist_set+0xfa>
80006688:	c4 b8       	rjmp	8000671e <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000668a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000668e:	e8 08 18 00 	cp.b	r8,r4
80006692:	5f 1c       	srne	r12
80006694:	f0 1f 00 2f 	mcall	80006750 <nav_filelist_set+0x160>
80006698:	c1 c0       	breq	800066d0 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000669a:	58 03       	cp.w	r3,0
8000669c:	cc 31       	brne	80006622 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
8000669e:	58 02       	cp.w	r2,0
800066a0:	ed f8 12 12 	ld.shne	r8,r6[0x24]
800066a4:	f7 b8 01 ff 	subne	r8,-1
800066a8:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
800066ac:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
800066b0:	f7 b8 00 01 	subeq	r8,1
800066b4:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
800066b8:	40 09       	lddsp	r9,sp[0x0]
800066ba:	58 09       	cp.w	r9,0
800066bc:	c0 51       	brne	800066c6 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
800066be:	f0 1f 00 26 	mcall	80006754 <nav_filelist_set+0x164>
800066c2:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
800066c4:	c3 a8       	rjmp	80006738 <nav_filelist_set+0x148>
           }
           u16_nb--;
800066c6:	40 08       	lddsp	r8,sp[0x0]
800066c8:	20 18       	sub	r8,1
800066ca:	5c 88       	casts.h	r8
800066cc:	50 08       	stdsp	sp[0x0],r8
           continue;
800066ce:	ca ab       	rjmp	80006622 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800066d0:	0b 88       	ld.ub	r8,r5[0x0]
800066d2:	30 a9       	mov	r9,10
800066d4:	f2 08 18 00 	cp.b	r8,r9
800066d8:	5f 09       	sreq	r9
800066da:	31 aa       	mov	r10,26
800066dc:	f4 08 18 00 	cp.b	r8,r10
800066e0:	5f 08       	sreq	r8
800066e2:	10 49       	or	r9,r8
800066e4:	e8 09 18 00 	cp.b	r9,r4
800066e8:	c9 d0       	breq	80006622 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
800066ea:	58 03       	cp.w	r3,0
800066ec:	c0 50       	breq	800066f6 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
800066ee:	ed 64 00 2c 	st.b	r6[44],r4
800066f2:	30 03       	mov	r3,0
            continue;
800066f4:	c9 7b       	rjmp	80006622 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
800066f6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800066fa:	30 1a       	mov	r10,1
800066fc:	f4 08 18 00 	cp.b	r8,r10
80006700:	c0 60       	breq	8000670c <nav_filelist_set+0x11c>
80006702:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006706:	e8 08 18 00 	cp.b	r8,r4
8000670a:	c0 50       	breq	80006714 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
8000670c:	30 99       	mov	r9,9
8000670e:	48 f8       	lddpc	r8,80006748 <nav_filelist_set+0x158>
80006710:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
80006712:	c0 68       	rjmp	8000671e <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80006714:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80006716:	30 19       	mov	r9,1
80006718:	ed 69 00 2c 	st.b	r6[44],r9
8000671c:	c8 3b       	rjmp	80006622 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000671e:	48 a8       	lddpc	r8,80006744 <nav_filelist_set+0x154>
80006720:	40 3a       	lddsp	r10,sp[0xc]
80006722:	58 0a       	cp.w	r10,0
80006724:	5f 19       	srne	r9
80006726:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000672a:	48 69       	lddpc	r9,80006740 <nav_filelist_set+0x150>
8000672c:	40 2a       	lddsp	r10,sp[0x8]
8000672e:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80006730:	40 19       	lddsp	r9,sp[0x4]
80006732:	f1 59 00 24 	st.h	r8[36],r9
80006736:	30 0c       	mov	r12,0
   return false;
}
80006738:	2f cd       	sub	sp,-16
8000673a:	d8 32       	popm	r0-r7,pc
8000673c:	80 00       	ld.sh	r0,r0[0x0]
8000673e:	53 34       	stdsp	sp[0xcc],r4
80006740:	00 00       	add	r0,r0
80006742:	19 fc       	ld.ub	r12,r12[0x7]
80006744:	00 00       	add	r0,r0
80006746:	19 b0       	ld.ub	r0,r12[0x3]
80006748:	00 00       	add	r0,r0
8000674a:	1a 00       	add	r0,sp
8000674c:	80 00       	ld.sh	r0,r0[0x0]
8000674e:	4f 40       	lddpc	r0,8000691c <nav_file_del+0x30>
80006750:	80 00       	ld.sh	r0,r0[0x0]
80006752:	46 6c       	lddsp	r12,sp[0x198]
80006754:	80 00       	ld.sh	r0,r0[0x0]
80006756:	46 24       	lddsp	r4,sp[0x188]

80006758 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80006758:	d4 21       	pushm	r4-r7,lr
8000675a:	18 95       	mov	r5,r12
8000675c:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000675e:	30 16       	mov	r6,1
80006760:	30 07       	mov	r7,0
80006762:	0c 9b       	mov	r11,r6
80006764:	0e 9c       	mov	r12,r7
80006766:	f0 1f 00 07 	mcall	80006780 <nav_filelist_findname+0x28>
8000676a:	c0 90       	breq	8000677c <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
8000676c:	08 99       	mov	r9,r4
8000676e:	0e 9a       	mov	r10,r7
80006770:	0e 9b       	mov	r11,r7
80006772:	0a 9c       	mov	r12,r5
80006774:	f0 1f 00 04 	mcall	80006784 <nav_filelist_findname+0x2c>
80006778:	cf 50       	breq	80006762 <nav_filelist_findname+0xa>
8000677a:	30 1c       	mov	r12,1
         return true;
   }
}
8000677c:	d8 22       	popm	r4-r7,pc
8000677e:	00 00       	add	r0,r0
80006780:	80 00       	ld.sh	r0,r0[0x0]
80006782:	65 f0       	ld.w	r0,r2[0x7c]
80006784:	80 00       	ld.sh	r0,r0[0x0]
80006786:	65 0c       	ld.w	r12,r2[0x40]

80006788 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
80006788:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
8000678a:	f0 1f 00 04 	mcall	80006798 <nav_filelist_reset+0x10>
8000678e:	c0 40       	breq	80006796 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80006790:	f0 1f 00 03 	mcall	8000679c <nav_filelist_reset+0x14>
80006794:	30 1c       	mov	r12,1
   return true;
}
80006796:	d8 02       	popm	pc
80006798:	80 00       	ld.sh	r0,r0[0x0]
8000679a:	53 34       	stdsp	sp[0xcc],r4
8000679c:	80 00       	ld.sh	r0,r0[0x0]
8000679e:	43 0c       	lddsp	r12,sp[0xc0]

800067a0 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
800067a0:	eb cd 40 80 	pushm	r7,lr
800067a4:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
800067a6:	f0 1f 00 13 	mcall	800067f0 <nav_file_create+0x50>
800067aa:	c2 10       	breq	800067ec <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
800067ac:	30 0b       	mov	r11,0
800067ae:	0e 9c       	mov	r12,r7
800067b0:	f0 1f 00 11 	mcall	800067f4 <nav_file_create+0x54>
800067b4:	c0 60       	breq	800067c0 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800067b6:	32 a9       	mov	r9,42
800067b8:	49 08       	lddpc	r8,800067f8 <nav_file_create+0x58>
800067ba:	b0 89       	st.b	r8[0x0],r9
800067bc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
800067c0:	0e 9c       	mov	r12,r7
800067c2:	f0 1f 00 0f 	mcall	800067fc <nav_file_create+0x5c>
800067c6:	c1 30       	breq	800067ec <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
800067c8:	48 e8       	lddpc	r8,80006800 <nav_file_create+0x60>
800067ca:	30 09       	mov	r9,0
800067cc:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
800067ce:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
800067d0:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
800067d2:	48 d8       	lddpc	r8,80006804 <nav_file_create+0x64>
800067d4:	f1 09 00 24 	ld.sh	r9,r8[36]
800067d8:	2f f9       	sub	r9,-1
800067da:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
800067de:	30 19       	mov	r9,1
800067e0:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
800067e4:	f0 1f 00 09 	mcall	80006808 <nav_file_create+0x68>
800067e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800067ec:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800067f0:	80 00       	ld.sh	r0,r0[0x0]
800067f2:	67 88       	ld.w	r8,r3[0x60]
800067f4:	80 00       	ld.sh	r0,r0[0x0]
800067f6:	67 58       	ld.w	r8,r3[0x54]
800067f8:	00 00       	add	r0,r0
800067fa:	1a 00       	add	r0,sp
800067fc:	80 00       	ld.sh	r0,r0[0x0]
800067fe:	5c cc       	swap.bh	r12
80006800:	00 00       	add	r0,r0
80006802:	17 70       	ld.ub	r0,--r11
80006804:	00 00       	add	r0,r0
80006806:	19 b0       	ld.ub	r0,r12[0x3]
80006808:	80 00       	ld.sh	r0,r0[0x0]
8000680a:	48 a4       	lddpc	r4,80006830 <nav_dir_gotoparent+0x24>

8000680c <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
8000680c:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000680e:	f0 1f 00 1f 	mcall	80006888 <nav_dir_gotoparent+0x7c>
80006812:	c3 80       	breq	80006882 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
80006814:	49 e8       	lddpc	r8,8000688c <nav_dir_gotoparent+0x80>
80006816:	70 88       	ld.w	r8,r8[0x20]
80006818:	58 08       	cp.w	r8,0
8000681a:	c0 51       	brne	80006824 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000681c:	31 99       	mov	r9,25
8000681e:	49 d8       	lddpc	r8,80006890 <nav_dir_gotoparent+0x84>
80006820:	b0 89       	st.b	r8[0x0],r9
80006822:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
80006824:	30 19       	mov	r9,1
80006826:	49 c8       	lddpc	r8,80006894 <nav_dir_gotoparent+0x88>
80006828:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
8000682a:	f0 1f 00 1c 	mcall	80006898 <nav_dir_gotoparent+0x8c>
8000682e:	c2 a0       	breq	80006882 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
80006830:	f0 1f 00 1b 	mcall	8000689c <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
80006834:	49 68       	lddpc	r8,8000688c <nav_dir_gotoparent+0x80>
80006836:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006838:	49 a9       	lddpc	r9,800068a0 <nav_dir_gotoparent+0x94>
8000683a:	72 19       	ld.w	r9,r9[0x4]
8000683c:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000683e:	f0 1f 00 1a 	mcall	800068a4 <nav_dir_gotoparent+0x98>
80006842:	c2 00       	breq	80006882 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80006844:	49 28       	lddpc	r8,8000688c <nav_dir_gotoparent+0x80>
80006846:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000684a:	30 08       	mov	r8,0
8000684c:	f0 09 18 00 	cp.b	r9,r8
80006850:	c0 d0       	breq	8000686a <nav_dir_gotoparent+0x5e>
80006852:	48 f8       	lddpc	r8,8000688c <nav_dir_gotoparent+0x80>
80006854:	f1 39 00 2c 	ld.ub	r9,r8[44]
80006858:	30 08       	mov	r8,0
8000685a:	f0 09 18 00 	cp.b	r9,r8
8000685e:	c0 60       	breq	8000686a <nav_dir_gotoparent+0x5e>
80006860:	c1 28       	rjmp	80006884 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006862:	6c 18       	ld.w	r8,r6[0x4]
80006864:	0e 38       	cp.w	r8,r7
80006866:	c0 51       	brne	80006870 <nav_dir_gotoparent+0x64>
80006868:	c0 e8       	rjmp	80006884 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000686a:	30 15       	mov	r5,1
8000686c:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000686e:	48 d6       	lddpc	r6,800068a0 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006870:	0a 9b       	mov	r11,r5
80006872:	08 9c       	mov	r12,r4
80006874:	f0 1f 00 0d 	mcall	800068a8 <nav_dir_gotoparent+0x9c>
80006878:	cf 51       	brne	80006862 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000687a:	30 89       	mov	r9,8
8000687c:	48 58       	lddpc	r8,80006890 <nav_dir_gotoparent+0x84>
8000687e:	b0 89       	st.b	r8[0x0],r9
   return false;
80006880:	d8 22       	popm	r4-r7,pc
80006882:	d8 2a       	popm	r4-r7,pc,r12=0
80006884:	da 2a       	popm	r4-r7,pc,r12=1
80006886:	00 00       	add	r0,r0
80006888:	80 00       	ld.sh	r0,r0[0x0]
8000688a:	53 34       	stdsp	sp[0xcc],r4
8000688c:	00 00       	add	r0,r0
8000688e:	19 b0       	ld.ub	r0,r12[0x3]
80006890:	00 00       	add	r0,r0
80006892:	1a 00       	add	r0,sp
80006894:	00 00       	add	r0,r0
80006896:	19 fc       	ld.ub	r12,r12[0x7]
80006898:	80 00       	ld.sh	r0,r0[0x0]
8000689a:	4f 40       	lddpc	r0,80006a68 <nav_filelist_last+0x20>
8000689c:	80 00       	ld.sh	r0,r0[0x0]
8000689e:	46 24       	lddsp	r4,sp[0x188]
800068a0:	00 00       	add	r0,r0
800068a2:	17 70       	ld.ub	r0,--r11
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	67 88       	ld.w	r8,r3[0x60]
800068a8:	80 00       	ld.sh	r0,r0[0x0]
800068aa:	65 f0       	ld.w	r0,r2[0x7c]

800068ac <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
800068ac:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
800068ae:	f0 1f 00 0a 	mcall	800068d4 <nav_dir_cd+0x28>
800068b2:	c0 f0       	breq	800068d0 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
800068b4:	f0 1f 00 09 	mcall	800068d8 <nav_dir_cd+0x2c>
800068b8:	c0 c0       	breq	800068d0 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
800068ba:	48 98       	lddpc	r8,800068dc <nav_dir_cd+0x30>
800068bc:	48 99       	lddpc	r9,800068e0 <nav_dir_cd+0x34>
800068be:	92 19       	ld.sh	r9,r9[0x2]
800068c0:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800068c4:	48 89       	lddpc	r9,800068e4 <nav_dir_cd+0x38>
800068c6:	72 19       	ld.w	r9,r9[0x4]
800068c8:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
800068ca:	f0 1f 00 08 	mcall	800068e8 <nav_dir_cd+0x3c>
800068ce:	d8 02       	popm	pc
800068d0:	d8 0a       	popm	pc,r12=0
800068d2:	00 00       	add	r0,r0
800068d4:	80 00       	ld.sh	r0,r0[0x0]
800068d6:	53 10       	stdsp	sp[0xc4],r0
800068d8:	80 00       	ld.sh	r0,r0[0x0]
800068da:	42 f4       	lddsp	r4,sp[0xbc]
800068dc:	00 00       	add	r0,r0
800068de:	19 b0       	ld.ub	r0,r12[0x3]
800068e0:	00 00       	add	r0,r0
800068e2:	19 fc       	ld.ub	r12,r12[0x7]
800068e4:	00 00       	add	r0,r0
800068e6:	17 70       	ld.ub	r0,--r11
800068e8:	80 00       	ld.sh	r0,r0[0x0]
800068ea:	67 88       	ld.w	r8,r3[0x60]

800068ec <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
800068ec:	eb cd 40 f8 	pushm	r3-r7,lr
800068f0:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
800068f2:	f0 1f 00 20 	mcall	80006970 <nav_file_del+0x84>
800068f6:	c1 c1       	brne	8000692e <nav_file_del+0x42>
800068f8:	c3 a8       	rjmp	8000696c <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800068fa:	0c 9b       	mov	r11,r6
800068fc:	0a 9c       	mov	r12,r5
800068fe:	f0 1f 00 1e 	mcall	80006974 <nav_file_del+0x88>
80006902:	c0 80       	breq	80006912 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
80006904:	58 04       	cp.w	r4,0
80006906:	c1 90       	breq	80006938 <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
80006908:	31 d9       	mov	r9,29
8000690a:	49 c8       	lddpc	r8,80006978 <nav_file_del+0x8c>
8000690c:	b0 89       	st.b	r8[0x0],r9
8000690e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
80006912:	f0 1f 00 1b 	mcall	8000697c <nav_file_del+0x90>
80006916:	c2 b0       	breq	8000696c <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
80006918:	0c 9c       	mov	r12,r6
8000691a:	f0 1f 00 1a 	mcall	80006980 <nav_file_del+0x94>
8000691e:	c2 70       	breq	8000696c <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
80006920:	58 07       	cp.w	r7,0
80006922:	c0 31       	brne	80006928 <nav_file_del+0x3c>
80006924:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
80006928:	20 17       	sub	r7,1
8000692a:	5c 57       	castu.b	r7

      } // end of second while (1)
8000692c:	ce 7b       	rjmp	800068fa <nav_file_del+0xe>
8000692e:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
80006932:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
80006934:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006936:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
80006938:	f0 1f 00 13 	mcall	80006984 <nav_file_del+0x98>
8000693c:	c0 70       	breq	8000694a <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
8000693e:	f0 1f 00 13 	mcall	80006988 <nav_file_del+0x9c>
80006942:	c1 50       	breq	8000696c <nav_file_del+0x80>
            return false;
         u8_folder_level++;
80006944:	2f f7       	sub	r7,-1
80006946:	5c 57       	castu.b	r7
80006948:	cd 9b       	rjmp	800068fa <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
8000694a:	0c 9c       	mov	r12,r6
8000694c:	f0 1f 00 10 	mcall	8000698c <nav_file_del+0xa0>
80006950:	c0 e0       	breq	8000696c <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
80006952:	0c 9c       	mov	r12,r6
80006954:	f0 1f 00 0b 	mcall	80006980 <nav_file_del+0x94>
80006958:	c0 a0       	breq	8000696c <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
8000695a:	e6 07 18 00 	cp.b	r7,r3
8000695e:	cc e1       	brne	800068fa <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006960:	f0 1f 00 0c 	mcall	80006990 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006964:	f0 1f 00 0c 	mcall	80006994 <nav_file_del+0xa8>
80006968:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000696c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006970:	80 00       	ld.sh	r0,r0[0x0]
80006972:	53 10       	stdsp	sp[0xc4],r0
80006974:	80 00       	ld.sh	r0,r0[0x0]
80006976:	65 f0       	ld.w	r0,r2[0x7c]
80006978:	00 00       	add	r0,r0
8000697a:	1a 00       	add	r0,sp
8000697c:	80 00       	ld.sh	r0,r0[0x0]
8000697e:	68 0c       	ld.w	r12,r4[0x0]
80006980:	80 00       	ld.sh	r0,r0[0x0]
80006982:	56 00       	stdsp	sp[0x180],r0
80006984:	80 00       	ld.sh	r0,r0[0x0]
80006986:	65 00       	ld.w	r0,r2[0x40]
80006988:	80 00       	ld.sh	r0,r0[0x0]
8000698a:	68 ac       	ld.w	r12,r4[0x28]
8000698c:	80 00       	ld.sh	r0,r0[0x0]
8000698e:	47 40       	lddsp	r0,sp[0x1d0]
80006990:	80 00       	ld.sh	r0,r0[0x0]
80006992:	67 88       	ld.w	r8,r3[0x60]
80006994:	80 00       	ld.sh	r0,r0[0x0]
80006996:	48 a4       	lddpc	r4,800069bc <nav_filelist_first+0x24>

80006998 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
80006998:	d4 21       	pushm	r4-r7,lr
8000699a:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
8000699c:	f0 1f 00 0b 	mcall	800069c8 <nav_filelist_first+0x30>
800069a0:	c0 71       	brne	800069ae <nav_filelist_first+0x16>
800069a2:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
800069a4:	e9 38 00 2c 	ld.ub	r8,r4[44]
800069a8:	10 37       	cp.w	r7,r8
800069aa:	c0 51       	brne	800069b4 <nav_filelist_first+0x1c>
800069ac:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800069ae:	30 16       	mov	r6,1
800069b0:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
800069b2:	48 74       	lddpc	r4,800069cc <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800069b4:	0c 9b       	mov	r11,r6
800069b6:	0a 9c       	mov	r12,r5
800069b8:	f0 1f 00 06 	mcall	800069d0 <nav_filelist_first+0x38>
800069bc:	cf 41       	brne	800069a4 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800069be:	30 99       	mov	r9,9
800069c0:	48 58       	lddpc	r8,800069d4 <nav_filelist_first+0x3c>
800069c2:	b0 89       	st.b	r8[0x0],r9
   return false;
}
800069c4:	d8 22       	popm	r4-r7,pc
800069c6:	00 00       	add	r0,r0
800069c8:	80 00       	ld.sh	r0,r0[0x0]
800069ca:	67 88       	ld.w	r8,r3[0x60]
800069cc:	00 00       	add	r0,r0
800069ce:	19 b0       	ld.ub	r0,r12[0x3]
800069d0:	80 00       	ld.sh	r0,r0[0x0]
800069d2:	65 f0       	ld.w	r0,r2[0x7c]
800069d4:	00 00       	add	r0,r0
800069d6:	1a 00       	add	r0,sp

800069d8 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
800069d8:	d4 31       	pushm	r0-r7,lr
800069da:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
800069dc:	49 88       	lddpc	r8,80006a3c <nav_filelist_nb+0x64>
800069de:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
800069e2:	f0 1f 00 18 	mcall	80006a40 <nav_filelist_nb+0x68>
800069e6:	c0 31       	brne	800069ec <nav_filelist_nb+0x14>
800069e8:	30 02       	mov	r2,0
800069ea:	c2 68       	rjmp	80006a36 <nav_filelist_nb+0x5e>
800069ec:	30 02       	mov	r2,0
800069ee:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800069f0:	30 14       	mov	r4,1
800069f2:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800069f4:	49 26       	lddpc	r6,80006a3c <nav_filelist_nb+0x64>
800069f6:	30 15       	mov	r5,1
800069f8:	c0 b8       	rjmp	80006a0e <nav_filelist_nb+0x36>
800069fa:	ed 38 00 2c 	ld.ub	r8,r6[44]
800069fe:	ea 08 18 00 	cp.b	r8,r5
80006a02:	c0 41       	brne	80006a0a <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
80006a04:	2f f2       	sub	r2,-1
80006a06:	5c 82       	casts.h	r2
80006a08:	c0 38       	rjmp	80006a0e <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
80006a0a:	2f f7       	sub	r7,-1
80006a0c:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006a0e:	08 9b       	mov	r11,r4
80006a10:	06 9c       	mov	r12,r3
80006a12:	f0 1f 00 0d 	mcall	80006a44 <nav_filelist_nb+0x6c>
80006a16:	cf 21       	brne	800069fa <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
80006a18:	f0 1f 00 0a 	mcall	80006a40 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
80006a1c:	3f f8       	mov	r8,-1
80006a1e:	f0 01 19 00 	cp.h	r1,r8
80006a22:	c0 60       	breq	80006a2e <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80006a24:	30 1b       	mov	r11,1
80006a26:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
80006a2a:	f0 1f 00 07 	mcall	80006a44 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
80006a2e:	58 00       	cp.w	r0,0
80006a30:	c0 31       	brne	80006a36 <nav_filelist_nb+0x5e>
80006a32:	0e 92       	mov	r2,r7
80006a34:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80006a36:	04 9c       	mov	r12,r2
80006a38:	d8 32       	popm	r0-r7,pc
80006a3a:	00 00       	add	r0,r0
80006a3c:	00 00       	add	r0,r0
80006a3e:	19 b0       	ld.ub	r0,r12[0x3]
80006a40:	80 00       	ld.sh	r0,r0[0x0]
80006a42:	67 88       	ld.w	r8,r3[0x60]
80006a44:	80 00       	ld.sh	r0,r0[0x0]
80006a46:	65 f0       	ld.w	r0,r2[0x7c]

80006a48 <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
80006a48:	eb cd 40 c0 	pushm	r6-r7,lr
80006a4c:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
80006a4e:	f0 1f 00 0f 	mcall	80006a88 <nav_filelist_last+0x40>
80006a52:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
80006a56:	c0 61       	brne	80006a62 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
80006a58:	30 99       	mov	r9,9
80006a5a:	48 d8       	lddpc	r8,80006a8c <nav_filelist_last+0x44>
80006a5c:	b0 89       	st.b	r8[0x0],r9
80006a5e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006a62:	0c 9c       	mov	r12,r6
80006a64:	f0 1f 00 0b 	mcall	80006a90 <nav_filelist_last+0x48>
80006a68:	c0 d0       	breq	80006a82 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
80006a6a:	30 18       	mov	r8,1
80006a6c:	f0 07 19 00 	cp.h	r7,r8
80006a70:	c0 31       	brne	80006a76 <nav_filelist_last+0x2e>
80006a72:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80006a76:	0e 9c       	mov	r12,r7
80006a78:	20 2c       	sub	r12,2
80006a7a:	30 1b       	mov	r11,1
80006a7c:	5c 7c       	castu.h	r12
80006a7e:	f0 1f 00 06 	mcall	80006a94 <nav_filelist_last+0x4c>
}
80006a82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006a86:	00 00       	add	r0,r0
80006a88:	80 00       	ld.sh	r0,r0[0x0]
80006a8a:	69 d8       	ld.w	r8,r4[0x74]
80006a8c:	00 00       	add	r0,r0
80006a8e:	1a 00       	add	r0,sp
80006a90:	80 00       	ld.sh	r0,r0[0x0]
80006a92:	69 98       	ld.w	r8,r4[0x64]
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	65 f0       	ld.w	r0,r2[0x7c]

80006a98 <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
80006a98:	eb cd 40 80 	pushm	r7,lr
80006a9c:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
80006a9e:	f0 1f 00 18 	mcall	80006afc <nav_dir_make+0x64>
80006aa2:	c2 b0       	breq	80006af8 <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006aa4:	0e 9c       	mov	r12,r7
80006aa6:	f0 1f 00 17 	mcall	80006b00 <nav_dir_make+0x68>
80006aaa:	c2 70       	breq	80006af8 <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
80006aac:	49 68       	lddpc	r8,80006b04 <nav_dir_make+0x6c>
80006aae:	3f f9       	mov	r9,-1
80006ab0:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006ab2:	30 19       	mov	r9,1
80006ab4:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
80006ab6:	f0 1f 00 15 	mcall	80006b08 <nav_dir_make+0x70>
80006aba:	c0 71       	brne	80006ac8 <nav_dir_make+0x30>
   {
      fat_delete_file( false );
80006abc:	f0 1f 00 14 	mcall	80006b0c <nav_dir_make+0x74>
      fat_cache_flush();
80006ac0:	f0 1f 00 14 	mcall	80006b10 <nav_dir_make+0x78>
80006ac4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
80006ac8:	49 38       	lddpc	r8,80006b14 <nav_dir_make+0x7c>
80006aca:	48 f9       	lddpc	r9,80006b04 <nav_dir_make+0x6c>
80006acc:	72 09       	ld.w	r9,r9[0x0]
80006ace:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80006ad0:	30 09       	mov	r9,0
80006ad2:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
80006ad4:	31 09       	mov	r9,16
80006ad6:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
80006ad8:	f0 1f 00 10 	mcall	80006b18 <nav_dir_make+0x80>
80006adc:	c0 e0       	breq	80006af8 <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80006ade:	f0 1f 00 10 	mcall	80006b1c <nav_dir_make+0x84>
80006ae2:	c0 b0       	breq	80006af8 <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
80006ae4:	f0 1f 00 0f 	mcall	80006b20 <nav_dir_make+0x88>
   if( !fat_cache_flush())
80006ae8:	f0 1f 00 0a 	mcall	80006b10 <nav_dir_make+0x78>
80006aec:	c0 60       	breq	80006af8 <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80006aee:	30 0c       	mov	r12,0
80006af0:	f0 1f 00 0d 	mcall	80006b24 <nav_dir_make+0x8c>
80006af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006af8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006afc:	80 00       	ld.sh	r0,r0[0x0]
80006afe:	53 34       	stdsp	sp[0xcc],r4
80006b00:	80 00       	ld.sh	r0,r0[0x0]
80006b02:	67 a0       	ld.w	r0,r3[0x68]
80006b04:	00 00       	add	r0,r0
80006b06:	1a 58       	eor	r8,sp
80006b08:	80 00       	ld.sh	r0,r0[0x0]
80006b0a:	57 dc       	stdsp	sp[0x1f4],r12
80006b0c:	80 00       	ld.sh	r0,r0[0x0]
80006b0e:	56 00       	stdsp	sp[0x180],r0
80006b10:	80 00       	ld.sh	r0,r0[0x0]
80006b12:	48 a4       	lddpc	r4,80006b38 <nav_partition_mount+0x10>
80006b14:	00 00       	add	r0,r0
80006b16:	17 70       	ld.ub	r0,--r11
80006b18:	80 00       	ld.sh	r0,r0[0x0]
80006b1a:	54 98       	stdsp	sp[0x124],r8
80006b1c:	80 00       	ld.sh	r0,r0[0x0]
80006b1e:	4f 40       	lddpc	r0,80006cec <nav_setcwd+0xcc>
80006b20:	80 00       	ld.sh	r0,r0[0x0]
80006b22:	46 f0       	lddsp	r0,sp[0x1bc]
80006b24:	80 00       	ld.sh	r0,r0[0x0]
80006b26:	6a 48       	ld.w	r8,r5[0x10]

80006b28 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
80006b28:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
80006b2a:	f0 1f 00 0a 	mcall	80006b50 <nav_partition_mount+0x28>
80006b2e:	c0 f0       	breq	80006b4c <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80006b30:	48 98       	lddpc	r8,80006b54 <nav_partition_mount+0x2c>
80006b32:	11 89       	ld.ub	r9,r8[0x0]
80006b34:	30 08       	mov	r8,0
80006b36:	f0 09 18 00 	cp.b	r9,r8
80006b3a:	c0 70       	breq	80006b48 <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80006b3c:	30 09       	mov	r9,0
80006b3e:	48 78       	lddpc	r8,80006b58 <nav_partition_mount+0x30>
80006b40:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80006b42:	f0 1f 00 07 	mcall	80006b5c <nav_partition_mount+0x34>
80006b46:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
80006b48:	f0 1f 00 06 	mcall	80006b60 <nav_partition_mount+0x38>
}
80006b4c:	d8 02       	popm	pc
80006b4e:	00 00       	add	r0,r0
80006b50:	80 00       	ld.sh	r0,r0[0x0]
80006b52:	52 60       	stdsp	sp[0x98],r0
80006b54:	00 00       	add	r0,r0
80006b56:	19 fc       	ld.ub	r12,r12[0x7]
80006b58:	00 00       	add	r0,r0
80006b5a:	19 b0       	ld.ub	r0,r12[0x3]
80006b5c:	80 00       	ld.sh	r0,r0[0x0]
80006b5e:	43 0c       	lddsp	r12,sp[0xc0]
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	5d 74       	*unknown*

80006b64 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006b64:	d4 01       	pushm	lr
   return nav_partition_mount();
80006b66:	f0 1f 00 02 	mcall	80006b6c <nav_dir_root+0x8>
}
80006b6a:	d8 02       	popm	pc
80006b6c:	80 00       	ld.sh	r0,r0[0x0]
80006b6e:	6b 28       	ld.w	r8,r5[0x48]

80006b70 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80006b70:	eb cd 40 80 	pushm	r7,lr
80006b74:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
80006b76:	f0 1f 00 0f 	mcall	80006bb0 <nav_drive_set+0x40>
80006b7a:	c1 90       	breq	80006bac <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80006b7c:	f0 1f 00 0e 	mcall	80006bb4 <nav_drive_set+0x44>
80006b80:	ee 0c 18 00 	cp.b	r12,r7
80006b84:	e0 8b 00 07 	brhi	80006b92 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80006b88:	30 69       	mov	r9,6
80006b8a:	48 c8       	lddpc	r8,80006bb8 <nav_drive_set+0x48>
80006b8c:	b0 89       	st.b	r8[0x0],r9
80006b8e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006b92:	48 b8       	lddpc	r8,80006bbc <nav_drive_set+0x4c>
80006b94:	11 88       	ld.ub	r8,r8[0x0]
80006b96:	ee 08 18 00 	cp.b	r8,r7
80006b9a:	c0 31       	brne	80006ba0 <nav_drive_set+0x30>
80006b9c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006ba0:	48 78       	lddpc	r8,80006bbc <nav_drive_set+0x4c>
80006ba2:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006ba4:	30 09       	mov	r9,0
80006ba6:	48 78       	lddpc	r8,80006bc0 <nav_drive_set+0x50>
80006ba8:	b0 89       	st.b	r8[0x0],r9
80006baa:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80006bac:	e3 cd 80 80 	ldm	sp++,r7,pc
80006bb0:	80 00       	ld.sh	r0,r0[0x0]
80006bb2:	52 60       	stdsp	sp[0x98],r0
80006bb4:	80 00       	ld.sh	r0,r0[0x0]
80006bb6:	71 ec       	ld.w	r12,r8[0x78]
80006bb8:	00 00       	add	r0,r0
80006bba:	1a 00       	add	r0,sp
80006bbc:	00 00       	add	r0,r0
80006bbe:	19 b0       	ld.ub	r0,r12[0x3]
80006bc0:	00 00       	add	r0,r0
80006bc2:	19 fc       	ld.ub	r12,r12[0x7]

80006bc4 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006bc4:	d4 21       	pushm	r4-r7,lr
80006bc6:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
80006bc8:	19 8c       	ld.ub	r12,r12[0x0]
80006bca:	f0 1f 00 10 	mcall	80006c08 <nav_gotoindex+0x44>
80006bce:	c1 c0       	breq	80006c06 <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80006bd0:	f0 1f 00 0f 	mcall	80006c0c <nav_gotoindex+0x48>
80006bd4:	c1 90       	breq	80006c06 <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
80006bd6:	6e 19       	ld.w	r9,r7[0x4]
80006bd8:	48 e8       	lddpc	r8,80006c10 <nav_gotoindex+0x4c>
80006bda:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
80006bdc:	f0 1f 00 0e 	mcall	80006c14 <nav_gotoindex+0x50>
80006be0:	c0 a1       	brne	80006bf4 <nav_gotoindex+0x30>
80006be2:	c1 28       	rjmp	80006c06 <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006be4:	0a 9b       	mov	r11,r5
80006be6:	08 9c       	mov	r12,r4
80006be8:	f0 1f 00 0c 	mcall	80006c18 <nav_gotoindex+0x54>
80006bec:	c0 71       	brne	80006bfa <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
80006bee:	f0 1f 00 0a 	mcall	80006c14 <nav_gotoindex+0x50>
80006bf2:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006bf4:	48 a6       	lddpc	r6,80006c1c <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006bf6:	30 15       	mov	r5,1
80006bf8:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006bfa:	8c 19       	ld.sh	r9,r6[0x2]
80006bfc:	8e 48       	ld.sh	r8,r7[0x8]
80006bfe:	f0 09 19 00 	cp.h	r9,r8
80006c02:	cf 11       	brne	80006be4 <nav_gotoindex+0x20>
80006c04:	da 2a       	popm	r4-r7,pc,r12=1
80006c06:	d8 2a       	popm	r4-r7,pc,r12=0
80006c08:	80 00       	ld.sh	r0,r0[0x0]
80006c0a:	6b 70       	ld.w	r0,r5[0x5c]
80006c0c:	80 00       	ld.sh	r0,r0[0x0]
80006c0e:	6b 28       	ld.w	r8,r5[0x48]
80006c10:	00 00       	add	r0,r0
80006c12:	19 b0       	ld.ub	r0,r12[0x3]
80006c14:	80 00       	ld.sh	r0,r0[0x0]
80006c16:	67 88       	ld.w	r8,r3[0x60]
80006c18:	80 00       	ld.sh	r0,r0[0x0]
80006c1a:	65 f0       	ld.w	r0,r2[0x7c]
80006c1c:	00 00       	add	r0,r0
80006c1e:	19 fc       	ld.ub	r12,r12[0x7]

80006c20 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
80006c20:	d4 31       	pushm	r0-r7,lr
80006c22:	20 6d       	sub	sp,24
80006c24:	18 97       	mov	r7,r12
80006c26:	16 91       	mov	r1,r11
80006c28:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
80006c2a:	f0 1f 00 61 	mcall	80006dac <nav_setcwd+0x18c>
80006c2e:	e0 80 00 bd 	breq	80006da8 <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
80006c32:	1a 96       	mov	r6,sp
80006c34:	1a 9c       	mov	r12,sp
80006c36:	f0 1f 00 5f 	mcall	80006db0 <nav_setcwd+0x190>
80006c3a:	fa c8 ff f4 	sub	r8,sp,-12
80006c3e:	fa ea 00 00 	ld.d	r10,sp[0]
80006c42:	f0 eb 00 00 	st.d	r8[0],r10
80006c46:	40 29       	lddsp	r9,sp[0x8]
80006c48:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
80006c4a:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
80006c4c:	35 c9       	mov	r9,92
80006c4e:	f2 08 18 00 	cp.b	r8,r9
80006c52:	5f 0a       	sreq	r10
80006c54:	32 f9       	mov	r9,47
80006c56:	f2 08 18 00 	cp.b	r8,r9
80006c5a:	5f 09       	sreq	r9
80006c5c:	f5 e9 10 09 	or	r9,r10,r9
80006c60:	c0 70       	breq	80006c6e <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006c62:	f0 1f 00 55 	mcall	80006db4 <nav_setcwd+0x194>
80006c66:	e0 80 00 9c 	breq	80006d9e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
80006c6a:	2f f7       	sub	r7,-1
80006c6c:	c5 e8       	rjmp	80006d28 <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006c6e:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006c70:	33 aa       	mov	r10,58
80006c72:	f4 09 18 00 	cp.b	r9,r10
80006c76:	c2 01       	brne	80006cb6 <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006c78:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006c7a:	35 cb       	mov	r11,92
80006c7c:	f6 0a 18 00 	cp.b	r10,r11
80006c80:	5f 0b       	sreq	r11
80006c82:	32 fc       	mov	r12,47
80006c84:	f8 0a 18 00 	cp.b	r10,r12
80006c88:	5f 0a       	sreq	r10
80006c8a:	f7 ea 10 0a 	or	r10,r11,r10
80006c8e:	c1 40       	breq	80006cb6 <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006c90:	4c a9       	lddpc	r9,80006db8 <nav_setcwd+0x198>
80006c92:	72 09       	ld.w	r9,r9[0x0]
80006c94:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006c98:	e2 19 00 02 	andl	r9,0x2,COH
80006c9c:	f7 b8 01 20 	subne	r8,32
80006ca0:	24 18       	sub	r8,65
80006ca2:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006ca6:	f0 1f 00 46 	mcall	80006dbc <nav_setcwd+0x19c>
80006caa:	c7 a0       	breq	80006d9e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80006cac:	f0 1f 00 45 	mcall	80006dc0 <nav_setcwd+0x1a0>
80006cb0:	c7 70       	breq	80006d9e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006cb2:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006cb4:	c3 a8       	rjmp	80006d28 <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006cb6:	32 ea       	mov	r10,46
80006cb8:	f4 08 18 00 	cp.b	r8,r10
80006cbc:	c1 a1       	brne	80006cf0 <nav_setcwd+0xd0>
80006cbe:	35 c8       	mov	r8,92
80006cc0:	f0 09 18 00 	cp.b	r9,r8
80006cc4:	5f 0a       	sreq	r10
80006cc6:	32 f8       	mov	r8,47
80006cc8:	f0 09 18 00 	cp.b	r9,r8
80006ccc:	5f 08       	sreq	r8
80006cce:	f5 e8 10 08 	or	r8,r10,r8
80006cd2:	c0 f0       	breq	80006cf0 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80006cd4:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006cd6:	c2 98       	rjmp	80006d28 <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80006cd8:	f0 1f 00 3b 	mcall	80006dc4 <nav_setcwd+0x1a4>
80006cdc:	c6 10       	breq	80006d9e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
80006cde:	0d 88       	ld.ub	r8,r6[0x0]
80006ce0:	e8 08 18 00 	cp.b	r8,r4
80006ce4:	c0 31       	brne	80006cea <nav_setcwd+0xca>
80006ce6:	0c 97       	mov	r7,r6
80006ce8:	c0 88       	rjmp	80006cf8 <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
80006cea:	ec c7 ff ff 	sub	r7,r6,-1
80006cee:	c0 58       	rjmp	80006cf8 <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006cf0:	32 e5       	mov	r5,46
80006cf2:	35 c3       	mov	r3,92
80006cf4:	32 f2       	mov	r2,47
80006cf6:	30 04       	mov	r4,0
80006cf8:	0f 88       	ld.ub	r8,r7[0x0]
80006cfa:	ea 08 18 00 	cp.b	r8,r5
80006cfe:	c1 51       	brne	80006d28 <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80006d00:	0f 98       	ld.ub	r8,r7[0x1]
80006d02:	ea 08 18 00 	cp.b	r8,r5
80006d06:	c1 11       	brne	80006d28 <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80006d08:	ee c6 ff fe 	sub	r6,r7,-2
80006d0c:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006d0e:	e6 08 18 00 	cp.b	r8,r3
80006d12:	5f 0a       	sreq	r10
80006d14:	e4 08 18 00 	cp.b	r8,r2
80006d18:	5f 09       	sreq	r9
80006d1a:	f5 e9 10 09 	or	r9,r10,r9
80006d1e:	e8 09 18 00 	cp.b	r9,r4
80006d22:	cd b1       	brne	80006cd8 <nav_setcwd+0xb8>
80006d24:	58 08       	cp.w	r8,0
80006d26:	cd 90       	breq	80006cd8 <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006d28:	f0 1f 00 28 	mcall	80006dc8 <nav_setcwd+0x1a8>
80006d2c:	c3 90       	breq	80006d9e <nav_setcwd+0x17e>
80006d2e:	30 03       	mov	r3,0
80006d30:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006d32:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006d34:	35 c5       	mov	r5,92
80006d36:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006d38:	0f 88       	ld.ub	r8,r7[0x0]
80006d3a:	ec 08 18 00 	cp.b	r8,r6
80006d3e:	c0 31       	brne	80006d44 <nav_setcwd+0x124>
80006d40:	30 1c       	mov	r12,1
80006d42:	c3 38       	rjmp	80006da8 <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006d44:	02 9b       	mov	r11,r1
80006d46:	0e 9c       	mov	r12,r7
80006d48:	f0 1f 00 21 	mcall	80006dcc <nav_setcwd+0x1ac>
80006d4c:	c0 51       	brne	80006d56 <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
80006d4e:	58 00       	cp.w	r0,0
80006d50:	c2 70       	breq	80006d9e <nav_setcwd+0x17e>
80006d52:	0e 92       	mov	r2,r7
80006d54:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006d56:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006d58:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006d5a:	58 08       	cp.w	r8,0
80006d5c:	c0 81       	brne	80006d6c <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006d5e:	58 03       	cp.w	r3,0
80006d60:	ce c0       	breq	80006d38 <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006d62:	04 9c       	mov	r12,r2
80006d64:	f0 1f 00 1b 	mcall	80006dd0 <nav_setcwd+0x1b0>
80006d68:	ce 81       	brne	80006d38 <nav_setcwd+0x118>
80006d6a:	c1 a8       	rjmp	80006d9e <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006d6c:	ea 08 18 00 	cp.b	r8,r5
80006d70:	5f 09       	sreq	r9
80006d72:	e8 08 18 00 	cp.b	r8,r4
80006d76:	5f 08       	sreq	r8
80006d78:	f3 e8 10 08 	or	r8,r9,r8
80006d7c:	ec 08 18 00 	cp.b	r8,r6
80006d80:	ce b0       	breq	80006d56 <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006d82:	58 03       	cp.w	r3,0
80006d84:	c0 50       	breq	80006d8e <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006d86:	04 9c       	mov	r12,r2
80006d88:	f0 1f 00 13 	mcall	80006dd4 <nav_setcwd+0x1b4>
80006d8c:	c0 90       	breq	80006d9e <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006d8e:	f0 1f 00 13 	mcall	80006dd8 <nav_setcwd+0x1b8>
80006d92:	c0 60       	breq	80006d9e <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006d94:	f0 1f 00 12 	mcall	80006ddc <nav_setcwd+0x1bc>
80006d98:	c0 30       	breq	80006d9e <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006d9a:	2f f7       	sub	r7,-1
80006d9c:	cc eb       	rjmp	80006d38 <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006d9e:	fa cc ff f4 	sub	r12,sp,-12
80006da2:	f0 1f 00 10 	mcall	80006de0 <nav_setcwd+0x1c0>
80006da6:	30 0c       	mov	r12,0
   return false;
}
80006da8:	2f ad       	sub	sp,-24
80006daa:	d8 32       	popm	r0-r7,pc
80006dac:	80 00       	ld.sh	r0,r0[0x0]
80006dae:	52 60       	stdsp	sp[0x98],r0
80006db0:	80 00       	ld.sh	r0,r0[0x0]
80006db2:	64 e0       	ld.w	r0,r2[0x38]
80006db4:	80 00       	ld.sh	r0,r0[0x0]
80006db6:	6b 64       	ld.w	r4,r5[0x58]
80006db8:	00 00       	add	r0,r0
80006dba:	0c 10       	sub	r0,r6
80006dbc:	80 00       	ld.sh	r0,r0[0x0]
80006dbe:	6b 70       	ld.w	r0,r5[0x5c]
80006dc0:	80 00       	ld.sh	r0,r0[0x0]
80006dc2:	6b 28       	ld.w	r8,r5[0x48]
80006dc4:	80 00       	ld.sh	r0,r0[0x0]
80006dc6:	68 0c       	ld.w	r12,r4[0x0]
80006dc8:	80 00       	ld.sh	r0,r0[0x0]
80006dca:	67 88       	ld.w	r8,r3[0x60]
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	67 58       	ld.w	r8,r3[0x54]
80006dd0:	80 00       	ld.sh	r0,r0[0x0]
80006dd2:	67 a0       	ld.w	r0,r3[0x68]
80006dd4:	80 00       	ld.sh	r0,r0[0x0]
80006dd6:	6a 98       	ld.w	r8,r5[0x24]
80006dd8:	80 00       	ld.sh	r0,r0[0x0]
80006dda:	42 f4       	lddsp	r4,sp[0xbc]
80006ddc:	80 00       	ld.sh	r0,r0[0x0]
80006dde:	68 ac       	ld.w	r12,r4[0x28]
80006de0:	80 00       	ld.sh	r0,r0[0x0]
80006de2:	6b c4       	ld.w	r4,r5[0x70]

80006de4 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
80006de4:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
80006de6:	f0 1f 00 02 	mcall	80006dec <nav_drive_nb+0x8>
}
80006dea:	d8 02       	popm	pc
80006dec:	80 00       	ld.sh	r0,r0[0x0]
80006dee:	71 ec       	ld.w	r12,r8[0x78]

80006df0 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80006df0:	eb cd 40 80 	pushm	r7,lr
80006df4:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006df6:	30 18       	mov	r8,1
80006df8:	f0 0c 18 00 	cp.b	r12,r8
80006dfc:	e0 88 00 07 	brls	80006e0a <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006e00:	32 79       	mov	r9,39
80006e02:	48 b8       	lddpc	r8,80006e2c <nav_select+0x3c>
80006e04:	b0 89       	st.b	r8[0x0],r9
80006e06:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006e0a:	48 a8       	lddpc	r8,80006e30 <nav_select+0x40>
80006e0c:	11 8c       	ld.ub	r12,r8[0x0]
80006e0e:	ee 0c 18 00 	cp.b	r12,r7
80006e12:	c0 31       	brne	80006e18 <nav_select+0x28>
80006e14:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006e18:	f0 1f 00 07 	mcall	80006e34 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006e1c:	0e 9c       	mov	r12,r7
80006e1e:	f0 1f 00 06 	mcall	80006e34 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006e22:	48 48       	lddpc	r8,80006e30 <nav_select+0x40>
80006e24:	b0 87       	st.b	r8[0x0],r7
80006e26:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006e2a:	00 00       	add	r0,r0
80006e2c:	00 00       	add	r0,r0
80006e2e:	1a 00       	add	r0,sp
80006e30:	00 00       	add	r0,r0
80006e32:	1a 78       	tst	r8,sp
80006e34:	80 00       	ld.sh	r0,r0[0x0]
80006e36:	47 b8       	lddsp	r8,sp[0x1ec]

80006e38 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006e38:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006e3c:	30 07       	mov	r7,0
80006e3e:	49 18       	lddpc	r8,80006e80 <nav_reset+0x48>
80006e40:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006e42:	49 18       	lddpc	r8,80006e84 <nav_reset+0x4c>
80006e44:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006e46:	f0 1f 00 11 	mcall	80006e88 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006e4a:	f0 1f 00 11 	mcall	80006e8c <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006e4e:	30 0c       	mov	r12,0
80006e50:	f0 1f 00 10 	mcall	80006e90 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006e54:	49 03       	lddpc	r3,80006e94 <nav_reset+0x5c>
80006e56:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006e58:	49 05       	lddpc	r5,80006e98 <nav_reset+0x60>
80006e5a:	3f f4       	mov	r4,-1
80006e5c:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006e5e:	49 06       	lddpc	r6,80006e9c <nav_reset+0x64>
80006e60:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006e62:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006e66:	30 1c       	mov	r12,1
80006e68:	f0 1f 00 0a 	mcall	80006e90 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006e6c:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006e6e:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006e70:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006e72:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006e76:	48 b8       	lddpc	r8,80006ea0 <nav_reset+0x68>
80006e78:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006e7a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006e7e:	00 00       	add	r0,r0
80006e80:	00 00       	add	r0,r0
80006e82:	1a 01       	add	r1,sp
80006e84:	00 00       	add	r0,r0
80006e86:	17 82       	ld.ub	r2,r11[0x0]
80006e88:	80 00       	ld.sh	r0,r0[0x0]
80006e8a:	46 c8       	lddsp	r8,sp[0x1b0]
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	40 a8       	lddsp	r8,sp[0x28]
80006e90:	80 00       	ld.sh	r0,r0[0x0]
80006e92:	6d f0       	ld.w	r0,r6[0x7c]
80006e94:	00 00       	add	r0,r0
80006e96:	19 fc       	ld.ub	r12,r12[0x7]
80006e98:	00 00       	add	r0,r0
80006e9a:	19 b0       	ld.ub	r0,r12[0x3]
80006e9c:	00 00       	add	r0,r0
80006e9e:	17 70       	ld.ub	r0,--r11
80006ea0:	00 00       	add	r0,r0
80006ea2:	1a 78       	tst	r8,sp

80006ea4 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80006ea4:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80006ea6:	f0 1f 00 02 	mcall	80006eac <print_char+0x8>
}
80006eaa:	d8 02       	popm	pc
80006eac:	80 00       	ld.sh	r0,r0[0x0]
80006eae:	3e 54       	mov	r4,-27

80006eb0 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80006eb0:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
80006eb2:	18 9b       	mov	r11,r12
80006eb4:	fe 7c 2c 00 	mov	r12,-54272
80006eb8:	f0 1f 00 02 	mcall	80006ec0 <print_dbg_char+0x10>
}
80006ebc:	d8 02       	popm	pc
80006ebe:	00 00       	add	r0,r0
80006ec0:	80 00       	ld.sh	r0,r0[0x0]
80006ec2:	6e a4       	ld.w	r4,r7[0x28]

80006ec4 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006ec4:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006ec6:	f0 1f 00 02 	mcall	80006ecc <print+0x8>
}
80006eca:	d8 02       	popm	pc
80006ecc:	80 00       	ld.sh	r0,r0[0x0]
80006ece:	3e d0       	mov	r0,-19

80006ed0 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80006ed0:	eb cd 40 e0 	pushm	r5-r7,lr
80006ed4:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80006ed6:	30 08       	mov	r8,0
80006ed8:	fb 68 00 0a 	st.b	sp[10],r8
80006edc:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80006ede:	1a 95       	mov	r5,sp
80006ee0:	e0 6e cc cd 	mov	lr,52429
80006ee4:	ea 1e cc cc 	orh	lr,0xcccc
80006ee8:	20 19       	sub	r9,1
80006eea:	f6 0e 06 46 	mulu.d	r6,r11,lr
80006eee:	0e 98       	mov	r8,r7
80006ef0:	a3 98       	lsr	r8,0x3
80006ef2:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80006ef6:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80006efa:	2d 0b       	sub	r11,-48
80006efc:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80006f00:	10 9b       	mov	r11,r8
  } while (n);
80006f02:	58 08       	cp.w	r8,0
80006f04:	cf 21       	brne	80006ee8 <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80006f06:	1a 9b       	mov	r11,sp
80006f08:	12 0b       	add	r11,r9
80006f0a:	f0 1f 00 03 	mcall	80006f14 <print_ulong+0x44>
}
80006f0e:	2f dd       	sub	sp,-12
80006f10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	6e c4       	ld.w	r4,r7[0x30]

80006f18 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80006f18:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80006f1a:	18 9b       	mov	r11,r12
80006f1c:	fe 7c 2c 00 	mov	r12,-54272
80006f20:	f0 1f 00 02 	mcall	80006f28 <print_dbg_ulong+0x10>
}
80006f24:	d8 02       	popm	pc
80006f26:	00 00       	add	r0,r0
80006f28:	80 00       	ld.sh	r0,r0[0x0]
80006f2a:	6e d0       	ld.w	r0,r7[0x34]

80006f2c <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80006f2c:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80006f2e:	18 9b       	mov	r11,r12
80006f30:	fe 7c 2c 00 	mov	r12,-54272
80006f34:	f0 1f 00 02 	mcall	80006f3c <print_dbg+0x10>
}
80006f38:	d8 02       	popm	pc
80006f3a:	00 00       	add	r0,r0
80006f3c:	80 00       	ld.sh	r0,r0[0x0]
80006f3e:	6e c4       	ld.w	r4,r7[0x30]

80006f40 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80006f40:	eb cd 40 80 	pushm	r7,lr
80006f44:	20 3d       	sub	sp,12
80006f46:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80006f48:	50 0c       	stdsp	sp[0x0],r12
80006f4a:	30 88       	mov	r8,8
80006f4c:	ba c8       	st.b	sp[0x4],r8
80006f4e:	30 48       	mov	r8,4
80006f50:	ba d8       	st.b	sp[0x5],r8
80006f52:	30 08       	mov	r8,0
80006f54:	ba 38       	st.h	sp[0x6],r8
80006f56:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80006f5a:	30 2b       	mov	r11,2
80006f5c:	48 6c       	lddpc	r12,80006f74 <init_dbg_rs232_ex+0x34>
80006f5e:	f0 1f 00 07 	mcall	80006f78 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80006f62:	0e 9a       	mov	r10,r7
80006f64:	1a 9b       	mov	r11,sp
80006f66:	fe 7c 2c 00 	mov	r12,-54272
80006f6a:	f0 1f 00 05 	mcall	80006f7c <init_dbg_rs232_ex+0x3c>
}
80006f6e:	2f dd       	sub	sp,-12
80006f70:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f74:	80 01       	ld.sh	r1,r0[0x0]
80006f76:	18 d8       	st.w	--r12,r8
80006f78:	80 00       	ld.sh	r0,r0[0x0]
80006f7a:	31 c4       	mov	r4,28
80006f7c:	80 00       	ld.sh	r0,r0[0x0]
80006f7e:	3f 20       	mov	r0,-14

80006f80 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80006f80:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80006f82:	18 9b       	mov	r11,r12
80006f84:	e0 6c e1 00 	mov	r12,57600
80006f88:	f0 1f 00 02 	mcall	80006f90 <init_dbg_rs232+0x10>
}
80006f8c:	d8 02       	popm	pc
80006f8e:	00 00       	add	r0,r0
80006f90:	80 00       	ld.sh	r0,r0[0x0]
80006f92:	6f 40       	ld.w	r0,r7[0x50]

80006f94 <_stext>:
80006f94:	48 dd       	lddpc	sp,80006fc8 <udata_clear_loop_end+0x6>
80006f96:	48 e0       	lddpc	r0,80006fcc <udata_clear_loop_end+0xa>
80006f98:	e3 b0 00 01 	mtsr	0x4,r0
80006f9c:	d5 53       	csrf	0x15
80006f9e:	48 d0       	lddpc	r0,80006fd0 <udata_clear_loop_end+0xe>
80006fa0:	48 d1       	lddpc	r1,80006fd4 <udata_clear_loop_end+0x12>
80006fa2:	02 30       	cp.w	r0,r1
80006fa4:	c0 62       	brcc	80006fb0 <idata_load_loop_end>
80006fa6:	48 d2       	lddpc	r2,80006fd8 <udata_clear_loop_end+0x16>

80006fa8 <idata_load_loop>:
80006fa8:	a5 05       	ld.d	r4,r2++
80006faa:	a1 24       	st.d	r0++,r4
80006fac:	02 30       	cp.w	r0,r1
80006fae:	cf d3       	brcs	80006fa8 <idata_load_loop>

80006fb0 <idata_load_loop_end>:
80006fb0:	48 b0       	lddpc	r0,80006fdc <udata_clear_loop_end+0x1a>
80006fb2:	48 c1       	lddpc	r1,80006fe0 <udata_clear_loop_end+0x1e>
80006fb4:	02 30       	cp.w	r0,r1
80006fb6:	c0 62       	brcc	80006fc2 <udata_clear_loop_end>
80006fb8:	30 02       	mov	r2,0
80006fba:	30 03       	mov	r3,0

80006fbc <udata_clear_loop>:
80006fbc:	a1 22       	st.d	r0++,r2
80006fbe:	02 30       	cp.w	r0,r1
80006fc0:	cf e3       	brcs	80006fbc <udata_clear_loop>

80006fc2 <udata_clear_loop_end>:
80006fc2:	fe cf c3 fa 	sub	pc,pc,-15366
80006fc6:	d7 03       	nop
80006fc8:	00 01       	add	r1,r0
80006fca:	00 00       	add	r0,r0
80006fcc:	80 01       	ld.sh	r1,r0[0x0]
80006fce:	14 00       	add	r0,r10
80006fd0:	00 00       	add	r0,r0
80006fd2:	00 04       	add	r4,r0
80006fd4:	00 00       	add	r0,r0
80006fd6:	11 18       	ld.sh	r8,r8++
80006fd8:	80 01       	ld.sh	r1,r0[0x0]
80006fda:	2e 58       	sub	r8,-27
80006fdc:	00 00       	add	r0,r0
80006fde:	11 18       	ld.sh	r8,r8++
80006fe0:	00 00       	add	r0,r0
80006fe2:	1a f8       	st.b	--sp,r8

80006fe4 <SD_Card_Test>:
	sdram_msp = create_mspace_with_base((void*) SDRAM_START_ADDRESS, MEM_SPACE_SIZE, 0);
	
	Enable_global_interrupt();
}
void SD_Card_Test()
{
80006fe4:	eb cd 40 80 	pushm	r7,lr
80006fe8:	20 1d       	sub	sp,4
	uint32_t VarTemp;
	//print_dbg("\n\n\rSD Card Memory Test:\n\r");
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
80006fea:	30 0c       	mov	r12,0
80006fec:	f0 1f 00 21 	mcall	80007070 <SD_Card_Test+0x8c>
80006ff0:	c3 a1       	brne	80007064 <SD_Card_Test+0x80>
	{
		SD_Status.Status = STATUS_OK;
80006ff2:	4a 17       	lddpc	r7,80007074 <SD_Card_Test+0x90>
80006ff4:	30 08       	mov	r8,0
80006ff6:	ae 88       	st.b	r7[0x0],r8
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
80006ff8:	1a 9b       	mov	r11,sp
80006ffa:	f0 1f 00 20 	mcall	80007078 <SD_Card_Test+0x94>
		/*		print_dbg("OK:\t");*/
		SD_Status.Memory_size = (VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR);
80006ffe:	40 08       	lddsp	r8,sp[0x0]
80007000:	2f f8       	sub	r8,-1
80007002:	ab 98       	lsr	r8,0xb
80007004:	8f 18       	st.w	r7[0x4],r8
		// 		print_dbg_ulong(Columbus_Status.SD_Card->Memory_size);
		// 		print_dbg("MB\r\n");
		// 		print_dbg("SD Card Okay.\n\r");
		nav_reset();
80007006:	f0 1f 00 1e 	mcall	8000707c <SD_Card_Test+0x98>
		// Use the last drive available as default.
		nav_drive_set(nav_drive_nb() - 1);
8000700a:	f0 1f 00 1e 	mcall	80007080 <SD_Card_Test+0x9c>
8000700e:	20 1c       	sub	r12,1
80007010:	5c 5c       	castu.b	r12
80007012:	f0 1f 00 1d 	mcall	80007084 <SD_Card_Test+0xa0>
		// Mount it.
		nav_partition_mount();
80007016:	f0 1f 00 1d 	mcall	80007088 <SD_Card_Test+0xa4>
		nav_filelist_reset();
8000701a:	f0 1f 00 1d 	mcall	8000708c <SD_Card_Test+0xa8>
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
8000701e:	30 0b       	mov	r11,0
80007020:	49 cc       	lddpc	r12,80007090 <SD_Card_Test+0xac>
80007022:	f0 1f 00 1d 	mcall	80007094 <SD_Card_Test+0xb0>
80007026:	c0 90       	breq	80007038 <SD_Card_Test+0x54>
		{
			//print_dbg("\n\rLog File Already Exists\n\rAttempting to delete...");	
			nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007028:	30 0a       	mov	r10,0
8000702a:	30 1b       	mov	r11,1
8000702c:	49 9c       	lddpc	r12,80007090 <SD_Card_Test+0xac>
8000702e:	f0 1f 00 1b 	mcall	80007098 <SD_Card_Test+0xb4>
			nav_file_del(false);
80007032:	30 0c       	mov	r12,0
80007034:	f0 1f 00 1a 	mcall	8000709c <SD_Card_Test+0xb8>
		}

		if(nav_file_create((FS_STRING)LOG_FILE) == false)
80007038:	49 6c       	lddpc	r12,80007090 <SD_Card_Test+0xac>
8000703a:	f0 1f 00 1a 	mcall	800070a0 <SD_Card_Test+0xbc>
8000703e:	c0 41       	brne	80007046 <SD_Card_Test+0x62>
			SD_Status.Status = ERR_IO_ERROR;//print_dbg("\n\rNot worked...");
80007040:	3f f9       	mov	r9,-1
80007042:	48 d8       	lddpc	r8,80007074 <SD_Card_Test+0x90>
80007044:	b0 89       	st.b	r8[0x0],r9
	
		nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007046:	30 0a       	mov	r10,0
80007048:	30 1b       	mov	r11,1
8000704a:	49 2c       	lddpc	r12,80007090 <SD_Card_Test+0xac>
8000704c:	f0 1f 00 13 	mcall	80007098 <SD_Card_Test+0xb4>
		file_open(FOPEN_MODE_APPEND);
80007050:	30 2c       	mov	r12,2
80007052:	f0 1f 00 15 	mcall	800070a4 <SD_Card_Test+0xc0>
		file_write_buf("SD Card Test\n\r", 14);
80007056:	30 eb       	mov	r11,14
80007058:	49 4c       	lddpc	r12,800070a8 <SD_Card_Test+0xc4>
8000705a:	f0 1f 00 15 	mcall	800070ac <SD_Card_Test+0xc8>
		file_close();
8000705e:	f0 1f 00 15 	mcall	800070b0 <SD_Card_Test+0xcc>
80007062:	c0 48       	rjmp	8000706a <SD_Card_Test+0x86>
	}
	else
	{
		SD_Status.Status = ERR_IO_ERROR;
80007064:	3f f9       	mov	r9,-1
80007066:	48 48       	lddpc	r8,80007074 <SD_Card_Test+0x90>
80007068:	b0 89       	st.b	r8[0x0],r9
	}
}
8000706a:	2f fd       	sub	sp,-4
8000706c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007070:	80 00       	ld.sh	r0,r0[0x0]
80007072:	71 f0       	ld.w	r0,r8[0x7c]
80007074:	00 00       	add	r0,r0
80007076:	1a 7c       	tst	r12,sp
80007078:	80 00       	ld.sh	r0,r0[0x0]
8000707a:	72 04       	ld.w	r4,r9[0x0]
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	6e 38       	ld.w	r8,r7[0xc]
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	6d e4       	ld.w	r4,r6[0x78]
80007084:	80 00       	ld.sh	r0,r0[0x0]
80007086:	6b 70       	ld.w	r0,r5[0x5c]
80007088:	80 00       	ld.sh	r0,r0[0x0]
8000708a:	6b 28       	ld.w	r8,r5[0x48]
8000708c:	80 00       	ld.sh	r0,r0[0x0]
8000708e:	67 88       	ld.w	r8,r3[0x60]
80007090:	80 01       	ld.sh	r1,r0[0x0]
80007092:	18 e8       	st.h	--r12,r8
80007094:	80 00       	ld.sh	r0,r0[0x0]
80007096:	67 58       	ld.w	r8,r3[0x54]
80007098:	80 00       	ld.sh	r0,r0[0x0]
8000709a:	6c 20       	ld.w	r0,r6[0x8]
8000709c:	80 00       	ld.sh	r0,r0[0x0]
8000709e:	68 ec       	ld.w	r12,r4[0x38]
800070a0:	80 00       	ld.sh	r0,r0[0x0]
800070a2:	67 a0       	ld.w	r0,r3[0x68]
800070a4:	80 00       	ld.sh	r0,r0[0x0]
800070a6:	64 40       	ld.w	r0,r2[0x10]
800070a8:	80 01       	ld.sh	r1,r0[0x0]
800070aa:	18 f0       	st.b	--r12,r0
800070ac:	80 00       	ld.sh	r0,r0[0x0]
800070ae:	60 d4       	ld.w	r4,r0[0x34]
800070b0:	80 00       	ld.sh	r0,r0[0x0]
800070b2:	60 98       	ld.w	r8,r0[0x24]

800070b4 <System_Test>:

void System_Test()
{
800070b4:	d4 01       	pushm	lr
	SD_Card_Test();
800070b6:	f0 1f 00 1d 	mcall	80007128 <System_Test+0x74>
	if(SD_Status.Status != STATUS_OK)
800070ba:	49 d8       	lddpc	r8,8000712c <System_Test+0x78>
800070bc:	11 89       	ld.ub	r9,r8[0x0]
800070be:	30 08       	mov	r8,0
800070c0:	f0 09 18 00 	cp.b	r9,r8
800070c4:	c0 80       	breq	800070d4 <System_Test+0x20>
	{
		Columbus_Status.Status |= SD_ERR;
800070c6:	49 b8       	lddpc	r8,80007130 <System_Test+0x7c>
800070c8:	70 09       	ld.w	r9,r8[0x0]
800070ca:	a1 a9       	sbr	r9,0x0
800070cc:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rSD Card Error!");
800070ce:	49 ac       	lddpc	r12,80007134 <System_Test+0x80>
800070d0:	f0 1f 00 1a 	mcall	80007138 <System_Test+0x84>
	}	
	if(OV7670_Status.Status != STATUS_OK)
800070d4:	49 a8       	lddpc	r8,8000713c <System_Test+0x88>
800070d6:	11 89       	ld.ub	r9,r8[0x0]
800070d8:	30 08       	mov	r8,0
800070da:	f0 09 18 00 	cp.b	r9,r8
800070de:	c0 c0       	breq	800070f6 <System_Test+0x42>
	{
		Columbus_Status.Status |= CAM_ERR;
800070e0:	49 48       	lddpc	r8,80007130 <System_Test+0x7c>
800070e2:	70 09       	ld.w	r9,r8[0x0]
800070e4:	a1 b9       	sbr	r9,0x1
800070e6:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rCamera Error(s): ");
800070e8:	49 6c       	lddpc	r12,80007140 <System_Test+0x8c>
800070ea:	f0 1f 00 14 	mcall	80007138 <System_Test+0x84>
		print_dbg_ulong(OV7670_Status.Status);
800070ee:	49 48       	lddpc	r8,8000713c <System_Test+0x88>
800070f0:	11 8c       	ld.ub	r12,r8[0x0]
800070f2:	f0 1f 00 15 	mcall	80007144 <System_Test+0x90>
	}	
	if(PCA9542A.Status != STATUS_OK)
800070f6:	49 58       	lddpc	r8,80007148 <System_Test+0x94>
800070f8:	11 89       	ld.ub	r9,r8[0x0]
800070fa:	30 08       	mov	r8,0
800070fc:	f0 09 18 00 	cp.b	r9,r8
80007100:	c0 80       	breq	80007110 <System_Test+0x5c>
	{
		Columbus_Status.Status |= I2CMux_ERR;
80007102:	48 c8       	lddpc	r8,80007130 <System_Test+0x7c>
80007104:	70 09       	ld.w	r9,r8[0x0]
80007106:	a3 a9       	sbr	r9,0x2
80007108:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rI2C Mux Error!");
8000710a:	49 1c       	lddpc	r12,8000714c <System_Test+0x98>
8000710c:	f0 1f 00 0b 	mcall	80007138 <System_Test+0x84>
	}		
	
	if(Columbus_Status.Status == STATUS_OK)
80007110:	48 88       	lddpc	r8,80007130 <System_Test+0x7c>
80007112:	70 08       	ld.w	r8,r8[0x0]
80007114:	58 08       	cp.w	r8,0
80007116:	c0 51       	brne	80007120 <System_Test+0x6c>
		print_dbg("\n\rSystem Check: PASS;");
80007118:	48 ec       	lddpc	r12,80007150 <System_Test+0x9c>
8000711a:	f0 1f 00 08 	mcall	80007138 <System_Test+0x84>
8000711e:	d8 02       	popm	pc
	else
		print_dbg("\n\rSystem Check: FAIL;");
80007120:	48 dc       	lddpc	r12,80007154 <System_Test+0xa0>
80007122:	f0 1f 00 06 	mcall	80007138 <System_Test+0x84>
80007126:	d8 02       	popm	pc
80007128:	80 00       	ld.sh	r0,r0[0x0]
8000712a:	6f e4       	ld.w	r4,r7[0x78]
8000712c:	00 00       	add	r0,r0
8000712e:	1a 7c       	tst	r12,sp
80007130:	00 00       	add	r0,r0
80007132:	1a 90       	mov	r0,sp
80007134:	80 01       	ld.sh	r1,r0[0x0]
80007136:	19 00       	ld.w	r0,r12++
80007138:	80 00       	ld.sh	r0,r0[0x0]
8000713a:	6f 2c       	ld.w	r12,r7[0x48]
8000713c:	00 00       	add	r0,r0
8000713e:	1a 86       	andn	r6,sp
80007140:	80 01       	ld.sh	r1,r0[0x0]
80007142:	19 14       	ld.sh	r4,r12++
80007144:	80 00       	ld.sh	r0,r0[0x0]
80007146:	6f 18       	ld.w	r8,r7[0x44]
80007148:	00 00       	add	r0,r0
8000714a:	1a 84       	andn	r4,sp
8000714c:	80 01       	ld.sh	r1,r0[0x0]
8000714e:	19 28       	ld.uh	r8,r12++
80007150:	80 01       	ld.sh	r1,r0[0x0]
80007152:	19 3c       	ld.ub	r12,r12++
80007154:	80 01       	ld.sh	r1,r0[0x0]
80007156:	19 54       	ld.sh	r4,--r12

80007158 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "CustomDevices/CustomDevices.h"

void board_init(void)
{
80007158:	d4 01       	pushm	lr
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	//Initialise Clocks
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
8000715a:	30 3a       	mov	r10,3
8000715c:	e0 6b 24 00 	mov	r11,9216
80007160:	ea 1b 00 f4 	orh	r11,0xf4
80007164:	30 0c       	mov	r12,0
80007166:	f0 1f 00 15 	mcall	800071b8 <board_init+0x60>
	//initialise Debug USART
	init_dbg_rs232(FOSC0);
8000716a:	e0 6c 24 00 	mov	r12,9216
8000716e:	ea 1c 00 f4 	orh	r12,0xf4
80007172:	f0 1f 00 13 	mcall	800071bc <board_init+0x64>
	//Throw some text out.
	print_dbg("\x0C");
80007176:	49 3c       	lddpc	r12,800071c0 <board_init+0x68>
80007178:	f0 1f 00 13 	mcall	800071c4 <board_init+0x6c>
	print_dbg("The Columbus\n\n\r");
8000717c:	49 3c       	lddpc	r12,800071c8 <board_init+0x70>
8000717e:	f0 1f 00 12 	mcall	800071c4 <board_init+0x6c>
	sdramc_init(FOSC0);//SDRAM initialise
80007182:	e0 6c 24 00 	mov	r12,9216
80007186:	ea 1c 00 f4 	orh	r12,0xf4
8000718a:	f0 1f 00 11 	mcall	800071cc <board_init+0x74>
	sd_mmc_resources_init();//SD Card Init
8000718e:	f0 1f 00 11 	mcall	800071d0 <board_init+0x78>
	INTC_init_interrupts();
80007192:	f0 1f 00 11 	mcall	800071d4 <board_init+0x7c>
	twim_init();
80007196:	f0 1f 00 11 	mcall	800071d8 <board_init+0x80>
	Motor_Init();
8000719a:	f0 1f 00 11 	mcall	800071dc <board_init+0x84>
	OV7670_Init();
8000719e:	f0 1f 00 11 	mcall	800071e0 <board_init+0x88>
	
	//Allocate Memory Space
	sdram_msp = create_mspace_with_base((void*) SDRAM_START_ADDRESS, MEM_SPACE_SIZE, 0);
800071a2:	30 0a       	mov	r10,0
800071a4:	fc 1b 00 40 	movh	r11,0x40
800071a8:	fc 1c d0 00 	movh	r12,0xd000
800071ac:	f0 1f 00 0e 	mcall	800071e4 <board_init+0x8c>
800071b0:	48 e8       	lddpc	r8,800071e8 <board_init+0x90>
800071b2:	91 0c       	st.w	r8[0x0],r12
	
	Enable_global_interrupt();
800071b4:	d5 03       	csrf	0x10
}
800071b6:	d8 02       	popm	pc
800071b8:	80 00       	ld.sh	r0,r0[0x0]
800071ba:	33 74       	mov	r4,55
800071bc:	80 00       	ld.sh	r0,r0[0x0]
800071be:	6f 80       	ld.w	r0,r7[0x60]
800071c0:	80 01       	ld.sh	r1,r0[0x0]
800071c2:	19 6c       	ld.uh	r12,--r12
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	6f 2c       	ld.w	r12,r7[0x48]
800071c8:	80 01       	ld.sh	r1,r0[0x0]
800071ca:	19 70       	ld.ub	r0,--r12
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	2e 04       	sub	r4,-32
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	aa a0       	st.b	r5[0x2],r0
800071d4:	80 00       	ld.sh	r0,r0[0x0]
800071d6:	32 c8       	mov	r8,44
800071d8:	80 00       	ld.sh	r0,r0[0x0]
800071da:	ab 24       	st.d	r5++,r4
800071dc:	80 00       	ld.sh	r0,r0[0x0]
800071de:	98 7c       	ld.sh	r12,r12[0xe]
800071e0:	80 00       	ld.sh	r0,r0[0x0]
800071e2:	a3 78       	lsl	r8,0x3
800071e4:	80 00       	ld.sh	r0,r0[0x0]
800071e6:	86 74       	ld.sh	r4,r3[0xe]
800071e8:	00 00       	add	r0,r0
800071ea:	1a a4       	st.w	sp++,r4

800071ec <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800071ec:	5e ff       	retal	1
800071ee:	d7 03       	nop

800071f0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800071f0:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800071f2:	58 0c       	cp.w	r12,0
800071f4:	c0 20       	breq	800071f8 <mem_test_unit_ready+0x8>
800071f6:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800071f8:	48 28       	lddpc	r8,80007200 <mem_test_unit_ready+0x10>
800071fa:	70 0c       	ld.w	r12,r8[0x0]
800071fc:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
800071fe:	d8 02       	popm	pc
80007200:	80 01       	ld.sh	r1,r0[0x0]
80007202:	19 80       	ld.ub	r0,r12[0x0]

80007204 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80007204:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80007206:	58 0c       	cp.w	r12,0
80007208:	c0 20       	breq	8000720c <mem_read_capacity+0x8>
8000720a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000720c:	48 38       	lddpc	r8,80007218 <mem_read_capacity+0x14>
8000720e:	70 18       	ld.w	r8,r8[0x4]
80007210:	16 9c       	mov	r12,r11
80007212:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80007214:	d8 02       	popm	pc
80007216:	00 00       	add	r0,r0
80007218:	80 01       	ld.sh	r1,r0[0x0]
8000721a:	19 80       	ld.ub	r0,r12[0x0]

8000721c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
8000721c:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
8000721e:	5f 0c       	sreq	r12
80007220:	5e fc       	retal	r12
80007222:	d7 03       	nop

80007224 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80007224:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80007226:	58 0c       	cp.w	r12,0
80007228:	c0 20       	breq	8000722c <mem_wr_protect+0x8>
8000722a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000722c:	48 28       	lddpc	r8,80007234 <mem_wr_protect+0x10>
8000722e:	70 2c       	ld.w	r12,r8[0x8]
80007230:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80007232:	d8 02       	popm	pc
80007234:	80 01       	ld.sh	r1,r0[0x0]
80007236:	19 80       	ld.ub	r0,r12[0x0]

80007238 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80007238:	d4 01       	pushm	lr
8000723a:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
8000723c:	58 0c       	cp.w	r12,0
8000723e:	c0 20       	breq	80007242 <memory_2_ram+0xa>
80007240:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80007242:	48 49       	lddpc	r9,80007250 <memory_2_ram+0x18>
80007244:	72 49       	ld.w	r9,r9[0x10]
80007246:	14 9b       	mov	r11,r10
80007248:	10 9c       	mov	r12,r8
8000724a:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
8000724c:	d8 02       	popm	pc
8000724e:	00 00       	add	r0,r0
80007250:	80 01       	ld.sh	r1,r0[0x0]
80007252:	19 80       	ld.ub	r0,r12[0x0]

80007254 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80007254:	d4 01       	pushm	lr
80007256:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80007258:	58 0c       	cp.w	r12,0
8000725a:	c0 20       	breq	8000725e <ram_2_memory+0xa>
8000725c:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
8000725e:	48 49       	lddpc	r9,8000726c <ram_2_memory+0x18>
80007260:	72 59       	ld.w	r9,r9[0x14]
80007262:	14 9b       	mov	r11,r10
80007264:	10 9c       	mov	r12,r8
80007266:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80007268:	d8 02       	popm	pc
8000726a:	00 00       	add	r0,r0
8000726c:	80 01       	ld.sh	r1,r0[0x0]
8000726e:	19 80       	ld.ub	r0,r12[0x0]

80007270 <segment_holding>:
#define segment_holds(S, A)\
  ((char*)(A) >= S->base && (char*)(A) < S->base + S->size)

/* Return segment holding given address */
static msegmentptr segment_holding(mstate m, char* addr) {
  msegmentptr sp = &m->seg;
80007270:	f8 cc fe 48 	sub	r12,r12,-440
  for (;;) {
    if (addr >= sp->base && addr < sp->base + sp->size)
80007274:	78 08       	ld.w	r8,r12[0x0]
80007276:	16 38       	cp.w	r8,r11
80007278:	e0 8b 00 06 	brhi	80007284 <segment_holding+0x14>
8000727c:	78 19       	ld.w	r9,r12[0x4]
8000727e:	12 08       	add	r8,r9
80007280:	10 3b       	cp.w	r11,r8
80007282:	5e 3c       	retlo	r12
      return sp;
    if ((sp = sp->next) == 0)
80007284:	78 2c       	ld.w	r12,r12[0x8]
80007286:	58 0c       	cp.w	r12,0
80007288:	cf 61       	brne	80007274 <segment_holding+0x4>
      return 0;
  }
}
8000728a:	5e fc       	retal	r12

8000728c <init_mparams>:

/* ---------------------------- setting mparams -------------------------- */

/* Initialize mparams */
static int init_mparams(void) {
  if (mparams.page_size == 0) {
8000728c:	49 08       	lddpc	r8,800072cc <init_mparams+0x40>
8000728e:	70 18       	ld.w	r8,r8[0x4]
80007290:	58 08       	cp.w	r8,0
80007292:	c1 c1       	brne	800072ca <init_mparams+0x3e>
    size_t s;

    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
80007294:	48 e8       	lddpc	r8,800072cc <init_mparams+0x40>
80007296:	e4 69 00 00 	mov	r9,262144
8000729a:	91 39       	st.w	r8[0xc],r9
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
8000729c:	fc 19 00 20 	movh	r9,0x20
800072a0:	91 49       	st.w	r8[0x10],r9
#if MORECORE_CONTIGUOUS
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
800072a2:	30 19       	mov	r9,1
800072a4:	91 59       	st.w	r8[0x14],r9
    }
#else /* (FOOTERS && !INSECURE) */
    s = (size_t)0x58585858U;
#endif /* (FOOTERS && !INSECURE) */
    ACQUIRE_MAGIC_INIT_LOCK();
    if (mparams.magic == 0) {
800072a6:	70 08       	ld.w	r8,r8[0x0]
800072a8:	58 08       	cp.w	r8,0
800072aa:	c0 b1       	brne	800072c0 <init_mparams+0x34>
      mparams.magic = s;
800072ac:	e0 69 58 58 	mov	r9,22616
800072b0:	ea 19 58 58 	orh	r9,0x5858
800072b4:	48 68       	lddpc	r8,800072cc <init_mparams+0x40>
800072b6:	91 09       	st.w	r8[0x0],r9
      /* Set up lock for main malloc area */
      INITIAL_LOCK(&gm->mutex);
      gm->mflags = mparams.default_mflags;
800072b8:	30 19       	mov	r9,1
800072ba:	48 68       	lddpc	r8,800072d0 <init_mparams+0x44>
800072bc:	f1 49 01 b4 	st.w	r8[436],r9
    }
    RELEASE_MAGIC_INIT_LOCK();

#ifndef WIN32
    mparams.page_size = malloc_getpagesize;
800072c0:	48 38       	lddpc	r8,800072cc <init_mparams+0x40>
800072c2:	e0 69 02 00 	mov	r9,512
800072c6:	91 19       	st.w	r8[0x4],r9
    mparams.granularity = ((DEFAULT_GRANULARITY != 0)?
800072c8:	91 29       	st.w	r8[0x8],r9
        ((mparams.granularity & (mparams.granularity-SIZE_T_ONE)) != 0) ||
        ((mparams.page_size   & (mparams.page_size-SIZE_T_ONE))   != 0))
      ABORT;
  }
  return 0;
}
800072ca:	5e fd       	retal	0
800072cc:	00 00       	add	r0,r0
800072ce:	14 ec       	st.h	--r10,r12
800072d0:	00 00       	add	r0,r0
800072d2:	13 24       	ld.uh	r4,r9++

800072d4 <init_top>:
/* -------------------------- mspace management -------------------------- */

/* Initialize top chunk and its size */
static void init_top(mstate m, mchunkptr p, size_t psize) {
  /* Ensure alignment */
  size_t offset = align_offset(chunk2mem(p));
800072d4:	f1 db c0 03 	bfextu	r8,r11,0x0,0x3
800072d8:	c0 50       	breq	800072e2 <init_top+0xe>
800072da:	f0 08 11 08 	rsub	r8,r8,8
800072de:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
  p = (mchunkptr)((char*)p + offset);
800072e2:	10 0b       	add	r11,r8
  psize -= offset;
800072e4:	10 1a       	sub	r10,r8

  m->top = p;
800072e6:	99 6b       	st.w	r12[0x18],r11
  m->topsize = psize;
800072e8:	99 3a       	st.w	r12[0xc],r10
  p->head = psize | PINUSE_BIT;
800072ea:	14 98       	mov	r8,r10
800072ec:	a1 a8       	sbr	r8,0x0
800072ee:	97 18       	st.w	r11[0x4],r8
  /* set size of fake trailing chunk holding overhead space only once */
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
800072f0:	14 0b       	add	r11,r10
800072f2:	32 88       	mov	r8,40
800072f4:	97 18       	st.w	r11[0x4],r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
800072f6:	48 38       	lddpc	r8,80007300 <init_top+0x2c>
800072f8:	70 48       	ld.w	r8,r8[0x10]
800072fa:	99 78       	st.w	r12[0x1c],r8
}
800072fc:	5e fc       	retal	r12
800072fe:	00 00       	add	r0,r0
80007300:	00 00       	add	r0,r0
80007302:	14 ec       	st.h	--r10,r12

80007304 <init_bins>:

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
80007304:	f8 c8 ff dc 	sub	r8,r12,-36
80007308:	f8 cc fe dc 	sub	r12,r12,-292
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
8000730c:	91 38       	st.w	r8[0xc],r8
8000730e:	91 28       	st.w	r8[0x8],r8
80007310:	2f 88       	sub	r8,-8

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
80007312:	18 38       	cp.w	r8,r12
80007314:	cf c1       	brne	8000730c <init_bins+0x8>
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
  }
}
80007316:	5e fc       	retal	r12

80007318 <sys_trim>:
    sp = next;
  }
  return released;
}

static int sys_trim(mstate m, size_t pad) {
80007318:	d4 31       	pushm	r0-r7,lr
8000731a:	20 2d       	sub	sp,8
8000731c:	18 95       	mov	r5,r12
  size_t released = 0;
  if (pad < MAX_REQUEST && is_initialized(m)) {
8000731e:	fe 5b ff bf 	cp.w	r11,-65
80007322:	e0 8b 01 a8 	brhi	80007672 <sys_trim+0x35a>
80007326:	78 68       	ld.w	r8,r12[0x18]
80007328:	58 08       	cp.w	r8,0
8000732a:	e0 80 01 a4 	breq	80007672 <sys_trim+0x35a>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
8000732e:	f6 c6 ff d8 	sub	r6,r11,-40

    if (m->topsize > pad) {
80007332:	78 37       	ld.w	r7,r12[0xc]
80007334:	0e 36       	cp.w	r6,r7
80007336:	c6 32       	brcc	800073fc <sys_trim+0xe4>
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
80007338:	fe f9 03 58 	ld.w	r9,pc[856]
8000733c:	72 23       	ld.w	r3,r9[0x8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);
8000733e:	10 9b       	mov	r11,r8
80007340:	f0 1f 00 d5 	mcall	80007694 <sys_trim+0x37c>
80007344:	18 94       	mov	r4,r12

      if (!is_extern_segment(sp)) {
80007346:	78 38       	ld.w	r8,r12[0xc]
80007348:	10 99       	mov	r9,r8
8000734a:	e2 19 00 08 	andl	r9,0x8,COH
8000734e:	c5 71       	brne	800073fc <sys_trim+0xe4>

    if (m->topsize > pad) {
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
80007350:	ee 03 00 0b 	add	r11,r7,r3
80007354:	20 1b       	sub	r11,1
80007356:	0c 1b       	sub	r11,r6
80007358:	f6 03 0d 0a 	divu	r10,r11,r3
8000735c:	f4 c7 00 01 	sub	r7,r10,1
80007360:	a7 37       	mul	r7,r3
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
80007362:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007366:	c1 30       	breq	8000738c <sys_trim+0x74>
          if (HAVE_MMAP &&
              sp->size >= extra &&
80007368:	78 1c       	ld.w	r12,r12[0x4]
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
          if (HAVE_MMAP &&
8000736a:	18 37       	cp.w	r7,r12
8000736c:	e0 8b 00 48 	brhi	800073fc <sys_trim+0xe4>
  }
}

/* Return true if segment contains a segment link */
static int has_segment_link(mstate m, msegmentptr ss) {
  msegmentptr sp = &m->seg;
80007370:	ea c9 fe 48 	sub	r9,r5,-440
  for (;;) {
    if ((char*)sp >= ss->base && (char*)sp < ss->base + ss->size)
80007374:	68 08       	ld.w	r8,r4[0x0]
80007376:	f0 0c 00 0b 	add	r11,r8,r12
8000737a:	12 38       	cp.w	r8,r9
8000737c:	e0 8b 00 04 	brhi	80007384 <sys_trim+0x6c>
80007380:	16 39       	cp.w	r9,r11
80007382:	c3 d3       	brcs	800073fc <sys_trim+0xe4>
      return 1;
    if ((sp = sp->next) == 0)
80007384:	72 29       	ld.w	r9,r9[0x8]
80007386:	58 09       	cp.w	r9,0
80007388:	cf 91       	brne	8000737a <sys_trim+0x62>
8000738a:	c7 99       	rjmp	8000767c <sys_trim+0x364>
              released = extra;
            }
          }
        }
        else if (HAVE_MORECORE) {
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
8000738c:	e0 6b ff fe 	mov	r11,65534
80007390:	ea 1b 7f ff 	orh	r11,0x7fff
80007394:	16 37       	cp.w	r7,r11
80007396:	e0 88 00 05 	brls	800073a0 <sys_trim+0x88>
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
8000739a:	fc 17 80 00 	movh	r7,0x8000
8000739e:	06 17       	sub	r7,r3
          ACQUIRE_MORECORE_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
800073a0:	30 0c       	mov	r12,0
800073a2:	f0 1f 00 be 	mcall	80007698 <sys_trim+0x380>
            if (old_br == sp->base + sp->size) {
800073a6:	68 06       	ld.w	r6,r4[0x0]
800073a8:	68 18       	ld.w	r8,r4[0x4]
800073aa:	10 06       	add	r6,r8
800073ac:	18 36       	cp.w	r6,r12
800073ae:	c2 71       	brne	800073fc <sys_trim+0xe4>
              char* rel_br = (char*)(CALL_MORECORE(-extra));
800073b0:	ee 0c 11 00 	rsub	r12,r7,0
800073b4:	f0 1f 00 b9 	mcall	80007698 <sys_trim+0x380>
800073b8:	18 97       	mov	r7,r12
              char* new_br = (char*)(CALL_MORECORE(0));
800073ba:	30 0c       	mov	r12,0
800073bc:	f0 1f 00 b7 	mcall	80007698 <sys_trim+0x380>
              if (rel_br != CMFAIL && new_br < old_br)
800073c0:	5b f7       	cp.w	r7,-1
800073c2:	5f 19       	srne	r9
800073c4:	18 36       	cp.w	r6,r12
800073c6:	f9 b8 0b 01 	movhi	r8,1
800073ca:	f9 b8 08 00 	movls	r8,0
800073ce:	f3 e8 00 08 	and	r8,r9,r8
800073d2:	c1 50       	breq	800073fc <sys_trim+0xe4>
                released = old_br - new_br;
800073d4:	18 16       	sub	r6,r12
800073d6:	50 16       	stdsp	sp[0x4],r6
          }
          RELEASE_MORECORE_LOCK();
        }
      }

      if (released != 0) {
800073d8:	40 19       	lddsp	r9,sp[0x4]
800073da:	58 09       	cp.w	r9,0
800073dc:	c1 20       	breq	80007400 <sys_trim+0xe8>
        sp->size -= released;
800073de:	68 18       	ld.w	r8,r4[0x4]
800073e0:	12 18       	sub	r8,r9
800073e2:	89 18       	st.w	r4[0x4],r8
        m->footprint -= released;
800073e4:	ea f8 01 ac 	ld.w	r8,r5[428]
800073e8:	12 18       	sub	r8,r9
800073ea:	eb 48 01 ac 	st.w	r5[428],r8
        init_top(m, m->top, m->topsize - released);
800073ee:	6a 3a       	ld.w	r10,r5[0xc]
800073f0:	12 1a       	sub	r10,r9
800073f2:	6a 6b       	ld.w	r11,r5[0x18]
800073f4:	0a 9c       	mov	r12,r5
800073f6:	f0 1f 00 aa 	mcall	8000769c <sys_trim+0x384>
800073fa:	c0 38       	rjmp	80007400 <sys_trim+0xe8>
800073fc:	30 08       	mov	r8,0
800073fe:	50 18       	stdsp	sp[0x4],r8

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
80007400:	ea f7 01 c0 	ld.w	r7,r5[448]
  while (sp != 0) {
80007404:	58 07       	cp.w	r7,0
80007406:	e0 80 01 2b 	breq	8000765c <sys_trim+0x344>
/* -----------------------  system deallocation -------------------------- */

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
8000740a:	ea c3 fe 48 	sub	r3,r5,-440
8000740e:	30 0b       	mov	r11,0
80007410:	50 0b       	stdsp	sp[0x0],r11
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
80007412:	16 90       	mov	r0,r11
80007414:	0a 94       	mov	r4,r5
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
    char* base = sp->base;
80007416:	6e 0c       	ld.w	r12,r7[0x0]
    size_t size = sp->size;
80007418:	6e 15       	ld.w	r5,r7[0x4]
    msegmentptr next = sp->next;
8000741a:	6e 26       	ld.w	r6,r7[0x8]
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
8000741c:	6e 38       	ld.w	r8,r7[0xc]
8000741e:	e2 18 00 09 	andl	r8,0x9,COH
80007422:	58 18       	cp.w	r8,1
80007424:	e0 81 01 17 	brne	80007652 <sys_trim+0x33a>
      mchunkptr p = align_as_chunk(base);
80007428:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
8000742c:	c0 31       	brne	80007432 <sys_trim+0x11a>
8000742e:	00 98       	mov	r8,r0
80007430:	c0 58       	rjmp	8000743a <sys_trim+0x122>
80007432:	f0 08 11 08 	rsub	r8,r8,8
80007436:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000743a:	f8 08 00 08 	add	r8,r12,r8
8000743e:	10 92       	mov	r2,r8
      size_t psize = chunksize(p);
80007440:	70 11       	ld.w	r1,r8[0x4]
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
80007442:	02 99       	mov	r9,r1
80007444:	e2 19 00 02 	andl	r9,0x2,COH
80007448:	e0 81 01 05 	brne	80007652 <sys_trim+0x33a>
    char* base = sp->base;
    size_t size = sp->size;
    msegmentptr next = sp->next;
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
      mchunkptr p = align_as_chunk(base);
      size_t psize = chunksize(p);
8000744c:	e0 11 ff fc 	andl	r1,0xfffc
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
80007450:	02 08       	add	r8,r1
80007452:	ea c9 00 28 	sub	r9,r5,40
80007456:	f8 09 00 09 	add	r9,r12,r9
8000745a:	12 38       	cp.w	r8,r9
8000745c:	e0 83 00 fb 	brlo	80007652 <sys_trim+0x33a>
        tchunkptr tp = (tchunkptr)p;
        assert(segment_holds(sp, (char*)sp));
        if (p == m->dv) {
80007460:	68 58       	ld.w	r8,r4[0x14]
80007462:	10 32       	cp.w	r2,r8
80007464:	c0 41       	brne	8000746c <sys_trim+0x154>
          m->dv = 0;
80007466:	89 50       	st.w	r4[0x14],r0
          m->dvsize = 0;
80007468:	89 20       	st.w	r4[0x8],r0
8000746a:	c6 48       	rjmp	80007532 <sys_trim+0x21a>
        }
        else {
          unlink_large_chunk(m, tp);
8000746c:	64 6b       	ld.w	r11,r2[0x18]
8000746e:	64 38       	ld.w	r8,r2[0xc]
80007470:	10 32       	cp.w	r2,r8
80007472:	c0 90       	breq	80007484 <sys_trim+0x16c>
80007474:	64 29       	ld.w	r9,r2[0x8]
80007476:	68 4a       	ld.w	r10,r4[0x10]
80007478:	12 3a       	cp.w	r10,r9
8000747a:	e0 8b 00 21 	brhi	800074bc <sys_trim+0x1a4>
8000747e:	93 38       	st.w	r9[0xc],r8
80007480:	91 29       	st.w	r8[0x8],r9
80007482:	c1 d8       	rjmp	800074bc <sys_trim+0x1a4>
80007484:	64 58       	ld.w	r8,r2[0x14]
80007486:	58 08       	cp.w	r8,0
80007488:	c0 40       	breq	80007490 <sys_trim+0x178>
8000748a:	e4 ca ff ec 	sub	r10,r2,-20
8000748e:	c0 a8       	rjmp	800074a2 <sys_trim+0x18a>
80007490:	64 48       	ld.w	r8,r2[0x10]
80007492:	58 08       	cp.w	r8,0
80007494:	c1 40       	breq	800074bc <sys_trim+0x1a4>
80007496:	e4 ca ff f0 	sub	r10,r2,-16
8000749a:	c0 48       	rjmp	800074a2 <sys_trim+0x18a>
8000749c:	f0 ca ff ec 	sub	r10,r8,-20
800074a0:	12 98       	mov	r8,r9
800074a2:	70 59       	ld.w	r9,r8[0x14]
800074a4:	58 09       	cp.w	r9,0
800074a6:	cf b1       	brne	8000749c <sys_trim+0x184>
800074a8:	70 49       	ld.w	r9,r8[0x10]
800074aa:	58 09       	cp.w	r9,0
800074ac:	c0 40       	breq	800074b4 <sys_trim+0x19c>
800074ae:	f0 ca ff f0 	sub	r10,r8,-16
800074b2:	cf 7b       	rjmp	800074a0 <sys_trim+0x188>
800074b4:	68 49       	ld.w	r9,r4[0x10]
800074b6:	14 39       	cp.w	r9,r10
800074b8:	f5 f0 8a 00 	st.wls	r10[0x0],r0
800074bc:	58 0b       	cp.w	r11,0
800074be:	c3 a0       	breq	80007532 <sys_trim+0x21a>
800074c0:	64 79       	ld.w	r9,r2[0x1c]
800074c2:	f2 ca ff b5 	sub	r10,r9,-75
800074c6:	e8 0a 03 2a 	ld.w	r10,r4[r10<<0x2]
800074ca:	14 32       	cp.w	r2,r10
800074cc:	c1 01       	brne	800074ec <sys_trim+0x1d4>
800074ce:	2b 59       	sub	r9,-75
800074d0:	e8 09 09 28 	st.w	r4[r9<<0x2],r8
800074d4:	58 08       	cp.w	r8,0
800074d6:	c1 71       	brne	80007504 <sys_trim+0x1ec>
800074d8:	64 78       	ld.w	r8,r2[0x1c]
800074da:	30 19       	mov	r9,1
800074dc:	f2 08 09 48 	lsl	r8,r9,r8
800074e0:	5c d8       	com	r8
800074e2:	68 19       	ld.w	r9,r4[0x4]
800074e4:	f3 e8 00 08 	and	r8,r9,r8
800074e8:	89 18       	st.w	r4[0x4],r8
800074ea:	c2 48       	rjmp	80007532 <sys_trim+0x21a>
800074ec:	68 49       	ld.w	r9,r4[0x10]
800074ee:	16 39       	cp.w	r9,r11
800074f0:	e0 8b 00 08 	brhi	80007500 <sys_trim+0x1e8>
800074f4:	76 49       	ld.w	r9,r11[0x10]
800074f6:	12 32       	cp.w	r2,r9
800074f8:	f7 f8 0a 04 	st.weq	r11[0x10],r8
800074fc:	f7 f8 1a 05 	st.wne	r11[0x14],r8
80007500:	58 08       	cp.w	r8,0
80007502:	c1 80       	breq	80007532 <sys_trim+0x21a>
80007504:	68 49       	ld.w	r9,r4[0x10]
80007506:	10 39       	cp.w	r9,r8
80007508:	e0 8b 00 15 	brhi	80007532 <sys_trim+0x21a>
8000750c:	91 6b       	st.w	r8[0x18],r11
8000750e:	64 49       	ld.w	r9,r2[0x10]
80007510:	58 09       	cp.w	r9,0
80007512:	c0 70       	breq	80007520 <sys_trim+0x208>
80007514:	68 4a       	ld.w	r10,r4[0x10]
80007516:	12 3a       	cp.w	r10,r9
80007518:	f1 f9 8a 04 	st.wls	r8[0x10],r9
8000751c:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80007520:	64 59       	ld.w	r9,r2[0x14]
80007522:	58 09       	cp.w	r9,0
80007524:	c0 70       	breq	80007532 <sys_trim+0x21a>
80007526:	68 4a       	ld.w	r10,r4[0x10]
80007528:	12 3a       	cp.w	r10,r9
8000752a:	f1 f9 8a 05 	st.wls	r8[0x14],r9
8000752e:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        }
        if (CALL_MUNMAP(base, size) == 0) {
80007532:	0a 9b       	mov	r11,r5
80007534:	f0 1f 00 5b 	mcall	800076a0 <sys_trim+0x388>
80007538:	c0 b1       	brne	8000754e <sys_trim+0x236>
          released += size;
8000753a:	40 08       	lddsp	r8,sp[0x0]
8000753c:	0a 08       	add	r8,r5
8000753e:	50 08       	stdsp	sp[0x0],r8
          m->footprint -= size;
80007540:	e8 f8 01 ac 	ld.w	r8,r4[428]
80007544:	0a 18       	sub	r8,r5
80007546:	e9 48 01 ac 	st.w	r4[428],r8
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
8000754a:	87 26       	st.w	r3[0x8],r6
8000754c:	c8 48       	rjmp	80007654 <sys_trim+0x33c>
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
8000754e:	e2 08 16 08 	lsr	r8,r1,0x8
80007552:	c0 31       	brne	80007558 <sys_trim+0x240>
80007554:	00 99       	mov	r9,r0
80007556:	c2 d8       	rjmp	800075b0 <sys_trim+0x298>
80007558:	e0 48 ff ff 	cp.w	r8,65535
8000755c:	e0 88 00 04 	brls	80007564 <sys_trim+0x24c>
80007560:	31 f9       	mov	r9,31
80007562:	c2 78       	rjmp	800075b0 <sys_trim+0x298>
80007564:	f0 cb 01 00 	sub	r11,r8,256
80007568:	b1 8b       	lsr	r11,0x10
8000756a:	e2 1b 00 08 	andl	r11,0x8,COH
8000756e:	f0 0b 09 48 	lsl	r8,r8,r11
80007572:	f0 ca 10 00 	sub	r10,r8,4096
80007576:	b1 8a       	lsr	r10,0x10
80007578:	e2 1a 00 04 	andl	r10,0x4,COH
8000757c:	f0 0a 09 48 	lsl	r8,r8,r10
80007580:	f0 c9 40 00 	sub	r9,r8,16384
80007584:	b1 89       	lsr	r9,0x10
80007586:	e2 19 00 02 	andl	r9,0x2,COH
8000758a:	f0 09 09 48 	lsl	r8,r8,r9
8000758e:	af 98       	lsr	r8,0xf
80007590:	f6 0b 11 0e 	rsub	r11,r11,14
80007594:	f6 0a 01 0a 	sub	r10,r11,r10
80007598:	f4 09 01 09 	sub	r9,r10,r9
8000759c:	f2 08 00 08 	add	r8,r9,r8
800075a0:	f0 c9 ff f9 	sub	r9,r8,-7
800075a4:	e2 09 0a 49 	lsr	r9,r1,r9
800075a8:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800075ac:	f2 08 00 19 	add	r9,r9,r8<<0x1
800075b0:	85 79       	st.w	r2[0x1c],r9
800075b2:	85 50       	st.w	r2[0x14],r0
800075b4:	85 40       	st.w	r2[0x10],r0
800075b6:	68 18       	ld.w	r8,r4[0x4]
800075b8:	30 1b       	mov	r11,1
800075ba:	f6 09 09 4a 	lsl	r10,r11,r9
800075be:	f5 e8 00 0b 	and	r11,r10,r8
800075c2:	c0 e1       	brne	800075de <sys_trim+0x2c6>
800075c4:	f5 e8 10 08 	or	r8,r10,r8
800075c8:	89 18       	st.w	r4[0x4],r8
800075ca:	2b 59       	sub	r9,-75
800075cc:	e8 09 09 22 	st.w	r4[r9<<0x2],r2
800075d0:	e8 09 00 29 	add	r9,r4,r9<<0x2
800075d4:	85 69       	st.w	r2[0x18],r9
800075d6:	85 32       	st.w	r2[0xc],r2
800075d8:	85 22       	st.w	r2[0x8],r2
800075da:	0e 93       	mov	r3,r7
800075dc:	c3 c8       	rjmp	80007654 <sys_trim+0x33c>
800075de:	f2 c8 ff b5 	sub	r8,r9,-75
800075e2:	e8 08 03 28 	ld.w	r8,r4[r8<<0x2]
800075e6:	59 f9       	cp.w	r9,31
800075e8:	c0 31       	brne	800075ee <sys_trim+0x2d6>
800075ea:	00 99       	mov	r9,r0
800075ec:	c0 48       	rjmp	800075f4 <sys_trim+0x2dc>
800075ee:	a1 99       	lsr	r9,0x1
800075f0:	f2 09 11 19 	rsub	r9,r9,25
800075f4:	e2 09 09 49 	lsl	r9,r1,r9
800075f8:	70 1a       	ld.w	r10,r8[0x4]
800075fa:	e0 1a ff fc 	andl	r10,0xfffc
800075fe:	14 31       	cp.w	r1,r10
80007600:	c1 a0       	breq	80007634 <sys_trim+0x31c>
80007602:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80007606:	f6 ca ff fc 	sub	r10,r11,-4
8000760a:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
8000760e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80007612:	58 0a       	cp.w	r10,0
80007614:	c0 40       	breq	8000761c <sys_trim+0x304>
80007616:	a1 79       	lsl	r9,0x1
80007618:	14 98       	mov	r8,r10
8000761a:	ce fb       	rjmp	800075f8 <sys_trim+0x2e0>
8000761c:	68 49       	ld.w	r9,r4[0x10]
8000761e:	18 39       	cp.w	r9,r12
80007620:	e0 8b 00 19 	brhi	80007652 <sys_trim+0x33a>
80007624:	2f cb       	sub	r11,-4
80007626:	f0 0b 09 22 	st.w	r8[r11<<0x2],r2
8000762a:	85 68       	st.w	r2[0x18],r8
8000762c:	85 32       	st.w	r2[0xc],r2
8000762e:	85 22       	st.w	r2[0x8],r2
80007630:	0e 93       	mov	r3,r7
80007632:	c1 18       	rjmp	80007654 <sys_trim+0x33c>
80007634:	70 29       	ld.w	r9,r8[0x8]
80007636:	68 4a       	ld.w	r10,r4[0x10]
80007638:	10 3a       	cp.w	r10,r8
8000763a:	e0 8b 00 0c 	brhi	80007652 <sys_trim+0x33a>
8000763e:	12 3a       	cp.w	r10,r9
80007640:	e0 8b 00 09 	brhi	80007652 <sys_trim+0x33a>
80007644:	93 32       	st.w	r9[0xc],r2
80007646:	91 22       	st.w	r8[0x8],r2
80007648:	85 29       	st.w	r2[0x8],r9
8000764a:	85 38       	st.w	r2[0xc],r8
8000764c:	85 60       	st.w	r2[0x18],r0
8000764e:	0e 93       	mov	r3,r7
80007650:	c0 28       	rjmp	80007654 <sys_trim+0x33c>
80007652:	0e 93       	mov	r3,r7
/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
80007654:	58 06       	cp.w	r6,0
80007656:	c0 60       	breq	80007662 <sys_trim+0x34a>
80007658:	0c 97       	mov	r7,r6
8000765a:	cd ea       	rjmp	80007416 <sys_trim+0xfe>
8000765c:	30 09       	mov	r9,0
8000765e:	50 09       	stdsp	sp[0x0],r9
80007660:	c0 28       	rjmp	80007664 <sys_trim+0x34c>
80007662:	08 95       	mov	r5,r4
      }
    }

    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);
80007664:	40 08       	lddsp	r8,sp[0x0]
80007666:	40 1b       	lddsp	r11,sp[0x4]
80007668:	16 08       	add	r8,r11

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0)
8000766a:	c0 51       	brne	80007674 <sys_trim+0x35c>
      m->trim_check = MAX_SIZE_T;
8000766c:	3f f9       	mov	r9,-1
8000766e:	8b 79       	st.w	r5[0x1c],r9
80007670:	c0 28       	rjmp	80007674 <sys_trim+0x35c>
80007672:	30 08       	mov	r8,0
80007674:	58 08       	cp.w	r8,0
  }

  return (released != 0)? 1 : 0;
}
80007676:	5f 1c       	srne	r12
80007678:	2f ed       	sub	sp,-8
8000767a:	d8 32       	popm	r0-r7,pc
          if (HAVE_MMAP &&
              sp->size >= extra &&
              !has_segment_link(m, sp)) { /* can't shrink if pinned */
            size_t newsize = sp->size - extra;
            /* Prefer mremap, fall back to munmap */
            if ((CALL_MREMAP(sp->base, sp->size, newsize, 0) != MFAIL) ||
8000767c:	0e 1c       	sub	r12,r7
8000767e:	0e 9b       	mov	r11,r7
80007680:	f0 0c 00 0c 	add	r12,r8,r12
80007684:	f0 1f 00 07 	mcall	800076a0 <sys_trim+0x388>
80007688:	fe 91 fe ba 	brne	800073fc <sys_trim+0xe4>
8000768c:	50 17       	stdsp	sp[0x4],r7
8000768e:	ca 5a       	rjmp	800073d8 <sys_trim+0xc0>
80007690:	00 00       	add	r0,r0
80007692:	14 ec       	st.h	--r10,r12
80007694:	80 00       	ld.sh	r0,r0[0x0]
80007696:	72 70       	ld.w	r0,r9[0x1c]
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	93 f0       	st.w	r9[0x3c],r0
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	72 d4       	ld.w	r4,r9[0x34]
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	94 54       	ld.sh	r4,r10[0xa]

800076a4 <mspace_free>:
#if defined(__ICCAVR32__)
  #pragma diag_default=Pe111
#endif
}

void mspace_free(mspace msp, void* mem) {
800076a4:	d4 21       	pushm	r4-r7,lr
  if (mem != 0) {
800076a6:	58 0b       	cp.w	r11,0
800076a8:	e0 80 02 3f 	breq	80007b26 <mspace_free+0x482>
    mchunkptr p  = mem2chunk(mem);
800076ac:	f6 c8 00 08 	sub	r8,r11,8
#if FOOTERS
    mstate fm = get_mstate_for(p);
#else /* FOOTERS */
    mstate fm = (mstate)msp;
800076b0:	18 97       	mov	r7,r12
      USAGE_ERROR_ACTION(fm, p);
      return;
    }
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
800076b2:	78 4e       	ld.w	lr,r12[0x10]
800076b4:	10 3e       	cp.w	lr,r8
800076b6:	e0 8b 02 38 	brhi	80007b26 <mspace_free+0x482>
800076ba:	70 19       	ld.w	r9,r8[0x4]
800076bc:	12 9a       	mov	r10,r9
800076be:	e2 1a 00 02 	andl	r10,0x2,COH
800076c2:	e0 80 02 32 	breq	80007b26 <mspace_free+0x482>
        size_t psize = chunksize(p);
800076c6:	12 96       	mov	r6,r9
800076c8:	e0 16 ff fc 	andl	r6,0xfffc
        mchunkptr next = chunk_plus_offset(p, psize);
800076cc:	f0 06 00 0b 	add	r11,r8,r6
        if (!pinuse(p)) {
800076d0:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800076d4:	e0 81 00 b7 	brne	80007842 <mspace_free+0x19e>
          size_t prevsize = p->prev_foot;
800076d8:	70 0c       	ld.w	r12,r8[0x0]
          if ((prevsize & IS_MMAPPED_BIT) != 0) {
800076da:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
800076de:	c1 10       	breq	80007700 <mspace_free+0x5c>
            prevsize &= ~IS_MMAPPED_BIT;
800076e0:	a1 cc       	cbr	r12,0x0
            psize += prevsize + MMAP_FOOT_PAD;
800076e2:	18 06       	add	r6,r12
800076e4:	2f 06       	sub	r6,-16
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
800076e6:	0c 9b       	mov	r11,r6
800076e8:	f0 0c 01 0c 	sub	r12,r8,r12
800076ec:	f0 1f 01 0f 	mcall	80007b28 <mspace_free+0x484>
800076f0:	e0 81 02 1b 	brne	80007b26 <mspace_free+0x482>
              fm->footprint -= psize;
800076f4:	ee f8 01 ac 	ld.w	r8,r7[428]
800076f8:	0c 18       	sub	r8,r6
800076fa:	ef 48 01 ac 	st.w	r7[428],r8
800076fe:	d8 22       	popm	r4-r7,pc
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
80007700:	18 18       	sub	r8,r12
            psize += prevsize;
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
80007702:	10 3e       	cp.w	lr,r8
80007704:	e0 8b 02 11 	brhi	80007b26 <mspace_free+0x482>
              fm->footprint -= psize;
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
            psize += prevsize;
80007708:	18 06       	add	r6,r12
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
              if (p != fm->dv) {
8000770a:	6e 59       	ld.w	r9,r7[0x14]
8000770c:	12 38       	cp.w	r8,r9
8000770e:	e0 80 00 8b 	breq	80007824 <mspace_free+0x180>
                unlink_chunk(fm, p, prevsize);
80007712:	a3 9c       	lsr	r12,0x3
80007714:	59 fc       	cp.w	r12,31
80007716:	e0 8b 00 20 	brhi	80007756 <mspace_free+0xb2>
8000771a:	70 29       	ld.w	r9,r8[0x8]
8000771c:	70 3a       	ld.w	r10,r8[0xc]
8000771e:	14 39       	cp.w	r9,r10
80007720:	c0 a1       	brne	80007734 <mspace_free+0x90>
80007722:	30 19       	mov	r9,1
80007724:	f2 0c 09 49 	lsl	r9,r9,r12
80007728:	5c d9       	com	r9
8000772a:	6e 0a       	ld.w	r10,r7[0x0]
8000772c:	f5 e9 00 09 	and	r9,r10,r9
80007730:	8f 09       	st.w	r7[0x0],r9
80007732:	c8 88       	rjmp	80007842 <mspace_free+0x19e>
80007734:	ee c5 ff dc 	sub	r5,r7,-36
80007738:	ea 0c 00 3c 	add	r12,r5,r12<<0x3
8000773c:	18 39       	cp.w	r9,r12
8000773e:	c0 40       	breq	80007746 <mspace_free+0xa2>
80007740:	12 3e       	cp.w	lr,r9
80007742:	e0 8b 00 80 	brhi	80007842 <mspace_free+0x19e>
80007746:	18 3a       	cp.w	r10,r12
80007748:	c0 40       	breq	80007750 <mspace_free+0xac>
8000774a:	14 3e       	cp.w	lr,r10
8000774c:	e0 8b 00 7b 	brhi	80007842 <mspace_free+0x19e>
80007750:	93 3a       	st.w	r9[0xc],r10
80007752:	95 29       	st.w	r10[0x8],r9
80007754:	c7 78       	rjmp	80007842 <mspace_free+0x19e>
80007756:	10 95       	mov	r5,r8
80007758:	70 64       	ld.w	r4,r8[0x18]
8000775a:	70 3c       	ld.w	r12,r8[0xc]
8000775c:	10 3c       	cp.w	r12,r8
8000775e:	c0 c0       	breq	80007776 <mspace_free+0xd2>
80007760:	70 29       	ld.w	r9,r8[0x8]
80007762:	12 3e       	cp.w	lr,r9
80007764:	f8 09 17 b0 	movhi	r9,r12
80007768:	f3 fc 8a 03 	st.wls	r9[0xc],r12
8000776c:	f9 f9 8a 02 	st.wls	r12[0x8],r9
80007770:	f8 09 17 80 	movls	r9,r12
80007774:	c1 c8       	rjmp	800077ac <mspace_free+0x108>
80007776:	78 59       	ld.w	r9,r12[0x14]
80007778:	58 09       	cp.w	r9,0
8000777a:	c0 30       	breq	80007780 <mspace_free+0xdc>
8000777c:	2e cc       	sub	r12,-20
8000777e:	c0 98       	rjmp	80007790 <mspace_free+0xec>
80007780:	78 49       	ld.w	r9,r12[0x10]
80007782:	58 09       	cp.w	r9,0
80007784:	c1 40       	breq	800077ac <mspace_free+0x108>
80007786:	2f 0c       	sub	r12,-16
80007788:	c0 48       	rjmp	80007790 <mspace_free+0xec>
8000778a:	f2 cc ff ec 	sub	r12,r9,-20
8000778e:	14 99       	mov	r9,r10
80007790:	72 5a       	ld.w	r10,r9[0x14]
80007792:	58 0a       	cp.w	r10,0
80007794:	cf b1       	brne	8000778a <mspace_free+0xe6>
80007796:	72 4a       	ld.w	r10,r9[0x10]
80007798:	58 0a       	cp.w	r10,0
8000779a:	c0 40       	breq	800077a2 <mspace_free+0xfe>
8000779c:	f2 cc ff f0 	sub	r12,r9,-16
800077a0:	cf 7b       	rjmp	8000778e <mspace_free+0xea>
800077a2:	18 3e       	cp.w	lr,r12
800077a4:	f9 ba 08 00 	movls	r10,0
800077a8:	f9 fa 8a 00 	st.wls	r12[0x0],r10
800077ac:	58 04       	cp.w	r4,0
800077ae:	c4 a0       	breq	80007842 <mspace_free+0x19e>
800077b0:	6a 7a       	ld.w	r10,r5[0x1c]
800077b2:	f4 cc ff b5 	sub	r12,r10,-75
800077b6:	ee 0c 03 2c 	ld.w	r12,r7[r12<<0x2]
800077ba:	0a 3c       	cp.w	r12,r5
800077bc:	c1 01       	brne	800077dc <mspace_free+0x138>
800077be:	2b 5a       	sub	r10,-75
800077c0:	ee 0a 09 29 	st.w	r7[r10<<0x2],r9
800077c4:	58 09       	cp.w	r9,0
800077c6:	c1 71       	brne	800077f4 <mspace_free+0x150>
800077c8:	78 79       	ld.w	r9,r12[0x1c]
800077ca:	30 1a       	mov	r10,1
800077cc:	f4 09 09 49 	lsl	r9,r10,r9
800077d0:	5c d9       	com	r9
800077d2:	6e 1a       	ld.w	r10,r7[0x4]
800077d4:	f5 e9 00 09 	and	r9,r10,r9
800077d8:	8f 19       	st.w	r7[0x4],r9
800077da:	c3 48       	rjmp	80007842 <mspace_free+0x19e>
800077dc:	6e 4a       	ld.w	r10,r7[0x10]
800077de:	08 3a       	cp.w	r10,r4
800077e0:	e0 8b 00 08 	brhi	800077f0 <mspace_free+0x14c>
800077e4:	68 4a       	ld.w	r10,r4[0x10]
800077e6:	0a 3a       	cp.w	r10,r5
800077e8:	e9 f9 0a 04 	st.weq	r4[0x10],r9
800077ec:	e9 f9 1a 05 	st.wne	r4[0x14],r9
800077f0:	58 09       	cp.w	r9,0
800077f2:	c2 80       	breq	80007842 <mspace_free+0x19e>
800077f4:	6e 4a       	ld.w	r10,r7[0x10]
800077f6:	12 3a       	cp.w	r10,r9
800077f8:	e0 8b 00 25 	brhi	80007842 <mspace_free+0x19e>
800077fc:	93 64       	st.w	r9[0x18],r4
800077fe:	6a 4a       	ld.w	r10,r5[0x10]
80007800:	58 0a       	cp.w	r10,0
80007802:	c0 70       	breq	80007810 <mspace_free+0x16c>
80007804:	6e 4c       	ld.w	r12,r7[0x10]
80007806:	14 3c       	cp.w	r12,r10
80007808:	f3 fa 8a 04 	st.wls	r9[0x10],r10
8000780c:	f5 f9 8a 06 	st.wls	r10[0x18],r9
80007810:	6a 5a       	ld.w	r10,r5[0x14]
80007812:	58 0a       	cp.w	r10,0
80007814:	c1 70       	breq	80007842 <mspace_free+0x19e>
80007816:	6e 4c       	ld.w	r12,r7[0x10]
80007818:	14 3c       	cp.w	r12,r10
8000781a:	e0 8b 00 14 	brhi	80007842 <mspace_free+0x19e>
8000781e:	93 5a       	st.w	r9[0x14],r10
80007820:	95 69       	st.w	r10[0x18],r9
80007822:	c1 08       	rjmp	80007842 <mspace_free+0x19e>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
80007824:	76 19       	ld.w	r9,r11[0x4]
80007826:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
8000782a:	58 39       	cp.w	r9,3
8000782c:	c0 b1       	brne	80007842 <mspace_free+0x19e>
                fm->dvsize = psize;
8000782e:	8f 26       	st.w	r7[0x8],r6
                set_free_with_pinuse(p, psize, next);
80007830:	76 19       	ld.w	r9,r11[0x4]
80007832:	a1 c9       	cbr	r9,0x0
80007834:	97 19       	st.w	r11[0x4],r9
80007836:	0c 99       	mov	r9,r6
80007838:	a1 a9       	sbr	r9,0x0
8000783a:	91 19       	st.w	r8[0x4],r9
8000783c:	f0 06 09 06 	st.w	r8[r6],r6
                goto postaction;
80007840:	d8 22       	popm	r4-r7,pc
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
80007842:	16 38       	cp.w	r8,r11
80007844:	e0 82 01 71 	brhs	80007b26 <mspace_free+0x482>
80007848:	76 19       	ld.w	r9,r11[0x4]
8000784a:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
8000784e:	e0 80 01 6c 	breq	80007b26 <mspace_free+0x482>
          if (!cinuse(next)) {  /* consolidate forward */
80007852:	12 9a       	mov	r10,r9
80007854:	e2 1a 00 02 	andl	r10,0x2,COH
80007858:	e0 81 00 c2 	brne	800079dc <mspace_free+0x338>
            if (next == fm->top) {
8000785c:	6e 6a       	ld.w	r10,r7[0x18]
8000785e:	16 3a       	cp.w	r10,r11
80007860:	c1 91       	brne	80007892 <mspace_free+0x1ee>
              size_t tsize = fm->topsize += psize;
80007862:	6e 39       	ld.w	r9,r7[0xc]
80007864:	12 06       	add	r6,r9
80007866:	8f 36       	st.w	r7[0xc],r6
              fm->top = p;
80007868:	8f 68       	st.w	r7[0x18],r8
              p->head = tsize | PINUSE_BIT;
8000786a:	0c 99       	mov	r9,r6
8000786c:	a1 a9       	sbr	r9,0x0
8000786e:	91 19       	st.w	r8[0x4],r9
              if (p == fm->dv) {
80007870:	6e 59       	ld.w	r9,r7[0x14]
                fm->dv = 0;
80007872:	10 39       	cp.w	r9,r8
80007874:	f9 b8 00 00 	moveq	r8,0
80007878:	ef f8 0a 05 	st.weq	r7[0x14],r8
                fm->dvsize = 0;
8000787c:	ef f8 0a 02 	st.weq	r7[0x8],r8
              }
              if (should_trim(fm, tsize))
80007880:	6e 78       	ld.w	r8,r7[0x1c]
80007882:	10 36       	cp.w	r6,r8
80007884:	e0 88 01 51 	brls	80007b26 <mspace_free+0x482>
                sys_trim(fm, 0);
80007888:	30 0b       	mov	r11,0
8000788a:	0e 9c       	mov	r12,r7
8000788c:	f0 1f 00 a8 	mcall	80007b2c <mspace_free+0x488>
80007890:	d8 22       	popm	r4-r7,pc
              goto postaction;
            }
            else if (next == fm->dv) {
80007892:	6e 5a       	ld.w	r10,r7[0x14]
80007894:	16 3a       	cp.w	r10,r11
80007896:	c0 b1       	brne	800078ac <mspace_free+0x208>
              size_t dsize = fm->dvsize += psize;
80007898:	6e 29       	ld.w	r9,r7[0x8]
8000789a:	12 06       	add	r6,r9
8000789c:	8f 26       	st.w	r7[0x8],r6
              fm->dv = p;
8000789e:	8f 58       	st.w	r7[0x14],r8
              set_size_and_pinuse_of_free_chunk(p, dsize);
800078a0:	0c 99       	mov	r9,r6
800078a2:	a1 a9       	sbr	r9,0x0
800078a4:	91 19       	st.w	r8[0x4],r9
800078a6:	f0 06 09 06 	st.w	r8[r6],r6
              goto postaction;
800078aa:	d8 22       	popm	r4-r7,pc
            }
            else {
              size_t nsize = chunksize(next);
800078ac:	e0 19 ff fc 	andl	r9,0xfffc
              psize += nsize;
800078b0:	12 06       	add	r6,r9
              unlink_chunk(fm, next, nsize);
800078b2:	a3 99       	lsr	r9,0x3
800078b4:	59 f9       	cp.w	r9,31
800078b6:	e0 8b 00 22 	brhi	800078fa <mspace_free+0x256>
800078ba:	76 2a       	ld.w	r10,r11[0x8]
800078bc:	76 3b       	ld.w	r11,r11[0xc]
800078be:	16 3a       	cp.w	r10,r11
800078c0:	c0 a1       	brne	800078d4 <mspace_free+0x230>
800078c2:	30 1a       	mov	r10,1
800078c4:	f4 09 09 49 	lsl	r9,r10,r9
800078c8:	5c d9       	com	r9
800078ca:	6e 0a       	ld.w	r10,r7[0x0]
800078cc:	f5 e9 00 09 	and	r9,r10,r9
800078d0:	8f 09       	st.w	r7[0x0],r9
800078d2:	c7 b8       	rjmp	800079c8 <mspace_free+0x324>
800078d4:	ee cc ff dc 	sub	r12,r7,-36
800078d8:	f8 09 00 39 	add	r9,r12,r9<<0x3
800078dc:	12 3a       	cp.w	r10,r9
800078de:	c0 50       	breq	800078e8 <mspace_free+0x244>
800078e0:	6e 4c       	ld.w	r12,r7[0x10]
800078e2:	14 3c       	cp.w	r12,r10
800078e4:	e0 8b 00 72 	brhi	800079c8 <mspace_free+0x324>
800078e8:	12 3b       	cp.w	r11,r9
800078ea:	c0 50       	breq	800078f4 <mspace_free+0x250>
800078ec:	6e 49       	ld.w	r9,r7[0x10]
800078ee:	16 39       	cp.w	r9,r11
800078f0:	e0 8b 00 6c 	brhi	800079c8 <mspace_free+0x324>
800078f4:	95 3b       	st.w	r10[0xc],r11
800078f6:	97 2a       	st.w	r11[0x8],r10
800078f8:	c6 88       	rjmp	800079c8 <mspace_free+0x324>
800078fa:	76 6e       	ld.w	lr,r11[0x18]
800078fc:	76 3c       	ld.w	r12,r11[0xc]
800078fe:	16 3c       	cp.w	r12,r11
80007900:	c0 d0       	breq	8000791a <mspace_free+0x276>
80007902:	76 29       	ld.w	r9,r11[0x8]
80007904:	6e 4a       	ld.w	r10,r7[0x10]
80007906:	12 3a       	cp.w	r10,r9
80007908:	f8 09 17 b0 	movhi	r9,r12
8000790c:	f3 fc 8a 03 	st.wls	r9[0xc],r12
80007910:	f9 f9 8a 02 	st.wls	r12[0x8],r9
80007914:	f8 09 17 80 	movls	r9,r12
80007918:	c1 d8       	rjmp	80007952 <mspace_free+0x2ae>
8000791a:	78 59       	ld.w	r9,r12[0x14]
8000791c:	58 09       	cp.w	r9,0
8000791e:	c0 30       	breq	80007924 <mspace_free+0x280>
80007920:	2e cc       	sub	r12,-20
80007922:	c0 98       	rjmp	80007934 <mspace_free+0x290>
80007924:	78 49       	ld.w	r9,r12[0x10]
80007926:	58 09       	cp.w	r9,0
80007928:	c1 50       	breq	80007952 <mspace_free+0x2ae>
8000792a:	2f 0c       	sub	r12,-16
8000792c:	c0 48       	rjmp	80007934 <mspace_free+0x290>
8000792e:	f2 cc ff ec 	sub	r12,r9,-20
80007932:	14 99       	mov	r9,r10
80007934:	72 5a       	ld.w	r10,r9[0x14]
80007936:	58 0a       	cp.w	r10,0
80007938:	cf b1       	brne	8000792e <mspace_free+0x28a>
8000793a:	72 4a       	ld.w	r10,r9[0x10]
8000793c:	58 0a       	cp.w	r10,0
8000793e:	c0 40       	breq	80007946 <mspace_free+0x2a2>
80007940:	f2 cc ff f0 	sub	r12,r9,-16
80007944:	cf 7b       	rjmp	80007932 <mspace_free+0x28e>
80007946:	6e 4a       	ld.w	r10,r7[0x10]
80007948:	18 3a       	cp.w	r10,r12
8000794a:	f9 ba 08 00 	movls	r10,0
8000794e:	f9 fa 8a 00 	st.wls	r12[0x0],r10
80007952:	58 0e       	cp.w	lr,0
80007954:	c3 a0       	breq	800079c8 <mspace_free+0x324>
80007956:	76 7a       	ld.w	r10,r11[0x1c]
80007958:	f4 cc ff b5 	sub	r12,r10,-75
8000795c:	ee 0c 03 2c 	ld.w	r12,r7[r12<<0x2]
80007960:	16 3c       	cp.w	r12,r11
80007962:	c1 01       	brne	80007982 <mspace_free+0x2de>
80007964:	2b 5a       	sub	r10,-75
80007966:	ee 0a 09 29 	st.w	r7[r10<<0x2],r9
8000796a:	58 09       	cp.w	r9,0
8000796c:	c1 71       	brne	8000799a <mspace_free+0x2f6>
8000796e:	78 79       	ld.w	r9,r12[0x1c]
80007970:	30 1a       	mov	r10,1
80007972:	f4 09 09 49 	lsl	r9,r10,r9
80007976:	5c d9       	com	r9
80007978:	6e 1a       	ld.w	r10,r7[0x4]
8000797a:	f5 e9 00 09 	and	r9,r10,r9
8000797e:	8f 19       	st.w	r7[0x4],r9
80007980:	c2 48       	rjmp	800079c8 <mspace_free+0x324>
80007982:	6e 4a       	ld.w	r10,r7[0x10]
80007984:	1c 3a       	cp.w	r10,lr
80007986:	e0 8b 00 08 	brhi	80007996 <mspace_free+0x2f2>
8000798a:	7c 4a       	ld.w	r10,lr[0x10]
8000798c:	16 3a       	cp.w	r10,r11
8000798e:	fd f9 0a 04 	st.weq	lr[0x10],r9
80007992:	fd f9 1a 05 	st.wne	lr[0x14],r9
80007996:	58 09       	cp.w	r9,0
80007998:	c1 80       	breq	800079c8 <mspace_free+0x324>
8000799a:	6e 4a       	ld.w	r10,r7[0x10]
8000799c:	12 3a       	cp.w	r10,r9
8000799e:	e0 8b 00 15 	brhi	800079c8 <mspace_free+0x324>
800079a2:	93 6e       	st.w	r9[0x18],lr
800079a4:	76 4a       	ld.w	r10,r11[0x10]
800079a6:	58 0a       	cp.w	r10,0
800079a8:	c0 70       	breq	800079b6 <mspace_free+0x312>
800079aa:	6e 4c       	ld.w	r12,r7[0x10]
800079ac:	14 3c       	cp.w	r12,r10
800079ae:	f3 fa 8a 04 	st.wls	r9[0x10],r10
800079b2:	f5 f9 8a 06 	st.wls	r10[0x18],r9
800079b6:	76 5a       	ld.w	r10,r11[0x14]
800079b8:	58 0a       	cp.w	r10,0
800079ba:	c0 70       	breq	800079c8 <mspace_free+0x324>
800079bc:	6e 4b       	ld.w	r11,r7[0x10]
800079be:	14 3b       	cp.w	r11,r10
800079c0:	f3 fa 8a 05 	st.wls	r9[0x14],r10
800079c4:	f5 f9 8a 06 	st.wls	r10[0x18],r9
              set_size_and_pinuse_of_free_chunk(p, psize);
800079c8:	0c 99       	mov	r9,r6
800079ca:	a1 a9       	sbr	r9,0x0
800079cc:	91 19       	st.w	r8[0x4],r9
800079ce:	f0 06 09 06 	st.w	r8[r6],r6
              if (p == fm->dv) {
800079d2:	6e 59       	ld.w	r9,r7[0x14]
800079d4:	10 39       	cp.w	r9,r8
800079d6:	c0 a1       	brne	800079ea <mspace_free+0x346>
                fm->dvsize = psize;
800079d8:	8f 26       	st.w	r7[0x8],r6
                goto postaction;
800079da:	d8 22       	popm	r4-r7,pc
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
800079dc:	a1 c9       	cbr	r9,0x0
800079de:	97 19       	st.w	r11[0x4],r9
800079e0:	0c 99       	mov	r9,r6
800079e2:	a1 a9       	sbr	r9,0x0
800079e4:	91 19       	st.w	r8[0x4],r9
800079e6:	f0 06 09 06 	st.w	r8[r6],r6
          insert_chunk(fm, p, psize);
800079ea:	ec 09 16 03 	lsr	r9,r6,0x3
800079ee:	59 f9       	cp.w	r9,31
800079f0:	e0 8b 00 1b 	brhi	80007a26 <mspace_free+0x382>
800079f4:	ee ca ff dc 	sub	r10,r7,-36
800079f8:	f4 09 00 3a 	add	r10,r10,r9<<0x3
800079fc:	6e 0b       	ld.w	r11,r7[0x0]
800079fe:	30 1c       	mov	r12,1
80007a00:	f8 09 09 49 	lsl	r9,r12,r9
80007a04:	f3 eb 00 0c 	and	r12,r9,r11
80007a08:	c0 51       	brne	80007a12 <mspace_free+0x36e>
80007a0a:	16 49       	or	r9,r11
80007a0c:	8f 09       	st.w	r7[0x0],r9
80007a0e:	14 99       	mov	r9,r10
80007a10:	c0 68       	rjmp	80007a1c <mspace_free+0x378>
80007a12:	74 29       	ld.w	r9,r10[0x8]
80007a14:	6e 4b       	ld.w	r11,r7[0x10]
80007a16:	16 39       	cp.w	r9,r11
80007a18:	f4 09 17 30 	movlo	r9,r10
80007a1c:	95 28       	st.w	r10[0x8],r8
80007a1e:	93 38       	st.w	r9[0xc],r8
80007a20:	91 29       	st.w	r8[0x8],r9
80007a22:	91 3a       	st.w	r8[0xc],r10
80007a24:	d8 22       	popm	r4-r7,pc
80007a26:	ec 09 16 08 	lsr	r9,r6,0x8
80007a2a:	c0 31       	brne	80007a30 <mspace_free+0x38c>
80007a2c:	30 0a       	mov	r10,0
80007a2e:	c2 d8       	rjmp	80007a88 <mspace_free+0x3e4>
80007a30:	e0 49 ff ff 	cp.w	r9,65535
80007a34:	e0 88 00 04 	brls	80007a3c <mspace_free+0x398>
80007a38:	31 fa       	mov	r10,31
80007a3a:	c2 78       	rjmp	80007a88 <mspace_free+0x3e4>
80007a3c:	f2 ce 01 00 	sub	lr,r9,256
80007a40:	b1 8e       	lsr	lr,0x10
80007a42:	e2 1e 00 08 	andl	lr,0x8,COH
80007a46:	f2 0e 09 49 	lsl	r9,r9,lr
80007a4a:	f2 cc 10 00 	sub	r12,r9,4096
80007a4e:	b1 8c       	lsr	r12,0x10
80007a50:	e2 1c 00 04 	andl	r12,0x4,COH
80007a54:	f2 0c 09 49 	lsl	r9,r9,r12
80007a58:	f2 cb 40 00 	sub	r11,r9,16384
80007a5c:	b1 8b       	lsr	r11,0x10
80007a5e:	e2 1b 00 02 	andl	r11,0x2,COH
80007a62:	f2 0b 09 49 	lsl	r9,r9,r11
80007a66:	af 99       	lsr	r9,0xf
80007a68:	fc 0e 11 0e 	rsub	lr,lr,14
80007a6c:	fc 0c 01 0c 	sub	r12,lr,r12
80007a70:	f8 0b 01 0b 	sub	r11,r12,r11
80007a74:	f6 09 00 09 	add	r9,r11,r9
80007a78:	f2 ca ff f9 	sub	r10,r9,-7
80007a7c:	ec 0a 0a 4a 	lsr	r10,r6,r10
80007a80:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007a84:	f4 09 00 1a 	add	r10,r10,r9<<0x1
80007a88:	91 7a       	st.w	r8[0x1c],r10
80007a8a:	30 09       	mov	r9,0
80007a8c:	91 59       	st.w	r8[0x14],r9
80007a8e:	91 49       	st.w	r8[0x10],r9
80007a90:	6e 19       	ld.w	r9,r7[0x4]
80007a92:	30 1b       	mov	r11,1
80007a94:	f6 0a 09 4b 	lsl	r11,r11,r10
80007a98:	f7 e9 00 0c 	and	r12,r11,r9
80007a9c:	c0 d1       	brne	80007ab6 <mspace_free+0x412>
80007a9e:	f7 e9 10 09 	or	r9,r11,r9
80007aa2:	8f 19       	st.w	r7[0x4],r9
80007aa4:	2b 5a       	sub	r10,-75
80007aa6:	ee 0a 09 28 	st.w	r7[r10<<0x2],r8
80007aaa:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
80007aae:	91 6a       	st.w	r8[0x18],r10
80007ab0:	91 38       	st.w	r8[0xc],r8
80007ab2:	91 28       	st.w	r8[0x8],r8
80007ab4:	d8 22       	popm	r4-r7,pc
80007ab6:	f4 c9 ff b5 	sub	r9,r10,-75
80007aba:	ee 09 03 29 	ld.w	r9,r7[r9<<0x2]
80007abe:	59 fa       	cp.w	r10,31
80007ac0:	c0 31       	brne	80007ac6 <mspace_free+0x422>
80007ac2:	30 0a       	mov	r10,0
80007ac4:	c0 48       	rjmp	80007acc <mspace_free+0x428>
80007ac6:	a1 9a       	lsr	r10,0x1
80007ac8:	f4 0a 11 19 	rsub	r10,r10,25
80007acc:	ec 0a 09 4a 	lsl	r10,r6,r10
80007ad0:	72 1b       	ld.w	r11,r9[0x4]
80007ad2:	e0 1b ff fc 	andl	r11,0xfffc
80007ad6:	0c 3b       	cp.w	r11,r6
80007ad8:	c1 90       	breq	80007b0a <mspace_free+0x466>
80007ada:	f4 0c 16 1f 	lsr	r12,r10,0x1f
80007ade:	f8 cb ff fc 	sub	r11,r12,-4
80007ae2:	f2 0b 00 2e 	add	lr,r9,r11<<0x2
80007ae6:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80007aea:	58 0b       	cp.w	r11,0
80007aec:	c0 40       	breq	80007af4 <mspace_free+0x450>
80007aee:	a1 7a       	lsl	r10,0x1
80007af0:	16 99       	mov	r9,r11
80007af2:	ce fb       	rjmp	80007ad0 <mspace_free+0x42c>
80007af4:	6e 4a       	ld.w	r10,r7[0x10]
80007af6:	1c 3a       	cp.w	r10,lr
80007af8:	e0 8b 00 17 	brhi	80007b26 <mspace_free+0x482>
80007afc:	2f cc       	sub	r12,-4
80007afe:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
80007b02:	91 69       	st.w	r8[0x18],r9
80007b04:	91 38       	st.w	r8[0xc],r8
80007b06:	91 28       	st.w	r8[0x8],r8
80007b08:	d8 22       	popm	r4-r7,pc
80007b0a:	72 2a       	ld.w	r10,r9[0x8]
80007b0c:	6e 4b       	ld.w	r11,r7[0x10]
80007b0e:	12 3b       	cp.w	r11,r9
80007b10:	e0 8b 00 0b 	brhi	80007b26 <mspace_free+0x482>
80007b14:	14 3b       	cp.w	r11,r10
80007b16:	e0 8b 00 08 	brhi	80007b26 <mspace_free+0x482>
80007b1a:	95 38       	st.w	r10[0xc],r8
80007b1c:	93 28       	st.w	r9[0x8],r8
80007b1e:	91 2a       	st.w	r8[0x8],r10
80007b20:	91 39       	st.w	r8[0xc],r9
80007b22:	30 09       	mov	r9,0
80007b24:	91 69       	st.w	r8[0x18],r9
80007b26:	d8 22       	popm	r4-r7,pc
80007b28:	80 00       	ld.sh	r0,r0[0x0]
80007b2a:	94 54       	ld.sh	r4,r10[0xa]
80007b2c:	80 00       	ld.sh	r0,r0[0x0]
80007b2e:	73 18       	ld.w	r8,r9[0x44]

80007b30 <tmalloc_small>:
  }
  return 0;
}

/* allocate a small request from the best fitting chunk in a treebin */
static void* tmalloc_small(mstate m, size_t nb) {
80007b30:	eb cd 40 f8 	pushm	r3-r7,lr
  tchunkptr t, v;
  size_t rsize;
  bindex_t i;
  binmap_t leastbit = least_bit(m->treemap);
80007b34:	78 18       	ld.w	r8,r12[0x4]
  compute_bit2idx(leastbit, i);
80007b36:	f0 09 11 00 	rsub	r9,r8,0
80007b3a:	10 69       	and	r9,r8
80007b3c:	20 19       	sub	r9,1
80007b3e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007b42:	e2 1a 00 10 	andl	r10,0x10,COH
80007b46:	f2 0a 0a 49 	lsr	r9,r9,r10
80007b4a:	f2 08 16 05 	lsr	r8,r9,0x5
80007b4e:	e2 18 00 08 	andl	r8,0x8,COH
80007b52:	f0 0a 00 0e 	add	lr,r8,r10
80007b56:	f2 08 0a 49 	lsr	r9,r9,r8
80007b5a:	f2 0a 16 02 	lsr	r10,r9,0x2
80007b5e:	e2 1a 00 04 	andl	r10,0x4,COH
80007b62:	14 0e       	add	lr,r10
80007b64:	f2 0a 0a 49 	lsr	r9,r9,r10
80007b68:	f2 0a 16 01 	lsr	r10,r9,0x1
80007b6c:	e2 1a 00 02 	andl	r10,0x2,COH
80007b70:	14 0e       	add	lr,r10
80007b72:	f2 0a 0a 49 	lsr	r9,r9,r10
80007b76:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1

  v = t = *treebin_at(m, i);
80007b7a:	f2 08 0a 49 	lsr	r9,r9,r8
80007b7e:	1c 08       	add	r8,lr
80007b80:	12 08       	add	r8,r9
80007b82:	2b 58       	sub	r8,-75
80007b84:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
  rsize = chunksize(t) - nb;
80007b88:	70 1e       	ld.w	lr,r8[0x4]
80007b8a:	e0 1e ff fc 	andl	lr,0xfffc
80007b8e:	16 1e       	sub	lr,r11
80007b90:	10 9a       	mov	r10,r8

  while ((t = leftmost_child(t)) != 0) {
80007b92:	c0 b8       	rjmp	80007ba8 <tmalloc_small+0x78>
80007b94:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80007b96:	70 19       	ld.w	r9,r8[0x4]
80007b98:	e0 19 ff fc 	andl	r9,0xfffc
80007b9c:	16 19       	sub	r9,r11
    if (trem < rsize) {
80007b9e:	12 3e       	cp.w	lr,r9
80007ba0:	f2 0e 17 b0 	movhi	lr,r9
80007ba4:	f0 0a 17 b0 	movhi	r10,r8
  compute_bit2idx(leastbit, i);

  v = t = *treebin_at(m, i);
  rsize = chunksize(t) - nb;

  while ((t = leftmost_child(t)) != 0) {
80007ba8:	70 49       	ld.w	r9,r8[0x10]
80007baa:	58 09       	cp.w	r9,0
80007bac:	cf 41       	brne	80007b94 <tmalloc_small+0x64>
80007bae:	70 58       	ld.w	r8,r8[0x14]
80007bb0:	58 08       	cp.w	r8,0
80007bb2:	cf 21       	brne	80007b96 <tmalloc_small+0x66>
      rsize = trem;
      v = t;
    }
  }

  if (RTCHECK(ok_address(m, v))) {
80007bb4:	78 43       	ld.w	r3,r12[0x10]
80007bb6:	14 33       	cp.w	r3,r10
80007bb8:	e0 8b 00 a6 	brhi	80007d04 <tmalloc_small+0x1d4>
    mchunkptr r = chunk_plus_offset(v, nb);
80007bbc:	14 94       	mov	r4,r10
80007bbe:	f4 0b 00 05 	add	r5,r10,r11
    assert(chunksize(v) == rsize + nb);
    if (RTCHECK(ok_next(v, r))) {
80007bc2:	0a 3a       	cp.w	r10,r5
80007bc4:	e0 82 00 a0 	brhs	80007d04 <tmalloc_small+0x1d4>
      unlink_large_chunk(m, v);
80007bc8:	74 66       	ld.w	r6,r10[0x18]
80007bca:	74 37       	ld.w	r7,r10[0xc]
80007bcc:	14 37       	cp.w	r7,r10
80007bce:	c0 c0       	breq	80007be6 <tmalloc_small+0xb6>
80007bd0:	74 28       	ld.w	r8,r10[0x8]
80007bd2:	10 33       	cp.w	r3,r8
80007bd4:	ee 08 17 b0 	movhi	r8,r7
80007bd8:	f1 f7 8a 03 	st.wls	r8[0xc],r7
80007bdc:	ef f8 8a 02 	st.wls	r7[0x8],r8
80007be0:	ee 08 17 80 	movls	r8,r7
80007be4:	c1 c8       	rjmp	80007c1c <tmalloc_small+0xec>
80007be6:	6e 58       	ld.w	r8,r7[0x14]
80007be8:	58 08       	cp.w	r8,0
80007bea:	c0 30       	breq	80007bf0 <tmalloc_small+0xc0>
80007bec:	2e c7       	sub	r7,-20
80007bee:	c0 98       	rjmp	80007c00 <tmalloc_small+0xd0>
80007bf0:	6e 48       	ld.w	r8,r7[0x10]
80007bf2:	58 08       	cp.w	r8,0
80007bf4:	c1 40       	breq	80007c1c <tmalloc_small+0xec>
80007bf6:	2f 07       	sub	r7,-16
80007bf8:	c0 48       	rjmp	80007c00 <tmalloc_small+0xd0>
80007bfa:	f0 c7 ff ec 	sub	r7,r8,-20
80007bfe:	12 98       	mov	r8,r9
80007c00:	70 59       	ld.w	r9,r8[0x14]
80007c02:	58 09       	cp.w	r9,0
80007c04:	cf b1       	brne	80007bfa <tmalloc_small+0xca>
80007c06:	70 49       	ld.w	r9,r8[0x10]
80007c08:	58 09       	cp.w	r9,0
80007c0a:	c0 40       	breq	80007c12 <tmalloc_small+0xe2>
80007c0c:	f0 c7 ff f0 	sub	r7,r8,-16
80007c10:	cf 7b       	rjmp	80007bfe <tmalloc_small+0xce>
80007c12:	0e 33       	cp.w	r3,r7
80007c14:	f9 b9 08 00 	movls	r9,0
80007c18:	ef f9 8a 00 	st.wls	r7[0x0],r9
80007c1c:	58 06       	cp.w	r6,0
80007c1e:	c3 a0       	breq	80007c92 <tmalloc_small+0x162>
80007c20:	74 79       	ld.w	r9,r10[0x1c]
80007c22:	f2 c7 ff b5 	sub	r7,r9,-75
80007c26:	f8 07 03 27 	ld.w	r7,r12[r7<<0x2]
80007c2a:	14 37       	cp.w	r7,r10
80007c2c:	c1 01       	brne	80007c4c <tmalloc_small+0x11c>
80007c2e:	2b 59       	sub	r9,-75
80007c30:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80007c34:	58 08       	cp.w	r8,0
80007c36:	c1 71       	brne	80007c64 <tmalloc_small+0x134>
80007c38:	6e 78       	ld.w	r8,r7[0x1c]
80007c3a:	30 19       	mov	r9,1
80007c3c:	f2 08 09 48 	lsl	r8,r9,r8
80007c40:	5c d8       	com	r8
80007c42:	78 19       	ld.w	r9,r12[0x4]
80007c44:	f3 e8 00 08 	and	r8,r9,r8
80007c48:	99 18       	st.w	r12[0x4],r8
80007c4a:	c2 48       	rjmp	80007c92 <tmalloc_small+0x162>
80007c4c:	78 49       	ld.w	r9,r12[0x10]
80007c4e:	0c 39       	cp.w	r9,r6
80007c50:	e0 8b 00 08 	brhi	80007c60 <tmalloc_small+0x130>
80007c54:	6c 49       	ld.w	r9,r6[0x10]
80007c56:	14 39       	cp.w	r9,r10
80007c58:	ed f8 0a 04 	st.weq	r6[0x10],r8
80007c5c:	ed f8 1a 05 	st.wne	r6[0x14],r8
80007c60:	58 08       	cp.w	r8,0
80007c62:	c1 80       	breq	80007c92 <tmalloc_small+0x162>
80007c64:	78 49       	ld.w	r9,r12[0x10]
80007c66:	10 39       	cp.w	r9,r8
80007c68:	e0 8b 00 15 	brhi	80007c92 <tmalloc_small+0x162>
80007c6c:	91 66       	st.w	r8[0x18],r6
80007c6e:	74 49       	ld.w	r9,r10[0x10]
80007c70:	58 09       	cp.w	r9,0
80007c72:	c0 70       	breq	80007c80 <tmalloc_small+0x150>
80007c74:	78 47       	ld.w	r7,r12[0x10]
80007c76:	12 37       	cp.w	r7,r9
80007c78:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80007c7c:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80007c80:	74 59       	ld.w	r9,r10[0x14]
80007c82:	58 09       	cp.w	r9,0
80007c84:	c0 70       	breq	80007c92 <tmalloc_small+0x162>
80007c86:	78 47       	ld.w	r7,r12[0x10]
80007c88:	12 37       	cp.w	r7,r9
80007c8a:	f1 f9 8a 05 	st.wls	r8[0x14],r9
80007c8e:	f3 f8 8a 06 	st.wls	r9[0x18],r8
      if (rsize < MIN_CHUNK_SIZE)
80007c92:	58 fe       	cp.w	lr,15
80007c94:	e0 8b 00 0d 	brhi	80007cae <tmalloc_small+0x17e>
        set_inuse_and_pinuse(m, v, (rsize + nb));
80007c98:	fc 0b 00 0b 	add	r11,lr,r11
80007c9c:	16 98       	mov	r8,r11
80007c9e:	e8 18 00 03 	orl	r8,0x3
80007ca2:	95 18       	st.w	r10[0x4],r8
80007ca4:	16 04       	add	r4,r11
80007ca6:	68 18       	ld.w	r8,r4[0x4]
80007ca8:	a1 a8       	sbr	r8,0x0
80007caa:	89 18       	st.w	r4[0x4],r8
80007cac:	c2 88       	rjmp	80007cfc <tmalloc_small+0x1cc>
      else {
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
80007cae:	e8 1b 00 03 	orl	r11,0x3
80007cb2:	95 1b       	st.w	r10[0x4],r11
        set_size_and_pinuse_of_free_chunk(r, rsize);
80007cb4:	1c 98       	mov	r8,lr
80007cb6:	a1 a8       	sbr	r8,0x0
80007cb8:	8b 18       	st.w	r5[0x4],r8
80007cba:	ea 0e 09 0e 	st.w	r5[lr],lr
        replace_dv(m, r, rsize);
80007cbe:	78 28       	ld.w	r8,r12[0x8]
80007cc0:	58 08       	cp.w	r8,0
80007cc2:	c1 b0       	breq	80007cf8 <tmalloc_small+0x1c8>
80007cc4:	78 59       	ld.w	r9,r12[0x14]
80007cc6:	a3 98       	lsr	r8,0x3
80007cc8:	f8 cb ff dc 	sub	r11,r12,-36
80007ccc:	f6 08 00 3b 	add	r11,r11,r8<<0x3
80007cd0:	78 07       	ld.w	r7,r12[0x0]
80007cd2:	30 16       	mov	r6,1
80007cd4:	ec 08 09 48 	lsl	r8,r6,r8
80007cd8:	f1 e7 00 06 	and	r6,r8,r7
80007cdc:	c0 51       	brne	80007ce6 <tmalloc_small+0x1b6>
80007cde:	0e 48       	or	r8,r7
80007ce0:	99 08       	st.w	r12[0x0],r8
80007ce2:	16 98       	mov	r8,r11
80007ce4:	c0 68       	rjmp	80007cf0 <tmalloc_small+0x1c0>
80007ce6:	76 28       	ld.w	r8,r11[0x8]
80007ce8:	78 47       	ld.w	r7,r12[0x10]
80007cea:	0e 38       	cp.w	r8,r7
80007cec:	f6 08 17 30 	movlo	r8,r11
80007cf0:	97 29       	st.w	r11[0x8],r9
80007cf2:	91 39       	st.w	r8[0xc],r9
80007cf4:	93 28       	st.w	r9[0x8],r8
80007cf6:	93 3b       	st.w	r9[0xc],r11
80007cf8:	99 2e       	st.w	r12[0x8],lr
80007cfa:	99 55       	st.w	r12[0x14],r5
      }
      return chunk2mem(v);
80007cfc:	f4 cc ff f8 	sub	r12,r10,-8
80007d00:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80007d04:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

80007d08 <tmalloc_large>:
}

/* ---------------------------- malloc support --------------------------- */

/* allocate a large request from the best fitting chunk in a treebin */
static void* tmalloc_large(mstate m, size_t nb) {
80007d08:	eb cd 40 fc 	pushm	r2-r7,lr
  tchunkptr v = 0;
  size_t rsize = -nb; /* Unsigned negation */
80007d0c:	f6 07 11 00 	rsub	r7,r11,0
  tchunkptr t;
  bindex_t idx;
  compute_tree_index(nb, idx);
80007d10:	f6 08 16 08 	lsr	r8,r11,0x8
80007d14:	c0 31       	brne	80007d1a <tmalloc_large+0x12>
80007d16:	30 03       	mov	r3,0
80007d18:	c2 d8       	rjmp	80007d72 <tmalloc_large+0x6a>
80007d1a:	e0 48 ff ff 	cp.w	r8,65535
80007d1e:	e0 88 00 04 	brls	80007d26 <tmalloc_large+0x1e>
80007d22:	31 f3       	mov	r3,31
80007d24:	c2 78       	rjmp	80007d72 <tmalloc_large+0x6a>
80007d26:	f0 ce 01 00 	sub	lr,r8,256
80007d2a:	b1 8e       	lsr	lr,0x10
80007d2c:	e2 1e 00 08 	andl	lr,0x8,COH
80007d30:	f0 0e 09 48 	lsl	r8,r8,lr
80007d34:	f0 ca 10 00 	sub	r10,r8,4096
80007d38:	b1 8a       	lsr	r10,0x10
80007d3a:	e2 1a 00 04 	andl	r10,0x4,COH
80007d3e:	f0 0a 09 48 	lsl	r8,r8,r10
80007d42:	f0 c9 40 00 	sub	r9,r8,16384
80007d46:	b1 89       	lsr	r9,0x10
80007d48:	e2 19 00 02 	andl	r9,0x2,COH
80007d4c:	f0 09 09 48 	lsl	r8,r8,r9
80007d50:	af 98       	lsr	r8,0xf
80007d52:	fc 0e 11 0e 	rsub	lr,lr,14
80007d56:	fc 0a 01 0a 	sub	r10,lr,r10
80007d5a:	f4 09 01 09 	sub	r9,r10,r9
80007d5e:	f2 08 00 08 	add	r8,r9,r8
80007d62:	f0 c3 ff f9 	sub	r3,r8,-7
80007d66:	f6 03 0a 43 	lsr	r3,r11,r3
80007d6a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007d6e:	e6 08 00 13 	add	r3,r3,r8<<0x1

  if ((t = *treebin_at(m, idx)) != 0) {
80007d72:	e6 c8 ff b5 	sub	r8,r3,-75
80007d76:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80007d7a:	58 08       	cp.w	r8,0
80007d7c:	c0 31       	brne	80007d82 <tmalloc_large+0x7a>
80007d7e:	30 04       	mov	r4,0
80007d80:	c3 88       	rjmp	80007df0 <tmalloc_large+0xe8>
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
80007d82:	59 f3       	cp.w	r3,31
80007d84:	c0 31       	brne	80007d8a <tmalloc_large+0x82>
80007d86:	30 0e       	mov	lr,0
80007d88:	c0 58       	rjmp	80007d92 <tmalloc_large+0x8a>
80007d8a:	e6 0e 16 01 	lsr	lr,r3,0x1
80007d8e:	fc 0e 11 19 	rsub	lr,lr,25
80007d92:	f6 0e 09 4e 	lsl	lr,r11,lr
80007d96:	30 06       	mov	r6,0
80007d98:	0c 94       	mov	r4,r6
        if ((rsize = trem) == 0)
          break;
      }
      rt = t->child[1];
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
      if (rt != 0 && rt != t)
80007d9a:	30 05       	mov	r5,0
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    for (;;) {
      tchunkptr rt;
      size_t trem = chunksize(t) - nb;
80007d9c:	70 19       	ld.w	r9,r8[0x4]
80007d9e:	e0 19 ff fc 	andl	r9,0xfffc
80007da2:	16 19       	sub	r9,r11
      if (trem < rsize) {
80007da4:	12 37       	cp.w	r7,r9
80007da6:	e0 88 00 09 	brls	80007db8 <tmalloc_large+0xb0>
        v = t;
        if ((rsize = trem) == 0)
80007daa:	58 09       	cp.w	r9,0
80007dac:	c0 41       	brne	80007db4 <tmalloc_large+0xac>
80007dae:	12 97       	mov	r7,r9
80007db0:	10 94       	mov	r4,r8
80007db2:	c1 88       	rjmp	80007de2 <tmalloc_large+0xda>
80007db4:	12 97       	mov	r7,r9
80007db6:	10 94       	mov	r4,r8
          break;
      }
      rt = t->child[1];
80007db8:	70 59       	ld.w	r9,r8[0x14]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
80007dba:	fc 0a 16 1f 	lsr	r10,lr,0x1f
80007dbe:	2f ca       	sub	r10,-4
80007dc0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
      if (rt != 0 && rt != t)
80007dc4:	58 09       	cp.w	r9,0
80007dc6:	5f 12       	srne	r2
80007dc8:	10 39       	cp.w	r9,r8
80007dca:	5f 1a       	srne	r10
80007dcc:	e5 ea 00 0a 	and	r10,r2,r10
80007dd0:	ea 0a 18 00 	cp.b	r10,r5
80007dd4:	f2 06 17 10 	movne	r6,r9
        rst = rt;
      if (t == 0) {
80007dd8:	58 08       	cp.w	r8,0
80007dda:	c0 30       	breq	80007de0 <tmalloc_large+0xd8>
        t = rst; /* set t to least subtree holding sizes > nb */
        break;
      }
      sizebits <<= 1;
80007ddc:	a1 7e       	lsl	lr,0x1
    }
80007dde:	cd fb       	rjmp	80007d9c <tmalloc_large+0x94>
80007de0:	0c 98       	mov	r8,r6
  }

  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
80007de2:	58 08       	cp.w	r8,0
80007de4:	5f 0a       	sreq	r10
80007de6:	58 04       	cp.w	r4,0
80007de8:	5f 09       	sreq	r9
80007dea:	f5 e9 00 09 	and	r9,r10,r9
80007dee:	c3 40       	breq	80007e56 <tmalloc_large+0x14e>
    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
80007df0:	30 29       	mov	r9,2
80007df2:	f2 03 09 43 	lsl	r3,r9,r3
80007df6:	e6 09 11 00 	rsub	r9,r3,0
80007dfa:	f3 e3 10 03 	or	r3,r9,r3
80007dfe:	78 19       	ld.w	r9,r12[0x4]
80007e00:	12 63       	and	r3,r9
    if (leftbits != 0) {
80007e02:	c2 a0       	breq	80007e56 <tmalloc_large+0x14e>
      bindex_t i;
      binmap_t leastbit = least_bit(leftbits);
      compute_bit2idx(leastbit, i);
80007e04:	e6 0a 11 00 	rsub	r10,r3,0
80007e08:	06 6a       	and	r10,r3
80007e0a:	20 1a       	sub	r10,1
80007e0c:	f4 09 16 0c 	lsr	r9,r10,0xc
80007e10:	e2 19 00 10 	andl	r9,0x10,COH
80007e14:	f4 09 0a 4a 	lsr	r10,r10,r9
80007e18:	f4 08 16 05 	lsr	r8,r10,0x5
80007e1c:	e2 18 00 08 	andl	r8,0x8,COH
80007e20:	f0 09 00 0e 	add	lr,r8,r9
80007e24:	f4 08 0a 4a 	lsr	r10,r10,r8
80007e28:	f4 08 16 02 	lsr	r8,r10,0x2
80007e2c:	e2 18 00 04 	andl	r8,0x4,COH
80007e30:	10 0e       	add	lr,r8
80007e32:	f4 08 0a 4a 	lsr	r10,r10,r8
80007e36:	f4 09 16 01 	lsr	r9,r10,0x1
80007e3a:	e2 19 00 02 	andl	r9,0x2,COH
80007e3e:	12 0e       	add	lr,r9
80007e40:	f4 09 0a 49 	lsr	r9,r10,r9
80007e44:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1
      t = *treebin_at(m, i);
80007e48:	f2 08 0a 49 	lsr	r9,r9,r8
80007e4c:	1c 08       	add	r8,lr
80007e4e:	12 08       	add	r8,r9
80007e50:	2b 58       	sub	r8,-75
80007e52:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80007e56:	58 08       	cp.w	r8,0
80007e58:	c0 31       	brne	80007e5e <tmalloc_large+0x156>
80007e5a:	c1 18       	rjmp	80007e7c <tmalloc_large+0x174>
80007e5c:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80007e5e:	70 19       	ld.w	r9,r8[0x4]
80007e60:	e0 19 ff fc 	andl	r9,0xfffc
80007e64:	16 19       	sub	r9,r11
    if (trem < rsize) {
80007e66:	0e 39       	cp.w	r9,r7
80007e68:	f2 07 17 30 	movlo	r7,r9
80007e6c:	f0 04 17 30 	movlo	r4,r8
      rsize = trem;
      v = t;
    }
    t = leftmost_child(t);
80007e70:	70 49       	ld.w	r9,r8[0x10]
80007e72:	58 09       	cp.w	r9,0
80007e74:	cf 41       	brne	80007e5c <tmalloc_large+0x154>
80007e76:	70 58       	ld.w	r8,r8[0x14]
      compute_bit2idx(leastbit, i);
      t = *treebin_at(m, i);
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80007e78:	58 08       	cp.w	r8,0
80007e7a:	cf 21       	brne	80007e5e <tmalloc_large+0x156>
    }
    t = leftmost_child(t);
  }

  /*  If dv is a better fit, return 0 so malloc will use it */
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
80007e7c:	58 04       	cp.w	r4,0
80007e7e:	e0 80 01 2f 	breq	800080dc <tmalloc_large+0x3d4>
80007e82:	78 28       	ld.w	r8,r12[0x8]
80007e84:	16 18       	sub	r8,r11
80007e86:	0e 38       	cp.w	r8,r7
80007e88:	e0 88 01 2a 	brls	800080dc <tmalloc_large+0x3d4>
    if (RTCHECK(ok_address(m, v))) { /* split */
80007e8c:	78 45       	ld.w	r5,r12[0x10]
80007e8e:	08 35       	cp.w	r5,r4
80007e90:	e0 8b 01 26 	brhi	800080dc <tmalloc_large+0x3d4>
      mchunkptr r = chunk_plus_offset(v, nb);
80007e94:	08 93       	mov	r3,r4
80007e96:	e8 0b 00 06 	add	r6,r4,r11
      assert(chunksize(v) == rsize + nb);
      if (RTCHECK(ok_next(v, r))) {
80007e9a:	0c 34       	cp.w	r4,r6
80007e9c:	e0 82 01 20 	brhs	800080dc <tmalloc_large+0x3d4>
        unlink_large_chunk(m, v);
80007ea0:	68 6e       	ld.w	lr,r4[0x18]
80007ea2:	68 3a       	ld.w	r10,r4[0xc]
80007ea4:	08 3a       	cp.w	r10,r4
80007ea6:	c0 c0       	breq	80007ebe <tmalloc_large+0x1b6>
80007ea8:	68 28       	ld.w	r8,r4[0x8]
80007eaa:	10 35       	cp.w	r5,r8
80007eac:	f4 08 17 b0 	movhi	r8,r10
80007eb0:	f1 fa 8a 03 	st.wls	r8[0xc],r10
80007eb4:	f5 f8 8a 02 	st.wls	r10[0x8],r8
80007eb8:	f4 08 17 80 	movls	r8,r10
80007ebc:	c1 c8       	rjmp	80007ef4 <tmalloc_large+0x1ec>
80007ebe:	74 58       	ld.w	r8,r10[0x14]
80007ec0:	58 08       	cp.w	r8,0
80007ec2:	c0 30       	breq	80007ec8 <tmalloc_large+0x1c0>
80007ec4:	2e ca       	sub	r10,-20
80007ec6:	c0 98       	rjmp	80007ed8 <tmalloc_large+0x1d0>
80007ec8:	74 48       	ld.w	r8,r10[0x10]
80007eca:	58 08       	cp.w	r8,0
80007ecc:	c1 40       	breq	80007ef4 <tmalloc_large+0x1ec>
80007ece:	2f 0a       	sub	r10,-16
80007ed0:	c0 48       	rjmp	80007ed8 <tmalloc_large+0x1d0>
80007ed2:	f0 ca ff ec 	sub	r10,r8,-20
80007ed6:	12 98       	mov	r8,r9
80007ed8:	70 59       	ld.w	r9,r8[0x14]
80007eda:	58 09       	cp.w	r9,0
80007edc:	cf b1       	brne	80007ed2 <tmalloc_large+0x1ca>
80007ede:	70 49       	ld.w	r9,r8[0x10]
80007ee0:	58 09       	cp.w	r9,0
80007ee2:	c0 40       	breq	80007eea <tmalloc_large+0x1e2>
80007ee4:	f0 ca ff f0 	sub	r10,r8,-16
80007ee8:	cf 7b       	rjmp	80007ed6 <tmalloc_large+0x1ce>
80007eea:	14 35       	cp.w	r5,r10
80007eec:	f9 b9 08 00 	movls	r9,0
80007ef0:	f5 f9 8a 00 	st.wls	r10[0x0],r9
80007ef4:	58 0e       	cp.w	lr,0
80007ef6:	c3 a0       	breq	80007f6a <tmalloc_large+0x262>
80007ef8:	68 7a       	ld.w	r10,r4[0x1c]
80007efa:	f4 c9 ff b5 	sub	r9,r10,-75
80007efe:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
80007f02:	08 39       	cp.w	r9,r4
80007f04:	c1 01       	brne	80007f24 <tmalloc_large+0x21c>
80007f06:	2b 5a       	sub	r10,-75
80007f08:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80007f0c:	58 08       	cp.w	r8,0
80007f0e:	c1 71       	brne	80007f3c <tmalloc_large+0x234>
80007f10:	72 78       	ld.w	r8,r9[0x1c]
80007f12:	30 19       	mov	r9,1
80007f14:	f2 08 09 48 	lsl	r8,r9,r8
80007f18:	5c d8       	com	r8
80007f1a:	78 19       	ld.w	r9,r12[0x4]
80007f1c:	f3 e8 00 08 	and	r8,r9,r8
80007f20:	99 18       	st.w	r12[0x4],r8
80007f22:	c2 48       	rjmp	80007f6a <tmalloc_large+0x262>
80007f24:	78 49       	ld.w	r9,r12[0x10]
80007f26:	1c 39       	cp.w	r9,lr
80007f28:	e0 8b 00 08 	brhi	80007f38 <tmalloc_large+0x230>
80007f2c:	7c 49       	ld.w	r9,lr[0x10]
80007f2e:	08 39       	cp.w	r9,r4
80007f30:	fd f8 0a 04 	st.weq	lr[0x10],r8
80007f34:	fd f8 1a 05 	st.wne	lr[0x14],r8
80007f38:	58 08       	cp.w	r8,0
80007f3a:	c1 80       	breq	80007f6a <tmalloc_large+0x262>
80007f3c:	78 49       	ld.w	r9,r12[0x10]
80007f3e:	10 39       	cp.w	r9,r8
80007f40:	e0 8b 00 15 	brhi	80007f6a <tmalloc_large+0x262>
80007f44:	91 6e       	st.w	r8[0x18],lr
80007f46:	68 49       	ld.w	r9,r4[0x10]
80007f48:	58 09       	cp.w	r9,0
80007f4a:	c0 70       	breq	80007f58 <tmalloc_large+0x250>
80007f4c:	78 4a       	ld.w	r10,r12[0x10]
80007f4e:	12 3a       	cp.w	r10,r9
80007f50:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80007f54:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80007f58:	68 59       	ld.w	r9,r4[0x14]
80007f5a:	58 09       	cp.w	r9,0
80007f5c:	c0 70       	breq	80007f6a <tmalloc_large+0x262>
80007f5e:	78 4a       	ld.w	r10,r12[0x10]
80007f60:	12 3a       	cp.w	r10,r9
80007f62:	f1 f9 8a 05 	st.wls	r8[0x14],r9
80007f66:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        if (rsize < MIN_CHUNK_SIZE)
80007f6a:	58 f7       	cp.w	r7,15
80007f6c:	e0 8b 00 0d 	brhi	80007f86 <tmalloc_large+0x27e>
          set_inuse_and_pinuse(m, v, (rsize + nb));
80007f70:	ee 0b 00 0b 	add	r11,r7,r11
80007f74:	16 98       	mov	r8,r11
80007f76:	e8 18 00 03 	orl	r8,0x3
80007f7a:	89 18       	st.w	r4[0x4],r8
80007f7c:	16 03       	add	r3,r11
80007f7e:	66 18       	ld.w	r8,r3[0x4]
80007f80:	a1 a8       	sbr	r8,0x0
80007f82:	87 18       	st.w	r3[0x4],r8
80007f84:	ca 88       	rjmp	800080d4 <tmalloc_large+0x3cc>
        else {
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
80007f86:	e8 1b 00 03 	orl	r11,0x3
80007f8a:	89 1b       	st.w	r4[0x4],r11
          set_size_and_pinuse_of_free_chunk(r, rsize);
80007f8c:	0e 98       	mov	r8,r7
80007f8e:	a1 a8       	sbr	r8,0x0
80007f90:	8d 18       	st.w	r6[0x4],r8
80007f92:	ec 07 09 07 	st.w	r6[r7],r7
          insert_chunk(m, r, rsize);
80007f96:	ee 08 16 03 	lsr	r8,r7,0x3
80007f9a:	59 f8       	cp.w	r8,31
80007f9c:	e0 8b 00 1b 	brhi	80007fd2 <tmalloc_large+0x2ca>
80007fa0:	f8 c9 ff dc 	sub	r9,r12,-36
80007fa4:	f2 08 00 39 	add	r9,r9,r8<<0x3
80007fa8:	78 0a       	ld.w	r10,r12[0x0]
80007faa:	30 1b       	mov	r11,1
80007fac:	f6 08 09 48 	lsl	r8,r11,r8
80007fb0:	f1 ea 00 0b 	and	r11,r8,r10
80007fb4:	c0 51       	brne	80007fbe <tmalloc_large+0x2b6>
80007fb6:	14 48       	or	r8,r10
80007fb8:	99 08       	st.w	r12[0x0],r8
80007fba:	12 98       	mov	r8,r9
80007fbc:	c0 68       	rjmp	80007fc8 <tmalloc_large+0x2c0>
80007fbe:	72 28       	ld.w	r8,r9[0x8]
80007fc0:	78 4a       	ld.w	r10,r12[0x10]
80007fc2:	14 38       	cp.w	r8,r10
80007fc4:	f2 08 17 30 	movlo	r8,r9
80007fc8:	93 26       	st.w	r9[0x8],r6
80007fca:	91 36       	st.w	r8[0xc],r6
80007fcc:	8d 28       	st.w	r6[0x8],r8
80007fce:	8d 39       	st.w	r6[0xc],r9
80007fd0:	c8 28       	rjmp	800080d4 <tmalloc_large+0x3cc>
80007fd2:	0c 99       	mov	r9,r6
80007fd4:	ee 08 16 08 	lsr	r8,r7,0x8
80007fd8:	c0 31       	brne	80007fde <tmalloc_large+0x2d6>
80007fda:	30 0a       	mov	r10,0
80007fdc:	c2 d8       	rjmp	80008036 <tmalloc_large+0x32e>
80007fde:	e0 48 ff ff 	cp.w	r8,65535
80007fe2:	e0 88 00 04 	brls	80007fea <tmalloc_large+0x2e2>
80007fe6:	31 fa       	mov	r10,31
80007fe8:	c2 78       	rjmp	80008036 <tmalloc_large+0x32e>
80007fea:	f0 ce 01 00 	sub	lr,r8,256
80007fee:	b1 8e       	lsr	lr,0x10
80007ff0:	e2 1e 00 08 	andl	lr,0x8,COH
80007ff4:	f0 0e 09 48 	lsl	r8,r8,lr
80007ff8:	f0 cb 10 00 	sub	r11,r8,4096
80007ffc:	b1 8b       	lsr	r11,0x10
80007ffe:	e2 1b 00 04 	andl	r11,0x4,COH
80008002:	f0 0b 09 48 	lsl	r8,r8,r11
80008006:	f0 ca 40 00 	sub	r10,r8,16384
8000800a:	b1 8a       	lsr	r10,0x10
8000800c:	e2 1a 00 02 	andl	r10,0x2,COH
80008010:	f0 0a 09 48 	lsl	r8,r8,r10
80008014:	af 98       	lsr	r8,0xf
80008016:	fc 0e 11 0e 	rsub	lr,lr,14
8000801a:	fc 0b 01 0b 	sub	r11,lr,r11
8000801e:	f6 0a 01 0a 	sub	r10,r11,r10
80008022:	f4 08 00 08 	add	r8,r10,r8
80008026:	f0 ca ff f9 	sub	r10,r8,-7
8000802a:	ee 0a 0a 4a 	lsr	r10,r7,r10
8000802e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008032:	f4 08 00 1a 	add	r10,r10,r8<<0x1
80008036:	93 7a       	st.w	r9[0x1c],r10
80008038:	30 08       	mov	r8,0
8000803a:	93 58       	st.w	r9[0x14],r8
8000803c:	93 48       	st.w	r9[0x10],r8
8000803e:	78 18       	ld.w	r8,r12[0x4]
80008040:	30 1b       	mov	r11,1
80008042:	f6 0a 09 4b 	lsl	r11,r11,r10
80008046:	f7 e8 00 0e 	and	lr,r11,r8
8000804a:	c0 d1       	brne	80008064 <tmalloc_large+0x35c>
8000804c:	f7 e8 10 08 	or	r8,r11,r8
80008050:	99 18       	st.w	r12[0x4],r8
80008052:	2b 5a       	sub	r10,-75
80008054:	f8 0a 09 29 	st.w	r12[r10<<0x2],r9
80008058:	f8 0a 00 2a 	add	r10,r12,r10<<0x2
8000805c:	93 6a       	st.w	r9[0x18],r10
8000805e:	93 39       	st.w	r9[0xc],r9
80008060:	93 29       	st.w	r9[0x8],r9
80008062:	c3 98       	rjmp	800080d4 <tmalloc_large+0x3cc>
80008064:	f4 c8 ff b5 	sub	r8,r10,-75
80008068:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000806c:	59 fa       	cp.w	r10,31
8000806e:	c0 31       	brne	80008074 <tmalloc_large+0x36c>
80008070:	30 0b       	mov	r11,0
80008072:	c0 48       	rjmp	8000807a <tmalloc_large+0x372>
80008074:	a1 9a       	lsr	r10,0x1
80008076:	f4 0b 11 19 	rsub	r11,r10,25
8000807a:	ee 0b 09 4b 	lsl	r11,r7,r11
8000807e:	70 1a       	ld.w	r10,r8[0x4]
80008080:	e0 1a ff fc 	andl	r10,0xfffc
80008084:	0e 3a       	cp.w	r10,r7
80008086:	c1 90       	breq	800080b8 <tmalloc_large+0x3b0>
80008088:	f6 0e 16 1f 	lsr	lr,r11,0x1f
8000808c:	fc ca ff fc 	sub	r10,lr,-4
80008090:	f0 0a 00 26 	add	r6,r8,r10<<0x2
80008094:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008098:	58 0a       	cp.w	r10,0
8000809a:	c0 40       	breq	800080a2 <tmalloc_large+0x39a>
8000809c:	a1 7b       	lsl	r11,0x1
8000809e:	14 98       	mov	r8,r10
800080a0:	ce fb       	rjmp	8000807e <tmalloc_large+0x376>
800080a2:	78 4a       	ld.w	r10,r12[0x10]
800080a4:	0c 3a       	cp.w	r10,r6
800080a6:	e0 8b 00 17 	brhi	800080d4 <tmalloc_large+0x3cc>
800080aa:	2f ce       	sub	lr,-4
800080ac:	f0 0e 09 29 	st.w	r8[lr<<0x2],r9
800080b0:	93 68       	st.w	r9[0x18],r8
800080b2:	93 39       	st.w	r9[0xc],r9
800080b4:	93 29       	st.w	r9[0x8],r9
800080b6:	c0 f8       	rjmp	800080d4 <tmalloc_large+0x3cc>
800080b8:	70 2a       	ld.w	r10,r8[0x8]
800080ba:	78 4b       	ld.w	r11,r12[0x10]
800080bc:	10 3b       	cp.w	r11,r8
800080be:	e0 8b 00 0b 	brhi	800080d4 <tmalloc_large+0x3cc>
800080c2:	14 3b       	cp.w	r11,r10
800080c4:	e0 8b 00 08 	brhi	800080d4 <tmalloc_large+0x3cc>
800080c8:	95 39       	st.w	r10[0xc],r9
800080ca:	91 29       	st.w	r8[0x8],r9
800080cc:	93 2a       	st.w	r9[0x8],r10
800080ce:	93 38       	st.w	r9[0xc],r8
800080d0:	30 08       	mov	r8,0
800080d2:	93 68       	st.w	r9[0x18],r8
        }
        return chunk2mem(v);
800080d4:	e8 cc ff f8 	sub	r12,r4,-8
800080d8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800080dc:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

800080e0 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
800080e0:	eb cd 40 e0 	pushm	r5-r7,lr
800080e4:	58 0c       	cp.w	r12,0
800080e6:	e0 80 02 7d 	breq	800085e0 <free+0x500>
    mchunkptr p  = mem2chunk(mem);
800080ea:	20 8c       	sub	r12,8
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
800080ec:	fe f8 04 f8 	ld.w	r8,pc[1272]
800080f0:	70 4b       	ld.w	r11,r8[0x10]
800080f2:	18 3b       	cp.w	r11,r12
800080f4:	e0 8b 02 76 	brhi	800085e0 <free+0x500>
800080f8:	78 18       	ld.w	r8,r12[0x4]
800080fa:	10 99       	mov	r9,r8
800080fc:	e2 19 00 02 	andl	r9,0x2,COH
80008100:	e0 80 02 70 	breq	800085e0 <free+0x500>
        size_t psize = chunksize(p);
80008104:	10 97       	mov	r7,r8
80008106:	e0 17 ff fc 	andl	r7,0xfffc
        mchunkptr next = chunk_plus_offset(p, psize);
8000810a:	f8 07 00 0a 	add	r10,r12,r7
        if (!pinuse(p)) {
8000810e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008112:	e0 81 00 cd 	brne	800082ac <free+0x1cc>
          size_t prevsize = p->prev_foot;
80008116:	78 08       	ld.w	r8,r12[0x0]
          if ((prevsize & IS_MMAPPED_BIT) != 0) {
80008118:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
8000811c:	c1 30       	breq	80008142 <free+0x62>
            prevsize &= ~IS_MMAPPED_BIT;
8000811e:	a1 c8       	cbr	r8,0x0
            psize += prevsize + MMAP_FOOT_PAD;
80008120:	10 07       	add	r7,r8
80008122:	2f 07       	sub	r7,-16
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
80008124:	0e 9b       	mov	r11,r7
80008126:	10 1c       	sub	r12,r8
80008128:	f0 1f 01 30 	mcall	800085e8 <free+0x508>
8000812c:	e0 81 02 5a 	brne	800085e0 <free+0x500>
              fm->footprint -= psize;
80008130:	fe f8 04 b4 	ld.w	r8,pc[1204]
80008134:	f0 f9 01 ac 	ld.w	r9,r8[428]
80008138:	0e 19       	sub	r9,r7
8000813a:	f1 49 01 ac 	st.w	r8[428],r9
8000813e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
80008142:	10 1c       	sub	r12,r8
            psize += prevsize;
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
80008144:	18 3b       	cp.w	r11,r12
80008146:	e0 8b 02 4d 	brhi	800085e0 <free+0x500>
              fm->footprint -= psize;
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
            psize += prevsize;
8000814a:	10 07       	add	r7,r8
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
              if (p != fm->dv) {
8000814c:	fe f9 04 98 	ld.w	r9,pc[1176]
80008150:	72 59       	ld.w	r9,r9[0x14]
80008152:	12 3c       	cp.w	r12,r9
80008154:	e0 80 00 9a 	breq	80008288 <free+0x1a8>
                unlink_chunk(fm, p, prevsize);
80008158:	a3 98       	lsr	r8,0x3
8000815a:	59 f8       	cp.w	r8,31
8000815c:	e0 8b 00 24 	brhi	800081a4 <free+0xc4>
80008160:	78 29       	ld.w	r9,r12[0x8]
80008162:	78 3e       	ld.w	lr,r12[0xc]
80008164:	1c 39       	cp.w	r9,lr
80008166:	c0 d1       	brne	80008180 <free+0xa0>
80008168:	fe f9 04 7c 	ld.w	r9,pc[1148]
8000816c:	30 1b       	mov	r11,1
8000816e:	f6 08 09 48 	lsl	r8,r11,r8
80008172:	f0 0b 11 ff 	rsub	r11,r8,-1
80008176:	72 08       	ld.w	r8,r9[0x0]
80008178:	f7 e8 00 08 	and	r8,r11,r8
8000817c:	93 08       	st.w	r9[0x0],r8
8000817e:	c9 78       	rjmp	800082ac <free+0x1cc>
80008180:	fe f6 04 64 	ld.w	r6,pc[1124]
80008184:	2d c6       	sub	r6,-36
80008186:	ec 08 00 38 	add	r8,r6,r8<<0x3
8000818a:	10 39       	cp.w	r9,r8
8000818c:	c0 40       	breq	80008194 <free+0xb4>
8000818e:	12 3b       	cp.w	r11,r9
80008190:	e0 8b 00 8e 	brhi	800082ac <free+0x1cc>
80008194:	10 3e       	cp.w	lr,r8
80008196:	c0 40       	breq	8000819e <free+0xbe>
80008198:	1c 3b       	cp.w	r11,lr
8000819a:	e0 8b 00 89 	brhi	800082ac <free+0x1cc>
8000819e:	93 3e       	st.w	r9[0xc],lr
800081a0:	9d 29       	st.w	lr[0x8],r9
800081a2:	c8 58       	rjmp	800082ac <free+0x1cc>
800081a4:	18 96       	mov	r6,r12
800081a6:	78 65       	ld.w	r5,r12[0x18]
800081a8:	78 3e       	ld.w	lr,r12[0xc]
800081aa:	18 3e       	cp.w	lr,r12
800081ac:	c0 c0       	breq	800081c4 <free+0xe4>
800081ae:	78 28       	ld.w	r8,r12[0x8]
800081b0:	10 3b       	cp.w	r11,r8
800081b2:	fc 08 17 b0 	movhi	r8,lr
800081b6:	f1 fe 8a 03 	st.wls	r8[0xc],lr
800081ba:	fd f8 8a 02 	st.wls	lr[0x8],r8
800081be:	fc 08 17 80 	movls	r8,lr
800081c2:	c1 c8       	rjmp	800081fa <free+0x11a>
800081c4:	7c 58       	ld.w	r8,lr[0x14]
800081c6:	58 08       	cp.w	r8,0
800081c8:	c0 30       	breq	800081ce <free+0xee>
800081ca:	2e ce       	sub	lr,-20
800081cc:	c0 98       	rjmp	800081de <free+0xfe>
800081ce:	7c 48       	ld.w	r8,lr[0x10]
800081d0:	58 08       	cp.w	r8,0
800081d2:	c1 40       	breq	800081fa <free+0x11a>
800081d4:	2f 0e       	sub	lr,-16
800081d6:	c0 48       	rjmp	800081de <free+0xfe>
800081d8:	f0 ce ff ec 	sub	lr,r8,-20
800081dc:	12 98       	mov	r8,r9
800081de:	70 59       	ld.w	r9,r8[0x14]
800081e0:	58 09       	cp.w	r9,0
800081e2:	cf b1       	brne	800081d8 <free+0xf8>
800081e4:	70 49       	ld.w	r9,r8[0x10]
800081e6:	58 09       	cp.w	r9,0
800081e8:	c0 40       	breq	800081f0 <free+0x110>
800081ea:	f0 ce ff f0 	sub	lr,r8,-16
800081ee:	cf 7b       	rjmp	800081dc <free+0xfc>
800081f0:	1c 3b       	cp.w	r11,lr
800081f2:	f9 b9 08 00 	movls	r9,0
800081f6:	fd f9 8a 00 	st.wls	lr[0x0],r9
800081fa:	58 05       	cp.w	r5,0
800081fc:	c5 80       	breq	800082ac <free+0x1cc>
800081fe:	6c 7b       	ld.w	r11,r6[0x1c]
80008200:	fe f9 03 e4 	ld.w	r9,pc[996]
80008204:	f2 c9 fe d4 	sub	r9,r9,-300
80008208:	f2 0b 00 29 	add	r9,r9,r11<<0x2
8000820c:	72 0b       	ld.w	r11,r9[0x0]
8000820e:	0c 3b       	cp.w	r11,r6
80008210:	c1 01       	brne	80008230 <free+0x150>
80008212:	93 08       	st.w	r9[0x0],r8
80008214:	58 08       	cp.w	r8,0
80008216:	c1 b1       	brne	8000824c <free+0x16c>
80008218:	fe f8 03 cc 	ld.w	r8,pc[972]
8000821c:	76 79       	ld.w	r9,r11[0x1c]
8000821e:	30 1b       	mov	r11,1
80008220:	f6 09 09 4b 	lsl	r11,r11,r9
80008224:	5c db       	com	r11
80008226:	70 19       	ld.w	r9,r8[0x4]
80008228:	f7 e9 00 09 	and	r9,r11,r9
8000822c:	91 19       	st.w	r8[0x4],r9
8000822e:	c3 f8       	rjmp	800082ac <free+0x1cc>
80008230:	fe f9 03 b4 	ld.w	r9,pc[948]
80008234:	72 49       	ld.w	r9,r9[0x10]
80008236:	0a 39       	cp.w	r9,r5
80008238:	e0 8b 00 08 	brhi	80008248 <free+0x168>
8000823c:	6a 49       	ld.w	r9,r5[0x10]
8000823e:	0c 39       	cp.w	r9,r6
80008240:	eb f8 0a 04 	st.weq	r5[0x10],r8
80008244:	eb f8 1a 05 	st.wne	r5[0x14],r8
80008248:	58 08       	cp.w	r8,0
8000824a:	c3 10       	breq	800082ac <free+0x1cc>
8000824c:	fe f9 03 98 	ld.w	r9,pc[920]
80008250:	72 49       	ld.w	r9,r9[0x10]
80008252:	10 39       	cp.w	r9,r8
80008254:	e0 8b 00 2c 	brhi	800082ac <free+0x1cc>
80008258:	91 65       	st.w	r8[0x18],r5
8000825a:	6c 49       	ld.w	r9,r6[0x10]
8000825c:	58 09       	cp.w	r9,0
8000825e:	c0 90       	breq	80008270 <free+0x190>
80008260:	fe fb 03 84 	ld.w	r11,pc[900]
80008264:	76 4b       	ld.w	r11,r11[0x10]
80008266:	12 3b       	cp.w	r11,r9
80008268:	f1 f9 8a 04 	st.wls	r8[0x10],r9
8000826c:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80008270:	6c 59       	ld.w	r9,r6[0x14]
80008272:	58 09       	cp.w	r9,0
80008274:	c1 c0       	breq	800082ac <free+0x1cc>
80008276:	fe fb 03 6e 	ld.w	r11,pc[878]
8000827a:	76 4b       	ld.w	r11,r11[0x10]
8000827c:	12 3b       	cp.w	r11,r9
8000827e:	e0 8b 00 17 	brhi	800082ac <free+0x1cc>
80008282:	91 59       	st.w	r8[0x14],r9
80008284:	93 68       	st.w	r9[0x18],r8
80008286:	c1 38       	rjmp	800082ac <free+0x1cc>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
80008288:	74 18       	ld.w	r8,r10[0x4]
8000828a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000828e:	58 38       	cp.w	r8,3
80008290:	c0 e1       	brne	800082ac <free+0x1cc>
                fm->dvsize = psize;
80008292:	fe f8 03 52 	ld.w	r8,pc[850]
80008296:	91 27       	st.w	r8[0x8],r7
                set_free_with_pinuse(p, psize, next);
80008298:	74 18       	ld.w	r8,r10[0x4]
8000829a:	a1 c8       	cbr	r8,0x0
8000829c:	95 18       	st.w	r10[0x4],r8
8000829e:	0e 98       	mov	r8,r7
800082a0:	a1 a8       	sbr	r8,0x0
800082a2:	99 18       	st.w	r12[0x4],r8
800082a4:	f8 07 09 07 	st.w	r12[r7],r7
                goto postaction;
800082a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
800082ac:	14 3c       	cp.w	r12,r10
800082ae:	e0 82 01 99 	brhs	800085e0 <free+0x500>
800082b2:	74 18       	ld.w	r8,r10[0x4]
800082b4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800082b8:	e0 80 01 94 	breq	800085e0 <free+0x500>
          if (!cinuse(next)) {  /* consolidate forward */
800082bc:	10 99       	mov	r9,r8
800082be:	e2 19 00 02 	andl	r9,0x2,COH
800082c2:	e0 81 00 e3 	brne	80008488 <free+0x3a8>
            if (next == fm->top) {
800082c6:	fe f9 03 1e 	ld.w	r9,pc[798]
800082ca:	72 69       	ld.w	r9,r9[0x18]
800082cc:	14 39       	cp.w	r9,r10
800082ce:	c1 f1       	brne	8000830c <free+0x22c>
              size_t tsize = fm->topsize += psize;
800082d0:	fe f8 03 14 	ld.w	r8,pc[788]
800082d4:	70 39       	ld.w	r9,r8[0xc]
800082d6:	12 07       	add	r7,r9
800082d8:	91 37       	st.w	r8[0xc],r7
              fm->top = p;
800082da:	91 6c       	st.w	r8[0x18],r12
              p->head = tsize | PINUSE_BIT;
800082dc:	0e 99       	mov	r9,r7
800082de:	a1 a9       	sbr	r9,0x0
800082e0:	99 19       	st.w	r12[0x4],r9
              if (p == fm->dv) {
800082e2:	70 58       	ld.w	r8,r8[0x14]
800082e4:	18 38       	cp.w	r8,r12
800082e6:	c0 61       	brne	800082f2 <free+0x212>
                fm->dv = 0;
800082e8:	fe f8 02 fc 	ld.w	r8,pc[764]
800082ec:	30 09       	mov	r9,0
800082ee:	91 59       	st.w	r8[0x14],r9
                fm->dvsize = 0;
800082f0:	91 29       	st.w	r8[0x8],r9
              }
              if (should_trim(fm, tsize))
800082f2:	fe f8 02 f2 	ld.w	r8,pc[754]
800082f6:	70 78       	ld.w	r8,r8[0x1c]
800082f8:	10 37       	cp.w	r7,r8
800082fa:	e0 88 01 73 	brls	800085e0 <free+0x500>
                sys_trim(fm, 0);
800082fe:	30 0b       	mov	r11,0
80008300:	fe fc 02 e4 	ld.w	r12,pc[740]
80008304:	f0 1f 00 ba 	mcall	800085ec <free+0x50c>
80008308:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              goto postaction;
            }
            else if (next == fm->dv) {
8000830c:	fe f9 02 d8 	ld.w	r9,pc[728]
80008310:	72 59       	ld.w	r9,r9[0x14]
80008312:	14 39       	cp.w	r9,r10
80008314:	c0 e1       	brne	80008330 <free+0x250>
              size_t dsize = fm->dvsize += psize;
80008316:	fe f8 02 ce 	ld.w	r8,pc[718]
8000831a:	70 29       	ld.w	r9,r8[0x8]
8000831c:	12 07       	add	r7,r9
8000831e:	91 27       	st.w	r8[0x8],r7
              fm->dv = p;
80008320:	91 5c       	st.w	r8[0x14],r12
              set_size_and_pinuse_of_free_chunk(p, dsize);
80008322:	0e 98       	mov	r8,r7
80008324:	a1 a8       	sbr	r8,0x0
80008326:	99 18       	st.w	r12[0x4],r8
80008328:	f8 07 09 07 	st.w	r12[r7],r7
              goto postaction;
8000832c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            }
            else {
              size_t nsize = chunksize(next);
80008330:	e0 18 ff fc 	andl	r8,0xfffc
              psize += nsize;
80008334:	10 07       	add	r7,r8
              unlink_chunk(fm, next, nsize);
80008336:	a3 98       	lsr	r8,0x3
80008338:	59 f8       	cp.w	r8,31
8000833a:	e0 8b 00 2a 	brhi	8000838e <free+0x2ae>
8000833e:	74 29       	ld.w	r9,r10[0x8]
80008340:	74 3a       	ld.w	r10,r10[0xc]
80008342:	14 39       	cp.w	r9,r10
80008344:	c0 d1       	brne	8000835e <free+0x27e>
80008346:	fe f9 02 9e 	ld.w	r9,pc[670]
8000834a:	30 1a       	mov	r10,1
8000834c:	f4 08 09 48 	lsl	r8,r10,r8
80008350:	f0 0a 11 ff 	rsub	r10,r8,-1
80008354:	72 08       	ld.w	r8,r9[0x0]
80008356:	f5 e8 00 08 	and	r8,r10,r8
8000835a:	93 08       	st.w	r9[0x0],r8
8000835c:	c8 98       	rjmp	8000846e <free+0x38e>
8000835e:	fe fb 02 86 	ld.w	r11,pc[646]
80008362:	2d cb       	sub	r11,-36
80008364:	f6 08 00 38 	add	r8,r11,r8<<0x3
80008368:	10 39       	cp.w	r9,r8
8000836a:	c0 70       	breq	80008378 <free+0x298>
8000836c:	fe fb 02 78 	ld.w	r11,pc[632]
80008370:	76 4b       	ld.w	r11,r11[0x10]
80008372:	12 3b       	cp.w	r11,r9
80008374:	e0 8b 00 7d 	brhi	8000846e <free+0x38e>
80008378:	10 3a       	cp.w	r10,r8
8000837a:	c0 70       	breq	80008388 <free+0x2a8>
8000837c:	fe f8 02 68 	ld.w	r8,pc[616]
80008380:	70 48       	ld.w	r8,r8[0x10]
80008382:	14 38       	cp.w	r8,r10
80008384:	e0 8b 00 75 	brhi	8000846e <free+0x38e>
80008388:	93 3a       	st.w	r9[0xc],r10
8000838a:	95 29       	st.w	r10[0x8],r9
8000838c:	c7 18       	rjmp	8000846e <free+0x38e>
8000838e:	74 6e       	ld.w	lr,r10[0x18]
80008390:	74 3b       	ld.w	r11,r10[0xc]
80008392:	14 3b       	cp.w	r11,r10
80008394:	c0 f0       	breq	800083b2 <free+0x2d2>
80008396:	74 28       	ld.w	r8,r10[0x8]
80008398:	fe f9 02 4c 	ld.w	r9,pc[588]
8000839c:	72 49       	ld.w	r9,r9[0x10]
8000839e:	10 39       	cp.w	r9,r8
800083a0:	f6 08 17 b0 	movhi	r8,r11
800083a4:	f1 fb 8a 03 	st.wls	r8[0xc],r11
800083a8:	f7 f8 8a 02 	st.wls	r11[0x8],r8
800083ac:	f6 08 17 80 	movls	r8,r11
800083b0:	c1 f8       	rjmp	800083ee <free+0x30e>
800083b2:	76 58       	ld.w	r8,r11[0x14]
800083b4:	58 08       	cp.w	r8,0
800083b6:	c0 30       	breq	800083bc <free+0x2dc>
800083b8:	2e cb       	sub	r11,-20
800083ba:	c0 98       	rjmp	800083cc <free+0x2ec>
800083bc:	76 48       	ld.w	r8,r11[0x10]
800083be:	58 08       	cp.w	r8,0
800083c0:	c1 70       	breq	800083ee <free+0x30e>
800083c2:	2f 0b       	sub	r11,-16
800083c4:	c0 48       	rjmp	800083cc <free+0x2ec>
800083c6:	f0 cb ff ec 	sub	r11,r8,-20
800083ca:	12 98       	mov	r8,r9
800083cc:	70 59       	ld.w	r9,r8[0x14]
800083ce:	58 09       	cp.w	r9,0
800083d0:	cf b1       	brne	800083c6 <free+0x2e6>
800083d2:	70 49       	ld.w	r9,r8[0x10]
800083d4:	58 09       	cp.w	r9,0
800083d6:	c0 40       	breq	800083de <free+0x2fe>
800083d8:	f0 cb ff f0 	sub	r11,r8,-16
800083dc:	cf 7b       	rjmp	800083ca <free+0x2ea>
800083de:	fe f9 02 06 	ld.w	r9,pc[518]
800083e2:	72 49       	ld.w	r9,r9[0x10]
800083e4:	16 39       	cp.w	r9,r11
800083e6:	f9 b9 08 00 	movls	r9,0
800083ea:	f7 f9 8a 00 	st.wls	r11[0x0],r9
800083ee:	58 0e       	cp.w	lr,0
800083f0:	c3 f0       	breq	8000846e <free+0x38e>
800083f2:	74 7b       	ld.w	r11,r10[0x1c]
800083f4:	4f c9       	lddpc	r9,800085e4 <free+0x504>
800083f6:	f2 c9 fe d4 	sub	r9,r9,-300
800083fa:	f2 0b 00 29 	add	r9,r9,r11<<0x2
800083fe:	72 0b       	ld.w	r11,r9[0x0]
80008400:	14 3b       	cp.w	r11,r10
80008402:	c0 f1       	brne	80008420 <free+0x340>
80008404:	93 08       	st.w	r9[0x0],r8
80008406:	58 08       	cp.w	r8,0
80008408:	c1 91       	brne	8000843a <free+0x35a>
8000840a:	4f 78       	lddpc	r8,800085e4 <free+0x504>
8000840c:	76 79       	ld.w	r9,r11[0x1c]
8000840e:	30 1a       	mov	r10,1
80008410:	f4 09 09 4a 	lsl	r10,r10,r9
80008414:	5c da       	com	r10
80008416:	70 19       	ld.w	r9,r8[0x4]
80008418:	f5 e9 00 09 	and	r9,r10,r9
8000841c:	91 19       	st.w	r8[0x4],r9
8000841e:	c2 88       	rjmp	8000846e <free+0x38e>
80008420:	4f 19       	lddpc	r9,800085e4 <free+0x504>
80008422:	72 49       	ld.w	r9,r9[0x10]
80008424:	1c 39       	cp.w	r9,lr
80008426:	e0 8b 00 08 	brhi	80008436 <free+0x356>
8000842a:	7c 49       	ld.w	r9,lr[0x10]
8000842c:	14 39       	cp.w	r9,r10
8000842e:	fd f8 0a 04 	st.weq	lr[0x10],r8
80008432:	fd f8 1a 05 	st.wne	lr[0x14],r8
80008436:	58 08       	cp.w	r8,0
80008438:	c1 b0       	breq	8000846e <free+0x38e>
8000843a:	4e b9       	lddpc	r9,800085e4 <free+0x504>
8000843c:	72 49       	ld.w	r9,r9[0x10]
8000843e:	10 39       	cp.w	r9,r8
80008440:	e0 8b 00 17 	brhi	8000846e <free+0x38e>
80008444:	91 6e       	st.w	r8[0x18],lr
80008446:	74 49       	ld.w	r9,r10[0x10]
80008448:	58 09       	cp.w	r9,0
8000844a:	c0 80       	breq	8000845a <free+0x37a>
8000844c:	4e 6b       	lddpc	r11,800085e4 <free+0x504>
8000844e:	76 4b       	ld.w	r11,r11[0x10]
80008450:	12 3b       	cp.w	r11,r9
80008452:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80008456:	f3 f8 8a 06 	st.wls	r9[0x18],r8
8000845a:	74 59       	ld.w	r9,r10[0x14]
8000845c:	58 09       	cp.w	r9,0
8000845e:	c0 80       	breq	8000846e <free+0x38e>
80008460:	4e 1a       	lddpc	r10,800085e4 <free+0x504>
80008462:	74 4a       	ld.w	r10,r10[0x10]
80008464:	12 3a       	cp.w	r10,r9
80008466:	f1 f9 8a 05 	st.wls	r8[0x14],r9
8000846a:	f3 f8 8a 06 	st.wls	r9[0x18],r8
              set_size_and_pinuse_of_free_chunk(p, psize);
8000846e:	0e 98       	mov	r8,r7
80008470:	a1 a8       	sbr	r8,0x0
80008472:	99 18       	st.w	r12[0x4],r8
80008474:	f8 07 09 07 	st.w	r12[r7],r7
              if (p == fm->dv) {
80008478:	4d b8       	lddpc	r8,800085e4 <free+0x504>
8000847a:	70 58       	ld.w	r8,r8[0x14]
8000847c:	18 38       	cp.w	r8,r12
8000847e:	c0 c1       	brne	80008496 <free+0x3b6>
                fm->dvsize = psize;
80008480:	4d 98       	lddpc	r8,800085e4 <free+0x504>
80008482:	91 27       	st.w	r8[0x8],r7
                goto postaction;
80008484:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
80008488:	a1 c8       	cbr	r8,0x0
8000848a:	95 18       	st.w	r10[0x4],r8
8000848c:	0e 98       	mov	r8,r7
8000848e:	a1 a8       	sbr	r8,0x0
80008490:	99 18       	st.w	r12[0x4],r8
80008492:	f8 07 09 07 	st.w	r12[r7],r7
          insert_chunk(fm, p, psize);
80008496:	ee 08 16 03 	lsr	r8,r7,0x3
8000849a:	59 f8       	cp.w	r8,31
8000849c:	e0 8b 00 1f 	brhi	800084da <free+0x3fa>
800084a0:	4d 1a       	lddpc	r10,800085e4 <free+0x504>
800084a2:	f4 c9 ff dc 	sub	r9,r10,-36
800084a6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800084aa:	74 0a       	ld.w	r10,r10[0x0]
800084ac:	30 1b       	mov	r11,1
800084ae:	f6 08 09 48 	lsl	r8,r11,r8
800084b2:	f1 ea 00 0b 	and	r11,r8,r10
800084b6:	c0 61       	brne	800084c2 <free+0x3e2>
800084b8:	14 48       	or	r8,r10
800084ba:	4c bb       	lddpc	r11,800085e4 <free+0x504>
800084bc:	97 08       	st.w	r11[0x0],r8
800084be:	12 98       	mov	r8,r9
800084c0:	c0 78       	rjmp	800084ce <free+0x3ee>
800084c2:	72 28       	ld.w	r8,r9[0x8]
800084c4:	4c 8a       	lddpc	r10,800085e4 <free+0x504>
800084c6:	74 4a       	ld.w	r10,r10[0x10]
800084c8:	14 38       	cp.w	r8,r10
800084ca:	f2 08 17 30 	movlo	r8,r9
800084ce:	93 2c       	st.w	r9[0x8],r12
800084d0:	91 3c       	st.w	r8[0xc],r12
800084d2:	99 28       	st.w	r12[0x8],r8
800084d4:	99 39       	st.w	r12[0xc],r9
800084d6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800084da:	ee 08 16 08 	lsr	r8,r7,0x8
800084de:	c0 31       	brne	800084e4 <free+0x404>
800084e0:	30 09       	mov	r9,0
800084e2:	c2 d8       	rjmp	8000853c <free+0x45c>
800084e4:	e0 48 ff ff 	cp.w	r8,65535
800084e8:	e0 88 00 04 	brls	800084f0 <free+0x410>
800084ec:	31 f9       	mov	r9,31
800084ee:	c2 78       	rjmp	8000853c <free+0x45c>
800084f0:	f0 ce 01 00 	sub	lr,r8,256
800084f4:	b1 8e       	lsr	lr,0x10
800084f6:	e2 1e 00 08 	andl	lr,0x8,COH
800084fa:	f0 0e 09 48 	lsl	r8,r8,lr
800084fe:	f0 cb 10 00 	sub	r11,r8,4096
80008502:	b1 8b       	lsr	r11,0x10
80008504:	e2 1b 00 04 	andl	r11,0x4,COH
80008508:	f0 0b 09 48 	lsl	r8,r8,r11
8000850c:	f0 ca 40 00 	sub	r10,r8,16384
80008510:	b1 8a       	lsr	r10,0x10
80008512:	e2 1a 00 02 	andl	r10,0x2,COH
80008516:	f0 0a 09 48 	lsl	r8,r8,r10
8000851a:	af 98       	lsr	r8,0xf
8000851c:	fc 0e 11 0e 	rsub	lr,lr,14
80008520:	fc 0b 01 0b 	sub	r11,lr,r11
80008524:	f6 0a 01 0a 	sub	r10,r11,r10
80008528:	f4 08 00 08 	add	r8,r10,r8
8000852c:	f0 c9 ff f9 	sub	r9,r8,-7
80008530:	ee 09 0a 49 	lsr	r9,r7,r9
80008534:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80008538:	f2 08 00 19 	add	r9,r9,r8<<0x1
8000853c:	4a a8       	lddpc	r8,800085e4 <free+0x504>
8000853e:	f0 cb fe d4 	sub	r11,r8,-300
80008542:	f6 09 00 2b 	add	r11,r11,r9<<0x2
80008546:	99 79       	st.w	r12[0x1c],r9
80008548:	30 0a       	mov	r10,0
8000854a:	99 5a       	st.w	r12[0x14],r10
8000854c:	99 4a       	st.w	r12[0x10],r10
8000854e:	70 18       	ld.w	r8,r8[0x4]
80008550:	30 1a       	mov	r10,1
80008552:	f4 09 09 4a 	lsl	r10,r10,r9
80008556:	f5 e8 00 0e 	and	lr,r10,r8
8000855a:	c0 b1       	brne	80008570 <free+0x490>
8000855c:	f5 e8 10 08 	or	r8,r10,r8
80008560:	4a 19       	lddpc	r9,800085e4 <free+0x504>
80008562:	93 18       	st.w	r9[0x4],r8
80008564:	97 0c       	st.w	r11[0x0],r12
80008566:	99 6b       	st.w	r12[0x18],r11
80008568:	99 3c       	st.w	r12[0xc],r12
8000856a:	99 2c       	st.w	r12[0x8],r12
8000856c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008570:	76 08       	ld.w	r8,r11[0x0]
80008572:	59 f9       	cp.w	r9,31
80008574:	c0 31       	brne	8000857a <free+0x49a>
80008576:	30 09       	mov	r9,0
80008578:	c0 48       	rjmp	80008580 <free+0x4a0>
8000857a:	a1 99       	lsr	r9,0x1
8000857c:	f2 09 11 19 	rsub	r9,r9,25
80008580:	ee 09 09 49 	lsl	r9,r7,r9
80008584:	70 1a       	ld.w	r10,r8[0x4]
80008586:	e0 1a ff fc 	andl	r10,0xfffc
8000858a:	0e 3a       	cp.w	r10,r7
8000858c:	c1 b0       	breq	800085c2 <free+0x4e2>
8000858e:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80008592:	f6 ca ff fc 	sub	r10,r11,-4
80008596:	f0 0a 00 2e 	add	lr,r8,r10<<0x2
8000859a:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000859e:	58 0a       	cp.w	r10,0
800085a0:	c0 40       	breq	800085a8 <free+0x4c8>
800085a2:	a1 79       	lsl	r9,0x1
800085a4:	14 98       	mov	r8,r10
800085a6:	ce fb       	rjmp	80008584 <free+0x4a4>
800085a8:	48 f9       	lddpc	r9,800085e4 <free+0x504>
800085aa:	72 49       	ld.w	r9,r9[0x10]
800085ac:	1c 39       	cp.w	r9,lr
800085ae:	e0 8b 00 19 	brhi	800085e0 <free+0x500>
800085b2:	2f cb       	sub	r11,-4
800085b4:	f0 0b 09 2c 	st.w	r8[r11<<0x2],r12
800085b8:	99 68       	st.w	r12[0x18],r8
800085ba:	99 3c       	st.w	r12[0xc],r12
800085bc:	99 2c       	st.w	r12[0x8],r12
800085be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800085c2:	70 29       	ld.w	r9,r8[0x8]
800085c4:	48 8a       	lddpc	r10,800085e4 <free+0x504>
800085c6:	74 4a       	ld.w	r10,r10[0x10]
800085c8:	10 3a       	cp.w	r10,r8
800085ca:	e0 8b 00 0b 	brhi	800085e0 <free+0x500>
800085ce:	12 3a       	cp.w	r10,r9
800085d0:	e0 8b 00 08 	brhi	800085e0 <free+0x500>
800085d4:	93 3c       	st.w	r9[0xc],r12
800085d6:	91 2c       	st.w	r8[0x8],r12
800085d8:	99 29       	st.w	r12[0x8],r9
800085da:	99 38       	st.w	r12[0xc],r8
800085dc:	30 08       	mov	r8,0
800085de:	99 68       	st.w	r12[0x18],r8
800085e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800085e4:	00 00       	add	r0,r0
800085e6:	13 24       	ld.uh	r4,r9++
800085e8:	80 00       	ld.sh	r0,r0[0x0]
800085ea:	94 54       	ld.sh	r4,r10[0xa]
800085ec:	80 00       	ld.sh	r0,r0[0x0]
800085ee:	73 18       	ld.w	r8,r9[0x44]

800085f0 <init_user_mstate>:

/* ----------------------------- user mspaces ---------------------------- */

#if MSPACES

static mstate init_user_mstate(char* tbase, size_t tsize) {
800085f0:	d4 21       	pushm	r4-r7,lr
800085f2:	18 96       	mov	r6,r12
800085f4:	16 95       	mov	r5,r11
  size_t msize = pad_request(sizeof(struct malloc_state));
  mchunkptr mn;
  mchunkptr msp = align_as_chunk(tbase);
800085f6:	e9 dc c0 03 	bfextu	r4,r12,0x0,0x3
800085fa:	c0 50       	breq	80008604 <init_user_mstate+0x14>
800085fc:	e8 04 11 08 	rsub	r4,r4,8
80008600:	e9 d4 c0 03 	bfextu	r4,r4,0x0,0x3
80008604:	ec 04 00 04 	add	r4,r6,r4
  mstate m = (mstate)(chunk2mem(msp));
80008608:	e8 c7 ff f8 	sub	r7,r4,-8
  memset(m, 0, msize);
8000860c:	e0 6a 01 d0 	mov	r10,464
80008610:	30 0b       	mov	r11,0
80008612:	0e 9c       	mov	r12,r7
80008614:	f0 1f 00 14 	mcall	80008664 <init_user_mstate+0x74>
  INITIAL_LOCK(&m->mutex);
  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
80008618:	e0 68 01 d3 	mov	r8,467
8000861c:	89 18       	st.w	r4[0x4],r8
  m->seg.base = m->least_addr = tbase;
8000861e:	8f 46       	st.w	r7[0x10],r6
80008620:	ef 46 01 b8 	st.w	r7[440],r6
  m->seg.size = m->footprint = m->max_footprint = tsize;
80008624:	ef 45 01 b0 	st.w	r7[432],r5
80008628:	ef 45 01 ac 	st.w	r7[428],r5
8000862c:	ef 45 01 bc 	st.w	r7[444],r5
  m->magic = mparams.magic;
80008630:	48 e8       	lddpc	r8,80008668 <init_user_mstate+0x78>
80008632:	70 09       	ld.w	r9,r8[0x0]
80008634:	8f 89       	st.w	r7[0x20],r9
  m->mflags = mparams.default_mflags;
  disable_contiguous(m);
80008636:	70 58       	ld.w	r8,r8[0x14]
80008638:	a3 a8       	sbr	r8,0x2
8000863a:	ef 48 01 b4 	st.w	r7[436],r8
  init_bins(m);
8000863e:	0e 9c       	mov	r12,r7
80008640:	f0 1f 00 0b 	mcall	8000866c <init_user_mstate+0x7c>
  mn = next_chunk(mem2chunk(m));
80008644:	ee fb ff fc 	ld.w	r11,r7[-4]
80008648:	e0 1b ff fc 	andl	r11,0xfffc
8000864c:	20 8b       	sub	r11,8
8000864e:	ee 0b 00 0b 	add	r11,r7,r11
  init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
80008652:	0a 06       	add	r6,r5
80008654:	ec 0b 01 0a 	sub	r10,r6,r11
80008658:	22 8a       	sub	r10,40
8000865a:	0e 9c       	mov	r12,r7
8000865c:	f0 1f 00 05 	mcall	80008670 <init_user_mstate+0x80>
  check_top_chunk(m, m->top);
  return m;
}
80008660:	0e 9c       	mov	r12,r7
80008662:	d8 22       	popm	r4-r7,pc
80008664:	80 00       	ld.sh	r0,r0[0x0]
80008666:	ba ee       	st.b	sp[0x6],lr
80008668:	00 00       	add	r0,r0
8000866a:	14 ec       	st.h	--r10,r12
8000866c:	80 00       	ld.sh	r0,r0[0x0]
8000866e:	73 04       	ld.w	r4,r9[0x40]
80008670:	80 00       	ld.sh	r0,r0[0x0]
80008672:	72 d4       	ld.w	r4,r9[0x34]

80008674 <create_mspace_with_base>:
    }
  }
  return (mspace)m;
}

mspace create_mspace_with_base(void* base, size_t capacity, int locked) {
80008674:	eb cd 40 c0 	pushm	r6-r7,lr
80008678:	18 96       	mov	r6,r12
8000867a:	16 97       	mov	r7,r11
  mstate m = 0;
  size_t msize = pad_request(sizeof(struct malloc_state));
  init_mparams(); /* Ensure pagesize etc initialized */
8000867c:	f0 1f 00 0d 	mcall	800086b0 <create_mspace_with_base+0x3c>

  if (capacity > msize + TOP_FOOT_SIZE &&
80008680:	e0 47 01 f8 	cp.w	r7,504
80008684:	e0 88 00 13 	brls	800086aa <create_mspace_with_base+0x36>
80008688:	48 b8       	lddpc	r8,800086b4 <create_mspace_with_base+0x40>
8000868a:	70 18       	ld.w	r8,r8[0x4]
8000868c:	fe 79 fe 08 	mov	r9,-504
80008690:	f2 08 01 08 	sub	r8,r9,r8
80008694:	10 37       	cp.w	r7,r8
80008696:	c0 a2       	brcc	800086aa <create_mspace_with_base+0x36>
      capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
    m = init_user_mstate((char*)base, capacity);
80008698:	0e 9b       	mov	r11,r7
8000869a:	0c 9c       	mov	r12,r6
8000869c:	f0 1f 00 07 	mcall	800086b8 <create_mspace_with_base+0x44>
    m->seg.sflags = EXTERN_BIT;
800086a0:	30 88       	mov	r8,8
800086a2:	f9 48 01 c4 	st.w	r12[452],r8
800086a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    set_lock(m, locked);
800086aa:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800086ae:	00 00       	add	r0,r0
800086b0:	80 00       	ld.sh	r0,r0[0x0]
800086b2:	72 8c       	ld.w	r12,r9[0x20]
800086b4:	00 00       	add	r0,r0
800086b6:	14 ec       	st.h	--r10,r12
800086b8:	80 00       	ld.sh	r0,r0[0x0]
800086ba:	85 f0       	st.w	r2[0x3c],r0

800086bc <sys_alloc>:
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
800086bc:	d4 31       	pushm	r0-r7,lr
800086be:	20 3d       	sub	sp,12
800086c0:	18 97       	mov	r7,r12
800086c2:	16 96       	mov	r6,r11
  char* tbase = CMFAIL;
  size_t tsize = 0;
  flag_t mmap_flag = 0;

  init_mparams();
800086c4:	f0 1f 02 1c 	mcall	80008f34 <sys_alloc+0x878>

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
800086c8:	ee f8 01 b4 	ld.w	r8,r7[436]
800086cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800086d0:	c4 70       	breq	8000875e <sys_alloc+0xa2>
800086d2:	fe f8 08 66 	ld.w	r8,pc[2150]
800086d6:	70 38       	ld.w	r8,r8[0xc]
800086d8:	0c 38       	cp.w	r8,r6
800086da:	e0 8b 00 42 	brhi	8000875e <sys_alloc+0xa2>
  the PINUSE bit so frees can be checked.
*/

/* Malloc using mmap */
static void* mmap_alloc(mstate m, size_t nb) {
  size_t mmsize = granularity_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
800086de:	fe f8 08 5a 	ld.w	r8,pc[2138]
800086e2:	70 28       	ld.w	r8,r8[0x8]
800086e4:	f0 c5 ff e1 	sub	r5,r8,-31
800086e8:	0c 05       	add	r5,r6
800086ea:	5c 38       	neg	r8
800086ec:	10 65       	and	r5,r8
  if (mmsize > nb) {     /* Check for wrap around 0 */
800086ee:	0a 36       	cp.w	r6,r5
800086f0:	c3 72       	brcc	8000875e <sys_alloc+0xa2>
    char* mm = (char*)(DIRECT_MMAP(mmsize));
800086f2:	30 0c       	mov	r12,0
800086f4:	1a dc       	st.w	--sp,r12
800086f6:	3f f8       	mov	r8,-1
800086f8:	30 39       	mov	r9,3
800086fa:	12 9a       	mov	r10,r9
800086fc:	0a 9b       	mov	r11,r5
800086fe:	f0 1f 02 10 	mcall	80008f3c <sys_alloc+0x880>
    if (mm != CMFAIL) {
80008702:	2f fd       	sub	sp,-4
80008704:	5b fc       	cp.w	r12,-1
80008706:	c2 c0       	breq	8000875e <sys_alloc+0xa2>
      size_t offset = align_offset(chunk2mem(mm));
80008708:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
8000870c:	c0 31       	brne	80008712 <sys_alloc+0x56>
8000870e:	30 09       	mov	r9,0
80008710:	c0 58       	rjmp	8000871a <sys_alloc+0x5e>
80008712:	f0 08 11 08 	rsub	r8,r8,8
80008716:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
      size_t psize = mmsize - offset - MMAP_FOOT_PAD;
8000871a:	ea ca 00 10 	sub	r10,r5,16
8000871e:	12 1a       	sub	r10,r9
      mchunkptr p = (mchunkptr)(mm + offset);
80008720:	f8 09 00 08 	add	r8,r12,r9
      p->prev_foot = offset | IS_MMAPPED_BIT;
80008724:	a1 a9       	sbr	r9,0x0
80008726:	91 09       	st.w	r8[0x0],r9
      (p)->head = (psize|CINUSE_BIT);
80008728:	14 99       	mov	r9,r10
8000872a:	a1 b9       	sbr	r9,0x1
8000872c:	91 19       	st.w	r8[0x4],r9
      mark_inuse_foot(m, p, psize);
      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
8000872e:	f0 0a 00 09 	add	r9,r8,r10
80008732:	30 7a       	mov	r10,7
80008734:	93 1a       	st.w	r9[0x4],r10
      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
80008736:	30 0a       	mov	r10,0
80008738:	93 2a       	st.w	r9[0x8],r10

      if (mm < m->least_addr)
8000873a:	6e 49       	ld.w	r9,r7[0x10]
        m->least_addr = mm;
8000873c:	12 3c       	cp.w	r12,r9
8000873e:	ef fc 3a 04 	st.wcs	r7[0x10],r12
      if ((m->footprint += mmsize) > m->max_footprint)
80008742:	ee f9 01 ac 	ld.w	r9,r7[428]
80008746:	12 05       	add	r5,r9
80008748:	ef 45 01 ac 	st.w	r7[428],r5
8000874c:	ee f9 01 b0 	ld.w	r9,r7[432]
        m->max_footprint = m->footprint;
80008750:	12 35       	cp.w	r5,r9
80008752:	ef f5 ba 6c 	st.whi	r7[0x1b0],r5
      assert(is_aligned(chunk2mem(p)));
      check_mmapped_chunk(m, p);
      return chunk2mem(p);
80008756:	f0 cc ff f8 	sub	r12,r8,-8
  init_mparams();

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
    void* mem = mmap_alloc(m, nb);
    if (mem != 0)
8000875a:	e0 81 03 be 	brne	80008ed6 <sys_alloc+0x81a>
       find space.
    3. A call to MORECORE that cannot usually contiguously extend memory.
       (disabled if not HAVE_MORECORE)
  */

  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
8000875e:	ee f8 01 b4 	ld.w	r8,r7[436]
80008762:	e2 18 00 04 	andl	r8,0x4,COH
80008766:	c7 e1       	brne	80008862 <sys_alloc+0x1a6>
    char* br = CMFAIL;
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
80008768:	6e 6b       	ld.w	r11,r7[0x18]
8000876a:	58 0b       	cp.w	r11,0
8000876c:	c0 60       	breq	80008778 <sys_alloc+0xbc>
8000876e:	0e 9c       	mov	r12,r7
80008770:	f0 1f 01 f4 	mcall	80008f40 <sys_alloc+0x884>
80008774:	18 95       	mov	r5,r12
    size_t asize = 0;
    ACQUIRE_MORECORE_LOCK();

    if (ss == 0) {  /* First time through or recovery */
80008776:	c2 c1       	brne	800087ce <sys_alloc+0x112>
      char* base = (char*)CALL_MORECORE(0);
80008778:	30 0c       	mov	r12,0
8000877a:	f0 1f 01 f3 	mcall	80008f44 <sys_alloc+0x888>
8000877e:	18 95       	mov	r5,r12
      if (base != CMFAIL) {
80008780:	5b fc       	cp.w	r12,-1
80008782:	e0 80 03 ac 	breq	80008eda <sys_alloc+0x81e>
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
80008786:	fe f8 07 b2 	ld.w	r8,pc[1970]
8000878a:	70 29       	ld.w	r9,r8[0x8]
8000878c:	f2 c1 ff d7 	sub	r1,r9,-41
80008790:	0c 01       	add	r1,r6
80008792:	5c 39       	neg	r9
80008794:	12 61       	and	r1,r9
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
80008796:	70 18       	ld.w	r8,r8[0x4]
80008798:	18 99       	mov	r9,r12
8000879a:	f0 ca 00 01 	sub	r10,r8,1
8000879e:	f9 ea 00 0a 	and	r10,r12,r10
800087a2:	c0 70       	breq	800087b0 <sys_alloc+0xf4>
          asize += (page_align((size_t)base) - (size_t)base);
800087a4:	18 11       	sub	r1,r12
800087a6:	10 09       	add	r9,r8
800087a8:	5c 38       	neg	r8
800087aa:	f3 e8 00 08 	and	r8,r9,r8
800087ae:	10 01       	add	r1,r8
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
800087b0:	e0 6b ff fe 	mov	r11,65534
800087b4:	ea 1b 7f ff 	orh	r11,0x7fff
800087b8:	16 31       	cp.w	r1,r11
800087ba:	e0 8b 03 94 	brhi	80008ee2 <sys_alloc+0x826>
            (br = (char*)(CALL_MORECORE(asize))) == base) {
800087be:	02 9c       	mov	r12,r1
800087c0:	f0 1f 01 e1 	mcall	80008f44 <sys_alloc+0x888>
800087c4:	18 94       	mov	r4,r12
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
          asize += (page_align((size_t)base) - (size_t)base);
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
800087c6:	0a 3c       	cp.w	r12,r5
800087c8:	c2 11       	brne	8000880a <sys_alloc+0x14e>
800087ca:	e0 8f 03 8f 	bral	80008ee8 <sys_alloc+0x82c>
        }
      }
    }
    else {
      /* Subtract out existing available top space from MORECORE request. */
      asize = granularity_align(nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
800087ce:	fe f8 07 6a 	ld.w	r8,pc[1898]
800087d2:	70 28       	ld.w	r8,r8[0x8]
800087d4:	f0 c1 ff d7 	sub	r1,r8,-41
800087d8:	6e 39       	ld.w	r9,r7[0xc]
800087da:	12 11       	sub	r1,r9
800087dc:	0c 01       	add	r1,r6
800087de:	5c 38       	neg	r8
800087e0:	10 61       	and	r1,r8
      /* Use mem here only if it did continuously extend old space */
      if (asize < HALF_MAX_SIZE_T &&
800087e2:	e0 6a ff fe 	mov	r10,65534
800087e6:	ea 1a 7f ff 	orh	r10,0x7fff
800087ea:	14 31       	cp.w	r1,r10
800087ec:	e0 8b 03 7b 	brhi	80008ee2 <sys_alloc+0x826>
          (br = (char*)(CALL_MORECORE(asize))) == ss->base+ss->size) {
800087f0:	02 9c       	mov	r12,r1
800087f2:	f0 1f 01 d5 	mcall	80008f44 <sys_alloc+0x888>
800087f6:	18 94       	mov	r4,r12
800087f8:	6a 09       	ld.w	r9,r5[0x0]
800087fa:	6a 18       	ld.w	r8,r5[0x4]
800087fc:	f2 08 00 08 	add	r8,r9,r8
80008800:	10 3c       	cp.w	r12,r8
80008802:	c0 41       	brne	8000880a <sys_alloc+0x14e>
        tbase = br;
        tsize = asize;
      }
    }

    if (tbase == CMFAIL) {    /* Cope with partial failure */
80008804:	5b fc       	cp.w	r12,-1
80008806:	e0 81 03 71 	brne	80008ee8 <sys_alloc+0x82c>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
8000880a:	5b f4       	cp.w	r4,-1
8000880c:	c2 60       	breq	80008858 <sys_alloc+0x19c>
        if (asize < HALF_MAX_SIZE_T &&
8000880e:	e0 69 ff fe 	mov	r9,65534
80008812:	ea 19 7f ff 	orh	r9,0x7fff
80008816:	12 31       	cp.w	r1,r9
80008818:	e0 8b 03 68 	brhi	80008ee8 <sys_alloc+0x82c>
8000881c:	ec c8 ff d7 	sub	r8,r6,-41
80008820:	02 38       	cp.w	r8,r1
80008822:	e0 88 03 63 	brls	80008ee8 <sys_alloc+0x82c>
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
80008826:	fe f8 07 12 	ld.w	r8,pc[1810]
8000882a:	70 28       	ld.w	r8,r8[0x8]
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
8000882c:	e2 03 11 00 	rsub	r3,r1,0

    if (tbase == CMFAIL) {    /* Cope with partial failure */
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
        if (asize < HALF_MAX_SIZE_T &&
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
80008830:	f0 c5 ff d7 	sub	r5,r8,-41
80008834:	0c 05       	add	r5,r6
80008836:	02 15       	sub	r5,r1
80008838:	5c 38       	neg	r8
8000883a:	10 65       	and	r5,r8
          if (esize < HALF_MAX_SIZE_T) {
8000883c:	12 35       	cp.w	r5,r9
8000883e:	e0 8b 03 55 	brhi	80008ee8 <sys_alloc+0x82c>
            char* end = (char*)CALL_MORECORE(esize);
80008842:	0a 9c       	mov	r12,r5
80008844:	f0 1f 01 c0 	mcall	80008f44 <sys_alloc+0x888>
            if (end != CMFAIL)
80008848:	5b fc       	cp.w	r12,-1
8000884a:	c0 40       	breq	80008852 <sys_alloc+0x196>
              asize += esize;
8000884c:	0a 01       	add	r1,r5
8000884e:	e0 8f 03 4d 	bral	80008ee8 <sys_alloc+0x82c>
            else {            /* Can't use; try to release */
            #if HAVE_MORECORE
              CALL_MORECORE(-asize);
80008852:	06 9c       	mov	r12,r3
80008854:	f0 1f 01 bc 	mcall	80008f44 <sys_alloc+0x888>
      if (br != CMFAIL) {    /* Use the space we did get */
        tbase = br;
        tsize = asize;
      }
      else
        disable_contiguous(m); /* Don't try contiguous path in the future */
80008858:	ee f8 01 b4 	ld.w	r8,r7[436]
8000885c:	a3 a8       	sbr	r8,0x2
8000885e:	ef 48 01 b4 	st.w	r7[436],r8
    RELEASE_MORECORE_LOCK();
  }

  if (HAVE_MMAP && tbase == CMFAIL) {  /* Try MMAP */
    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
    size_t rsize = granularity_align(req);
80008862:	fe f8 06 d6 	ld.w	r8,pc[1750]
80008866:	70 28       	ld.w	r8,r8[0x8]
80008868:	f0 c1 ff d7 	sub	r1,r8,-41
8000886c:	0c 01       	add	r1,r6
8000886e:	5c 38       	neg	r8
80008870:	10 61       	and	r1,r8
    if (rsize > nb) { /* Fail if wraps around zero */
80008872:	02 36       	cp.w	r6,r1
80008874:	e0 82 03 3f 	brhs	80008ef2 <sys_alloc+0x836>
      char* mp = (char*)(CALL_MMAP(rsize));
80008878:	30 0c       	mov	r12,0
8000887a:	1a dc       	st.w	--sp,r12
8000887c:	3f f8       	mov	r8,-1
8000887e:	30 39       	mov	r9,3
80008880:	12 9a       	mov	r10,r9
80008882:	02 9b       	mov	r11,r1
80008884:	f0 1f 01 ae 	mcall	80008f3c <sys_alloc+0x880>
      if (mp != CMFAIL) {
80008888:	2f fd       	sub	sp,-4
8000888a:	5b fc       	cp.w	r12,-1
8000888c:	e0 80 03 33 	breq	80008ef2 <sys_alloc+0x836>
80008890:	18 95       	mov	r5,r12
80008892:	30 18       	mov	r8,1
80008894:	50 18       	stdsp	sp[0x4],r8
80008896:	c1 e8       	rjmp	800088d2 <sys_alloc+0x216>
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
    if (asize < HALF_MAX_SIZE_T) {
      char* br = CMFAIL;
      char* end = CMFAIL;
      ACQUIRE_MORECORE_LOCK();
      br = (char*)(CALL_MORECORE(asize));
80008898:	f0 1f 01 ab 	mcall	80008f44 <sys_alloc+0x888>
8000889c:	18 95       	mov	r5,r12
      end = (char*)(CALL_MORECORE(0));
8000889e:	30 0c       	mov	r12,0
800088a0:	f0 1f 01 a9 	mcall	80008f44 <sys_alloc+0x888>
      RELEASE_MORECORE_LOCK();
      if (br != CMFAIL && end != CMFAIL && br < end) {
800088a4:	5b f5       	cp.w	r5,-1
800088a6:	5f 18       	srne	r8
800088a8:	5b fc       	cp.w	r12,-1
800088aa:	5f 19       	srne	r9
800088ac:	f1 e9 00 09 	and	r9,r8,r9
800088b0:	e0 80 03 12 	breq	80008ed4 <sys_alloc+0x818>
800088b4:	18 35       	cp.w	r5,r12
800088b6:	e0 82 03 0f 	brhs	80008ed4 <sys_alloc+0x818>
        size_t ssize = end - br;
800088ba:	f8 05 01 01 	sub	r1,r12,r5
        if (ssize > nb + TOP_FOOT_SIZE) {
800088be:	ec c9 ff d8 	sub	r9,r6,-40
800088c2:	12 31       	cp.w	r1,r9
800088c4:	e0 88 03 08 	brls	80008ed4 <sys_alloc+0x818>
        }
      }
    }
  }

  if (tbase != CMFAIL) {
800088c8:	58 08       	cp.w	r8,0
800088ca:	e0 80 03 05 	breq	80008ed4 <sys_alloc+0x818>
800088ce:	30 0b       	mov	r11,0
800088d0:	50 1b       	stdsp	sp[0x4],r11

    if ((m->footprint += tsize) > m->max_footprint)
800088d2:	ee f8 01 ac 	ld.w	r8,r7[428]
800088d6:	e2 08 00 08 	add	r8,r1,r8
800088da:	ef 48 01 ac 	st.w	r7[428],r8
800088de:	ee f9 01 b0 	ld.w	r9,r7[432]
      m->max_footprint = m->footprint;
800088e2:	12 38       	cp.w	r8,r9
800088e4:	ef f8 ba 6c 	st.whi	r7[0x1b0],r8

    if (!is_initialized(m)) { /* first-time initialization */
800088e8:	6e 6c       	ld.w	r12,r7[0x18]
800088ea:	58 0c       	cp.w	r12,0
800088ec:	c2 c1       	brne	80008944 <sys_alloc+0x288>
      m->seg.base = m->least_addr = tbase;
800088ee:	8f 45       	st.w	r7[0x10],r5
800088f0:	ef 45 01 b8 	st.w	r7[440],r5
      m->seg.size = tsize;
800088f4:	ef 41 01 bc 	st.w	r7[444],r1
      m->seg.sflags = mmap_flag;
800088f8:	40 1a       	lddsp	r10,sp[0x4]
800088fa:	ef 4a 01 c4 	st.w	r7[452],r10
      m->magic = mparams.magic;
800088fe:	fe f8 06 3a 	ld.w	r8,pc[1594]
80008902:	70 08       	ld.w	r8,r8[0x0]
80008904:	8f 88       	st.w	r7[0x20],r8
      init_bins(m);
80008906:	0e 9c       	mov	r12,r7
80008908:	f0 1f 01 90 	mcall	80008f48 <sys_alloc+0x88c>
      if (is_global(m))
8000890c:	fe f8 06 40 	ld.w	r8,pc[1600]
80008910:	10 37       	cp.w	r7,r8
80008912:	c0 91       	brne	80008924 <sys_alloc+0x268>
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
80008914:	e2 ca 00 28 	sub	r10,r1,40
80008918:	0a 9b       	mov	r11,r5
8000891a:	10 9c       	mov	r12,r8
8000891c:	f0 1f 01 8d 	mcall	80008f50 <sys_alloc+0x894>
80008920:	e0 8f 02 ca 	bral	80008eb4 <sys_alloc+0x7f8>
      else {
        /* Offset top by embedded malloc_state */
        mchunkptr mn = next_chunk(mem2chunk(m));
80008924:	ee fb ff fc 	ld.w	r11,r7[-4]
80008928:	e0 1b ff fc 	andl	r11,0xfffc
8000892c:	20 8b       	sub	r11,8
8000892e:	ee 0b 00 0b 	add	r11,r7,r11
        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
80008932:	ea 01 00 0a 	add	r10,r5,r1
80008936:	16 1a       	sub	r10,r11
80008938:	22 8a       	sub	r10,40
8000893a:	0e 9c       	mov	r12,r7
8000893c:	f0 1f 01 85 	mcall	80008f50 <sys_alloc+0x894>
80008940:	e0 8f 02 ba 	bral	80008eb4 <sys_alloc+0x7f8>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
80008944:	ee c9 fe 48 	sub	r9,r7,-440
      while (sp != 0 && tbase != sp->base + sp->size)
80008948:	c2 e0       	breq	800089a4 <sys_alloc+0x2e8>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
8000894a:	ee fa 01 b8 	ld.w	r10,r7[440]
8000894e:	ee f8 01 bc 	ld.w	r8,r7[444]
80008952:	f4 08 00 08 	add	r8,r10,r8
80008956:	10 35       	cp.w	r5,r8
80008958:	e0 80 02 dd 	breq	80008f12 <sys_alloc+0x856>
8000895c:	12 98       	mov	r8,r9
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
8000895e:	70 28       	ld.w	r8,r8[0x8]
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
80008960:	58 08       	cp.w	r8,0
80008962:	c2 10       	breq	800089a4 <sys_alloc+0x2e8>
80008964:	70 0b       	ld.w	r11,r8[0x0]
80008966:	70 1a       	ld.w	r10,r8[0x4]
80008968:	f6 0a 00 0a 	add	r10,r11,r10
8000896c:	14 35       	cp.w	r5,r10
8000896e:	cf 81       	brne	8000895e <sys_alloc+0x2a2>
80008970:	e0 8f 02 d2 	bral	80008f14 <sys_alloc+0x858>
        sp = sp->next;
      if (sp != 0 &&
80008974:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008978:	40 1b       	lddsp	r11,sp[0x4]
8000897a:	16 3a       	cp.w	r10,r11
8000897c:	c1 41       	brne	800089a4 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
8000897e:	70 0a       	ld.w	r10,r8[0x0]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008980:	14 3c       	cp.w	r12,r10
80008982:	c1 13       	brcs	800089a4 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
80008984:	70 1b       	ld.w	r11,r8[0x4]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008986:	16 0a       	add	r10,r11
80008988:	14 3c       	cp.w	r12,r10
8000898a:	c0 d2       	brcc	800089a4 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
8000898c:	e2 0b 00 0b 	add	r11,r1,r11
80008990:	91 1b       	st.w	r8[0x4],r11
        init_top(m, m->top, m->topsize + tsize);
80008992:	6e 3a       	ld.w	r10,r7[0xc]
80008994:	e2 0a 00 0a 	add	r10,r1,r10
80008998:	6e 6b       	ld.w	r11,r7[0x18]
8000899a:	0e 9c       	mov	r12,r7
8000899c:	f0 1f 01 6d 	mcall	80008f50 <sys_alloc+0x894>
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
800089a0:	e0 8f 02 8a 	bral	80008eb4 <sys_alloc+0x7f8>
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
        init_top(m, m->top, m->topsize + tsize);
      }
      else {
        if (tbase < m->least_addr)
800089a4:	6e 48       	ld.w	r8,r7[0x10]
          m->least_addr = tbase;
800089a6:	0a 38       	cp.w	r8,r5
800089a8:	ef f5 ba 04 	st.whi	r7[0x10],r5
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
800089ac:	58 09       	cp.w	r9,0
800089ae:	e0 80 01 91 	breq	80008cd0 <sys_alloc+0x614>
800089b2:	ea 01 00 0a 	add	r10,r5,r1
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
800089b6:	ee f8 01 b8 	ld.w	r8,r7[440]
800089ba:	14 38       	cp.w	r8,r10
800089bc:	e0 80 02 b4 	breq	80008f24 <sys_alloc+0x868>
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
800089c0:	72 29       	ld.w	r9,r9[0x8]
      }
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
800089c2:	58 09       	cp.w	r9,0
800089c4:	e0 80 01 86 	breq	80008cd0 <sys_alloc+0x614>
800089c8:	72 08       	ld.w	r8,r9[0x0]
800089ca:	14 38       	cp.w	r8,r10
800089cc:	cf a1       	brne	800089c0 <sys_alloc+0x304>
800089ce:	e0 8f 02 ab 	bral	80008f24 <sys_alloc+0x868>
          sp = sp->next;
        if (sp != 0 &&
800089d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800089d6:	40 1a       	lddsp	r10,sp[0x4]
800089d8:	14 38       	cp.w	r8,r10
800089da:	e0 81 01 7b 	brne	80008cd0 <sys_alloc+0x614>
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
800089de:	72 08       	ld.w	r8,r9[0x0]
          sp->base = tbase;
800089e0:	93 05       	st.w	r9[0x0],r5
          sp->size += tsize;
800089e2:	72 1a       	ld.w	r10,r9[0x4]
800089e4:	f4 01 00 01 	add	r1,r10,r1
800089e8:	93 11       	st.w	r9[0x4],r1
#endif /* PROCEED_ON_ERROR */

/* Allocate chunk and prepend remainder with chunk in successor base. */
static void* prepend_alloc(mstate m, char* newbase, char* oldbase,
                           size_t nb) {
  mchunkptr p = align_as_chunk(newbase);
800089ea:	f3 d5 c0 03 	bfextu	r9,r5,0x0,0x3
800089ee:	c0 31       	brne	800089f4 <sys_alloc+0x338>
800089f0:	30 0c       	mov	r12,0
800089f2:	c0 58       	rjmp	800089fc <sys_alloc+0x340>
800089f4:	f2 0c 11 08 	rsub	r12,r9,8
800089f8:	f9 dc c0 03 	bfextu	r12,r12,0x0,0x3
800089fc:	ea 0c 00 0c 	add	r12,r5,r12
  mchunkptr oldfirst = align_as_chunk(oldbase);
80008a00:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80008a04:	c0 31       	brne	80008a0a <sys_alloc+0x34e>
80008a06:	30 0a       	mov	r10,0
80008a08:	c0 58       	rjmp	80008a12 <sys_alloc+0x356>
80008a0a:	f2 0a 11 08 	rsub	r10,r9,8
80008a0e:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80008a12:	f0 0a 00 0a 	add	r10,r8,r10
  size_t psize = (char*)oldfirst - (char*)p;
  mchunkptr q = chunk_plus_offset(p, nb);
80008a16:	f8 06 00 05 	add	r5,r12,r6
  size_t qsize = psize - nb;
80008a1a:	f4 0c 01 09 	sub	r9,r10,r12
80008a1e:	0c 19       	sub	r9,r6
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
80008a20:	e8 16 00 03 	orl	r6,0x3
80008a24:	99 16       	st.w	r12[0x4],r6
  assert((char*)oldfirst > (char*)q);
  assert(pinuse(oldfirst));
  assert(qsize >= MIN_CHUNK_SIZE);

  /* consolidate remainder with first chunk of old base */
  if (oldfirst == m->top) {
80008a26:	6e 68       	ld.w	r8,r7[0x18]
80008a28:	10 3a       	cp.w	r10,r8
80008a2a:	c0 81       	brne	80008a3a <sys_alloc+0x37e>
    size_t tsize = m->topsize += qsize;
80008a2c:	6e 38       	ld.w	r8,r7[0xc]
80008a2e:	10 09       	add	r9,r8
80008a30:	8f 39       	st.w	r7[0xc],r9
    m->top = q;
80008a32:	8f 65       	st.w	r7[0x18],r5
    q->head = tsize | PINUSE_BIT;
80008a34:	a1 a9       	sbr	r9,0x0
80008a36:	8b 19       	st.w	r5[0x4],r9
80008a38:	c4 a9       	rjmp	80008ccc <sys_alloc+0x610>
    check_top_chunk(m, q);
  }
  else if (oldfirst == m->dv) {
80008a3a:	6e 58       	ld.w	r8,r7[0x14]
80008a3c:	10 3a       	cp.w	r10,r8
80008a3e:	c0 b1       	brne	80008a54 <sys_alloc+0x398>
    size_t dsize = m->dvsize += qsize;
80008a40:	6e 28       	ld.w	r8,r7[0x8]
80008a42:	10 09       	add	r9,r8
80008a44:	8f 29       	st.w	r7[0x8],r9
    m->dv = q;
80008a46:	8f 55       	st.w	r7[0x14],r5
    set_size_and_pinuse_of_free_chunk(q, dsize);
80008a48:	12 98       	mov	r8,r9
80008a4a:	a1 a8       	sbr	r8,0x0
80008a4c:	8b 18       	st.w	r5[0x4],r8
80008a4e:	ea 09 09 09 	st.w	r5[r9],r9
80008a52:	c3 d9       	rjmp	80008ccc <sys_alloc+0x610>
  }
  else {
    if (!cinuse(oldfirst)) {
80008a54:	74 18       	ld.w	r8,r10[0x4]
80008a56:	10 9b       	mov	r11,r8
80008a58:	e2 1b 00 02 	andl	r11,0x2,COH
80008a5c:	e0 81 00 92 	brne	80008b80 <sys_alloc+0x4c4>
      size_t nsize = chunksize(oldfirst);
80008a60:	10 94       	mov	r4,r8
80008a62:	e0 14 ff fc 	andl	r4,0xfffc
      unlink_chunk(m, oldfirst, nsize);
80008a66:	e8 08 16 03 	lsr	r8,r4,0x3
80008a6a:	59 f8       	cp.w	r8,31
80008a6c:	e0 8b 00 22 	brhi	80008ab0 <sys_alloc+0x3f4>
80008a70:	74 2b       	ld.w	r11,r10[0x8]
80008a72:	74 36       	ld.w	r6,r10[0xc]
80008a74:	0c 3b       	cp.w	r11,r6
80008a76:	c0 a1       	brne	80008a8a <sys_alloc+0x3ce>
80008a78:	30 1b       	mov	r11,1
80008a7a:	f6 08 09 48 	lsl	r8,r11,r8
80008a7e:	5c d8       	com	r8
80008a80:	6e 0b       	ld.w	r11,r7[0x0]
80008a82:	f7 e8 00 08 	and	r8,r11,r8
80008a86:	8f 08       	st.w	r7[0x0],r8
80008a88:	c7 a8       	rjmp	80008b7c <sys_alloc+0x4c0>
80008a8a:	ee c3 ff dc 	sub	r3,r7,-36
80008a8e:	e6 08 00 38 	add	r8,r3,r8<<0x3
80008a92:	10 3b       	cp.w	r11,r8
80008a94:	c0 50       	breq	80008a9e <sys_alloc+0x3e2>
80008a96:	6e 43       	ld.w	r3,r7[0x10]
80008a98:	16 33       	cp.w	r3,r11
80008a9a:	e0 8b 00 71 	brhi	80008b7c <sys_alloc+0x4c0>
80008a9e:	10 36       	cp.w	r6,r8
80008aa0:	c0 50       	breq	80008aaa <sys_alloc+0x3ee>
80008aa2:	6e 48       	ld.w	r8,r7[0x10]
80008aa4:	0c 38       	cp.w	r8,r6
80008aa6:	e0 8b 00 6b 	brhi	80008b7c <sys_alloc+0x4c0>
80008aaa:	97 36       	st.w	r11[0xc],r6
80008aac:	8d 2b       	st.w	r6[0x8],r11
80008aae:	c6 78       	rjmp	80008b7c <sys_alloc+0x4c0>
80008ab0:	14 93       	mov	r3,r10
80008ab2:	74 62       	ld.w	r2,r10[0x18]
80008ab4:	74 38       	ld.w	r8,r10[0xc]
80008ab6:	10 3a       	cp.w	r10,r8
80008ab8:	c0 90       	breq	80008aca <sys_alloc+0x40e>
80008aba:	74 2b       	ld.w	r11,r10[0x8]
80008abc:	6e 46       	ld.w	r6,r7[0x10]
80008abe:	16 36       	cp.w	r6,r11
80008ac0:	e0 8b 00 23 	brhi	80008b06 <sys_alloc+0x44a>
80008ac4:	97 38       	st.w	r11[0xc],r8
80008ac6:	91 2b       	st.w	r8[0x8],r11
80008ac8:	c1 f8       	rjmp	80008b06 <sys_alloc+0x44a>
80008aca:	74 58       	ld.w	r8,r10[0x14]
80008acc:	58 08       	cp.w	r8,0
80008ace:	c0 40       	breq	80008ad6 <sys_alloc+0x41a>
80008ad0:	f4 c6 ff ec 	sub	r6,r10,-20
80008ad4:	c0 a8       	rjmp	80008ae8 <sys_alloc+0x42c>
80008ad6:	74 48       	ld.w	r8,r10[0x10]
80008ad8:	58 08       	cp.w	r8,0
80008ada:	c1 60       	breq	80008b06 <sys_alloc+0x44a>
80008adc:	f4 c6 ff f0 	sub	r6,r10,-16
80008ae0:	c0 48       	rjmp	80008ae8 <sys_alloc+0x42c>
80008ae2:	f0 c6 ff ec 	sub	r6,r8,-20
80008ae6:	16 98       	mov	r8,r11
80008ae8:	70 5b       	ld.w	r11,r8[0x14]
80008aea:	58 0b       	cp.w	r11,0
80008aec:	cf b1       	brne	80008ae2 <sys_alloc+0x426>
80008aee:	70 4b       	ld.w	r11,r8[0x10]
80008af0:	58 0b       	cp.w	r11,0
80008af2:	c0 40       	breq	80008afa <sys_alloc+0x43e>
80008af4:	f0 c6 ff f0 	sub	r6,r8,-16
80008af8:	cf 7b       	rjmp	80008ae6 <sys_alloc+0x42a>
80008afa:	6e 4b       	ld.w	r11,r7[0x10]
80008afc:	0c 3b       	cp.w	r11,r6
80008afe:	f9 bb 08 00 	movls	r11,0
80008b02:	ed fb 8a 00 	st.wls	r6[0x0],r11
80008b06:	58 02       	cp.w	r2,0
80008b08:	c3 a0       	breq	80008b7c <sys_alloc+0x4c0>
80008b0a:	66 7b       	ld.w	r11,r3[0x1c]
80008b0c:	f6 c6 ff b5 	sub	r6,r11,-75
80008b10:	ee 06 03 26 	ld.w	r6,r7[r6<<0x2]
80008b14:	0c 33       	cp.w	r3,r6
80008b16:	c1 01       	brne	80008b36 <sys_alloc+0x47a>
80008b18:	2b 5b       	sub	r11,-75
80008b1a:	ee 0b 09 28 	st.w	r7[r11<<0x2],r8
80008b1e:	58 08       	cp.w	r8,0
80008b20:	c1 71       	brne	80008b4e <sys_alloc+0x492>
80008b22:	66 78       	ld.w	r8,r3[0x1c]
80008b24:	30 1b       	mov	r11,1
80008b26:	f6 08 09 48 	lsl	r8,r11,r8
80008b2a:	5c d8       	com	r8
80008b2c:	6e 1b       	ld.w	r11,r7[0x4]
80008b2e:	f7 e8 00 08 	and	r8,r11,r8
80008b32:	8f 18       	st.w	r7[0x4],r8
80008b34:	c2 48       	rjmp	80008b7c <sys_alloc+0x4c0>
80008b36:	6e 4b       	ld.w	r11,r7[0x10]
80008b38:	04 3b       	cp.w	r11,r2
80008b3a:	e0 8b 00 08 	brhi	80008b4a <sys_alloc+0x48e>
80008b3e:	64 4b       	ld.w	r11,r2[0x10]
80008b40:	16 33       	cp.w	r3,r11
80008b42:	e5 f8 0a 04 	st.weq	r2[0x10],r8
80008b46:	e5 f8 1a 05 	st.wne	r2[0x14],r8
80008b4a:	58 08       	cp.w	r8,0
80008b4c:	c1 80       	breq	80008b7c <sys_alloc+0x4c0>
80008b4e:	6e 4b       	ld.w	r11,r7[0x10]
80008b50:	10 3b       	cp.w	r11,r8
80008b52:	e0 8b 00 15 	brhi	80008b7c <sys_alloc+0x4c0>
80008b56:	91 62       	st.w	r8[0x18],r2
80008b58:	66 4b       	ld.w	r11,r3[0x10]
80008b5a:	58 0b       	cp.w	r11,0
80008b5c:	c0 70       	breq	80008b6a <sys_alloc+0x4ae>
80008b5e:	6e 46       	ld.w	r6,r7[0x10]
80008b60:	16 36       	cp.w	r6,r11
80008b62:	f1 fb 8a 04 	st.wls	r8[0x10],r11
80008b66:	f7 f8 8a 06 	st.wls	r11[0x18],r8
80008b6a:	66 5b       	ld.w	r11,r3[0x14]
80008b6c:	58 0b       	cp.w	r11,0
80008b6e:	c0 70       	breq	80008b7c <sys_alloc+0x4c0>
80008b70:	6e 46       	ld.w	r6,r7[0x10]
80008b72:	16 36       	cp.w	r6,r11
80008b74:	f1 fb 8a 05 	st.wls	r8[0x14],r11
80008b78:	f7 f8 8a 06 	st.wls	r11[0x18],r8
      oldfirst = chunk_plus_offset(oldfirst, nsize);
80008b7c:	08 0a       	add	r10,r4
      qsize += nsize;
80008b7e:	08 09       	add	r9,r4
    }
    set_free_with_pinuse(q, qsize, oldfirst);
80008b80:	74 18       	ld.w	r8,r10[0x4]
80008b82:	a1 c8       	cbr	r8,0x0
80008b84:	95 18       	st.w	r10[0x4],r8
80008b86:	12 98       	mov	r8,r9
80008b88:	a1 a8       	sbr	r8,0x0
80008b8a:	8b 18       	st.w	r5[0x4],r8
80008b8c:	ea 09 09 09 	st.w	r5[r9],r9
    insert_chunk(m, q, qsize);
80008b90:	f2 08 16 03 	lsr	r8,r9,0x3
80008b94:	59 f8       	cp.w	r8,31
80008b96:	e0 8b 00 1b 	brhi	80008bcc <sys_alloc+0x510>
80008b9a:	ee c9 ff dc 	sub	r9,r7,-36
80008b9e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80008ba2:	6e 0a       	ld.w	r10,r7[0x0]
80008ba4:	30 1b       	mov	r11,1
80008ba6:	f6 08 09 48 	lsl	r8,r11,r8
80008baa:	f1 ea 00 0b 	and	r11,r8,r10
80008bae:	c0 51       	brne	80008bb8 <sys_alloc+0x4fc>
80008bb0:	14 48       	or	r8,r10
80008bb2:	8f 08       	st.w	r7[0x0],r8
80008bb4:	12 98       	mov	r8,r9
80008bb6:	c0 68       	rjmp	80008bc2 <sys_alloc+0x506>
80008bb8:	72 28       	ld.w	r8,r9[0x8]
80008bba:	6e 4a       	ld.w	r10,r7[0x10]
80008bbc:	14 38       	cp.w	r8,r10
80008bbe:	f2 08 17 30 	movlo	r8,r9
80008bc2:	93 25       	st.w	r9[0x8],r5
80008bc4:	91 35       	st.w	r8[0xc],r5
80008bc6:	8b 28       	st.w	r5[0x8],r8
80008bc8:	8b 39       	st.w	r5[0xc],r9
80008bca:	c8 18       	rjmp	80008ccc <sys_alloc+0x610>
80008bcc:	f2 08 16 08 	lsr	r8,r9,0x8
80008bd0:	c0 31       	brne	80008bd6 <sys_alloc+0x51a>
80008bd2:	30 0a       	mov	r10,0
80008bd4:	c2 d8       	rjmp	80008c2e <sys_alloc+0x572>
80008bd6:	e0 48 ff ff 	cp.w	r8,65535
80008bda:	e0 88 00 04 	brls	80008be2 <sys_alloc+0x526>
80008bde:	31 fa       	mov	r10,31
80008be0:	c2 78       	rjmp	80008c2e <sys_alloc+0x572>
80008be2:	f0 c6 01 00 	sub	r6,r8,256
80008be6:	b1 86       	lsr	r6,0x10
80008be8:	e2 16 00 08 	andl	r6,0x8,COH
80008bec:	f0 06 09 48 	lsl	r8,r8,r6
80008bf0:	f0 cb 10 00 	sub	r11,r8,4096
80008bf4:	b1 8b       	lsr	r11,0x10
80008bf6:	e2 1b 00 04 	andl	r11,0x4,COH
80008bfa:	f0 0b 09 48 	lsl	r8,r8,r11
80008bfe:	f0 ca 40 00 	sub	r10,r8,16384
80008c02:	b1 8a       	lsr	r10,0x10
80008c04:	e2 1a 00 02 	andl	r10,0x2,COH
80008c08:	f0 0a 09 48 	lsl	r8,r8,r10
80008c0c:	af 98       	lsr	r8,0xf
80008c0e:	ec 06 11 0e 	rsub	r6,r6,14
80008c12:	ec 0b 01 0b 	sub	r11,r6,r11
80008c16:	f6 0a 01 0a 	sub	r10,r11,r10
80008c1a:	f4 08 00 08 	add	r8,r10,r8
80008c1e:	f0 ca ff f9 	sub	r10,r8,-7
80008c22:	f2 0a 0a 4a 	lsr	r10,r9,r10
80008c26:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008c2a:	f4 08 00 1a 	add	r10,r10,r8<<0x1
80008c2e:	8b 7a       	st.w	r5[0x1c],r10
80008c30:	30 08       	mov	r8,0
80008c32:	8b 58       	st.w	r5[0x14],r8
80008c34:	8b 48       	st.w	r5[0x10],r8
80008c36:	6e 18       	ld.w	r8,r7[0x4]
80008c38:	30 1b       	mov	r11,1
80008c3a:	f6 0a 09 4b 	lsl	r11,r11,r10
80008c3e:	f7 e8 00 06 	and	r6,r11,r8
80008c42:	c0 d1       	brne	80008c5c <sys_alloc+0x5a0>
80008c44:	f7 e8 10 08 	or	r8,r11,r8
80008c48:	8f 18       	st.w	r7[0x4],r8
80008c4a:	2b 5a       	sub	r10,-75
80008c4c:	ee 0a 09 25 	st.w	r7[r10<<0x2],r5
80008c50:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
80008c54:	8b 6a       	st.w	r5[0x18],r10
80008c56:	8b 35       	st.w	r5[0xc],r5
80008c58:	8b 25       	st.w	r5[0x8],r5
80008c5a:	c3 98       	rjmp	80008ccc <sys_alloc+0x610>
80008c5c:	f4 c8 ff b5 	sub	r8,r10,-75
80008c60:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
80008c64:	59 fa       	cp.w	r10,31
80008c66:	c0 31       	brne	80008c6c <sys_alloc+0x5b0>
80008c68:	30 0b       	mov	r11,0
80008c6a:	c0 48       	rjmp	80008c72 <sys_alloc+0x5b6>
80008c6c:	a1 9a       	lsr	r10,0x1
80008c6e:	f4 0b 11 19 	rsub	r11,r10,25
80008c72:	f2 0b 09 4b 	lsl	r11,r9,r11
80008c76:	70 1a       	ld.w	r10,r8[0x4]
80008c78:	e0 1a ff fc 	andl	r10,0xfffc
80008c7c:	14 39       	cp.w	r9,r10
80008c7e:	c1 90       	breq	80008cb0 <sys_alloc+0x5f4>
80008c80:	f6 06 16 1f 	lsr	r6,r11,0x1f
80008c84:	ec ca ff fc 	sub	r10,r6,-4
80008c88:	f0 0a 00 24 	add	r4,r8,r10<<0x2
80008c8c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008c90:	58 0a       	cp.w	r10,0
80008c92:	c0 40       	breq	80008c9a <sys_alloc+0x5de>
80008c94:	a1 7b       	lsl	r11,0x1
80008c96:	14 98       	mov	r8,r10
80008c98:	ce fb       	rjmp	80008c76 <sys_alloc+0x5ba>
80008c9a:	6e 49       	ld.w	r9,r7[0x10]
80008c9c:	08 39       	cp.w	r9,r4
80008c9e:	e0 8b 00 17 	brhi	80008ccc <sys_alloc+0x610>
80008ca2:	2f c6       	sub	r6,-4
80008ca4:	f0 06 09 25 	st.w	r8[r6<<0x2],r5
80008ca8:	8b 68       	st.w	r5[0x18],r8
80008caa:	8b 35       	st.w	r5[0xc],r5
80008cac:	8b 25       	st.w	r5[0x8],r5
80008cae:	c0 f8       	rjmp	80008ccc <sys_alloc+0x610>
80008cb0:	70 29       	ld.w	r9,r8[0x8]
80008cb2:	6e 4a       	ld.w	r10,r7[0x10]
80008cb4:	10 3a       	cp.w	r10,r8
80008cb6:	e0 8b 00 0b 	brhi	80008ccc <sys_alloc+0x610>
80008cba:	12 3a       	cp.w	r10,r9
80008cbc:	e0 8b 00 08 	brhi	80008ccc <sys_alloc+0x610>
80008cc0:	93 35       	st.w	r9[0xc],r5
80008cc2:	91 25       	st.w	r8[0x8],r5
80008cc4:	8b 29       	st.w	r5[0x8],r9
80008cc6:	8b 38       	st.w	r5[0xc],r8
80008cc8:	30 08       	mov	r8,0
80008cca:	8b 68       	st.w	r5[0x18],r8
    check_free_chunk(m, q);
  }

  check_malloced_chunk(m, chunk2mem(p), nb);
  return chunk2mem(p);
80008ccc:	2f 8c       	sub	r12,-8
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
          sp->base = tbase;
          sp->size += tsize;
          return prepend_alloc(m, tbase, oldbase, nb);
80008cce:	c0 49       	rjmp	80008ed6 <sys_alloc+0x81a>


/* Add a segment to hold a new noncontiguous region */
static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {
  /* Determine locations and sizes of segment, fenceposts, old top */
  char* old_top = (char*)m->top;
80008cd0:	6e 60       	ld.w	r0,r7[0x18]
80008cd2:	50 20       	stdsp	sp[0x8],r0
  msegmentptr oldsp = segment_holding(m, old_top);
80008cd4:	00 9b       	mov	r11,r0
80008cd6:	0e 9c       	mov	r12,r7
80008cd8:	f0 1f 00 9a 	mcall	80008f40 <sys_alloc+0x884>
  char* old_end = oldsp->base + oldsp->size;
80008cdc:	78 03       	ld.w	r3,r12[0x0]
80008cde:	78 18       	ld.w	r8,r12[0x4]
80008ce0:	10 03       	add	r3,r8
  size_t ssize = pad_request(sizeof(struct malloc_segment));
  char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
80008ce2:	e6 c9 00 2f 	sub	r9,r3,47
  size_t offset = align_offset(chunk2mem(rawsp));
80008ce6:	e6 c8 00 27 	sub	r8,r3,39
80008cea:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008cee:	c0 31       	brne	80008cf4 <sys_alloc+0x638>
80008cf0:	30 02       	mov	r2,0
80008cf2:	c0 58       	rjmp	80008cfc <sys_alloc+0x640>
80008cf4:	f0 02 11 08 	rsub	r2,r8,8
80008cf8:	e5 d2 c0 03 	bfextu	r2,r2,0x0,0x3
  char* asp = rawsp + offset;
80008cfc:	f2 02 00 02 	add	r2,r9,r2
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
80008d00:	40 28       	lddsp	r8,sp[0x8]
80008d02:	2f 08       	sub	r8,-16
80008d04:	40 29       	lddsp	r9,sp[0x8]
80008d06:	10 32       	cp.w	r2,r8
80008d08:	f2 02 17 30 	movlo	r2,r9
  mchunkptr sp = (mchunkptr)csp;
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
80008d0c:	e4 c8 ff f8 	sub	r8,r2,-8
80008d10:	50 08       	stdsp	sp[0x0],r8
  mchunkptr tnext = chunk_plus_offset(sp, ssize);
80008d12:	e4 c4 ff e8 	sub	r4,r2,-24
  mchunkptr p = tnext;
  int nfences = 0;

  /* reset top to new space */
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
80008d16:	e2 ca 00 28 	sub	r10,r1,40
80008d1a:	0a 9b       	mov	r11,r5
80008d1c:	0e 9c       	mov	r12,r7
80008d1e:	f0 1f 00 8d 	mcall	80008f50 <sys_alloc+0x894>

  /* Set up segment record */
  assert(is_aligned(ss));
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
80008d22:	31 b8       	mov	r8,27
80008d24:	85 18       	st.w	r2[0x4],r8
  *ss = m->seg; /* Push current record */
80008d26:	ee c8 fe 48 	sub	r8,r7,-440
80008d2a:	70 09       	ld.w	r9,r8[0x0]
80008d2c:	40 0b       	lddsp	r11,sp[0x0]
80008d2e:	97 09       	st.w	r11[0x0],r9
80008d30:	70 19       	ld.w	r9,r8[0x4]
80008d32:	97 19       	st.w	r11[0x4],r9
80008d34:	70 29       	ld.w	r9,r8[0x8]
80008d36:	97 29       	st.w	r11[0x8],r9
80008d38:	70 38       	ld.w	r8,r8[0xc]
80008d3a:	97 38       	st.w	r11[0xc],r8
  m->seg.base = tbase;
80008d3c:	ef 45 01 b8 	st.w	r7[440],r5
  m->seg.size = tsize;
80008d40:	ef 41 01 bc 	st.w	r7[444],r1
  m->seg.sflags = mmapped;
80008d44:	40 1a       	lddsp	r10,sp[0x4]
80008d46:	ef 4a 01 c4 	st.w	r7[452],r10
  m->seg.next = ss;
80008d4a:	ef 4b 01 c0 	st.w	r7[448],r11

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
    p->head = FENCEPOST_HEAD;
80008d4e:	30 79       	mov	r9,7
  m->seg.sflags = mmapped;
  m->seg.next = ss;

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
80008d50:	2f c4       	sub	r4,-4
    p->head = FENCEPOST_HEAD;
80008d52:	08 98       	mov	r8,r4
80008d54:	10 a9       	st.w	r8++,r9
    ++nfences;
    if ((char*)(&(nextp->head)) < old_end)
80008d56:	10 33       	cp.w	r3,r8
80008d58:	fe 9b ff fc 	brhi	80008d50 <sys_alloc+0x694>
      break;
  }
  assert(nfences >= 2);

  /* Insert the rest of old top into a bin as an ordinary free chunk */
  if (csp != old_top) {
80008d5c:	40 29       	lddsp	r9,sp[0x8]
80008d5e:	04 39       	cp.w	r9,r2
80008d60:	e0 80 00 aa 	breq	80008eb4 <sys_alloc+0x7f8>
    mchunkptr q = (mchunkptr)old_top;
    size_t psize = csp - old_top;
80008d64:	12 12       	sub	r2,r9
    mchunkptr tn = chunk_plus_offset(q, psize);
80008d66:	e0 02 00 08 	add	r8,r0,r2
    set_free_with_pinuse(q, psize, tn);
80008d6a:	70 19       	ld.w	r9,r8[0x4]
80008d6c:	a1 c9       	cbr	r9,0x0
80008d6e:	91 19       	st.w	r8[0x4],r9
80008d70:	04 99       	mov	r9,r2
80008d72:	a1 a9       	sbr	r9,0x0
80008d74:	81 19       	st.w	r0[0x4],r9
80008d76:	91 02       	st.w	r8[0x0],r2
    insert_chunk(m, q, psize);
80008d78:	e4 08 16 03 	lsr	r8,r2,0x3
80008d7c:	59 f8       	cp.w	r8,31
80008d7e:	e0 8b 00 1b 	brhi	80008db4 <sys_alloc+0x6f8>
80008d82:	ee c9 ff dc 	sub	r9,r7,-36
80008d86:	f2 08 00 39 	add	r9,r9,r8<<0x3
80008d8a:	6e 0a       	ld.w	r10,r7[0x0]
80008d8c:	30 1b       	mov	r11,1
80008d8e:	f6 08 09 48 	lsl	r8,r11,r8
80008d92:	f1 ea 00 0b 	and	r11,r8,r10
80008d96:	c0 51       	brne	80008da0 <sys_alloc+0x6e4>
80008d98:	14 48       	or	r8,r10
80008d9a:	8f 08       	st.w	r7[0x0],r8
80008d9c:	12 98       	mov	r8,r9
80008d9e:	c0 68       	rjmp	80008daa <sys_alloc+0x6ee>
80008da0:	72 28       	ld.w	r8,r9[0x8]
80008da2:	6e 4a       	ld.w	r10,r7[0x10]
80008da4:	14 38       	cp.w	r8,r10
80008da6:	f2 08 17 30 	movlo	r8,r9
80008daa:	93 20       	st.w	r9[0x8],r0
80008dac:	91 30       	st.w	r8[0xc],r0
80008dae:	81 28       	st.w	r0[0x8],r8
80008db0:	81 39       	st.w	r0[0xc],r9
80008db2:	c8 18       	rjmp	80008eb4 <sys_alloc+0x7f8>
80008db4:	e4 08 16 08 	lsr	r8,r2,0x8
80008db8:	c0 31       	brne	80008dbe <sys_alloc+0x702>
80008dba:	30 09       	mov	r9,0
80008dbc:	c2 d8       	rjmp	80008e16 <sys_alloc+0x75a>
80008dbe:	e0 48 ff ff 	cp.w	r8,65535
80008dc2:	e0 88 00 04 	brls	80008dca <sys_alloc+0x70e>
80008dc6:	31 f9       	mov	r9,31
80008dc8:	c2 78       	rjmp	80008e16 <sys_alloc+0x75a>
80008dca:	f0 cb 01 00 	sub	r11,r8,256
80008dce:	b1 8b       	lsr	r11,0x10
80008dd0:	e2 1b 00 08 	andl	r11,0x8,COH
80008dd4:	f0 0b 09 48 	lsl	r8,r8,r11
80008dd8:	f0 ca 10 00 	sub	r10,r8,4096
80008ddc:	b1 8a       	lsr	r10,0x10
80008dde:	e2 1a 00 04 	andl	r10,0x4,COH
80008de2:	f0 0a 09 48 	lsl	r8,r8,r10
80008de6:	f0 c9 40 00 	sub	r9,r8,16384
80008dea:	b1 89       	lsr	r9,0x10
80008dec:	e2 19 00 02 	andl	r9,0x2,COH
80008df0:	f0 09 09 48 	lsl	r8,r8,r9
80008df4:	af 98       	lsr	r8,0xf
80008df6:	f6 0b 11 0e 	rsub	r11,r11,14
80008dfa:	f6 0a 01 0a 	sub	r10,r11,r10
80008dfe:	f4 09 01 09 	sub	r9,r10,r9
80008e02:	f2 08 00 08 	add	r8,r9,r8
80008e06:	f0 c9 ff f9 	sub	r9,r8,-7
80008e0a:	e4 09 0a 49 	lsr	r9,r2,r9
80008e0e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80008e12:	f2 08 00 19 	add	r9,r9,r8<<0x1
80008e16:	81 79       	st.w	r0[0x1c],r9
80008e18:	30 08       	mov	r8,0
80008e1a:	81 58       	st.w	r0[0x14],r8
80008e1c:	81 48       	st.w	r0[0x10],r8
80008e1e:	6e 18       	ld.w	r8,r7[0x4]
80008e20:	30 1a       	mov	r10,1
80008e22:	f4 09 09 4a 	lsl	r10,r10,r9
80008e26:	f5 e8 00 0b 	and	r11,r10,r8
80008e2a:	c0 d1       	brne	80008e44 <sys_alloc+0x788>
80008e2c:	f5 e8 10 08 	or	r8,r10,r8
80008e30:	8f 18       	st.w	r7[0x4],r8
80008e32:	2b 59       	sub	r9,-75
80008e34:	ee 09 09 20 	st.w	r7[r9<<0x2],r0
80008e38:	ee 09 00 29 	add	r9,r7,r9<<0x2
80008e3c:	81 69       	st.w	r0[0x18],r9
80008e3e:	81 30       	st.w	r0[0xc],r0
80008e40:	81 20       	st.w	r0[0x8],r0
80008e42:	c3 98       	rjmp	80008eb4 <sys_alloc+0x7f8>
80008e44:	f2 c8 ff b5 	sub	r8,r9,-75
80008e48:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
80008e4c:	59 f9       	cp.w	r9,31
80008e4e:	c0 31       	brne	80008e54 <sys_alloc+0x798>
80008e50:	30 09       	mov	r9,0
80008e52:	c0 48       	rjmp	80008e5a <sys_alloc+0x79e>
80008e54:	a1 99       	lsr	r9,0x1
80008e56:	f2 09 11 19 	rsub	r9,r9,25
80008e5a:	e4 09 09 49 	lsl	r9,r2,r9
80008e5e:	70 1a       	ld.w	r10,r8[0x4]
80008e60:	e0 1a ff fc 	andl	r10,0xfffc
80008e64:	14 32       	cp.w	r2,r10
80008e66:	c1 90       	breq	80008e98 <sys_alloc+0x7dc>
80008e68:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80008e6c:	f6 ca ff fc 	sub	r10,r11,-4
80008e70:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
80008e74:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008e78:	58 0a       	cp.w	r10,0
80008e7a:	c0 40       	breq	80008e82 <sys_alloc+0x7c6>
80008e7c:	a1 79       	lsl	r9,0x1
80008e7e:	14 98       	mov	r8,r10
80008e80:	ce fb       	rjmp	80008e5e <sys_alloc+0x7a2>
80008e82:	6e 49       	ld.w	r9,r7[0x10]
80008e84:	18 39       	cp.w	r9,r12
80008e86:	e0 8b 00 17 	brhi	80008eb4 <sys_alloc+0x7f8>
80008e8a:	2f cb       	sub	r11,-4
80008e8c:	f0 0b 09 20 	st.w	r8[r11<<0x2],r0
80008e90:	81 68       	st.w	r0[0x18],r8
80008e92:	81 30       	st.w	r0[0xc],r0
80008e94:	81 20       	st.w	r0[0x8],r0
80008e96:	c0 f8       	rjmp	80008eb4 <sys_alloc+0x7f8>
80008e98:	70 29       	ld.w	r9,r8[0x8]
80008e9a:	6e 4a       	ld.w	r10,r7[0x10]
80008e9c:	10 3a       	cp.w	r10,r8
80008e9e:	e0 8b 00 0b 	brhi	80008eb4 <sys_alloc+0x7f8>
80008ea2:	12 3a       	cp.w	r10,r9
80008ea4:	e0 8b 00 08 	brhi	80008eb4 <sys_alloc+0x7f8>
80008ea8:	93 30       	st.w	r9[0xc],r0
80008eaa:	91 20       	st.w	r8[0x8],r0
80008eac:	81 29       	st.w	r0[0x8],r9
80008eae:	81 38       	st.w	r0[0xc],r8
80008eb0:	30 08       	mov	r8,0
80008eb2:	81 68       	st.w	r0[0x18],r8
        else
          add_segment(m, tbase, tsize, mmap_flag);
      }
    }

    if (nb < m->topsize) { /* Allocate from new or extended top space */
80008eb4:	6e 38       	ld.w	r8,r7[0xc]
80008eb6:	10 36       	cp.w	r6,r8
80008eb8:	c0 e2       	brcc	80008ed4 <sys_alloc+0x818>
      size_t rsize = m->topsize -= nb;
80008eba:	0c 18       	sub	r8,r6
80008ebc:	8f 38       	st.w	r7[0xc],r8
      mchunkptr p = m->top;
80008ebe:	6e 6c       	ld.w	r12,r7[0x18]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
80008ec0:	f8 06 00 09 	add	r9,r12,r6
80008ec4:	8f 69       	st.w	r7[0x18],r9
      r->head = rsize | PINUSE_BIT;
80008ec6:	a1 a8       	sbr	r8,0x0
80008ec8:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
80008eca:	e8 16 00 03 	orl	r6,0x3
80008ece:	99 16       	st.w	r12[0x4],r6
      check_top_chunk(m, m->top);
      check_malloced_chunk(m, chunk2mem(p), nb);
      return chunk2mem(p);
80008ed0:	2f 8c       	sub	r12,-8
80008ed2:	c0 28       	rjmp	80008ed6 <sys_alloc+0x81a>
80008ed4:	30 0c       	mov	r12,0
    }
  }

  MALLOC_FAILURE_ACTION;
  return 0;
}
80008ed6:	2f dd       	sub	sp,-12
80008ed8:	d8 32       	popm	r0-r7,pc
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
      r->head = rsize | PINUSE_BIT;
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
      check_top_chunk(m, m->top);
      check_malloced_chunk(m, chunk2mem(p), nb);
      return chunk2mem(p);
80008eda:	30 01       	mov	r1,0
80008edc:	3f f4       	mov	r4,-1
80008ede:	fe 9f fc 96 	bral	8000880a <sys_alloc+0x14e>
80008ee2:	3f f4       	mov	r4,-1
80008ee4:	fe 9f fc 93 	bral	8000880a <sys_alloc+0x14e>
80008ee8:	08 95       	mov	r5,r4
80008eea:	30 08       	mov	r8,0
80008eec:	50 18       	stdsp	sp[0x4],r8
80008eee:	fe 9f fc f2 	bral	800088d2 <sys_alloc+0x216>
      }
    }
  }

  if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
80008ef2:	49 28       	lddpc	r8,80008f38 <sys_alloc+0x87c>
80008ef4:	70 28       	ld.w	r8,r8[0x8]
80008ef6:	f0 cc ff d7 	sub	r12,r8,-41
80008efa:	0c 0c       	add	r12,r6
80008efc:	5c 38       	neg	r8
80008efe:	10 6c       	and	r12,r8
    if (asize < HALF_MAX_SIZE_T) {
80008f00:	e0 6b ff fe 	mov	r11,65534
80008f04:	ea 1b 7f ff 	orh	r11,0x7fff
80008f08:	16 3c       	cp.w	r12,r11
80008f0a:	fe 9b ff e5 	brhi	80008ed4 <sys_alloc+0x818>
80008f0e:	fe 9f fc c5 	bral	80008898 <sys_alloc+0x1dc>
80008f12:	12 98       	mov	r8,r9
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
          !is_extern_segment(sp) &&
80008f14:	70 3a       	ld.w	r10,r8[0xc]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008f16:	14 9b       	mov	r11,r10
80008f18:	e2 1b 00 08 	andl	r11,0x8,COH
80008f1c:	fe 90 fd 2c 	breq	80008974 <sys_alloc+0x2b8>
80008f20:	fe 9f fd 42 	bral	800089a4 <sys_alloc+0x2e8>
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
            !is_extern_segment(sp) &&
80008f24:	72 38       	ld.w	r8,r9[0xc]
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
80008f26:	10 9a       	mov	r10,r8
80008f28:	e2 1a 00 08 	andl	r10,0x8,COH
80008f2c:	fe 90 fd 53 	breq	800089d2 <sys_alloc+0x316>
80008f30:	cd 0a       	rjmp	80008cd0 <sys_alloc+0x614>
80008f32:	00 00       	add	r0,r0
80008f34:	80 00       	ld.sh	r0,r0[0x0]
80008f36:	72 8c       	ld.w	r12,r9[0x20]
80008f38:	00 00       	add	r0,r0
80008f3a:	14 ec       	st.h	--r10,r12
80008f3c:	80 00       	ld.sh	r0,r0[0x0]
80008f3e:	94 24       	ld.sh	r4,r10[0x4]
80008f40:	80 00       	ld.sh	r0,r0[0x0]
80008f42:	72 70       	ld.w	r0,r9[0x1c]
80008f44:	80 00       	ld.sh	r0,r0[0x0]
80008f46:	93 f0       	st.w	r9[0x3c],r0
80008f48:	80 00       	ld.sh	r0,r0[0x0]
80008f4a:	73 04       	ld.w	r4,r9[0x40]
80008f4c:	00 00       	add	r0,r0
80008f4e:	13 24       	ld.uh	r4,r9++
80008f50:	80 00       	ld.sh	r0,r0[0x0]
80008f52:	72 d4       	ld.w	r4,r9[0x34]

80008f54 <mspace_malloc>:
  mspace versions of routines are near-clones of the global
  versions. This is not so nice but better than the alternatives.
*/


void* mspace_malloc(mspace msp, size_t bytes) {
80008f54:	eb cd 40 e0 	pushm	r5-r7,lr
  mstate ms = (mstate)msp;
80008f58:	18 97       	mov	r7,r12
    return 0;
  }
  if (!PREACTION(ms)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
80008f5a:	e0 4b 00 f4 	cp.w	r11,244
80008f5e:	e0 8b 00 c2 	brhi	800090e2 <mspace_malloc+0x18e>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
80008f62:	58 ab       	cp.w	r11,10
80008f64:	e0 8b 00 04 	brhi	80008f6c <mspace_malloc+0x18>
80008f68:	31 06       	mov	r6,16
80008f6a:	c0 58       	rjmp	80008f74 <mspace_malloc+0x20>
80008f6c:	f6 c6 ff f5 	sub	r6,r11,-11
80008f70:	e0 16 ff f8 	andl	r6,0xfff8
      idx = small_index(nb);
80008f74:	ec 08 16 03 	lsr	r8,r6,0x3
      smallbits = ms->smallmap >> idx;
80008f78:	6e 0e       	ld.w	lr,r7[0x0]
80008f7a:	10 9b       	mov	r11,r8
80008f7c:	fc 08 0a 49 	lsr	r9,lr,r8

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
80008f80:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80008f84:	c2 a0       	breq	80008fd8 <mspace_malloc+0x84>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
80008f86:	ec 19 00 01 	eorl	r9,0x1
80008f8a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80008f8e:	f2 08 00 08 	add	r8,r9,r8
        b = smallbin_at(ms, idx);
80008f92:	ee ca ff dc 	sub	r10,r7,-36
80008f96:	f4 08 00 3a 	add	r10,r10,r8<<0x3
        p = b->fd;
80008f9a:	74 2c       	ld.w	r12,r10[0x8]
        assert(chunksize(p) == small_index2size(idx));
        unlink_first_small_chunk(ms, b, p, idx);
80008f9c:	78 2b       	ld.w	r11,r12[0x8]
80008f9e:	16 3a       	cp.w	r10,r11
80008fa0:	c0 91       	brne	80008fb2 <mspace_malloc+0x5e>
80008fa2:	30 19       	mov	r9,1
80008fa4:	f2 08 09 49 	lsl	r9,r9,r8
80008fa8:	5c d9       	com	r9
80008faa:	f3 ee 00 0e 	and	lr,r9,lr
80008fae:	8f 0e       	st.w	r7[0x0],lr
80008fb0:	c0 78       	rjmp	80008fbe <mspace_malloc+0x6a>
80008fb2:	6e 49       	ld.w	r9,r7[0x10]
80008fb4:	16 39       	cp.w	r9,r11
80008fb6:	f5 fb 8a 02 	st.wls	r10[0x8],r11
80008fba:	f7 fa 8a 03 	st.wls	r11[0xc],r10
        set_inuse_and_pinuse(ms, p, small_index2size(idx));
80008fbe:	a3 78       	lsl	r8,0x3
80008fc0:	10 99       	mov	r9,r8
80008fc2:	e8 19 00 03 	orl	r9,0x3
80008fc6:	99 19       	st.w	r12[0x4],r9
80008fc8:	f8 08 00 08 	add	r8,r12,r8
80008fcc:	70 19       	ld.w	r9,r8[0x4]
80008fce:	a1 a9       	sbr	r9,0x0
80008fd0:	91 19       	st.w	r8[0x4],r9
        mem = chunk2mem(p);
80008fd2:	2f 8c       	sub	r12,-8
        check_malloced_chunk(ms, mem, nb);
        goto postaction;
80008fd4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      }

      else if (nb > ms->dvsize) {
80008fd8:	6e 28       	ld.w	r8,r7[0x8]
80008fda:	10 36       	cp.w	r6,r8
80008fdc:	e0 88 00 98 	brls	8000910c <mspace_malloc+0x1b8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
80008fe0:	58 09       	cp.w	r9,0
80008fe2:	c7 70       	breq	800090d0 <mspace_malloc+0x17c>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
80008fe4:	30 28       	mov	r8,2
80008fe6:	f0 0b 09 48 	lsl	r8,r8,r11
80008fea:	f0 0a 11 00 	rsub	r10,r8,0
80008fee:	f5 e8 10 08 	or	r8,r10,r8
80008ff2:	f2 0b 09 49 	lsl	r9,r9,r11
80008ff6:	f1 e9 00 09 	and	r9,r8,r9
          binmap_t leastbit = least_bit(leftbits);
          compute_bit2idx(leastbit, i);
80008ffa:	f2 0a 11 00 	rsub	r10,r9,0
80008ffe:	12 6a       	and	r10,r9
80009000:	20 1a       	sub	r10,1
80009002:	f4 09 16 0c 	lsr	r9,r10,0xc
80009006:	e2 19 00 10 	andl	r9,0x10,COH
8000900a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000900e:	f4 08 16 05 	lsr	r8,r10,0x5
80009012:	e2 18 00 08 	andl	r8,0x8,COH
80009016:	f0 09 00 09 	add	r9,r8,r9
8000901a:	f4 08 0a 4a 	lsr	r10,r10,r8
8000901e:	f4 08 16 02 	lsr	r8,r10,0x2
80009022:	e2 18 00 04 	andl	r8,0x4,COH
80009026:	f2 08 00 0b 	add	r11,r9,r8
8000902a:	f4 08 0a 4a 	lsr	r10,r10,r8
8000902e:	f4 09 16 01 	lsr	r9,r10,0x1
80009032:	e2 19 00 02 	andl	r9,0x2,COH
80009036:	f6 09 00 08 	add	r8,r11,r9
8000903a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000903e:	f3 da c0 21 	bfextu	r9,r10,0x1,0x1
80009042:	12 08       	add	r8,r9
80009044:	f4 09 0a 49 	lsr	r9,r10,r9
80009048:	12 08       	add	r8,r9
          b = smallbin_at(ms, i);
8000904a:	ee cb ff dc 	sub	r11,r7,-36
8000904e:	f6 08 00 39 	add	r9,r11,r8<<0x3
          p = b->fd;
80009052:	72 2c       	ld.w	r12,r9[0x8]
          assert(chunksize(p) == small_index2size(i));
          unlink_first_small_chunk(ms, b, p, i);
80009054:	78 2a       	ld.w	r10,r12[0x8]
80009056:	14 39       	cp.w	r9,r10
80009058:	c0 91       	brne	8000906a <mspace_malloc+0x116>
8000905a:	30 19       	mov	r9,1
8000905c:	f2 08 09 49 	lsl	r9,r9,r8
80009060:	5c d9       	com	r9
80009062:	f3 ee 00 0e 	and	lr,r9,lr
80009066:	8f 0e       	st.w	r7[0x0],lr
80009068:	c0 78       	rjmp	80009076 <mspace_malloc+0x122>
8000906a:	6e 4e       	ld.w	lr,r7[0x10]
8000906c:	14 3e       	cp.w	lr,r10
8000906e:	f3 fa 8a 02 	st.wls	r9[0x8],r10
80009072:	f5 f9 8a 03 	st.wls	r10[0xc],r9
          rsize = small_index2size(i) - nb;
80009076:	a3 78       	lsl	r8,0x3
80009078:	0c 18       	sub	r8,r6
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
            set_inuse_and_pinuse(ms, p, small_index2size(i));
          else {
            set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
8000907a:	0c 99       	mov	r9,r6
8000907c:	e8 19 00 03 	orl	r9,0x3
80009080:	99 19       	st.w	r12[0x4],r9
            r = chunk_plus_offset(p, nb);
80009082:	f8 06 00 06 	add	r6,r12,r6
            set_size_and_pinuse_of_free_chunk(r, rsize);
80009086:	10 99       	mov	r9,r8
80009088:	a1 a9       	sbr	r9,0x0
8000908a:	8d 19       	st.w	r6[0x4],r9
8000908c:	ec 08 09 08 	st.w	r6[r8],r8
            replace_dv(ms, r, rsize);
80009090:	6e 2a       	ld.w	r10,r7[0x8]
80009092:	58 0a       	cp.w	r10,0
80009094:	c1 90       	breq	800090c6 <mspace_malloc+0x172>
80009096:	6e 59       	ld.w	r9,r7[0x14]
80009098:	a3 9a       	lsr	r10,0x3
8000909a:	f6 0a 00 3b 	add	r11,r11,r10<<0x3
8000909e:	6e 0e       	ld.w	lr,r7[0x0]
800090a0:	30 15       	mov	r5,1
800090a2:	ea 0a 09 4a 	lsl	r10,r5,r10
800090a6:	f5 ee 00 05 	and	r5,r10,lr
800090aa:	c0 51       	brne	800090b4 <mspace_malloc+0x160>
800090ac:	1c 4a       	or	r10,lr
800090ae:	8f 0a       	st.w	r7[0x0],r10
800090b0:	16 9a       	mov	r10,r11
800090b2:	c0 68       	rjmp	800090be <mspace_malloc+0x16a>
800090b4:	76 2a       	ld.w	r10,r11[0x8]
800090b6:	6e 4e       	ld.w	lr,r7[0x10]
800090b8:	1c 3a       	cp.w	r10,lr
800090ba:	f6 0a 17 30 	movlo	r10,r11
800090be:	97 29       	st.w	r11[0x8],r9
800090c0:	95 39       	st.w	r10[0xc],r9
800090c2:	93 2a       	st.w	r9[0x8],r10
800090c4:	93 3b       	st.w	r9[0xc],r11
800090c6:	8f 28       	st.w	r7[0x8],r8
800090c8:	8f 56       	st.w	r7[0x14],r6
          }
          mem = chunk2mem(p);
800090ca:	2f 8c       	sub	r12,-8
          check_malloced_chunk(ms, mem, nb);
          goto postaction;
800090cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
        }

        else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
800090d0:	6e 18       	ld.w	r8,r7[0x4]
800090d2:	58 08       	cp.w	r8,0
800090d4:	c3 e0       	breq	80009150 <mspace_malloc+0x1fc>
800090d6:	0c 9b       	mov	r11,r6
800090d8:	0e 9c       	mov	r12,r7
800090da:	f0 1f 00 2a 	mcall	80009180 <mspace_malloc+0x22c>
800090de:	c4 e1       	brne	8000917a <mspace_malloc+0x226>
800090e0:	c1 28       	rjmp	80009104 <mspace_malloc+0x1b0>
          check_malloced_chunk(ms, mem, nb);
          goto postaction;
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
800090e2:	fe 5b ff bf 	cp.w	r11,-65
800090e6:	e0 88 00 04 	brls	800090ee <mspace_malloc+0x19a>
800090ea:	3f f6       	mov	r6,-1
800090ec:	c0 c8       	rjmp	80009104 <mspace_malloc+0x1b0>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    else {
      nb = pad_request(bytes);
800090ee:	f6 c6 ff f5 	sub	r6,r11,-11
800090f2:	e0 16 ff f8 	andl	r6,0xfff8
      if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
800090f6:	78 18       	ld.w	r8,r12[0x4]
800090f8:	58 08       	cp.w	r8,0
800090fa:	c0 50       	breq	80009104 <mspace_malloc+0x1b0>
800090fc:	0c 9b       	mov	r11,r6
800090fe:	f0 1f 00 22 	mcall	80009184 <mspace_malloc+0x230>
80009102:	c3 c1       	brne	8000917a <mspace_malloc+0x226>
        check_malloced_chunk(ms, mem, nb);
        goto postaction;
      }
    }

    if (nb <= ms->dvsize) {
80009104:	6e 28       	ld.w	r8,r7[0x8]
80009106:	10 36       	cp.w	r6,r8
80009108:	e0 8b 00 24 	brhi	80009150 <mspace_malloc+0x1fc>
      size_t rsize = ms->dvsize - nb;
8000910c:	f0 06 01 09 	sub	r9,r8,r6
      mchunkptr p = ms->dv;
80009110:	6e 5c       	ld.w	r12,r7[0x14]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
80009112:	58 f9       	cp.w	r9,15
80009114:	e0 88 00 0f 	brls	80009132 <mspace_malloc+0x1de>
        mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
80009118:	f8 06 00 08 	add	r8,r12,r6
8000911c:	8f 58       	st.w	r7[0x14],r8
        ms->dvsize = rsize;
8000911e:	8f 29       	st.w	r7[0x8],r9
        set_size_and_pinuse_of_free_chunk(r, rsize);
80009120:	12 9a       	mov	r10,r9
80009122:	a1 aa       	sbr	r10,0x0
80009124:	91 1a       	st.w	r8[0x4],r10
80009126:	f0 09 09 09 	st.w	r8[r9],r9
        set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
8000912a:	e8 16 00 03 	orl	r6,0x3
8000912e:	99 16       	st.w	r12[0x4],r6
80009130:	c0 d8       	rjmp	8000914a <mspace_malloc+0x1f6>
      }
      else { /* exhaust dv */
        size_t dvs = ms->dvsize;
        ms->dvsize = 0;
80009132:	30 09       	mov	r9,0
80009134:	8f 29       	st.w	r7[0x8],r9
        ms->dv = 0;
80009136:	8f 59       	st.w	r7[0x14],r9
        set_inuse_and_pinuse(ms, p, dvs);
80009138:	10 99       	mov	r9,r8
8000913a:	e8 19 00 03 	orl	r9,0x3
8000913e:	99 19       	st.w	r12[0x4],r9
80009140:	f8 08 00 08 	add	r8,r12,r8
80009144:	70 19       	ld.w	r9,r8[0x4]
80009146:	a1 a9       	sbr	r9,0x0
80009148:	91 19       	st.w	r8[0x4],r9
      }
      mem = chunk2mem(p);
8000914a:	2f 8c       	sub	r12,-8
      check_malloced_chunk(ms, mem, nb);
      goto postaction;
8000914c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }

    else if (nb < ms->topsize) { /* Split top */
80009150:	6e 38       	ld.w	r8,r7[0xc]
80009152:	10 36       	cp.w	r6,r8
80009154:	c0 f2       	brcc	80009172 <mspace_malloc+0x21e>
      size_t rsize = ms->topsize -= nb;
80009156:	0c 18       	sub	r8,r6
80009158:	8f 38       	st.w	r7[0xc],r8
      mchunkptr p = ms->top;
8000915a:	6e 6c       	ld.w	r12,r7[0x18]
      mchunkptr r = ms->top = chunk_plus_offset(p, nb);
8000915c:	f8 06 00 09 	add	r9,r12,r6
80009160:	8f 69       	st.w	r7[0x18],r9
      r->head = rsize | PINUSE_BIT;
80009162:	a1 a8       	sbr	r8,0x0
80009164:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
80009166:	e8 16 00 03 	orl	r6,0x3
8000916a:	99 16       	st.w	r12[0x4],r6
      mem = chunk2mem(p);
8000916c:	2f 8c       	sub	r12,-8
      check_top_chunk(ms, ms->top);
      check_malloced_chunk(ms, mem, nb);
      goto postaction;
8000916e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }

    mem = sys_alloc(ms, nb);
80009172:	0c 9b       	mov	r11,r6
80009174:	0e 9c       	mov	r12,r7
80009176:	f0 1f 00 05 	mcall	80009188 <mspace_malloc+0x234>
#endif
  return 0;
#if defined(__ICCAVR32__)
  #pragma diag_default=Pe111
#endif
}
8000917a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000917e:	00 00       	add	r0,r0
80009180:	80 00       	ld.sh	r0,r0[0x0]
80009182:	7b 30       	ld.w	r0,sp[0x4c]
80009184:	80 00       	ld.sh	r0,r0[0x0]
80009186:	7d 08       	ld.w	r8,lr[0x40]
80009188:	80 00       	ld.sh	r0,r0[0x0]
8000918a:	86 bc       	ld.uh	r12,r3[0x6]

8000918c <malloc>:
  */

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
8000918c:	eb cd 40 c0 	pushm	r6-r7,lr
80009190:	e0 4c 00 f4 	cp.w	r12,244
80009194:	e0 8b 00 d0 	brhi	80009334 <malloc+0x1a8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
80009198:	58 ac       	cp.w	r12,10
8000919a:	e0 8b 00 04 	brhi	800091a2 <malloc+0x16>
8000919e:	31 07       	mov	r7,16
800091a0:	c0 58       	rjmp	800091aa <malloc+0x1e>
800091a2:	f8 c7 ff f5 	sub	r7,r12,-11
800091a6:	e0 17 ff f8 	andl	r7,0xfff8
      idx = small_index(nb);
800091aa:	ee 08 16 03 	lsr	r8,r7,0x3
      smallbits = gm->smallmap >> idx;
800091ae:	fe f9 02 32 	ld.w	r9,pc[562]
800091b2:	72 0e       	ld.w	lr,r9[0x0]
800091b4:	10 9b       	mov	r11,r8
800091b6:	fc 08 0a 49 	lsr	r9,lr,r8

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
800091ba:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
800091be:	c2 d0       	breq	80009218 <malloc+0x8c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
800091c0:	ec 19 00 01 	eorl	r9,0x1
800091c4:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800091c8:	f2 08 00 08 	add	r8,r9,r8
        b = smallbin_at(gm, idx);
800091cc:	fe fa 02 14 	ld.w	r10,pc[532]
800091d0:	2d ca       	sub	r10,-36
800091d2:	f4 08 00 3a 	add	r10,r10,r8<<0x3
        p = b->fd;
800091d6:	74 2c       	ld.w	r12,r10[0x8]
        assert(chunksize(p) == small_index2size(idx));
        unlink_first_small_chunk(gm, b, p, idx);
800091d8:	78 2b       	ld.w	r11,r12[0x8]
800091da:	16 3a       	cp.w	r10,r11
800091dc:	c0 a1       	brne	800091f0 <malloc+0x64>
800091de:	30 19       	mov	r9,1
800091e0:	f2 08 09 49 	lsl	r9,r9,r8
800091e4:	5c d9       	com	r9
800091e6:	f3 ee 00 0e 	and	lr,r9,lr
800091ea:	4f e9       	lddpc	r9,800093e0 <malloc+0x254>
800091ec:	93 0e       	st.w	r9[0x0],lr
800091ee:	c0 88       	rjmp	800091fe <malloc+0x72>
800091f0:	4f c9       	lddpc	r9,800093e0 <malloc+0x254>
800091f2:	72 49       	ld.w	r9,r9[0x10]
800091f4:	16 39       	cp.w	r9,r11
800091f6:	f5 fb 8a 02 	st.wls	r10[0x8],r11
800091fa:	f7 fa 8a 03 	st.wls	r11[0xc],r10
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
800091fe:	a3 78       	lsl	r8,0x3
80009200:	10 99       	mov	r9,r8
80009202:	e8 19 00 03 	orl	r9,0x3
80009206:	99 19       	st.w	r12[0x4],r9
80009208:	f8 08 00 08 	add	r8,r12,r8
8000920c:	70 19       	ld.w	r9,r8[0x4]
8000920e:	a1 a9       	sbr	r9,0x0
80009210:	91 19       	st.w	r8[0x4],r9
        mem = chunk2mem(p);
80009212:	2f 8c       	sub	r12,-8
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
80009214:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }

      else if (nb > gm->dvsize) {
80009218:	4f 28       	lddpc	r8,800093e0 <malloc+0x254>
8000921a:	70 28       	ld.w	r8,r8[0x8]
8000921c:	10 37       	cp.w	r7,r8
8000921e:	e0 88 00 a3 	brls	80009364 <malloc+0x1d8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
80009222:	58 09       	cp.w	r9,0
80009224:	c7 e0       	breq	80009320 <malloc+0x194>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
80009226:	30 28       	mov	r8,2
80009228:	f0 0b 09 48 	lsl	r8,r8,r11
8000922c:	f0 0a 11 00 	rsub	r10,r8,0
80009230:	f5 e8 10 08 	or	r8,r10,r8
80009234:	f2 0b 09 49 	lsl	r9,r9,r11
80009238:	f1 e9 00 09 	and	r9,r8,r9
          binmap_t leastbit = least_bit(leftbits);
          compute_bit2idx(leastbit, i);
8000923c:	f2 0a 11 00 	rsub	r10,r9,0
80009240:	12 6a       	and	r10,r9
80009242:	20 1a       	sub	r10,1
80009244:	f4 09 16 0c 	lsr	r9,r10,0xc
80009248:	e2 19 00 10 	andl	r9,0x10,COH
8000924c:	f4 09 0a 4a 	lsr	r10,r10,r9
80009250:	f4 08 16 05 	lsr	r8,r10,0x5
80009254:	e2 18 00 08 	andl	r8,0x8,COH
80009258:	f0 09 00 09 	add	r9,r8,r9
8000925c:	f4 08 0a 4a 	lsr	r10,r10,r8
80009260:	f4 08 16 02 	lsr	r8,r10,0x2
80009264:	e2 18 00 04 	andl	r8,0x4,COH
80009268:	f2 08 00 0b 	add	r11,r9,r8
8000926c:	f4 08 0a 4a 	lsr	r10,r10,r8
80009270:	f4 09 16 01 	lsr	r9,r10,0x1
80009274:	e2 19 00 02 	andl	r9,0x2,COH
80009278:	f6 09 00 08 	add	r8,r11,r9
8000927c:	f4 09 0a 4a 	lsr	r10,r10,r9
80009280:	f3 da c0 21 	bfextu	r9,r10,0x1,0x1
80009284:	12 08       	add	r8,r9
80009286:	f4 09 0a 49 	lsr	r9,r10,r9
8000928a:	12 08       	add	r8,r9
          b = smallbin_at(gm, i);
8000928c:	4d 5b       	lddpc	r11,800093e0 <malloc+0x254>
8000928e:	2d cb       	sub	r11,-36
80009290:	f6 08 00 39 	add	r9,r11,r8<<0x3
          p = b->fd;
80009294:	72 2c       	ld.w	r12,r9[0x8]
          assert(chunksize(p) == small_index2size(i));
          unlink_first_small_chunk(gm, b, p, i);
80009296:	78 2a       	ld.w	r10,r12[0x8]
80009298:	14 39       	cp.w	r9,r10
8000929a:	c0 a1       	brne	800092ae <malloc+0x122>
8000929c:	30 19       	mov	r9,1
8000929e:	f2 08 09 49 	lsl	r9,r9,r8
800092a2:	5c d9       	com	r9
800092a4:	f3 ee 00 0e 	and	lr,r9,lr
800092a8:	4c e9       	lddpc	r9,800093e0 <malloc+0x254>
800092aa:	93 0e       	st.w	r9[0x0],lr
800092ac:	c0 88       	rjmp	800092bc <malloc+0x130>
800092ae:	4c de       	lddpc	lr,800093e0 <malloc+0x254>
800092b0:	7c 4e       	ld.w	lr,lr[0x10]
800092b2:	14 3e       	cp.w	lr,r10
800092b4:	f3 fa 8a 02 	st.wls	r9[0x8],r10
800092b8:	f5 f9 8a 03 	st.wls	r10[0xc],r9
          rsize = small_index2size(i) - nb;
800092bc:	a3 78       	lsl	r8,0x3
800092be:	0e 18       	sub	r8,r7
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
            set_inuse_and_pinuse(gm, p, small_index2size(i));
          else {
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
800092c0:	0e 99       	mov	r9,r7
800092c2:	e8 19 00 03 	orl	r9,0x3
800092c6:	99 19       	st.w	r12[0x4],r9
            r = chunk_plus_offset(p, nb);
800092c8:	f8 07 00 07 	add	r7,r12,r7
            set_size_and_pinuse_of_free_chunk(r, rsize);
800092cc:	10 99       	mov	r9,r8
800092ce:	a1 a9       	sbr	r9,0x0
800092d0:	8f 19       	st.w	r7[0x4],r9
800092d2:	ee 08 09 08 	st.w	r7[r8],r8
            replace_dv(gm, r, rsize);
800092d6:	4c 39       	lddpc	r9,800093e0 <malloc+0x254>
800092d8:	72 2a       	ld.w	r10,r9[0x8]
800092da:	58 0a       	cp.w	r10,0
800092dc:	c1 c0       	breq	80009314 <malloc+0x188>
800092de:	12 9e       	mov	lr,r9
800092e0:	72 59       	ld.w	r9,r9[0x14]
800092e2:	a3 9a       	lsr	r10,0x3
800092e4:	f6 0a 00 3b 	add	r11,r11,r10<<0x3
800092e8:	7c 0e       	ld.w	lr,lr[0x0]
800092ea:	30 16       	mov	r6,1
800092ec:	ec 0a 09 4a 	lsl	r10,r6,r10
800092f0:	f5 ee 00 06 	and	r6,r10,lr
800092f4:	c0 61       	brne	80009300 <malloc+0x174>
800092f6:	1c 4a       	or	r10,lr
800092f8:	4b a6       	lddpc	r6,800093e0 <malloc+0x254>
800092fa:	8d 0a       	st.w	r6[0x0],r10
800092fc:	16 9a       	mov	r10,r11
800092fe:	c0 78       	rjmp	8000930c <malloc+0x180>
80009300:	76 2a       	ld.w	r10,r11[0x8]
80009302:	4b 8e       	lddpc	lr,800093e0 <malloc+0x254>
80009304:	7c 4e       	ld.w	lr,lr[0x10]
80009306:	1c 3a       	cp.w	r10,lr
80009308:	f6 0a 17 30 	movlo	r10,r11
8000930c:	97 29       	st.w	r11[0x8],r9
8000930e:	95 39       	st.w	r10[0xc],r9
80009310:	93 2a       	st.w	r9[0x8],r10
80009312:	93 3b       	st.w	r9[0xc],r11
80009314:	4b 39       	lddpc	r9,800093e0 <malloc+0x254>
80009316:	93 28       	st.w	r9[0x8],r8
80009318:	93 57       	st.w	r9[0x14],r7
          }
          mem = chunk2mem(p);
8000931a:	2f 8c       	sub	r12,-8
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
8000931c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
        }

        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
80009320:	4b 08       	lddpc	r8,800093e0 <malloc+0x254>
80009322:	70 18       	ld.w	r8,r8[0x4]
80009324:	58 08       	cp.w	r8,0
80009326:	c4 30       	breq	800093ac <malloc+0x220>
80009328:	0e 9b       	mov	r11,r7
8000932a:	4a ec       	lddpc	r12,800093e0 <malloc+0x254>
8000932c:	f0 1f 00 2e 	mcall	800093e4 <malloc+0x258>
80009330:	c5 51       	brne	800093da <malloc+0x24e>
80009332:	c1 48       	rjmp	8000935a <malloc+0x1ce>
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
80009334:	fe 5c ff bf 	cp.w	r12,-65
80009338:	e0 88 00 04 	brls	80009340 <malloc+0x1b4>
8000933c:	3f f7       	mov	r7,-1
8000933e:	c0 e8       	rjmp	8000935a <malloc+0x1ce>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    else {
      nb = pad_request(bytes);
80009340:	f8 c7 ff f5 	sub	r7,r12,-11
80009344:	e0 17 ff f8 	andl	r7,0xfff8
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
80009348:	4a 68       	lddpc	r8,800093e0 <malloc+0x254>
8000934a:	70 18       	ld.w	r8,r8[0x4]
8000934c:	58 08       	cp.w	r8,0
8000934e:	c0 60       	breq	8000935a <malloc+0x1ce>
80009350:	0e 9b       	mov	r11,r7
80009352:	4a 4c       	lddpc	r12,800093e0 <malloc+0x254>
80009354:	f0 1f 00 25 	mcall	800093e8 <malloc+0x25c>
80009358:	c4 11       	brne	800093da <malloc+0x24e>
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
      }
    }

    if (nb <= gm->dvsize) {
8000935a:	4a 28       	lddpc	r8,800093e0 <malloc+0x254>
8000935c:	70 28       	ld.w	r8,r8[0x8]
8000935e:	10 37       	cp.w	r7,r8
80009360:	e0 8b 00 26 	brhi	800093ac <malloc+0x220>
      size_t rsize = gm->dvsize - nb;
80009364:	f0 07 01 09 	sub	r9,r8,r7
      mchunkptr p = gm->dv;
80009368:	49 ea       	lddpc	r10,800093e0 <malloc+0x254>
8000936a:	74 5c       	ld.w	r12,r10[0x14]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
8000936c:	58 f9       	cp.w	r9,15
8000936e:	e0 88 00 0f 	brls	8000938c <malloc+0x200>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
80009372:	f8 07 00 08 	add	r8,r12,r7
80009376:	95 58       	st.w	r10[0x14],r8
        gm->dvsize = rsize;
80009378:	95 29       	st.w	r10[0x8],r9
        set_size_and_pinuse_of_free_chunk(r, rsize);
8000937a:	12 9a       	mov	r10,r9
8000937c:	a1 aa       	sbr	r10,0x0
8000937e:	91 1a       	st.w	r8[0x4],r10
80009380:	f0 09 09 09 	st.w	r8[r9],r9
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80009384:	e8 17 00 03 	orl	r7,0x3
80009388:	99 17       	st.w	r12[0x4],r7
8000938a:	c0 e8       	rjmp	800093a6 <malloc+0x21a>
      }
      else { /* exhaust dv */
        size_t dvs = gm->dvsize;
        gm->dvsize = 0;
8000938c:	49 59       	lddpc	r9,800093e0 <malloc+0x254>
8000938e:	30 0a       	mov	r10,0
80009390:	93 2a       	st.w	r9[0x8],r10
        gm->dv = 0;
80009392:	93 5a       	st.w	r9[0x14],r10
        set_inuse_and_pinuse(gm, p, dvs);
80009394:	10 99       	mov	r9,r8
80009396:	e8 19 00 03 	orl	r9,0x3
8000939a:	99 19       	st.w	r12[0x4],r9
8000939c:	f8 08 00 08 	add	r8,r12,r8
800093a0:	70 19       	ld.w	r9,r8[0x4]
800093a2:	a1 a9       	sbr	r9,0x0
800093a4:	91 19       	st.w	r8[0x4],r9
      }
      mem = chunk2mem(p);
800093a6:	2f 8c       	sub	r12,-8
      check_malloced_chunk(gm, mem, nb);
      goto postaction;
800093a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    }

    else if (nb < gm->topsize) { /* Split top */
800093ac:	48 d8       	lddpc	r8,800093e0 <malloc+0x254>
800093ae:	70 38       	ld.w	r8,r8[0xc]
800093b0:	10 37       	cp.w	r7,r8
800093b2:	c1 02       	brcc	800093d2 <malloc+0x246>
      size_t rsize = gm->topsize -= nb;
800093b4:	0e 18       	sub	r8,r7
800093b6:	48 b9       	lddpc	r9,800093e0 <malloc+0x254>
800093b8:	93 38       	st.w	r9[0xc],r8
      mchunkptr p = gm->top;
800093ba:	72 6c       	ld.w	r12,r9[0x18]
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
800093bc:	f8 07 00 0a 	add	r10,r12,r7
800093c0:	93 6a       	st.w	r9[0x18],r10
      r->head = rsize | PINUSE_BIT;
800093c2:	a1 a8       	sbr	r8,0x0
800093c4:	95 18       	st.w	r10[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
800093c6:	e8 17 00 03 	orl	r7,0x3
800093ca:	99 17       	st.w	r12[0x4],r7
      mem = chunk2mem(p);
800093cc:	2f 8c       	sub	r12,-8
      check_top_chunk(gm, gm->top);
      check_malloced_chunk(gm,