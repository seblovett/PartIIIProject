
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010170  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80012200  80012200  00012600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001c4c  80012400  80012400  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8001404c  8001404c  0001444c  2**0
                  ALLOC
  6 .data         00001114  00000004  80014050  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009e0  00001118  80015164  00015918  2**2
                  ALLOC
  8 .comment      00000060  00000000  00000000  00015918  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c98  00000000  00000000  00015978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00004bf3  00000000  00000000  00017610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00041f6f  00000000  00000000  0001c203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008653  00000000  00000000  0005e172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ee83  00000000  00000000  000667c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ecc  00000000  00000000  00085648  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a4a4  00000000  00000000  0008a514  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001602f  00000000  00000000  000949b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 0285ddd5  00000000  00000000  000aa9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00002308  00000000  00000000  029087bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf af a8 	sub	pc,pc,-20568

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	17 58       	ld.sh	r8,--r11
8000210c:	00 00       	add	r0,r0
8000210e:	17 56       	ld.sh	r6,--r11
80002110:	00 00       	add	r0,r0
80002112:	17 44       	ld.w	r4,--r11
80002114:	00 00       	add	r0,r0
80002116:	17 4c       	ld.w	r12,--r11
80002118:	00 00       	add	r0,r0
8000211a:	17 50       	ld.sh	r0,--r11
8000211c:	00 00       	add	r0,r0
8000211e:	17 4e       	ld.w	lr,--r11

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	3a c2       	mov	r2,-84
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	3a de       	mov	lr,-83

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	39 92       	mov	r2,-103
800021a4:	00 00       	add	r0,r0
800021a6:	17 68       	ld.uh	r8,--r11
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	39 de       	mov	lr,-99
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	11 18       	ld.sh	r8,r8++
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	11 18       	ld.sh	r8,r8++
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	3a c2       	mov	r2,-84
800022ac:	00 00       	add	r0,r0
800022ae:	17 68       	ld.uh	r8,--r11
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 92       	mov	r2,-103
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	17 68       	ld.uh	r8,--r11
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	39 de       	mov	lr,-99

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	11 30       	ld.ub	r0,r8++
80002364:	00 00       	add	r0,r0
80002366:	17 68       	ld.uh	r8,--r11
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	3a c2       	mov	r2,-84
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	39 92       	mov	r2,-103
800024a0:	00 00       	add	r0,r0
800024a2:	17 56       	ld.sh	r6,--r11
800024a4:	00 00       	add	r0,r0
800024a6:	11 18       	ld.sh	r8,r8++
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	17 68       	ld.uh	r8,--r11
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	39 de       	mov	lr,-99
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	3a c2       	mov	r2,-84
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	39 92       	mov	r2,-103
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	17 68       	ld.uh	r8,--r11
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	39 de       	mov	lr,-99
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	39 92       	mov	r2,-103
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	17 68       	ld.uh	r8,--r11
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	39 de       	mov	lr,-99
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	39 92       	mov	r2,-103
80002730:	00 00       	add	r0,r0
80002732:	17 56       	ld.sh	r6,--r11
80002734:	00 00       	add	r0,r0
80002736:	11 18       	ld.sh	r8,r8++
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	17 68       	ld.uh	r8,--r11
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	39 de       	mov	lr,-99
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3a c2       	mov	r2,-84
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	3a de       	mov	lr,-83

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	39 92       	mov	r2,-103
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	17 68       	ld.uh	r8,--r11
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	39 de       	mov	lr,-99
80002834:	00 00       	add	r0,r0
80002836:	11 30       	ld.ub	r0,r8++
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	3a c2       	mov	r2,-84
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	3a de       	mov	lr,-83

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	11 1c       	ld.sh	r12,r8++
80002ab0:	00 00       	add	r0,r0
80002ab2:	11 2c       	ld.uh	r12,r8++
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	3a 04       	mov	r4,-96
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	39 92       	mov	r2,-103
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	3a c2       	mov	r2,-84
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	39 de       	mov	lr,-99
80002ac4:	00 00       	add	r0,r0
80002ac6:	11 30       	ld.ub	r0,r8++
80002ac8:	00 00       	add	r0,r0
80002aca:	17 56       	ld.sh	r6,--r11
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	17 68       	ld.uh	r8,--r11
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	17 58       	ld.sh	r8,--r11
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	11 30       	ld.ub	r0,r8++
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	11 2c       	ld.uh	r12,r8++
80002b3c:	00 00       	add	r0,r0
80002b3e:	11 1c       	ld.sh	r12,r8++
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	11 30       	ld.ub	r0,r8++
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	11 30       	ld.ub	r0,r8++
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	11 30       	ld.ub	r0,r8++
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	11 30       	ld.ub	r0,r8++
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	17 50       	ld.sh	r0,--r11

80002cd0 <acifa_is_aca_ready>:
#include "compiler.h"
#include "acifa.h"

static bool acifa_is_aca_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACARDY_MASK) != 0;
80002cd0:	79 0c       	ld.w	r12,r12[0x40]
}
80002cd2:	f9 dc c3 01 	bfextu	r12,r12,0x18,0x1
80002cd6:	5e fc       	retal	r12

80002cd8 <acifa_is_acb_ready>:

static bool acifa_is_acb_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBRDY_MASK) != 0;
80002cd8:	79 0c       	ld.w	r12,r12[0x40]
}
80002cda:	f9 dc c3 21 	bfextu	r12,r12,0x19,0x1
80002cde:	5e fc       	retal	r12

80002ce0 <acifa_configure>:
void acifa_configure(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel,
		uint8_t input_p,
		uint8_t input_n,
		uint32_t pb_hz)
{
80002ce0:	d4 01       	pushm	lr
	Assert( acifa != NULL );
	if (comp_sel == ACIFA_COMP_SELA) {
80002ce2:	30 1e       	mov	lr,1
80002ce4:	fc 0b 18 00 	cp.b	r11,lr
80002ce8:	c0 a1       	brne	80002cfc <acifa_configure+0x1c>
		acifa->confa
80002cea:	b1 69       	lsl	r9,0x10
80002cec:	e6 19 00 0f 	andh	r9,0xf,COH
80002cf0:	a9 6a       	lsl	r10,0x8
80002cf2:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002cf6:	14 49       	or	r9,r10
80002cf8:	99 09       	st.w	r12[0x0],r9
80002cfa:	c0 98       	rjmp	80002d0c <acifa_configure+0x2c>
				AVR32_ACIFA_CONFA_INSELP_MASK) |
				((input_n <<
				AVR32_ACIFA_CONFA_INSELN_OFFSET) &
				AVR32_ACIFA_CONFA_INSELN_MASK);
	} else {
		acifa->confb
80002cfc:	b1 69       	lsl	r9,0x10
80002cfe:	e6 19 00 0f 	andh	r9,0xf,COH
80002d02:	a9 6a       	lsl	r10,0x8
80002d04:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002d08:	14 49       	or	r9,r10
80002d0a:	99 19       	st.w	r12[0x4],r9
				AVR32_ACIFA_CONFB_INSELN_OFFSET) &
				AVR32_ACIFA_CONFB_INSELN_MASK);
	}

	/* Startup Time of up to 10us max. */
	acifa->sut = (pb_hz / 100000);
80002d0c:	f0 09 16 05 	lsr	r9,r8,0x5
80002d10:	e0 6a 5a c5 	mov	r10,23237
80002d14:	ea 1a 0a 7c 	orh	r10,0xa7c
80002d18:	f2 0a 06 48 	mulu.d	r8,r9,r10
80002d1c:	f2 08 16 07 	lsr	r8,r9,0x7
80002d20:	99 98       	st.w	r12[0x24],r8
}
80002d22:	d8 02       	popm	pc

80002d24 <acifa_configure_hysteresis>:
		uint8_t level)
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
80002d24:	30 18       	mov	r8,1
80002d26:	f0 0b 18 00 	cp.b	r11,r8
80002d2a:	c0 81       	brne	80002d3a <acifa_configure_hysteresis+0x16>
		acifa->confa
			|= ((level <<
80002d2c:	78 08       	ld.w	r8,r12[0x0]
80002d2e:	b9 6a       	lsl	r10,0x18
80002d30:	e6 1a 03 00 	andh	r10,0x300,COH
80002d34:	10 4a       	or	r10,r8
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
		acifa->confa
80002d36:	99 0a       	st.w	r12[0x0],r10
80002d38:	5e fc       	retal	r12
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
			|= ((level <<
80002d3a:	78 18       	ld.w	r8,r12[0x4]
80002d3c:	b9 6a       	lsl	r10,0x18
80002d3e:	e6 1a 03 00 	andh	r10,0x300,COH
80002d42:	10 4a       	or	r10,r8
		acifa->confa
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
80002d44:	99 1a       	st.w	r12[0x4],r10
80002d46:	5e fc       	retal	r12

80002d48 <acifa_start>:
 * \param *acifa        Base address of the ACIFA
 * \param comp_sel      Comparator Selection
 */
void acifa_start(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	18 97       	mov	r7,r12
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002d4e:	30 18       	mov	r8,1
80002d50:	f0 0b 18 00 	cp.b	r11,r8
80002d54:	c0 91       	brne	80002d66 <acifa_start+0x1e>
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d56:	30 98       	mov	r8,9
80002d58:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0f 	mcall	80002d98 <acifa_start+0x50>
80002d60:	cf d0       	breq	80002d5a <acifa_start+0x12>
80002d62:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACA */
		}
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002d66:	30 28       	mov	r8,2
80002d68:	f0 0b 18 00 	cp.b	r11,r8
80002d6c:	c0 91       	brne	80002d7e <acifa_start+0x36>
		acifa->en = (AVR32_ACIFA_EN_ACBEN_MASK) |
80002d6e:	31 28       	mov	r8,18
80002d70:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_acb_ready(acifa)) {
80002d72:	0e 9c       	mov	r12,r7
80002d74:	f0 1f 00 0a 	mcall	80002d9c <acifa_start+0x54>
80002d78:	cf d0       	breq	80002d72 <acifa_start+0x2a>
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACB */
		}
	} else {
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d7e:	31 b8       	mov	r8,27
80002d80:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK) |
				(AVR32_ACIFA_EN_ACBEN_MASK) |
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d82:	0e 9c       	mov	r12,r7
80002d84:	f0 1f 00 05 	mcall	80002d98 <acifa_start+0x50>
80002d88:	cf d0       	breq	80002d82 <acifa_start+0x3a>
			/* Wait for ACA */
		}
		while (!acifa_is_acb_ready(acifa)) {
80002d8a:	0e 9c       	mov	r12,r7
80002d8c:	f0 1f 00 04 	mcall	80002d9c <acifa_start+0x54>
80002d90:	cf d0       	breq	80002d8a <acifa_start+0x42>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c d8       	sub	r8,-51

80002da0 <acifa_is_aca_inp_higher>:
 *  \retval true when ACA Input P is higher than Input N
 *  \retval false when ACA Input P is Lower than Input N
 */
bool acifa_is_aca_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACACS_MASK) != 0;
80002da0:	79 0c       	ld.w	r12,r12[0x40]
}
80002da2:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
80002da6:	5e fc       	retal	r12

80002da8 <acifa_is_acb_inp_higher>:
 *  \retval true when ACB Input P is higher than Input N
 *  \retval false when ACB Input P is Lower than Input N
 */
bool acifa_is_acb_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBCS_MASK) != 0;
80002da8:	79 0c       	ld.w	r12,r12[0x40]
}
80002daa:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80002dae:	5e fc       	retal	r12

80002db0 <acifa_clear_flags>:
 * \param acifa         Base address of the ACIFA
 * \param flag_mask     Flag Mask Value
 */
void acifa_clear_flags(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	acifa->scr = flag_mask;
80002db0:	f9 4b 00 44 	st.w	r12[68],r11
}
80002db4:	5e fc       	retal	r12

80002db6 <acifa_enable_interrupt_inp_lower>:
void acifa_enable_interrupt_inp_lower(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002db6:	30 18       	mov	r8,1
80002db8:	f0 0b 18 00 	cp.b	r11,r8
80002dbc:	c0 71       	brne	80002dca <acifa_enable_interrupt_inp_lower+0x14>
		acifa->CONFA.is = 1;
80002dbe:	78 08       	ld.w	r8,r12[0x0]
80002dc0:	30 19       	mov	r9,1
80002dc2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dc6:	99 08       	st.w	r12[0x0],r8
80002dc8:	5e fc       	retal	r12
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002dca:	30 28       	mov	r8,2
80002dcc:	f0 0b 18 00 	cp.b	r11,r8
80002dd0:	5e 1c       	retne	r12
		acifa->CONFB.is = 1;
80002dd2:	78 18       	ld.w	r8,r12[0x4]
80002dd4:	30 19       	mov	r9,1
80002dd6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dda:	99 18       	st.w	r12[0x4],r8
80002ddc:	5e fc       	retal	r12

80002dde <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002dde:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002de2:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002de6:	18 38       	cp.w	r8,r12
80002de8:	e0 88 00 06 	brls	80002df4 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002dec:	e1 b8 00 42 	mfsr	r8,0x108
80002df0:	10 3c       	cp.w	r12,r8
80002df2:	cf d3       	brcs	80002dec <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002df4:	e1 b8 00 42 	mfsr	r8,0x108
80002df8:	10 3c       	cp.w	r12,r8
80002dfa:	fe 9b ff fd 	brhi	80002df4 <sdramc_ck_delay+0x16>
}
80002dfe:	5e fc       	retal	r12

80002e00 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002e00:	d4 31       	pushm	r0-r7,lr
80002e02:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002e04:	ee 78 42 3f 	mov	r8,999999
80002e08:	f8 08 00 09 	add	r9,r12,r8
80002e0c:	e0 60 de 83 	mov	r0,56963
80002e10:	ea 10 43 1b 	orh	r0,0x431b
80002e14:	f2 00 06 48 	mulu.d	r8,r9,r0
80002e18:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002e1c:	32 5b       	mov	r11,37
80002e1e:	4c 9c       	lddpc	r12,80002f40 <sdramc_init+0x140>
80002e20:	f0 1f 00 49 	mcall	80002f44 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002e24:	fe 68 20 00 	mov	r8,-122880
80002e28:	f0 f9 01 28 	ld.w	r9,r8[296]
80002e2c:	a1 b9       	sbr	r9,0x1
80002e2e:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002e32:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002e36:	ec 08 15 04 	lsl	r8,r6,0x4
80002e3a:	0c 18       	sub	r8,r6
80002e3c:	f0 c3 fc 19 	sub	r3,r8,-999
80002e40:	e0 65 4d d3 	mov	r5,19923
80002e44:	ea 15 10 62 	orh	r5,0x1062
80002e48:	e6 05 06 42 	mulu.d	r2,r3,r5
80002e4c:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002e4e:	ec 02 15 05 	lsl	r2,r6,0x5
80002e52:	0c 02       	add	r2,r6
80002e54:	a1 72       	lsl	r2,0x1
80002e56:	e4 06 00 0b 	add	r11,r2,r6
80002e5a:	f6 cb fc 19 	sub	r11,r11,-999
80002e5e:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002e62:	f6 0a 16 06 	lsr	r10,r11,0x6
80002e66:	bd 6a       	lsl	r10,0x1c
80002e68:	e8 1a 00 f0 	orl	r10,0xf0
80002e6c:	e6 09 15 08 	lsl	r9,r3,0x8
80002e70:	e2 19 0f 00 	andl	r9,0xf00,COH
80002e74:	12 4a       	or	r10,r9
80002e76:	f0 09 15 02 	lsl	r9,r8,0x2
80002e7a:	f2 c9 fc 19 	sub	r9,r9,-999
80002e7e:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e82:	a7 69       	lsl	r9,0x6
80002e84:	e2 19 f0 00 	andl	r9,0xf000,COH
80002e88:	f5 e9 10 08 	or	r8,r10,r9
80002e8c:	e6 09 15 10 	lsl	r9,r3,0x10
80002e90:	e6 19 00 0f 	andh	r9,0xf,COH
80002e94:	12 48       	or	r8,r9
80002e96:	e6 09 15 14 	lsl	r9,r3,0x14
80002e9a:	e6 19 00 f0 	andh	r9,0xf0,COH
80002e9e:	12 48       	or	r8,r9
80002ea0:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002ea4:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002ea8:	f6 cb fc 19 	sub	r11,r11,-999
80002eac:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002eb0:	f6 09 15 12 	lsl	r9,r11,0x12
80002eb4:	e6 19 0f 00 	andh	r9,0xf00,COH
80002eb8:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002eba:	fe 67 2c 00 	mov	r7,-119808
80002ebe:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002ec0:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002ec2:	30 18       	mov	r8,1
80002ec4:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ec6:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ec8:	fc 14 d0 00 	movh	r4,0xd000
80002ecc:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002ece:	ec 0c 10 64 	mul	r12,r6,100
80002ed2:	f0 1f 00 1e 	mcall	80002f48 <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002ed6:	30 28       	mov	r8,2
80002ed8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eda:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002edc:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002ede:	06 9c       	mov	r12,r3
80002ee0:	f0 1f 00 1a 	mcall	80002f48 <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002ee4:	30 48       	mov	r8,4
80002ee6:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ee8:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002eea:	e4 c3 fc 19 	sub	r3,r2,-999
80002eee:	e6 05 06 42 	mulu.d	r2,r3,r5
80002ef2:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002ef4:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002ef6:	06 9c       	mov	r12,r3
80002ef8:	f0 1f 00 14 	mcall	80002f48 <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002efc:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002efe:	06 9c       	mov	r12,r3
80002f00:	f0 1f 00 12 	mcall	80002f48 <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002f04:	30 38       	mov	r8,3
80002f06:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f08:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f0a:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002f0c:	ec 09 15 01 	lsl	r9,r6,0x1
80002f10:	f2 c9 fc 19 	sub	r9,r9,-999
80002f14:	f2 05 06 48 	mulu.d	r8,r9,r5
80002f18:	f2 0c 16 06 	lsr	r12,r9,0x6
80002f1c:	f0 1f 00 0b 	mcall	80002f48 <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002f20:	30 08       	mov	r8,0
80002f22:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f24:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f26:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002f28:	e2 00 06 40 	mulu.d	r0,r1,r0
80002f2c:	b3 81       	lsr	r1,0x12
80002f2e:	e0 68 1e 84 	mov	r8,7812
80002f32:	b1 31       	mul	r1,r8
80002f34:	e2 05 06 44 	mulu.d	r4,r1,r5
80002f38:	a7 85       	lsr	r5,0x6
80002f3a:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002f3c:	6e 18       	ld.w	r8,r7[0x4]
}
80002f3e:	d8 32       	popm	r0-r7,pc
80002f40:	80 01       	ld.sh	r1,r0[0x0]
80002f42:	24 00       	sub	r0,64
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	31 c0       	mov	r0,28
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	2d de       	sub	lr,-35

80002f4c <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002f4c:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002f50:	58 0a       	cp.w	r10,0
80002f52:	c6 30       	breq	80003018 <eic_init+0xcc>
80002f54:	30 08       	mov	r8,0
80002f56:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f58:	30 19       	mov	r9,1
80002f5a:	30 1e       	mov	lr,1
80002f5c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002f60:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002f64:	11 96       	ld.ub	r6,r8[0x1]
80002f66:	f2 06 18 00 	cp.b	r6,r9
80002f6a:	c0 71       	brne	80002f78 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002f6c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f6e:	11 86       	ld.ub	r6,r8[0x0]
80002f70:	fc 06 09 46 	lsl	r6,lr,r6
80002f74:	0a 46       	or	r6,r5
80002f76:	c0 78       	rjmp	80002f84 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002f78:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f7a:	11 86       	ld.ub	r6,r8[0x0]
80002f7c:	fc 06 09 46 	lsl	r6,lr,r6
80002f80:	5c d6       	com	r6
80002f82:	0a 66       	and	r6,r5
80002f84:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f86:	11 a6       	ld.ub	r6,r8[0x2]
80002f88:	f2 06 18 00 	cp.b	r6,r9
80002f8c:	c0 71       	brne	80002f9a <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002f8e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f90:	11 86       	ld.ub	r6,r8[0x0]
80002f92:	fc 06 09 46 	lsl	r6,lr,r6
80002f96:	0a 46       	or	r6,r5
80002f98:	c0 78       	rjmp	80002fa6 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002f9a:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f9c:	11 86       	ld.ub	r6,r8[0x0]
80002f9e:	fc 06 09 46 	lsl	r6,lr,r6
80002fa2:	5c d6       	com	r6
80002fa4:	0a 66       	and	r6,r5
80002fa6:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fa8:	11 b6       	ld.ub	r6,r8[0x3]
80002faa:	f2 06 18 00 	cp.b	r6,r9
80002fae:	c0 71       	brne	80002fbc <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002fb0:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fb2:	11 86       	ld.ub	r6,r8[0x0]
80002fb4:	fc 06 09 46 	lsl	r6,lr,r6
80002fb8:	0a 46       	or	r6,r5
80002fba:	c0 78       	rjmp	80002fc8 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002fbc:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fbe:	11 86       	ld.ub	r6,r8[0x0]
80002fc0:	fc 06 09 46 	lsl	r6,lr,r6
80002fc4:	5c d6       	com	r6
80002fc6:	0a 66       	and	r6,r5
80002fc8:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fca:	11 c6       	ld.ub	r6,r8[0x4]
80002fcc:	f2 06 18 00 	cp.b	r6,r9
80002fd0:	c0 71       	brne	80002fde <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002fd2:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fd4:	11 86       	ld.ub	r6,r8[0x0]
80002fd6:	fc 06 09 46 	lsl	r6,lr,r6
80002fda:	0a 46       	or	r6,r5
80002fdc:	c0 78       	rjmp	80002fea <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002fde:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fe0:	11 86       	ld.ub	r6,r8[0x0]
80002fe2:	fc 06 09 46 	lsl	r6,lr,r6
80002fe6:	5c d6       	com	r6
80002fe8:	0a 66       	and	r6,r5
80002fea:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002fec:	11 d6       	ld.ub	r6,r8[0x5]
80002fee:	f2 06 18 00 	cp.b	r6,r9
80002ff2:	c0 71       	brne	80003000 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002ff4:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ff6:	11 88       	ld.ub	r8,r8[0x0]
80002ff8:	fc 08 09 48 	lsl	r8,lr,r8
80002ffc:	0c 48       	or	r8,r6
80002ffe:	c0 78       	rjmp	8000300c <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003000:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003002:	11 88       	ld.ub	r8,r8[0x0]
80003004:	fc 08 09 48 	lsl	r8,lr,r8
80003008:	5c d8       	com	r8
8000300a:	0c 68       	and	r8,r6
8000300c:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
8000300e:	2f f7       	sub	r7,-1
80003010:	0e 98       	mov	r8,r7
80003012:	0e 3a       	cp.w	r10,r7
80003014:	fe 9b ff a4 	brhi	80002f5c <eic_init+0x10>
80003018:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000301c <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
8000301c:	30 18       	mov	r8,1
8000301e:	f0 0b 09 48 	lsl	r8,r8,r11
80003022:	99 c8       	st.w	r12[0x30],r8
}
80003024:	5e fc       	retal	r12

80003026 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
80003026:	30 18       	mov	r8,1
80003028:	f0 0b 09 48 	lsl	r8,r8,r11
8000302c:	99 08       	st.w	r12[0x0],r8
}
8000302e:	5e fc       	retal	r12

80003030 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003030:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003034:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
80003036:	30 19       	mov	r9,1
80003038:	f2 0b 09 4b 	lsl	r11,r9,r11
8000303c:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
8000303e:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003040:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80003044:	5e fc       	retal	r12

80003046 <eic_disable_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003046:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000304a:	d3 03       	ssrf	0x10

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->idr = 1 << line_number;
8000304c:	30 19       	mov	r9,1
8000304e:	f2 0b 09 4b 	lsl	r11,r9,r11
80003052:	99 1b       	st.w	r12[0x4],r11
	eic->imr;
80003054:	78 29       	ld.w	r9,r12[0x8]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003056:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
8000305a:	5e fc       	retal	r12

8000305c <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000305c:	fe 68 00 00 	mov	r8,-131072
80003060:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003062:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003066:	91 09       	st.w	r8[0x0],r9
}
80003068:	5e fc       	retal	r12

8000306a <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000306a:	fe 68 00 00 	mov	r8,-131072
8000306e:	70 2c       	ld.w	r12,r8[0x8]
}
80003070:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003074:	5e fc       	retal	r12
80003076:	d7 03       	nop

80003078 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003078:	d4 01       	pushm	lr
	while (!flashc_is_ready());
8000307a:	f0 1f 00 03 	mcall	80003084 <flashc_default_wait_until_ready+0xc>
8000307e:	cf e0       	breq	8000307a <flashc_default_wait_until_ready+0x2>
}
80003080:	d8 02       	popm	pc
80003082:	00 00       	add	r0,r0
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	30 6a       	mov	r10,6

80003088 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003088:	eb cd 40 c0 	pushm	r6-r7,lr
8000308c:	18 96       	mov	r6,r12
8000308e:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003090:	48 e8       	lddpc	r8,800030c8 <flashc_issue_command+0x40>
80003092:	70 08       	ld.w	r8,r8[0x0]
80003094:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003096:	fe 68 00 00 	mov	r8,-131072
8000309a:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8000309c:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800030a0:	58 07       	cp.w	r7,0
800030a2:	c0 35       	brlt	800030a8 <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800030a4:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800030a8:	3a 59       	mov	r9,-91
800030aa:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800030ae:	fe 69 00 00 	mov	r9,-131072
800030b2:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800030b4:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800030b6:	e2 19 00 0c 	andl	r9,0xc,COH
800030ba:	48 58       	lddpc	r8,800030cc <flashc_issue_command+0x44>
800030bc:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800030be:	48 38       	lddpc	r8,800030c8 <flashc_issue_command+0x40>
800030c0:	70 08       	ld.w	r8,r8[0x0]
800030c2:	5d 18       	icall	r8
}
800030c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030c8:	00 00       	add	r0,r0
800030ca:	00 08       	add	r8,r0
800030cc:	00 00       	add	r0,r0
800030ce:	11 34       	ld.ub	r4,r8++

800030d0 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800030d0:	eb cd 40 80 	pushm	r7,lr
800030d4:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800030d6:	e0 68 8a 40 	mov	r8,35392
800030da:	ea 18 01 f7 	orh	r8,0x1f7
800030de:	10 3c       	cp.w	r12,r8
800030e0:	e0 88 00 18 	brls	80003110 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
800030e4:	30 1c       	mov	r12,1
800030e6:	f0 1f 00 10 	mcall	80003124 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800030ea:	e0 68 14 80 	mov	r8,5248
800030ee:	ea 18 03 ef 	orh	r8,0x3ef
800030f2:	10 37       	cp.w	r7,r8
800030f4:	e0 8b 00 08 	brhi	80003104 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800030f8:	3f fb       	mov	r11,-1
800030fa:	31 1c       	mov	r12,17
800030fc:	f0 1f 00 0b 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x58>
80003100:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80003104:	3f fb       	mov	r11,-1
80003106:	31 0c       	mov	r12,16
80003108:	f0 1f 00 08 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x58>
8000310c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80003110:	30 0c       	mov	r12,0
80003112:	f0 1f 00 05 	mcall	80003124 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80003116:	3f fb       	mov	r11,-1
80003118:	31 1c       	mov	r12,17
8000311a:	f0 1f 00 04 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x58>
8000311e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003122:	00 00       	add	r0,r0
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	30 5c       	mov	r12,5
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	30 88       	mov	r8,8

8000312c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000312c:	f8 08 16 05 	lsr	r8,r12,0x5
80003130:	a9 78       	lsl	r8,0x9
80003132:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80003136:	58 7b       	cp.w	r11,7
80003138:	e0 8b 00 05 	brhi	80003142 <gpio_enable_module_pin+0x16>
8000313c:	4a 09       	lddpc	r9,800031bc <gpio_enable_module_pin+0x90>
8000313e:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80003142:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003144:	30 19       	mov	r9,1
80003146:	f2 0c 09 49 	lsl	r9,r9,r12
8000314a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000314c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000314e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003150:	c3 18       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003152:	30 19       	mov	r9,1
80003154:	f2 0c 09 49 	lsl	r9,r9,r12
80003158:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000315a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000315c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000315e:	c2 a8       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003160:	30 19       	mov	r9,1
80003162:	f2 0c 09 49 	lsl	r9,r9,r12
80003166:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003168:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000316a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000316c:	c2 38       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000316e:	30 19       	mov	r9,1
80003170:	f2 0c 09 49 	lsl	r9,r9,r12
80003174:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003176:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003178:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000317a:	c1 c8       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000317c:	30 19       	mov	r9,1
8000317e:	f2 0c 09 49 	lsl	r9,r9,r12
80003182:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003184:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003186:	91 d9       	st.w	r8[0x34],r9
		break;
80003188:	c1 58       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000318a:	30 19       	mov	r9,1
8000318c:	f2 0c 09 49 	lsl	r9,r9,r12
80003190:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003192:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003194:	91 d9       	st.w	r8[0x34],r9
		break;
80003196:	c0 e8       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003198:	30 19       	mov	r9,1
8000319a:	f2 0c 09 49 	lsl	r9,r9,r12
8000319e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031a0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031a2:	91 d9       	st.w	r8[0x34],r9
		break;
800031a4:	c0 78       	rjmp	800031b2 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031a6:	30 19       	mov	r9,1
800031a8:	f2 0c 09 49 	lsl	r9,r9,r12
800031ac:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031ae:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031b0:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800031b2:	30 19       	mov	r9,1
800031b4:	f2 0c 09 4c 	lsl	r12,r9,r12
800031b8:	91 2c       	st.w	r8[0x8],r12
800031ba:	5e fd       	retal	0
800031bc:	80 01       	ld.sh	r1,r0[0x0]
800031be:	25 28       	sub	r8,82

800031c0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c0:	d4 21       	pushm	r4-r7,lr
800031c2:	18 97       	mov	r7,r12
800031c4:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031c6:	58 0b       	cp.w	r11,0
800031c8:	c0 31       	brne	800031ce <gpio_enable_module+0xe>
800031ca:	30 05       	mov	r5,0
800031cc:	c0 d8       	rjmp	800031e6 <gpio_enable_module+0x26>
800031ce:	30 05       	mov	r5,0
800031d0:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031d2:	6e 1b       	ld.w	r11,r7[0x4]
800031d4:	6e 0c       	ld.w	r12,r7[0x0]
800031d6:	f0 1f 00 06 	mcall	800031ec <gpio_enable_module+0x2c>
800031da:	18 45       	or	r5,r12
		gpiomap++;
800031dc:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031de:	2f f6       	sub	r6,-1
800031e0:	0c 34       	cp.w	r4,r6
800031e2:	fe 9b ff f8 	brhi	800031d2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800031e6:	0a 9c       	mov	r12,r5
800031e8:	d8 22       	popm	r4-r7,pc
800031ea:	00 00       	add	r0,r0
800031ec:	80 00       	ld.sh	r0,r0[0x0]
800031ee:	31 2c       	mov	r12,18

800031f0 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031f0:	f8 08 16 05 	lsr	r8,r12,0x5
800031f4:	a9 78       	lsl	r8,0x9
800031f6:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
800031fa:	30 19       	mov	r9,1
800031fc:	f2 0c 09 4c 	lsl	r12,r9,r12
80003200:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80003204:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
80003208:	5e fc       	retal	r12

8000320a <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000320a:	f8 08 16 05 	lsr	r8,r12,0x5
8000320e:	a9 78       	lsl	r8,0x9
80003210:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003214:	30 19       	mov	r9,1
80003216:	f2 0c 09 4c 	lsl	r12,r9,r12
8000321a:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000321e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003222:	91 1c       	st.w	r8[0x4],r12
}
80003224:	5e fc       	retal	r12

80003226 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003226:	f8 08 16 05 	lsr	r8,r12,0x5
8000322a:	a9 78       	lsl	r8,0x9
8000322c:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003230:	30 19       	mov	r9,1
80003232:	f2 0c 09 4c 	lsl	r12,r9,r12
80003236:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000323a:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000323e:	91 1c       	st.w	r8[0x4],r12
}
80003240:	5e fc       	retal	r12

80003242 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003242:	c0 08       	rjmp	80003242 <_unhandled_interrupt>

80003244 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003244:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003248:	49 99       	lddpc	r9,800032ac <INTC_register_interrupt+0x68>
8000324a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000324e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003252:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003254:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003258:	58 0a       	cp.w	r10,0
8000325a:	c0 91       	brne	8000326c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000325c:	49 59       	lddpc	r9,800032b0 <INTC_register_interrupt+0x6c>
8000325e:	49 6a       	lddpc	r10,800032b4 <INTC_register_interrupt+0x70>
80003260:	12 1a       	sub	r10,r9
80003262:	fe 79 00 00 	mov	r9,-65536
80003266:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000326a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
8000326c:	58 1a       	cp.w	r10,1
8000326e:	c0 a1       	brne	80003282 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003270:	49 09       	lddpc	r9,800032b0 <INTC_register_interrupt+0x6c>
80003272:	49 2a       	lddpc	r10,800032b8 <INTC_register_interrupt+0x74>
80003274:	12 1a       	sub	r10,r9
80003276:	bf aa       	sbr	r10,0x1e
80003278:	fe 79 00 00 	mov	r9,-65536
8000327c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003280:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003282:	58 2a       	cp.w	r10,2
80003284:	c0 a1       	brne	80003298 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003286:	48 b9       	lddpc	r9,800032b0 <INTC_register_interrupt+0x6c>
80003288:	48 da       	lddpc	r10,800032bc <INTC_register_interrupt+0x78>
8000328a:	12 1a       	sub	r10,r9
8000328c:	bf ba       	sbr	r10,0x1f
8000328e:	fe 79 00 00 	mov	r9,-65536
80003292:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003296:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003298:	48 69       	lddpc	r9,800032b0 <INTC_register_interrupt+0x6c>
8000329a:	48 aa       	lddpc	r10,800032c0 <INTC_register_interrupt+0x7c>
8000329c:	12 1a       	sub	r10,r9
8000329e:	ea 1a c0 00 	orh	r10,0xc000
800032a2:	fe 79 00 00 	mov	r9,-65536
800032a6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800032aa:	5e fc       	retal	r12
800032ac:	80 01       	ld.sh	r1,r0[0x0]
800032ae:	25 48       	sub	r8,84
800032b0:	80 01       	ld.sh	r1,r0[0x0]
800032b2:	22 00       	sub	r0,32
800032b4:	80 01       	ld.sh	r1,r0[0x0]
800032b6:	23 04       	sub	r4,48
800032b8:	80 01       	ld.sh	r1,r0[0x0]
800032ba:	23 12       	sub	r2,49
800032bc:	80 01       	ld.sh	r1,r0[0x0]
800032be:	23 20       	sub	r0,50
800032c0:	80 01       	ld.sh	r1,r0[0x0]
800032c2:	23 2e       	sub	lr,50

800032c4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032c6:	49 18       	lddpc	r8,80003308 <INTC_init_interrupts+0x44>
800032c8:	e3 b8 00 01 	mtsr	0x4,r8
800032cc:	49 0e       	lddpc	lr,8000330c <INTC_init_interrupts+0x48>
800032ce:	30 07       	mov	r7,0
800032d0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d2:	49 0c       	lddpc	r12,80003310 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d4:	49 05       	lddpc	r5,80003314 <INTC_init_interrupts+0x50>
800032d6:	10 15       	sub	r5,r8
800032d8:	fe 76 00 00 	mov	r6,-65536
800032dc:	c1 18       	rjmp	800032fe <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032de:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032e8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ea:	10 3a       	cp.w	r10,r8
800032ec:	fe 9b ff fc 	brhi	800032e4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f4:	2f f7       	sub	r7,-1
800032f6:	2f 8e       	sub	lr,-8
800032f8:	e0 47 00 2f 	cp.w	r7,47
800032fc:	c0 50       	breq	80003306 <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032fe:	7c 08       	ld.w	r8,lr[0x0]
80003300:	58 08       	cp.w	r8,0
80003302:	ce e1       	brne	800032de <INTC_init_interrupts+0x1a>
80003304:	cf 6b       	rjmp	800032f0 <INTC_init_interrupts+0x2c>
80003306:	d8 22       	popm	r4-r7,pc
80003308:	80 01       	ld.sh	r1,r0[0x0]
8000330a:	22 00       	sub	r0,32
8000330c:	80 01       	ld.sh	r1,r0[0x0]
8000330e:	25 48       	sub	r8,84
80003310:	80 00       	ld.sh	r0,r0[0x0]
80003312:	32 42       	mov	r2,36
80003314:	80 01       	ld.sh	r1,r0[0x0]
80003316:	23 04       	sub	r4,48

80003318 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003318:	fe 78 00 00 	mov	r8,-65536
8000331c:	e0 69 00 83 	mov	r9,131
80003320:	f2 0c 01 0c 	sub	r12,r9,r12
80003324:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003328:	f2 ca ff c0 	sub	r10,r9,-64
8000332c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003330:	58 08       	cp.w	r8,0
80003332:	c0 21       	brne	80003336 <_get_interrupt_handler+0x1e>
80003334:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003336:	f0 08 12 00 	clz	r8,r8
8000333a:	48 5a       	lddpc	r10,8000334c <_get_interrupt_handler+0x34>
8000333c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003340:	f0 08 11 1f 	rsub	r8,r8,31
80003344:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003346:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334a:	5e fc       	retal	r12
8000334c:	80 01       	ld.sh	r1,r0[0x0]
8000334e:	25 48       	sub	r8,84

80003350 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003350:	e1 b9 00 00 	mfsr	r9,0x0
80003354:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
80003356:	fe 78 04 00 	mov	r8,-64512
8000335a:	fc 1a aa 00 	movh	r10,0xaa00
8000335e:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80003362:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80003364:	12 98       	mov	r8,r9
80003366:	e6 18 00 01 	andh	r8,0x1,COH
8000336a:	c0 21       	brne	8000336e <pm_set_mclk_source+0x1e>
8000336c:	d5 03       	csrf	0x10

  return PASS;
}
8000336e:	5e fd       	retal	0

80003370 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003370:	eb cd 40 c0 	pushm	r6-r7,lr
80003374:	16 97       	mov	r7,r11
80003376:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
80003378:	58 0c       	cp.w	r12,0
8000337a:	c0 50       	breq	80003384 <pcl_switch_to_osc+0x14>
8000337c:	fe 7c d8 f0 	mov	r12,-10000
80003380:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80003384:	30 0c       	mov	r12,0
80003386:	f0 1f 00 08 	mcall	800033a4 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
8000338a:	30 1a       	mov	r10,1
8000338c:	0c 9b       	mov	r11,r6
8000338e:	30 0c       	mov	r12,0
80003390:	f0 1f 00 06 	mcall	800033a8 <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003394:	0e 9c       	mov	r12,r7
80003396:	f0 1f 00 06 	mcall	800033ac <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000339a:	30 1c       	mov	r12,1
8000339c:	f0 1f 00 05 	mcall	800033b0 <pcl_switch_to_osc+0x40>
800033a0:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	38 2c       	mov	r12,-126
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	37 b8       	mov	r8,123
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	30 d0       	mov	r0,13
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	33 50       	mov	r0,53

800033b4 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
800033b4:	58 2c       	cp.w	r12,2
800033b6:	c2 80       	breq	80003406 <pwm_write_protect_sw_unlock+0x52>
800033b8:	e0 89 00 07 	brgt	800033c6 <pwm_write_protect_sw_unlock+0x12>
800033bc:	58 0c       	cp.w	r12,0
800033be:	c0 a0       	breq	800033d2 <pwm_write_protect_sw_unlock+0x1e>
800033c0:	58 1c       	cp.w	r12,1
800033c2:	c5 61       	brne	8000346e <pwm_write_protect_sw_unlock+0xba>
800033c4:	c1 48       	rjmp	800033ec <pwm_write_protect_sw_unlock+0x38>
800033c6:	58 4c       	cp.w	r12,4
800033c8:	c3 90       	breq	8000343a <pwm_write_protect_sw_unlock+0x86>
800033ca:	c2 b5       	brlt	80003420 <pwm_write_protect_sw_unlock+0x6c>
800033cc:	58 5c       	cp.w	r12,5
800033ce:	c5 01       	brne	8000346e <pwm_write_protect_sw_unlock+0xba>
800033d0:	c4 28       	rjmp	80003454 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033d2:	fe 78 4c 00 	mov	r8,-46080
800033d6:	e0 69 4d 04 	mov	r9,19716
800033da:	ea 19 50 57 	orh	r9,0x5057
800033de:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033e2:	f0 f8 00 e8 	ld.w	r8,r8[232]
800033e6:	58 08       	cp.w	r8,0
800033e8:	c4 30       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
800033ea:	c4 18       	rjmp	8000346c <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033ec:	fe 78 4c 00 	mov	r8,-46080
800033f0:	e0 69 4d 08 	mov	r9,19720
800033f4:	ea 19 50 57 	orh	r9,0x5057
800033f8:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033fc:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003400:	58 08       	cp.w	r8,0
80003402:	c3 60       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
80003404:	c3 48       	rjmp	8000346c <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003406:	fe 78 4c 00 	mov	r8,-46080
8000340a:	e0 69 4d 10 	mov	r9,19728
8000340e:	ea 19 50 57 	orh	r9,0x5057
80003412:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003416:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000341a:	58 08       	cp.w	r8,0
8000341c:	c2 90       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
8000341e:	c2 78       	rjmp	8000346c <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003420:	fe 78 4c 00 	mov	r8,-46080
80003424:	e0 69 4d 20 	mov	r9,19744
80003428:	ea 19 50 57 	orh	r9,0x5057
8000342c:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003430:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003434:	58 08       	cp.w	r8,0
80003436:	c1 c0       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
80003438:	c1 a8       	rjmp	8000346c <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000343a:	fe 78 4c 00 	mov	r8,-46080
8000343e:	e0 69 4d 40 	mov	r9,19776
80003442:	ea 19 50 57 	orh	r9,0x5057
80003446:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000344a:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000344e:	58 08       	cp.w	r8,0
80003450:	c0 f0       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
80003452:	c0 d8       	rjmp	8000346c <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003454:	fe 78 4c 00 	mov	r8,-46080
80003458:	e0 69 4d 80 	mov	r9,19840
8000345c:	ea 19 50 57 	orh	r9,0x5057
80003460:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003464:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003468:	58 08       	cp.w	r8,0
8000346a:	c0 20       	breq	8000346e <pwm_write_protect_sw_unlock+0xba>
8000346c:	5e fe       	retal	-1
8000346e:	5e fd       	retal	0

80003470 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003470:	58 0b       	cp.w	r11,0
80003472:	c1 d0       	breq	800034ac <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003474:	58 4c       	cp.w	r12,4
80003476:	e0 8b 00 1b 	brhi	800034ac <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000347a:	76 0a       	ld.w	r10,r11[0x0]
8000347c:	fe 78 4c 00 	mov	r8,-46080
80003480:	f8 c9 ff f0 	sub	r9,r12,-16
80003484:	a5 79       	lsl	r9,0x5
80003486:	f0 09 00 09 	add	r9,r8,r9
8000348a:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
8000348c:	76 19       	ld.w	r9,r11[0x4]
8000348e:	a5 7c       	lsl	r12,0x5
80003490:	f0 0c 00 0c 	add	r12,r8,r12
80003494:	f8 c8 fd fc 	sub	r8,r12,-516
80003498:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000349a:	76 39       	ld.w	r9,r11[0xc]
8000349c:	f8 c8 fd f4 	sub	r8,r12,-524
800034a0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
800034a2:	76 68       	ld.w	r8,r11[0x18]
800034a4:	f8 cc fd e8 	sub	r12,r12,-536
800034a8:	99 08       	st.w	r12[0x0],r8
800034aa:	5e fd       	retal	0
  return PWM_SUCCESS;
800034ac:	5e ff       	retal	1

800034ae <pwm_start_channels>:
}

int pwm_start_channels(unsigned long channels_bitmask)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034ae:	18 98       	mov	r8,r12
800034b0:	e0 18 ff e0 	andl	r8,0xffe0
800034b4:	c0 20       	breq	800034b8 <pwm_start_channels+0xa>
800034b6:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  //pwm->wpsr; // Clear Fault register
  pwm->ena = channels_bitmask; // Enable channels.
800034b8:	fe 78 4c 00 	mov	r8,-46080
800034bc:	91 1c       	st.w	r8[0x4],r12
800034be:	5e fd       	retal	0

800034c0 <pwm_stop_channels>:
  return PWM_SUCCESS;
}

int pwm_stop_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034c0:	18 98       	mov	r8,r12
800034c2:	e0 18 ff e0 	andl	r8,0xffe0
800034c6:	c0 20       	breq	800034ca <pwm_stop_channels+0xa>
800034c8:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.dis = channels_bitmask; // Disable channels.
800034ca:	fe 78 4c 00 	mov	r8,-46080
800034ce:	91 2c       	st.w	r8[0x8],r12
800034d0:	5e fd       	retal	0

800034d2 <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
800034d2:	fe 78 4c 00 	mov	r8,-46080
800034d6:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
800034d8:	5e fd       	retal	0
800034da:	d7 03       	nop

800034dc <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
800034dc:	eb cd 40 c0 	pushm	r6-r7,lr
800034e0:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034e2:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
800034e6:	58 0c       	cp.w	r12,0
800034e8:	c0 31       	brne	800034ee <pwm_init+0x12>
800034ea:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800034ee:	ee 16 00 01 	eorh	r6,0x1
800034f2:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
800034f6:	30 0c       	mov	r12,0
800034f8:	f0 1f 00 37 	mcall	800035d4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
800034fc:	30 1c       	mov	r12,1
800034fe:	f0 1f 00 36 	mcall	800035d4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
80003502:	30 2c       	mov	r12,2
80003504:	f0 1f 00 34 	mcall	800035d4 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
80003508:	30 3c       	mov	r12,3
8000350a:	f0 1f 00 33 	mcall	800035d4 <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000350e:	58 06       	cp.w	r6,0
80003510:	c0 20       	breq	80003514 <pwm_init+0x38>
80003512:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
80003514:	31 f9       	mov	r9,31
80003516:	fe 78 4c 00 	mov	r8,-46080
8000351a:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
8000351c:	ef 39 00 14 	ld.ub	r9,r7[20]
80003520:	30 08       	mov	r8,0
80003522:	f0 09 18 00 	cp.b	r9,r8
80003526:	c0 70       	breq	80003534 <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
80003528:	fe 78 4c 00 	mov	r8,-46080
8000352c:	70 59       	ld.w	r9,r8[0x14]
8000352e:	ea 19 00 1f 	orh	r9,0x1f
80003532:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
80003534:	fe 78 4c 00 	mov	r8,-46080
80003538:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
8000353a:	ef 39 00 15 	ld.ub	r9,r7[21]
8000353e:	30 08       	mov	r8,0
80003540:	f0 09 18 00 	cp.b	r9,r8
80003544:	c1 40       	breq	8000356c <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
80003546:	30 99       	mov	r9,9
80003548:	fe 78 4c 00 	mov	r8,-46080
8000354c:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
8000354e:	ef 39 00 16 	ld.ub	r9,r7[22]
80003552:	30 28       	mov	r8,2
80003554:	f0 09 18 00 	cp.b	r9,r8
80003558:	c0 71       	brne	80003566 <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
8000355a:	fe 78 4c 00 	mov	r8,-46080
8000355e:	70 e9       	ld.w	r9,r8[0x38]
80003560:	e8 19 00 06 	orl	r9,0x6
80003564:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
80003566:	fe 78 4c 00 	mov	r8,-46080
8000356a:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
8000356c:	58 06       	cp.w	r6,0
8000356e:	c0 20       	breq	80003572 <pwm_init+0x96>
80003570:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003572:	6e 08       	ld.w	r8,r7[0x0]
80003574:	6e 39       	ld.w	r9,r7[0xc]
80003576:	a9 69       	lsl	r9,0x8
80003578:	f3 e8 11 09 	or	r9,r9,r8<<0x10
8000357c:	6e 18       	ld.w	r8,r7[0x4]
8000357e:	10 49       	or	r9,r8
80003580:	6e 28       	ld.w	r8,r7[0x8]
80003582:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80003586:	6e 48       	ld.w	r8,r7[0x10]
80003588:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
8000358c:	fe 78 4c 00 	mov	r8,-46080
80003590:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
80003592:	ef 3a 00 16 	ld.ub	r10,r7[22]
80003596:	70 89       	ld.w	r9,r8[0x20]
80003598:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
8000359c:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
8000359e:	70 89       	ld.w	r9,r8[0x20]
800035a0:	ef 3a 00 17 	ld.ub	r10,r7[23]
800035a4:	f5 e9 10 09 	or	r9,r10,r9
800035a8:	91 89       	st.w	r8[0x20],r9
800035aa:	70 89       	ld.w	r9,r8[0x20]
800035ac:	ef 3a 00 18 	ld.ub	r10,r7[24]
800035b0:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800035b4:	91 89       	st.w	r8[0x20],r9
800035b6:	70 89       	ld.w	r9,r8[0x20]
800035b8:	ef 3a 00 19 	ld.ub	r10,r7[25]
800035bc:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800035c0:	91 89       	st.w	r8[0x20],r9
800035c2:	70 89       	ld.w	r9,r8[0x20]
800035c4:	ef 3a 00 1a 	ld.ub	r10,r7[26]
800035c8:	f3 ea 10 39 	or	r9,r9,r10<<0x3
800035cc:	91 89       	st.w	r8[0x20],r9
800035ce:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035d2:	00 00       	add	r0,r0
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	33 b4       	mov	r4,59

800035d8 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800035d8:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035dc:	fe 7a 08 00 	mov	r10,-63488
800035e0:	c0 48       	rjmp	800035e8 <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800035e2:	20 18       	sub	r8,1
800035e4:	c0 21       	brne	800035e8 <scif_pclksr_statushigh_wait+0x10>
800035e6:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035e8:	74 59       	ld.w	r9,r10[0x14]
800035ea:	f9 e9 00 09 	and	r9,r12,r9
800035ee:	cf a0       	breq	800035e2 <scif_pclksr_statushigh_wait+0xa>
800035f0:	5e fd       	retal	0

800035f2 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
800035f2:	58 0c       	cp.w	r12,0
800035f4:	c0 81       	brne	80003604 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800035f6:	fe 79 08 00 	mov	r9,-63488
800035fa:	72 58       	ld.w	r8,r9[0x14]
800035fc:	e2 18 00 10 	andl	r8,0x10,COH
80003600:	cf d0       	breq	800035fa <scif_wait_for_pll_locked+0x8>
80003602:	c0 78       	rjmp	80003610 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80003604:	fe 79 08 00 	mov	r9,-63488
80003608:	72 58       	ld.w	r8,r9[0x14]
8000360a:	e2 18 00 20 	andl	r8,0x20,COH
8000360e:	cf d0       	breq	80003608 <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80003610:	5e fd       	retal	0

80003612 <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80003612:	fe 78 08 00 	mov	r8,-63488
80003616:	f8 c9 ff e7 	sub	r9,r12,-25
8000361a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000361e:	a1 ca       	cbr	r10,0x0
80003620:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003624:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003628:	fe 7a 08 00 	mov	r10,-63488
8000362c:	12 9c       	mov	r12,r9
8000362e:	c0 48       	rjmp	80003636 <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
80003630:	20 18       	sub	r8,1
80003632:	c0 21       	brne	80003636 <scif_stop_gclk+0x24>
80003634:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003636:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
8000363a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000363e:	cf 91       	brne	80003630 <scif_stop_gclk+0x1e>
80003640:	5e fd       	retal	0
80003642:	d7 03       	nop

80003644 <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80003644:	d4 21       	pushm	r4-r7,lr
80003646:	18 97       	mov	r7,r12
80003648:	16 95       	mov	r5,r11
8000364a:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
8000364c:	a1 99       	lsr	r9,0x1
8000364e:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003652:	f8 c9 ff e7 	sub	r9,r12,-25
80003656:	fe 78 08 00 	mov	r8,-63488
8000365a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000365e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003662:	c0 50       	breq	8000366c <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
80003664:	f0 1f 00 18 	mcall	800036c4 <scif_gc_setup+0x80>
80003668:	c1 44       	brge	80003690 <scif_gc_setup+0x4c>
8000366a:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000366c:	a1 76       	lsl	r6,0x1
8000366e:	e2 16 00 02 	andl	r6,0x2,COH
80003672:	a9 65       	lsl	r5,0x8
80003674:	e2 15 0f 00 	andl	r5,0xf00,COH
80003678:	0a 46       	or	r6,r5
8000367a:	b1 64       	lsl	r4,0x10
8000367c:	e6 14 00 ff 	andh	r4,0xff,COH
80003680:	ed e4 10 04 	or	r4,r6,r4
80003684:	2e 77       	sub	r7,-25
80003686:	fe 78 08 00 	mov	r8,-63488
8000368a:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
8000368e:	d8 2a       	popm	r4-r7,pc,r12=0
80003690:	ec 09 15 01 	lsl	r9,r6,0x1
80003694:	e2 19 00 02 	andl	r9,0x2,COH
80003698:	ea 08 15 08 	lsl	r8,r5,0x8
8000369c:	e2 18 0f 00 	andl	r8,0xf00,COH
800036a0:	10 49       	or	r9,r8
800036a2:	e8 08 15 10 	lsl	r8,r4,0x10
800036a6:	e6 18 00 ff 	andh	r8,0xff,COH
800036aa:	10 49       	or	r9,r8
800036ac:	fe 78 08 00 	mov	r8,-63488
800036b0:	2e 77       	sub	r7,-25
800036b2:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
800036b6:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
800036ba:	a1 a9       	sbr	r9,0x0
800036bc:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
800036c0:	d8 2a       	popm	r4-r7,pc,r12=0
800036c2:	00 00       	add	r0,r0
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	36 12       	mov	r2,97

800036c8 <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800036c8:	f8 c9 ff e7 	sub	r9,r12,-25
800036cc:	fe 78 08 00 	mov	r8,-63488
800036d0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036d8:	c0 91       	brne	800036ea <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800036da:	fe 78 08 00 	mov	r8,-63488
800036de:	12 9c       	mov	r12,r9
800036e0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036e4:	a1 a9       	sbr	r9,0x0
800036e6:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
800036ea:	5e fd       	retal	0

800036ec <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
800036ec:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800036ee:	fa c8 ff f8 	sub	r8,sp,-8
800036f2:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800036f6:	fe 78 08 00 	mov	r8,-63488
800036fa:	2f 9c       	sub	r12,-7
800036fc:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80003700:	30 1b       	mov	r11,1
80003702:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80003706:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
8000370a:	e1 ba 00 00 	mfsr	r10,0x0
8000370e:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003710:	f8 0b 15 02 	lsl	r11,r12,0x2
80003714:	ea 1b aa 00 	orh	r11,0xaa00
80003718:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000371a:	f2 f9 ff f8 	ld.w	r9,r9[-8]
8000371e:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80003722:	14 98       	mov	r8,r10
80003724:	e6 18 00 01 	andh	r8,0x1,COH
80003728:	c0 21       	brne	8000372c <scif_pll_enable+0x40>
8000372a:	d5 03       	csrf	0x10

  return PASS;
}
8000372c:	2f ed       	sub	sp,-8
8000372e:	5e fd       	retal	0

80003730 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80003730:	eb cd 40 c0 	pushm	r6-r7,lr
80003734:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80003736:	fa c9 ff f8 	sub	r9,sp,-8
8000373a:	f2 0c 00 28 	add	r8,r9,r12<<0x2
8000373e:	fe 79 08 00 	mov	r9,-63488
80003742:	2f 9c       	sub	r12,-7
80003744:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
80003748:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
8000374c:	f7 3e 00 10 	ld.ub	lr,r11[16]
80003750:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80003754:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
80003758:	17 a7       	ld.ub	r7,r11[0x2]
8000375a:	17 9e       	ld.ub	lr,r11[0x1]
8000375c:	a3 6e       	lsl	lr,0x2
8000375e:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80003762:	17 87       	ld.ub	r7,r11[0x0]
80003764:	0e 96       	mov	r6,r7
80003766:	0e 4e       	or	lr,r7
80003768:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
8000376c:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80003770:	76 2e       	ld.w	lr,r11[0x8]
80003772:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
80003776:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
8000377a:	76 1e       	ld.w	lr,r11[0x4]
8000377c:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80003780:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80003784:	76 3b       	ld.w	r11,r11[0xc]
80003786:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
8000378a:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
8000378e:	e1 ba 00 00 	mfsr	r10,0x0
80003792:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003794:	f8 0b 15 02 	lsl	r11,r12,0x2
80003798:	ea 1b aa 00 	orh	r11,0xaa00
8000379c:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000379e:	f0 f8 ff f8 	ld.w	r8,r8[-8]
800037a2:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800037a6:	14 98       	mov	r8,r10
800037a8:	e6 18 00 01 	andh	r8,0x1,COH
800037ac:	c0 21       	brne	800037b0 <scif_pll_setup+0x80>
800037ae:	d5 03       	csrf	0x10

  return PASS;
}
800037b0:	2f ed       	sub	sp,-8
800037b2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800037b6:	d7 03       	nop

800037b8 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800037b8:	eb cd 40 80 	pushm	r7,lr
800037bc:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800037be:	fa c8 ff f8 	sub	r8,sp,-8
800037c2:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800037c6:	fe 78 08 00 	mov	r8,-63488
800037ca:	f8 c9 ff f7 	sub	r9,r12,-9
800037ce:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800037d2:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800037d6:	30 1b       	mov	r11,1
800037d8:	ef db d2 01 	bfins	r7,r11,0x10,0x1
800037dc:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
800037e0:	e1 bb 00 00 	mfsr	r11,0x0
800037e4:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800037e6:	f2 07 15 02 	lsl	r7,r9,0x2
800037ea:	ea 17 aa 00 	orh	r7,0xaa00
800037ee:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800037f0:	fc fe ff f8 	ld.w	lr,lr[-8]
800037f4:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
800037f8:	16 98       	mov	r8,r11
800037fa:	e6 18 00 01 	andh	r8,0x1,COH
800037fe:	c0 21       	brne	80003802 <scif_enable_osc+0x4a>
80003800:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003802:	58 0a       	cp.w	r10,0
80003804:	c0 e0       	breq	80003820 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
80003806:	58 0c       	cp.w	r12,0
80003808:	c0 61       	brne	80003814 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000380a:	30 1c       	mov	r12,1
8000380c:	f0 1f 00 07 	mcall	80003828 <scif_enable_osc+0x70>
80003810:	c0 80       	breq	80003820 <scif_enable_osc+0x68>
80003812:	c0 58       	rjmp	8000381c <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003814:	30 2c       	mov	r12,2
80003816:	f0 1f 00 05 	mcall	80003828 <scif_enable_osc+0x70>
8000381a:	c0 30       	breq	80003820 <scif_enable_osc+0x68>
8000381c:	3f fc       	mov	r12,-1
8000381e:	c0 28       	rjmp	80003822 <scif_enable_osc+0x6a>
80003820:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003822:	2f ed       	sub	sp,-8
80003824:	e3 cd 80 80 	ldm	sp++,r7,pc
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	35 d8       	mov	r8,93

8000382c <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
8000382c:	58 0c       	cp.w	r12,0
8000382e:	c3 41       	brne	80003896 <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003830:	fe 78 08 00 	mov	r8,-63488
80003834:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003836:	e0 69 84 7f 	mov	r9,33919
8000383a:	ea 19 00 1e 	orh	r9,0x1e
8000383e:	12 3b       	cp.w	r11,r9
80003840:	e0 8b 00 04 	brhi	80003848 <scif_configure_osc_crystalmode+0x1c>
80003844:	30 0b       	mov	r11,0
80003846:	c1 38       	rjmp	8000386c <scif_configure_osc_crystalmode+0x40>
80003848:	e0 69 96 7f 	mov	r9,38527
8000384c:	ea 19 00 98 	orh	r9,0x98
80003850:	12 3b       	cp.w	r11,r9
80003852:	e0 8b 00 04 	brhi	8000385a <scif_configure_osc_crystalmode+0x2e>
80003856:	30 1b       	mov	r11,1
80003858:	c0 a8       	rjmp	8000386c <scif_configure_osc_crystalmode+0x40>
8000385a:	e0 69 24 00 	mov	r9,9216
8000385e:	ea 19 00 f4 	orh	r9,0xf4
80003862:	12 3b       	cp.w	r11,r9
80003864:	f9 bb 03 02 	movlo	r11,2
80003868:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000386c:	30 19       	mov	r9,1
8000386e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003872:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80003876:	e1 ba 00 00 	mfsr	r10,0x0
8000387a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
8000387c:	fe 79 08 00 	mov	r9,-63488
80003880:	32 4b       	mov	r11,36
80003882:	ea 1b aa 00 	orh	r11,0xaa00
80003886:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80003888:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000388a:	14 98       	mov	r8,r10
8000388c:	e6 18 00 01 	andh	r8,0x1,COH
80003890:	c3 51       	brne	800038fa <scif_configure_osc_crystalmode+0xce>
80003892:	d5 03       	csrf	0x10
80003894:	c3 38       	rjmp	800038fa <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
80003896:	fe 78 08 00 	mov	r8,-63488
8000389a:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
8000389c:	e0 69 84 7f 	mov	r9,33919
800038a0:	ea 19 00 1e 	orh	r9,0x1e
800038a4:	12 3b       	cp.w	r11,r9
800038a6:	e0 8b 00 04 	brhi	800038ae <scif_configure_osc_crystalmode+0x82>
800038aa:	30 0b       	mov	r11,0
800038ac:	c1 38       	rjmp	800038d2 <scif_configure_osc_crystalmode+0xa6>
800038ae:	e0 69 96 7f 	mov	r9,38527
800038b2:	ea 19 00 98 	orh	r9,0x98
800038b6:	12 3b       	cp.w	r11,r9
800038b8:	e0 8b 00 04 	brhi	800038c0 <scif_configure_osc_crystalmode+0x94>
800038bc:	30 1b       	mov	r11,1
800038be:	c0 a8       	rjmp	800038d2 <scif_configure_osc_crystalmode+0xa6>
800038c0:	e0 69 24 00 	mov	r9,9216
800038c4:	ea 19 00 f4 	orh	r9,0xf4
800038c8:	12 3b       	cp.w	r11,r9
800038ca:	f9 bb 03 02 	movlo	r11,2
800038ce:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800038d2:	30 19       	mov	r9,1
800038d4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038d8:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800038dc:	e1 ba 00 00 	mfsr	r10,0x0
800038e0:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800038e2:	fe 79 08 00 	mov	r9,-63488
800038e6:	32 8b       	mov	r11,40
800038e8:	ea 1b aa 00 	orh	r11,0xaa00
800038ec:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800038ee:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800038f0:	14 98       	mov	r8,r10
800038f2:	e6 18 00 01 	andh	r8,0x1,COH
800038f6:	c0 21       	brne	800038fa <scif_configure_osc_crystalmode+0xce>
800038f8:	d5 03       	csrf	0x10
  }

  return PASS;
}
800038fa:	5e fd       	retal	0

800038fc <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800038fc:	f8 c8 00 01 	sub	r8,r12,1
80003900:	f0 0b 00 0b 	add	r11,r8,r11
80003904:	f6 0c 0d 0a 	divu	r10,r11,r12
80003908:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000390a:	f4 c8 00 01 	sub	r8,r10,1
8000390e:	e0 48 00 fe 	cp.w	r8,254
80003912:	e0 88 00 03 	brls	80003918 <getBaudDiv+0x1c>
80003916:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003918:	5c 8c       	casts.h	r12
}
8000391a:	5e fc       	retal	r12

8000391c <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000391c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003920:	30 18       	mov	r8,1
80003922:	f0 09 18 00 	cp.b	r9,r8
80003926:	e0 88 00 04 	brls	8000392e <spi_initMaster+0x12>
8000392a:	30 2c       	mov	r12,2
8000392c:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000392e:	e0 68 00 80 	mov	r8,128
80003932:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003934:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003936:	30 19       	mov	r9,1
80003938:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000393c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003940:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003944:	30 09       	mov	r9,0
80003946:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000394a:	30 fa       	mov	r10,15
8000394c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003950:	99 18       	st.w	r12[0x4],r8
80003952:	5e f9       	retal	r9

80003954 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003954:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003958:	30 1e       	mov	lr,1
8000395a:	f6 0e 18 00 	cp.b	lr,r11
8000395e:	f9 be 02 00 	movhs	lr,0
80003962:	30 18       	mov	r8,1
80003964:	f4 08 18 00 	cp.b	r8,r10
80003968:	f9 b8 02 00 	movhs	r8,0
8000396c:	fd e8 10 08 	or	r8,lr,r8
80003970:	30 07       	mov	r7,0
80003972:	ee 08 18 00 	cp.b	r8,r7
80003976:	c0 40       	breq	8000397e <spi_selectionMode+0x2a>
80003978:	30 2c       	mov	r12,2
8000397a:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000397e:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003980:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003984:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003988:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000398c:	99 18       	st.w	r12[0x4],r8
8000398e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003992 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003992:	78 18       	ld.w	r8,r12[0x4]
80003994:	ea 18 00 0f 	orh	r8,0xf
80003998:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000399a:	78 18       	ld.w	r8,r12[0x4]
8000399c:	e2 18 00 04 	andl	r8,0x4,COH
800039a0:	c0 f0       	breq	800039be <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800039a2:	30 e8       	mov	r8,14
800039a4:	f0 0b 18 00 	cp.b	r11,r8
800039a8:	e0 8b 00 19 	brhi	800039da <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800039ac:	78 18       	ld.w	r8,r12[0x4]
800039ae:	b1 6b       	lsl	r11,0x10
800039b0:	ea 1b ff f0 	orh	r11,0xfff0
800039b4:	e8 1b ff ff 	orl	r11,0xffff
800039b8:	10 6b       	and	r11,r8
800039ba:	99 1b       	st.w	r12[0x4],r11
800039bc:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800039be:	30 38       	mov	r8,3
800039c0:	f0 0b 18 00 	cp.b	r11,r8
800039c4:	e0 8b 00 0b 	brhi	800039da <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800039c8:	78 18       	ld.w	r8,r12[0x4]
800039ca:	2f 0b       	sub	r11,-16
800039cc:	30 19       	mov	r9,1
800039ce:	f2 0b 09 4b 	lsl	r11,r9,r11
800039d2:	5c db       	com	r11
800039d4:	10 6b       	and	r11,r8
800039d6:	99 1b       	st.w	r12[0x4],r11
800039d8:	5e fd       	retal	0
800039da:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800039dc:	5e fc       	retal	r12

800039de <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039de:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039e2:	c0 58       	rjmp	800039ec <spi_unselectChip+0xe>
		if (!timeout--) {
800039e4:	58 08       	cp.w	r8,0
800039e6:	c0 21       	brne	800039ea <spi_unselectChip+0xc>
800039e8:	5e ff       	retal	1
800039ea:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039ec:	78 49       	ld.w	r9,r12[0x10]
800039ee:	e2 19 02 00 	andl	r9,0x200,COH
800039f2:	cf 90       	breq	800039e4 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039f4:	78 18       	ld.w	r8,r12[0x4]
800039f6:	ea 18 00 0f 	orh	r8,0xf
800039fa:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800039fc:	fc 18 01 00 	movh	r8,0x100
80003a00:	99 08       	st.w	r12[0x0],r8
80003a02:	5e fd       	retal	0

80003a04 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003a04:	eb cd 40 f8 	pushm	r3-r7,lr
80003a08:	18 95       	mov	r5,r12
80003a0a:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a0c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a10:	30 38       	mov	r8,3
80003a12:	f0 06 18 00 	cp.b	r6,r8
80003a16:	e0 8b 00 4d 	brhi	80003ab0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003a1a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a1e:	30 18       	mov	r8,1
80003a20:	f0 04 18 00 	cp.b	r4,r8
80003a24:	e0 8b 00 46 	brhi	80003ab0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a28:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a2c:	30 78       	mov	r8,7
80003a2e:	f0 03 18 00 	cp.b	r3,r8
80003a32:	e0 88 00 3f 	brls	80003ab0 <spi_setupChipReg+0xac>
80003a36:	31 08       	mov	r8,16
80003a38:	f0 03 18 00 	cp.b	r3,r8
80003a3c:	e0 8b 00 3a 	brhi	80003ab0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a40:	14 9b       	mov	r11,r10
80003a42:	6e 1c       	ld.w	r12,r7[0x4]
80003a44:	f0 1f 00 1d 	mcall	80003ab8 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003a48:	c3 45       	brlt	80003ab0 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003a4a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003a4c:	ec 09 16 01 	lsr	r9,r6,0x1
80003a50:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003a54:	ec 16 00 01 	eorl	r6,0x1
80003a58:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003a5c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003a60:	20 83       	sub	r3,8
80003a62:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003a66:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003a6a:	ef 39 00 09 	ld.ub	r9,r7[9]
80003a6e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003a72:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003a76:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003a7a:	0f 89       	ld.ub	r9,r7[0x0]
80003a7c:	30 1a       	mov	r10,1
80003a7e:	f4 09 18 00 	cp.b	r9,r10
80003a82:	c0 e0       	breq	80003a9e <spi_setupChipReg+0x9a>
80003a84:	c0 a3       	brcs	80003a98 <spi_setupChipReg+0x94>
80003a86:	30 2a       	mov	r10,2
80003a88:	f4 09 18 00 	cp.b	r9,r10
80003a8c:	c0 c0       	breq	80003aa4 <spi_setupChipReg+0xa0>
80003a8e:	30 3a       	mov	r10,3
80003a90:	f4 09 18 00 	cp.b	r9,r10
80003a94:	c0 e1       	brne	80003ab0 <spi_setupChipReg+0xac>
80003a96:	c0 a8       	rjmp	80003aaa <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003a98:	8b c8       	st.w	r5[0x30],r8
80003a9a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003a9e:	8b d8       	st.w	r5[0x34],r8
80003aa0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003aa4:	8b e8       	st.w	r5[0x38],r8
80003aa6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003aaa:	8b f8       	st.w	r5[0x3c],r8
80003aac:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003ab0:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003ab2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003ab6:	00 00       	add	r0,r0
80003ab8:	80 00       	ld.sh	r0,r0[0x0]
80003aba:	38 fc       	mov	r12,-113

80003abc <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003abc:	30 18       	mov	r8,1
80003abe:	99 08       	st.w	r12[0x0],r8
}
80003ac0:	5e fc       	retal	r12

80003ac2 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003ac2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ac6:	c0 58       	rjmp	80003ad0 <spi_write+0xe>
		if (!timeout--) {
80003ac8:	58 08       	cp.w	r8,0
80003aca:	c0 21       	brne	80003ace <spi_write+0xc>
80003acc:	5e ff       	retal	1
80003ace:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ad0:	78 49       	ld.w	r9,r12[0x10]
80003ad2:	e2 19 00 02 	andl	r9,0x2,COH
80003ad6:	cf 90       	breq	80003ac8 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003ad8:	5c 7b       	castu.h	r11
80003ada:	99 3b       	st.w	r12[0xc],r11
80003adc:	5e fd       	retal	0

80003ade <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003ade:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003ae2:	c0 58       	rjmp	80003aec <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003ae4:	58 08       	cp.w	r8,0
80003ae6:	c0 21       	brne	80003aea <spi_read+0xc>
80003ae8:	5e ff       	retal	1
80003aea:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003aec:	78 49       	ld.w	r9,r12[0x10]
80003aee:	e2 19 02 01 	andl	r9,0x201,COH
80003af2:	e0 49 02 01 	cp.w	r9,513
80003af6:	cf 71       	brne	80003ae4 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003af8:	78 28       	ld.w	r8,r12[0x8]
80003afa:	b6 08       	st.h	r11[0x0],r8
80003afc:	5e fd       	retal	0
80003afe:	d7 03       	nop

80003b00 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003b00:	4a e8       	lddpc	r8,80003bb8 <twim_master_interrupt_handler+0xb8>
80003b02:	70 08       	ld.w	r8,r8[0x0]
80003b04:	70 79       	ld.w	r9,r8[0x1c]
80003b06:	4a ea       	lddpc	r10,80003bbc <twim_master_interrupt_handler+0xbc>
80003b08:	74 0a       	ld.w	r10,r10[0x0]
80003b0a:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003b0e:	12 9a       	mov	r10,r9
80003b10:	e2 1a 07 00 	andl	r10,0x700,COH
80003b14:	c1 40       	breq	80003b3c <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003b16:	e2 19 03 00 	andl	r9,0x300,COH
80003b1a:	f9 b9 01 fc 	movne	r9,-4
80003b1e:	f9 b9 00 fe 	moveq	r9,-2
80003b22:	4a 8a       	lddpc	r10,80003bc0 <twim_master_interrupt_handler+0xc0>
80003b24:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003b26:	70 3a       	ld.w	r10,r8[0xc]
80003b28:	30 09       	mov	r9,0
80003b2a:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80003b2e:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003b30:	3f fa       	mov	r10,-1
80003b32:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003b34:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003b36:	4a 48       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xc4>
80003b38:	b0 89       	st.b	r8[0x0],r9
80003b3a:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003b3c:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003b40:	c1 30       	breq	80003b66 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003b42:	4a 2a       	lddpc	r10,80003bc8 <twim_master_interrupt_handler+0xc8>
80003b44:	70 5b       	ld.w	r11,r8[0x14]
80003b46:	74 09       	ld.w	r9,r10[0x0]
80003b48:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80003b4a:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003b4c:	4a 09       	lddpc	r9,80003bcc <twim_master_interrupt_handler+0xcc>
80003b4e:	72 0a       	ld.w	r10,r9[0x0]
80003b50:	20 1a       	sub	r10,1
80003b52:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003b54:	72 09       	ld.w	r9,r9[0x0]
80003b56:	58 09       	cp.w	r9,0
80003b58:	c2 f1       	brne	80003bb6 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80003b5a:	30 19       	mov	r9,1
80003b5c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b5e:	30 09       	mov	r9,0
80003b60:	49 98       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xc4>
80003b62:	b0 89       	st.b	r8[0x0],r9
80003b64:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003b66:	e2 19 00 02 	andl	r9,0x2,COH
80003b6a:	c2 60       	breq	80003bb6 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80003b6c:	49 99       	lddpc	r9,80003bd0 <twim_master_interrupt_handler+0xd0>
80003b6e:	72 09       	ld.w	r9,r9[0x0]
80003b70:	58 09       	cp.w	r9,0
80003b72:	c0 71       	brne	80003b80 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003b74:	30 29       	mov	r9,2
80003b76:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b78:	30 09       	mov	r9,0
80003b7a:	49 38       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xc4>
80003b7c:	b0 89       	st.b	r8[0x0],r9
80003b7e:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80003b80:	49 5a       	lddpc	r10,80003bd4 <twim_master_interrupt_handler+0xd4>
80003b82:	74 09       	ld.w	r9,r10[0x0]
80003b84:	13 3b       	ld.ub	r11,r9++
80003b86:	91 6b       	st.w	r8[0x18],r11
80003b88:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003b8a:	49 28       	lddpc	r8,80003bd0 <twim_master_interrupt_handler+0xd0>
80003b8c:	70 09       	ld.w	r9,r8[0x0]
80003b8e:	20 19       	sub	r9,1
80003b90:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80003b92:	70 08       	ld.w	r8,r8[0x0]
80003b94:	58 08       	cp.w	r8,0
80003b96:	c1 01       	brne	80003bb6 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003b98:	48 b8       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xc4>
80003b9a:	11 88       	ld.ub	r8,r8[0x0]
80003b9c:	58 08       	cp.w	r8,0
80003b9e:	c0 c0       	breq	80003bb6 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80003ba0:	30 09       	mov	r9,0
80003ba2:	48 98       	lddpc	r8,80003bc4 <twim_master_interrupt_handler+0xc4>
80003ba4:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003ba6:	48 d8       	lddpc	r8,80003bd8 <twim_master_interrupt_handler+0xd8>
80003ba8:	70 08       	ld.w	r8,r8[0x0]
80003baa:	70 3a       	ld.w	r10,r8[0xc]
80003bac:	48 99       	lddpc	r9,80003bd0 <twim_master_interrupt_handler+0xd0>
80003bae:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80003bb0:	70 29       	ld.w	r9,r8[0x8]
80003bb2:	48 98       	lddpc	r8,80003bd4 <twim_master_interrupt_handler+0xd4>
80003bb4:	91 09       	st.w	r8[0x0],r9
80003bb6:	d6 03       	rete
80003bb8:	00 00       	add	r0,r0
80003bba:	13 00       	ld.w	r0,r9++
80003bbc:	00 00       	add	r0,r0
80003bbe:	13 14       	ld.sh	r4,r9++
80003bc0:	00 00       	add	r0,r0
80003bc2:	13 0c       	ld.w	r12,r9++
80003bc4:	00 00       	add	r0,r0
80003bc6:	13 18       	ld.sh	r8,r9++
80003bc8:	00 00       	add	r0,r0
80003bca:	13 04       	ld.w	r4,r9++
80003bcc:	00 00       	add	r0,r0
80003bce:	13 08       	ld.w	r8,r9++
80003bd0:	00 00       	add	r0,r0
80003bd2:	13 20       	ld.uh	r0,r9++
80003bd4:	00 00       	add	r0,r0
80003bd6:	13 10       	ld.sh	r0,r9++
80003bd8:	00 00       	add	r0,r0
80003bda:	13 1c       	ld.sh	r12,r9++

80003bdc <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003bdc:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003be0:	f4 0b 0d 0a 	divu	r10,r10,r11
80003be4:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003be8:	e0 48 00 ff 	cp.w	r8,255
80003bec:	e0 8b 00 04 	brhi	80003bf4 <twim_set_speed+0x18>
80003bf0:	30 09       	mov	r9,0
80003bf2:	c2 18       	rjmp	80003c34 <twim_set_speed+0x58>
80003bf4:	30 09       	mov	r9,0
80003bf6:	30 16       	mov	r6,1
80003bf8:	30 7a       	mov	r10,7
80003bfa:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003bfc:	2f f9       	sub	r9,-1
80003bfe:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003c00:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003c02:	e0 48 00 ff 	cp.w	r8,255
80003c06:	f9 be 0b 01 	movhi	lr,1
80003c0a:	f9 be 08 00 	movls	lr,0
80003c0e:	f2 0a 18 00 	cp.b	r10,r9
80003c12:	ec 0b 17 20 	movhs	r11,r6
80003c16:	f9 bb 03 00 	movlo	r11,0
80003c1a:	fd eb 00 0b 	and	r11,lr,r11
80003c1e:	ee 0b 18 00 	cp.b	r11,r7
80003c22:	ce d1       	brne	80003bfc <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003c24:	30 7a       	mov	r10,7
80003c26:	f4 09 18 00 	cp.b	r9,r10
80003c2a:	e0 88 00 05 	brls	80003c34 <twim_set_speed+0x58>
80003c2e:	3f 8c       	mov	r12,-8
80003c30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003c34:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003c38:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80003c3c:	14 18       	sub	r8,r10
80003c3e:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003c42:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003c46:	99 19       	st.w	r12[0x4],r9
80003c48:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80003c4c <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80003c4c:	48 38       	lddpc	r8,80003c58 <twim_status+0xc>
80003c4e:	70 08       	ld.w	r8,r8[0x0]
80003c50:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003c52:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003c56:	5e fc       	retal	r12
80003c58:	00 00       	add	r0,r0
80003c5a:	13 00       	ld.w	r0,r9++

80003c5c <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003c5c:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003c60:	e6 18 00 01 	andh	r8,0x1,COH
80003c64:	c0 21       	brne	80003c68 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003c66:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003c68:	3f f8       	mov	r8,-1
80003c6a:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80003c6c:	99 b8       	st.w	r12[0x2c],r8
}
80003c6e:	5e fc       	retal	r12

80003c70 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80003c70:	eb cd 40 fe 	pushm	r1-r7,lr
80003c74:	18 97       	mov	r7,r12
80003c76:	16 93       	mov	r3,r11
80003c78:	14 95       	mov	r5,r10
80003c7a:	12 92       	mov	r2,r9
80003c7c:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003c7e:	30 14       	mov	r4,1
80003c80:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003c82:	e0 68 00 80 	mov	r8,128
80003c86:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003c88:	30 28       	mov	r8,2
80003c8a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003c8c:	49 e6       	lddpc	r6,80003d04 <twim_write+0x94>
80003c8e:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80003c90:	f0 1f 00 1e 	mcall	80003d08 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003c94:	49 e8       	lddpc	r8,80003d0c <twim_write+0x9c>
80003c96:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003c98:	49 e8       	lddpc	r8,80003d10 <twim_write+0xa0>
80003c9a:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003c9c:	30 09       	mov	r9,0
80003c9e:	49 e8       	lddpc	r8,80003d14 <twim_write+0xa4>
80003ca0:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003ca2:	49 e9       	lddpc	r9,80003d18 <twim_write+0xa8>
80003ca4:	30 08       	mov	r8,0
80003ca6:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003ca8:	6c 08       	ld.w	r8,r6[0x0]
80003caa:	b1 65       	lsl	r5,0x10
80003cac:	e8 15 e0 00 	orl	r5,0xe000
80003cb0:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003cb4:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003cb8:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003cba:	49 9a       	lddpc	r10,80003d1c <twim_write+0xac>
80003cbc:	e0 6b 03 02 	mov	r11,770
80003cc0:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80003cc2:	74 0a       	ld.w	r10,r10[0x0]
80003cc4:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003cc6:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003cc8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cca:	72 08       	ld.w	r8,r9[0x0]
80003ccc:	58 08       	cp.w	r8,0
80003cce:	c0 80       	breq	80003cde <twim_write+0x6e>
80003cd0:	c0 b8       	rjmp	80003ce6 <twim_write+0x76>
		cpu_relax();
80003cd2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cd6:	6c 08       	ld.w	r8,r6[0x0]
80003cd8:	58 08       	cp.w	r8,0
80003cda:	c0 30       	breq	80003ce0 <twim_write+0x70>
80003cdc:	c0 58       	rjmp	80003ce6 <twim_write+0x76>
80003cde:	48 f6       	lddpc	r6,80003d18 <twim_write+0xa8>
80003ce0:	f0 1f 00 10 	mcall	80003d20 <twim_write+0xb0>
80003ce4:	cf 70       	breq	80003cd2 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003ce6:	30 28       	mov	r8,2
80003ce8:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cea:	48 c8       	lddpc	r8,80003d18 <twim_write+0xa8>
80003cec:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cee:	5b c8       	cp.w	r8,-4
80003cf0:	c0 70       	breq	80003cfe <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cf2:	48 a8       	lddpc	r8,80003d18 <twim_write+0xa8>
80003cf4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cf6:	5b e8       	cp.w	r8,-2
80003cf8:	c0 30       	breq	80003cfe <twim_write+0x8e>
80003cfa:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003cfe:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003d02:	00 00       	add	r0,r0
80003d04:	00 00       	add	r0,r0
80003d06:	13 00       	ld.w	r0,r9++
80003d08:	80 00       	ld.sh	r0,r0[0x0]
80003d0a:	3c 5c       	mov	r12,-59
80003d0c:	00 00       	add	r0,r0
80003d0e:	13 10       	ld.sh	r0,r9++
80003d10:	00 00       	add	r0,r0
80003d12:	13 20       	ld.uh	r0,r9++
80003d14:	00 00       	add	r0,r0
80003d16:	13 18       	ld.sh	r8,r9++
80003d18:	00 00       	add	r0,r0
80003d1a:	13 0c       	ld.w	r12,r9++
80003d1c:	00 00       	add	r0,r0
80003d1e:	13 14       	ld.sh	r4,r9++
80003d20:	80 00       	ld.sh	r0,r0[0x0]
80003d22:	3c 4c       	mov	r12,-60

80003d24 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003d24:	d4 01       	pushm	lr
80003d26:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003d28:	30 08       	mov	r8,0
80003d2a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80003d2c:	30 08       	mov	r8,0
80003d2e:	16 99       	mov	r9,r11
80003d30:	10 9a       	mov	r10,r8
80003d32:	1a 9b       	mov	r11,sp
80003d34:	f0 1f 00 02 	mcall	80003d3c <twim_probe+0x18>
}
80003d38:	2f fd       	sub	sp,-4
80003d3a:	d8 02       	popm	pc
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	3c 70       	mov	r0,-57

80003d40 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003d40:	eb cd 40 e0 	pushm	r5-r7,lr
80003d44:	18 97       	mov	r7,r12
80003d46:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003d48:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003d4c:	30 0a       	mov	r10,0
80003d4e:	4a 59       	lddpc	r9,80003de0 <twim_master_init+0xa0>
80003d50:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003d52:	e6 18 00 01 	andh	r8,0x1,COH
80003d56:	c0 b1       	brne	80003d6c <twim_master_init+0x2c>
		cpu_irq_disable ();
80003d58:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80003d5a:	3f f8       	mov	r8,-1
80003d5c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d5e:	30 18       	mov	r8,1
80003d60:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d62:	e0 68 00 80 	mov	r8,128
80003d66:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003d68:	d5 03       	csrf	0x10
80003d6a:	c0 88       	rjmp	80003d7a <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80003d6c:	3f f8       	mov	r8,-1
80003d6e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d70:	30 18       	mov	r8,1
80003d72:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d74:	e0 68 00 80 	mov	r8,128
80003d78:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003d7a:	3f f8       	mov	r8,-1
80003d7c:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d7e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003d82:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003d84:	30 1a       	mov	r10,1
80003d86:	e0 6b 03 20 	mov	r11,800
80003d8a:	49 7c       	lddpc	r12,80003de4 <twim_master_init+0xa4>
80003d8c:	f0 1f 00 17 	mcall	80003de8 <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003d90:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003d94:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003d98:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003d9a:	f0 09 18 00 	cp.b	r9,r8
80003d9e:	f9 b8 01 10 	movne	r8,16
80003da2:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003da6:	f9 b8 01 ff 	movne	r8,-1
80003daa:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80003dae:	6a 0a       	ld.w	r10,r5[0x0]
80003db0:	6a 1b       	ld.w	r11,r5[0x4]
80003db2:	0e 9c       	mov	r12,r7
80003db4:	f0 1f 00 0e 	mcall	80003dec <twim_master_init+0xac>
80003db8:	5b 8c       	cp.w	r12,-8
80003dba:	c1 00       	breq	80003dda <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003dbc:	6a 2b       	ld.w	r11,r5[0x8]
80003dbe:	0e 9c       	mov	r12,r7
80003dc0:	f0 1f 00 0c 	mcall	80003df0 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dc4:	48 78       	lddpc	r8,80003de0 <twim_master_init+0xa0>
80003dc6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dc8:	5b c8       	cp.w	r8,-4
80003dca:	c0 70       	breq	80003dd8 <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dcc:	48 58       	lddpc	r8,80003de0 <twim_master_init+0xa0>
80003dce:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dd0:	5b e8       	cp.w	r8,-2
80003dd2:	c0 30       	breq	80003dd8 <twim_master_init+0x98>
80003dd4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003dd8:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003dda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003dde:	00 00       	add	r0,r0
80003de0:	00 00       	add	r0,r0
80003de2:	13 0c       	ld.w	r12,r9++
80003de4:	80 00       	ld.sh	r0,r0[0x0]
80003de6:	3b 00       	mov	r0,-80
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	32 44       	mov	r4,36
80003dec:	80 00       	ld.sh	r0,r0[0x0]
80003dee:	3b dc       	mov	r12,-67
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3d 24       	mov	r4,-46

80003df4 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003df4:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003df6:	f6 08 15 04 	lsl	r8,r11,0x4
80003dfa:	14 38       	cp.w	r8,r10
80003dfc:	f9 b8 08 10 	movls	r8,16
80003e00:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003e04:	f0 0b 02 4b 	mul	r11,r8,r11
80003e08:	f6 09 16 01 	lsr	r9,r11,0x1
80003e0c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003e10:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003e14:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003e18:	f2 cb 00 01 	sub	r11,r9,1
80003e1c:	e0 4b ff fe 	cp.w	r11,65534
80003e20:	e0 88 00 03 	brls	80003e26 <usart_set_async_baudrate+0x32>
80003e24:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003e26:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003e28:	e8 6e 00 00 	mov	lr,524288
80003e2c:	59 08       	cp.w	r8,16
80003e2e:	fc 08 17 10 	movne	r8,lr
80003e32:	f9 b8 00 00 	moveq	r8,0
80003e36:	e4 1b ff f7 	andh	r11,0xfff7
80003e3a:	e0 1b fe cf 	andl	r11,0xfecf
80003e3e:	16 48       	or	r8,r11
80003e40:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003e42:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003e46:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003e4a:	99 89       	st.w	r12[0x20],r9
80003e4c:	d8 0a       	popm	pc,r12=0

80003e4e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003e4e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003e50:	e2 18 00 02 	andl	r8,0x2,COH
80003e54:	c0 31       	brne	80003e5a <usart_write_char+0xc>
80003e56:	30 2c       	mov	r12,2
80003e58:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003e5a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003e5e:	99 7b       	st.w	r12[0x1c],r11
80003e60:	5e fd       	retal	0
80003e62:	d7 03       	nop

80003e64 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003e64:	eb cd 40 e0 	pushm	r5-r7,lr
80003e68:	18 96       	mov	r6,r12
80003e6a:	16 95       	mov	r5,r11
80003e6c:	e0 67 27 0f 	mov	r7,9999
80003e70:	c0 68       	rjmp	80003e7c <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003e72:	58 07       	cp.w	r7,0
80003e74:	c0 31       	brne	80003e7a <usart_putchar+0x16>
80003e76:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003e7a:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003e7c:	0a 9b       	mov	r11,r5
80003e7e:	0c 9c       	mov	r12,r6
80003e80:	f0 1f 00 03 	mcall	80003e8c <usart_putchar+0x28>
80003e84:	cf 71       	brne	80003e72 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003e86:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e8a:	00 00       	add	r0,r0
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	3e 4e       	mov	lr,-28

80003e90 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80003e90:	78 58       	ld.w	r8,r12[0x14]
80003e92:	e2 18 00 e0 	andl	r8,0xe0,COH
80003e96:	c0 30       	breq	80003e9c <usart_read_char+0xc>
80003e98:	30 4c       	mov	r12,4
80003e9a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80003e9c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80003e9e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ea2:	c0 31       	brne	80003ea8 <usart_read_char+0x18>
80003ea4:	30 3c       	mov	r12,3
80003ea6:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80003ea8:	78 68       	ld.w	r8,r12[0x18]
80003eaa:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003eae:	97 08       	st.w	r11[0x0],r8
80003eb0:	5e fd       	retal	0
80003eb2:	d7 03       	nop

80003eb4 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80003eb4:	eb cd 40 c0 	pushm	r6-r7,lr
80003eb8:	20 1d       	sub	sp,4
80003eba:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80003ebc:	1a 97       	mov	r7,sp
80003ebe:	1a 9b       	mov	r11,sp
80003ec0:	0c 9c       	mov	r12,r6
80003ec2:	f0 1f 00 07 	mcall	80003edc <usart_getchar+0x28>
80003ec6:	58 3c       	cp.w	r12,3
80003ec8:	cf b0       	breq	80003ebe <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
80003eca:	58 4c       	cp.w	r12,4
80003ecc:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80003ed0:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80003ed4:	2f fd       	sub	sp,-4
80003ed6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003eda:	00 00       	add	r0,r0
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	3e 90       	mov	r0,-23

80003ee0 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003ee0:	eb cd 40 c0 	pushm	r6-r7,lr
80003ee4:	18 96       	mov	r6,r12
80003ee6:	16 97       	mov	r7,r11
  while (*string != '\0')
80003ee8:	17 8b       	ld.ub	r11,r11[0x0]
80003eea:	58 0b       	cp.w	r11,0
80003eec:	c0 80       	breq	80003efc <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003eee:	2f f7       	sub	r7,-1
80003ef0:	0c 9c       	mov	r12,r6
80003ef2:	f0 1f 00 04 	mcall	80003f00 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003ef6:	0f 8b       	ld.ub	r11,r7[0x0]
80003ef8:	58 0b       	cp.w	r11,0
80003efa:	cf a1       	brne	80003eee <usart_write_line+0xe>
80003efc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003f00:	80 00       	ld.sh	r0,r0[0x0]
80003f02:	3e 64       	mov	r4,-26

80003f04 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003f04:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003f08:	e6 18 00 01 	andh	r8,0x1,COH
80003f0c:	c0 71       	brne	80003f1a <usart_reset+0x16>
80003f0e:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003f10:	3f f8       	mov	r8,-1
80003f12:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003f14:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003f16:	d5 03       	csrf	0x10
80003f18:	c0 48       	rjmp	80003f20 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003f1a:	3f f8       	mov	r8,-1
80003f1c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003f1e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003f20:	30 08       	mov	r8,0
80003f22:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003f24:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003f26:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003f28:	ea 68 61 0c 	mov	r8,680204
80003f2c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003f2e:	5e fc       	retal	r12

80003f30 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003f30:	eb cd 40 e0 	pushm	r5-r7,lr
80003f34:	18 96       	mov	r6,r12
80003f36:	16 97       	mov	r7,r11
80003f38:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003f3a:	f0 1f 00 2f 	mcall	80003ff4 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80003f3e:	58 07       	cp.w	r7,0
80003f40:	c5 80       	breq	80003ff0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003f42:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f44:	30 49       	mov	r9,4
80003f46:	f2 08 18 00 	cp.b	r8,r9
80003f4a:	e0 88 00 53 	brls	80003ff0 <usart_init_rs232+0xc0>
80003f4e:	30 99       	mov	r9,9
80003f50:	f2 08 18 00 	cp.b	r8,r9
80003f54:	e0 8b 00 4e 	brhi	80003ff0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003f58:	0f d9       	ld.ub	r9,r7[0x5]
80003f5a:	30 78       	mov	r8,7
80003f5c:	f0 09 18 00 	cp.b	r9,r8
80003f60:	e0 8b 00 48 	brhi	80003ff0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003f64:	8e 39       	ld.sh	r9,r7[0x6]
80003f66:	e0 68 01 01 	mov	r8,257
80003f6a:	f0 09 19 00 	cp.h	r9,r8
80003f6e:	e0 8b 00 41 	brhi	80003ff0 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003f72:	ef 39 00 08 	ld.ub	r9,r7[8]
80003f76:	30 38       	mov	r8,3
80003f78:	f0 09 18 00 	cp.b	r9,r8
80003f7c:	e0 8b 00 3a 	brhi	80003ff0 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003f80:	0a 9a       	mov	r10,r5
80003f82:	6e 0b       	ld.w	r11,r7[0x0]
80003f84:	0c 9c       	mov	r12,r6
80003f86:	f0 1f 00 1d 	mcall	80003ff8 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f8a:	58 1c       	cp.w	r12,1
80003f8c:	c3 20       	breq	80003ff0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80003f8e:	0f c8       	ld.ub	r8,r7[0x4]
80003f90:	30 99       	mov	r9,9
80003f92:	f2 08 18 00 	cp.b	r8,r9
80003f96:	c0 51       	brne	80003fa0 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003f98:	6c 18       	ld.w	r8,r6[0x4]
80003f9a:	b1 b8       	sbr	r8,0x11
80003f9c:	8d 18       	st.w	r6[0x4],r8
80003f9e:	c0 68       	rjmp	80003faa <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003fa0:	6c 19       	ld.w	r9,r6[0x4]
80003fa2:	20 58       	sub	r8,5
80003fa4:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003fa8:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003faa:	6c 19       	ld.w	r9,r6[0x4]
80003fac:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003fb0:	0f d8       	ld.ub	r8,r7[0x5]
80003fb2:	a9 78       	lsl	r8,0x9
80003fb4:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003fb8:	12 48       	or	r8,r9
80003fba:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003fbc:	8e 38       	ld.sh	r8,r7[0x6]
80003fbe:	30 29       	mov	r9,2
80003fc0:	f2 08 19 00 	cp.h	r8,r9
80003fc4:	e0 88 00 09 	brls	80003fd6 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003fc8:	6c 18       	ld.w	r8,r6[0x4]
80003fca:	ad b8       	sbr	r8,0xd
80003fcc:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003fce:	8e b8       	ld.uh	r8,r7[0x6]
80003fd0:	20 28       	sub	r8,2
80003fd2:	8d a8       	st.w	r6[0x28],r8
80003fd4:	c0 68       	rjmp	80003fe0 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003fd6:	6c 19       	ld.w	r9,r6[0x4]
80003fd8:	5c 78       	castu.h	r8
80003fda:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003fde:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003fe0:	6c 18       	ld.w	r8,r6[0x4]
80003fe2:	e0 18 ff f0 	andl	r8,0xfff0
80003fe6:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003fe8:	35 08       	mov	r8,80
80003fea:	8d 08       	st.w	r6[0x0],r8
80003fec:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003ff0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003ff4:	80 00       	ld.sh	r0,r0[0x0]
80003ff6:	3f 04       	mov	r4,-16
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	3d f4       	mov	r4,-33

80003ffc <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80003ffc:	48 68       	lddpc	r8,80004014 <fat_check_open+0x18>
80003ffe:	11 89       	ld.ub	r9,r8[0x0]
80004000:	30 08       	mov	r8,0
80004002:	f0 09 18 00 	cp.b	r9,r8
80004006:	c0 20       	breq	8000400a <fat_check_open+0xe>
80004008:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
8000400a:	31 79       	mov	r9,23
8000400c:	48 38       	lddpc	r8,80004018 <fat_check_open+0x1c>
8000400e:	b0 89       	st.b	r8[0x0],r9
80004010:	5e fd       	retal	0
80004012:	00 00       	add	r0,r0
80004014:	00 00       	add	r0,r0
80004016:	17 70       	ld.ub	r0,--r11
80004018:	00 00       	add	r0,r0
8000401a:	1a 00       	add	r0,sp

8000401c <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
8000401c:	48 68       	lddpc	r8,80004034 <fat_check_select+0x18>
8000401e:	90 19       	ld.sh	r9,r8[0x2]
80004020:	3f f8       	mov	r8,-1
80004022:	f0 09 19 00 	cp.h	r9,r8
80004026:	c0 20       	breq	8000402a <fat_check_select+0xe>
80004028:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
8000402a:	30 f9       	mov	r9,15
8000402c:	48 38       	lddpc	r8,80004038 <fat_check_select+0x1c>
8000402e:	b0 89       	st.b	r8[0x0],r9
80004030:	5e fd       	retal	0
80004032:	00 00       	add	r0,r0
80004034:	00 00       	add	r0,r0
80004036:	19 fc       	ld.ub	r12,r12[0x7]
80004038:	00 00       	add	r0,r0
8000403a:	1a 00       	add	r0,sp

8000403c <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
8000403c:	48 58       	lddpc	r8,80004050 <fat_check_is_file+0x14>
8000403e:	11 a8       	ld.ub	r8,r8[0x2]
80004040:	e2 18 00 18 	andl	r8,0x18,COH
80004044:	c0 21       	brne	80004048 <fat_check_is_file+0xc>
80004046:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80004048:	31 39       	mov	r9,19
8000404a:	48 38       	lddpc	r8,80004054 <fat_check_is_file+0x18>
8000404c:	b0 89       	st.b	r8[0x0],r9
8000404e:	5e fd       	retal	0
80004050:	00 00       	add	r0,r0
80004052:	17 70       	ld.ub	r0,--r11
80004054:	00 00       	add	r0,r0
80004056:	1a 00       	add	r0,sp

80004058 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80004058:	49 68       	lddpc	r8,800040b0 <fat_checkcluster+0x58>
8000405a:	70 18       	ld.w	r8,r8[0x4]
8000405c:	58 08       	cp.w	r8,0
8000405e:	c0 21       	brne	80004062 <fat_checkcluster+0xa>
80004060:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80004062:	49 59       	lddpc	r9,800040b4 <fat_checkcluster+0x5c>
80004064:	13 89       	ld.ub	r9,r9[0x0]
80004066:	30 3a       	mov	r10,3
80004068:	f4 09 18 00 	cp.b	r9,r10
8000406c:	c0 a1       	brne	80004080 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000406e:	e0 69 ff f7 	mov	r9,65527
80004072:	ea 19 0f ff 	orh	r9,0xfff
80004076:	12 38       	cp.w	r8,r9
80004078:	e0 8b 00 19 	brhi	800040aa <fat_checkcluster+0x52>
8000407c:	5f 0c       	sreq	r12
8000407e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004080:	30 2a       	mov	r10,2
80004082:	f4 09 18 00 	cp.b	r9,r10
80004086:	c0 71       	brne	80004094 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80004088:	e0 48 ff f7 	cp.w	r8,65527
8000408c:	e0 8b 00 0f 	brhi	800040aa <fat_checkcluster+0x52>
80004090:	5f 0c       	sreq	r12
80004092:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004094:	30 1a       	mov	r10,1
80004096:	f4 09 18 00 	cp.b	r9,r10
8000409a:	c0 20       	breq	8000409e <fat_checkcluster+0x46>
8000409c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
8000409e:	e0 48 0f f7 	cp.w	r8,4087
800040a2:	e0 8b 00 04 	brhi	800040aa <fat_checkcluster+0x52>
800040a6:	5f 0c       	sreq	r12
800040a8:	5e fc       	retal	r12
800040aa:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
800040ac:	5e fc       	retal	r12
800040ae:	00 00       	add	r0,r0
800040b0:	00 00       	add	r0,r0
800040b2:	1a 50       	eor	r0,sp
800040b4:	00 00       	add	r0,r0
800040b6:	19 fc       	ld.ub	r12,r12[0x7]

800040b8 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800040b8:	30 0a       	mov	r10,0
800040ba:	48 88       	lddpc	r8,800040d8 <fat_cache_clusterlist_reset+0x20>
800040bc:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800040be:	48 88       	lddpc	r8,800040dc <fat_cache_clusterlist_reset+0x24>
800040c0:	30 19       	mov	r9,1
800040c2:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800040c4:	3f f9       	mov	r9,-1
800040c6:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800040c8:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800040ca:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800040ce:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800040d2:	f1 69 00 15 	st.b	r8[21],r9
   }
}
800040d6:	5e fc       	retal	r12
800040d8:	00 00       	add	r0,r0
800040da:	1a 02       	add	r2,sp
800040dc:	00 00       	add	r0,r0
800040de:	17 84       	ld.ub	r4,r11[0x0]

800040e0 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800040e0:	48 c9       	lddpc	r9,80004110 <fat_cache_clusterlist_update_start+0x30>
800040e2:	13 88       	ld.ub	r8,r9[0x0]
800040e4:	f8 08 18 00 	cp.b	r8,r12
800040e8:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800040ea:	48 ba       	lddpc	r10,80004114 <fat_cache_clusterlist_update_start+0x34>
800040ec:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800040ee:	f0 0a 15 02 	lsl	r10,r8,0x2
800040f2:	10 0a       	add	r10,r8
800040f4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800040f8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800040fa:	3f fb       	mov	r11,-1
800040fc:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800040fe:	2f fa       	sub	r10,-1
80004100:	48 6b       	lddpc	r11,80004118 <fat_cache_clusterlist_update_start+0x38>
80004102:	76 0b       	ld.w	r11,r11[0x0]
80004104:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80004108:	48 59       	lddpc	r9,8000411c <fat_cache_clusterlist_update_start+0x3c>
8000410a:	72 19       	ld.w	r9,r9[0x4]
8000410c:	91 29       	st.w	r8[0x8],r9
}
8000410e:	5e fc       	retal	r12
80004110:	00 00       	add	r0,r0
80004112:	17 84       	ld.ub	r4,r11[0x0]
80004114:	00 00       	add	r0,r0
80004116:	1a 02       	add	r2,sp
80004118:	00 00       	add	r0,r0
8000411a:	1a 50       	eor	r0,sp
8000411c:	00 00       	add	r0,r0
8000411e:	1a 58       	eor	r8,sp

80004120 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80004120:	49 88       	lddpc	r8,80004180 <fat_cache_clusterlist_update_select+0x60>
80004122:	11 88       	ld.ub	r8,r8[0x0]
80004124:	49 8a       	lddpc	r10,80004184 <fat_cache_clusterlist_update_select+0x64>
80004126:	f0 08 00 2b 	add	r11,r8,r8<<0x2
8000412a:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
8000412e:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80004130:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004132:	15 8a       	ld.ub	r10,r10[0x0]
80004134:	f2 0a 18 00 	cp.b	r10,r9
80004138:	c0 a1       	brne	8000414c <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
8000413a:	49 3a       	lddpc	r10,80004184 <fat_cache_clusterlist_update_select+0x64>
8000413c:	15 9a       	ld.ub	r10,r10[0x1]
8000413e:	f4 0b 18 00 	cp.b	r11,r10
80004142:	e0 88 00 05 	brls	8000414c <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004146:	2f fa       	sub	r10,-1
80004148:	48 fc       	lddpc	r12,80004184 <fat_cache_clusterlist_update_select+0x64>
8000414a:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
8000414c:	48 ea       	lddpc	r10,80004184 <fat_cache_clusterlist_update_select+0x64>
8000414e:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004152:	f2 0a 18 00 	cp.b	r10,r9
80004156:	c0 c1       	brne	8000416e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80004158:	48 b9       	lddpc	r9,80004184 <fat_cache_clusterlist_update_select+0x64>
8000415a:	f3 39 00 15 	ld.ub	r9,r9[21]
8000415e:	f2 0b 18 00 	cp.b	r11,r9
80004162:	e0 88 00 06 	brls	8000416e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004166:	2f f9       	sub	r9,-1
80004168:	48 7a       	lddpc	r10,80004184 <fat_cache_clusterlist_update_select+0x64>
8000416a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
8000416e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004172:	48 59       	lddpc	r9,80004184 <fat_cache_clusterlist_update_select+0x64>
80004174:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004178:	30 09       	mov	r9,0
8000417a:	b0 99       	st.b	r8[0x1],r9
}
8000417c:	5e fc       	retal	r12
8000417e:	00 00       	add	r0,r0
80004180:	00 00       	add	r0,r0
80004182:	1a 02       	add	r2,sp
80004184:	00 00       	add	r0,r0
80004186:	17 84       	ld.ub	r4,r11[0x0]

80004188 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80004188:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
8000418c:	49 08       	lddpc	r8,800041cc <fat_cache_clusterlist_update_finish+0x44>
8000418e:	11 88       	ld.ub	r8,r8[0x0]
80004190:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004194:	48 f9       	lddpc	r9,800041d0 <fat_cache_clusterlist_update_finish+0x48>
80004196:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000419a:	f0 ca ff f8 	sub	r10,r8,-8
8000419e:	48 eb       	lddpc	r11,800041d4 <fat_cache_clusterlist_update_finish+0x4c>
800041a0:	17 97       	ld.ub	r7,r11[0x1]
800041a2:	74 09       	ld.w	r9,r10[0x0]
800041a4:	f2 07 0d 06 	divu	r6,r9,r7
800041a8:	0e 99       	mov	r9,r7
800041aa:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
800041ac:	17 8b       	ld.ub	r11,r11[0x0]
800041ae:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
800041b0:	74 0b       	ld.w	r11,r10[0x0]
800041b2:	12 1b       	sub	r11,r9
800041b4:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
800041b6:	48 9a       	lddpc	r10,800041d8 <fat_cache_clusterlist_update_finish+0x50>
800041b8:	74 0b       	ld.w	r11,r10[0x0]
800041ba:	12 1b       	sub	r11,r9
800041bc:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
800041be:	74 1a       	ld.w	r10,r10[0x4]
800041c0:	14 09       	add	r9,r10
800041c2:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
800041c4:	f0 1f 00 06 	mcall	800041dc <fat_cache_clusterlist_update_finish+0x54>
}
800041c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041cc:	00 00       	add	r0,r0
800041ce:	1a 02       	add	r2,sp
800041d0:	00 00       	add	r0,r0
800041d2:	17 84       	ld.ub	r4,r11[0x0]
800041d4:	00 00       	add	r0,r0
800041d6:	19 b0       	ld.ub	r0,r12[0x3]
800041d8:	00 00       	add	r0,r0
800041da:	1a 58       	eor	r8,sp
800041dc:	80 00       	ld.sh	r0,r0[0x0]
800041de:	41 20       	lddsp	r0,sp[0x48]

800041e0 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
800041e0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
800041e4:	4c 18       	lddpc	r8,800042e8 <fat_cache_clusterlist_update_read+0x108>
800041e6:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041e8:	4c 18       	lddpc	r8,800042ec <fat_cache_clusterlist_update_read+0x10c>
800041ea:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041ec:	4c 18       	lddpc	r8,800042f0 <fat_cache_clusterlist_update_read+0x110>
800041ee:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041f0:	4c 18       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
800041f2:	11 88       	ld.ub	r8,r8[0x0]
800041f4:	f8 08 18 00 	cp.b	r8,r12
800041f8:	c1 11       	brne	8000421a <fat_cache_clusterlist_update_read+0x3a>
800041fa:	4b f8       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
800041fc:	11 a8       	ld.ub	r8,r8[0x2]
800041fe:	f2 08 18 00 	cp.b	r8,r9
80004202:	c0 c1       	brne	8000421a <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004204:	4b c8       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
80004206:	70 18       	ld.w	r8,r8[0x4]
80004208:	14 38       	cp.w	r8,r10
8000420a:	c0 81       	brne	8000421a <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
8000420c:	4b a8       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
8000420e:	70 28       	ld.w	r8,r8[0x8]
80004210:	10 3b       	cp.w	r11,r8
80004212:	c0 43       	brcs	8000421a <fat_cache_clusterlist_update_read+0x3a>
80004214:	30 0a       	mov	r10,0
80004216:	14 99       	mov	r9,r10
80004218:	c1 88       	rjmp	80004248 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
8000421a:	4b 78       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
8000421c:	f1 38 00 14 	ld.ub	r8,r8[20]
80004220:	f8 08 18 00 	cp.b	r8,r12
80004224:	c5 e1       	brne	800042e0 <fat_cache_clusterlist_update_read+0x100>
80004226:	4b 48       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
80004228:	f1 38 00 16 	ld.ub	r8,r8[22]
8000422c:	f2 08 18 00 	cp.b	r8,r9
80004230:	c5 81       	brne	800042e0 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004232:	4b 18       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
80004234:	70 68       	ld.w	r8,r8[0x18]
80004236:	14 38       	cp.w	r8,r10
80004238:	c5 41       	brne	800042e0 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
8000423a:	4a f8       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
8000423c:	70 78       	ld.w	r8,r8[0x1c]
8000423e:	16 38       	cp.w	r8,r11
80004240:	e0 8b 00 50 	brhi	800042e0 <fat_cache_clusterlist_update_read+0x100>
80004244:	30 1a       	mov	r10,1
80004246:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80004248:	f2 0e 15 02 	lsl	lr,r9,0x2
8000424c:	12 0e       	add	lr,r9
8000424e:	4a ac       	lddpc	r12,800042f4 <fat_cache_clusterlist_update_read+0x114>
80004250:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80004254:	78 4c       	ld.w	r12,r12[0x10]
80004256:	f6 08 01 08 	sub	r8,r11,r8
8000425a:	10 3c       	cp.w	r12,r8
8000425c:	e0 88 00 16 	brls	80004288 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004260:	4a 4b       	lddpc	r11,800042f0 <fat_cache_clusterlist_update_read+0x110>
80004262:	f2 0e 15 02 	lsl	lr,r9,0x2
80004266:	fc 09 00 09 	add	r9,lr,r9
8000426a:	4a 3e       	lddpc	lr,800042f4 <fat_cache_clusterlist_update_read+0x114>
8000426c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80004270:	72 39       	ld.w	r9,r9[0xc]
80004272:	f0 09 00 09 	add	r9,r8,r9
80004276:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80004278:	10 1c       	sub	r12,r8
8000427a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
8000427c:	49 f8       	lddpc	r8,800042f8 <fat_cache_clusterlist_update_read+0x118>
8000427e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004280:	f0 1f 00 1f 	mcall	800042fc <fat_cache_clusterlist_update_read+0x11c>
80004284:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80004288:	49 c8       	lddpc	r8,800042f8 <fat_cache_clusterlist_update_read+0x118>
8000428a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
8000428c:	f2 08 15 02 	lsl	r8,r9,0x2
80004290:	f0 09 00 09 	add	r9,r8,r9
80004294:	49 88       	lddpc	r8,800042f4 <fat_cache_clusterlist_update_read+0x114>
80004296:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000429a:	3f f9       	mov	r9,-1
8000429c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000429e:	70 4c       	ld.w	r12,r8[0x10]
800042a0:	49 2a       	lddpc	r10,800042e8 <fat_cache_clusterlist_update_read+0x108>
800042a2:	15 99       	ld.ub	r9,r10[0x1]
800042a4:	70 3e       	ld.w	lr,r8[0xc]
800042a6:	f8 0e 00 0e 	add	lr,r12,lr
800042aa:	20 1e       	sub	lr,1
800042ac:	74 57       	ld.w	r7,r10[0x14]
800042ae:	fc 07 01 07 	sub	r7,lr,r7
800042b2:	74 4a       	ld.w	r10,r10[0x10]
800042b4:	14 17       	sub	r7,r10
800042b6:	ee 09 0d 06 	divu	r6,r7,r9
800042ba:	0c 97       	mov	r7,r6
800042bc:	2f e7       	sub	r7,-2
800042be:	48 ca       	lddpc	r10,800042ec <fat_cache_clusterlist_update_read+0x10c>
800042c0:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
800042c2:	2f 88       	sub	r8,-8
800042c4:	70 0a       	ld.w	r10,r8[0x0]
800042c6:	14 0c       	add	r12,r10
800042c8:	f8 c7 00 01 	sub	r7,r12,1
800042cc:	ee 09 0d 06 	divu	r6,r7,r9
800042d0:	ad 39       	mul	r9,r6
800042d2:	48 8a       	lddpc	r10,800042f0 <fat_cache_clusterlist_update_read+0x110>
800042d4:	f6 09 01 09 	sub	r9,r11,r9
800042d8:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
800042da:	91 0b       	st.w	r8[0x0],r11
800042dc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
800042e0:	f0 1f 00 08 	mcall	80004300 <fat_cache_clusterlist_update_read+0x120>
800042e4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800042e8:	00 00       	add	r0,r0
800042ea:	19 b0       	ld.ub	r0,r12[0x3]
800042ec:	00 00       	add	r0,r0
800042ee:	1a 50       	eor	r0,sp
800042f0:	00 00       	add	r0,r0
800042f2:	1a 58       	eor	r8,sp
800042f4:	00 00       	add	r0,r0
800042f6:	17 84       	ld.ub	r4,r11[0x0]
800042f8:	00 00       	add	r0,r0
800042fa:	1a 02       	add	r2,sp
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	41 20       	lddsp	r0,sp[0x48]
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	40 e0       	lddsp	r0,sp[0x38]

80004304 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80004304:	30 d9       	mov	r9,13
80004306:	48 48       	lddpc	r8,80004314 <fat_entry_is_dir+0x10>
80004308:	b0 89       	st.b	r8[0x0],r9
8000430a:	48 48       	lddpc	r8,80004318 <fat_entry_is_dir+0x14>
8000430c:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
8000430e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80004312:	5e fc       	retal	r12
80004314:	00 00       	add	r0,r0
80004316:	1a 00       	add	r0,sp
80004318:	00 00       	add	r0,r0
8000431a:	17 70       	ld.ub	r0,--r11

8000431c <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000431c:	3f f9       	mov	r9,-1
8000431e:	48 c8       	lddpc	r8,8000434c <fat_clear_entry_info_and_ptr+0x30>
80004320:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80004322:	48 c8       	lddpc	r8,80004350 <fat_clear_entry_info_and_ptr+0x34>
80004324:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80004328:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000432c:	30 08       	mov	r8,0
8000432e:	f0 09 18 00 	cp.b	r9,r8
80004332:	c0 51       	brne	8000433c <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80004334:	10 99       	mov	r9,r8
80004336:	48 78       	lddpc	r8,80004350 <fat_clear_entry_info_and_ptr+0x34>
80004338:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
8000433c:	48 68       	lddpc	r8,80004354 <fat_clear_entry_info_and_ptr+0x38>
8000433e:	30 09       	mov	r9,0
80004340:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80004342:	30 0a       	mov	r10,0
80004344:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80004346:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80004348:	b0 89       	st.b	r8[0x0],r9
}
8000434a:	5e fc       	retal	r12
8000434c:	00 00       	add	r0,r0
8000434e:	19 fc       	ld.ub	r12,r12[0x7]
80004350:	00 00       	add	r0,r0
80004352:	19 b0       	ld.ub	r0,r12[0x3]
80004354:	00 00       	add	r0,r0
80004356:	17 70       	ld.ub	r0,--r11

80004358 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80004358:	30 08       	mov	r8,0
8000435a:	f0 0c 19 00 	cp.h	r12,r8
8000435e:	5f 0a       	sreq	r10
80004360:	35 c9       	mov	r9,92
80004362:	f2 0c 19 00 	cp.h	r12,r9
80004366:	5f 09       	sreq	r9
80004368:	f5 e9 10 09 	or	r9,r10,r9
8000436c:	f0 09 18 00 	cp.b	r9,r8
80004370:	c0 20       	breq	80004374 <fat_check_eof_name+0x1c>
80004372:	5e ff       	retal	1
80004374:	32 f8       	mov	r8,47
80004376:	f0 0c 19 00 	cp.h	r12,r8
8000437a:	5f 0c       	sreq	r12
}
8000437c:	5e fc       	retal	r12
8000437e:	d7 03       	nop

80004380 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80004380:	48 48       	lddpc	r8,80004390 <fat_get_ptr_entry+0x10>
80004382:	90 98       	ld.uh	r8,r8[0x2]
80004384:	a5 78       	lsl	r8,0x5
80004386:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000438a:	48 3c       	lddpc	r12,80004394 <fat_get_ptr_entry+0x14>
8000438c:	10 0c       	add	r12,r8
8000438e:	5e fc       	retal	r12
80004390:	00 00       	add	r0,r0
80004392:	19 fc       	ld.ub	r12,r12[0x7]
80004394:	00 00       	add	r0,r0
80004396:	17 b0       	ld.ub	r0,r11[0x3]

80004398 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80004398:	d4 31       	pushm	r0-r7,lr
8000439a:	20 3d       	sub	sp,12
8000439c:	18 97       	mov	r7,r12
8000439e:	16 94       	mov	r4,r11
800043a0:	14 96       	mov	r6,r10
800043a2:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
800043a4:	f0 1f 00 5e 	mcall	8000451c <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
800043a8:	19 88       	ld.ub	r8,r12[0x0]
800043aa:	30 09       	mov	r9,0
800043ac:	f2 08 18 00 	cp.b	r8,r9
800043b0:	5f 0b       	sreq	r11
800043b2:	3e 5a       	mov	r10,-27
800043b4:	f4 08 18 00 	cp.b	r8,r10
800043b8:	5f 0a       	sreq	r10
800043ba:	f7 ea 10 0a 	or	r10,r11,r10
800043be:	f2 0a 18 00 	cp.b	r10,r9
800043c2:	c0 71       	brne	800043d0 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
800043c4:	f9 3a 00 0b 	ld.ub	r10,r12[11]
800043c8:	30 f9       	mov	r9,15
800043ca:	f2 0a 18 00 	cp.b	r10,r9
800043ce:	c0 60       	breq	800043da <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
800043d0:	30 b9       	mov	r9,11
800043d2:	4d 48       	lddpc	r8,80004520 <fat_entry_longname+0x188>
800043d4:	b0 89       	st.b	r8[0x0],r9
800043d6:	30 0c       	mov	r12,0
      return false;
800043d8:	c9 c8       	rjmp	80004510 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
800043da:	4d 39       	lddpc	r9,80004524 <fat_entry_longname+0x18c>
800043dc:	13 8a       	ld.ub	r10,r9[0x0]
800043de:	30 09       	mov	r9,0
800043e0:	f2 0a 18 00 	cp.b	r10,r9
800043e4:	c0 90       	breq	800043f6 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
800043e6:	e2 18 00 40 	andl	r8,0x40,COH
800043ea:	c0 61       	brne	800043f6 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800043ec:	31 09       	mov	r9,16
800043ee:	4c d8       	lddpc	r8,80004520 <fat_entry_longname+0x188>
800043f0:	b0 89       	st.b	r8[0x0],r9
800043f2:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800043f4:	c8 e8       	rjmp	80004510 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800043f6:	2f fc       	sub	r12,-1
800043f8:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043fa:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043fe:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80004400:	4c 95       	lddpc	r5,80004524 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80004402:	20 14       	sub	r4,1
80004404:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80004406:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80004408:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000440a:	19 89       	ld.ub	r9,r12[0x0]
8000440c:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
8000440e:	19 99       	ld.ub	r9,r12[0x1]
80004410:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
80004412:	58 06       	cp.w	r6,0
80004414:	c0 f0       	breq	80004432 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
80004416:	0b 89       	ld.ub	r9,r5[0x0]
80004418:	f6 09 18 00 	cp.b	r9,r11
8000441c:	c3 91       	brne	8000448e <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000441e:	40 1e       	lddsp	lr,sp[0x4]
80004420:	1c 38       	cp.w	r8,lr
80004422:	c0 55       	brlt	8000442c <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80004424:	30 08       	mov	r8,0
80004426:	ae 88       	st.b	r7[0x0],r8
80004428:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
8000442a:	c7 38       	rjmp	80004510 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000442c:	9a 59       	ld.sh	r9,sp[0xa]
8000442e:	ae 89       	st.b	r7[0x0],r9
80004430:	c2 f8       	rjmp	8000448e <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
80004432:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80004434:	32 a3       	mov	r3,42
80004436:	e6 09 19 00 	cp.h	r9,r3
8000443a:	c6 a0       	breq	8000450e <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000443c:	9a 5e       	ld.sh	lr,sp[0xa]
8000443e:	58 0e       	cp.w	lr,0
80004440:	c0 e1       	brne	8000445c <fat_entry_longname+0xc4>
80004442:	35 c0       	mov	r0,92
80004444:	e0 09 19 00 	cp.h	r9,r0
80004448:	5f 12       	srne	r2
8000444a:	32 f3       	mov	r3,47
8000444c:	e6 09 19 00 	cp.h	r9,r3
80004450:	5f 13       	srne	r3
80004452:	e5 e3 00 03 	and	r3,r2,r3
80004456:	f6 03 18 00 	cp.b	r3,r11
8000445a:	c1 e0       	breq	80004496 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000445c:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80004460:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80004464:	e4 c0 ff e0 	sub	r0,r2,-32
80004468:	00 33       	cp.w	r3,r0
8000446a:	c0 41       	brne	80004472 <fat_entry_longname+0xda>
8000446c:	40 00       	lddsp	r0,sp[0x0]
8000446e:	58 00       	cp.w	r0,0
80004470:	c0 f0       	breq	8000448e <fat_entry_longname+0xf6>
80004472:	22 02       	sub	r2,32
80004474:	04 33       	cp.w	r3,r2
80004476:	c0 41       	brne	8000447e <fat_entry_longname+0xe6>
80004478:	40 03       	lddsp	r3,sp[0x0]
8000447a:	58 03       	cp.w	r3,0
8000447c:	c0 90       	breq	8000448e <fat_entry_longname+0xf6>
8000447e:	fc 09 19 00 	cp.h	r9,lr
80004482:	c0 60       	breq	8000448e <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80004484:	31 69       	mov	r9,22
80004486:	4a 78       	lddpc	r8,80004520 <fat_entry_longname+0x188>
80004488:	b0 89       	st.b	r8[0x0],r9
8000448a:	30 0c       	mov	r12,0
           return false;
8000448c:	c4 28       	rjmp	80004510 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
8000448e:	9a 59       	ld.sh	r9,sp[0xa]
80004490:	e2 09 19 00 	cp.h	r9,r1
80004494:	c0 b1       	brne	800044aa <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80004496:	4a 49       	lddpc	r9,80004524 <fat_entry_longname+0x18c>
80004498:	13 8a       	ld.ub	r10,r9[0x0]
8000449a:	30 09       	mov	r9,0
8000449c:	f2 0a 18 00 	cp.b	r10,r9
800044a0:	c3 70       	breq	8000450e <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
800044a2:	2f f8       	sub	r8,-1
800044a4:	ae 08       	st.h	r7[0x0],r8
800044a6:	30 1c       	mov	r12,1
800044a8:	c3 48       	rjmp	80004510 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800044aa:	e8 08 18 00 	cp.b	r8,r4
800044ae:	c0 31       	brne	800044b4 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
800044b0:	2f dc       	sub	r12,-3
800044b2:	c2 58       	rjmp	800044fc <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
800044b4:	30 a9       	mov	r9,10
800044b6:	f2 08 18 00 	cp.b	r8,r9
800044ba:	c0 31       	brne	800044c0 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
800044bc:	2f ec       	sub	r12,-2
800044be:	c1 f8       	rjmp	800044fc <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
800044c0:	30 c9       	mov	r9,12
800044c2:	f2 08 18 00 	cp.b	r8,r9
800044c6:	c1 b1       	brne	800044fc <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
800044c8:	f9 38 ff e2 	ld.ub	r8,r12[-30]
800044cc:	e2 18 00 40 	andl	r8,0x40,COH
800044d0:	c0 61       	brne	800044dc <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
800044d2:	31 09       	mov	r9,16
800044d4:	49 38       	lddpc	r8,80004520 <fat_entry_longname+0x188>
800044d6:	b0 89       	st.b	r8[0x0],r9
800044d8:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
800044da:	c1 b8       	rjmp	80004510 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800044dc:	58 06       	cp.w	r6,0
800044de:	c0 b0       	breq	800044f4 <fat_entry_longname+0x15c>
800044e0:	49 18       	lddpc	r8,80004524 <fat_entry_longname+0x18c>
800044e2:	11 89       	ld.ub	r9,r8[0x0]
800044e4:	30 08       	mov	r8,0
800044e6:	f0 09 18 00 	cp.b	r9,r8
800044ea:	c1 50       	breq	80004514 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800044ec:	30 e8       	mov	r8,14
800044ee:	ae 08       	st.h	r7[0x0],r8
800044f0:	30 1c       	mov	r12,1
               return true;
800044f2:	c0 f8       	rjmp	80004510 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800044f4:	0f 9c       	ld.ub	r12,r7[0x1]
800044f6:	f0 1f 00 0d 	mcall	80004528 <fat_entry_longname+0x190>
800044fa:	c0 b8       	rjmp	80004510 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800044fc:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800044fe:	f6 09 18 00 	cp.b	r9,r11
80004502:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80004506:	2f f8       	sub	r8,-1
80004508:	5c 58       	castu.b	r8
      ptr_entry+=2;
8000450a:	2f ec       	sub	r12,-2
   }
8000450c:	c7 fb       	rjmp	8000440a <fat_entry_longname+0x72>
8000450e:	30 1c       	mov	r12,1
}
80004510:	2f dd       	sub	sp,-12
80004512:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80004514:	30 08       	mov	r8,0
80004516:	ae 98       	st.b	r7[0x1],r8
80004518:	30 1c       	mov	r12,1
               }
               return true;
8000451a:	cf bb       	rjmp	80004510 <fat_entry_longname+0x178>
8000451c:	80 00       	ld.sh	r0,r0[0x0]
8000451e:	43 80       	lddsp	r0,sp[0xe0]
80004520:	00 00       	add	r0,r0
80004522:	1a 00       	add	r0,sp
80004524:	00 00       	add	r0,r0
80004526:	1a 01       	add	r1,sp
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	43 58       	lddsp	r8,sp[0xd4]

8000452c <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
8000452c:	d4 31       	pushm	r0-r7,lr
8000452e:	20 2d       	sub	sp,8
80004530:	18 97       	mov	r7,r12
80004532:	50 1b       	stdsp	sp[0x4],r11
80004534:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80004536:	31 69       	mov	r9,22
80004538:	4b c8       	lddpc	r8,80004628 <fat_entry_shortname+0xfc>
8000453a:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
8000453c:	f0 1f 00 3c 	mcall	8000462c <fat_entry_shortname+0x100>
80004540:	30 08       	mov	r8,0
80004542:	10 9a       	mov	r10,r8
80004544:	30 1b       	mov	r11,1
80004546:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004548:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000454a:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000454c:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000454e:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80004550:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004552:	fc 08 18 00 	cp.b	r8,lr
80004556:	c1 90       	breq	80004588 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80004558:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000455c:	ea 08 18 00 	cp.b	r8,r5
80004560:	c0 41       	brne	80004568 <fat_entry_shortname+0x3c>
80004562:	40 01       	lddsp	r1,sp[0x0]
80004564:	58 01       	cp.w	r1,0
80004566:	c0 81       	brne	80004576 <fat_entry_shortname+0x4a>
80004568:	e8 09 18 00 	cp.b	r9,r4
8000456c:	c0 f1       	brne	8000458a <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000456e:	ea 08 18 00 	cp.b	r8,r5
80004572:	e0 8b 00 0b 	brhi	80004588 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80004576:	f9 39 00 08 	ld.ub	r9,r12[8]
8000457a:	e8 09 18 00 	cp.b	r9,r4
8000457e:	c0 50       	breq	80004588 <fat_entry_shortname+0x5c>
80004580:	30 78       	mov	r8,7
80004582:	32 e9       	mov	r9,46
80004584:	50 03       	stdsp	sp[0x0],r3
80004586:	c0 28       	rjmp	8000458a <fat_entry_shortname+0x5e>
80004588:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000458a:	58 06       	cp.w	r6,0
8000458c:	c1 80       	breq	800045bc <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
8000458e:	4a 9b       	lddpc	r11,80004630 <fat_entry_shortname+0x104>
80004590:	17 81       	ld.ub	r1,r11[0x0]
80004592:	30 0b       	mov	r11,0
80004594:	f6 01 18 00 	cp.b	r1,r11
80004598:	c2 c1       	brne	800045f0 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000459a:	40 1b       	lddsp	r11,sp[0x4]
8000459c:	20 1b       	sub	r11,1
8000459e:	16 3a       	cp.w	r10,r11
800045a0:	c0 35       	brlt	800045a6 <fat_entry_shortname+0x7a>
800045a2:	06 99       	mov	r9,r3
800045a4:	c0 a8       	rjmp	800045b8 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
800045a6:	f2 c1 00 41 	sub	r1,r9,65
800045aa:	31 9b       	mov	r11,25
800045ac:	f6 01 18 00 	cp.b	r1,r11
800045b0:	e0 8b 00 04 	brhi	800045b8 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
800045b4:	2e 09       	sub	r9,-32
800045b6:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
800045b8:	ae 89       	st.b	r7[0x0],r9
800045ba:	c1 b8       	rjmp	800045f0 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
800045bc:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
800045be:	e4 0b 18 00 	cp.b	r11,r2
800045c2:	c2 f0       	breq	80004620 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
800045c4:	58 09       	cp.w	r9,0
800045c6:	c0 c1       	brne	800045de <fat_entry_shortname+0xb2>
800045c8:	35 c1       	mov	r1,92
800045ca:	e2 0b 18 00 	cp.b	r11,r1
800045ce:	5f 10       	srne	r0
800045d0:	32 f1       	mov	r1,47
800045d2:	e2 0b 18 00 	cp.b	r11,r1
800045d6:	5f 11       	srne	r1
800045d8:	e1 e1 00 01 	and	r1,r0,r1
800045dc:	c0 c0       	breq	800045f4 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
800045de:	f2 0b 18 00 	cp.b	r11,r9
800045e2:	c0 70       	breq	800045f0 <fat_entry_shortname+0xc4>
800045e4:	f2 c1 ff e0 	sub	r1,r9,-32
800045e8:	02 3b       	cp.w	r11,r1
800045ea:	c0 30       	breq	800045f0 <fat_entry_shortname+0xc4>
800045ec:	30 0c       	mov	r12,0
800045ee:	c1 a8       	rjmp	80004622 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800045f0:	58 09       	cp.w	r9,0
800045f2:	c0 b1       	brne	80004608 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800045f4:	48 f8       	lddpc	r8,80004630 <fat_entry_shortname+0x104>
800045f6:	11 89       	ld.ub	r9,r8[0x0]
800045f8:	30 08       	mov	r8,0
800045fa:	f0 09 18 00 	cp.b	r9,r8
800045fe:	c1 10       	breq	80004620 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80004600:	2f fa       	sub	r10,-1
80004602:	ae 0a       	st.h	r7[0x0],r10
80004604:	30 1c       	mov	r12,1
80004606:	c0 e8       	rjmp	80004622 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
80004608:	48 a9       	lddpc	r9,80004630 <fat_entry_shortname+0x104>
8000460a:	13 8b       	ld.ub	r11,r9[0x0]
8000460c:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
8000460e:	f2 0b 18 00 	cp.b	r11,r9
80004612:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80004616:	2f fa       	sub	r10,-1
80004618:	5c 5a       	castu.b	r10
      u8_pos_entry++;
8000461a:	2f f8       	sub	r8,-1
8000461c:	5c 58       	castu.b	r8
   }
8000461e:	c9 ab       	rjmp	80004552 <fat_entry_shortname+0x26>
80004620:	30 1c       	mov	r12,1
}
80004622:	2f ed       	sub	sp,-8
80004624:	d8 32       	popm	r0-r7,pc
80004626:	00 00       	add	r0,r0
80004628:	00 00       	add	r0,r0
8000462a:	1a 00       	add	r0,sp
8000462c:	80 00       	ld.sh	r0,r0[0x0]
8000462e:	43 80       	lddsp	r0,sp[0xe0]
80004630:	00 00       	add	r0,r0
80004632:	1a 01       	add	r1,sp

80004634 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
80004634:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80004636:	f0 1f 00 10 	mcall	80004674 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000463a:	49 08       	lddpc	r8,80004678 <fat_get_entry_info+0x44>
8000463c:	f9 39 00 0b 	ld.ub	r9,r12[11]
80004640:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80004642:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80004646:	f0 c9 ff fc 	sub	r9,r8,-4
8000464a:	15 8b       	ld.ub	r11,r10[0x0]
8000464c:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000464e:	15 9a       	ld.ub	r10,r10[0x1]
80004650:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80004652:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80004656:	15 8b       	ld.ub	r11,r10[0x0]
80004658:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000465a:	15 9a       	ld.ub	r10,r10[0x1]
8000465c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000465e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80004660:	2f 88       	sub	r8,-8
80004662:	19 89       	ld.ub	r9,r12[0x0]
80004664:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80004666:	19 99       	ld.ub	r9,r12[0x1]
80004668:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000466a:	19 a9       	ld.ub	r9,r12[0x2]
8000466c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000466e:	19 b9       	ld.ub	r9,r12[0x3]
80004670:	b0 89       	st.b	r8[0x0],r9
}
80004672:	d8 02       	popm	pc
80004674:	80 00       	ld.sh	r0,r0[0x0]
80004676:	43 80       	lddsp	r0,sp[0xe0]
80004678:	00 00       	add	r0,r0
8000467a:	17 70       	ld.ub	r0,--r11

8000467c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000467c:	eb cd 40 80 	pushm	r7,lr
80004680:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80004682:	f0 1f 00 14 	mcall	800046d0 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80004686:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80004688:	58 08       	cp.w	r8,0
8000468a:	c0 61       	brne	80004696 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000468c:	30 a9       	mov	r9,10
8000468e:	49 28       	lddpc	r8,800046d4 <fat_entry_check+0x58>
80004690:	b0 89       	st.b	r8[0x0],r9
80004692:	30 07       	mov	r7,0
      return false;
80004694:	c1 a8       	rjmp	800046c8 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80004696:	30 ba       	mov	r10,11
80004698:	48 f9       	lddpc	r9,800046d4 <fat_entry_check+0x58>
8000469a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000469c:	3e 59       	mov	r9,-27
8000469e:	f2 08 18 00 	cp.b	r8,r9
800046a2:	c1 20       	breq	800046c6 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
800046a4:	32 e9       	mov	r9,46
800046a6:	f2 08 18 00 	cp.b	r8,r9
800046aa:	c0 e0       	breq	800046c6 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
800046ac:	f9 38 00 0b 	ld.ub	r8,r12[11]
800046b0:	10 99       	mov	r9,r8
800046b2:	e2 19 00 08 	andl	r9,0x8,COH
800046b6:	c0 81       	brne	800046c6 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
800046b8:	e2 18 00 10 	andl	r8,0x10,COH
800046bc:	c0 60       	breq	800046c8 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
800046be:	ec 17 00 01 	eorl	r7,0x1
800046c2:	5c 57       	castu.b	r7
800046c4:	c0 28       	rjmp	800046c8 <fat_entry_check+0x4c>
800046c6:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
800046c8:	0e 9c       	mov	r12,r7
800046ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800046ce:	00 00       	add	r0,r0
800046d0:	80 00       	ld.sh	r0,r0[0x0]
800046d2:	43 80       	lddsp	r0,sp[0xe0]
800046d4:	00 00       	add	r0,r0
800046d6:	1a 00       	add	r0,sp

800046d8 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800046d8:	48 58       	lddpc	r8,800046ec <fat_cache_reset+0x14>
800046da:	3f f9       	mov	r9,-1
800046dc:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
800046de:	30 09       	mov	r9,0
800046e0:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800046e4:	3f f9       	mov	r9,-1
800046e6:	91 39       	st.w	r8[0xc],r9
}
800046e8:	5e fc       	retal	r12
800046ea:	00 00       	add	r0,r0
800046ec:	00 00       	add	r0,r0
800046ee:	1a 38       	cp.w	r8,sp

800046f0 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800046f0:	30 19       	mov	r9,1
800046f2:	48 38       	lddpc	r8,800046fc <fat_cache_mark_sector_as_dirty+0xc>
800046f4:	f1 69 00 08 	st.b	r8[8],r9
}
800046f8:	5e fc       	retal	r12
800046fa:	00 00       	add	r0,r0
800046fc:	00 00       	add	r0,r0
800046fe:	1a 38       	cp.w	r8,sp

80004700 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
80004700:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
80004702:	f0 1f 00 11 	mcall	80004744 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
80004706:	f0 1f 00 11 	mcall	80004748 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
8000470a:	49 18       	lddpc	r8,8000474c <fat_write_entry_file+0x4c>
8000470c:	11 a9       	ld.ub	r9,r8[0x2]
8000470e:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80004712:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80004716:	f0 c9 ff fc 	sub	r9,r8,-4
8000471a:	13 9b       	ld.ub	r11,r9[0x1]
8000471c:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000471e:	13 8b       	ld.ub	r11,r9[0x0]
80004720:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
80004722:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80004726:	13 bb       	ld.ub	r11,r9[0x3]
80004728:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000472a:	13 a9       	ld.ub	r9,r9[0x2]
8000472c:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
8000472e:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80004730:	2f 88       	sub	r8,-8
80004732:	11 b9       	ld.ub	r9,r8[0x3]
80004734:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80004736:	11 a9       	ld.ub	r9,r8[0x2]
80004738:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000473a:	11 99       	ld.ub	r9,r8[0x1]
8000473c:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000473e:	11 88       	ld.ub	r8,r8[0x0]
80004740:	b8 b8       	st.b	r12[0x3],r8
}
80004742:	d8 02       	popm	pc
80004744:	80 00       	ld.sh	r0,r0[0x0]
80004746:	46 f0       	lddsp	r0,sp[0x1bc]
80004748:	80 00       	ld.sh	r0,r0[0x0]
8000474a:	43 80       	lddsp	r0,sp[0xe0]
8000474c:	00 00       	add	r0,r0
8000474e:	17 70       	ld.ub	r0,--r11

80004750 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80004750:	49 88       	lddpc	r8,800047b0 <fat_check_nav_access_file+0x60>
80004752:	11 89       	ld.ub	r9,r8[0x0]
80004754:	30 08       	mov	r8,0
80004756:	f0 09 18 00 	cp.b	r9,r8
8000475a:	c2 a0       	breq	800047ae <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000475c:	49 68       	lddpc	r8,800047b4 <fat_check_nav_access_file+0x64>
8000475e:	11 89       	ld.ub	r9,r8[0x0]
80004760:	49 68       	lddpc	r8,800047b8 <fat_check_nav_access_file+0x68>
80004762:	11 88       	ld.ub	r8,r8[0x0]
80004764:	f0 09 18 00 	cp.b	r9,r8
80004768:	c2 31       	brne	800047ae <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000476a:	49 38       	lddpc	r8,800047b4 <fat_check_nav_access_file+0x64>
8000476c:	70 89       	ld.w	r9,r8[0x20]
8000476e:	49 38       	lddpc	r8,800047b8 <fat_check_nav_access_file+0x68>
80004770:	70 88       	ld.w	r8,r8[0x20]
80004772:	10 39       	cp.w	r9,r8
80004774:	c1 d1       	brne	800047ae <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80004776:	49 28       	lddpc	r8,800047bc <fat_check_nav_access_file+0x6c>
80004778:	90 19       	ld.sh	r9,r8[0x2]
8000477a:	48 e8       	lddpc	r8,800047b0 <fat_check_nav_access_file+0x60>
8000477c:	90 18       	ld.sh	r8,r8[0x2]
8000477e:	f0 09 19 00 	cp.h	r9,r8
80004782:	c1 61       	brne	800047ae <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004784:	58 0c       	cp.w	r12,0
80004786:	c0 b0       	breq	8000479c <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80004788:	48 e8       	lddpc	r8,800047c0 <fat_check_nav_access_file+0x70>
8000478a:	11 89       	ld.ub	r9,r8[0x0]
8000478c:	30 08       	mov	r8,0
8000478e:	f0 09 18 00 	cp.b	r9,r8
80004792:	c0 e0       	breq	800047ae <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004794:	32 89       	mov	r9,40
80004796:	48 c8       	lddpc	r8,800047c4 <fat_check_nav_access_file+0x74>
80004798:	b0 89       	st.b	r8[0x0],r9
8000479a:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000479c:	48 98       	lddpc	r8,800047c0 <fat_check_nav_access_file+0x70>
8000479e:	11 88       	ld.ub	r8,r8[0x0]
800047a0:	e2 18 00 02 	andl	r8,0x2,COH
800047a4:	c0 50       	breq	800047ae <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
800047a6:	32 99       	mov	r9,41
800047a8:	48 78       	lddpc	r8,800047c4 <fat_check_nav_access_file+0x74>
800047aa:	b0 89       	st.b	r8[0x0],r9
800047ac:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
800047ae:	5e ff       	retal	1
800047b0:	00 00       	add	r0,r0
800047b2:	19 f8       	ld.ub	r8,r12[0x7]
800047b4:	00 00       	add	r0,r0
800047b6:	19 b0       	ld.ub	r0,r12[0x3]
800047b8:	00 00       	add	r0,r0
800047ba:	1a 04       	add	r4,sp
800047bc:	00 00       	add	r0,r0
800047be:	19 fc       	ld.ub	r12,r12[0x7]
800047c0:	00 00       	add	r0,r0
800047c2:	19 e8       	ld.ub	r8,r12[0x6]
800047c4:	00 00       	add	r0,r0
800047c6:	1a 00       	add	r0,sp

800047c8 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
800047c8:	d4 21       	pushm	r4-r7,lr
800047ca:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
800047cc:	58 0c       	cp.w	r12,0
800047ce:	c6 20       	breq	80004892 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
800047d0:	1a 97       	mov	r7,sp
800047d2:	4b 28       	lddpc	r8,80004898 <fat_invert_nav+0xd0>
800047d4:	70 09       	ld.w	r9,r8[0x0]
800047d6:	50 09       	stdsp	sp[0x0],r9
800047d8:	70 19       	ld.w	r9,r8[0x4]
800047da:	50 19       	stdsp	sp[0x4],r9
800047dc:	70 29       	ld.w	r9,r8[0x8]
800047de:	50 29       	stdsp	sp[0x8],r9
800047e0:	70 39       	ld.w	r9,r8[0xc]
800047e2:	50 39       	stdsp	sp[0xc],r9
800047e4:	fa c9 ff f0 	sub	r9,sp,-16
800047e8:	f0 ca ff f0 	sub	r10,r8,-16
800047ec:	74 0b       	ld.w	r11,r10[0x0]
800047ee:	93 0b       	st.w	r9[0x0],r11
800047f0:	74 1b       	ld.w	r11,r10[0x4]
800047f2:	93 1b       	st.w	r9[0x4],r11
800047f4:	74 2b       	ld.w	r11,r10[0x8]
800047f6:	93 2b       	st.w	r9[0x8],r11
800047f8:	74 3a       	ld.w	r10,r10[0xc]
800047fa:	93 3a       	st.w	r9[0xc],r10
800047fc:	fa c9 ff e0 	sub	r9,sp,-32
80004800:	f0 ca ff e0 	sub	r10,r8,-32
80004804:	74 0b       	ld.w	r11,r10[0x0]
80004806:	93 0b       	st.w	r9[0x0],r11
80004808:	74 1b       	ld.w	r11,r10[0x4]
8000480a:	93 1b       	st.w	r9[0x4],r11
8000480c:	74 2b       	ld.w	r11,r10[0x8]
8000480e:	93 2b       	st.w	r9[0x8],r11
80004810:	74 3a       	ld.w	r10,r10[0xc]
80004812:	93 3a       	st.w	r9[0xc],r10
80004814:	70 c9       	ld.w	r9,r8[0x30]
80004816:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80004818:	f8 c6 00 01 	sub	r6,r12,1
8000481c:	5c 56       	castu.b	r6
8000481e:	ec 04 10 34 	mul	r4,r6,52
80004822:	49 f9       	lddpc	r9,8000489c <fat_invert_nav+0xd4>
80004824:	12 04       	add	r4,r9
80004826:	33 45       	mov	r5,52
80004828:	0a 9a       	mov	r10,r5
8000482a:	08 9b       	mov	r11,r4
8000482c:	10 9c       	mov	r12,r8
8000482e:	f0 1f 00 1d 	mcall	800048a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80004832:	0a 9a       	mov	r10,r5
80004834:	1a 9b       	mov	r11,sp
80004836:	08 9c       	mov	r12,r4
80004838:	f0 1f 00 1a 	mcall	800048a0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000483c:	49 ac       	lddpc	r12,800048a4 <fat_invert_nav+0xdc>
8000483e:	78 08       	ld.w	r8,r12[0x0]
80004840:	50 08       	stdsp	sp[0x0],r8
80004842:	78 18       	ld.w	r8,r12[0x4]
80004844:	50 18       	stdsp	sp[0x4],r8
80004846:	78 28       	ld.w	r8,r12[0x8]
80004848:	50 28       	stdsp	sp[0x8],r8
8000484a:	78 38       	ld.w	r8,r12[0xc]
8000484c:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000484e:	ec 04 15 04 	lsl	r4,r6,0x4
80004852:	49 68       	lddpc	r8,800048a8 <fat_invert_nav+0xe0>
80004854:	10 04       	add	r4,r8
80004856:	31 05       	mov	r5,16
80004858:	0a 9a       	mov	r10,r5
8000485a:	08 9b       	mov	r11,r4
8000485c:	f0 1f 00 11 	mcall	800048a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80004860:	0a 9a       	mov	r10,r5
80004862:	1a 9b       	mov	r11,sp
80004864:	08 9c       	mov	r12,r4
80004866:	f0 1f 00 0f 	mcall	800048a0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000486a:	49 14       	lddpc	r4,800048ac <fat_invert_nav+0xe4>
8000486c:	30 45       	mov	r5,4
8000486e:	0a 9a       	mov	r10,r5
80004870:	08 9b       	mov	r11,r4
80004872:	1a 9c       	mov	r12,sp
80004874:	f0 1f 00 0b 	mcall	800048a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80004878:	48 e8       	lddpc	r8,800048b0 <fat_invert_nav+0xe8>
8000487a:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000487e:	0a 9a       	mov	r10,r5
80004880:	0c 9b       	mov	r11,r6
80004882:	08 9c       	mov	r12,r4
80004884:	f0 1f 00 07 	mcall	800048a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80004888:	0a 9a       	mov	r10,r5
8000488a:	1a 9b       	mov	r11,sp
8000488c:	0c 9c       	mov	r12,r6
8000488e:	f0 1f 00 05 	mcall	800048a0 <fat_invert_nav+0xd8>
}
80004892:	2f 3d       	sub	sp,-52
80004894:	d8 22       	popm	r4-r7,pc
80004896:	00 00       	add	r0,r0
80004898:	00 00       	add	r0,r0
8000489a:	19 b0       	ld.ub	r0,r12[0x3]
8000489c:	00 00       	add	r0,r0
8000489e:	1a 04       	add	r4,sp
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	c7 b2       	brcc	80004998 <fat_cache_read_sector+0x78>
800048a4:	00 00       	add	r0,r0
800048a6:	17 70       	ld.ub	r0,--r11
800048a8:	00 00       	add	r0,r0
800048aa:	19 e8       	ld.ub	r8,r12[0x6]
800048ac:	00 00       	add	r0,r0
800048ae:	19 fc       	ld.ub	r12,r12[0x7]
800048b0:	00 00       	add	r0,r0
800048b2:	19 f8       	ld.ub	r8,r12[0x7]

800048b4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
800048b4:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800048b6:	49 08       	lddpc	r8,800048f4 <fat_cache_flush+0x40>
800048b8:	f1 39 00 08 	ld.ub	r9,r8[8]
800048bc:	30 18       	mov	r8,1
800048be:	f0 09 18 00 	cp.b	r9,r8
800048c2:	c1 81       	brne	800048f2 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800048c4:	48 c8       	lddpc	r8,800048f4 <fat_cache_flush+0x40>
800048c6:	30 09       	mov	r9,0
800048c8:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800048cc:	11 8c       	ld.ub	r12,r8[0x0]
800048ce:	f0 1f 00 0b 	mcall	800048f8 <fat_cache_flush+0x44>
800048d2:	c0 50       	breq	800048dc <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
800048d4:	31 49       	mov	r9,20
800048d6:	48 a8       	lddpc	r8,800048fc <fat_cache_flush+0x48>
800048d8:	b0 89       	st.b	r8[0x0],r9
800048da:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800048dc:	48 68       	lddpc	r8,800048f4 <fat_cache_flush+0x40>
800048de:	48 9a       	lddpc	r10,80004900 <fat_cache_flush+0x4c>
800048e0:	70 1b       	ld.w	r11,r8[0x4]
800048e2:	11 8c       	ld.ub	r12,r8[0x0]
800048e4:	f0 1f 00 08 	mcall	80004904 <fat_cache_flush+0x50>
800048e8:	c0 50       	breq	800048f2 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
800048ea:	30 19       	mov	r9,1
800048ec:	48 48       	lddpc	r8,800048fc <fat_cache_flush+0x48>
800048ee:	b0 89       	st.b	r8[0x0],r9
800048f0:	d8 0a       	popm	pc,r12=0
         return false;
800048f2:	da 0a       	popm	pc,r12=1
800048f4:	00 00       	add	r0,r0
800048f6:	1a 38       	cp.w	r8,sp
800048f8:	80 00       	ld.sh	r0,r0[0x0]
800048fa:	72 e8       	ld.w	r8,r9[0x38]
800048fc:	00 00       	add	r0,r0
800048fe:	1a 00       	add	r0,sp
80004900:	00 00       	add	r0,r0
80004902:	17 b0       	ld.ub	r0,r11[0x3]
80004904:	80 00       	ld.sh	r0,r0[0x0]
80004906:	73 18       	ld.w	r8,r9[0x44]

80004908 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
80004908:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
8000490a:	e0 6a 02 00 	mov	r10,512
8000490e:	30 0b       	mov	r11,0
80004910:	48 2c       	lddpc	r12,80004918 <fat_cache_clear+0x10>
80004912:	f0 1f 00 03 	mcall	8000491c <fat_cache_clear+0x14>
}
80004916:	d8 02       	popm	pc
80004918:	00 00       	add	r0,r0
8000491a:	17 b0       	ld.ub	r0,r11[0x3]
8000491c:	80 00       	ld.sh	r0,r0[0x0]
8000491e:	c8 fa       	rjmp	8000463c <fat_get_entry_info+0x8>

80004920 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80004920:	eb cd 40 80 	pushm	r7,lr
80004924:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004926:	49 78       	lddpc	r8,80004980 <fat_cache_read_sector+0x60>
80004928:	11 89       	ld.ub	r9,r8[0x0]
8000492a:	49 78       	lddpc	r8,80004984 <fat_cache_read_sector+0x64>
8000492c:	11 88       	ld.ub	r8,r8[0x0]
8000492e:	f0 09 18 00 	cp.b	r9,r8
80004932:	c0 91       	brne	80004944 <fat_cache_read_sector+0x24>
80004934:	49 38       	lddpc	r8,80004980 <fat_cache_read_sector+0x60>
80004936:	70 19       	ld.w	r9,r8[0x4]
80004938:	49 48       	lddpc	r8,80004988 <fat_cache_read_sector+0x68>
8000493a:	70 08       	ld.w	r8,r8[0x0]
8000493c:	10 39       	cp.w	r9,r8
8000493e:	c0 31       	brne	80004944 <fat_cache_read_sector+0x24>
80004940:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80004944:	f0 1f 00 12 	mcall	8000498c <fat_cache_read_sector+0x6c>
80004948:	c1 90       	breq	8000497a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
8000494a:	f0 1f 00 12 	mcall	80004990 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000494e:	48 f8       	lddpc	r8,80004988 <fat_cache_read_sector+0x68>
80004950:	70 0b       	ld.w	r11,r8[0x0]
80004952:	48 c8       	lddpc	r8,80004980 <fat_cache_read_sector+0x60>
80004954:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80004956:	58 07       	cp.w	r7,0
80004958:	c0 c0       	breq	80004970 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000495a:	48 fa       	lddpc	r10,80004994 <fat_cache_read_sector+0x74>
8000495c:	48 a8       	lddpc	r8,80004984 <fat_cache_read_sector+0x64>
8000495e:	11 8c       	ld.ub	r12,r8[0x0]
80004960:	f0 1f 00 0e 	mcall	80004998 <fat_cache_read_sector+0x78>
80004964:	c0 60       	breq	80004970 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80004966:	30 19       	mov	r9,1
80004968:	48 d8       	lddpc	r8,8000499c <fat_cache_read_sector+0x7c>
8000496a:	b0 89       	st.b	r8[0x0],r9
8000496c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004970:	48 58       	lddpc	r8,80004984 <fat_cache_read_sector+0x64>
80004972:	11 89       	ld.ub	r9,r8[0x0]
80004974:	48 38       	lddpc	r8,80004980 <fat_cache_read_sector+0x60>
80004976:	b0 89       	st.b	r8[0x0],r9
80004978:	30 1c       	mov	r12,1
   return true;
}
8000497a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000497e:	00 00       	add	r0,r0
80004980:	00 00       	add	r0,r0
80004982:	1a 38       	cp.w	r8,sp
80004984:	00 00       	add	r0,r0
80004986:	19 b0       	ld.ub	r0,r12[0x3]
80004988:	00 00       	add	r0,r0
8000498a:	17 6c       	ld.uh	r12,--r11
8000498c:	80 00       	ld.sh	r0,r0[0x0]
8000498e:	48 b4       	lddpc	r4,800049b8 <fat_cluster_readnext+0x18>
80004990:	80 00       	ld.sh	r0,r0[0x0]
80004992:	46 d8       	lddsp	r8,sp[0x1b4]
80004994:	00 00       	add	r0,r0
80004996:	17 b0       	ld.ub	r0,r11[0x3]
80004998:	80 00       	ld.sh	r0,r0[0x0]
8000499a:	72 fc       	ld.w	r12,r9[0x3c]
8000499c:	00 00       	add	r0,r0
8000499e:	1a 00       	add	r0,sp

800049a0 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
800049a0:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
800049a2:	49 f8       	lddpc	r8,80004a1c <fat_cluster_readnext+0x7c>
800049a4:	11 89       	ld.ub	r9,r8[0x0]
800049a6:	30 38       	mov	r8,3
800049a8:	f0 09 18 00 	cp.b	r9,r8
800049ac:	c0 61       	brne	800049b8 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
800049ae:	49 d8       	lddpc	r8,80004a20 <fat_cluster_readnext+0x80>
800049b0:	90 09       	ld.sh	r9,r8[0x0]
800049b2:	2f c9       	sub	r9,-4
800049b4:	b0 09       	st.h	r8[0x0],r9
800049b6:	c0 58       	rjmp	800049c0 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
800049b8:	49 a8       	lddpc	r8,80004a20 <fat_cluster_readnext+0x80>
800049ba:	90 09       	ld.sh	r9,r8[0x0]
800049bc:	2f e9       	sub	r9,-2
800049be:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800049c0:	49 88       	lddpc	r8,80004a20 <fat_cluster_readnext+0x80>
800049c2:	90 09       	ld.sh	r9,r8[0x0]
800049c4:	e0 68 02 00 	mov	r8,512
800049c8:	f0 09 19 00 	cp.h	r9,r8
800049cc:	c0 c1       	brne	800049e4 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800049ce:	30 09       	mov	r9,0
800049d0:	49 48       	lddpc	r8,80004a20 <fat_cluster_readnext+0x80>
800049d2:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
800049d4:	49 48       	lddpc	r8,80004a24 <fat_cluster_readnext+0x84>
800049d6:	70 09       	ld.w	r9,r8[0x0]
800049d8:	2f f9       	sub	r9,-1
800049da:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800049dc:	30 1c       	mov	r12,1
800049de:	f0 1f 00 13 	mcall	80004a28 <fat_cluster_readnext+0x88>
800049e2:	c1 b0       	breq	80004a18 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800049e4:	49 28       	lddpc	r8,80004a2c <fat_cluster_readnext+0x8c>
800049e6:	2f c8       	sub	r8,-4
800049e8:	48 e9       	lddpc	r9,80004a20 <fat_cluster_readnext+0x80>
800049ea:	92 89       	ld.uh	r9,r9[0x0]
800049ec:	49 1a       	lddpc	r10,80004a30 <fat_cluster_readnext+0x90>
800049ee:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800049f2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800049f4:	12 0a       	add	r10,r9
800049f6:	15 9a       	ld.ub	r10,r10[0x1]
800049f8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800049fa:	48 9a       	lddpc	r10,80004a1c <fat_cluster_readnext+0x7c>
800049fc:	15 8b       	ld.ub	r11,r10[0x0]
800049fe:	30 3a       	mov	r10,3
80004a00:	f4 0b 18 00 	cp.b	r11,r10
80004a04:	c0 20       	breq	80004a08 <fat_cluster_readnext+0x68>
80004a06:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80004a08:	48 aa       	lddpc	r10,80004a30 <fat_cluster_readnext+0x90>
80004a0a:	f4 09 00 09 	add	r9,r10,r9
80004a0e:	13 aa       	ld.ub	r10,r9[0x2]
80004a10:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80004a12:	13 b9       	ld.ub	r9,r9[0x3]
80004a14:	b0 89       	st.b	r8[0x0],r9
80004a16:	30 1c       	mov	r12,1
   }
   return true;
}
80004a18:	d8 02       	popm	pc
80004a1a:	00 00       	add	r0,r0
80004a1c:	00 00       	add	r0,r0
80004a1e:	19 fc       	ld.ub	r12,r12[0x7]
80004a20:	00 00       	add	r0,r0
80004a22:	17 80       	ld.ub	r0,r11[0x0]
80004a24:	00 00       	add	r0,r0
80004a26:	17 6c       	ld.uh	r12,--r11
80004a28:	80 00       	ld.sh	r0,r0[0x0]
80004a2a:	49 20       	lddpc	r0,80004a70 <fat_cluster_val+0x3c>
80004a2c:	00 00       	add	r0,r0
80004a2e:	1a 50       	eor	r0,sp
80004a30:	00 00       	add	r0,r0
80004a32:	17 b0       	ld.ub	r0,r11[0x3]

80004a34 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80004a34:	d4 31       	pushm	r0-r7,lr
80004a36:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80004a38:	fe f8 02 18 	ld.w	r8,pc[536]
80004a3c:	11 88       	ld.ub	r8,r8[0x0]
80004a3e:	30 39       	mov	r9,3
80004a40:	f2 08 18 00 	cp.b	r8,r9
80004a44:	c0 d1       	brne	80004a5e <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80004a46:	fe fa 02 0e 	ld.w	r10,pc[526]
80004a4a:	74 09       	ld.w	r9,r10[0x0]
80004a4c:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80004a4e:	15 bb       	ld.ub	r11,r10[0x3]
80004a50:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004a54:	a3 6b       	lsl	r11,0x2
80004a56:	fe fa 02 02 	ld.w	r10,pc[514]
80004a5a:	b4 0b       	st.h	r10[0x0],r11
80004a5c:	c2 08       	rjmp	80004a9c <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80004a5e:	30 29       	mov	r9,2
80004a60:	f2 08 18 00 	cp.b	r8,r9
80004a64:	c0 81       	brne	80004a74 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004a66:	4f ca       	lddpc	r10,80004c54 <fat_cluster_val+0x220>
80004a68:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004a6a:	15 bb       	ld.ub	r11,r10[0x3]
80004a6c:	a1 7b       	lsl	r11,0x1
80004a6e:	4f ba       	lddpc	r10,80004c58 <fat_cluster_val+0x224>
80004a70:	b4 0b       	st.h	r10[0x0],r11
80004a72:	c1 58       	rjmp	80004a9c <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004a74:	30 19       	mov	r9,1
80004a76:	f2 08 18 00 	cp.b	r8,r9
80004a7a:	c0 30       	breq	80004a80 <fat_cluster_val+0x4c>
80004a7c:	30 09       	mov	r9,0
80004a7e:	c0 f8       	rjmp	80004a9c <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004a80:	4f 59       	lddpc	r9,80004c54 <fat_cluster_val+0x220>
80004a82:	72 09       	ld.w	r9,r9[0x0]
80004a84:	4f 5a       	lddpc	r10,80004c58 <fat_cluster_val+0x224>
80004a86:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80004a8a:	12 0b       	add	r11,r9
80004a8c:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80004a8e:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004a92:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004a96:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004a9a:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80004a9c:	58 05       	cp.w	r5,0
80004a9e:	c2 20       	breq	80004ae2 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004aa0:	4e fa       	lddpc	r10,80004c5c <fat_cluster_val+0x228>
80004aa2:	74 0a       	ld.w	r10,r10[0x0]
80004aa4:	14 39       	cp.w	r9,r10
80004aa6:	c0 32       	brcc	80004aac <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004aa8:	4e da       	lddpc	r10,80004c5c <fat_cluster_val+0x228>
80004aaa:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80004aac:	4e da       	lddpc	r10,80004c60 <fat_cluster_val+0x22c>
80004aae:	74 0a       	ld.w	r10,r10[0x0]
80004ab0:	14 39       	cp.w	r9,r10
80004ab2:	e0 88 00 04 	brls	80004aba <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004ab6:	4e ba       	lddpc	r10,80004c60 <fat_cluster_val+0x22c>
80004ab8:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80004aba:	30 1a       	mov	r10,1
80004abc:	f4 08 18 00 	cp.b	r8,r10
80004ac0:	c1 11       	brne	80004ae2 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ac2:	4e 68       	lddpc	r8,80004c58 <fat_cluster_val+0x224>
80004ac4:	90 0a       	ld.sh	r10,r8[0x0]
80004ac6:	e0 68 01 ff 	mov	r8,511
80004aca:	f0 0a 19 00 	cp.h	r10,r8
80004ace:	c0 a1       	brne	80004ae2 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004ad0:	f2 c8 ff ff 	sub	r8,r9,-1
80004ad4:	4e 3a       	lddpc	r10,80004c60 <fat_cluster_val+0x22c>
80004ad6:	74 0a       	ld.w	r10,r10[0x0]
80004ad8:	14 38       	cp.w	r8,r10
80004ada:	e0 88 00 04 	brls	80004ae2 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004ade:	4e 1a       	lddpc	r10,80004c60 <fat_cluster_val+0x22c>
80004ae0:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004ae2:	4e 18       	lddpc	r8,80004c64 <fat_cluster_val+0x230>
80004ae4:	70 48       	ld.w	r8,r8[0x10]
80004ae6:	10 09       	add	r9,r8
80004ae8:	4e 08       	lddpc	r8,80004c68 <fat_cluster_val+0x234>
80004aea:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004aec:	30 1c       	mov	r12,1
80004aee:	f0 1f 00 60 	mcall	80004c6c <fat_cluster_val+0x238>
80004af2:	e0 80 00 ad 	breq	80004c4c <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80004af6:	4d 98       	lddpc	r8,80004c58 <fat_cluster_val+0x224>
80004af8:	90 08       	ld.sh	r8,r8[0x0]
80004afa:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80004afe:	4d d9       	lddpc	r9,80004c70 <fat_cluster_val+0x23c>
80004b00:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80004b02:	0c 97       	mov	r7,r6
80004b04:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80004b06:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80004b08:	ec c4 ff fe 	sub	r4,r6,-2
80004b0c:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80004b0e:	ec c3 ff fd 	sub	r3,r6,-3
80004b12:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80004b14:	4c f9       	lddpc	r9,80004c50 <fat_cluster_val+0x21c>
80004b16:	13 8a       	ld.ub	r10,r9[0x0]
80004b18:	30 19       	mov	r9,1
80004b1a:	f2 0a 18 00 	cp.b	r10,r9
80004b1e:	c1 11       	brne	80004b40 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004b20:	e0 69 01 ff 	mov	r9,511
80004b24:	f2 08 19 00 	cp.h	r8,r9
80004b28:	c0 c1       	brne	80004b40 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80004b2a:	4d 08       	lddpc	r8,80004c68 <fat_cluster_val+0x234>
80004b2c:	70 09       	ld.w	r9,r8[0x0]
80004b2e:	2f f9       	sub	r9,-1
80004b30:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004b32:	30 1c       	mov	r12,1
80004b34:	f0 1f 00 4e 	mcall	80004c6c <fat_cluster_val+0x238>
80004b38:	e0 80 00 8a 	breq	80004c4c <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80004b3c:	4c d8       	lddpc	r8,80004c70 <fat_cluster_val+0x23c>
80004b3e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004b40:	58 05       	cp.w	r5,0
80004b42:	c3 11       	brne	80004ba4 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004b44:	4c 48       	lddpc	r8,80004c54 <fat_cluster_val+0x220>
80004b46:	f0 c9 ff fc 	sub	r9,r8,-4
80004b4a:	f0 cc ff f9 	sub	r12,r8,-7
80004b4e:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004b50:	2f a8       	sub	r8,-6
80004b52:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004b54:	4b fa       	lddpc	r10,80004c50 <fat_cluster_val+0x21c>
80004b56:	15 8a       	ld.ub	r10,r10[0x0]
80004b58:	30 3b       	mov	r11,3
80004b5a:	f6 0a 18 00 	cp.b	r10,r11
80004b5e:	c0 61       	brne	80004b6a <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004b60:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004b62:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004b66:	b2 80       	st.b	r9[0x0],r0
80004b68:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004b6a:	30 0b       	mov	r11,0
80004b6c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80004b6e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004b70:	30 19       	mov	r9,1
80004b72:	f2 0a 18 00 	cp.b	r10,r9
80004b76:	c0 20       	breq	80004b7a <fat_cluster_val+0x146>
80004b78:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b7a:	4b 79       	lddpc	r9,80004c54 <fat_cluster_val+0x220>
80004b7c:	13 b9       	ld.ub	r9,r9[0x3]
80004b7e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004b82:	c0 c0       	breq	80004b9a <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004b84:	19 8b       	ld.ub	r11,r12[0x0]
80004b86:	a5 8b       	lsr	r11,0x4
80004b88:	11 89       	ld.ub	r9,r8[0x0]
80004b8a:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b8e:	f6 0a 00 0a 	add	r10,r11,r10
80004b92:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004b94:	a5 89       	lsr	r9,0x4
80004b96:	b0 89       	st.b	r8[0x0],r9
80004b98:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80004b9a:	11 89       	ld.ub	r9,r8[0x0]
80004b9c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004ba0:	b0 89       	st.b	r8[0x0],r9
80004ba2:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004ba4:	4a b8       	lddpc	r8,80004c50 <fat_cluster_val+0x21c>
80004ba6:	11 88       	ld.ub	r8,r8[0x0]
80004ba8:	30 19       	mov	r9,1
80004baa:	f2 08 18 00 	cp.b	r8,r9
80004bae:	c3 a1       	brne	80004c22 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004bb0:	4a 98       	lddpc	r8,80004c54 <fat_cluster_val+0x220>
80004bb2:	11 b8       	ld.ub	r8,r8[0x3]
80004bb4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004bb8:	c1 10       	breq	80004bda <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80004bba:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80004bbe:	4a 68       	lddpc	r8,80004c54 <fat_cluster_val+0x220>
80004bc0:	2f c8       	sub	r8,-4
80004bc2:	11 b9       	ld.ub	r9,r8[0x3]
80004bc4:	f2 0a 15 04 	lsl	r10,r9,0x4
80004bc8:	14 05       	add	r5,r10
80004bca:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004bcc:	a5 89       	lsr	r9,0x4
80004bce:	11 a8       	ld.ub	r8,r8[0x2]
80004bd0:	a5 68       	lsl	r8,0x4
80004bd2:	f2 08 00 0a 	add	r10,r9,r8
80004bd6:	5c 5a       	castu.b	r10
80004bd8:	c0 c8       	rjmp	80004bf0 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80004bda:	49 f8       	lddpc	r8,80004c54 <fat_cluster_val+0x220>
80004bdc:	2f c8       	sub	r8,-4
80004bde:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004be0:	16 9a       	mov	r10,r11
80004be2:	e2 1a 00 f0 	andl	r10,0xf0,COH
80004be6:	11 a8       	ld.ub	r8,r8[0x2]
80004be8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004bec:	10 0a       	add	r10,r8
80004bee:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004bf0:	49 a8       	lddpc	r8,80004c58 <fat_cluster_val+0x224>
80004bf2:	90 09       	ld.sh	r9,r8[0x0]
80004bf4:	e0 68 01 ff 	mov	r8,511
80004bf8:	f0 09 19 00 	cp.h	r9,r8
80004bfc:	c2 31       	brne	80004c42 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80004bfe:	49 d8       	lddpc	r8,80004c70 <fat_cluster_val+0x23c>
80004c00:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80004c02:	f0 1f 00 1d 	mcall	80004c74 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80004c06:	49 98       	lddpc	r8,80004c68 <fat_cluster_val+0x234>
80004c08:	70 09       	ld.w	r9,r8[0x0]
80004c0a:	20 19       	sub	r9,1
80004c0c:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80004c0e:	30 1c       	mov	r12,1
80004c10:	f0 1f 00 17 	mcall	80004c6c <fat_cluster_val+0x238>
80004c14:	c1 c0       	breq	80004c4c <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80004c16:	49 78       	lddpc	r8,80004c70 <fat_cluster_val+0x23c>
80004c18:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80004c1c:	f0 1f 00 16 	mcall	80004c74 <fat_cluster_val+0x240>
80004c20:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004c22:	48 d9       	lddpc	r9,80004c54 <fat_cluster_val+0x220>
80004c24:	2f c9       	sub	r9,-4
80004c26:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004c28:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80004c2a:	30 3b       	mov	r11,3
80004c2c:	f6 08 18 00 	cp.b	r8,r11
80004c30:	c0 91       	brne	80004c42 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004c32:	13 98       	ld.ub	r8,r9[0x1]
80004c34:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004c36:	e0 10 ff f0 	andl	r0,0xfff0
80004c3a:	13 88       	ld.ub	r8,r9[0x0]
80004c3c:	f0 00 00 00 	add	r0,r8,r0
80004c40:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004c42:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004c44:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004c46:	f0 1f 00 0c 	mcall	80004c74 <fat_cluster_val+0x240>
80004c4a:	da 3a       	popm	r0-r7,pc,r12=1
80004c4c:	d8 3a       	popm	r0-r7,pc,r12=0
80004c4e:	00 00       	add	r0,r0
80004c50:	00 00       	add	r0,r0
80004c52:	19 fc       	ld.ub	r12,r12[0x7]
80004c54:	00 00       	add	r0,r0
80004c56:	1a 50       	eor	r0,sp
80004c58:	00 00       	add	r0,r0
80004c5a:	17 80       	ld.ub	r0,r11[0x0]
80004c5c:	00 00       	add	r0,r0
80004c5e:	19 e4       	ld.ub	r4,r12[0x6]
80004c60:	00 00       	add	r0,r0
80004c62:	17 ac       	ld.ub	r12,r11[0x2]
80004c64:	00 00       	add	r0,r0
80004c66:	19 b0       	ld.ub	r0,r12[0x3]
80004c68:	00 00       	add	r0,r0
80004c6a:	17 6c       	ld.uh	r12,--r11
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	49 20       	lddpc	r0,80004cb4 <fat_cluster_list+0x3c>
80004c70:	00 00       	add	r0,r0
80004c72:	17 b0       	ld.ub	r0,r11[0x3]
80004c74:	80 00       	ld.sh	r0,r0[0x0]
80004c76:	46 f0       	lddsp	r0,sp[0x1bc]

80004c78 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80004c78:	d4 31       	pushm	r0-r7,lr
80004c7a:	20 2d       	sub	sp,8
80004c7c:	18 93       	mov	r3,r12
80004c7e:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004c80:	30 89       	mov	r9,8
80004c82:	fe f8 02 8e 	ld.w	r8,pc[654]
80004c86:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004c88:	30 38       	mov	r8,3
80004c8a:	f0 0c 18 00 	cp.b	r12,r8
80004c8e:	5f 0a       	sreq	r10
80004c90:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004c92:	fe f9 02 82 	ld.w	r9,pc[642]
80004c96:	13 89       	ld.ub	r9,r9[0x0]
80004c98:	f0 09 18 00 	cp.b	r9,r8
80004c9c:	5f 08       	sreq	r8
80004c9e:	f5 e8 00 08 	and	r8,r10,r8
80004ca2:	c0 60       	breq	80004cae <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004ca4:	3f fc       	mov	r12,-1
80004ca6:	f0 1f 00 9d 	mcall	80004f18 <fat_cluster_list+0x2a0>
80004caa:	e0 80 01 2f 	breq	80004f08 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004cae:	fe f8 02 6e 	ld.w	r8,pc[622]
80004cb2:	70 08       	ld.w	r8,r8[0x0]
80004cb4:	58 08       	cp.w	r8,0
80004cb6:	c3 b1       	brne	80004d2c <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004cb8:	40 09       	lddsp	r9,sp[0x0]
80004cba:	58 09       	cp.w	r9,0
80004cbc:	e0 81 01 26 	brne	80004f08 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004cc0:	fe f8 02 54 	ld.w	r8,pc[596]
80004cc4:	11 88       	ld.ub	r8,r8[0x0]
80004cc6:	f0 ca 00 01 	sub	r10,r8,1
80004cca:	30 19       	mov	r9,1
80004ccc:	f2 0a 18 00 	cp.b	r10,r9
80004cd0:	e0 8b 00 23 	brhi	80004d16 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004cd4:	fe f8 02 48 	ld.w	r8,pc[584]
80004cd8:	70 18       	ld.w	r8,r8[0x4]
80004cda:	fe f9 02 46 	ld.w	r9,pc[582]
80004cde:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004ce2:	12 38       	cp.w	r8,r9
80004ce4:	c1 32       	brcc	80004d0a <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004ce6:	fe f9 02 36 	ld.w	r9,pc[566]
80004cea:	fe fa 02 36 	ld.w	r10,pc[566]
80004cee:	74 4b       	ld.w	r11,r10[0x10]
80004cf0:	16 08       	add	r8,r11
80004cf2:	f5 1b 00 18 	ld.uh	r11,r10[24]
80004cf6:	16 08       	add	r8,r11
80004cf8:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004cfa:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004cfe:	72 18       	ld.w	r8,r9[0x4]
80004d00:	f4 08 01 08 	sub	r8,r10,r8
80004d04:	93 18       	st.w	r9[0x4],r8
80004d06:	30 1c       	mov	r12,1
            return true;
80004d08:	c0 19       	rjmp	80004f0a <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80004d0a:	31 a9       	mov	r9,26
80004d0c:	fe f8 02 04 	ld.w	r8,pc[516]
80004d10:	b0 89       	st.b	r8[0x0],r9
80004d12:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004d14:	cf b8       	rjmp	80004f0a <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004d16:	30 39       	mov	r9,3
80004d18:	f2 08 18 00 	cp.b	r8,r9
80004d1c:	c0 a1       	brne	80004d30 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004d1e:	fe f8 02 02 	ld.w	r8,pc[514]
80004d22:	70 69       	ld.w	r9,r8[0x18]
80004d24:	fe f8 02 00 	ld.w	r8,pc[512]
80004d28:	91 09       	st.w	r8[0x0],r9
80004d2a:	c0 38       	rjmp	80004d30 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004d2c:	4f e9       	lddpc	r9,80004f24 <fat_cluster_list+0x2ac>
80004d2e:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004d30:	30 38       	mov	r8,3
80004d32:	f0 03 18 00 	cp.b	r3,r8
80004d36:	c0 70       	breq	80004d44 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004d38:	0e 9c       	mov	r12,r7
80004d3a:	f0 1f 00 7c 	mcall	80004f28 <fat_cluster_list+0x2b0>
80004d3e:	c0 70       	breq	80004d4c <fat_cluster_list+0xd4>
80004d40:	30 1c       	mov	r12,1
80004d42:	ce 48       	rjmp	80004f0a <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004d44:	f0 1f 00 7a 	mcall	80004f2c <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004d48:	f0 1f 00 7a 	mcall	80004f30 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80004d4c:	4f 40       	lddpc	r0,80004f1c <fat_cluster_list+0x2a4>
80004d4e:	3f f8       	mov	r8,-1
80004d50:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d52:	00 96       	mov	r6,r0
80004d54:	4f 35       	lddpc	r5,80004f20 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d56:	4f 47       	lddpc	r7,80004f24 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d58:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d5a:	e0 c8 ff f9 	sub	r8,r0,-7
80004d5e:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d60:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d62:	6c 19       	ld.w	r9,r6[0x4]
80004d64:	0b 98       	ld.ub	r8,r5[0x1]
80004d66:	10 39       	cp.w	r9,r8
80004d68:	c4 32       	brcc	80004dee <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d6a:	6a 4a       	ld.w	r10,r5[0x10]
80004d6c:	14 09       	add	r9,r10
80004d6e:	6a 5a       	ld.w	r10,r5[0x14]
80004d70:	14 09       	add	r9,r10
80004d72:	6e 0a       	ld.w	r10,r7[0x0]
80004d74:	20 2a       	sub	r10,2
80004d76:	f4 08 02 48 	mul	r8,r10,r8
80004d7a:	f2 08 00 08 	add	r8,r9,r8
80004d7e:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d80:	e2 03 18 00 	cp.b	r3,r1
80004d84:	c0 d1       	brne	80004d9e <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004d86:	4e 67       	lddpc	r7,80004f1c <fat_cluster_list+0x2a4>
80004d88:	4e 68       	lddpc	r8,80004f20 <fat_cluster_list+0x2a8>
80004d8a:	11 99       	ld.ub	r9,r8[0x1]
80004d8c:	6e 18       	ld.w	r8,r7[0x4]
80004d8e:	f2 08 01 08 	sub	r8,r9,r8
80004d92:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004d94:	f0 1f 00 68 	mcall	80004f34 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004d98:	30 1c       	mov	r12,1
80004d9a:	8f 1c       	st.w	r7[0x4],r12
            return true;
80004d9c:	cb 78       	rjmp	80004f0a <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d9e:	0b 99       	ld.ub	r9,r5[0x1]
80004da0:	40 1a       	lddsp	r10,sp[0x4]
80004da2:	15 88       	ld.ub	r8,r10[0x0]
80004da4:	f2 08 01 08 	sub	r8,r9,r8
80004da8:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004daa:	e4 03 18 00 	cp.b	r3,r2
80004dae:	c2 01       	brne	80004dee <fat_cluster_list+0x176>
80004db0:	4d 99       	lddpc	r9,80004f14 <fat_cluster_list+0x29c>
80004db2:	13 88       	ld.ub	r8,r9[0x0]
80004db4:	e4 08 18 00 	cp.b	r8,r2
80004db8:	c1 b0       	breq	80004dee <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004dba:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004dbc:	30 0c       	mov	r12,0
80004dbe:	f0 1f 00 5f 	mcall	80004f38 <fat_cluster_list+0x2c0>
80004dc2:	e0 80 00 a3 	breq	80004f08 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004dc6:	6e 09       	ld.w	r9,r7[0x0]
80004dc8:	f2 c8 ff ff 	sub	r8,r9,-1
80004dcc:	8f 08       	st.w	r7[0x0],r8
80004dce:	6e 1a       	ld.w	r10,r7[0x4]
80004dd0:	14 38       	cp.w	r8,r10
80004dd2:	c0 a0       	breq	80004de6 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004dd4:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004dd6:	08 19       	sub	r9,r4
80004dd8:	0b 98       	ld.ub	r8,r5[0x1]
80004dda:	b1 39       	mul	r9,r8
80004ddc:	6c 18       	ld.w	r8,r6[0x4]
80004dde:	f2 08 00 08 	add	r8,r9,r8
80004de2:	8d 18       	st.w	r6[0x4],r8
                  break;
80004de4:	c0 58       	rjmp	80004dee <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80004de6:	f0 1f 00 56 	mcall	80004f3c <fat_cluster_list+0x2c4>
80004dea:	ce e1       	brne	80004dc6 <fat_cluster_list+0x14e>
80004dec:	c8 e8       	rjmp	80004f08 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004dee:	30 0c       	mov	r12,0
80004df0:	f0 1f 00 52 	mcall	80004f38 <fat_cluster_list+0x2c0>
80004df4:	e0 80 00 8a 	breq	80004f08 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004df8:	f0 1f 00 52 	mcall	80004f40 <fat_cluster_list+0x2c8>
80004dfc:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80004dfe:	e4 0c 18 00 	cp.b	r12,r2
80004e02:	e0 80 00 83 	breq	80004f08 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004e06:	01 89       	ld.ub	r9,r0[0x0]
80004e08:	3f f8       	mov	r8,-1
80004e0a:	f0 09 18 00 	cp.b	r9,r8
80004e0e:	c4 61       	brne	80004e9a <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004e10:	e2 0c 18 00 	cp.b	r12,r1
80004e14:	c2 b1       	brne	80004e6a <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004e16:	4c 28       	lddpc	r8,80004f1c <fat_cluster_list+0x2a4>
80004e18:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004e1a:	4c b9       	lddpc	r9,80004f44 <fat_cluster_list+0x2cc>
80004e1c:	13 89       	ld.ub	r9,r9[0x0]
80004e1e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004e22:	4c aa       	lddpc	r10,80004f48 <fat_cluster_list+0x2d0>
80004e24:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004e28:	72 2a       	ld.w	r10,r9[0x8]
80004e2a:	0e 1a       	sub	r10,r7
80004e2c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004e2e:	4b d9       	lddpc	r9,80004f20 <fat_cluster_list+0x2a8>
80004e30:	72 5b       	ld.w	r11,r9[0x14]
80004e32:	72 4a       	ld.w	r10,r9[0x10]
80004e34:	14 0b       	add	r11,r10
80004e36:	13 99       	ld.ub	r9,r9[0x1]
80004e38:	4b ba       	lddpc	r10,80004f24 <fat_cluster_list+0x2ac>
80004e3a:	74 0a       	ld.w	r10,r10[0x0]
80004e3c:	20 2a       	sub	r10,2
80004e3e:	f2 0a 02 4a 	mul	r10,r9,r10
80004e42:	f6 0a 00 0a 	add	r10,r11,r10
80004e46:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004e48:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80004e4a:	30 38       	mov	r8,3
80004e4c:	f0 03 18 00 	cp.b	r3,r8
80004e50:	c0 30       	breq	80004e56 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004e52:	f0 1f 00 39 	mcall	80004f34 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004e56:	4b 28       	lddpc	r8,80004f1c <fat_cluster_list+0x2a4>
80004e58:	4b 39       	lddpc	r9,80004f24 <fat_cluster_list+0x2ac>
80004e5a:	72 09       	ld.w	r9,r9[0x0]
80004e5c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80004e5e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004e60:	31 a9       	mov	r9,26
80004e62:	4a c8       	lddpc	r8,80004f10 <fat_cluster_list+0x298>
80004e64:	b0 89       	st.b	r8[0x0],r9
80004e66:	30 0c       	mov	r12,0
            return false;
80004e68:	c5 18       	rjmp	80004f0a <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e6a:	0b 98       	ld.ub	r8,r5[0x1]
80004e6c:	6c 19       	ld.w	r9,r6[0x4]
80004e6e:	f2 08 01 08 	sub	r8,r9,r8
80004e72:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e74:	40 0a       	lddsp	r10,sp[0x0]
80004e76:	58 0a       	cp.w	r10,0
80004e78:	c4 50       	breq	80004f02 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80004e7a:	58 08       	cp.w	r8,0
80004e7c:	c4 31       	brne	80004f02 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004e7e:	6e 18       	ld.w	r8,r7[0x4]
80004e80:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004e82:	e0 68 ff ff 	mov	r8,65535
80004e86:	ea 18 0f ff 	orh	r8,0xfff
80004e8a:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e8c:	30 1c       	mov	r12,1
80004e8e:	f0 1f 00 2b 	mcall	80004f38 <fat_cluster_list+0x2c0>
80004e92:	c3 b0       	breq	80004f08 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004e94:	6c 08       	ld.w	r8,r6[0x0]
80004e96:	8f 18       	st.w	r7[0x4],r8
80004e98:	c3 58       	rjmp	80004f02 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004e9a:	e4 03 18 00 	cp.b	r3,r2
80004e9e:	c0 a1       	brne	80004eb2 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004ea0:	6e 09       	ld.w	r9,r7[0x0]
80004ea2:	2f f9       	sub	r9,-1
80004ea4:	6e 18       	ld.w	r8,r7[0x4]
80004ea6:	10 39       	cp.w	r9,r8
80004ea8:	c1 b0       	breq	80004ede <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004eaa:	f0 1f 00 23 	mcall	80004f34 <fat_cluster_list+0x2bc>
80004eae:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004eb0:	c2 d8       	rjmp	80004f0a <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004eb2:	40 09       	lddsp	r9,sp[0x0]
80004eb4:	58 09       	cp.w	r9,0
80004eb6:	c1 40       	breq	80004ede <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004eb8:	6e 18       	ld.w	r8,r7[0x4]
80004eba:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80004ebc:	30 08       	mov	r8,0
80004ebe:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004ec0:	0b 98       	ld.ub	r8,r5[0x1]
80004ec2:	6c 19       	ld.w	r9,r6[0x4]
80004ec4:	10 39       	cp.w	r9,r8
80004ec6:	c0 62       	brcc	80004ed2 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004ec8:	e0 68 ff ff 	mov	r8,65535
80004ecc:	ea 18 0f ff 	orh	r8,0xfff
80004ed0:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004ed2:	30 1c       	mov	r12,1
80004ed4:	f0 1f 00 19 	mcall	80004f38 <fat_cluster_list+0x2c0>
80004ed8:	c1 80       	breq	80004f08 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80004eda:	6c 08       	ld.w	r8,r6[0x0]
80004edc:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80004ede:	e2 04 18 00 	cp.b	r4,r1
80004ee2:	c0 b1       	brne	80004ef8 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004ee4:	40 0a       	lddsp	r10,sp[0x0]
80004ee6:	58 0a       	cp.w	r10,0
80004ee8:	c0 40       	breq	80004ef0 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80004eea:	f0 1f 00 19 	mcall	80004f4c <fat_cluster_list+0x2d4>
80004eee:	c0 e8       	rjmp	80004f0a <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80004ef0:	f0 1f 00 11 	mcall	80004f34 <fat_cluster_list+0x2bc>
80004ef4:	30 1c       	mov	r12,1
            return true; // End of segment
80004ef6:	c0 a8       	rjmp	80004f0a <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004ef8:	0b 99       	ld.ub	r9,r5[0x1]
80004efa:	6c 18       	ld.w	r8,r6[0x4]
80004efc:	f2 08 00 08 	add	r8,r9,r8
80004f00:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004f02:	6e 18       	ld.w	r8,r7[0x4]
80004f04:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004f06:	c2 eb       	rjmp	80004d62 <fat_cluster_list+0xea>
80004f08:	30 0c       	mov	r12,0
}
80004f0a:	2f ed       	sub	sp,-8
80004f0c:	d8 32       	popm	r0-r7,pc
80004f0e:	00 00       	add	r0,r0
80004f10:	00 00       	add	r0,r0
80004f12:	1a 00       	add	r0,sp
80004f14:	00 00       	add	r0,r0
80004f16:	19 fc       	ld.ub	r12,r12[0x7]
80004f18:	80 00       	ld.sh	r0,r0[0x0]
80004f1a:	57 4c       	stdsp	sp[0x1d0],r12
80004f1c:	00 00       	add	r0,r0
80004f1e:	1a 58       	eor	r8,sp
80004f20:	00 00       	add	r0,r0
80004f22:	19 b0       	ld.ub	r0,r12[0x3]
80004f24:	00 00       	add	r0,r0
80004f26:	1a 50       	eor	r0,sp
80004f28:	80 00       	ld.sh	r0,r0[0x0]
80004f2a:	41 e0       	lddsp	r0,sp[0x78]
80004f2c:	80 00       	ld.sh	r0,r0[0x0]
80004f2e:	40 b8       	lddsp	r8,sp[0x2c]
80004f30:	80 00       	ld.sh	r0,r0[0x0]
80004f32:	53 a8       	stdsp	sp[0xe8],r8
80004f34:	80 00       	ld.sh	r0,r0[0x0]
80004f36:	41 88       	lddsp	r8,sp[0x60]
80004f38:	80 00       	ld.sh	r0,r0[0x0]
80004f3a:	4a 34       	lddpc	r4,80004fc4 <fat_read_dir+0x74>
80004f3c:	80 00       	ld.sh	r0,r0[0x0]
80004f3e:	49 a0       	lddpc	r0,80004fa4 <fat_read_dir+0x54>
80004f40:	80 00       	ld.sh	r0,r0[0x0]
80004f42:	40 58       	lddsp	r8,sp[0x14]
80004f44:	00 00       	add	r0,r0
80004f46:	1a 02       	add	r2,sp
80004f48:	00 00       	add	r0,r0
80004f4a:	17 84       	ld.ub	r4,r11[0x0]
80004f4c:	80 00       	ld.sh	r0,r0[0x0]
80004f4e:	54 34       	stdsp	sp[0x10c],r4

80004f50 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004f50:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f54:	49 98       	lddpc	r8,80004fb8 <fat_read_dir+0x68>
80004f56:	90 97       	ld.uh	r7,r8[0x2]
80004f58:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f5a:	49 98       	lddpc	r8,80004fbc <fat_read_dir+0x6c>
80004f5c:	11 89       	ld.ub	r9,r8[0x0]
80004f5e:	49 98       	lddpc	r8,80004fc0 <fat_read_dir+0x70>
80004f60:	11 88       	ld.ub	r8,r8[0x0]
80004f62:	f0 09 18 00 	cp.b	r9,r8
80004f66:	c0 d1       	brne	80004f80 <fat_read_dir+0x30>
80004f68:	49 58       	lddpc	r8,80004fbc <fat_read_dir+0x6c>
80004f6a:	70 39       	ld.w	r9,r8[0xc]
80004f6c:	49 58       	lddpc	r8,80004fc0 <fat_read_dir+0x70>
80004f6e:	70 88       	ld.w	r8,r8[0x20]
80004f70:	10 39       	cp.w	r9,r8
80004f72:	c0 71       	brne	80004f80 <fat_read_dir+0x30>
80004f74:	49 28       	lddpc	r8,80004fbc <fat_read_dir+0x6c>
80004f76:	70 48       	ld.w	r8,r8[0x10]
80004f78:	0e 38       	cp.w	r8,r7
80004f7a:	c0 31       	brne	80004f80 <fat_read_dir+0x30>
80004f7c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004f80:	49 18       	lddpc	r8,80004fc4 <fat_read_dir+0x74>
80004f82:	49 09       	lddpc	r9,80004fc0 <fat_read_dir+0x70>
80004f84:	72 89       	ld.w	r9,r9[0x20]
80004f86:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004f88:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004f8a:	30 0b       	mov	r11,0
80004f8c:	30 2c       	mov	r12,2
80004f8e:	f0 1f 00 0f 	mcall	80004fc8 <fat_read_dir+0x78>
80004f92:	c1 00       	breq	80004fb2 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004f94:	48 c8       	lddpc	r8,80004fc4 <fat_read_dir+0x74>
80004f96:	70 09       	ld.w	r9,r8[0x0]
80004f98:	48 d8       	lddpc	r8,80004fcc <fat_read_dir+0x7c>
80004f9a:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004f9c:	30 1c       	mov	r12,1
80004f9e:	f0 1f 00 0d 	mcall	80004fd0 <fat_read_dir+0x80>
80004fa2:	c0 80       	breq	80004fb2 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004fa4:	48 68       	lddpc	r8,80004fbc <fat_read_dir+0x6c>
80004fa6:	48 79       	lddpc	r9,80004fc0 <fat_read_dir+0x70>
80004fa8:	72 89       	ld.w	r9,r9[0x20]
80004faa:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004fac:	91 47       	st.w	r8[0x10],r7
80004fae:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004fb2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004fb6:	00 00       	add	r0,r0
80004fb8:	00 00       	add	r0,r0
80004fba:	19 fc       	ld.ub	r12,r12[0x7]
80004fbc:	00 00       	add	r0,r0
80004fbe:	1a 38       	cp.w	r8,sp
80004fc0:	00 00       	add	r0,r0
80004fc2:	19 b0       	ld.ub	r0,r12[0x3]
80004fc4:	00 00       	add	r0,r0
80004fc6:	1a 58       	eor	r8,sp
80004fc8:	80 00       	ld.sh	r0,r0[0x0]
80004fca:	4c 78       	lddpc	r8,800050e4 <fat_write_file+0x34>
80004fcc:	00 00       	add	r0,r0
80004fce:	17 6c       	ld.uh	r12,--r11
80004fd0:	80 00       	ld.sh	r0,r0[0x0]
80004fd2:	49 20       	lddpc	r0,80005018 <fat_read_file+0x44>

80004fd4 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004fd4:	eb cd 40 c0 	pushm	r6-r7,lr
80004fd8:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004fda:	4a e8       	lddpc	r8,80005090 <fat_read_file+0xbc>
80004fdc:	70 38       	ld.w	r8,r8[0xc]
80004fde:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80004fe2:	30 29       	mov	r9,2
80004fe4:	f2 0c 18 00 	cp.b	r12,r9
80004fe8:	c1 31       	brne	8000500e <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004fea:	4a b8       	lddpc	r8,80005094 <fat_read_file+0xc0>
80004fec:	11 89       	ld.ub	r9,r8[0x0]
80004fee:	4a b8       	lddpc	r8,80005098 <fat_read_file+0xc4>
80004ff0:	11 88       	ld.ub	r8,r8[0x0]
80004ff2:	f0 09 18 00 	cp.b	r9,r8
80004ff6:	c1 91       	brne	80005028 <fat_read_file+0x54>
80004ff8:	4a 78       	lddpc	r8,80005094 <fat_read_file+0xc0>
80004ffa:	70 39       	ld.w	r9,r8[0xc]
80004ffc:	4a 58       	lddpc	r8,80005090 <fat_read_file+0xbc>
80004ffe:	70 18       	ld.w	r8,r8[0x4]
80005000:	10 39       	cp.w	r9,r8
80005002:	c1 31       	brne	80005028 <fat_read_file+0x54>
80005004:	4a 48       	lddpc	r8,80005094 <fat_read_file+0xc0>
80005006:	70 48       	ld.w	r8,r8[0x10]
80005008:	0c 38       	cp.w	r8,r6
8000500a:	c0 f1       	brne	80005028 <fat_read_file+0x54>
8000500c:	c3 38       	rjmp	80005072 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
8000500e:	30 39       	mov	r9,3
80005010:	f2 0c 18 00 	cp.b	r12,r9
80005014:	c3 31       	brne	8000507a <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80005016:	49 f9       	lddpc	r9,80005090 <fat_read_file+0xbc>
80005018:	72 19       	ld.w	r9,r9[0x4]
8000501a:	58 09       	cp.w	r9,0
8000501c:	c2 b0       	breq	80005072 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
8000501e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80005022:	c2 c0       	breq	8000507a <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80005024:	2f f6       	sub	r6,-1
80005026:	c2 a8       	rjmp	8000507a <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80005028:	49 d8       	lddpc	r8,8000509c <fat_read_file+0xc8>
8000502a:	49 a9       	lddpc	r9,80005090 <fat_read_file+0xbc>
8000502c:	72 19       	ld.w	r9,r9[0x4]
8000502e:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005030:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80005032:	30 1b       	mov	r11,1
80005034:	16 9c       	mov	r12,r11
80005036:	f0 1f 00 1b 	mcall	800050a0 <fat_read_file+0xcc>
8000503a:	c1 e0       	breq	80005076 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
8000503c:	49 88       	lddpc	r8,8000509c <fat_read_file+0xc8>
8000503e:	70 09       	ld.w	r9,r8[0x0]
80005040:	49 98       	lddpc	r8,800050a4 <fat_read_file+0xd0>
80005042:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80005044:	30 1c       	mov	r12,1
80005046:	f0 1f 00 19 	mcall	800050a8 <fat_read_file+0xd4>
8000504a:	c1 60       	breq	80005076 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
8000504c:	49 28       	lddpc	r8,80005094 <fat_read_file+0xc0>
8000504e:	49 19       	lddpc	r9,80005090 <fat_read_file+0xbc>
80005050:	72 19       	ld.w	r9,r9[0x4]
80005052:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005054:	91 46       	st.w	r8[0x10],r6
80005056:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000505a:	30 38       	mov	r8,3
8000505c:	f0 07 18 00 	cp.b	r7,r8
80005060:	c0 b1       	brne	80005076 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80005062:	49 38       	lddpc	r8,800050ac <fat_read_file+0xd8>
80005064:	11 89       	ld.ub	r9,r8[0x0]
80005066:	31 a8       	mov	r8,26
80005068:	f0 09 18 00 	cp.b	r9,r8
8000506c:	5f 0c       	sreq	r12
8000506e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005072:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80005076:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000507a:	48 98       	lddpc	r8,8000509c <fat_read_file+0xc8>
8000507c:	48 59       	lddpc	r9,80005090 <fat_read_file+0xbc>
8000507e:	72 19       	ld.w	r9,r9[0x4]
80005080:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005082:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005084:	30 1b       	mov	r11,1
80005086:	0e 9c       	mov	r12,r7
80005088:	f0 1f 00 06 	mcall	800050a0 <fat_read_file+0xcc>
8000508c:	ce 70       	breq	8000505a <fat_read_file+0x86>
8000508e:	cf 2b       	rjmp	80005072 <fat_read_file+0x9e>
80005090:	00 00       	add	r0,r0
80005092:	17 70       	ld.ub	r0,--r11
80005094:	00 00       	add	r0,r0
80005096:	1a 38       	cp.w	r8,sp
80005098:	00 00       	add	r0,r0
8000509a:	19 b0       	ld.ub	r0,r12[0x3]
8000509c:	00 00       	add	r0,r0
8000509e:	1a 58       	eor	r8,sp
800050a0:	80 00       	ld.sh	r0,r0[0x0]
800050a2:	4c 78       	lddpc	r8,800051bc <fat_check_device+0x4>
800050a4:	00 00       	add	r0,r0
800050a6:	17 6c       	ld.uh	r12,--r11
800050a8:	80 00       	ld.sh	r0,r0[0x0]
800050aa:	49 20       	lddpc	r0,800050f0 <fat_write_file+0x40>
800050ac:	00 00       	add	r0,r0
800050ae:	1a 00       	add	r0,sp

800050b0 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
800050b0:	eb cd 40 c0 	pushm	r6-r7,lr
800050b4:	18 97       	mov	r7,r12
800050b6:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
800050b8:	4b 68       	lddpc	r8,80005190 <fat_write_file+0xe0>
800050ba:	70 18       	ld.w	r8,r8[0x4]
800050bc:	58 08       	cp.w	r8,0
800050be:	c0 a1       	brne	800050d2 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
800050c0:	4b 58       	lddpc	r8,80005194 <fat_write_file+0xe4>
800050c2:	3f f9       	mov	r9,-1
800050c4:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
800050c6:	30 09       	mov	r9,0
800050c8:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
800050ca:	30 1c       	mov	r12,1
800050cc:	f0 1f 00 33 	mcall	80005198 <fat_write_file+0xe8>
800050d0:	c1 c8       	rjmp	80005108 <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
800050d2:	f0 1f 00 33 	mcall	8000519c <fat_write_file+0xec>
800050d6:	c0 30       	breq	800050dc <fat_write_file+0x2c>
800050d8:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
800050dc:	4b 18       	lddpc	r8,800051a0 <fat_write_file+0xf0>
800050de:	11 89       	ld.ub	r9,r8[0x0]
800050e0:	31 a8       	mov	r8,26
800050e2:	f0 09 18 00 	cp.b	r9,r8
800050e6:	c5 21       	brne	8000518a <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800050e8:	4a f8       	lddpc	r8,800051a4 <fat_write_file+0xf4>
800050ea:	11 88       	ld.ub	r8,r8[0x0]
800050ec:	f0 08 00 28 	add	r8,r8,r8<<0x2
800050f0:	4a e9       	lddpc	r9,800051a8 <fat_write_file+0xf8>
800050f2:	f2 08 00 28 	add	r8,r9,r8<<0x2
800050f6:	3f f9       	mov	r9,-1
800050f8:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
800050fa:	2f 88       	sub	r8,-8
800050fc:	4a c9       	lddpc	r9,800051ac <fat_write_file+0xfc>
800050fe:	13 9a       	ld.ub	r10,r9[0x1]
80005100:	70 09       	ld.w	r9,r8[0x0]
80005102:	f4 09 00 09 	add	r9,r10,r9
80005106:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
80005108:	30 18       	mov	r8,1
8000510a:	f0 07 18 00 	cp.b	r7,r8
8000510e:	c0 41       	brne	80005116 <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
80005110:	4a 18       	lddpc	r8,80005194 <fat_write_file+0xe4>
80005112:	91 16       	st.w	r8[0x4],r6
80005114:	c0 48       	rjmp	8000511c <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80005116:	30 19       	mov	r9,1
80005118:	49 f8       	lddpc	r8,80005194 <fat_write_file+0xe4>
8000511a:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
8000511c:	f0 1f 00 25 	mcall	800051b0 <fat_write_file+0x100>
80005120:	c3 50       	breq	8000518a <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80005122:	49 c8       	lddpc	r8,80005190 <fat_write_file+0xe0>
80005124:	70 18       	ld.w	r8,r8[0x4]
80005126:	58 08       	cp.w	r8,0
80005128:	c0 d1       	brne	80005142 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
8000512a:	49 b8       	lddpc	r8,80005194 <fat_write_file+0xe4>
8000512c:	70 08       	ld.w	r8,r8[0x0]
8000512e:	49 e9       	lddpc	r9,800051a4 <fat_write_file+0xf4>
80005130:	13 89       	ld.ub	r9,r9[0x0]
80005132:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005136:	2f f9       	sub	r9,-1
80005138:	49 ca       	lddpc	r10,800051a8 <fat_write_file+0xf8>
8000513a:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
8000513e:	49 59       	lddpc	r9,80005190 <fat_write_file+0xe0>
80005140:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80005142:	30 18       	mov	r8,1
80005144:	f0 07 18 00 	cp.b	r7,r8
80005148:	c0 71       	brne	80005156 <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
8000514a:	49 38       	lddpc	r8,80005194 <fat_write_file+0xe4>
8000514c:	70 19       	ld.w	r9,r8[0x4]
8000514e:	ec 09 01 09 	sub	r9,r6,r9
80005152:	91 19       	st.w	r8[0x4],r9
80005154:	c0 68       	rjmp	80005160 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80005156:	49 08       	lddpc	r8,80005194 <fat_write_file+0xe4>
80005158:	70 19       	ld.w	r9,r8[0x4]
8000515a:	f2 09 11 01 	rsub	r9,r9,1
8000515e:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005160:	48 d9       	lddpc	r9,80005194 <fat_write_file+0xe4>
80005162:	49 38       	lddpc	r8,800051ac <fat_write_file+0xfc>
80005164:	70 5b       	ld.w	r11,r8[0x14]
80005166:	70 4a       	ld.w	r10,r8[0x10]
80005168:	f6 0a 00 0a 	add	r10,r11,r10
8000516c:	11 9b       	ld.ub	r11,r8[0x1]
8000516e:	72 08       	ld.w	r8,r9[0x0]
80005170:	20 28       	sub	r8,2
80005172:	f6 08 02 48 	mul	r8,r11,r8
80005176:	f4 08 00 08 	add	r8,r10,r8
8000517a:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
8000517c:	f0 1f 00 0e 	mcall	800051b4 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80005180:	0e 9c       	mov	r12,r7
80005182:	f0 1f 00 07 	mcall	8000519c <fat_write_file+0xec>
80005186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000518a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000518e:	00 00       	add	r0,r0
80005190:	00 00       	add	r0,r0
80005192:	17 70       	ld.ub	r0,--r11
80005194:	00 00       	add	r0,r0
80005196:	1a 58       	eor	r8,sp
80005198:	80 00       	ld.sh	r0,r0[0x0]
8000519a:	40 e0       	lddsp	r0,sp[0x38]
8000519c:	80 00       	ld.sh	r0,r0[0x0]
8000519e:	4f d4       	lddpc	r4,80005390 <fat_translate_char_shortname+0x34>
800051a0:	00 00       	add	r0,r0
800051a2:	1a 00       	add	r0,sp
800051a4:	00 00       	add	r0,r0
800051a6:	1a 02       	add	r2,sp
800051a8:	00 00       	add	r0,r0
800051aa:	17 84       	ld.ub	r4,r11[0x0]
800051ac:	00 00       	add	r0,r0
800051ae:	19 b0       	ld.ub	r0,r12[0x3]
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	57 ec       	stdsp	sp[0x1f8],r12
800051b4:	80 00       	ld.sh	r0,r0[0x0]
800051b6:	41 88       	lddsp	r8,sp[0x60]

800051b8 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
800051b8:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
800051ba:	4a 28       	lddpc	r8,80005240 <fat_check_device+0x88>
800051bc:	11 89       	ld.ub	r9,r8[0x0]
800051be:	30 08       	mov	r8,0
800051c0:	f0 09 18 00 	cp.b	r9,r8
800051c4:	c3 c1       	brne	8000523c <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
800051c6:	4a 08       	lddpc	r8,80005244 <fat_check_device+0x8c>
800051c8:	11 89       	ld.ub	r9,r8[0x0]
800051ca:	3f f8       	mov	r8,-1
800051cc:	f0 09 18 00 	cp.b	r9,r8
800051d0:	c0 51       	brne	800051da <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
800051d2:	30 19       	mov	r9,1
800051d4:	49 d8       	lddpc	r8,80005248 <fat_check_device+0x90>
800051d6:	b0 89       	st.b	r8[0x0],r9
800051d8:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
800051da:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800051dc:	49 a5       	lddpc	r5,80005244 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051de:	49 c1       	lddpc	r1,8000524c <fat_check_device+0x94>
800051e0:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
800051e2:	49 c0       	lddpc	r0,80005250 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051e4:	49 c4       	lddpc	r4,80005254 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800051e6:	49 d3       	lddpc	r3,80005258 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800051e8:	0b 8c       	ld.ub	r12,r5[0x0]
800051ea:	f0 1f 00 1d 	mcall	8000525c <fat_check_device+0xa4>
800051ee:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
800051f0:	c2 60       	breq	8000523c <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051f2:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
800051f4:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051f6:	0b 88       	ld.ub	r8,r5[0x0]
800051f8:	09 89       	ld.ub	r9,r4[0x0]
800051fa:	f0 09 18 00 	cp.b	r9,r8
800051fe:	c0 51       	brne	80005208 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80005200:	49 89       	lddpc	r9,80005260 <fat_check_device+0xa8>
80005202:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80005204:	49 89       	lddpc	r9,80005264 <fat_check_device+0xac>
80005206:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80005208:	07 89       	ld.ub	r9,r3[0x0]
8000520a:	f0 09 18 00 	cp.b	r9,r8
8000520e:	c0 31       	brne	80005214 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80005210:	f0 1f 00 16 	mcall	80005268 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80005214:	f0 1f 00 16 	mcall	8000526c <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80005218:	30 18       	mov	r8,1
8000521a:	48 c9       	lddpc	r9,80005248 <fat_check_device+0x90>
8000521c:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
8000521e:	58 37       	cp.w	r7,3
80005220:	c0 81       	brne	80005230 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80005222:	10 02       	add	r2,r8
80005224:	5c 52       	castu.b	r2
80005226:	36 48       	mov	r8,100
80005228:	f0 02 18 00 	cp.b	r2,r8
8000522c:	cd e1       	brne	800051e8 <fat_check_device+0x30>
8000522e:	c0 88       	rjmp	8000523e <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80005230:	58 27       	cp.w	r7,2
80005232:	c0 61       	brne	8000523e <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80005234:	31 89       	mov	r9,24
80005236:	48 58       	lddpc	r8,80005248 <fat_check_device+0x90>
80005238:	b0 89       	st.b	r8[0x0],r9
8000523a:	d8 3a       	popm	r0-r7,pc,r12=0
8000523c:	da 3a       	popm	r0-r7,pc,r12=1
8000523e:	d8 3a       	popm	r0-r7,pc,r12=0
80005240:	00 00       	add	r0,r0
80005242:	17 82       	ld.ub	r2,r11[0x0]
80005244:	00 00       	add	r0,r0
80005246:	19 b0       	ld.ub	r0,r12[0x3]
80005248:	00 00       	add	r0,r0
8000524a:	1a 00       	add	r0,sp
8000524c:	00 00       	add	r0,r0
8000524e:	19 fc       	ld.ub	r12,r12[0x7]
80005250:	00 00       	add	r0,r0
80005252:	17 70       	ld.ub	r0,--r11
80005254:	00 00       	add	r0,r0
80005256:	1a 04       	add	r4,sp
80005258:	00 00       	add	r0,r0
8000525a:	1a 38       	cp.w	r8,sp
8000525c:	80 00       	ld.sh	r0,r0[0x0]
8000525e:	72 b4       	ld.w	r4,r9[0x2c]
80005260:	00 00       	add	r0,r0
80005262:	19 f8       	ld.ub	r8,r12[0x7]
80005264:	00 00       	add	r0,r0
80005266:	19 e8       	ld.ub	r8,r12[0x6]
80005268:	80 00       	ld.sh	r0,r0[0x0]
8000526a:	46 d8       	lddsp	r8,sp[0x1b4]
8000526c:	80 00       	ld.sh	r0,r0[0x0]
8000526e:	40 b8       	lddsp	r8,sp[0x2c]

80005270 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80005270:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005272:	f0 1f 00 0b 	mcall	8000529c <fat_check_noopen+0x2c>
80005276:	c1 10       	breq	80005298 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005278:	48 a8       	lddpc	r8,800052a0 <fat_check_noopen+0x30>
8000527a:	11 89       	ld.ub	r9,r8[0x0]
8000527c:	30 08       	mov	r8,0
8000527e:	f0 09 18 00 	cp.b	r9,r8
80005282:	c0 b0       	breq	80005298 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005284:	48 88       	lddpc	r8,800052a4 <fat_check_noopen+0x34>
80005286:	11 89       	ld.ub	r9,r8[0x0]
80005288:	30 08       	mov	r8,0
8000528a:	f0 09 18 00 	cp.b	r9,r8
8000528e:	c0 50       	breq	80005298 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005290:	30 59       	mov	r9,5
80005292:	48 68       	lddpc	r8,800052a8 <fat_check_noopen+0x38>
80005294:	b0 89       	st.b	r8[0x0],r9
80005296:	d8 0a       	popm	pc,r12=0
      return false;
80005298:	da 0a       	popm	pc,r12=1
8000529a:	00 00       	add	r0,r0
8000529c:	80 00       	ld.sh	r0,r0[0x0]
8000529e:	51 b8       	stdsp	sp[0x6c],r8
800052a0:	00 00       	add	r0,r0
800052a2:	19 fc       	ld.ub	r12,r12[0x7]
800052a4:	00 00       	add	r0,r0
800052a6:	17 70       	ld.ub	r0,--r11
800052a8:	00 00       	add	r0,r0
800052aa:	1a 00       	add	r0,sp

800052ac <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
800052ac:	d4 01       	pushm	lr
   if( !fat_check_device() )
800052ae:	f0 1f 00 0a 	mcall	800052d4 <fat_check_mount+0x28>
800052b2:	c0 f0       	breq	800052d0 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800052b4:	48 98       	lddpc	r8,800052d8 <fat_check_mount+0x2c>
800052b6:	11 89       	ld.ub	r9,r8[0x0]
800052b8:	30 08       	mov	r8,0
800052ba:	f0 09 18 00 	cp.b	r9,r8
800052be:	c0 81       	brne	800052ce <fat_check_mount+0x22>
   {
      if( !fat_mount() )
800052c0:	f0 1f 00 07 	mcall	800052dc <fat_check_mount+0x30>
800052c4:	c0 51       	brne	800052ce <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
800052c6:	30 e9       	mov	r9,14
800052c8:	48 68       	lddpc	r8,800052e0 <fat_check_mount+0x34>
800052ca:	b0 89       	st.b	r8[0x0],r9
         return false;
800052cc:	d8 02       	popm	pc
800052ce:	30 1c       	mov	r12,1
      }
   }
   return true;
}
800052d0:	d8 02       	popm	pc
800052d2:	00 00       	add	r0,r0
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	51 b8       	stdsp	sp[0x6c],r8
800052d8:	00 00       	add	r0,r0
800052da:	19 fc       	ld.ub	r12,r12[0x7]
800052dc:	80 00       	ld.sh	r0,r0[0x0]
800052de:	5d 84       	*unknown*
800052e0:	00 00       	add	r0,r0
800052e2:	1a 00       	add	r0,sp

800052e4 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
800052e4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052e6:	f0 1f 00 04 	mcall	800052f4 <fat_check_mount_select+0x10>
800052ea:	c0 30       	breq	800052f0 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
800052ec:	f0 1f 00 03 	mcall	800052f8 <fat_check_mount_select+0x14>
}
800052f0:	d8 02       	popm	pc
800052f2:	00 00       	add	r0,r0
800052f4:	80 00       	ld.sh	r0,r0[0x0]
800052f6:	52 ac       	stdsp	sp[0xa8],r12
800052f8:	80 00       	ld.sh	r0,r0[0x0]
800052fa:	40 1c       	lddsp	r12,sp[0x4]

800052fc <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
800052fc:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052fe:	f0 1f 00 06 	mcall	80005314 <fat_check_mount_select_open+0x18>
80005302:	c0 70       	breq	80005310 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80005304:	f0 1f 00 05 	mcall	80005318 <fat_check_mount_select_open+0x1c>
80005308:	c0 40       	breq	80005310 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
8000530a:	f0 1f 00 05 	mcall	8000531c <fat_check_mount_select_open+0x20>
8000530e:	d8 02       	popm	pc
80005310:	d8 0a       	popm	pc,r12=0
80005312:	00 00       	add	r0,r0
80005314:	80 00       	ld.sh	r0,r0[0x0]
80005316:	52 ac       	stdsp	sp[0xa8],r12
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	40 1c       	lddsp	r12,sp[0x4]
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	3f fc       	mov	r12,-1

80005320 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80005320:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005322:	f0 1f 00 06 	mcall	80005338 <fat_check_mount_select_noopen+0x18>
80005326:	c0 70       	breq	80005334 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80005328:	f0 1f 00 05 	mcall	8000533c <fat_check_mount_select_noopen+0x1c>
8000532c:	c0 40       	breq	80005334 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
8000532e:	f0 1f 00 05 	mcall	80005340 <fat_check_mount_select_noopen+0x20>
80005332:	d8 02       	popm	pc
80005334:	d8 0a       	popm	pc,r12=0
80005336:	00 00       	add	r0,r0
80005338:	80 00       	ld.sh	r0,r0[0x0]
8000533a:	52 ac       	stdsp	sp[0xa8],r12
8000533c:	80 00       	ld.sh	r0,r0[0x0]
8000533e:	40 1c       	lddsp	r12,sp[0x4]
80005340:	80 00       	ld.sh	r0,r0[0x0]
80005342:	52 70       	stdsp	sp[0x9c],r0

80005344 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80005344:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005346:	f0 1f 00 04 	mcall	80005354 <fat_check_mount_noopen+0x10>
8000534a:	c0 30       	breq	80005350 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
8000534c:	f0 1f 00 03 	mcall	80005358 <fat_check_mount_noopen+0x14>
}
80005350:	d8 02       	popm	pc
80005352:	00 00       	add	r0,r0
80005354:	80 00       	ld.sh	r0,r0[0x0]
80005356:	52 ac       	stdsp	sp[0xa8],r12
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	52 70       	stdsp	sp[0x9c],r0

8000535c <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000535c:	f8 c9 00 21 	sub	r9,r12,33
80005360:	35 d8       	mov	r8,93
80005362:	f0 09 18 00 	cp.b	r9,r8
80005366:	e0 8b 00 1d 	brhi	800053a0 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000536a:	f8 c9 00 61 	sub	r9,r12,97
8000536e:	31 98       	mov	r8,25
80005370:	f0 09 18 00 	cp.b	r9,r8
80005374:	e0 88 00 07 	brls	80005382 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005378:	32 b8       	mov	r8,43
8000537a:	f0 0c 18 00 	cp.b	r12,r8
8000537e:	c0 51       	brne	80005388 <fat_translate_char_shortname+0x2c>
80005380:	c1 08       	rjmp	800053a0 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80005382:	22 0c       	sub	r12,32
80005384:	5c 5c       	castu.b	r12
80005386:	5e fc       	retal	r12
80005388:	48 7a       	lddpc	r10,800053a4 <fat_translate_char_shortname+0x48>
8000538a:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
8000538e:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005390:	11 89       	ld.ub	r9,r8[0x0]
80005392:	f8 09 18 00 	cp.b	r9,r12
80005396:	c0 50       	breq	800053a0 <fat_translate_char_shortname+0x44>
80005398:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000539a:	14 38       	cp.w	r8,r10
8000539c:	cf a1       	brne	80005390 <fat_translate_char_shortname+0x34>
8000539e:	5e fc       	retal	r12
800053a0:	5e fd       	retal	0
800053a2:	00 00       	add	r0,r0
800053a4:	80 01       	ld.sh	r1,r0[0x0]
800053a6:	26 cc       	sub	r12,108

800053a8 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
800053a8:	3f f9       	mov	r9,-1
800053aa:	48 48       	lddpc	r8,800053b8 <fat_clear_info_fat_mod+0x10>
800053ac:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
800053ae:	30 09       	mov	r9,0
800053b0:	48 38       	lddpc	r8,800053bc <fat_clear_info_fat_mod+0x14>
800053b2:	91 09       	st.w	r8[0x0],r9
}
800053b4:	5e fc       	retal	r12
800053b6:	00 00       	add	r0,r0
800053b8:	00 00       	add	r0,r0
800053ba:	19 e4       	ld.ub	r4,r12[0x6]
800053bc:	00 00       	add	r0,r0
800053be:	17 ac       	ld.ub	r12,r11[0x2]

800053c0 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
800053c0:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
800053c2:	30 0b       	mov	r11,0
800053c4:	49 58       	lddpc	r8,80005418 <fat_clear_cluster+0x58>
800053c6:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
800053c8:	30 2c       	mov	r12,2
800053ca:	f0 1f 00 15 	mcall	8000541c <fat_clear_cluster+0x5c>
800053ce:	c2 30       	breq	80005414 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800053d0:	49 48       	lddpc	r8,80005420 <fat_clear_cluster+0x60>
800053d2:	11 98       	ld.ub	r8,r8[0x1]
800053d4:	49 19       	lddpc	r9,80005418 <fat_clear_cluster+0x58>
800053d6:	72 0a       	ld.w	r10,r9[0x0]
800053d8:	20 1a       	sub	r10,1
800053da:	10 0a       	add	r10,r8
800053dc:	49 29       	lddpc	r9,80005424 <fat_clear_cluster+0x64>
800053de:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
800053e0:	58 08       	cp.w	r8,0
800053e2:	c1 a0       	breq	80005416 <fat_clear_cluster+0x56>
800053e4:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053e6:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
800053e8:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800053ea:	48 e5       	lddpc	r5,80005420 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053ec:	08 9c       	mov	r12,r4
800053ee:	f0 1f 00 0f 	mcall	80005428 <fat_clear_cluster+0x68>
800053f2:	c1 10       	breq	80005414 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800053f4:	58 07       	cp.w	r7,0
800053f6:	c0 31       	brne	800053fc <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800053f8:	f0 1f 00 0d 	mcall	8000542c <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800053fc:	f0 1f 00 0d 	mcall	80005430 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
80005400:	6c 08       	ld.w	r8,r6[0x0]
80005402:	20 18       	sub	r8,1
80005404:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80005406:	2f f7       	sub	r7,-1
80005408:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000540a:	0b 98       	ld.ub	r8,r5[0x1]
8000540c:	ee 08 18 00 	cp.b	r8,r7
80005410:	ce e1       	brne	800053ec <fat_clear_cluster+0x2c>
80005412:	c0 28       	rjmp	80005416 <fat_clear_cluster+0x56>
80005414:	d8 2a       	popm	r4-r7,pc,r12=0
80005416:	da 2a       	popm	r4-r7,pc,r12=1
80005418:	00 00       	add	r0,r0
8000541a:	1a 58       	eor	r8,sp
8000541c:	80 00       	ld.sh	r0,r0[0x0]
8000541e:	4c 78       	lddpc	r8,80005538 <fat_initialize_dir+0x90>
80005420:	00 00       	add	r0,r0
80005422:	19 b0       	ld.ub	r0,r12[0x3]
80005424:	00 00       	add	r0,r0
80005426:	17 6c       	ld.uh	r12,--r11
80005428:	80 00       	ld.sh	r0,r0[0x0]
8000542a:	49 20       	lddpc	r0,80005470 <fat_update_fat2+0x3c>
8000542c:	80 00       	ld.sh	r0,r0[0x0]
8000542e:	49 08       	lddpc	r8,8000546c <fat_update_fat2+0x38>
80005430:	80 00       	ld.sh	r0,r0[0x0]
80005432:	46 f0       	lddsp	r0,sp[0x1bc]

80005434 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80005434:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005438:	49 68       	lddpc	r8,80005490 <fat_update_fat2+0x5c>
8000543a:	70 08       	ld.w	r8,r8[0x0]
8000543c:	49 69       	lddpc	r9,80005494 <fat_update_fat2+0x60>
8000543e:	72 09       	ld.w	r9,r9[0x0]
80005440:	12 38       	cp.w	r8,r9
80005442:	e0 8b 00 25 	brhi	8000548c <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005446:	49 55       	lddpc	r5,80005498 <fat_update_fat2+0x64>
80005448:	49 57       	lddpc	r7,8000549c <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000544a:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000544c:	49 16       	lddpc	r6,80005490 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000544e:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005450:	49 14       	lddpc	r4,80005494 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005452:	6e 49       	ld.w	r9,r7[0x10]
80005454:	12 08       	add	r8,r9
80005456:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80005458:	06 9c       	mov	r12,r3
8000545a:	f0 1f 00 12 	mcall	800054a0 <fat_update_fat2+0x6c>
8000545e:	c1 50       	breq	80005488 <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005460:	6e 19       	ld.w	r9,r7[0x4]
80005462:	6e 48       	ld.w	r8,r7[0x10]
80005464:	f2 08 00 08 	add	r8,r9,r8
80005468:	6c 09       	ld.w	r9,r6[0x0]
8000546a:	12 08       	add	r8,r9
8000546c:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000546e:	04 9c       	mov	r12,r2
80005470:	f0 1f 00 0c 	mcall	800054a0 <fat_update_fat2+0x6c>
80005474:	c0 a0       	breq	80005488 <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80005476:	f0 1f 00 0c 	mcall	800054a4 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000547a:	6c 08       	ld.w	r8,r6[0x0]
8000547c:	2f f8       	sub	r8,-1
8000547e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005480:	68 09       	ld.w	r9,r4[0x0]
80005482:	10 39       	cp.w	r9,r8
80005484:	ce 72       	brcc	80005452 <fat_update_fat2+0x1e>
80005486:	c0 38       	rjmp	8000548c <fat_update_fat2+0x58>
80005488:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000548c:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005490:	00 00       	add	r0,r0
80005492:	19 e4       	ld.ub	r4,r12[0x6]
80005494:	00 00       	add	r0,r0
80005496:	17 ac       	ld.ub	r12,r11[0x2]
80005498:	00 00       	add	r0,r0
8000549a:	17 6c       	ld.uh	r12,--r11
8000549c:	00 00       	add	r0,r0
8000549e:	19 b0       	ld.ub	r0,r12[0x3]
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	49 20       	lddpc	r0,800054e8 <fat_initialize_dir+0x40>
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	46 f0       	lddsp	r0,sp[0x1bc]

800054a8 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
800054a8:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
800054aa:	f0 1f 00 21 	mcall	8000552c <fat_initialize_dir+0x84>
800054ae:	c3 e0       	breq	8000552a <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
800054b0:	f0 1f 00 20 	mcall	80005530 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
800054b4:	4a 0b       	lddpc	r11,80005534 <fat_initialize_dir+0x8c>
800054b6:	16 98       	mov	r8,r11
800054b8:	32 e9       	mov	r9,46
800054ba:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054bc:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
800054c0:	32 09       	mov	r9,32
800054c2:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
800054c4:	14 38       	cp.w	r8,r10
800054c6:	cf e1       	brne	800054c2 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
800054c8:	49 b8       	lddpc	r8,80005534 <fat_initialize_dir+0x8c>
800054ca:	31 09       	mov	r9,16
800054cc:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
800054d0:	49 a9       	lddpc	r9,80005538 <fat_initialize_dir+0x90>
800054d2:	2f c9       	sub	r9,-4
800054d4:	13 ba       	ld.ub	r10,r9[0x3]
800054d6:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
800054da:	13 aa       	ld.ub	r10,r9[0x2]
800054dc:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
800054e0:	13 9a       	ld.ub	r10,r9[0x1]
800054e2:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
800054e6:	13 89       	ld.ub	r9,r9[0x0]
800054e8:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
800054ec:	32 e9       	mov	r9,46
800054ee:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
800054f2:	f1 69 00 21 	st.b	r8[33],r9
800054f6:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054f8:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800054fc:	32 09       	mov	r9,32
800054fe:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80005500:	14 38       	cp.w	r8,r10
80005502:	cf e1       	brne	800054fe <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80005504:	48 c8       	lddpc	r8,80005534 <fat_initialize_dir+0x8c>
80005506:	31 09       	mov	r9,16
80005508:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
8000550c:	48 c9       	lddpc	r9,8000553c <fat_initialize_dir+0x94>
8000550e:	2e 09       	sub	r9,-32
80005510:	13 ba       	ld.ub	r10,r9[0x3]
80005512:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80005516:	13 aa       	ld.ub	r10,r9[0x2]
80005518:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000551c:	13 9a       	ld.ub	r10,r9[0x1]
8000551e:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80005522:	13 89       	ld.ub	r9,r9[0x0]
80005524:	f1 69 00 35 	st.b	r8[53],r9
80005528:	30 1c       	mov	r12,1

   return true;
}
8000552a:	d8 02       	popm	pc
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	53 c0       	stdsp	sp[0xf0],r0
80005530:	80 00       	ld.sh	r0,r0[0x0]
80005532:	46 f0       	lddsp	r0,sp[0x1bc]
80005534:	00 00       	add	r0,r0
80005536:	17 b0       	ld.ub	r0,r11[0x3]
80005538:	00 00       	add	r0,r0
8000553a:	17 70       	ld.ub	r0,--r11
8000553c:	00 00       	add	r0,r0
8000553e:	19 b0       	ld.ub	r0,r12[0x3]

80005540 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
80005540:	d4 31       	pushm	r0-r7,lr
80005542:	20 5d       	sub	sp,20
80005544:	18 97       	mov	r7,r12
80005546:	50 3b       	stdsp	sp[0xc],r11
80005548:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
8000554a:	f0 1f 00 30 	mcall	80005608 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
8000554e:	f0 1f 00 30 	mcall	8000560c <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80005552:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80005554:	30 01       	mov	r1,0
80005556:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80005558:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000555a:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
8000555c:	30 c6       	mov	r6,12
8000555e:	31 ab       	mov	r11,26
80005560:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005562:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80005564:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005566:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80005568:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000556a:	f2 08 18 00 	cp.b	r8,r9
8000556e:	c0 31       	brne	80005574 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80005570:	b8 83       	st.b	r12[0x0],r3
         continue;
80005572:	c4 58       	rjmp	800055fc <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80005574:	ec 08 18 00 	cp.b	r8,r6
80005578:	5f 00       	sreq	r0
8000557a:	f6 08 18 00 	cp.b	r8,r11
8000557e:	5f 04       	sreq	r4
80005580:	08 40       	or	r0,r4
80005582:	00 94       	mov	r4,r0
80005584:	f4 00 18 00 	cp.b	r0,r10
80005588:	c3 21       	brne	800055ec <fat_create_long_name_entry+0xac>
8000558a:	ea 08 18 00 	cp.b	r8,r5
8000558e:	c3 70       	breq	800055fc <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005590:	e4 08 18 00 	cp.b	r8,r2
80005594:	c0 41       	brne	8000559c <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
80005596:	40 34       	lddsp	r4,sp[0xc]
80005598:	b8 84       	st.b	r12[0x0],r4
         continue;
8000559a:	c3 18       	rjmp	800055fc <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
8000559c:	40 01       	lddsp	r1,sp[0x0]
8000559e:	58 01       	cp.w	r1,0
800055a0:	c2 41       	brne	800055e8 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
800055a2:	0f 84       	ld.ub	r4,r7[0x0]
800055a4:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
800055a8:	35 c1       	mov	r1,92
800055aa:	e2 04 19 00 	cp.h	r4,r1
800055ae:	5f 00       	sreq	r0
800055b0:	50 20       	stdsp	sp[0x8],r0
800055b2:	32 f0       	mov	r0,47
800055b4:	e0 04 19 00 	cp.h	r4,r0
800055b8:	5f 01       	sreq	r1
800055ba:	40 20       	lddsp	r0,sp[0x8]
800055bc:	02 40       	or	r0,r1
800055be:	f4 00 18 00 	cp.b	r0,r10
800055c2:	c0 50       	breq	800055cc <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
800055c4:	30 04       	mov	r4,0
800055c6:	fb 54 00 12 	st.h	sp[18],r4
800055ca:	c0 38       	rjmp	800055d0 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
800055cc:	58 04       	cp.w	r4,0
800055ce:	c0 31       	brne	800055d4 <fat_create_long_name_entry+0x94>
800055d0:	30 14       	mov	r4,1
800055d2:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800055d4:	fa c4 ff ee 	sub	r4,sp,-18
800055d8:	09 90       	ld.ub	r0,r4[0x1]
800055da:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
800055dc:	09 84       	ld.ub	r4,r4[0x0]
800055de:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
800055e0:	2f f8       	sub	r8,-1
800055e2:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
800055e4:	2f f7       	sub	r7,-1
800055e6:	c0 38       	rjmp	800055ec <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800055e8:	3f f1       	mov	r1,-1
800055ea:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800055ec:	2f f8       	sub	r8,-1
800055ee:	5c 58       	castu.b	r8
800055f0:	fc 08 18 00 	cp.b	r8,lr
800055f4:	e0 8b 00 08 	brhi	80005604 <fat_create_long_name_entry+0xc4>
800055f8:	2f fc       	sub	r12,-1
800055fa:	cb 8b       	rjmp	8000556a <fat_create_long_name_entry+0x2a>
800055fc:	2f f8       	sub	r8,-1
800055fe:	5c 58       	castu.b	r8
80005600:	2f fc       	sub	r12,-1
80005602:	cb 4b       	rjmp	8000556a <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
80005604:	2f bd       	sub	sp,-20
80005606:	d8 32       	popm	r0-r7,pc
80005608:	80 00       	ld.sh	r0,r0[0x0]
8000560a:	46 f0       	lddsp	r0,sp[0x1bc]
8000560c:	80 00       	ld.sh	r0,r0[0x0]
8000560e:	43 80       	lddsp	r0,sp[0xe0]

80005610 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
80005610:	d4 31       	pushm	r0-r7,lr
80005612:	18 90       	mov	r0,r12
80005614:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80005616:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80005618:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000561a:	49 56       	lddpc	r6,8000566c <fat_delete_file+0x5c>
8000561c:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000561e:	f0 1f 00 15 	mcall	80005670 <fat_delete_file+0x60>
80005622:	c2 40       	breq	8000566a <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80005624:	f0 1f 00 14 	mcall	80005674 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
80005628:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000562a:	f8 c7 ff f5 	sub	r7,r12,-11
8000562e:	0f 88       	ld.ub	r8,r7[0x0]
80005630:	ea 08 18 00 	cp.b	r8,r5
80005634:	c0 30       	breq	8000563a <fat_delete_file+0x2a>
80005636:	58 04       	cp.w	r4,0
80005638:	c1 01       	brne	80005658 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
8000563a:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
8000563c:	f0 1f 00 0f 	mcall	80005678 <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
80005640:	0f 88       	ld.ub	r8,r7[0x0]
80005642:	ea 08 18 00 	cp.b	r8,r5
80005646:	c0 41       	brne	8000564e <fat_delete_file+0x3e>
80005648:	e2 12 00 40 	andl	r2,0x40,COH
8000564c:	c0 61       	brne	80005658 <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000564e:	8c 18       	ld.sh	r8,r6[0x2]
80005650:	20 18       	sub	r8,1
80005652:	ac 18       	st.h	r6[0x2],r8
80005654:	02 94       	mov	r4,r1
   }  // end of while(1)
80005656:	ce 4b       	rjmp	8000561e <fat_delete_file+0xe>

   if( b_cluster_list )
80005658:	58 00       	cp.w	r0,0
8000565a:	c0 21       	brne	8000565e <fat_delete_file+0x4e>
8000565c:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000565e:	30 09       	mov	r9,0
80005660:	48 78       	lddpc	r8,8000567c <fat_delete_file+0x6c>
80005662:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80005664:	30 3c       	mov	r12,3
80005666:	f0 1f 00 07 	mcall	80005680 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
8000566a:	d8 32       	popm	r0-r7,pc
8000566c:	00 00       	add	r0,r0
8000566e:	19 fc       	ld.ub	r12,r12[0x7]
80005670:	80 00       	ld.sh	r0,r0[0x0]
80005672:	4f 50       	lddpc	r0,80005844 <fat_allocfreespace+0x58>
80005674:	80 00       	ld.sh	r0,r0[0x0]
80005676:	43 80       	lddsp	r0,sp[0xe0]
80005678:	80 00       	ld.sh	r0,r0[0x0]
8000567a:	46 f0       	lddsp	r0,sp[0x1bc]
8000567c:	00 00       	add	r0,r0
8000567e:	17 70       	ld.ub	r0,--r11
80005680:	80 00       	ld.sh	r0,r0[0x0]
80005682:	4f d4       	lddpc	r4,80005874 <fat_allocfreespace+0x88>

80005684 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80005684:	eb cd 40 fc 	pushm	r2-r7,lr
80005688:	20 8d       	sub	sp,32
8000568a:	30 06       	mov	r6,0
8000568c:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000568e:	4a 95       	lddpc	r5,80005730 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80005690:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80005692:	1a 93       	mov	r3,sp
80005694:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80005696:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005698:	f0 1f 00 27 	mcall	80005734 <fat_garbage_collector_entry+0xb0>
8000569c:	c0 81       	brne	800056ac <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000569e:	4a 78       	lddpc	r8,80005738 <fat_garbage_collector_entry+0xb4>
800056a0:	11 89       	ld.ub	r9,r8[0x0]
800056a2:	31 a8       	mov	r8,26
800056a4:	f0 09 18 00 	cp.b	r9,r8
800056a8:	c3 d1       	brne	80005722 <fat_garbage_collector_entry+0x9e>
800056aa:	c0 68       	rjmp	800056b6 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
800056ac:	f0 1f 00 24 	mcall	8000573c <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
800056b0:	19 88       	ld.ub	r8,r12[0x0]
800056b2:	58 08       	cp.w	r8,0
800056b4:	c1 b1       	brne	800056ea <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800056b6:	49 f8       	lddpc	r8,80005730 <fat_garbage_collector_entry+0xac>
800056b8:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800056ba:	ec 07 19 00 	cp.h	r7,r6
800056be:	c3 40       	breq	80005726 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800056c0:	32 05       	mov	r5,32
800056c2:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800056c4:	49 b6       	lddpc	r6,80005730 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800056c6:	f0 1f 00 1c 	mcall	80005734 <fat_garbage_collector_entry+0xb0>
800056ca:	c2 c0       	breq	80005722 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800056cc:	f0 1f 00 1c 	mcall	8000573c <fat_garbage_collector_entry+0xb8>
800056d0:	0a 9a       	mov	r10,r5
800056d2:	08 9b       	mov	r11,r4
800056d4:	f0 1f 00 1b 	mcall	80005740 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
800056d8:	f0 1f 00 1b 	mcall	80005744 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800056dc:	8c 18       	ld.sh	r8,r6[0x2]
800056de:	2f f8       	sub	r8,-1
800056e0:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800056e2:	f0 07 19 00 	cp.h	r7,r8
800056e6:	cf 01       	brne	800056c6 <fat_garbage_collector_entry+0x42>
800056e8:	c1 f8       	rjmp	80005726 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
800056ea:	e8 08 18 00 	cp.b	r8,r4
800056ee:	c1 70       	breq	8000571c <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800056f0:	ec 07 19 00 	cp.h	r7,r6
800056f4:	c1 20       	breq	80005718 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800056f6:	04 9a       	mov	r10,r2
800056f8:	18 9b       	mov	r11,r12
800056fa:	1a 9c       	mov	r12,sp
800056fc:	f0 1f 00 13 	mcall	80005748 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80005700:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80005702:	f0 1f 00 0d 	mcall	80005734 <fat_garbage_collector_entry+0xb0>
80005706:	c0 e0       	breq	80005722 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80005708:	f0 1f 00 0d 	mcall	8000573c <fat_garbage_collector_entry+0xb8>
8000570c:	04 9a       	mov	r10,r2
8000570e:	1a 9b       	mov	r11,sp
80005710:	f0 1f 00 0e 	mcall	80005748 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
80005714:	f0 1f 00 0c 	mcall	80005744 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
80005718:	2f f6       	sub	r6,-1
8000571a:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
8000571c:	2f f7       	sub	r7,-1
8000571e:	5c 87       	casts.h	r7
   }  // end of while(1)
80005720:	cb bb       	rjmp	80005696 <fat_garbage_collector_entry+0x12>
80005722:	30 0c       	mov	r12,0
80005724:	c0 28       	rjmp	80005728 <fat_garbage_collector_entry+0xa4>
80005726:	30 1c       	mov	r12,1
}
80005728:	2f 8d       	sub	sp,-32
8000572a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000572e:	00 00       	add	r0,r0
80005730:	00 00       	add	r0,r0
80005732:	19 fc       	ld.ub	r12,r12[0x7]
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	4f 50       	lddpc	r0,80005908 <fat_allocfreespace+0x11c>
80005738:	00 00       	add	r0,r0
8000573a:	1a 00       	add	r0,sp
8000573c:	80 00       	ld.sh	r0,r0[0x0]
8000573e:	43 80       	lddsp	r0,sp[0xe0]
80005740:	80 00       	ld.sh	r0,r0[0x0]
80005742:	c8 fa       	rjmp	80005460 <fat_update_fat2+0x2c>
80005744:	80 00       	ld.sh	r0,r0[0x0]
80005746:	46 f0       	lddsp	r0,sp[0x1bc]
80005748:	80 00       	ld.sh	r0,r0[0x0]
8000574a:	c7 b2       	brcc	80005840 <fat_allocfreespace+0x54>

8000574c <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000574c:	eb cd 40 c0 	pushm	r6-r7,lr
80005750:	20 1d       	sub	sp,4
80005752:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005754:	49 c8       	lddpc	r8,800057c4 <fat_write_fat32_FSInfo+0x78>
80005756:	90 c9       	ld.uh	r9,r8[0x8]
80005758:	70 4a       	ld.w	r10,r8[0x10]
8000575a:	49 c8       	lddpc	r8,800057c8 <fat_write_fat32_FSInfo+0x7c>
8000575c:	12 1a       	sub	r10,r9
8000575e:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80005760:	30 0c       	mov	r12,0
80005762:	f0 1f 00 1b 	mcall	800057cc <fat_write_fat32_FSInfo+0x80>
80005766:	c2 c0       	breq	800057be <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80005768:	f0 1f 00 1a 	mcall	800057d0 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
8000576c:	f0 1f 00 1a 	mcall	800057d4 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80005770:	49 a7       	lddpc	r7,800057d8 <fat_write_fat32_FSInfo+0x8c>
80005772:	30 46       	mov	r6,4
80005774:	0c 9a       	mov	r10,r6
80005776:	49 ab       	lddpc	r11,800057dc <fat_write_fat32_FSInfo+0x90>
80005778:	0e 9c       	mov	r12,r7
8000577a:	f0 1f 00 1a 	mcall	800057e0 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000577e:	0c 9a       	mov	r10,r6
80005780:	49 9b       	lddpc	r11,800057e4 <fat_write_fat32_FSInfo+0x98>
80005782:	ee cc fe 1c 	sub	r12,r7,-484
80005786:	f0 1f 00 17 	mcall	800057e0 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000578a:	1b b9       	ld.ub	r9,sp[0x3]
8000578c:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80005790:	1b a9       	ld.ub	r9,sp[0x2]
80005792:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80005796:	1b 99       	ld.ub	r9,sp[0x1]
80005798:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000579c:	1b 88       	ld.ub	r8,sp[0x0]
8000579e:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
800057a2:	0c 9a       	mov	r10,r6
800057a4:	e0 6b 00 ff 	mov	r11,255
800057a8:	ee cc fe 14 	sub	r12,r7,-492
800057ac:	f0 1f 00 0f 	mcall	800057e8 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
800057b0:	35 58       	mov	r8,85
800057b2:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
800057b6:	3a a8       	mov	r8,-86
800057b8:	ef 68 01 ff 	st.b	r7[511],r8
800057bc:	30 1c       	mov	r12,1
   return true;
}
800057be:	2f fd       	sub	sp,-4
800057c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800057c4:	00 00       	add	r0,r0
800057c6:	19 b0       	ld.ub	r0,r12[0x3]
800057c8:	00 00       	add	r0,r0
800057ca:	17 6c       	ld.uh	r12,--r11
800057cc:	80 00       	ld.sh	r0,r0[0x0]
800057ce:	49 20       	lddpc	r0,80005814 <fat_allocfreespace+0x28>
800057d0:	80 00       	ld.sh	r0,r0[0x0]
800057d2:	46 f0       	lddsp	r0,sp[0x1bc]
800057d4:	80 00       	ld.sh	r0,r0[0x0]
800057d6:	49 08       	lddpc	r8,80005814 <fat_allocfreespace+0x28>
800057d8:	00 00       	add	r0,r0
800057da:	17 b0       	ld.ub	r0,r11[0x3]
800057dc:	80 01       	ld.sh	r1,r0[0x0]
800057de:	26 c0       	sub	r0,108
800057e0:	80 00       	ld.sh	r0,r0[0x0]
800057e2:	c7 b2       	brcc	800058d8 <fat_allocfreespace+0xec>
800057e4:	80 01       	ld.sh	r1,r0[0x0]
800057e6:	26 d4       	sub	r4,109
800057e8:	80 00       	ld.sh	r0,r0[0x0]
800057ea:	c8 fa       	rjmp	80005508 <fat_initialize_dir+0x60>

800057ec <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800057ec:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800057ee:	4c 78       	lddpc	r8,80005908 <fat_allocfreespace+0x11c>
800057f0:	11 89       	ld.ub	r9,r8[0x0]
800057f2:	30 38       	mov	r8,3
800057f4:	f0 09 18 00 	cp.b	r9,r8
800057f8:	c0 61       	brne	80005804 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800057fa:	3f fc       	mov	r12,-1
800057fc:	f0 1f 00 44 	mcall	8000590c <fat_allocfreespace+0x120>
80005800:	e0 80 00 83 	breq	80005906 <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80005804:	4c 31       	lddpc	r1,80005910 <fat_allocfreespace+0x124>
80005806:	03 89       	ld.ub	r9,r1[0x0]
80005808:	3f f8       	mov	r8,-1
8000580a:	f0 09 18 00 	cp.b	r9,r8
8000580e:	c0 61       	brne	8000581a <fat_allocfreespace+0x2e>
80005810:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80005812:	30 29       	mov	r9,2
80005814:	4c 08       	lddpc	r8,80005914 <fat_allocfreespace+0x128>
80005816:	91 09       	st.w	r8[0x0],r9
80005818:	c0 78       	rjmp	80005826 <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000581a:	4b e8       	lddpc	r8,80005910 <fat_allocfreespace+0x124>
8000581c:	70 09       	ld.w	r9,r8[0x0]
8000581e:	2f f9       	sub	r9,-1
80005820:	4b d8       	lddpc	r8,80005914 <fat_allocfreespace+0x128>
80005822:	91 09       	st.w	r8[0x0],r9
80005824:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
80005826:	f0 1f 00 3d 	mcall	80005918 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
8000582a:	4b b8       	lddpc	r8,80005914 <fat_allocfreespace+0x128>
8000582c:	70 09       	ld.w	r9,r8[0x0]
8000582e:	4b c8       	lddpc	r8,8000591c <fat_allocfreespace+0x130>
80005830:	70 38       	ld.w	r8,r8[0xc]
80005832:	10 39       	cp.w	r9,r8
80005834:	c5 e2       	brcc	800058f0 <fat_allocfreespace+0x104>
80005836:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005838:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000583a:	4b 77       	lddpc	r7,80005914 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000583c:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000583e:	4b 55       	lddpc	r5,80005910 <fat_allocfreespace+0x124>
80005840:	4b 76       	lddpc	r6,8000591c <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005842:	04 9c       	mov	r12,r2
80005844:	f0 1f 00 37 	mcall	80005920 <fat_allocfreespace+0x134>
80005848:	c5 f0       	breq	80005906 <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000584a:	6e 18       	ld.w	r8,r7[0x4]
8000584c:	58 08       	cp.w	r8,0
8000584e:	c4 01       	brne	800058ce <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005850:	6e 08       	ld.w	r8,r7[0x0]
80005852:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005854:	58 04       	cp.w	r4,0
80005856:	c0 80       	breq	80005866 <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80005858:	20 18       	sub	r8,1
8000585a:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000585c:	06 9c       	mov	r12,r3
8000585e:	f0 1f 00 31 	mcall	80005920 <fat_allocfreespace+0x134>
80005862:	c1 e1       	brne	8000589e <fat_allocfreespace+0xb2>
80005864:	c5 18       	rjmp	80005906 <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80005866:	03 88       	ld.ub	r8,r1[0x0]
80005868:	3f f9       	mov	r9,-1
8000586a:	f2 08 18 00 	cp.b	r8,r9
8000586e:	c1 60       	breq	8000589a <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005870:	6a 08       	ld.w	r8,r5[0x0]
80005872:	58 08       	cp.w	r8,0
80005874:	c0 e1       	brne	80005890 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80005876:	4a 59       	lddpc	r9,80005908 <fat_allocfreespace+0x11c>
80005878:	13 88       	ld.ub	r8,r9[0x0]
8000587a:	30 39       	mov	r9,3
8000587c:	f2 08 18 00 	cp.b	r8,r9
80005880:	c0 50       	breq	8000588a <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005882:	31 b9       	mov	r9,27
80005884:	4a 88       	lddpc	r8,80005924 <fat_allocfreespace+0x138>
80005886:	b0 89       	st.b	r8[0x0],r9
80005888:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000588a:	6c 68       	ld.w	r8,r6[0x18]
8000588c:	8f 08       	st.w	r7[0x0],r8
8000588e:	c0 28       	rjmp	80005892 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005890:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005892:	06 9c       	mov	r12,r3
80005894:	f0 1f 00 23 	mcall	80005920 <fat_allocfreespace+0x134>
80005898:	c3 70       	breq	80005906 <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000589a:	6e 18       	ld.w	r8,r7[0x4]
8000589c:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000589e:	6e 18       	ld.w	r8,r7[0x4]
800058a0:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
800058a2:	e0 68 ff ff 	mov	r8,65535
800058a6:	ea 18 0f ff 	orh	r8,0xfff
800058aa:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
800058ac:	06 9c       	mov	r12,r3
800058ae:	f0 1f 00 1d 	mcall	80005920 <fat_allocfreespace+0x134>
800058b2:	c2 a0       	breq	80005906 <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
800058b4:	6a 19       	ld.w	r9,r5[0x4]
800058b6:	0d 98       	ld.ub	r8,r6[0x1]
800058b8:	10 39       	cp.w	r9,r8
800058ba:	e0 8b 00 06 	brhi	800058c6 <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
800058be:	30 09       	mov	r9,0
800058c0:	49 48       	lddpc	r8,80005910 <fat_allocfreespace+0x124>
800058c2:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
800058c4:	c1 e8       	rjmp	80005900 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800058c6:	10 19       	sub	r9,r8
800058c8:	8b 19       	st.w	r5[0x4],r9
800058ca:	06 94       	mov	r4,r3
800058cc:	c0 98       	rjmp	800058de <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
800058ce:	58 04       	cp.w	r4,0
800058d0:	c1 81       	brne	80005900 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
800058d2:	58 00       	cp.w	r0,0
800058d4:	c0 50       	breq	800058de <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
800058d6:	6e 08       	ld.w	r8,r7[0x0]
800058d8:	f0 c8 fe 0c 	sub	r8,r8,-500
800058dc:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800058de:	6e 08       	ld.w	r8,r7[0x0]
800058e0:	2f f8       	sub	r8,-1
800058e2:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800058e4:	6c 39       	ld.w	r9,r6[0xc]
800058e6:	10 39       	cp.w	r9,r8
800058e8:	fe 9b ff ad 	brhi	80005842 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800058ec:	58 04       	cp.w	r4,0
800058ee:	c0 91       	brne	80005900 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800058f0:	58 00       	cp.w	r0,0
800058f2:	c0 30       	breq	800058f8 <fat_allocfreespace+0x10c>
800058f4:	30 00       	mov	r0,0
800058f6:	c8 eb       	rjmp	80005812 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800058f8:	31 b9       	mov	r9,27
800058fa:	48 b8       	lddpc	r8,80005924 <fat_allocfreespace+0x138>
800058fc:	b0 89       	st.b	r8[0x0],r9
800058fe:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
80005900:	f0 1f 00 0a 	mcall	80005928 <fat_allocfreespace+0x13c>
80005904:	d8 32       	popm	r0-r7,pc
80005906:	d8 3a       	popm	r0-r7,pc,r12=0
80005908:	00 00       	add	r0,r0
8000590a:	19 fc       	ld.ub	r12,r12[0x7]
8000590c:	80 00       	ld.sh	r0,r0[0x0]
8000590e:	57 4c       	stdsp	sp[0x1d0],r12
80005910:	00 00       	add	r0,r0
80005912:	1a 58       	eor	r8,sp
80005914:	00 00       	add	r0,r0
80005916:	1a 50       	eor	r0,sp
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	53 a8       	stdsp	sp[0xe8],r8
8000591c:	00 00       	add	r0,r0
8000591e:	19 b0       	ld.ub	r0,r12[0x3]
80005920:	80 00       	ld.sh	r0,r0[0x0]
80005922:	4a 34       	lddpc	r4,800059ac <fat_alloc_entry_free+0x80>
80005924:	00 00       	add	r0,r0
80005926:	1a 00       	add	r0,sp
80005928:	80 00       	ld.sh	r0,r0[0x0]
8000592a:	54 34       	stdsp	sp[0x10c],r4

8000592c <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000592c:	d4 31       	pushm	r0-r7,lr
8000592e:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005930:	30 09       	mov	r9,0
80005932:	4a 38       	lddpc	r8,800059bc <fat_alloc_entry_free+0x90>
80005934:	b0 19       	st.h	r8[0x2],r9
80005936:	18 92       	mov	r2,r12
80005938:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000593a:	4a 26       	lddpc	r6,800059c0 <fat_alloc_entry_free+0x94>
8000593c:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000593e:	4a 21       	lddpc	r1,800059c4 <fat_alloc_entry_free+0x98>
80005940:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005942:	10 97       	mov	r7,r8
80005944:	12 90       	mov	r0,r9
80005946:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005948:	f0 1f 00 20 	mcall	800059c8 <fat_alloc_entry_free+0x9c>
8000594c:	c1 61       	brne	80005978 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000594e:	0d 88       	ld.ub	r8,r6[0x0]
80005950:	e6 08 18 00 	cp.b	r8,r3
80005954:	c3 11       	brne	800059b6 <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80005956:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80005958:	f0 1f 00 1d 	mcall	800059cc <fat_alloc_entry_free+0xa0>
8000595c:	c0 a1       	brne	80005970 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000595e:	58 04       	cp.w	r4,0
80005960:	c2 b1       	brne	800059b6 <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80005962:	f0 1f 00 1c 	mcall	800059d0 <fat_alloc_entry_free+0xa4>
80005966:	c2 80       	breq	800059b6 <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005968:	ae 10       	st.h	r7[0x2],r0
8000596a:	40 02       	lddsp	r2,sp[0x0]
8000596c:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
8000596e:	ce db       	rjmp	80005948 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005970:	f0 1f 00 19 	mcall	800059d4 <fat_alloc_entry_free+0xa8>
80005974:	ce a1       	brne	80005948 <fat_alloc_entry_free+0x1c>
80005976:	c2 08       	rjmp	800059b6 <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005978:	f0 1f 00 18 	mcall	800059d8 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
8000597c:	19 88       	ld.ub	r8,r12[0x0]
8000597e:	30 09       	mov	r9,0
80005980:	f2 08 18 00 	cp.b	r8,r9
80005984:	c0 61       	brne	80005990 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
80005986:	20 12       	sub	r2,1
80005988:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000598a:	c0 31       	brne	80005990 <fat_alloc_entry_free+0x64>
8000598c:	30 1c       	mov	r12,1
8000598e:	c1 58       	rjmp	800059b8 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005990:	8e 18       	ld.sh	r8,r7[0x2]
80005992:	2f f8       	sub	r8,-1
80005994:	5c 88       	casts.h	r8
80005996:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005998:	cd 81       	brne	80005948 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000599a:	58 04       	cp.w	r4,0
8000599c:	c0 60       	breq	800059a8 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000599e:	31 b9       	mov	r9,27
800059a0:	48 88       	lddpc	r8,800059c0 <fat_alloc_entry_free+0x94>
800059a2:	b0 89       	st.b	r8[0x0],r9
800059a4:	30 0c       	mov	r12,0
            return false;
800059a6:	c0 98       	rjmp	800059b8 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
800059a8:	f0 1f 00 0a 	mcall	800059d0 <fat_alloc_entry_free+0xa4>
800059ac:	c0 50       	breq	800059b6 <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
800059ae:	ae 10       	st.h	r7[0x2],r0
800059b0:	40 02       	lddsp	r2,sp[0x0]
800059b2:	0a 94       	mov	r4,r5
800059b4:	cc ab       	rjmp	80005948 <fat_alloc_entry_free+0x1c>
800059b6:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
800059b8:	2f fd       	sub	sp,-4
800059ba:	d8 32       	popm	r0-r7,pc
800059bc:	00 00       	add	r0,r0
800059be:	19 fc       	ld.ub	r12,r12[0x7]
800059c0:	00 00       	add	r0,r0
800059c2:	1a 00       	add	r0,sp
800059c4:	00 00       	add	r0,r0
800059c6:	1a 58       	eor	r8,sp
800059c8:	80 00       	ld.sh	r0,r0[0x0]
800059ca:	4f 50       	lddpc	r0,80005b9c <fat_create_short_entry_name+0x14c>
800059cc:	80 00       	ld.sh	r0,r0[0x0]
800059ce:	57 ec       	stdsp	sp[0x1f8],r12
800059d0:	80 00       	ld.sh	r0,r0[0x0]
800059d2:	56 84       	stdsp	sp[0x1a0],r4
800059d4:	80 00       	ld.sh	r0,r0[0x0]
800059d6:	53 c0       	stdsp	sp[0xf0],r0
800059d8:	80 00       	ld.sh	r0,r0[0x0]
800059da:	43 80       	lddsp	r0,sp[0xe0]

800059dc <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800059dc:	d4 31       	pushm	r0-r7,lr
800059de:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059e0:	33 a2       	mov	r2,58
800059e2:	30 d5       	mov	r5,13
800059e4:	30 23       	mov	r3,2
800059e6:	49 86       	lddpc	r6,80005a44 <fat_check_name+0x68>
800059e8:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800059ec:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800059ee:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800059f0:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800059f2:	0e 9c       	mov	r12,r7
800059f4:	f0 1f 00 15 	mcall	80005a48 <fat_check_name+0x6c>
800059f8:	c1 a1       	brne	80005a2c <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059fa:	ee 02 19 00 	cp.h	r2,r7
800059fe:	c0 60       	breq	80005a0a <fat_check_name+0x2e>
80005a00:	02 98       	mov	r8,r1
80005a02:	11 89       	ld.ub	r9,r8[0x0]
80005a04:	ee 09 19 00 	cp.h	r9,r7
80005a08:	c0 61       	brne	80005a14 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
80005a0a:	31 c9       	mov	r9,28
80005a0c:	49 08       	lddpc	r8,80005a4c <fat_check_name+0x70>
80005a0e:	b0 89       	st.b	r8[0x0],r9
80005a10:	30 03       	mov	r3,0
            return 0;      // incorrect character
80005a12:	c1 68       	rjmp	80005a3e <fat_check_name+0x62>
80005a14:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80005a16:	0c 38       	cp.w	r8,r6
80005a18:	cf 51       	brne	80005a02 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
80005a1a:	58 05       	cp.w	r5,0
80005a1c:	c0 41       	brne	80005a24 <fat_check_name+0x48>
      {
         u8_nb_entry++;
80005a1e:	2f f3       	sub	r3,-1
80005a20:	5c 53       	castu.b	r3
80005a22:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
80005a24:	20 15       	sub	r5,1
80005a26:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80005a28:	2f f4       	sub	r4,-1
   }
80005a2a:	ce 3b       	rjmp	800059f0 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
80005a2c:	31 48       	mov	r8,20
80005a2e:	f0 03 18 00 	cp.b	r3,r8
80005a32:	e0 88 00 06 	brls	80005a3e <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80005a36:	32 b9       	mov	r9,43
80005a38:	48 58       	lddpc	r8,80005a4c <fat_check_name+0x70>
80005a3a:	b0 89       	st.b	r8[0x0],r9
80005a3c:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
80005a3e:	06 9c       	mov	r12,r3
80005a40:	d8 32       	popm	r0-r7,pc
80005a42:	00 00       	add	r0,r0
80005a44:	80 01       	ld.sh	r1,r0[0x0]
80005a46:	26 c4       	sub	r4,108
80005a48:	80 00       	ld.sh	r0,r0[0x0]
80005a4a:	43 58       	lddsp	r8,sp[0xd4]
80005a4c:	00 00       	add	r0,r0
80005a4e:	1a 00       	add	r0,sp

80005a50 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005a50:	d4 31       	pushm	r0-r7,lr
80005a52:	20 8d       	sub	sp,32
80005a54:	18 94       	mov	r4,r12
80005a56:	50 2b       	stdsp	sp[0x8],r11
80005a58:	14 97       	mov	r7,r10
80005a5a:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80005a5c:	58 09       	cp.w	r9,0
80005a5e:	c0 40       	breq	80005a66 <fat_create_short_entry_name+0x16>
80005a60:	30 09       	mov	r9,0
80005a62:	50 19       	stdsp	sp[0x4],r9
80005a64:	c0 68       	rjmp	80005a70 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005a66:	f0 1f 00 66 	mcall	80005bfc <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80005a6a:	f0 1f 00 66 	mcall	80005c00 <fat_create_short_entry_name+0x1b0>
80005a6e:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005a70:	30 98       	mov	r8,9
80005a72:	f0 07 18 00 	cp.b	r7,r8
80005a76:	e0 8b 00 04 	brhi	80005a7e <fat_create_short_entry_name+0x2e>
80005a7a:	30 18       	mov	r8,1
80005a7c:	c0 88       	rjmp	80005a8c <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80005a7e:	36 38       	mov	r8,99
80005a80:	ee 08 18 00 	cp.b	r8,r7
80005a84:	f9 b8 02 02 	movhs	r8,2
80005a88:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80005a8c:	e0 6a cc cd 	mov	r10,52429
80005a90:	ea 1a cc cc 	orh	r10,0xcccc
80005a94:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005a98:	e6 09 16 03 	lsr	r9,r3,0x3
80005a9c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005aa0:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80005aa4:	2d 09       	sub	r9,-48
80005aa6:	5c 59       	castu.b	r9
80005aa8:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80005aaa:	e0 63 85 1f 	mov	r3,34079
80005aae:	ea 13 51 eb 	orh	r3,0x51eb
80005ab2:	ee 03 06 42 	mulu.d	r2,r7,r3
80005ab6:	e6 09 16 05 	lsr	r9,r3,0x5
80005aba:	f2 0b 10 64 	mul	r11,r9,100
80005abe:	ee 0b 01 0b 	sub	r11,r7,r11
80005ac2:	5c 5b       	castu.b	r11
80005ac4:	f6 0a 06 4a 	mulu.d	r10,r11,r10
80005ac8:	f6 0a 16 03 	lsr	r10,r11,0x3
80005acc:	2d 0a       	sub	r10,-48
80005ace:	5c 5a       	castu.b	r10
80005ad0:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005ad2:	2d 09       	sub	r9,-48
80005ad4:	5c 59       	castu.b	r9
80005ad6:	50 49       	stdsp	sp[0x10],r9
80005ad8:	30 01       	mov	r1,0
80005ada:	30 17       	mov	r7,1
80005adc:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80005ade:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005ae0:	f0 09 11 ff 	rsub	r9,r8,-1
80005ae4:	2f 89       	sub	r9,-8
80005ae6:	50 39       	stdsp	sp[0xc],r9
80005ae8:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
80005aea:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005aec:	f0 08 11 06 	rsub	r8,r8,6
80005af0:	5c 58       	castu.b	r8
80005af2:	50 78       	stdsp	sp[0x1c],r8
80005af4:	c0 28       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005af6:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80005af8:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
80005afa:	e6 07 18 00 	cp.b	r7,r3
80005afe:	c1 41       	brne	80005b26 <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005b00:	40 39       	lddsp	r9,sp[0xc]
80005b02:	0a 39       	cp.w	r9,r5
80005b04:	5f 09       	sreq	r9
80005b06:	e0 06 18 00 	cp.b	r6,r0
80005b0a:	5f 08       	sreq	r8
80005b0c:	f3 e8 10 08 	or	r8,r9,r8
80005b10:	30 09       	mov	r9,0
80005b12:	f2 08 18 00 	cp.b	r8,r9
80005b16:	c0 51       	brne	80005b20 <fat_create_short_entry_name+0xd0>
80005b18:	0c 9c       	mov	r12,r6
80005b1a:	f0 1f 00 3b 	mcall	80005c04 <fat_create_short_entry_name+0x1b4>
80005b1e:	c1 10       	breq	80005b40 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005b20:	2f f7       	sub	r7,-1
80005b22:	5c 57       	castu.b	r7
            continue;
80005b24:	ce ab       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005b26:	e4 07 18 00 	cp.b	r7,r2
80005b2a:	c1 21       	brne	80005b4e <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005b2c:	30 b9       	mov	r9,11
80005b2e:	f2 05 18 00 	cp.b	r5,r9
80005b32:	c0 50       	breq	80005b3c <fat_create_short_entry_name+0xec>
80005b34:	0c 9c       	mov	r12,r6
80005b36:	f0 1f 00 34 	mcall	80005c04 <fat_create_short_entry_name+0x1b4>
80005b3a:	c0 30       	breq	80005b40 <fat_create_short_entry_name+0xf0>
80005b3c:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80005b3e:	cd db       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005b40:	0c 9c       	mov	r12,r6
80005b42:	f0 1f 00 32 	mcall	80005c08 <fat_create_short_entry_name+0x1b8>
80005b46:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005b48:	2f f4       	sub	r4,-1
         if( 0 == character )
80005b4a:	58 0c       	cp.w	r12,0
80005b4c:	cd 60       	breq	80005af8 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80005b4e:	30 78       	mov	r8,7
80005b50:	f0 07 18 00 	cp.b	r7,r8
80005b54:	c0 c1       	brne	80005b6c <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005b56:	e0 06 18 00 	cp.b	r6,r0
80005b5a:	c0 50       	breq	80005b64 <fat_create_short_entry_name+0x114>
80005b5c:	0c 9c       	mov	r12,r6
80005b5e:	f0 1f 00 2a 	mcall	80005c04 <fat_create_short_entry_name+0x1b4>
80005b62:	c0 30       	breq	80005b68 <fat_create_short_entry_name+0x118>
80005b64:	30 87       	mov	r7,8
80005b66:	cc 9b       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005b68:	2f f4       	sub	r4,-1
80005b6a:	cc 7b       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80005b6c:	30 68       	mov	r8,6
80005b6e:	f0 07 18 00 	cp.b	r7,r8
80005b72:	c0 61       	brne	80005b7e <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005b74:	e4 05 18 00 	cp.b	r5,r2
80005b78:	cb f0       	breq	80005af6 <fat_create_short_entry_name+0xa6>
80005b7a:	32 06       	mov	r6,32
80005b7c:	c1 28       	rjmp	80005ba0 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80005b7e:	30 98       	mov	r8,9
80005b80:	f0 07 18 00 	cp.b	r7,r8
80005b84:	c0 71       	brne	80005b92 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005b86:	30 b8       	mov	r8,11
80005b88:	f0 05 18 00 	cp.b	r5,r8
80005b8c:	c3 50       	breq	80005bf6 <fat_create_short_entry_name+0x1a6>
80005b8e:	32 06       	mov	r6,32
80005b90:	c0 f8       	rjmp	80005bae <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005b92:	30 58       	mov	r8,5
80005b94:	f0 07 18 00 	cp.b	r7,r8
80005b98:	c0 41       	brne	80005ba0 <fat_create_short_entry_name+0x150>
80005b9a:	40 66       	lddsp	r6,sp[0x18]
80005b9c:	30 67       	mov	r7,6
80005b9e:	c0 f8       	rjmp	80005bbc <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005ba0:	30 48       	mov	r8,4
80005ba2:	f0 07 18 00 	cp.b	r7,r8
80005ba6:	c0 41       	brne	80005bae <fat_create_short_entry_name+0x15e>
80005ba8:	40 56       	lddsp	r6,sp[0x14]
80005baa:	30 57       	mov	r7,5
80005bac:	c1 28       	rjmp	80005bd0 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80005bae:	30 38       	mov	r8,3
80005bb0:	f0 07 18 00 	cp.b	r7,r8
80005bb4:	c0 41       	brne	80005bbc <fat_create_short_entry_name+0x16c>
80005bb6:	40 46       	lddsp	r6,sp[0x10]
80005bb8:	30 47       	mov	r7,4
80005bba:	c0 b8       	rjmp	80005bd0 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80005bbc:	30 28       	mov	r8,2
80005bbe:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005bc0:	f0 07 18 00 	cp.b	r7,r8
80005bc4:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
80005bc8:	f0 09 18 00 	cp.b	r9,r8
80005bcc:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
80005bd0:	40 08       	lddsp	r8,sp[0x0]
80005bd2:	58 08       	cp.w	r8,0
80005bd4:	c0 50       	breq	80005bde <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
80005bd6:	40 29       	lddsp	r9,sp[0x8]
80005bd8:	12 c6       	st.b	r9++,r6
80005bda:	50 29       	stdsp	sp[0x8],r9
80005bdc:	c0 48       	rjmp	80005be4 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80005bde:	40 18       	lddsp	r8,sp[0x4]
80005be0:	10 c6       	st.b	r8++,r6
80005be2:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80005be4:	2f f5       	sub	r5,-1
80005be6:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005be8:	e2 08 16 01 	lsr	r8,r1,0x1
80005bec:	a7 71       	lsl	r1,0x7
80005bee:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005bf0:	0c 01       	add	r1,r6
80005bf2:	5c 51       	castu.b	r1
80005bf4:	c8 2b       	rjmp	80005af8 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005bf6:	02 9c       	mov	r12,r1
80005bf8:	2f 8d       	sub	sp,-32
80005bfa:	d8 32       	popm	r0-r7,pc
80005bfc:	80 00       	ld.sh	r0,r0[0x0]
80005bfe:	46 f0       	lddsp	r0,sp[0x1bc]
80005c00:	80 00       	ld.sh	r0,r0[0x0]
80005c02:	43 80       	lddsp	r0,sp[0xe0]
80005c04:	80 00       	ld.sh	r0,r0[0x0]
80005c06:	43 58       	lddsp	r8,sp[0xd4]
80005c08:	80 00       	ld.sh	r0,r0[0x0]
80005c0a:	53 5c       	stdsp	sp[0xd4],r12

80005c0c <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80005c0c:	eb cd 40 80 	pushm	r7,lr
80005c10:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005c12:	f0 1f 00 12 	mcall	80005c58 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005c16:	19 88       	ld.ub	r8,r12[0x0]
80005c18:	58 08       	cp.w	r8,0
80005c1a:	c0 61       	brne	80005c26 <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80005c1c:	30 a9       	mov	r9,10
80005c1e:	49 08       	lddpc	r8,80005c5c <fat_entry_shortname_compare+0x50>
80005c20:	b0 89       	st.b	r8[0x0],r9
80005c22:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005c26:	3e 59       	mov	r9,-27
80005c28:	f2 08 18 00 	cp.b	r8,r9
80005c2c:	c0 70       	breq	80005c3a <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80005c2e:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005c32:	30 f8       	mov	r8,15
80005c34:	f0 09 18 00 	cp.b	r9,r8
80005c38:	c0 61       	brne	80005c44 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005c3a:	30 b9       	mov	r9,11
80005c3c:	48 88       	lddpc	r8,80005c5c <fat_entry_shortname_compare+0x50>
80005c3e:	b0 89       	st.b	r8[0x0],r9
80005c40:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005c44:	30 b9       	mov	r9,11
80005c46:	48 68       	lddpc	r8,80005c5c <fat_entry_shortname_compare+0x50>
80005c48:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80005c4a:	30 ba       	mov	r10,11
80005c4c:	0e 9b       	mov	r11,r7
80005c4e:	f0 1f 00 05 	mcall	80005c60 <fat_entry_shortname_compare+0x54>
80005c52:	5f 0c       	sreq	r12
}
80005c54:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c58:	80 00       	ld.sh	r0,r0[0x0]
80005c5a:	43 80       	lddsp	r0,sp[0xe0]
80005c5c:	00 00       	add	r0,r0
80005c5e:	1a 00       	add	r0,sp
80005c60:	80 00       	ld.sh	r0,r0[0x0]
80005c62:	c7 8c       	rcall	80005d52 <fat_create_entry_file_name+0x76>

80005c64 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005c64:	d4 31       	pushm	r0-r7,lr
80005c66:	20 3d       	sub	sp,12
80005c68:	18 93       	mov	r3,r12
80005c6a:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c6c:	1a 96       	mov	r6,sp
80005c6e:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c70:	49 65       	lddpc	r5,80005cc8 <fat_find_short_entry_name+0x64>
80005c72:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c74:	49 61       	lddpc	r1,80005ccc <fat_find_short_entry_name+0x68>
80005c76:	30 a0       	mov	r0,10
80005c78:	c0 58       	rjmp	80005c82 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80005c7a:	3f f8       	mov	r8,-1
80005c7c:	f0 07 18 00 	cp.b	r7,r8
80005c80:	c2 00       	breq	80005cc0 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80005c82:	2f f7       	sub	r7,-1
80005c84:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c86:	04 99       	mov	r9,r2
80005c88:	0e 9a       	mov	r10,r7
80005c8a:	1a 9b       	mov	r11,sp
80005c8c:	06 9c       	mov	r12,r3
80005c8e:	f0 1f 00 11 	mcall	80005cd0 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c92:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005c94:	f0 1f 00 10 	mcall	80005cd4 <fat_find_short_entry_name+0x70>
80005c98:	c0 81       	brne	80005ca8 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80005c9a:	48 d8       	lddpc	r8,80005ccc <fat_find_short_entry_name+0x68>
80005c9c:	11 89       	ld.ub	r9,r8[0x0]
80005c9e:	31 a8       	mov	r8,26
80005ca0:	f0 09 18 00 	cp.b	r9,r8
80005ca4:	c0 e1       	brne	80005cc0 <fat_find_short_entry_name+0x5c>
80005ca6:	c0 e8       	rjmp	80005cc2 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005ca8:	1a 9c       	mov	r12,sp
80005caa:	f0 1f 00 0c 	mcall	80005cd8 <fat_find_short_entry_name+0x74>
80005cae:	ce 61       	brne	80005c7a <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005cb0:	03 88       	ld.ub	r8,r1[0x0]
80005cb2:	e0 08 18 00 	cp.b	r8,r0
80005cb6:	c0 60       	breq	80005cc2 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005cb8:	8a 18       	ld.sh	r8,r5[0x2]
80005cba:	2f f8       	sub	r8,-1
80005cbc:	aa 18       	st.h	r5[0x2],r8
      }
80005cbe:	ce bb       	rjmp	80005c94 <fat_find_short_entry_name+0x30>
80005cc0:	30 07       	mov	r7,0
   }
}
80005cc2:	0e 9c       	mov	r12,r7
80005cc4:	2f dd       	sub	sp,-12
80005cc6:	d8 32       	popm	r0-r7,pc
80005cc8:	00 00       	add	r0,r0
80005cca:	19 fc       	ld.ub	r12,r12[0x7]
80005ccc:	00 00       	add	r0,r0
80005cce:	1a 00       	add	r0,sp
80005cd0:	80 00       	ld.sh	r0,r0[0x0]
80005cd2:	5a 50       	cp.w	r0,-27
80005cd4:	80 00       	ld.sh	r0,r0[0x0]
80005cd6:	4f 50       	lddpc	r0,80005ea8 <fat_mount+0x124>
80005cd8:	80 00       	ld.sh	r0,r0[0x0]
80005cda:	5c 0c       	acr	r12

80005cdc <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80005cdc:	eb cd 40 fc 	pushm	r2-r7,lr
80005ce0:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005ce2:	f0 1f 00 21 	mcall	80005d64 <fat_create_entry_file_name+0x88>
80005ce6:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005ce8:	c3 b0       	breq	80005d5e <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005cea:	0c 9c       	mov	r12,r6
80005cec:	f0 1f 00 1f 	mcall	80005d68 <fat_create_entry_file_name+0x8c>
80005cf0:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005cf2:	c0 61       	brne	80005cfe <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005cf4:	32 a9       	mov	r9,42
80005cf6:	49 e8       	lddpc	r8,80005d6c <fat_create_entry_file_name+0x90>
80005cf8:	b0 89       	st.b	r8[0x0],r9
80005cfa:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005cfe:	0a 9c       	mov	r12,r5
80005d00:	f0 1f 00 1c 	mcall	80005d70 <fat_create_entry_file_name+0x94>
80005d04:	c2 d0       	breq	80005d5e <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005d06:	30 09       	mov	r9,0
80005d08:	0e 9a       	mov	r10,r7
80005d0a:	12 9b       	mov	r11,r9
80005d0c:	0c 9c       	mov	r12,r6
80005d0e:	f0 1f 00 1a 	mcall	80005d74 <fat_create_entry_file_name+0x98>
80005d12:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005d14:	20 15       	sub	r5,1
80005d16:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005d18:	c1 c0       	breq	80005d50 <fat_create_entry_file_name+0x74>
80005d1a:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005d1c:	49 74       	lddpc	r4,80005d78 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005d1e:	ea c3 ff c0 	sub	r3,r5,-64
80005d22:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005d24:	88 18       	ld.sh	r8,r4[0x2]
80005d26:	20 18       	sub	r8,1
80005d28:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80005d2a:	f0 1f 00 15 	mcall	80005d7c <fat_create_entry_file_name+0xa0>
80005d2e:	c1 80       	breq	80005d5e <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005d30:	ea 07 18 00 	cp.b	r7,r5
80005d34:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005d38:	0e 9a       	mov	r10,r7
80005d3a:	04 9b       	mov	r11,r2
80005d3c:	0c 9c       	mov	r12,r6
80005d3e:	f0 1f 00 11 	mcall	80005d80 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005d42:	2f f7       	sub	r7,-1
80005d44:	5c 57       	castu.b	r7
80005d46:	ee 05 18 00 	cp.b	r5,r7
80005d4a:	c0 33       	brcs	80005d50 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005d4c:	2f 36       	sub	r6,-13
80005d4e:	ce bb       	rjmp	80005d24 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005d50:	48 a8       	lddpc	r8,80005d78 <fat_create_entry_file_name+0x9c>
80005d52:	90 19       	ld.sh	r9,r8[0x2]
80005d54:	f2 05 00 05 	add	r5,r9,r5
80005d58:	b0 15       	st.h	r8[0x2],r5
80005d5a:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80005d5e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005d62:	00 00       	add	r0,r0
80005d64:	80 00       	ld.sh	r0,r0[0x0]
80005d66:	59 dc       	cp.w	r12,29
80005d68:	80 00       	ld.sh	r0,r0[0x0]
80005d6a:	5c 64       	casts.b	r4
80005d6c:	00 00       	add	r0,r0
80005d6e:	1a 00       	add	r0,sp
80005d70:	80 00       	ld.sh	r0,r0[0x0]
80005d72:	59 2c       	cp.w	r12,18
80005d74:	80 00       	ld.sh	r0,r0[0x0]
80005d76:	5a 50       	cp.w	r0,-27
80005d78:	00 00       	add	r0,r0
80005d7a:	19 fc       	ld.ub	r12,r12[0x7]
80005d7c:	80 00       	ld.sh	r0,r0[0x0]
80005d7e:	4f 50       	lddpc	r0,80005f50 <fat_mount+0x1cc>
80005d80:	80 00       	ld.sh	r0,r0[0x0]
80005d82:	55 40       	stdsp	sp[0x150],r0

80005d84 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005d84:	d4 31       	pushm	r0-r7,lr
80005d86:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005d88:	30 07       	mov	r7,0
80005d8a:	fe f8 02 d2 	ld.w	r8,pc[722]
80005d8e:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005d90:	f0 1f 00 b4 	mcall	80006060 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005d94:	fe f8 02 d0 	ld.w	r8,pc[720]
80005d98:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005d9a:	fe f8 02 ce 	ld.w	r8,pc[718]
80005d9e:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80005da0:	f0 1f 00 b3 	mcall	8000606c <fat_mount+0x2e8>
80005da4:	e0 80 01 58 	breq	80006054 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005da8:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005dac:	ea c8 fe 42 	sub	r8,r5,-446
80005db0:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005db2:	38 04       	mov	r4,-128
80005db4:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005db6:	30 1c       	mov	r12,1
80005db8:	f0 1f 00 af 	mcall	80006074 <fat_mount+0x2f0>
80005dbc:	e0 80 01 4c 	breq	80006054 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005dc0:	eb 39 01 fe 	ld.ub	r9,r5[510]
80005dc4:	35 58       	mov	r8,85
80005dc6:	f0 09 18 00 	cp.b	r9,r8
80005dca:	c0 d0       	breq	80005de4 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005dcc:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005dd0:	3a a8       	mov	r8,-86
80005dd2:	f0 09 18 00 	cp.b	r9,r8
80005dd6:	c0 70       	breq	80005de4 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005dd8:	30 29       	mov	r9,2
80005dda:	fe f8 02 9e 	ld.w	r8,pc[670]
80005dde:	b0 89       	st.b	r8[0x0],r9
80005de0:	30 0c       	mov	r12,0
         return false;
80005de2:	c3 a9       	rjmp	80006056 <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80005de4:	fe f8 02 84 	ld.w	r8,pc[644]
80005de8:	70 08       	ld.w	r8,r8[0x0]
80005dea:	58 08       	cp.w	r8,0
80005dec:	c5 21       	brne	80005e90 <fat_mount+0x10c>
80005dee:	40 08       	lddsp	r8,sp[0x0]
80005df0:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005df2:	30 1e       	mov	lr,1
80005df4:	30 63       	mov	r3,6
80005df6:	30 e2       	mov	r2,14
80005df8:	30 b1       	mov	r1,11
80005dfa:	30 c0       	mov	r0,12
80005dfc:	11 89       	ld.ub	r9,r8[0x0]
80005dfe:	e8 09 18 00 	cp.b	r9,r4
80005e02:	5f 0b       	sreq	r11
80005e04:	ee 09 18 00 	cp.b	r9,r7
80005e08:	5f 09       	sreq	r9
80005e0a:	f7 e9 10 09 	or	r9,r11,r9
80005e0e:	ee 09 18 00 	cp.b	r9,r7
80005e12:	c1 90       	breq	80005e44 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005e14:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005e16:	fc 09 18 00 	cp.b	r9,lr
80005e1a:	5f 0c       	sreq	r12
80005e1c:	ec 09 18 00 	cp.b	r9,r6
80005e20:	5f 0b       	sreq	r11
80005e22:	f9 eb 10 0b 	or	r11,r12,r11
80005e26:	ee 0b 18 00 	cp.b	r11,r7
80005e2a:	c1 41       	brne	80005e52 <fat_mount+0xce>
80005e2c:	e6 09 18 00 	cp.b	r9,r3
80005e30:	c1 10       	breq	80005e52 <fat_mount+0xce>
80005e32:	e4 09 18 00 	cp.b	r9,r2
80005e36:	c0 e0       	breq	80005e52 <fat_mount+0xce>
80005e38:	e2 09 18 00 	cp.b	r9,r1
80005e3c:	c0 b0       	breq	80005e52 <fat_mount+0xce>
80005e3e:	e0 09 18 00 	cp.b	r9,r0
80005e42:	c0 80       	breq	80005e52 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005e44:	2f fa       	sub	r10,-1
80005e46:	5c 5a       	castu.b	r10
80005e48:	2f 08       	sub	r8,-16
80005e4a:	ec 0a 18 00 	cp.b	r10,r6
80005e4e:	cd 71       	brne	80005dfc <fat_mount+0x78>
80005e50:	c2 08       	rjmp	80005e90 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005e52:	ec 0a 18 00 	cp.b	r10,r6
80005e56:	c1 d0       	breq	80005e90 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005e58:	fe f3 02 10 	ld.w	r3,pc[528]
80005e5c:	a5 6a       	lsl	r10,0x4
80005e5e:	f4 ca fe 42 	sub	r10,r10,-446
80005e62:	ea 0a 00 0a 	add	r10,r5,r10
80005e66:	f5 38 00 08 	ld.ub	r8,r10[8]
80005e6a:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005e6c:	f5 38 00 09 	ld.ub	r8,r10[9]
80005e70:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005e72:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005e76:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005e78:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005e7c:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005e7e:	4f 88       	lddpc	r8,8000605c <fat_mount+0x2d8>
80005e80:	11 8c       	ld.ub	r12,r8[0x0]
80005e82:	f0 1f 00 7f 	mcall	8000607c <fat_mount+0x2f8>
80005e86:	66 08       	ld.w	r8,r3[0x0]
80005e88:	f8 08 02 48 	mul	r8,r12,r8
80005e8c:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005e8e:	c9 4b       	rjmp	80005db6 <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005e90:	4f 88       	lddpc	r8,80006070 <fat_mount+0x2ec>
80005e92:	11 89       	ld.ub	r9,r8[0x0]
80005e94:	3e b8       	mov	r8,-21
80005e96:	f0 09 18 00 	cp.b	r9,r8
80005e9a:	c0 f1       	brne	80005eb8 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005e9c:	4f 58       	lddpc	r8,80006070 <fat_mount+0x2ec>
80005e9e:	11 a9       	ld.ub	r9,r8[0x2]
80005ea0:	39 08       	mov	r8,-112
80005ea2:	f0 09 18 00 	cp.b	r9,r8
80005ea6:	c0 91       	brne	80005eb8 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005ea8:	4f 28       	lddpc	r8,80006070 <fat_mount+0x2ec>
80005eaa:	f1 38 00 15 	ld.ub	r8,r8[21]
80005eae:	e2 18 00 f0 	andl	r8,0xf0,COH
80005eb2:	e0 48 00 f0 	cp.w	r8,240
80005eb6:	c0 60       	breq	80005ec2 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005eb8:	30 39       	mov	r9,3
80005eba:	4f 08       	lddpc	r8,80006078 <fat_mount+0x2f4>
80005ebc:	b0 89       	st.b	r8[0x0],r9
80005ebe:	30 0c       	mov	r12,0
      return false;
80005ec0:	cc b8       	rjmp	80006056 <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005ec2:	30 49       	mov	r9,4
80005ec4:	4e d8       	lddpc	r8,80006078 <fat_mount+0x2f4>
80005ec6:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005ec8:	4e aa       	lddpc	r10,80006070 <fat_mount+0x2ec>
80005eca:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005ece:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005ed0:	f5 38 00 0d 	ld.ub	r8,r10[13]
80005ed4:	b3 38       	mul	r8,r9
80005ed6:	5c 58       	castu.b	r8
80005ed8:	4e 1b       	lddpc	r11,8000605c <fat_mount+0x2d8>
80005eda:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005edc:	30 0b       	mov	r11,0
80005ede:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005ee0:	fa cb ff fc 	sub	r11,sp,-4
80005ee4:	fa c7 ff f9 	sub	r7,sp,-7
80005ee8:	f5 3c 00 16 	ld.ub	r12,r10[22]
80005eec:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005eee:	fa ce ff fa 	sub	lr,sp,-6
80005ef2:	f5 3a 00 17 	ld.ub	r10,r10[23]
80005ef6:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80005ef8:	40 1a       	lddsp	r10,sp[0x4]
80005efa:	58 0a       	cp.w	r10,0
80005efc:	c0 e1       	brne	80005f18 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005efe:	4d da       	lddpc	r10,80006070 <fat_mount+0x2ec>
80005f00:	f5 3c 00 24 	ld.ub	r12,r10[36]
80005f04:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005f06:	f5 3c 00 25 	ld.ub	r12,r10[37]
80005f0a:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005f0c:	f5 3c 00 26 	ld.ub	r12,r10[38]
80005f10:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80005f12:	f5 3a 00 27 	ld.ub	r10,r10[39]
80005f16:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80005f18:	12 95       	mov	r5,r9
80005f1a:	40 1c       	lddsp	r12,sp[0x4]
80005f1c:	f2 0c 02 4c 	mul	r12,r9,r12
80005f20:	4c fa       	lddpc	r10,8000605c <fat_mount+0x2d8>
80005f22:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f24:	4d 3a       	lddpc	r10,80006070 <fat_mount+0x2ec>
80005f26:	f5 3a 00 13 	ld.ub	r10,r10[19]
80005f2a:	58 0a       	cp.w	r10,0
80005f2c:	c1 61       	brne	80005f58 <fat_mount+0x1d4>
80005f2e:	4d 16       	lddpc	r6,80006070 <fat_mount+0x2ec>
80005f30:	ed 34 00 14 	ld.ub	r4,r6[20]
80005f34:	30 06       	mov	r6,0
80005f36:	ec 04 18 00 	cp.b	r4,r6
80005f3a:	c0 f1       	brne	80005f58 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005f3c:	4c da       	lddpc	r10,80006070 <fat_mount+0x2ec>
80005f3e:	f5 36 00 20 	ld.ub	r6,r10[32]
80005f42:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005f44:	f5 37 00 21 	ld.ub	r7,r10[33]
80005f48:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005f4a:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005f4e:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005f50:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005f54:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f56:	c0 98       	rjmp	80005f68 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005f58:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005f5a:	4c 6a       	lddpc	r10,80006070 <fat_mount+0x2ec>
80005f5c:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005f60:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005f62:	30 0a       	mov	r10,0
80005f64:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005f66:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005f68:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005f6a:	4b da       	lddpc	r10,8000605c <fat_mount+0x2d8>
80005f6c:	f8 0b 15 01 	lsl	r11,r12,0x1
80005f70:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005f74:	fa c6 ff f6 	sub	r6,sp,-10
80005f78:	fa c7 ff f4 	sub	r7,sp,-12
80005f7c:	4b db       	lddpc	r11,80006070 <fat_mount+0x2ec>
80005f7e:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005f82:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005f84:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005f88:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005f8a:	f2 03 15 04 	lsl	r3,r9,0x4
80005f8e:	9a de       	ld.uh	lr,sp[0xa]
80005f90:	e6 0e 00 0e 	add	lr,r3,lr
80005f94:	a5 7e       	lsl	lr,0x5
80005f96:	20 1e       	sub	lr,1
80005f98:	f2 03 15 09 	lsl	r3,r9,0x9
80005f9c:	fc 03 0c 02 	divs	r2,lr,r3
80005fa0:	e4 09 02 4e 	mul	lr,r2,r9
80005fa4:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005fa8:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005fac:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005fae:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005fb2:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005fb4:	9a 57       	ld.sh	r7,sp[0xa]
80005fb6:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005fba:	0e 96       	mov	r6,r7
80005fbc:	ee 0b 01 0b 	sub	r11,r7,r11
80005fc0:	b3 3b       	mul	r11,r9
80005fc2:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005fc4:	ee 09 02 49 	mul	r9,r7,r9
80005fc8:	5c 79       	castu.h	r9
80005fca:	4a 8b       	lddpc	r11,80006068 <fat_mount+0x2e4>
80005fcc:	76 0b       	ld.w	r11,r11[0x0]
80005fce:	f2 0b 00 0b 	add	r11,r9,r11
80005fd2:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005fd4:	5c 7e       	castu.h	lr
80005fd6:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005fda:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005fdc:	58 08       	cp.w	r8,0
80005fde:	c3 b0       	breq	80006054 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005fe0:	a9 35       	mul	r5,r4
80005fe2:	ea 09 01 09 	sub	r9,r5,r9
80005fe6:	18 19       	sub	r9,r12
80005fe8:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005fea:	30 1a       	mov	r10,1
80005fec:	f4 08 18 00 	cp.b	r8,r10
80005ff0:	c0 70       	breq	80005ffe <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005ff2:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005ff4:	a1 98       	lsr	r8,0x1
80005ff6:	f4 08 18 00 	cp.b	r8,r10
80005ffa:	cf c1       	brne	80005ff2 <fat_mount+0x26e>
80005ffc:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005ffe:	40 18       	lddsp	r8,sp[0x4]
80006000:	f0 ca ff fe 	sub	r10,r8,-2
80006004:	49 69       	lddpc	r9,8000605c <fat_mount+0x2d8>
80006006:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80006008:	e0 48 0f f4 	cp.w	r8,4084
8000600c:	e0 8b 00 07 	brhi	8000601a <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80006010:	30 19       	mov	r9,1
80006012:	49 58       	lddpc	r8,80006064 <fat_mount+0x2e0>
80006014:	b0 89       	st.b	r8[0x0],r9
80006016:	30 1c       	mov	r12,1
80006018:	c1 f8       	rjmp	80006056 <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
8000601a:	e0 48 ff f4 	cp.w	r8,65524
8000601e:	e0 8b 00 07 	brhi	8000602c <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80006022:	30 29       	mov	r9,2
80006024:	49 08       	lddpc	r8,80006064 <fat_mount+0x2e0>
80006026:	b0 89       	st.b	r8[0x0],r9
80006028:	30 1c       	mov	r12,1
8000602a:	c1 68       	rjmp	80006056 <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000602c:	30 39       	mov	r9,3
8000602e:	48 e8       	lddpc	r8,80006064 <fat_mount+0x2e0>
80006030:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80006032:	48 b8       	lddpc	r8,8000605c <fat_mount+0x2d8>
80006034:	2e 88       	sub	r8,-24
80006036:	48 f9       	lddpc	r9,80006070 <fat_mount+0x2ec>
80006038:	f3 3a 00 2c 	ld.ub	r10,r9[44]
8000603c:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000603e:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80006042:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80006044:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80006048:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000604a:	f3 39 00 2f 	ld.ub	r9,r9[47]
8000604e:	b0 89       	st.b	r8[0x0],r9
80006050:	30 1c       	mov	r12,1
80006052:	c0 28       	rjmp	80006056 <fat_mount+0x2d2>
80006054:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80006056:	2f dd       	sub	sp,-12
80006058:	d8 32       	popm	r0-r7,pc
8000605a:	00 00       	add	r0,r0
8000605c:	00 00       	add	r0,r0
8000605e:	19 b0       	ld.ub	r0,r12[0x3]
80006060:	80 00       	ld.sh	r0,r0[0x0]
80006062:	43 1c       	lddsp	r12,sp[0xc4]
80006064:	00 00       	add	r0,r0
80006066:	19 fc       	ld.ub	r12,r12[0x7]
80006068:	00 00       	add	r0,r0
8000606a:	17 6c       	ld.uh	r12,--r11
8000606c:	80 00       	ld.sh	r0,r0[0x0]
8000606e:	51 b8       	stdsp	sp[0x6c],r8
80006070:	00 00       	add	r0,r0
80006072:	17 b0       	ld.ub	r0,r11[0x3]
80006074:	80 00       	ld.sh	r0,r0[0x0]
80006076:	49 20       	lddpc	r0,800060bc <file_seek+0x14>
80006078:	00 00       	add	r0,r0
8000607a:	1a 00       	add	r0,sp
8000607c:	80 00       	ld.sh	r0,r0[0x0]
8000607e:	72 e0       	ld.w	r0,r9[0x38]

80006080 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80006080:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80006082:	f0 1f 00 08 	mcall	800060a0 <file_eof+0x20>
80006086:	c0 41       	brne	8000608e <file_eof+0xe>
80006088:	e0 6c 00 ff 	mov	r12,255
8000608c:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
8000608e:	48 68       	lddpc	r8,800060a4 <file_eof+0x24>
80006090:	30 1c       	mov	r12,1
80006092:	70 29       	ld.w	r9,r8[0x8]
80006094:	70 38       	ld.w	r8,r8[0xc]
80006096:	10 39       	cp.w	r9,r8
80006098:	f9 bc 0b 00 	movhi	r12,0
}
8000609c:	d8 02       	popm	pc
8000609e:	00 00       	add	r0,r0
800060a0:	80 00       	ld.sh	r0,r0[0x0]
800060a2:	52 fc       	stdsp	sp[0xbc],r12
800060a4:	00 00       	add	r0,r0
800060a6:	17 70       	ld.ub	r0,--r11

800060a8 <file_seek>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_seek( uint32_t u32_pos , uint8_t u8_whence )
{
800060a8:	eb cd 40 c0 	pushm	r6-r7,lr
800060ac:	18 96       	mov	r6,r12
800060ae:	16 97       	mov	r7,r11
   if( !fat_check_mount_select_open())
800060b0:	f0 1f 00 28 	mcall	80006150 <file_seek+0xa8>
800060b4:	c4 c0       	breq	8000614c <file_seek+0xa4>
      return false;

   switch(u8_whence)
800060b6:	30 18       	mov	r8,1
800060b8:	f0 07 18 00 	cp.b	r7,r8
800060bc:	c2 90       	breq	8000610e <file_seek+0x66>
800060be:	c1 a3       	brcs	800060f2 <file_seek+0x4a>
800060c0:	30 28       	mov	r8,2
800060c2:	f0 07 18 00 	cp.b	r7,r8
800060c6:	c0 70       	breq	800060d4 <file_seek+0x2c>
800060c8:	30 38       	mov	r8,3
800060ca:	f0 07 18 00 	cp.b	r7,r8
800060ce:	c3 00       	breq	8000612e <file_seek+0x86>
800060d0:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   {
      case FS_SEEK_CUR_RE:
      if( fs_g_nav_entry.u32_pos_in_file < u32_pos )
800060d4:	4a 08       	lddpc	r8,80006154 <file_seek+0xac>
800060d6:	70 38       	ld.w	r8,r8[0xc]
800060d8:	0c 38       	cp.w	r8,r6
800060da:	c0 62       	brcc	800060e6 <file_seek+0x3e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
800060dc:	30 79       	mov	r9,7
800060de:	49 f8       	lddpc	r8,80006158 <file_seek+0xb0>
800060e0:	b0 89       	st.b	r8[0x0],r9
800060e2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file -= u32_pos;
800060e6:	49 c9       	lddpc	r9,80006154 <file_seek+0xac>
800060e8:	f0 06 01 06 	sub	r6,r8,r6
800060ec:	93 36       	st.w	r9[0xc],r6
800060ee:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_SET:
      if( fs_g_nav_entry.u32_size < u32_pos )
800060f2:	49 98       	lddpc	r8,80006154 <file_seek+0xac>
800060f4:	70 28       	ld.w	r8,r8[0x8]
800060f6:	10 36       	cp.w	r6,r8
800060f8:	e0 88 00 07 	brls	80006106 <file_seek+0x5e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
800060fc:	30 79       	mov	r9,7
800060fe:	49 78       	lddpc	r8,80006158 <file_seek+0xb0>
80006100:	b0 89       	st.b	r8[0x0],r9
80006102:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80006106:	49 48       	lddpc	r8,80006154 <file_seek+0xac>
80006108:	91 36       	st.w	r8[0xc],r6
8000610a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_END:
      if( fs_g_nav_entry.u32_size < u32_pos )
8000610e:	49 28       	lddpc	r8,80006154 <file_seek+0xac>
80006110:	70 28       	ld.w	r8,r8[0x8]
80006112:	10 36       	cp.w	r6,r8
80006114:	e0 88 00 07 	brls	80006122 <file_seek+0x7a>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80006118:	30 79       	mov	r9,7
8000611a:	49 08       	lddpc	r8,80006158 <file_seek+0xb0>
8000611c:	b0 89       	st.b	r8[0x0],r9
8000611e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size - u32_pos;
80006122:	48 d9       	lddpc	r9,80006154 <file_seek+0xac>
80006124:	f0 06 01 06 	sub	r6,r8,r6
80006128:	93 36       	st.w	r9[0xc],r6
8000612a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_CUR_FW:
      u32_pos += fs_g_nav_entry.u32_pos_in_file;
8000612e:	48 a8       	lddpc	r8,80006154 <file_seek+0xac>
80006130:	70 39       	ld.w	r9,r8[0xc]
80006132:	12 06       	add	r6,r9
      if( fs_g_nav_entry.u32_size < u32_pos )
80006134:	70 28       	ld.w	r8,r8[0x8]
80006136:	10 36       	cp.w	r6,r8
80006138:	e0 88 00 07 	brls	80006146 <file_seek+0x9e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
8000613c:	30 79       	mov	r9,7
8000613e:	48 78       	lddpc	r8,80006158 <file_seek+0xb0>
80006140:	b0 89       	st.b	r8[0x0],r9
80006142:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80006146:	48 48       	lddpc	r8,80006154 <file_seek+0xac>
80006148:	91 36       	st.w	r8[0xc],r6
8000614a:	30 1c       	mov	r12,1
      break;
   }
   return true;
}
8000614c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006150:	80 00       	ld.sh	r0,r0[0x0]
80006152:	52 fc       	stdsp	sp[0xbc],r12
80006154:	00 00       	add	r0,r0
80006156:	17 70       	ld.ub	r0,--r11
80006158:	00 00       	add	r0,r0
8000615a:	1a 00       	add	r0,sp

8000615c <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
8000615c:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
8000615e:	f0 1f 00 0a 	mcall	80006184 <file_close+0x28>
80006162:	c1 00       	breq	80006182 <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
80006164:	48 98       	lddpc	r8,80006188 <file_close+0x2c>
80006166:	11 88       	ld.ub	r8,r8[0x0]
80006168:	e2 18 00 02 	andl	r8,0x2,COH
8000616c:	c0 80       	breq	8000617c <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
8000616e:	f0 1f 00 08 	mcall	8000618c <file_close+0x30>
80006172:	c0 80       	breq	80006182 <file_close+0x26>
            return;           // error
         fat_write_entry_file();
80006174:	f0 1f 00 07 	mcall	80006190 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80006178:	f0 1f 00 07 	mcall	80006194 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
8000617c:	30 09       	mov	r9,0
8000617e:	48 38       	lddpc	r8,80006188 <file_close+0x2c>
80006180:	b0 89       	st.b	r8[0x0],r9
80006182:	d8 02       	popm	pc
80006184:	80 00       	ld.sh	r0,r0[0x0]
80006186:	52 fc       	stdsp	sp[0xbc],r12
80006188:	00 00       	add	r0,r0
8000618a:	17 70       	ld.ub	r0,--r11
8000618c:	80 00       	ld.sh	r0,r0[0x0]
8000618e:	4f 50       	lddpc	r0,80006360 <file_getc+0x54>
80006190:	80 00       	ld.sh	r0,r0[0x0]
80006192:	47 00       	lddsp	r0,sp[0x1c0]
80006194:	80 00       	ld.sh	r0,r0[0x0]
80006196:	48 b4       	lddpc	r4,800061c0 <file_write_buf+0x28>

80006198 <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006198:	d4 31       	pushm	r0-r7,lr
8000619a:	20 1d       	sub	sp,4
8000619c:	18 95       	mov	r5,r12
8000619e:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
800061a0:	f0 1f 00 4f 	mcall	800062dc <file_write_buf+0x144>
800061a4:	e0 80 00 98 	breq	800062d4 <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
800061a8:	4c e8       	lddpc	r8,800062e0 <file_write_buf+0x148>
800061aa:	11 88       	ld.ub	r8,r8[0x0]
800061ac:	e2 18 00 02 	andl	r8,0x2,COH
800061b0:	c0 40       	breq	800061b8 <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800061b2:	58 06       	cp.w	r6,0
800061b4:	c0 71       	brne	800061c2 <file_write_buf+0x2a>
800061b6:	c8 f8       	rjmp	800062d4 <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
800061b8:	31 59       	mov	r9,21
800061ba:	4c b8       	lddpc	r8,800062e4 <file_write_buf+0x14c>
800061bc:	b0 89       	st.b	r8[0x0],r9
800061be:	30 00       	mov	r0,0
      return false;
800061c0:	c8 b8       	rjmp	800062d6 <file_write_buf+0x13e>
800061c2:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800061c4:	4c 74       	lddpc	r4,800062e0 <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
800061c6:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
800061ca:	4c 87       	lddpc	r7,800062e8 <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800061cc:	68 39       	ld.w	r9,r4[0xc]
800061ce:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
800061d2:	30 0b       	mov	r11,0
800061d4:	f6 02 19 00 	cp.h	r2,r11
800061d8:	5f 08       	sreq	r8
800061da:	ec 01 19 00 	cp.h	r1,r6
800061de:	f9 ba 03 01 	movlo	r10,1
800061e2:	f9 ba 02 00 	movhs	r10,0
800061e6:	f1 ea 00 0a 	and	r10,r8,r10
800061ea:	f6 0a 18 00 	cp.b	r10,r11
800061ee:	c3 10       	breq	80006250 <file_write_buf+0xb8>
800061f0:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
800061f4:	c2 e1       	brne	80006250 <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
800061f6:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
800061fa:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
800061fe:	06 9b       	mov	r11,r3
80006200:	30 1c       	mov	r12,1
80006202:	f0 1f 00 3b 	mcall	800062ec <file_write_buf+0x154>
80006206:	c6 70       	breq	800062d4 <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
80006208:	6e 18       	ld.w	r8,r7[0x4]
8000620a:	10 33       	cp.w	r3,r8
8000620c:	c0 62       	brcc	80006218 <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
8000620e:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80006210:	6e 18       	ld.w	r8,r7[0x4]
80006212:	58 08       	cp.w	r8,0
80006214:	c0 51       	brne	8000621e <file_write_buf+0x86>
80006216:	c1 98       	rjmp	80006248 <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
80006218:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
8000621c:	cf ab       	rjmp	80006210 <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
8000621e:	0a 9a       	mov	r10,r5
80006220:	6e 0b       	ld.w	r11,r7[0x0]
80006222:	4b 49       	lddpc	r9,800062f0 <file_write_buf+0x158>
80006224:	13 8c       	ld.ub	r12,r9[0x0]
80006226:	f0 1f 00 34 	mcall	800062f4 <file_write_buf+0x15c>
8000622a:	c0 50       	breq	80006234 <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
8000622c:	30 19       	mov	r9,1
8000622e:	4a e8       	lddpc	r8,800062e4 <file_write_buf+0x14c>
80006230:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
80006232:	c5 28       	rjmp	800062d6 <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
80006234:	6e 18       	ld.w	r8,r7[0x4]
80006236:	20 18       	sub	r8,1
80006238:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
8000623a:	6e 09       	ld.w	r9,r7[0x0]
8000623c:	2f f9       	sub	r9,-1
8000623e:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006240:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80006244:	58 08       	cp.w	r8,0
80006246:	ce c1       	brne	8000621e <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80006248:	e4 03 15 09 	lsl	r3,r2,0x9
8000624c:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
8000624e:	c3 08       	rjmp	800062ae <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80006250:	68 2a       	ld.w	r10,r4[0x8]
80006252:	14 39       	cp.w	r9,r10
80006254:	5f 09       	sreq	r9
80006256:	12 68       	and	r8,r9
80006258:	30 0b       	mov	r11,0
8000625a:	f6 08 18 00 	cp.b	r8,r11
8000625e:	c0 e0       	breq	8000627a <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
80006260:	30 1b       	mov	r11,1
80006262:	16 9c       	mov	r12,r11
80006264:	f0 1f 00 22 	mcall	800062ec <file_write_buf+0x154>
80006268:	c3 60       	breq	800062d4 <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
8000626a:	6e 09       	ld.w	r9,r7[0x0]
8000626c:	4a 38       	lddpc	r8,800062f8 <file_write_buf+0x160>
8000626e:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80006270:	30 0c       	mov	r12,0
80006272:	f0 1f 00 23 	mcall	800062fc <file_write_buf+0x164>
80006276:	c0 71       	brne	80006284 <file_write_buf+0xec>
80006278:	c2 e8       	rjmp	800062d4 <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000627a:	30 1b       	mov	r11,1
8000627c:	30 2c       	mov	r12,2
8000627e:	f0 1f 00 1c 	mcall	800062ec <file_write_buf+0x154>
80006282:	c2 90       	breq	800062d4 <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
80006284:	f0 1f 00 1f 	mcall	80006300 <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80006288:	e0 63 02 00 	mov	r3,512
8000628c:	04 13       	sub	r3,r2
8000628e:	ec 03 19 00 	cp.h	r3,r6
80006292:	ec 03 17 20 	movhs	r3,r6
80006296:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
80006298:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
8000629c:	50 09       	stdsp	sp[0x0],r9
8000629e:	12 9a       	mov	r10,r9
800062a0:	0a 9b       	mov	r11,r5
800062a2:	49 9c       	lddpc	r12,80006304 <file_write_buf+0x16c>
800062a4:	04 0c       	add	r12,r2
800062a6:	f0 1f 00 19 	mcall	80006308 <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
800062aa:	40 08       	lddsp	r8,sp[0x0]
800062ac:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
800062ae:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
800062b2:	68 38       	ld.w	r8,r4[0xc]
800062b4:	f2 08 00 08 	add	r8,r9,r8
800062b8:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
800062ba:	e6 00 00 00 	add	r0,r3,r0
800062be:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
800062c0:	06 16       	sub	r6,r3
800062c2:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
800062c4:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
800062c6:	12 38       	cp.w	r8,r9
800062c8:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800062cc:	58 06       	cp.w	r6,0
800062ce:	fe 91 ff 7f 	brne	800061cc <file_write_buf+0x34>
800062d2:	c0 28       	rjmp	800062d6 <file_write_buf+0x13e>
800062d4:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
800062d6:	00 9c       	mov	r12,r0
800062d8:	2f fd       	sub	sp,-4
800062da:	d8 32       	popm	r0-r7,pc
800062dc:	80 00       	ld.sh	r0,r0[0x0]
800062de:	52 fc       	stdsp	sp[0xbc],r12
800062e0:	00 00       	add	r0,r0
800062e2:	17 70       	ld.ub	r0,--r11
800062e4:	00 00       	add	r0,r0
800062e6:	1a 00       	add	r0,sp
800062e8:	00 00       	add	r0,r0
800062ea:	1a 58       	eor	r8,sp
800062ec:	80 00       	ld.sh	r0,r0[0x0]
800062ee:	50 b0       	stdsp	sp[0x2c],r0
800062f0:	00 00       	add	r0,r0
800062f2:	19 b0       	ld.ub	r0,r12[0x3]
800062f4:	80 00       	ld.sh	r0,r0[0x0]
800062f6:	73 18       	ld.w	r8,r9[0x44]
800062f8:	00 00       	add	r0,r0
800062fa:	17 6c       	ld.uh	r12,--r11
800062fc:	80 00       	ld.sh	r0,r0[0x0]
800062fe:	49 20       	lddpc	r0,80006344 <file_getc+0x38>
80006300:	80 00       	ld.sh	r0,r0[0x0]
80006302:	46 f0       	lddsp	r0,sp[0x1bc]
80006304:	00 00       	add	r0,r0
80006306:	17 b0       	ld.ub	r0,r11[0x3]
80006308:	80 00       	ld.sh	r0,r0[0x0]
8000630a:	c7 b2       	brcc	80006400 <file_read_buf+0x88>

8000630c <file_getc>:
//!
//! @return    The byte read
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
8000630c:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
8000630e:	49 78       	lddpc	r8,80006368 <file_getc+0x5c>
80006310:	11 88       	ld.ub	r8,r8[0x0]
80006312:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006316:	c0 51       	brne	80006320 <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80006318:	31 e9       	mov	r9,30
8000631a:	49 58       	lddpc	r8,8000636c <file_getc+0x60>
8000631c:	b0 89       	st.b	r8[0x0],r9
8000631e:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
80006320:	49 28       	lddpc	r8,80006368 <file_getc+0x5c>
80006322:	70 29       	ld.w	r9,r8[0x8]
80006324:	70 38       	ld.w	r8,r8[0xc]
80006326:	10 39       	cp.w	r9,r8
80006328:	e0 8b 00 06 	brhi	80006334 <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
8000632c:	32 09       	mov	r9,32
8000632e:	49 08       	lddpc	r8,8000636c <file_getc+0x60>
80006330:	b0 89       	st.b	r8[0x0],r9
80006332:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80006334:	30 2c       	mov	r12,2
80006336:	f0 1f 00 0f 	mcall	80006370 <file_getc+0x64>
8000633a:	c0 c1       	brne	80006352 <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
8000633c:	48 c8       	lddpc	r8,8000636c <file_getc+0x60>
8000633e:	11 89       	ld.ub	r9,r8[0x0]
80006340:	31 a8       	mov	r8,26
80006342:	f0 09 18 00 	cp.b	r9,r8
80006346:	c0 20       	breq	8000634a <file_getc+0x3e>
80006348:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
8000634a:	32 09       	mov	r9,32
8000634c:	48 88       	lddpc	r8,8000636c <file_getc+0x60>
8000634e:	b0 89       	st.b	r8[0x0],r9
80006350:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
80006352:	48 68       	lddpc	r8,80006368 <file_getc+0x5c>
80006354:	70 39       	ld.w	r9,r8[0xc]
80006356:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
8000635a:	48 7b       	lddpc	r11,80006374 <file_getc+0x68>
8000635c:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
80006360:	2f f9       	sub	r9,-1
80006362:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data read
}
80006364:	d8 02       	popm	pc
80006366:	00 00       	add	r0,r0
80006368:	00 00       	add	r0,r0
8000636a:	17 70       	ld.ub	r0,--r11
8000636c:	00 00       	add	r0,r0
8000636e:	1a 00       	add	r0,sp
80006370:	80 00       	ld.sh	r0,r0[0x0]
80006372:	4f d4       	lddpc	r4,80006564 <file_open+0x60>
80006374:	00 00       	add	r0,r0
80006376:	17 b0       	ld.ub	r0,r11[0x3]

80006378 <file_read_buf>:
//!
//! @return    number of byte read
//! @return    0, in case of error
//!
uint16_t   file_read_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006378:	d4 31       	pushm	r0-r7,lr
8000637a:	18 95       	mov	r5,r12
8000637c:	16 94       	mov	r4,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_read_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_read;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;
   _MEM_TYPE_FAST_ uint32_t u32_byte_remaining;

   if( !fat_check_mount_select_open())
8000637e:	f0 1f 00 58 	mcall	800064dc <file_read_buf+0x164>
80006382:	e0 80 00 aa 	breq	800064d6 <file_read_buf+0x15e>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80006386:	4d 78       	lddpc	r8,800064e0 <file_read_buf+0x168>
80006388:	11 88       	ld.ub	r8,r8[0x0]
8000638a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000638e:	c0 40       	breq	80006396 <file_read_buf+0x1e>
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
80006390:	58 04       	cp.w	r4,0
80006392:	c0 71       	brne	800063a0 <file_read_buf+0x28>
80006394:	ca 18       	rjmp	800064d6 <file_read_buf+0x15e>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
80006396:	31 e9       	mov	r9,30
80006398:	4d 38       	lddpc	r8,800064e4 <file_read_buf+0x16c>
8000639a:	b0 89       	st.b	r8[0x0],r9
8000639c:	30 00       	mov	r0,0
      return false;
8000639e:	c9 d8       	rjmp	800064d8 <file_read_buf+0x160>
800063a0:	30 00       	mov	r0,0
      if ( file_eof() )
      {
         fs_g_status = FS_ERR_EOF;
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
800063a2:	4d 03       	lddpc	r3,800064e0 <file_read_buf+0x168>
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
800063a4:	4d 17       	lddpc	r7,800064e8 <file_read_buf+0x170>

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
   {
      if ( file_eof() )
800063a6:	f0 1f 00 52 	mcall	800064ec <file_read_buf+0x174>
800063aa:	c0 50       	breq	800063b4 <file_read_buf+0x3c>
      {
         fs_g_status = FS_ERR_EOF;
800063ac:	32 09       	mov	r9,32
800063ae:	4c e8       	lddpc	r8,800064e4 <file_read_buf+0x16c>
800063b0:	b0 89       	st.b	r8[0x0],r9
         return u16_nb_read;     // End of the file
800063b2:	c9 38       	rjmp	800064d8 <file_read_buf+0x160>
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
800063b4:	66 31       	ld.w	r1,r3[0xc]
800063b6:	66 22       	ld.w	r2,r3[0x8]
800063b8:	02 12       	sub	r2,r1
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800063ba:	e3 d1 c0 09 	bfextu	r1,r1,0x0,0x9

      if( (0== u16_pos_in_sector)
800063be:	30 09       	mov	r9,0
800063c0:	f2 01 19 00 	cp.h	r1,r9
800063c4:	5f 09       	sreq	r9
800063c6:	e0 42 01 ff 	cp.w	r2,511
800063ca:	f9 b8 0b 01 	movhi	r8,1
800063ce:	f9 b8 08 00 	movls	r8,0
800063d2:	f3 e8 00 08 	and	r8,r9,r8
800063d6:	30 09       	mov	r9,0
800063d8:	f2 08 18 00 	cp.b	r8,r9
800063dc:	c4 90       	breq	8000646e <file_read_buf+0xf6>
800063de:	e0 68 01 ff 	mov	r8,511
800063e2:	f0 04 19 00 	cp.h	r4,r8
800063e6:	e0 88 00 44 	brls	8000646e <file_read_buf+0xf6>
800063ea:	f1 d5 c0 02 	bfextu	r8,r5,0x0,0x2
800063ee:	c4 01       	brne	8000646e <file_read_buf+0xf6>
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
800063f0:	08 98       	mov	r8,r4
800063f2:	5c 78       	castu.h	r8
800063f4:	10 32       	cp.w	r2,r8
800063f6:	c0 43       	brcs	800063fe <file_read_buf+0x86>
800063f8:	08 96       	mov	r6,r4
800063fa:	5c 86       	casts.h	r6
800063fc:	c0 38       	rjmp	80006402 <file_read_buf+0x8a>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
800063fe:	ed d2 b0 10 	bfexts	r6,r2,0x0,0x10
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size

         // Get following sector segment of file
         if( !fat_read_file(FS_CLUST_ACT_SEG))
80006402:	30 1c       	mov	r12,1
80006404:	f0 1f 00 3b 	mcall	800064f0 <file_read_buf+0x178>
80006408:	c0 b1       	brne	8000641e <file_read_buf+0xa6>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000640a:	4b 78       	lddpc	r8,800064e4 <file_read_buf+0x16c>
8000640c:	11 89       	ld.ub	r9,r8[0x0]
8000640e:	31 a8       	mov	r8,26
80006410:	f0 09 18 00 	cp.b	r9,r8
80006414:	c6 21       	brne	800064d8 <file_read_buf+0x160>
               fs_g_status = FS_ERR_EOF;  // translate the error
80006416:	32 09       	mov	r9,32
80006418:	4b 38       	lddpc	r8,800064e4 <file_read_buf+0x16c>
8000641a:	b0 89       	st.b	r8[0x0],r9
8000641c:	c5 e8       	rjmp	800064d8 <file_read_buf+0x160>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size
8000641e:	ed d6 c1 27 	bfextu	r6,r6,0x9,0x7
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
80006422:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
80006426:	6e 19       	ld.w	r9,r7[0x4]
80006428:	12 38       	cp.w	r8,r9
8000642a:	e0 88 00 08 	brls	8000643a <file_read_buf+0xc2>
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
8000642e:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
80006432:	6e 18       	ld.w	r8,r7[0x4]
80006434:	58 08       	cp.w	r8,0
80006436:	c0 41       	brne	8000643e <file_read_buf+0xc6>
80006438:	c1 88       	rjmp	80006468 <file_read_buf+0xf0>
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
8000643a:	8f 18       	st.w	r7[0x4],r8
8000643c:	cf bb       	rjmp	80006432 <file_read_buf+0xba>
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
8000643e:	0a 9a       	mov	r10,r5
80006440:	6e 0b       	ld.w	r11,r7[0x0]
80006442:	4a d8       	lddpc	r8,800064f4 <file_read_buf+0x17c>
80006444:	11 8c       	ld.ub	r12,r8[0x0]
80006446:	f0 1f 00 2d 	mcall	800064f8 <file_read_buf+0x180>
8000644a:	c0 50       	breq	80006454 <file_read_buf+0xdc>
            {
               fs_g_status = FS_ERR_HW;
8000644c:	30 19       	mov	r9,1
8000644e:	4a 68       	lddpc	r8,800064e4 <file_read_buf+0x16c>
80006450:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_read;
80006452:	c4 38       	rjmp	800064d8 <file_read_buf+0x160>
            }
            fs_g_seg.u32_size_or_pos--;
80006454:	6e 18       	ld.w	r8,r7[0x4]
80006456:	20 18       	sub	r8,1
80006458:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
8000645a:	6e 09       	ld.w	r9,r7[0x0]
8000645c:	2f f9       	sub	r9,-1
8000645e:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006460:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
80006464:	58 08       	cp.w	r8,0
80006466:	ce c1       	brne	8000643e <file_read_buf+0xc6>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_read_tmp *= FS_512B;
80006468:	a9 76       	lsl	r6,0x9
8000646a:	5c 86       	casts.h	r6
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
8000646c:	c2 78       	rjmp	800064ba <file_read_buf+0x142>
      else
      {
         // The file data can't been directly transfer from memory to buffer, the internal cache must be used

         // Transfer data from memory to internal cache
         if( !fat_read_file( FS_CLUST_ACT_ONE ))
8000646e:	30 2c       	mov	r12,2
80006470:	f0 1f 00 20 	mcall	800064f0 <file_read_buf+0x178>
80006474:	c0 b1       	brne	8000648a <file_read_buf+0x112>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80006476:	49 c8       	lddpc	r8,800064e4 <file_read_buf+0x16c>
80006478:	11 89       	ld.ub	r9,r8[0x0]
8000647a:	31 a8       	mov	r8,26
8000647c:	f0 09 18 00 	cp.b	r9,r8
80006480:	c2 c1       	brne	800064d8 <file_read_buf+0x160>
            {  // Translate the error
               fs_g_status = FS_ERR_EOF;   // End of file
80006482:	32 09       	mov	r9,32
80006484:	49 88       	lddpc	r8,800064e4 <file_read_buf+0x16c>
80006486:	b0 89       	st.b	r8[0x0],r9
80006488:	c2 88       	rjmp	800064d8 <file_read_buf+0x160>
            }
            return u16_nb_read;
         }

         // Compute the number of data to transfer
         u16_nb_read_tmp = FS_512B - u16_pos_in_sector;  // The number is limited at sector size
8000648a:	e0 66 02 00 	mov	r6,512
8000648e:	02 16       	sub	r6,r1
80006490:	5c 86       	casts.h	r6
         if( u16_nb_read_tmp > u32_byte_remaining )
80006492:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
80006496:	10 32       	cp.w	r2,r8
80006498:	c0 32       	brcc	8000649e <file_read_buf+0x126>
            u16_nb_read_tmp = u32_byte_remaining;
8000649a:	ed d2 b0 10 	bfexts	r6,r2,0x0,0x10
8000649e:	ec 04 19 00 	cp.h	r4,r6
800064a2:	e8 06 17 30 	movlo	r6,r4
800064a6:	5c 86       	casts.h	r6
         if( u16_nb_read_tmp > u16_buf_size )
            u16_nb_read_tmp = u16_buf_size;

         // Transfer data from internal cache to buffer
         memcpy_ram2ram( buffer , &fs_g_sector[ u16_pos_in_sector ], u16_nb_read_tmp );
800064a8:	e5 d6 c0 10 	bfextu	r2,r6,0x0,0x10
800064ac:	04 9a       	mov	r10,r2
800064ae:	49 4b       	lddpc	r11,800064fc <file_read_buf+0x184>
800064b0:	02 0b       	add	r11,r1
800064b2:	0a 9c       	mov	r12,r5
800064b4:	f0 1f 00 13 	mcall	80006500 <file_read_buf+0x188>
         buffer += u16_nb_read_tmp;
800064b8:	04 05       	add	r5,r2
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
800064ba:	f3 d6 c0 10 	bfextu	r9,r6,0x0,0x10
800064be:	66 38       	ld.w	r8,r3[0xc]
800064c0:	f2 08 00 08 	add	r8,r9,r8
800064c4:	87 38       	st.w	r3[0xc],r8
      u16_nb_read                      += u16_nb_read_tmp;
800064c6:	ec 00 00 00 	add	r0,r6,r0
800064ca:	5c 80       	casts.h	r0
      u16_buf_size                     -= u16_nb_read_tmp;
800064cc:	0c 14       	sub	r4,r6
800064ce:	5c 84       	casts.h	r4
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
800064d0:	fe 91 ff 6b 	brne	800063a6 <file_read_buf+0x2e>
800064d4:	c0 28       	rjmp	800064d8 <file_read_buf+0x160>
800064d6:	30 00       	mov	r0,0
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
      u16_nb_read                      += u16_nb_read_tmp;
      u16_buf_size                     -= u16_nb_read_tmp;
   }
   return u16_nb_read;  // Buffer is full
}
800064d8:	00 9c       	mov	r12,r0
800064da:	d8 32       	popm	r0-r7,pc
800064dc:	80 00       	ld.sh	r0,r0[0x0]
800064de:	52 fc       	stdsp	sp[0xbc],r12
800064e0:	00 00       	add	r0,r0
800064e2:	17 70       	ld.ub	r0,--r11
800064e4:	00 00       	add	r0,r0
800064e6:	1a 00       	add	r0,sp
800064e8:	00 00       	add	r0,r0
800064ea:	1a 58       	eor	r8,sp
800064ec:	80 00       	ld.sh	r0,r0[0x0]
800064ee:	60 80       	ld.w	r0,r0[0x20]
800064f0:	80 00       	ld.sh	r0,r0[0x0]
800064f2:	4f d4       	lddpc	r4,800066e4 <nav_filelist_set+0x30>
800064f4:	00 00       	add	r0,r0
800064f6:	19 b0       	ld.ub	r0,r12[0x3]
800064f8:	80 00       	ld.sh	r0,r0[0x0]
800064fa:	72 fc       	ld.w	r12,r9[0x3c]
800064fc:	00 00       	add	r0,r0
800064fe:	17 b0       	ld.ub	r0,r11[0x3]
80006500:	80 00       	ld.sh	r0,r0[0x0]
80006502:	c7 b2       	brcc	800065f8 <nav_file_name+0x28>

80006504 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
80006504:	eb cd 40 c0 	pushm	r6-r7,lr
80006508:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
8000650a:	f0 1f 00 20 	mcall	80006588 <file_open+0x84>
8000650e:	c3 a0       	breq	80006582 <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
80006510:	f0 1f 00 1f 	mcall	8000658c <file_open+0x88>
80006514:	c3 70       	breq	80006582 <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
80006516:	0e 96       	mov	r6,r7
80006518:	0e 98       	mov	r8,r7
8000651a:	e2 18 00 02 	andl	r8,0x2,COH
8000651e:	c1 90       	breq	80006550 <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80006520:	30 1c       	mov	r12,1
80006522:	f0 1f 00 1c 	mcall	80006590 <file_open+0x8c>
80006526:	c2 e0       	breq	80006582 <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80006528:	49 b8       	lddpc	r8,80006594 <file_open+0x90>
8000652a:	11 a8       	ld.ub	r8,r8[0x2]
8000652c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006530:	c0 60       	breq	8000653c <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80006532:	31 59       	mov	r9,21
80006534:	49 98       	lddpc	r8,80006598 <file_open+0x94>
80006536:	b0 89       	st.b	r8[0x0],r9
80006538:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000653c:	49 88       	lddpc	r8,8000659c <file_open+0x98>
8000653e:	11 8c       	ld.ub	r12,r8[0x0]
80006540:	f0 1f 00 18 	mcall	800065a0 <file_open+0x9c>
80006544:	c0 a0       	breq	80006558 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006546:	31 49       	mov	r9,20
80006548:	49 48       	lddpc	r8,80006598 <file_open+0x94>
8000654a:	b0 89       	st.b	r8[0x0],r9
8000654c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80006550:	30 0c       	mov	r12,0
80006552:	f0 1f 00 10 	mcall	80006590 <file_open+0x8c>
80006556:	c1 60       	breq	80006582 <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006558:	0c 98       	mov	r8,r6
8000655a:	e2 18 00 04 	andl	r8,0x4,COH
8000655e:	c0 40       	breq	80006566 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80006560:	30 09       	mov	r9,0
80006562:	48 d8       	lddpc	r8,80006594 <file_open+0x90>
80006564:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80006566:	e2 16 00 08 	andl	r6,0x8,COH
8000656a:	c0 50       	breq	80006574 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000656c:	30 09       	mov	r9,0
8000656e:	48 a8       	lddpc	r8,80006594 <file_open+0x90>
80006570:	91 39       	st.w	r8[0xc],r9
80006572:	c0 48       	rjmp	8000657a <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80006574:	48 88       	lddpc	r8,80006594 <file_open+0x90>
80006576:	70 29       	ld.w	r9,r8[0x8]
80006578:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000657a:	48 78       	lddpc	r8,80006594 <file_open+0x90>
8000657c:	b0 87       	st.b	r8[0x0],r7
8000657e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80006582:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006586:	00 00       	add	r0,r0
80006588:	80 00       	ld.sh	r0,r0[0x0]
8000658a:	53 20       	stdsp	sp[0xc8],r0
8000658c:	80 00       	ld.sh	r0,r0[0x0]
8000658e:	40 3c       	lddsp	r12,sp[0xc]
80006590:	80 00       	ld.sh	r0,r0[0x0]
80006592:	47 50       	lddsp	r0,sp[0x1d4]
80006594:	00 00       	add	r0,r0
80006596:	17 70       	ld.ub	r0,--r11
80006598:	00 00       	add	r0,r0
8000659a:	1a 00       	add	r0,sp
8000659c:	00 00       	add	r0,r0
8000659e:	19 b0       	ld.ub	r0,r12[0x3]
800065a0:	80 00       	ld.sh	r0,r0[0x0]
800065a2:	72 e8       	ld.w	r8,r9[0x38]

800065a4 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
800065a4:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
800065a6:	48 69       	lddpc	r9,800065bc <nav_getindex+0x18>
800065a8:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
800065aa:	48 6a       	lddpc	r10,800065c0 <nav_getindex+0x1c>
800065ac:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
800065ae:	13 89       	ld.ub	r9,r9[0x0]
800065b0:	b8 89       	st.b	r12[0x0],r9
800065b2:	99 1b       	st.w	r12[0x4],r11
800065b4:	b8 4a       	st.h	r12[0x8],r10
}
800065b6:	2f dd       	sub	sp,-12
800065b8:	5e fc       	retal	r12
800065ba:	00 00       	add	r0,r0
800065bc:	00 00       	add	r0,r0
800065be:	19 b0       	ld.ub	r0,r12[0x3]
800065c0:	00 00       	add	r0,r0
800065c2:	19 fc       	ld.ub	r12,r12[0x7]

800065c4 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
800065c4:	d4 01       	pushm	lr
   return fat_entry_is_dir();
800065c6:	f0 1f 00 02 	mcall	800065cc <nav_file_isdir+0x8>
}
800065ca:	d8 02       	popm	pc
800065cc:	80 00       	ld.sh	r0,r0[0x0]
800065ce:	43 04       	lddsp	r4,sp[0xc0]

800065d0 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
800065d0:	d4 31       	pushm	r0-r7,lr
800065d2:	20 1d       	sub	sp,4
800065d4:	18 95       	mov	r5,r12
800065d6:	16 96       	mov	r6,r11
800065d8:	14 97       	mov	r7,r10
800065da:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
800065dc:	f0 1f 00 2f 	mcall	80006698 <nav_file_name+0xc8>
800065e0:	c5 80       	breq	80006690 <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
800065e2:	58 07       	cp.w	r7,0
800065e4:	c0 50       	breq	800065ee <nav_file_name+0x1e>
800065e6:	58 06       	cp.w	r6,0
800065e8:	c0 31       	brne	800065ee <nav_file_name+0x1e>
800065ea:	30 1c       	mov	r12,1
800065ec:	c5 38       	rjmp	80006692 <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
800065ee:	4a c8       	lddpc	r8,8000669c <nav_file_name+0xcc>
800065f0:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800065f2:	58 04       	cp.w	r4,0
800065f4:	c0 31       	brne	800065fa <nav_file_name+0x2a>
800065f6:	30 10       	mov	r0,1
800065f8:	c0 68       	rjmp	80006604 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800065fa:	08 99       	mov	r9,r4
800065fc:	20 19       	sub	r9,1
800065fe:	4a 88       	lddpc	r8,8000669c <nav_file_name+0xcc>
80006600:	b0 19       	st.h	r8[0x2],r9
80006602:	30 00       	mov	r0,0
80006604:	30 09       	mov	r9,0
80006606:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006608:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
8000660a:	4a 52       	lddpc	r2,8000669c <nav_file_name+0xcc>
8000660c:	c0 28       	rjmp	80006610 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000660e:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80006610:	f0 1f 00 24 	mcall	800066a0 <nav_file_name+0xd0>
80006614:	c3 e0       	breq	80006690 <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
80006616:	58 00       	cp.w	r0,0
80006618:	c0 70       	breq	80006626 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
8000661a:	0e 9a       	mov	r10,r7
8000661c:	0c 9b       	mov	r11,r6
8000661e:	0a 9c       	mov	r12,r5
80006620:	f0 1f 00 21 	mcall	800066a4 <nav_file_name+0xd4>
80006624:	c3 78       	rjmp	80006692 <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80006626:	06 99       	mov	r9,r3
80006628:	0e 9a       	mov	r10,r7
8000662a:	0c 9b       	mov	r11,r6
8000662c:	0a 9c       	mov	r12,r5
8000662e:	f0 1f 00 1f 	mcall	800066a8 <nav_file_name+0xd8>
80006632:	c1 20       	breq	80006656 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80006634:	49 e8       	lddpc	r8,800066ac <nav_file_name+0xdc>
80006636:	11 89       	ld.ub	r9,r8[0x0]
80006638:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000663a:	f0 09 18 00 	cp.b	r9,r8
8000663e:	eb f8 12 00 	ld.shne	r8,r5[0x0]
80006642:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80006646:	f1 d9 e1 08 	addne	r8,r8,r9
8000664a:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000664e:	49 48       	lddpc	r8,8000669c <nav_file_name+0xcc>
80006650:	b0 14       	st.h	r8[0x2],r4
80006652:	30 1c       	mov	r12,1
         return true;
80006654:	c1 f8       	rjmp	80006692 <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006656:	49 79       	lddpc	r9,800066b0 <nav_file_name+0xe0>
80006658:	13 88       	ld.ub	r8,r9[0x0]
8000665a:	e2 08 18 00 	cp.b	r8,r1
8000665e:	c0 70       	breq	8000666c <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80006660:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80006662:	30 b9       	mov	r9,11
80006664:	f2 08 18 00 	cp.b	r8,r9
80006668:	c1 41       	brne	80006690 <nav_file_name+0xc0>
8000666a:	cd 2b       	rjmp	8000660e <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000666c:	49 09       	lddpc	r9,800066ac <nav_file_name+0xdc>
8000666e:	13 88       	ld.ub	r8,r9[0x0]
80006670:	30 09       	mov	r9,0
80006672:	f2 08 18 00 	cp.b	r8,r9
80006676:	c0 60       	breq	80006682 <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80006678:	40 08       	lddsp	r8,sp[0x0]
8000667a:	2f 38       	sub	r8,-13
8000667c:	5c 88       	casts.h	r8
8000667e:	50 08       	stdsp	sp[0x0],r8
80006680:	c0 48       	rjmp	80006688 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80006682:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80006684:	20 d6       	sub	r6,13
80006686:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006688:	84 18       	ld.sh	r8,r2[0x2]
8000668a:	20 18       	sub	r8,1
8000668c:	a4 18       	st.h	r2[0x2],r8
8000668e:	cc 1b       	rjmp	80006610 <nav_file_name+0x40>
80006690:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
80006692:	2f fd       	sub	sp,-4
80006694:	d8 32       	popm	r0-r7,pc
80006696:	00 00       	add	r0,r0
80006698:	80 00       	ld.sh	r0,r0[0x0]
8000669a:	52 e4       	stdsp	sp[0xb8],r4
8000669c:	00 00       	add	r0,r0
8000669e:	19 fc       	ld.ub	r12,r12[0x7]
800066a0:	80 00       	ld.sh	r0,r0[0x0]
800066a2:	4f 50       	lddpc	r0,80006874 <nav_file_create+0x10>
800066a4:	80 00       	ld.sh	r0,r0[0x0]
800066a6:	45 2c       	lddsp	r12,sp[0x148]
800066a8:	80 00       	ld.sh	r0,r0[0x0]
800066aa:	43 98       	lddsp	r8,sp[0xe4]
800066ac:	00 00       	add	r0,r0
800066ae:	1a 01       	add	r1,sp
800066b0:	00 00       	add	r0,r0
800066b2:	1a 00       	add	r0,sp

800066b4 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
800066b4:	d4 31       	pushm	r0-r7,lr
800066b6:	20 4d       	sub	sp,16
800066b8:	50 0c       	stdsp	sp[0x0],r12
800066ba:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
800066bc:	f0 1f 00 51 	mcall	80006800 <nav_filelist_set+0x14c>
800066c0:	e0 80 00 9e 	breq	800067fc <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
800066c4:	4d 08       	lddpc	r8,80006804 <nav_filelist_set+0x150>
800066c6:	90 18       	ld.sh	r8,r8[0x2]
800066c8:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
800066ca:	4d 08       	lddpc	r8,80006808 <nav_filelist_set+0x154>
800066cc:	f1 0a 00 24 	ld.sh	r10,r8[36]
800066d0:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800066d2:	f1 38 00 2c 	ld.ub	r8,r8[44]
800066d6:	50 38       	stdsp	sp[0xc],r8
800066d8:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800066da:	4c b7       	lddpc	r7,80006804 <nav_filelist_set+0x150>
800066dc:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800066de:	4c b6       	lddpc	r6,80006808 <nav_filelist_set+0x154>
800066e0:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800066e2:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800066e4:	4c a5       	lddpc	r5,8000680c <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800066e6:	58 02       	cp.w	r2,0
800066e8:	c0 31       	brne	800066ee <nav_filelist_set+0x3a>
800066ea:	58 03       	cp.w	r3,0
800066ec:	c0 c0       	breq	80006704 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800066ee:	8e 18       	ld.sh	r8,r7[0x2]
800066f0:	e2 08 19 00 	cp.h	r8,r1
800066f4:	c0 51       	brne	800066fe <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
800066f6:	30 89       	mov	r9,8
800066f8:	4c 58       	lddpc	r8,8000680c <nav_filelist_set+0x158>
800066fa:	b0 89       	st.b	r8[0x0],r9
            break;
800066fc:	c7 38       	rjmp	800067e2 <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800066fe:	2f f8       	sub	r8,-1
80006700:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80006702:	c1 d8       	rjmp	8000673c <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80006704:	8e 18       	ld.sh	r8,r7[0x2]
80006706:	e0 08 19 00 	cp.h	r8,r0
8000670a:	c0 51       	brne	80006714 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
8000670c:	30 99       	mov	r9,9
8000670e:	4c 08       	lddpc	r8,8000680c <nav_filelist_set+0x158>
80006710:	b0 89       	st.b	r8[0x0],r9
            break;
80006712:	c6 88       	rjmp	800067e2 <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80006714:	58 08       	cp.w	r8,0
80006716:	c1 11       	brne	80006738 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80006718:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000671c:	e8 08 18 00 	cp.b	r8,r4
80006720:	c0 80       	breq	80006730 <nav_filelist_set+0x7c>
80006722:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006726:	e8 08 18 00 	cp.b	r8,r4
8000672a:	c0 31       	brne	80006730 <nav_filelist_set+0x7c>
8000672c:	30 13       	mov	r3,1
8000672e:	c0 78       	rjmp	8000673c <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80006730:	30 99       	mov	r9,9
80006732:	4b 78       	lddpc	r8,8000680c <nav_filelist_set+0x158>
80006734:	b0 89       	st.b	r8[0x0],r9
               break;
80006736:	c5 68       	rjmp	800067e2 <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006738:	20 18       	sub	r8,1
8000673a:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
8000673c:	f0 1f 00 35 	mcall	80006810 <nav_filelist_set+0x15c>
80006740:	c0 71       	brne	8000674e <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006742:	0b 89       	ld.ub	r9,r5[0x0]
80006744:	31 a8       	mov	r8,26
80006746:	f0 09 18 00 	cp.b	r9,r8
8000674a:	c3 20       	breq	800067ae <nav_filelist_set+0xfa>
8000674c:	c4 b8       	rjmp	800067e2 <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000674e:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006752:	e8 08 18 00 	cp.b	r8,r4
80006756:	5f 1c       	srne	r12
80006758:	f0 1f 00 2f 	mcall	80006814 <nav_filelist_set+0x160>
8000675c:	c1 c0       	breq	80006794 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000675e:	58 03       	cp.w	r3,0
80006760:	cc 31       	brne	800066e6 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80006762:	58 02       	cp.w	r2,0
80006764:	ed f8 12 12 	ld.shne	r8,r6[0x24]
80006768:	f7 b8 01 ff 	subne	r8,-1
8000676c:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
80006770:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
80006774:	f7 b8 00 01 	subeq	r8,1
80006778:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
8000677c:	40 09       	lddsp	r9,sp[0x0]
8000677e:	58 09       	cp.w	r9,0
80006780:	c0 51       	brne	8000678a <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80006782:	f0 1f 00 26 	mcall	80006818 <nav_filelist_set+0x164>
80006786:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80006788:	c3 a8       	rjmp	800067fc <nav_filelist_set+0x148>
           }
           u16_nb--;
8000678a:	40 08       	lddsp	r8,sp[0x0]
8000678c:	20 18       	sub	r8,1
8000678e:	5c 88       	casts.h	r8
80006790:	50 08       	stdsp	sp[0x0],r8
           continue;
80006792:	ca ab       	rjmp	800066e6 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80006794:	0b 88       	ld.ub	r8,r5[0x0]
80006796:	30 a9       	mov	r9,10
80006798:	f2 08 18 00 	cp.b	r8,r9
8000679c:	5f 09       	sreq	r9
8000679e:	31 aa       	mov	r10,26
800067a0:	f4 08 18 00 	cp.b	r8,r10
800067a4:	5f 08       	sreq	r8
800067a6:	10 49       	or	r9,r8
800067a8:	e8 09 18 00 	cp.b	r9,r4
800067ac:	c9 d0       	breq	800066e6 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
800067ae:	58 03       	cp.w	r3,0
800067b0:	c0 50       	breq	800067ba <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
800067b2:	ed 64 00 2c 	st.b	r6[44],r4
800067b6:	30 03       	mov	r3,0
            continue;
800067b8:	c9 7b       	rjmp	800066e6 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
800067ba:	ed 38 00 2c 	ld.ub	r8,r6[44]
800067be:	30 1a       	mov	r10,1
800067c0:	f4 08 18 00 	cp.b	r8,r10
800067c4:	c0 60       	breq	800067d0 <nav_filelist_set+0x11c>
800067c6:	ed 38 00 2d 	ld.ub	r8,r6[45]
800067ca:	e8 08 18 00 	cp.b	r8,r4
800067ce:	c0 50       	breq	800067d8 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800067d0:	30 99       	mov	r9,9
800067d2:	48 f8       	lddpc	r8,8000680c <nav_filelist_set+0x158>
800067d4:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
800067d6:	c0 68       	rjmp	800067e2 <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800067d8:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
800067da:	30 19       	mov	r9,1
800067dc:	ed 69 00 2c 	st.b	r6[44],r9
800067e0:	c8 3b       	rjmp	800066e6 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
800067e2:	48 a8       	lddpc	r8,80006808 <nav_filelist_set+0x154>
800067e4:	40 3a       	lddsp	r10,sp[0xc]
800067e6:	58 0a       	cp.w	r10,0
800067e8:	5f 19       	srne	r9
800067ea:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
800067ee:	48 69       	lddpc	r9,80006804 <nav_filelist_set+0x150>
800067f0:	40 2a       	lddsp	r10,sp[0x8]
800067f2:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
800067f4:	40 19       	lddsp	r9,sp[0x4]
800067f6:	f1 59 00 24 	st.h	r8[36],r9
800067fa:	30 0c       	mov	r12,0
   return false;
}
800067fc:	2f cd       	sub	sp,-16
800067fe:	d8 32       	popm	r0-r7,pc
80006800:	80 00       	ld.sh	r0,r0[0x0]
80006802:	53 44       	stdsp	sp[0xd0],r4
80006804:	00 00       	add	r0,r0
80006806:	19 fc       	ld.ub	r12,r12[0x7]
80006808:	00 00       	add	r0,r0
8000680a:	19 b0       	ld.ub	r0,r12[0x3]
8000680c:	00 00       	add	r0,r0
8000680e:	1a 00       	add	r0,sp
80006810:	80 00       	ld.sh	r0,r0[0x0]
80006812:	4f 50       	lddpc	r0,800069e4 <nav_file_del+0x34>
80006814:	80 00       	ld.sh	r0,r0[0x0]
80006816:	46 7c       	lddsp	r12,sp[0x19c]
80006818:	80 00       	ld.sh	r0,r0[0x0]
8000681a:	46 34       	lddsp	r4,sp[0x18c]

8000681c <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
8000681c:	d4 21       	pushm	r4-r7,lr
8000681e:	18 95       	mov	r5,r12
80006820:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80006822:	30 16       	mov	r6,1
80006824:	30 07       	mov	r7,0
80006826:	0c 9b       	mov	r11,r6
80006828:	0e 9c       	mov	r12,r7
8000682a:	f0 1f 00 07 	mcall	80006844 <nav_filelist_findname+0x28>
8000682e:	c0 90       	breq	80006840 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80006830:	08 99       	mov	r9,r4
80006832:	0e 9a       	mov	r10,r7
80006834:	0e 9b       	mov	r11,r7
80006836:	0a 9c       	mov	r12,r5
80006838:	f0 1f 00 04 	mcall	80006848 <nav_filelist_findname+0x2c>
8000683c:	cf 50       	breq	80006826 <nav_filelist_findname+0xa>
8000683e:	30 1c       	mov	r12,1
         return true;
   }
}
80006840:	d8 22       	popm	r4-r7,pc
80006842:	00 00       	add	r0,r0
80006844:	80 00       	ld.sh	r0,r0[0x0]
80006846:	66 b4       	ld.w	r4,r3[0x2c]
80006848:	80 00       	ld.sh	r0,r0[0x0]
8000684a:	65 d0       	ld.w	r0,r2[0x74]

8000684c <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
8000684c:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
8000684e:	f0 1f 00 04 	mcall	8000685c <nav_filelist_reset+0x10>
80006852:	c0 40       	breq	8000685a <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80006854:	f0 1f 00 03 	mcall	80006860 <nav_filelist_reset+0x14>
80006858:	30 1c       	mov	r12,1
   return true;
}
8000685a:	d8 02       	popm	pc
8000685c:	80 00       	ld.sh	r0,r0[0x0]
8000685e:	53 44       	stdsp	sp[0xd0],r4
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	43 1c       	lddsp	r12,sp[0xc4]

80006864 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80006864:	eb cd 40 80 	pushm	r7,lr
80006868:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000686a:	f0 1f 00 13 	mcall	800068b4 <nav_file_create+0x50>
8000686e:	c2 10       	breq	800068b0 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
80006870:	30 0b       	mov	r11,0
80006872:	0e 9c       	mov	r12,r7
80006874:	f0 1f 00 11 	mcall	800068b8 <nav_file_create+0x54>
80006878:	c0 60       	breq	80006884 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000687a:	32 a9       	mov	r9,42
8000687c:	49 08       	lddpc	r8,800068bc <nav_file_create+0x58>
8000687e:	b0 89       	st.b	r8[0x0],r9
80006880:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
80006884:	0e 9c       	mov	r12,r7
80006886:	f0 1f 00 0f 	mcall	800068c0 <nav_file_create+0x5c>
8000688a:	c1 30       	breq	800068b0 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000688c:	48 e8       	lddpc	r8,800068c4 <nav_file_create+0x60>
8000688e:	30 09       	mov	r9,0
80006890:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
80006892:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
80006894:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80006896:	48 d8       	lddpc	r8,800068c8 <nav_file_create+0x64>
80006898:	f1 09 00 24 	ld.sh	r9,r8[36]
8000689c:	2f f9       	sub	r9,-1
8000689e:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
800068a2:	30 19       	mov	r9,1
800068a4:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
800068a8:	f0 1f 00 09 	mcall	800068cc <nav_file_create+0x68>
800068ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800068b0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800068b4:	80 00       	ld.sh	r0,r0[0x0]
800068b6:	68 4c       	ld.w	r12,r4[0x10]
800068b8:	80 00       	ld.sh	r0,r0[0x0]
800068ba:	68 1c       	ld.w	r12,r4[0x4]
800068bc:	00 00       	add	r0,r0
800068be:	1a 00       	add	r0,sp
800068c0:	80 00       	ld.sh	r0,r0[0x0]
800068c2:	5c dc       	com	r12
800068c4:	00 00       	add	r0,r0
800068c6:	17 70       	ld.ub	r0,--r11
800068c8:	00 00       	add	r0,r0
800068ca:	19 b0       	ld.ub	r0,r12[0x3]
800068cc:	80 00       	ld.sh	r0,r0[0x0]
800068ce:	48 b4       	lddpc	r4,800068f8 <nav_dir_gotoparent+0x28>

800068d0 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
800068d0:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800068d2:	f0 1f 00 1f 	mcall	8000694c <nav_dir_gotoparent+0x7c>
800068d6:	c3 80       	breq	80006946 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800068d8:	49 e8       	lddpc	r8,80006950 <nav_dir_gotoparent+0x80>
800068da:	70 88       	ld.w	r8,r8[0x20]
800068dc:	58 08       	cp.w	r8,0
800068de:	c0 51       	brne	800068e8 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800068e0:	31 99       	mov	r9,25
800068e2:	49 d8       	lddpc	r8,80006954 <nav_dir_gotoparent+0x84>
800068e4:	b0 89       	st.b	r8[0x0],r9
800068e6:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800068e8:	30 19       	mov	r9,1
800068ea:	49 c8       	lddpc	r8,80006958 <nav_dir_gotoparent+0x88>
800068ec:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
800068ee:	f0 1f 00 1c 	mcall	8000695c <nav_dir_gotoparent+0x8c>
800068f2:	c2 a0       	breq	80006946 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
800068f4:	f0 1f 00 1b 	mcall	80006960 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
800068f8:	49 68       	lddpc	r8,80006950 <nav_dir_gotoparent+0x80>
800068fa:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800068fc:	49 a9       	lddpc	r9,80006964 <nav_dir_gotoparent+0x94>
800068fe:	72 19       	ld.w	r9,r9[0x4]
80006900:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
80006902:	f0 1f 00 1a 	mcall	80006968 <nav_dir_gotoparent+0x98>
80006906:	c2 00       	breq	80006946 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80006908:	49 28       	lddpc	r8,80006950 <nav_dir_gotoparent+0x80>
8000690a:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000690e:	30 08       	mov	r8,0
80006910:	f0 09 18 00 	cp.b	r9,r8
80006914:	c0 d0       	breq	8000692e <nav_dir_gotoparent+0x5e>
80006916:	48 f8       	lddpc	r8,80006950 <nav_dir_gotoparent+0x80>
80006918:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000691c:	30 08       	mov	r8,0
8000691e:	f0 09 18 00 	cp.b	r9,r8
80006922:	c0 60       	breq	8000692e <nav_dir_gotoparent+0x5e>
80006924:	c1 28       	rjmp	80006948 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006926:	6c 18       	ld.w	r8,r6[0x4]
80006928:	0e 38       	cp.w	r8,r7
8000692a:	c0 51       	brne	80006934 <nav_dir_gotoparent+0x64>
8000692c:	c0 e8       	rjmp	80006948 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000692e:	30 15       	mov	r5,1
80006930:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006932:	48 d6       	lddpc	r6,80006964 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006934:	0a 9b       	mov	r11,r5
80006936:	08 9c       	mov	r12,r4
80006938:	f0 1f 00 0d 	mcall	8000696c <nav_dir_gotoparent+0x9c>
8000693c:	cf 51       	brne	80006926 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000693e:	30 89       	mov	r9,8
80006940:	48 58       	lddpc	r8,80006954 <nav_dir_gotoparent+0x84>
80006942:	b0 89       	st.b	r8[0x0],r9
   return false;
80006944:	d8 22       	popm	r4-r7,pc
80006946:	d8 2a       	popm	r4-r7,pc,r12=0
80006948:	da 2a       	popm	r4-r7,pc,r12=1
8000694a:	00 00       	add	r0,r0
8000694c:	80 00       	ld.sh	r0,r0[0x0]
8000694e:	53 44       	stdsp	sp[0xd0],r4
80006950:	00 00       	add	r0,r0
80006952:	19 b0       	ld.ub	r0,r12[0x3]
80006954:	00 00       	add	r0,r0
80006956:	1a 00       	add	r0,sp
80006958:	00 00       	add	r0,r0
8000695a:	19 fc       	ld.ub	r12,r12[0x7]
8000695c:	80 00       	ld.sh	r0,r0[0x0]
8000695e:	4f 50       	lddpc	r0,80006b30 <nav_filelist_last+0x24>
80006960:	80 00       	ld.sh	r0,r0[0x0]
80006962:	46 34       	lddsp	r4,sp[0x18c]
80006964:	00 00       	add	r0,r0
80006966:	17 70       	ld.ub	r0,--r11
80006968:	80 00       	ld.sh	r0,r0[0x0]
8000696a:	68 4c       	ld.w	r12,r4[0x10]
8000696c:	80 00       	ld.sh	r0,r0[0x0]
8000696e:	66 b4       	ld.w	r4,r3[0x2c]

80006970 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
80006970:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
80006972:	f0 1f 00 0a 	mcall	80006998 <nav_dir_cd+0x28>
80006976:	c0 f0       	breq	80006994 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80006978:	f0 1f 00 09 	mcall	8000699c <nav_dir_cd+0x2c>
8000697c:	c0 c0       	breq	80006994 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000697e:	48 98       	lddpc	r8,800069a0 <nav_dir_cd+0x30>
80006980:	48 99       	lddpc	r9,800069a4 <nav_dir_cd+0x34>
80006982:	92 19       	ld.sh	r9,r9[0x2]
80006984:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006988:	48 89       	lddpc	r9,800069a8 <nav_dir_cd+0x38>
8000698a:	72 19       	ld.w	r9,r9[0x4]
8000698c:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
8000698e:	f0 1f 00 08 	mcall	800069ac <nav_dir_cd+0x3c>
80006992:	d8 02       	popm	pc
80006994:	d8 0a       	popm	pc,r12=0
80006996:	00 00       	add	r0,r0
80006998:	80 00       	ld.sh	r0,r0[0x0]
8000699a:	53 20       	stdsp	sp[0xc8],r0
8000699c:	80 00       	ld.sh	r0,r0[0x0]
8000699e:	43 04       	lddsp	r4,sp[0xc0]
800069a0:	00 00       	add	r0,r0
800069a2:	19 b0       	ld.ub	r0,r12[0x3]
800069a4:	00 00       	add	r0,r0
800069a6:	19 fc       	ld.ub	r12,r12[0x7]
800069a8:	00 00       	add	r0,r0
800069aa:	17 70       	ld.ub	r0,--r11
800069ac:	80 00       	ld.sh	r0,r0[0x0]
800069ae:	68 4c       	ld.w	r12,r4[0x10]

800069b0 <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
800069b0:	eb cd 40 f8 	pushm	r3-r7,lr
800069b4:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
800069b6:	f0 1f 00 20 	mcall	80006a34 <nav_file_del+0x84>
800069ba:	c1 c1       	brne	800069f2 <nav_file_del+0x42>
800069bc:	c3 a8       	rjmp	80006a30 <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800069be:	0c 9b       	mov	r11,r6
800069c0:	0a 9c       	mov	r12,r5
800069c2:	f0 1f 00 1e 	mcall	80006a38 <nav_file_del+0x88>
800069c6:	c0 80       	breq	800069d6 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
800069c8:	58 04       	cp.w	r4,0
800069ca:	c1 90       	breq	800069fc <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
800069cc:	31 d9       	mov	r9,29
800069ce:	49 c8       	lddpc	r8,80006a3c <nav_file_del+0x8c>
800069d0:	b0 89       	st.b	r8[0x0],r9
800069d2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
800069d6:	f0 1f 00 1b 	mcall	80006a40 <nav_file_del+0x90>
800069da:	c2 b0       	breq	80006a30 <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
800069dc:	0c 9c       	mov	r12,r6
800069de:	f0 1f 00 1a 	mcall	80006a44 <nav_file_del+0x94>
800069e2:	c2 70       	breq	80006a30 <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
800069e4:	58 07       	cp.w	r7,0
800069e6:	c0 31       	brne	800069ec <nav_file_del+0x3c>
800069e8:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
800069ec:	20 17       	sub	r7,1
800069ee:	5c 57       	castu.b	r7

      } // end of second while (1)
800069f0:	ce 7b       	rjmp	800069be <nav_file_del+0xe>
800069f2:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
800069f6:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
800069f8:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800069fa:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
800069fc:	f0 1f 00 13 	mcall	80006a48 <nav_file_del+0x98>
80006a00:	c0 70       	breq	80006a0e <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
80006a02:	f0 1f 00 13 	mcall	80006a4c <nav_file_del+0x9c>
80006a06:	c1 50       	breq	80006a30 <nav_file_del+0x80>
            return false;
         u8_folder_level++;
80006a08:	2f f7       	sub	r7,-1
80006a0a:	5c 57       	castu.b	r7
80006a0c:	cd 9b       	rjmp	800069be <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
80006a0e:	0c 9c       	mov	r12,r6
80006a10:	f0 1f 00 10 	mcall	80006a50 <nav_file_del+0xa0>
80006a14:	c0 e0       	breq	80006a30 <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
80006a16:	0c 9c       	mov	r12,r6
80006a18:	f0 1f 00 0b 	mcall	80006a44 <nav_file_del+0x94>
80006a1c:	c0 a0       	breq	80006a30 <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
80006a1e:	e6 07 18 00 	cp.b	r7,r3
80006a22:	cc e1       	brne	800069be <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006a24:	f0 1f 00 0c 	mcall	80006a54 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006a28:	f0 1f 00 0c 	mcall	80006a58 <nav_file_del+0xa8>
80006a2c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006a30:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006a34:	80 00       	ld.sh	r0,r0[0x0]
80006a36:	53 20       	stdsp	sp[0xc8],r0
80006a38:	80 00       	ld.sh	r0,r0[0x0]
80006a3a:	66 b4       	ld.w	r4,r3[0x2c]
80006a3c:	00 00       	add	r0,r0
80006a3e:	1a 00       	add	r0,sp
80006a40:	80 00       	ld.sh	r0,r0[0x0]
80006a42:	68 d0       	ld.w	r0,r4[0x34]
80006a44:	80 00       	ld.sh	r0,r0[0x0]
80006a46:	56 10       	stdsp	sp[0x184],r0
80006a48:	80 00       	ld.sh	r0,r0[0x0]
80006a4a:	65 c4       	ld.w	r4,r2[0x70]
80006a4c:	80 00       	ld.sh	r0,r0[0x0]
80006a4e:	69 70       	ld.w	r0,r4[0x5c]
80006a50:	80 00       	ld.sh	r0,r0[0x0]
80006a52:	47 50       	lddsp	r0,sp[0x1d4]
80006a54:	80 00       	ld.sh	r0,r0[0x0]
80006a56:	68 4c       	ld.w	r12,r4[0x10]
80006a58:	80 00       	ld.sh	r0,r0[0x0]
80006a5a:	48 b4       	lddpc	r4,80006a84 <nav_filelist_first+0x28>

80006a5c <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
80006a5c:	d4 21       	pushm	r4-r7,lr
80006a5e:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
80006a60:	f0 1f 00 0b 	mcall	80006a8c <nav_filelist_first+0x30>
80006a64:	c0 71       	brne	80006a72 <nav_filelist_first+0x16>
80006a66:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006a68:	e9 38 00 2c 	ld.ub	r8,r4[44]
80006a6c:	10 37       	cp.w	r7,r8
80006a6e:	c0 51       	brne	80006a78 <nav_filelist_first+0x1c>
80006a70:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006a72:	30 16       	mov	r6,1
80006a74:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006a76:	48 74       	lddpc	r4,80006a90 <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006a78:	0c 9b       	mov	r11,r6
80006a7a:	0a 9c       	mov	r12,r5
80006a7c:	f0 1f 00 06 	mcall	80006a94 <nav_filelist_first+0x38>
80006a80:	cf 41       	brne	80006a68 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
80006a82:	30 99       	mov	r9,9
80006a84:	48 58       	lddpc	r8,80006a98 <nav_filelist_first+0x3c>
80006a86:	b0 89       	st.b	r8[0x0],r9
   return false;
}
80006a88:	d8 22       	popm	r4-r7,pc
80006a8a:	00 00       	add	r0,r0
80006a8c:	80 00       	ld.sh	r0,r0[0x0]
80006a8e:	68 4c       	ld.w	r12,r4[0x10]
80006a90:	00 00       	add	r0,r0
80006a92:	19 b0       	ld.ub	r0,r12[0x3]
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	66 b4       	ld.w	r4,r3[0x2c]
80006a98:	00 00       	add	r0,r0
80006a9a:	1a 00       	add	r0,sp

80006a9c <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
80006a9c:	d4 31       	pushm	r0-r7,lr
80006a9e:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
80006aa0:	49 88       	lddpc	r8,80006b00 <nav_filelist_nb+0x64>
80006aa2:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
80006aa6:	f0 1f 00 18 	mcall	80006b04 <nav_filelist_nb+0x68>
80006aaa:	c0 31       	brne	80006ab0 <nav_filelist_nb+0x14>
80006aac:	30 02       	mov	r2,0
80006aae:	c2 68       	rjmp	80006afa <nav_filelist_nb+0x5e>
80006ab0:	30 02       	mov	r2,0
80006ab2:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006ab4:	30 14       	mov	r4,1
80006ab6:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80006ab8:	49 26       	lddpc	r6,80006b00 <nav_filelist_nb+0x64>
80006aba:	30 15       	mov	r5,1
80006abc:	c0 b8       	rjmp	80006ad2 <nav_filelist_nb+0x36>
80006abe:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006ac2:	ea 08 18 00 	cp.b	r8,r5
80006ac6:	c0 41       	brne	80006ace <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
80006ac8:	2f f2       	sub	r2,-1
80006aca:	5c 82       	casts.h	r2
80006acc:	c0 38       	rjmp	80006ad2 <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
80006ace:	2f f7       	sub	r7,-1
80006ad0:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006ad2:	08 9b       	mov	r11,r4
80006ad4:	06 9c       	mov	r12,r3
80006ad6:	f0 1f 00 0d 	mcall	80006b08 <nav_filelist_nb+0x6c>
80006ada:	cf 21       	brne	80006abe <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
80006adc:	f0 1f 00 0a 	mcall	80006b04 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
80006ae0:	3f f8       	mov	r8,-1
80006ae2:	f0 01 19 00 	cp.h	r1,r8
80006ae6:	c0 60       	breq	80006af2 <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80006ae8:	30 1b       	mov	r11,1
80006aea:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
80006aee:	f0 1f 00 07 	mcall	80006b08 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
80006af2:	58 00       	cp.w	r0,0
80006af4:	c0 31       	brne	80006afa <nav_filelist_nb+0x5e>
80006af6:	0e 92       	mov	r2,r7
80006af8:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80006afa:	04 9c       	mov	r12,r2
80006afc:	d8 32       	popm	r0-r7,pc
80006afe:	00 00       	add	r0,r0
80006b00:	00 00       	add	r0,r0
80006b02:	19 b0       	ld.ub	r0,r12[0x3]
80006b04:	80 00       	ld.sh	r0,r0[0x0]
80006b06:	68 4c       	ld.w	r12,r4[0x10]
80006b08:	80 00       	ld.sh	r0,r0[0x0]
80006b0a:	66 b4       	ld.w	r4,r3[0x2c]

80006b0c <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
80006b0c:	eb cd 40 c0 	pushm	r6-r7,lr
80006b10:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
80006b12:	f0 1f 00 0f 	mcall	80006b4c <nav_filelist_last+0x40>
80006b16:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
80006b1a:	c0 61       	brne	80006b26 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
80006b1c:	30 99       	mov	r9,9
80006b1e:	48 d8       	lddpc	r8,80006b50 <nav_filelist_last+0x44>
80006b20:	b0 89       	st.b	r8[0x0],r9
80006b22:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006b26:	0c 9c       	mov	r12,r6
80006b28:	f0 1f 00 0b 	mcall	80006b54 <nav_filelist_last+0x48>
80006b2c:	c0 d0       	breq	80006b46 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
80006b2e:	30 18       	mov	r8,1
80006b30:	f0 07 19 00 	cp.h	r7,r8
80006b34:	c0 31       	brne	80006b3a <nav_filelist_last+0x2e>
80006b36:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80006b3a:	0e 9c       	mov	r12,r7
80006b3c:	20 2c       	sub	r12,2
80006b3e:	30 1b       	mov	r11,1
80006b40:	5c 7c       	castu.h	r12
80006b42:	f0 1f 00 06 	mcall	80006b58 <nav_filelist_last+0x4c>
}
80006b46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b4a:	00 00       	add	r0,r0
80006b4c:	80 00       	ld.sh	r0,r0[0x0]
80006b4e:	6a 9c       	ld.w	r12,r5[0x24]
80006b50:	00 00       	add	r0,r0
80006b52:	1a 00       	add	r0,sp
80006b54:	80 00       	ld.sh	r0,r0[0x0]
80006b56:	6a 5c       	ld.w	r12,r5[0x14]
80006b58:	80 00       	ld.sh	r0,r0[0x0]
80006b5a:	66 b4       	ld.w	r4,r3[0x2c]

80006b5c <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
80006b5c:	eb cd 40 80 	pushm	r7,lr
80006b60:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
80006b62:	f0 1f 00 18 	mcall	80006bc0 <nav_dir_make+0x64>
80006b66:	c2 b0       	breq	80006bbc <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006b68:	0e 9c       	mov	r12,r7
80006b6a:	f0 1f 00 17 	mcall	80006bc4 <nav_dir_make+0x68>
80006b6e:	c2 70       	breq	80006bbc <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
80006b70:	49 68       	lddpc	r8,80006bc8 <nav_dir_make+0x6c>
80006b72:	3f f9       	mov	r9,-1
80006b74:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006b76:	30 19       	mov	r9,1
80006b78:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
80006b7a:	f0 1f 00 15 	mcall	80006bcc <nav_dir_make+0x70>
80006b7e:	c0 71       	brne	80006b8c <nav_dir_make+0x30>
   {
      fat_delete_file( false );
80006b80:	f0 1f 00 14 	mcall	80006bd0 <nav_dir_make+0x74>
      fat_cache_flush();
80006b84:	f0 1f 00 14 	mcall	80006bd4 <nav_dir_make+0x78>
80006b88:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
80006b8c:	49 38       	lddpc	r8,80006bd8 <nav_dir_make+0x7c>
80006b8e:	48 f9       	lddpc	r9,80006bc8 <nav_dir_make+0x6c>
80006b90:	72 09       	ld.w	r9,r9[0x0]
80006b92:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80006b94:	30 09       	mov	r9,0
80006b96:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
80006b98:	31 09       	mov	r9,16
80006b9a:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
80006b9c:	f0 1f 00 10 	mcall	80006bdc <nav_dir_make+0x80>
80006ba0:	c0 e0       	breq	80006bbc <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80006ba2:	f0 1f 00 10 	mcall	80006be0 <nav_dir_make+0x84>
80006ba6:	c0 b0       	breq	80006bbc <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
80006ba8:	f0 1f 00 0f 	mcall	80006be4 <nav_dir_make+0x88>
   if( !fat_cache_flush())
80006bac:	f0 1f 00 0a 	mcall	80006bd4 <nav_dir_make+0x78>
80006bb0:	c0 60       	breq	80006bbc <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80006bb2:	30 0c       	mov	r12,0
80006bb4:	f0 1f 00 0d 	mcall	80006be8 <nav_dir_make+0x8c>
80006bb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80006bbc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006bc0:	80 00       	ld.sh	r0,r0[0x0]
80006bc2:	53 44       	stdsp	sp[0xd0],r4
80006bc4:	80 00       	ld.sh	r0,r0[0x0]
80006bc6:	68 64       	ld.w	r4,r4[0x18]
80006bc8:	00 00       	add	r0,r0
80006bca:	1a 58       	eor	r8,sp
80006bcc:	80 00       	ld.sh	r0,r0[0x0]
80006bce:	57 ec       	stdsp	sp[0x1f8],r12
80006bd0:	80 00       	ld.sh	r0,r0[0x0]
80006bd2:	56 10       	stdsp	sp[0x184],r0
80006bd4:	80 00       	ld.sh	r0,r0[0x0]
80006bd6:	48 b4       	lddpc	r4,80006c00 <nav_partition_mount+0x14>
80006bd8:	00 00       	add	r0,r0
80006bda:	17 70       	ld.ub	r0,--r11
80006bdc:	80 00       	ld.sh	r0,r0[0x0]
80006bde:	54 a8       	stdsp	sp[0x128],r8
80006be0:	80 00       	ld.sh	r0,r0[0x0]
80006be2:	4f 50       	lddpc	r0,80006db4 <nav_setcwd+0xd0>
80006be4:	80 00       	ld.sh	r0,r0[0x0]
80006be6:	47 00       	lddsp	r0,sp[0x1c0]
80006be8:	80 00       	ld.sh	r0,r0[0x0]
80006bea:	6b 0c       	ld.w	r12,r5[0x40]

80006bec <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
80006bec:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
80006bee:	f0 1f 00 0a 	mcall	80006c14 <nav_partition_mount+0x28>
80006bf2:	c0 f0       	breq	80006c10 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80006bf4:	48 98       	lddpc	r8,80006c18 <nav_partition_mount+0x2c>
80006bf6:	11 89       	ld.ub	r9,r8[0x0]
80006bf8:	30 08       	mov	r8,0
80006bfa:	f0 09 18 00 	cp.b	r9,r8
80006bfe:	c0 70       	breq	80006c0c <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80006c00:	30 09       	mov	r9,0
80006c02:	48 78       	lddpc	r8,80006c1c <nav_partition_mount+0x30>
80006c04:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80006c06:	f0 1f 00 07 	mcall	80006c20 <nav_partition_mount+0x34>
80006c0a:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
80006c0c:	f0 1f 00 06 	mcall	80006c24 <nav_partition_mount+0x38>
}
80006c10:	d8 02       	popm	pc
80006c12:	00 00       	add	r0,r0
80006c14:	80 00       	ld.sh	r0,r0[0x0]
80006c16:	52 70       	stdsp	sp[0x9c],r0
80006c18:	00 00       	add	r0,r0
80006c1a:	19 fc       	ld.ub	r12,r12[0x7]
80006c1c:	00 00       	add	r0,r0
80006c1e:	19 b0       	ld.ub	r0,r12[0x3]
80006c20:	80 00       	ld.sh	r0,r0[0x0]
80006c22:	43 1c       	lddsp	r12,sp[0xc4]
80006c24:	80 00       	ld.sh	r0,r0[0x0]
80006c26:	5d 84       	*unknown*

80006c28 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006c28:	d4 01       	pushm	lr
   return nav_partition_mount();
80006c2a:	f0 1f 00 02 	mcall	80006c30 <nav_dir_root+0x8>
}
80006c2e:	d8 02       	popm	pc
80006c30:	80 00       	ld.sh	r0,r0[0x0]
80006c32:	6b ec       	ld.w	r12,r5[0x78]

80006c34 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80006c34:	eb cd 40 80 	pushm	r7,lr
80006c38:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
80006c3a:	f0 1f 00 0f 	mcall	80006c74 <nav_drive_set+0x40>
80006c3e:	c1 90       	breq	80006c70 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80006c40:	f0 1f 00 0e 	mcall	80006c78 <nav_drive_set+0x44>
80006c44:	ee 0c 18 00 	cp.b	r12,r7
80006c48:	e0 8b 00 07 	brhi	80006c56 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80006c4c:	30 69       	mov	r9,6
80006c4e:	48 c8       	lddpc	r8,80006c7c <nav_drive_set+0x48>
80006c50:	b0 89       	st.b	r8[0x0],r9
80006c52:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006c56:	48 b8       	lddpc	r8,80006c80 <nav_drive_set+0x4c>
80006c58:	11 88       	ld.ub	r8,r8[0x0]
80006c5a:	ee 08 18 00 	cp.b	r8,r7
80006c5e:	c0 31       	brne	80006c64 <nav_drive_set+0x30>
80006c60:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006c64:	48 78       	lddpc	r8,80006c80 <nav_drive_set+0x4c>
80006c66:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006c68:	30 09       	mov	r9,0
80006c6a:	48 78       	lddpc	r8,80006c84 <nav_drive_set+0x50>
80006c6c:	b0 89       	st.b	r8[0x0],r9
80006c6e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80006c70:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c74:	80 00       	ld.sh	r0,r0[0x0]
80006c76:	52 70       	stdsp	sp[0x9c],r0
80006c78:	80 00       	ld.sh	r0,r0[0x0]
80006c7a:	72 b0       	ld.w	r0,r9[0x2c]
80006c7c:	00 00       	add	r0,r0
80006c7e:	1a 00       	add	r0,sp
80006c80:	00 00       	add	r0,r0
80006c82:	19 b0       	ld.ub	r0,r12[0x3]
80006c84:	00 00       	add	r0,r0
80006c86:	19 fc       	ld.ub	r12,r12[0x7]

80006c88 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006c88:	d4 21       	pushm	r4-r7,lr
80006c8a:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
80006c8c:	19 8c       	ld.ub	r12,r12[0x0]
80006c8e:	f0 1f 00 10 	mcall	80006ccc <nav_gotoindex+0x44>
80006c92:	c1 c0       	breq	80006cca <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80006c94:	f0 1f 00 0f 	mcall	80006cd0 <nav_gotoindex+0x48>
80006c98:	c1 90       	breq	80006cca <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
80006c9a:	6e 19       	ld.w	r9,r7[0x4]
80006c9c:	48 e8       	lddpc	r8,80006cd4 <nav_gotoindex+0x4c>
80006c9e:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
80006ca0:	f0 1f 00 0e 	mcall	80006cd8 <nav_gotoindex+0x50>
80006ca4:	c0 a1       	brne	80006cb8 <nav_gotoindex+0x30>
80006ca6:	c1 28       	rjmp	80006cca <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006ca8:	0a 9b       	mov	r11,r5
80006caa:	08 9c       	mov	r12,r4
80006cac:	f0 1f 00 0c 	mcall	80006cdc <nav_gotoindex+0x54>
80006cb0:	c0 71       	brne	80006cbe <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
80006cb2:	f0 1f 00 0a 	mcall	80006cd8 <nav_gotoindex+0x50>
80006cb6:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006cb8:	48 a6       	lddpc	r6,80006ce0 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006cba:	30 15       	mov	r5,1
80006cbc:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006cbe:	8c 19       	ld.sh	r9,r6[0x2]
80006cc0:	8e 48       	ld.sh	r8,r7[0x8]
80006cc2:	f0 09 19 00 	cp.h	r9,r8
80006cc6:	cf 11       	brne	80006ca8 <nav_gotoindex+0x20>
80006cc8:	da 2a       	popm	r4-r7,pc,r12=1
80006cca:	d8 2a       	popm	r4-r7,pc,r12=0
80006ccc:	80 00       	ld.sh	r0,r0[0x0]
80006cce:	6c 34       	ld.w	r4,r6[0xc]
80006cd0:	80 00       	ld.sh	r0,r0[0x0]
80006cd2:	6b ec       	ld.w	r12,r5[0x78]
80006cd4:	00 00       	add	r0,r0
80006cd6:	19 b0       	ld.ub	r0,r12[0x3]
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	68 4c       	ld.w	r12,r4[0x10]
80006cdc:	80 00       	ld.sh	r0,r0[0x0]
80006cde:	66 b4       	ld.w	r4,r3[0x2c]
80006ce0:	00 00       	add	r0,r0
80006ce2:	19 fc       	ld.ub	r12,r12[0x7]

80006ce4 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
80006ce4:	d4 31       	pushm	r0-r7,lr
80006ce6:	20 6d       	sub	sp,24
80006ce8:	18 97       	mov	r7,r12
80006cea:	16 91       	mov	r1,r11
80006cec:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
80006cee:	f0 1f 00 61 	mcall	80006e70 <nav_setcwd+0x18c>
80006cf2:	e0 80 00 bd 	breq	80006e6c <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
80006cf6:	1a 96       	mov	r6,sp
80006cf8:	1a 9c       	mov	r12,sp
80006cfa:	f0 1f 00 5f 	mcall	80006e74 <nav_setcwd+0x190>
80006cfe:	fa c8 ff f4 	sub	r8,sp,-12
80006d02:	fa ea 00 00 	ld.d	r10,sp[0]
80006d06:	f0 eb 00 00 	st.d	r8[0],r10
80006d0a:	40 29       	lddsp	r9,sp[0x8]
80006d0c:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
80006d0e:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
80006d10:	35 c9       	mov	r9,92
80006d12:	f2 08 18 00 	cp.b	r8,r9
80006d16:	5f 0a       	sreq	r10
80006d18:	32 f9       	mov	r9,47
80006d1a:	f2 08 18 00 	cp.b	r8,r9
80006d1e:	5f 09       	sreq	r9
80006d20:	f5 e9 10 09 	or	r9,r10,r9
80006d24:	c0 70       	breq	80006d32 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006d26:	f0 1f 00 55 	mcall	80006e78 <nav_setcwd+0x194>
80006d2a:	e0 80 00 9c 	breq	80006e62 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
80006d2e:	2f f7       	sub	r7,-1
80006d30:	c5 e8       	rjmp	80006dec <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006d32:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006d34:	33 aa       	mov	r10,58
80006d36:	f4 09 18 00 	cp.b	r9,r10
80006d3a:	c2 01       	brne	80006d7a <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006d3c:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006d3e:	35 cb       	mov	r11,92
80006d40:	f6 0a 18 00 	cp.b	r10,r11
80006d44:	5f 0b       	sreq	r11
80006d46:	32 fc       	mov	r12,47
80006d48:	f8 0a 18 00 	cp.b	r10,r12
80006d4c:	5f 0a       	sreq	r10
80006d4e:	f7 ea 10 0a 	or	r10,r11,r10
80006d52:	c1 40       	breq	80006d7a <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006d54:	4c a9       	lddpc	r9,80006e7c <nav_setcwd+0x198>
80006d56:	72 09       	ld.w	r9,r9[0x0]
80006d58:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006d5c:	e2 19 00 02 	andl	r9,0x2,COH
80006d60:	f7 b8 01 20 	subne	r8,32
80006d64:	24 18       	sub	r8,65
80006d66:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006d6a:	f0 1f 00 46 	mcall	80006e80 <nav_setcwd+0x19c>
80006d6e:	c7 a0       	breq	80006e62 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80006d70:	f0 1f 00 45 	mcall	80006e84 <nav_setcwd+0x1a0>
80006d74:	c7 70       	breq	80006e62 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006d76:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006d78:	c3 a8       	rjmp	80006dec <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006d7a:	32 ea       	mov	r10,46
80006d7c:	f4 08 18 00 	cp.b	r8,r10
80006d80:	c1 a1       	brne	80006db4 <nav_setcwd+0xd0>
80006d82:	35 c8       	mov	r8,92
80006d84:	f0 09 18 00 	cp.b	r9,r8
80006d88:	5f 0a       	sreq	r10
80006d8a:	32 f8       	mov	r8,47
80006d8c:	f0 09 18 00 	cp.b	r9,r8
80006d90:	5f 08       	sreq	r8
80006d92:	f5 e8 10 08 	or	r8,r10,r8
80006d96:	c0 f0       	breq	80006db4 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80006d98:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006d9a:	c2 98       	rjmp	80006dec <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80006d9c:	f0 1f 00 3b 	mcall	80006e88 <nav_setcwd+0x1a4>
80006da0:	c6 10       	breq	80006e62 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
80006da2:	0d 88       	ld.ub	r8,r6[0x0]
80006da4:	e8 08 18 00 	cp.b	r8,r4
80006da8:	c0 31       	brne	80006dae <nav_setcwd+0xca>
80006daa:	0c 97       	mov	r7,r6
80006dac:	c0 88       	rjmp	80006dbc <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
80006dae:	ec c7 ff ff 	sub	r7,r6,-1
80006db2:	c0 58       	rjmp	80006dbc <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006db4:	32 e5       	mov	r5,46
80006db6:	35 c3       	mov	r3,92
80006db8:	32 f2       	mov	r2,47
80006dba:	30 04       	mov	r4,0
80006dbc:	0f 88       	ld.ub	r8,r7[0x0]
80006dbe:	ea 08 18 00 	cp.b	r8,r5
80006dc2:	c1 51       	brne	80006dec <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80006dc4:	0f 98       	ld.ub	r8,r7[0x1]
80006dc6:	ea 08 18 00 	cp.b	r8,r5
80006dca:	c1 11       	brne	80006dec <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80006dcc:	ee c6 ff fe 	sub	r6,r7,-2
80006dd0:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006dd2:	e6 08 18 00 	cp.b	r8,r3
80006dd6:	5f 0a       	sreq	r10
80006dd8:	e4 08 18 00 	cp.b	r8,r2
80006ddc:	5f 09       	sreq	r9
80006dde:	f5 e9 10 09 	or	r9,r10,r9
80006de2:	e8 09 18 00 	cp.b	r9,r4
80006de6:	cd b1       	brne	80006d9c <nav_setcwd+0xb8>
80006de8:	58 08       	cp.w	r8,0
80006dea:	cd 90       	breq	80006d9c <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006dec:	f0 1f 00 28 	mcall	80006e8c <nav_setcwd+0x1a8>
80006df0:	c3 90       	breq	80006e62 <nav_setcwd+0x17e>
80006df2:	30 03       	mov	r3,0
80006df4:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006df6:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006df8:	35 c5       	mov	r5,92
80006dfa:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006dfc:	0f 88       	ld.ub	r8,r7[0x0]
80006dfe:	ec 08 18 00 	cp.b	r8,r6
80006e02:	c0 31       	brne	80006e08 <nav_setcwd+0x124>
80006e04:	30 1c       	mov	r12,1
80006e06:	c3 38       	rjmp	80006e6c <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006e08:	02 9b       	mov	r11,r1
80006e0a:	0e 9c       	mov	r12,r7
80006e0c:	f0 1f 00 21 	mcall	80006e90 <nav_setcwd+0x1ac>
80006e10:	c0 51       	brne	80006e1a <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
80006e12:	58 00       	cp.w	r0,0
80006e14:	c2 70       	breq	80006e62 <nav_setcwd+0x17e>
80006e16:	0e 92       	mov	r2,r7
80006e18:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006e1a:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006e1c:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006e1e:	58 08       	cp.w	r8,0
80006e20:	c0 81       	brne	80006e30 <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006e22:	58 03       	cp.w	r3,0
80006e24:	ce c0       	breq	80006dfc <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006e26:	04 9c       	mov	r12,r2
80006e28:	f0 1f 00 1b 	mcall	80006e94 <nav_setcwd+0x1b0>
80006e2c:	ce 81       	brne	80006dfc <nav_setcwd+0x118>
80006e2e:	c1 a8       	rjmp	80006e62 <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006e30:	ea 08 18 00 	cp.b	r8,r5
80006e34:	5f 09       	sreq	r9
80006e36:	e8 08 18 00 	cp.b	r8,r4
80006e3a:	5f 08       	sreq	r8
80006e3c:	f3 e8 10 08 	or	r8,r9,r8
80006e40:	ec 08 18 00 	cp.b	r8,r6
80006e44:	ce b0       	breq	80006e1a <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006e46:	58 03       	cp.w	r3,0
80006e48:	c0 50       	breq	80006e52 <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006e4a:	04 9c       	mov	r12,r2
80006e4c:	f0 1f 00 13 	mcall	80006e98 <nav_setcwd+0x1b4>
80006e50:	c0 90       	breq	80006e62 <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006e52:	f0 1f 00 13 	mcall	80006e9c <nav_setcwd+0x1b8>
80006e56:	c0 60       	breq	80006e62 <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006e58:	f0 1f 00 12 	mcall	80006ea0 <nav_setcwd+0x1bc>
80006e5c:	c0 30       	breq	80006e62 <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006e5e:	2f f7       	sub	r7,-1
80006e60:	cc eb       	rjmp	80006dfc <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006e62:	fa cc ff f4 	sub	r12,sp,-12
80006e66:	f0 1f 00 10 	mcall	80006ea4 <nav_setcwd+0x1c0>
80006e6a:	30 0c       	mov	r12,0
   return false;
}
80006e6c:	2f ad       	sub	sp,-24
80006e6e:	d8 32       	popm	r0-r7,pc
80006e70:	80 00       	ld.sh	r0,r0[0x0]
80006e72:	52 70       	stdsp	sp[0x9c],r0
80006e74:	80 00       	ld.sh	r0,r0[0x0]
80006e76:	65 a4       	ld.w	r4,r2[0x68]
80006e78:	80 00       	ld.sh	r0,r0[0x0]
80006e7a:	6c 28       	ld.w	r8,r6[0x8]
80006e7c:	00 00       	add	r0,r0
80006e7e:	0c 10       	sub	r0,r6
80006e80:	80 00       	ld.sh	r0,r0[0x0]
80006e82:	6c 34       	ld.w	r4,r6[0xc]
80006e84:	80 00       	ld.sh	r0,r0[0x0]
80006e86:	6b ec       	ld.w	r12,r5[0x78]
80006e88:	80 00       	ld.sh	r0,r0[0x0]
80006e8a:	68 d0       	ld.w	r0,r4[0x34]
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	68 4c       	ld.w	r12,r4[0x10]
80006e90:	80 00       	ld.sh	r0,r0[0x0]
80006e92:	68 1c       	ld.w	r12,r4[0x4]
80006e94:	80 00       	ld.sh	r0,r0[0x0]
80006e96:	68 64       	ld.w	r4,r4[0x18]
80006e98:	80 00       	ld.sh	r0,r0[0x0]
80006e9a:	6b 5c       	ld.w	r12,r5[0x54]
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	43 04       	lddsp	r4,sp[0xc0]
80006ea0:	80 00       	ld.sh	r0,r0[0x0]
80006ea2:	69 70       	ld.w	r0,r4[0x5c]
80006ea4:	80 00       	ld.sh	r0,r0[0x0]
80006ea6:	6c 88       	ld.w	r8,r6[0x20]

80006ea8 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
80006ea8:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
80006eaa:	f0 1f 00 02 	mcall	80006eb0 <nav_drive_nb+0x8>
}
80006eae:	d8 02       	popm	pc
80006eb0:	80 00       	ld.sh	r0,r0[0x0]
80006eb2:	72 b0       	ld.w	r0,r9[0x2c]

80006eb4 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80006eb4:	eb cd 40 80 	pushm	r7,lr
80006eb8:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006eba:	30 18       	mov	r8,1
80006ebc:	f0 0c 18 00 	cp.b	r12,r8
80006ec0:	e0 88 00 07 	brls	80006ece <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006ec4:	32 79       	mov	r9,39
80006ec6:	48 b8       	lddpc	r8,80006ef0 <nav_select+0x3c>
80006ec8:	b0 89       	st.b	r8[0x0],r9
80006eca:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006ece:	48 a8       	lddpc	r8,80006ef4 <nav_select+0x40>
80006ed0:	11 8c       	ld.ub	r12,r8[0x0]
80006ed2:	ee 0c 18 00 	cp.b	r12,r7
80006ed6:	c0 31       	brne	80006edc <nav_select+0x28>
80006ed8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006edc:	f0 1f 00 07 	mcall	80006ef8 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006ee0:	0e 9c       	mov	r12,r7
80006ee2:	f0 1f 00 06 	mcall	80006ef8 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006ee6:	48 48       	lddpc	r8,80006ef4 <nav_select+0x40>
80006ee8:	b0 87       	st.b	r8[0x0],r7
80006eea:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006eee:	00 00       	add	r0,r0
80006ef0:	00 00       	add	r0,r0
80006ef2:	1a 00       	add	r0,sp
80006ef4:	00 00       	add	r0,r0
80006ef6:	1a 78       	tst	r8,sp
80006ef8:	80 00       	ld.sh	r0,r0[0x0]
80006efa:	47 c8       	lddsp	r8,sp[0x1f0]

80006efc <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006efc:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006f00:	30 07       	mov	r7,0
80006f02:	49 18       	lddpc	r8,80006f44 <nav_reset+0x48>
80006f04:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006f06:	49 18       	lddpc	r8,80006f48 <nav_reset+0x4c>
80006f08:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006f0a:	f0 1f 00 11 	mcall	80006f4c <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006f0e:	f0 1f 00 11 	mcall	80006f50 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006f12:	30 0c       	mov	r12,0
80006f14:	f0 1f 00 10 	mcall	80006f54 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006f18:	49 03       	lddpc	r3,80006f58 <nav_reset+0x5c>
80006f1a:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006f1c:	49 05       	lddpc	r5,80006f5c <nav_reset+0x60>
80006f1e:	3f f4       	mov	r4,-1
80006f20:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006f22:	49 06       	lddpc	r6,80006f60 <nav_reset+0x64>
80006f24:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006f26:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006f2a:	30 1c       	mov	r12,1
80006f2c:	f0 1f 00 0a 	mcall	80006f54 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006f30:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006f32:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006f34:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006f36:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006f3a:	48 b8       	lddpc	r8,80006f64 <nav_reset+0x68>
80006f3c:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006f3e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006f42:	00 00       	add	r0,r0
80006f44:	00 00       	add	r0,r0
80006f46:	1a 01       	add	r1,sp
80006f48:	00 00       	add	r0,r0
80006f4a:	17 82       	ld.ub	r2,r11[0x0]
80006f4c:	80 00       	ld.sh	r0,r0[0x0]
80006f4e:	46 d8       	lddsp	r8,sp[0x1b4]
80006f50:	80 00       	ld.sh	r0,r0[0x0]
80006f52:	40 b8       	lddsp	r8,sp[0x2c]
80006f54:	80 00       	ld.sh	r0,r0[0x0]
80006f56:	6e b4       	ld.w	r4,r7[0x2c]
80006f58:	00 00       	add	r0,r0
80006f5a:	19 fc       	ld.ub	r12,r12[0x7]
80006f5c:	00 00       	add	r0,r0
80006f5e:	19 b0       	ld.ub	r0,r12[0x3]
80006f60:	00 00       	add	r0,r0
80006f62:	17 70       	ld.ub	r0,--r11
80006f64:	00 00       	add	r0,r0
80006f66:	1a 78       	tst	r8,sp

80006f68 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80006f68:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80006f6a:	f0 1f 00 02 	mcall	80006f70 <print_char+0x8>
}
80006f6e:	d8 02       	popm	pc
80006f70:	80 00       	ld.sh	r0,r0[0x0]
80006f72:	3e 64       	mov	r4,-26

80006f74 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80006f74:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
80006f76:	18 9b       	mov	r11,r12
80006f78:	fe 7c 2c 00 	mov	r12,-54272
80006f7c:	f0 1f 00 02 	mcall	80006f84 <print_dbg_char+0x10>
}
80006f80:	d8 02       	popm	pc
80006f82:	00 00       	add	r0,r0
80006f84:	80 00       	ld.sh	r0,r0[0x0]
80006f86:	6f 68       	ld.w	r8,r7[0x58]

80006f88 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006f88:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006f8a:	f0 1f 00 02 	mcall	80006f90 <print+0x8>
}
80006f8e:	d8 02       	popm	pc
80006f90:	80 00       	ld.sh	r0,r0[0x0]
80006f92:	3e e0       	mov	r0,-18

80006f94 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80006f94:	eb cd 40 e0 	pushm	r5-r7,lr
80006f98:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80006f9a:	30 08       	mov	r8,0
80006f9c:	fb 68 00 0a 	st.b	sp[10],r8
80006fa0:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80006fa2:	1a 95       	mov	r5,sp
80006fa4:	e0 6e cc cd 	mov	lr,52429
80006fa8:	ea 1e cc cc 	orh	lr,0xcccc
80006fac:	20 19       	sub	r9,1
80006fae:	f6 0e 06 46 	mulu.d	r6,r11,lr
80006fb2:	0e 98       	mov	r8,r7
80006fb4:	a3 98       	lsr	r8,0x3
80006fb6:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80006fba:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80006fbe:	2d 0b       	sub	r11,-48
80006fc0:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80006fc4:	10 9b       	mov	r11,r8
  } while (n);
80006fc6:	58 08       	cp.w	r8,0
80006fc8:	cf 21       	brne	80006fac <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80006fca:	1a 9b       	mov	r11,sp
80006fcc:	12 0b       	add	r11,r9
80006fce:	f0 1f 00 03 	mcall	80006fd8 <print_ulong+0x44>
}
80006fd2:	2f dd       	sub	sp,-12
80006fd4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006fd8:	80 00       	ld.sh	r0,r0[0x0]
80006fda:	6f 88       	ld.w	r8,r7[0x60]

80006fdc <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80006fdc:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80006fde:	18 9b       	mov	r11,r12
80006fe0:	fe 7c 2c 00 	mov	r12,-54272
80006fe4:	f0 1f 00 02 	mcall	80006fec <print_dbg_ulong+0x10>
}
80006fe8:	d8 02       	popm	pc
80006fea:	00 00       	add	r0,r0
80006fec:	80 00       	ld.sh	r0,r0[0x0]
80006fee:	6f 94       	ld.w	r4,r7[0x64]

80006ff0 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80006ff0:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80006ff2:	18 9b       	mov	r11,r12
80006ff4:	fe 7c 2c 00 	mov	r12,-54272
80006ff8:	f0 1f 00 02 	mcall	80007000 <print_dbg+0x10>
}
80006ffc:	d8 02       	popm	pc
80006ffe:	00 00       	add	r0,r0
80007000:	80 00       	ld.sh	r0,r0[0x0]
80007002:	6f 88       	ld.w	r8,r7[0x60]

80007004 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80007004:	eb cd 40 80 	pushm	r7,lr
80007008:	20 3d       	sub	sp,12
8000700a:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000700c:	50 0c       	stdsp	sp[0x0],r12
8000700e:	30 88       	mov	r8,8
80007010:	ba c8       	st.b	sp[0x4],r8
80007012:	30 48       	mov	r8,4
80007014:	ba d8       	st.b	sp[0x5],r8
80007016:	30 08       	mov	r8,0
80007018:	ba 38       	st.h	sp[0x6],r8
8000701a:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000701e:	30 2b       	mov	r11,2
80007020:	48 6c       	lddpc	r12,80007038 <init_dbg_rs232_ex+0x34>
80007022:	f0 1f 00 07 	mcall	8000703c <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80007026:	0e 9a       	mov	r10,r7
80007028:	1a 9b       	mov	r11,sp
8000702a:	fe 7c 2c 00 	mov	r12,-54272
8000702e:	f0 1f 00 05 	mcall	80007040 <init_dbg_rs232_ex+0x3c>
}
80007032:	2f dd       	sub	sp,-12
80007034:	e3 cd 80 80 	ldm	sp++,r7,pc
80007038:	80 01       	ld.sh	r1,r0[0x0]
8000703a:	26 d8       	sub	r8,109
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	31 c0       	mov	r0,28
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	3f 30       	mov	r0,-13

80007044 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80007044:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80007046:	18 9b       	mov	r11,r12
80007048:	e0 6c e1 00 	mov	r12,57600
8000704c:	f0 1f 00 02 	mcall	80007054 <init_dbg_rs232+0x10>
}
80007050:	d8 02       	popm	pc
80007052:	00 00       	add	r0,r0
80007054:	80 00       	ld.sh	r0,r0[0x0]
80007056:	70 04       	ld.w	r4,r8[0x0]

80007058 <_stext>:
80007058:	48 dd       	lddpc	sp,8000708c <udata_clear_loop_end+0x6>
8000705a:	48 e0       	lddpc	r0,80007090 <udata_clear_loop_end+0xa>
8000705c:	e3 b0 00 01 	mtsr	0x4,r0
80007060:	d5 53       	csrf	0x15
80007062:	48 d0       	lddpc	r0,80007094 <udata_clear_loop_end+0xe>
80007064:	48 d1       	lddpc	r1,80007098 <udata_clear_loop_end+0x12>
80007066:	02 30       	cp.w	r0,r1
80007068:	c0 62       	brcc	80007074 <idata_load_loop_end>
8000706a:	48 d2       	lddpc	r2,8000709c <udata_clear_loop_end+0x16>

8000706c <idata_load_loop>:
8000706c:	a5 05       	ld.d	r4,r2++
8000706e:	a1 24       	st.d	r0++,r4
80007070:	02 30       	cp.w	r0,r1
80007072:	cf d3       	brcs	8000706c <idata_load_loop>

80007074 <idata_load_loop_end>:
80007074:	48 b0       	lddpc	r0,800070a0 <udata_clear_loop_end+0x1a>
80007076:	48 c1       	lddpc	r1,800070a4 <udata_clear_loop_end+0x1e>
80007078:	02 30       	cp.w	r0,r1
8000707a:	c0 62       	brcc	80007086 <udata_clear_loop_end>
8000707c:	30 02       	mov	r2,0
8000707e:	30 03       	mov	r3,0

80007080 <udata_clear_loop>:
80007080:	a1 22       	st.d	r0++,r2
80007082:	02 30       	cp.w	r0,r1
80007084:	cf e3       	brcs	80007080 <udata_clear_loop>

80007086 <udata_clear_loop_end>:
80007086:	fe cf bc 9a 	sub	pc,pc,-17254
8000708a:	d7 03       	nop
8000708c:	00 01       	add	r1,r0
8000708e:	00 00       	add	r0,r0
80007090:	80 01       	ld.sh	r1,r0[0x0]
80007092:	22 00       	sub	r0,32
80007094:	00 00       	add	r0,r0
80007096:	00 04       	add	r4,r0
80007098:	00 00       	add	r0,r0
8000709a:	11 18       	ld.sh	r8,r8++
8000709c:	80 01       	ld.sh	r1,r0[0x0]
8000709e:	40 50       	lddsp	r0,sp[0x14]
800070a0:	00 00       	add	r0,r0
800070a2:	11 18       	ld.sh	r8,r8++
800070a4:	00 00       	add	r0,r0
800070a6:	1a f8       	st.b	--sp,r8

800070a8 <SD_Card_Test>:
	sdram_msp = create_mspace_with_base((void*) SDRAM_START_ADDRESS, MEM_SPACE_SIZE, 0);
	
	Enable_global_interrupt();
}
void SD_Card_Test()
{
800070a8:	eb cd 40 80 	pushm	r7,lr
800070ac:	20 1d       	sub	sp,4
	uint32_t VarTemp;
	//print_dbg("\n\n\rSD Card Memory Test:\n\r");
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
800070ae:	30 0c       	mov	r12,0
800070b0:	f0 1f 00 21 	mcall	80007134 <SD_Card_Test+0x8c>
800070b4:	c3 a1       	brne	80007128 <SD_Card_Test+0x80>
	{
		SD_Status.Status = STATUS_OK;
800070b6:	4a 17       	lddpc	r7,80007138 <SD_Card_Test+0x90>
800070b8:	30 08       	mov	r8,0
800070ba:	ae 88       	st.b	r7[0x0],r8
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
800070bc:	1a 9b       	mov	r11,sp
800070be:	f0 1f 00 20 	mcall	8000713c <SD_Card_Test+0x94>
		/*		print_dbg("OK:\t");*/
		SD_Status.Memory_size = (VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR);
800070c2:	40 08       	lddsp	r8,sp[0x0]
800070c4:	2f f8       	sub	r8,-1
800070c6:	ab 98       	lsr	r8,0xb
800070c8:	8f 18       	st.w	r7[0x4],r8
		// 		print_dbg_ulong(Columbus_Status.SD_Card->Memory_size);
		// 		print_dbg("MB\r\n");
		// 		print_dbg("SD Card Okay.\n\r");
		nav_reset();
800070ca:	f0 1f 00 1e 	mcall	80007140 <SD_Card_Test+0x98>
		// Use the last drive available as default.
		nav_drive_set(nav_drive_nb() - 1);
800070ce:	f0 1f 00 1e 	mcall	80007144 <SD_Card_Test+0x9c>
800070d2:	20 1c       	sub	r12,1
800070d4:	5c 5c       	castu.b	r12
800070d6:	f0 1f 00 1d 	mcall	80007148 <SD_Card_Test+0xa0>
		// Mount it.
		nav_partition_mount();
800070da:	f0 1f 00 1d 	mcall	8000714c <SD_Card_Test+0xa4>
		nav_filelist_reset();
800070de:	f0 1f 00 1d 	mcall	80007150 <SD_Card_Test+0xa8>
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
800070e2:	30 0b       	mov	r11,0
800070e4:	49 cc       	lddpc	r12,80007154 <SD_Card_Test+0xac>
800070e6:	f0 1f 00 1d 	mcall	80007158 <SD_Card_Test+0xb0>
800070ea:	c0 90       	breq	800070fc <SD_Card_Test+0x54>
		{
			//print_dbg("\n\rLog File Already Exists\n\rAttempting to delete...");	
			nav_setcwd((FS_STRING)LOG_FILE, true, false);
800070ec:	30 0a       	mov	r10,0
800070ee:	30 1b       	mov	r11,1
800070f0:	49 9c       	lddpc	r12,80007154 <SD_Card_Test+0xac>
800070f2:	f0 1f 00 1b 	mcall	8000715c <SD_Card_Test+0xb4>
			nav_file_del(false);
800070f6:	30 0c       	mov	r12,0
800070f8:	f0 1f 00 1a 	mcall	80007160 <SD_Card_Test+0xb8>
		}

		if(nav_file_create((FS_STRING)LOG_FILE) == false)
800070fc:	49 6c       	lddpc	r12,80007154 <SD_Card_Test+0xac>
800070fe:	f0 1f 00 1a 	mcall	80007164 <SD_Card_Test+0xbc>
80007102:	c0 41       	brne	8000710a <SD_Card_Test+0x62>
			SD_Status.Status = ERR_IO_ERROR;//print_dbg("\n\rNot worked...");
80007104:	3f f9       	mov	r9,-1
80007106:	48 d8       	lddpc	r8,80007138 <SD_Card_Test+0x90>
80007108:	b0 89       	st.b	r8[0x0],r9
	
		nav_setcwd((FS_STRING)LOG_FILE, true, false);
8000710a:	30 0a       	mov	r10,0
8000710c:	30 1b       	mov	r11,1
8000710e:	49 2c       	lddpc	r12,80007154 <SD_Card_Test+0xac>
80007110:	f0 1f 00 13 	mcall	8000715c <SD_Card_Test+0xb4>
		file_open(FOPEN_MODE_APPEND);
80007114:	30 2c       	mov	r12,2
80007116:	f0 1f 00 15 	mcall	80007168 <SD_Card_Test+0xc0>
		file_write_buf("SD Card Test\n\r", 14);
8000711a:	30 eb       	mov	r11,14
8000711c:	49 4c       	lddpc	r12,8000716c <SD_Card_Test+0xc4>
8000711e:	f0 1f 00 15 	mcall	80007170 <SD_Card_Test+0xc8>
		file_close();
80007122:	f0 1f 00 15 	mcall	80007174 <SD_Card_Test+0xcc>
80007126:	c0 48       	rjmp	8000712e <SD_Card_Test+0x86>
	}
	else
	{
		SD_Status.Status = ERR_IO_ERROR;
80007128:	3f f9       	mov	r9,-1
8000712a:	48 48       	lddpc	r8,80007138 <SD_Card_Test+0x90>
8000712c:	b0 89       	st.b	r8[0x0],r9
	}
}
8000712e:	2f fd       	sub	sp,-4
80007130:	e3 cd 80 80 	ldm	sp++,r7,pc
80007134:	80 00       	ld.sh	r0,r0[0x0]
80007136:	72 b4       	ld.w	r4,r9[0x2c]
80007138:	00 00       	add	r0,r0
8000713a:	1a 7c       	tst	r12,sp
8000713c:	80 00       	ld.sh	r0,r0[0x0]
8000713e:	72 c8       	ld.w	r8,r9[0x30]
80007140:	80 00       	ld.sh	r0,r0[0x0]
80007142:	6e fc       	ld.w	r12,r7[0x3c]
80007144:	80 00       	ld.sh	r0,r0[0x0]
80007146:	6e a8       	ld.w	r8,r7[0x28]
80007148:	80 00       	ld.sh	r0,r0[0x0]
8000714a:	6c 34       	ld.w	r4,r6[0xc]
8000714c:	80 00       	ld.sh	r0,r0[0x0]
8000714e:	6b ec       	ld.w	r12,r5[0x78]
80007150:	80 00       	ld.sh	r0,r0[0x0]
80007152:	68 4c       	ld.w	r12,r4[0x10]
80007154:	80 01       	ld.sh	r1,r0[0x0]
80007156:	26 e8       	sub	r8,110
80007158:	80 00       	ld.sh	r0,r0[0x0]
8000715a:	68 1c       	ld.w	r12,r4[0x4]
8000715c:	80 00       	ld.sh	r0,r0[0x0]
8000715e:	6c e4       	ld.w	r4,r6[0x38]
80007160:	80 00       	ld.sh	r0,r0[0x0]
80007162:	69 b0       	ld.w	r0,r4[0x6c]
80007164:	80 00       	ld.sh	r0,r0[0x0]
80007166:	68 64       	ld.w	r4,r4[0x18]
80007168:	80 00       	ld.sh	r0,r0[0x0]
8000716a:	65 04       	ld.w	r4,r2[0x40]
8000716c:	80 01       	ld.sh	r1,r0[0x0]
8000716e:	26 f0       	sub	r0,111
80007170:	80 00       	ld.sh	r0,r0[0x0]
80007172:	61 98       	ld.w	r8,r0[0x64]
80007174:	80 00       	ld.sh	r0,r0[0x0]
80007176:	61 5c       	ld.w	r12,r0[0x54]

80007178 <System_Test>:

void System_Test()
{
80007178:	d4 01       	pushm	lr
	SD_Card_Test();
8000717a:	f0 1f 00 1d 	mcall	800071ec <System_Test+0x74>
	if(SD_Status.Status != STATUS_OK)
8000717e:	49 d8       	lddpc	r8,800071f0 <System_Test+0x78>
80007180:	11 89       	ld.ub	r9,r8[0x0]
80007182:	30 08       	mov	r8,0
80007184:	f0 09 18 00 	cp.b	r9,r8
80007188:	c0 80       	breq	80007198 <System_Test+0x20>
	{
		Columbus_Status.Status |= SD_ERR;
8000718a:	49 b8       	lddpc	r8,800071f4 <System_Test+0x7c>
8000718c:	70 09       	ld.w	r9,r8[0x0]
8000718e:	a1 a9       	sbr	r9,0x0
80007190:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rSD Card Error!");
80007192:	49 ac       	lddpc	r12,800071f8 <System_Test+0x80>
80007194:	f0 1f 00 1a 	mcall	800071fc <System_Test+0x84>
	}	
	if(OV7670_Status.Status != STATUS_OK)
80007198:	49 a8       	lddpc	r8,80007200 <System_Test+0x88>
8000719a:	11 89       	ld.ub	r9,r8[0x0]
8000719c:	30 08       	mov	r8,0
8000719e:	f0 09 18 00 	cp.b	r9,r8
800071a2:	c0 c0       	breq	800071ba <System_Test+0x42>
	{
		Columbus_Status.Status |= CAM_ERR;
800071a4:	49 48       	lddpc	r8,800071f4 <System_Test+0x7c>
800071a6:	70 09       	ld.w	r9,r8[0x0]
800071a8:	a1 b9       	sbr	r9,0x1
800071aa:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rCamera Error(s): ");
800071ac:	49 6c       	lddpc	r12,80007204 <System_Test+0x8c>
800071ae:	f0 1f 00 14 	mcall	800071fc <System_Test+0x84>
		print_dbg_ulong(OV7670_Status.Status);
800071b2:	49 48       	lddpc	r8,80007200 <System_Test+0x88>
800071b4:	11 8c       	ld.ub	r12,r8[0x0]
800071b6:	f0 1f 00 15 	mcall	80007208 <System_Test+0x90>
	}	
	if(PCA9542A.Status != STATUS_OK)
800071ba:	49 58       	lddpc	r8,8000720c <System_Test+0x94>
800071bc:	11 89       	ld.ub	r9,r8[0x0]
800071be:	30 08       	mov	r8,0
800071c0:	f0 09 18 00 	cp.b	r9,r8
800071c4:	c0 80       	breq	800071d4 <System_Test+0x5c>
	{
		Columbus_Status.Status |= I2CMux_ERR;
800071c6:	48 c8       	lddpc	r8,800071f4 <System_Test+0x7c>
800071c8:	70 09       	ld.w	r9,r8[0x0]
800071ca:	a3 a9       	sbr	r9,0x2
800071cc:	91 09       	st.w	r8[0x0],r9
		print_dbg("\n\rI2C Mux Error!");
800071ce:	49 1c       	lddpc	r12,80007210 <System_Test+0x98>
800071d0:	f0 1f 00 0b 	mcall	800071fc <System_Test+0x84>
	}		
	
	if(Columbus_Status.Status == STATUS_OK)
800071d4:	48 88       	lddpc	r8,800071f4 <System_Test+0x7c>
800071d6:	70 08       	ld.w	r8,r8[0x0]
800071d8:	58 08       	cp.w	r8,0
800071da:	c0 51       	brne	800071e4 <System_Test+0x6c>
		print_dbg("\n\rSystem Check: PASS;");
800071dc:	48 ec       	lddpc	r12,80007214 <System_Test+0x9c>
800071de:	f0 1f 00 08 	mcall	800071fc <System_Test+0x84>
800071e2:	d8 02       	popm	pc
	else
		print_dbg("\n\rSystem Check: FAIL;");
800071e4:	48 dc       	lddpc	r12,80007218 <System_Test+0xa0>
800071e6:	f0 1f 00 06 	mcall	800071fc <System_Test+0x84>
800071ea:	d8 02       	popm	pc
800071ec:	80 00       	ld.sh	r0,r0[0x0]
800071ee:	70 a8       	ld.w	r8,r8[0x28]
800071f0:	00 00       	add	r0,r0
800071f2:	1a 7c       	tst	r12,sp
800071f4:	00 00       	add	r0,r0
800071f6:	1a 90       	mov	r0,sp
800071f8:	80 01       	ld.sh	r1,r0[0x0]
800071fa:	27 00       	sub	r0,112
800071fc:	80 00       	ld.sh	r0,r0[0x0]
800071fe:	6f f0       	ld.w	r0,r7[0x7c]
80007200:	00 00       	add	r0,r0
80007202:	1a 86       	andn	r6,sp
80007204:	80 01       	ld.sh	r1,r0[0x0]
80007206:	27 14       	sub	r4,113
80007208:	80 00       	ld.sh	r0,r0[0x0]
8000720a:	6f dc       	ld.w	r12,r7[0x74]
8000720c:	00 00       	add	r0,r0
8000720e:	1a 84       	andn	r4,sp
80007210:	80 01       	ld.sh	r1,r0[0x0]
80007212:	27 28       	sub	r8,114
80007214:	80 01       	ld.sh	r1,r0[0x0]
80007216:	27 3c       	sub	r12,115
80007218:	80 01       	ld.sh	r1,r0[0x0]
8000721a:	27 54       	sub	r4,117

8000721c <board_init>:
#include <board.h>
#include <conf_board.h>
#include "CustomDevices/CustomDevices.h"

void board_init(void)
{
8000721c:	d4 01       	pushm	lr
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	//Initialise Clocks
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
8000721e:	30 3a       	mov	r10,3
80007220:	e0 6b 24 00 	mov	r11,9216
80007224:	ea 1b 00 f4 	orh	r11,0xf4
80007228:	30 0c       	mov	r12,0
8000722a:	f0 1f 00 15 	mcall	8000727c <board_init+0x60>
	//initialise Debug USART
	init_dbg_rs232(FOSC0);
8000722e:	e0 6c 24 00 	mov	r12,9216
80007232:	ea 1c 00 f4 	orh	r12,0xf4
80007236:	f0 1f 00 13 	mcall	80007280 <board_init+0x64>
	//Throw some text out.
	print_dbg("\x0C");
8000723a:	49 3c       	lddpc	r12,80007284 <board_init+0x68>
8000723c:	f0 1f 00 13 	mcall	80007288 <board_init+0x6c>
	print_dbg("The Columbus\n\n\r");
80007240:	49 3c       	lddpc	r12,8000728c <board_init+0x70>
80007242:	f0 1f 00 12 	mcall	80007288 <board_init+0x6c>
	sdramc_init(FOSC0);//SDRAM initialise
80007246:	e0 6c 24 00 	mov	r12,9216
8000724a:	ea 1c 00 f4 	orh	r12,0xf4
8000724e:	f0 1f 00 11 	mcall	80007290 <board_init+0x74>
	sd_mmc_resources_init();//SD Card Init
80007252:	f0 1f 00 11 	mcall	80007294 <board_init+0x78>
	INTC_init_interrupts();
80007256:	f0 1f 00 11 	mcall	80007298 <board_init+0x7c>
	twim_init();
8000725a:	f0 1f 00 11 	mcall	8000729c <board_init+0x80>
	Motor_Init();
8000725e:	f0 1f 00 11 	mcall	800072a0 <board_init+0x84>
	OV7670_Init();
80007262:	f0 1f 00 11 	mcall	800072a4 <board_init+0x88>
	
	//Allocate Memory Space
	sdram_msp = create_mspace_with_base((void*) SDRAM_START_ADDRESS, MEM_SPACE_SIZE, 0);
80007266:	30 0a       	mov	r10,0
80007268:	fc 1b 00 40 	movh	r11,0x40
8000726c:	fc 1c d0 00 	movh	r12,0xd000
80007270:	f0 1f 00 0e 	mcall	800072a8 <board_init+0x8c>
80007274:	48 e8       	lddpc	r8,800072ac <board_init+0x90>
80007276:	91 0c       	st.w	r8[0x0],r12
	
	Enable_global_interrupt();
80007278:	d5 03       	csrf	0x10
}
8000727a:	d8 02       	popm	pc
8000727c:	80 00       	ld.sh	r0,r0[0x0]
8000727e:	33 70       	mov	r0,55
80007280:	80 00       	ld.sh	r0,r0[0x0]
80007282:	70 44       	ld.w	r4,r8[0x10]
80007284:	80 01       	ld.sh	r1,r0[0x0]
80007286:	27 6c       	sub	r12,118
80007288:	80 00       	ld.sh	r0,r0[0x0]
8000728a:	6f f0       	ld.w	r0,r7[0x7c]
8000728c:	80 01       	ld.sh	r1,r0[0x0]
8000728e:	27 70       	sub	r0,119
80007290:	80 00       	ld.sh	r0,r0[0x0]
80007292:	2e 00       	sub	r0,-32
80007294:	80 00       	ld.sh	r0,r0[0x0]
80007296:	b2 c4       	st.b	r9[0x4],r4
80007298:	80 00       	ld.sh	r0,r0[0x0]
8000729a:	32 c4       	mov	r4,44
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	b3 48       	asr	r8,0x12
800072a0:	80 00       	ld.sh	r0,r0[0x0]
800072a2:	9d 6c       	st.w	lr[0x18],r12
800072a4:	80 00       	ld.sh	r0,r0[0x0]
800072a6:	a8 74       	st.h	r4[0xe],r4
800072a8:	80 00       	ld.sh	r0,r0[0x0]
800072aa:	87 38       	st.w	r3[0xc],r8
800072ac:	00 00       	add	r0,r0
800072ae:	1a a4       	st.w	sp++,r4

800072b0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800072b0:	5e ff       	retal	1
800072b2:	d7 03       	nop

800072b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800072b4:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800072b6:	58 0c       	cp.w	r12,0
800072b8:	c0 20       	breq	800072bc <mem_test_unit_ready+0x8>
800072ba:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800072bc:	48 28       	lddpc	r8,800072c4 <mem_test_unit_ready+0x10>
800072be:	70 0c       	ld.w	r12,r8[0x0]
800072c0:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
800072c2:	d8 02       	popm	pc
800072c4:	80 01       	ld.sh	r1,r0[0x0]
800072c6:	27 80       	sub	r0,120

800072c8 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
800072c8:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800072ca:	58 0c       	cp.w	r12,0
800072cc:	c0 20       	breq	800072d0 <mem_read_capacity+0x8>
800072ce:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
800072d0:	48 38       	lddpc	r8,800072dc <mem_read_capacity+0x14>
800072d2:	70 18       	ld.w	r8,r8[0x4]
800072d4:	16 9c       	mov	r12,r11
800072d6:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
800072d8:	d8 02       	popm	pc
800072da:	00 00       	add	r0,r0
800072dc:	80 01       	ld.sh	r1,r0[0x0]
800072de:	27 80       	sub	r0,120

800072e0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
800072e0:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
800072e2:	5f 0c       	sreq	r12
800072e4:	5e fc       	retal	r12
800072e6:	d7 03       	nop

800072e8 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
800072e8:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
800072ea:	58 0c       	cp.w	r12,0
800072ec:	c0 20       	breq	800072f0 <mem_wr_protect+0x8>
800072ee:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
800072f0:	48 28       	lddpc	r8,800072f8 <mem_wr_protect+0x10>
800072f2:	70 2c       	ld.w	r12,r8[0x8]
800072f4:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800072f6:	d8 02       	popm	pc
800072f8:	80 01       	ld.sh	r1,r0[0x0]
800072fa:	27 80       	sub	r0,120

800072fc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
800072fc:	d4 01       	pushm	lr
800072fe:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80007300:	58 0c       	cp.w	r12,0
80007302:	c0 20       	breq	80007306 <memory_2_ram+0xa>
80007304:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80007306:	48 49       	lddpc	r9,80007314 <memory_2_ram+0x18>
80007308:	72 49       	ld.w	r9,r9[0x10]
8000730a:	14 9b       	mov	r11,r10
8000730c:	10 9c       	mov	r12,r8
8000730e:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80007310:	d8 02       	popm	pc
80007312:	00 00       	add	r0,r0
80007314:	80 01       	ld.sh	r1,r0[0x0]
80007316:	27 80       	sub	r0,120

80007318 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80007318:	d4 01       	pushm	lr
8000731a:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
8000731c:	58 0c       	cp.w	r12,0
8000731e:	c0 20       	breq	80007322 <ram_2_memory+0xa>
80007320:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80007322:	48 49       	lddpc	r9,80007330 <ram_2_memory+0x18>
80007324:	72 59       	ld.w	r9,r9[0x14]
80007326:	14 9b       	mov	r11,r10
80007328:	10 9c       	mov	r12,r8
8000732a:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
8000732c:	d8 02       	popm	pc
8000732e:	00 00       	add	r0,r0
80007330:	80 01       	ld.sh	r1,r0[0x0]
80007332:	27 80       	sub	r0,120

80007334 <segment_holding>:
#define segment_holds(S, A)\
  ((char*)(A) >= S->base && (char*)(A) < S->base + S->size)

/* Return segment holding given address */
static msegmentptr segment_holding(mstate m, char* addr) {
  msegmentptr sp = &m->seg;
80007334:	f8 cc fe 48 	sub	r12,r12,-440
  for (;;) {
    if (addr >= sp->base && addr < sp->base + sp->size)
80007338:	78 08       	ld.w	r8,r12[0x0]
8000733a:	16 38       	cp.w	r8,r11
8000733c:	e0 8b 00 06 	brhi	80007348 <segment_holding+0x14>
80007340:	78 19       	ld.w	r9,r12[0x4]
80007342:	12 08       	add	r8,r9
80007344:	10 3b       	cp.w	r11,r8
80007346:	5e 3c       	retlo	r12
      return sp;
    if ((sp = sp->next) == 0)
80007348:	78 2c       	ld.w	r12,r12[0x8]
8000734a:	58 0c       	cp.w	r12,0
8000734c:	cf 61       	brne	80007338 <segment_holding+0x4>
      return 0;
  }
}
8000734e:	5e fc       	retal	r12

80007350 <init_mparams>:

/* ---------------------------- setting mparams -------------------------- */

/* Initialize mparams */
static int init_mparams(void) {
  if (mparams.page_size == 0) {
80007350:	49 08       	lddpc	r8,80007390 <init_mparams+0x40>
80007352:	70 18       	ld.w	r8,r8[0x4]
80007354:	58 08       	cp.w	r8,0
80007356:	c1 c1       	brne	8000738e <init_mparams+0x3e>
    size_t s;

    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
80007358:	48 e8       	lddpc	r8,80007390 <init_mparams+0x40>
8000735a:	e4 69 00 00 	mov	r9,262144
8000735e:	91 39       	st.w	r8[0xc],r9
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
80007360:	fc 19 00 20 	movh	r9,0x20
80007364:	91 49       	st.w	r8[0x10],r9
#if MORECORE_CONTIGUOUS
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
80007366:	30 19       	mov	r9,1
80007368:	91 59       	st.w	r8[0x14],r9
    }
#else /* (FOOTERS && !INSECURE) */
    s = (size_t)0x58585858U;
#endif /* (FOOTERS && !INSECURE) */
    ACQUIRE_MAGIC_INIT_LOCK();
    if (mparams.magic == 0) {
8000736a:	70 08       	ld.w	r8,r8[0x0]
8000736c:	58 08       	cp.w	r8,0
8000736e:	c0 b1       	brne	80007384 <init_mparams+0x34>
      mparams.magic = s;
80007370:	e0 69 58 58 	mov	r9,22616
80007374:	ea 19 58 58 	orh	r9,0x5858
80007378:	48 68       	lddpc	r8,80007390 <init_mparams+0x40>
8000737a:	91 09       	st.w	r8[0x0],r9
      /* Set up lock for main malloc area */
      INITIAL_LOCK(&gm->mutex);
      gm->mflags = mparams.default_mflags;
8000737c:	30 19       	mov	r9,1
8000737e:	48 68       	lddpc	r8,80007394 <init_mparams+0x44>
80007380:	f1 49 01 b4 	st.w	r8[436],r9
    }
    RELEASE_MAGIC_INIT_LOCK();

#ifndef WIN32
    mparams.page_size = malloc_getpagesize;
80007384:	48 38       	lddpc	r8,80007390 <init_mparams+0x40>
80007386:	e0 69 02 00 	mov	r9,512
8000738a:	91 19       	st.w	r8[0x4],r9
    mparams.granularity = ((DEFAULT_GRANULARITY != 0)?
8000738c:	91 29       	st.w	r8[0x8],r9
        ((mparams.granularity & (mparams.granularity-SIZE_T_ONE)) != 0) ||
        ((mparams.page_size   & (mparams.page_size-SIZE_T_ONE))   != 0))
      ABORT;
  }
  return 0;
}
8000738e:	5e fd       	retal	0
80007390:	00 00       	add	r0,r0
80007392:	14 ec       	st.h	--r10,r12
80007394:	00 00       	add	r0,r0
80007396:	13 24       	ld.uh	r4,r9++

80007398 <init_top>:
/* -------------------------- mspace management -------------------------- */

/* Initialize top chunk and its size */
static void init_top(mstate m, mchunkptr p, size_t psize) {
  /* Ensure alignment */
  size_t offset = align_offset(chunk2mem(p));
80007398:	f1 db c0 03 	bfextu	r8,r11,0x0,0x3
8000739c:	c0 50       	breq	800073a6 <init_top+0xe>
8000739e:	f0 08 11 08 	rsub	r8,r8,8
800073a2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
  p = (mchunkptr)((char*)p + offset);
800073a6:	10 0b       	add	r11,r8
  psize -= offset;
800073a8:	10 1a       	sub	r10,r8

  m->top = p;
800073aa:	99 6b       	st.w	r12[0x18],r11
  m->topsize = psize;
800073ac:	99 3a       	st.w	r12[0xc],r10
  p->head = psize | PINUSE_BIT;
800073ae:	14 98       	mov	r8,r10
800073b0:	a1 a8       	sbr	r8,0x0
800073b2:	97 18       	st.w	r11[0x4],r8
  /* set size of fake trailing chunk holding overhead space only once */
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
800073b4:	14 0b       	add	r11,r10
800073b6:	32 88       	mov	r8,40
800073b8:	97 18       	st.w	r11[0x4],r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
800073ba:	48 38       	lddpc	r8,800073c4 <init_top+0x2c>
800073bc:	70 48       	ld.w	r8,r8[0x10]
800073be:	99 78       	st.w	r12[0x1c],r8
}
800073c0:	5e fc       	retal	r12
800073c2:	00 00       	add	r0,r0
800073c4:	00 00       	add	r0,r0
800073c6:	14 ec       	st.h	--r10,r12

800073c8 <init_bins>:

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
800073c8:	f8 c8 ff dc 	sub	r8,r12,-36
800073cc:	f8 cc fe dc 	sub	r12,r12,-292
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
800073d0:	91 38       	st.w	r8[0xc],r8
800073d2:	91 28       	st.w	r8[0x8],r8
800073d4:	2f 88       	sub	r8,-8

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
800073d6:	18 38       	cp.w	r8,r12
800073d8:	cf c1       	brne	800073d0 <init_bins+0x8>
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
  }
}
800073da:	5e fc       	retal	r12

800073dc <sys_trim>:
    sp = next;
  }
  return released;
}

static int sys_trim(mstate m, size_t pad) {
800073dc:	d4 31       	pushm	r0-r7,lr
800073de:	20 2d       	sub	sp,8
800073e0:	18 95       	mov	r5,r12
  size_t released = 0;
  if (pad < MAX_REQUEST && is_initialized(m)) {
800073e2:	fe 5b ff bf 	cp.w	r11,-65
800073e6:	e0 8b 01 a8 	brhi	80007736 <sys_trim+0x35a>
800073ea:	78 68       	ld.w	r8,r12[0x18]
800073ec:	58 08       	cp.w	r8,0
800073ee:	e0 80 01 a4 	breq	80007736 <sys_trim+0x35a>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
800073f2:	f6 c6 ff d8 	sub	r6,r11,-40

    if (m->topsize > pad) {
800073f6:	78 37       	ld.w	r7,r12[0xc]
800073f8:	0e 36       	cp.w	r6,r7
800073fa:	c6 32       	brcc	800074c0 <sys_trim+0xe4>
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
800073fc:	fe f9 03 58 	ld.w	r9,pc[856]
80007400:	72 23       	ld.w	r3,r9[0x8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);
80007402:	10 9b       	mov	r11,r8
80007404:	f0 1f 00 d5 	mcall	80007758 <sys_trim+0x37c>
80007408:	18 94       	mov	r4,r12

      if (!is_extern_segment(sp)) {
8000740a:	78 38       	ld.w	r8,r12[0xc]
8000740c:	10 99       	mov	r9,r8
8000740e:	e2 19 00 08 	andl	r9,0x8,COH
80007412:	c5 71       	brne	800074c0 <sys_trim+0xe4>

    if (m->topsize > pad) {
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
80007414:	ee 03 00 0b 	add	r11,r7,r3
80007418:	20 1b       	sub	r11,1
8000741a:	0c 1b       	sub	r11,r6
8000741c:	f6 03 0d 0a 	divu	r10,r11,r3
80007420:	f4 c7 00 01 	sub	r7,r10,1
80007424:	a7 37       	mul	r7,r3
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
80007426:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000742a:	c1 30       	breq	80007450 <sys_trim+0x74>
          if (HAVE_MMAP &&
              sp->size >= extra &&
8000742c:	78 1c       	ld.w	r12,r12[0x4]
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
          if (HAVE_MMAP &&
8000742e:	18 37       	cp.w	r7,r12
80007430:	e0 8b 00 48 	brhi	800074c0 <sys_trim+0xe4>
  }
}

/* Return true if segment contains a segment link */
static int has_segment_link(mstate m, msegmentptr ss) {
  msegmentptr sp = &m->seg;
80007434:	ea c9 fe 48 	sub	r9,r5,-440
  for (;;) {
    if ((char*)sp >= ss->base && (char*)sp < ss->base + ss->size)
80007438:	68 08       	ld.w	r8,r4[0x0]
8000743a:	f0 0c 00 0b 	add	r11,r8,r12
8000743e:	12 38       	cp.w	r8,r9
80007440:	e0 8b 00 04 	brhi	80007448 <sys_trim+0x6c>
80007444:	16 39       	cp.w	r9,r11
80007446:	c3 d3       	brcs	800074c0 <sys_trim+0xe4>
      return 1;
    if ((sp = sp->next) == 0)
80007448:	72 29       	ld.w	r9,r9[0x8]
8000744a:	58 09       	cp.w	r9,0
8000744c:	cf 91       	brne	8000743e <sys_trim+0x62>
8000744e:	c7 99       	rjmp	80007740 <sys_trim+0x364>
              released = extra;
            }
          }
        }
        else if (HAVE_MORECORE) {
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
80007450:	e0 6b ff fe 	mov	r11,65534
80007454:	ea 1b 7f ff 	orh	r11,0x7fff
80007458:	16 37       	cp.w	r7,r11
8000745a:	e0 88 00 05 	brls	80007464 <sys_trim+0x88>
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
8000745e:	fc 17 80 00 	movh	r7,0x8000
80007462:	06 17       	sub	r7,r3
          ACQUIRE_MORECORE_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
80007464:	30 0c       	mov	r12,0
80007466:	f0 1f 00 be 	mcall	8000775c <sys_trim+0x380>
            if (old_br == sp->base + sp->size) {
8000746a:	68 06       	ld.w	r6,r4[0x0]
8000746c:	68 18       	ld.w	r8,r4[0x4]
8000746e:	10 06       	add	r6,r8
80007470:	18 36       	cp.w	r6,r12
80007472:	c2 71       	brne	800074c0 <sys_trim+0xe4>
              char* rel_br = (char*)(CALL_MORECORE(-extra));
80007474:	ee 0c 11 00 	rsub	r12,r7,0
80007478:	f0 1f 00 b9 	mcall	8000775c <sys_trim+0x380>
8000747c:	18 97       	mov	r7,r12
              char* new_br = (char*)(CALL_MORECORE(0));
8000747e:	30 0c       	mov	r12,0
80007480:	f0 1f 00 b7 	mcall	8000775c <sys_trim+0x380>
              if (rel_br != CMFAIL && new_br < old_br)
80007484:	5b f7       	cp.w	r7,-1
80007486:	5f 19       	srne	r9
80007488:	18 36       	cp.w	r6,r12
8000748a:	f9 b8 0b 01 	movhi	r8,1
8000748e:	f9 b8 08 00 	movls	r8,0
80007492:	f3 e8 00 08 	and	r8,r9,r8
80007496:	c1 50       	breq	800074c0 <sys_trim+0xe4>
                released = old_br - new_br;
80007498:	18 16       	sub	r6,r12
8000749a:	50 16       	stdsp	sp[0x4],r6
          }
          RELEASE_MORECORE_LOCK();
        }
      }

      if (released != 0) {
8000749c:	40 19       	lddsp	r9,sp[0x4]
8000749e:	58 09       	cp.w	r9,0
800074a0:	c1 20       	breq	800074c4 <sys_trim+0xe8>
        sp->size -= released;
800074a2:	68 18       	ld.w	r8,r4[0x4]
800074a4:	12 18       	sub	r8,r9
800074a6:	89 18       	st.w	r4[0x4],r8
        m->footprint -= released;
800074a8:	ea f8 01 ac 	ld.w	r8,r5[428]
800074ac:	12 18       	sub	r8,r9
800074ae:	eb 48 01 ac 	st.w	r5[428],r8
        init_top(m, m->top, m->topsize - released);
800074b2:	6a 3a       	ld.w	r10,r5[0xc]
800074b4:	12 1a       	sub	r10,r9
800074b6:	6a 6b       	ld.w	r11,r5[0x18]
800074b8:	0a 9c       	mov	r12,r5
800074ba:	f0 1f 00 aa 	mcall	80007760 <sys_trim+0x384>
800074be:	c0 38       	rjmp	800074c4 <sys_trim+0xe8>
800074c0:	30 08       	mov	r8,0
800074c2:	50 18       	stdsp	sp[0x4],r8

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
800074c4:	ea f7 01 c0 	ld.w	r7,r5[448]
  while (sp != 0) {
800074c8:	58 07       	cp.w	r7,0
800074ca:	e0 80 01 2b 	breq	80007720 <sys_trim+0x344>
/* -----------------------  system deallocation -------------------------- */

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
800074ce:	ea c3 fe 48 	sub	r3,r5,-440
800074d2:	30 0b       	mov	r11,0
800074d4:	50 0b       	stdsp	sp[0x0],r11
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
800074d6:	16 90       	mov	r0,r11
800074d8:	0a 94       	mov	r4,r5
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
    char* base = sp->base;
800074da:	6e 0c       	ld.w	r12,r7[0x0]
    size_t size = sp->size;
800074dc:	6e 15       	ld.w	r5,r7[0x4]
    msegmentptr next = sp->next;
800074de:	6e 26       	ld.w	r6,r7[0x8]
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
800074e0:	6e 38       	ld.w	r8,r7[0xc]
800074e2:	e2 18 00 09 	andl	r8,0x9,COH
800074e6:	58 18       	cp.w	r8,1
800074e8:	e0 81 01 17 	brne	80007716 <sys_trim+0x33a>
      mchunkptr p = align_as_chunk(base);
800074ec:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
800074f0:	c0 31       	brne	800074f6 <sys_trim+0x11a>
800074f2:	00 98       	mov	r8,r0
800074f4:	c0 58       	rjmp	800074fe <sys_trim+0x122>
800074f6:	f0 08 11 08 	rsub	r8,r8,8
800074fa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800074fe:	f8 08 00 08 	add	r8,r12,r8
80007502:	10 92       	mov	r2,r8
      size_t psize = chunksize(p);
80007504:	70 11       	ld.w	r1,r8[0x4]
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
80007506:	02 99       	mov	r9,r1
80007508:	e2 19 00 02 	andl	r9,0x2,COH
8000750c:	e0 81 01 05 	brne	80007716 <sys_trim+0x33a>
    char* base = sp->base;
    size_t size = sp->size;
    msegmentptr next = sp->next;
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
      mchunkptr p = align_as_chunk(base);
      size_t psize = chunksize(p);
80007510:	e0 11 ff fc 	andl	r1,0xfffc
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
80007514:	02 08       	add	r8,r1
80007516:	ea c9 00 28 	sub	r9,r5,40
8000751a:	f8 09 00 09 	add	r9,r12,r9
8000751e:	12 38       	cp.w	r8,r9
80007520:	e0 83 00 fb 	brlo	80007716 <sys_trim+0x33a>
        tchunkptr tp = (tchunkptr)p;
        assert(segment_holds(sp, (char*)sp));
        if (p == m->dv) {
80007524:	68 58       	ld.w	r8,r4[0x14]
80007526:	10 32       	cp.w	r2,r8
80007528:	c0 41       	brne	80007530 <sys_trim+0x154>
          m->dv = 0;
8000752a:	89 50       	st.w	r4[0x14],r0
          m->dvsize = 0;
8000752c:	89 20       	st.w	r4[0x8],r0
8000752e:	c6 48       	rjmp	800075f6 <sys_trim+0x21a>
        }
        else {
          unlink_large_chunk(m, tp);
80007530:	64 6b       	ld.w	r11,r2[0x18]
80007532:	64 38       	ld.w	r8,r2[0xc]
80007534:	10 32       	cp.w	r2,r8
80007536:	c0 90       	breq	80007548 <sys_trim+0x16c>
80007538:	64 29       	ld.w	r9,r2[0x8]
8000753a:	68 4a       	ld.w	r10,r4[0x10]
8000753c:	12 3a       	cp.w	r10,r9
8000753e:	e0 8b 00 21 	brhi	80007580 <sys_trim+0x1a4>
80007542:	93 38       	st.w	r9[0xc],r8
80007544:	91 29       	st.w	r8[0x8],r9
80007546:	c1 d8       	rjmp	80007580 <sys_trim+0x1a4>
80007548:	64 58       	ld.w	r8,r2[0x14]
8000754a:	58 08       	cp.w	r8,0
8000754c:	c0 40       	breq	80007554 <sys_trim+0x178>
8000754e:	e4 ca ff ec 	sub	r10,r2,-20
80007552:	c0 a8       	rjmp	80007566 <sys_trim+0x18a>
80007554:	64 48       	ld.w	r8,r2[0x10]
80007556:	58 08       	cp.w	r8,0
80007558:	c1 40       	breq	80007580 <sys_trim+0x1a4>
8000755a:	e4 ca ff f0 	sub	r10,r2,-16
8000755e:	c0 48       	rjmp	80007566 <sys_trim+0x18a>
80007560:	f0 ca ff ec 	sub	r10,r8,-20
80007564:	12 98       	mov	r8,r9
80007566:	70 59       	ld.w	r9,r8[0x14]
80007568:	58 09       	cp.w	r9,0
8000756a:	cf b1       	brne	80007560 <sys_trim+0x184>
8000756c:	70 49       	ld.w	r9,r8[0x10]
8000756e:	58 09       	cp.w	r9,0
80007570:	c0 40       	breq	80007578 <sys_trim+0x19c>
80007572:	f0 ca ff f0 	sub	r10,r8,-16
80007576:	cf 7b       	rjmp	80007564 <sys_trim+0x188>
80007578:	68 49       	ld.w	r9,r4[0x10]
8000757a:	14 39       	cp.w	r9,r10
8000757c:	f5 f0 8a 00 	st.wls	r10[0x0],r0
80007580:	58 0b       	cp.w	r11,0
80007582:	c3 a0       	breq	800075f6 <sys_trim+0x21a>
80007584:	64 79       	ld.w	r9,r2[0x1c]
80007586:	f2 ca ff b5 	sub	r10,r9,-75
8000758a:	e8 0a 03 2a 	ld.w	r10,r4[r10<<0x2]
8000758e:	14 32       	cp.w	r2,r10
80007590:	c1 01       	brne	800075b0 <sys_trim+0x1d4>
80007592:	2b 59       	sub	r9,-75
80007594:	e8 09 09 28 	st.w	r4[r9<<0x2],r8
80007598:	58 08       	cp.w	r8,0
8000759a:	c1 71       	brne	800075c8 <sys_trim+0x1ec>
8000759c:	64 78       	ld.w	r8,r2[0x1c]
8000759e:	30 19       	mov	r9,1
800075a0:	f2 08 09 48 	lsl	r8,r9,r8
800075a4:	5c d8       	com	r8
800075a6:	68 19       	ld.w	r9,r4[0x4]
800075a8:	f3 e8 00 08 	and	r8,r9,r8
800075ac:	89 18       	st.w	r4[0x4],r8
800075ae:	c2 48       	rjmp	800075f6 <sys_trim+0x21a>
800075b0:	68 49       	ld.w	r9,r4[0x10]
800075b2:	16 39       	cp.w	r9,r11
800075b4:	e0 8b 00 08 	brhi	800075c4 <sys_trim+0x1e8>
800075b8:	76 49       	ld.w	r9,r11[0x10]
800075ba:	12 32       	cp.w	r2,r9
800075bc:	f7 f8 0a 04 	st.weq	r11[0x10],r8
800075c0:	f7 f8 1a 05 	st.wne	r11[0x14],r8
800075c4:	58 08       	cp.w	r8,0
800075c6:	c1 80       	breq	800075f6 <sys_trim+0x21a>
800075c8:	68 49       	ld.w	r9,r4[0x10]
800075ca:	10 39       	cp.w	r9,r8
800075cc:	e0 8b 00 15 	brhi	800075f6 <sys_trim+0x21a>
800075d0:	91 6b       	st.w	r8[0x18],r11
800075d2:	64 49       	ld.w	r9,r2[0x10]
800075d4:	58 09       	cp.w	r9,0
800075d6:	c0 70       	breq	800075e4 <sys_trim+0x208>
800075d8:	68 4a       	ld.w	r10,r4[0x10]
800075da:	12 3a       	cp.w	r10,r9
800075dc:	f1 f9 8a 04 	st.wls	r8[0x10],r9
800075e0:	f3 f8 8a 06 	st.wls	r9[0x18],r8
800075e4:	64 59       	ld.w	r9,r2[0x14]
800075e6:	58 09       	cp.w	r9,0
800075e8:	c0 70       	breq	800075f6 <sys_trim+0x21a>
800075ea:	68 4a       	ld.w	r10,r4[0x10]
800075ec:	12 3a       	cp.w	r10,r9
800075ee:	f1 f9 8a 05 	st.wls	r8[0x14],r9
800075f2:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        }
        if (CALL_MUNMAP(base, size) == 0) {
800075f6:	0a 9b       	mov	r11,r5
800075f8:	f0 1f 00 5b 	mcall	80007764 <sys_trim+0x388>
800075fc:	c0 b1       	brne	80007612 <sys_trim+0x236>
          released += size;
800075fe:	40 08       	lddsp	r8,sp[0x0]
80007600:	0a 08       	add	r8,r5
80007602:	50 08       	stdsp	sp[0x0],r8
          m->footprint -= size;
80007604:	e8 f8 01 ac 	ld.w	r8,r4[428]
80007608:	0a 18       	sub	r8,r5
8000760a:	e9 48 01 ac 	st.w	r4[428],r8
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
8000760e:	87 26       	st.w	r3[0x8],r6
80007610:	c8 48       	rjmp	80007718 <sys_trim+0x33c>
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
80007612:	e2 08 16 08 	lsr	r8,r1,0x8
80007616:	c0 31       	brne	8000761c <sys_trim+0x240>
80007618:	00 99       	mov	r9,r0
8000761a:	c2 d8       	rjmp	80007674 <sys_trim+0x298>
8000761c:	e0 48 ff ff 	cp.w	r8,65535
80007620:	e0 88 00 04 	brls	80007628 <sys_trim+0x24c>
80007624:	31 f9       	mov	r9,31
80007626:	c2 78       	rjmp	80007674 <sys_trim+0x298>
80007628:	f0 cb 01 00 	sub	r11,r8,256
8000762c:	b1 8b       	lsr	r11,0x10
8000762e:	e2 1b 00 08 	andl	r11,0x8,COH
80007632:	f0 0b 09 48 	lsl	r8,r8,r11
80007636:	f0 ca 10 00 	sub	r10,r8,4096
8000763a:	b1 8a       	lsr	r10,0x10
8000763c:	e2 1a 00 04 	andl	r10,0x4,COH
80007640:	f0 0a 09 48 	lsl	r8,r8,r10
80007644:	f0 c9 40 00 	sub	r9,r8,16384
80007648:	b1 89       	lsr	r9,0x10
8000764a:	e2 19 00 02 	andl	r9,0x2,COH
8000764e:	f0 09 09 48 	lsl	r8,r8,r9
80007652:	af 98       	lsr	r8,0xf
80007654:	f6 0b 11 0e 	rsub	r11,r11,14
80007658:	f6 0a 01 0a 	sub	r10,r11,r10
8000765c:	f4 09 01 09 	sub	r9,r10,r9
80007660:	f2 08 00 08 	add	r8,r9,r8
80007664:	f0 c9 ff f9 	sub	r9,r8,-7
80007668:	e2 09 0a 49 	lsr	r9,r1,r9
8000766c:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80007670:	f2 08 00 19 	add	r9,r9,r8<<0x1
80007674:	85 79       	st.w	r2[0x1c],r9
80007676:	85 50       	st.w	r2[0x14],r0
80007678:	85 40       	st.w	r2[0x10],r0
8000767a:	68 18       	ld.w	r8,r4[0x4]
8000767c:	30 1b       	mov	r11,1
8000767e:	f6 09 09 4a 	lsl	r10,r11,r9
80007682:	f5 e8 00 0b 	and	r11,r10,r8
80007686:	c0 e1       	brne	800076a2 <sys_trim+0x2c6>
80007688:	f5 e8 10 08 	or	r8,r10,r8
8000768c:	89 18       	st.w	r4[0x4],r8
8000768e:	2b 59       	sub	r9,-75
80007690:	e8 09 09 22 	st.w	r4[r9<<0x2],r2
80007694:	e8 09 00 29 	add	r9,r4,r9<<0x2
80007698:	85 69       	st.w	r2[0x18],r9
8000769a:	85 32       	st.w	r2[0xc],r2
8000769c:	85 22       	st.w	r2[0x8],r2
8000769e:	0e 93       	mov	r3,r7
800076a0:	c3 c8       	rjmp	80007718 <sys_trim+0x33c>
800076a2:	f2 c8 ff b5 	sub	r8,r9,-75
800076a6:	e8 08 03 28 	ld.w	r8,r4[r8<<0x2]
800076aa:	59 f9       	cp.w	r9,31
800076ac:	c0 31       	brne	800076b2 <sys_trim+0x2d6>
800076ae:	00 99       	mov	r9,r0
800076b0:	c0 48       	rjmp	800076b8 <sys_trim+0x2dc>
800076b2:	a1 99       	lsr	r9,0x1
800076b4:	f2 09 11 19 	rsub	r9,r9,25
800076b8:	e2 09 09 49 	lsl	r9,r1,r9
800076bc:	70 1a       	ld.w	r10,r8[0x4]
800076be:	e0 1a ff fc 	andl	r10,0xfffc
800076c2:	14 31       	cp.w	r1,r10
800076c4:	c1 a0       	breq	800076f8 <sys_trim+0x31c>
800076c6:	f2 0b 16 1f 	lsr	r11,r9,0x1f
800076ca:	f6 ca ff fc 	sub	r10,r11,-4
800076ce:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
800076d2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800076d6:	58 0a       	cp.w	r10,0
800076d8:	c0 40       	breq	800076e0 <sys_trim+0x304>
800076da:	a1 79       	lsl	r9,0x1
800076dc:	14 98       	mov	r8,r10
800076de:	ce fb       	rjmp	800076bc <sys_trim+0x2e0>
800076e0:	68 49       	ld.w	r9,r4[0x10]
800076e2:	18 39       	cp.w	r9,r12
800076e4:	e0 8b 00 19 	brhi	80007716 <sys_trim+0x33a>
800076e8:	2f cb       	sub	r11,-4
800076ea:	f0 0b 09 22 	st.w	r8[r11<<0x2],r2
800076ee:	85 68       	st.w	r2[0x18],r8
800076f0:	85 32       	st.w	r2[0xc],r2
800076f2:	85 22       	st.w	r2[0x8],r2
800076f4:	0e 93       	mov	r3,r7
800076f6:	c1 18       	rjmp	80007718 <sys_trim+0x33c>
800076f8:	70 29       	ld.w	r9,r8[0x8]
800076fa:	68 4a       	ld.w	r10,r4[0x10]
800076fc:	10 3a       	cp.w	r10,r8
800076fe:	e0 8b 00 0c 	brhi	80007716 <sys_trim+0x33a>
80007702:	12 3a       	cp.w	r10,r9
80007704:	e0 8b 00 09 	brhi	80007716 <sys_trim+0x33a>
80007708:	93 32       	st.w	r9[0xc],r2
8000770a:	91 22       	st.w	r8[0x8],r2
8000770c:	85 29       	st.w	r2[0x8],r9
8000770e:	85 38       	st.w	r2[0xc],r8
80007710:	85 60       	st.w	r2[0x18],r0
80007712:	0e 93       	mov	r3,r7
80007714:	c0 28       	rjmp	80007718 <sys_trim+0x33c>
80007716:	0e 93       	mov	r3,r7
/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
80007718:	58 06       	cp.w	r6,0
8000771a:	c0 60       	breq	80007726 <sys_trim+0x34a>
8000771c:	0c 97       	mov	r7,r6
8000771e:	cd ea       	rjmp	800074da <sys_trim+0xfe>
80007720:	30 09       	mov	r9,0
80007722:	50 09       	stdsp	sp[0x0],r9
80007724:	c0 28       	rjmp	80007728 <sys_trim+0x34c>
80007726:	08 95       	mov	r5,r4
      }
    }

    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);
80007728:	40 08       	lddsp	r8,sp[0x0]
8000772a:	40 1b       	lddsp	r11,sp[0x4]
8000772c:	16 08       	add	r8,r11

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0)
8000772e:	c0 51       	brne	80007738 <sys_trim+0x35c>
      m->trim_check = MAX_SIZE_T;
80007730:	3f f9       	mov	r9,-1
80007732:	8b 79       	st.w	r5[0x1c],r9
80007734:	c0 28       	rjmp	80007738 <sys_trim+0x35c>
80007736:	30 08       	mov	r8,0
80007738:	58 08       	cp.w	r8,0
  }

  return (released != 0)? 1 : 0;
}
8000773a:	5f 1c       	srne	r12
8000773c:	2f ed       	sub	sp,-8
8000773e:	d8 32       	popm	r0-r7,pc
          if (HAVE_MMAP &&
              sp->size >= extra &&
              !has_segment_link(m, sp)) { /* can't shrink if pinned */
            size_t newsize = sp->size - extra;
            /* Prefer mremap, fall back to munmap */
            if ((CALL_MREMAP(sp->base, sp->size, newsize, 0) != MFAIL) ||
80007740:	0e 1c       	sub	r12,r7
80007742:	0e 9b       	mov	r11,r7
80007744:	f0 0c 00 0c 	add	r12,r8,r12
80007748:	f0 1f 00 07 	mcall	80007764 <sys_trim+0x388>
8000774c:	fe 91 fe ba 	brne	800074c0 <sys_trim+0xe4>
80007750:	50 17       	stdsp	sp[0x4],r7
80007752:	ca 5a       	rjmp	8000749c <sys_trim+0xc0>
80007754:	00 00       	add	r0,r0
80007756:	14 ec       	st.h	--r10,r12
80007758:	80 00       	ld.sh	r0,r0[0x0]
8000775a:	73 34       	ld.w	r4,r9[0x4c]
8000775c:	80 00       	ld.sh	r0,r0[0x0]
8000775e:	94 b4       	ld.uh	r4,r10[0x6]
80007760:	80 00       	ld.sh	r0,r0[0x0]
80007762:	73 98       	ld.w	r8,r9[0x64]
80007764:	80 00       	ld.sh	r0,r0[0x0]
80007766:	95 18       	st.w	r10[0x4],r8

80007768 <mspace_free>:
#if defined(__ICCAVR32__)
  #pragma diag_default=Pe111
#endif
}

void mspace_free(mspace msp, void* mem) {
80007768:	d4 21       	pushm	r4-r7,lr
  if (mem != 0) {
8000776a:	58 0b       	cp.w	r11,0
8000776c:	e0 80 02 3f 	breq	80007bea <mspace_free+0x482>
    mchunkptr p  = mem2chunk(mem);
80007770:	f6 c8 00 08 	sub	r8,r11,8
#if FOOTERS
    mstate fm = get_mstate_for(p);
#else /* FOOTERS */
    mstate fm = (mstate)msp;
80007774:	18 97       	mov	r7,r12
      USAGE_ERROR_ACTION(fm, p);
      return;
    }
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
80007776:	78 4e       	ld.w	lr,r12[0x10]
80007778:	10 3e       	cp.w	lr,r8
8000777a:	e0 8b 02 38 	brhi	80007bea <mspace_free+0x482>
8000777e:	70 19       	ld.w	r9,r8[0x4]
80007780:	12 9a       	mov	r10,r9
80007782:	e2 1a 00 02 	andl	r10,0x2,COH
80007786:	e0 80 02 32 	breq	80007bea <mspace_free+0x482>
        size_t psize = chunksize(p);
8000778a:	12 96       	mov	r6,r9
8000778c:	e0 16 ff fc 	andl	r6,0xfffc
        mchunkptr next = chunk_plus_offset(p, psize);
80007790:	f0 06 00 0b 	add	r11,r8,r6
        if (!pinuse(p)) {
80007794:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80007798:	e0 81 00 b7 	brne	80007906 <mspace_free+0x19e>
          size_t prevsize = p->prev_foot;
8000779c:	70 0c       	ld.w	r12,r8[0x0]
          if ((prevsize & IS_MMAPPED_BIT) != 0) {
8000779e:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
800077a2:	c1 10       	breq	800077c4 <mspace_free+0x5c>
            prevsize &= ~IS_MMAPPED_BIT;
800077a4:	a1 cc       	cbr	r12,0x0
            psize += prevsize + MMAP_FOOT_PAD;
800077a6:	18 06       	add	r6,r12
800077a8:	2f 06       	sub	r6,-16
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
800077aa:	0c 9b       	mov	r11,r6
800077ac:	f0 0c 01 0c 	sub	r12,r8,r12
800077b0:	f0 1f 01 0f 	mcall	80007bec <mspace_free+0x484>
800077b4:	e0 81 02 1b 	brne	80007bea <mspace_free+0x482>
              fm->footprint -= psize;
800077b8:	ee f8 01 ac 	ld.w	r8,r7[428]
800077bc:	0c 18       	sub	r8,r6
800077be:	ef 48 01 ac 	st.w	r7[428],r8
800077c2:	d8 22       	popm	r4-r7,pc
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
800077c4:	18 18       	sub	r8,r12
            psize += prevsize;
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
800077c6:	10 3e       	cp.w	lr,r8
800077c8:	e0 8b 02 11 	brhi	80007bea <mspace_free+0x482>
              fm->footprint -= psize;
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
            psize += prevsize;
800077cc:	18 06       	add	r6,r12
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
              if (p != fm->dv) {
800077ce:	6e 59       	ld.w	r9,r7[0x14]
800077d0:	12 38       	cp.w	r8,r9
800077d2:	e0 80 00 8b 	breq	800078e8 <mspace_free+0x180>
                unlink_chunk(fm, p, prevsize);
800077d6:	a3 9c       	lsr	r12,0x3
800077d8:	59 fc       	cp.w	r12,31
800077da:	e0 8b 00 20 	brhi	8000781a <mspace_free+0xb2>
800077de:	70 29       	ld.w	r9,r8[0x8]
800077e0:	70 3a       	ld.w	r10,r8[0xc]
800077e2:	14 39       	cp.w	r9,r10
800077e4:	c0 a1       	brne	800077f8 <mspace_free+0x90>
800077e6:	30 19       	mov	r9,1
800077e8:	f2 0c 09 49 	lsl	r9,r9,r12
800077ec:	5c d9       	com	r9
800077ee:	6e 0a       	ld.w	r10,r7[0x0]
800077f0:	f5 e9 00 09 	and	r9,r10,r9
800077f4:	8f 09       	st.w	r7[0x0],r9
800077f6:	c8 88       	rjmp	80007906 <mspace_free+0x19e>
800077f8:	ee c5 ff dc 	sub	r5,r7,-36
800077fc:	ea 0c 00 3c 	add	r12,r5,r12<<0x3
80007800:	18 39       	cp.w	r9,r12
80007802:	c0 40       	breq	8000780a <mspace_free+0xa2>
80007804:	12 3e       	cp.w	lr,r9
80007806:	e0 8b 00 80 	brhi	80007906 <mspace_free+0x19e>
8000780a:	18 3a       	cp.w	r10,r12
8000780c:	c0 40       	breq	80007814 <mspace_free+0xac>
8000780e:	14 3e       	cp.w	lr,r10
80007810:	e0 8b 00 7b 	brhi	80007906 <mspace_free+0x19e>
80007814:	93 3a       	st.w	r9[0xc],r10
80007816:	95 29       	st.w	r10[0x8],r9
80007818:	c7 78       	rjmp	80007906 <mspace_free+0x19e>
8000781a:	10 95       	mov	r5,r8
8000781c:	70 64       	ld.w	r4,r8[0x18]
8000781e:	70 3c       	ld.w	r12,r8[0xc]
80007820:	10 3c       	cp.w	r12,r8
80007822:	c0 c0       	breq	8000783a <mspace_free+0xd2>
80007824:	70 29       	ld.w	r9,r8[0x8]
80007826:	12 3e       	cp.w	lr,r9
80007828:	f8 09 17 b0 	movhi	r9,r12
8000782c:	f3 fc 8a 03 	st.wls	r9[0xc],r12
80007830:	f9 f9 8a 02 	st.wls	r12[0x8],r9
80007834:	f8 09 17 80 	movls	r9,r12
80007838:	c1 c8       	rjmp	80007870 <mspace_free+0x108>
8000783a:	78 59       	ld.w	r9,r12[0x14]
8000783c:	58 09       	cp.w	r9,0
8000783e:	c0 30       	breq	80007844 <mspace_free+0xdc>
80007840:	2e cc       	sub	r12,-20
80007842:	c0 98       	rjmp	80007854 <mspace_free+0xec>
80007844:	78 49       	ld.w	r9,r12[0x10]
80007846:	58 09       	cp.w	r9,0
80007848:	c1 40       	breq	80007870 <mspace_free+0x108>
8000784a:	2f 0c       	sub	r12,-16
8000784c:	c0 48       	rjmp	80007854 <mspace_free+0xec>
8000784e:	f2 cc ff ec 	sub	r12,r9,-20
80007852:	14 99       	mov	r9,r10
80007854:	72 5a       	ld.w	r10,r9[0x14]
80007856:	58 0a       	cp.w	r10,0
80007858:	cf b1       	brne	8000784e <mspace_free+0xe6>
8000785a:	72 4a       	ld.w	r10,r9[0x10]
8000785c:	58 0a       	cp.w	r10,0
8000785e:	c0 40       	breq	80007866 <mspace_free+0xfe>
80007860:	f2 cc ff f0 	sub	r12,r9,-16
80007864:	cf 7b       	rjmp	80007852 <mspace_free+0xea>
80007866:	18 3e       	cp.w	lr,r12
80007868:	f9 ba 08 00 	movls	r10,0
8000786c:	f9 fa 8a 00 	st.wls	r12[0x0],r10
80007870:	58 04       	cp.w	r4,0
80007872:	c4 a0       	breq	80007906 <mspace_free+0x19e>
80007874:	6a 7a       	ld.w	r10,r5[0x1c]
80007876:	f4 cc ff b5 	sub	r12,r10,-75
8000787a:	ee 0c 03 2c 	ld.w	r12,r7[r12<<0x2]
8000787e:	0a 3c       	cp.w	r12,r5
80007880:	c1 01       	brne	800078a0 <mspace_free+0x138>
80007882:	2b 5a       	sub	r10,-75
80007884:	ee 0a 09 29 	st.w	r7[r10<<0x2],r9
80007888:	58 09       	cp.w	r9,0
8000788a:	c1 71       	brne	800078b8 <mspace_free+0x150>
8000788c:	78 79       	ld.w	r9,r12[0x1c]
8000788e:	30 1a       	mov	r10,1
80007890:	f4 09 09 49 	lsl	r9,r10,r9
80007894:	5c d9       	com	r9
80007896:	6e 1a       	ld.w	r10,r7[0x4]
80007898:	f5 e9 00 09 	and	r9,r10,r9
8000789c:	8f 19       	st.w	r7[0x4],r9
8000789e:	c3 48       	rjmp	80007906 <mspace_free+0x19e>
800078a0:	6e 4a       	ld.w	r10,r7[0x10]
800078a2:	08 3a       	cp.w	r10,r4
800078a4:	e0 8b 00 08 	brhi	800078b4 <mspace_free+0x14c>
800078a8:	68 4a       	ld.w	r10,r4[0x10]
800078aa:	0a 3a       	cp.w	r10,r5
800078ac:	e9 f9 0a 04 	st.weq	r4[0x10],r9
800078b0:	e9 f9 1a 05 	st.wne	r4[0x14],r9
800078b4:	58 09       	cp.w	r9,0
800078b6:	c2 80       	breq	80007906 <mspace_free+0x19e>
800078b8:	6e 4a       	ld.w	r10,r7[0x10]
800078ba:	12 3a       	cp.w	r10,r9
800078bc:	e0 8b 00 25 	brhi	80007906 <mspace_free+0x19e>
800078c0:	93 64       	st.w	r9[0x18],r4
800078c2:	6a 4a       	ld.w	r10,r5[0x10]
800078c4:	58 0a       	cp.w	r10,0
800078c6:	c0 70       	breq	800078d4 <mspace_free+0x16c>
800078c8:	6e 4c       	ld.w	r12,r7[0x10]
800078ca:	14 3c       	cp.w	r12,r10
800078cc:	f3 fa 8a 04 	st.wls	r9[0x10],r10
800078d0:	f5 f9 8a 06 	st.wls	r10[0x18],r9
800078d4:	6a 5a       	ld.w	r10,r5[0x14]
800078d6:	58 0a       	cp.w	r10,0
800078d8:	c1 70       	breq	80007906 <mspace_free+0x19e>
800078da:	6e 4c       	ld.w	r12,r7[0x10]
800078dc:	14 3c       	cp.w	r12,r10
800078de:	e0 8b 00 14 	brhi	80007906 <mspace_free+0x19e>
800078e2:	93 5a       	st.w	r9[0x14],r10
800078e4:	95 69       	st.w	r10[0x18],r9
800078e6:	c1 08       	rjmp	80007906 <mspace_free+0x19e>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
800078e8:	76 19       	ld.w	r9,r11[0x4]
800078ea:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
800078ee:	58 39       	cp.w	r9,3
800078f0:	c0 b1       	brne	80007906 <mspace_free+0x19e>
                fm->dvsize = psize;
800078f2:	8f 26       	st.w	r7[0x8],r6
                set_free_with_pinuse(p, psize, next);
800078f4:	76 19       	ld.w	r9,r11[0x4]
800078f6:	a1 c9       	cbr	r9,0x0
800078f8:	97 19       	st.w	r11[0x4],r9
800078fa:	0c 99       	mov	r9,r6
800078fc:	a1 a9       	sbr	r9,0x0
800078fe:	91 19       	st.w	r8[0x4],r9
80007900:	f0 06 09 06 	st.w	r8[r6],r6
                goto postaction;
80007904:	d8 22       	popm	r4-r7,pc
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
80007906:	16 38       	cp.w	r8,r11
80007908:	e0 82 01 71 	brhs	80007bea <mspace_free+0x482>
8000790c:	76 19       	ld.w	r9,r11[0x4]
8000790e:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80007912:	e0 80 01 6c 	breq	80007bea <mspace_free+0x482>
          if (!cinuse(next)) {  /* consolidate forward */
80007916:	12 9a       	mov	r10,r9
80007918:	e2 1a 00 02 	andl	r10,0x2,COH
8000791c:	e0 81 00 c2 	brne	80007aa0 <mspace_free+0x338>
            if (next == fm->top) {
80007920:	6e 6a       	ld.w	r10,r7[0x18]
80007922:	16 3a       	cp.w	r10,r11
80007924:	c1 91       	brne	80007956 <mspace_free+0x1ee>
              size_t tsize = fm->topsize += psize;
80007926:	6e 39       	ld.w	r9,r7[0xc]
80007928:	12 06       	add	r6,r9
8000792a:	8f 36       	st.w	r7[0xc],r6
              fm->top = p;
8000792c:	8f 68       	st.w	r7[0x18],r8
              p->head = tsize | PINUSE_BIT;
8000792e:	0c 99       	mov	r9,r6
80007930:	a1 a9       	sbr	r9,0x0
80007932:	91 19       	st.w	r8[0x4],r9
              if (p == fm->dv) {
80007934:	6e 59       	ld.w	r9,r7[0x14]
                fm->dv = 0;
80007936:	10 39       	cp.w	r9,r8
80007938:	f9 b8 00 00 	moveq	r8,0
8000793c:	ef f8 0a 05 	st.weq	r7[0x14],r8
                fm->dvsize = 0;
80007940:	ef f8 0a 02 	st.weq	r7[0x8],r8
              }
              if (should_trim(fm, tsize))
80007944:	6e 78       	ld.w	r8,r7[0x1c]
80007946:	10 36       	cp.w	r6,r8
80007948:	e0 88 01 51 	brls	80007bea <mspace_free+0x482>
                sys_trim(fm, 0);
8000794c:	30 0b       	mov	r11,0
8000794e:	0e 9c       	mov	r12,r7
80007950:	f0 1f 00 a8 	mcall	80007bf0 <mspace_free+0x488>
80007954:	d8 22       	popm	r4-r7,pc
              goto postaction;
            }
            else if (next == fm->dv) {
80007956:	6e 5a       	ld.w	r10,r7[0x14]
80007958:	16 3a       	cp.w	r10,r11
8000795a:	c0 b1       	brne	80007970 <mspace_free+0x208>
              size_t dsize = fm->dvsize += psize;
8000795c:	6e 29       	ld.w	r9,r7[0x8]
8000795e:	12 06       	add	r6,r9
80007960:	8f 26       	st.w	r7[0x8],r6
              fm->dv = p;
80007962:	8f 58       	st.w	r7[0x14],r8
              set_size_and_pinuse_of_free_chunk(p, dsize);
80007964:	0c 99       	mov	r9,r6
80007966:	a1 a9       	sbr	r9,0x0
80007968:	91 19       	st.w	r8[0x4],r9
8000796a:	f0 06 09 06 	st.w	r8[r6],r6
              goto postaction;
8000796e:	d8 22       	popm	r4-r7,pc
            }
            else {
              size_t nsize = chunksize(next);
80007970:	e0 19 ff fc 	andl	r9,0xfffc
              psize += nsize;
80007974:	12 06       	add	r6,r9
              unlink_chunk(fm, next, nsize);
80007976:	a3 99       	lsr	r9,0x3
80007978:	59 f9       	cp.w	r9,31
8000797a:	e0 8b 00 22 	brhi	800079be <mspace_free+0x256>
8000797e:	76 2a       	ld.w	r10,r11[0x8]
80007980:	76 3b       	ld.w	r11,r11[0xc]
80007982:	16 3a       	cp.w	r10,r11
80007984:	c0 a1       	brne	80007998 <mspace_free+0x230>
80007986:	30 1a       	mov	r10,1
80007988:	f4 09 09 49 	lsl	r9,r10,r9
8000798c:	5c d9       	com	r9
8000798e:	6e 0a       	ld.w	r10,r7[0x0]
80007990:	f5 e9 00 09 	and	r9,r10,r9
80007994:	8f 09       	st.w	r7[0x0],r9
80007996:	c7 b8       	rjmp	80007a8c <mspace_free+0x324>
80007998:	ee cc ff dc 	sub	r12,r7,-36
8000799c:	f8 09 00 39 	add	r9,r12,r9<<0x3
800079a0:	12 3a       	cp.w	r10,r9
800079a2:	c0 50       	breq	800079ac <mspace_free+0x244>
800079a4:	6e 4c       	ld.w	r12,r7[0x10]
800079a6:	14 3c       	cp.w	r12,r10
800079a8:	e0 8b 00 72 	brhi	80007a8c <mspace_free+0x324>
800079ac:	12 3b       	cp.w	r11,r9
800079ae:	c0 50       	breq	800079b8 <mspace_free+0x250>
800079b0:	6e 49       	ld.w	r9,r7[0x10]
800079b2:	16 39       	cp.w	r9,r11
800079b4:	e0 8b 00 6c 	brhi	80007a8c <mspace_free+0x324>
800079b8:	95 3b       	st.w	r10[0xc],r11
800079ba:	97 2a       	st.w	r11[0x8],r10
800079bc:	c6 88       	rjmp	80007a8c <mspace_free+0x324>
800079be:	76 6e       	ld.w	lr,r11[0x18]
800079c0:	76 3c       	ld.w	r12,r11[0xc]
800079c2:	16 3c       	cp.w	r12,r11
800079c4:	c0 d0       	breq	800079de <mspace_free+0x276>
800079c6:	76 29       	ld.w	r9,r11[0x8]
800079c8:	6e 4a       	ld.w	r10,r7[0x10]
800079ca:	12 3a       	cp.w	r10,r9
800079cc:	f8 09 17 b0 	movhi	r9,r12
800079d0:	f3 fc 8a 03 	st.wls	r9[0xc],r12
800079d4:	f9 f9 8a 02 	st.wls	r12[0x8],r9
800079d8:	f8 09 17 80 	movls	r9,r12
800079dc:	c1 d8       	rjmp	80007a16 <mspace_free+0x2ae>
800079de:	78 59       	ld.w	r9,r12[0x14]
800079e0:	58 09       	cp.w	r9,0
800079e2:	c0 30       	breq	800079e8 <mspace_free+0x280>
800079e4:	2e cc       	sub	r12,-20
800079e6:	c0 98       	rjmp	800079f8 <mspace_free+0x290>
800079e8:	78 49       	ld.w	r9,r12[0x10]
800079ea:	58 09       	cp.w	r9,0
800079ec:	c1 50       	breq	80007a16 <mspace_free+0x2ae>
800079ee:	2f 0c       	sub	r12,-16
800079f0:	c0 48       	rjmp	800079f8 <mspace_free+0x290>
800079f2:	f2 cc ff ec 	sub	r12,r9,-20
800079f6:	14 99       	mov	r9,r10
800079f8:	72 5a       	ld.w	r10,r9[0x14]
800079fa:	58 0a       	cp.w	r10,0
800079fc:	cf b1       	brne	800079f2 <mspace_free+0x28a>
800079fe:	72 4a       	ld.w	r10,r9[0x10]
80007a00:	58 0a       	cp.w	r10,0
80007a02:	c0 40       	breq	80007a0a <mspace_free+0x2a2>
80007a04:	f2 cc ff f0 	sub	r12,r9,-16
80007a08:	cf 7b       	rjmp	800079f6 <mspace_free+0x28e>
80007a0a:	6e 4a       	ld.w	r10,r7[0x10]
80007a0c:	18 3a       	cp.w	r10,r12
80007a0e:	f9 ba 08 00 	movls	r10,0
80007a12:	f9 fa 8a 00 	st.wls	r12[0x0],r10
80007a16:	58 0e       	cp.w	lr,0
80007a18:	c3 a0       	breq	80007a8c <mspace_free+0x324>
80007a1a:	76 7a       	ld.w	r10,r11[0x1c]
80007a1c:	f4 cc ff b5 	sub	r12,r10,-75
80007a20:	ee 0c 03 2c 	ld.w	r12,r7[r12<<0x2]
80007a24:	16 3c       	cp.w	r12,r11
80007a26:	c1 01       	brne	80007a46 <mspace_free+0x2de>
80007a28:	2b 5a       	sub	r10,-75
80007a2a:	ee 0a 09 29 	st.w	r7[r10<<0x2],r9
80007a2e:	58 09       	cp.w	r9,0
80007a30:	c1 71       	brne	80007a5e <mspace_free+0x2f6>
80007a32:	78 79       	ld.w	r9,r12[0x1c]
80007a34:	30 1a       	mov	r10,1
80007a36:	f4 09 09 49 	lsl	r9,r10,r9
80007a3a:	5c d9       	com	r9
80007a3c:	6e 1a       	ld.w	r10,r7[0x4]
80007a3e:	f5 e9 00 09 	and	r9,r10,r9
80007a42:	8f 19       	st.w	r7[0x4],r9
80007a44:	c2 48       	rjmp	80007a8c <mspace_free+0x324>
80007a46:	6e 4a       	ld.w	r10,r7[0x10]
80007a48:	1c 3a       	cp.w	r10,lr
80007a4a:	e0 8b 00 08 	brhi	80007a5a <mspace_free+0x2f2>
80007a4e:	7c 4a       	ld.w	r10,lr[0x10]
80007a50:	16 3a       	cp.w	r10,r11
80007a52:	fd f9 0a 04 	st.weq	lr[0x10],r9
80007a56:	fd f9 1a 05 	st.wne	lr[0x14],r9
80007a5a:	58 09       	cp.w	r9,0
80007a5c:	c1 80       	breq	80007a8c <mspace_free+0x324>
80007a5e:	6e 4a       	ld.w	r10,r7[0x10]
80007a60:	12 3a       	cp.w	r10,r9
80007a62:	e0 8b 00 15 	brhi	80007a8c <mspace_free+0x324>
80007a66:	93 6e       	st.w	r9[0x18],lr
80007a68:	76 4a       	ld.w	r10,r11[0x10]
80007a6a:	58 0a       	cp.w	r10,0
80007a6c:	c0 70       	breq	80007a7a <mspace_free+0x312>
80007a6e:	6e 4c       	ld.w	r12,r7[0x10]
80007a70:	14 3c       	cp.w	r12,r10
80007a72:	f3 fa 8a 04 	st.wls	r9[0x10],r10
80007a76:	f5 f9 8a 06 	st.wls	r10[0x18],r9
80007a7a:	76 5a       	ld.w	r10,r11[0x14]
80007a7c:	58 0a       	cp.w	r10,0
80007a7e:	c0 70       	breq	80007a8c <mspace_free+0x324>
80007a80:	6e 4b       	ld.w	r11,r7[0x10]
80007a82:	14 3b       	cp.w	r11,r10
80007a84:	f3 fa 8a 05 	st.wls	r9[0x14],r10
80007a88:	f5 f9 8a 06 	st.wls	r10[0x18],r9
              set_size_and_pinuse_of_free_chunk(p, psize);
80007a8c:	0c 99       	mov	r9,r6
80007a8e:	a1 a9       	sbr	r9,0x0
80007a90:	91 19       	st.w	r8[0x4],r9
80007a92:	f0 06 09 06 	st.w	r8[r6],r6
              if (p == fm->dv) {
80007a96:	6e 59       	ld.w	r9,r7[0x14]
80007a98:	10 39       	cp.w	r9,r8
80007a9a:	c0 a1       	brne	80007aae <mspace_free+0x346>
                fm->dvsize = psize;
80007a9c:	8f 26       	st.w	r7[0x8],r6
                goto postaction;
80007a9e:	d8 22       	popm	r4-r7,pc
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
80007aa0:	a1 c9       	cbr	r9,0x0
80007aa2:	97 19       	st.w	r11[0x4],r9
80007aa4:	0c 99       	mov	r9,r6
80007aa6:	a1 a9       	sbr	r9,0x0
80007aa8:	91 19       	st.w	r8[0x4],r9
80007aaa:	f0 06 09 06 	st.w	r8[r6],r6
          insert_chunk(fm, p, psize);
80007aae:	ec 09 16 03 	lsr	r9,r6,0x3
80007ab2:	59 f9       	cp.w	r9,31
80007ab4:	e0 8b 00 1b 	brhi	80007aea <mspace_free+0x382>
80007ab8:	ee ca ff dc 	sub	r10,r7,-36
80007abc:	f4 09 00 3a 	add	r10,r10,r9<<0x3
80007ac0:	6e 0b       	ld.w	r11,r7[0x0]
80007ac2:	30 1c       	mov	r12,1
80007ac4:	f8 09 09 49 	lsl	r9,r12,r9
80007ac8:	f3 eb 00 0c 	and	r12,r9,r11
80007acc:	c0 51       	brne	80007ad6 <mspace_free+0x36e>
80007ace:	16 49       	or	r9,r11
80007ad0:	8f 09       	st.w	r7[0x0],r9
80007ad2:	14 99       	mov	r9,r10
80007ad4:	c0 68       	rjmp	80007ae0 <mspace_free+0x378>
80007ad6:	74 29       	ld.w	r9,r10[0x8]
80007ad8:	6e 4b       	ld.w	r11,r7[0x10]
80007ada:	16 39       	cp.w	r9,r11
80007adc:	f4 09 17 30 	movlo	r9,r10
80007ae0:	95 28       	st.w	r10[0x8],r8
80007ae2:	93 38       	st.w	r9[0xc],r8
80007ae4:	91 29       	st.w	r8[0x8],r9
80007ae6:	91 3a       	st.w	r8[0xc],r10
80007ae8:	d8 22       	popm	r4-r7,pc
80007aea:	ec 09 16 08 	lsr	r9,r6,0x8
80007aee:	c0 31       	brne	80007af4 <mspace_free+0x38c>
80007af0:	30 0a       	mov	r10,0
80007af2:	c2 d8       	rjmp	80007b4c <mspace_free+0x3e4>
80007af4:	e0 49 ff ff 	cp.w	r9,65535
80007af8:	e0 88 00 04 	brls	80007b00 <mspace_free+0x398>
80007afc:	31 fa       	mov	r10,31
80007afe:	c2 78       	rjmp	80007b4c <mspace_free+0x3e4>
80007b00:	f2 ce 01 00 	sub	lr,r9,256
80007b04:	b1 8e       	lsr	lr,0x10
80007b06:	e2 1e 00 08 	andl	lr,0x8,COH
80007b0a:	f2 0e 09 49 	lsl	r9,r9,lr
80007b0e:	f2 cc 10 00 	sub	r12,r9,4096
80007b12:	b1 8c       	lsr	r12,0x10
80007b14:	e2 1c 00 04 	andl	r12,0x4,COH
80007b18:	f2 0c 09 49 	lsl	r9,r9,r12
80007b1c:	f2 cb 40 00 	sub	r11,r9,16384
80007b20:	b1 8b       	lsr	r11,0x10
80007b22:	e2 1b 00 02 	andl	r11,0x2,COH
80007b26:	f2 0b 09 49 	lsl	r9,r9,r11
80007b2a:	af 99       	lsr	r9,0xf
80007b2c:	fc 0e 11 0e 	rsub	lr,lr,14
80007b30:	fc 0c 01 0c 	sub	r12,lr,r12
80007b34:	f8 0b 01 0b 	sub	r11,r12,r11
80007b38:	f6 09 00 09 	add	r9,r11,r9
80007b3c:	f2 ca ff f9 	sub	r10,r9,-7
80007b40:	ec 0a 0a 4a 	lsr	r10,r6,r10
80007b44:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007b48:	f4 09 00 1a 	add	r10,r10,r9<<0x1
80007b4c:	91 7a       	st.w	r8[0x1c],r10
80007b4e:	30 09       	mov	r9,0
80007b50:	91 59       	st.w	r8[0x14],r9
80007b52:	91 49       	st.w	r8[0x10],r9
80007b54:	6e 19       	ld.w	r9,r7[0x4]
80007b56:	30 1b       	mov	r11,1
80007b58:	f6 0a 09 4b 	lsl	r11,r11,r10
80007b5c:	f7 e9 00 0c 	and	r12,r11,r9
80007b60:	c0 d1       	brne	80007b7a <mspace_free+0x412>
80007b62:	f7 e9 10 09 	or	r9,r11,r9
80007b66:	8f 19       	st.w	r7[0x4],r9
80007b68:	2b 5a       	sub	r10,-75
80007b6a:	ee 0a 09 28 	st.w	r7[r10<<0x2],r8
80007b6e:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
80007b72:	91 6a       	st.w	r8[0x18],r10
80007b74:	91 38       	st.w	r8[0xc],r8
80007b76:	91 28       	st.w	r8[0x8],r8
80007b78:	d8 22       	popm	r4-r7,pc
80007b7a:	f4 c9 ff b5 	sub	r9,r10,-75
80007b7e:	ee 09 03 29 	ld.w	r9,r7[r9<<0x2]
80007b82:	59 fa       	cp.w	r10,31
80007b84:	c0 31       	brne	80007b8a <mspace_free+0x422>
80007b86:	30 0a       	mov	r10,0
80007b88:	c0 48       	rjmp	80007b90 <mspace_free+0x428>
80007b8a:	a1 9a       	lsr	r10,0x1
80007b8c:	f4 0a 11 19 	rsub	r10,r10,25
80007b90:	ec 0a 09 4a 	lsl	r10,r6,r10
80007b94:	72 1b       	ld.w	r11,r9[0x4]
80007b96:	e0 1b ff fc 	andl	r11,0xfffc
80007b9a:	0c 3b       	cp.w	r11,r6
80007b9c:	c1 90       	breq	80007bce <mspace_free+0x466>
80007b9e:	f4 0c 16 1f 	lsr	r12,r10,0x1f
80007ba2:	f8 cb ff fc 	sub	r11,r12,-4
80007ba6:	f2 0b 00 2e 	add	lr,r9,r11<<0x2
80007baa:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80007bae:	58 0b       	cp.w	r11,0
80007bb0:	c0 40       	breq	80007bb8 <mspace_free+0x450>
80007bb2:	a1 7a       	lsl	r10,0x1
80007bb4:	16 99       	mov	r9,r11
80007bb6:	ce fb       	rjmp	80007b94 <mspace_free+0x42c>
80007bb8:	6e 4a       	ld.w	r10,r7[0x10]
80007bba:	1c 3a       	cp.w	r10,lr
80007bbc:	e0 8b 00 17 	brhi	80007bea <mspace_free+0x482>
80007bc0:	2f cc       	sub	r12,-4
80007bc2:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
80007bc6:	91 69       	st.w	r8[0x18],r9
80007bc8:	91 38       	st.w	r8[0xc],r8
80007bca:	91 28       	st.w	r8[0x8],r8
80007bcc:	d8 22       	popm	r4-r7,pc
80007bce:	72 2a       	ld.w	r10,r9[0x8]
80007bd0:	6e 4b       	ld.w	r11,r7[0x10]
80007bd2:	12 3b       	cp.w	r11,r9
80007bd4:	e0 8b 00 0b 	brhi	80007bea <mspace_free+0x482>
80007bd8:	14 3b       	cp.w	r11,r10
80007bda:	e0 8b 00 08 	brhi	80007bea <mspace_free+0x482>
80007bde:	95 38       	st.w	r10[0xc],r8
80007be0:	93 28       	st.w	r9[0x8],r8
80007be2:	91 2a       	st.w	r8[0x8],r10
80007be4:	91 39       	st.w	r8[0xc],r9
80007be6:	30 09       	mov	r9,0
80007be8:	91 69       	st.w	r8[0x18],r9
80007bea:	d8 22       	popm	r4-r7,pc
80007bec:	80 00       	ld.sh	r0,r0[0x0]
80007bee:	95 18       	st.w	r10[0x4],r8
80007bf0:	80 00       	ld.sh	r0,r0[0x0]
80007bf2:	73 dc       	ld.w	r12,r9[0x74]

80007bf4 <tmalloc_small>:
  }
  return 0;
}

/* allocate a small request from the best fitting chunk in a treebin */
static void* tmalloc_small(mstate m, size_t nb) {
80007bf4:	eb cd 40 f8 	pushm	r3-r7,lr
  tchunkptr t, v;
  size_t rsize;
  bindex_t i;
  binmap_t leastbit = least_bit(m->treemap);
80007bf8:	78 18       	ld.w	r8,r12[0x4]
  compute_bit2idx(leastbit, i);
80007bfa:	f0 09 11 00 	rsub	r9,r8,0
80007bfe:	10 69       	and	r9,r8
80007c00:	20 19       	sub	r9,1
80007c02:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007c06:	e2 1a 00 10 	andl	r10,0x10,COH
80007c0a:	f2 0a 0a 49 	lsr	r9,r9,r10
80007c0e:	f2 08 16 05 	lsr	r8,r9,0x5
80007c12:	e2 18 00 08 	andl	r8,0x8,COH
80007c16:	f0 0a 00 0e 	add	lr,r8,r10
80007c1a:	f2 08 0a 49 	lsr	r9,r9,r8
80007c1e:	f2 0a 16 02 	lsr	r10,r9,0x2
80007c22:	e2 1a 00 04 	andl	r10,0x4,COH
80007c26:	14 0e       	add	lr,r10
80007c28:	f2 0a 0a 49 	lsr	r9,r9,r10
80007c2c:	f2 0a 16 01 	lsr	r10,r9,0x1
80007c30:	e2 1a 00 02 	andl	r10,0x2,COH
80007c34:	14 0e       	add	lr,r10
80007c36:	f2 0a 0a 49 	lsr	r9,r9,r10
80007c3a:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1

  v = t = *treebin_at(m, i);
80007c3e:	f2 08 0a 49 	lsr	r9,r9,r8
80007c42:	1c 08       	add	r8,lr
80007c44:	12 08       	add	r8,r9
80007c46:	2b 58       	sub	r8,-75
80007c48:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
  rsize = chunksize(t) - nb;
80007c4c:	70 1e       	ld.w	lr,r8[0x4]
80007c4e:	e0 1e ff fc 	andl	lr,0xfffc
80007c52:	16 1e       	sub	lr,r11
80007c54:	10 9a       	mov	r10,r8

  while ((t = leftmost_child(t)) != 0) {
80007c56:	c0 b8       	rjmp	80007c6c <tmalloc_small+0x78>
80007c58:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80007c5a:	70 19       	ld.w	r9,r8[0x4]
80007c5c:	e0 19 ff fc 	andl	r9,0xfffc
80007c60:	16 19       	sub	r9,r11
    if (trem < rsize) {
80007c62:	12 3e       	cp.w	lr,r9
80007c64:	f2 0e 17 b0 	movhi	lr,r9
80007c68:	f0 0a 17 b0 	movhi	r10,r8
  compute_bit2idx(leastbit, i);

  v = t = *treebin_at(m, i);
  rsize = chunksize(t) - nb;

  while ((t = leftmost_child(t)) != 0) {
80007c6c:	70 49       	ld.w	r9,r8[0x10]
80007c6e:	58 09       	cp.w	r9,0
80007c70:	cf 41       	brne	80007c58 <tmalloc_small+0x64>
80007c72:	70 58       	ld.w	r8,r8[0x14]
80007c74:	58 08       	cp.w	r8,0
80007c76:	cf 21       	brne	80007c5a <tmalloc_small+0x66>
      rsize = trem;
      v = t;
    }
  }

  if (RTCHECK(ok_address(m, v))) {
80007c78:	78 43       	ld.w	r3,r12[0x10]
80007c7a:	14 33       	cp.w	r3,r10
80007c7c:	e0 8b 00 a6 	brhi	80007dc8 <tmalloc_small+0x1d4>
    mchunkptr r = chunk_plus_offset(v, nb);
80007c80:	14 94       	mov	r4,r10
80007c82:	f4 0b 00 05 	add	r5,r10,r11
    assert(chunksize(v) == rsize + nb);
    if (RTCHECK(ok_next(v, r))) {
80007c86:	0a 3a       	cp.w	r10,r5
80007c88:	e0 82 00 a0 	brhs	80007dc8 <tmalloc_small+0x1d4>
      unlink_large_chunk(m, v);
80007c8c:	74 66       	ld.w	r6,r10[0x18]
80007c8e:	74 37       	ld.w	r7,r10[0xc]
80007c90:	14 37       	cp.w	r7,r10
80007c92:	c0 c0       	breq	80007caa <tmalloc_small+0xb6>
80007c94:	74 28       	ld.w	r8,r10[0x8]
80007c96:	10 33       	cp.w	r3,r8
80007c98:	ee 08 17 b0 	movhi	r8,r7
80007c9c:	f1 f7 8a 03 	st.wls	r8[0xc],r7
80007ca0:	ef f8 8a 02 	st.wls	r7[0x8],r8
80007ca4:	ee 08 17 80 	movls	r8,r7
80007ca8:	c1 c8       	rjmp	80007ce0 <tmalloc_small+0xec>
80007caa:	6e 58       	ld.w	r8,r7[0x14]
80007cac:	58 08       	cp.w	r8,0
80007cae:	c0 30       	breq	80007cb4 <tmalloc_small+0xc0>
80007cb0:	2e c7       	sub	r7,-20
80007cb2:	c0 98       	rjmp	80007cc4 <tmalloc_small+0xd0>
80007cb4:	6e 48       	ld.w	r8,r7[0x10]
80007cb6:	58 08       	cp.w	r8,0
80007cb8:	c1 40       	breq	80007ce0 <tmalloc_small+0xec>
80007cba:	2f 07       	sub	r7,-16
80007cbc:	c0 48       	rjmp	80007cc4 <tmalloc_small+0xd0>
80007cbe:	f0 c7 ff ec 	sub	r7,r8,-20
80007cc2:	12 98       	mov	r8,r9
80007cc4:	70 59       	ld.w	r9,r8[0x14]
80007cc6:	58 09       	cp.w	r9,0
80007cc8:	cf b1       	brne	80007cbe <tmalloc_small+0xca>
80007cca:	70 49       	ld.w	r9,r8[0x10]
80007ccc:	58 09       	cp.w	r9,0
80007cce:	c0 40       	breq	80007cd6 <tmalloc_small+0xe2>
80007cd0:	f0 c7 ff f0 	sub	r7,r8,-16
80007cd4:	cf 7b       	rjmp	80007cc2 <tmalloc_small+0xce>
80007cd6:	0e 33       	cp.w	r3,r7
80007cd8:	f9 b9 08 00 	movls	r9,0
80007cdc:	ef f9 8a 00 	st.wls	r7[0x0],r9
80007ce0:	58 06       	cp.w	r6,0
80007ce2:	c3 a0       	breq	80007d56 <tmalloc_small+0x162>
80007ce4:	74 79       	ld.w	r9,r10[0x1c]
80007ce6:	f2 c7 ff b5 	sub	r7,r9,-75
80007cea:	f8 07 03 27 	ld.w	r7,r12[r7<<0x2]
80007cee:	14 37       	cp.w	r7,r10
80007cf0:	c1 01       	brne	80007d10 <tmalloc_small+0x11c>
80007cf2:	2b 59       	sub	r9,-75
80007cf4:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80007cf8:	58 08       	cp.w	r8,0
80007cfa:	c1 71       	brne	80007d28 <tmalloc_small+0x134>
80007cfc:	6e 78       	ld.w	r8,r7[0x1c]
80007cfe:	30 19       	mov	r9,1
80007d00:	f2 08 09 48 	lsl	r8,r9,r8
80007d04:	5c d8       	com	r8
80007d06:	78 19       	ld.w	r9,r12[0x4]
80007d08:	f3 e8 00 08 	and	r8,r9,r8
80007d0c:	99 18       	st.w	r12[0x4],r8
80007d0e:	c2 48       	rjmp	80007d56 <tmalloc_small+0x162>
80007d10:	78 49       	ld.w	r9,r12[0x10]
80007d12:	0c 39       	cp.w	r9,r6
80007d14:	e0 8b 00 08 	brhi	80007d24 <tmalloc_small+0x130>
80007d18:	6c 49       	ld.w	r9,r6[0x10]
80007d1a:	14 39       	cp.w	r9,r10
80007d1c:	ed f8 0a 04 	st.weq	r6[0x10],r8
80007d20:	ed f8 1a 05 	st.wne	r6[0x14],r8
80007d24:	58 08       	cp.w	r8,0
80007d26:	c1 80       	breq	80007d56 <tmalloc_small+0x162>
80007d28:	78 49       	ld.w	r9,r12[0x10]
80007d2a:	10 39       	cp.w	r9,r8
80007d2c:	e0 8b 00 15 	brhi	80007d56 <tmalloc_small+0x162>
80007d30:	91 66       	st.w	r8[0x18],r6
80007d32:	74 49       	ld.w	r9,r10[0x10]
80007d34:	58 09       	cp.w	r9,0
80007d36:	c0 70       	breq	80007d44 <tmalloc_small+0x150>
80007d38:	78 47       	ld.w	r7,r12[0x10]
80007d3a:	12 37       	cp.w	r7,r9
80007d3c:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80007d40:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80007d44:	74 59       	ld.w	r9,r10[0x14]
80007d46:	58 09       	cp.w	r9,0
80007d48:	c0 70       	breq	80007d56 <tmalloc_small+0x162>
80007d4a:	78 47       	ld.w	r7,r12[0x10]
80007d4c:	12 37       	cp.w	r7,r9
80007d4e:	f1 f9 8a 05 	st.wls	r8[0x14],r9
80007d52:	f3 f8 8a 06 	st.wls	r9[0x18],r8
      if (rsize < MIN_CHUNK_SIZE)
80007d56:	58 fe       	cp.w	lr,15
80007d58:	e0 8b 00 0d 	brhi	80007d72 <tmalloc_small+0x17e>
        set_inuse_and_pinuse(m, v, (rsize + nb));
80007d5c:	fc 0b 00 0b 	add	r11,lr,r11
80007d60:	16 98       	mov	r8,r11
80007d62:	e8 18 00 03 	orl	r8,0x3
80007d66:	95 18       	st.w	r10[0x4],r8
80007d68:	16 04       	add	r4,r11
80007d6a:	68 18       	ld.w	r8,r4[0x4]
80007d6c:	a1 a8       	sbr	r8,0x0
80007d6e:	89 18       	st.w	r4[0x4],r8
80007d70:	c2 88       	rjmp	80007dc0 <tmalloc_small+0x1cc>
      else {
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
80007d72:	e8 1b 00 03 	orl	r11,0x3
80007d76:	95 1b       	st.w	r10[0x4],r11
        set_size_and_pinuse_of_free_chunk(r, rsize);
80007d78:	1c 98       	mov	r8,lr
80007d7a:	a1 a8       	sbr	r8,0x0
80007d7c:	8b 18       	st.w	r5[0x4],r8
80007d7e:	ea 0e 09 0e 	st.w	r5[lr],lr
        replace_dv(m, r, rsize);
80007d82:	78 28       	ld.w	r8,r12[0x8]
80007d84:	58 08       	cp.w	r8,0
80007d86:	c1 b0       	breq	80007dbc <tmalloc_small+0x1c8>
80007d88:	78 59       	ld.w	r9,r12[0x14]
80007d8a:	a3 98       	lsr	r8,0x3
80007d8c:	f8 cb ff dc 	sub	r11,r12,-36
80007d90:	f6 08 00 3b 	add	r11,r11,r8<<0x3
80007d94:	78 07       	ld.w	r7,r12[0x0]
80007d96:	30 16       	mov	r6,1
80007d98:	ec 08 09 48 	lsl	r8,r6,r8
80007d9c:	f1 e7 00 06 	and	r6,r8,r7
80007da0:	c0 51       	brne	80007daa <tmalloc_small+0x1b6>
80007da2:	0e 48       	or	r8,r7
80007da4:	99 08       	st.w	r12[0x0],r8
80007da6:	16 98       	mov	r8,r11
80007da8:	c0 68       	rjmp	80007db4 <tmalloc_small+0x1c0>
80007daa:	76 28       	ld.w	r8,r11[0x8]
80007dac:	78 47       	ld.w	r7,r12[0x10]
80007dae:	0e 38       	cp.w	r8,r7
80007db0:	f6 08 17 30 	movlo	r8,r11
80007db4:	97 29       	st.w	r11[0x8],r9
80007db6:	91 39       	st.w	r8[0xc],r9
80007db8:	93 28       	st.w	r9[0x8],r8
80007dba:	93 3b       	st.w	r9[0xc],r11
80007dbc:	99 2e       	st.w	r12[0x8],lr
80007dbe:	99 55       	st.w	r12[0x14],r5
      }
      return chunk2mem(v);
80007dc0:	f4 cc ff f8 	sub	r12,r10,-8
80007dc4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80007dc8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

80007dcc <tmalloc_large>:
}

/* ---------------------------- malloc support --------------------------- */

/* allocate a large request from the best fitting chunk in a treebin */
static void* tmalloc_large(mstate m, size_t nb) {
80007dcc:	eb cd 40 fc 	pushm	r2-r7,lr
  tchunkptr v = 0;
  size_t rsize = -nb; /* Unsigned negation */
80007dd0:	f6 07 11 00 	rsub	r7,r11,0
  tchunkptr t;
  bindex_t idx;
  compute_tree_index(nb, idx);
80007dd4:	f6 08 16 08 	lsr	r8,r11,0x8
80007dd8:	c0 31       	brne	80007dde <tmalloc_large+0x12>
80007dda:	30 03       	mov	r3,0
80007ddc:	c2 d8       	rjmp	80007e36 <tmalloc_large+0x6a>
80007dde:	e0 48 ff ff 	cp.w	r8,65535
80007de2:	e0 88 00 04 	brls	80007dea <tmalloc_large+0x1e>
80007de6:	31 f3       	mov	r3,31
80007de8:	c2 78       	rjmp	80007e36 <tmalloc_large+0x6a>
80007dea:	f0 ce 01 00 	sub	lr,r8,256
80007dee:	b1 8e       	lsr	lr,0x10
80007df0:	e2 1e 00 08 	andl	lr,0x8,COH
80007df4:	f0 0e 09 48 	lsl	r8,r8,lr
80007df8:	f0 ca 10 00 	sub	r10,r8,4096
80007dfc:	b1 8a       	lsr	r10,0x10
80007dfe:	e2 1a 00 04 	andl	r10,0x4,COH
80007e02:	f0 0a 09 48 	lsl	r8,r8,r10
80007e06:	f0 c9 40 00 	sub	r9,r8,16384
80007e0a:	b1 89       	lsr	r9,0x10
80007e0c:	e2 19 00 02 	andl	r9,0x2,COH
80007e10:	f0 09 09 48 	lsl	r8,r8,r9
80007e14:	af 98       	lsr	r8,0xf
80007e16:	fc 0e 11 0e 	rsub	lr,lr,14
80007e1a:	fc 0a 01 0a 	sub	r10,lr,r10
80007e1e:	f4 09 01 09 	sub	r9,r10,r9
80007e22:	f2 08 00 08 	add	r8,r9,r8
80007e26:	f0 c3 ff f9 	sub	r3,r8,-7
80007e2a:	f6 03 0a 43 	lsr	r3,r11,r3
80007e2e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007e32:	e6 08 00 13 	add	r3,r3,r8<<0x1

  if ((t = *treebin_at(m, idx)) != 0) {
80007e36:	e6 c8 ff b5 	sub	r8,r3,-75
80007e3a:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80007e3e:	58 08       	cp.w	r8,0
80007e40:	c0 31       	brne	80007e46 <tmalloc_large+0x7a>
80007e42:	30 04       	mov	r4,0
80007e44:	c3 88       	rjmp	80007eb4 <tmalloc_large+0xe8>
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
80007e46:	59 f3       	cp.w	r3,31
80007e48:	c0 31       	brne	80007e4e <tmalloc_large+0x82>
80007e4a:	30 0e       	mov	lr,0
80007e4c:	c0 58       	rjmp	80007e56 <tmalloc_large+0x8a>
80007e4e:	e6 0e 16 01 	lsr	lr,r3,0x1
80007e52:	fc 0e 11 19 	rsub	lr,lr,25
80007e56:	f6 0e 09 4e 	lsl	lr,r11,lr
80007e5a:	30 06       	mov	r6,0
80007e5c:	0c 94       	mov	r4,r6
        if ((rsize = trem) == 0)
          break;
      }
      rt = t->child[1];
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
      if (rt != 0 && rt != t)
80007e5e:	30 05       	mov	r5,0
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    for (;;) {
      tchunkptr rt;
      size_t trem = chunksize(t) - nb;
80007e60:	70 19       	ld.w	r9,r8[0x4]
80007e62:	e0 19 ff fc 	andl	r9,0xfffc
80007e66:	16 19       	sub	r9,r11
      if (trem < rsize) {
80007e68:	12 37       	cp.w	r7,r9
80007e6a:	e0 88 00 09 	brls	80007e7c <tmalloc_large+0xb0>
        v = t;
        if ((rsize = trem) == 0)
80007e6e:	58 09       	cp.w	r9,0
80007e70:	c0 41       	brne	80007e78 <tmalloc_large+0xac>
80007e72:	12 97       	mov	r7,r9
80007e74:	10 94       	mov	r4,r8
80007e76:	c1 88       	rjmp	80007ea6 <tmalloc_large+0xda>
80007e78:	12 97       	mov	r7,r9
80007e7a:	10 94       	mov	r4,r8
          break;
      }
      rt = t->child[1];
80007e7c:	70 59       	ld.w	r9,r8[0x14]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
80007e7e:	fc 0a 16 1f 	lsr	r10,lr,0x1f
80007e82:	2f ca       	sub	r10,-4
80007e84:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
      if (rt != 0 && rt != t)
80007e88:	58 09       	cp.w	r9,0
80007e8a:	5f 12       	srne	r2
80007e8c:	10 39       	cp.w	r9,r8
80007e8e:	5f 1a       	srne	r10
80007e90:	e5 ea 00 0a 	and	r10,r2,r10
80007e94:	ea 0a 18 00 	cp.b	r10,r5
80007e98:	f2 06 17 10 	movne	r6,r9
        rst = rt;
      if (t == 0) {
80007e9c:	58 08       	cp.w	r8,0
80007e9e:	c0 30       	breq	80007ea4 <tmalloc_large+0xd8>
        t = rst; /* set t to least subtree holding sizes > nb */
        break;
      }
      sizebits <<= 1;
80007ea0:	a1 7e       	lsl	lr,0x1
    }
80007ea2:	cd fb       	rjmp	80007e60 <tmalloc_large+0x94>
80007ea4:	0c 98       	mov	r8,r6
  }

  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
80007ea6:	58 08       	cp.w	r8,0
80007ea8:	5f 0a       	sreq	r10
80007eaa:	58 04       	cp.w	r4,0
80007eac:	5f 09       	sreq	r9
80007eae:	f5 e9 00 09 	and	r9,r10,r9
80007eb2:	c3 40       	breq	80007f1a <tmalloc_large+0x14e>
    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
80007eb4:	30 29       	mov	r9,2
80007eb6:	f2 03 09 43 	lsl	r3,r9,r3
80007eba:	e6 09 11 00 	rsub	r9,r3,0
80007ebe:	f3 e3 10 03 	or	r3,r9,r3
80007ec2:	78 19       	ld.w	r9,r12[0x4]
80007ec4:	12 63       	and	r3,r9
    if (leftbits != 0) {
80007ec6:	c2 a0       	breq	80007f1a <tmalloc_large+0x14e>
      bindex_t i;
      binmap_t leastbit = least_bit(leftbits);
      compute_bit2idx(leastbit, i);
80007ec8:	e6 0a 11 00 	rsub	r10,r3,0
80007ecc:	06 6a       	and	r10,r3
80007ece:	20 1a       	sub	r10,1
80007ed0:	f4 09 16 0c 	lsr	r9,r10,0xc
80007ed4:	e2 19 00 10 	andl	r9,0x10,COH
80007ed8:	f4 09 0a 4a 	lsr	r10,r10,r9
80007edc:	f4 08 16 05 	lsr	r8,r10,0x5
80007ee0:	e2 18 00 08 	andl	r8,0x8,COH
80007ee4:	f0 09 00 0e 	add	lr,r8,r9
80007ee8:	f4 08 0a 4a 	lsr	r10,r10,r8
80007eec:	f4 08 16 02 	lsr	r8,r10,0x2
80007ef0:	e2 18 00 04 	andl	r8,0x4,COH
80007ef4:	10 0e       	add	lr,r8
80007ef6:	f4 08 0a 4a 	lsr	r10,r10,r8
80007efa:	f4 09 16 01 	lsr	r9,r10,0x1
80007efe:	e2 19 00 02 	andl	r9,0x2,COH
80007f02:	12 0e       	add	lr,r9
80007f04:	f4 09 0a 49 	lsr	r9,r10,r9
80007f08:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1
      t = *treebin_at(m, i);
80007f0c:	f2 08 0a 49 	lsr	r9,r9,r8
80007f10:	1c 08       	add	r8,lr
80007f12:	12 08       	add	r8,r9
80007f14:	2b 58       	sub	r8,-75
80007f16:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80007f1a:	58 08       	cp.w	r8,0
80007f1c:	c0 31       	brne	80007f22 <tmalloc_large+0x156>
80007f1e:	c1 18       	rjmp	80007f40 <tmalloc_large+0x174>
80007f20:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80007f22:	70 19       	ld.w	r9,r8[0x4]
80007f24:	e0 19 ff fc 	andl	r9,0xfffc
80007f28:	16 19       	sub	r9,r11
    if (trem < rsize) {
80007f2a:	0e 39       	cp.w	r9,r7
80007f2c:	f2 07 17 30 	movlo	r7,r9
80007f30:	f0 04 17 30 	movlo	r4,r8
      rsize = trem;
      v = t;
    }
    t = leftmost_child(t);
80007f34:	70 49       	ld.w	r9,r8[0x10]
80007f36:	58 09       	cp.w	r9,0
80007f38:	cf 41       	brne	80007f20 <tmalloc_large+0x154>
80007f3a:	70 58       	ld.w	r8,r8[0x14]
      compute_bit2idx(leastbit, i);
      t = *treebin_at(m, i);
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80007f3c:	58 08       	cp.w	r8,0
80007f3e:	cf 21       	brne	80007f22 <tmalloc_large+0x156>
    }
    t = leftmost_child(t);
  }

  /*  If dv is a better fit, return 0 so malloc will use it */
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
80007f40:	58 04       	cp.w	r4,0
80007f42:	e0 80 01 2f 	breq	800081a0 <tmalloc_large+0x3d4>
80007f46:	78 28       	ld.w	r8,r12[0x8]
80007f48:	16 18       	sub	r8,r11
80007f4a:	0e 38       	cp.w	r8,r7
80007f4c:	e0 88 01 2a 	brls	800081a0 <tmalloc_large+0x3d4>
    if (RTCHECK(ok_address(m, v))) { /* split */
80007f50:	78 45       	ld.w	r5,r12[0x10]
80007f52:	08 35       	cp.w	r5,r4
80007f54:	e0 8b 01 26 	brhi	800081a0 <tmalloc_large+0x3d4>
      mchunkptr r = chunk_plus_offset(v, nb);
80007f58:	08 93       	mov	r3,r4
80007f5a:	e8 0b 00 06 	add	r6,r4,r11
      assert(chunksize(v) == rsize + nb);
      if (RTCHECK(ok_next(v, r))) {
80007f5e:	0c 34       	cp.w	r4,r6
80007f60:	e0 82 01 20 	brhs	800081a0 <tmalloc_large+0x3d4>
        unlink_large_chunk(m, v);
80007f64:	68 6e       	ld.w	lr,r4[0x18]
80007f66:	68 3a       	ld.w	r10,r4[0xc]
80007f68:	08 3a       	cp.w	r10,r4
80007f6a:	c0 c0       	breq	80007f82 <tmalloc_large+0x1b6>
80007f6c:	68 28       	ld.w	r8,r4[0x8]
80007f6e:	10 35       	cp.w	r5,r8
80007f70:	f4 08 17 b0 	movhi	r8,r10
80007f74:	f1 fa 8a 03 	st.wls	r8[0xc],r10
80007f78:	f5 f8 8a 02 	st.wls	r10[0x8],r8
80007f7c:	f4 08 17 80 	movls	r8,r10
80007f80:	c1 c8       	rjmp	80007fb8 <tmalloc_large+0x1ec>
80007f82:	74 58       	ld.w	r8,r10[0x14]
80007f84:	58 08       	cp.w	r8,0
80007f86:	c0 30       	breq	80007f8c <tmalloc_large+0x1c0>
80007f88:	2e ca       	sub	r10,-20
80007f8a:	c0 98       	rjmp	80007f9c <tmalloc_large+0x1d0>
80007f8c:	74 48       	ld.w	r8,r10[0x10]
80007f8e:	58 08       	cp.w	r8,0
80007f90:	c1 40       	breq	80007fb8 <tmalloc_large+0x1ec>
80007f92:	2f 0a       	sub	r10,-16
80007f94:	c0 48       	rjmp	80007f9c <tmalloc_large+0x1d0>
80007f96:	f0 ca ff ec 	sub	r10,r8,-20
80007f9a:	12 98       	mov	r8,r9
80007f9c:	70 59       	ld.w	r9,r8[0x14]
80007f9e:	58 09       	cp.w	r9,0
80007fa0:	cf b1       	brne	80007f96 <tmalloc_large+0x1ca>
80007fa2:	70 49       	ld.w	r9,r8[0x10]
80007fa4:	58 09       	cp.w	r9,0
80007fa6:	c0 40       	breq	80007fae <tmalloc_large+0x1e2>
80007fa8:	f0 ca ff f0 	sub	r10,r8,-16
80007fac:	cf 7b       	rjmp	80007f9a <tmalloc_large+0x1ce>
80007fae:	14 35       	cp.w	r5,r10
80007fb0:	f9 b9 08 00 	movls	r9,0
80007fb4:	f5 f9 8a 00 	st.wls	r10[0x0],r9
80007fb8:	58 0e       	cp.w	lr,0
80007fba:	c3 a0       	breq	8000802e <tmalloc_large+0x262>
80007fbc:	68 7a       	ld.w	r10,r4[0x1c]
80007fbe:	f4 c9 ff b5 	sub	r9,r10,-75
80007fc2:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
80007fc6:	08 39       	cp.w	r9,r4
80007fc8:	c1 01       	brne	80007fe8 <tmalloc_large+0x21c>
80007fca:	2b 5a       	sub	r10,-75
80007fcc:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80007fd0:	58 08       	cp.w	r8,0
80007fd2:	c1 71       	brne	80008000 <tmalloc_large+0x234>
80007fd4:	72 78       	ld.w	r8,r9[0x1c]
80007fd6:	30 19       	mov	r9,1
80007fd8:	f2 08 09 48 	lsl	r8,r9,r8
80007fdc:	5c d8       	com	r8
80007fde:	78 19       	ld.w	r9,r12[0x4]
80007fe0:	f3 e8 00 08 	and	r8,r9,r8
80007fe4:	99 18       	st.w	r12[0x4],r8
80007fe6:	c2 48       	rjmp	8000802e <tmalloc_large+0x262>
80007fe8:	78 49       	ld.w	r9,r12[0x10]
80007fea:	1c 39       	cp.w	r9,lr
80007fec:	e0 8b 00 08 	brhi	80007ffc <tmalloc_large+0x230>
80007ff0:	7c 49       	ld.w	r9,lr[0x10]
80007ff2:	08 39       	cp.w	r9,r4
80007ff4:	fd f8 0a 04 	st.weq	lr[0x10],r8
80007ff8:	fd f8 1a 05 	st.wne	lr[0x14],r8
80007ffc:	58 08       	cp.w	r8,0
80007ffe:	c1 80       	breq	8000802e <tmalloc_large+0x262>
80008000:	78 49       	ld.w	r9,r12[0x10]
80008002:	10 39       	cp.w	r9,r8
80008004:	e0 8b 00 15 	brhi	8000802e <tmalloc_large+0x262>
80008008:	91 6e       	st.w	r8[0x18],lr
8000800a:	68 49       	ld.w	r9,r4[0x10]
8000800c:	58 09       	cp.w	r9,0
8000800e:	c0 70       	breq	8000801c <tmalloc_large+0x250>
80008010:	78 4a       	ld.w	r10,r12[0x10]
80008012:	12 3a       	cp.w	r10,r9
80008014:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80008018:	f3 f8 8a 06 	st.wls	r9[0x18],r8
8000801c:	68 59       	ld.w	r9,r4[0x14]
8000801e:	58 09       	cp.w	r9,0
80008020:	c0 70       	breq	8000802e <tmalloc_large+0x262>
80008022:	78 4a       	ld.w	r10,r12[0x10]
80008024:	12 3a       	cp.w	r10,r9
80008026:	f1 f9 8a 05 	st.wls	r8[0x14],r9
8000802a:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        if (rsize < MIN_CHUNK_SIZE)
8000802e:	58 f7       	cp.w	r7,15
80008030:	e0 8b 00 0d 	brhi	8000804a <tmalloc_large+0x27e>
          set_inuse_and_pinuse(m, v, (rsize + nb));
80008034:	ee 0b 00 0b 	add	r11,r7,r11
80008038:	16 98       	mov	r8,r11
8000803a:	e8 18 00 03 	orl	r8,0x3
8000803e:	89 18       	st.w	r4[0x4],r8
80008040:	16 03       	add	r3,r11
80008042:	66 18       	ld.w	r8,r3[0x4]
80008044:	a1 a8       	sbr	r8,0x0
80008046:	87 18       	st.w	r3[0x4],r8
80008048:	ca 88       	rjmp	80008198 <tmalloc_large+0x3cc>
        else {
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
8000804a:	e8 1b 00 03 	orl	r11,0x3
8000804e:	89 1b       	st.w	r4[0x4],r11
          set_size_and_pinuse_of_free_chunk(r, rsize);
80008050:	0e 98       	mov	r8,r7
80008052:	a1 a8       	sbr	r8,0x0
80008054:	8d 18       	st.w	r6[0x4],r8
80008056:	ec 07 09 07 	st.w	r6[r7],r7
          insert_chunk(m, r, rsize);
8000805a:	ee 08 16 03 	lsr	r8,r7,0x3
8000805e:	59 f8       	cp.w	r8,31
80008060:	e0 8b 00 1b 	brhi	80008096 <tmalloc_large+0x2ca>
80008064:	f8 c9 ff dc 	sub	r9,r12,-36
80008068:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000806c:	78 0a       	ld.w	r10,r12[0x0]
8000806e:	30 1b       	mov	r11,1
80008070:	f6 08 09 48 	lsl	r8,r11,r8
80008074:	f1 ea 00 0b 	and	r11,r8,r10
80008078:	c0 51       	brne	80008082 <tmalloc_large+0x2b6>
8000807a:	14 48       	or	r8,r10
8000807c:	99 08       	st.w	r12[0x0],r8
8000807e:	12 98       	mov	r8,r9
80008080:	c0 68       	rjmp	8000808c <tmalloc_large+0x2c0>
80008082:	72 28       	ld.w	r8,r9[0x8]
80008084:	78 4a       	ld.w	r10,r12[0x10]
80008086:	14 38       	cp.w	r8,r10
80008088:	f2 08 17 30 	movlo	r8,r9
8000808c:	93 26       	st.w	r9[0x8],r6
8000808e:	91 36       	st.w	r8[0xc],r6
80008090:	8d 28       	st.w	r6[0x8],r8
80008092:	8d 39       	st.w	r6[0xc],r9
80008094:	c8 28       	rjmp	80008198 <tmalloc_large+0x3cc>
80008096:	0c 99       	mov	r9,r6
80008098:	ee 08 16 08 	lsr	r8,r7,0x8
8000809c:	c0 31       	brne	800080a2 <tmalloc_large+0x2d6>
8000809e:	30 0a       	mov	r10,0
800080a0:	c2 d8       	rjmp	800080fa <tmalloc_large+0x32e>
800080a2:	e0 48 ff ff 	cp.w	r8,65535
800080a6:	e0 88 00 04 	brls	800080ae <tmalloc_large+0x2e2>
800080aa:	31 fa       	mov	r10,31
800080ac:	c2 78       	rjmp	800080fa <tmalloc_large+0x32e>
800080ae:	f0 ce 01 00 	sub	lr,r8,256
800080b2:	b1 8e       	lsr	lr,0x10
800080b4:	e2 1e 00 08 	andl	lr,0x8,COH
800080b8:	f0 0e 09 48 	lsl	r8,r8,lr
800080bc:	f0 cb 10 00 	sub	r11,r8,4096
800080c0:	b1 8b       	lsr	r11,0x10
800080c2:	e2 1b 00 04 	andl	r11,0x4,COH
800080c6:	f0 0b 09 48 	lsl	r8,r8,r11
800080ca:	f0 ca 40 00 	sub	r10,r8,16384
800080ce:	b1 8a       	lsr	r10,0x10
800080d0:	e2 1a 00 02 	andl	r10,0x2,COH
800080d4:	f0 0a 09 48 	lsl	r8,r8,r10
800080d8:	af 98       	lsr	r8,0xf
800080da:	fc 0e 11 0e 	rsub	lr,lr,14
800080de:	fc 0b 01 0b 	sub	r11,lr,r11
800080e2:	f6 0a 01 0a 	sub	r10,r11,r10
800080e6:	f4 08 00 08 	add	r8,r10,r8
800080ea:	f0 ca ff f9 	sub	r10,r8,-7
800080ee:	ee 0a 0a 4a 	lsr	r10,r7,r10
800080f2:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800080f6:	f4 08 00 1a 	add	r10,r10,r8<<0x1
800080fa:	93 7a       	st.w	r9[0x1c],r10
800080fc:	30 08       	mov	r8,0
800080fe:	93 58       	st.w	r9[0x14],r8
80008100:	93 48       	st.w	r9[0x10],r8
80008102:	78 18       	ld.w	r8,r12[0x4]
80008104:	30 1b       	mov	r11,1
80008106:	f6 0a 09 4b 	lsl	r11,r11,r10
8000810a:	f7 e8 00 0e 	and	lr,r11,r8
8000810e:	c0 d1       	brne	80008128 <tmalloc_large+0x35c>
80008110:	f7 e8 10 08 	or	r8,r11,r8
80008114:	99 18       	st.w	r12[0x4],r8
80008116:	2b 5a       	sub	r10,-75
80008118:	f8 0a 09 29 	st.w	r12[r10<<0x2],r9
8000811c:	f8 0a 00 2a 	add	r10,r12,r10<<0x2
80008120:	93 6a       	st.w	r9[0x18],r10
80008122:	93 39       	st.w	r9[0xc],r9
80008124:	93 29       	st.w	r9[0x8],r9
80008126:	c3 98       	rjmp	80008198 <tmalloc_large+0x3cc>
80008128:	f4 c8 ff b5 	sub	r8,r10,-75
8000812c:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80008130:	59 fa       	cp.w	r10,31
80008132:	c0 31       	brne	80008138 <tmalloc_large+0x36c>
80008134:	30 0b       	mov	r11,0
80008136:	c0 48       	rjmp	8000813e <tmalloc_large+0x372>
80008138:	a1 9a       	lsr	r10,0x1
8000813a:	f4 0b 11 19 	rsub	r11,r10,25
8000813e:	ee 0b 09 4b 	lsl	r11,r7,r11
80008142:	70 1a       	ld.w	r10,r8[0x4]
80008144:	e0 1a ff fc 	andl	r10,0xfffc
80008148:	0e 3a       	cp.w	r10,r7
8000814a:	c1 90       	breq	8000817c <tmalloc_large+0x3b0>
8000814c:	f6 0e 16 1f 	lsr	lr,r11,0x1f
80008150:	fc ca ff fc 	sub	r10,lr,-4
80008154:	f0 0a 00 26 	add	r6,r8,r10<<0x2
80008158:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000815c:	58 0a       	cp.w	r10,0
8000815e:	c0 40       	breq	80008166 <tmalloc_large+0x39a>
80008160:	a1 7b       	lsl	r11,0x1
80008162:	14 98       	mov	r8,r10
80008164:	ce fb       	rjmp	80008142 <tmalloc_large+0x376>
80008166:	78 4a       	ld.w	r10,r12[0x10]
80008168:	0c 3a       	cp.w	r10,r6
8000816a:	e0 8b 00 17 	brhi	80008198 <tmalloc_large+0x3cc>
8000816e:	2f ce       	sub	lr,-4
80008170:	f0 0e 09 29 	st.w	r8[lr<<0x2],r9
80008174:	93 68       	st.w	r9[0x18],r8
80008176:	93 39       	st.w	r9[0xc],r9
80008178:	93 29       	st.w	r9[0x8],r9
8000817a:	c0 f8       	rjmp	80008198 <tmalloc_large+0x3cc>
8000817c:	70 2a       	ld.w	r10,r8[0x8]
8000817e:	78 4b       	ld.w	r11,r12[0x10]
80008180:	10 3b       	cp.w	r11,r8
80008182:	e0 8b 00 0b 	brhi	80008198 <tmalloc_large+0x3cc>
80008186:	14 3b       	cp.w	r11,r10
80008188:	e0 8b 00 08 	brhi	80008198 <tmalloc_large+0x3cc>
8000818c:	95 39       	st.w	r10[0xc],r9
8000818e:	91 29       	st.w	r8[0x8],r9
80008190:	93 2a       	st.w	r9[0x8],r10
80008192:	93 38       	st.w	r9[0xc],r8
80008194:	30 08       	mov	r8,0
80008196:	93 68       	st.w	r9[0x18],r8
        }
        return chunk2mem(v);
80008198:	e8 cc ff f8 	sub	r12,r4,-8
8000819c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800081a0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

800081a4 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
800081a4:	eb cd 40 e0 	pushm	r5-r7,lr
800081a8:	58 0c       	cp.w	r12,0
800081aa:	e0 80 02 7d 	breq	800086a4 <free+0x500>
    mchunkptr p  = mem2chunk(mem);
800081ae:	20 8c       	sub	r12,8
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
800081b0:	fe f8 04 f8 	ld.w	r8,pc[1272]
800081b4:	70 4b       	ld.w	r11,r8[0x10]
800081b6:	18 3b       	cp.w	r11,r12
800081b8:	e0 8b 02 76 	brhi	800086a4 <free+0x500>
800081bc:	78 18       	ld.w	r8,r12[0x4]
800081be:	10 99       	mov	r9,r8
800081c0:	e2 19 00 02 	andl	r9,0x2,COH
800081c4:	e0 80 02 70 	breq	800086a4 <free+0x500>
        size_t psize = chunksize(p);
800081c8:	10 97       	mov	r7,r8
800081ca:	e0 17 ff fc 	andl	r7,0xfffc
        mchunkptr next = chunk_plus_offset(p, psize);
800081ce:	f8 07 00 0a 	add	r10,r12,r7
        if (!pinuse(p)) {
800081d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800081d6:	e0 81 00 cd 	brne	80008370 <free+0x1cc>
          size_t prevsize = p->prev_foot;
800081da:	78 08       	ld.w	r8,r12[0x0]
          if ((prevsize & IS_MMAPPED_BIT) != 0) {
800081dc:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800081e0:	c1 30       	breq	80008206 <free+0x62>
            prevsize &= ~IS_MMAPPED_BIT;
800081e2:	a1 c8       	cbr	r8,0x0
            psize += prevsize + MMAP_FOOT_PAD;
800081e4:	10 07       	add	r7,r8
800081e6:	2f 07       	sub	r7,-16
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
800081e8:	0e 9b       	mov	r11,r7
800081ea:	10 1c       	sub	r12,r8
800081ec:	f0 1f 01 30 	mcall	800086ac <free+0x508>
800081f0:	e0 81 02 5a 	brne	800086a4 <free+0x500>
              fm->footprint -= psize;
800081f4:	fe f8 04 b4 	ld.w	r8,pc[1204]
800081f8:	f0 f9 01 ac 	ld.w	r9,r8[428]
800081fc:	0e 19       	sub	r9,r7
800081fe:	f1 49 01 ac 	st.w	r8[428],r9
80008202:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
80008206:	10 1c       	sub	r12,r8
            psize += prevsize;
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
80008208:	18 3b       	cp.w	r11,r12
8000820a:	e0 8b 02 4d 	brhi	800086a4 <free+0x500>
              fm->footprint -= psize;
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
            psize += prevsize;
8000820e:	10 07       	add	r7,r8
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
              if (p != fm->dv) {
80008210:	fe f9 04 98 	ld.w	r9,pc[1176]
80008214:	72 59       	ld.w	r9,r9[0x14]
80008216:	12 3c       	cp.w	r12,r9
80008218:	e0 80 00 9a 	breq	8000834c <free+0x1a8>
                unlink_chunk(fm, p, prevsize);
8000821c:	a3 98       	lsr	r8,0x3
8000821e:	59 f8       	cp.w	r8,31
80008220:	e0 8b 00 24 	brhi	80008268 <free+0xc4>
80008224:	78 29       	ld.w	r9,r12[0x8]
80008226:	78 3e       	ld.w	lr,r12[0xc]
80008228:	1c 39       	cp.w	r9,lr
8000822a:	c0 d1       	brne	80008244 <free+0xa0>
8000822c:	fe f9 04 7c 	ld.w	r9,pc[1148]
80008230:	30 1b       	mov	r11,1
80008232:	f6 08 09 48 	lsl	r8,r11,r8
80008236:	f0 0b 11 ff 	rsub	r11,r8,-1
8000823a:	72 08       	ld.w	r8,r9[0x0]
8000823c:	f7 e8 00 08 	and	r8,r11,r8
80008240:	93 08       	st.w	r9[0x0],r8
80008242:	c9 78       	rjmp	80008370 <free+0x1cc>
80008244:	fe f6 04 64 	ld.w	r6,pc[1124]
80008248:	2d c6       	sub	r6,-36
8000824a:	ec 08 00 38 	add	r8,r6,r8<<0x3
8000824e:	10 39       	cp.w	r9,r8
80008250:	c0 40       	breq	80008258 <free+0xb4>
80008252:	12 3b       	cp.w	r11,r9
80008254:	e0 8b 00 8e 	brhi	80008370 <free+0x1cc>
80008258:	10 3e       	cp.w	lr,r8
8000825a:	c0 40       	breq	80008262 <free+0xbe>
8000825c:	1c 3b       	cp.w	r11,lr
8000825e:	e0 8b 00 89 	brhi	80008370 <free+0x1cc>
80008262:	93 3e       	st.w	r9[0xc],lr
80008264:	9d 29       	st.w	lr[0x8],r9
80008266:	c8 58       	rjmp	80008370 <free+0x1cc>
80008268:	18 96       	mov	r6,r12
8000826a:	78 65       	ld.w	r5,r12[0x18]
8000826c:	78 3e       	ld.w	lr,r12[0xc]
8000826e:	18 3e       	cp.w	lr,r12
80008270:	c0 c0       	breq	80008288 <free+0xe4>
80008272:	78 28       	ld.w	r8,r12[0x8]
80008274:	10 3b       	cp.w	r11,r8
80008276:	fc 08 17 b0 	movhi	r8,lr
8000827a:	f1 fe 8a 03 	st.wls	r8[0xc],lr
8000827e:	fd f8 8a 02 	st.wls	lr[0x8],r8
80008282:	fc 08 17 80 	movls	r8,lr
80008286:	c1 c8       	rjmp	800082be <free+0x11a>
80008288:	7c 58       	ld.w	r8,lr[0x14]
8000828a:	58 08       	cp.w	r8,0
8000828c:	c0 30       	breq	80008292 <free+0xee>
8000828e:	2e ce       	sub	lr,-20
80008290:	c0 98       	rjmp	800082a2 <free+0xfe>
80008292:	7c 48       	ld.w	r8,lr[0x10]
80008294:	58 08       	cp.w	r8,0
80008296:	c1 40       	breq	800082be <free+0x11a>
80008298:	2f 0e       	sub	lr,-16
8000829a:	c0 48       	rjmp	800082a2 <free+0xfe>
8000829c:	f0 ce ff ec 	sub	lr,r8,-20
800082a0:	12 98       	mov	r8,r9
800082a2:	70 59       	ld.w	r9,r8[0x14]
800082a4:	58 09       	cp.w	r9,0
800082a6:	cf b1       	brne	8000829c <free+0xf8>
800082a8:	70 49       	ld.w	r9,r8[0x10]
800082aa:	58 09       	cp.w	r9,0
800082ac:	c0 40       	breq	800082b4 <free+0x110>
800082ae:	f0 ce ff f0 	sub	lr,r8,-16
800082b2:	cf 7b       	rjmp	800082a0 <free+0xfc>
800082b4:	1c 3b       	cp.w	r11,lr
800082b6:	f9 b9 08 00 	movls	r9,0
800082ba:	fd f9 8a 00 	st.wls	lr[0x0],r9
800082be:	58 05       	cp.w	r5,0
800082c0:	c5 80       	breq	80008370 <free+0x1cc>
800082c2:	6c 7b       	ld.w	r11,r6[0x1c]
800082c4:	fe f9 03 e4 	ld.w	r9,pc[996]
800082c8:	f2 c9 fe d4 	sub	r9,r9,-300
800082cc:	f2 0b 00 29 	add	r9,r9,r11<<0x2
800082d0:	72 0b       	ld.w	r11,r9[0x0]
800082d2:	0c 3b       	cp.w	r11,r6
800082d4:	c1 01       	brne	800082f4 <free+0x150>
800082d6:	93 08       	st.w	r9[0x0],r8
800082d8:	58 08       	cp.w	r8,0
800082da:	c1 b1       	brne	80008310 <free+0x16c>
800082dc:	fe f8 03 cc 	ld.w	r8,pc[972]
800082e0:	76 79       	ld.w	r9,r11[0x1c]
800082e2:	30 1b       	mov	r11,1
800082e4:	f6 09 09 4b 	lsl	r11,r11,r9
800082e8:	5c db       	com	r11
800082ea:	70 19       	ld.w	r9,r8[0x4]
800082ec:	f7 e9 00 09 	and	r9,r11,r9
800082f0:	91 19       	st.w	r8[0x4],r9
800082f2:	c3 f8       	rjmp	80008370 <free+0x1cc>
800082f4:	fe f9 03 b4 	ld.w	r9,pc[948]
800082f8:	72 49       	ld.w	r9,r9[0x10]
800082fa:	0a 39       	cp.w	r9,r5
800082fc:	e0 8b 00 08 	brhi	8000830c <free+0x168>
80008300:	6a 49       	ld.w	r9,r5[0x10]
80008302:	0c 39       	cp.w	r9,r6
80008304:	eb f8 0a 04 	st.weq	r5[0x10],r8
80008308:	eb f8 1a 05 	st.wne	r5[0x14],r8
8000830c:	58 08       	cp.w	r8,0
8000830e:	c3 10       	breq	80008370 <free+0x1cc>
80008310:	fe f9 03 98 	ld.w	r9,pc[920]
80008314:	72 49       	ld.w	r9,r9[0x10]
80008316:	10 39       	cp.w	r9,r8
80008318:	e0 8b 00 2c 	brhi	80008370 <free+0x1cc>
8000831c:	91 65       	st.w	r8[0x18],r5
8000831e:	6c 49       	ld.w	r9,r6[0x10]
80008320:	58 09       	cp.w	r9,0
80008322:	c0 90       	breq	80008334 <free+0x190>
80008324:	fe fb 03 84 	ld.w	r11,pc[900]
80008328:	76 4b       	ld.w	r11,r11[0x10]
8000832a:	12 3b       	cp.w	r11,r9
8000832c:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80008330:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80008334:	6c 59       	ld.w	r9,r6[0x14]
80008336:	58 09       	cp.w	r9,0
80008338:	c1 c0       	breq	80008370 <free+0x1cc>
8000833a:	fe fb 03 6e 	ld.w	r11,pc[878]
8000833e:	76 4b       	ld.w	r11,r11[0x10]
80008340:	12 3b       	cp.w	r11,r9
80008342:	e0 8b 00 17 	brhi	80008370 <free+0x1cc>
80008346:	91 59       	st.w	r8[0x14],r9
80008348:	93 68       	st.w	r9[0x18],r8
8000834a:	c1 38       	rjmp	80008370 <free+0x1cc>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
8000834c:	74 18       	ld.w	r8,r10[0x4]
8000834e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80008352:	58 38       	cp.w	r8,3
80008354:	c0 e1       	brne	80008370 <free+0x1cc>
                fm->dvsize = psize;
80008356:	fe f8 03 52 	ld.w	r8,pc[850]
8000835a:	91 27       	st.w	r8[0x8],r7
                set_free_with_pinuse(p, psize, next);
8000835c:	74 18       	ld.w	r8,r10[0x4]
8000835e:	a1 c8       	cbr	r8,0x0
80008360:	95 18       	st.w	r10[0x4],r8
80008362:	0e 98       	mov	r8,r7
80008364:	a1 a8       	sbr	r8,0x0
80008366:	99 18       	st.w	r12[0x4],r8
80008368:	f8 07 09 07 	st.w	r12[r7],r7
                goto postaction;
8000836c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
80008370:	14 3c       	cp.w	r12,r10
80008372:	e0 82 01 99 	brhs	800086a4 <free+0x500>
80008376:	74 18       	ld.w	r8,r10[0x4]
80008378:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
8000837c:	e0 80 01 94 	breq	800086a4 <free+0x500>
          if (!cinuse(next)) {  /* consolidate forward */
80008380:	10 99       	mov	r9,r8
80008382:	e2 19 00 02 	andl	r9,0x2,COH
80008386:	e0 81 00 e3 	brne	8000854c <free+0x3a8>
            if (next == fm->top) {
8000838a:	fe f9 03 1e 	ld.w	r9,pc[798]
8000838e:	72 69       	ld.w	r9,r9[0x18]
80008390:	14 39       	cp.w	r9,r10
80008392:	c1 f1       	brne	800083d0 <free+0x22c>
              size_t tsize = fm->topsize += psize;
80008394:	fe f8 03 14 	ld.w	r8,pc[788]
80008398:	70 39       	ld.w	r9,r8[0xc]
8000839a:	12 07       	add	r7,r9
8000839c:	91 37       	st.w	r8[0xc],r7
              fm->top = p;
8000839e:	91 6c       	st.w	r8[0x18],r12
              p->head = tsize | PINUSE_BIT;
800083a0:	0e 99       	mov	r9,r7
800083a2:	a1 a9       	sbr	r9,0x0
800083a4:	99 19       	st.w	r12[0x4],r9
              if (p == fm->dv) {
800083a6:	70 58       	ld.w	r8,r8[0x14]
800083a8:	18 38       	cp.w	r8,r12
800083aa:	c0 61       	brne	800083b6 <free+0x212>
                fm->dv = 0;
800083ac:	fe f8 02 fc 	ld.w	r8,pc[764]
800083b0:	30 09       	mov	r9,0
800083b2:	91 59       	st.w	r8[0x14],r9
                fm->dvsize = 0;
800083b4:	91 29       	st.w	r8[0x8],r9
              }
              if (should_trim(fm, tsize))
800083b6:	fe f8 02 f2 	ld.w	r8,pc[754]
800083ba:	70 78       	ld.w	r8,r8[0x1c]
800083bc:	10 37       	cp.w	r7,r8
800083be:	e0 88 01 73 	brls	800086a4 <free+0x500>
                sys_trim(fm, 0);
800083c2:	30 0b       	mov	r11,0
800083c4:	fe fc 02 e4 	ld.w	r12,pc[740]
800083c8:	f0 1f 00 ba 	mcall	800086b0 <free+0x50c>
800083cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              goto postaction;
            }
            else if (next == fm->dv) {
800083d0:	fe f9 02 d8 	ld.w	r9,pc[728]
800083d4:	72 59       	ld.w	r9,r9[0x14]
800083d6:	14 39       	cp.w	r9,r10
800083d8:	c0 e1       	brne	800083f4 <free+0x250>
              size_t dsize = fm->dvsize += psize;
800083da:	fe f8 02 ce 	ld.w	r8,pc[718]
800083de:	70 29       	ld.w	r9,r8[0x8]
800083e0:	12 07       	add	r7,r9
800083e2:	91 27       	st.w	r8[0x8],r7
              fm->dv = p;
800083e4:	91 5c       	st.w	r8[0x14],r12
              set_size_and_pinuse_of_free_chunk(p, dsize);
800083e6:	0e 98       	mov	r8,r7
800083e8:	a1 a8       	sbr	r8,0x0
800083ea:	99 18       	st.w	r12[0x4],r8
800083ec:	f8 07 09 07 	st.w	r12[r7],r7
              goto postaction;
800083f0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            }
            else {
              size_t nsize = chunksize(next);
800083f4:	e0 18 ff fc 	andl	r8,0xfffc
              psize += nsize;
800083f8:	10 07       	add	r7,r8
              unlink_chunk(fm, next, nsize);
800083fa:	a3 98       	lsr	r8,0x3
800083fc:	59 f8       	cp.w	r8,31
800083fe:	e0 8b 00 2a 	brhi	80008452 <free+0x2ae>
80008402:	74 29       	ld.w	r9,r10[0x8]
80008404:	74 3a       	ld.w	r10,r10[0xc]
80008406:	14 39       	cp.w	r9,r10
80008408:	c0 d1       	brne	80008422 <free+0x27e>
8000840a:	fe f9 02 9e 	ld.w	r9,pc[670]
8000840e:	30 1a       	mov	r10,1
80008410:	f4 08 09 48 	lsl	r8,r10,r8
80008414:	f0 0a 11 ff 	rsub	r10,r8,-1
80008418:	72 08       	ld.w	r8,r9[0x0]
8000841a:	f5 e8 00 08 	and	r8,r10,r8
8000841e:	93 08       	st.w	r9[0x0],r8
80008420:	c8 98       	rjmp	80008532 <free+0x38e>
80008422:	fe fb 02 86 	ld.w	r11,pc[646]
80008426:	2d cb       	sub	r11,-36
80008428:	f6 08 00 38 	add	r8,r11,r8<<0x3
8000842c:	10 39       	cp.w	r9,r8
8000842e:	c0 70       	breq	8000843c <free+0x298>
80008430:	fe fb 02 78 	ld.w	r11,pc[632]
80008434:	76 4b       	ld.w	r11,r11[0x10]
80008436:	12 3b       	cp.w	r11,r9
80008438:	e0 8b 00 7d 	brhi	80008532 <free+0x38e>
8000843c:	10 3a       	cp.w	r10,r8
8000843e:	c0 70       	breq	8000844c <free+0x2a8>
80008440:	fe f8 02 68 	ld.w	r8,pc[616]
80008444:	70 48       	ld.w	r8,r8[0x10]
80008446:	14 38       	cp.w	r8,r10
80008448:	e0 8b 00 75 	brhi	80008532 <free+0x38e>
8000844c:	93 3a       	st.w	r9[0xc],r10
8000844e:	95 29       	st.w	r10[0x8],r9
80008450:	c7 18       	rjmp	80008532 <free+0x38e>
80008452:	74 6e       	ld.w	lr,r10[0x18]
80008454:	74 3b       	ld.w	r11,r10[0xc]
80008456:	14 3b       	cp.w	r11,r10
80008458:	c0 f0       	breq	80008476 <free+0x2d2>
8000845a:	74 28       	ld.w	r8,r10[0x8]
8000845c:	fe f9 02 4c 	ld.w	r9,pc[588]
80008460:	72 49       	ld.w	r9,r9[0x10]
80008462:	10 39       	cp.w	r9,r8
80008464:	f6 08 17 b0 	movhi	r8,r11
80008468:	f1 fb 8a 03 	st.wls	r8[0xc],r11
8000846c:	f7 f8 8a 02 	st.wls	r11[0x8],r8
80008470:	f6 08 17 80 	movls	r8,r11
80008474:	c1 f8       	rjmp	800084b2 <free+0x30e>
80008476:	76 58       	ld.w	r8,r11[0x14]
80008478:	58 08       	cp.w	r8,0
8000847a:	c0 30       	breq	80008480 <free+0x2dc>
8000847c:	2e cb       	sub	r11,-20
8000847e:	c0 98       	rjmp	80008490 <free+0x2ec>
80008480:	76 48       	ld.w	r8,r11[0x10]
80008482:	58 08       	cp.w	r8,0
80008484:	c1 70       	breq	800084b2 <free+0x30e>
80008486:	2f 0b       	sub	r11,-16
80008488:	c0 48       	rjmp	80008490 <free+0x2ec>
8000848a:	f0 cb ff ec 	sub	r11,r8,-20
8000848e:	12 98       	mov	r8,r9
80008490:	70 59       	ld.w	r9,r8[0x14]
80008492:	58 09       	cp.w	r9,0
80008494:	cf b1       	brne	8000848a <free+0x2e6>
80008496:	70 49       	ld.w	r9,r8[0x10]
80008498:	58 09       	cp.w	r9,0
8000849a:	c0 40       	breq	800084a2 <free+0x2fe>
8000849c:	f0 cb ff f0 	sub	r11,r8,-16
800084a0:	cf 7b       	rjmp	8000848e <free+0x2ea>
800084a2:	fe f9 02 06 	ld.w	r9,pc[518]
800084a6:	72 49       	ld.w	r9,r9[0x10]
800084a8:	16 39       	cp.w	r9,r11
800084aa:	f9 b9 08 00 	movls	r9,0
800084ae:	f7 f9 8a 00 	st.wls	r11[0x0],r9
800084b2:	58 0e       	cp.w	lr,0
800084b4:	c3 f0       	breq	80008532 <free+0x38e>
800084b6:	74 7b       	ld.w	r11,r10[0x1c]
800084b8:	4f c9       	lddpc	r9,800086a8 <free+0x504>
800084ba:	f2 c9 fe d4 	sub	r9,r9,-300
800084be:	f2 0b 00 29 	add	r9,r9,r11<<0x2
800084c2:	72 0b       	ld.w	r11,r9[0x0]
800084c4:	14 3b       	cp.w	r11,r10
800084c6:	c0 f1       	brne	800084e4 <free+0x340>
800084c8:	93 08       	st.w	r9[0x0],r8
800084ca:	58 08       	cp.w	r8,0
800084cc:	c1 91       	brne	800084fe <free+0x35a>
800084ce:	4f 78       	lddpc	r8,800086a8 <free+0x504>
800084d0:	76 79       	ld.w	r9,r11[0x1c]
800084d2:	30 1a       	mov	r10,1
800084d4:	f4 09 09 4a 	lsl	r10,r10,r9
800084d8:	5c da       	com	r10
800084da:	70 19       	ld.w	r9,r8[0x4]
800084dc:	f5 e9 00 09 	and	r9,r10,r9
800084e0:	91 19       	st.w	r8[0x4],r9
800084e2:	c2 88       	rjmp	80008532 <free+0x38e>
800084e4:	4f 19       	lddpc	r9,800086a8 <free+0x504>
800084e6:	72 49       	ld.w	r9,r9[0x10]
800084e8:	1c 39       	cp.w	r9,lr
800084ea:	e0 8b 00 08 	brhi	800084fa <free+0x356>
800084ee:	7c 49       	ld.w	r9,lr[0x10]
800084f0:	14 39       	cp.w	r9,r10
800084f2:	fd f8 0a 04 	st.weq	lr[0x10],r8
800084f6:	fd f8 1a 05 	st.wne	lr[0x14],r8
800084fa:	58 08       	cp.w	r8,0
800084fc:	c1 b0       	breq	80008532 <free+0x38e>
800084fe:	4e b9       	lddpc	r9,800086a8 <free+0x504>
80008500:	72 49       	ld.w	r9,r9[0x10]
80008502:	10 39       	cp.w	r9,r8
80008504:	e0 8b 00 17 	brhi	80008532 <free+0x38e>
80008508:	91 6e       	st.w	r8[0x18],lr
8000850a:	74 49       	ld.w	r9,r10[0x10]
8000850c:	58 09       	cp.w	r9,0
8000850e:	c0 80       	breq	8000851e <free+0x37a>
80008510:	4e 6b       	lddpc	r11,800086a8 <free+0x504>
80008512:	76 4b       	ld.w	r11,r11[0x10]
80008514:	12 3b       	cp.w	r11,r9
80008516:	f1 f9 8a 04 	st.wls	r8[0x10],r9
8000851a:	f3 f8 8a 06 	st.wls	r9[0x18],r8
8000851e:	74 59       	ld.w	r9,r10[0x14]
80008520:	58 09       	cp.w	r9,0
80008522:	c0 80       	breq	80008532 <free+0x38e>
80008524:	4e 1a       	lddpc	r10,800086a8 <free+0x504>
80008526:	74 4a       	ld.w	r10,r10[0x10]
80008528:	12 3a       	cp.w	r10,r9
8000852a:	f1 f9 8a 05 	st.wls	r8[0x14],r9
8000852e:	f3 f8 8a 06 	st.wls	r9[0x18],r8
              set_size_and_pinuse_of_free_chunk(p, psize);
80008532:	0e 98       	mov	r8,r7
80008534:	a1 a8       	sbr	r8,0x0
80008536:	99 18       	st.w	r12[0x4],r8
80008538:	f8 07 09 07 	st.w	r12[r7],r7
              if (p == fm->dv) {
8000853c:	4d b8       	lddpc	r8,800086a8 <free+0x504>
8000853e:	70 58       	ld.w	r8,r8[0x14]
80008540:	18 38       	cp.w	r8,r12
80008542:	c0 c1       	brne	8000855a <free+0x3b6>
                fm->dvsize = psize;
80008544:	4d 98       	lddpc	r8,800086a8 <free+0x504>
80008546:	91 27       	st.w	r8[0x8],r7
                goto postaction;
80008548:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
8000854c:	a1 c8       	cbr	r8,0x0
8000854e:	95 18       	st.w	r10[0x4],r8
80008550:	0e 98       	mov	r8,r7
80008552:	a1 a8       	sbr	r8,0x0
80008554:	99 18       	st.w	r12[0x4],r8
80008556:	f8 07 09 07 	st.w	r12[r7],r7
          insert_chunk(fm, p, psize);
8000855a:	ee 08 16 03 	lsr	r8,r7,0x3
8000855e:	59 f8       	cp.w	r8,31
80008560:	e0 8b 00 1f 	brhi	8000859e <free+0x3fa>
80008564:	4d 1a       	lddpc	r10,800086a8 <free+0x504>
80008566:	f4 c9 ff dc 	sub	r9,r10,-36
8000856a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000856e:	74 0a       	ld.w	r10,r10[0x0]
80008570:	30 1b       	mov	r11,1
80008572:	f6 08 09 48 	lsl	r8,r11,r8
80008576:	f1 ea 00 0b 	and	r11,r8,r10
8000857a:	c0 61       	brne	80008586 <free+0x3e2>
8000857c:	14 48       	or	r8,r10
8000857e:	4c bb       	lddpc	r11,800086a8 <free+0x504>
80008580:	97 08       	st.w	r11[0x0],r8
80008582:	12 98       	mov	r8,r9
80008584:	c0 78       	rjmp	80008592 <free+0x3ee>
80008586:	72 28       	ld.w	r8,r9[0x8]
80008588:	4c 8a       	lddpc	r10,800086a8 <free+0x504>
8000858a:	74 4a       	ld.w	r10,r10[0x10]
8000858c:	14 38       	cp.w	r8,r10
8000858e:	f2 08 17 30 	movlo	r8,r9
80008592:	93 2c       	st.w	r9[0x8],r12
80008594:	91 3c       	st.w	r8[0xc],r12
80008596:	99 28       	st.w	r12[0x8],r8
80008598:	99 39       	st.w	r12[0xc],r9
8000859a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000859e:	ee 08 16 08 	lsr	r8,r7,0x8
800085a2:	c0 31       	brne	800085a8 <free+0x404>
800085a4:	30 09       	mov	r9,0
800085a6:	c2 d8       	rjmp	80008600 <free+0x45c>
800085a8:	e0 48 ff ff 	cp.w	r8,65535
800085ac:	e0 88 00 04 	brls	800085b4 <free+0x410>
800085b0:	31 f9       	mov	r9,31
800085b2:	c2 78       	rjmp	80008600 <free+0x45c>
800085b4:	f0 ce 01 00 	sub	lr,r8,256
800085b8:	b1 8e       	lsr	lr,0x10
800085ba:	e2 1e 00 08 	andl	lr,0x8,COH
800085be:	f0 0e 09 48 	lsl	r8,r8,lr
800085c2:	f0 cb 10 00 	sub	r11,r8,4096
800085c6:	b1 8b       	lsr	r11,0x10
800085c8:	e2 1b 00 04 	andl	r11,0x4,COH
800085cc:	f0 0b 09 48 	lsl	r8,r8,r11
800085d0:	f0 ca 40 00 	sub	r10,r8,16384
800085d4:	b1 8a       	lsr	r10,0x10
800085d6:	e2 1a 00 02 	andl	r10,0x2,COH
800085da:	f0 0a 09 48 	lsl	r8,r8,r10
800085de:	af 98       	lsr	r8,0xf
800085e0:	fc 0e 11 0e 	rsub	lr,lr,14
800085e4:	fc 0b 01 0b 	sub	r11,lr,r11
800085e8:	f6 0a 01 0a 	sub	r10,r11,r10
800085ec:	f4 08 00 08 	add	r8,r10,r8
800085f0:	f0 c9 ff f9 	sub	r9,r8,-7
800085f4:	ee 09 0a 49 	lsr	r9,r7,r9
800085f8:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800085fc:	f2 08 00 19 	add	r9,r9,r8<<0x1
80008600:	4a a8       	lddpc	r8,800086a8 <free+0x504>
80008602:	f0 cb fe d4 	sub	r11,r8,-300
80008606:	f6 09 00 2b 	add	r11,r11,r9<<0x2
8000860a:	99 79       	st.w	r12[0x1c],r9
8000860c:	30 0a       	mov	r10,0
8000860e:	99 5a       	st.w	r12[0x14],r10
80008610:	99 4a       	st.w	r12[0x10],r10
80008612:	70 18       	ld.w	r8,r8[0x4]
80008614:	30 1a       	mov	r10,1
80008616:	f4 09 09 4a 	lsl	r10,r10,r9
8000861a:	f5 e8 00 0e 	and	lr,r10,r8
8000861e:	c0 b1       	brne	80008634 <free+0x490>
80008620:	f5 e8 10 08 	or	r8,r10,r8
80008624:	4a 19       	lddpc	r9,800086a8 <free+0x504>
80008626:	93 18       	st.w	r9[0x4],r8
80008628:	97 0c       	st.w	r11[0x0],r12
8000862a:	99 6b       	st.w	r12[0x18],r11
8000862c:	99 3c       	st.w	r12[0xc],r12
8000862e:	99 2c       	st.w	r12[0x8],r12
80008630:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008634:	76 08       	ld.w	r8,r11[0x0]
80008636:	59 f9       	cp.w	r9,31
80008638:	c0 31       	brne	8000863e <free+0x49a>
8000863a:	30 09       	mov	r9,0
8000863c:	c0 48       	rjmp	80008644 <free+0x4a0>
8000863e:	a1 99       	lsr	r9,0x1
80008640:	f2 09 11 19 	rsub	r9,r9,25
80008644:	ee 09 09 49 	lsl	r9,r7,r9
80008648:	70 1a       	ld.w	r10,r8[0x4]
8000864a:	e0 1a ff fc 	andl	r10,0xfffc
8000864e:	0e 3a       	cp.w	r10,r7
80008650:	c1 b0       	breq	80008686 <free+0x4e2>
80008652:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80008656:	f6 ca ff fc 	sub	r10,r11,-4
8000865a:	f0 0a 00 2e 	add	lr,r8,r10<<0x2
8000865e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008662:	58 0a       	cp.w	r10,0
80008664:	c0 40       	breq	8000866c <free+0x4c8>
80008666:	a1 79       	lsl	r9,0x1
80008668:	14 98       	mov	r8,r10
8000866a:	ce fb       	rjmp	80008648 <free+0x4a4>
8000866c:	48 f9       	lddpc	r9,800086a8 <free+0x504>
8000866e:	72 49       	ld.w	r9,r9[0x10]
80008670:	1c 39       	cp.w	r9,lr
80008672:	e0 8b 00 19 	brhi	800086a4 <free+0x500>
80008676:	2f cb       	sub	r11,-4
80008678:	f0 0b 09 2c 	st.w	r8[r11<<0x2],r12
8000867c:	99 68       	st.w	r12[0x18],r8
8000867e:	99 3c       	st.w	r12[0xc],r12
80008680:	99 2c       	st.w	r12[0x8],r12
80008682:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008686:	70 29       	ld.w	r9,r8[0x8]
80008688:	48 8a       	lddpc	r10,800086a8 <free+0x504>
8000868a:	74 4a       	ld.w	r10,r10[0x10]
8000868c:	10 3a       	cp.w	r10,r8
8000868e:	e0 8b 00 0b 	brhi	800086a4 <free+0x500>
80008692:	12 3a       	cp.w	r10,r9
80008694:	e0 8b 00 08 	brhi	800086a4 <free+0x500>
80008698:	93 3c       	st.w	r9[0xc],r12
8000869a:	91 2c       	st.w	r8[0x8],r12
8000869c:	99 29       	st.w	r12[0x8],r9
8000869e:	99 38       	st.w	r12[0xc],r8
800086a0:	30 08       	mov	r8,0
800086a2:	99 68       	st.w	r12[0x18],r8
800086a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800086a8:	00 00       	add	r0,r0
800086aa:	13 24       	ld.uh	r4,r9++
800086ac:	80 00       	ld.sh	r0,r0[0x0]
800086ae:	95 18       	st.w	r10[0x4],r8
800086b0:	80 00       	ld.sh	r0,r0[0x0]
800086b2:	73 dc       	ld.w	r12,r9[0x74]

800086b4 <init_user_mstate>:

/* ----------------------------- user mspaces ---------------------------- */

#if MSPACES

static mstate init_user_mstate(char* tbase, size_t tsize) {
800086b4:	d4 21       	pushm	r4-r7,lr
800086b6:	18 96       	mov	r6,r12
800086b8:	16 95       	mov	r5,r11
  size_t msize = pad_request(sizeof(struct malloc_state));
  mchunkptr mn;
  mchunkptr msp = align_as_chunk(tbase);
800086ba:	e9 dc c0 03 	bfextu	r4,r12,0x0,0x3
800086be:	c0 50       	breq	800086c8 <init_user_mstate+0x14>
800086c0:	e8 04 11 08 	rsub	r4,r4,8
800086c4:	e9 d4 c0 03 	bfextu	r4,r4,0x0,0x3
800086c8:	ec 04 00 04 	add	r4,r6,r4
  mstate m = (mstate)(chunk2mem(msp));
800086cc:	e8 c7 ff f8 	sub	r7,r4,-8
  memset(m, 0, msize);
800086d0:	e0 6a 01 d0 	mov	r10,464
800086d4:	30 0b       	mov	r11,0
800086d6:	0e 9c       	mov	r12,r7
800086d8:	f0 1f 00 14 	mcall	80008728 <init_user_mstate+0x74>
  INITIAL_LOCK(&m->mutex);
  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
800086dc:	e0 68 01 d3 	mov	r8,467
800086e0:	89 18       	st.w	r4[0x4],r8
  m->seg.base = m->least_addr = tbase;
800086e2:	8f 46       	st.w	r7[0x10],r6
800086e4:	ef 46 01 b8 	st.w	r7[440],r6
  m->seg.size = m->footprint = m->max_footprint = tsize;
800086e8:	ef 45 01 b0 	st.w	r7[432],r5
800086ec:	ef 45 01 ac 	st.w	r7[428],r5
800086f0:	ef 45 01 bc 	st.w	r7[444],r5
  m->magic = mparams.magic;
800086f4:	48 e8       	lddpc	r8,8000872c <init_user_mstate+0x78>
800086f6:	70 09       	ld.w	r9,r8[0x0]
800086f8:	8f 89       	st.w	r7[0x20],r9
  m->mflags = mparams.default_mflags;
  disable_contiguous(m);
800086fa:	70 58       	ld.w	r8,r8[0x14]
800086fc:	a3 a8       	sbr	r8,0x2
800086fe:	ef 48 01 b4 	st.w	r7[436],r8
  init_bins(m);
80008702:	0e 9c       	mov	r12,r7
80008704:	f0 1f 00 0b 	mcall	80008730 <init_user_mstate+0x7c>
  mn = next_chunk(mem2chunk(m));
80008708:	ee fb ff fc 	ld.w	r11,r7[-4]
8000870c:	e0 1b ff fc 	andl	r11,0xfffc
80008710:	20 8b       	sub	r11,8
80008712:	ee 0b 00 0b 	add	r11,r7,r11
  init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
80008716:	0a 06       	add	r6,r5
80008718:	ec 0b 01 0a 	sub	r10,r6,r11
8000871c:	22 8a       	sub	r10,40
8000871e:	0e 9c       	mov	r12,r7
80008720:	f0 1f 00 05 	mcall	80008734 <init_user_mstate+0x80>
  check_top_chunk(m, m->top);
  return m;
}
80008724:	0e 9c       	mov	r12,r7
80008726:	d8 22       	popm	r4-r7,pc
80008728:	80 00       	ld.sh	r0,r0[0x0]
8000872a:	c8 fa       	rjmp	80008448 <free+0x2a4>
8000872c:	00 00       	add	r0,r0
8000872e:	14 ec       	st.h	--r10,r12
80008730:	80 00       	ld.sh	r0,r0[0x0]
80008732:	73 c8       	ld.w	r8,r9[0x70]
80008734:	80 00       	ld.sh	r0,r0[0x0]
80008736:	73 98       	ld.w	r8,r9[0x64]

80008738 <create_mspace_with_base>:
    }
  }
  return (mspace)m;
}

mspace create_mspace_with_base(void* base, size_t capacity, int locked) {
80008738:	eb cd 40 c0 	pushm	r6-r7,lr
8000873c:	18 96       	mov	r6,r12
8000873e:	16 97       	mov	r7,r11
  mstate m = 0;
  size_t msize = pad_request(sizeof(struct malloc_state));
  init_mparams(); /* Ensure pagesize etc initialized */
80008740:	f0 1f 00 0d 	mcall	80008774 <create_mspace_with_base+0x3c>

  if (capacity > msize + TOP_FOOT_SIZE &&
80008744:	e0 47 01 f8 	cp.w	r7,504
80008748:	e0 88 00 13 	brls	8000876e <create_mspace_with_base+0x36>
8000874c:	48 b8       	lddpc	r8,80008778 <create_mspace_with_base+0x40>
8000874e:	70 18       	ld.w	r8,r8[0x4]
80008750:	fe 79 fe 08 	mov	r9,-504
80008754:	f2 08 01 08 	sub	r8,r9,r8
80008758:	10 37       	cp.w	r7,r8
8000875a:	c0 a2       	brcc	8000876e <create_mspace_with_base+0x36>
      capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
    m = init_user_mstate((char*)base, capacity);
8000875c:	0e 9b       	mov	r11,r7
8000875e:	0c 9c       	mov	r12,r6
80008760:	f0 1f 00 07 	mcall	8000877c <create_mspace_with_base+0x44>
    m->seg.sflags = EXTERN_BIT;
80008764:	30 88       	mov	r8,8
80008766:	f9 48 01 c4 	st.w	r12[452],r8
8000876a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    set_lock(m, locked);
8000876e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80008772:	00 00       	add	r0,r0
80008774:	80 00       	ld.sh	r0,r0[0x0]
80008776:	73 50       	ld.w	r0,r9[0x54]
80008778:	00 00       	add	r0,r0
8000877a:	14 ec       	st.h	--r10,r12
8000877c:	80 00       	ld.sh	r0,r0[0x0]
8000877e:	86 b4       	ld.uh	r4,r3[0x6]

80008780 <sys_alloc>:
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
80008780:	d4 31       	pushm	r0-r7,lr
80008782:	20 3d       	sub	sp,12
80008784:	18 97       	mov	r7,r12
80008786:	16 96       	mov	r6,r11
  char* tbase = CMFAIL;
  size_t tsize = 0;
  flag_t mmap_flag = 0;

  init_mparams();
80008788:	f0 1f 02 1c 	mcall	80008ff8 <sys_alloc+0x878>

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
8000878c:	ee f8 01 b4 	ld.w	r8,r7[436]
80008790:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008794:	c4 70       	breq	80008822 <sys_alloc+0xa2>
80008796:	fe f8 08 66 	ld.w	r8,pc[2150]
8000879a:	70 38       	ld.w	r8,r8[0xc]
8000879c:	0c 38       	cp.w	r8,r6
8000879e:	e0 8b 00 42 	brhi	80008822 <sys_alloc+0xa2>
  the PINUSE bit so frees can be checked.
*/

/* Malloc using mmap */
static void* mmap_alloc(mstate m, size_t nb) {
  size_t mmsize = granularity_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
800087a2:	fe f8 08 5a 	ld.w	r8,pc[2138]
800087a6:	70 28       	ld.w	r8,r8[0x8]
800087a8:	f0 c5 ff e1 	sub	r5,r8,-31
800087ac:	0c 05       	add	r5,r6
800087ae:	5c 38       	neg	r8
800087b0:	10 65       	and	r5,r8
  if (mmsize > nb) {     /* Check for wrap around 0 */
800087b2:	0a 36       	cp.w	r6,r5
800087b4:	c3 72       	brcc	80008822 <sys_alloc+0xa2>
    char* mm = (char*)(DIRECT_MMAP(mmsize));
800087b6:	30 0c       	mov	r12,0
800087b8:	1a dc       	st.w	--sp,r12
800087ba:	3f f8       	mov	r8,-1
800087bc:	30 39       	mov	r9,3
800087be:	12 9a       	mov	r10,r9
800087c0:	0a 9b       	mov	r11,r5
800087c2:	f0 1f 02 10 	mcall	80009000 <sys_alloc+0x880>
    if (mm != CMFAIL) {
800087c6:	2f fd       	sub	sp,-4
800087c8:	5b fc       	cp.w	r12,-1
800087ca:	c2 c0       	breq	80008822 <sys_alloc+0xa2>
      size_t offset = align_offset(chunk2mem(mm));
800087cc:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
800087d0:	c0 31       	brne	800087d6 <sys_alloc+0x56>
800087d2:	30 09       	mov	r9,0
800087d4:	c0 58       	rjmp	800087de <sys_alloc+0x5e>
800087d6:	f0 08 11 08 	rsub	r8,r8,8
800087da:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
      size_t psize = mmsize - offset - MMAP_FOOT_PAD;
800087de:	ea ca 00 10 	sub	r10,r5,16
800087e2:	12 1a       	sub	r10,r9
      mchunkptr p = (mchunkptr)(mm + offset);
800087e4:	f8 09 00 08 	add	r8,r12,r9
      p->prev_foot = offset | IS_MMAPPED_BIT;
800087e8:	a1 a9       	sbr	r9,0x0
800087ea:	91 09       	st.w	r8[0x0],r9
      (p)->head = (psize|CINUSE_BIT);
800087ec:	14 99       	mov	r9,r10
800087ee:	a1 b9       	sbr	r9,0x1
800087f0:	91 19       	st.w	r8[0x4],r9
      mark_inuse_foot(m, p, psize);
      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
800087f2:	f0 0a 00 09 	add	r9,r8,r10
800087f6:	30 7a       	mov	r10,7
800087f8:	93 1a       	st.w	r9[0x4],r10
      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
800087fa:	30 0a       	mov	r10,0
800087fc:	93 2a       	st.w	r9[0x8],r10

      if (mm < m->least_addr)
800087fe:	6e 49       	ld.w	r9,r7[0x10]
        m->least_addr = mm;
80008800:	12 3c       	cp.w	r12,r9
80008802:	ef fc 3a 04 	st.wcs	r7[0x10],r12
      if ((m->footprint += mmsize) > m->max_footprint)
80008806:	ee f9 01 ac 	ld.w	r9,r7[428]
8000880a:	12 05       	add	r5,r9
8000880c:	ef 45 01 ac 	st.w	r7[428],r5
80008810:	ee f9 01 b0 	ld.w	r9,r7[432]
        m->max_footprint = m->footprint;
80008814:	12 35       	cp.w	r5,r9
80008816:	ef f5 ba 6c 	st.whi	r7[0x1b0],r5
      assert(is_aligned(chunk2mem(p)));
      check_mmapped_chunk(m, p);
      return chunk2mem(p);
8000881a:	f0 cc ff f8 	sub	r12,r8,-8
  init_mparams();

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
    void* mem = mmap_alloc(m, nb);
    if (mem != 0)
8000881e:	e0 81 03 be 	brne	80008f9a <sys_alloc+0x81a>
       find space.
    3. A call to MORECORE that cannot usually contiguously extend memory.
       (disabled if not HAVE_MORECORE)
  */

  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
80008822:	ee f8 01 b4 	ld.w	r8,r7[436]
80008826:	e2 18 00 04 	andl	r8,0x4,COH
8000882a:	c7 e1       	brne	80008926 <sys_alloc+0x1a6>
    char* br = CMFAIL;
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
8000882c:	6e 6b       	ld.w	r11,r7[0x18]
8000882e:	58 0b       	cp.w	r11,0
80008830:	c0 60       	breq	8000883c <sys_alloc+0xbc>
80008832:	0e 9c       	mov	r12,r7
80008834:	f0 1f 01 f4 	mcall	80009004 <sys_alloc+0x884>
80008838:	18 95       	mov	r5,r12
    size_t asize = 0;
    ACQUIRE_MORECORE_LOCK();

    if (ss == 0) {  /* First time through or recovery */
8000883a:	c2 c1       	brne	80008892 <sys_alloc+0x112>
      char* base = (char*)CALL_MORECORE(0);
8000883c:	30 0c       	mov	r12,0
8000883e:	f0 1f 01 f3 	mcall	80009008 <sys_alloc+0x888>
80008842:	18 95       	mov	r5,r12
      if (base != CMFAIL) {
80008844:	5b fc       	cp.w	r12,-1
80008846:	e0 80 03 ac 	breq	80008f9e <sys_alloc+0x81e>
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
8000884a:	fe f8 07 b2 	ld.w	r8,pc[1970]
8000884e:	70 29       	ld.w	r9,r8[0x8]
80008850:	f2 c1 ff d7 	sub	r1,r9,-41
80008854:	0c 01       	add	r1,r6
80008856:	5c 39       	neg	r9
80008858:	12 61       	and	r1,r9
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
8000885a:	70 18       	ld.w	r8,r8[0x4]
8000885c:	18 99       	mov	r9,r12
8000885e:	f0 ca 00 01 	sub	r10,r8,1
80008862:	f9 ea 00 0a 	and	r10,r12,r10
80008866:	c0 70       	breq	80008874 <sys_alloc+0xf4>
          asize += (page_align((size_t)base) - (size_t)base);
80008868:	18 11       	sub	r1,r12
8000886a:	10 09       	add	r9,r8
8000886c:	5c 38       	neg	r8
8000886e:	f3 e8 00 08 	and	r8,r9,r8
80008872:	10 01       	add	r1,r8
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
80008874:	e0 6b ff fe 	mov	r11,65534
80008878:	ea 1b 7f ff 	orh	r11,0x7fff
8000887c:	16 31       	cp.w	r1,r11
8000887e:	e0 8b 03 94 	brhi	80008fa6 <sys_alloc+0x826>
            (br = (char*)(CALL_MORECORE(asize))) == base) {
80008882:	02 9c       	mov	r12,r1
80008884:	f0 1f 01 e1 	mcall	80009008 <sys_alloc+0x888>
80008888:	18 94       	mov	r4,r12
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
          asize += (page_align((size_t)base) - (size_t)base);
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
8000888a:	0a 3c       	cp.w	r12,r5
8000888c:	c2 11       	brne	800088ce <sys_alloc+0x14e>
8000888e:	e0 8f 03 8f 	bral	80008fac <sys_alloc+0x82c>
        }
      }
    }
    else {
      /* Subtract out existing available top space from MORECORE request. */
      asize = granularity_align(nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
80008892:	fe f8 07 6a 	ld.w	r8,pc[1898]
80008896:	70 28       	ld.w	r8,r8[0x8]
80008898:	f0 c1 ff d7 	sub	r1,r8,-41
8000889c:	6e 39       	ld.w	r9,r7[0xc]
8000889e:	12 11       	sub	r1,r9
800088a0:	0c 01       	add	r1,r6
800088a2:	5c 38       	neg	r8
800088a4:	10 61       	and	r1,r8
      /* Use mem here only if it did continuously extend old space */
      if (asize < HALF_MAX_SIZE_T &&
800088a6:	e0 6a ff fe 	mov	r10,65534
800088aa:	ea 1a 7f ff 	orh	r10,0x7fff
800088ae:	14 31       	cp.w	r1,r10
800088b0:	e0 8b 03 7b 	brhi	80008fa6 <sys_alloc+0x826>
          (br = (char*)(CALL_MORECORE(asize))) == ss->base+ss->size) {
800088b4:	02 9c       	mov	r12,r1
800088b6:	f0 1f 01 d5 	mcall	80009008 <sys_alloc+0x888>
800088ba:	18 94       	mov	r4,r12
800088bc:	6a 09       	ld.w	r9,r5[0x0]
800088be:	6a 18       	ld.w	r8,r5[0x4]
800088c0:	f2 08 00 08 	add	r8,r9,r8
800088c4:	10 3c       	cp.w	r12,r8
800088c6:	c0 41       	brne	800088ce <sys_alloc+0x14e>
        tbase = br;
        tsize = asize;
      }
    }

    if (tbase == CMFAIL) {    /* Cope with partial failure */
800088c8:	5b fc       	cp.w	r12,-1
800088ca:	e0 81 03 71 	brne	80008fac <sys_alloc+0x82c>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
800088ce:	5b f4       	cp.w	r4,-1
800088d0:	c2 60       	breq	8000891c <sys_alloc+0x19c>
        if (asize < HALF_MAX_SIZE_T &&
800088d2:	e0 69 ff fe 	mov	r9,65534
800088d6:	ea 19 7f ff 	orh	r9,0x7fff
800088da:	12 31       	cp.w	r1,r9
800088dc:	e0 8b 03 68 	brhi	80008fac <sys_alloc+0x82c>
800088e0:	ec c8 ff d7 	sub	r8,r6,-41
800088e4:	02 38       	cp.w	r8,r1
800088e6:	e0 88 03 63 	brls	80008fac <sys_alloc+0x82c>
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
800088ea:	fe f8 07 12 	ld.w	r8,pc[1810]
800088ee:	70 28       	ld.w	r8,r8[0x8]
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
800088f0:	e2 03 11 00 	rsub	r3,r1,0

    if (tbase == CMFAIL) {    /* Cope with partial failure */
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
        if (asize < HALF_MAX_SIZE_T &&
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
800088f4:	f0 c5 ff d7 	sub	r5,r8,-41
800088f8:	0c 05       	add	r5,r6
800088fa:	02 15       	sub	r5,r1
800088fc:	5c 38       	neg	r8
800088fe:	10 65       	and	r5,r8
          if (esize < HALF_MAX_SIZE_T) {
80008900:	12 35       	cp.w	r5,r9
80008902:	e0 8b 03 55 	brhi	80008fac <sys_alloc+0x82c>
            char* end = (char*)CALL_MORECORE(esize);
80008906:	0a 9c       	mov	r12,r5
80008908:	f0 1f 01 c0 	mcall	80009008 <sys_alloc+0x888>
            if (end != CMFAIL)
8000890c:	5b fc       	cp.w	r12,-1
8000890e:	c0 40       	breq	80008916 <sys_alloc+0x196>
              asize += esize;
80008910:	0a 01       	add	r1,r5
80008912:	e0 8f 03 4d 	bral	80008fac <sys_alloc+0x82c>
            else {            /* Can't use; try to release */
            #if HAVE_MORECORE
              CALL_MORECORE(-asize);
80008916:	06 9c       	mov	r12,r3
80008918:	f0 1f 01 bc 	mcall	80009008 <sys_alloc+0x888>
      if (br != CMFAIL) {    /* Use the space we did get */
        tbase = br;
        tsize = asize;
      }
      else
        disable_contiguous(m); /* Don't try contiguous path in the future */
8000891c:	ee f8 01 b4 	ld.w	r8,r7[436]
80008920:	a3 a8       	sbr	r8,0x2
80008922:	ef 48 01 b4 	st.w	r7[436],r8
    RELEASE_MORECORE_LOCK();
  }

  if (HAVE_MMAP && tbase == CMFAIL) {  /* Try MMAP */
    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
    size_t rsize = granularity_align(req);
80008926:	fe f8 06 d6 	ld.w	r8,pc[1750]
8000892a:	70 28       	ld.w	r8,r8[0x8]
8000892c:	f0 c1 ff d7 	sub	r1,r8,-41
80008930:	0c 01       	add	r1,r6
80008932:	5c 38       	neg	r8
80008934:	10 61       	and	r1,r8
    if (rsize > nb) { /* Fail if wraps around zero */
80008936:	02 36       	cp.w	r6,r1
80008938:	e0 82 03 3f 	brhs	80008fb6 <sys_alloc+0x836>
      char* mp = (char*)(CALL_MMAP(rsize));
8000893c:	30 0c       	mov	r12,0
8000893e:	1a dc       	st.w	--sp,r12
80008940:	3f f8       	mov	r8,-1
80008942:	30 39       	mov	r9,3
80008944:	12 9a       	mov	r10,r9
80008946:	02 9b       	mov	r11,r1
80008948:	f0 1f 01 ae 	mcall	80009000 <sys_alloc+0x880>
      if (mp != CMFAIL) {
8000894c:	2f fd       	sub	sp,-4
8000894e:	5b fc       	cp.w	r12,-1
80008950:	e0 80 03 33 	breq	80008fb6 <sys_alloc+0x836>
80008954:	18 95       	mov	r5,r12
80008956:	30 18       	mov	r8,1
80008958:	50 18       	stdsp	sp[0x4],r8
8000895a:	c1 e8       	rjmp	80008996 <sys_alloc+0x216>
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
    if (asize < HALF_MAX_SIZE_T) {
      char* br = CMFAIL;
      char* end = CMFAIL;
      ACQUIRE_MORECORE_LOCK();
      br = (char*)(CALL_MORECORE(asize));
8000895c:	f0 1f 01 ab 	mcall	80009008 <sys_alloc+0x888>
80008960:	18 95       	mov	r5,r12
      end = (char*)(CALL_MORECORE(0));
80008962:	30 0c       	mov	r12,0
80008964:	f0 1f 01 a9 	mcall	80009008 <sys_alloc+0x888>
      RELEASE_MORECORE_LOCK();
      if (br != CMFAIL && end != CMFAIL && br < end) {
80008968:	5b f5       	cp.w	r5,-1
8000896a:	5f 18       	srne	r8
8000896c:	5b fc       	cp.w	r12,-1
8000896e:	5f 19       	srne	r9
80008970:	f1 e9 00 09 	and	r9,r8,r9
80008974:	e0 80 03 12 	breq	80008f98 <sys_alloc+0x818>
80008978:	18 35       	cp.w	r5,r12
8000897a:	e0 82 03 0f 	brhs	80008f98 <sys_alloc+0x818>
        size_t ssize = end - br;
8000897e:	f8 05 01 01 	sub	r1,r12,r5
        if (ssize > nb + TOP_FOOT_SIZE) {
80008982:	ec c9 ff d8 	sub	r9,r6,-40
80008986:	12 31       	cp.w	r1,r9
80008988:	e0 88 03 08 	brls	80008f98 <sys_alloc+0x818>
        }
      }
    }
  }

  if (tbase != CMFAIL) {
8000898c:	58 08       	cp.w	r8,0
8000898e:	e0 80 03 05 	breq	80008f98 <sys_alloc+0x818>
80008992:	30 0b       	mov	r11,0
80008994:	50 1b       	stdsp	sp[0x4],r11

    if ((m->footprint += tsize) > m->max_footprint)
80008996:	ee f8 01 ac 	ld.w	r8,r7[428]
8000899a:	e2 08 00 08 	add	r8,r1,r8
8000899e:	ef 48 01 ac 	st.w	r7[428],r8
800089a2:	ee f9 01 b0 	ld.w	r9,r7[432]
      m->max_footprint = m->footprint;
800089a6:	12 38       	cp.w	r8,r9
800089a8:	ef f8 ba 6c 	st.whi	r7[0x1b0],r8

    if (!is_initialized(m)) { /* first-time initialization */
800089ac:	6e 6c       	ld.w	r12,r7[0x18]
800089ae:	58 0c       	cp.w	r12,0
800089b0:	c2 c1       	brne	80008a08 <sys_alloc+0x288>
      m->seg.base = m->least_addr = tbase;
800089b2:	8f 45       	st.w	r7[0x10],r5
800089b4:	ef 45 01 b8 	st.w	r7[440],r5
      m->seg.size = tsize;
800089b8:	ef 41 01 bc 	st.w	r7[444],r1
      m->seg.sflags = mmap_flag;
800089bc:	40 1a       	lddsp	r10,sp[0x4]
800089be:	ef 4a 01 c4 	st.w	r7[452],r10
      m->magic = mparams.magic;
800089c2:	fe f8 06 3a 	ld.w	r8,pc[1594]
800089c6:	70 08       	ld.w	r8,r8[0x0]
800089c8:	8f 88       	st.w	r7[0x20],r8
      init_bins(m);
800089ca:	0e 9c       	mov	r12,r7
800089cc:	f0 1f 01 90 	mcall	8000900c <sys_alloc+0x88c>
      if (is_global(m))
800089d0:	fe f8 06 40 	ld.w	r8,pc[1600]
800089d4:	10 37       	cp.w	r7,r8
800089d6:	c0 91       	brne	800089e8 <sys_alloc+0x268>
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
800089d8:	e2 ca 00 28 	sub	r10,r1,40
800089dc:	0a 9b       	mov	r11,r5
800089de:	10 9c       	mov	r12,r8
800089e0:	f0 1f 01 8d 	mcall	80009014 <sys_alloc+0x894>
800089e4:	e0 8f 02 ca 	bral	80008f78 <sys_alloc+0x7f8>
      else {
        /* Offset top by embedded malloc_state */
        mchunkptr mn = next_chunk(mem2chunk(m));
800089e8:	ee fb ff fc 	ld.w	r11,r7[-4]
800089ec:	e0 1b ff fc 	andl	r11,0xfffc
800089f0:	20 8b       	sub	r11,8
800089f2:	ee 0b 00 0b 	add	r11,r7,r11
        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
800089f6:	ea 01 00 0a 	add	r10,r5,r1
800089fa:	16 1a       	sub	r10,r11
800089fc:	22 8a       	sub	r10,40
800089fe:	0e 9c       	mov	r12,r7
80008a00:	f0 1f 01 85 	mcall	80009014 <sys_alloc+0x894>
80008a04:	e0 8f 02 ba 	bral	80008f78 <sys_alloc+0x7f8>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
80008a08:	ee c9 fe 48 	sub	r9,r7,-440
      while (sp != 0 && tbase != sp->base + sp->size)
80008a0c:	c2 e0       	breq	80008a68 <sys_alloc+0x2e8>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
80008a0e:	ee fa 01 b8 	ld.w	r10,r7[440]
80008a12:	ee f8 01 bc 	ld.w	r8,r7[444]
80008a16:	f4 08 00 08 	add	r8,r10,r8
80008a1a:	10 35       	cp.w	r5,r8
80008a1c:	e0 80 02 dd 	breq	80008fd6 <sys_alloc+0x856>
80008a20:	12 98       	mov	r8,r9
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
80008a22:	70 28       	ld.w	r8,r8[0x8]
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
80008a24:	58 08       	cp.w	r8,0
80008a26:	c2 10       	breq	80008a68 <sys_alloc+0x2e8>
80008a28:	70 0b       	ld.w	r11,r8[0x0]
80008a2a:	70 1a       	ld.w	r10,r8[0x4]
80008a2c:	f6 0a 00 0a 	add	r10,r11,r10
80008a30:	14 35       	cp.w	r5,r10
80008a32:	cf 81       	brne	80008a22 <sys_alloc+0x2a2>
80008a34:	e0 8f 02 d2 	bral	80008fd8 <sys_alloc+0x858>
        sp = sp->next;
      if (sp != 0 &&
80008a38:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008a3c:	40 1b       	lddsp	r11,sp[0x4]
80008a3e:	16 3a       	cp.w	r10,r11
80008a40:	c1 41       	brne	80008a68 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
80008a42:	70 0a       	ld.w	r10,r8[0x0]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008a44:	14 3c       	cp.w	r12,r10
80008a46:	c1 13       	brcs	80008a68 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
80008a48:	70 1b       	ld.w	r11,r8[0x4]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008a4a:	16 0a       	add	r10,r11
80008a4c:	14 3c       	cp.w	r12,r10
80008a4e:	c0 d2       	brcc	80008a68 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
80008a50:	e2 0b 00 0b 	add	r11,r1,r11
80008a54:	91 1b       	st.w	r8[0x4],r11
        init_top(m, m->top, m->topsize + tsize);
80008a56:	6e 3a       	ld.w	r10,r7[0xc]
80008a58:	e2 0a 00 0a 	add	r10,r1,r10
80008a5c:	6e 6b       	ld.w	r11,r7[0x18]
80008a5e:	0e 9c       	mov	r12,r7
80008a60:	f0 1f 01 6d 	mcall	80009014 <sys_alloc+0x894>
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008a64:	e0 8f 02 8a 	bral	80008f78 <sys_alloc+0x7f8>
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
        init_top(m, m->top, m->topsize + tsize);
      }
      else {
        if (tbase < m->least_addr)
80008a68:	6e 48       	ld.w	r8,r7[0x10]
          m->least_addr = tbase;
80008a6a:	0a 38       	cp.w	r8,r5
80008a6c:	ef f5 ba 04 	st.whi	r7[0x10],r5
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
80008a70:	58 09       	cp.w	r9,0
80008a72:	e0 80 01 91 	breq	80008d94 <sys_alloc+0x614>
80008a76:	ea 01 00 0a 	add	r10,r5,r1
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
80008a7a:	ee f8 01 b8 	ld.w	r8,r7[440]
80008a7e:	14 38       	cp.w	r8,r10
80008a80:	e0 80 02 b4 	breq	80008fe8 <sys_alloc+0x868>
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
80008a84:	72 29       	ld.w	r9,r9[0x8]
      }
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
80008a86:	58 09       	cp.w	r9,0
80008a88:	e0 80 01 86 	breq	80008d94 <sys_alloc+0x614>
80008a8c:	72 08       	ld.w	r8,r9[0x0]
80008a8e:	14 38       	cp.w	r8,r10
80008a90:	cf a1       	brne	80008a84 <sys_alloc+0x304>
80008a92:	e0 8f 02 ab 	bral	80008fe8 <sys_alloc+0x868>
          sp = sp->next;
        if (sp != 0 &&
80008a96:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008a9a:	40 1a       	lddsp	r10,sp[0x4]
80008a9c:	14 38       	cp.w	r8,r10
80008a9e:	e0 81 01 7b 	brne	80008d94 <sys_alloc+0x614>
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
80008aa2:	72 08       	ld.w	r8,r9[0x0]
          sp->base = tbase;
80008aa4:	93 05       	st.w	r9[0x0],r5
          sp->size += tsize;
80008aa6:	72 1a       	ld.w	r10,r9[0x4]
80008aa8:	f4 01 00 01 	add	r1,r10,r1
80008aac:	93 11       	st.w	r9[0x4],r1
#endif /* PROCEED_ON_ERROR */

/* Allocate chunk and prepend remainder with chunk in successor base. */
static void* prepend_alloc(mstate m, char* newbase, char* oldbase,
                           size_t nb) {
  mchunkptr p = align_as_chunk(newbase);
80008aae:	f3 d5 c0 03 	bfextu	r9,r5,0x0,0x3
80008ab2:	c0 31       	brne	80008ab8 <sys_alloc+0x338>
80008ab4:	30 0c       	mov	r12,0
80008ab6:	c0 58       	rjmp	80008ac0 <sys_alloc+0x340>
80008ab8:	f2 0c 11 08 	rsub	r12,r9,8
80008abc:	f9 dc c0 03 	bfextu	r12,r12,0x0,0x3
80008ac0:	ea 0c 00 0c 	add	r12,r5,r12
  mchunkptr oldfirst = align_as_chunk(oldbase);
80008ac4:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80008ac8:	c0 31       	brne	80008ace <sys_alloc+0x34e>
80008aca:	30 0a       	mov	r10,0
80008acc:	c0 58       	rjmp	80008ad6 <sys_alloc+0x356>
80008ace:	f2 0a 11 08 	rsub	r10,r9,8
80008ad2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80008ad6:	f0 0a 00 0a 	add	r10,r8,r10
  size_t psize = (char*)oldfirst - (char*)p;
  mchunkptr q = chunk_plus_offset(p, nb);
80008ada:	f8 06 00 05 	add	r5,r12,r6
  size_t qsize = psize - nb;
80008ade:	f4 0c 01 09 	sub	r9,r10,r12
80008ae2:	0c 19       	sub	r9,r6
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
80008ae4:	e8 16 00 03 	orl	r6,0x3
80008ae8:	99 16       	st.w	r12[0x4],r6
  assert((char*)oldfirst > (char*)q);
  assert(pinuse(oldfirst));
  assert(qsize >= MIN_CHUNK_SIZE);

  /* consolidate remainder with first chunk of old base */
  if (oldfirst == m->top) {
80008aea:	6e 68       	ld.w	r8,r7[0x18]
80008aec:	10 3a       	cp.w	r10,r8
80008aee:	c0 81       	brne	80008afe <sys_alloc+0x37e>
    size_t tsize = m->topsize += qsize;
80008af0:	6e 38       	ld.w	r8,r7[0xc]
80008af2:	10 09       	add	r9,r8
80008af4:	8f 39       	st.w	r7[0xc],r9
    m->top = q;
80008af6:	8f 65       	st.w	r7[0x18],r5
    q->head = tsize | PINUSE_BIT;
80008af8:	a1 a9       	sbr	r9,0x0
80008afa:	8b 19       	st.w	r5[0x4],r9
80008afc:	c4 a9       	rjmp	80008d90 <sys_alloc+0x610>
    check_top_chunk(m, q);
  }
  else if (oldfirst == m->dv) {
80008afe:	6e 58       	ld.w	r8,r7[0x14]
80008b00:	10 3a       	cp.w	r10,r8
80008b02:	c0 b1       	brne	80008b18 <sys_alloc+0x398>
    size_t dsize = m->dvsize += qsize;
80008b04:	6e 28       	ld.w	r8,r7[0x8]
80008b06:	10 09       	add	r9,r8
80008b08:	8f 29       	st.w	r7[0x8],r9
    m->dv = q;
80008b0a:	8f 55       	st.w	r7[0x14],r5
    set_size_and_pinuse_of_free_chunk(q, dsize);
80008b0c:	12 98       	mov	r8,r9
80008b0e:	a1 a8       	sbr	r8,0x0
80008b10:	8b 18       	st.w	r5[0x4],r8
80008b12:	ea 09 09 09 	st.w	r5[r9],r9
80008b16:	c3 d9       	rjmp	80008d90 <sys_alloc+0x610>
  }
  else {
    if (!cinuse(oldfirst)) {
80008b18:	74 18       	ld.w	r8,r10[0x4]
80008b1a:	10 9b       	mov	r11,r8
80008b1c:	e2 1b 00 02 	andl	r11,0x2,COH
80008b20:	e0 81 00 92 	brne	80008c44 <sys_alloc+0x4c4>
      size_t nsize = chunksize(oldfirst);
80008b24:	10 94       	mov	r4,r8
80008b26:	e0 14 ff fc 	andl	r4,0xfffc
      unlink_chunk(m, oldfirst, nsize);
80008b2a:	e8 08 16 03 	lsr	r8,r4,0x3
80008b2e:	59 f8       	cp.w	r8,31
80008b30:	e0 8b 00 22 	brhi	80008b74 <sys_alloc+0x3f4>
80008b34:	74 2b       	ld.w	r11,r10[0x8]
80008b36:	74 36       	ld.w	r6,r10[0xc]
80008b38:	0c 3b       	cp.w	r11,r6
80008b3a:	c0 a1       	brne	80008b4e <sys_alloc+0x3ce>
80008b3c:	30 1b       	mov	r11,1
80008b3e:	f6 08 09 48 	lsl	r8,r11,r8
80008b42:	5c d8       	com	r8
80008b44:	6e 0b       	ld.w	r11,r7[0x0]
80008b46:	f7 e8 00 08 	and	r8,r11,r8
80008b4a:	8f 08       	st.w	r7[0x0],r8
80008b4c:	c7 a8       	rjmp	80008c40 <sys_alloc+0x4c0>
80008b4e:	ee c3 ff dc 	sub	r3,r7,-36
80008b52:	e6 08 00 38 	add	r8,r3,r8<<0x3
80008b56:	10 3b       	cp.w	r11,r8
80008b58:	c0 50       	breq	80008b62 <sys_alloc+0x3e2>
80008b5a:	6e 43       	ld.w	r3,r7[0x10]
80008b5c:	16 33       	cp.w	r3,r11
80008b5e:	e0 8b 00 71 	brhi	80008c40 <sys_alloc+0x4c0>
80008b62:	10 36       	cp.w	r6,r8
80008b64:	c0 50       	breq	80008b6e <sys_alloc+0x3ee>
80008b66:	6e 48       	ld.w	r8,r7[0x10]
80008b68:	0c 38       	cp.w	r8,r6
80008b6a:	e0 8b 00 6b 	brhi	80008c40 <sys_alloc+0x4c0>
80008b6e:	97 36       	st.w	r11[0xc],r6
80008b70:	8d 2b       	st.w	r6[0x8],r11
80008b72:	c6 78       	rjmp	80008c40 <sys_alloc+0x4c0>
80008b74:	14 93       	mov	r3,r10
80008b76:	74 62       	ld.w	r2,r10[0x18]
80008b78:	74 38       	ld.w	r8,r10[0xc]
80008b7a:	10 3a       	cp.w	r10,r8
80008b7c:	c0 90       	breq	80008b8e <sys_alloc+0x40e>
80008b7e:	74 2b       	ld.w	r11,r10[0x8]
80008b80:	6e 46       	ld.w	r6,r7[0x10]
80008b82:	16 36       	cp.w	r6,r11
80008b84:	e0 8b 00 23 	brhi	80008bca <sys_alloc+0x44a>
80008b88:	97 38       	st.w	r11[0xc],r8
80008b8a:	91 2b       	st.w	r8[0x8],r11
80008b8c:	c1 f8       	rjmp	80008bca <sys_alloc+0x44a>
80008b8e:	74 58       	ld.w	r8,r10[0x14]
80008b90:	58 08       	cp.w	r8,0
80008b92:	c0 40       	breq	80008b9a <sys_alloc+0x41a>
80008b94:	f4 c6 ff ec 	sub	r6,r10,-20
80008b98:	c0 a8       	rjmp	80008bac <sys_alloc+0x42c>
80008b9a:	74 48       	ld.w	r8,r10[0x10]
80008b9c:	58 08       	cp.w	r8,0
80008b9e:	c1 60       	breq	80008bca <sys_alloc+0x44a>
80008ba0:	f4 c6 ff f0 	sub	r6,r10,-16
80008ba4:	c0 48       	rjmp	80008bac <sys_alloc+0x42c>
80008ba6:	f0 c6 ff ec 	sub	r6,r8,-20
80008baa:	16 98       	mov	r8,r11
80008bac:	70 5b       	ld.w	r11,r8[0x14]
80008bae:	58 0b       	cp.w	r11,0
80008bb0:	cf b1       	brne	80008ba6 <sys_alloc+0x426>
80008bb2:	70 4b       	ld.w	r11,r8[0x10]
80008bb4:	58 0b       	cp.w	r11,0
80008bb6:	c0 40       	breq	80008bbe <sys_alloc+0x43e>
80008bb8:	f0 c6 ff f0 	sub	r6,r8,-16
80008bbc:	cf 7b       	rjmp	80008baa <sys_alloc+0x42a>
80008bbe:	6e 4b       	ld.w	r11,r7[0x10]
80008bc0:	0c 3b       	cp.w	r11,r6
80008bc2:	f9 bb 08 00 	movls	r11,0
80008bc6:	ed fb 8a 00 	st.wls	r6[0x0],r11
80008bca:	58 02       	cp.w	r2,0
80008bcc:	c3 a0       	breq	80008c40 <sys_alloc+0x4c0>
80008bce:	66 7b       	ld.w	r11,r3[0x1c]
80008bd0:	f6 c6 ff b5 	sub	r6,r11,-75
80008bd4:	ee 06 03 26 	ld.w	r6,r7[r6<<0x2]
80008bd8:	0c 33       	cp.w	r3,r6
80008bda:	c1 01       	brne	80008bfa <sys_alloc+0x47a>
80008bdc:	2b 5b       	sub	r11,-75
80008bde:	ee 0b 09 28 	st.w	r7[r11<<0x2],r8
80008be2:	58 08       	cp.w	r8,0
80008be4:	c1 71       	brne	80008c12 <sys_alloc+0x492>
80008be6:	66 78       	ld.w	r8,r3[0x1c]
80008be8:	30 1b       	mov	r11,1
80008bea:	f6 08 09 48 	lsl	r8,r11,r8
80008bee:	5c d8       	com	r8
80008bf0:	6e 1b       	ld.w	r11,r7[0x4]
80008bf2:	f7 e8 00 08 	and	r8,r11,r8
80008bf6:	8f 18       	st.w	r7[0x4],r8
80008bf8:	c2 48       	rjmp	80008c40 <sys_alloc+0x4c0>
80008bfa:	6e 4b       	ld.w	r11,r7[0x10]
80008bfc:	04 3b       	cp.w	r11,r2
80008bfe:	e0 8b 00 08 	brhi	80008c0e <sys_alloc+0x48e>
80008c02:	64 4b       	ld.w	r11,r2[0x10]
80008c04:	16 33       	cp.w	r3,r11
80008c06:	e5 f8 0a 04 	st.weq	r2[0x10],r8
80008c0a:	e5 f8 1a 05 	st.wne	r2[0x14],r8
80008c0e:	58 08       	cp.w	r8,0
80008c10:	c1 80       	breq	80008c40 <sys_alloc+0x4c0>
80008c12:	6e 4b       	ld.w	r11,r7[0x10]
80008c14:	10 3b       	cp.w	r11,r8
80008c16:	e0 8b 00 15 	brhi	80008c40 <sys_alloc+0x4c0>
80008c1a:	91 62       	st.w	r8[0x18],r2
80008c1c:	66 4b       	ld.w	r11,r3[0x10]
80008c1e:	58 0b       	cp.w	r11,0
80008c20:	c0 70       	breq	80008c2e <sys_alloc+0x4ae>
80008c22:	6e 46       	ld.w	r6,r7[0x10]
80008c24:	16 36       	cp.w	r6,r11
80008c26:	f1 fb 8a 04 	st.wls	r8[0x10],r11
80008c2a:	f7 f8 8a 06 	st.wls	r11[0x18],r8
80008c2e:	66 5b       	ld.w	r11,r3[0x14]
80008c30:	58 0b       	cp.w	r11,0
80008c32:	c0 70       	breq	80008c40 <sys_alloc+0x4c0>
80008c34:	6e 46       	ld.w	r6,r7[0x10]
80008c36:	16 36       	cp.w	r6,r11
80008c38:	f1 fb 8a 05 	st.wls	r8[0x14],r11
80008c3c:	f7 f8 8a 06 	st.wls	r11[0x18],r8
      oldfirst = chunk_plus_offset(oldfirst, nsize);
80008c40:	08 0a       	add	r10,r4
      qsize += nsize;
80008c42:	08 09       	add	r9,r4
    }
    set_free_with_pinuse(q, qsize, oldfirst);
80008c44:	74 18       	ld.w	r8,r10[0x4]
80008c46:	a1 c8       	cbr	r8,0x0
80008c48:	95 18       	st.w	r10[0x4],r8
80008c4a:	12 98       	mov	r8,r9
80008c4c:	a1 a8       	sbr	r8,0x0
80008c4e:	8b 18       	st.w	r5[0x4],r8
80008c50:	ea 09 09 09 	st.w	r5[r9],r9
    insert_chunk(m, q, qsize);
80008c54:	f2 08 16 03 	lsr	r8,r9,0x3
80008c58:	59 f8       	cp.w	r8,31
80008c5a:	e0 8b 00 1b 	brhi	80008c90 <sys_alloc+0x510>
80008c5e:	ee c9 ff dc 	sub	r9,r7,-36
80008c62:	f2 08 00 39 	add	r9,r9,r8<<0x3
80008c66:	6e 0a       	ld.w	r10,r7[0x0]
80008c68:	30 1b       	mov	r11,1
80008c6a:	f6 08 09 48 	lsl	r8,r11,r8
80008c6e:	f1 ea 00 0b 	and	r11,r8,r10
80008c72:	c0 51       	brne	80008c7c <sys_alloc+0x4fc>
80008c74:	14 48       	or	r8,r10
80008c76:	8f 08       	st.w	r7[0x0],r8
80008c78:	12 98       	mov	r8,r9
80008c7a:	c0 68       	rjmp	80008c86 <sys_alloc+0x506>
80008c7c:	72 28       	ld.w	r8,r9[0x8]
80008c7e:	6e 4a       	ld.w	r10,r7[0x10]
80008c80:	14 38       	cp.w	r8,r10
80008c82:	f2 08 17 30 	movlo	r8,r9
80008c86:	93 25       	st.w	r9[0x8],r5
80008c88:	91 35       	st.w	r8[0xc],r5
80008c8a:	8b 28       	st.w	r5[0x8],r8
80008c8c:	8b 39       	st.w	r5[0xc],r9
80008c8e:	c8 18       	rjmp	80008d90 <sys_alloc+0x610>
80008c90:	f2 08 16 08 	lsr	r8,r9,0x8
80008c94:	c0 31       	brne	80008c9a <sys_alloc+0x51a>
80008c96:	30 0a       	mov	r10,0
80008c98:	c2 d8       	rjmp	80008cf2 <sys_alloc+0x572>
80008c9a:	e0 48 ff ff 	cp.w	r8,65535
80008c9e:	e0 88 00 04 	brls	80008ca6 <sys_alloc+0x526>
80008ca2:	31 fa       	mov	r10,31
80008ca4:	c2 78       	rjmp	80008cf2 <sys_alloc+0x572>
80008ca6:	f0 c6 01 00 	sub	r6,r8,256
80008caa:	b1 86       	lsr	r6,0x10
80008cac:	e2 16 00 08 	andl	r6,0x8,COH
80008cb0:	f0 06 09 48 	lsl	r8,r8,r6
80008cb4:	f0 cb 10 00 	sub	r11,r8,4096
80008cb8:	b1 8b       	lsr	r11,0x10
80008cba:	e2 1b 00 04 	andl	r11,0x4,COH
80008cbe:	f0 0b 09 48 	lsl	r8,r8,r11
80008cc2:	f0 ca 40 00 	sub	r10,r8,16384
80008cc6:	b1 8a       	lsr	r10,0x10
80008cc8:	e2 1a 00 02 	andl	r10,0x2,COH
80008ccc:	f0 0a 09 48 	lsl	r8,r8,r10
80008cd0:	af 98       	lsr	r8,0xf
80008cd2:	ec 06 11 0e 	rsub	r6,r6,14
80008cd6:	ec 0b 01 0b 	sub	r11,r6,r11
80008cda:	f6 0a 01 0a 	sub	r10,r11,r10
80008cde:	f4 08 00 08 	add	r8,r10,r8
80008ce2:	f0 ca ff f9 	sub	r10,r8,-7
80008ce6:	f2 0a 0a 4a 	lsr	r10,r9,r10
80008cea:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008cee:	f4 08 00 1a 	add	r10,r10,r8<<0x1
80008cf2:	8b 7a       	st.w	r5[0x1c],r10
80008cf4:	30 08       	mov	r8,0
80008cf6:	8b 58       	st.w	r5[0x14],r8
80008cf8:	8b 48       	st.w	r5[0x10],r8
80008cfa:	6e 18       	ld.w	r8,r7[0x4]
80008cfc:	30 1b       	mov	r11,1
80008cfe:	f6 0a 09 4b 	lsl	r11,r11,r10
80008d02:	f7 e8 00 06 	and	r6,r11,r8
80008d06:	c0 d1       	brne	80008d20 <sys_alloc+0x5a0>
80008d08:	f7 e8 10 08 	or	r8,r11,r8
80008d0c:	8f 18       	st.w	r7[0x4],r8
80008d0e:	2b 5a       	sub	r10,-75
80008d10:	ee 0a 09 25 	st.w	r7[r10<<0x2],r5
80008d14:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
80008d18:	8b 6a       	st.w	r5[0x18],r10
80008d1a:	8b 35       	st.w	r5[0xc],r5
80008d1c:	8b 25       	st.w	r5[0x8],r5
80008d1e:	c3 98       	rjmp	80008d90 <sys_alloc+0x610>
80008d20:	f4 c8 ff b5 	sub	r8,r10,-75
80008d24:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
80008d28:	59 fa       	cp.w	r10,31
80008d2a:	c0 31       	brne	80008d30 <sys_alloc+0x5b0>
80008d2c:	30 0b       	mov	r11,0
80008d2e:	c0 48       	rjmp	80008d36 <sys_alloc+0x5b6>
80008d30:	a1 9a       	lsr	r10,0x1
80008d32:	f4 0b 11 19 	rsub	r11,r10,25
80008d36:	f2 0b 09 4b 	lsl	r11,r9,r11
80008d3a:	70 1a       	ld.w	r10,r8[0x4]
80008d3c:	e0 1a ff fc 	andl	r10,0xfffc
80008d40:	14 39       	cp.w	r9,r10
80008d42:	c1 90       	breq	80008d74 <sys_alloc+0x5f4>
80008d44:	f6 06 16 1f 	lsr	r6,r11,0x1f
80008d48:	ec ca ff fc 	sub	r10,r6,-4
80008d4c:	f0 0a 00 24 	add	r4,r8,r10<<0x2
80008d50:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008d54:	58 0a       	cp.w	r10,0
80008d56:	c0 40       	breq	80008d5e <sys_alloc+0x5de>
80008d58:	a1 7b       	lsl	r11,0x1
80008d5a:	14 98       	mov	r8,r10
80008d5c:	ce fb       	rjmp	80008d3a <sys_alloc+0x5ba>
80008d5e:	6e 49       	ld.w	r9,r7[0x10]
80008d60:	08 39       	cp.w	r9,r4
80008d62:	e0 8b 00 17 	brhi	80008d90 <sys_alloc+0x610>
80008d66:	2f c6       	sub	r6,-4
80008d68:	f0 06 09 25 	st.w	r8[r6<<0x2],r5
80008d6c:	8b 68       	st.w	r5[0x18],r8
80008d6e:	8b 35       	st.w	r5[0xc],r5
80008d70:	8b 25       	st.w	r5[0x8],r5
80008d72:	c0 f8       	rjmp	80008d90 <sys_alloc+0x610>
80008d74:	70 29       	ld.w	r9,r8[0x8]
80008d76:	6e 4a       	ld.w	r10,r7[0x10]
80008d78:	10 3a       	cp.w	r10,r8
80008d7a:	e0 8b 00 0b 	brhi	80008d90 <sys_alloc+0x610>
80008d7e:	12 3a       	cp.w	r10,r9
80008d80:	e0 8b 00 08 	brhi	80008d90 <sys_alloc+0x610>
80008d84:	93 35       	st.w	r9[0xc],r5
80008d86:	91 25       	st.w	r8[0x8],r5
80008d88:	8b 29       	st.w	r5[0x8],r9
80008d8a:	8b 38       	st.w	r5[0xc],r8
80008d8c:	30 08       	mov	r8,0
80008d8e:	8b 68       	st.w	r5[0x18],r8
    check_free_chunk(m, q);
  }

  check_malloced_chunk(m, chunk2mem(p), nb);
  return chunk2mem(p);
80008d90:	2f 8c       	sub	r12,-8
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
          sp->base = tbase;
          sp->size += tsize;
          return prepend_alloc(m, tbase, oldbase, nb);
80008d92:	c0 49       	rjmp	80008f9a <sys_alloc+0x81a>


/* Add a segment to hold a new noncontiguous region */
static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {
  /* Determine locations and sizes of segment, fenceposts, old top */
  char* old_top = (char*)m->top;
80008d94:	6e 60       	ld.w	r0,r7[0x18]
80008d96:	50 20       	stdsp	sp[0x8],r0
  msegmentptr oldsp = segment_holding(m, old_top);
80008d98:	00 9b       	mov	r11,r0
80008d9a:	0e 9c       	mov	r12,r7
80008d9c:	f0 1f 00 9a 	mcall	80009004 <sys_alloc+0x884>
  char* old_end = oldsp->base + oldsp->size;
80008da0:	78 03       	ld.w	r3,r12[0x0]
80008da2:	78 18       	ld.w	r8,r12[0x4]
80008da4:	10 03       	add	r3,r8
  size_t ssize = pad_request(sizeof(struct malloc_segment));
  char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
80008da6:	e6 c9 00 2f 	sub	r9,r3,47
  size_t offset = align_offset(chunk2mem(rawsp));
80008daa:	e6 c8 00 27 	sub	r8,r3,39
80008dae:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80008db2:	c0 31       	brne	80008db8 <sys_alloc+0x638>
80008db4:	30 02       	mov	r2,0
80008db6:	c0 58       	rjmp	80008dc0 <sys_alloc+0x640>
80008db8:	f0 02 11 08 	rsub	r2,r8,8
80008dbc:	e5 d2 c0 03 	bfextu	r2,r2,0x0,0x3
  char* asp = rawsp + offset;
80008dc0:	f2 02 00 02 	add	r2,r9,r2
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
80008dc4:	40 28       	lddsp	r8,sp[0x8]
80008dc6:	2f 08       	sub	r8,-16
80008dc8:	40 29       	lddsp	r9,sp[0x8]
80008dca:	10 32       	cp.w	r2,r8
80008dcc:	f2 02 17 30 	movlo	r2,r9
  mchunkptr sp = (mchunkptr)csp;
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
80008dd0:	e4 c8 ff f8 	sub	r8,r2,-8
80008dd4:	50 08       	stdsp	sp[0x0],r8
  mchunkptr tnext = chunk_plus_offset(sp, ssize);
80008dd6:	e4 c4 ff e8 	sub	r4,r2,-24
  mchunkptr p = tnext;
  int nfences = 0;

  /* reset top to new space */
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
80008dda:	e2 ca 00 28 	sub	r10,r1,40
80008dde:	0a 9b       	mov	r11,r5
80008de0:	0e 9c       	mov	r12,r7
80008de2:	f0 1f 00 8d 	mcall	80009014 <sys_alloc+0x894>

  /* Set up segment record */
  assert(is_aligned(ss));
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
80008de6:	31 b8       	mov	r8,27
80008de8:	85 18       	st.w	r2[0x4],r8
  *ss = m->seg; /* Push current record */
80008dea:	ee c8 fe 48 	sub	r8,r7,-440
80008dee:	70 09       	ld.w	r9,r8[0x0]
80008df0:	40 0b       	lddsp	r11,sp[0x0]
80008df2:	97 09       	st.w	r11[0x0],r9
80008df4:	70 19       	ld.w	r9,r8[0x4]
80008df6:	97 19       	st.w	r11[0x4],r9
80008df8:	70 29       	ld.w	r9,r8[0x8]
80008dfa:	97 29       	st.w	r11[0x8],r9
80008dfc:	70 38       	ld.w	r8,r8[0xc]
80008dfe:	97 38       	st.w	r11[0xc],r8
  m->seg.base = tbase;
80008e00:	ef 45 01 b8 	st.w	r7[440],r5
  m->seg.size = tsize;
80008e04:	ef 41 01 bc 	st.w	r7[444],r1
  m->seg.sflags = mmapped;
80008e08:	40 1a       	lddsp	r10,sp[0x4]
80008e0a:	ef 4a 01 c4 	st.w	r7[452],r10
  m->seg.next = ss;
80008e0e:	ef 4b 01 c0 	st.w	r7[448],r11

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
    p->head = FENCEPOST_HEAD;
80008e12:	30 79       	mov	r9,7
  m->seg.sflags = mmapped;
  m->seg.next = ss;

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
80008e14:	2f c4       	sub	r4,-4
    p->head = FENCEPOST_HEAD;
80008e16:	08 98       	mov	r8,r4
80008e18:	10 a9       	st.w	r8++,r9
    ++nfences;
    if ((char*)(&(nextp->head)) < old_end)
80008e1a:	10 33       	cp.w	r3,r8
80008e1c:	fe 9b ff fc 	brhi	80008e14 <sys_alloc+0x694>
      break;
  }
  assert(nfences >= 2);

  /* Insert the rest of old top into a bin as an ordinary free chunk */
  if (csp != old_top) {
80008e20:	40 29       	lddsp	r9,sp[0x8]
80008e22:	04 39       	cp.w	r9,r2
80008e24:	e0 80 00 aa 	breq	80008f78 <sys_alloc+0x7f8>
    mchunkptr q = (mchunkptr)old_top;
    size_t psize = csp - old_top;
80008e28:	12 12       	sub	r2,r9
    mchunkptr tn = chunk_plus_offset(q, psize);
80008e2a:	e0 02 00 08 	add	r8,r0,r2
    set_free_with_pinuse(q, psize, tn);
80008e2e:	70 19       	ld.w	r9,r8[0x4]
80008e30:	a1 c9       	cbr	r9,0x0
80008e32:	91 19       	st.w	r8[0x4],r9
80008e34:	04 99       	mov	r9,r2
80008e36:	a1 a9       	sbr	r9,0x0
80008e38:	81 19       	st.w	r0[0x4],r9
80008e3a:	91 02       	st.w	r8[0x0],r2
    insert_chunk(m, q, psize);
80008e3c:	e4 08 16 03 	lsr	r8,r2,0x3
80008e40:	59 f8       	cp.w	r8,31
80008e42:	e0 8b 00 1b 	brhi	80008e78 <sys_alloc+0x6f8>
80008e46:	ee c9 ff dc 	sub	r9,r7,-36
80008e4a:	f2 08 00 39 	add	r9,r9,r8<<0x3
80008e4e:	6e 0a       	ld.w	r10,r7[0x0]
80008e50:	30 1b       	mov	r11,1
80008e52:	f6 08 09 48 	lsl	r8,r11,r8
80008e56:	f1 ea 00 0b 	and	r11,r8,r10
80008e5a:	c0 51       	brne	80008e64 <sys_alloc+0x6e4>
80008e5c:	14 48       	or	r8,r10
80008e5e:	8f 08       	st.w	r7[0x0],r8
80008e60:	12 98       	mov	r8,r9
80008e62:	c0 68       	rjmp	80008e6e <sys_alloc+0x6ee>
80008e64:	72 28       	ld.w	r8,r9[0x8]
80008e66:	6e 4a       	ld.w	r10,r7[0x10]
80008e68:	14 38       	cp.w	r8,r10
80008e6a:	f2 08 17 30 	movlo	r8,r9
80008e6e:	93 20       	st.w	r9[0x8],r0
80008e70:	91 30       	st.w	r8[0xc],r0
80008e72:	81 28       	st.w	r0[0x8],r8
80008e74:	81 39       	st.w	r0[0xc],r9
80008e76:	c8 18       	rjmp	80008f78 <sys_alloc+0x7f8>
80008e78:	e4 08 16 08 	lsr	r8,r2,0x8
80008e7c:	c0 31       	brne	80008e82 <sys_alloc+0x702>
80008e7e:	30 09       	mov	r9,0
80008e80:	c2 d8       	rjmp	80008eda <sys_alloc+0x75a>
80008e82:	e0 48 ff ff 	cp.w	r8,65535
80008e86:	e0 88 00 04 	brls	80008e8e <sys_alloc+0x70e>
80008e8a:	31 f9       	mov	r9,31
80008e8c:	c2 78       	rjmp	80008eda <sys_alloc+0x75a>
80008e8e:	f0 cb 01 00 	sub	r11,r8,256
80008e92:	b1 8b       	lsr	r11,0x10
80008e94:	e2 1b 00 08 	andl	r11,0x8,COH
80008e98:	f0 0b 09 48 	lsl	r8,r8,r11
80008e9c:	f0 ca 10 00 	sub	r10,r8,4096
80008ea0:	b1 8a       	lsr	r10,0x10
80008ea2:	e2 1a 00 04 	andl	r10,0x4,COH
80008ea6:	f0 0a 09 48 	lsl	r8,r8,r10
80008eaa:	f0 c9 40 00 	sub	r9,r8,16384
80008eae:	b1 89       	lsr	r9,0x10
80008eb0:	e2 19 00 02 	andl	r9,0x2,COH
80008eb4:	f0 09 09 48 	lsl	r8,r8,r9
80008eb8:	af 98       	lsr	r8,0xf
80008eba:	f6 0b 11 0e 	rsub	r11,r11,14
80008ebe:	f6 0a 01 0a 	sub	r10,r11,r10
80008ec2:	f4 09 01 09 	sub	r9,r10,r9
80008ec6:	f2 08 00 08 	add	r8,r9,r8
80008eca:	f0 c9 ff f9 	sub	r9,r8,-7
80008ece:	e4 09 0a 49 	lsr	r9,r2,r9
80008ed2:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80008ed6:	f2 08 00 19 	add	r9,r9,r8<<0x1
80008eda:	81 79       	st.w	r0[0x1c],r9
80008edc:	30 08       	mov	r8,0
80008ede:	81 58       	st.w	r0[0x14],r8
80008ee0:	81 48       	st.w	r0[0x10],r8
80008ee2:	6e 18       	ld.w	r8,r7[0x4]
80008ee4:	30 1a       	mov	r10,1
80008ee6:	f4 09 09 4a 	lsl	r10,r10,r9
80008eea:	f5 e8 00 0b 	and	r11,r10,r8
80008eee:	c0 d1       	brne	80008f08 <sys_alloc+0x788>
80008ef0:	f5 e8 10 08 	or	r8,r10,r8
80008ef4:	8f 18       	st.w	r7[0x4],r8
80008ef6:	2b 59       	sub	r9,-75
80008ef8:	ee 09 09 20 	st.w	r7[r9<<0x2],r0
80008efc:	ee 09 00 29 	add	r9,r7,r9<<0x2
80008f00:	81 69       	st.w	r0[0x18],r9
80008f02:	81 30       	st.w	r0[0xc],r0
80008f04:	81 20       	st.w	r0[0x8],r0
80008f06:	c3 98       	rjmp	80008f78 <sys_alloc+0x7f8>
80008f08:	f2 c8 ff b5 	sub	r8,r9,-75
80008f0c:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
80008f10:	59 f9       	cp.w	r9,31
80008f12:	c0 31       	brne	80008f18 <sys_alloc+0x798>
80008f14:	30 09       	mov	r9,0
80008f16:	c0 48       	rjmp	80008f1e <sys_alloc+0x79e>
80008f18:	a1 99       	lsr	r9,0x1
80008f1a:	f2 09 11 19 	rsub	r9,r9,25
80008f1e:	e4 09 09 49 	lsl	r9,r2,r9
80008f22:	70 1a       	ld.w	r10,r8[0x4]
80008f24:	e0 1a ff fc 	andl	r10,0xfffc
80008f28:	14 32       	cp.w	r2,r10
80008f2a:	c1 90       	breq	80008f5c <sys_alloc+0x7dc>
80008f2c:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80008f30:	f6 ca ff fc 	sub	r10,r11,-4
80008f34:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
80008f38:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80008f3c:	58 0a       	cp.w	r10,0
80008f3e:	c0 40       	breq	80008f46 <sys_alloc+0x7c6>
80008f40:	a1 79       	lsl	r9,0x1
80008f42:	14 98       	mov	r8,r10
80008f44:	ce fb       	rjmp	80008f22 <sys_alloc+0x7a2>
80008f46:	6e 49       	ld.w	r9,r7[0x10]
80008f48:	18 39       	cp.w	r9,r12
80008f4a:	e0 8b 00 17 	brhi	80008f78 <sys_alloc+0x7f8>
80008f4e:	2f cb       	sub	r11,-4
80008f50:	f0 0b 09 20 	st.w	r8[r11<<0x2],r0
80008f54:	81 68       	st.w	r0[0x18],r8
80008f56:	81 30       	st.w	r0[0xc],r0
80008f58:	81 20       	st.w	r0[0x8],r0
80008f5a:	c0 f8       	rjmp	80008f78 <sys_alloc+0x7f8>
80008f5c:	70 29       	ld.w	r9,r8[0x8]
80008f5e:	6e 4a       	ld.w	r10,r7[0x10]
80008f60:	10 3a       	cp.w	r10,r8
80008f62:	e0 8b 00 0b 	brhi	80008f78 <sys_alloc+0x7f8>
80008f66:	12 3a       	cp.w	r10,r9
80008f68:	e0 8b 00 08 	brhi	80008f78 <sys_alloc+0x7f8>
80008f6c:	93 30       	st.w	r9[0xc],r0
80008f6e:	91 20       	st.w	r8[0x8],r0
80008f70:	81 29       	st.w	r0[0x8],r9
80008f72:	81 38       	st.w	r0[0xc],r8
80008f74:	30 08       	mov	r8,0
80008f76:	81 68       	st.w	r0[0x18],r8
        else
          add_segment(m, tbase, tsize, mmap_flag);
      }
    }

    if (nb < m->topsize) { /* Allocate from new or extended top space */
80008f78:	6e 38       	ld.w	r8,r7[0xc]
80008f7a:	10 36       	cp.w	r6,r8
80008f7c:	c0 e2       	brcc	80008f98 <sys_alloc+0x818>
      size_t rsize = m->topsize -= nb;
80008f7e:	0c 18       	sub	r8,r6
80008f80:	8f 38       	st.w	r7[0xc],r8
      mchunkptr p = m->top;
80008f82:	6e 6c       	ld.w	r12,r7[0x18]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
80008f84:	f8 06 00 09 	add	r9,r12,r6
80008f88:	8f 69       	st.w	r7[0x18],r9
      r->head = rsize | PINUSE_BIT;
80008f8a:	a1 a8       	sbr	r8,0x0
80008f8c:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
80008f8e:	e8 16 00 03 	orl	r6,0x3
80008f92:	99 16       	st.w	r12[0x4],r6
      check_top_chunk(m, m->top);
      check_malloced_chunk(m, chunk2mem(p), nb);
      return chunk2mem(p);
80008f94:	2f 8c       	sub	r12,-8
80008f96:	c0 28       	rjmp	80008f9a <sys_alloc+0x81a>
80008f98:	30 0c       	mov	r12,0
    }
  }

  MALLOC_FAILURE_ACTION;
  return 0;
}
80008f9a:	2f dd       	sub	sp,-12
80008f9c:	d8 32       	popm	r0-r7,pc
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
      r->head = rsize | PINUSE_BIT;
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
      check_top_chunk(m, m->top);
      check_malloced_chunk(m, chunk2mem(p), nb);
      return chunk2mem(p);
80008f9e:	30 01       	mov	r1,0
80008fa0:	3f f4       	mov	r4,-1
80008fa2:	fe 9f fc 96 	bral	800088ce <sys_alloc+0x14e>
80008fa6:	3f f4       	mov	r4,-1
80008fa8:	fe 9f fc 93 	bral	800088ce <sys_alloc+0x14e>
80008fac:	08 95       	mov	r5,r4
80008fae:	30 08       	mov	r8,0
80008fb0:	50 18       	stdsp	sp[0x4],r8
80008fb2:	fe 9f fc f2 	bral	80008996 <sys_alloc+0x216>
      }
    }
  }

  if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
80008fb6:	49 28       	lddpc	r8,80008ffc <sys_alloc+0x87c>
80008fb8:	70 28       	ld.w	r8,r8[0x8]
80008fba:	f0 cc ff d7 	sub	r12,r8,-41
80008fbe:	0c 0c       	add	r12,r6
80008fc0:	5c 38       	neg	r8
80008fc2:	10 6c       	and	r12,r8
    if (asize < HALF_MAX_SIZE_T) {
80008fc4:	e0 6b ff fe 	mov	r11,65534
80008fc8:	ea 1b 7f ff 	orh	r11,0x7fff
80008fcc:	16 3c       	cp.w	r12,r11
80008fce:	fe 9b ff e5 	brhi	80008f98 <sys_alloc+0x818>
80008fd2:	fe 9f fc c5 	bral	8000895c <sys_alloc+0x1dc>
80008fd6:	12 98       	mov	r8,r9
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
          !is_extern_segment(sp) &&
80008fd8:	70 3a       	ld.w	r10,r8[0xc]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80008fda:	14 9b       	mov	r11,r10
80008fdc:	e2 1b 00 08 	andl	r11,0x8,COH
80008fe0:	fe 90 fd 2c 	breq	80008a38 <sys_alloc+0x2b8>
80008fe4:	fe 9f fd 42 	bral	80008a68 <sys_alloc+0x2e8>
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
            !is_extern_segment(sp) &&
80008fe8:	72 38       	ld.w	r8,r9[0xc]
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
80008fea:	10 9a       	mov	r10,r8
80008fec:	e2 1a 00 08 	andl	r10,0x8,COH
80008ff0:	fe 90 fd 53 	breq	80008a96 <sys_alloc+0x316>
80008ff4:	cd 0a       	rjmp	80008d94 <sys_alloc+0x614>
80008ff6:	00 00       	add	r0,r0
80008ff8:	80 00       	ld.sh	r0,r0[0x0]
80008ffa:	73 50       	ld.w	r0,r9[0x54]
80008ffc:	00 00       	add	r0,r0
80008ffe:	14 ec       	st.h	--r10,r12
80009000:	80 00       	ld.sh	r0,r0[0x0]
80009002:	94 e8       	ld.uh	r8,r10[0xc]
80009004:	80 00       	ld.sh	r0,r0[0x0]
80009006:	73 34       	ld.w	r4,r9[0x4c]
80009008:	80 00       	ld.sh	r0,r0[0x0]
8000900a:	94 b4       	ld.uh	r4,r10[0x6]
8000900c:	80 00       	ld.sh	r0,r0[0x0]
8000900e:	73 c8       	ld.w	r8,r9[0x70]
80009010:	00 00       	add	r0,r0
80009012:	13 24       	ld.uh	r4,r9++
80009014:	80 00       	ld.sh	r0,r0[0x0]
80009016:	73 98       	ld.w	r8,r9[0x64]

80009018 <mspace_malloc>:
  mspace versions of routines are near-clones of the global
  versions. This is not so nice but better than the alternatives.
*/


void* mspace_malloc(mspace msp, size_t bytes) {
80009018:	eb cd 40 e0 	pushm	r5-r7,lr
  mstate ms = (mstate)msp;
8000901c:	18 97       	mov	r7,r12
    return 0;
  }
  if (!PREACTION(ms)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
8000901e:	e0 4b 00 f4 	cp.w	r11,244
80009022:	e0 8b 00 c2 	brhi	800091a6 <mspace_malloc+0x18e>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
80009026:	58 ab       	cp.w	r11,10
80009028:	e0 8b 00 04 	brhi	80009030 <mspace_malloc+0x18>
8000902c:	31 06       	mov	r6,16
8000902e:	c0 58       	rjmp	80009038 <mspace_malloc+0x20>
80009030:	f6 c6 ff f5 	sub	r6,r11,-11
80009034:	e0 16 ff f8 	andl	r6,0xfff8
      idx = small_index(nb);
80009038:	ec 08 16 03 	lsr	r8,r6,0x3
      smallbits = ms->smallmap >> idx;
8000903c:	6e 0e       	ld.w	lr,r7[0x0]
8000903e:	10 9b       	mov	r11,r8
80009040:	fc 08 0a 49 	lsr	r9,lr,r8

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
80009044:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80009048:	c2 a0       	breq	8000909c <mspace_malloc+0x84>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
8000904a:	ec 19 00 01 	eorl	r9,0x1
8000904e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80009052:	f2 08 00 08 	add	r8,r9,r8
        b = smallbin_at(ms, idx);
80009056:	ee ca ff dc 	sub	r10,r7,-36
8000905a:	f4 08 00 3a 	add	r10,r10,r8<<0x3
        p = b->fd;
8000905e:	74 2c       	ld.w	r12,r10[0x8]
        assert(chunksize(p) == small_index2size(idx));
        unlink_first_small_chunk(ms, b, p, idx);
80009060:	78 2b       	ld.w	r11,r12[0x8]
80009062:	16 3a       	cp.w	r10,r11
80009064:	c0 91       	brne	80009076 <mspace_malloc+0x5e>
80009066:	30 19       	mov	r9,1
80009068:	f2 08 09 49 	lsl	r9,r9,r8
8000906c:	5c d9       	com	r9
8000906e:	f3 ee 00 0e 	and	lr,r9,lr
80009072:	8f 0e       	st.w	r7[0x0],lr
80009074:	c0 78       	rjmp	80009082 <mspace_malloc+0x6a>
80009076:	6e 49       	ld.w	r9,r7[0x10]
80009078:	16 39       	cp.w	r9,r11
8000907a:	f5 fb 8a 02 	st.wls	r10[0x8],r11
8000907e:	f7 fa 8a 03 	st.wls	r11[0xc],r10
        set_inuse_and_pinuse(ms, p, small_index2size(idx));
80009082:	a3 78       	lsl	r8,0x3
80009084:	10 99       	mov	r9,r8
80009086:	e8 19 00 03 	orl	r9,0x3
8000908a:	99 19       	st.w	r12[0x4],r9
8000908c:	f8 08 00 08 	add	r8,r12,r8
80009090:	70 19       	ld.w	r9,r8[0x4]
80009092:	a1 a9       	sbr	r9,0x0
80009094:	91 19       	st.w	r8[0x4],r9
        mem = chunk2mem(p);
80009096:	2f 8c       	sub	r12,-8
        check_malloced_chunk(ms, mem, nb);
        goto postaction;
80009098:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
      }

      else if (nb > ms->dvsize) {
8000909c:	6e 28       	ld.w	r8,r7[0x8]
8000909e:	10 36       	cp.w	r6,r8
800090a0:	e0 88 00 98 	brls	800091d0 <mspace_malloc+0x1b8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
800090a4:	58 09       	cp.w	r9,0
800090a6:	c7 70       	breq	80009194 <mspace_malloc+0x17c>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
800090a8:	30 28       	mov	r8,2
800090aa:	f0 0b 09 48 	lsl	r8,r8,r11
800090ae:	f0 0a 11 00 	rsub	r10,r8,0
800090b2:	f5 e8 10 08 	or	r8,r10,r8
800090b6:	f2 0b 09 49 	lsl	r9,r9,r11
800090ba:	f1 e9 00 09 	and	r9,r8,r9
          binmap_t leastbit = least_bit(leftbits);
          compute_bit2idx(leastbit, i);
800090be:	f2 0a 11 00 	rsub	r10,r9,0
800090c2:	12 6a       	and	r10,r9
800090c4:	20 1a       	sub	r10,1
800090c6:	f4 09 16 0c 	lsr	r9,r10,0xc
800090ca:	e2 19 00 10 	andl	r9,0x10,COH
800090ce:	f4 09 0a 4a 	lsr	r10,r10,r9
800090d2:	f4 08 16 05 	lsr	r8,r10,0x5
800090d6:	e2 18 00 08 	andl	r8,0x8,COH
800090da:	f0 09 00 09 	add	r9,r8,r9
800090de:	f4 08 0a 4a 	lsr	r10,r10,r8
800090e2:	f4 08 16 02 	lsr	r8,r10,0x2
800090e6:	e2 18 00 04 	andl	r8,0x4,COH
800090ea:	f2 08 00 0b 	add	r11,r9,r8
800090ee:	f4 08 0a 4a 	lsr	r10,r10,r8
800090f2:	f4 09 16 01 	lsr	r9,r10,0x1
800090f6:	e2 19 00 02 	andl	r9,0x2,COH
800090fa:	f6 09 00 08 	add	r8,r11,r9
800090fe:	f4 09 0a 4a 	lsr	r10,r10,r9
80009102:	f3 da c0 21 	bfextu	r9,r10,0x1,0x1
80009106:	12 08       	add	r8,r9
80009108:	f4 09 0a 49 	lsr	r9,r10,r9
8000910c:	12 08       	add	r8,r9
          b = smallbin_at(ms, i);
8000910e:	ee cb ff dc 	sub	r11,r7,-36
80009112:	f6 08 00 39 	add	r9,r11,r8<<0x3
          p = b->fd;
80009116:	72 2c       	ld.w	r12,r9[0x8]
          assert(chunksize(p) == small_index2size(i));
          unlink_first_small_chunk(ms, b, p, i);
80009118:	78 2a       	ld.w	r10,r12[0x8]
8000911a:	14 39       	cp.w	r9,r10
8000911c:	c0 91       	brne	8000912e <mspace_malloc+0x116>
8000911e:	30 19       	mov	r9,1
80009120:	f2 08 09 49 	lsl	r9,r9,r8
80009124:	5c d9       	com	r9
80009126:	f3 ee 00 0e 	and	lr,r9,lr
8000912a:	8f 0e       	st.w	r7[0x0],lr
8000912c:	c0 78       	rjmp	8000913a <mspace_malloc+0x122>
8000912e:	6e 4e       	ld.w	lr,r7[0x10]
80009130:	14 3e       	cp.w	lr,r10
80009132:	f3 fa 8a 02 	st.wls	r9[0x8],r10
80009136:	f5 f9 8a 03 	st.wls	r10[0xc],r9
          rsize = small_index2size(i) - nb;
8000913a:	a3 78       	lsl	r8,0x3
8000913c:	0c 18       	sub	r8,r6
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
            set_inuse_and_pinuse(ms, p, small_index2size(i));
          else {
            set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
8000913e:	0c 99       	mov	r9,r6
80009140:	e8 19 00 03 	orl	r9,0x3
80009144:	99 19       	st.w	r12[0x4],r9
            r = chunk_plus_offset(p, nb);
80009146:	f8 06 00 06 	add	r6,r12,r6
            set_size_and_pinuse_of_free_chunk(r, rsize);
8000914a:	10 99       	mov	r9,r8
8000914c:	a1 a9       	sbr	r9,0x0
8000914e:	8d 19       	st.w	r6[0x4],r9
80009150:	ec 08 09 08 	st.w	r6[r8],r8
            replace_dv(ms, r, rsize);
80009154:	6e 2a       	ld.w	r10,r7[0x8]
80009156:	58 0a       	cp.w	r10,0
80009158:	c1 90       	breq	8000918a <mspace_malloc+0x172>
8000915a:	6e 59       	ld.w	r9,r7[0x14]
8000915c:	a3 9a       	lsr	r10,0x3
8000915e:	f6 0a 00 3b 	add	r11,r11,r10<<0x3
80009162:	6e 0e       	ld.w	lr,r7[0x0]
80009164:	30 15       	mov	r5,1
80009166:	ea 0a 09 4a 	lsl	r10,r5,r10
8000916a:	f5 ee 00 05 	and	r5,r10,lr
8000916e:	c0 51       	brne	80009178 <mspace_malloc+0x160>
80009170:	1c 4a       	or	r10,lr
80009172:	8f 0a       	st.w	r7[0x0],r10
80009174:	16 9a       	mov	r10,r11
80009176:	c0 68       	rjmp	80009182 <mspace_malloc+0x16a>
80009178:	76 2a       	ld.w	r10,r11[0x8]
8000917a:	6e 4e       	ld.w	lr,r7[0x10]
8000917c:	1c 3a       	cp.w	r10,lr
8000917e:	f6 0a 17 30 	movlo	r10,r11
80009182:	97 29       	st.w	r11[0x8],r9
80009184:	95 39       	st.w	r10[0xc],r9
80009186:	93 2a       	st.w	r9[0x8],r10
80009188:	93 3b       	st.w	r9[0xc],r11
8000918a:	8f 28       	st.w	r7[0x8],r8
8000918c:	8f 56       	st.w	r7[0x14],r6
          }
          mem = chunk2mem(p);
8000918e:	2f 8c       	sub	r12,-8
          check_malloced_chunk(ms, mem, nb);
          goto postaction;
80009190:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
        }

        else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
80009194:	6e 18       	ld.w	r8,r7[0x4]
80009196:	58 08       	cp.w	r8,0
80009198:	c3 e0       	breq	80009214 <mspace_malloc+0x1fc>
8000919a:	0c 9b       	mov	r11,r6
8000919c:	0e 9c       	mov	r12,r7
8000919e:	f0 1f 00 2a 	mcall	80009244 <mspace_malloc+0x22c>
800091a2:	c4 e1       	brne	8000923e <mspace_malloc+0x226>
800091a4:	c1 28       	rjmp	800091c8 <mspace_malloc+0x1b0>
          check_malloced_chunk(ms, mem, nb);
          goto postaction;
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
800091a6:	fe 5b ff bf 	cp.w	r11,-65
800091aa:	e0 88 00 04 	brls	800091b2 <mspace_malloc+0x19a>
800091ae:	3f f6       	mov	r6,-1
800091b0:	c0 c8       	rjmp	800091c8 <mspace_malloc+0x1b0>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    else {
      nb = pad_request(bytes);
800091b2:	f6 c6 ff f5 	sub	r6,r11,-11
800091b6:	e0 16 ff f8 	andl	r6,0xfff8
      if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
800091ba:	78 18       	ld.w	r8,r12[0x4]
800091bc:	58 08       	cp.w	r8,0
800091be:	c0 50       	breq	800091c8 <mspace_malloc+0x1b0>
800091c0:	0c 9b       	mov	r11,r6
800091c2:	f0 1f 00 22 	mcall	80009248 <mspace_malloc+0x230>
800091c6:	c3 c1       	brne	8000923e <mspace_malloc+0x226>
        check_malloced_chunk(ms, mem, nb);
        goto postaction;
      }
    }

    if (nb <= ms->dvsize) {
800091c8:	6e 28       	ld.w	r8,r7[0x8]
800091ca:	10 36       	cp.w	r6,r8
800091cc:	e0 8b 00 24 	brhi	80009214 <mspace_malloc+0x1fc>
      size_t rsize = ms->dvsize - nb;
800091d0:	f0 06 01 09 	sub	r9,r8,r6
      mchunkptr p = ms->dv;
800091d4:	6e 5c       	ld.w	r12,r7[0x14]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
800091d6:	58 f9       	cp.w	r9,15
800091d8:	e0 88 00 0f 	brls	800091f6 <mspace_malloc+0x1de>
        mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
800091dc:	f8 06 00 08 	add	r8,r12,r6
800091e0:	8f 58       	st.w	r7[0x14],r8
        ms->dvsize = rsize;
800091e2:	8f 29       	st.w	r7[0x8],r9
        set_size_and_pinuse_of_free_chunk(r, rsize);
800091e4:	12 9a       	mov	r10,r9
800091e6:	a1 aa       	sbr	r10,0x0
800091e8:	91 1a       	st.w	r8[0x4],r10
800091ea:	f0 09 09 09 	st.w	r8[r9],r9
        set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
800091ee:	e8 16 00 03 	orl	r6,0x3
800091f2:	99 16       	st.w	r12[0x4],r6
800091f4:	c0 d8       	rjmp	8000920e <mspace_malloc+0x1f6>
      }
      else { /* exhaust dv */
        size_t dvs = ms->dvsize;
        ms->dvsize = 0;
800091f6:	30 09       	mov	r9,0
800091f8:	8f 29       	st.w	r7[0x8],r9
        ms->dv = 0;
800091fa:	8f 59       	st.w	r7[0x14],r9
        set_inuse_and_pinuse(ms, p, dvs);
800091fc:	10 99       	mov	r9,r8
800091fe:	e8 19 00 03 	orl	r9,0x3
80009202:	99 19       	st.w	r12[0x4],r9
80009204:	f8 08 00 08 	add	r8,r12,r8
80009208:	70 19       	ld.w	r9,r8[0x4]
8000920a:	a1 a9       	sbr	r9,0x0
8000920c:	91 19       	st.w	r8[0x4],r9
      }
      mem = chunk2mem(p);
8000920e:	2f 8c       	sub	r12,-8
      check_malloced_chunk(ms, mem, nb);
      goto postaction;
80009210:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }

    else if (nb < ms->topsize) { /* Split top */
80009214:	6e 38       	ld.w	r8,r7[0xc]
80009216:	10 36       	cp.w	r6,r8
80009218:	c0 f2       	brcc	80009236 <mspace_malloc+0x21e>
      size_t rsize = ms->topsize -= nb;
8000921a:	0c 18       	sub	r8,r6
8000921c:	8f 38       	st.w	r7[0xc],r8
      mchunkptr p = ms->top;
8000921e:	6e 6c       	ld.w	r12,r7[0x18]
      mchunkptr r = ms->top = chunk_plus_offset(p, nb);
80009220:	f8 06 00 09 	add	r9,r12,r6
80009224:	8f 69       	st.w	r7[0x18],r9
      r->head = rsize | PINUSE_BIT;
80009226:	a1 a8       	sbr	r8,0x0
80009228:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
8000922a:	e8 16 00 03 	orl	r6,0x3
8000922e:	99 16       	st.w	r12[0x4],r6
      mem = chunk2mem(p);
80009230:	2f 8c       	sub	r12,-8
      check_top_chunk(ms, ms->top);
      check_malloced_chunk(ms, mem, nb);
      goto postaction;
80009232:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }

    mem = sys_alloc(ms, nb);
80009236:	0c 9b       	mov	r11,r6
80009238:	0e 9c       	mov	r12,r7
8000923a:	f0 1f 00 05 	mcall	8000924c <mspace_malloc+0x234>
#endif
  return 0;
#if defined(__ICCAVR32__)
  #pragma diag_default=Pe111
#endif
}
8000923e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80009242:	00 00       	add	r0,r0
80009244:	80 00       	ld.sh	r0,r0[0x0]
80009246:	7b f4       	ld.w	r4,sp[0x7c]
80009248:	80 00       	ld.sh	r0,r0[0x0]
8000924a:	7d cc       	ld.w	r12,lr[0x70]
8000924c:	80 00       	ld.sh	r0,r0[0x0]
8000924e:	87 80       	st.w	r3[0x20],r0

80009250 <malloc>:
  */

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
80009250:	eb cd 40 c0 	pushm	r6-r7,lr
80009254:	e0 4c 00 f4 	cp.w	r12,244
80009258:	e0 8b 00 d0 	brhi	800093f8 <malloc+0x1a8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
8000925c:	58 ac       	cp.w	r12,10
8000925e:	e0 8b 00 04 	brhi	80009266 <malloc+0x16>
80009262:	31 07       	mov	r7,16
80009264:	c0 58       	rjmp	8000926e <malloc+0x1e>
80009266:	f8 c7 ff f5 	sub	r7,r12,-11
8000926a:	e0 17 ff f8 	andl	r7,0xfff8
      idx = small_index(nb);
8000926e:	ee 08 16 03 	lsr	r8,r7,0x3
      smallbits = gm->smallmap >> idx;
80009272:	fe f9 02 32 	ld.w	r9,pc[562]
80009276:	72 0e       	ld.w	lr,r9[0x0]
80009278:	10 9b       	mov	r11,r8
8000927a:	fc 08 0a 49 	lsr	r9,lr,r8

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
8000927e:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80009282:	c2 d0       	breq	800092dc <malloc+0x8c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
80009284:	ec 19 00 01 	eorl	r9,0x1
80009288:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000928c:	f2 08 00 08 	add	r8,r9,r8
        b = smallbin_at(gm, idx);
80009290:	fe fa 02 14 	ld.w	r10,pc[532]
80009294:	2d ca       	sub	r10,-36
80009296:	f4 08 00 3a 	add	r10,r10,r8<<0x3
        p = b->fd;
8000929a:	74 2c       	ld.w	r12,r10[0x8]
        assert(chunksize(p) == small_index2size(idx));
        unlink_first_small_chunk(gm, b, p, idx);
8000929c:	78 2b       	ld.w	r11,r12[0x8]
8000929e:	16 3a       	cp.w	r10,r11
800092a0:	c0 a1       	brne	800092b4 <malloc+0x64>
800092a2:	30 19       	mov	r9,1
800092a4:	f2 08 09 49 	lsl	r9,r9,r8
800092a8:	5c d9       	com	r9
800092aa:	f3 ee 00 0e 	and	lr,r9,lr
800092ae:	4f e9       	lddpc	r9,800094a4 <malloc+0x254>
800092b0:	93 0e       	st.w	r9[0x0],lr
800092b2:	c0 88       	rjmp	800092c2 <malloc+0x72>
800092b4:	4f c9       	lddpc	r9,800094a4 <malloc+0x254>
800092b6:	72 49       	ld.w	r9,r9[0x10]
800092b8:	16 39       	cp.w	r9,r11
800092ba:	f5 fb 8a 02 	st.wls	r10[0x8],r11
800092be:	f7 fa 8a 03 	st.wls	r11[0xc],r10
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
800092c2:	a3 78       	lsl	r8,0x3
800092c4:	10 99       	mov	r9,r8
800092c6:	e8 19 00 03 	orl	r9,0x3
800092ca:	99 19       	st.w	r12[0x4],r9
800092cc:	f8 08 00 08 	add	r8,r12,r8
800092d0:	70 19       	ld.w	r9,r8[0x4]
800092d2:	a1 a9       	sbr	r9,0x0
800092d4:	91 19       	st.w	r8[0x4],r9
        mem = chunk2mem(p);
800092d6:	2f 8c       	sub	r12,-8
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
800092d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      }

      else if (nb > gm->dvsize) {
800092dc:	4f 28       	lddpc	r8,800094a4 <malloc+0x254>
800092de:	70 28       	ld.w	r8,r8[0x8]
800092e0:	10 37       	cp.w	r7,r8
800092e2:	e0 88 00 a3 	brls	80009428 <malloc+0x1d8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
800092e6:	58 09       	cp.w	r9,0
800092e8:	c7 e0       	breq	800093e4 <malloc+0x194>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
800092ea:	30 28       	mov	r8,2
800092ec:	f0 0b 09 48 	lsl	r8,r8,r11
800092f0:	f0 0a 11 00 	rsub	r10,r8,0
800092f4:	f5 e8 10 08 	or	r8,r10,r8
800092f8:	f2 0b 09 49 	lsl	r9,r9,r11
800092fc:	f1 e9 00 09 	and	r9,r8,r9
          binmap_t leastbit = least_bit(leftbits);
          compute_bit2idx(leastbit, i);
80009300:	f2 0a 11 00 	rsub	r10,r9,0
80009304:	12 6a       	and	r10,r9
80009306:	20 1a       	sub	r10,1
80009308:	f4 09 16 0c 	lsr	r9,r10,0xc
8000930c:	e2 19 00 10 	andl	r9,0x10,COH
80009310:	f4 09 0a 4a 	lsr	r10,r10,r9
80009314:	f4 08 16 05 	lsr	r8,r10,0x5
80009318:	e2 18 00 08 	andl	r8,0x8,COH
8000931c:	f0 09 00 09 	add	r9,r8,r9
80009320:	f4 08 0a 4a 	lsr	r10,r10,r8
80009324:	f4 08 16 02 	lsr	r8,r10,0x2
80009328:	e2 18 00 04 	andl	r8,0x4,COH
8000932c:	f2 08 00 0b 	add	r11,r9,r8
80009330:	f4 08 0a 4a 	lsr	r10,r10,r8
80009334:	f4 09 16 01 	lsr	r9,r10,0x1
80009338:	e2 19 00 02 	andl	r9,0x2,COH
8000933c:	f6 09 00 08 	add	r8,r11,r9
80009340:	f4 09 0a 4a 	lsr	r10,r10,r9
80009344:	f3 da c0 21 	bfextu	r9,r10,0x1,0x1
80009348:	12 08       	add	r8,r9
8000934a:	f4 09 0a 49 	lsr	r9,r10,r9
8000934e:	12 08       	add	r8,r9
          b = smallbin_at(gm, i);
80009350:	4d 5b       	lddpc	r11,800094a4 <malloc+0x254>
80009352:	2d cb       	sub	r11,-36
80009354:	f6 08 00 39 	add	r9,r11,r8<<0x3
          p = b->fd;
80009358:	72 2c       	ld.w	r12,r9[0x8]
          assert(chunksize(p) == small_index2size(i));
          unlink_first_small_chunk(gm, b, p, i);
8000935a:	78 2a       	ld.w	r10,r12[0x8]
8000935c:	14 39       	cp.w	r9,r10
8000935e:	c0 a1       	brne	80009372 <malloc+0x122>
80009360:	30 19       	mov	r9,1
80009362:	f2 08 09 49 	lsl	r9,r9,r8
80009366:	5c d9       	com	r9
80009368:	f3 ee 00 0e 	and	lr,r9,lr
8000936c:	4c e9       	lddpc	r9,800094a4 <malloc+0x254>
8000936e:	93 0e       	st.w	r9[0x0],lr
80009370:	c0 88       	rjmp	80009380 <malloc+0x130>
80009372:	4c de       	lddpc	lr,800094a4 <malloc+0x254>
80009374:	7c 4e       	ld.w	lr,lr[0x10]
80009376:	14 3e       	cp.w	lr,r10
80009378:	f3 fa 8a 02 	st.wls	r9[0x8],r10
8000937c:	f5 f9 8a 03 	st.wls	r10[0xc],r9
          rsize = small_index2size(i) - nb;
80009380:	a3 78       	lsl	r8,0x3
80009382:	0e 18       	sub	r8,r7
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
            set_inuse_and_pinuse(gm, p, small_index2size(i));
          else {
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80009384:	0e 99       	mov	r9,r7
80009386:	e8 19 00 03 	orl	r9,0x3
8000938a:	99 19       	st.w	r12[0x4],r9
            r = chunk_plus_offset(p, nb);
8000938c:	f8 07 00 07 	add	r7,r12,r7
            set_size_and_pinuse_of_free_chunk(r, rsize);
80009390:	10 99       	mov	r9,r8
80009392:	a1 a9       	sbr	r9,0x0
80009394:	8f 19       	st.w	r7[0x4],r9
80009396:	ee 08 09 08 	st.w	r7[r8],r8
            replace_dv(gm, r, rsize);
8000939a:	4c 39       	lddpc	r9,800094a4 <malloc+0x254>
8000939c:	72 2a       	ld.w	r10,r9[0x8]
8000939e:	58 0a       	cp.w	r10,0
800093a0:	c1 c0       	breq	800093d8 <malloc+0x188>
800093a2:	12 9e       	mov	lr,r9
800093a4:	72 59       	ld.w	r9,r9[0x14]
800093a6:	a3 9a       	lsr	r10,0x3
800093a8:	f6 0a 00 3b 	add	r11,r11,r10<<0x3
800093ac:	7c 0e       	ld.w	lr,lr[0x0]
800093ae:	30 16       	mov	r6,1
800093b0:	ec 0a 09 4a 	lsl	r10,r6,r10
800093b4:	f5 ee 00 06 	and	r6,r10,lr
800093b8:	c0 61       	brne	800093c4 <malloc+0x174>
800093ba:	1c 4a       	or	r10,lr
800093bc:	4b a6       	lddpc	r6,800094a4 <malloc+0x254>
800093be:	8d 0a       	st.w	r6[0x0],r10
800093c0:	16 9a       	mov	r10,r11
800093c2:	c0 78       	rjmp	800093d0 <malloc+0x180>
800093c4:	76 2a       	ld.w	r10,r11[0x8]
800093c6:	4b 8e       	lddpc	lr,800094a4 <malloc+0x254>
800093c8:	7c 4e       	ld.w	lr,lr[0x10]
800093ca:	1c 3a       	cp.w	r10,lr
800093cc:	f6 0a 17 30 	movlo	r10,r11
800093d0:	97 29       	st.w	r11[0x8],r9
800093d2:	95 39       	st.w	r10[0xc],r9
800093d4:	93 2a       	st.w	r9[0x8],r10
800093d6:	93 3b       	st.w	r9[0xc],r11
800093d8:	4b 39       	lddpc	r9,800094a4 <malloc+0x254>
800093da:	93 28       	st.w	r9[0x8],r8
800093dc:	93 57       	st.w	r9[0x14],r7
          }
          mem = chunk2mem(p);
800093de:	2f 8c       	sub	r12,-8
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
800093e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
        }

        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
800093e4:	4b 08       	lddpc	r8,800094a4 <malloc+0x254>
800093e6:	70 18       	ld.w	r8,r8[0x4]
800093e8:	58 08       	cp.w	r8,0
800093ea:	c4 30       	breq	80009470 <malloc+0x220>
800093ec:	0e 9b       	mov	r11,r7
800093ee:	4a ec       	lddpc	r12,800094a4 <malloc+0x254>
800093f0:	f0 1f 00 2e 	mcall	800094a8 <malloc+0x258>
800093f4:	c5 51       	brne	8000949e <malloc+0x24e>
800093f6:	c1 48       	rjmp	8000941e <malloc+0x1ce>
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
800093f8:	fe 5c ff bf 	cp.w	r12,-65
800093fc:	e0 88 00 04 	brls	80009404 <malloc+0x1b4>
80009400:	3f f7       	mov	r7,-1
80009402:	c0 e8       	rjmp	8000941e <malloc+0x1ce>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    else {
      nb = pad_request(bytes);
80009404:	f8 c7 ff f5 	sub	r7,r12,-11
80009408:	e0 17 ff f8 	andl	r7,0xfff8
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
8000940c:	4a 68       	lddpc	r8,800094a4 <malloc+0x254>
8000940e:	70 18       	ld.w	r8,r8[0x4]
80009410:	58 08       	cp.w	r8,0
80009412:	c0 60       	breq	8000941e <malloc+0x1ce>
80009414:	0e 9b       	mov	r11,r7
80009416:	4a 4c       	lddpc	r12,800094a4 <malloc+0x254>
80009418:	f0 1f 00 25 	mcall	800094ac <malloc+0x25c>
8000941c:	c4 11       	brne	8000949e <malloc+0x24e>
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
      }
    }

    if (nb <= gm->dvsize) {
8000941e:	4a 28       	lddpc	r8,800094a4 <malloc+0x254>
80009420:	70 28       	ld.w	r8,r8[0x8]
80009422:	10 37       	cp.w	r7,r8
80009424:	e0 8b 00 26 	brhi	80009470 <malloc+0x220>
      size_t rsize = gm->dvsize - nb;
80009428:	f0 07 01 09 	sub	r9,r8,r7
      mchunkptr p = gm->dv;
8000942c:	49 ea       	lddpc	r10,800094a4 <malloc+0x254>
8000942e:	74 5c       	ld.w	r12,r10[0x14]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
80009430:	58 f9       	cp.w	r9,15
80009432:	e0 88 00 0f 	brls	80009450 <malloc+0x200>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
80009436:	f8 07 00 08 	add	r8,r12,r7
8000943a:	95 58       	st.w	r10[0x14],r8
        gm->dvsize = rsize;
8000943c:	95 29       	st.w	r10[0x8],r9
        set_size_and_pinuse_of_free_chunk(r, rsize);
8000943e:	12 9a       	mov	r10,r9
80009440:	a1 aa       	sbr	r10,0x0
80009442:	91 1a       	st.w	r8[0x4],r10
80009444:	f0 09 09 09 	st.w	r8[r9],r9
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80009448:	e8 17 00 03 	orl	r7,0x3
8000944c:	99 17       	st.w	r12[0x4],r7
8000944e:	c0 e8       	rjmp	8000946a <malloc+0x21a>
      }
      else { /* exhaust dv */
        size_t dvs = gm->dvsize;
        gm->dvsize = 0;
80009450:	49 59       	lddpc	r9,800094a4 <malloc+0x254>
80009452:	30 0a       	mov	r10,0
80009454:	93 2a       	st.w	r9[0x8],r10
        gm->dv = 0;
80009456:	93 5a       	st.w	r9[0x14],r10
        set_inuse_and_pinuse(gm, p, dvs);
80009458:	10 99       	mov	r9,r8
8000945a:	e8 19 00 03 	orl	r9,0x3
8000945e:	99 19       	st.w	r12[0x4],r9
80009460:	f8 08 00 08 	add	r8,r12,r8
80009464:	70 19       	ld.w	r9,r8[0x4]
80009466:	a1 a9       	sbr	r9,0x0
80009468:	91 19       	st.w	r8[0x4],r9
      }
      mem = chunk2mem(p);
8000946a:	2f 8c       	sub	r12,-8
      check_malloced_chunk(gm, mem, nb);
      goto postaction;
8000946c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    }

    else if (nb < gm->topsize) { /* Split top */
80009470:	48 d8       	lddpc	r8,800094a4 <malloc+0x254>
80009472:	70 38       	ld.w	r8,r8[0xc]
80009474:	10 37       	cp.w	r7,r8
80009476:	c1 02       	brcc	80009496 <malloc+0x246>
      size_t rsize = gm->topsize -= nb;
80009478:	0e 18       	sub	r8,r7
8000947a:	48 b9       	lddpc	r9,800094a4 <malloc+0x254>
8000947c:	93 38       	st.w	r9[0xc],r8
      mchunkptr p = gm->top;
8000947e:	72 6c       	ld.w	r12,r9[0x18]
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
80009480:	f8 07 00 0a 	add	r10,r12,r7
80009484:	93 6a       	st.w	r9[0x18],r10
      r->head = rsize | PINUSE_BIT;
80009486:	a1 a8       	sbr	r8,0x0
80009488:	95 18       	st.w	r10[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
8000948a:	e8 17 00 03 	orl	r7,0x3
8000948e:	99 17       	st.w	r12[0x4],r7
      mem = chunk2mem(p);
80009490:	2f 8c       	sub	r12,-8
      check_top_chunk(gm, gm->top);
      check_malloced_chunk(gm, mem, nb);
      goto postaction;
80009492:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    }

    mem = sys_alloc(gm, nb);
80009496:	0e 9b       	mov	r11,r7
80009498:	48 3c       	lddpc	r12,800094a4 <malloc+0x254>
8000949a:	f0 1f 00 06 	mcall	800094b0 <malloc+0x260>
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
8000949e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800094a2:	00 00       	add	r0,r0
800094a4:	00 00       	add	r0,r0
800094a6:	13 24       	ld.uh	r4,r9++
800094a8:	80 00       	ld.sh	r0,r0[0x0]
800094aa:	7b f4       	ld.w	r4,sp[0x7c]
800094ac:	80 00       	ld.sh	r0,r0[0x0]
800094ae:	7d cc       	ld.w	r12,lr[0x70]
800094b0:	80 00       	ld.sh	r0,r0[0x0]
800094b2:	87 80       	st.w	r3[0x20],r0

800094b4 <dlmalloc_sbrk>:
static void *cur_heap_pos = 0;

void * dlmalloc_sbrk(int increment)
{
	//Initialize cur_heap_pos
	if ( cur_heap_pos == 0 )
800094b4:	48 a8       	lddpc	r8,800094dc <dlmalloc_sbrk+0x28>
800094b6:	70 08       	ld.w	r8,r8[0x0]
800094b8:	58 08       	cp.w	r8,0
800094ba:	c0 41       	brne	800094c2 <dlmalloc_sbrk+0xe>
	 	cur_heap_pos = (void *) (HEAP_START);
800094bc:	48 99       	lddpc	r9,800094e0 <dlmalloc_sbrk+0x2c>
800094be:	48 88       	lddpc	r8,800094dc <dlmalloc_sbrk+0x28>
800094c0:	91 09       	st.w	r8[0x0],r9

	if ( ((void *)((char *)cur_heap_pos + increment)) <= (void *) HEAP_END ){
800094c2:	48 78       	lddpc	r8,800094dc <dlmalloc_sbrk+0x28>
800094c4:	70 08       	ld.w	r8,r8[0x0]
800094c6:	f0 0c 00 0c 	add	r12,r8,r12
800094ca:	48 79       	lddpc	r9,800094e4 <dlmalloc_sbrk+0x30>
800094cc:	12 3c       	cp.w	r12,r9
800094ce:	e0 88 00 04 	brls	800094d6 <dlmalloc_sbrk+0x22>
800094d2:	3f f8       	mov	r8,-1
800094d4:	c0 38       	rjmp	800094da <dlmalloc_sbrk+0x26>
		void *heap_pos = cur_heap_pos;
		cur_heap_pos = (void *)((char *)cur_heap_pos +increment);
800094d6:	48 29       	lddpc	r9,800094dc <dlmalloc_sbrk+0x28>
800094d8:	93 0c       	st.w	r9[0x0],r12
		fflush(stderr);
#endif
		//errno = ENOMEM;
		return (void *)-1;
	}
}
800094da:	5e f8       	retal	r8
800094dc:	00 00       	add	r0,r0
800094de:	15 04       	ld.w	r4,r10++
800094e0:	00 00       	add	r0,r0
800094e2:	1a f8       	st.b	--sp,r8
800094e4:	00 00       	add	r0,r0
800094e6:	f0 00       	*unknown*

800094e8 <mmap>:
 */
void *mmap(void *start, int length,
	int prot, int flags, int fd, int offset)
{
#ifndef ONLY_MSPACES
	if(length == 0)
800094e8:	58 0b       	cp.w	r11,0
800094ea:	c0 41       	brne	800094f2 <mmap+0xa>
	{
		cur_heap_pos = (void *) HEAP_START;
800094ec:	48 89       	lddpc	r9,8000950c <mmap+0x24>
800094ee:	48 98       	lddpc	r8,80009510 <mmap+0x28>
800094f0:	91 09       	st.w	r8[0x0],r9
	}

	if ( (cur_heap_pos + length) <= (void *) HEAP_END )
800094f2:	48 88       	lddpc	r8,80009510 <mmap+0x28>
800094f4:	70 0c       	ld.w	r12,r8[0x0]
800094f6:	f8 0b 00 0b 	add	r11,r12,r11
800094fa:	48 78       	lddpc	r8,80009514 <mmap+0x2c>
800094fc:	10 3b       	cp.w	r11,r8
800094fe:	e0 88 00 03 	brls	80009504 <mmap+0x1c>
80009502:	5e fe       	retal	-1
	{
		void *heap_pos = cur_heap_pos;
		cur_heap_pos += length;
80009504:	48 38       	lddpc	r8,80009510 <mmap+0x28>
80009506:	91 0b       	st.w	r8[0x0],r11
	}
	return (void *) -1;
#else
	return MORECORE(length);
#endif
}
80009508:	5e fc       	retal	r12
8000950a:	00 00       	add	r0,r0
8000950c:	00 00       	add	r0,r0
8000950e:	1a f8       	st.b	--sp,r8
80009510:	00 00       	add	r0,r0
80009512:	15 04       	ld.w	r4,r10++
80009514:	00 00       	add	r0,r0
80009516:	f0 00       	*unknown*

80009518 <munmap>:

int munmap(void *start, int length)
{
#ifndef ONLY_MSPACES
	if( (cur_heap_pos - length) < HEAP_START)
80009518:	48 58       	lddpc	r8,8000952c <munmap+0x14>
8000951a:	70 08       	ld.w	r8,r8[0x0]
8000951c:	16 18       	sub	r8,r11
8000951e:	48 59       	lddpc	r9,80009530 <munmap+0x18>
80009520:	12 38       	cp.w	r8,r9
80009522:	c0 22       	brcc	80009526 <munmap+0xe>
80009524:	5e fe       	retal	-1
	{
		return -1;
	}
	else
	{
		cur_heap_pos -= length;
80009526:	48 29       	lddpc	r9,8000952c <munmap+0x14>
80009528:	93 08       	st.w	r9[0x0],r8
8000952a:	5e fd       	retal	0
8000952c:	00 00       	add	r0,r0
8000952e:	15 04       	ld.w	r4,r10++
80009530:	00 00       	add	r0,r0
80009532:	1a f8       	st.b	--sp,r8

80009534 <log_2>:
#include "CustomDevices/CustomDevices.h"

/*#define FFT_SIZE 64*/
//Returns log base 2 of i - checks if it is an integer power of 2
int log_2(int i)
{
80009534:	18 98       	mov	r8,r12
	int ret = 0; 
	if((i & (i - 1)) != 0)
80009536:	f8 c9 00 01 	sub	r9,r12,1
8000953a:	18 69       	and	r9,r12
8000953c:	c0 20       	breq	80009540 <log_2+0xc>
8000953e:	5e fe       	retal	-1
	{
		return -1;
	}
	while((i & 1) == 0) //while the bit isn't in the lowest bit (already established this is a integer power of 2)
80009540:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
80009544:	c0 20       	breq	80009548 <log_2+0x14>
80009546:	5e fd       	retal	0
80009548:	30 0c       	mov	r12,0
	{
		i >>= 1;
8000954a:	a1 58       	asr	r8,0x1
		ret++;
8000954c:	2f fc       	sub	r12,-1
	int ret = 0; 
	if((i & (i - 1)) != 0)
	{
		return -1;
	}
	while((i & 1) == 0) //while the bit isn't in the lowest bit (already established this is a integer power of 2)
8000954e:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80009552:	cf c0       	breq	8000954a <log_2+0x16>
		i >>= 1;
		ret++;
	}
	
	return ret;
}
80009554:	5e fc       	retal	r12
80009556:	d7 03       	nop

80009558 <IFFT2D>:
// Returns:   void
// Qualifier: 
// Parameter: dsp16_complex_t * Signal
//************************************
void IFFT2D (dsp16_complex_t *Signal) //Need to test this! 
{
80009558:	eb cd 40 fe 	pushm	r1-r7,lr
8000955c:	e4 2d 08 00 	sub	sp,264192
80009560:	18 97       	mov	r7,r12
80009562:	30 05       	mov	r5,0
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];

	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
80009564:	0a 94       	mov	r4,r5
			Input_C_1D[j].real = Signal[Ptr].real; //copy the data across
			Input_C_1D[j].imag = Signal[Ptr].imag;
		}

		//Do the FFT
		dsp16_trans_complexifft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
80009566:	e0 63 01 00 	mov	r3,256
8000956a:	e4 6c 04 00 	mov	r12,263168
8000956e:	fa 0c 00 02 	add	r2,sp,r12
80009572:	e4 6b 00 00 	mov	r11,262144
80009576:	fa 0b 00 01 	add	r1,sp,r11
		//Copy data into 2D result TRANSPOSED

		for(j = 0; j < FFT_SIZE; j++)
		{
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
8000957a:	fa 76 f8 00 	mov	r6,-264192
8000957e:	c3 a8       	rjmp	800095f2 <IFFT2D+0x9a>
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
	{
		for(j = 0; j < FFT_SIZE; j++)
		{
			Input_C_1D[j].real = Signal[Ptr].real; //copy the data across
80009580:	e4 6a 08 00 	mov	r10,264192
80009584:	1a 0a       	add	r10,sp
80009586:	f4 08 00 29 	add	r9,r10,r8<<0x2
8000958a:	0f 8b       	ld.ub	r11,r7[0x0]
8000958c:	0f 9a       	ld.ub	r10,r7[0x1]
8000958e:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
80009592:	f3 5a fc 00 	st.h	r9[-1024],r10
			Input_C_1D[j].imag = Signal[Ptr].imag;
80009596:	0f ab       	ld.ub	r11,r7[0x2]
80009598:	0f ba       	ld.ub	r10,r7[0x3]
8000959a:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
8000959e:	f3 5a fc 02 	st.h	r9[-1022],r10

	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
	{
		for(j = 0; j < FFT_SIZE; j++)
800095a2:	2f f8       	sub	r8,-1
800095a4:	e0 48 01 00 	cp.w	r8,256
800095a8:	ce c1       	brne	80009580 <IFFT2D+0x28>
			Input_C_1D[j].real = Signal[Ptr].real; //copy the data across
			Input_C_1D[j].imag = Signal[Ptr].imag;
		}

		//Do the FFT
		dsp16_trans_complexifft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
800095aa:	06 9c       	mov	r12,r3
800095ac:	f0 1f 00 3b 	mcall	80009698 <IFFT2D+0x140>
800095b0:	18 9a       	mov	r10,r12
800095b2:	04 9b       	mov	r11,r2
800095b4:	02 9c       	mov	r12,r1
800095b6:	f0 1f 00 3a 	mcall	8000969c <IFFT2D+0x144>
800095ba:	0a 99       	mov	r9,r5
800095bc:	08 98       	mov	r8,r4
		//Copy data into 2D result TRANSPOSED

		for(j = 0; j < FFT_SIZE; j++)
		{
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
800095be:	e4 6c 08 00 	mov	r12,264192
800095c2:	1a 0c       	add	r12,sp
800095c4:	f8 09 00 2a 	add	r10,r12,r9<<0x2
800095c8:	0c 0a       	add	r10,r6
800095ca:	f8 08 00 2b 	add	r11,r12,r8<<0x2
800095ce:	f7 0c f8 02 	ld.sh	r12,r11[-2046]
800095d2:	a9 6c       	lsl	r12,0x8
800095d4:	b4 1c       	st.h	r10[0x2],r12
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
800095d6:	f7 0b f8 00 	ld.sh	r11,r11[-2048]
800095da:	a9 6b       	lsl	r11,0x8
800095dc:	b4 0b       	st.h	r10[0x0],r11

		//Do the FFT
		dsp16_trans_complexifft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
		//Copy data into 2D result TRANSPOSED

		for(j = 0; j < FFT_SIZE; j++)
800095de:	2f f8       	sub	r8,-1
800095e0:	f2 c9 ff 00 	sub	r9,r9,-256
800095e4:	e0 48 01 00 	cp.w	r8,256
800095e8:	ce b1       	brne	800095be <IFFT2D+0x66>
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];

	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
800095ea:	2f f5       	sub	r5,-1
800095ec:	e0 45 01 00 	cp.w	r5,256
800095f0:	c0 30       	breq	800095f6 <IFFT2D+0x9e>
800095f2:	08 98       	mov	r8,r4
800095f4:	cc 6b       	rjmp	80009580 <IFFT2D+0x28>
800095f6:	0e 95       	mov	r5,r7
800095f8:	30 07       	mov	r7,0

	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	
	
	for(i = 0; i < FFT_SIZE; i++)//for each row
800095fa:	0e 94       	mov	r4,r7
	{

		for(j = 0; j < FFT_SIZE; j++)//copy the data across
		{
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
800095fc:	fa 76 f8 00 	mov	r6,-264192
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;

		}

		//Do Fourier
		dsp16_trans_complexifft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
80009600:	e0 63 01 00 	mov	r3,256
80009604:	e4 6b 04 00 	mov	r11,263168
80009608:	fa 0b 00 02 	add	r2,sp,r11
8000960c:	e4 6a 00 00 	mov	r10,262144
80009610:	fa 0a 00 01 	add	r1,sp,r10
80009614:	c3 c8       	rjmp	8000968c <IFFT2D+0x134>
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];

	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
80009616:	ee 08 00 0a 	add	r10,r7,r8
	for(i = 0; i < FFT_SIZE; i++)//for each row
	{

		for(j = 0; j < FFT_SIZE; j++)//copy the data across
		{
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
8000961a:	e4 6c 08 00 	mov	r12,264192
8000961e:	1a 0c       	add	r12,sp
80009620:	f8 08 00 29 	add	r9,r12,r8<<0x2
80009624:	f8 0a 00 2a 	add	r10,r12,r10<<0x2
80009628:	0c 0a       	add	r10,r6
8000962a:	74 0b       	ld.w	r11,r10[0x0]
8000962c:	f3 5b fc 02 	st.h	r9[-1022],r11
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;
80009630:	94 0a       	ld.sh	r10,r10[0x0]
80009632:	f3 5a fc 00 	st.h	r9[-1024],r10
	
	
	for(i = 0; i < FFT_SIZE; i++)//for each row
	{

		for(j = 0; j < FFT_SIZE; j++)//copy the data across
80009636:	2f f8       	sub	r8,-1
80009638:	e0 48 01 00 	cp.w	r8,256
8000963c:	ce d1       	brne	80009616 <IFFT2D+0xbe>
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;

		}

		//Do Fourier
		dsp16_trans_complexifft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
8000963e:	06 9c       	mov	r12,r3
80009640:	f0 1f 00 16 	mcall	80009698 <IFFT2D+0x140>
80009644:	18 9a       	mov	r10,r12
80009646:	04 9b       	mov	r11,r2
80009648:	02 9c       	mov	r12,r1
8000964a:	f0 1f 00 15 	mcall	8000969c <IFFT2D+0x144>
8000964e:	0a 98       	mov	r8,r5
80009650:	08 99       	mov	r9,r4
		//Put back into Signal TRANSPOSED
		//dsp16_vect_complex_abs(Input_R_1D, Result_C_1D, FFT_SIZE);
		
		for(j = 0; j < FFT_SIZE; j++)
		{
			Signal[i + j * FFT_SIZE].imag = 	Result_C_1D[j].imag;
80009652:	e4 6b 08 00 	mov	r11,264192
80009656:	1a 0b       	add	r11,sp
80009658:	f6 09 00 2a 	add	r10,r11,r9<<0x2
8000965c:	f5 1b f8 02 	ld.uh	r11,r10[-2046]
80009660:	f6 0c 16 08 	lsr	r12,r11,0x8
80009664:	b0 ac       	st.b	r8[0x2],r12
80009666:	b0 bb       	st.b	r8[0x3],r11
			Signal[i + j * FFT_SIZE].real = 	Result_C_1D[j].real;
80009668:	f5 1a f8 00 	ld.uh	r10,r10[-2048]
8000966c:	f4 0b 16 08 	lsr	r11,r10,0x8
80009670:	b0 8b       	st.b	r8[0x0],r11
80009672:	b0 9a       	st.b	r8[0x1],r10
		

		//Put back into Signal TRANSPOSED
		//dsp16_vect_complex_abs(Input_R_1D, Result_C_1D, FFT_SIZE);
		
		for(j = 0; j < FFT_SIZE; j++)
80009674:	2f f9       	sub	r9,-1
80009676:	f0 c8 fc 00 	sub	r8,r8,-1024
8000967a:	e0 49 01 00 	cp.w	r9,256
8000967e:	ce a1       	brne	80009652 <IFFT2D+0xfa>
80009680:	2f c5       	sub	r5,-4
80009682:	ee c7 ff 00 	sub	r7,r7,-256

	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	
	
	for(i = 0; i < FFT_SIZE; i++)//for each row
80009686:	e0 57 00 00 	cp.w	r7,65536
8000968a:	c0 30       	breq	80009690 <IFFT2D+0x138>
8000968c:	08 98       	mov	r8,r4
8000968e:	cc 4b       	rjmp	80009616 <IFFT2D+0xbe>
			//Signal[i + (j*FFT_SIZE)] = Input_R_1D[j] * FFT_SIZE;
		}
	}
	
	//return Signal;
}
80009690:	fa 3d f8 00 	sub	sp,-264192
80009694:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80009698:	80 00       	ld.sh	r0,r0[0x0]
8000969a:	95 34       	st.w	r10[0xc],r4
8000969c:	80 00       	ld.sh	r0,r0[0x0]
8000969e:	c3 60       	breq	8000970a <PrepareImage+0x6a>

800096a0 <PrepareImage>:




void PrepareImage(Image_t *Image)
{
800096a0:	eb cd 40 f8 	pushm	r3-r7,lr
800096a4:	18 97       	mov	r7,r12
	int row, col;
	uint16_t *PreparedImage;
	//Allocate some memory in the RAM
	PreparedImage = mspace_malloc(sdram_msp, 256*256 );
800096a6:	e0 7b 00 00 	mov	r11,65536
800096aa:	49 a8       	lddpc	r8,80009710 <PrepareImage+0x70>
800096ac:	70 0c       	ld.w	r12,r8[0x0]
800096ae:	f0 1f 00 1a 	mcall	80009714 <PrepareImage+0x74>
800096b2:	18 96       	mov	r6,r12
800096b4:	18 94       	mov	r4,r12
800096b6:	30 0c       	mov	r12,0
	
	//print_dbg("\n\rPrepared Image Pointer = ");
	//print_dbg_ulong(PreparedImage);
	for(row = 0; row < 256; row ++)
800096b8:	18 93       	mov	r3,r12
		for(col = 0; col < 256; col++)
		{
			if(row < 240)
				PreparedImage[row*256 + col] = Image->ImagePtr[row * 256 + col];
			else
				PreparedImage[row *256 + col] = 0;//Image->ImagePtr[(row - 240) * 256 + col + 32];
800096ba:	30 05       	mov	r5,0
800096bc:	c1 88       	rjmp	800096ec <PrepareImage+0x4c>
	//print_dbg_ulong(PreparedImage);
	for(row = 0; row < 256; row ++)
	{
		for(col = 0; col < 256; col++)
		{
			if(row < 240)
800096be:	e0 4c 00 ef 	cp.w	r12,239
800096c2:	e0 89 00 07 	brgt	800096d0 <PrepareImage+0x30>
				PreparedImage[row*256 + col] = Image->ImagePtr[row * 256 + col];
800096c6:	6e 0e       	ld.w	lr,r7[0x0]
800096c8:	fc 0b 04 0e 	ld.sh	lr,lr[r11]
800096cc:	b2 0e       	st.h	r9[0x0],lr
800096ce:	c0 28       	rjmp	800096d2 <PrepareImage+0x32>
			else
				PreparedImage[row *256 + col] = 0;//Image->ImagePtr[(row - 240) * 256 + col + 32];
800096d0:	b4 05       	st.h	r10[0x0],r5
	
	//print_dbg("\n\rPrepared Image Pointer = ");
	//print_dbg_ulong(PreparedImage);
	for(row = 0; row < 256; row ++)
	{
		for(col = 0; col < 256; col++)
800096d2:	2f f8       	sub	r8,-1
800096d4:	2f eb       	sub	r11,-2
800096d6:	2f e9       	sub	r9,-2
800096d8:	2f ea       	sub	r10,-2
800096da:	e0 48 01 00 	cp.w	r8,256
800096de:	cf 01       	brne	800096be <PrepareImage+0x1e>
	//Allocate some memory in the RAM
	PreparedImage = mspace_malloc(sdram_msp, 256*256 );
	
	//print_dbg("\n\rPrepared Image Pointer = ");
	//print_dbg_ulong(PreparedImage);
	for(row = 0; row < 256; row ++)
800096e0:	2f fc       	sub	r12,-1
800096e2:	e8 c4 fe 00 	sub	r4,r4,-512
800096e6:	e0 4c 01 00 	cp.w	r12,256
800096ea:	c0 70       	breq	800096f8 <PrepareImage+0x58>
800096ec:	f8 0b 15 09 	lsl	r11,r12,0x9
800096f0:	08 9a       	mov	r10,r4
800096f2:	08 99       	mov	r9,r4
800096f4:	06 98       	mov	r8,r3
800096f6:	ce 4b       	rjmp	800096be <PrepareImage+0x1e>
			else
				PreparedImage[row *256 + col] = 0;//Image->ImagePtr[(row - 240) * 256 + col + 32];
		}
	}	
	
 	mspace_free(sdram_msp, Image->ImagePtr); //free up the old image
800096f8:	6e 0b       	ld.w	r11,r7[0x0]
800096fa:	48 68       	lddpc	r8,80009710 <PrepareImage+0x70>
800096fc:	70 0c       	ld.w	r12,r8[0x0]
800096fe:	f0 1f 00 07 	mcall	80009718 <PrepareImage+0x78>
 	Image->ImagePtr = PreparedImage; //move the pointer to the prepared image
80009702:	8f 06       	st.w	r7[0x0],r6
 	Image->Height = 256;
80009704:	e0 68 01 00 	mov	r8,256
80009708:	8f 18       	st.w	r7[0x4],r8
 	Image->Width = 256;
8000970a:	8f 28       	st.w	r7[0x8],r8
	//SaveBitmap(PreparedImage, 256, 256, "PreparedImage.bmp");
	//mspace_free(sdram_msp, PreparedImage);
	//return PreparedImage;
}
8000970c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80009710:	00 00       	add	r0,r0
80009712:	1a a4       	st.w	sp++,r4
80009714:	80 00       	ld.sh	r0,r0[0x0]
80009716:	90 18       	ld.sh	r8,r8[0x2]
80009718:	80 00       	ld.sh	r0,r0[0x0]
8000971a:	77 68       	ld.w	r8,r11[0x58]

8000971c <FFT1D>:

	return Signal;
}
//One Dimensional Fast Fourier Transform returning complex values
void FFT1D( int *Signal, dsp16_complex_t *ComplexBuffer)
{
8000971c:	eb cd 40 80 	pushm	r7,lr
80009720:	fa cd 06 00 	sub	sp,sp,1536
80009724:	16 97       	mov	r7,r11
80009726:	1a 98       	mov	r8,sp
	}

	return Signal;
}
//One Dimensional Fast Fourier Transform returning complex values
void FFT1D( int *Signal, dsp16_complex_t *ComplexBuffer)
80009728:	fa ca fe 00 	sub	r10,sp,-512
	int log2Size, i =0;
	A_ALIGNED dsp16_complex_t vect1[FFT_SIZE];
	A_ALIGNED dsp16_t vect2[FFT_SIZE];
	for(i = 0; i < FFT_SIZE; i++)
	{
		vect2[i] = (dsp16_t)Signal[i];
8000972c:	19 09       	ld.w	r9,r12++
8000972e:	10 b9       	st.h	r8++,r9
void FFT1D( int *Signal, dsp16_complex_t *ComplexBuffer)
{
	int log2Size, i =0;
	A_ALIGNED dsp16_complex_t vect1[FFT_SIZE];
	A_ALIGNED dsp16_t vect2[FFT_SIZE];
	for(i = 0; i < FFT_SIZE; i++)
80009730:	14 38       	cp.w	r8,r10
80009732:	cf d1       	brne	8000972c <FFT1D+0x10>
	{
		vect2[i] = (dsp16_t)Signal[i];
	}
	dsp16_trans_realcomplexfft(vect1, vect2, log_2(FFT_SIZE));
80009734:	e0 6c 01 00 	mov	r12,256
80009738:	f0 1f 00 13 	mcall	80009784 <FFT1D+0x68>
8000973c:	18 9a       	mov	r10,r12
8000973e:	1a 9b       	mov	r11,sp
80009740:	fa cc fe 00 	sub	r12,sp,-512
80009744:	f0 1f 00 11 	mcall	80009788 <FFT1D+0x6c>
80009748:	30 08       	mov	r8,0
	for(i = 0; i < FFT_SIZE; i++)
	{
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
8000974a:	fa ca fa 00 	sub	r10,sp,-1536
8000974e:	f4 08 00 29 	add	r9,r10,r8<<0x2
80009752:	f3 0a fc 02 	ld.sh	r10,r9[-1022]
80009756:	a9 6a       	lsl	r10,0x8
80009758:	5c 7a       	castu.h	r10
8000975a:	a9 8a       	lsr	r10,0x8
8000975c:	ae aa       	st.b	r7[0x2],r10
8000975e:	30 0a       	mov	r10,0
80009760:	ae ba       	st.b	r7[0x3],r10
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
80009762:	f3 09 fc 00 	ld.sh	r9,r9[-1024]
80009766:	a9 69       	lsl	r9,0x8
80009768:	5c 79       	castu.h	r9
8000976a:	a9 89       	lsr	r9,0x8
8000976c:	ae 89       	st.b	r7[0x0],r9
8000976e:	ae 9a       	st.b	r7[0x1],r10
	for(i = 0; i < FFT_SIZE; i++)
	{
		vect2[i] = (dsp16_t)Signal[i];
	}
	dsp16_trans_realcomplexfft(vect1, vect2, log_2(FFT_SIZE));
	for(i = 0; i < FFT_SIZE; i++)
80009770:	2f f8       	sub	r8,-1
80009772:	2f c7       	sub	r7,-4
80009774:	e0 48 01 00 	cp.w	r8,256
80009778:	ce 91       	brne	8000974a <FFT1D+0x2e>
	{
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
	}
}
8000977a:	fe 3d fa 00 	sub	sp,-1536
8000977e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009782:	00 00       	add	r0,r0
80009784:	80 00       	ld.sh	r0,r0[0x0]
80009786:	95 34       	st.w	r10[0xc],r4
80009788:	80 00       	ld.sh	r0,r0[0x0]
8000978a:	c3 7c       	rcall	800097f8 <FFT2DCOMPLEX+0x6c>

8000978c <FFT2DCOMPLEX>:
// Parameter: int * Signal
// Parameter: A_ALIGNED dsp16_complex_t * ComplexBuffer
// Parameter: int size
//************************************
void FFT2DCOMPLEX( int *Signal, dsp16_complex_t *ComplexBuffer, int size )
{
8000978c:	d4 31       	pushm	r0-r7,lr
8000978e:	e4 2d 0a 04 	sub	sp,264708
80009792:	50 0b       	stdsp	sp[0x0],r11
80009794:	18 94       	mov	r4,r12
80009796:	30 05       	mov	r5,0
	A_ALIGNED dsp16_complex_t Input_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++){ //for each row
80009798:	fa c3 ff fc 	sub	r3,sp,-4
// Qualifier:
// Parameter: int * Signal
// Parameter: A_ALIGNED dsp16_complex_t * ComplexBuffer
// Parameter: int size
//************************************
void FFT2DCOMPLEX( int *Signal, dsp16_complex_t *ComplexBuffer, int size )
8000979c:	fa c6 fd fc 	sub	r6,sp,-516
	for(i = 0; i < FFT_SIZE; i ++){ //for each row
		for(j = 0; j < FFT_SIZE; j++){
			Input_R_1D[j] = Signal[Ptr++]; //copy the data across
		}
		//Do the FFT
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
800097a0:	e0 62 01 00 	mov	r2,256
800097a4:	e4 6c 02 04 	mov	r12,262660
800097a8:	fa 0c 00 01 	add	r1,sp,r12
800097ac:	0a 90       	mov	r0,r5
		//Copy data into 2D reult TRANSPOSED
		for(j = 0; j < FFT_SIZE; j++){
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
800097ae:	fa 77 f8 00 	mov	r7,-264192
800097b2:	c2 e8       	rjmp	8000980e <FFT2DCOMPLEX+0x82>
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++){ //for each row
		for(j = 0; j < FFT_SIZE; j++){
			Input_R_1D[j] = Signal[Ptr++]; //copy the data across
800097b4:	13 0a       	ld.w	r10,r9++
800097b6:	10 ba       	st.h	r8++,r10
	A_ALIGNED dsp16_complex_t Result_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++){ //for each row
		for(j = 0; j < FFT_SIZE; j++){
800097b8:	0c 38       	cp.w	r8,r6
800097ba:	cf d1       	brne	800097b4 <FFT2DCOMPLEX+0x28>
			Input_R_1D[j] = Signal[Ptr++]; //copy the data across
		}
		//Do the FFT
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
800097bc:	04 9c       	mov	r12,r2
800097be:	f0 1f 00 3e 	mcall	800098b4 <FFT2DCOMPLEX+0x128>
800097c2:	18 9a       	mov	r10,r12
800097c4:	06 9b       	mov	r11,r3
800097c6:	02 9c       	mov	r12,r1
800097c8:	f0 1f 00 3c 	mcall	800098b8 <FFT2DCOMPLEX+0x12c>
800097cc:	0a 99       	mov	r9,r5
800097ce:	00 98       	mov	r8,r0
		//Copy data into 2D reult TRANSPOSED
		for(j = 0; j < FFT_SIZE; j++){
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
800097d0:	e4 6b 0a 04 	mov	r11,264708
800097d4:	1a 0b       	add	r11,sp
800097d6:	f6 09 00 2a 	add	r10,r11,r9<<0x2
800097da:	0e 0a       	add	r10,r7
800097dc:	e4 6b 0a 04 	mov	r11,264708
800097e0:	1a 0b       	add	r11,sp
800097e2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800097e6:	f7 0c f8 02 	ld.sh	r12,r11[-2046]
800097ea:	a9 6c       	lsl	r12,0x8
800097ec:	b4 1c       	st.h	r10[0x2],r12
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
800097ee:	f7 0b f8 00 	ld.sh	r11,r11[-2048]
800097f2:	a9 6b       	lsl	r11,0x8
800097f4:	b4 0b       	st.h	r10[0x0],r11
			Input_R_1D[j] = Signal[Ptr++]; //copy the data across
		}
		//Do the FFT
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
		//Copy data into 2D reult TRANSPOSED
		for(j = 0; j < FFT_SIZE; j++){
800097f6:	2f f8       	sub	r8,-1
800097f8:	f2 c9 ff 00 	sub	r9,r9,-256
800097fc:	e0 48 01 00 	cp.w	r8,256
80009800:	ce 81       	brne	800097d0 <FFT2DCOMPLEX+0x44>
	A_ALIGNED dsp16_complex_t Input_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++){ //for each row
80009802:	2f f5       	sub	r5,-1
80009804:	e8 c4 fc 00 	sub	r4,r4,-1024
80009808:	e0 45 01 00 	cp.w	r5,256
8000980c:	c0 40       	breq	80009814 <FFT2DCOMPLEX+0x88>
8000980e:	06 98       	mov	r8,r3
// Qualifier:
// Parameter: int * Signal
// Parameter: A_ALIGNED dsp16_complex_t * ComplexBuffer
// Parameter: int size
//************************************
void FFT2DCOMPLEX( int *Signal, dsp16_complex_t *ComplexBuffer, int size )
80009810:	08 99       	mov	r9,r4
80009812:	cd 1b       	rjmp	800097b4 <FFT2DCOMPLEX+0x28>
80009814:	40 05       	lddsp	r5,sp[0x0]
80009816:	30 07       	mov	r7,0
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
		}
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	for(i = 0; i < FFT_SIZE; i++){//for each row
80009818:	0e 94       	mov	r4,r7
		for(j = 0; j < FFT_SIZE; j++){//copy the data across
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
8000981a:	fa 76 f8 00 	mov	r6,-264192
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;
		}

		//Do Fourier
		dsp16_trans_complexfft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
8000981e:	e0 63 01 00 	mov	r3,256
80009822:	e4 68 06 04 	mov	r8,263684
80009826:	fa 08 00 02 	add	r2,sp,r8
8000982a:	e4 6c 02 04 	mov	r12,262660
8000982e:	fa 0c 00 01 	add	r1,sp,r12
80009832:	c3 c8       	rjmp	800098aa <FFT2DCOMPLEX+0x11e>
// Qualifier:
// Parameter: int * Signal
// Parameter: A_ALIGNED dsp16_complex_t * ComplexBuffer
// Parameter: int size
//************************************
void FFT2DCOMPLEX( int *Signal, dsp16_complex_t *ComplexBuffer, int size )
80009834:	ee 08 00 0a 	add	r10,r7,r8
		}
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	for(i = 0; i < FFT_SIZE; i++){//for each row
		for(j = 0; j < FFT_SIZE; j++){//copy the data across
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
80009838:	e4 6b 0a 04 	mov	r11,264708
8000983c:	1a 0b       	add	r11,sp
8000983e:	f6 08 00 29 	add	r9,r11,r8<<0x2
80009842:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
80009846:	0c 0a       	add	r10,r6
80009848:	74 0b       	ld.w	r11,r10[0x0]
8000984a:	f3 5b fc 02 	st.h	r9[-1022],r11
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;
8000984e:	94 0a       	ld.sh	r10,r10[0x0]
80009850:	f3 5a fc 00 	st.h	r9[-1024],r10
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
		}
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	for(i = 0; i < FFT_SIZE; i++){//for each row
		for(j = 0; j < FFT_SIZE; j++){//copy the data across
80009854:	2f f8       	sub	r8,-1
80009856:	e0 48 01 00 	cp.w	r8,256
8000985a:	ce d1       	brne	80009834 <FFT2DCOMPLEX+0xa8>
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;
		}

		//Do Fourier
		dsp16_trans_complexfft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
8000985c:	06 9c       	mov	r12,r3
8000985e:	f0 1f 00 16 	mcall	800098b4 <FFT2DCOMPLEX+0x128>
80009862:	18 9a       	mov	r10,r12
80009864:	04 9b       	mov	r11,r2
80009866:	02 9c       	mov	r12,r1
80009868:	f0 1f 00 15 	mcall	800098bc <FFT2DCOMPLEX+0x130>
8000986c:	0a 98       	mov	r8,r5
8000986e:	08 99       	mov	r9,r4
		//Copy back
		for(j = 0; j < FFT_SIZE; j++){
			ComplexBuffer[i + j * FFT_SIZE].imag = 	Result_C_1D[j].imag;
80009870:	e4 6c 0a 04 	mov	r12,264708
80009874:	1a 0c       	add	r12,sp
80009876:	f8 09 00 2a 	add	r10,r12,r9<<0x2
8000987a:	f5 1b f8 02 	ld.uh	r11,r10[-2046]
8000987e:	f6 0c 16 08 	lsr	r12,r11,0x8
80009882:	b0 ac       	st.b	r8[0x2],r12
80009884:	b0 bb       	st.b	r8[0x3],r11
			ComplexBuffer[i + j * FFT_SIZE].real = 	Result_C_1D[j].real;
80009886:	f5 1a f8 00 	ld.uh	r10,r10[-2048]
8000988a:	f4 0b 16 08 	lsr	r11,r10,0x8
8000988e:	b0 8b       	st.b	r8[0x0],r11
80009890:	b0 9a       	st.b	r8[0x1],r10
		}

		//Do Fourier
		dsp16_trans_complexfft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
		//Copy back
		for(j = 0; j < FFT_SIZE; j++){
80009892:	2f f9       	sub	r9,-1
80009894:	f0 c8 fc 00 	sub	r8,r8,-1024
80009898:	e0 49 01 00 	cp.w	r9,256
8000989c:	ce a1       	brne	80009870 <FFT2DCOMPLEX+0xe4>
8000989e:	2f c5       	sub	r5,-4
800098a0:	ee c7 ff 00 	sub	r7,r7,-256
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
		}
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows
	for(i = 0; i < FFT_SIZE; i++){//for each row
800098a4:	e0 57 00 00 	cp.w	r7,65536
800098a8:	c0 30       	breq	800098ae <FFT2DCOMPLEX+0x122>
800098aa:	08 98       	mov	r8,r4
800098ac:	cc 4b       	rjmp	80009834 <FFT2DCOMPLEX+0xa8>
			ComplexBuffer[i + j * FFT_SIZE].imag = 	Result_C_1D[j].imag;
			ComplexBuffer[i + j * FFT_SIZE].real = 	Result_C_1D[j].real;
		}
	}
	return;
}
800098ae:	fa 3d f5 fc 	sub	sp,-264708
800098b2:	d8 32       	popm	r0-r7,pc
800098b4:	80 00       	ld.sh	r0,r0[0x0]
800098b6:	95 34       	st.w	r10[0xc],r4
800098b8:	80 00       	ld.sh	r0,r0[0x0]
800098ba:	c3 7c       	rcall	80009928 <FFT2Dabs+0x68>
800098bc:	80 00       	ld.sh	r0,r0[0x0]
800098be:	be b8       	st.b	pc[0x3],r8

800098c0 <FFT2Dabs>:
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
	}
}
int FFT2Dabs( int *Signal )
{
800098c0:	d4 31       	pushm	r0-r7,lr
800098c2:	e4 2d 0a 08 	sub	sp,264712
800098c6:	50 1c       	stdsp	sp[0x4],r12
800098c8:	18 93       	mov	r3,r12
800098ca:	30 04       	mov	r4,0
	A_ALIGNED dsp16_complex_t Result_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
800098cc:	fa c0 ff f8 	sub	r0,sp,-8
	{
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
	}
}
int FFT2Dabs( int *Signal )
800098d0:	fa c7 fd f8 	sub	r7,sp,-520
800098d4:	00 91       	mov	r1,r0
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
		//Copy data into 2D reult TRANSPOSED
//		print_dbg("\n\rOutput of FFT:\n\r[");
		for(j = 0; j < FFT_SIZE; j++)
		{
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
800098d6:	fa 76 f8 00 	mov	r6,-264192
800098da:	50 0c       	stdsp	sp[0x0],r12
800098dc:	c2 f8       	rjmp	8000993a <FFT2Dabs+0x7a>
	for(i = 0; i < FFT_SIZE; i ++) //for each row
	{
//		print_dbg("\n\rInput to FFT: \n\r[");
		for(j = 0; j < FFT_SIZE; j++)
		{
			Input_R_1D[j] = Signal[Ptr++]; //copy the data across
800098de:	13 0a       	ld.w	r10,r9++
800098e0:	10 ba       	st.h	r8++,r10
	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
	{
//		print_dbg("\n\rInput to FFT: \n\r[");
		for(j = 0; j < FFT_SIZE; j++)
800098e2:	0e 38       	cp.w	r8,r7
800098e4:	cf d1       	brne	800098de <FFT2Dabs+0x1e>
//			print_dbg_ulong(Input_R_1D[j]);
//			print_dbg(", ");
		}
//		print_dbg("\b\b]");
		//Do the FFT
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
800098e6:	e0 6c 01 00 	mov	r12,256
800098ea:	f0 1f 00 3c 	mcall	800099d8 <FFT2Dabs+0x118>
800098ee:	18 9a       	mov	r10,r12
800098f0:	02 9b       	mov	r11,r1
800098f2:	e4 68 02 08 	mov	r8,262664
800098f6:	fa 08 00 0c 	add	r12,sp,r8
800098fa:	f0 1f 00 39 	mcall	800099dc <FFT2Dabs+0x11c>
800098fe:	08 99       	mov	r9,r4
80009900:	30 08       	mov	r8,0
		//Copy data into 2D reult TRANSPOSED
//		print_dbg("\n\rOutput of FFT:\n\r[");
		for(j = 0; j < FFT_SIZE; j++)
		{
			Result_C_2D[i + (j * FFT_SIZE)].imag = Result_C_1D[j].imag * FFT_SIZE;//scale back up
80009902:	e4 6c 0a 08 	mov	r12,264712
80009906:	1a 0c       	add	r12,sp
80009908:	f8 09 00 2a 	add	r10,r12,r9<<0x2
8000990c:	0c 0a       	add	r10,r6
8000990e:	f8 08 00 2b 	add	r11,r12,r8<<0x2
80009912:	f7 0c f8 02 	ld.sh	r12,r11[-2046]
80009916:	a9 6c       	lsl	r12,0x8
80009918:	b4 1c       	st.h	r10[0x2],r12
			Result_C_2D[i + (j * FFT_SIZE)].real = Result_C_1D[j].real * FFT_SIZE;
8000991a:	f7 0b f8 00 	ld.sh	r11,r11[-2048]
8000991e:	a9 6b       	lsl	r11,0x8
80009920:	b4 0b       	st.h	r10[0x0],r11
//		print_dbg("\b\b]");
		//Do the FFT
		dsp16_trans_realcomplexfft(Result_C_1D, Input_R_1D, log_2(FFT_SIZE));
		//Copy data into 2D reult TRANSPOSED
//		print_dbg("\n\rOutput of FFT:\n\r[");
		for(j = 0; j < FFT_SIZE; j++)
80009922:	2f f8       	sub	r8,-1
80009924:	f2 c9 ff 00 	sub	r9,r9,-256
80009928:	e0 48 01 00 	cp.w	r8,256
8000992c:	ce b1       	brne	80009902 <FFT2Dabs+0x42>
	A_ALIGNED dsp16_complex_t Result_C_1D[FFT_SIZE];
	A_ALIGNED dsp16_complex_t Result_C_2D[FFT_SIZE*FFT_SIZE];
	A_ALIGNED dsp16_t Input_R_1D[FFT_SIZE];
	
	//Stage 1 - FFT Real values from Signal. Store VERTICALLY in Result_2D
	for(i = 0; i < FFT_SIZE; i ++) //for each row
8000992e:	2f f4       	sub	r4,-1
80009930:	e6 c3 fc 00 	sub	r3,r3,-1024
80009934:	e0 44 01 00 	cp.w	r4,256
80009938:	c0 60       	breq	80009944 <FFT2Dabs+0x84>
8000993a:	00 92       	mov	r2,r0
	{
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
	}
}
int FFT2Dabs( int *Signal )
8000993c:	0e 95       	mov	r5,r7
8000993e:	02 98       	mov	r8,r1
80009940:	06 99       	mov	r9,r3
80009942:	cc eb       	rjmp	800098de <FFT2Dabs+0x1e>
80009944:	04 9e       	mov	lr,r2
80009946:	40 02       	lddsp	r2,sp[0x0]
80009948:	30 07       	mov	r7,0
		}
//		print_dbg("\b\b]");
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows

	for(i = 0; i < FFT_SIZE; i++)//for each row
8000994a:	0e 90       	mov	r0,r7
	{
//		print_dbg("\n\rInput to FFT: \n\r[");
		for(j = 0; j < FFT_SIZE; j++)//copy the data across
		{
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
8000994c:	fa 76 f8 00 	mov	r6,-264192
// 			print_dbg_ulong(Input_C_1D[j].imag);
// 			print_dbg(" , ");
		}
//		print_dbg("\b\b]");
		//Do Fourier
		dsp16_trans_complexfft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
80009950:	e0 64 01 00 	mov	r4,256
80009954:	e4 6b 02 08 	mov	r11,262664
80009958:	fa 0b 00 03 	add	r3,sp,r11
// 			print_dbg_ulong(Result_C_1D[j].imag);
// 			print_dbg(" , ");
// 		}
// 		print_dbg("\b\b]");
		//Calculate Abs and put back into Signal TRANSPOSED
		dsp16_vect_complex_abs(Input_R_1D, Result_C_1D, FFT_SIZE);
8000995c:	fa c1 ff f8 	sub	r1,sp,-8
80009960:	50 0e       	stdsp	sp[0x0],lr
80009962:	c3 48       	rjmp	800099ca <FFT2Dabs+0x10a>
	{
		ComplexBuffer[i].imag = vect1[i].imag * FFT_SIZE;
		ComplexBuffer[i].real = vect1[i].real * FFT_SIZE;
	}
}
int FFT2Dabs( int *Signal )
80009964:	ee 08 00 0a 	add	r10,r7,r8
	for(i = 0; i < FFT_SIZE; i++)//for each row
	{
//		print_dbg("\n\rInput to FFT: \n\r[");
		for(j = 0; j < FFT_SIZE; j++)//copy the data across
		{
			Input_C_1D[j].imag = Result_C_2D[j + i * FFT_SIZE].imag;
80009968:	e4 6c 0a 08 	mov	r12,264712
8000996c:	1a 0c       	add	r12,sp
8000996e:	f8 08 00 29 	add	r9,r12,r8<<0x2
80009972:	f8 0a 00 2a 	add	r10,r12,r10<<0x2
80009976:	0c 0a       	add	r10,r6
80009978:	74 0b       	ld.w	r11,r10[0x0]
8000997a:	f3 5b fc 02 	st.h	r9[-1022],r11
			Input_C_1D[j].real = Result_C_2D[j + i * FFT_SIZE].real;
8000997e:	94 0a       	ld.sh	r10,r10[0x0]
80009980:	f3 5a fc 00 	st.h	r9[-1024],r10
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows

	for(i = 0; i < FFT_SIZE; i++)//for each row
	{
//		print_dbg("\n\rInput to FFT: \n\r[");
		for(j = 0; j < FFT_SIZE; j++)//copy the data across
80009984:	2f f8       	sub	r8,-1
80009986:	e0 48 01 00 	cp.w	r8,256
8000998a:	ce d1       	brne	80009964 <FFT2Dabs+0xa4>
// 			print_dbg_ulong(Input_C_1D[j].imag);
// 			print_dbg(" , ");
		}
//		print_dbg("\b\b]");
		//Do Fourier
		dsp16_trans_complexfft(Result_C_1D, Input_C_1D, log_2(FFT_SIZE));
8000998c:	08 9c       	mov	r12,r4
8000998e:	f0 1f 00 13 	mcall	800099d8 <FFT2Dabs+0x118>
80009992:	18 9a       	mov	r10,r12
80009994:	e4 68 06 08 	mov	r8,263688
80009998:	fa 08 00 0b 	add	r11,sp,r8
8000999c:	06 9c       	mov	r12,r3
8000999e:	f0 1f 00 11 	mcall	800099e0 <FFT2Dabs+0x120>
// 			print_dbg_ulong(Result_C_1D[j].imag);
// 			print_dbg(" , ");
// 		}
// 		print_dbg("\b\b]");
		//Calculate Abs and put back into Signal TRANSPOSED
		dsp16_vect_complex_abs(Input_R_1D, Result_C_1D, FFT_SIZE);
800099a2:	08 9a       	mov	r10,r4
800099a4:	06 9b       	mov	r11,r3
800099a6:	02 9c       	mov	r12,r1
800099a8:	f0 1f 00 0f 	mcall	800099e4 <FFT2Dabs+0x124>
800099ac:	04 99       	mov	r9,r2
800099ae:	40 08       	lddsp	r8,sp[0x0]
		
		for(j = 0; j < FFT_SIZE; j++)
		{
			Signal[i + (j*FFT_SIZE)] = Input_R_1D[j] * FFT_SIZE;
800099b0:	11 1a       	ld.sh	r10,r8++
800099b2:	a9 6a       	lsl	r10,0x8
800099b4:	93 0a       	st.w	r9[0x0],r10
800099b6:	f2 c9 fc 00 	sub	r9,r9,-1024
// 		}
// 		print_dbg("\b\b]");
		//Calculate Abs and put back into Signal TRANSPOSED
		dsp16_vect_complex_abs(Input_R_1D, Result_C_1D, FFT_SIZE);
		
		for(j = 0; j < FFT_SIZE; j++)
800099ba:	10 35       	cp.w	r5,r8
800099bc:	cf a1       	brne	800099b0 <FFT2Dabs+0xf0>
800099be:	2f c2       	sub	r2,-4
800099c0:	ee c7 ff 00 	sub	r7,r7,-256
		}
//		print_dbg("\b\b]");
	}
	//Stage 2 - FFT Complex Values from Result_2D, put back into Rows

	for(i = 0; i < FFT_SIZE; i++)//for each row
800099c4:	e0 57 00 00 	cp.w	r7,65536
800099c8:	c0 30       	breq	800099ce <FFT2Dabs+0x10e>
800099ca:	00 98       	mov	r8,r0
800099cc:	cc cb       	rjmp	80009964 <FFT2Dabs+0xa4>
		{
			Signal[i + (j*FFT_SIZE)] = Input_R_1D[j] * FFT_SIZE;
		}
	}
	return Signal;
}
800099ce:	40 1c       	lddsp	r12,sp[0x4]
800099d0:	fa 3d f5 f8 	sub	sp,-264712
800099d4:	d8 32       	popm	r0-r7,pc
800099d6:	00 00       	add	r0,r0
800099d8:	80 00       	ld.sh	r0,r0[0x0]
800099da:	95 34       	st.w	r10[0xc],r4
800099dc:	80 00       	ld.sh	r0,r0[0x0]
800099de:	c3 7c       	rcall	80009a4c <Motors_Execute+0x4>
800099e0:	80 00       	ld.sh	r0,r0[0x0]
800099e2:	be b8       	st.b	pc[0x3],r8
800099e4:	80 00       	ld.sh	r0,r0[0x0]
800099e6:	bc 0c       	st.h	lr[0x0],r12

800099e8 <Motors_Moving>:
// 	}
// 	else
// 	{
// 		return false;
// 	}
	if(Motor_Control.Left_State != STOP) //Left is moving
800099e8:	48 58       	lddpc	r8,800099fc <Motors_Moving+0x14>
800099ea:	70 08       	ld.w	r8,r8[0x0]
800099ec:	58 78       	cp.w	r8,7
800099ee:	c0 20       	breq	800099f2 <Motors_Moving+0xa>
800099f0:	5e ff       	retal	1
	Motor_Control.Right_State = FORWARD;
	Motor_Control.Right_Count = 1;
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
800099f2:	48 38       	lddpc	r8,800099fc <Motors_Moving+0x14>
800099f4:	70 18       	ld.w	r8,r8[0x4]
800099f6:	58 78       	cp.w	r8,7
800099f8:	5f 1c       	srne	r12
	}
	else
	{
		return false;
	}
}
800099fa:	5e fc       	retal	r12
800099fc:	00 00       	add	r0,r0
800099fe:	1a e4       	st.h	--sp,r4

80009a00 <Motor_Stop>:
			delay_ms(1);
		}
	}
}
void Motor_Stop(int Motors)
{
80009a00:	eb cd 40 80 	pushm	r7,lr
80009a04:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80009a06:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80009a0a:	c0 a0       	breq	80009a1e <Motor_Stop+0x1e>
	{
		ML_STANDBY;
80009a0c:	32 8c       	mov	r12,40
80009a0e:	f0 1f 00 0c 	mcall	80009a3c <Motor_Stop+0x3c>
		Motor_Control.Left_State = STOP;
80009a12:	30 79       	mov	r9,7
80009a14:	48 b8       	lddpc	r8,80009a40 <Motor_Stop+0x40>
80009a16:	91 09       	st.w	r8[0x0],r9
		pwm_stop_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80009a18:	30 2c       	mov	r12,2
80009a1a:	f0 1f 00 0b 	mcall	80009a44 <Motor_Stop+0x44>
	}
	
	if(Motors & MOTOR_R)
80009a1e:	e2 17 00 02 	andl	r7,0x2,COH
80009a22:	c0 a0       	breq	80009a36 <Motor_Stop+0x36>
	{
		MR_STANDBY;
80009a24:	33 0c       	mov	r12,48
80009a26:	f0 1f 00 06 	mcall	80009a3c <Motor_Stop+0x3c>
		Motor_Control.Right_State = STOP;
80009a2a:	30 79       	mov	r9,7
80009a2c:	48 58       	lddpc	r8,80009a40 <Motor_Stop+0x40>
80009a2e:	91 19       	st.w	r8[0x4],r9
		pwm_stop_channels((1 << MOTOR_R));
80009a30:	30 4c       	mov	r12,4
80009a32:	f0 1f 00 05 	mcall	80009a44 <Motor_Stop+0x44>
80009a36:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a3a:	00 00       	add	r0,r0
80009a3c:	80 00       	ld.sh	r0,r0[0x0]
80009a3e:	32 26       	mov	r6,34
80009a40:	00 00       	add	r0,r0
80009a42:	1a e4       	st.h	--sp,r4
80009a44:	80 00       	ld.sh	r0,r0[0x0]
80009a46:	34 c0       	mov	r0,76

80009a48 <Motors_Execute>:
		MR_GO;
		pwm_start_channels((1 << MOTOR_R));
	}	
}
void Motors_Execute()
{
80009a48:	eb cd 40 80 	pushm	r7,lr
	while(Motors_Moving())
80009a4c:	30 07       	mov	r7,0
80009a4e:	c1 78       	rjmp	80009a7c <Motors_Execute+0x34>
80009a50:	0e 9b       	mov	r11,r7
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009a52:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009a56:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009a5a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009a5e:	14 38       	cp.w	r8,r10
80009a60:	e0 88 00 08 	brls	80009a70 <Motors_Execute+0x28>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009a64:	12 38       	cp.w	r8,r9
80009a66:	fe 98 ff fa 	brls	80009a5a <Motors_Execute+0x12>
80009a6a:	12 3a       	cp.w	r10,r9
80009a6c:	c0 d3       	brcs	80009a86 <Motors_Execute+0x3e>
80009a6e:	cf 6b       	rjmp	80009a5a <Motors_Execute+0x12>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009a70:	12 38       	cp.w	r8,r9
80009a72:	e0 8b 00 0a 	brhi	80009a86 <Motors_Execute+0x3e>
80009a76:	12 3a       	cp.w	r10,r9
80009a78:	c0 73       	brcs	80009a86 <Motors_Execute+0x3e>
80009a7a:	cf 0b       	rjmp	80009a5a <Motors_Execute+0x12>
80009a7c:	f0 1f 00 05 	mcall	80009a90 <Motors_Execute+0x48>
80009a80:	ce 81       	brne	80009a50 <Motors_Execute+0x8>
80009a82:	e3 cd 80 80 	ldm	sp++,r7,pc
	{
		ENABLE_ACA_INTERRUPT;
		ENABLE_ACB_INTERRUPT;
		for(int i = 0; i < 750; i++)
80009a86:	2f fb       	sub	r11,-1
80009a88:	e0 4b 02 ee 	cp.w	r11,750
80009a8c:	ce 31       	brne	80009a52 <Motors_Execute+0xa>
80009a8e:	cf 7b       	rjmp	80009a7c <Motors_Execute+0x34>
80009a90:	80 00       	ld.sh	r0,r0[0x0]
80009a92:	99 e8       	st.w	r12[0x38],r8

80009a94 <Motor_Start>:
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
	
	Enable_global_interrupt();
}
void Motor_Start(int Motors)
{
80009a94:	eb cd 40 80 	pushm	r7,lr
80009a98:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80009a9a:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80009a9e:	c2 30       	breq	80009ae4 <Motor_Start+0x50>
	{
		if(Motor_Control.Left_State == FORWARD)
80009aa0:	4a 58       	lddpc	r8,80009b34 <Motor_Start+0xa0>
80009aa2:	70 08       	ld.w	r8,r8[0x0]
80009aa4:	58 28       	cp.w	r8,2
80009aa6:	c0 81       	brne	80009ab6 <Motor_Start+0x22>
		{
			ML_IN1_SET;
80009aa8:	32 9c       	mov	r12,41
80009aaa:	f0 1f 00 24 	mcall	80009b38 <Motor_Start+0xa4>
			ML_IN2_CLR;
80009aae:	32 ac       	mov	r12,42
80009ab0:	f0 1f 00 23 	mcall	80009b3c <Motor_Start+0xa8>
80009ab4:	c1 28       	rjmp	80009ad8 <Motor_Start+0x44>
		}
		else if (Motor_Control.Left_State == BACKWARD)
80009ab6:	58 38       	cp.w	r8,3
80009ab8:	c0 81       	brne	80009ac8 <Motor_Start+0x34>
		{
			ML_IN1_CLR;
80009aba:	32 9c       	mov	r12,41
80009abc:	f0 1f 00 20 	mcall	80009b3c <Motor_Start+0xa8>
			ML_IN2_SET;
80009ac0:	32 ac       	mov	r12,42
80009ac2:	f0 1f 00 1e 	mcall	80009b38 <Motor_Start+0xa4>
80009ac6:	c0 98       	rjmp	80009ad8 <Motor_Start+0x44>
		}
		else //Somethings gone wrong
		{
			ML_IN1_CLR;
80009ac8:	32 9c       	mov	r12,41
80009aca:	f0 1f 00 1d 	mcall	80009b3c <Motor_Start+0xa8>
			ML_IN2_CLR;
80009ace:	32 ac       	mov	r12,42
80009ad0:	f0 1f 00 1b 	mcall	80009b3c <Motor_Start+0xa8>
			return;//don't start any pwm channel
80009ad4:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		ML_GO;
80009ad8:	32 8c       	mov	r12,40
80009ada:	f0 1f 00 18 	mcall	80009b38 <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80009ade:	30 2c       	mov	r12,2
80009ae0:	f0 1f 00 18 	mcall	80009b40 <Motor_Start+0xac>
	}
	
	if(Motors & MOTOR_R)
80009ae4:	e2 17 00 02 	andl	r7,0x2,COH
80009ae8:	c2 30       	breq	80009b2e <Motor_Start+0x9a>
	{
		if(Motor_Control.Right_State == FORWARD)
80009aea:	49 38       	lddpc	r8,80009b34 <Motor_Start+0xa0>
80009aec:	70 18       	ld.w	r8,r8[0x4]
80009aee:	58 28       	cp.w	r8,2
80009af0:	c0 81       	brne	80009b00 <Motor_Start+0x6c>
		{
			MR_IN1_SET;
80009af2:	32 fc       	mov	r12,47
80009af4:	f0 1f 00 11 	mcall	80009b38 <Motor_Start+0xa4>
			MR_IN2_CLR;
80009af8:	32 ec       	mov	r12,46
80009afa:	f0 1f 00 11 	mcall	80009b3c <Motor_Start+0xa8>
80009afe:	c1 28       	rjmp	80009b22 <Motor_Start+0x8e>
		}
		else if (Motor_Control.Right_State == BACKWARD)
80009b00:	58 38       	cp.w	r8,3
80009b02:	c0 81       	brne	80009b12 <Motor_Start+0x7e>
		{
			MR_IN1_CLR;
80009b04:	32 fc       	mov	r12,47
80009b06:	f0 1f 00 0e 	mcall	80009b3c <Motor_Start+0xa8>
			MR_IN2_SET;
80009b0a:	32 ec       	mov	r12,46
80009b0c:	f0 1f 00 0b 	mcall	80009b38 <Motor_Start+0xa4>
80009b10:	c0 98       	rjmp	80009b22 <Motor_Start+0x8e>
		}
		else //Somethings gone wrong
		{
			MR_IN1_CLR;
80009b12:	32 fc       	mov	r12,47
80009b14:	f0 1f 00 0a 	mcall	80009b3c <Motor_Start+0xa8>
			MR_IN2_CLR;
80009b18:	32 ec       	mov	r12,46
80009b1a:	f0 1f 00 09 	mcall	80009b3c <Motor_Start+0xa8>
			return;//don't start any pwm channel
80009b1e:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		MR_GO;
80009b22:	33 0c       	mov	r12,48
80009b24:	f0 1f 00 05 	mcall	80009b38 <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_R));
80009b28:	30 4c       	mov	r12,4
80009b2a:	f0 1f 00 06 	mcall	80009b40 <Motor_Start+0xac>
80009b2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b32:	00 00       	add	r0,r0
80009b34:	00 00       	add	r0,r0
80009b36:	1a e4       	st.h	--sp,r4
80009b38:	80 00       	ld.sh	r0,r0[0x0]
80009b3a:	32 0a       	mov	r10,32
80009b3c:	80 00       	ld.sh	r0,r0[0x0]
80009b3e:	32 26       	mov	r6,34
80009b40:	80 00       	ld.sh	r0,r0[0x0]
80009b42:	34 ae       	mov	lr,74

80009b44 <Motors_Rotate>:
	}
}


void Motors_Rotate(int angle_degs)
{
80009b44:	d4 01       	pushm	lr
	int interrupts_to_move = 0; 
	//calculate interrupts to move
	interrupts_to_move = angle_degs * ROTATION_CONST;
80009b46:	e0 68 05 64 	mov	r8,1380
80009b4a:	b1 3c       	mul	r12,r8
80009b4c:	e0 69 0d 57 	mov	r9,3415
80009b50:	ea 19 19 1c 	orh	r9,0x191c
80009b54:	f8 09 04 48 	muls.d	r8,r12,r9
80009b58:	f2 08 14 0c 	asr	r8,r9,0xc
80009b5c:	bf 5c       	asr	r12,0x1f
80009b5e:	18 18       	sub	r8,r12
// 		Motor_Control.Left_Count = Abs(interrupts_to_move);
// 	}
// 	else if (Pivot_Type == SPOT_PIVOT)
// 	{
		//Both Wheels Move
		if(interrupts_to_move > 0)
80009b60:	58 08       	cp.w	r8,0
80009b62:	e0 8a 00 08 	brle	80009b72 <Motors_Rotate+0x2e>
		{
			Motor_Control.Left_State = FORWARD;
80009b66:	48 a9       	lddpc	r9,80009b8c <Motors_Rotate+0x48>
80009b68:	30 2a       	mov	r10,2
80009b6a:	93 0a       	st.w	r9[0x0],r10
			Motor_Control.Right_State = BACKWARD;
80009b6c:	30 3a       	mov	r10,3
80009b6e:	93 1a       	st.w	r9[0x4],r10
80009b70:	c0 68       	rjmp	80009b7c <Motors_Rotate+0x38>
		}
		else
		{
			Motor_Control.Right_State = FORWARD;
80009b72:	48 79       	lddpc	r9,80009b8c <Motors_Rotate+0x48>
80009b74:	30 2a       	mov	r10,2
80009b76:	93 1a       	st.w	r9[0x4],r10
			Motor_Control.Left_State = BACKWARD;
80009b78:	30 3a       	mov	r10,3
80009b7a:	93 0a       	st.w	r9[0x0],r10
		}
		Motor_Control.Left_Count = Abs(interrupts_to_move);
80009b7c:	5c 48       	abs	r8
80009b7e:	48 49       	lddpc	r9,80009b8c <Motors_Rotate+0x48>
80009b80:	93 28       	st.w	r9[0x8],r8
		Motor_Control.Right_Count = Abs(interrupts_to_move);
80009b82:	93 38       	st.w	r9[0xc],r8
		Motor_Start(MOTOR_L | MOTOR_R);
80009b84:	30 3c       	mov	r12,3
80009b86:	f0 1f 00 03 	mcall	80009b90 <Motors_Rotate+0x4c>
//	}
80009b8a:	d8 02       	popm	pc
80009b8c:	00 00       	add	r0,r0
80009b8e:	1a e4       	st.h	--sp,r4
80009b90:	80 00       	ld.sh	r0,r0[0x0]
80009b92:	9a 94       	ld.uh	r4,sp[0x2]

80009b94 <Motors_Reset>:
	Motor_Start(MOTOR_L | MOTOR_R);
	Motors_Execute();
}

void Motors_Reset(void)
{
80009b94:	d4 01       	pushm	lr
	Motor_Control.Left_State = FORWARD;
80009b96:	48 68       	lddpc	r8,80009bac <Motors_Reset+0x18>
80009b98:	30 2a       	mov	r10,2
80009b9a:	91 0a       	st.w	r8[0x0],r10
	Motor_Control.Left_Count = 1;
80009b9c:	30 19       	mov	r9,1
80009b9e:	91 29       	st.w	r8[0x8],r9
	Motor_Control.Right_State = FORWARD;
80009ba0:	91 1a       	st.w	r8[0x4],r10
	Motor_Control.Right_Count = 1;
80009ba2:	91 39       	st.w	r8[0xc],r9
	Motor_Start(MOTOR_L | MOTOR_R);
80009ba4:	30 3c       	mov	r12,3
80009ba6:	f0 1f 00 03 	mcall	80009bb0 <Motors_Reset+0x1c>
}
80009baa:	d8 02       	popm	pc
80009bac:	00 00       	add	r0,r0
80009bae:	1a e4       	st.h	--sp,r4
80009bb0:	80 00       	ld.sh	r0,r0[0x0]
80009bb2:	9a 94       	ld.uh	r4,sp[0x2]

80009bb4 <Motors_Move>:
		Motor_Control.Right_State = STOP;
		pwm_stop_channels((1 << MOTOR_R));
	}
}
void Motors_Move(int centimetres_fwd)//Move this amount forward in centimeters
{
80009bb4:	eb cd 40 c0 	pushm	r6-r7,lr
	//Calculate number of interrupts of each wheel
	int number_interrupts; 
	if(centimetres_fwd > 0)
80009bb8:	58 0c       	cp.w	r12,0
80009bba:	e0 8a 00 07 	brle	80009bc8 <Motors_Move+0x14>
	{
		Motor_Control.Left_State = FORWARD;
80009bbe:	49 38       	lddpc	r8,80009c08 <Motors_Move+0x54>
80009bc0:	30 29       	mov	r9,2
80009bc2:	91 09       	st.w	r8[0x0],r9
		Motor_Control.Right_State = FORWARD;
80009bc4:	91 19       	st.w	r8[0x4],r9
80009bc6:	c0 68       	rjmp	80009bd2 <Motors_Move+0x1e>
	}
	else 
	{
		centimetres_fwd = Abs(centimetres_fwd);
80009bc8:	5c 4c       	abs	r12
		Motor_Control.Left_State = BACKWARD;
80009bca:	49 08       	lddpc	r8,80009c08 <Motors_Move+0x54>
80009bcc:	30 39       	mov	r9,3
80009bce:	91 09       	st.w	r8[0x0],r9
		Motor_Control.Right_State = BACKWARD;
80009bd0:	91 19       	st.w	r8[0x4],r9
	}
	number_interrupts = (centimetres_fwd * (int)INTERRUPTS_PER_REVOLUTION) / (int)CIRCUMFERENCE_WHEEL_CM; 
80009bd2:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80009bd6:	e0 67 aa ab 	mov	r7,43691
80009bda:	ea 17 2a aa 	orh	r7,0x2aaa
80009bde:	f8 07 04 46 	muls.d	r6,r12,r7
80009be2:	a1 57       	asr	r7,0x1
80009be4:	bf 5c       	asr	r12,0x1f
80009be6:	18 17       	sub	r7,r12
	print_dbg("\n\rNumber of interrupts to move = ");
80009be8:	48 9c       	lddpc	r12,80009c0c <Motors_Move+0x58>
80009bea:	f0 1f 00 0a 	mcall	80009c10 <Motors_Move+0x5c>
	print_dbg_ulong(number_interrupts);
80009bee:	0e 9c       	mov	r12,r7
80009bf0:	f0 1f 00 09 	mcall	80009c14 <Motors_Move+0x60>
	
	Motor_Control.Left_Count = number_interrupts;
80009bf4:	48 58       	lddpc	r8,80009c08 <Motors_Move+0x54>
80009bf6:	91 27       	st.w	r8[0x8],r7
	Motor_Control.Right_Count = number_interrupts;
80009bf8:	91 37       	st.w	r8[0xc],r7
	Motor_Start(MOTOR_L | MOTOR_R);
80009bfa:	30 3c       	mov	r12,3
80009bfc:	f0 1f 00 07 	mcall	80009c18 <Motors_Move+0x64>
	Motors_Execute();
80009c00:	f0 1f 00 07 	mcall	80009c1c <Motors_Move+0x68>
}
80009c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009c08:	00 00       	add	r0,r0
80009c0a:	1a e4       	st.h	--sp,r4
80009c0c:	80 01       	ld.sh	r1,r0[0x0]
80009c0e:	28 40       	sub	r0,-124
80009c10:	80 00       	ld.sh	r0,r0[0x0]
80009c12:	6f f0       	ld.w	r0,r7[0x7c]
80009c14:	80 00       	ld.sh	r0,r0[0x0]
80009c16:	6f dc       	ld.w	r12,r7[0x74]
80009c18:	80 00       	ld.sh	r0,r0[0x0]
80009c1a:	9a 94       	ld.uh	r4,sp[0x2]
80009c1c:	80 00       	ld.sh	r0,r0[0x0]
80009c1e:	9a 48       	ld.sh	r8,sp[0x8]

80009c20 <Analogue_Comparator_Init>:
		Motor_Stop(temp); //Stop the Motor
	//delay_ms(100);
	
}
void Analogue_Comparator_Init()
{
80009c20:	eb cd 40 c0 	pushm	r6-r7,lr
	{POT1_AC1BP1_PIN, POT1_AC1BP1_FUNCTION},
	{SENSE0_AC1AN1_PIN, SENSE0_AC1AN1_FUNCTION},
	{SENSE1_AC1BN1_PIN, SENSE1_AC1BN1_FUNCTION},
	};
	
	gpio_enable_module(ACIFA_GPIO_MAP, sizeof(ACIFA_GPIO_MAP) / sizeof(ACIFA_GPIO_MAP[0]));
80009c24:	30 4b       	mov	r11,4
80009c26:	4a 0c       	lddpc	r12,80009ca4 <Analogue_Comparator_Init+0x84>
80009c28:	f0 1f 00 20 	mcall	80009ca8 <Analogue_Comparator_Init+0x88>
	//Make it an interrupt
	Disable_global_interrupt();
80009c2c:	d3 03       	ssrf	0x10
	
	//INTC_init_interrupts();
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELA, 2);
80009c2e:	30 2a       	mov	r10,2
80009c30:	30 1b       	mov	r11,1
80009c32:	fe 7c 64 00 	mov	r12,-39936
80009c36:	f0 1f 00 1e 	mcall	80009cac <Analogue_Comparator_Init+0x8c>
	acifa_configure(&AVR32_ACIFA1,
80009c3a:	e0 68 24 00 	mov	r8,9216
80009c3e:	ea 18 00 f4 	orh	r8,0xf4
80009c42:	30 19       	mov	r9,1
80009c44:	12 9a       	mov	r10,r9
80009c46:	12 9b       	mov	r11,r9
80009c48:	fe 7c 64 00 	mov	r12,-39936
80009c4c:	f0 1f 00 19 	mcall	80009cb0 <Analogue_Comparator_Init+0x90>
	ACIFA_COMP_SELA,
	POT0_AC1AP1_INPUT,
	SENSE0_AC1AN1_INPUT,
	FOSC0);
	
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELB, 2);
80009c50:	30 2a       	mov	r10,2
80009c52:	14 9b       	mov	r11,r10
80009c54:	fe 7c 64 00 	mov	r12,-39936
80009c58:	f0 1f 00 15 	mcall	80009cac <Analogue_Comparator_Init+0x8c>
	acifa_configure(&AVR32_ACIFA1,
80009c5c:	e0 68 24 00 	mov	r8,9216
80009c60:	ea 18 00 f4 	orh	r8,0xf4
80009c64:	30 19       	mov	r9,1
80009c66:	30 3a       	mov	r10,3
80009c68:	30 2b       	mov	r11,2
80009c6a:	fe 7c 64 00 	mov	r12,-39936
80009c6e:	f0 1f 00 11 	mcall	80009cb0 <Analogue_Comparator_Init+0x90>
	
	//Motor_Go(S)
	//acifa_enable_interrupt(&AVR32_ACIFA1, (1 << AVR32_ACIFA_ACBINT )| (1 << AVR32_ACIFA_ACAINT));//Enable ACBINT and ACAINT
	ENABLE_ACA_INTERRUPT;
	ENABLE_ACB_INTERRUPT;
	AVR32_ACIFA1.ier = 3; //enable interrupts	
80009c72:	fe 77 64 00 	mov	r7,-39936
80009c76:	30 36       	mov	r6,3
80009c78:	8f a6       	st.w	r7[0x28],r6
 	//acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELA);
 	//acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELB);
	acifa_enable_interrupt_inp_lower(&AVR32_ACIFA1, ACIFA_COMP_SELA);
80009c7a:	30 1b       	mov	r11,1
80009c7c:	0e 9c       	mov	r12,r7
80009c7e:	f0 1f 00 0e 	mcall	80009cb4 <Analogue_Comparator_Init+0x94>
 	acifa_enable_interrupt_inp_lower(&AVR32_ACIFA1, ACIFA_COMP_SELB);
80009c82:	30 2b       	mov	r11,2
80009c84:	0e 9c       	mov	r12,r7
80009c86:	f0 1f 00 0c 	mcall	80009cb4 <Analogue_Comparator_Init+0x94>
	acifa_start(&AVR32_ACIFA1, (ACIFA_COMP_SELA|ACIFA_COMP_SELB));
80009c8a:	0c 9b       	mov	r11,r6
80009c8c:	0e 9c       	mov	r12,r7
80009c8e:	f0 1f 00 0b 	mcall	80009cb8 <Analogue_Comparator_Init+0x98>
	
	
	
	
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
80009c92:	30 0a       	mov	r10,0
80009c94:	e0 6b 04 c0 	mov	r11,1216
80009c98:	48 9c       	lddpc	r12,80009cbc <Analogue_Comparator_Init+0x9c>
80009c9a:	f0 1f 00 0a 	mcall	80009cc0 <Analogue_Comparator_Init+0xa0>
	
	Enable_global_interrupt();
80009c9e:	d5 03       	csrf	0x10
}
80009ca0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009ca4:	80 01       	ld.sh	r1,r0[0x0]
80009ca6:	28 94       	sub	r4,-119
80009ca8:	80 00       	ld.sh	r0,r0[0x0]
80009caa:	31 c0       	mov	r0,28
80009cac:	80 00       	ld.sh	r0,r0[0x0]
80009cae:	2d 24       	sub	r4,-46
80009cb0:	80 00       	ld.sh	r0,r0[0x0]
80009cb2:	2c e0       	sub	r0,-50
80009cb4:	80 00       	ld.sh	r0,r0[0x0]
80009cb6:	2d b6       	sub	r6,-37
80009cb8:	80 00       	ld.sh	r0,r0[0x0]
80009cba:	2d 48       	sub	r8,-44
80009cbc:	80 00       	ld.sh	r0,r0[0x0]
80009cbe:	9c c4       	ld.uh	r4,lr[0x8]
80009cc0:	80 00       	ld.sh	r0,r0[0x0]
80009cc2:	32 44       	mov	r4,36

80009cc4 <ACInterruptHandler>:
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
}
__attribute__((__interrupt__)) static void ACInterruptHandler(void)
{
80009cc4:	d4 01       	pushm	lr
	//print_dbg("\n\rACIFA Interrupt Entered.");
	acifa_clear_flags(&AVR32_ACIFA1, 3);
80009cc6:	30 3b       	mov	r11,3
80009cc8:	fe 7c 64 00 	mov	r12,-39936
80009ccc:	f0 1f 00 1e 	mcall	80009d44 <ACInterruptHandler+0x80>
	
	if (acifa_is_acb_inp_higher(&AVR32_ACIFA1)) //LEFT MOTOR
80009cd0:	fe 7c 64 00 	mov	r12,-39936
80009cd4:	f0 1f 00 1d 	mcall	80009d48 <ACInterruptHandler+0x84>
80009cd8:	c0 50       	breq	80009ce2 <ACInterruptHandler+0x1e>
	{
		LED5_CLR; //wheel not on white tab
80009cda:	33 cc       	mov	r12,60
80009cdc:	f0 1f 00 1c 	mcall	80009d4c <ACInterruptHandler+0x88>
80009ce0:	c0 b8       	rjmp	80009cf6 <ACInterruptHandler+0x32>
	}
	else
	{
		LED5_SET;
80009ce2:	33 cc       	mov	r12,60
80009ce4:	f0 1f 00 1b 	mcall	80009d50 <ACInterruptHandler+0x8c>
		Motor_Control.Left_Count --;
80009ce8:	49 b8       	lddpc	r8,80009d54 <ACInterruptHandler+0x90>
80009cea:	70 29       	ld.w	r9,r8[0x8]
80009cec:	20 19       	sub	r9,1
80009cee:	91 29       	st.w	r8[0x8],r9
		print_dbg("\n\rLeft Wheel Interrupt");
80009cf0:	49 ac       	lddpc	r12,80009d58 <ACInterruptHandler+0x94>
80009cf2:	f0 1f 00 1b 	mcall	80009d5c <ACInterruptHandler+0x98>
		DISABLE_ACB_INTERRUPT;
		//delay_ms(100);
	}
	
	if (acifa_is_aca_inp_higher(&AVR32_ACIFA1))
80009cf6:	fe 7c 64 00 	mov	r12,-39936
80009cfa:	f0 1f 00 1a 	mcall	80009d60 <ACInterruptHandler+0x9c>
80009cfe:	c0 50       	breq	80009d08 <ACInterruptHandler+0x44>
	{

		LED6_CLR;
80009d00:	33 dc       	mov	r12,61
80009d02:	f0 1f 00 13 	mcall	80009d4c <ACInterruptHandler+0x88>
80009d06:	c0 b8       	rjmp	80009d1c <ACInterruptHandler+0x58>
		
	}
	else
	{
		LED6_SET;
80009d08:	33 dc       	mov	r12,61
80009d0a:	f0 1f 00 12 	mcall	80009d50 <ACInterruptHandler+0x8c>
		Motor_Control.Right_Count --;
80009d0e:	49 28       	lddpc	r8,80009d54 <ACInterruptHandler+0x90>
80009d10:	70 39       	ld.w	r9,r8[0xc]
80009d12:	20 19       	sub	r9,1
80009d14:	91 39       	st.w	r8[0xc],r9
		print_dbg("\n\rRight Wheel Interrupt");
80009d16:	49 4c       	lddpc	r12,80009d64 <ACInterruptHandler+0xa0>
80009d18:	f0 1f 00 11 	mcall	80009d5c <ACInterruptHandler+0x98>
80009d1c:	48 e8       	lddpc	r8,80009d54 <ACInterruptHandler+0x90>
80009d1e:	70 29       	ld.w	r9,r8[0x8]
80009d20:	f2 cc 00 01 	sub	r12,r9,1
80009d24:	f9 e9 10 09 	or	r9,r12,r9
80009d28:	f2 0c 16 1f 	lsr	r12,r9,0x1f
	
	int temp = 0;
	if(Motor_Control.Left_Count <= 0) //if we have reached the end of the movement on left wheel
		temp |= MOTOR_L;
	
	if(Motor_Control.Right_Count <= 0)
80009d2c:	70 38       	ld.w	r8,r8[0xc]
80009d2e:	58 08       	cp.w	r8,0
80009d30:	e0 89 00 03 	brgt	80009d36 <ACInterruptHandler+0x72>
		temp |= MOTOR_R;
80009d34:	a1 bc       	sbr	r12,0x1
	if(temp != 0)	
80009d36:	58 0c       	cp.w	r12,0
80009d38:	c0 30       	breq	80009d3e <ACInterruptHandler+0x7a>
		Motor_Stop(temp); //Stop the Motor
80009d3a:	f0 1f 00 0c 	mcall	80009d68 <ACInterruptHandler+0xa4>
	//delay_ms(100);
	
}
80009d3e:	d4 02       	popm	lr
80009d40:	d6 03       	rete
80009d42:	00 00       	add	r0,r0
80009d44:	80 00       	ld.sh	r0,r0[0x0]
80009d46:	2d b0       	sub	r0,-37
80009d48:	80 00       	ld.sh	r0,r0[0x0]
80009d4a:	2d a8       	sub	r8,-38
80009d4c:	80 00       	ld.sh	r0,r0[0x0]
80009d4e:	32 26       	mov	r6,34
80009d50:	80 00       	ld.sh	r0,r0[0x0]
80009d52:	32 0a       	mov	r10,32
80009d54:	00 00       	add	r0,r0
80009d56:	1a e4       	st.h	--sp,r4
80009d58:	80 01       	ld.sh	r1,r0[0x0]
80009d5a:	28 64       	sub	r4,-122
80009d5c:	80 00       	ld.sh	r0,r0[0x0]
80009d5e:	6f f0       	ld.w	r0,r7[0x7c]
80009d60:	80 00       	ld.sh	r0,r0[0x0]
80009d62:	2d a0       	sub	r0,-38
80009d64:	80 01       	ld.sh	r1,r0[0x0]
80009d66:	28 7c       	sub	r12,-121
80009d68:	80 00       	ld.sh	r0,r0[0x0]
80009d6a:	9a 00       	ld.sh	r0,sp[0x0]

80009d6c <Motor_Init>:
// #  define EXAMPLE_PWM_L_FUNCTION        AVR32_PWM_PWML_0_1_FUNCTION
// #  define EXAMPLE_PWM_H_PIN             AVR32_PWM_PWMH_0_1_PIN
// #  define EXAMPLE_PWM_H_FUNCTION        AVR32_PWM_PWMH_0_1_FUNCTION
// #  define EXAMPLE_PWM_CHANNEL_ID        0
void Motor_Init()
{
80009d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80009d70:	20 dd       	sub	sp,52
	//Turn boths motors off
	ML_STANDBY;
80009d72:	32 8c       	mov	r12,40
80009d74:	f0 1f 00 41 	mcall	80009e78 <Motor_Init+0x10c>
	MR_STANDBY;
80009d78:	33 0c       	mov	r12,48
80009d7a:	f0 1f 00 40 	mcall	80009e78 <Motor_Init+0x10c>
	
	ML_IN1_CLR;
80009d7e:	32 9c       	mov	r12,41
80009d80:	f0 1f 00 3e 	mcall	80009e78 <Motor_Init+0x10c>
	ML_IN2_CLR;
80009d84:	32 ac       	mov	r12,42
80009d86:	f0 1f 00 3d 	mcall	80009e78 <Motor_Init+0x10c>
	
	MR_IN1_CLR;
80009d8a:	32 fc       	mov	r12,47
80009d8c:	f0 1f 00 3b 	mcall	80009e78 <Motor_Init+0x10c>
	MR_IN2_CLR;
80009d90:	32 ec       	mov	r12,46
80009d92:	f0 1f 00 3a 	mcall	80009e78 <Motor_Init+0x10c>
	
	Motor_Control.Left_Count = 0;
80009d96:	4b a8       	lddpc	r8,80009e7c <Motor_Init+0x110>
80009d98:	30 07       	mov	r7,0
80009d9a:	91 27       	st.w	r8[0x8],r7
	Motor_Control.Right_Count = 0;
80009d9c:	91 37       	st.w	r8[0xc],r7
	Motor_Control.Left_State = STOP;
80009d9e:	30 79       	mov	r9,7
80009da0:	91 09       	st.w	r8[0x0],r9
	Motor_Control.Right_State = STOP;
80009da2:	91 19       	st.w	r8[0x4],r9
											{0}, // cdtyupd
											{0}, // cprd
											{0}, // cprdupd
											{0}, // ccnt
											{0}, // dt
											{0}};// dtupd  ;  One channel config.
80009da4:	30 08       	mov	r8,0
80009da6:	30 09       	mov	r9,0
80009da8:	fa e9 00 14 	st.d	sp[20],r8
80009dac:	fa e9 00 1c 	st.d	sp[28],r8
80009db0:	fa e9 00 24 	st.d	sp[36],r8
80009db4:	fa e9 00 2c 	st.d	sp[44],r8
            .div = 1,             // DIV=1 in the formula
            .mul = 6,             // MUL=7 in the formula
            .pll_div2 = 1,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
            .pll_wbwdisable = 0,  // pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
            .pll_freq = 1,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
  };
80009db8:	4b 28       	lddpc	r8,80009e80 <Motor_Init+0x114>
80009dba:	1a 9b       	mov	r11,sp
80009dbc:	70 09       	ld.w	r9,r8[0x0]
80009dbe:	50 09       	stdsp	sp[0x0],r9
80009dc0:	70 19       	ld.w	r9,r8[0x4]
80009dc2:	50 19       	stdsp	sp[0x4],r9
80009dc4:	70 29       	ld.w	r9,r8[0x8]
80009dc6:	50 29       	stdsp	sp[0x8],r9
80009dc8:	70 39       	ld.w	r9,r8[0xc]
80009dca:	50 39       	stdsp	sp[0xc],r9
80009dcc:	70 48       	ld.w	r8,r8[0x10]
80009dce:	50 48       	stdsp	sp[0x10],r8
  // Switch main clock to Osc0.
//  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

  /* Setup PLL0 on Osc0, mul=7 ,no divisor, lockcount=16, ie. (16Mhzx7)/(div2) = 56MHz output */
  scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
80009dd0:	0e 9c       	mov	r12,r7
80009dd2:	f0 1f 00 2d 	mcall	80009e84 <Motor_Init+0x118>

  /* Enable PLL0 */
  scif_pll_enable(SCIF_PLL0);
80009dd6:	0e 9c       	mov	r12,r7
80009dd8:	f0 1f 00 2c 	mcall	80009e88 <Motor_Init+0x11c>

  /* Wait for PLL0 locked */
  scif_wait_for_pll_locked(SCIF_PLL0) ;
80009ddc:	0e 9c       	mov	r12,r7
80009dde:	f0 1f 00 2c 	mcall	80009e8c <Motor_Init+0x120>
}
static void pwm_start_gc(void)
{
  scif_gc_setup(AVR32_SCIF_GCLK_PWM,
80009de2:	0e 99       	mov	r9,r7
80009de4:	0e 9a       	mov	r10,r7
80009de6:	30 5b       	mov	r11,5
80009de8:	30 4c       	mov	r12,4
80009dea:	f0 1f 00 2a 	mcall	80009e90 <Motor_Init+0x124>
//   scif_gc_setup(  AVR32_SCIF_GCLK_PWM,
// 				  SCIF_GCCTRL_OSC0,
// 				  AVR32_SCIF_GC_NO_DIV_CLOCK,
// 				  0);
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_PWM);
80009dee:	30 4c       	mov	r12,4
80009df0:	f0 1f 00 29 	mcall	80009e94 <Motor_Init+0x128>
	
// 	gpio_enable_module_pin(EXAMPLE_PWM_L_PIN, EXAMPLE_PWM_L_FUNCTION);
// 	gpio_enable_module_pin(EXAMPLE_PWM_H_PIN, EXAMPLE_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(AVR32_PIN_PB10, AVR32_PWM_PWMH_1_1_FUNCTION); //PWM1 Low
	gpio_enable_module_pin(ML_PWM_H_PIN, ML_PWM_H_FUNCTION);
80009df4:	30 2b       	mov	r11,2
80009df6:	32 bc       	mov	r12,43
80009df8:	f0 1f 00 28 	mcall	80009e98 <Motor_Init+0x12c>
	gpio_enable_module_pin(MR_PWM_H_PIN, MR_PWM_H_FUNCTION); //PWM1 Low
80009dfc:	30 2b       	mov	r11,2
80009dfe:	32 dc       	mov	r12,45
80009e00:	f0 1f 00 26 	mcall	80009e98 <Motor_Init+0x12c>
	//gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION);
	// PWM controller configuration.
	pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80009e04:	4a 6c       	lddpc	r12,80009e9c <Motor_Init+0x130>
80009e06:	99 17       	st.w	r12[0x4],r7
	pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
80009e08:	99 07       	st.w	r12[0x0],r7
	pwm_opt.prea = AVR32_PWM_PREA_CCK;
80009e0a:	99 37       	st.w	r12[0xc],r7
	pwm_opt.preb = AVR32_PWM_PREB_CCK;
80009e0c:	99 27       	st.w	r12[0x8],r7
	
	pwm_opt.fault_detection_activated = false;
80009e0e:	f9 67 00 14 	st.b	r12[20],r7
	pwm_opt.sync_channel_activated    = true;
80009e12:	30 18       	mov	r8,1
80009e14:	f9 68 00 15 	st.b	r12[21],r8
	pwm_opt.sync_update_channel_mode  = PWM_SYNC_UPDATE_MANUAL_WRITE_MANUAL_UPDATE;
80009e18:	f9 67 00 16 	st.b	r12[22],r7
	pwm_opt.sync_channel_select[0]    = false;
80009e1c:	f9 67 00 17 	st.b	r12[23],r7
	pwm_opt.sync_channel_select[1]    = false;
80009e20:	f9 67 00 18 	st.b	r12[24],r7
	pwm_opt.sync_channel_select[2]    = false;
80009e24:	f9 67 00 19 	st.b	r12[25],r7
	pwm_opt.sync_channel_select[3]    = false;
80009e28:	f9 67 00 1a 	st.b	r12[26],r7
	pwm_opt.cksel                     = PWM_CKSEL_GCLK;
80009e2c:	30 16       	mov	r6,1
80009e2e:	99 46       	st.w	r12[0x10],r6
	pwm_init(&pwm_opt);
80009e30:	f0 1f 00 1c 	mcall	80009ea0 <Motor_Init+0x134>
	
	// Update the period
	pwm_update_period_value(10);
80009e34:	30 ac       	mov	r12,10
80009e36:	f0 1f 00 1c 	mcall	80009ea4 <Motor_Init+0x138>
	pwm_channel.CMR.dte   = 0;        // Enable Deadtime for complementary Mode
	pwm_channel.CMR.dthi  = 0;        // Deadtime Inverted on PWMH
	pwm_channel.CMR.dtli  = 0;        // Deadtime Not Inverted on PWML
	pwm_channel.CMR.ces   = 0;        // 0/1 Channel Event at the End of PWM Period
	pwm_channel.CMR.calg  = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
	pwm_channel.CMR.cpol  = PWM_POLARITY_HIGH;            // Channel polarity.
80009e3a:	40 58       	lddsp	r8,sp[0x14]
80009e3c:	e4 18 ff f8 	andh	r8,0xfff8
80009e40:	e0 18 fa ff 	andl	r8,0xfaff
80009e44:	f1 d6 d1 21 	bfins	r8,r6,0x9,0x1
	pwm_channel.CMR.cpre  = AVR32_PWM_CPRE_CCK;           // Channel prescaler.
80009e48:	f1 d7 d0 04 	bfins	r8,r7,0x0,0x4
80009e4c:	50 58       	stdsp	sp[0x14],r8
	pwm_channel.cdty      = 50;       // Channel duty cycle, should be < CPRD.
80009e4e:	33 28       	mov	r8,50
80009e50:	50 68       	stdsp	sp[0x18],r8
	pwm_channel.cprd      = 200;       // Channel period.
80009e52:	e0 68 00 c8 	mov	r8,200
80009e56:	50 88       	stdsp	sp[0x20],r8
	
/*	channel_id = M0_PWM_CHANNEL_ID;*/
	pwm_channel_init(ML_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80009e58:	fa c7 ff ec 	sub	r7,sp,-20
80009e5c:	0e 9b       	mov	r11,r7
80009e5e:	0c 9c       	mov	r12,r6
80009e60:	f0 1f 00 12 	mcall	80009ea8 <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
/*	channel_id = M1_PWM_CHANNEL_ID; */
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80009e64:	0e 9b       	mov	r11,r7
80009e66:	30 2c       	mov	r12,2
80009e68:	f0 1f 00 10 	mcall	80009ea8 <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
80009e6c:	f0 1f 00 10 	mcall	80009eac <Motor_Init+0x140>
}
80009e70:	2f 3d       	sub	sp,-52
80009e72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009e76:	00 00       	add	r0,r0
80009e78:	80 00       	ld.sh	r0,r0[0x0]
80009e7a:	32 26       	mov	r6,34
80009e7c:	00 00       	add	r0,r0
80009e7e:	1a e4       	st.h	--sp,r4
80009e80:	80 01       	ld.sh	r1,r0[0x0]
80009e82:	28 b4       	sub	r4,-117
80009e84:	80 00       	ld.sh	r0,r0[0x0]
80009e86:	37 30       	mov	r0,115
80009e88:	80 00       	ld.sh	r0,r0[0x0]
80009e8a:	36 ec       	mov	r12,110
80009e8c:	80 00       	ld.sh	r0,r0[0x0]
80009e8e:	35 f2       	mov	r2,95
80009e90:	80 00       	ld.sh	r0,r0[0x0]
80009e92:	36 44       	mov	r4,100
80009e94:	80 00       	ld.sh	r0,r0[0x0]
80009e96:	36 c8       	mov	r8,108
80009e98:	80 00       	ld.sh	r0,r0[0x0]
80009e9a:	31 2c       	mov	r12,18
80009e9c:	00 00       	add	r0,r0
80009e9e:	1a c8       	st.b	sp++,r8
80009ea0:	80 00       	ld.sh	r0,r0[0x0]
80009ea2:	34 dc       	mov	r12,77
80009ea4:	80 00       	ld.sh	r0,r0[0x0]
80009ea6:	34 d2       	mov	r2,77
80009ea8:	80 00       	ld.sh	r0,r0[0x0]
80009eaa:	34 70       	mov	r0,71
80009eac:	80 00       	ld.sh	r0,r0[0x0]
80009eae:	9c 20       	ld.sh	r0,lr[0x4]

80009eb0 <Photos_Ready>:
}

bool Photos_Ready(void)
{
	int status = 0;
	if(OV7670_Status.Camera_0_Found == true) //If camera is there
80009eb0:	49 78       	lddpc	r8,80009f0c <Photos_Ready+0x5c>
80009eb2:	11 99       	ld.ub	r9,r8[0x1]
80009eb4:	30 08       	mov	r8,0
80009eb6:	f0 09 18 00 	cp.b	r9,r8
80009eba:	c0 e0       	breq	80009ed6 <Photos_Ready+0x26>
	{ 
		if(OV7670_Status.Camera_0_Error == false)//and has no errors
80009ebc:	49 48       	lddpc	r8,80009f0c <Photos_Ready+0x5c>
80009ebe:	11 b9       	ld.ub	r9,r8[0x3]
80009ec0:	30 08       	mov	r8,0
80009ec2:	f0 09 18 00 	cp.b	r9,r8
80009ec6:	c0 81       	brne	80009ed6 <Photos_Ready+0x26>
80009ec8:	49 18       	lddpc	r8,80009f0c <Photos_Ready+0x5c>
80009eca:	11 d9       	ld.ub	r9,r8[0x5]
80009ecc:	30 38       	mov	r8,3
80009ece:	f0 09 18 00 	cp.b	r9,r8
80009ed2:	5f 08       	sreq	r8
80009ed4:	c0 28       	rjmp	80009ed8 <Photos_Ready+0x28>
80009ed6:	30 18       	mov	r8,1
			status |= 1;
	}
	else
		status |= 1;		
		
	if(OV7670_Status.Camera_1_Found == true) //If camera is there
80009ed8:	48 d9       	lddpc	r9,80009f0c <Photos_Ready+0x5c>
80009eda:	13 aa       	ld.ub	r10,r9[0x2]
80009edc:	30 09       	mov	r9,0
80009ede:	f2 0a 18 00 	cp.b	r10,r9
80009ee2:	c1 10       	breq	80009f04 <Photos_Ready+0x54>
	{
		if(OV7670_Status.Camera_1_Error == false)//and has no errors
80009ee4:	48 a9       	lddpc	r9,80009f0c <Photos_Ready+0x5c>
80009ee6:	13 ca       	ld.ub	r10,r9[0x4]
80009ee8:	30 09       	mov	r9,0
80009eea:	f2 0a 18 00 	cp.b	r10,r9
80009eee:	c0 91       	brne	80009f00 <Photos_Ready+0x50>
		{
			if(OV7670_Status.VSYNC1_State == TAKEN_PHOTO)
80009ef0:	48 79       	lddpc	r9,80009f0c <Photos_Ready+0x5c>
80009ef2:	13 ea       	ld.ub	r10,r9[0x6]
80009ef4:	30 39       	mov	r9,3
80009ef6:	f2 0a 18 00 	cp.b	r10,r9
80009efa:	c0 61       	brne	80009f06 <Photos_Ready+0x56>
			{
				status |= 1; //camera0 has taken photo
80009efc:	a1 a8       	sbr	r8,0x0
80009efe:	c0 48       	rjmp	80009f06 <Photos_Ready+0x56>
			}
		}
		else
		status |= 1;
80009f00:	a1 a8       	sbr	r8,0x0
80009f02:	c0 28       	rjmp	80009f06 <Photos_Ready+0x56>
	}
	else
		status |= 1;
80009f04:	a1 a8       	sbr	r8,0x0
80009f06:	58 08       	cp.w	r8,0
		
	if(status)
		return true;
	else
		return false;
}
80009f08:	5f 1c       	srne	r12
80009f0a:	5e fc       	retal	r12
80009f0c:	00 00       	add	r0,r0
80009f0e:	1a 86       	andn	r6,sp

80009f10 <Store_Image_0>:
	SaveBitmap(Buffer_ram, WIDTH, HEIGHT, Filename_buff);
	mspace_free(sdram_msp, Buffer_ram);
}

void Store_Image_0()
{
80009f10:	eb cd 40 fc 	pushm	r2-r7,lr
80009f14:	20 4d       	sub	sp,16
	int i, j;
	//uint8_t buffer[WIDTH * 2];
	char Filename_buff[15];
	uint16_t *Buffer_ram;
	Buffer_ram = mspace_malloc(sdram_msp, HEIGHT * WIDTH );
80009f16:	e0 7b 2c 00 	mov	r11,76800
80009f1a:	fe f8 01 fe 	ld.w	r8,pc[510]
80009f1e:	70 0c       	ld.w	r12,r8[0x0]
80009f20:	f0 1f 00 7f 	mcall	8000a11c <Store_Image_0+0x20c>
80009f24:	18 93       	mov	r3,r12
80009f26:	18 92       	mov	r2,r12
	i = 0;
	//make file
	//delete file if it exits already
 	nav_filelist_reset();
80009f28:	f0 1f 00 7e 	mcall	8000a120 <Store_Image_0+0x210>
80009f2c:	30 08       	mov	r8,0
	while(1)
	{
		sprintf(&Filename_buff, Image0Name, i++);
80009f2e:	4f e5       	lddpc	r5,8000a124 <Store_Image_0+0x214>
80009f30:	1a 97       	mov	r7,sp
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80009f32:	10 94       	mov	r4,r8
	//make file
	//delete file if it exits already
 	nav_filelist_reset();
	while(1)
	{
		sprintf(&Filename_buff, Image0Name, i++);
80009f34:	f0 c6 ff ff 	sub	r6,r8,-1
80009f38:	1a d8       	st.w	--sp,r8
80009f3a:	0a 9b       	mov	r11,r5
80009f3c:	0e 9c       	mov	r12,r7
80009f3e:	f0 1f 00 7b 	mcall	8000a128 <Store_Image_0+0x218>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80009f42:	08 9b       	mov	r11,r4
80009f44:	0e 9c       	mov	r12,r7
80009f46:	f0 1f 00 7a 	mcall	8000a12c <Store_Image_0+0x21c>
80009f4a:	0c 98       	mov	r8,r6
80009f4c:	2f fd       	sub	sp,-4
80009f4e:	58 0c       	cp.w	r12,0
80009f50:	cf 21       	brne	80009f34 <Store_Image_0+0x24>
		}
	}

	//Image1
	//reset read pointer
	FIFO_0_nRRST_CLR;
80009f52:	30 fc       	mov	r12,15
80009f54:	f0 1f 00 77 	mcall	8000a130 <Store_Image_0+0x220>
	
	FIFO_0_RCLK_SET;
80009f58:	31 3c       	mov	r12,19
80009f5a:	f0 1f 00 77 	mcall	8000a134 <Store_Image_0+0x224>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009f5e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009f62:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009f66:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009f6a:	14 38       	cp.w	r8,r10
80009f6c:	e0 88 00 09 	brls	80009f7e <Store_Image_0+0x6e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009f70:	12 38       	cp.w	r8,r9
80009f72:	fe 98 ff fa 	brls	80009f66 <Store_Image_0+0x56>
80009f76:	12 3a       	cp.w	r10,r9
80009f78:	e0 83 00 8b 	brlo	8000a08e <Store_Image_0+0x17e>
80009f7c:	cf 5b       	rjmp	80009f66 <Store_Image_0+0x56>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009f7e:	12 38       	cp.w	r8,r9
80009f80:	e0 8b 00 87 	brhi	8000a08e <Store_Image_0+0x17e>
80009f84:	12 3a       	cp.w	r10,r9
80009f86:	e0 83 00 84 	brlo	8000a08e <Store_Image_0+0x17e>
80009f8a:	ce eb       	rjmp	80009f66 <Store_Image_0+0x56>
	FIFO_0_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH; j++)
	{
		FIFO_0_RCLK_SET;
80009f8c:	0c 9c       	mov	r12,r6
80009f8e:	f0 1f 00 6a 	mcall	8000a134 <Store_Image_0+0x224>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009f92:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009f96:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009f9a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009f9e:	14 38       	cp.w	r8,r10
80009fa0:	e0 88 00 09 	brls	80009fb2 <Store_Image_0+0xa2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009fa4:	12 38       	cp.w	r8,r9
80009fa6:	fe 98 ff fa 	brls	80009f9a <Store_Image_0+0x8a>
80009faa:	12 3a       	cp.w	r10,r9
80009fac:	e0 83 00 83 	brlo	8000a0b2 <Store_Image_0+0x1a2>
80009fb0:	cf 5b       	rjmp	80009f9a <Store_Image_0+0x8a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009fb2:	12 38       	cp.w	r8,r9
80009fb4:	e0 8b 00 7f 	brhi	8000a0b2 <Store_Image_0+0x1a2>
80009fb8:	12 3a       	cp.w	r10,r9
80009fba:	c7 c3       	brcs	8000a0b2 <Store_Image_0+0x1a2>
80009fbc:	ce fb       	rjmp	80009f9a <Store_Image_0+0x8a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009fbe:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009fc2:	14 38       	cp.w	r8,r10
80009fc4:	e0 88 00 08 	brls	80009fd4 <Store_Image_0+0xc4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009fc8:	12 38       	cp.w	r8,r9
80009fca:	fe 98 ff fa 	brls	80009fbe <Store_Image_0+0xae>
80009fce:	12 3a       	cp.w	r10,r9
80009fd0:	c7 b3       	brcs	8000a0c6 <Store_Image_0+0x1b6>
80009fd2:	cf 6b       	rjmp	80009fbe <Store_Image_0+0xae>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009fd4:	12 38       	cp.w	r8,r9
80009fd6:	e0 8b 00 78 	brhi	8000a0c6 <Store_Image_0+0x1b6>
80009fda:	12 3a       	cp.w	r10,r9
80009fdc:	c7 53       	brcs	8000a0c6 <Store_Image_0+0x1b6>
80009fde:	cf 0b       	rjmp	80009fbe <Store_Image_0+0xae>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009fe0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009fe4:	14 38       	cp.w	r8,r10
80009fe6:	e0 88 00 08 	brls	80009ff6 <Store_Image_0+0xe6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009fea:	12 38       	cp.w	r8,r9
80009fec:	fe 98 ff fa 	brls	80009fe0 <Store_Image_0+0xd0>
80009ff0:	12 3a       	cp.w	r10,r9
80009ff2:	c7 23       	brcs	8000a0d6 <Store_Image_0+0x1c6>
80009ff4:	cf 6b       	rjmp	80009fe0 <Store_Image_0+0xd0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009ff6:	12 38       	cp.w	r8,r9
80009ff8:	e0 8b 00 6f 	brhi	8000a0d6 <Store_Image_0+0x1c6>
80009ffc:	12 3a       	cp.w	r10,r9
80009ffe:	c6 c3       	brcs	8000a0d6 <Store_Image_0+0x1c6>
8000a000:	cf 0b       	rjmp	80009fe0 <Store_Image_0+0xd0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a002:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a006:	14 38       	cp.w	r8,r10
8000a008:	e0 88 00 08 	brls	8000a018 <Store_Image_0+0x108>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a00c:	12 38       	cp.w	r8,r9
8000a00e:	fe 98 ff fa 	brls	8000a002 <Store_Image_0+0xf2>
8000a012:	12 3a       	cp.w	r10,r9
8000a014:	c6 93       	brcs	8000a0e6 <Store_Image_0+0x1d6>
8000a016:	cf 6b       	rjmp	8000a002 <Store_Image_0+0xf2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a018:	12 38       	cp.w	r8,r9
8000a01a:	e0 8b 00 66 	brhi	8000a0e6 <Store_Image_0+0x1d6>
8000a01e:	12 3a       	cp.w	r10,r9
8000a020:	c6 33       	brcs	8000a0e6 <Store_Image_0+0x1d6>
8000a022:	cf 0b       	rjmp	8000a002 <Store_Image_0+0xf2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a024:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a028:	14 38       	cp.w	r8,r10
8000a02a:	e0 88 00 08 	brls	8000a03a <Store_Image_0+0x12a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a02e:	12 38       	cp.w	r8,r9
8000a030:	fe 98 ff fa 	brls	8000a024 <Store_Image_0+0x114>
8000a034:	12 3a       	cp.w	r10,r9
8000a036:	c6 33       	brcs	8000a0fc <Store_Image_0+0x1ec>
8000a038:	cf 6b       	rjmp	8000a024 <Store_Image_0+0x114>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a03a:	12 38       	cp.w	r8,r9
8000a03c:	e0 8b 00 60 	brhi	8000a0fc <Store_Image_0+0x1ec>
8000a040:	12 3a       	cp.w	r10,r9
8000a042:	c5 d3       	brcs	8000a0fc <Store_Image_0+0x1ec>
8000a044:	cf 0b       	rjmp	8000a024 <Store_Image_0+0x114>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a046:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a04a:	14 38       	cp.w	r8,r10
8000a04c:	e0 88 00 08 	brls	8000a05c <Store_Image_0+0x14c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a050:	12 38       	cp.w	r8,r9
8000a052:	fe 98 ff fa 	brls	8000a046 <Store_Image_0+0x136>
8000a056:	12 3a       	cp.w	r10,r9
8000a058:	c5 a3       	brcs	8000a10c <Store_Image_0+0x1fc>
8000a05a:	cf 6b       	rjmp	8000a046 <Store_Image_0+0x136>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a05c:	12 38       	cp.w	r8,r9
8000a05e:	e0 8b 00 57 	brhi	8000a10c <Store_Image_0+0x1fc>
8000a062:	12 3a       	cp.w	r10,r9
8000a064:	c5 43       	brcs	8000a10c <Store_Image_0+0x1fc>
8000a066:	cf 0b       	rjmp	8000a046 <Store_Image_0+0x136>
		delay_us(10);
		FIFO_0_RCLK_CLR;
		delay_us(10);
	}
	
	FIFO_0_nOE_SET;//disable output
8000a068:	31 cc       	mov	r12,28
8000a06a:	f0 1f 00 33 	mcall	8000a134 <Store_Image_0+0x224>
/*	file_close();*/
	SaveBitmap(Buffer_ram, WIDTH, HEIGHT, Filename_buff);
8000a06e:	1a 99       	mov	r9,sp
8000a070:	e0 6a 00 f0 	mov	r10,240
8000a074:	e0 6b 01 40 	mov	r11,320
8000a078:	04 9c       	mov	r12,r2
8000a07a:	f0 1f 00 30 	mcall	8000a138 <Store_Image_0+0x228>
	mspace_free(sdram_msp, Buffer_ram);
8000a07e:	04 9b       	mov	r11,r2
8000a080:	4a 68       	lddpc	r8,8000a118 <Store_Image_0+0x208>
8000a082:	70 0c       	ld.w	r12,r8[0x0]
8000a084:	f0 1f 00 2e 	mcall	8000a13c <Store_Image_0+0x22c>
8000a088:	2f cd       	sub	sp,-16
8000a08a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	//reset read pointer
	FIFO_0_nRRST_CLR;
	
	FIFO_0_RCLK_SET;
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000a08e:	31 3c       	mov	r12,19
8000a090:	f0 1f 00 28 	mcall	8000a130 <Store_Image_0+0x220>
	FIFO_0_nRRST_SET;
8000a094:	30 fc       	mov	r12,15
8000a096:	f0 1f 00 28 	mcall	8000a134 <Store_Image_0+0x224>
	
	//enable output
	FIFO_0_nOE_CLR;
8000a09a:	31 cc       	mov	r12,28
8000a09c:	f0 1f 00 25 	mcall	8000a130 <Store_Image_0+0x220>
8000a0a0:	06 97       	mov	r7,r3
/*	file_close();*/
	SaveBitmap(Buffer_ram, WIDTH, HEIGHT, Filename_buff);
	mspace_free(sdram_msp, Buffer_ram);
}

void Store_Image_0()
8000a0a2:	e2 68 58 00 	mov	r8,153600
8000a0a6:	e6 08 00 04 	add	r4,r3,r8
	FIFO_0_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH; j++)
	{
		FIFO_0_RCLK_SET;
8000a0aa:	31 36       	mov	r6,19
		delay_us(10);
		Buffer_ram[j] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000a0ac:	fe 75 20 00 	mov	r5,-57344
8000a0b0:	c6 eb       	rjmp	80009f8c <Store_Image_0+0x7c>
8000a0b2:	ea f8 02 60 	ld.w	r8,r5[608]
8000a0b6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000a0ba:	ae 08       	st.h	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a0bc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a0c0:	f0 ca ff 60 	sub	r10,r8,-160
8000a0c4:	c7 db       	rjmp	80009fbe <Store_Image_0+0xae>
		delay_us(10);
		FIFO_0_RCLK_CLR;
8000a0c6:	0c 9c       	mov	r12,r6
8000a0c8:	f0 1f 00 1a 	mcall	8000a130 <Store_Image_0+0x220>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a0cc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a0d0:	f0 ca ff 60 	sub	r10,r8,-160
8000a0d4:	c8 6b       	rjmp	80009fe0 <Store_Image_0+0xd0>
		delay_us(10);
		FIFO_0_RCLK_SET;
8000a0d6:	0c 9c       	mov	r12,r6
8000a0d8:	f0 1f 00 17 	mcall	8000a134 <Store_Image_0+0x224>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a0dc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a0e0:	f0 ca ff 60 	sub	r10,r8,-160
8000a0e4:	c8 fb       	rjmp	8000a002 <Store_Image_0+0xf2>
		delay_us(10);
		Buffer_ram[j] |= (((AVR32_GPIO.port[1].pvr) & 0xFF) << 8);//CAMERA_INPUT;
8000a0e6:	ea f9 02 60 	ld.w	r9,r5[608]
8000a0ea:	8e 08       	ld.sh	r8,r7[0x0]
8000a0ec:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000a0f0:	ae 08       	st.h	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a0f2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a0f6:	f0 ca ff 60 	sub	r10,r8,-160
8000a0fa:	c9 5b       	rjmp	8000a024 <Store_Image_0+0x114>
		delay_us(10);
		FIFO_0_RCLK_CLR;
8000a0fc:	0c 9c       	mov	r12,r6
8000a0fe:	f0 1f 00 0d 	mcall	8000a130 <Store_Image_0+0x220>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a102:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a106:	f0 ca ff 60 	sub	r10,r8,-160
8000a10a:	c9 eb       	rjmp	8000a046 <Store_Image_0+0x136>
8000a10c:	2f e7       	sub	r7,-2
	
	//enable output
	FIFO_0_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH; j++)
8000a10e:	08 37       	cp.w	r7,r4
8000a110:	fe 91 ff 3e 	brne	80009f8c <Store_Image_0+0x7c>
8000a114:	ca ab       	rjmp	8000a068 <Store_Image_0+0x158>
8000a116:	00 00       	add	r0,r0
8000a118:	00 00       	add	r0,r0
8000a11a:	1a a4       	st.w	sp++,r4
8000a11c:	80 00       	ld.sh	r0,r0[0x0]
8000a11e:	90 18       	ld.sh	r8,r8[0x2]
8000a120:	80 00       	ld.sh	r0,r0[0x0]
8000a122:	68 4c       	ld.w	r12,r4[0x10]
8000a124:	80 01       	ld.sh	r1,r0[0x0]
8000a126:	28 c8       	sub	r8,-116
8000a128:	80 00       	ld.sh	r0,r0[0x0]
8000a12a:	c9 08       	rjmp	8000a24a <Store_Image_1+0x10a>
8000a12c:	80 00       	ld.sh	r0,r0[0x0]
8000a12e:	68 1c       	ld.w	r12,r4[0x4]
8000a130:	80 00       	ld.sh	r0,r0[0x0]
8000a132:	32 26       	mov	r6,34
8000a134:	80 00       	ld.sh	r0,r0[0x0]
8000a136:	32 0a       	mov	r10,32
8000a138:	80 00       	ld.sh	r0,r0[0x0]
8000a13a:	ae e4       	st.b	r7[0x6],r4
8000a13c:	80 00       	ld.sh	r0,r0[0x0]
8000a13e:	77 68       	ld.w	r8,r11[0x58]

8000a140 <Store_Image_1>:
// 	//mspace_free(sdram_msp, Buffer_ram);
// /*	mspace_free(sdram_msp, Buffer_ram);*/
// }

void Store_Image_1()
{
8000a140:	eb cd 40 fc 	pushm	r2-r7,lr
8000a144:	20 4d       	sub	sp,16
	int i, j;
	//uint8_t buffer[WIDTH * 2];
	char Filename_buff[15];
	uint8_t *Buffer_ram;
	Buffer_ram = mspace_malloc(sdram_msp, HEIGHT * WIDTH * 2);
8000a146:	e2 6b 58 00 	mov	r11,153600
8000a14a:	4f d8       	lddpc	r8,8000a33c <Store_Image_1+0x1fc>
8000a14c:	70 0c       	ld.w	r12,r8[0x0]
8000a14e:	f0 1f 00 7d 	mcall	8000a340 <Store_Image_1+0x200>
8000a152:	18 93       	mov	r3,r12
8000a154:	18 92       	mov	r2,r12
	i = 0;
	//make file
	//delete file if it exits already
 	nav_filelist_reset();
8000a156:	f0 1f 00 7c 	mcall	8000a344 <Store_Image_1+0x204>
8000a15a:	30 08       	mov	r8,0
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
8000a15c:	4f b5       	lddpc	r5,8000a348 <Store_Image_1+0x208>
8000a15e:	1a 97       	mov	r7,sp
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
8000a160:	10 94       	mov	r4,r8
	//make file
	//delete file if it exits already
 	nav_filelist_reset();
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
8000a162:	f0 c6 ff ff 	sub	r6,r8,-1
8000a166:	1a d8       	st.w	--sp,r8
8000a168:	0a 9b       	mov	r11,r5
8000a16a:	0e 9c       	mov	r12,r7
8000a16c:	f0 1f 00 78 	mcall	8000a34c <Store_Image_1+0x20c>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
8000a170:	08 9b       	mov	r11,r4
8000a172:	0e 9c       	mov	r12,r7
8000a174:	f0 1f 00 77 	mcall	8000a350 <Store_Image_1+0x210>
8000a178:	0c 98       	mov	r8,r6
8000a17a:	2f fd       	sub	sp,-4
8000a17c:	58 0c       	cp.w	r12,0
8000a17e:	cf 21       	brne	8000a162 <Store_Image_1+0x22>
		}
	}

	//Image1
	//reset read pointer
	FIFO_1_nRRST_CLR;
8000a180:	31 6c       	mov	r12,22
8000a182:	f0 1f 00 75 	mcall	8000a354 <Store_Image_1+0x214>
	
	FIFO_1_RCLK_SET;
8000a186:	31 7c       	mov	r12,23
8000a188:	f0 1f 00 74 	mcall	8000a358 <Store_Image_1+0x218>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a18c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a190:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a194:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a198:	14 38       	cp.w	r8,r10
8000a19a:	e0 88 00 09 	brls	8000a1ac <Store_Image_1+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a19e:	12 38       	cp.w	r8,r9
8000a1a0:	fe 98 ff fa 	brls	8000a194 <Store_Image_1+0x54>
8000a1a4:	12 3a       	cp.w	r10,r9
8000a1a6:	e0 83 00 8b 	brlo	8000a2bc <Store_Image_1+0x17c>
8000a1aa:	cf 5b       	rjmp	8000a194 <Store_Image_1+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a1ac:	12 38       	cp.w	r8,r9
8000a1ae:	e0 8b 00 87 	brhi	8000a2bc <Store_Image_1+0x17c>
8000a1b2:	12 3a       	cp.w	r10,r9
8000a1b4:	e0 83 00 84 	brlo	8000a2bc <Store_Image_1+0x17c>
8000a1b8:	ce eb       	rjmp	8000a194 <Store_Image_1+0x54>
	FIFO_1_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH * 2; j+= 2)
	{
		FIFO_1_RCLK_SET;
8000a1ba:	0c 9c       	mov	r12,r6
8000a1bc:	f0 1f 00 67 	mcall	8000a358 <Store_Image_1+0x218>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a1c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a1c4:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a1c8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a1cc:	14 38       	cp.w	r8,r10
8000a1ce:	e0 88 00 09 	brls	8000a1e0 <Store_Image_1+0xa0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a1d2:	12 38       	cp.w	r8,r9
8000a1d4:	fe 98 ff fa 	brls	8000a1c8 <Store_Image_1+0x88>
8000a1d8:	12 3a       	cp.w	r10,r9
8000a1da:	e0 83 00 83 	brlo	8000a2e0 <Store_Image_1+0x1a0>
8000a1de:	cf 5b       	rjmp	8000a1c8 <Store_Image_1+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a1e0:	12 38       	cp.w	r8,r9
8000a1e2:	e0 8b 00 7f 	brhi	8000a2e0 <Store_Image_1+0x1a0>
8000a1e6:	12 3a       	cp.w	r10,r9
8000a1e8:	c7 c3       	brcs	8000a2e0 <Store_Image_1+0x1a0>
8000a1ea:	ce fb       	rjmp	8000a1c8 <Store_Image_1+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a1ec:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a1f0:	14 38       	cp.w	r8,r10
8000a1f2:	e0 88 00 08 	brls	8000a202 <Store_Image_1+0xc2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a1f6:	12 38       	cp.w	r8,r9
8000a1f8:	fe 98 ff fa 	brls	8000a1ec <Store_Image_1+0xac>
8000a1fc:	12 3a       	cp.w	r10,r9
8000a1fe:	c7 93       	brcs	8000a2f0 <Store_Image_1+0x1b0>
8000a200:	cf 6b       	rjmp	8000a1ec <Store_Image_1+0xac>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a202:	12 38       	cp.w	r8,r9
8000a204:	e0 8b 00 76 	brhi	8000a2f0 <Store_Image_1+0x1b0>
8000a208:	12 3a       	cp.w	r10,r9
8000a20a:	c7 33       	brcs	8000a2f0 <Store_Image_1+0x1b0>
8000a20c:	cf 0b       	rjmp	8000a1ec <Store_Image_1+0xac>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a20e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a212:	14 38       	cp.w	r8,r10
8000a214:	e0 88 00 08 	brls	8000a224 <Store_Image_1+0xe4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a218:	12 38       	cp.w	r8,r9
8000a21a:	fe 98 ff fa 	brls	8000a20e <Store_Image_1+0xce>
8000a21e:	12 3a       	cp.w	r10,r9
8000a220:	c7 03       	brcs	8000a300 <Store_Image_1+0x1c0>
8000a222:	cf 6b       	rjmp	8000a20e <Store_Image_1+0xce>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a224:	12 38       	cp.w	r8,r9
8000a226:	e0 8b 00 6d 	brhi	8000a300 <Store_Image_1+0x1c0>
8000a22a:	12 3a       	cp.w	r10,r9
8000a22c:	c6 a3       	brcs	8000a300 <Store_Image_1+0x1c0>
8000a22e:	cf 0b       	rjmp	8000a20e <Store_Image_1+0xce>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a230:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a234:	14 38       	cp.w	r8,r10
8000a236:	e0 88 00 08 	brls	8000a246 <Store_Image_1+0x106>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a23a:	12 38       	cp.w	r8,r9
8000a23c:	fe 98 ff fa 	brls	8000a230 <Store_Image_1+0xf0>
8000a240:	12 3a       	cp.w	r10,r9
8000a242:	c6 73       	brcs	8000a310 <Store_Image_1+0x1d0>
8000a244:	cf 6b       	rjmp	8000a230 <Store_Image_1+0xf0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a246:	12 38       	cp.w	r8,r9
8000a248:	e0 8b 00 64 	brhi	8000a310 <Store_Image_1+0x1d0>
8000a24c:	12 3a       	cp.w	r10,r9
8000a24e:	c6 13       	brcs	8000a310 <Store_Image_1+0x1d0>
8000a250:	cf 0b       	rjmp	8000a230 <Store_Image_1+0xf0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a252:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a256:	14 38       	cp.w	r8,r10
8000a258:	e0 88 00 08 	brls	8000a268 <Store_Image_1+0x128>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a25c:	12 38       	cp.w	r8,r9
8000a25e:	fe 98 ff fa 	brls	8000a252 <Store_Image_1+0x112>
8000a262:	12 3a       	cp.w	r10,r9
8000a264:	c5 e3       	brcs	8000a320 <Store_Image_1+0x1e0>
8000a266:	cf 6b       	rjmp	8000a252 <Store_Image_1+0x112>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a268:	12 38       	cp.w	r8,r9
8000a26a:	e0 8b 00 5b 	brhi	8000a320 <Store_Image_1+0x1e0>
8000a26e:	12 3a       	cp.w	r10,r9
8000a270:	c5 83       	brcs	8000a320 <Store_Image_1+0x1e0>
8000a272:	cf 0b       	rjmp	8000a252 <Store_Image_1+0x112>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a274:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a278:	14 38       	cp.w	r8,r10
8000a27a:	e0 88 00 08 	brls	8000a28a <Store_Image_1+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a27e:	12 38       	cp.w	r8,r9
8000a280:	fe 98 ff fa 	brls	8000a274 <Store_Image_1+0x134>
8000a284:	12 3a       	cp.w	r10,r9
8000a286:	c5 53       	brcs	8000a330 <Store_Image_1+0x1f0>
8000a288:	cf 6b       	rjmp	8000a274 <Store_Image_1+0x134>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a28a:	12 38       	cp.w	r8,r9
8000a28c:	e0 8b 00 52 	brhi	8000a330 <Store_Image_1+0x1f0>
8000a290:	12 3a       	cp.w	r10,r9
8000a292:	c4 f3       	brcs	8000a330 <Store_Image_1+0x1f0>
8000a294:	cf 0b       	rjmp	8000a274 <Store_Image_1+0x134>
		delay_us(10);
		FIFO_1_RCLK_CLR;
		delay_us(10);
	}
	
	FIFO_1_nOE_SET;//disable output
8000a296:	31 bc       	mov	r12,27
8000a298:	f0 1f 00 30 	mcall	8000a358 <Store_Image_1+0x218>
/*	file_close();*/
	SaveBitmap(Buffer_ram, WIDTH, HEIGHT, Filename_buff);
8000a29c:	1a 99       	mov	r9,sp
8000a29e:	e0 6a 00 f0 	mov	r10,240
8000a2a2:	e0 6b 01 40 	mov	r11,320
8000a2a6:	04 9c       	mov	r12,r2
8000a2a8:	f0 1f 00 2d 	mcall	8000a35c <Store_Image_1+0x21c>
	mspace_free(sdram_msp, Buffer_ram);
8000a2ac:	04 9b       	mov	r11,r2
8000a2ae:	4a 48       	lddpc	r8,8000a33c <Store_Image_1+0x1fc>
8000a2b0:	70 0c       	ld.w	r12,r8[0x0]
8000a2b2:	f0 1f 00 2c 	mcall	8000a360 <Store_Image_1+0x220>
}
8000a2b6:	2f cd       	sub	sp,-16
8000a2b8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	//reset read pointer
	FIFO_1_nRRST_CLR;
	
	FIFO_1_RCLK_SET;
	delay_us(10);
	FIFO_1_RCLK_CLR;
8000a2bc:	31 7c       	mov	r12,23
8000a2be:	f0 1f 00 26 	mcall	8000a354 <Store_Image_1+0x214>
	FIFO_1_nRRST_SET;
8000a2c2:	31 6c       	mov	r12,22
8000a2c4:	f0 1f 00 25 	mcall	8000a358 <Store_Image_1+0x218>
	
	//enable output
	FIFO_1_nOE_CLR;
8000a2c8:	31 bc       	mov	r12,27
8000a2ca:	f0 1f 00 23 	mcall	8000a354 <Store_Image_1+0x214>
8000a2ce:	06 97       	mov	r7,r3
// 	file_close();
// 	//mspace_free(sdram_msp, Buffer_ram);
// /*	mspace_free(sdram_msp, Buffer_ram);*/
// }

void Store_Image_1()
8000a2d0:	e2 68 58 00 	mov	r8,153600
8000a2d4:	e6 08 00 04 	add	r4,r3,r8
	FIFO_1_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH * 2; j+= 2)
	{
		FIFO_1_RCLK_SET;
8000a2d8:	31 76       	mov	r6,23
		delay_us(10);
		Buffer_ram[j+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000a2da:	fe 75 20 00 	mov	r5,-57344
8000a2de:	c6 eb       	rjmp	8000a1ba <Store_Image_1+0x7a>
8000a2e0:	ea f8 02 60 	ld.w	r8,r5[608]
8000a2e4:	ae 98       	st.b	r7[0x1],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a2e6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a2ea:	f0 ca ff 60 	sub	r10,r8,-160
8000a2ee:	c7 fb       	rjmp	8000a1ec <Store_Image_1+0xac>
		delay_us(10);
		FIFO_1_RCLK_CLR;
8000a2f0:	0c 9c       	mov	r12,r6
8000a2f2:	f0 1f 00 19 	mcall	8000a354 <Store_Image_1+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a2f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a2fa:	f0 ca ff 60 	sub	r10,r8,-160
8000a2fe:	c8 8b       	rjmp	8000a20e <Store_Image_1+0xce>
		delay_us(10);
		FIFO_1_RCLK_SET;
8000a300:	0c 9c       	mov	r12,r6
8000a302:	f0 1f 00 16 	mcall	8000a358 <Store_Image_1+0x218>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a306:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a30a:	f0 ca ff 60 	sub	r10,r8,-160
8000a30e:	c9 1b       	rjmp	8000a230 <Store_Image_1+0xf0>
		delay_us(10);
		Buffer_ram[j] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000a310:	ea f8 02 60 	ld.w	r8,r5[608]
8000a314:	ae 88       	st.b	r7[0x0],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a316:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a31a:	f0 ca ff 60 	sub	r10,r8,-160
8000a31e:	c9 ab       	rjmp	8000a252 <Store_Image_1+0x112>
		delay_us(10);
		FIFO_1_RCLK_CLR;
8000a320:	0c 9c       	mov	r12,r6
8000a322:	f0 1f 00 0d 	mcall	8000a354 <Store_Image_1+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a326:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a32a:	f0 ca ff 60 	sub	r10,r8,-160
8000a32e:	ca 3b       	rjmp	8000a274 <Store_Image_1+0x134>
8000a330:	2f e7       	sub	r7,-2
	
	//enable output
	FIFO_1_nOE_CLR;
	//	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT * WIDTH * 2; j+= 2)
8000a332:	08 37       	cp.w	r7,r4
8000a334:	fe 91 ff 43 	brne	8000a1ba <Store_Image_1+0x7a>
8000a338:	ca fb       	rjmp	8000a296 <Store_Image_1+0x156>
8000a33a:	00 00       	add	r0,r0
8000a33c:	00 00       	add	r0,r0
8000a33e:	1a a4       	st.w	sp++,r4
8000a340:	80 00       	ld.sh	r0,r0[0x0]
8000a342:	90 18       	ld.sh	r8,r8[0x2]
8000a344:	80 00       	ld.sh	r0,r0[0x0]
8000a346:	68 4c       	ld.w	r12,r4[0x10]
8000a348:	80 01       	ld.sh	r1,r0[0x0]
8000a34a:	28 d8       	sub	r8,-115
8000a34c:	80 00       	ld.sh	r0,r0[0x0]
8000a34e:	c9 08       	rjmp	8000a46e <FIFO_Init+0x6>
8000a350:	80 00       	ld.sh	r0,r0[0x0]
8000a352:	68 1c       	ld.w	r12,r4[0x4]
8000a354:	80 00       	ld.sh	r0,r0[0x0]
8000a356:	32 26       	mov	r6,34
8000a358:	80 00       	ld.sh	r0,r0[0x0]
8000a35a:	32 0a       	mov	r10,32
8000a35c:	80 00       	ld.sh	r0,r0[0x0]
8000a35e:	ae e4       	st.b	r7[0x6],r4
8000a360:	80 00       	ld.sh	r0,r0[0x0]
8000a362:	77 68       	ld.w	r8,r11[0x58]

8000a364 <FIFO_Reset>:
	delay_us(10);
	FIFO_1_WRST_SET;
}

void FIFO_Reset(uint8_t CameraID)
{
8000a364:	eb cd 40 80 	pushm	r7,lr
8000a368:	18 97       	mov	r7,r12
	FIFO_0_nOE_SET;
8000a36a:	31 cc       	mov	r12,28
8000a36c:	f0 1f 00 2e 	mcall	8000a424 <FIFO_Reset+0xc0>
	FIFO_1_nOE_SET;
8000a370:	31 bc       	mov	r12,27
8000a372:	f0 1f 00 2d 	mcall	8000a424 <FIFO_Reset+0xc0>
	if(CameraID & CAMERA_LEFT)
8000a376:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
8000a37a:	c1 f0       	breq	8000a3b8 <FIFO_Reset+0x54>
	{
		FIFO_0_WRST_CLR;
8000a37c:	31 5c       	mov	r12,21
8000a37e:	f0 1f 00 2b 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_0_nRRST_CLR;
8000a382:	30 fc       	mov	r12,15
8000a384:	f0 1f 00 29 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_0_RCLK_SET;
8000a388:	31 3c       	mov	r12,19
8000a38a:	f0 1f 00 27 	mcall	8000a424 <FIFO_Reset+0xc0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a38e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a392:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a396:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a39a:	14 38       	cp.w	r8,r10
8000a39c:	e0 88 00 08 	brls	8000a3ac <FIFO_Reset+0x48>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a3a0:	12 38       	cp.w	r8,r9
8000a3a2:	fe 98 ff fa 	brls	8000a396 <FIFO_Reset+0x32>
8000a3a6:	12 3a       	cp.w	r10,r9
8000a3a8:	c2 93       	brcs	8000a3fa <FIFO_Reset+0x96>
8000a3aa:	cf 6b       	rjmp	8000a396 <FIFO_Reset+0x32>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a3ac:	12 38       	cp.w	r8,r9
8000a3ae:	e0 8b 00 26 	brhi	8000a3fa <FIFO_Reset+0x96>
8000a3b2:	12 3a       	cp.w	r10,r9
8000a3b4:	c2 33       	brcs	8000a3fa <FIFO_Reset+0x96>
8000a3b6:	cf 0b       	rjmp	8000a396 <FIFO_Reset+0x32>
		delay_us(10);
		FIFO_0_RCLK_CLR;
		FIFO_0_nRRST_SET;
		FIFO_0_WRST_SET;
	}
	if(CameraID & CAMERA_RIGHT)
8000a3b8:	e2 17 00 02 	andl	r7,0x2,COH
8000a3bc:	c3 20       	breq	8000a420 <FIFO_Reset+0xbc>
	{
		FIFO_1_WRST_CLR;
8000a3be:	31 9c       	mov	r12,25
8000a3c0:	f0 1f 00 1a 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_1_nRRST_CLR;
8000a3c4:	31 6c       	mov	r12,22
8000a3c6:	f0 1f 00 19 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_1_RCLK_SET;
8000a3ca:	31 7c       	mov	r12,23
8000a3cc:	f0 1f 00 16 	mcall	8000a424 <FIFO_Reset+0xc0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a3d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a3d4:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a3d8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a3dc:	14 38       	cp.w	r8,r10
8000a3de:	e0 88 00 08 	brls	8000a3ee <FIFO_Reset+0x8a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a3e2:	12 38       	cp.w	r8,r9
8000a3e4:	fe 98 ff fa 	brls	8000a3d8 <FIFO_Reset+0x74>
8000a3e8:	12 3a       	cp.w	r10,r9
8000a3ea:	c1 23       	brcs	8000a40e <FIFO_Reset+0xaa>
8000a3ec:	cf 6b       	rjmp	8000a3d8 <FIFO_Reset+0x74>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a3ee:	12 38       	cp.w	r8,r9
8000a3f0:	e0 8b 00 0f 	brhi	8000a40e <FIFO_Reset+0xaa>
8000a3f4:	12 3a       	cp.w	r10,r9
8000a3f6:	c0 c3       	brcs	8000a40e <FIFO_Reset+0xaa>
8000a3f8:	cf 0b       	rjmp	8000a3d8 <FIFO_Reset+0x74>
	{
		FIFO_0_WRST_CLR;
		FIFO_0_nRRST_CLR;
		FIFO_0_RCLK_SET;
		delay_us(10);
		FIFO_0_RCLK_CLR;
8000a3fa:	31 3c       	mov	r12,19
8000a3fc:	f0 1f 00 0b 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_0_nRRST_SET;
8000a400:	30 fc       	mov	r12,15
8000a402:	f0 1f 00 09 	mcall	8000a424 <FIFO_Reset+0xc0>
		FIFO_0_WRST_SET;
8000a406:	31 5c       	mov	r12,21
8000a408:	f0 1f 00 07 	mcall	8000a424 <FIFO_Reset+0xc0>
8000a40c:	cd 6b       	rjmp	8000a3b8 <FIFO_Reset+0x54>
	{
		FIFO_1_WRST_CLR;
		FIFO_1_nRRST_CLR;
		FIFO_1_RCLK_SET;
		delay_us(10);
		FIFO_1_RCLK_CLR;
8000a40e:	31 7c       	mov	r12,23
8000a410:	f0 1f 00 06 	mcall	8000a428 <FIFO_Reset+0xc4>
		FIFO_1_nRRST_SET;
8000a414:	31 6c       	mov	r12,22
8000a416:	f0 1f 00 04 	mcall	8000a424 <FIFO_Reset+0xc0>
		FIFO_1_WRST_SET;
8000a41a:	31 9c       	mov	r12,25
8000a41c:	f0 1f 00 02 	mcall	8000a424 <FIFO_Reset+0xc0>
8000a420:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a424:	80 00       	ld.sh	r0,r0[0x0]
8000a426:	32 0a       	mov	r10,32
8000a428:	80 00       	ld.sh	r0,r0[0x0]
8000a42a:	32 26       	mov	r6,34

8000a42c <Store_Both_Images>:
}



bool Store_Both_Images()
{
8000a42c:	d4 01       	pushm	lr
	if(Photos_Ready() == false)
8000a42e:	f0 1f 00 0a 	mcall	8000a454 <Store_Both_Images+0x28>
8000a432:	c1 00       	breq	8000a452 <Store_Both_Images+0x26>
		return false;
	
	Store_Image_1();
8000a434:	f0 1f 00 09 	mcall	8000a458 <Store_Both_Images+0x2c>
	FIFO_Reset(CAMERA_RIGHT);
8000a438:	30 2c       	mov	r12,2
8000a43a:	f0 1f 00 09 	mcall	8000a45c <Store_Both_Images+0x30>
	
	Store_Image_0();
8000a43e:	f0 1f 00 09 	mcall	8000a460 <Store_Both_Images+0x34>
	FIFO_Reset(CAMERA_LEFT);
8000a442:	30 1c       	mov	r12,1
8000a444:	f0 1f 00 06 	mcall	8000a45c <Store_Both_Images+0x30>
	
	OV7670_Status.VSYNC0_State = IDLE;
8000a448:	48 78       	lddpc	r8,8000a464 <Store_Both_Images+0x38>
8000a44a:	30 09       	mov	r9,0
8000a44c:	b0 d9       	st.b	r8[0x5],r9
	OV7670_Status.VSYNC1_State = IDLE;
8000a44e:	b0 e9       	st.b	r8[0x6],r9
8000a450:	30 1c       	mov	r12,1
	return true;
}
8000a452:	d8 02       	popm	pc
8000a454:	80 00       	ld.sh	r0,r0[0x0]
8000a456:	9e b0       	ld.uh	r0,pc[0x6]
8000a458:	80 00       	ld.sh	r0,r0[0x0]
8000a45a:	a1 40       	asr	r0,0x0
8000a45c:	80 00       	ld.sh	r0,r0[0x0]
8000a45e:	a3 64       	lsl	r4,0x2
8000a460:	80 00       	ld.sh	r0,r0[0x0]
8000a462:	9f 10       	st.w	pc[0x4],r0
8000a464:	00 00       	add	r0,r0
8000a466:	1a 86       	andn	r6,sp

8000a468 <FIFO_Init>:
	FIFO_Init();
	Enable_global_interrupt();
	
}
void FIFO_Init()
{
8000a468:	d4 01       	pushm	lr
	//Disable both outputs
	FIFO_0_nOE_SET
8000a46a:	31 cc       	mov	r12,28
8000a46c:	f0 1f 00 97 	mcall	8000a6c8 <FIFO_Init+0x260>
	FIFO_1_nOE_SET
8000a470:	31 bc       	mov	r12,27
8000a472:	f0 1f 00 96 	mcall	8000a6c8 <FIFO_Init+0x260>
	
	//Reset Buffer 0
	FIFO_0_WRST_CLR;
8000a476:	31 5c       	mov	r12,21
8000a478:	f0 1f 00 95 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_0_RCLK_CLR;
8000a47c:	31 3c       	mov	r12,19
8000a47e:	f0 1f 00 94 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
8000a482:	30 fc       	mov	r12,15
8000a484:	f0 1f 00 91 	mcall	8000a6c8 <FIFO_Init+0x260>
	FIFO_0_WEN_CLR;
8000a488:	31 4c       	mov	r12,20
8000a48a:	f0 1f 00 91 	mcall	8000a6cc <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a48e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a492:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a496:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a49a:	14 38       	cp.w	r8,r10
8000a49c:	e0 88 00 09 	brls	8000a4ae <FIFO_Init+0x46>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a4a0:	12 38       	cp.w	r8,r9
8000a4a2:	fe 98 ff fa 	brls	8000a496 <FIFO_Init+0x2e>
8000a4a6:	12 3a       	cp.w	r10,r9
8000a4a8:	e0 83 00 ac 	brlo	8000a600 <FIFO_Init+0x198>
8000a4ac:	cf 5b       	rjmp	8000a496 <FIFO_Init+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a4ae:	12 38       	cp.w	r8,r9
8000a4b0:	e0 8b 00 a8 	brhi	8000a600 <FIFO_Init+0x198>
8000a4b4:	12 3a       	cp.w	r10,r9
8000a4b6:	e0 83 00 a5 	brlo	8000a600 <FIFO_Init+0x198>
8000a4ba:	ce eb       	rjmp	8000a496 <FIFO_Init+0x2e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a4bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a4c0:	14 38       	cp.w	r8,r10
8000a4c2:	e0 88 00 09 	brls	8000a4d4 <FIFO_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a4c6:	12 38       	cp.w	r8,r9
8000a4c8:	fe 98 ff fa 	brls	8000a4bc <FIFO_Init+0x54>
8000a4cc:	12 3a       	cp.w	r10,r9
8000a4ce:	e0 83 00 a1 	brlo	8000a610 <FIFO_Init+0x1a8>
8000a4d2:	cf 5b       	rjmp	8000a4bc <FIFO_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a4d4:	12 38       	cp.w	r8,r9
8000a4d6:	e0 8b 00 9d 	brhi	8000a610 <FIFO_Init+0x1a8>
8000a4da:	12 3a       	cp.w	r10,r9
8000a4dc:	e0 83 00 9a 	brlo	8000a610 <FIFO_Init+0x1a8>
8000a4e0:	ce eb       	rjmp	8000a4bc <FIFO_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a4e2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a4e6:	14 38       	cp.w	r8,r10
8000a4e8:	e0 88 00 09 	brls	8000a4fa <FIFO_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a4ec:	12 38       	cp.w	r8,r9
8000a4ee:	fe 98 ff fa 	brls	8000a4e2 <FIFO_Init+0x7a>
8000a4f2:	12 3a       	cp.w	r10,r9
8000a4f4:	e0 83 00 99 	brlo	8000a626 <FIFO_Init+0x1be>
8000a4f8:	cf 5b       	rjmp	8000a4e2 <FIFO_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a4fa:	12 38       	cp.w	r8,r9
8000a4fc:	e0 8b 00 95 	brhi	8000a626 <FIFO_Init+0x1be>
8000a500:	12 3a       	cp.w	r10,r9
8000a502:	e0 83 00 92 	brlo	8000a626 <FIFO_Init+0x1be>
8000a506:	ce eb       	rjmp	8000a4e2 <FIFO_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a508:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a50c:	14 38       	cp.w	r8,r10
8000a50e:	e0 88 00 09 	brls	8000a520 <FIFO_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a512:	12 38       	cp.w	r8,r9
8000a514:	fe 98 ff fa 	brls	8000a508 <FIFO_Init+0xa0>
8000a518:	12 3a       	cp.w	r10,r9
8000a51a:	e0 83 00 8e 	brlo	8000a636 <FIFO_Init+0x1ce>
8000a51e:	cf 5b       	rjmp	8000a508 <FIFO_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a520:	12 38       	cp.w	r8,r9
8000a522:	e0 8b 00 8a 	brhi	8000a636 <FIFO_Init+0x1ce>
8000a526:	12 3a       	cp.w	r10,r9
8000a528:	e0 83 00 87 	brlo	8000a636 <FIFO_Init+0x1ce>
8000a52c:	ce eb       	rjmp	8000a508 <FIFO_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a52e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a532:	14 38       	cp.w	r8,r10
8000a534:	e0 88 00 09 	brls	8000a546 <FIFO_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a538:	12 38       	cp.w	r8,r9
8000a53a:	fe 98 ff fa 	brls	8000a52e <FIFO_Init+0xc6>
8000a53e:	12 3a       	cp.w	r10,r9
8000a540:	e0 83 00 86 	brlo	8000a64c <FIFO_Init+0x1e4>
8000a544:	cf 5b       	rjmp	8000a52e <FIFO_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a546:	12 38       	cp.w	r8,r9
8000a548:	e0 8b 00 82 	brhi	8000a64c <FIFO_Init+0x1e4>
8000a54c:	12 3a       	cp.w	r10,r9
8000a54e:	c7 f3       	brcs	8000a64c <FIFO_Init+0x1e4>
8000a550:	ce fb       	rjmp	8000a52e <FIFO_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a552:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a556:	14 38       	cp.w	r8,r10
8000a558:	e0 88 00 09 	brls	8000a56a <FIFO_Init+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a55c:	12 38       	cp.w	r8,r9
8000a55e:	fe 98 ff fa 	brls	8000a552 <FIFO_Init+0xea>
8000a562:	12 3a       	cp.w	r10,r9
8000a564:	e0 83 00 88 	brlo	8000a674 <FIFO_Init+0x20c>
8000a568:	cf 5b       	rjmp	8000a552 <FIFO_Init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a56a:	12 38       	cp.w	r8,r9
8000a56c:	e0 8b 00 84 	brhi	8000a674 <FIFO_Init+0x20c>
8000a570:	12 3a       	cp.w	r10,r9
8000a572:	e0 83 00 81 	brlo	8000a674 <FIFO_Init+0x20c>
8000a576:	ce eb       	rjmp	8000a552 <FIFO_Init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a578:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a57c:	14 38       	cp.w	r8,r10
8000a57e:	e0 88 00 08 	brls	8000a58e <FIFO_Init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a582:	12 38       	cp.w	r8,r9
8000a584:	fe 98 ff fa 	brls	8000a578 <FIFO_Init+0x110>
8000a588:	12 3a       	cp.w	r10,r9
8000a58a:	c7 d3       	brcs	8000a684 <FIFO_Init+0x21c>
8000a58c:	cf 6b       	rjmp	8000a578 <FIFO_Init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a58e:	12 38       	cp.w	r8,r9
8000a590:	e0 8b 00 7a 	brhi	8000a684 <FIFO_Init+0x21c>
8000a594:	12 3a       	cp.w	r10,r9
8000a596:	c7 73       	brcs	8000a684 <FIFO_Init+0x21c>
8000a598:	cf 0b       	rjmp	8000a578 <FIFO_Init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a59a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a59e:	14 38       	cp.w	r8,r10
8000a5a0:	e0 88 00 08 	brls	8000a5b0 <FIFO_Init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a5a4:	12 38       	cp.w	r8,r9
8000a5a6:	fe 98 ff fa 	brls	8000a59a <FIFO_Init+0x132>
8000a5aa:	12 3a       	cp.w	r10,r9
8000a5ac:	c7 73       	brcs	8000a69a <FIFO_Init+0x232>
8000a5ae:	cf 6b       	rjmp	8000a59a <FIFO_Init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a5b0:	12 38       	cp.w	r8,r9
8000a5b2:	e0 8b 00 74 	brhi	8000a69a <FIFO_Init+0x232>
8000a5b6:	12 3a       	cp.w	r10,r9
8000a5b8:	c7 13       	brcs	8000a69a <FIFO_Init+0x232>
8000a5ba:	cf 0b       	rjmp	8000a59a <FIFO_Init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a5bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a5c0:	14 38       	cp.w	r8,r10
8000a5c2:	e0 88 00 08 	brls	8000a5d2 <FIFO_Init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a5c6:	12 38       	cp.w	r8,r9
8000a5c8:	fe 98 ff fa 	brls	8000a5bc <FIFO_Init+0x154>
8000a5cc:	12 3a       	cp.w	r10,r9
8000a5ce:	c6 e3       	brcs	8000a6aa <FIFO_Init+0x242>
8000a5d0:	cf 6b       	rjmp	8000a5bc <FIFO_Init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a5d2:	12 38       	cp.w	r8,r9
8000a5d4:	e0 8b 00 6b 	brhi	8000a6aa <FIFO_Init+0x242>
8000a5d8:	12 3a       	cp.w	r10,r9
8000a5da:	c6 83       	brcs	8000a6aa <FIFO_Init+0x242>
8000a5dc:	cf 0b       	rjmp	8000a5bc <FIFO_Init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a5de:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a5e2:	14 38       	cp.w	r8,r10
8000a5e4:	e0 88 00 08 	brls	8000a5f4 <FIFO_Init+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a5e8:	12 38       	cp.w	r8,r9
8000a5ea:	fe 98 ff fa 	brls	8000a5de <FIFO_Init+0x176>
8000a5ee:	12 3a       	cp.w	r10,r9
8000a5f0:	c6 83       	brcs	8000a6c0 <FIFO_Init+0x258>
8000a5f2:	cf 6b       	rjmp	8000a5de <FIFO_Init+0x176>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a5f4:	12 38       	cp.w	r8,r9
8000a5f6:	e0 8b 00 65 	brhi	8000a6c0 <FIFO_Init+0x258>
8000a5fa:	12 3a       	cp.w	r10,r9
8000a5fc:	c6 23       	brcs	8000a6c0 <FIFO_Init+0x258>
8000a5fe:	cf 0b       	rjmp	8000a5de <FIFO_Init+0x176>
	delay_us(10);
	FIFO_0_RCLK_SET;
8000a600:	31 3c       	mov	r12,19
8000a602:	f0 1f 00 32 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a606:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a60a:	f0 ca ff 60 	sub	r10,r8,-160
8000a60e:	c5 7b       	rjmp	8000a4bc <FIFO_Init+0x54>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000a610:	31 3c       	mov	r12,19
8000a612:	f0 1f 00 2f 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_0_nRRST_CLR;
8000a616:	30 fc       	mov	r12,15
8000a618:	f0 1f 00 2d 	mcall	8000a6cc <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a61c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a620:	f0 ca ff 60 	sub	r10,r8,-160
8000a624:	c5 fb       	rjmp	8000a4e2 <FIFO_Init+0x7a>
	delay_us(10);
	FIFO_0_RCLK_SET;
8000a626:	31 3c       	mov	r12,19
8000a628:	f0 1f 00 28 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a62c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a630:	f0 ca ff 60 	sub	r10,r8,-160
8000a634:	c6 ab       	rjmp	8000a508 <FIFO_Init+0xa0>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000a636:	31 3c       	mov	r12,19
8000a638:	f0 1f 00 25 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
8000a63c:	30 fc       	mov	r12,15
8000a63e:	f0 1f 00 23 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a642:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a646:	f0 ca ff 60 	sub	r10,r8,-160
8000a64a:	c7 2b       	rjmp	8000a52e <FIFO_Init+0xc6>
	delay_us(10);
	FIFO_0_WRST_SET;
8000a64c:	31 5c       	mov	r12,21
8000a64e:	f0 1f 00 1f 	mcall	8000a6c8 <FIFO_Init+0x260>
	
	//Reset Buffer 1
	FIFO_1_WRST_CLR;
8000a652:	31 9c       	mov	r12,25
8000a654:	f0 1f 00 1e 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_1_RCLK_CLR;
8000a658:	31 7c       	mov	r12,23
8000a65a:	f0 1f 00 1d 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
8000a65e:	31 6c       	mov	r12,22
8000a660:	f0 1f 00 1a 	mcall	8000a6c8 <FIFO_Init+0x260>
	FIFO_1_WEN_CLR;
8000a664:	31 8c       	mov	r12,24
8000a666:	f0 1f 00 1a 	mcall	8000a6cc <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a66a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a66e:	f0 ca ff 60 	sub	r10,r8,-160
8000a672:	c7 0b       	rjmp	8000a552 <FIFO_Init+0xea>
	delay_us(10);
	FIFO_1_RCLK_SET;
8000a674:	31 7c       	mov	r12,23
8000a676:	f0 1f 00 15 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a67a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a67e:	f0 ca ff 60 	sub	r10,r8,-160
8000a682:	c7 bb       	rjmp	8000a578 <FIFO_Init+0x110>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000a684:	31 3c       	mov	r12,19
8000a686:	f0 1f 00 12 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_1_nRRST_CLR;
8000a68a:	31 6c       	mov	r12,22
8000a68c:	f0 1f 00 10 	mcall	8000a6cc <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a690:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a694:	f0 ca ff 60 	sub	r10,r8,-160
8000a698:	c8 1b       	rjmp	8000a59a <FIFO_Init+0x132>
	delay_us(10);
	FIFO_1_RCLK_SET;
8000a69a:	31 7c       	mov	r12,23
8000a69c:	f0 1f 00 0b 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a6a0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a6a4:	f0 ca ff 60 	sub	r10,r8,-160
8000a6a8:	c8 ab       	rjmp	8000a5bc <FIFO_Init+0x154>
	delay_us(10);
	FIFO_1_RCLK_CLR;
8000a6aa:	31 7c       	mov	r12,23
8000a6ac:	f0 1f 00 08 	mcall	8000a6cc <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
8000a6b0:	31 6c       	mov	r12,22
8000a6b2:	f0 1f 00 06 	mcall	8000a6c8 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a6b6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a6ba:	f0 ca ff 60 	sub	r10,r8,-160
8000a6be:	c9 0b       	rjmp	8000a5de <FIFO_Init+0x176>
	delay_us(10);
	FIFO_1_WRST_SET;
8000a6c0:	31 9c       	mov	r12,25
8000a6c2:	f0 1f 00 02 	mcall	8000a6c8 <FIFO_Init+0x260>
}
8000a6c6:	d8 02       	popm	pc
8000a6c8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ca:	32 0a       	mov	r10,32
8000a6cc:	80 00       	ld.sh	r0,r0[0x0]
8000a6ce:	32 26       	mov	r6,34

8000a6d0 <TakePhoto>:
	}
	
}

int TakePhoto(uint8_t Cameras)
{
8000a6d0:	d4 01       	pushm	lr
	
	//Only want to take pictures on cameras found
	if(((OV7670_Status.VSYNC0_State != IDLE) || !OV7670_Status.Camera_0_Found) && ((OV7670_Status.VSYNC1_State != IDLE) || !OV7670_Status.Camera_1_Found))
8000a6d2:	49 f8       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a6d4:	11 d9       	ld.ub	r9,r8[0x5]
8000a6d6:	30 08       	mov	r8,0
8000a6d8:	f0 09 18 00 	cp.b	r9,r8
8000a6dc:	c0 71       	brne	8000a6ea <TakePhoto+0x1a>
8000a6de:	49 c8       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a6e0:	11 99       	ld.ub	r9,r8[0x1]
8000a6e2:	30 08       	mov	r8,0
8000a6e4:	f0 09 18 00 	cp.b	r9,r8
8000a6e8:	c0 d1       	brne	8000a702 <TakePhoto+0x32>
8000a6ea:	49 98       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a6ec:	11 e9       	ld.ub	r9,r8[0x6]
8000a6ee:	30 08       	mov	r8,0
8000a6f0:	f0 09 18 00 	cp.b	r9,r8
8000a6f4:	c2 91       	brne	8000a746 <TakePhoto+0x76>
8000a6f6:	49 68       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a6f8:	11 a9       	ld.ub	r9,r8[0x2]
8000a6fa:	30 08       	mov	r8,0
8000a6fc:	f0 09 18 00 	cp.b	r9,r8
8000a700:	c2 30       	breq	8000a746 <TakePhoto+0x76>
		return CAMERAS_BUSY; //wait for cameras to be idle if they are found
	
	if(Cameras & CAMERA_LEFT)
8000a702:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
8000a706:	c0 40       	breq	8000a70e <TakePhoto+0x3e>
		OV7670_Status.VSYNC0_State = TAKE_PHOTO;
8000a708:	30 19       	mov	r9,1
8000a70a:	49 18       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a70c:	b0 d9       	st.b	r8[0x5],r9
		
	if(Cameras & CAMERA_RIGHT)
8000a70e:	e2 1c 00 02 	andl	r12,0x2,COH
8000a712:	c0 40       	breq	8000a71a <TakePhoto+0x4a>
		OV7670_Status.VSYNC1_State = TAKE_PHOTO;
8000a714:	30 19       	mov	r9,1
8000a716:	48 e8       	lddpc	r8,8000a74c <TakePhoto+0x7c>
8000a718:	b0 e9       	st.b	r8[0x6],r9
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
8000a71a:	30 1b       	mov	r11,1
8000a71c:	fe 7c 14 00 	mov	r12,-60416
8000a720:	f0 1f 00 0c 	mcall	8000a750 <TakePhoto+0x80>
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
8000a724:	30 4b       	mov	r11,4
8000a726:	fe 7c 14 00 	mov	r12,-60416
8000a72a:	f0 1f 00 0a 	mcall	8000a750 <TakePhoto+0x80>
	VSYNC_0_ENABLE_INTERRUPT;
8000a72e:	30 4b       	mov	r11,4
8000a730:	fe 7c 14 00 	mov	r12,-60416
8000a734:	f0 1f 00 08 	mcall	8000a754 <TakePhoto+0x84>
	VSYNC_1_ENABLE_INTERRUPT;
8000a738:	30 1b       	mov	r11,1
8000a73a:	fe 7c 14 00 	mov	r12,-60416
8000a73e:	f0 1f 00 06 	mcall	8000a754 <TakePhoto+0x84>
8000a742:	30 2c       	mov	r12,2
	
	return TAKING_PHOTO;
8000a744:	d8 02       	popm	pc
8000a746:	30 4c       	mov	r12,4
	
}
8000a748:	d8 02       	popm	pc
8000a74a:	00 00       	add	r0,r0
8000a74c:	00 00       	add	r0,r0
8000a74e:	1a 86       	andn	r6,sp
8000a750:	80 00       	ld.sh	r0,r0[0x0]
8000a752:	30 30       	mov	r0,3
8000a754:	80 00       	ld.sh	r0,r0[0x0]
8000a756:	30 26       	mov	r6,2

8000a758 <VSYNC0_Handler>:
// /*#include "CustomDevices/MotorDriver.h"*/
// SDCard
// #include "CustomDevices/SD_Card.h"

__attribute__((__interrupt__)) static void VSYNC0_Handler (void)
{
8000a758:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC0 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
8000a75a:	30 4b       	mov	r11,4
8000a75c:	fe 7c 14 00 	mov	r12,-60416
8000a760:	f0 1f 00 18 	mcall	8000a7c0 <VSYNC0_Handler+0x68>
	//VSYNC_0_DISABLE_INTERRUPT;
	switch(OV7670_Status.VSYNC0_State)
8000a764:	49 88       	lddpc	r8,8000a7c4 <VSYNC0_Handler+0x6c>
8000a766:	11 d8       	ld.ub	r8,r8[0x5]
8000a768:	30 29       	mov	r9,2
8000a76a:	f2 08 18 00 	cp.b	r8,r9
8000a76e:	c1 00       	breq	8000a78e <VSYNC0_Handler+0x36>
8000a770:	30 39       	mov	r9,3
8000a772:	f2 08 18 00 	cp.b	r8,r9
8000a776:	c1 30       	breq	8000a79c <VSYNC0_Handler+0x44>
8000a778:	30 19       	mov	r9,1
8000a77a:	f2 08 18 00 	cp.b	r8,r9
8000a77e:	c1 31       	brne	8000a7a4 <VSYNC0_Handler+0x4c>
	{
		case(TAKE_PHOTO):
			FIFO_0_WEN_SET;
8000a780:	31 4c       	mov	r12,20
8000a782:	f0 1f 00 12 	mcall	8000a7c8 <VSYNC0_Handler+0x70>
			OV7670_Status.VSYNC0_State = TAKING_PHOTO;
8000a786:	30 29       	mov	r9,2
8000a788:	48 f8       	lddpc	r8,8000a7c4 <VSYNC0_Handler+0x6c>
8000a78a:	b0 d9       	st.b	r8[0x5],r9
			break;
8000a78c:	c1 78       	rjmp	8000a7ba <VSYNC0_Handler+0x62>
			
		case(TAKING_PHOTO):
			FIFO_0_WEN_CLR;
8000a78e:	31 4c       	mov	r12,20
8000a790:	f0 1f 00 0f 	mcall	8000a7cc <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = TAKEN_PHOTO;
8000a794:	30 39       	mov	r9,3
8000a796:	48 c8       	lddpc	r8,8000a7c4 <VSYNC0_Handler+0x6c>
8000a798:	b0 d9       	st.b	r8[0x5],r9
			break;
8000a79a:	c1 08       	rjmp	8000a7ba <VSYNC0_Handler+0x62>
		
		case (TAKEN_PHOTO):
			FIFO_0_WEN_CLR;
8000a79c:	31 4c       	mov	r12,20
8000a79e:	f0 1f 00 0c 	mcall	8000a7cc <VSYNC0_Handler+0x74>
			break;
8000a7a2:	c0 c8       	rjmp	8000a7ba <VSYNC0_Handler+0x62>
			
		case(IDLE):
		default:
			VSYNC_0_DISABLE_INTERRUPT;
8000a7a4:	30 4b       	mov	r11,4
8000a7a6:	fe 7c 14 00 	mov	r12,-60416
8000a7aa:	f0 1f 00 0a 	mcall	8000a7d0 <VSYNC0_Handler+0x78>
			FIFO_0_WEN_CLR;
8000a7ae:	31 4c       	mov	r12,20
8000a7b0:	f0 1f 00 07 	mcall	8000a7cc <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = IDLE;
8000a7b4:	30 09       	mov	r9,0
8000a7b6:	48 48       	lddpc	r8,8000a7c4 <VSYNC0_Handler+0x6c>
8000a7b8:	b0 d9       	st.b	r8[0x5],r9
			break;
	}
}
8000a7ba:	d4 02       	popm	lr
8000a7bc:	d6 03       	rete
8000a7be:	00 00       	add	r0,r0
8000a7c0:	80 00       	ld.sh	r0,r0[0x0]
8000a7c2:	30 30       	mov	r0,3
8000a7c4:	00 00       	add	r0,r0
8000a7c6:	1a 86       	andn	r6,sp
8000a7c8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ca:	32 0a       	mov	r10,32
8000a7cc:	80 00       	ld.sh	r0,r0[0x0]
8000a7ce:	32 26       	mov	r6,34
8000a7d0:	80 00       	ld.sh	r0,r0[0x0]
8000a7d2:	30 46       	mov	r6,4

8000a7d4 <VSYNC1_Handler>:

__attribute__((__interrupt__)) static void VSYNC1_Handler (void)
{
8000a7d4:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC1 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
8000a7d6:	30 1b       	mov	r11,1
8000a7d8:	fe 7c 14 00 	mov	r12,-60416
8000a7dc:	f0 1f 00 18 	mcall	8000a83c <VSYNC1_Handler+0x68>
	//VSYNC_1_DISABLE_INTERRUPT;
		switch(OV7670_Status.VSYNC1_State)
8000a7e0:	49 88       	lddpc	r8,8000a840 <VSYNC1_Handler+0x6c>
8000a7e2:	11 e8       	ld.ub	r8,r8[0x6]
8000a7e4:	30 29       	mov	r9,2
8000a7e6:	f2 08 18 00 	cp.b	r8,r9
8000a7ea:	c1 00       	breq	8000a80a <VSYNC1_Handler+0x36>
8000a7ec:	30 39       	mov	r9,3
8000a7ee:	f2 08 18 00 	cp.b	r8,r9
8000a7f2:	c1 30       	breq	8000a818 <VSYNC1_Handler+0x44>
8000a7f4:	30 19       	mov	r9,1
8000a7f6:	f2 08 18 00 	cp.b	r8,r9
8000a7fa:	c1 31       	brne	8000a820 <VSYNC1_Handler+0x4c>
		{
			case(TAKE_PHOTO):
			FIFO_1_WEN_SET;
8000a7fc:	31 8c       	mov	r12,24
8000a7fe:	f0 1f 00 12 	mcall	8000a844 <VSYNC1_Handler+0x70>
			OV7670_Status.VSYNC1_State = TAKING_PHOTO;
8000a802:	30 29       	mov	r9,2
8000a804:	48 f8       	lddpc	r8,8000a840 <VSYNC1_Handler+0x6c>
8000a806:	b0 e9       	st.b	r8[0x6],r9
			//print_dbg("\n\rCase: Take Photo;");
			break;
8000a808:	c1 78       	rjmp	8000a836 <VSYNC1_Handler+0x62>
			
			case(TAKING_PHOTO):
			FIFO_1_WEN_CLR;
8000a80a:	31 8c       	mov	r12,24
8000a80c:	f0 1f 00 0f 	mcall	8000a848 <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = TAKEN_PHOTO;
8000a810:	30 39       	mov	r9,3
8000a812:	48 c8       	lddpc	r8,8000a840 <VSYNC1_Handler+0x6c>
8000a814:	b0 e9       	st.b	r8[0x6],r9
			//print_dbg("\n\rCase: Taking Photo;");
			break;
8000a816:	c1 08       	rjmp	8000a836 <VSYNC1_Handler+0x62>
			
			case (TAKEN_PHOTO):
			FIFO_1_WEN_CLR;
8000a818:	31 8c       	mov	r12,24
8000a81a:	f0 1f 00 0c 	mcall	8000a848 <VSYNC1_Handler+0x74>
			//print_dbg("\n\rCase: Taken Photo;");
			break;
8000a81e:	c0 c8       	rjmp	8000a836 <VSYNC1_Handler+0x62>
			
			case(IDLE):
			default:
			VSYNC_1_DISABLE_INTERRUPT;
8000a820:	30 1b       	mov	r11,1
8000a822:	fe 7c 14 00 	mov	r12,-60416
8000a826:	f0 1f 00 0a 	mcall	8000a84c <VSYNC1_Handler+0x78>
			FIFO_1_WEN_CLR;
8000a82a:	31 8c       	mov	r12,24
8000a82c:	f0 1f 00 07 	mcall	8000a848 <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = IDLE;
8000a830:	30 09       	mov	r9,0
8000a832:	48 48       	lddpc	r8,8000a840 <VSYNC1_Handler+0x6c>
8000a834:	b0 e9       	st.b	r8[0x6],r9
			//print_dbg("\n\rCase: Idle;");
			break;
		}
}
8000a836:	d4 02       	popm	lr
8000a838:	d6 03       	rete
8000a83a:	00 00       	add	r0,r0
8000a83c:	80 00       	ld.sh	r0,r0[0x0]
8000a83e:	30 30       	mov	r0,3
8000a840:	00 00       	add	r0,r0
8000a842:	1a 86       	andn	r6,sp
8000a844:	80 00       	ld.sh	r0,r0[0x0]
8000a846:	32 0a       	mov	r10,32
8000a848:	80 00       	ld.sh	r0,r0[0x0]
8000a84a:	32 26       	mov	r6,34
8000a84c:	80 00       	ld.sh	r0,r0[0x0]
8000a84e:	30 46       	mov	r6,4

8000a850 <Write_Reg>:
unsigned char Write_Reg(unsigned char Register, unsigned char Data)
{
8000a850:	d4 01       	pushm	lr
8000a852:	20 1d       	sub	sp,4
	/*	I2C Traffic Generated:
	 *	S | OV_7670 + W | A | RegID | A | Data | A | P |
	 */
	uint8_t Buff[2] = {Register, Data};
8000a854:	ba 8c       	st.b	sp[0x0],r12
8000a856:	ba 9b       	st.b	sp[0x1],r11
	int status = twim_write(&AVR32_TWIM0, &Buff, 2, OV7670_ADDR, false);
8000a858:	30 08       	mov	r8,0
8000a85a:	32 19       	mov	r9,33
8000a85c:	30 2a       	mov	r10,2
8000a85e:	1a 9b       	mov	r11,sp
8000a860:	fe 7c 38 00 	mov	r12,-51200
8000a864:	f0 1f 00 03 	mcall	8000a870 <Write_Reg+0x20>
	return status;
}
8000a868:	5c 5c       	castu.b	r12
8000a86a:	2f fd       	sub	sp,-4
8000a86c:	d8 02       	popm	pc
8000a86e:	00 00       	add	r0,r0
8000a870:	80 00       	ld.sh	r0,r0[0x0]
8000a872:	3c 70       	mov	r0,-57

8000a874 <OV7670_Init>:
	
	return status;
	
}
void OV7670_Init()
{
8000a874:	eb cd 40 c0 	pushm	r6-r7,lr
8000a878:	20 2d       	sub	sp,8
	
	//Check Cameras Exist
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
8000a87a:	30 4c       	mov	r12,4
8000a87c:	f0 1f 00 97 	mcall	8000aad8 <OV7670_Init+0x264>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
8000a880:	32 1b       	mov	r11,33
8000a882:	fe 7c 38 00 	mov	r12,-51200
8000a886:	f0 1f 00 96 	mcall	8000aadc <OV7670_Init+0x268>
8000a88a:	c0 61       	brne	8000a896 <OV7670_Init+0x22>
		OV7670_Status.Camera_0_Found = true;
8000a88c:	30 19       	mov	r9,1
8000a88e:	fe f8 02 52 	ld.w	r8,pc[594]
8000a892:	b0 99       	st.b	r8[0x1],r9
8000a894:	c0 58       	rjmp	8000a89e <OV7670_Init+0x2a>
	else
		OV7670_Status.Camera_0_Found = false;
8000a896:	30 09       	mov	r9,0
8000a898:	fe f8 02 48 	ld.w	r8,pc[584]
8000a89c:	b0 99       	st.b	r8[0x1],r9
		
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
8000a89e:	30 5c       	mov	r12,5
8000a8a0:	f0 1f 00 8e 	mcall	8000aad8 <OV7670_Init+0x264>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
8000a8a4:	32 1b       	mov	r11,33
8000a8a6:	fe 7c 38 00 	mov	r12,-51200
8000a8aa:	f0 1f 00 8d 	mcall	8000aadc <OV7670_Init+0x268>
8000a8ae:	c0 61       	brne	8000a8ba <OV7670_Init+0x46>
		OV7670_Status.Camera_1_Found = true;
8000a8b0:	30 19       	mov	r9,1
8000a8b2:	fe f8 02 2e 	ld.w	r8,pc[558]
8000a8b6:	b0 a9       	st.b	r8[0x2],r9
8000a8b8:	c0 58       	rjmp	8000a8c2 <OV7670_Init+0x4e>
	else
		OV7670_Status.Camera_1_Found = false;
8000a8ba:	30 09       	mov	r9,0
8000a8bc:	fe f8 02 24 	ld.w	r8,pc[548]
8000a8c0:	b0 a9       	st.b	r8[0x2],r9
		
	
	//Iniialise Cameras
	if(OV7670_Status.Camera_0_Found)
8000a8c2:	fe f8 02 1e 	ld.w	r8,pc[542]
8000a8c6:	11 99       	ld.ub	r9,r8[0x1]
8000a8c8:	30 08       	mov	r8,0
8000a8ca:	f0 09 18 00 	cp.b	r9,r8
8000a8ce:	c5 60       	breq	8000a97a <OV7670_Init+0x106>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_0);
8000a8d0:	30 4c       	mov	r12,4
8000a8d2:	f0 1f 00 82 	mcall	8000aad8 <OV7670_Init+0x264>
		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
8000a8d6:	e0 6b 00 80 	mov	r11,128
8000a8da:	31 2c       	mov	r12,18
8000a8dc:	f0 1f 00 82 	mcall	8000aae4 <OV7670_Init+0x270>
8000a8e0:	c0 a0       	breq	8000a8f4 <OV7670_Init+0x80>
		{
			print_dbg("\n\rCamera Reset Fail");
8000a8e2:	fe fc 02 06 	ld.w	r12,pc[518]
8000a8e6:	f0 1f 00 82 	mcall	8000aaec <OV7670_Init+0x278>
			OV7670_Status.Camera_0_Error = true;
8000a8ea:	4f e8       	lddpc	r8,8000aae0 <OV7670_Init+0x26c>
8000a8ec:	30 19       	mov	r9,1
8000a8ee:	b0 b9       	st.b	r8[0x3],r9
			OV7670_Status.Status = ERR_DEVICE;	
8000a8f0:	3f 49       	mov	r9,-12
8000a8f2:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a8f4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a8f8:	e2 69 71 00 	mov	r9,160000
8000a8fc:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a900:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a904:	14 38       	cp.w	r8,r10
8000a906:	e0 88 00 08 	brls	8000a916 <OV7670_Init+0xa2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a90a:	12 38       	cp.w	r8,r9
8000a90c:	fe 98 ff fa 	brls	8000a900 <OV7670_Init+0x8c>
8000a910:	12 3a       	cp.w	r10,r9
8000a912:	c0 53       	brcs	8000a91c <OV7670_Init+0xa8>
8000a914:	cf 6b       	rjmp	8000a900 <OV7670_Init+0x8c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a916:	12 38       	cp.w	r8,r9
8000a918:	e0 88 00 08 	brls	8000a928 <OV7670_Init+0xb4>
8000a91c:	4f 56       	lddpc	r6,8000aaf0 <OV7670_Init+0x27c>
8000a91e:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
8000a922:	ec c6 fe b1 	sub	r6,r6,-335
8000a926:	c0 48       	rjmp	8000a92e <OV7670_Init+0xba>
8000a928:	12 3a       	cp.w	r10,r9
8000a92a:	cf 93       	brcs	8000a91c <OV7670_Init+0xa8>
8000a92c:	ce ab       	rjmp	8000a900 <OV7670_Init+0x8c>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
8000a92e:	0f 8b       	ld.ub	r11,r7[0x0]
8000a930:	ef 3c ff ff 	ld.ub	r12,r7[-1]
8000a934:	f0 1f 00 6c 	mcall	8000aae4 <OV7670_Init+0x270>
8000a938:	c0 a0       	breq	8000a94c <OV7670_Init+0xd8>
			{
				print_dbg("\n\rCamera Initialise Fail");
8000a93a:	4e fc       	lddpc	r12,8000aaf4 <OV7670_Init+0x280>
8000a93c:	f0 1f 00 6c 	mcall	8000aaec <OV7670_Init+0x278>
				//return FAIL;
				OV7670_Status.Camera_0_Error = true;	
8000a940:	4e 88       	lddpc	r8,8000aae0 <OV7670_Init+0x26c>
8000a942:	30 19       	mov	r9,1
8000a944:	b0 b9       	st.b	r8[0x3],r9
				OV7670_Status.Status = ERR_DEVICE;	
8000a946:	3f 49       	mov	r9,-12
8000a948:	b0 89       	st.b	r8[0x0],r9
				break;
8000a94a:	c1 88       	rjmp	8000a97a <OV7670_Init+0x106>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a94c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a950:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a954:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a958:	14 38       	cp.w	r8,r10
8000a95a:	e0 88 00 09 	brls	8000a96c <OV7670_Init+0xf8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a95e:	12 38       	cp.w	r8,r9
8000a960:	fe 98 ff fa 	brls	8000a954 <OV7670_Init+0xe0>
8000a964:	12 3a       	cp.w	r10,r9
8000a966:	e0 83 00 b0 	brlo	8000aac6 <OV7670_Init+0x252>
8000a96a:	cf 5b       	rjmp	8000a954 <OV7670_Init+0xe0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a96c:	12 38       	cp.w	r8,r9
8000a96e:	e0 8b 00 ac 	brhi	8000aac6 <OV7670_Init+0x252>
8000a972:	12 3a       	cp.w	r10,r9
8000a974:	e0 83 00 a9 	brlo	8000aac6 <OV7670_Init+0x252>
8000a978:	ce eb       	rjmp	8000a954 <OV7670_Init+0xe0>
			}
			delay_ms(1);
		}	
	}
	if(OV7670_Status.Camera_1_Found)
8000a97a:	4d a8       	lddpc	r8,8000aae0 <OV7670_Init+0x26c>
8000a97c:	11 a9       	ld.ub	r9,r8[0x2]
8000a97e:	30 08       	mov	r8,0
8000a980:	f0 09 18 00 	cp.b	r9,r8
8000a984:	c5 30       	breq	8000aa2a <OV7670_Init+0x1b6>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_1);
8000a986:	30 5c       	mov	r12,5
8000a988:	f0 1f 00 54 	mcall	8000aad8 <OV7670_Init+0x264>

		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
8000a98c:	e0 6b 00 80 	mov	r11,128
8000a990:	31 2c       	mov	r12,18
8000a992:	f0 1f 00 55 	mcall	8000aae4 <OV7670_Init+0x270>
8000a996:	c0 90       	breq	8000a9a8 <OV7670_Init+0x134>
		{
			print_dbg("\n\rCamera Reset Fail");
8000a998:	4d 4c       	lddpc	r12,8000aae8 <OV7670_Init+0x274>
8000a99a:	f0 1f 00 55 	mcall	8000aaec <OV7670_Init+0x278>
			OV7670_Status.Camera_1_Error = true;
8000a99e:	4d 18       	lddpc	r8,8000aae0 <OV7670_Init+0x26c>
8000a9a0:	30 19       	mov	r9,1
8000a9a2:	b0 c9       	st.b	r8[0x4],r9
			OV7670_Status.Status = ERR_DEVICE;	
8000a9a4:	3f 49       	mov	r9,-12
8000a9a6:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a9a8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a9ac:	e2 69 71 00 	mov	r9,160000
8000a9b0:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a9b4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a9b8:	14 38       	cp.w	r8,r10
8000a9ba:	e0 88 00 08 	brls	8000a9ca <OV7670_Init+0x156>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a9be:	12 38       	cp.w	r8,r9
8000a9c0:	fe 98 ff fa 	brls	8000a9b4 <OV7670_Init+0x140>
8000a9c4:	12 3a       	cp.w	r10,r9
8000a9c6:	c0 53       	brcs	8000a9d0 <OV7670_Init+0x15c>
8000a9c8:	cf 6b       	rjmp	8000a9b4 <OV7670_Init+0x140>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a9ca:	12 38       	cp.w	r8,r9
8000a9cc:	e0 88 00 08 	brls	8000a9dc <OV7670_Init+0x168>
8000a9d0:	4c 86       	lddpc	r6,8000aaf0 <OV7670_Init+0x27c>
8000a9d2:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
8000a9d6:	ec c6 fe b1 	sub	r6,r6,-335
8000a9da:	c0 48       	rjmp	8000a9e2 <OV7670_Init+0x16e>
8000a9dc:	12 3a       	cp.w	r10,r9
8000a9de:	cf 93       	brcs	8000a9d0 <OV7670_Init+0x15c>
8000a9e0:	ce ab       	rjmp	8000a9b4 <OV7670_Init+0x140>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
8000a9e2:	0f 8b       	ld.ub	r11,r7[0x0]
8000a9e4:	ef 3c ff ff 	ld.ub	r12,r7[-1]
8000a9e8:	f0 1f 00 3f 	mcall	8000aae4 <OV7670_Init+0x270>
8000a9ec:	c0 a0       	breq	8000aa00 <OV7670_Init+0x18c>
			{
				print_dbg("\n\rCamera Initialise Fail");
8000a9ee:	4c 2c       	lddpc	r12,8000aaf4 <OV7670_Init+0x280>
8000a9f0:	f0 1f 00 3f 	mcall	8000aaec <OV7670_Init+0x278>
				//return FAIL;
				OV7670_Status.Camera_1_Error = true;
8000a9f4:	4b b8       	lddpc	r8,8000aae0 <OV7670_Init+0x26c>
8000a9f6:	30 19       	mov	r9,1
8000a9f8:	b0 c9       	st.b	r8[0x4],r9
				OV7670_Status.Status = ERR_DEVICE;					
8000a9fa:	3f 49       	mov	r9,-12
8000a9fc:	b0 89       	st.b	r8[0x0],r9
				break;
8000a9fe:	c1 68       	rjmp	8000aa2a <OV7670_Init+0x1b6>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000aa00:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000aa04:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000aa08:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000aa0c:	14 38       	cp.w	r8,r10
8000aa0e:	e0 88 00 08 	brls	8000aa1e <OV7670_Init+0x1aa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000aa12:	12 38       	cp.w	r8,r9
8000aa14:	fe 98 ff fa 	brls	8000aa08 <OV7670_Init+0x194>
8000aa18:	12 3a       	cp.w	r10,r9
8000aa1a:	c5 b3       	brcs	8000aad0 <OV7670_Init+0x25c>
8000aa1c:	cf 6b       	rjmp	8000aa08 <OV7670_Init+0x194>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000aa1e:	12 38       	cp.w	r8,r9
8000aa20:	e0 8b 00 58 	brhi	8000aad0 <OV7670_Init+0x25c>
8000aa24:	12 3a       	cp.w	r10,r9
8000aa26:	c5 53       	brcs	8000aad0 <OV7670_Init+0x25c>
8000aa28:	cf 0b       	rjmp	8000aa08 <OV7670_Init+0x194>
			}
			delay_ms(1);
		}
	}
	PCA9542A_Chan_Sel(NO_SELECT);
8000aa2a:	30 0c       	mov	r12,0
8000aa2c:	f0 1f 00 2b 	mcall	8000aad8 <OV7670_Init+0x264>
	
	//Initialise VSYNC Interrupts
	eic_options_t eic_options;
	eic_options.eic_mode = EIC_MODE_EDGE_TRIGGERED;
8000aa30:	30 08       	mov	r8,0
8000aa32:	ba b8       	st.b	sp[0x3],r8
	eic_options.eic_edge = EIC_EDGE_FALLING_EDGE;
8000aa34:	ba c8       	st.b	sp[0x4],r8
	eic_options.eic_async = EIC_SYNCH_MODE;
8000aa36:	ba f8       	st.b	sp[0x7],r8
	eic_options.eic_line = VSYNC_1_LINE;
8000aa38:	30 18       	mov	r8,1
8000aa3a:	ba a8       	st.b	sp[0x2],r8
	//eic_options.eic_line = VSYNC_0_LINE;
	
	Disable_global_interrupt();
8000aa3c:	d3 03       	ssrf	0x10
	gpio_enable_module_pin(VSYNC_1_PIN, VSYNC_1_FUNCTION);
8000aa3e:	30 1b       	mov	r11,1
8000aa40:	31 ac       	mov	r12,26
8000aa42:	f0 1f 00 2e 	mcall	8000aaf8 <OV7670_Init+0x284>
	gpio_enable_module_pin(VSYNC_0_PIN, VSYNC_0_FUNCTION);
8000aa46:	30 1b       	mov	r11,1
8000aa48:	30 ac       	mov	r12,10
8000aa4a:	f0 1f 00 2c 	mcall	8000aaf8 <OV7670_Init+0x284>
	
	gpio_enable_pin_pull_up(VSYNC_1_PIN); //Enable pull up as it is a low level interrupt
8000aa4e:	31 ac       	mov	r12,26
8000aa50:	f0 1f 00 2b 	mcall	8000aafc <OV7670_Init+0x288>
	gpio_enable_pin_pull_up(VSYNC_0_PIN);
8000aa54:	30 ac       	mov	r12,10
8000aa56:	f0 1f 00 2a 	mcall	8000aafc <OV7670_Init+0x288>
	//Initialise EIC
	eic_init(&AVR32_EIC, &eic_options, 1);
8000aa5a:	fa c7 ff fe 	sub	r7,sp,-2
8000aa5e:	30 1a       	mov	r10,1
8000aa60:	0e 9b       	mov	r11,r7
8000aa62:	fe 7c 14 00 	mov	r12,-60416
8000aa66:	f0 1f 00 27 	mcall	8000ab00 <OV7670_Init+0x28c>
	eic_options.eic_line = VSYNC_0_LINE;
8000aa6a:	30 48       	mov	r8,4
8000aa6c:	ba a8       	st.b	sp[0x2],r8
	eic_init(&AVR32_EIC, &eic_options, 1);
8000aa6e:	30 1a       	mov	r10,1
8000aa70:	0e 9b       	mov	r11,r7
8000aa72:	fe 7c 14 00 	mov	r12,-60416
8000aa76:	f0 1f 00 23 	mcall	8000ab00 <OV7670_Init+0x28c>
	
	INTC_register_interrupt(&VSYNC1_Handler, AVR32_EIC_IRQ_1, AVR32_INTC_INT0);
8000aa7a:	30 0a       	mov	r10,0
8000aa7c:	e0 6b 01 e0 	mov	r11,480
8000aa80:	4a 1c       	lddpc	r12,8000ab04 <OV7670_Init+0x290>
8000aa82:	f0 1f 00 22 	mcall	8000ab08 <OV7670_Init+0x294>
	INTC_register_interrupt(&VSYNC0_Handler, AVR32_EIC_IRQ_4, AVR32_INTC_INT0);
8000aa86:	30 0a       	mov	r10,0
8000aa88:	e0 6b 01 e3 	mov	r11,483
8000aa8c:	4a 0c       	lddpc	r12,8000ab0c <OV7670_Init+0x298>
8000aa8e:	f0 1f 00 1f 	mcall	8000ab08 <OV7670_Init+0x294>
	//Enable interrupt on VSYNC1
	eic_enable_line(&AVR32_EIC, VSYNC_1_LINE);
8000aa92:	30 1b       	mov	r11,1
8000aa94:	fe 7c 14 00 	mov	r12,-60416
8000aa98:	f0 1f 00 1e 	mcall	8000ab10 <OV7670_Init+0x29c>
	eic_enable_line(&AVR32_EIC, (VSYNC_0_LINE));
8000aa9c:	30 4b       	mov	r11,4
8000aa9e:	fe 7c 14 00 	mov	r12,-60416
8000aaa2:	f0 1f 00 1c 	mcall	8000ab10 <OV7670_Init+0x29c>
 	VSYNC_1_ENABLE_INTERRUPT;
8000aaa6:	30 1b       	mov	r11,1
8000aaa8:	fe 7c 14 00 	mov	r12,-60416
8000aaac:	f0 1f 00 1a 	mcall	8000ab14 <OV7670_Init+0x2a0>
 	VSYNC_0_ENABLE_INTERRUPT;
8000aab0:	30 4b       	mov	r11,4
8000aab2:	fe 7c 14 00 	mov	r12,-60416
8000aab6:	f0 1f 00 18 	mcall	8000ab14 <OV7670_Init+0x2a0>
	
	FIFO_Init();
8000aaba:	f0 1f 00 18 	mcall	8000ab18 <OV7670_Init+0x2a4>
	Enable_global_interrupt();
8000aabe:	d5 03       	csrf	0x10
	
}
8000aac0:	2f ed       	sub	sp,-8
8000aac2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000aac6:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_0_Error = true;
			OV7670_Status.Status = ERR_DEVICE;	
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
8000aac8:	0c 37       	cp.w	r7,r6
8000aaca:	fe 91 ff 32 	brne	8000a92e <OV7670_Init+0xba>
8000aace:	c5 6b       	rjmp	8000a97a <OV7670_Init+0x106>
8000aad0:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_1_Error = true;
			OV7670_Status.Status = ERR_DEVICE;	
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
8000aad2:	0c 37       	cp.w	r7,r6
8000aad4:	c8 71       	brne	8000a9e2 <OV7670_Init+0x16e>
8000aad6:	ca ab       	rjmp	8000aa2a <OV7670_Init+0x1b6>
8000aad8:	80 00       	ld.sh	r0,r0[0x0]
8000aada:	ab 1c       	ld.d	r12,--r5
8000aadc:	80 00       	ld.sh	r0,r0[0x0]
8000aade:	3d 24       	mov	r4,-46
8000aae0:	00 00       	add	r0,r0
8000aae2:	1a 86       	andn	r6,sp
8000aae4:	80 00       	ld.sh	r0,r0[0x0]
8000aae6:	a8 50       	st.h	r4[0xa],r0
8000aae8:	80 01       	ld.sh	r1,r0[0x0]
8000aaea:	28 e8       	sub	r8,-114
8000aaec:	80 00       	ld.sh	r0,r0[0x0]
8000aaee:	6f f0       	ld.w	r0,r7[0x7c]
8000aaf0:	80 01       	ld.sh	r1,r0[0x0]
8000aaf2:	29 15       	sub	r5,-111
8000aaf4:	80 01       	ld.sh	r1,r0[0x0]
8000aaf6:	28 fc       	sub	r12,-113
8000aaf8:	80 00       	ld.sh	r0,r0[0x0]
8000aafa:	31 2c       	mov	r12,18
8000aafc:	80 00       	ld.sh	r0,r0[0x0]
8000aafe:	31 f0       	mov	r0,31
8000ab00:	80 00       	ld.sh	r0,r0[0x0]
8000ab02:	2f 4c       	sub	r12,-12
8000ab04:	80 00       	ld.sh	r0,r0[0x0]
8000ab06:	a7 d4       	cbr	r4,0x7
8000ab08:	80 00       	ld.sh	r0,r0[0x0]
8000ab0a:	32 44       	mov	r4,36
8000ab0c:	80 00       	ld.sh	r0,r0[0x0]
8000ab0e:	a7 58       	asr	r8,0x7
8000ab10:	80 00       	ld.sh	r0,r0[0x0]
8000ab12:	30 1c       	mov	r12,1
8000ab14:	80 00       	ld.sh	r0,r0[0x0]
8000ab16:	30 26       	mov	r6,2
8000ab18:	80 00       	ld.sh	r0,r0[0x0]
8000ab1a:	a4 68       	st.h	r2[0xc],r8

8000ab1c <PCA9542A_Chan_Sel>:
	return status;
}


void PCA9542A_Chan_Sel(unsigned char Channel)
{
8000ab1c:	eb cd 40 80 	pushm	r7,lr
8000ab20:	20 1d       	sub	sp,4
8000ab22:	18 97       	mov	r7,r12
	int status = 0;
	char buff[2] = {Channel, 0};
8000ab24:	ba 8c       	st.b	sp[0x0],r12
8000ab26:	30 08       	mov	r8,0
8000ab28:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
8000ab2a:	30 08       	mov	r8,0
8000ab2c:	37 49       	mov	r9,116
8000ab2e:	30 1a       	mov	r10,1
8000ab30:	1a 9b       	mov	r11,sp
8000ab32:	fe 7c 38 00 	mov	r12,-51200
8000ab36:	f0 1f 00 07 	mcall	8000ab50 <PCA9542A_Chan_Sel+0x34>
	if(status == STATUS_OK)
8000ab3a:	c0 41       	brne	8000ab42 <PCA9542A_Chan_Sel+0x26>
	{
		PCA9542A.ChannelSelected = Channel;
8000ab3c:	48 68       	lddpc	r8,8000ab54 <PCA9542A_Chan_Sel+0x38>
8000ab3e:	b0 97       	st.b	r8[0x1],r7
8000ab40:	c0 48       	rjmp	8000ab48 <PCA9542A_Chan_Sel+0x2c>
	}
	else
	{
		PCA9542A.Status = ERR_PROTOCOL;
8000ab42:	3f b9       	mov	r9,-5
8000ab44:	48 48       	lddpc	r8,8000ab54 <PCA9542A_Chan_Sel+0x38>
8000ab46:	b0 89       	st.b	r8[0x0],r9
	}
8000ab48:	2f fd       	sub	sp,-4
8000ab4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab4e:	00 00       	add	r0,r0
8000ab50:	80 00       	ld.sh	r0,r0[0x0]
8000ab52:	3c 70       	mov	r0,-57
8000ab54:	00 00       	add	r0,r0
8000ab56:	1a 84       	andn	r4,sp

8000ab58 <ReadBigEndian>:
	retVal = 0; //initialise value
	for(i = 0; i < size; i++)
	{
		retVal |= Buffer[Offset + i] << (i * 8);
	}
	return (Buffer[Offset]) | (Buffer[Offset + 1] << 8) | (Buffer[Offset + 2] << 16) | (Buffer[Offset + 3] << 24);
8000ab58:	f8 0b 00 08 	add	r8,r12,r11
8000ab5c:	11 9a       	ld.ub	r10,r8[0x1]
8000ab5e:	11 a9       	ld.ub	r9,r8[0x2]
8000ab60:	b1 69       	lsl	r9,0x10
8000ab62:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000ab66:	f8 0b 07 0a 	ld.ub	r10,r12[r11]
8000ab6a:	14 49       	or	r9,r10
8000ab6c:	11 bc       	ld.ub	r12,r8[0x3]
}
8000ab6e:	f3 ec 11 8c 	or	r12,r9,r12<<0x18
8000ab72:	5e fc       	retal	r12

8000ab74 <ReadBitmap>:
void ReadBitmap(char *Filename, Image_t *image)
{
8000ab74:	eb cd 40 fc 	pushm	r2-r7,lr
8000ab78:	fa cd 00 80 	sub	sp,sp,128
8000ab7c:	18 96       	mov	r6,r12
8000ab7e:	16 97       	mov	r7,r11
//	Image_t image; 
	int i, j, FileSize, OffsetToArray, temp, BitCount, ImageSize;
	uint8_t Buffer[128];
	nav_filelist_reset();
8000ab80:	f0 1f 00 56 	mcall	8000acd8 <ReadBitmap+0x164>
	if(nav_filelist_findname((FS_STRING)Filename, false) == false)//if the file doesn't exist
8000ab84:	30 0b       	mov	r11,0
8000ab86:	0c 9c       	mov	r12,r6
8000ab88:	f0 1f 00 55 	mcall	8000acdc <ReadBitmap+0x168>
8000ab8c:	c0 b1       	brne	8000aba2 <ReadBitmap+0x2e>
	{
		print_dbg("\n\rFile ");
8000ab8e:	4d 5c       	lddpc	r12,8000ace0 <ReadBitmap+0x16c>
8000ab90:	f0 1f 00 55 	mcall	8000ace4 <ReadBitmap+0x170>
		print_dbg(Filename);
8000ab94:	0c 9c       	mov	r12,r6
8000ab96:	f0 1f 00 54 	mcall	8000ace4 <ReadBitmap+0x170>
		print_dbg("\n\r does not exist;");
8000ab9a:	4d 4c       	lddpc	r12,8000ace8 <ReadBitmap+0x174>
8000ab9c:	f0 1f 00 52 	mcall	8000ace4 <ReadBitmap+0x170>
		return;
8000aba0:	c9 98       	rjmp	8000acd2 <ReadBitmap+0x15e>
	}
	nav_setcwd((FS_STRING)Filename, false, false);
8000aba2:	30 0a       	mov	r10,0
8000aba4:	14 9b       	mov	r11,r10
8000aba6:	0c 9c       	mov	r12,r6
8000aba8:	f0 1f 00 51 	mcall	8000acec <ReadBitmap+0x178>
	file_open(FOPEN_MODE_R);
8000abac:	30 9c       	mov	r12,9
8000abae:	f0 1f 00 51 	mcall	8000acf0 <ReadBitmap+0x17c>
	//Read Header
	file_read_buf(Buffer, BMPHEADERSIZE);
8000abb2:	30 eb       	mov	r11,14
8000abb4:	1a 9c       	mov	r12,sp
8000abb6:	f0 1f 00 50 	mcall	8000acf4 <ReadBitmap+0x180>
	//Check for BM to confirm it is a Bitmap
	if((Buffer[0] != 'B') || (Buffer[1] != 'M'))
8000abba:	34 28       	mov	r8,66
8000abbc:	1b 89       	ld.ub	r9,sp[0x0]
8000abbe:	f0 09 18 00 	cp.b	r9,r8
8000abc2:	c0 61       	brne	8000abce <ReadBitmap+0x5a>
8000abc4:	34 d8       	mov	r8,77
8000abc6:	1b 99       	ld.ub	r9,sp[0x1]
8000abc8:	f0 09 18 00 	cp.b	r9,r8
8000abcc:	c0 50       	breq	8000abd6 <ReadBitmap+0x62>
	{
		print_dbg("\n\rBitmap Parse Fail 'BM';");
8000abce:	4c bc       	lddpc	r12,8000acf8 <ReadBitmap+0x184>
8000abd0:	f0 1f 00 45 	mcall	8000ace4 <ReadBitmap+0x170>
		return;
8000abd4:	c7 f8       	rjmp	8000acd2 <ReadBitmap+0x15e>
	}
	//Extract file size and offset to pixel array
	FileSize = ReadBigEndian(Buffer, BMP_HEADER_FILESIZE_OFFSET, 4);
8000abd6:	1a 96       	mov	r6,sp
8000abd8:	30 4a       	mov	r10,4
8000abda:	30 2b       	mov	r11,2
8000abdc:	1a 9c       	mov	r12,sp
8000abde:	f0 1f 00 48 	mcall	8000acfc <ReadBitmap+0x188>
8000abe2:	18 94       	mov	r4,r12
	OffsetToArray = ReadBigEndian(Buffer, BMP_HEADER_OFFSETTOARRAY_OFFSET, 4);
8000abe4:	30 4a       	mov	r10,4
8000abe6:	30 ab       	mov	r11,10
8000abe8:	1a 9c       	mov	r12,sp
8000abea:	f0 1f 00 45 	mcall	8000acfc <ReadBitmap+0x188>
8000abee:	18 95       	mov	r5,r12
	
	file_read_buf(Buffer, DIBHEADERSIZE);
8000abf0:	37 cb       	mov	r11,124
8000abf2:	1a 9c       	mov	r12,sp
8000abf4:	f0 1f 00 40 	mcall	8000acf4 <ReadBitmap+0x180>
	temp = ReadBigEndian(Buffer, 0, 4);
8000abf8:	30 4a       	mov	r10,4
8000abfa:	30 0b       	mov	r11,0
8000abfc:	1a 9c       	mov	r12,sp
8000abfe:	f0 1f 00 40 	mcall	8000acfc <ReadBitmap+0x188>
	if(temp != 0x7C) //check it is a V5 BMP DIB Header
8000ac02:	e0 4c 00 7c 	cp.w	r12,124
8000ac06:	c0 50       	breq	8000ac10 <ReadBitmap+0x9c>
	{
		print_dbg("\n\rBMP Parse: DIB Header not V5;");
8000ac08:	4b ec       	lddpc	r12,8000ad00 <ReadBitmap+0x18c>
8000ac0a:	f0 1f 00 37 	mcall	8000ace4 <ReadBitmap+0x170>
		return;
8000ac0e:	c6 28       	rjmp	8000acd2 <ReadBitmap+0x15e>
	}
	image->Width= ReadBigEndian(Buffer, DIB_V5_WIDTH_OFFSET, 4);
8000ac10:	1a 96       	mov	r6,sp
8000ac12:	30 4a       	mov	r10,4
8000ac14:	14 9b       	mov	r11,r10
8000ac16:	1a 9c       	mov	r12,sp
8000ac18:	f0 1f 00 39 	mcall	8000acfc <ReadBitmap+0x188>
8000ac1c:	8f 2c       	st.w	r7[0x8],r12
	image->Height = ReadBigEndian(Buffer, DIB_V5_HEIGHT_OFFSET, 4);
8000ac1e:	30 4a       	mov	r10,4
8000ac20:	30 8b       	mov	r11,8
8000ac22:	1a 9c       	mov	r12,sp
8000ac24:	f0 1f 00 36 	mcall	8000acfc <ReadBitmap+0x188>
8000ac28:	8f 1c       	st.w	r7[0x4],r12
	BitCount = ReadBigEndian(Buffer, DIB_V5_BITCOUNT_OFFSET, 2);
8000ac2a:	30 2a       	mov	r10,2
8000ac2c:	30 eb       	mov	r11,14
8000ac2e:	1a 9c       	mov	r12,sp
8000ac30:	f0 1f 00 33 	mcall	8000acfc <ReadBitmap+0x188>
8000ac34:	18 92       	mov	r2,r12
	ImageSize = ReadBigEndian(Buffer, DIB_V5_IMAGESIZE_OFFSET, 4);
8000ac36:	30 4a       	mov	r10,4
8000ac38:	31 4b       	mov	r11,20
8000ac3a:	1a 9c       	mov	r12,sp
8000ac3c:	f0 1f 00 30 	mcall	8000acfc <ReadBitmap+0x188>
8000ac40:	18 93       	mov	r3,r12
	print_dbg("\n\rBitmap Width = ");
8000ac42:	4b 1c       	lddpc	r12,8000ad04 <ReadBitmap+0x190>
8000ac44:	f0 1f 00 28 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(image->Width);
8000ac48:	6e 2c       	ld.w	r12,r7[0x8]
8000ac4a:	f0 1f 00 30 	mcall	8000ad08 <ReadBitmap+0x194>
	print_dbg("\n\rBitmap Height = ");
8000ac4e:	4b 0c       	lddpc	r12,8000ad0c <ReadBitmap+0x198>
8000ac50:	f0 1f 00 25 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(image->Height);
8000ac54:	6e 1c       	ld.w	r12,r7[0x4]
8000ac56:	f0 1f 00 2d 	mcall	8000ad08 <ReadBitmap+0x194>
	print_dbg("\n\rBitmap File Size = ");
8000ac5a:	4a ec       	lddpc	r12,8000ad10 <ReadBitmap+0x19c>
8000ac5c:	f0 1f 00 22 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(FileSize);
8000ac60:	08 9c       	mov	r12,r4
8000ac62:	f0 1f 00 2a 	mcall	8000ad08 <ReadBitmap+0x194>
	print_dbg("\n\rBitmap Offset to Array = ");
8000ac66:	4a cc       	lddpc	r12,8000ad14 <ReadBitmap+0x1a0>
8000ac68:	f0 1f 00 1f 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(OffsetToArray);
8000ac6c:	0a 9c       	mov	r12,r5
8000ac6e:	f0 1f 00 27 	mcall	8000ad08 <ReadBitmap+0x194>
	print_dbg("\n\rBitmap Image Bitcount = ");
8000ac72:	4a ac       	lddpc	r12,8000ad18 <ReadBitmap+0x1a4>
8000ac74:	f0 1f 00 1c 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(BitCount);
8000ac78:	04 9c       	mov	r12,r2
8000ac7a:	f0 1f 00 24 	mcall	8000ad08 <ReadBitmap+0x194>
	print_dbg("\n\rBitmap Image Size = ");
8000ac7e:	4a 8c       	lddpc	r12,8000ad1c <ReadBitmap+0x1a8>
8000ac80:	f0 1f 00 19 	mcall	8000ace4 <ReadBitmap+0x170>
	print_dbg_ulong(ImageSize);
8000ac84:	06 9c       	mov	r12,r3
8000ac86:	f0 1f 00 21 	mcall	8000ad08 <ReadBitmap+0x194>
	
	file_seek(OffsetToArray, FS_SEEK_SET);
8000ac8a:	30 0b       	mov	r11,0
8000ac8c:	0a 9c       	mov	r12,r5
8000ac8e:	f0 1f 00 25 	mcall	8000ad20 <ReadBitmap+0x1ac>
	j = 0;
	image->ImagePtr = mspace_malloc(sdram_msp, image->Height * image->Width);
8000ac92:	6e 2b       	ld.w	r11,r7[0x8]
8000ac94:	6e 18       	ld.w	r8,r7[0x4]
8000ac96:	b1 3b       	mul	r11,r8
8000ac98:	4a 38       	lddpc	r8,8000ad24 <ReadBitmap+0x1b0>
8000ac9a:	70 0c       	ld.w	r12,r8[0x0]
8000ac9c:	f0 1f 00 23 	mcall	8000ad28 <ReadBitmap+0x1b4>
8000aca0:	8f 0c       	st.w	r7[0x0],r12
	for(i = 0; i < ImageSize; i += 2)
8000aca2:	58 03       	cp.w	r3,0
8000aca4:	e0 8a 00 13 	brle	8000acca <ReadBitmap+0x156>
8000aca8:	30 05       	mov	r5,0
	{
		image->ImagePtr[j++] = (file_getc()<<8) | (file_getc()); 
8000acaa:	6e 04       	ld.w	r4,r7[0x0]
8000acac:	0a 04       	add	r4,r5
8000acae:	f0 1f 00 20 	mcall	8000ad2c <ReadBitmap+0x1b8>
8000acb2:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
8000acb6:	f0 1f 00 1e 	mcall	8000ad2c <ReadBitmap+0x1b8>
8000acba:	5c 76       	castu.h	r6
8000acbc:	f9 e6 10 86 	or	r6,r12,r6<<0x8
8000acc0:	a8 06       	st.h	r4[0x0],r6
	print_dbg_ulong(ImageSize);
	
	file_seek(OffsetToArray, FS_SEEK_SET);
	j = 0;
	image->ImagePtr = mspace_malloc(sdram_msp, image->Height * image->Width);
	for(i = 0; i < ImageSize; i += 2)
8000acc2:	2f e5       	sub	r5,-2
8000acc4:	0a 33       	cp.w	r3,r5
8000acc6:	fe 99 ff f2 	brgt	8000acaa <ReadBitmap+0x136>
	{
		image->ImagePtr[j++] = (file_getc()<<8) | (file_getc()); 
	}
	file_close();
8000acca:	f0 1f 00 1a 	mcall	8000ad30 <ReadBitmap+0x1bc>
	nav_filelist_reset();
8000acce:	f0 1f 00 03 	mcall	8000acd8 <ReadBitmap+0x164>
	return;
8000acd2:	2e 0d       	sub	sp,-128
8000acd4:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000acd8:	80 00       	ld.sh	r0,r0[0x0]
8000acda:	68 4c       	ld.w	r12,r4[0x10]
8000acdc:	80 00       	ld.sh	r0,r0[0x0]
8000acde:	68 1c       	ld.w	r12,r4[0x4]
8000ace0:	80 01       	ld.sh	r1,r0[0x0]
8000ace2:	2a 94       	sub	r4,-87
8000ace4:	80 00       	ld.sh	r0,r0[0x0]
8000ace6:	6f f0       	ld.w	r0,r7[0x7c]
8000ace8:	80 01       	ld.sh	r1,r0[0x0]
8000acea:	2a 9c       	sub	r12,-87
8000acec:	80 00       	ld.sh	r0,r0[0x0]
8000acee:	6c e4       	ld.w	r4,r6[0x38]
8000acf0:	80 00       	ld.sh	r0,r0[0x0]
8000acf2:	65 04       	ld.w	r4,r2[0x40]
8000acf4:	80 00       	ld.sh	r0,r0[0x0]
8000acf6:	63 78       	ld.w	r8,r1[0x5c]
8000acf8:	80 01       	ld.sh	r1,r0[0x0]
8000acfa:	2a b0       	sub	r0,-85
8000acfc:	80 00       	ld.sh	r0,r0[0x0]
8000acfe:	ab 58       	asr	r8,0xb
8000ad00:	80 01       	ld.sh	r1,r0[0x0]
8000ad02:	2a cc       	sub	r12,-84
8000ad04:	80 01       	ld.sh	r1,r0[0x0]
8000ad06:	2a ec       	sub	r12,-82
8000ad08:	80 00       	ld.sh	r0,r0[0x0]
8000ad0a:	6f dc       	ld.w	r12,r7[0x74]
8000ad0c:	80 01       	ld.sh	r1,r0[0x0]
8000ad0e:	2b 00       	sub	r0,-80
8000ad10:	80 01       	ld.sh	r1,r0[0x0]
8000ad12:	2b 14       	sub	r4,-79
8000ad14:	80 01       	ld.sh	r1,r0[0x0]
8000ad16:	2b 2c       	sub	r12,-78
8000ad18:	80 01       	ld.sh	r1,r0[0x0]
8000ad1a:	2b 48       	sub	r8,-76
8000ad1c:	80 01       	ld.sh	r1,r0[0x0]
8000ad1e:	2b 64       	sub	r4,-74
8000ad20:	80 00       	ld.sh	r0,r0[0x0]
8000ad22:	60 a8       	ld.w	r8,r0[0x28]
8000ad24:	00 00       	add	r0,r0
8000ad26:	1a a4       	st.w	sp++,r4
8000ad28:	80 00       	ld.sh	r0,r0[0x0]
8000ad2a:	90 18       	ld.sh	r8,r8[0x2]
8000ad2c:	80 00       	ld.sh	r0,r0[0x0]
8000ad2e:	63 0c       	ld.w	r12,r1[0x40]
8000ad30:	80 00       	ld.sh	r0,r0[0x0]
8000ad32:	61 5c       	ld.w	r12,r0[0x54]

8000ad34 <Read2DSignal>:
	file_close();
	return STATUS_OK;
}

int Read2DSignal( int * WorkingBuffer )
{
8000ad34:	eb cd 40 f8 	pushm	r3-r7,lr
8000ad38:	18 93       	mov	r3,r12
	bool status_b;
	int Status, temp;
	char c = 0;
	if(Columbus_Status.SD_Card->Status != STATUS_OK)
8000ad3a:	49 e8       	lddpc	r8,8000adb0 <Read2DSignal+0x7c>
8000ad3c:	70 18       	ld.w	r8,r8[0x4]
8000ad3e:	11 89       	ld.ub	r9,r8[0x0]
8000ad40:	30 08       	mov	r8,0
8000ad42:	f0 09 18 00 	cp.b	r9,r8
8000ad46:	c0 30       	breq	8000ad4c <Read2DSignal+0x18>
8000ad48:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
	return ERR_IO_ERROR;
	nav_filelist_reset();
8000ad4c:	f0 1f 00 1a 	mcall	8000adb4 <Read2DSignal+0x80>
	nav_setcwd((FS_STRING)TWOD_SIGNAL_FILE, false, false);
8000ad50:	30 0a       	mov	r10,0
8000ad52:	14 9b       	mov	r11,r10
8000ad54:	49 9c       	lddpc	r12,8000adb8 <Read2DSignal+0x84>
8000ad56:	f0 1f 00 1a 	mcall	8000adbc <Read2DSignal+0x88>
	status_b = file_open(FOPEN_MODE_R);
8000ad5a:	30 9c       	mov	r12,9
8000ad5c:	f0 1f 00 19 	mcall	8000adc0 <Read2DSignal+0x8c>
	if(status_b == false)
8000ad60:	c0 61       	brne	8000ad6c <Read2DSignal+0x38>
	{
		print_dbg("File Open Error");
8000ad62:	49 9c       	lddpc	r12,8000adc4 <Read2DSignal+0x90>
8000ad64:	f0 1f 00 19 	mcall	8000adc8 <Read2DSignal+0x94>
8000ad68:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
		return ERR_IO_ERROR;
8000ad6c:	30 07       	mov	r7,0
	for(Status = 0; Status < FFT_SIZE * FFT_SIZE; Status++)
	{
		//		print_dbg("\n\r Read from file: ");
		c = 0;
		temp = 0;
		temp |= file_getc() << 24;
8000ad6e:	f0 1f 00 18 	mcall	8000adcc <Read2DSignal+0x98>
8000ad72:	e9 dc b0 10 	bfexts	r4,r12,0x0,0x10
		temp |= file_getc() << 16;
8000ad76:	f0 1f 00 16 	mcall	8000adcc <Read2DSignal+0x98>
8000ad7a:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
		temp |= file_getc() << 8;
8000ad7e:	f0 1f 00 14 	mcall	8000adcc <Read2DSignal+0x98>
8000ad82:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
		temp |= file_getc();
8000ad86:	f0 1f 00 12 	mcall	8000adcc <Read2DSignal+0x98>
	{
		//		print_dbg("\n\r Read from file: ");
		c = 0;
		temp = 0;
		temp |= file_getc() << 24;
		temp |= file_getc() << 16;
8000ad8a:	b1 65       	lsl	r5,0x10
8000ad8c:	eb e4 11 84 	or	r4,r5,r4<<0x18
		temp |= file_getc() << 8;
8000ad90:	5c 7c       	castu.h	r12
8000ad92:	18 44       	or	r4,r12
		temp |= file_getc();
		
		//		print_dbg_char(c);
		
		WorkingBuffer[Status] = temp;
8000ad94:	5c 76       	castu.h	r6
8000ad96:	e9 e6 10 84 	or	r4,r4,r6<<0x8
8000ad9a:	e6 07 09 04 	st.w	r3[r7],r4
8000ad9e:	2f c7       	sub	r7,-4
		return ERR_IO_ERROR;
	}
	
	
	//Status = file_read_buf(WorkingBuffer, 16);
	for(Status = 0; Status < FFT_SIZE * FFT_SIZE; Status++)
8000ada0:	e4 47 00 00 	cp.w	r7,262144
8000ada4:	ce 51       	brne	8000ad6e <Read2DSignal+0x3a>
		
		WorkingBuffer[Status] = temp;
		// 		print_dbg("  Working Buff = ");
		// 		print_dbg_char(WorkingBuffer[Status]);
	}
	file_close();
8000ada6:	f0 1f 00 0b 	mcall	8000add0 <Read2DSignal+0x9c>
8000adaa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
8000adae:	00 00       	add	r0,r0
8000adb0:	00 00       	add	r0,r0
8000adb2:	1a 90       	mov	r0,sp
8000adb4:	80 00       	ld.sh	r0,r0[0x0]
8000adb6:	68 4c       	ld.w	r12,r4[0x10]
8000adb8:	80 01       	ld.sh	r1,r0[0x0]
8000adba:	2b 7c       	sub	r12,-73
8000adbc:	80 00       	ld.sh	r0,r0[0x0]
8000adbe:	6c e4       	ld.w	r4,r6[0x38]
8000adc0:	80 00       	ld.sh	r0,r0[0x0]
8000adc2:	65 04       	ld.w	r4,r2[0x40]
8000adc4:	80 01       	ld.sh	r1,r0[0x0]
8000adc6:	2b 8c       	sub	r12,-72
8000adc8:	80 00       	ld.sh	r0,r0[0x0]
8000adca:	6f f0       	ld.w	r0,r7[0x7c]
8000adcc:	80 00       	ld.sh	r0,r0[0x0]
8000adce:	63 0c       	ld.w	r12,r1[0x40]
8000add0:	80 00       	ld.sh	r0,r0[0x0]
8000add2:	61 5c       	ld.w	r12,r0[0x54]

8000add4 <ReadSignal>:
	// Transmit the resulting string with the given USART.
	Log_Write(tmp + i, -1);
}

int ReadSignal( int * WorkingBuffer ) 
{
8000add4:	eb cd 40 f8 	pushm	r3-r7,lr
8000add8:	18 93       	mov	r3,r12
	bool status_b;
	int Status, temp;
	char c = 0;
	if(Columbus_Status.SD_Card->Status != STATUS_OK)
8000adda:	49 e8       	lddpc	r8,8000ae50 <ReadSignal+0x7c>
8000addc:	70 18       	ld.w	r8,r8[0x4]
8000adde:	11 89       	ld.ub	r9,r8[0x0]
8000ade0:	30 08       	mov	r8,0
8000ade2:	f0 09 18 00 	cp.b	r9,r8
8000ade6:	c0 30       	breq	8000adec <ReadSignal+0x18>
8000ade8:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
		return ERR_IO_ERROR;
	nav_filelist_reset();
8000adec:	f0 1f 00 1a 	mcall	8000ae54 <ReadSignal+0x80>
	nav_setcwd((FS_STRING)SIGNAL_FILE, false, false);
8000adf0:	30 0a       	mov	r10,0
8000adf2:	14 9b       	mov	r11,r10
8000adf4:	49 9c       	lddpc	r12,8000ae58 <ReadSignal+0x84>
8000adf6:	f0 1f 00 1a 	mcall	8000ae5c <ReadSignal+0x88>
	status_b = file_open(FOPEN_MODE_R);
8000adfa:	30 9c       	mov	r12,9
8000adfc:	f0 1f 00 19 	mcall	8000ae60 <ReadSignal+0x8c>
	if(status_b == false)
8000ae00:	c0 61       	brne	8000ae0c <ReadSignal+0x38>
	{
		print_dbg("File Open Error");
8000ae02:	49 9c       	lddpc	r12,8000ae64 <ReadSignal+0x90>
8000ae04:	f0 1f 00 19 	mcall	8000ae68 <ReadSignal+0x94>
8000ae08:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
		return ERR_IO_ERROR;
8000ae0c:	30 07       	mov	r7,0
	for(Status = 0; Status < FFT_SIZE; Status++)
	{
//		print_dbg("\n\r Read from file: ");
		c = 0;
		temp = 0;
		temp |= file_getc() << 24;
8000ae0e:	f0 1f 00 18 	mcall	8000ae6c <ReadSignal+0x98>
8000ae12:	e9 dc b0 10 	bfexts	r4,r12,0x0,0x10
		temp |= file_getc() << 16;
8000ae16:	f0 1f 00 16 	mcall	8000ae6c <ReadSignal+0x98>
8000ae1a:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
		temp |= file_getc() << 8;
8000ae1e:	f0 1f 00 14 	mcall	8000ae6c <ReadSignal+0x98>
8000ae22:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
		temp |= file_getc();	
8000ae26:	f0 1f 00 12 	mcall	8000ae6c <ReadSignal+0x98>
	{
//		print_dbg("\n\r Read from file: ");
		c = 0;
		temp = 0;
		temp |= file_getc() << 24;
		temp |= file_getc() << 16;
8000ae2a:	b1 65       	lsl	r5,0x10
8000ae2c:	eb e4 11 84 	or	r4,r5,r4<<0x18
		temp |= file_getc() << 8;
8000ae30:	5c 7c       	castu.h	r12
8000ae32:	18 44       	or	r4,r12
		temp |= file_getc();	
		
//		print_dbg_char(c);
		
		WorkingBuffer[Status] = temp;
8000ae34:	5c 76       	castu.h	r6
8000ae36:	e9 e6 10 84 	or	r4,r4,r6<<0x8
8000ae3a:	e6 07 09 04 	st.w	r3[r7],r4
8000ae3e:	2f c7       	sub	r7,-4
		return ERR_IO_ERROR;
	}
	
	
	//Status = file_read_buf(WorkingBuffer, 16);
	for(Status = 0; Status < FFT_SIZE; Status++)
8000ae40:	e0 47 04 00 	cp.w	r7,1024
8000ae44:	ce 51       	brne	8000ae0e <ReadSignal+0x3a>
		
		WorkingBuffer[Status] = temp;
// 		print_dbg("  Working Buff = ");
// 		print_dbg_char(WorkingBuffer[Status]);
	}
	file_close();
8000ae46:	f0 1f 00 0b 	mcall	8000ae70 <ReadSignal+0x9c>
8000ae4a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
8000ae4e:	00 00       	add	r0,r0
8000ae50:	00 00       	add	r0,r0
8000ae52:	1a 90       	mov	r0,sp
8000ae54:	80 00       	ld.sh	r0,r0[0x0]
8000ae56:	68 4c       	ld.w	r12,r4[0x10]
8000ae58:	80 01       	ld.sh	r1,r0[0x0]
8000ae5a:	37 78       	mov	r8,119
8000ae5c:	80 00       	ld.sh	r0,r0[0x0]
8000ae5e:	6c e4       	ld.w	r4,r6[0x38]
8000ae60:	80 00       	ld.sh	r0,r0[0x0]
8000ae62:	65 04       	ld.w	r4,r2[0x40]
8000ae64:	80 01       	ld.sh	r1,r0[0x0]
8000ae66:	2b 8c       	sub	r12,-72
8000ae68:	80 00       	ld.sh	r0,r0[0x0]
8000ae6a:	6f f0       	ld.w	r0,r7[0x7c]
8000ae6c:	80 00       	ld.sh	r0,r0[0x0]
8000ae6e:	63 0c       	ld.w	r12,r1[0x40]
8000ae70:	80 00       	ld.sh	r0,r0[0x0]
8000ae72:	61 5c       	ld.w	r12,r0[0x54]

8000ae74 <SaveBuff>:
}

#define BUFFER_FILENAME		"Buffer.bin"
#define BUFFERCSV_FILENAME		"Buffer.csv"
void SaveBuff( int * WorkingBuffer , int size) 
{
8000ae74:	eb cd 40 e0 	pushm	r5-r7,lr
8000ae78:	18 95       	mov	r5,r12
8000ae7a:	16 96       	mov	r6,r11
	//If the file exists, delete it
	if(nav_filelist_findname((FS_STRING)BUFFER_FILENAME, false))
8000ae7c:	30 0b       	mov	r11,0
8000ae7e:	49 2c       	lddpc	r12,8000aec4 <SaveBuff+0x50>
8000ae80:	f0 1f 00 12 	mcall	8000aec8 <SaveBuff+0x54>
8000ae84:	c0 90       	breq	8000ae96 <SaveBuff+0x22>
	{
		nav_setcwd((FS_STRING)BUFFER_FILENAME, false, false);
8000ae86:	30 0a       	mov	r10,0
8000ae88:	14 9b       	mov	r11,r10
8000ae8a:	48 fc       	lddpc	r12,8000aec4 <SaveBuff+0x50>
8000ae8c:	f0 1f 00 10 	mcall	8000aecc <SaveBuff+0x58>
		nav_file_del(false);
8000ae90:	30 0c       	mov	r12,0
8000ae92:	f0 1f 00 10 	mcall	8000aed0 <SaveBuff+0x5c>
	}
	nav_file_create((FS_STRING)BUFFER_FILENAME);
8000ae96:	48 c7       	lddpc	r7,8000aec4 <SaveBuff+0x50>
8000ae98:	0e 9c       	mov	r12,r7
8000ae9a:	f0 1f 00 0f 	mcall	8000aed4 <SaveBuff+0x60>
	nav_setcwd((FS_STRING)BUFFER_FILENAME, false, true);
8000ae9e:	30 1a       	mov	r10,1
8000aea0:	30 0b       	mov	r11,0
8000aea2:	0e 9c       	mov	r12,r7
8000aea4:	f0 1f 00 0a 	mcall	8000aecc <SaveBuff+0x58>
	file_open(FOPEN_MODE_APPEND);
8000aea8:	30 2c       	mov	r12,2
8000aeaa:	f0 1f 00 0c 	mcall	8000aed8 <SaveBuff+0x64>
	file_write_buf(WorkingBuffer, size * sizeof(WorkingBuffer));
8000aeae:	ec 0b 15 02 	lsl	r11,r6,0x2
8000aeb2:	e2 1b ff fc 	andl	r11,0xfffc,COH
8000aeb6:	0a 9c       	mov	r12,r5
8000aeb8:	f0 1f 00 09 	mcall	8000aedc <SaveBuff+0x68>
	file_close();
8000aebc:	f0 1f 00 09 	mcall	8000aee0 <SaveBuff+0x6c>
}
8000aec0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000aec4:	80 01       	ld.sh	r1,r0[0x0]
8000aec6:	2b 9c       	sub	r12,-71
8000aec8:	80 00       	ld.sh	r0,r0[0x0]
8000aeca:	68 1c       	ld.w	r12,r4[0x4]
8000aecc:	80 00       	ld.sh	r0,r0[0x0]
8000aece:	6c e4       	ld.w	r4,r6[0x38]
8000aed0:	80 00       	ld.sh	r0,r0[0x0]
8000aed2:	69 b0       	ld.w	r0,r4[0x6c]
8000aed4:	80 00       	ld.sh	r0,r0[0x0]
8000aed6:	68 64       	ld.w	r4,r4[0x18]
8000aed8:	80 00       	ld.sh	r0,r0[0x0]
8000aeda:	65 04       	ld.w	r4,r2[0x40]
8000aedc:	80 00       	ld.sh	r0,r0[0x0]
8000aede:	61 98       	ld.w	r8,r0[0x64]
8000aee0:	80 00       	ld.sh	r0,r0[0x0]
8000aee2:	61 5c       	ld.w	r12,r0[0x54]

8000aee4 <SaveBitmap>:
	file_close();
	return STATUS_OK;
}

void SaveBitmap(uint16_t *Image, int width, int height, char *FileName)
{
8000aee4:	d4 31       	pushm	r0-r7,lr
8000aee6:	20 1d       	sub	sp,4
8000aee8:	18 95       	mov	r5,r12
8000aeea:	16 97       	mov	r7,r11
8000aeec:	14 93       	mov	r3,r10
8000aeee:	12 96       	mov	r6,r9
	int i, j, k;
	uint8_t *Buffer;
	
	nav_filelist_reset();
8000aef0:	f0 1f 00 4b 	mcall	8000b01c <SaveBitmap+0x138>
	if(nav_filelist_findname((FS_STRING)FileName, false))
8000aef4:	30 0b       	mov	r11,0
8000aef6:	0c 9c       	mov	r12,r6
8000aef8:	f0 1f 00 4a 	mcall	8000b020 <SaveBitmap+0x13c>
8000aefc:	c0 90       	breq	8000af0e <SaveBitmap+0x2a>
	{
		nav_setcwd((FS_STRING)FileName, true, false);		
8000aefe:	30 0a       	mov	r10,0
8000af00:	30 1b       	mov	r11,1
8000af02:	0c 9c       	mov	r12,r6
8000af04:	f0 1f 00 48 	mcall	8000b024 <SaveBitmap+0x140>
		nav_file_del(false);
8000af08:	30 0c       	mov	r12,0
8000af0a:	f0 1f 00 48 	mcall	8000b028 <SaveBitmap+0x144>
	}
	nav_file_create((FS_STRING)FileName);
8000af0e:	0c 9c       	mov	r12,r6
8000af10:	f0 1f 00 47 	mcall	8000b02c <SaveBitmap+0x148>
	file_open(FOPEN_MODE_W);
8000af14:	30 ec       	mov	r12,14
8000af16:	f0 1f 00 47 	mcall	8000b030 <SaveBitmap+0x14c>
	//write a modified bitmap header 
	//Calculate which is the biggest:
	i = width * 2; 
8000af1a:	ee 02 15 01 	lsl	r2,r7,0x1
8000af1e:	e6 02 0c 48 	max	r8,r3,r2
	if(height > i)
		i = height;
	if(DIBHEADERSIZE > i)
		i = DIBHEADERSIZE;
	
	Buffer = malloc(i);
8000af22:	37 cc       	mov	r12,124
8000af24:	f0 0c 0c 4c 	max	r12,r8,r12
8000af28:	f0 1f 00 43 	mcall	8000b034 <SaveBitmap+0x150>
8000af2c:	18 96       	mov	r6,r12
8000af2e:	18 94       	mov	r4,r12
8000af30:	30 08       	mov	r8,0
	
	for(i = 0; i < BMPHEADERSIZE; i++)//copy all the header
	{
		Buffer[i] = BMPHeader[i];
8000af32:	4c 2a       	lddpc	r10,8000b038 <SaveBitmap+0x154>
8000af34:	f4 08 07 09 	ld.ub	r9,r10[r8]
8000af38:	ec 08 0b 09 	st.b	r6[r8],r9
	if(DIBHEADERSIZE > i)
		i = DIBHEADERSIZE;
	
	Buffer = malloc(i);
	
	for(i = 0; i < BMPHEADERSIZE; i++)//copy all the header
8000af3c:	2f f8       	sub	r8,-1
8000af3e:	58 e8       	cp.w	r8,14
8000af40:	cf a1       	brne	8000af34 <SaveBitmap+0x50>
	{
		Buffer[i] = BMPHeader[i];
	}
	//edit the size field
	j = width * height * 2 + BMPHEADERSIZE + DIBHEADERSIZE;
8000af42:	e6 07 02 4b 	mul	r11,r3,r7
8000af46:	2b bb       	sub	r11,-69
8000af48:	a1 7b       	lsl	r11,0x1
8000af4a:	e8 c9 ff fe 	sub	r9,r4,-2
8000af4e:	30 08       	mov	r8,0
	for(i = 0; i < 4; i ++)
	{
		Buffer[i + 2] = (uint8_t)(j >> 8*i);
8000af50:	f6 08 08 4a 	asr	r10,r11,r8
8000af54:	12 ca       	st.b	r9++,r10
8000af56:	2f 88       	sub	r8,-8
	{
		Buffer[i] = BMPHeader[i];
	}
	//edit the size field
	j = width * height * 2 + BMPHEADERSIZE + DIBHEADERSIZE;
	for(i = 0; i < 4; i ++)
8000af58:	e0 48 00 20 	cp.w	r8,32
8000af5c:	cf a1       	brne	8000af50 <SaveBitmap+0x6c>
	{
		Buffer[i + 2] = (uint8_t)(j >> 8*i);
	}
	
	file_write_buf(Buffer, BMPHEADERSIZE);
8000af5e:	30 eb       	mov	r11,14
8000af60:	08 9c       	mov	r12,r4
8000af62:	f0 1f 00 37 	mcall	8000b03c <SaveBitmap+0x158>
8000af66:	30 08       	mov	r8,0
	
	//DIB Header
	for(i = 0; i < DIBHEADERSIZE; i ++)
	{
		Buffer[i] = DIBHead[i];
8000af68:	4b 6a       	lddpc	r10,8000b040 <SaveBitmap+0x15c>
8000af6a:	f4 08 07 09 	ld.ub	r9,r10[r8]
8000af6e:	ec 08 0b 09 	st.b	r6[r8],r9
	}
	
	file_write_buf(Buffer, BMPHEADERSIZE);
	
	//DIB Header
	for(i = 0; i < DIBHEADERSIZE; i ++)
8000af72:	2f f8       	sub	r8,-1
8000af74:	e0 48 00 7c 	cp.w	r8,124
8000af78:	cf 91       	brne	8000af6a <SaveBitmap+0x86>
	{
		Buffer[i] = DIBHead[i];
	}
	Buffer[4] = (uint8_t)(width & 0xFF);
8000af7a:	a8 c7       	st.b	r4[0x4],r7
	Buffer[5] = (uint8_t)((width >> 8) & 0xFF);
8000af7c:	ee 08 14 08 	asr	r8,r7,0x8
8000af80:	a8 d8       	st.b	r4[0x5],r8
	Buffer[6] = (uint8_t)((width >> 16) & 0xFF);
8000af82:	ee 08 14 10 	asr	r8,r7,0x10
8000af86:	a8 e8       	st.b	r4[0x6],r8
	Buffer[7] = (uint8_t)((width >> 24) & 0xFF);
8000af88:	0e 90       	mov	r0,r7
8000af8a:	ee 08 16 18 	lsr	r8,r7,0x18
8000af8e:	a8 f8       	st.b	r4[0x7],r8
	
	Buffer[8] = (uint8_t)(height & 0xFF);
8000af90:	e9 63 00 08 	st.b	r4[8],r3
	Buffer[9] = (uint8_t)((height >> 8) & 0xFF);
8000af94:	e6 08 14 08 	asr	r8,r3,0x8
8000af98:	e9 68 00 09 	st.b	r4[9],r8
	Buffer[10] = (uint8_t)((height >> 16) & 0xFF);
8000af9c:	e6 08 14 10 	asr	r8,r3,0x10
8000afa0:	e9 68 00 0a 	st.b	r4[10],r8
	Buffer[11] = (uint8_t)((height >> 24) & 0xFF);
8000afa4:	e6 08 16 18 	lsr	r8,r3,0x18
8000afa8:	e9 68 00 0b 	st.b	r4[11],r8
	
	file_write_buf(Buffer, DIBHEADERSIZE);
8000afac:	37 cb       	mov	r11,124
8000afae:	08 9c       	mov	r12,r4
8000afb0:	f0 1f 00 23 	mcall	8000b03c <SaveBitmap+0x158>
	
	for(i = 0; i < height ; i++ )
8000afb4:	58 03       	cp.w	r3,0
8000afb6:	e0 8a 00 2b 	brle	8000b00c <SaveBitmap+0x128>

			/*Buffer[j] = Image[i*width + j];*/
			Buffer[(2 * j) + 1] = (uint8_t)(Image[i*width + j]);
			Buffer[(2 * j)] = (uint8_t)(Image[i*width + j] >> 8);
		}
		if(file_write_buf(Buffer, width * 2) != (width * 2))
8000afba:	ee 01 15 01 	lsl	r1,r7,0x1
8000afbe:	5c 71       	castu.h	r1
	}
	file_close();
	return STATUS_OK;
}

void SaveBitmap(uint16_t *Image, int width, int height, char *FileName)
8000afc0:	a1 70       	lsl	r0,0x1
8000afc2:	30 06       	mov	r6,0
	
	file_write_buf(Buffer, DIBHEADERSIZE);
	
	for(i = 0; i < height ; i++ )
	{
		for(j = 0; j < width ; j++)
8000afc4:	e8 c8 ff ff 	sub	r8,r4,-1
8000afc8:	50 08       	stdsp	sp[0x0],r8
8000afca:	c1 a8       	rjmp	8000affe <SaveBitmap+0x11a>
		{
			//Copy the data across. 

			/*Buffer[j] = Image[i*width + j];*/
			Buffer[(2 * j) + 1] = (uint8_t)(Image[i*width + j]);
8000afcc:	94 0b       	ld.sh	r11,r10[0x0]
8000afce:	b0 8b       	st.b	r8[0x0],r11
			Buffer[(2 * j)] = (uint8_t)(Image[i*width + j] >> 8);
8000afd0:	15 2b       	ld.uh	r11,r10++
8000afd2:	a9 8b       	lsr	r11,0x8
8000afd4:	f1 6b ff ff 	st.b	r8[-1],r11
	
	file_write_buf(Buffer, DIBHEADERSIZE);
	
	for(i = 0; i < height ; i++ )
	{
		for(j = 0; j < width ; j++)
8000afd8:	2f f9       	sub	r9,-1
8000afda:	2f e8       	sub	r8,-2
8000afdc:	0e 39       	cp.w	r9,r7
8000afde:	cf 71       	brne	8000afcc <SaveBitmap+0xe8>

			/*Buffer[j] = Image[i*width + j];*/
			Buffer[(2 * j) + 1] = (uint8_t)(Image[i*width + j]);
			Buffer[(2 * j)] = (uint8_t)(Image[i*width + j] >> 8);
		}
		if(file_write_buf(Buffer, width * 2) != (width * 2))
8000afe0:	02 9b       	mov	r11,r1
8000afe2:	08 9c       	mov	r12,r4
8000afe4:	f0 1f 00 16 	mcall	8000b03c <SaveBitmap+0x158>
8000afe8:	5c 7c       	castu.h	r12
8000afea:	18 32       	cp.w	r2,r12
8000afec:	c0 40       	breq	8000aff4 <SaveBitmap+0x110>
		{
			print_dbg("\n\rFile write error.");
8000afee:	49 6c       	lddpc	r12,8000b044 <SaveBitmap+0x160>
8000aff0:	f0 1f 00 16 	mcall	8000b048 <SaveBitmap+0x164>
	Buffer[10] = (uint8_t)((height >> 16) & 0xFF);
	Buffer[11] = (uint8_t)((height >> 24) & 0xFF);
	
	file_write_buf(Buffer, DIBHEADERSIZE);
	
	for(i = 0; i < height ; i++ )
8000aff4:	2f f6       	sub	r6,-1
8000aff6:	00 05       	add	r5,r0
8000aff8:	0c 33       	cp.w	r3,r6
8000affa:	e0 8a 00 09 	brle	8000b00c <SaveBitmap+0x128>
	{
		for(j = 0; j < width ; j++)
8000affe:	58 07       	cp.w	r7,0
8000b000:	fe 9a ff f0 	brle	8000afe0 <SaveBitmap+0xfc>
8000b004:	40 08       	lddsp	r8,sp[0x0]
8000b006:	0a 9a       	mov	r10,r5
8000b008:	30 09       	mov	r9,0
8000b00a:	ce 1b       	rjmp	8000afcc <SaveBitmap+0xe8>
// 		}
	}
	
	
	
	free(Buffer);
8000b00c:	08 9c       	mov	r12,r4
8000b00e:	f0 1f 00 10 	mcall	8000b04c <SaveBitmap+0x168>
	file_close();
8000b012:	f0 1f 00 10 	mcall	8000b050 <SaveBitmap+0x16c>
}
8000b016:	2f fd       	sub	sp,-4
8000b018:	d8 32       	popm	r0-r7,pc
8000b01a:	00 00       	add	r0,r0
8000b01c:	80 00       	ld.sh	r0,r0[0x0]
8000b01e:	68 4c       	ld.w	r12,r4[0x10]
8000b020:	80 00       	ld.sh	r0,r0[0x0]
8000b022:	68 1c       	ld.w	r12,r4[0x4]
8000b024:	80 00       	ld.sh	r0,r0[0x0]
8000b026:	6c e4       	ld.w	r4,r6[0x38]
8000b028:	80 00       	ld.sh	r0,r0[0x0]
8000b02a:	69 b0       	ld.w	r0,r4[0x6c]
8000b02c:	80 00       	ld.sh	r0,r0[0x0]
8000b02e:	68 64       	ld.w	r4,r4[0x18]
8000b030:	80 00       	ld.sh	r0,r0[0x0]
8000b032:	65 04       	ld.w	r4,r2[0x40]
8000b034:	80 00       	ld.sh	r0,r0[0x0]
8000b036:	92 50       	ld.sh	r0,r9[0xa]
8000b038:	80 01       	ld.sh	r1,r0[0x0]
8000b03a:	27 b4       	sub	r4,123
8000b03c:	80 00       	ld.sh	r0,r0[0x0]
8000b03e:	61 98       	ld.w	r8,r0[0x64]
8000b040:	80 01       	ld.sh	r1,r0[0x0]
8000b042:	27 c4       	sub	r4,124
8000b044:	80 01       	ld.sh	r1,r0[0x0]
8000b046:	2b a8       	sub	r8,-70
8000b048:	80 00       	ld.sh	r0,r0[0x0]
8000b04a:	6f f0       	ld.w	r0,r7[0x7c]
8000b04c:	80 00       	ld.sh	r0,r0[0x0]
8000b04e:	81 a4       	st.w	r0[0x28],r4
8000b050:	80 00       	ld.sh	r0,r0[0x0]
8000b052:	61 5c       	ld.w	r12,r0[0x54]

8000b054 <Read_CSV>:
	}
	
	file_close();
}
void Read_CSV(char *Filename, int *WorkingBuffer, int size)
{
8000b054:	d4 31       	pushm	r0-r7,lr
8000b056:	20 8d       	sub	sp,32
8000b058:	18 97       	mov	r7,r12
8000b05a:	16 92       	mov	r2,r11
8000b05c:	14 90       	mov	r0,r10
	char Buff[32];
	int i, j;
	char c;
	nav_filelist_reset();
8000b05e:	f0 1f 00 22 	mcall	8000b0e4 <Read_CSV+0x90>
	if(WorkingBuffer == NULL){
8000b062:	58 02       	cp.w	r2,0
8000b064:	c0 51       	brne	8000b06e <Read_CSV+0x1a>
		print_dbg("\n\rRead_CSV: Buffer not initialised");
8000b066:	4a 1c       	lddpc	r12,8000b0e8 <Read_CSV+0x94>
8000b068:	f0 1f 00 21 	mcall	8000b0ec <Read_CSV+0x98>
		return;
8000b06c:	c3 a8       	rjmp	8000b0e0 <Read_CSV+0x8c>
	}
	//Check file Exists
	if(nav_filelist_findname((FS_STRING)Filename, false) == false){		
8000b06e:	30 0b       	mov	r11,0
8000b070:	0e 9c       	mov	r12,r7
8000b072:	f0 1f 00 20 	mcall	8000b0f0 <Read_CSV+0x9c>
8000b076:	c0 51       	brne	8000b080 <Read_CSV+0x2c>
		print_dbg("\n\rRead_CSV : File doesn't exist;");
8000b078:	49 fc       	lddpc	r12,8000b0f4 <Read_CSV+0xa0>
8000b07a:	f0 1f 00 1d 	mcall	8000b0ec <Read_CSV+0x98>
		return;
8000b07e:	c3 18       	rjmp	8000b0e0 <Read_CSV+0x8c>
	}
	nav_setcwd((FS_STRING)Filename, false, true);
8000b080:	30 1a       	mov	r10,1
8000b082:	30 0b       	mov	r11,0
8000b084:	0e 9c       	mov	r12,r7
8000b086:	f0 1f 00 1d 	mcall	8000b0f8 <Read_CSV+0xa4>
	file_open(FOPEN_MODE_R);
8000b08a:	30 9c       	mov	r12,9
8000b08c:	f0 1f 00 1c 	mcall	8000b0fc <Read_CSV+0xa8>
	for(i = 0; i < size; i++)
8000b090:	58 00       	cp.w	r0,0
8000b092:	e0 8a 00 25 	brle	8000b0dc <Read_CSV+0x88>
8000b096:	30 03       	mov	r3,0
		//file_write_buf(",", 1);
	}
	
	file_close();
}
void Read_CSV(char *Filename, int *WorkingBuffer, int size)
8000b098:	fa c7 ff e0 	sub	r7,sp,-32
8000b09c:	fa 03 00 01 	add	r1,sp,r3
		if(file_eof())
			break;
		c = 0;
		//j = 0;
		for(j = 0; j < 32; j++)
			Buff[j] = 0; //clear the buffer
8000b0a0:	30 06       	mov	r6,0
		while(c != ',')
		{
			if(file_eof())
				break;
			c = file_getc();
			if(c == ',')
8000b0a2:	32 c4       	mov	r4,44
	}
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_R);
	for(i = 0; i < size; i++)
	{
		if(file_eof())
8000b0a4:	f0 1f 00 17 	mcall	8000b100 <Read_CSV+0xac>
8000b0a8:	c1 a1       	brne	8000b0dc <Read_CSV+0x88>
8000b0aa:	fa c5 00 00 	sub	r5,sp,0
		//file_write_buf(",", 1);
	}
	
	file_close();
}
void Read_CSV(char *Filename, int *WorkingBuffer, int size)
8000b0ae:	02 98       	mov	r8,r1
		if(file_eof())
			break;
		c = 0;
		//j = 0;
		for(j = 0; j < 32; j++)
			Buff[j] = 0; //clear the buffer
8000b0b0:	10 c6       	st.b	r8++,r6
	{
		if(file_eof())
			break;
		c = 0;
		//j = 0;
		for(j = 0; j < 32; j++)
8000b0b2:	0e 38       	cp.w	r8,r7
8000b0b4:	cf e1       	brne	8000b0b0 <Read_CSV+0x5c>
			Buff[j] = 0; //clear the buffer
		j = 0;
		while(c != ',')
		{
			if(file_eof())
8000b0b6:	f0 1f 00 13 	mcall	8000b100 <Read_CSV+0xac>
8000b0ba:	c0 91       	brne	8000b0cc <Read_CSV+0x78>
				break;
			c = file_getc();
8000b0bc:	f0 1f 00 12 	mcall	8000b104 <Read_CSV+0xb0>
8000b0c0:	5c 5c       	castu.b	r12
			if(c == ',')
8000b0c2:	e8 0c 18 00 	cp.b	r12,r4
8000b0c6:	c0 30       	breq	8000b0cc <Read_CSV+0x78>
				break;
			Buff[j++] = c; //load string into buffer
8000b0c8:	0a cc       	st.b	r5++,r12
8000b0ca:	cf 6b       	rjmp	8000b0b6 <Read_CSV+0x62>
		}
		WorkingBuffer[i] = atoi(Buff); //Convert to int and put into buffer
8000b0cc:	02 9c       	mov	r12,r1
8000b0ce:	f0 1f 00 0f 	mcall	8000b108 <Read_CSV+0xb4>
8000b0d2:	04 ac       	st.w	r2++,r12
		print_dbg("\n\rRead_CSV : File doesn't exist;");
		return;
	}
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_R);
	for(i = 0; i < size; i++)
8000b0d4:	2f f3       	sub	r3,-1
8000b0d6:	06 30       	cp.w	r0,r3
8000b0d8:	fe 99 ff e6 	brgt	8000b0a4 <Read_CSV+0x50>
				break;
			Buff[j++] = c; //load string into buffer
		}
		WorkingBuffer[i] = atoi(Buff); //Convert to int and put into buffer
	}
	file_close();
8000b0dc:	f0 1f 00 0c 	mcall	8000b10c <Read_CSV+0xb8>
	return;
}
8000b0e0:	2f 8d       	sub	sp,-32
8000b0e2:	d8 32       	popm	r0-r7,pc
8000b0e4:	80 00       	ld.sh	r0,r0[0x0]
8000b0e6:	68 4c       	ld.w	r12,r4[0x10]
8000b0e8:	80 01       	ld.sh	r1,r0[0x0]
8000b0ea:	2b bc       	sub	r12,-69
8000b0ec:	80 00       	ld.sh	r0,r0[0x0]
8000b0ee:	6f f0       	ld.w	r0,r7[0x7c]
8000b0f0:	80 00       	ld.sh	r0,r0[0x0]
8000b0f2:	68 1c       	ld.w	r12,r4[0x4]
8000b0f4:	80 01       	ld.sh	r1,r0[0x0]
8000b0f6:	2b e0       	sub	r0,-66
8000b0f8:	80 00       	ld.sh	r0,r0[0x0]
8000b0fa:	6c e4       	ld.w	r4,r6[0x38]
8000b0fc:	80 00       	ld.sh	r0,r0[0x0]
8000b0fe:	65 04       	ld.w	r4,r2[0x40]
8000b100:	80 00       	ld.sh	r0,r0[0x0]
8000b102:	60 80       	ld.w	r0,r0[0x20]
8000b104:	80 00       	ld.sh	r0,r0[0x0]
8000b106:	63 0c       	ld.w	r12,r1[0x40]
8000b108:	80 00       	ld.sh	r0,r0[0x0]
8000b10a:	c7 80       	breq	8000b1fa <SaveCBuff_CSV+0xea>
8000b10c:	80 00       	ld.sh	r0,r0[0x0]
8000b10e:	61 5c       	ld.w	r12,r0[0x54]

8000b110 <SaveCBuff_CSV>:
	}	
	
	file_close(); 
}
void SaveCBuff_CSV(char *Filename, dsp16_complex_t *ComplexBuffer, int size)
{
8000b110:	d4 31       	pushm	r0-r7,lr
8000b112:	20 4d       	sub	sp,16
8000b114:	18 97       	mov	r7,r12
8000b116:	16 95       	mov	r5,r11
8000b118:	14 92       	mov	r2,r10
	int i, j;
	char Buff[16];
	//If the file exists, delete it
	nav_filelist_reset();
8000b11a:	f0 1f 00 30 	mcall	8000b1d8 <SaveCBuff_CSV+0xc8>
	if(nav_filelist_findname((FS_STRING)Filename, false))
8000b11e:	30 0b       	mov	r11,0
8000b120:	0e 9c       	mov	r12,r7
8000b122:	f0 1f 00 2f 	mcall	8000b1dc <SaveCBuff_CSV+0xcc>
8000b126:	c0 90       	breq	8000b138 <SaveCBuff_CSV+0x28>
	{
		nav_setcwd((FS_STRING)Filename, false, false);
8000b128:	30 0a       	mov	r10,0
8000b12a:	14 9b       	mov	r11,r10
8000b12c:	0e 9c       	mov	r12,r7
8000b12e:	f0 1f 00 2d 	mcall	8000b1e0 <SaveCBuff_CSV+0xd0>
		nav_file_del(false);
8000b132:	30 0c       	mov	r12,0
8000b134:	f0 1f 00 2c 	mcall	8000b1e4 <SaveCBuff_CSV+0xd4>
	}
	nav_file_create((FS_STRING)Filename);
8000b138:	0e 9c       	mov	r12,r7
8000b13a:	f0 1f 00 2c 	mcall	8000b1e8 <SaveCBuff_CSV+0xd8>
	nav_setcwd((FS_STRING)Filename, false, true);
8000b13e:	30 1a       	mov	r10,1
8000b140:	30 0b       	mov	r11,0
8000b142:	0e 9c       	mov	r12,r7
8000b144:	f0 1f 00 27 	mcall	8000b1e0 <SaveCBuff_CSV+0xd0>
	file_open(FOPEN_MODE_W);
8000b148:	30 ec       	mov	r12,14
8000b14a:	f0 1f 00 29 	mcall	8000b1ec <SaveCBuff_CSV+0xdc>
	for(i = 0; i < size; i++)
8000b14e:	58 02       	cp.w	r2,0
8000b150:	e0 8a 00 3f 	brle	8000b1ce <SaveCBuff_CSV+0xbe>
8000b154:	30 04       	mov	r4,0
	{
		if(ComplexBuffer[i].imag >= 0)
8000b156:	30 03       	mov	r3,0
			sprintf(Buff, "%d+%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
		else
			sprintf(Buff, "%d%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
8000b158:	1a 96       	mov	r6,sp
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_W);
	for(i = 0; i < size; i++)
	{
		if(ComplexBuffer[i].imag >= 0)
			sprintf(Buff, "%d+%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
8000b15a:	4a 60       	lddpc	r0,8000b1f0 <SaveCBuff_CSV+0xe0>
		else
			sprintf(Buff, "%d%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
8000b15c:	08 91       	mov	r1,r4
	nav_file_create((FS_STRING)Filename);
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_W);
	for(i = 0; i < size; i++)
	{
		if(ComplexBuffer[i].imag >= 0)
8000b15e:	0b aa       	ld.ub	r10,r5[0x2]
8000b160:	0b b8       	ld.ub	r8,r5[0x3]
8000b162:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000b166:	b1 68       	lsl	r8,0x10
8000b168:	b1 48       	asr	r8,0x10
8000b16a:	e6 08 19 00 	cp.h	r8,r3
8000b16e:	c0 f5       	brlt	8000b18c <SaveCBuff_CSV+0x7c>
			sprintf(Buff, "%d+%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
8000b170:	1a d8       	st.w	--sp,r8
8000b172:	0b 8a       	ld.ub	r10,r5[0x0]
8000b174:	0b 98       	ld.ub	r8,r5[0x1]
8000b176:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000b17a:	b1 68       	lsl	r8,0x10
8000b17c:	b1 48       	asr	r8,0x10
8000b17e:	1a d8       	st.w	--sp,r8
8000b180:	00 9b       	mov	r11,r0
8000b182:	0c 9c       	mov	r12,r6
8000b184:	f0 1f 00 1c 	mcall	8000b1f4 <SaveCBuff_CSV+0xe4>
8000b188:	2f ed       	sub	sp,-8
8000b18a:	c0 e8       	rjmp	8000b1a6 <SaveCBuff_CSV+0x96>
		else
			sprintf(Buff, "%d%dj,", ComplexBuffer[i].real, ComplexBuffer[i].imag);
8000b18c:	1a d8       	st.w	--sp,r8
8000b18e:	0b 8a       	ld.ub	r10,r5[0x0]
8000b190:	0b 98       	ld.ub	r8,r5[0x1]
8000b192:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000b196:	b1 68       	lsl	r8,0x10
8000b198:	b1 48       	asr	r8,0x10
8000b19a:	1a d8       	st.w	--sp,r8
8000b19c:	49 7b       	lddpc	r11,8000b1f8 <SaveCBuff_CSV+0xe8>
8000b19e:	0c 9c       	mov	r12,r6
8000b1a0:	f0 1f 00 15 	mcall	8000b1f4 <SaveCBuff_CSV+0xe4>
8000b1a4:	2f ed       	sub	sp,-8
8000b1a6:	02 97       	mov	r7,r1
		//itoa(WorkingBuffer[i], Buff, 10);
		j = 0;
		while(Buff[j++] != 0);//count the size of data to be written
8000b1a8:	ec 07 07 08 	ld.ub	r8,r6[r7]
8000b1ac:	2f f7       	sub	r7,-1
8000b1ae:	58 08       	cp.w	r8,0
8000b1b0:	cf c1       	brne	8000b1a8 <SaveCBuff_CSV+0x98>
		atoi(Buff);
8000b1b2:	1a 9c       	mov	r12,sp
8000b1b4:	f0 1f 00 12 	mcall	8000b1fc <SaveCBuff_CSV+0xec>
		file_write_buf(Buff, j-1);
8000b1b8:	0e 9b       	mov	r11,r7
8000b1ba:	20 1b       	sub	r11,1
8000b1bc:	5c 7b       	castu.h	r11
8000b1be:	1a 9c       	mov	r12,sp
8000b1c0:	f0 1f 00 10 	mcall	8000b200 <SaveCBuff_CSV+0xf0>
		nav_file_del(false);
	}
	nav_file_create((FS_STRING)Filename);
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_W);
	for(i = 0; i < size; i++)
8000b1c4:	2f f4       	sub	r4,-1
8000b1c6:	2f c5       	sub	r5,-4
8000b1c8:	08 32       	cp.w	r2,r4
8000b1ca:	fe 99 ff ca 	brgt	8000b15e <SaveCBuff_CSV+0x4e>
		atoi(Buff);
		file_write_buf(Buff, j-1);
		//file_write_buf(",", 1);
	}
	
	file_close();
8000b1ce:	f0 1f 00 0e 	mcall	8000b204 <SaveCBuff_CSV+0xf4>
}
8000b1d2:	2f cd       	sub	sp,-16
8000b1d4:	d8 32       	popm	r0-r7,pc
8000b1d6:	00 00       	add	r0,r0
8000b1d8:	80 00       	ld.sh	r0,r0[0x0]
8000b1da:	68 4c       	ld.w	r12,r4[0x10]
8000b1dc:	80 00       	ld.sh	r0,r0[0x0]
8000b1de:	68 1c       	ld.w	r12,r4[0x4]
8000b1e0:	80 00       	ld.sh	r0,r0[0x0]
8000b1e2:	6c e4       	ld.w	r4,r6[0x38]
8000b1e4:	80 00       	ld.sh	r0,r0[0x0]
8000b1e6:	69 b0       	ld.w	r0,r4[0x6c]
8000b1e8:	80 00       	ld.sh	r0,r0[0x0]
8000b1ea:	68 64       	ld.w	r4,r4[0x18]
8000b1ec:	80 00       	ld.sh	r0,r0[0x0]
8000b1ee:	65 04       	ld.w	r4,r2[0x40]
8000b1f0:	80 01       	ld.sh	r1,r0[0x0]
8000b1f2:	2c 04       	sub	r4,-64
8000b1f4:	80 00       	ld.sh	r0,r0[0x0]
8000b1f6:	c9 08       	rjmp	8000b316 <sd_mmc_resources_init+0x52>
8000b1f8:	80 01       	ld.sh	r1,r0[0x0]
8000b1fa:	2c 0c       	sub	r12,-64
8000b1fc:	80 00       	ld.sh	r0,r0[0x0]
8000b1fe:	c7 80       	breq	8000b2ee <sd_mmc_resources_init+0x2a>
8000b200:	80 00       	ld.sh	r0,r0[0x0]
8000b202:	61 98       	ld.w	r8,r0[0x64]
8000b204:	80 00       	ld.sh	r0,r0[0x0]
8000b206:	61 5c       	ld.w	r12,r0[0x54]

8000b208 <SaveBuff_CSV>:
	file_open(FOPEN_MODE_APPEND);
	file_write_buf(WorkingBuffer, size * sizeof(WorkingBuffer));
	file_close();
}
void SaveBuff_CSV(char *Filename, int *WorkingBuffer, int size)
{
8000b208:	eb cd 40 fe 	pushm	r1-r7,lr
8000b20c:	20 4d       	sub	sp,16
8000b20e:	18 97       	mov	r7,r12
8000b210:	16 95       	mov	r5,r11
8000b212:	14 93       	mov	r3,r10
	int i, j;
	char Buff[16];
	//If the file exists, delete it
	nav_filelist_reset();
8000b214:	f0 1f 00 21 	mcall	8000b298 <SaveBuff_CSV+0x90>
	if(nav_filelist_findname((FS_STRING)Filename, false))
8000b218:	30 0b       	mov	r11,0
8000b21a:	0e 9c       	mov	r12,r7
8000b21c:	f0 1f 00 20 	mcall	8000b29c <SaveBuff_CSV+0x94>
8000b220:	c0 90       	breq	8000b232 <SaveBuff_CSV+0x2a>
	{
		nav_setcwd((FS_STRING)Filename, false, false);
8000b222:	30 0a       	mov	r10,0
8000b224:	14 9b       	mov	r11,r10
8000b226:	0e 9c       	mov	r12,r7
8000b228:	f0 1f 00 1e 	mcall	8000b2a0 <SaveBuff_CSV+0x98>
		nav_file_del(false);
8000b22c:	30 0c       	mov	r12,0
8000b22e:	f0 1f 00 1e 	mcall	8000b2a4 <SaveBuff_CSV+0x9c>
	}
	nav_file_create((FS_STRING)Filename);
8000b232:	0e 9c       	mov	r12,r7
8000b234:	f0 1f 00 1d 	mcall	8000b2a8 <SaveBuff_CSV+0xa0>
	nav_setcwd((FS_STRING)Filename, false, true);
8000b238:	30 1a       	mov	r10,1
8000b23a:	30 0b       	mov	r11,0
8000b23c:	0e 9c       	mov	r12,r7
8000b23e:	f0 1f 00 19 	mcall	8000b2a0 <SaveBuff_CSV+0x98>
	file_open(FOPEN_MODE_W);
8000b242:	30 ec       	mov	r12,14
8000b244:	f0 1f 00 1a 	mcall	8000b2ac <SaveBuff_CSV+0xa4>
	for(i = 0; i < size; i++)
8000b248:	58 03       	cp.w	r3,0
8000b24a:	e0 8a 00 21 	brle	8000b28c <SaveBuff_CSV+0x84>
8000b24e:	30 04       	mov	r4,0
	{
		sprintf(Buff, "%d,", WorkingBuffer[i]);
8000b250:	49 82       	lddpc	r2,8000b2b0 <SaveBuff_CSV+0xa8>
8000b252:	1a 96       	mov	r6,sp
8000b254:	08 91       	mov	r1,r4
8000b256:	6a 08       	ld.w	r8,r5[0x0]
8000b258:	1a d8       	st.w	--sp,r8
8000b25a:	04 9b       	mov	r11,r2
8000b25c:	0c 9c       	mov	r12,r6
8000b25e:	f0 1f 00 16 	mcall	8000b2b4 <SaveBuff_CSV+0xac>
8000b262:	02 97       	mov	r7,r1
8000b264:	2f fd       	sub	sp,-4
		//itoa(WorkingBuffer[i], Buff, 10);
		j = 0;
		while(Buff[j++] != 0);//count the size of data to be written
8000b266:	ec 07 07 08 	ld.ub	r8,r6[r7]
8000b26a:	2f f7       	sub	r7,-1
8000b26c:	58 08       	cp.w	r8,0
8000b26e:	cf c1       	brne	8000b266 <SaveBuff_CSV+0x5e>
		atoi(Buff);
8000b270:	1a 9c       	mov	r12,sp
8000b272:	f0 1f 00 12 	mcall	8000b2b8 <SaveBuff_CSV+0xb0>
		file_write_buf(Buff, j-1);
8000b276:	0e 9b       	mov	r11,r7
8000b278:	20 1b       	sub	r11,1
8000b27a:	5c 7b       	castu.h	r11
8000b27c:	1a 9c       	mov	r12,sp
8000b27e:	f0 1f 00 10 	mcall	8000b2bc <SaveBuff_CSV+0xb4>
		nav_file_del(false);
	}
	nav_file_create((FS_STRING)Filename);
	nav_setcwd((FS_STRING)Filename, false, true);
	file_open(FOPEN_MODE_W);
	for(i = 0; i < size; i++)
8000b282:	2f f4       	sub	r4,-1
8000b284:	2f c5       	sub	r5,-4
8000b286:	08 33       	cp.w	r3,r4
8000b288:	fe 99 ff e7 	brgt	8000b256 <SaveBuff_CSV+0x4e>
		atoi(Buff);
		file_write_buf(Buff, j-1);
		//file_write_buf(",", 1);
	}	
	
	file_close(); 
8000b28c:	f0 1f 00 0d 	mcall	8000b2c0 <SaveBuff_CSV+0xb8>
}
8000b290:	2f cd       	sub	sp,-16
8000b292:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000b296:	00 00       	add	r0,r0
8000b298:	80 00       	ld.sh	r0,r0[0x0]
8000b29a:	68 4c       	ld.w	r12,r4[0x10]
8000b29c:	80 00       	ld.sh	r0,r0[0x0]
8000b29e:	68 1c       	ld.w	r12,r4[0x4]
8000b2a0:	80 00       	ld.sh	r0,r0[0x0]
8000b2a2:	6c e4       	ld.w	r4,r6[0x38]
8000b2a4:	80 00       	ld.sh	r0,r0[0x0]
8000b2a6:	69 b0       	ld.w	r0,r4[0x6c]
8000b2a8:	80 00       	ld.sh	r0,r0[0x0]
8000b2aa:	68 64       	ld.w	r4,r4[0x18]
8000b2ac:	80 00       	ld.sh	r0,r0[0x0]
8000b2ae:	65 04       	ld.w	r4,r2[0x40]
8000b2b0:	80 01       	ld.sh	r1,r0[0x0]
8000b2b2:	2c 14       	sub	r4,-63
8000b2b4:	80 00       	ld.sh	r0,r0[0x0]
8000b2b6:	c9 08       	rjmp	8000b3d6 <Get_Line+0x36>
8000b2b8:	80 00       	ld.sh	r0,r0[0x0]
8000b2ba:	c7 80       	breq	8000b3aa <Get_Line+0xa>
8000b2bc:	80 00       	ld.sh	r0,r0[0x0]
8000b2be:	61 98       	ld.w	r8,r0[0x64]
8000b2c0:	80 00       	ld.sh	r0,r0[0x0]
8000b2c2:	61 5c       	ld.w	r12,r0[0x54]

8000b2c4 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
8000b2c4:	eb cd 40 80 	pushm	r7,lr
8000b2c8:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
8000b2ca:	49 98       	lddpc	r8,8000b32c <sd_mmc_resources_init+0x68>
8000b2cc:	1a 97       	mov	r7,sp
8000b2ce:	70 09       	ld.w	r9,r8[0x0]
8000b2d0:	50 09       	stdsp	sp[0x0],r9
8000b2d2:	70 19       	ld.w	r9,r8[0x4]
8000b2d4:	50 19       	stdsp	sp[0x4],r9
8000b2d6:	70 29       	ld.w	r9,r8[0x8]
8000b2d8:	50 29       	stdsp	sp[0x8],r9
8000b2da:	70 38       	ld.w	r8,r8[0xc]
8000b2dc:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000b2de:	30 4b       	mov	r11,4
8000b2e0:	49 4c       	lddpc	r12,8000b330 <sd_mmc_resources_init+0x6c>
8000b2e2:	f0 1f 00 15 	mcall	8000b334 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
8000b2e6:	1a 9b       	mov	r11,sp
8000b2e8:	fe 7c 34 00 	mov	r12,-52224
8000b2ec:	f0 1f 00 13 	mcall	8000b338 <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000b2f0:	30 09       	mov	r9,0
8000b2f2:	12 9a       	mov	r10,r9
8000b2f4:	12 9b       	mov	r11,r9
8000b2f6:	fe 7c 34 00 	mov	r12,-52224
8000b2fa:	f0 1f 00 11 	mcall	8000b33c <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
8000b2fe:	fe 7c 34 00 	mov	r12,-52224
8000b302:	f0 1f 00 10 	mcall	8000b340 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
8000b306:	20 4d       	sub	sp,16
8000b308:	6e 08       	ld.w	r8,r7[0x0]
8000b30a:	50 08       	stdsp	sp[0x0],r8
8000b30c:	6e 18       	ld.w	r8,r7[0x4]
8000b30e:	50 18       	stdsp	sp[0x4],r8
8000b310:	6e 28       	ld.w	r8,r7[0x8]
8000b312:	50 28       	stdsp	sp[0x8],r8
8000b314:	6e 38       	ld.w	r8,r7[0xc]
8000b316:	50 38       	stdsp	sp[0xc],r8
8000b318:	e0 6c 24 00 	mov	r12,9216
8000b31c:	ea 1c 00 f4 	orh	r12,0xf4
8000b320:	f0 1f 00 09 	mcall	8000b344 <sd_mmc_resources_init+0x80>
8000b324:	2f cd       	sub	sp,-16
}
8000b326:	2f cd       	sub	sp,-16
8000b328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b32c:	80 01       	ld.sh	r1,r0[0x0]
8000b32e:	2a 64       	sub	r4,-90
8000b330:	80 01       	ld.sh	r1,r0[0x0]
8000b332:	2a 74       	sub	r4,-89
8000b334:	80 00       	ld.sh	r0,r0[0x0]
8000b336:	31 c0       	mov	r0,28
8000b338:	80 00       	ld.sh	r0,r0[0x0]
8000b33a:	39 1c       	mov	r12,-111
8000b33c:	80 00       	ld.sh	r0,r0[0x0]
8000b33e:	39 54       	mov	r4,-107
8000b340:	80 00       	ld.sh	r0,r0[0x0]
8000b342:	3a bc       	mov	r12,-85
8000b344:	80 00       	ld.sh	r0,r0[0x0]
8000b346:	2b 10       	sub	r0,-79

8000b348 <twim_init>:
#define VIRTUALMEM_ADDR    0x123456        //! Internal Address
#define TWIM_MASTER_SPEED  50000           //! Speed of TWI


void twim_init (void)
{
8000b348:	eb cd 40 80 	pushm	r7,lr
8000b34c:	20 8d       	sub	sp,32
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
8000b34e:	49 18       	lddpc	r8,8000b390 <twim_init+0x48>
8000b350:	fa cc ff f0 	sub	r12,sp,-16
8000b354:	70 09       	ld.w	r9,r8[0x0]
8000b356:	99 09       	st.w	r12[0x0],r9
8000b358:	70 19       	ld.w	r9,r8[0x4]
8000b35a:	99 19       	st.w	r12[0x4],r9
8000b35c:	70 29       	ld.w	r9,r8[0x8]
8000b35e:	99 29       	st.w	r12[0x8],r9
8000b360:	70 38       	ld.w	r8,r8[0xc]
8000b362:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
8000b364:	48 c8       	lddpc	r8,8000b394 <twim_init+0x4c>
8000b366:	1a 97       	mov	r7,sp
8000b368:	70 09       	ld.w	r9,r8[0x0]
8000b36a:	50 09       	stdsp	sp[0x0],r9
8000b36c:	70 19       	ld.w	r9,r8[0x4]
8000b36e:	50 19       	stdsp	sp[0x4],r9
8000b370:	70 29       	ld.w	r9,r8[0x8]
8000b372:	50 29       	stdsp	sp[0x8],r9
8000b374:	70 38       	ld.w	r8,r8[0xc]
8000b376:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
8000b378:	30 2b       	mov	r11,2
8000b37a:	f0 1f 00 08 	mcall	8000b398 <twim_init+0x50>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
8000b37e:	1a 9b       	mov	r11,sp
8000b380:	fe 7c 38 00 	mov	r12,-51200
8000b384:	f0 1f 00 06 	mcall	8000b39c <twim_init+0x54>

}
8000b388:	2f 8d       	sub	sp,-32
8000b38a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b38e:	00 00       	add	r0,r0
8000b390:	80 01       	ld.sh	r1,r0[0x0]
8000b392:	2c 18       	sub	r8,-63
8000b394:	80 01       	ld.sh	r1,r0[0x0]
8000b396:	2c 28       	sub	r8,-62
8000b398:	80 00       	ld.sh	r0,r0[0x0]
8000b39a:	31 c0       	mov	r0,28
8000b39c:	80 00       	ld.sh	r0,r0[0x0]
8000b39e:	3d 40       	mov	r0,-44

8000b3a0 <Get_Line>:
				1 : computes the One Dimensional FFT of the working buffer. Returns magnitude.\n\r\
				2 : Computes the Two Dimensional FFT of the Working Buffer. \n\r \
				"

void Get_Line( char * CommandBuffer ) 
{
8000b3a0:	eb cd 40 f8 	pushm	r3-r7,lr
8000b3a4:	18 96       	mov	r6,r12
	int c = 0;
	
	while(c != 13)
	{
		c = usart_getchar(DBG_USART);
8000b3a6:	fe 75 2c 00 	mov	r5,-54272
		if(c == '\b')
		{
			CommandBuffer--;
			*(CommandBuffer) = 0;
8000b3aa:	30 04       	mov	r4,0
		else
		{
			*(CommandBuffer) = c; 
			CommandBuffer++;
		}
		print_dbg_char(c);
8000b3ac:	30 83       	mov	r3,8
{
	int c = 0;
	
	while(c != 13)
	{
		c = usart_getchar(DBG_USART);
8000b3ae:	0a 9c       	mov	r12,r5
8000b3b0:	f0 1f 00 0c 	mcall	8000b3e0 <Get_Line+0x40>
8000b3b4:	18 97       	mov	r7,r12
		if(c == '\b')
8000b3b6:	58 8c       	cp.w	r12,8
8000b3b8:	c0 61       	brne	8000b3c4 <Get_Line+0x24>
		{
			CommandBuffer--;
			*(CommandBuffer) = 0;
8000b3ba:	0c f4       	st.b	--r6,r4
		else
		{
			*(CommandBuffer) = c; 
			CommandBuffer++;
		}
		print_dbg_char(c);
8000b3bc:	06 9c       	mov	r12,r3
8000b3be:	f0 1f 00 0a 	mcall	8000b3e4 <Get_Line+0x44>
8000b3c2:	cf 6b       	rjmp	8000b3ae <Get_Line+0xe>
			CommandBuffer--;
			*(CommandBuffer) = 0;
		}		
		else
		{
			*(CommandBuffer) = c; 
8000b3c4:	ac 8c       	st.b	r6[0x0],r12
			CommandBuffer++;
		}
		print_dbg_char(c);
8000b3c6:	f0 1f 00 08 	mcall	8000b3e4 <Get_Line+0x44>

void Get_Line( char * CommandBuffer ) 
{
	int c = 0;
	
	while(c != 13)
8000b3ca:	58 d7       	cp.w	r7,13
8000b3cc:	c0 30       	breq	8000b3d2 <Get_Line+0x32>
			*(CommandBuffer) = 0;
		}		
		else
		{
			*(CommandBuffer) = c; 
			CommandBuffer++;
8000b3ce:	2f f6       	sub	r6,-1
8000b3d0:	ce fb       	rjmp	8000b3ae <Get_Line+0xe>
		}
		print_dbg_char(c);
	}
	usart_putchar(DBG_USART, 6);
8000b3d2:	30 6b       	mov	r11,6
8000b3d4:	fe 7c 2c 00 	mov	r12,-54272
8000b3d8:	f0 1f 00 04 	mcall	8000b3e8 <Get_Line+0x48>
}
8000b3dc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000b3e0:	80 00       	ld.sh	r0,r0[0x0]
8000b3e2:	3e b4       	mov	r4,-21
8000b3e4:	80 00       	ld.sh	r0,r0[0x0]
8000b3e6:	6f 74       	ld.w	r4,r7[0x5c]
8000b3e8:	80 00       	ld.sh	r0,r0[0x0]
8000b3ea:	3e 64       	mov	r4,-26

8000b3ec <main>:

#define COMMAND_BUFFER_SIZE		32
int main (void)
{
8000b3ec:	d4 31       	pushm	r0-r7,lr
8000b3ee:	21 1d       	sub	sp,68
	int *Working_Buffer = NULL;
	int SizeOfWorking_Buffer = 0;
	A_ALIGNED dsp16_complex_t *ComplexBuffer;
	int SizeOfComplex_Buffer = 0;
	Columbus_Status.SD_Card = &SD_Status;
	Columbus_Status.Cameras = &OV7670_Status;
8000b3f0:	fe f7 06 6c 	ld.w	r7,pc[1644]
8000b3f4:	fe f8 06 6c 	ld.w	r8,pc[1644]
8000b3f8:	8f 38       	st.w	r7[0xc],r8
	Columbus_Status.I2CMux = &PCA9542A;
8000b3fa:	fe f8 06 6a 	ld.w	r8,pc[1642]
8000b3fe:	8f 48       	st.w	r7[0x10],r8
	Columbus_Status.SD_Card = &SD_Status;
8000b400:	fe f8 06 68 	ld.w	r8,pc[1640]
8000b404:	8f 18       	st.w	r7[0x4],r8
	Columbus_Status.Motors = &Motor_Control;
8000b406:	fe f8 06 66 	ld.w	r8,pc[1638]
8000b40a:	8f 28       	st.w	r7[0x8],r8
	board_init();
8000b40c:	f0 1f 01 99 	mcall	8000ba70 <main+0x684>
	print_dbg("\n\r");
8000b410:	fe fc 06 64 	ld.w	r12,pc[1636]
8000b414:	f0 1f 01 99 	mcall	8000ba78 <main+0x68c>
	print_dbg(THE);
8000b418:	fe fc 06 64 	ld.w	r12,pc[1636]
8000b41c:	f0 1f 01 97 	mcall	8000ba78 <main+0x68c>
	print_dbg(COLUMBUS);
8000b420:	fe fc 06 60 	ld.w	r12,pc[1632]
8000b424:	f0 1f 01 95 	mcall	8000ba78 <main+0x68c>
	print_dbg(ASCII_SHIP);
8000b428:	fe fc 06 5c 	ld.w	r12,pc[1628]
8000b42c:	f0 1f 01 93 	mcall	8000ba78 <main+0x68c>
	System_Test();
8000b430:	f0 1f 01 96 	mcall	8000ba88 <main+0x69c>

	if(Columbus_Status.Status != STATUS_OK)
8000b434:	6e 08       	ld.w	r8,r7[0x0]
8000b436:	58 08       	cp.w	r8,0
8000b438:	c4 10       	breq	8000b4ba <main+0xce>
	{
		while(1)
		{	
			LED2_SET;
8000b43a:	33 16       	mov	r6,49
			LED3_SET;
8000b43c:	33 27       	mov	r7,50
			LED4_SET;
8000b43e:	33 b5       	mov	r5,59
			LED5_SET;
8000b440:	33 c4       	mov	r4,60
			LED6_SET;
8000b442:	33 d3       	mov	r3,61
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b444:	e0 62 12 00 	mov	r2,4608
8000b448:	ea 12 00 7a 	orh	r2,0x7a

	if(Columbus_Status.Status != STATUS_OK)
	{
		while(1)
		{	
			LED2_SET;
8000b44c:	0c 9c       	mov	r12,r6
8000b44e:	f0 1f 01 90 	mcall	8000ba8c <main+0x6a0>
			LED3_SET;
8000b452:	0e 9c       	mov	r12,r7
8000b454:	f0 1f 01 8e 	mcall	8000ba8c <main+0x6a0>
			LED4_SET;
8000b458:	0a 9c       	mov	r12,r5
8000b45a:	f0 1f 01 8d 	mcall	8000ba8c <main+0x6a0>
			LED5_SET;
8000b45e:	08 9c       	mov	r12,r4
8000b460:	f0 1f 01 8b 	mcall	8000ba8c <main+0x6a0>
			LED6_SET;
8000b464:	06 9c       	mov	r12,r3
8000b466:	f0 1f 01 8a 	mcall	8000ba8c <main+0x6a0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b46a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b46e:	f0 02 00 0a 	add	r10,r8,r2
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b472:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b476:	14 38       	cp.w	r8,r10
8000b478:	e0 88 00 09 	brls	8000b48a <main+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b47c:	12 38       	cp.w	r8,r9
8000b47e:	fe 98 ff fa 	brls	8000b472 <main+0x86>
8000b482:	12 3a       	cp.w	r10,r9
8000b484:	e0 83 02 d7 	brlo	8000ba32 <main+0x646>
8000b488:	cf 5b       	rjmp	8000b472 <main+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b48a:	12 38       	cp.w	r8,r9
8000b48c:	e0 8b 02 d3 	brhi	8000ba32 <main+0x646>
8000b490:	12 3a       	cp.w	r10,r9
8000b492:	e0 83 02 d0 	brlo	8000ba32 <main+0x646>
8000b496:	ce eb       	rjmp	8000b472 <main+0x86>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b498:	e1 ba 00 42 	mfsr	r10,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b49c:	12 38       	cp.w	r8,r9
8000b49e:	e0 88 00 08 	brls	8000b4ae <main+0xc2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b4a2:	14 38       	cp.w	r8,r10
8000b4a4:	fe 98 ff fa 	brls	8000b498 <main+0xac>
8000b4a8:	14 39       	cp.w	r9,r10
8000b4aa:	cd 13       	brcs	8000b44c <main+0x60>
8000b4ac:	cf 6b       	rjmp	8000b498 <main+0xac>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b4ae:	14 38       	cp.w	r8,r10
8000b4b0:	fe 9b ff ce 	brhi	8000b44c <main+0x60>
8000b4b4:	14 39       	cp.w	r9,r10
8000b4b6:	cc b3       	brcs	8000b44c <main+0x60>
8000b4b8:	cf 0b       	rjmp	8000b498 <main+0xac>
			delay_ms(500);
		}//inifinte loop
	}


	print_dbg("\n\rColumbus Ready!");
8000b4ba:	fe fc 05 d6 	ld.w	r12,pc[1494]
8000b4be:	f0 1f 01 6f 	mcall	8000ba78 <main+0x68c>
8000b4c2:	30 0e       	mov	lr,0
8000b4c4:	50 4e       	stdsp	sp[0x10],lr
8000b4c6:	50 2e       	stdsp	sp[0x8],lr
8000b4c8:	1c 91       	mov	r1,lr
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		print_dbg(PROMPT);
8000b4ca:	fe f4 05 ca 	ld.w	r4,pc[1482]
				}
				print_dbg("\rWorking Buffer:\n\r[");
				for(i = 0; i < SizeOfWorking_Buffer; i++)
				{
					print_dbg_ulong(Working_Buffer[i]);
					print_dbg(", ");
8000b4ce:	fe f3 05 ca 	ld.w	r3,pc[1482]
			case 'k':
				print_dbg("\rComplex Buffer:\n\r[");
				for (i = 0; i < SizeOfComplex_Buffer; i ++)
				{
					print_dbg_ulong(ComplexBuffer[i].real);
					print_dbg(" + j");
8000b4d2:	fe f0 05 ca 	ld.w	r0,pc[1482]

	print_dbg("\n\rColumbus Ready!");
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		print_dbg(PROMPT);
8000b4d6:	08 9c       	mov	r12,r4
8000b4d8:	f0 1f 01 68 	mcall	8000ba78 <main+0x68c>
		Get_Line(CommandBuffer);
8000b4dc:	fa cc ff ec 	sub	r12,sp,-20
8000b4e0:	f0 1f 01 70 	mcall	8000baa0 <main+0x6b4>
		Ptr = CommandBuffer;
		switch(*Ptr++)
8000b4e4:	fb 38 00 14 	ld.ub	r8,sp[20]
8000b4e8:	23 18       	sub	r8,49
8000b4ea:	e0 48 00 45 	cp.w	r8,69
8000b4ee:	e0 8b 02 9d 	brhi	8000ba28 <main+0x63c>
8000b4f2:	fe f9 05 b2 	ld.w	r9,pc[1458]
8000b4f6:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
					print_dbg(", ");
				}
				print_dbg("]\n\r");
				break;
			case 'M': //Motor Related
				while(*Ptr == ' ')
8000b4fa:	fb 39 00 15 	ld.ub	r9,sp[21]
8000b4fe:	32 08       	mov	r8,32
8000b500:	f0 09 18 00 	cp.b	r9,r8
8000b504:	e0 80 00 f2 	breq	8000b6e8 <main+0x2fc>
8000b508:	fa c8 ff eb 	sub	r8,sp,-21
8000b50c:	cf 68       	rjmp	8000b6f8 <main+0x30c>
		Get_Line(CommandBuffer);
		Ptr = CommandBuffer;
		switch(*Ptr++)
		{
			case '?':
				print_dbg(HELP);
8000b50e:	fe fc 05 9a 	ld.w	r12,pc[1434]
8000b512:	f0 1f 01 5a 	mcall	8000ba78 <main+0x68c>
				break;
8000b516:	ce 0b       	rjmp	8000b4d6 <main+0xea>

			case '1'://1d FFT (w/ memallocs)
				print_dbg("\r1D FFT;");
8000b518:	fe fc 05 94 	ld.w	r12,pc[1428]
8000b51c:	f0 1f 01 57 	mcall	8000ba78 <main+0x68c>
				SizeOfComplex_Buffer = FFT_SIZE;
				ComplexBuffer = mspace_malloc(sdram_msp,  SizeOfComplex_Buffer * sizeof(ComplexBuffer));
8000b520:	e0 6b 04 00 	mov	r11,1024
8000b524:	fe f8 05 8c 	ld.w	r8,pc[1420]
8000b528:	70 0c       	ld.w	r12,r8[0x0]
8000b52a:	f0 1f 01 63 	mcall	8000bab4 <main+0x6c8>
8000b52e:	50 3c       	stdsp	sp[0xc],r12
				FFT1D(Working_Buffer, ComplexBuffer);
8000b530:	18 9b       	mov	r11,r12
8000b532:	02 9c       	mov	r12,r1
8000b534:	f0 1f 01 61 	mcall	8000bab8 <main+0x6cc>
8000b538:	e0 68 01 00 	mov	r8,256
8000b53c:	50 48       	stdsp	sp[0x10],r8
				break;
8000b53e:	cc cb       	rjmp	8000b4d6 <main+0xea>
			case '2':
				print_dbg("\r2D FFT;");
8000b540:	fe fc 05 7c 	ld.w	r12,pc[1404]
8000b544:	f0 1f 01 4d 	mcall	8000ba78 <main+0x68c>
				FFT2Dabs(Working_Buffer);
8000b548:	02 9c       	mov	r12,r1
8000b54a:	f0 1f 01 5e 	mcall	8000bac0 <main+0x6d4>
				break;
8000b54e:	cc 4b       	rjmp	8000b4d6 <main+0xea>
			case '3':
				print_dbg("\rComplex FFT2D:");
8000b550:	fe fc 05 74 	ld.w	r12,pc[1396]
8000b554:	f0 1f 01 49 	mcall	8000ba78 <main+0x68c>
				SizeOfComplex_Buffer = FFT_SIZE * FFT_SIZE;
				ComplexBuffer = mspace_malloc(sdram_msp,  SizeOfComplex_Buffer * sizeof(ComplexBuffer));
8000b558:	e4 6b 00 00 	mov	r11,262144
8000b55c:	fe f8 05 54 	ld.w	r8,pc[1364]
8000b560:	70 0c       	ld.w	r12,r8[0x0]
8000b562:	f0 1f 01 55 	mcall	8000bab4 <main+0x6c8>
8000b566:	50 3c       	stdsp	sp[0xc],r12
				FFT2DCOMPLEX(Working_Buffer, ComplexBuffer, SizeOfWorking_Buffer);
8000b568:	40 2a       	lddsp	r10,sp[0x8]
8000b56a:	18 9b       	mov	r11,r12
8000b56c:	02 9c       	mov	r12,r1
8000b56e:	f0 1f 01 57 	mcall	8000bac8 <main+0x6dc>
8000b572:	e0 7e 00 00 	mov	lr,65536
8000b576:	50 4e       	stdsp	sp[0x10],lr
				break;
8000b578:	ca fb       	rjmp	8000b4d6 <main+0xea>
				
			case 'B': 
				print_dbg("\rReading Bitmap;");
8000b57a:	fe fc 05 52 	ld.w	r12,pc[1362]
8000b57e:	f0 1f 01 3f 	mcall	8000ba78 <main+0x68c>
				ReadBitmap("Image_R_0.bmp", &image);
8000b582:	fa cb ff cc 	sub	r11,sp,-52
8000b586:	fe fc 05 4a 	ld.w	r12,pc[1354]
8000b58a:	f0 1f 01 53 	mcall	8000bad4 <main+0x6e8>
				print_dbg("\n\rBitmap Data Returned:\n\rImage Height = ");
8000b58e:	fe fc 05 4a 	ld.w	r12,pc[1354]
8000b592:	f0 1f 01 3a 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(image.Height);
8000b596:	40 ec       	lddsp	r12,sp[0x38]
8000b598:	f0 1f 01 51 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rImage Width = ");
8000b59c:	fe fc 05 44 	ld.w	r12,pc[1348]
8000b5a0:	f0 1f 01 36 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(image.Width);
8000b5a4:	40 fc       	lddsp	r12,sp[0x3c]
8000b5a6:	f0 1f 01 4e 	mcall	8000badc <main+0x6f0>
				break;
8000b5aa:	c9 6b       	rjmp	8000b4d6 <main+0xea>
				
			case 'c':
				print_dbg("\rConverting Working Buffer to Fixed Point");
8000b5ac:	fe fc 05 38 	ld.w	r12,pc[1336]
8000b5b0:	f0 1f 01 32 	mcall	8000ba78 <main+0x68c>
				for(i = 0; i < SizeOfWorking_Buffer ; i++)
8000b5b4:	40 22       	lddsp	r2,sp[0x8]
8000b5b6:	58 02       	cp.w	r2,0
8000b5b8:	c8 f0       	breq	8000b4d6 <main+0xea>
8000b5ba:	02 97       	mov	r7,r1
8000b5bc:	30 06       	mov	r6,0
				{
					Working_Buffer[i] = DSP16_Q (Working_Buffer[i]);
8000b5be:	6e 05       	ld.w	r5,r7[0x0]
8000b5c0:	0a 9c       	mov	r12,r5
8000b5c2:	f0 1f 01 4a 	mcall	8000bae8 <main+0x6fc>
8000b5c6:	fa eb 00 00 	st.d	sp[0],r10
8000b5ca:	30 08       	mov	r8,0
8000b5cc:	e0 69 ff 80 	mov	r9,65408
8000b5d0:	ea 19 3f ef 	orh	r9,0x3fef
8000b5d4:	f0 1f 01 46 	mcall	8000baec <main+0x700>
8000b5d8:	c0 40       	breq	8000b5e0 <main+0x1f4>
8000b5da:	e0 68 7f ff 	mov	r8,32767
8000b5de:	c1 18       	rjmp	8000b600 <main+0x214>
8000b5e0:	fa e8 00 00 	ld.d	r8,sp[0]
8000b5e4:	30 0a       	mov	r10,0
8000b5e6:	e0 6b ff c0 	mov	r11,65472
8000b5ea:	ea 1b bf ef 	orh	r11,0xbfef
8000b5ee:	f0 1f 01 40 	mcall	8000baec <main+0x700>
8000b5f2:	c0 40       	breq	8000b5fa <main+0x20e>
8000b5f4:	fe 78 80 00 	mov	r8,-32768
8000b5f8:	c0 48       	rjmp	8000b600 <main+0x214>
8000b5fa:	ea 08 15 0f 	lsl	r8,r5,0xf
8000b5fe:	5c 88       	casts.h	r8
8000b600:	0e a8       	st.w	r7++,r8
				print_dbg_ulong(image.Width);
				break;
				
			case 'c':
				print_dbg("\rConverting Working Buffer to Fixed Point");
				for(i = 0; i < SizeOfWorking_Buffer ; i++)
8000b602:	2f f6       	sub	r6,-1
8000b604:	04 36       	cp.w	r6,r2
8000b606:	cd c3       	brcs	8000b5be <main+0x1d2>
8000b608:	c6 7b       	rjmp	8000b4d6 <main+0xea>
					Working_Buffer[i] = DSP16_Q (Working_Buffer[i]);
				}
				break;
			
			case 'C':
				print_dbg("\rConverting Working Buffer back from Fixed Point");
8000b60a:	fe fc 04 e6 	ld.w	r12,pc[1254]
8000b60e:	f0 1f 01 1b 	mcall	8000ba78 <main+0x68c>
				j = DSP16_Q(1);
				for(i = 0; i < SizeOfWorking_Buffer ; i++)
8000b612:	40 27       	lddsp	r7,sp[0x8]
8000b614:	58 07       	cp.w	r7,0
8000b616:	fe 90 ff 60 	breq	8000b4d6 <main+0xea>
8000b61a:	02 99       	mov	r9,r1
8000b61c:	30 08       	mov	r8,0
				{
					Working_Buffer[i] = Working_Buffer[i] / j;
8000b61e:	72 0c       	ld.w	r12,r9[0x0]
8000b620:	e2 6e 00 05 	mov	lr,131077
8000b624:	f8 0e 06 4a 	mulu.d	r10,r12,lr
8000b628:	16 1c       	sub	r12,r11
8000b62a:	a1 9c       	lsr	r12,0x1
8000b62c:	f8 0b 00 0b 	add	r11,r12,r11
8000b630:	af 8b       	lsr	r11,0xe
8000b632:	12 ab       	st.w	r9++,r11
				break;
			
			case 'C':
				print_dbg("\rConverting Working Buffer back from Fixed Point");
				j = DSP16_Q(1);
				for(i = 0; i < SizeOfWorking_Buffer ; i++)
8000b634:	2f f8       	sub	r8,-1
8000b636:	10 37       	cp.w	r7,r8
8000b638:	fe 9b ff f3 	brhi	8000b61e <main+0x232>
8000b63c:	c4 db       	rjmp	8000b4d6 <main+0xea>
					Working_Buffer[i] = Working_Buffer[i] / j;
				}
				break;
			
			case 'D':
				print_dbg("\rFreeing Working Buffer");
8000b63e:	fe fc 04 b6 	ld.w	r12,pc[1206]
8000b642:	f0 1f 01 0e 	mcall	8000ba78 <main+0x68c>
				mspace_free(sdram_msp, Working_Buffer);
8000b646:	02 9b       	mov	r11,r1
8000b648:	fe f8 04 68 	ld.w	r8,pc[1128]
8000b64c:	70 0c       	ld.w	r12,r8[0x0]
8000b64e:	f0 1f 01 2b 	mcall	8000baf8 <main+0x70c>
				break;
8000b652:	c4 2b       	rjmp	8000b4d6 <main+0xea>
			
			case 'i':
				print_dbg("\rImage info:");
8000b654:	fe fc 04 a8 	ld.w	r12,pc[1192]
8000b658:	f0 1f 01 08 	mcall	8000ba78 <main+0x68c>
				print_dbg("\n\rImage Pointer = ");
8000b65c:	fe fc 04 a4 	ld.w	r12,pc[1188]
8000b660:	f0 1f 01 06 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(image.ImagePtr);
8000b664:	40 dc       	lddsp	r12,sp[0x34]
8000b666:	f0 1f 01 1e 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rImage Height = ");
8000b66a:	fe fc 04 9a 	ld.w	r12,pc[1178]
8000b66e:	f0 1f 01 03 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(image.Height);
8000b672:	40 ec       	lddsp	r12,sp[0x38]
8000b674:	f0 1f 01 1a 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rImage Width = ");
8000b678:	fe fc 04 68 	ld.w	r12,pc[1128]
8000b67c:	f0 1f 00 ff 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(image.Width);
8000b680:	40 fc       	lddsp	r12,sp[0x3c]
8000b682:	f0 1f 01 17 	mcall	8000badc <main+0x6f0>
				break;
8000b686:	c2 8b       	rjmp	8000b4d6 <main+0xea>
					
			case 'I':
				print_dbg("\rInverse Fourier Transform;");
8000b688:	fe fc 04 80 	ld.w	r12,pc[1152]
8000b68c:	f0 1f 00 fb 	mcall	8000ba78 <main+0x68c>
				IFFT2D(ComplexBuffer);
8000b690:	40 3c       	lddsp	r12,sp[0xc]
8000b692:	f0 1f 01 1f 	mcall	8000bb0c <main+0x720>
				break;
8000b696:	c2 0b       	rjmp	8000b4d6 <main+0xea>
				
			case 'k':
				print_dbg("\rComplex Buffer:\n\r[");
8000b698:	fe fc 04 78 	ld.w	r12,pc[1144]
8000b69c:	f0 1f 00 f7 	mcall	8000ba78 <main+0x68c>
				for (i = 0; i < SizeOfComplex_Buffer; i ++)
8000b6a0:	40 45       	lddsp	r5,sp[0x10]
8000b6a2:	58 05       	cp.w	r5,0
8000b6a4:	c1 d0       	breq	8000b6de <main+0x2f2>
8000b6a6:	40 37       	lddsp	r7,sp[0xc]
8000b6a8:	30 06       	mov	r6,0
				{
					print_dbg_ulong(ComplexBuffer[i].real);
8000b6aa:	0f 8c       	ld.ub	r12,r7[0x0]
8000b6ac:	0f 98       	ld.ub	r8,r7[0x1]
8000b6ae:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
8000b6b2:	b1 6c       	lsl	r12,0x10
8000b6b4:	b1 4c       	asr	r12,0x10
8000b6b6:	f0 1f 01 0a 	mcall	8000badc <main+0x6f0>
					print_dbg(" + j");
8000b6ba:	00 9c       	mov	r12,r0
8000b6bc:	f0 1f 00 ef 	mcall	8000ba78 <main+0x68c>
					print_dbg_ulong(ComplexBuffer[i].imag);
8000b6c0:	0f ac       	ld.ub	r12,r7[0x2]
8000b6c2:	0f b8       	ld.ub	r8,r7[0x3]
8000b6c4:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
8000b6c8:	b1 6c       	lsl	r12,0x10
8000b6ca:	b1 4c       	asr	r12,0x10
8000b6cc:	f0 1f 01 04 	mcall	8000badc <main+0x6f0>
					print_dbg(", ");
8000b6d0:	06 9c       	mov	r12,r3
8000b6d2:	f0 1f 00 ea 	mcall	8000ba78 <main+0x68c>
				IFFT2D(ComplexBuffer);
				break;
				
			case 'k':
				print_dbg("\rComplex Buffer:\n\r[");
				for (i = 0; i < SizeOfComplex_Buffer; i ++)
8000b6d6:	2f f6       	sub	r6,-1
8000b6d8:	2f c7       	sub	r7,-4
8000b6da:	0a 36       	cp.w	r6,r5
8000b6dc:	ce 73       	brcs	8000b6aa <main+0x2be>
					print_dbg_ulong(ComplexBuffer[i].real);
					print_dbg(" + j");
					print_dbg_ulong(ComplexBuffer[i].imag);
					print_dbg(", ");
				}
				print_dbg("]\n\r");
8000b6de:	fe fc 04 36 	ld.w	r12,pc[1078]
8000b6e2:	f0 1f 00 e6 	mcall	8000ba78 <main+0x68c>
				break;
8000b6e6:	cf 8a       	rjmp	8000b4d6 <main+0xea>
8000b6e8:	fa c8 ff eb 	sub	r8,sp,-21
			case 'M': //Motor Related
				while(*Ptr == ' ')
8000b6ec:	32 0a       	mov	r10,32
					Ptr++; //Find next non - space char
8000b6ee:	2f f8       	sub	r8,-1
					print_dbg(", ");
				}
				print_dbg("]\n\r");
				break;
			case 'M': //Motor Related
				while(*Ptr == ' ')
8000b6f0:	11 89       	ld.ub	r9,r8[0x0]
8000b6f2:	f4 09 18 00 	cp.b	r9,r10
8000b6f6:	cf c0       	breq	8000b6ee <main+0x302>
					Ptr++; //Find next non - space char
				
				switch(*(Ptr++))
8000b6f8:	f0 cc ff ff 	sub	r12,r8,-1
8000b6fc:	24 69       	sub	r9,70
8000b6fe:	e0 49 00 2c 	cp.w	r9,44
8000b702:	e0 8b 00 59 	brhi	8000b7b4 <main+0x3c8>
8000b706:	fe f8 04 12 	ld.w	r8,pc[1042]
8000b70a:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
							Ptr++; //Find next non - space char
						i = atoi(Ptr);
						Motors_Move(i);
						break;
					case 'T':
						while(*Ptr == ' ')
8000b70e:	19 89       	ld.ub	r9,r12[0x0]
8000b710:	32 08       	mov	r8,32
8000b712:	f0 09 18 00 	cp.b	r9,r8
8000b716:	c1 c0       	breq	8000b74e <main+0x362>
8000b718:	c2 18       	rjmp	8000b75a <main+0x36e>
						print_dbg("\rResetting Motors");
						Motors_Reset();
						break;
					
					case 'F': //Move Forward 
						while(*Ptr == ' ')
8000b71a:	19 89       	ld.ub	r9,r12[0x0]
8000b71c:	32 08       	mov	r8,32
8000b71e:	f0 09 18 00 	cp.b	r9,r8
8000b722:	c0 a0       	breq	8000b736 <main+0x34a>
8000b724:	c0 f8       	rjmp	8000b742 <main+0x356>
					Ptr++; //Find next non - space char
				
				switch(*(Ptr++))
				{
					case 'q': // Reset Motors
						print_dbg("\rResetting Motors");
8000b726:	fe fc 03 f6 	ld.w	r12,pc[1014]
8000b72a:	f0 1f 00 d4 	mcall	8000ba78 <main+0x68c>
						Motors_Reset();
8000b72e:	f0 1f 00 fd 	mcall	8000bb20 <main+0x734>
						break;
8000b732:	fe 9f fe d2 	bral	8000b4d6 <main+0xea>
					
					case 'F': //Move Forward 
						while(*Ptr == ' ')
8000b736:	32 09       	mov	r9,32
							Ptr++; //Find next non - space char
8000b738:	2f fc       	sub	r12,-1
						print_dbg("\rResetting Motors");
						Motors_Reset();
						break;
					
					case 'F': //Move Forward 
						while(*Ptr == ' ')
8000b73a:	19 88       	ld.ub	r8,r12[0x0]
8000b73c:	f2 08 18 00 	cp.b	r8,r9
8000b740:	cf c0       	breq	8000b738 <main+0x34c>
							Ptr++; //Find next non - space char
						i = atoi(Ptr);
8000b742:	f0 1f 00 f9 	mcall	8000bb24 <main+0x738>
						Motors_Move(i);
8000b746:	f0 1f 00 f9 	mcall	8000bb28 <main+0x73c>
						break;
8000b74a:	fe 9f fe c6 	bral	8000b4d6 <main+0xea>
					case 'T':
						while(*Ptr == ' ')
8000b74e:	32 09       	mov	r9,32
						Ptr++; //Find next non - space char
8000b750:	2f fc       	sub	r12,-1
							Ptr++; //Find next non - space char
						i = atoi(Ptr);
						Motors_Move(i);
						break;
					case 'T':
						while(*Ptr == ' ')
8000b752:	19 88       	ld.ub	r8,r12[0x0]
8000b754:	f2 08 18 00 	cp.b	r8,r9
8000b758:	cf c0       	breq	8000b750 <main+0x364>
						Ptr++; //Find next non - space char
						i = atoi(Ptr);
8000b75a:	f0 1f 00 f3 	mcall	8000bb24 <main+0x738>
						Motors_Rotate(i);
8000b75e:	f0 1f 00 f4 	mcall	8000bb2c <main+0x740>
						break;
8000b762:	fe 9f fe ba 	bral	8000b4d6 <main+0xea>
					case 'l':
						Motor_Stop(MOTOR_L);
8000b766:	30 1c       	mov	r12,1
8000b768:	f0 1f 00 f2 	mcall	8000bb30 <main+0x744>
						break;
8000b76c:	fe 9f fe b5 	bral	8000b4d6 <main+0xea>
					case 'L':
						Columbus_Status.Motors->Left_Count = INTERRUPTS_PER_REVOLUTION + 1;
8000b770:	fe f8 02 ec 	ld.w	r8,pc[748]
8000b774:	70 29       	ld.w	r9,r8[0x8]
8000b776:	30 6a       	mov	r10,6
8000b778:	93 2a       	st.w	r9[0x8],r10
						Columbus_Status.Motors->Left_State = FORWARD;
8000b77a:	70 28       	ld.w	r8,r8[0x8]
8000b77c:	30 29       	mov	r9,2
8000b77e:	91 09       	st.w	r8[0x0],r9
						Motor_Start(MOTOR_L);
8000b780:	30 1c       	mov	r12,1
8000b782:	f0 1f 00 ed 	mcall	8000bb34 <main+0x748>
						Motors_Execute();
8000b786:	f0 1f 00 ed 	mcall	8000bb38 <main+0x74c>
						break;
8000b78a:	fe 9f fe a6 	bral	8000b4d6 <main+0xea>
					case 'r':
						Motor_Stop(MOTOR_R);
8000b78e:	30 2c       	mov	r12,2
8000b790:	f0 1f 00 e8 	mcall	8000bb30 <main+0x744>
						break;
8000b794:	fe 9f fe a1 	bral	8000b4d6 <main+0xea>
					case 'R':
						Columbus_Status.Motors->Right_Count = INTERRUPTS_PER_REVOLUTION + 1;
8000b798:	fe f8 02 c4 	ld.w	r8,pc[708]
8000b79c:	70 29       	ld.w	r9,r8[0x8]
8000b79e:	30 6a       	mov	r10,6
8000b7a0:	93 3a       	st.w	r9[0xc],r10
						Columbus_Status.Motors->Right_State = FORWARD;
8000b7a2:	70 28       	ld.w	r8,r8[0x8]
8000b7a4:	30 2c       	mov	r12,2
8000b7a6:	91 1c       	st.w	r8[0x4],r12
						Motor_Start(MOTOR_R);
8000b7a8:	f0 1f 00 e3 	mcall	8000bb34 <main+0x748>
						Motors_Execute();
8000b7ac:	f0 1f 00 e3 	mcall	8000bb38 <main+0x74c>
						break;
8000b7b0:	fe 9f fe 93 	bral	8000b4d6 <main+0xea>
					default:
						print_dbg("\rCommand Not Recognised");
8000b7b4:	fe fc 03 88 	ld.w	r12,pc[904]
8000b7b8:	f0 1f 00 b0 	mcall	8000ba78 <main+0x68c>
8000b7bc:	fe 9f fe 8d 	bral	8000b4d6 <main+0xea>
				}
				
				break;
				
			case 'p':
				print_dbg("\rPreparing Image;");
8000b7c0:	fe fc 03 80 	ld.w	r12,pc[896]
8000b7c4:	f0 1f 00 ad 	mcall	8000ba78 <main+0x68c>
				PrepareImage(&image);
8000b7c8:	fa cc ff cc 	sub	r12,sp,-52
8000b7cc:	f0 1f 00 de 	mcall	8000bb44 <main+0x758>
				print_dbg("\rImage Prepared!");
8000b7d0:	fe fc 03 78 	ld.w	r12,pc[888]
8000b7d4:	f0 1f 00 a9 	mcall	8000ba78 <main+0x68c>
				break;
8000b7d8:	fe 9f fe 7f 	bral	8000b4d6 <main+0xea>
				
			case 'P'://take a photo
				FIFO_Reset(CAMERA_LEFT | CAMERA_RIGHT);
8000b7dc:	30 3c       	mov	r12,3
8000b7de:	f0 1f 00 dc 	mcall	8000bb4c <main+0x760>
				print_dbg("\rTaking Photos");
8000b7e2:	fe fc 03 6e 	ld.w	r12,pc[878]
8000b7e6:	f0 1f 00 a5 	mcall	8000ba78 <main+0x68c>
				if(TakePhoto(CAMERA_LEFT | CAMERA_RIGHT) == CAMERAS_BUSY){
8000b7ea:	30 3c       	mov	r12,3
8000b7ec:	f0 1f 00 da 	mcall	8000bb54 <main+0x768>
8000b7f0:	58 4c       	cp.w	r12,4
8000b7f2:	c0 71       	brne	8000b800 <main+0x414>
					print_dbg("Cameras Busy");
8000b7f4:	fe fc 03 64 	ld.w	r12,pc[868]
8000b7f8:	f0 1f 00 a0 	mcall	8000ba78 <main+0x68c>
					break;
8000b7fc:	fe 9f fe 6d 	bral	8000b4d6 <main+0xea>
				}					
				while(Photos_Ready() == false)
8000b800:	f0 1f 00 d7 	mcall	8000bb5c <main+0x770>
8000b804:	cf e0       	breq	8000b800 <main+0x414>
					;

				if(Store_Both_Images() == true)
8000b806:	f0 1f 00 d7 	mcall	8000bb60 <main+0x774>
8000b80a:	fe 90 fe 66 	breq	8000b4d6 <main+0xea>
					print_dbg("\n\rImages Stored Successfully!");
8000b80e:	fe fc 03 56 	ld.w	r12,pc[854]
8000b812:	f0 1f 00 9a 	mcall	8000ba78 <main+0x68c>
8000b816:	fe 9f fe 60 	bral	8000b4d6 <main+0xea>
				break;
				
			case 'r':
				if (Working_Buffer == 0)
8000b81a:	58 01       	cp.w	r1,0
8000b81c:	c0 71       	brne	8000b82a <main+0x43e>
				{
					print_dbg("\rWorking Buffer Not Initialised");
8000b81e:	fe fc 03 4a 	ld.w	r12,pc[842]
8000b822:	f0 1f 00 96 	mcall	8000ba78 <main+0x68c>
					break;
8000b826:	fe 9f fe 58 	bral	8000b4d6 <main+0xea>
				}
				print_dbg("\rWorking Buffer:\n\r[");
8000b82a:	fe fc 03 42 	ld.w	r12,pc[834]
8000b82e:	f0 1f 00 93 	mcall	8000ba78 <main+0x68c>
				for(i = 0; i < SizeOfWorking_Buffer; i++)
8000b832:	40 25       	lddsp	r5,sp[0x8]
8000b834:	58 05       	cp.w	r5,0
8000b836:	c0 c0       	breq	8000b84e <main+0x462>
8000b838:	02 96       	mov	r6,r1
8000b83a:	30 07       	mov	r7,0
				{
					print_dbg_ulong(Working_Buffer[i]);
8000b83c:	0d 0c       	ld.w	r12,r6++
8000b83e:	f0 1f 00 a8 	mcall	8000badc <main+0x6f0>
					print_dbg(", ");
8000b842:	06 9c       	mov	r12,r3
8000b844:	f0 1f 00 8d 	mcall	8000ba78 <main+0x68c>
				{
					print_dbg("\rWorking Buffer Not Initialised");
					break;
				}
				print_dbg("\rWorking Buffer:\n\r[");
				for(i = 0; i < SizeOfWorking_Buffer; i++)
8000b848:	2f f7       	sub	r7,-1
8000b84a:	0a 37       	cp.w	r7,r5
8000b84c:	cf 83       	brcs	8000b83c <main+0x450>
				{
					print_dbg_ulong(Working_Buffer[i]);
					print_dbg(", ");
				}
				print_dbg("\b\b]\n\r");
8000b84e:	fe fc 03 22 	ld.w	r12,pc[802]
8000b852:	f0 1f 00 8a 	mcall	8000ba78 <main+0x68c>
				break;
8000b856:	fe 9f fe 40 	bral	8000b4d6 <main+0xea>
			case 'R':
				Working_Buffer = mspace_malloc(sdram_msp, FFT_SIZE);
8000b85a:	e0 6b 01 00 	mov	r11,256
8000b85e:	fe f8 02 52 	ld.w	r8,pc[594]
8000b862:	70 0c       	ld.w	r12,r8[0x0]
8000b864:	f0 1f 00 94 	mcall	8000bab4 <main+0x6c8>
8000b868:	18 91       	mov	r1,r12
				SizeOfWorking_Buffer = FFT_SIZE;
				print_dbg("\rReading in signal.bin");
8000b86a:	fe fc 03 0a 	ld.w	r12,pc[778]
8000b86e:	f0 1f 00 83 	mcall	8000ba78 <main+0x68c>
				ReadSignal(Working_Buffer);
8000b872:	02 9c       	mov	r12,r1
8000b874:	f0 1f 00 c1 	mcall	8000bb78 <main+0x78c>
8000b878:	e0 68 01 00 	mov	r8,256
8000b87c:	50 28       	stdsp	sp[0x8],r8
				break;
8000b87e:	fe 9f fe 2c 	bral	8000b4d6 <main+0xea>

			case 's'://save the working buffer
				print_dbg("\rSaving Working Buffer;");
8000b882:	fe fc 02 fa 	ld.w	r12,pc[762]
8000b886:	f0 1f 00 7d 	mcall	8000ba78 <main+0x68c>
				SaveBuff(Working_Buffer, SizeOfWorking_Buffer);
8000b88a:	40 2b       	lddsp	r11,sp[0x8]
8000b88c:	02 9c       	mov	r12,r1
8000b88e:	f0 1f 00 bd 	mcall	8000bb80 <main+0x794>
				break;
8000b892:	fe 9f fe 22 	bral	8000b4d6 <main+0xea>
			case 'd':
				print_dbg("\rSaving Working Buffer as CSV;");
8000b896:	fe fc 02 ee 	ld.w	r12,pc[750]
8000b89a:	f0 1f 00 78 	mcall	8000ba78 <main+0x68c>
				SaveBuff_CSV("Buffer_result.csv", Working_Buffer, SizeOfWorking_Buffer);
8000b89e:	40 2a       	lddsp	r10,sp[0x8]
8000b8a0:	02 9b       	mov	r11,r1
8000b8a2:	fe fc 02 e6 	ld.w	r12,pc[742]
8000b8a6:	f0 1f 00 ba 	mcall	8000bb8c <main+0x7a0>
				break;
8000b8aa:	fe 9f fe 16 	bral	8000b4d6 <main+0xea>
			case 'g':
				print_dbg("\rSaving Complex Buffer as CSV");
8000b8ae:	fe fc 02 e2 	ld.w	r12,pc[738]
8000b8b2:	f0 1f 00 72 	mcall	8000ba78 <main+0x68c>
				SaveCBuff_CSV("Buffer_Complex.csv", ComplexBuffer, SizeOfComplex_Buffer);
8000b8b6:	40 4a       	lddsp	r10,sp[0x10]
8000b8b8:	40 3b       	lddsp	r11,sp[0xc]
8000b8ba:	fe fc 02 da 	ld.w	r12,pc[730]
8000b8be:	f0 1f 00 b7 	mcall	8000bb98 <main+0x7ac>
				break;
8000b8c2:	fe 9f fe 0a 	bral	8000b4d6 <main+0xea>
			case 'f':
				Working_Buffer = mspace_malloc(sdram_msp, FFT_SIZE);
8000b8c6:	e0 6b 01 00 	mov	r11,256
8000b8ca:	4f a8       	lddpc	r8,8000bab0 <main+0x6c4>
8000b8cc:	70 0c       	ld.w	r12,r8[0x0]
8000b8ce:	f0 1f 00 7a 	mcall	8000bab4 <main+0x6c8>
8000b8d2:	18 91       	mov	r1,r12
				SizeOfWorking_Buffer = FFT_SIZE;
				print_dbg("\rReading in Buffer.csv");
8000b8d4:	fe fc 02 c8 	ld.w	r12,pc[712]
8000b8d8:	f0 1f 00 68 	mcall	8000ba78 <main+0x68c>
				Read_CSV("Buffer.csv", Working_Buffer, SizeOfWorking_Buffer);
8000b8dc:	e0 6a 01 00 	mov	r10,256
8000b8e0:	02 9b       	mov	r11,r1
8000b8e2:	fe fc 02 be 	ld.w	r12,pc[702]
8000b8e6:	f0 1f 00 b0 	mcall	8000bba4 <main+0x7b8>
				print_dbg("\n\rComplete!");
8000b8ea:	fe fc 02 be 	ld.w	r12,pc[702]
8000b8ee:	f0 1f 00 63 	mcall	8000ba78 <main+0x68c>
8000b8f2:	e0 6e 01 00 	mov	lr,256
8000b8f6:	50 2e       	stdsp	sp[0x8],lr
				break;
8000b8f8:	fe 9f fd ef 	bral	8000b4d6 <main+0xea>
			
			case 'S':
				print_dbg("\rSaving Bitmap;");
8000b8fc:	fe fc 02 b0 	ld.w	r12,pc[688]
8000b900:	f0 1f 00 5e 	mcall	8000ba78 <main+0x68c>
				SaveBitmap(image.ImagePtr, image.Width, image.Height, "ResavedImage.bmp");
8000b904:	fe f9 02 ac 	ld.w	r9,pc[684]
8000b908:	40 ea       	lddsp	r10,sp[0x38]
8000b90a:	40 fb       	lddsp	r11,sp[0x3c]
8000b90c:	40 dc       	lddsp	r12,sp[0x34]
8000b90e:	f0 1f 00 aa 	mcall	8000bbb4 <main+0x7c8>
				print_dbg("\rSaved Bitmap!;");
8000b912:	fe fc 02 a6 	ld.w	r12,pc[678]
8000b916:	f0 1f 00 59 	mcall	8000ba78 <main+0x68c>
				break;
8000b91a:	fe 9f fd de 	bral	8000b4d6 <main+0xea>
				
			case 'T':
				print_dbg("\rReading in 2D Signal");
8000b91e:	fe fc 02 9e 	ld.w	r12,pc[670]
8000b922:	f0 1f 00 56 	mcall	8000ba78 <main+0x68c>
				Working_Buffer = mspace_malloc(sdram_msp, FFT_SIZE * FFT_SIZE);
8000b926:	e0 7b 00 00 	mov	r11,65536
8000b92a:	4e 28       	lddpc	r8,8000bab0 <main+0x6c4>
8000b92c:	70 0c       	ld.w	r12,r8[0x0]
8000b92e:	f0 1f 00 62 	mcall	8000bab4 <main+0x6c8>
8000b932:	18 91       	mov	r1,r12
				SizeOfWorking_Buffer = FFT_SIZE * FFT_SIZE;
				Read2DSignal(Working_Buffer);
8000b934:	f0 1f 00 a3 	mcall	8000bbc0 <main+0x7d4>
8000b938:	e0 78 00 00 	mov	r8,65536
8000b93c:	50 28       	stdsp	sp[0x8],r8
				break;
8000b93e:	fe 9f fd cc 	bral	8000b4d6 <main+0xea>
			case 'v':
				print_dbg("\rColumbus Status:");
8000b942:	fe fc 02 82 	ld.w	r12,pc[642]
8000b946:	f0 1f 00 4d 	mcall	8000ba78 <main+0x68c>
				print_dbg("\n\rSD Card:\n\rStatus: ");
8000b94a:	fe fc 02 7e 	ld.w	r12,pc[638]
8000b94e:	f0 1f 00 4b 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.SD_Card->Status);
8000b952:	4c 37       	lddpc	r7,8000ba5c <main+0x670>
8000b954:	6e 18       	ld.w	r8,r7[0x4]
8000b956:	11 8c       	ld.ub	r12,r8[0x0]
8000b958:	f0 1f 00 61 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rMemory Size : ");
8000b95c:	fe fc 02 70 	ld.w	r12,pc[624]
8000b960:	f0 1f 00 46 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.SD_Card->Memory_size);
8000b964:	6e 18       	ld.w	r8,r7[0x4]
8000b966:	70 1c       	ld.w	r12,r8[0x4]
8000b968:	f0 1f 00 5d 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rMotors:");
8000b96c:	fe fc 02 64 	ld.w	r12,pc[612]
8000b970:	f0 1f 00 42 	mcall	8000ba78 <main+0x68c>
				print_dbg("\n\rLeft State : ");
8000b974:	fe fc 02 60 	ld.w	r12,pc[608]
8000b978:	f0 1f 00 40 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Motors->Left_State);
8000b97c:	6e 28       	ld.w	r8,r7[0x8]
8000b97e:	70 0c       	ld.w	r12,r8[0x0]
8000b980:	f0 1f 00 57 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rLeft Count : ");
8000b984:	fe fc 02 54 	ld.w	r12,pc[596]
8000b988:	f0 1f 00 3c 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Motors->Left_Count);
8000b98c:	6e 28       	ld.w	r8,r7[0x8]
8000b98e:	70 2c       	ld.w	r12,r8[0x8]
8000b990:	f0 1f 00 53 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rRight State : ");
8000b994:	fe fc 02 48 	ld.w	r12,pc[584]
8000b998:	f0 1f 00 38 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Motors->Right_State);
8000b99c:	6e 28       	ld.w	r8,r7[0x8]
8000b99e:	70 1c       	ld.w	r12,r8[0x4]
8000b9a0:	f0 1f 00 4f 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rRight Count : ");
8000b9a4:	fe fc 02 3c 	ld.w	r12,pc[572]
8000b9a8:	f0 1f 00 34 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Motors->Right_Count);
8000b9ac:	6e 28       	ld.w	r8,r7[0x8]
8000b9ae:	70 3c       	ld.w	r12,r8[0xc]
8000b9b0:	f0 1f 00 4b 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rCameras:");
8000b9b4:	fe fc 02 30 	ld.w	r12,pc[560]
8000b9b8:	f0 1f 00 30 	mcall	8000ba78 <main+0x68c>
				print_dbg("\n\rStatus : ");
8000b9bc:	fe f6 02 2c 	ld.w	r6,pc[556]
8000b9c0:	0c 9c       	mov	r12,r6
8000b9c2:	f0 1f 00 2e 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Cameras->Status);
8000b9c6:	6e 38       	ld.w	r8,r7[0xc]
8000b9c8:	11 8c       	ld.ub	r12,r8[0x0]
8000b9ca:	f0 1f 00 45 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rVSYNC0 State : ");
8000b9ce:	fe fc 02 1e 	ld.w	r12,pc[542]
8000b9d2:	f0 1f 00 2a 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Cameras->VSYNC0_State);
8000b9d6:	6e 38       	ld.w	r8,r7[0xc]
8000b9d8:	11 dc       	ld.ub	r12,r8[0x5]
8000b9da:	f0 1f 00 41 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rVSYNC1 State : ");
8000b9de:	fe fc 02 12 	ld.w	r12,pc[530]
8000b9e2:	f0 1f 00 26 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.Cameras->VSYNC1_State);
8000b9e6:	6e 38       	ld.w	r8,r7[0xc]
8000b9e8:	11 ec       	ld.ub	r12,r8[0x6]
8000b9ea:	f0 1f 00 3d 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rI2C Mux:");
8000b9ee:	fe fc 02 06 	ld.w	r12,pc[518]
8000b9f2:	f0 1f 00 22 	mcall	8000ba78 <main+0x68c>
				print_dbg("\n\rStatus : ");
8000b9f6:	0c 9c       	mov	r12,r6
8000b9f8:	f0 1f 00 20 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.I2CMux->Status);
8000b9fc:	6e 48       	ld.w	r8,r7[0x10]
8000b9fe:	11 8c       	ld.ub	r12,r8[0x0]
8000ba00:	f0 1f 00 37 	mcall	8000badc <main+0x6f0>
				print_dbg("\n\rChannel Selected : ");
8000ba04:	4f dc       	lddpc	r12,8000bbf8 <main+0x80c>
8000ba06:	f0 1f 00 1d 	mcall	8000ba78 <main+0x68c>
				print_dbg_ulong(Columbus_Status.I2CMux->ChannelSelected);
8000ba0a:	6e 48       	ld.w	r8,r7[0x10]
8000ba0c:	11 9c       	ld.ub	r12,r8[0x1]
8000ba0e:	f0 1f 00 34 	mcall	8000badc <main+0x6f0>
				break;
8000ba12:	fe 9f fd 62 	bral	8000b4d6 <main+0xea>
			case 'o':
				print_dbg("\r1 in Fixed point = ");
8000ba16:	4f ac       	lddpc	r12,8000bbfc <main+0x810>
8000ba18:	f0 1f 00 18 	mcall	8000ba78 <main+0x68c>
				i = DSP16_Q(1);
				print_dbg_ulong(i);
8000ba1c:	e0 6c 7f ff 	mov	r12,32767
8000ba20:	f0 1f 00 2f 	mcall	8000badc <main+0x6f0>
				break;
8000ba24:	fe 9f fd 59 	bral	8000b4d6 <main+0xea>
// 				mspace_free(sdram_msp, ComplexBuffer);
// 				SizeOfComplex_Buffer = 0;
// 				break;
	
			default:
				print_dbg("\rCommand Not Recognised;");
8000ba28:	4f 6c       	lddpc	r12,8000bc00 <main+0x814>
8000ba2a:	f0 1f 00 14 	mcall	8000ba78 <main+0x68c>
8000ba2e:	fe 9f fd 54 	bral	8000b4d6 <main+0xea>
			LED3_SET;
			LED4_SET;
			LED5_SET;
			LED6_SET;
			delay_ms(500);
			LED2_CLR;
8000ba32:	0c 9c       	mov	r12,r6
8000ba34:	f0 1f 00 74 	mcall	8000bc04 <main+0x818>
			LED3_CLR;
8000ba38:	0e 9c       	mov	r12,r7
8000ba3a:	f0 1f 00 73 	mcall	8000bc04 <main+0x818>
			LED4_CLR;
8000ba3e:	0a 9c       	mov	r12,r5
8000ba40:	f0 1f 00 71 	mcall	8000bc04 <main+0x818>
			LED5_CLR;
8000ba44:	08 9c       	mov	r12,r4
8000ba46:	f0 1f 00 70 	mcall	8000bc04 <main+0x818>
			LED6_CLR;
8000ba4a:	06 9c       	mov	r12,r3
8000ba4c:	f0 1f 00 6e 	mcall	8000bc04 <main+0x818>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ba50:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000ba54:	f0 02 00 09 	add	r9,r8,r2
8000ba58:	fe 9f fd 20 	bral	8000b498 <main+0xac>
8000ba5c:	00 00       	add	r0,r0
8000ba5e:	1a 90       	mov	r0,sp
8000ba60:	00 00       	add	r0,r0
8000ba62:	1a 86       	andn	r6,sp
8000ba64:	00 00       	add	r0,r0
8000ba66:	1a 84       	andn	r4,sp
8000ba68:	00 00       	add	r0,r0
8000ba6a:	1a 7c       	tst	r12,sp
8000ba6c:	00 00       	add	r0,r0
8000ba6e:	1a e4       	st.h	--sp,r4
8000ba70:	80 00       	ld.sh	r0,r0[0x0]
8000ba72:	72 1c       	ld.w	r12,r9[0x4]
8000ba74:	80 01       	ld.sh	r1,r0[0x0]
8000ba76:	26 fc       	sub	r12,111
8000ba78:	80 00       	ld.sh	r0,r0[0x0]
8000ba7a:	6f f0       	ld.w	r0,r7[0x7c]
8000ba7c:	80 01       	ld.sh	r1,r0[0x0]
8000ba7e:	2e 04       	sub	r4,-32
8000ba80:	80 01       	ld.sh	r1,r0[0x0]
8000ba82:	2f 0c       	sub	r12,-16
8000ba84:	80 01       	ld.sh	r1,r0[0x0]
8000ba86:	31 60       	mov	r0,22
8000ba88:	80 00       	ld.sh	r0,r0[0x0]
8000ba8a:	71 78       	ld.w	r8,r8[0x5c]
8000ba8c:	80 00       	ld.sh	r0,r0[0x0]
8000ba8e:	32 0a       	mov	r10,32
8000ba90:	80 01       	ld.sh	r1,r0[0x0]
8000ba92:	32 9c       	mov	r12,41
8000ba94:	80 01       	ld.sh	r1,r0[0x0]
8000ba96:	32 b0       	mov	r0,43
8000ba98:	80 01       	ld.sh	r1,r0[0x0]
8000ba9a:	36 94       	mov	r4,105
8000ba9c:	80 01       	ld.sh	r1,r0[0x0]
8000ba9e:	36 8c       	mov	r12,104
8000baa0:	80 00       	ld.sh	r0,r0[0x0]
8000baa2:	b3 a0       	sbr	r0,0x12
8000baa4:	80 01       	ld.sh	r1,r0[0x0]
8000baa6:	2c 38       	sub	r8,-61
8000baa8:	80 01       	ld.sh	r1,r0[0x0]
8000baaa:	32 b8       	mov	r8,43
8000baac:	80 01       	ld.sh	r1,r0[0x0]
8000baae:	35 20       	mov	r0,82
8000bab0:	00 00       	add	r0,r0
8000bab2:	1a a4       	st.w	sp++,r4
8000bab4:	80 00       	ld.sh	r0,r0[0x0]
8000bab6:	90 18       	ld.sh	r8,r8[0x2]
8000bab8:	80 00       	ld.sh	r0,r0[0x0]
8000baba:	97 1c       	st.w	r11[0x4],r12
8000babc:	80 01       	ld.sh	r1,r0[0x0]
8000babe:	35 2c       	mov	r12,82
8000bac0:	80 00       	ld.sh	r0,r0[0x0]
8000bac2:	98 c0       	ld.uh	r0,r12[0x8]
8000bac4:	80 01       	ld.sh	r1,r0[0x0]
8000bac6:	35 38       	mov	r8,83
8000bac8:	80 00       	ld.sh	r0,r0[0x0]
8000baca:	97 8c       	st.w	r11[0x20],r12
8000bacc:	80 01       	ld.sh	r1,r0[0x0]
8000bace:	35 48       	mov	r8,84
8000bad0:	80 01       	ld.sh	r1,r0[0x0]
8000bad2:	35 5c       	mov	r12,85
8000bad4:	80 00       	ld.sh	r0,r0[0x0]
8000bad6:	ab 74       	lsl	r4,0xb
8000bad8:	80 01       	ld.sh	r1,r0[0x0]
8000bada:	35 6c       	mov	r12,86
8000badc:	80 00       	ld.sh	r0,r0[0x0]
8000bade:	6f dc       	ld.w	r12,r7[0x74]
8000bae0:	80 01       	ld.sh	r1,r0[0x0]
8000bae2:	35 98       	mov	r8,89
8000bae4:	80 01       	ld.sh	r1,r0[0x0]
8000bae6:	35 ac       	mov	r12,90
8000bae8:	80 00       	ld.sh	r0,r0[0x0]
8000baea:	c6 38       	rjmp	8000bbb0 <main+0x7c4>
8000baec:	80 00       	ld.sh	r0,r0[0x0]
8000baee:	c7 18       	rjmp	8000bbd0 <main+0x7e4>
8000baf0:	80 01       	ld.sh	r1,r0[0x0]
8000baf2:	35 d8       	mov	r8,93
8000baf4:	80 01       	ld.sh	r1,r0[0x0]
8000baf6:	36 0c       	mov	r12,96
8000baf8:	80 00       	ld.sh	r0,r0[0x0]
8000bafa:	77 68       	ld.w	r8,r11[0x58]
8000bafc:	80 01       	ld.sh	r1,r0[0x0]
8000bafe:	36 24       	mov	r4,98
8000bb00:	80 01       	ld.sh	r1,r0[0x0]
8000bb02:	36 34       	mov	r4,99
8000bb04:	80 01       	ld.sh	r1,r0[0x0]
8000bb06:	36 48       	mov	r8,100
8000bb08:	80 01       	ld.sh	r1,r0[0x0]
8000bb0a:	36 5c       	mov	r12,101
8000bb0c:	80 00       	ld.sh	r0,r0[0x0]
8000bb0e:	95 58       	st.w	r10[0x14],r8
8000bb10:	80 01       	ld.sh	r1,r0[0x0]
8000bb12:	36 78       	mov	r8,103
8000bb14:	80 01       	ld.sh	r1,r0[0x0]
8000bb16:	36 98       	mov	r8,105
8000bb18:	80 01       	ld.sh	r1,r0[0x0]
8000bb1a:	2d 50       	sub	r0,-43
8000bb1c:	80 01       	ld.sh	r1,r0[0x0]
8000bb1e:	36 9c       	mov	r12,105
8000bb20:	80 00       	ld.sh	r0,r0[0x0]
8000bb22:	9b 94       	st.w	sp[0x24],r4
8000bb24:	80 00       	ld.sh	r0,r0[0x0]
8000bb26:	c7 80       	breq	8000bc16 <dsp16_vect_complex_abs+0xa>
8000bb28:	80 00       	ld.sh	r0,r0[0x0]
8000bb2a:	9b b4       	st.w	sp[0x2c],r4
8000bb2c:	80 00       	ld.sh	r0,r0[0x0]
8000bb2e:	9b 44       	st.w	sp[0x10],r4
8000bb30:	80 00       	ld.sh	r0,r0[0x0]
8000bb32:	9a 00       	ld.sh	r0,sp[0x0]
8000bb34:	80 00       	ld.sh	r0,r0[0x0]
8000bb36:	9a 94       	ld.uh	r4,sp[0x2]
8000bb38:	80 00       	ld.sh	r0,r0[0x0]
8000bb3a:	9a 48       	ld.sh	r8,sp[0x8]
8000bb3c:	80 01       	ld.sh	r1,r0[0x0]
8000bb3e:	36 b0       	mov	r0,107
8000bb40:	80 01       	ld.sh	r1,r0[0x0]
8000bb42:	36 c8       	mov	r8,108
8000bb44:	80 00       	ld.sh	r0,r0[0x0]
8000bb46:	96 a0       	ld.uh	r0,r11[0x4]
8000bb48:	80 01       	ld.sh	r1,r0[0x0]
8000bb4a:	36 dc       	mov	r12,109
8000bb4c:	80 00       	ld.sh	r0,r0[0x0]
8000bb4e:	a3 64       	lsl	r4,0x2
8000bb50:	80 01       	ld.sh	r1,r0[0x0]
8000bb52:	36 f0       	mov	r0,111
8000bb54:	80 00       	ld.sh	r0,r0[0x0]
8000bb56:	a6 d0       	st.b	r3[0x5],r0
8000bb58:	80 01       	ld.sh	r1,r0[0x0]
8000bb5a:	37 00       	mov	r0,112
8000bb5c:	80 00       	ld.sh	r0,r0[0x0]
8000bb5e:	9e b0       	ld.uh	r0,pc[0x6]
8000bb60:	80 00       	ld.sh	r0,r0[0x0]
8000bb62:	a4 2c       	st.h	r2[0x4],r12
8000bb64:	80 01       	ld.sh	r1,r0[0x0]
8000bb66:	37 10       	mov	r0,113
8000bb68:	80 01       	ld.sh	r1,r0[0x0]
8000bb6a:	37 30       	mov	r0,115
8000bb6c:	80 01       	ld.sh	r1,r0[0x0]
8000bb6e:	37 50       	mov	r0,117
8000bb70:	80 01       	ld.sh	r1,r0[0x0]
8000bb72:	37 64       	mov	r4,118
8000bb74:	80 01       	ld.sh	r1,r0[0x0]
8000bb76:	37 6c       	mov	r12,118
8000bb78:	80 00       	ld.sh	r0,r0[0x0]
8000bb7a:	ad d4       	cbr	r4,0xd
8000bb7c:	80 01       	ld.sh	r1,r0[0x0]
8000bb7e:	37 84       	mov	r4,120
8000bb80:	80 00       	ld.sh	r0,r0[0x0]
8000bb82:	ae 74       	st.h	r7[0xe],r4
8000bb84:	80 01       	ld.sh	r1,r0[0x0]
8000bb86:	37 9c       	mov	r12,121
8000bb88:	80 01       	ld.sh	r1,r0[0x0]
8000bb8a:	37 bc       	mov	r12,123
8000bb8c:	80 00       	ld.sh	r0,r0[0x0]
8000bb8e:	b2 08       	st.h	r9[0x0],r8
8000bb90:	80 01       	ld.sh	r1,r0[0x0]
8000bb92:	37 d0       	mov	r0,125
8000bb94:	80 01       	ld.sh	r1,r0[0x0]
8000bb96:	37 f0       	mov	r0,127
8000bb98:	80 00       	ld.sh	r0,r0[0x0]
8000bb9a:	b1 10       	ld.d	r0,--r8
8000bb9c:	80 01       	ld.sh	r1,r0[0x0]
8000bb9e:	38 04       	mov	r4,-128
8000bba0:	80 01       	ld.sh	r1,r0[0x0]
8000bba2:	38 10       	mov	r0,-127
8000bba4:	80 00       	ld.sh	r0,r0[0x0]
8000bba6:	b0 54       	st.h	r8[0xa],r4
8000bba8:	80 01       	ld.sh	r1,r0[0x0]
8000bbaa:	38 1c       	mov	r12,-127
8000bbac:	80 01       	ld.sh	r1,r0[0x0]
8000bbae:	38 28       	mov	r8,-126
8000bbb0:	80 01       	ld.sh	r1,r0[0x0]
8000bbb2:	38 38       	mov	r8,-125
8000bbb4:	80 00       	ld.sh	r0,r0[0x0]
8000bbb6:	ae e4       	st.b	r7[0x6],r4
8000bbb8:	80 01       	ld.sh	r1,r0[0x0]
8000bbba:	38 4c       	mov	r12,-124
8000bbbc:	80 01       	ld.sh	r1,r0[0x0]
8000bbbe:	38 5c       	mov	r12,-123
8000bbc0:	80 00       	ld.sh	r0,r0[0x0]
8000bbc2:	ad 34       	mul	r4,r6
8000bbc4:	80 01       	ld.sh	r1,r0[0x0]
8000bbc6:	38 74       	mov	r4,-121
8000bbc8:	80 01       	ld.sh	r1,r0[0x0]
8000bbca:	38 88       	mov	r8,-120
8000bbcc:	80 01       	ld.sh	r1,r0[0x0]
8000bbce:	38 a0       	mov	r0,-118
8000bbd0:	80 01       	ld.sh	r1,r0[0x0]
8000bbd2:	38 b4       	mov	r4,-117
8000bbd4:	80 01       	ld.sh	r1,r0[0x0]
8000bbd6:	38 c0       	mov	r0,-116
8000bbd8:	80 01       	ld.sh	r1,r0[0x0]
8000bbda:	38 d0       	mov	r0,-115
8000bbdc:	80 01       	ld.sh	r1,r0[0x0]
8000bbde:	38 e0       	mov	r0,-114
8000bbe0:	80 01       	ld.sh	r1,r0[0x0]
8000bbe2:	38 f4       	mov	r4,-113
8000bbe4:	80 01       	ld.sh	r1,r0[0x0]
8000bbe6:	39 08       	mov	r8,-112
8000bbe8:	80 01       	ld.sh	r1,r0[0x0]
8000bbea:	39 14       	mov	r4,-111
8000bbec:	80 01       	ld.sh	r1,r0[0x0]
8000bbee:	39 20       	mov	r0,-110
8000bbf0:	80 01       	ld.sh	r1,r0[0x0]
8000bbf2:	39 34       	mov	r4,-109
8000bbf4:	80 01       	ld.sh	r1,r0[0x0]
8000bbf6:	39 48       	mov	r8,-108
8000bbf8:	80 01       	ld.sh	r1,r0[0x0]
8000bbfa:	39 54       	mov	r4,-107
8000bbfc:	80 01       	ld.sh	r1,r0[0x0]
8000bbfe:	39 6c       	mov	r12,-106
8000bc00:	80 01       	ld.sh	r1,r0[0x0]
8000bc02:	39 84       	mov	r4,-104
8000bc04:	80 00       	ld.sh	r0,r0[0x0]
8000bc06:	32 26       	mov	r6,34

8000bc08 <dsp16_vect_complex_abs_kernel_x0>:
8000bc08:	5e fc       	retal	r12
8000bc0a:	d7 03       	nop

8000bc0c <dsp16_vect_complex_abs>:
8000bc0c:	eb cd 40 fe 	pushm	r1-r7,lr
8000bc10:	14 97       	mov	r7,r10
8000bc12:	18 96       	mov	r6,r12
8000bc14:	16 91       	mov	r1,r11
8000bc16:	f4 c2 00 03 	sub	r2,r10,3
8000bc1a:	58 02       	cp.w	r2,0
8000bc1c:	e0 8a 00 72 	brle	8000bd00 <dsp16_vect_complex_abs+0xf4>
8000bc20:	16 95       	mov	r5,r11
8000bc22:	18 94       	mov	r4,r12
8000bc24:	30 03       	mov	r3,0
8000bc26:	0b 89       	ld.ub	r9,r5[0x0]
8000bc28:	0b 98       	ld.ub	r8,r5[0x1]
8000bc2a:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000bc2e:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bc32:	0b aa       	ld.ub	r10,r5[0x2]
8000bc34:	f0 09 14 0f 	asr	r9,r8,0xf
8000bc38:	0b b8       	ld.ub	r8,r5[0x3]
8000bc3a:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000bc3e:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bc42:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bc46:	12 0c       	add	r12,r9
8000bc48:	5c 8c       	casts.h	r12
8000bc4a:	ce bc       	rcall	8000be20 <dsp16_op_sqrt>
8000bc4c:	ea c8 ff fc 	sub	r8,r5,-4
8000bc50:	a8 0c       	st.h	r4[0x0],r12
8000bc52:	11 ba       	ld.ub	r10,r8[0x3]
8000bc54:	11 8b       	ld.ub	r11,r8[0x0]
8000bc56:	11 99       	ld.ub	r9,r8[0x1]
8000bc58:	11 a8       	ld.ub	r8,r8[0x2]
8000bc5a:	f3 eb 10 89 	or	r9,r9,r11<<0x8
8000bc5e:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8000bc62:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bc66:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bc6a:	af 59       	asr	r9,0xf
8000bc6c:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bc70:	12 0c       	add	r12,r9
8000bc72:	5c 8c       	casts.h	r12
8000bc74:	cd 6c       	rcall	8000be20 <dsp16_op_sqrt>
8000bc76:	ea c8 ff f8 	sub	r8,r5,-8
8000bc7a:	a8 1c       	st.h	r4[0x2],r12
8000bc7c:	11 ba       	ld.ub	r10,r8[0x3]
8000bc7e:	11 8b       	ld.ub	r11,r8[0x0]
8000bc80:	11 99       	ld.ub	r9,r8[0x1]
8000bc82:	11 a8       	ld.ub	r8,r8[0x2]
8000bc84:	f3 eb 10 89 	or	r9,r9,r11<<0x8
8000bc88:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8000bc8c:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bc90:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bc94:	af 59       	asr	r9,0xf
8000bc96:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bc9a:	12 0c       	add	r12,r9
8000bc9c:	5c 8c       	casts.h	r12
8000bc9e:	cc 1c       	rcall	8000be20 <dsp16_op_sqrt>
8000bca0:	ea c8 ff f4 	sub	r8,r5,-12
8000bca4:	a8 2c       	st.h	r4[0x4],r12
8000bca6:	11 ba       	ld.ub	r10,r8[0x3]
8000bca8:	11 8b       	ld.ub	r11,r8[0x0]
8000bcaa:	11 99       	ld.ub	r9,r8[0x1]
8000bcac:	11 a8       	ld.ub	r8,r8[0x2]
8000bcae:	f3 eb 10 89 	or	r9,r9,r11<<0x8
8000bcb2:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8000bcb6:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bcba:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bcbe:	af 59       	asr	r9,0xf
8000bcc0:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bcc4:	12 0c       	add	r12,r9
8000bcc6:	5c 8c       	casts.h	r12
8000bcc8:	ca cc       	rcall	8000be20 <dsp16_op_sqrt>
8000bcca:	a8 3c       	st.h	r4[0x6],r12
8000bccc:	2f c3       	sub	r3,-4
8000bcce:	2f 05       	sub	r5,-16
8000bcd0:	2f 84       	sub	r4,-8
8000bcd2:	06 32       	cp.w	r2,r3
8000bcd4:	fe 99 ff a9 	brgt	8000bc26 <dsp16_vect_complex_abs+0x1a>
8000bcd8:	ee c8 00 04 	sub	r8,r7,4
8000bcdc:	a3 88       	lsr	r8,0x2
8000bcde:	2f f8       	sub	r8,-1
8000bce0:	f0 0c 15 03 	lsl	r12,r8,0x3
8000bce4:	f0 0b 15 04 	lsl	r11,r8,0x4
8000bce8:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
8000bcec:	e2 0b 00 0b 	add	r11,r1,r11
8000bcf0:	ec 0c 00 0c 	add	r12,r6,r12
8000bcf4:	48 58       	lddpc	r8,8000bd08 <dsp16_vect_complex_abs+0xfc>
8000bcf6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
8000bcfa:	5d 18       	icall	r8
8000bcfc:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000bd00:	30 0c       	mov	r12,0
8000bd02:	18 9b       	mov	r11,r12
8000bd04:	cf 2b       	rjmp	8000bce8 <dsp16_vect_complex_abs+0xdc>
8000bd06:	d7 03       	nop
8000bd08:	80 01       	ld.sh	r1,r0[0x0]
8000bd0a:	39 a0       	mov	r0,-102

8000bd0c <dsp16_vect_complex_abs_kernel_x3>:
8000bd0c:	eb cd 40 c0 	pushm	r6-r7,lr
8000bd10:	17 89       	ld.ub	r9,r11[0x0]
8000bd12:	17 98       	ld.ub	r8,r11[0x1]
8000bd14:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000bd18:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bd1c:	17 aa       	ld.ub	r10,r11[0x2]
8000bd1e:	f0 09 14 0f 	asr	r9,r8,0xf
8000bd22:	17 b8       	ld.ub	r8,r11[0x3]
8000bd24:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000bd28:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bd2c:	16 97       	mov	r7,r11
8000bd2e:	18 96       	mov	r6,r12
8000bd30:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bd34:	12 0c       	add	r12,r9
8000bd36:	5c 8c       	casts.h	r12
8000bd38:	c7 4c       	rcall	8000be20 <dsp16_op_sqrt>
8000bd3a:	ee c8 ff fc 	sub	r8,r7,-4
8000bd3e:	ac 0c       	st.h	r6[0x0],r12
8000bd40:	11 ba       	ld.ub	r10,r8[0x3]
8000bd42:	11 8b       	ld.ub	r11,r8[0x0]
8000bd44:	11 99       	ld.ub	r9,r8[0x1]
8000bd46:	11 a8       	ld.ub	r8,r8[0x2]
8000bd48:	f3 eb 10 89 	or	r9,r9,r11<<0x8
8000bd4c:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8000bd50:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bd54:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bd58:	af 59       	asr	r9,0xf
8000bd5a:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bd5e:	12 0c       	add	r12,r9
8000bd60:	5c 8c       	casts.h	r12
8000bd62:	c5 fc       	rcall	8000be20 <dsp16_op_sqrt>
8000bd64:	2f 87       	sub	r7,-8
8000bd66:	ac 1c       	st.h	r6[0x2],r12
8000bd68:	0f 8a       	ld.ub	r10,r7[0x0]
8000bd6a:	0f b8       	ld.ub	r8,r7[0x3]
8000bd6c:	0f 99       	ld.ub	r9,r7[0x1]
8000bd6e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000bd72:	0f aa       	ld.ub	r10,r7[0x2]
8000bd74:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bd78:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000bd7c:	af 59       	asr	r9,0xf
8000bd7e:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bd82:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bd86:	12 0c       	add	r12,r9
8000bd88:	5c 8c       	casts.h	r12
8000bd8a:	c4 bc       	rcall	8000be20 <dsp16_op_sqrt>
8000bd8c:	ac 2c       	st.h	r6[0x4],r12
8000bd8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bd92:	d7 03       	nop

8000bd94 <dsp16_vect_complex_abs_kernel_x2>:
8000bd94:	eb cd 40 c0 	pushm	r6-r7,lr
8000bd98:	17 89       	ld.ub	r9,r11[0x0]
8000bd9a:	17 98       	ld.ub	r8,r11[0x1]
8000bd9c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000bda0:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bda4:	17 aa       	ld.ub	r10,r11[0x2]
8000bda6:	f0 09 14 0f 	asr	r9,r8,0xf
8000bdaa:	17 b8       	ld.ub	r8,r11[0x3]
8000bdac:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000bdb0:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bdb4:	16 97       	mov	r7,r11
8000bdb6:	18 96       	mov	r6,r12
8000bdb8:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bdbc:	12 0c       	add	r12,r9
8000bdbe:	5c 8c       	casts.h	r12
8000bdc0:	c3 0c       	rcall	8000be20 <dsp16_op_sqrt>
8000bdc2:	2f c7       	sub	r7,-4
8000bdc4:	ac 0c       	st.h	r6[0x0],r12
8000bdc6:	0f 8a       	ld.ub	r10,r7[0x0]
8000bdc8:	0f b8       	ld.ub	r8,r7[0x3]
8000bdca:	0f 99       	ld.ub	r9,r7[0x1]
8000bdcc:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000bdd0:	0f aa       	ld.ub	r10,r7[0x2]
8000bdd2:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000bdd6:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000bdda:	af 59       	asr	r9,0xf
8000bddc:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000bde0:	f0 0c 14 0f 	asr	r12,r8,0xf
8000bde4:	12 0c       	add	r12,r9
8000bde6:	5c 8c       	casts.h	r12
8000bde8:	c1 cc       	rcall	8000be20 <dsp16_op_sqrt>
8000bdea:	ac 1c       	st.h	r6[0x2],r12
8000bdec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

8000bdf0 <dsp16_vect_complex_abs_kernel_x1>:
8000bdf0:	eb cd 40 80 	pushm	r7,lr
8000bdf4:	17 8a       	ld.ub	r10,r11[0x0]
8000bdf6:	17 b8       	ld.ub	r8,r11[0x3]
8000bdf8:	17 99       	ld.ub	r9,r11[0x1]
8000bdfa:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000bdfe:	17 aa       	ld.ub	r10,r11[0x2]
8000be00:	f2 09 07 89 	mulhh.w	r9,r9:b,r9:b
8000be04:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000be08:	af 59       	asr	r9,0xf
8000be0a:	f0 08 07 88 	mulhh.w	r8,r8:b,r8:b
8000be0e:	18 97       	mov	r7,r12
8000be10:	f0 0c 14 0f 	asr	r12,r8,0xf
8000be14:	12 0c       	add	r12,r9
8000be16:	5c 8c       	casts.h	r12
8000be18:	c0 4c       	rcall	8000be20 <dsp16_op_sqrt>
8000be1a:	ae 0c       	st.h	r7[0x0],r12
8000be1c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be20 <dsp16_op_sqrt>:
8000be20:	d4 11       	pushm	r0-r3,lr
8000be22:	58 0c       	cp.w	r12,0
8000be24:	c4 75       	brlt	8000beb2 <__dsp16_sqrt_end_err>
8000be26:	f8 00 12 00 	clz	r0,r12
8000be2a:	e0 00 16 01 	lsr	r0,r0,0x1
8000be2e:	e0 c0 00 01 	sub	r0,r0,1
8000be32:	30 11       	mov	r1,1
8000be34:	e2 00 09 40 	lsl	r0,r1,r0
8000be38:	e0 62 c0 00 	mov	r2,49152
8000be3c:	e0 00 02 41 	mul	r1,r0,r0
8000be40:	f8 01 02 41 	mul	r1,r12,r1
8000be44:	e2 01 16 10 	lsr	r1,r1,0x10
8000be48:	e4 01 01 01 	sub	r1,r2,r1
8000be4c:	e0 01 02 40 	mul	r0,r0,r1
8000be50:	e0 00 16 0f 	lsr	r0,r0,0xf
8000be54:	e0 00 02 41 	mul	r1,r0,r0
8000be58:	f8 01 02 41 	mul	r1,r12,r1
8000be5c:	e2 01 16 10 	lsr	r1,r1,0x10
8000be60:	e4 01 01 01 	sub	r1,r2,r1
8000be64:	e0 01 02 40 	mul	r0,r0,r1
8000be68:	e0 00 16 0f 	lsr	r0,r0,0xf
8000be6c:	e0 00 02 41 	mul	r1,r0,r0
8000be70:	f8 01 02 41 	mul	r1,r12,r1
8000be74:	e2 01 16 10 	lsr	r1,r1,0x10
8000be78:	e4 01 01 01 	sub	r1,r2,r1
8000be7c:	e0 01 02 40 	mul	r0,r0,r1
8000be80:	e0 00 16 0f 	lsr	r0,r0,0xf
8000be84:	e0 00 02 41 	mul	r1,r0,r0
8000be88:	f8 01 02 41 	mul	r1,r12,r1
8000be8c:	e2 01 16 10 	lsr	r1,r1,0x10
8000be90:	e4 01 01 01 	sub	r1,r2,r1
8000be94:	e0 01 02 40 	mul	r0,r0,r1
8000be98:	e0 00 16 0f 	lsr	r0,r0,0xf
8000be9c:	e0 62 5a 82 	mov	r2,23170
8000bea0:	f8 02 02 4c 	mul	r12,r12,r2
8000bea4:	f8 0c 16 0f 	lsr	r12,r12,0xf
8000bea8:	e0 0c 02 4c 	mul	r12,r0,r12
8000beac:	f8 0c 16 07 	lsr	r12,r12,0x7

8000beb0 <__dsp16_sqrt_end_fct>:
8000beb0:	d8 12       	popm	r0-r3,pc

8000beb2 <__dsp16_sqrt_end_err>:
8000beb2:	30 0c       	mov	r12,0
8000beb4:	d8 12       	popm	r0-r3,pc
8000beb6:	d7 03       	nop

8000beb8 <dsp16_trans_complexfft>:
8000beb8:	d4 31       	pushm	r0-r7,lr
8000beba:	20 9d       	sub	sp,36
8000bebc:	f4 c0 00 02 	sub	r0,r10,2
8000bec0:	50 00       	stdsp	sp[0x0],r0
8000bec2:	30 11       	mov	r1,1
8000bec4:	e2 0a 09 42 	lsl	r2,r1,r10
8000bec8:	18 94       	mov	r4,r12
8000beca:	50 14       	stdsp	sp[0x4],r4
8000becc:	e8 02 00 20 	add	r0,r4,r2<<0x2
8000bed0:	50 20       	stdsp	sp[0x8],r0
8000bed2:	e0 61 01 00 	mov	r1,256
8000bed6:	50 51       	stdsp	sp[0x14],r1
8000bed8:	e4 0c 14 02 	asr	r12,r2,0x2
8000bedc:	30 01       	mov	r1,0
8000bede:	30 03       	mov	r3,0
8000bee0:	f4 02 11 20 	rsub	r2,r10,32
8000bee4:	50 4c       	stdsp	sp[0x10],r12
8000bee6:	50 3b       	stdsp	sp[0xc],r11

8000bee8 <__loop_init>:
8000bee8:	40 4c       	lddsp	r12,sp[0x10]
8000beea:	40 3b       	lddsp	r11,sp[0xc]
8000beec:	e2 02 09 49 	lsl	r9,r1,r2
8000bef0:	5c 99       	brev	r9
8000bef2:	f6 09 03 25 	ld.w	r5,r11[r9<<0x2]
8000bef6:	18 09       	add	r9,r12
8000bef8:	f6 09 03 26 	ld.w	r6,r11[r9<<0x2]
8000befc:	18 09       	add	r9,r12
8000befe:	f6 09 03 27 	ld.w	r7,r11[r9<<0x2]
8000bf02:	18 09       	add	r9,r12
8000bf04:	f6 09 03 28 	ld.w	r8,r11[r9<<0x2]
8000bf08:	ea 07 0e 3b 	addhh.w	r11,r5:t,r7:t
8000bf0c:	ec 08 0e 3c 	addhh.w	r12,r6:t,r8:t
8000bf10:	ea 07 0e 09 	addhh.w	r9,r5:b,r7:b
8000bf14:	ec 08 0e 0a 	addhh.w	r10,r6:b,r8:b
8000bf18:	f2 0a 00 0e 	add	lr,r9,r10
8000bf1c:	f6 0c 00 03 	add	r3,r11,r12
8000bf20:	a3 4e       	asr	lr,0x2
8000bf22:	a3 43       	asr	r3,0x2
8000bf24:	e7 ee c0 04 	sthh.w	r4[0x0],r3:b,lr:b
8000bf28:	f2 0a 01 0e 	sub	lr,r9,r10
8000bf2c:	f6 0c 01 03 	sub	r3,r11,r12
8000bf30:	a3 4e       	asr	lr,0x2
8000bf32:	a3 43       	asr	r3,0x2
8000bf34:	e7 ee c0 24 	sthh.w	r4[0x8],r3:b,lr:b
8000bf38:	ea 07 0f 3b 	subhh.w	r11,r5:t,r7:t
8000bf3c:	ec 08 0f 3c 	subhh.w	r12,r6:t,r8:t
8000bf40:	ea 07 0f 09 	subhh.w	r9,r5:b,r7:b
8000bf44:	ec 08 0f 0a 	subhh.w	r10,r6:b,r8:b
8000bf48:	f2 0c 01 0e 	sub	lr,r9,r12
8000bf4c:	f6 0a 00 03 	add	r3,r11,r10
8000bf50:	a3 4e       	asr	lr,0x2
8000bf52:	a3 43       	asr	r3,0x2
8000bf54:	e7 ee c0 14 	sthh.w	r4[0x4],r3:b,lr:b
8000bf58:	f2 0c 00 0e 	add	lr,r9,r12
8000bf5c:	f6 0a 01 03 	sub	r3,r11,r10
8000bf60:	a3 4e       	asr	lr,0x2
8000bf62:	a3 43       	asr	r3,0x2
8000bf64:	e7 ee c0 34 	sthh.w	r4[0xc],r3:b,lr:b
8000bf68:	e2 c1 ff fc 	sub	r1,r1,-4
8000bf6c:	e8 c4 ff f0 	sub	r4,r4,-16
8000bf70:	08 30       	cp.w	r0,r4
8000bf72:	fe 99 ff bb 	brgt	8000bee8 <__loop_init>
8000bf76:	40 14       	lddsp	r4,sp[0x4]
8000bf78:	30 41       	mov	r1,4
8000bf7a:	50 61       	stdsp	sp[0x18],r1

8000bf7c <__loop_stage>:
8000bf7c:	40 61       	lddsp	r1,sp[0x18]
8000bf7e:	e2 01 15 02 	lsl	r1,r1,0x2
8000bf82:	50 61       	stdsp	sp[0x18],r1
8000bf84:	30 00       	mov	r0,0
8000bf86:	50 40       	stdsp	sp[0x10],r0
8000bf88:	40 14       	lddsp	r4,sp[0x4]
8000bf8a:	e2 02 10 03 	mul	r2,r1,3

8000bf8e <__loop_r1>:
8000bf8e:	68 05       	ld.w	r5,r4[0x0]
8000bf90:	e8 01 03 16 	ld.w	r6,r4[r1<<0x1]
8000bf94:	e8 02 03 08 	ld.w	r8,r4[r2]
8000bf98:	e8 01 03 07 	ld.w	r7,r4[r1]
8000bf9c:	ea 07 0e 39 	addhh.w	r9,r5:t,r7:t
8000bfa0:	ec 08 0e 3a 	addhh.w	r10,r6:t,r8:t
8000bfa4:	ea 07 0e 0b 	addhh.w	r11,r5:b,r7:b
8000bfa8:	ec 08 0e 0c 	addhh.w	r12,r6:b,r8:b
8000bfac:	f2 0a 00 0e 	add	lr,r9,r10
8000bfb0:	f6 0c 00 03 	add	r3,r11,r12
8000bfb4:	a3 4e       	asr	lr,0x2
8000bfb6:	a3 43       	asr	r3,0x2
8000bfb8:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
8000bfbc:	f2 0a 01 0e 	sub	lr,r9,r10
8000bfc0:	f6 0c 01 00 	sub	r0,r11,r12
8000bfc4:	a3 4e       	asr	lr,0x2
8000bfc6:	a3 40       	asr	r0,0x2
8000bfc8:	fd e0 81 14 	sthh.w	r4[r1<<0x1],lr:b,r0:b
8000bfcc:	ea 07 0f 39 	subhh.w	r9,r5:t,r7:t
8000bfd0:	ec 08 0f 3a 	subhh.w	r10,r6:t,r8:t
8000bfd4:	ea 07 0f 0b 	subhh.w	r11,r5:b,r7:b
8000bfd8:	ec 08 0f 0c 	subhh.w	r12,r6:b,r8:b
8000bfdc:	f2 0c 00 0e 	add	lr,r9,r12
8000bfe0:	f6 0a 01 00 	sub	r0,r11,r10
8000bfe4:	a3 4e       	asr	lr,0x2
8000bfe6:	a3 40       	asr	r0,0x2
8000bfe8:	fd e0 81 04 	sthh.w	r4[r1],lr:b,r0:b
8000bfec:	f2 0c 01 0e 	sub	lr,r9,r12
8000bff0:	f6 0a 00 00 	add	r0,r11,r10
8000bff4:	a3 4e       	asr	lr,0x2
8000bff6:	a3 40       	asr	r0,0x2
8000bff8:	fd e0 82 04 	sthh.w	r4[r2],lr:b,r0:b
8000bffc:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c000:	40 28       	lddsp	r8,sp[0x8]
8000c002:	08 38       	cp.w	r8,r4
8000c004:	fe 99 ff c5 	brgt	8000bf8e <__loop_r1>
8000c008:	58 41       	cp.w	r1,4
8000c00a:	e0 88 00 74 	brls	8000c0f2 <__loop_stage_end>
8000c00e:	30 49       	mov	r9,4
8000c010:	50 39       	stdsp	sp[0xc],r9

8000c012 <__loop_j>:
8000c012:	40 14       	lddsp	r4,sp[0x4]
8000c014:	12 04       	add	r4,r9
8000c016:	40 51       	lddsp	r1,sp[0x14]
8000c018:	40 49       	lddsp	r9,sp[0x10]
8000c01a:	02 09       	add	r9,r1
8000c01c:	50 49       	stdsp	sp[0x10],r9
8000c01e:	e0 61 08 0c 	mov	r1,2060
8000c022:	ea 11 00 00 	orh	r1,0x0
8000c026:	e2 09 03 00 	ld.w	r0,r1[r9]
8000c02a:	e0 61 00 0c 	mov	r1,12
8000c02e:	ea 11 00 00 	orh	r1,0x0
8000c032:	e2 09 02 16 	ld.d	r6,r1[r9<<0x1]
8000c036:	fa e7 00 1c 	st.d	sp[28],r6
8000c03a:	40 61       	lddsp	r1,sp[0x18]

8000c03c <__loop_r2>:
8000c03c:	e8 01 03 17 	ld.w	r7,r4[r1<<0x1]
8000c040:	ee 00 01 88 	mulnhh.w	r8,r7:b,r0:b
8000c044:	ee 00 04 b8 	machh.w	r8,r7:t,r0:t
8000c048:	ee 00 07 a9 	mulhh.w	r9,r7:t,r0:b
8000c04c:	ee 00 04 99 	machh.w	r9,r7:b,r0:t
8000c050:	fa e6 00 1c 	ld.d	r6,sp[28]
8000c054:	e8 02 03 03 	ld.w	r3,r4[r2]
8000c058:	e6 06 01 8c 	mulnhh.w	r12,r3:b,r6:b
8000c05c:	e6 06 04 bc 	machh.w	r12,r3:t,r6:t
8000c060:	e6 06 07 ae 	mulhh.w	lr,r3:t,r6:b
8000c064:	e6 06 04 9e 	machh.w	lr,r3:b,r6:t
8000c068:	e8 01 03 03 	ld.w	r3,r4[r1]
8000c06c:	e6 07 01 8a 	mulnhh.w	r10,r3:b,r7:b
8000c070:	e6 07 04 ba 	machh.w	r10,r3:t,r7:t
8000c074:	e6 07 07 ab 	mulhh.w	r11,r3:t,r7:b
8000c078:	e6 07 04 9b 	machh.w	r11,r3:b,r7:t
8000c07c:	68 05       	ld.w	r5,r4[0x0]
8000c07e:	a3 45       	asr	r5,0x2
8000c080:	e7 d5 b0 0e 	bfexts	r3,r5,0x0,0xe
8000c084:	eb d3 d0 10 	bfins	r5,r3,0x0,0x10
8000c088:	f0 0c 00 03 	add	r3,r8,r12
8000c08c:	f0 0c 01 0c 	sub	r12,r8,r12
8000c090:	f2 0e 00 06 	add	r6,r9,lr
8000c094:	f2 0e 01 0e 	sub	lr,r9,lr
8000c098:	ea 0a 0e 38 	addhh.w	r8,r5:t,r10:t
8000c09c:	ea 0a 0f 3a 	subhh.w	r10,r5:t,r10:t
8000c0a0:	ea 0b 0e 19 	addhh.w	r9,r5:b,r11:t
8000c0a4:	ea 0b 0f 1b 	subhh.w	r11,r5:b,r11:t
8000c0a8:	f0 03 0e 17 	addhh.w	r7,r8:b,r3:t
8000c0ac:	f2 06 0e 15 	addhh.w	r5,r9:b,r6:t
8000c0b0:	ef e5 c0 04 	sthh.w	r4[0x0],r7:b,r5:b
8000c0b4:	f0 03 0f 17 	subhh.w	r7,r8:b,r3:t
8000c0b8:	f2 06 0f 15 	subhh.w	r5,r9:b,r6:t
8000c0bc:	ef e5 81 14 	sthh.w	r4[r1<<0x1],r7:b,r5:b
8000c0c0:	f4 0e 0e 17 	addhh.w	r7,r10:b,lr:t
8000c0c4:	f6 0c 0f 15 	subhh.w	r5,r11:b,r12:t
8000c0c8:	ef e5 81 04 	sthh.w	r4[r1],r7:b,r5:b
8000c0cc:	f4 0e 0f 17 	subhh.w	r7,r10:b,lr:t
8000c0d0:	f6 0c 0e 15 	addhh.w	r5,r11:b,r12:t
8000c0d4:	ef e5 82 04 	sthh.w	r4[r2],r7:b,r5:b
8000c0d8:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c0dc:	40 28       	lddsp	r8,sp[0x8]
8000c0de:	08 38       	cp.w	r8,r4
8000c0e0:	fe 99 ff ae 	brgt	8000c03c <__loop_r2>
8000c0e4:	40 39       	lddsp	r9,sp[0xc]
8000c0e6:	2f c9       	sub	r9,-4
8000c0e8:	50 39       	stdsp	sp[0xc],r9
8000c0ea:	40 65       	lddsp	r5,sp[0x18]
8000c0ec:	12 35       	cp.w	r5,r9
8000c0ee:	fe 99 ff 92 	brgt	8000c012 <__loop_j>

8000c0f2 <__loop_stage_end>:
8000c0f2:	40 51       	lddsp	r1,sp[0x14]
8000c0f4:	e2 01 16 02 	lsr	r1,r1,0x2
8000c0f8:	50 51       	stdsp	sp[0x14],r1
8000c0fa:	40 01       	lddsp	r1,sp[0x0]
8000c0fc:	20 21       	sub	r1,2
8000c0fe:	50 01       	stdsp	sp[0x0],r1
8000c100:	fe 99 ff 3e 	brgt	8000bf7c <__loop_stage>

8000c104 <__address_end>:
8000c104:	2f 7d       	sub	sp,-36
8000c106:	d8 32       	popm	r0-r7,pc
8000c108:	c0 28       	rjmp	8000c10c <dsp16_trans_complexifft_ex>
8000c10a:	d7 03       	nop

8000c10c <dsp16_trans_complexifft_ex>:
8000c10c:	d4 31       	pushm	r0-r7,lr
8000c10e:	20 9d       	sub	sp,36
8000c110:	f4 c0 00 02 	sub	r0,r10,2
8000c114:	50 00       	stdsp	sp[0x0],r0
8000c116:	30 11       	mov	r1,1
8000c118:	e2 0a 09 42 	lsl	r2,r1,r10
8000c11c:	18 94       	mov	r4,r12
8000c11e:	50 14       	stdsp	sp[0x4],r4
8000c120:	e8 02 00 20 	add	r0,r4,r2<<0x2
8000c124:	50 20       	stdsp	sp[0x8],r0
8000c126:	e0 61 01 00 	mov	r1,256
8000c12a:	50 51       	stdsp	sp[0x14],r1
8000c12c:	e4 0c 14 02 	asr	r12,r2,0x2
8000c130:	30 01       	mov	r1,0
8000c132:	30 03       	mov	r3,0
8000c134:	f4 02 11 20 	rsub	r2,r10,32
8000c138:	50 4c       	stdsp	sp[0x10],r12
8000c13a:	50 3b       	stdsp	sp[0xc],r11

8000c13c <__loop_init>:
8000c13c:	40 4c       	lddsp	r12,sp[0x10]
8000c13e:	40 3b       	lddsp	r11,sp[0xc]
8000c140:	e2 02 09 49 	lsl	r9,r1,r2
8000c144:	5c 99       	brev	r9
8000c146:	f6 09 03 25 	ld.w	r5,r11[r9<<0x2]
8000c14a:	18 09       	add	r9,r12
8000c14c:	f6 09 03 26 	ld.w	r6,r11[r9<<0x2]
8000c150:	18 09       	add	r9,r12
8000c152:	f6 09 03 27 	ld.w	r7,r11[r9<<0x2]
8000c156:	18 09       	add	r9,r12
8000c158:	f6 09 03 28 	ld.w	r8,r11[r9<<0x2]
8000c15c:	ea 07 0e 0b 	addhh.w	r11,r5:b,r7:b
8000c160:	ec 08 0e 0c 	addhh.w	r12,r6:b,r8:b
8000c164:	ea 07 0e 39 	addhh.w	r9,r5:t,r7:t
8000c168:	ec 08 0e 3a 	addhh.w	r10,r6:t,r8:t
8000c16c:	f2 0a 00 0e 	add	lr,r9,r10
8000c170:	f6 0c 00 03 	add	r3,r11,r12
8000c174:	a3 4e       	asr	lr,0x2
8000c176:	a3 43       	asr	r3,0x2
8000c178:	e7 ee c0 04 	sthh.w	r4[0x0],r3:b,lr:b
8000c17c:	f2 0a 01 0e 	sub	lr,r9,r10
8000c180:	f6 0c 01 03 	sub	r3,r11,r12
8000c184:	a3 4e       	asr	lr,0x2
8000c186:	a3 43       	asr	r3,0x2
8000c188:	e7 ee c0 24 	sthh.w	r4[0x8],r3:b,lr:b
8000c18c:	ea 07 0f 0b 	subhh.w	r11,r5:b,r7:b
8000c190:	ec 08 0f 0c 	subhh.w	r12,r6:b,r8:b
8000c194:	ea 07 0f 39 	subhh.w	r9,r5:t,r7:t
8000c198:	ec 08 0f 3a 	subhh.w	r10,r6:t,r8:t
8000c19c:	f2 0c 01 0e 	sub	lr,r9,r12
8000c1a0:	f6 0a 00 03 	add	r3,r11,r10
8000c1a4:	a3 4e       	asr	lr,0x2
8000c1a6:	a3 43       	asr	r3,0x2
8000c1a8:	e7 ee c0 14 	sthh.w	r4[0x4],r3:b,lr:b
8000c1ac:	f2 0c 00 0e 	add	lr,r9,r12
8000c1b0:	f6 0a 01 03 	sub	r3,r11,r10
8000c1b4:	a3 4e       	asr	lr,0x2
8000c1b6:	a3 43       	asr	r3,0x2
8000c1b8:	e7 ee c0 34 	sthh.w	r4[0xc],r3:b,lr:b
8000c1bc:	e2 c1 ff fc 	sub	r1,r1,-4
8000c1c0:	e8 c4 ff f0 	sub	r4,r4,-16
8000c1c4:	08 30       	cp.w	r0,r4
8000c1c6:	fe 99 ff bb 	brgt	8000c13c <__loop_init>
8000c1ca:	40 14       	lddsp	r4,sp[0x4]
8000c1cc:	30 41       	mov	r1,4
8000c1ce:	50 61       	stdsp	sp[0x18],r1

8000c1d0 <__loop_stage>:
8000c1d0:	40 61       	lddsp	r1,sp[0x18]
8000c1d2:	e2 01 15 02 	lsl	r1,r1,0x2
8000c1d6:	50 61       	stdsp	sp[0x18],r1
8000c1d8:	30 00       	mov	r0,0
8000c1da:	50 40       	stdsp	sp[0x10],r0
8000c1dc:	40 14       	lddsp	r4,sp[0x4]
8000c1de:	e2 02 10 03 	mul	r2,r1,3

8000c1e2 <__loop_r1>:
8000c1e2:	68 05       	ld.w	r5,r4[0x0]
8000c1e4:	e8 01 03 16 	ld.w	r6,r4[r1<<0x1]
8000c1e8:	e8 02 03 08 	ld.w	r8,r4[r2]
8000c1ec:	e8 01 03 07 	ld.w	r7,r4[r1]
8000c1f0:	ea 07 0e 39 	addhh.w	r9,r5:t,r7:t
8000c1f4:	ec 08 0e 3a 	addhh.w	r10,r6:t,r8:t
8000c1f8:	ea 07 0e 0b 	addhh.w	r11,r5:b,r7:b
8000c1fc:	ec 08 0e 0c 	addhh.w	r12,r6:b,r8:b
8000c200:	f2 0a 00 0e 	add	lr,r9,r10
8000c204:	f6 0c 00 03 	add	r3,r11,r12
8000c208:	a3 4e       	asr	lr,0x2
8000c20a:	a3 43       	asr	r3,0x2
8000c20c:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
8000c210:	f2 0a 01 0e 	sub	lr,r9,r10
8000c214:	f6 0c 01 00 	sub	r0,r11,r12
8000c218:	a3 4e       	asr	lr,0x2
8000c21a:	a3 40       	asr	r0,0x2
8000c21c:	fd e0 81 14 	sthh.w	r4[r1<<0x1],lr:b,r0:b
8000c220:	ea 07 0f 39 	subhh.w	r9,r5:t,r7:t
8000c224:	ec 08 0f 3a 	subhh.w	r10,r6:t,r8:t
8000c228:	ea 07 0f 0b 	subhh.w	r11,r5:b,r7:b
8000c22c:	ec 08 0f 0c 	subhh.w	r12,r6:b,r8:b
8000c230:	f2 0c 00 0e 	add	lr,r9,r12
8000c234:	f6 0a 01 00 	sub	r0,r11,r10
8000c238:	a3 4e       	asr	lr,0x2
8000c23a:	a3 40       	asr	r0,0x2
8000c23c:	fd e0 81 04 	sthh.w	r4[r1],lr:b,r0:b
8000c240:	f2 0c 01 0e 	sub	lr,r9,r12
8000c244:	f6 0a 00 00 	add	r0,r11,r10
8000c248:	a3 4e       	asr	lr,0x2
8000c24a:	a3 40       	asr	r0,0x2
8000c24c:	fd e0 82 04 	sthh.w	r4[r2],lr:b,r0:b
8000c250:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c254:	40 28       	lddsp	r8,sp[0x8]
8000c256:	08 38       	cp.w	r8,r4
8000c258:	fe 99 ff c5 	brgt	8000c1e2 <__loop_r1>
8000c25c:	58 41       	cp.w	r1,4
8000c25e:	e0 88 00 74 	brls	8000c346 <__loop_stage_end>
8000c262:	30 49       	mov	r9,4
8000c264:	50 39       	stdsp	sp[0xc],r9

8000c266 <__loop_j>:
8000c266:	40 14       	lddsp	r4,sp[0x4]
8000c268:	12 04       	add	r4,r9
8000c26a:	40 51       	lddsp	r1,sp[0x14]
8000c26c:	40 49       	lddsp	r9,sp[0x10]
8000c26e:	02 09       	add	r9,r1
8000c270:	50 49       	stdsp	sp[0x10],r9
8000c272:	e0 61 08 0c 	mov	r1,2060
8000c276:	ea 11 00 00 	orh	r1,0x0
8000c27a:	e2 09 03 00 	ld.w	r0,r1[r9]
8000c27e:	e0 61 00 0c 	mov	r1,12
8000c282:	ea 11 00 00 	orh	r1,0x0
8000c286:	e2 09 02 16 	ld.d	r6,r1[r9<<0x1]
8000c28a:	fa e7 00 1c 	st.d	sp[28],r6
8000c28e:	40 61       	lddsp	r1,sp[0x18]

8000c290 <__loop_r2>:
8000c290:	e8 01 03 17 	ld.w	r7,r4[r1<<0x1]
8000c294:	ee 00 01 88 	mulnhh.w	r8,r7:b,r0:b
8000c298:	ee 00 04 b8 	machh.w	r8,r7:t,r0:t
8000c29c:	ee 00 07 a9 	mulhh.w	r9,r7:t,r0:b
8000c2a0:	ee 00 04 99 	machh.w	r9,r7:b,r0:t
8000c2a4:	fa e6 00 1c 	ld.d	r6,sp[28]
8000c2a8:	e8 02 03 03 	ld.w	r3,r4[r2]
8000c2ac:	e6 06 01 8c 	mulnhh.w	r12,r3:b,r6:b
8000c2b0:	e6 06 04 bc 	machh.w	r12,r3:t,r6:t
8000c2b4:	e6 06 07 ae 	mulhh.w	lr,r3:t,r6:b
8000c2b8:	e6 06 04 9e 	machh.w	lr,r3:b,r6:t
8000c2bc:	e8 01 03 03 	ld.w	r3,r4[r1]
8000c2c0:	e6 07 01 8a 	mulnhh.w	r10,r3:b,r7:b
8000c2c4:	e6 07 04 ba 	machh.w	r10,r3:t,r7:t
8000c2c8:	e6 07 07 ab 	mulhh.w	r11,r3:t,r7:b
8000c2cc:	e6 07 04 9b 	machh.w	r11,r3:b,r7:t
8000c2d0:	68 05       	ld.w	r5,r4[0x0]
8000c2d2:	a3 45       	asr	r5,0x2
8000c2d4:	e7 d5 b0 0e 	bfexts	r3,r5,0x0,0xe
8000c2d8:	eb d3 d0 10 	bfins	r5,r3,0x0,0x10
8000c2dc:	f0 0c 00 03 	add	r3,r8,r12
8000c2e0:	f0 0c 01 0c 	sub	r12,r8,r12
8000c2e4:	f2 0e 00 06 	add	r6,r9,lr
8000c2e8:	f2 0e 01 0e 	sub	lr,r9,lr
8000c2ec:	ea 0a 0e 38 	addhh.w	r8,r5:t,r10:t
8000c2f0:	ea 0a 0f 3a 	subhh.w	r10,r5:t,r10:t
8000c2f4:	ea 0b 0e 19 	addhh.w	r9,r5:b,r11:t
8000c2f8:	ea 0b 0f 1b 	subhh.w	r11,r5:b,r11:t
8000c2fc:	f0 03 0e 17 	addhh.w	r7,r8:b,r3:t
8000c300:	f2 06 0e 15 	addhh.w	r5,r9:b,r6:t
8000c304:	ef e5 c0 04 	sthh.w	r4[0x0],r7:b,r5:b
8000c308:	f0 03 0f 17 	subhh.w	r7,r8:b,r3:t
8000c30c:	f2 06 0f 15 	subhh.w	r5,r9:b,r6:t
8000c310:	ef e5 81 14 	sthh.w	r4[r1<<0x1],r7:b,r5:b
8000c314:	f4 0e 0e 17 	addhh.w	r7,r10:b,lr:t
8000c318:	f6 0c 0f 15 	subhh.w	r5,r11:b,r12:t
8000c31c:	ef e5 81 04 	sthh.w	r4[r1],r7:b,r5:b
8000c320:	f4 0e 0f 17 	subhh.w	r7,r10:b,lr:t
8000c324:	f6 0c 0e 15 	addhh.w	r5,r11:b,r12:t
8000c328:	ef e5 82 04 	sthh.w	r4[r2],r7:b,r5:b
8000c32c:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c330:	40 28       	lddsp	r8,sp[0x8]
8000c332:	08 38       	cp.w	r8,r4
8000c334:	fe 99 ff ae 	brgt	8000c290 <__loop_r2>
8000c338:	40 39       	lddsp	r9,sp[0xc]
8000c33a:	2f c9       	sub	r9,-4
8000c33c:	50 39       	stdsp	sp[0xc],r9
8000c33e:	40 65       	lddsp	r5,sp[0x18]
8000c340:	12 35       	cp.w	r5,r9
8000c342:	fe 99 ff 92 	brgt	8000c266 <__loop_j>

8000c346 <__loop_stage_end>:
8000c346:	40 51       	lddsp	r1,sp[0x14]
8000c348:	e2 01 16 02 	lsr	r1,r1,0x2
8000c34c:	50 51       	stdsp	sp[0x14],r1
8000c34e:	40 01       	lddsp	r1,sp[0x0]
8000c350:	20 21       	sub	r1,2
8000c352:	50 01       	stdsp	sp[0x0],r1
8000c354:	fe 99 ff 3e 	brgt	8000c1d0 <__loop_stage>

8000c358 <__address_end>:
8000c358:	2f 7d       	sub	sp,-36
8000c35a:	d8 32       	popm	r0-r7,pc
8000c35c:	c0 28       	rjmp	8000c360 <dsp16_trans_complexifft>
8000c35e:	d7 03       	nop

8000c360 <dsp16_trans_complexifft>:
8000c360:	eb cd 40 c0 	pushm	r6-r7,lr
8000c364:	18 96       	mov	r6,r12
8000c366:	14 97       	mov	r7,r10
8000c368:	cd 2e       	rcall	8000c10c <dsp16_trans_complexifft_ex>
8000c36a:	0c 9b       	mov	r11,r6
8000c36c:	30 1a       	mov	r10,1
8000c36e:	0c 9c       	mov	r12,r6
8000c370:	f4 07 09 4a 	lsl	r10,r10,r7
8000c374:	c4 8d       	rcall	8000c604 <dsp16_vect_complex_conj>
8000c376:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c37a:	d7 03       	nop

8000c37c <dsp16_trans_realcomplexfft>:
8000c37c:	d4 31       	pushm	r0-r7,lr
8000c37e:	20 9d       	sub	sp,36
8000c380:	f4 c0 00 02 	sub	r0,r10,2
8000c384:	50 00       	stdsp	sp[0x0],r0
8000c386:	30 11       	mov	r1,1
8000c388:	e2 0a 09 42 	lsl	r2,r1,r10
8000c38c:	18 94       	mov	r4,r12
8000c38e:	50 14       	stdsp	sp[0x4],r4
8000c390:	e8 02 00 20 	add	r0,r4,r2<<0x2
8000c394:	50 20       	stdsp	sp[0x8],r0
8000c396:	e0 61 01 00 	mov	r1,256
8000c39a:	50 51       	stdsp	sp[0x14],r1
8000c39c:	e4 0c 14 02 	asr	r12,r2,0x2
8000c3a0:	30 01       	mov	r1,0
8000c3a2:	30 03       	mov	r3,0
8000c3a4:	f4 02 11 20 	rsub	r2,r10,32

8000c3a8 <__loop_init>:
8000c3a8:	e2 02 09 49 	lsl	r9,r1,r2
8000c3ac:	5c 99       	brev	r9
8000c3ae:	f6 09 04 15 	ld.sh	r5,r11[r9<<0x1]
8000c3b2:	18 09       	add	r9,r12
8000c3b4:	f6 09 04 16 	ld.sh	r6,r11[r9<<0x1]
8000c3b8:	18 09       	add	r9,r12
8000c3ba:	f6 09 04 17 	ld.sh	r7,r11[r9<<0x1]
8000c3be:	18 09       	add	r9,r12
8000c3c0:	f6 09 04 18 	ld.sh	r8,r11[r9<<0x1]
8000c3c4:	a3 45       	asr	r5,0x2
8000c3c6:	a3 46       	asr	r6,0x2
8000c3c8:	a3 47       	asr	r7,0x2
8000c3ca:	a3 48       	asr	r8,0x2
8000c3cc:	ea 07 00 09 	add	r9,r5,r7
8000c3d0:	ec 08 00 0a 	add	r10,r6,r8
8000c3d4:	f2 0a 00 0e 	add	lr,r9,r10
8000c3d8:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
8000c3dc:	f2 0a 01 0e 	sub	lr,r9,r10
8000c3e0:	fd e3 c0 24 	sthh.w	r4[0x8],lr:b,r3:b
8000c3e4:	ea 07 01 0e 	sub	lr,r5,r7
8000c3e8:	f0 06 01 05 	sub	r5,r8,r6
8000c3ec:	fd e5 c0 14 	sthh.w	r4[0x4],lr:b,r5:b
8000c3f0:	ec 08 01 07 	sub	r7,r6,r8
8000c3f4:	fd e7 c0 34 	sthh.w	r4[0xc],lr:b,r7:b
8000c3f8:	e2 c1 ff fc 	sub	r1,r1,-4
8000c3fc:	e8 c4 ff f0 	sub	r4,r4,-16
8000c400:	08 30       	cp.w	r0,r4
8000c402:	fe 99 ff d3 	brgt	8000c3a8 <__loop_init>
8000c406:	40 14       	lddsp	r4,sp[0x4]
8000c408:	30 41       	mov	r1,4
8000c40a:	50 61       	stdsp	sp[0x18],r1

8000c40c <__loop_stage>:
8000c40c:	40 61       	lddsp	r1,sp[0x18]
8000c40e:	e2 01 15 02 	lsl	r1,r1,0x2
8000c412:	50 61       	stdsp	sp[0x18],r1
8000c414:	30 00       	mov	r0,0
8000c416:	50 40       	stdsp	sp[0x10],r0
8000c418:	40 14       	lddsp	r4,sp[0x4]
8000c41a:	e2 02 10 03 	mul	r2,r1,3

8000c41e <__loop_r1>:
8000c41e:	68 05       	ld.w	r5,r4[0x0]
8000c420:	e8 01 03 16 	ld.w	r6,r4[r1<<0x1]
8000c424:	e8 02 03 08 	ld.w	r8,r4[r2]
8000c428:	e8 01 03 07 	ld.w	r7,r4[r1]
8000c42c:	ea 07 0e 39 	addhh.w	r9,r5:t,r7:t
8000c430:	ec 08 0e 3a 	addhh.w	r10,r6:t,r8:t
8000c434:	ea 07 0e 0b 	addhh.w	r11,r5:b,r7:b
8000c438:	ec 08 0e 0c 	addhh.w	r12,r6:b,r8:b
8000c43c:	f2 0a 00 0e 	add	lr,r9,r10
8000c440:	f6 0c 00 03 	add	r3,r11,r12
8000c444:	a3 4e       	asr	lr,0x2
8000c446:	a3 43       	asr	r3,0x2
8000c448:	fd e3 c0 04 	sthh.w	r4[0x0],lr:b,r3:b
8000c44c:	f2 0a 01 0e 	sub	lr,r9,r10
8000c450:	f6 0c 01 00 	sub	r0,r11,r12
8000c454:	a3 4e       	asr	lr,0x2
8000c456:	a3 40       	asr	r0,0x2
8000c458:	fd e0 81 14 	sthh.w	r4[r1<<0x1],lr:b,r0:b
8000c45c:	ea 07 0f 39 	subhh.w	r9,r5:t,r7:t
8000c460:	ec 08 0f 3a 	subhh.w	r10,r6:t,r8:t
8000c464:	ea 07 0f 0b 	subhh.w	r11,r5:b,r7:b
8000c468:	ec 08 0f 0c 	subhh.w	r12,r6:b,r8:b
8000c46c:	f2 0c 00 0e 	add	lr,r9,r12
8000c470:	f6 0a 01 00 	sub	r0,r11,r10
8000c474:	a3 4e       	asr	lr,0x2
8000c476:	a3 40       	asr	r0,0x2
8000c478:	fd e0 81 04 	sthh.w	r4[r1],lr:b,r0:b
8000c47c:	f2 0c 01 0e 	sub	lr,r9,r12
8000c480:	f6 0a 00 00 	add	r0,r11,r10
8000c484:	a3 4e       	asr	lr,0x2
8000c486:	a3 40       	asr	r0,0x2
8000c488:	fd e0 82 04 	sthh.w	r4[r2],lr:b,r0:b
8000c48c:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c490:	40 28       	lddsp	r8,sp[0x8]
8000c492:	08 38       	cp.w	r8,r4
8000c494:	fe 99 ff c5 	brgt	8000c41e <__loop_r1>
8000c498:	58 41       	cp.w	r1,4
8000c49a:	e0 88 00 74 	brls	8000c582 <__loop_stage_end>
8000c49e:	30 49       	mov	r9,4
8000c4a0:	50 39       	stdsp	sp[0xc],r9

8000c4a2 <__loop_j>:
8000c4a2:	40 14       	lddsp	r4,sp[0x4]
8000c4a4:	12 04       	add	r4,r9
8000c4a6:	40 51       	lddsp	r1,sp[0x14]
8000c4a8:	40 49       	lddsp	r9,sp[0x10]
8000c4aa:	02 09       	add	r9,r1
8000c4ac:	50 49       	stdsp	sp[0x10],r9
8000c4ae:	e0 61 08 0c 	mov	r1,2060
8000c4b2:	ea 11 00 00 	orh	r1,0x0
8000c4b6:	e2 09 03 00 	ld.w	r0,r1[r9]
8000c4ba:	e0 61 00 0c 	mov	r1,12
8000c4be:	ea 11 00 00 	orh	r1,0x0
8000c4c2:	e2 09 02 16 	ld.d	r6,r1[r9<<0x1]
8000c4c6:	fa e7 00 1c 	st.d	sp[28],r6
8000c4ca:	40 61       	lddsp	r1,sp[0x18]

8000c4cc <__loop_r2>:
8000c4cc:	e8 01 03 17 	ld.w	r7,r4[r1<<0x1]
8000c4d0:	ee 00 01 88 	mulnhh.w	r8,r7:b,r0:b
8000c4d4:	ee 00 04 b8 	machh.w	r8,r7:t,r0:t
8000c4d8:	ee 00 07 a9 	mulhh.w	r9,r7:t,r0:b
8000c4dc:	ee 00 04 99 	machh.w	r9,r7:b,r0:t
8000c4e0:	fa e6 00 1c 	ld.d	r6,sp[28]
8000c4e4:	e8 02 03 03 	ld.w	r3,r4[r2]
8000c4e8:	e6 06 01 8c 	mulnhh.w	r12,r3:b,r6:b
8000c4ec:	e6 06 04 bc 	machh.w	r12,r3:t,r6:t
8000c4f0:	e6 06 07 ae 	mulhh.w	lr,r3:t,r6:b
8000c4f4:	e6 06 04 9e 	machh.w	lr,r3:b,r6:t
8000c4f8:	e8 01 03 03 	ld.w	r3,r4[r1]
8000c4fc:	e6 07 01 8a 	mulnhh.w	r10,r3:b,r7:b
8000c500:	e6 07 04 ba 	machh.w	r10,r3:t,r7:t
8000c504:	e6 07 07 ab 	mulhh.w	r11,r3:t,r7:b
8000c508:	e6 07 04 9b 	machh.w	r11,r3:b,r7:t
8000c50c:	68 05       	ld.w	r5,r4[0x0]
8000c50e:	a3 45       	asr	r5,0x2
8000c510:	e7 d5 b0 0e 	bfexts	r3,r5,0x0,0xe
8000c514:	eb d3 d0 10 	bfins	r5,r3,0x0,0x10
8000c518:	f0 0c 00 03 	add	r3,r8,r12
8000c51c:	f0 0c 01 0c 	sub	r12,r8,r12
8000c520:	f2 0e 00 06 	add	r6,r9,lr
8000c524:	f2 0e 01 0e 	sub	lr,r9,lr
8000c528:	ea 0a 0e 38 	addhh.w	r8,r5:t,r10:t
8000c52c:	ea 0a 0f 3a 	subhh.w	r10,r5:t,r10:t
8000c530:	ea 0b 0e 19 	addhh.w	r9,r5:b,r11:t
8000c534:	ea 0b 0f 1b 	subhh.w	r11,r5:b,r11:t
8000c538:	f0 03 0e 17 	addhh.w	r7,r8:b,r3:t
8000c53c:	f2 06 0e 15 	addhh.w	r5,r9:b,r6:t
8000c540:	ef e5 c0 04 	sthh.w	r4[0x0],r7:b,r5:b
8000c544:	f0 03 0f 17 	subhh.w	r7,r8:b,r3:t
8000c548:	f2 06 0f 15 	subhh.w	r5,r9:b,r6:t
8000c54c:	ef e5 81 14 	sthh.w	r4[r1<<0x1],r7:b,r5:b
8000c550:	f4 0e 0e 17 	addhh.w	r7,r10:b,lr:t
8000c554:	f6 0c 0f 15 	subhh.w	r5,r11:b,r12:t
8000c558:	ef e5 81 04 	sthh.w	r4[r1],r7:b,r5:b
8000c55c:	f4 0e 0f 17 	subhh.w	r7,r10:b,lr:t
8000c560:	f6 0c 0e 15 	addhh.w	r5,r11:b,r12:t
8000c564:	ef e5 82 04 	sthh.w	r4[r2],r7:b,r5:b
8000c568:	e8 01 00 24 	add	r4,r4,r1<<0x2
8000c56c:	40 28       	lddsp	r8,sp[0x8]
8000c56e:	08 38       	cp.w	r8,r4
8000c570:	fe 99 ff ae 	brgt	8000c4cc <__loop_r2>
8000c574:	40 39       	lddsp	r9,sp[0xc]
8000c576:	2f c9       	sub	r9,-4
8000c578:	50 39       	stdsp	sp[0xc],r9
8000c57a:	40 65       	lddsp	r5,sp[0x18]
8000c57c:	12 35       	cp.w	r5,r9
8000c57e:	fe 99 ff 92 	brgt	8000c4a2 <__loop_j>

8000c582 <__loop_stage_end>:
8000c582:	40 51       	lddsp	r1,sp[0x14]
8000c584:	e2 01 16 02 	lsr	r1,r1,0x2
8000c588:	50 51       	stdsp	sp[0x14],r1
8000c58a:	40 01       	lddsp	r1,sp[0x0]
8000c58c:	20 21       	sub	r1,2
8000c58e:	50 01       	stdsp	sp[0x0],r1
8000c590:	fe 99 ff 3e 	brgt	8000c40c <__loop_stage>

8000c594 <__address_end>:
8000c594:	2f 7d       	sub	sp,-36
8000c596:	d8 32       	popm	r0-r7,pc
8000c598:	c0 28       	rjmp	8000c59c <dsp16_vect_conj_kernel_ext>
8000c59a:	d7 03       	nop

8000c59c <dsp16_vect_conj_kernel_ext>:
8000c59c:	d4 31       	pushm	r0-r7,lr
8000c59e:	30 0e       	mov	lr,0
8000c5a0:	20 3a       	sub	r10,3
8000c5a2:	30 09       	mov	r9,0
8000c5a4:	f4 0e 19 00 	cp.h	lr,r10
8000c5a8:	c1 24       	brge	8000c5cc <__dsp16_conj_ext_end_loop>

8000c5aa <__dsp16_conj_ext_loop>:
8000c5aa:	f6 0e 02 20 	ld.d	r0,r11[lr<<0x2]
8000c5ae:	5c a0       	swap.h	r0
8000c5b0:	5c a1       	swap.h	r1
8000c5b2:	f8 0e 08 20 	st.d	r12[lr<<0x2],r0
8000c5b6:	2f ee       	sub	lr,-2
8000c5b8:	f6 0e 02 20 	ld.d	r0,r11[lr<<0x2]
8000c5bc:	5c a0       	swap.h	r0
8000c5be:	5c a1       	swap.h	r1
8000c5c0:	f8 0e 08 20 	st.d	r12[lr<<0x2],r0
8000c5c4:	2f ee       	sub	lr,-2
8000c5c6:	f4 0e 19 00 	cp.h	lr,r10
8000c5ca:	cf 05       	brlt	8000c5aa <__dsp16_conj_ext_loop>

8000c5cc <__dsp16_conj_ext_end_loop>:
8000c5cc:	1c 9c       	mov	r12,lr
8000c5ce:	d8 32       	popm	r0-r7,pc

8000c5d0 <dsp16_vect_conj_end_kernel_x0>:
8000c5d0:	d4 11       	pushm	r0-r3,lr
8000c5d2:	d8 12       	popm	r0-r3,pc

8000c5d4 <dsp16_vect_conj_end_kernel_x1>:
8000c5d4:	d4 11       	pushm	r0-r3,lr
8000c5d6:	76 00       	ld.w	r0,r11[0x0]
8000c5d8:	e1 e0 d0 0c 	sthh.w	r12[0x0],r0:b,r0:t
8000c5dc:	d8 12       	popm	r0-r3,pc

8000c5de <dsp16_vect_conj_end_kernel_x2>:
8000c5de:	d4 11       	pushm	r0-r3,lr
8000c5e0:	f6 e0 00 00 	ld.d	r0,r11[0]
8000c5e4:	5c a0       	swap.h	r0
8000c5e6:	5c a1       	swap.h	r1
8000c5e8:	f8 e1 00 00 	st.d	r12[0],r0
8000c5ec:	d8 12       	popm	r0-r3,pc

8000c5ee <dsp16_vect_conj_end_kernel_x3>:
8000c5ee:	d4 11       	pushm	r0-r3,lr
8000c5f0:	f6 e0 00 00 	ld.d	r0,r11[0]
8000c5f4:	5c a0       	swap.h	r0
8000c5f6:	5c a1       	swap.h	r1
8000c5f8:	f8 e1 00 00 	st.d	r12[0],r0
8000c5fc:	76 20       	ld.w	r0,r11[0x8]
8000c5fe:	e1 e0 d0 2c 	sthh.w	r12[0x8],r0:b,r0:t
8000c602:	d8 12       	popm	r0-r3,pc

8000c604 <dsp16_vect_complex_conj>:
8000c604:	eb cd 40 e0 	pushm	r5-r7,lr
8000c608:	16 97       	mov	r7,r11
8000c60a:	18 96       	mov	r6,r12
8000c60c:	14 95       	mov	r5,r10
8000c60e:	cc 7f       	rcall	8000c59c <dsp16_vect_conj_kernel_ext>
8000c610:	eb d5 c0 02 	bfextu	r5,r5,0x0,0x2
8000c614:	f8 0b 15 02 	lsl	r11,r12,0x2
8000c618:	48 58       	lddpc	r8,8000c62c <dsp16_vect_complex_conj+0x28>
8000c61a:	ec 0b 00 0c 	add	r12,r6,r11
8000c61e:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
8000c622:	ee 0b 00 0b 	add	r11,r7,r11
8000c626:	5d 18       	icall	r8
8000c628:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000c62c:	80 01       	ld.sh	r1,r0[0x0]
8000c62e:	39 b0       	mov	r0,-101

8000c630 <__avr32_u32_to_f64>:
8000c630:	f8 cb 00 00 	sub	r11,r12,0
8000c634:	30 0c       	mov	r12,0
8000c636:	c0 38       	rjmp	8000c63c <__avr32_s32_to_f64+0x4>

8000c638 <__avr32_s32_to_f64>:
8000c638:	18 9b       	mov	r11,r12
8000c63a:	5c 4b       	abs	r11
8000c63c:	30 0a       	mov	r10,0
8000c63e:	5e 0b       	reteq	r11
8000c640:	d4 01       	pushm	lr
8000c642:	e0 69 04 1e 	mov	r9,1054
8000c646:	f6 08 12 00 	clz	r8,r11
8000c64a:	c1 70       	breq	8000c678 <__avr32_s32_to_f64+0x40>
8000c64c:	c0 c3       	brcs	8000c664 <__avr32_s32_to_f64+0x2c>
8000c64e:	f0 0e 11 20 	rsub	lr,r8,32
8000c652:	f6 08 09 4b 	lsl	r11,r11,r8
8000c656:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c65a:	1c 4b       	or	r11,lr
8000c65c:	f4 08 09 4a 	lsl	r10,r10,r8
8000c660:	10 19       	sub	r9,r8
8000c662:	c0 b8       	rjmp	8000c678 <__avr32_s32_to_f64+0x40>
8000c664:	f4 08 12 00 	clz	r8,r10
8000c668:	f9 b8 03 00 	movlo	r8,0
8000c66c:	f7 b8 02 e0 	subhs	r8,-32
8000c670:	f4 08 09 4b 	lsl	r11,r10,r8
8000c674:	30 0a       	mov	r10,0
8000c676:	10 19       	sub	r9,r8
8000c678:	58 09       	cp.w	r9,0
8000c67a:	e0 89 00 30 	brgt	8000c6da <__avr32_s32_to_f64+0xa2>
8000c67e:	5c 39       	neg	r9
8000c680:	2f f9       	sub	r9,-1
8000c682:	e0 49 00 36 	cp.w	r9,54
8000c686:	c0 43       	brcs	8000c68e <__avr32_s32_to_f64+0x56>
8000c688:	30 0b       	mov	r11,0
8000c68a:	30 0a       	mov	r10,0
8000c68c:	c2 68       	rjmp	8000c6d8 <__avr32_s32_to_f64+0xa0>
8000c68e:	2f 69       	sub	r9,-10
8000c690:	f2 08 11 20 	rsub	r8,r9,32
8000c694:	e0 49 00 20 	cp.w	r9,32
8000c698:	c0 b2       	brcc	8000c6ae <__avr32_s32_to_f64+0x76>
8000c69a:	f4 08 09 4e 	lsl	lr,r10,r8
8000c69e:	f6 08 09 48 	lsl	r8,r11,r8
8000c6a2:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c6a6:	f6 09 0a 4b 	lsr	r11,r11,r9
8000c6aa:	10 4b       	or	r11,r8
8000c6ac:	c0 88       	rjmp	8000c6bc <__avr32_s32_to_f64+0x84>
8000c6ae:	f6 08 09 4e 	lsl	lr,r11,r8
8000c6b2:	14 4e       	or	lr,r10
8000c6b4:	16 9a       	mov	r10,r11
8000c6b6:	30 0b       	mov	r11,0
8000c6b8:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c6bc:	ed ba 00 00 	bld	r10,0x0
8000c6c0:	c0 92       	brcc	8000c6d2 <__avr32_s32_to_f64+0x9a>
8000c6c2:	1c 7e       	tst	lr,lr
8000c6c4:	c0 41       	brne	8000c6cc <__avr32_s32_to_f64+0x94>
8000c6c6:	ed ba 00 01 	bld	r10,0x1
8000c6ca:	c0 42       	brcc	8000c6d2 <__avr32_s32_to_f64+0x9a>
8000c6cc:	2f fa       	sub	r10,-1
8000c6ce:	f7 bb 02 ff 	subhs	r11,-1
8000c6d2:	5c fc       	rol	r12
8000c6d4:	5d 0b       	ror	r11
8000c6d6:	5d 0a       	ror	r10
8000c6d8:	d8 02       	popm	pc
8000c6da:	e0 68 03 ff 	mov	r8,1023
8000c6de:	ed ba 00 0b 	bld	r10,0xb
8000c6e2:	f7 b8 00 ff 	subeq	r8,-1
8000c6e6:	10 0a       	add	r10,r8
8000c6e8:	5c 0b       	acr	r11
8000c6ea:	f7 b9 03 fe 	sublo	r9,-2
8000c6ee:	e0 49 07 ff 	cp.w	r9,2047
8000c6f2:	c0 55       	brlt	8000c6fc <__avr32_s32_to_f64+0xc4>
8000c6f4:	30 0a       	mov	r10,0
8000c6f6:	fc 1b ff e0 	movh	r11,0xffe0
8000c6fa:	c0 c8       	rjmp	8000c712 <__floatsidf_return_op1>
8000c6fc:	ed bb 00 1f 	bld	r11,0x1f
8000c700:	f7 b9 01 01 	subne	r9,1
8000c704:	ab 9a       	lsr	r10,0xb
8000c706:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c70a:	a1 7b       	lsl	r11,0x1
8000c70c:	ab 9b       	lsr	r11,0xb
8000c70e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000c712 <__floatsidf_return_op1>:
8000c712:	a1 7c       	lsl	r12,0x1
8000c714:	5d 0b       	ror	r11
8000c716:	d8 02       	popm	pc

8000c718 <__avr32_f64_cmp_ge>:
8000c718:	1a de       	st.w	--sp,lr
8000c71a:	1a d7       	st.w	--sp,r7
8000c71c:	a1 7b       	lsl	r11,0x1
8000c71e:	5f 3c       	srlo	r12
8000c720:	a1 79       	lsl	r9,0x1
8000c722:	5f 37       	srlo	r7
8000c724:	5c fc       	rol	r12
8000c726:	fc 1e ff e0 	movh	lr,0xffe0
8000c72a:	58 0a       	cp.w	r10,0
8000c72c:	fc 0b 13 00 	cpc	r11,lr
8000c730:	e0 8b 00 1d 	brhi	8000c76a <__avr32_f64_cmp_ge+0x52>
8000c734:	58 08       	cp.w	r8,0
8000c736:	fc 09 13 00 	cpc	r9,lr
8000c73a:	e0 8b 00 18 	brhi	8000c76a <__avr32_f64_cmp_ge+0x52>
8000c73e:	58 0b       	cp.w	r11,0
8000c740:	f5 ba 00 00 	subfeq	r10,0
8000c744:	c1 50       	breq	8000c76e <__avr32_f64_cmp_ge+0x56>
8000c746:	1b 07       	ld.w	r7,sp++
8000c748:	1b 0e       	ld.w	lr,sp++
8000c74a:	58 3c       	cp.w	r12,3
8000c74c:	c0 a0       	breq	8000c760 <__avr32_f64_cmp_ge+0x48>
8000c74e:	58 1c       	cp.w	r12,1
8000c750:	c0 33       	brcs	8000c756 <__avr32_f64_cmp_ge+0x3e>
8000c752:	5e 0f       	reteq	1
8000c754:	5e 1d       	retne	0
8000c756:	10 3a       	cp.w	r10,r8
8000c758:	f2 0b 13 00 	cpc	r11,r9
8000c75c:	5e 2f       	reths	1
8000c75e:	5e 3d       	retlo	0
8000c760:	14 38       	cp.w	r8,r10
8000c762:	f6 09 13 00 	cpc	r9,r11
8000c766:	5e 2f       	reths	1
8000c768:	5e 3d       	retlo	0
8000c76a:	1b 07       	ld.w	r7,sp++
8000c76c:	d8 0a       	popm	pc,r12=0
8000c76e:	58 17       	cp.w	r7,1
8000c770:	5f 0c       	sreq	r12
8000c772:	58 09       	cp.w	r9,0
8000c774:	f5 b8 00 00 	subfeq	r8,0
8000c778:	1b 07       	ld.w	r7,sp++
8000c77a:	1b 0e       	ld.w	lr,sp++
8000c77c:	5e 0f       	reteq	1
8000c77e:	5e fc       	retal	r12

8000c780 <atoi>:
8000c780:	d4 01       	pushm	lr
8000c782:	30 aa       	mov	r10,10
8000c784:	30 0b       	mov	r11,0
8000c786:	c7 bd       	rcall	8000ca7c <strtol>
8000c788:	d8 02       	popm	pc
8000c78a:	d7 03       	nop

8000c78c <memcmp>:
8000c78c:	d4 01       	pushm	lr
8000c78e:	30 08       	mov	r8,0
8000c790:	c0 d8       	rjmp	8000c7aa <memcmp+0x1e>
8000c792:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000c796:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000c79a:	20 1a       	sub	r10,1
8000c79c:	2f f8       	sub	r8,-1
8000c79e:	f2 0e 18 00 	cp.b	lr,r9
8000c7a2:	c0 40       	breq	8000c7aa <memcmp+0x1e>
8000c7a4:	fc 09 01 0c 	sub	r12,lr,r9
8000c7a8:	d8 02       	popm	pc
8000c7aa:	58 0a       	cp.w	r10,0
8000c7ac:	cf 31       	brne	8000c792 <memcmp+0x6>
8000c7ae:	14 9c       	mov	r12,r10
8000c7b0:	d8 02       	popm	pc

8000c7b2 <memcpy>:
8000c7b2:	58 8a       	cp.w	r10,8
8000c7b4:	c2 f5       	brlt	8000c812 <memcpy+0x60>
8000c7b6:	f9 eb 10 09 	or	r9,r12,r11
8000c7ba:	e2 19 00 03 	andl	r9,0x3,COH
8000c7be:	e0 81 00 97 	brne	8000c8ec <memcpy+0x13a>
8000c7c2:	e0 4a 00 20 	cp.w	r10,32
8000c7c6:	c3 b4       	brge	8000c83c <memcpy+0x8a>
8000c7c8:	f4 08 14 02 	asr	r8,r10,0x2
8000c7cc:	f0 09 11 08 	rsub	r9,r8,8
8000c7d0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000c7d4:	76 69       	ld.w	r9,r11[0x18]
8000c7d6:	99 69       	st.w	r12[0x18],r9
8000c7d8:	76 59       	ld.w	r9,r11[0x14]
8000c7da:	99 59       	st.w	r12[0x14],r9
8000c7dc:	76 49       	ld.w	r9,r11[0x10]
8000c7de:	99 49       	st.w	r12[0x10],r9
8000c7e0:	76 39       	ld.w	r9,r11[0xc]
8000c7e2:	99 39       	st.w	r12[0xc],r9
8000c7e4:	76 29       	ld.w	r9,r11[0x8]
8000c7e6:	99 29       	st.w	r12[0x8],r9
8000c7e8:	76 19       	ld.w	r9,r11[0x4]
8000c7ea:	99 19       	st.w	r12[0x4],r9
8000c7ec:	76 09       	ld.w	r9,r11[0x0]
8000c7ee:	99 09       	st.w	r12[0x0],r9
8000c7f0:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000c7f4:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000c7f8:	e0 1a 00 03 	andl	r10,0x3
8000c7fc:	f4 0a 11 04 	rsub	r10,r10,4
8000c800:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000c804:	17 a9       	ld.ub	r9,r11[0x2]
8000c806:	b0 a9       	st.b	r8[0x2],r9
8000c808:	17 99       	ld.ub	r9,r11[0x1]
8000c80a:	b0 99       	st.b	r8[0x1],r9
8000c80c:	17 89       	ld.ub	r9,r11[0x0]
8000c80e:	b0 89       	st.b	r8[0x0],r9
8000c810:	5e fc       	retal	r12
8000c812:	f4 0a 11 09 	rsub	r10,r10,9
8000c816:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000c81a:	17 f9       	ld.ub	r9,r11[0x7]
8000c81c:	b8 f9       	st.b	r12[0x7],r9
8000c81e:	17 e9       	ld.ub	r9,r11[0x6]
8000c820:	b8 e9       	st.b	r12[0x6],r9
8000c822:	17 d9       	ld.ub	r9,r11[0x5]
8000c824:	b8 d9       	st.b	r12[0x5],r9
8000c826:	17 c9       	ld.ub	r9,r11[0x4]
8000c828:	b8 c9       	st.b	r12[0x4],r9
8000c82a:	17 b9       	ld.ub	r9,r11[0x3]
8000c82c:	b8 b9       	st.b	r12[0x3],r9
8000c82e:	17 a9       	ld.ub	r9,r11[0x2]
8000c830:	b8 a9       	st.b	r12[0x2],r9
8000c832:	17 99       	ld.ub	r9,r11[0x1]
8000c834:	b8 99       	st.b	r12[0x1],r9
8000c836:	17 89       	ld.ub	r9,r11[0x0]
8000c838:	b8 89       	st.b	r12[0x0],r9
8000c83a:	5e fc       	retal	r12
8000c83c:	eb cd 40 c0 	pushm	r6-r7,lr
8000c840:	18 99       	mov	r9,r12
8000c842:	22 0a       	sub	r10,32
8000c844:	b7 07       	ld.d	r6,r11++
8000c846:	b3 26       	st.d	r9++,r6
8000c848:	b7 07       	ld.d	r6,r11++
8000c84a:	b3 26       	st.d	r9++,r6
8000c84c:	b7 07       	ld.d	r6,r11++
8000c84e:	b3 26       	st.d	r9++,r6
8000c850:	b7 07       	ld.d	r6,r11++
8000c852:	b3 26       	st.d	r9++,r6
8000c854:	22 0a       	sub	r10,32
8000c856:	cf 74       	brge	8000c844 <memcpy+0x92>
8000c858:	2f 0a       	sub	r10,-16
8000c85a:	c0 65       	brlt	8000c866 <memcpy+0xb4>
8000c85c:	b7 07       	ld.d	r6,r11++
8000c85e:	b3 26       	st.d	r9++,r6
8000c860:	b7 07       	ld.d	r6,r11++
8000c862:	b3 26       	st.d	r9++,r6
8000c864:	21 0a       	sub	r10,16
8000c866:	5c 3a       	neg	r10
8000c868:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000c86c:	d7 03       	nop
8000c86e:	d7 03       	nop
8000c870:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000c874:	f3 66 00 0e 	st.b	r9[14],r6
8000c878:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000c87c:	f3 66 00 0d 	st.b	r9[13],r6
8000c880:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000c884:	f3 66 00 0c 	st.b	r9[12],r6
8000c888:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000c88c:	f3 66 00 0b 	st.b	r9[11],r6
8000c890:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000c894:	f3 66 00 0a 	st.b	r9[10],r6
8000c898:	f7 36 00 09 	ld.ub	r6,r11[9]
8000c89c:	f3 66 00 09 	st.b	r9[9],r6
8000c8a0:	f7 36 00 08 	ld.ub	r6,r11[8]
8000c8a4:	f3 66 00 08 	st.b	r9[8],r6
8000c8a8:	f7 36 00 07 	ld.ub	r6,r11[7]
8000c8ac:	f3 66 00 07 	st.b	r9[7],r6
8000c8b0:	f7 36 00 06 	ld.ub	r6,r11[6]
8000c8b4:	f3 66 00 06 	st.b	r9[6],r6
8000c8b8:	f7 36 00 05 	ld.ub	r6,r11[5]
8000c8bc:	f3 66 00 05 	st.b	r9[5],r6
8000c8c0:	f7 36 00 04 	ld.ub	r6,r11[4]
8000c8c4:	f3 66 00 04 	st.b	r9[4],r6
8000c8c8:	f7 36 00 03 	ld.ub	r6,r11[3]
8000c8cc:	f3 66 00 03 	st.b	r9[3],r6
8000c8d0:	f7 36 00 02 	ld.ub	r6,r11[2]
8000c8d4:	f3 66 00 02 	st.b	r9[2],r6
8000c8d8:	f7 36 00 01 	ld.ub	r6,r11[1]
8000c8dc:	f3 66 00 01 	st.b	r9[1],r6
8000c8e0:	f7 36 00 00 	ld.ub	r6,r11[0]
8000c8e4:	f3 66 00 00 	st.b	r9[0],r6
8000c8e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c8ec:	20 1a       	sub	r10,1
8000c8ee:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000c8f2:	f8 0a 0b 09 	st.b	r12[r10],r9
8000c8f6:	cf b1       	brne	8000c8ec <memcpy+0x13a>
8000c8f8:	5e fc       	retal	r12

8000c8fa <memset>:
8000c8fa:	18 98       	mov	r8,r12
8000c8fc:	c0 38       	rjmp	8000c902 <memset+0x8>
8000c8fe:	10 cb       	st.b	r8++,r11
8000c900:	20 1a       	sub	r10,1
8000c902:	58 0a       	cp.w	r10,0
8000c904:	cf d1       	brne	8000c8fe <memset+0x4>
8000c906:	5e fc       	retal	r12

8000c908 <sprintf>:
8000c908:	d4 01       	pushm	lr
8000c90a:	21 7d       	sub	sp,92
8000c90c:	e0 68 ff ff 	mov	r8,65535
8000c910:	ea 18 7f ff 	orh	r8,0x7fff
8000c914:	50 58       	stdsp	sp[0x14],r8
8000c916:	50 28       	stdsp	sp[0x8],r8
8000c918:	e0 68 02 08 	mov	r8,520
8000c91c:	ba 68       	st.h	sp[0xc],r8
8000c91e:	3f f8       	mov	r8,-1
8000c920:	ba 78       	st.h	sp[0xe],r8
8000c922:	48 88       	lddpc	r8,8000c940 <sprintf+0x38>
8000c924:	50 4c       	stdsp	sp[0x10],r12
8000c926:	16 9a       	mov	r10,r11
8000c928:	50 0c       	stdsp	sp[0x0],r12
8000c92a:	fa c9 ff a0 	sub	r9,sp,-96
8000c92e:	70 0c       	ld.w	r12,r8[0x0]
8000c930:	1a 9b       	mov	r11,sp
8000c932:	e0 a0 02 49 	rcall	8000cdc4 <_vfprintf_r>
8000c936:	30 09       	mov	r9,0
8000c938:	40 08       	lddsp	r8,sp[0x0]
8000c93a:	b0 89       	st.b	r8[0x0],r9
8000c93c:	2e 9d       	sub	sp,-92
8000c93e:	d8 02       	popm	pc
8000c940:	00 00       	add	r0,r0
8000c942:	0d 04       	ld.w	r4,r6++

8000c944 <_strtol_r>:
8000c944:	d4 31       	pushm	r0-r7,lr
8000c946:	20 3d       	sub	sp,12
8000c948:	4c c8       	lddpc	r8,8000ca78 <_strtol_r+0x134>
8000c94a:	50 2c       	stdsp	sp[0x8],r12
8000c94c:	70 01       	ld.w	r1,r8[0x0]
8000c94e:	16 98       	mov	r8,r11
8000c950:	11 3e       	ld.ub	lr,r8++
8000c952:	e2 0e 07 06 	ld.ub	r6,r1[lr]
8000c956:	e2 16 00 08 	andl	r6,0x8,COH
8000c95a:	cf b1       	brne	8000c950 <_strtol_r+0xc>
8000c95c:	e0 4e 00 2d 	cp.w	lr,45
8000c960:	c0 41       	brne	8000c968 <_strtol_r+0x24>
8000c962:	11 3e       	ld.ub	lr,r8++
8000c964:	30 16       	mov	r6,1
8000c966:	c0 58       	rjmp	8000c970 <_strtol_r+0x2c>
8000c968:	e0 4e 00 2b 	cp.w	lr,43
8000c96c:	c0 21       	brne	8000c970 <_strtol_r+0x2c>
8000c96e:	11 3e       	ld.ub	lr,r8++
8000c970:	58 09       	cp.w	r9,0
8000c972:	5f 0c       	sreq	r12
8000c974:	59 09       	cp.w	r9,16
8000c976:	5f 05       	sreq	r5
8000c978:	30 07       	mov	r7,0
8000c97a:	f9 e5 10 05 	or	r5,r12,r5
8000c97e:	ee 05 18 00 	cp.b	r5,r7
8000c982:	c1 e0       	breq	8000c9be <_strtol_r+0x7a>
8000c984:	e0 4e 00 30 	cp.w	lr,48
8000c988:	c1 31       	brne	8000c9ae <_strtol_r+0x6a>
8000c98a:	11 85       	ld.ub	r5,r8[0x0]
8000c98c:	35 84       	mov	r4,88
8000c98e:	37 83       	mov	r3,120
8000c990:	e8 05 18 00 	cp.b	r5,r4
8000c994:	5f 04       	sreq	r4
8000c996:	e6 05 18 00 	cp.b	r5,r3
8000c99a:	5f 05       	sreq	r5
8000c99c:	e9 e5 10 05 	or	r5,r4,r5
8000c9a0:	ee 05 18 00 	cp.b	r5,r7
8000c9a4:	c0 50       	breq	8000c9ae <_strtol_r+0x6a>
8000c9a6:	11 9e       	ld.ub	lr,r8[0x1]
8000c9a8:	31 09       	mov	r9,16
8000c9aa:	2f e8       	sub	r8,-2
8000c9ac:	c0 98       	rjmp	8000c9be <_strtol_r+0x7a>
8000c9ae:	58 0c       	cp.w	r12,0
8000c9b0:	c0 70       	breq	8000c9be <_strtol_r+0x7a>
8000c9b2:	e0 4e 00 30 	cp.w	lr,48
8000c9b6:	f9 b9 00 08 	moveq	r9,8
8000c9ba:	f9 b9 01 0a 	movne	r9,10
8000c9be:	e0 6c ff ff 	mov	r12,65535
8000c9c2:	ea 1c 7f ff 	orh	r12,0x7fff
8000c9c6:	30 07       	mov	r7,0
8000c9c8:	fc 15 80 00 	movh	r5,0x8000
8000c9cc:	0e 93       	mov	r3,r7
8000c9ce:	0e 36       	cp.w	r6,r7
8000c9d0:	f8 05 17 00 	moveq	r5,r12
8000c9d4:	0e 9c       	mov	r12,r7
8000c9d6:	ea 09 0d 04 	divu	r4,r5,r9
8000c9da:	08 92       	mov	r2,r4
8000c9dc:	50 05       	stdsp	sp[0x0],r5
8000c9de:	e2 0e 07 04 	ld.ub	r4,r1[lr]
8000c9e2:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
8000c9e6:	f9 b0 01 37 	movne	r0,55
8000c9ea:	f9 b0 00 57 	moveq	r0,87
8000c9ee:	50 10       	stdsp	sp[0x4],r0
8000c9f0:	fc c5 00 30 	sub	r5,lr,48
8000c9f4:	08 90       	mov	r0,r4
8000c9f6:	e2 10 00 04 	andl	r0,0x4,COH
8000c9fa:	c0 81       	brne	8000ca0a <_strtol_r+0xc6>
8000c9fc:	40 10       	lddsp	r0,sp[0x4]
8000c9fe:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
8000ca02:	fc 00 01 05 	sub	r5,lr,r0
8000ca06:	58 04       	cp.w	r4,0
8000ca08:	c1 c0       	breq	8000ca40 <_strtol_r+0xfc>
8000ca0a:	12 35       	cp.w	r5,r9
8000ca0c:	c1 a4       	brge	8000ca40 <_strtol_r+0xfc>
8000ca0e:	04 3c       	cp.w	r12,r2
8000ca10:	5f be       	srhi	lr
8000ca12:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
8000ca16:	e6 0e 18 00 	cp.b	lr,r3
8000ca1a:	c1 01       	brne	8000ca3a <_strtol_r+0xf6>
8000ca1c:	04 3c       	cp.w	r12,r2
8000ca1e:	5f 0e       	sreq	lr
8000ca20:	40 07       	lddsp	r7,sp[0x0]
8000ca22:	0e 35       	cp.w	r5,r7
8000ca24:	5f 97       	srgt	r7
8000ca26:	ef ee 00 0e 	and	lr,r7,lr
8000ca2a:	e6 0e 18 00 	cp.b	lr,r3
8000ca2e:	c0 61       	brne	8000ca3a <_strtol_r+0xf6>
8000ca30:	b3 3c       	mul	r12,r9
8000ca32:	30 17       	mov	r7,1
8000ca34:	ea 0c 00 0c 	add	r12,r5,r12
8000ca38:	c0 28       	rjmp	8000ca3c <_strtol_r+0xf8>
8000ca3a:	3f f7       	mov	r7,-1
8000ca3c:	11 3e       	ld.ub	lr,r8++
8000ca3e:	cd 0b       	rjmp	8000c9de <_strtol_r+0x9a>
8000ca40:	5b f7       	cp.w	r7,-1
8000ca42:	c0 e1       	brne	8000ca5e <_strtol_r+0x11a>
8000ca44:	e0 69 ff ff 	mov	r9,65535
8000ca48:	ea 19 7f ff 	orh	r9,0x7fff
8000ca4c:	fc 1c 80 00 	movh	r12,0x8000
8000ca50:	40 20       	lddsp	r0,sp[0x8]
8000ca52:	58 06       	cp.w	r6,0
8000ca54:	f2 0c 17 00 	moveq	r12,r9
8000ca58:	32 29       	mov	r9,34
8000ca5a:	81 39       	st.w	r0[0xc],r9
8000ca5c:	c0 48       	rjmp	8000ca64 <_strtol_r+0x120>
8000ca5e:	58 06       	cp.w	r6,0
8000ca60:	fb bc 01 00 	rsubne	r12,0
8000ca64:	58 0a       	cp.w	r10,0
8000ca66:	c0 70       	breq	8000ca74 <_strtol_r+0x130>
8000ca68:	58 07       	cp.w	r7,0
8000ca6a:	f9 b9 01 ff 	movne	r9,-1
8000ca6e:	f1 d9 e1 0b 	addne	r11,r8,r9
8000ca72:	95 0b       	st.w	r10[0x0],r11
8000ca74:	2f dd       	sub	sp,-12
8000ca76:	d8 32       	popm	r0-r7,pc
8000ca78:	00 00       	add	r0,r0
8000ca7a:	0c 10       	sub	r0,r6

8000ca7c <strtol>:
8000ca7c:	d4 01       	pushm	lr
8000ca7e:	48 48       	lddpc	r8,8000ca8c <strtol+0x10>
8000ca80:	14 99       	mov	r9,r10
8000ca82:	16 9a       	mov	r10,r11
8000ca84:	18 9b       	mov	r11,r12
8000ca86:	70 0c       	ld.w	r12,r8[0x0]
8000ca88:	c5 ef       	rcall	8000c944 <_strtol_r>
8000ca8a:	d8 02       	popm	pc
8000ca8c:	00 00       	add	r0,r0
8000ca8e:	0d 04       	ld.w	r4,r6++

8000ca90 <get_arg>:
8000ca90:	d4 31       	pushm	r0-r7,lr
8000ca92:	20 8d       	sub	sp,32
8000ca94:	fa c4 ff bc 	sub	r4,sp,-68
8000ca98:	50 4b       	stdsp	sp[0x10],r11
8000ca9a:	68 2e       	ld.w	lr,r4[0x8]
8000ca9c:	50 58       	stdsp	sp[0x14],r8
8000ca9e:	12 96       	mov	r6,r9
8000caa0:	7c 0b       	ld.w	r11,lr[0x0]
8000caa2:	70 05       	ld.w	r5,r8[0x0]
8000caa4:	50 6e       	stdsp	sp[0x18],lr
8000caa6:	58 0b       	cp.w	r11,0
8000caa8:	f4 0b 17 00 	moveq	r11,r10
8000caac:	68 03       	ld.w	r3,r4[0x0]
8000caae:	68 11       	ld.w	r1,r4[0x4]
8000cab0:	40 49       	lddsp	r9,sp[0x10]
8000cab2:	30 08       	mov	r8,0
8000cab4:	c2 a9       	rjmp	8000cd08 <get_arg+0x278>
8000cab6:	2f fb       	sub	r11,-1
8000cab8:	32 5c       	mov	r12,37
8000caba:	17 8a       	ld.ub	r10,r11[0x0]
8000cabc:	f8 0a 18 00 	cp.b	r10,r12
8000cac0:	5f 1e       	srne	lr
8000cac2:	f0 0a 18 00 	cp.b	r10,r8
8000cac6:	5f 1c       	srne	r12
8000cac8:	fd ec 00 0c 	and	r12,lr,r12
8000cacc:	f0 0c 18 00 	cp.b	r12,r8
8000cad0:	cf 31       	brne	8000cab6 <get_arg+0x26>
8000cad2:	58 0a       	cp.w	r10,0
8000cad4:	e0 80 01 27 	breq	8000cd22 <get_arg+0x292>
8000cad8:	30 0c       	mov	r12,0
8000cada:	3f fa       	mov	r10,-1
8000cadc:	18 90       	mov	r0,r12
8000cade:	50 3a       	stdsp	sp[0xc],r10
8000cae0:	18 94       	mov	r4,r12
8000cae2:	18 92       	mov	r2,r12
8000cae4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000cae8:	16 97       	mov	r7,r11
8000caea:	50 7c       	stdsp	sp[0x1c],r12
8000caec:	4c dc       	lddpc	r12,8000cc20 <get_arg+0x190>
8000caee:	0f 3a       	ld.ub	r10,r7++
8000caf0:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000caf4:	40 7c       	lddsp	r12,sp[0x1c]
8000caf6:	1c 0c       	add	r12,lr
8000caf8:	4c be       	lddpc	lr,8000cc24 <get_arg+0x194>
8000cafa:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000cafe:	20 1e       	sub	lr,1
8000cb00:	50 0e       	stdsp	sp[0x0],lr
8000cb02:	4c ae       	lddpc	lr,8000cc28 <get_arg+0x198>
8000cb04:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000cb08:	50 7c       	stdsp	sp[0x1c],r12
8000cb0a:	40 0c       	lddsp	r12,sp[0x0]
8000cb0c:	58 7c       	cp.w	r12,7
8000cb0e:	e0 8b 00 f6 	brhi	8000ccfa <get_arg+0x26a>
8000cb12:	4c 7e       	lddpc	lr,8000cc2c <get_arg+0x19c>
8000cb14:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000cb18:	36 8b       	mov	r11,104
8000cb1a:	f6 0a 18 00 	cp.b	r10,r11
8000cb1e:	e0 80 00 ee 	breq	8000ccfa <get_arg+0x26a>
8000cb22:	37 1b       	mov	r11,113
8000cb24:	f6 0a 18 00 	cp.b	r10,r11
8000cb28:	c0 70       	breq	8000cb36 <get_arg+0xa6>
8000cb2a:	34 cb       	mov	r11,76
8000cb2c:	f6 0a 18 00 	cp.b	r10,r11
8000cb30:	c0 51       	brne	8000cb3a <get_arg+0xaa>
8000cb32:	a3 b4       	sbr	r4,0x3
8000cb34:	ce 38       	rjmp	8000ccfa <get_arg+0x26a>
8000cb36:	a5 b4       	sbr	r4,0x5
8000cb38:	ce 18       	rjmp	8000ccfa <get_arg+0x26a>
8000cb3a:	0f 8b       	ld.ub	r11,r7[0x0]
8000cb3c:	36 ca       	mov	r10,108
8000cb3e:	f4 0b 18 00 	cp.b	r11,r10
8000cb42:	c0 51       	brne	8000cb4c <get_arg+0xbc>
8000cb44:	a5 b4       	sbr	r4,0x5
8000cb46:	ee cb ff ff 	sub	r11,r7,-1
8000cb4a:	cd 98       	rjmp	8000ccfc <get_arg+0x26c>
8000cb4c:	a5 a4       	sbr	r4,0x4
8000cb4e:	cd 68       	rjmp	8000ccfa <get_arg+0x26a>
8000cb50:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000cb54:	36 7c       	mov	r12,103
8000cb56:	f8 0a 18 00 	cp.b	r10,r12
8000cb5a:	e0 8b 00 27 	brhi	8000cba8 <get_arg+0x118>
8000cb5e:	36 5b       	mov	r11,101
8000cb60:	f6 0a 18 00 	cp.b	r10,r11
8000cb64:	c4 82       	brcc	8000cbf4 <get_arg+0x164>
8000cb66:	34 fb       	mov	r11,79
8000cb68:	f6 0a 18 00 	cp.b	r10,r11
8000cb6c:	c4 80       	breq	8000cbfc <get_arg+0x16c>
8000cb6e:	e0 8b 00 0c 	brhi	8000cb86 <get_arg+0xf6>
8000cb72:	34 5b       	mov	r11,69
8000cb74:	f6 0a 18 00 	cp.b	r10,r11
8000cb78:	c3 e0       	breq	8000cbf4 <get_arg+0x164>
8000cb7a:	34 7b       	mov	r11,71
8000cb7c:	f6 0a 18 00 	cp.b	r10,r11
8000cb80:	c3 a0       	breq	8000cbf4 <get_arg+0x164>
8000cb82:	34 4b       	mov	r11,68
8000cb84:	c0 88       	rjmp	8000cb94 <get_arg+0x104>
8000cb86:	35 8b       	mov	r11,88
8000cb88:	f6 0a 18 00 	cp.b	r10,r11
8000cb8c:	c2 c0       	breq	8000cbe4 <get_arg+0x154>
8000cb8e:	e0 8b 00 07 	brhi	8000cb9c <get_arg+0x10c>
8000cb92:	35 5b       	mov	r11,85
8000cb94:	f6 0a 18 00 	cp.b	r10,r11
8000cb98:	c3 51       	brne	8000cc02 <get_arg+0x172>
8000cb9a:	c3 18       	rjmp	8000cbfc <get_arg+0x16c>
8000cb9c:	36 3b       	mov	r11,99
8000cb9e:	f6 0a 18 00 	cp.b	r10,r11
8000cba2:	c2 f0       	breq	8000cc00 <get_arg+0x170>
8000cba4:	36 4b       	mov	r11,100
8000cba6:	c0 e8       	rjmp	8000cbc2 <get_arg+0x132>
8000cba8:	37 0b       	mov	r11,112
8000cbaa:	f6 0a 18 00 	cp.b	r10,r11
8000cbae:	c2 50       	breq	8000cbf8 <get_arg+0x168>
8000cbb0:	e0 8b 00 0d 	brhi	8000cbca <get_arg+0x13a>
8000cbb4:	36 eb       	mov	r11,110
8000cbb6:	f6 0a 18 00 	cp.b	r10,r11
8000cbba:	c1 f0       	breq	8000cbf8 <get_arg+0x168>
8000cbbc:	e0 8b 00 14 	brhi	8000cbe4 <get_arg+0x154>
8000cbc0:	36 9b       	mov	r11,105
8000cbc2:	f6 0a 18 00 	cp.b	r10,r11
8000cbc6:	c1 e1       	brne	8000cc02 <get_arg+0x172>
8000cbc8:	c0 e8       	rjmp	8000cbe4 <get_arg+0x154>
8000cbca:	37 5b       	mov	r11,117
8000cbcc:	f6 0a 18 00 	cp.b	r10,r11
8000cbd0:	c0 a0       	breq	8000cbe4 <get_arg+0x154>
8000cbd2:	37 8b       	mov	r11,120
8000cbd4:	f6 0a 18 00 	cp.b	r10,r11
8000cbd8:	c0 60       	breq	8000cbe4 <get_arg+0x154>
8000cbda:	37 3b       	mov	r11,115
8000cbdc:	f6 0a 18 00 	cp.b	r10,r11
8000cbe0:	c1 11       	brne	8000cc02 <get_arg+0x172>
8000cbe2:	c0 b8       	rjmp	8000cbf8 <get_arg+0x168>
8000cbe4:	ed b4 00 04 	bld	r4,0x4
8000cbe8:	c0 a0       	breq	8000cbfc <get_arg+0x16c>
8000cbea:	ed b4 00 05 	bld	r4,0x5
8000cbee:	c0 91       	brne	8000cc00 <get_arg+0x170>
8000cbf0:	30 20       	mov	r0,2
8000cbf2:	c0 88       	rjmp	8000cc02 <get_arg+0x172>
8000cbf4:	30 40       	mov	r0,4
8000cbf6:	c0 68       	rjmp	8000cc02 <get_arg+0x172>
8000cbf8:	30 30       	mov	r0,3
8000cbfa:	c0 48       	rjmp	8000cc02 <get_arg+0x172>
8000cbfc:	30 10       	mov	r0,1
8000cbfe:	c0 28       	rjmp	8000cc02 <get_arg+0x172>
8000cc00:	30 00       	mov	r0,0
8000cc02:	40 3b       	lddsp	r11,sp[0xc]
8000cc04:	5b fb       	cp.w	r11,-1
8000cc06:	c0 40       	breq	8000cc0e <get_arg+0x17e>
8000cc08:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000cc0c:	c7 78       	rjmp	8000ccfa <get_arg+0x26a>
8000cc0e:	58 60       	cp.w	r0,6
8000cc10:	e0 8b 00 75 	brhi	8000ccfa <get_arg+0x26a>
8000cc14:	6c 0a       	ld.w	r10,r6[0x0]
8000cc16:	ea cc ff ff 	sub	r12,r5,-1
8000cc1a:	48 6e       	lddpc	lr,8000cc30 <get_arg+0x1a0>
8000cc1c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000cc20:	80 01       	ld.sh	r1,r0[0x0]
8000cc22:	3d a0       	mov	r0,-38
8000cc24:	80 01       	ld.sh	r1,r0[0x0]
8000cc26:	3c d8       	mov	r8,-51
8000cc28:	80 01       	ld.sh	r1,r0[0x0]
8000cc2a:	3c 6c       	mov	r12,-58
8000cc2c:	80 01       	ld.sh	r1,r0[0x0]
8000cc2e:	3a cc       	mov	r12,-84
8000cc30:	80 01       	ld.sh	r1,r0[0x0]
8000cc32:	3a ec       	mov	r12,-82
8000cc34:	f4 cb ff f8 	sub	r11,r10,-8
8000cc38:	8d 0b       	st.w	r6[0x0],r11
8000cc3a:	f4 ea 00 00 	ld.d	r10,r10[0]
8000cc3e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000cc42:	c0 f8       	rjmp	8000cc60 <get_arg+0x1d0>
8000cc44:	f4 cb ff fc 	sub	r11,r10,-4
8000cc48:	8d 0b       	st.w	r6[0x0],r11
8000cc4a:	74 0a       	ld.w	r10,r10[0x0]
8000cc4c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000cc50:	c0 88       	rjmp	8000cc60 <get_arg+0x1d0>
8000cc52:	f4 cb ff f8 	sub	r11,r10,-8
8000cc56:	8d 0b       	st.w	r6[0x0],r11
8000cc58:	f4 ea 00 00 	ld.d	r10,r10[0]
8000cc5c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000cc60:	0e 9b       	mov	r11,r7
8000cc62:	18 95       	mov	r5,r12
8000cc64:	c4 c8       	rjmp	8000ccfc <get_arg+0x26c>
8000cc66:	62 0a       	ld.w	r10,r1[0x0]
8000cc68:	5b fa       	cp.w	r10,-1
8000cc6a:	c0 a1       	brne	8000cc7e <get_arg+0x1ee>
8000cc6c:	50 19       	stdsp	sp[0x4],r9
8000cc6e:	50 28       	stdsp	sp[0x8],r8
8000cc70:	e0 6a 00 80 	mov	r10,128
8000cc74:	30 0b       	mov	r11,0
8000cc76:	02 9c       	mov	r12,r1
8000cc78:	c4 1e       	rcall	8000c8fa <memset>
8000cc7a:	40 28       	lddsp	r8,sp[0x8]
8000cc7c:	40 19       	lddsp	r9,sp[0x4]
8000cc7e:	e4 cc 00 01 	sub	r12,r2,1
8000cc82:	0e 9b       	mov	r11,r7
8000cc84:	50 3c       	stdsp	sp[0xc],r12
8000cc86:	f2 0c 0c 49 	max	r9,r9,r12
8000cc8a:	c3 98       	rjmp	8000ccfc <get_arg+0x26c>
8000cc8c:	62 0a       	ld.w	r10,r1[0x0]
8000cc8e:	5b fa       	cp.w	r10,-1
8000cc90:	c0 a1       	brne	8000cca4 <get_arg+0x214>
8000cc92:	50 19       	stdsp	sp[0x4],r9
8000cc94:	50 28       	stdsp	sp[0x8],r8
8000cc96:	e0 6a 00 80 	mov	r10,128
8000cc9a:	30 0b       	mov	r11,0
8000cc9c:	02 9c       	mov	r12,r1
8000cc9e:	c2 ee       	rcall	8000c8fa <memset>
8000cca0:	40 28       	lddsp	r8,sp[0x8]
8000cca2:	40 19       	lddsp	r9,sp[0x4]
8000cca4:	20 12       	sub	r2,1
8000cca6:	30 0a       	mov	r10,0
8000cca8:	0e 9b       	mov	r11,r7
8000ccaa:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000ccae:	f2 02 0c 49 	max	r9,r9,r2
8000ccb2:	c2 58       	rjmp	8000ccfc <get_arg+0x26c>
8000ccb4:	16 97       	mov	r7,r11
8000ccb6:	6c 0a       	ld.w	r10,r6[0x0]
8000ccb8:	f4 cb ff fc 	sub	r11,r10,-4
8000ccbc:	8d 0b       	st.w	r6[0x0],r11
8000ccbe:	74 0a       	ld.w	r10,r10[0x0]
8000ccc0:	0e 9b       	mov	r11,r7
8000ccc2:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000ccc6:	2f f5       	sub	r5,-1
8000ccc8:	c1 a8       	rjmp	8000ccfc <get_arg+0x26c>
8000ccca:	f4 c2 00 30 	sub	r2,r10,48
8000ccce:	c0 68       	rjmp	8000ccda <get_arg+0x24a>
8000ccd0:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000ccd4:	2f f7       	sub	r7,-1
8000ccd6:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000ccda:	0f 8a       	ld.ub	r10,r7[0x0]
8000ccdc:	58 0a       	cp.w	r10,0
8000ccde:	c0 e0       	breq	8000ccfa <get_arg+0x26a>
8000cce0:	23 0a       	sub	r10,48
8000cce2:	58 9a       	cp.w	r10,9
8000cce4:	fe 98 ff f6 	brls	8000ccd0 <get_arg+0x240>
8000cce8:	c0 98       	rjmp	8000ccfa <get_arg+0x26a>
8000ccea:	2f f7       	sub	r7,-1
8000ccec:	0f 8a       	ld.ub	r10,r7[0x0]
8000ccee:	58 0a       	cp.w	r10,0
8000ccf0:	c0 50       	breq	8000ccfa <get_arg+0x26a>
8000ccf2:	23 0a       	sub	r10,48
8000ccf4:	58 9a       	cp.w	r10,9
8000ccf6:	fe 98 ff fa 	brls	8000ccea <get_arg+0x25a>
8000ccfa:	0e 9b       	mov	r11,r7
8000ccfc:	40 7c       	lddsp	r12,sp[0x1c]
8000ccfe:	30 ba       	mov	r10,11
8000cd00:	f4 0c 18 00 	cp.b	r12,r10
8000cd04:	fe 91 fe f0 	brne	8000cae4 <get_arg+0x54>
8000cd08:	40 42       	lddsp	r2,sp[0x10]
8000cd0a:	17 8c       	ld.ub	r12,r11[0x0]
8000cd0c:	0a 32       	cp.w	r2,r5
8000cd0e:	5f 4a       	srge	r10
8000cd10:	f0 0c 18 00 	cp.b	r12,r8
8000cd14:	5f 1c       	srne	r12
8000cd16:	f9 ea 00 0a 	and	r10,r12,r10
8000cd1a:	f0 0a 18 00 	cp.b	r10,r8
8000cd1e:	fe 91 fe cd 	brne	8000cab8 <get_arg+0x28>
8000cd22:	30 08       	mov	r8,0
8000cd24:	40 4e       	lddsp	lr,sp[0x10]
8000cd26:	17 8a       	ld.ub	r10,r11[0x0]
8000cd28:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000cd2c:	f0 0a 18 00 	cp.b	r10,r8
8000cd30:	fc 09 17 10 	movne	r9,lr
8000cd34:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000cd38:	06 9e       	mov	lr,r3
8000cd3a:	c2 a8       	rjmp	8000cd8e <get_arg+0x2fe>
8000cd3c:	62 0a       	ld.w	r10,r1[0x0]
8000cd3e:	58 3a       	cp.w	r10,3
8000cd40:	c1 e0       	breq	8000cd7c <get_arg+0x2ec>
8000cd42:	e0 89 00 07 	brgt	8000cd50 <get_arg+0x2c0>
8000cd46:	58 1a       	cp.w	r10,1
8000cd48:	c1 a0       	breq	8000cd7c <get_arg+0x2ec>
8000cd4a:	58 2a       	cp.w	r10,2
8000cd4c:	c1 81       	brne	8000cd7c <get_arg+0x2ec>
8000cd4e:	c0 58       	rjmp	8000cd58 <get_arg+0x2c8>
8000cd50:	58 5a       	cp.w	r10,5
8000cd52:	c0 c0       	breq	8000cd6a <get_arg+0x2da>
8000cd54:	c0 b5       	brlt	8000cd6a <get_arg+0x2da>
8000cd56:	c1 38       	rjmp	8000cd7c <get_arg+0x2ec>
8000cd58:	6c 0a       	ld.w	r10,r6[0x0]
8000cd5a:	f4 cc ff f8 	sub	r12,r10,-8
8000cd5e:	8d 0c       	st.w	r6[0x0],r12
8000cd60:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cd64:	f0 e3 00 00 	st.d	r8[0],r2
8000cd68:	c1 08       	rjmp	8000cd88 <get_arg+0x2f8>
8000cd6a:	6c 0a       	ld.w	r10,r6[0x0]
8000cd6c:	f4 cc ff f8 	sub	r12,r10,-8
8000cd70:	8d 0c       	st.w	r6[0x0],r12
8000cd72:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cd76:	f0 e3 00 00 	st.d	r8[0],r2
8000cd7a:	c0 78       	rjmp	8000cd88 <get_arg+0x2f8>
8000cd7c:	6c 0a       	ld.w	r10,r6[0x0]
8000cd7e:	f4 cc ff fc 	sub	r12,r10,-4
8000cd82:	8d 0c       	st.w	r6[0x0],r12
8000cd84:	74 0a       	ld.w	r10,r10[0x0]
8000cd86:	91 0a       	st.w	r8[0x0],r10
8000cd88:	2f f5       	sub	r5,-1
8000cd8a:	2f 88       	sub	r8,-8
8000cd8c:	2f c1       	sub	r1,-4
8000cd8e:	12 35       	cp.w	r5,r9
8000cd90:	fe 9a ff d6 	brle	8000cd3c <get_arg+0x2ac>
8000cd94:	1c 93       	mov	r3,lr
8000cd96:	40 52       	lddsp	r2,sp[0x14]
8000cd98:	40 6e       	lddsp	lr,sp[0x18]
8000cd9a:	85 05       	st.w	r2[0x0],r5
8000cd9c:	9d 0b       	st.w	lr[0x0],r11
8000cd9e:	40 4b       	lddsp	r11,sp[0x10]
8000cda0:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000cda4:	2f 8d       	sub	sp,-32
8000cda6:	d8 32       	popm	r0-r7,pc

8000cda8 <__sprint_r>:
8000cda8:	d4 21       	pushm	r4-r7,lr
8000cdaa:	14 97       	mov	r7,r10
8000cdac:	74 28       	ld.w	r8,r10[0x8]
8000cdae:	58 08       	cp.w	r8,0
8000cdb0:	c0 41       	brne	8000cdb8 <__sprint_r+0x10>
8000cdb2:	95 18       	st.w	r10[0x4],r8
8000cdb4:	10 9c       	mov	r12,r8
8000cdb6:	d8 22       	popm	r4-r7,pc
8000cdb8:	e0 a0 18 c2 	rcall	8000ff3c <__sfvwrite_r>
8000cdbc:	30 08       	mov	r8,0
8000cdbe:	8f 18       	st.w	r7[0x4],r8
8000cdc0:	8f 28       	st.w	r7[0x8],r8
8000cdc2:	d8 22       	popm	r4-r7,pc

8000cdc4 <_vfprintf_r>:
8000cdc4:	d4 31       	pushm	r0-r7,lr
8000cdc6:	fa cd 06 bc 	sub	sp,sp,1724
8000cdca:	51 09       	stdsp	sp[0x40],r9
8000cdcc:	16 91       	mov	r1,r11
8000cdce:	14 97       	mov	r7,r10
8000cdd0:	18 95       	mov	r5,r12
8000cdd2:	e0 a0 1a 2d 	rcall	8001022c <_localeconv_r>
8000cdd6:	78 0c       	ld.w	r12,r12[0x0]
8000cdd8:	50 cc       	stdsp	sp[0x30],r12
8000cdda:	58 05       	cp.w	r5,0
8000cddc:	c0 70       	breq	8000cdea <_vfprintf_r+0x26>
8000cdde:	6a 68       	ld.w	r8,r5[0x18]
8000cde0:	58 08       	cp.w	r8,0
8000cde2:	c0 41       	brne	8000cdea <_vfprintf_r+0x26>
8000cde4:	0a 9c       	mov	r12,r5
8000cde6:	e0 a0 17 47 	rcall	8000fc74 <__sinit>
8000cdea:	4c f8       	lddpc	r8,8000cf24 <_vfprintf_r+0x160>
8000cdec:	10 31       	cp.w	r1,r8
8000cdee:	c0 31       	brne	8000cdf4 <_vfprintf_r+0x30>
8000cdf0:	6a 01       	ld.w	r1,r5[0x0]
8000cdf2:	c0 a8       	rjmp	8000ce06 <_vfprintf_r+0x42>
8000cdf4:	4c d8       	lddpc	r8,8000cf28 <_vfprintf_r+0x164>
8000cdf6:	10 31       	cp.w	r1,r8
8000cdf8:	c0 31       	brne	8000cdfe <_vfprintf_r+0x3a>
8000cdfa:	6a 11       	ld.w	r1,r5[0x4]
8000cdfc:	c0 58       	rjmp	8000ce06 <_vfprintf_r+0x42>
8000cdfe:	4c c8       	lddpc	r8,8000cf2c <_vfprintf_r+0x168>
8000ce00:	10 31       	cp.w	r1,r8
8000ce02:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000ce06:	82 68       	ld.sh	r8,r1[0xc]
8000ce08:	ed b8 00 03 	bld	r8,0x3
8000ce0c:	c0 41       	brne	8000ce14 <_vfprintf_r+0x50>
8000ce0e:	62 48       	ld.w	r8,r1[0x10]
8000ce10:	58 08       	cp.w	r8,0
8000ce12:	c0 71       	brne	8000ce20 <_vfprintf_r+0x5c>
8000ce14:	02 9b       	mov	r11,r1
8000ce16:	0a 9c       	mov	r12,r5
8000ce18:	e0 a0 0f 64 	rcall	8000ece0 <__swsetup_r>
8000ce1c:	e0 81 0f 5c 	brne	8000ecd4 <_vfprintf_r+0x1f10>
8000ce20:	82 68       	ld.sh	r8,r1[0xc]
8000ce22:	10 99       	mov	r9,r8
8000ce24:	e2 19 00 1a 	andl	r9,0x1a,COH
8000ce28:	58 a9       	cp.w	r9,10
8000ce2a:	c3 c1       	brne	8000cea2 <_vfprintf_r+0xde>
8000ce2c:	82 79       	ld.sh	r9,r1[0xe]
8000ce2e:	30 0a       	mov	r10,0
8000ce30:	f4 09 19 00 	cp.h	r9,r10
8000ce34:	c3 75       	brlt	8000cea2 <_vfprintf_r+0xde>
8000ce36:	a1 d8       	cbr	r8,0x1
8000ce38:	fb 58 05 d0 	st.h	sp[1488],r8
8000ce3c:	62 88       	ld.w	r8,r1[0x20]
8000ce3e:	fb 48 05 e4 	st.w	sp[1508],r8
8000ce42:	62 a8       	ld.w	r8,r1[0x28]
8000ce44:	fb 48 05 ec 	st.w	sp[1516],r8
8000ce48:	fa c8 ff bc 	sub	r8,sp,-68
8000ce4c:	fb 48 05 d4 	st.w	sp[1492],r8
8000ce50:	fb 48 05 c4 	st.w	sp[1476],r8
8000ce54:	e0 68 04 00 	mov	r8,1024
8000ce58:	fb 48 05 d8 	st.w	sp[1496],r8
8000ce5c:	fb 48 05 cc 	st.w	sp[1484],r8
8000ce60:	30 08       	mov	r8,0
8000ce62:	fb 59 05 d2 	st.h	sp[1490],r9
8000ce66:	0e 9a       	mov	r10,r7
8000ce68:	41 09       	lddsp	r9,sp[0x40]
8000ce6a:	fa c7 fa 3c 	sub	r7,sp,-1476
8000ce6e:	fb 48 05 dc 	st.w	sp[1500],r8
8000ce72:	0a 9c       	mov	r12,r5
8000ce74:	0e 9b       	mov	r11,r7
8000ce76:	ca 7f       	rcall	8000cdc4 <_vfprintf_r>
8000ce78:	50 bc       	stdsp	sp[0x2c],r12
8000ce7a:	c0 95       	brlt	8000ce8c <_vfprintf_r+0xc8>
8000ce7c:	0e 9b       	mov	r11,r7
8000ce7e:	0a 9c       	mov	r12,r5
8000ce80:	e0 a0 16 1e 	rcall	8000fabc <_fflush_r>
8000ce84:	40 be       	lddsp	lr,sp[0x2c]
8000ce86:	f9 be 01 ff 	movne	lr,-1
8000ce8a:	50 be       	stdsp	sp[0x2c],lr
8000ce8c:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000ce90:	ed b8 00 06 	bld	r8,0x6
8000ce94:	e0 81 0f 22 	brne	8000ecd8 <_vfprintf_r+0x1f14>
8000ce98:	82 68       	ld.sh	r8,r1[0xc]
8000ce9a:	a7 a8       	sbr	r8,0x6
8000ce9c:	a2 68       	st.h	r1[0xc],r8
8000ce9e:	e0 8f 0f 1d 	bral	8000ecd8 <_vfprintf_r+0x1f14>
8000cea2:	30 08       	mov	r8,0
8000cea4:	fb 48 06 b4 	st.w	sp[1716],r8
8000cea8:	fb 48 06 90 	st.w	sp[1680],r8
8000ceac:	fb 48 06 8c 	st.w	sp[1676],r8
8000ceb0:	fb 48 06 b0 	st.w	sp[1712],r8
8000ceb4:	30 08       	mov	r8,0
8000ceb6:	30 09       	mov	r9,0
8000ceb8:	50 a7       	stdsp	sp[0x28],r7
8000ceba:	50 78       	stdsp	sp[0x1c],r8
8000cebc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000cec0:	3f f8       	mov	r8,-1
8000cec2:	50 59       	stdsp	sp[0x14],r9
8000cec4:	fb 44 06 88 	st.w	sp[1672],r4
8000cec8:	fb 48 05 44 	st.w	sp[1348],r8
8000cecc:	12 9c       	mov	r12,r9
8000cece:	50 69       	stdsp	sp[0x18],r9
8000ced0:	50 d9       	stdsp	sp[0x34],r9
8000ced2:	50 e9       	stdsp	sp[0x38],r9
8000ced4:	50 b9       	stdsp	sp[0x2c],r9
8000ced6:	12 97       	mov	r7,r9
8000ced8:	40 a2       	lddsp	r2,sp[0x28]
8000ceda:	32 5a       	mov	r10,37
8000cedc:	30 08       	mov	r8,0
8000cede:	c0 28       	rjmp	8000cee2 <_vfprintf_r+0x11e>
8000cee0:	2f f2       	sub	r2,-1
8000cee2:	05 89       	ld.ub	r9,r2[0x0]
8000cee4:	f0 09 18 00 	cp.b	r9,r8
8000cee8:	5f 1b       	srne	r11
8000ceea:	f4 09 18 00 	cp.b	r9,r10
8000ceee:	5f 19       	srne	r9
8000cef0:	f3 eb 00 0b 	and	r11,r9,r11
8000cef4:	f0 0b 18 00 	cp.b	r11,r8
8000cef8:	cf 41       	brne	8000cee0 <_vfprintf_r+0x11c>
8000cefa:	40 ab       	lddsp	r11,sp[0x28]
8000cefc:	e4 0b 01 06 	sub	r6,r2,r11
8000cf00:	c2 40       	breq	8000cf48 <_vfprintf_r+0x184>
8000cf02:	fa f8 06 90 	ld.w	r8,sp[1680]
8000cf06:	0c 08       	add	r8,r6
8000cf08:	89 0b       	st.w	r4[0x0],r11
8000cf0a:	fb 48 06 90 	st.w	sp[1680],r8
8000cf0e:	89 16       	st.w	r4[0x4],r6
8000cf10:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000cf14:	2f f8       	sub	r8,-1
8000cf16:	fb 48 06 8c 	st.w	sp[1676],r8
8000cf1a:	58 78       	cp.w	r8,7
8000cf1c:	e0 89 00 0a 	brgt	8000cf30 <_vfprintf_r+0x16c>
8000cf20:	2f 84       	sub	r4,-8
8000cf22:	c1 08       	rjmp	8000cf42 <_vfprintf_r+0x17e>
8000cf24:	80 01       	ld.sh	r1,r0[0x0]
8000cf26:	3e b0       	mov	r0,-21
8000cf28:	80 01       	ld.sh	r1,r0[0x0]
8000cf2a:	3e d0       	mov	r0,-19
8000cf2c:	80 01       	ld.sh	r1,r0[0x0]
8000cf2e:	3e f0       	mov	r0,-17
8000cf30:	fa ca f9 78 	sub	r10,sp,-1672
8000cf34:	02 9b       	mov	r11,r1
8000cf36:	0a 9c       	mov	r12,r5
8000cf38:	c3 8f       	rcall	8000cda8 <__sprint_r>
8000cf3a:	e0 81 0e c9 	brne	8000eccc <_vfprintf_r+0x1f08>
8000cf3e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000cf42:	40 ba       	lddsp	r10,sp[0x2c]
8000cf44:	0c 0a       	add	r10,r6
8000cf46:	50 ba       	stdsp	sp[0x2c],r10
8000cf48:	05 89       	ld.ub	r9,r2[0x0]
8000cf4a:	30 08       	mov	r8,0
8000cf4c:	f0 09 18 00 	cp.b	r9,r8
8000cf50:	e0 80 0e ae 	breq	8000ecac <_vfprintf_r+0x1ee8>
8000cf54:	30 09       	mov	r9,0
8000cf56:	fb 68 06 bb 	st.b	sp[1723],r8
8000cf5a:	0e 96       	mov	r6,r7
8000cf5c:	e4 c8 ff ff 	sub	r8,r2,-1
8000cf60:	3f fe       	mov	lr,-1
8000cf62:	50 94       	stdsp	sp[0x24],r4
8000cf64:	50 41       	stdsp	sp[0x10],r1
8000cf66:	0e 94       	mov	r4,r7
8000cf68:	04 91       	mov	r1,r2
8000cf6a:	50 89       	stdsp	sp[0x20],r9
8000cf6c:	50 a8       	stdsp	sp[0x28],r8
8000cf6e:	50 2e       	stdsp	sp[0x8],lr
8000cf70:	50 39       	stdsp	sp[0xc],r9
8000cf72:	12 93       	mov	r3,r9
8000cf74:	12 90       	mov	r0,r9
8000cf76:	10 97       	mov	r7,r8
8000cf78:	0a 92       	mov	r2,r5
8000cf7a:	c0 78       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000cf7c:	3f fc       	mov	r12,-1
8000cf7e:	0a 97       	mov	r7,r5
8000cf80:	50 2c       	stdsp	sp[0x8],r12
8000cf82:	c0 38       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000cf84:	30 0b       	mov	r11,0
8000cf86:	50 3b       	stdsp	sp[0xc],r11
8000cf88:	0f 38       	ld.ub	r8,r7++
8000cf8a:	c0 28       	rjmp	8000cf8e <_vfprintf_r+0x1ca>
8000cf8c:	12 90       	mov	r0,r9
8000cf8e:	f0 c9 00 20 	sub	r9,r8,32
8000cf92:	e0 49 00 58 	cp.w	r9,88
8000cf96:	e0 8b 0a 33 	brhi	8000e3fc <_vfprintf_r+0x1638>
8000cf9a:	4d 9a       	lddpc	r10,8000d0fc <_vfprintf_r+0x338>
8000cf9c:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000cfa0:	50 a7       	stdsp	sp[0x28],r7
8000cfa2:	50 80       	stdsp	sp[0x20],r0
8000cfa4:	0c 97       	mov	r7,r6
8000cfa6:	04 95       	mov	r5,r2
8000cfa8:	08 96       	mov	r6,r4
8000cfaa:	02 92       	mov	r2,r1
8000cfac:	4d 59       	lddpc	r9,8000d100 <_vfprintf_r+0x33c>
8000cfae:	40 94       	lddsp	r4,sp[0x24]
8000cfb0:	10 90       	mov	r0,r8
8000cfb2:	40 41       	lddsp	r1,sp[0x10]
8000cfb4:	50 d9       	stdsp	sp[0x34],r9
8000cfb6:	e0 8f 08 95 	bral	8000e0e0 <_vfprintf_r+0x131c>
8000cfba:	30 08       	mov	r8,0
8000cfbc:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000cfc0:	f0 09 18 00 	cp.b	r9,r8
8000cfc4:	ce 21       	brne	8000cf88 <_vfprintf_r+0x1c4>
8000cfc6:	32 08       	mov	r8,32
8000cfc8:	c6 e8       	rjmp	8000d0a4 <_vfprintf_r+0x2e0>
8000cfca:	a1 a3       	sbr	r3,0x0
8000cfcc:	cd eb       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000cfce:	0f 89       	ld.ub	r9,r7[0x0]
8000cfd0:	f2 c8 00 30 	sub	r8,r9,48
8000cfd4:	58 98       	cp.w	r8,9
8000cfd6:	e0 8b 00 1d 	brhi	8000d010 <_vfprintf_r+0x24c>
8000cfda:	ee c8 ff ff 	sub	r8,r7,-1
8000cfde:	30 0b       	mov	r11,0
8000cfe0:	23 09       	sub	r9,48
8000cfe2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000cfe6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000cfea:	11 39       	ld.ub	r9,r8++
8000cfec:	f2 ca 00 30 	sub	r10,r9,48
8000cff0:	58 9a       	cp.w	r10,9
8000cff2:	fe 98 ff f7 	brls	8000cfe0 <_vfprintf_r+0x21c>
8000cff6:	e0 49 00 24 	cp.w	r9,36
8000cffa:	cc 51       	brne	8000cf84 <_vfprintf_r+0x1c0>
8000cffc:	e0 4b 00 20 	cp.w	r11,32
8000d000:	e0 89 0e 65 	brgt	8000ecca <_vfprintf_r+0x1f06>
8000d004:	20 1b       	sub	r11,1
8000d006:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000d00a:	12 3b       	cp.w	r11,r9
8000d00c:	c0 95       	brlt	8000d01e <_vfprintf_r+0x25a>
8000d00e:	c1 08       	rjmp	8000d02e <_vfprintf_r+0x26a>
8000d010:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000d014:	ec ca ff ff 	sub	r10,r6,-1
8000d018:	12 36       	cp.w	r6,r9
8000d01a:	c1 f5       	brlt	8000d058 <_vfprintf_r+0x294>
8000d01c:	c2 68       	rjmp	8000d068 <_vfprintf_r+0x2a4>
8000d01e:	fa ce f9 44 	sub	lr,sp,-1724
8000d022:	10 97       	mov	r7,r8
8000d024:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000d028:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000d02c:	c3 58       	rjmp	8000d096 <_vfprintf_r+0x2d2>
8000d02e:	10 97       	mov	r7,r8
8000d030:	fa c8 f9 50 	sub	r8,sp,-1712
8000d034:	1a d8       	st.w	--sp,r8
8000d036:	fa c8 fa b8 	sub	r8,sp,-1352
8000d03a:	1a d8       	st.w	--sp,r8
8000d03c:	fa c8 fb b4 	sub	r8,sp,-1100
8000d040:	02 9a       	mov	r10,r1
8000d042:	1a d8       	st.w	--sp,r8
8000d044:	04 9c       	mov	r12,r2
8000d046:	fa c8 f9 40 	sub	r8,sp,-1728
8000d04a:	fa c9 ff b4 	sub	r9,sp,-76
8000d04e:	fe b0 fd 21 	rcall	8000ca90 <get_arg>
8000d052:	2f dd       	sub	sp,-12
8000d054:	78 00       	ld.w	r0,r12[0x0]
8000d056:	c2 08       	rjmp	8000d096 <_vfprintf_r+0x2d2>
8000d058:	fa cc f9 44 	sub	r12,sp,-1724
8000d05c:	14 96       	mov	r6,r10
8000d05e:	f8 04 00 38 	add	r8,r12,r4<<0x3
8000d062:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000d066:	c1 88       	rjmp	8000d096 <_vfprintf_r+0x2d2>
8000d068:	41 08       	lddsp	r8,sp[0x40]
8000d06a:	59 f9       	cp.w	r9,31
8000d06c:	e0 89 00 11 	brgt	8000d08e <_vfprintf_r+0x2ca>
8000d070:	f0 cb ff fc 	sub	r11,r8,-4
8000d074:	51 0b       	stdsp	sp[0x40],r11
8000d076:	70 00       	ld.w	r0,r8[0x0]
8000d078:	fa cb f9 44 	sub	r11,sp,-1724
8000d07c:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000d080:	f1 40 fd 88 	st.w	r8[-632],r0
8000d084:	2f f9       	sub	r9,-1
8000d086:	14 96       	mov	r6,r10
8000d088:	fb 49 06 b4 	st.w	sp[1716],r9
8000d08c:	c0 58       	rjmp	8000d096 <_vfprintf_r+0x2d2>
8000d08e:	70 00       	ld.w	r0,r8[0x0]
8000d090:	14 96       	mov	r6,r10
8000d092:	2f c8       	sub	r8,-4
8000d094:	51 08       	stdsp	sp[0x40],r8
8000d096:	58 00       	cp.w	r0,0
8000d098:	fe 94 ff 78 	brge	8000cf88 <_vfprintf_r+0x1c4>
8000d09c:	5c 30       	neg	r0
8000d09e:	a3 a3       	sbr	r3,0x2
8000d0a0:	c7 4b       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d0a2:	32 b8       	mov	r8,43
8000d0a4:	fb 68 06 bb 	st.b	sp[1723],r8
8000d0a8:	c7 0b       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d0aa:	0f 38       	ld.ub	r8,r7++
8000d0ac:	e0 48 00 2a 	cp.w	r8,42
8000d0b0:	c0 30       	breq	8000d0b6 <_vfprintf_r+0x2f2>
8000d0b2:	30 09       	mov	r9,0
8000d0b4:	c7 d8       	rjmp	8000d1ae <_vfprintf_r+0x3ea>
8000d0b6:	0f 88       	ld.ub	r8,r7[0x0]
8000d0b8:	f0 c9 00 30 	sub	r9,r8,48
8000d0bc:	58 99       	cp.w	r9,9
8000d0be:	e0 8b 00 23 	brhi	8000d104 <_vfprintf_r+0x340>
8000d0c2:	ee c5 ff ff 	sub	r5,r7,-1
8000d0c6:	30 0b       	mov	r11,0
8000d0c8:	23 08       	sub	r8,48
8000d0ca:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000d0ce:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000d0d2:	0b 38       	ld.ub	r8,r5++
8000d0d4:	f0 c9 00 30 	sub	r9,r8,48
8000d0d8:	58 99       	cp.w	r9,9
8000d0da:	fe 98 ff f7 	brls	8000d0c8 <_vfprintf_r+0x304>
8000d0de:	e0 48 00 24 	cp.w	r8,36
8000d0e2:	fe 91 ff 51 	brne	8000cf84 <_vfprintf_r+0x1c0>
8000d0e6:	e0 4b 00 20 	cp.w	r11,32
8000d0ea:	e0 89 0d f0 	brgt	8000ecca <_vfprintf_r+0x1f06>
8000d0ee:	20 1b       	sub	r11,1
8000d0f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d0f4:	10 3b       	cp.w	r11,r8
8000d0f6:	c0 e5       	brlt	8000d112 <_vfprintf_r+0x34e>
8000d0f8:	c1 58       	rjmp	8000d122 <_vfprintf_r+0x35e>
8000d0fa:	d7 03       	nop
8000d0fc:	80 01       	ld.sh	r1,r0[0x0]
8000d0fe:	3b 08       	mov	r8,-80
8000d100:	80 01       	ld.sh	r1,r0[0x0]
8000d102:	3d 44       	mov	r4,-44
8000d104:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000d108:	ec c9 ff ff 	sub	r9,r6,-1
8000d10c:	14 36       	cp.w	r6,r10
8000d10e:	c1 f5       	brlt	8000d14c <_vfprintf_r+0x388>
8000d110:	c2 88       	rjmp	8000d160 <_vfprintf_r+0x39c>
8000d112:	fa ca f9 44 	sub	r10,sp,-1724
8000d116:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000d11a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000d11e:	50 2b       	stdsp	sp[0x8],r11
8000d120:	c3 c8       	rjmp	8000d198 <_vfprintf_r+0x3d4>
8000d122:	fa c8 f9 50 	sub	r8,sp,-1712
8000d126:	1a d8       	st.w	--sp,r8
8000d128:	fa c8 fa b8 	sub	r8,sp,-1352
8000d12c:	1a d8       	st.w	--sp,r8
8000d12e:	fa c8 fb b4 	sub	r8,sp,-1100
8000d132:	02 9a       	mov	r10,r1
8000d134:	1a d8       	st.w	--sp,r8
8000d136:	04 9c       	mov	r12,r2
8000d138:	fa c8 f9 40 	sub	r8,sp,-1728
8000d13c:	fa c9 ff b4 	sub	r9,sp,-76
8000d140:	fe b0 fc a8 	rcall	8000ca90 <get_arg>
8000d144:	2f dd       	sub	sp,-12
8000d146:	78 0c       	ld.w	r12,r12[0x0]
8000d148:	50 2c       	stdsp	sp[0x8],r12
8000d14a:	c2 78       	rjmp	8000d198 <_vfprintf_r+0x3d4>
8000d14c:	12 96       	mov	r6,r9
8000d14e:	0e 95       	mov	r5,r7
8000d150:	fa c9 f9 44 	sub	r9,sp,-1724
8000d154:	f2 04 00 38 	add	r8,r9,r4<<0x3
8000d158:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000d15c:	50 28       	stdsp	sp[0x8],r8
8000d15e:	c1 d8       	rjmp	8000d198 <_vfprintf_r+0x3d4>
8000d160:	41 08       	lddsp	r8,sp[0x40]
8000d162:	59 fa       	cp.w	r10,31
8000d164:	e0 89 00 14 	brgt	8000d18c <_vfprintf_r+0x3c8>
8000d168:	f0 cb ff fc 	sub	r11,r8,-4
8000d16c:	70 08       	ld.w	r8,r8[0x0]
8000d16e:	51 0b       	stdsp	sp[0x40],r11
8000d170:	50 28       	stdsp	sp[0x8],r8
8000d172:	fa c6 f9 44 	sub	r6,sp,-1724
8000d176:	40 2e       	lddsp	lr,sp[0x8]
8000d178:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000d17c:	f1 4e fd 88 	st.w	r8[-632],lr
8000d180:	2f fa       	sub	r10,-1
8000d182:	0e 95       	mov	r5,r7
8000d184:	fb 4a 06 b4 	st.w	sp[1716],r10
8000d188:	12 96       	mov	r6,r9
8000d18a:	c0 78       	rjmp	8000d198 <_vfprintf_r+0x3d4>
8000d18c:	70 0c       	ld.w	r12,r8[0x0]
8000d18e:	0e 95       	mov	r5,r7
8000d190:	2f c8       	sub	r8,-4
8000d192:	50 2c       	stdsp	sp[0x8],r12
8000d194:	12 96       	mov	r6,r9
8000d196:	51 08       	stdsp	sp[0x40],r8
8000d198:	40 2b       	lddsp	r11,sp[0x8]
8000d19a:	58 0b       	cp.w	r11,0
8000d19c:	fe 95 fe f0 	brlt	8000cf7c <_vfprintf_r+0x1b8>
8000d1a0:	0a 97       	mov	r7,r5
8000d1a2:	cf 3a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d1a4:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000d1a8:	0f 38       	ld.ub	r8,r7++
8000d1aa:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000d1ae:	f0 ca 00 30 	sub	r10,r8,48
8000d1b2:	58 9a       	cp.w	r10,9
8000d1b4:	fe 98 ff f8 	brls	8000d1a4 <_vfprintf_r+0x3e0>
8000d1b8:	3f fa       	mov	r10,-1
8000d1ba:	f2 0a 0c 49 	max	r9,r9,r10
8000d1be:	50 29       	stdsp	sp[0x8],r9
8000d1c0:	ce 7a       	rjmp	8000cf8e <_vfprintf_r+0x1ca>
8000d1c2:	a7 b3       	sbr	r3,0x7
8000d1c4:	ce 2a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d1c6:	30 09       	mov	r9,0
8000d1c8:	23 08       	sub	r8,48
8000d1ca:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000d1ce:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000d1d2:	0f 38       	ld.ub	r8,r7++
8000d1d4:	f0 ca 00 30 	sub	r10,r8,48
8000d1d8:	58 9a       	cp.w	r10,9
8000d1da:	fe 98 ff f7 	brls	8000d1c8 <_vfprintf_r+0x404>
8000d1de:	e0 48 00 24 	cp.w	r8,36
8000d1e2:	fe 91 fe d5 	brne	8000cf8c <_vfprintf_r+0x1c8>
8000d1e6:	e0 49 00 20 	cp.w	r9,32
8000d1ea:	e0 89 0d 70 	brgt	8000ecca <_vfprintf_r+0x1f06>
8000d1ee:	f2 c4 00 01 	sub	r4,r9,1
8000d1f2:	30 19       	mov	r9,1
8000d1f4:	50 39       	stdsp	sp[0xc],r9
8000d1f6:	cc 9a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d1f8:	a3 b3       	sbr	r3,0x3
8000d1fa:	cc 7a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d1fc:	a7 a3       	sbr	r3,0x6
8000d1fe:	cc 5a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d200:	0f 88       	ld.ub	r8,r7[0x0]
8000d202:	36 ce       	mov	lr,108
8000d204:	fc 08 18 00 	cp.b	r8,lr
8000d208:	c0 41       	brne	8000d210 <_vfprintf_r+0x44c>
8000d20a:	2f f7       	sub	r7,-1
8000d20c:	a5 b3       	sbr	r3,0x5
8000d20e:	cb da       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d210:	a5 a3       	sbr	r3,0x4
8000d212:	cb ba       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d214:	a5 b3       	sbr	r3,0x5
8000d216:	cb 9a       	rjmp	8000cf88 <_vfprintf_r+0x1c4>
8000d218:	50 a7       	stdsp	sp[0x28],r7
8000d21a:	50 80       	stdsp	sp[0x20],r0
8000d21c:	0c 97       	mov	r7,r6
8000d21e:	10 90       	mov	r0,r8
8000d220:	08 96       	mov	r6,r4
8000d222:	04 95       	mov	r5,r2
8000d224:	40 94       	lddsp	r4,sp[0x24]
8000d226:	02 92       	mov	r2,r1
8000d228:	0e 99       	mov	r9,r7
8000d22a:	40 41       	lddsp	r1,sp[0x10]
8000d22c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d230:	40 3c       	lddsp	r12,sp[0xc]
8000d232:	58 0c       	cp.w	r12,0
8000d234:	c1 d0       	breq	8000d26e <_vfprintf_r+0x4aa>
8000d236:	10 36       	cp.w	r6,r8
8000d238:	c0 64       	brge	8000d244 <_vfprintf_r+0x480>
8000d23a:	fa cb f9 44 	sub	r11,sp,-1724
8000d23e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d242:	c1 d8       	rjmp	8000d27c <_vfprintf_r+0x4b8>
8000d244:	fa c8 f9 50 	sub	r8,sp,-1712
8000d248:	1a d8       	st.w	--sp,r8
8000d24a:	fa c8 fa b8 	sub	r8,sp,-1352
8000d24e:	1a d8       	st.w	--sp,r8
8000d250:	fa c8 fb b4 	sub	r8,sp,-1100
8000d254:	1a d8       	st.w	--sp,r8
8000d256:	fa c8 f9 40 	sub	r8,sp,-1728
8000d25a:	fa c9 ff b4 	sub	r9,sp,-76
8000d25e:	04 9a       	mov	r10,r2
8000d260:	0c 9b       	mov	r11,r6
8000d262:	0a 9c       	mov	r12,r5
8000d264:	fe b0 fc 16 	rcall	8000ca90 <get_arg>
8000d268:	2f dd       	sub	sp,-12
8000d26a:	19 b8       	ld.ub	r8,r12[0x3]
8000d26c:	c2 28       	rjmp	8000d2b0 <_vfprintf_r+0x4ec>
8000d26e:	2f f7       	sub	r7,-1
8000d270:	10 39       	cp.w	r9,r8
8000d272:	c0 84       	brge	8000d282 <_vfprintf_r+0x4be>
8000d274:	fa ca f9 44 	sub	r10,sp,-1724
8000d278:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d27c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000d280:	c1 88       	rjmp	8000d2b0 <_vfprintf_r+0x4ec>
8000d282:	41 09       	lddsp	r9,sp[0x40]
8000d284:	59 f8       	cp.w	r8,31
8000d286:	e0 89 00 12 	brgt	8000d2aa <_vfprintf_r+0x4e6>
8000d28a:	f2 ca ff fc 	sub	r10,r9,-4
8000d28e:	51 0a       	stdsp	sp[0x40],r10
8000d290:	72 09       	ld.w	r9,r9[0x0]
8000d292:	fa c6 f9 44 	sub	r6,sp,-1724
8000d296:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000d29a:	2f f8       	sub	r8,-1
8000d29c:	f5 49 fd 88 	st.w	r10[-632],r9
8000d2a0:	fb 48 06 b4 	st.w	sp[1716],r8
8000d2a4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000d2a8:	c0 48       	rjmp	8000d2b0 <_vfprintf_r+0x4ec>
8000d2aa:	13 b8       	ld.ub	r8,r9[0x3]
8000d2ac:	2f c9       	sub	r9,-4
8000d2ae:	51 09       	stdsp	sp[0x40],r9
8000d2b0:	fb 68 06 60 	st.b	sp[1632],r8
8000d2b4:	30 0e       	mov	lr,0
8000d2b6:	30 08       	mov	r8,0
8000d2b8:	30 12       	mov	r2,1
8000d2ba:	fb 68 06 bb 	st.b	sp[1723],r8
8000d2be:	50 2e       	stdsp	sp[0x8],lr
8000d2c0:	e0 8f 08 b0 	bral	8000e420 <_vfprintf_r+0x165c>
8000d2c4:	50 a7       	stdsp	sp[0x28],r7
8000d2c6:	50 80       	stdsp	sp[0x20],r0
8000d2c8:	0c 97       	mov	r7,r6
8000d2ca:	04 95       	mov	r5,r2
8000d2cc:	08 96       	mov	r6,r4
8000d2ce:	02 92       	mov	r2,r1
8000d2d0:	40 94       	lddsp	r4,sp[0x24]
8000d2d2:	10 90       	mov	r0,r8
8000d2d4:	40 41       	lddsp	r1,sp[0x10]
8000d2d6:	a5 a3       	sbr	r3,0x4
8000d2d8:	c0 a8       	rjmp	8000d2ec <_vfprintf_r+0x528>
8000d2da:	50 a7       	stdsp	sp[0x28],r7
8000d2dc:	50 80       	stdsp	sp[0x20],r0
8000d2de:	0c 97       	mov	r7,r6
8000d2e0:	04 95       	mov	r5,r2
8000d2e2:	08 96       	mov	r6,r4
8000d2e4:	02 92       	mov	r2,r1
8000d2e6:	40 94       	lddsp	r4,sp[0x24]
8000d2e8:	10 90       	mov	r0,r8
8000d2ea:	40 41       	lddsp	r1,sp[0x10]
8000d2ec:	ed b3 00 05 	bld	r3,0x5
8000d2f0:	c5 11       	brne	8000d392 <_vfprintf_r+0x5ce>
8000d2f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d2f6:	40 3c       	lddsp	r12,sp[0xc]
8000d2f8:	58 0c       	cp.w	r12,0
8000d2fa:	c1 e0       	breq	8000d336 <_vfprintf_r+0x572>
8000d2fc:	10 36       	cp.w	r6,r8
8000d2fe:	c0 64       	brge	8000d30a <_vfprintf_r+0x546>
8000d300:	fa cb f9 44 	sub	r11,sp,-1724
8000d304:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d308:	c2 08       	rjmp	8000d348 <_vfprintf_r+0x584>
8000d30a:	fa c8 f9 50 	sub	r8,sp,-1712
8000d30e:	1a d8       	st.w	--sp,r8
8000d310:	fa c8 fa b8 	sub	r8,sp,-1352
8000d314:	0c 9b       	mov	r11,r6
8000d316:	1a d8       	st.w	--sp,r8
8000d318:	fa c8 fb b4 	sub	r8,sp,-1100
8000d31c:	1a d8       	st.w	--sp,r8
8000d31e:	fa c9 ff b4 	sub	r9,sp,-76
8000d322:	fa c8 f9 40 	sub	r8,sp,-1728
8000d326:	04 9a       	mov	r10,r2
8000d328:	0a 9c       	mov	r12,r5
8000d32a:	fe b0 fb b3 	rcall	8000ca90 <get_arg>
8000d32e:	2f dd       	sub	sp,-12
8000d330:	78 1b       	ld.w	r11,r12[0x4]
8000d332:	78 09       	ld.w	r9,r12[0x0]
8000d334:	c2 b8       	rjmp	8000d38a <_vfprintf_r+0x5c6>
8000d336:	ee ca ff ff 	sub	r10,r7,-1
8000d33a:	10 37       	cp.w	r7,r8
8000d33c:	c0 b4       	brge	8000d352 <_vfprintf_r+0x58e>
8000d33e:	fa c9 f9 44 	sub	r9,sp,-1724
8000d342:	14 97       	mov	r7,r10
8000d344:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d348:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d34c:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000d350:	c1 d8       	rjmp	8000d38a <_vfprintf_r+0x5c6>
8000d352:	41 09       	lddsp	r9,sp[0x40]
8000d354:	59 f8       	cp.w	r8,31
8000d356:	e0 89 00 14 	brgt	8000d37e <_vfprintf_r+0x5ba>
8000d35a:	f2 cb ff f8 	sub	r11,r9,-8
8000d35e:	51 0b       	stdsp	sp[0x40],r11
8000d360:	fa c6 f9 44 	sub	r6,sp,-1724
8000d364:	72 1b       	ld.w	r11,r9[0x4]
8000d366:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000d36a:	72 09       	ld.w	r9,r9[0x0]
8000d36c:	f9 4b fd 8c 	st.w	r12[-628],r11
8000d370:	f9 49 fd 88 	st.w	r12[-632],r9
8000d374:	2f f8       	sub	r8,-1
8000d376:	14 97       	mov	r7,r10
8000d378:	fb 48 06 b4 	st.w	sp[1716],r8
8000d37c:	c0 78       	rjmp	8000d38a <_vfprintf_r+0x5c6>
8000d37e:	f2 c8 ff f8 	sub	r8,r9,-8
8000d382:	72 1b       	ld.w	r11,r9[0x4]
8000d384:	14 97       	mov	r7,r10
8000d386:	51 08       	stdsp	sp[0x40],r8
8000d388:	72 09       	ld.w	r9,r9[0x0]
8000d38a:	16 98       	mov	r8,r11
8000d38c:	fa e9 00 00 	st.d	sp[0],r8
8000d390:	ca e8       	rjmp	8000d4ec <_vfprintf_r+0x728>
8000d392:	ed b3 00 04 	bld	r3,0x4
8000d396:	c1 71       	brne	8000d3c4 <_vfprintf_r+0x600>
8000d398:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d39c:	40 3e       	lddsp	lr,sp[0xc]
8000d39e:	58 0e       	cp.w	lr,0
8000d3a0:	c0 80       	breq	8000d3b0 <_vfprintf_r+0x5ec>
8000d3a2:	10 36       	cp.w	r6,r8
8000d3a4:	c6 94       	brge	8000d476 <_vfprintf_r+0x6b2>
8000d3a6:	fa cc f9 44 	sub	r12,sp,-1724
8000d3aa:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d3ae:	c8 28       	rjmp	8000d4b2 <_vfprintf_r+0x6ee>
8000d3b0:	ee ca ff ff 	sub	r10,r7,-1
8000d3b4:	10 37       	cp.w	r7,r8
8000d3b6:	e0 84 00 81 	brge	8000d4b8 <_vfprintf_r+0x6f4>
8000d3ba:	fa cb f9 44 	sub	r11,sp,-1724
8000d3be:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d3c2:	c7 78       	rjmp	8000d4b0 <_vfprintf_r+0x6ec>
8000d3c4:	ed b3 00 06 	bld	r3,0x6
8000d3c8:	c4 b1       	brne	8000d45e <_vfprintf_r+0x69a>
8000d3ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d3ce:	40 3c       	lddsp	r12,sp[0xc]
8000d3d0:	58 0c       	cp.w	r12,0
8000d3d2:	c1 d0       	breq	8000d40c <_vfprintf_r+0x648>
8000d3d4:	10 36       	cp.w	r6,r8
8000d3d6:	c0 64       	brge	8000d3e2 <_vfprintf_r+0x61e>
8000d3d8:	fa cb f9 44 	sub	r11,sp,-1724
8000d3dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d3e0:	c1 f8       	rjmp	8000d41e <_vfprintf_r+0x65a>
8000d3e2:	fa c8 f9 50 	sub	r8,sp,-1712
8000d3e6:	1a d8       	st.w	--sp,r8
8000d3e8:	fa c8 fa b8 	sub	r8,sp,-1352
8000d3ec:	1a d8       	st.w	--sp,r8
8000d3ee:	fa c8 fb b4 	sub	r8,sp,-1100
8000d3f2:	1a d8       	st.w	--sp,r8
8000d3f4:	fa c8 f9 40 	sub	r8,sp,-1728
8000d3f8:	fa c9 ff b4 	sub	r9,sp,-76
8000d3fc:	04 9a       	mov	r10,r2
8000d3fe:	0c 9b       	mov	r11,r6
8000d400:	0a 9c       	mov	r12,r5
8000d402:	fe b0 fb 47 	rcall	8000ca90 <get_arg>
8000d406:	2f dd       	sub	sp,-12
8000d408:	98 18       	ld.sh	r8,r12[0x2]
8000d40a:	c2 68       	rjmp	8000d456 <_vfprintf_r+0x692>
8000d40c:	ee ca ff ff 	sub	r10,r7,-1
8000d410:	10 37       	cp.w	r7,r8
8000d412:	c0 94       	brge	8000d424 <_vfprintf_r+0x660>
8000d414:	fa c9 f9 44 	sub	r9,sp,-1724
8000d418:	14 97       	mov	r7,r10
8000d41a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d41e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000d422:	c1 a8       	rjmp	8000d456 <_vfprintf_r+0x692>
8000d424:	41 09       	lddsp	r9,sp[0x40]
8000d426:	59 f8       	cp.w	r8,31
8000d428:	e0 89 00 13 	brgt	8000d44e <_vfprintf_r+0x68a>
8000d42c:	f2 cb ff fc 	sub	r11,r9,-4
8000d430:	51 0b       	stdsp	sp[0x40],r11
8000d432:	72 09       	ld.w	r9,r9[0x0]
8000d434:	fa c6 f9 44 	sub	r6,sp,-1724
8000d438:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000d43c:	2f f8       	sub	r8,-1
8000d43e:	f7 49 fd 88 	st.w	r11[-632],r9
8000d442:	fb 48 06 b4 	st.w	sp[1716],r8
8000d446:	14 97       	mov	r7,r10
8000d448:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000d44c:	c0 58       	rjmp	8000d456 <_vfprintf_r+0x692>
8000d44e:	92 18       	ld.sh	r8,r9[0x2]
8000d450:	14 97       	mov	r7,r10
8000d452:	2f c9       	sub	r9,-4
8000d454:	51 09       	stdsp	sp[0x40],r9
8000d456:	50 18       	stdsp	sp[0x4],r8
8000d458:	bf 58       	asr	r8,0x1f
8000d45a:	50 08       	stdsp	sp[0x0],r8
8000d45c:	c4 88       	rjmp	8000d4ec <_vfprintf_r+0x728>
8000d45e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d462:	40 3c       	lddsp	r12,sp[0xc]
8000d464:	58 0c       	cp.w	r12,0
8000d466:	c1 d0       	breq	8000d4a0 <_vfprintf_r+0x6dc>
8000d468:	10 36       	cp.w	r6,r8
8000d46a:	c0 64       	brge	8000d476 <_vfprintf_r+0x6b2>
8000d46c:	fa cb f9 44 	sub	r11,sp,-1724
8000d470:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d474:	c1 f8       	rjmp	8000d4b2 <_vfprintf_r+0x6ee>
8000d476:	fa c8 f9 50 	sub	r8,sp,-1712
8000d47a:	1a d8       	st.w	--sp,r8
8000d47c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d480:	0c 9b       	mov	r11,r6
8000d482:	1a d8       	st.w	--sp,r8
8000d484:	fa c8 fb b4 	sub	r8,sp,-1100
8000d488:	04 9a       	mov	r10,r2
8000d48a:	1a d8       	st.w	--sp,r8
8000d48c:	0a 9c       	mov	r12,r5
8000d48e:	fa c8 f9 40 	sub	r8,sp,-1728
8000d492:	fa c9 ff b4 	sub	r9,sp,-76
8000d496:	fe b0 fa fd 	rcall	8000ca90 <get_arg>
8000d49a:	2f dd       	sub	sp,-12
8000d49c:	78 0b       	ld.w	r11,r12[0x0]
8000d49e:	c2 48       	rjmp	8000d4e6 <_vfprintf_r+0x722>
8000d4a0:	ee ca ff ff 	sub	r10,r7,-1
8000d4a4:	10 37       	cp.w	r7,r8
8000d4a6:	c0 94       	brge	8000d4b8 <_vfprintf_r+0x6f4>
8000d4a8:	fa c9 f9 44 	sub	r9,sp,-1724
8000d4ac:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d4b0:	14 97       	mov	r7,r10
8000d4b2:	ec fb fd 88 	ld.w	r11,r6[-632]
8000d4b6:	c1 88       	rjmp	8000d4e6 <_vfprintf_r+0x722>
8000d4b8:	41 09       	lddsp	r9,sp[0x40]
8000d4ba:	59 f8       	cp.w	r8,31
8000d4bc:	e0 89 00 11 	brgt	8000d4de <_vfprintf_r+0x71a>
8000d4c0:	f2 cb ff fc 	sub	r11,r9,-4
8000d4c4:	51 0b       	stdsp	sp[0x40],r11
8000d4c6:	fa c6 f9 44 	sub	r6,sp,-1724
8000d4ca:	72 0b       	ld.w	r11,r9[0x0]
8000d4cc:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d4d0:	f3 4b fd 88 	st.w	r9[-632],r11
8000d4d4:	2f f8       	sub	r8,-1
8000d4d6:	14 97       	mov	r7,r10
8000d4d8:	fb 48 06 b4 	st.w	sp[1716],r8
8000d4dc:	c0 58       	rjmp	8000d4e6 <_vfprintf_r+0x722>
8000d4de:	72 0b       	ld.w	r11,r9[0x0]
8000d4e0:	14 97       	mov	r7,r10
8000d4e2:	2f c9       	sub	r9,-4
8000d4e4:	51 09       	stdsp	sp[0x40],r9
8000d4e6:	50 1b       	stdsp	sp[0x4],r11
8000d4e8:	bf 5b       	asr	r11,0x1f
8000d4ea:	50 0b       	stdsp	sp[0x0],r11
8000d4ec:	fa ea 00 00 	ld.d	r10,sp[0]
8000d4f0:	58 0a       	cp.w	r10,0
8000d4f2:	5c 2b       	cpc	r11
8000d4f4:	c0 e4       	brge	8000d510 <_vfprintf_r+0x74c>
8000d4f6:	30 08       	mov	r8,0
8000d4f8:	fa ea 00 00 	ld.d	r10,sp[0]
8000d4fc:	30 09       	mov	r9,0
8000d4fe:	f0 0a 01 0a 	sub	r10,r8,r10
8000d502:	f2 0b 01 4b 	sbc	r11,r9,r11
8000d506:	32 d8       	mov	r8,45
8000d508:	fa eb 00 00 	st.d	sp[0],r10
8000d50c:	fb 68 06 bb 	st.b	sp[1723],r8
8000d510:	30 18       	mov	r8,1
8000d512:	e0 8f 06 fd 	bral	8000e30c <_vfprintf_r+0x1548>
8000d516:	50 a7       	stdsp	sp[0x28],r7
8000d518:	50 80       	stdsp	sp[0x20],r0
8000d51a:	0c 97       	mov	r7,r6
8000d51c:	04 95       	mov	r5,r2
8000d51e:	08 96       	mov	r6,r4
8000d520:	02 92       	mov	r2,r1
8000d522:	40 94       	lddsp	r4,sp[0x24]
8000d524:	10 90       	mov	r0,r8
8000d526:	40 41       	lddsp	r1,sp[0x10]
8000d528:	0e 99       	mov	r9,r7
8000d52a:	ed b3 00 03 	bld	r3,0x3
8000d52e:	c4 11       	brne	8000d5b0 <_vfprintf_r+0x7ec>
8000d530:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d534:	40 3a       	lddsp	r10,sp[0xc]
8000d536:	58 0a       	cp.w	r10,0
8000d538:	c1 90       	breq	8000d56a <_vfprintf_r+0x7a6>
8000d53a:	10 36       	cp.w	r6,r8
8000d53c:	c6 45       	brlt	8000d604 <_vfprintf_r+0x840>
8000d53e:	fa c8 f9 50 	sub	r8,sp,-1712
8000d542:	1a d8       	st.w	--sp,r8
8000d544:	fa c8 fa b8 	sub	r8,sp,-1352
8000d548:	1a d8       	st.w	--sp,r8
8000d54a:	fa c8 fb b4 	sub	r8,sp,-1100
8000d54e:	0c 9b       	mov	r11,r6
8000d550:	1a d8       	st.w	--sp,r8
8000d552:	04 9a       	mov	r10,r2
8000d554:	fa c8 f9 40 	sub	r8,sp,-1728
8000d558:	fa c9 ff b4 	sub	r9,sp,-76
8000d55c:	0a 9c       	mov	r12,r5
8000d55e:	fe b0 fa 99 	rcall	8000ca90 <get_arg>
8000d562:	2f dd       	sub	sp,-12
8000d564:	78 16       	ld.w	r6,r12[0x4]
8000d566:	50 76       	stdsp	sp[0x1c],r6
8000d568:	c4 88       	rjmp	8000d5f8 <_vfprintf_r+0x834>
8000d56a:	2f f7       	sub	r7,-1
8000d56c:	10 39       	cp.w	r9,r8
8000d56e:	c0 c4       	brge	8000d586 <_vfprintf_r+0x7c2>
8000d570:	fa ce f9 44 	sub	lr,sp,-1724
8000d574:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000d578:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000d57c:	50 7c       	stdsp	sp[0x1c],r12
8000d57e:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000d582:	50 56       	stdsp	sp[0x14],r6
8000d584:	c6 68       	rjmp	8000d650 <_vfprintf_r+0x88c>
8000d586:	41 09       	lddsp	r9,sp[0x40]
8000d588:	59 f8       	cp.w	r8,31
8000d58a:	e0 89 00 10 	brgt	8000d5aa <_vfprintf_r+0x7e6>
8000d58e:	f2 ca ff f8 	sub	r10,r9,-8
8000d592:	72 1b       	ld.w	r11,r9[0x4]
8000d594:	51 0a       	stdsp	sp[0x40],r10
8000d596:	72 09       	ld.w	r9,r9[0x0]
8000d598:	fa ca f9 44 	sub	r10,sp,-1724
8000d59c:	50 7b       	stdsp	sp[0x1c],r11
8000d59e:	50 59       	stdsp	sp[0x14],r9
8000d5a0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000d5a4:	40 5b       	lddsp	r11,sp[0x14]
8000d5a6:	40 7a       	lddsp	r10,sp[0x1c]
8000d5a8:	c4 78       	rjmp	8000d636 <_vfprintf_r+0x872>
8000d5aa:	72 18       	ld.w	r8,r9[0x4]
8000d5ac:	50 78       	stdsp	sp[0x1c],r8
8000d5ae:	c4 c8       	rjmp	8000d646 <_vfprintf_r+0x882>
8000d5b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d5b4:	40 3e       	lddsp	lr,sp[0xc]
8000d5b6:	58 0e       	cp.w	lr,0
8000d5b8:	c2 30       	breq	8000d5fe <_vfprintf_r+0x83a>
8000d5ba:	10 36       	cp.w	r6,r8
8000d5bc:	c0 94       	brge	8000d5ce <_vfprintf_r+0x80a>
8000d5be:	fa cc f9 44 	sub	r12,sp,-1724
8000d5c2:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d5c6:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d5ca:	50 7b       	stdsp	sp[0x1c],r11
8000d5cc:	cd 9b       	rjmp	8000d57e <_vfprintf_r+0x7ba>
8000d5ce:	fa c8 f9 50 	sub	r8,sp,-1712
8000d5d2:	1a d8       	st.w	--sp,r8
8000d5d4:	fa c8 fa b8 	sub	r8,sp,-1352
8000d5d8:	04 9a       	mov	r10,r2
8000d5da:	1a d8       	st.w	--sp,r8
8000d5dc:	fa c8 fb b4 	sub	r8,sp,-1100
8000d5e0:	0c 9b       	mov	r11,r6
8000d5e2:	1a d8       	st.w	--sp,r8
8000d5e4:	0a 9c       	mov	r12,r5
8000d5e6:	fa c8 f9 40 	sub	r8,sp,-1728
8000d5ea:	fa c9 ff b4 	sub	r9,sp,-76
8000d5ee:	fe b0 fa 51 	rcall	8000ca90 <get_arg>
8000d5f2:	2f dd       	sub	sp,-12
8000d5f4:	78 1a       	ld.w	r10,r12[0x4]
8000d5f6:	50 7a       	stdsp	sp[0x1c],r10
8000d5f8:	78 0c       	ld.w	r12,r12[0x0]
8000d5fa:	50 5c       	stdsp	sp[0x14],r12
8000d5fc:	c2 a8       	rjmp	8000d650 <_vfprintf_r+0x88c>
8000d5fe:	2f f7       	sub	r7,-1
8000d600:	10 39       	cp.w	r9,r8
8000d602:	c0 94       	brge	8000d614 <_vfprintf_r+0x850>
8000d604:	fa c9 f9 44 	sub	r9,sp,-1724
8000d608:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d60c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000d610:	50 78       	stdsp	sp[0x1c],r8
8000d612:	cb 6b       	rjmp	8000d57e <_vfprintf_r+0x7ba>
8000d614:	41 09       	lddsp	r9,sp[0x40]
8000d616:	59 f8       	cp.w	r8,31
8000d618:	e0 89 00 15 	brgt	8000d642 <_vfprintf_r+0x87e>
8000d61c:	f2 ca ff f8 	sub	r10,r9,-8
8000d620:	72 16       	ld.w	r6,r9[0x4]
8000d622:	72 09       	ld.w	r9,r9[0x0]
8000d624:	51 0a       	stdsp	sp[0x40],r10
8000d626:	50 59       	stdsp	sp[0x14],r9
8000d628:	fa ce f9 44 	sub	lr,sp,-1724
8000d62c:	50 76       	stdsp	sp[0x1c],r6
8000d62e:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000d632:	40 5b       	lddsp	r11,sp[0x14]
8000d634:	0c 9a       	mov	r10,r6
8000d636:	f2 eb fd 88 	st.d	r9[-632],r10
8000d63a:	2f f8       	sub	r8,-1
8000d63c:	fb 48 06 b4 	st.w	sp[1716],r8
8000d640:	c0 88       	rjmp	8000d650 <_vfprintf_r+0x88c>
8000d642:	72 1c       	ld.w	r12,r9[0x4]
8000d644:	50 7c       	stdsp	sp[0x1c],r12
8000d646:	f2 c8 ff f8 	sub	r8,r9,-8
8000d64a:	51 08       	stdsp	sp[0x40],r8
8000d64c:	72 09       	ld.w	r9,r9[0x0]
8000d64e:	50 59       	stdsp	sp[0x14],r9
8000d650:	40 5b       	lddsp	r11,sp[0x14]
8000d652:	40 7a       	lddsp	r10,sp[0x1c]
8000d654:	e0 a0 1c fa 	rcall	80011048 <__isinfd>
8000d658:	18 96       	mov	r6,r12
8000d65a:	c1 50       	breq	8000d684 <_vfprintf_r+0x8c0>
8000d65c:	30 08       	mov	r8,0
8000d65e:	30 09       	mov	r9,0
8000d660:	40 5b       	lddsp	r11,sp[0x14]
8000d662:	40 7a       	lddsp	r10,sp[0x1c]
8000d664:	e0 a0 21 46 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000d668:	c0 40       	breq	8000d670 <_vfprintf_r+0x8ac>
8000d66a:	32 d8       	mov	r8,45
8000d66c:	fb 68 06 bb 	st.b	sp[1723],r8
8000d670:	4a f8       	lddpc	r8,8000d72c <_vfprintf_r+0x968>
8000d672:	4b 06       	lddpc	r6,8000d730 <_vfprintf_r+0x96c>
8000d674:	a7 d3       	cbr	r3,0x7
8000d676:	e0 40 00 47 	cp.w	r0,71
8000d67a:	f0 06 17 a0 	movle	r6,r8
8000d67e:	30 32       	mov	r2,3
8000d680:	e0 8f 06 d3 	bral	8000e426 <_vfprintf_r+0x1662>
8000d684:	40 5b       	lddsp	r11,sp[0x14]
8000d686:	40 7a       	lddsp	r10,sp[0x1c]
8000d688:	e0 a0 1c f5 	rcall	80011072 <__isnand>
8000d68c:	c0 c0       	breq	8000d6a4 <_vfprintf_r+0x8e0>
8000d68e:	50 26       	stdsp	sp[0x8],r6
8000d690:	4a 98       	lddpc	r8,8000d734 <_vfprintf_r+0x970>
8000d692:	4a a6       	lddpc	r6,8000d738 <_vfprintf_r+0x974>
8000d694:	a7 d3       	cbr	r3,0x7
8000d696:	e0 40 00 47 	cp.w	r0,71
8000d69a:	f0 06 17 a0 	movle	r6,r8
8000d69e:	30 32       	mov	r2,3
8000d6a0:	e0 8f 06 c9 	bral	8000e432 <_vfprintf_r+0x166e>
8000d6a4:	40 2a       	lddsp	r10,sp[0x8]
8000d6a6:	5b fa       	cp.w	r10,-1
8000d6a8:	c0 41       	brne	8000d6b0 <_vfprintf_r+0x8ec>
8000d6aa:	30 69       	mov	r9,6
8000d6ac:	50 29       	stdsp	sp[0x8],r9
8000d6ae:	c1 18       	rjmp	8000d6d0 <_vfprintf_r+0x90c>
8000d6b0:	e0 40 00 47 	cp.w	r0,71
8000d6b4:	5f 09       	sreq	r9
8000d6b6:	e0 40 00 67 	cp.w	r0,103
8000d6ba:	5f 08       	sreq	r8
8000d6bc:	f3 e8 10 08 	or	r8,r9,r8
8000d6c0:	f8 08 18 00 	cp.b	r8,r12
8000d6c4:	c0 60       	breq	8000d6d0 <_vfprintf_r+0x90c>
8000d6c6:	40 28       	lddsp	r8,sp[0x8]
8000d6c8:	58 08       	cp.w	r8,0
8000d6ca:	f9 b8 00 01 	moveq	r8,1
8000d6ce:	50 28       	stdsp	sp[0x8],r8
8000d6d0:	40 78       	lddsp	r8,sp[0x1c]
8000d6d2:	40 59       	lddsp	r9,sp[0x14]
8000d6d4:	fa e9 06 94 	st.d	sp[1684],r8
8000d6d8:	a9 a3       	sbr	r3,0x8
8000d6da:	fa f8 06 94 	ld.w	r8,sp[1684]
8000d6de:	58 08       	cp.w	r8,0
8000d6e0:	c0 65       	brlt	8000d6ec <_vfprintf_r+0x928>
8000d6e2:	40 5e       	lddsp	lr,sp[0x14]
8000d6e4:	30 0c       	mov	r12,0
8000d6e6:	50 6e       	stdsp	sp[0x18],lr
8000d6e8:	50 9c       	stdsp	sp[0x24],r12
8000d6ea:	c0 78       	rjmp	8000d6f8 <_vfprintf_r+0x934>
8000d6ec:	40 5b       	lddsp	r11,sp[0x14]
8000d6ee:	32 da       	mov	r10,45
8000d6f0:	ee 1b 80 00 	eorh	r11,0x8000
8000d6f4:	50 9a       	stdsp	sp[0x24],r10
8000d6f6:	50 6b       	stdsp	sp[0x18],r11
8000d6f8:	e0 40 00 46 	cp.w	r0,70
8000d6fc:	5f 09       	sreq	r9
8000d6fe:	e0 40 00 66 	cp.w	r0,102
8000d702:	5f 08       	sreq	r8
8000d704:	f3 e8 10 08 	or	r8,r9,r8
8000d708:	50 48       	stdsp	sp[0x10],r8
8000d70a:	c0 40       	breq	8000d712 <_vfprintf_r+0x94e>
8000d70c:	40 22       	lddsp	r2,sp[0x8]
8000d70e:	30 39       	mov	r9,3
8000d710:	c1 a8       	rjmp	8000d744 <_vfprintf_r+0x980>
8000d712:	e0 40 00 45 	cp.w	r0,69
8000d716:	5f 09       	sreq	r9
8000d718:	e0 40 00 65 	cp.w	r0,101
8000d71c:	5f 08       	sreq	r8
8000d71e:	40 46       	lddsp	r6,sp[0x10]
8000d720:	10 49       	or	r9,r8
8000d722:	ec 09 18 00 	cp.b	r9,r6
8000d726:	c0 b1       	brne	8000d73c <_vfprintf_r+0x978>
8000d728:	40 22       	lddsp	r2,sp[0x8]
8000d72a:	c0 c8       	rjmp	8000d742 <_vfprintf_r+0x97e>
8000d72c:	80 01       	ld.sh	r1,r0[0x0]
8000d72e:	3d 58       	mov	r8,-43
8000d730:	80 01       	ld.sh	r1,r0[0x0]
8000d732:	3d 5c       	mov	r12,-43
8000d734:	80 01       	ld.sh	r1,r0[0x0]
8000d736:	3d 60       	mov	r0,-42
8000d738:	80 01       	ld.sh	r1,r0[0x0]
8000d73a:	3d 64       	mov	r4,-42
8000d73c:	40 2e       	lddsp	lr,sp[0x8]
8000d73e:	fc c2 ff ff 	sub	r2,lr,-1
8000d742:	30 29       	mov	r9,2
8000d744:	fa c8 f9 5c 	sub	r8,sp,-1700
8000d748:	1a d8       	st.w	--sp,r8
8000d74a:	fa c8 f9 54 	sub	r8,sp,-1708
8000d74e:	1a d8       	st.w	--sp,r8
8000d750:	fa c8 f9 4c 	sub	r8,sp,-1716
8000d754:	0a 9c       	mov	r12,r5
8000d756:	1a d8       	st.w	--sp,r8
8000d758:	04 98       	mov	r8,r2
8000d75a:	40 9b       	lddsp	r11,sp[0x24]
8000d75c:	40 aa       	lddsp	r10,sp[0x28]
8000d75e:	e0 a0 0b bf 	rcall	8000eedc <_dtoa_r>
8000d762:	e0 40 00 47 	cp.w	r0,71
8000d766:	5f 19       	srne	r9
8000d768:	e0 40 00 67 	cp.w	r0,103
8000d76c:	5f 18       	srne	r8
8000d76e:	18 96       	mov	r6,r12
8000d770:	2f dd       	sub	sp,-12
8000d772:	f3 e8 00 08 	and	r8,r9,r8
8000d776:	c0 41       	brne	8000d77e <_vfprintf_r+0x9ba>
8000d778:	ed b3 00 00 	bld	r3,0x0
8000d77c:	c3 01       	brne	8000d7dc <_vfprintf_r+0xa18>
8000d77e:	ec 02 00 0c 	add	r12,r6,r2
8000d782:	50 3c       	stdsp	sp[0xc],r12
8000d784:	40 4b       	lddsp	r11,sp[0x10]
8000d786:	58 0b       	cp.w	r11,0
8000d788:	c1 50       	breq	8000d7b2 <_vfprintf_r+0x9ee>
8000d78a:	0d 89       	ld.ub	r9,r6[0x0]
8000d78c:	33 08       	mov	r8,48
8000d78e:	f0 09 18 00 	cp.b	r9,r8
8000d792:	c0 b1       	brne	8000d7a8 <_vfprintf_r+0x9e4>
8000d794:	30 08       	mov	r8,0
8000d796:	30 09       	mov	r9,0
8000d798:	40 6b       	lddsp	r11,sp[0x18]
8000d79a:	40 7a       	lddsp	r10,sp[0x1c]
8000d79c:	e0 a0 20 97 	rcall	800118ca <__avr32_f64_cmp_eq>
8000d7a0:	fb b2 00 01 	rsubeq	r2,1
8000d7a4:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000d7a8:	40 3a       	lddsp	r10,sp[0xc]
8000d7aa:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d7ae:	10 0a       	add	r10,r8
8000d7b0:	50 3a       	stdsp	sp[0xc],r10
8000d7b2:	40 6b       	lddsp	r11,sp[0x18]
8000d7b4:	30 08       	mov	r8,0
8000d7b6:	30 09       	mov	r9,0
8000d7b8:	40 7a       	lddsp	r10,sp[0x1c]
8000d7ba:	e0 a0 20 88 	rcall	800118ca <__avr32_f64_cmp_eq>
8000d7be:	c0 90       	breq	8000d7d0 <_vfprintf_r+0xa0c>
8000d7c0:	40 39       	lddsp	r9,sp[0xc]
8000d7c2:	fb 49 06 a4 	st.w	sp[1700],r9
8000d7c6:	c0 58       	rjmp	8000d7d0 <_vfprintf_r+0xa0c>
8000d7c8:	10 c9       	st.b	r8++,r9
8000d7ca:	fb 48 06 a4 	st.w	sp[1700],r8
8000d7ce:	c0 28       	rjmp	8000d7d2 <_vfprintf_r+0xa0e>
8000d7d0:	33 09       	mov	r9,48
8000d7d2:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000d7d6:	40 3e       	lddsp	lr,sp[0xc]
8000d7d8:	1c 38       	cp.w	r8,lr
8000d7da:	cf 73       	brcs	8000d7c8 <_vfprintf_r+0xa04>
8000d7dc:	e0 40 00 47 	cp.w	r0,71
8000d7e0:	5f 09       	sreq	r9
8000d7e2:	e0 40 00 67 	cp.w	r0,103
8000d7e6:	5f 08       	sreq	r8
8000d7e8:	f3 e8 10 08 	or	r8,r9,r8
8000d7ec:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000d7f0:	0c 19       	sub	r9,r6
8000d7f2:	50 69       	stdsp	sp[0x18],r9
8000d7f4:	58 08       	cp.w	r8,0
8000d7f6:	c0 b0       	breq	8000d80c <_vfprintf_r+0xa48>
8000d7f8:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d7fc:	5b d8       	cp.w	r8,-3
8000d7fe:	c0 55       	brlt	8000d808 <_vfprintf_r+0xa44>
8000d800:	40 2c       	lddsp	r12,sp[0x8]
8000d802:	18 38       	cp.w	r8,r12
8000d804:	e0 8a 00 6a 	brle	8000d8d8 <_vfprintf_r+0xb14>
8000d808:	20 20       	sub	r0,2
8000d80a:	c0 58       	rjmp	8000d814 <_vfprintf_r+0xa50>
8000d80c:	e0 40 00 65 	cp.w	r0,101
8000d810:	e0 89 00 46 	brgt	8000d89c <_vfprintf_r+0xad8>
8000d814:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000d818:	fb 60 06 9c 	st.b	sp[1692],r0
8000d81c:	20 1b       	sub	r11,1
8000d81e:	fb 4b 06 ac 	st.w	sp[1708],r11
8000d822:	c0 47       	brpl	8000d82a <_vfprintf_r+0xa66>
8000d824:	5c 3b       	neg	r11
8000d826:	32 d8       	mov	r8,45
8000d828:	c0 28       	rjmp	8000d82c <_vfprintf_r+0xa68>
8000d82a:	32 b8       	mov	r8,43
8000d82c:	fb 68 06 9d 	st.b	sp[1693],r8
8000d830:	58 9b       	cp.w	r11,9
8000d832:	e0 8a 00 1d 	brle	8000d86c <_vfprintf_r+0xaa8>
8000d836:	fa c9 fa 35 	sub	r9,sp,-1483
8000d83a:	30 aa       	mov	r10,10
8000d83c:	12 98       	mov	r8,r9
8000d83e:	0e 9c       	mov	r12,r7
8000d840:	0c 92       	mov	r2,r6
8000d842:	f6 0a 0c 06 	divs	r6,r11,r10
8000d846:	0e 9b       	mov	r11,r7
8000d848:	2d 0b       	sub	r11,-48
8000d84a:	10 fb       	st.b	--r8,r11
8000d84c:	0c 9b       	mov	r11,r6
8000d84e:	58 96       	cp.w	r6,9
8000d850:	fe 99 ff f9 	brgt	8000d842 <_vfprintf_r+0xa7e>
8000d854:	2d 0b       	sub	r11,-48
8000d856:	18 97       	mov	r7,r12
8000d858:	04 96       	mov	r6,r2
8000d85a:	10 fb       	st.b	--r8,r11
8000d85c:	fa ca f9 62 	sub	r10,sp,-1694
8000d860:	c0 38       	rjmp	8000d866 <_vfprintf_r+0xaa2>
8000d862:	11 3b       	ld.ub	r11,r8++
8000d864:	14 cb       	st.b	r10++,r11
8000d866:	12 38       	cp.w	r8,r9
8000d868:	cf d3       	brcs	8000d862 <_vfprintf_r+0xa9e>
8000d86a:	c0 98       	rjmp	8000d87c <_vfprintf_r+0xab8>
8000d86c:	2d 0b       	sub	r11,-48
8000d86e:	33 08       	mov	r8,48
8000d870:	fb 6b 06 9f 	st.b	sp[1695],r11
8000d874:	fb 68 06 9e 	st.b	sp[1694],r8
8000d878:	fa ca f9 60 	sub	r10,sp,-1696
8000d87c:	fa c8 f9 64 	sub	r8,sp,-1692
8000d880:	f4 08 01 08 	sub	r8,r10,r8
8000d884:	50 e8       	stdsp	sp[0x38],r8
8000d886:	10 92       	mov	r2,r8
8000d888:	40 6b       	lddsp	r11,sp[0x18]
8000d88a:	16 02       	add	r2,r11
8000d88c:	58 1b       	cp.w	r11,1
8000d88e:	e0 89 00 05 	brgt	8000d898 <_vfprintf_r+0xad4>
8000d892:	ed b3 00 00 	bld	r3,0x0
8000d896:	c3 51       	brne	8000d900 <_vfprintf_r+0xb3c>
8000d898:	2f f2       	sub	r2,-1
8000d89a:	c3 38       	rjmp	8000d900 <_vfprintf_r+0xb3c>
8000d89c:	e0 40 00 66 	cp.w	r0,102
8000d8a0:	c1 c1       	brne	8000d8d8 <_vfprintf_r+0xb14>
8000d8a2:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d8a6:	58 02       	cp.w	r2,0
8000d8a8:	e0 8a 00 0c 	brle	8000d8c0 <_vfprintf_r+0xafc>
8000d8ac:	40 2a       	lddsp	r10,sp[0x8]
8000d8ae:	58 0a       	cp.w	r10,0
8000d8b0:	c0 41       	brne	8000d8b8 <_vfprintf_r+0xaf4>
8000d8b2:	ed b3 00 00 	bld	r3,0x0
8000d8b6:	c2 51       	brne	8000d900 <_vfprintf_r+0xb3c>
8000d8b8:	2f f2       	sub	r2,-1
8000d8ba:	40 29       	lddsp	r9,sp[0x8]
8000d8bc:	12 02       	add	r2,r9
8000d8be:	c0 b8       	rjmp	8000d8d4 <_vfprintf_r+0xb10>
8000d8c0:	40 28       	lddsp	r8,sp[0x8]
8000d8c2:	58 08       	cp.w	r8,0
8000d8c4:	c0 61       	brne	8000d8d0 <_vfprintf_r+0xb0c>
8000d8c6:	ed b3 00 00 	bld	r3,0x0
8000d8ca:	c0 30       	breq	8000d8d0 <_vfprintf_r+0xb0c>
8000d8cc:	30 12       	mov	r2,1
8000d8ce:	c1 98       	rjmp	8000d900 <_vfprintf_r+0xb3c>
8000d8d0:	40 22       	lddsp	r2,sp[0x8]
8000d8d2:	2f e2       	sub	r2,-2
8000d8d4:	36 60       	mov	r0,102
8000d8d6:	c1 58       	rjmp	8000d900 <_vfprintf_r+0xb3c>
8000d8d8:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d8dc:	40 6e       	lddsp	lr,sp[0x18]
8000d8de:	1c 32       	cp.w	r2,lr
8000d8e0:	c0 65       	brlt	8000d8ec <_vfprintf_r+0xb28>
8000d8e2:	ed b3 00 00 	bld	r3,0x0
8000d8e6:	f7 b2 00 ff 	subeq	r2,-1
8000d8ea:	c0 a8       	rjmp	8000d8fe <_vfprintf_r+0xb3a>
8000d8ec:	e4 08 11 02 	rsub	r8,r2,2
8000d8f0:	40 6c       	lddsp	r12,sp[0x18]
8000d8f2:	58 02       	cp.w	r2,0
8000d8f4:	f0 02 17 a0 	movle	r2,r8
8000d8f8:	f9 b2 09 01 	movgt	r2,1
8000d8fc:	18 02       	add	r2,r12
8000d8fe:	36 70       	mov	r0,103
8000d900:	40 9b       	lddsp	r11,sp[0x24]
8000d902:	58 0b       	cp.w	r11,0
8000d904:	e0 80 05 91 	breq	8000e426 <_vfprintf_r+0x1662>
8000d908:	32 d8       	mov	r8,45
8000d90a:	fb 68 06 bb 	st.b	sp[1723],r8
8000d90e:	e0 8f 05 90 	bral	8000e42e <_vfprintf_r+0x166a>
8000d912:	50 a7       	stdsp	sp[0x28],r7
8000d914:	04 95       	mov	r5,r2
8000d916:	0c 97       	mov	r7,r6
8000d918:	02 92       	mov	r2,r1
8000d91a:	08 96       	mov	r6,r4
8000d91c:	40 41       	lddsp	r1,sp[0x10]
8000d91e:	40 94       	lddsp	r4,sp[0x24]
8000d920:	0e 99       	mov	r9,r7
8000d922:	ed b3 00 05 	bld	r3,0x5
8000d926:	c4 81       	brne	8000d9b6 <_vfprintf_r+0xbf2>
8000d928:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d92c:	40 3e       	lddsp	lr,sp[0xc]
8000d92e:	58 0e       	cp.w	lr,0
8000d930:	c1 d0       	breq	8000d96a <_vfprintf_r+0xba6>
8000d932:	10 36       	cp.w	r6,r8
8000d934:	c0 64       	brge	8000d940 <_vfprintf_r+0xb7c>
8000d936:	fa cc f9 44 	sub	r12,sp,-1724
8000d93a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d93e:	c1 d8       	rjmp	8000d978 <_vfprintf_r+0xbb4>
8000d940:	fa c8 f9 50 	sub	r8,sp,-1712
8000d944:	1a d8       	st.w	--sp,r8
8000d946:	fa c8 fa b8 	sub	r8,sp,-1352
8000d94a:	04 9a       	mov	r10,r2
8000d94c:	1a d8       	st.w	--sp,r8
8000d94e:	fa c8 fb b4 	sub	r8,sp,-1100
8000d952:	0c 9b       	mov	r11,r6
8000d954:	1a d8       	st.w	--sp,r8
8000d956:	0a 9c       	mov	r12,r5
8000d958:	fa c8 f9 40 	sub	r8,sp,-1728
8000d95c:	fa c9 ff b4 	sub	r9,sp,-76
8000d960:	fe b0 f8 98 	rcall	8000ca90 <get_arg>
8000d964:	2f dd       	sub	sp,-12
8000d966:	78 0a       	ld.w	r10,r12[0x0]
8000d968:	c2 08       	rjmp	8000d9a8 <_vfprintf_r+0xbe4>
8000d96a:	2f f7       	sub	r7,-1
8000d96c:	10 39       	cp.w	r9,r8
8000d96e:	c0 84       	brge	8000d97e <_vfprintf_r+0xbba>
8000d970:	fa cb f9 44 	sub	r11,sp,-1724
8000d974:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d978:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d97c:	c1 68       	rjmp	8000d9a8 <_vfprintf_r+0xbe4>
8000d97e:	41 09       	lddsp	r9,sp[0x40]
8000d980:	59 f8       	cp.w	r8,31
8000d982:	e0 89 00 10 	brgt	8000d9a2 <_vfprintf_r+0xbde>
8000d986:	f2 ca ff fc 	sub	r10,r9,-4
8000d98a:	51 0a       	stdsp	sp[0x40],r10
8000d98c:	fa c6 f9 44 	sub	r6,sp,-1724
8000d990:	72 0a       	ld.w	r10,r9[0x0]
8000d992:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d996:	f3 4a fd 88 	st.w	r9[-632],r10
8000d99a:	2f f8       	sub	r8,-1
8000d99c:	fb 48 06 b4 	st.w	sp[1716],r8
8000d9a0:	c0 48       	rjmp	8000d9a8 <_vfprintf_r+0xbe4>
8000d9a2:	72 0a       	ld.w	r10,r9[0x0]
8000d9a4:	2f c9       	sub	r9,-4
8000d9a6:	51 09       	stdsp	sp[0x40],r9
8000d9a8:	40 be       	lddsp	lr,sp[0x2c]
8000d9aa:	1c 98       	mov	r8,lr
8000d9ac:	95 1e       	st.w	r10[0x4],lr
8000d9ae:	bf 58       	asr	r8,0x1f
8000d9b0:	95 08       	st.w	r10[0x0],r8
8000d9b2:	fe 9f fa 93 	bral	8000ced8 <_vfprintf_r+0x114>
8000d9b6:	ed b3 00 04 	bld	r3,0x4
8000d9ba:	c4 80       	breq	8000da4a <_vfprintf_r+0xc86>
8000d9bc:	e2 13 00 40 	andl	r3,0x40,COH
8000d9c0:	c4 50       	breq	8000da4a <_vfprintf_r+0xc86>
8000d9c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d9c6:	40 3c       	lddsp	r12,sp[0xc]
8000d9c8:	58 0c       	cp.w	r12,0
8000d9ca:	c1 d0       	breq	8000da04 <_vfprintf_r+0xc40>
8000d9cc:	10 36       	cp.w	r6,r8
8000d9ce:	c0 64       	brge	8000d9da <_vfprintf_r+0xc16>
8000d9d0:	fa cb f9 44 	sub	r11,sp,-1724
8000d9d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d9d8:	c1 d8       	rjmp	8000da12 <_vfprintf_r+0xc4e>
8000d9da:	fa c8 f9 50 	sub	r8,sp,-1712
8000d9de:	1a d8       	st.w	--sp,r8
8000d9e0:	fa c8 fa b8 	sub	r8,sp,-1352
8000d9e4:	04 9a       	mov	r10,r2
8000d9e6:	1a d8       	st.w	--sp,r8
8000d9e8:	fa c8 fb b4 	sub	r8,sp,-1100
8000d9ec:	0c 9b       	mov	r11,r6
8000d9ee:	1a d8       	st.w	--sp,r8
8000d9f0:	0a 9c       	mov	r12,r5
8000d9f2:	fa c8 f9 40 	sub	r8,sp,-1728
8000d9f6:	fa c9 ff b4 	sub	r9,sp,-76
8000d9fa:	fe b0 f8 4b 	rcall	8000ca90 <get_arg>
8000d9fe:	2f dd       	sub	sp,-12
8000da00:	78 0a       	ld.w	r10,r12[0x0]
8000da02:	c2 08       	rjmp	8000da42 <_vfprintf_r+0xc7e>
8000da04:	2f f7       	sub	r7,-1
8000da06:	10 39       	cp.w	r9,r8
8000da08:	c0 84       	brge	8000da18 <_vfprintf_r+0xc54>
8000da0a:	fa ca f9 44 	sub	r10,sp,-1724
8000da0e:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000da12:	ec fa fd 88 	ld.w	r10,r6[-632]
8000da16:	c1 68       	rjmp	8000da42 <_vfprintf_r+0xc7e>
8000da18:	41 09       	lddsp	r9,sp[0x40]
8000da1a:	59 f8       	cp.w	r8,31
8000da1c:	e0 89 00 10 	brgt	8000da3c <_vfprintf_r+0xc78>
8000da20:	f2 ca ff fc 	sub	r10,r9,-4
8000da24:	51 0a       	stdsp	sp[0x40],r10
8000da26:	fa c6 f9 44 	sub	r6,sp,-1724
8000da2a:	72 0a       	ld.w	r10,r9[0x0]
8000da2c:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000da30:	f3 4a fd 88 	st.w	r9[-632],r10
8000da34:	2f f8       	sub	r8,-1
8000da36:	fb 48 06 b4 	st.w	sp[1716],r8
8000da3a:	c0 48       	rjmp	8000da42 <_vfprintf_r+0xc7e>
8000da3c:	72 0a       	ld.w	r10,r9[0x0]
8000da3e:	2f c9       	sub	r9,-4
8000da40:	51 09       	stdsp	sp[0x40],r9
8000da42:	40 be       	lddsp	lr,sp[0x2c]
8000da44:	b4 0e       	st.h	r10[0x0],lr
8000da46:	fe 9f fa 49 	bral	8000ced8 <_vfprintf_r+0x114>
8000da4a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000da4e:	40 3c       	lddsp	r12,sp[0xc]
8000da50:	58 0c       	cp.w	r12,0
8000da52:	c1 d0       	breq	8000da8c <_vfprintf_r+0xcc8>
8000da54:	10 36       	cp.w	r6,r8
8000da56:	c0 64       	brge	8000da62 <_vfprintf_r+0xc9e>
8000da58:	fa cb f9 44 	sub	r11,sp,-1724
8000da5c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000da60:	c1 d8       	rjmp	8000da9a <_vfprintf_r+0xcd6>
8000da62:	fa c8 f9 50 	sub	r8,sp,-1712
8000da66:	1a d8       	st.w	--sp,r8
8000da68:	fa c8 fa b8 	sub	r8,sp,-1352
8000da6c:	04 9a       	mov	r10,r2
8000da6e:	1a d8       	st.w	--sp,r8
8000da70:	fa c8 fb b4 	sub	r8,sp,-1100
8000da74:	0c 9b       	mov	r11,r6
8000da76:	1a d8       	st.w	--sp,r8
8000da78:	0a 9c       	mov	r12,r5
8000da7a:	fa c8 f9 40 	sub	r8,sp,-1728
8000da7e:	fa c9 ff b4 	sub	r9,sp,-76
8000da82:	fe b0 f8 07 	rcall	8000ca90 <get_arg>
8000da86:	2f dd       	sub	sp,-12
8000da88:	78 0a       	ld.w	r10,r12[0x0]
8000da8a:	c2 08       	rjmp	8000daca <_vfprintf_r+0xd06>
8000da8c:	2f f7       	sub	r7,-1
8000da8e:	10 39       	cp.w	r9,r8
8000da90:	c0 84       	brge	8000daa0 <_vfprintf_r+0xcdc>
8000da92:	fa ca f9 44 	sub	r10,sp,-1724
8000da96:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000da9a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000da9e:	c1 68       	rjmp	8000daca <_vfprintf_r+0xd06>
8000daa0:	41 09       	lddsp	r9,sp[0x40]
8000daa2:	59 f8       	cp.w	r8,31
8000daa4:	e0 89 00 10 	brgt	8000dac4 <_vfprintf_r+0xd00>
8000daa8:	f2 ca ff fc 	sub	r10,r9,-4
8000daac:	51 0a       	stdsp	sp[0x40],r10
8000daae:	fa c6 f9 44 	sub	r6,sp,-1724
8000dab2:	72 0a       	ld.w	r10,r9[0x0]
8000dab4:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dab8:	f3 4a fd 88 	st.w	r9[-632],r10
8000dabc:	2f f8       	sub	r8,-1
8000dabe:	fb 48 06 b4 	st.w	sp[1716],r8
8000dac2:	c0 48       	rjmp	8000daca <_vfprintf_r+0xd06>
8000dac4:	72 0a       	ld.w	r10,r9[0x0]
8000dac6:	2f c9       	sub	r9,-4
8000dac8:	51 09       	stdsp	sp[0x40],r9
8000daca:	40 be       	lddsp	lr,sp[0x2c]
8000dacc:	95 0e       	st.w	r10[0x0],lr
8000dace:	fe 9f fa 05 	bral	8000ced8 <_vfprintf_r+0x114>
8000dad2:	50 a7       	stdsp	sp[0x28],r7
8000dad4:	50 80       	stdsp	sp[0x20],r0
8000dad6:	0c 97       	mov	r7,r6
8000dad8:	04 95       	mov	r5,r2
8000dada:	08 96       	mov	r6,r4
8000dadc:	02 92       	mov	r2,r1
8000dade:	40 94       	lddsp	r4,sp[0x24]
8000dae0:	10 90       	mov	r0,r8
8000dae2:	40 41       	lddsp	r1,sp[0x10]
8000dae4:	a5 a3       	sbr	r3,0x4
8000dae6:	c0 a8       	rjmp	8000dafa <_vfprintf_r+0xd36>
8000dae8:	50 a7       	stdsp	sp[0x28],r7
8000daea:	50 80       	stdsp	sp[0x20],r0
8000daec:	0c 97       	mov	r7,r6
8000daee:	04 95       	mov	r5,r2
8000daf0:	08 96       	mov	r6,r4
8000daf2:	02 92       	mov	r2,r1
8000daf4:	40 94       	lddsp	r4,sp[0x24]
8000daf6:	10 90       	mov	r0,r8
8000daf8:	40 41       	lddsp	r1,sp[0x10]
8000dafa:	ed b3 00 05 	bld	r3,0x5
8000dafe:	c5 d1       	brne	8000dbb8 <_vfprintf_r+0xdf4>
8000db00:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000db04:	40 3c       	lddsp	r12,sp[0xc]
8000db06:	58 0c       	cp.w	r12,0
8000db08:	c2 60       	breq	8000db54 <_vfprintf_r+0xd90>
8000db0a:	10 36       	cp.w	r6,r8
8000db0c:	c0 a4       	brge	8000db20 <_vfprintf_r+0xd5c>
8000db0e:	fa cb f9 44 	sub	r11,sp,-1724
8000db12:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000db16:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000db1a:	fa e9 00 00 	st.d	sp[0],r8
8000db1e:	c1 88       	rjmp	8000db4e <_vfprintf_r+0xd8a>
8000db20:	fa c8 f9 50 	sub	r8,sp,-1712
8000db24:	1a d8       	st.w	--sp,r8
8000db26:	fa c8 fa b8 	sub	r8,sp,-1352
8000db2a:	04 9a       	mov	r10,r2
8000db2c:	1a d8       	st.w	--sp,r8
8000db2e:	0c 9b       	mov	r11,r6
8000db30:	fa c8 fb b4 	sub	r8,sp,-1100
8000db34:	0a 9c       	mov	r12,r5
8000db36:	1a d8       	st.w	--sp,r8
8000db38:	fa c8 f9 40 	sub	r8,sp,-1728
8000db3c:	fa c9 ff b4 	sub	r9,sp,-76
8000db40:	fe b0 f7 a8 	rcall	8000ca90 <get_arg>
8000db44:	2f dd       	sub	sp,-12
8000db46:	f8 ea 00 00 	ld.d	r10,r12[0]
8000db4a:	fa eb 00 00 	st.d	sp[0],r10
8000db4e:	30 08       	mov	r8,0
8000db50:	e0 8f 03 db 	bral	8000e306 <_vfprintf_r+0x1542>
8000db54:	ee ca ff ff 	sub	r10,r7,-1
8000db58:	10 37       	cp.w	r7,r8
8000db5a:	c0 b4       	brge	8000db70 <_vfprintf_r+0xdac>
8000db5c:	fa c9 f9 44 	sub	r9,sp,-1724
8000db60:	14 97       	mov	r7,r10
8000db62:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000db66:	ec ea fd 88 	ld.d	r10,r6[-632]
8000db6a:	fa eb 00 00 	st.d	sp[0],r10
8000db6e:	c1 88       	rjmp	8000db9e <_vfprintf_r+0xdda>
8000db70:	41 09       	lddsp	r9,sp[0x40]
8000db72:	59 f8       	cp.w	r8,31
8000db74:	e0 89 00 18 	brgt	8000dba4 <_vfprintf_r+0xde0>
8000db78:	f2 e6 00 00 	ld.d	r6,r9[0]
8000db7c:	f2 cb ff f8 	sub	r11,r9,-8
8000db80:	fa e7 00 00 	st.d	sp[0],r6
8000db84:	51 0b       	stdsp	sp[0x40],r11
8000db86:	fa c6 f9 44 	sub	r6,sp,-1724
8000db8a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000db8e:	fa e6 00 00 	ld.d	r6,sp[0]
8000db92:	f2 e7 fd 88 	st.d	r9[-632],r6
8000db96:	2f f8       	sub	r8,-1
8000db98:	14 97       	mov	r7,r10
8000db9a:	fb 48 06 b4 	st.w	sp[1716],r8
8000db9e:	40 38       	lddsp	r8,sp[0xc]
8000dba0:	e0 8f 03 b3 	bral	8000e306 <_vfprintf_r+0x1542>
8000dba4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000dba8:	40 38       	lddsp	r8,sp[0xc]
8000dbaa:	fa e7 00 00 	st.d	sp[0],r6
8000dbae:	2f 89       	sub	r9,-8
8000dbb0:	14 97       	mov	r7,r10
8000dbb2:	51 09       	stdsp	sp[0x40],r9
8000dbb4:	e0 8f 03 a9 	bral	8000e306 <_vfprintf_r+0x1542>
8000dbb8:	ed b3 00 04 	bld	r3,0x4
8000dbbc:	c1 61       	brne	8000dbe8 <_vfprintf_r+0xe24>
8000dbbe:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dbc2:	40 3e       	lddsp	lr,sp[0xc]
8000dbc4:	58 0e       	cp.w	lr,0
8000dbc6:	c0 80       	breq	8000dbd6 <_vfprintf_r+0xe12>
8000dbc8:	10 36       	cp.w	r6,r8
8000dbca:	c6 74       	brge	8000dc98 <_vfprintf_r+0xed4>
8000dbcc:	fa cc f9 44 	sub	r12,sp,-1724
8000dbd0:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000dbd4:	c8 08       	rjmp	8000dcd4 <_vfprintf_r+0xf10>
8000dbd6:	ee ca ff ff 	sub	r10,r7,-1
8000dbda:	10 37       	cp.w	r7,r8
8000dbdc:	c7 f4       	brge	8000dcda <_vfprintf_r+0xf16>
8000dbde:	fa cb f9 44 	sub	r11,sp,-1724
8000dbe2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dbe6:	c7 68       	rjmp	8000dcd2 <_vfprintf_r+0xf0e>
8000dbe8:	ed b3 00 06 	bld	r3,0x6
8000dbec:	c4 a1       	brne	8000dc80 <_vfprintf_r+0xebc>
8000dbee:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dbf2:	40 3c       	lddsp	r12,sp[0xc]
8000dbf4:	58 0c       	cp.w	r12,0
8000dbf6:	c1 d0       	breq	8000dc30 <_vfprintf_r+0xe6c>
8000dbf8:	10 36       	cp.w	r6,r8
8000dbfa:	c0 64       	brge	8000dc06 <_vfprintf_r+0xe42>
8000dbfc:	fa cb f9 44 	sub	r11,sp,-1724
8000dc00:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dc04:	c1 f8       	rjmp	8000dc42 <_vfprintf_r+0xe7e>
8000dc06:	fa c8 f9 50 	sub	r8,sp,-1712
8000dc0a:	1a d8       	st.w	--sp,r8
8000dc0c:	fa c8 fa b8 	sub	r8,sp,-1352
8000dc10:	1a d8       	st.w	--sp,r8
8000dc12:	fa c8 fb b4 	sub	r8,sp,-1100
8000dc16:	1a d8       	st.w	--sp,r8
8000dc18:	fa c8 f9 40 	sub	r8,sp,-1728
8000dc1c:	fa c9 ff b4 	sub	r9,sp,-76
8000dc20:	04 9a       	mov	r10,r2
8000dc22:	0c 9b       	mov	r11,r6
8000dc24:	0a 9c       	mov	r12,r5
8000dc26:	fe b0 f7 35 	rcall	8000ca90 <get_arg>
8000dc2a:	2f dd       	sub	sp,-12
8000dc2c:	98 18       	ld.sh	r8,r12[0x2]
8000dc2e:	c2 68       	rjmp	8000dc7a <_vfprintf_r+0xeb6>
8000dc30:	ee ca ff ff 	sub	r10,r7,-1
8000dc34:	10 37       	cp.w	r7,r8
8000dc36:	c0 94       	brge	8000dc48 <_vfprintf_r+0xe84>
8000dc38:	fa c9 f9 44 	sub	r9,sp,-1724
8000dc3c:	14 97       	mov	r7,r10
8000dc3e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dc42:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000dc46:	c1 a8       	rjmp	8000dc7a <_vfprintf_r+0xeb6>
8000dc48:	41 09       	lddsp	r9,sp[0x40]
8000dc4a:	59 f8       	cp.w	r8,31
8000dc4c:	e0 89 00 13 	brgt	8000dc72 <_vfprintf_r+0xeae>
8000dc50:	f2 cb ff fc 	sub	r11,r9,-4
8000dc54:	51 0b       	stdsp	sp[0x40],r11
8000dc56:	72 09       	ld.w	r9,r9[0x0]
8000dc58:	fa c6 f9 44 	sub	r6,sp,-1724
8000dc5c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000dc60:	2f f8       	sub	r8,-1
8000dc62:	f7 49 fd 88 	st.w	r11[-632],r9
8000dc66:	fb 48 06 b4 	st.w	sp[1716],r8
8000dc6a:	14 97       	mov	r7,r10
8000dc6c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000dc70:	c0 58       	rjmp	8000dc7a <_vfprintf_r+0xeb6>
8000dc72:	92 18       	ld.sh	r8,r9[0x2]
8000dc74:	14 97       	mov	r7,r10
8000dc76:	2f c9       	sub	r9,-4
8000dc78:	51 09       	stdsp	sp[0x40],r9
8000dc7a:	5c 78       	castu.h	r8
8000dc7c:	50 18       	stdsp	sp[0x4],r8
8000dc7e:	c4 68       	rjmp	8000dd0a <_vfprintf_r+0xf46>
8000dc80:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dc84:	40 3c       	lddsp	r12,sp[0xc]
8000dc86:	58 0c       	cp.w	r12,0
8000dc88:	c1 d0       	breq	8000dcc2 <_vfprintf_r+0xefe>
8000dc8a:	10 36       	cp.w	r6,r8
8000dc8c:	c0 64       	brge	8000dc98 <_vfprintf_r+0xed4>
8000dc8e:	fa cb f9 44 	sub	r11,sp,-1724
8000dc92:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dc96:	c1 f8       	rjmp	8000dcd4 <_vfprintf_r+0xf10>
8000dc98:	fa c8 f9 50 	sub	r8,sp,-1712
8000dc9c:	1a d8       	st.w	--sp,r8
8000dc9e:	fa c8 fa b8 	sub	r8,sp,-1352
8000dca2:	0c 9b       	mov	r11,r6
8000dca4:	1a d8       	st.w	--sp,r8
8000dca6:	fa c8 fb b4 	sub	r8,sp,-1100
8000dcaa:	04 9a       	mov	r10,r2
8000dcac:	1a d8       	st.w	--sp,r8
8000dcae:	0a 9c       	mov	r12,r5
8000dcb0:	fa c8 f9 40 	sub	r8,sp,-1728
8000dcb4:	fa c9 ff b4 	sub	r9,sp,-76
8000dcb8:	fe b0 f6 ec 	rcall	8000ca90 <get_arg>
8000dcbc:	2f dd       	sub	sp,-12
8000dcbe:	78 0b       	ld.w	r11,r12[0x0]
8000dcc0:	c2 48       	rjmp	8000dd08 <_vfprintf_r+0xf44>
8000dcc2:	ee ca ff ff 	sub	r10,r7,-1
8000dcc6:	10 37       	cp.w	r7,r8
8000dcc8:	c0 94       	brge	8000dcda <_vfprintf_r+0xf16>
8000dcca:	fa c9 f9 44 	sub	r9,sp,-1724
8000dcce:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dcd2:	14 97       	mov	r7,r10
8000dcd4:	ec fb fd 88 	ld.w	r11,r6[-632]
8000dcd8:	c1 88       	rjmp	8000dd08 <_vfprintf_r+0xf44>
8000dcda:	41 09       	lddsp	r9,sp[0x40]
8000dcdc:	59 f8       	cp.w	r8,31
8000dcde:	e0 89 00 11 	brgt	8000dd00 <_vfprintf_r+0xf3c>
8000dce2:	f2 cb ff fc 	sub	r11,r9,-4
8000dce6:	51 0b       	stdsp	sp[0x40],r11
8000dce8:	fa c6 f9 44 	sub	r6,sp,-1724
8000dcec:	72 0b       	ld.w	r11,r9[0x0]
8000dcee:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dcf2:	f3 4b fd 88 	st.w	r9[-632],r11
8000dcf6:	2f f8       	sub	r8,-1
8000dcf8:	14 97       	mov	r7,r10
8000dcfa:	fb 48 06 b4 	st.w	sp[1716],r8
8000dcfe:	c0 58       	rjmp	8000dd08 <_vfprintf_r+0xf44>
8000dd00:	72 0b       	ld.w	r11,r9[0x0]
8000dd02:	14 97       	mov	r7,r10
8000dd04:	2f c9       	sub	r9,-4
8000dd06:	51 09       	stdsp	sp[0x40],r9
8000dd08:	50 1b       	stdsp	sp[0x4],r11
8000dd0a:	30 0e       	mov	lr,0
8000dd0c:	50 0e       	stdsp	sp[0x0],lr
8000dd0e:	1c 98       	mov	r8,lr
8000dd10:	e0 8f 02 fb 	bral	8000e306 <_vfprintf_r+0x1542>
8000dd14:	50 a7       	stdsp	sp[0x28],r7
8000dd16:	50 80       	stdsp	sp[0x20],r0
8000dd18:	0c 97       	mov	r7,r6
8000dd1a:	04 95       	mov	r5,r2
8000dd1c:	08 96       	mov	r6,r4
8000dd1e:	02 92       	mov	r2,r1
8000dd20:	40 94       	lddsp	r4,sp[0x24]
8000dd22:	40 41       	lddsp	r1,sp[0x10]
8000dd24:	0e 99       	mov	r9,r7
8000dd26:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dd2a:	40 3c       	lddsp	r12,sp[0xc]
8000dd2c:	58 0c       	cp.w	r12,0
8000dd2e:	c1 d0       	breq	8000dd68 <_vfprintf_r+0xfa4>
8000dd30:	10 36       	cp.w	r6,r8
8000dd32:	c0 64       	brge	8000dd3e <_vfprintf_r+0xf7a>
8000dd34:	fa cb f9 44 	sub	r11,sp,-1724
8000dd38:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dd3c:	c1 d8       	rjmp	8000dd76 <_vfprintf_r+0xfb2>
8000dd3e:	fa c8 f9 50 	sub	r8,sp,-1712
8000dd42:	1a d8       	st.w	--sp,r8
8000dd44:	fa c8 fa b8 	sub	r8,sp,-1352
8000dd48:	1a d8       	st.w	--sp,r8
8000dd4a:	fa c8 fb b4 	sub	r8,sp,-1100
8000dd4e:	1a d8       	st.w	--sp,r8
8000dd50:	fa c9 ff b4 	sub	r9,sp,-76
8000dd54:	fa c8 f9 40 	sub	r8,sp,-1728
8000dd58:	04 9a       	mov	r10,r2
8000dd5a:	0c 9b       	mov	r11,r6
8000dd5c:	0a 9c       	mov	r12,r5
8000dd5e:	fe b0 f6 99 	rcall	8000ca90 <get_arg>
8000dd62:	2f dd       	sub	sp,-12
8000dd64:	78 09       	ld.w	r9,r12[0x0]
8000dd66:	c2 18       	rjmp	8000dda8 <_vfprintf_r+0xfe4>
8000dd68:	2f f7       	sub	r7,-1
8000dd6a:	10 39       	cp.w	r9,r8
8000dd6c:	c0 84       	brge	8000dd7c <_vfprintf_r+0xfb8>
8000dd6e:	fa ca f9 44 	sub	r10,sp,-1724
8000dd72:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000dd76:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000dd7a:	c1 78       	rjmp	8000dda8 <_vfprintf_r+0xfe4>
8000dd7c:	41 09       	lddsp	r9,sp[0x40]
8000dd7e:	59 f8       	cp.w	r8,31
8000dd80:	e0 89 00 10 	brgt	8000dda0 <_vfprintf_r+0xfdc>
8000dd84:	f2 ca ff fc 	sub	r10,r9,-4
8000dd88:	51 0a       	stdsp	sp[0x40],r10
8000dd8a:	fa c6 f9 44 	sub	r6,sp,-1724
8000dd8e:	72 09       	ld.w	r9,r9[0x0]
8000dd90:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000dd94:	f5 49 fd 88 	st.w	r10[-632],r9
8000dd98:	2f f8       	sub	r8,-1
8000dd9a:	fb 48 06 b4 	st.w	sp[1716],r8
8000dd9e:	c0 58       	rjmp	8000dda8 <_vfprintf_r+0xfe4>
8000dda0:	f2 c8 ff fc 	sub	r8,r9,-4
8000dda4:	51 08       	stdsp	sp[0x40],r8
8000dda6:	72 09       	ld.w	r9,r9[0x0]
8000dda8:	33 08       	mov	r8,48
8000ddaa:	fb 68 06 b8 	st.b	sp[1720],r8
8000ddae:	37 88       	mov	r8,120
8000ddb0:	30 0e       	mov	lr,0
8000ddb2:	fb 68 06 b9 	st.b	sp[1721],r8
8000ddb6:	4c ac       	lddpc	r12,8000dedc <_vfprintf_r+0x1118>
8000ddb8:	50 19       	stdsp	sp[0x4],r9
8000ddba:	a1 b3       	sbr	r3,0x1
8000ddbc:	50 0e       	stdsp	sp[0x0],lr
8000ddbe:	50 dc       	stdsp	sp[0x34],r12
8000ddc0:	30 28       	mov	r8,2
8000ddc2:	37 80       	mov	r0,120
8000ddc4:	e0 8f 02 a1 	bral	8000e306 <_vfprintf_r+0x1542>
8000ddc8:	50 a7       	stdsp	sp[0x28],r7
8000ddca:	50 80       	stdsp	sp[0x20],r0
8000ddcc:	10 90       	mov	r0,r8
8000ddce:	30 08       	mov	r8,0
8000ddd0:	fb 68 06 bb 	st.b	sp[1723],r8
8000ddd4:	0c 97       	mov	r7,r6
8000ddd6:	04 95       	mov	r5,r2
8000ddd8:	08 96       	mov	r6,r4
8000ddda:	02 92       	mov	r2,r1
8000dddc:	40 94       	lddsp	r4,sp[0x24]
8000ddde:	40 41       	lddsp	r1,sp[0x10]
8000dde0:	0e 99       	mov	r9,r7
8000dde2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dde6:	40 3b       	lddsp	r11,sp[0xc]
8000dde8:	58 0b       	cp.w	r11,0
8000ddea:	c1 d0       	breq	8000de24 <_vfprintf_r+0x1060>
8000ddec:	10 36       	cp.w	r6,r8
8000ddee:	c0 64       	brge	8000ddfa <_vfprintf_r+0x1036>
8000ddf0:	fa ca f9 44 	sub	r10,sp,-1724
8000ddf4:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ddf8:	c1 d8       	rjmp	8000de32 <_vfprintf_r+0x106e>
8000ddfa:	fa c8 f9 50 	sub	r8,sp,-1712
8000ddfe:	1a d8       	st.w	--sp,r8
8000de00:	fa c8 fa b8 	sub	r8,sp,-1352
8000de04:	1a d8       	st.w	--sp,r8
8000de06:	fa c8 fb b4 	sub	r8,sp,-1100
8000de0a:	0c 9b       	mov	r11,r6
8000de0c:	1a d8       	st.w	--sp,r8
8000de0e:	04 9a       	mov	r10,r2
8000de10:	fa c8 f9 40 	sub	r8,sp,-1728
8000de14:	fa c9 ff b4 	sub	r9,sp,-76
8000de18:	0a 9c       	mov	r12,r5
8000de1a:	fe b0 f6 3b 	rcall	8000ca90 <get_arg>
8000de1e:	2f dd       	sub	sp,-12
8000de20:	78 06       	ld.w	r6,r12[0x0]
8000de22:	c2 08       	rjmp	8000de62 <_vfprintf_r+0x109e>
8000de24:	2f f7       	sub	r7,-1
8000de26:	10 39       	cp.w	r9,r8
8000de28:	c0 84       	brge	8000de38 <_vfprintf_r+0x1074>
8000de2a:	fa c9 f9 44 	sub	r9,sp,-1724
8000de2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000de32:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000de36:	c1 68       	rjmp	8000de62 <_vfprintf_r+0x109e>
8000de38:	41 09       	lddsp	r9,sp[0x40]
8000de3a:	59 f8       	cp.w	r8,31
8000de3c:	e0 89 00 10 	brgt	8000de5c <_vfprintf_r+0x1098>
8000de40:	f2 ca ff fc 	sub	r10,r9,-4
8000de44:	51 0a       	stdsp	sp[0x40],r10
8000de46:	72 06       	ld.w	r6,r9[0x0]
8000de48:	fa ce f9 44 	sub	lr,sp,-1724
8000de4c:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000de50:	f3 46 fd 88 	st.w	r9[-632],r6
8000de54:	2f f8       	sub	r8,-1
8000de56:	fb 48 06 b4 	st.w	sp[1716],r8
8000de5a:	c0 48       	rjmp	8000de62 <_vfprintf_r+0x109e>
8000de5c:	72 06       	ld.w	r6,r9[0x0]
8000de5e:	2f c9       	sub	r9,-4
8000de60:	51 09       	stdsp	sp[0x40],r9
8000de62:	40 2c       	lddsp	r12,sp[0x8]
8000de64:	58 0c       	cp.w	r12,0
8000de66:	c1 05       	brlt	8000de86 <_vfprintf_r+0x10c2>
8000de68:	18 9a       	mov	r10,r12
8000de6a:	30 0b       	mov	r11,0
8000de6c:	0c 9c       	mov	r12,r6
8000de6e:	e0 a0 14 5f 	rcall	8001072c <memchr>
8000de72:	e0 80 02 dd 	breq	8000e42c <_vfprintf_r+0x1668>
8000de76:	f8 06 01 02 	sub	r2,r12,r6
8000de7a:	40 2b       	lddsp	r11,sp[0x8]
8000de7c:	16 32       	cp.w	r2,r11
8000de7e:	e0 89 02 d7 	brgt	8000e42c <_vfprintf_r+0x1668>
8000de82:	e0 8f 02 d2 	bral	8000e426 <_vfprintf_r+0x1662>
8000de86:	30 0a       	mov	r10,0
8000de88:	0c 9c       	mov	r12,r6
8000de8a:	50 2a       	stdsp	sp[0x8],r10
8000de8c:	e0 a0 19 3e 	rcall	80011108 <strlen>
8000de90:	18 92       	mov	r2,r12
8000de92:	e0 8f 02 d0 	bral	8000e432 <_vfprintf_r+0x166e>
8000de96:	50 a7       	stdsp	sp[0x28],r7
8000de98:	50 80       	stdsp	sp[0x20],r0
8000de9a:	0c 97       	mov	r7,r6
8000de9c:	04 95       	mov	r5,r2
8000de9e:	08 96       	mov	r6,r4
8000dea0:	02 92       	mov	r2,r1
8000dea2:	40 94       	lddsp	r4,sp[0x24]
8000dea4:	10 90       	mov	r0,r8
8000dea6:	40 41       	lddsp	r1,sp[0x10]
8000dea8:	a5 a3       	sbr	r3,0x4
8000deaa:	c0 a8       	rjmp	8000debe <_vfprintf_r+0x10fa>
8000deac:	50 a7       	stdsp	sp[0x28],r7
8000deae:	50 80       	stdsp	sp[0x20],r0
8000deb0:	0c 97       	mov	r7,r6
8000deb2:	04 95       	mov	r5,r2
8000deb4:	08 96       	mov	r6,r4
8000deb6:	02 92       	mov	r2,r1
8000deb8:	40 94       	lddsp	r4,sp[0x24]
8000deba:	10 90       	mov	r0,r8
8000debc:	40 41       	lddsp	r1,sp[0x10]
8000debe:	ed b3 00 05 	bld	r3,0x5
8000dec2:	c5 71       	brne	8000df70 <_vfprintf_r+0x11ac>
8000dec4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dec8:	40 39       	lddsp	r9,sp[0xc]
8000deca:	58 09       	cp.w	r9,0
8000decc:	c2 20       	breq	8000df10 <_vfprintf_r+0x114c>
8000dece:	10 36       	cp.w	r6,r8
8000ded0:	c0 84       	brge	8000dee0 <_vfprintf_r+0x111c>
8000ded2:	fa c8 f9 44 	sub	r8,sp,-1724
8000ded6:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000deda:	c2 48       	rjmp	8000df22 <_vfprintf_r+0x115e>
8000dedc:	80 01       	ld.sh	r1,r0[0x0]
8000dede:	3d 68       	mov	r8,-42
8000dee0:	fa c8 f9 50 	sub	r8,sp,-1712
8000dee4:	1a d8       	st.w	--sp,r8
8000dee6:	fa c8 fa b8 	sub	r8,sp,-1352
8000deea:	1a d8       	st.w	--sp,r8
8000deec:	fa c8 fb b4 	sub	r8,sp,-1100
8000def0:	1a d8       	st.w	--sp,r8
8000def2:	fa c8 f9 40 	sub	r8,sp,-1728
8000def6:	fa c9 ff b4 	sub	r9,sp,-76
8000defa:	04 9a       	mov	r10,r2
8000defc:	0c 9b       	mov	r11,r6
8000defe:	0a 9c       	mov	r12,r5
8000df00:	fe b0 f5 c8 	rcall	8000ca90 <get_arg>
8000df04:	2f dd       	sub	sp,-12
8000df06:	f8 e8 00 00 	ld.d	r8,r12[0]
8000df0a:	fa e9 00 00 	st.d	sp[0],r8
8000df0e:	c2 e8       	rjmp	8000df6a <_vfprintf_r+0x11a6>
8000df10:	ee ca ff ff 	sub	r10,r7,-1
8000df14:	10 37       	cp.w	r7,r8
8000df16:	c0 b4       	brge	8000df2c <_vfprintf_r+0x1168>
8000df18:	fa c8 f9 44 	sub	r8,sp,-1724
8000df1c:	14 97       	mov	r7,r10
8000df1e:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000df22:	ec ea fd 88 	ld.d	r10,r6[-632]
8000df26:	fa eb 00 00 	st.d	sp[0],r10
8000df2a:	c2 08       	rjmp	8000df6a <_vfprintf_r+0x11a6>
8000df2c:	41 09       	lddsp	r9,sp[0x40]
8000df2e:	59 f8       	cp.w	r8,31
8000df30:	e0 89 00 16 	brgt	8000df5c <_vfprintf_r+0x1198>
8000df34:	f2 e6 00 00 	ld.d	r6,r9[0]
8000df38:	f2 cb ff f8 	sub	r11,r9,-8
8000df3c:	fa e7 00 00 	st.d	sp[0],r6
8000df40:	51 0b       	stdsp	sp[0x40],r11
8000df42:	fa c6 f9 44 	sub	r6,sp,-1724
8000df46:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000df4a:	fa e6 00 00 	ld.d	r6,sp[0]
8000df4e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000df52:	2f f8       	sub	r8,-1
8000df54:	14 97       	mov	r7,r10
8000df56:	fb 48 06 b4 	st.w	sp[1716],r8
8000df5a:	c0 88       	rjmp	8000df6a <_vfprintf_r+0x11a6>
8000df5c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000df60:	2f 89       	sub	r9,-8
8000df62:	fa e7 00 00 	st.d	sp[0],r6
8000df66:	51 09       	stdsp	sp[0x40],r9
8000df68:	14 97       	mov	r7,r10
8000df6a:	30 18       	mov	r8,1
8000df6c:	e0 8f 01 cd 	bral	8000e306 <_vfprintf_r+0x1542>
8000df70:	ed b3 00 04 	bld	r3,0x4
8000df74:	c1 61       	brne	8000dfa0 <_vfprintf_r+0x11dc>
8000df76:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000df7a:	40 3e       	lddsp	lr,sp[0xc]
8000df7c:	58 0e       	cp.w	lr,0
8000df7e:	c0 80       	breq	8000df8e <_vfprintf_r+0x11ca>
8000df80:	10 36       	cp.w	r6,r8
8000df82:	c6 74       	brge	8000e050 <_vfprintf_r+0x128c>
8000df84:	fa cc f9 44 	sub	r12,sp,-1724
8000df88:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000df8c:	c8 08       	rjmp	8000e08c <_vfprintf_r+0x12c8>
8000df8e:	ee ca ff ff 	sub	r10,r7,-1
8000df92:	10 37       	cp.w	r7,r8
8000df94:	c7 f4       	brge	8000e092 <_vfprintf_r+0x12ce>
8000df96:	fa cb f9 44 	sub	r11,sp,-1724
8000df9a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000df9e:	c7 68       	rjmp	8000e08a <_vfprintf_r+0x12c6>
8000dfa0:	ed b3 00 06 	bld	r3,0x6
8000dfa4:	c4 a1       	brne	8000e038 <_vfprintf_r+0x1274>
8000dfa6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dfaa:	40 3c       	lddsp	r12,sp[0xc]
8000dfac:	58 0c       	cp.w	r12,0
8000dfae:	c1 d0       	breq	8000dfe8 <_vfprintf_r+0x1224>
8000dfb0:	10 36       	cp.w	r6,r8
8000dfb2:	c0 64       	brge	8000dfbe <_vfprintf_r+0x11fa>
8000dfb4:	fa cb f9 44 	sub	r11,sp,-1724
8000dfb8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dfbc:	c1 f8       	rjmp	8000dffa <_vfprintf_r+0x1236>
8000dfbe:	fa c8 f9 50 	sub	r8,sp,-1712
8000dfc2:	1a d8       	st.w	--sp,r8
8000dfc4:	fa c8 fa b8 	sub	r8,sp,-1352
8000dfc8:	1a d8       	st.w	--sp,r8
8000dfca:	fa c8 fb b4 	sub	r8,sp,-1100
8000dfce:	1a d8       	st.w	--sp,r8
8000dfd0:	fa c8 f9 40 	sub	r8,sp,-1728
8000dfd4:	fa c9 ff b4 	sub	r9,sp,-76
8000dfd8:	04 9a       	mov	r10,r2
8000dfda:	0c 9b       	mov	r11,r6
8000dfdc:	0a 9c       	mov	r12,r5
8000dfde:	fe b0 f5 59 	rcall	8000ca90 <get_arg>
8000dfe2:	2f dd       	sub	sp,-12
8000dfe4:	98 18       	ld.sh	r8,r12[0x2]
8000dfe6:	c2 68       	rjmp	8000e032 <_vfprintf_r+0x126e>
8000dfe8:	ee ca ff ff 	sub	r10,r7,-1
8000dfec:	10 37       	cp.w	r7,r8
8000dfee:	c0 94       	brge	8000e000 <_vfprintf_r+0x123c>
8000dff0:	fa c9 f9 44 	sub	r9,sp,-1724
8000dff4:	14 97       	mov	r7,r10
8000dff6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dffa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000dffe:	c1 a8       	rjmp	8000e032 <_vfprintf_r+0x126e>
8000e000:	41 09       	lddsp	r9,sp[0x40]
8000e002:	59 f8       	cp.w	r8,31
8000e004:	e0 89 00 13 	brgt	8000e02a <_vfprintf_r+0x1266>
8000e008:	f2 cb ff fc 	sub	r11,r9,-4
8000e00c:	51 0b       	stdsp	sp[0x40],r11
8000e00e:	72 09       	ld.w	r9,r9[0x0]
8000e010:	fa c6 f9 44 	sub	r6,sp,-1724
8000e014:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e018:	2f f8       	sub	r8,-1
8000e01a:	f7 49 fd 88 	st.w	r11[-632],r9
8000e01e:	fb 48 06 b4 	st.w	sp[1716],r8
8000e022:	14 97       	mov	r7,r10
8000e024:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e028:	c0 58       	rjmp	8000e032 <_vfprintf_r+0x126e>
8000e02a:	92 18       	ld.sh	r8,r9[0x2]
8000e02c:	14 97       	mov	r7,r10
8000e02e:	2f c9       	sub	r9,-4
8000e030:	51 09       	stdsp	sp[0x40],r9
8000e032:	5c 78       	castu.h	r8
8000e034:	50 18       	stdsp	sp[0x4],r8
8000e036:	c4 68       	rjmp	8000e0c2 <_vfprintf_r+0x12fe>
8000e038:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e03c:	40 3c       	lddsp	r12,sp[0xc]
8000e03e:	58 0c       	cp.w	r12,0
8000e040:	c1 d0       	breq	8000e07a <_vfprintf_r+0x12b6>
8000e042:	10 36       	cp.w	r6,r8
8000e044:	c0 64       	brge	8000e050 <_vfprintf_r+0x128c>
8000e046:	fa cb f9 44 	sub	r11,sp,-1724
8000e04a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e04e:	c1 f8       	rjmp	8000e08c <_vfprintf_r+0x12c8>
8000e050:	fa c8 f9 50 	sub	r8,sp,-1712
8000e054:	1a d8       	st.w	--sp,r8
8000e056:	fa c8 fa b8 	sub	r8,sp,-1352
8000e05a:	0c 9b       	mov	r11,r6
8000e05c:	1a d8       	st.w	--sp,r8
8000e05e:	fa c8 fb b4 	sub	r8,sp,-1100
8000e062:	04 9a       	mov	r10,r2
8000e064:	1a d8       	st.w	--sp,r8
8000e066:	0a 9c       	mov	r12,r5
8000e068:	fa c8 f9 40 	sub	r8,sp,-1728
8000e06c:	fa c9 ff b4 	sub	r9,sp,-76
8000e070:	fe b0 f5 10 	rcall	8000ca90 <get_arg>
8000e074:	2f dd       	sub	sp,-12
8000e076:	78 0b       	ld.w	r11,r12[0x0]
8000e078:	c2 48       	rjmp	8000e0c0 <_vfprintf_r+0x12fc>
8000e07a:	ee ca ff ff 	sub	r10,r7,-1
8000e07e:	10 37       	cp.w	r7,r8
8000e080:	c0 94       	brge	8000e092 <_vfprintf_r+0x12ce>
8000e082:	fa c9 f9 44 	sub	r9,sp,-1724
8000e086:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e08a:	14 97       	mov	r7,r10
8000e08c:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e090:	c1 88       	rjmp	8000e0c0 <_vfprintf_r+0x12fc>
8000e092:	41 09       	lddsp	r9,sp[0x40]
8000e094:	59 f8       	cp.w	r8,31
8000e096:	e0 89 00 11 	brgt	8000e0b8 <_vfprintf_r+0x12f4>
8000e09a:	f2 cb ff fc 	sub	r11,r9,-4
8000e09e:	51 0b       	stdsp	sp[0x40],r11
8000e0a0:	fa c6 f9 44 	sub	r6,sp,-1724
8000e0a4:	72 0b       	ld.w	r11,r9[0x0]
8000e0a6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e0aa:	f3 4b fd 88 	st.w	r9[-632],r11
8000e0ae:	2f f8       	sub	r8,-1
8000e0b0:	14 97       	mov	r7,r10
8000e0b2:	fb 48 06 b4 	st.w	sp[1716],r8
8000e0b6:	c0 58       	rjmp	8000e0c0 <_vfprintf_r+0x12fc>
8000e0b8:	72 0b       	ld.w	r11,r9[0x0]
8000e0ba:	14 97       	mov	r7,r10
8000e0bc:	2f c9       	sub	r9,-4
8000e0be:	51 09       	stdsp	sp[0x40],r9
8000e0c0:	50 1b       	stdsp	sp[0x4],r11
8000e0c2:	30 0e       	mov	lr,0
8000e0c4:	30 18       	mov	r8,1
8000e0c6:	50 0e       	stdsp	sp[0x0],lr
8000e0c8:	c1 f9       	rjmp	8000e306 <_vfprintf_r+0x1542>
8000e0ca:	50 a7       	stdsp	sp[0x28],r7
8000e0cc:	50 80       	stdsp	sp[0x20],r0
8000e0ce:	0c 97       	mov	r7,r6
8000e0d0:	04 95       	mov	r5,r2
8000e0d2:	08 96       	mov	r6,r4
8000e0d4:	02 92       	mov	r2,r1
8000e0d6:	4d 3c       	lddpc	r12,8000e220 <_vfprintf_r+0x145c>
8000e0d8:	40 94       	lddsp	r4,sp[0x24]
8000e0da:	10 90       	mov	r0,r8
8000e0dc:	40 41       	lddsp	r1,sp[0x10]
8000e0de:	50 dc       	stdsp	sp[0x34],r12
8000e0e0:	ed b3 00 05 	bld	r3,0x5
8000e0e4:	c5 51       	brne	8000e18e <_vfprintf_r+0x13ca>
8000e0e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e0ea:	40 3b       	lddsp	r11,sp[0xc]
8000e0ec:	58 0b       	cp.w	r11,0
8000e0ee:	c2 20       	breq	8000e132 <_vfprintf_r+0x136e>
8000e0f0:	10 36       	cp.w	r6,r8
8000e0f2:	c0 a4       	brge	8000e106 <_vfprintf_r+0x1342>
8000e0f4:	fa ca f9 44 	sub	r10,sp,-1724
8000e0f8:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000e0fc:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000e100:	fa e9 00 00 	st.d	sp[0],r8
8000e104:	cf 38       	rjmp	8000e2ea <_vfprintf_r+0x1526>
8000e106:	fa c8 f9 50 	sub	r8,sp,-1712
8000e10a:	1a d8       	st.w	--sp,r8
8000e10c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e110:	04 9a       	mov	r10,r2
8000e112:	1a d8       	st.w	--sp,r8
8000e114:	0c 9b       	mov	r11,r6
8000e116:	fa c8 fb b4 	sub	r8,sp,-1100
8000e11a:	0a 9c       	mov	r12,r5
8000e11c:	1a d8       	st.w	--sp,r8
8000e11e:	fa c8 f9 40 	sub	r8,sp,-1728
8000e122:	fa c9 ff b4 	sub	r9,sp,-76
8000e126:	fe b0 f4 b5 	rcall	8000ca90 <get_arg>
8000e12a:	2f dd       	sub	sp,-12
8000e12c:	f8 ea 00 00 	ld.d	r10,r12[0]
8000e130:	c0 c8       	rjmp	8000e148 <_vfprintf_r+0x1384>
8000e132:	ee ca ff ff 	sub	r10,r7,-1
8000e136:	10 37       	cp.w	r7,r8
8000e138:	c0 b4       	brge	8000e14e <_vfprintf_r+0x138a>
8000e13a:	fa c9 f9 44 	sub	r9,sp,-1724
8000e13e:	14 97       	mov	r7,r10
8000e140:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e144:	ec ea fd 88 	ld.d	r10,r6[-632]
8000e148:	fa eb 00 00 	st.d	sp[0],r10
8000e14c:	cc f8       	rjmp	8000e2ea <_vfprintf_r+0x1526>
8000e14e:	41 09       	lddsp	r9,sp[0x40]
8000e150:	59 f8       	cp.w	r8,31
8000e152:	e0 89 00 16 	brgt	8000e17e <_vfprintf_r+0x13ba>
8000e156:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e15a:	f2 cb ff f8 	sub	r11,r9,-8
8000e15e:	fa e7 00 00 	st.d	sp[0],r6
8000e162:	51 0b       	stdsp	sp[0x40],r11
8000e164:	fa c6 f9 44 	sub	r6,sp,-1724
8000e168:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e16c:	fa e6 00 00 	ld.d	r6,sp[0]
8000e170:	f2 e7 fd 88 	st.d	r9[-632],r6
8000e174:	2f f8       	sub	r8,-1
8000e176:	14 97       	mov	r7,r10
8000e178:	fb 48 06 b4 	st.w	sp[1716],r8
8000e17c:	cb 78       	rjmp	8000e2ea <_vfprintf_r+0x1526>
8000e17e:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e182:	2f 89       	sub	r9,-8
8000e184:	fa e7 00 00 	st.d	sp[0],r6
8000e188:	51 09       	stdsp	sp[0x40],r9
8000e18a:	14 97       	mov	r7,r10
8000e18c:	ca f8       	rjmp	8000e2ea <_vfprintf_r+0x1526>
8000e18e:	ed b3 00 04 	bld	r3,0x4
8000e192:	c1 71       	brne	8000e1c0 <_vfprintf_r+0x13fc>
8000e194:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e198:	40 3e       	lddsp	lr,sp[0xc]
8000e19a:	58 0e       	cp.w	lr,0
8000e19c:	c0 80       	breq	8000e1ac <_vfprintf_r+0x13e8>
8000e19e:	10 36       	cp.w	r6,r8
8000e1a0:	c6 a4       	brge	8000e274 <_vfprintf_r+0x14b0>
8000e1a2:	fa cc f9 44 	sub	r12,sp,-1724
8000e1a6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000e1aa:	c8 38       	rjmp	8000e2b0 <_vfprintf_r+0x14ec>
8000e1ac:	ee ca ff ff 	sub	r10,r7,-1
8000e1b0:	10 37       	cp.w	r7,r8
8000e1b2:	e0 84 00 82 	brge	8000e2b6 <_vfprintf_r+0x14f2>
8000e1b6:	fa cb f9 44 	sub	r11,sp,-1724
8000e1ba:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e1be:	c7 88       	rjmp	8000e2ae <_vfprintf_r+0x14ea>
8000e1c0:	ed b3 00 06 	bld	r3,0x6
8000e1c4:	c4 c1       	brne	8000e25c <_vfprintf_r+0x1498>
8000e1c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e1ca:	40 3c       	lddsp	r12,sp[0xc]
8000e1cc:	58 0c       	cp.w	r12,0
8000e1ce:	c1 d0       	breq	8000e208 <_vfprintf_r+0x1444>
8000e1d0:	10 36       	cp.w	r6,r8
8000e1d2:	c0 64       	brge	8000e1de <_vfprintf_r+0x141a>
8000e1d4:	fa cb f9 44 	sub	r11,sp,-1724
8000e1d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e1dc:	c1 f8       	rjmp	8000e21a <_vfprintf_r+0x1456>
8000e1de:	fa c8 f9 50 	sub	r8,sp,-1712
8000e1e2:	1a d8       	st.w	--sp,r8
8000e1e4:	fa c8 fa b8 	sub	r8,sp,-1352
8000e1e8:	1a d8       	st.w	--sp,r8
8000e1ea:	fa c8 fb b4 	sub	r8,sp,-1100
8000e1ee:	1a d8       	st.w	--sp,r8
8000e1f0:	fa c8 f9 40 	sub	r8,sp,-1728
8000e1f4:	fa c9 ff b4 	sub	r9,sp,-76
8000e1f8:	04 9a       	mov	r10,r2
8000e1fa:	0c 9b       	mov	r11,r6
8000e1fc:	0a 9c       	mov	r12,r5
8000e1fe:	fe b0 f4 49 	rcall	8000ca90 <get_arg>
8000e202:	2f dd       	sub	sp,-12
8000e204:	98 18       	ld.sh	r8,r12[0x2]
8000e206:	c2 88       	rjmp	8000e256 <_vfprintf_r+0x1492>
8000e208:	ee ca ff ff 	sub	r10,r7,-1
8000e20c:	10 37       	cp.w	r7,r8
8000e20e:	c0 b4       	brge	8000e224 <_vfprintf_r+0x1460>
8000e210:	fa c9 f9 44 	sub	r9,sp,-1724
8000e214:	14 97       	mov	r7,r10
8000e216:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e21a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000e21e:	c1 c8       	rjmp	8000e256 <_vfprintf_r+0x1492>
8000e220:	80 01       	ld.sh	r1,r0[0x0]
8000e222:	3d 68       	mov	r8,-42
8000e224:	41 09       	lddsp	r9,sp[0x40]
8000e226:	59 f8       	cp.w	r8,31
8000e228:	e0 89 00 13 	brgt	8000e24e <_vfprintf_r+0x148a>
8000e22c:	f2 cb ff fc 	sub	r11,r9,-4
8000e230:	51 0b       	stdsp	sp[0x40],r11
8000e232:	72 09       	ld.w	r9,r9[0x0]
8000e234:	fa c6 f9 44 	sub	r6,sp,-1724
8000e238:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e23c:	2f f8       	sub	r8,-1
8000e23e:	f7 49 fd 88 	st.w	r11[-632],r9
8000e242:	fb 48 06 b4 	st.w	sp[1716],r8
8000e246:	14 97       	mov	r7,r10
8000e248:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e24c:	c0 58       	rjmp	8000e256 <_vfprintf_r+0x1492>
8000e24e:	92 18       	ld.sh	r8,r9[0x2]
8000e250:	14 97       	mov	r7,r10
8000e252:	2f c9       	sub	r9,-4
8000e254:	51 09       	stdsp	sp[0x40],r9
8000e256:	5c 78       	castu.h	r8
8000e258:	50 18       	stdsp	sp[0x4],r8
8000e25a:	c4 68       	rjmp	8000e2e6 <_vfprintf_r+0x1522>
8000e25c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e260:	40 3c       	lddsp	r12,sp[0xc]
8000e262:	58 0c       	cp.w	r12,0
8000e264:	c1 d0       	breq	8000e29e <_vfprintf_r+0x14da>
8000e266:	10 36       	cp.w	r6,r8
8000e268:	c0 64       	brge	8000e274 <_vfprintf_r+0x14b0>
8000e26a:	fa cb f9 44 	sub	r11,sp,-1724
8000e26e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e272:	c1 f8       	rjmp	8000e2b0 <_vfprintf_r+0x14ec>
8000e274:	fa c8 f9 50 	sub	r8,sp,-1712
8000e278:	1a d8       	st.w	--sp,r8
8000e27a:	fa c8 fa b8 	sub	r8,sp,-1352
8000e27e:	0c 9b       	mov	r11,r6
8000e280:	1a d8       	st.w	--sp,r8
8000e282:	fa c8 fb b4 	sub	r8,sp,-1100
8000e286:	04 9a       	mov	r10,r2
8000e288:	1a d8       	st.w	--sp,r8
8000e28a:	0a 9c       	mov	r12,r5
8000e28c:	fa c8 f9 40 	sub	r8,sp,-1728
8000e290:	fa c9 ff b4 	sub	r9,sp,-76
8000e294:	fe b0 f3 fe 	rcall	8000ca90 <get_arg>
8000e298:	2f dd       	sub	sp,-12
8000e29a:	78 0b       	ld.w	r11,r12[0x0]
8000e29c:	c2 48       	rjmp	8000e2e4 <_vfprintf_r+0x1520>
8000e29e:	ee ca ff ff 	sub	r10,r7,-1
8000e2a2:	10 37       	cp.w	r7,r8
8000e2a4:	c0 94       	brge	8000e2b6 <_vfprintf_r+0x14f2>
8000e2a6:	fa c9 f9 44 	sub	r9,sp,-1724
8000e2aa:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e2ae:	14 97       	mov	r7,r10
8000e2b0:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e2b4:	c1 88       	rjmp	8000e2e4 <_vfprintf_r+0x1520>
8000e2b6:	41 09       	lddsp	r9,sp[0x40]
8000e2b8:	59 f8       	cp.w	r8,31
8000e2ba:	e0 89 00 11 	brgt	8000e2dc <_vfprintf_r+0x1518>
8000e2be:	f2 cb ff fc 	sub	r11,r9,-4
8000e2c2:	51 0b       	stdsp	sp[0x40],r11
8000e2c4:	fa c6 f9 44 	sub	r6,sp,-1724
8000e2c8:	72 0b       	ld.w	r11,r9[0x0]
8000e2ca:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e2ce:	f3 4b fd 88 	st.w	r9[-632],r11
8000e2d2:	2f f8       	sub	r8,-1
8000e2d4:	14 97       	mov	r7,r10
8000e2d6:	fb 48 06 b4 	st.w	sp[1716],r8
8000e2da:	c0 58       	rjmp	8000e2e4 <_vfprintf_r+0x1520>
8000e2dc:	72 0b       	ld.w	r11,r9[0x0]
8000e2de:	14 97       	mov	r7,r10
8000e2e0:	2f c9       	sub	r9,-4
8000e2e2:	51 09       	stdsp	sp[0x40],r9
8000e2e4:	50 1b       	stdsp	sp[0x4],r11
8000e2e6:	30 0e       	mov	lr,0
8000e2e8:	50 0e       	stdsp	sp[0x0],lr
8000e2ea:	40 08       	lddsp	r8,sp[0x0]
8000e2ec:	40 1c       	lddsp	r12,sp[0x4]
8000e2ee:	18 48       	or	r8,r12
8000e2f0:	5f 18       	srne	r8
8000e2f2:	e7 e8 00 08 	and	r8,r3,r8
8000e2f6:	c0 70       	breq	8000e304 <_vfprintf_r+0x1540>
8000e2f8:	33 08       	mov	r8,48
8000e2fa:	fb 60 06 b9 	st.b	sp[1721],r0
8000e2fe:	a1 b3       	sbr	r3,0x1
8000e300:	fb 68 06 b8 	st.b	sp[1720],r8
8000e304:	30 28       	mov	r8,2
8000e306:	30 09       	mov	r9,0
8000e308:	fb 69 06 bb 	st.b	sp[1723],r9
8000e30c:	40 2b       	lddsp	r11,sp[0x8]
8000e30e:	58 0b       	cp.w	r11,0
8000e310:	c0 25       	brlt	8000e314 <_vfprintf_r+0x1550>
8000e312:	a7 d3       	cbr	r3,0x7
8000e314:	40 2a       	lddsp	r10,sp[0x8]
8000e316:	40 09       	lddsp	r9,sp[0x0]
8000e318:	58 0a       	cp.w	r10,0
8000e31a:	5f 1a       	srne	r10
8000e31c:	40 16       	lddsp	r6,sp[0x4]
8000e31e:	fa c2 f9 78 	sub	r2,sp,-1672
8000e322:	0c 49       	or	r9,r6
8000e324:	5f 19       	srne	r9
8000e326:	f5 e9 10 09 	or	r9,r10,r9
8000e32a:	c5 c0       	breq	8000e3e2 <_vfprintf_r+0x161e>
8000e32c:	30 19       	mov	r9,1
8000e32e:	f2 08 18 00 	cp.b	r8,r9
8000e332:	c0 60       	breq	8000e33e <_vfprintf_r+0x157a>
8000e334:	30 29       	mov	r9,2
8000e336:	f2 08 18 00 	cp.b	r8,r9
8000e33a:	c0 41       	brne	8000e342 <_vfprintf_r+0x157e>
8000e33c:	c3 c8       	rjmp	8000e3b4 <_vfprintf_r+0x15f0>
8000e33e:	04 96       	mov	r6,r2
8000e340:	c3 08       	rjmp	8000e3a0 <_vfprintf_r+0x15dc>
8000e342:	04 96       	mov	r6,r2
8000e344:	fa e8 00 00 	ld.d	r8,sp[0]
8000e348:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000e34c:	2d 0a       	sub	r10,-48
8000e34e:	0c fa       	st.b	--r6,r10
8000e350:	f0 0b 16 03 	lsr	r11,r8,0x3
8000e354:	f2 0c 16 03 	lsr	r12,r9,0x3
8000e358:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000e35c:	18 99       	mov	r9,r12
8000e35e:	16 98       	mov	r8,r11
8000e360:	58 08       	cp.w	r8,0
8000e362:	5c 29       	cpc	r9
8000e364:	cf 21       	brne	8000e348 <_vfprintf_r+0x1584>
8000e366:	fa e9 00 00 	st.d	sp[0],r8
8000e36a:	ed b3 00 00 	bld	r3,0x0
8000e36e:	c4 51       	brne	8000e3f8 <_vfprintf_r+0x1634>
8000e370:	33 09       	mov	r9,48
8000e372:	f2 0a 18 00 	cp.b	r10,r9
8000e376:	c4 10       	breq	8000e3f8 <_vfprintf_r+0x1634>
8000e378:	0c f9       	st.b	--r6,r9
8000e37a:	c3 f8       	rjmp	8000e3f8 <_vfprintf_r+0x1634>
8000e37c:	fa ea 00 00 	ld.d	r10,sp[0]
8000e380:	30 a8       	mov	r8,10
8000e382:	30 09       	mov	r9,0
8000e384:	e0 a0 1d bf 	rcall	80011f02 <__avr32_umod64>
8000e388:	30 a8       	mov	r8,10
8000e38a:	2d 0a       	sub	r10,-48
8000e38c:	30 09       	mov	r9,0
8000e38e:	ac 8a       	st.b	r6[0x0],r10
8000e390:	fa ea 00 00 	ld.d	r10,sp[0]
8000e394:	e0 a0 1c 6e 	rcall	80011c70 <__avr32_udiv64>
8000e398:	16 99       	mov	r9,r11
8000e39a:	14 98       	mov	r8,r10
8000e39c:	fa e9 00 00 	st.d	sp[0],r8
8000e3a0:	20 16       	sub	r6,1
8000e3a2:	fa ea 00 00 	ld.d	r10,sp[0]
8000e3a6:	58 9a       	cp.w	r10,9
8000e3a8:	5c 2b       	cpc	r11
8000e3aa:	fe 9b ff e9 	brhi	8000e37c <_vfprintf_r+0x15b8>
8000e3ae:	1b f8       	ld.ub	r8,sp[0x7]
8000e3b0:	2d 08       	sub	r8,-48
8000e3b2:	c2 08       	rjmp	8000e3f2 <_vfprintf_r+0x162e>
8000e3b4:	04 96       	mov	r6,r2
8000e3b6:	fa e8 00 00 	ld.d	r8,sp[0]
8000e3ba:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000e3be:	40 de       	lddsp	lr,sp[0x34]
8000e3c0:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000e3c4:	0c fa       	st.b	--r6,r10
8000e3c6:	f2 0b 16 04 	lsr	r11,r9,0x4
8000e3ca:	f0 0a 16 04 	lsr	r10,r8,0x4
8000e3ce:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000e3d2:	16 99       	mov	r9,r11
8000e3d4:	14 98       	mov	r8,r10
8000e3d6:	58 08       	cp.w	r8,0
8000e3d8:	5c 29       	cpc	r9
8000e3da:	cf 01       	brne	8000e3ba <_vfprintf_r+0x15f6>
8000e3dc:	fa e9 00 00 	st.d	sp[0],r8
8000e3e0:	c0 c8       	rjmp	8000e3f8 <_vfprintf_r+0x1634>
8000e3e2:	58 08       	cp.w	r8,0
8000e3e4:	c0 91       	brne	8000e3f6 <_vfprintf_r+0x1632>
8000e3e6:	ed b3 00 00 	bld	r3,0x0
8000e3ea:	c0 61       	brne	8000e3f6 <_vfprintf_r+0x1632>
8000e3ec:	fa c6 f9 79 	sub	r6,sp,-1671
8000e3f0:	33 08       	mov	r8,48
8000e3f2:	ac 88       	st.b	r6[0x0],r8
8000e3f4:	c0 28       	rjmp	8000e3f8 <_vfprintf_r+0x1634>
8000e3f6:	04 96       	mov	r6,r2
8000e3f8:	0c 12       	sub	r2,r6
8000e3fa:	c1 c8       	rjmp	8000e432 <_vfprintf_r+0x166e>
8000e3fc:	50 a7       	stdsp	sp[0x28],r7
8000e3fe:	50 80       	stdsp	sp[0x20],r0
8000e400:	40 94       	lddsp	r4,sp[0x24]
8000e402:	0c 97       	mov	r7,r6
8000e404:	10 90       	mov	r0,r8
8000e406:	04 95       	mov	r5,r2
8000e408:	40 41       	lddsp	r1,sp[0x10]
8000e40a:	58 08       	cp.w	r8,0
8000e40c:	e0 80 04 50 	breq	8000ecac <_vfprintf_r+0x1ee8>
8000e410:	fb 68 06 60 	st.b	sp[1632],r8
8000e414:	30 0c       	mov	r12,0
8000e416:	30 08       	mov	r8,0
8000e418:	30 12       	mov	r2,1
8000e41a:	fb 68 06 bb 	st.b	sp[1723],r8
8000e41e:	50 2c       	stdsp	sp[0x8],r12
8000e420:	fa c6 f9 a0 	sub	r6,sp,-1632
8000e424:	c0 78       	rjmp	8000e432 <_vfprintf_r+0x166e>
8000e426:	30 0b       	mov	r11,0
8000e428:	50 2b       	stdsp	sp[0x8],r11
8000e42a:	c0 48       	rjmp	8000e432 <_vfprintf_r+0x166e>
8000e42c:	40 22       	lddsp	r2,sp[0x8]
8000e42e:	30 0a       	mov	r10,0
8000e430:	50 2a       	stdsp	sp[0x8],r10
8000e432:	40 29       	lddsp	r9,sp[0x8]
8000e434:	e4 09 0c 49 	max	r9,r2,r9
8000e438:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e43c:	50 39       	stdsp	sp[0xc],r9
8000e43e:	06 9e       	mov	lr,r3
8000e440:	30 09       	mov	r9,0
8000e442:	e2 1e 00 02 	andl	lr,0x2,COH
8000e446:	f2 08 18 00 	cp.b	r8,r9
8000e44a:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000e44e:	f7 b8 01 ff 	subne	r8,-1
8000e452:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000e456:	06 9b       	mov	r11,r3
8000e458:	58 0e       	cp.w	lr,0
8000e45a:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000e45e:	f7 bc 01 fe 	subne	r12,-2
8000e462:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000e466:	e2 1b 00 84 	andl	r11,0x84,COH
8000e46a:	50 fe       	stdsp	sp[0x3c],lr
8000e46c:	50 9b       	stdsp	sp[0x24],r11
8000e46e:	c4 51       	brne	8000e4f8 <_vfprintf_r+0x1734>
8000e470:	40 8a       	lddsp	r10,sp[0x20]
8000e472:	40 39       	lddsp	r9,sp[0xc]
8000e474:	12 1a       	sub	r10,r9
8000e476:	50 4a       	stdsp	sp[0x10],r10
8000e478:	58 0a       	cp.w	r10,0
8000e47a:	e0 89 00 1f 	brgt	8000e4b8 <_vfprintf_r+0x16f4>
8000e47e:	c3 d8       	rjmp	8000e4f8 <_vfprintf_r+0x1734>
8000e480:	2f 09       	sub	r9,-16
8000e482:	2f f8       	sub	r8,-1
8000e484:	4c de       	lddpc	lr,8000e5b8 <_vfprintf_r+0x17f4>
8000e486:	31 0c       	mov	r12,16
8000e488:	fb 49 06 90 	st.w	sp[1680],r9
8000e48c:	89 0e       	st.w	r4[0x0],lr
8000e48e:	89 1c       	st.w	r4[0x4],r12
8000e490:	fb 48 06 8c 	st.w	sp[1676],r8
8000e494:	58 78       	cp.w	r8,7
8000e496:	e0 89 00 04 	brgt	8000e49e <_vfprintf_r+0x16da>
8000e49a:	2f 84       	sub	r4,-8
8000e49c:	c0 b8       	rjmp	8000e4b2 <_vfprintf_r+0x16ee>
8000e49e:	fa ca f9 78 	sub	r10,sp,-1672
8000e4a2:	02 9b       	mov	r11,r1
8000e4a4:	0a 9c       	mov	r12,r5
8000e4a6:	fe b0 f4 81 	rcall	8000cda8 <__sprint_r>
8000e4aa:	e0 81 04 11 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e4ae:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e4b2:	40 4b       	lddsp	r11,sp[0x10]
8000e4b4:	21 0b       	sub	r11,16
8000e4b6:	50 4b       	stdsp	sp[0x10],r11
8000e4b8:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e4bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e4c0:	4b ea       	lddpc	r10,8000e5b8 <_vfprintf_r+0x17f4>
8000e4c2:	40 4e       	lddsp	lr,sp[0x10]
8000e4c4:	59 0e       	cp.w	lr,16
8000e4c6:	fe 99 ff dd 	brgt	8000e480 <_vfprintf_r+0x16bc>
8000e4ca:	1c 09       	add	r9,lr
8000e4cc:	2f f8       	sub	r8,-1
8000e4ce:	89 0a       	st.w	r4[0x0],r10
8000e4d0:	fb 49 06 90 	st.w	sp[1680],r9
8000e4d4:	89 1e       	st.w	r4[0x4],lr
8000e4d6:	fb 48 06 8c 	st.w	sp[1676],r8
8000e4da:	58 78       	cp.w	r8,7
8000e4dc:	e0 89 00 04 	brgt	8000e4e4 <_vfprintf_r+0x1720>
8000e4e0:	2f 84       	sub	r4,-8
8000e4e2:	c0 b8       	rjmp	8000e4f8 <_vfprintf_r+0x1734>
8000e4e4:	fa ca f9 78 	sub	r10,sp,-1672
8000e4e8:	02 9b       	mov	r11,r1
8000e4ea:	0a 9c       	mov	r12,r5
8000e4ec:	fe b0 f4 5e 	rcall	8000cda8 <__sprint_r>
8000e4f0:	e0 81 03 ee 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e4f4:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e4f8:	30 09       	mov	r9,0
8000e4fa:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e4fe:	f2 08 18 00 	cp.b	r8,r9
8000e502:	c1 f0       	breq	8000e540 <_vfprintf_r+0x177c>
8000e504:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e508:	fa c9 f9 45 	sub	r9,sp,-1723
8000e50c:	2f f8       	sub	r8,-1
8000e50e:	89 09       	st.w	r4[0x0],r9
8000e510:	fb 48 06 90 	st.w	sp[1680],r8
8000e514:	30 19       	mov	r9,1
8000e516:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e51a:	89 19       	st.w	r4[0x4],r9
8000e51c:	2f f8       	sub	r8,-1
8000e51e:	fb 48 06 8c 	st.w	sp[1676],r8
8000e522:	58 78       	cp.w	r8,7
8000e524:	e0 89 00 04 	brgt	8000e52c <_vfprintf_r+0x1768>
8000e528:	2f 84       	sub	r4,-8
8000e52a:	c0 b8       	rjmp	8000e540 <_vfprintf_r+0x177c>
8000e52c:	fa ca f9 78 	sub	r10,sp,-1672
8000e530:	02 9b       	mov	r11,r1
8000e532:	0a 9c       	mov	r12,r5
8000e534:	fe b0 f4 3a 	rcall	8000cda8 <__sprint_r>
8000e538:	e0 81 03 ca 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e53c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e540:	40 fc       	lddsp	r12,sp[0x3c]
8000e542:	58 0c       	cp.w	r12,0
8000e544:	c1 f0       	breq	8000e582 <_vfprintf_r+0x17be>
8000e546:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e54a:	fa c9 f9 48 	sub	r9,sp,-1720
8000e54e:	2f e8       	sub	r8,-2
8000e550:	89 09       	st.w	r4[0x0],r9
8000e552:	fb 48 06 90 	st.w	sp[1680],r8
8000e556:	30 29       	mov	r9,2
8000e558:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e55c:	89 19       	st.w	r4[0x4],r9
8000e55e:	2f f8       	sub	r8,-1
8000e560:	fb 48 06 8c 	st.w	sp[1676],r8
8000e564:	58 78       	cp.w	r8,7
8000e566:	e0 89 00 04 	brgt	8000e56e <_vfprintf_r+0x17aa>
8000e56a:	2f 84       	sub	r4,-8
8000e56c:	c0 b8       	rjmp	8000e582 <_vfprintf_r+0x17be>
8000e56e:	fa ca f9 78 	sub	r10,sp,-1672
8000e572:	02 9b       	mov	r11,r1
8000e574:	0a 9c       	mov	r12,r5
8000e576:	fe b0 f4 19 	rcall	8000cda8 <__sprint_r>
8000e57a:	e0 81 03 a9 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e57e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e582:	40 9b       	lddsp	r11,sp[0x24]
8000e584:	e0 4b 00 80 	cp.w	r11,128
8000e588:	c4 91       	brne	8000e61a <_vfprintf_r+0x1856>
8000e58a:	40 8a       	lddsp	r10,sp[0x20]
8000e58c:	40 39       	lddsp	r9,sp[0xc]
8000e58e:	12 1a       	sub	r10,r9
8000e590:	50 4a       	stdsp	sp[0x10],r10
8000e592:	58 0a       	cp.w	r10,0
8000e594:	e0 89 00 23 	brgt	8000e5da <_vfprintf_r+0x1816>
8000e598:	c4 18       	rjmp	8000e61a <_vfprintf_r+0x1856>
8000e59a:	2f 09       	sub	r9,-16
8000e59c:	2f f8       	sub	r8,-1
8000e59e:	48 8e       	lddpc	lr,8000e5bc <_vfprintf_r+0x17f8>
8000e5a0:	31 0c       	mov	r12,16
8000e5a2:	fb 49 06 90 	st.w	sp[1680],r9
8000e5a6:	89 0e       	st.w	r4[0x0],lr
8000e5a8:	89 1c       	st.w	r4[0x4],r12
8000e5aa:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5ae:	58 78       	cp.w	r8,7
8000e5b0:	e0 89 00 08 	brgt	8000e5c0 <_vfprintf_r+0x17fc>
8000e5b4:	2f 84       	sub	r4,-8
8000e5b6:	c0 f8       	rjmp	8000e5d4 <_vfprintf_r+0x1810>
8000e5b8:	80 01       	ld.sh	r1,r0[0x0]
8000e5ba:	3d 80       	mov	r0,-40
8000e5bc:	80 01       	ld.sh	r1,r0[0x0]
8000e5be:	3d 90       	mov	r0,-39
8000e5c0:	fa ca f9 78 	sub	r10,sp,-1672
8000e5c4:	02 9b       	mov	r11,r1
8000e5c6:	0a 9c       	mov	r12,r5
8000e5c8:	fe b0 f3 f0 	rcall	8000cda8 <__sprint_r>
8000e5cc:	e0 81 03 80 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e5d0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e5d4:	40 4b       	lddsp	r11,sp[0x10]
8000e5d6:	21 0b       	sub	r11,16
8000e5d8:	50 4b       	stdsp	sp[0x10],r11
8000e5da:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e5de:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e5e2:	4c 6a       	lddpc	r10,8000e6f8 <_vfprintf_r+0x1934>
8000e5e4:	40 4e       	lddsp	lr,sp[0x10]
8000e5e6:	59 0e       	cp.w	lr,16
8000e5e8:	fe 99 ff d9 	brgt	8000e59a <_vfprintf_r+0x17d6>
8000e5ec:	1c 09       	add	r9,lr
8000e5ee:	2f f8       	sub	r8,-1
8000e5f0:	89 0a       	st.w	r4[0x0],r10
8000e5f2:	fb 49 06 90 	st.w	sp[1680],r9
8000e5f6:	89 1e       	st.w	r4[0x4],lr
8000e5f8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5fc:	58 78       	cp.w	r8,7
8000e5fe:	e0 89 00 04 	brgt	8000e606 <_vfprintf_r+0x1842>
8000e602:	2f 84       	sub	r4,-8
8000e604:	c0 b8       	rjmp	8000e61a <_vfprintf_r+0x1856>
8000e606:	fa ca f9 78 	sub	r10,sp,-1672
8000e60a:	02 9b       	mov	r11,r1
8000e60c:	0a 9c       	mov	r12,r5
8000e60e:	fe b0 f3 cd 	rcall	8000cda8 <__sprint_r>
8000e612:	e0 81 03 5d 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e616:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e61a:	40 2c       	lddsp	r12,sp[0x8]
8000e61c:	04 1c       	sub	r12,r2
8000e61e:	50 2c       	stdsp	sp[0x8],r12
8000e620:	58 0c       	cp.w	r12,0
8000e622:	e0 89 00 1f 	brgt	8000e660 <_vfprintf_r+0x189c>
8000e626:	c3 d8       	rjmp	8000e6a0 <_vfprintf_r+0x18dc>
8000e628:	2f 09       	sub	r9,-16
8000e62a:	2f f8       	sub	r8,-1
8000e62c:	4b 3b       	lddpc	r11,8000e6f8 <_vfprintf_r+0x1934>
8000e62e:	31 0a       	mov	r10,16
8000e630:	fb 49 06 90 	st.w	sp[1680],r9
8000e634:	89 0b       	st.w	r4[0x0],r11
8000e636:	89 1a       	st.w	r4[0x4],r10
8000e638:	fb 48 06 8c 	st.w	sp[1676],r8
8000e63c:	58 78       	cp.w	r8,7
8000e63e:	e0 89 00 04 	brgt	8000e646 <_vfprintf_r+0x1882>
8000e642:	2f 84       	sub	r4,-8
8000e644:	c0 b8       	rjmp	8000e65a <_vfprintf_r+0x1896>
8000e646:	fa ca f9 78 	sub	r10,sp,-1672
8000e64a:	02 9b       	mov	r11,r1
8000e64c:	0a 9c       	mov	r12,r5
8000e64e:	fe b0 f3 ad 	rcall	8000cda8 <__sprint_r>
8000e652:	e0 81 03 3d 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e656:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e65a:	40 29       	lddsp	r9,sp[0x8]
8000e65c:	21 09       	sub	r9,16
8000e65e:	50 29       	stdsp	sp[0x8],r9
8000e660:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e664:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e668:	4a 4a       	lddpc	r10,8000e6f8 <_vfprintf_r+0x1934>
8000e66a:	40 2e       	lddsp	lr,sp[0x8]
8000e66c:	59 0e       	cp.w	lr,16
8000e66e:	fe 99 ff dd 	brgt	8000e628 <_vfprintf_r+0x1864>
8000e672:	1c 09       	add	r9,lr
8000e674:	2f f8       	sub	r8,-1
8000e676:	89 0a       	st.w	r4[0x0],r10
8000e678:	fb 49 06 90 	st.w	sp[1680],r9
8000e67c:	89 1e       	st.w	r4[0x4],lr
8000e67e:	fb 48 06 8c 	st.w	sp[1676],r8
8000e682:	58 78       	cp.w	r8,7
8000e684:	e0 89 00 04 	brgt	8000e68c <_vfprintf_r+0x18c8>
8000e688:	2f 84       	sub	r4,-8
8000e68a:	c0 b8       	rjmp	8000e6a0 <_vfprintf_r+0x18dc>
8000e68c:	fa ca f9 78 	sub	r10,sp,-1672
8000e690:	02 9b       	mov	r11,r1
8000e692:	0a 9c       	mov	r12,r5
8000e694:	fe b0 f3 8a 	rcall	8000cda8 <__sprint_r>
8000e698:	e0 81 03 1a 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e69c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e6a0:	ed b3 00 08 	bld	r3,0x8
8000e6a4:	c0 b0       	breq	8000e6ba <_vfprintf_r+0x18f6>
8000e6a6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e6aa:	89 12       	st.w	r4[0x4],r2
8000e6ac:	89 06       	st.w	r4[0x0],r6
8000e6ae:	f0 02 00 02 	add	r2,r8,r2
8000e6b2:	fb 42 06 90 	st.w	sp[1680],r2
8000e6b6:	e0 8f 01 d5 	bral	8000ea60 <_vfprintf_r+0x1c9c>
8000e6ba:	e0 40 00 65 	cp.w	r0,101
8000e6be:	e0 8a 01 d7 	brle	8000ea6c <_vfprintf_r+0x1ca8>
8000e6c2:	30 08       	mov	r8,0
8000e6c4:	30 09       	mov	r9,0
8000e6c6:	40 5b       	lddsp	r11,sp[0x14]
8000e6c8:	40 7a       	lddsp	r10,sp[0x1c]
8000e6ca:	e0 a0 19 00 	rcall	800118ca <__avr32_f64_cmp_eq>
8000e6ce:	c7 a0       	breq	8000e7c2 <_vfprintf_r+0x19fe>
8000e6d0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e6d4:	48 a9       	lddpc	r9,8000e6fc <_vfprintf_r+0x1938>
8000e6d6:	2f f8       	sub	r8,-1
8000e6d8:	89 09       	st.w	r4[0x0],r9
8000e6da:	fb 48 06 90 	st.w	sp[1680],r8
8000e6de:	30 19       	mov	r9,1
8000e6e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e6e4:	89 19       	st.w	r4[0x4],r9
8000e6e6:	2f f8       	sub	r8,-1
8000e6e8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e6ec:	58 78       	cp.w	r8,7
8000e6ee:	e0 89 00 09 	brgt	8000e700 <_vfprintf_r+0x193c>
8000e6f2:	2f 84       	sub	r4,-8
8000e6f4:	c1 08       	rjmp	8000e714 <_vfprintf_r+0x1950>
8000e6f6:	d7 03       	nop
8000e6f8:	80 01       	ld.sh	r1,r0[0x0]
8000e6fa:	3d 90       	mov	r0,-39
8000e6fc:	80 01       	ld.sh	r1,r0[0x0]
8000e6fe:	3d 7c       	mov	r12,-41
8000e700:	fa ca f9 78 	sub	r10,sp,-1672
8000e704:	02 9b       	mov	r11,r1
8000e706:	0a 9c       	mov	r12,r5
8000e708:	fe b0 f3 50 	rcall	8000cda8 <__sprint_r>
8000e70c:	e0 81 02 e0 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e710:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e714:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e718:	40 6c       	lddsp	r12,sp[0x18]
8000e71a:	18 38       	cp.w	r8,r12
8000e71c:	c0 55       	brlt	8000e726 <_vfprintf_r+0x1962>
8000e71e:	ed b3 00 00 	bld	r3,0x0
8000e722:	e0 81 02 69 	brne	8000ebf4 <_vfprintf_r+0x1e30>
8000e726:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e72a:	2f f8       	sub	r8,-1
8000e72c:	40 cb       	lddsp	r11,sp[0x30]
8000e72e:	fb 48 06 90 	st.w	sp[1680],r8
8000e732:	30 19       	mov	r9,1
8000e734:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e738:	89 0b       	st.w	r4[0x0],r11
8000e73a:	2f f8       	sub	r8,-1
8000e73c:	89 19       	st.w	r4[0x4],r9
8000e73e:	fb 48 06 8c 	st.w	sp[1676],r8
8000e742:	58 78       	cp.w	r8,7
8000e744:	e0 89 00 04 	brgt	8000e74c <_vfprintf_r+0x1988>
8000e748:	2f 84       	sub	r4,-8
8000e74a:	c0 b8       	rjmp	8000e760 <_vfprintf_r+0x199c>
8000e74c:	fa ca f9 78 	sub	r10,sp,-1672
8000e750:	02 9b       	mov	r11,r1
8000e752:	0a 9c       	mov	r12,r5
8000e754:	fe b0 f3 2a 	rcall	8000cda8 <__sprint_r>
8000e758:	e0 81 02 ba 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e75c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e760:	40 66       	lddsp	r6,sp[0x18]
8000e762:	20 16       	sub	r6,1
8000e764:	58 06       	cp.w	r6,0
8000e766:	e0 89 00 1d 	brgt	8000e7a0 <_vfprintf_r+0x19dc>
8000e76a:	e0 8f 02 45 	bral	8000ebf4 <_vfprintf_r+0x1e30>
8000e76e:	2f 09       	sub	r9,-16
8000e770:	2f f8       	sub	r8,-1
8000e772:	fb 49 06 90 	st.w	sp[1680],r9
8000e776:	89 02       	st.w	r4[0x0],r2
8000e778:	89 10       	st.w	r4[0x4],r0
8000e77a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e77e:	58 78       	cp.w	r8,7
8000e780:	e0 89 00 04 	brgt	8000e788 <_vfprintf_r+0x19c4>
8000e784:	2f 84       	sub	r4,-8
8000e786:	c0 b8       	rjmp	8000e79c <_vfprintf_r+0x19d8>
8000e788:	fa ca f9 78 	sub	r10,sp,-1672
8000e78c:	02 9b       	mov	r11,r1
8000e78e:	0a 9c       	mov	r12,r5
8000e790:	fe b0 f3 0c 	rcall	8000cda8 <__sprint_r>
8000e794:	e0 81 02 9c 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e798:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e79c:	21 06       	sub	r6,16
8000e79e:	c0 38       	rjmp	8000e7a4 <_vfprintf_r+0x19e0>
8000e7a0:	4d 22       	lddpc	r2,8000e8e8 <_vfprintf_r+0x1b24>
8000e7a2:	31 00       	mov	r0,16
8000e7a4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e7a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e7ac:	4c fa       	lddpc	r10,8000e8e8 <_vfprintf_r+0x1b24>
8000e7ae:	59 06       	cp.w	r6,16
8000e7b0:	fe 99 ff df 	brgt	8000e76e <_vfprintf_r+0x19aa>
8000e7b4:	0c 09       	add	r9,r6
8000e7b6:	89 0a       	st.w	r4[0x0],r10
8000e7b8:	fb 49 06 90 	st.w	sp[1680],r9
8000e7bc:	2f f8       	sub	r8,-1
8000e7be:	89 16       	st.w	r4[0x4],r6
8000e7c0:	c5 39       	rjmp	8000ea66 <_vfprintf_r+0x1ca2>
8000e7c2:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000e7c6:	58 0a       	cp.w	r10,0
8000e7c8:	e0 89 00 94 	brgt	8000e8f0 <_vfprintf_r+0x1b2c>
8000e7cc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e7d0:	4c 79       	lddpc	r9,8000e8ec <_vfprintf_r+0x1b28>
8000e7d2:	2f f8       	sub	r8,-1
8000e7d4:	89 09       	st.w	r4[0x0],r9
8000e7d6:	fb 48 06 90 	st.w	sp[1680],r8
8000e7da:	30 19       	mov	r9,1
8000e7dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e7e0:	89 19       	st.w	r4[0x4],r9
8000e7e2:	2f f8       	sub	r8,-1
8000e7e4:	fb 48 06 8c 	st.w	sp[1676],r8
8000e7e8:	58 78       	cp.w	r8,7
8000e7ea:	e0 89 00 04 	brgt	8000e7f2 <_vfprintf_r+0x1a2e>
8000e7ee:	2f 84       	sub	r4,-8
8000e7f0:	c0 b8       	rjmp	8000e806 <_vfprintf_r+0x1a42>
8000e7f2:	fa ca f9 78 	sub	r10,sp,-1672
8000e7f6:	02 9b       	mov	r11,r1
8000e7f8:	0a 9c       	mov	r12,r5
8000e7fa:	fe b0 f2 d7 	rcall	8000cda8 <__sprint_r>
8000e7fe:	e0 81 02 67 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e802:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e806:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e80a:	58 08       	cp.w	r8,0
8000e80c:	c0 81       	brne	8000e81c <_vfprintf_r+0x1a58>
8000e80e:	40 6a       	lddsp	r10,sp[0x18]
8000e810:	58 0a       	cp.w	r10,0
8000e812:	c0 51       	brne	8000e81c <_vfprintf_r+0x1a58>
8000e814:	ed b3 00 00 	bld	r3,0x0
8000e818:	e0 81 01 ee 	brne	8000ebf4 <_vfprintf_r+0x1e30>
8000e81c:	40 c9       	lddsp	r9,sp[0x30]
8000e81e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e822:	2f f8       	sub	r8,-1
8000e824:	89 09       	st.w	r4[0x0],r9
8000e826:	fb 48 06 90 	st.w	sp[1680],r8
8000e82a:	30 19       	mov	r9,1
8000e82c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e830:	89 19       	st.w	r4[0x4],r9
8000e832:	2f f8       	sub	r8,-1
8000e834:	fb 48 06 8c 	st.w	sp[1676],r8
8000e838:	58 78       	cp.w	r8,7
8000e83a:	e0 89 00 04 	brgt	8000e842 <_vfprintf_r+0x1a7e>
8000e83e:	2f 84       	sub	r4,-8
8000e840:	c0 b8       	rjmp	8000e856 <_vfprintf_r+0x1a92>
8000e842:	fa ca f9 78 	sub	r10,sp,-1672
8000e846:	02 9b       	mov	r11,r1
8000e848:	0a 9c       	mov	r12,r5
8000e84a:	fe b0 f2 af 	rcall	8000cda8 <__sprint_r>
8000e84e:	e0 81 02 3f 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e852:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e856:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000e85a:	5c 32       	neg	r2
8000e85c:	58 02       	cp.w	r2,0
8000e85e:	e0 89 00 1d 	brgt	8000e898 <_vfprintf_r+0x1ad4>
8000e862:	c3 b8       	rjmp	8000e8d8 <_vfprintf_r+0x1b14>
8000e864:	2f 09       	sub	r9,-16
8000e866:	2f f8       	sub	r8,-1
8000e868:	31 0e       	mov	lr,16
8000e86a:	fb 49 06 90 	st.w	sp[1680],r9
8000e86e:	89 00       	st.w	r4[0x0],r0
8000e870:	89 1e       	st.w	r4[0x4],lr
8000e872:	fb 48 06 8c 	st.w	sp[1676],r8
8000e876:	58 78       	cp.w	r8,7
8000e878:	e0 89 00 04 	brgt	8000e880 <_vfprintf_r+0x1abc>
8000e87c:	2f 84       	sub	r4,-8
8000e87e:	c0 b8       	rjmp	8000e894 <_vfprintf_r+0x1ad0>
8000e880:	fa ca f9 78 	sub	r10,sp,-1672
8000e884:	02 9b       	mov	r11,r1
8000e886:	0a 9c       	mov	r12,r5
8000e888:	fe b0 f2 90 	rcall	8000cda8 <__sprint_r>
8000e88c:	e0 81 02 20 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e890:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e894:	21 02       	sub	r2,16
8000e896:	c0 28       	rjmp	8000e89a <_vfprintf_r+0x1ad6>
8000e898:	49 40       	lddpc	r0,8000e8e8 <_vfprintf_r+0x1b24>
8000e89a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e89e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e8a2:	49 2a       	lddpc	r10,8000e8e8 <_vfprintf_r+0x1b24>
8000e8a4:	59 02       	cp.w	r2,16
8000e8a6:	fe 99 ff df 	brgt	8000e864 <_vfprintf_r+0x1aa0>
8000e8aa:	04 09       	add	r9,r2
8000e8ac:	2f f8       	sub	r8,-1
8000e8ae:	89 0a       	st.w	r4[0x0],r10
8000e8b0:	fb 49 06 90 	st.w	sp[1680],r9
8000e8b4:	89 12       	st.w	r4[0x4],r2
8000e8b6:	fb 48 06 8c 	st.w	sp[1676],r8
8000e8ba:	58 78       	cp.w	r8,7
8000e8bc:	e0 89 00 04 	brgt	8000e8c4 <_vfprintf_r+0x1b00>
8000e8c0:	2f 84       	sub	r4,-8
8000e8c2:	c0 b8       	rjmp	8000e8d8 <_vfprintf_r+0x1b14>
8000e8c4:	fa ca f9 78 	sub	r10,sp,-1672
8000e8c8:	02 9b       	mov	r11,r1
8000e8ca:	0a 9c       	mov	r12,r5
8000e8cc:	fe b0 f2 6e 	rcall	8000cda8 <__sprint_r>
8000e8d0:	e0 81 01 fe 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e8d4:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e8d8:	40 6c       	lddsp	r12,sp[0x18]
8000e8da:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e8de:	89 06       	st.w	r4[0x0],r6
8000e8e0:	89 1c       	st.w	r4[0x4],r12
8000e8e2:	18 08       	add	r8,r12
8000e8e4:	cb c8       	rjmp	8000ea5c <_vfprintf_r+0x1c98>
8000e8e6:	d7 03       	nop
8000e8e8:	80 01       	ld.sh	r1,r0[0x0]
8000e8ea:	3d 90       	mov	r0,-39
8000e8ec:	80 01       	ld.sh	r1,r0[0x0]
8000e8ee:	3d 7c       	mov	r12,-41
8000e8f0:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e8f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e8f8:	40 6b       	lddsp	r11,sp[0x18]
8000e8fa:	16 3a       	cp.w	r10,r11
8000e8fc:	c6 d5       	brlt	8000e9d6 <_vfprintf_r+0x1c12>
8000e8fe:	16 09       	add	r9,r11
8000e900:	2f f8       	sub	r8,-1
8000e902:	89 06       	st.w	r4[0x0],r6
8000e904:	fb 49 06 90 	st.w	sp[1680],r9
8000e908:	89 1b       	st.w	r4[0x4],r11
8000e90a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e90e:	58 78       	cp.w	r8,7
8000e910:	e0 89 00 04 	brgt	8000e918 <_vfprintf_r+0x1b54>
8000e914:	2f 84       	sub	r4,-8
8000e916:	c0 b8       	rjmp	8000e92c <_vfprintf_r+0x1b68>
8000e918:	fa ca f9 78 	sub	r10,sp,-1672
8000e91c:	02 9b       	mov	r11,r1
8000e91e:	0a 9c       	mov	r12,r5
8000e920:	fe b0 f2 44 	rcall	8000cda8 <__sprint_r>
8000e924:	e0 81 01 d4 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e928:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e92c:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000e930:	40 6a       	lddsp	r10,sp[0x18]
8000e932:	14 16       	sub	r6,r10
8000e934:	58 06       	cp.w	r6,0
8000e936:	e0 89 00 1c 	brgt	8000e96e <_vfprintf_r+0x1baa>
8000e93a:	c3 b8       	rjmp	8000e9b0 <_vfprintf_r+0x1bec>
8000e93c:	2f 09       	sub	r9,-16
8000e93e:	2f f8       	sub	r8,-1
8000e940:	fb 49 06 90 	st.w	sp[1680],r9
8000e944:	89 02       	st.w	r4[0x0],r2
8000e946:	89 10       	st.w	r4[0x4],r0
8000e948:	fb 48 06 8c 	st.w	sp[1676],r8
8000e94c:	58 78       	cp.w	r8,7
8000e94e:	e0 89 00 04 	brgt	8000e956 <_vfprintf_r+0x1b92>
8000e952:	2f 84       	sub	r4,-8
8000e954:	c0 b8       	rjmp	8000e96a <_vfprintf_r+0x1ba6>
8000e956:	fa ca f9 78 	sub	r10,sp,-1672
8000e95a:	02 9b       	mov	r11,r1
8000e95c:	0a 9c       	mov	r12,r5
8000e95e:	fe b0 f2 25 	rcall	8000cda8 <__sprint_r>
8000e962:	e0 81 01 b5 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e966:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e96a:	21 06       	sub	r6,16
8000e96c:	c0 38       	rjmp	8000e972 <_vfprintf_r+0x1bae>
8000e96e:	4d c2       	lddpc	r2,8000eadc <_vfprintf_r+0x1d18>
8000e970:	31 00       	mov	r0,16
8000e972:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e976:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e97a:	4d 9a       	lddpc	r10,8000eadc <_vfprintf_r+0x1d18>
8000e97c:	59 06       	cp.w	r6,16
8000e97e:	fe 99 ff df 	brgt	8000e93c <_vfprintf_r+0x1b78>
8000e982:	0c 09       	add	r9,r6
8000e984:	2f f8       	sub	r8,-1
8000e986:	89 0a       	st.w	r4[0x0],r10
8000e988:	fb 49 06 90 	st.w	sp[1680],r9
8000e98c:	89 16       	st.w	r4[0x4],r6
8000e98e:	fb 48 06 8c 	st.w	sp[1676],r8
8000e992:	58 78       	cp.w	r8,7
8000e994:	e0 89 00 04 	brgt	8000e99c <_vfprintf_r+0x1bd8>
8000e998:	2f 84       	sub	r4,-8
8000e99a:	c0 b8       	rjmp	8000e9b0 <_vfprintf_r+0x1bec>
8000e99c:	fa ca f9 78 	sub	r10,sp,-1672
8000e9a0:	02 9b       	mov	r11,r1
8000e9a2:	0a 9c       	mov	r12,r5
8000e9a4:	fe b0 f2 02 	rcall	8000cda8 <__sprint_r>
8000e9a8:	e0 81 01 92 	brne	8000eccc <_vfprintf_r+0x1f08>
8000e9ac:	fa c4 f9 e0 	sub	r4,sp,-1568
8000e9b0:	ed b3 00 00 	bld	r3,0x0
8000e9b4:	e0 81 01 20 	brne	8000ebf4 <_vfprintf_r+0x1e30>
8000e9b8:	40 c9       	lddsp	r9,sp[0x30]
8000e9ba:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e9be:	2f f8       	sub	r8,-1
8000e9c0:	89 09       	st.w	r4[0x0],r9
8000e9c2:	fb 48 06 90 	st.w	sp[1680],r8
8000e9c6:	30 19       	mov	r9,1
8000e9c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e9cc:	89 19       	st.w	r4[0x4],r9
8000e9ce:	2f f8       	sub	r8,-1
8000e9d0:	fb 48 06 8c 	st.w	sp[1676],r8
8000e9d4:	c0 29       	rjmp	8000ebd8 <_vfprintf_r+0x1e14>
8000e9d6:	14 09       	add	r9,r10
8000e9d8:	2f f8       	sub	r8,-1
8000e9da:	fb 49 06 90 	st.w	sp[1680],r9
8000e9de:	89 06       	st.w	r4[0x0],r6
8000e9e0:	89 1a       	st.w	r4[0x4],r10
8000e9e2:	fb 48 06 8c 	st.w	sp[1676],r8
8000e9e6:	58 78       	cp.w	r8,7
8000e9e8:	e0 89 00 04 	brgt	8000e9f0 <_vfprintf_r+0x1c2c>
8000e9ec:	2f 84       	sub	r4,-8
8000e9ee:	c0 b8       	rjmp	8000ea04 <_vfprintf_r+0x1c40>
8000e9f0:	fa ca f9 78 	sub	r10,sp,-1672
8000e9f4:	02 9b       	mov	r11,r1
8000e9f6:	0a 9c       	mov	r12,r5
8000e9f8:	fe b0 f1 d8 	rcall	8000cda8 <__sprint_r>
8000e9fc:	e0 81 01 68 	brne	8000eccc <_vfprintf_r+0x1f08>
8000ea00:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ea04:	40 c8       	lddsp	r8,sp[0x30]
8000ea06:	89 08       	st.w	r4[0x0],r8
8000ea08:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ea0c:	2f f8       	sub	r8,-1
8000ea0e:	30 19       	mov	r9,1
8000ea10:	fb 48 06 90 	st.w	sp[1680],r8
8000ea14:	89 19       	st.w	r4[0x4],r9
8000ea16:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea1a:	2f f8       	sub	r8,-1
8000ea1c:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea20:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000ea24:	58 78       	cp.w	r8,7
8000ea26:	e0 89 00 04 	brgt	8000ea2e <_vfprintf_r+0x1c6a>
8000ea2a:	2f 84       	sub	r4,-8
8000ea2c:	c0 b8       	rjmp	8000ea42 <_vfprintf_r+0x1c7e>
8000ea2e:	fa ca f9 78 	sub	r10,sp,-1672
8000ea32:	02 9b       	mov	r11,r1
8000ea34:	0a 9c       	mov	r12,r5
8000ea36:	fe b0 f1 b9 	rcall	8000cda8 <__sprint_r>
8000ea3a:	e0 81 01 49 	brne	8000eccc <_vfprintf_r+0x1f08>
8000ea3e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ea42:	04 06       	add	r6,r2
8000ea44:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ea48:	89 06       	st.w	r4[0x0],r6
8000ea4a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ea4e:	40 66       	lddsp	r6,sp[0x18]
8000ea50:	40 6e       	lddsp	lr,sp[0x18]
8000ea52:	10 16       	sub	r6,r8
8000ea54:	f2 08 01 08 	sub	r8,r9,r8
8000ea58:	89 16       	st.w	r4[0x4],r6
8000ea5a:	1c 08       	add	r8,lr
8000ea5c:	fb 48 06 90 	st.w	sp[1680],r8
8000ea60:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea64:	2f f8       	sub	r8,-1
8000ea66:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea6a:	cb 78       	rjmp	8000ebd8 <_vfprintf_r+0x1e14>
8000ea6c:	40 6c       	lddsp	r12,sp[0x18]
8000ea6e:	58 1c       	cp.w	r12,1
8000ea70:	e0 89 00 06 	brgt	8000ea7c <_vfprintf_r+0x1cb8>
8000ea74:	ed b3 00 00 	bld	r3,0x0
8000ea78:	e0 81 00 85 	brne	8000eb82 <_vfprintf_r+0x1dbe>
8000ea7c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ea80:	2f f8       	sub	r8,-1
8000ea82:	30 19       	mov	r9,1
8000ea84:	fb 48 06 90 	st.w	sp[1680],r8
8000ea88:	89 06       	st.w	r4[0x0],r6
8000ea8a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea8e:	89 19       	st.w	r4[0x4],r9
8000ea90:	2f f8       	sub	r8,-1
8000ea92:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea96:	58 78       	cp.w	r8,7
8000ea98:	e0 89 00 04 	brgt	8000eaa0 <_vfprintf_r+0x1cdc>
8000ea9c:	2f 84       	sub	r4,-8
8000ea9e:	c0 b8       	rjmp	8000eab4 <_vfprintf_r+0x1cf0>
8000eaa0:	fa ca f9 78 	sub	r10,sp,-1672
8000eaa4:	02 9b       	mov	r11,r1
8000eaa6:	0a 9c       	mov	r12,r5
8000eaa8:	fe b0 f1 80 	rcall	8000cda8 <__sprint_r>
8000eaac:	e0 81 01 10 	brne	8000eccc <_vfprintf_r+0x1f08>
8000eab0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000eab4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eab8:	2f f8       	sub	r8,-1
8000eaba:	40 cb       	lddsp	r11,sp[0x30]
8000eabc:	fb 48 06 90 	st.w	sp[1680],r8
8000eac0:	30 19       	mov	r9,1
8000eac2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eac6:	89 0b       	st.w	r4[0x0],r11
8000eac8:	2f f8       	sub	r8,-1
8000eaca:	89 19       	st.w	r4[0x4],r9
8000eacc:	fb 48 06 8c 	st.w	sp[1676],r8
8000ead0:	58 78       	cp.w	r8,7
8000ead2:	e0 89 00 07 	brgt	8000eae0 <_vfprintf_r+0x1d1c>
8000ead6:	2f 84       	sub	r4,-8
8000ead8:	c0 e8       	rjmp	8000eaf4 <_vfprintf_r+0x1d30>
8000eada:	d7 03       	nop
8000eadc:	80 01       	ld.sh	r1,r0[0x0]
8000eade:	3d 90       	mov	r0,-39
8000eae0:	fa ca f9 78 	sub	r10,sp,-1672
8000eae4:	02 9b       	mov	r11,r1
8000eae6:	0a 9c       	mov	r12,r5
8000eae8:	fe b0 f1 60 	rcall	8000cda8 <__sprint_r>
8000eaec:	e0 81 00 f0 	brne	8000eccc <_vfprintf_r+0x1f08>
8000eaf0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000eaf4:	30 08       	mov	r8,0
8000eaf6:	30 09       	mov	r9,0
8000eaf8:	40 5b       	lddsp	r11,sp[0x14]
8000eafa:	40 7a       	lddsp	r10,sp[0x1c]
8000eafc:	e0 a0 16 e7 	rcall	800118ca <__avr32_f64_cmp_eq>
8000eb00:	40 68       	lddsp	r8,sp[0x18]
8000eb02:	20 18       	sub	r8,1
8000eb04:	58 0c       	cp.w	r12,0
8000eb06:	c0 d1       	brne	8000eb20 <_vfprintf_r+0x1d5c>
8000eb08:	2f f6       	sub	r6,-1
8000eb0a:	89 18       	st.w	r4[0x4],r8
8000eb0c:	89 06       	st.w	r4[0x0],r6
8000eb0e:	fa f6 06 90 	ld.w	r6,sp[1680]
8000eb12:	10 06       	add	r6,r8
8000eb14:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eb18:	fb 46 06 90 	st.w	sp[1680],r6
8000eb1c:	2f f8       	sub	r8,-1
8000eb1e:	c2 f8       	rjmp	8000eb7c <_vfprintf_r+0x1db8>
8000eb20:	10 96       	mov	r6,r8
8000eb22:	58 08       	cp.w	r8,0
8000eb24:	e0 89 00 1c 	brgt	8000eb5c <_vfprintf_r+0x1d98>
8000eb28:	c4 98       	rjmp	8000ebba <_vfprintf_r+0x1df6>
8000eb2a:	2f 09       	sub	r9,-16
8000eb2c:	2f f8       	sub	r8,-1
8000eb2e:	fb 49 06 90 	st.w	sp[1680],r9
8000eb32:	89 02       	st.w	r4[0x0],r2
8000eb34:	89 10       	st.w	r4[0x4],r0
8000eb36:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb3a:	58 78       	cp.w	r8,7
8000eb3c:	e0 89 00 04 	brgt	8000eb44 <_vfprintf_r+0x1d80>
8000eb40:	2f 84       	sub	r4,-8
8000eb42:	c0 b8       	rjmp	8000eb58 <_vfprintf_r+0x1d94>
8000eb44:	fa ca f9 78 	sub	r10,sp,-1672
8000eb48:	02 9b       	mov	r11,r1
8000eb4a:	0a 9c       	mov	r12,r5
8000eb4c:	fe b0 f1 2e 	rcall	8000cda8 <__sprint_r>
8000eb50:	e0 81 00 be 	brne	8000eccc <_vfprintf_r+0x1f08>
8000eb54:	fa c4 f9 e0 	sub	r4,sp,-1568
8000eb58:	21 06       	sub	r6,16
8000eb5a:	c0 38       	rjmp	8000eb60 <_vfprintf_r+0x1d9c>
8000eb5c:	4d 22       	lddpc	r2,8000eca4 <_vfprintf_r+0x1ee0>
8000eb5e:	31 00       	mov	r0,16
8000eb60:	fa f9 06 90 	ld.w	r9,sp[1680]
8000eb64:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eb68:	4c fa       	lddpc	r10,8000eca4 <_vfprintf_r+0x1ee0>
8000eb6a:	59 06       	cp.w	r6,16
8000eb6c:	fe 99 ff df 	brgt	8000eb2a <_vfprintf_r+0x1d66>
8000eb70:	0c 09       	add	r9,r6
8000eb72:	89 0a       	st.w	r4[0x0],r10
8000eb74:	fb 49 06 90 	st.w	sp[1680],r9
8000eb78:	2f f8       	sub	r8,-1
8000eb7a:	89 16       	st.w	r4[0x4],r6
8000eb7c:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb80:	c0 e8       	rjmp	8000eb9c <_vfprintf_r+0x1dd8>
8000eb82:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eb86:	2f f8       	sub	r8,-1
8000eb88:	30 19       	mov	r9,1
8000eb8a:	fb 48 06 90 	st.w	sp[1680],r8
8000eb8e:	89 06       	st.w	r4[0x0],r6
8000eb90:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eb94:	89 19       	st.w	r4[0x4],r9
8000eb96:	2f f8       	sub	r8,-1
8000eb98:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb9c:	58 78       	cp.w	r8,7
8000eb9e:	e0 89 00 04 	brgt	8000eba6 <_vfprintf_r+0x1de2>
8000eba2:	2f 84       	sub	r4,-8
8000eba4:	c0 b8       	rjmp	8000ebba <_vfprintf_r+0x1df6>
8000eba6:	fa ca f9 78 	sub	r10,sp,-1672
8000ebaa:	02 9b       	mov	r11,r1
8000ebac:	0a 9c       	mov	r12,r5
8000ebae:	fe b0 f0 fd 	rcall	8000cda8 <__sprint_r>
8000ebb2:	e0 81 00 8d 	brne	8000eccc <_vfprintf_r+0x1f08>
8000ebb6:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ebba:	40 ea       	lddsp	r10,sp[0x38]
8000ebbc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ebc0:	14 08       	add	r8,r10
8000ebc2:	fa c9 f9 64 	sub	r9,sp,-1692
8000ebc6:	fb 48 06 90 	st.w	sp[1680],r8
8000ebca:	89 1a       	st.w	r4[0x4],r10
8000ebcc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ebd0:	89 09       	st.w	r4[0x0],r9
8000ebd2:	2f f8       	sub	r8,-1
8000ebd4:	fb 48 06 8c 	st.w	sp[1676],r8
8000ebd8:	58 78       	cp.w	r8,7
8000ebda:	e0 89 00 04 	brgt	8000ebe2 <_vfprintf_r+0x1e1e>
8000ebde:	2f 84       	sub	r4,-8
8000ebe0:	c0 a8       	rjmp	8000ebf4 <_vfprintf_r+0x1e30>
8000ebe2:	fa ca f9 78 	sub	r10,sp,-1672
8000ebe6:	02 9b       	mov	r11,r1
8000ebe8:	0a 9c       	mov	r12,r5
8000ebea:	fe b0 f0 df 	rcall	8000cda8 <__sprint_r>
8000ebee:	c6 f1       	brne	8000eccc <_vfprintf_r+0x1f08>
8000ebf0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ebf4:	e2 13 00 04 	andl	r3,0x4,COH
8000ebf8:	c3 d0       	breq	8000ec72 <_vfprintf_r+0x1eae>
8000ebfa:	40 86       	lddsp	r6,sp[0x20]
8000ebfc:	40 39       	lddsp	r9,sp[0xc]
8000ebfe:	12 16       	sub	r6,r9
8000ec00:	58 06       	cp.w	r6,0
8000ec02:	e0 89 00 1a 	brgt	8000ec36 <_vfprintf_r+0x1e72>
8000ec06:	c3 68       	rjmp	8000ec72 <_vfprintf_r+0x1eae>
8000ec08:	2f 09       	sub	r9,-16
8000ec0a:	2f f8       	sub	r8,-1
8000ec0c:	fb 49 06 90 	st.w	sp[1680],r9
8000ec10:	89 03       	st.w	r4[0x0],r3
8000ec12:	89 12       	st.w	r4[0x4],r2
8000ec14:	fb 48 06 8c 	st.w	sp[1676],r8
8000ec18:	58 78       	cp.w	r8,7
8000ec1a:	e0 89 00 04 	brgt	8000ec22 <_vfprintf_r+0x1e5e>
8000ec1e:	2f 84       	sub	r4,-8
8000ec20:	c0 98       	rjmp	8000ec32 <_vfprintf_r+0x1e6e>
8000ec22:	00 9a       	mov	r10,r0
8000ec24:	02 9b       	mov	r11,r1
8000ec26:	0a 9c       	mov	r12,r5
8000ec28:	fe b0 f0 c0 	rcall	8000cda8 <__sprint_r>
8000ec2c:	c5 01       	brne	8000eccc <_vfprintf_r+0x1f08>
8000ec2e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ec32:	21 06       	sub	r6,16
8000ec34:	c0 58       	rjmp	8000ec3e <_vfprintf_r+0x1e7a>
8000ec36:	49 d3       	lddpc	r3,8000eca8 <_vfprintf_r+0x1ee4>
8000ec38:	31 02       	mov	r2,16
8000ec3a:	fa c0 f9 78 	sub	r0,sp,-1672
8000ec3e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ec42:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ec46:	49 9a       	lddpc	r10,8000eca8 <_vfprintf_r+0x1ee4>
8000ec48:	59 06       	cp.w	r6,16
8000ec4a:	fe 99 ff df 	brgt	8000ec08 <_vfprintf_r+0x1e44>
8000ec4e:	0c 09       	add	r9,r6
8000ec50:	2f f8       	sub	r8,-1
8000ec52:	89 0a       	st.w	r4[0x0],r10
8000ec54:	89 16       	st.w	r4[0x4],r6
8000ec56:	fb 49 06 90 	st.w	sp[1680],r9
8000ec5a:	fb 48 06 8c 	st.w	sp[1676],r8
8000ec5e:	58 78       	cp.w	r8,7
8000ec60:	e0 8a 00 09 	brle	8000ec72 <_vfprintf_r+0x1eae>
8000ec64:	fa ca f9 78 	sub	r10,sp,-1672
8000ec68:	02 9b       	mov	r11,r1
8000ec6a:	0a 9c       	mov	r12,r5
8000ec6c:	fe b0 f0 9e 	rcall	8000cda8 <__sprint_r>
8000ec70:	c2 e1       	brne	8000eccc <_vfprintf_r+0x1f08>
8000ec72:	40 bc       	lddsp	r12,sp[0x2c]
8000ec74:	40 36       	lddsp	r6,sp[0xc]
8000ec76:	40 8e       	lddsp	lr,sp[0x20]
8000ec78:	ec 0e 0c 48 	max	r8,r6,lr
8000ec7c:	10 0c       	add	r12,r8
8000ec7e:	50 bc       	stdsp	sp[0x2c],r12
8000ec80:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ec84:	58 08       	cp.w	r8,0
8000ec86:	c0 80       	breq	8000ec96 <_vfprintf_r+0x1ed2>
8000ec88:	fa ca f9 78 	sub	r10,sp,-1672
8000ec8c:	02 9b       	mov	r11,r1
8000ec8e:	0a 9c       	mov	r12,r5
8000ec90:	fe b0 f0 8c 	rcall	8000cda8 <__sprint_r>
8000ec94:	c1 c1       	brne	8000eccc <_vfprintf_r+0x1f08>
8000ec96:	30 0b       	mov	r11,0
8000ec98:	fa c4 f9 e0 	sub	r4,sp,-1568
8000ec9c:	fb 4b 06 8c 	st.w	sp[1676],r11
8000eca0:	fe 9f f1 1c 	bral	8000ced8 <_vfprintf_r+0x114>
8000eca4:	80 01       	ld.sh	r1,r0[0x0]
8000eca6:	3d 90       	mov	r0,-39
8000eca8:	80 01       	ld.sh	r1,r0[0x0]
8000ecaa:	3d 80       	mov	r0,-40
8000ecac:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ecb0:	58 08       	cp.w	r8,0
8000ecb2:	c0 80       	breq	8000ecc2 <_vfprintf_r+0x1efe>
8000ecb4:	0a 9c       	mov	r12,r5
8000ecb6:	fa ca f9 78 	sub	r10,sp,-1672
8000ecba:	02 9b       	mov	r11,r1
8000ecbc:	fe b0 f0 76 	rcall	8000cda8 <__sprint_r>
8000ecc0:	c0 61       	brne	8000eccc <_vfprintf_r+0x1f08>
8000ecc2:	30 08       	mov	r8,0
8000ecc4:	fb 48 06 8c 	st.w	sp[1676],r8
8000ecc8:	c0 28       	rjmp	8000eccc <_vfprintf_r+0x1f08>
8000ecca:	40 41       	lddsp	r1,sp[0x10]
8000eccc:	82 68       	ld.sh	r8,r1[0xc]
8000ecce:	ed b8 00 06 	bld	r8,0x6
8000ecd2:	c0 31       	brne	8000ecd8 <_vfprintf_r+0x1f14>
8000ecd4:	3f fa       	mov	r10,-1
8000ecd6:	50 ba       	stdsp	sp[0x2c],r10
8000ecd8:	40 bc       	lddsp	r12,sp[0x2c]
8000ecda:	fe 3d f9 44 	sub	sp,-1724
8000ecde:	d8 32       	popm	r0-r7,pc

8000ece0 <__swsetup_r>:
8000ece0:	d4 21       	pushm	r4-r7,lr
8000ece2:	4b 38       	lddpc	r8,8000edac <__swsetup_r+0xcc>
8000ece4:	18 96       	mov	r6,r12
8000ece6:	16 97       	mov	r7,r11
8000ece8:	70 0c       	ld.w	r12,r8[0x0]
8000ecea:	58 0c       	cp.w	r12,0
8000ecec:	c0 60       	breq	8000ecf8 <__swsetup_r+0x18>
8000ecee:	78 68       	ld.w	r8,r12[0x18]
8000ecf0:	58 08       	cp.w	r8,0
8000ecf2:	c0 31       	brne	8000ecf8 <__swsetup_r+0x18>
8000ecf4:	e0 a0 07 c0 	rcall	8000fc74 <__sinit>
8000ecf8:	4a e8       	lddpc	r8,8000edb0 <__swsetup_r+0xd0>
8000ecfa:	10 37       	cp.w	r7,r8
8000ecfc:	c0 51       	brne	8000ed06 <__swsetup_r+0x26>
8000ecfe:	4a c8       	lddpc	r8,8000edac <__swsetup_r+0xcc>
8000ed00:	70 08       	ld.w	r8,r8[0x0]
8000ed02:	70 07       	ld.w	r7,r8[0x0]
8000ed04:	c0 e8       	rjmp	8000ed20 <__swsetup_r+0x40>
8000ed06:	4a c8       	lddpc	r8,8000edb4 <__swsetup_r+0xd4>
8000ed08:	10 37       	cp.w	r7,r8
8000ed0a:	c0 51       	brne	8000ed14 <__swsetup_r+0x34>
8000ed0c:	4a 88       	lddpc	r8,8000edac <__swsetup_r+0xcc>
8000ed0e:	70 08       	ld.w	r8,r8[0x0]
8000ed10:	70 17       	ld.w	r7,r8[0x4]
8000ed12:	c0 78       	rjmp	8000ed20 <__swsetup_r+0x40>
8000ed14:	4a 98       	lddpc	r8,8000edb8 <__swsetup_r+0xd8>
8000ed16:	10 37       	cp.w	r7,r8
8000ed18:	c0 41       	brne	8000ed20 <__swsetup_r+0x40>
8000ed1a:	4a 58       	lddpc	r8,8000edac <__swsetup_r+0xcc>
8000ed1c:	70 08       	ld.w	r8,r8[0x0]
8000ed1e:	70 27       	ld.w	r7,r8[0x8]
8000ed20:	8e 68       	ld.sh	r8,r7[0xc]
8000ed22:	ed b8 00 03 	bld	r8,0x3
8000ed26:	c1 e0       	breq	8000ed62 <__swsetup_r+0x82>
8000ed28:	ed b8 00 04 	bld	r8,0x4
8000ed2c:	c3 e1       	brne	8000eda8 <__swsetup_r+0xc8>
8000ed2e:	ed b8 00 02 	bld	r8,0x2
8000ed32:	c1 51       	brne	8000ed5c <__swsetup_r+0x7c>
8000ed34:	6e db       	ld.w	r11,r7[0x34]
8000ed36:	58 0b       	cp.w	r11,0
8000ed38:	c0 a0       	breq	8000ed4c <__swsetup_r+0x6c>
8000ed3a:	ee c8 ff bc 	sub	r8,r7,-68
8000ed3e:	10 3b       	cp.w	r11,r8
8000ed40:	c0 40       	breq	8000ed48 <__swsetup_r+0x68>
8000ed42:	0c 9c       	mov	r12,r6
8000ed44:	e0 a0 08 34 	rcall	8000fdac <_free_r>
8000ed48:	30 08       	mov	r8,0
8000ed4a:	8f d8       	st.w	r7[0x34],r8
8000ed4c:	8e 68       	ld.sh	r8,r7[0xc]
8000ed4e:	e0 18 ff db 	andl	r8,0xffdb
8000ed52:	ae 68       	st.h	r7[0xc],r8
8000ed54:	30 08       	mov	r8,0
8000ed56:	8f 18       	st.w	r7[0x4],r8
8000ed58:	6e 48       	ld.w	r8,r7[0x10]
8000ed5a:	8f 08       	st.w	r7[0x0],r8
8000ed5c:	8e 68       	ld.sh	r8,r7[0xc]
8000ed5e:	a3 b8       	sbr	r8,0x3
8000ed60:	ae 68       	st.h	r7[0xc],r8
8000ed62:	6e 48       	ld.w	r8,r7[0x10]
8000ed64:	58 08       	cp.w	r8,0
8000ed66:	c0 b1       	brne	8000ed7c <__swsetup_r+0x9c>
8000ed68:	8e 68       	ld.sh	r8,r7[0xc]
8000ed6a:	e2 18 02 80 	andl	r8,0x280,COH
8000ed6e:	e0 48 02 00 	cp.w	r8,512
8000ed72:	c0 50       	breq	8000ed7c <__swsetup_r+0x9c>
8000ed74:	0c 9c       	mov	r12,r6
8000ed76:	0e 9b       	mov	r11,r7
8000ed78:	e0 a0 0a 5e 	rcall	80010234 <__smakebuf_r>
8000ed7c:	8e 69       	ld.sh	r9,r7[0xc]
8000ed7e:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000ed82:	c0 70       	breq	8000ed90 <__swsetup_r+0xb0>
8000ed84:	30 08       	mov	r8,0
8000ed86:	8f 28       	st.w	r7[0x8],r8
8000ed88:	6e 58       	ld.w	r8,r7[0x14]
8000ed8a:	5c 38       	neg	r8
8000ed8c:	8f 68       	st.w	r7[0x18],r8
8000ed8e:	c0 68       	rjmp	8000ed9a <__swsetup_r+0xba>
8000ed90:	ed b9 00 01 	bld	r9,0x1
8000ed94:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000ed98:	8f 28       	st.w	r7[0x8],r8
8000ed9a:	6e 48       	ld.w	r8,r7[0x10]
8000ed9c:	58 08       	cp.w	r8,0
8000ed9e:	c0 61       	brne	8000edaa <__swsetup_r+0xca>
8000eda0:	8e 68       	ld.sh	r8,r7[0xc]
8000eda2:	ed b8 00 07 	bld	r8,0x7
8000eda6:	c0 21       	brne	8000edaa <__swsetup_r+0xca>
8000eda8:	dc 2a       	popm	r4-r7,pc,r12=-1
8000edaa:	d8 2a       	popm	r4-r7,pc,r12=0
8000edac:	00 00       	add	r0,r0
8000edae:	0d 04       	ld.w	r4,r6++
8000edb0:	80 01       	ld.sh	r1,r0[0x0]
8000edb2:	3e b0       	mov	r0,-21
8000edb4:	80 01       	ld.sh	r1,r0[0x0]
8000edb6:	3e d0       	mov	r0,-19
8000edb8:	80 01       	ld.sh	r1,r0[0x0]
8000edba:	3e f0       	mov	r0,-17

8000edbc <quorem>:
8000edbc:	d4 31       	pushm	r0-r7,lr
8000edbe:	20 2d       	sub	sp,8
8000edc0:	18 97       	mov	r7,r12
8000edc2:	78 48       	ld.w	r8,r12[0x10]
8000edc4:	76 46       	ld.w	r6,r11[0x10]
8000edc6:	0c 38       	cp.w	r8,r6
8000edc8:	c0 34       	brge	8000edce <quorem+0x12>
8000edca:	30 0c       	mov	r12,0
8000edcc:	c8 58       	rjmp	8000eed6 <quorem+0x11a>
8000edce:	ec c2 ff fc 	sub	r2,r6,-4
8000edd2:	f6 c3 ff ec 	sub	r3,r11,-20
8000edd6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000edda:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000edde:	2f f9       	sub	r9,-1
8000ede0:	20 16       	sub	r6,1
8000ede2:	f8 09 0d 08 	divu	r8,r12,r9
8000ede6:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000edea:	ee c4 ff ec 	sub	r4,r7,-20
8000edee:	10 95       	mov	r5,r8
8000edf0:	58 08       	cp.w	r8,0
8000edf2:	c4 10       	breq	8000ee74 <quorem+0xb8>
8000edf4:	30 09       	mov	r9,0
8000edf6:	06 9a       	mov	r10,r3
8000edf8:	08 98       	mov	r8,r4
8000edfa:	12 91       	mov	r1,r9
8000edfc:	50 0b       	stdsp	sp[0x0],r11
8000edfe:	70 0e       	ld.w	lr,r8[0x0]
8000ee00:	b1 8e       	lsr	lr,0x10
8000ee02:	50 1e       	stdsp	sp[0x4],lr
8000ee04:	15 0e       	ld.w	lr,r10++
8000ee06:	fc 00 16 10 	lsr	r0,lr,0x10
8000ee0a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000ee0e:	ea 0e 03 41 	mac	r1,r5,lr
8000ee12:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000ee16:	b1 81       	lsr	r1,0x10
8000ee18:	40 1b       	lddsp	r11,sp[0x4]
8000ee1a:	ea 00 02 40 	mul	r0,r5,r0
8000ee1e:	e2 00 00 00 	add	r0,r1,r0
8000ee22:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000ee26:	02 1b       	sub	r11,r1
8000ee28:	50 1b       	stdsp	sp[0x4],r11
8000ee2a:	70 0b       	ld.w	r11,r8[0x0]
8000ee2c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000ee30:	02 09       	add	r9,r1
8000ee32:	f2 0e 01 0e 	sub	lr,r9,lr
8000ee36:	b0 1e       	st.h	r8[0x2],lr
8000ee38:	fc 09 14 10 	asr	r9,lr,0x10
8000ee3c:	40 1e       	lddsp	lr,sp[0x4]
8000ee3e:	fc 09 00 09 	add	r9,lr,r9
8000ee42:	b0 09       	st.h	r8[0x0],r9
8000ee44:	e0 01 16 10 	lsr	r1,r0,0x10
8000ee48:	2f c8       	sub	r8,-4
8000ee4a:	b1 49       	asr	r9,0x10
8000ee4c:	04 3a       	cp.w	r10,r2
8000ee4e:	fe 98 ff d8 	brls	8000edfe <quorem+0x42>
8000ee52:	40 0b       	lddsp	r11,sp[0x0]
8000ee54:	58 0c       	cp.w	r12,0
8000ee56:	c0 f1       	brne	8000ee74 <quorem+0xb8>
8000ee58:	ec c8 ff fb 	sub	r8,r6,-5
8000ee5c:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000ee60:	c0 28       	rjmp	8000ee64 <quorem+0xa8>
8000ee62:	20 16       	sub	r6,1
8000ee64:	20 48       	sub	r8,4
8000ee66:	08 38       	cp.w	r8,r4
8000ee68:	e0 88 00 05 	brls	8000ee72 <quorem+0xb6>
8000ee6c:	70 09       	ld.w	r9,r8[0x0]
8000ee6e:	58 09       	cp.w	r9,0
8000ee70:	cf 90       	breq	8000ee62 <quorem+0xa6>
8000ee72:	8f 46       	st.w	r7[0x10],r6
8000ee74:	0e 9c       	mov	r12,r7
8000ee76:	e0 a0 0c fe 	rcall	80010872 <__mcmp>
8000ee7a:	c2 d5       	brlt	8000eed4 <quorem+0x118>
8000ee7c:	2f f5       	sub	r5,-1
8000ee7e:	08 98       	mov	r8,r4
8000ee80:	30 09       	mov	r9,0
8000ee82:	07 0b       	ld.w	r11,r3++
8000ee84:	f6 0a 16 10 	lsr	r10,r11,0x10
8000ee88:	70 0c       	ld.w	r12,r8[0x0]
8000ee8a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ee8e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000ee92:	14 1e       	sub	lr,r10
8000ee94:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000ee98:	16 1a       	sub	r10,r11
8000ee9a:	12 0a       	add	r10,r9
8000ee9c:	b0 1a       	st.h	r8[0x2],r10
8000ee9e:	b1 4a       	asr	r10,0x10
8000eea0:	fc 0a 00 09 	add	r9,lr,r10
8000eea4:	b0 09       	st.h	r8[0x0],r9
8000eea6:	2f c8       	sub	r8,-4
8000eea8:	b1 49       	asr	r9,0x10
8000eeaa:	04 33       	cp.w	r3,r2
8000eeac:	fe 98 ff eb 	brls	8000ee82 <quorem+0xc6>
8000eeb0:	ec c8 ff fb 	sub	r8,r6,-5
8000eeb4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000eeb8:	58 09       	cp.w	r9,0
8000eeba:	c0 d1       	brne	8000eed4 <quorem+0x118>
8000eebc:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000eec0:	c0 28       	rjmp	8000eec4 <quorem+0x108>
8000eec2:	20 16       	sub	r6,1
8000eec4:	20 48       	sub	r8,4
8000eec6:	08 38       	cp.w	r8,r4
8000eec8:	e0 88 00 05 	brls	8000eed2 <quorem+0x116>
8000eecc:	70 09       	ld.w	r9,r8[0x0]
8000eece:	58 09       	cp.w	r9,0
8000eed0:	cf 90       	breq	8000eec2 <quorem+0x106>
8000eed2:	8f 46       	st.w	r7[0x10],r6
8000eed4:	0a 9c       	mov	r12,r5
8000eed6:	2f ed       	sub	sp,-8
8000eed8:	d8 32       	popm	r0-r7,pc
8000eeda:	d7 03       	nop

8000eedc <_dtoa_r>:
8000eedc:	d4 31       	pushm	r0-r7,lr
8000eede:	21 ad       	sub	sp,104
8000eee0:	fa c4 ff 74 	sub	r4,sp,-140
8000eee4:	18 97       	mov	r7,r12
8000eee6:	16 95       	mov	r5,r11
8000eee8:	68 2c       	ld.w	r12,r4[0x8]
8000eeea:	50 c9       	stdsp	sp[0x30],r9
8000eeec:	68 16       	ld.w	r6,r4[0x4]
8000eeee:	68 09       	ld.w	r9,r4[0x0]
8000eef0:	50 e8       	stdsp	sp[0x38],r8
8000eef2:	14 94       	mov	r4,r10
8000eef4:	51 2c       	stdsp	sp[0x48],r12
8000eef6:	fa e5 00 08 	st.d	sp[8],r4
8000eefa:	51 59       	stdsp	sp[0x54],r9
8000eefc:	6e 95       	ld.w	r5,r7[0x24]
8000eefe:	58 05       	cp.w	r5,0
8000ef00:	c0 91       	brne	8000ef12 <_dtoa_r+0x36>
8000ef02:	31 0c       	mov	r12,16
8000ef04:	fe b0 d1 a6 	rcall	80009250 <malloc>
8000ef08:	99 35       	st.w	r12[0xc],r5
8000ef0a:	8f 9c       	st.w	r7[0x24],r12
8000ef0c:	99 15       	st.w	r12[0x4],r5
8000ef0e:	99 25       	st.w	r12[0x8],r5
8000ef10:	99 05       	st.w	r12[0x0],r5
8000ef12:	6e 99       	ld.w	r9,r7[0x24]
8000ef14:	72 08       	ld.w	r8,r9[0x0]
8000ef16:	58 08       	cp.w	r8,0
8000ef18:	c0 f0       	breq	8000ef36 <_dtoa_r+0x5a>
8000ef1a:	72 1a       	ld.w	r10,r9[0x4]
8000ef1c:	91 1a       	st.w	r8[0x4],r10
8000ef1e:	30 1a       	mov	r10,1
8000ef20:	72 19       	ld.w	r9,r9[0x4]
8000ef22:	f4 09 09 49 	lsl	r9,r10,r9
8000ef26:	10 9b       	mov	r11,r8
8000ef28:	91 29       	st.w	r8[0x8],r9
8000ef2a:	0e 9c       	mov	r12,r7
8000ef2c:	e0 a0 0c bc 	rcall	800108a4 <_Bfree>
8000ef30:	6e 98       	ld.w	r8,r7[0x24]
8000ef32:	30 09       	mov	r9,0
8000ef34:	91 09       	st.w	r8[0x0],r9
8000ef36:	40 28       	lddsp	r8,sp[0x8]
8000ef38:	10 94       	mov	r4,r8
8000ef3a:	58 08       	cp.w	r8,0
8000ef3c:	c0 64       	brge	8000ef48 <_dtoa_r+0x6c>
8000ef3e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000ef42:	50 28       	stdsp	sp[0x8],r8
8000ef44:	30 18       	mov	r8,1
8000ef46:	c0 28       	rjmp	8000ef4a <_dtoa_r+0x6e>
8000ef48:	30 08       	mov	r8,0
8000ef4a:	8d 08       	st.w	r6[0x0],r8
8000ef4c:	fc 1c 7f f0 	movh	r12,0x7ff0
8000ef50:	40 26       	lddsp	r6,sp[0x8]
8000ef52:	0c 98       	mov	r8,r6
8000ef54:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ef58:	18 38       	cp.w	r8,r12
8000ef5a:	c1 c1       	brne	8000ef92 <_dtoa_r+0xb6>
8000ef5c:	e0 68 27 0f 	mov	r8,9999
8000ef60:	41 5b       	lddsp	r11,sp[0x54]
8000ef62:	97 08       	st.w	r11[0x0],r8
8000ef64:	40 3a       	lddsp	r10,sp[0xc]
8000ef66:	58 0a       	cp.w	r10,0
8000ef68:	c0 61       	brne	8000ef74 <_dtoa_r+0x98>
8000ef6a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000ef6e:	c0 31       	brne	8000ef74 <_dtoa_r+0x98>
8000ef70:	4a cc       	lddpc	r12,8000f020 <_dtoa_r+0x144>
8000ef72:	c0 28       	rjmp	8000ef76 <_dtoa_r+0x9a>
8000ef74:	4a cc       	lddpc	r12,8000f024 <_dtoa_r+0x148>
8000ef76:	41 29       	lddsp	r9,sp[0x48]
8000ef78:	58 09       	cp.w	r9,0
8000ef7a:	e0 80 05 9e 	breq	8000fab6 <_dtoa_r+0xbda>
8000ef7e:	f8 c8 ff fd 	sub	r8,r12,-3
8000ef82:	30 09       	mov	r9,0
8000ef84:	11 8a       	ld.ub	r10,r8[0x0]
8000ef86:	f2 0a 18 00 	cp.b	r10,r9
8000ef8a:	c1 90       	breq	8000efbc <_dtoa_r+0xe0>
8000ef8c:	f8 c8 ff f8 	sub	r8,r12,-8
8000ef90:	c1 68       	rjmp	8000efbc <_dtoa_r+0xe0>
8000ef92:	fa ea 00 08 	ld.d	r10,sp[8]
8000ef96:	30 08       	mov	r8,0
8000ef98:	fa eb 00 3c 	st.d	sp[60],r10
8000ef9c:	30 09       	mov	r9,0
8000ef9e:	e0 a0 14 96 	rcall	800118ca <__avr32_f64_cmp_eq>
8000efa2:	c1 10       	breq	8000efc4 <_dtoa_r+0xe8>
8000efa4:	30 18       	mov	r8,1
8000efa6:	41 5a       	lddsp	r10,sp[0x54]
8000efa8:	95 08       	st.w	r10[0x0],r8
8000efaa:	41 29       	lddsp	r9,sp[0x48]
8000efac:	49 f8       	lddpc	r8,8000f028 <_dtoa_r+0x14c>
8000efae:	58 09       	cp.w	r9,0
8000efb0:	c0 41       	brne	8000efb8 <_dtoa_r+0xdc>
8000efb2:	10 9c       	mov	r12,r8
8000efb4:	e0 8f 05 81 	bral	8000fab6 <_dtoa_r+0xbda>
8000efb8:	10 9c       	mov	r12,r8
8000efba:	2f f8       	sub	r8,-1
8000efbc:	41 25       	lddsp	r5,sp[0x48]
8000efbe:	8b 08       	st.w	r5[0x0],r8
8000efc0:	e0 8f 05 7b 	bral	8000fab6 <_dtoa_r+0xbda>
8000efc4:	fa c8 ff 9c 	sub	r8,sp,-100
8000efc8:	fa c9 ff a0 	sub	r9,sp,-96
8000efcc:	fa ea 00 3c 	ld.d	r10,sp[60]
8000efd0:	0e 9c       	mov	r12,r7
8000efd2:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000efd6:	e0 a0 0c b9 	rcall	80010948 <__d2b>
8000efda:	18 93       	mov	r3,r12
8000efdc:	58 05       	cp.w	r5,0
8000efde:	c0 d0       	breq	8000eff8 <_dtoa_r+0x11c>
8000efe0:	fa ea 00 3c 	ld.d	r10,sp[60]
8000efe4:	30 04       	mov	r4,0
8000efe6:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000efea:	ea c5 03 ff 	sub	r5,r5,1023
8000efee:	10 9b       	mov	r11,r8
8000eff0:	51 74       	stdsp	sp[0x5c],r4
8000eff2:	ea 1b 3f f0 	orh	r11,0x3ff0
8000eff6:	c2 a8       	rjmp	8000f04a <_dtoa_r+0x16e>
8000eff8:	41 88       	lddsp	r8,sp[0x60]
8000effa:	41 9c       	lddsp	r12,sp[0x64]
8000effc:	10 0c       	add	r12,r8
8000effe:	f8 c5 fb ce 	sub	r5,r12,-1074
8000f002:	e0 45 00 20 	cp.w	r5,32
8000f006:	e0 8a 00 13 	brle	8000f02c <_dtoa_r+0x150>
8000f00a:	f8 cc fb ee 	sub	r12,r12,-1042
8000f00e:	40 3b       	lddsp	r11,sp[0xc]
8000f010:	ea 08 11 40 	rsub	r8,r5,64
8000f014:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000f018:	ec 08 09 46 	lsl	r6,r6,r8
8000f01c:	0c 4c       	or	r12,r6
8000f01e:	c0 c8       	rjmp	8000f036 <_dtoa_r+0x15a>
8000f020:	80 01       	ld.sh	r1,r0[0x0]
8000f022:	3e a0       	mov	r0,-22
8000f024:	80 01       	ld.sh	r1,r0[0x0]
8000f026:	3e ac       	mov	r12,-22
8000f028:	80 01       	ld.sh	r1,r0[0x0]
8000f02a:	3d 7c       	mov	r12,-41
8000f02c:	ea 0c 11 20 	rsub	r12,r5,32
8000f030:	40 3a       	lddsp	r10,sp[0xc]
8000f032:	f4 0c 09 4c 	lsl	r12,r10,r12
8000f036:	fe b0 ea fd 	rcall	8000c630 <__avr32_u32_to_f64>
8000f03a:	fc 18 fe 10 	movh	r8,0xfe10
8000f03e:	30 19       	mov	r9,1
8000f040:	ea c5 04 33 	sub	r5,r5,1075
8000f044:	f0 0b 00 0b 	add	r11,r8,r11
8000f048:	51 79       	stdsp	sp[0x5c],r9
8000f04a:	30 08       	mov	r8,0
8000f04c:	fc 19 3f f8 	movh	r9,0x3ff8
8000f050:	e0 a0 12 d6 	rcall	800115fc <__avr32_f64_sub>
8000f054:	e0 68 43 61 	mov	r8,17249
8000f058:	ea 18 63 6f 	orh	r8,0x636f
8000f05c:	e0 69 87 a7 	mov	r9,34727
8000f060:	ea 19 3f d2 	orh	r9,0x3fd2
8000f064:	e0 a0 11 e0 	rcall	80011424 <__avr32_f64_mul>
8000f068:	e0 68 c8 b3 	mov	r8,51379
8000f06c:	ea 18 8b 60 	orh	r8,0x8b60
8000f070:	e0 69 8a 28 	mov	r9,35368
8000f074:	ea 19 3f c6 	orh	r9,0x3fc6
8000f078:	e0 a0 13 90 	rcall	80011798 <__avr32_f64_add>
8000f07c:	0a 9c       	mov	r12,r5
8000f07e:	14 90       	mov	r0,r10
8000f080:	16 91       	mov	r1,r11
8000f082:	fe b0 ea db 	rcall	8000c638 <__avr32_s32_to_f64>
8000f086:	e0 68 79 fb 	mov	r8,31227
8000f08a:	ea 18 50 9f 	orh	r8,0x509f
8000f08e:	e0 69 44 13 	mov	r9,17427
8000f092:	ea 19 3f d3 	orh	r9,0x3fd3
8000f096:	e0 a0 11 c7 	rcall	80011424 <__avr32_f64_mul>
8000f09a:	14 98       	mov	r8,r10
8000f09c:	16 99       	mov	r9,r11
8000f09e:	00 9a       	mov	r10,r0
8000f0a0:	02 9b       	mov	r11,r1
8000f0a2:	e0 a0 13 7b 	rcall	80011798 <__avr32_f64_add>
8000f0a6:	14 90       	mov	r0,r10
8000f0a8:	16 91       	mov	r1,r11
8000f0aa:	e0 a0 13 fd 	rcall	800118a4 <__avr32_f64_to_s32>
8000f0ae:	30 08       	mov	r8,0
8000f0b0:	18 96       	mov	r6,r12
8000f0b2:	30 09       	mov	r9,0
8000f0b4:	00 9a       	mov	r10,r0
8000f0b6:	02 9b       	mov	r11,r1
8000f0b8:	e0 a0 14 1c 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f0bc:	c0 c0       	breq	8000f0d4 <_dtoa_r+0x1f8>
8000f0be:	0c 9c       	mov	r12,r6
8000f0c0:	fe b0 ea bc 	rcall	8000c638 <__avr32_s32_to_f64>
8000f0c4:	14 98       	mov	r8,r10
8000f0c6:	16 99       	mov	r9,r11
8000f0c8:	00 9a       	mov	r10,r0
8000f0ca:	02 9b       	mov	r11,r1
8000f0cc:	e0 a0 13 ff 	rcall	800118ca <__avr32_f64_cmp_eq>
8000f0d0:	f7 b6 00 01 	subeq	r6,1
8000f0d4:	59 66       	cp.w	r6,22
8000f0d6:	e0 88 00 05 	brls	8000f0e0 <_dtoa_r+0x204>
8000f0da:	30 18       	mov	r8,1
8000f0dc:	51 48       	stdsp	sp[0x50],r8
8000f0de:	c1 28       	rjmp	8000f102 <_dtoa_r+0x226>
8000f0e0:	4c 08       	lddpc	r8,8000f1e0 <_dtoa_r+0x304>
8000f0e2:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f0e6:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000f0ea:	e0 a0 14 03 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f0ee:	f9 b4 00 00 	moveq	r4,0
8000f0f2:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000f0f6:	f7 b6 01 01 	subne	r6,1
8000f0fa:	f9 bc 01 00 	movne	r12,0
8000f0fe:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000f102:	41 90       	lddsp	r0,sp[0x64]
8000f104:	20 10       	sub	r0,1
8000f106:	0a 10       	sub	r0,r5
8000f108:	c0 46       	brmi	8000f110 <_dtoa_r+0x234>
8000f10a:	50 40       	stdsp	sp[0x10],r0
8000f10c:	30 00       	mov	r0,0
8000f10e:	c0 48       	rjmp	8000f116 <_dtoa_r+0x23a>
8000f110:	30 0b       	mov	r11,0
8000f112:	5c 30       	neg	r0
8000f114:	50 4b       	stdsp	sp[0x10],r11
8000f116:	ec 02 11 00 	rsub	r2,r6,0
8000f11a:	58 06       	cp.w	r6,0
8000f11c:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000f120:	f5 d6 e4 0a 	addge	r10,r10,r6
8000f124:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000f128:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000f12c:	f9 b2 04 00 	movge	r2,0
8000f130:	e1 d6 e5 10 	sublt	r0,r0,r6
8000f134:	f9 b9 05 00 	movlt	r9,0
8000f138:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000f13c:	40 c8       	lddsp	r8,sp[0x30]
8000f13e:	58 98       	cp.w	r8,9
8000f140:	e0 8b 00 20 	brhi	8000f180 <_dtoa_r+0x2a4>
8000f144:	58 58       	cp.w	r8,5
8000f146:	f9 b4 0a 01 	movle	r4,1
8000f14a:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000f14e:	f7 b5 09 04 	subgt	r5,4
8000f152:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000f156:	f9 b4 09 00 	movgt	r4,0
8000f15a:	40 cc       	lddsp	r12,sp[0x30]
8000f15c:	58 3c       	cp.w	r12,3
8000f15e:	c2 d0       	breq	8000f1b8 <_dtoa_r+0x2dc>
8000f160:	e0 89 00 05 	brgt	8000f16a <_dtoa_r+0x28e>
8000f164:	58 2c       	cp.w	r12,2
8000f166:	c1 01       	brne	8000f186 <_dtoa_r+0x2aa>
8000f168:	c1 88       	rjmp	8000f198 <_dtoa_r+0x2bc>
8000f16a:	40 cb       	lddsp	r11,sp[0x30]
8000f16c:	58 4b       	cp.w	r11,4
8000f16e:	c0 60       	breq	8000f17a <_dtoa_r+0x29e>
8000f170:	58 5b       	cp.w	r11,5
8000f172:	c0 a1       	brne	8000f186 <_dtoa_r+0x2aa>
8000f174:	30 1a       	mov	r10,1
8000f176:	50 da       	stdsp	sp[0x34],r10
8000f178:	c2 28       	rjmp	8000f1bc <_dtoa_r+0x2e0>
8000f17a:	30 19       	mov	r9,1
8000f17c:	50 d9       	stdsp	sp[0x34],r9
8000f17e:	c0 f8       	rjmp	8000f19c <_dtoa_r+0x2c0>
8000f180:	30 08       	mov	r8,0
8000f182:	30 14       	mov	r4,1
8000f184:	50 c8       	stdsp	sp[0x30],r8
8000f186:	3f f5       	mov	r5,-1
8000f188:	30 1c       	mov	r12,1
8000f18a:	30 0b       	mov	r11,0
8000f18c:	50 95       	stdsp	sp[0x24],r5
8000f18e:	50 dc       	stdsp	sp[0x34],r12
8000f190:	0a 91       	mov	r1,r5
8000f192:	31 28       	mov	r8,18
8000f194:	50 eb       	stdsp	sp[0x38],r11
8000f196:	c2 08       	rjmp	8000f1d6 <_dtoa_r+0x2fa>
8000f198:	30 0a       	mov	r10,0
8000f19a:	50 da       	stdsp	sp[0x34],r10
8000f19c:	40 e9       	lddsp	r9,sp[0x38]
8000f19e:	58 09       	cp.w	r9,0
8000f1a0:	e0 89 00 07 	brgt	8000f1ae <_dtoa_r+0x2d2>
8000f1a4:	30 18       	mov	r8,1
8000f1a6:	50 98       	stdsp	sp[0x24],r8
8000f1a8:	10 91       	mov	r1,r8
8000f1aa:	50 e8       	stdsp	sp[0x38],r8
8000f1ac:	c1 58       	rjmp	8000f1d6 <_dtoa_r+0x2fa>
8000f1ae:	40 e5       	lddsp	r5,sp[0x38]
8000f1b0:	50 95       	stdsp	sp[0x24],r5
8000f1b2:	0a 91       	mov	r1,r5
8000f1b4:	0a 98       	mov	r8,r5
8000f1b6:	c1 08       	rjmp	8000f1d6 <_dtoa_r+0x2fa>
8000f1b8:	30 0c       	mov	r12,0
8000f1ba:	50 dc       	stdsp	sp[0x34],r12
8000f1bc:	40 eb       	lddsp	r11,sp[0x38]
8000f1be:	ec 0b 00 0b 	add	r11,r6,r11
8000f1c2:	50 9b       	stdsp	sp[0x24],r11
8000f1c4:	16 98       	mov	r8,r11
8000f1c6:	2f f8       	sub	r8,-1
8000f1c8:	58 08       	cp.w	r8,0
8000f1ca:	e0 89 00 05 	brgt	8000f1d4 <_dtoa_r+0x2f8>
8000f1ce:	10 91       	mov	r1,r8
8000f1d0:	30 18       	mov	r8,1
8000f1d2:	c0 28       	rjmp	8000f1d6 <_dtoa_r+0x2fa>
8000f1d4:	10 91       	mov	r1,r8
8000f1d6:	30 09       	mov	r9,0
8000f1d8:	6e 9a       	ld.w	r10,r7[0x24]
8000f1da:	95 19       	st.w	r10[0x4],r9
8000f1dc:	30 49       	mov	r9,4
8000f1de:	c0 78       	rjmp	8000f1ec <_dtoa_r+0x310>
8000f1e0:	80 01       	ld.sh	r1,r0[0x0]
8000f1e2:	3f 5c       	mov	r12,-11
8000f1e4:	6a 1a       	ld.w	r10,r5[0x4]
8000f1e6:	a1 79       	lsl	r9,0x1
8000f1e8:	2f fa       	sub	r10,-1
8000f1ea:	8b 1a       	st.w	r5[0x4],r10
8000f1ec:	6e 95       	ld.w	r5,r7[0x24]
8000f1ee:	f2 ca ff ec 	sub	r10,r9,-20
8000f1f2:	10 3a       	cp.w	r10,r8
8000f1f4:	fe 98 ff f8 	brls	8000f1e4 <_dtoa_r+0x308>
8000f1f8:	6a 1b       	ld.w	r11,r5[0x4]
8000f1fa:	0e 9c       	mov	r12,r7
8000f1fc:	e0 a0 0b 6e 	rcall	800108d8 <_Balloc>
8000f200:	58 e1       	cp.w	r1,14
8000f202:	5f 88       	srls	r8
8000f204:	8b 0c       	st.w	r5[0x0],r12
8000f206:	f1 e4 00 04 	and	r4,r8,r4
8000f20a:	6e 98       	ld.w	r8,r7[0x24]
8000f20c:	70 08       	ld.w	r8,r8[0x0]
8000f20e:	50 88       	stdsp	sp[0x20],r8
8000f210:	e0 80 01 82 	breq	8000f514 <_dtoa_r+0x638>
8000f214:	58 06       	cp.w	r6,0
8000f216:	e0 8a 00 40 	brle	8000f296 <_dtoa_r+0x3ba>
8000f21a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000f21e:	4c b8       	lddpc	r8,8000f348 <_dtoa_r+0x46c>
8000f220:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000f224:	fa e5 00 18 	st.d	sp[24],r4
8000f228:	ec 04 14 04 	asr	r4,r6,0x4
8000f22c:	ed b4 00 04 	bld	r4,0x4
8000f230:	c0 30       	breq	8000f236 <_dtoa_r+0x35a>
8000f232:	30 25       	mov	r5,2
8000f234:	c0 f8       	rjmp	8000f252 <_dtoa_r+0x376>
8000f236:	4c 68       	lddpc	r8,8000f34c <_dtoa_r+0x470>
8000f238:	f0 e8 00 20 	ld.d	r8,r8[32]
8000f23c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f240:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000f244:	e0 a0 13 8a 	rcall	80011958 <__avr32_f64_div>
8000f248:	30 35       	mov	r5,3
8000f24a:	14 98       	mov	r8,r10
8000f24c:	16 99       	mov	r9,r11
8000f24e:	fa e9 00 08 	st.d	sp[8],r8
8000f252:	4b fc       	lddpc	r12,8000f34c <_dtoa_r+0x470>
8000f254:	50 a3       	stdsp	sp[0x28],r3
8000f256:	0c 93       	mov	r3,r6
8000f258:	18 96       	mov	r6,r12
8000f25a:	c0 f8       	rjmp	8000f278 <_dtoa_r+0x39c>
8000f25c:	fa ea 00 18 	ld.d	r10,sp[24]
8000f260:	ed b4 00 00 	bld	r4,0x0
8000f264:	c0 81       	brne	8000f274 <_dtoa_r+0x398>
8000f266:	ec e8 00 00 	ld.d	r8,r6[0]
8000f26a:	2f f5       	sub	r5,-1
8000f26c:	e0 a0 10 dc 	rcall	80011424 <__avr32_f64_mul>
8000f270:	fa eb 00 18 	st.d	sp[24],r10
8000f274:	a1 54       	asr	r4,0x1
8000f276:	2f 86       	sub	r6,-8
8000f278:	58 04       	cp.w	r4,0
8000f27a:	cf 11       	brne	8000f25c <_dtoa_r+0x380>
8000f27c:	fa e8 00 18 	ld.d	r8,sp[24]
8000f280:	fa ea 00 08 	ld.d	r10,sp[8]
8000f284:	06 96       	mov	r6,r3
8000f286:	e0 a0 13 69 	rcall	80011958 <__avr32_f64_div>
8000f28a:	40 a3       	lddsp	r3,sp[0x28]
8000f28c:	14 98       	mov	r8,r10
8000f28e:	16 99       	mov	r9,r11
8000f290:	fa e9 00 08 	st.d	sp[8],r8
8000f294:	c2 d8       	rjmp	8000f2ee <_dtoa_r+0x412>
8000f296:	ec 08 11 00 	rsub	r8,r6,0
8000f29a:	c0 31       	brne	8000f2a0 <_dtoa_r+0x3c4>
8000f29c:	30 25       	mov	r5,2
8000f29e:	c2 88       	rjmp	8000f2ee <_dtoa_r+0x412>
8000f2a0:	4a bc       	lddpc	r12,8000f34c <_dtoa_r+0x470>
8000f2a2:	f0 04 14 04 	asr	r4,r8,0x4
8000f2a6:	50 1c       	stdsp	sp[0x4],r12
8000f2a8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000f2ac:	4a 79       	lddpc	r9,8000f348 <_dtoa_r+0x46c>
8000f2ae:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f2b2:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f2b6:	e0 a0 10 b7 	rcall	80011424 <__avr32_f64_mul>
8000f2ba:	40 1c       	lddsp	r12,sp[0x4]
8000f2bc:	50 63       	stdsp	sp[0x18],r3
8000f2be:	30 25       	mov	r5,2
8000f2c0:	0c 93       	mov	r3,r6
8000f2c2:	fa eb 00 08 	st.d	sp[8],r10
8000f2c6:	18 96       	mov	r6,r12
8000f2c8:	c0 f8       	rjmp	8000f2e6 <_dtoa_r+0x40a>
8000f2ca:	fa ea 00 08 	ld.d	r10,sp[8]
8000f2ce:	ed b4 00 00 	bld	r4,0x0
8000f2d2:	c0 81       	brne	8000f2e2 <_dtoa_r+0x406>
8000f2d4:	ec e8 00 00 	ld.d	r8,r6[0]
8000f2d8:	2f f5       	sub	r5,-1
8000f2da:	e0 a0 10 a5 	rcall	80011424 <__avr32_f64_mul>
8000f2de:	fa eb 00 08 	st.d	sp[8],r10
8000f2e2:	a1 54       	asr	r4,0x1
8000f2e4:	2f 86       	sub	r6,-8
8000f2e6:	58 04       	cp.w	r4,0
8000f2e8:	cf 11       	brne	8000f2ca <_dtoa_r+0x3ee>
8000f2ea:	06 96       	mov	r6,r3
8000f2ec:	40 63       	lddsp	r3,sp[0x18]
8000f2ee:	41 4a       	lddsp	r10,sp[0x50]
8000f2f0:	58 0a       	cp.w	r10,0
8000f2f2:	c2 f0       	breq	8000f350 <_dtoa_r+0x474>
8000f2f4:	fa e8 00 08 	ld.d	r8,sp[8]
8000f2f8:	58 01       	cp.w	r1,0
8000f2fa:	5f 94       	srgt	r4
8000f2fc:	fa e9 00 18 	st.d	sp[24],r8
8000f300:	30 08       	mov	r8,0
8000f302:	fc 19 3f f0 	movh	r9,0x3ff0
8000f306:	fa ea 00 18 	ld.d	r10,sp[24]
8000f30a:	e0 a0 12 f3 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f30e:	f9 bc 00 00 	moveq	r12,0
8000f312:	f9 bc 01 01 	movne	r12,1
8000f316:	e9 ec 00 0c 	and	r12,r4,r12
8000f31a:	c1 b0       	breq	8000f350 <_dtoa_r+0x474>
8000f31c:	40 98       	lddsp	r8,sp[0x24]
8000f31e:	58 08       	cp.w	r8,0
8000f320:	e0 8a 00 f6 	brle	8000f50c <_dtoa_r+0x630>
8000f324:	30 08       	mov	r8,0
8000f326:	fc 19 40 24 	movh	r9,0x4024
8000f32a:	ec c4 00 01 	sub	r4,r6,1
8000f32e:	fa ea 00 18 	ld.d	r10,sp[24]
8000f332:	2f f5       	sub	r5,-1
8000f334:	50 64       	stdsp	sp[0x18],r4
8000f336:	e0 a0 10 77 	rcall	80011424 <__avr32_f64_mul>
8000f33a:	40 94       	lddsp	r4,sp[0x24]
8000f33c:	14 98       	mov	r8,r10
8000f33e:	16 99       	mov	r9,r11
8000f340:	fa e9 00 08 	st.d	sp[8],r8
8000f344:	c0 88       	rjmp	8000f354 <_dtoa_r+0x478>
8000f346:	d7 03       	nop
8000f348:	80 01       	ld.sh	r1,r0[0x0]
8000f34a:	3f 5c       	mov	r12,-11
8000f34c:	80 01       	ld.sh	r1,r0[0x0]
8000f34e:	40 24       	lddsp	r4,sp[0x8]
8000f350:	50 66       	stdsp	sp[0x18],r6
8000f352:	02 94       	mov	r4,r1
8000f354:	0a 9c       	mov	r12,r5
8000f356:	fe b0 e9 71 	rcall	8000c638 <__avr32_s32_to_f64>
8000f35a:	fa e8 00 08 	ld.d	r8,sp[8]
8000f35e:	e0 a0 10 63 	rcall	80011424 <__avr32_f64_mul>
8000f362:	30 08       	mov	r8,0
8000f364:	fc 19 40 1c 	movh	r9,0x401c
8000f368:	e0 a0 12 18 	rcall	80011798 <__avr32_f64_add>
8000f36c:	14 98       	mov	r8,r10
8000f36e:	16 99       	mov	r9,r11
8000f370:	fa e9 00 28 	st.d	sp[40],r8
8000f374:	fc 18 fc c0 	movh	r8,0xfcc0
8000f378:	40 a5       	lddsp	r5,sp[0x28]
8000f37a:	10 05       	add	r5,r8
8000f37c:	50 a5       	stdsp	sp[0x28],r5
8000f37e:	58 04       	cp.w	r4,0
8000f380:	c2 11       	brne	8000f3c2 <_dtoa_r+0x4e6>
8000f382:	fa ea 00 08 	ld.d	r10,sp[8]
8000f386:	30 08       	mov	r8,0
8000f388:	fc 19 40 14 	movh	r9,0x4014
8000f38c:	e0 a0 11 38 	rcall	800115fc <__avr32_f64_sub>
8000f390:	40 bc       	lddsp	r12,sp[0x2c]
8000f392:	fa eb 00 08 	st.d	sp[8],r10
8000f396:	14 98       	mov	r8,r10
8000f398:	16 99       	mov	r9,r11
8000f39a:	18 9a       	mov	r10,r12
8000f39c:	0a 9b       	mov	r11,r5
8000f39e:	e0 a0 12 a9 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f3a2:	e0 81 02 54 	brne	8000f84a <_dtoa_r+0x96e>
8000f3a6:	0a 98       	mov	r8,r5
8000f3a8:	40 b9       	lddsp	r9,sp[0x2c]
8000f3aa:	ee 18 80 00 	eorh	r8,0x8000
8000f3ae:	fa ea 00 08 	ld.d	r10,sp[8]
8000f3b2:	10 95       	mov	r5,r8
8000f3b4:	12 98       	mov	r8,r9
8000f3b6:	0a 99       	mov	r9,r5
8000f3b8:	e0 a0 12 9c 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f3bc:	e0 81 02 3e 	brne	8000f838 <_dtoa_r+0x95c>
8000f3c0:	ca 68       	rjmp	8000f50c <_dtoa_r+0x630>
8000f3c2:	4c e9       	lddpc	r9,8000f4f8 <_dtoa_r+0x61c>
8000f3c4:	e8 c8 00 01 	sub	r8,r4,1
8000f3c8:	40 d5       	lddsp	r5,sp[0x34]
8000f3ca:	58 05       	cp.w	r5,0
8000f3cc:	c4 f0       	breq	8000f46a <_dtoa_r+0x58e>
8000f3ce:	30 0c       	mov	r12,0
8000f3d0:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f3d4:	51 3c       	stdsp	sp[0x4c],r12
8000f3d6:	30 0a       	mov	r10,0
8000f3d8:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f3dc:	e0 a0 12 be 	rcall	80011958 <__avr32_f64_div>
8000f3e0:	fa e8 00 28 	ld.d	r8,sp[40]
8000f3e4:	40 85       	lddsp	r5,sp[0x20]
8000f3e6:	e0 a0 11 0b 	rcall	800115fc <__avr32_f64_sub>
8000f3ea:	fa eb 00 28 	st.d	sp[40],r10
8000f3ee:	fa ea 00 08 	ld.d	r10,sp[8]
8000f3f2:	e0 a0 12 59 	rcall	800118a4 <__avr32_f64_to_s32>
8000f3f6:	51 6c       	stdsp	sp[0x58],r12
8000f3f8:	fe b0 e9 20 	rcall	8000c638 <__avr32_s32_to_f64>
8000f3fc:	14 98       	mov	r8,r10
8000f3fe:	16 99       	mov	r9,r11
8000f400:	fa ea 00 08 	ld.d	r10,sp[8]
8000f404:	e0 a0 10 fc 	rcall	800115fc <__avr32_f64_sub>
8000f408:	fa eb 00 08 	st.d	sp[8],r10
8000f40c:	41 68       	lddsp	r8,sp[0x58]
8000f40e:	2d 08       	sub	r8,-48
8000f410:	0a c8       	st.b	r5++,r8
8000f412:	41 39       	lddsp	r9,sp[0x4c]
8000f414:	2f f9       	sub	r9,-1
8000f416:	51 39       	stdsp	sp[0x4c],r9
8000f418:	fa e8 00 28 	ld.d	r8,sp[40]
8000f41c:	e0 a0 12 6a 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f420:	e0 81 03 3a 	brne	8000fa94 <_dtoa_r+0xbb8>
8000f424:	fa e8 00 08 	ld.d	r8,sp[8]
8000f428:	30 0a       	mov	r10,0
8000f42a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000f42e:	e0 a0 10 e7 	rcall	800115fc <__avr32_f64_sub>
8000f432:	fa e8 00 28 	ld.d	r8,sp[40]
8000f436:	e0 a0 12 5d 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f43a:	fa ea 00 28 	ld.d	r10,sp[40]
8000f43e:	30 08       	mov	r8,0
8000f440:	fc 19 40 24 	movh	r9,0x4024
8000f444:	e0 81 00 da 	brne	8000f5f8 <_dtoa_r+0x71c>
8000f448:	41 3c       	lddsp	r12,sp[0x4c]
8000f44a:	08 3c       	cp.w	r12,r4
8000f44c:	c6 04       	brge	8000f50c <_dtoa_r+0x630>
8000f44e:	e0 a0 0f eb 	rcall	80011424 <__avr32_f64_mul>
8000f452:	30 08       	mov	r8,0
8000f454:	fa eb 00 28 	st.d	sp[40],r10
8000f458:	fc 19 40 24 	movh	r9,0x4024
8000f45c:	fa ea 00 08 	ld.d	r10,sp[8]
8000f460:	e0 a0 0f e2 	rcall	80011424 <__avr32_f64_mul>
8000f464:	fa eb 00 08 	st.d	sp[8],r10
8000f468:	cc 3b       	rjmp	8000f3ee <_dtoa_r+0x512>
8000f46a:	40 85       	lddsp	r5,sp[0x20]
8000f46c:	08 05       	add	r5,r4
8000f46e:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000f472:	51 35       	stdsp	sp[0x4c],r5
8000f474:	fa e8 00 28 	ld.d	r8,sp[40]
8000f478:	40 85       	lddsp	r5,sp[0x20]
8000f47a:	e0 a0 0f d5 	rcall	80011424 <__avr32_f64_mul>
8000f47e:	fa eb 00 28 	st.d	sp[40],r10
8000f482:	fa ea 00 08 	ld.d	r10,sp[8]
8000f486:	e0 a0 12 0f 	rcall	800118a4 <__avr32_f64_to_s32>
8000f48a:	51 6c       	stdsp	sp[0x58],r12
8000f48c:	fe b0 e8 d6 	rcall	8000c638 <__avr32_s32_to_f64>
8000f490:	14 98       	mov	r8,r10
8000f492:	16 99       	mov	r9,r11
8000f494:	fa ea 00 08 	ld.d	r10,sp[8]
8000f498:	e0 a0 10 b2 	rcall	800115fc <__avr32_f64_sub>
8000f49c:	fa eb 00 08 	st.d	sp[8],r10
8000f4a0:	41 68       	lddsp	r8,sp[0x58]
8000f4a2:	2d 08       	sub	r8,-48
8000f4a4:	0a c8       	st.b	r5++,r8
8000f4a6:	41 3c       	lddsp	r12,sp[0x4c]
8000f4a8:	18 35       	cp.w	r5,r12
8000f4aa:	c2 91       	brne	8000f4fc <_dtoa_r+0x620>
8000f4ac:	30 08       	mov	r8,0
8000f4ae:	fc 19 3f e0 	movh	r9,0x3fe0
8000f4b2:	fa ea 00 28 	ld.d	r10,sp[40]
8000f4b6:	e0 a0 11 71 	rcall	80011798 <__avr32_f64_add>
8000f4ba:	40 85       	lddsp	r5,sp[0x20]
8000f4bc:	fa e8 00 08 	ld.d	r8,sp[8]
8000f4c0:	08 05       	add	r5,r4
8000f4c2:	e0 a0 12 17 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f4c6:	e0 81 00 99 	brne	8000f5f8 <_dtoa_r+0x71c>
8000f4ca:	fa e8 00 28 	ld.d	r8,sp[40]
8000f4ce:	30 0a       	mov	r10,0
8000f4d0:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f4d4:	e0 a0 10 94 	rcall	800115fc <__avr32_f64_sub>
8000f4d8:	14 98       	mov	r8,r10
8000f4da:	16 99       	mov	r9,r11
8000f4dc:	fa ea 00 08 	ld.d	r10,sp[8]
8000f4e0:	e0 a0 12 08 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f4e4:	c1 40       	breq	8000f50c <_dtoa_r+0x630>
8000f4e6:	33 09       	mov	r9,48
8000f4e8:	0a 98       	mov	r8,r5
8000f4ea:	11 7a       	ld.ub	r10,--r8
8000f4ec:	f2 0a 18 00 	cp.b	r10,r9
8000f4f0:	e0 81 02 d2 	brne	8000fa94 <_dtoa_r+0xbb8>
8000f4f4:	10 95       	mov	r5,r8
8000f4f6:	cf 9b       	rjmp	8000f4e8 <_dtoa_r+0x60c>
8000f4f8:	80 01       	ld.sh	r1,r0[0x0]
8000f4fa:	3f 5c       	mov	r12,-11
8000f4fc:	30 08       	mov	r8,0
8000f4fe:	fc 19 40 24 	movh	r9,0x4024
8000f502:	e0 a0 0f 91 	rcall	80011424 <__avr32_f64_mul>
8000f506:	fa eb 00 08 	st.d	sp[8],r10
8000f50a:	cb cb       	rjmp	8000f482 <_dtoa_r+0x5a6>
8000f50c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f510:	fa eb 00 08 	st.d	sp[8],r10
8000f514:	58 e6       	cp.w	r6,14
8000f516:	5f ab       	srle	r11
8000f518:	41 8a       	lddsp	r10,sp[0x60]
8000f51a:	30 08       	mov	r8,0
8000f51c:	f4 09 11 ff 	rsub	r9,r10,-1
8000f520:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000f524:	f0 09 18 00 	cp.b	r9,r8
8000f528:	e0 80 00 81 	breq	8000f62a <_dtoa_r+0x74e>
8000f52c:	40 ea       	lddsp	r10,sp[0x38]
8000f52e:	58 01       	cp.w	r1,0
8000f530:	5f a9       	srle	r9
8000f532:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000f536:	4c 9a       	lddpc	r10,8000f658 <_dtoa_r+0x77c>
8000f538:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000f53c:	fa e5 00 10 	st.d	sp[16],r4
8000f540:	f0 09 18 00 	cp.b	r9,r8
8000f544:	c1 40       	breq	8000f56c <_dtoa_r+0x690>
8000f546:	58 01       	cp.w	r1,0
8000f548:	e0 81 01 78 	brne	8000f838 <_dtoa_r+0x95c>
8000f54c:	30 08       	mov	r8,0
8000f54e:	fc 19 40 14 	movh	r9,0x4014
8000f552:	08 9a       	mov	r10,r4
8000f554:	0a 9b       	mov	r11,r5
8000f556:	e0 a0 0f 67 	rcall	80011424 <__avr32_f64_mul>
8000f55a:	fa e8 00 08 	ld.d	r8,sp[8]
8000f55e:	fe b0 e8 dd 	rcall	8000c718 <__avr32_f64_cmp_ge>
8000f562:	e0 81 01 6b 	brne	8000f838 <_dtoa_r+0x95c>
8000f566:	02 92       	mov	r2,r1
8000f568:	e0 8f 01 73 	bral	8000f84e <_dtoa_r+0x972>
8000f56c:	40 85       	lddsp	r5,sp[0x20]
8000f56e:	30 14       	mov	r4,1
8000f570:	fa e8 00 10 	ld.d	r8,sp[16]
8000f574:	fa ea 00 08 	ld.d	r10,sp[8]
8000f578:	e0 a0 11 f0 	rcall	80011958 <__avr32_f64_div>
8000f57c:	e0 a0 11 94 	rcall	800118a4 <__avr32_f64_to_s32>
8000f580:	18 92       	mov	r2,r12
8000f582:	fe b0 e8 5b 	rcall	8000c638 <__avr32_s32_to_f64>
8000f586:	fa e8 00 10 	ld.d	r8,sp[16]
8000f58a:	e0 a0 0f 4d 	rcall	80011424 <__avr32_f64_mul>
8000f58e:	14 98       	mov	r8,r10
8000f590:	16 99       	mov	r9,r11
8000f592:	fa ea 00 08 	ld.d	r10,sp[8]
8000f596:	e0 a0 10 33 	rcall	800115fc <__avr32_f64_sub>
8000f59a:	fa eb 00 08 	st.d	sp[8],r10
8000f59e:	e4 c8 ff d0 	sub	r8,r2,-48
8000f5a2:	0a c8       	st.b	r5++,r8
8000f5a4:	fc 19 40 24 	movh	r9,0x4024
8000f5a8:	30 08       	mov	r8,0
8000f5aa:	02 34       	cp.w	r4,r1
8000f5ac:	c3 31       	brne	8000f612 <_dtoa_r+0x736>
8000f5ae:	fa e8 00 08 	ld.d	r8,sp[8]
8000f5b2:	e0 a0 10 f3 	rcall	80011798 <__avr32_f64_add>
8000f5b6:	16 91       	mov	r1,r11
8000f5b8:	14 90       	mov	r0,r10
8000f5ba:	14 98       	mov	r8,r10
8000f5bc:	02 99       	mov	r9,r1
8000f5be:	fa ea 00 10 	ld.d	r10,sp[16]
8000f5c2:	e0 a0 11 97 	rcall	800118f0 <__avr32_f64_cmp_lt>
8000f5c6:	c1 a1       	brne	8000f5fa <_dtoa_r+0x71e>
8000f5c8:	fa e8 00 10 	ld.d	r8,sp[16]
8000f5cc:	00 9a       	mov	r10,r0
8000f5ce:	02 9b       	mov	r11,r1
8000f5d0:	e0 a0 11 7d 	rcall	800118ca <__avr32_f64_cmp_eq>
8000f5d4:	e0 80 02 5f 	breq	8000fa92 <_dtoa_r+0xbb6>
8000f5d8:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000f5dc:	c0 f1       	brne	8000f5fa <_dtoa_r+0x71e>
8000f5de:	e0 8f 02 5a 	bral	8000fa92 <_dtoa_r+0xbb6>
8000f5e2:	40 8a       	lddsp	r10,sp[0x20]
8000f5e4:	14 38       	cp.w	r8,r10
8000f5e6:	c0 30       	breq	8000f5ec <_dtoa_r+0x710>
8000f5e8:	10 95       	mov	r5,r8
8000f5ea:	c0 98       	rjmp	8000f5fc <_dtoa_r+0x720>
8000f5ec:	33 08       	mov	r8,48
8000f5ee:	40 89       	lddsp	r9,sp[0x20]
8000f5f0:	2f f6       	sub	r6,-1
8000f5f2:	b2 88       	st.b	r9[0x0],r8
8000f5f4:	40 88       	lddsp	r8,sp[0x20]
8000f5f6:	c0 88       	rjmp	8000f606 <_dtoa_r+0x72a>
8000f5f8:	40 66       	lddsp	r6,sp[0x18]
8000f5fa:	33 99       	mov	r9,57
8000f5fc:	0a 98       	mov	r8,r5
8000f5fe:	11 7a       	ld.ub	r10,--r8
8000f600:	f2 0a 18 00 	cp.b	r10,r9
8000f604:	ce f0       	breq	8000f5e2 <_dtoa_r+0x706>
8000f606:	50 66       	stdsp	sp[0x18],r6
8000f608:	11 89       	ld.ub	r9,r8[0x0]
8000f60a:	2f f9       	sub	r9,-1
8000f60c:	b0 89       	st.b	r8[0x0],r9
8000f60e:	e0 8f 02 43 	bral	8000fa94 <_dtoa_r+0xbb8>
8000f612:	e0 a0 0f 09 	rcall	80011424 <__avr32_f64_mul>
8000f616:	2f f4       	sub	r4,-1
8000f618:	fa eb 00 08 	st.d	sp[8],r10
8000f61c:	30 08       	mov	r8,0
8000f61e:	30 09       	mov	r9,0
8000f620:	e0 a0 11 55 	rcall	800118ca <__avr32_f64_cmp_eq>
8000f624:	ca 60       	breq	8000f570 <_dtoa_r+0x694>
8000f626:	e0 8f 02 36 	bral	8000fa92 <_dtoa_r+0xbb6>
8000f62a:	40 d8       	lddsp	r8,sp[0x34]
8000f62c:	58 08       	cp.w	r8,0
8000f62e:	c0 51       	brne	8000f638 <_dtoa_r+0x75c>
8000f630:	04 98       	mov	r8,r2
8000f632:	00 95       	mov	r5,r0
8000f634:	40 d4       	lddsp	r4,sp[0x34]
8000f636:	c3 88       	rjmp	8000f6a6 <_dtoa_r+0x7ca>
8000f638:	40 c5       	lddsp	r5,sp[0x30]
8000f63a:	58 15       	cp.w	r5,1
8000f63c:	e0 89 00 10 	brgt	8000f65c <_dtoa_r+0x780>
8000f640:	41 74       	lddsp	r4,sp[0x5c]
8000f642:	58 04       	cp.w	r4,0
8000f644:	c0 40       	breq	8000f64c <_dtoa_r+0x770>
8000f646:	f4 c9 fb cd 	sub	r9,r10,-1075
8000f64a:	c0 48       	rjmp	8000f652 <_dtoa_r+0x776>
8000f64c:	41 99       	lddsp	r9,sp[0x64]
8000f64e:	f2 09 11 36 	rsub	r9,r9,54
8000f652:	04 98       	mov	r8,r2
8000f654:	00 95       	mov	r5,r0
8000f656:	c1 d8       	rjmp	8000f690 <_dtoa_r+0x7b4>
8000f658:	80 01       	ld.sh	r1,r0[0x0]
8000f65a:	3f 5c       	mov	r12,-11
8000f65c:	e2 c8 00 01 	sub	r8,r1,1
8000f660:	58 01       	cp.w	r1,0
8000f662:	e0 05 17 40 	movge	r5,r0
8000f666:	e2 09 17 40 	movge	r9,r1
8000f66a:	e1 d1 e5 15 	sublt	r5,r0,r1
8000f66e:	f9 b9 05 00 	movlt	r9,0
8000f672:	10 32       	cp.w	r2,r8
8000f674:	e5 d8 e4 18 	subge	r8,r2,r8
8000f678:	f1 d2 e5 18 	sublt	r8,r8,r2
8000f67c:	e5 d8 e5 02 	addlt	r2,r2,r8
8000f680:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000f684:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000f688:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000f68c:	f9 b8 05 00 	movlt	r8,0
8000f690:	40 4b       	lddsp	r11,sp[0x10]
8000f692:	12 0b       	add	r11,r9
8000f694:	50 08       	stdsp	sp[0x0],r8
8000f696:	50 4b       	stdsp	sp[0x10],r11
8000f698:	12 00       	add	r0,r9
8000f69a:	30 1b       	mov	r11,1
8000f69c:	0e 9c       	mov	r12,r7
8000f69e:	e0 a0 0a d5 	rcall	80010c48 <__i2b>
8000f6a2:	40 08       	lddsp	r8,sp[0x0]
8000f6a4:	18 94       	mov	r4,r12
8000f6a6:	40 4a       	lddsp	r10,sp[0x10]
8000f6a8:	58 05       	cp.w	r5,0
8000f6aa:	5f 99       	srgt	r9
8000f6ac:	58 0a       	cp.w	r10,0
8000f6ae:	5f 9a       	srgt	r10
8000f6b0:	f5 e9 00 09 	and	r9,r10,r9
8000f6b4:	c0 80       	breq	8000f6c4 <_dtoa_r+0x7e8>
8000f6b6:	40 4c       	lddsp	r12,sp[0x10]
8000f6b8:	f8 05 0d 49 	min	r9,r12,r5
8000f6bc:	12 1c       	sub	r12,r9
8000f6be:	12 10       	sub	r0,r9
8000f6c0:	50 4c       	stdsp	sp[0x10],r12
8000f6c2:	12 15       	sub	r5,r9
8000f6c4:	58 02       	cp.w	r2,0
8000f6c6:	e0 8a 00 27 	brle	8000f714 <_dtoa_r+0x838>
8000f6ca:	40 db       	lddsp	r11,sp[0x34]
8000f6cc:	58 0b       	cp.w	r11,0
8000f6ce:	c1 d0       	breq	8000f708 <_dtoa_r+0x82c>
8000f6d0:	58 08       	cp.w	r8,0
8000f6d2:	e0 8a 00 17 	brle	8000f700 <_dtoa_r+0x824>
8000f6d6:	10 9a       	mov	r10,r8
8000f6d8:	50 08       	stdsp	sp[0x0],r8
8000f6da:	08 9b       	mov	r11,r4
8000f6dc:	0e 9c       	mov	r12,r7
8000f6de:	e0 a0 0a fb 	rcall	80010cd4 <__pow5mult>
8000f6e2:	06 9a       	mov	r10,r3
8000f6e4:	18 9b       	mov	r11,r12
8000f6e6:	18 94       	mov	r4,r12
8000f6e8:	0e 9c       	mov	r12,r7
8000f6ea:	e0 a0 0a 2f 	rcall	80010b48 <__multiply>
8000f6ee:	18 99       	mov	r9,r12
8000f6f0:	06 9b       	mov	r11,r3
8000f6f2:	50 19       	stdsp	sp[0x4],r9
8000f6f4:	0e 9c       	mov	r12,r7
8000f6f6:	e0 a0 08 d7 	rcall	800108a4 <_Bfree>
8000f6fa:	40 19       	lddsp	r9,sp[0x4]
8000f6fc:	40 08       	lddsp	r8,sp[0x0]
8000f6fe:	12 93       	mov	r3,r9
8000f700:	e4 08 01 0a 	sub	r10,r2,r8
8000f704:	c0 80       	breq	8000f714 <_dtoa_r+0x838>
8000f706:	c0 28       	rjmp	8000f70a <_dtoa_r+0x82e>
8000f708:	04 9a       	mov	r10,r2
8000f70a:	06 9b       	mov	r11,r3
8000f70c:	0e 9c       	mov	r12,r7
8000f70e:	e0 a0 0a e3 	rcall	80010cd4 <__pow5mult>
8000f712:	18 93       	mov	r3,r12
8000f714:	30 1b       	mov	r11,1
8000f716:	0e 9c       	mov	r12,r7
8000f718:	e0 a0 0a 98 	rcall	80010c48 <__i2b>
8000f71c:	41 1a       	lddsp	r10,sp[0x44]
8000f71e:	18 92       	mov	r2,r12
8000f720:	58 0a       	cp.w	r10,0
8000f722:	e0 8a 00 07 	brle	8000f730 <_dtoa_r+0x854>
8000f726:	18 9b       	mov	r11,r12
8000f728:	0e 9c       	mov	r12,r7
8000f72a:	e0 a0 0a d5 	rcall	80010cd4 <__pow5mult>
8000f72e:	18 92       	mov	r2,r12
8000f730:	40 c9       	lddsp	r9,sp[0x30]
8000f732:	58 19       	cp.w	r9,1
8000f734:	e0 89 00 14 	brgt	8000f75c <_dtoa_r+0x880>
8000f738:	40 38       	lddsp	r8,sp[0xc]
8000f73a:	58 08       	cp.w	r8,0
8000f73c:	c1 01       	brne	8000f75c <_dtoa_r+0x880>
8000f73e:	40 29       	lddsp	r9,sp[0x8]
8000f740:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000f744:	c0 c1       	brne	8000f75c <_dtoa_r+0x880>
8000f746:	12 98       	mov	r8,r9
8000f748:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000f74c:	c0 80       	breq	8000f75c <_dtoa_r+0x880>
8000f74e:	40 4c       	lddsp	r12,sp[0x10]
8000f750:	30 1b       	mov	r11,1
8000f752:	2f fc       	sub	r12,-1
8000f754:	2f f0       	sub	r0,-1
8000f756:	50 4c       	stdsp	sp[0x10],r12
8000f758:	50 6b       	stdsp	sp[0x18],r11
8000f75a:	c0 38       	rjmp	8000f760 <_dtoa_r+0x884>
8000f75c:	30 0a       	mov	r10,0
8000f75e:	50 6a       	stdsp	sp[0x18],r10
8000f760:	41 19       	lddsp	r9,sp[0x44]
8000f762:	58 09       	cp.w	r9,0
8000f764:	c0 31       	brne	8000f76a <_dtoa_r+0x88e>
8000f766:	30 1c       	mov	r12,1
8000f768:	c0 98       	rjmp	8000f77a <_dtoa_r+0x89e>
8000f76a:	64 48       	ld.w	r8,r2[0x10]
8000f76c:	2f c8       	sub	r8,-4
8000f76e:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000f772:	e0 a0 08 09 	rcall	80010784 <__hi0bits>
8000f776:	f8 0c 11 20 	rsub	r12,r12,32
8000f77a:	40 4b       	lddsp	r11,sp[0x10]
8000f77c:	f8 0b 00 08 	add	r8,r12,r11
8000f780:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000f784:	c0 c0       	breq	8000f79c <_dtoa_r+0x8c0>
8000f786:	f0 08 11 20 	rsub	r8,r8,32
8000f78a:	58 48       	cp.w	r8,4
8000f78c:	e0 8a 00 06 	brle	8000f798 <_dtoa_r+0x8bc>
8000f790:	20 48       	sub	r8,4
8000f792:	10 0b       	add	r11,r8
8000f794:	50 4b       	stdsp	sp[0x10],r11
8000f796:	c0 78       	rjmp	8000f7a4 <_dtoa_r+0x8c8>
8000f798:	58 48       	cp.w	r8,4
8000f79a:	c0 70       	breq	8000f7a8 <_dtoa_r+0x8cc>
8000f79c:	40 4a       	lddsp	r10,sp[0x10]
8000f79e:	2e 48       	sub	r8,-28
8000f7a0:	10 0a       	add	r10,r8
8000f7a2:	50 4a       	stdsp	sp[0x10],r10
8000f7a4:	10 00       	add	r0,r8
8000f7a6:	10 05       	add	r5,r8
8000f7a8:	58 00       	cp.w	r0,0
8000f7aa:	e0 8a 00 08 	brle	8000f7ba <_dtoa_r+0x8de>
8000f7ae:	06 9b       	mov	r11,r3
8000f7b0:	00 9a       	mov	r10,r0
8000f7b2:	0e 9c       	mov	r12,r7
8000f7b4:	e0 a0 09 86 	rcall	80010ac0 <__lshift>
8000f7b8:	18 93       	mov	r3,r12
8000f7ba:	40 49       	lddsp	r9,sp[0x10]
8000f7bc:	58 09       	cp.w	r9,0
8000f7be:	e0 8a 00 08 	brle	8000f7ce <_dtoa_r+0x8f2>
8000f7c2:	04 9b       	mov	r11,r2
8000f7c4:	12 9a       	mov	r10,r9
8000f7c6:	0e 9c       	mov	r12,r7
8000f7c8:	e0 a0 09 7c 	rcall	80010ac0 <__lshift>
8000f7cc:	18 92       	mov	r2,r12
8000f7ce:	41 48       	lddsp	r8,sp[0x50]
8000f7d0:	58 08       	cp.w	r8,0
8000f7d2:	c1 b0       	breq	8000f808 <_dtoa_r+0x92c>
8000f7d4:	04 9b       	mov	r11,r2
8000f7d6:	06 9c       	mov	r12,r3
8000f7d8:	e0 a0 08 4d 	rcall	80010872 <__mcmp>
8000f7dc:	c1 64       	brge	8000f808 <_dtoa_r+0x92c>
8000f7de:	06 9b       	mov	r11,r3
8000f7e0:	30 09       	mov	r9,0
8000f7e2:	30 aa       	mov	r10,10
8000f7e4:	0e 9c       	mov	r12,r7
8000f7e6:	e0 a0 0a 39 	rcall	80010c58 <__multadd>
8000f7ea:	20 16       	sub	r6,1
8000f7ec:	18 93       	mov	r3,r12
8000f7ee:	40 dc       	lddsp	r12,sp[0x34]
8000f7f0:	58 0c       	cp.w	r12,0
8000f7f2:	c0 31       	brne	8000f7f8 <_dtoa_r+0x91c>
8000f7f4:	40 91       	lddsp	r1,sp[0x24]
8000f7f6:	c0 98       	rjmp	8000f808 <_dtoa_r+0x92c>
8000f7f8:	08 9b       	mov	r11,r4
8000f7fa:	40 91       	lddsp	r1,sp[0x24]
8000f7fc:	30 09       	mov	r9,0
8000f7fe:	30 aa       	mov	r10,10
8000f800:	0e 9c       	mov	r12,r7
8000f802:	e0 a0 0a 2b 	rcall	80010c58 <__multadd>
8000f806:	18 94       	mov	r4,r12
8000f808:	58 01       	cp.w	r1,0
8000f80a:	5f a9       	srle	r9
8000f80c:	40 cb       	lddsp	r11,sp[0x30]
8000f80e:	58 2b       	cp.w	r11,2
8000f810:	5f 98       	srgt	r8
8000f812:	f3 e8 00 08 	and	r8,r9,r8
8000f816:	c2 50       	breq	8000f860 <_dtoa_r+0x984>
8000f818:	58 01       	cp.w	r1,0
8000f81a:	c1 11       	brne	8000f83c <_dtoa_r+0x960>
8000f81c:	04 9b       	mov	r11,r2
8000f81e:	02 99       	mov	r9,r1
8000f820:	30 5a       	mov	r10,5
8000f822:	0e 9c       	mov	r12,r7
8000f824:	e0 a0 0a 1a 	rcall	80010c58 <__multadd>
8000f828:	18 92       	mov	r2,r12
8000f82a:	18 9b       	mov	r11,r12
8000f82c:	06 9c       	mov	r12,r3
8000f82e:	e0 a0 08 22 	rcall	80010872 <__mcmp>
8000f832:	e0 89 00 0f 	brgt	8000f850 <_dtoa_r+0x974>
8000f836:	c0 38       	rjmp	8000f83c <_dtoa_r+0x960>
8000f838:	30 02       	mov	r2,0
8000f83a:	04 94       	mov	r4,r2
8000f83c:	40 ea       	lddsp	r10,sp[0x38]
8000f83e:	30 09       	mov	r9,0
8000f840:	5c da       	com	r10
8000f842:	40 85       	lddsp	r5,sp[0x20]
8000f844:	50 6a       	stdsp	sp[0x18],r10
8000f846:	50 49       	stdsp	sp[0x10],r9
8000f848:	c0 f9       	rjmp	8000fa66 <_dtoa_r+0xb8a>
8000f84a:	08 92       	mov	r2,r4
8000f84c:	40 66       	lddsp	r6,sp[0x18]
8000f84e:	04 94       	mov	r4,r2
8000f850:	2f f6       	sub	r6,-1
8000f852:	50 66       	stdsp	sp[0x18],r6
8000f854:	33 18       	mov	r8,49
8000f856:	40 85       	lddsp	r5,sp[0x20]
8000f858:	0a c8       	st.b	r5++,r8
8000f85a:	30 08       	mov	r8,0
8000f85c:	50 48       	stdsp	sp[0x10],r8
8000f85e:	c0 49       	rjmp	8000fa66 <_dtoa_r+0xb8a>
8000f860:	40 dc       	lddsp	r12,sp[0x34]
8000f862:	58 0c       	cp.w	r12,0
8000f864:	e0 80 00 b5 	breq	8000f9ce <_dtoa_r+0xaf2>
8000f868:	58 05       	cp.w	r5,0
8000f86a:	e0 8a 00 08 	brle	8000f87a <_dtoa_r+0x99e>
8000f86e:	08 9b       	mov	r11,r4
8000f870:	0a 9a       	mov	r10,r5
8000f872:	0e 9c       	mov	r12,r7
8000f874:	e0 a0 09 26 	rcall	80010ac0 <__lshift>
8000f878:	18 94       	mov	r4,r12
8000f87a:	40 6b       	lddsp	r11,sp[0x18]
8000f87c:	58 0b       	cp.w	r11,0
8000f87e:	c0 31       	brne	8000f884 <_dtoa_r+0x9a8>
8000f880:	08 9c       	mov	r12,r4
8000f882:	c1 38       	rjmp	8000f8a8 <_dtoa_r+0x9cc>
8000f884:	68 1b       	ld.w	r11,r4[0x4]
8000f886:	0e 9c       	mov	r12,r7
8000f888:	e0 a0 08 28 	rcall	800108d8 <_Balloc>
8000f88c:	68 4a       	ld.w	r10,r4[0x10]
8000f88e:	18 95       	mov	r5,r12
8000f890:	e8 cb ff f4 	sub	r11,r4,-12
8000f894:	2f ea       	sub	r10,-2
8000f896:	2f 4c       	sub	r12,-12
8000f898:	a3 6a       	lsl	r10,0x2
8000f89a:	fe b0 e7 8c 	rcall	8000c7b2 <memcpy>
8000f89e:	0a 9b       	mov	r11,r5
8000f8a0:	30 1a       	mov	r10,1
8000f8a2:	0e 9c       	mov	r12,r7
8000f8a4:	e0 a0 09 0e 	rcall	80010ac0 <__lshift>
8000f8a8:	50 44       	stdsp	sp[0x10],r4
8000f8aa:	40 3a       	lddsp	r10,sp[0xc]
8000f8ac:	30 19       	mov	r9,1
8000f8ae:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000f8b2:	18 94       	mov	r4,r12
8000f8b4:	50 da       	stdsp	sp[0x34],r10
8000f8b6:	40 85       	lddsp	r5,sp[0x20]
8000f8b8:	50 99       	stdsp	sp[0x24],r9
8000f8ba:	50 26       	stdsp	sp[0x8],r6
8000f8bc:	50 e1       	stdsp	sp[0x38],r1
8000f8be:	04 9b       	mov	r11,r2
8000f8c0:	06 9c       	mov	r12,r3
8000f8c2:	fe b0 fa 7d 	rcall	8000edbc <quorem>
8000f8c6:	40 4b       	lddsp	r11,sp[0x10]
8000f8c8:	f8 c0 ff d0 	sub	r0,r12,-48
8000f8cc:	06 9c       	mov	r12,r3
8000f8ce:	e0 a0 07 d2 	rcall	80010872 <__mcmp>
8000f8d2:	08 9a       	mov	r10,r4
8000f8d4:	50 6c       	stdsp	sp[0x18],r12
8000f8d6:	04 9b       	mov	r11,r2
8000f8d8:	0e 9c       	mov	r12,r7
8000f8da:	e0 a0 08 8b 	rcall	800109f0 <__mdiff>
8000f8de:	18 91       	mov	r1,r12
8000f8e0:	78 38       	ld.w	r8,r12[0xc]
8000f8e2:	58 08       	cp.w	r8,0
8000f8e4:	c0 30       	breq	8000f8ea <_dtoa_r+0xa0e>
8000f8e6:	30 16       	mov	r6,1
8000f8e8:	c0 68       	rjmp	8000f8f4 <_dtoa_r+0xa18>
8000f8ea:	18 9b       	mov	r11,r12
8000f8ec:	06 9c       	mov	r12,r3
8000f8ee:	e0 a0 07 c2 	rcall	80010872 <__mcmp>
8000f8f2:	18 96       	mov	r6,r12
8000f8f4:	0e 9c       	mov	r12,r7
8000f8f6:	02 9b       	mov	r11,r1
8000f8f8:	e0 a0 07 d6 	rcall	800108a4 <_Bfree>
8000f8fc:	40 cc       	lddsp	r12,sp[0x30]
8000f8fe:	ed ec 10 08 	or	r8,r6,r12
8000f902:	c0 d1       	brne	8000f91c <_dtoa_r+0xa40>
8000f904:	40 db       	lddsp	r11,sp[0x34]
8000f906:	58 0b       	cp.w	r11,0
8000f908:	c0 a1       	brne	8000f91c <_dtoa_r+0xa40>
8000f90a:	40 26       	lddsp	r6,sp[0x8]
8000f90c:	e0 40 00 39 	cp.w	r0,57
8000f910:	c3 00       	breq	8000f970 <_dtoa_r+0xa94>
8000f912:	40 6a       	lddsp	r10,sp[0x18]
8000f914:	58 0a       	cp.w	r10,0
8000f916:	e0 89 00 24 	brgt	8000f95e <_dtoa_r+0xa82>
8000f91a:	c2 f8       	rjmp	8000f978 <_dtoa_r+0xa9c>
8000f91c:	40 69       	lddsp	r9,sp[0x18]
8000f91e:	58 09       	cp.w	r9,0
8000f920:	c0 85       	brlt	8000f930 <_dtoa_r+0xa54>
8000f922:	12 98       	mov	r8,r9
8000f924:	40 cc       	lddsp	r12,sp[0x30]
8000f926:	18 48       	or	r8,r12
8000f928:	c1 d1       	brne	8000f962 <_dtoa_r+0xa86>
8000f92a:	40 db       	lddsp	r11,sp[0x34]
8000f92c:	58 0b       	cp.w	r11,0
8000f92e:	c1 a1       	brne	8000f962 <_dtoa_r+0xa86>
8000f930:	0c 99       	mov	r9,r6
8000f932:	40 26       	lddsp	r6,sp[0x8]
8000f934:	58 09       	cp.w	r9,0
8000f936:	e0 8a 00 21 	brle	8000f978 <_dtoa_r+0xa9c>
8000f93a:	06 9b       	mov	r11,r3
8000f93c:	30 1a       	mov	r10,1
8000f93e:	0e 9c       	mov	r12,r7
8000f940:	e0 a0 08 c0 	rcall	80010ac0 <__lshift>
8000f944:	04 9b       	mov	r11,r2
8000f946:	18 93       	mov	r3,r12
8000f948:	e0 a0 07 95 	rcall	80010872 <__mcmp>
8000f94c:	e0 89 00 06 	brgt	8000f958 <_dtoa_r+0xa7c>
8000f950:	c1 41       	brne	8000f978 <_dtoa_r+0xa9c>
8000f952:	ed b0 00 00 	bld	r0,0x0
8000f956:	c1 11       	brne	8000f978 <_dtoa_r+0xa9c>
8000f958:	e0 40 00 39 	cp.w	r0,57
8000f95c:	c0 a0       	breq	8000f970 <_dtoa_r+0xa94>
8000f95e:	2f f0       	sub	r0,-1
8000f960:	c0 c8       	rjmp	8000f978 <_dtoa_r+0xa9c>
8000f962:	58 06       	cp.w	r6,0
8000f964:	e0 8a 00 0c 	brle	8000f97c <_dtoa_r+0xaa0>
8000f968:	40 26       	lddsp	r6,sp[0x8]
8000f96a:	e0 40 00 39 	cp.w	r0,57
8000f96e:	c0 41       	brne	8000f976 <_dtoa_r+0xa9a>
8000f970:	33 98       	mov	r8,57
8000f972:	0a c8       	st.b	r5++,r8
8000f974:	c6 78       	rjmp	8000fa42 <_dtoa_r+0xb66>
8000f976:	2f f0       	sub	r0,-1
8000f978:	0a c0       	st.b	r5++,r0
8000f97a:	c7 58       	rjmp	8000fa64 <_dtoa_r+0xb88>
8000f97c:	0a c0       	st.b	r5++,r0
8000f97e:	40 9a       	lddsp	r10,sp[0x24]
8000f980:	40 e9       	lddsp	r9,sp[0x38]
8000f982:	12 3a       	cp.w	r10,r9
8000f984:	c4 30       	breq	8000fa0a <_dtoa_r+0xb2e>
8000f986:	06 9b       	mov	r11,r3
8000f988:	30 09       	mov	r9,0
8000f98a:	30 aa       	mov	r10,10
8000f98c:	0e 9c       	mov	r12,r7
8000f98e:	e0 a0 09 65 	rcall	80010c58 <__multadd>
8000f992:	40 48       	lddsp	r8,sp[0x10]
8000f994:	18 93       	mov	r3,r12
8000f996:	08 38       	cp.w	r8,r4
8000f998:	c0 91       	brne	8000f9aa <_dtoa_r+0xace>
8000f99a:	10 9b       	mov	r11,r8
8000f99c:	30 09       	mov	r9,0
8000f99e:	30 aa       	mov	r10,10
8000f9a0:	0e 9c       	mov	r12,r7
8000f9a2:	e0 a0 09 5b 	rcall	80010c58 <__multadd>
8000f9a6:	50 4c       	stdsp	sp[0x10],r12
8000f9a8:	c0 e8       	rjmp	8000f9c4 <_dtoa_r+0xae8>
8000f9aa:	40 4b       	lddsp	r11,sp[0x10]
8000f9ac:	30 09       	mov	r9,0
8000f9ae:	30 aa       	mov	r10,10
8000f9b0:	0e 9c       	mov	r12,r7
8000f9b2:	e0 a0 09 53 	rcall	80010c58 <__multadd>
8000f9b6:	08 9b       	mov	r11,r4
8000f9b8:	50 4c       	stdsp	sp[0x10],r12
8000f9ba:	30 09       	mov	r9,0
8000f9bc:	30 aa       	mov	r10,10
8000f9be:	0e 9c       	mov	r12,r7
8000f9c0:	e0 a0 09 4c 	rcall	80010c58 <__multadd>
8000f9c4:	18 94       	mov	r4,r12
8000f9c6:	40 9c       	lddsp	r12,sp[0x24]
8000f9c8:	2f fc       	sub	r12,-1
8000f9ca:	50 9c       	stdsp	sp[0x24],r12
8000f9cc:	c7 9b       	rjmp	8000f8be <_dtoa_r+0x9e2>
8000f9ce:	30 18       	mov	r8,1
8000f9d0:	06 90       	mov	r0,r3
8000f9d2:	40 85       	lddsp	r5,sp[0x20]
8000f9d4:	08 93       	mov	r3,r4
8000f9d6:	0c 94       	mov	r4,r6
8000f9d8:	10 96       	mov	r6,r8
8000f9da:	04 9b       	mov	r11,r2
8000f9dc:	00 9c       	mov	r12,r0
8000f9de:	fe b0 f9 ef 	rcall	8000edbc <quorem>
8000f9e2:	2d 0c       	sub	r12,-48
8000f9e4:	0a cc       	st.b	r5++,r12
8000f9e6:	02 36       	cp.w	r6,r1
8000f9e8:	c0 a4       	brge	8000f9fc <_dtoa_r+0xb20>
8000f9ea:	00 9b       	mov	r11,r0
8000f9ec:	30 09       	mov	r9,0
8000f9ee:	30 aa       	mov	r10,10
8000f9f0:	0e 9c       	mov	r12,r7
8000f9f2:	2f f6       	sub	r6,-1
8000f9f4:	e0 a0 09 32 	rcall	80010c58 <__multadd>
8000f9f8:	18 90       	mov	r0,r12
8000f9fa:	cf 0b       	rjmp	8000f9da <_dtoa_r+0xafe>
8000f9fc:	08 96       	mov	r6,r4
8000f9fe:	30 0b       	mov	r11,0
8000fa00:	06 94       	mov	r4,r3
8000fa02:	50 4b       	stdsp	sp[0x10],r11
8000fa04:	00 93       	mov	r3,r0
8000fa06:	18 90       	mov	r0,r12
8000fa08:	c0 28       	rjmp	8000fa0c <_dtoa_r+0xb30>
8000fa0a:	40 26       	lddsp	r6,sp[0x8]
8000fa0c:	06 9b       	mov	r11,r3
8000fa0e:	30 1a       	mov	r10,1
8000fa10:	0e 9c       	mov	r12,r7
8000fa12:	e0 a0 08 57 	rcall	80010ac0 <__lshift>
8000fa16:	04 9b       	mov	r11,r2
8000fa18:	18 93       	mov	r3,r12
8000fa1a:	e0 a0 07 2c 	rcall	80010872 <__mcmp>
8000fa1e:	e0 89 00 12 	brgt	8000fa42 <_dtoa_r+0xb66>
8000fa22:	c1 b1       	brne	8000fa58 <_dtoa_r+0xb7c>
8000fa24:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000fa28:	c0 d1       	brne	8000fa42 <_dtoa_r+0xb66>
8000fa2a:	c1 78       	rjmp	8000fa58 <_dtoa_r+0xb7c>
8000fa2c:	40 89       	lddsp	r9,sp[0x20]
8000fa2e:	12 38       	cp.w	r8,r9
8000fa30:	c0 30       	breq	8000fa36 <_dtoa_r+0xb5a>
8000fa32:	10 95       	mov	r5,r8
8000fa34:	c0 88       	rjmp	8000fa44 <_dtoa_r+0xb68>
8000fa36:	2f f6       	sub	r6,-1
8000fa38:	50 66       	stdsp	sp[0x18],r6
8000fa3a:	33 18       	mov	r8,49
8000fa3c:	40 8c       	lddsp	r12,sp[0x20]
8000fa3e:	b8 88       	st.b	r12[0x0],r8
8000fa40:	c1 38       	rjmp	8000fa66 <_dtoa_r+0xb8a>
8000fa42:	33 9a       	mov	r10,57
8000fa44:	0a 98       	mov	r8,r5
8000fa46:	11 79       	ld.ub	r9,--r8
8000fa48:	f4 09 18 00 	cp.b	r9,r10
8000fa4c:	cf 00       	breq	8000fa2c <_dtoa_r+0xb50>
8000fa4e:	2f f9       	sub	r9,-1
8000fa50:	b0 89       	st.b	r8[0x0],r9
8000fa52:	c0 98       	rjmp	8000fa64 <_dtoa_r+0xb88>
8000fa54:	10 95       	mov	r5,r8
8000fa56:	c0 28       	rjmp	8000fa5a <_dtoa_r+0xb7e>
8000fa58:	33 09       	mov	r9,48
8000fa5a:	0a 98       	mov	r8,r5
8000fa5c:	11 7a       	ld.ub	r10,--r8
8000fa5e:	f2 0a 18 00 	cp.b	r10,r9
8000fa62:	cf 90       	breq	8000fa54 <_dtoa_r+0xb78>
8000fa64:	50 66       	stdsp	sp[0x18],r6
8000fa66:	04 9b       	mov	r11,r2
8000fa68:	0e 9c       	mov	r12,r7
8000fa6a:	e0 a0 07 1d 	rcall	800108a4 <_Bfree>
8000fa6e:	58 04       	cp.w	r4,0
8000fa70:	c1 20       	breq	8000fa94 <_dtoa_r+0xbb8>
8000fa72:	40 4b       	lddsp	r11,sp[0x10]
8000fa74:	08 3b       	cp.w	r11,r4
8000fa76:	5f 19       	srne	r9
8000fa78:	58 0b       	cp.w	r11,0
8000fa7a:	5f 18       	srne	r8
8000fa7c:	f3 e8 00 08 	and	r8,r9,r8
8000fa80:	c0 40       	breq	8000fa88 <_dtoa_r+0xbac>
8000fa82:	0e 9c       	mov	r12,r7
8000fa84:	e0 a0 07 10 	rcall	800108a4 <_Bfree>
8000fa88:	08 9b       	mov	r11,r4
8000fa8a:	0e 9c       	mov	r12,r7
8000fa8c:	e0 a0 07 0c 	rcall	800108a4 <_Bfree>
8000fa90:	c0 28       	rjmp	8000fa94 <_dtoa_r+0xbb8>
8000fa92:	50 66       	stdsp	sp[0x18],r6
8000fa94:	0e 9c       	mov	r12,r7
8000fa96:	06 9b       	mov	r11,r3
8000fa98:	e0 a0 07 06 	rcall	800108a4 <_Bfree>
8000fa9c:	30 08       	mov	r8,0
8000fa9e:	aa 88       	st.b	r5[0x0],r8
8000faa0:	40 68       	lddsp	r8,sp[0x18]
8000faa2:	41 5a       	lddsp	r10,sp[0x54]
8000faa4:	2f f8       	sub	r8,-1
8000faa6:	41 29       	lddsp	r9,sp[0x48]
8000faa8:	95 08       	st.w	r10[0x0],r8
8000faaa:	40 8c       	lddsp	r12,sp[0x20]
8000faac:	58 09       	cp.w	r9,0
8000faae:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000fab2:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000fab6:	2e 6d       	sub	sp,-104
8000fab8:	d8 32       	popm	r0-r7,pc
8000faba:	d7 03       	nop

8000fabc <_fflush_r>:
8000fabc:	d4 21       	pushm	r4-r7,lr
8000fabe:	16 97       	mov	r7,r11
8000fac0:	18 96       	mov	r6,r12
8000fac2:	76 48       	ld.w	r8,r11[0x10]
8000fac4:	58 08       	cp.w	r8,0
8000fac6:	c7 c0       	breq	8000fbbe <_fflush_r+0x102>
8000fac8:	58 0c       	cp.w	r12,0
8000faca:	c0 50       	breq	8000fad4 <_fflush_r+0x18>
8000facc:	78 68       	ld.w	r8,r12[0x18]
8000face:	58 08       	cp.w	r8,0
8000fad0:	c0 21       	brne	8000fad4 <_fflush_r+0x18>
8000fad2:	cd 1c       	rcall	8000fc74 <__sinit>
8000fad4:	4b b8       	lddpc	r8,8000fbc0 <_fflush_r+0x104>
8000fad6:	10 37       	cp.w	r7,r8
8000fad8:	c0 31       	brne	8000fade <_fflush_r+0x22>
8000fada:	6c 07       	ld.w	r7,r6[0x0]
8000fadc:	c0 a8       	rjmp	8000faf0 <_fflush_r+0x34>
8000fade:	4b a8       	lddpc	r8,8000fbc4 <_fflush_r+0x108>
8000fae0:	10 37       	cp.w	r7,r8
8000fae2:	c0 31       	brne	8000fae8 <_fflush_r+0x2c>
8000fae4:	6c 17       	ld.w	r7,r6[0x4]
8000fae6:	c0 58       	rjmp	8000faf0 <_fflush_r+0x34>
8000fae8:	4b 88       	lddpc	r8,8000fbc8 <_fflush_r+0x10c>
8000faea:	10 37       	cp.w	r7,r8
8000faec:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000faf0:	8e 6a       	ld.sh	r10,r7[0xc]
8000faf2:	14 98       	mov	r8,r10
8000faf4:	ed ba 00 03 	bld	r10,0x3
8000faf8:	c4 20       	breq	8000fb7c <_fflush_r+0xc0>
8000fafa:	ab ba       	sbr	r10,0xb
8000fafc:	ae 6a       	st.h	r7[0xc],r10
8000fafe:	6e 18       	ld.w	r8,r7[0x4]
8000fb00:	58 08       	cp.w	r8,0
8000fb02:	e0 89 00 06 	brgt	8000fb0e <_fflush_r+0x52>
8000fb06:	6f 08       	ld.w	r8,r7[0x40]
8000fb08:	58 08       	cp.w	r8,0
8000fb0a:	e0 8a 00 5a 	brle	8000fbbe <_fflush_r+0x102>
8000fb0e:	6e b8       	ld.w	r8,r7[0x2c]
8000fb10:	58 08       	cp.w	r8,0
8000fb12:	c5 60       	breq	8000fbbe <_fflush_r+0x102>
8000fb14:	e2 1a 10 00 	andl	r10,0x1000,COH
8000fb18:	c0 30       	breq	8000fb1e <_fflush_r+0x62>
8000fb1a:	6f 55       	ld.w	r5,r7[0x54]
8000fb1c:	c0 f8       	rjmp	8000fb3a <_fflush_r+0x7e>
8000fb1e:	30 19       	mov	r9,1
8000fb20:	6e 8b       	ld.w	r11,r7[0x20]
8000fb22:	0c 9c       	mov	r12,r6
8000fb24:	5d 18       	icall	r8
8000fb26:	18 95       	mov	r5,r12
8000fb28:	5b fc       	cp.w	r12,-1
8000fb2a:	c0 81       	brne	8000fb3a <_fflush_r+0x7e>
8000fb2c:	6c 38       	ld.w	r8,r6[0xc]
8000fb2e:	59 d8       	cp.w	r8,29
8000fb30:	c4 70       	breq	8000fbbe <_fflush_r+0x102>
8000fb32:	8e 68       	ld.sh	r8,r7[0xc]
8000fb34:	a7 a8       	sbr	r8,0x6
8000fb36:	ae 68       	st.h	r7[0xc],r8
8000fb38:	d8 22       	popm	r4-r7,pc
8000fb3a:	8e 68       	ld.sh	r8,r7[0xc]
8000fb3c:	ed b8 00 02 	bld	r8,0x2
8000fb40:	c0 91       	brne	8000fb52 <_fflush_r+0x96>
8000fb42:	6e 18       	ld.w	r8,r7[0x4]
8000fb44:	10 15       	sub	r5,r8
8000fb46:	6e d8       	ld.w	r8,r7[0x34]
8000fb48:	58 08       	cp.w	r8,0
8000fb4a:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000fb4e:	eb d8 e1 15 	subne	r5,r5,r8
8000fb52:	6e b8       	ld.w	r8,r7[0x2c]
8000fb54:	0c 9c       	mov	r12,r6
8000fb56:	30 09       	mov	r9,0
8000fb58:	0a 9a       	mov	r10,r5
8000fb5a:	6e 8b       	ld.w	r11,r7[0x20]
8000fb5c:	5d 18       	icall	r8
8000fb5e:	8e 68       	ld.sh	r8,r7[0xc]
8000fb60:	0a 3c       	cp.w	r12,r5
8000fb62:	c2 61       	brne	8000fbae <_fflush_r+0xf2>
8000fb64:	ab d8       	cbr	r8,0xb
8000fb66:	30 0c       	mov	r12,0
8000fb68:	6e 49       	ld.w	r9,r7[0x10]
8000fb6a:	ae 68       	st.h	r7[0xc],r8
8000fb6c:	8f 1c       	st.w	r7[0x4],r12
8000fb6e:	8f 09       	st.w	r7[0x0],r9
8000fb70:	ed b8 00 0c 	bld	r8,0xc
8000fb74:	c2 51       	brne	8000fbbe <_fflush_r+0x102>
8000fb76:	ef 45 00 54 	st.w	r7[84],r5
8000fb7a:	d8 22       	popm	r4-r7,pc
8000fb7c:	6e 45       	ld.w	r5,r7[0x10]
8000fb7e:	58 05       	cp.w	r5,0
8000fb80:	c1 f0       	breq	8000fbbe <_fflush_r+0x102>
8000fb82:	6e 04       	ld.w	r4,r7[0x0]
8000fb84:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000fb88:	8f 05       	st.w	r7[0x0],r5
8000fb8a:	f9 b8 01 00 	movne	r8,0
8000fb8e:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000fb92:	0a 14       	sub	r4,r5
8000fb94:	8f 28       	st.w	r7[0x8],r8
8000fb96:	c1 18       	rjmp	8000fbb8 <_fflush_r+0xfc>
8000fb98:	08 99       	mov	r9,r4
8000fb9a:	0a 9a       	mov	r10,r5
8000fb9c:	6e a8       	ld.w	r8,r7[0x28]
8000fb9e:	6e 8b       	ld.w	r11,r7[0x20]
8000fba0:	0c 9c       	mov	r12,r6
8000fba2:	5d 18       	icall	r8
8000fba4:	18 14       	sub	r4,r12
8000fba6:	58 0c       	cp.w	r12,0
8000fba8:	e0 89 00 07 	brgt	8000fbb6 <_fflush_r+0xfa>
8000fbac:	8e 68       	ld.sh	r8,r7[0xc]
8000fbae:	a7 a8       	sbr	r8,0x6
8000fbb0:	3f fc       	mov	r12,-1
8000fbb2:	ae 68       	st.h	r7[0xc],r8
8000fbb4:	d8 22       	popm	r4-r7,pc
8000fbb6:	18 05       	add	r5,r12
8000fbb8:	58 04       	cp.w	r4,0
8000fbba:	fe 99 ff ef 	brgt	8000fb98 <_fflush_r+0xdc>
8000fbbe:	d8 2a       	popm	r4-r7,pc,r12=0
8000fbc0:	80 01       	ld.sh	r1,r0[0x0]
8000fbc2:	3e b0       	mov	r0,-21
8000fbc4:	80 01       	ld.sh	r1,r0[0x0]
8000fbc6:	3e d0       	mov	r0,-19
8000fbc8:	80 01       	ld.sh	r1,r0[0x0]
8000fbca:	3e f0       	mov	r0,-17

8000fbcc <__sfp_lock_acquire>:
8000fbcc:	5e fc       	retal	r12

8000fbce <__sfp_lock_release>:
8000fbce:	5e fc       	retal	r12

8000fbd0 <_cleanup_r>:
8000fbd0:	d4 01       	pushm	lr
8000fbd2:	fe cb e8 32 	sub	r11,pc,-6094
8000fbd6:	e0 a0 03 05 	rcall	800101e0 <_fwalk>
8000fbda:	d8 02       	popm	pc

8000fbdc <__sfmoreglue>:
8000fbdc:	d4 21       	pushm	r4-r7,lr
8000fbde:	16 95       	mov	r5,r11
8000fbe0:	f6 06 10 5c 	mul	r6,r11,92
8000fbe4:	ec cb ff f4 	sub	r11,r6,-12
8000fbe8:	e0 a0 03 88 	rcall	800102f8 <_malloc_r>
8000fbec:	18 97       	mov	r7,r12
8000fbee:	c0 90       	breq	8000fc00 <__sfmoreglue+0x24>
8000fbf0:	99 15       	st.w	r12[0x4],r5
8000fbf2:	30 0b       	mov	r11,0
8000fbf4:	2f 4c       	sub	r12,-12
8000fbf6:	0c 9a       	mov	r10,r6
8000fbf8:	8f 2c       	st.w	r7[0x8],r12
8000fbfa:	8f 0b       	st.w	r7[0x0],r11
8000fbfc:	fe b0 e6 7f 	rcall	8000c8fa <memset>
8000fc00:	0e 9c       	mov	r12,r7
8000fc02:	d8 22       	popm	r4-r7,pc

8000fc04 <__sfp>:
8000fc04:	d4 21       	pushm	r4-r7,lr
8000fc06:	49 b8       	lddpc	r8,8000fc70 <__sfp+0x6c>
8000fc08:	18 96       	mov	r6,r12
8000fc0a:	70 07       	ld.w	r7,r8[0x0]
8000fc0c:	6e 68       	ld.w	r8,r7[0x18]
8000fc0e:	58 08       	cp.w	r8,0
8000fc10:	c0 31       	brne	8000fc16 <__sfp+0x12>
8000fc12:	0e 9c       	mov	r12,r7
8000fc14:	c3 0c       	rcall	8000fc74 <__sinit>
8000fc16:	ee c7 ff 28 	sub	r7,r7,-216
8000fc1a:	30 05       	mov	r5,0
8000fc1c:	6e 2c       	ld.w	r12,r7[0x8]
8000fc1e:	6e 18       	ld.w	r8,r7[0x4]
8000fc20:	c0 68       	rjmp	8000fc2c <__sfp+0x28>
8000fc22:	98 69       	ld.sh	r9,r12[0xc]
8000fc24:	ea 09 19 00 	cp.h	r9,r5
8000fc28:	c1 10       	breq	8000fc4a <__sfp+0x46>
8000fc2a:	2a 4c       	sub	r12,-92
8000fc2c:	20 18       	sub	r8,1
8000fc2e:	cf a7       	brpl	8000fc22 <__sfp+0x1e>
8000fc30:	6e 08       	ld.w	r8,r7[0x0]
8000fc32:	58 08       	cp.w	r8,0
8000fc34:	c0 61       	brne	8000fc40 <__sfp+0x3c>
8000fc36:	30 4b       	mov	r11,4
8000fc38:	0c 9c       	mov	r12,r6
8000fc3a:	cd 1f       	rcall	8000fbdc <__sfmoreglue>
8000fc3c:	8f 0c       	st.w	r7[0x0],r12
8000fc3e:	c0 30       	breq	8000fc44 <__sfp+0x40>
8000fc40:	6e 07       	ld.w	r7,r7[0x0]
8000fc42:	ce db       	rjmp	8000fc1c <__sfp+0x18>
8000fc44:	30 c8       	mov	r8,12
8000fc46:	8d 38       	st.w	r6[0xc],r8
8000fc48:	d8 22       	popm	r4-r7,pc
8000fc4a:	30 08       	mov	r8,0
8000fc4c:	f9 48 00 4c 	st.w	r12[76],r8
8000fc50:	99 08       	st.w	r12[0x0],r8
8000fc52:	99 28       	st.w	r12[0x8],r8
8000fc54:	99 18       	st.w	r12[0x4],r8
8000fc56:	99 48       	st.w	r12[0x10],r8
8000fc58:	99 58       	st.w	r12[0x14],r8
8000fc5a:	99 68       	st.w	r12[0x18],r8
8000fc5c:	99 d8       	st.w	r12[0x34],r8
8000fc5e:	99 e8       	st.w	r12[0x38],r8
8000fc60:	f9 48 00 48 	st.w	r12[72],r8
8000fc64:	3f f8       	mov	r8,-1
8000fc66:	b8 78       	st.h	r12[0xe],r8
8000fc68:	30 18       	mov	r8,1
8000fc6a:	b8 68       	st.h	r12[0xc],r8
8000fc6c:	d8 22       	popm	r4-r7,pc
8000fc6e:	d7 03       	nop
8000fc70:	80 01       	ld.sh	r1,r0[0x0]
8000fc72:	3a c8       	mov	r8,-84

8000fc74 <__sinit>:
8000fc74:	d4 21       	pushm	r4-r7,lr
8000fc76:	18 96       	mov	r6,r12
8000fc78:	78 67       	ld.w	r7,r12[0x18]
8000fc7a:	58 07       	cp.w	r7,0
8000fc7c:	c4 91       	brne	8000fd0e <__sinit+0x9a>
8000fc7e:	fe c8 00 ae 	sub	r8,pc,174
8000fc82:	30 15       	mov	r5,1
8000fc84:	99 a8       	st.w	r12[0x28],r8
8000fc86:	f9 47 00 d8 	st.w	r12[216],r7
8000fc8a:	f9 47 00 dc 	st.w	r12[220],r7
8000fc8e:	f9 47 00 e0 	st.w	r12[224],r7
8000fc92:	99 65       	st.w	r12[0x18],r5
8000fc94:	cb 8f       	rcall	8000fc04 <__sfp>
8000fc96:	8d 0c       	st.w	r6[0x0],r12
8000fc98:	0c 9c       	mov	r12,r6
8000fc9a:	cb 5f       	rcall	8000fc04 <__sfp>
8000fc9c:	8d 1c       	st.w	r6[0x4],r12
8000fc9e:	0c 9c       	mov	r12,r6
8000fca0:	cb 2f       	rcall	8000fc04 <__sfp>
8000fca2:	6c 09       	ld.w	r9,r6[0x0]
8000fca4:	30 48       	mov	r8,4
8000fca6:	93 07       	st.w	r9[0x0],r7
8000fca8:	b2 68       	st.h	r9[0xc],r8
8000fcaa:	93 17       	st.w	r9[0x4],r7
8000fcac:	93 27       	st.w	r9[0x8],r7
8000fcae:	6c 18       	ld.w	r8,r6[0x4]
8000fcb0:	b2 77       	st.h	r9[0xe],r7
8000fcb2:	93 47       	st.w	r9[0x10],r7
8000fcb4:	93 57       	st.w	r9[0x14],r7
8000fcb6:	93 67       	st.w	r9[0x18],r7
8000fcb8:	93 89       	st.w	r9[0x20],r9
8000fcba:	91 07       	st.w	r8[0x0],r7
8000fcbc:	91 17       	st.w	r8[0x4],r7
8000fcbe:	91 27       	st.w	r8[0x8],r7
8000fcc0:	fe ce eb d4 	sub	lr,pc,-5164
8000fcc4:	fe cb ec 04 	sub	r11,pc,-5116
8000fcc8:	93 9e       	st.w	r9[0x24],lr
8000fcca:	93 ab       	st.w	r9[0x28],r11
8000fccc:	fe ca ec 34 	sub	r10,pc,-5068
8000fcd0:	fe c4 ec 40 	sub	r4,pc,-5056
8000fcd4:	93 ba       	st.w	r9[0x2c],r10
8000fcd6:	93 c4       	st.w	r9[0x30],r4
8000fcd8:	30 99       	mov	r9,9
8000fcda:	b0 69       	st.h	r8[0xc],r9
8000fcdc:	b0 75       	st.h	r8[0xe],r5
8000fcde:	91 c4       	st.w	r8[0x30],r4
8000fce0:	91 47       	st.w	r8[0x10],r7
8000fce2:	91 57       	st.w	r8[0x14],r7
8000fce4:	91 67       	st.w	r8[0x18],r7
8000fce6:	91 88       	st.w	r8[0x20],r8
8000fce8:	91 9e       	st.w	r8[0x24],lr
8000fcea:	91 ab       	st.w	r8[0x28],r11
8000fcec:	91 ba       	st.w	r8[0x2c],r10
8000fcee:	8d 2c       	st.w	r6[0x8],r12
8000fcf0:	31 28       	mov	r8,18
8000fcf2:	99 07       	st.w	r12[0x0],r7
8000fcf4:	b8 68       	st.h	r12[0xc],r8
8000fcf6:	99 17       	st.w	r12[0x4],r7
8000fcf8:	99 27       	st.w	r12[0x8],r7
8000fcfa:	30 28       	mov	r8,2
8000fcfc:	b8 78       	st.h	r12[0xe],r8
8000fcfe:	99 c4       	st.w	r12[0x30],r4
8000fd00:	99 67       	st.w	r12[0x18],r7
8000fd02:	99 9e       	st.w	r12[0x24],lr
8000fd04:	99 ab       	st.w	r12[0x28],r11
8000fd06:	99 ba       	st.w	r12[0x2c],r10
8000fd08:	99 47       	st.w	r12[0x10],r7
8000fd0a:	99 57       	st.w	r12[0x14],r7
8000fd0c:	99 8c       	st.w	r12[0x20],r12
8000fd0e:	d8 22       	popm	r4-r7,pc

8000fd10 <_malloc_trim_r>:
8000fd10:	d4 21       	pushm	r4-r7,lr
8000fd12:	16 95       	mov	r5,r11
8000fd14:	18 97       	mov	r7,r12
8000fd16:	e0 a0 05 35 	rcall	80010780 <__malloc_lock>
8000fd1a:	4a 24       	lddpc	r4,8000fda0 <_malloc_trim_r+0x90>
8000fd1c:	68 28       	ld.w	r8,r4[0x8]
8000fd1e:	70 16       	ld.w	r6,r8[0x4]
8000fd20:	e0 16 ff fc 	andl	r6,0xfffc
8000fd24:	ec c8 ff 91 	sub	r8,r6,-111
8000fd28:	f0 05 01 05 	sub	r5,r8,r5
8000fd2c:	e0 15 ff 80 	andl	r5,0xff80
8000fd30:	ea c5 00 80 	sub	r5,r5,128
8000fd34:	e0 45 00 7f 	cp.w	r5,127
8000fd38:	e0 8a 00 23 	brle	8000fd7e <_malloc_trim_r+0x6e>
8000fd3c:	30 0b       	mov	r11,0
8000fd3e:	0e 9c       	mov	r12,r7
8000fd40:	e0 a0 09 74 	rcall	80011028 <_sbrk_r>
8000fd44:	68 28       	ld.w	r8,r4[0x8]
8000fd46:	0c 08       	add	r8,r6
8000fd48:	10 3c       	cp.w	r12,r8
8000fd4a:	c1 a1       	brne	8000fd7e <_malloc_trim_r+0x6e>
8000fd4c:	ea 0b 11 00 	rsub	r11,r5,0
8000fd50:	0e 9c       	mov	r12,r7
8000fd52:	e0 a0 09 6b 	rcall	80011028 <_sbrk_r>
8000fd56:	5b fc       	cp.w	r12,-1
8000fd58:	c1 71       	brne	8000fd86 <_malloc_trim_r+0x76>
8000fd5a:	30 0b       	mov	r11,0
8000fd5c:	0e 9c       	mov	r12,r7
8000fd5e:	e0 a0 09 65 	rcall	80011028 <_sbrk_r>
8000fd62:	68 28       	ld.w	r8,r4[0x8]
8000fd64:	f8 08 01 09 	sub	r9,r12,r8
8000fd68:	58 f9       	cp.w	r9,15
8000fd6a:	e0 8a 00 0a 	brle	8000fd7e <_malloc_trim_r+0x6e>
8000fd6e:	a1 a9       	sbr	r9,0x0
8000fd70:	91 19       	st.w	r8[0x4],r9
8000fd72:	48 d8       	lddpc	r8,8000fda4 <_malloc_trim_r+0x94>
8000fd74:	70 09       	ld.w	r9,r8[0x0]
8000fd76:	48 d8       	lddpc	r8,8000fda8 <_malloc_trim_r+0x98>
8000fd78:	f8 09 01 09 	sub	r9,r12,r9
8000fd7c:	91 09       	st.w	r8[0x0],r9
8000fd7e:	0e 9c       	mov	r12,r7
8000fd80:	e0 a0 05 01 	rcall	80010782 <__malloc_unlock>
8000fd84:	d8 2a       	popm	r4-r7,pc,r12=0
8000fd86:	68 28       	ld.w	r8,r4[0x8]
8000fd88:	0a 16       	sub	r6,r5
8000fd8a:	a1 a6       	sbr	r6,0x0
8000fd8c:	91 16       	st.w	r8[0x4],r6
8000fd8e:	48 78       	lddpc	r8,8000fda8 <_malloc_trim_r+0x98>
8000fd90:	70 09       	ld.w	r9,r8[0x0]
8000fd92:	0a 19       	sub	r9,r5
8000fd94:	0e 9c       	mov	r12,r7
8000fd96:	91 09       	st.w	r8[0x0],r9
8000fd98:	e0 a0 04 f5 	rcall	80010782 <__malloc_unlock>
8000fd9c:	da 2a       	popm	r4-r7,pc,r12=1
8000fd9e:	d7 03       	nop
8000fda0:	00 00       	add	r0,r0
8000fda2:	0d 08       	ld.w	r8,r6++
8000fda4:	00 00       	add	r0,r0
8000fda6:	11 14       	ld.sh	r4,r8++
8000fda8:	00 00       	add	r0,r0
8000fdaa:	15 14       	ld.sh	r4,r10++

8000fdac <_free_r>:
8000fdac:	d4 21       	pushm	r4-r7,lr
8000fdae:	16 96       	mov	r6,r11
8000fdb0:	18 97       	mov	r7,r12
8000fdb2:	58 0b       	cp.w	r11,0
8000fdb4:	e0 80 00 c2 	breq	8000ff38 <_free_r+0x18c>
8000fdb8:	e0 a0 04 e4 	rcall	80010780 <__malloc_lock>
8000fdbc:	20 86       	sub	r6,8
8000fdbe:	4c ca       	lddpc	r10,8000feec <_free_r+0x140>
8000fdc0:	6c 18       	ld.w	r8,r6[0x4]
8000fdc2:	74 2e       	ld.w	lr,r10[0x8]
8000fdc4:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000fdc8:	a1 c8       	cbr	r8,0x0
8000fdca:	ec 08 00 09 	add	r9,r6,r8
8000fdce:	72 1b       	ld.w	r11,r9[0x4]
8000fdd0:	e0 1b ff fc 	andl	r11,0xfffc
8000fdd4:	1c 39       	cp.w	r9,lr
8000fdd6:	c1 c1       	brne	8000fe0e <_free_r+0x62>
8000fdd8:	f6 08 00 08 	add	r8,r11,r8
8000fddc:	58 0c       	cp.w	r12,0
8000fdde:	c0 81       	brne	8000fdee <_free_r+0x42>
8000fde0:	6c 09       	ld.w	r9,r6[0x0]
8000fde2:	12 16       	sub	r6,r9
8000fde4:	12 08       	add	r8,r9
8000fde6:	6c 3b       	ld.w	r11,r6[0xc]
8000fde8:	6c 29       	ld.w	r9,r6[0x8]
8000fdea:	97 29       	st.w	r11[0x8],r9
8000fdec:	93 3b       	st.w	r9[0xc],r11
8000fdee:	10 99       	mov	r9,r8
8000fdf0:	95 26       	st.w	r10[0x8],r6
8000fdf2:	a1 a9       	sbr	r9,0x0
8000fdf4:	8d 19       	st.w	r6[0x4],r9
8000fdf6:	4b f9       	lddpc	r9,8000fef0 <_free_r+0x144>
8000fdf8:	72 09       	ld.w	r9,r9[0x0]
8000fdfa:	12 38       	cp.w	r8,r9
8000fdfc:	c0 53       	brcs	8000fe06 <_free_r+0x5a>
8000fdfe:	4b e8       	lddpc	r8,8000fef4 <_free_r+0x148>
8000fe00:	0e 9c       	mov	r12,r7
8000fe02:	70 0b       	ld.w	r11,r8[0x0]
8000fe04:	c8 6f       	rcall	8000fd10 <_malloc_trim_r>
8000fe06:	0e 9c       	mov	r12,r7
8000fe08:	e0 a0 04 bd 	rcall	80010782 <__malloc_unlock>
8000fe0c:	d8 22       	popm	r4-r7,pc
8000fe0e:	93 1b       	st.w	r9[0x4],r11
8000fe10:	58 0c       	cp.w	r12,0
8000fe12:	c0 30       	breq	8000fe18 <_free_r+0x6c>
8000fe14:	30 0c       	mov	r12,0
8000fe16:	c1 08       	rjmp	8000fe36 <_free_r+0x8a>
8000fe18:	6c 0e       	ld.w	lr,r6[0x0]
8000fe1a:	f4 c5 ff f8 	sub	r5,r10,-8
8000fe1e:	1c 16       	sub	r6,lr
8000fe20:	1c 08       	add	r8,lr
8000fe22:	6c 2e       	ld.w	lr,r6[0x8]
8000fe24:	0a 3e       	cp.w	lr,r5
8000fe26:	f9 bc 00 01 	moveq	r12,1
8000fe2a:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000fe2e:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000fe32:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000fe36:	f2 0b 00 0e 	add	lr,r9,r11
8000fe3a:	7c 1e       	ld.w	lr,lr[0x4]
8000fe3c:	ed be 00 00 	bld	lr,0x0
8000fe40:	c1 30       	breq	8000fe66 <_free_r+0xba>
8000fe42:	16 08       	add	r8,r11
8000fe44:	58 0c       	cp.w	r12,0
8000fe46:	c0 c1       	brne	8000fe5e <_free_r+0xb2>
8000fe48:	4a 9e       	lddpc	lr,8000feec <_free_r+0x140>
8000fe4a:	72 2b       	ld.w	r11,r9[0x8]
8000fe4c:	2f 8e       	sub	lr,-8
8000fe4e:	1c 3b       	cp.w	r11,lr
8000fe50:	c0 71       	brne	8000fe5e <_free_r+0xb2>
8000fe52:	97 36       	st.w	r11[0xc],r6
8000fe54:	97 26       	st.w	r11[0x8],r6
8000fe56:	8d 2b       	st.w	r6[0x8],r11
8000fe58:	8d 3b       	st.w	r6[0xc],r11
8000fe5a:	30 1c       	mov	r12,1
8000fe5c:	c0 58       	rjmp	8000fe66 <_free_r+0xba>
8000fe5e:	72 2b       	ld.w	r11,r9[0x8]
8000fe60:	72 39       	ld.w	r9,r9[0xc]
8000fe62:	93 2b       	st.w	r9[0x8],r11
8000fe64:	97 39       	st.w	r11[0xc],r9
8000fe66:	10 99       	mov	r9,r8
8000fe68:	ec 08 09 08 	st.w	r6[r8],r8
8000fe6c:	a1 a9       	sbr	r9,0x0
8000fe6e:	8d 19       	st.w	r6[0x4],r9
8000fe70:	58 0c       	cp.w	r12,0
8000fe72:	c6 01       	brne	8000ff32 <_free_r+0x186>
8000fe74:	e0 48 01 ff 	cp.w	r8,511
8000fe78:	e0 8b 00 13 	brhi	8000fe9e <_free_r+0xf2>
8000fe7c:	a3 98       	lsr	r8,0x3
8000fe7e:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000fe82:	72 2b       	ld.w	r11,r9[0x8]
8000fe84:	8d 39       	st.w	r6[0xc],r9
8000fe86:	8d 2b       	st.w	r6[0x8],r11
8000fe88:	97 36       	st.w	r11[0xc],r6
8000fe8a:	93 26       	st.w	r9[0x8],r6
8000fe8c:	a3 48       	asr	r8,0x2
8000fe8e:	74 19       	ld.w	r9,r10[0x4]
8000fe90:	30 1b       	mov	r11,1
8000fe92:	f6 08 09 48 	lsl	r8,r11,r8
8000fe96:	f3 e8 10 08 	or	r8,r9,r8
8000fe9a:	95 18       	st.w	r10[0x4],r8
8000fe9c:	c4 b8       	rjmp	8000ff32 <_free_r+0x186>
8000fe9e:	f0 09 16 09 	lsr	r9,r8,0x9
8000fea2:	58 49       	cp.w	r9,4
8000fea4:	e0 8b 00 06 	brhi	8000feb0 <_free_r+0x104>
8000fea8:	f0 0b 16 06 	lsr	r11,r8,0x6
8000feac:	2c 8b       	sub	r11,-56
8000feae:	c2 68       	rjmp	8000fefa <_free_r+0x14e>
8000feb0:	59 49       	cp.w	r9,20
8000feb2:	e0 8b 00 05 	brhi	8000febc <_free_r+0x110>
8000feb6:	f2 cb ff a5 	sub	r11,r9,-91
8000feba:	c2 08       	rjmp	8000fefa <_free_r+0x14e>
8000febc:	e0 49 00 54 	cp.w	r9,84
8000fec0:	e0 8b 00 06 	brhi	8000fecc <_free_r+0x120>
8000fec4:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000fec8:	29 2b       	sub	r11,-110
8000feca:	c1 88       	rjmp	8000fefa <_free_r+0x14e>
8000fecc:	e0 49 01 54 	cp.w	r9,340
8000fed0:	e0 8b 00 06 	brhi	8000fedc <_free_r+0x130>
8000fed4:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000fed8:	28 9b       	sub	r11,-119
8000feda:	c1 08       	rjmp	8000fefa <_free_r+0x14e>
8000fedc:	f0 0b 16 12 	lsr	r11,r8,0x12
8000fee0:	e0 49 05 54 	cp.w	r9,1364
8000fee4:	e0 88 00 0a 	brls	8000fef8 <_free_r+0x14c>
8000fee8:	37 eb       	mov	r11,126
8000feea:	c0 88       	rjmp	8000fefa <_free_r+0x14e>
8000feec:	00 00       	add	r0,r0
8000feee:	0d 08       	ld.w	r8,r6++
8000fef0:	00 00       	add	r0,r0
8000fef2:	11 10       	ld.sh	r0,r8++
8000fef4:	00 00       	add	r0,r0
8000fef6:	15 10       	ld.sh	r0,r10++
8000fef8:	28 4b       	sub	r11,-124
8000fefa:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000fefe:	78 29       	ld.w	r9,r12[0x8]
8000ff00:	18 39       	cp.w	r9,r12
8000ff02:	c0 e1       	brne	8000ff1e <_free_r+0x172>
8000ff04:	74 18       	ld.w	r8,r10[0x4]
8000ff06:	a3 4b       	asr	r11,0x2
8000ff08:	30 1c       	mov	r12,1
8000ff0a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000ff0e:	f1 eb 10 0b 	or	r11,r8,r11
8000ff12:	12 98       	mov	r8,r9
8000ff14:	95 1b       	st.w	r10[0x4],r11
8000ff16:	c0 a8       	rjmp	8000ff2a <_free_r+0x17e>
8000ff18:	72 29       	ld.w	r9,r9[0x8]
8000ff1a:	18 39       	cp.w	r9,r12
8000ff1c:	c0 60       	breq	8000ff28 <_free_r+0x17c>
8000ff1e:	72 1a       	ld.w	r10,r9[0x4]
8000ff20:	e0 1a ff fc 	andl	r10,0xfffc
8000ff24:	14 38       	cp.w	r8,r10
8000ff26:	cf 93       	brcs	8000ff18 <_free_r+0x16c>
8000ff28:	72 38       	ld.w	r8,r9[0xc]
8000ff2a:	8d 38       	st.w	r6[0xc],r8
8000ff2c:	8d 29       	st.w	r6[0x8],r9
8000ff2e:	93 36       	st.w	r9[0xc],r6
8000ff30:	91 26       	st.w	r8[0x8],r6
8000ff32:	0e 9c       	mov	r12,r7
8000ff34:	e0 a0 04 27 	rcall	80010782 <__malloc_unlock>
8000ff38:	d8 22       	popm	r4-r7,pc
8000ff3a:	d7 03       	nop

8000ff3c <__sfvwrite_r>:
8000ff3c:	d4 31       	pushm	r0-r7,lr
8000ff3e:	20 3d       	sub	sp,12
8000ff40:	14 94       	mov	r4,r10
8000ff42:	18 95       	mov	r5,r12
8000ff44:	16 97       	mov	r7,r11
8000ff46:	74 28       	ld.w	r8,r10[0x8]
8000ff48:	58 08       	cp.w	r8,0
8000ff4a:	e0 80 01 48 	breq	800101da <__sfvwrite_r+0x29e>
8000ff4e:	96 68       	ld.sh	r8,r11[0xc]
8000ff50:	ed b8 00 03 	bld	r8,0x3
8000ff54:	c0 41       	brne	8000ff5c <__sfvwrite_r+0x20>
8000ff56:	76 48       	ld.w	r8,r11[0x10]
8000ff58:	58 08       	cp.w	r8,0
8000ff5a:	c0 c1       	brne	8000ff72 <__sfvwrite_r+0x36>
8000ff5c:	0e 9b       	mov	r11,r7
8000ff5e:	0a 9c       	mov	r12,r5
8000ff60:	fe b0 f6 c0 	rcall	8000ece0 <__swsetup_r>
8000ff64:	c0 70       	breq	8000ff72 <__sfvwrite_r+0x36>
8000ff66:	8e 68       	ld.sh	r8,r7[0xc]
8000ff68:	a7 a8       	sbr	r8,0x6
8000ff6a:	ae 68       	st.h	r7[0xc],r8
8000ff6c:	30 98       	mov	r8,9
8000ff6e:	8b 38       	st.w	r5[0xc],r8
8000ff70:	c3 39       	rjmp	800101d6 <__sfvwrite_r+0x29a>
8000ff72:	8e 63       	ld.sh	r3,r7[0xc]
8000ff74:	68 00       	ld.w	r0,r4[0x0]
8000ff76:	06 96       	mov	r6,r3
8000ff78:	e2 16 00 02 	andl	r6,0x2,COH
8000ff7c:	c2 10       	breq	8000ffbe <__sfvwrite_r+0x82>
8000ff7e:	30 03       	mov	r3,0
8000ff80:	e0 62 04 00 	mov	r2,1024
8000ff84:	06 96       	mov	r6,r3
8000ff86:	c0 48       	rjmp	8000ff8e <__sfvwrite_r+0x52>
8000ff88:	60 03       	ld.w	r3,r0[0x0]
8000ff8a:	60 16       	ld.w	r6,r0[0x4]
8000ff8c:	2f 80       	sub	r0,-8
8000ff8e:	58 06       	cp.w	r6,0
8000ff90:	cf c0       	breq	8000ff88 <__sfvwrite_r+0x4c>
8000ff92:	e0 46 04 00 	cp.w	r6,1024
8000ff96:	ec 09 17 80 	movls	r9,r6
8000ff9a:	e4 09 17 b0 	movhi	r9,r2
8000ff9e:	06 9a       	mov	r10,r3
8000ffa0:	6e a8       	ld.w	r8,r7[0x28]
8000ffa2:	6e 8b       	ld.w	r11,r7[0x20]
8000ffa4:	0a 9c       	mov	r12,r5
8000ffa6:	5d 18       	icall	r8
8000ffa8:	18 16       	sub	r6,r12
8000ffaa:	58 0c       	cp.w	r12,0
8000ffac:	e0 8a 01 12 	brle	800101d0 <__sfvwrite_r+0x294>
8000ffb0:	68 28       	ld.w	r8,r4[0x8]
8000ffb2:	18 18       	sub	r8,r12
8000ffb4:	89 28       	st.w	r4[0x8],r8
8000ffb6:	e0 80 01 12 	breq	800101da <__sfvwrite_r+0x29e>
8000ffba:	18 03       	add	r3,r12
8000ffbc:	ce 9b       	rjmp	8000ff8e <__sfvwrite_r+0x52>
8000ffbe:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ffc2:	c0 70       	breq	8000ffd0 <__sfvwrite_r+0x94>
8000ffc4:	50 06       	stdsp	sp[0x0],r6
8000ffc6:	0c 93       	mov	r3,r6
8000ffc8:	0c 91       	mov	r1,r6
8000ffca:	50 15       	stdsp	sp[0x4],r5
8000ffcc:	08 92       	mov	r2,r4
8000ffce:	c9 e8       	rjmp	8001010a <__sfvwrite_r+0x1ce>
8000ffd0:	06 96       	mov	r6,r3
8000ffd2:	08 91       	mov	r1,r4
8000ffd4:	c0 48       	rjmp	8000ffdc <__sfvwrite_r+0xa0>
8000ffd6:	60 03       	ld.w	r3,r0[0x0]
8000ffd8:	60 16       	ld.w	r6,r0[0x4]
8000ffda:	2f 80       	sub	r0,-8
8000ffdc:	58 06       	cp.w	r6,0
8000ffde:	cf c0       	breq	8000ffd6 <__sfvwrite_r+0x9a>
8000ffe0:	8e 68       	ld.sh	r8,r7[0xc]
8000ffe2:	6e 24       	ld.w	r4,r7[0x8]
8000ffe4:	10 99       	mov	r9,r8
8000ffe6:	e2 19 02 00 	andl	r9,0x200,COH
8000ffea:	c5 50       	breq	80010094 <__sfvwrite_r+0x158>
8000ffec:	08 36       	cp.w	r6,r4
8000ffee:	c4 33       	brcs	80010074 <__sfvwrite_r+0x138>
8000fff0:	10 99       	mov	r9,r8
8000fff2:	e2 19 04 80 	andl	r9,0x480,COH
8000fff6:	c3 f0       	breq	80010074 <__sfvwrite_r+0x138>
8000fff8:	6e 4b       	ld.w	r11,r7[0x10]
8000fffa:	6e 09       	ld.w	r9,r7[0x0]
8000fffc:	16 19       	sub	r9,r11
8000fffe:	50 09       	stdsp	sp[0x0],r9
80010000:	6e 59       	ld.w	r9,r7[0x14]
80010002:	10 9c       	mov	r12,r8
80010004:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80010008:	30 28       	mov	r8,2
8001000a:	f4 08 0c 08 	divs	r8,r10,r8
8001000e:	fa e9 00 04 	st.d	sp[4],r8
80010012:	10 94       	mov	r4,r8
80010014:	40 09       	lddsp	r9,sp[0x0]
80010016:	e2 1c 04 00 	andl	r12,0x400,COH
8001001a:	2f f9       	sub	r9,-1
8001001c:	0c 09       	add	r9,r6
8001001e:	12 38       	cp.w	r8,r9
80010020:	f2 04 17 30 	movlo	r4,r9
80010024:	58 0c       	cp.w	r12,0
80010026:	c1 00       	breq	80010046 <__sfvwrite_r+0x10a>
80010028:	08 9b       	mov	r11,r4
8001002a:	0a 9c       	mov	r12,r5
8001002c:	c6 6d       	rcall	800102f8 <_malloc_r>
8001002e:	18 92       	mov	r2,r12
80010030:	c1 40       	breq	80010058 <__sfvwrite_r+0x11c>
80010032:	40 0a       	lddsp	r10,sp[0x0]
80010034:	6e 4b       	ld.w	r11,r7[0x10]
80010036:	fe b0 e3 be 	rcall	8000c7b2 <memcpy>
8001003a:	8e 68       	ld.sh	r8,r7[0xc]
8001003c:	e0 18 fb 7f 	andl	r8,0xfb7f
80010040:	a7 b8       	sbr	r8,0x7
80010042:	ae 68       	st.h	r7[0xc],r8
80010044:	c0 d8       	rjmp	8001005e <__sfvwrite_r+0x122>
80010046:	08 9a       	mov	r10,r4
80010048:	0a 9c       	mov	r12,r5
8001004a:	e0 a0 06 8d 	rcall	80010d64 <_realloc_r>
8001004e:	18 92       	mov	r2,r12
80010050:	c0 71       	brne	8001005e <__sfvwrite_r+0x122>
80010052:	6e 4b       	ld.w	r11,r7[0x10]
80010054:	0a 9c       	mov	r12,r5
80010056:	ca be       	rcall	8000fdac <_free_r>
80010058:	30 c8       	mov	r8,12
8001005a:	8b 38       	st.w	r5[0xc],r8
8001005c:	cb a8       	rjmp	800101d0 <__sfvwrite_r+0x294>
8001005e:	40 0a       	lddsp	r10,sp[0x0]
80010060:	40 09       	lddsp	r9,sp[0x0]
80010062:	e8 0a 01 0a 	sub	r10,r4,r10
80010066:	e4 09 00 08 	add	r8,r2,r9
8001006a:	8f 54       	st.w	r7[0x14],r4
8001006c:	8f 2a       	st.w	r7[0x8],r10
8001006e:	8f 08       	st.w	r7[0x0],r8
80010070:	8f 42       	st.w	r7[0x10],r2
80010072:	0c 94       	mov	r4,r6
80010074:	08 36       	cp.w	r6,r4
80010076:	ec 04 17 30 	movlo	r4,r6
8001007a:	06 9b       	mov	r11,r3
8001007c:	08 9a       	mov	r10,r4
8001007e:	6e 0c       	ld.w	r12,r7[0x0]
80010080:	e0 a0 03 61 	rcall	80010742 <memmove>
80010084:	6e 08       	ld.w	r8,r7[0x0]
80010086:	08 08       	add	r8,r4
80010088:	8f 08       	st.w	r7[0x0],r8
8001008a:	6e 28       	ld.w	r8,r7[0x8]
8001008c:	08 18       	sub	r8,r4
8001008e:	0c 94       	mov	r4,r6
80010090:	8f 28       	st.w	r7[0x8],r8
80010092:	c3 08       	rjmp	800100f2 <__sfvwrite_r+0x1b6>
80010094:	08 36       	cp.w	r6,r4
80010096:	5f ba       	srhi	r10
80010098:	6e 0c       	ld.w	r12,r7[0x0]
8001009a:	6e 48       	ld.w	r8,r7[0x10]
8001009c:	10 3c       	cp.w	r12,r8
8001009e:	5f b8       	srhi	r8
800100a0:	f5 e8 00 08 	and	r8,r10,r8
800100a4:	f2 08 18 00 	cp.b	r8,r9
800100a8:	c0 e0       	breq	800100c4 <__sfvwrite_r+0x188>
800100aa:	06 9b       	mov	r11,r3
800100ac:	08 9a       	mov	r10,r4
800100ae:	e0 a0 03 4a 	rcall	80010742 <memmove>
800100b2:	6e 08       	ld.w	r8,r7[0x0]
800100b4:	08 08       	add	r8,r4
800100b6:	0e 9b       	mov	r11,r7
800100b8:	8f 08       	st.w	r7[0x0],r8
800100ba:	0a 9c       	mov	r12,r5
800100bc:	fe b0 fd 00 	rcall	8000fabc <_fflush_r>
800100c0:	c1 90       	breq	800100f2 <__sfvwrite_r+0x1b6>
800100c2:	c8 78       	rjmp	800101d0 <__sfvwrite_r+0x294>
800100c4:	6e 59       	ld.w	r9,r7[0x14]
800100c6:	12 36       	cp.w	r6,r9
800100c8:	c0 a3       	brcs	800100dc <__sfvwrite_r+0x1a0>
800100ca:	6e a8       	ld.w	r8,r7[0x28]
800100cc:	06 9a       	mov	r10,r3
800100ce:	6e 8b       	ld.w	r11,r7[0x20]
800100d0:	0a 9c       	mov	r12,r5
800100d2:	5d 18       	icall	r8
800100d4:	18 94       	mov	r4,r12
800100d6:	e0 89 00 0e 	brgt	800100f2 <__sfvwrite_r+0x1b6>
800100da:	c7 b8       	rjmp	800101d0 <__sfvwrite_r+0x294>
800100dc:	0c 9a       	mov	r10,r6
800100de:	06 9b       	mov	r11,r3
800100e0:	e0 a0 03 31 	rcall	80010742 <memmove>
800100e4:	6e 08       	ld.w	r8,r7[0x0]
800100e6:	0c 08       	add	r8,r6
800100e8:	0c 94       	mov	r4,r6
800100ea:	8f 08       	st.w	r7[0x0],r8
800100ec:	6e 28       	ld.w	r8,r7[0x8]
800100ee:	0c 18       	sub	r8,r6
800100f0:	8f 28       	st.w	r7[0x8],r8
800100f2:	62 28       	ld.w	r8,r1[0x8]
800100f4:	08 18       	sub	r8,r4
800100f6:	83 28       	st.w	r1[0x8],r8
800100f8:	c7 10       	breq	800101da <__sfvwrite_r+0x29e>
800100fa:	08 16       	sub	r6,r4
800100fc:	08 03       	add	r3,r4
800100fe:	c6 fb       	rjmp	8000ffdc <__sfvwrite_r+0xa0>
80010100:	60 03       	ld.w	r3,r0[0x0]
80010102:	60 11       	ld.w	r1,r0[0x4]
80010104:	30 08       	mov	r8,0
80010106:	2f 80       	sub	r0,-8
80010108:	50 08       	stdsp	sp[0x0],r8
8001010a:	58 01       	cp.w	r1,0
8001010c:	cf a0       	breq	80010100 <__sfvwrite_r+0x1c4>
8001010e:	40 0a       	lddsp	r10,sp[0x0]
80010110:	58 0a       	cp.w	r10,0
80010112:	c1 81       	brne	80010142 <__sfvwrite_r+0x206>
80010114:	02 9a       	mov	r10,r1
80010116:	30 ab       	mov	r11,10
80010118:	06 9c       	mov	r12,r3
8001011a:	e0 a0 03 09 	rcall	8001072c <memchr>
8001011e:	f9 b8 01 01 	movne	r8,1
80010122:	f9 d8 e1 06 	addne	r6,r12,r8
80010126:	ed d3 e1 16 	subne	r6,r6,r3
8001012a:	f9 b9 01 01 	movne	r9,1
8001012e:	fb f9 1a 00 	st.wne	sp[0x0],r9
80010132:	f9 b8 00 01 	moveq	r8,1
80010136:	e3 d8 e0 06 	addeq	r6,r1,r8
8001013a:	f9 b8 00 01 	moveq	r8,1
8001013e:	fb f8 0a 00 	st.weq	sp[0x0],r8
80010142:	02 36       	cp.w	r6,r1
80010144:	ec 04 17 80 	movls	r4,r6
80010148:	e2 04 17 b0 	movhi	r4,r1
8001014c:	6e 59       	ld.w	r9,r7[0x14]
8001014e:	6e 25       	ld.w	r5,r7[0x8]
80010150:	f2 05 00 05 	add	r5,r9,r5
80010154:	0a 34       	cp.w	r4,r5
80010156:	5f 9a       	srgt	r10
80010158:	6e 0c       	ld.w	r12,r7[0x0]
8001015a:	6e 48       	ld.w	r8,r7[0x10]
8001015c:	10 3c       	cp.w	r12,r8
8001015e:	5f b8       	srhi	r8
80010160:	f5 e8 00 08 	and	r8,r10,r8
80010164:	30 0a       	mov	r10,0
80010166:	f4 08 18 00 	cp.b	r8,r10
8001016a:	c0 e0       	breq	80010186 <__sfvwrite_r+0x24a>
8001016c:	06 9b       	mov	r11,r3
8001016e:	0a 9a       	mov	r10,r5
80010170:	e0 a0 02 e9 	rcall	80010742 <memmove>
80010174:	6e 08       	ld.w	r8,r7[0x0]
80010176:	0a 08       	add	r8,r5
80010178:	0e 9b       	mov	r11,r7
8001017a:	8f 08       	st.w	r7[0x0],r8
8001017c:	40 1c       	lddsp	r12,sp[0x4]
8001017e:	fe b0 fc 9f 	rcall	8000fabc <_fflush_r>
80010182:	c1 80       	breq	800101b2 <__sfvwrite_r+0x276>
80010184:	c2 68       	rjmp	800101d0 <__sfvwrite_r+0x294>
80010186:	12 34       	cp.w	r4,r9
80010188:	c0 a5       	brlt	8001019c <__sfvwrite_r+0x260>
8001018a:	6e a8       	ld.w	r8,r7[0x28]
8001018c:	06 9a       	mov	r10,r3
8001018e:	6e 8b       	ld.w	r11,r7[0x20]
80010190:	40 1c       	lddsp	r12,sp[0x4]
80010192:	5d 18       	icall	r8
80010194:	18 95       	mov	r5,r12
80010196:	e0 89 00 0e 	brgt	800101b2 <__sfvwrite_r+0x276>
8001019a:	c1 b8       	rjmp	800101d0 <__sfvwrite_r+0x294>
8001019c:	08 9a       	mov	r10,r4
8001019e:	06 9b       	mov	r11,r3
800101a0:	e0 a0 02 d1 	rcall	80010742 <memmove>
800101a4:	6e 08       	ld.w	r8,r7[0x0]
800101a6:	08 08       	add	r8,r4
800101a8:	08 95       	mov	r5,r4
800101aa:	8f 08       	st.w	r7[0x0],r8
800101ac:	6e 28       	ld.w	r8,r7[0x8]
800101ae:	08 18       	sub	r8,r4
800101b0:	8f 28       	st.w	r7[0x8],r8
800101b2:	0a 16       	sub	r6,r5
800101b4:	c0 71       	brne	800101c2 <__sfvwrite_r+0x286>
800101b6:	0e 9b       	mov	r11,r7
800101b8:	40 1c       	lddsp	r12,sp[0x4]
800101ba:	fe b0 fc 81 	rcall	8000fabc <_fflush_r>
800101be:	c0 91       	brne	800101d0 <__sfvwrite_r+0x294>
800101c0:	50 06       	stdsp	sp[0x0],r6
800101c2:	64 28       	ld.w	r8,r2[0x8]
800101c4:	0a 18       	sub	r8,r5
800101c6:	85 28       	st.w	r2[0x8],r8
800101c8:	c0 90       	breq	800101da <__sfvwrite_r+0x29e>
800101ca:	0a 11       	sub	r1,r5
800101cc:	0a 03       	add	r3,r5
800101ce:	c9 eb       	rjmp	8001010a <__sfvwrite_r+0x1ce>
800101d0:	8e 68       	ld.sh	r8,r7[0xc]
800101d2:	a7 a8       	sbr	r8,0x6
800101d4:	ae 68       	st.h	r7[0xc],r8
800101d6:	3f fc       	mov	r12,-1
800101d8:	c0 28       	rjmp	800101dc <__sfvwrite_r+0x2a0>
800101da:	30 0c       	mov	r12,0
800101dc:	2f dd       	sub	sp,-12
800101de:	d8 32       	popm	r0-r7,pc

800101e0 <_fwalk>:
800101e0:	d4 31       	pushm	r0-r7,lr
800101e2:	30 05       	mov	r5,0
800101e4:	16 91       	mov	r1,r11
800101e6:	f8 c7 ff 28 	sub	r7,r12,-216
800101ea:	0a 92       	mov	r2,r5
800101ec:	fe b0 fc f0 	rcall	8000fbcc <__sfp_lock_acquire>
800101f0:	3f f3       	mov	r3,-1
800101f2:	c1 68       	rjmp	8001021e <_fwalk+0x3e>
800101f4:	6e 26       	ld.w	r6,r7[0x8]
800101f6:	6e 14       	ld.w	r4,r7[0x4]
800101f8:	2f 46       	sub	r6,-12
800101fa:	c0 c8       	rjmp	80010212 <_fwalk+0x32>
800101fc:	8c 08       	ld.sh	r8,r6[0x0]
800101fe:	e4 08 19 00 	cp.h	r8,r2
80010202:	c0 70       	breq	80010210 <_fwalk+0x30>
80010204:	8c 18       	ld.sh	r8,r6[0x2]
80010206:	e6 08 19 00 	cp.h	r8,r3
8001020a:	c0 30       	breq	80010210 <_fwalk+0x30>
8001020c:	5d 11       	icall	r1
8001020e:	18 45       	or	r5,r12
80010210:	2a 46       	sub	r6,-92
80010212:	20 14       	sub	r4,1
80010214:	ec cc 00 0c 	sub	r12,r6,12
80010218:	58 04       	cp.w	r4,0
8001021a:	cf 14       	brge	800101fc <_fwalk+0x1c>
8001021c:	6e 07       	ld.w	r7,r7[0x0]
8001021e:	58 07       	cp.w	r7,0
80010220:	ce a1       	brne	800101f4 <_fwalk+0x14>
80010222:	fe b0 fc d6 	rcall	8000fbce <__sfp_lock_release>
80010226:	0a 9c       	mov	r12,r5
80010228:	d8 32       	popm	r0-r7,pc
8001022a:	d7 03       	nop

8001022c <_localeconv_r>:
8001022c:	48 1c       	lddpc	r12,80010230 <_localeconv_r+0x4>
8001022e:	5e fc       	retal	r12
80010230:	80 01       	ld.sh	r1,r0[0x0]
80010232:	3f 10       	mov	r0,-15

80010234 <__smakebuf_r>:
80010234:	d4 21       	pushm	r4-r7,lr
80010236:	20 fd       	sub	sp,60
80010238:	96 68       	ld.sh	r8,r11[0xc]
8001023a:	16 97       	mov	r7,r11
8001023c:	18 96       	mov	r6,r12
8001023e:	e2 18 00 02 	andl	r8,0x2,COH
80010242:	c3 c1       	brne	800102ba <__smakebuf_r+0x86>
80010244:	96 7b       	ld.sh	r11,r11[0xe]
80010246:	f0 0b 19 00 	cp.h	r11,r8
8001024a:	c0 55       	brlt	80010254 <__smakebuf_r+0x20>
8001024c:	1a 9a       	mov	r10,sp
8001024e:	e0 a0 08 b1 	rcall	800113b0 <_fstat_r>
80010252:	c0 f4       	brge	80010270 <__smakebuf_r+0x3c>
80010254:	8e 65       	ld.sh	r5,r7[0xc]
80010256:	0a 98       	mov	r8,r5
80010258:	ab b8       	sbr	r8,0xb
8001025a:	e2 15 00 80 	andl	r5,0x80,COH
8001025e:	ae 68       	st.h	r7[0xc],r8
80010260:	30 04       	mov	r4,0
80010262:	e0 68 04 00 	mov	r8,1024
80010266:	f9 b5 01 40 	movne	r5,64
8001026a:	f0 05 17 00 	moveq	r5,r8
8001026e:	c1 c8       	rjmp	800102a6 <__smakebuf_r+0x72>
80010270:	40 18       	lddsp	r8,sp[0x4]
80010272:	e2 18 f0 00 	andl	r8,0xf000,COH
80010276:	e0 48 20 00 	cp.w	r8,8192
8001027a:	5f 04       	sreq	r4
8001027c:	e0 48 80 00 	cp.w	r8,32768
80010280:	c0 e1       	brne	8001029c <__smakebuf_r+0x68>
80010282:	6e b9       	ld.w	r9,r7[0x2c]
80010284:	fe c8 f1 ec 	sub	r8,pc,-3604
80010288:	10 39       	cp.w	r9,r8
8001028a:	c0 91       	brne	8001029c <__smakebuf_r+0x68>
8001028c:	8e 68       	ld.sh	r8,r7[0xc]
8001028e:	e0 65 04 00 	mov	r5,1024
80010292:	ab a8       	sbr	r8,0xa
80010294:	ef 45 00 50 	st.w	r7[80],r5
80010298:	ae 68       	st.h	r7[0xc],r8
8001029a:	c0 68       	rjmp	800102a6 <__smakebuf_r+0x72>
8001029c:	8e 68       	ld.sh	r8,r7[0xc]
8001029e:	e0 65 04 00 	mov	r5,1024
800102a2:	ab b8       	sbr	r8,0xb
800102a4:	ae 68       	st.h	r7[0xc],r8
800102a6:	0a 9b       	mov	r11,r5
800102a8:	0c 9c       	mov	r12,r6
800102aa:	c2 7c       	rcall	800102f8 <_malloc_r>
800102ac:	8e 68       	ld.sh	r8,r7[0xc]
800102ae:	c0 d1       	brne	800102c8 <__smakebuf_r+0x94>
800102b0:	ed b8 00 09 	bld	r8,0x9
800102b4:	c1 f0       	breq	800102f2 <__smakebuf_r+0xbe>
800102b6:	a1 b8       	sbr	r8,0x1
800102b8:	ae 68       	st.h	r7[0xc],r8
800102ba:	ee c8 ff b9 	sub	r8,r7,-71
800102be:	8f 48       	st.w	r7[0x10],r8
800102c0:	8f 08       	st.w	r7[0x0],r8
800102c2:	30 18       	mov	r8,1
800102c4:	8f 58       	st.w	r7[0x14],r8
800102c6:	c1 68       	rjmp	800102f2 <__smakebuf_r+0xbe>
800102c8:	a7 b8       	sbr	r8,0x7
800102ca:	8f 4c       	st.w	r7[0x10],r12
800102cc:	ae 68       	st.h	r7[0xc],r8
800102ce:	8f 55       	st.w	r7[0x14],r5
800102d0:	fe c8 07 00 	sub	r8,pc,1792
800102d4:	8f 0c       	st.w	r7[0x0],r12
800102d6:	8d a8       	st.w	r6[0x28],r8
800102d8:	58 04       	cp.w	r4,0
800102da:	c0 c0       	breq	800102f2 <__smakebuf_r+0xbe>
800102dc:	8e 7c       	ld.sh	r12,r7[0xe]
800102de:	e0 a0 07 51 	rcall	80011180 <isatty>
800102e2:	ef f8 12 06 	ld.shne	r8,r7[0xc]
800102e6:	f9 b9 01 01 	movne	r9,1
800102ea:	f1 d9 e1 38 	orne	r8,r8,r9
800102ee:	ef f8 1c 06 	st.hne	r7[0xc],r8
800102f2:	2f 1d       	sub	sp,-60
800102f4:	d8 22       	popm	r4-r7,pc
800102f6:	d7 03       	nop

800102f8 <_malloc_r>:
800102f8:	d4 31       	pushm	r0-r7,lr
800102fa:	f6 c7 ff f5 	sub	r7,r11,-11
800102fe:	18 95       	mov	r5,r12
80010300:	59 67       	cp.w	r7,22
80010302:	f9 b7 08 10 	movls	r7,16
80010306:	f9 b8 0b f8 	movhi	r8,-8
8001030a:	ef d8 eb 27 	andhi	r7,r7,r8
8001030e:	16 37       	cp.w	r7,r11
80010310:	5f 38       	srlo	r8
80010312:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80010316:	c0 50       	breq	80010320 <_malloc_r+0x28>
80010318:	30 c8       	mov	r8,12
8001031a:	99 38       	st.w	r12[0xc],r8
8001031c:	e0 8f 01 ef 	bral	800106fa <_malloc_r+0x402>
80010320:	e0 a0 02 30 	rcall	80010780 <__malloc_lock>
80010324:	e0 47 01 f7 	cp.w	r7,503
80010328:	e0 8b 00 1c 	brhi	80010360 <_malloc_r+0x68>
8001032c:	ee 03 16 03 	lsr	r3,r7,0x3
80010330:	4c c8       	lddpc	r8,80010460 <_malloc_r+0x168>
80010332:	f0 03 00 38 	add	r8,r8,r3<<0x3
80010336:	70 36       	ld.w	r6,r8[0xc]
80010338:	10 36       	cp.w	r6,r8
8001033a:	c0 61       	brne	80010346 <_malloc_r+0x4e>
8001033c:	ec c8 ff f8 	sub	r8,r6,-8
80010340:	70 36       	ld.w	r6,r8[0xc]
80010342:	10 36       	cp.w	r6,r8
80010344:	c0 c0       	breq	8001035c <_malloc_r+0x64>
80010346:	6c 18       	ld.w	r8,r6[0x4]
80010348:	e0 18 ff fc 	andl	r8,0xfffc
8001034c:	6c 3a       	ld.w	r10,r6[0xc]
8001034e:	ec 08 00 09 	add	r9,r6,r8
80010352:	0a 9c       	mov	r12,r5
80010354:	6c 28       	ld.w	r8,r6[0x8]
80010356:	95 28       	st.w	r10[0x8],r8
80010358:	91 3a       	st.w	r8[0xc],r10
8001035a:	c4 78       	rjmp	800103e8 <_malloc_r+0xf0>
8001035c:	2f e3       	sub	r3,-2
8001035e:	c4 d8       	rjmp	800103f8 <_malloc_r+0x100>
80010360:	ee 08 16 09 	lsr	r8,r7,0x9
80010364:	c0 41       	brne	8001036c <_malloc_r+0x74>
80010366:	ee 03 16 03 	lsr	r3,r7,0x3
8001036a:	c2 78       	rjmp	800103b8 <_malloc_r+0xc0>
8001036c:	58 48       	cp.w	r8,4
8001036e:	e0 8b 00 06 	brhi	8001037a <_malloc_r+0x82>
80010372:	ee 03 16 06 	lsr	r3,r7,0x6
80010376:	2c 83       	sub	r3,-56
80010378:	c2 08       	rjmp	800103b8 <_malloc_r+0xc0>
8001037a:	59 48       	cp.w	r8,20
8001037c:	e0 8b 00 05 	brhi	80010386 <_malloc_r+0x8e>
80010380:	f0 c3 ff a5 	sub	r3,r8,-91
80010384:	c1 a8       	rjmp	800103b8 <_malloc_r+0xc0>
80010386:	e0 48 00 54 	cp.w	r8,84
8001038a:	e0 8b 00 06 	brhi	80010396 <_malloc_r+0x9e>
8001038e:	ee 03 16 0c 	lsr	r3,r7,0xc
80010392:	29 23       	sub	r3,-110
80010394:	c1 28       	rjmp	800103b8 <_malloc_r+0xc0>
80010396:	e0 48 01 54 	cp.w	r8,340
8001039a:	e0 8b 00 06 	brhi	800103a6 <_malloc_r+0xae>
8001039e:	ee 03 16 0f 	lsr	r3,r7,0xf
800103a2:	28 93       	sub	r3,-119
800103a4:	c0 a8       	rjmp	800103b8 <_malloc_r+0xc0>
800103a6:	ee 03 16 12 	lsr	r3,r7,0x12
800103aa:	e0 48 05 54 	cp.w	r8,1364
800103ae:	e0 88 00 04 	brls	800103b6 <_malloc_r+0xbe>
800103b2:	37 e3       	mov	r3,126
800103b4:	c0 28       	rjmp	800103b8 <_malloc_r+0xc0>
800103b6:	28 43       	sub	r3,-124
800103b8:	4a aa       	lddpc	r10,80010460 <_malloc_r+0x168>
800103ba:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800103be:	74 36       	ld.w	r6,r10[0xc]
800103c0:	c1 98       	rjmp	800103f2 <_malloc_r+0xfa>
800103c2:	6c 19       	ld.w	r9,r6[0x4]
800103c4:	e0 19 ff fc 	andl	r9,0xfffc
800103c8:	f2 07 01 0b 	sub	r11,r9,r7
800103cc:	58 fb       	cp.w	r11,15
800103ce:	e0 8a 00 04 	brle	800103d6 <_malloc_r+0xde>
800103d2:	20 13       	sub	r3,1
800103d4:	c1 18       	rjmp	800103f6 <_malloc_r+0xfe>
800103d6:	6c 38       	ld.w	r8,r6[0xc]
800103d8:	58 0b       	cp.w	r11,0
800103da:	c0 b5       	brlt	800103f0 <_malloc_r+0xf8>
800103dc:	6c 2a       	ld.w	r10,r6[0x8]
800103de:	ec 09 00 09 	add	r9,r6,r9
800103e2:	0a 9c       	mov	r12,r5
800103e4:	91 2a       	st.w	r8[0x8],r10
800103e6:	95 38       	st.w	r10[0xc],r8
800103e8:	72 18       	ld.w	r8,r9[0x4]
800103ea:	a1 a8       	sbr	r8,0x0
800103ec:	93 18       	st.w	r9[0x4],r8
800103ee:	cb b8       	rjmp	80010564 <_malloc_r+0x26c>
800103f0:	10 96       	mov	r6,r8
800103f2:	14 36       	cp.w	r6,r10
800103f4:	ce 71       	brne	800103c2 <_malloc_r+0xca>
800103f6:	2f f3       	sub	r3,-1
800103f8:	49 aa       	lddpc	r10,80010460 <_malloc_r+0x168>
800103fa:	f4 cc ff f8 	sub	r12,r10,-8
800103fe:	78 26       	ld.w	r6,r12[0x8]
80010400:	18 36       	cp.w	r6,r12
80010402:	c6 d0       	breq	800104dc <_malloc_r+0x1e4>
80010404:	6c 19       	ld.w	r9,r6[0x4]
80010406:	e0 19 ff fc 	andl	r9,0xfffc
8001040a:	f2 07 01 08 	sub	r8,r9,r7
8001040e:	58 f8       	cp.w	r8,15
80010410:	e0 89 00 8f 	brgt	8001052e <_malloc_r+0x236>
80010414:	99 3c       	st.w	r12[0xc],r12
80010416:	99 2c       	st.w	r12[0x8],r12
80010418:	58 08       	cp.w	r8,0
8001041a:	c0 55       	brlt	80010424 <_malloc_r+0x12c>
8001041c:	ec 09 00 09 	add	r9,r6,r9
80010420:	0a 9c       	mov	r12,r5
80010422:	ce 3b       	rjmp	800103e8 <_malloc_r+0xf0>
80010424:	e0 49 01 ff 	cp.w	r9,511
80010428:	e0 8b 00 13 	brhi	8001044e <_malloc_r+0x156>
8001042c:	a3 99       	lsr	r9,0x3
8001042e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80010432:	70 2b       	ld.w	r11,r8[0x8]
80010434:	8d 38       	st.w	r6[0xc],r8
80010436:	8d 2b       	st.w	r6[0x8],r11
80010438:	97 36       	st.w	r11[0xc],r6
8001043a:	91 26       	st.w	r8[0x8],r6
8001043c:	a3 49       	asr	r9,0x2
8001043e:	74 18       	ld.w	r8,r10[0x4]
80010440:	30 1b       	mov	r11,1
80010442:	f6 09 09 49 	lsl	r9,r11,r9
80010446:	f1 e9 10 09 	or	r9,r8,r9
8001044a:	95 19       	st.w	r10[0x4],r9
8001044c:	c4 88       	rjmp	800104dc <_malloc_r+0x1e4>
8001044e:	f2 08 16 09 	lsr	r8,r9,0x9
80010452:	58 48       	cp.w	r8,4
80010454:	e0 8b 00 08 	brhi	80010464 <_malloc_r+0x16c>
80010458:	f2 0a 16 06 	lsr	r10,r9,0x6
8001045c:	2c 8a       	sub	r10,-56
8001045e:	c2 28       	rjmp	800104a2 <_malloc_r+0x1aa>
80010460:	00 00       	add	r0,r0
80010462:	0d 08       	ld.w	r8,r6++
80010464:	59 48       	cp.w	r8,20
80010466:	e0 8b 00 05 	brhi	80010470 <_malloc_r+0x178>
8001046a:	f0 ca ff a5 	sub	r10,r8,-91
8001046e:	c1 a8       	rjmp	800104a2 <_malloc_r+0x1aa>
80010470:	e0 48 00 54 	cp.w	r8,84
80010474:	e0 8b 00 06 	brhi	80010480 <_malloc_r+0x188>
80010478:	f2 0a 16 0c 	lsr	r10,r9,0xc
8001047c:	29 2a       	sub	r10,-110
8001047e:	c1 28       	rjmp	800104a2 <_malloc_r+0x1aa>
80010480:	e0 48 01 54 	cp.w	r8,340
80010484:	e0 8b 00 06 	brhi	80010490 <_malloc_r+0x198>
80010488:	f2 0a 16 0f 	lsr	r10,r9,0xf
8001048c:	28 9a       	sub	r10,-119
8001048e:	c0 a8       	rjmp	800104a2 <_malloc_r+0x1aa>
80010490:	f2 0a 16 12 	lsr	r10,r9,0x12
80010494:	e0 48 05 54 	cp.w	r8,1364
80010498:	e0 88 00 04 	brls	800104a0 <_malloc_r+0x1a8>
8001049c:	37 ea       	mov	r10,126
8001049e:	c0 28       	rjmp	800104a2 <_malloc_r+0x1aa>
800104a0:	28 4a       	sub	r10,-124
800104a2:	4c 8b       	lddpc	r11,800105c0 <_malloc_r+0x2c8>
800104a4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800104a8:	68 28       	ld.w	r8,r4[0x8]
800104aa:	08 38       	cp.w	r8,r4
800104ac:	c0 e1       	brne	800104c8 <_malloc_r+0x1d0>
800104ae:	76 19       	ld.w	r9,r11[0x4]
800104b0:	a3 4a       	asr	r10,0x2
800104b2:	30 1e       	mov	lr,1
800104b4:	fc 0a 09 4a 	lsl	r10,lr,r10
800104b8:	f3 ea 10 0a 	or	r10,r9,r10
800104bc:	10 99       	mov	r9,r8
800104be:	97 1a       	st.w	r11[0x4],r10
800104c0:	c0 a8       	rjmp	800104d4 <_malloc_r+0x1dc>
800104c2:	70 28       	ld.w	r8,r8[0x8]
800104c4:	08 38       	cp.w	r8,r4
800104c6:	c0 60       	breq	800104d2 <_malloc_r+0x1da>
800104c8:	70 1a       	ld.w	r10,r8[0x4]
800104ca:	e0 1a ff fc 	andl	r10,0xfffc
800104ce:	14 39       	cp.w	r9,r10
800104d0:	cf 93       	brcs	800104c2 <_malloc_r+0x1ca>
800104d2:	70 39       	ld.w	r9,r8[0xc]
800104d4:	8d 39       	st.w	r6[0xc],r9
800104d6:	8d 28       	st.w	r6[0x8],r8
800104d8:	91 36       	st.w	r8[0xc],r6
800104da:	93 26       	st.w	r9[0x8],r6
800104dc:	e6 08 14 02 	asr	r8,r3,0x2
800104e0:	30 1b       	mov	r11,1
800104e2:	4b 84       	lddpc	r4,800105c0 <_malloc_r+0x2c8>
800104e4:	f6 08 09 4b 	lsl	r11,r11,r8
800104e8:	68 18       	ld.w	r8,r4[0x4]
800104ea:	10 3b       	cp.w	r11,r8
800104ec:	e0 8b 00 6c 	brhi	800105c4 <_malloc_r+0x2cc>
800104f0:	f7 e8 00 09 	and	r9,r11,r8
800104f4:	c0 b1       	brne	8001050a <_malloc_r+0x212>
800104f6:	e0 13 ff fc 	andl	r3,0xfffc
800104fa:	a1 7b       	lsl	r11,0x1
800104fc:	2f c3       	sub	r3,-4
800104fe:	c0 38       	rjmp	80010504 <_malloc_r+0x20c>
80010500:	2f c3       	sub	r3,-4
80010502:	a1 7b       	lsl	r11,0x1
80010504:	f7 e8 00 09 	and	r9,r11,r8
80010508:	cf c0       	breq	80010500 <_malloc_r+0x208>
8001050a:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8001050e:	06 92       	mov	r2,r3
80010510:	1c 91       	mov	r1,lr
80010512:	62 36       	ld.w	r6,r1[0xc]
80010514:	c2 d8       	rjmp	8001056e <_malloc_r+0x276>
80010516:	6c 1a       	ld.w	r10,r6[0x4]
80010518:	e0 1a ff fc 	andl	r10,0xfffc
8001051c:	f4 07 01 08 	sub	r8,r10,r7
80010520:	58 f8       	cp.w	r8,15
80010522:	e0 8a 00 15 	brle	8001054c <_malloc_r+0x254>
80010526:	6c 3a       	ld.w	r10,r6[0xc]
80010528:	6c 29       	ld.w	r9,r6[0x8]
8001052a:	95 29       	st.w	r10[0x8],r9
8001052c:	93 3a       	st.w	r9[0xc],r10
8001052e:	0e 99       	mov	r9,r7
80010530:	ec 07 00 07 	add	r7,r6,r7
80010534:	a1 a9       	sbr	r9,0x0
80010536:	99 37       	st.w	r12[0xc],r7
80010538:	99 27       	st.w	r12[0x8],r7
8001053a:	8d 19       	st.w	r6[0x4],r9
8001053c:	ee 08 09 08 	st.w	r7[r8],r8
80010540:	8f 2c       	st.w	r7[0x8],r12
80010542:	8f 3c       	st.w	r7[0xc],r12
80010544:	a1 a8       	sbr	r8,0x0
80010546:	0a 9c       	mov	r12,r5
80010548:	8f 18       	st.w	r7[0x4],r8
8001054a:	c0 d8       	rjmp	80010564 <_malloc_r+0x26c>
8001054c:	6c 39       	ld.w	r9,r6[0xc]
8001054e:	58 08       	cp.w	r8,0
80010550:	c0 e5       	brlt	8001056c <_malloc_r+0x274>
80010552:	ec 0a 00 0a 	add	r10,r6,r10
80010556:	74 18       	ld.w	r8,r10[0x4]
80010558:	a1 a8       	sbr	r8,0x0
8001055a:	0a 9c       	mov	r12,r5
8001055c:	95 18       	st.w	r10[0x4],r8
8001055e:	6c 28       	ld.w	r8,r6[0x8]
80010560:	93 28       	st.w	r9[0x8],r8
80010562:	91 39       	st.w	r8[0xc],r9
80010564:	c0 fd       	rcall	80010782 <__malloc_unlock>
80010566:	ec cc ff f8 	sub	r12,r6,-8
8001056a:	d8 32       	popm	r0-r7,pc
8001056c:	12 96       	mov	r6,r9
8001056e:	02 36       	cp.w	r6,r1
80010570:	cd 31       	brne	80010516 <_malloc_r+0x21e>
80010572:	2f f2       	sub	r2,-1
80010574:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80010578:	c0 30       	breq	8001057e <_malloc_r+0x286>
8001057a:	2f 81       	sub	r1,-8
8001057c:	cc bb       	rjmp	80010512 <_malloc_r+0x21a>
8001057e:	1c 98       	mov	r8,lr
80010580:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80010584:	c0 81       	brne	80010594 <_malloc_r+0x29c>
80010586:	68 19       	ld.w	r9,r4[0x4]
80010588:	f6 08 11 ff 	rsub	r8,r11,-1
8001058c:	f3 e8 00 08 	and	r8,r9,r8
80010590:	89 18       	st.w	r4[0x4],r8
80010592:	c0 78       	rjmp	800105a0 <_malloc_r+0x2a8>
80010594:	f0 c9 00 08 	sub	r9,r8,8
80010598:	20 13       	sub	r3,1
8001059a:	70 08       	ld.w	r8,r8[0x0]
8001059c:	12 38       	cp.w	r8,r9
8001059e:	cf 10       	breq	80010580 <_malloc_r+0x288>
800105a0:	a1 7b       	lsl	r11,0x1
800105a2:	68 18       	ld.w	r8,r4[0x4]
800105a4:	10 3b       	cp.w	r11,r8
800105a6:	e0 8b 00 0f 	brhi	800105c4 <_malloc_r+0x2cc>
800105aa:	58 0b       	cp.w	r11,0
800105ac:	c0 c0       	breq	800105c4 <_malloc_r+0x2cc>
800105ae:	04 93       	mov	r3,r2
800105b0:	c0 38       	rjmp	800105b6 <_malloc_r+0x2be>
800105b2:	2f c3       	sub	r3,-4
800105b4:	a1 7b       	lsl	r11,0x1
800105b6:	f7 e8 00 09 	and	r9,r11,r8
800105ba:	ca 81       	brne	8001050a <_malloc_r+0x212>
800105bc:	cf bb       	rjmp	800105b2 <_malloc_r+0x2ba>
800105be:	d7 03       	nop
800105c0:	00 00       	add	r0,r0
800105c2:	0d 08       	ld.w	r8,r6++
800105c4:	68 23       	ld.w	r3,r4[0x8]
800105c6:	66 12       	ld.w	r2,r3[0x4]
800105c8:	e0 12 ff fc 	andl	r2,0xfffc
800105cc:	0e 32       	cp.w	r2,r7
800105ce:	5f 39       	srlo	r9
800105d0:	e4 07 01 08 	sub	r8,r2,r7
800105d4:	58 f8       	cp.w	r8,15
800105d6:	5f aa       	srle	r10
800105d8:	f5 e9 10 09 	or	r9,r10,r9
800105dc:	e0 80 00 9a 	breq	80010710 <_malloc_r+0x418>
800105e0:	4c 78       	lddpc	r8,800106fc <_malloc_r+0x404>
800105e2:	70 01       	ld.w	r1,r8[0x0]
800105e4:	4c 78       	lddpc	r8,80010700 <_malloc_r+0x408>
800105e6:	2f 01       	sub	r1,-16
800105e8:	70 08       	ld.w	r8,r8[0x0]
800105ea:	0e 01       	add	r1,r7
800105ec:	5b f8       	cp.w	r8,-1
800105ee:	c0 40       	breq	800105f6 <_malloc_r+0x2fe>
800105f0:	28 11       	sub	r1,-127
800105f2:	e0 11 ff 80 	andl	r1,0xff80
800105f6:	02 9b       	mov	r11,r1
800105f8:	0a 9c       	mov	r12,r5
800105fa:	e0 a0 05 17 	rcall	80011028 <_sbrk_r>
800105fe:	18 96       	mov	r6,r12
80010600:	5b fc       	cp.w	r12,-1
80010602:	c6 e0       	breq	800106de <_malloc_r+0x3e6>
80010604:	e6 02 00 08 	add	r8,r3,r2
80010608:	10 3c       	cp.w	r12,r8
8001060a:	c0 32       	brcc	80010610 <_malloc_r+0x318>
8001060c:	08 33       	cp.w	r3,r4
8001060e:	c6 81       	brne	800106de <_malloc_r+0x3e6>
80010610:	4b da       	lddpc	r10,80010704 <_malloc_r+0x40c>
80010612:	74 09       	ld.w	r9,r10[0x0]
80010614:	e2 09 00 09 	add	r9,r1,r9
80010618:	95 09       	st.w	r10[0x0],r9
8001061a:	10 36       	cp.w	r6,r8
8001061c:	c0 a1       	brne	80010630 <_malloc_r+0x338>
8001061e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80010622:	c0 71       	brne	80010630 <_malloc_r+0x338>
80010624:	e2 02 00 02 	add	r2,r1,r2
80010628:	68 28       	ld.w	r8,r4[0x8]
8001062a:	a1 a2       	sbr	r2,0x0
8001062c:	91 12       	st.w	r8[0x4],r2
8001062e:	c4 c8       	rjmp	800106c6 <_malloc_r+0x3ce>
80010630:	4b 4a       	lddpc	r10,80010700 <_malloc_r+0x408>
80010632:	74 0b       	ld.w	r11,r10[0x0]
80010634:	5b fb       	cp.w	r11,-1
80010636:	c0 31       	brne	8001063c <_malloc_r+0x344>
80010638:	95 06       	st.w	r10[0x0],r6
8001063a:	c0 68       	rjmp	80010646 <_malloc_r+0x34e>
8001063c:	ec 09 00 09 	add	r9,r6,r9
80010640:	4b 1a       	lddpc	r10,80010704 <_malloc_r+0x40c>
80010642:	10 19       	sub	r9,r8
80010644:	95 09       	st.w	r10[0x0],r9
80010646:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8001064a:	f0 09 11 08 	rsub	r9,r8,8
8001064e:	58 08       	cp.w	r8,0
80010650:	f2 08 17 10 	movne	r8,r9
80010654:	ed d8 e1 06 	addne	r6,r6,r8
80010658:	28 08       	sub	r8,-128
8001065a:	ec 01 00 01 	add	r1,r6,r1
8001065e:	0a 9c       	mov	r12,r5
80010660:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80010664:	f0 01 01 01 	sub	r1,r8,r1
80010668:	02 9b       	mov	r11,r1
8001066a:	e0 a0 04 df 	rcall	80011028 <_sbrk_r>
8001066e:	4a 68       	lddpc	r8,80010704 <_malloc_r+0x40c>
80010670:	5b fc       	cp.w	r12,-1
80010672:	ec 0c 17 00 	moveq	r12,r6
80010676:	f9 b1 00 00 	moveq	r1,0
8001067a:	70 09       	ld.w	r9,r8[0x0]
8001067c:	0c 1c       	sub	r12,r6
8001067e:	89 26       	st.w	r4[0x8],r6
80010680:	02 0c       	add	r12,r1
80010682:	12 01       	add	r1,r9
80010684:	a1 ac       	sbr	r12,0x0
80010686:	91 01       	st.w	r8[0x0],r1
80010688:	8d 1c       	st.w	r6[0x4],r12
8001068a:	08 33       	cp.w	r3,r4
8001068c:	c1 d0       	breq	800106c6 <_malloc_r+0x3ce>
8001068e:	58 f2       	cp.w	r2,15
80010690:	e0 8b 00 05 	brhi	8001069a <_malloc_r+0x3a2>
80010694:	30 18       	mov	r8,1
80010696:	8d 18       	st.w	r6[0x4],r8
80010698:	c2 38       	rjmp	800106de <_malloc_r+0x3e6>
8001069a:	30 59       	mov	r9,5
8001069c:	20 c2       	sub	r2,12
8001069e:	e0 12 ff f8 	andl	r2,0xfff8
800106a2:	e6 02 00 08 	add	r8,r3,r2
800106a6:	91 29       	st.w	r8[0x8],r9
800106a8:	91 19       	st.w	r8[0x4],r9
800106aa:	66 18       	ld.w	r8,r3[0x4]
800106ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800106b0:	e5 e8 10 08 	or	r8,r2,r8
800106b4:	87 18       	st.w	r3[0x4],r8
800106b6:	58 f2       	cp.w	r2,15
800106b8:	e0 88 00 07 	brls	800106c6 <_malloc_r+0x3ce>
800106bc:	e6 cb ff f8 	sub	r11,r3,-8
800106c0:	0a 9c       	mov	r12,r5
800106c2:	fe b0 fb 75 	rcall	8000fdac <_free_r>
800106c6:	49 19       	lddpc	r9,80010708 <_malloc_r+0x410>
800106c8:	72 0a       	ld.w	r10,r9[0x0]
800106ca:	48 f8       	lddpc	r8,80010704 <_malloc_r+0x40c>
800106cc:	70 08       	ld.w	r8,r8[0x0]
800106ce:	14 38       	cp.w	r8,r10
800106d0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800106d4:	48 e9       	lddpc	r9,8001070c <_malloc_r+0x414>
800106d6:	72 0a       	ld.w	r10,r9[0x0]
800106d8:	14 38       	cp.w	r8,r10
800106da:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800106de:	68 28       	ld.w	r8,r4[0x8]
800106e0:	70 18       	ld.w	r8,r8[0x4]
800106e2:	e0 18 ff fc 	andl	r8,0xfffc
800106e6:	0e 38       	cp.w	r8,r7
800106e8:	5f 39       	srlo	r9
800106ea:	0e 18       	sub	r8,r7
800106ec:	58 f8       	cp.w	r8,15
800106ee:	5f aa       	srle	r10
800106f0:	f5 e9 10 09 	or	r9,r10,r9
800106f4:	c0 e0       	breq	80010710 <_malloc_r+0x418>
800106f6:	0a 9c       	mov	r12,r5
800106f8:	c4 5c       	rcall	80010782 <__malloc_unlock>
800106fa:	d8 3a       	popm	r0-r7,pc,r12=0
800106fc:	00 00       	add	r0,r0
800106fe:	15 10       	ld.sh	r0,r10++
80010700:	00 00       	add	r0,r0
80010702:	11 14       	ld.sh	r4,r8++
80010704:	00 00       	add	r0,r0
80010706:	15 14       	ld.sh	r4,r10++
80010708:	00 00       	add	r0,r0
8001070a:	15 0c       	ld.w	r12,r10++
8001070c:	00 00       	add	r0,r0
8001070e:	15 08       	ld.w	r8,r10++
80010710:	68 26       	ld.w	r6,r4[0x8]
80010712:	a1 a8       	sbr	r8,0x0
80010714:	0e 99       	mov	r9,r7
80010716:	a1 a9       	sbr	r9,0x0
80010718:	8d 19       	st.w	r6[0x4],r9
8001071a:	ec 07 00 07 	add	r7,r6,r7
8001071e:	0a 9c       	mov	r12,r5
80010720:	89 27       	st.w	r4[0x8],r7
80010722:	8f 18       	st.w	r7[0x4],r8
80010724:	c2 fc       	rcall	80010782 <__malloc_unlock>
80010726:	ec cc ff f8 	sub	r12,r6,-8
8001072a:	d8 32       	popm	r0-r7,pc

8001072c <memchr>:
8001072c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80010730:	c0 68       	rjmp	8001073c <memchr+0x10>
80010732:	20 1a       	sub	r10,1
80010734:	19 88       	ld.ub	r8,r12[0x0]
80010736:	16 38       	cp.w	r8,r11
80010738:	5e 0c       	reteq	r12
8001073a:	2f fc       	sub	r12,-1
8001073c:	58 0a       	cp.w	r10,0
8001073e:	cf a1       	brne	80010732 <memchr+0x6>
80010740:	5e fa       	retal	r10

80010742 <memmove>:
80010742:	d4 01       	pushm	lr
80010744:	18 3b       	cp.w	r11,r12
80010746:	c1 92       	brcc	80010778 <memmove+0x36>
80010748:	f6 0a 00 09 	add	r9,r11,r10
8001074c:	12 3c       	cp.w	r12,r9
8001074e:	c1 52       	brcc	80010778 <memmove+0x36>
80010750:	f8 0a 00 0b 	add	r11,r12,r10
80010754:	30 08       	mov	r8,0
80010756:	c0 68       	rjmp	80010762 <memmove+0x20>
80010758:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8001075c:	20 1a       	sub	r10,1
8001075e:	f6 08 0b 0e 	st.b	r11[r8],lr
80010762:	20 18       	sub	r8,1
80010764:	58 0a       	cp.w	r10,0
80010766:	cf 91       	brne	80010758 <memmove+0x16>
80010768:	d8 02       	popm	pc
8001076a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8001076e:	20 1a       	sub	r10,1
80010770:	f8 08 0b 09 	st.b	r12[r8],r9
80010774:	2f f8       	sub	r8,-1
80010776:	c0 28       	rjmp	8001077a <memmove+0x38>
80010778:	30 08       	mov	r8,0
8001077a:	58 0a       	cp.w	r10,0
8001077c:	cf 71       	brne	8001076a <memmove+0x28>
8001077e:	d8 02       	popm	pc

80010780 <__malloc_lock>:
80010780:	5e fc       	retal	r12

80010782 <__malloc_unlock>:
80010782:	5e fc       	retal	r12

80010784 <__hi0bits>:
80010784:	18 98       	mov	r8,r12
80010786:	e0 1c 00 00 	andl	r12,0x0
8001078a:	f0 09 15 10 	lsl	r9,r8,0x10
8001078e:	58 0c       	cp.w	r12,0
80010790:	f2 08 17 00 	moveq	r8,r9
80010794:	f9 bc 00 10 	moveq	r12,16
80010798:	f9 bc 01 00 	movne	r12,0
8001079c:	10 9a       	mov	r10,r8
8001079e:	f0 09 15 08 	lsl	r9,r8,0x8
800107a2:	e6 1a ff 00 	andh	r10,0xff00,COH
800107a6:	f7 bc 00 f8 	subeq	r12,-8
800107aa:	f2 08 17 00 	moveq	r8,r9
800107ae:	10 9a       	mov	r10,r8
800107b0:	f0 09 15 04 	lsl	r9,r8,0x4
800107b4:	e6 1a f0 00 	andh	r10,0xf000,COH
800107b8:	f7 bc 00 fc 	subeq	r12,-4
800107bc:	f2 08 17 00 	moveq	r8,r9
800107c0:	10 9a       	mov	r10,r8
800107c2:	f0 09 15 02 	lsl	r9,r8,0x2
800107c6:	e6 1a c0 00 	andh	r10,0xc000,COH
800107ca:	f7 bc 00 fe 	subeq	r12,-2
800107ce:	f2 08 17 00 	moveq	r8,r9
800107d2:	58 08       	cp.w	r8,0
800107d4:	5e 5c       	retlt	r12
800107d6:	ed b8 00 1e 	bld	r8,0x1e
800107da:	f9 bc 01 20 	movne	r12,32
800107de:	f7 bc 00 ff 	subeq	r12,-1
800107e2:	5e fc       	retal	r12

800107e4 <__lo0bits>:
800107e4:	18 99       	mov	r9,r12
800107e6:	78 08       	ld.w	r8,r12[0x0]
800107e8:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800107ec:	c1 50       	breq	80010816 <__lo0bits+0x32>
800107ee:	ed b8 00 00 	bld	r8,0x0
800107f2:	c0 21       	brne	800107f6 <__lo0bits+0x12>
800107f4:	5e fd       	retal	0
800107f6:	10 9b       	mov	r11,r8
800107f8:	f0 0a 16 01 	lsr	r10,r8,0x1
800107fc:	e2 1b 00 02 	andl	r11,0x2,COH
80010800:	a3 88       	lsr	r8,0x2
80010802:	58 0b       	cp.w	r11,0
80010804:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80010808:	f9 bc 01 01 	movne	r12,1
8001080c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80010810:	f9 bc 00 02 	moveq	r12,2
80010814:	5e fc       	retal	r12
80010816:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8001081a:	f0 0b 16 10 	lsr	r11,r8,0x10
8001081e:	58 0a       	cp.w	r10,0
80010820:	f6 08 17 00 	moveq	r8,r11
80010824:	f9 bc 00 10 	moveq	r12,16
80010828:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8001082c:	f0 0a 16 08 	lsr	r10,r8,0x8
80010830:	58 0b       	cp.w	r11,0
80010832:	f7 bc 00 f8 	subeq	r12,-8
80010836:	f4 08 17 00 	moveq	r8,r10
8001083a:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8001083e:	f0 0a 16 04 	lsr	r10,r8,0x4
80010842:	58 0b       	cp.w	r11,0
80010844:	f7 bc 00 fc 	subeq	r12,-4
80010848:	f4 08 17 00 	moveq	r8,r10
8001084c:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80010850:	f0 0a 16 02 	lsr	r10,r8,0x2
80010854:	58 0b       	cp.w	r11,0
80010856:	f7 bc 00 fe 	subeq	r12,-2
8001085a:	f4 08 17 00 	moveq	r8,r10
8001085e:	ed b8 00 00 	bld	r8,0x0
80010862:	c0 60       	breq	8001086e <__lo0bits+0x8a>
80010864:	a1 98       	lsr	r8,0x1
80010866:	c0 31       	brne	8001086c <__lo0bits+0x88>
80010868:	32 0c       	mov	r12,32
8001086a:	5e fc       	retal	r12
8001086c:	2f fc       	sub	r12,-1
8001086e:	93 08       	st.w	r9[0x0],r8
80010870:	5e fc       	retal	r12

80010872 <__mcmp>:
80010872:	d4 01       	pushm	lr
80010874:	18 98       	mov	r8,r12
80010876:	76 49       	ld.w	r9,r11[0x10]
80010878:	78 4c       	ld.w	r12,r12[0x10]
8001087a:	12 1c       	sub	r12,r9
8001087c:	c1 31       	brne	800108a2 <__mcmp+0x30>
8001087e:	2f b9       	sub	r9,-5
80010880:	a3 69       	lsl	r9,0x2
80010882:	12 0b       	add	r11,r9
80010884:	f0 09 00 09 	add	r9,r8,r9
80010888:	2e c8       	sub	r8,-20
8001088a:	13 4e       	ld.w	lr,--r9
8001088c:	17 4a       	ld.w	r10,--r11
8001088e:	14 3e       	cp.w	lr,r10
80010890:	c0 60       	breq	8001089c <__mcmp+0x2a>
80010892:	f9 bc 03 ff 	movlo	r12,-1
80010896:	f9 bc 02 01 	movhs	r12,1
8001089a:	d8 02       	popm	pc
8001089c:	10 39       	cp.w	r9,r8
8001089e:	fe 9b ff f6 	brhi	8001088a <__mcmp+0x18>
800108a2:	d8 02       	popm	pc

800108a4 <_Bfree>:
800108a4:	d4 21       	pushm	r4-r7,lr
800108a6:	18 97       	mov	r7,r12
800108a8:	16 95       	mov	r5,r11
800108aa:	78 96       	ld.w	r6,r12[0x24]
800108ac:	58 06       	cp.w	r6,0
800108ae:	c0 91       	brne	800108c0 <_Bfree+0x1c>
800108b0:	31 0c       	mov	r12,16
800108b2:	fe b0 c4 cf 	rcall	80009250 <malloc>
800108b6:	99 36       	st.w	r12[0xc],r6
800108b8:	8f 9c       	st.w	r7[0x24],r12
800108ba:	99 16       	st.w	r12[0x4],r6
800108bc:	99 26       	st.w	r12[0x8],r6
800108be:	99 06       	st.w	r12[0x0],r6
800108c0:	58 05       	cp.w	r5,0
800108c2:	c0 90       	breq	800108d4 <_Bfree+0x30>
800108c4:	6a 19       	ld.w	r9,r5[0x4]
800108c6:	6e 98       	ld.w	r8,r7[0x24]
800108c8:	70 38       	ld.w	r8,r8[0xc]
800108ca:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800108ce:	8b 0a       	st.w	r5[0x0],r10
800108d0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800108d4:	d8 22       	popm	r4-r7,pc
800108d6:	d7 03       	nop

800108d8 <_Balloc>:
800108d8:	d4 21       	pushm	r4-r7,lr
800108da:	18 97       	mov	r7,r12
800108dc:	16 96       	mov	r6,r11
800108de:	78 95       	ld.w	r5,r12[0x24]
800108e0:	58 05       	cp.w	r5,0
800108e2:	c0 91       	brne	800108f4 <_Balloc+0x1c>
800108e4:	31 0c       	mov	r12,16
800108e6:	fe b0 c4 b5 	rcall	80009250 <malloc>
800108ea:	99 35       	st.w	r12[0xc],r5
800108ec:	8f 9c       	st.w	r7[0x24],r12
800108ee:	99 15       	st.w	r12[0x4],r5
800108f0:	99 25       	st.w	r12[0x8],r5
800108f2:	99 05       	st.w	r12[0x0],r5
800108f4:	6e 95       	ld.w	r5,r7[0x24]
800108f6:	6a 38       	ld.w	r8,r5[0xc]
800108f8:	58 08       	cp.w	r8,0
800108fa:	c0 b1       	brne	80010910 <_Balloc+0x38>
800108fc:	31 0a       	mov	r10,16
800108fe:	30 4b       	mov	r11,4
80010900:	0e 9c       	mov	r12,r7
80010902:	e0 a0 04 af 	rcall	80011260 <_calloc_r>
80010906:	8b 3c       	st.w	r5[0xc],r12
80010908:	6e 98       	ld.w	r8,r7[0x24]
8001090a:	70 3c       	ld.w	r12,r8[0xc]
8001090c:	58 0c       	cp.w	r12,0
8001090e:	c1 b0       	breq	80010944 <_Balloc+0x6c>
80010910:	6e 98       	ld.w	r8,r7[0x24]
80010912:	70 38       	ld.w	r8,r8[0xc]
80010914:	f0 06 00 28 	add	r8,r8,r6<<0x2
80010918:	70 0c       	ld.w	r12,r8[0x0]
8001091a:	58 0c       	cp.w	r12,0
8001091c:	c0 40       	breq	80010924 <_Balloc+0x4c>
8001091e:	78 09       	ld.w	r9,r12[0x0]
80010920:	91 09       	st.w	r8[0x0],r9
80010922:	c0 e8       	rjmp	8001093e <_Balloc+0x66>
80010924:	0e 9c       	mov	r12,r7
80010926:	30 17       	mov	r7,1
80010928:	0e 9b       	mov	r11,r7
8001092a:	ee 06 09 47 	lsl	r7,r7,r6
8001092e:	ee ca ff fb 	sub	r10,r7,-5
80010932:	a3 6a       	lsl	r10,0x2
80010934:	e0 a0 04 96 	rcall	80011260 <_calloc_r>
80010938:	c0 60       	breq	80010944 <_Balloc+0x6c>
8001093a:	99 16       	st.w	r12[0x4],r6
8001093c:	99 27       	st.w	r12[0x8],r7
8001093e:	30 08       	mov	r8,0
80010940:	99 38       	st.w	r12[0xc],r8
80010942:	99 48       	st.w	r12[0x10],r8
80010944:	d8 22       	popm	r4-r7,pc
80010946:	d7 03       	nop

80010948 <__d2b>:
80010948:	d4 31       	pushm	r0-r7,lr
8001094a:	20 2d       	sub	sp,8
8001094c:	16 93       	mov	r3,r11
8001094e:	12 96       	mov	r6,r9
80010950:	10 95       	mov	r5,r8
80010952:	14 92       	mov	r2,r10
80010954:	30 1b       	mov	r11,1
80010956:	cc 1f       	rcall	800108d8 <_Balloc>
80010958:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8001095c:	50 09       	stdsp	sp[0x0],r9
8001095e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80010962:	f0 01 16 14 	lsr	r1,r8,0x14
80010966:	fc 1a 00 10 	movh	r10,0x10
8001096a:	f3 da e1 39 	orne	r9,r9,r10
8001096e:	fb f9 1a 00 	st.wne	sp[0x0],r9
80010972:	18 94       	mov	r4,r12
80010974:	58 02       	cp.w	r2,0
80010976:	c1 d0       	breq	800109b0 <__d2b+0x68>
80010978:	fa cc ff f8 	sub	r12,sp,-8
8001097c:	18 d2       	st.w	--r12,r2
8001097e:	c3 3f       	rcall	800107e4 <__lo0bits>
80010980:	40 18       	lddsp	r8,sp[0x4]
80010982:	c0 d0       	breq	8001099c <__d2b+0x54>
80010984:	40 09       	lddsp	r9,sp[0x0]
80010986:	f8 0a 11 20 	rsub	r10,r12,32
8001098a:	f2 0a 09 4a 	lsl	r10,r9,r10
8001098e:	f5 e8 10 08 	or	r8,r10,r8
80010992:	89 58       	st.w	r4[0x14],r8
80010994:	f2 0c 0a 49 	lsr	r9,r9,r12
80010998:	50 09       	stdsp	sp[0x0],r9
8001099a:	c0 28       	rjmp	8001099e <__d2b+0x56>
8001099c:	89 58       	st.w	r4[0x14],r8
8001099e:	40 08       	lddsp	r8,sp[0x0]
800109a0:	58 08       	cp.w	r8,0
800109a2:	f9 b3 01 02 	movne	r3,2
800109a6:	f9 b3 00 01 	moveq	r3,1
800109aa:	89 68       	st.w	r4[0x18],r8
800109ac:	89 43       	st.w	r4[0x10],r3
800109ae:	c0 88       	rjmp	800109be <__d2b+0x76>
800109b0:	1a 9c       	mov	r12,sp
800109b2:	c1 9f       	rcall	800107e4 <__lo0bits>
800109b4:	30 13       	mov	r3,1
800109b6:	40 08       	lddsp	r8,sp[0x0]
800109b8:	2e 0c       	sub	r12,-32
800109ba:	89 43       	st.w	r4[0x10],r3
800109bc:	89 58       	st.w	r4[0x14],r8
800109be:	58 01       	cp.w	r1,0
800109c0:	c0 90       	breq	800109d2 <__d2b+0x8a>
800109c2:	e2 c1 04 33 	sub	r1,r1,1075
800109c6:	18 01       	add	r1,r12
800109c8:	8d 01       	st.w	r6[0x0],r1
800109ca:	f8 0c 11 35 	rsub	r12,r12,53
800109ce:	8b 0c       	st.w	r5[0x0],r12
800109d0:	c0 c8       	rjmp	800109e8 <__d2b+0xa0>
800109d2:	e6 c8 ff fc 	sub	r8,r3,-4
800109d6:	f8 cc 04 32 	sub	r12,r12,1074
800109da:	a5 73       	lsl	r3,0x5
800109dc:	8d 0c       	st.w	r6[0x0],r12
800109de:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800109e2:	cd 1e       	rcall	80010784 <__hi0bits>
800109e4:	18 13       	sub	r3,r12
800109e6:	8b 03       	st.w	r5[0x0],r3
800109e8:	08 9c       	mov	r12,r4
800109ea:	2f ed       	sub	sp,-8
800109ec:	d8 32       	popm	r0-r7,pc
800109ee:	d7 03       	nop

800109f0 <__mdiff>:
800109f0:	d4 31       	pushm	r0-r7,lr
800109f2:	74 48       	ld.w	r8,r10[0x10]
800109f4:	76 45       	ld.w	r5,r11[0x10]
800109f6:	16 97       	mov	r7,r11
800109f8:	14 96       	mov	r6,r10
800109fa:	10 15       	sub	r5,r8
800109fc:	c1 31       	brne	80010a22 <__mdiff+0x32>
800109fe:	2f b8       	sub	r8,-5
80010a00:	ee ce ff ec 	sub	lr,r7,-20
80010a04:	a3 68       	lsl	r8,0x2
80010a06:	f4 08 00 0b 	add	r11,r10,r8
80010a0a:	ee 08 00 08 	add	r8,r7,r8
80010a0e:	11 4a       	ld.w	r10,--r8
80010a10:	17 49       	ld.w	r9,--r11
80010a12:	12 3a       	cp.w	r10,r9
80010a14:	c0 30       	breq	80010a1a <__mdiff+0x2a>
80010a16:	c0 e2       	brcc	80010a32 <__mdiff+0x42>
80010a18:	c0 78       	rjmp	80010a26 <__mdiff+0x36>
80010a1a:	1c 38       	cp.w	r8,lr
80010a1c:	fe 9b ff f9 	brhi	80010a0e <__mdiff+0x1e>
80010a20:	c4 98       	rjmp	80010ab2 <__mdiff+0xc2>
80010a22:	58 05       	cp.w	r5,0
80010a24:	c0 64       	brge	80010a30 <__mdiff+0x40>
80010a26:	0e 98       	mov	r8,r7
80010a28:	30 15       	mov	r5,1
80010a2a:	0c 97       	mov	r7,r6
80010a2c:	10 96       	mov	r6,r8
80010a2e:	c0 28       	rjmp	80010a32 <__mdiff+0x42>
80010a30:	30 05       	mov	r5,0
80010a32:	6e 1b       	ld.w	r11,r7[0x4]
80010a34:	c5 2f       	rcall	800108d8 <_Balloc>
80010a36:	6e 49       	ld.w	r9,r7[0x10]
80010a38:	6c 44       	ld.w	r4,r6[0x10]
80010a3a:	99 35       	st.w	r12[0xc],r5
80010a3c:	2f b4       	sub	r4,-5
80010a3e:	f2 c5 ff fb 	sub	r5,r9,-5
80010a42:	ec 04 00 24 	add	r4,r6,r4<<0x2
80010a46:	ee 05 00 25 	add	r5,r7,r5<<0x2
80010a4a:	2e c6       	sub	r6,-20
80010a4c:	2e c7       	sub	r7,-20
80010a4e:	f8 c8 ff ec 	sub	r8,r12,-20
80010a52:	30 0a       	mov	r10,0
80010a54:	0f 0e       	ld.w	lr,r7++
80010a56:	0d 0b       	ld.w	r11,r6++
80010a58:	fc 02 16 10 	lsr	r2,lr,0x10
80010a5c:	f6 03 16 10 	lsr	r3,r11,0x10
80010a60:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80010a64:	e4 03 01 03 	sub	r3,r2,r3
80010a68:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010a6c:	fc 0b 01 0b 	sub	r11,lr,r11
80010a70:	f6 0a 00 0a 	add	r10,r11,r10
80010a74:	b0 1a       	st.h	r8[0x2],r10
80010a76:	b1 4a       	asr	r10,0x10
80010a78:	e6 0a 00 0a 	add	r10,r3,r10
80010a7c:	b0 0a       	st.h	r8[0x0],r10
80010a7e:	2f c8       	sub	r8,-4
80010a80:	b1 4a       	asr	r10,0x10
80010a82:	08 36       	cp.w	r6,r4
80010a84:	ce 83       	brcs	80010a54 <__mdiff+0x64>
80010a86:	c0 d8       	rjmp	80010aa0 <__mdiff+0xb0>
80010a88:	0f 0b       	ld.w	r11,r7++
80010a8a:	f6 0e 16 10 	lsr	lr,r11,0x10
80010a8e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010a92:	16 0a       	add	r10,r11
80010a94:	b0 1a       	st.h	r8[0x2],r10
80010a96:	b1 4a       	asr	r10,0x10
80010a98:	1c 0a       	add	r10,lr
80010a9a:	b0 0a       	st.h	r8[0x0],r10
80010a9c:	2f c8       	sub	r8,-4
80010a9e:	b1 4a       	asr	r10,0x10
80010aa0:	0a 37       	cp.w	r7,r5
80010aa2:	cf 33       	brcs	80010a88 <__mdiff+0x98>
80010aa4:	c0 28       	rjmp	80010aa8 <__mdiff+0xb8>
80010aa6:	20 19       	sub	r9,1
80010aa8:	11 4a       	ld.w	r10,--r8
80010aaa:	58 0a       	cp.w	r10,0
80010aac:	cf d0       	breq	80010aa6 <__mdiff+0xb6>
80010aae:	99 49       	st.w	r12[0x10],r9
80010ab0:	d8 32       	popm	r0-r7,pc
80010ab2:	30 0b       	mov	r11,0
80010ab4:	c1 2f       	rcall	800108d8 <_Balloc>
80010ab6:	30 18       	mov	r8,1
80010ab8:	99 48       	st.w	r12[0x10],r8
80010aba:	30 08       	mov	r8,0
80010abc:	99 58       	st.w	r12[0x14],r8
80010abe:	d8 32       	popm	r0-r7,pc

80010ac0 <__lshift>:
80010ac0:	d4 31       	pushm	r0-r7,lr
80010ac2:	16 97       	mov	r7,r11
80010ac4:	76 46       	ld.w	r6,r11[0x10]
80010ac6:	f4 02 14 05 	asr	r2,r10,0x5
80010aca:	2f f6       	sub	r6,-1
80010acc:	14 93       	mov	r3,r10
80010ace:	18 94       	mov	r4,r12
80010ad0:	04 06       	add	r6,r2
80010ad2:	76 1b       	ld.w	r11,r11[0x4]
80010ad4:	6e 28       	ld.w	r8,r7[0x8]
80010ad6:	c0 38       	rjmp	80010adc <__lshift+0x1c>
80010ad8:	2f fb       	sub	r11,-1
80010ada:	a1 78       	lsl	r8,0x1
80010adc:	10 36       	cp.w	r6,r8
80010ade:	fe 99 ff fd 	brgt	80010ad8 <__lshift+0x18>
80010ae2:	08 9c       	mov	r12,r4
80010ae4:	cf ae       	rcall	800108d8 <_Balloc>
80010ae6:	30 09       	mov	r9,0
80010ae8:	18 95       	mov	r5,r12
80010aea:	f8 c8 ff ec 	sub	r8,r12,-20
80010aee:	12 9a       	mov	r10,r9
80010af0:	c0 38       	rjmp	80010af6 <__lshift+0x36>
80010af2:	10 aa       	st.w	r8++,r10
80010af4:	2f f9       	sub	r9,-1
80010af6:	04 39       	cp.w	r9,r2
80010af8:	cf d5       	brlt	80010af2 <__lshift+0x32>
80010afa:	6e 4b       	ld.w	r11,r7[0x10]
80010afc:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80010b00:	2f bb       	sub	r11,-5
80010b02:	ee c9 ff ec 	sub	r9,r7,-20
80010b06:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80010b0a:	58 03       	cp.w	r3,0
80010b0c:	c1 30       	breq	80010b32 <__lshift+0x72>
80010b0e:	e6 0c 11 20 	rsub	r12,r3,32
80010b12:	30 0a       	mov	r10,0
80010b14:	72 02       	ld.w	r2,r9[0x0]
80010b16:	e4 03 09 42 	lsl	r2,r2,r3
80010b1a:	04 4a       	or	r10,r2
80010b1c:	10 aa       	st.w	r8++,r10
80010b1e:	13 0a       	ld.w	r10,r9++
80010b20:	f4 0c 0a 4a 	lsr	r10,r10,r12
80010b24:	16 39       	cp.w	r9,r11
80010b26:	cf 73       	brcs	80010b14 <__lshift+0x54>
80010b28:	91 0a       	st.w	r8[0x0],r10
80010b2a:	58 0a       	cp.w	r10,0
80010b2c:	c0 70       	breq	80010b3a <__lshift+0x7a>
80010b2e:	2f f6       	sub	r6,-1
80010b30:	c0 58       	rjmp	80010b3a <__lshift+0x7a>
80010b32:	13 0a       	ld.w	r10,r9++
80010b34:	10 aa       	st.w	r8++,r10
80010b36:	16 39       	cp.w	r9,r11
80010b38:	cf d3       	brcs	80010b32 <__lshift+0x72>
80010b3a:	08 9c       	mov	r12,r4
80010b3c:	20 16       	sub	r6,1
80010b3e:	0e 9b       	mov	r11,r7
80010b40:	8b 46       	st.w	r5[0x10],r6
80010b42:	cb 1e       	rcall	800108a4 <_Bfree>
80010b44:	0a 9c       	mov	r12,r5
80010b46:	d8 32       	popm	r0-r7,pc

80010b48 <__multiply>:
80010b48:	d4 31       	pushm	r0-r7,lr
80010b4a:	20 2d       	sub	sp,8
80010b4c:	76 49       	ld.w	r9,r11[0x10]
80010b4e:	74 48       	ld.w	r8,r10[0x10]
80010b50:	16 96       	mov	r6,r11
80010b52:	14 95       	mov	r5,r10
80010b54:	10 39       	cp.w	r9,r8
80010b56:	ec 08 17 50 	movlt	r8,r6
80010b5a:	ea 06 17 50 	movlt	r6,r5
80010b5e:	f0 05 17 50 	movlt	r5,r8
80010b62:	6c 28       	ld.w	r8,r6[0x8]
80010b64:	76 43       	ld.w	r3,r11[0x10]
80010b66:	74 42       	ld.w	r2,r10[0x10]
80010b68:	76 1b       	ld.w	r11,r11[0x4]
80010b6a:	e4 03 00 07 	add	r7,r2,r3
80010b6e:	10 37       	cp.w	r7,r8
80010b70:	f7 bb 09 ff 	subgt	r11,-1
80010b74:	cb 2e       	rcall	800108d8 <_Balloc>
80010b76:	ee c4 ff fb 	sub	r4,r7,-5
80010b7a:	f8 c9 ff ec 	sub	r9,r12,-20
80010b7e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80010b82:	30 0a       	mov	r10,0
80010b84:	12 98       	mov	r8,r9
80010b86:	c0 28       	rjmp	80010b8a <__multiply+0x42>
80010b88:	10 aa       	st.w	r8++,r10
80010b8a:	08 38       	cp.w	r8,r4
80010b8c:	cf e3       	brcs	80010b88 <__multiply+0x40>
80010b8e:	2f b3       	sub	r3,-5
80010b90:	2f b2       	sub	r2,-5
80010b92:	ec 03 00 23 	add	r3,r6,r3<<0x2
80010b96:	ea 02 00 22 	add	r2,r5,r2<<0x2
80010b9a:	ec cb ff ec 	sub	r11,r6,-20
80010b9e:	50 12       	stdsp	sp[0x4],r2
80010ba0:	ea ca ff ec 	sub	r10,r5,-20
80010ba4:	c4 48       	rjmp	80010c2c <__multiply+0xe4>
80010ba6:	94 95       	ld.uh	r5,r10[0x2]
80010ba8:	58 05       	cp.w	r5,0
80010baa:	c2 00       	breq	80010bea <__multiply+0xa2>
80010bac:	12 98       	mov	r8,r9
80010bae:	16 96       	mov	r6,r11
80010bb0:	30 0e       	mov	lr,0
80010bb2:	50 09       	stdsp	sp[0x0],r9
80010bb4:	0d 02       	ld.w	r2,r6++
80010bb6:	e4 00 16 10 	lsr	r0,r2,0x10
80010bba:	70 01       	ld.w	r1,r8[0x0]
80010bbc:	70 09       	ld.w	r9,r8[0x0]
80010bbe:	b1 81       	lsr	r1,0x10
80010bc0:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80010bc4:	e0 05 03 41 	mac	r1,r0,r5
80010bc8:	ab 32       	mul	r2,r5
80010bca:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80010bce:	00 02       	add	r2,r0
80010bd0:	e4 0e 00 0e 	add	lr,r2,lr
80010bd4:	b0 1e       	st.h	r8[0x2],lr
80010bd6:	b1 8e       	lsr	lr,0x10
80010bd8:	1c 01       	add	r1,lr
80010bda:	b0 01       	st.h	r8[0x0],r1
80010bdc:	e2 0e 16 10 	lsr	lr,r1,0x10
80010be0:	2f c8       	sub	r8,-4
80010be2:	06 36       	cp.w	r6,r3
80010be4:	ce 83       	brcs	80010bb4 <__multiply+0x6c>
80010be6:	40 09       	lddsp	r9,sp[0x0]
80010be8:	91 0e       	st.w	r8[0x0],lr
80010bea:	94 86       	ld.uh	r6,r10[0x0]
80010bec:	58 06       	cp.w	r6,0
80010bee:	c1 d0       	breq	80010c28 <__multiply+0xe0>
80010bf0:	72 02       	ld.w	r2,r9[0x0]
80010bf2:	12 98       	mov	r8,r9
80010bf4:	16 9e       	mov	lr,r11
80010bf6:	30 05       	mov	r5,0
80010bf8:	b0 12       	st.h	r8[0x2],r2
80010bfa:	1d 01       	ld.w	r1,lr++
80010bfc:	90 82       	ld.uh	r2,r8[0x0]
80010bfe:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80010c02:	ad 30       	mul	r0,r6
80010c04:	e0 02 00 02 	add	r2,r0,r2
80010c08:	e4 05 00 05 	add	r5,r2,r5
80010c0c:	b0 05       	st.h	r8[0x0],r5
80010c0e:	b1 85       	lsr	r5,0x10
80010c10:	b1 81       	lsr	r1,0x10
80010c12:	2f c8       	sub	r8,-4
80010c14:	ad 31       	mul	r1,r6
80010c16:	90 92       	ld.uh	r2,r8[0x2]
80010c18:	e2 02 00 02 	add	r2,r1,r2
80010c1c:	0a 02       	add	r2,r5
80010c1e:	e4 05 16 10 	lsr	r5,r2,0x10
80010c22:	06 3e       	cp.w	lr,r3
80010c24:	ce a3       	brcs	80010bf8 <__multiply+0xb0>
80010c26:	91 02       	st.w	r8[0x0],r2
80010c28:	2f ca       	sub	r10,-4
80010c2a:	2f c9       	sub	r9,-4
80010c2c:	40 18       	lddsp	r8,sp[0x4]
80010c2e:	10 3a       	cp.w	r10,r8
80010c30:	cb b3       	brcs	80010ba6 <__multiply+0x5e>
80010c32:	c0 28       	rjmp	80010c36 <__multiply+0xee>
80010c34:	20 17       	sub	r7,1
80010c36:	58 07       	cp.w	r7,0
80010c38:	e0 8a 00 05 	brle	80010c42 <__multiply+0xfa>
80010c3c:	09 48       	ld.w	r8,--r4
80010c3e:	58 08       	cp.w	r8,0
80010c40:	cf a0       	breq	80010c34 <__multiply+0xec>
80010c42:	99 47       	st.w	r12[0x10],r7
80010c44:	2f ed       	sub	sp,-8
80010c46:	d8 32       	popm	r0-r7,pc

80010c48 <__i2b>:
80010c48:	d4 21       	pushm	r4-r7,lr
80010c4a:	16 97       	mov	r7,r11
80010c4c:	30 1b       	mov	r11,1
80010c4e:	c4 5e       	rcall	800108d8 <_Balloc>
80010c50:	30 19       	mov	r9,1
80010c52:	99 57       	st.w	r12[0x14],r7
80010c54:	99 49       	st.w	r12[0x10],r9
80010c56:	d8 22       	popm	r4-r7,pc

80010c58 <__multadd>:
80010c58:	d4 31       	pushm	r0-r7,lr
80010c5a:	30 08       	mov	r8,0
80010c5c:	12 95       	mov	r5,r9
80010c5e:	16 97       	mov	r7,r11
80010c60:	18 96       	mov	r6,r12
80010c62:	76 44       	ld.w	r4,r11[0x10]
80010c64:	f6 c9 ff ec 	sub	r9,r11,-20
80010c68:	72 0b       	ld.w	r11,r9[0x0]
80010c6a:	f6 0c 16 10 	lsr	r12,r11,0x10
80010c6e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010c72:	f4 0c 02 4c 	mul	r12,r10,r12
80010c76:	f4 0b 03 45 	mac	r5,r10,r11
80010c7a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80010c7e:	b1 85       	lsr	r5,0x10
80010c80:	18 05       	add	r5,r12
80010c82:	ea 0c 15 10 	lsl	r12,r5,0x10
80010c86:	f8 0b 00 0b 	add	r11,r12,r11
80010c8a:	12 ab       	st.w	r9++,r11
80010c8c:	2f f8       	sub	r8,-1
80010c8e:	b1 85       	lsr	r5,0x10
80010c90:	08 38       	cp.w	r8,r4
80010c92:	ce b5       	brlt	80010c68 <__multadd+0x10>
80010c94:	58 05       	cp.w	r5,0
80010c96:	c1 c0       	breq	80010cce <__multadd+0x76>
80010c98:	6e 28       	ld.w	r8,r7[0x8]
80010c9a:	10 34       	cp.w	r4,r8
80010c9c:	c1 35       	brlt	80010cc2 <__multadd+0x6a>
80010c9e:	6e 1b       	ld.w	r11,r7[0x4]
80010ca0:	0c 9c       	mov	r12,r6
80010ca2:	2f fb       	sub	r11,-1
80010ca4:	c1 ae       	rcall	800108d8 <_Balloc>
80010ca6:	6e 4a       	ld.w	r10,r7[0x10]
80010ca8:	ee cb ff f4 	sub	r11,r7,-12
80010cac:	18 93       	mov	r3,r12
80010cae:	2f ea       	sub	r10,-2
80010cb0:	2f 4c       	sub	r12,-12
80010cb2:	a3 6a       	lsl	r10,0x2
80010cb4:	fe b0 dd 7f 	rcall	8000c7b2 <memcpy>
80010cb8:	0e 9b       	mov	r11,r7
80010cba:	0c 9c       	mov	r12,r6
80010cbc:	fe b0 fd f4 	rcall	800108a4 <_Bfree>
80010cc0:	06 97       	mov	r7,r3
80010cc2:	e8 c8 ff ff 	sub	r8,r4,-1
80010cc6:	2f b4       	sub	r4,-5
80010cc8:	8f 48       	st.w	r7[0x10],r8
80010cca:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80010cce:	0e 9c       	mov	r12,r7
80010cd0:	d8 32       	popm	r0-r7,pc
80010cd2:	d7 03       	nop

80010cd4 <__pow5mult>:
80010cd4:	d4 31       	pushm	r0-r7,lr
80010cd6:	14 96       	mov	r6,r10
80010cd8:	18 97       	mov	r7,r12
80010cda:	16 94       	mov	r4,r11
80010cdc:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80010ce0:	c0 80       	breq	80010cf0 <__pow5mult+0x1c>
80010ce2:	20 18       	sub	r8,1
80010ce4:	49 f9       	lddpc	r9,80010d60 <__pow5mult+0x8c>
80010ce6:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80010cea:	30 09       	mov	r9,0
80010cec:	cb 6f       	rcall	80010c58 <__multadd>
80010cee:	18 94       	mov	r4,r12
80010cf0:	a3 46       	asr	r6,0x2
80010cf2:	c3 40       	breq	80010d5a <__pow5mult+0x86>
80010cf4:	6e 95       	ld.w	r5,r7[0x24]
80010cf6:	58 05       	cp.w	r5,0
80010cf8:	c0 91       	brne	80010d0a <__pow5mult+0x36>
80010cfa:	31 0c       	mov	r12,16
80010cfc:	fe b0 c2 aa 	rcall	80009250 <malloc>
80010d00:	99 35       	st.w	r12[0xc],r5
80010d02:	8f 9c       	st.w	r7[0x24],r12
80010d04:	99 15       	st.w	r12[0x4],r5
80010d06:	99 25       	st.w	r12[0x8],r5
80010d08:	99 05       	st.w	r12[0x0],r5
80010d0a:	6e 93       	ld.w	r3,r7[0x24]
80010d0c:	66 25       	ld.w	r5,r3[0x8]
80010d0e:	58 05       	cp.w	r5,0
80010d10:	c0 c1       	brne	80010d28 <__pow5mult+0x54>
80010d12:	e0 6b 02 71 	mov	r11,625
80010d16:	0e 9c       	mov	r12,r7
80010d18:	c9 8f       	rcall	80010c48 <__i2b>
80010d1a:	87 2c       	st.w	r3[0x8],r12
80010d1c:	30 08       	mov	r8,0
80010d1e:	18 95       	mov	r5,r12
80010d20:	99 08       	st.w	r12[0x0],r8
80010d22:	c0 38       	rjmp	80010d28 <__pow5mult+0x54>
80010d24:	06 9c       	mov	r12,r3
80010d26:	18 95       	mov	r5,r12
80010d28:	ed b6 00 00 	bld	r6,0x0
80010d2c:	c0 b1       	brne	80010d42 <__pow5mult+0x6e>
80010d2e:	08 9b       	mov	r11,r4
80010d30:	0a 9a       	mov	r10,r5
80010d32:	0e 9c       	mov	r12,r7
80010d34:	c0 af       	rcall	80010b48 <__multiply>
80010d36:	08 9b       	mov	r11,r4
80010d38:	18 93       	mov	r3,r12
80010d3a:	0e 9c       	mov	r12,r7
80010d3c:	06 94       	mov	r4,r3
80010d3e:	fe b0 fd b3 	rcall	800108a4 <_Bfree>
80010d42:	a1 56       	asr	r6,0x1
80010d44:	c0 b0       	breq	80010d5a <__pow5mult+0x86>
80010d46:	6a 03       	ld.w	r3,r5[0x0]
80010d48:	58 03       	cp.w	r3,0
80010d4a:	ce d1       	brne	80010d24 <__pow5mult+0x50>
80010d4c:	0a 9a       	mov	r10,r5
80010d4e:	0a 9b       	mov	r11,r5
80010d50:	0e 9c       	mov	r12,r7
80010d52:	cf be       	rcall	80010b48 <__multiply>
80010d54:	8b 0c       	st.w	r5[0x0],r12
80010d56:	99 03       	st.w	r12[0x0],r3
80010d58:	ce 7b       	rjmp	80010d26 <__pow5mult+0x52>
80010d5a:	08 9c       	mov	r12,r4
80010d5c:	d8 32       	popm	r0-r7,pc
80010d5e:	d7 03       	nop
80010d60:	80 01       	ld.sh	r1,r0[0x0]
80010d62:	3f 50       	mov	r0,-11

80010d64 <_realloc_r>:
80010d64:	d4 31       	pushm	r0-r7,lr
80010d66:	20 1d       	sub	sp,4
80010d68:	16 94       	mov	r4,r11
80010d6a:	18 92       	mov	r2,r12
80010d6c:	14 9b       	mov	r11,r10
80010d6e:	58 04       	cp.w	r4,0
80010d70:	c0 51       	brne	80010d7a <_realloc_r+0x16>
80010d72:	fe b0 fa c3 	rcall	800102f8 <_malloc_r>
80010d76:	18 95       	mov	r5,r12
80010d78:	c5 59       	rjmp	80011022 <_realloc_r+0x2be>
80010d7a:	50 0a       	stdsp	sp[0x0],r10
80010d7c:	fe b0 fd 02 	rcall	80010780 <__malloc_lock>
80010d80:	40 0b       	lddsp	r11,sp[0x0]
80010d82:	e8 c1 00 08 	sub	r1,r4,8
80010d86:	f6 c6 ff f5 	sub	r6,r11,-11
80010d8a:	62 1c       	ld.w	r12,r1[0x4]
80010d8c:	59 66       	cp.w	r6,22
80010d8e:	f9 b6 08 10 	movls	r6,16
80010d92:	f9 b8 0b f8 	movhi	r8,-8
80010d96:	ed d8 eb 26 	andhi	r6,r6,r8
80010d9a:	16 36       	cp.w	r6,r11
80010d9c:	5f 38       	srlo	r8
80010d9e:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80010da2:	c0 50       	breq	80010dac <_realloc_r+0x48>
80010da4:	30 c8       	mov	r8,12
80010da6:	30 05       	mov	r5,0
80010da8:	85 38       	st.w	r2[0xc],r8
80010daa:	c3 c9       	rjmp	80011022 <_realloc_r+0x2be>
80010dac:	18 90       	mov	r0,r12
80010dae:	e0 10 ff fc 	andl	r0,0xfffc
80010db2:	0c 30       	cp.w	r0,r6
80010db4:	e0 84 01 0c 	brge	80010fcc <_realloc_r+0x268>
80010db8:	4c 98       	lddpc	r8,80010edc <_realloc_r+0x178>
80010dba:	e2 00 00 09 	add	r9,r1,r0
80010dbe:	70 25       	ld.w	r5,r8[0x8]
80010dc0:	0a 39       	cp.w	r9,r5
80010dc2:	c0 90       	breq	80010dd4 <_realloc_r+0x70>
80010dc4:	72 1a       	ld.w	r10,r9[0x4]
80010dc6:	a1 ca       	cbr	r10,0x0
80010dc8:	f2 0a 00 0a 	add	r10,r9,r10
80010dcc:	74 1a       	ld.w	r10,r10[0x4]
80010dce:	ed ba 00 00 	bld	r10,0x0
80010dd2:	c2 20       	breq	80010e16 <_realloc_r+0xb2>
80010dd4:	72 1a       	ld.w	r10,r9[0x4]
80010dd6:	e0 1a ff fc 	andl	r10,0xfffc
80010dda:	f4 00 00 03 	add	r3,r10,r0
80010dde:	0a 39       	cp.w	r9,r5
80010de0:	c1 31       	brne	80010e06 <_realloc_r+0xa2>
80010de2:	ec c7 ff f0 	sub	r7,r6,-16
80010de6:	0e 33       	cp.w	r3,r7
80010de8:	c1 95       	brlt	80010e1a <_realloc_r+0xb6>
80010dea:	e2 06 00 09 	add	r9,r1,r6
80010dee:	0c 13       	sub	r3,r6
80010df0:	a1 a3       	sbr	r3,0x0
80010df2:	93 13       	st.w	r9[0x4],r3
80010df4:	91 29       	st.w	r8[0x8],r9
80010df6:	04 9c       	mov	r12,r2
80010df8:	62 18       	ld.w	r8,r1[0x4]
80010dfa:	08 95       	mov	r5,r4
80010dfc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010e00:	10 46       	or	r6,r8
80010e02:	83 16       	st.w	r1[0x4],r6
80010e04:	c0 d9       	rjmp	8001101e <_realloc_r+0x2ba>
80010e06:	0c 33       	cp.w	r3,r6
80010e08:	c0 95       	brlt	80010e1a <_realloc_r+0xb6>
80010e0a:	72 28       	ld.w	r8,r9[0x8]
80010e0c:	02 97       	mov	r7,r1
80010e0e:	72 39       	ld.w	r9,r9[0xc]
80010e10:	93 28       	st.w	r9[0x8],r8
80010e12:	91 39       	st.w	r8[0xc],r9
80010e14:	cd e8       	rjmp	80010fd0 <_realloc_r+0x26c>
80010e16:	30 0a       	mov	r10,0
80010e18:	14 99       	mov	r9,r10
80010e1a:	ed bc 00 00 	bld	r12,0x0
80010e1e:	e0 80 00 97 	breq	80010f4c <_realloc_r+0x1e8>
80010e22:	62 07       	ld.w	r7,r1[0x0]
80010e24:	e2 07 01 07 	sub	r7,r1,r7
80010e28:	6e 1c       	ld.w	r12,r7[0x4]
80010e2a:	e0 1c ff fc 	andl	r12,0xfffc
80010e2e:	58 09       	cp.w	r9,0
80010e30:	c5 80       	breq	80010ee0 <_realloc_r+0x17c>
80010e32:	f8 00 00 03 	add	r3,r12,r0
80010e36:	0a 39       	cp.w	r9,r5
80010e38:	c4 81       	brne	80010ec8 <_realloc_r+0x164>
80010e3a:	14 03       	add	r3,r10
80010e3c:	ec c9 ff f0 	sub	r9,r6,-16
80010e40:	12 33       	cp.w	r3,r9
80010e42:	c4 f5       	brlt	80010ee0 <_realloc_r+0x17c>
80010e44:	6e 3a       	ld.w	r10,r7[0xc]
80010e46:	6e 29       	ld.w	r9,r7[0x8]
80010e48:	95 29       	st.w	r10[0x8],r9
80010e4a:	93 3a       	st.w	r9[0xc],r10
80010e4c:	ee c5 ff f8 	sub	r5,r7,-8
80010e50:	e0 ca 00 04 	sub	r10,r0,4
80010e54:	e0 4a 00 24 	cp.w	r10,36
80010e58:	e0 8b 00 25 	brhi	80010ea2 <_realloc_r+0x13e>
80010e5c:	0a 99       	mov	r9,r5
80010e5e:	59 3a       	cp.w	r10,19
80010e60:	e0 88 00 1a 	brls	80010e94 <_realloc_r+0x130>
80010e64:	09 09       	ld.w	r9,r4++
80010e66:	8b 09       	st.w	r5[0x0],r9
80010e68:	09 09       	ld.w	r9,r4++
80010e6a:	8f 39       	st.w	r7[0xc],r9
80010e6c:	ee c9 ff f0 	sub	r9,r7,-16
80010e70:	59 ba       	cp.w	r10,27
80010e72:	e0 88 00 11 	brls	80010e94 <_realloc_r+0x130>
80010e76:	09 0b       	ld.w	r11,r4++
80010e78:	93 0b       	st.w	r9[0x0],r11
80010e7a:	09 09       	ld.w	r9,r4++
80010e7c:	8f 59       	st.w	r7[0x14],r9
80010e7e:	ee c9 ff e8 	sub	r9,r7,-24
80010e82:	e0 4a 00 24 	cp.w	r10,36
80010e86:	c0 71       	brne	80010e94 <_realloc_r+0x130>
80010e88:	09 0a       	ld.w	r10,r4++
80010e8a:	93 0a       	st.w	r9[0x0],r10
80010e8c:	ee c9 ff e0 	sub	r9,r7,-32
80010e90:	09 0a       	ld.w	r10,r4++
80010e92:	8f 7a       	st.w	r7[0x1c],r10
80010e94:	09 0a       	ld.w	r10,r4++
80010e96:	12 aa       	st.w	r9++,r10
80010e98:	68 0a       	ld.w	r10,r4[0x0]
80010e9a:	93 0a       	st.w	r9[0x0],r10
80010e9c:	68 1a       	ld.w	r10,r4[0x4]
80010e9e:	93 1a       	st.w	r9[0x4],r10
80010ea0:	c0 78       	rjmp	80010eae <_realloc_r+0x14a>
80010ea2:	50 08       	stdsp	sp[0x0],r8
80010ea4:	08 9b       	mov	r11,r4
80010ea6:	0a 9c       	mov	r12,r5
80010ea8:	fe b0 fc 4d 	rcall	80010742 <memmove>
80010eac:	40 08       	lddsp	r8,sp[0x0]
80010eae:	ee 06 00 09 	add	r9,r7,r6
80010eb2:	0c 13       	sub	r3,r6
80010eb4:	a1 a3       	sbr	r3,0x0
80010eb6:	93 13       	st.w	r9[0x4],r3
80010eb8:	91 29       	st.w	r8[0x8],r9
80010eba:	04 9c       	mov	r12,r2
80010ebc:	6e 18       	ld.w	r8,r7[0x4]
80010ebe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010ec2:	10 46       	or	r6,r8
80010ec4:	8f 16       	st.w	r7[0x4],r6
80010ec6:	ca c8       	rjmp	8001101e <_realloc_r+0x2ba>
80010ec8:	14 03       	add	r3,r10
80010eca:	0c 33       	cp.w	r3,r6
80010ecc:	c0 a5       	brlt	80010ee0 <_realloc_r+0x17c>
80010ece:	72 28       	ld.w	r8,r9[0x8]
80010ed0:	72 39       	ld.w	r9,r9[0xc]
80010ed2:	93 28       	st.w	r9[0x8],r8
80010ed4:	91 39       	st.w	r8[0xc],r9
80010ed6:	6e 28       	ld.w	r8,r7[0x8]
80010ed8:	6e 39       	ld.w	r9,r7[0xc]
80010eda:	c0 98       	rjmp	80010eec <_realloc_r+0x188>
80010edc:	00 00       	add	r0,r0
80010ede:	0d 08       	ld.w	r8,r6++
80010ee0:	f8 00 00 03 	add	r3,r12,r0
80010ee4:	0c 33       	cp.w	r3,r6
80010ee6:	c3 35       	brlt	80010f4c <_realloc_r+0x1e8>
80010ee8:	6e 39       	ld.w	r9,r7[0xc]
80010eea:	6e 28       	ld.w	r8,r7[0x8]
80010eec:	93 28       	st.w	r9[0x8],r8
80010eee:	91 39       	st.w	r8[0xc],r9
80010ef0:	e0 ca 00 04 	sub	r10,r0,4
80010ef4:	ee cc ff f8 	sub	r12,r7,-8
80010ef8:	e0 4a 00 24 	cp.w	r10,36
80010efc:	e0 8b 00 24 	brhi	80010f44 <_realloc_r+0x1e0>
80010f00:	59 3a       	cp.w	r10,19
80010f02:	e0 88 00 1a 	brls	80010f36 <_realloc_r+0x1d2>
80010f06:	09 08       	ld.w	r8,r4++
80010f08:	99 08       	st.w	r12[0x0],r8
80010f0a:	09 08       	ld.w	r8,r4++
80010f0c:	8f 38       	st.w	r7[0xc],r8
80010f0e:	ee cc ff f0 	sub	r12,r7,-16
80010f12:	59 ba       	cp.w	r10,27
80010f14:	e0 88 00 11 	brls	80010f36 <_realloc_r+0x1d2>
80010f18:	09 08       	ld.w	r8,r4++
80010f1a:	99 08       	st.w	r12[0x0],r8
80010f1c:	09 08       	ld.w	r8,r4++
80010f1e:	8f 58       	st.w	r7[0x14],r8
80010f20:	ee cc ff e8 	sub	r12,r7,-24
80010f24:	e0 4a 00 24 	cp.w	r10,36
80010f28:	c0 71       	brne	80010f36 <_realloc_r+0x1d2>
80010f2a:	09 08       	ld.w	r8,r4++
80010f2c:	99 08       	st.w	r12[0x0],r8
80010f2e:	ee cc ff e0 	sub	r12,r7,-32
80010f32:	09 08       	ld.w	r8,r4++
80010f34:	8f 78       	st.w	r7[0x1c],r8
80010f36:	09 08       	ld.w	r8,r4++
80010f38:	18 a8       	st.w	r12++,r8
80010f3a:	68 08       	ld.w	r8,r4[0x0]
80010f3c:	99 08       	st.w	r12[0x0],r8
80010f3e:	68 18       	ld.w	r8,r4[0x4]
80010f40:	99 18       	st.w	r12[0x4],r8
80010f42:	c4 78       	rjmp	80010fd0 <_realloc_r+0x26c>
80010f44:	08 9b       	mov	r11,r4
80010f46:	fe b0 fb fe 	rcall	80010742 <memmove>
80010f4a:	c4 38       	rjmp	80010fd0 <_realloc_r+0x26c>
80010f4c:	04 9c       	mov	r12,r2
80010f4e:	fe b0 f9 d5 	rcall	800102f8 <_malloc_r>
80010f52:	18 95       	mov	r5,r12
80010f54:	c3 a0       	breq	80010fc8 <_realloc_r+0x264>
80010f56:	62 18       	ld.w	r8,r1[0x4]
80010f58:	f8 c9 00 08 	sub	r9,r12,8
80010f5c:	a1 c8       	cbr	r8,0x0
80010f5e:	e2 08 00 08 	add	r8,r1,r8
80010f62:	10 39       	cp.w	r9,r8
80010f64:	c0 71       	brne	80010f72 <_realloc_r+0x20e>
80010f66:	72 13       	ld.w	r3,r9[0x4]
80010f68:	02 97       	mov	r7,r1
80010f6a:	e0 13 ff fc 	andl	r3,0xfffc
80010f6e:	00 03       	add	r3,r0
80010f70:	c3 08       	rjmp	80010fd0 <_realloc_r+0x26c>
80010f72:	e0 ca 00 04 	sub	r10,r0,4
80010f76:	e0 4a 00 24 	cp.w	r10,36
80010f7a:	e0 8b 00 20 	brhi	80010fba <_realloc_r+0x256>
80010f7e:	08 99       	mov	r9,r4
80010f80:	18 98       	mov	r8,r12
80010f82:	59 3a       	cp.w	r10,19
80010f84:	e0 88 00 14 	brls	80010fac <_realloc_r+0x248>
80010f88:	13 0b       	ld.w	r11,r9++
80010f8a:	10 ab       	st.w	r8++,r11
80010f8c:	13 0b       	ld.w	r11,r9++
80010f8e:	10 ab       	st.w	r8++,r11
80010f90:	59 ba       	cp.w	r10,27
80010f92:	e0 88 00 0d 	brls	80010fac <_realloc_r+0x248>
80010f96:	13 0b       	ld.w	r11,r9++
80010f98:	10 ab       	st.w	r8++,r11
80010f9a:	13 0b       	ld.w	r11,r9++
80010f9c:	10 ab       	st.w	r8++,r11
80010f9e:	e0 4a 00 24 	cp.w	r10,36
80010fa2:	c0 51       	brne	80010fac <_realloc_r+0x248>
80010fa4:	13 0a       	ld.w	r10,r9++
80010fa6:	10 aa       	st.w	r8++,r10
80010fa8:	13 0a       	ld.w	r10,r9++
80010faa:	10 aa       	st.w	r8++,r10
80010fac:	13 0a       	ld.w	r10,r9++
80010fae:	10 aa       	st.w	r8++,r10
80010fb0:	72 0a       	ld.w	r10,r9[0x0]
80010fb2:	91 0a       	st.w	r8[0x0],r10
80010fb4:	72 19       	ld.w	r9,r9[0x4]
80010fb6:	91 19       	st.w	r8[0x4],r9
80010fb8:	c0 48       	rjmp	80010fc0 <_realloc_r+0x25c>
80010fba:	08 9b       	mov	r11,r4
80010fbc:	fe b0 fb c3 	rcall	80010742 <memmove>
80010fc0:	08 9b       	mov	r11,r4
80010fc2:	04 9c       	mov	r12,r2
80010fc4:	fe b0 f6 f4 	rcall	8000fdac <_free_r>
80010fc8:	04 9c       	mov	r12,r2
80010fca:	c2 a8       	rjmp	8001101e <_realloc_r+0x2ba>
80010fcc:	00 93       	mov	r3,r0
80010fce:	02 97       	mov	r7,r1
80010fd0:	e6 06 01 09 	sub	r9,r3,r6
80010fd4:	6e 18       	ld.w	r8,r7[0x4]
80010fd6:	58 f9       	cp.w	r9,15
80010fd8:	e0 88 00 16 	brls	80011004 <_realloc_r+0x2a0>
80010fdc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010fe0:	ed e8 10 08 	or	r8,r6,r8
80010fe4:	8f 18       	st.w	r7[0x4],r8
80010fe6:	12 98       	mov	r8,r9
80010fe8:	a1 a8       	sbr	r8,0x0
80010fea:	ee 06 00 0b 	add	r11,r7,r6
80010fee:	f6 09 00 09 	add	r9,r11,r9
80010ff2:	97 18       	st.w	r11[0x4],r8
80010ff4:	72 18       	ld.w	r8,r9[0x4]
80010ff6:	a1 a8       	sbr	r8,0x0
80010ff8:	2f 8b       	sub	r11,-8
80010ffa:	93 18       	st.w	r9[0x4],r8
80010ffc:	04 9c       	mov	r12,r2
80010ffe:	fe b0 f6 d7 	rcall	8000fdac <_free_r>
80011002:	c0 b8       	rjmp	80011018 <_realloc_r+0x2b4>
80011004:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80011008:	e7 e8 10 08 	or	r8,r3,r8
8001100c:	8f 18       	st.w	r7[0x4],r8
8001100e:	ee 03 00 03 	add	r3,r7,r3
80011012:	66 18       	ld.w	r8,r3[0x4]
80011014:	a1 a8       	sbr	r8,0x0
80011016:	87 18       	st.w	r3[0x4],r8
80011018:	04 9c       	mov	r12,r2
8001101a:	ee c5 ff f8 	sub	r5,r7,-8
8001101e:	fe b0 fb b2 	rcall	80010782 <__malloc_unlock>
80011022:	0a 9c       	mov	r12,r5
80011024:	2f fd       	sub	sp,-4
80011026:	d8 32       	popm	r0-r7,pc

80011028 <_sbrk_r>:
80011028:	d4 21       	pushm	r4-r7,lr
8001102a:	30 08       	mov	r8,0
8001102c:	18 97       	mov	r7,r12
8001102e:	48 66       	lddpc	r6,80011044 <_sbrk_r+0x1c>
80011030:	16 9c       	mov	r12,r11
80011032:	8d 08       	st.w	r6[0x0],r8
80011034:	ce 4c       	rcall	800111fc <_sbrk>
80011036:	5b fc       	cp.w	r12,-1
80011038:	c0 51       	brne	80011042 <_sbrk_r+0x1a>
8001103a:	6c 08       	ld.w	r8,r6[0x0]
8001103c:	58 08       	cp.w	r8,0
8001103e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011042:	d8 22       	popm	r4-r7,pc
80011044:	00 00       	add	r0,r0
80011046:	1a f4       	st.b	--sp,r4

80011048 <__isinfd>:
80011048:	14 98       	mov	r8,r10
8001104a:	fc 19 7f f0 	movh	r9,0x7ff0
8001104e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80011052:	f0 0b 11 00 	rsub	r11,r8,0
80011056:	f7 e8 10 08 	or	r8,r11,r8
8001105a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8001105e:	f2 08 01 08 	sub	r8,r9,r8
80011062:	f0 0c 11 00 	rsub	r12,r8,0
80011066:	f9 e8 10 08 	or	r8,r12,r8
8001106a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8001106e:	2f fc       	sub	r12,-1
80011070:	5e fc       	retal	r12

80011072 <__isnand>:
80011072:	14 98       	mov	r8,r10
80011074:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80011078:	f0 0c 11 00 	rsub	r12,r8,0
8001107c:	10 4c       	or	r12,r8
8001107e:	fc 18 7f f0 	movh	r8,0x7ff0
80011082:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80011086:	f0 0c 01 0c 	sub	r12,r8,r12
8001108a:	bf 9c       	lsr	r12,0x1f
8001108c:	5e fc       	retal	r12
8001108e:	d7 03       	nop

80011090 <__sclose>:
80011090:	d4 01       	pushm	lr
80011092:	96 7b       	ld.sh	r11,r11[0xe]
80011094:	c1 2d       	rcall	800112b8 <_close_r>
80011096:	d8 02       	popm	pc

80011098 <__sseek>:
80011098:	d4 21       	pushm	r4-r7,lr
8001109a:	16 97       	mov	r7,r11
8001109c:	96 7b       	ld.sh	r11,r11[0xe]
8001109e:	c9 bd       	rcall	800113d4 <_lseek_r>
800110a0:	8e 68       	ld.sh	r8,r7[0xc]
800110a2:	10 99       	mov	r9,r8
800110a4:	ad c9       	cbr	r9,0xc
800110a6:	5b fc       	cp.w	r12,-1
800110a8:	ef f9 0c 06 	st.heq	r7[0xc],r9
800110ac:	ef fc 1a 15 	st.wne	r7[0x54],r12
800110b0:	e0 69 10 00 	mov	r9,4096
800110b4:	f1 d9 e1 38 	orne	r8,r8,r9
800110b8:	ef f8 1c 06 	st.hne	r7[0xc],r8
800110bc:	d8 22       	popm	r4-r7,pc
800110be:	d7 03       	nop

800110c0 <__swrite>:
800110c0:	d4 21       	pushm	r4-r7,lr
800110c2:	96 68       	ld.sh	r8,r11[0xc]
800110c4:	16 97       	mov	r7,r11
800110c6:	14 95       	mov	r5,r10
800110c8:	12 94       	mov	r4,r9
800110ca:	e2 18 01 00 	andl	r8,0x100,COH
800110ce:	18 96       	mov	r6,r12
800110d0:	c0 50       	breq	800110da <__swrite+0x1a>
800110d2:	30 29       	mov	r9,2
800110d4:	30 0a       	mov	r10,0
800110d6:	96 7b       	ld.sh	r11,r11[0xe]
800110d8:	c7 ed       	rcall	800113d4 <_lseek_r>
800110da:	8e 68       	ld.sh	r8,r7[0xc]
800110dc:	ad c8       	cbr	r8,0xc
800110de:	08 99       	mov	r9,r4
800110e0:	0a 9a       	mov	r10,r5
800110e2:	8e 7b       	ld.sh	r11,r7[0xe]
800110e4:	0c 9c       	mov	r12,r6
800110e6:	ae 68       	st.h	r7[0xc],r8
800110e8:	ca 8c       	rcall	80011238 <_write_r>
800110ea:	d8 22       	popm	r4-r7,pc

800110ec <__sread>:
800110ec:	d4 21       	pushm	r4-r7,lr
800110ee:	16 97       	mov	r7,r11
800110f0:	96 7b       	ld.sh	r11,r11[0xe]
800110f2:	c8 5d       	rcall	800113fc <_read_r>
800110f4:	c0 65       	brlt	80011100 <__sread+0x14>
800110f6:	6f 58       	ld.w	r8,r7[0x54]
800110f8:	18 08       	add	r8,r12
800110fa:	ef 48 00 54 	st.w	r7[84],r8
800110fe:	d8 22       	popm	r4-r7,pc
80011100:	8e 68       	ld.sh	r8,r7[0xc]
80011102:	ad c8       	cbr	r8,0xc
80011104:	ae 68       	st.h	r7[0xc],r8
80011106:	d8 22       	popm	r4-r7,pc

80011108 <strlen>:
80011108:	30 09       	mov	r9,0
8001110a:	18 98       	mov	r8,r12
8001110c:	c0 28       	rjmp	80011110 <strlen+0x8>
8001110e:	2f f8       	sub	r8,-1
80011110:	11 8a       	ld.ub	r10,r8[0x0]
80011112:	f2 0a 18 00 	cp.b	r10,r9
80011116:	cf c1       	brne	8001110e <strlen+0x6>
80011118:	f0 0c 01 0c 	sub	r12,r8,r12
8001111c:	5e fc       	retal	r12
8001111e:	d7 03       	nop

80011120 <_close>:
80011120:	30 28       	mov	r8,2
80011122:	d6 73       	breakpoint
80011124:	3f fc       	mov	r12,-1
80011126:	35 8b       	mov	r11,88
80011128:	58 0c       	cp.w	r12,0
8001112a:	5e 4c       	retge	r12
8001112c:	48 2a       	lddpc	r10,80011134 <_close+0x14>
8001112e:	95 0b       	st.w	r10[0x0],r11
80011130:	5e fc       	retal	r12
80011132:	d7 03       	nop
80011134:	00 00       	add	r0,r0
80011136:	1a f4       	st.b	--sp,r4

80011138 <_lseek>:
80011138:	30 58       	mov	r8,5
8001113a:	d6 73       	breakpoint
8001113c:	3f fc       	mov	r12,-1
8001113e:	35 8b       	mov	r11,88
80011140:	58 0c       	cp.w	r12,0
80011142:	5e 4c       	retge	r12
80011144:	48 2a       	lddpc	r10,8001114c <_lseek+0x14>
80011146:	95 0b       	st.w	r10[0x0],r11
80011148:	5e fc       	retal	r12
8001114a:	d7 03       	nop
8001114c:	00 00       	add	r0,r0
8001114e:	1a f4       	st.b	--sp,r4

80011150 <_read>:
80011150:	30 38       	mov	r8,3
80011152:	d6 73       	breakpoint
80011154:	3f fc       	mov	r12,-1
80011156:	35 8b       	mov	r11,88
80011158:	58 0c       	cp.w	r12,0
8001115a:	5e 4c       	retge	r12
8001115c:	48 2a       	lddpc	r10,80011164 <_read+0x14>
8001115e:	95 0b       	st.w	r10[0x0],r11
80011160:	5e fc       	retal	r12
80011162:	d7 03       	nop
80011164:	00 00       	add	r0,r0
80011166:	1a f4       	st.b	--sp,r4

80011168 <_write>:
80011168:	30 48       	mov	r8,4
8001116a:	d6 73       	breakpoint
8001116c:	3f fc       	mov	r12,-1
8001116e:	35 8b       	mov	r11,88
80011170:	58 0c       	cp.w	r12,0
80011172:	5e 4c       	retge	r12
80011174:	48 2a       	lddpc	r10,8001117c <_write+0x14>
80011176:	95 0b       	st.w	r10[0x0],r11
80011178:	5e fc       	retal	r12
8001117a:	d7 03       	nop
8001117c:	00 00       	add	r0,r0
8001117e:	1a f4       	st.b	--sp,r4

80011180 <isatty>:
80011180:	30 b8       	mov	r8,11
80011182:	d6 73       	breakpoint
80011184:	3f fc       	mov	r12,-1
80011186:	35 8b       	mov	r11,88
80011188:	58 0c       	cp.w	r12,0
8001118a:	5e 4c       	retge	r12
8001118c:	48 2a       	lddpc	r10,80011194 <isatty+0x14>
8001118e:	95 0b       	st.w	r10[0x0],r11
80011190:	5e fc       	retal	r12
80011192:	d7 03       	nop
80011194:	00 00       	add	r0,r0
80011196:	1a f4       	st.b	--sp,r4

80011198 <_fstat_host>:
80011198:	30 98       	mov	r8,9
8001119a:	d6 73       	breakpoint
8001119c:	3f fc       	mov	r12,-1
8001119e:	35 8b       	mov	r11,88
800111a0:	58 0c       	cp.w	r12,0
800111a2:	5e 4c       	retge	r12
800111a4:	48 2a       	lddpc	r10,800111ac <_fstat_host+0x14>
800111a6:	95 0b       	st.w	r10[0x0],r11
800111a8:	5e fc       	retal	r12
800111aa:	d7 03       	nop
800111ac:	00 00       	add	r0,r0
800111ae:	1a f4       	st.b	--sp,r4

800111b0 <_fstat>:
800111b0:	d4 21       	pushm	r4-r7,lr
800111b2:	21 0d       	sub	sp,64
800111b4:	16 97       	mov	r7,r11
800111b6:	1a 9b       	mov	r11,sp
800111b8:	cf 0f       	rcall	80011198 <_fstat_host>
800111ba:	c0 34       	brge	800111c0 <_fstat+0x10>
800111bc:	3f fc       	mov	r12,-1
800111be:	c1 c8       	rjmp	800111f6 <_fstat+0x46>
800111c0:	40 08       	lddsp	r8,sp[0x0]
800111c2:	ae 08       	st.h	r7[0x0],r8
800111c4:	40 18       	lddsp	r8,sp[0x4]
800111c6:	ae 18       	st.h	r7[0x2],r8
800111c8:	40 28       	lddsp	r8,sp[0x8]
800111ca:	8f 18       	st.w	r7[0x4],r8
800111cc:	40 38       	lddsp	r8,sp[0xc]
800111ce:	ae 48       	st.h	r7[0x8],r8
800111d0:	40 48       	lddsp	r8,sp[0x10]
800111d2:	ae 58       	st.h	r7[0xa],r8
800111d4:	40 58       	lddsp	r8,sp[0x14]
800111d6:	ae 68       	st.h	r7[0xc],r8
800111d8:	40 68       	lddsp	r8,sp[0x18]
800111da:	ae 78       	st.h	r7[0xe],r8
800111dc:	40 88       	lddsp	r8,sp[0x20]
800111de:	8f 48       	st.w	r7[0x10],r8
800111e0:	40 a8       	lddsp	r8,sp[0x28]
800111e2:	8f b8       	st.w	r7[0x2c],r8
800111e4:	40 c8       	lddsp	r8,sp[0x30]
800111e6:	8f c8       	st.w	r7[0x30],r8
800111e8:	40 d8       	lddsp	r8,sp[0x34]
800111ea:	8f 58       	st.w	r7[0x14],r8
800111ec:	40 e8       	lddsp	r8,sp[0x38]
800111ee:	30 0c       	mov	r12,0
800111f0:	8f 78       	st.w	r7[0x1c],r8
800111f2:	40 f8       	lddsp	r8,sp[0x3c]
800111f4:	8f 98       	st.w	r7[0x24],r8
800111f6:	2f 0d       	sub	sp,-64
800111f8:	d8 22       	popm	r4-r7,pc
800111fa:	d7 03       	nop

800111fc <_sbrk>:
800111fc:	d4 01       	pushm	lr
800111fe:	48 c8       	lddpc	r8,8001122c <_sbrk+0x30>
80011200:	70 09       	ld.w	r9,r8[0x0]
80011202:	58 09       	cp.w	r9,0
80011204:	c0 31       	brne	8001120a <_sbrk+0xe>
80011206:	48 b9       	lddpc	r9,80011230 <_sbrk+0x34>
80011208:	91 09       	st.w	r8[0x0],r9
8001120a:	48 99       	lddpc	r9,8001122c <_sbrk+0x30>
8001120c:	48 aa       	lddpc	r10,80011234 <_sbrk+0x38>
8001120e:	72 08       	ld.w	r8,r9[0x0]
80011210:	f0 0c 00 0c 	add	r12,r8,r12
80011214:	14 3c       	cp.w	r12,r10
80011216:	e0 8b 00 04 	brhi	8001121e <_sbrk+0x22>
8001121a:	93 0c       	st.w	r9[0x0],r12
8001121c:	c0 58       	rjmp	80011226 <_sbrk+0x2a>
8001121e:	c5 dc       	rcall	800112d8 <__errno>
80011220:	30 c8       	mov	r8,12
80011222:	99 08       	st.w	r12[0x0],r8
80011224:	3f f8       	mov	r8,-1
80011226:	10 9c       	mov	r12,r8
80011228:	d8 02       	popm	pc
8001122a:	d7 03       	nop
8001122c:	00 00       	add	r0,r0
8001122e:	15 3c       	ld.ub	r12,r10++
80011230:	00 00       	add	r0,r0
80011232:	1a f8       	st.b	--sp,r8
80011234:	00 00       	add	r0,r0
80011236:	f0 00       	*unknown*

80011238 <_write_r>:
80011238:	d4 21       	pushm	r4-r7,lr
8001123a:	16 98       	mov	r8,r11
8001123c:	18 97       	mov	r7,r12
8001123e:	10 9c       	mov	r12,r8
80011240:	30 08       	mov	r8,0
80011242:	14 9b       	mov	r11,r10
80011244:	48 66       	lddpc	r6,8001125c <_write_r+0x24>
80011246:	12 9a       	mov	r10,r9
80011248:	8d 08       	st.w	r6[0x0],r8
8001124a:	c8 ff       	rcall	80011168 <_write>
8001124c:	5b fc       	cp.w	r12,-1
8001124e:	c0 51       	brne	80011258 <_write_r+0x20>
80011250:	6c 08       	ld.w	r8,r6[0x0]
80011252:	58 08       	cp.w	r8,0
80011254:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011258:	d8 22       	popm	r4-r7,pc
8001125a:	d7 03       	nop
8001125c:	00 00       	add	r0,r0
8001125e:	1a f4       	st.b	--sp,r4

80011260 <_calloc_r>:
80011260:	d4 21       	pushm	r4-r7,lr
80011262:	f4 0b 02 4b 	mul	r11,r10,r11
80011266:	fe b0 f8 49 	rcall	800102f8 <_malloc_r>
8001126a:	18 97       	mov	r7,r12
8001126c:	c2 30       	breq	800112b2 <_calloc_r+0x52>
8001126e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80011272:	e0 1a ff fc 	andl	r10,0xfffc
80011276:	20 4a       	sub	r10,4
80011278:	e0 4a 00 24 	cp.w	r10,36
8001127c:	e0 8b 00 18 	brhi	800112ac <_calloc_r+0x4c>
80011280:	18 98       	mov	r8,r12
80011282:	59 3a       	cp.w	r10,19
80011284:	e0 88 00 0f 	brls	800112a2 <_calloc_r+0x42>
80011288:	30 09       	mov	r9,0
8001128a:	10 a9       	st.w	r8++,r9
8001128c:	10 a9       	st.w	r8++,r9
8001128e:	59 ba       	cp.w	r10,27
80011290:	e0 88 00 09 	brls	800112a2 <_calloc_r+0x42>
80011294:	10 a9       	st.w	r8++,r9
80011296:	10 a9       	st.w	r8++,r9
80011298:	e0 4a 00 24 	cp.w	r10,36
8001129c:	c0 31       	brne	800112a2 <_calloc_r+0x42>
8001129e:	10 a9       	st.w	r8++,r9
800112a0:	10 a9       	st.w	r8++,r9
800112a2:	30 09       	mov	r9,0
800112a4:	10 a9       	st.w	r8++,r9
800112a6:	91 19       	st.w	r8[0x4],r9
800112a8:	91 09       	st.w	r8[0x0],r9
800112aa:	c0 48       	rjmp	800112b2 <_calloc_r+0x52>
800112ac:	30 0b       	mov	r11,0
800112ae:	fe b0 db 26 	rcall	8000c8fa <memset>
800112b2:	0e 9c       	mov	r12,r7
800112b4:	d8 22       	popm	r4-r7,pc
800112b6:	d7 03       	nop

800112b8 <_close_r>:
800112b8:	d4 21       	pushm	r4-r7,lr
800112ba:	30 08       	mov	r8,0
800112bc:	18 97       	mov	r7,r12
800112be:	48 66       	lddpc	r6,800112d4 <_close_r+0x1c>
800112c0:	16 9c       	mov	r12,r11
800112c2:	8d 08       	st.w	r6[0x0],r8
800112c4:	c2 ef       	rcall	80011120 <_close>
800112c6:	5b fc       	cp.w	r12,-1
800112c8:	c0 51       	brne	800112d2 <_close_r+0x1a>
800112ca:	6c 08       	ld.w	r8,r6[0x0]
800112cc:	58 08       	cp.w	r8,0
800112ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800112d2:	d8 22       	popm	r4-r7,pc
800112d4:	00 00       	add	r0,r0
800112d6:	1a f4       	st.b	--sp,r4

800112d8 <__errno>:
800112d8:	48 28       	lddpc	r8,800112e0 <__errno+0x8>
800112da:	70 0c       	ld.w	r12,r8[0x0]
800112dc:	2f 4c       	sub	r12,-12
800112de:	5e fc       	retal	r12
800112e0:	00 00       	add	r0,r0
800112e2:	0d 04       	ld.w	r4,r6++

800112e4 <_fclose_r>:
800112e4:	d4 21       	pushm	r4-r7,lr
800112e6:	18 96       	mov	r6,r12
800112e8:	16 97       	mov	r7,r11
800112ea:	58 0b       	cp.w	r11,0
800112ec:	c0 31       	brne	800112f2 <_fclose_r+0xe>
800112ee:	16 95       	mov	r5,r11
800112f0:	c5 08       	rjmp	80011390 <_fclose_r+0xac>
800112f2:	fe b0 f4 6d 	rcall	8000fbcc <__sfp_lock_acquire>
800112f6:	58 06       	cp.w	r6,0
800112f8:	c0 70       	breq	80011306 <_fclose_r+0x22>
800112fa:	6c 68       	ld.w	r8,r6[0x18]
800112fc:	58 08       	cp.w	r8,0
800112fe:	c0 41       	brne	80011306 <_fclose_r+0x22>
80011300:	0c 9c       	mov	r12,r6
80011302:	fe b0 f4 b9 	rcall	8000fc74 <__sinit>
80011306:	4a 48       	lddpc	r8,80011394 <_fclose_r+0xb0>
80011308:	10 37       	cp.w	r7,r8
8001130a:	c0 31       	brne	80011310 <_fclose_r+0x2c>
8001130c:	6c 07       	ld.w	r7,r6[0x0]
8001130e:	c0 a8       	rjmp	80011322 <_fclose_r+0x3e>
80011310:	4a 28       	lddpc	r8,80011398 <_fclose_r+0xb4>
80011312:	10 37       	cp.w	r7,r8
80011314:	c0 31       	brne	8001131a <_fclose_r+0x36>
80011316:	6c 17       	ld.w	r7,r6[0x4]
80011318:	c0 58       	rjmp	80011322 <_fclose_r+0x3e>
8001131a:	4a 18       	lddpc	r8,8001139c <_fclose_r+0xb8>
8001131c:	10 37       	cp.w	r7,r8
8001131e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80011322:	8e 69       	ld.sh	r9,r7[0xc]
80011324:	30 08       	mov	r8,0
80011326:	f0 09 19 00 	cp.h	r9,r8
8001132a:	c0 51       	brne	80011334 <_fclose_r+0x50>
8001132c:	fe b0 f4 51 	rcall	8000fbce <__sfp_lock_release>
80011330:	30 05       	mov	r5,0
80011332:	c2 f8       	rjmp	80011390 <_fclose_r+0xac>
80011334:	0e 9b       	mov	r11,r7
80011336:	0c 9c       	mov	r12,r6
80011338:	fe b0 f3 c2 	rcall	8000fabc <_fflush_r>
8001133c:	6e c8       	ld.w	r8,r7[0x30]
8001133e:	18 95       	mov	r5,r12
80011340:	58 08       	cp.w	r8,0
80011342:	c0 60       	breq	8001134e <_fclose_r+0x6a>
80011344:	6e 8b       	ld.w	r11,r7[0x20]
80011346:	0c 9c       	mov	r12,r6
80011348:	5d 18       	icall	r8
8001134a:	f9 b5 05 ff 	movlt	r5,-1
8001134e:	8e 68       	ld.sh	r8,r7[0xc]
80011350:	ed b8 00 07 	bld	r8,0x7
80011354:	c0 51       	brne	8001135e <_fclose_r+0x7a>
80011356:	6e 4b       	ld.w	r11,r7[0x10]
80011358:	0c 9c       	mov	r12,r6
8001135a:	fe b0 f5 29 	rcall	8000fdac <_free_r>
8001135e:	6e db       	ld.w	r11,r7[0x34]
80011360:	58 0b       	cp.w	r11,0
80011362:	c0 a0       	breq	80011376 <_fclose_r+0x92>
80011364:	ee c8 ff bc 	sub	r8,r7,-68
80011368:	10 3b       	cp.w	r11,r8
8001136a:	c0 40       	breq	80011372 <_fclose_r+0x8e>
8001136c:	0c 9c       	mov	r12,r6
8001136e:	fe b0 f5 1f 	rcall	8000fdac <_free_r>
80011372:	30 08       	mov	r8,0
80011374:	8f d8       	st.w	r7[0x34],r8
80011376:	6f 2b       	ld.w	r11,r7[0x48]
80011378:	58 0b       	cp.w	r11,0
8001137a:	c0 70       	breq	80011388 <_fclose_r+0xa4>
8001137c:	0c 9c       	mov	r12,r6
8001137e:	fe b0 f5 17 	rcall	8000fdac <_free_r>
80011382:	30 08       	mov	r8,0
80011384:	ef 48 00 48 	st.w	r7[72],r8
80011388:	30 08       	mov	r8,0
8001138a:	ae 68       	st.h	r7[0xc],r8
8001138c:	fe b0 f4 21 	rcall	8000fbce <__sfp_lock_release>
80011390:	0a 9c       	mov	r12,r5
80011392:	d8 22       	popm	r4-r7,pc
80011394:	80 01       	ld.sh	r1,r0[0x0]
80011396:	3e b0       	mov	r0,-21
80011398:	80 01       	ld.sh	r1,r0[0x0]
8001139a:	3e d0       	mov	r0,-19
8001139c:	80 01       	ld.sh	r1,r0[0x0]
8001139e:	3e f0       	mov	r0,-17

800113a0 <fclose>:
800113a0:	d4 01       	pushm	lr
800113a2:	48 38       	lddpc	r8,800113ac <fclose+0xc>
800113a4:	18 9b       	mov	r11,r12
800113a6:	70 0c       	ld.w	r12,r8[0x0]
800113a8:	c9 ef       	rcall	800112e4 <_fclose_r>
800113aa:	d8 02       	popm	pc
800113ac:	00 00       	add	r0,r0
800113ae:	0d 04       	ld.w	r4,r6++

800113b0 <_fstat_r>:
800113b0:	d4 21       	pushm	r4-r7,lr
800113b2:	16 98       	mov	r8,r11
800113b4:	18 97       	mov	r7,r12
800113b6:	10 9c       	mov	r12,r8
800113b8:	30 08       	mov	r8,0
800113ba:	48 66       	lddpc	r6,800113d0 <_fstat_r+0x20>
800113bc:	14 9b       	mov	r11,r10
800113be:	8d 08       	st.w	r6[0x0],r8
800113c0:	cf 8e       	rcall	800111b0 <_fstat>
800113c2:	5b fc       	cp.w	r12,-1
800113c4:	c0 51       	brne	800113ce <_fstat_r+0x1e>
800113c6:	6c 08       	ld.w	r8,r6[0x0]
800113c8:	58 08       	cp.w	r8,0
800113ca:	ef f8 1a 03 	st.wne	r7[0xc],r8
800113ce:	d8 22       	popm	r4-r7,pc
800113d0:	00 00       	add	r0,r0
800113d2:	1a f4       	st.b	--sp,r4

800113d4 <_lseek_r>:
800113d4:	d4 21       	pushm	r4-r7,lr
800113d6:	16 98       	mov	r8,r11
800113d8:	18 97       	mov	r7,r12
800113da:	10 9c       	mov	r12,r8
800113dc:	30 08       	mov	r8,0
800113de:	14 9b       	mov	r11,r10
800113e0:	48 66       	lddpc	r6,800113f8 <_lseek_r+0x24>
800113e2:	12 9a       	mov	r10,r9
800113e4:	8d 08       	st.w	r6[0x0],r8
800113e6:	ca 9e       	rcall	80011138 <_lseek>
800113e8:	5b fc       	cp.w	r12,-1
800113ea:	c0 51       	brne	800113f4 <_lseek_r+0x20>
800113ec:	6c 08       	ld.w	r8,r6[0x0]
800113ee:	58 08       	cp.w	r8,0
800113f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800113f4:	d8 22       	popm	r4-r7,pc
800113f6:	d7 03       	nop
800113f8:	00 00       	add	r0,r0
800113fa:	1a f4       	st.b	--sp,r4

800113fc <_read_r>:
800113fc:	d4 21       	pushm	r4-r7,lr
800113fe:	16 98       	mov	r8,r11
80011400:	18 97       	mov	r7,r12
80011402:	10 9c       	mov	r12,r8
80011404:	30 08       	mov	r8,0
80011406:	14 9b       	mov	r11,r10
80011408:	48 66       	lddpc	r6,80011420 <_read_r+0x24>
8001140a:	12 9a       	mov	r10,r9
8001140c:	8d 08       	st.w	r6[0x0],r8
8001140e:	ca 1e       	rcall	80011150 <_read>
80011410:	5b fc       	cp.w	r12,-1
80011412:	c0 51       	brne	8001141c <_read_r+0x20>
80011414:	6c 08       	ld.w	r8,r6[0x0]
80011416:	58 08       	cp.w	r8,0
80011418:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001141c:	d8 22       	popm	r4-r7,pc
8001141e:	d7 03       	nop
80011420:	00 00       	add	r0,r0
80011422:	1a f4       	st.b	--sp,r4

80011424 <__avr32_f64_mul>:
80011424:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80011428:	e0 80 00 dc 	breq	800115e0 <__avr32_f64_mul_op1_zero>
8001142c:	d4 21       	pushm	r4-r7,lr
8001142e:	f7 e9 20 0e 	eor	lr,r11,r9
80011432:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80011436:	30 15       	mov	r5,1
80011438:	c4 30       	breq	800114be <__avr32_f64_mul_op1_subnormal>
8001143a:	ab 6b       	lsl	r11,0xa
8001143c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80011440:	ab 6a       	lsl	r10,0xa
80011442:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80011446:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8001144a:	c5 c0       	breq	80011502 <__avr32_f64_mul_op2_subnormal>
8001144c:	a1 78       	lsl	r8,0x1
8001144e:	5c f9       	rol	r9
80011450:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80011454:	e0 47 07 ff 	cp.w	r7,2047
80011458:	c7 70       	breq	80011546 <__avr32_f64_mul_op_nan_or_inf>
8001145a:	e0 46 07 ff 	cp.w	r6,2047
8001145e:	c7 40       	breq	80011546 <__avr32_f64_mul_op_nan_or_inf>
80011460:	ee 06 00 0c 	add	r12,r7,r6
80011464:	e0 2c 03 fe 	sub	r12,1022
80011468:	f6 08 06 44 	mulu.d	r4,r11,r8
8001146c:	f4 09 07 44 	macu.d	r4,r10,r9
80011470:	f4 08 06 46 	mulu.d	r6,r10,r8
80011474:	f6 09 06 4a 	mulu.d	r10,r11,r9
80011478:	08 07       	add	r7,r4
8001147a:	f4 05 00 4a 	adc	r10,r10,r5
8001147e:	5c 0b       	acr	r11
80011480:	ed bb 00 14 	bld	r11,0x14
80011484:	c0 50       	breq	8001148e <__avr32_f64_mul+0x6a>
80011486:	a1 77       	lsl	r7,0x1
80011488:	5c fa       	rol	r10
8001148a:	5c fb       	rol	r11
8001148c:	20 1c       	sub	r12,1
8001148e:	58 0c       	cp.w	r12,0
80011490:	e0 8a 00 6f 	brle	8001156e <__avr32_f64_mul_res_subnormal>
80011494:	e0 4c 07 ff 	cp.w	r12,2047
80011498:	e0 84 00 9c 	brge	800115d0 <__avr32_f64_mul_res_inf>
8001149c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800114a0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800114a4:	ef e6 12 17 	or	r7,r7,r6>>0x1
800114a8:	ee 17 80 00 	eorh	r7,0x8000
800114ac:	f1 b7 04 20 	satu	r7,0x1
800114b0:	0e 0a       	add	r10,r7
800114b2:	5c 0b       	acr	r11
800114b4:	ed be 00 1f 	bld	lr,0x1f
800114b8:	ef bb 00 1f 	bst	r11,0x1f
800114bc:	d8 22       	popm	r4-r7,pc

800114be <__avr32_f64_mul_op1_subnormal>:
800114be:	e4 1b 00 0f 	andh	r11,0xf
800114c2:	f4 0c 12 00 	clz	r12,r10
800114c6:	f6 06 12 00 	clz	r6,r11
800114ca:	f7 bc 03 e1 	sublo	r12,-31
800114ce:	f8 06 17 30 	movlo	r6,r12
800114d2:	f7 b6 02 01 	subhs	r6,1
800114d6:	e0 46 00 20 	cp.w	r6,32
800114da:	c0 d4       	brge	800114f4 <__avr32_f64_mul_op1_subnormal+0x36>
800114dc:	ec 0c 11 20 	rsub	r12,r6,32
800114e0:	f6 06 09 4b 	lsl	r11,r11,r6
800114e4:	f4 0c 0a 4c 	lsr	r12,r10,r12
800114e8:	18 4b       	or	r11,r12
800114ea:	f4 06 09 4a 	lsl	r10,r10,r6
800114ee:	20 b6       	sub	r6,11
800114f0:	0c 17       	sub	r7,r6
800114f2:	ca ab       	rjmp	80011446 <__avr32_f64_mul+0x22>
800114f4:	f4 06 09 4b 	lsl	r11,r10,r6
800114f8:	c6 40       	breq	800115c0 <__avr32_f64_mul_res_zero>
800114fa:	30 0a       	mov	r10,0
800114fc:	20 b6       	sub	r6,11
800114fe:	0c 17       	sub	r7,r6
80011500:	ca 3b       	rjmp	80011446 <__avr32_f64_mul+0x22>

80011502 <__avr32_f64_mul_op2_subnormal>:
80011502:	e4 19 00 0f 	andh	r9,0xf
80011506:	f0 0c 12 00 	clz	r12,r8
8001150a:	f2 05 12 00 	clz	r5,r9
8001150e:	f7 bc 03 ea 	sublo	r12,-22
80011512:	f8 05 17 30 	movlo	r5,r12
80011516:	f7 b5 02 0a 	subhs	r5,10
8001151a:	e0 45 00 20 	cp.w	r5,32
8001151e:	c0 d4       	brge	80011538 <__avr32_f64_mul_op2_subnormal+0x36>
80011520:	ea 0c 11 20 	rsub	r12,r5,32
80011524:	f2 05 09 49 	lsl	r9,r9,r5
80011528:	f0 0c 0a 4c 	lsr	r12,r8,r12
8001152c:	18 49       	or	r9,r12
8001152e:	f0 05 09 48 	lsl	r8,r8,r5
80011532:	20 25       	sub	r5,2
80011534:	0a 16       	sub	r6,r5
80011536:	c8 fb       	rjmp	80011454 <__avr32_f64_mul+0x30>
80011538:	f0 05 09 49 	lsl	r9,r8,r5
8001153c:	c4 20       	breq	800115c0 <__avr32_f64_mul_res_zero>
8001153e:	30 08       	mov	r8,0
80011540:	20 25       	sub	r5,2
80011542:	0a 16       	sub	r6,r5
80011544:	c8 8b       	rjmp	80011454 <__avr32_f64_mul+0x30>

80011546 <__avr32_f64_mul_op_nan_or_inf>:
80011546:	e4 19 00 0f 	andh	r9,0xf
8001154a:	e4 1b 00 0f 	andh	r11,0xf
8001154e:	14 4b       	or	r11,r10
80011550:	10 49       	or	r9,r8
80011552:	e0 47 07 ff 	cp.w	r7,2047
80011556:	c0 91       	brne	80011568 <__avr32_f64_mul_op1_not_naninf>
80011558:	58 0b       	cp.w	r11,0
8001155a:	c3 81       	brne	800115ca <__avr32_f64_mul_res_nan>
8001155c:	e0 46 07 ff 	cp.w	r6,2047
80011560:	c3 81       	brne	800115d0 <__avr32_f64_mul_res_inf>
80011562:	58 09       	cp.w	r9,0
80011564:	c3 60       	breq	800115d0 <__avr32_f64_mul_res_inf>
80011566:	c3 28       	rjmp	800115ca <__avr32_f64_mul_res_nan>

80011568 <__avr32_f64_mul_op1_not_naninf>:
80011568:	58 09       	cp.w	r9,0
8001156a:	c3 30       	breq	800115d0 <__avr32_f64_mul_res_inf>
8001156c:	c2 f8       	rjmp	800115ca <__avr32_f64_mul_res_nan>

8001156e <__avr32_f64_mul_res_subnormal>:
8001156e:	5c 3c       	neg	r12
80011570:	2f fc       	sub	r12,-1
80011572:	f1 bc 04 c0 	satu	r12,0x6
80011576:	e0 4c 00 20 	cp.w	r12,32
8001157a:	c1 14       	brge	8001159c <__avr32_f64_mul_res_subnormal+0x2e>
8001157c:	f8 08 11 20 	rsub	r8,r12,32
80011580:	0e 46       	or	r6,r7
80011582:	ee 0c 0a 47 	lsr	r7,r7,r12
80011586:	f4 08 09 49 	lsl	r9,r10,r8
8001158a:	12 47       	or	r7,r9
8001158c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80011590:	f6 08 09 49 	lsl	r9,r11,r8
80011594:	12 4a       	or	r10,r9
80011596:	f6 0c 0a 4b 	lsr	r11,r11,r12
8001159a:	c8 3b       	rjmp	800114a0 <__avr32_f64_mul+0x7c>
8001159c:	f8 08 11 20 	rsub	r8,r12,32
800115a0:	f9 b9 00 00 	moveq	r9,0
800115a4:	c0 30       	breq	800115aa <__avr32_f64_mul_res_subnormal+0x3c>
800115a6:	f6 08 09 49 	lsl	r9,r11,r8
800115aa:	0e 46       	or	r6,r7
800115ac:	ed ea 10 16 	or	r6,r6,r10<<0x1
800115b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800115b4:	f3 ea 10 07 	or	r7,r9,r10
800115b8:	f6 0c 0a 4a 	lsr	r10,r11,r12
800115bc:	30 0b       	mov	r11,0
800115be:	c7 1b       	rjmp	800114a0 <__avr32_f64_mul+0x7c>

800115c0 <__avr32_f64_mul_res_zero>:
800115c0:	1c 9b       	mov	r11,lr
800115c2:	e6 1b 80 00 	andh	r11,0x8000,COH
800115c6:	30 0a       	mov	r10,0
800115c8:	d8 22       	popm	r4-r7,pc

800115ca <__avr32_f64_mul_res_nan>:
800115ca:	3f fb       	mov	r11,-1
800115cc:	3f fa       	mov	r10,-1
800115ce:	d8 22       	popm	r4-r7,pc

800115d0 <__avr32_f64_mul_res_inf>:
800115d0:	f0 6b 00 00 	mov	r11,-1048576
800115d4:	ed be 00 1f 	bld	lr,0x1f
800115d8:	ef bb 00 1f 	bst	r11,0x1f
800115dc:	30 0a       	mov	r10,0
800115de:	d8 22       	popm	r4-r7,pc

800115e0 <__avr32_f64_mul_op1_zero>:
800115e0:	f7 e9 20 0b 	eor	r11,r11,r9
800115e4:	e6 1b 80 00 	andh	r11,0x8000,COH
800115e8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800115ec:	e0 4c 07 ff 	cp.w	r12,2047
800115f0:	5e 1c       	retne	r12
800115f2:	3f fa       	mov	r10,-1
800115f4:	3f fb       	mov	r11,-1
800115f6:	5e fc       	retal	r12

800115f8 <__avr32_f64_sub_from_add>:
800115f8:	ee 19 80 00 	eorh	r9,0x8000

800115fc <__avr32_f64_sub>:
800115fc:	f7 e9 20 0c 	eor	r12,r11,r9
80011600:	e0 86 00 ca 	brmi	80011794 <__avr32_f64_add_from_sub>
80011604:	eb cd 40 e0 	pushm	r5-r7,lr
80011608:	16 9c       	mov	r12,r11
8001160a:	e6 1c 80 00 	andh	r12,0x8000,COH
8001160e:	bf db       	cbr	r11,0x1f
80011610:	bf d9       	cbr	r9,0x1f
80011612:	10 3a       	cp.w	r10,r8
80011614:	f2 0b 13 00 	cpc	r11,r9
80011618:	c0 92       	brcc	8001162a <__avr32_f64_sub+0x2e>
8001161a:	16 97       	mov	r7,r11
8001161c:	12 9b       	mov	r11,r9
8001161e:	0e 99       	mov	r9,r7
80011620:	14 97       	mov	r7,r10
80011622:	10 9a       	mov	r10,r8
80011624:	0e 98       	mov	r8,r7
80011626:	ee 1c 80 00 	eorh	r12,0x8000
8001162a:	f6 07 16 14 	lsr	r7,r11,0x14
8001162e:	ab 7b       	lsl	r11,0xb
80011630:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80011634:	ab 7a       	lsl	r10,0xb
80011636:	bf bb       	sbr	r11,0x1f
80011638:	f2 06 16 14 	lsr	r6,r9,0x14
8001163c:	c4 40       	breq	800116c4 <__avr32_f64_sub_opL_subnormal>
8001163e:	ab 79       	lsl	r9,0xb
80011640:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80011644:	ab 78       	lsl	r8,0xb
80011646:	bf b9       	sbr	r9,0x1f

80011648 <__avr32_f64_sub_opL_subnormal_done>:
80011648:	e0 47 07 ff 	cp.w	r7,2047
8001164c:	c4 f0       	breq	800116ea <__avr32_f64_sub_opH_nan_or_inf>
8001164e:	0e 26       	rsub	r6,r7
80011650:	c1 20       	breq	80011674 <__avr32_f64_sub_shift_done>
80011652:	ec 05 11 20 	rsub	r5,r6,32
80011656:	e0 46 00 20 	cp.w	r6,32
8001165a:	c7 c2       	brcc	80011752 <__avr32_f64_sub_longshift>
8001165c:	f0 05 09 4e 	lsl	lr,r8,r5
80011660:	f2 05 09 45 	lsl	r5,r9,r5
80011664:	f0 06 0a 48 	lsr	r8,r8,r6
80011668:	f2 06 0a 49 	lsr	r9,r9,r6
8001166c:	0a 48       	or	r8,r5
8001166e:	58 0e       	cp.w	lr,0
80011670:	5f 1e       	srne	lr
80011672:	1c 48       	or	r8,lr

80011674 <__avr32_f64_sub_shift_done>:
80011674:	10 1a       	sub	r10,r8
80011676:	f6 09 01 4b 	sbc	r11,r11,r9
8001167a:	f6 06 12 00 	clz	r6,r11
8001167e:	c0 e0       	breq	8001169a <__avr32_f64_sub_longnormalize_done>
80011680:	c7 83       	brcs	80011770 <__avr32_f64_sub_longnormalize>
80011682:	ec 0e 11 20 	rsub	lr,r6,32
80011686:	f6 06 09 4b 	lsl	r11,r11,r6
8001168a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8001168e:	1c 4b       	or	r11,lr
80011690:	f4 06 09 4a 	lsl	r10,r10,r6
80011694:	0c 17       	sub	r7,r6
80011696:	e0 8a 00 39 	brle	80011708 <__avr32_f64_sub_subnormal_result>

8001169a <__avr32_f64_sub_longnormalize_done>:
8001169a:	f4 09 15 15 	lsl	r9,r10,0x15
8001169e:	ab 9a       	lsr	r10,0xb
800116a0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800116a4:	ab 9b       	lsr	r11,0xb
800116a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800116aa:	18 4b       	or	r11,r12

800116ac <__avr32_f64_sub_round>:
800116ac:	fc 17 80 00 	movh	r7,0x8000
800116b0:	ed ba 00 00 	bld	r10,0x0
800116b4:	f7 b7 01 ff 	subne	r7,-1
800116b8:	0e 39       	cp.w	r9,r7
800116ba:	5f 29       	srhs	r9
800116bc:	12 0a       	add	r10,r9
800116be:	5c 0b       	acr	r11
800116c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800116c4 <__avr32_f64_sub_opL_subnormal>:
800116c4:	ab 79       	lsl	r9,0xb
800116c6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800116ca:	ab 78       	lsl	r8,0xb
800116cc:	f3 e8 10 0e 	or	lr,r9,r8
800116d0:	f9 b6 01 01 	movne	r6,1
800116d4:	ee 0e 11 00 	rsub	lr,r7,0
800116d8:	f9 b7 00 01 	moveq	r7,1
800116dc:	ef bb 00 1f 	bst	r11,0x1f
800116e0:	f7 ea 10 0e 	or	lr,r11,r10
800116e4:	f9 b7 00 00 	moveq	r7,0
800116e8:	cb 0b       	rjmp	80011648 <__avr32_f64_sub_opL_subnormal_done>

800116ea <__avr32_f64_sub_opH_nan_or_inf>:
800116ea:	bf db       	cbr	r11,0x1f
800116ec:	f7 ea 10 0e 	or	lr,r11,r10
800116f0:	c0 81       	brne	80011700 <__avr32_f64_sub_return_nan>
800116f2:	e0 46 07 ff 	cp.w	r6,2047
800116f6:	c0 50       	breq	80011700 <__avr32_f64_sub_return_nan>
800116f8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800116fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011700 <__avr32_f64_sub_return_nan>:
80011700:	3f fa       	mov	r10,-1
80011702:	3f fb       	mov	r11,-1
80011704:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011708 <__avr32_f64_sub_subnormal_result>:
80011708:	5c 37       	neg	r7
8001170a:	2f f7       	sub	r7,-1
8001170c:	f1 b7 04 c0 	satu	r7,0x6
80011710:	e0 47 00 20 	cp.w	r7,32
80011714:	c1 14       	brge	80011736 <__avr32_f64_sub_subnormal_result+0x2e>
80011716:	ee 08 11 20 	rsub	r8,r7,32
8001171a:	f4 08 09 49 	lsl	r9,r10,r8
8001171e:	5f 16       	srne	r6
80011720:	f4 07 0a 4a 	lsr	r10,r10,r7
80011724:	0c 4a       	or	r10,r6
80011726:	f6 08 09 49 	lsl	r9,r11,r8
8001172a:	f5 e9 10 0a 	or	r10,r10,r9
8001172e:	f4 07 0a 4b 	lsr	r11,r10,r7
80011732:	30 07       	mov	r7,0
80011734:	cb 3b       	rjmp	8001169a <__avr32_f64_sub_longnormalize_done>
80011736:	ee 08 11 40 	rsub	r8,r7,64
8001173a:	f6 08 09 49 	lsl	r9,r11,r8
8001173e:	14 49       	or	r9,r10
80011740:	5f 16       	srne	r6
80011742:	f6 07 0a 4a 	lsr	r10,r11,r7
80011746:	0c 4a       	or	r10,r6
80011748:	30 0b       	mov	r11,0
8001174a:	30 07       	mov	r7,0
8001174c:	ca 7b       	rjmp	8001169a <__avr32_f64_sub_longnormalize_done>
8001174e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011752 <__avr32_f64_sub_longshift>:
80011752:	f1 b6 04 c0 	satu	r6,0x6
80011756:	f0 0e 17 00 	moveq	lr,r8
8001175a:	c0 40       	breq	80011762 <__avr32_f64_sub_longshift+0x10>
8001175c:	f2 05 09 4e 	lsl	lr,r9,r5
80011760:	10 4e       	or	lr,r8
80011762:	f2 06 0a 48 	lsr	r8,r9,r6
80011766:	30 09       	mov	r9,0
80011768:	58 0e       	cp.w	lr,0
8001176a:	5f 1e       	srne	lr
8001176c:	1c 48       	or	r8,lr
8001176e:	c8 3b       	rjmp	80011674 <__avr32_f64_sub_shift_done>

80011770 <__avr32_f64_sub_longnormalize>:
80011770:	f4 06 12 00 	clz	r6,r10
80011774:	f9 b7 03 00 	movlo	r7,0
80011778:	f9 b6 03 00 	movlo	r6,0
8001177c:	f9 bc 03 00 	movlo	r12,0
80011780:	f7 b6 02 e0 	subhs	r6,-32
80011784:	f4 06 09 4b 	lsl	r11,r10,r6
80011788:	30 0a       	mov	r10,0
8001178a:	0c 17       	sub	r7,r6
8001178c:	fe 9a ff be 	brle	80011708 <__avr32_f64_sub_subnormal_result>
80011790:	c8 5b       	rjmp	8001169a <__avr32_f64_sub_longnormalize_done>
80011792:	d7 03       	nop

80011794 <__avr32_f64_add_from_sub>:
80011794:	ee 19 80 00 	eorh	r9,0x8000

80011798 <__avr32_f64_add>:
80011798:	f7 e9 20 0c 	eor	r12,r11,r9
8001179c:	fe 96 ff 2e 	brmi	800115f8 <__avr32_f64_sub_from_add>
800117a0:	eb cd 40 e0 	pushm	r5-r7,lr
800117a4:	16 9c       	mov	r12,r11
800117a6:	e6 1c 80 00 	andh	r12,0x8000,COH
800117aa:	bf db       	cbr	r11,0x1f
800117ac:	bf d9       	cbr	r9,0x1f
800117ae:	12 3b       	cp.w	r11,r9
800117b0:	c0 72       	brcc	800117be <__avr32_f64_add+0x26>
800117b2:	16 97       	mov	r7,r11
800117b4:	12 9b       	mov	r11,r9
800117b6:	0e 99       	mov	r9,r7
800117b8:	14 97       	mov	r7,r10
800117ba:	10 9a       	mov	r10,r8
800117bc:	0e 98       	mov	r8,r7
800117be:	30 0e       	mov	lr,0
800117c0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800117c4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800117c8:	b5 ab       	sbr	r11,0x14
800117ca:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800117ce:	c5 f0       	breq	8001188c <__avr32_f64_add_op2_subnormal>
800117d0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800117d4:	b5 a9       	sbr	r9,0x14
800117d6:	e0 47 07 ff 	cp.w	r7,2047
800117da:	c2 50       	breq	80011824 <__avr32_f64_add_opH_nan_or_inf>
800117dc:	0e 26       	rsub	r6,r7
800117de:	c0 f0       	breq	800117fc <__avr32_f64_add_shift_done>
800117e0:	ec 05 11 20 	rsub	r5,r6,32
800117e4:	e0 46 00 20 	cp.w	r6,32
800117e8:	c3 52       	brcc	80011852 <__avr32_f64_add_longshift>
800117ea:	f0 05 09 4e 	lsl	lr,r8,r5
800117ee:	f2 05 09 45 	lsl	r5,r9,r5
800117f2:	f0 06 0a 48 	lsr	r8,r8,r6
800117f6:	f2 06 0a 49 	lsr	r9,r9,r6
800117fa:	0a 48       	or	r8,r5

800117fc <__avr32_f64_add_shift_done>:
800117fc:	10 0a       	add	r10,r8
800117fe:	f6 09 00 4b 	adc	r11,r11,r9
80011802:	ed bb 00 15 	bld	r11,0x15
80011806:	c3 40       	breq	8001186e <__avr32_f64_add_res_of>

80011808 <__avr32_f64_add_res_of_done>:
80011808:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8001180c:	18 4b       	or	r11,r12

8001180e <__avr32_f64_add_round>:
8001180e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80011812:	18 4e       	or	lr,r12
80011814:	ee 1e 80 00 	eorh	lr,0x8000
80011818:	f1 be 04 20 	satu	lr,0x1
8001181c:	1c 0a       	add	r10,lr
8001181e:	5c 0b       	acr	r11
80011820:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011824 <__avr32_f64_add_opH_nan_or_inf>:
80011824:	b5 cb       	cbr	r11,0x14
80011826:	f7 ea 10 0e 	or	lr,r11,r10
8001182a:	c1 01       	brne	8001184a <__avr32_f64_add_return_nan>
8001182c:	e0 46 07 ff 	cp.w	r6,2047
80011830:	c0 30       	breq	80011836 <__avr32_f64_add_opL_nan_or_inf>
80011832:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011836 <__avr32_f64_add_opL_nan_or_inf>:
80011836:	b5 c9       	cbr	r9,0x14
80011838:	f3 e8 10 0e 	or	lr,r9,r8
8001183c:	c0 71       	brne	8001184a <__avr32_f64_add_return_nan>
8001183e:	30 0a       	mov	r10,0
80011840:	fc 1b 7f f0 	movh	r11,0x7ff0
80011844:	18 4b       	or	r11,r12
80011846:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001184a <__avr32_f64_add_return_nan>:
8001184a:	3f fa       	mov	r10,-1
8001184c:	3f fb       	mov	r11,-1
8001184e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80011852 <__avr32_f64_add_longshift>:
80011852:	f1 b6 04 c0 	satu	r6,0x6
80011856:	f0 0e 17 00 	moveq	lr,r8
8001185a:	c0 60       	breq	80011866 <__avr32_f64_add_longshift+0x14>
8001185c:	f2 05 09 4e 	lsl	lr,r9,r5
80011860:	58 08       	cp.w	r8,0
80011862:	5f 18       	srne	r8
80011864:	10 4e       	or	lr,r8
80011866:	f2 06 0a 48 	lsr	r8,r9,r6
8001186a:	30 09       	mov	r9,0
8001186c:	cc 8b       	rjmp	800117fc <__avr32_f64_add_shift_done>

8001186e <__avr32_f64_add_res_of>:
8001186e:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80011872:	a1 9b       	lsr	r11,0x1
80011874:	5d 0a       	ror	r10
80011876:	5d 0e       	ror	lr
80011878:	2f f7       	sub	r7,-1
8001187a:	e0 47 07 ff 	cp.w	r7,2047
8001187e:	f9 ba 00 00 	moveq	r10,0
80011882:	f9 bb 00 00 	moveq	r11,0
80011886:	f9 be 00 00 	moveq	lr,0
8001188a:	cb fb       	rjmp	80011808 <__avr32_f64_add_res_of_done>

8001188c <__avr32_f64_add_op2_subnormal>:
8001188c:	30 16       	mov	r6,1
8001188e:	58 07       	cp.w	r7,0
80011890:	ca 31       	brne	800117d6 <__avr32_f64_add+0x3e>
80011892:	b5 cb       	cbr	r11,0x14
80011894:	10 0a       	add	r10,r8
80011896:	f6 09 00 4b 	adc	r11,r11,r9
8001189a:	18 4b       	or	r11,r12
8001189c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800118a0 <__avr32_f64_to_u32>:
800118a0:	58 0b       	cp.w	r11,0
800118a2:	5e 6d       	retmi	0

800118a4 <__avr32_f64_to_s32>:
800118a4:	f6 0c 15 01 	lsl	r12,r11,0x1
800118a8:	b5 9c       	lsr	r12,0x15
800118aa:	e0 2c 03 ff 	sub	r12,1023
800118ae:	5e 3d       	retlo	0
800118b0:	f8 0c 11 1f 	rsub	r12,r12,31
800118b4:	16 99       	mov	r9,r11
800118b6:	ab 7b       	lsl	r11,0xb
800118b8:	bf bb       	sbr	r11,0x1f
800118ba:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800118be:	f6 0c 0a 4b 	lsr	r11,r11,r12
800118c2:	a1 79       	lsl	r9,0x1
800118c4:	5e 2b       	reths	r11
800118c6:	5c 3b       	neg	r11
800118c8:	5e fb       	retal	r11

800118ca <__avr32_f64_cmp_eq>:
800118ca:	10 3a       	cp.w	r10,r8
800118cc:	f2 0b 13 00 	cpc	r11,r9
800118d0:	c0 80       	breq	800118e0 <__avr32_f64_cmp_eq+0x16>
800118d2:	a1 7b       	lsl	r11,0x1
800118d4:	a1 79       	lsl	r9,0x1
800118d6:	14 4b       	or	r11,r10
800118d8:	12 4b       	or	r11,r9
800118da:	10 4b       	or	r11,r8
800118dc:	5e 0f       	reteq	1
800118de:	5e fd       	retal	0
800118e0:	a1 7b       	lsl	r11,0x1
800118e2:	fc 1c ff e0 	movh	r12,0xffe0
800118e6:	58 0a       	cp.w	r10,0
800118e8:	f8 0b 13 00 	cpc	r11,r12
800118ec:	5e 8f       	retls	1
800118ee:	5e fd       	retal	0

800118f0 <__avr32_f64_cmp_lt>:
800118f0:	1a de       	st.w	--sp,lr
800118f2:	1a d7       	st.w	--sp,r7
800118f4:	a1 7b       	lsl	r11,0x1
800118f6:	5f 3c       	srlo	r12
800118f8:	a1 79       	lsl	r9,0x1
800118fa:	5f 37       	srlo	r7
800118fc:	5c fc       	rol	r12
800118fe:	fc 1e ff e0 	movh	lr,0xffe0
80011902:	58 0a       	cp.w	r10,0
80011904:	fc 0b 13 00 	cpc	r11,lr
80011908:	e0 8b 00 1d 	brhi	80011942 <__avr32_f64_cmp_lt+0x52>
8001190c:	58 08       	cp.w	r8,0
8001190e:	fc 09 13 00 	cpc	r9,lr
80011912:	e0 8b 00 18 	brhi	80011942 <__avr32_f64_cmp_lt+0x52>
80011916:	58 0b       	cp.w	r11,0
80011918:	f5 ba 00 00 	subfeq	r10,0
8001191c:	c1 50       	breq	80011946 <__avr32_f64_cmp_lt+0x56>
8001191e:	1b 07       	ld.w	r7,sp++
80011920:	1b 0e       	ld.w	lr,sp++
80011922:	58 3c       	cp.w	r12,3
80011924:	c0 a0       	breq	80011938 <__avr32_f64_cmp_lt+0x48>
80011926:	58 1c       	cp.w	r12,1
80011928:	c0 33       	brcs	8001192e <__avr32_f64_cmp_lt+0x3e>
8001192a:	5e 0d       	reteq	0
8001192c:	5e 1f       	retne	1
8001192e:	10 3a       	cp.w	r10,r8
80011930:	f2 0b 13 00 	cpc	r11,r9
80011934:	5e 2d       	reths	0
80011936:	5e 3f       	retlo	1
80011938:	14 38       	cp.w	r8,r10
8001193a:	f6 09 13 00 	cpc	r9,r11
8001193e:	5e 2d       	reths	0
80011940:	5e 3f       	retlo	1
80011942:	1b 07       	ld.w	r7,sp++
80011944:	d8 0a       	popm	pc,r12=0
80011946:	58 17       	cp.w	r7,1
80011948:	5f 1c       	srne	r12
8001194a:	58 09       	cp.w	r9,0
8001194c:	f5 b8 00 00 	subfeq	r8,0
80011950:	1b 07       	ld.w	r7,sp++
80011952:	1b 0e       	ld.w	lr,sp++
80011954:	5e 0d       	reteq	0
80011956:	5e fc       	retal	r12

80011958 <__avr32_f64_div>:
80011958:	eb cd 40 ff 	pushm	r0-r7,lr
8001195c:	f7 e9 20 0e 	eor	lr,r11,r9
80011960:	f6 07 16 14 	lsr	r7,r11,0x14
80011964:	a9 7b       	lsl	r11,0x9
80011966:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8001196a:	a9 7a       	lsl	r10,0x9
8001196c:	bd bb       	sbr	r11,0x1d
8001196e:	e4 1b 3f ff 	andh	r11,0x3fff
80011972:	ab d7       	cbr	r7,0xb
80011974:	e0 80 00 cc 	breq	80011b0c <__avr32_f64_div_round_subnormal+0x54>
80011978:	e0 47 07 ff 	cp.w	r7,2047
8001197c:	e0 84 00 b5 	brge	80011ae6 <__avr32_f64_div_round_subnormal+0x2e>
80011980:	f2 06 16 14 	lsr	r6,r9,0x14
80011984:	a9 79       	lsl	r9,0x9
80011986:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8001198a:	a9 78       	lsl	r8,0x9
8001198c:	bd b9       	sbr	r9,0x1d
8001198e:	e4 19 3f ff 	andh	r9,0x3fff
80011992:	ab d6       	cbr	r6,0xb
80011994:	e0 80 00 e2 	breq	80011b58 <__avr32_f64_div_round_subnormal+0xa0>
80011998:	e0 46 07 ff 	cp.w	r6,2047
8001199c:	e0 84 00 b2 	brge	80011b00 <__avr32_f64_div_round_subnormal+0x48>
800119a0:	0c 17       	sub	r7,r6
800119a2:	fe 37 fc 01 	sub	r7,-1023
800119a6:	fc 1c 80 00 	movh	r12,0x8000
800119aa:	f8 03 16 01 	lsr	r3,r12,0x1
800119ae:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800119b2:	5c d4       	com	r4
800119b4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800119b8:	e6 09 06 44 	mulu.d	r4,r3,r9
800119bc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800119c0:	e6 05 06 44 	mulu.d	r4,r3,r5
800119c4:	ea 03 15 02 	lsl	r3,r5,0x2
800119c8:	e6 09 06 44 	mulu.d	r4,r3,r9
800119cc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800119d0:	e6 05 06 44 	mulu.d	r4,r3,r5
800119d4:	ea 03 15 02 	lsl	r3,r5,0x2
800119d8:	e6 09 06 44 	mulu.d	r4,r3,r9
800119dc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800119e0:	e6 05 06 44 	mulu.d	r4,r3,r5
800119e4:	ea 03 15 02 	lsl	r3,r5,0x2
800119e8:	e6 08 06 40 	mulu.d	r0,r3,r8
800119ec:	e4 09 07 40 	macu.d	r0,r2,r9
800119f0:	e6 09 06 44 	mulu.d	r4,r3,r9
800119f4:	02 04       	add	r4,r1
800119f6:	5c 05       	acr	r5
800119f8:	a3 65       	lsl	r5,0x2
800119fa:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800119fe:	a3 64       	lsl	r4,0x2
80011a00:	5c 34       	neg	r4
80011a02:	f8 05 01 45 	sbc	r5,r12,r5
80011a06:	e6 04 06 40 	mulu.d	r0,r3,r4
80011a0a:	e4 05 07 40 	macu.d	r0,r2,r5
80011a0e:	e6 05 06 44 	mulu.d	r4,r3,r5
80011a12:	02 04       	add	r4,r1
80011a14:	5c 05       	acr	r5
80011a16:	ea 03 15 02 	lsl	r3,r5,0x2
80011a1a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80011a1e:	e8 02 15 02 	lsl	r2,r4,0x2
80011a22:	e6 08 06 40 	mulu.d	r0,r3,r8
80011a26:	e4 09 07 40 	macu.d	r0,r2,r9
80011a2a:	e6 09 06 44 	mulu.d	r4,r3,r9
80011a2e:	02 04       	add	r4,r1
80011a30:	5c 05       	acr	r5
80011a32:	a3 65       	lsl	r5,0x2
80011a34:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80011a38:	a3 64       	lsl	r4,0x2
80011a3a:	5c 34       	neg	r4
80011a3c:	f8 05 01 45 	sbc	r5,r12,r5
80011a40:	e6 04 06 40 	mulu.d	r0,r3,r4
80011a44:	e4 05 07 40 	macu.d	r0,r2,r5
80011a48:	e6 05 06 44 	mulu.d	r4,r3,r5
80011a4c:	02 04       	add	r4,r1
80011a4e:	5c 05       	acr	r5
80011a50:	ea 03 15 02 	lsl	r3,r5,0x2
80011a54:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80011a58:	e8 02 15 02 	lsl	r2,r4,0x2
80011a5c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80011a60:	e4 0b 07 40 	macu.d	r0,r2,r11
80011a64:	e6 0b 06 42 	mulu.d	r2,r3,r11
80011a68:	02 02       	add	r2,r1
80011a6a:	5c 03       	acr	r3
80011a6c:	ed b3 00 1c 	bld	r3,0x1c
80011a70:	c0 90       	breq	80011a82 <__avr32_f64_div+0x12a>
80011a72:	a1 72       	lsl	r2,0x1
80011a74:	5c f3       	rol	r3
80011a76:	20 17       	sub	r7,1
80011a78:	a3 9a       	lsr	r10,0x3
80011a7a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80011a7e:	a3 9b       	lsr	r11,0x3
80011a80:	c0 58       	rjmp	80011a8a <__avr32_f64_div+0x132>
80011a82:	a5 8a       	lsr	r10,0x4
80011a84:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80011a88:	a5 8b       	lsr	r11,0x4
80011a8a:	58 07       	cp.w	r7,0
80011a8c:	e0 8a 00 8b 	brle	80011ba2 <__avr32_f64_div_res_subnormal>
80011a90:	e0 12 ff 00 	andl	r2,0xff00
80011a94:	e8 12 00 80 	orl	r2,0x80
80011a98:	e6 08 06 40 	mulu.d	r0,r3,r8
80011a9c:	e4 09 07 40 	macu.d	r0,r2,r9
80011aa0:	e4 08 06 44 	mulu.d	r4,r2,r8
80011aa4:	e6 09 06 48 	mulu.d	r8,r3,r9
80011aa8:	00 05       	add	r5,r0
80011aaa:	f0 01 00 48 	adc	r8,r8,r1
80011aae:	5c 09       	acr	r9
80011ab0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80011ab4:	58 04       	cp.w	r4,0
80011ab6:	5c 25       	cpc	r5

80011ab8 <__avr32_f64_div_round_subnormal>:
80011ab8:	f4 08 13 00 	cpc	r8,r10
80011abc:	f6 09 13 00 	cpc	r9,r11
80011ac0:	5f 36       	srlo	r6
80011ac2:	f8 06 17 00 	moveq	r6,r12
80011ac6:	e4 0a 16 08 	lsr	r10,r2,0x8
80011aca:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80011ace:	e6 0b 16 08 	lsr	r11,r3,0x8
80011ad2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80011ad6:	ed be 00 1f 	bld	lr,0x1f
80011ada:	ef bb 00 1f 	bst	r11,0x1f
80011ade:	0c 0a       	add	r10,r6
80011ae0:	5c 0b       	acr	r11
80011ae2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011ae6:	e4 1b 00 0f 	andh	r11,0xf
80011aea:	14 4b       	or	r11,r10
80011aec:	e0 81 00 a7 	brne	80011c3a <__avr32_f64_div_res_subnormal+0x98>
80011af0:	f2 06 16 14 	lsr	r6,r9,0x14
80011af4:	ab d6       	cbr	r6,0xb
80011af6:	e0 46 07 ff 	cp.w	r6,2047
80011afa:	e0 81 00 a4 	brne	80011c42 <__avr32_f64_div_res_subnormal+0xa0>
80011afe:	c9 e8       	rjmp	80011c3a <__avr32_f64_div_res_subnormal+0x98>
80011b00:	e4 19 00 0f 	andh	r9,0xf
80011b04:	10 49       	or	r9,r8
80011b06:	e0 81 00 9a 	brne	80011c3a <__avr32_f64_div_res_subnormal+0x98>
80011b0a:	c9 28       	rjmp	80011c2e <__avr32_f64_div_res_subnormal+0x8c>
80011b0c:	a3 7b       	lsl	r11,0x3
80011b0e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80011b12:	a3 7a       	lsl	r10,0x3
80011b14:	f5 eb 10 04 	or	r4,r10,r11
80011b18:	e0 80 00 a0 	breq	80011c58 <__avr32_f64_div_op1_zero>
80011b1c:	f6 04 12 00 	clz	r4,r11
80011b20:	c1 70       	breq	80011b4e <__avr32_f64_div_round_subnormal+0x96>
80011b22:	c0 c3       	brcs	80011b3a <__avr32_f64_div_round_subnormal+0x82>
80011b24:	e8 05 11 20 	rsub	r5,r4,32
80011b28:	f6 04 09 4b 	lsl	r11,r11,r4
80011b2c:	f4 05 0a 45 	lsr	r5,r10,r5
80011b30:	0a 4b       	or	r11,r5
80011b32:	f4 04 09 4a 	lsl	r10,r10,r4
80011b36:	08 17       	sub	r7,r4
80011b38:	c0 b8       	rjmp	80011b4e <__avr32_f64_div_round_subnormal+0x96>
80011b3a:	f4 04 12 00 	clz	r4,r10
80011b3e:	f9 b4 03 00 	movlo	r4,0
80011b42:	f7 b4 02 e0 	subhs	r4,-32
80011b46:	f4 04 09 4b 	lsl	r11,r10,r4
80011b4a:	30 0a       	mov	r10,0
80011b4c:	08 17       	sub	r7,r4
80011b4e:	a3 8a       	lsr	r10,0x2
80011b50:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80011b54:	a3 8b       	lsr	r11,0x2
80011b56:	c1 1b       	rjmp	80011978 <__avr32_f64_div+0x20>
80011b58:	a3 79       	lsl	r9,0x3
80011b5a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80011b5e:	a3 78       	lsl	r8,0x3
80011b60:	f3 e8 10 04 	or	r4,r9,r8
80011b64:	c6 f0       	breq	80011c42 <__avr32_f64_div_res_subnormal+0xa0>
80011b66:	f2 04 12 00 	clz	r4,r9
80011b6a:	c1 70       	breq	80011b98 <__avr32_f64_div_round_subnormal+0xe0>
80011b6c:	c0 c3       	brcs	80011b84 <__avr32_f64_div_round_subnormal+0xcc>
80011b6e:	e8 05 11 20 	rsub	r5,r4,32
80011b72:	f2 04 09 49 	lsl	r9,r9,r4
80011b76:	f0 05 0a 45 	lsr	r5,r8,r5
80011b7a:	0a 49       	or	r9,r5
80011b7c:	f0 04 09 48 	lsl	r8,r8,r4
80011b80:	08 16       	sub	r6,r4
80011b82:	c0 b8       	rjmp	80011b98 <__avr32_f64_div_round_subnormal+0xe0>
80011b84:	f0 04 12 00 	clz	r4,r8
80011b88:	f9 b4 03 00 	movlo	r4,0
80011b8c:	f7 b4 02 e0 	subhs	r4,-32
80011b90:	f0 04 09 49 	lsl	r9,r8,r4
80011b94:	30 08       	mov	r8,0
80011b96:	08 16       	sub	r6,r4
80011b98:	a3 88       	lsr	r8,0x2
80011b9a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80011b9e:	a3 89       	lsr	r9,0x2
80011ba0:	cf ca       	rjmp	80011998 <__avr32_f64_div+0x40>

80011ba2 <__avr32_f64_div_res_subnormal>:
80011ba2:	5c 37       	neg	r7
80011ba4:	2f f7       	sub	r7,-1
80011ba6:	f1 b7 04 c0 	satu	r7,0x6
80011baa:	e0 47 00 20 	cp.w	r7,32
80011bae:	c1 54       	brge	80011bd8 <__avr32_f64_div_res_subnormal+0x36>
80011bb0:	ee 06 11 20 	rsub	r6,r7,32
80011bb4:	e4 07 0a 42 	lsr	r2,r2,r7
80011bb8:	e6 06 09 4c 	lsl	r12,r3,r6
80011bbc:	18 42       	or	r2,r12
80011bbe:	e6 07 0a 43 	lsr	r3,r3,r7
80011bc2:	f4 06 09 41 	lsl	r1,r10,r6
80011bc6:	f4 07 0a 4a 	lsr	r10,r10,r7
80011bca:	f6 06 09 4c 	lsl	r12,r11,r6
80011bce:	18 4a       	or	r10,r12
80011bd0:	f6 07 0a 4b 	lsr	r11,r11,r7
80011bd4:	30 00       	mov	r0,0
80011bd6:	c1 58       	rjmp	80011c00 <__avr32_f64_div_res_subnormal+0x5e>
80011bd8:	ee 06 11 20 	rsub	r6,r7,32
80011bdc:	f9 b0 00 00 	moveq	r0,0
80011be0:	f9 bc 00 00 	moveq	r12,0
80011be4:	c0 50       	breq	80011bee <__avr32_f64_div_res_subnormal+0x4c>
80011be6:	f4 06 09 40 	lsl	r0,r10,r6
80011bea:	f6 06 09 4c 	lsl	r12,r11,r6
80011bee:	e6 07 0a 42 	lsr	r2,r3,r7
80011bf2:	30 03       	mov	r3,0
80011bf4:	f4 07 0a 41 	lsr	r1,r10,r7
80011bf8:	18 41       	or	r1,r12
80011bfa:	f6 07 0a 4a 	lsr	r10,r11,r7
80011bfe:	30 0b       	mov	r11,0
80011c00:	e0 12 ff 00 	andl	r2,0xff00
80011c04:	e8 12 00 80 	orl	r2,0x80
80011c08:	e6 08 06 46 	mulu.d	r6,r3,r8
80011c0c:	e4 09 07 46 	macu.d	r6,r2,r9
80011c10:	e4 08 06 44 	mulu.d	r4,r2,r8
80011c14:	e6 09 06 48 	mulu.d	r8,r3,r9
80011c18:	0c 05       	add	r5,r6
80011c1a:	f0 07 00 48 	adc	r8,r8,r7
80011c1e:	5c 09       	acr	r9
80011c20:	30 07       	mov	r7,0
80011c22:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80011c26:	00 34       	cp.w	r4,r0
80011c28:	e2 05 13 00 	cpc	r5,r1
80011c2c:	c4 6b       	rjmp	80011ab8 <__avr32_f64_div_round_subnormal>
80011c2e:	1c 9b       	mov	r11,lr
80011c30:	e6 1b 80 00 	andh	r11,0x8000,COH
80011c34:	30 0a       	mov	r10,0
80011c36:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011c3a:	3f fb       	mov	r11,-1
80011c3c:	30 0a       	mov	r10,0
80011c3e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011c42:	f5 eb 10 04 	or	r4,r10,r11
80011c46:	c0 90       	breq	80011c58 <__avr32_f64_div_op1_zero>
80011c48:	1c 9b       	mov	r11,lr
80011c4a:	e6 1b 80 00 	andh	r11,0x8000,COH
80011c4e:	ea 1b 7f f0 	orh	r11,0x7ff0
80011c52:	30 0a       	mov	r10,0
80011c54:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80011c58 <__avr32_f64_div_op1_zero>:
80011c58:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80011c5c:	ce f0       	breq	80011c3a <__avr32_f64_div_res_subnormal+0x98>
80011c5e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80011c62:	e0 44 07 ff 	cp.w	r4,2047
80011c66:	ce 41       	brne	80011c2e <__avr32_f64_div_res_subnormal+0x8c>
80011c68:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80011c6c:	ce 10       	breq	80011c2e <__avr32_f64_div_res_subnormal+0x8c>
80011c6e:	ce 6b       	rjmp	80011c3a <__avr32_f64_div_res_subnormal+0x98>

80011c70 <__avr32_udiv64>:
80011c70:	d4 31       	pushm	r0-r7,lr
80011c72:	1a 97       	mov	r7,sp
80011c74:	20 2d       	sub	sp,8
80011c76:	10 9e       	mov	lr,r8
80011c78:	12 95       	mov	r5,r9
80011c7a:	14 96       	mov	r6,r10
80011c7c:	58 09       	cp.w	r9,0
80011c7e:	c4 91       	brne	80011d10 <__avr32_udiv64+0xa0>
80011c80:	16 38       	cp.w	r8,r11
80011c82:	e0 88 00 57 	brls	80011d30 <__avr32_udiv64+0xc0>
80011c86:	f0 08 12 00 	clz	r8,r8
80011c8a:	c0 d0       	breq	80011ca4 <__avr32_udiv64+0x34>
80011c8c:	f6 08 09 4b 	lsl	r11,r11,r8
80011c90:	f0 09 11 20 	rsub	r9,r8,32
80011c94:	fc 08 09 4e 	lsl	lr,lr,r8
80011c98:	f4 09 0a 49 	lsr	r9,r10,r9
80011c9c:	f4 08 09 46 	lsl	r6,r10,r8
80011ca0:	f3 eb 10 0b 	or	r11,r9,r11
80011ca4:	fc 05 16 10 	lsr	r5,lr,0x10
80011ca8:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80011cac:	f6 05 0d 0a 	divu	r10,r11,r5
80011cb0:	ec 08 16 10 	lsr	r8,r6,0x10
80011cb4:	14 99       	mov	r9,r10
80011cb6:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80011cba:	b9 3a       	mul	r10,r12
80011cbc:	10 3a       	cp.w	r10,r8
80011cbe:	e0 88 00 0c 	brls	80011cd6 <__avr32_udiv64+0x66>
80011cc2:	20 19       	sub	r9,1
80011cc4:	1c 08       	add	r8,lr
80011cc6:	10 3e       	cp.w	lr,r8
80011cc8:	e0 8b 00 07 	brhi	80011cd6 <__avr32_udiv64+0x66>
80011ccc:	10 3a       	cp.w	r10,r8
80011cce:	f7 b9 0b 01 	subhi	r9,1
80011cd2:	f1 de eb 08 	addhi	r8,r8,lr
80011cd6:	f0 0a 01 0b 	sub	r11,r8,r10
80011cda:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80011cde:	f6 05 0d 0a 	divu	r10,r11,r5
80011ce2:	ed eb 11 06 	or	r6,r6,r11<<0x10
80011ce6:	14 98       	mov	r8,r10
80011ce8:	f4 0c 02 4c 	mul	r12,r10,r12
80011cec:	0c 3c       	cp.w	r12,r6
80011cee:	e0 88 00 0a 	brls	80011d02 <__avr32_udiv64+0x92>
80011cf2:	20 18       	sub	r8,1
80011cf4:	1c 06       	add	r6,lr
80011cf6:	0c 3e       	cp.w	lr,r6
80011cf8:	e0 8b 00 05 	brhi	80011d02 <__avr32_udiv64+0x92>
80011cfc:	0c 3c       	cp.w	r12,r6
80011cfe:	f7 b8 0b 01 	subhi	r8,1
80011d02:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80011d06:	30 0c       	mov	r12,0
80011d08:	16 9a       	mov	r10,r11
80011d0a:	18 9b       	mov	r11,r12
80011d0c:	2f ed       	sub	sp,-8
80011d0e:	d8 32       	popm	r0-r7,pc
80011d10:	16 39       	cp.w	r9,r11
80011d12:	e0 8b 00 51 	brhi	80011db4 <__avr32_udiv64+0x144>
80011d16:	f2 0c 12 00 	clz	r12,r9
80011d1a:	c5 31       	brne	80011dc0 <__avr32_udiv64+0x150>
80011d1c:	14 38       	cp.w	r8,r10
80011d1e:	5f 89       	srls	r9
80011d20:	16 35       	cp.w	r5,r11
80011d22:	5f 38       	srlo	r8
80011d24:	10 49       	or	r9,r8
80011d26:	f8 09 18 00 	cp.b	r9,r12
80011d2a:	c4 50       	breq	80011db4 <__avr32_udiv64+0x144>
80011d2c:	30 1b       	mov	r11,1
80011d2e:	c4 58       	rjmp	80011db8 <__avr32_udiv64+0x148>
80011d30:	58 08       	cp.w	r8,0
80011d32:	c0 51       	brne	80011d3c <__avr32_udiv64+0xcc>
80011d34:	30 19       	mov	r9,1
80011d36:	f2 08 0d 08 	divu	r8,r9,r8
80011d3a:	10 9e       	mov	lr,r8
80011d3c:	fc 08 12 00 	clz	r8,lr
80011d40:	e0 81 00 91 	brne	80011e62 <__avr32_udiv64+0x1f2>
80011d44:	1c 1b       	sub	r11,lr
80011d46:	fc 05 16 10 	lsr	r5,lr,0x10
80011d4a:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80011d4e:	30 1c       	mov	r12,1
80011d50:	f6 05 0d 0a 	divu	r10,r11,r5
80011d54:	ec 08 16 10 	lsr	r8,r6,0x10
80011d58:	f4 09 02 43 	mul	r3,r10,r9
80011d5c:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80011d60:	14 9b       	mov	r11,r10
80011d62:	10 33       	cp.w	r3,r8
80011d64:	e0 88 00 0c 	brls	80011d7c <__avr32_udiv64+0x10c>
80011d68:	20 1b       	sub	r11,1
80011d6a:	1c 08       	add	r8,lr
80011d6c:	10 3e       	cp.w	lr,r8
80011d6e:	e0 8b 00 07 	brhi	80011d7c <__avr32_udiv64+0x10c>
80011d72:	10 33       	cp.w	r3,r8
80011d74:	f7 bb 0b 01 	subhi	r11,1
80011d78:	f1 de eb 08 	addhi	r8,r8,lr
80011d7c:	f0 03 01 03 	sub	r3,r8,r3
80011d80:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80011d84:	e6 05 0d 02 	divu	r2,r3,r5
80011d88:	ed e3 11 06 	or	r6,r6,r3<<0x10
80011d8c:	04 98       	mov	r8,r2
80011d8e:	e4 09 02 49 	mul	r9,r2,r9
80011d92:	0c 39       	cp.w	r9,r6
80011d94:	e0 88 00 0a 	brls	80011da8 <__avr32_udiv64+0x138>
80011d98:	20 18       	sub	r8,1
80011d9a:	1c 06       	add	r6,lr
80011d9c:	0c 3e       	cp.w	lr,r6
80011d9e:	e0 8b 00 05 	brhi	80011da8 <__avr32_udiv64+0x138>
80011da2:	0c 39       	cp.w	r9,r6
80011da4:	f7 b8 0b 01 	subhi	r8,1
80011da8:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80011dac:	16 9a       	mov	r10,r11
80011dae:	18 9b       	mov	r11,r12
80011db0:	2f ed       	sub	sp,-8
80011db2:	d8 32       	popm	r0-r7,pc
80011db4:	30 0b       	mov	r11,0
80011db6:	16 9c       	mov	r12,r11
80011db8:	16 9a       	mov	r10,r11
80011dba:	18 9b       	mov	r11,r12
80011dbc:	2f ed       	sub	sp,-8
80011dbe:	d8 32       	popm	r0-r7,pc
80011dc0:	f2 0c 09 45 	lsl	r5,r9,r12
80011dc4:	f8 0e 11 20 	rsub	lr,r12,32
80011dc8:	f0 0c 09 43 	lsl	r3,r8,r12
80011dcc:	f4 0e 0a 46 	lsr	r6,r10,lr
80011dd0:	f0 0e 0a 48 	lsr	r8,r8,lr
80011dd4:	f6 0e 0a 4e 	lsr	lr,r11,lr
80011dd8:	0a 48       	or	r8,r5
80011dda:	f0 01 16 10 	lsr	r1,r8,0x10
80011dde:	fc 01 0d 04 	divu	r4,lr,r1
80011de2:	ee e5 ff f8 	st.d	r7[-8],r4
80011de6:	f6 0c 09 49 	lsl	r9,r11,r12
80011dea:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80011dee:	ed e9 10 09 	or	r9,r6,r9
80011df2:	08 96       	mov	r6,r4
80011df4:	f2 0e 16 10 	lsr	lr,r9,0x10
80011df8:	ee f4 ff f8 	ld.w	r4,r7[-8]
80011dfc:	ec 05 02 4b 	mul	r11,r6,r5
80011e00:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80011e04:	1c 3b       	cp.w	r11,lr
80011e06:	e0 88 00 07 	brls	80011e14 <__avr32_udiv64+0x1a4>
80011e0a:	20 16       	sub	r6,1
80011e0c:	10 0e       	add	lr,r8
80011e0e:	1c 38       	cp.w	r8,lr
80011e10:	e0 88 00 6d 	brls	80011eea <__avr32_udiv64+0x27a>
80011e14:	16 1e       	sub	lr,r11
80011e16:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80011e1a:	fc 01 0d 00 	divu	r0,lr,r1
80011e1e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80011e22:	00 9b       	mov	r11,r0
80011e24:	e0 05 02 4e 	mul	lr,r0,r5
80011e28:	12 3e       	cp.w	lr,r9
80011e2a:	e0 88 00 07 	brls	80011e38 <__avr32_udiv64+0x1c8>
80011e2e:	20 1b       	sub	r11,1
80011e30:	10 09       	add	r9,r8
80011e32:	12 38       	cp.w	r8,r9
80011e34:	e0 88 00 55 	brls	80011ede <__avr32_udiv64+0x26e>
80011e38:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80011e3c:	1c 19       	sub	r9,lr
80011e3e:	f6 03 06 42 	mulu.d	r2,r11,r3
80011e42:	06 39       	cp.w	r9,r3
80011e44:	c0 93       	brcs	80011e56 <__avr32_udiv64+0x1e6>
80011e46:	5f 09       	sreq	r9
80011e48:	f4 0c 09 4c 	lsl	r12,r10,r12
80011e4c:	04 3c       	cp.w	r12,r2
80011e4e:	5f 38       	srlo	r8
80011e50:	f3 e8 00 08 	and	r8,r9,r8
80011e54:	c0 20       	breq	80011e58 <__avr32_udiv64+0x1e8>
80011e56:	20 1b       	sub	r11,1
80011e58:	30 0c       	mov	r12,0
80011e5a:	16 9a       	mov	r10,r11
80011e5c:	18 9b       	mov	r11,r12
80011e5e:	2f ed       	sub	sp,-8
80011e60:	d8 32       	popm	r0-r7,pc
80011e62:	f6 08 09 49 	lsl	r9,r11,r8
80011e66:	fc 08 09 4e 	lsl	lr,lr,r8
80011e6a:	f0 01 11 20 	rsub	r1,r8,32
80011e6e:	fc 05 16 10 	lsr	r5,lr,0x10
80011e72:	f4 01 0a 42 	lsr	r2,r10,r1
80011e76:	f6 01 0a 41 	lsr	r1,r11,r1
80011e7a:	12 42       	or	r2,r9
80011e7c:	e2 05 0d 00 	divu	r0,r1,r5
80011e80:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80011e84:	e4 06 16 10 	lsr	r6,r2,0x10
80011e88:	00 93       	mov	r3,r0
80011e8a:	ed e1 11 06 	or	r6,r6,r1<<0x10
80011e8e:	e0 09 02 4c 	mul	r12,r0,r9
80011e92:	0c 3c       	cp.w	r12,r6
80011e94:	e0 88 00 07 	brls	80011ea2 <__avr32_udiv64+0x232>
80011e98:	20 13       	sub	r3,1
80011e9a:	1c 06       	add	r6,lr
80011e9c:	0c 3e       	cp.w	lr,r6
80011e9e:	e0 88 00 2c 	brls	80011ef6 <__avr32_udiv64+0x286>
80011ea2:	ec 0c 01 01 	sub	r1,r6,r12
80011ea6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80011eaa:	e2 05 0d 00 	divu	r0,r1,r5
80011eae:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80011eb2:	00 9c       	mov	r12,r0
80011eb4:	e0 09 02 41 	mul	r1,r0,r9
80011eb8:	16 31       	cp.w	r1,r11
80011eba:	e0 88 00 0c 	brls	80011ed2 <__avr32_udiv64+0x262>
80011ebe:	20 1c       	sub	r12,1
80011ec0:	1c 0b       	add	r11,lr
80011ec2:	16 3e       	cp.w	lr,r11
80011ec4:	e0 8b 00 07 	brhi	80011ed2 <__avr32_udiv64+0x262>
80011ec8:	16 31       	cp.w	r1,r11
80011eca:	f7 bc 0b 01 	subhi	r12,1
80011ece:	f7 de eb 0b 	addhi	r11,r11,lr
80011ed2:	f4 08 09 46 	lsl	r6,r10,r8
80011ed6:	02 1b       	sub	r11,r1
80011ed8:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80011edc:	c3 ab       	rjmp	80011d50 <__avr32_udiv64+0xe0>
80011ede:	12 3e       	cp.w	lr,r9
80011ee0:	f3 d8 eb 09 	addhi	r9,r9,r8
80011ee4:	f7 bb 0b 01 	subhi	r11,1
80011ee8:	ca 8b       	rjmp	80011e38 <__avr32_udiv64+0x1c8>
80011eea:	1c 3b       	cp.w	r11,lr
80011eec:	f7 b6 0b 01 	subhi	r6,1
80011ef0:	fd d8 eb 0e 	addhi	lr,lr,r8
80011ef4:	c9 0b       	rjmp	80011e14 <__avr32_udiv64+0x1a4>
80011ef6:	0c 3c       	cp.w	r12,r6
80011ef8:	f7 b3 0b 01 	subhi	r3,1
80011efc:	ed de eb 06 	addhi	r6,r6,lr
80011f00:	cd 1b       	rjmp	80011ea2 <__avr32_udiv64+0x232>

80011f02 <__avr32_umod64>:
80011f02:	d4 31       	pushm	r0-r7,lr
80011f04:	1a 97       	mov	r7,sp
80011f06:	20 2d       	sub	sp,8
80011f08:	10 9c       	mov	r12,r8
80011f0a:	12 95       	mov	r5,r9
80011f0c:	14 9e       	mov	lr,r10
80011f0e:	16 93       	mov	r3,r11
80011f10:	16 96       	mov	r6,r11
80011f12:	58 09       	cp.w	r9,0
80011f14:	c4 41       	brne	80011f9c <__avr32_umod64+0x9a>
80011f16:	16 38       	cp.w	r8,r11
80011f18:	e0 88 00 5a 	brls	80011fcc <__avr32_umod64+0xca>
80011f1c:	f0 08 12 00 	clz	r8,r8
80011f20:	c0 d0       	breq	80011f3a <__avr32_umod64+0x38>
80011f22:	f6 08 09 46 	lsl	r6,r11,r8
80011f26:	f8 08 09 4c 	lsl	r12,r12,r8
80011f2a:	f0 0b 11 20 	rsub	r11,r8,32
80011f2e:	f4 08 09 4e 	lsl	lr,r10,r8
80011f32:	f4 0b 0a 4b 	lsr	r11,r10,r11
80011f36:	f7 e6 10 06 	or	r6,r11,r6
80011f3a:	f8 0a 16 10 	lsr	r10,r12,0x10
80011f3e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80011f42:	ec 0a 0d 02 	divu	r2,r6,r10
80011f46:	fc 09 16 10 	lsr	r9,lr,0x10
80011f4a:	ea 02 02 4b 	mul	r11,r5,r2
80011f4e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80011f52:	12 3b       	cp.w	r11,r9
80011f54:	e0 88 00 09 	brls	80011f66 <__avr32_umod64+0x64>
80011f58:	18 09       	add	r9,r12
80011f5a:	12 3c       	cp.w	r12,r9
80011f5c:	e0 8b 00 05 	brhi	80011f66 <__avr32_umod64+0x64>
80011f60:	12 3b       	cp.w	r11,r9
80011f62:	f3 dc eb 09 	addhi	r9,r9,r12
80011f66:	f2 0b 01 0b 	sub	r11,r9,r11
80011f6a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80011f6e:	f6 0a 0d 0a 	divu	r10,r11,r10
80011f72:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80011f76:	ea 0a 02 4a 	mul	r10,r5,r10
80011f7a:	1c 3a       	cp.w	r10,lr
80011f7c:	e0 88 00 09 	brls	80011f8e <__avr32_umod64+0x8c>
80011f80:	18 0e       	add	lr,r12
80011f82:	1c 3c       	cp.w	r12,lr
80011f84:	e0 8b 00 05 	brhi	80011f8e <__avr32_umod64+0x8c>
80011f88:	1c 3a       	cp.w	r10,lr
80011f8a:	fd dc eb 0e 	addhi	lr,lr,r12
80011f8e:	fc 0a 01 0a 	sub	r10,lr,r10
80011f92:	30 0b       	mov	r11,0
80011f94:	f4 08 0a 4a 	lsr	r10,r10,r8
80011f98:	2f ed       	sub	sp,-8
80011f9a:	d8 32       	popm	r0-r7,pc
80011f9c:	16 39       	cp.w	r9,r11
80011f9e:	fe 9b ff fd 	brhi	80011f98 <__avr32_umod64+0x96>
80011fa2:	f2 09 12 00 	clz	r9,r9
80011fa6:	c4 61       	brne	80012032 <__avr32_umod64+0x130>
80011fa8:	14 38       	cp.w	r8,r10
80011faa:	5f 8b       	srls	r11
80011fac:	06 35       	cp.w	r5,r3
80011fae:	5f 3a       	srlo	r10
80011fb0:	f7 ea 10 0a 	or	r10,r11,r10
80011fb4:	f2 0a 18 00 	cp.b	r10,r9
80011fb8:	c0 60       	breq	80011fc4 <__avr32_umod64+0xc2>
80011fba:	fc 08 01 0a 	sub	r10,lr,r8
80011fbe:	e6 05 01 46 	sbc	r6,r3,r5
80011fc2:	14 9e       	mov	lr,r10
80011fc4:	0c 9b       	mov	r11,r6
80011fc6:	1c 9a       	mov	r10,lr
80011fc8:	2f ed       	sub	sp,-8
80011fca:	d8 32       	popm	r0-r7,pc
80011fcc:	58 08       	cp.w	r8,0
80011fce:	c0 51       	brne	80011fd8 <__avr32_umod64+0xd6>
80011fd0:	30 19       	mov	r9,1
80011fd2:	f2 08 0d 08 	divu	r8,r9,r8
80011fd6:	10 9c       	mov	r12,r8
80011fd8:	f8 08 12 00 	clz	r8,r12
80011fdc:	e0 81 00 84 	brne	800120e4 <__avr32_umod64+0x1e2>
80011fe0:	ec 0c 01 0b 	sub	r11,r6,r12
80011fe4:	f8 03 16 10 	lsr	r3,r12,0x10
80011fe8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80011fec:	f6 03 0d 0a 	divu	r10,r11,r3
80011ff0:	fc 09 16 10 	lsr	r9,lr,0x10
80011ff4:	ea 0a 02 4a 	mul	r10,r5,r10
80011ff8:	f3 eb 11 09 	or	r9,r9,r11<<0x10
80011ffc:	12 3a       	cp.w	r10,r9
80011ffe:	e0 88 00 09 	brls	80012010 <__avr32_umod64+0x10e>
80012002:	18 09       	add	r9,r12
80012004:	12 3c       	cp.w	r12,r9
80012006:	e0 8b 00 05 	brhi	80012010 <__avr32_umod64+0x10e>
8001200a:	12 3a       	cp.w	r10,r9
8001200c:	f3 dc eb 09 	addhi	r9,r9,r12
80012010:	14 19       	sub	r9,r10
80012012:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80012016:	f2 03 0d 02 	divu	r2,r9,r3
8001201a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8001201e:	ea 02 02 4a 	mul	r10,r5,r2
80012022:	1c 3a       	cp.w	r10,lr
80012024:	fe 98 ff b5 	brls	80011f8e <__avr32_umod64+0x8c>
80012028:	18 0e       	add	lr,r12
8001202a:	1c 3c       	cp.w	r12,lr
8001202c:	fe 9b ff b1 	brhi	80011f8e <__avr32_umod64+0x8c>
80012030:	ca cb       	rjmp	80011f88 <__avr32_umod64+0x86>
80012032:	f2 0e 11 20 	rsub	lr,r9,32
80012036:	ea 09 09 45 	lsl	r5,r5,r9
8001203a:	f6 09 09 4b 	lsl	r11,r11,r9
8001203e:	e6 0e 0a 43 	lsr	r3,r3,lr
80012042:	f0 09 09 41 	lsl	r1,r8,r9
80012046:	f4 09 09 42 	lsl	r2,r10,r9
8001204a:	f0 0e 0a 48 	lsr	r8,r8,lr
8001204e:	f4 0e 0a 4a 	lsr	r10,r10,lr
80012052:	0a 48       	or	r8,r5
80012054:	16 4a       	or	r10,r11
80012056:	f0 06 16 10 	lsr	r6,r8,0x10
8001205a:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8001205e:	e6 06 0d 04 	divu	r4,r3,r6
80012062:	f4 03 16 10 	lsr	r3,r10,0x10
80012066:	08 9b       	mov	r11,r4
80012068:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8001206c:	e8 0c 02 45 	mul	r5,r4,r12
80012070:	06 35       	cp.w	r5,r3
80012072:	e0 88 00 07 	brls	80012080 <__avr32_umod64+0x17e>
80012076:	20 1b       	sub	r11,1
80012078:	10 03       	add	r3,r8
8001207a:	06 38       	cp.w	r8,r3
8001207c:	e0 88 00 72 	brls	80012160 <__avr32_umod64+0x25e>
80012080:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80012084:	0a 13       	sub	r3,r5
80012086:	e6 06 0d 04 	divu	r4,r3,r6
8001208a:	f5 e5 11 06 	or	r6,r10,r5<<0x10
8001208e:	e8 0c 02 4c 	mul	r12,r4,r12
80012092:	08 9a       	mov	r10,r4
80012094:	0c 3c       	cp.w	r12,r6
80012096:	e0 88 00 07 	brls	800120a4 <__avr32_umod64+0x1a2>
8001209a:	20 1a       	sub	r10,1
8001209c:	10 06       	add	r6,r8
8001209e:	0c 38       	cp.w	r8,r6
800120a0:	e0 88 00 5a 	brls	80012154 <__avr32_umod64+0x252>
800120a4:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
800120a8:	18 16       	sub	r6,r12
800120aa:	f6 01 06 4a 	mulu.d	r10,r11,r1
800120ae:	14 9c       	mov	r12,r10
800120b0:	16 36       	cp.w	r6,r11
800120b2:	c0 73       	brcs	800120c0 <__avr32_umod64+0x1be>
800120b4:	5f 05       	sreq	r5
800120b6:	14 32       	cp.w	r2,r10
800120b8:	5f 3a       	srlo	r10
800120ba:	eb ea 00 0a 	and	r10,r5,r10
800120be:	c0 60       	breq	800120ca <__avr32_umod64+0x1c8>
800120c0:	f8 01 01 04 	sub	r4,r12,r1
800120c4:	f6 08 01 4b 	sbc	r11,r11,r8
800120c8:	08 9c       	mov	r12,r4
800120ca:	e4 0c 01 0a 	sub	r10,r2,r12
800120ce:	ec 0b 01 46 	sbc	r6,r6,r11
800120d2:	ec 09 0a 4b 	lsr	r11,r6,r9
800120d6:	f4 09 0a 4a 	lsr	r10,r10,r9
800120da:	ec 0e 09 46 	lsl	r6,r6,lr
800120de:	0c 4a       	or	r10,r6
800120e0:	2f ed       	sub	sp,-8
800120e2:	d8 32       	popm	r0-r7,pc
800120e4:	f0 01 11 20 	rsub	r1,r8,32
800120e8:	f4 01 0a 4b 	lsr	r11,r10,r1
800120ec:	f8 08 09 4c 	lsl	r12,r12,r8
800120f0:	ec 08 09 49 	lsl	r9,r6,r8
800120f4:	ec 01 0a 41 	lsr	r1,r6,r1
800120f8:	f7 e9 10 09 	or	r9,r11,r9
800120fc:	f8 03 16 10 	lsr	r3,r12,0x10
80012100:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80012104:	e2 03 0d 00 	divu	r0,r1,r3
80012108:	f2 0b 16 10 	lsr	r11,r9,0x10
8001210c:	ea 00 02 4e 	mul	lr,r5,r0
80012110:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80012114:	16 3e       	cp.w	lr,r11
80012116:	e0 88 00 06 	brls	80012122 <__avr32_umod64+0x220>
8001211a:	18 0b       	add	r11,r12
8001211c:	16 3c       	cp.w	r12,r11
8001211e:	e0 88 00 27 	brls	8001216c <__avr32_umod64+0x26a>
80012122:	f6 0e 01 01 	sub	r1,r11,lr
80012126:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8001212a:	e2 03 0d 00 	divu	r0,r1,r3
8001212e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80012132:	ea 00 02 4b 	mul	r11,r5,r0
80012136:	12 3b       	cp.w	r11,r9
80012138:	e0 88 00 09 	brls	8001214a <__avr32_umod64+0x248>
8001213c:	18 09       	add	r9,r12
8001213e:	12 3c       	cp.w	r12,r9
80012140:	e0 8b 00 05 	brhi	8001214a <__avr32_umod64+0x248>
80012144:	12 3b       	cp.w	r11,r9
80012146:	f3 dc eb 09 	addhi	r9,r9,r12
8001214a:	f2 0b 01 0b 	sub	r11,r9,r11
8001214e:	f4 08 09 4e 	lsl	lr,r10,r8
80012152:	c4 db       	rjmp	80011fec <__avr32_umod64+0xea>
80012154:	0c 3c       	cp.w	r12,r6
80012156:	f7 ba 0b 01 	subhi	r10,1
8001215a:	ed d8 eb 06 	addhi	r6,r6,r8
8001215e:	ca 3b       	rjmp	800120a4 <__avr32_umod64+0x1a2>
80012160:	06 35       	cp.w	r5,r3
80012162:	f7 bb 0b 01 	subhi	r11,1
80012166:	e7 d8 eb 03 	addhi	r3,r3,r8
8001216a:	c8 bb       	rjmp	80012080 <__avr32_umod64+0x17e>
8001216c:	16 3e       	cp.w	lr,r11
8001216e:	f7 dc eb 0b 	addhi	r11,r11,r12
80012172:	cd 8b       	rjmp	80012122 <__avr32_umod64+0x220>

Disassembly of section .exception:

80012200 <_evba>:
80012200:	c0 08       	rjmp	80012200 <_evba>
	...

80012204 <_handle_TLB_Multiple_Hit>:
80012204:	c0 08       	rjmp	80012204 <_handle_TLB_Multiple_Hit>
	...

80012208 <_handle_Bus_Error_Data_Fetch>:
80012208:	c0 08       	rjmp	80012208 <_handle_Bus_Error_Data_Fetch>
	...

8001220c <_handle_Bus_Error_Instruction_Fetch>:
8001220c:	c0 08       	rjmp	8001220c <_handle_Bus_Error_Instruction_Fetch>
	...

80012210 <_handle_NMI>:
80012210:	c0 08       	rjmp	80012210 <_handle_NMI>
	...

80012214 <_handle_Instruction_Address>:
80012214:	c0 08       	rjmp	80012214 <_handle_Instruction_Address>
	...

80012218 <_handle_ITLB_Protection>:
80012218:	c0 08       	rjmp	80012218 <_handle_ITLB_Protection>
	...

8001221c <_handle_Breakpoint>:
8001221c:	c0 08       	rjmp	8001221c <_handle_Breakpoint>
	...

80012220 <_handle_Illegal_Opcode>:
80012220:	c0 08       	rjmp	80012220 <_handle_Illegal_Opcode>
	...

80012224 <_handle_Unimplemented_Instruction>:
80012224:	c0 08       	rjmp	80012224 <_handle_Unimplemented_Instruction>
	...

80012228 <_handle_Privilege_Violation>:
80012228:	c0 08       	rjmp	80012228 <_handle_Privilege_Violation>
	...

8001222c <_handle_Floating_Point>:
8001222c:	c0 08       	rjmp	8001222c <_handle_Floating_Point>
	...

80012230 <_handle_Coprocessor_Absent>:
80012230:	c0 08       	rjmp	80012230 <_handle_Coprocessor_Absent>
	...

80012234 <_handle_Data_Address_Read>:
80012234:	c0 08       	rjmp	80012234 <_handle_Data_Address_Read>
	...

80012238 <_handle_Data_Address_Write>:
80012238:	c0 08       	rjmp	80012238 <_handle_Data_Address_Write>
	...

8001223c <_handle_DTLB_Protection_Read>:
8001223c:	c0 08       	rjmp	8001223c <_handle_DTLB_Protection_Read>
	...

80012240 <_handle_DTLB_Protection_Write>:
80012240:	c0 08       	rjmp	80012240 <_handle_DTLB_Protection_Write>
	...

80012244 <_handle_DTLB_Modified>:
80012244:	c0 08       	rjmp	80012244 <_handle_DTLB_Modified>
	...

80012250 <_handle_ITLB_Miss>:
80012250:	c0 08       	rjmp	80012250 <_handle_ITLB_Miss>
	...

80012260 <_handle_DTLB_Miss_Read>:
80012260:	c0 08       	rjmp	80012260 <_handle_DTLB_Miss_Read>
	...

80012270 <_handle_DTLB_Miss_Write>:
80012270:	c0 08       	rjmp	80012270 <_handle_DTLB_Miss_Write>
	...

80012300 <_handle_Supervisor_Call>:
80012300:	c0 08       	rjmp	80012300 <_handle_Supervisor_Call>
80012302:	d7 03       	nop

80012304 <_int0>:
80012304:	30 0c       	mov	r12,0
80012306:	fe b0 88 09 	rcall	80003318 <_get_interrupt_handler>
8001230a:	58 0c       	cp.w	r12,0
8001230c:	f8 0f 17 10 	movne	pc,r12
80012310:	d6 03       	rete

80012312 <_int1>:
80012312:	30 1c       	mov	r12,1
80012314:	fe b0 88 02 	rcall	80003318 <_get_interrupt_handler>
80012318:	58 0c       	cp.w	r12,0
8001231a:	f8 0f 17 10 	movne	pc,r12
8001231e:	d6 03       	rete

80012320 <_int2>:
80012320:	30 2c       	mov	r12,2
80012322:	fe b0 87 fb 	rcall	80003318 <_get_interrupt_handler>
80012326:	58 0c       	cp.w	r12,0
80012328:	f8 0f 17 10 	movne	pc,r12
8001232c:	d6 03       	rete

8001232e <_int3>:
8001232e:	30 3c       	mov	r12,3
80012330:	fe b0 87 f4 	rcall	80003318 <_get_interrupt_handler>
80012334:	58 0c       	cp.w	r12,0
80012336:	f8 0f 17 10 	movne	pc,r12
8001233a:	d6 03       	rete
8001233c:	d7 03       	nop
8001233e:	d7 03       	nop
80012340:	d7 03       	nop
80012342:	d7 03       	nop
80012344:	d7 03       	nop
80012346:	d7 03       	nop
80012348:	d7 03       	nop
8001234a:	d7 03       	nop
8001234c:	d7 03       	nop
8001234e:	d7 03       	nop
80012350:	d7 03       	nop
80012352:	d7 03       	nop
80012354:	d7 03       	nop
80012356:	d7 03       	nop
80012358:	d7 03       	nop
8001235a:	d7 03       	nop
8001235c:	d7 03       	nop
8001235e:	d7 03       	nop
80012360:	d7 03       	nop
80012362:	d7 03       	nop
80012364:	d7 03       	nop
80012366:	d7 03       	nop
80012368:	d7 03       	nop
8001236a:	d7 03       	nop
8001236c:	d7 03       	nop
8001236e:	d7 03       	nop
80012370:	d7 03       	nop
80012372:	d7 03       	nop
80012374:	d7 03       	nop
80012376:	d7 03       	nop
80012378:	d7 03       	nop
8001237a:	d7 03       	nop
8001237c:	d7 03       	nop
8001237e:	d7 03       	nop
80012380:	d7 03       	nop
80012382:	d7 03       	nop
80012384:	d7 03       	nop
80012386:	d7 03       	nop
80012388:	d7 03       	nop
8001238a:	d7 03       	nop
8001238c:	d7 03       	nop
8001238e:	d7 03       	nop
80012390:	d7 03       	nop
80012392:	d7 03       	nop
80012394:	d7 03       	nop
80012396:	d7 03       	nop
80012398:	d7 03       	nop
8001239a:	d7 03       	nop
8001239c:	d7 03       	nop
8001239e:	d7 03       	nop
800123a0:	d7 03       	nop
800123a2:	d7 03       	nop
800123a4:	d7 03       	nop
800123a6:	d7 03       	nop
800123a8:	d7 03       	nop
800123aa:	d7 03       	nop
800123ac:	d7 03       	nop
800123ae:	d7 03       	nop
800123b0:	d7 03       	nop
800123b2:	d7 03       	nop
800123b4:	d7 03       	nop
800123b6:	d7 03       	nop
800123b8:	d7 03       	nop
800123ba:	d7 03       	nop
800123bc:	d7 03       	nop
800123be:	d7 03       	nop
800123c0:	d7 03       	nop
800123c2:	d7 03       	nop
800123c4:	d7 03       	nop
800123c6:	d7 03       	nop
800123c8:	d7 03       	nop
800123ca:	d7 03       	nop
800123cc:	d7 03       	nop
800123ce:	d7 03       	nop
800123d0:	d7 03       	nop
800123d2:	d7 03       	nop
800123d4:	d7 03       	nop
800123d6:	d7 03       	nop
800123d8:	d7 03       	nop
800123da:	d7 03       	nop
800123dc:	d7 03       	nop
800123de:	d7 03       	nop
800123e0:	d7 03       	nop
800123e2:	d7 03       	nop
800123e4:	d7 03       	nop
800123e6:	d7 03       	nop
800123e8:	d7 03       	nop
800123ea:	d7 03       	nop
800123ec:	d7 03       	nop
800123ee:	d7 03       	nop
800123f0:	d7 03       	nop
800123f2:	d7 03       	nop
800123f4:	d7 03       	nop
800123f6:	d7 03       	nop
800123f8:	d7 03       	nop
800123fa:	d7 03       	nop
800123fc:	d7 03       	nop
800123fe:	d7 03       	nop
