
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c28  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80007e00  80007e00  00008200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006c8  80008000  80008000  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  00000004  800086c8  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007b8  00000010  800086d4  00008c10  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001320  00000000  00000000  00008c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00003ba4  00000000  00000000  00009f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023f1c  00000000  00000000  0000db04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003fa0  00000000  00000000  00031a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001568e  00000000  00000000  000359c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000349c  00000000  00000000  0004b050  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007e9b  00000000  00000000  0004e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008a34  00000000  00000000  00056387  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 027019fc  00000000  00000000  0005edbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 18 .debug_ranges 00001458  00000000  00000000  027607b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b2 e8 	sub	pc,pc,-19736

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	04 34       	cp.w	r4,r2
8000210c:	00 00       	add	r0,r0
8000210e:	04 32       	cp.w	r2,r2
80002110:	00 00       	add	r0,r0
80002112:	04 20       	rsub	r0,r2
80002114:	00 00       	add	r0,r0
80002116:	04 28       	rsub	r8,r2
80002118:	00 00       	add	r0,r0
8000211a:	04 2c       	rsub	r12,r2
8000211c:	00 00       	add	r0,r0
8000211e:	04 2a       	rsub	r10,r2

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	3a c6       	mov	r6,-84
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	3a e2       	mov	r2,-82

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	39 96       	mov	r6,-103
800021a4:	00 00       	add	r0,r0
800021a6:	04 44       	or	r4,r2
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	39 e2       	mov	r2,-98
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	00 10       	sub	r0,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	00 10       	sub	r0,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	3a c6       	mov	r6,-84
800022ac:	00 00       	add	r0,r0
800022ae:	04 44       	or	r4,r2
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 96       	mov	r6,-103
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	04 44       	or	r4,r2
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	39 e2       	mov	r2,-98

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	00 28       	rsub	r8,r0
80002364:	00 00       	add	r0,r0
80002366:	04 44       	or	r4,r2
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	3a c6       	mov	r6,-84
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	39 96       	mov	r6,-103
800024a0:	00 00       	add	r0,r0
800024a2:	04 32       	cp.w	r2,r2
800024a4:	00 00       	add	r0,r0
800024a6:	00 10       	sub	r0,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	04 44       	or	r4,r2
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	39 e2       	mov	r2,-98
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	3a c6       	mov	r6,-84
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	39 96       	mov	r6,-103
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	04 44       	or	r4,r2
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	39 e2       	mov	r2,-98
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	39 96       	mov	r6,-103
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	04 44       	or	r4,r2
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	39 e2       	mov	r2,-98
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	39 96       	mov	r6,-103
80002730:	00 00       	add	r0,r0
80002732:	04 32       	cp.w	r2,r2
80002734:	00 00       	add	r0,r0
80002736:	00 10       	sub	r0,r0
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	04 44       	or	r4,r2
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	39 e2       	mov	r2,-98
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3a c6       	mov	r6,-84
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	3a e2       	mov	r2,-82

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	39 96       	mov	r6,-103
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	04 44       	or	r4,r2
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	39 e2       	mov	r2,-98
80002834:	00 00       	add	r0,r0
80002836:	00 28       	rsub	r8,r0
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	3a c6       	mov	r6,-84
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	3a e2       	mov	r2,-82

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	00 14       	sub	r4,r0
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 24       	rsub	r4,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	3a 08       	mov	r8,-96
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	39 96       	mov	r6,-103
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	3a c6       	mov	r6,-84
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	39 e2       	mov	r2,-98
80002ac4:	00 00       	add	r0,r0
80002ac6:	00 28       	rsub	r8,r0
80002ac8:	00 00       	add	r0,r0
80002aca:	04 32       	cp.w	r2,r2
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	04 44       	or	r4,r2
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	04 34       	cp.w	r4,r2
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	00 28       	rsub	r8,r0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	00 24       	rsub	r4,r0
80002b3c:	00 00       	add	r0,r0
80002b3e:	00 14       	sub	r4,r0
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	00 28       	rsub	r8,r0
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	00 28       	rsub	r8,r0
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	00 28       	rsub	r8,r0
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	00 28       	rsub	r8,r0
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	04 2c       	rsub	r12,r2

80002cd0 <acifa_is_aca_ready>:
#include "compiler.h"
#include "acifa.h"

static bool acifa_is_aca_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACARDY_MASK) != 0;
80002cd0:	79 0c       	ld.w	r12,r12[0x40]
}
80002cd2:	f9 dc c3 01 	bfextu	r12,r12,0x18,0x1
80002cd6:	5e fc       	retal	r12

80002cd8 <acifa_is_acb_ready>:

static bool acifa_is_acb_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBRDY_MASK) != 0;
80002cd8:	79 0c       	ld.w	r12,r12[0x40]
}
80002cda:	f9 dc c3 21 	bfextu	r12,r12,0x19,0x1
80002cde:	5e fc       	retal	r12

80002ce0 <acifa_configure>:
void acifa_configure(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel,
		uint8_t input_p,
		uint8_t input_n,
		uint32_t pb_hz)
{
80002ce0:	d4 01       	pushm	lr
	Assert( acifa != NULL );
	if (comp_sel == ACIFA_COMP_SELA) {
80002ce2:	30 1e       	mov	lr,1
80002ce4:	fc 0b 18 00 	cp.b	r11,lr
80002ce8:	c0 a1       	brne	80002cfc <acifa_configure+0x1c>
		acifa->confa
80002cea:	b1 69       	lsl	r9,0x10
80002cec:	e6 19 00 0f 	andh	r9,0xf,COH
80002cf0:	a9 6a       	lsl	r10,0x8
80002cf2:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002cf6:	14 49       	or	r9,r10
80002cf8:	99 09       	st.w	r12[0x0],r9
80002cfa:	c0 98       	rjmp	80002d0c <acifa_configure+0x2c>
				AVR32_ACIFA_CONFA_INSELP_MASK) |
				((input_n <<
				AVR32_ACIFA_CONFA_INSELN_OFFSET) &
				AVR32_ACIFA_CONFA_INSELN_MASK);
	} else {
		acifa->confb
80002cfc:	b1 69       	lsl	r9,0x10
80002cfe:	e6 19 00 0f 	andh	r9,0xf,COH
80002d02:	a9 6a       	lsl	r10,0x8
80002d04:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002d08:	14 49       	or	r9,r10
80002d0a:	99 19       	st.w	r12[0x4],r9
				AVR32_ACIFA_CONFB_INSELN_OFFSET) &
				AVR32_ACIFA_CONFB_INSELN_MASK);
	}

	/* Startup Time of up to 10us max. */
	acifa->sut = (pb_hz / 100000);
80002d0c:	f0 09 16 05 	lsr	r9,r8,0x5
80002d10:	e0 6a 5a c5 	mov	r10,23237
80002d14:	ea 1a 0a 7c 	orh	r10,0xa7c
80002d18:	f2 0a 06 48 	mulu.d	r8,r9,r10
80002d1c:	f2 08 16 07 	lsr	r8,r9,0x7
80002d20:	99 98       	st.w	r12[0x24],r8
}
80002d22:	d8 02       	popm	pc

80002d24 <acifa_configure_hysteresis>:
		uint8_t level)
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
80002d24:	30 18       	mov	r8,1
80002d26:	f0 0b 18 00 	cp.b	r11,r8
80002d2a:	c0 81       	brne	80002d3a <acifa_configure_hysteresis+0x16>
		acifa->confa
			|= ((level <<
80002d2c:	78 08       	ld.w	r8,r12[0x0]
80002d2e:	b9 6a       	lsl	r10,0x18
80002d30:	e6 1a 03 00 	andh	r10,0x300,COH
80002d34:	10 4a       	or	r10,r8
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
		acifa->confa
80002d36:	99 0a       	st.w	r12[0x0],r10
80002d38:	5e fc       	retal	r12
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
			|= ((level <<
80002d3a:	78 18       	ld.w	r8,r12[0x4]
80002d3c:	b9 6a       	lsl	r10,0x18
80002d3e:	e6 1a 03 00 	andh	r10,0x300,COH
80002d42:	10 4a       	or	r10,r8
		acifa->confa
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
80002d44:	99 1a       	st.w	r12[0x4],r10
80002d46:	5e fc       	retal	r12

80002d48 <acifa_start>:
 * \param *acifa        Base address of the ACIFA
 * \param comp_sel      Comparator Selection
 */
void acifa_start(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	18 97       	mov	r7,r12
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002d4e:	30 18       	mov	r8,1
80002d50:	f0 0b 18 00 	cp.b	r11,r8
80002d54:	c0 91       	brne	80002d66 <acifa_start+0x1e>
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d56:	30 98       	mov	r8,9
80002d58:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0f 	mcall	80002d98 <acifa_start+0x50>
80002d60:	cf d0       	breq	80002d5a <acifa_start+0x12>
80002d62:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACA */
		}
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002d66:	30 28       	mov	r8,2
80002d68:	f0 0b 18 00 	cp.b	r11,r8
80002d6c:	c0 91       	brne	80002d7e <acifa_start+0x36>
		acifa->en = (AVR32_ACIFA_EN_ACBEN_MASK) |
80002d6e:	31 28       	mov	r8,18
80002d70:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_acb_ready(acifa)) {
80002d72:	0e 9c       	mov	r12,r7
80002d74:	f0 1f 00 0a 	mcall	80002d9c <acifa_start+0x54>
80002d78:	cf d0       	breq	80002d72 <acifa_start+0x2a>
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACB */
		}
	} else {
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d7e:	31 b8       	mov	r8,27
80002d80:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK) |
				(AVR32_ACIFA_EN_ACBEN_MASK) |
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d82:	0e 9c       	mov	r12,r7
80002d84:	f0 1f 00 05 	mcall	80002d98 <acifa_start+0x50>
80002d88:	cf d0       	breq	80002d82 <acifa_start+0x3a>
			/* Wait for ACA */
		}
		while (!acifa_is_acb_ready(acifa)) {
80002d8a:	0e 9c       	mov	r12,r7
80002d8c:	f0 1f 00 04 	mcall	80002d9c <acifa_start+0x54>
80002d90:	cf d0       	breq	80002d8a <acifa_start+0x42>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c d8       	sub	r8,-51

80002da0 <acifa_is_aca_inp_higher>:
 *  \retval true when ACA Input P is higher than Input N
 *  \retval false when ACA Input P is Lower than Input N
 */
bool acifa_is_aca_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACACS_MASK) != 0;
80002da0:	79 0c       	ld.w	r12,r12[0x40]
}
80002da2:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
80002da6:	5e fc       	retal	r12

80002da8 <acifa_is_acb_inp_higher>:
 *  \retval true when ACB Input P is higher than Input N
 *  \retval false when ACB Input P is Lower than Input N
 */
bool acifa_is_acb_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBCS_MASK) != 0;
80002da8:	79 0c       	ld.w	r12,r12[0x40]
}
80002daa:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80002dae:	5e fc       	retal	r12

80002db0 <acifa_clear_flags>:
 * \param acifa         Base address of the ACIFA
 * \param flag_mask     Flag Mask Value
 */
void acifa_clear_flags(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	acifa->scr = flag_mask;
80002db0:	f9 4b 00 44 	st.w	r12[68],r11
}
80002db4:	5e fc       	retal	r12

80002db6 <acifa_enable_interrupt_toggle>:
void acifa_enable_interrupt_toggle(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002db6:	30 18       	mov	r8,1
80002db8:	f0 0b 18 00 	cp.b	r11,r8
80002dbc:	c0 71       	brne	80002dca <acifa_enable_interrupt_toggle+0x14>
		acifa->CONFA.is = 2;
80002dbe:	78 08       	ld.w	r8,r12[0x0]
80002dc0:	30 29       	mov	r9,2
80002dc2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dc6:	99 08       	st.w	r12[0x0],r8
80002dc8:	5e fc       	retal	r12
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002dca:	30 28       	mov	r8,2
80002dcc:	f0 0b 18 00 	cp.b	r11,r8
80002dd0:	5e 1c       	retne	r12
		acifa->CONFB.is = 2;
80002dd2:	78 18       	ld.w	r8,r12[0x4]
80002dd4:	30 29       	mov	r9,2
80002dd6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dda:	99 18       	st.w	r12[0x4],r8
80002ddc:	5e fc       	retal	r12

80002dde <acifa_enable_interrupt>:
 */
void acifa_enable_interrupt(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	Assert( acifa != NULL );

	acifa->ier = flag_mask;
80002dde:	99 ab       	st.w	r12[0x28],r11
}
80002de0:	5e fc       	retal	r12

80002de2 <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002de2:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002de6:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002dea:	18 38       	cp.w	r8,r12
80002dec:	e0 88 00 06 	brls	80002df8 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002df0:	e1 b8 00 42 	mfsr	r8,0x108
80002df4:	10 3c       	cp.w	r12,r8
80002df6:	cf d3       	brcs	80002df0 <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002df8:	e1 b8 00 42 	mfsr	r8,0x108
80002dfc:	10 3c       	cp.w	r12,r8
80002dfe:	fe 9b ff fd 	brhi	80002df8 <sdramc_ck_delay+0x16>
}
80002e02:	5e fc       	retal	r12

80002e04 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002e04:	d4 31       	pushm	r0-r7,lr
80002e06:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002e08:	ee 78 42 3f 	mov	r8,999999
80002e0c:	f8 08 00 09 	add	r9,r12,r8
80002e10:	e0 60 de 83 	mov	r0,56963
80002e14:	ea 10 43 1b 	orh	r0,0x431b
80002e18:	f2 00 06 48 	mulu.d	r8,r9,r0
80002e1c:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002e20:	32 5b       	mov	r11,37
80002e22:	4c 9c       	lddpc	r12,80002f44 <sdramc_init+0x140>
80002e24:	f0 1f 00 49 	mcall	80002f48 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002e28:	fe 68 20 00 	mov	r8,-122880
80002e2c:	f0 f9 01 28 	ld.w	r9,r8[296]
80002e30:	a1 b9       	sbr	r9,0x1
80002e32:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002e36:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002e3a:	ec 08 15 04 	lsl	r8,r6,0x4
80002e3e:	0c 18       	sub	r8,r6
80002e40:	f0 c3 fc 19 	sub	r3,r8,-999
80002e44:	e0 65 4d d3 	mov	r5,19923
80002e48:	ea 15 10 62 	orh	r5,0x1062
80002e4c:	e6 05 06 42 	mulu.d	r2,r3,r5
80002e50:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002e52:	ec 02 15 05 	lsl	r2,r6,0x5
80002e56:	0c 02       	add	r2,r6
80002e58:	a1 72       	lsl	r2,0x1
80002e5a:	e4 06 00 0b 	add	r11,r2,r6
80002e5e:	f6 cb fc 19 	sub	r11,r11,-999
80002e62:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002e66:	f6 0a 16 06 	lsr	r10,r11,0x6
80002e6a:	bd 6a       	lsl	r10,0x1c
80002e6c:	e8 1a 00 f0 	orl	r10,0xf0
80002e70:	e6 09 15 08 	lsl	r9,r3,0x8
80002e74:	e2 19 0f 00 	andl	r9,0xf00,COH
80002e78:	12 4a       	or	r10,r9
80002e7a:	f0 09 15 02 	lsl	r9,r8,0x2
80002e7e:	f2 c9 fc 19 	sub	r9,r9,-999
80002e82:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e86:	a7 69       	lsl	r9,0x6
80002e88:	e2 19 f0 00 	andl	r9,0xf000,COH
80002e8c:	f5 e9 10 08 	or	r8,r10,r9
80002e90:	e6 09 15 10 	lsl	r9,r3,0x10
80002e94:	e6 19 00 0f 	andh	r9,0xf,COH
80002e98:	12 48       	or	r8,r9
80002e9a:	e6 09 15 14 	lsl	r9,r3,0x14
80002e9e:	e6 19 00 f0 	andh	r9,0xf0,COH
80002ea2:	12 48       	or	r8,r9
80002ea4:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002ea8:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002eac:	f6 cb fc 19 	sub	r11,r11,-999
80002eb0:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002eb4:	f6 09 15 12 	lsl	r9,r11,0x12
80002eb8:	e6 19 0f 00 	andh	r9,0xf00,COH
80002ebc:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002ebe:	fe 67 2c 00 	mov	r7,-119808
80002ec2:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002ec4:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002ec6:	30 18       	mov	r8,1
80002ec8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eca:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ecc:	fc 14 d0 00 	movh	r4,0xd000
80002ed0:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002ed2:	ec 0c 10 64 	mul	r12,r6,100
80002ed6:	f0 1f 00 1e 	mcall	80002f4c <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002eda:	30 28       	mov	r8,2
80002edc:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ede:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ee0:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002ee2:	06 9c       	mov	r12,r3
80002ee4:	f0 1f 00 1a 	mcall	80002f4c <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002ee8:	30 48       	mov	r8,4
80002eea:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eec:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002eee:	e4 c3 fc 19 	sub	r3,r2,-999
80002ef2:	e6 05 06 42 	mulu.d	r2,r3,r5
80002ef6:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002ef8:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002efa:	06 9c       	mov	r12,r3
80002efc:	f0 1f 00 14 	mcall	80002f4c <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002f00:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002f02:	06 9c       	mov	r12,r3
80002f04:	f0 1f 00 12 	mcall	80002f4c <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002f08:	30 38       	mov	r8,3
80002f0a:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f0c:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f0e:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002f10:	ec 09 15 01 	lsl	r9,r6,0x1
80002f14:	f2 c9 fc 19 	sub	r9,r9,-999
80002f18:	f2 05 06 48 	mulu.d	r8,r9,r5
80002f1c:	f2 0c 16 06 	lsr	r12,r9,0x6
80002f20:	f0 1f 00 0b 	mcall	80002f4c <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002f24:	30 08       	mov	r8,0
80002f26:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f28:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f2a:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002f2c:	e2 00 06 40 	mulu.d	r0,r1,r0
80002f30:	b3 81       	lsr	r1,0x12
80002f32:	e0 68 1e 84 	mov	r8,7812
80002f36:	b1 31       	mul	r1,r8
80002f38:	e2 05 06 44 	mulu.d	r4,r1,r5
80002f3c:	a7 85       	lsr	r5,0x6
80002f3e:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002f40:	6e 18       	ld.w	r8,r7[0x4]
}
80002f42:	d8 32       	popm	r0-r7,pc
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	80 00       	ld.sh	r0,r0[0x0]
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	31 c4       	mov	r4,28
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2d e2       	sub	r2,-34

80002f50 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002f50:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002f54:	58 0a       	cp.w	r10,0
80002f56:	c6 30       	breq	8000301c <eic_init+0xcc>
80002f58:	30 08       	mov	r8,0
80002f5a:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f5c:	30 19       	mov	r9,1
80002f5e:	30 1e       	mov	lr,1
80002f60:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002f64:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002f68:	11 96       	ld.ub	r6,r8[0x1]
80002f6a:	f2 06 18 00 	cp.b	r6,r9
80002f6e:	c0 71       	brne	80002f7c <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002f70:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f72:	11 86       	ld.ub	r6,r8[0x0]
80002f74:	fc 06 09 46 	lsl	r6,lr,r6
80002f78:	0a 46       	or	r6,r5
80002f7a:	c0 78       	rjmp	80002f88 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002f7c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f7e:	11 86       	ld.ub	r6,r8[0x0]
80002f80:	fc 06 09 46 	lsl	r6,lr,r6
80002f84:	5c d6       	com	r6
80002f86:	0a 66       	and	r6,r5
80002f88:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f8a:	11 a6       	ld.ub	r6,r8[0x2]
80002f8c:	f2 06 18 00 	cp.b	r6,r9
80002f90:	c0 71       	brne	80002f9e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002f92:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f94:	11 86       	ld.ub	r6,r8[0x0]
80002f96:	fc 06 09 46 	lsl	r6,lr,r6
80002f9a:	0a 46       	or	r6,r5
80002f9c:	c0 78       	rjmp	80002faa <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002f9e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002fa0:	11 86       	ld.ub	r6,r8[0x0]
80002fa2:	fc 06 09 46 	lsl	r6,lr,r6
80002fa6:	5c d6       	com	r6
80002fa8:	0a 66       	and	r6,r5
80002faa:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fac:	11 b6       	ld.ub	r6,r8[0x3]
80002fae:	f2 06 18 00 	cp.b	r6,r9
80002fb2:	c0 71       	brne	80002fc0 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002fb4:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fb6:	11 86       	ld.ub	r6,r8[0x0]
80002fb8:	fc 06 09 46 	lsl	r6,lr,r6
80002fbc:	0a 46       	or	r6,r5
80002fbe:	c0 78       	rjmp	80002fcc <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002fc0:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fc2:	11 86       	ld.ub	r6,r8[0x0]
80002fc4:	fc 06 09 46 	lsl	r6,lr,r6
80002fc8:	5c d6       	com	r6
80002fca:	0a 66       	and	r6,r5
80002fcc:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fce:	11 c6       	ld.ub	r6,r8[0x4]
80002fd0:	f2 06 18 00 	cp.b	r6,r9
80002fd4:	c0 71       	brne	80002fe2 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002fd6:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fd8:	11 86       	ld.ub	r6,r8[0x0]
80002fda:	fc 06 09 46 	lsl	r6,lr,r6
80002fde:	0a 46       	or	r6,r5
80002fe0:	c0 78       	rjmp	80002fee <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002fe2:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fe4:	11 86       	ld.ub	r6,r8[0x0]
80002fe6:	fc 06 09 46 	lsl	r6,lr,r6
80002fea:	5c d6       	com	r6
80002fec:	0a 66       	and	r6,r5
80002fee:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ff0:	11 d6       	ld.ub	r6,r8[0x5]
80002ff2:	f2 06 18 00 	cp.b	r6,r9
80002ff6:	c0 71       	brne	80003004 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002ff8:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ffa:	11 88       	ld.ub	r8,r8[0x0]
80002ffc:	fc 08 09 48 	lsl	r8,lr,r8
80003000:	0c 48       	or	r8,r6
80003002:	c0 78       	rjmp	80003010 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003004:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003006:	11 88       	ld.ub	r8,r8[0x0]
80003008:	fc 08 09 48 	lsl	r8,lr,r8
8000300c:	5c d8       	com	r8
8000300e:	0c 68       	and	r8,r6
80003010:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80003012:	2f f7       	sub	r7,-1
80003014:	0e 98       	mov	r8,r7
80003016:	0e 3a       	cp.w	r10,r7
80003018:	fe 9b ff a4 	brhi	80002f60 <eic_init+0x10>
8000301c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003020 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80003020:	30 18       	mov	r8,1
80003022:	f0 0b 09 48 	lsl	r8,r8,r11
80003026:	99 c8       	st.w	r12[0x30],r8
}
80003028:	5e fc       	retal	r12

8000302a <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
8000302a:	30 18       	mov	r8,1
8000302c:	f0 0b 09 48 	lsl	r8,r8,r11
80003030:	99 08       	st.w	r12[0x0],r8
}
80003032:	5e fc       	retal	r12

80003034 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003034:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003038:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
8000303a:	30 19       	mov	r9,1
8000303c:	f2 0b 09 4b 	lsl	r11,r9,r11
80003040:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80003042:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003044:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80003048:	5e fc       	retal	r12

8000304a <eic_disable_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000304a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000304e:	d3 03       	ssrf	0x10

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->idr = 1 << line_number;
80003050:	30 19       	mov	r9,1
80003052:	f2 0b 09 4b 	lsl	r11,r9,r11
80003056:	99 1b       	st.w	r12[0x4],r11
	eic->imr;
80003058:	78 29       	ld.w	r9,r12[0x8]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000305a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
8000305e:	5e fc       	retal	r12

80003060 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003060:	fe 68 00 00 	mov	r8,-131072
80003064:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003066:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000306a:	91 09       	st.w	r8[0x0],r9
}
8000306c:	5e fc       	retal	r12

8000306e <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000306e:	fe 68 00 00 	mov	r8,-131072
80003072:	70 2c       	ld.w	r12,r8[0x8]
}
80003074:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003078:	5e fc       	retal	r12
8000307a:	d7 03       	nop

8000307c <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
8000307c:	d4 01       	pushm	lr
	while (!flashc_is_ready());
8000307e:	f0 1f 00 03 	mcall	80003088 <flashc_default_wait_until_ready+0xc>
80003082:	cf e0       	breq	8000307e <flashc_default_wait_until_ready+0x2>
}
80003084:	d8 02       	popm	pc
80003086:	00 00       	add	r0,r0
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 6e       	mov	lr,6

8000308c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000308c:	eb cd 40 c0 	pushm	r6-r7,lr
80003090:	18 96       	mov	r6,r12
80003092:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003094:	48 e8       	lddpc	r8,800030cc <flashc_issue_command+0x40>
80003096:	70 08       	ld.w	r8,r8[0x0]
80003098:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000309a:	fe 68 00 00 	mov	r8,-131072
8000309e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800030a0:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800030a4:	58 07       	cp.w	r7,0
800030a6:	c0 35       	brlt	800030ac <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800030a8:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800030ac:	3a 59       	mov	r9,-91
800030ae:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800030b2:	fe 69 00 00 	mov	r9,-131072
800030b6:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800030b8:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800030ba:	e2 19 00 0c 	andl	r9,0xc,COH
800030be:	48 58       	lddpc	r8,800030d0 <flashc_issue_command+0x44>
800030c0:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800030c2:	48 38       	lddpc	r8,800030cc <flashc_issue_command+0x40>
800030c4:	70 08       	ld.w	r8,r8[0x0]
800030c6:	5d 18       	icall	r8
}
800030c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030cc:	00 00       	add	r0,r0
800030ce:	00 08       	add	r8,r0
800030d0:	00 00       	add	r0,r0
800030d2:	00 2c       	rsub	r12,r0

800030d4 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800030da:	e0 68 8a 40 	mov	r8,35392
800030de:	ea 18 01 f7 	orh	r8,0x1f7
800030e2:	10 3c       	cp.w	r12,r8
800030e4:	e0 88 00 18 	brls	80003114 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
800030e8:	30 1c       	mov	r12,1
800030ea:	f0 1f 00 10 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800030ee:	e0 68 14 80 	mov	r8,5248
800030f2:	ea 18 03 ef 	orh	r8,0x3ef
800030f6:	10 37       	cp.w	r7,r8
800030f8:	e0 8b 00 08 	brhi	80003108 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800030fc:	3f fb       	mov	r11,-1
800030fe:	31 1c       	mov	r12,17
80003100:	f0 1f 00 0b 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80003108:	3f fb       	mov	r11,-1
8000310a:	31 0c       	mov	r12,16
8000310c:	f0 1f 00 08 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003110:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80003114:	30 0c       	mov	r12,0
80003116:	f0 1f 00 05 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8000311a:	3f fb       	mov	r11,-1
8000311c:	31 1c       	mov	r12,17
8000311e:	f0 1f 00 04 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003122:	e3 cd 80 80 	ldm	sp++,r7,pc
80003126:	00 00       	add	r0,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	30 60       	mov	r0,6
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	30 8c       	mov	r12,8

80003130 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003130:	f8 08 16 05 	lsr	r8,r12,0x5
80003134:	a9 78       	lsl	r8,0x9
80003136:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
8000313a:	58 7b       	cp.w	r11,7
8000313c:	e0 8b 00 05 	brhi	80003146 <gpio_enable_module_pin+0x16>
80003140:	4a 09       	lddpc	r9,800031c0 <gpio_enable_module_pin+0x90>
80003142:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80003146:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003148:	30 19       	mov	r9,1
8000314a:	f2 0c 09 49 	lsl	r9,r9,r12
8000314e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003150:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003152:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003154:	c3 18       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003156:	30 19       	mov	r9,1
80003158:	f2 0c 09 49 	lsl	r9,r9,r12
8000315c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000315e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003160:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003162:	c2 a8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003164:	30 19       	mov	r9,1
80003166:	f2 0c 09 49 	lsl	r9,r9,r12
8000316a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000316c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000316e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003170:	c2 38       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003172:	30 19       	mov	r9,1
80003174:	f2 0c 09 49 	lsl	r9,r9,r12
80003178:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000317a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000317c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000317e:	c1 c8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003180:	30 19       	mov	r9,1
80003182:	f2 0c 09 49 	lsl	r9,r9,r12
80003186:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003188:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000318a:	91 d9       	st.w	r8[0x34],r9
		break;
8000318c:	c1 58       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000318e:	30 19       	mov	r9,1
80003190:	f2 0c 09 49 	lsl	r9,r9,r12
80003194:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003196:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003198:	91 d9       	st.w	r8[0x34],r9
		break;
8000319a:	c0 e8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000319c:	30 19       	mov	r9,1
8000319e:	f2 0c 09 49 	lsl	r9,r9,r12
800031a2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031a4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031a6:	91 d9       	st.w	r8[0x34],r9
		break;
800031a8:	c0 78       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031aa:	30 19       	mov	r9,1
800031ac:	f2 0c 09 49 	lsl	r9,r9,r12
800031b0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031b2:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031b4:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800031b6:	30 19       	mov	r9,1
800031b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800031bc:	91 2c       	st.w	r8[0x8],r12
800031be:	5e fd       	retal	0
800031c0:	80 00       	ld.sh	r0,r0[0x0]
800031c2:	81 28       	st.w	r0[0x8],r8

800031c4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c4:	d4 21       	pushm	r4-r7,lr
800031c6:	18 97       	mov	r7,r12
800031c8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031ca:	58 0b       	cp.w	r11,0
800031cc:	c0 31       	brne	800031d2 <gpio_enable_module+0xe>
800031ce:	30 05       	mov	r5,0
800031d0:	c0 d8       	rjmp	800031ea <gpio_enable_module+0x26>
800031d2:	30 05       	mov	r5,0
800031d4:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031d6:	6e 1b       	ld.w	r11,r7[0x4]
800031d8:	6e 0c       	ld.w	r12,r7[0x0]
800031da:	f0 1f 00 06 	mcall	800031f0 <gpio_enable_module+0x2c>
800031de:	18 45       	or	r5,r12
		gpiomap++;
800031e0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031e2:	2f f6       	sub	r6,-1
800031e4:	0c 34       	cp.w	r4,r6
800031e6:	fe 9b ff f8 	brhi	800031d6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800031ea:	0a 9c       	mov	r12,r5
800031ec:	d8 22       	popm	r4-r7,pc
800031ee:	00 00       	add	r0,r0
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	31 30       	mov	r0,19

800031f4 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031f4:	f8 08 16 05 	lsr	r8,r12,0x5
800031f8:	a9 78       	lsl	r8,0x9
800031fa:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
800031fe:	30 19       	mov	r9,1
80003200:	f2 0c 09 4c 	lsl	r12,r9,r12
80003204:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80003208:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
8000320c:	5e fc       	retal	r12

8000320e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000320e:	f8 08 16 05 	lsr	r8,r12,0x5
80003212:	a9 78       	lsl	r8,0x9
80003214:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003218:	30 19       	mov	r9,1
8000321a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000321e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003222:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003226:	91 1c       	st.w	r8[0x4],r12
}
80003228:	5e fc       	retal	r12

8000322a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000322a:	f8 08 16 05 	lsr	r8,r12,0x5
8000322e:	a9 78       	lsl	r8,0x9
80003230:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003234:	30 19       	mov	r9,1
80003236:	f2 0c 09 4c 	lsl	r12,r9,r12
8000323a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000323e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003242:	91 1c       	st.w	r8[0x4],r12
}
80003244:	5e fc       	retal	r12

80003246 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003246:	c0 08       	rjmp	80003246 <_unhandled_interrupt>

80003248 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003248:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000324c:	49 99       	lddpc	r9,800032b0 <INTC_register_interrupt+0x68>
8000324e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003252:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003256:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003258:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000325c:	58 0a       	cp.w	r10,0
8000325e:	c0 91       	brne	80003270 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003260:	49 59       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003262:	49 6a       	lddpc	r10,800032b8 <INTC_register_interrupt+0x70>
80003264:	12 1a       	sub	r10,r9
80003266:	fe 79 00 00 	mov	r9,-65536
8000326a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000326e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003270:	58 1a       	cp.w	r10,1
80003272:	c0 a1       	brne	80003286 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003274:	49 09       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003276:	49 2a       	lddpc	r10,800032bc <INTC_register_interrupt+0x74>
80003278:	12 1a       	sub	r10,r9
8000327a:	bf aa       	sbr	r10,0x1e
8000327c:	fe 79 00 00 	mov	r9,-65536
80003280:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003284:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003286:	58 2a       	cp.w	r10,2
80003288:	c0 a1       	brne	8000329c <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000328a:	48 b9       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000328c:	48 da       	lddpc	r10,800032c0 <INTC_register_interrupt+0x78>
8000328e:	12 1a       	sub	r10,r9
80003290:	bf ba       	sbr	r10,0x1f
80003292:	fe 79 00 00 	mov	r9,-65536
80003296:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000329a:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000329c:	48 69       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000329e:	48 aa       	lddpc	r10,800032c4 <INTC_register_interrupt+0x7c>
800032a0:	12 1a       	sub	r10,r9
800032a2:	ea 1a c0 00 	orh	r10,0xc000
800032a6:	fe 79 00 00 	mov	r9,-65536
800032aa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800032ae:	5e fc       	retal	r12
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	81 48       	st.w	r0[0x10],r8
800032b4:	80 00       	ld.sh	r0,r0[0x0]
800032b6:	7e 00       	ld.w	r0,pc[0x0]
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	7f 04       	ld.w	r4,pc[0x40]
800032bc:	80 00       	ld.sh	r0,r0[0x0]
800032be:	7f 12       	ld.w	r2,pc[0x44]
800032c0:	80 00       	ld.sh	r0,r0[0x0]
800032c2:	7f 20       	ld.w	r0,pc[0x48]
800032c4:	80 00       	ld.sh	r0,r0[0x0]
800032c6:	7f 2e       	ld.w	lr,pc[0x48]

800032c8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032ca:	49 18       	lddpc	r8,8000330c <INTC_init_interrupts+0x44>
800032cc:	e3 b8 00 01 	mtsr	0x4,r8
800032d0:	49 0e       	lddpc	lr,80003310 <INTC_init_interrupts+0x48>
800032d2:	30 07       	mov	r7,0
800032d4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d6:	49 0c       	lddpc	r12,80003314 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d8:	49 05       	lddpc	r5,80003318 <INTC_init_interrupts+0x50>
800032da:	10 15       	sub	r5,r8
800032dc:	fe 76 00 00 	mov	r6,-65536
800032e0:	c1 18       	rjmp	80003302 <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032e2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032ec:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ee:	10 3a       	cp.w	r10,r8
800032f0:	fe 9b ff fc 	brhi	800032e8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f8:	2f f7       	sub	r7,-1
800032fa:	2f 8e       	sub	lr,-8
800032fc:	e0 47 00 2f 	cp.w	r7,47
80003300:	c0 50       	breq	8000330a <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003302:	7c 08       	ld.w	r8,lr[0x0]
80003304:	58 08       	cp.w	r8,0
80003306:	ce e1       	brne	800032e2 <INTC_init_interrupts+0x1a>
80003308:	cf 6b       	rjmp	800032f4 <INTC_init_interrupts+0x2c>
8000330a:	d8 22       	popm	r4-r7,pc
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	7e 00       	ld.w	r0,pc[0x0]
80003310:	80 00       	ld.sh	r0,r0[0x0]
80003312:	81 48       	st.w	r0[0x10],r8
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	32 46       	mov	r6,36
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	7f 04       	ld.w	r4,pc[0x40]

8000331c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000331c:	fe 78 00 00 	mov	r8,-65536
80003320:	e0 69 00 83 	mov	r9,131
80003324:	f2 0c 01 0c 	sub	r12,r9,r12
80003328:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000332c:	f2 ca ff c0 	sub	r10,r9,-64
80003330:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003334:	58 08       	cp.w	r8,0
80003336:	c0 21       	brne	8000333a <_get_interrupt_handler+0x1e>
80003338:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000333a:	f0 08 12 00 	clz	r8,r8
8000333e:	48 5a       	lddpc	r10,80003350 <_get_interrupt_handler+0x34>
80003340:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003344:	f0 08 11 1f 	rsub	r8,r8,31
80003348:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000334a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334e:	5e fc       	retal	r12
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	81 48       	st.w	r0[0x10],r8

80003354 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003354:	e1 b9 00 00 	mfsr	r9,0x0
80003358:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000335a:	fe 78 04 00 	mov	r8,-64512
8000335e:	fc 1a aa 00 	movh	r10,0xaa00
80003362:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80003366:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80003368:	12 98       	mov	r8,r9
8000336a:	e6 18 00 01 	andh	r8,0x1,COH
8000336e:	c0 21       	brne	80003372 <pm_set_mclk_source+0x1e>
80003370:	d5 03       	csrf	0x10

  return PASS;
}
80003372:	5e fd       	retal	0

80003374 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003374:	eb cd 40 c0 	pushm	r6-r7,lr
80003378:	16 97       	mov	r7,r11
8000337a:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
8000337c:	58 0c       	cp.w	r12,0
8000337e:	c0 50       	breq	80003388 <pcl_switch_to_osc+0x14>
80003380:	fe 7c d8 f0 	mov	r12,-10000
80003384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80003388:	30 0c       	mov	r12,0
8000338a:	f0 1f 00 08 	mcall	800033a8 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
8000338e:	30 1a       	mov	r10,1
80003390:	0c 9b       	mov	r11,r6
80003392:	30 0c       	mov	r12,0
80003394:	f0 1f 00 06 	mcall	800033ac <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003398:	0e 9c       	mov	r12,r7
8000339a:	f0 1f 00 06 	mcall	800033b0 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000339e:	30 1c       	mov	r12,1
800033a0:	f0 1f 00 05 	mcall	800033b4 <pcl_switch_to_osc+0x40>
800033a4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	38 30       	mov	r0,-125
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	37 bc       	mov	r12,123
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	30 d4       	mov	r4,13
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 54       	mov	r4,53

800033b8 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
800033b8:	58 2c       	cp.w	r12,2
800033ba:	c2 80       	breq	8000340a <pwm_write_protect_sw_unlock+0x52>
800033bc:	e0 89 00 07 	brgt	800033ca <pwm_write_protect_sw_unlock+0x12>
800033c0:	58 0c       	cp.w	r12,0
800033c2:	c0 a0       	breq	800033d6 <pwm_write_protect_sw_unlock+0x1e>
800033c4:	58 1c       	cp.w	r12,1
800033c6:	c5 61       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033c8:	c1 48       	rjmp	800033f0 <pwm_write_protect_sw_unlock+0x38>
800033ca:	58 4c       	cp.w	r12,4
800033cc:	c3 90       	breq	8000343e <pwm_write_protect_sw_unlock+0x86>
800033ce:	c2 b5       	brlt	80003424 <pwm_write_protect_sw_unlock+0x6c>
800033d0:	58 5c       	cp.w	r12,5
800033d2:	c5 01       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033d4:	c4 28       	rjmp	80003458 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033d6:	fe 78 4c 00 	mov	r8,-46080
800033da:	e0 69 4d 04 	mov	r9,19716
800033de:	ea 19 50 57 	orh	r9,0x5057
800033e2:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033e6:	f0 f8 00 e8 	ld.w	r8,r8[232]
800033ea:	58 08       	cp.w	r8,0
800033ec:	c4 30       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
800033ee:	c4 18       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033f0:	fe 78 4c 00 	mov	r8,-46080
800033f4:	e0 69 4d 08 	mov	r9,19720
800033f8:	ea 19 50 57 	orh	r9,0x5057
800033fc:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003400:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003404:	58 08       	cp.w	r8,0
80003406:	c3 60       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003408:	c3 48       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000340a:	fe 78 4c 00 	mov	r8,-46080
8000340e:	e0 69 4d 10 	mov	r9,19728
80003412:	ea 19 50 57 	orh	r9,0x5057
80003416:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000341a:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000341e:	58 08       	cp.w	r8,0
80003420:	c2 90       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003422:	c2 78       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003424:	fe 78 4c 00 	mov	r8,-46080
80003428:	e0 69 4d 20 	mov	r9,19744
8000342c:	ea 19 50 57 	orh	r9,0x5057
80003430:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003434:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003438:	58 08       	cp.w	r8,0
8000343a:	c1 c0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
8000343c:	c1 a8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000343e:	fe 78 4c 00 	mov	r8,-46080
80003442:	e0 69 4d 40 	mov	r9,19776
80003446:	ea 19 50 57 	orh	r9,0x5057
8000344a:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000344e:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003452:	58 08       	cp.w	r8,0
80003454:	c0 f0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003456:	c0 d8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003458:	fe 78 4c 00 	mov	r8,-46080
8000345c:	e0 69 4d 80 	mov	r9,19840
80003460:	ea 19 50 57 	orh	r9,0x5057
80003464:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003468:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000346c:	58 08       	cp.w	r8,0
8000346e:	c0 20       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003470:	5e fe       	retal	-1
80003472:	5e fd       	retal	0

80003474 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003474:	58 0b       	cp.w	r11,0
80003476:	c1 d0       	breq	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003478:	58 4c       	cp.w	r12,4
8000347a:	e0 8b 00 1b 	brhi	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000347e:	76 0a       	ld.w	r10,r11[0x0]
80003480:	fe 78 4c 00 	mov	r8,-46080
80003484:	f8 c9 ff f0 	sub	r9,r12,-16
80003488:	a5 79       	lsl	r9,0x5
8000348a:	f0 09 00 09 	add	r9,r8,r9
8000348e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003490:	76 19       	ld.w	r9,r11[0x4]
80003492:	a5 7c       	lsl	r12,0x5
80003494:	f0 0c 00 0c 	add	r12,r8,r12
80003498:	f8 c8 fd fc 	sub	r8,r12,-516
8000349c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000349e:	76 39       	ld.w	r9,r11[0xc]
800034a0:	f8 c8 fd f4 	sub	r8,r12,-524
800034a4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
800034a6:	76 68       	ld.w	r8,r11[0x18]
800034a8:	f8 cc fd e8 	sub	r12,r12,-536
800034ac:	99 08       	st.w	r12[0x0],r8
800034ae:	5e fd       	retal	0
  return PWM_SUCCESS;
800034b0:	5e ff       	retal	1

800034b2 <pwm_start_channels>:
}

int pwm_start_channels(unsigned long channels_bitmask)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034b2:	18 98       	mov	r8,r12
800034b4:	e0 18 ff e0 	andl	r8,0xffe0
800034b8:	c0 20       	breq	800034bc <pwm_start_channels+0xa>
800034ba:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  //pwm->wpsr; // Clear Fault register
  pwm->ena = channels_bitmask; // Enable channels.
800034bc:	fe 78 4c 00 	mov	r8,-46080
800034c0:	91 1c       	st.w	r8[0x4],r12
800034c2:	5e fd       	retal	0

800034c4 <pwm_stop_channels>:
  return PWM_SUCCESS;
}

int pwm_stop_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034c4:	18 98       	mov	r8,r12
800034c6:	e0 18 ff e0 	andl	r8,0xffe0
800034ca:	c0 20       	breq	800034ce <pwm_stop_channels+0xa>
800034cc:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.dis = channels_bitmask; // Disable channels.
800034ce:	fe 78 4c 00 	mov	r8,-46080
800034d2:	91 2c       	st.w	r8[0x8],r12
800034d4:	5e fd       	retal	0

800034d6 <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
800034d6:	fe 78 4c 00 	mov	r8,-46080
800034da:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
800034dc:	5e fd       	retal	0
800034de:	d7 03       	nop

800034e0 <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
800034e0:	eb cd 40 c0 	pushm	r6-r7,lr
800034e4:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034e6:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
800034ea:	58 0c       	cp.w	r12,0
800034ec:	c0 31       	brne	800034f2 <pwm_init+0x12>
800034ee:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800034f2:	ee 16 00 01 	eorh	r6,0x1
800034f6:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
800034fa:	30 0c       	mov	r12,0
800034fc:	f0 1f 00 37 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
80003500:	30 1c       	mov	r12,1
80003502:	f0 1f 00 36 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
80003506:	30 2c       	mov	r12,2
80003508:	f0 1f 00 34 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
8000350c:	30 3c       	mov	r12,3
8000350e:	f0 1f 00 33 	mcall	800035d8 <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003512:	58 06       	cp.w	r6,0
80003514:	c0 20       	breq	80003518 <pwm_init+0x38>
80003516:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
80003518:	31 f9       	mov	r9,31
8000351a:	fe 78 4c 00 	mov	r8,-46080
8000351e:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
80003520:	ef 39 00 14 	ld.ub	r9,r7[20]
80003524:	30 08       	mov	r8,0
80003526:	f0 09 18 00 	cp.b	r9,r8
8000352a:	c0 70       	breq	80003538 <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
8000352c:	fe 78 4c 00 	mov	r8,-46080
80003530:	70 59       	ld.w	r9,r8[0x14]
80003532:	ea 19 00 1f 	orh	r9,0x1f
80003536:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
80003538:	fe 78 4c 00 	mov	r8,-46080
8000353c:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
8000353e:	ef 39 00 15 	ld.ub	r9,r7[21]
80003542:	30 08       	mov	r8,0
80003544:	f0 09 18 00 	cp.b	r9,r8
80003548:	c1 40       	breq	80003570 <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
8000354a:	30 99       	mov	r9,9
8000354c:	fe 78 4c 00 	mov	r8,-46080
80003550:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
80003552:	ef 39 00 16 	ld.ub	r9,r7[22]
80003556:	30 28       	mov	r8,2
80003558:	f0 09 18 00 	cp.b	r9,r8
8000355c:	c0 71       	brne	8000356a <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
8000355e:	fe 78 4c 00 	mov	r8,-46080
80003562:	70 e9       	ld.w	r9,r8[0x38]
80003564:	e8 19 00 06 	orl	r9,0x6
80003568:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
8000356a:	fe 78 4c 00 	mov	r8,-46080
8000356e:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
80003570:	58 06       	cp.w	r6,0
80003572:	c0 20       	breq	80003576 <pwm_init+0x96>
80003574:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003576:	6e 08       	ld.w	r8,r7[0x0]
80003578:	6e 39       	ld.w	r9,r7[0xc]
8000357a:	a9 69       	lsl	r9,0x8
8000357c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003580:	6e 18       	ld.w	r8,r7[0x4]
80003582:	10 49       	or	r9,r8
80003584:	6e 28       	ld.w	r8,r7[0x8]
80003586:	f3 e8 11 89 	or	r9,r9,r8<<0x18
8000358a:	6e 48       	ld.w	r8,r7[0x10]
8000358c:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
80003590:	fe 78 4c 00 	mov	r8,-46080
80003594:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
80003596:	ef 3a 00 16 	ld.ub	r10,r7[22]
8000359a:	70 89       	ld.w	r9,r8[0x20]
8000359c:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
800035a0:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
800035a2:	70 89       	ld.w	r9,r8[0x20]
800035a4:	ef 3a 00 17 	ld.ub	r10,r7[23]
800035a8:	f5 e9 10 09 	or	r9,r10,r9
800035ac:	91 89       	st.w	r8[0x20],r9
800035ae:	70 89       	ld.w	r9,r8[0x20]
800035b0:	ef 3a 00 18 	ld.ub	r10,r7[24]
800035b4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800035b8:	91 89       	st.w	r8[0x20],r9
800035ba:	70 89       	ld.w	r9,r8[0x20]
800035bc:	ef 3a 00 19 	ld.ub	r10,r7[25]
800035c0:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800035c4:	91 89       	st.w	r8[0x20],r9
800035c6:	70 89       	ld.w	r9,r8[0x20]
800035c8:	ef 3a 00 1a 	ld.ub	r10,r7[26]
800035cc:	f3 ea 10 39 	or	r9,r9,r10<<0x3
800035d0:	91 89       	st.w	r8[0x20],r9
800035d2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035d6:	00 00       	add	r0,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	33 b8       	mov	r8,59

800035dc <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800035dc:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035e0:	fe 7a 08 00 	mov	r10,-63488
800035e4:	c0 48       	rjmp	800035ec <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800035e6:	20 18       	sub	r8,1
800035e8:	c0 21       	brne	800035ec <scif_pclksr_statushigh_wait+0x10>
800035ea:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035ec:	74 59       	ld.w	r9,r10[0x14]
800035ee:	f9 e9 00 09 	and	r9,r12,r9
800035f2:	cf a0       	breq	800035e6 <scif_pclksr_statushigh_wait+0xa>
800035f4:	5e fd       	retal	0

800035f6 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
800035f6:	58 0c       	cp.w	r12,0
800035f8:	c0 81       	brne	80003608 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800035fa:	fe 79 08 00 	mov	r9,-63488
800035fe:	72 58       	ld.w	r8,r9[0x14]
80003600:	e2 18 00 10 	andl	r8,0x10,COH
80003604:	cf d0       	breq	800035fe <scif_wait_for_pll_locked+0x8>
80003606:	c0 78       	rjmp	80003614 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80003608:	fe 79 08 00 	mov	r9,-63488
8000360c:	72 58       	ld.w	r8,r9[0x14]
8000360e:	e2 18 00 20 	andl	r8,0x20,COH
80003612:	cf d0       	breq	8000360c <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80003614:	5e fd       	retal	0

80003616 <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80003616:	fe 78 08 00 	mov	r8,-63488
8000361a:	f8 c9 ff e7 	sub	r9,r12,-25
8000361e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80003622:	a1 ca       	cbr	r10,0x0
80003624:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003628:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000362c:	fe 7a 08 00 	mov	r10,-63488
80003630:	12 9c       	mov	r12,r9
80003632:	c0 48       	rjmp	8000363a <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
80003634:	20 18       	sub	r8,1
80003636:	c0 21       	brne	8000363a <scif_stop_gclk+0x24>
80003638:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000363a:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
8000363e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003642:	cf 91       	brne	80003634 <scif_stop_gclk+0x1e>
80003644:	5e fd       	retal	0
80003646:	d7 03       	nop

80003648 <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80003648:	d4 21       	pushm	r4-r7,lr
8000364a:	18 97       	mov	r7,r12
8000364c:	16 95       	mov	r5,r11
8000364e:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
80003650:	a1 99       	lsr	r9,0x1
80003652:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003656:	f8 c9 ff e7 	sub	r9,r12,-25
8000365a:	fe 78 08 00 	mov	r8,-63488
8000365e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003662:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003666:	c0 50       	breq	80003670 <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
80003668:	f0 1f 00 18 	mcall	800036c8 <scif_gc_setup+0x80>
8000366c:	c1 44       	brge	80003694 <scif_gc_setup+0x4c>
8000366e:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80003670:	a1 76       	lsl	r6,0x1
80003672:	e2 16 00 02 	andl	r6,0x2,COH
80003676:	a9 65       	lsl	r5,0x8
80003678:	e2 15 0f 00 	andl	r5,0xf00,COH
8000367c:	0a 46       	or	r6,r5
8000367e:	b1 64       	lsl	r4,0x10
80003680:	e6 14 00 ff 	andh	r4,0xff,COH
80003684:	ed e4 10 04 	or	r4,r6,r4
80003688:	2e 77       	sub	r7,-25
8000368a:	fe 78 08 00 	mov	r8,-63488
8000368e:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
80003692:	d8 2a       	popm	r4-r7,pc,r12=0
80003694:	ec 09 15 01 	lsl	r9,r6,0x1
80003698:	e2 19 00 02 	andl	r9,0x2,COH
8000369c:	ea 08 15 08 	lsl	r8,r5,0x8
800036a0:	e2 18 0f 00 	andl	r8,0xf00,COH
800036a4:	10 49       	or	r9,r8
800036a6:	e8 08 15 10 	lsl	r8,r4,0x10
800036aa:	e6 18 00 ff 	andh	r8,0xff,COH
800036ae:	10 49       	or	r9,r8
800036b0:	fe 78 08 00 	mov	r8,-63488
800036b4:	2e 77       	sub	r7,-25
800036b6:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
800036ba:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
800036be:	a1 a9       	sbr	r9,0x0
800036c0:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
800036c4:	d8 2a       	popm	r4-r7,pc,r12=0
800036c6:	00 00       	add	r0,r0
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	36 16       	mov	r6,97

800036cc <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800036cc:	f8 c9 ff e7 	sub	r9,r12,-25
800036d0:	fe 78 08 00 	mov	r8,-63488
800036d4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036dc:	c0 91       	brne	800036ee <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800036de:	fe 78 08 00 	mov	r8,-63488
800036e2:	12 9c       	mov	r12,r9
800036e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036e8:	a1 a9       	sbr	r9,0x0
800036ea:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
800036ee:	5e fd       	retal	0

800036f0 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
800036f0:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800036f2:	fa c8 ff f8 	sub	r8,sp,-8
800036f6:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800036fa:	fe 78 08 00 	mov	r8,-63488
800036fe:	2f 9c       	sub	r12,-7
80003700:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80003704:	30 1b       	mov	r11,1
80003706:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000370a:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
8000370e:	e1 ba 00 00 	mfsr	r10,0x0
80003712:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003714:	f8 0b 15 02 	lsl	r11,r12,0x2
80003718:	ea 1b aa 00 	orh	r11,0xaa00
8000371c:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000371e:	f2 f9 ff f8 	ld.w	r9,r9[-8]
80003722:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80003726:	14 98       	mov	r8,r10
80003728:	e6 18 00 01 	andh	r8,0x1,COH
8000372c:	c0 21       	brne	80003730 <scif_pll_enable+0x40>
8000372e:	d5 03       	csrf	0x10

  return PASS;
}
80003730:	2f ed       	sub	sp,-8
80003732:	5e fd       	retal	0

80003734 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80003734:	eb cd 40 c0 	pushm	r6-r7,lr
80003738:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
8000373a:	fa c9 ff f8 	sub	r9,sp,-8
8000373e:	f2 0c 00 28 	add	r8,r9,r12<<0x2
80003742:	fe 79 08 00 	mov	r9,-63488
80003746:	2f 9c       	sub	r12,-7
80003748:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
8000374c:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
80003750:	f7 3e 00 10 	ld.ub	lr,r11[16]
80003754:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80003758:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
8000375c:	17 a7       	ld.ub	r7,r11[0x2]
8000375e:	17 9e       	ld.ub	lr,r11[0x1]
80003760:	a3 6e       	lsl	lr,0x2
80003762:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80003766:	17 87       	ld.ub	r7,r11[0x0]
80003768:	0e 96       	mov	r6,r7
8000376a:	0e 4e       	or	lr,r7
8000376c:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
80003770:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80003774:	76 2e       	ld.w	lr,r11[0x8]
80003776:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
8000377a:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
8000377e:	76 1e       	ld.w	lr,r11[0x4]
80003780:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80003784:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80003788:	76 3b       	ld.w	r11,r11[0xc]
8000378a:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
8000378e:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
80003792:	e1 ba 00 00 	mfsr	r10,0x0
80003796:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003798:	f8 0b 15 02 	lsl	r11,r12,0x2
8000379c:	ea 1b aa 00 	orh	r11,0xaa00
800037a0:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800037a2:	f0 f8 ff f8 	ld.w	r8,r8[-8]
800037a6:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800037aa:	14 98       	mov	r8,r10
800037ac:	e6 18 00 01 	andh	r8,0x1,COH
800037b0:	c0 21       	brne	800037b4 <scif_pll_setup+0x80>
800037b2:	d5 03       	csrf	0x10

  return PASS;
}
800037b4:	2f ed       	sub	sp,-8
800037b6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800037ba:	d7 03       	nop

800037bc <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800037bc:	eb cd 40 80 	pushm	r7,lr
800037c0:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800037c2:	fa c8 ff f8 	sub	r8,sp,-8
800037c6:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800037ca:	fe 78 08 00 	mov	r8,-63488
800037ce:	f8 c9 ff f7 	sub	r9,r12,-9
800037d2:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800037d6:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800037da:	30 1b       	mov	r11,1
800037dc:	ef db d2 01 	bfins	r7,r11,0x10,0x1
800037e0:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
800037e4:	e1 bb 00 00 	mfsr	r11,0x0
800037e8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800037ea:	f2 07 15 02 	lsl	r7,r9,0x2
800037ee:	ea 17 aa 00 	orh	r7,0xaa00
800037f2:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800037f4:	fc fe ff f8 	ld.w	lr,lr[-8]
800037f8:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
800037fc:	16 98       	mov	r8,r11
800037fe:	e6 18 00 01 	andh	r8,0x1,COH
80003802:	c0 21       	brne	80003806 <scif_enable_osc+0x4a>
80003804:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003806:	58 0a       	cp.w	r10,0
80003808:	c0 e0       	breq	80003824 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
8000380a:	58 0c       	cp.w	r12,0
8000380c:	c0 61       	brne	80003818 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000380e:	30 1c       	mov	r12,1
80003810:	f0 1f 00 07 	mcall	8000382c <scif_enable_osc+0x70>
80003814:	c0 80       	breq	80003824 <scif_enable_osc+0x68>
80003816:	c0 58       	rjmp	80003820 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003818:	30 2c       	mov	r12,2
8000381a:	f0 1f 00 05 	mcall	8000382c <scif_enable_osc+0x70>
8000381e:	c0 30       	breq	80003824 <scif_enable_osc+0x68>
80003820:	3f fc       	mov	r12,-1
80003822:	c0 28       	rjmp	80003826 <scif_enable_osc+0x6a>
80003824:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003826:	2f ed       	sub	sp,-8
80003828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	35 dc       	mov	r12,93

80003830 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
80003830:	58 0c       	cp.w	r12,0
80003832:	c3 41       	brne	8000389a <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003834:	fe 78 08 00 	mov	r8,-63488
80003838:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
8000383a:	e0 69 84 7f 	mov	r9,33919
8000383e:	ea 19 00 1e 	orh	r9,0x1e
80003842:	12 3b       	cp.w	r11,r9
80003844:	e0 8b 00 04 	brhi	8000384c <scif_configure_osc_crystalmode+0x1c>
80003848:	30 0b       	mov	r11,0
8000384a:	c1 38       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000384c:	e0 69 96 7f 	mov	r9,38527
80003850:	ea 19 00 98 	orh	r9,0x98
80003854:	12 3b       	cp.w	r11,r9
80003856:	e0 8b 00 04 	brhi	8000385e <scif_configure_osc_crystalmode+0x2e>
8000385a:	30 1b       	mov	r11,1
8000385c:	c0 a8       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000385e:	e0 69 24 00 	mov	r9,9216
80003862:	ea 19 00 f4 	orh	r9,0xf4
80003866:	12 3b       	cp.w	r11,r9
80003868:	f9 bb 03 02 	movlo	r11,2
8000386c:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80003870:	30 19       	mov	r9,1
80003872:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003876:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8000387a:	e1 ba 00 00 	mfsr	r10,0x0
8000387e:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80003880:	fe 79 08 00 	mov	r9,-63488
80003884:	32 4b       	mov	r11,36
80003886:	ea 1b aa 00 	orh	r11,0xaa00
8000388a:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
8000388c:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000388e:	14 98       	mov	r8,r10
80003890:	e6 18 00 01 	andh	r8,0x1,COH
80003894:	c3 51       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
80003896:	d5 03       	csrf	0x10
80003898:	c3 38       	rjmp	800038fe <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
8000389a:	fe 78 08 00 	mov	r8,-63488
8000389e:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038a0:	e0 69 84 7f 	mov	r9,33919
800038a4:	ea 19 00 1e 	orh	r9,0x1e
800038a8:	12 3b       	cp.w	r11,r9
800038aa:	e0 8b 00 04 	brhi	800038b2 <scif_configure_osc_crystalmode+0x82>
800038ae:	30 0b       	mov	r11,0
800038b0:	c1 38       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038b2:	e0 69 96 7f 	mov	r9,38527
800038b6:	ea 19 00 98 	orh	r9,0x98
800038ba:	12 3b       	cp.w	r11,r9
800038bc:	e0 8b 00 04 	brhi	800038c4 <scif_configure_osc_crystalmode+0x94>
800038c0:	30 1b       	mov	r11,1
800038c2:	c0 a8       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038c4:	e0 69 24 00 	mov	r9,9216
800038c8:	ea 19 00 f4 	orh	r9,0xf4
800038cc:	12 3b       	cp.w	r11,r9
800038ce:	f9 bb 03 02 	movlo	r11,2
800038d2:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800038d6:	30 19       	mov	r9,1
800038d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038dc:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800038e0:	e1 ba 00 00 	mfsr	r10,0x0
800038e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800038e6:	fe 79 08 00 	mov	r9,-63488
800038ea:	32 8b       	mov	r11,40
800038ec:	ea 1b aa 00 	orh	r11,0xaa00
800038f0:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800038f2:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800038f4:	14 98       	mov	r8,r10
800038f6:	e6 18 00 01 	andh	r8,0x1,COH
800038fa:	c0 21       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
800038fc:	d5 03       	csrf	0x10
  }

  return PASS;
}
800038fe:	5e fd       	retal	0

80003900 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003900:	f8 c8 00 01 	sub	r8,r12,1
80003904:	f0 0b 00 0b 	add	r11,r8,r11
80003908:	f6 0c 0d 0a 	divu	r10,r11,r12
8000390c:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000390e:	f4 c8 00 01 	sub	r8,r10,1
80003912:	e0 48 00 fe 	cp.w	r8,254
80003916:	e0 88 00 03 	brls	8000391c <getBaudDiv+0x1c>
8000391a:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000391c:	5c 8c       	casts.h	r12
}
8000391e:	5e fc       	retal	r12

80003920 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003920:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003924:	30 18       	mov	r8,1
80003926:	f0 09 18 00 	cp.b	r9,r8
8000392a:	e0 88 00 04 	brls	80003932 <spi_initMaster+0x12>
8000392e:	30 2c       	mov	r12,2
80003930:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003932:	e0 68 00 80 	mov	r8,128
80003936:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003938:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
8000393a:	30 19       	mov	r9,1
8000393c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003940:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003944:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003948:	30 09       	mov	r9,0
8000394a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000394e:	30 fa       	mov	r10,15
80003950:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003954:	99 18       	st.w	r12[0x4],r8
80003956:	5e f9       	retal	r9

80003958 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003958:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000395c:	30 1e       	mov	lr,1
8000395e:	f6 0e 18 00 	cp.b	lr,r11
80003962:	f9 be 02 00 	movhs	lr,0
80003966:	30 18       	mov	r8,1
80003968:	f4 08 18 00 	cp.b	r8,r10
8000396c:	f9 b8 02 00 	movhs	r8,0
80003970:	fd e8 10 08 	or	r8,lr,r8
80003974:	30 07       	mov	r7,0
80003976:	ee 08 18 00 	cp.b	r8,r7
8000397a:	c0 40       	breq	80003982 <spi_selectionMode+0x2a>
8000397c:	30 2c       	mov	r12,2
8000397e:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003982:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003984:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003988:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000398c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003990:	99 18       	st.w	r12[0x4],r8
80003992:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003996 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003996:	78 18       	ld.w	r8,r12[0x4]
80003998:	ea 18 00 0f 	orh	r8,0xf
8000399c:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000399e:	78 18       	ld.w	r8,r12[0x4]
800039a0:	e2 18 00 04 	andl	r8,0x4,COH
800039a4:	c0 f0       	breq	800039c2 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800039a6:	30 e8       	mov	r8,14
800039a8:	f0 0b 18 00 	cp.b	r11,r8
800039ac:	e0 8b 00 19 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800039b0:	78 18       	ld.w	r8,r12[0x4]
800039b2:	b1 6b       	lsl	r11,0x10
800039b4:	ea 1b ff f0 	orh	r11,0xfff0
800039b8:	e8 1b ff ff 	orl	r11,0xffff
800039bc:	10 6b       	and	r11,r8
800039be:	99 1b       	st.w	r12[0x4],r11
800039c0:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800039c2:	30 38       	mov	r8,3
800039c4:	f0 0b 18 00 	cp.b	r11,r8
800039c8:	e0 8b 00 0b 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800039cc:	78 18       	ld.w	r8,r12[0x4]
800039ce:	2f 0b       	sub	r11,-16
800039d0:	30 19       	mov	r9,1
800039d2:	f2 0b 09 4b 	lsl	r11,r9,r11
800039d6:	5c db       	com	r11
800039d8:	10 6b       	and	r11,r8
800039da:	99 1b       	st.w	r12[0x4],r11
800039dc:	5e fd       	retal	0
800039de:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800039e0:	5e fc       	retal	r12

800039e2 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039e2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039e6:	c0 58       	rjmp	800039f0 <spi_unselectChip+0xe>
		if (!timeout--) {
800039e8:	58 08       	cp.w	r8,0
800039ea:	c0 21       	brne	800039ee <spi_unselectChip+0xc>
800039ec:	5e ff       	retal	1
800039ee:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039f0:	78 49       	ld.w	r9,r12[0x10]
800039f2:	e2 19 02 00 	andl	r9,0x200,COH
800039f6:	cf 90       	breq	800039e8 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039f8:	78 18       	ld.w	r8,r12[0x4]
800039fa:	ea 18 00 0f 	orh	r8,0xf
800039fe:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003a00:	fc 18 01 00 	movh	r8,0x100
80003a04:	99 08       	st.w	r12[0x0],r8
80003a06:	5e fd       	retal	0

80003a08 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003a08:	eb cd 40 f8 	pushm	r3-r7,lr
80003a0c:	18 95       	mov	r5,r12
80003a0e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a10:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a14:	30 38       	mov	r8,3
80003a16:	f0 06 18 00 	cp.b	r6,r8
80003a1a:	e0 8b 00 4d 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003a1e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a22:	30 18       	mov	r8,1
80003a24:	f0 04 18 00 	cp.b	r4,r8
80003a28:	e0 8b 00 46 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a2c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a30:	30 78       	mov	r8,7
80003a32:	f0 03 18 00 	cp.b	r3,r8
80003a36:	e0 88 00 3f 	brls	80003ab4 <spi_setupChipReg+0xac>
80003a3a:	31 08       	mov	r8,16
80003a3c:	f0 03 18 00 	cp.b	r3,r8
80003a40:	e0 8b 00 3a 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a44:	14 9b       	mov	r11,r10
80003a46:	6e 1c       	ld.w	r12,r7[0x4]
80003a48:	f0 1f 00 1d 	mcall	80003abc <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003a4c:	c3 45       	brlt	80003ab4 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003a4e:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003a50:	ec 09 16 01 	lsr	r9,r6,0x1
80003a54:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003a58:	ec 16 00 01 	eorl	r6,0x1
80003a5c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003a60:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003a64:	20 83       	sub	r3,8
80003a66:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003a6a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003a6e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003a72:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003a76:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003a7a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003a7e:	0f 89       	ld.ub	r9,r7[0x0]
80003a80:	30 1a       	mov	r10,1
80003a82:	f4 09 18 00 	cp.b	r9,r10
80003a86:	c0 e0       	breq	80003aa2 <spi_setupChipReg+0x9a>
80003a88:	c0 a3       	brcs	80003a9c <spi_setupChipReg+0x94>
80003a8a:	30 2a       	mov	r10,2
80003a8c:	f4 09 18 00 	cp.b	r9,r10
80003a90:	c0 c0       	breq	80003aa8 <spi_setupChipReg+0xa0>
80003a92:	30 3a       	mov	r10,3
80003a94:	f4 09 18 00 	cp.b	r9,r10
80003a98:	c0 e1       	brne	80003ab4 <spi_setupChipReg+0xac>
80003a9a:	c0 a8       	rjmp	80003aae <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003a9c:	8b c8       	st.w	r5[0x30],r8
80003a9e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003aa2:	8b d8       	st.w	r5[0x34],r8
80003aa4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003aa8:	8b e8       	st.w	r5[0x38],r8
80003aaa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003aae:	8b f8       	st.w	r5[0x3c],r8
80003ab0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003ab4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003ab6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003aba:	00 00       	add	r0,r0
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	39 00       	mov	r0,-112

80003ac0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003ac0:	30 18       	mov	r8,1
80003ac2:	99 08       	st.w	r12[0x0],r8
}
80003ac4:	5e fc       	retal	r12

80003ac6 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003ac6:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003aca:	c0 58       	rjmp	80003ad4 <spi_write+0xe>
		if (!timeout--) {
80003acc:	58 08       	cp.w	r8,0
80003ace:	c0 21       	brne	80003ad2 <spi_write+0xc>
80003ad0:	5e ff       	retal	1
80003ad2:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ad4:	78 49       	ld.w	r9,r12[0x10]
80003ad6:	e2 19 00 02 	andl	r9,0x2,COH
80003ada:	cf 90       	breq	80003acc <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003adc:	5c 7b       	castu.h	r11
80003ade:	99 3b       	st.w	r12[0xc],r11
80003ae0:	5e fd       	retal	0

80003ae2 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003ae2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003ae6:	c0 58       	rjmp	80003af0 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003ae8:	58 08       	cp.w	r8,0
80003aea:	c0 21       	brne	80003aee <spi_read+0xc>
80003aec:	5e ff       	retal	1
80003aee:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003af0:	78 49       	ld.w	r9,r12[0x10]
80003af2:	e2 19 02 01 	andl	r9,0x201,COH
80003af6:	e0 49 02 01 	cp.w	r9,513
80003afa:	cf 71       	brne	80003ae8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003afc:	78 28       	ld.w	r8,r12[0x8]
80003afe:	b6 08       	st.h	r11[0x0],r8
80003b00:	5e fd       	retal	0
80003b02:	d7 03       	nop

80003b04 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003b04:	4a e8       	lddpc	r8,80003bbc <twim_master_interrupt_handler+0xb8>
80003b06:	70 08       	ld.w	r8,r8[0x0]
80003b08:	70 79       	ld.w	r9,r8[0x1c]
80003b0a:	4a ea       	lddpc	r10,80003bc0 <twim_master_interrupt_handler+0xbc>
80003b0c:	74 0a       	ld.w	r10,r10[0x0]
80003b0e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003b12:	12 9a       	mov	r10,r9
80003b14:	e2 1a 07 00 	andl	r10,0x700,COH
80003b18:	c1 40       	breq	80003b40 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003b1a:	e2 19 03 00 	andl	r9,0x300,COH
80003b1e:	f9 b9 01 fc 	movne	r9,-4
80003b22:	f9 b9 00 fe 	moveq	r9,-2
80003b26:	4a 8a       	lddpc	r10,80003bc4 <twim_master_interrupt_handler+0xc0>
80003b28:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003b2a:	70 3a       	ld.w	r10,r8[0xc]
80003b2c:	30 09       	mov	r9,0
80003b2e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80003b32:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003b34:	3f fa       	mov	r10,-1
80003b36:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003b38:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003b3a:	4a 48       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b3c:	b0 89       	st.b	r8[0x0],r9
80003b3e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003b40:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003b44:	c1 30       	breq	80003b6a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003b46:	4a 2a       	lddpc	r10,80003bcc <twim_master_interrupt_handler+0xc8>
80003b48:	70 5b       	ld.w	r11,r8[0x14]
80003b4a:	74 09       	ld.w	r9,r10[0x0]
80003b4c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80003b4e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003b50:	4a 09       	lddpc	r9,80003bd0 <twim_master_interrupt_handler+0xcc>
80003b52:	72 0a       	ld.w	r10,r9[0x0]
80003b54:	20 1a       	sub	r10,1
80003b56:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003b58:	72 09       	ld.w	r9,r9[0x0]
80003b5a:	58 09       	cp.w	r9,0
80003b5c:	c2 f1       	brne	80003bba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80003b5e:	30 19       	mov	r9,1
80003b60:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b62:	30 09       	mov	r9,0
80003b64:	49 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b66:	b0 89       	st.b	r8[0x0],r9
80003b68:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003b6a:	e2 19 00 02 	andl	r9,0x2,COH
80003b6e:	c2 60       	breq	80003bba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80003b70:	49 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b72:	72 09       	ld.w	r9,r9[0x0]
80003b74:	58 09       	cp.w	r9,0
80003b76:	c0 71       	brne	80003b84 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003b78:	30 29       	mov	r9,2
80003b7a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b7c:	30 09       	mov	r9,0
80003b7e:	49 38       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b80:	b0 89       	st.b	r8[0x0],r9
80003b82:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80003b84:	49 5a       	lddpc	r10,80003bd8 <twim_master_interrupt_handler+0xd4>
80003b86:	74 09       	ld.w	r9,r10[0x0]
80003b88:	13 3b       	ld.ub	r11,r9++
80003b8a:	91 6b       	st.w	r8[0x18],r11
80003b8c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003b8e:	49 28       	lddpc	r8,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b90:	70 09       	ld.w	r9,r8[0x0]
80003b92:	20 19       	sub	r9,1
80003b94:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80003b96:	70 08       	ld.w	r8,r8[0x0]
80003b98:	58 08       	cp.w	r8,0
80003b9a:	c1 01       	brne	80003bba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003b9c:	48 b8       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b9e:	11 88       	ld.ub	r8,r8[0x0]
80003ba0:	58 08       	cp.w	r8,0
80003ba2:	c0 c0       	breq	80003bba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80003ba4:	30 09       	mov	r9,0
80003ba6:	48 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003ba8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003baa:	48 d8       	lddpc	r8,80003bdc <twim_master_interrupt_handler+0xd8>
80003bac:	70 08       	ld.w	r8,r8[0x0]
80003bae:	70 3a       	ld.w	r10,r8[0xc]
80003bb0:	48 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003bb2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80003bb4:	70 29       	ld.w	r9,r8[0x8]
80003bb6:	48 98       	lddpc	r8,80003bd8 <twim_master_interrupt_handler+0xd4>
80003bb8:	91 09       	st.w	r8[0x0],r9
80003bba:	d6 03       	rete
80003bbc:	00 00       	add	r0,r0
80003bbe:	01 f8       	ld.ub	r8,r0[0x7]
80003bc0:	00 00       	add	r0,r0
80003bc2:	02 0c       	add	r12,r1
80003bc4:	00 00       	add	r0,r0
80003bc6:	02 04       	add	r4,r1
80003bc8:	00 00       	add	r0,r0
80003bca:	02 10       	sub	r0,r1
80003bcc:	00 00       	add	r0,r0
80003bce:	01 fc       	ld.ub	r12,r0[0x7]
80003bd0:	00 00       	add	r0,r0
80003bd2:	02 00       	add	r0,r1
80003bd4:	00 00       	add	r0,r0
80003bd6:	02 18       	sub	r8,r1
80003bd8:	00 00       	add	r0,r0
80003bda:	02 08       	add	r8,r1
80003bdc:	00 00       	add	r0,r0
80003bde:	02 14       	sub	r4,r1

80003be0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003be0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003be4:	f4 0b 0d 0a 	divu	r10,r10,r11
80003be8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003bec:	e0 48 00 ff 	cp.w	r8,255
80003bf0:	e0 8b 00 04 	brhi	80003bf8 <twim_set_speed+0x18>
80003bf4:	30 09       	mov	r9,0
80003bf6:	c2 18       	rjmp	80003c38 <twim_set_speed+0x58>
80003bf8:	30 09       	mov	r9,0
80003bfa:	30 16       	mov	r6,1
80003bfc:	30 7a       	mov	r10,7
80003bfe:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003c00:	2f f9       	sub	r9,-1
80003c02:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003c04:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003c06:	e0 48 00 ff 	cp.w	r8,255
80003c0a:	f9 be 0b 01 	movhi	lr,1
80003c0e:	f9 be 08 00 	movls	lr,0
80003c12:	f2 0a 18 00 	cp.b	r10,r9
80003c16:	ec 0b 17 20 	movhs	r11,r6
80003c1a:	f9 bb 03 00 	movlo	r11,0
80003c1e:	fd eb 00 0b 	and	r11,lr,r11
80003c22:	ee 0b 18 00 	cp.b	r11,r7
80003c26:	ce d1       	brne	80003c00 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003c28:	30 7a       	mov	r10,7
80003c2a:	f4 09 18 00 	cp.b	r9,r10
80003c2e:	e0 88 00 05 	brls	80003c38 <twim_set_speed+0x58>
80003c32:	3f 8c       	mov	r12,-8
80003c34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003c38:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003c3c:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80003c40:	14 18       	sub	r8,r10
80003c42:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003c46:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003c4a:	99 19       	st.w	r12[0x4],r9
80003c4c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80003c50 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80003c50:	48 38       	lddpc	r8,80003c5c <twim_status+0xc>
80003c52:	70 08       	ld.w	r8,r8[0x0]
80003c54:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003c56:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003c5a:	5e fc       	retal	r12
80003c5c:	00 00       	add	r0,r0
80003c5e:	01 f8       	ld.ub	r8,r0[0x7]

80003c60 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003c60:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003c64:	e6 18 00 01 	andh	r8,0x1,COH
80003c68:	c0 21       	brne	80003c6c <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003c6a:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003c6c:	3f f8       	mov	r8,-1
80003c6e:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80003c70:	99 b8       	st.w	r12[0x2c],r8
}
80003c72:	5e fc       	retal	r12

80003c74 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80003c74:	eb cd 40 fe 	pushm	r1-r7,lr
80003c78:	18 97       	mov	r7,r12
80003c7a:	16 93       	mov	r3,r11
80003c7c:	14 95       	mov	r5,r10
80003c7e:	12 92       	mov	r2,r9
80003c80:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003c82:	30 14       	mov	r4,1
80003c84:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003c86:	e0 68 00 80 	mov	r8,128
80003c8a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003c8c:	30 28       	mov	r8,2
80003c8e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003c90:	49 e6       	lddpc	r6,80003d08 <twim_write+0x94>
80003c92:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80003c94:	f0 1f 00 1e 	mcall	80003d0c <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003c98:	49 e8       	lddpc	r8,80003d10 <twim_write+0x9c>
80003c9a:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003c9c:	49 e8       	lddpc	r8,80003d14 <twim_write+0xa0>
80003c9e:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003ca0:	30 09       	mov	r9,0
80003ca2:	49 e8       	lddpc	r8,80003d18 <twim_write+0xa4>
80003ca4:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003ca6:	49 e9       	lddpc	r9,80003d1c <twim_write+0xa8>
80003ca8:	30 08       	mov	r8,0
80003caa:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003cac:	6c 08       	ld.w	r8,r6[0x0]
80003cae:	b1 65       	lsl	r5,0x10
80003cb0:	e8 15 e0 00 	orl	r5,0xe000
80003cb4:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003cb8:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003cbc:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003cbe:	49 9a       	lddpc	r10,80003d20 <twim_write+0xac>
80003cc0:	e0 6b 03 02 	mov	r11,770
80003cc4:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80003cc6:	74 0a       	ld.w	r10,r10[0x0]
80003cc8:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003cca:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003ccc:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cce:	72 08       	ld.w	r8,r9[0x0]
80003cd0:	58 08       	cp.w	r8,0
80003cd2:	c0 80       	breq	80003ce2 <twim_write+0x6e>
80003cd4:	c0 b8       	rjmp	80003cea <twim_write+0x76>
		cpu_relax();
80003cd6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cda:	6c 08       	ld.w	r8,r6[0x0]
80003cdc:	58 08       	cp.w	r8,0
80003cde:	c0 30       	breq	80003ce4 <twim_write+0x70>
80003ce0:	c0 58       	rjmp	80003cea <twim_write+0x76>
80003ce2:	48 f6       	lddpc	r6,80003d1c <twim_write+0xa8>
80003ce4:	f0 1f 00 10 	mcall	80003d24 <twim_write+0xb0>
80003ce8:	cf 70       	breq	80003cd6 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003cea:	30 28       	mov	r8,2
80003cec:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cee:	48 c8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cf2:	5b c8       	cp.w	r8,-4
80003cf4:	c0 70       	breq	80003d02 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cf6:	48 a8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf8:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cfa:	5b e8       	cp.w	r8,-2
80003cfc:	c0 30       	breq	80003d02 <twim_write+0x8e>
80003cfe:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003d02:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003d06:	00 00       	add	r0,r0
80003d08:	00 00       	add	r0,r0
80003d0a:	01 f8       	ld.ub	r8,r0[0x7]
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	3c 60       	mov	r0,-58
80003d10:	00 00       	add	r0,r0
80003d12:	02 08       	add	r8,r1
80003d14:	00 00       	add	r0,r0
80003d16:	02 18       	sub	r8,r1
80003d18:	00 00       	add	r0,r0
80003d1a:	02 10       	sub	r0,r1
80003d1c:	00 00       	add	r0,r0
80003d1e:	02 04       	add	r4,r1
80003d20:	00 00       	add	r0,r0
80003d22:	02 0c       	add	r12,r1
80003d24:	80 00       	ld.sh	r0,r0[0x0]
80003d26:	3c 50       	mov	r0,-59

80003d28 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003d28:	d4 01       	pushm	lr
80003d2a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003d2c:	30 08       	mov	r8,0
80003d2e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80003d30:	30 08       	mov	r8,0
80003d32:	16 99       	mov	r9,r11
80003d34:	10 9a       	mov	r10,r8
80003d36:	1a 9b       	mov	r11,sp
80003d38:	f0 1f 00 02 	mcall	80003d40 <twim_probe+0x18>
}
80003d3c:	2f fd       	sub	sp,-4
80003d3e:	d8 02       	popm	pc
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	3c 74       	mov	r4,-57

80003d44 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003d44:	eb cd 40 e0 	pushm	r5-r7,lr
80003d48:	18 97       	mov	r7,r12
80003d4a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003d4c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003d50:	30 0a       	mov	r10,0
80003d52:	4a 59       	lddpc	r9,80003de4 <twim_master_init+0xa0>
80003d54:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003d56:	e6 18 00 01 	andh	r8,0x1,COH
80003d5a:	c0 b1       	brne	80003d70 <twim_master_init+0x2c>
		cpu_irq_disable ();
80003d5c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80003d5e:	3f f8       	mov	r8,-1
80003d60:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d62:	30 18       	mov	r8,1
80003d64:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d66:	e0 68 00 80 	mov	r8,128
80003d6a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003d6c:	d5 03       	csrf	0x10
80003d6e:	c0 88       	rjmp	80003d7e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80003d70:	3f f8       	mov	r8,-1
80003d72:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d74:	30 18       	mov	r8,1
80003d76:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d78:	e0 68 00 80 	mov	r8,128
80003d7c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003d7e:	3f f8       	mov	r8,-1
80003d80:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d82:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003d86:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003d88:	30 1a       	mov	r10,1
80003d8a:	e0 6b 03 20 	mov	r11,800
80003d8e:	49 7c       	lddpc	r12,80003de8 <twim_master_init+0xa4>
80003d90:	f0 1f 00 17 	mcall	80003dec <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003d94:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003d98:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003d9c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003d9e:	f0 09 18 00 	cp.b	r9,r8
80003da2:	f9 b8 01 10 	movne	r8,16
80003da6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003daa:	f9 b8 01 ff 	movne	r8,-1
80003dae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80003db2:	6a 0a       	ld.w	r10,r5[0x0]
80003db4:	6a 1b       	ld.w	r11,r5[0x4]
80003db6:	0e 9c       	mov	r12,r7
80003db8:	f0 1f 00 0e 	mcall	80003df0 <twim_master_init+0xac>
80003dbc:	5b 8c       	cp.w	r12,-8
80003dbe:	c1 00       	breq	80003dde <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003dc0:	6a 2b       	ld.w	r11,r5[0x8]
80003dc2:	0e 9c       	mov	r12,r7
80003dc4:	f0 1f 00 0c 	mcall	80003df4 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dc8:	48 78       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dcc:	5b c8       	cp.w	r8,-4
80003dce:	c0 70       	breq	80003ddc <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dd0:	48 58       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dd2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dd4:	5b e8       	cp.w	r8,-2
80003dd6:	c0 30       	breq	80003ddc <twim_master_init+0x98>
80003dd8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003ddc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003dde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003de2:	00 00       	add	r0,r0
80003de4:	00 00       	add	r0,r0
80003de6:	02 04       	add	r4,r1
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3b 04       	mov	r4,-80
80003dec:	80 00       	ld.sh	r0,r0[0x0]
80003dee:	32 48       	mov	r8,36
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3b e0       	mov	r0,-66
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	3d 28       	mov	r8,-46

80003df8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003df8:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003dfa:	f6 08 15 04 	lsl	r8,r11,0x4
80003dfe:	14 38       	cp.w	r8,r10
80003e00:	f9 b8 08 10 	movls	r8,16
80003e04:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003e08:	f0 0b 02 4b 	mul	r11,r8,r11
80003e0c:	f6 09 16 01 	lsr	r9,r11,0x1
80003e10:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003e14:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003e18:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003e1c:	f2 cb 00 01 	sub	r11,r9,1
80003e20:	e0 4b ff fe 	cp.w	r11,65534
80003e24:	e0 88 00 03 	brls	80003e2a <usart_set_async_baudrate+0x32>
80003e28:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003e2a:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003e2c:	e8 6e 00 00 	mov	lr,524288
80003e30:	59 08       	cp.w	r8,16
80003e32:	fc 08 17 10 	movne	r8,lr
80003e36:	f9 b8 00 00 	moveq	r8,0
80003e3a:	e4 1b ff f7 	andh	r11,0xfff7
80003e3e:	e0 1b fe cf 	andl	r11,0xfecf
80003e42:	16 48       	or	r8,r11
80003e44:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003e46:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003e4a:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003e4e:	99 89       	st.w	r12[0x20],r9
80003e50:	d8 0a       	popm	pc,r12=0

80003e52 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003e52:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003e54:	e2 18 00 02 	andl	r8,0x2,COH
80003e58:	c0 31       	brne	80003e5e <usart_write_char+0xc>
80003e5a:	30 2c       	mov	r12,2
80003e5c:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003e5e:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003e62:	99 7b       	st.w	r12[0x1c],r11
80003e64:	5e fd       	retal	0
80003e66:	d7 03       	nop

80003e68 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003e68:	eb cd 40 e0 	pushm	r5-r7,lr
80003e6c:	18 96       	mov	r6,r12
80003e6e:	16 95       	mov	r5,r11
80003e70:	e0 67 27 0f 	mov	r7,9999
80003e74:	c0 68       	rjmp	80003e80 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003e76:	58 07       	cp.w	r7,0
80003e78:	c0 31       	brne	80003e7e <usart_putchar+0x16>
80003e7a:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003e7e:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003e80:	0a 9b       	mov	r11,r5
80003e82:	0c 9c       	mov	r12,r6
80003e84:	f0 1f 00 03 	mcall	80003e90 <usart_putchar+0x28>
80003e88:	cf 71       	brne	80003e76 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003e8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e8e:	00 00       	add	r0,r0
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	3e 52       	mov	r2,-27

80003e94 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003e94:	eb cd 40 c0 	pushm	r6-r7,lr
80003e98:	18 96       	mov	r6,r12
80003e9a:	16 97       	mov	r7,r11
  while (*string != '\0')
80003e9c:	17 8b       	ld.ub	r11,r11[0x0]
80003e9e:	58 0b       	cp.w	r11,0
80003ea0:	c0 80       	breq	80003eb0 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003ea2:	2f f7       	sub	r7,-1
80003ea4:	0c 9c       	mov	r12,r6
80003ea6:	f0 1f 00 04 	mcall	80003eb4 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003eaa:	0f 8b       	ld.ub	r11,r7[0x0]
80003eac:	58 0b       	cp.w	r11,0
80003eae:	cf a1       	brne	80003ea2 <usart_write_line+0xe>
80003eb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	3e 68       	mov	r8,-26

80003eb8 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003eb8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003ebc:	e6 18 00 01 	andh	r8,0x1,COH
80003ec0:	c0 71       	brne	80003ece <usart_reset+0x16>
80003ec2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003ec4:	3f f8       	mov	r8,-1
80003ec6:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003ec8:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003eca:	d5 03       	csrf	0x10
80003ecc:	c0 48       	rjmp	80003ed4 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003ece:	3f f8       	mov	r8,-1
80003ed0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003ed2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003ed4:	30 08       	mov	r8,0
80003ed6:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003ed8:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003eda:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003edc:	ea 68 61 0c 	mov	r8,680204
80003ee0:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003ee2:	5e fc       	retal	r12

80003ee4 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003ee4:	eb cd 40 e0 	pushm	r5-r7,lr
80003ee8:	18 96       	mov	r6,r12
80003eea:	16 97       	mov	r7,r11
80003eec:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003eee:	f0 1f 00 2f 	mcall	80003fa8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80003ef2:	58 07       	cp.w	r7,0
80003ef4:	c5 80       	breq	80003fa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003ef6:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003ef8:	30 49       	mov	r9,4
80003efa:	f2 08 18 00 	cp.b	r8,r9
80003efe:	e0 88 00 53 	brls	80003fa4 <usart_init_rs232+0xc0>
80003f02:	30 99       	mov	r9,9
80003f04:	f2 08 18 00 	cp.b	r8,r9
80003f08:	e0 8b 00 4e 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003f0c:	0f d9       	ld.ub	r9,r7[0x5]
80003f0e:	30 78       	mov	r8,7
80003f10:	f0 09 18 00 	cp.b	r9,r8
80003f14:	e0 8b 00 48 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003f18:	8e 39       	ld.sh	r9,r7[0x6]
80003f1a:	e0 68 01 01 	mov	r8,257
80003f1e:	f0 09 19 00 	cp.h	r9,r8
80003f22:	e0 8b 00 41 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003f26:	ef 39 00 08 	ld.ub	r9,r7[8]
80003f2a:	30 38       	mov	r8,3
80003f2c:	f0 09 18 00 	cp.b	r9,r8
80003f30:	e0 8b 00 3a 	brhi	80003fa4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003f34:	0a 9a       	mov	r10,r5
80003f36:	6e 0b       	ld.w	r11,r7[0x0]
80003f38:	0c 9c       	mov	r12,r6
80003f3a:	f0 1f 00 1d 	mcall	80003fac <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f3e:	58 1c       	cp.w	r12,1
80003f40:	c3 20       	breq	80003fa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80003f42:	0f c8       	ld.ub	r8,r7[0x4]
80003f44:	30 99       	mov	r9,9
80003f46:	f2 08 18 00 	cp.b	r8,r9
80003f4a:	c0 51       	brne	80003f54 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003f4c:	6c 18       	ld.w	r8,r6[0x4]
80003f4e:	b1 b8       	sbr	r8,0x11
80003f50:	8d 18       	st.w	r6[0x4],r8
80003f52:	c0 68       	rjmp	80003f5e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003f54:	6c 19       	ld.w	r9,r6[0x4]
80003f56:	20 58       	sub	r8,5
80003f58:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003f5c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003f5e:	6c 19       	ld.w	r9,r6[0x4]
80003f60:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003f64:	0f d8       	ld.ub	r8,r7[0x5]
80003f66:	a9 78       	lsl	r8,0x9
80003f68:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003f6c:	12 48       	or	r8,r9
80003f6e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003f70:	8e 38       	ld.sh	r8,r7[0x6]
80003f72:	30 29       	mov	r9,2
80003f74:	f2 08 19 00 	cp.h	r8,r9
80003f78:	e0 88 00 09 	brls	80003f8a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003f7c:	6c 18       	ld.w	r8,r6[0x4]
80003f7e:	ad b8       	sbr	r8,0xd
80003f80:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003f82:	8e b8       	ld.uh	r8,r7[0x6]
80003f84:	20 28       	sub	r8,2
80003f86:	8d a8       	st.w	r6[0x28],r8
80003f88:	c0 68       	rjmp	80003f94 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003f8a:	6c 19       	ld.w	r9,r6[0x4]
80003f8c:	5c 78       	castu.h	r8
80003f8e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003f92:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003f94:	6c 18       	ld.w	r8,r6[0x4]
80003f96:	e0 18 ff f0 	andl	r8,0xfff0
80003f9a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003f9c:	35 08       	mov	r8,80
80003f9e:	8d 08       	st.w	r6[0x0],r8
80003fa0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003fa4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3e b8       	mov	r8,-21
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	3d f8       	mov	r8,-33

80003fb0 <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80003fb0:	48 68       	lddpc	r8,80003fc8 <fat_check_open+0x18>
80003fb2:	11 89       	ld.ub	r9,r8[0x0]
80003fb4:	30 08       	mov	r8,0
80003fb6:	f0 09 18 00 	cp.b	r9,r8
80003fba:	c0 20       	breq	80003fbe <fat_check_open+0xe>
80003fbc:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80003fbe:	31 79       	mov	r9,23
80003fc0:	48 38       	lddpc	r8,80003fcc <fat_check_open+0x1c>
80003fc2:	b0 89       	st.b	r8[0x0],r9
80003fc4:	5e fd       	retal	0
80003fc6:	00 00       	add	r0,r0
80003fc8:	00 00       	add	r0,r0
80003fca:	04 4c       	or	r12,r2
80003fcc:	00 00       	add	r0,r0
80003fce:	06 dc       	st.w	--r3,r12

80003fd0 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003fd0:	48 68       	lddpc	r8,80003fe8 <fat_check_select+0x18>
80003fd2:	90 19       	ld.sh	r9,r8[0x2]
80003fd4:	3f f8       	mov	r8,-1
80003fd6:	f0 09 19 00 	cp.h	r9,r8
80003fda:	c0 20       	breq	80003fde <fat_check_select+0xe>
80003fdc:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003fde:	30 f9       	mov	r9,15
80003fe0:	48 38       	lddpc	r8,80003fec <fat_check_select+0x1c>
80003fe2:	b0 89       	st.b	r8[0x0],r9
80003fe4:	5e fd       	retal	0
80003fe6:	00 00       	add	r0,r0
80003fe8:	00 00       	add	r0,r0
80003fea:	06 d8       	st.w	--r3,r8
80003fec:	00 00       	add	r0,r0
80003fee:	06 dc       	st.w	--r3,r12

80003ff0 <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80003ff0:	48 58       	lddpc	r8,80004004 <fat_check_is_file+0x14>
80003ff2:	11 a8       	ld.ub	r8,r8[0x2]
80003ff4:	e2 18 00 18 	andl	r8,0x18,COH
80003ff8:	c0 21       	brne	80003ffc <fat_check_is_file+0xc>
80003ffa:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003ffc:	31 39       	mov	r9,19
80003ffe:	48 38       	lddpc	r8,80004008 <fat_check_is_file+0x18>
80004000:	b0 89       	st.b	r8[0x0],r9
80004002:	5e fd       	retal	0
80004004:	00 00       	add	r0,r0
80004006:	04 4c       	or	r12,r2
80004008:	00 00       	add	r0,r0
8000400a:	06 dc       	st.w	--r3,r12

8000400c <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
8000400c:	49 68       	lddpc	r8,80004064 <fat_checkcluster+0x58>
8000400e:	70 18       	ld.w	r8,r8[0x4]
80004010:	58 08       	cp.w	r8,0
80004012:	c0 21       	brne	80004016 <fat_checkcluster+0xa>
80004014:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80004016:	49 59       	lddpc	r9,80004068 <fat_checkcluster+0x5c>
80004018:	13 89       	ld.ub	r9,r9[0x0]
8000401a:	30 3a       	mov	r10,3
8000401c:	f4 09 18 00 	cp.b	r9,r10
80004020:	c0 a1       	brne	80004034 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80004022:	e0 69 ff f7 	mov	r9,65527
80004026:	ea 19 0f ff 	orh	r9,0xfff
8000402a:	12 38       	cp.w	r8,r9
8000402c:	e0 8b 00 19 	brhi	8000405e <fat_checkcluster+0x52>
80004030:	5f 0c       	sreq	r12
80004032:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004034:	30 2a       	mov	r10,2
80004036:	f4 09 18 00 	cp.b	r9,r10
8000403a:	c0 71       	brne	80004048 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
8000403c:	e0 48 ff f7 	cp.w	r8,65527
80004040:	e0 8b 00 0f 	brhi	8000405e <fat_checkcluster+0x52>
80004044:	5f 0c       	sreq	r12
80004046:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004048:	30 1a       	mov	r10,1
8000404a:	f4 09 18 00 	cp.b	r9,r10
8000404e:	c0 20       	breq	80004052 <fat_checkcluster+0x46>
80004050:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80004052:	e0 48 0f f7 	cp.w	r8,4087
80004056:	e0 8b 00 04 	brhi	8000405e <fat_checkcluster+0x52>
8000405a:	5f 0c       	sreq	r12
8000405c:	5e fc       	retal	r12
8000405e:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80004060:	5e fc       	retal	r12
80004062:	00 00       	add	r0,r0
80004064:	00 00       	add	r0,r0
80004066:	07 2c       	ld.uh	r12,r3++
80004068:	00 00       	add	r0,r0
8000406a:	06 d8       	st.w	--r3,r8

8000406c <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
8000406c:	30 0a       	mov	r10,0
8000406e:	48 88       	lddpc	r8,8000408c <fat_cache_clusterlist_reset+0x20>
80004070:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80004072:	48 88       	lddpc	r8,80004090 <fat_cache_clusterlist_reset+0x24>
80004074:	30 19       	mov	r9,1
80004076:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004078:	3f f9       	mov	r9,-1
8000407a:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
8000407c:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000407e:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004082:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004086:	f1 69 00 15 	st.b	r8[21],r9
   }
}
8000408a:	5e fc       	retal	r12
8000408c:	00 00       	add	r0,r0
8000408e:	06 de       	st.w	--r3,lr
80004090:	00 00       	add	r0,r0
80004092:	04 60       	and	r0,r2

80004094 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80004094:	48 c9       	lddpc	r9,800040c4 <fat_cache_clusterlist_update_start+0x30>
80004096:	13 88       	ld.ub	r8,r9[0x0]
80004098:	f8 08 18 00 	cp.b	r8,r12
8000409c:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
8000409e:	48 ba       	lddpc	r10,800040c8 <fat_cache_clusterlist_update_start+0x34>
800040a0:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800040a2:	f0 0a 15 02 	lsl	r10,r8,0x2
800040a6:	10 0a       	add	r10,r8
800040a8:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800040ac:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800040ae:	3f fb       	mov	r11,-1
800040b0:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800040b2:	2f fa       	sub	r10,-1
800040b4:	48 6b       	lddpc	r11,800040cc <fat_cache_clusterlist_update_start+0x38>
800040b6:	76 0b       	ld.w	r11,r11[0x0]
800040b8:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800040bc:	48 59       	lddpc	r9,800040d0 <fat_cache_clusterlist_update_start+0x3c>
800040be:	72 19       	ld.w	r9,r9[0x4]
800040c0:	91 29       	st.w	r8[0x8],r9
}
800040c2:	5e fc       	retal	r12
800040c4:	00 00       	add	r0,r0
800040c6:	04 60       	and	r0,r2
800040c8:	00 00       	add	r0,r0
800040ca:	06 de       	st.w	--r3,lr
800040cc:	00 00       	add	r0,r0
800040ce:	07 2c       	ld.uh	r12,r3++
800040d0:	00 00       	add	r0,r0
800040d2:	07 34       	ld.ub	r4,r3++

800040d4 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
800040d4:	49 88       	lddpc	r8,80004134 <fat_cache_clusterlist_update_select+0x60>
800040d6:	11 88       	ld.ub	r8,r8[0x0]
800040d8:	49 8a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
800040da:	f0 08 00 2b 	add	r11,r8,r8<<0x2
800040de:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
800040e2:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
800040e4:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040e6:	15 8a       	ld.ub	r10,r10[0x0]
800040e8:	f2 0a 18 00 	cp.b	r10,r9
800040ec:	c0 a1       	brne	80004100 <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800040ee:	49 3a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
800040f0:	15 9a       	ld.ub	r10,r10[0x1]
800040f2:	f4 0b 18 00 	cp.b	r11,r10
800040f6:	e0 88 00 05 	brls	80004100 <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040fa:	2f fa       	sub	r10,-1
800040fc:	48 fc       	lddpc	r12,80004138 <fat_cache_clusterlist_update_select+0x64>
800040fe:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004100:	48 ea       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
80004102:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004106:	f2 0a 18 00 	cp.b	r10,r9
8000410a:	c0 c1       	brne	80004122 <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
8000410c:	48 b9       	lddpc	r9,80004138 <fat_cache_clusterlist_update_select+0x64>
8000410e:	f3 39 00 15 	ld.ub	r9,r9[21]
80004112:	f2 0b 18 00 	cp.b	r11,r9
80004116:	e0 88 00 06 	brls	80004122 <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
8000411a:	2f f9       	sub	r9,-1
8000411c:	48 7a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
8000411e:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80004122:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004126:	48 59       	lddpc	r9,80004138 <fat_cache_clusterlist_update_select+0x64>
80004128:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000412c:	30 09       	mov	r9,0
8000412e:	b0 99       	st.b	r8[0x1],r9
}
80004130:	5e fc       	retal	r12
80004132:	00 00       	add	r0,r0
80004134:	00 00       	add	r0,r0
80004136:	06 de       	st.w	--r3,lr
80004138:	00 00       	add	r0,r0
8000413a:	04 60       	and	r0,r2

8000413c <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
8000413c:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80004140:	49 08       	lddpc	r8,80004180 <fat_cache_clusterlist_update_finish+0x44>
80004142:	11 88       	ld.ub	r8,r8[0x0]
80004144:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004148:	48 f9       	lddpc	r9,80004184 <fat_cache_clusterlist_update_finish+0x48>
8000414a:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000414e:	f0 ca ff f8 	sub	r10,r8,-8
80004152:	48 eb       	lddpc	r11,80004188 <fat_cache_clusterlist_update_finish+0x4c>
80004154:	17 97       	ld.ub	r7,r11[0x1]
80004156:	74 09       	ld.w	r9,r10[0x0]
80004158:	f2 07 0d 06 	divu	r6,r9,r7
8000415c:	0e 99       	mov	r9,r7
8000415e:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80004160:	17 8b       	ld.ub	r11,r11[0x0]
80004162:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80004164:	74 0b       	ld.w	r11,r10[0x0]
80004166:	12 1b       	sub	r11,r9
80004168:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
8000416a:	48 9a       	lddpc	r10,8000418c <fat_cache_clusterlist_update_finish+0x50>
8000416c:	74 0b       	ld.w	r11,r10[0x0]
8000416e:	12 1b       	sub	r11,r9
80004170:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80004172:	74 1a       	ld.w	r10,r10[0x4]
80004174:	14 09       	add	r9,r10
80004176:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80004178:	f0 1f 00 06 	mcall	80004190 <fat_cache_clusterlist_update_finish+0x54>
}
8000417c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004180:	00 00       	add	r0,r0
80004182:	06 de       	st.w	--r3,lr
80004184:	00 00       	add	r0,r0
80004186:	04 60       	and	r0,r2
80004188:	00 00       	add	r0,r0
8000418a:	06 8c       	andn	r12,r3
8000418c:	00 00       	add	r0,r0
8000418e:	07 34       	ld.ub	r4,r3++
80004190:	80 00       	ld.sh	r0,r0[0x0]
80004192:	40 d4       	lddsp	r4,sp[0x34]

80004194 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80004194:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80004198:	4c 18       	lddpc	r8,8000429c <fat_cache_clusterlist_update_read+0x108>
8000419a:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000419c:	4c 18       	lddpc	r8,800042a0 <fat_cache_clusterlist_update_read+0x10c>
8000419e:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041a0:	4c 18       	lddpc	r8,800042a4 <fat_cache_clusterlist_update_read+0x110>
800041a2:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041a4:	4c 18       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041a6:	11 88       	ld.ub	r8,r8[0x0]
800041a8:	f8 08 18 00 	cp.b	r8,r12
800041ac:	c1 11       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
800041ae:	4b f8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041b0:	11 a8       	ld.ub	r8,r8[0x2]
800041b2:	f2 08 18 00 	cp.b	r8,r9
800041b6:	c0 c1       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041b8:	4b c8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041ba:	70 18       	ld.w	r8,r8[0x4]
800041bc:	14 38       	cp.w	r8,r10
800041be:	c0 81       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041c0:	4b a8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041c2:	70 28       	ld.w	r8,r8[0x8]
800041c4:	10 3b       	cp.w	r11,r8
800041c6:	c0 43       	brcs	800041ce <fat_cache_clusterlist_update_read+0x3a>
800041c8:	30 0a       	mov	r10,0
800041ca:	14 99       	mov	r9,r10
800041cc:	c1 88       	rjmp	800041fc <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041ce:	4b 78       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041d0:	f1 38 00 14 	ld.ub	r8,r8[20]
800041d4:	f8 08 18 00 	cp.b	r8,r12
800041d8:	c5 e1       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
800041da:	4b 48       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041dc:	f1 38 00 16 	ld.ub	r8,r8[22]
800041e0:	f2 08 18 00 	cp.b	r8,r9
800041e4:	c5 81       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041e6:	4b 18       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041e8:	70 68       	ld.w	r8,r8[0x18]
800041ea:	14 38       	cp.w	r8,r10
800041ec:	c5 41       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041ee:	4a f8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041f0:	70 78       	ld.w	r8,r8[0x1c]
800041f2:	16 38       	cp.w	r8,r11
800041f4:	e0 8b 00 50 	brhi	80004294 <fat_cache_clusterlist_update_read+0x100>
800041f8:	30 1a       	mov	r10,1
800041fa:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
800041fc:	f2 0e 15 02 	lsl	lr,r9,0x2
80004200:	12 0e       	add	lr,r9
80004202:	4a ac       	lddpc	r12,800042a8 <fat_cache_clusterlist_update_read+0x114>
80004204:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80004208:	78 4c       	ld.w	r12,r12[0x10]
8000420a:	f6 08 01 08 	sub	r8,r11,r8
8000420e:	10 3c       	cp.w	r12,r8
80004210:	e0 88 00 16 	brls	8000423c <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004214:	4a 4b       	lddpc	r11,800042a4 <fat_cache_clusterlist_update_read+0x110>
80004216:	f2 0e 15 02 	lsl	lr,r9,0x2
8000421a:	fc 09 00 09 	add	r9,lr,r9
8000421e:	4a 3e       	lddpc	lr,800042a8 <fat_cache_clusterlist_update_read+0x114>
80004220:	fc 09 00 29 	add	r9,lr,r9<<0x2
80004224:	72 39       	ld.w	r9,r9[0xc]
80004226:	f0 09 00 09 	add	r9,r8,r9
8000422a:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
8000422c:	10 1c       	sub	r12,r8
8000422e:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80004230:	49 f8       	lddpc	r8,800042ac <fat_cache_clusterlist_update_read+0x118>
80004232:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004234:	f0 1f 00 1f 	mcall	800042b0 <fat_cache_clusterlist_update_read+0x11c>
80004238:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
8000423c:	49 c8       	lddpc	r8,800042ac <fat_cache_clusterlist_update_read+0x118>
8000423e:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80004240:	f2 08 15 02 	lsl	r8,r9,0x2
80004244:	f0 09 00 09 	add	r9,r8,r9
80004248:	49 88       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
8000424a:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000424e:	3f f9       	mov	r9,-1
80004250:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004252:	70 4c       	ld.w	r12,r8[0x10]
80004254:	49 2a       	lddpc	r10,8000429c <fat_cache_clusterlist_update_read+0x108>
80004256:	15 99       	ld.ub	r9,r10[0x1]
80004258:	70 3e       	ld.w	lr,r8[0xc]
8000425a:	f8 0e 00 0e 	add	lr,r12,lr
8000425e:	20 1e       	sub	lr,1
80004260:	74 57       	ld.w	r7,r10[0x14]
80004262:	fc 07 01 07 	sub	r7,lr,r7
80004266:	74 4a       	ld.w	r10,r10[0x10]
80004268:	14 17       	sub	r7,r10
8000426a:	ee 09 0d 06 	divu	r6,r7,r9
8000426e:	0c 97       	mov	r7,r6
80004270:	2f e7       	sub	r7,-2
80004272:	48 ca       	lddpc	r10,800042a0 <fat_cache_clusterlist_update_read+0x10c>
80004274:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004276:	2f 88       	sub	r8,-8
80004278:	70 0a       	ld.w	r10,r8[0x0]
8000427a:	14 0c       	add	r12,r10
8000427c:	f8 c7 00 01 	sub	r7,r12,1
80004280:	ee 09 0d 06 	divu	r6,r7,r9
80004284:	ad 39       	mul	r9,r6
80004286:	48 8a       	lddpc	r10,800042a4 <fat_cache_clusterlist_update_read+0x110>
80004288:	f6 09 01 09 	sub	r9,r11,r9
8000428c:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
8000428e:	91 0b       	st.w	r8[0x0],r11
80004290:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80004294:	f0 1f 00 08 	mcall	800042b4 <fat_cache_clusterlist_update_read+0x120>
80004298:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000429c:	00 00       	add	r0,r0
8000429e:	06 8c       	andn	r12,r3
800042a0:	00 00       	add	r0,r0
800042a2:	07 2c       	ld.uh	r12,r3++
800042a4:	00 00       	add	r0,r0
800042a6:	07 34       	ld.ub	r4,r3++
800042a8:	00 00       	add	r0,r0
800042aa:	04 60       	and	r0,r2
800042ac:	00 00       	add	r0,r0
800042ae:	06 de       	st.w	--r3,lr
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	40 d4       	lddsp	r4,sp[0x34]
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	40 94       	lddsp	r4,sp[0x24]

800042b8 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
800042b8:	30 d9       	mov	r9,13
800042ba:	48 48       	lddpc	r8,800042c8 <fat_entry_is_dir+0x10>
800042bc:	b0 89       	st.b	r8[0x0],r9
800042be:	48 48       	lddpc	r8,800042cc <fat_entry_is_dir+0x14>
800042c0:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
800042c2:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800042c6:	5e fc       	retal	r12
800042c8:	00 00       	add	r0,r0
800042ca:	06 dc       	st.w	--r3,r12
800042cc:	00 00       	add	r0,r0
800042ce:	04 4c       	or	r12,r2

800042d0 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800042d0:	3f f9       	mov	r9,-1
800042d2:	48 c8       	lddpc	r8,80004300 <fat_clear_entry_info_and_ptr+0x30>
800042d4:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800042d6:	48 c8       	lddpc	r8,80004304 <fat_clear_entry_info_and_ptr+0x34>
800042d8:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
800042dc:	f1 39 00 2d 	ld.ub	r9,r8[45]
800042e0:	30 08       	mov	r8,0
800042e2:	f0 09 18 00 	cp.b	r9,r8
800042e6:	c0 51       	brne	800042f0 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
800042e8:	10 99       	mov	r9,r8
800042ea:	48 78       	lddpc	r8,80004304 <fat_clear_entry_info_and_ptr+0x34>
800042ec:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
800042f0:	48 68       	lddpc	r8,80004308 <fat_clear_entry_info_and_ptr+0x38>
800042f2:	30 09       	mov	r9,0
800042f4:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
800042f6:	30 0a       	mov	r10,0
800042f8:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
800042fa:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
800042fc:	b0 89       	st.b	r8[0x0],r9
}
800042fe:	5e fc       	retal	r12
80004300:	00 00       	add	r0,r0
80004302:	06 d8       	st.w	--r3,r8
80004304:	00 00       	add	r0,r0
80004306:	06 8c       	andn	r12,r3
80004308:	00 00       	add	r0,r0
8000430a:	04 4c       	or	r12,r2

8000430c <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
8000430c:	30 08       	mov	r8,0
8000430e:	f0 0c 19 00 	cp.h	r12,r8
80004312:	5f 0a       	sreq	r10
80004314:	35 c9       	mov	r9,92
80004316:	f2 0c 19 00 	cp.h	r12,r9
8000431a:	5f 09       	sreq	r9
8000431c:	f5 e9 10 09 	or	r9,r10,r9
80004320:	f0 09 18 00 	cp.b	r9,r8
80004324:	c0 20       	breq	80004328 <fat_check_eof_name+0x1c>
80004326:	5e ff       	retal	1
80004328:	32 f8       	mov	r8,47
8000432a:	f0 0c 19 00 	cp.h	r12,r8
8000432e:	5f 0c       	sreq	r12
}
80004330:	5e fc       	retal	r12
80004332:	d7 03       	nop

80004334 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80004334:	48 48       	lddpc	r8,80004344 <fat_get_ptr_entry+0x10>
80004336:	90 98       	ld.uh	r8,r8[0x2]
80004338:	a5 78       	lsl	r8,0x5
8000433a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000433e:	48 3c       	lddpc	r12,80004348 <fat_get_ptr_entry+0x14>
80004340:	10 0c       	add	r12,r8
80004342:	5e fc       	retal	r12
80004344:	00 00       	add	r0,r0
80004346:	06 d8       	st.w	--r3,r8
80004348:	00 00       	add	r0,r0
8000434a:	04 8c       	andn	r12,r2

8000434c <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
8000434c:	d4 31       	pushm	r0-r7,lr
8000434e:	20 3d       	sub	sp,12
80004350:	18 97       	mov	r7,r12
80004352:	16 94       	mov	r4,r11
80004354:	14 96       	mov	r6,r10
80004356:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80004358:	f0 1f 00 5e 	mcall	800044d0 <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000435c:	19 88       	ld.ub	r8,r12[0x0]
8000435e:	30 09       	mov	r9,0
80004360:	f2 08 18 00 	cp.b	r8,r9
80004364:	5f 0b       	sreq	r11
80004366:	3e 5a       	mov	r10,-27
80004368:	f4 08 18 00 	cp.b	r8,r10
8000436c:	5f 0a       	sreq	r10
8000436e:	f7 ea 10 0a 	or	r10,r11,r10
80004372:	f2 0a 18 00 	cp.b	r10,r9
80004376:	c0 71       	brne	80004384 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80004378:	f9 3a 00 0b 	ld.ub	r10,r12[11]
8000437c:	30 f9       	mov	r9,15
8000437e:	f2 0a 18 00 	cp.b	r10,r9
80004382:	c0 60       	breq	8000438e <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004384:	30 b9       	mov	r9,11
80004386:	4d 48       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
80004388:	b0 89       	st.b	r8[0x0],r9
8000438a:	30 0c       	mov	r12,0
      return false;
8000438c:	c9 c8       	rjmp	800044c4 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
8000438e:	4d 39       	lddpc	r9,800044d8 <fat_entry_longname+0x18c>
80004390:	13 8a       	ld.ub	r10,r9[0x0]
80004392:	30 09       	mov	r9,0
80004394:	f2 0a 18 00 	cp.b	r10,r9
80004398:	c0 90       	breq	800043aa <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000439a:	e2 18 00 40 	andl	r8,0x40,COH
8000439e:	c0 61       	brne	800043aa <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800043a0:	31 09       	mov	r9,16
800043a2:	4c d8       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
800043a4:	b0 89       	st.b	r8[0x0],r9
800043a6:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800043a8:	c8 e8       	rjmp	800044c4 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800043aa:	2f fc       	sub	r12,-1
800043ac:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043ae:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043b2:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800043b4:	4c 95       	lddpc	r5,800044d8 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043b6:	20 14       	sub	r4,1
800043b8:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800043ba:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800043bc:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043be:	19 89       	ld.ub	r9,r12[0x0]
800043c0:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
800043c2:	19 99       	ld.ub	r9,r12[0x1]
800043c4:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
800043c6:	58 06       	cp.w	r6,0
800043c8:	c0 f0       	breq	800043e6 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
800043ca:	0b 89       	ld.ub	r9,r5[0x0]
800043cc:	f6 09 18 00 	cp.b	r9,r11
800043d0:	c3 91       	brne	80004442 <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043d2:	40 1e       	lddsp	lr,sp[0x4]
800043d4:	1c 38       	cp.w	r8,lr
800043d6:	c0 55       	brlt	800043e0 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800043d8:	30 08       	mov	r8,0
800043da:	ae 88       	st.b	r7[0x0],r8
800043dc:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
800043de:	c7 38       	rjmp	800044c4 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800043e0:	9a 59       	ld.sh	r9,sp[0xa]
800043e2:	ae 89       	st.b	r7[0x0],r9
800043e4:	c2 f8       	rjmp	80004442 <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
800043e6:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800043e8:	32 a3       	mov	r3,42
800043ea:	e6 09 19 00 	cp.h	r9,r3
800043ee:	c6 a0       	breq	800044c2 <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043f0:	9a 5e       	ld.sh	lr,sp[0xa]
800043f2:	58 0e       	cp.w	lr,0
800043f4:	c0 e1       	brne	80004410 <fat_entry_longname+0xc4>
800043f6:	35 c0       	mov	r0,92
800043f8:	e0 09 19 00 	cp.h	r9,r0
800043fc:	5f 12       	srne	r2
800043fe:	32 f3       	mov	r3,47
80004400:	e6 09 19 00 	cp.h	r9,r3
80004404:	5f 13       	srne	r3
80004406:	e5 e3 00 03 	and	r3,r2,r3
8000440a:	f6 03 18 00 	cp.b	r3,r11
8000440e:	c1 e0       	breq	8000444a <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80004410:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80004414:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80004418:	e4 c0 ff e0 	sub	r0,r2,-32
8000441c:	00 33       	cp.w	r3,r0
8000441e:	c0 41       	brne	80004426 <fat_entry_longname+0xda>
80004420:	40 00       	lddsp	r0,sp[0x0]
80004422:	58 00       	cp.w	r0,0
80004424:	c0 f0       	breq	80004442 <fat_entry_longname+0xf6>
80004426:	22 02       	sub	r2,32
80004428:	04 33       	cp.w	r3,r2
8000442a:	c0 41       	brne	80004432 <fat_entry_longname+0xe6>
8000442c:	40 03       	lddsp	r3,sp[0x0]
8000442e:	58 03       	cp.w	r3,0
80004430:	c0 90       	breq	80004442 <fat_entry_longname+0xf6>
80004432:	fc 09 19 00 	cp.h	r9,lr
80004436:	c0 60       	breq	80004442 <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80004438:	31 69       	mov	r9,22
8000443a:	4a 78       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
8000443c:	b0 89       	st.b	r8[0x0],r9
8000443e:	30 0c       	mov	r12,0
           return false;
80004440:	c4 28       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
80004442:	9a 59       	ld.sh	r9,sp[0xa]
80004444:	e2 09 19 00 	cp.h	r9,r1
80004448:	c0 b1       	brne	8000445e <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
8000444a:	4a 49       	lddpc	r9,800044d8 <fat_entry_longname+0x18c>
8000444c:	13 8a       	ld.ub	r10,r9[0x0]
8000444e:	30 09       	mov	r9,0
80004450:	f2 0a 18 00 	cp.b	r10,r9
80004454:	c3 70       	breq	800044c2 <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80004456:	2f f8       	sub	r8,-1
80004458:	ae 08       	st.h	r7[0x0],r8
8000445a:	30 1c       	mov	r12,1
8000445c:	c3 48       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000445e:	e8 08 18 00 	cp.b	r8,r4
80004462:	c0 31       	brne	80004468 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
80004464:	2f dc       	sub	r12,-3
80004466:	c2 58       	rjmp	800044b0 <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
80004468:	30 a9       	mov	r9,10
8000446a:	f2 08 18 00 	cp.b	r8,r9
8000446e:	c0 31       	brne	80004474 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
80004470:	2f ec       	sub	r12,-2
80004472:	c1 f8       	rjmp	800044b0 <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
80004474:	30 c9       	mov	r9,12
80004476:	f2 08 18 00 	cp.b	r8,r9
8000447a:	c1 b1       	brne	800044b0 <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000447c:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80004480:	e2 18 00 40 	andl	r8,0x40,COH
80004484:	c0 61       	brne	80004490 <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80004486:	31 09       	mov	r9,16
80004488:	49 38       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
8000448a:	b0 89       	st.b	r8[0x0],r9
8000448c:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
8000448e:	c1 b8       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80004490:	58 06       	cp.w	r6,0
80004492:	c0 b0       	breq	800044a8 <fat_entry_longname+0x15c>
80004494:	49 18       	lddpc	r8,800044d8 <fat_entry_longname+0x18c>
80004496:	11 89       	ld.ub	r9,r8[0x0]
80004498:	30 08       	mov	r8,0
8000449a:	f0 09 18 00 	cp.b	r9,r8
8000449e:	c1 50       	breq	800044c8 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800044a0:	30 e8       	mov	r8,14
800044a2:	ae 08       	st.h	r7[0x0],r8
800044a4:	30 1c       	mov	r12,1
               return true;
800044a6:	c0 f8       	rjmp	800044c4 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800044a8:	0f 9c       	ld.ub	r12,r7[0x1]
800044aa:	f0 1f 00 0d 	mcall	800044dc <fat_entry_longname+0x190>
800044ae:	c0 b8       	rjmp	800044c4 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800044b0:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800044b2:	f6 09 18 00 	cp.b	r9,r11
800044b6:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800044ba:	2f f8       	sub	r8,-1
800044bc:	5c 58       	castu.b	r8
      ptr_entry+=2;
800044be:	2f ec       	sub	r12,-2
   }
800044c0:	c7 fb       	rjmp	800043be <fat_entry_longname+0x72>
800044c2:	30 1c       	mov	r12,1
}
800044c4:	2f dd       	sub	sp,-12
800044c6:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800044c8:	30 08       	mov	r8,0
800044ca:	ae 98       	st.b	r7[0x1],r8
800044cc:	30 1c       	mov	r12,1
               }
               return true;
800044ce:	cf bb       	rjmp	800044c4 <fat_entry_longname+0x178>
800044d0:	80 00       	ld.sh	r0,r0[0x0]
800044d2:	43 34       	lddsp	r4,sp[0xcc]
800044d4:	00 00       	add	r0,r0
800044d6:	06 dc       	st.w	--r3,r12
800044d8:	00 00       	add	r0,r0
800044da:	06 dd       	st.w	--r3,sp
800044dc:	80 00       	ld.sh	r0,r0[0x0]
800044de:	43 0c       	lddsp	r12,sp[0xc0]

800044e0 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
800044e0:	d4 31       	pushm	r0-r7,lr
800044e2:	20 2d       	sub	sp,8
800044e4:	18 97       	mov	r7,r12
800044e6:	50 1b       	stdsp	sp[0x4],r11
800044e8:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
800044ea:	31 69       	mov	r9,22
800044ec:	4b c8       	lddpc	r8,800045dc <fat_entry_shortname+0xfc>
800044ee:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
800044f0:	f0 1f 00 3c 	mcall	800045e0 <fat_entry_shortname+0x100>
800044f4:	30 08       	mov	r8,0
800044f6:	10 9a       	mov	r10,r8
800044f8:	30 1b       	mov	r11,1
800044fa:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
800044fc:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
800044fe:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80004500:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80004502:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80004504:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004506:	fc 08 18 00 	cp.b	r8,lr
8000450a:	c1 90       	breq	8000453c <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
8000450c:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80004510:	ea 08 18 00 	cp.b	r8,r5
80004514:	c0 41       	brne	8000451c <fat_entry_shortname+0x3c>
80004516:	40 01       	lddsp	r1,sp[0x0]
80004518:	58 01       	cp.w	r1,0
8000451a:	c0 81       	brne	8000452a <fat_entry_shortname+0x4a>
8000451c:	e8 09 18 00 	cp.b	r9,r4
80004520:	c0 f1       	brne	8000453e <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80004522:	ea 08 18 00 	cp.b	r8,r5
80004526:	e0 8b 00 0b 	brhi	8000453c <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000452a:	f9 39 00 08 	ld.ub	r9,r12[8]
8000452e:	e8 09 18 00 	cp.b	r9,r4
80004532:	c0 50       	breq	8000453c <fat_entry_shortname+0x5c>
80004534:	30 78       	mov	r8,7
80004536:	32 e9       	mov	r9,46
80004538:	50 03       	stdsp	sp[0x0],r3
8000453a:	c0 28       	rjmp	8000453e <fat_entry_shortname+0x5e>
8000453c:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000453e:	58 06       	cp.w	r6,0
80004540:	c1 80       	breq	80004570 <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
80004542:	4a 9b       	lddpc	r11,800045e4 <fat_entry_shortname+0x104>
80004544:	17 81       	ld.ub	r1,r11[0x0]
80004546:	30 0b       	mov	r11,0
80004548:	f6 01 18 00 	cp.b	r1,r11
8000454c:	c2 c1       	brne	800045a4 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000454e:	40 1b       	lddsp	r11,sp[0x4]
80004550:	20 1b       	sub	r11,1
80004552:	16 3a       	cp.w	r10,r11
80004554:	c0 35       	brlt	8000455a <fat_entry_shortname+0x7a>
80004556:	06 99       	mov	r9,r3
80004558:	c0 a8       	rjmp	8000456c <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000455a:	f2 c1 00 41 	sub	r1,r9,65
8000455e:	31 9b       	mov	r11,25
80004560:	f6 01 18 00 	cp.b	r1,r11
80004564:	e0 8b 00 04 	brhi	8000456c <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
80004568:	2e 09       	sub	r9,-32
8000456a:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
8000456c:	ae 89       	st.b	r7[0x0],r9
8000456e:	c1 b8       	rjmp	800045a4 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80004570:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
80004572:	e4 0b 18 00 	cp.b	r11,r2
80004576:	c2 f0       	breq	800045d4 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80004578:	58 09       	cp.w	r9,0
8000457a:	c0 c1       	brne	80004592 <fat_entry_shortname+0xb2>
8000457c:	35 c1       	mov	r1,92
8000457e:	e2 0b 18 00 	cp.b	r11,r1
80004582:	5f 10       	srne	r0
80004584:	32 f1       	mov	r1,47
80004586:	e2 0b 18 00 	cp.b	r11,r1
8000458a:	5f 11       	srne	r1
8000458c:	e1 e1 00 01 	and	r1,r0,r1
80004590:	c0 c0       	breq	800045a8 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
80004592:	f2 0b 18 00 	cp.b	r11,r9
80004596:	c0 70       	breq	800045a4 <fat_entry_shortname+0xc4>
80004598:	f2 c1 ff e0 	sub	r1,r9,-32
8000459c:	02 3b       	cp.w	r11,r1
8000459e:	c0 30       	breq	800045a4 <fat_entry_shortname+0xc4>
800045a0:	30 0c       	mov	r12,0
800045a2:	c1 a8       	rjmp	800045d6 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800045a4:	58 09       	cp.w	r9,0
800045a6:	c0 b1       	brne	800045bc <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800045a8:	48 f8       	lddpc	r8,800045e4 <fat_entry_shortname+0x104>
800045aa:	11 89       	ld.ub	r9,r8[0x0]
800045ac:	30 08       	mov	r8,0
800045ae:	f0 09 18 00 	cp.b	r9,r8
800045b2:	c1 10       	breq	800045d4 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800045b4:	2f fa       	sub	r10,-1
800045b6:	ae 0a       	st.h	r7[0x0],r10
800045b8:	30 1c       	mov	r12,1
800045ba:	c0 e8       	rjmp	800045d6 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800045bc:	48 a9       	lddpc	r9,800045e4 <fat_entry_shortname+0x104>
800045be:	13 8b       	ld.ub	r11,r9[0x0]
800045c0:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
800045c2:	f2 0b 18 00 	cp.b	r11,r9
800045c6:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800045ca:	2f fa       	sub	r10,-1
800045cc:	5c 5a       	castu.b	r10
      u8_pos_entry++;
800045ce:	2f f8       	sub	r8,-1
800045d0:	5c 58       	castu.b	r8
   }
800045d2:	c9 ab       	rjmp	80004506 <fat_entry_shortname+0x26>
800045d4:	30 1c       	mov	r12,1
}
800045d6:	2f ed       	sub	sp,-8
800045d8:	d8 32       	popm	r0-r7,pc
800045da:	00 00       	add	r0,r0
800045dc:	00 00       	add	r0,r0
800045de:	06 dc       	st.w	--r3,r12
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	43 34       	lddsp	r4,sp[0xcc]
800045e4:	00 00       	add	r0,r0
800045e6:	06 dd       	st.w	--r3,sp

800045e8 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800045e8:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800045ea:	f0 1f 00 10 	mcall	80004628 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
800045ee:	49 08       	lddpc	r8,8000462c <fat_get_entry_info+0x44>
800045f0:	f9 39 00 0b 	ld.ub	r9,r12[11]
800045f4:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
800045f6:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
800045fa:	f0 c9 ff fc 	sub	r9,r8,-4
800045fe:	15 8b       	ld.ub	r11,r10[0x0]
80004600:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80004602:	15 9a       	ld.ub	r10,r10[0x1]
80004604:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80004606:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000460a:	15 8b       	ld.ub	r11,r10[0x0]
8000460c:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000460e:	15 9a       	ld.ub	r10,r10[0x1]
80004610:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
80004612:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80004614:	2f 88       	sub	r8,-8
80004616:	19 89       	ld.ub	r9,r12[0x0]
80004618:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000461a:	19 99       	ld.ub	r9,r12[0x1]
8000461c:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000461e:	19 a9       	ld.ub	r9,r12[0x2]
80004620:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80004622:	19 b9       	ld.ub	r9,r12[0x3]
80004624:	b0 89       	st.b	r8[0x0],r9
}
80004626:	d8 02       	popm	pc
80004628:	80 00       	ld.sh	r0,r0[0x0]
8000462a:	43 34       	lddsp	r4,sp[0xcc]
8000462c:	00 00       	add	r0,r0
8000462e:	04 4c       	or	r12,r2

80004630 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80004630:	eb cd 40 80 	pushm	r7,lr
80004634:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80004636:	f0 1f 00 14 	mcall	80004684 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
8000463a:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
8000463c:	58 08       	cp.w	r8,0
8000463e:	c0 61       	brne	8000464a <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80004640:	30 a9       	mov	r9,10
80004642:	49 28       	lddpc	r8,80004688 <fat_entry_check+0x58>
80004644:	b0 89       	st.b	r8[0x0],r9
80004646:	30 07       	mov	r7,0
      return false;
80004648:	c1 a8       	rjmp	8000467c <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000464a:	30 ba       	mov	r10,11
8000464c:	48 f9       	lddpc	r9,80004688 <fat_entry_check+0x58>
8000464e:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80004650:	3e 59       	mov	r9,-27
80004652:	f2 08 18 00 	cp.b	r8,r9
80004656:	c1 20       	breq	8000467a <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80004658:	32 e9       	mov	r9,46
8000465a:	f2 08 18 00 	cp.b	r8,r9
8000465e:	c0 e0       	breq	8000467a <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80004660:	f9 38 00 0b 	ld.ub	r8,r12[11]
80004664:	10 99       	mov	r9,r8
80004666:	e2 19 00 08 	andl	r9,0x8,COH
8000466a:	c0 81       	brne	8000467a <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
8000466c:	e2 18 00 10 	andl	r8,0x10,COH
80004670:	c0 60       	breq	8000467c <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
80004672:	ec 17 00 01 	eorl	r7,0x1
80004676:	5c 57       	castu.b	r7
80004678:	c0 28       	rjmp	8000467c <fat_entry_check+0x4c>
8000467a:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
8000467c:	0e 9c       	mov	r12,r7
8000467e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004682:	00 00       	add	r0,r0
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	43 34       	lddsp	r4,sp[0xcc]
80004688:	00 00       	add	r0,r0
8000468a:	06 dc       	st.w	--r3,r12

8000468c <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000468c:	48 58       	lddpc	r8,800046a0 <fat_cache_reset+0x14>
8000468e:	3f f9       	mov	r9,-1
80004690:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
80004692:	30 09       	mov	r9,0
80004694:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80004698:	3f f9       	mov	r9,-1
8000469a:	91 39       	st.w	r8[0xc],r9
}
8000469c:	5e fc       	retal	r12
8000469e:	00 00       	add	r0,r0
800046a0:	00 00       	add	r0,r0
800046a2:	07 14       	ld.sh	r4,r3++

800046a4 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800046a4:	30 19       	mov	r9,1
800046a6:	48 38       	lddpc	r8,800046b0 <fat_cache_mark_sector_as_dirty+0xc>
800046a8:	f1 69 00 08 	st.b	r8[8],r9
}
800046ac:	5e fc       	retal	r12
800046ae:	00 00       	add	r0,r0
800046b0:	00 00       	add	r0,r0
800046b2:	07 14       	ld.sh	r4,r3++

800046b4 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
800046b4:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
800046b6:	f0 1f 00 11 	mcall	800046f8 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
800046ba:	f0 1f 00 11 	mcall	800046fc <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
800046be:	49 18       	lddpc	r8,80004700 <fat_write_entry_file+0x4c>
800046c0:	11 a9       	ld.ub	r9,r8[0x2]
800046c2:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
800046c6:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
800046ca:	f0 c9 ff fc 	sub	r9,r8,-4
800046ce:	13 9b       	ld.ub	r11,r9[0x1]
800046d0:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
800046d2:	13 8b       	ld.ub	r11,r9[0x0]
800046d4:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
800046d6:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
800046da:	13 bb       	ld.ub	r11,r9[0x3]
800046dc:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
800046de:	13 a9       	ld.ub	r9,r9[0x2]
800046e0:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
800046e2:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
800046e4:	2f 88       	sub	r8,-8
800046e6:	11 b9       	ld.ub	r9,r8[0x3]
800046e8:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
800046ea:	11 a9       	ld.ub	r9,r8[0x2]
800046ec:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
800046ee:	11 99       	ld.ub	r9,r8[0x1]
800046f0:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
800046f2:	11 88       	ld.ub	r8,r8[0x0]
800046f4:	b8 b8       	st.b	r12[0x3],r8
}
800046f6:	d8 02       	popm	pc
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	46 a4       	lddsp	r4,sp[0x1a8]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	43 34       	lddsp	r4,sp[0xcc]
80004700:	00 00       	add	r0,r0
80004702:	04 4c       	or	r12,r2

80004704 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80004704:	49 88       	lddpc	r8,80004764 <fat_check_nav_access_file+0x60>
80004706:	11 89       	ld.ub	r9,r8[0x0]
80004708:	30 08       	mov	r8,0
8000470a:	f0 09 18 00 	cp.b	r9,r8
8000470e:	c2 a0       	breq	80004762 <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004710:	49 68       	lddpc	r8,80004768 <fat_check_nav_access_file+0x64>
80004712:	11 89       	ld.ub	r9,r8[0x0]
80004714:	49 68       	lddpc	r8,8000476c <fat_check_nav_access_file+0x68>
80004716:	11 88       	ld.ub	r8,r8[0x0]
80004718:	f0 09 18 00 	cp.b	r9,r8
8000471c:	c2 31       	brne	80004762 <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000471e:	49 38       	lddpc	r8,80004768 <fat_check_nav_access_file+0x64>
80004720:	70 89       	ld.w	r9,r8[0x20]
80004722:	49 38       	lddpc	r8,8000476c <fat_check_nav_access_file+0x68>
80004724:	70 88       	ld.w	r8,r8[0x20]
80004726:	10 39       	cp.w	r9,r8
80004728:	c1 d1       	brne	80004762 <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000472a:	49 28       	lddpc	r8,80004770 <fat_check_nav_access_file+0x6c>
8000472c:	90 19       	ld.sh	r9,r8[0x2]
8000472e:	48 e8       	lddpc	r8,80004764 <fat_check_nav_access_file+0x60>
80004730:	90 18       	ld.sh	r8,r8[0x2]
80004732:	f0 09 19 00 	cp.h	r9,r8
80004736:	c1 61       	brne	80004762 <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004738:	58 0c       	cp.w	r12,0
8000473a:	c0 b0       	breq	80004750 <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
8000473c:	48 e8       	lddpc	r8,80004774 <fat_check_nav_access_file+0x70>
8000473e:	11 89       	ld.ub	r9,r8[0x0]
80004740:	30 08       	mov	r8,0
80004742:	f0 09 18 00 	cp.b	r9,r8
80004746:	c0 e0       	breq	80004762 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004748:	32 89       	mov	r9,40
8000474a:	48 c8       	lddpc	r8,80004778 <fat_check_nav_access_file+0x74>
8000474c:	b0 89       	st.b	r8[0x0],r9
8000474e:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
80004750:	48 98       	lddpc	r8,80004774 <fat_check_nav_access_file+0x70>
80004752:	11 88       	ld.ub	r8,r8[0x0]
80004754:	e2 18 00 02 	andl	r8,0x2,COH
80004758:	c0 50       	breq	80004762 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000475a:	32 99       	mov	r9,41
8000475c:	48 78       	lddpc	r8,80004778 <fat_check_nav_access_file+0x74>
8000475e:	b0 89       	st.b	r8[0x0],r9
80004760:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
80004762:	5e ff       	retal	1
80004764:	00 00       	add	r0,r0
80004766:	06 d4       	st.w	--r3,r4
80004768:	00 00       	add	r0,r0
8000476a:	06 8c       	andn	r12,r3
8000476c:	00 00       	add	r0,r0
8000476e:	06 e0       	st.h	--r3,r0
80004770:	00 00       	add	r0,r0
80004772:	06 d8       	st.w	--r3,r8
80004774:	00 00       	add	r0,r0
80004776:	06 c4       	st.b	r3++,r4
80004778:	00 00       	add	r0,r0
8000477a:	06 dc       	st.w	--r3,r12

8000477c <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
8000477c:	d4 21       	pushm	r4-r7,lr
8000477e:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80004780:	58 0c       	cp.w	r12,0
80004782:	c6 20       	breq	80004846 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80004784:	1a 97       	mov	r7,sp
80004786:	4b 28       	lddpc	r8,8000484c <fat_invert_nav+0xd0>
80004788:	70 09       	ld.w	r9,r8[0x0]
8000478a:	50 09       	stdsp	sp[0x0],r9
8000478c:	70 19       	ld.w	r9,r8[0x4]
8000478e:	50 19       	stdsp	sp[0x4],r9
80004790:	70 29       	ld.w	r9,r8[0x8]
80004792:	50 29       	stdsp	sp[0x8],r9
80004794:	70 39       	ld.w	r9,r8[0xc]
80004796:	50 39       	stdsp	sp[0xc],r9
80004798:	fa c9 ff f0 	sub	r9,sp,-16
8000479c:	f0 ca ff f0 	sub	r10,r8,-16
800047a0:	74 0b       	ld.w	r11,r10[0x0]
800047a2:	93 0b       	st.w	r9[0x0],r11
800047a4:	74 1b       	ld.w	r11,r10[0x4]
800047a6:	93 1b       	st.w	r9[0x4],r11
800047a8:	74 2b       	ld.w	r11,r10[0x8]
800047aa:	93 2b       	st.w	r9[0x8],r11
800047ac:	74 3a       	ld.w	r10,r10[0xc]
800047ae:	93 3a       	st.w	r9[0xc],r10
800047b0:	fa c9 ff e0 	sub	r9,sp,-32
800047b4:	f0 ca ff e0 	sub	r10,r8,-32
800047b8:	74 0b       	ld.w	r11,r10[0x0]
800047ba:	93 0b       	st.w	r9[0x0],r11
800047bc:	74 1b       	ld.w	r11,r10[0x4]
800047be:	93 1b       	st.w	r9[0x4],r11
800047c0:	74 2b       	ld.w	r11,r10[0x8]
800047c2:	93 2b       	st.w	r9[0x8],r11
800047c4:	74 3a       	ld.w	r10,r10[0xc]
800047c6:	93 3a       	st.w	r9[0xc],r10
800047c8:	70 c9       	ld.w	r9,r8[0x30]
800047ca:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
800047cc:	f8 c6 00 01 	sub	r6,r12,1
800047d0:	5c 56       	castu.b	r6
800047d2:	ec 04 10 34 	mul	r4,r6,52
800047d6:	49 f9       	lddpc	r9,80004850 <fat_invert_nav+0xd4>
800047d8:	12 04       	add	r4,r9
800047da:	33 45       	mov	r5,52
800047dc:	0a 9a       	mov	r10,r5
800047de:	08 9b       	mov	r11,r4
800047e0:	10 9c       	mov	r12,r8
800047e2:	f0 1f 00 1d 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
800047e6:	0a 9a       	mov	r10,r5
800047e8:	1a 9b       	mov	r11,sp
800047ea:	08 9c       	mov	r12,r4
800047ec:	f0 1f 00 1a 	mcall	80004854 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
800047f0:	49 ac       	lddpc	r12,80004858 <fat_invert_nav+0xdc>
800047f2:	78 08       	ld.w	r8,r12[0x0]
800047f4:	50 08       	stdsp	sp[0x0],r8
800047f6:	78 18       	ld.w	r8,r12[0x4]
800047f8:	50 18       	stdsp	sp[0x4],r8
800047fa:	78 28       	ld.w	r8,r12[0x8]
800047fc:	50 28       	stdsp	sp[0x8],r8
800047fe:	78 38       	ld.w	r8,r12[0xc]
80004800:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80004802:	ec 04 15 04 	lsl	r4,r6,0x4
80004806:	49 68       	lddpc	r8,8000485c <fat_invert_nav+0xe0>
80004808:	10 04       	add	r4,r8
8000480a:	31 05       	mov	r5,16
8000480c:	0a 9a       	mov	r10,r5
8000480e:	08 9b       	mov	r11,r4
80004810:	f0 1f 00 11 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80004814:	0a 9a       	mov	r10,r5
80004816:	1a 9b       	mov	r11,sp
80004818:	08 9c       	mov	r12,r4
8000481a:	f0 1f 00 0f 	mcall	80004854 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000481e:	49 14       	lddpc	r4,80004860 <fat_invert_nav+0xe4>
80004820:	30 45       	mov	r5,4
80004822:	0a 9a       	mov	r10,r5
80004824:	08 9b       	mov	r11,r4
80004826:	1a 9c       	mov	r12,sp
80004828:	f0 1f 00 0b 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
8000482c:	48 e8       	lddpc	r8,80004864 <fat_invert_nav+0xe8>
8000482e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004832:	0a 9a       	mov	r10,r5
80004834:	0c 9b       	mov	r11,r6
80004836:	08 9c       	mov	r12,r4
80004838:	f0 1f 00 07 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
8000483c:	0a 9a       	mov	r10,r5
8000483e:	1a 9b       	mov	r11,sp
80004840:	0c 9c       	mov	r12,r6
80004842:	f0 1f 00 05 	mcall	80004854 <fat_invert_nav+0xd8>
}
80004846:	2f 3d       	sub	sp,-52
80004848:	d8 22       	popm	r4-r7,pc
8000484a:	00 00       	add	r0,r0
8000484c:	00 00       	add	r0,r0
8000484e:	06 8c       	andn	r12,r3
80004850:	00 00       	add	r0,r0
80004852:	06 e0       	st.h	--r3,r0
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	7a d6       	ld.w	r6,sp[0x34]
80004858:	00 00       	add	r0,r0
8000485a:	04 4c       	or	r12,r2
8000485c:	00 00       	add	r0,r0
8000485e:	06 c4       	st.b	r3++,r4
80004860:	00 00       	add	r0,r0
80004862:	06 d8       	st.w	--r3,r8
80004864:	00 00       	add	r0,r0
80004866:	06 d4       	st.w	--r3,r4

80004868 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
80004868:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000486a:	49 08       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
8000486c:	f1 39 00 08 	ld.ub	r9,r8[8]
80004870:	30 18       	mov	r8,1
80004872:	f0 09 18 00 	cp.b	r9,r8
80004876:	c1 81       	brne	800048a6 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80004878:	48 c8       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
8000487a:	30 09       	mov	r9,0
8000487c:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004880:	11 8c       	ld.ub	r12,r8[0x0]
80004882:	f0 1f 00 0b 	mcall	800048ac <fat_cache_flush+0x44>
80004886:	c0 50       	breq	80004890 <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80004888:	31 49       	mov	r9,20
8000488a:	48 a8       	lddpc	r8,800048b0 <fat_cache_flush+0x48>
8000488c:	b0 89       	st.b	r8[0x0],r9
8000488e:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004890:	48 68       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
80004892:	48 9a       	lddpc	r10,800048b4 <fat_cache_flush+0x4c>
80004894:	70 1b       	ld.w	r11,r8[0x4]
80004896:	11 8c       	ld.ub	r12,r8[0x0]
80004898:	f0 1f 00 08 	mcall	800048b8 <fat_cache_flush+0x50>
8000489c:	c0 50       	breq	800048a6 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
8000489e:	30 19       	mov	r9,1
800048a0:	48 48       	lddpc	r8,800048b0 <fat_cache_flush+0x48>
800048a2:	b0 89       	st.b	r8[0x0],r9
800048a4:	d8 0a       	popm	pc,r12=0
         return false;
800048a6:	da 0a       	popm	pc,r12=1
800048a8:	00 00       	add	r0,r0
800048aa:	07 14       	ld.sh	r4,r3++
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	6d 9c       	ld.w	r12,r6[0x64]
800048b0:	00 00       	add	r0,r0
800048b2:	06 dc       	st.w	--r3,r12
800048b4:	00 00       	add	r0,r0
800048b6:	04 8c       	andn	r12,r2
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	6d cc       	ld.w	r12,r6[0x70]

800048bc <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
800048bc:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
800048be:	e0 6a 02 00 	mov	r10,512
800048c2:	30 0b       	mov	r11,0
800048c4:	48 2c       	lddpc	r12,800048cc <fat_cache_clear+0x10>
800048c6:	f0 1f 00 03 	mcall	800048d0 <fat_cache_clear+0x14>
}
800048ca:	d8 02       	popm	pc
800048cc:	00 00       	add	r0,r0
800048ce:	04 8c       	andn	r12,r2
800048d0:	80 00       	ld.sh	r0,r0[0x0]
800048d2:	7c 1e       	ld.w	lr,lr[0x4]

800048d4 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
800048d4:	eb cd 40 80 	pushm	r7,lr
800048d8:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800048da:	49 78       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
800048dc:	11 89       	ld.ub	r9,r8[0x0]
800048de:	49 78       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
800048e0:	11 88       	ld.ub	r8,r8[0x0]
800048e2:	f0 09 18 00 	cp.b	r9,r8
800048e6:	c0 91       	brne	800048f8 <fat_cache_read_sector+0x24>
800048e8:	49 38       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
800048ea:	70 19       	ld.w	r9,r8[0x4]
800048ec:	49 48       	lddpc	r8,8000493c <fat_cache_read_sector+0x68>
800048ee:	70 08       	ld.w	r8,r8[0x0]
800048f0:	10 39       	cp.w	r9,r8
800048f2:	c0 31       	brne	800048f8 <fat_cache_read_sector+0x24>
800048f4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
800048f8:	f0 1f 00 12 	mcall	80004940 <fat_cache_read_sector+0x6c>
800048fc:	c1 90       	breq	8000492e <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
800048fe:	f0 1f 00 12 	mcall	80004944 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80004902:	48 f8       	lddpc	r8,8000493c <fat_cache_read_sector+0x68>
80004904:	70 0b       	ld.w	r11,r8[0x0]
80004906:	48 c8       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
80004908:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
8000490a:	58 07       	cp.w	r7,0
8000490c:	c0 c0       	breq	80004924 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000490e:	48 fa       	lddpc	r10,80004948 <fat_cache_read_sector+0x74>
80004910:	48 a8       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
80004912:	11 8c       	ld.ub	r12,r8[0x0]
80004914:	f0 1f 00 0e 	mcall	8000494c <fat_cache_read_sector+0x78>
80004918:	c0 60       	breq	80004924 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
8000491a:	30 19       	mov	r9,1
8000491c:	48 d8       	lddpc	r8,80004950 <fat_cache_read_sector+0x7c>
8000491e:	b0 89       	st.b	r8[0x0],r9
80004920:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004924:	48 58       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
80004926:	11 89       	ld.ub	r9,r8[0x0]
80004928:	48 38       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
8000492a:	b0 89       	st.b	r8[0x0],r9
8000492c:	30 1c       	mov	r12,1
   return true;
}
8000492e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004932:	00 00       	add	r0,r0
80004934:	00 00       	add	r0,r0
80004936:	07 14       	ld.sh	r4,r3++
80004938:	00 00       	add	r0,r0
8000493a:	06 8c       	andn	r12,r3
8000493c:	00 00       	add	r0,r0
8000493e:	04 48       	or	r8,r2
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	48 68       	lddpc	r8,80004958 <fat_cluster_readnext+0x4>
80004944:	80 00       	ld.sh	r0,r0[0x0]
80004946:	46 8c       	lddsp	r12,sp[0x1a0]
80004948:	00 00       	add	r0,r0
8000494a:	04 8c       	andn	r12,r2
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	6d b0       	ld.w	r0,r6[0x6c]
80004950:	00 00       	add	r0,r0
80004952:	06 dc       	st.w	--r3,r12

80004954 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80004954:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80004956:	49 f8       	lddpc	r8,800049d0 <fat_cluster_readnext+0x7c>
80004958:	11 89       	ld.ub	r9,r8[0x0]
8000495a:	30 38       	mov	r8,3
8000495c:	f0 09 18 00 	cp.b	r9,r8
80004960:	c0 61       	brne	8000496c <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
80004962:	49 d8       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004964:	90 09       	ld.sh	r9,r8[0x0]
80004966:	2f c9       	sub	r9,-4
80004968:	b0 09       	st.h	r8[0x0],r9
8000496a:	c0 58       	rjmp	80004974 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
8000496c:	49 a8       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
8000496e:	90 09       	ld.sh	r9,r8[0x0]
80004970:	2f e9       	sub	r9,-2
80004972:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80004974:	49 88       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004976:	90 09       	ld.sh	r9,r8[0x0]
80004978:	e0 68 02 00 	mov	r8,512
8000497c:	f0 09 19 00 	cp.h	r9,r8
80004980:	c0 c1       	brne	80004998 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80004982:	30 09       	mov	r9,0
80004984:	49 48       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004986:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80004988:	49 48       	lddpc	r8,800049d8 <fat_cluster_readnext+0x84>
8000498a:	70 09       	ld.w	r9,r8[0x0]
8000498c:	2f f9       	sub	r9,-1
8000498e:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80004990:	30 1c       	mov	r12,1
80004992:	f0 1f 00 13 	mcall	800049dc <fat_cluster_readnext+0x88>
80004996:	c1 b0       	breq	800049cc <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80004998:	49 28       	lddpc	r8,800049e0 <fat_cluster_readnext+0x8c>
8000499a:	2f c8       	sub	r8,-4
8000499c:	48 e9       	lddpc	r9,800049d4 <fat_cluster_readnext+0x80>
8000499e:	92 89       	ld.uh	r9,r9[0x0]
800049a0:	49 1a       	lddpc	r10,800049e4 <fat_cluster_readnext+0x90>
800049a2:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800049a6:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800049a8:	12 0a       	add	r10,r9
800049aa:	15 9a       	ld.ub	r10,r10[0x1]
800049ac:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800049ae:	48 9a       	lddpc	r10,800049d0 <fat_cluster_readnext+0x7c>
800049b0:	15 8b       	ld.ub	r11,r10[0x0]
800049b2:	30 3a       	mov	r10,3
800049b4:	f4 0b 18 00 	cp.b	r11,r10
800049b8:	c0 20       	breq	800049bc <fat_cluster_readnext+0x68>
800049ba:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800049bc:	48 aa       	lddpc	r10,800049e4 <fat_cluster_readnext+0x90>
800049be:	f4 09 00 09 	add	r9,r10,r9
800049c2:	13 aa       	ld.ub	r10,r9[0x2]
800049c4:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800049c6:	13 b9       	ld.ub	r9,r9[0x3]
800049c8:	b0 89       	st.b	r8[0x0],r9
800049ca:	30 1c       	mov	r12,1
   }
   return true;
}
800049cc:	d8 02       	popm	pc
800049ce:	00 00       	add	r0,r0
800049d0:	00 00       	add	r0,r0
800049d2:	06 d8       	st.w	--r3,r8
800049d4:	00 00       	add	r0,r0
800049d6:	04 5c       	eor	r12,r2
800049d8:	00 00       	add	r0,r0
800049da:	04 48       	or	r8,r2
800049dc:	80 00       	ld.sh	r0,r0[0x0]
800049de:	48 d4       	lddpc	r4,80004a10 <fat_cluster_val+0x28>
800049e0:	00 00       	add	r0,r0
800049e2:	07 2c       	ld.uh	r12,r3++
800049e4:	00 00       	add	r0,r0
800049e6:	04 8c       	andn	r12,r2

800049e8 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
800049e8:	d4 31       	pushm	r0-r7,lr
800049ea:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
800049ec:	fe f8 02 18 	ld.w	r8,pc[536]
800049f0:	11 88       	ld.ub	r8,r8[0x0]
800049f2:	30 39       	mov	r9,3
800049f4:	f2 08 18 00 	cp.b	r8,r9
800049f8:	c0 d1       	brne	80004a12 <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800049fa:	fe fa 02 0e 	ld.w	r10,pc[526]
800049fe:	74 09       	ld.w	r9,r10[0x0]
80004a00:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80004a02:	15 bb       	ld.ub	r11,r10[0x3]
80004a04:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004a08:	a3 6b       	lsl	r11,0x2
80004a0a:	fe fa 02 02 	ld.w	r10,pc[514]
80004a0e:	b4 0b       	st.h	r10[0x0],r11
80004a10:	c2 08       	rjmp	80004a50 <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80004a12:	30 29       	mov	r9,2
80004a14:	f2 08 18 00 	cp.b	r8,r9
80004a18:	c0 81       	brne	80004a28 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004a1a:	4f ca       	lddpc	r10,80004c08 <fat_cluster_val+0x220>
80004a1c:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004a1e:	15 bb       	ld.ub	r11,r10[0x3]
80004a20:	a1 7b       	lsl	r11,0x1
80004a22:	4f ba       	lddpc	r10,80004c0c <fat_cluster_val+0x224>
80004a24:	b4 0b       	st.h	r10[0x0],r11
80004a26:	c1 58       	rjmp	80004a50 <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004a28:	30 19       	mov	r9,1
80004a2a:	f2 08 18 00 	cp.b	r8,r9
80004a2e:	c0 30       	breq	80004a34 <fat_cluster_val+0x4c>
80004a30:	30 09       	mov	r9,0
80004a32:	c0 f8       	rjmp	80004a50 <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004a34:	4f 59       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004a36:	72 09       	ld.w	r9,r9[0x0]
80004a38:	4f 5a       	lddpc	r10,80004c0c <fat_cluster_val+0x224>
80004a3a:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80004a3e:	12 0b       	add	r11,r9
80004a40:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80004a42:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004a46:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004a4a:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004a4e:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80004a50:	58 05       	cp.w	r5,0
80004a52:	c2 20       	breq	80004a96 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004a54:	4e fa       	lddpc	r10,80004c10 <fat_cluster_val+0x228>
80004a56:	74 0a       	ld.w	r10,r10[0x0]
80004a58:	14 39       	cp.w	r9,r10
80004a5a:	c0 32       	brcc	80004a60 <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004a5c:	4e da       	lddpc	r10,80004c10 <fat_cluster_val+0x228>
80004a5e:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80004a60:	4e da       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a62:	74 0a       	ld.w	r10,r10[0x0]
80004a64:	14 39       	cp.w	r9,r10
80004a66:	e0 88 00 04 	brls	80004a6e <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004a6a:	4e ba       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a6c:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80004a6e:	30 1a       	mov	r10,1
80004a70:	f4 08 18 00 	cp.b	r8,r10
80004a74:	c1 11       	brne	80004a96 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004a76:	4e 68       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004a78:	90 0a       	ld.sh	r10,r8[0x0]
80004a7a:	e0 68 01 ff 	mov	r8,511
80004a7e:	f0 0a 19 00 	cp.h	r10,r8
80004a82:	c0 a1       	brne	80004a96 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004a84:	f2 c8 ff ff 	sub	r8,r9,-1
80004a88:	4e 3a       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a8a:	74 0a       	ld.w	r10,r10[0x0]
80004a8c:	14 38       	cp.w	r8,r10
80004a8e:	e0 88 00 04 	brls	80004a96 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004a92:	4e 1a       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a94:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004a96:	4e 18       	lddpc	r8,80004c18 <fat_cluster_val+0x230>
80004a98:	70 48       	ld.w	r8,r8[0x10]
80004a9a:	10 09       	add	r9,r8
80004a9c:	4e 08       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004a9e:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004aa0:	30 1c       	mov	r12,1
80004aa2:	f0 1f 00 60 	mcall	80004c20 <fat_cluster_val+0x238>
80004aa6:	e0 80 00 ad 	breq	80004c00 <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80004aaa:	4d 98       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004aac:	90 08       	ld.sh	r8,r8[0x0]
80004aae:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80004ab2:	4d d9       	lddpc	r9,80004c24 <fat_cluster_val+0x23c>
80004ab4:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80004ab6:	0c 97       	mov	r7,r6
80004ab8:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80004aba:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80004abc:	ec c4 ff fe 	sub	r4,r6,-2
80004ac0:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80004ac2:	ec c3 ff fd 	sub	r3,r6,-3
80004ac6:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80004ac8:	4c f9       	lddpc	r9,80004c04 <fat_cluster_val+0x21c>
80004aca:	13 8a       	ld.ub	r10,r9[0x0]
80004acc:	30 19       	mov	r9,1
80004ace:	f2 0a 18 00 	cp.b	r10,r9
80004ad2:	c1 11       	brne	80004af4 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ad4:	e0 69 01 ff 	mov	r9,511
80004ad8:	f2 08 19 00 	cp.h	r8,r9
80004adc:	c0 c1       	brne	80004af4 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80004ade:	4d 08       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004ae0:	70 09       	ld.w	r9,r8[0x0]
80004ae2:	2f f9       	sub	r9,-1
80004ae4:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004ae6:	30 1c       	mov	r12,1
80004ae8:	f0 1f 00 4e 	mcall	80004c20 <fat_cluster_val+0x238>
80004aec:	e0 80 00 8a 	breq	80004c00 <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80004af0:	4c d8       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004af2:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004af4:	58 05       	cp.w	r5,0
80004af6:	c3 11       	brne	80004b58 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004af8:	4c 48       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004afa:	f0 c9 ff fc 	sub	r9,r8,-4
80004afe:	f0 cc ff f9 	sub	r12,r8,-7
80004b02:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004b04:	2f a8       	sub	r8,-6
80004b06:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004b08:	4b fa       	lddpc	r10,80004c04 <fat_cluster_val+0x21c>
80004b0a:	15 8a       	ld.ub	r10,r10[0x0]
80004b0c:	30 3b       	mov	r11,3
80004b0e:	f6 0a 18 00 	cp.b	r10,r11
80004b12:	c0 61       	brne	80004b1e <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004b14:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004b16:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004b1a:	b2 80       	st.b	r9[0x0],r0
80004b1c:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004b1e:	30 0b       	mov	r11,0
80004b20:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80004b22:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004b24:	30 19       	mov	r9,1
80004b26:	f2 0a 18 00 	cp.b	r10,r9
80004b2a:	c0 20       	breq	80004b2e <fat_cluster_val+0x146>
80004b2c:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b2e:	4b 79       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004b30:	13 b9       	ld.ub	r9,r9[0x3]
80004b32:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004b36:	c0 c0       	breq	80004b4e <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004b38:	19 8b       	ld.ub	r11,r12[0x0]
80004b3a:	a5 8b       	lsr	r11,0x4
80004b3c:	11 89       	ld.ub	r9,r8[0x0]
80004b3e:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b42:	f6 0a 00 0a 	add	r10,r11,r10
80004b46:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004b48:	a5 89       	lsr	r9,0x4
80004b4a:	b0 89       	st.b	r8[0x0],r9
80004b4c:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80004b4e:	11 89       	ld.ub	r9,r8[0x0]
80004b50:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004b54:	b0 89       	st.b	r8[0x0],r9
80004b56:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004b58:	4a b8       	lddpc	r8,80004c04 <fat_cluster_val+0x21c>
80004b5a:	11 88       	ld.ub	r8,r8[0x0]
80004b5c:	30 19       	mov	r9,1
80004b5e:	f2 08 18 00 	cp.b	r8,r9
80004b62:	c3 a1       	brne	80004bd6 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b64:	4a 98       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b66:	11 b8       	ld.ub	r8,r8[0x3]
80004b68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b6c:	c1 10       	breq	80004b8e <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80004b6e:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80004b72:	4a 68       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b74:	2f c8       	sub	r8,-4
80004b76:	11 b9       	ld.ub	r9,r8[0x3]
80004b78:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b7c:	14 05       	add	r5,r10
80004b7e:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004b80:	a5 89       	lsr	r9,0x4
80004b82:	11 a8       	ld.ub	r8,r8[0x2]
80004b84:	a5 68       	lsl	r8,0x4
80004b86:	f2 08 00 0a 	add	r10,r9,r8
80004b8a:	5c 5a       	castu.b	r10
80004b8c:	c0 c8       	rjmp	80004ba4 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80004b8e:	49 f8       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b90:	2f c8       	sub	r8,-4
80004b92:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004b94:	16 9a       	mov	r10,r11
80004b96:	e2 1a 00 f0 	andl	r10,0xf0,COH
80004b9a:	11 a8       	ld.ub	r8,r8[0x2]
80004b9c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004ba0:	10 0a       	add	r10,r8
80004ba2:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ba4:	49 a8       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004ba6:	90 09       	ld.sh	r9,r8[0x0]
80004ba8:	e0 68 01 ff 	mov	r8,511
80004bac:	f0 09 19 00 	cp.h	r9,r8
80004bb0:	c2 31       	brne	80004bf6 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80004bb2:	49 d8       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004bb4:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80004bb6:	f0 1f 00 1d 	mcall	80004c28 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80004bba:	49 98       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004bbc:	70 09       	ld.w	r9,r8[0x0]
80004bbe:	20 19       	sub	r9,1
80004bc0:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80004bc2:	30 1c       	mov	r12,1
80004bc4:	f0 1f 00 17 	mcall	80004c20 <fat_cluster_val+0x238>
80004bc8:	c1 c0       	breq	80004c00 <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80004bca:	49 78       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004bcc:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80004bd0:	f0 1f 00 16 	mcall	80004c28 <fat_cluster_val+0x240>
80004bd4:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004bd6:	48 d9       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004bd8:	2f c9       	sub	r9,-4
80004bda:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004bdc:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80004bde:	30 3b       	mov	r11,3
80004be0:	f6 08 18 00 	cp.b	r8,r11
80004be4:	c0 91       	brne	80004bf6 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004be6:	13 98       	ld.ub	r8,r9[0x1]
80004be8:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004bea:	e0 10 ff f0 	andl	r0,0xfff0
80004bee:	13 88       	ld.ub	r8,r9[0x0]
80004bf0:	f0 00 00 00 	add	r0,r8,r0
80004bf4:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004bf6:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004bf8:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004bfa:	f0 1f 00 0c 	mcall	80004c28 <fat_cluster_val+0x240>
80004bfe:	da 3a       	popm	r0-r7,pc,r12=1
80004c00:	d8 3a       	popm	r0-r7,pc,r12=0
80004c02:	00 00       	add	r0,r0
80004c04:	00 00       	add	r0,r0
80004c06:	06 d8       	st.w	--r3,r8
80004c08:	00 00       	add	r0,r0
80004c0a:	07 2c       	ld.uh	r12,r3++
80004c0c:	00 00       	add	r0,r0
80004c0e:	04 5c       	eor	r12,r2
80004c10:	00 00       	add	r0,r0
80004c12:	06 c0       	st.b	r3++,r0
80004c14:	00 00       	add	r0,r0
80004c16:	04 88       	andn	r8,r2
80004c18:	00 00       	add	r0,r0
80004c1a:	06 8c       	andn	r12,r3
80004c1c:	00 00       	add	r0,r0
80004c1e:	04 48       	or	r8,r2
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	48 d4       	lddpc	r4,80004c54 <fat_cluster_list+0x28>
80004c24:	00 00       	add	r0,r0
80004c26:	04 8c       	andn	r12,r2
80004c28:	80 00       	ld.sh	r0,r0[0x0]
80004c2a:	46 a4       	lddsp	r4,sp[0x1a8]

80004c2c <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80004c2c:	d4 31       	pushm	r0-r7,lr
80004c2e:	20 2d       	sub	sp,8
80004c30:	18 93       	mov	r3,r12
80004c32:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004c34:	30 89       	mov	r9,8
80004c36:	fe f8 02 8e 	ld.w	r8,pc[654]
80004c3a:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004c3c:	30 38       	mov	r8,3
80004c3e:	f0 0c 18 00 	cp.b	r12,r8
80004c42:	5f 0a       	sreq	r10
80004c44:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004c46:	fe f9 02 82 	ld.w	r9,pc[642]
80004c4a:	13 89       	ld.ub	r9,r9[0x0]
80004c4c:	f0 09 18 00 	cp.b	r9,r8
80004c50:	5f 08       	sreq	r8
80004c52:	f5 e8 00 08 	and	r8,r10,r8
80004c56:	c0 60       	breq	80004c62 <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004c58:	3f fc       	mov	r12,-1
80004c5a:	f0 1f 00 9d 	mcall	80004ecc <fat_cluster_list+0x2a0>
80004c5e:	e0 80 01 2f 	breq	80004ebc <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004c62:	fe f8 02 6e 	ld.w	r8,pc[622]
80004c66:	70 08       	ld.w	r8,r8[0x0]
80004c68:	58 08       	cp.w	r8,0
80004c6a:	c3 b1       	brne	80004ce0 <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004c6c:	40 09       	lddsp	r9,sp[0x0]
80004c6e:	58 09       	cp.w	r9,0
80004c70:	e0 81 01 26 	brne	80004ebc <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004c74:	fe f8 02 54 	ld.w	r8,pc[596]
80004c78:	11 88       	ld.ub	r8,r8[0x0]
80004c7a:	f0 ca 00 01 	sub	r10,r8,1
80004c7e:	30 19       	mov	r9,1
80004c80:	f2 0a 18 00 	cp.b	r10,r9
80004c84:	e0 8b 00 23 	brhi	80004cca <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004c88:	fe f8 02 48 	ld.w	r8,pc[584]
80004c8c:	70 18       	ld.w	r8,r8[0x4]
80004c8e:	fe f9 02 46 	ld.w	r9,pc[582]
80004c92:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004c96:	12 38       	cp.w	r8,r9
80004c98:	c1 32       	brcc	80004cbe <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004c9a:	fe f9 02 36 	ld.w	r9,pc[566]
80004c9e:	fe fa 02 36 	ld.w	r10,pc[566]
80004ca2:	74 4b       	ld.w	r11,r10[0x10]
80004ca4:	16 08       	add	r8,r11
80004ca6:	f5 1b 00 18 	ld.uh	r11,r10[24]
80004caa:	16 08       	add	r8,r11
80004cac:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004cae:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004cb2:	72 18       	ld.w	r8,r9[0x4]
80004cb4:	f4 08 01 08 	sub	r8,r10,r8
80004cb8:	93 18       	st.w	r9[0x4],r8
80004cba:	30 1c       	mov	r12,1
            return true;
80004cbc:	c0 19       	rjmp	80004ebe <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80004cbe:	31 a9       	mov	r9,26
80004cc0:	fe f8 02 04 	ld.w	r8,pc[516]
80004cc4:	b0 89       	st.b	r8[0x0],r9
80004cc6:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004cc8:	cf b8       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004cca:	30 39       	mov	r9,3
80004ccc:	f2 08 18 00 	cp.b	r8,r9
80004cd0:	c0 a1       	brne	80004ce4 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004cd2:	fe f8 02 02 	ld.w	r8,pc[514]
80004cd6:	70 69       	ld.w	r9,r8[0x18]
80004cd8:	fe f8 02 00 	ld.w	r8,pc[512]
80004cdc:	91 09       	st.w	r8[0x0],r9
80004cde:	c0 38       	rjmp	80004ce4 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004ce0:	4f e9       	lddpc	r9,80004ed8 <fat_cluster_list+0x2ac>
80004ce2:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004ce4:	30 38       	mov	r8,3
80004ce6:	f0 03 18 00 	cp.b	r3,r8
80004cea:	c0 70       	breq	80004cf8 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004cec:	0e 9c       	mov	r12,r7
80004cee:	f0 1f 00 7c 	mcall	80004edc <fat_cluster_list+0x2b0>
80004cf2:	c0 70       	breq	80004d00 <fat_cluster_list+0xd4>
80004cf4:	30 1c       	mov	r12,1
80004cf6:	ce 48       	rjmp	80004ebe <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004cf8:	f0 1f 00 7a 	mcall	80004ee0 <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004cfc:	f0 1f 00 7a 	mcall	80004ee4 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80004d00:	4f 40       	lddpc	r0,80004ed0 <fat_cluster_list+0x2a4>
80004d02:	3f f8       	mov	r8,-1
80004d04:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d06:	00 96       	mov	r6,r0
80004d08:	4f 35       	lddpc	r5,80004ed4 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d0a:	4f 47       	lddpc	r7,80004ed8 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d0c:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d0e:	e0 c8 ff f9 	sub	r8,r0,-7
80004d12:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d14:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d16:	6c 19       	ld.w	r9,r6[0x4]
80004d18:	0b 98       	ld.ub	r8,r5[0x1]
80004d1a:	10 39       	cp.w	r9,r8
80004d1c:	c4 32       	brcc	80004da2 <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d1e:	6a 4a       	ld.w	r10,r5[0x10]
80004d20:	14 09       	add	r9,r10
80004d22:	6a 5a       	ld.w	r10,r5[0x14]
80004d24:	14 09       	add	r9,r10
80004d26:	6e 0a       	ld.w	r10,r7[0x0]
80004d28:	20 2a       	sub	r10,2
80004d2a:	f4 08 02 48 	mul	r8,r10,r8
80004d2e:	f2 08 00 08 	add	r8,r9,r8
80004d32:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d34:	e2 03 18 00 	cp.b	r3,r1
80004d38:	c0 d1       	brne	80004d52 <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004d3a:	4e 67       	lddpc	r7,80004ed0 <fat_cluster_list+0x2a4>
80004d3c:	4e 68       	lddpc	r8,80004ed4 <fat_cluster_list+0x2a8>
80004d3e:	11 99       	ld.ub	r9,r8[0x1]
80004d40:	6e 18       	ld.w	r8,r7[0x4]
80004d42:	f2 08 01 08 	sub	r8,r9,r8
80004d46:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004d48:	f0 1f 00 68 	mcall	80004ee8 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004d4c:	30 1c       	mov	r12,1
80004d4e:	8f 1c       	st.w	r7[0x4],r12
            return true;
80004d50:	cb 78       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d52:	0b 99       	ld.ub	r9,r5[0x1]
80004d54:	40 1a       	lddsp	r10,sp[0x4]
80004d56:	15 88       	ld.ub	r8,r10[0x0]
80004d58:	f2 08 01 08 	sub	r8,r9,r8
80004d5c:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d5e:	e4 03 18 00 	cp.b	r3,r2
80004d62:	c2 01       	brne	80004da2 <fat_cluster_list+0x176>
80004d64:	4d 99       	lddpc	r9,80004ec8 <fat_cluster_list+0x29c>
80004d66:	13 88       	ld.ub	r8,r9[0x0]
80004d68:	e4 08 18 00 	cp.b	r8,r2
80004d6c:	c1 b0       	breq	80004da2 <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004d6e:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004d70:	30 0c       	mov	r12,0
80004d72:	f0 1f 00 5f 	mcall	80004eec <fat_cluster_list+0x2c0>
80004d76:	e0 80 00 a3 	breq	80004ebc <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004d7a:	6e 09       	ld.w	r9,r7[0x0]
80004d7c:	f2 c8 ff ff 	sub	r8,r9,-1
80004d80:	8f 08       	st.w	r7[0x0],r8
80004d82:	6e 1a       	ld.w	r10,r7[0x4]
80004d84:	14 38       	cp.w	r8,r10
80004d86:	c0 a0       	breq	80004d9a <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004d88:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004d8a:	08 19       	sub	r9,r4
80004d8c:	0b 98       	ld.ub	r8,r5[0x1]
80004d8e:	b1 39       	mul	r9,r8
80004d90:	6c 18       	ld.w	r8,r6[0x4]
80004d92:	f2 08 00 08 	add	r8,r9,r8
80004d96:	8d 18       	st.w	r6[0x4],r8
                  break;
80004d98:	c0 58       	rjmp	80004da2 <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80004d9a:	f0 1f 00 56 	mcall	80004ef0 <fat_cluster_list+0x2c4>
80004d9e:	ce e1       	brne	80004d7a <fat_cluster_list+0x14e>
80004da0:	c8 e8       	rjmp	80004ebc <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004da2:	30 0c       	mov	r12,0
80004da4:	f0 1f 00 52 	mcall	80004eec <fat_cluster_list+0x2c0>
80004da8:	e0 80 00 8a 	breq	80004ebc <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004dac:	f0 1f 00 52 	mcall	80004ef4 <fat_cluster_list+0x2c8>
80004db0:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80004db2:	e4 0c 18 00 	cp.b	r12,r2
80004db6:	e0 80 00 83 	breq	80004ebc <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004dba:	01 89       	ld.ub	r9,r0[0x0]
80004dbc:	3f f8       	mov	r8,-1
80004dbe:	f0 09 18 00 	cp.b	r9,r8
80004dc2:	c4 61       	brne	80004e4e <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004dc4:	e2 0c 18 00 	cp.b	r12,r1
80004dc8:	c2 b1       	brne	80004e1e <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004dca:	4c 28       	lddpc	r8,80004ed0 <fat_cluster_list+0x2a4>
80004dcc:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004dce:	4c b9       	lddpc	r9,80004ef8 <fat_cluster_list+0x2cc>
80004dd0:	13 89       	ld.ub	r9,r9[0x0]
80004dd2:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004dd6:	4c aa       	lddpc	r10,80004efc <fat_cluster_list+0x2d0>
80004dd8:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004ddc:	72 2a       	ld.w	r10,r9[0x8]
80004dde:	0e 1a       	sub	r10,r7
80004de0:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004de2:	4b d9       	lddpc	r9,80004ed4 <fat_cluster_list+0x2a8>
80004de4:	72 5b       	ld.w	r11,r9[0x14]
80004de6:	72 4a       	ld.w	r10,r9[0x10]
80004de8:	14 0b       	add	r11,r10
80004dea:	13 99       	ld.ub	r9,r9[0x1]
80004dec:	4b ba       	lddpc	r10,80004ed8 <fat_cluster_list+0x2ac>
80004dee:	74 0a       	ld.w	r10,r10[0x0]
80004df0:	20 2a       	sub	r10,2
80004df2:	f2 0a 02 4a 	mul	r10,r9,r10
80004df6:	f6 0a 00 0a 	add	r10,r11,r10
80004dfa:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004dfc:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80004dfe:	30 38       	mov	r8,3
80004e00:	f0 03 18 00 	cp.b	r3,r8
80004e04:	c0 30       	breq	80004e0a <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004e06:	f0 1f 00 39 	mcall	80004ee8 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004e0a:	4b 28       	lddpc	r8,80004ed0 <fat_cluster_list+0x2a4>
80004e0c:	4b 39       	lddpc	r9,80004ed8 <fat_cluster_list+0x2ac>
80004e0e:	72 09       	ld.w	r9,r9[0x0]
80004e10:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80004e12:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004e14:	31 a9       	mov	r9,26
80004e16:	4a c8       	lddpc	r8,80004ec4 <fat_cluster_list+0x298>
80004e18:	b0 89       	st.b	r8[0x0],r9
80004e1a:	30 0c       	mov	r12,0
            return false;
80004e1c:	c5 18       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e1e:	0b 98       	ld.ub	r8,r5[0x1]
80004e20:	6c 19       	ld.w	r9,r6[0x4]
80004e22:	f2 08 01 08 	sub	r8,r9,r8
80004e26:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e28:	40 0a       	lddsp	r10,sp[0x0]
80004e2a:	58 0a       	cp.w	r10,0
80004e2c:	c4 50       	breq	80004eb6 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80004e2e:	58 08       	cp.w	r8,0
80004e30:	c4 31       	brne	80004eb6 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004e32:	6e 18       	ld.w	r8,r7[0x4]
80004e34:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004e36:	e0 68 ff ff 	mov	r8,65535
80004e3a:	ea 18 0f ff 	orh	r8,0xfff
80004e3e:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e40:	30 1c       	mov	r12,1
80004e42:	f0 1f 00 2b 	mcall	80004eec <fat_cluster_list+0x2c0>
80004e46:	c3 b0       	breq	80004ebc <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004e48:	6c 08       	ld.w	r8,r6[0x0]
80004e4a:	8f 18       	st.w	r7[0x4],r8
80004e4c:	c3 58       	rjmp	80004eb6 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004e4e:	e4 03 18 00 	cp.b	r3,r2
80004e52:	c0 a1       	brne	80004e66 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004e54:	6e 09       	ld.w	r9,r7[0x0]
80004e56:	2f f9       	sub	r9,-1
80004e58:	6e 18       	ld.w	r8,r7[0x4]
80004e5a:	10 39       	cp.w	r9,r8
80004e5c:	c1 b0       	breq	80004e92 <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004e5e:	f0 1f 00 23 	mcall	80004ee8 <fat_cluster_list+0x2bc>
80004e62:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004e64:	c2 d8       	rjmp	80004ebe <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e66:	40 09       	lddsp	r9,sp[0x0]
80004e68:	58 09       	cp.w	r9,0
80004e6a:	c1 40       	breq	80004e92 <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004e6c:	6e 18       	ld.w	r8,r7[0x4]
80004e6e:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80004e70:	30 08       	mov	r8,0
80004e72:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004e74:	0b 98       	ld.ub	r8,r5[0x1]
80004e76:	6c 19       	ld.w	r9,r6[0x4]
80004e78:	10 39       	cp.w	r9,r8
80004e7a:	c0 62       	brcc	80004e86 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004e7c:	e0 68 ff ff 	mov	r8,65535
80004e80:	ea 18 0f ff 	orh	r8,0xfff
80004e84:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e86:	30 1c       	mov	r12,1
80004e88:	f0 1f 00 19 	mcall	80004eec <fat_cluster_list+0x2c0>
80004e8c:	c1 80       	breq	80004ebc <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80004e8e:	6c 08       	ld.w	r8,r6[0x0]
80004e90:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80004e92:	e2 04 18 00 	cp.b	r4,r1
80004e96:	c0 b1       	brne	80004eac <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004e98:	40 0a       	lddsp	r10,sp[0x0]
80004e9a:	58 0a       	cp.w	r10,0
80004e9c:	c0 40       	breq	80004ea4 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80004e9e:	f0 1f 00 19 	mcall	80004f00 <fat_cluster_list+0x2d4>
80004ea2:	c0 e8       	rjmp	80004ebe <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80004ea4:	f0 1f 00 11 	mcall	80004ee8 <fat_cluster_list+0x2bc>
80004ea8:	30 1c       	mov	r12,1
            return true; // End of segment
80004eaa:	c0 a8       	rjmp	80004ebe <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004eac:	0b 99       	ld.ub	r9,r5[0x1]
80004eae:	6c 18       	ld.w	r8,r6[0x4]
80004eb0:	f2 08 00 08 	add	r8,r9,r8
80004eb4:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004eb6:	6e 18       	ld.w	r8,r7[0x4]
80004eb8:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004eba:	c2 eb       	rjmp	80004d16 <fat_cluster_list+0xea>
80004ebc:	30 0c       	mov	r12,0
}
80004ebe:	2f ed       	sub	sp,-8
80004ec0:	d8 32       	popm	r0-r7,pc
80004ec2:	00 00       	add	r0,r0
80004ec4:	00 00       	add	r0,r0
80004ec6:	06 dc       	st.w	--r3,r12
80004ec8:	00 00       	add	r0,r0
80004eca:	06 d8       	st.w	--r3,r8
80004ecc:	80 00       	ld.sh	r0,r0[0x0]
80004ece:	57 00       	stdsp	sp[0x1c0],r0
80004ed0:	00 00       	add	r0,r0
80004ed2:	07 34       	ld.ub	r4,r3++
80004ed4:	00 00       	add	r0,r0
80004ed6:	06 8c       	andn	r12,r3
80004ed8:	00 00       	add	r0,r0
80004eda:	07 2c       	ld.uh	r12,r3++
80004edc:	80 00       	ld.sh	r0,r0[0x0]
80004ede:	41 94       	lddsp	r4,sp[0x64]
80004ee0:	80 00       	ld.sh	r0,r0[0x0]
80004ee2:	40 6c       	lddsp	r12,sp[0x18]
80004ee4:	80 00       	ld.sh	r0,r0[0x0]
80004ee6:	53 5c       	stdsp	sp[0xd4],r12
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	41 3c       	lddsp	r12,sp[0x4c]
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	49 e8       	lddpc	r8,80004f64 <fat_read_dir+0x60>
80004ef0:	80 00       	ld.sh	r0,r0[0x0]
80004ef2:	49 54       	lddpc	r4,80004f44 <fat_read_dir+0x40>
80004ef4:	80 00       	ld.sh	r0,r0[0x0]
80004ef6:	40 0c       	lddsp	r12,sp[0x0]
80004ef8:	00 00       	add	r0,r0
80004efa:	06 de       	st.w	--r3,lr
80004efc:	00 00       	add	r0,r0
80004efe:	04 60       	and	r0,r2
80004f00:	80 00       	ld.sh	r0,r0[0x0]
80004f02:	53 e8       	stdsp	sp[0xf8],r8

80004f04 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004f04:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f08:	49 98       	lddpc	r8,80004f6c <fat_read_dir+0x68>
80004f0a:	90 97       	ld.uh	r7,r8[0x2]
80004f0c:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f0e:	49 98       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f10:	11 89       	ld.ub	r9,r8[0x0]
80004f12:	49 98       	lddpc	r8,80004f74 <fat_read_dir+0x70>
80004f14:	11 88       	ld.ub	r8,r8[0x0]
80004f16:	f0 09 18 00 	cp.b	r9,r8
80004f1a:	c0 d1       	brne	80004f34 <fat_read_dir+0x30>
80004f1c:	49 58       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f1e:	70 39       	ld.w	r9,r8[0xc]
80004f20:	49 58       	lddpc	r8,80004f74 <fat_read_dir+0x70>
80004f22:	70 88       	ld.w	r8,r8[0x20]
80004f24:	10 39       	cp.w	r9,r8
80004f26:	c0 71       	brne	80004f34 <fat_read_dir+0x30>
80004f28:	49 28       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f2a:	70 48       	ld.w	r8,r8[0x10]
80004f2c:	0e 38       	cp.w	r8,r7
80004f2e:	c0 31       	brne	80004f34 <fat_read_dir+0x30>
80004f30:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004f34:	49 18       	lddpc	r8,80004f78 <fat_read_dir+0x74>
80004f36:	49 09       	lddpc	r9,80004f74 <fat_read_dir+0x70>
80004f38:	72 89       	ld.w	r9,r9[0x20]
80004f3a:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004f3c:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004f3e:	30 0b       	mov	r11,0
80004f40:	30 2c       	mov	r12,2
80004f42:	f0 1f 00 0f 	mcall	80004f7c <fat_read_dir+0x78>
80004f46:	c1 00       	breq	80004f66 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004f48:	48 c8       	lddpc	r8,80004f78 <fat_read_dir+0x74>
80004f4a:	70 09       	ld.w	r9,r8[0x0]
80004f4c:	48 d8       	lddpc	r8,80004f80 <fat_read_dir+0x7c>
80004f4e:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004f50:	30 1c       	mov	r12,1
80004f52:	f0 1f 00 0d 	mcall	80004f84 <fat_read_dir+0x80>
80004f56:	c0 80       	breq	80004f66 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004f58:	48 68       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f5a:	48 79       	lddpc	r9,80004f74 <fat_read_dir+0x70>
80004f5c:	72 89       	ld.w	r9,r9[0x20]
80004f5e:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004f60:	91 47       	st.w	r8[0x10],r7
80004f62:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004f66:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004f6a:	00 00       	add	r0,r0
80004f6c:	00 00       	add	r0,r0
80004f6e:	06 d8       	st.w	--r3,r8
80004f70:	00 00       	add	r0,r0
80004f72:	07 14       	ld.sh	r4,r3++
80004f74:	00 00       	add	r0,r0
80004f76:	06 8c       	andn	r12,r3
80004f78:	00 00       	add	r0,r0
80004f7a:	07 34       	ld.ub	r4,r3++
80004f7c:	80 00       	ld.sh	r0,r0[0x0]
80004f7e:	4c 2c       	lddpc	r12,80005084 <fat_write_file+0x20>
80004f80:	00 00       	add	r0,r0
80004f82:	04 48       	or	r8,r2
80004f84:	80 00       	ld.sh	r0,r0[0x0]
80004f86:	48 d4       	lddpc	r4,80004fb8 <fat_read_file+0x30>

80004f88 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004f88:	eb cd 40 c0 	pushm	r6-r7,lr
80004f8c:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004f8e:	4a e8       	lddpc	r8,80005044 <fat_read_file+0xbc>
80004f90:	70 38       	ld.w	r8,r8[0xc]
80004f92:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80004f96:	30 29       	mov	r9,2
80004f98:	f2 0c 18 00 	cp.b	r12,r9
80004f9c:	c1 31       	brne	80004fc2 <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f9e:	4a b8       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fa0:	11 89       	ld.ub	r9,r8[0x0]
80004fa2:	4a b8       	lddpc	r8,8000504c <fat_read_file+0xc4>
80004fa4:	11 88       	ld.ub	r8,r8[0x0]
80004fa6:	f0 09 18 00 	cp.b	r9,r8
80004faa:	c1 91       	brne	80004fdc <fat_read_file+0x54>
80004fac:	4a 78       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fae:	70 39       	ld.w	r9,r8[0xc]
80004fb0:	4a 58       	lddpc	r8,80005044 <fat_read_file+0xbc>
80004fb2:	70 18       	ld.w	r8,r8[0x4]
80004fb4:	10 39       	cp.w	r9,r8
80004fb6:	c1 31       	brne	80004fdc <fat_read_file+0x54>
80004fb8:	4a 48       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fba:	70 48       	ld.w	r8,r8[0x10]
80004fbc:	0c 38       	cp.w	r8,r6
80004fbe:	c0 f1       	brne	80004fdc <fat_read_file+0x54>
80004fc0:	c3 38       	rjmp	80005026 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004fc2:	30 39       	mov	r9,3
80004fc4:	f2 0c 18 00 	cp.b	r12,r9
80004fc8:	c3 31       	brne	8000502e <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80004fca:	49 f9       	lddpc	r9,80005044 <fat_read_file+0xbc>
80004fcc:	72 19       	ld.w	r9,r9[0x4]
80004fce:	58 09       	cp.w	r9,0
80004fd0:	c2 b0       	breq	80005026 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80004fd2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004fd6:	c2 c0       	breq	8000502e <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004fd8:	2f f6       	sub	r6,-1
80004fda:	c2 a8       	rjmp	8000502e <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004fdc:	49 d8       	lddpc	r8,80005050 <fat_read_file+0xc8>
80004fde:	49 a9       	lddpc	r9,80005044 <fat_read_file+0xbc>
80004fe0:	72 19       	ld.w	r9,r9[0x4]
80004fe2:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004fe4:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004fe6:	30 1b       	mov	r11,1
80004fe8:	16 9c       	mov	r12,r11
80004fea:	f0 1f 00 1b 	mcall	80005054 <fat_read_file+0xcc>
80004fee:	c1 e0       	breq	8000502a <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80004ff0:	49 88       	lddpc	r8,80005050 <fat_read_file+0xc8>
80004ff2:	70 09       	ld.w	r9,r8[0x0]
80004ff4:	49 98       	lddpc	r8,80005058 <fat_read_file+0xd0>
80004ff6:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80004ff8:	30 1c       	mov	r12,1
80004ffa:	f0 1f 00 19 	mcall	8000505c <fat_read_file+0xd4>
80004ffe:	c1 60       	breq	8000502a <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80005000:	49 28       	lddpc	r8,80005048 <fat_read_file+0xc0>
80005002:	49 19       	lddpc	r9,80005044 <fat_read_file+0xbc>
80005004:	72 19       	ld.w	r9,r9[0x4]
80005006:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005008:	91 46       	st.w	r8[0x10],r6
8000500a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000500e:	30 38       	mov	r8,3
80005010:	f0 07 18 00 	cp.b	r7,r8
80005014:	c0 b1       	brne	8000502a <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80005016:	49 38       	lddpc	r8,80005060 <fat_read_file+0xd8>
80005018:	11 89       	ld.ub	r9,r8[0x0]
8000501a:	31 a8       	mov	r8,26
8000501c:	f0 09 18 00 	cp.b	r9,r8
80005020:	5f 0c       	sreq	r12
80005022:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005026:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8000502a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000502e:	48 98       	lddpc	r8,80005050 <fat_read_file+0xc8>
80005030:	48 59       	lddpc	r9,80005044 <fat_read_file+0xbc>
80005032:	72 19       	ld.w	r9,r9[0x4]
80005034:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005036:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005038:	30 1b       	mov	r11,1
8000503a:	0e 9c       	mov	r12,r7
8000503c:	f0 1f 00 06 	mcall	80005054 <fat_read_file+0xcc>
80005040:	ce 70       	breq	8000500e <fat_read_file+0x86>
80005042:	cf 2b       	rjmp	80005026 <fat_read_file+0x9e>
80005044:	00 00       	add	r0,r0
80005046:	04 4c       	or	r12,r2
80005048:	00 00       	add	r0,r0
8000504a:	07 14       	ld.sh	r4,r3++
8000504c:	00 00       	add	r0,r0
8000504e:	06 8c       	andn	r12,r3
80005050:	00 00       	add	r0,r0
80005052:	07 34       	ld.ub	r4,r3++
80005054:	80 00       	ld.sh	r0,r0[0x0]
80005056:	4c 2c       	lddpc	r12,8000515c <fat_write_file+0xf8>
80005058:	00 00       	add	r0,r0
8000505a:	04 48       	or	r8,r2
8000505c:	80 00       	ld.sh	r0,r0[0x0]
8000505e:	48 d4       	lddpc	r4,80005090 <fat_write_file+0x2c>
80005060:	00 00       	add	r0,r0
80005062:	06 dc       	st.w	--r3,r12

80005064 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80005064:	eb cd 40 c0 	pushm	r6-r7,lr
80005068:	18 97       	mov	r7,r12
8000506a:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
8000506c:	4b 68       	lddpc	r8,80005144 <fat_write_file+0xe0>
8000506e:	70 18       	ld.w	r8,r8[0x4]
80005070:	58 08       	cp.w	r8,0
80005072:	c0 a1       	brne	80005086 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
80005074:	4b 58       	lddpc	r8,80005148 <fat_write_file+0xe4>
80005076:	3f f9       	mov	r9,-1
80005078:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
8000507a:	30 09       	mov	r9,0
8000507c:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
8000507e:	30 1c       	mov	r12,1
80005080:	f0 1f 00 33 	mcall	8000514c <fat_write_file+0xe8>
80005084:	c1 c8       	rjmp	800050bc <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
80005086:	f0 1f 00 33 	mcall	80005150 <fat_write_file+0xec>
8000508a:	c0 30       	breq	80005090 <fat_write_file+0x2c>
8000508c:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
80005090:	4b 18       	lddpc	r8,80005154 <fat_write_file+0xf0>
80005092:	11 89       	ld.ub	r9,r8[0x0]
80005094:	31 a8       	mov	r8,26
80005096:	f0 09 18 00 	cp.b	r9,r8
8000509a:	c5 21       	brne	8000513e <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
8000509c:	4a f8       	lddpc	r8,80005158 <fat_write_file+0xf4>
8000509e:	11 88       	ld.ub	r8,r8[0x0]
800050a0:	f0 08 00 28 	add	r8,r8,r8<<0x2
800050a4:	4a e9       	lddpc	r9,8000515c <fat_write_file+0xf8>
800050a6:	f2 08 00 28 	add	r8,r9,r8<<0x2
800050aa:	3f f9       	mov	r9,-1
800050ac:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
800050ae:	2f 88       	sub	r8,-8
800050b0:	4a c9       	lddpc	r9,80005160 <fat_write_file+0xfc>
800050b2:	13 9a       	ld.ub	r10,r9[0x1]
800050b4:	70 09       	ld.w	r9,r8[0x0]
800050b6:	f4 09 00 09 	add	r9,r10,r9
800050ba:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
800050bc:	30 18       	mov	r8,1
800050be:	f0 07 18 00 	cp.b	r7,r8
800050c2:	c0 41       	brne	800050ca <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
800050c4:	4a 18       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050c6:	91 16       	st.w	r8[0x4],r6
800050c8:	c0 48       	rjmp	800050d0 <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
800050ca:	30 19       	mov	r9,1
800050cc:	49 f8       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050ce:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
800050d0:	f0 1f 00 25 	mcall	80005164 <fat_write_file+0x100>
800050d4:	c3 50       	breq	8000513e <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
800050d6:	49 c8       	lddpc	r8,80005144 <fat_write_file+0xe0>
800050d8:	70 18       	ld.w	r8,r8[0x4]
800050da:	58 08       	cp.w	r8,0
800050dc:	c0 d1       	brne	800050f6 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
800050de:	49 b8       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050e0:	70 08       	ld.w	r8,r8[0x0]
800050e2:	49 e9       	lddpc	r9,80005158 <fat_write_file+0xf4>
800050e4:	13 89       	ld.ub	r9,r9[0x0]
800050e6:	f2 09 00 29 	add	r9,r9,r9<<0x2
800050ea:	2f f9       	sub	r9,-1
800050ec:	49 ca       	lddpc	r10,8000515c <fat_write_file+0xf8>
800050ee:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
800050f2:	49 59       	lddpc	r9,80005144 <fat_write_file+0xe0>
800050f4:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
800050f6:	30 18       	mov	r8,1
800050f8:	f0 07 18 00 	cp.b	r7,r8
800050fc:	c0 71       	brne	8000510a <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
800050fe:	49 38       	lddpc	r8,80005148 <fat_write_file+0xe4>
80005100:	70 19       	ld.w	r9,r8[0x4]
80005102:	ec 09 01 09 	sub	r9,r6,r9
80005106:	91 19       	st.w	r8[0x4],r9
80005108:	c0 68       	rjmp	80005114 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
8000510a:	49 08       	lddpc	r8,80005148 <fat_write_file+0xe4>
8000510c:	70 19       	ld.w	r9,r8[0x4]
8000510e:	f2 09 11 01 	rsub	r9,r9,1
80005112:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005114:	48 d9       	lddpc	r9,80005148 <fat_write_file+0xe4>
80005116:	49 38       	lddpc	r8,80005160 <fat_write_file+0xfc>
80005118:	70 5b       	ld.w	r11,r8[0x14]
8000511a:	70 4a       	ld.w	r10,r8[0x10]
8000511c:	f6 0a 00 0a 	add	r10,r11,r10
80005120:	11 9b       	ld.ub	r11,r8[0x1]
80005122:	72 08       	ld.w	r8,r9[0x0]
80005124:	20 28       	sub	r8,2
80005126:	f6 08 02 48 	mul	r8,r11,r8
8000512a:	f4 08 00 08 	add	r8,r10,r8
8000512e:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80005130:	f0 1f 00 0e 	mcall	80005168 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80005134:	0e 9c       	mov	r12,r7
80005136:	f0 1f 00 07 	mcall	80005150 <fat_write_file+0xec>
8000513a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000513e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005142:	00 00       	add	r0,r0
80005144:	00 00       	add	r0,r0
80005146:	04 4c       	or	r12,r2
80005148:	00 00       	add	r0,r0
8000514a:	07 34       	ld.ub	r4,r3++
8000514c:	80 00       	ld.sh	r0,r0[0x0]
8000514e:	40 94       	lddsp	r4,sp[0x24]
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4f 88       	lddpc	r8,80005330 <fat_translate_char_shortname+0x20>
80005154:	00 00       	add	r0,r0
80005156:	06 dc       	st.w	--r3,r12
80005158:	00 00       	add	r0,r0
8000515a:	06 de       	st.w	--r3,lr
8000515c:	00 00       	add	r0,r0
8000515e:	04 60       	and	r0,r2
80005160:	00 00       	add	r0,r0
80005162:	06 8c       	andn	r12,r3
80005164:	80 00       	ld.sh	r0,r0[0x0]
80005166:	57 a0       	stdsp	sp[0x1e8],r0
80005168:	80 00       	ld.sh	r0,r0[0x0]
8000516a:	41 3c       	lddsp	r12,sp[0x4c]

8000516c <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
8000516c:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000516e:	4a 28       	lddpc	r8,800051f4 <fat_check_device+0x88>
80005170:	11 89       	ld.ub	r9,r8[0x0]
80005172:	30 08       	mov	r8,0
80005174:	f0 09 18 00 	cp.b	r9,r8
80005178:	c3 c1       	brne	800051f0 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000517a:	4a 08       	lddpc	r8,800051f8 <fat_check_device+0x8c>
8000517c:	11 89       	ld.ub	r9,r8[0x0]
8000517e:	3f f8       	mov	r8,-1
80005180:	f0 09 18 00 	cp.b	r9,r8
80005184:	c0 51       	brne	8000518e <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80005186:	30 19       	mov	r9,1
80005188:	49 d8       	lddpc	r8,800051fc <fat_check_device+0x90>
8000518a:	b0 89       	st.b	r8[0x0],r9
8000518c:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
8000518e:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80005190:	49 a5       	lddpc	r5,800051f8 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005192:	49 c1       	lddpc	r1,80005200 <fat_check_device+0x94>
80005194:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80005196:	49 c0       	lddpc	r0,80005204 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005198:	49 c4       	lddpc	r4,80005208 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
8000519a:	49 d3       	lddpc	r3,8000520c <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
8000519c:	0b 8c       	ld.ub	r12,r5[0x0]
8000519e:	f0 1f 00 1d 	mcall	80005210 <fat_check_device+0xa4>
800051a2:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
800051a4:	c2 60       	breq	800051f0 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051a6:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
800051a8:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051aa:	0b 88       	ld.ub	r8,r5[0x0]
800051ac:	09 89       	ld.ub	r9,r4[0x0]
800051ae:	f0 09 18 00 	cp.b	r9,r8
800051b2:	c0 51       	brne	800051bc <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800051b4:	49 89       	lddpc	r9,80005214 <fat_check_device+0xa8>
800051b6:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800051b8:	49 89       	lddpc	r9,80005218 <fat_check_device+0xac>
800051ba:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800051bc:	07 89       	ld.ub	r9,r3[0x0]
800051be:	f0 09 18 00 	cp.b	r9,r8
800051c2:	c0 31       	brne	800051c8 <fat_check_device+0x5c>
      {
         fat_cache_reset();
800051c4:	f0 1f 00 16 	mcall	8000521c <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
800051c8:	f0 1f 00 16 	mcall	80005220 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
800051cc:	30 18       	mov	r8,1
800051ce:	48 c9       	lddpc	r9,800051fc <fat_check_device+0x90>
800051d0:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
800051d2:	58 37       	cp.w	r7,3
800051d4:	c0 81       	brne	800051e4 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
800051d6:	10 02       	add	r2,r8
800051d8:	5c 52       	castu.b	r2
800051da:	36 48       	mov	r8,100
800051dc:	f0 02 18 00 	cp.b	r2,r8
800051e0:	cd e1       	brne	8000519c <fat_check_device+0x30>
800051e2:	c0 88       	rjmp	800051f2 <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800051e4:	58 27       	cp.w	r7,2
800051e6:	c0 61       	brne	800051f2 <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800051e8:	31 89       	mov	r9,24
800051ea:	48 58       	lddpc	r8,800051fc <fat_check_device+0x90>
800051ec:	b0 89       	st.b	r8[0x0],r9
800051ee:	d8 3a       	popm	r0-r7,pc,r12=0
800051f0:	da 3a       	popm	r0-r7,pc,r12=1
800051f2:	d8 3a       	popm	r0-r7,pc,r12=0
800051f4:	00 00       	add	r0,r0
800051f6:	04 5e       	eor	lr,r2
800051f8:	00 00       	add	r0,r0
800051fa:	06 8c       	andn	r12,r3
800051fc:	00 00       	add	r0,r0
800051fe:	06 dc       	st.w	--r3,r12
80005200:	00 00       	add	r0,r0
80005202:	06 d8       	st.w	--r3,r8
80005204:	00 00       	add	r0,r0
80005206:	04 4c       	or	r12,r2
80005208:	00 00       	add	r0,r0
8000520a:	06 e0       	st.h	--r3,r0
8000520c:	00 00       	add	r0,r0
8000520e:	07 14       	ld.sh	r4,r3++
80005210:	80 00       	ld.sh	r0,r0[0x0]
80005212:	6d 68       	ld.w	r8,r6[0x58]
80005214:	00 00       	add	r0,r0
80005216:	06 d4       	st.w	--r3,r4
80005218:	00 00       	add	r0,r0
8000521a:	06 c4       	st.b	r3++,r4
8000521c:	80 00       	ld.sh	r0,r0[0x0]
8000521e:	46 8c       	lddsp	r12,sp[0x1a0]
80005220:	80 00       	ld.sh	r0,r0[0x0]
80005222:	40 6c       	lddsp	r12,sp[0x18]

80005224 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80005224:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005226:	f0 1f 00 0b 	mcall	80005250 <fat_check_noopen+0x2c>
8000522a:	c1 10       	breq	8000524c <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
8000522c:	48 a8       	lddpc	r8,80005254 <fat_check_noopen+0x30>
8000522e:	11 89       	ld.ub	r9,r8[0x0]
80005230:	30 08       	mov	r8,0
80005232:	f0 09 18 00 	cp.b	r9,r8
80005236:	c0 b0       	breq	8000524c <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005238:	48 88       	lddpc	r8,80005258 <fat_check_noopen+0x34>
8000523a:	11 89       	ld.ub	r9,r8[0x0]
8000523c:	30 08       	mov	r8,0
8000523e:	f0 09 18 00 	cp.b	r9,r8
80005242:	c0 50       	breq	8000524c <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005244:	30 59       	mov	r9,5
80005246:	48 68       	lddpc	r8,8000525c <fat_check_noopen+0x38>
80005248:	b0 89       	st.b	r8[0x0],r9
8000524a:	d8 0a       	popm	pc,r12=0
      return false;
8000524c:	da 0a       	popm	pc,r12=1
8000524e:	00 00       	add	r0,r0
80005250:	80 00       	ld.sh	r0,r0[0x0]
80005252:	51 6c       	stdsp	sp[0x58],r12
80005254:	00 00       	add	r0,r0
80005256:	06 d8       	st.w	--r3,r8
80005258:	00 00       	add	r0,r0
8000525a:	04 4c       	or	r12,r2
8000525c:	00 00       	add	r0,r0
8000525e:	06 dc       	st.w	--r3,r12

80005260 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80005260:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005262:	f0 1f 00 0a 	mcall	80005288 <fat_check_mount+0x28>
80005266:	c0 f0       	breq	80005284 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005268:	48 98       	lddpc	r8,8000528c <fat_check_mount+0x2c>
8000526a:	11 89       	ld.ub	r9,r8[0x0]
8000526c:	30 08       	mov	r8,0
8000526e:	f0 09 18 00 	cp.b	r9,r8
80005272:	c0 81       	brne	80005282 <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80005274:	f0 1f 00 07 	mcall	80005290 <fat_check_mount+0x30>
80005278:	c0 51       	brne	80005282 <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
8000527a:	30 e9       	mov	r9,14
8000527c:	48 68       	lddpc	r8,80005294 <fat_check_mount+0x34>
8000527e:	b0 89       	st.b	r8[0x0],r9
         return false;
80005280:	d8 02       	popm	pc
80005282:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80005284:	d8 02       	popm	pc
80005286:	00 00       	add	r0,r0
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	51 6c       	stdsp	sp[0x58],r12
8000528c:	00 00       	add	r0,r0
8000528e:	06 d8       	st.w	--r3,r8
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	5d 38       	musfr	r8
80005294:	00 00       	add	r0,r0
80005296:	06 dc       	st.w	--r3,r12

80005298 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80005298:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000529a:	f0 1f 00 04 	mcall	800052a8 <fat_check_mount_select+0x10>
8000529e:	c0 30       	breq	800052a4 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
800052a0:	f0 1f 00 03 	mcall	800052ac <fat_check_mount_select+0x14>
}
800052a4:	d8 02       	popm	pc
800052a6:	00 00       	add	r0,r0
800052a8:	80 00       	ld.sh	r0,r0[0x0]
800052aa:	52 60       	stdsp	sp[0x98],r0
800052ac:	80 00       	ld.sh	r0,r0[0x0]
800052ae:	3f d0       	mov	r0,-3

800052b0 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
800052b0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052b2:	f0 1f 00 06 	mcall	800052c8 <fat_check_mount_select_open+0x18>
800052b6:	c0 70       	breq	800052c4 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
800052b8:	f0 1f 00 05 	mcall	800052cc <fat_check_mount_select_open+0x1c>
800052bc:	c0 40       	breq	800052c4 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
800052be:	f0 1f 00 05 	mcall	800052d0 <fat_check_mount_select_open+0x20>
800052c2:	d8 02       	popm	pc
800052c4:	d8 0a       	popm	pc,r12=0
800052c6:	00 00       	add	r0,r0
800052c8:	80 00       	ld.sh	r0,r0[0x0]
800052ca:	52 60       	stdsp	sp[0x98],r0
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	3f d0       	mov	r0,-3
800052d0:	80 00       	ld.sh	r0,r0[0x0]
800052d2:	3f b0       	mov	r0,-5

800052d4 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
800052d4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052d6:	f0 1f 00 06 	mcall	800052ec <fat_check_mount_select_noopen+0x18>
800052da:	c0 70       	breq	800052e8 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
800052dc:	f0 1f 00 05 	mcall	800052f0 <fat_check_mount_select_noopen+0x1c>
800052e0:	c0 40       	breq	800052e8 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
800052e2:	f0 1f 00 05 	mcall	800052f4 <fat_check_mount_select_noopen+0x20>
800052e6:	d8 02       	popm	pc
800052e8:	d8 0a       	popm	pc,r12=0
800052ea:	00 00       	add	r0,r0
800052ec:	80 00       	ld.sh	r0,r0[0x0]
800052ee:	52 60       	stdsp	sp[0x98],r0
800052f0:	80 00       	ld.sh	r0,r0[0x0]
800052f2:	3f d0       	mov	r0,-3
800052f4:	80 00       	ld.sh	r0,r0[0x0]
800052f6:	52 24       	stdsp	sp[0x88],r4

800052f8 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
800052f8:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052fa:	f0 1f 00 04 	mcall	80005308 <fat_check_mount_noopen+0x10>
800052fe:	c0 30       	breq	80005304 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80005300:	f0 1f 00 03 	mcall	8000530c <fat_check_mount_noopen+0x14>
}
80005304:	d8 02       	popm	pc
80005306:	00 00       	add	r0,r0
80005308:	80 00       	ld.sh	r0,r0[0x0]
8000530a:	52 60       	stdsp	sp[0x98],r0
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	52 24       	stdsp	sp[0x88],r4

80005310 <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80005310:	f8 c9 00 21 	sub	r9,r12,33
80005314:	35 d8       	mov	r8,93
80005316:	f0 09 18 00 	cp.b	r9,r8
8000531a:	e0 8b 00 1d 	brhi	80005354 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000531e:	f8 c9 00 61 	sub	r9,r12,97
80005322:	31 98       	mov	r8,25
80005324:	f0 09 18 00 	cp.b	r9,r8
80005328:	e0 88 00 07 	brls	80005336 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
8000532c:	32 b8       	mov	r8,43
8000532e:	f0 0c 18 00 	cp.b	r12,r8
80005332:	c0 51       	brne	8000533c <fat_translate_char_shortname+0x2c>
80005334:	c1 08       	rjmp	80005354 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80005336:	22 0c       	sub	r12,32
80005338:	5c 5c       	castu.b	r12
8000533a:	5e fc       	retal	r12
8000533c:	48 7a       	lddpc	r10,80005358 <fat_translate_char_shortname+0x48>
8000533e:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
80005342:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005344:	11 89       	ld.ub	r9,r8[0x0]
80005346:	f8 09 18 00 	cp.b	r9,r12
8000534a:	c0 50       	breq	80005354 <fat_translate_char_shortname+0x44>
8000534c:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000534e:	14 38       	cp.w	r8,r10
80005350:	cf a1       	brne	80005344 <fat_translate_char_shortname+0x34>
80005352:	5e fc       	retal	r12
80005354:	5e fd       	retal	0
80005356:	00 00       	add	r0,r0
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	82 cc       	ld.uh	r12,r1[0x8]

8000535c <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000535c:	3f f9       	mov	r9,-1
8000535e:	48 48       	lddpc	r8,8000536c <fat_clear_info_fat_mod+0x10>
80005360:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80005362:	30 09       	mov	r9,0
80005364:	48 38       	lddpc	r8,80005370 <fat_clear_info_fat_mod+0x14>
80005366:	91 09       	st.w	r8[0x0],r9
}
80005368:	5e fc       	retal	r12
8000536a:	00 00       	add	r0,r0
8000536c:	00 00       	add	r0,r0
8000536e:	06 c0       	st.b	r3++,r0
80005370:	00 00       	add	r0,r0
80005372:	04 88       	andn	r8,r2

80005374 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
80005374:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80005376:	30 0b       	mov	r11,0
80005378:	49 58       	lddpc	r8,800053cc <fat_clear_cluster+0x58>
8000537a:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000537c:	30 2c       	mov	r12,2
8000537e:	f0 1f 00 15 	mcall	800053d0 <fat_clear_cluster+0x5c>
80005382:	c2 30       	breq	800053c8 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80005384:	49 48       	lddpc	r8,800053d4 <fat_clear_cluster+0x60>
80005386:	11 98       	ld.ub	r8,r8[0x1]
80005388:	49 19       	lddpc	r9,800053cc <fat_clear_cluster+0x58>
8000538a:	72 0a       	ld.w	r10,r9[0x0]
8000538c:	20 1a       	sub	r10,1
8000538e:	10 0a       	add	r10,r8
80005390:	49 29       	lddpc	r9,800053d8 <fat_clear_cluster+0x64>
80005392:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
80005394:	58 08       	cp.w	r8,0
80005396:	c1 a0       	breq	800053ca <fat_clear_cluster+0x56>
80005398:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000539a:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
8000539c:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000539e:	48 e5       	lddpc	r5,800053d4 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053a0:	08 9c       	mov	r12,r4
800053a2:	f0 1f 00 0f 	mcall	800053dc <fat_clear_cluster+0x68>
800053a6:	c1 10       	breq	800053c8 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800053a8:	58 07       	cp.w	r7,0
800053aa:	c0 31       	brne	800053b0 <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800053ac:	f0 1f 00 0d 	mcall	800053e0 <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800053b0:	f0 1f 00 0d 	mcall	800053e4 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
800053b4:	6c 08       	ld.w	r8,r6[0x0]
800053b6:	20 18       	sub	r8,1
800053b8:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800053ba:	2f f7       	sub	r7,-1
800053bc:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800053be:	0b 98       	ld.ub	r8,r5[0x1]
800053c0:	ee 08 18 00 	cp.b	r8,r7
800053c4:	ce e1       	brne	800053a0 <fat_clear_cluster+0x2c>
800053c6:	c0 28       	rjmp	800053ca <fat_clear_cluster+0x56>
800053c8:	d8 2a       	popm	r4-r7,pc,r12=0
800053ca:	da 2a       	popm	r4-r7,pc,r12=1
800053cc:	00 00       	add	r0,r0
800053ce:	07 34       	ld.ub	r4,r3++
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	4c 2c       	lddpc	r12,800054d8 <fat_initialize_dir+0x7c>
800053d4:	00 00       	add	r0,r0
800053d6:	06 8c       	andn	r12,r3
800053d8:	00 00       	add	r0,r0
800053da:	04 48       	or	r8,r2
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	48 d4       	lddpc	r4,80005410 <fat_update_fat2+0x28>
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	48 bc       	lddpc	r12,8000540c <fat_update_fat2+0x24>
800053e4:	80 00       	ld.sh	r0,r0[0x0]
800053e6:	46 a4       	lddsp	r4,sp[0x1a8]

800053e8 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
800053e8:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800053ec:	49 68       	lddpc	r8,80005444 <fat_update_fat2+0x5c>
800053ee:	70 08       	ld.w	r8,r8[0x0]
800053f0:	49 69       	lddpc	r9,80005448 <fat_update_fat2+0x60>
800053f2:	72 09       	ld.w	r9,r9[0x0]
800053f4:	12 38       	cp.w	r8,r9
800053f6:	e0 8b 00 25 	brhi	80005440 <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800053fa:	49 55       	lddpc	r5,8000544c <fat_update_fat2+0x64>
800053fc:	49 57       	lddpc	r7,80005450 <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800053fe:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005400:	49 16       	lddpc	r6,80005444 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80005402:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005404:	49 14       	lddpc	r4,80005448 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005406:	6e 49       	ld.w	r9,r7[0x10]
80005408:	12 08       	add	r8,r9
8000540a:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000540c:	06 9c       	mov	r12,r3
8000540e:	f0 1f 00 12 	mcall	80005454 <fat_update_fat2+0x6c>
80005412:	c1 50       	breq	8000543c <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005414:	6e 19       	ld.w	r9,r7[0x4]
80005416:	6e 48       	ld.w	r8,r7[0x10]
80005418:	f2 08 00 08 	add	r8,r9,r8
8000541c:	6c 09       	ld.w	r9,r6[0x0]
8000541e:	12 08       	add	r8,r9
80005420:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80005422:	04 9c       	mov	r12,r2
80005424:	f0 1f 00 0c 	mcall	80005454 <fat_update_fat2+0x6c>
80005428:	c0 a0       	breq	8000543c <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000542a:	f0 1f 00 0c 	mcall	80005458 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000542e:	6c 08       	ld.w	r8,r6[0x0]
80005430:	2f f8       	sub	r8,-1
80005432:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005434:	68 09       	ld.w	r9,r4[0x0]
80005436:	10 39       	cp.w	r9,r8
80005438:	ce 72       	brcc	80005406 <fat_update_fat2+0x1e>
8000543a:	c0 38       	rjmp	80005440 <fat_update_fat2+0x58>
8000543c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005440:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005444:	00 00       	add	r0,r0
80005446:	06 c0       	st.b	r3++,r0
80005448:	00 00       	add	r0,r0
8000544a:	04 88       	andn	r8,r2
8000544c:	00 00       	add	r0,r0
8000544e:	04 48       	or	r8,r2
80005450:	00 00       	add	r0,r0
80005452:	06 8c       	andn	r12,r3
80005454:	80 00       	ld.sh	r0,r0[0x0]
80005456:	48 d4       	lddpc	r4,80005488 <fat_initialize_dir+0x2c>
80005458:	80 00       	ld.sh	r0,r0[0x0]
8000545a:	46 a4       	lddsp	r4,sp[0x1a8]

8000545c <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
8000545c:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000545e:	f0 1f 00 21 	mcall	800054e0 <fat_initialize_dir+0x84>
80005462:	c3 e0       	breq	800054de <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
80005464:	f0 1f 00 20 	mcall	800054e4 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80005468:	4a 0b       	lddpc	r11,800054e8 <fat_initialize_dir+0x8c>
8000546a:	16 98       	mov	r8,r11
8000546c:	32 e9       	mov	r9,46
8000546e:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80005470:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80005474:	32 09       	mov	r9,32
80005476:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80005478:	14 38       	cp.w	r8,r10
8000547a:	cf e1       	brne	80005476 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000547c:	49 b8       	lddpc	r8,800054e8 <fat_initialize_dir+0x8c>
8000547e:	31 09       	mov	r9,16
80005480:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80005484:	49 a9       	lddpc	r9,800054ec <fat_initialize_dir+0x90>
80005486:	2f c9       	sub	r9,-4
80005488:	13 ba       	ld.ub	r10,r9[0x3]
8000548a:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000548e:	13 aa       	ld.ub	r10,r9[0x2]
80005490:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80005494:	13 9a       	ld.ub	r10,r9[0x1]
80005496:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000549a:	13 89       	ld.ub	r9,r9[0x0]
8000549c:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
800054a0:	32 e9       	mov	r9,46
800054a2:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
800054a6:	f1 69 00 21 	st.b	r8[33],r9
800054aa:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054ac:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800054b0:	32 09       	mov	r9,32
800054b2:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
800054b4:	14 38       	cp.w	r8,r10
800054b6:	cf e1       	brne	800054b2 <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
800054b8:	48 c8       	lddpc	r8,800054e8 <fat_initialize_dir+0x8c>
800054ba:	31 09       	mov	r9,16
800054bc:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
800054c0:	48 c9       	lddpc	r9,800054f0 <fat_initialize_dir+0x94>
800054c2:	2e 09       	sub	r9,-32
800054c4:	13 ba       	ld.ub	r10,r9[0x3]
800054c6:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
800054ca:	13 aa       	ld.ub	r10,r9[0x2]
800054cc:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
800054d0:	13 9a       	ld.ub	r10,r9[0x1]
800054d2:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
800054d6:	13 89       	ld.ub	r9,r9[0x0]
800054d8:	f1 69 00 35 	st.b	r8[53],r9
800054dc:	30 1c       	mov	r12,1

   return true;
}
800054de:	d8 02       	popm	pc
800054e0:	80 00       	ld.sh	r0,r0[0x0]
800054e2:	53 74       	stdsp	sp[0xdc],r4
800054e4:	80 00       	ld.sh	r0,r0[0x0]
800054e6:	46 a4       	lddsp	r4,sp[0x1a8]
800054e8:	00 00       	add	r0,r0
800054ea:	04 8c       	andn	r12,r2
800054ec:	00 00       	add	r0,r0
800054ee:	04 4c       	or	r12,r2
800054f0:	00 00       	add	r0,r0
800054f2:	06 8c       	andn	r12,r3

800054f4 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
800054f4:	d4 31       	pushm	r0-r7,lr
800054f6:	20 5d       	sub	sp,20
800054f8:	18 97       	mov	r7,r12
800054fa:	50 3b       	stdsp	sp[0xc],r11
800054fc:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
800054fe:	f0 1f 00 30 	mcall	800055bc <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
80005502:	f0 1f 00 30 	mcall	800055c0 <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80005506:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80005508:	30 01       	mov	r1,0
8000550a:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000550c:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000550e:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80005510:	30 c6       	mov	r6,12
80005512:	31 ab       	mov	r11,26
80005514:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005516:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80005518:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000551a:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000551c:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000551e:	f2 08 18 00 	cp.b	r8,r9
80005522:	c0 31       	brne	80005528 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80005524:	b8 83       	st.b	r12[0x0],r3
         continue;
80005526:	c4 58       	rjmp	800055b0 <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80005528:	ec 08 18 00 	cp.b	r8,r6
8000552c:	5f 00       	sreq	r0
8000552e:	f6 08 18 00 	cp.b	r8,r11
80005532:	5f 04       	sreq	r4
80005534:	08 40       	or	r0,r4
80005536:	00 94       	mov	r4,r0
80005538:	f4 00 18 00 	cp.b	r0,r10
8000553c:	c3 21       	brne	800055a0 <fat_create_long_name_entry+0xac>
8000553e:	ea 08 18 00 	cp.b	r8,r5
80005542:	c3 70       	breq	800055b0 <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005544:	e4 08 18 00 	cp.b	r8,r2
80005548:	c0 41       	brne	80005550 <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
8000554a:	40 34       	lddsp	r4,sp[0xc]
8000554c:	b8 84       	st.b	r12[0x0],r4
         continue;
8000554e:	c3 18       	rjmp	800055b0 <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
80005550:	40 01       	lddsp	r1,sp[0x0]
80005552:	58 01       	cp.w	r1,0
80005554:	c2 41       	brne	8000559c <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005556:	0f 84       	ld.ub	r4,r7[0x0]
80005558:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
8000555c:	35 c1       	mov	r1,92
8000555e:	e2 04 19 00 	cp.h	r4,r1
80005562:	5f 00       	sreq	r0
80005564:	50 20       	stdsp	sp[0x8],r0
80005566:	32 f0       	mov	r0,47
80005568:	e0 04 19 00 	cp.h	r4,r0
8000556c:	5f 01       	sreq	r1
8000556e:	40 20       	lddsp	r0,sp[0x8]
80005570:	02 40       	or	r0,r1
80005572:	f4 00 18 00 	cp.b	r0,r10
80005576:	c0 50       	breq	80005580 <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80005578:	30 04       	mov	r4,0
8000557a:	fb 54 00 12 	st.h	sp[18],r4
8000557e:	c0 38       	rjmp	80005584 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80005580:	58 04       	cp.w	r4,0
80005582:	c0 31       	brne	80005588 <fat_create_long_name_entry+0x94>
80005584:	30 14       	mov	r4,1
80005586:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80005588:	fa c4 ff ee 	sub	r4,sp,-18
8000558c:	09 90       	ld.ub	r0,r4[0x1]
8000558e:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80005590:	09 84       	ld.ub	r4,r4[0x0]
80005592:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
80005594:	2f f8       	sub	r8,-1
80005596:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80005598:	2f f7       	sub	r7,-1
8000559a:	c0 38       	rjmp	800055a0 <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000559c:	3f f1       	mov	r1,-1
8000559e:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800055a0:	2f f8       	sub	r8,-1
800055a2:	5c 58       	castu.b	r8
800055a4:	fc 08 18 00 	cp.b	r8,lr
800055a8:	e0 8b 00 08 	brhi	800055b8 <fat_create_long_name_entry+0xc4>
800055ac:	2f fc       	sub	r12,-1
800055ae:	cb 8b       	rjmp	8000551e <fat_create_long_name_entry+0x2a>
800055b0:	2f f8       	sub	r8,-1
800055b2:	5c 58       	castu.b	r8
800055b4:	2f fc       	sub	r12,-1
800055b6:	cb 4b       	rjmp	8000551e <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
800055b8:	2f bd       	sub	sp,-20
800055ba:	d8 32       	popm	r0-r7,pc
800055bc:	80 00       	ld.sh	r0,r0[0x0]
800055be:	46 a4       	lddsp	r4,sp[0x1a8]
800055c0:	80 00       	ld.sh	r0,r0[0x0]
800055c2:	43 34       	lddsp	r4,sp[0xcc]

800055c4 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
800055c4:	d4 31       	pushm	r0-r7,lr
800055c6:	18 90       	mov	r0,r12
800055c8:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800055ca:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800055cc:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800055ce:	49 56       	lddpc	r6,80005620 <fat_delete_file+0x5c>
800055d0:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800055d2:	f0 1f 00 15 	mcall	80005624 <fat_delete_file+0x60>
800055d6:	c2 40       	breq	8000561e <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
800055d8:	f0 1f 00 14 	mcall	80005628 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
800055dc:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800055de:	f8 c7 ff f5 	sub	r7,r12,-11
800055e2:	0f 88       	ld.ub	r8,r7[0x0]
800055e4:	ea 08 18 00 	cp.b	r8,r5
800055e8:	c0 30       	breq	800055ee <fat_delete_file+0x2a>
800055ea:	58 04       	cp.w	r4,0
800055ec:	c1 01       	brne	8000560c <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800055ee:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
800055f0:	f0 1f 00 0f 	mcall	8000562c <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
800055f4:	0f 88       	ld.ub	r8,r7[0x0]
800055f6:	ea 08 18 00 	cp.b	r8,r5
800055fa:	c0 41       	brne	80005602 <fat_delete_file+0x3e>
800055fc:	e2 12 00 40 	andl	r2,0x40,COH
80005600:	c0 61       	brne	8000560c <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005602:	8c 18       	ld.sh	r8,r6[0x2]
80005604:	20 18       	sub	r8,1
80005606:	ac 18       	st.h	r6[0x2],r8
80005608:	02 94       	mov	r4,r1
   }  // end of while(1)
8000560a:	ce 4b       	rjmp	800055d2 <fat_delete_file+0xe>

   if( b_cluster_list )
8000560c:	58 00       	cp.w	r0,0
8000560e:	c0 21       	brne	80005612 <fat_delete_file+0x4e>
80005610:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80005612:	30 09       	mov	r9,0
80005614:	48 78       	lddpc	r8,80005630 <fat_delete_file+0x6c>
80005616:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80005618:	30 3c       	mov	r12,3
8000561a:	f0 1f 00 07 	mcall	80005634 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
8000561e:	d8 32       	popm	r0-r7,pc
80005620:	00 00       	add	r0,r0
80005622:	06 d8       	st.w	--r3,r8
80005624:	80 00       	ld.sh	r0,r0[0x0]
80005626:	4f 04       	lddpc	r4,800057e4 <fat_allocfreespace+0x44>
80005628:	80 00       	ld.sh	r0,r0[0x0]
8000562a:	43 34       	lddsp	r4,sp[0xcc]
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	46 a4       	lddsp	r4,sp[0x1a8]
80005630:	00 00       	add	r0,r0
80005632:	04 4c       	or	r12,r2
80005634:	80 00       	ld.sh	r0,r0[0x0]
80005636:	4f 88       	lddpc	r8,80005814 <fat_allocfreespace+0x74>

80005638 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80005638:	eb cd 40 fc 	pushm	r2-r7,lr
8000563c:	20 8d       	sub	sp,32
8000563e:	30 06       	mov	r6,0
80005640:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80005642:	4a 95       	lddpc	r5,800056e4 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80005644:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80005646:	1a 93       	mov	r3,sp
80005648:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000564a:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000564c:	f0 1f 00 27 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
80005650:	c0 81       	brne	80005660 <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005652:	4a 78       	lddpc	r8,800056ec <fat_garbage_collector_entry+0xb4>
80005654:	11 89       	ld.ub	r9,r8[0x0]
80005656:	31 a8       	mov	r8,26
80005658:	f0 09 18 00 	cp.b	r9,r8
8000565c:	c3 d1       	brne	800056d6 <fat_garbage_collector_entry+0x9e>
8000565e:	c0 68       	rjmp	8000566a <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005660:	f0 1f 00 24 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
80005664:	19 88       	ld.ub	r8,r12[0x0]
80005666:	58 08       	cp.w	r8,0
80005668:	c1 b1       	brne	8000569e <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000566a:	49 f8       	lddpc	r8,800056e4 <fat_garbage_collector_entry+0xac>
8000566c:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000566e:	ec 07 19 00 	cp.h	r7,r6
80005672:	c3 40       	breq	800056da <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80005674:	32 05       	mov	r5,32
80005676:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005678:	49 b6       	lddpc	r6,800056e4 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000567a:	f0 1f 00 1c 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
8000567e:	c2 c0       	breq	800056d6 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80005680:	f0 1f 00 1c 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>
80005684:	0a 9a       	mov	r10,r5
80005686:	08 9b       	mov	r11,r4
80005688:	f0 1f 00 1b 	mcall	800056f4 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
8000568c:	f0 1f 00 1b 	mcall	800056f8 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005690:	8c 18       	ld.sh	r8,r6[0x2]
80005692:	2f f8       	sub	r8,-1
80005694:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80005696:	f0 07 19 00 	cp.h	r7,r8
8000569a:	cf 01       	brne	8000567a <fat_garbage_collector_entry+0x42>
8000569c:	c1 f8       	rjmp	800056da <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000569e:	e8 08 18 00 	cp.b	r8,r4
800056a2:	c1 70       	breq	800056d0 <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800056a4:	ec 07 19 00 	cp.h	r7,r6
800056a8:	c1 20       	breq	800056cc <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800056aa:	04 9a       	mov	r10,r2
800056ac:	18 9b       	mov	r11,r12
800056ae:	1a 9c       	mov	r12,sp
800056b0:	f0 1f 00 13 	mcall	800056fc <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800056b4:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800056b6:	f0 1f 00 0d 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
800056ba:	c0 e0       	breq	800056d6 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
800056bc:	f0 1f 00 0d 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>
800056c0:	04 9a       	mov	r10,r2
800056c2:	1a 9b       	mov	r11,sp
800056c4:	f0 1f 00 0e 	mcall	800056fc <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
800056c8:	f0 1f 00 0c 	mcall	800056f8 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
800056cc:	2f f6       	sub	r6,-1
800056ce:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
800056d0:	2f f7       	sub	r7,-1
800056d2:	5c 87       	casts.h	r7
   }  // end of while(1)
800056d4:	cb bb       	rjmp	8000564a <fat_garbage_collector_entry+0x12>
800056d6:	30 0c       	mov	r12,0
800056d8:	c0 28       	rjmp	800056dc <fat_garbage_collector_entry+0xa4>
800056da:	30 1c       	mov	r12,1
}
800056dc:	2f 8d       	sub	sp,-32
800056de:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800056e2:	00 00       	add	r0,r0
800056e4:	00 00       	add	r0,r0
800056e6:	06 d8       	st.w	--r3,r8
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	4f 04       	lddpc	r4,800058a8 <fat_allocfreespace+0x108>
800056ec:	00 00       	add	r0,r0
800056ee:	06 dc       	st.w	--r3,r12
800056f0:	80 00       	ld.sh	r0,r0[0x0]
800056f2:	43 34       	lddsp	r4,sp[0xcc]
800056f4:	80 00       	ld.sh	r0,r0[0x0]
800056f6:	7c 1e       	ld.w	lr,lr[0x4]
800056f8:	80 00       	ld.sh	r0,r0[0x0]
800056fa:	46 a4       	lddsp	r4,sp[0x1a8]
800056fc:	80 00       	ld.sh	r0,r0[0x0]
800056fe:	7a d6       	ld.w	r6,sp[0x34]

80005700 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
80005700:	eb cd 40 c0 	pushm	r6-r7,lr
80005704:	20 1d       	sub	sp,4
80005706:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005708:	49 c8       	lddpc	r8,80005778 <fat_write_fat32_FSInfo+0x78>
8000570a:	90 c9       	ld.uh	r9,r8[0x8]
8000570c:	70 4a       	ld.w	r10,r8[0x10]
8000570e:	49 c8       	lddpc	r8,8000577c <fat_write_fat32_FSInfo+0x7c>
80005710:	12 1a       	sub	r10,r9
80005712:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80005714:	30 0c       	mov	r12,0
80005716:	f0 1f 00 1b 	mcall	80005780 <fat_write_fat32_FSInfo+0x80>
8000571a:	c2 c0       	breq	80005772 <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
8000571c:	f0 1f 00 1a 	mcall	80005784 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
80005720:	f0 1f 00 1a 	mcall	80005788 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80005724:	49 a7       	lddpc	r7,8000578c <fat_write_fat32_FSInfo+0x8c>
80005726:	30 46       	mov	r6,4
80005728:	0c 9a       	mov	r10,r6
8000572a:	49 ab       	lddpc	r11,80005790 <fat_write_fat32_FSInfo+0x90>
8000572c:	0e 9c       	mov	r12,r7
8000572e:	f0 1f 00 1a 	mcall	80005794 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
80005732:	0c 9a       	mov	r10,r6
80005734:	49 9b       	lddpc	r11,80005798 <fat_write_fat32_FSInfo+0x98>
80005736:	ee cc fe 1c 	sub	r12,r7,-484
8000573a:	f0 1f 00 17 	mcall	80005794 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000573e:	1b b9       	ld.ub	r9,sp[0x3]
80005740:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80005744:	1b a9       	ld.ub	r9,sp[0x2]
80005746:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000574a:	1b 99       	ld.ub	r9,sp[0x1]
8000574c:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80005750:	1b 88       	ld.ub	r8,sp[0x0]
80005752:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80005756:	0c 9a       	mov	r10,r6
80005758:	e0 6b 00 ff 	mov	r11,255
8000575c:	ee cc fe 14 	sub	r12,r7,-492
80005760:	f0 1f 00 0f 	mcall	8000579c <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80005764:	35 58       	mov	r8,85
80005766:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000576a:	3a a8       	mov	r8,-86
8000576c:	ef 68 01 ff 	st.b	r7[511],r8
80005770:	30 1c       	mov	r12,1
   return true;
}
80005772:	2f fd       	sub	sp,-4
80005774:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005778:	00 00       	add	r0,r0
8000577a:	06 8c       	andn	r12,r3
8000577c:	00 00       	add	r0,r0
8000577e:	04 48       	or	r8,r2
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	48 d4       	lddpc	r4,800057b4 <fat_allocfreespace+0x14>
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	46 a4       	lddsp	r4,sp[0x1a8]
80005788:	80 00       	ld.sh	r0,r0[0x0]
8000578a:	48 bc       	lddpc	r12,800057b4 <fat_allocfreespace+0x14>
8000578c:	00 00       	add	r0,r0
8000578e:	04 8c       	andn	r12,r2
80005790:	80 00       	ld.sh	r0,r0[0x0]
80005792:	82 c0       	ld.uh	r0,r1[0x8]
80005794:	80 00       	ld.sh	r0,r0[0x0]
80005796:	7a d6       	ld.w	r6,sp[0x34]
80005798:	80 00       	ld.sh	r0,r0[0x0]
8000579a:	82 d4       	ld.uh	r4,r1[0xa]
8000579c:	80 00       	ld.sh	r0,r0[0x0]
8000579e:	7c 1e       	ld.w	lr,lr[0x4]

800057a0 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800057a0:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800057a2:	4c 78       	lddpc	r8,800058bc <fat_allocfreespace+0x11c>
800057a4:	11 89       	ld.ub	r9,r8[0x0]
800057a6:	30 38       	mov	r8,3
800057a8:	f0 09 18 00 	cp.b	r9,r8
800057ac:	c0 61       	brne	800057b8 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800057ae:	3f fc       	mov	r12,-1
800057b0:	f0 1f 00 44 	mcall	800058c0 <fat_allocfreespace+0x120>
800057b4:	e0 80 00 83 	breq	800058ba <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800057b8:	4c 31       	lddpc	r1,800058c4 <fat_allocfreespace+0x124>
800057ba:	03 89       	ld.ub	r9,r1[0x0]
800057bc:	3f f8       	mov	r8,-1
800057be:	f0 09 18 00 	cp.b	r9,r8
800057c2:	c0 61       	brne	800057ce <fat_allocfreespace+0x2e>
800057c4:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
800057c6:	30 29       	mov	r9,2
800057c8:	4c 08       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057ca:	91 09       	st.w	r8[0x0],r9
800057cc:	c0 78       	rjmp	800057da <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
800057ce:	4b e8       	lddpc	r8,800058c4 <fat_allocfreespace+0x124>
800057d0:	70 09       	ld.w	r9,r8[0x0]
800057d2:	2f f9       	sub	r9,-1
800057d4:	4b d8       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057d6:	91 09       	st.w	r8[0x0],r9
800057d8:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
800057da:	f0 1f 00 3d 	mcall	800058cc <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
800057de:	4b b8       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057e0:	70 09       	ld.w	r9,r8[0x0]
800057e2:	4b c8       	lddpc	r8,800058d0 <fat_allocfreespace+0x130>
800057e4:	70 38       	ld.w	r8,r8[0xc]
800057e6:	10 39       	cp.w	r9,r8
800057e8:	c5 e2       	brcc	800058a4 <fat_allocfreespace+0x104>
800057ea:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
800057ec:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
800057ee:	4b 77       	lddpc	r7,800058c8 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
800057f0:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
800057f2:	4b 55       	lddpc	r5,800058c4 <fat_allocfreespace+0x124>
800057f4:	4b 76       	lddpc	r6,800058d0 <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
800057f6:	04 9c       	mov	r12,r2
800057f8:	f0 1f 00 37 	mcall	800058d4 <fat_allocfreespace+0x134>
800057fc:	c5 f0       	breq	800058ba <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
800057fe:	6e 18       	ld.w	r8,r7[0x4]
80005800:	58 08       	cp.w	r8,0
80005802:	c4 01       	brne	80005882 <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005804:	6e 08       	ld.w	r8,r7[0x0]
80005806:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005808:	58 04       	cp.w	r4,0
8000580a:	c0 80       	breq	8000581a <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000580c:	20 18       	sub	r8,1
8000580e:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005810:	06 9c       	mov	r12,r3
80005812:	f0 1f 00 31 	mcall	800058d4 <fat_allocfreespace+0x134>
80005816:	c1 e1       	brne	80005852 <fat_allocfreespace+0xb2>
80005818:	c5 18       	rjmp	800058ba <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000581a:	03 88       	ld.ub	r8,r1[0x0]
8000581c:	3f f9       	mov	r9,-1
8000581e:	f2 08 18 00 	cp.b	r8,r9
80005822:	c1 60       	breq	8000584e <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005824:	6a 08       	ld.w	r8,r5[0x0]
80005826:	58 08       	cp.w	r8,0
80005828:	c0 e1       	brne	80005844 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000582a:	4a 59       	lddpc	r9,800058bc <fat_allocfreespace+0x11c>
8000582c:	13 88       	ld.ub	r8,r9[0x0]
8000582e:	30 39       	mov	r9,3
80005830:	f2 08 18 00 	cp.b	r8,r9
80005834:	c0 50       	breq	8000583e <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005836:	31 b9       	mov	r9,27
80005838:	4a 88       	lddpc	r8,800058d8 <fat_allocfreespace+0x138>
8000583a:	b0 89       	st.b	r8[0x0],r9
8000583c:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000583e:	6c 68       	ld.w	r8,r6[0x18]
80005840:	8f 08       	st.w	r7[0x0],r8
80005842:	c0 28       	rjmp	80005846 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005844:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005846:	06 9c       	mov	r12,r3
80005848:	f0 1f 00 23 	mcall	800058d4 <fat_allocfreespace+0x134>
8000584c:	c3 70       	breq	800058ba <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000584e:	6e 18       	ld.w	r8,r7[0x4]
80005850:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80005852:	6e 18       	ld.w	r8,r7[0x4]
80005854:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80005856:	e0 68 ff ff 	mov	r8,65535
8000585a:	ea 18 0f ff 	orh	r8,0xfff
8000585e:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005860:	06 9c       	mov	r12,r3
80005862:	f0 1f 00 1d 	mcall	800058d4 <fat_allocfreespace+0x134>
80005866:	c2 a0       	breq	800058ba <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80005868:	6a 19       	ld.w	r9,r5[0x4]
8000586a:	0d 98       	ld.ub	r8,r6[0x1]
8000586c:	10 39       	cp.w	r9,r8
8000586e:	e0 8b 00 06 	brhi	8000587a <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80005872:	30 09       	mov	r9,0
80005874:	49 48       	lddpc	r8,800058c4 <fat_allocfreespace+0x124>
80005876:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
80005878:	c1 e8       	rjmp	800058b4 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000587a:	10 19       	sub	r9,r8
8000587c:	8b 19       	st.w	r5[0x4],r9
8000587e:	06 94       	mov	r4,r3
80005880:	c0 98       	rjmp	80005892 <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80005882:	58 04       	cp.w	r4,0
80005884:	c1 81       	brne	800058b4 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80005886:	58 00       	cp.w	r0,0
80005888:	c0 50       	breq	80005892 <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
8000588a:	6e 08       	ld.w	r8,r7[0x0]
8000588c:	f0 c8 fe 0c 	sub	r8,r8,-500
80005890:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
80005892:	6e 08       	ld.w	r8,r7[0x0]
80005894:	2f f8       	sub	r8,-1
80005896:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80005898:	6c 39       	ld.w	r9,r6[0xc]
8000589a:	10 39       	cp.w	r9,r8
8000589c:	fe 9b ff ad 	brhi	800057f6 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800058a0:	58 04       	cp.w	r4,0
800058a2:	c0 91       	brne	800058b4 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800058a4:	58 00       	cp.w	r0,0
800058a6:	c0 30       	breq	800058ac <fat_allocfreespace+0x10c>
800058a8:	30 00       	mov	r0,0
800058aa:	c8 eb       	rjmp	800057c6 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800058ac:	31 b9       	mov	r9,27
800058ae:	48 b8       	lddpc	r8,800058d8 <fat_allocfreespace+0x138>
800058b0:	b0 89       	st.b	r8[0x0],r9
800058b2:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
800058b4:	f0 1f 00 0a 	mcall	800058dc <fat_allocfreespace+0x13c>
800058b8:	d8 32       	popm	r0-r7,pc
800058ba:	d8 3a       	popm	r0-r7,pc,r12=0
800058bc:	00 00       	add	r0,r0
800058be:	06 d8       	st.w	--r3,r8
800058c0:	80 00       	ld.sh	r0,r0[0x0]
800058c2:	57 00       	stdsp	sp[0x1c0],r0
800058c4:	00 00       	add	r0,r0
800058c6:	07 34       	ld.ub	r4,r3++
800058c8:	00 00       	add	r0,r0
800058ca:	07 2c       	ld.uh	r12,r3++
800058cc:	80 00       	ld.sh	r0,r0[0x0]
800058ce:	53 5c       	stdsp	sp[0xd4],r12
800058d0:	00 00       	add	r0,r0
800058d2:	06 8c       	andn	r12,r3
800058d4:	80 00       	ld.sh	r0,r0[0x0]
800058d6:	49 e8       	lddpc	r8,8000594c <fat_alloc_entry_free+0x6c>
800058d8:	00 00       	add	r0,r0
800058da:	06 dc       	st.w	--r3,r12
800058dc:	80 00       	ld.sh	r0,r0[0x0]
800058de:	53 e8       	stdsp	sp[0xf8],r8

800058e0 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
800058e0:	d4 31       	pushm	r0-r7,lr
800058e2:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
800058e4:	30 09       	mov	r9,0
800058e6:	4a 38       	lddpc	r8,80005970 <fat_alloc_entry_free+0x90>
800058e8:	b0 19       	st.h	r8[0x2],r9
800058ea:	18 92       	mov	r2,r12
800058ec:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800058ee:	4a 26       	lddpc	r6,80005974 <fat_alloc_entry_free+0x94>
800058f0:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
800058f2:	4a 21       	lddpc	r1,80005978 <fat_alloc_entry_free+0x98>
800058f4:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
800058f6:	10 97       	mov	r7,r8
800058f8:	12 90       	mov	r0,r9
800058fa:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800058fc:	f0 1f 00 20 	mcall	8000597c <fat_alloc_entry_free+0x9c>
80005900:	c1 61       	brne	8000592c <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005902:	0d 88       	ld.ub	r8,r6[0x0]
80005904:	e6 08 18 00 	cp.b	r8,r3
80005908:	c3 11       	brne	8000596a <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000590a:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
8000590c:	f0 1f 00 1d 	mcall	80005980 <fat_alloc_entry_free+0xa0>
80005910:	c0 a1       	brne	80005924 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80005912:	58 04       	cp.w	r4,0
80005914:	c2 b1       	brne	8000596a <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80005916:	f0 1f 00 1c 	mcall	80005984 <fat_alloc_entry_free+0xa4>
8000591a:	c2 80       	breq	8000596a <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000591c:	ae 10       	st.h	r7[0x2],r0
8000591e:	40 02       	lddsp	r2,sp[0x0]
80005920:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
80005922:	ce db       	rjmp	800058fc <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005924:	f0 1f 00 19 	mcall	80005988 <fat_alloc_entry_free+0xa8>
80005928:	ce a1       	brne	800058fc <fat_alloc_entry_free+0x1c>
8000592a:	c2 08       	rjmp	8000596a <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000592c:	f0 1f 00 18 	mcall	8000598c <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
80005930:	19 88       	ld.ub	r8,r12[0x0]
80005932:	30 09       	mov	r9,0
80005934:	f2 08 18 00 	cp.b	r8,r9
80005938:	c0 61       	brne	80005944 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
8000593a:	20 12       	sub	r2,1
8000593c:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000593e:	c0 31       	brne	80005944 <fat_alloc_entry_free+0x64>
80005940:	30 1c       	mov	r12,1
80005942:	c1 58       	rjmp	8000596c <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005944:	8e 18       	ld.sh	r8,r7[0x2]
80005946:	2f f8       	sub	r8,-1
80005948:	5c 88       	casts.h	r8
8000594a:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000594c:	cd 81       	brne	800058fc <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000594e:	58 04       	cp.w	r4,0
80005950:	c0 60       	breq	8000595c <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80005952:	31 b9       	mov	r9,27
80005954:	48 88       	lddpc	r8,80005974 <fat_alloc_entry_free+0x94>
80005956:	b0 89       	st.b	r8[0x0],r9
80005958:	30 0c       	mov	r12,0
            return false;
8000595a:	c0 98       	rjmp	8000596c <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
8000595c:	f0 1f 00 0a 	mcall	80005984 <fat_alloc_entry_free+0xa4>
80005960:	c0 50       	breq	8000596a <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005962:	ae 10       	st.h	r7[0x2],r0
80005964:	40 02       	lddsp	r2,sp[0x0]
80005966:	0a 94       	mov	r4,r5
80005968:	cc ab       	rjmp	800058fc <fat_alloc_entry_free+0x1c>
8000596a:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
8000596c:	2f fd       	sub	sp,-4
8000596e:	d8 32       	popm	r0-r7,pc
80005970:	00 00       	add	r0,r0
80005972:	06 d8       	st.w	--r3,r8
80005974:	00 00       	add	r0,r0
80005976:	06 dc       	st.w	--r3,r12
80005978:	00 00       	add	r0,r0
8000597a:	07 34       	ld.ub	r4,r3++
8000597c:	80 00       	ld.sh	r0,r0[0x0]
8000597e:	4f 04       	lddpc	r4,80005b3c <fat_create_short_entry_name+0x138>
80005980:	80 00       	ld.sh	r0,r0[0x0]
80005982:	57 a0       	stdsp	sp[0x1e8],r0
80005984:	80 00       	ld.sh	r0,r0[0x0]
80005986:	56 38       	stdsp	sp[0x18c],r8
80005988:	80 00       	ld.sh	r0,r0[0x0]
8000598a:	53 74       	stdsp	sp[0xdc],r4
8000598c:	80 00       	ld.sh	r0,r0[0x0]
8000598e:	43 34       	lddsp	r4,sp[0xcc]

80005990 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
80005990:	d4 31       	pushm	r0-r7,lr
80005992:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
80005994:	33 a2       	mov	r2,58
80005996:	30 d5       	mov	r5,13
80005998:	30 23       	mov	r3,2
8000599a:	49 86       	lddpc	r6,800059f8 <fat_check_name+0x68>
8000599c:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800059a0:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800059a2:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800059a4:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800059a6:	0e 9c       	mov	r12,r7
800059a8:	f0 1f 00 15 	mcall	800059fc <fat_check_name+0x6c>
800059ac:	c1 a1       	brne	800059e0 <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059ae:	ee 02 19 00 	cp.h	r2,r7
800059b2:	c0 60       	breq	800059be <fat_check_name+0x2e>
800059b4:	02 98       	mov	r8,r1
800059b6:	11 89       	ld.ub	r9,r8[0x0]
800059b8:	ee 09 19 00 	cp.h	r9,r7
800059bc:	c0 61       	brne	800059c8 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800059be:	31 c9       	mov	r9,28
800059c0:	49 08       	lddpc	r8,80005a00 <fat_check_name+0x70>
800059c2:	b0 89       	st.b	r8[0x0],r9
800059c4:	30 03       	mov	r3,0
            return 0;      // incorrect character
800059c6:	c1 68       	rjmp	800059f2 <fat_check_name+0x62>
800059c8:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
800059ca:	0c 38       	cp.w	r8,r6
800059cc:	cf 51       	brne	800059b6 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800059ce:	58 05       	cp.w	r5,0
800059d0:	c0 41       	brne	800059d8 <fat_check_name+0x48>
      {
         u8_nb_entry++;
800059d2:	2f f3       	sub	r3,-1
800059d4:	5c 53       	castu.b	r3
800059d6:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
800059d8:	20 15       	sub	r5,1
800059da:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
800059dc:	2f f4       	sub	r4,-1
   }
800059de:	ce 3b       	rjmp	800059a4 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
800059e0:	31 48       	mov	r8,20
800059e2:	f0 03 18 00 	cp.b	r3,r8
800059e6:	e0 88 00 06 	brls	800059f2 <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
800059ea:	32 b9       	mov	r9,43
800059ec:	48 58       	lddpc	r8,80005a00 <fat_check_name+0x70>
800059ee:	b0 89       	st.b	r8[0x0],r9
800059f0:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
800059f2:	06 9c       	mov	r12,r3
800059f4:	d8 32       	popm	r0-r7,pc
800059f6:	00 00       	add	r0,r0
800059f8:	80 00       	ld.sh	r0,r0[0x0]
800059fa:	82 c4       	ld.uh	r4,r1[0x8]
800059fc:	80 00       	ld.sh	r0,r0[0x0]
800059fe:	43 0c       	lddsp	r12,sp[0xc0]
80005a00:	00 00       	add	r0,r0
80005a02:	06 dc       	st.w	--r3,r12

80005a04 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005a04:	d4 31       	pushm	r0-r7,lr
80005a06:	20 8d       	sub	sp,32
80005a08:	18 94       	mov	r4,r12
80005a0a:	50 2b       	stdsp	sp[0x8],r11
80005a0c:	14 97       	mov	r7,r10
80005a0e:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80005a10:	58 09       	cp.w	r9,0
80005a12:	c0 40       	breq	80005a1a <fat_create_short_entry_name+0x16>
80005a14:	30 09       	mov	r9,0
80005a16:	50 19       	stdsp	sp[0x4],r9
80005a18:	c0 68       	rjmp	80005a24 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005a1a:	f0 1f 00 66 	mcall	80005bb0 <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80005a1e:	f0 1f 00 66 	mcall	80005bb4 <fat_create_short_entry_name+0x1b0>
80005a22:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005a24:	30 98       	mov	r8,9
80005a26:	f0 07 18 00 	cp.b	r7,r8
80005a2a:	e0 8b 00 04 	brhi	80005a32 <fat_create_short_entry_name+0x2e>
80005a2e:	30 18       	mov	r8,1
80005a30:	c0 88       	rjmp	80005a40 <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80005a32:	36 38       	mov	r8,99
80005a34:	ee 08 18 00 	cp.b	r8,r7
80005a38:	f9 b8 02 02 	movhs	r8,2
80005a3c:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80005a40:	e0 6a cc cd 	mov	r10,52429
80005a44:	ea 1a cc cc 	orh	r10,0xcccc
80005a48:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005a4c:	e6 09 16 03 	lsr	r9,r3,0x3
80005a50:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005a54:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80005a58:	2d 09       	sub	r9,-48
80005a5a:	5c 59       	castu.b	r9
80005a5c:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80005a5e:	e0 63 85 1f 	mov	r3,34079
80005a62:	ea 13 51 eb 	orh	r3,0x51eb
80005a66:	ee 03 06 42 	mulu.d	r2,r7,r3
80005a6a:	e6 09 16 05 	lsr	r9,r3,0x5
80005a6e:	f2 0b 10 64 	mul	r11,r9,100
80005a72:	ee 0b 01 0b 	sub	r11,r7,r11
80005a76:	5c 5b       	castu.b	r11
80005a78:	f6 0a 06 4a 	mulu.d	r10,r11,r10
80005a7c:	f6 0a 16 03 	lsr	r10,r11,0x3
80005a80:	2d 0a       	sub	r10,-48
80005a82:	5c 5a       	castu.b	r10
80005a84:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005a86:	2d 09       	sub	r9,-48
80005a88:	5c 59       	castu.b	r9
80005a8a:	50 49       	stdsp	sp[0x10],r9
80005a8c:	30 01       	mov	r1,0
80005a8e:	30 17       	mov	r7,1
80005a90:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80005a92:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005a94:	f0 09 11 ff 	rsub	r9,r8,-1
80005a98:	2f 89       	sub	r9,-8
80005a9a:	50 39       	stdsp	sp[0xc],r9
80005a9c:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
80005a9e:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005aa0:	f0 08 11 06 	rsub	r8,r8,6
80005aa4:	5c 58       	castu.b	r8
80005aa6:	50 78       	stdsp	sp[0x1c],r8
80005aa8:	c0 28       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005aaa:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80005aac:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
80005aae:	e6 07 18 00 	cp.b	r7,r3
80005ab2:	c1 41       	brne	80005ada <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005ab4:	40 39       	lddsp	r9,sp[0xc]
80005ab6:	0a 39       	cp.w	r9,r5
80005ab8:	5f 09       	sreq	r9
80005aba:	e0 06 18 00 	cp.b	r6,r0
80005abe:	5f 08       	sreq	r8
80005ac0:	f3 e8 10 08 	or	r8,r9,r8
80005ac4:	30 09       	mov	r9,0
80005ac6:	f2 08 18 00 	cp.b	r8,r9
80005aca:	c0 51       	brne	80005ad4 <fat_create_short_entry_name+0xd0>
80005acc:	0c 9c       	mov	r12,r6
80005ace:	f0 1f 00 3b 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005ad2:	c1 10       	breq	80005af4 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005ad4:	2f f7       	sub	r7,-1
80005ad6:	5c 57       	castu.b	r7
            continue;
80005ad8:	ce ab       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005ada:	e4 07 18 00 	cp.b	r7,r2
80005ade:	c1 21       	brne	80005b02 <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005ae0:	30 b9       	mov	r9,11
80005ae2:	f2 05 18 00 	cp.b	r5,r9
80005ae6:	c0 50       	breq	80005af0 <fat_create_short_entry_name+0xec>
80005ae8:	0c 9c       	mov	r12,r6
80005aea:	f0 1f 00 34 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005aee:	c0 30       	breq	80005af4 <fat_create_short_entry_name+0xf0>
80005af0:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80005af2:	cd db       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005af4:	0c 9c       	mov	r12,r6
80005af6:	f0 1f 00 32 	mcall	80005bbc <fat_create_short_entry_name+0x1b8>
80005afa:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005afc:	2f f4       	sub	r4,-1
         if( 0 == character )
80005afe:	58 0c       	cp.w	r12,0
80005b00:	cd 60       	breq	80005aac <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80005b02:	30 78       	mov	r8,7
80005b04:	f0 07 18 00 	cp.b	r7,r8
80005b08:	c0 c1       	brne	80005b20 <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005b0a:	e0 06 18 00 	cp.b	r6,r0
80005b0e:	c0 50       	breq	80005b18 <fat_create_short_entry_name+0x114>
80005b10:	0c 9c       	mov	r12,r6
80005b12:	f0 1f 00 2a 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005b16:	c0 30       	breq	80005b1c <fat_create_short_entry_name+0x118>
80005b18:	30 87       	mov	r7,8
80005b1a:	cc 9b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005b1c:	2f f4       	sub	r4,-1
80005b1e:	cc 7b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80005b20:	30 68       	mov	r8,6
80005b22:	f0 07 18 00 	cp.b	r7,r8
80005b26:	c0 61       	brne	80005b32 <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005b28:	e4 05 18 00 	cp.b	r5,r2
80005b2c:	cb f0       	breq	80005aaa <fat_create_short_entry_name+0xa6>
80005b2e:	32 06       	mov	r6,32
80005b30:	c1 28       	rjmp	80005b54 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80005b32:	30 98       	mov	r8,9
80005b34:	f0 07 18 00 	cp.b	r7,r8
80005b38:	c0 71       	brne	80005b46 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005b3a:	30 b8       	mov	r8,11
80005b3c:	f0 05 18 00 	cp.b	r5,r8
80005b40:	c3 50       	breq	80005baa <fat_create_short_entry_name+0x1a6>
80005b42:	32 06       	mov	r6,32
80005b44:	c0 f8       	rjmp	80005b62 <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005b46:	30 58       	mov	r8,5
80005b48:	f0 07 18 00 	cp.b	r7,r8
80005b4c:	c0 41       	brne	80005b54 <fat_create_short_entry_name+0x150>
80005b4e:	40 66       	lddsp	r6,sp[0x18]
80005b50:	30 67       	mov	r7,6
80005b52:	c0 f8       	rjmp	80005b70 <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005b54:	30 48       	mov	r8,4
80005b56:	f0 07 18 00 	cp.b	r7,r8
80005b5a:	c0 41       	brne	80005b62 <fat_create_short_entry_name+0x15e>
80005b5c:	40 56       	lddsp	r6,sp[0x14]
80005b5e:	30 57       	mov	r7,5
80005b60:	c1 28       	rjmp	80005b84 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80005b62:	30 38       	mov	r8,3
80005b64:	f0 07 18 00 	cp.b	r7,r8
80005b68:	c0 41       	brne	80005b70 <fat_create_short_entry_name+0x16c>
80005b6a:	40 46       	lddsp	r6,sp[0x10]
80005b6c:	30 47       	mov	r7,4
80005b6e:	c0 b8       	rjmp	80005b84 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80005b70:	30 28       	mov	r8,2
80005b72:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005b74:	f0 07 18 00 	cp.b	r7,r8
80005b78:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
80005b7c:	f0 09 18 00 	cp.b	r9,r8
80005b80:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
80005b84:	40 08       	lddsp	r8,sp[0x0]
80005b86:	58 08       	cp.w	r8,0
80005b88:	c0 50       	breq	80005b92 <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
80005b8a:	40 29       	lddsp	r9,sp[0x8]
80005b8c:	12 c6       	st.b	r9++,r6
80005b8e:	50 29       	stdsp	sp[0x8],r9
80005b90:	c0 48       	rjmp	80005b98 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80005b92:	40 18       	lddsp	r8,sp[0x4]
80005b94:	10 c6       	st.b	r8++,r6
80005b96:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80005b98:	2f f5       	sub	r5,-1
80005b9a:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005b9c:	e2 08 16 01 	lsr	r8,r1,0x1
80005ba0:	a7 71       	lsl	r1,0x7
80005ba2:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005ba4:	0c 01       	add	r1,r6
80005ba6:	5c 51       	castu.b	r1
80005ba8:	c8 2b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005baa:	02 9c       	mov	r12,r1
80005bac:	2f 8d       	sub	sp,-32
80005bae:	d8 32       	popm	r0-r7,pc
80005bb0:	80 00       	ld.sh	r0,r0[0x0]
80005bb2:	46 a4       	lddsp	r4,sp[0x1a8]
80005bb4:	80 00       	ld.sh	r0,r0[0x0]
80005bb6:	43 34       	lddsp	r4,sp[0xcc]
80005bb8:	80 00       	ld.sh	r0,r0[0x0]
80005bba:	43 0c       	lddsp	r12,sp[0xc0]
80005bbc:	80 00       	ld.sh	r0,r0[0x0]
80005bbe:	53 10       	stdsp	sp[0xc4],r0

80005bc0 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80005bc0:	eb cd 40 80 	pushm	r7,lr
80005bc4:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005bc6:	f0 1f 00 12 	mcall	80005c0c <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005bca:	19 88       	ld.ub	r8,r12[0x0]
80005bcc:	58 08       	cp.w	r8,0
80005bce:	c0 61       	brne	80005bda <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80005bd0:	30 a9       	mov	r9,10
80005bd2:	49 08       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bd4:	b0 89       	st.b	r8[0x0],r9
80005bd6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005bda:	3e 59       	mov	r9,-27
80005bdc:	f2 08 18 00 	cp.b	r8,r9
80005be0:	c0 70       	breq	80005bee <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80005be2:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005be6:	30 f8       	mov	r8,15
80005be8:	f0 09 18 00 	cp.b	r9,r8
80005bec:	c0 61       	brne	80005bf8 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005bee:	30 b9       	mov	r9,11
80005bf0:	48 88       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bf2:	b0 89       	st.b	r8[0x0],r9
80005bf4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005bf8:	30 b9       	mov	r9,11
80005bfa:	48 68       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bfc:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80005bfe:	30 ba       	mov	r10,11
80005c00:	0e 9b       	mov	r11,r7
80005c02:	f0 1f 00 05 	mcall	80005c14 <fat_entry_shortname_compare+0x54>
80005c06:	5f 0c       	sreq	r12
}
80005c08:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	43 34       	lddsp	r4,sp[0xcc]
80005c10:	00 00       	add	r0,r0
80005c12:	06 dc       	st.w	--r3,r12
80005c14:	80 00       	ld.sh	r0,r0[0x0]
80005c16:	7a b0       	ld.w	r0,sp[0x2c]

80005c18 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005c18:	d4 31       	pushm	r0-r7,lr
80005c1a:	20 3d       	sub	sp,12
80005c1c:	18 93       	mov	r3,r12
80005c1e:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c20:	1a 96       	mov	r6,sp
80005c22:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c24:	49 65       	lddpc	r5,80005c7c <fat_find_short_entry_name+0x64>
80005c26:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c28:	49 61       	lddpc	r1,80005c80 <fat_find_short_entry_name+0x68>
80005c2a:	30 a0       	mov	r0,10
80005c2c:	c0 58       	rjmp	80005c36 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80005c2e:	3f f8       	mov	r8,-1
80005c30:	f0 07 18 00 	cp.b	r7,r8
80005c34:	c2 00       	breq	80005c74 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80005c36:	2f f7       	sub	r7,-1
80005c38:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c3a:	04 99       	mov	r9,r2
80005c3c:	0e 9a       	mov	r10,r7
80005c3e:	1a 9b       	mov	r11,sp
80005c40:	06 9c       	mov	r12,r3
80005c42:	f0 1f 00 11 	mcall	80005c84 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c46:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005c48:	f0 1f 00 10 	mcall	80005c88 <fat_find_short_entry_name+0x70>
80005c4c:	c0 81       	brne	80005c5c <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80005c4e:	48 d8       	lddpc	r8,80005c80 <fat_find_short_entry_name+0x68>
80005c50:	11 89       	ld.ub	r9,r8[0x0]
80005c52:	31 a8       	mov	r8,26
80005c54:	f0 09 18 00 	cp.b	r9,r8
80005c58:	c0 e1       	brne	80005c74 <fat_find_short_entry_name+0x5c>
80005c5a:	c0 e8       	rjmp	80005c76 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005c5c:	1a 9c       	mov	r12,sp
80005c5e:	f0 1f 00 0c 	mcall	80005c8c <fat_find_short_entry_name+0x74>
80005c62:	ce 61       	brne	80005c2e <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c64:	03 88       	ld.ub	r8,r1[0x0]
80005c66:	e0 08 18 00 	cp.b	r8,r0
80005c6a:	c0 60       	breq	80005c76 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005c6c:	8a 18       	ld.sh	r8,r5[0x2]
80005c6e:	2f f8       	sub	r8,-1
80005c70:	aa 18       	st.h	r5[0x2],r8
      }
80005c72:	ce bb       	rjmp	80005c48 <fat_find_short_entry_name+0x30>
80005c74:	30 07       	mov	r7,0
   }
}
80005c76:	0e 9c       	mov	r12,r7
80005c78:	2f dd       	sub	sp,-12
80005c7a:	d8 32       	popm	r0-r7,pc
80005c7c:	00 00       	add	r0,r0
80005c7e:	06 d8       	st.w	--r3,r8
80005c80:	00 00       	add	r0,r0
80005c82:	06 dc       	st.w	--r3,r12
80005c84:	80 00       	ld.sh	r0,r0[0x0]
80005c86:	5a 04       	cp.w	r4,-32
80005c88:	80 00       	ld.sh	r0,r0[0x0]
80005c8a:	4f 04       	lddpc	r4,80005e48 <fat_mount+0x110>
80005c8c:	80 00       	ld.sh	r0,r0[0x0]
80005c8e:	5b c0       	cp.w	r0,-4

80005c90 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80005c90:	eb cd 40 fc 	pushm	r2-r7,lr
80005c94:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005c96:	f0 1f 00 21 	mcall	80005d18 <fat_create_entry_file_name+0x88>
80005c9a:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005c9c:	c3 b0       	breq	80005d12 <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005c9e:	0c 9c       	mov	r12,r6
80005ca0:	f0 1f 00 1f 	mcall	80005d1c <fat_create_entry_file_name+0x8c>
80005ca4:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005ca6:	c0 61       	brne	80005cb2 <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005ca8:	32 a9       	mov	r9,42
80005caa:	49 e8       	lddpc	r8,80005d20 <fat_create_entry_file_name+0x90>
80005cac:	b0 89       	st.b	r8[0x0],r9
80005cae:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005cb2:	0a 9c       	mov	r12,r5
80005cb4:	f0 1f 00 1c 	mcall	80005d24 <fat_create_entry_file_name+0x94>
80005cb8:	c2 d0       	breq	80005d12 <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005cba:	30 09       	mov	r9,0
80005cbc:	0e 9a       	mov	r10,r7
80005cbe:	12 9b       	mov	r11,r9
80005cc0:	0c 9c       	mov	r12,r6
80005cc2:	f0 1f 00 1a 	mcall	80005d28 <fat_create_entry_file_name+0x98>
80005cc6:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005cc8:	20 15       	sub	r5,1
80005cca:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005ccc:	c1 c0       	breq	80005d04 <fat_create_entry_file_name+0x74>
80005cce:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005cd0:	49 74       	lddpc	r4,80005d2c <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005cd2:	ea c3 ff c0 	sub	r3,r5,-64
80005cd6:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005cd8:	88 18       	ld.sh	r8,r4[0x2]
80005cda:	20 18       	sub	r8,1
80005cdc:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80005cde:	f0 1f 00 15 	mcall	80005d30 <fat_create_entry_file_name+0xa0>
80005ce2:	c1 80       	breq	80005d12 <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005ce4:	ea 07 18 00 	cp.b	r7,r5
80005ce8:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005cec:	0e 9a       	mov	r10,r7
80005cee:	04 9b       	mov	r11,r2
80005cf0:	0c 9c       	mov	r12,r6
80005cf2:	f0 1f 00 11 	mcall	80005d34 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005cf6:	2f f7       	sub	r7,-1
80005cf8:	5c 57       	castu.b	r7
80005cfa:	ee 05 18 00 	cp.b	r5,r7
80005cfe:	c0 33       	brcs	80005d04 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005d00:	2f 36       	sub	r6,-13
80005d02:	ce bb       	rjmp	80005cd8 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005d04:	48 a8       	lddpc	r8,80005d2c <fat_create_entry_file_name+0x9c>
80005d06:	90 19       	ld.sh	r9,r8[0x2]
80005d08:	f2 05 00 05 	add	r5,r9,r5
80005d0c:	b0 15       	st.h	r8[0x2],r5
80005d0e:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80005d12:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005d16:	00 00       	add	r0,r0
80005d18:	80 00       	ld.sh	r0,r0[0x0]
80005d1a:	59 90       	cp.w	r0,25
80005d1c:	80 00       	ld.sh	r0,r0[0x0]
80005d1e:	5c 18       	scr	r8
80005d20:	00 00       	add	r0,r0
80005d22:	06 dc       	st.w	--r3,r12
80005d24:	80 00       	ld.sh	r0,r0[0x0]
80005d26:	58 e0       	cp.w	r0,14
80005d28:	80 00       	ld.sh	r0,r0[0x0]
80005d2a:	5a 04       	cp.w	r4,-32
80005d2c:	00 00       	add	r0,r0
80005d2e:	06 d8       	st.w	--r3,r8
80005d30:	80 00       	ld.sh	r0,r0[0x0]
80005d32:	4f 04       	lddpc	r4,80005ef0 <fat_mount+0x1b8>
80005d34:	80 00       	ld.sh	r0,r0[0x0]
80005d36:	54 f4       	stdsp	sp[0x13c],r4

80005d38 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005d38:	d4 31       	pushm	r0-r7,lr
80005d3a:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005d3c:	30 07       	mov	r7,0
80005d3e:	fe f8 02 d2 	ld.w	r8,pc[722]
80005d42:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005d44:	f0 1f 00 b4 	mcall	80006014 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005d48:	fe f8 02 d0 	ld.w	r8,pc[720]
80005d4c:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005d4e:	fe f8 02 ce 	ld.w	r8,pc[718]
80005d52:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80005d54:	f0 1f 00 b3 	mcall	80006020 <fat_mount+0x2e8>
80005d58:	e0 80 01 58 	breq	80006008 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d5c:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005d60:	ea c8 fe 42 	sub	r8,r5,-446
80005d64:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005d66:	38 04       	mov	r4,-128
80005d68:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005d6a:	30 1c       	mov	r12,1
80005d6c:	f0 1f 00 af 	mcall	80006028 <fat_mount+0x2f0>
80005d70:	e0 80 01 4c 	breq	80006008 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d74:	eb 39 01 fe 	ld.ub	r9,r5[510]
80005d78:	35 58       	mov	r8,85
80005d7a:	f0 09 18 00 	cp.b	r9,r8
80005d7e:	c0 d0       	breq	80005d98 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005d80:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005d84:	3a a8       	mov	r8,-86
80005d86:	f0 09 18 00 	cp.b	r9,r8
80005d8a:	c0 70       	breq	80005d98 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005d8c:	30 29       	mov	r9,2
80005d8e:	fe f8 02 9e 	ld.w	r8,pc[670]
80005d92:	b0 89       	st.b	r8[0x0],r9
80005d94:	30 0c       	mov	r12,0
         return false;
80005d96:	c3 a9       	rjmp	8000600a <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80005d98:	fe f8 02 84 	ld.w	r8,pc[644]
80005d9c:	70 08       	ld.w	r8,r8[0x0]
80005d9e:	58 08       	cp.w	r8,0
80005da0:	c5 21       	brne	80005e44 <fat_mount+0x10c>
80005da2:	40 08       	lddsp	r8,sp[0x0]
80005da4:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005da6:	30 1e       	mov	lr,1
80005da8:	30 63       	mov	r3,6
80005daa:	30 e2       	mov	r2,14
80005dac:	30 b1       	mov	r1,11
80005dae:	30 c0       	mov	r0,12
80005db0:	11 89       	ld.ub	r9,r8[0x0]
80005db2:	e8 09 18 00 	cp.b	r9,r4
80005db6:	5f 0b       	sreq	r11
80005db8:	ee 09 18 00 	cp.b	r9,r7
80005dbc:	5f 09       	sreq	r9
80005dbe:	f7 e9 10 09 	or	r9,r11,r9
80005dc2:	ee 09 18 00 	cp.b	r9,r7
80005dc6:	c1 90       	breq	80005df8 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005dc8:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005dca:	fc 09 18 00 	cp.b	r9,lr
80005dce:	5f 0c       	sreq	r12
80005dd0:	ec 09 18 00 	cp.b	r9,r6
80005dd4:	5f 0b       	sreq	r11
80005dd6:	f9 eb 10 0b 	or	r11,r12,r11
80005dda:	ee 0b 18 00 	cp.b	r11,r7
80005dde:	c1 41       	brne	80005e06 <fat_mount+0xce>
80005de0:	e6 09 18 00 	cp.b	r9,r3
80005de4:	c1 10       	breq	80005e06 <fat_mount+0xce>
80005de6:	e4 09 18 00 	cp.b	r9,r2
80005dea:	c0 e0       	breq	80005e06 <fat_mount+0xce>
80005dec:	e2 09 18 00 	cp.b	r9,r1
80005df0:	c0 b0       	breq	80005e06 <fat_mount+0xce>
80005df2:	e0 09 18 00 	cp.b	r9,r0
80005df6:	c0 80       	breq	80005e06 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005df8:	2f fa       	sub	r10,-1
80005dfa:	5c 5a       	castu.b	r10
80005dfc:	2f 08       	sub	r8,-16
80005dfe:	ec 0a 18 00 	cp.b	r10,r6
80005e02:	cd 71       	brne	80005db0 <fat_mount+0x78>
80005e04:	c2 08       	rjmp	80005e44 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005e06:	ec 0a 18 00 	cp.b	r10,r6
80005e0a:	c1 d0       	breq	80005e44 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005e0c:	fe f3 02 10 	ld.w	r3,pc[528]
80005e10:	a5 6a       	lsl	r10,0x4
80005e12:	f4 ca fe 42 	sub	r10,r10,-446
80005e16:	ea 0a 00 0a 	add	r10,r5,r10
80005e1a:	f5 38 00 08 	ld.ub	r8,r10[8]
80005e1e:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005e20:	f5 38 00 09 	ld.ub	r8,r10[9]
80005e24:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005e26:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005e2a:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005e2c:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005e30:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005e32:	4f 88       	lddpc	r8,80006010 <fat_mount+0x2d8>
80005e34:	11 8c       	ld.ub	r12,r8[0x0]
80005e36:	f0 1f 00 7f 	mcall	80006030 <fat_mount+0x2f8>
80005e3a:	66 08       	ld.w	r8,r3[0x0]
80005e3c:	f8 08 02 48 	mul	r8,r12,r8
80005e40:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005e42:	c9 4b       	rjmp	80005d6a <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005e44:	4f 88       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e46:	11 89       	ld.ub	r9,r8[0x0]
80005e48:	3e b8       	mov	r8,-21
80005e4a:	f0 09 18 00 	cp.b	r9,r8
80005e4e:	c0 f1       	brne	80005e6c <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005e50:	4f 58       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e52:	11 a9       	ld.ub	r9,r8[0x2]
80005e54:	39 08       	mov	r8,-112
80005e56:	f0 09 18 00 	cp.b	r9,r8
80005e5a:	c0 91       	brne	80005e6c <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005e5c:	4f 28       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e5e:	f1 38 00 15 	ld.ub	r8,r8[21]
80005e62:	e2 18 00 f0 	andl	r8,0xf0,COH
80005e66:	e0 48 00 f0 	cp.w	r8,240
80005e6a:	c0 60       	breq	80005e76 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005e6c:	30 39       	mov	r9,3
80005e6e:	4f 08       	lddpc	r8,8000602c <fat_mount+0x2f4>
80005e70:	b0 89       	st.b	r8[0x0],r9
80005e72:	30 0c       	mov	r12,0
      return false;
80005e74:	cc b8       	rjmp	8000600a <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005e76:	30 49       	mov	r9,4
80005e78:	4e d8       	lddpc	r8,8000602c <fat_mount+0x2f4>
80005e7a:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005e7c:	4e aa       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005e7e:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005e82:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005e84:	f5 38 00 0d 	ld.ub	r8,r10[13]
80005e88:	b3 38       	mul	r8,r9
80005e8a:	5c 58       	castu.b	r8
80005e8c:	4e 1b       	lddpc	r11,80006010 <fat_mount+0x2d8>
80005e8e:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005e90:	30 0b       	mov	r11,0
80005e92:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005e94:	fa cb ff fc 	sub	r11,sp,-4
80005e98:	fa c7 ff f9 	sub	r7,sp,-7
80005e9c:	f5 3c 00 16 	ld.ub	r12,r10[22]
80005ea0:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005ea2:	fa ce ff fa 	sub	lr,sp,-6
80005ea6:	f5 3a 00 17 	ld.ub	r10,r10[23]
80005eaa:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80005eac:	40 1a       	lddsp	r10,sp[0x4]
80005eae:	58 0a       	cp.w	r10,0
80005eb0:	c0 e1       	brne	80005ecc <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005eb2:	4d da       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005eb4:	f5 3c 00 24 	ld.ub	r12,r10[36]
80005eb8:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005eba:	f5 3c 00 25 	ld.ub	r12,r10[37]
80005ebe:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005ec0:	f5 3c 00 26 	ld.ub	r12,r10[38]
80005ec4:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80005ec6:	f5 3a 00 27 	ld.ub	r10,r10[39]
80005eca:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80005ecc:	12 95       	mov	r5,r9
80005ece:	40 1c       	lddsp	r12,sp[0x4]
80005ed0:	f2 0c 02 4c 	mul	r12,r9,r12
80005ed4:	4c fa       	lddpc	r10,80006010 <fat_mount+0x2d8>
80005ed6:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005ed8:	4d 3a       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005eda:	f5 3a 00 13 	ld.ub	r10,r10[19]
80005ede:	58 0a       	cp.w	r10,0
80005ee0:	c1 61       	brne	80005f0c <fat_mount+0x1d4>
80005ee2:	4d 16       	lddpc	r6,80006024 <fat_mount+0x2ec>
80005ee4:	ed 34 00 14 	ld.ub	r4,r6[20]
80005ee8:	30 06       	mov	r6,0
80005eea:	ec 04 18 00 	cp.b	r4,r6
80005eee:	c0 f1       	brne	80005f0c <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005ef0:	4c da       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005ef2:	f5 36 00 20 	ld.ub	r6,r10[32]
80005ef6:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005ef8:	f5 37 00 21 	ld.ub	r7,r10[33]
80005efc:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005efe:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005f02:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005f04:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005f08:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f0a:	c0 98       	rjmp	80005f1c <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005f0c:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005f0e:	4c 6a       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005f10:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005f14:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005f16:	30 0a       	mov	r10,0
80005f18:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005f1a:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005f1c:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005f1e:	4b da       	lddpc	r10,80006010 <fat_mount+0x2d8>
80005f20:	f8 0b 15 01 	lsl	r11,r12,0x1
80005f24:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005f28:	fa c6 ff f6 	sub	r6,sp,-10
80005f2c:	fa c7 ff f4 	sub	r7,sp,-12
80005f30:	4b db       	lddpc	r11,80006024 <fat_mount+0x2ec>
80005f32:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005f36:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005f38:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005f3c:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005f3e:	f2 03 15 04 	lsl	r3,r9,0x4
80005f42:	9a de       	ld.uh	lr,sp[0xa]
80005f44:	e6 0e 00 0e 	add	lr,r3,lr
80005f48:	a5 7e       	lsl	lr,0x5
80005f4a:	20 1e       	sub	lr,1
80005f4c:	f2 03 15 09 	lsl	r3,r9,0x9
80005f50:	fc 03 0c 02 	divs	r2,lr,r3
80005f54:	e4 09 02 4e 	mul	lr,r2,r9
80005f58:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005f5c:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005f60:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005f62:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005f66:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005f68:	9a 57       	ld.sh	r7,sp[0xa]
80005f6a:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005f6e:	0e 96       	mov	r6,r7
80005f70:	ee 0b 01 0b 	sub	r11,r7,r11
80005f74:	b3 3b       	mul	r11,r9
80005f76:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005f78:	ee 09 02 49 	mul	r9,r7,r9
80005f7c:	5c 79       	castu.h	r9
80005f7e:	4a 8b       	lddpc	r11,8000601c <fat_mount+0x2e4>
80005f80:	76 0b       	ld.w	r11,r11[0x0]
80005f82:	f2 0b 00 0b 	add	r11,r9,r11
80005f86:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005f88:	5c 7e       	castu.h	lr
80005f8a:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005f8e:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005f90:	58 08       	cp.w	r8,0
80005f92:	c3 b0       	breq	80006008 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005f94:	a9 35       	mul	r5,r4
80005f96:	ea 09 01 09 	sub	r9,r5,r9
80005f9a:	18 19       	sub	r9,r12
80005f9c:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005f9e:	30 1a       	mov	r10,1
80005fa0:	f4 08 18 00 	cp.b	r8,r10
80005fa4:	c0 70       	breq	80005fb2 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005fa6:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005fa8:	a1 98       	lsr	r8,0x1
80005faa:	f4 08 18 00 	cp.b	r8,r10
80005fae:	cf c1       	brne	80005fa6 <fat_mount+0x26e>
80005fb0:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005fb2:	40 18       	lddsp	r8,sp[0x4]
80005fb4:	f0 ca ff fe 	sub	r10,r8,-2
80005fb8:	49 69       	lddpc	r9,80006010 <fat_mount+0x2d8>
80005fba:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80005fbc:	e0 48 0f f4 	cp.w	r8,4084
80005fc0:	e0 8b 00 07 	brhi	80005fce <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80005fc4:	30 19       	mov	r9,1
80005fc6:	49 58       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fc8:	b0 89       	st.b	r8[0x0],r9
80005fca:	30 1c       	mov	r12,1
80005fcc:	c1 f8       	rjmp	8000600a <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80005fce:	e0 48 ff f4 	cp.w	r8,65524
80005fd2:	e0 8b 00 07 	brhi	80005fe0 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80005fd6:	30 29       	mov	r9,2
80005fd8:	49 08       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fda:	b0 89       	st.b	r8[0x0],r9
80005fdc:	30 1c       	mov	r12,1
80005fde:	c1 68       	rjmp	8000600a <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80005fe0:	30 39       	mov	r9,3
80005fe2:	48 e8       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fe4:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80005fe6:	48 b8       	lddpc	r8,80006010 <fat_mount+0x2d8>
80005fe8:	2e 88       	sub	r8,-24
80005fea:	48 f9       	lddpc	r9,80006024 <fat_mount+0x2ec>
80005fec:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80005ff0:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80005ff2:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80005ff6:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80005ff8:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005ffc:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80005ffe:	f3 39 00 2f 	ld.ub	r9,r9[47]
80006002:	b0 89       	st.b	r8[0x0],r9
80006004:	30 1c       	mov	r12,1
80006006:	c0 28       	rjmp	8000600a <fat_mount+0x2d2>
80006008:	30 0c       	mov	r12,0
   }
   }

   return true;
}
8000600a:	2f dd       	sub	sp,-12
8000600c:	d8 32       	popm	r0-r7,pc
8000600e:	00 00       	add	r0,r0
80006010:	00 00       	add	r0,r0
80006012:	06 8c       	andn	r12,r3
80006014:	80 00       	ld.sh	r0,r0[0x0]
80006016:	42 d0       	lddsp	r0,sp[0xb4]
80006018:	00 00       	add	r0,r0
8000601a:	06 d8       	st.w	--r3,r8
8000601c:	00 00       	add	r0,r0
8000601e:	04 48       	or	r8,r2
80006020:	80 00       	ld.sh	r0,r0[0x0]
80006022:	51 6c       	stdsp	sp[0x58],r12
80006024:	00 00       	add	r0,r0
80006026:	04 8c       	andn	r12,r2
80006028:	80 00       	ld.sh	r0,r0[0x0]
8000602a:	48 d4       	lddpc	r4,8000605c <file_close+0x28>
8000602c:	00 00       	add	r0,r0
8000602e:	06 dc       	st.w	--r3,r12
80006030:	80 00       	ld.sh	r0,r0[0x0]
80006032:	6d 94       	ld.w	r4,r6[0x64]

80006034 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80006034:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80006036:	f0 1f 00 0a 	mcall	8000605c <file_close+0x28>
8000603a:	c1 00       	breq	8000605a <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
8000603c:	48 98       	lddpc	r8,80006060 <file_close+0x2c>
8000603e:	11 88       	ld.ub	r8,r8[0x0]
80006040:	e2 18 00 02 	andl	r8,0x2,COH
80006044:	c0 80       	breq	80006054 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80006046:	f0 1f 00 08 	mcall	80006064 <file_close+0x30>
8000604a:	c0 80       	breq	8000605a <file_close+0x26>
            return;           // error
         fat_write_entry_file();
8000604c:	f0 1f 00 07 	mcall	80006068 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80006050:	f0 1f 00 07 	mcall	8000606c <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80006054:	30 09       	mov	r9,0
80006056:	48 38       	lddpc	r8,80006060 <file_close+0x2c>
80006058:	b0 89       	st.b	r8[0x0],r9
8000605a:	d8 02       	popm	pc
8000605c:	80 00       	ld.sh	r0,r0[0x0]
8000605e:	52 b0       	stdsp	sp[0xac],r0
80006060:	00 00       	add	r0,r0
80006062:	04 4c       	or	r12,r2
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	4f 04       	lddpc	r4,80006224 <file_open+0x40>
80006068:	80 00       	ld.sh	r0,r0[0x0]
8000606a:	46 b4       	lddsp	r4,sp[0x1ac]
8000606c:	80 00       	ld.sh	r0,r0[0x0]
8000606e:	48 68       	lddpc	r8,80006084 <file_write_buf+0x14>

80006070 <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006070:	d4 31       	pushm	r0-r7,lr
80006072:	20 1d       	sub	sp,4
80006074:	18 95       	mov	r5,r12
80006076:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
80006078:	f0 1f 00 4f 	mcall	800061b4 <file_write_buf+0x144>
8000607c:	e0 80 00 98 	breq	800061ac <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80006080:	4c e8       	lddpc	r8,800061b8 <file_write_buf+0x148>
80006082:	11 88       	ld.ub	r8,r8[0x0]
80006084:	e2 18 00 02 	andl	r8,0x2,COH
80006088:	c0 40       	breq	80006090 <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
8000608a:	58 06       	cp.w	r6,0
8000608c:	c0 71       	brne	8000609a <file_write_buf+0x2a>
8000608e:	c8 f8       	rjmp	800061ac <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
80006090:	31 59       	mov	r9,21
80006092:	4c b8       	lddpc	r8,800061bc <file_write_buf+0x14c>
80006094:	b0 89       	st.b	r8[0x0],r9
80006096:	30 00       	mov	r0,0
      return false;
80006098:	c8 b8       	rjmp	800061ae <file_write_buf+0x13e>
8000609a:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
8000609c:	4c 74       	lddpc	r4,800061b8 <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
8000609e:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
800060a2:	4c 87       	lddpc	r7,800061c0 <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800060a4:	68 39       	ld.w	r9,r4[0xc]
800060a6:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
800060aa:	30 0b       	mov	r11,0
800060ac:	f6 02 19 00 	cp.h	r2,r11
800060b0:	5f 08       	sreq	r8
800060b2:	ec 01 19 00 	cp.h	r1,r6
800060b6:	f9 ba 03 01 	movlo	r10,1
800060ba:	f9 ba 02 00 	movhs	r10,0
800060be:	f1 ea 00 0a 	and	r10,r8,r10
800060c2:	f6 0a 18 00 	cp.b	r10,r11
800060c6:	c3 10       	breq	80006128 <file_write_buf+0xb8>
800060c8:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
800060cc:	c2 e1       	brne	80006128 <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
800060ce:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
800060d2:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
800060d6:	06 9b       	mov	r11,r3
800060d8:	30 1c       	mov	r12,1
800060da:	f0 1f 00 3b 	mcall	800061c4 <file_write_buf+0x154>
800060de:	c6 70       	breq	800061ac <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
800060e0:	6e 18       	ld.w	r8,r7[0x4]
800060e2:	10 33       	cp.w	r3,r8
800060e4:	c0 62       	brcc	800060f0 <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
800060e6:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
800060e8:	6e 18       	ld.w	r8,r7[0x4]
800060ea:	58 08       	cp.w	r8,0
800060ec:	c0 51       	brne	800060f6 <file_write_buf+0x86>
800060ee:	c1 98       	rjmp	80006120 <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
800060f0:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
800060f4:	cf ab       	rjmp	800060e8 <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
800060f6:	0a 9a       	mov	r10,r5
800060f8:	6e 0b       	ld.w	r11,r7[0x0]
800060fa:	4b 49       	lddpc	r9,800061c8 <file_write_buf+0x158>
800060fc:	13 8c       	ld.ub	r12,r9[0x0]
800060fe:	f0 1f 00 34 	mcall	800061cc <file_write_buf+0x15c>
80006102:	c0 50       	breq	8000610c <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
80006104:	30 19       	mov	r9,1
80006106:	4a e8       	lddpc	r8,800061bc <file_write_buf+0x14c>
80006108:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
8000610a:	c5 28       	rjmp	800061ae <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
8000610c:	6e 18       	ld.w	r8,r7[0x4]
8000610e:	20 18       	sub	r8,1
80006110:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006112:	6e 09       	ld.w	r9,r7[0x0]
80006114:	2f f9       	sub	r9,-1
80006116:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006118:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
8000611c:	58 08       	cp.w	r8,0
8000611e:	ce c1       	brne	800060f6 <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80006120:	e4 03 15 09 	lsl	r3,r2,0x9
80006124:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
80006126:	c3 08       	rjmp	80006186 <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80006128:	68 2a       	ld.w	r10,r4[0x8]
8000612a:	14 39       	cp.w	r9,r10
8000612c:	5f 09       	sreq	r9
8000612e:	12 68       	and	r8,r9
80006130:	30 0b       	mov	r11,0
80006132:	f6 08 18 00 	cp.b	r8,r11
80006136:	c0 e0       	breq	80006152 <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
80006138:	30 1b       	mov	r11,1
8000613a:	16 9c       	mov	r12,r11
8000613c:	f0 1f 00 22 	mcall	800061c4 <file_write_buf+0x154>
80006140:	c3 60       	breq	800061ac <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80006142:	6e 09       	ld.w	r9,r7[0x0]
80006144:	4a 38       	lddpc	r8,800061d0 <file_write_buf+0x160>
80006146:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80006148:	30 0c       	mov	r12,0
8000614a:	f0 1f 00 23 	mcall	800061d4 <file_write_buf+0x164>
8000614e:	c0 71       	brne	8000615c <file_write_buf+0xec>
80006150:	c2 e8       	rjmp	800061ac <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
80006152:	30 1b       	mov	r11,1
80006154:	30 2c       	mov	r12,2
80006156:	f0 1f 00 1c 	mcall	800061c4 <file_write_buf+0x154>
8000615a:	c2 90       	breq	800061ac <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
8000615c:	f0 1f 00 1f 	mcall	800061d8 <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80006160:	e0 63 02 00 	mov	r3,512
80006164:	04 13       	sub	r3,r2
80006166:	ec 03 19 00 	cp.h	r3,r6
8000616a:	ec 03 17 20 	movhs	r3,r6
8000616e:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
80006170:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80006174:	50 09       	stdsp	sp[0x0],r9
80006176:	12 9a       	mov	r10,r9
80006178:	0a 9b       	mov	r11,r5
8000617a:	49 9c       	lddpc	r12,800061dc <file_write_buf+0x16c>
8000617c:	04 0c       	add	r12,r2
8000617e:	f0 1f 00 19 	mcall	800061e0 <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
80006182:	40 08       	lddsp	r8,sp[0x0]
80006184:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
80006186:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
8000618a:	68 38       	ld.w	r8,r4[0xc]
8000618c:	f2 08 00 08 	add	r8,r9,r8
80006190:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
80006192:	e6 00 00 00 	add	r0,r3,r0
80006196:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
80006198:	06 16       	sub	r6,r3
8000619a:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
8000619c:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
8000619e:	12 38       	cp.w	r8,r9
800061a0:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800061a4:	58 06       	cp.w	r6,0
800061a6:	fe 91 ff 7f 	brne	800060a4 <file_write_buf+0x34>
800061aa:	c0 28       	rjmp	800061ae <file_write_buf+0x13e>
800061ac:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
800061ae:	00 9c       	mov	r12,r0
800061b0:	2f fd       	sub	sp,-4
800061b2:	d8 32       	popm	r0-r7,pc
800061b4:	80 00       	ld.sh	r0,r0[0x0]
800061b6:	52 b0       	stdsp	sp[0xac],r0
800061b8:	00 00       	add	r0,r0
800061ba:	04 4c       	or	r12,r2
800061bc:	00 00       	add	r0,r0
800061be:	06 dc       	st.w	--r3,r12
800061c0:	00 00       	add	r0,r0
800061c2:	07 34       	ld.ub	r4,r3++
800061c4:	80 00       	ld.sh	r0,r0[0x0]
800061c6:	50 64       	stdsp	sp[0x18],r4
800061c8:	00 00       	add	r0,r0
800061ca:	06 8c       	andn	r12,r3
800061cc:	80 00       	ld.sh	r0,r0[0x0]
800061ce:	6d cc       	ld.w	r12,r6[0x70]
800061d0:	00 00       	add	r0,r0
800061d2:	04 48       	or	r8,r2
800061d4:	80 00       	ld.sh	r0,r0[0x0]
800061d6:	48 d4       	lddpc	r4,80006208 <file_open+0x24>
800061d8:	80 00       	ld.sh	r0,r0[0x0]
800061da:	46 a4       	lddsp	r4,sp[0x1a8]
800061dc:	00 00       	add	r0,r0
800061de:	04 8c       	andn	r12,r2
800061e0:	80 00       	ld.sh	r0,r0[0x0]
800061e2:	7a d6       	ld.w	r6,sp[0x34]

800061e4 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
800061e4:	eb cd 40 c0 	pushm	r6-r7,lr
800061e8:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
800061ea:	f0 1f 00 20 	mcall	80006268 <file_open+0x84>
800061ee:	c3 a0       	breq	80006262 <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
800061f0:	f0 1f 00 1f 	mcall	8000626c <file_open+0x88>
800061f4:	c3 70       	breq	80006262 <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
800061f6:	0e 96       	mov	r6,r7
800061f8:	0e 98       	mov	r8,r7
800061fa:	e2 18 00 02 	andl	r8,0x2,COH
800061fe:	c1 90       	breq	80006230 <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80006200:	30 1c       	mov	r12,1
80006202:	f0 1f 00 1c 	mcall	80006270 <file_open+0x8c>
80006206:	c2 e0       	breq	80006262 <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80006208:	49 b8       	lddpc	r8,80006274 <file_open+0x90>
8000620a:	11 a8       	ld.ub	r8,r8[0x2]
8000620c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006210:	c0 60       	breq	8000621c <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80006212:	31 59       	mov	r9,21
80006214:	49 98       	lddpc	r8,80006278 <file_open+0x94>
80006216:	b0 89       	st.b	r8[0x0],r9
80006218:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000621c:	49 88       	lddpc	r8,8000627c <file_open+0x98>
8000621e:	11 8c       	ld.ub	r12,r8[0x0]
80006220:	f0 1f 00 18 	mcall	80006280 <file_open+0x9c>
80006224:	c0 a0       	breq	80006238 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006226:	31 49       	mov	r9,20
80006228:	49 48       	lddpc	r8,80006278 <file_open+0x94>
8000622a:	b0 89       	st.b	r8[0x0],r9
8000622c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80006230:	30 0c       	mov	r12,0
80006232:	f0 1f 00 10 	mcall	80006270 <file_open+0x8c>
80006236:	c1 60       	breq	80006262 <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006238:	0c 98       	mov	r8,r6
8000623a:	e2 18 00 04 	andl	r8,0x4,COH
8000623e:	c0 40       	breq	80006246 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80006240:	30 09       	mov	r9,0
80006242:	48 d8       	lddpc	r8,80006274 <file_open+0x90>
80006244:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80006246:	e2 16 00 08 	andl	r6,0x8,COH
8000624a:	c0 50       	breq	80006254 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000624c:	30 09       	mov	r9,0
8000624e:	48 a8       	lddpc	r8,80006274 <file_open+0x90>
80006250:	91 39       	st.w	r8[0xc],r9
80006252:	c0 48       	rjmp	8000625a <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80006254:	48 88       	lddpc	r8,80006274 <file_open+0x90>
80006256:	70 29       	ld.w	r9,r8[0x8]
80006258:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000625a:	48 78       	lddpc	r8,80006274 <file_open+0x90>
8000625c:	b0 87       	st.b	r8[0x0],r7
8000625e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80006262:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006266:	00 00       	add	r0,r0
80006268:	80 00       	ld.sh	r0,r0[0x0]
8000626a:	52 d4       	stdsp	sp[0xb4],r4
8000626c:	80 00       	ld.sh	r0,r0[0x0]
8000626e:	3f f0       	mov	r0,-1
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	47 04       	lddsp	r4,sp[0x1c0]
80006274:	00 00       	add	r0,r0
80006276:	04 4c       	or	r12,r2
80006278:	00 00       	add	r0,r0
8000627a:	06 dc       	st.w	--r3,r12
8000627c:	00 00       	add	r0,r0
8000627e:	06 8c       	andn	r12,r3
80006280:	80 00       	ld.sh	r0,r0[0x0]
80006282:	6d 9c       	ld.w	r12,r6[0x64]

80006284 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80006284:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80006286:	48 69       	lddpc	r9,8000629c <nav_getindex+0x18>
80006288:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000628a:	48 6a       	lddpc	r10,800062a0 <nav_getindex+0x1c>
8000628c:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
8000628e:	13 89       	ld.ub	r9,r9[0x0]
80006290:	b8 89       	st.b	r12[0x0],r9
80006292:	99 1b       	st.w	r12[0x4],r11
80006294:	b8 4a       	st.h	r12[0x8],r10
}
80006296:	2f dd       	sub	sp,-12
80006298:	5e fc       	retal	r12
8000629a:	00 00       	add	r0,r0
8000629c:	00 00       	add	r0,r0
8000629e:	06 8c       	andn	r12,r3
800062a0:	00 00       	add	r0,r0
800062a2:	06 d8       	st.w	--r3,r8

800062a4 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
800062a4:	d4 01       	pushm	lr
   return fat_entry_is_dir();
800062a6:	f0 1f 00 02 	mcall	800062ac <nav_file_isdir+0x8>
}
800062aa:	d8 02       	popm	pc
800062ac:	80 00       	ld.sh	r0,r0[0x0]
800062ae:	42 b8       	lddsp	r8,sp[0xac]

800062b0 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
800062b0:	d4 31       	pushm	r0-r7,lr
800062b2:	20 1d       	sub	sp,4
800062b4:	18 95       	mov	r5,r12
800062b6:	16 96       	mov	r6,r11
800062b8:	14 97       	mov	r7,r10
800062ba:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
800062bc:	f0 1f 00 2f 	mcall	80006378 <nav_file_name+0xc8>
800062c0:	c5 80       	breq	80006370 <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
800062c2:	58 07       	cp.w	r7,0
800062c4:	c0 50       	breq	800062ce <nav_file_name+0x1e>
800062c6:	58 06       	cp.w	r6,0
800062c8:	c0 31       	brne	800062ce <nav_file_name+0x1e>
800062ca:	30 1c       	mov	r12,1
800062cc:	c5 38       	rjmp	80006372 <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
800062ce:	4a c8       	lddpc	r8,8000637c <nav_file_name+0xcc>
800062d0:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800062d2:	58 04       	cp.w	r4,0
800062d4:	c0 31       	brne	800062da <nav_file_name+0x2a>
800062d6:	30 10       	mov	r0,1
800062d8:	c0 68       	rjmp	800062e4 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062da:	08 99       	mov	r9,r4
800062dc:	20 19       	sub	r9,1
800062de:	4a 88       	lddpc	r8,8000637c <nav_file_name+0xcc>
800062e0:	b0 19       	st.h	r8[0x2],r9
800062e2:	30 00       	mov	r0,0
800062e4:	30 09       	mov	r9,0
800062e6:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800062e8:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800062ea:	4a 52       	lddpc	r2,8000637c <nav_file_name+0xcc>
800062ec:	c0 28       	rjmp	800062f0 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062ee:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
800062f0:	f0 1f 00 24 	mcall	80006380 <nav_file_name+0xd0>
800062f4:	c3 e0       	breq	80006370 <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
800062f6:	58 00       	cp.w	r0,0
800062f8:	c0 70       	breq	80006306 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
800062fa:	0e 9a       	mov	r10,r7
800062fc:	0c 9b       	mov	r11,r6
800062fe:	0a 9c       	mov	r12,r5
80006300:	f0 1f 00 21 	mcall	80006384 <nav_file_name+0xd4>
80006304:	c3 78       	rjmp	80006372 <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80006306:	06 99       	mov	r9,r3
80006308:	0e 9a       	mov	r10,r7
8000630a:	0c 9b       	mov	r11,r6
8000630c:	0a 9c       	mov	r12,r5
8000630e:	f0 1f 00 1f 	mcall	80006388 <nav_file_name+0xd8>
80006312:	c1 20       	breq	80006336 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80006314:	49 e8       	lddpc	r8,8000638c <nav_file_name+0xdc>
80006316:	11 89       	ld.ub	r9,r8[0x0]
80006318:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000631a:	f0 09 18 00 	cp.b	r9,r8
8000631e:	eb f8 12 00 	ld.shne	r8,r5[0x0]
80006322:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80006326:	f1 d9 e1 08 	addne	r8,r8,r9
8000632a:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000632e:	49 48       	lddpc	r8,8000637c <nav_file_name+0xcc>
80006330:	b0 14       	st.h	r8[0x2],r4
80006332:	30 1c       	mov	r12,1
         return true;
80006334:	c1 f8       	rjmp	80006372 <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006336:	49 79       	lddpc	r9,80006390 <nav_file_name+0xe0>
80006338:	13 88       	ld.ub	r8,r9[0x0]
8000633a:	e2 08 18 00 	cp.b	r8,r1
8000633e:	c0 70       	breq	8000634c <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80006340:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80006342:	30 b9       	mov	r9,11
80006344:	f2 08 18 00 	cp.b	r8,r9
80006348:	c1 41       	brne	80006370 <nav_file_name+0xc0>
8000634a:	cd 2b       	rjmp	800062ee <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000634c:	49 09       	lddpc	r9,8000638c <nav_file_name+0xdc>
8000634e:	13 88       	ld.ub	r8,r9[0x0]
80006350:	30 09       	mov	r9,0
80006352:	f2 08 18 00 	cp.b	r8,r9
80006356:	c0 60       	breq	80006362 <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80006358:	40 08       	lddsp	r8,sp[0x0]
8000635a:	2f 38       	sub	r8,-13
8000635c:	5c 88       	casts.h	r8
8000635e:	50 08       	stdsp	sp[0x0],r8
80006360:	c0 48       	rjmp	80006368 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80006362:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80006364:	20 d6       	sub	r6,13
80006366:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006368:	84 18       	ld.sh	r8,r2[0x2]
8000636a:	20 18       	sub	r8,1
8000636c:	a4 18       	st.h	r2[0x2],r8
8000636e:	cc 1b       	rjmp	800062f0 <nav_file_name+0x40>
80006370:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
80006372:	2f fd       	sub	sp,-4
80006374:	d8 32       	popm	r0-r7,pc
80006376:	00 00       	add	r0,r0
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	52 98       	stdsp	sp[0xa4],r8
8000637c:	00 00       	add	r0,r0
8000637e:	06 d8       	st.w	--r3,r8
80006380:	80 00       	ld.sh	r0,r0[0x0]
80006382:	4f 04       	lddpc	r4,80006540 <nav_filelist_reset+0x14>
80006384:	80 00       	ld.sh	r0,r0[0x0]
80006386:	44 e0       	lddsp	r0,sp[0x138]
80006388:	80 00       	ld.sh	r0,r0[0x0]
8000638a:	43 4c       	lddsp	r12,sp[0xd0]
8000638c:	00 00       	add	r0,r0
8000638e:	06 dd       	st.w	--r3,sp
80006390:	00 00       	add	r0,r0
80006392:	06 dc       	st.w	--r3,r12

80006394 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
80006394:	d4 31       	pushm	r0-r7,lr
80006396:	20 4d       	sub	sp,16
80006398:	50 0c       	stdsp	sp[0x0],r12
8000639a:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
8000639c:	f0 1f 00 51 	mcall	800064e0 <nav_filelist_set+0x14c>
800063a0:	e0 80 00 9e 	breq	800064dc <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
800063a4:	4d 08       	lddpc	r8,800064e4 <nav_filelist_set+0x150>
800063a6:	90 18       	ld.sh	r8,r8[0x2]
800063a8:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
800063aa:	4d 08       	lddpc	r8,800064e8 <nav_filelist_set+0x154>
800063ac:	f1 0a 00 24 	ld.sh	r10,r8[36]
800063b0:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800063b2:	f1 38 00 2c 	ld.ub	r8,r8[44]
800063b6:	50 38       	stdsp	sp[0xc],r8
800063b8:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ba:	4c b7       	lddpc	r7,800064e4 <nav_filelist_set+0x150>
800063bc:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063be:	4c b6       	lddpc	r6,800064e8 <nav_filelist_set+0x154>
800063c0:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063c2:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800063c4:	4c a5       	lddpc	r5,800064ec <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063c6:	58 02       	cp.w	r2,0
800063c8:	c0 31       	brne	800063ce <nav_filelist_set+0x3a>
800063ca:	58 03       	cp.w	r3,0
800063cc:	c0 c0       	breq	800063e4 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ce:	8e 18       	ld.sh	r8,r7[0x2]
800063d0:	e2 08 19 00 	cp.h	r8,r1
800063d4:	c0 51       	brne	800063de <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
800063d6:	30 89       	mov	r9,8
800063d8:	4c 58       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800063da:	b0 89       	st.b	r8[0x0],r9
            break;
800063dc:	c7 38       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800063de:	2f f8       	sub	r8,-1
800063e0:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063e2:	c1 d8       	rjmp	8000641c <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800063e4:	8e 18       	ld.sh	r8,r7[0x2]
800063e6:	e0 08 19 00 	cp.h	r8,r0
800063ea:	c0 51       	brne	800063f4 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
800063ec:	30 99       	mov	r9,9
800063ee:	4c 08       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800063f0:	b0 89       	st.b	r8[0x0],r9
            break;
800063f2:	c6 88       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800063f4:	58 08       	cp.w	r8,0
800063f6:	c1 11       	brne	80006418 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063f8:	ed 38 00 2c 	ld.ub	r8,r6[44]
800063fc:	e8 08 18 00 	cp.b	r8,r4
80006400:	c0 80       	breq	80006410 <nav_filelist_set+0x7c>
80006402:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006406:	e8 08 18 00 	cp.b	r8,r4
8000640a:	c0 31       	brne	80006410 <nav_filelist_set+0x7c>
8000640c:	30 13       	mov	r3,1
8000640e:	c0 78       	rjmp	8000641c <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80006410:	30 99       	mov	r9,9
80006412:	4b 78       	lddpc	r8,800064ec <nav_filelist_set+0x158>
80006414:	b0 89       	st.b	r8[0x0],r9
               break;
80006416:	c5 68       	rjmp	800064c2 <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006418:	20 18       	sub	r8,1
8000641a:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
8000641c:	f0 1f 00 35 	mcall	800064f0 <nav_filelist_set+0x15c>
80006420:	c0 71       	brne	8000642e <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006422:	0b 89       	ld.ub	r9,r5[0x0]
80006424:	31 a8       	mov	r8,26
80006426:	f0 09 18 00 	cp.b	r9,r8
8000642a:	c3 20       	breq	8000648e <nav_filelist_set+0xfa>
8000642c:	c4 b8       	rjmp	800064c2 <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000642e:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006432:	e8 08 18 00 	cp.b	r8,r4
80006436:	5f 1c       	srne	r12
80006438:	f0 1f 00 2f 	mcall	800064f4 <nav_filelist_set+0x160>
8000643c:	c1 c0       	breq	80006474 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000643e:	58 03       	cp.w	r3,0
80006440:	cc 31       	brne	800063c6 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80006442:	58 02       	cp.w	r2,0
80006444:	ed f8 12 12 	ld.shne	r8,r6[0x24]
80006448:	f7 b8 01 ff 	subne	r8,-1
8000644c:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
80006450:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
80006454:	f7 b8 00 01 	subeq	r8,1
80006458:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
8000645c:	40 09       	lddsp	r9,sp[0x0]
8000645e:	58 09       	cp.w	r9,0
80006460:	c0 51       	brne	8000646a <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80006462:	f0 1f 00 26 	mcall	800064f8 <nav_filelist_set+0x164>
80006466:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80006468:	c3 a8       	rjmp	800064dc <nav_filelist_set+0x148>
           }
           u16_nb--;
8000646a:	40 08       	lddsp	r8,sp[0x0]
8000646c:	20 18       	sub	r8,1
8000646e:	5c 88       	casts.h	r8
80006470:	50 08       	stdsp	sp[0x0],r8
           continue;
80006472:	ca ab       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80006474:	0b 88       	ld.ub	r8,r5[0x0]
80006476:	30 a9       	mov	r9,10
80006478:	f2 08 18 00 	cp.b	r8,r9
8000647c:	5f 09       	sreq	r9
8000647e:	31 aa       	mov	r10,26
80006480:	f4 08 18 00 	cp.b	r8,r10
80006484:	5f 08       	sreq	r8
80006486:	10 49       	or	r9,r8
80006488:	e8 09 18 00 	cp.b	r9,r4
8000648c:	c9 d0       	breq	800063c6 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000648e:	58 03       	cp.w	r3,0
80006490:	c0 50       	breq	8000649a <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
80006492:	ed 64 00 2c 	st.b	r6[44],r4
80006496:	30 03       	mov	r3,0
            continue;
80006498:	c9 7b       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000649a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000649e:	30 1a       	mov	r10,1
800064a0:	f4 08 18 00 	cp.b	r8,r10
800064a4:	c0 60       	breq	800064b0 <nav_filelist_set+0x11c>
800064a6:	ed 38 00 2d 	ld.ub	r8,r6[45]
800064aa:	e8 08 18 00 	cp.b	r8,r4
800064ae:	c0 50       	breq	800064b8 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800064b0:	30 99       	mov	r9,9
800064b2:	48 f8       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800064b4:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
800064b6:	c0 68       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800064b8:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
800064ba:	30 19       	mov	r9,1
800064bc:	ed 69 00 2c 	st.b	r6[44],r9
800064c0:	c8 3b       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
800064c2:	48 a8       	lddpc	r8,800064e8 <nav_filelist_set+0x154>
800064c4:	40 3a       	lddsp	r10,sp[0xc]
800064c6:	58 0a       	cp.w	r10,0
800064c8:	5f 19       	srne	r9
800064ca:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
800064ce:	48 69       	lddpc	r9,800064e4 <nav_filelist_set+0x150>
800064d0:	40 2a       	lddsp	r10,sp[0x8]
800064d2:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
800064d4:	40 19       	lddsp	r9,sp[0x4]
800064d6:	f1 59 00 24 	st.h	r8[36],r9
800064da:	30 0c       	mov	r12,0
   return false;
}
800064dc:	2f cd       	sub	sp,-16
800064de:	d8 32       	popm	r0-r7,pc
800064e0:	80 00       	ld.sh	r0,r0[0x0]
800064e2:	52 f8       	stdsp	sp[0xbc],r8
800064e4:	00 00       	add	r0,r0
800064e6:	06 d8       	st.w	--r3,r8
800064e8:	00 00       	add	r0,r0
800064ea:	06 8c       	andn	r12,r3
800064ec:	00 00       	add	r0,r0
800064ee:	06 dc       	st.w	--r3,r12
800064f0:	80 00       	ld.sh	r0,r0[0x0]
800064f2:	4f 04       	lddpc	r4,800066b0 <nav_file_del+0x20>
800064f4:	80 00       	ld.sh	r0,r0[0x0]
800064f6:	46 30       	lddsp	r0,sp[0x18c]
800064f8:	80 00       	ld.sh	r0,r0[0x0]
800064fa:	45 e8       	lddsp	r8,sp[0x178]

800064fc <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
800064fc:	d4 21       	pushm	r4-r7,lr
800064fe:	18 95       	mov	r5,r12
80006500:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80006502:	30 16       	mov	r6,1
80006504:	30 07       	mov	r7,0
80006506:	0c 9b       	mov	r11,r6
80006508:	0e 9c       	mov	r12,r7
8000650a:	f0 1f 00 07 	mcall	80006524 <nav_filelist_findname+0x28>
8000650e:	c0 90       	breq	80006520 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80006510:	08 99       	mov	r9,r4
80006512:	0e 9a       	mov	r10,r7
80006514:	0e 9b       	mov	r11,r7
80006516:	0a 9c       	mov	r12,r5
80006518:	f0 1f 00 04 	mcall	80006528 <nav_filelist_findname+0x2c>
8000651c:	cf 50       	breq	80006506 <nav_filelist_findname+0xa>
8000651e:	30 1c       	mov	r12,1
         return true;
   }
}
80006520:	d8 22       	popm	r4-r7,pc
80006522:	00 00       	add	r0,r0
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	63 94       	ld.w	r4,r1[0x64]
80006528:	80 00       	ld.sh	r0,r0[0x0]
8000652a:	62 b0       	ld.w	r0,r1[0x2c]

8000652c <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
8000652c:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
8000652e:	f0 1f 00 04 	mcall	8000653c <nav_filelist_reset+0x10>
80006532:	c0 40       	breq	8000653a <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80006534:	f0 1f 00 03 	mcall	80006540 <nav_filelist_reset+0x14>
80006538:	30 1c       	mov	r12,1
   return true;
}
8000653a:	d8 02       	popm	pc
8000653c:	80 00       	ld.sh	r0,r0[0x0]
8000653e:	52 f8       	stdsp	sp[0xbc],r8
80006540:	80 00       	ld.sh	r0,r0[0x0]
80006542:	42 d0       	lddsp	r0,sp[0xb4]

80006544 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80006544:	eb cd 40 80 	pushm	r7,lr
80006548:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000654a:	f0 1f 00 13 	mcall	80006594 <nav_file_create+0x50>
8000654e:	c2 10       	breq	80006590 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
80006550:	30 0b       	mov	r11,0
80006552:	0e 9c       	mov	r12,r7
80006554:	f0 1f 00 11 	mcall	80006598 <nav_file_create+0x54>
80006558:	c0 60       	breq	80006564 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000655a:	32 a9       	mov	r9,42
8000655c:	49 08       	lddpc	r8,8000659c <nav_file_create+0x58>
8000655e:	b0 89       	st.b	r8[0x0],r9
80006560:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
80006564:	0e 9c       	mov	r12,r7
80006566:	f0 1f 00 0f 	mcall	800065a0 <nav_file_create+0x5c>
8000656a:	c1 30       	breq	80006590 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000656c:	48 e8       	lddpc	r8,800065a4 <nav_file_create+0x60>
8000656e:	30 09       	mov	r9,0
80006570:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
80006572:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
80006574:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80006576:	48 d8       	lddpc	r8,800065a8 <nav_file_create+0x64>
80006578:	f1 09 00 24 	ld.sh	r9,r8[36]
8000657c:	2f f9       	sub	r9,-1
8000657e:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
80006582:	30 19       	mov	r9,1
80006584:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80006588:	f0 1f 00 09 	mcall	800065ac <nav_file_create+0x68>
8000658c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006590:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006594:	80 00       	ld.sh	r0,r0[0x0]
80006596:	65 2c       	ld.w	r12,r2[0x48]
80006598:	80 00       	ld.sh	r0,r0[0x0]
8000659a:	64 fc       	ld.w	r12,r2[0x3c]
8000659c:	00 00       	add	r0,r0
8000659e:	06 dc       	st.w	--r3,r12
800065a0:	80 00       	ld.sh	r0,r0[0x0]
800065a2:	5c 90       	brev	r0
800065a4:	00 00       	add	r0,r0
800065a6:	04 4c       	or	r12,r2
800065a8:	00 00       	add	r0,r0
800065aa:	06 8c       	andn	r12,r3
800065ac:	80 00       	ld.sh	r0,r0[0x0]
800065ae:	48 68       	lddpc	r8,800065c4 <nav_dir_gotoparent+0x14>

800065b0 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
800065b0:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800065b2:	f0 1f 00 1f 	mcall	8000662c <nav_dir_gotoparent+0x7c>
800065b6:	c3 80       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800065b8:	49 e8       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065ba:	70 88       	ld.w	r8,r8[0x20]
800065bc:	58 08       	cp.w	r8,0
800065be:	c0 51       	brne	800065c8 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800065c0:	31 99       	mov	r9,25
800065c2:	49 d8       	lddpc	r8,80006634 <nav_dir_gotoparent+0x84>
800065c4:	b0 89       	st.b	r8[0x0],r9
800065c6:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800065c8:	30 19       	mov	r9,1
800065ca:	49 c8       	lddpc	r8,80006638 <nav_dir_gotoparent+0x88>
800065cc:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
800065ce:	f0 1f 00 1c 	mcall	8000663c <nav_dir_gotoparent+0x8c>
800065d2:	c2 a0       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
800065d4:	f0 1f 00 1b 	mcall	80006640 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
800065d8:	49 68       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065da:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800065dc:	49 a9       	lddpc	r9,80006644 <nav_dir_gotoparent+0x94>
800065de:	72 19       	ld.w	r9,r9[0x4]
800065e0:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
800065e2:	f0 1f 00 1a 	mcall	80006648 <nav_dir_gotoparent+0x98>
800065e6:	c2 00       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
800065e8:	49 28       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065ea:	f1 39 00 2d 	ld.ub	r9,r8[45]
800065ee:	30 08       	mov	r8,0
800065f0:	f0 09 18 00 	cp.b	r9,r8
800065f4:	c0 d0       	breq	8000660e <nav_dir_gotoparent+0x5e>
800065f6:	48 f8       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065f8:	f1 39 00 2c 	ld.ub	r9,r8[44]
800065fc:	30 08       	mov	r8,0
800065fe:	f0 09 18 00 	cp.b	r9,r8
80006602:	c0 60       	breq	8000660e <nav_dir_gotoparent+0x5e>
80006604:	c1 28       	rjmp	80006628 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006606:	6c 18       	ld.w	r8,r6[0x4]
80006608:	0e 38       	cp.w	r8,r7
8000660a:	c0 51       	brne	80006614 <nav_dir_gotoparent+0x64>
8000660c:	c0 e8       	rjmp	80006628 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000660e:	30 15       	mov	r5,1
80006610:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006612:	48 d6       	lddpc	r6,80006644 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006614:	0a 9b       	mov	r11,r5
80006616:	08 9c       	mov	r12,r4
80006618:	f0 1f 00 0d 	mcall	8000664c <nav_dir_gotoparent+0x9c>
8000661c:	cf 51       	brne	80006606 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000661e:	30 89       	mov	r9,8
80006620:	48 58       	lddpc	r8,80006634 <nav_dir_gotoparent+0x84>
80006622:	b0 89       	st.b	r8[0x0],r9
   return false;
80006624:	d8 22       	popm	r4-r7,pc
80006626:	d8 2a       	popm	r4-r7,pc,r12=0
80006628:	da 2a       	popm	r4-r7,pc,r12=1
8000662a:	00 00       	add	r0,r0
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	52 f8       	stdsp	sp[0xbc],r8
80006630:	00 00       	add	r0,r0
80006632:	06 8c       	andn	r12,r3
80006634:	00 00       	add	r0,r0
80006636:	06 dc       	st.w	--r3,r12
80006638:	00 00       	add	r0,r0
8000663a:	06 d8       	st.w	--r3,r8
8000663c:	80 00       	ld.sh	r0,r0[0x0]
8000663e:	4f 04       	lddpc	r4,800067fc <nav_filelist_last+0x10>
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	45 e8       	lddsp	r8,sp[0x178]
80006644:	00 00       	add	r0,r0
80006646:	04 4c       	or	r12,r2
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	65 2c       	ld.w	r12,r2[0x48]
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	63 94       	ld.w	r4,r1[0x64]

80006650 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
80006650:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
80006652:	f0 1f 00 0a 	mcall	80006678 <nav_dir_cd+0x28>
80006656:	c0 f0       	breq	80006674 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80006658:	f0 1f 00 09 	mcall	8000667c <nav_dir_cd+0x2c>
8000665c:	c0 c0       	breq	80006674 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000665e:	48 98       	lddpc	r8,80006680 <nav_dir_cd+0x30>
80006660:	48 99       	lddpc	r9,80006684 <nav_dir_cd+0x34>
80006662:	92 19       	ld.sh	r9,r9[0x2]
80006664:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006668:	48 89       	lddpc	r9,80006688 <nav_dir_cd+0x38>
8000666a:	72 19       	ld.w	r9,r9[0x4]
8000666c:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
8000666e:	f0 1f 00 08 	mcall	8000668c <nav_dir_cd+0x3c>
80006672:	d8 02       	popm	pc
80006674:	d8 0a       	popm	pc,r12=0
80006676:	00 00       	add	r0,r0
80006678:	80 00       	ld.sh	r0,r0[0x0]
8000667a:	52 d4       	stdsp	sp[0xb4],r4
8000667c:	80 00       	ld.sh	r0,r0[0x0]
8000667e:	42 b8       	lddsp	r8,sp[0xac]
80006680:	00 00       	add	r0,r0
80006682:	06 8c       	andn	r12,r3
80006684:	00 00       	add	r0,r0
80006686:	06 d8       	st.w	--r3,r8
80006688:	00 00       	add	r0,r0
8000668a:	04 4c       	or	r12,r2
8000668c:	80 00       	ld.sh	r0,r0[0x0]
8000668e:	65 2c       	ld.w	r12,r2[0x48]

80006690 <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
80006690:	eb cd 40 f8 	pushm	r3-r7,lr
80006694:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
80006696:	f0 1f 00 20 	mcall	80006714 <nav_file_del+0x84>
8000669a:	c1 c1       	brne	800066d2 <nav_file_del+0x42>
8000669c:	c3 a8       	rjmp	80006710 <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000669e:	0c 9b       	mov	r11,r6
800066a0:	0a 9c       	mov	r12,r5
800066a2:	f0 1f 00 1e 	mcall	80006718 <nav_file_del+0x88>
800066a6:	c0 80       	breq	800066b6 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
800066a8:	58 04       	cp.w	r4,0
800066aa:	c1 90       	breq	800066dc <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
800066ac:	31 d9       	mov	r9,29
800066ae:	49 c8       	lddpc	r8,8000671c <nav_file_del+0x8c>
800066b0:	b0 89       	st.b	r8[0x0],r9
800066b2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
800066b6:	f0 1f 00 1b 	mcall	80006720 <nav_file_del+0x90>
800066ba:	c2 b0       	breq	80006710 <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
800066bc:	0c 9c       	mov	r12,r6
800066be:	f0 1f 00 1a 	mcall	80006724 <nav_file_del+0x94>
800066c2:	c2 70       	breq	80006710 <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
800066c4:	58 07       	cp.w	r7,0
800066c6:	c0 31       	brne	800066cc <nav_file_del+0x3c>
800066c8:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
800066cc:	20 17       	sub	r7,1
800066ce:	5c 57       	castu.b	r7

      } // end of second while (1)
800066d0:	ce 7b       	rjmp	8000669e <nav_file_del+0xe>
800066d2:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
800066d6:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
800066d8:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066da:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
800066dc:	f0 1f 00 13 	mcall	80006728 <nav_file_del+0x98>
800066e0:	c0 70       	breq	800066ee <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
800066e2:	f0 1f 00 13 	mcall	8000672c <nav_file_del+0x9c>
800066e6:	c1 50       	breq	80006710 <nav_file_del+0x80>
            return false;
         u8_folder_level++;
800066e8:	2f f7       	sub	r7,-1
800066ea:	5c 57       	castu.b	r7
800066ec:	cd 9b       	rjmp	8000669e <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
800066ee:	0c 9c       	mov	r12,r6
800066f0:	f0 1f 00 10 	mcall	80006730 <nav_file_del+0xa0>
800066f4:	c0 e0       	breq	80006710 <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
800066f6:	0c 9c       	mov	r12,r6
800066f8:	f0 1f 00 0b 	mcall	80006724 <nav_file_del+0x94>
800066fc:	c0 a0       	breq	80006710 <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
800066fe:	e6 07 18 00 	cp.b	r7,r3
80006702:	cc e1       	brne	8000669e <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006704:	f0 1f 00 0c 	mcall	80006734 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006708:	f0 1f 00 0c 	mcall	80006738 <nav_file_del+0xa8>
8000670c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006710:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006714:	80 00       	ld.sh	r0,r0[0x0]
80006716:	52 d4       	stdsp	sp[0xb4],r4
80006718:	80 00       	ld.sh	r0,r0[0x0]
8000671a:	63 94       	ld.w	r4,r1[0x64]
8000671c:	00 00       	add	r0,r0
8000671e:	06 dc       	st.w	--r3,r12
80006720:	80 00       	ld.sh	r0,r0[0x0]
80006722:	65 b0       	ld.w	r0,r2[0x6c]
80006724:	80 00       	ld.sh	r0,r0[0x0]
80006726:	55 c4       	stdsp	sp[0x170],r4
80006728:	80 00       	ld.sh	r0,r0[0x0]
8000672a:	62 a4       	ld.w	r4,r1[0x28]
8000672c:	80 00       	ld.sh	r0,r0[0x0]
8000672e:	66 50       	ld.w	r0,r3[0x14]
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	47 04       	lddsp	r4,sp[0x1c0]
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	65 2c       	ld.w	r12,r2[0x48]
80006738:	80 00       	ld.sh	r0,r0[0x0]
8000673a:	48 68       	lddpc	r8,80006750 <nav_filelist_first+0x14>

8000673c <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
8000673c:	d4 21       	pushm	r4-r7,lr
8000673e:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
80006740:	f0 1f 00 0b 	mcall	8000676c <nav_filelist_first+0x30>
80006744:	c0 71       	brne	80006752 <nav_filelist_first+0x16>
80006746:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006748:	e9 38 00 2c 	ld.ub	r8,r4[44]
8000674c:	10 37       	cp.w	r7,r8
8000674e:	c0 51       	brne	80006758 <nav_filelist_first+0x1c>
80006750:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006752:	30 16       	mov	r6,1
80006754:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006756:	48 74       	lddpc	r4,80006770 <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006758:	0c 9b       	mov	r11,r6
8000675a:	0a 9c       	mov	r12,r5
8000675c:	f0 1f 00 06 	mcall	80006774 <nav_filelist_first+0x38>
80006760:	cf 41       	brne	80006748 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
80006762:	30 99       	mov	r9,9
80006764:	48 58       	lddpc	r8,80006778 <nav_filelist_first+0x3c>
80006766:	b0 89       	st.b	r8[0x0],r9
   return false;
}
80006768:	d8 22       	popm	r4-r7,pc
8000676a:	00 00       	add	r0,r0
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	65 2c       	ld.w	r12,r2[0x48]
80006770:	00 00       	add	r0,r0
80006772:	06 8c       	andn	r12,r3
80006774:	80 00       	ld.sh	r0,r0[0x0]
80006776:	63 94       	ld.w	r4,r1[0x64]
80006778:	00 00       	add	r0,r0
8000677a:	06 dc       	st.w	--r3,r12

8000677c <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
8000677c:	d4 31       	pushm	r0-r7,lr
8000677e:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
80006780:	49 88       	lddpc	r8,800067e0 <nav_filelist_nb+0x64>
80006782:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
80006786:	f0 1f 00 18 	mcall	800067e4 <nav_filelist_nb+0x68>
8000678a:	c0 31       	brne	80006790 <nav_filelist_nb+0x14>
8000678c:	30 02       	mov	r2,0
8000678e:	c2 68       	rjmp	800067da <nav_filelist_nb+0x5e>
80006790:	30 02       	mov	r2,0
80006792:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006794:	30 14       	mov	r4,1
80006796:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80006798:	49 26       	lddpc	r6,800067e0 <nav_filelist_nb+0x64>
8000679a:	30 15       	mov	r5,1
8000679c:	c0 b8       	rjmp	800067b2 <nav_filelist_nb+0x36>
8000679e:	ed 38 00 2c 	ld.ub	r8,r6[44]
800067a2:	ea 08 18 00 	cp.b	r8,r5
800067a6:	c0 41       	brne	800067ae <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
800067a8:	2f f2       	sub	r2,-1
800067aa:	5c 82       	casts.h	r2
800067ac:	c0 38       	rjmp	800067b2 <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
800067ae:	2f f7       	sub	r7,-1
800067b0:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800067b2:	08 9b       	mov	r11,r4
800067b4:	06 9c       	mov	r12,r3
800067b6:	f0 1f 00 0d 	mcall	800067e8 <nav_filelist_nb+0x6c>
800067ba:	cf 21       	brne	8000679e <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
800067bc:	f0 1f 00 0a 	mcall	800067e4 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
800067c0:	3f f8       	mov	r8,-1
800067c2:	f0 01 19 00 	cp.h	r1,r8
800067c6:	c0 60       	breq	800067d2 <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
800067c8:	30 1b       	mov	r11,1
800067ca:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
800067ce:	f0 1f 00 07 	mcall	800067e8 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
800067d2:	58 00       	cp.w	r0,0
800067d4:	c0 31       	brne	800067da <nav_filelist_nb+0x5e>
800067d6:	0e 92       	mov	r2,r7
800067d8:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
800067da:	04 9c       	mov	r12,r2
800067dc:	d8 32       	popm	r0-r7,pc
800067de:	00 00       	add	r0,r0
800067e0:	00 00       	add	r0,r0
800067e2:	06 8c       	andn	r12,r3
800067e4:	80 00       	ld.sh	r0,r0[0x0]
800067e6:	65 2c       	ld.w	r12,r2[0x48]
800067e8:	80 00       	ld.sh	r0,r0[0x0]
800067ea:	63 94       	ld.w	r4,r1[0x64]

800067ec <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
800067ec:	eb cd 40 c0 	pushm	r6-r7,lr
800067f0:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
800067f2:	f0 1f 00 0f 	mcall	8000682c <nav_filelist_last+0x40>
800067f6:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
800067fa:	c0 61       	brne	80006806 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
800067fc:	30 99       	mov	r9,9
800067fe:	48 d8       	lddpc	r8,80006830 <nav_filelist_last+0x44>
80006800:	b0 89       	st.b	r8[0x0],r9
80006802:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006806:	0c 9c       	mov	r12,r6
80006808:	f0 1f 00 0b 	mcall	80006834 <nav_filelist_last+0x48>
8000680c:	c0 d0       	breq	80006826 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000680e:	30 18       	mov	r8,1
80006810:	f0 07 19 00 	cp.h	r7,r8
80006814:	c0 31       	brne	8000681a <nav_filelist_last+0x2e>
80006816:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000681a:	0e 9c       	mov	r12,r7
8000681c:	20 2c       	sub	r12,2
8000681e:	30 1b       	mov	r11,1
80006820:	5c 7c       	castu.h	r12
80006822:	f0 1f 00 06 	mcall	80006838 <nav_filelist_last+0x4c>
}
80006826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000682a:	00 00       	add	r0,r0
8000682c:	80 00       	ld.sh	r0,r0[0x0]
8000682e:	67 7c       	ld.w	r12,r3[0x5c]
80006830:	00 00       	add	r0,r0
80006832:	06 dc       	st.w	--r3,r12
80006834:	80 00       	ld.sh	r0,r0[0x0]
80006836:	67 3c       	ld.w	r12,r3[0x4c]
80006838:	80 00       	ld.sh	r0,r0[0x0]
8000683a:	63 94       	ld.w	r4,r1[0x64]

8000683c <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
8000683c:	eb cd 40 80 	pushm	r7,lr
80006840:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
80006842:	f0 1f 00 18 	mcall	800068a0 <nav_dir_make+0x64>
80006846:	c2 b0       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006848:	0e 9c       	mov	r12,r7
8000684a:	f0 1f 00 17 	mcall	800068a4 <nav_dir_make+0x68>
8000684e:	c2 70       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
80006850:	49 68       	lddpc	r8,800068a8 <nav_dir_make+0x6c>
80006852:	3f f9       	mov	r9,-1
80006854:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006856:	30 19       	mov	r9,1
80006858:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
8000685a:	f0 1f 00 15 	mcall	800068ac <nav_dir_make+0x70>
8000685e:	c0 71       	brne	8000686c <nav_dir_make+0x30>
   {
      fat_delete_file( false );
80006860:	f0 1f 00 14 	mcall	800068b0 <nav_dir_make+0x74>
      fat_cache_flush();
80006864:	f0 1f 00 14 	mcall	800068b4 <nav_dir_make+0x78>
80006868:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000686c:	49 38       	lddpc	r8,800068b8 <nav_dir_make+0x7c>
8000686e:	48 f9       	lddpc	r9,800068a8 <nav_dir_make+0x6c>
80006870:	72 09       	ld.w	r9,r9[0x0]
80006872:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80006874:	30 09       	mov	r9,0
80006876:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
80006878:	31 09       	mov	r9,16
8000687a:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000687c:	f0 1f 00 10 	mcall	800068bc <nav_dir_make+0x80>
80006880:	c0 e0       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80006882:	f0 1f 00 10 	mcall	800068c0 <nav_dir_make+0x84>
80006886:	c0 b0       	breq	8000689c <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
80006888:	f0 1f 00 0f 	mcall	800068c4 <nav_dir_make+0x88>
   if( !fat_cache_flush())
8000688c:	f0 1f 00 0a 	mcall	800068b4 <nav_dir_make+0x78>
80006890:	c0 60       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80006892:	30 0c       	mov	r12,0
80006894:	f0 1f 00 0d 	mcall	800068c8 <nav_dir_make+0x8c>
80006898:	e3 cd 80 80 	ldm	sp++,r7,pc
8000689c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800068a0:	80 00       	ld.sh	r0,r0[0x0]
800068a2:	52 f8       	stdsp	sp[0xbc],r8
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	65 44       	ld.w	r4,r2[0x50]
800068a8:	00 00       	add	r0,r0
800068aa:	07 34       	ld.ub	r4,r3++
800068ac:	80 00       	ld.sh	r0,r0[0x0]
800068ae:	57 a0       	stdsp	sp[0x1e8],r0
800068b0:	80 00       	ld.sh	r0,r0[0x0]
800068b2:	55 c4       	stdsp	sp[0x170],r4
800068b4:	80 00       	ld.sh	r0,r0[0x0]
800068b6:	48 68       	lddpc	r8,800068cc <nav_partition_mount>
800068b8:	00 00       	add	r0,r0
800068ba:	04 4c       	or	r12,r2
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	54 5c       	stdsp	sp[0x114],r12
800068c0:	80 00       	ld.sh	r0,r0[0x0]
800068c2:	4f 04       	lddpc	r4,80006a80 <nav_setcwd+0xbc>
800068c4:	80 00       	ld.sh	r0,r0[0x0]
800068c6:	46 b4       	lddsp	r4,sp[0x1ac]
800068c8:	80 00       	ld.sh	r0,r0[0x0]
800068ca:	67 ec       	ld.w	r12,r3[0x78]

800068cc <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800068cc:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
800068ce:	f0 1f 00 0a 	mcall	800068f4 <nav_partition_mount+0x28>
800068d2:	c0 f0       	breq	800068f0 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800068d4:	48 98       	lddpc	r8,800068f8 <nav_partition_mount+0x2c>
800068d6:	11 89       	ld.ub	r9,r8[0x0]
800068d8:	30 08       	mov	r8,0
800068da:	f0 09 18 00 	cp.b	r9,r8
800068de:	c0 70       	breq	800068ec <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800068e0:	30 09       	mov	r9,0
800068e2:	48 78       	lddpc	r8,800068fc <nav_partition_mount+0x30>
800068e4:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800068e6:	f0 1f 00 07 	mcall	80006900 <nav_partition_mount+0x34>
800068ea:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
800068ec:	f0 1f 00 06 	mcall	80006904 <nav_partition_mount+0x38>
}
800068f0:	d8 02       	popm	pc
800068f2:	00 00       	add	r0,r0
800068f4:	80 00       	ld.sh	r0,r0[0x0]
800068f6:	52 24       	stdsp	sp[0x88],r4
800068f8:	00 00       	add	r0,r0
800068fa:	06 d8       	st.w	--r3,r8
800068fc:	00 00       	add	r0,r0
800068fe:	06 8c       	andn	r12,r3
80006900:	80 00       	ld.sh	r0,r0[0x0]
80006902:	42 d0       	lddsp	r0,sp[0xb4]
80006904:	80 00       	ld.sh	r0,r0[0x0]
80006906:	5d 38       	musfr	r8

80006908 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006908:	d4 01       	pushm	lr
   return nav_partition_mount();
8000690a:	f0 1f 00 02 	mcall	80006910 <nav_dir_root+0x8>
}
8000690e:	d8 02       	popm	pc
80006910:	80 00       	ld.sh	r0,r0[0x0]
80006912:	68 cc       	ld.w	r12,r4[0x30]

80006914 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80006914:	eb cd 40 80 	pushm	r7,lr
80006918:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
8000691a:	f0 1f 00 0f 	mcall	80006954 <nav_drive_set+0x40>
8000691e:	c1 90       	breq	80006950 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80006920:	f0 1f 00 0e 	mcall	80006958 <nav_drive_set+0x44>
80006924:	ee 0c 18 00 	cp.b	r12,r7
80006928:	e0 8b 00 07 	brhi	80006936 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000692c:	30 69       	mov	r9,6
8000692e:	48 c8       	lddpc	r8,8000695c <nav_drive_set+0x48>
80006930:	b0 89       	st.b	r8[0x0],r9
80006932:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006936:	48 b8       	lddpc	r8,80006960 <nav_drive_set+0x4c>
80006938:	11 88       	ld.ub	r8,r8[0x0]
8000693a:	ee 08 18 00 	cp.b	r8,r7
8000693e:	c0 31       	brne	80006944 <nav_drive_set+0x30>
80006940:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006944:	48 78       	lddpc	r8,80006960 <nav_drive_set+0x4c>
80006946:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006948:	30 09       	mov	r9,0
8000694a:	48 78       	lddpc	r8,80006964 <nav_drive_set+0x50>
8000694c:	b0 89       	st.b	r8[0x0],r9
8000694e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80006950:	e3 cd 80 80 	ldm	sp++,r7,pc
80006954:	80 00       	ld.sh	r0,r0[0x0]
80006956:	52 24       	stdsp	sp[0x88],r4
80006958:	80 00       	ld.sh	r0,r0[0x0]
8000695a:	6d 66       	ld.w	r6,r6[0x58]
8000695c:	00 00       	add	r0,r0
8000695e:	06 dc       	st.w	--r3,r12
80006960:	00 00       	add	r0,r0
80006962:	06 8c       	andn	r12,r3
80006964:	00 00       	add	r0,r0
80006966:	06 d8       	st.w	--r3,r8

80006968 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006968:	d4 21       	pushm	r4-r7,lr
8000696a:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000696c:	19 8c       	ld.ub	r12,r12[0x0]
8000696e:	f0 1f 00 10 	mcall	800069ac <nav_gotoindex+0x44>
80006972:	c1 c0       	breq	800069aa <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80006974:	f0 1f 00 0f 	mcall	800069b0 <nav_gotoindex+0x48>
80006978:	c1 90       	breq	800069aa <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000697a:	6e 19       	ld.w	r9,r7[0x4]
8000697c:	48 e8       	lddpc	r8,800069b4 <nav_gotoindex+0x4c>
8000697e:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
80006980:	f0 1f 00 0e 	mcall	800069b8 <nav_gotoindex+0x50>
80006984:	c0 a1       	brne	80006998 <nav_gotoindex+0x30>
80006986:	c1 28       	rjmp	800069aa <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006988:	0a 9b       	mov	r11,r5
8000698a:	08 9c       	mov	r12,r4
8000698c:	f0 1f 00 0c 	mcall	800069bc <nav_gotoindex+0x54>
80006990:	c0 71       	brne	8000699e <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
80006992:	f0 1f 00 0a 	mcall	800069b8 <nav_gotoindex+0x50>
80006996:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006998:	48 a6       	lddpc	r6,800069c0 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000699a:	30 15       	mov	r5,1
8000699c:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000699e:	8c 19       	ld.sh	r9,r6[0x2]
800069a0:	8e 48       	ld.sh	r8,r7[0x8]
800069a2:	f0 09 19 00 	cp.h	r9,r8
800069a6:	cf 11       	brne	80006988 <nav_gotoindex+0x20>
800069a8:	da 2a       	popm	r4-r7,pc,r12=1
800069aa:	d8 2a       	popm	r4-r7,pc,r12=0
800069ac:	80 00       	ld.sh	r0,r0[0x0]
800069ae:	69 14       	ld.w	r4,r4[0x44]
800069b0:	80 00       	ld.sh	r0,r0[0x0]
800069b2:	68 cc       	ld.w	r12,r4[0x30]
800069b4:	00 00       	add	r0,r0
800069b6:	06 8c       	andn	r12,r3
800069b8:	80 00       	ld.sh	r0,r0[0x0]
800069ba:	65 2c       	ld.w	r12,r2[0x48]
800069bc:	80 00       	ld.sh	r0,r0[0x0]
800069be:	63 94       	ld.w	r4,r1[0x64]
800069c0:	00 00       	add	r0,r0
800069c2:	06 d8       	st.w	--r3,r8

800069c4 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
800069c4:	d4 31       	pushm	r0-r7,lr
800069c6:	20 6d       	sub	sp,24
800069c8:	18 97       	mov	r7,r12
800069ca:	16 91       	mov	r1,r11
800069cc:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
800069ce:	f0 1f 00 61 	mcall	80006b50 <nav_setcwd+0x18c>
800069d2:	e0 80 00 bd 	breq	80006b4c <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
800069d6:	1a 96       	mov	r6,sp
800069d8:	1a 9c       	mov	r12,sp
800069da:	f0 1f 00 5f 	mcall	80006b54 <nav_setcwd+0x190>
800069de:	fa c8 ff f4 	sub	r8,sp,-12
800069e2:	fa ea 00 00 	ld.d	r10,sp[0]
800069e6:	f0 eb 00 00 	st.d	r8[0],r10
800069ea:	40 29       	lddsp	r9,sp[0x8]
800069ec:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
800069ee:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
800069f0:	35 c9       	mov	r9,92
800069f2:	f2 08 18 00 	cp.b	r8,r9
800069f6:	5f 0a       	sreq	r10
800069f8:	32 f9       	mov	r9,47
800069fa:	f2 08 18 00 	cp.b	r8,r9
800069fe:	5f 09       	sreq	r9
80006a00:	f5 e9 10 09 	or	r9,r10,r9
80006a04:	c0 70       	breq	80006a12 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006a06:	f0 1f 00 55 	mcall	80006b58 <nav_setcwd+0x194>
80006a0a:	e0 80 00 9c 	breq	80006b42 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
80006a0e:	2f f7       	sub	r7,-1
80006a10:	c5 e8       	rjmp	80006acc <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006a12:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a14:	33 aa       	mov	r10,58
80006a16:	f4 09 18 00 	cp.b	r9,r10
80006a1a:	c2 01       	brne	80006a5a <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006a1c:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a1e:	35 cb       	mov	r11,92
80006a20:	f6 0a 18 00 	cp.b	r10,r11
80006a24:	5f 0b       	sreq	r11
80006a26:	32 fc       	mov	r12,47
80006a28:	f8 0a 18 00 	cp.b	r10,r12
80006a2c:	5f 0a       	sreq	r10
80006a2e:	f7 ea 10 0a 	or	r10,r11,r10
80006a32:	c1 40       	breq	80006a5a <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006a34:	4c a9       	lddpc	r9,80006b5c <nav_setcwd+0x198>
80006a36:	72 09       	ld.w	r9,r9[0x0]
80006a38:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006a3c:	e2 19 00 02 	andl	r9,0x2,COH
80006a40:	f7 b8 01 20 	subne	r8,32
80006a44:	24 18       	sub	r8,65
80006a46:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006a4a:	f0 1f 00 46 	mcall	80006b60 <nav_setcwd+0x19c>
80006a4e:	c7 a0       	breq	80006b42 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80006a50:	f0 1f 00 45 	mcall	80006b64 <nav_setcwd+0x1a0>
80006a54:	c7 70       	breq	80006b42 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006a56:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a58:	c3 a8       	rjmp	80006acc <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a5a:	32 ea       	mov	r10,46
80006a5c:	f4 08 18 00 	cp.b	r8,r10
80006a60:	c1 a1       	brne	80006a94 <nav_setcwd+0xd0>
80006a62:	35 c8       	mov	r8,92
80006a64:	f0 09 18 00 	cp.b	r9,r8
80006a68:	5f 0a       	sreq	r10
80006a6a:	32 f8       	mov	r8,47
80006a6c:	f0 09 18 00 	cp.b	r9,r8
80006a70:	5f 08       	sreq	r8
80006a72:	f5 e8 10 08 	or	r8,r10,r8
80006a76:	c0 f0       	breq	80006a94 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80006a78:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a7a:	c2 98       	rjmp	80006acc <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80006a7c:	f0 1f 00 3b 	mcall	80006b68 <nav_setcwd+0x1a4>
80006a80:	c6 10       	breq	80006b42 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
80006a82:	0d 88       	ld.ub	r8,r6[0x0]
80006a84:	e8 08 18 00 	cp.b	r8,r4
80006a88:	c0 31       	brne	80006a8e <nav_setcwd+0xca>
80006a8a:	0c 97       	mov	r7,r6
80006a8c:	c0 88       	rjmp	80006a9c <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
80006a8e:	ec c7 ff ff 	sub	r7,r6,-1
80006a92:	c0 58       	rjmp	80006a9c <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006a94:	32 e5       	mov	r5,46
80006a96:	35 c3       	mov	r3,92
80006a98:	32 f2       	mov	r2,47
80006a9a:	30 04       	mov	r4,0
80006a9c:	0f 88       	ld.ub	r8,r7[0x0]
80006a9e:	ea 08 18 00 	cp.b	r8,r5
80006aa2:	c1 51       	brne	80006acc <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80006aa4:	0f 98       	ld.ub	r8,r7[0x1]
80006aa6:	ea 08 18 00 	cp.b	r8,r5
80006aaa:	c1 11       	brne	80006acc <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80006aac:	ee c6 ff fe 	sub	r6,r7,-2
80006ab0:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006ab2:	e6 08 18 00 	cp.b	r8,r3
80006ab6:	5f 0a       	sreq	r10
80006ab8:	e4 08 18 00 	cp.b	r8,r2
80006abc:	5f 09       	sreq	r9
80006abe:	f5 e9 10 09 	or	r9,r10,r9
80006ac2:	e8 09 18 00 	cp.b	r9,r4
80006ac6:	cd b1       	brne	80006a7c <nav_setcwd+0xb8>
80006ac8:	58 08       	cp.w	r8,0
80006aca:	cd 90       	breq	80006a7c <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006acc:	f0 1f 00 28 	mcall	80006b6c <nav_setcwd+0x1a8>
80006ad0:	c3 90       	breq	80006b42 <nav_setcwd+0x17e>
80006ad2:	30 03       	mov	r3,0
80006ad4:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006ad6:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006ad8:	35 c5       	mov	r5,92
80006ada:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006adc:	0f 88       	ld.ub	r8,r7[0x0]
80006ade:	ec 08 18 00 	cp.b	r8,r6
80006ae2:	c0 31       	brne	80006ae8 <nav_setcwd+0x124>
80006ae4:	30 1c       	mov	r12,1
80006ae6:	c3 38       	rjmp	80006b4c <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006ae8:	02 9b       	mov	r11,r1
80006aea:	0e 9c       	mov	r12,r7
80006aec:	f0 1f 00 21 	mcall	80006b70 <nav_setcwd+0x1ac>
80006af0:	c0 51       	brne	80006afa <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
80006af2:	58 00       	cp.w	r0,0
80006af4:	c2 70       	breq	80006b42 <nav_setcwd+0x17e>
80006af6:	0e 92       	mov	r2,r7
80006af8:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006afa:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006afc:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006afe:	58 08       	cp.w	r8,0
80006b00:	c0 81       	brne	80006b10 <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006b02:	58 03       	cp.w	r3,0
80006b04:	ce c0       	breq	80006adc <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006b06:	04 9c       	mov	r12,r2
80006b08:	f0 1f 00 1b 	mcall	80006b74 <nav_setcwd+0x1b0>
80006b0c:	ce 81       	brne	80006adc <nav_setcwd+0x118>
80006b0e:	c1 a8       	rjmp	80006b42 <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006b10:	ea 08 18 00 	cp.b	r8,r5
80006b14:	5f 09       	sreq	r9
80006b16:	e8 08 18 00 	cp.b	r8,r4
80006b1a:	5f 08       	sreq	r8
80006b1c:	f3 e8 10 08 	or	r8,r9,r8
80006b20:	ec 08 18 00 	cp.b	r8,r6
80006b24:	ce b0       	breq	80006afa <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006b26:	58 03       	cp.w	r3,0
80006b28:	c0 50       	breq	80006b32 <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006b2a:	04 9c       	mov	r12,r2
80006b2c:	f0 1f 00 13 	mcall	80006b78 <nav_setcwd+0x1b4>
80006b30:	c0 90       	breq	80006b42 <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006b32:	f0 1f 00 13 	mcall	80006b7c <nav_setcwd+0x1b8>
80006b36:	c0 60       	breq	80006b42 <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006b38:	f0 1f 00 12 	mcall	80006b80 <nav_setcwd+0x1bc>
80006b3c:	c0 30       	breq	80006b42 <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006b3e:	2f f7       	sub	r7,-1
80006b40:	cc eb       	rjmp	80006adc <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006b42:	fa cc ff f4 	sub	r12,sp,-12
80006b46:	f0 1f 00 10 	mcall	80006b84 <nav_setcwd+0x1c0>
80006b4a:	30 0c       	mov	r12,0
   return false;
}
80006b4c:	2f ad       	sub	sp,-24
80006b4e:	d8 32       	popm	r0-r7,pc
80006b50:	80 00       	ld.sh	r0,r0[0x0]
80006b52:	52 24       	stdsp	sp[0x88],r4
80006b54:	80 00       	ld.sh	r0,r0[0x0]
80006b56:	62 84       	ld.w	r4,r1[0x20]
80006b58:	80 00       	ld.sh	r0,r0[0x0]
80006b5a:	69 08       	ld.w	r8,r4[0x40]
80006b5c:	00 00       	add	r0,r0
80006b5e:	00 0c       	add	r12,r0
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	69 14       	ld.w	r4,r4[0x44]
80006b64:	80 00       	ld.sh	r0,r0[0x0]
80006b66:	68 cc       	ld.w	r12,r4[0x30]
80006b68:	80 00       	ld.sh	r0,r0[0x0]
80006b6a:	65 b0       	ld.w	r0,r2[0x6c]
80006b6c:	80 00       	ld.sh	r0,r0[0x0]
80006b6e:	65 2c       	ld.w	r12,r2[0x48]
80006b70:	80 00       	ld.sh	r0,r0[0x0]
80006b72:	64 fc       	ld.w	r12,r2[0x3c]
80006b74:	80 00       	ld.sh	r0,r0[0x0]
80006b76:	65 44       	ld.w	r4,r2[0x50]
80006b78:	80 00       	ld.sh	r0,r0[0x0]
80006b7a:	68 3c       	ld.w	r12,r4[0xc]
80006b7c:	80 00       	ld.sh	r0,r0[0x0]
80006b7e:	42 b8       	lddsp	r8,sp[0xac]
80006b80:	80 00       	ld.sh	r0,r0[0x0]
80006b82:	66 50       	ld.w	r0,r3[0x14]
80006b84:	80 00       	ld.sh	r0,r0[0x0]
80006b86:	69 68       	ld.w	r8,r4[0x58]

80006b88 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
80006b88:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
80006b8a:	f0 1f 00 02 	mcall	80006b90 <nav_drive_nb+0x8>
}
80006b8e:	d8 02       	popm	pc
80006b90:	80 00       	ld.sh	r0,r0[0x0]
80006b92:	6d 66       	ld.w	r6,r6[0x58]

80006b94 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80006b94:	eb cd 40 80 	pushm	r7,lr
80006b98:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006b9a:	30 18       	mov	r8,1
80006b9c:	f0 0c 18 00 	cp.b	r12,r8
80006ba0:	e0 88 00 07 	brls	80006bae <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006ba4:	32 79       	mov	r9,39
80006ba6:	48 b8       	lddpc	r8,80006bd0 <nav_select+0x3c>
80006ba8:	b0 89       	st.b	r8[0x0],r9
80006baa:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006bae:	48 a8       	lddpc	r8,80006bd4 <nav_select+0x40>
80006bb0:	11 8c       	ld.ub	r12,r8[0x0]
80006bb2:	ee 0c 18 00 	cp.b	r12,r7
80006bb6:	c0 31       	brne	80006bbc <nav_select+0x28>
80006bb8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006bbc:	f0 1f 00 07 	mcall	80006bd8 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006bc0:	0e 9c       	mov	r12,r7
80006bc2:	f0 1f 00 06 	mcall	80006bd8 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006bc6:	48 48       	lddpc	r8,80006bd4 <nav_select+0x40>
80006bc8:	b0 87       	st.b	r8[0x0],r7
80006bca:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006bce:	00 00       	add	r0,r0
80006bd0:	00 00       	add	r0,r0
80006bd2:	06 dc       	st.w	--r3,r12
80006bd4:	00 00       	add	r0,r0
80006bd6:	07 54       	ld.sh	r4,--r3
80006bd8:	80 00       	ld.sh	r0,r0[0x0]
80006bda:	47 7c       	lddsp	r12,sp[0x1dc]

80006bdc <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006bdc:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006be0:	30 07       	mov	r7,0
80006be2:	49 18       	lddpc	r8,80006c24 <nav_reset+0x48>
80006be4:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006be6:	49 18       	lddpc	r8,80006c28 <nav_reset+0x4c>
80006be8:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006bea:	f0 1f 00 11 	mcall	80006c2c <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006bee:	f0 1f 00 11 	mcall	80006c30 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006bf2:	30 0c       	mov	r12,0
80006bf4:	f0 1f 00 10 	mcall	80006c34 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006bf8:	49 03       	lddpc	r3,80006c38 <nav_reset+0x5c>
80006bfa:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006bfc:	49 05       	lddpc	r5,80006c3c <nav_reset+0x60>
80006bfe:	3f f4       	mov	r4,-1
80006c00:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006c02:	49 06       	lddpc	r6,80006c40 <nav_reset+0x64>
80006c04:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006c06:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006c0a:	30 1c       	mov	r12,1
80006c0c:	f0 1f 00 0a 	mcall	80006c34 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006c10:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006c12:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006c14:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006c16:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006c1a:	48 b8       	lddpc	r8,80006c44 <nav_reset+0x68>
80006c1c:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006c1e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006c22:	00 00       	add	r0,r0
80006c24:	00 00       	add	r0,r0
80006c26:	06 dd       	st.w	--r3,sp
80006c28:	00 00       	add	r0,r0
80006c2a:	04 5e       	eor	lr,r2
80006c2c:	80 00       	ld.sh	r0,r0[0x0]
80006c2e:	46 8c       	lddsp	r12,sp[0x1a0]
80006c30:	80 00       	ld.sh	r0,r0[0x0]
80006c32:	40 6c       	lddsp	r12,sp[0x18]
80006c34:	80 00       	ld.sh	r0,r0[0x0]
80006c36:	6b 94       	ld.w	r4,r5[0x64]
80006c38:	00 00       	add	r0,r0
80006c3a:	06 d8       	st.w	--r3,r8
80006c3c:	00 00       	add	r0,r0
80006c3e:	06 8c       	andn	r12,r3
80006c40:	00 00       	add	r0,r0
80006c42:	04 4c       	or	r12,r2
80006c44:	00 00       	add	r0,r0
80006c46:	07 54       	ld.sh	r4,--r3

80006c48 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006c48:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006c4a:	f0 1f 00 02 	mcall	80006c50 <print+0x8>
}
80006c4e:	d8 02       	popm	pc
80006c50:	80 00       	ld.sh	r0,r0[0x0]
80006c52:	3e 94       	mov	r4,-23

80006c54 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80006c54:	eb cd 40 e0 	pushm	r5-r7,lr
80006c58:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80006c5a:	30 08       	mov	r8,0
80006c5c:	fb 68 00 0a 	st.b	sp[10],r8
80006c60:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80006c62:	1a 95       	mov	r5,sp
80006c64:	e0 6e cc cd 	mov	lr,52429
80006c68:	ea 1e cc cc 	orh	lr,0xcccc
80006c6c:	20 19       	sub	r9,1
80006c6e:	f6 0e 06 46 	mulu.d	r6,r11,lr
80006c72:	0e 98       	mov	r8,r7
80006c74:	a3 98       	lsr	r8,0x3
80006c76:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80006c7a:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80006c7e:	2d 0b       	sub	r11,-48
80006c80:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80006c84:	10 9b       	mov	r11,r8
  } while (n);
80006c86:	58 08       	cp.w	r8,0
80006c88:	cf 21       	brne	80006c6c <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80006c8a:	1a 9b       	mov	r11,sp
80006c8c:	12 0b       	add	r11,r9
80006c8e:	f0 1f 00 03 	mcall	80006c98 <print_ulong+0x44>
}
80006c92:	2f dd       	sub	sp,-12
80006c94:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006c98:	80 00       	ld.sh	r0,r0[0x0]
80006c9a:	6c 48       	ld.w	r8,r6[0x10]

80006c9c <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80006c9c:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80006c9e:	18 9b       	mov	r11,r12
80006ca0:	fe 7c 2c 00 	mov	r12,-54272
80006ca4:	f0 1f 00 02 	mcall	80006cac <print_dbg_ulong+0x10>
}
80006ca8:	d8 02       	popm	pc
80006caa:	00 00       	add	r0,r0
80006cac:	80 00       	ld.sh	r0,r0[0x0]
80006cae:	6c 54       	ld.w	r4,r6[0x14]

80006cb0 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80006cb0:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80006cb2:	18 9b       	mov	r11,r12
80006cb4:	fe 7c 2c 00 	mov	r12,-54272
80006cb8:	f0 1f 00 02 	mcall	80006cc0 <print_dbg+0x10>
}
80006cbc:	d8 02       	popm	pc
80006cbe:	00 00       	add	r0,r0
80006cc0:	80 00       	ld.sh	r0,r0[0x0]
80006cc2:	6c 48       	ld.w	r8,r6[0x10]

80006cc4 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80006cc4:	eb cd 40 80 	pushm	r7,lr
80006cc8:	20 3d       	sub	sp,12
80006cca:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80006ccc:	50 0c       	stdsp	sp[0x0],r12
80006cce:	30 88       	mov	r8,8
80006cd0:	ba c8       	st.b	sp[0x4],r8
80006cd2:	30 48       	mov	r8,4
80006cd4:	ba d8       	st.b	sp[0x5],r8
80006cd6:	30 08       	mov	r8,0
80006cd8:	ba 38       	st.h	sp[0x6],r8
80006cda:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80006cde:	30 2b       	mov	r11,2
80006ce0:	48 6c       	lddpc	r12,80006cf8 <init_dbg_rs232_ex+0x34>
80006ce2:	f0 1f 00 07 	mcall	80006cfc <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80006ce6:	0e 9a       	mov	r10,r7
80006ce8:	1a 9b       	mov	r11,sp
80006cea:	fe 7c 2c 00 	mov	r12,-54272
80006cee:	f0 1f 00 05 	mcall	80006d00 <init_dbg_rs232_ex+0x3c>
}
80006cf2:	2f dd       	sub	sp,-12
80006cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cf8:	80 00       	ld.sh	r0,r0[0x0]
80006cfa:	82 d8       	ld.uh	r8,r1[0xa]
80006cfc:	80 00       	ld.sh	r0,r0[0x0]
80006cfe:	31 c4       	mov	r4,28
80006d00:	80 00       	ld.sh	r0,r0[0x0]
80006d02:	3e e4       	mov	r4,-18

80006d04 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80006d04:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80006d06:	18 9b       	mov	r11,r12
80006d08:	e0 6c e1 00 	mov	r12,57600
80006d0c:	f0 1f 00 02 	mcall	80006d14 <init_dbg_rs232+0x10>
}
80006d10:	d8 02       	popm	pc
80006d12:	00 00       	add	r0,r0
80006d14:	80 00       	ld.sh	r0,r0[0x0]
80006d16:	6c c4       	ld.w	r4,r6[0x30]

80006d18 <_stext>:
80006d18:	48 dd       	lddpc	sp,80006d4c <udata_clear_loop_end+0x4>
80006d1a:	fe c0 ef 1a 	sub	r0,pc,-4326
80006d1e:	e3 b0 00 01 	mtsr	0x4,r0
80006d22:	d5 53       	csrf	0x15
80006d24:	48 b0       	lddpc	r0,80006d50 <udata_clear_loop_end+0x8>
80006d26:	48 c1       	lddpc	r1,80006d54 <udata_clear_loop_end+0xc>
80006d28:	02 30       	cp.w	r0,r1
80006d2a:	c0 62       	brcc	80006d36 <idata_load_loop_end>
80006d2c:	48 b2       	lddpc	r2,80006d58 <udata_clear_loop_end+0x10>

80006d2e <idata_load_loop>:
80006d2e:	a5 05       	ld.d	r4,r2++
80006d30:	a1 24       	st.d	r0++,r4
80006d32:	02 30       	cp.w	r0,r1
80006d34:	cf d3       	brcs	80006d2e <idata_load_loop>

80006d36 <idata_load_loop_end>:
80006d36:	48 a0       	lddpc	r0,80006d5c <udata_clear_loop_end+0x14>
80006d38:	48 a1       	lddpc	r1,80006d60 <udata_clear_loop_end+0x18>
80006d3a:	02 30       	cp.w	r0,r1
80006d3c:	c0 62       	brcc	80006d48 <udata_clear_loop_end>
80006d3e:	30 02       	mov	r2,0
80006d40:	30 03       	mov	r3,0

80006d42 <udata_clear_loop>:
80006d42:	a1 22       	st.d	r0++,r2
80006d44:	02 30       	cp.w	r0,r1
80006d46:	cf e3       	brcs	80006d42 <udata_clear_loop>

80006d48 <udata_clear_loop_end>:
80006d48:	fe cf f4 34 	sub	pc,pc,-3020
80006d4c:	00 01       	add	r1,r0
80006d4e:	00 00       	add	r0,r0
80006d50:	00 00       	add	r0,r0
80006d52:	00 04       	add	r4,r0
80006d54:	00 00       	add	r0,r0
80006d56:	00 10       	sub	r0,r0
80006d58:	80 00       	ld.sh	r0,r0[0x0]
80006d5a:	86 c8       	ld.uh	r8,r3[0x8]
80006d5c:	00 00       	add	r0,r0
80006d5e:	00 10       	sub	r0,r0
80006d60:	00 00       	add	r0,r0
80006d62:	07 c8       	ld.ub	r8,r3[0x4]

80006d64 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
80006d64:	5e fc       	retal	r12

80006d66 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80006d66:	5e ff       	retal	1

80006d68 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80006d68:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d6a:	58 0c       	cp.w	r12,0
80006d6c:	c0 20       	breq	80006d70 <mem_test_unit_ready+0x8>
80006d6e:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80006d70:	48 28       	lddpc	r8,80006d78 <mem_test_unit_ready+0x10>
80006d72:	70 0c       	ld.w	r12,r8[0x0]
80006d74:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80006d76:	d8 02       	popm	pc
80006d78:	80 00       	ld.sh	r0,r0[0x0]
80006d7a:	82 e8       	ld.uh	r8,r1[0xc]

80006d7c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80006d7c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d7e:	58 0c       	cp.w	r12,0
80006d80:	c0 20       	breq	80006d84 <mem_read_capacity+0x8>
80006d82:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80006d84:	48 38       	lddpc	r8,80006d90 <mem_read_capacity+0x14>
80006d86:	70 18       	ld.w	r8,r8[0x4]
80006d88:	16 9c       	mov	r12,r11
80006d8a:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80006d8c:	d8 02       	popm	pc
80006d8e:	00 00       	add	r0,r0
80006d90:	80 00       	ld.sh	r0,r0[0x0]
80006d92:	82 e8       	ld.uh	r8,r1[0xc]

80006d94 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80006d94:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
80006d96:	5f 0c       	sreq	r12
80006d98:	5e fc       	retal	r12
80006d9a:	d7 03       	nop

80006d9c <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80006d9c:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80006d9e:	58 0c       	cp.w	r12,0
80006da0:	c0 20       	breq	80006da4 <mem_wr_protect+0x8>
80006da2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80006da4:	48 28       	lddpc	r8,80006dac <mem_wr_protect+0x10>
80006da6:	70 2c       	ld.w	r12,r8[0x8]
80006da8:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80006daa:	d8 02       	popm	pc
80006dac:	80 00       	ld.sh	r0,r0[0x0]
80006dae:	82 e8       	ld.uh	r8,r1[0xc]

80006db0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80006db0:	d4 01       	pushm	lr
80006db2:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80006db4:	58 0c       	cp.w	r12,0
80006db6:	c0 20       	breq	80006dba <memory_2_ram+0xa>
80006db8:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80006dba:	48 49       	lddpc	r9,80006dc8 <memory_2_ram+0x18>
80006dbc:	72 49       	ld.w	r9,r9[0x10]
80006dbe:	14 9b       	mov	r11,r10
80006dc0:	10 9c       	mov	r12,r8
80006dc2:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80006dc4:	d8 02       	popm	pc
80006dc6:	00 00       	add	r0,r0
80006dc8:	80 00       	ld.sh	r0,r0[0x0]
80006dca:	82 e8       	ld.uh	r8,r1[0xc]

80006dcc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80006dcc:	d4 01       	pushm	lr
80006dce:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80006dd0:	58 0c       	cp.w	r12,0
80006dd2:	c0 20       	breq	80006dd6 <ram_2_memory+0xa>
80006dd4:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80006dd6:	48 49       	lddpc	r9,80006de4 <ram_2_memory+0x18>
80006dd8:	72 59       	ld.w	r9,r9[0x14]
80006dda:	14 9b       	mov	r11,r10
80006ddc:	10 9c       	mov	r12,r8
80006dde:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80006de0:	d8 02       	popm	pc
80006de2:	00 00       	add	r0,r0
80006de4:	80 00       	ld.sh	r0,r0[0x0]
80006de6:	82 e8       	ld.uh	r8,r1[0xc]

80006de8 <Motors_Moving>:
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
{
	if(Motor_Control.Left_State != STOP)
80006de8:	48 58       	lddpc	r8,80006dfc <Motors_Moving+0x14>
80006dea:	70 08       	ld.w	r8,r8[0x0]
80006dec:	58 68       	cp.w	r8,6
80006dee:	c0 21       	brne	80006df2 <Motors_Moving+0xa>
80006df0:	5e fd       	retal	0
	Motor_Control.Right_State = FORWARD;
	Motor_Control.Right_Count = 1;
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
80006df2:	48 38       	lddpc	r8,80006dfc <Motors_Moving+0x14>
80006df4:	70 18       	ld.w	r8,r8[0x4]
80006df6:	58 68       	cp.w	r8,6
80006df8:	5f 1c       	srne	r12
	else
	{
		return false;
	}
	
80006dfa:	5e fc       	retal	r12
80006dfc:	00 00       	add	r0,r0
80006dfe:	07 a8       	ld.ub	r8,r3[0x2]

80006e00 <Motor_Stop>:
		pwm_start_channels((1 << MOTOR_R));
	}	
}

void Motor_Stop(int Motors)
{
80006e00:	eb cd 40 80 	pushm	r7,lr
80006e04:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80006e06:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80006e0a:	c0 a0       	breq	80006e1e <Motor_Stop+0x1e>
	{
		ML_STANDBY;
80006e0c:	32 8c       	mov	r12,40
80006e0e:	f0 1f 00 0c 	mcall	80006e3c <Motor_Stop+0x3c>
		Motor_Control.Left_State = STOP;
80006e12:	30 69       	mov	r9,6
80006e14:	48 b8       	lddpc	r8,80006e40 <Motor_Stop+0x40>
80006e16:	91 09       	st.w	r8[0x0],r9
		pwm_stop_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80006e18:	30 2c       	mov	r12,2
80006e1a:	f0 1f 00 0b 	mcall	80006e44 <Motor_Stop+0x44>
	}
	
	if(Motors & MOTOR_R)
80006e1e:	e2 17 00 02 	andl	r7,0x2,COH
80006e22:	c0 a0       	breq	80006e36 <Motor_Stop+0x36>
	{
		MR_STANDBY;
80006e24:	33 0c       	mov	r12,48
80006e26:	f0 1f 00 06 	mcall	80006e3c <Motor_Stop+0x3c>
		Motor_Control.Right_State = STOP;
80006e2a:	30 69       	mov	r9,6
80006e2c:	48 58       	lddpc	r8,80006e40 <Motor_Stop+0x40>
80006e2e:	91 19       	st.w	r8[0x4],r9
		pwm_stop_channels((1 << MOTOR_R));
80006e30:	30 4c       	mov	r12,4
80006e32:	f0 1f 00 05 	mcall	80006e44 <Motor_Stop+0x44>
80006e36:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e3a:	00 00       	add	r0,r0
80006e3c:	80 00       	ld.sh	r0,r0[0x0]
80006e3e:	32 2a       	mov	r10,34
80006e40:	00 00       	add	r0,r0
80006e42:	07 a8       	ld.ub	r8,r3[0x2]
80006e44:	80 00       	ld.sh	r0,r0[0x0]
80006e46:	34 c4       	mov	r4,76

80006e48 <Motor_Start>:
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
	
	Enable_global_interrupt();
}
void Motor_Start(int Motors)
{
80006e48:	eb cd 40 80 	pushm	r7,lr
80006e4c:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80006e4e:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80006e52:	c2 30       	breq	80006e98 <Motor_Start+0x50>
	{
		if(Motor_Control.Left_State == FORWARD)
80006e54:	4a 58       	lddpc	r8,80006ee8 <Motor_Start+0xa0>
80006e56:	70 08       	ld.w	r8,r8[0x0]
80006e58:	58 28       	cp.w	r8,2
80006e5a:	c0 81       	brne	80006e6a <Motor_Start+0x22>
		{
			ML_IN1_SET;
80006e5c:	32 9c       	mov	r12,41
80006e5e:	f0 1f 00 24 	mcall	80006eec <Motor_Start+0xa4>
			ML_IN2_CLR;
80006e62:	32 ac       	mov	r12,42
80006e64:	f0 1f 00 23 	mcall	80006ef0 <Motor_Start+0xa8>
80006e68:	c1 28       	rjmp	80006e8c <Motor_Start+0x44>
		}
		else if (Motor_Control.Left_State == BACKWARD)
80006e6a:	58 38       	cp.w	r8,3
80006e6c:	c0 81       	brne	80006e7c <Motor_Start+0x34>
		{
			ML_IN1_CLR;
80006e6e:	32 9c       	mov	r12,41
80006e70:	f0 1f 00 20 	mcall	80006ef0 <Motor_Start+0xa8>
			ML_IN2_SET;
80006e74:	32 ac       	mov	r12,42
80006e76:	f0 1f 00 1e 	mcall	80006eec <Motor_Start+0xa4>
80006e7a:	c0 98       	rjmp	80006e8c <Motor_Start+0x44>
		}
		else //Somethings gone wrong
		{
			ML_IN1_CLR;
80006e7c:	32 9c       	mov	r12,41
80006e7e:	f0 1f 00 1d 	mcall	80006ef0 <Motor_Start+0xa8>
			ML_IN2_CLR;
80006e82:	32 ac       	mov	r12,42
80006e84:	f0 1f 00 1b 	mcall	80006ef0 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80006e88:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		ML_GO;
80006e8c:	32 8c       	mov	r12,40
80006e8e:	f0 1f 00 18 	mcall	80006eec <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80006e92:	30 2c       	mov	r12,2
80006e94:	f0 1f 00 18 	mcall	80006ef4 <Motor_Start+0xac>
	}
	
	if(Motors & MOTOR_R)
80006e98:	e2 17 00 02 	andl	r7,0x2,COH
80006e9c:	c2 30       	breq	80006ee2 <Motor_Start+0x9a>
	{
		if(Motor_Control.Right_State == FORWARD)
80006e9e:	49 38       	lddpc	r8,80006ee8 <Motor_Start+0xa0>
80006ea0:	70 18       	ld.w	r8,r8[0x4]
80006ea2:	58 28       	cp.w	r8,2
80006ea4:	c0 81       	brne	80006eb4 <Motor_Start+0x6c>
		{
			MR_IN1_SET;
80006ea6:	32 fc       	mov	r12,47
80006ea8:	f0 1f 00 11 	mcall	80006eec <Motor_Start+0xa4>
			MR_IN2_CLR;
80006eac:	32 ec       	mov	r12,46
80006eae:	f0 1f 00 11 	mcall	80006ef0 <Motor_Start+0xa8>
80006eb2:	c1 28       	rjmp	80006ed6 <Motor_Start+0x8e>
		}
		else if (Motor_Control.Right_State == BACKWARD)
80006eb4:	58 38       	cp.w	r8,3
80006eb6:	c0 81       	brne	80006ec6 <Motor_Start+0x7e>
		{
			MR_IN1_CLR;
80006eb8:	32 fc       	mov	r12,47
80006eba:	f0 1f 00 0e 	mcall	80006ef0 <Motor_Start+0xa8>
			MR_IN2_SET;
80006ebe:	32 ec       	mov	r12,46
80006ec0:	f0 1f 00 0b 	mcall	80006eec <Motor_Start+0xa4>
80006ec4:	c0 98       	rjmp	80006ed6 <Motor_Start+0x8e>
		}
		else //Somethings gone wrong
		{
			MR_IN1_CLR;
80006ec6:	32 fc       	mov	r12,47
80006ec8:	f0 1f 00 0a 	mcall	80006ef0 <Motor_Start+0xa8>
			MR_IN2_CLR;
80006ecc:	32 ec       	mov	r12,46
80006ece:	f0 1f 00 09 	mcall	80006ef0 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80006ed2:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		MR_GO;
80006ed6:	33 0c       	mov	r12,48
80006ed8:	f0 1f 00 05 	mcall	80006eec <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_R));
80006edc:	30 4c       	mov	r12,4
80006ede:	f0 1f 00 06 	mcall	80006ef4 <Motor_Start+0xac>
80006ee2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ee6:	00 00       	add	r0,r0
80006ee8:	00 00       	add	r0,r0
80006eea:	07 a8       	ld.ub	r8,r3[0x2]
80006eec:	80 00       	ld.sh	r0,r0[0x0]
80006eee:	32 0e       	mov	lr,32
80006ef0:	80 00       	ld.sh	r0,r0[0x0]
80006ef2:	32 2a       	mov	r10,34
80006ef4:	80 00       	ld.sh	r0,r0[0x0]
80006ef6:	34 b2       	mov	r2,75

80006ef8 <Motors_Reset>:
{
	//Calculate number of interrupts of each wheel
}

void Motors_Reset(void)
{
80006ef8:	d4 01       	pushm	lr
	Motor_Control.Left_State = FORWARD;
80006efa:	48 68       	lddpc	r8,80006f10 <Motors_Reset+0x18>
80006efc:	30 2a       	mov	r10,2
80006efe:	91 0a       	st.w	r8[0x0],r10
	Motor_Control.Left_Count = 1;
80006f00:	30 19       	mov	r9,1
80006f02:	91 29       	st.w	r8[0x8],r9
	Motor_Control.Right_State = FORWARD;
80006f04:	91 1a       	st.w	r8[0x4],r10
	Motor_Control.Right_Count = 1;
80006f06:	91 39       	st.w	r8[0xc],r9
	Motor_Start(MOTOR_L | MOTOR_R);
80006f08:	30 3c       	mov	r12,3
80006f0a:	f0 1f 00 03 	mcall	80006f14 <Motors_Reset+0x1c>
}
80006f0e:	d8 02       	popm	pc
80006f10:	00 00       	add	r0,r0
80006f12:	07 a8       	ld.ub	r8,r3[0x2]
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	6e 48       	ld.w	r8,r7[0x10]

80006f18 <Analogue_Comparator_Init>:
		temp |= MOTOR_R;
		
	Motor_Stop(temp); //Stop the Right Motor
}
void Analogue_Comparator_Init()
{
80006f18:	d4 01       	pushm	lr
	{POT1_AC1BP1_PIN, POT1_AC1BP1_FUNCTION},
	{SENSE0_AC1AN1_PIN, SENSE0_AC1AN1_FUNCTION},
	{SENSE1_AC1BN1_PIN, SENSE1_AC1BN1_FUNCTION},
	};
	
	gpio_enable_module(ACIFA_GPIO_MAP, sizeof(ACIFA_GPIO_MAP) / sizeof(ACIFA_GPIO_MAP[0]));
80006f1a:	30 4b       	mov	r11,4
80006f1c:	4a 1c       	lddpc	r12,80006fa0 <Analogue_Comparator_Init+0x88>
80006f1e:	f0 1f 00 22 	mcall	80006fa4 <Analogue_Comparator_Init+0x8c>
	//Make it an interrupt
	Disable_global_interrupt();
80006f22:	d3 03       	ssrf	0x10
	
	//INTC_init_interrupts();
	
	acifa_configure(&AVR32_ACIFA1,
80006f24:	e0 68 24 00 	mov	r8,9216
80006f28:	ea 18 00 f4 	orh	r8,0xf4
80006f2c:	30 19       	mov	r9,1
80006f2e:	12 9a       	mov	r10,r9
80006f30:	12 9b       	mov	r11,r9
80006f32:	fe 7c 64 00 	mov	r12,-39936
80006f36:	f0 1f 00 1d 	mcall	80006fa8 <Analogue_Comparator_Init+0x90>
	ACIFA_COMP_SELA,
	POT0_AC1AP1_INPUT,
	SENSE0_AC1AN1_INPUT,
	FOSC0);
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELA, 2);
80006f3a:	30 2a       	mov	r10,2
80006f3c:	30 1b       	mov	r11,1
80006f3e:	fe 7c 64 00 	mov	r12,-39936
80006f42:	f0 1f 00 1b 	mcall	80006fac <Analogue_Comparator_Init+0x94>
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELB, 2);
80006f46:	30 2a       	mov	r10,2
80006f48:	14 9b       	mov	r11,r10
80006f4a:	fe 7c 64 00 	mov	r12,-39936
80006f4e:	f0 1f 00 18 	mcall	80006fac <Analogue_Comparator_Init+0x94>
	acifa_configure(&AVR32_ACIFA1,
80006f52:	e0 68 24 00 	mov	r8,9216
80006f56:	ea 18 00 f4 	orh	r8,0xf4
80006f5a:	30 19       	mov	r9,1
80006f5c:	30 3a       	mov	r10,3
80006f5e:	30 2b       	mov	r11,2
80006f60:	fe 7c 64 00 	mov	r12,-39936
80006f64:	f0 1f 00 11 	mcall	80006fa8 <Analogue_Comparator_Init+0x90>
	// 			;
	// 		M1_IN1_CLR;
	
	
	//Motor_Go(S)
	acifa_enable_interrupt(&AVR32_ACIFA1, 3);//Enable ACBINT and ACAINT
80006f68:	30 3b       	mov	r11,3
80006f6a:	fe 7c 64 00 	mov	r12,-39936
80006f6e:	f0 1f 00 11 	mcall	80006fb0 <Analogue_Comparator_Init+0x98>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELA);
80006f72:	30 1b       	mov	r11,1
80006f74:	fe 7c 64 00 	mov	r12,-39936
80006f78:	f0 1f 00 0f 	mcall	80006fb4 <Analogue_Comparator_Init+0x9c>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELB);
80006f7c:	30 2b       	mov	r11,2
80006f7e:	fe 7c 64 00 	mov	r12,-39936
80006f82:	f0 1f 00 0d 	mcall	80006fb4 <Analogue_Comparator_Init+0x9c>

	acifa_start(&AVR32_ACIFA1, (ACIFA_COMP_SELA|ACIFA_COMP_SELB));
80006f86:	30 3b       	mov	r11,3
80006f88:	fe 7c 64 00 	mov	r12,-39936
80006f8c:	f0 1f 00 0b 	mcall	80006fb8 <Analogue_Comparator_Init+0xa0>
	
	
	
	
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
80006f90:	30 0a       	mov	r10,0
80006f92:	e0 6b 04 c0 	mov	r11,1216
80006f96:	48 ac       	lddpc	r12,80006fbc <Analogue_Comparator_Init+0xa4>
80006f98:	f0 1f 00 0a 	mcall	80006fc0 <Analogue_Comparator_Init+0xa8>
	
	Enable_global_interrupt();
80006f9c:	d5 03       	csrf	0x10
}
80006f9e:	d8 02       	popm	pc
80006fa0:	80 00       	ld.sh	r0,r0[0x0]
80006fa2:	83 1c       	st.w	r1[0x4],r12
80006fa4:	80 00       	ld.sh	r0,r0[0x0]
80006fa6:	31 c4       	mov	r4,28
80006fa8:	80 00       	ld.sh	r0,r0[0x0]
80006faa:	2c e0       	sub	r0,-50
80006fac:	80 00       	ld.sh	r0,r0[0x0]
80006fae:	2d 24       	sub	r4,-46
80006fb0:	80 00       	ld.sh	r0,r0[0x0]
80006fb2:	2d de       	sub	lr,-35
80006fb4:	80 00       	ld.sh	r0,r0[0x0]
80006fb6:	2d b6       	sub	r6,-37
80006fb8:	80 00       	ld.sh	r0,r0[0x0]
80006fba:	2d 48       	sub	r8,-44
80006fbc:	80 00       	ld.sh	r0,r0[0x0]
80006fbe:	6f c4       	ld.w	r4,r7[0x70]
80006fc0:	80 00       	ld.sh	r0,r0[0x0]
80006fc2:	32 48       	mov	r8,36

80006fc4 <ACInterruptHandler>:
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
}
__attribute__((__interrupt__)) static void ACInterruptHandler(void)
{
80006fc4:	d4 01       	pushm	lr
	//print_dbg("\n\rACIFA Interrupt Entered.");
	acifa_clear_flags(&AVR32_ACIFA1, 3);
80006fc6:	30 3b       	mov	r11,3
80006fc8:	fe 7c 64 00 	mov	r12,-39936
80006fcc:	f0 1f 00 1a 	mcall	80007034 <ACInterruptHandler+0x70>
	
	if (acifa_is_acb_inp_higher(&AVR32_ACIFA1)) //LEFT MOTOR
80006fd0:	fe 7c 64 00 	mov	r12,-39936
80006fd4:	f0 1f 00 19 	mcall	80007038 <ACInterruptHandler+0x74>
80006fd8:	c0 50       	breq	80006fe2 <ACInterruptHandler+0x1e>
	{
		LED5_SET; //wheel not on white tab
80006fda:	33 cc       	mov	r12,60
80006fdc:	f0 1f 00 18 	mcall	8000703c <ACInterruptHandler+0x78>
80006fe0:	c0 88       	rjmp	80006ff0 <ACInterruptHandler+0x2c>
	}
	else
	{
		LED5_CLR;
80006fe2:	33 cc       	mov	r12,60
80006fe4:	f0 1f 00 17 	mcall	80007040 <ACInterruptHandler+0x7c>
		Motor_Control.Left_Count --;
80006fe8:	49 78       	lddpc	r8,80007044 <ACInterruptHandler+0x80>
80006fea:	70 29       	ld.w	r9,r8[0x8]
80006fec:	20 19       	sub	r9,1
80006fee:	91 29       	st.w	r8[0x8],r9
	}
	
	if (acifa_is_aca_inp_higher(&AVR32_ACIFA1))
80006ff0:	fe 7c 64 00 	mov	r12,-39936
80006ff4:	f0 1f 00 15 	mcall	80007048 <ACInterruptHandler+0x84>
80006ff8:	c0 50       	breq	80007002 <ACInterruptHandler+0x3e>
	{

		LED6_SET;
80006ffa:	33 dc       	mov	r12,61
80006ffc:	f0 1f 00 10 	mcall	8000703c <ACInterruptHandler+0x78>
80007000:	c0 88       	rjmp	80007010 <ACInterruptHandler+0x4c>
		
	}
	else
	{
		LED6_CLR;
80007002:	33 dc       	mov	r12,61
80007004:	f0 1f 00 0f 	mcall	80007040 <ACInterruptHandler+0x7c>
		Motor_Control.Right_Count --;
80007008:	48 f8       	lddpc	r8,80007044 <ACInterruptHandler+0x80>
8000700a:	70 39       	ld.w	r9,r8[0xc]
8000700c:	20 19       	sub	r9,1
8000700e:	91 39       	st.w	r8[0xc],r9
80007010:	48 d8       	lddpc	r8,80007044 <ACInterruptHandler+0x80>
80007012:	70 29       	ld.w	r9,r8[0x8]
80007014:	f2 cc 00 01 	sub	r12,r9,1
80007018:	f9 e9 10 09 	or	r9,r12,r9
8000701c:	f2 0c 16 1f 	lsr	r12,r9,0x1f
	}
	int temp = 0;
	if(Motor_Control.Left_Count <= 0) //if we have reached the end of the movement on left wheel
		temp |= MOTOR_L;
	
	if(Motor_Control.Right_Count <= 0)
80007020:	70 38       	ld.w	r8,r8[0xc]
80007022:	58 08       	cp.w	r8,0
80007024:	e0 89 00 03 	brgt	8000702a <ACInterruptHandler+0x66>
		temp |= MOTOR_R;
80007028:	a1 bc       	sbr	r12,0x1
		
	Motor_Stop(temp); //Stop the Right Motor
8000702a:	f0 1f 00 09 	mcall	8000704c <ACInterruptHandler+0x88>
}
8000702e:	d4 02       	popm	lr
80007030:	d6 03       	rete
80007032:	00 00       	add	r0,r0
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	2d b0       	sub	r0,-37
80007038:	80 00       	ld.sh	r0,r0[0x0]
8000703a:	2d a8       	sub	r8,-38
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	32 0e       	mov	lr,32
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	32 2a       	mov	r10,34
80007044:	00 00       	add	r0,r0
80007046:	07 a8       	ld.ub	r8,r3[0x2]
80007048:	80 00       	ld.sh	r0,r0[0x0]
8000704a:	2d a0       	sub	r0,-38
8000704c:	80 00       	ld.sh	r0,r0[0x0]
8000704e:	6e 00       	ld.w	r0,r7[0x0]

80007050 <Motor_Init>:
// #  define EXAMPLE_PWM_L_FUNCTION        AVR32_PWM_PWML_0_1_FUNCTION
// #  define EXAMPLE_PWM_H_PIN             AVR32_PWM_PWMH_0_1_PIN
// #  define EXAMPLE_PWM_H_FUNCTION        AVR32_PWM_PWMH_0_1_FUNCTION
// #  define EXAMPLE_PWM_CHANNEL_ID        0
void Motor_Init()
{
80007050:	eb cd 40 c0 	pushm	r6-r7,lr
80007054:	20 dd       	sub	sp,52
	//Turn boths motors off
	ML_STANDBY;
80007056:	32 8c       	mov	r12,40
80007058:	f0 1f 00 41 	mcall	8000715c <Motor_Init+0x10c>
	MR_STANDBY;
8000705c:	33 0c       	mov	r12,48
8000705e:	f0 1f 00 40 	mcall	8000715c <Motor_Init+0x10c>
	
	ML_IN1_CLR;
80007062:	32 9c       	mov	r12,41
80007064:	f0 1f 00 3e 	mcall	8000715c <Motor_Init+0x10c>
	ML_IN2_CLR;
80007068:	32 ac       	mov	r12,42
8000706a:	f0 1f 00 3d 	mcall	8000715c <Motor_Init+0x10c>
	
	MR_IN1_CLR;
8000706e:	32 fc       	mov	r12,47
80007070:	f0 1f 00 3b 	mcall	8000715c <Motor_Init+0x10c>
	MR_IN2_CLR;
80007074:	32 ec       	mov	r12,46
80007076:	f0 1f 00 3a 	mcall	8000715c <Motor_Init+0x10c>
	
	Motor_Control.Left_Count = 0;
8000707a:	4b a8       	lddpc	r8,80007160 <Motor_Init+0x110>
8000707c:	30 07       	mov	r7,0
8000707e:	91 27       	st.w	r8[0x8],r7
	Motor_Control.Right_Count = 0;
80007080:	91 37       	st.w	r8[0xc],r7
	Motor_Control.Left_State = STOP;
80007082:	30 69       	mov	r9,6
80007084:	91 09       	st.w	r8[0x0],r9
	Motor_Control.Right_State = STOP;
80007086:	91 19       	st.w	r8[0x4],r9
											{0}, // cdtyupd
											{0}, // cprd
											{0}, // cprdupd
											{0}, // ccnt
											{0}, // dt
											{0}};// dtupd  ;  One channel config.
80007088:	30 08       	mov	r8,0
8000708a:	30 09       	mov	r9,0
8000708c:	fa e9 00 14 	st.d	sp[20],r8
80007090:	fa e9 00 1c 	st.d	sp[28],r8
80007094:	fa e9 00 24 	st.d	sp[36],r8
80007098:	fa e9 00 2c 	st.d	sp[44],r8
            .div = 1,             // DIV=1 in the formula
            .mul = 6,             // MUL=7 in the formula
            .pll_div2 = 1,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
            .pll_wbwdisable = 0,  // pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
            .pll_freq = 1,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
  };
8000709c:	4b 28       	lddpc	r8,80007164 <Motor_Init+0x114>
8000709e:	1a 9b       	mov	r11,sp
800070a0:	70 09       	ld.w	r9,r8[0x0]
800070a2:	50 09       	stdsp	sp[0x0],r9
800070a4:	70 19       	ld.w	r9,r8[0x4]
800070a6:	50 19       	stdsp	sp[0x4],r9
800070a8:	70 29       	ld.w	r9,r8[0x8]
800070aa:	50 29       	stdsp	sp[0x8],r9
800070ac:	70 39       	ld.w	r9,r8[0xc]
800070ae:	50 39       	stdsp	sp[0xc],r9
800070b0:	70 48       	ld.w	r8,r8[0x10]
800070b2:	50 48       	stdsp	sp[0x10],r8
  // Switch main clock to Osc0.
//  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

  /* Setup PLL0 on Osc0, mul=7 ,no divisor, lockcount=16, ie. (16Mhzx7)/(div2) = 56MHz output */
  scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
800070b4:	0e 9c       	mov	r12,r7
800070b6:	f0 1f 00 2d 	mcall	80007168 <Motor_Init+0x118>

  /* Enable PLL0 */
  scif_pll_enable(SCIF_PLL0);
800070ba:	0e 9c       	mov	r12,r7
800070bc:	f0 1f 00 2c 	mcall	8000716c <Motor_Init+0x11c>

  /* Wait for PLL0 locked */
  scif_wait_for_pll_locked(SCIF_PLL0) ;
800070c0:	0e 9c       	mov	r12,r7
800070c2:	f0 1f 00 2c 	mcall	80007170 <Motor_Init+0x120>
}
static void pwm_start_gc(void)
{
  scif_gc_setup(AVR32_SCIF_GCLK_PWM,
800070c6:	0e 99       	mov	r9,r7
800070c8:	0e 9a       	mov	r10,r7
800070ca:	30 5b       	mov	r11,5
800070cc:	30 4c       	mov	r12,4
800070ce:	f0 1f 00 2a 	mcall	80007174 <Motor_Init+0x124>
//   scif_gc_setup(  AVR32_SCIF_GCLK_PWM,
// 				  SCIF_GCCTRL_OSC0,
// 				  AVR32_SCIF_GC_NO_DIV_CLOCK,
// 				  0);
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_PWM);
800070d2:	30 4c       	mov	r12,4
800070d4:	f0 1f 00 29 	mcall	80007178 <Motor_Init+0x128>
	
// 	gpio_enable_module_pin(EXAMPLE_PWM_L_PIN, EXAMPLE_PWM_L_FUNCTION);
// 	gpio_enable_module_pin(EXAMPLE_PWM_H_PIN, EXAMPLE_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(AVR32_PIN_PB10, AVR32_PWM_PWMH_1_1_FUNCTION); //PWM1 Low
	gpio_enable_module_pin(ML_PWM_H_PIN, ML_PWM_H_FUNCTION);
800070d8:	30 2b       	mov	r11,2
800070da:	32 bc       	mov	r12,43
800070dc:	f0 1f 00 28 	mcall	8000717c <Motor_Init+0x12c>
	gpio_enable_module_pin(MR_PWM_H_PIN, MR_PWM_H_FUNCTION); //PWM1 Low
800070e0:	30 2b       	mov	r11,2
800070e2:	32 dc       	mov	r12,45
800070e4:	f0 1f 00 26 	mcall	8000717c <Motor_Init+0x12c>
	//gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION);
	// PWM controller configuration.
	pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
800070e8:	4a 6c       	lddpc	r12,80007180 <Motor_Init+0x130>
800070ea:	99 17       	st.w	r12[0x4],r7
	pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
800070ec:	99 07       	st.w	r12[0x0],r7
	pwm_opt.prea = AVR32_PWM_PREA_CCK;
800070ee:	99 37       	st.w	r12[0xc],r7
	pwm_opt.preb = AVR32_PWM_PREB_CCK;
800070f0:	99 27       	st.w	r12[0x8],r7
	
	pwm_opt.fault_detection_activated = false;
800070f2:	f9 67 00 14 	st.b	r12[20],r7
	pwm_opt.sync_channel_activated    = true;
800070f6:	30 18       	mov	r8,1
800070f8:	f9 68 00 15 	st.b	r12[21],r8
	pwm_opt.sync_update_channel_mode  = PWM_SYNC_UPDATE_MANUAL_WRITE_MANUAL_UPDATE;
800070fc:	f9 67 00 16 	st.b	r12[22],r7
	pwm_opt.sync_channel_select[0]    = false;
80007100:	f9 67 00 17 	st.b	r12[23],r7
	pwm_opt.sync_channel_select[1]    = false;
80007104:	f9 67 00 18 	st.b	r12[24],r7
	pwm_opt.sync_channel_select[2]    = false;
80007108:	f9 67 00 19 	st.b	r12[25],r7
	pwm_opt.sync_channel_select[3]    = false;
8000710c:	f9 67 00 1a 	st.b	r12[26],r7
	pwm_opt.cksel                     = PWM_CKSEL_GCLK;
80007110:	30 16       	mov	r6,1
80007112:	99 46       	st.w	r12[0x10],r6
	pwm_init(&pwm_opt);
80007114:	f0 1f 00 1c 	mcall	80007184 <Motor_Init+0x134>
	
	// Update the period
	pwm_update_period_value(10);
80007118:	30 ac       	mov	r12,10
8000711a:	f0 1f 00 1c 	mcall	80007188 <Motor_Init+0x138>
	pwm_channel.CMR.dte   = 0;        // Enable Deadtime for complementary Mode
	pwm_channel.CMR.dthi  = 0;        // Deadtime Inverted on PWMH
	pwm_channel.CMR.dtli  = 0;        // Deadtime Not Inverted on PWML
	pwm_channel.CMR.ces   = 0;        // 0/1 Channel Event at the End of PWM Period
	pwm_channel.CMR.calg  = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
	pwm_channel.CMR.cpol  = PWM_POLARITY_HIGH;            // Channel polarity.
8000711e:	40 58       	lddsp	r8,sp[0x14]
80007120:	e4 18 ff f8 	andh	r8,0xfff8
80007124:	e0 18 fa ff 	andl	r8,0xfaff
80007128:	f1 d6 d1 21 	bfins	r8,r6,0x9,0x1
	pwm_channel.CMR.cpre  = AVR32_PWM_CPRE_CCK;           // Channel prescaler.
8000712c:	f1 d7 d0 04 	bfins	r8,r7,0x0,0x4
80007130:	50 58       	stdsp	sp[0x14],r8
	pwm_channel.cdty      = 50;       // Channel duty cycle, should be < CPRD.
80007132:	33 28       	mov	r8,50
80007134:	50 68       	stdsp	sp[0x18],r8
	pwm_channel.cprd      = 200;       // Channel period.
80007136:	e0 68 00 c8 	mov	r8,200
8000713a:	50 88       	stdsp	sp[0x20],r8
	
/*	channel_id = M0_PWM_CHANNEL_ID;*/
	pwm_channel_init(ML_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
8000713c:	fa c7 ff ec 	sub	r7,sp,-20
80007140:	0e 9b       	mov	r11,r7
80007142:	0c 9c       	mov	r12,r6
80007144:	f0 1f 00 12 	mcall	8000718c <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
/*	channel_id = M1_PWM_CHANNEL_ID; */
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80007148:	0e 9b       	mov	r11,r7
8000714a:	30 2c       	mov	r12,2
8000714c:	f0 1f 00 10 	mcall	8000718c <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
80007150:	f0 1f 00 10 	mcall	80007190 <Motor_Init+0x140>
}
80007154:	2f 3d       	sub	sp,-52
80007156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000715a:	00 00       	add	r0,r0
8000715c:	80 00       	ld.sh	r0,r0[0x0]
8000715e:	32 2a       	mov	r10,34
80007160:	00 00       	add	r0,r0
80007162:	07 a8       	ld.ub	r8,r3[0x2]
80007164:	80 00       	ld.sh	r0,r0[0x0]
80007166:	83 3c       	st.w	r1[0xc],r12
80007168:	80 00       	ld.sh	r0,r0[0x0]
8000716a:	37 34       	mov	r4,115
8000716c:	80 00       	ld.sh	r0,r0[0x0]
8000716e:	36 f0       	mov	r0,111
80007170:	80 00       	ld.sh	r0,r0[0x0]
80007172:	35 f6       	mov	r6,95
80007174:	80 00       	ld.sh	r0,r0[0x0]
80007176:	36 48       	mov	r8,100
80007178:	80 00       	ld.sh	r0,r0[0x0]
8000717a:	36 cc       	mov	r12,108
8000717c:	80 00       	ld.sh	r0,r0[0x0]
8000717e:	31 30       	mov	r0,19
80007180:	00 00       	add	r0,r0
80007182:	07 8c       	ld.ub	r12,r3[0x0]
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	34 e0       	mov	r0,78
80007188:	80 00       	ld.sh	r0,r0[0x0]
8000718a:	34 d6       	mov	r6,77
8000718c:	80 00       	ld.sh	r0,r0[0x0]
8000718e:	34 74       	mov	r4,71
80007190:	80 00       	ld.sh	r0,r0[0x0]
80007192:	6f 18       	ld.w	r8,r7[0x44]

80007194 <FIFO_Init>:
	FIFO_Init();
	Enable_global_interrupt();
	
}
void FIFO_Init()
{
80007194:	d4 01       	pushm	lr
	//Disable both outputs
	FIFO_0_nOE_SET
80007196:	31 cc       	mov	r12,28
80007198:	f0 1f 00 97 	mcall	800073f4 <FIFO_Init+0x260>
	FIFO_1_nOE_SET
8000719c:	31 bc       	mov	r12,27
8000719e:	f0 1f 00 96 	mcall	800073f4 <FIFO_Init+0x260>
	
	//Reset Buffer 0
	FIFO_0_WRST_CLR;
800071a2:	31 5c       	mov	r12,21
800071a4:	f0 1f 00 95 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_0_RCLK_CLR;
800071a8:	31 3c       	mov	r12,19
800071aa:	f0 1f 00 94 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
800071ae:	30 fc       	mov	r12,15
800071b0:	f0 1f 00 91 	mcall	800073f4 <FIFO_Init+0x260>
	FIFO_0_WEN_CLR;
800071b4:	31 4c       	mov	r12,20
800071b6:	f0 1f 00 91 	mcall	800073f8 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800071ba:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800071be:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800071c2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800071c6:	14 38       	cp.w	r8,r10
800071c8:	e0 88 00 09 	brls	800071da <FIFO_Init+0x46>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800071cc:	12 38       	cp.w	r8,r9
800071ce:	fe 98 ff fa 	brls	800071c2 <FIFO_Init+0x2e>
800071d2:	12 3a       	cp.w	r10,r9
800071d4:	e0 83 00 ac 	brlo	8000732c <FIFO_Init+0x198>
800071d8:	cf 5b       	rjmp	800071c2 <FIFO_Init+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800071da:	12 38       	cp.w	r8,r9
800071dc:	e0 8b 00 a8 	brhi	8000732c <FIFO_Init+0x198>
800071e0:	12 3a       	cp.w	r10,r9
800071e2:	e0 83 00 a5 	brlo	8000732c <FIFO_Init+0x198>
800071e6:	ce eb       	rjmp	800071c2 <FIFO_Init+0x2e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800071e8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800071ec:	14 38       	cp.w	r8,r10
800071ee:	e0 88 00 09 	brls	80007200 <FIFO_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800071f2:	12 38       	cp.w	r8,r9
800071f4:	fe 98 ff fa 	brls	800071e8 <FIFO_Init+0x54>
800071f8:	12 3a       	cp.w	r10,r9
800071fa:	e0 83 00 a1 	brlo	8000733c <FIFO_Init+0x1a8>
800071fe:	cf 5b       	rjmp	800071e8 <FIFO_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007200:	12 38       	cp.w	r8,r9
80007202:	e0 8b 00 9d 	brhi	8000733c <FIFO_Init+0x1a8>
80007206:	12 3a       	cp.w	r10,r9
80007208:	e0 83 00 9a 	brlo	8000733c <FIFO_Init+0x1a8>
8000720c:	ce eb       	rjmp	800071e8 <FIFO_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000720e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007212:	14 38       	cp.w	r8,r10
80007214:	e0 88 00 09 	brls	80007226 <FIFO_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007218:	12 38       	cp.w	r8,r9
8000721a:	fe 98 ff fa 	brls	8000720e <FIFO_Init+0x7a>
8000721e:	12 3a       	cp.w	r10,r9
80007220:	e0 83 00 99 	brlo	80007352 <FIFO_Init+0x1be>
80007224:	cf 5b       	rjmp	8000720e <FIFO_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007226:	12 38       	cp.w	r8,r9
80007228:	e0 8b 00 95 	brhi	80007352 <FIFO_Init+0x1be>
8000722c:	12 3a       	cp.w	r10,r9
8000722e:	e0 83 00 92 	brlo	80007352 <FIFO_Init+0x1be>
80007232:	ce eb       	rjmp	8000720e <FIFO_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007234:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007238:	14 38       	cp.w	r8,r10
8000723a:	e0 88 00 09 	brls	8000724c <FIFO_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000723e:	12 38       	cp.w	r8,r9
80007240:	fe 98 ff fa 	brls	80007234 <FIFO_Init+0xa0>
80007244:	12 3a       	cp.w	r10,r9
80007246:	e0 83 00 8e 	brlo	80007362 <FIFO_Init+0x1ce>
8000724a:	cf 5b       	rjmp	80007234 <FIFO_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000724c:	12 38       	cp.w	r8,r9
8000724e:	e0 8b 00 8a 	brhi	80007362 <FIFO_Init+0x1ce>
80007252:	12 3a       	cp.w	r10,r9
80007254:	e0 83 00 87 	brlo	80007362 <FIFO_Init+0x1ce>
80007258:	ce eb       	rjmp	80007234 <FIFO_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000725a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000725e:	14 38       	cp.w	r8,r10
80007260:	e0 88 00 09 	brls	80007272 <FIFO_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007264:	12 38       	cp.w	r8,r9
80007266:	fe 98 ff fa 	brls	8000725a <FIFO_Init+0xc6>
8000726a:	12 3a       	cp.w	r10,r9
8000726c:	e0 83 00 86 	brlo	80007378 <FIFO_Init+0x1e4>
80007270:	cf 5b       	rjmp	8000725a <FIFO_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007272:	12 38       	cp.w	r8,r9
80007274:	e0 8b 00 82 	brhi	80007378 <FIFO_Init+0x1e4>
80007278:	12 3a       	cp.w	r10,r9
8000727a:	c7 f3       	brcs	80007378 <FIFO_Init+0x1e4>
8000727c:	ce fb       	rjmp	8000725a <FIFO_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000727e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007282:	14 38       	cp.w	r8,r10
80007284:	e0 88 00 09 	brls	80007296 <FIFO_Init+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007288:	12 38       	cp.w	r8,r9
8000728a:	fe 98 ff fa 	brls	8000727e <FIFO_Init+0xea>
8000728e:	12 3a       	cp.w	r10,r9
80007290:	e0 83 00 88 	brlo	800073a0 <FIFO_Init+0x20c>
80007294:	cf 5b       	rjmp	8000727e <FIFO_Init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007296:	12 38       	cp.w	r8,r9
80007298:	e0 8b 00 84 	brhi	800073a0 <FIFO_Init+0x20c>
8000729c:	12 3a       	cp.w	r10,r9
8000729e:	e0 83 00 81 	brlo	800073a0 <FIFO_Init+0x20c>
800072a2:	ce eb       	rjmp	8000727e <FIFO_Init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800072a4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800072a8:	14 38       	cp.w	r8,r10
800072aa:	e0 88 00 08 	brls	800072ba <FIFO_Init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800072ae:	12 38       	cp.w	r8,r9
800072b0:	fe 98 ff fa 	brls	800072a4 <FIFO_Init+0x110>
800072b4:	12 3a       	cp.w	r10,r9
800072b6:	c7 d3       	brcs	800073b0 <FIFO_Init+0x21c>
800072b8:	cf 6b       	rjmp	800072a4 <FIFO_Init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800072ba:	12 38       	cp.w	r8,r9
800072bc:	e0 8b 00 7a 	brhi	800073b0 <FIFO_Init+0x21c>
800072c0:	12 3a       	cp.w	r10,r9
800072c2:	c7 73       	brcs	800073b0 <FIFO_Init+0x21c>
800072c4:	cf 0b       	rjmp	800072a4 <FIFO_Init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800072c6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800072ca:	14 38       	cp.w	r8,r10
800072cc:	e0 88 00 08 	brls	800072dc <FIFO_Init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800072d0:	12 38       	cp.w	r8,r9
800072d2:	fe 98 ff fa 	brls	800072c6 <FIFO_Init+0x132>
800072d6:	12 3a       	cp.w	r10,r9
800072d8:	c7 73       	brcs	800073c6 <FIFO_Init+0x232>
800072da:	cf 6b       	rjmp	800072c6 <FIFO_Init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800072dc:	12 38       	cp.w	r8,r9
800072de:	e0 8b 00 74 	brhi	800073c6 <FIFO_Init+0x232>
800072e2:	12 3a       	cp.w	r10,r9
800072e4:	c7 13       	brcs	800073c6 <FIFO_Init+0x232>
800072e6:	cf 0b       	rjmp	800072c6 <FIFO_Init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800072e8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800072ec:	14 38       	cp.w	r8,r10
800072ee:	e0 88 00 08 	brls	800072fe <FIFO_Init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800072f2:	12 38       	cp.w	r8,r9
800072f4:	fe 98 ff fa 	brls	800072e8 <FIFO_Init+0x154>
800072f8:	12 3a       	cp.w	r10,r9
800072fa:	c6 e3       	brcs	800073d6 <FIFO_Init+0x242>
800072fc:	cf 6b       	rjmp	800072e8 <FIFO_Init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800072fe:	12 38       	cp.w	r8,r9
80007300:	e0 8b 00 6b 	brhi	800073d6 <FIFO_Init+0x242>
80007304:	12 3a       	cp.w	r10,r9
80007306:	c6 83       	brcs	800073d6 <FIFO_Init+0x242>
80007308:	cf 0b       	rjmp	800072e8 <FIFO_Init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000730a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000730e:	14 38       	cp.w	r8,r10
80007310:	e0 88 00 08 	brls	80007320 <FIFO_Init+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007314:	12 38       	cp.w	r8,r9
80007316:	fe 98 ff fa 	brls	8000730a <FIFO_Init+0x176>
8000731a:	12 3a       	cp.w	r10,r9
8000731c:	c6 83       	brcs	800073ec <FIFO_Init+0x258>
8000731e:	cf 6b       	rjmp	8000730a <FIFO_Init+0x176>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007320:	12 38       	cp.w	r8,r9
80007322:	e0 8b 00 65 	brhi	800073ec <FIFO_Init+0x258>
80007326:	12 3a       	cp.w	r10,r9
80007328:	c6 23       	brcs	800073ec <FIFO_Init+0x258>
8000732a:	cf 0b       	rjmp	8000730a <FIFO_Init+0x176>
	delay_us(10);
	FIFO_0_RCLK_SET;
8000732c:	31 3c       	mov	r12,19
8000732e:	f0 1f 00 32 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007332:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007336:	f0 ca ff 60 	sub	r10,r8,-160
8000733a:	c5 7b       	rjmp	800071e8 <FIFO_Init+0x54>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000733c:	31 3c       	mov	r12,19
8000733e:	f0 1f 00 2f 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_0_nRRST_CLR;
80007342:	30 fc       	mov	r12,15
80007344:	f0 1f 00 2d 	mcall	800073f8 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007348:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000734c:	f0 ca ff 60 	sub	r10,r8,-160
80007350:	c5 fb       	rjmp	8000720e <FIFO_Init+0x7a>
	delay_us(10);
	FIFO_0_RCLK_SET;
80007352:	31 3c       	mov	r12,19
80007354:	f0 1f 00 28 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007358:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000735c:	f0 ca ff 60 	sub	r10,r8,-160
80007360:	c6 ab       	rjmp	80007234 <FIFO_Init+0xa0>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80007362:	31 3c       	mov	r12,19
80007364:	f0 1f 00 25 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
80007368:	30 fc       	mov	r12,15
8000736a:	f0 1f 00 23 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000736e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007372:	f0 ca ff 60 	sub	r10,r8,-160
80007376:	c7 2b       	rjmp	8000725a <FIFO_Init+0xc6>
	delay_us(10);
	FIFO_0_WRST_SET;
80007378:	31 5c       	mov	r12,21
8000737a:	f0 1f 00 1f 	mcall	800073f4 <FIFO_Init+0x260>
	
	//Reset Buffer 1
	FIFO_1_WRST_CLR;
8000737e:	31 9c       	mov	r12,25
80007380:	f0 1f 00 1e 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_1_RCLK_CLR;
80007384:	31 7c       	mov	r12,23
80007386:	f0 1f 00 1d 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
8000738a:	31 6c       	mov	r12,22
8000738c:	f0 1f 00 1a 	mcall	800073f4 <FIFO_Init+0x260>
	FIFO_1_WEN_CLR;
80007390:	31 8c       	mov	r12,24
80007392:	f0 1f 00 1a 	mcall	800073f8 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007396:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000739a:	f0 ca ff 60 	sub	r10,r8,-160
8000739e:	c7 0b       	rjmp	8000727e <FIFO_Init+0xea>
	delay_us(10);
	FIFO_1_RCLK_SET;
800073a0:	31 7c       	mov	r12,23
800073a2:	f0 1f 00 15 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800073a6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073aa:	f0 ca ff 60 	sub	r10,r8,-160
800073ae:	c7 bb       	rjmp	800072a4 <FIFO_Init+0x110>
	delay_us(10);
	FIFO_0_RCLK_CLR;
800073b0:	31 3c       	mov	r12,19
800073b2:	f0 1f 00 12 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_1_nRRST_CLR;
800073b6:	31 6c       	mov	r12,22
800073b8:	f0 1f 00 10 	mcall	800073f8 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800073bc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073c0:	f0 ca ff 60 	sub	r10,r8,-160
800073c4:	c8 1b       	rjmp	800072c6 <FIFO_Init+0x132>
	delay_us(10);
	FIFO_1_RCLK_SET;
800073c6:	31 7c       	mov	r12,23
800073c8:	f0 1f 00 0b 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800073cc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073d0:	f0 ca ff 60 	sub	r10,r8,-160
800073d4:	c8 ab       	rjmp	800072e8 <FIFO_Init+0x154>
	delay_us(10);
	FIFO_1_RCLK_CLR;
800073d6:	31 7c       	mov	r12,23
800073d8:	f0 1f 00 08 	mcall	800073f8 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
800073dc:	31 6c       	mov	r12,22
800073de:	f0 1f 00 06 	mcall	800073f4 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800073e2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073e6:	f0 ca ff 60 	sub	r10,r8,-160
800073ea:	c9 0b       	rjmp	8000730a <FIFO_Init+0x176>
	delay_us(10);
	FIFO_1_WRST_SET;
800073ec:	31 9c       	mov	r12,25
800073ee:	f0 1f 00 02 	mcall	800073f4 <FIFO_Init+0x260>
}
800073f2:	d8 02       	popm	pc
800073f4:	80 00       	ld.sh	r0,r0[0x0]
800073f6:	32 0e       	mov	lr,32
800073f8:	80 00       	ld.sh	r0,r0[0x0]
800073fa:	32 2a       	mov	r10,34

800073fc <VSYNC0_Handler>:
// /*#include "CustomDevices/MotorDriver.h"*/
// SDCard
// #include "CustomDevices/SD_Card.h"

__attribute__((__interrupt__)) static void VSYNC0_Handler (void)
{
800073fc:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC0 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
800073fe:	30 4b       	mov	r11,4
80007400:	fe 7c 14 00 	mov	r12,-60416
80007404:	f0 1f 00 18 	mcall	80007464 <VSYNC0_Handler+0x68>
	//VSYNC_0_DISABLE_INTERRUPT;
	switch(OV7670_Status.VSYNC0_State)
80007408:	49 88       	lddpc	r8,80007468 <VSYNC0_Handler+0x6c>
8000740a:	11 d8       	ld.ub	r8,r8[0x5]
8000740c:	30 29       	mov	r9,2
8000740e:	f2 08 18 00 	cp.b	r8,r9
80007412:	c1 00       	breq	80007432 <VSYNC0_Handler+0x36>
80007414:	30 39       	mov	r9,3
80007416:	f2 08 18 00 	cp.b	r8,r9
8000741a:	c1 30       	breq	80007440 <VSYNC0_Handler+0x44>
8000741c:	30 19       	mov	r9,1
8000741e:	f2 08 18 00 	cp.b	r8,r9
80007422:	c1 31       	brne	80007448 <VSYNC0_Handler+0x4c>
	{
		case(TAKE_PHOTO):
			FIFO_0_WEN_SET;
80007424:	31 4c       	mov	r12,20
80007426:	f0 1f 00 12 	mcall	8000746c <VSYNC0_Handler+0x70>
			OV7670_Status.VSYNC0_State = TAKING_PHOTO;
8000742a:	30 29       	mov	r9,2
8000742c:	48 f8       	lddpc	r8,80007468 <VSYNC0_Handler+0x6c>
8000742e:	b0 d9       	st.b	r8[0x5],r9
			break;
80007430:	c1 78       	rjmp	8000745e <VSYNC0_Handler+0x62>
			
		case(TAKING_PHOTO):
			FIFO_0_WEN_CLR;
80007432:	31 4c       	mov	r12,20
80007434:	f0 1f 00 0f 	mcall	80007470 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = TAKEN_PHOTO;
80007438:	30 39       	mov	r9,3
8000743a:	48 c8       	lddpc	r8,80007468 <VSYNC0_Handler+0x6c>
8000743c:	b0 d9       	st.b	r8[0x5],r9
			break;
8000743e:	c1 08       	rjmp	8000745e <VSYNC0_Handler+0x62>
		
		case (TAKEN_PHOTO):
			FIFO_0_WEN_CLR;
80007440:	31 4c       	mov	r12,20
80007442:	f0 1f 00 0c 	mcall	80007470 <VSYNC0_Handler+0x74>
			break;
80007446:	c0 c8       	rjmp	8000745e <VSYNC0_Handler+0x62>
			
		case(IDLE):
		default:
			VSYNC_0_DISABLE_INTERRUPT;
80007448:	30 4b       	mov	r11,4
8000744a:	fe 7c 14 00 	mov	r12,-60416
8000744e:	f0 1f 00 0a 	mcall	80007474 <VSYNC0_Handler+0x78>
			FIFO_0_WEN_CLR;
80007452:	31 4c       	mov	r12,20
80007454:	f0 1f 00 07 	mcall	80007470 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = IDLE;
80007458:	30 09       	mov	r9,0
8000745a:	48 48       	lddpc	r8,80007468 <VSYNC0_Handler+0x6c>
8000745c:	b0 d9       	st.b	r8[0x5],r9
			break;
	}
}
8000745e:	d4 02       	popm	lr
80007460:	d6 03       	rete
80007462:	00 00       	add	r0,r0
80007464:	80 00       	ld.sh	r0,r0[0x0]
80007466:	30 34       	mov	r4,3
80007468:	00 00       	add	r0,r0
8000746a:	07 62       	ld.uh	r2,--r3
8000746c:	80 00       	ld.sh	r0,r0[0x0]
8000746e:	32 0e       	mov	lr,32
80007470:	80 00       	ld.sh	r0,r0[0x0]
80007472:	32 2a       	mov	r10,34
80007474:	80 00       	ld.sh	r0,r0[0x0]
80007476:	30 4a       	mov	r10,4

80007478 <VSYNC1_Handler>:

__attribute__((__interrupt__)) static void VSYNC1_Handler (void)
{
80007478:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC1 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
8000747a:	30 1b       	mov	r11,1
8000747c:	fe 7c 14 00 	mov	r12,-60416
80007480:	f0 1f 00 18 	mcall	800074e0 <VSYNC1_Handler+0x68>
	//VSYNC_1_DISABLE_INTERRUPT;
		switch(OV7670_Status.VSYNC1_State)
80007484:	49 88       	lddpc	r8,800074e4 <VSYNC1_Handler+0x6c>
80007486:	11 e8       	ld.ub	r8,r8[0x6]
80007488:	30 29       	mov	r9,2
8000748a:	f2 08 18 00 	cp.b	r8,r9
8000748e:	c1 00       	breq	800074ae <VSYNC1_Handler+0x36>
80007490:	30 39       	mov	r9,3
80007492:	f2 08 18 00 	cp.b	r8,r9
80007496:	c1 30       	breq	800074bc <VSYNC1_Handler+0x44>
80007498:	30 19       	mov	r9,1
8000749a:	f2 08 18 00 	cp.b	r8,r9
8000749e:	c1 31       	brne	800074c4 <VSYNC1_Handler+0x4c>
		{
			case(TAKE_PHOTO):
			FIFO_1_WEN_SET;
800074a0:	31 8c       	mov	r12,24
800074a2:	f0 1f 00 12 	mcall	800074e8 <VSYNC1_Handler+0x70>
			OV7670_Status.VSYNC1_State = TAKING_PHOTO;
800074a6:	30 29       	mov	r9,2
800074a8:	48 f8       	lddpc	r8,800074e4 <VSYNC1_Handler+0x6c>
800074aa:	b0 e9       	st.b	r8[0x6],r9
			break;
800074ac:	c1 78       	rjmp	800074da <VSYNC1_Handler+0x62>
			
			case(TAKING_PHOTO):
			FIFO_1_WEN_CLR;
800074ae:	31 8c       	mov	r12,24
800074b0:	f0 1f 00 0f 	mcall	800074ec <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = TAKEN_PHOTO;
800074b4:	30 39       	mov	r9,3
800074b6:	48 c8       	lddpc	r8,800074e4 <VSYNC1_Handler+0x6c>
800074b8:	b0 e9       	st.b	r8[0x6],r9
			break;
800074ba:	c1 08       	rjmp	800074da <VSYNC1_Handler+0x62>
			
			case (TAKEN_PHOTO):
			FIFO_1_WEN_CLR;
800074bc:	31 8c       	mov	r12,24
800074be:	f0 1f 00 0c 	mcall	800074ec <VSYNC1_Handler+0x74>
			break;
800074c2:	c0 c8       	rjmp	800074da <VSYNC1_Handler+0x62>
			
			case(IDLE):
			default:
			VSYNC_1_DISABLE_INTERRUPT;
800074c4:	30 1b       	mov	r11,1
800074c6:	fe 7c 14 00 	mov	r12,-60416
800074ca:	f0 1f 00 0a 	mcall	800074f0 <VSYNC1_Handler+0x78>
			FIFO_1_WEN_CLR;
800074ce:	31 8c       	mov	r12,24
800074d0:	f0 1f 00 07 	mcall	800074ec <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = IDLE;
800074d4:	30 09       	mov	r9,0
800074d6:	48 48       	lddpc	r8,800074e4 <VSYNC1_Handler+0x6c>
800074d8:	b0 e9       	st.b	r8[0x6],r9
			break;
		}
}
800074da:	d4 02       	popm	lr
800074dc:	d6 03       	rete
800074de:	00 00       	add	r0,r0
800074e0:	80 00       	ld.sh	r0,r0[0x0]
800074e2:	30 34       	mov	r4,3
800074e4:	00 00       	add	r0,r0
800074e6:	07 62       	ld.uh	r2,--r3
800074e8:	80 00       	ld.sh	r0,r0[0x0]
800074ea:	32 0e       	mov	lr,32
800074ec:	80 00       	ld.sh	r0,r0[0x0]
800074ee:	32 2a       	mov	r10,34
800074f0:	80 00       	ld.sh	r0,r0[0x0]
800074f2:	30 4a       	mov	r10,4

800074f4 <Write_Reg>:
unsigned char Write_Reg(unsigned char Register, unsigned char Data)
{
800074f4:	d4 01       	pushm	lr
800074f6:	20 1d       	sub	sp,4
	/*	I2C Traffic Generated:
	 *	S | OV_7670 + W | A | RegID | A | Data | A | P |
	 */
	uint8_t Buff[2] = {Register, Data};
800074f8:	ba 8c       	st.b	sp[0x0],r12
800074fa:	ba 9b       	st.b	sp[0x1],r11
	int status = twim_write(&AVR32_TWIM0, &Buff, 2, OV7670_ADDR, false);
800074fc:	30 08       	mov	r8,0
800074fe:	32 19       	mov	r9,33
80007500:	30 2a       	mov	r10,2
80007502:	1a 9b       	mov	r11,sp
80007504:	fe 7c 38 00 	mov	r12,-51200
80007508:	f0 1f 00 03 	mcall	80007514 <Write_Reg+0x20>
	return status;
}
8000750c:	5c 5c       	castu.b	r12
8000750e:	2f fd       	sub	sp,-4
80007510:	d8 02       	popm	pc
80007512:	00 00       	add	r0,r0
80007514:	80 00       	ld.sh	r0,r0[0x0]
80007516:	3c 74       	mov	r4,-57

80007518 <OV7670_Init>:
	
	return status;
	
}
void OV7670_Init()
{
80007518:	eb cd 40 c0 	pushm	r6-r7,lr
8000751c:	20 2d       	sub	sp,8
	
	//Check Cameras Exist
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
8000751e:	30 4c       	mov	r12,4
80007520:	f0 1f 00 95 	mcall	80007774 <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80007524:	32 1b       	mov	r11,33
80007526:	fe 7c 38 00 	mov	r12,-51200
8000752a:	f0 1f 00 94 	mcall	80007778 <OV7670_Init+0x260>
8000752e:	c0 61       	brne	8000753a <OV7670_Init+0x22>
		OV7670_Status.Camera_0_Found = true;
80007530:	30 19       	mov	r9,1
80007532:	fe f8 02 4a 	ld.w	r8,pc[586]
80007536:	b0 99       	st.b	r8[0x1],r9
80007538:	c0 58       	rjmp	80007542 <OV7670_Init+0x2a>
	else
		OV7670_Status.Camera_0_Found = false;
8000753a:	30 09       	mov	r9,0
8000753c:	fe f8 02 40 	ld.w	r8,pc[576]
80007540:	b0 99       	st.b	r8[0x1],r9
		
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80007542:	30 5c       	mov	r12,5
80007544:	f0 1f 00 8c 	mcall	80007774 <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80007548:	32 1b       	mov	r11,33
8000754a:	fe 7c 38 00 	mov	r12,-51200
8000754e:	f0 1f 00 8b 	mcall	80007778 <OV7670_Init+0x260>
80007552:	c0 61       	brne	8000755e <OV7670_Init+0x46>
		OV7670_Status.Camera_1_Found = true;
80007554:	30 19       	mov	r9,1
80007556:	fe f8 02 26 	ld.w	r8,pc[550]
8000755a:	b0 a9       	st.b	r8[0x2],r9
8000755c:	c0 58       	rjmp	80007566 <OV7670_Init+0x4e>
	else
		OV7670_Status.Camera_1_Found = false;
8000755e:	30 09       	mov	r9,0
80007560:	fe f8 02 1c 	ld.w	r8,pc[540]
80007564:	b0 a9       	st.b	r8[0x2],r9
		
	
	//Iniialise Cameras
	if(OV7670_Status.Camera_0_Found)
80007566:	fe f8 02 16 	ld.w	r8,pc[534]
8000756a:	11 99       	ld.ub	r9,r8[0x1]
8000756c:	30 08       	mov	r8,0
8000756e:	f0 09 18 00 	cp.b	r9,r8
80007572:	c5 40       	breq	8000761a <OV7670_Init+0x102>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80007574:	30 4c       	mov	r12,4
80007576:	f0 1f 00 80 	mcall	80007774 <OV7670_Init+0x25c>
		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
8000757a:	e0 6b 00 80 	mov	r11,128
8000757e:	31 2c       	mov	r12,18
80007580:	f0 1f 00 80 	mcall	80007780 <OV7670_Init+0x268>
80007584:	c0 90       	breq	80007596 <OV7670_Init+0x7e>
		{
			print_dbg("\n\rCamera Reset Fail");
80007586:	fe fc 01 fe 	ld.w	r12,pc[510]
8000758a:	f0 1f 00 80 	mcall	80007788 <OV7670_Init+0x270>
			OV7670_Status.Camera_0_Error = true;
8000758e:	4f c8       	lddpc	r8,8000777c <OV7670_Init+0x264>
80007590:	30 19       	mov	r9,1
80007592:	b0 b9       	st.b	r8[0x3],r9
			OV7670_Status.Error = true;
80007594:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007596:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000759a:	e2 69 71 00 	mov	r9,160000
8000759e:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800075a2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800075a6:	14 38       	cp.w	r8,r10
800075a8:	e0 88 00 08 	brls	800075b8 <OV7670_Init+0xa0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800075ac:	12 38       	cp.w	r8,r9
800075ae:	fe 98 ff fa 	brls	800075a2 <OV7670_Init+0x8a>
800075b2:	12 3a       	cp.w	r10,r9
800075b4:	c0 53       	brcs	800075be <OV7670_Init+0xa6>
800075b6:	cf 6b       	rjmp	800075a2 <OV7670_Init+0x8a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800075b8:	12 38       	cp.w	r8,r9
800075ba:	e0 88 00 08 	brls	800075ca <OV7670_Init+0xb2>
800075be:	4f 46       	lddpc	r6,8000778c <OV7670_Init+0x274>
800075c0:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
800075c4:	ec c6 fe b1 	sub	r6,r6,-335
800075c8:	c0 48       	rjmp	800075d0 <OV7670_Init+0xb8>
800075ca:	12 3a       	cp.w	r10,r9
800075cc:	cf 93       	brcs	800075be <OV7670_Init+0xa6>
800075ce:	ce ab       	rjmp	800075a2 <OV7670_Init+0x8a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
800075d0:	0f 8b       	ld.ub	r11,r7[0x0]
800075d2:	ef 3c ff ff 	ld.ub	r12,r7[-1]
800075d6:	f0 1f 00 6b 	mcall	80007780 <OV7670_Init+0x268>
800075da:	c0 90       	breq	800075ec <OV7670_Init+0xd4>
			{
				print_dbg("\n\rCamera Initialise Fail");
800075dc:	4e dc       	lddpc	r12,80007790 <OV7670_Init+0x278>
800075de:	f0 1f 00 6b 	mcall	80007788 <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_0_Error = true;	
800075e2:	4e 78       	lddpc	r8,8000777c <OV7670_Init+0x264>
800075e4:	30 19       	mov	r9,1
800075e6:	b0 b9       	st.b	r8[0x3],r9
				OV7670_Status.Error = true;	
800075e8:	b0 89       	st.b	r8[0x0],r9
				break;
800075ea:	c1 88       	rjmp	8000761a <OV7670_Init+0x102>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800075ec:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800075f0:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800075f4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800075f8:	14 38       	cp.w	r8,r10
800075fa:	e0 88 00 09 	brls	8000760c <OV7670_Init+0xf4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800075fe:	12 38       	cp.w	r8,r9
80007600:	fe 98 ff fa 	brls	800075f4 <OV7670_Init+0xdc>
80007604:	12 3a       	cp.w	r10,r9
80007606:	e0 83 00 ae 	brlo	80007762 <OV7670_Init+0x24a>
8000760a:	cf 5b       	rjmp	800075f4 <OV7670_Init+0xdc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000760c:	12 38       	cp.w	r8,r9
8000760e:	e0 8b 00 aa 	brhi	80007762 <OV7670_Init+0x24a>
80007612:	12 3a       	cp.w	r10,r9
80007614:	e0 83 00 a7 	brlo	80007762 <OV7670_Init+0x24a>
80007618:	ce eb       	rjmp	800075f4 <OV7670_Init+0xdc>
			}
			delay_ms(1);
		}	
	}
	if(OV7670_Status.Camera_1_Found)
8000761a:	4d 98       	lddpc	r8,8000777c <OV7670_Init+0x264>
8000761c:	11 a9       	ld.ub	r9,r8[0x2]
8000761e:	30 08       	mov	r8,0
80007620:	f0 09 18 00 	cp.b	r9,r8
80007624:	c5 10       	breq	800076c6 <OV7670_Init+0x1ae>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80007626:	30 5c       	mov	r12,5
80007628:	f0 1f 00 53 	mcall	80007774 <OV7670_Init+0x25c>

		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
8000762c:	e0 6b 00 80 	mov	r11,128
80007630:	31 2c       	mov	r12,18
80007632:	f0 1f 00 54 	mcall	80007780 <OV7670_Init+0x268>
80007636:	c0 80       	breq	80007646 <OV7670_Init+0x12e>
		{
			print_dbg("\n\rCamera Reset Fail");
80007638:	4d 3c       	lddpc	r12,80007784 <OV7670_Init+0x26c>
8000763a:	f0 1f 00 54 	mcall	80007788 <OV7670_Init+0x270>
			OV7670_Status.Camera_1_Error = true;
8000763e:	4d 08       	lddpc	r8,8000777c <OV7670_Init+0x264>
80007640:	30 19       	mov	r9,1
80007642:	b0 c9       	st.b	r8[0x4],r9
			OV7670_Status.Error = true;
80007644:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007646:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000764a:	e2 69 71 00 	mov	r9,160000
8000764e:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007652:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007656:	14 38       	cp.w	r8,r10
80007658:	e0 88 00 08 	brls	80007668 <OV7670_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000765c:	12 38       	cp.w	r8,r9
8000765e:	fe 98 ff fa 	brls	80007652 <OV7670_Init+0x13a>
80007662:	12 3a       	cp.w	r10,r9
80007664:	c0 53       	brcs	8000766e <OV7670_Init+0x156>
80007666:	cf 6b       	rjmp	80007652 <OV7670_Init+0x13a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007668:	12 38       	cp.w	r8,r9
8000766a:	e0 88 00 08 	brls	8000767a <OV7670_Init+0x162>
8000766e:	4c 86       	lddpc	r6,8000778c <OV7670_Init+0x274>
80007670:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80007674:	ec c6 fe b1 	sub	r6,r6,-335
80007678:	c0 48       	rjmp	80007680 <OV7670_Init+0x168>
8000767a:	12 3a       	cp.w	r10,r9
8000767c:	cf 93       	brcs	8000766e <OV7670_Init+0x156>
8000767e:	ce ab       	rjmp	80007652 <OV7670_Init+0x13a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
80007680:	0f 8b       	ld.ub	r11,r7[0x0]
80007682:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80007686:	f0 1f 00 3f 	mcall	80007780 <OV7670_Init+0x268>
8000768a:	c0 90       	breq	8000769c <OV7670_Init+0x184>
			{
				print_dbg("\n\rCamera Initialise Fail");
8000768c:	4c 1c       	lddpc	r12,80007790 <OV7670_Init+0x278>
8000768e:	f0 1f 00 3f 	mcall	80007788 <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_1_Error = true;
80007692:	4b b8       	lddpc	r8,8000777c <OV7670_Init+0x264>
80007694:	30 19       	mov	r9,1
80007696:	b0 c9       	st.b	r8[0x4],r9
				OV7670_Status.Error = true;				
80007698:	b0 89       	st.b	r8[0x0],r9
				break;
8000769a:	c1 68       	rjmp	800076c6 <OV7670_Init+0x1ae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000769c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800076a0:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800076a4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800076a8:	14 38       	cp.w	r8,r10
800076aa:	e0 88 00 08 	brls	800076ba <OV7670_Init+0x1a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800076ae:	12 38       	cp.w	r8,r9
800076b0:	fe 98 ff fa 	brls	800076a4 <OV7670_Init+0x18c>
800076b4:	12 3a       	cp.w	r10,r9
800076b6:	c5 b3       	brcs	8000776c <OV7670_Init+0x254>
800076b8:	cf 6b       	rjmp	800076a4 <OV7670_Init+0x18c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800076ba:	12 38       	cp.w	r8,r9
800076bc:	e0 8b 00 58 	brhi	8000776c <OV7670_Init+0x254>
800076c0:	12 3a       	cp.w	r10,r9
800076c2:	c5 53       	brcs	8000776c <OV7670_Init+0x254>
800076c4:	cf 0b       	rjmp	800076a4 <OV7670_Init+0x18c>
			}
			delay_ms(1);
		}
	}
	PCA9542A_Chan_Sel(NO_SELECT);
800076c6:	30 0c       	mov	r12,0
800076c8:	f0 1f 00 2b 	mcall	80007774 <OV7670_Init+0x25c>
	
	//Initialise VSYNC Interrupts
	eic_options_t eic_options;
	eic_options.eic_mode = EIC_MODE_EDGE_TRIGGERED;
800076cc:	30 08       	mov	r8,0
800076ce:	ba b8       	st.b	sp[0x3],r8
	eic_options.eic_edge = EIC_EDGE_FALLING_EDGE;
800076d0:	ba c8       	st.b	sp[0x4],r8
	eic_options.eic_async = EIC_SYNCH_MODE;
800076d2:	ba f8       	st.b	sp[0x7],r8
	eic_options.eic_line = VSYNC_1_LINE;
800076d4:	30 18       	mov	r8,1
800076d6:	ba a8       	st.b	sp[0x2],r8
	//eic_options.eic_line = VSYNC_0_LINE;
	
	Disable_global_interrupt();
800076d8:	d3 03       	ssrf	0x10
	gpio_enable_module_pin(VSYNC_1_PIN, VSYNC_1_FUNCTION);
800076da:	30 1b       	mov	r11,1
800076dc:	31 ac       	mov	r12,26
800076de:	f0 1f 00 2e 	mcall	80007794 <OV7670_Init+0x27c>
	gpio_enable_module_pin(VSYNC_0_PIN, VSYNC_0_FUNCTION);
800076e2:	30 1b       	mov	r11,1
800076e4:	30 ac       	mov	r12,10
800076e6:	f0 1f 00 2c 	mcall	80007794 <OV7670_Init+0x27c>
	
	gpio_enable_pin_pull_up(VSYNC_1_PIN); //Enable pull up as it is a low level interrupt
800076ea:	31 ac       	mov	r12,26
800076ec:	f0 1f 00 2b 	mcall	80007798 <OV7670_Init+0x280>
	gpio_enable_pin_pull_up(VSYNC_0_PIN);
800076f0:	30 ac       	mov	r12,10
800076f2:	f0 1f 00 2a 	mcall	80007798 <OV7670_Init+0x280>
	//Initialise EIC
	eic_init(&AVR32_EIC, &eic_options, 1);
800076f6:	fa c7 ff fe 	sub	r7,sp,-2
800076fa:	30 1a       	mov	r10,1
800076fc:	0e 9b       	mov	r11,r7
800076fe:	fe 7c 14 00 	mov	r12,-60416
80007702:	f0 1f 00 27 	mcall	8000779c <OV7670_Init+0x284>
	eic_options.eic_line = VSYNC_0_LINE;
80007706:	30 48       	mov	r8,4
80007708:	ba a8       	st.b	sp[0x2],r8
	eic_init(&AVR32_EIC, &eic_options, 1);
8000770a:	30 1a       	mov	r10,1
8000770c:	0e 9b       	mov	r11,r7
8000770e:	fe 7c 14 00 	mov	r12,-60416
80007712:	f0 1f 00 23 	mcall	8000779c <OV7670_Init+0x284>
	
	INTC_register_interrupt(&VSYNC1_Handler, AVR32_EIC_IRQ_1, AVR32_INTC_INT0);
80007716:	30 0a       	mov	r10,0
80007718:	e0 6b 01 e0 	mov	r11,480
8000771c:	4a 1c       	lddpc	r12,800077a0 <OV7670_Init+0x288>
8000771e:	f0 1f 00 22 	mcall	800077a4 <OV7670_Init+0x28c>
	INTC_register_interrupt(&VSYNC0_Handler, AVR32_EIC_IRQ_4, AVR32_INTC_INT0);
80007722:	30 0a       	mov	r10,0
80007724:	e0 6b 01 e3 	mov	r11,483
80007728:	4a 0c       	lddpc	r12,800077a8 <OV7670_Init+0x290>
8000772a:	f0 1f 00 1f 	mcall	800077a4 <OV7670_Init+0x28c>
	//Enable interrupt on VSYNC1
	eic_enable_line(&AVR32_EIC, VSYNC_1_LINE);
8000772e:	30 1b       	mov	r11,1
80007730:	fe 7c 14 00 	mov	r12,-60416
80007734:	f0 1f 00 1e 	mcall	800077ac <OV7670_Init+0x294>
	eic_enable_line(&AVR32_EIC, (VSYNC_0_LINE));
80007738:	30 4b       	mov	r11,4
8000773a:	fe 7c 14 00 	mov	r12,-60416
8000773e:	f0 1f 00 1c 	mcall	800077ac <OV7670_Init+0x294>
 	VSYNC_1_ENABLE_INTERRUPT;
80007742:	30 1b       	mov	r11,1
80007744:	fe 7c 14 00 	mov	r12,-60416
80007748:	f0 1f 00 1a 	mcall	800077b0 <OV7670_Init+0x298>
 	VSYNC_0_ENABLE_INTERRUPT;
8000774c:	30 4b       	mov	r11,4
8000774e:	fe 7c 14 00 	mov	r12,-60416
80007752:	f0 1f 00 18 	mcall	800077b0 <OV7670_Init+0x298>
	
	FIFO_Init();
80007756:	f0 1f 00 18 	mcall	800077b4 <OV7670_Init+0x29c>
	Enable_global_interrupt();
8000775a:	d5 03       	csrf	0x10
	
}
8000775c:	2f ed       	sub	sp,-8
8000775e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007762:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_0_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80007764:	0c 37       	cp.w	r7,r6
80007766:	fe 91 ff 35 	brne	800075d0 <OV7670_Init+0xb8>
8000776a:	c5 8b       	rjmp	8000761a <OV7670_Init+0x102>
8000776c:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_1_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
8000776e:	0c 37       	cp.w	r7,r6
80007770:	c8 81       	brne	80007680 <OV7670_Init+0x168>
80007772:	ca ab       	rjmp	800076c6 <OV7670_Init+0x1ae>
80007774:	80 00       	ld.sh	r0,r0[0x0]
80007776:	77 b8       	ld.w	r8,r11[0x6c]
80007778:	80 00       	ld.sh	r0,r0[0x0]
8000777a:	3d 28       	mov	r8,-46
8000777c:	00 00       	add	r0,r0
8000777e:	07 62       	ld.uh	r2,--r3
80007780:	80 00       	ld.sh	r0,r0[0x0]
80007782:	74 f4       	ld.w	r4,r10[0x3c]
80007784:	80 00       	ld.sh	r0,r0[0x0]
80007786:	83 70       	st.w	r1[0x1c],r0
80007788:	80 00       	ld.sh	r0,r0[0x0]
8000778a:	6c b0       	ld.w	r0,r6[0x2c]
8000778c:	80 00       	ld.sh	r0,r0[0x0]
8000778e:	83 9d       	st.w	r1[0x24],sp
80007790:	80 00       	ld.sh	r0,r0[0x0]
80007792:	83 84       	st.w	r1[0x20],r4
80007794:	80 00       	ld.sh	r0,r0[0x0]
80007796:	31 30       	mov	r0,19
80007798:	80 00       	ld.sh	r0,r0[0x0]
8000779a:	31 f4       	mov	r4,31
8000779c:	80 00       	ld.sh	r0,r0[0x0]
8000779e:	2f 50       	sub	r0,-11
800077a0:	80 00       	ld.sh	r0,r0[0x0]
800077a2:	74 78       	ld.w	r8,r10[0x1c]
800077a4:	80 00       	ld.sh	r0,r0[0x0]
800077a6:	32 48       	mov	r8,36
800077a8:	80 00       	ld.sh	r0,r0[0x0]
800077aa:	73 fc       	ld.w	r12,r9[0x7c]
800077ac:	80 00       	ld.sh	r0,r0[0x0]
800077ae:	30 20       	mov	r0,2
800077b0:	80 00       	ld.sh	r0,r0[0x0]
800077b2:	30 2a       	mov	r10,2
800077b4:	80 00       	ld.sh	r0,r0[0x0]
800077b6:	71 94       	ld.w	r4,r8[0x64]

800077b8 <PCA9542A_Chan_Sel>:
	return status;
}


void PCA9542A_Chan_Sel(unsigned char Channel)
{
800077b8:	eb cd 40 80 	pushm	r7,lr
800077bc:	20 1d       	sub	sp,4
800077be:	18 97       	mov	r7,r12
	int status = 0;
	char buff[2] = {Channel, 0};
800077c0:	ba 8c       	st.b	sp[0x0],r12
800077c2:	30 08       	mov	r8,0
800077c4:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
800077c6:	30 08       	mov	r8,0
800077c8:	37 49       	mov	r9,116
800077ca:	30 1a       	mov	r10,1
800077cc:	1a 9b       	mov	r11,sp
800077ce:	fe 7c 38 00 	mov	r12,-51200
800077d2:	f0 1f 00 07 	mcall	800077ec <PCA9542A_Chan_Sel+0x34>
	if(status == STATUS_OK)
800077d6:	c0 41       	brne	800077de <PCA9542A_Chan_Sel+0x26>
	{
		PCA9542A_Status.ChannelSelected = Channel;
800077d8:	48 68       	lddpc	r8,800077f0 <PCA9542A_Chan_Sel+0x38>
800077da:	b0 97       	st.b	r8[0x1],r7
800077dc:	c0 48       	rjmp	800077e4 <PCA9542A_Chan_Sel+0x2c>
	}
	else
	{
		PCA9542A_Status.Status = ERROR;
800077de:	30 19       	mov	r9,1
800077e0:	48 48       	lddpc	r8,800077f0 <PCA9542A_Chan_Sel+0x38>
800077e2:	b0 89       	st.b	r8[0x0],r9
	}
800077e4:	2f fd       	sub	sp,-4
800077e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800077ea:	00 00       	add	r0,r0
800077ec:	80 00       	ld.sh	r0,r0[0x0]
800077ee:	3c 74       	mov	r4,-57
800077f0:	00 00       	add	r0,r0
800077f2:	07 60       	ld.uh	r0,--r3

800077f4 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
800077f4:	eb cd 40 80 	pushm	r7,lr
800077f8:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
800077fa:	49 98       	lddpc	r8,8000785c <sd_mmc_resources_init+0x68>
800077fc:	1a 97       	mov	r7,sp
800077fe:	70 09       	ld.w	r9,r8[0x0]
80007800:	50 09       	stdsp	sp[0x0],r9
80007802:	70 19       	ld.w	r9,r8[0x4]
80007804:	50 19       	stdsp	sp[0x4],r9
80007806:	70 29       	ld.w	r9,r8[0x8]
80007808:	50 29       	stdsp	sp[0x8],r9
8000780a:	70 38       	ld.w	r8,r8[0xc]
8000780c:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000780e:	30 4b       	mov	r11,4
80007810:	49 4c       	lddpc	r12,80007860 <sd_mmc_resources_init+0x6c>
80007812:	f0 1f 00 15 	mcall	80007864 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
80007816:	1a 9b       	mov	r11,sp
80007818:	fe 7c 34 00 	mov	r12,-52224
8000781c:	f0 1f 00 13 	mcall	80007868 <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007820:	30 09       	mov	r9,0
80007822:	12 9a       	mov	r10,r9
80007824:	12 9b       	mov	r11,r9
80007826:	fe 7c 34 00 	mov	r12,-52224
8000782a:	f0 1f 00 11 	mcall	8000786c <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
8000782e:	fe 7c 34 00 	mov	r12,-52224
80007832:	f0 1f 00 10 	mcall	80007870 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
80007836:	20 4d       	sub	sp,16
80007838:	6e 08       	ld.w	r8,r7[0x0]
8000783a:	50 08       	stdsp	sp[0x0],r8
8000783c:	6e 18       	ld.w	r8,r7[0x4]
8000783e:	50 18       	stdsp	sp[0x4],r8
80007840:	6e 28       	ld.w	r8,r7[0x8]
80007842:	50 28       	stdsp	sp[0x8],r8
80007844:	6e 38       	ld.w	r8,r7[0xc]
80007846:	50 38       	stdsp	sp[0xc],r8
80007848:	e0 6c 24 00 	mov	r12,9216
8000784c:	ea 1c 00 f4 	orh	r12,0xf4
80007850:	f0 1f 00 09 	mcall	80007874 <sd_mmc_resources_init+0x80>
80007854:	2f cd       	sub	sp,-16
}
80007856:	2f cd       	sub	sp,-16
80007858:	e3 cd 80 80 	ldm	sp++,r7,pc
8000785c:	80 00       	ld.sh	r0,r0[0x0]
8000785e:	84 ec       	ld.uh	r12,r2[0xc]
80007860:	80 00       	ld.sh	r0,r0[0x0]
80007862:	84 fc       	ld.uh	r12,r2[0xe]
80007864:	80 00       	ld.sh	r0,r0[0x0]
80007866:	31 c4       	mov	r4,28
80007868:	80 00       	ld.sh	r0,r0[0x0]
8000786a:	39 20       	mov	r0,-110
8000786c:	80 00       	ld.sh	r0,r0[0x0]
8000786e:	39 58       	mov	r8,-107
80007870:	80 00       	ld.sh	r0,r0[0x0]
80007872:	3a c0       	mov	r0,-84
80007874:	80 00       	ld.sh	r0,r0[0x0]
80007876:	2b 10       	sub	r0,-79

80007878 <twim_init>:
#define VIRTUALMEM_ADDR    0x123456        //! Internal Address
#define TWIM_MASTER_SPEED  50000           //! Speed of TWI


void twim_init (void)
{
80007878:	eb cd 40 80 	pushm	r7,lr
8000787c:	20 8d       	sub	sp,32
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
8000787e:	49 18       	lddpc	r8,800078c0 <twim_init+0x48>
80007880:	fa cc ff f0 	sub	r12,sp,-16
80007884:	70 09       	ld.w	r9,r8[0x0]
80007886:	99 09       	st.w	r12[0x0],r9
80007888:	70 19       	ld.w	r9,r8[0x4]
8000788a:	99 19       	st.w	r12[0x4],r9
8000788c:	70 29       	ld.w	r9,r8[0x8]
8000788e:	99 29       	st.w	r12[0x8],r9
80007890:	70 38       	ld.w	r8,r8[0xc]
80007892:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
80007894:	48 c8       	lddpc	r8,800078c4 <twim_init+0x4c>
80007896:	1a 97       	mov	r7,sp
80007898:	70 09       	ld.w	r9,r8[0x0]
8000789a:	50 09       	stdsp	sp[0x0],r9
8000789c:	70 19       	ld.w	r9,r8[0x4]
8000789e:	50 19       	stdsp	sp[0x4],r9
800078a0:	70 29       	ld.w	r9,r8[0x8]
800078a2:	50 29       	stdsp	sp[0x8],r9
800078a4:	70 38       	ld.w	r8,r8[0xc]
800078a6:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
800078a8:	30 2b       	mov	r11,2
800078aa:	f0 1f 00 08 	mcall	800078c8 <twim_init+0x50>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (&AVR32_TWIM0, &TWIM_OPTIONS);
800078ae:	1a 9b       	mov	r11,sp
800078b0:	fe 7c 38 00 	mov	r12,-51200
800078b4:	f0 1f 00 06 	mcall	800078cc <twim_init+0x54>

}
800078b8:	2f 8d       	sub	sp,-32
800078ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800078be:	00 00       	add	r0,r0
800078c0:	80 00       	ld.sh	r0,r0[0x0]
800078c2:	85 2c       	st.w	r2[0x8],r12
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	85 1c       	st.w	r2[0x4],r12
800078c8:	80 00       	ld.sh	r0,r0[0x0]
800078ca:	31 c4       	mov	r4,28
800078cc:	80 00       	ld.sh	r0,r0[0x0]
800078ce:	3d 44       	mov	r4,-44

800078d0 <Log_Write>:
	} Columbus_Status_t;
	
Columbus_Status_t Columbus_Status;

void Log_Write(char *buff, int length) 
{
800078d0:	eb cd 40 c0 	pushm	r6-r7,lr
800078d4:	18 96       	mov	r6,r12
800078d6:	16 97       	mov	r7,r11
	nav_setcwd((FS_STRING)LOG_FILE, true, false);
800078d8:	30 0a       	mov	r10,0
800078da:	30 1b       	mov	r11,1
800078dc:	48 9c       	lddpc	r12,80007900 <Log_Write+0x30>
800078de:	f0 1f 00 0a 	mcall	80007904 <Log_Write+0x34>
	file_open(FOPEN_MODE_APPEND);
800078e2:	30 2c       	mov	r12,2
800078e4:	f0 1f 00 09 	mcall	80007908 <Log_Write+0x38>
	if(length == -1)
800078e8:	5b f7       	cp.w	r7,-1
800078ea:	f9 b7 00 04 	moveq	r7,4
		length = sizeof(buff);
	file_write_buf(buff, length);
800078ee:	0e 9b       	mov	r11,r7
800078f0:	5c 7b       	castu.h	r11
800078f2:	0c 9c       	mov	r12,r6
800078f4:	f0 1f 00 06 	mcall	8000790c <Log_Write+0x3c>
	file_close();
800078f8:	f0 1f 00 06 	mcall	80007910 <Log_Write+0x40>
}
800078fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007900:	80 00       	ld.sh	r0,r0[0x0]
80007902:	85 3c       	st.w	r2[0xc],r12
80007904:	80 00       	ld.sh	r0,r0[0x0]
80007906:	69 c4       	ld.w	r4,r4[0x70]
80007908:	80 00       	ld.sh	r0,r0[0x0]
8000790a:	61 e4       	ld.w	r4,r0[0x78]
8000790c:	80 00       	ld.sh	r0,r0[0x0]
8000790e:	60 70       	ld.w	r0,r0[0x1c]
80007910:	80 00       	ld.sh	r0,r0[0x0]
80007912:	60 34       	ld.w	r4,r0[0xc]

80007914 <main>:

	// Transmit the resulting string with the given USART.
	Log_Write(tmp + i, -1);
}
int main (void)
{
80007914:	eb cd 40 80 	pushm	r7,lr
80007918:	20 1d       	sub	sp,4
	unsigned long i, j, tmp = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	Columbus_Status.SD_Card = &SD_Status;
	Columbus_Status.Cameras = &OV7670_Status;
8000791a:	4c 18       	lddpc	r8,80007a1c <main+0x108>
8000791c:	4c 19       	lddpc	r9,80007a20 <main+0x10c>
8000791e:	91 29       	st.w	r8[0x8],r9
	Columbus_Status.I2CMux = &PCA9542A_Status;
80007920:	4c 19       	lddpc	r9,80007a24 <main+0x110>
80007922:	91 39       	st.w	r8[0xc],r9
	Columbus_Status.SD_Card = &SD_Status;
80007924:	4c 19       	lddpc	r9,80007a28 <main+0x114>
80007926:	91 09       	st.w	r8[0x0],r9
	board_init();
80007928:	f0 1f 00 41 	mcall	80007a2c <main+0x118>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
8000792c:	30 3a       	mov	r10,3
8000792e:	e0 6b 24 00 	mov	r11,9216
80007932:	ea 1b 00 f4 	orh	r11,0xf4
80007936:	30 0c       	mov	r12,0
80007938:	f0 1f 00 3e 	mcall	80007a30 <main+0x11c>
	init_dbg_rs232(FOSC0);
8000793c:	e0 6c 24 00 	mov	r12,9216
80007940:	ea 1c 00 f4 	orh	r12,0xf4
80007944:	f0 1f 00 3c 	mcall	80007a34 <main+0x120>
	
	print_dbg("\x0C");
80007948:	4b cc       	lddpc	r12,80007a38 <main+0x124>
8000794a:	f0 1f 00 3d 	mcall	80007a3c <main+0x128>
	print_dbg("Columbus Board Tester\n\n\r");
8000794e:	4b dc       	lddpc	r12,80007a40 <main+0x12c>
80007950:	f0 1f 00 3b 	mcall	80007a3c <main+0x128>
	sdramc_init(FOSC0);
80007954:	e0 6c 24 00 	mov	r12,9216
80007958:	ea 1c 00 f4 	orh	r12,0xf4
8000795c:	f0 1f 00 3a 	mcall	80007a44 <main+0x130>
	sd_mmc_resources_init();
80007960:	f0 1f 00 3a 	mcall	80007a48 <main+0x134>
	INTC_init_interrupts();
80007964:	f0 1f 00 3a 	mcall	80007a4c <main+0x138>
	twim_init();
80007968:	f0 1f 00 3a 	mcall	80007a50 <main+0x13c>
	
	Motor_Init();
8000796c:	f0 1f 00 3a 	mcall	80007a54 <main+0x140>
	OV7670_Init();
80007970:	f0 1f 00 3a 	mcall	80007a58 <main+0x144>
	Enable_global_interrupt();
80007974:	d5 03       	csrf	0x10
// 	
	print_dbg("\n\n\rSD Card Memory Test:\n\r");
80007976:	4b ac       	lddpc	r12,80007a5c <main+0x148>
80007978:	f0 1f 00 31 	mcall	80007a3c <main+0x128>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
8000797c:	30 0c       	mov	r12,0
8000797e:	f0 1f 00 39 	mcall	80007a60 <main+0x14c>
80007982:	c3 e1       	brne	800079fe <main+0xea>
	{
		SD_Status.Status = STATUS_OK;
80007984:	4a 97       	lddpc	r7,80007a28 <main+0x114>
80007986:	30 08       	mov	r8,0
80007988:	ae 88       	st.b	r7[0x0],r8
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
8000798a:	1a 9b       	mov	r11,sp
8000798c:	f0 1f 00 36 	mcall	80007a64 <main+0x150>
/*		print_dbg("OK:\t");*/
		SD_Status.Memory_size = (VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR);
80007990:	40 0c       	lddsp	r12,sp[0x0]
80007992:	2f fc       	sub	r12,-1
80007994:	ab 9c       	lsr	r12,0xb
80007996:	8f 1c       	st.w	r7[0x4],r12
		print_dbg_ulong(SD_Status.Memory_size);
80007998:	f0 1f 00 34 	mcall	80007a68 <main+0x154>
		print_dbg("MB\r\n");
8000799c:	4b 47       	lddpc	r7,80007a6c <main+0x158>
8000799e:	0e 9c       	mov	r12,r7
800079a0:	f0 1f 00 27 	mcall	80007a3c <main+0x128>
		print_dbg_ulong(Columbus_Status.SD_Card->Memory_size);
800079a4:	49 e8       	lddpc	r8,80007a1c <main+0x108>
800079a6:	70 08       	ld.w	r8,r8[0x0]
800079a8:	70 1c       	ld.w	r12,r8[0x4]
800079aa:	f0 1f 00 30 	mcall	80007a68 <main+0x154>
		print_dbg("MB\r\n");
800079ae:	0e 9c       	mov	r12,r7
800079b0:	f0 1f 00 23 	mcall	80007a3c <main+0x128>
// 		print_dbg("SD Card Okay.\n\r");
		nav_reset();
800079b4:	f0 1f 00 2f 	mcall	80007a70 <main+0x15c>
		// Use the last drive available as default.
		nav_drive_set(nav_drive_nb() - 1);
800079b8:	f0 1f 00 2f 	mcall	80007a74 <main+0x160>
800079bc:	20 1c       	sub	r12,1
800079be:	5c 5c       	castu.b	r12
800079c0:	f0 1f 00 2e 	mcall	80007a78 <main+0x164>
		// Mount it.
		nav_partition_mount();
800079c4:	f0 1f 00 2e 	mcall	80007a7c <main+0x168>
		nav_filelist_reset();
800079c8:	f0 1f 00 2e 	mcall	80007a80 <main+0x16c>
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
800079cc:	30 0b       	mov	r11,0
800079ce:	4a ec       	lddpc	r12,80007a84 <main+0x170>
800079d0:	f0 1f 00 2e 	mcall	80007a88 <main+0x174>
800079d4:	c0 90       	breq	800079e6 <main+0xd2>
		{
			//print_dbg("\n\rLog File Already Exists\n\rAttempting to delete...");	
			nav_setcwd((FS_STRING)LOG_FILE, true, false);
800079d6:	30 0a       	mov	r10,0
800079d8:	30 1b       	mov	r11,1
800079da:	4a bc       	lddpc	r12,80007a84 <main+0x170>
800079dc:	f0 1f 00 2c 	mcall	80007a8c <main+0x178>
			nav_file_del(false);
800079e0:	30 0c       	mov	r12,0
800079e2:	f0 1f 00 2c 	mcall	80007a90 <main+0x17c>
		}

		if(nav_file_create((FS_STRING)LOG_FILE) == false)
800079e6:	4a 8c       	lddpc	r12,80007a84 <main+0x170>
800079e8:	f0 1f 00 2b 	mcall	80007a94 <main+0x180>
800079ec:	c0 41       	brne	800079f4 <main+0xe0>
			SD_Status.Status = ERROR + 1;//print_dbg("\n\rNot worked...");
800079ee:	30 29       	mov	r9,2
800079f0:	48 e8       	lddpc	r8,80007a28 <main+0x114>
800079f2:	b0 89       	st.b	r8[0x0],r9
	
		Log_Write("Columbus Tester:\n\r", -1);
800079f4:	3f fb       	mov	r11,-1
800079f6:	4a 9c       	lddpc	r12,80007a98 <main+0x184>
800079f8:	f0 1f 00 29 	mcall	80007a9c <main+0x188>
800079fc:	c0 48       	rjmp	80007a04 <main+0xf0>
		}
	else
	{
		SD_Status.Status = ERROR;
800079fe:	30 19       	mov	r9,1
80007a00:	48 a8       	lddpc	r8,80007a28 <main+0x114>
80007a02:	b0 89       	st.b	r8[0x0],r9
	}
	
	print_dbg("\n\rResetting Motors.");
80007a04:	4a 7c       	lddpc	r12,80007aa0 <main+0x18c>
80007a06:	f0 1f 00 0e 	mcall	80007a3c <main+0x128>
	
	Motors_Reset();
80007a0a:	f0 1f 00 27 	mcall	80007aa4 <main+0x190>
	while(Motors_Moving() == true)
80007a0e:	f0 1f 00 27 	mcall	80007aa8 <main+0x194>
80007a12:	cf e1       	brne	80007a0e <main+0xfa>
// 		;
// 
// 	if(Store_Both_Images() == true)
// 		print_dbg("\n\rImages Stored Successfully!");
		
	print_dbg("\n\rColumbus Ready!");
80007a14:	4a 6c       	lddpc	r12,80007aac <main+0x198>
80007a16:	f0 1f 00 0a 	mcall	80007a3c <main+0x128>
80007a1a:	c0 08       	rjmp	80007a1a <main+0x106>
80007a1c:	00 00       	add	r0,r0
80007a1e:	07 b8       	ld.ub	r8,r3[0x3]
80007a20:	00 00       	add	r0,r0
80007a22:	07 62       	ld.uh	r2,--r3
80007a24:	00 00       	add	r0,r0
80007a26:	07 60       	ld.uh	r0,--r3
80007a28:	00 00       	add	r0,r0
80007a2a:	07 58       	ld.sh	r8,--r3
80007a2c:	80 00       	ld.sh	r0,r0[0x0]
80007a2e:	6d 64       	ld.w	r4,r6[0x58]
80007a30:	80 00       	ld.sh	r0,r0[0x0]
80007a32:	33 74       	mov	r4,55
80007a34:	80 00       	ld.sh	r0,r0[0x0]
80007a36:	6d 04       	ld.w	r4,r6[0x40]
80007a38:	80 00       	ld.sh	r0,r0[0x0]
80007a3a:	85 44       	st.w	r2[0x10],r4
80007a3c:	80 00       	ld.sh	r0,r0[0x0]
80007a3e:	6c b0       	ld.w	r0,r6[0x2c]
80007a40:	80 00       	ld.sh	r0,r0[0x0]
80007a42:	85 48       	st.w	r2[0x10],r8
80007a44:	80 00       	ld.sh	r0,r0[0x0]
80007a46:	2e 04       	sub	r4,-32
80007a48:	80 00       	ld.sh	r0,r0[0x0]
80007a4a:	77 f4       	ld.w	r4,r11[0x7c]
80007a4c:	80 00       	ld.sh	r0,r0[0x0]
80007a4e:	32 c8       	mov	r8,44
80007a50:	80 00       	ld.sh	r0,r0[0x0]
80007a52:	78 78       	ld.w	r8,r12[0x1c]
80007a54:	80 00       	ld.sh	r0,r0[0x0]
80007a56:	70 50       	ld.w	r0,r8[0x14]
80007a58:	80 00       	ld.sh	r0,r0[0x0]
80007a5a:	75 18       	ld.w	r8,r10[0x44]
80007a5c:	80 00       	ld.sh	r0,r0[0x0]
80007a5e:	85 64       	st.w	r2[0x18],r4
80007a60:	80 00       	ld.sh	r0,r0[0x0]
80007a62:	6d 68       	ld.w	r8,r6[0x58]
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	6d 7c       	ld.w	r12,r6[0x5c]
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	6c 9c       	ld.w	r12,r6[0x24]
80007a6c:	80 00       	ld.sh	r0,r0[0x0]
80007a6e:	85 80       	st.w	r2[0x20],r0
80007a70:	80 00       	ld.sh	r0,r0[0x0]
80007a72:	6b dc       	ld.w	r12,r5[0x74]
80007a74:	80 00       	ld.sh	r0,r0[0x0]
80007a76:	6b 88       	ld.w	r8,r5[0x60]
80007a78:	80 00       	ld.sh	r0,r0[0x0]
80007a7a:	69 14       	ld.w	r4,r4[0x44]
80007a7c:	80 00       	ld.sh	r0,r0[0x0]
80007a7e:	68 cc       	ld.w	r12,r4[0x30]
80007a80:	80 00       	ld.sh	r0,r0[0x0]
80007a82:	65 2c       	ld.w	r12,r2[0x48]
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	85 3c       	st.w	r2[0xc],r12
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	64 fc       	ld.w	r12,r2[0x3c]
80007a8c:	80 00       	ld.sh	r0,r0[0x0]
80007a8e:	69 c4       	ld.w	r4,r4[0x70]
80007a90:	80 00       	ld.sh	r0,r0[0x0]
80007a92:	66 90       	ld.w	r0,r3[0x24]
80007a94:	80 00       	ld.sh	r0,r0[0x0]
80007a96:	65 44       	ld.w	r4,r2[0x50]
80007a98:	80 00       	ld.sh	r0,r0[0x0]
80007a9a:	85 88       	st.w	r2[0x20],r8
80007a9c:	80 00       	ld.sh	r0,r0[0x0]
80007a9e:	78 d0       	ld.w	r0,r12[0x34]
80007aa0:	80 00       	ld.sh	r0,r0[0x0]
80007aa2:	85 9c       	st.w	r2[0x24],r12
80007aa4:	80 00       	ld.sh	r0,r0[0x0]
80007aa6:	6e f8       	ld.w	r8,r7[0x3c]
80007aa8:	80 00       	ld.sh	r0,r0[0x0]
80007aaa:	6d e8       	ld.w	r8,r6[0x78]
80007aac:	80 00       	ld.sh	r0,r0[0x0]
80007aae:	85 b0       	st.w	r2[0x2c],r0

80007ab0 <memcmp>:
80007ab0:	d4 01       	pushm	lr
80007ab2:	30 08       	mov	r8,0
80007ab4:	c0 d8       	rjmp	80007ace <memcmp+0x1e>
80007ab6:	f8 08 07 0e 	ld.ub	lr,r12[r8]
80007aba:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007abe:	20 1a       	sub	r10,1
80007ac0:	2f f8       	sub	r8,-1
80007ac2:	f2 0e 18 00 	cp.b	lr,r9
80007ac6:	c0 40       	breq	80007ace <memcmp+0x1e>
80007ac8:	fc 09 01 0c 	sub	r12,lr,r9
80007acc:	d8 02       	popm	pc
80007ace:	58 0a       	cp.w	r10,0
80007ad0:	cf 31       	brne	80007ab6 <memcmp+0x6>
80007ad2:	14 9c       	mov	r12,r10
80007ad4:	d8 02       	popm	pc

80007ad6 <memcpy>:
80007ad6:	58 8a       	cp.w	r10,8
80007ad8:	c2 f5       	brlt	80007b36 <memcpy+0x60>
80007ada:	f9 eb 10 09 	or	r9,r12,r11
80007ade:	e2 19 00 03 	andl	r9,0x3,COH
80007ae2:	e0 81 00 97 	brne	80007c10 <memcpy+0x13a>
80007ae6:	e0 4a 00 20 	cp.w	r10,32
80007aea:	c3 b4       	brge	80007b60 <memcpy+0x8a>
80007aec:	f4 08 14 02 	asr	r8,r10,0x2
80007af0:	f0 09 11 08 	rsub	r9,r8,8
80007af4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80007af8:	76 69       	ld.w	r9,r11[0x18]
80007afa:	99 69       	st.w	r12[0x18],r9
80007afc:	76 59       	ld.w	r9,r11[0x14]
80007afe:	99 59       	st.w	r12[0x14],r9
80007b00:	76 49       	ld.w	r9,r11[0x10]
80007b02:	99 49       	st.w	r12[0x10],r9
80007b04:	76 39       	ld.w	r9,r11[0xc]
80007b06:	99 39       	st.w	r12[0xc],r9
80007b08:	76 29       	ld.w	r9,r11[0x8]
80007b0a:	99 29       	st.w	r12[0x8],r9
80007b0c:	76 19       	ld.w	r9,r11[0x4]
80007b0e:	99 19       	st.w	r12[0x4],r9
80007b10:	76 09       	ld.w	r9,r11[0x0]
80007b12:	99 09       	st.w	r12[0x0],r9
80007b14:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80007b18:	f8 08 00 28 	add	r8,r12,r8<<0x2
80007b1c:	e0 1a 00 03 	andl	r10,0x3
80007b20:	f4 0a 11 04 	rsub	r10,r10,4
80007b24:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007b28:	17 a9       	ld.ub	r9,r11[0x2]
80007b2a:	b0 a9       	st.b	r8[0x2],r9
80007b2c:	17 99       	ld.ub	r9,r11[0x1]
80007b2e:	b0 99       	st.b	r8[0x1],r9
80007b30:	17 89       	ld.ub	r9,r11[0x0]
80007b32:	b0 89       	st.b	r8[0x0],r9
80007b34:	5e fc       	retal	r12
80007b36:	f4 0a 11 09 	rsub	r10,r10,9
80007b3a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007b3e:	17 f9       	ld.ub	r9,r11[0x7]
80007b40:	b8 f9       	st.b	r12[0x7],r9
80007b42:	17 e9       	ld.ub	r9,r11[0x6]
80007b44:	b8 e9       	st.b	r12[0x6],r9
80007b46:	17 d9       	ld.ub	r9,r11[0x5]
80007b48:	b8 d9       	st.b	r12[0x5],r9
80007b4a:	17 c9       	ld.ub	r9,r11[0x4]
80007b4c:	b8 c9       	st.b	r12[0x4],r9
80007b4e:	17 b9       	ld.ub	r9,r11[0x3]
80007b50:	b8 b9       	st.b	r12[0x3],r9
80007b52:	17 a9       	ld.ub	r9,r11[0x2]
80007b54:	b8 a9       	st.b	r12[0x2],r9
80007b56:	17 99       	ld.ub	r9,r11[0x1]
80007b58:	b8 99       	st.b	r12[0x1],r9
80007b5a:	17 89       	ld.ub	r9,r11[0x0]
80007b5c:	b8 89       	st.b	r12[0x0],r9
80007b5e:	5e fc       	retal	r12
80007b60:	eb cd 40 c0 	pushm	r6-r7,lr
80007b64:	18 99       	mov	r9,r12
80007b66:	22 0a       	sub	r10,32
80007b68:	b7 07       	ld.d	r6,r11++
80007b6a:	b3 26       	st.d	r9++,r6
80007b6c:	b7 07       	ld.d	r6,r11++
80007b6e:	b3 26       	st.d	r9++,r6
80007b70:	b7 07       	ld.d	r6,r11++
80007b72:	b3 26       	st.d	r9++,r6
80007b74:	b7 07       	ld.d	r6,r11++
80007b76:	b3 26       	st.d	r9++,r6
80007b78:	22 0a       	sub	r10,32
80007b7a:	cf 74       	brge	80007b68 <memcpy+0x92>
80007b7c:	2f 0a       	sub	r10,-16
80007b7e:	c0 65       	brlt	80007b8a <memcpy+0xb4>
80007b80:	b7 07       	ld.d	r6,r11++
80007b82:	b3 26       	st.d	r9++,r6
80007b84:	b7 07       	ld.d	r6,r11++
80007b86:	b3 26       	st.d	r9++,r6
80007b88:	21 0a       	sub	r10,16
80007b8a:	5c 3a       	neg	r10
80007b8c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80007b90:	d7 03       	nop
80007b92:	d7 03       	nop
80007b94:	f7 36 00 0e 	ld.ub	r6,r11[14]
80007b98:	f3 66 00 0e 	st.b	r9[14],r6
80007b9c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80007ba0:	f3 66 00 0d 	st.b	r9[13],r6
80007ba4:	f7 36 00 0c 	ld.ub	r6,r11[12]
80007ba8:	f3 66 00 0c 	st.b	r9[12],r6
80007bac:	f7 36 00 0b 	ld.ub	r6,r11[11]
80007bb0:	f3 66 00 0b 	st.b	r9[11],r6
80007bb4:	f7 36 00 0a 	ld.ub	r6,r11[10]
80007bb8:	f3 66 00 0a 	st.b	r9[10],r6
80007bbc:	f7 36 00 09 	ld.ub	r6,r11[9]
80007bc0:	f3 66 00 09 	st.b	r9[9],r6
80007bc4:	f7 36 00 08 	ld.ub	r6,r11[8]
80007bc8:	f3 66 00 08 	st.b	r9[8],r6
80007bcc:	f7 36 00 07 	ld.ub	r6,r11[7]
80007bd0:	f3 66 00 07 	st.b	r9[7],r6
80007bd4:	f7 36 00 06 	ld.ub	r6,r11[6]
80007bd8:	f3 66 00 06 	st.b	r9[6],r6
80007bdc:	f7 36 00 05 	ld.ub	r6,r11[5]
80007be0:	f3 66 00 05 	st.b	r9[5],r6
80007be4:	f7 36 00 04 	ld.ub	r6,r11[4]
80007be8:	f3 66 00 04 	st.b	r9[4],r6
80007bec:	f7 36 00 03 	ld.ub	r6,r11[3]
80007bf0:	f3 66 00 03 	st.b	r9[3],r6
80007bf4:	f7 36 00 02 	ld.ub	r6,r11[2]
80007bf8:	f3 66 00 02 	st.b	r9[2],r6
80007bfc:	f7 36 00 01 	ld.ub	r6,r11[1]
80007c00:	f3 66 00 01 	st.b	r9[1],r6
80007c04:	f7 36 00 00 	ld.ub	r6,r11[0]
80007c08:	f3 66 00 00 	st.b	r9[0],r6
80007c0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007c10:	20 1a       	sub	r10,1
80007c12:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80007c16:	f8 0a 0b 09 	st.b	r12[r10],r9
80007c1a:	cf b1       	brne	80007c10 <memcpy+0x13a>
80007c1c:	5e fc       	retal	r12

80007c1e <memset>:
80007c1e:	18 98       	mov	r8,r12
80007c20:	c0 38       	rjmp	80007c26 <memset+0x8>
80007c22:	10 cb       	st.b	r8++,r11
80007c24:	20 1a       	sub	r10,1
80007c26:	58 0a       	cp.w	r10,0
80007c28:	cf d1       	brne	80007c22 <memset+0x4>
80007c2a:	5e fc       	retal	r12

Disassembly of section .exception:

80007e00 <_evba>:
80007e00:	c0 08       	rjmp	80007e00 <_evba>
	...

80007e04 <_handle_TLB_Multiple_Hit>:
80007e04:	c0 08       	rjmp	80007e04 <_handle_TLB_Multiple_Hit>
	...

80007e08 <_handle_Bus_Error_Data_Fetch>:
80007e08:	c0 08       	rjmp	80007e08 <_handle_Bus_Error_Data_Fetch>
	...

80007e0c <_handle_Bus_Error_Instruction_Fetch>:
80007e0c:	c0 08       	rjmp	80007e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80007e10 <_handle_NMI>:
80007e10:	c0 08       	rjmp	80007e10 <_handle_NMI>
	...

80007e14 <_handle_Instruction_Address>:
80007e14:	c0 08       	rjmp	80007e14 <_handle_Instruction_Address>
	...

80007e18 <_handle_ITLB_Protection>:
80007e18:	c0 08       	rjmp	80007e18 <_handle_ITLB_Protection>
	...

80007e1c <_handle_Breakpoint>:
80007e1c:	c0 08       	rjmp	80007e1c <_handle_Breakpoint>
	...

80007e20 <_handle_Illegal_Opcode>:
80007e20:	c0 08       	rjmp	80007e20 <_handle_Illegal_Opcode>
	...

80007e24 <_handle_Unimplemented_Instruction>:
80007e24:	c0 08       	rjmp	80007e24 <_handle_Unimplemented_Instruction>
	...

80007e28 <_handle_Privilege_Violation>:
80007e28:	c0 08       	rjmp	80007e28 <_handle_Privilege_Violation>
	...

80007e2c <_handle_Floating_Point>:
80007e2c:	c0 08       	rjmp	80007e2c <_handle_Floating_Point>
	...

80007e30 <_handle_Coprocessor_Absent>:
80007e30:	c0 08       	rjmp	80007e30 <_handle_Coprocessor_Absent>
	...

80007e34 <_handle_Data_Address_Read>:
80007e34:	c0 08       	rjmp	80007e34 <_handle_Data_Address_Read>
	...

80007e38 <_handle_Data_Address_Write>:
80007e38:	c0 08       	rjmp	80007e38 <_handle_Data_Address_Write>
	...

80007e3c <_handle_DTLB_Protection_Read>:
80007e3c:	c0 08       	rjmp	80007e3c <_handle_DTLB_Protection_Read>
	...

80007e40 <_handle_DTLB_Protection_Write>:
80007e40:	c0 08       	rjmp	80007e40 <_handle_DTLB_Protection_Write>
	...

80007e44 <_handle_DTLB_Modified>:
80007e44:	c0 08       	rjmp	80007e44 <_handle_DTLB_Modified>
	...

80007e50 <_handle_ITLB_Miss>:
80007e50:	c0 08       	rjmp	80007e50 <_handle_ITLB_Miss>
	...

80007e60 <_handle_DTLB_Miss_Read>:
80007e60:	c0 08       	rjmp	80007e60 <_handle_DTLB_Miss_Read>
	...

80007e70 <_handle_DTLB_Miss_Write>:
80007e70:	c0 08       	rjmp	80007e70 <_handle_DTLB_Miss_Write>
	...

80007f00 <_handle_Supervisor_Call>:
80007f00:	c0 08       	rjmp	80007f00 <_handle_Supervisor_Call>
80007f02:	d7 03       	nop

80007f04 <_int0>:
80007f04:	30 0c       	mov	r12,0
80007f06:	fe b0 da 0b 	rcall	8000331c <_get_interrupt_handler>
80007f0a:	58 0c       	cp.w	r12,0
80007f0c:	f8 0f 17 10 	movne	pc,r12
80007f10:	d6 03       	rete

80007f12 <_int1>:
80007f12:	30 1c       	mov	r12,1
80007f14:	fe b0 da 04 	rcall	8000331c <_get_interrupt_handler>
80007f18:	58 0c       	cp.w	r12,0
80007f1a:	f8 0f 17 10 	movne	pc,r12
80007f1e:	d6 03       	rete

80007f20 <_int2>:
80007f20:	30 2c       	mov	r12,2
80007f22:	fe b0 d9 fd 	rcall	8000331c <_get_interrupt_handler>
80007f26:	58 0c       	cp.w	r12,0
80007f28:	f8 0f 17 10 	movne	pc,r12
80007f2c:	d6 03       	rete

80007f2e <_int3>:
80007f2e:	30 3c       	mov	r12,3
80007f30:	fe b0 d9 f6 	rcall	8000331c <_get_interrupt_handler>
80007f34:	58 0c       	cp.w	r12,0
80007f36:	f8 0f 17 10 	movne	pc,r12
80007f3a:	d6 03       	rete
80007f3c:	d7 03       	nop
80007f3e:	d7 03       	nop
80007f40:	d7 03       	nop
80007f42:	d7 03       	nop
80007f44:	d7 03       	nop
80007f46:	d7 03       	nop
80007f48:	d7 03       	nop
80007f4a:	d7 03       	nop
80007f4c:	d7 03       	nop
80007f4e:	d7 03       	nop
80007f50:	d7 03       	nop
80007f52:	d7 03       	nop
80007f54:	d7 03       	nop
80007f56:	d7 03       	nop
80007f58:	d7 03       	nop
80007f5a:	d7 03       	nop
80007f5c:	d7 03       	nop
80007f5e:	d7 03       	nop
80007f60:	d7 03       	nop
80007f62:	d7 03       	nop
80007f64:	d7 03       	nop
80007f66:	d7 03       	nop
80007f68:	d7 03       	nop
80007f6a:	d7 03       	nop
80007f6c:	d7 03       	nop
80007f6e:	d7 03       	nop
80007f70:	d7 03       	nop
80007f72:	d7 03       	nop
80007f74:	d7 03       	nop
80007f76:	d7 03       	nop
80007f78:	d7 03       	nop
80007f7a:	d7 03       	nop
80007f7c:	d7 03       	nop
80007f7e:	d7 03       	nop
80007f80:	d7 03       	nop
80007f82:	d7 03       	nop
80007f84:	d7 03       	nop
80007f86:	d7 03       	nop
80007f88:	d7 03       	nop
80007f8a:	d7 03       	nop
80007f8c:	d7 03       	nop
80007f8e:	d7 03       	nop
80007f90:	d7 03       	nop
80007f92:	d7 03       	nop
80007f94:	d7 03       	nop
80007f96:	d7 03       	nop
80007f98:	d7 03       	nop
80007f9a:	d7 03       	nop
80007f9c:	d7 03       	nop
80007f9e:	d7 03       	nop
80007fa0:	d7 03       	nop
80007fa2:	d7 03       	nop
80007fa4:	d7 03       	nop
80007fa6:	d7 03       	nop
80007fa8:	d7 03       	nop
80007faa:	d7 03       	nop
80007fac:	d7 03       	nop
80007fae:	d7 03       	nop
80007fb0:	d7 03       	nop
80007fb2:	d7 03       	nop
80007fb4:	d7 03       	nop
80007fb6:	d7 03       	nop
80007fb8:	d7 03       	nop
80007fba:	d7 03       	nop
80007fbc:	d7 03       	nop
80007fbe:	d7 03       	nop
80007fc0:	d7 03       	nop
80007fc2:	d7 03       	nop
80007fc4:	d7 03       	nop
80007fc6:	d7 03       	nop
80007fc8:	d7 03       	nop
80007fca:	d7 03       	nop
80007fcc:	d7 03       	nop
80007fce:	d7 03       	nop
80007fd0:	d7 03       	nop
80007fd2:	d7 03       	nop
80007fd4:	d7 03       	nop
80007fd6:	d7 03       	nop
80007fd8:	d7 03       	nop
80007fda:	d7 03       	nop
80007fdc:	d7 03       	nop
80007fde:	d7 03       	nop
80007fe0:	d7 03       	nop
80007fe2:	d7 03       	nop
80007fe4:	d7 03       	nop
80007fe6:	d7 03       	nop
80007fe8:	d7 03       	nop
80007fea:	d7 03       	nop
80007fec:	d7 03       	nop
80007fee:	d7 03       	nop
80007ff0:	d7 03       	nop
80007ff2:	d7 03       	nop
80007ff4:	d7 03       	nop
80007ff6:	d7 03       	nop
80007ff8:	d7 03       	nop
80007ffa:	d7 03       	nop
80007ffc:	d7 03       	nop
80007ffe:	d7 03       	nop
