
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00002510  000025a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800104  00800104  000025a8  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000025a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000181  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001be4  00000000  00000000  000027e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000766  00000000  00000000  000043cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001625  00000000  00000000  00004b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00006158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e42  00000000  00000000  0000680a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000864c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      10:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      18:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      1c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      20:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      24:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      28:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      2c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      30:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      34:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      38:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      3c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      40:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      44:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      48:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      4c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      50:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      58:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      5c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      60:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      64:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      68:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      6c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      70:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      74:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      78:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>

0000007c <__c.1699>:
      7c:	25 75 20 69 74 65 6d 28 73 29 0a 00                 %u item(s)..

00000088 <__c.1696>:
      88:	25 39 6c 75 20 20 25 73 0a 00                       %9lu  %s..

00000092 <__c.1694>:
      92:	20 20 20 3c 44 49 52 3e 20 20 20 25 73 0a 00           <DIR>   %s..

000000a1 <__c.1687>:
      a1:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
      b1:	29 0a 00                                            )..

000000b4 <__c.1682>:
      b4:	45 6e 74 65 72 20 6c 69 6e 65 73 20 74 6f 20 77     Enter lines to w
      c4:	72 69 74 65 2e 20 41 20 62 6c 61 6e 6b 20 6c 69     rite. A blank li
      d4:	6e 65 20 66 69 6e 61 6c 69 7a 65 20 74 68 65 20     ne finalize the 
      e4:	77 72 69 74 65 20 6f 70 65 72 61 74 69 6f 6e 2e     write operation.
      f4:	0a 00                                               ..

000000f6 <__c.1679>:
      f6:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     106:	6e 2e 0a 00                                         n...

0000010a <__c.1648>:
     10a:	20 20 20 20 20 20 20 20 20 20 4a 57 42 58 50 0a               JWBXP.
     11a:	4d 43 55 53 52 3a 20 00                             MCUSR: .

00000122 <__c.1646>:
     122:	0a 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ._______________
     132:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     142:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     152:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0a 20 5f     _____________. _
     162:	20 20 20 5f 20 20 20 20 20 20 20 20 20 20 5f 5f        _          __
     172:	20 20 20 20 5f 5f 20 20 20 20 20 5f 5f 20 20 20         __     __   
     182:	20 5f 5f 5f 5f 5f 5f 5f 20 20 5f 5f 5f 5f 5f 5f      _______  ______
     192:	5f 20 20 20 5f 5f 5f 5f 20 20 0a 7c 20 7c 20 7c     _   ____  .| | |
     1a2:	20 7c 20 20 20 20 20 20 20 20 7c 20 20 5c 20 20      |        |  \  
     1b2:	2f 20 20 7c 20 20 20 2f 20 20 5c 20 20 7c 5f 5f     /  |   /  \  |__
     1c2:	20 20 20 5f 5f 7c 7c 5f 5f 20 20 20 5f 5f 7c 20        __||__   __| 
     1d2:	2f 20 20 20 20 5c 20 0a 7c 20 7c 20 7c 20 7c 20     /    \ .| | | | 
     1e2:	20 20 20 20 20 20 20 7c 20 20 20 5c 2f 20 20 20            |   \/   
     1f2:	7c 20 20 2f 20 2f 5c 20 5c 20 20 20 20 7c 20 7c     |  / /\ \    | |
     202:	20 20 20 20 20 20 7c 20 7c 20 20 20 7c 20 20 2f           | |   |  /
     212:	5c 20 20 7c 0a 7c 20 7c 20 7c 20 7c 20 20 20 20     \  |.| | | |    
     222:	20 20 20 20 7c 20 7c 5c 20 20 2f 7c 20 7c 20 7c         | |\  /| | |
     232:	20 7c 5f 5f 7c 20 7c 20 20 20 7c 20 7c 20 20 20      |__| |   | |   
     242:	20 20 20 7c 20 7c 20 20 20 7c 20 7c 20 20 7c 20        | |   | |  | 
     252:	7c 0a 7c 20 7c 20 7c 20 7c 20 20 20 20 20 20 20     |.| | | |       
     262:	20 7c 20 7c 20 5c 2f 20 7c 20 7c 20 7c 20 20 5f      | | \/ | | |  _
     272:	5f 20 20 7c 20 20 20 7c 20 7c 20 20 20 20 20 20     _  |   | |      
     282:	7c 20 7c 20 20 20 7c 20 7c 20 20 7c 20 7c 0a 7c     | |   | |  | |.|
     292:	20 7c 20 7c 20 7c 5f 5f 5f 20 20 20 20 20 7c 20      | | |___     | 
     2a2:	7c 20 20 20 20 7c 20 7c 20 7c 20 7c 20 20 7c 20     |    | | | |  | 
     2b2:	7c 20 20 20 7c 20 7c 20 20 20 20 20 20 7c 20 7c     |   | |      | |
     2c2:	20 20 20 7c 20 20 5c 2f 20 20 7c 0a 7c 5f 7c 20        |  \/  |.|_| 
     2d2:	7c 5f 5f 5f 5f 5f 7c 20 20 20 20 7c 5f 7c 20 20     |_____|    |_|  
     2e2:	20 20 7c 5f 7c 20 7c 5f 7c 20 20 7c 5f 7c 20 20       |_| |_|  |_|  
     2f2:	20 7c 5f 7c 20 20 20 20 20 20 7c 5f 7c 20 20 20      |_|      |_|   
     302:	20 5c 5f 5f 5f 5f 2f 20 0a 5f 5f 5f 5f 5f 5f 5f      \____/ ._______
     312:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     322:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     332:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
     342:	5f 5f 5f 5f 5f 0a 0a 00                             _____...

0000034a <__c.1590>:
     34a:	72 63 3d 25 64 0a 00                                rc=%d..

00000351 <__c.1616>:
     351:	20 20 00                                              .

00000354 <__c.1584>:
     354:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

00000361 <str.1570>:
     361:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 4e 4f 54 5f     OK.DISK_ERR.NOT_
     371:	52 45 41 44 59 00 4e 4f 5f 46 49 4c 45 00 4e 4f     READY.NO_FILE.NO
     381:	5f 50 41 54 48 00 4e 4f 54 5f 4f 50 45 4e 45 44     _PATH.NOT_OPENED
     391:	00 4e 4f 54 5f 45 4e 41 42 4c 45 44 00 4e 4f 5f     .NOT_ENABLED.NO_
     3a1:	46 49 4c 45 5f 53 59 53 54 45 4d 00 00              FILE_SYSTEM..

000003ae <__ctors_end>:
     3ae:	11 24       	eor	r1, r1
     3b0:	1f be       	out	0x3f, r1	; 63
     3b2:	cf ef       	ldi	r28, 0xFF	; 255
     3b4:	d8 e0       	ldi	r29, 0x08	; 8
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	cd bf       	out	0x3d, r28	; 61

000003ba <__do_copy_data>:
     3ba:	11 e0       	ldi	r17, 0x01	; 1
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b1 e0       	ldi	r27, 0x01	; 1
     3c0:	e0 e1       	ldi	r30, 0x10	; 16
     3c2:	f5 e2       	ldi	r31, 0x25	; 37
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <.do_copy_data_start>

000003c6 <.do_copy_data_loop>:
     3c6:	05 90       	lpm	r0, Z+
     3c8:	0d 92       	st	X+, r0

000003ca <.do_copy_data_start>:
     3ca:	a4 30       	cpi	r26, 0x04	; 4
     3cc:	b1 07       	cpc	r27, r17
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <.do_copy_data_loop>

000003d0 <__do_clear_bss>:
     3d0:	11 e0       	ldi	r17, 0x01	; 1
     3d2:	a4 e0       	ldi	r26, 0x04	; 4
     3d4:	b1 e0       	ldi	r27, 0x01	; 1
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <.do_clear_bss_start>

000003d8 <.do_clear_bss_loop>:
     3d8:	1d 92       	st	X+, r1

000003da <.do_clear_bss_start>:
     3da:	ab 38       	cpi	r26, 0x8B	; 139
     3dc:	b1 07       	cpc	r27, r17
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <.do_clear_bss_loop>
     3e0:	0e 94 a1 02 	call	0x542	; 0x542 <main>
     3e4:	0c 94 86 12 	jmp	0x250c	; 0x250c <_exit>

000003e8 <__bad_interrupt>:
     3e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ec <put_dump>:



static
void put_dump (const BYTE *buff, DWORD ofs, int cnt)
{
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	6c 01       	movw	r12, r24
     3fc:	79 01       	movw	r14, r18
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
     3fe:	cb 01       	movw	r24, r22
     400:	ba 01       	movw	r22, r20
     402:	40 e1       	ldi	r20, 0x10	; 16
     404:	28 ef       	ldi	r18, 0xF8	; 248
     406:	0e 94 46 11 	call	0x228c	; 0x228c <xitoa>
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>
     410:	10 e0       	ldi	r17, 0x00	; 0
     412:	0e c0       	rjmp	.+28     	; 0x430 <put_dump+0x44>
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
     414:	80 e2       	ldi	r24, 0x20	; 32
     416:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>
     41a:	cc 0d       	add	r28, r12
     41c:	dd 1d       	adc	r29, r13
     41e:	68 81       	ld	r22, Y
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	40 e1       	ldi	r20, 0x10	; 16
     428:	2e ef       	ldi	r18, 0xFE	; 254
     42a:	0e 94 46 11 	call	0x228c	; 0x228c <xitoa>
{
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
     42e:	1f 5f       	subi	r17, 0xFF	; 255
     430:	c1 2f       	mov	r28, r17
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	ce 15       	cp	r28, r14
     436:	df 05       	cpc	r29, r15
     438:	6c f3       	brlt	.-38     	; 0x414 <put_dump+0x28>
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
     43a:	81 e5       	ldi	r24, 0x51	; 81
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	0e 94 3f 11 	call	0x227e	; 0x227e <xputs>
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	0c c0       	rjmp	.+24     	; 0x45e <put_dump+0x72>
	for(n = 0; n < cnt; n++)
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
     446:	ec 0d       	add	r30, r12
     448:	fd 1d       	adc	r31, r13
     44a:	90 81       	ld	r25, Z
     44c:	89 2f       	mov	r24, r25
     44e:	80 52       	subi	r24, 0x20	; 32
     450:	8f 35       	cpi	r24, 0x5F	; 95
     452:	08 f0       	brcs	.+2      	; 0x456 <put_dump+0x6a>
     454:	9e e2       	ldi	r25, 0x2E	; 46
     456:	89 2f       	mov	r24, r25
     458:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>
	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
	for(n = 0; n < cnt; n++)
     45c:	1f 5f       	subi	r17, 0xFF	; 255
     45e:	e1 2f       	mov	r30, r17
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	ee 15       	cp	r30, r14
     464:	ff 05       	cpc	r31, r15
     466:	7c f3       	brlt	.-34     	; 0x446 <put_dump+0x5a>
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
	xputc('\n');
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	08 95       	ret

0000047e <put_rc>:



static
void put_rc (FRESULT rc)
{
     47e:	48 2f       	mov	r20, r24
     480:	21 e6       	ldi	r18, 0x61	; 97
     482:	33 e0       	ldi	r19, 0x03	; 3
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	07 c0       	rjmp	.+14     	; 0x496 <put_rc+0x18>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     488:	f9 01       	movw	r30, r18
		while(pgm_read_byte_near(p++));
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	e4 91       	lpm	r30, Z+
     490:	ee 23       	and	r30, r30
     492:	d1 f7       	brne	.-12     	; 0x488 <put_rc+0xa>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
     494:	9f 5f       	subi	r25, 0xFF	; 255
     496:	94 17       	cp	r25, r20
     498:	21 f0       	breq	.+8      	; 0x4a2 <put_rc+0x24>
     49a:	f9 01       	movw	r30, r18
     49c:	84 91       	lpm	r24, Z+
     49e:	88 23       	and	r24, r24
     4a0:	99 f7       	brne	.-26     	; 0x488 <put_rc+0xa>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), (WORD)rc, p);
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <put_rc+0x26>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <put_rc+0x28>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <put_rc+0x2a>
     4a8:	ed b7       	in	r30, 0x3d	; 61
     4aa:	fe b7       	in	r31, 0x3e	; 62
     4ac:	31 96       	adiw	r30, 0x01	; 1
     4ae:	84 e5       	ldi	r24, 0x54	; 84
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	ad b7       	in	r26, 0x3d	; 61
     4b4:	be b7       	in	r27, 0x3e	; 62
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	9c 93       	st	X, r25
     4ba:	8e 93       	st	-X, r24
     4bc:	11 97       	sbiw	r26, 0x01	; 1
     4be:	42 83       	std	Z+2, r20	; 0x02
     4c0:	13 82       	std	Z+3, r1	; 0x03
     4c2:	35 83       	std	Z+5, r19	; 0x05
     4c4:	24 83       	std	Z+4, r18	; 0x04
     4c6:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     4ca:	ed b7       	in	r30, 0x3d	; 61
     4cc:	fe b7       	in	r31, 0x3e	; 62
     4ce:	36 96       	adiw	r30, 0x06	; 6
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	fe bf       	out	0x3e, r31	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	ed bf       	out	0x3d, r30	; 61
}
     4da:	08 95       	ret

000004dc <get_line>:



static
void get_line (char *buff, BYTE len)
{
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
     4ea:	10 e0       	ldi	r17, 0x00	; 0
	for (;;) {
		c = getch();
		putch(c);
		if (c == '\r') break;
		if ((c == '\b') && i) i--;
		if ((c >= ' ') && (i < len - 1))
     4ec:	e6 2e       	mov	r14, r22
     4ee:	ff 24       	eor	r15, r15
     4f0:	08 94       	sec
     4f2:	e1 08       	sbc	r14, r1
     4f4:	f1 08       	sbc	r15, r1
{
	BYTE c, i;

	i = 0;
	for (;;) {
		c = getch();
     4f6:	0e 94 1b 11 	call	0x2236	; 0x2236 <getch>
     4fa:	08 2f       	mov	r16, r24
		putch(c);
     4fc:	0e 94 13 11 	call	0x2226	; 0x2226 <putch>
		if (c == '\r') break;
     500:	0d 30       	cpi	r16, 0x0D	; 13
     502:	91 f0       	breq	.+36     	; 0x528 <get_line+0x4c>
		if ((c == '\b') && i) i--;
     504:	08 30       	cpi	r16, 0x08	; 8
     506:	21 f4       	brne	.+8      	; 0x510 <get_line+0x34>
     508:	11 23       	and	r17, r17
     50a:	a9 f3       	breq	.-22     	; 0x4f6 <get_line+0x1a>
     50c:	11 50       	subi	r17, 0x01	; 1
     50e:	f3 cf       	rjmp	.-26     	; 0x4f6 <get_line+0x1a>
		if ((c >= ' ') && (i < len - 1))
     510:	00 32       	cpi	r16, 0x20	; 32
     512:	88 f3       	brcs	.-30     	; 0x4f6 <get_line+0x1a>
     514:	e1 2f       	mov	r30, r17
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ee 15       	cp	r30, r14
     51a:	ff 05       	cpc	r31, r15
     51c:	64 f7       	brge	.-40     	; 0x4f6 <get_line+0x1a>
				buff[i++] = c;
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	00 83       	st	Z, r16
     524:	1f 5f       	subi	r17, 0xFF	; 255
     526:	e7 cf       	rjmp	.-50     	; 0x4f6 <get_line+0x1a>
	}
	buff[i] = 0;
     528:	c1 0f       	add	r28, r17
     52a:	d1 1d       	adc	r29, r1
     52c:	18 82       	st	Y, r1
	putch('\n');
     52e:	8a e0       	ldi	r24, 0x0A	; 10
     530:	0e 94 13 11 	call	0x2226	; 0x2226 <putch>
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	08 95       	ret

00000542 <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
     542:	2f 92       	push	r2
     544:	3f 92       	push	r3
     546:	4f 92       	push	r4
     548:	5f 92       	push	r5
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	df 93       	push	r29
     564:	cf 93       	push	r28
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	ce 55       	subi	r28, 0x5E	; 94
     56c:	d0 40       	sbci	r29, 0x00	; 0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
	FATFS fs;			/* File system object */
	DIR dir;			/* Directory object */
	FILINFO fno;		/* File information */


    BYTE mcusr = MCUSR;
     578:	e4 b6       	in	r14, 0x34	; 52
	MCUSR = 0x00;
     57a:	14 be       	out	0x34, r1	; 52

//	PORTB = 0b101011;	/* u z H L H u */
//	DDRB =  0b001110;
    PORTB = 0b00010000;      // SS high 
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	85 b9       	out	0x05, r24	; 5
    DDRB =  0b10110000;      // !SS,SCK and MOSI outputs 
     580:	80 eb       	ldi	r24, 0xB0	; 176
     582:	84 b9       	out	0x04, r24	; 4

    uart_init();
     584:	0e 94 c8 10 	call	0x2190	; 0x2190 <uart_init>
	xfunc_out = putch;
     588:	83 e1       	ldi	r24, 0x13	; 19
     58a:	91 e1       	ldi	r25, 0x11	; 17
     58c:	90 93 0a 01 	sts	0x010A, r25
     590:	80 93 09 01 	sts	0x0109, r24

	xputs(PSTR(
     594:	82 e2       	ldi	r24, 0x22	; 34
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 3f 11 	call	0x227e	; 0x227e <xputs>
	"\n| | | |___     | |    | | | |  | |   | |      | |   |  \\/  |"\
	"\n|_| |_____|    |_|    |_| |_|  |_|   |_|      |_|    \\____/ "\
	"\n____________________________________________________________"\
	"\n\n"));

    xputs(PSTR("          JWBXP\nMCUSR: "));
     59c:	8a e0       	ldi	r24, 0x0A	; 10
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 3f 11 	call	0x227e	; 0x227e <xputs>
    xitoa(mcusr,2, -8); xputc('\n');
     5a4:	ff 24       	eor	r15, r15
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	10 e0       	ldi	r17, 0x00	; 0
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	42 e0       	ldi	r20, 0x02	; 2
     5b0:	28 ef       	ldi	r18, 0xF8	; 248
     5b2:	0e 94 46 11 	call	0x228c	; 0x228c <xitoa>
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>

	for (;;) {
		xputc('>');
		get_line(Line, sizeof(Line));
     5bc:	3b e0       	ldi	r19, 0x0B	; 11
     5be:	83 2e       	mov	r8, r19
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	93 2e       	mov	r9, r19
		ptr = Line;

		switch (*ptr++) {
     5c4:	14 01       	movw	r2, r8
     5c6:	08 94       	sec
     5c8:	21 1c       	adc	r2, r1
     5ca:	31 1c       	adc	r3, r1
				xputs(PSTR("Enter lines to write. A blank line finalize the write operation.\n"));
				for (;;) {
					get_line(Line, sizeof(Line));
					if (!Line[0]) break;
					strcat(Line, "\r\n");
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
     5cc:	25 e0       	ldi	r18, 0x05	; 5
     5ce:	62 2e       	mov	r6, r18
     5d0:	71 2c       	mov	r7, r1
     5d2:	6c 0e       	add	r6, r28
     5d4:	7d 1e       	adc	r7, r29
				} while (s1 == 32768);
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     5d6:	97 e0       	ldi	r25, 0x07	; 7
     5d8:	49 2e       	mov	r4, r25
     5da:	51 2c       	mov	r5, r1
     5dc:	4c 0e       	add	r4, r28
     5de:	5d 1e       	adc	r5, r29
     5e0:	5e 01       	movw	r10, r28
     5e2:	08 94       	sec
     5e4:	a1 1c       	adc	r10, r1
     5e6:	b1 1c       	adc	r11, r1

    xputs(PSTR("          JWBXP\nMCUSR: "));
    xitoa(mcusr,2, -8); xputc('\n');

	for (;;) {
		xputc('>');
     5e8:	8e e3       	ldi	r24, 0x3E	; 62
     5ea:	0e 94 2e 11 	call	0x225c	; 0x225c <xputc>
		get_line(Line, sizeof(Line));
     5ee:	8b e0       	ldi	r24, 0x0B	; 11
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	60 e8       	ldi	r22, 0x80	; 128
     5f4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_line>
		ptr = Line;

		switch (*ptr++) {
     5f8:	80 91 0b 01 	lds	r24, 0x010B
     5fc:	3a 82       	std	Y+2, r3	; 0x02
     5fe:	29 82       	std	Y+1, r2	; 0x01
     600:	84 36       	cpi	r24, 0x64	; 100
     602:	19 f0       	breq	.+6      	; 0x60a <main+0xc8>
     604:	86 36       	cpi	r24, 0x66	; 102
     606:	81 f7       	brne	.-32     	; 0x5e8 <main+0xa6>
     608:	62 c0       	rjmp	.+196    	; 0x6ce <main+0x18c>

		case 'd' :
			switch (*ptr++) {
     60a:	80 91 0c 01 	lds	r24, 0x010C
     60e:	2d e0       	ldi	r18, 0x0D	; 13
     610:	31 e0       	ldi	r19, 0x01	; 1
     612:	3a 83       	std	Y+2, r19	; 0x02
     614:	29 83       	std	Y+1, r18	; 0x01
     616:	84 36       	cpi	r24, 0x64	; 100
     618:	29 f0       	breq	.+10     	; 0x624 <main+0xe2>
     61a:	89 36       	cpi	r24, 0x69	; 105
     61c:	29 f7       	brne	.-54     	; 0x5e8 <main+0xa6>
			case 'i' :	/* di - Initialize physical drive */
				res = disk_initialize();
     61e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <disk_initialize>
     622:	1d c0       	rjmp	.+58     	; 0x65e <main+0x11c>
				put_drc(res);
				break;

			case 'd' :	/* dd <sector> <ofs> - Dump partial secrtor 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     624:	c5 01       	movw	r24, r10
     626:	b2 01       	movw	r22, r4
     628:	0e 94 df 11 	call	0x23be	; 0x23be <xatoi>
     62c:	88 23       	and	r24, r24
     62e:	e1 f2       	breq	.-72     	; 0x5e8 <main+0xa6>
     630:	c5 01       	movw	r24, r10
     632:	be 01       	movw	r22, r28
     634:	65 5f       	subi	r22, 0xF5	; 245
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	0e 94 df 11 	call	0x23be	; 0x23be <xatoi>
     63c:	88 23       	and	r24, r24
     63e:	a1 f2       	breq	.-88     	; 0x5e8 <main+0xa6>
				s2 = p2;
     640:	eb 84       	ldd	r14, Y+11	; 0x0b
     642:	fc 84       	ldd	r15, Y+12	; 0x0c
				res = disk_readp((BYTE*)Line, p1, s2, 128);
     644:	4f 81       	ldd	r20, Y+7	; 0x07
     646:	58 85       	ldd	r21, Y+8	; 0x08
     648:	69 85       	ldd	r22, Y+9	; 0x09
     64a:	7a 85       	ldd	r23, Y+10	; 0x0a
     64c:	c1 01       	movw	r24, r2
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	97 01       	movw	r18, r14
     652:	00 e8       	ldi	r16, 0x80	; 128
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
				if (res) { put_drc(res); break; }
     65a:	88 23       	and	r24, r24
     65c:	81 f0       	breq	.+32     	; 0x67e <main+0x13c>


static
void put_drc (BYTE res)
{
	xprintf(PSTR("rc=%d\n"), res);
     65e:	00 d0       	rcall	.+0      	; 0x660 <main+0x11e>
     660:	00 d0       	rcall	.+0      	; 0x662 <main+0x120>
     662:	ed b7       	in	r30, 0x3d	; 61
     664:	fe b7       	in	r31, 0x3e	; 62
     666:	31 96       	adiw	r30, 0x01	; 1
     668:	2a e4       	ldi	r18, 0x4A	; 74
     66a:	33 e0       	ldi	r19, 0x03	; 3
     66c:	ad b7       	in	r26, 0x3d	; 61
     66e:	be b7       	in	r27, 0x3e	; 62
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	3c 93       	st	X, r19
     674:	2e 93       	st	-X, r18
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	82 83       	std	Z+2, r24	; 0x02
     67a:	13 82       	std	Z+3, r1	; 0x03
     67c:	17 c2       	rjmp	.+1070   	; 0xaac <__stack+0x1ad>
			case 'd' :	/* dd <sector> <ofs> - Dump partial secrtor 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
     67e:	80 e8       	ldi	r24, 0x80	; 128
     680:	c8 2e       	mov	r12, r24
     682:	d1 2c       	mov	r13, r1
     684:	ce 0c       	add	r12, r14
     686:	df 1c       	adc	r13, r15
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
     688:	9a 82       	std	Y+2, r9	; 0x02
     68a:	89 82       	std	Y+1, r8	; 0x01
     68c:	00 e8       	ldi	r16, 0x80	; 128
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	1a c0       	rjmp	.+52     	; 0x6c6 <main+0x184>
					s1 = (s3 - s2 >= 16) ? 16 : s3 - s2;
     692:	98 01       	movw	r18, r16
     694:	01 31       	cpi	r16, 0x11	; 17
     696:	11 05       	cpc	r17, r1
     698:	10 f0       	brcs	.+4      	; 0x69e <main+0x15c>
     69a:	20 e1       	ldi	r18, 0x10	; 16
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	3c 83       	std	Y+4, r19	; 0x04
     6a0:	2b 83       	std	Y+3, r18	; 0x03
					put_dump((BYTE*)ptr, s2, s1);
     6a2:	a7 01       	movw	r20, r14
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	0e 94 f6 01 	call	0x3ec	; 0x3ec <put_dump>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
     6b0:	80 e1       	ldi	r24, 0x10	; 16
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	e8 0e       	add	r14, r24
     6b6:	f9 1e       	adc	r15, r25
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	40 96       	adiw	r24, 0x10	; 16
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	00 51       	subi	r16, 0x10	; 16
     6c4:	10 40       	sbci	r17, 0x00	; 0
     6c6:	ec 14       	cp	r14, r12
     6c8:	fd 04       	cpc	r15, r13
     6ca:	18 f3       	brcs	.-58     	; 0x692 <main+0x150>
     6cc:	8d cf       	rjmp	.-230    	; 0x5e8 <main+0xa6>
				break;
			}
			break;

		case 'f' :
			switch (*ptr++) {
     6ce:	80 91 0c 01 	lds	r24, 0x010C
     6d2:	ad e0       	ldi	r26, 0x0D	; 13
     6d4:	b1 e0       	ldi	r27, 0x01	; 1
     6d6:	ba 83       	std	Y+2, r27	; 0x02
     6d8:	a9 83       	std	Y+1, r26	; 0x01
     6da:	8c 36       	cpi	r24, 0x6C	; 108
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <main+0x19e>
     6de:	6c c1       	rjmp	.+728    	; 0x9b8 <__stack+0xb9>
     6e0:	8d 36       	cpi	r24, 0x6D	; 109
     6e2:	48 f4       	brcc	.+18     	; 0x6f6 <main+0x1b4>
     6e4:	85 36       	cpi	r24, 0x65	; 101
     6e6:	09 f4       	brne	.+2      	; 0x6ea <main+0x1a8>
     6e8:	26 c1       	rjmp	.+588    	; 0x936 <__stack+0x37>
     6ea:	89 36       	cpi	r24, 0x69	; 105
     6ec:	a1 f0       	breq	.+40     	; 0x716 <main+0x1d4>
     6ee:	84 36       	cpi	r24, 0x64	; 100
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <main+0x1b2>
     6f2:	7a cf       	rjmp	.-268    	; 0x5e8 <main+0xa6>
     6f4:	21 c0       	rjmp	.+66     	; 0x738 <main+0x1f6>
     6f6:	80 37       	cpi	r24, 0x70	; 112
     6f8:	09 f4       	brne	.+2      	; 0x6fc <main+0x1ba>
     6fa:	f3 c0       	rjmp	.+486    	; 0x8e2 <main+0x3a0>
     6fc:	81 37       	cpi	r24, 0x71	; 113
     6fe:	20 f4       	brcc	.+8      	; 0x708 <main+0x1c6>
     700:	8f 36       	cpi	r24, 0x6F	; 111
     702:	09 f0       	breq	.+2      	; 0x706 <main+0x1c4>
     704:	71 cf       	rjmp	.-286    	; 0x5e8 <main+0xa6>
     706:	0f c0       	rjmp	.+30     	; 0x726 <main+0x1e4>
     708:	84 37       	cpi	r24, 0x74	; 116
     70a:	09 f4       	brne	.+2      	; 0x70e <main+0x1cc>
     70c:	55 c0       	rjmp	.+170    	; 0x7b8 <main+0x276>
     70e:	87 37       	cpi	r24, 0x77	; 119
     710:	09 f0       	breq	.+2      	; 0x714 <main+0x1d2>
     712:	6a cf       	rjmp	.-300    	; 0x5e8 <main+0xa6>
     714:	63 c0       	rjmp	.+198    	; 0x7dc <main+0x29a>

			case 'i' :	/* fi - Mount the volume */
				put_rc(pf_mount(&fs));
     716:	ce 01       	movw	r24, r28
     718:	c5 96       	adiw	r24, 0x35	; 53
     71a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <pf_mount>
     71e:	58 c1       	rjmp	.+688    	; 0x9d0 <__stack+0xd1>
				break;

			case 'o' :	/* fo <file> - Open a file */
				while (*ptr == ' ') ptr++;
     720:	31 96       	adiw	r30, 0x01	; 1
     722:	fa 83       	std	Y+2, r31	; 0x02
     724:	e9 83       	std	Y+1, r30	; 0x01
     726:	e9 81       	ldd	r30, Y+1	; 0x01
     728:	fa 81       	ldd	r31, Y+2	; 0x02
     72a:	80 81       	ld	r24, Z
     72c:	80 32       	cpi	r24, 0x20	; 32
     72e:	c1 f3       	breq	.-16     	; 0x720 <main+0x1de>
				put_rc(pf_open(ptr));
     730:	cf 01       	movw	r24, r30
     732:	0e 94 a9 0c 	call	0x1952	; 0x1952 <pf_open>
     736:	4c c1       	rjmp	.+664    	; 0x9d0 <__stack+0xd1>
				break;
#if _USE_READ
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				p2 = fs.fptr;
     738:	2f 96       	adiw	r28, 0x0f	; 15
     73a:	8c ad       	ldd	r24, Y+60	; 0x3c
     73c:	9d ad       	ldd	r25, Y+61	; 0x3d
     73e:	ae ad       	ldd	r26, Y+62	; 0x3e
     740:	bf ad       	ldd	r27, Y+63	; 0x3f
     742:	2f 97       	sbiw	r28, 0x0f	; 15
     744:	8b 87       	std	Y+11, r24	; 0x0b
     746:	9c 87       	std	Y+12, r25	; 0x0c
     748:	ad 87       	std	Y+13, r26	; 0x0d
     74a:	be 87       	std	Y+14, r27	; 0x0e
				res = pf_read(Line, sizeof(Line), &s1);
     74c:	c1 01       	movw	r24, r2
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	60 e8       	ldi	r22, 0x80	; 128
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	ae 01       	movw	r20, r28
     756:	4d 5f       	subi	r20, 0xFD	; 253
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <pf_read>
				if (res != FR_OK) { put_rc(res); break; }
     75e:	88 23       	and	r24, r24
     760:	09 f0       	breq	.+2      	; 0x764 <main+0x222>
     762:	36 c1       	rjmp	.+620    	; 0x9d0 <__stack+0xd1>
				ptr = Line;
     764:	9a 82       	std	Y+2, r9	; 0x02
     766:	89 82       	std	Y+1, r8	; 0x01
     768:	22 c0       	rjmp	.+68     	; 0x7ae <main+0x26c>
				while (s1) {
					s2 = (s1 >= 16) ? 16 : s1;
     76a:	9c 01       	movw	r18, r24
     76c:	81 31       	cpi	r24, 0x11	; 17
     76e:	91 05       	cpc	r25, r1
     770:	10 f0       	brcs	.+4      	; 0x776 <main+0x234>
     772:	20 e1       	ldi	r18, 0x10	; 16
     774:	30 e0       	ldi	r19, 0x00	; 0
					s1 -= s2;
     776:	82 1b       	sub	r24, r18
     778:	93 0b       	sbc	r25, r19
     77a:	9c 83       	std	Y+4, r25	; 0x04
     77c:	8b 83       	std	Y+3, r24	; 0x03
					put_dump((BYTE*)ptr, p2, s2);
     77e:	4b 85       	ldd	r20, Y+11	; 0x0b
     780:	5c 85       	ldd	r21, Y+12	; 0x0c
     782:	6d 85       	ldd	r22, Y+13	; 0x0d
     784:	7e 85       	ldd	r23, Y+14	; 0x0e
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <put_dump>
					ptr += 16; p2 += 16;
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	40 96       	adiw	r24, 0x10	; 16
     794:	9a 83       	std	Y+2, r25	; 0x02
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	8b 85       	ldd	r24, Y+11	; 0x0b
     79a:	9c 85       	ldd	r25, Y+12	; 0x0c
     79c:	ad 85       	ldd	r26, Y+13	; 0x0d
     79e:	be 85       	ldd	r27, Y+14	; 0x0e
     7a0:	40 96       	adiw	r24, 0x10	; 16
     7a2:	a1 1d       	adc	r26, r1
     7a4:	b1 1d       	adc	r27, r1
     7a6:	8b 87       	std	Y+11, r24	; 0x0b
     7a8:	9c 87       	std	Y+12, r25	; 0x0c
     7aa:	ad 87       	std	Y+13, r26	; 0x0d
     7ac:	be 87       	std	Y+14, r27	; 0x0e
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				p2 = fs.fptr;
				res = pf_read(Line, sizeof(Line), &s1);
				if (res != FR_OK) { put_rc(res); break; }
				ptr = Line;
				while (s1) {
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	d1 f6       	brne	.-76     	; 0x76a <main+0x228>
     7b6:	18 cf       	rjmp	.-464    	; 0x5e8 <main+0xa6>
				}
				break;

			case 't' :	/* ft - Type the file data via dreadp function */
				do {
					res = pf_read(0, 32768, &s1);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e8       	ldi	r23, 0x80	; 128
     7c0:	ae 01       	movw	r20, r28
     7c2:	4d 5f       	subi	r20, 0xFD	; 253
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <pf_read>
					if (res != FR_OK) { put_rc(res); break; }
     7ca:	88 23       	and	r24, r24
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <main+0x28e>
     7ce:	00 c1       	rjmp	.+512    	; 0x9d0 <__stack+0xd1>
				} while (s1 == 32768);
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	80 50       	subi	r24, 0x00	; 0
     7d6:	90 48       	sbci	r25, 0x80	; 128
     7d8:	79 f3       	breq	.-34     	; 0x7b8 <main+0x276>
     7da:	06 cf       	rjmp	.-500    	; 0x5e8 <main+0xa6>
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
     7dc:	c5 01       	movw	r24, r10
     7de:	b2 01       	movw	r22, r4
     7e0:	0e 94 df 11 	call	0x23be	; 0x23be <xatoi>
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <main+0x2a8>
     7e8:	ff ce       	rjmp	.-514    	; 0x5e8 <main+0xa6>
     7ea:	c5 01       	movw	r24, r10
     7ec:	be 01       	movw	r22, r28
     7ee:	65 5f       	subi	r22, 0xF5	; 245
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	0e 94 df 11 	call	0x23be	; 0x23be <xatoi>
     7f6:	88 23       	and	r24, r24
     7f8:	09 f4       	brne	.+2      	; 0x7fc <main+0x2ba>
     7fa:	f6 ce       	rjmp	.-532    	; 0x5e8 <main+0xa6>
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
     7fc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7fe:	eb e0       	ldi	r30, 0x0B	; 11
     800:	f1 e0       	ldi	r31, 0x01	; 1
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <main+0x2ca>
     808:	21 93       	st	Z+, r18
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	80 38       	cpi	r24, 0x80	; 128
     80e:	91 05       	cpc	r25, r1
     810:	d8 f3       	brcs	.-10     	; 0x808 <main+0x2c6>
     812:	9c 83       	std	Y+4, r25	; 0x04
     814:	8b 83       	std	Y+3, r24	; 0x03
				p2 = 0;
     816:	1b 86       	std	Y+11, r1	; 0x0b
     818:	1c 86       	std	Y+12, r1	; 0x0c
     81a:	1d 86       	std	Y+13, r1	; 0x0d
     81c:	1e 86       	std	Y+14, r1	; 0x0e
     81e:	34 c0       	rjmp	.+104    	; 0x888 <main+0x346>
				while (p1) {
					if ((UINT)p1 >= sizeof(Line)) {
     820:	8c 01       	movw	r16, r24
     822:	80 38       	cpi	r24, 0x80	; 128
     824:	91 05       	cpc	r25, r1
     826:	58 f0       	brcs	.+22     	; 0x83e <main+0x2fc>
						cnt = sizeof(Line); p1 -= sizeof(Line);
     828:	80 58       	subi	r24, 0x80	; 128
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	a0 40       	sbci	r26, 0x00	; 0
     82e:	b0 40       	sbci	r27, 0x00	; 0
     830:	8f 83       	std	Y+7, r24	; 0x07
     832:	98 87       	std	Y+8, r25	; 0x08
     834:	a9 87       	std	Y+9, r26	; 0x09
     836:	ba 87       	std	Y+10, r27	; 0x0a
     838:	00 e8       	ldi	r16, 0x80	; 128
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	04 c0       	rjmp	.+8      	; 0x846 <main+0x304>
					} else {
						cnt = (WORD)p1; p1 = 0;
     83e:	1f 82       	std	Y+7, r1	; 0x07
     840:	18 86       	std	Y+8, r1	; 0x08
     842:	19 86       	std	Y+9, r1	; 0x09
     844:	1a 86       	std	Y+10, r1	; 0x0a
					}
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
     846:	8b e0       	ldi	r24, 0x0B	; 11
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	b8 01       	movw	r22, r16
     84c:	a3 01       	movw	r20, r6
     84e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <pf_write>
     852:	e8 2f       	mov	r30, r24
					p2 += w;
     854:	6d 81       	ldd	r22, Y+5	; 0x05
     856:	7e 81       	ldd	r23, Y+6	; 0x06
     858:	9b 01       	movw	r18, r22
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	8b 85       	ldd	r24, Y+11	; 0x0b
     860:	9c 85       	ldd	r25, Y+12	; 0x0c
     862:	ad 85       	ldd	r26, Y+13	; 0x0d
     864:	be 85       	ldd	r27, Y+14	; 0x0e
     866:	82 0f       	add	r24, r18
     868:	93 1f       	adc	r25, r19
     86a:	a4 1f       	adc	r26, r20
     86c:	b5 1f       	adc	r27, r21
     86e:	8b 87       	std	Y+11, r24	; 0x0b
     870:	9c 87       	std	Y+12, r25	; 0x0c
     872:	ad 87       	std	Y+13, r26	; 0x0d
     874:	be 87       	std	Y+14, r27	; 0x0e
					if (res != FR_OK) { put_rc(res); break; }
     876:	ee 23       	and	r30, r30
     878:	21 f0       	breq	.+8      	; 0x882 <main+0x340>
     87a:	8e 2f       	mov	r24, r30
     87c:	0e 94 3f 02 	call	0x47e	; 0x47e <put_rc>
     880:	0b c0       	rjmp	.+22     	; 0x898 <main+0x356>
					if (cnt != w) break;
     882:	06 17       	cp	r16, r22
     884:	17 07       	cpc	r17, r23
     886:	41 f4       	brne	.+16     	; 0x898 <main+0x356>
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
				p2 = 0;
				while (p1) {
     888:	8f 81       	ldd	r24, Y+7	; 0x07
     88a:	98 85       	ldd	r25, Y+8	; 0x08
     88c:	a9 85       	ldd	r26, Y+9	; 0x09
     88e:	ba 85       	ldd	r27, Y+10	; 0x0a
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	a1 05       	cpc	r26, r1
     894:	b1 05       	cpc	r27, r1
     896:	21 f6       	brne	.-120    	; 0x820 <main+0x2de>
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
					p2 += w;
					if (res != FR_OK) { put_rc(res); break; }
					if (cnt != w) break;
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	a3 01       	movw	r20, r6
     8a2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <pf_write>
     8a6:	18 2f       	mov	r17, r24
				put_rc(res);
     8a8:	0e 94 3f 02 	call	0x47e	; 0x47e <put_rc>
				if (res == FR_OK)
     8ac:	11 23       	and	r17, r17
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <main+0x370>
     8b0:	9b ce       	rjmp	.-714    	; 0x5e8 <main+0xa6>
					xprintf(PSTR("%lu bytes written.\n"), p2);
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <main+0x372>
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <main+0x374>
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <main+0x376>
     8b8:	26 ef       	ldi	r18, 0xF6	; 246
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	ed b7       	in	r30, 0x3d	; 61
     8be:	fe b7       	in	r31, 0x3e	; 62
     8c0:	32 83       	std	Z+2, r19	; 0x02
     8c2:	21 83       	std	Z+1, r18	; 0x01
     8c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     8ca:	be 85       	ldd	r27, Y+14	; 0x0e
     8cc:	83 83       	std	Z+3, r24	; 0x03
     8ce:	94 83       	std	Z+4, r25	; 0x04
     8d0:	a5 83       	std	Z+5, r26	; 0x05
     8d2:	b6 83       	std	Z+6, r27	; 0x06
     8d4:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     8d8:	2d b7       	in	r18, 0x3d	; 61
     8da:	3e b7       	in	r19, 0x3e	; 62
     8dc:	2a 5f       	subi	r18, 0xFA	; 250
     8de:	3f 4f       	sbci	r19, 0xFF	; 255
     8e0:	62 c0       	rjmp	.+196    	; 0x9a6 <__stack+0xa7>
				break;

			case 'p' :	/* fp - Write console input to the file */
				xputs(PSTR("Enter lines to write. A blank line finalize the write operation.\n"));
     8e2:	84 eb       	ldi	r24, 0xB4	; 180
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 3f 11 	call	0x227e	; 0x227e <xputs>
				for (;;) {
					get_line(Line, sizeof(Line));
     8ea:	8b e0       	ldi	r24, 0x0B	; 11
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	60 e8       	ldi	r22, 0x80	; 128
     8f0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <get_line>
					if (!Line[0]) break;
     8f4:	80 91 0b 01 	lds	r24, 0x010B
     8f8:	88 23       	and	r24, r24
     8fa:	a9 f0       	breq	.+42     	; 0x926 <__stack+0x27>
					strcat(Line, "\r\n");
     8fc:	8b e0       	ldi	r24, 0x0B	; 11
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <strcat>
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
     908:	f4 01       	movw	r30, r8
     90a:	01 90       	ld	r0, Z+
     90c:	00 20       	and	r0, r0
     90e:	e9 f7       	brne	.-6      	; 0x90a <__stack+0xb>
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	eb 50       	subi	r30, 0x0B	; 11
     914:	f1 40       	sbci	r31, 0x01	; 1
     916:	8b e0       	ldi	r24, 0x0B	; 11
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	bf 01       	movw	r22, r30
     91c:	a3 01       	movw	r20, r6
     91e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <pf_write>
					if (res) break;
     922:	88 23       	and	r24, r24
     924:	11 f3       	breq	.-60     	; 0x8ea <main+0x3a8>
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	a3 01       	movw	r20, r6
     930:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <pf_write>
     934:	4d c0       	rjmp	.+154    	; 0x9d0 <__stack+0xd1>
				put_rc(res);
				break;
#endif
#if _USE_LSEEK
			case 'e' :	/* fe - Move file pointer of the file */
				if (!xatoi(&ptr, &p1)) break;
     936:	c5 01       	movw	r24, r10
     938:	b2 01       	movw	r22, r4
     93a:	0e 94 df 11 	call	0x23be	; 0x23be <xatoi>
     93e:	88 23       	and	r24, r24
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	52 ce       	rjmp	.-860    	; 0x5e8 <main+0xa6>
				res = pf_lseek(p1);
     944:	6f 81       	ldd	r22, Y+7	; 0x07
     946:	78 85       	ldd	r23, Y+8	; 0x08
     948:	89 85       	ldd	r24, Y+9	; 0x09
     94a:	9a 85       	ldd	r25, Y+10	; 0x0a
     94c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <pf_lseek>
     950:	18 2f       	mov	r17, r24
				put_rc(res);
     952:	0e 94 3f 02 	call	0x47e	; 0x47e <put_rc>
				if (res == FR_OK)
     956:	11 23       	and	r17, r17
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	46 ce       	rjmp	.-884    	; 0x5e8 <main+0xa6>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), fs.fptr, fs.fptr);
     95c:	2f 96       	adiw	r28, 0x0f	; 15
     95e:	8c ad       	ldd	r24, Y+60	; 0x3c
     960:	9d ad       	ldd	r25, Y+61	; 0x3d
     962:	ae ad       	ldd	r26, Y+62	; 0x3e
     964:	bf ad       	ldd	r27, Y+63	; 0x3f
     966:	2f 97       	sbiw	r28, 0x0f	; 15
     968:	ed b7       	in	r30, 0x3d	; 61
     96a:	fe b7       	in	r31, 0x3e	; 62
     96c:	3a 97       	sbiw	r30, 0x0a	; 10
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	fe bf       	out	0x3e, r31	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	ed bf       	out	0x3d, r30	; 61
     978:	4d b7       	in	r20, 0x3d	; 61
     97a:	5e b7       	in	r21, 0x3e	; 62
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	21 ea       	ldi	r18, 0xA1	; 161
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	32 83       	std	Z+2, r19	; 0x02
     986:	21 83       	std	Z+1, r18	; 0x01
     988:	fa 01       	movw	r30, r20
     98a:	82 83       	std	Z+2, r24	; 0x02
     98c:	93 83       	std	Z+3, r25	; 0x03
     98e:	a4 83       	std	Z+4, r26	; 0x04
     990:	b5 83       	std	Z+5, r27	; 0x05
     992:	86 83       	std	Z+6, r24	; 0x06
     994:	97 83       	std	Z+7, r25	; 0x07
     996:	a0 87       	std	Z+8, r26	; 0x08
     998:	b1 87       	std	Z+9, r27	; 0x09
     99a:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     99e:	2d b7       	in	r18, 0x3d	; 61
     9a0:	3e b7       	in	r19, 0x3e	; 62
     9a2:	26 5f       	subi	r18, 0xF6	; 246
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	3e bf       	out	0x3e, r19	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	2d bf       	out	0x3d, r18	; 61
     9b0:	1b ce       	rjmp	.-970    	; 0x5e8 <main+0xa6>
				break;
#endif
#if _USE_DIR
			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
     9b2:	31 96       	adiw	r30, 0x01	; 1
     9b4:	fa 83       	std	Y+2, r31	; 0x02
     9b6:	e9 83       	std	Y+1, r30	; 0x01
     9b8:	e9 81       	ldd	r30, Y+1	; 0x01
     9ba:	fa 81       	ldd	r31, Y+2	; 0x02
     9bc:	80 81       	ld	r24, Z
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	c1 f3       	breq	.-16     	; 0x9b2 <__stack+0xb3>
				res = pf_opendir(&dir, ptr);
     9c2:	ce 01       	movw	r24, r28
     9c4:	0f 96       	adiw	r24, 0x0f	; 15
     9c6:	bf 01       	movw	r22, r30
     9c8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <pf_opendir>
				if (res) { put_rc(res); break; }
     9cc:	88 23       	and	r24, r24
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <__stack+0xd7>
     9d0:	0e 94 3f 02 	call	0x47e	; 0x47e <put_rc>
     9d4:	09 ce       	rjmp	.-1006   	; 0x5e8 <main+0xa6>
				s1 = 0;
     9d6:	1c 82       	std	Y+4, r1	; 0x04
     9d8:	1b 82       	std	Y+3, r1	; 0x03
				for(;;) {
					res = pf_readdir(&dir, &fno);
     9da:	ce 01       	movw	r24, r28
     9dc:	0f 96       	adiw	r24, 0x0f	; 15
     9de:	be 01       	movw	r22, r28
     9e0:	61 5e       	subi	r22, 0xE1	; 225
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 89 0a 	call	0x1512	; 0x1512 <pf_readdir>
					if (res != FR_OK) { put_rc(res); break; }
     9e8:	88 23       	and	r24, r24
     9ea:	19 f0       	breq	.+6      	; 0x9f2 <__stack+0xf3>
     9ec:	0e 94 3f 02 	call	0x47e	; 0x47e <put_rc>
     9f0:	51 c0       	rjmp	.+162    	; 0xa94 <__stack+0x195>
					if (!fno.fname[0]) break;
     9f2:	88 a5       	ldd	r24, Y+40	; 0x28
     9f4:	88 23       	and	r24, r24
     9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	4d c0       	rjmp	.+154    	; 0xa94 <__stack+0x195>
					if (fno.fattrib & AM_DIR)
     9fa:	8f a1       	ldd	r24, Y+39	; 0x27
     9fc:	84 ff       	sbrs	r24, 4
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <__stack+0x133>
						xprintf(PSTR("   <DIR>   %s\n"), fno.fname);
     a00:	00 d0       	rcall	.+0      	; 0xa02 <__stack+0x103>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <__stack+0x105>
     a04:	e2 e9       	ldi	r30, 0x92	; 146
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ad b7       	in	r26, 0x3d	; 61
     a0a:	be b7       	in	r27, 0x3e	; 62
     a0c:	12 96       	adiw	r26, 0x02	; 2
     a0e:	fc 93       	st	X, r31
     a10:	ee 93       	st	-X, r30
     a12:	11 97       	sbiw	r26, 0x01	; 1
     a14:	28 e2       	ldi	r18, 0x28	; 40
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	2c 0f       	add	r18, r28
     a1a:	3d 1f       	adc	r19, r29
     a1c:	14 96       	adiw	r26, 0x04	; 4
     a1e:	3c 93       	st	X, r19
     a20:	2e 93       	st	-X, r18
     a22:	13 97       	sbiw	r26, 0x03	; 3
     a24:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	2b c0       	rjmp	.+86     	; 0xa88 <__stack+0x189>
					else
						xprintf(PSTR("%9lu  %s\n"), fno.fsize, fno.fname);
     a32:	8d b7       	in	r24, 0x3d	; 61
     a34:	9e b7       	in	r25, 0x3e	; 62
     a36:	08 97       	sbiw	r24, 0x08	; 8
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	9e bf       	out	0x3e, r25	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	8d bf       	out	0x3d, r24	; 61
     a42:	ed b7       	in	r30, 0x3d	; 61
     a44:	fe b7       	in	r31, 0x3e	; 62
     a46:	31 96       	adiw	r30, 0x01	; 1
     a48:	28 e8       	ldi	r18, 0x88	; 136
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	ad b7       	in	r26, 0x3d	; 61
     a4e:	be b7       	in	r27, 0x3e	; 62
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	3c 93       	st	X, r19
     a54:	2e 93       	st	-X, r18
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a5a:	98 a1       	ldd	r25, Y+32	; 0x20
     a5c:	a9 a1       	ldd	r26, Y+33	; 0x21
     a5e:	ba a1       	ldd	r27, Y+34	; 0x22
     a60:	82 83       	std	Z+2, r24	; 0x02
     a62:	93 83       	std	Z+3, r25	; 0x03
     a64:	a4 83       	std	Z+4, r26	; 0x04
     a66:	b5 83       	std	Z+5, r27	; 0x05
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8c 0f       	add	r24, r28
     a6e:	9d 1f       	adc	r25, r29
     a70:	97 83       	std	Z+7, r25	; 0x07
     a72:	86 83       	std	Z+6, r24	; 0x06
     a74:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     a78:	ad b7       	in	r26, 0x3d	; 61
     a7a:	be b7       	in	r27, 0x3e	; 62
     a7c:	18 96       	adiw	r26, 0x08	; 8
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	be bf       	out	0x3e, r27	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	ad bf       	out	0x3d, r26	; 61
					s1++;
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	9c 81       	ldd	r25, Y+4	; 0x04
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	9c 83       	std	Y+4, r25	; 0x04
     a90:	8b 83       	std	Y+3, r24	; 0x03
     a92:	a3 cf       	rjmp	.-186    	; 0x9da <__stack+0xdb>
				}
				xprintf(PSTR("%u item(s)\n"), s1);
     a94:	00 d0       	rcall	.+0      	; 0xa96 <__stack+0x197>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <__stack+0x199>
     a98:	2c e7       	ldi	r18, 0x7C	; 124
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	ed b7       	in	r30, 0x3d	; 61
     a9e:	fe b7       	in	r31, 0x3e	; 62
     aa0:	32 83       	std	Z+2, r19	; 0x02
     aa2:	21 83       	std	Z+1, r18	; 0x01
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	94 83       	std	Z+4, r25	; 0x04
     aaa:	83 83       	std	Z+3, r24	; 0x03
     aac:	0e 94 81 11 	call	0x2302	; 0x2302 <xprintf>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	97 cd       	rjmp	.-1234   	; 0x5e8 <main+0xa6>

00000aba <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	d8 2e       	mov	r13, r24
     ac6:	7a 01       	movw	r14, r20
     ac8:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     aca:	87 ff       	sbrs	r24, 7
     acc:	0b c0       	rjmp	.+22     	; 0xae4 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ace:	87 e7       	ldi	r24, 0x77	; 119
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
		if (res > 1) return res;
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	98 f5       	brcc	.+102    	; 0xb46 <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     ae0:	8f e7       	ldi	r24, 0x7F	; 127
     ae2:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
     ae4:	2c 9a       	sbi	0x05, 4	; 5
	rcv_spi();
     ae6:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
	SELECT();
     aea:	2c 98       	cbi	0x05, 4	; 5
	rcv_spi();
     aec:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
     af0:	8d 2d       	mov	r24, r13
     af2:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     af6:	81 2f       	mov	r24, r17
     af8:	99 27       	eor	r25, r25
     afa:	aa 27       	eor	r26, r26
     afc:	bb 27       	eor	r27, r27
     afe:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     b02:	c8 01       	movw	r24, r16
     b04:	aa 27       	eor	r26, r26
     b06:	bb 27       	eor	r27, r27
     b08:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     b0c:	bb 27       	eor	r27, r27
     b0e:	a1 2f       	mov	r26, r17
     b10:	90 2f       	mov	r25, r16
     b12:	8f 2d       	mov	r24, r15
     b14:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     b18:	8e 2d       	mov	r24, r14
     b1a:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	d8 16       	cp	r13, r24
     b22:	11 f4       	brne	.+4      	; 0xb28 <send_cmd+0x6e>
     b24:	85 e9       	ldi	r24, 0x95	; 149
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b28:	88 e4       	ldi	r24, 0x48	; 72
     b2a:	d8 16       	cp	r13, r24
     b2c:	11 f4       	brne	.+4      	; 0xb32 <send_cmd+0x78>
     b2e:	87 e8       	ldi	r24, 0x87	; 135
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <send_cmd+0x7a>
     b32:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b34:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
     b38:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     b3a:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
	} while ((res & 0x80) && --n);
     b3e:	87 ff       	sbrs	r24, 7
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <send_cmd+0x8c>
     b42:	11 50       	subi	r17, 0x01	; 1
     b44:	d1 f7       	brne	.-12     	; 0xb3a <send_cmd+0x80>

	return res;			/* Return with the response value */
}
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	08 95       	ret

00000b52 <disk_writep>:
#if _USE_WRITE
DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	d9 f0       	breq	.+54     	; 0xb96 <disk_writep+0x44>
		bc = (WORD)sa;
     b60:	ea 01       	movw	r28, r20
     b62:	0f c0       	rjmp	.+30     	; 0xb82 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
     b64:	f8 01       	movw	r30, r16
     b66:	81 91       	ld	r24, Z+
     b68:	8f 01       	movw	r16, r30
     b6a:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
			wc--; bc--;
     b6e:	80 91 04 01 	lds	r24, 0x0104
     b72:	90 91 05 01 	lds	r25, 0x0105
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	90 93 05 01 	sts	0x0105, r25
     b7c:	80 93 04 01 	sts	0x0104, r24
     b80:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
     b82:	20 97       	sbiw	r28, 0x00	; 0
     b84:	09 f4       	brne	.+2      	; 0xb88 <disk_writep+0x36>
     b86:	52 c0       	rjmp	.+164    	; 0xc2c <disk_writep+0xda>
     b88:	80 91 04 01 	lds	r24, 0x0104
     b8c:	90 91 05 01 	lds	r25, 0x0105
     b90:	89 2b       	or	r24, r25
     b92:	41 f7       	brne	.-48     	; 0xb64 <disk_writep+0x12>
     b94:	4b c0       	rjmp	.+150    	; 0xc2c <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
     b96:	41 15       	cp	r20, r1
     b98:	51 05       	cpc	r21, r1
     b9a:	61 05       	cpc	r22, r1
     b9c:	71 05       	cpc	r23, r1
     b9e:	f9 f0       	breq	.+62     	; 0xbde <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
     ba0:	80 91 06 01 	lds	r24, 0x0106
     ba4:	83 fd       	sbrc	r24, 3
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <disk_writep+0x64>
     ba8:	39 e0       	ldi	r19, 0x09	; 9
     baa:	44 0f       	add	r20, r20
     bac:	55 1f       	adc	r21, r21
     bae:	66 1f       	adc	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	3a 95       	dec	r19
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
     bb6:	88 e5       	ldi	r24, 0x58	; 88
     bb8:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <disk_writep+0x72>
     bc0:	11 e0       	ldi	r17, 0x01	; 1
     bc2:	35 c0       	rjmp	.+106    	; 0xc2e <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
     bca:	8e ef       	ldi	r24, 0xFE	; 254
     bcc:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
				wc = 512;							/* Set byte counter */
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	90 93 05 01 	sts	0x0105, r25
     bd8:	80 93 04 01 	sts	0x0104, r24
     bdc:	27 c0       	rjmp	.+78     	; 0xc2c <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
     bde:	c0 91 04 01 	lds	r28, 0x0104
     be2:	d0 91 05 01 	lds	r29, 0x0105
     be6:	22 96       	adiw	r28, 0x02	; 2
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 bb 10 	call	0x2176	; 0x2176 <xmit_spi>
     bf0:	21 97       	sbiw	r28, 0x01	; 1
     bf2:	20 97       	sbiw	r28, 0x00	; 0
     bf4:	d1 f7       	brne	.-12     	; 0xbea <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
     bf6:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     bfa:	8f 71       	andi	r24, 0x1F	; 31
     bfc:	85 30       	cpi	r24, 0x05	; 5
     bfe:	89 f4       	brne	.+34     	; 0xc22 <disk_writep+0xd0>
     c00:	c8 e8       	ldi	r28, 0x88	; 136
     c02:	d3 e1       	ldi	r29, 0x13	; 19
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
     c06:	0e 94 af 10 	call	0x215e	; 0x215e <dly_100us>
     c0a:	21 97       	sbiw	r28, 0x01	; 1
     c0c:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	19 f0       	breq	.+6      	; 0xc1a <disk_writep+0xc8>
     c14:	20 97       	sbiw	r28, 0x00	; 0
     c16:	b9 f7       	brne	.-18     	; 0xc06 <disk_writep+0xb4>
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <disk_writep+0xd0>
				if (bc) res = RES_OK;
     c1a:	cd 2b       	or	r28, r29
     c1c:	11 f0       	breq	.+4      	; 0xc22 <disk_writep+0xd0>
     c1e:	10 e0       	ldi	r17, 0x00	; 0
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <disk_writep+0xd2>
     c22:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
     c24:	2c 9a       	sbi	0x05, 4	; 5
			rcv_spi();
     c26:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <disk_writep+0xdc>
     c2c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
     c2e:	81 2f       	mov	r24, r17
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	7c 01       	movw	r14, r24
     c4c:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
     c4e:	80 91 06 01 	lds	r24, 0x0106
     c52:	83 fd       	sbrc	r24, 3
     c54:	07 c0       	rjmp	.+14     	; 0xc64 <disk_readp+0x2a>
     c56:	e9 e0       	ldi	r30, 0x09	; 9
     c58:	44 0f       	add	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	ea 95       	dec	r30
     c62:	d1 f7       	brne	.-12     	; 0xc58 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     c64:	81 e5       	ldi	r24, 0x51	; 81
     c66:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     c6a:	88 23       	and	r24, r24
     c6c:	a1 f5       	brne	.+104    	; 0xcd6 <disk_readp+0x9c>
     c6e:	c0 e4       	ldi	r28, 0x40	; 64
     c70:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
     c72:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
		} while (rc == 0xFF && --bc);
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	19 f4       	brne	.+6      	; 0xc80 <disk_readp+0x46>
     c7a:	21 97       	sbiw	r28, 0x01	; 1
     c7c:	d1 f7       	brne	.-12     	; 0xc72 <disk_readp+0x38>
     c7e:	2b c0       	rjmp	.+86     	; 0xcd6 <disk_readp+0x9c>

		if (rc == 0xFE) {				/* A data packet arrived */
     c80:	8e 3f       	cpi	r24, 0xFE	; 254
     c82:	49 f5       	brne	.+82     	; 0xcd6 <disk_readp+0x9c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
     c84:	c1 14       	cp	r12, r1
     c86:	d1 04       	cpc	r13, r1
     c88:	29 f0       	breq	.+10     	; 0xc94 <disk_readp+0x5a>
     c8a:	e6 01       	movw	r28, r12
				do rcv_spi(); while (--ofs);
     c8c:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     c90:	21 97       	sbiw	r28, 0x01	; 1
     c92:	e1 f7       	brne	.-8      	; 0xc8c <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     c94:	e1 14       	cp	r14, r1
     c96:	f1 04       	cpc	r15, r1
     c98:	49 f0       	breq	.+18     	; 0xcac <disk_readp+0x72>
     c9a:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
     c9c:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     ca0:	f7 01       	movw	r30, r14
     ca2:	81 93       	st	Z+, r24
     ca4:	7f 01       	movw	r14, r30
				} while (--cnt);
     ca6:	21 97       	sbiw	r28, 0x01	; 1
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <disk_readp+0x62>
     caa:	07 c0       	rjmp	.+14     	; 0xcba <disk_readp+0x80>
     cac:	e8 01       	movw	r28, r16
			} else {	/* Forward data to the outgoing stream (depends on the project) */
				do {
					FORWARD(rcv_spi());
     cae:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     cb2:	0e 94 13 11 	call	0x2226	; 0x2226 <putch>
				} while (--cnt);
     cb6:	21 97       	sbiw	r28, 0x01	; 1
     cb8:	d1 f7       	brne	.-12     	; 0xcae <disk_readp+0x74>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
     cba:	cc 27       	eor	r28, r28
     cbc:	dd 27       	eor	r29, r29
     cbe:	cc 19       	sub	r28, r12
     cc0:	dd 09       	sbc	r29, r13
     cc2:	ce 5f       	subi	r28, 0xFE	; 254
     cc4:	dd 4f       	sbci	r29, 0xFD	; 253
     cc6:	c0 1b       	sub	r28, r16
     cc8:	d1 0b       	sbc	r29, r17
					FORWARD(rcv_spi());
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     cca:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     cce:	21 97       	sbiw	r28, 0x01	; 1
     cd0:	e1 f7       	brne	.-8      	; 0xcca <disk_readp+0x90>
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <disk_readp+0x9e>
     cd6:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
     cd8:	2c 9a       	sbi	0x05, 4	; 5
	rcv_spi();
     cda:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>

	return res;
}
     cde:	81 2f       	mov	r24, r17
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	08 95       	ret

00000cf2 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <disk_initialize+0x12>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <disk_initialize+0x14>
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
     d0a:	80 91 06 01 	lds	r24, 0x0106
     d0e:	88 23       	and	r24, r24
     d10:	51 f0       	breq	.+20     	; 0xd26 <disk_initialize+0x34>
     d12:	2c 99       	sbic	0x05, 4	; 5
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <disk_initialize+0x34>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
     d26:	0e 94 b4 10 	call	0x2168	; 0x2168 <init_spi>
	DESELECT();
     d2a:	2c 9a       	sbi	0x05, 4	; 5
     d2c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
     d2e:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     d32:	11 50       	subi	r17, 0x01	; 1
     d34:	e1 f7       	brne	.-8      	; 0xd2e <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     d36:	80 e4       	ldi	r24, 0x40	; 64
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	09 f0       	breq	.+2      	; 0xd4a <disk_initialize+0x58>
     d48:	69 c0       	rjmp	.+210    	; 0xe1c <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     d4a:	88 e4       	ldi	r24, 0x48	; 72
     d4c:	4a ea       	ldi	r20, 0xAA	; 170
     d4e:	51 e0       	ldi	r21, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	e1 f5       	brne	.+120    	; 0xdd4 <disk_initialize+0xe2>
     d5c:	6e 01       	movw	r12, r28
     d5e:	08 94       	sec
     d60:	c1 1c       	adc	r12, r1
     d62:	d1 1c       	adc	r13, r1
     d64:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     d66:	8e 01       	movw	r16, r28
     d68:	0b 5f       	subi	r16, 0xFB	; 251
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     d70:	f7 01       	movw	r30, r14
     d72:	81 93       	st	Z+, r24
     d74:	7f 01       	movw	r14, r30
     d76:	e0 17       	cp	r30, r16
     d78:	f1 07       	cpc	r31, r17
     d7a:	c1 f7       	brne	.-16     	; 0xd6c <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	09 f0       	breq	.+2      	; 0xd84 <disk_initialize+0x92>
     d82:	4c c0       	rjmp	.+152    	; 0xe1c <disk_initialize+0x12a>
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	8a 3a       	cpi	r24, 0xAA	; 170
     d88:	09 f0       	breq	.+2      	; 0xd8c <disk_initialize+0x9a>
     d8a:	48 c0       	rjmp	.+144    	; 0xe1c <disk_initialize+0x12a>
     d8c:	00 e1       	ldi	r16, 0x10	; 16
     d8e:	17 e2       	ldi	r17, 0x27	; 39
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     d92:	0e 94 af 10 	call	0x215e	; 0x215e <dly_100us>
     d96:	01 50       	subi	r16, 0x01	; 1
     d98:	10 40       	sbci	r17, 0x00	; 0
     d9a:	09 f4       	brne	.+2      	; 0xd9e <disk_initialize+0xac>
     d9c:	3f c0       	rjmp	.+126    	; 0xe1c <disk_initialize+0x12a>
     d9e:	89 ee       	ldi	r24, 0xE9	; 233
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e4       	ldi	r23, 0x40	; 64
     da8:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     dac:	88 23       	and	r24, r24
     dae:	89 f7       	brne	.-30     	; 0xd92 <disk_initialize+0xa0>
     db0:	4c c0       	rjmp	.+152    	; 0xe4a <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     db2:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     db6:	f6 01       	movw	r30, r12
     db8:	81 93       	st	Z+, r24
     dba:	6f 01       	movw	r12, r30
     dbc:	ee 15       	cp	r30, r14
     dbe:	ff 05       	cpc	r31, r15
     dc0:	c1 f7       	brne	.-16     	; 0xdb2 <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	86 fd       	sbrc	r24, 6
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <disk_initialize+0xdc>
     dc8:	04 e0       	ldi	r16, 0x04	; 4
     dca:	f0 2e       	mov	r15, r16
     dcc:	28 c0       	rjmp	.+80     	; 0xe1e <disk_initialize+0x12c>
     dce:	1c e0       	ldi	r17, 0x0C	; 12
     dd0:	f1 2e       	mov	r15, r17
     dd2:	25 c0       	rjmp	.+74     	; 0xe1e <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     dd4:	89 ee       	ldi	r24, 0xE9	; 233
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	28 f0       	brcs	.+10     	; 0xdf0 <disk_initialize+0xfe>
     de6:	b1 e4       	ldi	r27, 0x41	; 65
     de8:	eb 2e       	mov	r14, r27
     dea:	ff 24       	eor	r15, r15
     dec:	f3 94       	inc	r15
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <disk_initialize+0x106>
     df0:	a9 ee       	ldi	r26, 0xE9	; 233
     df2:	ea 2e       	mov	r14, r26
     df4:	f2 e0       	ldi	r31, 0x02	; 2
     df6:	ff 2e       	mov	r15, r31
     df8:	00 e1       	ldi	r16, 0x10	; 16
     dfa:	17 e2       	ldi	r17, 0x27	; 39
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
     dfe:	0e 94 af 10 	call	0x215e	; 0x215e <dly_100us>
     e02:	01 50       	subi	r16, 0x01	; 1
     e04:	10 40       	sbci	r17, 0x00	; 0
     e06:	51 f0       	breq	.+20     	; 0xe1c <disk_initialize+0x12a>
     e08:	8e 2d       	mov	r24, r14
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     e16:	88 23       	and	r24, r24
     e18:	91 f7       	brne	.-28     	; 0xdfe <disk_initialize+0x10c>
     e1a:	22 c0       	rjmp	.+68     	; 0xe60 <disk_initialize+0x16e>
     e1c:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     e1e:	f0 92 06 01 	sts	0x0106, r15
	DESELECT();
     e22:	2c 9a       	sbi	0x05, 4	; 5
	rcv_spi();
     e24:	0e 94 c1 10 	call	0x2182	; 0x2182 <rcv_spi>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	ff 20       	and	r15, r15
     e2c:	09 f4       	brne	.+2      	; 0xe30 <disk_initialize+0x13e>
     e2e:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     e4a:	8a e7       	ldi	r24, 0x7A	; 122
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <disk_initialize+0x16c>
     e5c:	aa cf       	rjmp	.-172    	; 0xdb2 <disk_initialize+0xc0>
     e5e:	de cf       	rjmp	.-68     	; 0xe1c <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
     e60:	80 e5       	ldi	r24, 0x50	; 80
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	52 e0       	ldi	r21, 0x02	; 2
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 5d 05 	call	0xaba	; 0xaba <send_cmd>
     e6e:	88 23       	and	r24, r24
     e70:	a9 f6       	brne	.-86     	; 0xe1c <disk_initialize+0x12a>
     e72:	d5 cf       	rjmp	.-86     	; 0xe1e <disk_initialize+0x12c>

00000e74 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     e86:	c0 91 07 01 	lds	r28, 0x0107
     e8a:	d0 91 08 01 	lds	r29, 0x0108


	dj->index = 0;
     e8e:	fc 01       	movw	r30, r24
     e90:	11 82       	std	Z+1, r1	; 0x01
     e92:	10 82       	st	Z, r1
	clst = dj->sclust;
     e94:	24 81       	ldd	r18, Z+4	; 0x04
     e96:	35 81       	ldd	r19, Z+5	; 0x05
     e98:	46 81       	ldd	r20, Z+6	; 0x06
     e9a:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     e9c:	21 30       	cpi	r18, 0x01	; 1
     e9e:	31 05       	cpc	r19, r1
     ea0:	41 05       	cpc	r20, r1
     ea2:	51 05       	cpc	r21, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <dir_rewind+0x34>
     ea6:	5b c0       	rjmp	.+182    	; 0xf5e <dir_rewind+0xea>
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	a8 85       	ldd	r26, Y+8	; 0x08
     eae:	b9 85       	ldd	r27, Y+9	; 0x09
     eb0:	28 17       	cp	r18, r24
     eb2:	39 07       	cpc	r19, r25
     eb4:	4a 07       	cpc	r20, r26
     eb6:	5b 07       	cpc	r21, r27
     eb8:	08 f0       	brcs	.+2      	; 0xebc <dir_rewind+0x48>
     eba:	51 c0       	rjmp	.+162    	; 0xf5e <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     ebc:	21 15       	cp	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	41 05       	cpc	r20, r1
     ec2:	51 05       	cpc	r21, r1
     ec4:	39 f4       	brne	.+14     	; 0xed4 <dir_rewind+0x60>
     ec6:	88 81       	ld	r24, Y
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	21 f4       	brne	.+8      	; 0xed4 <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
     ecc:	2e 85       	ldd	r18, Y+14	; 0x0e
     ece:	3f 85       	ldd	r19, Y+15	; 0x0f
     ed0:	48 89       	ldd	r20, Y+16	; 0x10
     ed2:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
     ed4:	f6 01       	movw	r30, r12
     ed6:	20 87       	std	Z+8, r18	; 0x08
     ed8:	31 87       	std	Z+9, r19	; 0x09
     eda:	42 87       	std	Z+10, r20	; 0x0a
     edc:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     ede:	21 15       	cp	r18, r1
     ee0:	31 05       	cpc	r19, r1
     ee2:	41 05       	cpc	r20, r1
     ee4:	51 05       	cpc	r21, r1
     ee6:	81 f1       	breq	.+96     	; 0xf48 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     ee8:	8e ef       	ldi	r24, 0xFE	; 254
     eea:	e8 2e       	mov	r14, r24
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	f8 2e       	mov	r15, r24
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	08 2f       	mov	r16, r24
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	18 2f       	mov	r17, r24
     ef8:	e2 0e       	add	r14, r18
     efa:	f3 1e       	adc	r15, r19
     efc:	04 1f       	adc	r16, r20
     efe:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     f00:	8e 81       	ldd	r24, Y+6	; 0x06
     f02:	9f 81       	ldd	r25, Y+7	; 0x07
     f04:	a8 85       	ldd	r26, Y+8	; 0x08
     f06:	b9 85       	ldd	r27, Y+9	; 0x09
     f08:	02 97       	sbiw	r24, 0x02	; 2
     f0a:	a1 09       	sbc	r26, r1
     f0c:	b1 09       	sbc	r27, r1
     f0e:	e8 16       	cp	r14, r24
     f10:	f9 06       	cpc	r15, r25
     f12:	0a 07       	cpc	r16, r26
     f14:	1b 07       	cpc	r17, r27
     f16:	28 f0       	brcs	.+10     	; 0xf22 <dir_rewind+0xae>
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	17 c0       	rjmp	.+46     	; 0xf50 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	c8 01       	movw	r24, r16
     f2c:	b7 01       	movw	r22, r14
     f2e:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	8a 89       	ldd	r24, Y+18	; 0x12
     f38:	9b 89       	ldd	r25, Y+19	; 0x13
     f3a:	ac 89       	ldd	r26, Y+20	; 0x14
     f3c:	bd 89       	ldd	r27, Y+21	; 0x15
     f3e:	28 0f       	add	r18, r24
     f40:	39 1f       	adc	r19, r25
     f42:	4a 1f       	adc	r20, r26
     f44:	5b 1f       	adc	r21, r27
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     f48:	2e 85       	ldd	r18, Y+14	; 0x0e
     f4a:	3f 85       	ldd	r19, Y+15	; 0x0f
     f4c:	48 89       	ldd	r20, Y+16	; 0x10
     f4e:	59 89       	ldd	r21, Y+17	; 0x11
     f50:	f6 01       	movw	r30, r12
     f52:	24 87       	std	Z+12, r18	; 0x0c
     f54:	35 87       	std	Z+13, r19	; 0x0d
     f56:	46 87       	std	Z+14, r20	; 0x0e
     f58:	57 87       	std	Z+15, r21	; 0x0f
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
     f5e:	81 e0       	ldi	r24, 0x01	; 1
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	08 95       	ret

00000f72 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <get_fat+0x1e>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <get_fat+0x20>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	4b 01       	movw	r8, r22
     f98:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     f9a:	60 90 07 01 	lds	r6, 0x0107
     f9e:	70 90 08 01 	lds	r7, 0x0108


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	88 16       	cp	r8, r24
     fa6:	91 04       	cpc	r9, r1
     fa8:	a1 04       	cpc	r10, r1
     faa:	b1 04       	cpc	r11, r1
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <get_fat+0x3e>
     fae:	b4 c0       	rjmp	.+360    	; 0x1118 <get_fat+0x1a6>
     fb0:	f3 01       	movw	r30, r6
     fb2:	86 81       	ldd	r24, Z+6	; 0x06
     fb4:	97 81       	ldd	r25, Z+7	; 0x07
     fb6:	a0 85       	ldd	r26, Z+8	; 0x08
     fb8:	b1 85       	ldd	r27, Z+9	; 0x09
     fba:	88 16       	cp	r8, r24
     fbc:	99 06       	cpc	r9, r25
     fbe:	aa 06       	cpc	r10, r26
     fc0:	bb 06       	cpc	r11, r27
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <get_fat+0x54>
     fc4:	a9 c0       	rjmp	.+338    	; 0x1118 <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
     fc6:	80 81       	ld	r24, Z
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	09 f4       	brne	.+2      	; 0xfce <get_fat+0x5c>
     fcc:	5f c0       	rjmp	.+190    	; 0x108c <get_fat+0x11a>
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <get_fat+0x62>
     fd2:	7b c0       	rjmp	.+246    	; 0x10ca <get_fat+0x158>
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <get_fat+0x68>
     fd8:	9f c0       	rjmp	.+318    	; 0x1118 <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     fda:	c4 01       	movw	r24, r8
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	88 0d       	add	r24, r8
     fe2:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     fe4:	9c 01       	movw	r18, r24
     fe6:	31 70       	andi	r19, 0x01	; 1
     fe8:	89 2f       	mov	r24, r25
     fea:	99 27       	eor	r25, r25
     fec:	86 95       	lsr	r24
     fee:	6c 01       	movw	r12, r24
     ff0:	ee 24       	eor	r14, r14
     ff2:	ff 24       	eor	r15, r15
     ff4:	f3 01       	movw	r30, r6
     ff6:	42 85       	ldd	r20, Z+10	; 0x0a
     ff8:	53 85       	ldd	r21, Z+11	; 0x0b
     ffa:	64 85       	ldd	r22, Z+12	; 0x0c
     ffc:	75 85       	ldd	r23, Z+13	; 0x0d
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	2f 3f       	cpi	r18, 0xFF	; 255
    1006:	3f 07       	cpc	r19, r31
    1008:	49 f0       	breq	.+18     	; 0x101c <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    100a:	c4 0e       	add	r12, r20
    100c:	d5 1e       	adc	r13, r21
    100e:	e6 1e       	adc	r14, r22
    1010:	f7 1e       	adc	r15, r23
    1012:	b7 01       	movw	r22, r14
    1014:	a6 01       	movw	r20, r12
    1016:	02 e0       	ldi	r16, 0x02	; 2
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	1e c0       	rjmp	.+60     	; 0x1058 <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    101c:	4c 0d       	add	r20, r12
    101e:	5d 1d       	adc	r21, r13
    1020:	6e 1d       	adc	r22, r14
    1022:	7f 1d       	adc	r23, r15
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	31 e0       	ldi	r19, 0x01	; 1
    1028:	01 e0       	ldi	r16, 0x01	; 1
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1030:	88 23       	and	r24, r24
    1032:	09 f0       	breq	.+2      	; 0x1036 <get_fat+0xc4>
    1034:	71 c0       	rjmp	.+226    	; 0x1118 <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    1036:	f3 01       	movw	r30, r6
    1038:	42 85       	ldd	r20, Z+10	; 0x0a
    103a:	53 85       	ldd	r21, Z+11	; 0x0b
    103c:	64 85       	ldd	r22, Z+12	; 0x0c
    103e:	75 85       	ldd	r23, Z+13	; 0x0d
    1040:	4f 5f       	subi	r20, 0xFF	; 255
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	6f 4f       	sbci	r22, 0xFF	; 255
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	4c 0d       	add	r20, r12
    104a:	5d 1d       	adc	r21, r13
    104c:	6e 1d       	adc	r22, r14
    104e:	7f 1d       	adc	r23, r15
    1050:	ce 01       	movw	r24, r28
    1052:	02 96       	adiw	r24, 0x02	; 2
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    105c:	88 23       	and	r24, r24
    105e:	09 f0       	breq	.+2      	; 0x1062 <get_fat+0xf0>
    1060:	5b c0       	rjmp	.+182    	; 0x1118 <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    1062:	69 81       	ldd	r22, Y+1	; 0x01
    1064:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1066:	c4 01       	movw	r24, r8
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	90 70       	andi	r25, 0x00	; 0
    106c:	89 2b       	or	r24, r25
    106e:	39 f0       	breq	.+14     	; 0x107e <get_fat+0x10c>
    1070:	a4 e0       	ldi	r26, 0x04	; 4
    1072:	76 95       	lsr	r23
    1074:	67 95       	ror	r22
    1076:	aa 95       	dec	r26
    1078:	e1 f7       	brne	.-8      	; 0x1072 <get_fat+0x100>
    107a:	9b 01       	movw	r18, r22
    107c:	23 c0       	rjmp	.+70     	; 0x10c4 <get_fat+0x152>
    107e:	9b 01       	movw	r18, r22
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	3f 70       	andi	r19, 0x0F	; 15
    1086:	40 70       	andi	r20, 0x00	; 0
    1088:	50 70       	andi	r21, 0x00	; 0
    108a:	4a c0       	rjmp	.+148    	; 0x1120 <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    108c:	77 27       	eor	r23, r23
    108e:	6b 2d       	mov	r22, r11
    1090:	5a 2d       	mov	r21, r10
    1092:	49 2d       	mov	r20, r9
    1094:	f3 01       	movw	r30, r6
    1096:	82 85       	ldd	r24, Z+10	; 0x0a
    1098:	93 85       	ldd	r25, Z+11	; 0x0b
    109a:	a4 85       	ldd	r26, Z+12	; 0x0c
    109c:	b5 85       	ldd	r27, Z+13	; 0x0d
    109e:	48 0f       	add	r20, r24
    10a0:	59 1f       	adc	r21, r25
    10a2:	6a 1f       	adc	r22, r26
    10a4:	7b 1f       	adc	r23, r27
    10a6:	94 01       	movw	r18, r8
    10a8:	30 70       	andi	r19, 0x00	; 0
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	ce 01       	movw	r24, r28
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	02 e0       	ldi	r16, 0x02	; 2
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    10ba:	88 23       	and	r24, r24
    10bc:	69 f5       	brne	.+90     	; 0x1118 <get_fat+0x1a6>
		return LD_WORD(buf);
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	9c 01       	movw	r18, r24
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	2b c0       	rjmp	.+86     	; 0x1120 <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    10ca:	b5 01       	movw	r22, r10
    10cc:	a4 01       	movw	r20, r8
    10ce:	27 e0       	ldi	r18, 0x07	; 7
    10d0:	76 95       	lsr	r23
    10d2:	67 95       	ror	r22
    10d4:	57 95       	ror	r21
    10d6:	47 95       	ror	r20
    10d8:	2a 95       	dec	r18
    10da:	d1 f7       	brne	.-12     	; 0x10d0 <get_fat+0x15e>
    10dc:	f3 01       	movw	r30, r6
    10de:	82 85       	ldd	r24, Z+10	; 0x0a
    10e0:	93 85       	ldd	r25, Z+11	; 0x0b
    10e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    10e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    10e6:	48 0f       	add	r20, r24
    10e8:	59 1f       	adc	r21, r25
    10ea:	6a 1f       	adc	r22, r26
    10ec:	7b 1f       	adc	r23, r27
    10ee:	94 01       	movw	r18, r8
    10f0:	2f 77       	andi	r18, 0x7F	; 127
    10f2:	30 70       	andi	r19, 0x00	; 0
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	04 e0       	ldi	r16, 0x04	; 4
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1108:	88 23       	and	r24, r24
    110a:	31 f4       	brne	.+12     	; 0x1118 <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    110c:	29 81       	ldd	r18, Y+1	; 0x01
    110e:	3a 81       	ldd	r19, Y+2	; 0x02
    1110:	4b 81       	ldd	r20, Y+3	; 0x03
    1112:	5c 81       	ldd	r21, Y+4	; 0x04
    1114:	5f 70       	andi	r21, 0x0F	; 15
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <get_fat+0x1ae>
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    1120:	b9 01       	movw	r22, r18
    1122:	ca 01       	movw	r24, r20
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	08 95       	ret

0000114a <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    1160:	c0 91 07 01 	lds	r28, 0x0107
    1164:	d0 91 08 01 	lds	r29, 0x0108


	i = dj->index + 1;
    1168:	fc 01       	movw	r30, r24
    116a:	c0 80       	ld	r12, Z
    116c:	d1 80       	ldd	r13, Z+1	; 0x01
    116e:	08 94       	sec
    1170:	c1 1c       	adc	r12, r1
    1172:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1174:	c1 14       	cp	r12, r1
    1176:	d1 04       	cpc	r13, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <dir_next+0x32>
    117a:	8f c0       	rjmp	.+286    	; 0x129a <dir_next+0x150>
    117c:	24 85       	ldd	r18, Z+12	; 0x0c
    117e:	35 85       	ldd	r19, Z+13	; 0x0d
    1180:	46 85       	ldd	r20, Z+14	; 0x0e
    1182:	57 85       	ldd	r21, Z+15	; 0x0f
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	41 05       	cpc	r20, r1
    118a:	51 05       	cpc	r21, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <dir_next+0x46>
    118e:	85 c0       	rjmp	.+266    	; 0x129a <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    1190:	c6 01       	movw	r24, r12
    1192:	8f 70       	andi	r24, 0x0F	; 15
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	89 2b       	or	r24, r25
    1198:	09 f0       	breq	.+2      	; 0x119c <dir_next+0x52>
    119a:	7a c0       	rjmp	.+244    	; 0x1290 <dir_next+0x146>
		dj->sect++;			/* Next sector */
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	4f 4f       	sbci	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	24 87       	std	Z+12, r18	; 0x0c
    11a6:	35 87       	std	Z+13, r19	; 0x0d
    11a8:	46 87       	std	Z+14, r20	; 0x0e
    11aa:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    11ac:	40 85       	ldd	r20, Z+8	; 0x08
    11ae:	51 85       	ldd	r21, Z+9	; 0x09
    11b0:	62 85       	ldd	r22, Z+10	; 0x0a
    11b2:	73 85       	ldd	r23, Z+11	; 0x0b
    11b4:	41 15       	cp	r20, r1
    11b6:	51 05       	cpc	r21, r1
    11b8:	61 05       	cpc	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	39 f4       	brne	.+14     	; 0x11cc <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	c8 16       	cp	r12, r24
    11c4:	d9 06       	cpc	r13, r25
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <dir_next+0x80>
    11c8:	63 c0       	rjmp	.+198    	; 0x1290 <dir_next+0x146>
    11ca:	67 c0       	rjmp	.+206    	; 0x129a <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	96 01       	movw	r18, r12
    11d4:	e4 e0       	ldi	r30, 0x04	; 4
    11d6:	36 95       	lsr	r19
    11d8:	27 95       	ror	r18
    11da:	ea 95       	dec	r30
    11dc:	e1 f7       	brne	.-8      	; 0x11d6 <dir_next+0x8c>
    11de:	82 23       	and	r24, r18
    11e0:	93 23       	and	r25, r19
    11e2:	89 2b       	or	r24, r25
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <dir_next+0x9e>
    11e6:	54 c0       	rjmp	.+168    	; 0x1290 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    11e8:	cb 01       	movw	r24, r22
    11ea:	ba 01       	movw	r22, r20
    11ec:	0e 94 b9 07 	call	0xf72	; 0xf72 <get_fat>
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    11f4:	62 30       	cpi	r22, 0x02	; 2
    11f6:	71 05       	cpc	r23, r1
    11f8:	81 05       	cpc	r24, r1
    11fa:	91 05       	cpc	r25, r1
    11fc:	10 f4       	brcc	.+4      	; 0x1202 <dir_next+0xb8>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	4d c0       	rjmp	.+154    	; 0x129c <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    1202:	8e 81       	ldd	r24, Y+6	; 0x06
    1204:	9f 81       	ldd	r25, Y+7	; 0x07
    1206:	a8 85       	ldd	r26, Y+8	; 0x08
    1208:	b9 85       	ldd	r27, Y+9	; 0x09
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	4a 07       	cpc	r20, r26
    1210:	5b 07       	cpc	r21, r27
    1212:	08 f0       	brcs	.+2      	; 0x1216 <dir_next+0xcc>
    1214:	42 c0       	rjmp	.+132    	; 0x129a <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    1216:	f5 01       	movw	r30, r10
    1218:	20 87       	std	Z+8, r18	; 0x08
    121a:	31 87       	std	Z+9, r19	; 0x09
    121c:	42 87       	std	Z+10, r20	; 0x0a
    121e:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1220:	c0 91 07 01 	lds	r28, 0x0107
    1224:	d0 91 08 01 	lds	r29, 0x0108


	clst -= 2;
    1228:	8e ef       	ldi	r24, 0xFE	; 254
    122a:	e8 2e       	mov	r14, r24
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	f8 2e       	mov	r15, r24
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	08 2f       	mov	r16, r24
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	18 2f       	mov	r17, r24
    1238:	e2 0e       	add	r14, r18
    123a:	f3 1e       	adc	r15, r19
    123c:	04 1f       	adc	r16, r20
    123e:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	a8 85       	ldd	r26, Y+8	; 0x08
    1246:	b9 85       	ldd	r27, Y+9	; 0x09
    1248:	02 97       	sbiw	r24, 0x02	; 2
    124a:	a1 09       	sbc	r26, r1
    124c:	b1 09       	sbc	r27, r1
    124e:	e8 16       	cp	r14, r24
    1250:	f9 06       	cpc	r15, r25
    1252:	0a 07       	cpc	r16, r26
    1254:	1b 07       	cpc	r17, r27
    1256:	28 f0       	brcs	.+10     	; 0x1262 <dir_next+0x118>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	12 c0       	rjmp	.+36     	; 0x1286 <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    1262:	2a 81       	ldd	r18, Y+2	; 0x02
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	c8 01       	movw	r24, r16
    126c:	b7 01       	movw	r22, r14
    126e:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	8a 89       	ldd	r24, Y+18	; 0x12
    1278:	9b 89       	ldd	r25, Y+19	; 0x13
    127a:	ac 89       	ldd	r26, Y+20	; 0x14
    127c:	bd 89       	ldd	r27, Y+21	; 0x15
    127e:	28 0f       	add	r18, r24
    1280:	39 1f       	adc	r19, r25
    1282:	4a 1f       	adc	r20, r26
    1284:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    1286:	f5 01       	movw	r30, r10
    1288:	24 87       	std	Z+12, r18	; 0x0c
    128a:	35 87       	std	Z+13, r19	; 0x0d
    128c:	46 87       	std	Z+14, r20	; 0x0e
    128e:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    1290:	f5 01       	movw	r30, r10
    1292:	d1 82       	std	Z+1, r13	; 0x01
    1294:	c0 82       	st	Z, r12
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	01 c0       	rjmp	.+2      	; 0x129c <dir_next+0x152>

	return FR_OK;
    129a:	83 e0       	ldi	r24, 0x03	; 3
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	08 95       	ret

000012b2 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    12b2:	2f 92       	push	r2
    12b4:	3f 92       	push	r3
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    12d8:	c0 91 07 01 	lds	r28, 0x0107
    12dc:	d0 91 08 01 	lds	r29, 0x0108


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    12e0:	20 97       	sbiw	r28, 0x00	; 0
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <pf_lseek+0x36>
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	02 c1       	rjmp	.+516    	; 0x14ec <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	80 fd       	sbrc	r24, 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <pf_lseek+0x40>
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	fd c0       	rjmp	.+506    	; 0x14ec <pf_lseek+0x23a>
    12f2:	ea 8c       	ldd	r14, Y+26	; 0x1a
    12f4:	fb 8c       	ldd	r15, Y+27	; 0x1b
    12f6:	0c 8d       	ldd	r16, Y+28	; 0x1c
    12f8:	1d 8d       	ldd	r17, Y+29	; 0x1d
    12fa:	4e 2f       	mov	r20, r30
    12fc:	59 2f       	mov	r21, r25
    12fe:	cb 01       	movw	r24, r22
    1300:	da 01       	movw	r26, r20
    1302:	3c 01       	movw	r6, r24
    1304:	4d 01       	movw	r8, r26
    1306:	e6 14       	cp	r14, r6
    1308:	f7 04       	cpc	r15, r7
    130a:	08 05       	cpc	r16, r8
    130c:	19 05       	cpc	r17, r9
    130e:	10 f4       	brcc	.+4      	; 0x1314 <pf_lseek+0x62>
    1310:	37 01       	movw	r6, r14
    1312:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    1314:	ee 88       	ldd	r14, Y+22	; 0x16
    1316:	ff 88       	ldd	r15, Y+23	; 0x17
    1318:	08 8d       	ldd	r16, Y+24	; 0x18
    131a:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    131c:	1e 8a       	std	Y+22, r1	; 0x16
    131e:	1f 8a       	std	Y+23, r1	; 0x17
    1320:	18 8e       	std	Y+24, r1	; 0x18
    1322:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    1324:	61 14       	cp	r6, r1
    1326:	71 04       	cpc	r7, r1
    1328:	81 04       	cpc	r8, r1
    132a:	91 04       	cpc	r9, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <pf_lseek+0x7e>
    132e:	da c0       	rjmp	.+436    	; 0x14e4 <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	a8 2e       	mov	r10, r24
    1334:	bb 24       	eor	r11, r11
    1336:	cc 24       	eor	r12, r12
    1338:	dd 24       	eor	r13, r13
    133a:	b9 e0       	ldi	r27, 0x09	; 9
    133c:	aa 0c       	add	r10, r10
    133e:	bb 1c       	adc	r11, r11
    1340:	cc 1c       	adc	r12, r12
    1342:	dd 1c       	adc	r13, r13
    1344:	ba 95       	dec	r27
    1346:	d1 f7       	brne	.-12     	; 0x133c <pf_lseek+0x8a>
		if (ifptr > 0 &&
    1348:	e1 14       	cp	r14, r1
    134a:	f1 04       	cpc	r15, r1
    134c:	01 05       	cpc	r16, r1
    134e:	11 05       	cpc	r17, r1
    1350:	b1 f1       	breq	.+108    	; 0x13be <pf_lseek+0x10c>
    1352:	17 01       	movw	r2, r14
    1354:	28 01       	movw	r4, r16
    1356:	08 94       	sec
    1358:	21 08       	sbc	r2, r1
    135a:	31 08       	sbc	r3, r1
    135c:	41 08       	sbc	r4, r1
    135e:	51 08       	sbc	r5, r1
    1360:	c4 01       	movw	r24, r8
    1362:	b3 01       	movw	r22, r6
    1364:	61 50       	subi	r22, 0x01	; 1
    1366:	70 40       	sbci	r23, 0x00	; 0
    1368:	80 40       	sbci	r24, 0x00	; 0
    136a:	90 40       	sbci	r25, 0x00	; 0
    136c:	a6 01       	movw	r20, r12
    136e:	95 01       	movw	r18, r10
    1370:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1374:	79 01       	movw	r14, r18
    1376:	8a 01       	movw	r16, r20
    1378:	c2 01       	movw	r24, r4
    137a:	b1 01       	movw	r22, r2
    137c:	a6 01       	movw	r20, r12
    137e:	95 01       	movw	r18, r10
    1380:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1384:	e2 16       	cp	r14, r18
    1386:	f3 06       	cpc	r15, r19
    1388:	04 07       	cpc	r16, r20
    138a:	15 07       	cpc	r17, r21
    138c:	c0 f0       	brcs	.+48     	; 0x13be <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    138e:	88 27       	eor	r24, r24
    1390:	99 27       	eor	r25, r25
    1392:	dc 01       	movw	r26, r24
    1394:	8a 19       	sub	r24, r10
    1396:	9b 09       	sbc	r25, r11
    1398:	ac 09       	sbc	r26, r12
    139a:	bd 09       	sbc	r27, r13
    139c:	82 21       	and	r24, r2
    139e:	93 21       	and	r25, r3
    13a0:	a4 21       	and	r26, r4
    13a2:	b5 21       	and	r27, r5
    13a4:	8e 8b       	std	Y+22, r24	; 0x16
    13a6:	9f 8b       	std	Y+23, r25	; 0x17
    13a8:	a8 8f       	std	Y+24, r26	; 0x18
    13aa:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    13ac:	68 1a       	sub	r6, r24
    13ae:	79 0a       	sbc	r7, r25
    13b0:	8a 0a       	sbc	r8, r26
    13b2:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    13b4:	2a a1       	ldd	r18, Y+34	; 0x22
    13b6:	3b a1       	ldd	r19, Y+35	; 0x23
    13b8:	4c a1       	ldd	r20, Y+36	; 0x24
    13ba:	5d a1       	ldd	r21, Y+37	; 0x25
    13bc:	33 c0       	rjmp	.+102    	; 0x1424 <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    13be:	2e 8d       	ldd	r18, Y+30	; 0x1e
    13c0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    13c2:	48 a1       	ldd	r20, Y+32	; 0x20
    13c4:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    13c6:	2a a3       	std	Y+34, r18	; 0x22
    13c8:	3b a3       	std	Y+35, r19	; 0x23
    13ca:	4c a3       	std	Y+36, r20	; 0x24
    13cc:	5d a3       	std	Y+37, r21	; 0x25
    13ce:	2a c0       	rjmp	.+84     	; 0x1424 <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    13d0:	ca 01       	movw	r24, r20
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 b9 07 	call	0xf72	; 0xf72 <get_fat>
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    13dc:	62 30       	cpi	r22, 0x02	; 2
    13de:	71 05       	cpc	r23, r1
    13e0:	81 05       	cpc	r24, r1
    13e2:	91 05       	cpc	r25, r1
    13e4:	08 f4       	brcc	.+2      	; 0x13e8 <pf_lseek+0x136>
    13e6:	80 c0       	rjmp	.+256    	; 0x14e8 <pf_lseek+0x236>
    13e8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ea:	9f 81       	ldd	r25, Y+7	; 0x07
    13ec:	a8 85       	ldd	r26, Y+8	; 0x08
    13ee:	b9 85       	ldd	r27, Y+9	; 0x09
    13f0:	28 17       	cp	r18, r24
    13f2:	39 07       	cpc	r19, r25
    13f4:	4a 07       	cpc	r20, r26
    13f6:	5b 07       	cpc	r21, r27
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <pf_lseek+0x14a>
    13fa:	76 c0       	rjmp	.+236    	; 0x14e8 <pf_lseek+0x236>
			fs->curr_clust = clst;
    13fc:	2a a3       	std	Y+34, r18	; 0x22
    13fe:	3b a3       	std	Y+35, r19	; 0x23
    1400:	4c a3       	std	Y+36, r20	; 0x24
    1402:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    1404:	8e 89       	ldd	r24, Y+22	; 0x16
    1406:	9f 89       	ldd	r25, Y+23	; 0x17
    1408:	a8 8d       	ldd	r26, Y+24	; 0x18
    140a:	b9 8d       	ldd	r27, Y+25	; 0x19
    140c:	8a 0d       	add	r24, r10
    140e:	9b 1d       	adc	r25, r11
    1410:	ac 1d       	adc	r26, r12
    1412:	bd 1d       	adc	r27, r13
    1414:	8e 8b       	std	Y+22, r24	; 0x16
    1416:	9f 8b       	std	Y+23, r25	; 0x17
    1418:	a8 8f       	std	Y+24, r26	; 0x18
    141a:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    141c:	6a 18       	sub	r6, r10
    141e:	7b 08       	sbc	r7, r11
    1420:	8c 08       	sbc	r8, r12
    1422:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1424:	a6 14       	cp	r10, r6
    1426:	b7 04       	cpc	r11, r7
    1428:	c8 04       	cpc	r12, r8
    142a:	d9 04       	cpc	r13, r9
    142c:	88 f2       	brcs	.-94     	; 0x13d0 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    142e:	ee 88       	ldd	r14, Y+22	; 0x16
    1430:	ff 88       	ldd	r15, Y+23	; 0x17
    1432:	08 8d       	ldd	r16, Y+24	; 0x18
    1434:	19 8d       	ldd	r17, Y+25	; 0x19
    1436:	e6 0c       	add	r14, r6
    1438:	f7 1c       	adc	r15, r7
    143a:	08 1d       	adc	r16, r8
    143c:	19 1d       	adc	r17, r9
    143e:	ee 8a       	std	Y+22, r14	; 0x16
    1440:	ff 8a       	std	Y+23, r15	; 0x17
    1442:	08 8f       	std	Y+24, r16	; 0x18
    1444:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1446:	80 90 07 01 	lds	r8, 0x0107
    144a:	90 90 08 01 	lds	r9, 0x0108


	clst -= 2;
    144e:	ae ef       	ldi	r26, 0xFE	; 254
    1450:	aa 2e       	mov	r10, r26
    1452:	af ef       	ldi	r26, 0xFF	; 255
    1454:	ba 2e       	mov	r11, r26
    1456:	af ef       	ldi	r26, 0xFF	; 255
    1458:	ca 2e       	mov	r12, r26
    145a:	af ef       	ldi	r26, 0xFF	; 255
    145c:	da 2e       	mov	r13, r26
    145e:	a2 0e       	add	r10, r18
    1460:	b3 1e       	adc	r11, r19
    1462:	c4 1e       	adc	r12, r20
    1464:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1466:	f4 01       	movw	r30, r8
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	a0 85       	ldd	r26, Z+8	; 0x08
    146e:	b1 85       	ldd	r27, Z+9	; 0x09
    1470:	02 97       	sbiw	r24, 0x02	; 2
    1472:	a1 09       	sbc	r26, r1
    1474:	b1 09       	sbc	r27, r1
    1476:	a8 16       	cp	r10, r24
    1478:	b9 06       	cpc	r11, r25
    147a:	ca 06       	cpc	r12, r26
    147c:	db 06       	cpc	r13, r27
    147e:	a0 f5       	brcc	.+104    	; 0x14e8 <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    1480:	22 81       	ldd	r18, Z+2	; 0x02
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	c6 01       	movw	r24, r12
    148a:	b5 01       	movw	r22, r10
    148c:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	f4 01       	movw	r30, r8
    1496:	82 89       	ldd	r24, Z+18	; 0x12
    1498:	93 89       	ldd	r25, Z+19	; 0x13
    149a:	a4 89       	ldd	r26, Z+20	; 0x14
    149c:	b5 89       	ldd	r27, Z+21	; 0x15
    149e:	28 0f       	add	r18, r24
    14a0:	39 1f       	adc	r19, r25
    14a2:	4a 1f       	adc	r20, r26
    14a4:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    14a6:	21 15       	cp	r18, r1
    14a8:	31 05       	cpc	r19, r1
    14aa:	41 05       	cpc	r20, r1
    14ac:	51 05       	cpc	r21, r1
    14ae:	e1 f0       	breq	.+56     	; 0x14e8 <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    14b0:	f9 e0       	ldi	r31, 0x09	; 9
    14b2:	16 95       	lsr	r17
    14b4:	07 95       	ror	r16
    14b6:	f7 94       	ror	r15
    14b8:	e7 94       	ror	r14
    14ba:	fa 95       	dec	r31
    14bc:	d1 f7       	brne	.-12     	; 0x14b2 <pf_lseek+0x200>
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	aa 27       	eor	r26, r26
    14c6:	97 fd       	sbrc	r25, 7
    14c8:	a0 95       	com	r26
    14ca:	ba 2f       	mov	r27, r26
    14cc:	e8 22       	and	r14, r24
    14ce:	f9 22       	and	r15, r25
    14d0:	0a 23       	and	r16, r26
    14d2:	1b 23       	and	r17, r27
    14d4:	2e 0d       	add	r18, r14
    14d6:	3f 1d       	adc	r19, r15
    14d8:	40 1f       	adc	r20, r16
    14da:	51 1f       	adc	r21, r17
    14dc:	2e a3       	std	Y+38, r18	; 0x26
    14de:	3f a3       	std	Y+39, r19	; 0x27
    14e0:	48 a7       	std	Y+40, r20	; 0x28
    14e2:	59 a7       	std	Y+41, r21	; 0x29
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    14e8:	19 82       	std	Y+1, r1	; 0x01
    14ea:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	7f 90       	pop	r7
    1506:	6f 90       	pop	r6
    1508:	5f 90       	pop	r5
    150a:	4f 90       	pop	r4
    150c:	3f 90       	pop	r3
    150e:	2f 90       	pop	r2
    1510:	08 95       	ret

00001512 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	ac 97       	sbiw	r28, 0x2c	; 44
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	7c 01       	movw	r14, r24
    1538:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    153a:	80 91 07 01 	lds	r24, 0x0107
    153e:	90 91 08 01 	lds	r25, 0x0108
    1542:	89 2b       	or	r24, r25
    1544:	11 f4       	brne	.+4      	; 0x154a <pf_readdir+0x38>
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	b0 c0       	rjmp	.+352    	; 0x16aa <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	d7 01       	movw	r26, r14
    1550:	13 96       	adiw	r26, 0x03	; 3
    1552:	9c 93       	st	X, r25
    1554:	8e 93       	st	-X, r24
    1556:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    1558:	61 15       	cp	r22, r1
    155a:	71 05       	cpc	r23, r1
    155c:	39 f0       	breq	.+14     	; 0x156c <pf_readdir+0x5a>
    155e:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1560:	0d e0       	ldi	r16, 0x0D	; 13
    1562:	a0 2e       	mov	r10, r16
    1564:	b1 2c       	mov	r11, r1
    1566:	ac 0e       	add	r10, r28
    1568:	bd 1e       	adc	r11, r29
    156a:	28 c0       	rjmp	.+80     	; 0x15bc <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    156c:	c7 01       	movw	r24, r14
    156e:	0e 94 3a 07 	call	0xe74	; 0xe74 <dir_rewind>
    1572:	9b c0       	rjmp	.+310    	; 0x16aa <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1574:	f7 01       	movw	r30, r14
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	2f 70       	andi	r18, 0x0F	; 15
    157c:	30 70       	andi	r19, 0x00	; 0
    157e:	15 e0       	ldi	r17, 0x05	; 5
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	1a 95       	dec	r17
    1586:	e1 f7       	brne	.-8      	; 0x1580 <pf_readdir+0x6e>
    1588:	c5 01       	movw	r24, r10
    158a:	00 e2       	ldi	r16, 0x20	; 32
    158c:	10 e0       	ldi	r17, 0x00	; 0
    158e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1592:	88 23       	and	r24, r24
    1594:	11 f0       	breq	.+4      	; 0x159a <pf_readdir+0x88>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	1f c0       	rjmp	.+62     	; 0x15d8 <pf_readdir+0xc6>
		c = dir[DIR_Name];
    159a:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    159c:	99 23       	and	r25, r25
    159e:	09 f4       	brne	.+2      	; 0x15a2 <pf_readdir+0x90>
    15a0:	95 c0       	rjmp	.+298    	; 0x16cc <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    15a2:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    15a4:	95 3e       	cpi	r25, 0xE5	; 229
    15a6:	29 f0       	breq	.+10     	; 0x15b2 <pf_readdir+0xa0>
    15a8:	9e 32       	cpi	r25, 0x2E	; 46
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <pf_readdir+0xa0>
    15ac:	8f 73       	andi	r24, 0x3F	; 63
    15ae:	83 ff       	sbrs	r24, 3
    15b0:	1d c0       	rjmp	.+58     	; 0x15ec <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    15b2:	c7 01       	movw	r24, r14
    15b4:	0e 94 a5 08 	call	0x114a	; 0x114a <dir_next>
		if (res != FR_OK) break;
    15b8:	88 23       	and	r24, r24
    15ba:	71 f4       	brne	.+28     	; 0x15d8 <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    15bc:	d7 01       	movw	r26, r14
    15be:	1c 96       	adiw	r26, 0x0c	; 12
    15c0:	4d 91       	ld	r20, X+
    15c2:	5d 91       	ld	r21, X+
    15c4:	6d 91       	ld	r22, X+
    15c6:	7c 91       	ld	r23, X
    15c8:	1f 97       	sbiw	r26, 0x0f	; 15
    15ca:	41 15       	cp	r20, r1
    15cc:	51 05       	cpc	r21, r1
    15ce:	61 05       	cpc	r22, r1
    15d0:	71 05       	cpc	r23, r1
    15d2:	81 f6       	brne	.-96     	; 0x1574 <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    15d4:	88 23       	and	r24, r24
    15d6:	51 f0       	breq	.+20     	; 0x15ec <pf_readdir+0xda>
    15d8:	f7 01       	movw	r30, r14
    15da:	14 86       	std	Z+12, r1	; 0x0c
    15dc:	15 86       	std	Z+13, r1	; 0x0d
    15de:	16 86       	std	Z+14, r1	; 0x0e
    15e0:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	19 f0       	breq	.+6      	; 0x15ec <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    15e6:	88 23       	and	r24, r24
    15e8:	09 f0       	breq	.+2      	; 0x15ec <pf_readdir+0xda>
    15ea:	5f c0       	rjmp	.+190    	; 0x16aa <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    15ec:	96 01       	movw	r18, r12
    15ee:	27 5f       	subi	r18, 0xF7	; 247
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    15f2:	f7 01       	movw	r30, r14
    15f4:	84 85       	ldd	r24, Z+12	; 0x0c
    15f6:	95 85       	ldd	r25, Z+13	; 0x0d
    15f8:	a6 85       	ldd	r26, Z+14	; 0x0e
    15fa:	b7 85       	ldd	r27, Z+15	; 0x0f
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	a1 05       	cpc	r26, r1
    1600:	b1 05       	cpc	r27, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <pf_readdir+0xf4>
    1604:	43 c0       	rjmp	.+134    	; 0x168c <pf_readdir+0x17a>
    1606:	fe 01       	movw	r30, r28
    1608:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    160a:	ae 01       	movw	r20, r28
    160c:	4b 5e       	subi	r20, 0xEB	; 235
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    1610:	80 81       	ld	r24, Z
			if (c == ' ') break;
    1612:	80 32       	cpi	r24, 0x20	; 32
    1614:	51 f0       	breq	.+20     	; 0x162a <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	09 f4       	brne	.+2      	; 0x161c <pf_readdir+0x10a>
    161a:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    161c:	d9 01       	movw	r26, r18
    161e:	8d 93       	st	X+, r24
    1620:	9d 01       	movw	r18, r26
    1622:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1624:	e4 17       	cp	r30, r20
    1626:	f5 07       	cpc	r31, r21
    1628:	99 f7       	brne	.-26     	; 0x1610 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    162a:	8d 89       	ldd	r24, Y+21	; 0x15
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	99 f0       	breq	.+38     	; 0x1656 <pf_readdir+0x144>
			*p++ = '.';
    1630:	8e e2       	ldi	r24, 0x2E	; 46
    1632:	f9 01       	movw	r30, r18
    1634:	81 93       	st	Z+, r24
    1636:	9f 01       	movw	r18, r30
    1638:	fe 01       	movw	r30, r28
    163a:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    163c:	ae 01       	movw	r20, r28
    163e:	48 5e       	subi	r20, 0xE8	; 232
    1640:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    1642:	80 81       	ld	r24, Z
				if (c == ' ') break;
    1644:	80 32       	cpi	r24, 0x20	; 32
    1646:	39 f0       	breq	.+14     	; 0x1656 <pf_readdir+0x144>
				*p++ = c;
    1648:	d9 01       	movw	r26, r18
    164a:	8d 93       	st	X+, r24
    164c:	9d 01       	movw	r18, r26
    164e:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1650:	e4 17       	cp	r30, r20
    1652:	f5 07       	cpc	r31, r21
    1654:	b1 f7       	brne	.-20     	; 0x1642 <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1656:	88 8d       	ldd	r24, Y+24	; 0x18
    1658:	f6 01       	movw	r30, r12
    165a:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    165c:	fe 01       	movw	r30, r28
    165e:	3d 96       	adiw	r30, 0x0d	; 13
    1660:	44 8d       	ldd	r20, Z+28	; 0x1c
    1662:	55 8d       	ldd	r21, Z+29	; 0x1d
    1664:	66 8d       	ldd	r22, Z+30	; 0x1e
    1666:	77 8d       	ldd	r23, Z+31	; 0x1f
    1668:	d6 01       	movw	r26, r12
    166a:	4d 93       	st	X+, r20
    166c:	5d 93       	st	X+, r21
    166e:	6d 93       	st	X+, r22
    1670:	7c 93       	st	X, r23
    1672:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1674:	80 8d       	ldd	r24, Z+24	; 0x18
    1676:	91 8d       	ldd	r25, Z+25	; 0x19
    1678:	15 96       	adiw	r26, 0x05	; 5
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24
    167e:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1680:	86 89       	ldd	r24, Z+22	; 0x16
    1682:	97 89       	ldd	r25, Z+23	; 0x17
    1684:	17 96       	adiw	r26, 0x07	; 7
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
    168a:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    168c:	f9 01       	movw	r30, r18
    168e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1690:	c7 01       	movw	r24, r14
    1692:	0e 94 a5 08 	call	0x114a	; 0x114a <dir_next>
				if (res == FR_NO_FILE) {
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	41 f4       	brne	.+16     	; 0x16aa <pf_readdir+0x198>
					dj->sect = 0;
    169a:	d7 01       	movw	r26, r14
    169c:	1c 96       	adiw	r26, 0x0c	; 12
    169e:	1d 92       	st	X+, r1
    16a0:	1d 92       	st	X+, r1
    16a2:	1d 92       	st	X+, r1
    16a4:	1c 92       	st	X, r1
    16a6:	1f 97       	sbiw	r26, 0x0f	; 15
    16a8:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    16aa:	ac 96       	adiw	r28, 0x2c	; 44
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	84 cf       	rjmp	.-248    	; 0x15d8 <pf_readdir+0xc6>

000016d0 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    16d0:	6f 92       	push	r6
    16d2:	7f 92       	push	r7
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
    16ee:	6b 01       	movw	r12, r22
    16f0:	7a 01       	movw	r14, r20
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    16f4:	08 94       	sec
    16f6:	e1 1c       	adc	r14, r1
    16f8:	f1 1c       	adc	r15, r1
    16fa:	f7 01       	movw	r30, r14
    16fc:	80 81       	ld	r24, Z
    16fe:	80 32       	cpi	r24, 0x20	; 32
    1700:	c9 f3       	breq	.-14     	; 0x16f4 <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    1702:	8f 32       	cpi	r24, 0x2F	; 47
    1704:	19 f4       	brne	.+6      	; 0x170c <follow_path+0x3c>
    1706:	08 94       	sec
    1708:	e1 1c       	adc	r14, r1
    170a:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    170c:	1c 82       	std	Y+4, r1	; 0x04
    170e:	1d 82       	std	Y+5, r1	; 0x05
    1710:	1e 82       	std	Y+6, r1	; 0x06
    1712:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1714:	f7 01       	movw	r30, r14
    1716:	80 81       	ld	r24, Z
    1718:	81 32       	cpi	r24, 0x21	; 33
    171a:	38 f4       	brcc	.+14     	; 0x172a <follow_path+0x5a>
		res = dir_rewind(dj);
    171c:	ce 01       	movw	r24, r28
    171e:	0e 94 3a 07 	call	0xe74	; 0xe74 <dir_rewind>
    1722:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    1724:	f6 01       	movw	r30, r12
    1726:	10 82       	st	Z, r1
    1728:	a5 c0       	rjmp	.+330    	; 0x1874 <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    172a:	a0 e2       	ldi	r26, 0x20	; 32
    172c:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    172e:	77 24       	eor	r7, r7
    1730:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1732:	fb e0       	ldi	r31, 0x0B	; 11
    1734:	8f 2e       	mov	r8, r31
    1736:	91 2c       	mov	r9, r1
    1738:	8c 0c       	add	r8, r12
    173a:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    173c:	aa 81       	ldd	r26, Y+2	; 0x02
    173e:	bb 81       	ldd	r27, Y+3	; 0x03
    1740:	fd 01       	movw	r30, r26
    1742:	8b e0       	ldi	r24, 0x0B	; 11
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	01 c0       	rjmp	.+2      	; 0x174a <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1748:	61 92       	st	Z+, r6
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	2f ef       	ldi	r18, 0xFF	; 255
    174e:	8f 3f       	cpi	r24, 0xFF	; 255
    1750:	92 07       	cpc	r25, r18
    1752:	d1 f7       	brne	.-12     	; 0x1748 <follow_path+0x78>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	aa 24       	eor	r10, r10
    1758:	38 e0       	ldi	r19, 0x08	; 8
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <follow_path+0x90>
    175c:	28 e0       	ldi	r18, 0x08	; 8
    175e:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1760:	f7 01       	movw	r30, r14
    1762:	ea 0d       	add	r30, r10
    1764:	f1 1d       	adc	r31, r1
    1766:	90 81       	ld	r25, Z
    1768:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    176a:	91 32       	cpi	r25, 0x21	; 33
    176c:	b0 f0       	brcs	.+44     	; 0x179a <follow_path+0xca>
    176e:	9f 32       	cpi	r25, 0x2F	; 47
    1770:	a1 f0       	breq	.+40     	; 0x179a <follow_path+0xca>
		if (c == '.' || i >= ni) {
    1772:	9e 32       	cpi	r25, 0x2E	; 46
    1774:	11 f0       	breq	.+4      	; 0x177a <follow_path+0xaa>
    1776:	23 17       	cp	r18, r19
    1778:	28 f0       	brcs	.+10     	; 0x1784 <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    177a:	38 30       	cpi	r19, 0x08	; 8
    177c:	71 f4       	brne	.+28     	; 0x179a <follow_path+0xca>
    177e:	9e 32       	cpi	r25, 0x2E	; 46
    1780:	69 f3       	breq	.-38     	; 0x175c <follow_path+0x8c>
    1782:	0b c0       	rjmp	.+22     	; 0x179a <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1784:	89 2f       	mov	r24, r25
    1786:	81 56       	subi	r24, 0x61	; 97
    1788:	8a 31       	cpi	r24, 0x1A	; 26
    178a:	08 f4       	brcc	.+2      	; 0x178e <follow_path+0xbe>
    178c:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    178e:	fd 01       	movw	r30, r26
    1790:	e2 0f       	add	r30, r18
    1792:	f1 1d       	adc	r31, r1
    1794:	90 83       	st	Z, r25
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	e3 cf       	rjmp	.-58     	; 0x1760 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    179a:	1b 96       	adiw	r26, 0x0b	; 11
    179c:	1c 92       	st	X, r1
    179e:	1b 97       	sbiw	r26, 0x0b	; 11
    17a0:	91 32       	cpi	r25, 0x21	; 33
    17a2:	10 f4       	brcc	.+4      	; 0x17a8 <follow_path+0xd8>
    17a4:	1b 96       	adiw	r26, 0x0b	; 11
    17a6:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 3a 07 	call	0xe74	; 0xe74 <dir_rewind>
    17ae:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    17b0:	88 23       	and	r24, r24
    17b2:	d1 f5       	brne	.+116    	; 0x1828 <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    17b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    17b6:	5d 85       	ldd	r21, Y+13	; 0x0d
    17b8:	6e 85       	ldd	r22, Y+14	; 0x0e
    17ba:	7f 85       	ldd	r23, Y+15	; 0x0f
    17bc:	28 81       	ld	r18, Y
    17be:	39 81       	ldd	r19, Y+1	; 0x01
    17c0:	2f 70       	andi	r18, 0x0F	; 15
    17c2:	30 70       	andi	r19, 0x00	; 0
    17c4:	e5 e0       	ldi	r30, 0x05	; 5
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	ea 95       	dec	r30
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <follow_path+0xf6>
    17ce:	c6 01       	movw	r24, r12
    17d0:	00 e2       	ldi	r16, 0x20	; 32
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    17d8:	88 23       	and	r24, r24
    17da:	11 f0       	breq	.+4      	; 0x17e0 <follow_path+0x110>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	23 c0       	rjmp	.+70     	; 0x1826 <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    17e0:	f6 01       	movw	r30, r12
    17e2:	80 81       	ld	r24, Z
    17e4:	88 23       	and	r24, r24
    17e6:	09 f4       	brne	.+2      	; 0x17ea <follow_path+0x11a>
    17e8:	55 c0       	rjmp	.+170    	; 0x1894 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    17ea:	f4 01       	movw	r30, r8
    17ec:	80 81       	ld	r24, Z
    17ee:	83 fd       	sbrc	r24, 3
    17f0:	15 c0       	rjmp	.+42     	; 0x181c <follow_path+0x14c>
    17f2:	d6 01       	movw	r26, r12
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	9c 01       	movw	r18, r24
    17fa:	f9 01       	movw	r30, r18
    17fc:	2b e0       	ldi	r18, 0x0B	; 11
    17fe:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1800:	21 50       	subi	r18, 0x01	; 1
    1802:	30 40       	sbci	r19, 0x00	; 0
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	2f 3f       	cpi	r18, 0xFF	; 255
    1808:	38 07       	cpc	r19, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <follow_path+0x13e>
    180c:	46 c0       	rjmp	.+140    	; 0x189a <follow_path+0x1ca>
    180e:	9c 91       	ld	r25, X
    1810:	80 81       	ld	r24, Z
    1812:	98 17       	cp	r25, r24
    1814:	19 f4       	brne	.+6      	; 0x181c <follow_path+0x14c>
    1816:	11 96       	adiw	r26, 0x01	; 1
    1818:	31 96       	adiw	r30, 0x01	; 1
    181a:	f2 cf       	rjmp	.-28     	; 0x1800 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 a5 08 	call	0x114a	; 0x114a <dir_next>
	} while (res == FR_OK);
    1822:	88 23       	and	r24, r24
    1824:	39 f2       	breq	.-114    	; 0x17b4 <follow_path+0xe4>
    1826:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1828:	e3 e0       	ldi	r30, 0x03	; 3
    182a:	be 16       	cp	r11, r30
    182c:	19 f5       	brne	.+70     	; 0x1874 <follow_path+0x1a4>
    182e:	ea 81       	ldd	r30, Y+2	; 0x02
    1830:	fb 81       	ldd	r31, Y+3	; 0x03
    1832:	83 85       	ldd	r24, Z+11	; 0x0b
    1834:	88 23       	and	r24, r24
    1836:	e1 f0       	breq	.+56     	; 0x1870 <follow_path+0x1a0>
    1838:	1d c0       	rjmp	.+58     	; 0x1874 <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    183a:	f4 01       	movw	r30, r8
    183c:	80 81       	ld	r24, Z
    183e:	84 ff       	sbrs	r24, 4
    1840:	17 c0       	rjmp	.+46     	; 0x1870 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1842:	ea 0c       	add	r14, r10
    1844:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1846:	f6 01       	movw	r30, r12
    1848:	84 89       	ldd	r24, Z+20	; 0x14
    184a:	95 89       	ldd	r25, Z+21	; 0x15
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	dc 01       	movw	r26, r24
    1852:	99 27       	eor	r25, r25
    1854:	88 27       	eor	r24, r24
    1856:	22 8d       	ldd	r18, Z+26	; 0x1a
    1858:	33 8d       	ldd	r19, Z+27	; 0x1b
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	82 2b       	or	r24, r18
    1860:	93 2b       	or	r25, r19
    1862:	a4 2b       	or	r26, r20
    1864:	b5 2b       	or	r27, r21
    1866:	8c 83       	std	Y+4, r24	; 0x04
    1868:	9d 83       	std	Y+5, r25	; 0x05
    186a:	ae 83       	std	Y+6, r26	; 0x06
    186c:	bf 83       	std	Y+7, r27	; 0x07
    186e:	66 cf       	rjmp	.-308    	; 0x173c <follow_path+0x6c>
		}
    1870:	94 e0       	ldi	r25, 0x04	; 4
    1872:	b9 2e       	mov	r11, r25
	}

	return res;
}
    1874:	8b 2d       	mov	r24, r11
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	9f 90       	pop	r9
    188c:	8f 90       	pop	r8
    188e:	7f 90       	pop	r7
    1890:	6f 90       	pop	r6
    1892:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	b8 2e       	mov	r11, r24
    1898:	ca cf       	rjmp	.-108    	; 0x182e <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	83 85       	ldd	r24, Z+11	; 0x0b
    18a0:	88 23       	and	r24, r24
    18a2:	59 f2       	breq	.-106    	; 0x183a <follow_path+0x16a>
    18a4:	e7 cf       	rjmp	.-50     	; 0x1874 <follow_path+0x1a4>

000018a6 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	ac 97       	sbiw	r28, 0x2c	; 44
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	8c 01       	movw	r16, r24
    18c4:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    18c6:	80 91 07 01 	lds	r24, 0x0107
    18ca:	90 91 08 01 	lds	r25, 0x0108
    18ce:	89 2b       	or	r24, r25
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <pf_opendir+0x30>
    18d2:	86 e0       	ldi	r24, 0x06	; 6
    18d4:	31 c0       	rjmp	.+98     	; 0x1938 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    18d6:	ce 01       	movw	r24, r28
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	f8 01       	movw	r30, r16
    18dc:	93 83       	std	Z+3, r25	; 0x03
    18de:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    18e0:	3d e0       	ldi	r19, 0x0D	; 13
    18e2:	e3 2e       	mov	r14, r19
    18e4:	f1 2c       	mov	r15, r1
    18e6:	ec 0e       	add	r14, r28
    18e8:	fd 1e       	adc	r15, r29
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    18f2:	88 23       	and	r24, r24
    18f4:	f1 f4       	brne	.+60     	; 0x1932 <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	88 23       	and	r24, r24
    18fa:	c1 f0       	breq	.+48     	; 0x192c <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    18fc:	88 8d       	ldd	r24, Y+24	; 0x18
    18fe:	84 ff       	sbrs	r24, 4
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    1902:	f7 01       	movw	r30, r14
    1904:	84 89       	ldd	r24, Z+20	; 0x14
    1906:	95 89       	ldd	r25, Z+21	; 0x15
    1908:	a0 e0       	ldi	r26, 0x00	; 0
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	dc 01       	movw	r26, r24
    190e:	99 27       	eor	r25, r25
    1910:	88 27       	eor	r24, r24
    1912:	22 8d       	ldd	r18, Z+26	; 0x1a
    1914:	33 8d       	ldd	r19, Z+27	; 0x1b
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	82 2b       	or	r24, r18
    191c:	93 2b       	or	r25, r19
    191e:	a4 2b       	or	r26, r20
    1920:	b5 2b       	or	r27, r21
    1922:	f8 01       	movw	r30, r16
    1924:	84 83       	std	Z+4, r24	; 0x04
    1926:	95 83       	std	Z+5, r25	; 0x05
    1928:	a6 83       	std	Z+6, r26	; 0x06
    192a:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    192c:	c8 01       	movw	r24, r16
    192e:	0e 94 3a 07 	call	0xe74	; 0xe74 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	09 f4       	brne	.+2      	; 0x1938 <pf_opendir+0x92>
    1936:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    1938:	ac 96       	adiw	r28, 0x2c	; 44
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	08 95       	ret

00001952 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	ec 97       	sbiw	r28, 0x3c	; 60
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1970:	00 91 07 01 	lds	r16, 0x0107
    1974:	10 91 08 01 	lds	r17, 0x0108


	if (!fs)						/* Check file system */
    1978:	01 15       	cp	r16, r1
    197a:	11 05       	cpc	r17, r1
    197c:	11 f4       	brne	.+4      	; 0x1982 <pf_open+0x30>
    197e:	66 e0       	ldi	r22, 0x06	; 6
    1980:	40 c0       	rjmp	.+128    	; 0x1a02 <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1982:	f8 01       	movw	r30, r16
    1984:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	98 8b       	std	Y+16, r25	; 0x10
    198c:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    198e:	6d e1       	ldi	r22, 0x1D	; 29
    1990:	e6 2e       	mov	r14, r22
    1992:	f1 2c       	mov	r15, r1
    1994:	ec 0e       	add	r14, r28
    1996:	fd 1e       	adc	r15, r29
    1998:	ce 01       	movw	r24, r28
    199a:	0d 96       	adiw	r24, 0x0d	; 13
    199c:	b7 01       	movw	r22, r14
    199e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <follow_path>
    19a2:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    19a4:	88 23       	and	r24, r24
    19a6:	69 f5       	brne	.+90     	; 0x1a02 <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    19a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19aa:	88 23       	and	r24, r24
    19ac:	49 f1       	breq	.+82     	; 0x1a00 <pf_open+0xae>
    19ae:	88 a5       	ldd	r24, Y+40	; 0x28
    19b0:	84 fd       	sbrc	r24, 4
    19b2:	26 c0       	rjmp	.+76     	; 0x1a00 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    19b4:	f7 01       	movw	r30, r14
    19b6:	84 89       	ldd	r24, Z+20	; 0x14
    19b8:	95 89       	ldd	r25, Z+21	; 0x15
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	dc 01       	movw	r26, r24
    19c0:	99 27       	eor	r25, r25
    19c2:	88 27       	eor	r24, r24
    19c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    19c6:	33 8d       	ldd	r19, Z+27	; 0x1b
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	82 2b       	or	r24, r18
    19ce:	93 2b       	or	r25, r19
    19d0:	a4 2b       	or	r26, r20
    19d2:	b5 2b       	or	r27, r21
    19d4:	f8 01       	movw	r30, r16
    19d6:	86 8f       	std	Z+30, r24	; 0x1e
    19d8:	97 8f       	std	Z+31, r25	; 0x1f
    19da:	a0 a3       	std	Z+32, r26	; 0x20
    19dc:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    19de:	f7 01       	movw	r30, r14
    19e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    19e2:	95 8d       	ldd	r25, Z+29	; 0x1d
    19e4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    19e6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    19e8:	f8 01       	movw	r30, r16
    19ea:	82 8f       	std	Z+26, r24	; 0x1a
    19ec:	93 8f       	std	Z+27, r25	; 0x1b
    19ee:	a4 8f       	std	Z+28, r26	; 0x1c
    19f0:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    19f2:	16 8a       	std	Z+22, r1	; 0x16
    19f4:	17 8a       	std	Z+23, r1	; 0x17
    19f6:	10 8e       	std	Z+24, r1	; 0x18
    19f8:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	81 83       	std	Z+1, r24	; 0x01
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <pf_open+0xb0>

	return FR_OK;
    1a00:	63 e0       	ldi	r22, 0x03	; 3
}
    1a02:	86 2f       	mov	r24, r22
    1a04:	ec 96       	adiw	r28, 0x3c	; 60
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	08 95       	ret

00001a1e <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	3c 01       	movw	r6, r24
    1a40:	6b 01       	movw	r12, r22
    1a42:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    1a44:	c0 91 07 01 	lds	r28, 0x0107
    1a48:	d0 91 08 01 	lds	r29, 0x0108


	*br = 0;
    1a4c:	fa 01       	movw	r30, r20
    1a4e:	11 82       	std	Z+1, r1	; 0x01
    1a50:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1a52:	20 97       	sbiw	r28, 0x00	; 0
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <pf_read+0x3c>
    1a56:	86 e0       	ldi	r24, 0x06	; 6
    1a58:	ca c0       	rjmp	.+404    	; 0x1bee <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	80 fd       	sbrc	r24, 0
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <pf_read+0x46>
    1a60:	85 e0       	ldi	r24, 0x05	; 5
    1a62:	c5 c0       	rjmp	.+394    	; 0x1bee <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1a64:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1a66:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1a68:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1a6a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1a6c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6e:	9f 89       	ldd	r25, Y+23	; 0x17
    1a70:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a72:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a74:	28 1b       	sub	r18, r24
    1a76:	39 0b       	sbc	r19, r25
    1a78:	4a 0b       	sbc	r20, r26
    1a7a:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	28 17       	cp	r18, r24
    1a84:	39 07       	cpc	r19, r25
    1a86:	4a 07       	cpc	r20, r26
    1a88:	5b 07       	cpc	r21, r27
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <pf_read+0x70>
    1a8c:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    1a8e:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1a90:	41 2c       	mov	r4, r1
    1a92:	e2 e0       	ldi	r30, 0x02	; 2
    1a94:	5e 2e       	mov	r5, r30
    1a96:	a3 c0       	rjmp	.+326    	; 0x1bde <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1a98:	2e 89       	ldd	r18, Y+22	; 0x16
    1a9a:	3f 89       	ldd	r19, Y+23	; 0x17
    1a9c:	48 8d       	ldd	r20, Y+24	; 0x18
    1a9e:	59 8d       	ldd	r21, Y+25	; 0x19
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	91 70       	andi	r25, 0x01	; 1
    1aa6:	a0 70       	andi	r26, 0x00	; 0
    1aa8:	b0 70       	andi	r27, 0x00	; 0
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	a1 05       	cpc	r26, r1
    1aae:	b1 05       	cpc	r27, r1
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <pf_read+0x96>
    1ab2:	60 c0       	rjmp	.+192    	; 0x1b74 <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1ab4:	da 01       	movw	r26, r20
    1ab6:	c9 01       	movw	r24, r18
    1ab8:	79 e0       	ldi	r23, 0x09	; 9
    1aba:	b6 95       	lsr	r27
    1abc:	a7 95       	ror	r26
    1abe:	97 95       	ror	r25
    1ac0:	87 95       	ror	r24
    1ac2:	7a 95       	dec	r23
    1ac4:	d1 f7       	brne	.-12     	; 0x1aba <pf_read+0x9c>
    1ac6:	fa 80       	ldd	r15, Y+2	; 0x02
    1ac8:	fa 94       	dec	r15
    1aca:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    1acc:	d1 f4       	brne	.+52     	; 0x1b02 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1ace:	21 15       	cp	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	41 05       	cpc	r20, r1
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <pf_read+0xc4>
    1ad8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ada:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1adc:	88 a1       	ldd	r24, Y+32	; 0x20
    1ade:	99 a1       	ldd	r25, Y+33	; 0x21
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <pf_read+0xd0>
    1ae2:	6a a1       	ldd	r22, Y+34	; 0x22
    1ae4:	7b a1       	ldd	r23, Y+35	; 0x23
    1ae6:	8c a1       	ldd	r24, Y+36	; 0x24
    1ae8:	9d a1       	ldd	r25, Y+37	; 0x25
    1aea:	0e 94 b9 07 	call	0xf72	; 0xf72 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1aee:	62 30       	cpi	r22, 0x02	; 2
    1af0:	71 05       	cpc	r23, r1
    1af2:	81 05       	cpc	r24, r1
    1af4:	91 05       	cpc	r25, r1
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <pf_read+0xdc>
    1af8:	78 c0       	rjmp	.+240    	; 0x1bea <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    1afa:	6a a3       	std	Y+34, r22	; 0x22
    1afc:	7b a3       	std	Y+35, r23	; 0x23
    1afe:	8c a3       	std	Y+36, r24	; 0x24
    1b00:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1b02:	00 91 07 01 	lds	r16, 0x0107
    1b06:	10 91 08 01 	lds	r17, 0x0108


	clst -= 2;
    1b0a:	2a a1       	ldd	r18, Y+34	; 0x22
    1b0c:	3b a1       	ldd	r19, Y+35	; 0x23
    1b0e:	4c a1       	ldd	r20, Y+36	; 0x24
    1b10:	5d a1       	ldd	r21, Y+37	; 0x25
    1b12:	22 50       	subi	r18, 0x02	; 2
    1b14:	30 40       	sbci	r19, 0x00	; 0
    1b16:	40 40       	sbci	r20, 0x00	; 0
    1b18:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	86 81       	ldd	r24, Z+6	; 0x06
    1b1e:	97 81       	ldd	r25, Z+7	; 0x07
    1b20:	a0 85       	ldd	r26, Z+8	; 0x08
    1b22:	b1 85       	ldd	r27, Z+9	; 0x09
    1b24:	02 97       	sbiw	r24, 0x02	; 2
    1b26:	a1 09       	sbc	r26, r1
    1b28:	b1 09       	sbc	r27, r1
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	4a 07       	cpc	r20, r26
    1b30:	5b 07       	cpc	r21, r27
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <pf_read+0x118>
    1b34:	5a c0       	rjmp	.+180    	; 0x1bea <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    1b36:	62 81       	ldd	r22, Z+2	; 0x02
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	f8 01       	movw	r30, r16
    1b48:	82 89       	ldd	r24, Z+18	; 0x12
    1b4a:	93 89       	ldd	r25, Z+19	; 0x13
    1b4c:	a4 89       	ldd	r26, Z+20	; 0x14
    1b4e:	b5 89       	ldd	r27, Z+21	; 0x15
    1b50:	28 0f       	add	r18, r24
    1b52:	39 1f       	adc	r19, r25
    1b54:	4a 1f       	adc	r20, r26
    1b56:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	41 05       	cpc	r20, r1
    1b5e:	51 05       	cpc	r21, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <pf_read+0x146>
    1b62:	43 c0       	rjmp	.+134    	; 0x1bea <pf_read+0x1cc>
			fs->dsect = sect + cs;
    1b64:	2f 0d       	add	r18, r15
    1b66:	31 1d       	adc	r19, r1
    1b68:	41 1d       	adc	r20, r1
    1b6a:	51 1d       	adc	r21, r1
    1b6c:	2e a3       	std	Y+38, r18	; 0x26
    1b6e:	3f a3       	std	Y+39, r19	; 0x27
    1b70:	48 a7       	std	Y+40, r20	; 0x28
    1b72:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1b74:	2e 89       	ldd	r18, Y+22	; 0x16
    1b76:	3f 89       	ldd	r19, Y+23	; 0x17
    1b78:	31 70       	andi	r19, 0x01	; 1
    1b7a:	c2 01       	movw	r24, r4
    1b7c:	82 1b       	sub	r24, r18
    1b7e:	93 0b       	sbc	r25, r19
    1b80:	76 01       	movw	r14, r12
    1b82:	8c 15       	cp	r24, r12
    1b84:	9d 05       	cpc	r25, r13
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a <pf_read+0x16c>
    1b88:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    1b8a:	61 14       	cp	r6, r1
    1b8c:	71 04       	cpc	r7, r1
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <pf_read+0x178>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <pf_read+0x17a>
    1b96:	c5 01       	movw	r24, r10
    1b98:	4e a1       	ldd	r20, Y+38	; 0x26
    1b9a:	5f a1       	ldd	r21, Y+39	; 0x27
    1b9c:	68 a5       	ldd	r22, Y+40	; 0x28
    1b9e:	79 a5       	ldd	r23, Y+41	; 0x29
    1ba0:	87 01       	movw	r16, r14
    1ba2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
		if (dr) goto fr_abort;
    1ba6:	88 23       	and	r24, r24
    1ba8:	01 f5       	brne	.+64     	; 0x1bea <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1baa:	c7 01       	movw	r24, r14
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	2e 89       	ldd	r18, Y+22	; 0x16
    1bb2:	3f 89       	ldd	r19, Y+23	; 0x17
    1bb4:	48 8d       	ldd	r20, Y+24	; 0x18
    1bb6:	59 8d       	ldd	r21, Y+25	; 0x19
    1bb8:	28 0f       	add	r18, r24
    1bba:	39 1f       	adc	r19, r25
    1bbc:	4a 1f       	adc	r20, r26
    1bbe:	5b 1f       	adc	r21, r27
    1bc0:	2e 8b       	std	Y+22, r18	; 0x16
    1bc2:	3f 8b       	std	Y+23, r19	; 0x17
    1bc4:	48 8f       	std	Y+24, r20	; 0x18
    1bc6:	59 8f       	std	Y+25, r21	; 0x19
    1bc8:	ae 0c       	add	r10, r14
    1bca:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1bcc:	ce 18       	sub	r12, r14
    1bce:	df 08       	sbc	r13, r15
    1bd0:	f4 01       	movw	r30, r8
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	8e 0d       	add	r24, r14
    1bd8:	9f 1d       	adc	r25, r15
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1bde:	c1 14       	cp	r12, r1
    1be0:	d1 04       	cpc	r13, r1
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <pf_read+0x1c8>
    1be4:	59 cf       	rjmp	.-334    	; 0x1a98 <pf_read+0x7a>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1bea:	19 82       	std	Y+1, r1	; 0x01
    1bec:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	7f 90       	pop	r7
    1c08:	6f 90       	pop	r6
    1c0a:	5f 90       	pop	r5
    1c0c:	4f 90       	pop	r4
    1c0e:	08 95       	ret

00001c10 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	b8 2e       	mov	r11, r24
    1c26:	a9 2e       	mov	r10, r25
    1c28:	6a 01       	movw	r12, r20
    1c2a:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1c2c:	2e ef       	ldi	r18, 0xFE	; 254
    1c2e:	31 e0       	ldi	r19, 0x01	; 1
    1c30:	02 e0       	ldi	r16, 0x02	; 2
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1c38:	88 23       	and	r24, r24
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <check_fs+0x30>
    1c3c:	23 e0       	ldi	r18, 0x03	; 3
    1c3e:	33 c0       	rjmp	.+102    	; 0x1ca6 <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    1c40:	cb 2d       	mov	r28, r11
    1c42:	da 2d       	mov	r29, r10
    1c44:	88 81       	ld	r24, Y
    1c46:	99 81       	ldd	r25, Y+1	; 0x01
    1c48:	85 55       	subi	r24, 0x55	; 85
    1c4a:	9a 4a       	sbci	r25, 0xAA	; 170
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <check_fs+0x42>
    1c4e:	22 e0       	ldi	r18, 0x02	; 2
    1c50:	2a c0       	rjmp	.+84     	; 0x1ca6 <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    1c52:	8b 2d       	mov	r24, r11
    1c54:	9a 2d       	mov	r25, r10
    1c56:	b7 01       	movw	r22, r14
    1c58:	a6 01       	movw	r20, r12
    1c5a:	26 e3       	ldi	r18, 0x36	; 54
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	02 e0       	ldi	r16, 0x02	; 2
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1c66:	88 23       	and	r24, r24
    1c68:	39 f4       	brne	.+14     	; 0x1c78 <check_fs+0x68>
    1c6a:	88 81       	ld	r24, Y
    1c6c:	99 81       	ldd	r25, Y+1	; 0x01
    1c6e:	86 54       	subi	r24, 0x46	; 70
    1c70:	91 44       	sbci	r25, 0x41	; 65
    1c72:	11 f4       	brne	.+4      	; 0x1c78 <check_fs+0x68>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    1c78:	8b 2d       	mov	r24, r11
    1c7a:	9a 2d       	mov	r25, r10
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	a6 01       	movw	r20, r12
    1c80:	22 e5       	ldi	r18, 0x52	; 82
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	02 e0       	ldi	r16, 0x02	; 2
    1c86:	10 e0       	ldi	r17, 0x00	; 0
    1c88:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1c8c:	88 23       	and	r24, r24
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <check_fs+0x84>
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <check_fs+0x96>
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	88 81       	ld	r24, Y
    1c98:	99 81       	ldd	r25, Y+1	; 0x01
    1c9a:	86 54       	subi	r24, 0x46	; 70
    1c9c:	91 44       	sbci	r25, 0x41	; 65
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <check_fs+0x92>
    1ca0:	21 e0       	ldi	r18, 0x01	; 1
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    1ca6:	82 2f       	mov	r24, r18
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	08 95       	ret

00001cbe <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    1cbe:	4f 92       	push	r4
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
    1cc6:	8f 92       	push	r8
    1cc8:	9f 92       	push	r9
    1cca:	af 92       	push	r10
    1ccc:	bf 92       	push	r11
    1cce:	cf 92       	push	r12
    1cd0:	df 92       	push	r13
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	fc 01       	movw	r30, r24
    1ce0:	5b 01       	movw	r10, r22
    1ce2:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    1ce4:	c0 91 07 01 	lds	r28, 0x0107
    1ce8:	d0 91 08 01 	lds	r29, 0x0108


	*bw = 0;
    1cec:	da 01       	movw	r26, r20
    1cee:	1d 92       	st	X+, r1
    1cf0:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1cf2:	20 97       	sbiw	r28, 0x00	; 0
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <pf_write+0x3c>
    1cf6:	86 e0       	ldi	r24, 0x06	; 6
    1cf8:	fd c0       	rjmp	.+506    	; 0x1ef4 <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	80 fd       	sbrc	r24, 0
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <pf_write+0x48>
    1d02:	85 e0       	ldi	r24, 0x05	; 5
    1d04:	f7 c0       	rjmp	.+494    	; 0x1ef4 <pf_write+0x236>
    1d06:	80 74       	andi	r24, 0x40	; 64
    1d08:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    1d0a:	61 15       	cp	r22, r1
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	89 f4       	brne	.+34     	; 0x1d32 <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    1d10:	89 2b       	or	r24, r25
    1d12:	59 f0       	breq	.+22     	; 0x1d2a <pf_write+0x6c>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_writep>
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <pf_write+0x6c>
    1d28:	e3 c0       	rjmp	.+454    	; 0x1ef0 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	8f 7b       	andi	r24, 0xBF	; 191
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	dd c0       	rjmp	.+442    	; 0x1eec <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    1d32:	89 2b       	or	r24, r25
    1d34:	51 f4       	brne	.+20     	; 0x1d4a <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    1d36:	8e 89       	ldd	r24, Y+22	; 0x16
    1d38:	9f 89       	ldd	r25, Y+23	; 0x17
    1d3a:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d3c:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d3e:	80 70       	andi	r24, 0x00	; 0
    1d40:	9e 7f       	andi	r25, 0xFE	; 254
    1d42:	8e 8b       	std	Y+22, r24	; 0x16
    1d44:	9f 8b       	std	Y+23, r25	; 0x17
    1d46:	a8 8f       	std	Y+24, r26	; 0x18
    1d48:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    1d4a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1d4c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1d4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1d50:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1d52:	8e 89       	ldd	r24, Y+22	; 0x16
    1d54:	9f 89       	ldd	r25, Y+23	; 0x17
    1d56:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d58:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d5a:	28 1b       	sub	r18, r24
    1d5c:	39 0b       	sbc	r19, r25
    1d5e:	4a 0b       	sbc	r20, r26
    1d60:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    1d62:	c5 01       	movw	r24, r10
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	28 17       	cp	r18, r24
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	4a 07       	cpc	r20, r26
    1d6e:	5b 07       	cpc	r21, r27
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <pf_write+0xb6>
    1d72:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    1d74:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1d76:	41 2c       	mov	r4, r1
    1d78:	a2 e0       	ldi	r26, 0x02	; 2
    1d7a:	5a 2e       	mov	r5, r26
    1d7c:	b3 c0       	rjmp	.+358    	; 0x1ee4 <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    1d7e:	2e 89       	ldd	r18, Y+22	; 0x16
    1d80:	3f 89       	ldd	r19, Y+23	; 0x17
    1d82:	48 8d       	ldd	r20, Y+24	; 0x18
    1d84:	59 8d       	ldd	r21, Y+25	; 0x19
    1d86:	c9 01       	movw	r24, r18
    1d88:	91 70       	andi	r25, 0x01	; 1
    1d8a:	89 2b       	or	r24, r25
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <pf_write+0xd2>
    1d8e:	6c c0       	rjmp	.+216    	; 0x1e68 <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1d90:	da 01       	movw	r26, r20
    1d92:	c9 01       	movw	r24, r18
    1d94:	f9 e0       	ldi	r31, 0x09	; 9
    1d96:	b6 95       	lsr	r27
    1d98:	a7 95       	ror	r26
    1d9a:	97 95       	ror	r25
    1d9c:	87 95       	ror	r24
    1d9e:	fa 95       	dec	r31
    1da0:	d1 f7       	brne	.-12     	; 0x1d96 <pf_write+0xd8>
    1da2:	fa 80       	ldd	r15, Y+2	; 0x02
    1da4:	fa 94       	dec	r15
    1da6:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    1da8:	d1 f4       	brne	.+52     	; 0x1dde <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1daa:	21 15       	cp	r18, r1
    1dac:	31 05       	cpc	r19, r1
    1dae:	41 05       	cpc	r20, r1
    1db0:	51 05       	cpc	r21, r1
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <pf_write+0x100>
    1db4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1db6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1db8:	88 a1       	ldd	r24, Y+32	; 0x20
    1dba:	99 a1       	ldd	r25, Y+33	; 0x21
    1dbc:	06 c0       	rjmp	.+12     	; 0x1dca <pf_write+0x10c>
    1dbe:	6a a1       	ldd	r22, Y+34	; 0x22
    1dc0:	7b a1       	ldd	r23, Y+35	; 0x23
    1dc2:	8c a1       	ldd	r24, Y+36	; 0x24
    1dc4:	9d a1       	ldd	r25, Y+37	; 0x25
    1dc6:	0e 94 b9 07 	call	0xf72	; 0xf72 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    1dca:	62 30       	cpi	r22, 0x02	; 2
    1dcc:	71 05       	cpc	r23, r1
    1dce:	81 05       	cpc	r24, r1
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	08 f4       	brcc	.+2      	; 0x1dd6 <pf_write+0x118>
    1dd4:	8d c0       	rjmp	.+282    	; 0x1ef0 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    1dd6:	6a a3       	std	Y+34, r22	; 0x22
    1dd8:	7b a3       	std	Y+35, r23	; 0x23
    1dda:	8c a3       	std	Y+36, r24	; 0x24
    1ddc:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1dde:	00 91 07 01 	lds	r16, 0x0107
    1de2:	10 91 08 01 	lds	r17, 0x0108


	clst -= 2;
    1de6:	2a a1       	ldd	r18, Y+34	; 0x22
    1de8:	3b a1       	ldd	r19, Y+35	; 0x23
    1dea:	4c a1       	ldd	r20, Y+36	; 0x24
    1dec:	5d a1       	ldd	r21, Y+37	; 0x25
    1dee:	22 50       	subi	r18, 0x02	; 2
    1df0:	30 40       	sbci	r19, 0x00	; 0
    1df2:	40 40       	sbci	r20, 0x00	; 0
    1df4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1df6:	f8 01       	movw	r30, r16
    1df8:	86 81       	ldd	r24, Z+6	; 0x06
    1dfa:	97 81       	ldd	r25, Z+7	; 0x07
    1dfc:	a0 85       	ldd	r26, Z+8	; 0x08
    1dfe:	b1 85       	ldd	r27, Z+9	; 0x09
    1e00:	02 97       	sbiw	r24, 0x02	; 2
    1e02:	a1 09       	sbc	r26, r1
    1e04:	b1 09       	sbc	r27, r1
    1e06:	28 17       	cp	r18, r24
    1e08:	39 07       	cpc	r19, r25
    1e0a:	4a 07       	cpc	r20, r26
    1e0c:	5b 07       	cpc	r21, r27
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <pf_write+0x154>
    1e10:	6f c0       	rjmp	.+222    	; 0x1ef0 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    1e12:	62 81       	ldd	r22, Z+2	; 0x02
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	f8 01       	movw	r30, r16
    1e24:	82 89       	ldd	r24, Z+18	; 0x12
    1e26:	93 89       	ldd	r25, Z+19	; 0x13
    1e28:	a4 89       	ldd	r26, Z+20	; 0x14
    1e2a:	b5 89       	ldd	r27, Z+21	; 0x15
    1e2c:	28 0f       	add	r18, r24
    1e2e:	39 1f       	adc	r19, r25
    1e30:	4a 1f       	adc	r20, r26
    1e32:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    1e34:	21 15       	cp	r18, r1
    1e36:	31 05       	cpc	r19, r1
    1e38:	41 05       	cpc	r20, r1
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <pf_write+0x182>
    1e3e:	58 c0       	rjmp	.+176    	; 0x1ef0 <pf_write+0x232>
			fs->dsect = sect + cs;
    1e40:	ba 01       	movw	r22, r20
    1e42:	a9 01       	movw	r20, r18
    1e44:	4f 0d       	add	r20, r15
    1e46:	51 1d       	adc	r21, r1
    1e48:	61 1d       	adc	r22, r1
    1e4a:	71 1d       	adc	r23, r1
    1e4c:	4e a3       	std	Y+38, r20	; 0x26
    1e4e:	5f a3       	std	Y+39, r21	; 0x27
    1e50:	68 a7       	std	Y+40, r22	; 0x28
    1e52:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_writep>
    1e5c:	88 23       	and	r24, r24
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <pf_write+0x1a4>
    1e60:	47 c0       	rjmp	.+142    	; 0x1ef0 <pf_write+0x232>
			fs->flag |= FA__WIP;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	80 64       	ori	r24, 0x40	; 64
    1e66:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1e68:	8e 89       	ldd	r24, Y+22	; 0x16
    1e6a:	9f 89       	ldd	r25, Y+23	; 0x17
    1e6c:	91 70       	andi	r25, 0x01	; 1
    1e6e:	92 01       	movw	r18, r4
    1e70:	28 1b       	sub	r18, r24
    1e72:	39 0b       	sbc	r19, r25
    1e74:	65 01       	movw	r12, r10
    1e76:	2a 15       	cp	r18, r10
    1e78:	3b 05       	cpc	r19, r11
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <pf_write+0x1c0>
    1e7c:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    1e7e:	76 01       	movw	r14, r12
    1e80:	00 e0       	ldi	r16, 0x00	; 0
    1e82:	10 e0       	ldi	r17, 0x00	; 0
    1e84:	c4 01       	movw	r24, r8
    1e86:	b8 01       	movw	r22, r16
    1e88:	a7 01       	movw	r20, r14
    1e8a:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_writep>
    1e8e:	88 23       	and	r24, r24
    1e90:	79 f5       	brne	.+94     	; 0x1ef0 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1e92:	8e 89       	ldd	r24, Y+22	; 0x16
    1e94:	9f 89       	ldd	r25, Y+23	; 0x17
    1e96:	a8 8d       	ldd	r26, Y+24	; 0x18
    1e98:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e9a:	8e 0d       	add	r24, r14
    1e9c:	9f 1d       	adc	r25, r15
    1e9e:	a0 1f       	adc	r26, r16
    1ea0:	b1 1f       	adc	r27, r17
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	8e 8b       	std	Y+22, r24	; 0x16
    1ea6:	9f 8b       	std	Y+23, r25	; 0x17
    1ea8:	a8 8f       	std	Y+24, r26	; 0x18
    1eaa:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    1eac:	d3 01       	movw	r26, r6
    1eae:	8d 91       	ld	r24, X+
    1eb0:	9c 91       	ld	r25, X
    1eb2:	11 97       	sbiw	r26, 0x01	; 1
    1eb4:	8c 0d       	add	r24, r12
    1eb6:	9d 1d       	adc	r25, r13
    1eb8:	8d 93       	st	X+, r24
    1eba:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    1ebc:	31 70       	andi	r19, 0x01	; 1
    1ebe:	23 2b       	or	r18, r19
    1ec0:	69 f4       	brne	.+26     	; 0x1edc <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	0e 94 a9 05 	call	0xb52	; 0xb52 <disk_writep>
    1ed2:	88 23       	and	r24, r24
    1ed4:	69 f4       	brne	.+26     	; 0x1ef0 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	8f 7b       	andi	r24, 0xBF	; 191
    1eda:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1edc:	8c 0c       	add	r8, r12
    1ede:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    1ee0:	ac 18       	sub	r10, r12
    1ee2:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    1ee4:	a1 14       	cp	r10, r1
    1ee6:	b1 04       	cpc	r11, r1
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <pf_write+0x22e>
    1eea:	49 cf       	rjmp	.-366    	; 0x1d7e <pf_write+0xc0>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	9f 90       	pop	r9
    1f0a:	8f 90       	pop	r8
    1f0c:	7f 90       	pop	r7
    1f0e:	6f 90       	pop	r6
    1f10:	5f 90       	pop	r5
    1f12:	4f 90       	pop	r4
    1f14:	08 95       	ret

00001f16 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1f16:	6f 92       	push	r6
    1f18:	7f 92       	push	r7
    1f1a:	8f 92       	push	r8
    1f1c:	9f 92       	push	r9
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	a4 97       	sbiw	r28, 0x24	; 36
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1f44:	10 92 08 01 	sts	0x0108, r1
    1f48:	10 92 07 01 	sts	0x0107, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <pf_mount+0x3c>
    1f50:	ec c0       	rjmp	.+472    	; 0x212a <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1f52:	0e 94 79 06 	call	0xcf2	; 0xcf2 <disk_initialize>
    1f56:	80 ff       	sbrs	r24, 0
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <pf_mount+0x48>
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	eb c0       	rjmp	.+470    	; 0x2134 <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1f5e:	4e 01       	movw	r8, r28
    1f60:	08 94       	sec
    1f62:	81 1c       	adc	r8, r1
    1f64:	91 1c       	adc	r9, r1
    1f66:	c4 01       	movw	r24, r8
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	21 f0       	breq	.+8      	; 0x1f80 <pf_mount+0x6a>
    1f78:	cc 24       	eor	r12, r12
    1f7a:	dd 24       	eor	r13, r13
    1f7c:	76 01       	movw	r14, r12
    1f7e:	1b c0       	rjmp	.+54     	; 0x1fb6 <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1f80:	c4 01       	movw	r24, r8
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	2e eb       	ldi	r18, 0xBE	; 190
    1f8c:	31 e0       	ldi	r19, 0x01	; 1
    1f8e:	00 e1       	ldi	r16, 0x10	; 16
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1f96:	88 23       	and	r24, r24
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <pf_mount+0x86>
    1f9a:	c9 c0       	rjmp	.+402    	; 0x212e <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <pf_mount+0x8e>
    1fa2:	c7 c0       	rjmp	.+398    	; 0x2132 <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    1fa4:	c9 84       	ldd	r12, Y+9	; 0x09
    1fa6:	da 84       	ldd	r13, Y+10	; 0x0a
    1fa8:	eb 84       	ldd	r14, Y+11	; 0x0b
    1faa:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1fac:	c4 01       	movw	r24, r8
    1fae:	b7 01       	movw	r22, r14
    1fb0:	a6 01       	movw	r20, r12
    1fb2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <pf_mount+0xa6>
    1fba:	b9 c0       	rjmp	.+370    	; 0x212e <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1fbc:	88 23       	and	r24, r24
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <pf_mount+0xac>
    1fc0:	b8 c0       	rjmp	.+368    	; 0x2132 <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	a6 01       	movw	r20, r12
    1fca:	2d e0       	ldi	r18, 0x0D	; 13
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	04 e2       	ldi	r16, 0x24	; 36
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <disk_readp>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <pf_mount+0xc6>
    1fda:	a9 c0       	rjmp	.+338    	; 0x212e <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    1fe6:	61 15       	cp	r22, r1
    1fe8:	71 05       	cpc	r23, r1
    1fea:	81 05       	cpc	r24, r1
    1fec:	91 05       	cpc	r25, r1
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <pf_mount+0xe2>
    1ff0:	68 8d       	ldd	r22, Y+24	; 0x18
    1ff2:	79 8d       	ldd	r23, Y+25	; 0x19
    1ff4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ff6:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1ff8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	0e 94 3a 12 	call	0x2474	; 0x2474 <__mulsi3>
    2004:	3b 01       	movw	r6, r22
    2006:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	c8 0e       	add	r12, r24
    2012:	d9 1e       	adc	r13, r25
    2014:	ea 1e       	adc	r14, r26
    2016:	fb 1e       	adc	r15, r27
    2018:	f5 01       	movw	r30, r10
    201a:	c2 86       	std	Z+10, r12	; 0x0a
    201c:	d3 86       	std	Z+11, r13	; 0x0b
    201e:	e4 86       	std	Z+12, r14	; 0x0c
    2020:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    2026:	2d 81       	ldd	r18, Y+5	; 0x05
    2028:	3e 81       	ldd	r19, Y+6	; 0x06
    202a:	35 83       	std	Z+5, r19	; 0x05
    202c:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    202e:	8f 81       	ldd	r24, Y+7	; 0x07
    2030:	98 85       	ldd	r25, Y+8	; 0x08
    2032:	7c 01       	movw	r14, r24
    2034:	00 e0       	ldi	r16, 0x00	; 0
    2036:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    2038:	e1 14       	cp	r14, r1
    203a:	f1 04       	cpc	r15, r1
    203c:	01 05       	cpc	r16, r1
    203e:	11 05       	cpc	r17, r1
    2040:	21 f4       	brne	.+8      	; 0x204a <pf_mount+0x134>
    2042:	ec 88       	ldd	r14, Y+20	; 0x14
    2044:	fd 88       	ldd	r15, Y+21	; 0x15
    2046:	0e 89       	ldd	r16, Y+22	; 0x16
    2048:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	a0 e0       	ldi	r26, 0x00	; 0
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e8 1a       	sub	r14, r24
    2054:	f9 0a       	sbc	r15, r25
    2056:	0a 0b       	sbc	r16, r26
    2058:	1b 0b       	sbc	r17, r27
    205a:	e6 18       	sub	r14, r6
    205c:	f7 08       	sbc	r15, r7
    205e:	08 09       	sbc	r16, r8
    2060:	19 09       	sbc	r17, r9
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	36 95       	lsr	r19
    2066:	27 95       	ror	r18
    2068:	8a 95       	dec	r24
    206a:	e1 f7       	brne	.-8      	; 0x2064 <pf_mount+0x14e>
    206c:	c9 01       	movw	r24, r18
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e8 1a       	sub	r14, r24
    2074:	f9 0a       	sbc	r15, r25
    2076:	0a 0b       	sbc	r16, r26
    2078:	1b 0b       	sbc	r17, r27
    207a:	f5 01       	movw	r30, r10
    207c:	22 81       	ldd	r18, Z+2	; 0x02
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	c8 01       	movw	r24, r16
    2086:	b7 01       	movw	r22, r14
    2088:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    208c:	2e 5f       	subi	r18, 0xFE	; 254
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	4f 4f       	sbci	r20, 0xFF	; 255
    2092:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    2094:	f5 01       	movw	r30, r10
    2096:	26 83       	std	Z+6, r18	; 0x06
    2098:	37 83       	std	Z+7, r19	; 0x07
    209a:	40 87       	std	Z+8, r20	; 0x08
    209c:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    209e:	27 3f       	cpi	r18, 0xF7	; 247
    20a0:	ff e0       	ldi	r31, 0x0F	; 15
    20a2:	3f 07       	cpc	r19, r31
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	4f 07       	cpc	r20, r31
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	5f 07       	cpc	r21, r31
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <pf_mount+0x19c>
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <pf_mount+0x19e>
    20b2:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    20b4:	27 5f       	subi	r18, 0xF7	; 247
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	40 40       	sbci	r20, 0x00	; 0
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <pf_mount+0x1aa>
    20be:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    20c0:	f5 01       	movw	r30, r10
    20c2:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	29 f4       	brne	.+10     	; 0x20d2 <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    20c8:	88 a1       	ldd	r24, Y+32	; 0x20
    20ca:	99 a1       	ldd	r25, Y+33	; 0x21
    20cc:	aa a1       	ldd	r26, Y+34	; 0x22
    20ce:	bb a1       	ldd	r27, Y+35	; 0x23
    20d0:	09 c0       	rjmp	.+18     	; 0x20e4 <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    20d2:	f5 01       	movw	r30, r10
    20d4:	82 85       	ldd	r24, Z+10	; 0x0a
    20d6:	93 85       	ldd	r25, Z+11	; 0x0b
    20d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    20da:	b5 85       	ldd	r27, Z+13	; 0x0d
    20dc:	86 0d       	add	r24, r6
    20de:	97 1d       	adc	r25, r7
    20e0:	a8 1d       	adc	r26, r8
    20e2:	b9 1d       	adc	r27, r9
    20e4:	86 87       	std	Z+14, r24	; 0x0e
    20e6:	97 87       	std	Z+15, r25	; 0x0f
    20e8:	a0 8b       	std	Z+16, r26	; 0x10
    20ea:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    20ec:	f5 01       	movw	r30, r10
    20ee:	84 81       	ldd	r24, Z+4	; 0x04
    20f0:	95 81       	ldd	r25, Z+5	; 0x05
    20f2:	b4 e0       	ldi	r27, 0x04	; 4
    20f4:	96 95       	lsr	r25
    20f6:	87 95       	ror	r24
    20f8:	ba 95       	dec	r27
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <pf_mount+0x1de>
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	22 85       	ldd	r18, Z+10	; 0x0a
    2102:	33 85       	ldd	r19, Z+11	; 0x0b
    2104:	44 85       	ldd	r20, Z+12	; 0x0c
    2106:	55 85       	ldd	r21, Z+13	; 0x0d
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	a4 1f       	adc	r26, r20
    210e:	b5 1f       	adc	r27, r21
    2110:	86 0d       	add	r24, r6
    2112:	97 1d       	adc	r25, r7
    2114:	a8 1d       	adc	r26, r8
    2116:	b9 1d       	adc	r27, r9
    2118:	82 8b       	std	Z+18, r24	; 0x12
    211a:	93 8b       	std	Z+19, r25	; 0x13
    211c:	a4 8b       	std	Z+20, r26	; 0x14
    211e:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    2120:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    2122:	b0 92 08 01 	sts	0x0108, r11
    2126:	a0 92 07 01 	sts	0x0107, r10
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <pf_mount+0x21e>

	return FR_OK;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <pf_mount+0x21e>
    2132:	87 e0       	ldi	r24, 0x07	; 7
}
    2134:	a4 96       	adiw	r28, 0x24	; 36
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	bf 90       	pop	r11
    2152:	af 90       	pop	r10
    2154:	9f 90       	pop	r9
    2156:	8f 90       	pop	r8
    2158:	7f 90       	pop	r7
    215a:	6f 90       	pop	r6
    215c:	08 95       	ret

0000215e <dly_100us>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    215e:	8c e2       	ldi	r24, 0x2C	; 44
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <dly_100us+0x4>
#include "integer.h"

void dly_100us(void)
{
	_delay_us(100.0);
}
    2166:	08 95       	ret

00002168 <init_spi>:
   // Configure for: PB4 - /SS
   //                PB5 - MOSI
   //                PB6 - MISO
   //                PB7 - SCK

   PORTB = 0b00010000;      // SS high 
    2168:	80 e1       	ldi	r24, 0x10	; 16
    216a:	85 b9       	out	0x05, r24	; 5
   DDRB =  0b10110000;      // !SS,SCK and MOSI outputs 
    216c:	80 eb       	ldi	r24, 0xB0	; 176
    216e:	84 b9       	out	0x04, r24	; 4

   /* Set MOSI and SCK output, all others input */ 
   //DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK); 
   /* Enable SPI, Master, set clock rate fck/16 */ 
   SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2170:	81 e5       	ldi	r24, 0x51	; 81
    2172:	8c bd       	out	0x2c, r24	; 44

}
    2174:	08 95       	ret

00002176 <xmit_spi>:
//----------------------------------------------------------------------- 
// Transmit a byte to MMC via SPI  (Platform dependent)                   
//----------------------------------------------------------------------- 

BYTE xmit_spi(BYTE c) { 
   SPDR = c; 
    2176:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF))); 
    2178:	0d b4       	in	r0, 0x2d	; 45
    217a:	07 fe       	sbrs	r0, 7
    217c:	fd cf       	rjmp	.-6      	; 0x2178 <xmit_spi+0x2>
   return SPDR; 
    217e:	8e b5       	in	r24, 0x2e	; 46
} 
    2180:	08 95       	ret

00002182 <rcv_spi>:
//----------------------------------------------------------------------- 
// Transmit a byte to MMC via SPI  (Platform dependent)                   
//----------------------------------------------------------------------- 

BYTE xmit_spi(BYTE c) { 
   SPDR = c; 
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF))); 
    2186:	0d b4       	in	r0, 0x2d	; 45
    2188:	07 fe       	sbrs	r0, 7
    218a:	fd cf       	rjmp	.-6      	; 0x2186 <rcv_spi+0x4>
   return SPDR; 
    218c:	8e b5       	in	r24, 0x2e	; 46
// Receive a byte from MMC via SPI  (Platform dependent)                  
//----------------------------------------------------------------------- 

BYTE rcv_spi(void) { 
   return xmit_spi(0xFF); 
} 
    218e:	08 95       	ret

00002190 <uart_init>:
#include "uart.h"

void uart_init(void)
{
	/* initialize UART */
	UBRR0L = (uint8_t)(F_CPU/(BAUD_RATE*16L)-1);
    2190:	8c e0       	ldi	r24, 0x0C	; 12
    2192:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (F_CPU/(BAUD_RATE*16L)-1) >> 8;
    2196:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    219a:	88 e1       	ldi	r24, 0x18	; 24
    219c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
    21a0:	86 e0       	ldi	r24, 0x06	; 6
    21a2:	80 93 c2 00 	sts	0x00C2, r24
	timing out (DAM: 20070509) */
//	DDRD &= ~_BV(PIND0);
//	PORTD |= _BV(PIND0);


}
    21a6:	08 95       	ret

000021a8 <gethexnib>:

char getch(void)
{
	uint32_t count = 0;

	while(!(UCSR0A & _BV(RXC0))){
    21a8:	80 91 c0 00 	lds	r24, 0x00C0
    21ac:	87 ff       	sbrs	r24, 7
    21ae:	fc cf       	rjmp	.-8      	; 0x21a8 <gethexnib>
		count++;
	}
	return UDR0;
    21b0:	90 91 c6 00 	lds	r25, 0x00C6
}


void putch(char ch)
{
	while (!(UCSR0A & _BV(UDRE0)));
    21b4:	80 91 c0 00 	lds	r24, 0x00C0
    21b8:	85 ff       	sbrs	r24, 5
    21ba:	fc cf       	rjmp	.-8      	; 0x21b4 <gethexnib+0xc>
	UDR0 = ch;
    21bc:	90 93 c6 00 	sts	0x00C6, r25


char gethexnib(void) {
	char a;
	a = getch(); putch(a);
	if(a >= 'a') {
    21c0:	91 36       	cpi	r25, 0x61	; 97
    21c2:	10 f0       	brcs	.+4      	; 0x21c8 <gethexnib+0x20>
		return (a - 'a' + 0x0a);
    21c4:	97 55       	subi	r25, 0x57	; 87
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <gethexnib+0x26>
	} else if(a >= '0') {
    21c8:	90 33       	cpi	r25, 0x30	; 48
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <gethexnib+0x26>
		return(a - '0');
    21cc:	90 53       	subi	r25, 0x30	; 48
	}
	return a;
}
    21ce:	89 2f       	mov	r24, r25
    21d0:	08 95       	ret

000021d2 <gethex>:


char gethex(void) {
    21d2:	1f 93       	push	r17
	return (gethexnib() << 4) + gethexnib();
    21d4:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <gethexnib>
    21d8:	18 2f       	mov	r17, r24
    21da:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <gethexnib>
    21de:	12 95       	swap	r17
    21e0:	10 7f       	andi	r17, 0xF0	; 240
}
    21e2:	81 0f       	add	r24, r17
    21e4:	1f 91       	pop	r17
    21e6:	08 95       	ret

000021e8 <puthex>:


void puthex(char ch) {
	char ah;

	ah = ch >> 4;
    21e8:	98 2f       	mov	r25, r24
    21ea:	92 95       	swap	r25
    21ec:	9f 70       	andi	r25, 0x0F	; 15
	if(ah >= 0x0a) {
    21ee:	9a 30       	cpi	r25, 0x0A	; 10
    21f0:	18 f0       	brcs	.+6      	; 0x21f8 <puthex+0x10>
		ah = ah - 0x0a + 'a';
    21f2:	29 2f       	mov	r18, r25
    21f4:	29 5a       	subi	r18, 0xA9	; 169
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <puthex+0x14>
	} else {
		ah += '0';
    21f8:	29 2f       	mov	r18, r25
    21fa:	20 5d       	subi	r18, 0xD0	; 208
	}
	
	ch &= 0x0f;
    21fc:	8f 70       	andi	r24, 0x0F	; 15
	if(ch >= 0x0a) {
    21fe:	8a 30       	cpi	r24, 0x0A	; 10
    2200:	18 f0       	brcs	.+6      	; 0x2208 <puthex+0x20>
		ch = ch - 0x0a + 'a';
    2202:	98 2f       	mov	r25, r24
    2204:	99 5a       	subi	r25, 0xA9	; 169
    2206:	02 c0       	rjmp	.+4      	; 0x220c <puthex+0x24>
	} else {
		ch += '0';
    2208:	98 2f       	mov	r25, r24
    220a:	90 5d       	subi	r25, 0xD0	; 208
}


void putch(char ch)
{
	while (!(UCSR0A & _BV(UDRE0)));
    220c:	80 91 c0 00 	lds	r24, 0x00C0
    2210:	85 ff       	sbrs	r24, 5
    2212:	fc cf       	rjmp	.-8      	; 0x220c <puthex+0x24>
	UDR0 = ch;
    2214:	20 93 c6 00 	sts	0x00C6, r18
}


void putch(char ch)
{
	while (!(UCSR0A & _BV(UDRE0)));
    2218:	80 91 c0 00 	lds	r24, 0x00C0
    221c:	85 ff       	sbrs	r24, 5
    221e:	fc cf       	rjmp	.-8      	; 0x2218 <puthex+0x30>
	UDR0 = ch;
    2220:	90 93 c6 00 	sts	0x00C6, r25
		ch += '0';
	}
	
	putch(ah);
	putch(ch);
}
    2224:	08 95       	ret

00002226 <putch>:


void putch(char ch)
{
    2226:	98 2f       	mov	r25, r24
	while (!(UCSR0A & _BV(UDRE0)));
    2228:	80 91 c0 00 	lds	r24, 0x00C0
    222c:	85 ff       	sbrs	r24, 5
    222e:	fc cf       	rjmp	.-8      	; 0x2228 <putch+0x2>
	UDR0 = ch;
    2230:	90 93 c6 00 	sts	0x00C6, r25
}
    2234:	08 95       	ret

00002236 <getch>:

char getch(void)
{
	uint32_t count = 0;

	while(!(UCSR0A & _BV(RXC0))){
    2236:	80 91 c0 00 	lds	r24, 0x00C0
    223a:	87 ff       	sbrs	r24, 7
    223c:	fc cf       	rjmp	.-8      	; 0x2236 <getch>
		count++;
	}
	return UDR0;
    223e:	80 91 c6 00 	lds	r24, 0x00C6
}
    2242:	08 95       	ret

00002244 <getNch>:


void getNch(uint8_t count)
{
    2244:	98 2f       	mov	r25, r24
    2246:	07 c0       	rjmp	.+14     	; 0x2256 <getNch+0x12>

char getch(void)
{
	uint32_t count = 0;

	while(!(UCSR0A & _BV(RXC0))){
    2248:	80 91 c0 00 	lds	r24, 0x00C0
    224c:	87 ff       	sbrs	r24, 7
    224e:	fc cf       	rjmp	.-8      	; 0x2248 <getNch+0x4>
		count++;
	}
	return UDR0;
    2250:	80 91 c6 00 	lds	r24, 0x00C6
    2254:	91 50       	subi	r25, 0x01	; 1
}


void getNch(uint8_t count)
{
	while(count--) {
    2256:	99 23       	and	r25, r25
    2258:	b9 f7       	brne	.-18     	; 0x2248 <getNch+0x4>
		getch();
	}
}
    225a:	08 95       	ret

0000225c <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    225c:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    225e:	19 f4       	brne	.+6      	; 0x2266 <xputc+0xa>
	ldi	r24, 13		;
    2260:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    2262:	01 d0       	rcall	.+2      	; 0x2266 <xputc+0xa>
	ldi	r24, 10		;/
    2264:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    2266:	ff 93       	push	r31
	push	ZL
    2268:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    226a:	e0 91 09 01 	lds	r30, 0x0109
	lds	ZH, xfunc_out+1	;/
    226e:	f0 91 0a 01 	lds	r31, 0x010A
	sbiw	ZL, 0
    2272:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
    2274:	09 f0       	breq	.+2      	; 0x2278 <xputc+0x1c>
	icall
    2276:	09 95       	icall
2:	pop	ZL
    2278:	ef 91       	pop	r30
	pop	ZH
    227a:	ff 91       	pop	r31
	ret
    227c:	08 95       	ret

0000227e <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    227e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    2280:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    2282:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    2284:	11 f0       	breq	.+4      	; 0x228a <xputs+0xc>
	rcall	xputc
    2286:	ea df       	rcall	.-44     	; 0x225c <xputc>
	rjmp	1b
    2288:	fb cf       	rjmp	.-10     	; 0x2280 <xputs+0x2>
2:	ret
    228a:	08 95       	ret

0000228c <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    228c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    228e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    2290:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    2292:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    2294:	0c c0       	rjmp	.+24     	; 0x22ae <xitoa+0x22>
	neg	r20		;
    2296:	41 95       	neg	r20
	sbrs	r25, 7		;
    2298:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <xitoa+0x22>
	ldi	r30, '-'	;
    229c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    229e:	60 95       	com	r22
	com	r23		;
    22a0:	70 95       	com	r23
	com	r24		;
    22a2:	80 95       	com	r24
	com	r25		;
    22a4:	90 95       	com	r25
	adc	r22, r1		;
    22a6:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    22a8:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    22aa:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    22ac:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    22ae:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <xitoa+0x2a>
	neg	r18		;
    22b2:	21 95       	neg	r18
	ldi	r19, '0'	;/
    22b4:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    22b6:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    22b8:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    22ba:	66 0f       	add	r22, r22
	rol	r23		;
    22bc:	77 1f       	adc	r23, r23
	rol	r24		;
    22be:	88 1f       	adc	r24, r24
	rol	r25		;
    22c0:	99 1f       	adc	r25, r25
	rol	r26		;
    22c2:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    22c4:	a4 17       	cp	r26, r20
	brcs	3f		;
    22c6:	10 f0       	brcs	.+4      	; 0x22cc <xitoa+0x40>
	sub	r26, r20	;
    22c8:	a4 1b       	sub	r26, r20
	inc	r22		;
    22ca:	63 95       	inc	r22
3:	dec	r21		;
    22cc:	5a 95       	dec	r21
	brne	2b		;/
    22ce:	a9 f7       	brne	.-22     	; 0x22ba <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    22d0:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <xitoa+0x4a>
	subi	r26, -7		;
    22d4:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    22d6:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    22d8:	af 93       	push	r26
	inc	r31		;/
    22da:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    22dc:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    22de:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    22e0:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    22e2:	91 05       	cpc	r25, r1
	brne	1b		;/
    22e4:	41 f7       	brne	.-48     	; 0x22b6 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    22e6:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    22e8:	11 f4       	brne	.+4      	; 0x22ee <xitoa+0x62>
	push	r30		;
    22ea:	ef 93       	push	r30
	inc	r31		;/
    22ec:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    22ee:	f2 17       	cp	r31, r18
	brcc	6f		;
    22f0:	18 f4       	brcc	.+6      	; 0x22f8 <xitoa+0x6c>
	push	r19		;
    22f2:	3f 93       	push	r19
	inc	r31		;
    22f4:	f3 95       	inc	r31
	rjmp	5b		;/
    22f6:	fb cf       	rjmp	.-10     	; 0x22ee <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    22f8:	8f 91       	pop	r24
	rcall	xputc		;
    22fa:	b0 df       	rcall	.-160    	; 0x225c <xputc>
	dec	r31		;
    22fc:	fa 95       	dec	r31
	brne	6b		;/
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <xitoa+0x6c>

	ret
    2300:	08 95       	ret

00002302 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    2302:	df 93       	push	r29
	push	YL
    2304:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    2306:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    2308:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    230a:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    230c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    230e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    2310:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    2312:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    2314:	21 f0       	breq	.+8      	; 0x231e <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    2316:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    2318:	29 f0       	breq	.+10     	; 0x2324 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    231a:	a0 df       	rcall	.-192    	; 0x225c <xputc>
	rjmp	0b		;/
    231c:	f9 cf       	rjmp	.-14     	; 0x2310 <xprintf+0xe>
90:	pop	YL
    231e:	cf 91       	pop	r28
	pop	YH
    2320:	df 91       	pop	r29
	ret
    2322:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    2324:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    2326:	e8 94       	clt
	_LPMI	r21		;Get flags
    2328:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    232a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    232c:	b1 f3       	breq	.-20     	; 0x231a <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    232e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    2330:	11 f4       	brne	.+4      	; 0x2336 <xprintf+0x34>
	set			;/
    2332:	68 94       	set
22:	_LPMI	r21		;Get width
    2334:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    2336:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    2338:	48 f4       	brcc	.+18     	; 0x234c <xprintf+0x4a>
	subi	r21, '0'	;
    233a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    233c:	80 f3       	brcs	.-32     	; 0x231e <xprintf+0x1c>
	lsl	r18		;
    233e:	22 0f       	add	r18, r18
	mov	r0, r18		;
    2340:	02 2e       	mov	r0, r18
	lsl	r18		;
    2342:	22 0f       	add	r18, r18
	lsl	r18		;
    2344:	22 0f       	add	r18, r18
	add	r18, r0		;
    2346:	20 0d       	add	r18, r0
	add	r18, r21	;
    2348:	25 0f       	add	r18, r21
	rjmp	22b		;/
    234a:	f4 cf       	rjmp	.-24     	; 0x2334 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    234c:	0e f4       	brtc	.+2      	; 0x2350 <xprintf+0x4e>
	neg	r18		;
    234e:	21 95       	neg	r18
25:	ld	r24, Y+		;
    2350:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    2352:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    2354:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    2356:	09 f3       	breq	.-62     	; 0x231a <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    2358:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    235a:	29 f1       	breq	.+74     	; 0x23a6 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    235c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    235e:	59 f1       	breq	.+86     	; 0x23b6 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    2360:	bc 01       	movw	r22, r24
	clr	r24		;
    2362:	88 27       	eor	r24, r24
	clr	r25		;
    2364:	99 27       	eor	r25, r25
	clt			;/
    2366:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    2368:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    236a:	21 f4       	brne	.+8      	; 0x2374 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    236c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    236e:	99 91       	ld	r25, Y+
	set			;
    2370:	68 94       	set
	_LPMI	r21		;/
    2372:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    2374:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    2376:	39 f4       	brne	.+14     	; 0x2386 <xprintf+0x84>
	ldi	r20, -10	;
    2378:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    237a:	7e f0       	brts	.+30     	; 0x239a <xprintf+0x98>
	sbrs	r23, 7		;
    237c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    237e:	0d c0       	rjmp	.+26     	; 0x239a <xprintf+0x98>
	ldi	r24, -1		;
    2380:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    2382:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    2384:	0a c0       	rjmp	.+20     	; 0x239a <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    2386:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    2388:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    238a:	39 f0       	breq	.+14     	; 0x239a <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    238c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    238e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    2390:	21 f0       	breq	.+8      	; 0x239a <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    2392:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    2394:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    2396:	09 f0       	breq	.+2      	; 0x239a <xprintf+0x98>
	rjmp	90b		;abort
    2398:	c2 cf       	rjmp	.-124    	; 0x231e <xprintf+0x1c>
40:	push	ZH		;Output the value
    239a:	ff 93       	push	r31
	push	ZL		;
    239c:	ef 93       	push	r30
	rcall	xitoa		;
    239e:	76 df       	rcall	.-276    	; 0x228c <xitoa>
42:	pop	ZL		;
    23a0:	ef 91       	pop	r30
	pop	ZH		;
    23a2:	ff 91       	pop	r31
	rjmp	0b		;/
    23a4:	b5 cf       	rjmp	.-150    	; 0x2310 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    23a6:	ff 93       	push	r31
	push	ZL
    23a8:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    23aa:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    23ac:	81 91       	ld	r24, Z+
	cpi	r24, 0
    23ae:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    23b0:	b9 f3       	breq	.-18     	; 0x23a0 <xprintf+0x9e>
	rcall	xputc
    23b2:	54 df       	rcall	.-344    	; 0x225c <xputc>
	rjmp	51b
    23b4:	fb cf       	rjmp	.-10     	; 0x23ac <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    23b6:	ff 93       	push	r31
	push	ZL
    23b8:	ef 93       	push	r30
	rcall	xputs
    23ba:	61 df       	rcall	.-318    	; 0x227e <xputs>
	rjmp	42b
    23bc:	f1 cf       	rjmp	.-30     	; 0x23a0 <xprintf+0x9e>

000023be <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    23be:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    23c0:	dc 01       	movw	r26, r24
	ld	ZL, X+
    23c2:	ed 91       	ld	r30, X+
	ld	ZH, X+
    23c4:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    23c6:	22 27       	eor	r18, r18
	clr	r19		;
    23c8:	33 27       	eor	r19, r19
	clr	r20		;
    23ca:	44 27       	eor	r20, r20
	clr	r21		;/
    23cc:	55 27       	eor	r21, r21
	clt			;T = 0;
    23ce:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    23d0:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    23d4:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    23d6:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    23d8:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    23da:	e1 f3       	breq	.-8      	; 0x23d4 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    23dc:	a8 f1       	brcs	.+106    	; 0x2448 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    23de:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <xatoi+0x28>
	set			; continue;
    23e2:	68 94       	set
	rjmp	40b		;}
    23e4:	f7 cf       	rjmp	.-18     	; 0x23d4 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    23e6:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    23e8:	78 f5       	brcc	.+94     	; 0x2448 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    23ea:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    23ec:	68 f1       	brcs	.+90     	; 0x2448 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    23ee:	71 f4       	brne	.+28     	; 0x240c <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    23f0:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    23f2:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    23f4:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    23f6:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    23f8:	48 f1       	brcs	.+82     	; 0x244c <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    23fa:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    23fc:	11 f4       	brne	.+4      	; 0x2402 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    23fe:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    2402:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    2404:	19 f4       	brne	.+6      	; 0x240c <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    2406:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    2408:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    240a:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    240c:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    240e:	f0 f0       	brcs	.+60     	; 0x244c <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    2410:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    2412:	08 f0       	brcs	.+2      	; 0x2416 <xatoi+0x58>
	subi	r22, 0x20	;/
    2414:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    2416:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    2418:	b8 f0       	brcs	.+46     	; 0x2448 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    241a:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    241c:	18 f0       	brcs	.+6      	; 0x2424 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    241e:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    2420:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    2422:	90 f0       	brcs	.+36     	; 0x2448 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    2424:	69 17       	cp	r22, r25
	brcc	70f		;/
    2426:	80 f4       	brcc	.+32     	; 0x2448 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    2428:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    242a:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    242c:	08 f4       	brcc	.+2      	; 0x2430 <xatoi+0x72>
	add	r23, r25	;
    242e:	79 0f       	add	r23, r25
62:	lsr	r23		;
    2430:	76 95       	lsr	r23
	ror	r21		;
    2432:	57 95       	ror	r21
	ror	r20		;
    2434:	47 95       	ror	r20
	ror	r19		;
    2436:	37 95       	ror	r19
	ror	r18		;
    2438:	27 95       	ror	r18
	dec	r24		;
    243a:	8a 95       	dec	r24
	brne	61b		;/
    243c:	b9 f7       	brne	.-18     	; 0x242c <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    243e:	26 0f       	add	r18, r22
	adc	r19, r24	;
    2440:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    2442:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    2444:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    2446:	e0 cf       	rjmp	.-64     	; 0x2408 <xatoi+0x4a>

70:	ldi	r24, 0
    2448:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    244a:	01 c0       	rjmp	.+2      	; 0x244e <xatoi+0x90>
80:	ldi	r24, 1
    244c:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    244e:	4e f4       	brtc	.+18     	; 0x2462 <xatoi+0xa4>
	clr	r22
    2450:	66 27       	eor	r22, r22
	com	r18
    2452:	20 95       	com	r18
	com	r19
    2454:	30 95       	com	r19
	com	r20
    2456:	40 95       	com	r20
	com	r21
    2458:	50 95       	com	r21
	adc	r18, r22
    245a:	26 1f       	adc	r18, r22
	adc	r19, r22
    245c:	36 1f       	adc	r19, r22
	adc	r20, r22
    245e:	46 1f       	adc	r20, r22
	adc	r21, r22
    2460:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    2462:	fe 93       	st	-X, r31
	st	-X, ZL
    2464:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    2466:	d0 01       	movw	r26, r0
	st	X+, r18
    2468:	2d 93       	st	X+, r18
	st	X+, r19
    246a:	3d 93       	st	X+, r19
	st	X+, r20
    246c:	4d 93       	st	X+, r20
	st	X+, r21
    246e:	5d 93       	st	X+, r21
	clr	r1
    2470:	11 24       	eor	r1, r1
	ret
    2472:	08 95       	ret

00002474 <__mulsi3>:
    2474:	62 9f       	mul	r22, r18
    2476:	d0 01       	movw	r26, r0
    2478:	73 9f       	mul	r23, r19
    247a:	f0 01       	movw	r30, r0
    247c:	82 9f       	mul	r24, r18
    247e:	e0 0d       	add	r30, r0
    2480:	f1 1d       	adc	r31, r1
    2482:	64 9f       	mul	r22, r20
    2484:	e0 0d       	add	r30, r0
    2486:	f1 1d       	adc	r31, r1
    2488:	92 9f       	mul	r25, r18
    248a:	f0 0d       	add	r31, r0
    248c:	83 9f       	mul	r24, r19
    248e:	f0 0d       	add	r31, r0
    2490:	74 9f       	mul	r23, r20
    2492:	f0 0d       	add	r31, r0
    2494:	65 9f       	mul	r22, r21
    2496:	f0 0d       	add	r31, r0
    2498:	99 27       	eor	r25, r25
    249a:	72 9f       	mul	r23, r18
    249c:	b0 0d       	add	r27, r0
    249e:	e1 1d       	adc	r30, r1
    24a0:	f9 1f       	adc	r31, r25
    24a2:	63 9f       	mul	r22, r19
    24a4:	b0 0d       	add	r27, r0
    24a6:	e1 1d       	adc	r30, r1
    24a8:	f9 1f       	adc	r31, r25
    24aa:	bd 01       	movw	r22, r26
    24ac:	cf 01       	movw	r24, r30
    24ae:	11 24       	eor	r1, r1
    24b0:	08 95       	ret

000024b2 <__udivmodsi4>:
    24b2:	a1 e2       	ldi	r26, 0x21	; 33
    24b4:	1a 2e       	mov	r1, r26
    24b6:	aa 1b       	sub	r26, r26
    24b8:	bb 1b       	sub	r27, r27
    24ba:	fd 01       	movw	r30, r26
    24bc:	0d c0       	rjmp	.+26     	; 0x24d8 <__udivmodsi4_ep>

000024be <__udivmodsi4_loop>:
    24be:	aa 1f       	adc	r26, r26
    24c0:	bb 1f       	adc	r27, r27
    24c2:	ee 1f       	adc	r30, r30
    24c4:	ff 1f       	adc	r31, r31
    24c6:	a2 17       	cp	r26, r18
    24c8:	b3 07       	cpc	r27, r19
    24ca:	e4 07       	cpc	r30, r20
    24cc:	f5 07       	cpc	r31, r21
    24ce:	20 f0       	brcs	.+8      	; 0x24d8 <__udivmodsi4_ep>
    24d0:	a2 1b       	sub	r26, r18
    24d2:	b3 0b       	sbc	r27, r19
    24d4:	e4 0b       	sbc	r30, r20
    24d6:	f5 0b       	sbc	r31, r21

000024d8 <__udivmodsi4_ep>:
    24d8:	66 1f       	adc	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	1a 94       	dec	r1
    24e2:	69 f7       	brne	.-38     	; 0x24be <__udivmodsi4_loop>
    24e4:	60 95       	com	r22
    24e6:	70 95       	com	r23
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	bd 01       	movw	r22, r26
    24f2:	cf 01       	movw	r24, r30
    24f4:	08 95       	ret

000024f6 <strcat>:
    24f6:	fb 01       	movw	r30, r22
    24f8:	dc 01       	movw	r26, r24
    24fa:	0d 90       	ld	r0, X+
    24fc:	00 20       	and	r0, r0
    24fe:	e9 f7       	brne	.-6      	; 0x24fa <strcat+0x4>
    2500:	11 97       	sbiw	r26, 0x01	; 1
    2502:	01 90       	ld	r0, Z+
    2504:	0d 92       	st	X+, r0
    2506:	00 20       	and	r0, r0
    2508:	e1 f7       	brne	.-8      	; 0x2502 <strcat+0xc>
    250a:	08 95       	ret

0000250c <_exit>:
    250c:	f8 94       	cli

0000250e <__stop_program>:
    250e:	ff cf       	rjmp	.-2      	; 0x250e <__stop_program>
