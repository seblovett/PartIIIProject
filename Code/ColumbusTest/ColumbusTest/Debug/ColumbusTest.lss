
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001eb4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004000  80004000  00004400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000554  80004200  80004200  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80004754  80004754  00004b54  2**0
                  ALLOC
  6 .data         00000008  00000004  80004758  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000000c  80004760  00004c0c  2**0
                  ALLOC
  8 .bss          00000438  00000010  80004760  00004c10  2**2
                  ALLOC
  9 .comment      00000030  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a48  00000000  00000000  00004c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001cfe  00000000  00000000  00005684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000133dd  00000000  00000000  00007382  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023ef  00000000  00000000  0001a75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ad05  00000000  00000000  0001cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ac8  00000000  00000000  00027854  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b21  00000000  00000000  0002931c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000446d  00000000  00000000  0002de3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 015f723e  00000000  00000000  000322aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00000a38  00000000  00000000  016294e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf e5 d8 	sub	pc,pc,-6696

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	04 34       	cp.w	r4,r2
8000210c:	00 00       	add	r0,r0
8000210e:	04 32       	cp.w	r2,r2
80002110:	00 00       	add	r0,r0
80002112:	04 20       	rsub	r0,r2
80002114:	00 00       	add	r0,r0
80002116:	04 28       	rsub	r8,r2
80002118:	00 00       	add	r0,r0
8000211a:	04 2c       	rsub	r12,r2
8000211c:	00 00       	add	r0,r0
8000211e:	04 2a       	rsub	r10,r2

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	34 4e       	mov	lr,68
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	34 6a       	mov	r10,70

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	33 1e       	mov	lr,49
800021a4:	00 00       	add	r0,r0
800021a6:	04 44       	or	r4,r2
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	33 6a       	mov	r10,54
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	00 10       	sub	r0,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	00 10       	sub	r0,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	34 4e       	mov	lr,68
800022ac:	00 00       	add	r0,r0
800022ae:	04 44       	or	r4,r2
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	33 1e       	mov	lr,49
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	04 44       	or	r4,r2
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	33 6a       	mov	r10,54

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	00 28       	rsub	r8,r0
80002364:	00 00       	add	r0,r0
80002366:	04 44       	or	r4,r2
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	34 4e       	mov	lr,68
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	33 1e       	mov	lr,49
800024a0:	00 00       	add	r0,r0
800024a2:	04 32       	cp.w	r2,r2
800024a4:	00 00       	add	r0,r0
800024a6:	00 10       	sub	r0,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	04 44       	or	r4,r2
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	33 6a       	mov	r10,54
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	34 4e       	mov	lr,68
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	33 1e       	mov	lr,49
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	04 44       	or	r4,r2
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	33 6a       	mov	r10,54
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	33 1e       	mov	lr,49
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	04 44       	or	r4,r2
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	33 6a       	mov	r10,54
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	33 1e       	mov	lr,49
80002730:	00 00       	add	r0,r0
80002732:	04 32       	cp.w	r2,r2
80002734:	00 00       	add	r0,r0
80002736:	00 10       	sub	r0,r0
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	04 44       	or	r4,r2
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	33 6a       	mov	r10,54
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	34 4e       	mov	lr,68
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	34 6a       	mov	r10,70

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	33 1e       	mov	lr,49
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	04 44       	or	r4,r2
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	33 6a       	mov	r10,54
80002834:	00 00       	add	r0,r0
80002836:	00 28       	rsub	r8,r0
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	34 4e       	mov	lr,68
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	34 6a       	mov	r10,70

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	00 14       	sub	r4,r0
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 24       	rsub	r4,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	33 90       	mov	r0,57
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	33 1e       	mov	lr,49
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	34 4e       	mov	lr,68
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	33 6a       	mov	r10,54
80002ac4:	00 00       	add	r0,r0
80002ac6:	00 28       	rsub	r8,r0
80002ac8:	00 00       	add	r0,r0
80002aca:	04 32       	cp.w	r2,r2
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	04 44       	or	r4,r2
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	04 34       	cp.w	r4,r2
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	00 28       	rsub	r8,r0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	00 24       	rsub	r4,r0
80002b3c:	00 00       	add	r0,r0
80002b3e:	00 14       	sub	r4,r0
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	00 28       	rsub	r8,r0
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	00 28       	rsub	r8,r0
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	00 28       	rsub	r8,r0
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	00 28       	rsub	r8,r0
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	04 2c       	rsub	r12,r2

80002cd0 <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002cd0:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002cd4:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002cd8:	18 38       	cp.w	r8,r12
80002cda:	e0 88 00 06 	brls	80002ce6 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002cde:	e1 b8 00 42 	mfsr	r8,0x108
80002ce2:	10 3c       	cp.w	r12,r8
80002ce4:	cf d3       	brcs	80002cde <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002ce6:	e1 b8 00 42 	mfsr	r8,0x108
80002cea:	10 3c       	cp.w	r12,r8
80002cec:	fe 9b ff fd 	brhi	80002ce6 <sdramc_ck_delay+0x16>
}
80002cf0:	5e fc       	retal	r12
80002cf2:	d7 03       	nop

80002cf4 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002cf4:	d4 31       	pushm	r0-r7,lr
80002cf6:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002cf8:	ee 78 42 3f 	mov	r8,999999
80002cfc:	f8 08 00 09 	add	r9,r12,r8
80002d00:	e0 60 de 83 	mov	r0,56963
80002d04:	ea 10 43 1b 	orh	r0,0x431b
80002d08:	f2 00 06 48 	mulu.d	r8,r9,r0
80002d0c:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002d10:	32 5b       	mov	r11,37
80002d12:	4c 9c       	lddpc	r12,80002e34 <sdramc_init+0x140>
80002d14:	f0 1f 00 49 	mcall	80002e38 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002d18:	fe 68 20 00 	mov	r8,-122880
80002d1c:	f0 f9 01 28 	ld.w	r9,r8[296]
80002d20:	a1 a9       	sbr	r9,0x0
80002d22:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002d26:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002d2a:	ec 08 15 04 	lsl	r8,r6,0x4
80002d2e:	0c 18       	sub	r8,r6
80002d30:	f0 c3 fc 19 	sub	r3,r8,-999
80002d34:	e0 65 4d d3 	mov	r5,19923
80002d38:	ea 15 10 62 	orh	r5,0x1062
80002d3c:	e6 05 06 42 	mulu.d	r2,r3,r5
80002d40:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002d42:	ec 02 15 05 	lsl	r2,r6,0x5
80002d46:	0c 02       	add	r2,r6
80002d48:	a1 72       	lsl	r2,0x1
80002d4a:	e4 06 00 0b 	add	r11,r2,r6
80002d4e:	f6 cb fc 19 	sub	r11,r11,-999
80002d52:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002d56:	f6 0a 16 06 	lsr	r10,r11,0x6
80002d5a:	bd 6a       	lsl	r10,0x1c
80002d5c:	e8 1a 00 f0 	orl	r10,0xf0
80002d60:	e6 09 15 08 	lsl	r9,r3,0x8
80002d64:	e2 19 0f 00 	andl	r9,0xf00,COH
80002d68:	12 4a       	or	r10,r9
80002d6a:	f0 09 15 02 	lsl	r9,r8,0x2
80002d6e:	f2 c9 fc 19 	sub	r9,r9,-999
80002d72:	f2 05 06 48 	mulu.d	r8,r9,r5
80002d76:	a7 69       	lsl	r9,0x6
80002d78:	e2 19 f0 00 	andl	r9,0xf000,COH
80002d7c:	f5 e9 10 08 	or	r8,r10,r9
80002d80:	e6 09 15 10 	lsl	r9,r3,0x10
80002d84:	e6 19 00 0f 	andh	r9,0xf,COH
80002d88:	12 48       	or	r8,r9
80002d8a:	e6 09 15 14 	lsl	r9,r3,0x14
80002d8e:	e6 19 00 f0 	andh	r9,0xf0,COH
80002d92:	12 48       	or	r8,r9
80002d94:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002d98:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002d9c:	f6 cb fc 19 	sub	r11,r11,-999
80002da0:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002da4:	f6 09 15 12 	lsl	r9,r11,0x12
80002da8:	e6 19 0f 00 	andh	r9,0xf00,COH
80002dac:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002dae:	fe 67 2c 00 	mov	r7,-119808
80002db2:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002db4:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002db6:	30 18       	mov	r8,1
80002db8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002dba:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002dbc:	fc 14 c0 00 	movh	r4,0xc000
80002dc0:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002dc2:	ec 0c 10 64 	mul	r12,r6,100
80002dc6:	f0 1f 00 1e 	mcall	80002e3c <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002dca:	30 28       	mov	r8,2
80002dcc:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002dce:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002dd0:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002dd2:	06 9c       	mov	r12,r3
80002dd4:	f0 1f 00 1a 	mcall	80002e3c <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002dd8:	30 48       	mov	r8,4
80002dda:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ddc:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002dde:	e4 c3 fc 19 	sub	r3,r2,-999
80002de2:	e6 05 06 42 	mulu.d	r2,r3,r5
80002de6:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002de8:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002dea:	06 9c       	mov	r12,r3
80002dec:	f0 1f 00 14 	mcall	80002e3c <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002df0:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002df2:	06 9c       	mov	r12,r3
80002df4:	f0 1f 00 12 	mcall	80002e3c <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002df8:	30 38       	mov	r8,3
80002dfa:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002dfc:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002dfe:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002e00:	ec 09 15 01 	lsl	r9,r6,0x1
80002e04:	f2 c9 fc 19 	sub	r9,r9,-999
80002e08:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e0c:	f2 0c 16 06 	lsr	r12,r9,0x6
80002e10:	f0 1f 00 0b 	mcall	80002e3c <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002e14:	30 08       	mov	r8,0
80002e16:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002e18:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002e1a:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002e1c:	e2 00 06 40 	mulu.d	r0,r1,r0
80002e20:	b3 81       	lsr	r1,0x12
80002e22:	e0 68 1e 84 	mov	r8,7812
80002e26:	b1 31       	mul	r1,r8
80002e28:	e2 05 06 44 	mulu.d	r4,r1,r5
80002e2c:	a7 85       	lsr	r5,0x6
80002e2e:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002e30:	6e 18       	ld.w	r8,r7[0x4]
}
80002e32:	d8 32       	popm	r0-r7,pc
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	42 00       	lddsp	r0,sp[0x80]
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2f a4       	sub	r4,-6
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	2c d0       	sub	r0,-51

80002e40 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002e40:	fe 68 00 00 	mov	r8,-131072
80002e44:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002e46:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002e4a:	91 09       	st.w	r8[0x0],r9
}
80002e4c:	5e fc       	retal	r12

80002e4e <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002e4e:	fe 68 00 00 	mov	r8,-131072
80002e52:	70 2c       	ld.w	r12,r8[0x8]
}
80002e54:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002e58:	5e fc       	retal	r12
80002e5a:	d7 03       	nop

80002e5c <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80002e5c:	d4 01       	pushm	lr
	while (!flashc_is_ready());
80002e5e:	f0 1f 00 03 	mcall	80002e68 <flashc_default_wait_until_ready+0xc>
80002e62:	cf e0       	breq	80002e5e <flashc_default_wait_until_ready+0x2>
}
80002e64:	d8 02       	popm	pc
80002e66:	00 00       	add	r0,r0
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	2e 4e       	sub	lr,-28

80002e6c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80002e70:	18 96       	mov	r6,r12
80002e72:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002e74:	48 e8       	lddpc	r8,80002eac <flashc_issue_command+0x40>
80002e76:	70 08       	ld.w	r8,r8[0x0]
80002e78:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80002e7a:	fe 68 00 00 	mov	r8,-131072
80002e7e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002e80:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002e84:	58 07       	cp.w	r7,0
80002e86:	c0 35       	brlt	80002e8c <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80002e88:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002e8c:	3a 59       	mov	r9,-91
80002e8e:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002e92:	fe 69 00 00 	mov	r9,-131072
80002e96:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80002e98:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80002e9a:	e2 19 00 0c 	andl	r9,0xc,COH
80002e9e:	48 58       	lddpc	r8,80002eb0 <flashc_issue_command+0x44>
80002ea0:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80002ea2:	48 38       	lddpc	r8,80002eac <flashc_issue_command+0x40>
80002ea4:	70 08       	ld.w	r8,r8[0x0]
80002ea6:	5d 18       	icall	r8
}
80002ea8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002eac:	00 00       	add	r0,r0
80002eae:	00 08       	add	r8,r0
80002eb0:	00 00       	add	r0,r0
80002eb2:	00 2c       	rsub	r12,r0

80002eb4 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002eb4:	eb cd 40 80 	pushm	r7,lr
80002eb8:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
80002eba:	e0 68 8a 40 	mov	r8,35392
80002ebe:	ea 18 01 f7 	orh	r8,0x1f7
80002ec2:	10 3c       	cp.w	r12,r8
80002ec4:	e0 88 00 18 	brls	80002ef4 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
80002ec8:	30 1c       	mov	r12,1
80002eca:	f0 1f 00 10 	mcall	80002f08 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
80002ece:	e0 68 14 80 	mov	r8,5248
80002ed2:	ea 18 03 ef 	orh	r8,0x3ef
80002ed6:	10 37       	cp.w	r7,r8
80002ed8:	e0 8b 00 08 	brhi	80002ee8 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002edc:	3f fb       	mov	r11,-1
80002ede:	31 1c       	mov	r12,17
80002ee0:	f0 1f 00 0b 	mcall	80002f0c <flashc_set_flash_waitstate_and_readmode+0x58>
80002ee4:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80002ee8:	3f fb       	mov	r11,-1
80002eea:	31 0c       	mov	r12,16
80002eec:	f0 1f 00 08 	mcall	80002f0c <flashc_set_flash_waitstate_and_readmode+0x58>
80002ef0:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80002ef4:	30 0c       	mov	r12,0
80002ef6:	f0 1f 00 05 	mcall	80002f08 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002efa:	3f fb       	mov	r11,-1
80002efc:	31 1c       	mov	r12,17
80002efe:	f0 1f 00 04 	mcall	80002f0c <flashc_set_flash_waitstate_and_readmode+0x58>
80002f02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f06:	00 00       	add	r0,r0
80002f08:	80 00       	ld.sh	r0,r0[0x0]
80002f0a:	2e 40       	sub	r0,-28
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	2e 6c       	sub	r12,-26

80002f10 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f10:	f8 08 16 05 	lsr	r8,r12,0x5
80002f14:	a9 78       	lsl	r8,0x9
80002f16:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002f1a:	58 7b       	cp.w	r11,7
80002f1c:	e0 8b 00 05 	brhi	80002f26 <gpio_enable_module_pin+0x16>
80002f20:	4a 09       	lddpc	r9,80002fa0 <gpio_enable_module_pin+0x90>
80002f22:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002f26:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f28:	30 19       	mov	r9,1
80002f2a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f2e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f30:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002f32:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002f34:	c3 18       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f36:	30 19       	mov	r9,1
80002f38:	f2 0c 09 49 	lsl	r9,r9,r12
80002f3c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f3e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002f40:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002f42:	c2 a8       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f44:	30 19       	mov	r9,1
80002f46:	f2 0c 09 49 	lsl	r9,r9,r12
80002f4a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f4c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002f4e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002f50:	c2 38       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f52:	30 19       	mov	r9,1
80002f54:	f2 0c 09 49 	lsl	r9,r9,r12
80002f58:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f5a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002f5c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002f5e:	c1 c8       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f60:	30 19       	mov	r9,1
80002f62:	f2 0c 09 49 	lsl	r9,r9,r12
80002f66:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f68:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f6a:	91 d9       	st.w	r8[0x34],r9
		break;
80002f6c:	c1 58       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f6e:	30 19       	mov	r9,1
80002f70:	f2 0c 09 49 	lsl	r9,r9,r12
80002f74:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f76:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f78:	91 d9       	st.w	r8[0x34],r9
		break;
80002f7a:	c0 e8       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f7c:	30 19       	mov	r9,1
80002f7e:	f2 0c 09 49 	lsl	r9,r9,r12
80002f82:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f84:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f86:	91 d9       	st.w	r8[0x34],r9
		break;
80002f88:	c0 78       	rjmp	80002f96 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f8a:	30 19       	mov	r9,1
80002f8c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f90:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f92:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f94:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002f96:	30 19       	mov	r9,1
80002f98:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f9c:	91 2c       	st.w	r8[0x8],r12
80002f9e:	5e fd       	retal	0
80002fa0:	80 00       	ld.sh	r0,r0[0x0]
80002fa2:	43 28       	lddsp	r8,sp[0xc8]

80002fa4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002fa4:	d4 21       	pushm	r4-r7,lr
80002fa6:	18 97       	mov	r7,r12
80002fa8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002faa:	58 0b       	cp.w	r11,0
80002fac:	c0 31       	brne	80002fb2 <gpio_enable_module+0xe>
80002fae:	30 05       	mov	r5,0
80002fb0:	c0 d8       	rjmp	80002fca <gpio_enable_module+0x26>
80002fb2:	30 05       	mov	r5,0
80002fb4:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002fb6:	6e 1b       	ld.w	r11,r7[0x4]
80002fb8:	6e 0c       	ld.w	r12,r7[0x0]
80002fba:	f0 1f 00 06 	mcall	80002fd0 <gpio_enable_module+0x2c>
80002fbe:	18 45       	or	r5,r12
		gpiomap++;
80002fc0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002fc2:	2f f6       	sub	r6,-1
80002fc4:	0c 34       	cp.w	r4,r6
80002fc6:	fe 9b ff f8 	brhi	80002fb6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002fca:	0a 9c       	mov	r12,r5
80002fcc:	d8 22       	popm	r4-r7,pc
80002fce:	00 00       	add	r0,r0
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	2f 10       	sub	r0,-15

80002fd4 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002fd4:	f8 08 16 05 	lsr	r8,r12,0x5
80002fd8:	a9 78       	lsl	r8,0x9
80002fda:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002fde:	30 19       	mov	r9,1
80002fe0:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fe4:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002fe8:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002fec:	91 1c       	st.w	r8[0x4],r12
}
80002fee:	5e fc       	retal	r12

80002ff0 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ff0:	f8 08 16 05 	lsr	r8,r12,0x5
80002ff4:	a9 78       	lsl	r8,0x9
80002ff6:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002ffa:	30 19       	mov	r9,1
80002ffc:	f2 0c 09 4c 	lsl	r12,r9,r12
80003000:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003004:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003008:	91 1c       	st.w	r8[0x4],r12
}
8000300a:	5e fc       	retal	r12

8000300c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000300c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003010:	49 99       	lddpc	r9,80003074 <INTC_register_interrupt+0x68>
80003012:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003016:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000301a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000301c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003020:	58 0a       	cp.w	r10,0
80003022:	c0 91       	brne	80003034 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003024:	49 59       	lddpc	r9,80003078 <INTC_register_interrupt+0x6c>
80003026:	49 6a       	lddpc	r10,8000307c <INTC_register_interrupt+0x70>
80003028:	12 1a       	sub	r10,r9
8000302a:	fe 79 00 00 	mov	r9,-65536
8000302e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003032:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003034:	58 1a       	cp.w	r10,1
80003036:	c0 a1       	brne	8000304a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003038:	49 09       	lddpc	r9,80003078 <INTC_register_interrupt+0x6c>
8000303a:	49 2a       	lddpc	r10,80003080 <INTC_register_interrupt+0x74>
8000303c:	12 1a       	sub	r10,r9
8000303e:	bf aa       	sbr	r10,0x1e
80003040:	fe 79 00 00 	mov	r9,-65536
80003044:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003048:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000304a:	58 2a       	cp.w	r10,2
8000304c:	c0 a1       	brne	80003060 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000304e:	48 b9       	lddpc	r9,80003078 <INTC_register_interrupt+0x6c>
80003050:	48 da       	lddpc	r10,80003084 <INTC_register_interrupt+0x78>
80003052:	12 1a       	sub	r10,r9
80003054:	bf ba       	sbr	r10,0x1f
80003056:	fe 79 00 00 	mov	r9,-65536
8000305a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000305e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003060:	48 69       	lddpc	r9,80003078 <INTC_register_interrupt+0x6c>
80003062:	48 aa       	lddpc	r10,80003088 <INTC_register_interrupt+0x7c>
80003064:	12 1a       	sub	r10,r9
80003066:	ea 1a c0 00 	orh	r10,0xc000
8000306a:	fe 79 00 00 	mov	r9,-65536
8000306e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003072:	5e fc       	retal	r12
80003074:	80 00       	ld.sh	r0,r0[0x0]
80003076:	43 48       	lddsp	r8,sp[0xd0]
80003078:	80 00       	ld.sh	r0,r0[0x0]
8000307a:	40 00       	lddsp	r0,sp[0x0]
8000307c:	80 00       	ld.sh	r0,r0[0x0]
8000307e:	41 04       	lddsp	r4,sp[0x40]
80003080:	80 00       	ld.sh	r0,r0[0x0]
80003082:	41 12       	lddsp	r2,sp[0x44]
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	41 20       	lddsp	r0,sp[0x48]
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	41 2e       	lddsp	lr,sp[0x48]

8000308c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000308c:	fe 78 00 00 	mov	r8,-65536
80003090:	e0 69 00 83 	mov	r9,131
80003094:	f2 0c 01 0c 	sub	r12,r9,r12
80003098:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000309c:	f2 ca ff c0 	sub	r10,r9,-64
800030a0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800030a4:	58 08       	cp.w	r8,0
800030a6:	c0 21       	brne	800030aa <_get_interrupt_handler+0x1e>
800030a8:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800030aa:	f0 08 12 00 	clz	r8,r8
800030ae:	48 5a       	lddpc	r10,800030c0 <_get_interrupt_handler+0x34>
800030b0:	f4 09 00 39 	add	r9,r10,r9<<0x3
800030b4:	f0 08 11 1f 	rsub	r8,r8,31
800030b8:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800030ba:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800030be:	5e fc       	retal	r12
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	43 48       	lddsp	r8,sp[0xd0]

800030c4 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
800030c4:	e1 b9 00 00 	mfsr	r9,0x0
800030c8:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
800030ca:	fe 78 04 00 	mov	r8,-64512
800030ce:	fc 1a aa 00 	movh	r10,0xaa00
800030d2:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
800030d6:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
800030d8:	12 98       	mov	r8,r9
800030da:	e6 18 00 01 	andh	r8,0x1,COH
800030de:	c0 21       	brne	800030e2 <pm_set_mclk_source+0x1e>
800030e0:	d5 03       	csrf	0x10

  return PASS;
}
800030e2:	5e fd       	retal	0

800030e4 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
800030e4:	eb cd 40 c0 	pushm	r6-r7,lr
800030e8:	16 97       	mov	r7,r11
800030ea:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
800030ec:	58 0c       	cp.w	r12,0
800030ee:	c0 50       	breq	800030f8 <pcl_switch_to_osc+0x14>
800030f0:	fe 7c d8 f0 	mov	r12,-10000
800030f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
800030f8:	30 0c       	mov	r12,0
800030fa:	f0 1f 00 08 	mcall	80003118 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
800030fe:	30 1a       	mov	r10,1
80003100:	0c 9b       	mov	r11,r6
80003102:	30 0c       	mov	r12,0
80003104:	f0 1f 00 06 	mcall	8000311c <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003108:	0e 9c       	mov	r12,r7
8000310a:	f0 1f 00 06 	mcall	80003120 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000310e:	30 1c       	mov	r12,1
80003110:	f0 1f 00 05 	mcall	80003124 <pcl_switch_to_osc+0x40>
80003114:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	31 b8       	mov	r8,27
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	31 44       	mov	r4,20
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	2e b4       	sub	r4,-21
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	30 c4       	mov	r4,12

80003128 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80003128:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000312c:	fe 7a 08 00 	mov	r10,-63488
80003130:	c0 48       	rjmp	80003138 <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
80003132:	20 18       	sub	r8,1
80003134:	c0 21       	brne	80003138 <scif_pclksr_statushigh_wait+0x10>
80003136:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80003138:	74 59       	ld.w	r9,r10[0x14]
8000313a:	f9 e9 00 09 	and	r9,r12,r9
8000313e:	cf a0       	breq	80003132 <scif_pclksr_statushigh_wait+0xa>
80003140:	5e fd       	retal	0
80003142:	d7 03       	nop

80003144 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80003144:	eb cd 40 80 	pushm	r7,lr
80003148:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
8000314a:	fa c8 ff f8 	sub	r8,sp,-8
8000314e:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
80003152:	fe 78 08 00 	mov	r8,-63488
80003156:	f8 c9 ff f7 	sub	r9,r12,-9
8000315a:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
8000315e:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80003162:	30 1b       	mov	r11,1
80003164:	ef db d2 01 	bfins	r7,r11,0x10,0x1
80003168:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
8000316c:	e1 bb 00 00 	mfsr	r11,0x0
80003170:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80003172:	f2 07 15 02 	lsl	r7,r9,0x2
80003176:	ea 17 aa 00 	orh	r7,0xaa00
8000317a:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
8000317c:	fc fe ff f8 	ld.w	lr,lr[-8]
80003180:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80003184:	16 98       	mov	r8,r11
80003186:	e6 18 00 01 	andh	r8,0x1,COH
8000318a:	c0 21       	brne	8000318e <scif_enable_osc+0x4a>
8000318c:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
8000318e:	58 0a       	cp.w	r10,0
80003190:	c0 e0       	breq	800031ac <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
80003192:	58 0c       	cp.w	r12,0
80003194:	c0 61       	brne	800031a0 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80003196:	30 1c       	mov	r12,1
80003198:	f0 1f 00 07 	mcall	800031b4 <scif_enable_osc+0x70>
8000319c:	c0 80       	breq	800031ac <scif_enable_osc+0x68>
8000319e:	c0 58       	rjmp	800031a8 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
800031a0:	30 2c       	mov	r12,2
800031a2:	f0 1f 00 05 	mcall	800031b4 <scif_enable_osc+0x70>
800031a6:	c0 30       	breq	800031ac <scif_enable_osc+0x68>
800031a8:	3f fc       	mov	r12,-1
800031aa:	c0 28       	rjmp	800031ae <scif_enable_osc+0x6a>
800031ac:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
800031ae:	2f ed       	sub	sp,-8
800031b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800031b4:	80 00       	ld.sh	r0,r0[0x0]
800031b6:	31 28       	mov	r8,18

800031b8 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
800031b8:	58 0c       	cp.w	r12,0
800031ba:	c3 41       	brne	80003222 <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
800031bc:	fe 78 08 00 	mov	r8,-63488
800031c0:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800031c2:	e0 69 84 7f 	mov	r9,33919
800031c6:	ea 19 00 1e 	orh	r9,0x1e
800031ca:	12 3b       	cp.w	r11,r9
800031cc:	e0 8b 00 04 	brhi	800031d4 <scif_configure_osc_crystalmode+0x1c>
800031d0:	30 0b       	mov	r11,0
800031d2:	c1 38       	rjmp	800031f8 <scif_configure_osc_crystalmode+0x40>
800031d4:	e0 69 96 7f 	mov	r9,38527
800031d8:	ea 19 00 98 	orh	r9,0x98
800031dc:	12 3b       	cp.w	r11,r9
800031de:	e0 8b 00 04 	brhi	800031e6 <scif_configure_osc_crystalmode+0x2e>
800031e2:	30 1b       	mov	r11,1
800031e4:	c0 a8       	rjmp	800031f8 <scif_configure_osc_crystalmode+0x40>
800031e6:	e0 69 24 00 	mov	r9,9216
800031ea:	ea 19 00 f4 	orh	r9,0xf4
800031ee:	12 3b       	cp.w	r11,r9
800031f0:	f9 bb 03 02 	movlo	r11,2
800031f4:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800031f8:	30 19       	mov	r9,1
800031fa:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800031fe:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80003202:	e1 ba 00 00 	mfsr	r10,0x0
80003206:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80003208:	fe 79 08 00 	mov	r9,-63488
8000320c:	32 4b       	mov	r11,36
8000320e:	ea 1b aa 00 	orh	r11,0xaa00
80003212:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80003214:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80003216:	14 98       	mov	r8,r10
80003218:	e6 18 00 01 	andh	r8,0x1,COH
8000321c:	c3 51       	brne	80003286 <scif_configure_osc_crystalmode+0xce>
8000321e:	d5 03       	csrf	0x10
80003220:	c3 38       	rjmp	80003286 <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
80003222:	fe 78 08 00 	mov	r8,-63488
80003226:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80003228:	e0 69 84 7f 	mov	r9,33919
8000322c:	ea 19 00 1e 	orh	r9,0x1e
80003230:	12 3b       	cp.w	r11,r9
80003232:	e0 8b 00 04 	brhi	8000323a <scif_configure_osc_crystalmode+0x82>
80003236:	30 0b       	mov	r11,0
80003238:	c1 38       	rjmp	8000325e <scif_configure_osc_crystalmode+0xa6>
8000323a:	e0 69 96 7f 	mov	r9,38527
8000323e:	ea 19 00 98 	orh	r9,0x98
80003242:	12 3b       	cp.w	r11,r9
80003244:	e0 8b 00 04 	brhi	8000324c <scif_configure_osc_crystalmode+0x94>
80003248:	30 1b       	mov	r11,1
8000324a:	c0 a8       	rjmp	8000325e <scif_configure_osc_crystalmode+0xa6>
8000324c:	e0 69 24 00 	mov	r9,9216
80003250:	ea 19 00 f4 	orh	r9,0xf4
80003254:	12 3b       	cp.w	r11,r9
80003256:	f9 bb 03 02 	movlo	r11,2
8000325a:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000325e:	30 19       	mov	r9,1
80003260:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80003264:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80003268:	e1 ba 00 00 	mfsr	r10,0x0
8000326c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
8000326e:	fe 79 08 00 	mov	r9,-63488
80003272:	32 8b       	mov	r11,40
80003274:	ea 1b aa 00 	orh	r11,0xaa00
80003278:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
8000327a:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000327c:	14 98       	mov	r8,r10
8000327e:	e6 18 00 01 	andh	r8,0x1,COH
80003282:	c0 21       	brne	80003286 <scif_configure_osc_crystalmode+0xce>
80003284:	d5 03       	csrf	0x10
  }

  return PASS;
}
80003286:	5e fd       	retal	0

80003288 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003288:	f8 c8 00 01 	sub	r8,r12,1
8000328c:	f0 0b 00 0b 	add	r11,r8,r11
80003290:	f6 0c 0d 0a 	divu	r10,r11,r12
80003294:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003296:	f4 c8 00 01 	sub	r8,r10,1
8000329a:	e0 48 00 fe 	cp.w	r8,254
8000329e:	e0 88 00 03 	brls	800032a4 <getBaudDiv+0x1c>
800032a2:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800032a4:	5c 8c       	casts.h	r12
}
800032a6:	5e fc       	retal	r12

800032a8 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800032a8:	f7 39 00 0d 	ld.ub	r9,r11[13]
800032ac:	30 18       	mov	r8,1
800032ae:	f0 09 18 00 	cp.b	r9,r8
800032b2:	e0 88 00 04 	brls	800032ba <spi_initMaster+0x12>
800032b6:	30 2c       	mov	r12,2
800032b8:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800032ba:	e0 68 00 80 	mov	r8,128
800032be:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800032c0:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800032c2:	30 19       	mov	r9,1
800032c4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800032c8:	f7 39 00 0d 	ld.ub	r9,r11[13]
800032cc:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800032d0:	30 09       	mov	r9,0
800032d2:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800032d6:	30 fa       	mov	r10,15
800032d8:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800032dc:	99 18       	st.w	r12[0x4],r8
800032de:	5e f9       	retal	r9

800032e0 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800032e0:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800032e4:	30 1e       	mov	lr,1
800032e6:	f6 0e 18 00 	cp.b	lr,r11
800032ea:	f9 be 02 00 	movhs	lr,0
800032ee:	30 18       	mov	r8,1
800032f0:	f4 08 18 00 	cp.b	r8,r10
800032f4:	f9 b8 02 00 	movhs	r8,0
800032f8:	fd e8 10 08 	or	r8,lr,r8
800032fc:	30 07       	mov	r7,0
800032fe:	ee 08 18 00 	cp.b	r8,r7
80003302:	c0 40       	breq	8000330a <spi_selectionMode+0x2a>
80003304:	30 2c       	mov	r12,2
80003306:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000330a:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000330c:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003310:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003314:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003318:	99 18       	st.w	r12[0x4],r8
8000331a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

8000331e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000331e:	78 18       	ld.w	r8,r12[0x4]
80003320:	ea 18 00 0f 	orh	r8,0xf
80003324:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003326:	78 18       	ld.w	r8,r12[0x4]
80003328:	e2 18 00 04 	andl	r8,0x4,COH
8000332c:	c0 f0       	breq	8000334a <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000332e:	30 e8       	mov	r8,14
80003330:	f0 0b 18 00 	cp.b	r11,r8
80003334:	e0 8b 00 19 	brhi	80003366 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003338:	78 18       	ld.w	r8,r12[0x4]
8000333a:	b1 6b       	lsl	r11,0x10
8000333c:	ea 1b ff f0 	orh	r11,0xfff0
80003340:	e8 1b ff ff 	orl	r11,0xffff
80003344:	10 6b       	and	r11,r8
80003346:	99 1b       	st.w	r12[0x4],r11
80003348:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000334a:	30 38       	mov	r8,3
8000334c:	f0 0b 18 00 	cp.b	r11,r8
80003350:	e0 8b 00 0b 	brhi	80003366 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003354:	78 18       	ld.w	r8,r12[0x4]
80003356:	2f 0b       	sub	r11,-16
80003358:	30 19       	mov	r9,1
8000335a:	f2 0b 09 4b 	lsl	r11,r9,r11
8000335e:	5c db       	com	r11
80003360:	10 6b       	and	r11,r8
80003362:	99 1b       	st.w	r12[0x4],r11
80003364:	5e fd       	retal	0
80003366:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003368:	5e fc       	retal	r12

8000336a <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000336a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000336e:	c0 58       	rjmp	80003378 <spi_unselectChip+0xe>
		if (!timeout--) {
80003370:	58 08       	cp.w	r8,0
80003372:	c0 21       	brne	80003376 <spi_unselectChip+0xc>
80003374:	5e ff       	retal	1
80003376:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003378:	78 49       	ld.w	r9,r12[0x10]
8000337a:	e2 19 02 00 	andl	r9,0x200,COH
8000337e:	cf 90       	breq	80003370 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003380:	78 18       	ld.w	r8,r12[0x4]
80003382:	ea 18 00 0f 	orh	r8,0xf
80003386:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003388:	fc 18 01 00 	movh	r8,0x100
8000338c:	99 08       	st.w	r12[0x0],r8
8000338e:	5e fd       	retal	0

80003390 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003390:	eb cd 40 f8 	pushm	r3-r7,lr
80003394:	18 95       	mov	r5,r12
80003396:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003398:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000339c:	30 38       	mov	r8,3
8000339e:	f0 06 18 00 	cp.b	r6,r8
800033a2:	e0 8b 00 4d 	brhi	8000343c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800033a6:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800033aa:	30 18       	mov	r8,1
800033ac:	f0 04 18 00 	cp.b	r4,r8
800033b0:	e0 8b 00 46 	brhi	8000343c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800033b4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800033b8:	30 78       	mov	r8,7
800033ba:	f0 03 18 00 	cp.b	r3,r8
800033be:	e0 88 00 3f 	brls	8000343c <spi_setupChipReg+0xac>
800033c2:	31 08       	mov	r8,16
800033c4:	f0 03 18 00 	cp.b	r3,r8
800033c8:	e0 8b 00 3a 	brhi	8000343c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800033cc:	14 9b       	mov	r11,r10
800033ce:	6e 1c       	ld.w	r12,r7[0x4]
800033d0:	f0 1f 00 1d 	mcall	80003444 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800033d4:	c3 45       	brlt	8000343c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800033d6:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800033d8:	ec 09 16 01 	lsr	r9,r6,0x1
800033dc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800033e0:	ec 16 00 01 	eorl	r6,0x1
800033e4:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800033e8:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800033ec:	20 83       	sub	r3,8
800033ee:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800033f2:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800033f6:	ef 39 00 09 	ld.ub	r9,r7[9]
800033fa:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800033fe:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003402:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003406:	0f 89       	ld.ub	r9,r7[0x0]
80003408:	30 1a       	mov	r10,1
8000340a:	f4 09 18 00 	cp.b	r9,r10
8000340e:	c0 e0       	breq	8000342a <spi_setupChipReg+0x9a>
80003410:	c0 a3       	brcs	80003424 <spi_setupChipReg+0x94>
80003412:	30 2a       	mov	r10,2
80003414:	f4 09 18 00 	cp.b	r9,r10
80003418:	c0 c0       	breq	80003430 <spi_setupChipReg+0xa0>
8000341a:	30 3a       	mov	r10,3
8000341c:	f4 09 18 00 	cp.b	r9,r10
80003420:	c0 e1       	brne	8000343c <spi_setupChipReg+0xac>
80003422:	c0 a8       	rjmp	80003436 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003424:	8b c8       	st.w	r5[0x30],r8
80003426:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000342a:	8b d8       	st.w	r5[0x34],r8
8000342c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003430:	8b e8       	st.w	r5[0x38],r8
80003432:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003436:	8b f8       	st.w	r5[0x3c],r8
80003438:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000343c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000343e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003442:	00 00       	add	r0,r0
80003444:	80 00       	ld.sh	r0,r0[0x0]
80003446:	32 88       	mov	r8,40

80003448 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003448:	30 18       	mov	r8,1
8000344a:	99 08       	st.w	r12[0x0],r8
}
8000344c:	5e fc       	retal	r12

8000344e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000344e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003452:	c0 58       	rjmp	8000345c <spi_write+0xe>
		if (!timeout--) {
80003454:	58 08       	cp.w	r8,0
80003456:	c0 21       	brne	8000345a <spi_write+0xc>
80003458:	5e ff       	retal	1
8000345a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000345c:	78 49       	ld.w	r9,r12[0x10]
8000345e:	e2 19 00 02 	andl	r9,0x2,COH
80003462:	cf 90       	breq	80003454 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003464:	5c 7b       	castu.h	r11
80003466:	99 3b       	st.w	r12[0xc],r11
80003468:	5e fd       	retal	0

8000346a <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000346a:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000346e:	c0 58       	rjmp	80003478 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003470:	58 08       	cp.w	r8,0
80003472:	c0 21       	brne	80003476 <spi_read+0xc>
80003474:	5e ff       	retal	1
80003476:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003478:	78 49       	ld.w	r9,r12[0x10]
8000347a:	e2 19 02 01 	andl	r9,0x201,COH
8000347e:	e0 49 02 01 	cp.w	r9,513
80003482:	cf 71       	brne	80003470 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003484:	78 28       	ld.w	r8,r12[0x8]
80003486:	b6 08       	st.h	r11[0x0],r8
80003488:	5e fd       	retal	0
8000348a:	d7 03       	nop

8000348c <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000348c:	4a e8       	lddpc	r8,80003544 <twim_master_interrupt_handler+0xb8>
8000348e:	70 08       	ld.w	r8,r8[0x0]
80003490:	70 79       	ld.w	r9,r8[0x1c]
80003492:	4a ea       	lddpc	r10,80003548 <twim_master_interrupt_handler+0xbc>
80003494:	74 0a       	ld.w	r10,r10[0x0]
80003496:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8000349a:	12 9a       	mov	r10,r9
8000349c:	e2 1a 07 00 	andl	r10,0x700,COH
800034a0:	c1 40       	breq	800034c8 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
800034a2:	e2 19 03 00 	andl	r9,0x300,COH
800034a6:	f9 b9 01 fc 	movne	r9,-4
800034aa:	f9 b9 00 fe 	moveq	r9,-2
800034ae:	4a 8a       	lddpc	r10,8000354c <twim_master_interrupt_handler+0xc0>
800034b0:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
800034b2:	70 3a       	ld.w	r10,r8[0xc]
800034b4:	30 09       	mov	r9,0
800034b6:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
800034ba:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
800034bc:	3f fa       	mov	r10,-1
800034be:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
800034c0:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
800034c2:	4a 48       	lddpc	r8,80003550 <twim_master_interrupt_handler+0xc4>
800034c4:	b0 89       	st.b	r8[0x0],r9
800034c6:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
800034c8:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
800034cc:	c1 30       	breq	800034f2 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
800034ce:	4a 2a       	lddpc	r10,80003554 <twim_master_interrupt_handler+0xc8>
800034d0:	70 5b       	ld.w	r11,r8[0x14]
800034d2:	74 09       	ld.w	r9,r10[0x0]
800034d4:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
800034d6:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
800034d8:	4a 09       	lddpc	r9,80003558 <twim_master_interrupt_handler+0xcc>
800034da:	72 0a       	ld.w	r10,r9[0x0]
800034dc:	20 1a       	sub	r10,1
800034de:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
800034e0:	72 09       	ld.w	r9,r9[0x0]
800034e2:	58 09       	cp.w	r9,0
800034e4:	c2 f1       	brne	80003542 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
800034e6:	30 19       	mov	r9,1
800034e8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800034ea:	30 09       	mov	r9,0
800034ec:	49 98       	lddpc	r8,80003550 <twim_master_interrupt_handler+0xc4>
800034ee:	b0 89       	st.b	r8[0x0],r9
800034f0:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800034f2:	e2 19 00 02 	andl	r9,0x2,COH
800034f6:	c2 60       	breq	80003542 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800034f8:	49 99       	lddpc	r9,8000355c <twim_master_interrupt_handler+0xd0>
800034fa:	72 09       	ld.w	r9,r9[0x0]
800034fc:	58 09       	cp.w	r9,0
800034fe:	c0 71       	brne	8000350c <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003500:	30 29       	mov	r9,2
80003502:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003504:	30 09       	mov	r9,0
80003506:	49 38       	lddpc	r8,80003550 <twim_master_interrupt_handler+0xc4>
80003508:	b0 89       	st.b	r8[0x0],r9
8000350a:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8000350c:	49 5a       	lddpc	r10,80003560 <twim_master_interrupt_handler+0xd4>
8000350e:	74 09       	ld.w	r9,r10[0x0]
80003510:	13 3b       	ld.ub	r11,r9++
80003512:	91 6b       	st.w	r8[0x18],r11
80003514:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003516:	49 28       	lddpc	r8,8000355c <twim_master_interrupt_handler+0xd0>
80003518:	70 09       	ld.w	r9,r8[0x0]
8000351a:	20 19       	sub	r9,1
8000351c:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000351e:	70 08       	ld.w	r8,r8[0x0]
80003520:	58 08       	cp.w	r8,0
80003522:	c1 01       	brne	80003542 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003524:	48 b8       	lddpc	r8,80003550 <twim_master_interrupt_handler+0xc4>
80003526:	11 88       	ld.ub	r8,r8[0x0]
80003528:	58 08       	cp.w	r8,0
8000352a:	c0 c0       	breq	80003542 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
8000352c:	30 09       	mov	r9,0
8000352e:	48 98       	lddpc	r8,80003550 <twim_master_interrupt_handler+0xc4>
80003530:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003532:	48 d8       	lddpc	r8,80003564 <twim_master_interrupt_handler+0xd8>
80003534:	70 08       	ld.w	r8,r8[0x0]
80003536:	70 3a       	ld.w	r10,r8[0xc]
80003538:	48 99       	lddpc	r9,8000355c <twim_master_interrupt_handler+0xd0>
8000353a:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
8000353c:	70 29       	ld.w	r9,r8[0x8]
8000353e:	48 98       	lddpc	r8,80003560 <twim_master_interrupt_handler+0xd4>
80003540:	91 09       	st.w	r8[0x0],r9
80003542:	d6 03       	rete
80003544:	00 00       	add	r0,r0
80003546:	01 f8       	ld.ub	r8,r0[0x7]
80003548:	00 00       	add	r0,r0
8000354a:	02 0c       	add	r12,r1
8000354c:	00 00       	add	r0,r0
8000354e:	02 04       	add	r4,r1
80003550:	00 00       	add	r0,r0
80003552:	02 10       	sub	r0,r1
80003554:	00 00       	add	r0,r0
80003556:	01 fc       	ld.ub	r12,r0[0x7]
80003558:	00 00       	add	r0,r0
8000355a:	02 00       	add	r0,r1
8000355c:	00 00       	add	r0,r0
8000355e:	02 18       	sub	r8,r1
80003560:	00 00       	add	r0,r0
80003562:	02 08       	add	r8,r1
80003564:	00 00       	add	r0,r0
80003566:	02 14       	sub	r4,r1

80003568 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003568:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
8000356c:	f4 0b 0d 0a 	divu	r10,r10,r11
80003570:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003574:	e0 48 00 ff 	cp.w	r8,255
80003578:	e0 8b 00 04 	brhi	80003580 <twim_set_speed+0x18>
8000357c:	30 09       	mov	r9,0
8000357e:	c2 18       	rjmp	800035c0 <twim_set_speed+0x58>
80003580:	30 09       	mov	r9,0
80003582:	30 16       	mov	r6,1
80003584:	30 7a       	mov	r10,7
80003586:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003588:	2f f9       	sub	r9,-1
8000358a:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
8000358c:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000358e:	e0 48 00 ff 	cp.w	r8,255
80003592:	f9 be 0b 01 	movhi	lr,1
80003596:	f9 be 08 00 	movls	lr,0
8000359a:	f2 0a 18 00 	cp.b	r10,r9
8000359e:	ec 0b 17 20 	movhs	r11,r6
800035a2:	f9 bb 03 00 	movlo	r11,0
800035a6:	fd eb 00 0b 	and	r11,lr,r11
800035aa:	ee 0b 18 00 	cp.b	r11,r7
800035ae:	ce d1       	brne	80003588 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
800035b0:	30 7a       	mov	r10,7
800035b2:	f4 09 18 00 	cp.b	r9,r10
800035b6:	e0 88 00 05 	brls	800035c0 <twim_set_speed+0x58>
800035ba:	3f 8c       	mov	r12,-8
800035bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800035c0:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800035c4:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
800035c8:	14 18       	sub	r8,r10
800035ca:	f7 e8 10 88 	or	r8,r11,r8<<0x8
800035ce:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
800035d2:	99 19       	st.w	r12[0x4],r9
800035d4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

800035d8 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
800035d8:	48 38       	lddpc	r8,800035e4 <twim_status+0xc>
800035da:	70 08       	ld.w	r8,r8[0x0]
800035dc:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
800035de:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800035e2:	5e fc       	retal	r12
800035e4:	00 00       	add	r0,r0
800035e6:	01 f8       	ld.ub	r8,r0[0x7]

800035e8 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800035e8:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
800035ec:	e6 18 00 01 	andh	r8,0x1,COH
800035f0:	c0 21       	brne	800035f4 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
800035f2:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800035f4:	3f f8       	mov	r8,-1
800035f6:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
800035f8:	99 b8       	st.w	r12[0x2c],r8
}
800035fa:	5e fc       	retal	r12

800035fc <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800035fc:	eb cd 40 fe 	pushm	r1-r7,lr
80003600:	18 97       	mov	r7,r12
80003602:	16 93       	mov	r3,r11
80003604:	14 95       	mov	r5,r10
80003606:	12 92       	mov	r2,r9
80003608:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000360a:	30 14       	mov	r4,1
8000360c:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000360e:	e0 68 00 80 	mov	r8,128
80003612:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003614:	30 28       	mov	r8,2
80003616:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003618:	49 e6       	lddpc	r6,80003690 <twim_write+0x94>
8000361a:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000361c:	f0 1f 00 1e 	mcall	80003694 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003620:	49 e8       	lddpc	r8,80003698 <twim_write+0x9c>
80003622:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003624:	49 e8       	lddpc	r8,8000369c <twim_write+0xa0>
80003626:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003628:	30 09       	mov	r9,0
8000362a:	49 e8       	lddpc	r8,800036a0 <twim_write+0xa4>
8000362c:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000362e:	49 e9       	lddpc	r9,800036a4 <twim_write+0xa8>
80003630:	30 08       	mov	r8,0
80003632:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003634:	6c 08       	ld.w	r8,r6[0x0]
80003636:	b1 65       	lsl	r5,0x10
80003638:	e8 15 e0 00 	orl	r5,0xe000
8000363c:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003640:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003644:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003646:	49 9a       	lddpc	r10,800036a8 <twim_write+0xac>
80003648:	e0 6b 03 02 	mov	r11,770
8000364c:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000364e:	74 0a       	ld.w	r10,r10[0x0]
80003650:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003652:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003654:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003656:	72 08       	ld.w	r8,r9[0x0]
80003658:	58 08       	cp.w	r8,0
8000365a:	c0 80       	breq	8000366a <twim_write+0x6e>
8000365c:	c0 b8       	rjmp	80003672 <twim_write+0x76>
		cpu_relax();
8000365e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003662:	6c 08       	ld.w	r8,r6[0x0]
80003664:	58 08       	cp.w	r8,0
80003666:	c0 30       	breq	8000366c <twim_write+0x70>
80003668:	c0 58       	rjmp	80003672 <twim_write+0x76>
8000366a:	48 f6       	lddpc	r6,800036a4 <twim_write+0xa8>
8000366c:	f0 1f 00 10 	mcall	800036ac <twim_write+0xb0>
80003670:	cf 70       	breq	8000365e <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003672:	30 28       	mov	r8,2
80003674:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003676:	48 c8       	lddpc	r8,800036a4 <twim_write+0xa8>
80003678:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000367a:	5b c8       	cp.w	r8,-4
8000367c:	c0 70       	breq	8000368a <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000367e:	48 a8       	lddpc	r8,800036a4 <twim_write+0xa8>
80003680:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003682:	5b e8       	cp.w	r8,-2
80003684:	c0 30       	breq	8000368a <twim_write+0x8e>
80003686:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000368a:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000368e:	00 00       	add	r0,r0
80003690:	00 00       	add	r0,r0
80003692:	01 f8       	ld.ub	r8,r0[0x7]
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	35 e8       	mov	r8,94
80003698:	00 00       	add	r0,r0
8000369a:	02 08       	add	r8,r1
8000369c:	00 00       	add	r0,r0
8000369e:	02 18       	sub	r8,r1
800036a0:	00 00       	add	r0,r0
800036a2:	02 10       	sub	r0,r1
800036a4:	00 00       	add	r0,r0
800036a6:	02 04       	add	r4,r1
800036a8:	00 00       	add	r0,r0
800036aa:	02 0c       	add	r12,r1
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	35 d8       	mov	r8,93

800036b0 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800036b0:	d4 01       	pushm	lr
800036b2:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
800036b4:	30 08       	mov	r8,0
800036b6:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
800036b8:	30 08       	mov	r8,0
800036ba:	16 99       	mov	r9,r11
800036bc:	10 9a       	mov	r10,r8
800036be:	1a 9b       	mov	r11,sp
800036c0:	f0 1f 00 02 	mcall	800036c8 <twim_probe+0x18>
}
800036c4:	2f fd       	sub	sp,-4
800036c6:	d8 02       	popm	pc
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	35 fc       	mov	r12,95

800036cc <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800036cc:	eb cd 40 e0 	pushm	r5-r7,lr
800036d0:	18 97       	mov	r7,r12
800036d2:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800036d4:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800036d8:	30 0a       	mov	r10,0
800036da:	4a 59       	lddpc	r9,8000376c <twim_master_init+0xa0>
800036dc:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
800036de:	e6 18 00 01 	andh	r8,0x1,COH
800036e2:	c0 b1       	brne	800036f8 <twim_master_init+0x2c>
		cpu_irq_disable ();
800036e4:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
800036e6:	3f f8       	mov	r8,-1
800036e8:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800036ea:	30 18       	mov	r8,1
800036ec:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800036ee:	e0 68 00 80 	mov	r8,128
800036f2:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
800036f4:	d5 03       	csrf	0x10
800036f6:	c0 88       	rjmp	80003706 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
800036f8:	3f f8       	mov	r8,-1
800036fa:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800036fc:	30 18       	mov	r8,1
800036fe:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003700:	e0 68 00 80 	mov	r8,128
80003704:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003706:	3f f8       	mov	r8,-1
80003708:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000370a:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000370e:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003710:	30 1a       	mov	r10,1
80003712:	e0 6b 03 20 	mov	r11,800
80003716:	49 7c       	lddpc	r12,80003770 <twim_master_init+0xa4>
80003718:	f0 1f 00 17 	mcall	80003774 <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000371c:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003720:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003724:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003726:	f0 09 18 00 	cp.b	r9,r8
8000372a:	f9 b8 01 10 	movne	r8,16
8000372e:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003732:	f9 b8 01 ff 	movne	r8,-1
80003736:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000373a:	6a 0a       	ld.w	r10,r5[0x0]
8000373c:	6a 1b       	ld.w	r11,r5[0x4]
8000373e:	0e 9c       	mov	r12,r7
80003740:	f0 1f 00 0e 	mcall	80003778 <twim_master_init+0xac>
80003744:	5b 8c       	cp.w	r12,-8
80003746:	c1 00       	breq	80003766 <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003748:	6a 2b       	ld.w	r11,r5[0x8]
8000374a:	0e 9c       	mov	r12,r7
8000374c:	f0 1f 00 0c 	mcall	8000377c <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003750:	48 78       	lddpc	r8,8000376c <twim_master_init+0xa0>
80003752:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003754:	5b c8       	cp.w	r8,-4
80003756:	c0 70       	breq	80003764 <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003758:	48 58       	lddpc	r8,8000376c <twim_master_init+0xa0>
8000375a:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000375c:	5b e8       	cp.w	r8,-2
8000375e:	c0 30       	breq	80003764 <twim_master_init+0x98>
80003760:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003764:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003766:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000376a:	00 00       	add	r0,r0
8000376c:	00 00       	add	r0,r0
8000376e:	02 04       	add	r4,r1
80003770:	80 00       	ld.sh	r0,r0[0x0]
80003772:	34 8c       	mov	r12,72
80003774:	80 00       	ld.sh	r0,r0[0x0]
80003776:	30 0c       	mov	r12,0
80003778:	80 00       	ld.sh	r0,r0[0x0]
8000377a:	35 68       	mov	r8,86
8000377c:	80 00       	ld.sh	r0,r0[0x0]
8000377e:	36 b0       	mov	r0,107

80003780 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003780:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003782:	f6 08 15 04 	lsl	r8,r11,0x4
80003786:	14 38       	cp.w	r8,r10
80003788:	f9 b8 08 10 	movls	r8,16
8000378c:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003790:	f0 0b 02 4b 	mul	r11,r8,r11
80003794:	f6 09 16 01 	lsr	r9,r11,0x1
80003798:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
8000379c:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800037a0:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800037a4:	f2 cb 00 01 	sub	r11,r9,1
800037a8:	e0 4b ff fe 	cp.w	r11,65534
800037ac:	e0 88 00 03 	brls	800037b2 <usart_set_async_baudrate+0x32>
800037b0:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800037b2:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800037b4:	e8 6e 00 00 	mov	lr,524288
800037b8:	59 08       	cp.w	r8,16
800037ba:	fc 08 17 10 	movne	r8,lr
800037be:	f9 b8 00 00 	moveq	r8,0
800037c2:	e4 1b ff f7 	andh	r11,0xfff7
800037c6:	e0 1b fe cf 	andl	r11,0xfecf
800037ca:	16 48       	or	r8,r11
800037cc:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800037ce:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800037d2:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800037d6:	99 89       	st.w	r12[0x20],r9
800037d8:	d8 0a       	popm	pc,r12=0

800037da <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800037da:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800037dc:	e2 18 00 02 	andl	r8,0x2,COH
800037e0:	c0 31       	brne	800037e6 <usart_write_char+0xc>
800037e2:	30 2c       	mov	r12,2
800037e4:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800037e6:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800037ea:	99 7b       	st.w	r12[0x1c],r11
800037ec:	5e fd       	retal	0
800037ee:	d7 03       	nop

800037f0 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800037f0:	eb cd 40 e0 	pushm	r5-r7,lr
800037f4:	18 96       	mov	r6,r12
800037f6:	16 95       	mov	r5,r11
800037f8:	e0 67 27 0f 	mov	r7,9999
800037fc:	c0 68       	rjmp	80003808 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800037fe:	58 07       	cp.w	r7,0
80003800:	c0 31       	brne	80003806 <usart_putchar+0x16>
80003802:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003806:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003808:	0a 9b       	mov	r11,r5
8000380a:	0c 9c       	mov	r12,r6
8000380c:	f0 1f 00 03 	mcall	80003818 <usart_putchar+0x28>
80003810:	cf 71       	brne	800037fe <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003812:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003816:	00 00       	add	r0,r0
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	37 da       	mov	r10,125

8000381c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8000381c:	eb cd 40 c0 	pushm	r6-r7,lr
80003820:	18 96       	mov	r6,r12
80003822:	16 97       	mov	r7,r11
  while (*string != '\0')
80003824:	17 8b       	ld.ub	r11,r11[0x0]
80003826:	58 0b       	cp.w	r11,0
80003828:	c0 80       	breq	80003838 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000382a:	2f f7       	sub	r7,-1
8000382c:	0c 9c       	mov	r12,r6
8000382e:	f0 1f 00 04 	mcall	8000383c <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003832:	0f 8b       	ld.ub	r11,r7[0x0]
80003834:	58 0b       	cp.w	r11,0
80003836:	cf a1       	brne	8000382a <usart_write_line+0xe>
80003838:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000383c:	80 00       	ld.sh	r0,r0[0x0]
8000383e:	37 f0       	mov	r0,127

80003840 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003840:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003844:	e6 18 00 01 	andh	r8,0x1,COH
80003848:	c0 71       	brne	80003856 <usart_reset+0x16>
8000384a:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000384c:	3f f8       	mov	r8,-1
8000384e:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003850:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003852:	d5 03       	csrf	0x10
80003854:	c0 48       	rjmp	8000385c <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003856:	3f f8       	mov	r8,-1
80003858:	99 38       	st.w	r12[0xc],r8
  usart->csr;
8000385a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000385c:	30 08       	mov	r8,0
8000385e:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003860:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003862:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003864:	ea 68 61 0c 	mov	r8,680204
80003868:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000386a:	5e fc       	retal	r12

8000386c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000386c:	eb cd 40 e0 	pushm	r5-r7,lr
80003870:	18 96       	mov	r6,r12
80003872:	16 97       	mov	r7,r11
80003874:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003876:	f0 1f 00 2f 	mcall	80003930 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000387a:	58 07       	cp.w	r7,0
8000387c:	c5 80       	breq	8000392c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
8000387e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003880:	30 49       	mov	r9,4
80003882:	f2 08 18 00 	cp.b	r8,r9
80003886:	e0 88 00 53 	brls	8000392c <usart_init_rs232+0xc0>
8000388a:	30 99       	mov	r9,9
8000388c:	f2 08 18 00 	cp.b	r8,r9
80003890:	e0 8b 00 4e 	brhi	8000392c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003894:	0f d9       	ld.ub	r9,r7[0x5]
80003896:	30 78       	mov	r8,7
80003898:	f0 09 18 00 	cp.b	r9,r8
8000389c:	e0 8b 00 48 	brhi	8000392c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
800038a0:	8e 39       	ld.sh	r9,r7[0x6]
800038a2:	e0 68 01 01 	mov	r8,257
800038a6:	f0 09 19 00 	cp.h	r9,r8
800038aa:	e0 8b 00 41 	brhi	8000392c <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
800038ae:	ef 39 00 08 	ld.ub	r9,r7[8]
800038b2:	30 38       	mov	r8,3
800038b4:	f0 09 18 00 	cp.b	r9,r8
800038b8:	e0 8b 00 3a 	brhi	8000392c <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800038bc:	0a 9a       	mov	r10,r5
800038be:	6e 0b       	ld.w	r11,r7[0x0]
800038c0:	0c 9c       	mov	r12,r6
800038c2:	f0 1f 00 1d 	mcall	80003934 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800038c6:	58 1c       	cp.w	r12,1
800038c8:	c3 20       	breq	8000392c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800038ca:	0f c8       	ld.ub	r8,r7[0x4]
800038cc:	30 99       	mov	r9,9
800038ce:	f2 08 18 00 	cp.b	r8,r9
800038d2:	c0 51       	brne	800038dc <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800038d4:	6c 18       	ld.w	r8,r6[0x4]
800038d6:	b1 b8       	sbr	r8,0x11
800038d8:	8d 18       	st.w	r6[0x4],r8
800038da:	c0 68       	rjmp	800038e6 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800038dc:	6c 19       	ld.w	r9,r6[0x4]
800038de:	20 58       	sub	r8,5
800038e0:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800038e4:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800038e6:	6c 19       	ld.w	r9,r6[0x4]
800038e8:	ef 3a 00 08 	ld.ub	r10,r7[8]
800038ec:	0f d8       	ld.ub	r8,r7[0x5]
800038ee:	a9 78       	lsl	r8,0x9
800038f0:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800038f4:	12 48       	or	r8,r9
800038f6:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800038f8:	8e 38       	ld.sh	r8,r7[0x6]
800038fa:	30 29       	mov	r9,2
800038fc:	f2 08 19 00 	cp.h	r8,r9
80003900:	e0 88 00 09 	brls	80003912 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003904:	6c 18       	ld.w	r8,r6[0x4]
80003906:	ad b8       	sbr	r8,0xd
80003908:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000390a:	8e b8       	ld.uh	r8,r7[0x6]
8000390c:	20 28       	sub	r8,2
8000390e:	8d a8       	st.w	r6[0x28],r8
80003910:	c0 68       	rjmp	8000391c <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003912:	6c 19       	ld.w	r9,r6[0x4]
80003914:	5c 78       	castu.h	r8
80003916:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
8000391a:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000391c:	6c 18       	ld.w	r8,r6[0x4]
8000391e:	e0 18 ff f0 	andl	r8,0xfff0
80003922:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003924:	35 08       	mov	r8,80
80003926:	8d 08       	st.w	r6[0x0],r8
80003928:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000392c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	38 40       	mov	r0,-124
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	37 80       	mov	r0,120

80003938 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80003938:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
8000393a:	f0 1f 00 02 	mcall	80003940 <print_char+0x8>
}
8000393e:	d8 02       	popm	pc
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	37 f0       	mov	r0,127

80003944 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80003944:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
80003946:	18 9b       	mov	r11,r12
80003948:	fe 7c 2c 00 	mov	r12,-54272
8000394c:	f0 1f 00 02 	mcall	80003954 <print_dbg_char+0x10>
}
80003950:	d8 02       	popm	pc
80003952:	00 00       	add	r0,r0
80003954:	80 00       	ld.sh	r0,r0[0x0]
80003956:	39 38       	mov	r8,-109

80003958 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80003958:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000395a:	f0 1f 00 02 	mcall	80003960 <print+0x8>
}
8000395e:	d8 02       	popm	pc
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	38 1c       	mov	r12,-127

80003964 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80003964:	eb cd 40 e0 	pushm	r5-r7,lr
80003968:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
8000396a:	30 08       	mov	r8,0
8000396c:	fb 68 00 0a 	st.b	sp[10],r8
80003970:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80003972:	1a 95       	mov	r5,sp
80003974:	e0 6e cc cd 	mov	lr,52429
80003978:	ea 1e cc cc 	orh	lr,0xcccc
8000397c:	20 19       	sub	r9,1
8000397e:	f6 0e 06 46 	mulu.d	r6,r11,lr
80003982:	0e 98       	mov	r8,r7
80003984:	a3 98       	lsr	r8,0x3
80003986:	f0 08 00 2a 	add	r10,r8,r8<<0x2
8000398a:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
8000398e:	2d 0b       	sub	r11,-48
80003990:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80003994:	10 9b       	mov	r11,r8
  } while (n);
80003996:	58 08       	cp.w	r8,0
80003998:	cf 21       	brne	8000397c <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
8000399a:	1a 9b       	mov	r11,sp
8000399c:	12 0b       	add	r11,r9
8000399e:	f0 1f 00 03 	mcall	800039a8 <print_ulong+0x44>
}
800039a2:	2f dd       	sub	sp,-12
800039a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	39 58       	mov	r8,-107

800039ac <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
800039ac:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800039ae:	18 9b       	mov	r11,r12
800039b0:	fe 7c 2c 00 	mov	r12,-54272
800039b4:	f0 1f 00 02 	mcall	800039bc <print_dbg_ulong+0x10>
}
800039b8:	d8 02       	popm	pc
800039ba:	00 00       	add	r0,r0
800039bc:	80 00       	ld.sh	r0,r0[0x0]
800039be:	39 64       	mov	r4,-106

800039c0 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
800039c0:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
800039c2:	18 9b       	mov	r11,r12
800039c4:	fe 7c 2c 00 	mov	r12,-54272
800039c8:	f0 1f 00 02 	mcall	800039d0 <print_dbg+0x10>
}
800039cc:	d8 02       	popm	pc
800039ce:	00 00       	add	r0,r0
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	39 58       	mov	r8,-107

800039d4 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
800039d4:	eb cd 40 80 	pushm	r7,lr
800039d8:	20 3d       	sub	sp,12
800039da:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800039dc:	50 0c       	stdsp	sp[0x0],r12
800039de:	30 88       	mov	r8,8
800039e0:	ba c8       	st.b	sp[0x4],r8
800039e2:	30 48       	mov	r8,4
800039e4:	ba d8       	st.b	sp[0x5],r8
800039e6:	30 08       	mov	r8,0
800039e8:	ba 38       	st.h	sp[0x6],r8
800039ea:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
800039ee:	30 2b       	mov	r11,2
800039f0:	48 6c       	lddpc	r12,80003a08 <init_dbg_rs232_ex+0x34>
800039f2:	f0 1f 00 07 	mcall	80003a0c <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
800039f6:	0e 9a       	mov	r10,r7
800039f8:	1a 9b       	mov	r11,sp
800039fa:	fe 7c 2c 00 	mov	r12,-54272
800039fe:	f0 1f 00 05 	mcall	80003a10 <init_dbg_rs232_ex+0x3c>
}
80003a02:	2f dd       	sub	sp,-12
80003a04:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	44 c0       	lddsp	r0,sp[0x130]
80003a0c:	80 00       	ld.sh	r0,r0[0x0]
80003a0e:	2f a4       	sub	r4,-6
80003a10:	80 00       	ld.sh	r0,r0[0x0]
80003a12:	38 6c       	mov	r12,-122

80003a14 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80003a14:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80003a16:	18 9b       	mov	r11,r12
80003a18:	e0 6c e1 00 	mov	r12,57600
80003a1c:	f0 1f 00 02 	mcall	80003a24 <init_dbg_rs232+0x10>
}
80003a20:	d8 02       	popm	pc
80003a22:	00 00       	add	r0,r0
80003a24:	80 00       	ld.sh	r0,r0[0x0]
80003a26:	39 d4       	mov	r4,-99

80003a28 <_stext>:
80003a28:	48 dd       	lddpc	sp,80003a5c <udata_clear_loop_end+0x4>
80003a2a:	fe c0 fa 2a 	sub	r0,pc,-1494
80003a2e:	e3 b0 00 01 	mtsr	0x4,r0
80003a32:	d5 53       	csrf	0x15
80003a34:	48 b0       	lddpc	r0,80003a60 <udata_clear_loop_end+0x8>
80003a36:	48 c1       	lddpc	r1,80003a64 <udata_clear_loop_end+0xc>
80003a38:	02 30       	cp.w	r0,r1
80003a3a:	c0 62       	brcc	80003a46 <idata_load_loop_end>
80003a3c:	48 b2       	lddpc	r2,80003a68 <udata_clear_loop_end+0x10>

80003a3e <idata_load_loop>:
80003a3e:	a5 05       	ld.d	r4,r2++
80003a40:	a1 24       	st.d	r0++,r4
80003a42:	02 30       	cp.w	r0,r1
80003a44:	cf d3       	brcs	80003a3e <idata_load_loop>

80003a46 <idata_load_loop_end>:
80003a46:	48 a0       	lddpc	r0,80003a6c <udata_clear_loop_end+0x14>
80003a48:	48 a1       	lddpc	r1,80003a70 <udata_clear_loop_end+0x18>
80003a4a:	02 30       	cp.w	r0,r1
80003a4c:	c0 62       	brcc	80003a58 <udata_clear_loop_end>
80003a4e:	30 02       	mov	r2,0
80003a50:	30 03       	mov	r3,0

80003a52 <udata_clear_loop>:
80003a52:	a1 22       	st.d	r0++,r2
80003a54:	02 30       	cp.w	r0,r1
80003a56:	cf e3       	brcs	80003a52 <udata_clear_loop>

80003a58 <udata_clear_loop_end>:
80003a58:	fe cf ff 30 	sub	pc,pc,-208
80003a5c:	00 01       	add	r1,r0
80003a5e:	00 00       	add	r0,r0
80003a60:	00 00       	add	r0,r0
80003a62:	00 04       	add	r4,r0
80003a64:	00 00       	add	r0,r0
80003a66:	00 10       	sub	r0,r0
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	47 58       	lddsp	r8,sp[0x1d4]
80003a6c:	00 00       	add	r0,r0
80003a6e:	00 10       	sub	r0,r0
80003a70:	00 00       	add	r0,r0
80003a72:	04 48       	or	r8,r2

80003a74 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
80003a74:	5e fc       	retal	r12
80003a76:	d7 03       	nop

80003a78 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80003a78:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80003a7a:	58 0c       	cp.w	r12,0
80003a7c:	c0 20       	breq	80003a80 <mem_test_unit_ready+0x8>
80003a7e:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80003a80:	48 28       	lddpc	r8,80003a88 <mem_test_unit_ready+0x10>
80003a82:	70 0c       	ld.w	r12,r8[0x0]
80003a84:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80003a86:	d8 02       	popm	pc
80003a88:	80 00       	ld.sh	r0,r0[0x0]
80003a8a:	44 d0       	lddsp	r0,sp[0x134]

80003a8c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80003a8c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80003a8e:	58 0c       	cp.w	r12,0
80003a90:	c0 20       	breq	80003a94 <mem_read_capacity+0x8>
80003a92:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80003a94:	48 38       	lddpc	r8,80003aa0 <mem_read_capacity+0x14>
80003a96:	70 18       	ld.w	r8,r8[0x4]
80003a98:	16 9c       	mov	r12,r11
80003a9a:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80003a9c:	d8 02       	popm	pc
80003a9e:	00 00       	add	r0,r0
80003aa0:	80 00       	ld.sh	r0,r0[0x0]
80003aa2:	44 d0       	lddsp	r0,sp[0x134]

80003aa4 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
80003aa4:	eb cd 40 80 	pushm	r7,lr
80003aa8:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
80003aaa:	49 98       	lddpc	r8,80003b0c <sd_mmc_resources_init+0x68>
80003aac:	1a 97       	mov	r7,sp
80003aae:	70 09       	ld.w	r9,r8[0x0]
80003ab0:	50 09       	stdsp	sp[0x0],r9
80003ab2:	70 19       	ld.w	r9,r8[0x4]
80003ab4:	50 19       	stdsp	sp[0x4],r9
80003ab6:	70 29       	ld.w	r9,r8[0x8]
80003ab8:	50 29       	stdsp	sp[0x8],r9
80003aba:	70 38       	ld.w	r8,r8[0xc]
80003abc:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80003abe:	30 4b       	mov	r11,4
80003ac0:	49 4c       	lddpc	r12,80003b10 <sd_mmc_resources_init+0x6c>
80003ac2:	f0 1f 00 15 	mcall	80003b14 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
80003ac6:	1a 9b       	mov	r11,sp
80003ac8:	fe 7c 34 00 	mov	r12,-52224
80003acc:	f0 1f 00 13 	mcall	80003b18 <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80003ad0:	30 09       	mov	r9,0
80003ad2:	12 9a       	mov	r10,r9
80003ad4:	12 9b       	mov	r11,r9
80003ad6:	fe 7c 34 00 	mov	r12,-52224
80003ada:	f0 1f 00 11 	mcall	80003b1c <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80003ade:	fe 7c 34 00 	mov	r12,-52224
80003ae2:	f0 1f 00 10 	mcall	80003b20 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
80003ae6:	20 4d       	sub	sp,16
80003ae8:	6e 08       	ld.w	r8,r7[0x0]
80003aea:	50 08       	stdsp	sp[0x0],r8
80003aec:	6e 18       	ld.w	r8,r7[0x4]
80003aee:	50 18       	stdsp	sp[0x4],r8
80003af0:	6e 28       	ld.w	r8,r7[0x8]
80003af2:	50 28       	stdsp	sp[0x8],r8
80003af4:	6e 38       	ld.w	r8,r7[0xc]
80003af6:	50 38       	stdsp	sp[0xc],r8
80003af8:	e0 6c 24 00 	mov	r12,9216
80003afc:	ea 1c 00 f4 	orh	r12,0xf4
80003b00:	f0 1f 00 09 	mcall	80003b24 <sd_mmc_resources_init+0x80>
80003b04:	2f cd       	sub	sp,-16
}
80003b06:	2f cd       	sub	sp,-16
80003b08:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b0c:	80 00       	ld.sh	r0,r0[0x0]
80003b0e:	45 24       	lddsp	r4,sp[0x148]
80003b10:	80 00       	ld.sh	r0,r0[0x0]
80003b12:	45 04       	lddsp	r4,sp[0x140]
80003b14:	80 00       	ld.sh	r0,r0[0x0]
80003b16:	2f a4       	sub	r4,-6
80003b18:	80 00       	ld.sh	r0,r0[0x0]
80003b1a:	32 a8       	mov	r8,42
80003b1c:	80 00       	ld.sh	r0,r0[0x0]
80003b1e:	32 e0       	mov	r0,46
80003b20:	80 00       	ld.sh	r0,r0[0x0]
80003b22:	34 48       	mov	r8,68
80003b24:	80 00       	ld.sh	r0,r0[0x0]
80003b26:	2b 10       	sub	r0,-79

80003b28 <main>:
}



int main (void)
{
80003b28:	d4 31       	pushm	r0-r7,lr
80003b2a:	20 9d       	sub	sp,36
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
80003b2c:	f0 1f 00 ba 	mcall	80003e14 <main+0x2ec>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80003b30:	30 3a       	mov	r10,3
80003b32:	e0 6b 24 00 	mov	r11,9216
80003b36:	ea 1b 00 f4 	orh	r11,0xf4
80003b3a:	30 0c       	mov	r12,0
80003b3c:	f0 1f 00 b7 	mcall	80003e18 <main+0x2f0>
	init_dbg_rs232(FOSC0);
80003b40:	e0 6c 24 00 	mov	r12,9216
80003b44:	ea 1c 00 f4 	orh	r12,0xf4
80003b48:	f0 1f 00 b5 	mcall	80003e1c <main+0x2f4>
	print_dbg("\x0C");
80003b4c:	fe fc 02 d4 	ld.w	r12,pc[724]
80003b50:	f0 1f 00 b5 	mcall	80003e24 <main+0x2fc>
	print_dbg("Columbus Board Tester\n\n\r");
80003b54:	fe fc 02 d4 	ld.w	r12,pc[724]
80003b58:	f0 1f 00 b3 	mcall	80003e24 <main+0x2fc>
	print_dbg("LED Test:\n\rAll LEDS on;");
80003b5c:	fe fc 02 d0 	ld.w	r12,pc[720]
80003b60:	f0 1f 00 b1 	mcall	80003e24 <main+0x2fc>
	LEDMOTOR_SET;
80003b64:	32 cc       	mov	r12,44
80003b66:	f0 1f 00 b3 	mcall	80003e30 <main+0x308>
	LED2_SET;
80003b6a:	33 1c       	mov	r12,49
80003b6c:	f0 1f 00 b1 	mcall	80003e30 <main+0x308>
	LED3_SET;
80003b70:	33 2c       	mov	r12,50
80003b72:	f0 1f 00 b0 	mcall	80003e30 <main+0x308>
	LED4_SET;
80003b76:	33 bc       	mov	r12,59
80003b78:	f0 1f 00 ae 	mcall	80003e30 <main+0x308>
	LED5_SET;
80003b7c:	33 cc       	mov	r12,60
80003b7e:	f0 1f 00 ad 	mcall	80003e30 <main+0x308>
	LED6_SET;
80003b82:	33 dc       	mov	r12,61
80003b84:	f0 1f 00 ab 	mcall	80003e30 <main+0x308>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b88:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b8c:	e0 6a 24 00 	mov	r10,9216
80003b90:	ea 1a 00 f4 	orh	r10,0xf4
80003b94:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003b98:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003b9c:	14 38       	cp.w	r8,r10
80003b9e:	e0 88 00 09 	brls	80003bb0 <main+0x88>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003ba2:	12 38       	cp.w	r8,r9
80003ba4:	fe 98 ff fa 	brls	80003b98 <main+0x70>
80003ba8:	12 3a       	cp.w	r10,r9
80003baa:	e0 83 00 f8 	brlo	80003d9a <main+0x272>
80003bae:	cf 5b       	rjmp	80003b98 <main+0x70>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003bb0:	12 38       	cp.w	r8,r9
80003bb2:	e0 8b 00 f4 	brhi	80003d9a <main+0x272>
80003bb6:	12 3a       	cp.w	r10,r9
80003bb8:	e0 83 00 f1 	brlo	80003d9a <main+0x272>
80003bbc:	ce eb       	rjmp	80003b98 <main+0x70>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003bbe:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003bc2:	14 38       	cp.w	r8,r10
80003bc4:	e0 88 00 09 	brls	80003bd6 <main+0xae>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003bc8:	12 38       	cp.w	r8,r9
80003bca:	fe 98 ff fa 	brls	80003bbe <main+0x96>
80003bce:	12 3a       	cp.w	r10,r9
80003bd0:	e0 83 01 03 	brlo	80003dd6 <main+0x2ae>
80003bd4:	cf 5b       	rjmp	80003bbe <main+0x96>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003bd6:	12 38       	cp.w	r8,r9
80003bd8:	e0 8b 00 ff 	brhi	80003dd6 <main+0x2ae>
80003bdc:	12 3a       	cp.w	r10,r9
80003bde:	e0 83 00 fc 	brlo	80003dd6 <main+0x2ae>
80003be2:	ce eb       	rjmp	80003bbe <main+0x96>
80003be4:	0c 95       	mov	r5,r6
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80003be6:	ea 03 02 48 	mul	r8,r5,r3
80003bea:	0e 38       	cp.w	r8,r7
80003bec:	c0 30       	breq	80003bf2 <main+0xca>
80003bee:	0a 96       	mov	r6,r5
80003bf0:	c0 c8       	rjmp	80003c08 <main+0xe0>
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			print_dbg("\rFilling SDRAM with test pattern: ");
80003bf2:	04 9c       	mov	r12,r2
80003bf4:	f0 1f 00 8c 	mcall	80003e24 <main+0x2fc>
			print_dbg_ulong(j++);
80003bf8:	ea c6 ff ff 	sub	r6,r5,-1
80003bfc:	0a 9c       	mov	r12,r5
80003bfe:	f0 1f 00 8e 	mcall	80003e34 <main+0x30c>
			print_dbg_char('%');
80003c02:	02 9c       	mov	r12,r1
80003c04:	f0 1f 00 8d 	mcall	80003e38 <main+0x310>
		}
		sdram[i] = i;
80003c08:	08 a7       	st.w	r4++,r7
	print_dbg("SDRAM initialized\r\n");
	// Determine the increment of SDRAM word address requiring an update of the
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
80003c0a:	2f f7       	sub	r7,-1
80003c0c:	fc 18 00 10 	movh	r8,0x10
80003c10:	10 37       	cp.w	r7,r8
80003c12:	ce 91       	brne	80003be4 <main+0xbc>
			print_dbg_char('%');
		}
		sdram[i] = i;
		
	}
	print_dbg("\rSDRAM filled with test pattern       \r\n");
80003c14:	fe fc 02 28 	ld.w	r12,pc[552]
80003c18:	f0 1f 00 83 	mcall	80003e24 <main+0x2fc>
80003c1c:	fc 15 c0 00 	movh	r5,0xc000
80003c20:	30 04       	mov	r4,0
80003c22:	08 96       	mov	r6,r4
80003c24:	08 97       	mov	r7,r4
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80003c26:	e0 62 28 f6 	mov	r2,10486
		{
			print_dbg("\rRecovering test pattern from SDRAM: ");
80003c2a:	fe f1 02 16 	ld.w	r1,pc[534]
			print_dbg_ulong(j++);
			print_dbg_char('%');
80003c2e:	32 50       	mov	r0,37
	print_dbg("\rSDRAM filled with test pattern       \r\n");
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80003c30:	ec 02 02 48 	mul	r8,r6,r2
80003c34:	0e 38       	cp.w	r8,r7
80003c36:	c0 30       	breq	80003c3c <main+0x114>
80003c38:	0c 93       	mov	r3,r6
80003c3a:	c0 c8       	rjmp	80003c52 <main+0x12a>
		{
			print_dbg("\rRecovering test pattern from SDRAM: ");
80003c3c:	02 9c       	mov	r12,r1
80003c3e:	f0 1f 00 7a 	mcall	80003e24 <main+0x2fc>
			print_dbg_ulong(j++);
80003c42:	ec c3 ff ff 	sub	r3,r6,-1
80003c46:	0c 9c       	mov	r12,r6
80003c48:	f0 1f 00 7b 	mcall	80003e34 <main+0x30c>
			print_dbg_char('%');
80003c4c:	00 9c       	mov	r12,r0
80003c4e:	f0 1f 00 7b 	mcall	80003e38 <main+0x310>
		}
		tmp = sdram[i];
80003c52:	6a 08       	ld.w	r8,r5[0x0]
		if (tmp != i)//failed
		{
			noErrors++;
80003c54:	0e 38       	cp.w	r8,r7
80003c56:	f7 b4 01 ff 	subne	r4,-1
		sdram[i] = i;
		
	}
	print_dbg("\rSDRAM filled with test pattern       \r\n");
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
80003c5a:	2f f7       	sub	r7,-1
80003c5c:	2f c5       	sub	r5,-4
80003c5e:	fc 18 00 10 	movh	r8,0x10
80003c62:	10 37       	cp.w	r7,r8
80003c64:	c0 30       	breq	80003c6a <main+0x142>
80003c66:	06 96       	mov	r6,r3
80003c68:	ce 4b       	rjmp	80003c30 <main+0x108>
		{
			noErrors++;
		}

	}
	print_dbg("\rSDRAM tested: ");
80003c6a:	4f 7c       	lddpc	r12,80003e44 <main+0x31c>
80003c6c:	f0 1f 00 6e 	mcall	80003e24 <main+0x2fc>
	print_dbg_ulong(noErrors);
80003c70:	08 9c       	mov	r12,r4
80003c72:	f0 1f 00 71 	mcall	80003e34 <main+0x30c>
	print_dbg(" corrupted word(s)       \r\n");
80003c76:	4f 5c       	lddpc	r12,80003e48 <main+0x320>
80003c78:	f0 1f 00 6b 	mcall	80003e24 <main+0x2fc>
	if (noErrors)
80003c7c:	58 04       	cp.w	r4,0
80003c7e:	c0 50       	breq	80003c88 <main+0x160>
	{
			LED3_SET;
80003c80:	33 2c       	mov	r12,50
80003c82:	f0 1f 00 6c 	mcall	80003e30 <main+0x308>
80003c86:	c0 48       	rjmp	80003c8e <main+0x166>
	}
	else
	{
			LED2_SET;
80003c88:	33 1c       	mov	r12,49
80003c8a:	f0 1f 00 6a 	mcall	80003e30 <main+0x308>
80003c8e:	fc 16 c0 00 	movh	r6,0xc000
80003c92:	30 07       	mov	r7,0
	
	
	for(i = 0; i < 10; i++)
	{
		sdram[i] = i;
		print_dbg("\n\rWritten data: ");
80003c94:	4e e5       	lddpc	r5,80003e4c <main+0x324>
		print_dbg_ulong(i);
		print_dbg("\n\rRead data: ");
80003c96:	4e f4       	lddpc	r4,80003e50 <main+0x328>
	}
	
	
	for(i = 0; i < 10; i++)
	{
		sdram[i] = i;
80003c98:	8d 07       	st.w	r6[0x0],r7
		print_dbg("\n\rWritten data: ");
80003c9a:	0a 9c       	mov	r12,r5
80003c9c:	f0 1f 00 62 	mcall	80003e24 <main+0x2fc>
		print_dbg_ulong(i);
80003ca0:	0e 9c       	mov	r12,r7
80003ca2:	f0 1f 00 65 	mcall	80003e34 <main+0x30c>
		print_dbg("\n\rRead data: ");
80003ca6:	08 9c       	mov	r12,r4
80003ca8:	f0 1f 00 5f 	mcall	80003e24 <main+0x2fc>
		print_dbg_ulong(sdram[i]);
80003cac:	0d 0c       	ld.w	r12,r6++
80003cae:	f0 1f 00 62 	mcall	80003e34 <main+0x30c>
	{
			LED2_SET;
	}
	
	
	for(i = 0; i < 10; i++)
80003cb2:	2f f7       	sub	r7,-1
80003cb4:	58 a7       	cp.w	r7,10
80003cb6:	cf 11       	brne	80003c98 <main+0x170>
		print_dbg_ulong(i);
		print_dbg("\n\rRead data: ");
		print_dbg_ulong(sdram[i]);
	}

	sd_mmc_resources_init();
80003cb8:	f0 1f 00 67 	mcall	80003e54 <main+0x32c>
	//sd_mmc_resources_init();
	print_dbg("\n\n\rSD Card Memory Test:\n\r");
80003cbc:	4e 7c       	lddpc	r12,80003e58 <main+0x330>
80003cbe:	f0 1f 00 5a 	mcall	80003e24 <main+0x2fc>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
80003cc2:	30 0c       	mov	r12,0
80003cc4:	f0 1f 00 66 	mcall	80003e5c <main+0x334>
80003cc8:	c1 41       	brne	80003cf0 <main+0x1c8>
	{
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
80003cca:	fa cb ff e0 	sub	r11,sp,-32
80003cce:	f0 1f 00 65 	mcall	80003e60 <main+0x338>
		print_dbg("OK:\t");
80003cd2:	4e 5c       	lddpc	r12,80003e64 <main+0x33c>
80003cd4:	f0 1f 00 54 	mcall	80003e24 <main+0x2fc>
		print_dbg_ulong((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
80003cd8:	40 8c       	lddsp	r12,sp[0x20]
80003cda:	2f fc       	sub	r12,-1
80003cdc:	ab 9c       	lsr	r12,0xb
80003cde:	f0 1f 00 56 	mcall	80003e34 <main+0x30c>
		print_dbg("MB\r\n");
80003ce2:	4e 2c       	lddpc	r12,80003e68 <main+0x340>
80003ce4:	f0 1f 00 50 	mcall	80003e24 <main+0x2fc>
		print_dbg("SD Card Okay.\n\r");
80003ce8:	4e 1c       	lddpc	r12,80003e6c <main+0x344>
80003cea:	f0 1f 00 4f 	mcall	80003e24 <main+0x2fc>
80003cee:	c0 48       	rjmp	80003cf6 <main+0x1ce>
	}
	else
	{
		// Display an error message
		print_dbg("Not initialized: Check if memory is ready...\r\n");
80003cf0:	4e 0c       	lddpc	r12,80003e70 <main+0x348>
80003cf2:	f0 1f 00 4d 	mcall	80003e24 <main+0x2fc>
	}


	print_dbg("\n\n\rTWI Test:\n\r");
80003cf6:	4e 0c       	lddpc	r12,80003e74 <main+0x34c>
80003cf8:	f0 1f 00 4b 	mcall	80003e24 <main+0x2fc>
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
80003cfc:	4d f8       	lddpc	r8,80003e78 <main+0x350>
80003cfe:	fa cc ff f0 	sub	r12,sp,-16
80003d02:	70 09       	ld.w	r9,r8[0x0]
80003d04:	99 09       	st.w	r12[0x0],r9
80003d06:	70 19       	ld.w	r9,r8[0x4]
80003d08:	99 19       	st.w	r12[0x4],r9
80003d0a:	70 29       	ld.w	r9,r8[0x8]
80003d0c:	99 29       	st.w	r12[0x8],r9
80003d0e:	70 38       	ld.w	r8,r8[0xc]
80003d10:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
80003d12:	4d b8       	lddpc	r8,80003e7c <main+0x354>
80003d14:	70 09       	ld.w	r9,r8[0x0]
80003d16:	50 09       	stdsp	sp[0x0],r9
80003d18:	70 19       	ld.w	r9,r8[0x4]
80003d1a:	50 19       	stdsp	sp[0x4],r9
80003d1c:	70 29       	ld.w	r9,r8[0x8]
80003d1e:	50 29       	stdsp	sp[0x8],r9
80003d20:	70 38       	ld.w	r8,r8[0xc]
80003d22:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
80003d24:	30 2b       	mov	r11,2
80003d26:	f0 1f 00 57 	mcall	80003e80 <main+0x358>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (TWIM, &TWIM_OPTIONS);
80003d2a:	1a 9b       	mov	r11,sp
80003d2c:	fe 7c 38 00 	mov	r12,-51200
80003d30:	f0 1f 00 55 	mcall	80003e84 <main+0x35c>
	}


	print_dbg("\n\n\rTWI Test:\n\r");
	twim_init();
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80003d34:	4d 5c       	lddpc	r12,80003e88 <main+0x360>
80003d36:	f0 1f 00 3c 	mcall	80003e24 <main+0x2fc>
80003d3a:	30 07       	mov	r7,0
80003d3c:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
80003d3e:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80003d40:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
80003d44:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
80003d46:	34 11       	mov	r1,65
	twim_init();
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
80003d48:	00 9c       	mov	r12,r0
80003d4a:	f0 1f 00 3b 	mcall	80003e34 <main+0x30c>
		print_dbg_char(' ');
80003d4e:	0a 9c       	mov	r12,r5
80003d50:	f0 1f 00 3a 	mcall	80003e38 <main+0x310>
80003d54:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80003d58:	ee c6 ff ff 	sub	r6,r7,-1
80003d5c:	0e 9b       	mov	r11,r7
80003d5e:	06 9c       	mov	r12,r3
80003d60:	f0 1f 00 4b 	mcall	80003e8c <main+0x364>
			if(status == STATUS_OK)
80003d64:	c0 51       	brne	80003d6e <main+0x246>
			{
				print_dbg_char('A');
80003d66:	02 9c       	mov	r12,r1
80003d68:	f0 1f 00 34 	mcall	80003e38 <main+0x310>
80003d6c:	c0 48       	rjmp	80003d74 <main+0x24c>
			}
			else
			{
				print_dbg_char('-');
80003d6e:	04 9c       	mov	r12,r2
80003d70:	f0 1f 00 32 	mcall	80003e38 <main+0x310>
			}
			print_dbg_char(' ');
80003d74:	0a 9c       	mov	r12,r5
80003d76:	f0 1f 00 31 	mcall	80003e38 <main+0x310>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
80003d7a:	08 36       	cp.w	r6,r4
80003d7c:	c0 30       	breq	80003d82 <main+0x25a>
80003d7e:	0c 97       	mov	r7,r6
80003d80:	ce cb       	rjmp	80003d58 <main+0x230>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
80003d82:	4c 4c       	lddpc	r12,80003e90 <main+0x368>
80003d84:	f0 1f 00 28 	mcall	80003e24 <main+0x2fc>

	print_dbg("\n\n\rTWI Test:\n\r");
	twim_init();
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80003d88:	2f f0       	sub	r0,-1
80003d8a:	58 80       	cp.w	r0,8
80003d8c:	c0 30       	breq	80003d92 <main+0x26a>
80003d8e:	0c 97       	mov	r7,r6
80003d90:	cd cb       	rjmp	80003d48 <main+0x220>
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
	}
	print_dbg("\n\rTest Complete!");
80003d92:	4c 1c       	lddpc	r12,80003e94 <main+0x36c>
80003d94:	f0 1f 00 24 	mcall	80003e24 <main+0x2fc>
80003d98:	c0 08       	rjmp	80003d98 <main+0x270>
	LED3_SET;
	LED4_SET;
	LED5_SET;
	LED6_SET;
	delay_s(1);
	print_dbg("\n\rAll LEDS off;");
80003d9a:	4c 0c       	lddpc	r12,80003e98 <main+0x370>
80003d9c:	f0 1f 00 22 	mcall	80003e24 <main+0x2fc>
	LEDMOTOR_CLR;
80003da0:	32 cc       	mov	r12,44
80003da2:	f0 1f 00 3f 	mcall	80003e9c <main+0x374>
	LED2_CLR;
80003da6:	33 1c       	mov	r12,49
80003da8:	f0 1f 00 3d 	mcall	80003e9c <main+0x374>
	LED3_CLR;
80003dac:	33 2c       	mov	r12,50
80003dae:	f0 1f 00 3c 	mcall	80003e9c <main+0x374>
	LED4_CLR;
80003db2:	33 bc       	mov	r12,59
80003db4:	f0 1f 00 3a 	mcall	80003e9c <main+0x374>
	LED5_CLR;
80003db8:	33 cc       	mov	r12,60
80003dba:	f0 1f 00 39 	mcall	80003e9c <main+0x374>
	LED6_CLR;
80003dbe:	33 dc       	mov	r12,61
80003dc0:	f0 1f 00 37 	mcall	80003e9c <main+0x374>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003dc4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003dc8:	e0 6a 24 00 	mov	r10,9216
80003dcc:	ea 1a 00 f4 	orh	r10,0xf4
80003dd0:	f0 0a 00 0a 	add	r10,r8,r10
80003dd4:	cf 5a       	rjmp	80003bbe <main+0x96>
	delay_s(1);
	
	print_dbg("\n\n\rSDRAM Test:");
80003dd6:	4b 3c       	lddpc	r12,80003ea0 <main+0x378>
80003dd8:	f0 1f 00 13 	mcall	80003e24 <main+0x2fc>
	sdram_size = SDRAM_SIZE >> 2;
	print_dbg("\n\rSDRAM size: ");
80003ddc:	4b 2c       	lddpc	r12,80003ea4 <main+0x37c>
80003dde:	f0 1f 00 12 	mcall	80003e24 <main+0x2fc>
	print_dbg_ulong(SDRAM_SIZE >> 20);
80003de2:	30 4c       	mov	r12,4
80003de4:	f0 1f 00 14 	mcall	80003e34 <main+0x30c>
	print_dbg(" MB\r\n");
80003de8:	4b 0c       	lddpc	r12,80003ea8 <main+0x380>
80003dea:	f0 1f 00 0f 	mcall	80003e24 <main+0x2fc>
	sdramc_init(FOSC0);
80003dee:	e0 6c 24 00 	mov	r12,9216
80003df2:	ea 1c 00 f4 	orh	r12,0xf4
80003df6:	f0 1f 00 2e 	mcall	80003eac <main+0x384>
	print_dbg("SDRAM initialized\r\n");
80003dfa:	4a ec       	lddpc	r12,80003eb0 <main+0x388>
80003dfc:	f0 1f 00 0a 	mcall	80003e24 <main+0x2fc>
80003e00:	fc 14 c0 00 	movh	r4,0xc000
80003e04:	30 05       	mov	r5,0
80003e06:	0a 97       	mov	r7,r5
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80003e08:	e0 63 28 f6 	mov	r3,10486
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			print_dbg("\rFilling SDRAM with test pattern: ");
80003e0c:	4a a2       	lddpc	r2,80003eb4 <main+0x38c>
			print_dbg_ulong(j++);
			print_dbg_char('%');
80003e0e:	32 51       	mov	r1,37
80003e10:	fe 9f fe eb 	bral	80003be6 <main+0xbe>
80003e14:	80 00       	ld.sh	r0,r0[0x0]
80003e16:	3a 74       	mov	r4,-89
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	30 e4       	mov	r4,14
80003e1c:	80 00       	ld.sh	r0,r0[0x0]
80003e1e:	3a 14       	mov	r4,-95
80003e20:	80 00       	ld.sh	r0,r0[0x0]
80003e22:	45 44       	lddsp	r4,sp[0x150]
80003e24:	80 00       	ld.sh	r0,r0[0x0]
80003e26:	39 c0       	mov	r0,-100
80003e28:	80 00       	ld.sh	r0,r0[0x0]
80003e2a:	45 48       	lddsp	r8,sp[0x150]
80003e2c:	80 00       	ld.sh	r0,r0[0x0]
80003e2e:	45 64       	lddsp	r4,sp[0x158]
80003e30:	80 00       	ld.sh	r0,r0[0x0]
80003e32:	2f d4       	sub	r4,-3
80003e34:	80 00       	ld.sh	r0,r0[0x0]
80003e36:	39 ac       	mov	r12,-102
80003e38:	80 00       	ld.sh	r0,r0[0x0]
80003e3a:	39 44       	mov	r4,-108
80003e3c:	80 00       	ld.sh	r0,r0[0x0]
80003e3e:	45 a0       	lddsp	r0,sp[0x168]
80003e40:	80 00       	ld.sh	r0,r0[0x0]
80003e42:	45 cc       	lddsp	r12,sp[0x170]
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	45 f4       	lddsp	r4,sp[0x17c]
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	46 04       	lddsp	r4,sp[0x180]
80003e4c:	80 00       	ld.sh	r0,r0[0x0]
80003e4e:	46 20       	lddsp	r0,sp[0x188]
80003e50:	80 00       	ld.sh	r0,r0[0x0]
80003e52:	46 34       	lddsp	r4,sp[0x18c]
80003e54:	80 00       	ld.sh	r0,r0[0x0]
80003e56:	3a a4       	mov	r4,-86
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	46 44       	lddsp	r4,sp[0x190]
80003e5c:	80 00       	ld.sh	r0,r0[0x0]
80003e5e:	3a 78       	mov	r8,-89
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3a 8c       	mov	r12,-88
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	46 60       	lddsp	r0,sp[0x198]
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	46 68       	lddsp	r8,sp[0x198]
80003e6c:	80 00       	ld.sh	r0,r0[0x0]
80003e6e:	46 70       	lddsp	r0,sp[0x19c]
80003e70:	80 00       	ld.sh	r0,r0[0x0]
80003e72:	46 80       	lddsp	r0,sp[0x1a0]
80003e74:	80 00       	ld.sh	r0,r0[0x0]
80003e76:	46 b0       	lddsp	r0,sp[0x1ac]
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	47 44       	lddsp	r4,sp[0x1d0]
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	45 34       	lddsp	r4,sp[0x14c]
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	2f a4       	sub	r4,-6
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	36 cc       	mov	r12,108
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	46 c0       	lddsp	r0,sp[0x1b0]
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	36 b0       	mov	r0,107
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	46 bc       	lddsp	r12,sp[0x1ac]
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	46 e4       	lddsp	r4,sp[0x1b8]
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	46 f8       	lddsp	r8,sp[0x1bc]
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	2f f0       	sub	r0,-1
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	47 08       	lddsp	r8,sp[0x1c0]
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	47 18       	lddsp	r8,sp[0x1c4]
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	47 28       	lddsp	r8,sp[0x1c8]
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	2c f4       	sub	r4,-49
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	47 30       	lddsp	r0,sp[0x1cc]
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	45 7c       	lddsp	r12,sp[0x15c]

Disassembly of section .exception:

80004000 <_evba>:
80004000:	c0 08       	rjmp	80004000 <_evba>
	...

80004004 <_handle_TLB_Multiple_Hit>:
80004004:	c0 08       	rjmp	80004004 <_handle_TLB_Multiple_Hit>
	...

80004008 <_handle_Bus_Error_Data_Fetch>:
80004008:	c0 08       	rjmp	80004008 <_handle_Bus_Error_Data_Fetch>
	...

8000400c <_handle_Bus_Error_Instruction_Fetch>:
8000400c:	c0 08       	rjmp	8000400c <_handle_Bus_Error_Instruction_Fetch>
	...

80004010 <_handle_NMI>:
80004010:	c0 08       	rjmp	80004010 <_handle_NMI>
	...

80004014 <_handle_Instruction_Address>:
80004014:	c0 08       	rjmp	80004014 <_handle_Instruction_Address>
	...

80004018 <_handle_ITLB_Protection>:
80004018:	c0 08       	rjmp	80004018 <_handle_ITLB_Protection>
	...

8000401c <_handle_Breakpoint>:
8000401c:	c0 08       	rjmp	8000401c <_handle_Breakpoint>
	...

80004020 <_handle_Illegal_Opcode>:
80004020:	c0 08       	rjmp	80004020 <_handle_Illegal_Opcode>
	...

80004024 <_handle_Unimplemented_Instruction>:
80004024:	c0 08       	rjmp	80004024 <_handle_Unimplemented_Instruction>
	...

80004028 <_handle_Privilege_Violation>:
80004028:	c0 08       	rjmp	80004028 <_handle_Privilege_Violation>
	...

8000402c <_handle_Floating_Point>:
8000402c:	c0 08       	rjmp	8000402c <_handle_Floating_Point>
	...

80004030 <_handle_Coprocessor_Absent>:
80004030:	c0 08       	rjmp	80004030 <_handle_Coprocessor_Absent>
	...

80004034 <_handle_Data_Address_Read>:
80004034:	c0 08       	rjmp	80004034 <_handle_Data_Address_Read>
	...

80004038 <_handle_Data_Address_Write>:
80004038:	c0 08       	rjmp	80004038 <_handle_Data_Address_Write>
	...

8000403c <_handle_DTLB_Protection_Read>:
8000403c:	c0 08       	rjmp	8000403c <_handle_DTLB_Protection_Read>
	...

80004040 <_handle_DTLB_Protection_Write>:
80004040:	c0 08       	rjmp	80004040 <_handle_DTLB_Protection_Write>
	...

80004044 <_handle_DTLB_Modified>:
80004044:	c0 08       	rjmp	80004044 <_handle_DTLB_Modified>
	...

80004050 <_handle_ITLB_Miss>:
80004050:	c0 08       	rjmp	80004050 <_handle_ITLB_Miss>
	...

80004060 <_handle_DTLB_Miss_Read>:
80004060:	c0 08       	rjmp	80004060 <_handle_DTLB_Miss_Read>
	...

80004070 <_handle_DTLB_Miss_Write>:
80004070:	c0 08       	rjmp	80004070 <_handle_DTLB_Miss_Write>
	...

80004100 <_handle_Supervisor_Call>:
80004100:	c0 08       	rjmp	80004100 <_handle_Supervisor_Call>
80004102:	d7 03       	nop

80004104 <_int0>:
80004104:	30 0c       	mov	r12,0
80004106:	fe b0 f7 c3 	rcall	8000308c <_get_interrupt_handler>
8000410a:	58 0c       	cp.w	r12,0
8000410c:	f8 0f 17 10 	movne	pc,r12
80004110:	d6 03       	rete

80004112 <_int1>:
80004112:	30 1c       	mov	r12,1
80004114:	fe b0 f7 bc 	rcall	8000308c <_get_interrupt_handler>
80004118:	58 0c       	cp.w	r12,0
8000411a:	f8 0f 17 10 	movne	pc,r12
8000411e:	d6 03       	rete

80004120 <_int2>:
80004120:	30 2c       	mov	r12,2
80004122:	fe b0 f7 b5 	rcall	8000308c <_get_interrupt_handler>
80004126:	58 0c       	cp.w	r12,0
80004128:	f8 0f 17 10 	movne	pc,r12
8000412c:	d6 03       	rete

8000412e <_int3>:
8000412e:	30 3c       	mov	r12,3
80004130:	fe b0 f7 ae 	rcall	8000308c <_get_interrupt_handler>
80004134:	58 0c       	cp.w	r12,0
80004136:	f8 0f 17 10 	movne	pc,r12
8000413a:	d6 03       	rete
8000413c:	d7 03       	nop
8000413e:	d7 03       	nop
80004140:	d7 03       	nop
80004142:	d7 03       	nop
80004144:	d7 03       	nop
80004146:	d7 03       	nop
80004148:	d7 03       	nop
8000414a:	d7 03       	nop
8000414c:	d7 03       	nop
8000414e:	d7 03       	nop
80004150:	d7 03       	nop
80004152:	d7 03       	nop
80004154:	d7 03       	nop
80004156:	d7 03       	nop
80004158:	d7 03       	nop
8000415a:	d7 03       	nop
8000415c:	d7 03       	nop
8000415e:	d7 03       	nop
80004160:	d7 03       	nop
80004162:	d7 03       	nop
80004164:	d7 03       	nop
80004166:	d7 03       	nop
80004168:	d7 03       	nop
8000416a:	d7 03       	nop
8000416c:	d7 03       	nop
8000416e:	d7 03       	nop
80004170:	d7 03       	nop
80004172:	d7 03       	nop
80004174:	d7 03       	nop
80004176:	d7 03       	nop
80004178:	d7 03       	nop
8000417a:	d7 03       	nop
8000417c:	d7 03       	nop
8000417e:	d7 03       	nop
80004180:	d7 03       	nop
80004182:	d7 03       	nop
80004184:	d7 03       	nop
80004186:	d7 03       	nop
80004188:	d7 03       	nop
8000418a:	d7 03       	nop
8000418c:	d7 03       	nop
8000418e:	d7 03       	nop
80004190:	d7 03       	nop
80004192:	d7 03       	nop
80004194:	d7 03       	nop
80004196:	d7 03       	nop
80004198:	d7 03       	nop
8000419a:	d7 03       	nop
8000419c:	d7 03       	nop
8000419e:	d7 03       	nop
800041a0:	d7 03       	nop
800041a2:	d7 03       	nop
800041a4:	d7 03       	nop
800041a6:	d7 03       	nop
800041a8:	d7 03       	nop
800041aa:	d7 03       	nop
800041ac:	d7 03       	nop
800041ae:	d7 03       	nop
800041b0:	d7 03       	nop
800041b2:	d7 03       	nop
800041b4:	d7 03       	nop
800041b6:	d7 03       	nop
800041b8:	d7 03       	nop
800041ba:	d7 03       	nop
800041bc:	d7 03       	nop
800041be:	d7 03       	nop
800041c0:	d7 03       	nop
800041c2:	d7 03       	nop
800041c4:	d7 03       	nop
800041c6:	d7 03       	nop
800041c8:	d7 03       	nop
800041ca:	d7 03       	nop
800041cc:	d7 03       	nop
800041ce:	d7 03       	nop
800041d0:	d7 03       	nop
800041d2:	d7 03       	nop
800041d4:	d7 03       	nop
800041d6:	d7 03       	nop
800041d8:	d7 03       	nop
800041da:	d7 03       	nop
800041dc:	d7 03       	nop
800041de:	d7 03       	nop
800041e0:	d7 03       	nop
800041e2:	d7 03       	nop
800041e4:	d7 03       	nop
800041e6:	d7 03       	nop
800041e8:	d7 03       	nop
800041ea:	d7 03       	nop
800041ec:	d7 03       	nop
800041ee:	d7 03       	nop
800041f0:	d7 03       	nop
800041f2:	d7 03       	nop
800041f4:	d7 03       	nop
800041f6:	d7 03       	nop
800041f8:	d7 03       	nop
800041fa:	d7 03       	nop
800041fc:	d7 03       	nop
800041fe:	d7 03       	nop
