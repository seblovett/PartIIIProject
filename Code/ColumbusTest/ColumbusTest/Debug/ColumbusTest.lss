
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000393c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005a00  80005a00  00005e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000002ec  80005c00  80005c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80005eec  80005eec  000062ec  2**0
                  ALLOC
  6 .data         00000008  00000004  80005ef0  00006404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000000c  80005ef8  0000640c  2**0
                  ALLOC
  8 .bss          00000728  00000010  80005ef8  00006410  2**2
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000640c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000ea0  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002cf2  00000000  00000000  000072dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000152d6  00000000  00000000  00009fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000274f  00000000  00000000  0001f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cb5c  00000000  00000000  000219f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029e4  00000000  00000000  0002e550  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005fae  00000000  00000000  00030f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00007188  00000000  00000000  00036ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 01753891  00000000  00000000  0003e06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00000e78  00000000  00000000  017918fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ca 98 	sub	pc,pc,-13672

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	04 10       	sub	r0,r2
8000210c:	00 00       	add	r0,r0
8000210e:	04 0e       	add	lr,r2
80002110:	00 00       	add	r0,r0
80002112:	03 fc       	ld.ub	r12,r1[0x7]
80002114:	00 00       	add	r0,r0
80002116:	04 04       	add	r4,r2
80002118:	00 00       	add	r0,r0
8000211a:	04 08       	add	r8,r2
8000211c:	00 00       	add	r0,r0
8000211e:	04 06       	add	r6,r2

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	32 26       	mov	r6,34
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	32 42       	mov	r2,36

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	30 f6       	mov	r6,15
800021a4:	00 00       	add	r0,r0
800021a6:	04 20       	rsub	r0,r2
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	31 42       	mov	r2,20
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	00 10       	sub	r0,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	00 10       	sub	r0,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	32 26       	mov	r6,34
800022ac:	00 00       	add	r0,r0
800022ae:	04 20       	rsub	r0,r2
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	30 f6       	mov	r6,15
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	04 20       	rsub	r0,r2
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	31 42       	mov	r2,20

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	00 28       	rsub	r8,r0
80002364:	00 00       	add	r0,r0
80002366:	04 20       	rsub	r0,r2
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	32 26       	mov	r6,34
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	30 f6       	mov	r6,15
800024a0:	00 00       	add	r0,r0
800024a2:	04 0e       	add	lr,r2
800024a4:	00 00       	add	r0,r0
800024a6:	00 10       	sub	r0,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	04 20       	rsub	r0,r2
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	31 42       	mov	r2,20
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	32 26       	mov	r6,34
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	30 f6       	mov	r6,15
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	04 20       	rsub	r0,r2
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	31 42       	mov	r2,20
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	30 f6       	mov	r6,15
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	04 20       	rsub	r0,r2
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	31 42       	mov	r2,20
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	30 f6       	mov	r6,15
80002730:	00 00       	add	r0,r0
80002732:	04 0e       	add	lr,r2
80002734:	00 00       	add	r0,r0
80002736:	00 10       	sub	r0,r0
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	04 20       	rsub	r0,r2
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	31 42       	mov	r2,20
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	32 26       	mov	r6,34
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	32 42       	mov	r2,36

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	30 f6       	mov	r6,15
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	04 20       	rsub	r0,r2
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	31 42       	mov	r2,20
80002834:	00 00       	add	r0,r0
80002836:	00 28       	rsub	r8,r0
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	32 26       	mov	r6,34
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	32 42       	mov	r2,36

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	00 14       	sub	r4,r0
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 24       	rsub	r4,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	31 68       	mov	r8,22
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	30 f6       	mov	r6,15
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	32 26       	mov	r6,34
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	31 42       	mov	r2,20
80002ac4:	00 00       	add	r0,r0
80002ac6:	00 28       	rsub	r8,r0
80002ac8:	00 00       	add	r0,r0
80002aca:	04 0e       	add	lr,r2
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	04 20       	rsub	r0,r2
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	04 10       	sub	r0,r2
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	00 28       	rsub	r8,r0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	00 24       	rsub	r4,r0
80002b3c:	00 00       	add	r0,r0
80002b3e:	00 14       	sub	r4,r0
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	00 28       	rsub	r8,r0
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	00 28       	rsub	r8,r0
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	00 28       	rsub	r8,r0
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	00 28       	rsub	r8,r0
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	04 08       	add	r8,r2

80002cd0 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002cd0:	fe 68 00 00 	mov	r8,-131072
80002cd4:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002cd6:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002cda:	91 09       	st.w	r8[0x0],r9
}
80002cdc:	5e fc       	retal	r12

80002cde <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002cde:	fe 68 00 00 	mov	r8,-131072
80002ce2:	70 2c       	ld.w	r12,r8[0x8]
}
80002ce4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002ce8:	5e fc       	retal	r12
80002cea:	d7 03       	nop

80002cec <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80002cec:	d4 01       	pushm	lr
	while (!flashc_is_ready());
80002cee:	f0 1f 00 03 	mcall	80002cf8 <flashc_default_wait_until_ready+0xc>
80002cf2:	cf e0       	breq	80002cee <flashc_default_wait_until_ready+0x2>
}
80002cf4:	d8 02       	popm	pc
80002cf6:	00 00       	add	r0,r0
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	2c de       	sub	lr,-51

80002cfc <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002cfc:	eb cd 40 c0 	pushm	r6-r7,lr
80002d00:	18 96       	mov	r6,r12
80002d02:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002d04:	48 e8       	lddpc	r8,80002d3c <flashc_issue_command+0x40>
80002d06:	70 08       	ld.w	r8,r8[0x0]
80002d08:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80002d0a:	fe 68 00 00 	mov	r8,-131072
80002d0e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002d10:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002d14:	58 07       	cp.w	r7,0
80002d16:	c0 35       	brlt	80002d1c <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80002d18:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002d1c:	3a 59       	mov	r9,-91
80002d1e:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002d22:	fe 69 00 00 	mov	r9,-131072
80002d26:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80002d28:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80002d2a:	e2 19 00 0c 	andl	r9,0xc,COH
80002d2e:	48 58       	lddpc	r8,80002d40 <flashc_issue_command+0x44>
80002d30:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80002d32:	48 38       	lddpc	r8,80002d3c <flashc_issue_command+0x40>
80002d34:	70 08       	ld.w	r8,r8[0x0]
80002d36:	5d 18       	icall	r8
}
80002d38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d3c:	00 00       	add	r0,r0
80002d3e:	00 08       	add	r8,r0
80002d40:	00 00       	add	r0,r0
80002d42:	00 2c       	rsub	r12,r0

80002d44 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002d44:	eb cd 40 80 	pushm	r7,lr
80002d48:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
80002d4a:	e0 68 8a 40 	mov	r8,35392
80002d4e:	ea 18 01 f7 	orh	r8,0x1f7
80002d52:	10 3c       	cp.w	r12,r8
80002d54:	e0 88 00 18 	brls	80002d84 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
80002d58:	30 1c       	mov	r12,1
80002d5a:	f0 1f 00 10 	mcall	80002d98 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
80002d5e:	e0 68 14 80 	mov	r8,5248
80002d62:	ea 18 03 ef 	orh	r8,0x3ef
80002d66:	10 37       	cp.w	r7,r8
80002d68:	e0 8b 00 08 	brhi	80002d78 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002d6c:	3f fb       	mov	r11,-1
80002d6e:	31 1c       	mov	r12,17
80002d70:	f0 1f 00 0b 	mcall	80002d9c <flashc_set_flash_waitstate_and_readmode+0x58>
80002d74:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80002d78:	3f fb       	mov	r11,-1
80002d7a:	31 0c       	mov	r12,16
80002d7c:	f0 1f 00 08 	mcall	80002d9c <flashc_set_flash_waitstate_and_readmode+0x58>
80002d80:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80002d84:	30 0c       	mov	r12,0
80002d86:	f0 1f 00 05 	mcall	80002d98 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002d8a:	3f fb       	mov	r11,-1
80002d8c:	31 1c       	mov	r12,17
80002d8e:	f0 1f 00 04 	mcall	80002d9c <flashc_set_flash_waitstate_and_readmode+0x58>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c fc       	sub	r12,-49

80002da0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002da0:	f8 08 16 05 	lsr	r8,r12,0x5
80002da4:	a9 78       	lsl	r8,0x9
80002da6:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002daa:	58 7b       	cp.w	r11,7
80002dac:	e0 8b 00 05 	brhi	80002db6 <gpio_enable_module_pin+0x16>
80002db0:	4a 09       	lddpc	r9,80002e30 <gpio_enable_module_pin+0x90>
80002db2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002db6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002db8:	30 19       	mov	r9,1
80002dba:	f2 0c 09 49 	lsl	r9,r9,r12
80002dbe:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dc0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dc2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dc4:	c3 18       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002dc6:	30 19       	mov	r9,1
80002dc8:	f2 0c 09 49 	lsl	r9,r9,r12
80002dcc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dce:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dd0:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dd2:	c2 a8       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002dd4:	30 19       	mov	r9,1
80002dd6:	f2 0c 09 49 	lsl	r9,r9,r12
80002dda:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002ddc:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dde:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002de0:	c2 38       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002de2:	30 19       	mov	r9,1
80002de4:	f2 0c 09 49 	lsl	r9,r9,r12
80002de8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dea:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dec:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dee:	c1 c8       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002df0:	30 19       	mov	r9,1
80002df2:	f2 0c 09 49 	lsl	r9,r9,r12
80002df6:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002df8:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002dfa:	91 d9       	st.w	r8[0x34],r9
		break;
80002dfc:	c1 58       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002dfe:	30 19       	mov	r9,1
80002e00:	f2 0c 09 49 	lsl	r9,r9,r12
80002e04:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e06:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e08:	91 d9       	st.w	r8[0x34],r9
		break;
80002e0a:	c0 e8       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e0c:	30 19       	mov	r9,1
80002e0e:	f2 0c 09 49 	lsl	r9,r9,r12
80002e12:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e14:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e16:	91 d9       	st.w	r8[0x34],r9
		break;
80002e18:	c0 78       	rjmp	80002e26 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e1a:	30 19       	mov	r9,1
80002e1c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e20:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e22:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e24:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002e26:	30 19       	mov	r9,1
80002e28:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e2c:	91 2c       	st.w	r8[0x8],r12
80002e2e:	5e fd       	retal	0
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	5c 00       	acr	r0

80002e34 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002e34:	d4 21       	pushm	r4-r7,lr
80002e36:	18 97       	mov	r7,r12
80002e38:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002e3a:	58 0b       	cp.w	r11,0
80002e3c:	c0 31       	brne	80002e42 <gpio_enable_module+0xe>
80002e3e:	30 05       	mov	r5,0
80002e40:	c0 d8       	rjmp	80002e5a <gpio_enable_module+0x26>
80002e42:	30 05       	mov	r5,0
80002e44:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002e46:	6e 1b       	ld.w	r11,r7[0x4]
80002e48:	6e 0c       	ld.w	r12,r7[0x0]
80002e4a:	f0 1f 00 06 	mcall	80002e60 <gpio_enable_module+0x2c>
80002e4e:	18 45       	or	r5,r12
		gpiomap++;
80002e50:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002e52:	2f f6       	sub	r6,-1
80002e54:	0c 34       	cp.w	r4,r6
80002e56:	fe 9b ff f8 	brhi	80002e46 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002e5a:	0a 9c       	mov	r12,r5
80002e5c:	d8 22       	popm	r4-r7,pc
80002e5e:	00 00       	add	r0,r0
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	2d a0       	sub	r0,-38

80002e64 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002e64:	fe 78 00 00 	mov	r8,-65536
80002e68:	e0 69 00 83 	mov	r9,131
80002e6c:	f2 0c 01 0c 	sub	r12,r9,r12
80002e70:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002e74:	f2 ca ff c0 	sub	r10,r9,-64
80002e78:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e7c:	58 08       	cp.w	r8,0
80002e7e:	c0 21       	brne	80002e82 <_get_interrupt_handler+0x1e>
80002e80:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002e82:	f0 08 12 00 	clz	r8,r8
80002e86:	48 5a       	lddpc	r10,80002e98 <_get_interrupt_handler+0x34>
80002e88:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002e8c:	f0 08 11 1f 	rsub	r8,r8,31
80002e90:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e92:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002e96:	5e fc       	retal	r12
80002e98:	80 00       	ld.sh	r0,r0[0x0]
80002e9a:	5c 20       	cpc	r0

80002e9c <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80002e9c:	e1 b9 00 00 	mfsr	r9,0x0
80002ea0:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
80002ea2:	fe 78 04 00 	mov	r8,-64512
80002ea6:	fc 1a aa 00 	movh	r10,0xaa00
80002eaa:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80002eae:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80002eb0:	12 98       	mov	r8,r9
80002eb2:	e6 18 00 01 	andh	r8,0x1,COH
80002eb6:	c0 21       	brne	80002eba <pm_set_mclk_source+0x1e>
80002eb8:	d5 03       	csrf	0x10

  return PASS;
}
80002eba:	5e fd       	retal	0

80002ebc <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ec0:	16 97       	mov	r7,r11
80002ec2:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
80002ec4:	58 0c       	cp.w	r12,0
80002ec6:	c0 50       	breq	80002ed0 <pcl_switch_to_osc+0x14>
80002ec8:	fe 7c d8 f0 	mov	r12,-10000
80002ecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80002ed0:	30 0c       	mov	r12,0
80002ed2:	f0 1f 00 08 	mcall	80002ef0 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
80002ed6:	30 1a       	mov	r10,1
80002ed8:	0c 9b       	mov	r11,r6
80002eda:	30 0c       	mov	r12,0
80002edc:	f0 1f 00 06 	mcall	80002ef4 <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80002ee0:	0e 9c       	mov	r12,r7
80002ee2:	f0 1f 00 06 	mcall	80002ef8 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
80002ee6:	30 1c       	mov	r12,1
80002ee8:	f0 1f 00 05 	mcall	80002efc <pcl_switch_to_osc+0x40>
80002eec:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	2f 90       	sub	r0,-7
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	2f 1c       	sub	r12,-15
80002ef8:	80 00       	ld.sh	r0,r0[0x0]
80002efa:	2d 44       	sub	r4,-44
80002efc:	80 00       	ld.sh	r0,r0[0x0]
80002efe:	2e 9c       	sub	r12,-23

80002f00 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80002f00:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002f04:	fe 7a 08 00 	mov	r10,-63488
80002f08:	c0 48       	rjmp	80002f10 <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
80002f0a:	20 18       	sub	r8,1
80002f0c:	c0 21       	brne	80002f10 <scif_pclksr_statushigh_wait+0x10>
80002f0e:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002f10:	74 59       	ld.w	r9,r10[0x14]
80002f12:	f9 e9 00 09 	and	r9,r12,r9
80002f16:	cf a0       	breq	80002f0a <scif_pclksr_statushigh_wait+0xa>
80002f18:	5e fd       	retal	0
80002f1a:	d7 03       	nop

80002f1c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80002f1c:	eb cd 40 80 	pushm	r7,lr
80002f20:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80002f22:	fa c8 ff f8 	sub	r8,sp,-8
80002f26:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
80002f2a:	fe 78 08 00 	mov	r8,-63488
80002f2e:	f8 c9 ff f7 	sub	r9,r12,-9
80002f32:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80002f36:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80002f3a:	30 1b       	mov	r11,1
80002f3c:	ef db d2 01 	bfins	r7,r11,0x10,0x1
80002f40:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
80002f44:	e1 bb 00 00 	mfsr	r11,0x0
80002f48:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80002f4a:	f2 07 15 02 	lsl	r7,r9,0x2
80002f4e:	ea 17 aa 00 	orh	r7,0xaa00
80002f52:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80002f54:	fc fe ff f8 	ld.w	lr,lr[-8]
80002f58:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80002f5c:	16 98       	mov	r8,r11
80002f5e:	e6 18 00 01 	andh	r8,0x1,COH
80002f62:	c0 21       	brne	80002f66 <scif_enable_osc+0x4a>
80002f64:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80002f66:	58 0a       	cp.w	r10,0
80002f68:	c0 e0       	breq	80002f84 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
80002f6a:	58 0c       	cp.w	r12,0
80002f6c:	c0 61       	brne	80002f78 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80002f6e:	30 1c       	mov	r12,1
80002f70:	f0 1f 00 07 	mcall	80002f8c <scif_enable_osc+0x70>
80002f74:	c0 80       	breq	80002f84 <scif_enable_osc+0x68>
80002f76:	c0 58       	rjmp	80002f80 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80002f78:	30 2c       	mov	r12,2
80002f7a:	f0 1f 00 05 	mcall	80002f8c <scif_enable_osc+0x70>
80002f7e:	c0 30       	breq	80002f84 <scif_enable_osc+0x68>
80002f80:	3f fc       	mov	r12,-1
80002f82:	c0 28       	rjmp	80002f86 <scif_enable_osc+0x6a>
80002f84:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80002f86:	2f ed       	sub	sp,-8
80002f88:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	2f 00       	sub	r0,-16

80002f90 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
80002f90:	58 0c       	cp.w	r12,0
80002f92:	c3 41       	brne	80002ffa <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80002f94:	fe 78 08 00 	mov	r8,-63488
80002f98:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002f9a:	e0 69 84 7f 	mov	r9,33919
80002f9e:	ea 19 00 1e 	orh	r9,0x1e
80002fa2:	12 3b       	cp.w	r11,r9
80002fa4:	e0 8b 00 04 	brhi	80002fac <scif_configure_osc_crystalmode+0x1c>
80002fa8:	30 0b       	mov	r11,0
80002faa:	c1 38       	rjmp	80002fd0 <scif_configure_osc_crystalmode+0x40>
80002fac:	e0 69 96 7f 	mov	r9,38527
80002fb0:	ea 19 00 98 	orh	r9,0x98
80002fb4:	12 3b       	cp.w	r11,r9
80002fb6:	e0 8b 00 04 	brhi	80002fbe <scif_configure_osc_crystalmode+0x2e>
80002fba:	30 1b       	mov	r11,1
80002fbc:	c0 a8       	rjmp	80002fd0 <scif_configure_osc_crystalmode+0x40>
80002fbe:	e0 69 24 00 	mov	r9,9216
80002fc2:	ea 19 00 f4 	orh	r9,0xf4
80002fc6:	12 3b       	cp.w	r11,r9
80002fc8:	f9 bb 03 02 	movlo	r11,2
80002fcc:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80002fd0:	30 19       	mov	r9,1
80002fd2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002fd6:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80002fda:	e1 ba 00 00 	mfsr	r10,0x0
80002fde:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80002fe0:	fe 79 08 00 	mov	r9,-63488
80002fe4:	32 4b       	mov	r11,36
80002fe6:	ea 1b aa 00 	orh	r11,0xaa00
80002fea:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80002fec:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80002fee:	14 98       	mov	r8,r10
80002ff0:	e6 18 00 01 	andh	r8,0x1,COH
80002ff4:	c3 51       	brne	8000305e <scif_configure_osc_crystalmode+0xce>
80002ff6:	d5 03       	csrf	0x10
80002ff8:	c3 38       	rjmp	8000305e <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
80002ffa:	fe 78 08 00 	mov	r8,-63488
80002ffe:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80003000:	e0 69 84 7f 	mov	r9,33919
80003004:	ea 19 00 1e 	orh	r9,0x1e
80003008:	12 3b       	cp.w	r11,r9
8000300a:	e0 8b 00 04 	brhi	80003012 <scif_configure_osc_crystalmode+0x82>
8000300e:	30 0b       	mov	r11,0
80003010:	c1 38       	rjmp	80003036 <scif_configure_osc_crystalmode+0xa6>
80003012:	e0 69 96 7f 	mov	r9,38527
80003016:	ea 19 00 98 	orh	r9,0x98
8000301a:	12 3b       	cp.w	r11,r9
8000301c:	e0 8b 00 04 	brhi	80003024 <scif_configure_osc_crystalmode+0x94>
80003020:	30 1b       	mov	r11,1
80003022:	c0 a8       	rjmp	80003036 <scif_configure_osc_crystalmode+0xa6>
80003024:	e0 69 24 00 	mov	r9,9216
80003028:	ea 19 00 f4 	orh	r9,0xf4
8000302c:	12 3b       	cp.w	r11,r9
8000302e:	f9 bb 03 02 	movlo	r11,2
80003032:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80003036:	30 19       	mov	r9,1
80003038:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
8000303c:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80003040:	e1 ba 00 00 	mfsr	r10,0x0
80003044:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
80003046:	fe 79 08 00 	mov	r9,-63488
8000304a:	32 8b       	mov	r11,40
8000304c:	ea 1b aa 00 	orh	r11,0xaa00
80003050:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80003052:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80003054:	14 98       	mov	r8,r10
80003056:	e6 18 00 01 	andh	r8,0x1,COH
8000305a:	c0 21       	brne	8000305e <scif_configure_osc_crystalmode+0xce>
8000305c:	d5 03       	csrf	0x10
  }

  return PASS;
}
8000305e:	5e fd       	retal	0

80003060 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003060:	f8 c8 00 01 	sub	r8,r12,1
80003064:	f0 0b 00 0b 	add	r11,r8,r11
80003068:	f6 0c 0d 0a 	divu	r10,r11,r12
8000306c:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000306e:	f4 c8 00 01 	sub	r8,r10,1
80003072:	e0 48 00 fe 	cp.w	r8,254
80003076:	e0 88 00 03 	brls	8000307c <getBaudDiv+0x1c>
8000307a:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000307c:	5c 8c       	casts.h	r12
}
8000307e:	5e fc       	retal	r12

80003080 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003080:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003084:	30 18       	mov	r8,1
80003086:	f0 09 18 00 	cp.b	r9,r8
8000308a:	e0 88 00 04 	brls	80003092 <spi_initMaster+0x12>
8000308e:	30 2c       	mov	r12,2
80003090:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003092:	e0 68 00 80 	mov	r8,128
80003096:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003098:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
8000309a:	30 19       	mov	r9,1
8000309c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800030a0:	f7 39 00 0d 	ld.ub	r9,r11[13]
800030a4:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800030a8:	30 09       	mov	r9,0
800030aa:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800030ae:	30 fa       	mov	r10,15
800030b0:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800030b4:	99 18       	st.w	r12[0x4],r8
800030b6:	5e f9       	retal	r9

800030b8 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800030b8:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800030bc:	30 1e       	mov	lr,1
800030be:	f6 0e 18 00 	cp.b	lr,r11
800030c2:	f9 be 02 00 	movhs	lr,0
800030c6:	30 18       	mov	r8,1
800030c8:	f4 08 18 00 	cp.b	r8,r10
800030cc:	f9 b8 02 00 	movhs	r8,0
800030d0:	fd e8 10 08 	or	r8,lr,r8
800030d4:	30 07       	mov	r7,0
800030d6:	ee 08 18 00 	cp.b	r8,r7
800030da:	c0 40       	breq	800030e2 <spi_selectionMode+0x2a>
800030dc:	30 2c       	mov	r12,2
800030de:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800030e2:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800030e4:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800030e8:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800030ec:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800030f0:	99 18       	st.w	r12[0x4],r8
800030f2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

800030f6 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800030f6:	78 18       	ld.w	r8,r12[0x4]
800030f8:	ea 18 00 0f 	orh	r8,0xf
800030fc:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800030fe:	78 18       	ld.w	r8,r12[0x4]
80003100:	e2 18 00 04 	andl	r8,0x4,COH
80003104:	c0 f0       	breq	80003122 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003106:	30 e8       	mov	r8,14
80003108:	f0 0b 18 00 	cp.b	r11,r8
8000310c:	e0 8b 00 19 	brhi	8000313e <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003110:	78 18       	ld.w	r8,r12[0x4]
80003112:	b1 6b       	lsl	r11,0x10
80003114:	ea 1b ff f0 	orh	r11,0xfff0
80003118:	e8 1b ff ff 	orl	r11,0xffff
8000311c:	10 6b       	and	r11,r8
8000311e:	99 1b       	st.w	r12[0x4],r11
80003120:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003122:	30 38       	mov	r8,3
80003124:	f0 0b 18 00 	cp.b	r11,r8
80003128:	e0 8b 00 0b 	brhi	8000313e <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000312c:	78 18       	ld.w	r8,r12[0x4]
8000312e:	2f 0b       	sub	r11,-16
80003130:	30 19       	mov	r9,1
80003132:	f2 0b 09 4b 	lsl	r11,r9,r11
80003136:	5c db       	com	r11
80003138:	10 6b       	and	r11,r8
8000313a:	99 1b       	st.w	r12[0x4],r11
8000313c:	5e fd       	retal	0
8000313e:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003140:	5e fc       	retal	r12

80003142 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003142:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003146:	c0 58       	rjmp	80003150 <spi_unselectChip+0xe>
		if (!timeout--) {
80003148:	58 08       	cp.w	r8,0
8000314a:	c0 21       	brne	8000314e <spi_unselectChip+0xc>
8000314c:	5e ff       	retal	1
8000314e:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003150:	78 49       	ld.w	r9,r12[0x10]
80003152:	e2 19 02 00 	andl	r9,0x200,COH
80003156:	cf 90       	breq	80003148 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003158:	78 18       	ld.w	r8,r12[0x4]
8000315a:	ea 18 00 0f 	orh	r8,0xf
8000315e:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003160:	fc 18 01 00 	movh	r8,0x100
80003164:	99 08       	st.w	r12[0x0],r8
80003166:	5e fd       	retal	0

80003168 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003168:	eb cd 40 f8 	pushm	r3-r7,lr
8000316c:	18 95       	mov	r5,r12
8000316e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003170:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003174:	30 38       	mov	r8,3
80003176:	f0 06 18 00 	cp.b	r6,r8
8000317a:	e0 8b 00 4d 	brhi	80003214 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000317e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003182:	30 18       	mov	r8,1
80003184:	f0 04 18 00 	cp.b	r4,r8
80003188:	e0 8b 00 46 	brhi	80003214 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
8000318c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003190:	30 78       	mov	r8,7
80003192:	f0 03 18 00 	cp.b	r3,r8
80003196:	e0 88 00 3f 	brls	80003214 <spi_setupChipReg+0xac>
8000319a:	31 08       	mov	r8,16
8000319c:	f0 03 18 00 	cp.b	r3,r8
800031a0:	e0 8b 00 3a 	brhi	80003214 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800031a4:	14 9b       	mov	r11,r10
800031a6:	6e 1c       	ld.w	r12,r7[0x4]
800031a8:	f0 1f 00 1d 	mcall	8000321c <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800031ac:	c3 45       	brlt	80003214 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800031ae:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800031b0:	ec 09 16 01 	lsr	r9,r6,0x1
800031b4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800031b8:	ec 16 00 01 	eorl	r6,0x1
800031bc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800031c0:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800031c4:	20 83       	sub	r3,8
800031c6:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800031ca:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800031ce:	ef 39 00 09 	ld.ub	r9,r7[9]
800031d2:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800031d6:	ef 39 00 0a 	ld.ub	r9,r7[10]
800031da:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800031de:	0f 89       	ld.ub	r9,r7[0x0]
800031e0:	30 1a       	mov	r10,1
800031e2:	f4 09 18 00 	cp.b	r9,r10
800031e6:	c0 e0       	breq	80003202 <spi_setupChipReg+0x9a>
800031e8:	c0 a3       	brcs	800031fc <spi_setupChipReg+0x94>
800031ea:	30 2a       	mov	r10,2
800031ec:	f4 09 18 00 	cp.b	r9,r10
800031f0:	c0 c0       	breq	80003208 <spi_setupChipReg+0xa0>
800031f2:	30 3a       	mov	r10,3
800031f4:	f4 09 18 00 	cp.b	r9,r10
800031f8:	c0 e1       	brne	80003214 <spi_setupChipReg+0xac>
800031fa:	c0 a8       	rjmp	8000320e <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800031fc:	8b c8       	st.w	r5[0x30],r8
800031fe:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003202:	8b d8       	st.w	r5[0x34],r8
80003204:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003208:	8b e8       	st.w	r5[0x38],r8
8000320a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000320e:	8b f8       	st.w	r5[0x3c],r8
80003210:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003214:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003216:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000321a:	00 00       	add	r0,r0
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	30 60       	mov	r0,6

80003220 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003220:	30 18       	mov	r8,1
80003222:	99 08       	st.w	r12[0x0],r8
}
80003224:	5e fc       	retal	r12

80003226 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003226:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000322a:	c0 58       	rjmp	80003234 <spi_write+0xe>
		if (!timeout--) {
8000322c:	58 08       	cp.w	r8,0
8000322e:	c0 21       	brne	80003232 <spi_write+0xc>
80003230:	5e ff       	retal	1
80003232:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003234:	78 49       	ld.w	r9,r12[0x10]
80003236:	e2 19 00 02 	andl	r9,0x2,COH
8000323a:	cf 90       	breq	8000322c <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000323c:	5c 7b       	castu.h	r11
8000323e:	99 3b       	st.w	r12[0xc],r11
80003240:	5e fd       	retal	0

80003242 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003242:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003246:	c0 58       	rjmp	80003250 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003248:	58 08       	cp.w	r8,0
8000324a:	c0 21       	brne	8000324e <spi_read+0xc>
8000324c:	5e ff       	retal	1
8000324e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003250:	78 49       	ld.w	r9,r12[0x10]
80003252:	e2 19 02 01 	andl	r9,0x201,COH
80003256:	e0 49 02 01 	cp.w	r9,513
8000325a:	cf 71       	brne	80003248 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000325c:	78 28       	ld.w	r8,r12[0x8]
8000325e:	b6 08       	st.h	r11[0x0],r8
80003260:	5e fd       	retal	0

80003262 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003262:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003264:	f6 08 15 04 	lsl	r8,r11,0x4
80003268:	14 38       	cp.w	r8,r10
8000326a:	f9 b8 08 10 	movls	r8,16
8000326e:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003272:	f0 0b 02 4b 	mul	r11,r8,r11
80003276:	f6 09 16 01 	lsr	r9,r11,0x1
8000327a:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
8000327e:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003282:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003286:	f2 cb 00 01 	sub	r11,r9,1
8000328a:	e0 4b ff fe 	cp.w	r11,65534
8000328e:	e0 88 00 03 	brls	80003294 <usart_set_async_baudrate+0x32>
80003292:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003294:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003296:	e8 6e 00 00 	mov	lr,524288
8000329a:	59 08       	cp.w	r8,16
8000329c:	fc 08 17 10 	movne	r8,lr
800032a0:	f9 b8 00 00 	moveq	r8,0
800032a4:	e4 1b ff f7 	andh	r11,0xfff7
800032a8:	e0 1b fe cf 	andl	r11,0xfecf
800032ac:	16 48       	or	r8,r11
800032ae:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800032b0:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800032b4:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800032b8:	99 89       	st.w	r12[0x20],r9
800032ba:	d8 0a       	popm	pc,r12=0

800032bc <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800032bc:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800032be:	e2 18 00 02 	andl	r8,0x2,COH
800032c2:	c0 31       	brne	800032c8 <usart_write_char+0xc>
800032c4:	30 2c       	mov	r12,2
800032c6:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800032c8:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800032cc:	99 7b       	st.w	r12[0x1c],r11
800032ce:	5e fd       	retal	0

800032d0 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800032d0:	eb cd 40 e0 	pushm	r5-r7,lr
800032d4:	18 96       	mov	r6,r12
800032d6:	16 95       	mov	r5,r11
800032d8:	e0 67 27 0f 	mov	r7,9999
800032dc:	c0 68       	rjmp	800032e8 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800032de:	58 07       	cp.w	r7,0
800032e0:	c0 31       	brne	800032e6 <usart_putchar+0x16>
800032e2:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800032e6:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800032e8:	0a 9b       	mov	r11,r5
800032ea:	0c 9c       	mov	r12,r6
800032ec:	f0 1f 00 03 	mcall	800032f8 <usart_putchar+0x28>
800032f0:	cf 71       	brne	800032de <usart_putchar+0xe>

  return USART_SUCCESS;
}
800032f2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032f6:	00 00       	add	r0,r0
800032f8:	80 00       	ld.sh	r0,r0[0x0]
800032fa:	32 bc       	mov	r12,43

800032fc <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800032fc:	eb cd 40 c0 	pushm	r6-r7,lr
80003300:	18 96       	mov	r6,r12
80003302:	16 97       	mov	r7,r11
  while (*string != '\0')
80003304:	17 8b       	ld.ub	r11,r11[0x0]
80003306:	58 0b       	cp.w	r11,0
80003308:	c0 80       	breq	80003318 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000330a:	2f f7       	sub	r7,-1
8000330c:	0c 9c       	mov	r12,r6
8000330e:	f0 1f 00 04 	mcall	8000331c <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003312:	0f 8b       	ld.ub	r11,r7[0x0]
80003314:	58 0b       	cp.w	r11,0
80003316:	cf a1       	brne	8000330a <usart_write_line+0xe>
80003318:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000331c:	80 00       	ld.sh	r0,r0[0x0]
8000331e:	32 d0       	mov	r0,45

80003320 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003320:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003324:	e6 18 00 01 	andh	r8,0x1,COH
80003328:	c0 71       	brne	80003336 <usart_reset+0x16>
8000332a:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000332c:	3f f8       	mov	r8,-1
8000332e:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003330:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003332:	d5 03       	csrf	0x10
80003334:	c0 48       	rjmp	8000333c <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003336:	3f f8       	mov	r8,-1
80003338:	99 38       	st.w	r12[0xc],r8
  usart->csr;
8000333a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000333c:	30 08       	mov	r8,0
8000333e:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003340:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003342:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003344:	ea 68 61 0c 	mov	r8,680204
80003348:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000334a:	5e fc       	retal	r12

8000334c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000334c:	eb cd 40 e0 	pushm	r5-r7,lr
80003350:	18 96       	mov	r6,r12
80003352:	16 97       	mov	r7,r11
80003354:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003356:	f0 1f 00 2f 	mcall	80003410 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000335a:	58 07       	cp.w	r7,0
8000335c:	c5 80       	breq	8000340c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
8000335e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003360:	30 49       	mov	r9,4
80003362:	f2 08 18 00 	cp.b	r8,r9
80003366:	e0 88 00 53 	brls	8000340c <usart_init_rs232+0xc0>
8000336a:	30 99       	mov	r9,9
8000336c:	f2 08 18 00 	cp.b	r8,r9
80003370:	e0 8b 00 4e 	brhi	8000340c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003374:	0f d9       	ld.ub	r9,r7[0x5]
80003376:	30 78       	mov	r8,7
80003378:	f0 09 18 00 	cp.b	r9,r8
8000337c:	e0 8b 00 48 	brhi	8000340c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003380:	8e 39       	ld.sh	r9,r7[0x6]
80003382:	e0 68 01 01 	mov	r8,257
80003386:	f0 09 19 00 	cp.h	r9,r8
8000338a:	e0 8b 00 41 	brhi	8000340c <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
8000338e:	ef 39 00 08 	ld.ub	r9,r7[8]
80003392:	30 38       	mov	r8,3
80003394:	f0 09 18 00 	cp.b	r9,r8
80003398:	e0 8b 00 3a 	brhi	8000340c <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000339c:	0a 9a       	mov	r10,r5
8000339e:	6e 0b       	ld.w	r11,r7[0x0]
800033a0:	0c 9c       	mov	r12,r6
800033a2:	f0 1f 00 1d 	mcall	80003414 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800033a6:	58 1c       	cp.w	r12,1
800033a8:	c3 20       	breq	8000340c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800033aa:	0f c8       	ld.ub	r8,r7[0x4]
800033ac:	30 99       	mov	r9,9
800033ae:	f2 08 18 00 	cp.b	r8,r9
800033b2:	c0 51       	brne	800033bc <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800033b4:	6c 18       	ld.w	r8,r6[0x4]
800033b6:	b1 b8       	sbr	r8,0x11
800033b8:	8d 18       	st.w	r6[0x4],r8
800033ba:	c0 68       	rjmp	800033c6 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800033bc:	6c 19       	ld.w	r9,r6[0x4]
800033be:	20 58       	sub	r8,5
800033c0:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800033c4:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800033c6:	6c 19       	ld.w	r9,r6[0x4]
800033c8:	ef 3a 00 08 	ld.ub	r10,r7[8]
800033cc:	0f d8       	ld.ub	r8,r7[0x5]
800033ce:	a9 78       	lsl	r8,0x9
800033d0:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800033d4:	12 48       	or	r8,r9
800033d6:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800033d8:	8e 38       	ld.sh	r8,r7[0x6]
800033da:	30 29       	mov	r9,2
800033dc:	f2 08 19 00 	cp.h	r8,r9
800033e0:	e0 88 00 09 	brls	800033f2 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800033e4:	6c 18       	ld.w	r8,r6[0x4]
800033e6:	ad b8       	sbr	r8,0xd
800033e8:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800033ea:	8e b8       	ld.uh	r8,r7[0x6]
800033ec:	20 28       	sub	r8,2
800033ee:	8d a8       	st.w	r6[0x28],r8
800033f0:	c0 68       	rjmp	800033fc <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800033f2:	6c 19       	ld.w	r9,r6[0x4]
800033f4:	5c 78       	castu.h	r8
800033f6:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800033fa:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800033fc:	6c 18       	ld.w	r8,r6[0x4]
800033fe:	e0 18 ff f0 	andl	r8,0xfff0
80003402:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003404:	35 08       	mov	r8,80
80003406:	8d 08       	st.w	r6[0x0],r8
80003408:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000340c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003410:	80 00       	ld.sh	r0,r0[0x0]
80003412:	33 20       	mov	r0,50
80003414:	80 00       	ld.sh	r0,r0[0x0]
80003416:	32 62       	mov	r2,38

80003418 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003418:	48 68       	lddpc	r8,80003430 <fat_check_select+0x18>
8000341a:	90 19       	ld.sh	r9,r8[0x2]
8000341c:	3f f8       	mov	r8,-1
8000341e:	f0 09 19 00 	cp.h	r9,r8
80003422:	c0 20       	breq	80003426 <fat_check_select+0xe>
80003424:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003426:	30 f9       	mov	r9,15
80003428:	48 38       	lddpc	r8,80003434 <fat_check_select+0x1c>
8000342a:	b0 89       	st.b	r8[0x0],r9
8000342c:	5e fd       	retal	0
8000342e:	00 00       	add	r0,r0
80003430:	00 00       	add	r0,r0
80003432:	06 b4       	st.h	r3++,r4
80003434:	00 00       	add	r0,r0
80003436:	06 b8       	st.h	r3++,r8

80003438 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003438:	49 68       	lddpc	r8,80003490 <fat_checkcluster+0x58>
8000343a:	70 18       	ld.w	r8,r8[0x4]
8000343c:	58 08       	cp.w	r8,0
8000343e:	c0 21       	brne	80003442 <fat_checkcluster+0xa>
80003440:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80003442:	49 59       	lddpc	r9,80003494 <fat_checkcluster+0x5c>
80003444:	13 89       	ld.ub	r9,r9[0x0]
80003446:	30 3a       	mov	r10,3
80003448:	f4 09 18 00 	cp.b	r9,r10
8000344c:	c0 a1       	brne	80003460 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000344e:	e0 69 ff f7 	mov	r9,65527
80003452:	ea 19 0f ff 	orh	r9,0xfff
80003456:	12 38       	cp.w	r8,r9
80003458:	e0 8b 00 19 	brhi	8000348a <fat_checkcluster+0x52>
8000345c:	5f 0c       	sreq	r12
8000345e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80003460:	30 2a       	mov	r10,2
80003462:	f4 09 18 00 	cp.b	r9,r10
80003466:	c0 71       	brne	80003474 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80003468:	e0 48 ff f7 	cp.w	r8,65527
8000346c:	e0 8b 00 0f 	brhi	8000348a <fat_checkcluster+0x52>
80003470:	5f 0c       	sreq	r12
80003472:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80003474:	30 1a       	mov	r10,1
80003476:	f4 09 18 00 	cp.b	r9,r10
8000347a:	c0 20       	breq	8000347e <fat_checkcluster+0x46>
8000347c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
8000347e:	e0 48 0f f7 	cp.w	r8,4087
80003482:	e0 8b 00 04 	brhi	8000348a <fat_checkcluster+0x52>
80003486:	5f 0c       	sreq	r12
80003488:	5e fc       	retal	r12
8000348a:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
8000348c:	5e fc       	retal	r12
8000348e:	00 00       	add	r0,r0
80003490:	00 00       	add	r0,r0
80003492:	07 08       	ld.w	r8,r3++
80003494:	00 00       	add	r0,r0
80003496:	06 b4       	st.h	r3++,r4

80003498 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003498:	30 0a       	mov	r10,0
8000349a:	48 88       	lddpc	r8,800034b8 <fat_cache_clusterlist_reset+0x20>
8000349c:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000349e:	48 88       	lddpc	r8,800034bc <fat_cache_clusterlist_reset+0x24>
800034a0:	30 19       	mov	r9,1
800034a2:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800034a4:	3f f9       	mov	r9,-1
800034a6:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800034a8:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800034aa:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800034ae:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800034b2:	f1 69 00 15 	st.b	r8[21],r9
   }
}
800034b6:	5e fc       	retal	r12
800034b8:	00 00       	add	r0,r0
800034ba:	06 ba       	st.h	r3++,r10
800034bc:	00 00       	add	r0,r0
800034be:	04 3c       	cp.w	r12,r2

800034c0 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800034c0:	48 c9       	lddpc	r9,800034f0 <fat_cache_clusterlist_update_start+0x30>
800034c2:	13 88       	ld.ub	r8,r9[0x0]
800034c4:	f8 08 18 00 	cp.b	r8,r12
800034c8:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800034ca:	48 ba       	lddpc	r10,800034f4 <fat_cache_clusterlist_update_start+0x34>
800034cc:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800034ce:	f0 0a 15 02 	lsl	r10,r8,0x2
800034d2:	10 0a       	add	r10,r8
800034d4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800034d8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800034da:	3f fb       	mov	r11,-1
800034dc:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800034de:	2f fa       	sub	r10,-1
800034e0:	48 6b       	lddpc	r11,800034f8 <fat_cache_clusterlist_update_start+0x38>
800034e2:	76 0b       	ld.w	r11,r11[0x0]
800034e4:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800034e8:	48 59       	lddpc	r9,800034fc <fat_cache_clusterlist_update_start+0x3c>
800034ea:	72 19       	ld.w	r9,r9[0x4]
800034ec:	91 29       	st.w	r8[0x8],r9
}
800034ee:	5e fc       	retal	r12
800034f0:	00 00       	add	r0,r0
800034f2:	04 3c       	cp.w	r12,r2
800034f4:	00 00       	add	r0,r0
800034f6:	06 ba       	st.h	r3++,r10
800034f8:	00 00       	add	r0,r0
800034fa:	07 08       	ld.w	r8,r3++
800034fc:	00 00       	add	r0,r0
800034fe:	07 10       	ld.sh	r0,r3++

80003500 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80003500:	49 88       	lddpc	r8,80003560 <fat_cache_clusterlist_update_select+0x60>
80003502:	11 88       	ld.ub	r8,r8[0x0]
80003504:	49 8a       	lddpc	r10,80003564 <fat_cache_clusterlist_update_select+0x64>
80003506:	f0 08 00 2b 	add	r11,r8,r8<<0x2
8000350a:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
8000350e:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80003510:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80003512:	15 8a       	ld.ub	r10,r10[0x0]
80003514:	f2 0a 18 00 	cp.b	r10,r9
80003518:	c0 a1       	brne	8000352c <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
8000351a:	49 3a       	lddpc	r10,80003564 <fat_cache_clusterlist_update_select+0x64>
8000351c:	15 9a       	ld.ub	r10,r10[0x1]
8000351e:	f4 0b 18 00 	cp.b	r11,r10
80003522:	e0 88 00 05 	brls	8000352c <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003526:	2f fa       	sub	r10,-1
80003528:	48 fc       	lddpc	r12,80003564 <fat_cache_clusterlist_update_select+0x64>
8000352a:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
8000352c:	48 ea       	lddpc	r10,80003564 <fat_cache_clusterlist_update_select+0x64>
8000352e:	f5 3a 00 14 	ld.ub	r10,r10[20]
80003532:	f2 0a 18 00 	cp.b	r10,r9
80003536:	c0 c1       	brne	8000354e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80003538:	48 b9       	lddpc	r9,80003564 <fat_cache_clusterlist_update_select+0x64>
8000353a:	f3 39 00 15 	ld.ub	r9,r9[21]
8000353e:	f2 0b 18 00 	cp.b	r11,r9
80003542:	e0 88 00 06 	brls	8000354e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003546:	2f f9       	sub	r9,-1
80003548:	48 7a       	lddpc	r10,80003564 <fat_cache_clusterlist_update_select+0x64>
8000354a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
8000354e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003552:	48 59       	lddpc	r9,80003564 <fat_cache_clusterlist_update_select+0x64>
80003554:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003558:	30 09       	mov	r9,0
8000355a:	b0 99       	st.b	r8[0x1],r9
}
8000355c:	5e fc       	retal	r12
8000355e:	00 00       	add	r0,r0
80003560:	00 00       	add	r0,r0
80003562:	06 ba       	st.h	r3++,r10
80003564:	00 00       	add	r0,r0
80003566:	04 3c       	cp.w	r12,r2

80003568 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80003568:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
8000356c:	49 08       	lddpc	r8,800035ac <fat_cache_clusterlist_update_finish+0x44>
8000356e:	11 88       	ld.ub	r8,r8[0x0]
80003570:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003574:	48 f9       	lddpc	r9,800035b0 <fat_cache_clusterlist_update_finish+0x48>
80003576:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000357a:	f0 ca ff f8 	sub	r10,r8,-8
8000357e:	48 eb       	lddpc	r11,800035b4 <fat_cache_clusterlist_update_finish+0x4c>
80003580:	17 97       	ld.ub	r7,r11[0x1]
80003582:	74 09       	ld.w	r9,r10[0x0]
80003584:	f2 07 0d 06 	divu	r6,r9,r7
80003588:	0e 99       	mov	r9,r7
8000358a:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
8000358c:	17 8b       	ld.ub	r11,r11[0x0]
8000358e:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80003590:	74 0b       	ld.w	r11,r10[0x0]
80003592:	12 1b       	sub	r11,r9
80003594:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80003596:	48 9a       	lddpc	r10,800035b8 <fat_cache_clusterlist_update_finish+0x50>
80003598:	74 0b       	ld.w	r11,r10[0x0]
8000359a:	12 1b       	sub	r11,r9
8000359c:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
8000359e:	74 1a       	ld.w	r10,r10[0x4]
800035a0:	14 09       	add	r9,r10
800035a2:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
800035a4:	f0 1f 00 06 	mcall	800035bc <fat_cache_clusterlist_update_finish+0x54>
}
800035a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800035ac:	00 00       	add	r0,r0
800035ae:	06 ba       	st.h	r3++,r10
800035b0:	00 00       	add	r0,r0
800035b2:	04 3c       	cp.w	r12,r2
800035b4:	00 00       	add	r0,r0
800035b6:	06 68       	and	r8,r3
800035b8:	00 00       	add	r0,r0
800035ba:	07 10       	ld.sh	r0,r3++
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	35 00       	mov	r0,80

800035c0 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
800035c0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
800035c4:	4c 18       	lddpc	r8,800036c8 <fat_cache_clusterlist_update_read+0x108>
800035c6:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800035c8:	4c 18       	lddpc	r8,800036cc <fat_cache_clusterlist_update_read+0x10c>
800035ca:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800035cc:	4c 18       	lddpc	r8,800036d0 <fat_cache_clusterlist_update_read+0x110>
800035ce:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800035d0:	4c 18       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
800035d2:	11 88       	ld.ub	r8,r8[0x0]
800035d4:	f8 08 18 00 	cp.b	r8,r12
800035d8:	c1 11       	brne	800035fa <fat_cache_clusterlist_update_read+0x3a>
800035da:	4b f8       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
800035dc:	11 a8       	ld.ub	r8,r8[0x2]
800035de:	f2 08 18 00 	cp.b	r8,r9
800035e2:	c0 c1       	brne	800035fa <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800035e4:	4b c8       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
800035e6:	70 18       	ld.w	r8,r8[0x4]
800035e8:	14 38       	cp.w	r8,r10
800035ea:	c0 81       	brne	800035fa <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800035ec:	4b a8       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
800035ee:	70 28       	ld.w	r8,r8[0x8]
800035f0:	10 3b       	cp.w	r11,r8
800035f2:	c0 43       	brcs	800035fa <fat_cache_clusterlist_update_read+0x3a>
800035f4:	30 0a       	mov	r10,0
800035f6:	14 99       	mov	r9,r10
800035f8:	c1 88       	rjmp	80003628 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800035fa:	4b 78       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
800035fc:	f1 38 00 14 	ld.ub	r8,r8[20]
80003600:	f8 08 18 00 	cp.b	r8,r12
80003604:	c5 e1       	brne	800036c0 <fat_cache_clusterlist_update_read+0x100>
80003606:	4b 48       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
80003608:	f1 38 00 16 	ld.ub	r8,r8[22]
8000360c:	f2 08 18 00 	cp.b	r8,r9
80003610:	c5 81       	brne	800036c0 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003612:	4b 18       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
80003614:	70 68       	ld.w	r8,r8[0x18]
80003616:	14 38       	cp.w	r8,r10
80003618:	c5 41       	brne	800036c0 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
8000361a:	4a f8       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
8000361c:	70 78       	ld.w	r8,r8[0x1c]
8000361e:	16 38       	cp.w	r8,r11
80003620:	e0 8b 00 50 	brhi	800036c0 <fat_cache_clusterlist_update_read+0x100>
80003624:	30 1a       	mov	r10,1
80003626:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80003628:	f2 0e 15 02 	lsl	lr,r9,0x2
8000362c:	12 0e       	add	lr,r9
8000362e:	4a ac       	lddpc	r12,800036d4 <fat_cache_clusterlist_update_read+0x114>
80003630:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80003634:	78 4c       	ld.w	r12,r12[0x10]
80003636:	f6 08 01 08 	sub	r8,r11,r8
8000363a:	10 3c       	cp.w	r12,r8
8000363c:	e0 88 00 16 	brls	80003668 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80003640:	4a 4b       	lddpc	r11,800036d0 <fat_cache_clusterlist_update_read+0x110>
80003642:	f2 0e 15 02 	lsl	lr,r9,0x2
80003646:	fc 09 00 09 	add	r9,lr,r9
8000364a:	4a 3e       	lddpc	lr,800036d4 <fat_cache_clusterlist_update_read+0x114>
8000364c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80003650:	72 39       	ld.w	r9,r9[0xc]
80003652:	f0 09 00 09 	add	r9,r8,r9
80003656:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80003658:	10 1c       	sub	r12,r8
8000365a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
8000365c:	49 f8       	lddpc	r8,800036d8 <fat_cache_clusterlist_update_read+0x118>
8000365e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80003660:	f0 1f 00 1f 	mcall	800036dc <fat_cache_clusterlist_update_read+0x11c>
80003664:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80003668:	49 c8       	lddpc	r8,800036d8 <fat_cache_clusterlist_update_read+0x118>
8000366a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
8000366c:	f2 08 15 02 	lsl	r8,r9,0x2
80003670:	f0 09 00 09 	add	r9,r8,r9
80003674:	49 88       	lddpc	r8,800036d4 <fat_cache_clusterlist_update_read+0x114>
80003676:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000367a:	3f f9       	mov	r9,-1
8000367c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000367e:	70 4c       	ld.w	r12,r8[0x10]
80003680:	49 2a       	lddpc	r10,800036c8 <fat_cache_clusterlist_update_read+0x108>
80003682:	15 99       	ld.ub	r9,r10[0x1]
80003684:	70 3e       	ld.w	lr,r8[0xc]
80003686:	f8 0e 00 0e 	add	lr,r12,lr
8000368a:	20 1e       	sub	lr,1
8000368c:	74 57       	ld.w	r7,r10[0x14]
8000368e:	fc 07 01 07 	sub	r7,lr,r7
80003692:	74 4a       	ld.w	r10,r10[0x10]
80003694:	14 17       	sub	r7,r10
80003696:	ee 09 0d 06 	divu	r6,r7,r9
8000369a:	0c 97       	mov	r7,r6
8000369c:	2f e7       	sub	r7,-2
8000369e:	48 ca       	lddpc	r10,800036cc <fat_cache_clusterlist_update_read+0x10c>
800036a0:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
800036a2:	2f 88       	sub	r8,-8
800036a4:	70 0a       	ld.w	r10,r8[0x0]
800036a6:	14 0c       	add	r12,r10
800036a8:	f8 c7 00 01 	sub	r7,r12,1
800036ac:	ee 09 0d 06 	divu	r6,r7,r9
800036b0:	ad 39       	mul	r9,r6
800036b2:	48 8a       	lddpc	r10,800036d0 <fat_cache_clusterlist_update_read+0x110>
800036b4:	f6 09 01 09 	sub	r9,r11,r9
800036b8:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
800036ba:	91 0b       	st.w	r8[0x0],r11
800036bc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
800036c0:	f0 1f 00 08 	mcall	800036e0 <fat_cache_clusterlist_update_read+0x120>
800036c4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800036c8:	00 00       	add	r0,r0
800036ca:	06 68       	and	r8,r3
800036cc:	00 00       	add	r0,r0
800036ce:	07 08       	ld.w	r8,r3++
800036d0:	00 00       	add	r0,r0
800036d2:	07 10       	ld.sh	r0,r3++
800036d4:	00 00       	add	r0,r0
800036d6:	04 3c       	cp.w	r12,r2
800036d8:	00 00       	add	r0,r0
800036da:	06 ba       	st.h	r3++,r10
800036dc:	80 00       	ld.sh	r0,r0[0x0]
800036de:	35 00       	mov	r0,80
800036e0:	80 00       	ld.sh	r0,r0[0x0]
800036e2:	34 c0       	mov	r0,76

800036e4 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800036e4:	3f f9       	mov	r9,-1
800036e6:	48 c8       	lddpc	r8,80003714 <fat_clear_entry_info_and_ptr+0x30>
800036e8:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800036ea:	48 c8       	lddpc	r8,80003718 <fat_clear_entry_info_and_ptr+0x34>
800036ec:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
800036f0:	f1 39 00 2d 	ld.ub	r9,r8[45]
800036f4:	30 08       	mov	r8,0
800036f6:	f0 09 18 00 	cp.b	r9,r8
800036fa:	c0 51       	brne	80003704 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
800036fc:	10 99       	mov	r9,r8
800036fe:	48 78       	lddpc	r8,80003718 <fat_clear_entry_info_and_ptr+0x34>
80003700:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
80003704:	48 68       	lddpc	r8,8000371c <fat_clear_entry_info_and_ptr+0x38>
80003706:	30 09       	mov	r9,0
80003708:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
8000370a:	30 0a       	mov	r10,0
8000370c:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
8000370e:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80003710:	b0 89       	st.b	r8[0x0],r9
}
80003712:	5e fc       	retal	r12
80003714:	00 00       	add	r0,r0
80003716:	06 b4       	st.h	r3++,r4
80003718:	00 00       	add	r0,r0
8000371a:	06 68       	and	r8,r3
8000371c:	00 00       	add	r0,r0
8000371e:	04 28       	rsub	r8,r2

80003720 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80003720:	30 08       	mov	r8,0
80003722:	f0 0c 19 00 	cp.h	r12,r8
80003726:	5f 0a       	sreq	r10
80003728:	35 c9       	mov	r9,92
8000372a:	f2 0c 19 00 	cp.h	r12,r9
8000372e:	5f 09       	sreq	r9
80003730:	f5 e9 10 09 	or	r9,r10,r9
80003734:	f0 09 18 00 	cp.b	r9,r8
80003738:	c0 20       	breq	8000373c <fat_check_eof_name+0x1c>
8000373a:	5e ff       	retal	1
8000373c:	32 f8       	mov	r8,47
8000373e:	f0 0c 19 00 	cp.h	r12,r8
80003742:	5f 0c       	sreq	r12
}
80003744:	5e fc       	retal	r12
80003746:	d7 03       	nop

80003748 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80003748:	48 48       	lddpc	r8,80003758 <fat_get_ptr_entry+0x10>
8000374a:	90 98       	ld.uh	r8,r8[0x2]
8000374c:	a5 78       	lsl	r8,0x5
8000374e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80003752:	48 3c       	lddpc	r12,8000375c <fat_get_ptr_entry+0x14>
80003754:	10 0c       	add	r12,r8
80003756:	5e fc       	retal	r12
80003758:	00 00       	add	r0,r0
8000375a:	06 b4       	st.h	r3++,r4
8000375c:	00 00       	add	r0,r0
8000375e:	04 68       	and	r8,r2

80003760 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80003760:	d4 31       	pushm	r0-r7,lr
80003762:	20 3d       	sub	sp,12
80003764:	18 97       	mov	r7,r12
80003766:	16 94       	mov	r4,r11
80003768:	14 96       	mov	r6,r10
8000376a:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
8000376c:	f0 1f 00 5e 	mcall	800038e4 <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80003770:	19 88       	ld.ub	r8,r12[0x0]
80003772:	30 09       	mov	r9,0
80003774:	f2 08 18 00 	cp.b	r8,r9
80003778:	5f 0b       	sreq	r11
8000377a:	3e 5a       	mov	r10,-27
8000377c:	f4 08 18 00 	cp.b	r8,r10
80003780:	5f 0a       	sreq	r10
80003782:	f7 ea 10 0a 	or	r10,r11,r10
80003786:	f2 0a 18 00 	cp.b	r10,r9
8000378a:	c0 71       	brne	80003798 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
8000378c:	f9 3a 00 0b 	ld.ub	r10,r12[11]
80003790:	30 f9       	mov	r9,15
80003792:	f2 0a 18 00 	cp.b	r10,r9
80003796:	c0 60       	breq	800037a2 <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80003798:	30 b9       	mov	r9,11
8000379a:	4d 48       	lddpc	r8,800038e8 <fat_entry_longname+0x188>
8000379c:	b0 89       	st.b	r8[0x0],r9
8000379e:	30 0c       	mov	r12,0
      return false;
800037a0:	c9 c8       	rjmp	800038d8 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
800037a2:	4d 39       	lddpc	r9,800038ec <fat_entry_longname+0x18c>
800037a4:	13 8a       	ld.ub	r10,r9[0x0]
800037a6:	30 09       	mov	r9,0
800037a8:	f2 0a 18 00 	cp.b	r10,r9
800037ac:	c0 90       	breq	800037be <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
800037ae:	e2 18 00 40 	andl	r8,0x40,COH
800037b2:	c0 61       	brne	800037be <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800037b4:	31 09       	mov	r9,16
800037b6:	4c d8       	lddpc	r8,800038e8 <fat_entry_longname+0x188>
800037b8:	b0 89       	st.b	r8[0x0],r9
800037ba:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800037bc:	c8 e8       	rjmp	800038d8 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800037be:	2f fc       	sub	r12,-1
800037c0:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800037c2:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800037c6:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800037c8:	4c 95       	lddpc	r5,800038ec <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800037ca:	20 14       	sub	r4,1
800037cc:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800037ce:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800037d0:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800037d2:	19 89       	ld.ub	r9,r12[0x0]
800037d4:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
800037d6:	19 99       	ld.ub	r9,r12[0x1]
800037d8:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
800037da:	58 06       	cp.w	r6,0
800037dc:	c0 f0       	breq	800037fa <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
800037de:	0b 89       	ld.ub	r9,r5[0x0]
800037e0:	f6 09 18 00 	cp.b	r9,r11
800037e4:	c3 91       	brne	80003856 <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800037e6:	40 1e       	lddsp	lr,sp[0x4]
800037e8:	1c 38       	cp.w	r8,lr
800037ea:	c0 55       	brlt	800037f4 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800037ec:	30 08       	mov	r8,0
800037ee:	ae 88       	st.b	r7[0x0],r8
800037f0:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
800037f2:	c7 38       	rjmp	800038d8 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800037f4:	9a 59       	ld.sh	r9,sp[0xa]
800037f6:	ae 89       	st.b	r7[0x0],r9
800037f8:	c2 f8       	rjmp	80003856 <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
800037fa:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800037fc:	32 a3       	mov	r3,42
800037fe:	e6 09 19 00 	cp.h	r9,r3
80003802:	c6 a0       	breq	800038d6 <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003804:	9a 5e       	ld.sh	lr,sp[0xa]
80003806:	58 0e       	cp.w	lr,0
80003808:	c0 e1       	brne	80003824 <fat_entry_longname+0xc4>
8000380a:	35 c0       	mov	r0,92
8000380c:	e0 09 19 00 	cp.h	r9,r0
80003810:	5f 12       	srne	r2
80003812:	32 f3       	mov	r3,47
80003814:	e6 09 19 00 	cp.h	r9,r3
80003818:	5f 13       	srne	r3
8000381a:	e5 e3 00 03 	and	r3,r2,r3
8000381e:	f6 03 18 00 	cp.b	r3,r11
80003822:	c1 e0       	breq	8000385e <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80003824:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80003828:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000382c:	e4 c0 ff e0 	sub	r0,r2,-32
80003830:	00 33       	cp.w	r3,r0
80003832:	c0 41       	brne	8000383a <fat_entry_longname+0xda>
80003834:	40 00       	lddsp	r0,sp[0x0]
80003836:	58 00       	cp.w	r0,0
80003838:	c0 f0       	breq	80003856 <fat_entry_longname+0xf6>
8000383a:	22 02       	sub	r2,32
8000383c:	04 33       	cp.w	r3,r2
8000383e:	c0 41       	brne	80003846 <fat_entry_longname+0xe6>
80003840:	40 03       	lddsp	r3,sp[0x0]
80003842:	58 03       	cp.w	r3,0
80003844:	c0 90       	breq	80003856 <fat_entry_longname+0xf6>
80003846:	fc 09 19 00 	cp.h	r9,lr
8000384a:	c0 60       	breq	80003856 <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
8000384c:	31 69       	mov	r9,22
8000384e:	4a 78       	lddpc	r8,800038e8 <fat_entry_longname+0x188>
80003850:	b0 89       	st.b	r8[0x0],r9
80003852:	30 0c       	mov	r12,0
           return false;
80003854:	c4 28       	rjmp	800038d8 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
80003856:	9a 59       	ld.sh	r9,sp[0xa]
80003858:	e2 09 19 00 	cp.h	r9,r1
8000385c:	c0 b1       	brne	80003872 <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
8000385e:	4a 49       	lddpc	r9,800038ec <fat_entry_longname+0x18c>
80003860:	13 8a       	ld.ub	r10,r9[0x0]
80003862:	30 09       	mov	r9,0
80003864:	f2 0a 18 00 	cp.b	r10,r9
80003868:	c3 70       	breq	800038d6 <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000386a:	2f f8       	sub	r8,-1
8000386c:	ae 08       	st.h	r7[0x0],r8
8000386e:	30 1c       	mov	r12,1
80003870:	c3 48       	rjmp	800038d8 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003872:	e8 08 18 00 	cp.b	r8,r4
80003876:	c0 31       	brne	8000387c <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
80003878:	2f dc       	sub	r12,-3
8000387a:	c2 58       	rjmp	800038c4 <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
8000387c:	30 a9       	mov	r9,10
8000387e:	f2 08 18 00 	cp.b	r8,r9
80003882:	c0 31       	brne	80003888 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
80003884:	2f ec       	sub	r12,-2
80003886:	c1 f8       	rjmp	800038c4 <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
80003888:	30 c9       	mov	r9,12
8000388a:	f2 08 18 00 	cp.b	r8,r9
8000388e:	c1 b1       	brne	800038c4 <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
80003890:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80003894:	e2 18 00 40 	andl	r8,0x40,COH
80003898:	c0 61       	brne	800038a4 <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000389a:	31 09       	mov	r9,16
8000389c:	49 38       	lddpc	r8,800038e8 <fat_entry_longname+0x188>
8000389e:	b0 89       	st.b	r8[0x0],r9
800038a0:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
800038a2:	c1 b8       	rjmp	800038d8 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800038a4:	58 06       	cp.w	r6,0
800038a6:	c0 b0       	breq	800038bc <fat_entry_longname+0x15c>
800038a8:	49 18       	lddpc	r8,800038ec <fat_entry_longname+0x18c>
800038aa:	11 89       	ld.ub	r9,r8[0x0]
800038ac:	30 08       	mov	r8,0
800038ae:	f0 09 18 00 	cp.b	r9,r8
800038b2:	c1 50       	breq	800038dc <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800038b4:	30 e8       	mov	r8,14
800038b6:	ae 08       	st.h	r7[0x0],r8
800038b8:	30 1c       	mov	r12,1
               return true;
800038ba:	c0 f8       	rjmp	800038d8 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800038bc:	0f 9c       	ld.ub	r12,r7[0x1]
800038be:	f0 1f 00 0d 	mcall	800038f0 <fat_entry_longname+0x190>
800038c2:	c0 b8       	rjmp	800038d8 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800038c4:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800038c6:	f6 09 18 00 	cp.b	r9,r11
800038ca:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800038ce:	2f f8       	sub	r8,-1
800038d0:	5c 58       	castu.b	r8
      ptr_entry+=2;
800038d2:	2f ec       	sub	r12,-2
   }
800038d4:	c7 fb       	rjmp	800037d2 <fat_entry_longname+0x72>
800038d6:	30 1c       	mov	r12,1
}
800038d8:	2f dd       	sub	sp,-12
800038da:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800038dc:	30 08       	mov	r8,0
800038de:	ae 98       	st.b	r7[0x1],r8
800038e0:	30 1c       	mov	r12,1
               }
               return true;
800038e2:	cf bb       	rjmp	800038d8 <fat_entry_longname+0x178>
800038e4:	80 00       	ld.sh	r0,r0[0x0]
800038e6:	37 48       	mov	r8,116
800038e8:	00 00       	add	r0,r0
800038ea:	06 b8       	st.h	r3++,r8
800038ec:	00 00       	add	r0,r0
800038ee:	06 b9       	st.h	r3++,r9
800038f0:	80 00       	ld.sh	r0,r0[0x0]
800038f2:	37 20       	mov	r0,114

800038f4 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
800038f4:	d4 31       	pushm	r0-r7,lr
800038f6:	20 2d       	sub	sp,8
800038f8:	18 97       	mov	r7,r12
800038fa:	50 1b       	stdsp	sp[0x4],r11
800038fc:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
800038fe:	31 69       	mov	r9,22
80003900:	4b c8       	lddpc	r8,800039f0 <fat_entry_shortname+0xfc>
80003902:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
80003904:	f0 1f 00 3c 	mcall	800039f4 <fat_entry_shortname+0x100>
80003908:	30 08       	mov	r8,0
8000390a:	10 9a       	mov	r10,r8
8000390c:	30 1b       	mov	r11,1
8000390e:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003910:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003912:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80003914:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003916:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80003918:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000391a:	fc 08 18 00 	cp.b	r8,lr
8000391e:	c1 90       	breq	80003950 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80003920:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80003924:	ea 08 18 00 	cp.b	r8,r5
80003928:	c0 41       	brne	80003930 <fat_entry_shortname+0x3c>
8000392a:	40 01       	lddsp	r1,sp[0x0]
8000392c:	58 01       	cp.w	r1,0
8000392e:	c0 81       	brne	8000393e <fat_entry_shortname+0x4a>
80003930:	e8 09 18 00 	cp.b	r9,r4
80003934:	c0 f1       	brne	80003952 <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80003936:	ea 08 18 00 	cp.b	r8,r5
8000393a:	e0 8b 00 0b 	brhi	80003950 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000393e:	f9 39 00 08 	ld.ub	r9,r12[8]
80003942:	e8 09 18 00 	cp.b	r9,r4
80003946:	c0 50       	breq	80003950 <fat_entry_shortname+0x5c>
80003948:	30 78       	mov	r8,7
8000394a:	32 e9       	mov	r9,46
8000394c:	50 03       	stdsp	sp[0x0],r3
8000394e:	c0 28       	rjmp	80003952 <fat_entry_shortname+0x5e>
80003950:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
80003952:	58 06       	cp.w	r6,0
80003954:	c1 80       	breq	80003984 <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
80003956:	4a 9b       	lddpc	r11,800039f8 <fat_entry_shortname+0x104>
80003958:	17 81       	ld.ub	r1,r11[0x0]
8000395a:	30 0b       	mov	r11,0
8000395c:	f6 01 18 00 	cp.b	r1,r11
80003960:	c2 c1       	brne	800039b8 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
80003962:	40 1b       	lddsp	r11,sp[0x4]
80003964:	20 1b       	sub	r11,1
80003966:	16 3a       	cp.w	r10,r11
80003968:	c0 35       	brlt	8000396e <fat_entry_shortname+0x7a>
8000396a:	06 99       	mov	r9,r3
8000396c:	c0 a8       	rjmp	80003980 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000396e:	f2 c1 00 41 	sub	r1,r9,65
80003972:	31 9b       	mov	r11,25
80003974:	f6 01 18 00 	cp.b	r1,r11
80003978:	e0 8b 00 04 	brhi	80003980 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
8000397c:	2e 09       	sub	r9,-32
8000397e:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80003980:	ae 89       	st.b	r7[0x0],r9
80003982:	c1 b8       	rjmp	800039b8 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80003984:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
80003986:	e4 0b 18 00 	cp.b	r11,r2
8000398a:	c2 f0       	breq	800039e8 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
8000398c:	58 09       	cp.w	r9,0
8000398e:	c0 c1       	brne	800039a6 <fat_entry_shortname+0xb2>
80003990:	35 c1       	mov	r1,92
80003992:	e2 0b 18 00 	cp.b	r11,r1
80003996:	5f 10       	srne	r0
80003998:	32 f1       	mov	r1,47
8000399a:	e2 0b 18 00 	cp.b	r11,r1
8000399e:	5f 11       	srne	r1
800039a0:	e1 e1 00 01 	and	r1,r0,r1
800039a4:	c0 c0       	breq	800039bc <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
800039a6:	f2 0b 18 00 	cp.b	r11,r9
800039aa:	c0 70       	breq	800039b8 <fat_entry_shortname+0xc4>
800039ac:	f2 c1 ff e0 	sub	r1,r9,-32
800039b0:	02 3b       	cp.w	r11,r1
800039b2:	c0 30       	breq	800039b8 <fat_entry_shortname+0xc4>
800039b4:	30 0c       	mov	r12,0
800039b6:	c1 a8       	rjmp	800039ea <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800039b8:	58 09       	cp.w	r9,0
800039ba:	c0 b1       	brne	800039d0 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800039bc:	48 f8       	lddpc	r8,800039f8 <fat_entry_shortname+0x104>
800039be:	11 89       	ld.ub	r9,r8[0x0]
800039c0:	30 08       	mov	r8,0
800039c2:	f0 09 18 00 	cp.b	r9,r8
800039c6:	c1 10       	breq	800039e8 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800039c8:	2f fa       	sub	r10,-1
800039ca:	ae 0a       	st.h	r7[0x0],r10
800039cc:	30 1c       	mov	r12,1
800039ce:	c0 e8       	rjmp	800039ea <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800039d0:	48 a9       	lddpc	r9,800039f8 <fat_entry_shortname+0x104>
800039d2:	13 8b       	ld.ub	r11,r9[0x0]
800039d4:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
800039d6:	f2 0b 18 00 	cp.b	r11,r9
800039da:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800039de:	2f fa       	sub	r10,-1
800039e0:	5c 5a       	castu.b	r10
      u8_pos_entry++;
800039e2:	2f f8       	sub	r8,-1
800039e4:	5c 58       	castu.b	r8
   }
800039e6:	c9 ab       	rjmp	8000391a <fat_entry_shortname+0x26>
800039e8:	30 1c       	mov	r12,1
}
800039ea:	2f ed       	sub	sp,-8
800039ec:	d8 32       	popm	r0-r7,pc
800039ee:	00 00       	add	r0,r0
800039f0:	00 00       	add	r0,r0
800039f2:	06 b8       	st.h	r3++,r8
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	37 48       	mov	r8,116
800039f8:	00 00       	add	r0,r0
800039fa:	06 b9       	st.h	r3++,r9

800039fc <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800039fc:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800039fe:	f0 1f 00 10 	mcall	80003a3c <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80003a02:	49 08       	lddpc	r8,80003a40 <fat_get_entry_info+0x44>
80003a04:	f9 39 00 0b 	ld.ub	r9,r12[11]
80003a08:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80003a0a:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003a0e:	f0 c9 ff fc 	sub	r9,r8,-4
80003a12:	15 8b       	ld.ub	r11,r10[0x0]
80003a14:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003a16:	15 9a       	ld.ub	r10,r10[0x1]
80003a18:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80003a1a:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003a1e:	15 8b       	ld.ub	r11,r10[0x0]
80003a20:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003a22:	15 9a       	ld.ub	r10,r10[0x1]
80003a24:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
80003a26:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80003a28:	2f 88       	sub	r8,-8
80003a2a:	19 89       	ld.ub	r9,r12[0x0]
80003a2c:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80003a2e:	19 99       	ld.ub	r9,r12[0x1]
80003a30:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80003a32:	19 a9       	ld.ub	r9,r12[0x2]
80003a34:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80003a36:	19 b9       	ld.ub	r9,r12[0x3]
80003a38:	b0 89       	st.b	r8[0x0],r9
}
80003a3a:	d8 02       	popm	pc
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	37 48       	mov	r8,116
80003a40:	00 00       	add	r0,r0
80003a42:	04 28       	rsub	r8,r2

80003a44 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80003a44:	eb cd 40 80 	pushm	r7,lr
80003a48:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80003a4a:	f0 1f 00 14 	mcall	80003a98 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80003a4e:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80003a50:	58 08       	cp.w	r8,0
80003a52:	c0 61       	brne	80003a5e <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80003a54:	30 a9       	mov	r9,10
80003a56:	49 28       	lddpc	r8,80003a9c <fat_entry_check+0x58>
80003a58:	b0 89       	st.b	r8[0x0],r9
80003a5a:	30 07       	mov	r7,0
      return false;
80003a5c:	c1 a8       	rjmp	80003a90 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80003a5e:	30 ba       	mov	r10,11
80003a60:	48 f9       	lddpc	r9,80003a9c <fat_entry_check+0x58>
80003a62:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80003a64:	3e 59       	mov	r9,-27
80003a66:	f2 08 18 00 	cp.b	r8,r9
80003a6a:	c1 20       	breq	80003a8e <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80003a6c:	32 e9       	mov	r9,46
80003a6e:	f2 08 18 00 	cp.b	r8,r9
80003a72:	c0 e0       	breq	80003a8e <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80003a74:	f9 38 00 0b 	ld.ub	r8,r12[11]
80003a78:	10 99       	mov	r9,r8
80003a7a:	e2 19 00 08 	andl	r9,0x8,COH
80003a7e:	c0 81       	brne	80003a8e <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80003a80:	e2 18 00 10 	andl	r8,0x10,COH
80003a84:	c0 60       	breq	80003a90 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
80003a86:	ec 17 00 01 	eorl	r7,0x1
80003a8a:	5c 57       	castu.b	r7
80003a8c:	c0 28       	rjmp	80003a90 <fat_entry_check+0x4c>
80003a8e:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
80003a90:	0e 9c       	mov	r12,r7
80003a92:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a96:	00 00       	add	r0,r0
80003a98:	80 00       	ld.sh	r0,r0[0x0]
80003a9a:	37 48       	mov	r8,116
80003a9c:	00 00       	add	r0,r0
80003a9e:	06 b8       	st.h	r3++,r8

80003aa0 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003aa0:	48 58       	lddpc	r8,80003ab4 <fat_cache_reset+0x14>
80003aa2:	3f f9       	mov	r9,-1
80003aa4:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
80003aa6:	30 09       	mov	r9,0
80003aa8:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003aac:	3f f9       	mov	r9,-1
80003aae:	91 39       	st.w	r8[0xc],r9
}
80003ab0:	5e fc       	retal	r12
80003ab2:	00 00       	add	r0,r0
80003ab4:	00 00       	add	r0,r0
80003ab6:	06 f0       	st.b	--r3,r0

80003ab8 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003ab8:	30 19       	mov	r9,1
80003aba:	48 38       	lddpc	r8,80003ac4 <fat_cache_mark_sector_as_dirty+0xc>
80003abc:	f1 69 00 08 	st.b	r8[8],r9
}
80003ac0:	5e fc       	retal	r12
80003ac2:	00 00       	add	r0,r0
80003ac4:	00 00       	add	r0,r0
80003ac6:	06 f0       	st.b	--r3,r0

80003ac8 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
80003ac8:	d4 21       	pushm	r4-r7,lr
80003aca:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80003acc:	58 0c       	cp.w	r12,0
80003ace:	c6 20       	breq	80003b92 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003ad0:	1a 97       	mov	r7,sp
80003ad2:	4b 28       	lddpc	r8,80003b98 <fat_invert_nav+0xd0>
80003ad4:	70 09       	ld.w	r9,r8[0x0]
80003ad6:	50 09       	stdsp	sp[0x0],r9
80003ad8:	70 19       	ld.w	r9,r8[0x4]
80003ada:	50 19       	stdsp	sp[0x4],r9
80003adc:	70 29       	ld.w	r9,r8[0x8]
80003ade:	50 29       	stdsp	sp[0x8],r9
80003ae0:	70 39       	ld.w	r9,r8[0xc]
80003ae2:	50 39       	stdsp	sp[0xc],r9
80003ae4:	fa c9 ff f0 	sub	r9,sp,-16
80003ae8:	f0 ca ff f0 	sub	r10,r8,-16
80003aec:	74 0b       	ld.w	r11,r10[0x0]
80003aee:	93 0b       	st.w	r9[0x0],r11
80003af0:	74 1b       	ld.w	r11,r10[0x4]
80003af2:	93 1b       	st.w	r9[0x4],r11
80003af4:	74 2b       	ld.w	r11,r10[0x8]
80003af6:	93 2b       	st.w	r9[0x8],r11
80003af8:	74 3a       	ld.w	r10,r10[0xc]
80003afa:	93 3a       	st.w	r9[0xc],r10
80003afc:	fa c9 ff e0 	sub	r9,sp,-32
80003b00:	f0 ca ff e0 	sub	r10,r8,-32
80003b04:	74 0b       	ld.w	r11,r10[0x0]
80003b06:	93 0b       	st.w	r9[0x0],r11
80003b08:	74 1b       	ld.w	r11,r10[0x4]
80003b0a:	93 1b       	st.w	r9[0x4],r11
80003b0c:	74 2b       	ld.w	r11,r10[0x8]
80003b0e:	93 2b       	st.w	r9[0x8],r11
80003b10:	74 3a       	ld.w	r10,r10[0xc]
80003b12:	93 3a       	st.w	r9[0xc],r10
80003b14:	70 c9       	ld.w	r9,r8[0x30]
80003b16:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003b18:	f8 c6 00 01 	sub	r6,r12,1
80003b1c:	5c 56       	castu.b	r6
80003b1e:	ec 04 10 34 	mul	r4,r6,52
80003b22:	49 f9       	lddpc	r9,80003b9c <fat_invert_nav+0xd4>
80003b24:	12 04       	add	r4,r9
80003b26:	33 45       	mov	r5,52
80003b28:	0a 9a       	mov	r10,r5
80003b2a:	08 9b       	mov	r11,r4
80003b2c:	10 9c       	mov	r12,r8
80003b2e:	f0 1f 00 1d 	mcall	80003ba0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80003b32:	0a 9a       	mov	r10,r5
80003b34:	1a 9b       	mov	r11,sp
80003b36:	08 9c       	mov	r12,r4
80003b38:	f0 1f 00 1a 	mcall	80003ba0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
80003b3c:	49 ac       	lddpc	r12,80003ba4 <fat_invert_nav+0xdc>
80003b3e:	78 08       	ld.w	r8,r12[0x0]
80003b40:	50 08       	stdsp	sp[0x0],r8
80003b42:	78 18       	ld.w	r8,r12[0x4]
80003b44:	50 18       	stdsp	sp[0x4],r8
80003b46:	78 28       	ld.w	r8,r12[0x8]
80003b48:	50 28       	stdsp	sp[0x8],r8
80003b4a:	78 38       	ld.w	r8,r12[0xc]
80003b4c:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80003b4e:	ec 04 15 04 	lsl	r4,r6,0x4
80003b52:	49 68       	lddpc	r8,80003ba8 <fat_invert_nav+0xe0>
80003b54:	10 04       	add	r4,r8
80003b56:	31 05       	mov	r5,16
80003b58:	0a 9a       	mov	r10,r5
80003b5a:	08 9b       	mov	r11,r4
80003b5c:	f0 1f 00 11 	mcall	80003ba0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80003b60:	0a 9a       	mov	r10,r5
80003b62:	1a 9b       	mov	r11,sp
80003b64:	08 9c       	mov	r12,r4
80003b66:	f0 1f 00 0f 	mcall	80003ba0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
80003b6a:	49 14       	lddpc	r4,80003bac <fat_invert_nav+0xe4>
80003b6c:	30 45       	mov	r5,4
80003b6e:	0a 9a       	mov	r10,r5
80003b70:	08 9b       	mov	r11,r4
80003b72:	1a 9c       	mov	r12,sp
80003b74:	f0 1f 00 0b 	mcall	80003ba0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80003b78:	48 e8       	lddpc	r8,80003bb0 <fat_invert_nav+0xe8>
80003b7a:	f0 06 00 26 	add	r6,r8,r6<<0x2
80003b7e:	0a 9a       	mov	r10,r5
80003b80:	0c 9b       	mov	r11,r6
80003b82:	08 9c       	mov	r12,r4
80003b84:	f0 1f 00 07 	mcall	80003ba0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80003b88:	0a 9a       	mov	r10,r5
80003b8a:	1a 9b       	mov	r11,sp
80003b8c:	0c 9c       	mov	r12,r6
80003b8e:	f0 1f 00 05 	mcall	80003ba0 <fat_invert_nav+0xd8>
}
80003b92:	2f 3d       	sub	sp,-52
80003b94:	d8 22       	popm	r4-r7,pc
80003b96:	00 00       	add	r0,r0
80003b98:	00 00       	add	r0,r0
80003b9a:	06 68       	and	r8,r3
80003b9c:	00 00       	add	r0,r0
80003b9e:	06 bc       	st.h	r3++,r12
80003ba0:	80 00       	ld.sh	r0,r0[0x0]
80003ba2:	57 ea       	stdsp	sp[0x1f8],r10
80003ba4:	00 00       	add	r0,r0
80003ba6:	04 28       	rsub	r8,r2
80003ba8:	00 00       	add	r0,r0
80003baa:	06 a0       	st.w	r3++,r0
80003bac:	00 00       	add	r0,r0
80003bae:	06 b4       	st.h	r3++,r4
80003bb0:	00 00       	add	r0,r0
80003bb2:	06 b0       	st.h	r3++,r0

80003bb4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
80003bb4:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003bb6:	49 08       	lddpc	r8,80003bf4 <fat_cache_flush+0x40>
80003bb8:	f1 39 00 08 	ld.ub	r9,r8[8]
80003bbc:	30 18       	mov	r8,1
80003bbe:	f0 09 18 00 	cp.b	r9,r8
80003bc2:	c1 81       	brne	80003bf2 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003bc4:	48 c8       	lddpc	r8,80003bf4 <fat_cache_flush+0x40>
80003bc6:	30 09       	mov	r9,0
80003bc8:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003bcc:	11 8c       	ld.ub	r12,r8[0x0]
80003bce:	f0 1f 00 0b 	mcall	80003bf8 <fat_cache_flush+0x44>
80003bd2:	c0 50       	breq	80003bdc <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80003bd4:	31 49       	mov	r9,20
80003bd6:	48 a8       	lddpc	r8,80003bfc <fat_cache_flush+0x48>
80003bd8:	b0 89       	st.b	r8[0x0],r9
80003bda:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003bdc:	48 68       	lddpc	r8,80003bf4 <fat_cache_flush+0x40>
80003bde:	48 9a       	lddpc	r10,80003c00 <fat_cache_flush+0x4c>
80003be0:	70 1b       	ld.w	r11,r8[0x4]
80003be2:	11 8c       	ld.ub	r12,r8[0x0]
80003be4:	f0 1f 00 08 	mcall	80003c04 <fat_cache_flush+0x50>
80003be8:	c0 50       	breq	80003bf2 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
80003bea:	30 19       	mov	r9,1
80003bec:	48 48       	lddpc	r8,80003bfc <fat_cache_flush+0x48>
80003bee:	b0 89       	st.b	r8[0x0],r9
80003bf0:	d8 0a       	popm	pc,r12=0
         return false;
80003bf2:	da 0a       	popm	pc,r12=1
80003bf4:	00 00       	add	r0,r0
80003bf6:	06 f0       	st.b	--r3,r0
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	55 ec       	stdsp	sp[0x178],r12
80003bfc:	00 00       	add	r0,r0
80003bfe:	06 b8       	st.h	r3++,r8
80003c00:	00 00       	add	r0,r0
80003c02:	04 68       	and	r8,r2
80003c04:	80 00       	ld.sh	r0,r0[0x0]
80003c06:	56 1c       	stdsp	sp[0x184],r12

80003c08 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
80003c08:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
80003c0a:	e0 6a 02 00 	mov	r10,512
80003c0e:	30 0b       	mov	r11,0
80003c10:	48 2c       	lddpc	r12,80003c18 <fat_cache_clear+0x10>
80003c12:	f0 1f 00 03 	mcall	80003c1c <fat_cache_clear+0x14>
}
80003c16:	d8 02       	popm	pc
80003c18:	00 00       	add	r0,r0
80003c1a:	04 68       	and	r8,r2
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	59 32       	cp.w	r2,19

80003c20 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80003c20:	eb cd 40 80 	pushm	r7,lr
80003c24:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003c26:	49 78       	lddpc	r8,80003c80 <fat_cache_read_sector+0x60>
80003c28:	11 89       	ld.ub	r9,r8[0x0]
80003c2a:	49 78       	lddpc	r8,80003c84 <fat_cache_read_sector+0x64>
80003c2c:	11 88       	ld.ub	r8,r8[0x0]
80003c2e:	f0 09 18 00 	cp.b	r9,r8
80003c32:	c0 91       	brne	80003c44 <fat_cache_read_sector+0x24>
80003c34:	49 38       	lddpc	r8,80003c80 <fat_cache_read_sector+0x60>
80003c36:	70 19       	ld.w	r9,r8[0x4]
80003c38:	49 48       	lddpc	r8,80003c88 <fat_cache_read_sector+0x68>
80003c3a:	70 08       	ld.w	r8,r8[0x0]
80003c3c:	10 39       	cp.w	r9,r8
80003c3e:	c0 31       	brne	80003c44 <fat_cache_read_sector+0x24>
80003c40:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80003c44:	f0 1f 00 12 	mcall	80003c8c <fat_cache_read_sector+0x6c>
80003c48:	c1 90       	breq	80003c7a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
80003c4a:	f0 1f 00 12 	mcall	80003c90 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003c4e:	48 f8       	lddpc	r8,80003c88 <fat_cache_read_sector+0x68>
80003c50:	70 0b       	ld.w	r11,r8[0x0]
80003c52:	48 c8       	lddpc	r8,80003c80 <fat_cache_read_sector+0x60>
80003c54:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80003c56:	58 07       	cp.w	r7,0
80003c58:	c0 c0       	breq	80003c70 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003c5a:	48 fa       	lddpc	r10,80003c94 <fat_cache_read_sector+0x74>
80003c5c:	48 a8       	lddpc	r8,80003c84 <fat_cache_read_sector+0x64>
80003c5e:	11 8c       	ld.ub	r12,r8[0x0]
80003c60:	f0 1f 00 0e 	mcall	80003c98 <fat_cache_read_sector+0x78>
80003c64:	c0 60       	breq	80003c70 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80003c66:	30 19       	mov	r9,1
80003c68:	48 d8       	lddpc	r8,80003c9c <fat_cache_read_sector+0x7c>
80003c6a:	b0 89       	st.b	r8[0x0],r9
80003c6c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003c70:	48 58       	lddpc	r8,80003c84 <fat_cache_read_sector+0x64>
80003c72:	11 89       	ld.ub	r9,r8[0x0]
80003c74:	48 38       	lddpc	r8,80003c80 <fat_cache_read_sector+0x60>
80003c76:	b0 89       	st.b	r8[0x0],r9
80003c78:	30 1c       	mov	r12,1
   return true;
}
80003c7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7e:	00 00       	add	r0,r0
80003c80:	00 00       	add	r0,r0
80003c82:	06 f0       	st.b	--r3,r0
80003c84:	00 00       	add	r0,r0
80003c86:	06 68       	and	r8,r3
80003c88:	00 00       	add	r0,r0
80003c8a:	04 24       	rsub	r4,r2
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	3b b4       	mov	r4,-69
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	3a a0       	mov	r0,-86
80003c94:	00 00       	add	r0,r0
80003c96:	04 68       	and	r8,r2
80003c98:	80 00       	ld.sh	r0,r0[0x0]
80003c9a:	56 00       	stdsp	sp[0x180],r0
80003c9c:	00 00       	add	r0,r0
80003c9e:	06 b8       	st.h	r3++,r8

80003ca0 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80003ca0:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003ca2:	49 f8       	lddpc	r8,80003d1c <fat_cluster_readnext+0x7c>
80003ca4:	11 89       	ld.ub	r9,r8[0x0]
80003ca6:	30 38       	mov	r8,3
80003ca8:	f0 09 18 00 	cp.b	r9,r8
80003cac:	c0 61       	brne	80003cb8 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
80003cae:	49 d8       	lddpc	r8,80003d20 <fat_cluster_readnext+0x80>
80003cb0:	90 09       	ld.sh	r9,r8[0x0]
80003cb2:	2f c9       	sub	r9,-4
80003cb4:	b0 09       	st.h	r8[0x0],r9
80003cb6:	c0 58       	rjmp	80003cc0 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003cb8:	49 a8       	lddpc	r8,80003d20 <fat_cluster_readnext+0x80>
80003cba:	90 09       	ld.sh	r9,r8[0x0]
80003cbc:	2f e9       	sub	r9,-2
80003cbe:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003cc0:	49 88       	lddpc	r8,80003d20 <fat_cluster_readnext+0x80>
80003cc2:	90 09       	ld.sh	r9,r8[0x0]
80003cc4:	e0 68 02 00 	mov	r8,512
80003cc8:	f0 09 19 00 	cp.h	r9,r8
80003ccc:	c0 c1       	brne	80003ce4 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003cce:	30 09       	mov	r9,0
80003cd0:	49 48       	lddpc	r8,80003d20 <fat_cluster_readnext+0x80>
80003cd2:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80003cd4:	49 48       	lddpc	r8,80003d24 <fat_cluster_readnext+0x84>
80003cd6:	70 09       	ld.w	r9,r8[0x0]
80003cd8:	2f f9       	sub	r9,-1
80003cda:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80003cdc:	30 1c       	mov	r12,1
80003cde:	f0 1f 00 13 	mcall	80003d28 <fat_cluster_readnext+0x88>
80003ce2:	c1 b0       	breq	80003d18 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003ce4:	49 28       	lddpc	r8,80003d2c <fat_cluster_readnext+0x8c>
80003ce6:	2f c8       	sub	r8,-4
80003ce8:	48 e9       	lddpc	r9,80003d20 <fat_cluster_readnext+0x80>
80003cea:	92 89       	ld.uh	r9,r9[0x0]
80003cec:	49 1a       	lddpc	r10,80003d30 <fat_cluster_readnext+0x90>
80003cee:	f4 09 07 0b 	ld.ub	r11,r10[r9]
80003cf2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003cf4:	12 0a       	add	r10,r9
80003cf6:	15 9a       	ld.ub	r10,r10[0x1]
80003cf8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
80003cfa:	48 9a       	lddpc	r10,80003d1c <fat_cluster_readnext+0x7c>
80003cfc:	15 8b       	ld.ub	r11,r10[0x0]
80003cfe:	30 3a       	mov	r10,3
80003d00:	f4 0b 18 00 	cp.b	r11,r10
80003d04:	c0 20       	breq	80003d08 <fat_cluster_readnext+0x68>
80003d06:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003d08:	48 aa       	lddpc	r10,80003d30 <fat_cluster_readnext+0x90>
80003d0a:	f4 09 00 09 	add	r9,r10,r9
80003d0e:	13 aa       	ld.ub	r10,r9[0x2]
80003d10:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80003d12:	13 b9       	ld.ub	r9,r9[0x3]
80003d14:	b0 89       	st.b	r8[0x0],r9
80003d16:	30 1c       	mov	r12,1
   }
   return true;
}
80003d18:	d8 02       	popm	pc
80003d1a:	00 00       	add	r0,r0
80003d1c:	00 00       	add	r0,r0
80003d1e:	06 b4       	st.h	r3++,r4
80003d20:	00 00       	add	r0,r0
80003d22:	04 38       	cp.w	r8,r2
80003d24:	00 00       	add	r0,r0
80003d26:	04 24       	rsub	r4,r2
80003d28:	80 00       	ld.sh	r0,r0[0x0]
80003d2a:	3c 20       	mov	r0,-62
80003d2c:	00 00       	add	r0,r0
80003d2e:	07 08       	ld.w	r8,r3++
80003d30:	00 00       	add	r0,r0
80003d32:	04 68       	and	r8,r2

80003d34 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80003d34:	d4 31       	pushm	r0-r7,lr
80003d36:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80003d38:	fe f8 02 18 	ld.w	r8,pc[536]
80003d3c:	11 88       	ld.ub	r8,r8[0x0]
80003d3e:	30 39       	mov	r9,3
80003d40:	f2 08 18 00 	cp.b	r8,r9
80003d44:	c0 d1       	brne	80003d5e <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80003d46:	fe fa 02 0e 	ld.w	r10,pc[526]
80003d4a:	74 09       	ld.w	r9,r10[0x0]
80003d4c:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80003d4e:	15 bb       	ld.ub	r11,r10[0x3]
80003d50:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80003d54:	a3 6b       	lsl	r11,0x2
80003d56:	fe fa 02 02 	ld.w	r10,pc[514]
80003d5a:	b4 0b       	st.h	r10[0x0],r11
80003d5c:	c2 08       	rjmp	80003d9c <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80003d5e:	30 29       	mov	r9,2
80003d60:	f2 08 18 00 	cp.b	r8,r9
80003d64:	c0 81       	brne	80003d74 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80003d66:	4f ca       	lddpc	r10,80003f54 <fat_cluster_val+0x220>
80003d68:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80003d6a:	15 bb       	ld.ub	r11,r10[0x3]
80003d6c:	a1 7b       	lsl	r11,0x1
80003d6e:	4f ba       	lddpc	r10,80003f58 <fat_cluster_val+0x224>
80003d70:	b4 0b       	st.h	r10[0x0],r11
80003d72:	c1 58       	rjmp	80003d9c <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80003d74:	30 19       	mov	r9,1
80003d76:	f2 08 18 00 	cp.b	r8,r9
80003d7a:	c0 30       	breq	80003d80 <fat_cluster_val+0x4c>
80003d7c:	30 09       	mov	r9,0
80003d7e:	c0 f8       	rjmp	80003d9c <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80003d80:	4f 59       	lddpc	r9,80003f54 <fat_cluster_val+0x220>
80003d82:	72 09       	ld.w	r9,r9[0x0]
80003d84:	4f 5a       	lddpc	r10,80003f58 <fat_cluster_val+0x224>
80003d86:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80003d8a:	12 0b       	add	r11,r9
80003d8c:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80003d8e:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80003d92:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80003d96:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80003d9a:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80003d9c:	58 05       	cp.w	r5,0
80003d9e:	c2 20       	breq	80003de2 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80003da0:	4e fa       	lddpc	r10,80003f5c <fat_cluster_val+0x228>
80003da2:	74 0a       	ld.w	r10,r10[0x0]
80003da4:	14 39       	cp.w	r9,r10
80003da6:	c0 32       	brcc	80003dac <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80003da8:	4e da       	lddpc	r10,80003f5c <fat_cluster_val+0x228>
80003daa:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80003dac:	4e da       	lddpc	r10,80003f60 <fat_cluster_val+0x22c>
80003dae:	74 0a       	ld.w	r10,r10[0x0]
80003db0:	14 39       	cp.w	r9,r10
80003db2:	e0 88 00 04 	brls	80003dba <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80003db6:	4e ba       	lddpc	r10,80003f60 <fat_cluster_val+0x22c>
80003db8:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80003dba:	30 1a       	mov	r10,1
80003dbc:	f4 08 18 00 	cp.b	r8,r10
80003dc0:	c1 11       	brne	80003de2 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003dc2:	4e 68       	lddpc	r8,80003f58 <fat_cluster_val+0x224>
80003dc4:	90 0a       	ld.sh	r10,r8[0x0]
80003dc6:	e0 68 01 ff 	mov	r8,511
80003dca:	f0 0a 19 00 	cp.h	r10,r8
80003dce:	c0 a1       	brne	80003de2 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80003dd0:	f2 c8 ff ff 	sub	r8,r9,-1
80003dd4:	4e 3a       	lddpc	r10,80003f60 <fat_cluster_val+0x22c>
80003dd6:	74 0a       	ld.w	r10,r10[0x0]
80003dd8:	14 38       	cp.w	r8,r10
80003dda:	e0 88 00 04 	brls	80003de2 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80003dde:	4e 1a       	lddpc	r10,80003f60 <fat_cluster_val+0x22c>
80003de0:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80003de2:	4e 18       	lddpc	r8,80003f64 <fat_cluster_val+0x230>
80003de4:	70 48       	ld.w	r8,r8[0x10]
80003de6:	10 09       	add	r9,r8
80003de8:	4e 08       	lddpc	r8,80003f68 <fat_cluster_val+0x234>
80003dea:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80003dec:	30 1c       	mov	r12,1
80003dee:	f0 1f 00 60 	mcall	80003f6c <fat_cluster_val+0x238>
80003df2:	e0 80 00 ad 	breq	80003f4c <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80003df6:	4d 98       	lddpc	r8,80003f58 <fat_cluster_val+0x224>
80003df8:	90 08       	ld.sh	r8,r8[0x0]
80003dfa:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80003dfe:	4d d9       	lddpc	r9,80003f70 <fat_cluster_val+0x23c>
80003e00:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80003e02:	0c 97       	mov	r7,r6
80003e04:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80003e06:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80003e08:	ec c4 ff fe 	sub	r4,r6,-2
80003e0c:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80003e0e:	ec c3 ff fd 	sub	r3,r6,-3
80003e12:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80003e14:	4c f9       	lddpc	r9,80003f50 <fat_cluster_val+0x21c>
80003e16:	13 8a       	ld.ub	r10,r9[0x0]
80003e18:	30 19       	mov	r9,1
80003e1a:	f2 0a 18 00 	cp.b	r10,r9
80003e1e:	c1 11       	brne	80003e40 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003e20:	e0 69 01 ff 	mov	r9,511
80003e24:	f2 08 19 00 	cp.h	r8,r9
80003e28:	c0 c1       	brne	80003e40 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80003e2a:	4d 08       	lddpc	r8,80003f68 <fat_cluster_val+0x234>
80003e2c:	70 09       	ld.w	r9,r8[0x0]
80003e2e:	2f f9       	sub	r9,-1
80003e30:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80003e32:	30 1c       	mov	r12,1
80003e34:	f0 1f 00 4e 	mcall	80003f6c <fat_cluster_val+0x238>
80003e38:	e0 80 00 8a 	breq	80003f4c <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80003e3c:	4c d8       	lddpc	r8,80003f70 <fat_cluster_val+0x23c>
80003e3e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80003e40:	58 05       	cp.w	r5,0
80003e42:	c3 11       	brne	80003ea4 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80003e44:	4c 48       	lddpc	r8,80003f54 <fat_cluster_val+0x220>
80003e46:	f0 c9 ff fc 	sub	r9,r8,-4
80003e4a:	f0 cc ff f9 	sub	r12,r8,-7
80003e4e:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80003e50:	2f a8       	sub	r8,-6
80003e52:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80003e54:	4b fa       	lddpc	r10,80003f50 <fat_cluster_val+0x21c>
80003e56:	15 8a       	ld.ub	r10,r10[0x0]
80003e58:	30 3b       	mov	r11,3
80003e5a:	f6 0a 18 00 	cp.b	r10,r11
80003e5e:	c0 61       	brne	80003e6a <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80003e60:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80003e62:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003e66:	b2 80       	st.b	r9[0x0],r0
80003e68:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80003e6a:	30 0b       	mov	r11,0
80003e6c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80003e6e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80003e70:	30 19       	mov	r9,1
80003e72:	f2 0a 18 00 	cp.b	r10,r9
80003e76:	c0 20       	breq	80003e7a <fat_cluster_val+0x146>
80003e78:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003e7a:	4b 79       	lddpc	r9,80003f54 <fat_cluster_val+0x220>
80003e7c:	13 b9       	ld.ub	r9,r9[0x3]
80003e7e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003e82:	c0 c0       	breq	80003e9a <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80003e84:	19 8b       	ld.ub	r11,r12[0x0]
80003e86:	a5 8b       	lsr	r11,0x4
80003e88:	11 89       	ld.ub	r9,r8[0x0]
80003e8a:	f2 0a 15 04 	lsl	r10,r9,0x4
80003e8e:	f6 0a 00 0a 	add	r10,r11,r10
80003e92:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80003e94:	a5 89       	lsr	r9,0x4
80003e96:	b0 89       	st.b	r8[0x0],r9
80003e98:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80003e9a:	11 89       	ld.ub	r9,r8[0x0]
80003e9c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80003ea0:	b0 89       	st.b	r8[0x0],r9
80003ea2:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80003ea4:	4a b8       	lddpc	r8,80003f50 <fat_cluster_val+0x21c>
80003ea6:	11 88       	ld.ub	r8,r8[0x0]
80003ea8:	30 19       	mov	r9,1
80003eaa:	f2 08 18 00 	cp.b	r8,r9
80003eae:	c3 a1       	brne	80003f22 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003eb0:	4a 98       	lddpc	r8,80003f54 <fat_cluster_val+0x220>
80003eb2:	11 b8       	ld.ub	r8,r8[0x3]
80003eb4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003eb8:	c1 10       	breq	80003eda <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80003eba:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80003ebe:	4a 68       	lddpc	r8,80003f54 <fat_cluster_val+0x220>
80003ec0:	2f c8       	sub	r8,-4
80003ec2:	11 b9       	ld.ub	r9,r8[0x3]
80003ec4:	f2 0a 15 04 	lsl	r10,r9,0x4
80003ec8:	14 05       	add	r5,r10
80003eca:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80003ecc:	a5 89       	lsr	r9,0x4
80003ece:	11 a8       	ld.ub	r8,r8[0x2]
80003ed0:	a5 68       	lsl	r8,0x4
80003ed2:	f2 08 00 0a 	add	r10,r9,r8
80003ed6:	5c 5a       	castu.b	r10
80003ed8:	c0 c8       	rjmp	80003ef0 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80003eda:	49 f8       	lddpc	r8,80003f54 <fat_cluster_val+0x220>
80003edc:	2f c8       	sub	r8,-4
80003ede:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80003ee0:	16 9a       	mov	r10,r11
80003ee2:	e2 1a 00 f0 	andl	r10,0xf0,COH
80003ee6:	11 a8       	ld.ub	r8,r8[0x2]
80003ee8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003eec:	10 0a       	add	r10,r8
80003eee:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003ef0:	49 a8       	lddpc	r8,80003f58 <fat_cluster_val+0x224>
80003ef2:	90 09       	ld.sh	r9,r8[0x0]
80003ef4:	e0 68 01 ff 	mov	r8,511
80003ef8:	f0 09 19 00 	cp.h	r9,r8
80003efc:	c2 31       	brne	80003f42 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80003efe:	49 d8       	lddpc	r8,80003f70 <fat_cluster_val+0x23c>
80003f00:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80003f02:	f0 1f 00 1d 	mcall	80003f74 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80003f06:	49 98       	lddpc	r8,80003f68 <fat_cluster_val+0x234>
80003f08:	70 09       	ld.w	r9,r8[0x0]
80003f0a:	20 19       	sub	r9,1
80003f0c:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80003f0e:	30 1c       	mov	r12,1
80003f10:	f0 1f 00 17 	mcall	80003f6c <fat_cluster_val+0x238>
80003f14:	c1 c0       	breq	80003f4c <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80003f16:	49 78       	lddpc	r8,80003f70 <fat_cluster_val+0x23c>
80003f18:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80003f1c:	f0 1f 00 16 	mcall	80003f74 <fat_cluster_val+0x240>
80003f20:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80003f22:	48 d9       	lddpc	r9,80003f54 <fat_cluster_val+0x220>
80003f24:	2f c9       	sub	r9,-4
80003f26:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80003f28:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80003f2a:	30 3b       	mov	r11,3
80003f2c:	f6 08 18 00 	cp.b	r8,r11
80003f30:	c0 91       	brne	80003f42 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80003f32:	13 98       	ld.ub	r8,r9[0x1]
80003f34:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80003f36:	e0 10 ff f0 	andl	r0,0xfff0
80003f3a:	13 88       	ld.ub	r8,r9[0x0]
80003f3c:	f0 00 00 00 	add	r0,r8,r0
80003f40:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80003f42:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80003f44:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80003f46:	f0 1f 00 0c 	mcall	80003f74 <fat_cluster_val+0x240>
80003f4a:	da 3a       	popm	r0-r7,pc,r12=1
80003f4c:	d8 3a       	popm	r0-r7,pc,r12=0
80003f4e:	00 00       	add	r0,r0
80003f50:	00 00       	add	r0,r0
80003f52:	06 b4       	st.h	r3++,r4
80003f54:	00 00       	add	r0,r0
80003f56:	07 08       	ld.w	r8,r3++
80003f58:	00 00       	add	r0,r0
80003f5a:	04 38       	cp.w	r8,r2
80003f5c:	00 00       	add	r0,r0
80003f5e:	06 9c       	mov	r12,r3
80003f60:	00 00       	add	r0,r0
80003f62:	04 64       	and	r4,r2
80003f64:	00 00       	add	r0,r0
80003f66:	06 68       	and	r8,r3
80003f68:	00 00       	add	r0,r0
80003f6a:	04 24       	rsub	r4,r2
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3c 20       	mov	r0,-62
80003f70:	00 00       	add	r0,r0
80003f72:	04 68       	and	r8,r2
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	3a b8       	mov	r8,-85

80003f78 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003f78:	d4 31       	pushm	r0-r7,lr
80003f7a:	20 2d       	sub	sp,8
80003f7c:	18 93       	mov	r3,r12
80003f7e:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80003f80:	30 89       	mov	r9,8
80003f82:	fe f8 02 8e 	ld.w	r8,pc[654]
80003f86:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80003f88:	30 38       	mov	r8,3
80003f8a:	f0 0c 18 00 	cp.b	r12,r8
80003f8e:	5f 0a       	sreq	r10
80003f90:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003f92:	fe f9 02 82 	ld.w	r9,pc[642]
80003f96:	13 89       	ld.ub	r9,r9[0x0]
80003f98:	f0 09 18 00 	cp.b	r9,r8
80003f9c:	5f 08       	sreq	r8
80003f9e:	f5 e8 00 08 	and	r8,r10,r8
80003fa2:	c0 60       	breq	80003fae <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80003fa4:	3f fc       	mov	r12,-1
80003fa6:	f0 1f 00 9d 	mcall	80004218 <fat_cluster_list+0x2a0>
80003faa:	e0 80 01 2f 	breq	80004208 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80003fae:	fe f8 02 6e 	ld.w	r8,pc[622]
80003fb2:	70 08       	ld.w	r8,r8[0x0]
80003fb4:	58 08       	cp.w	r8,0
80003fb6:	c3 b1       	brne	8000402c <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80003fb8:	40 09       	lddsp	r9,sp[0x0]
80003fba:	58 09       	cp.w	r9,0
80003fbc:	e0 81 01 26 	brne	80004208 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80003fc0:	fe f8 02 54 	ld.w	r8,pc[596]
80003fc4:	11 88       	ld.ub	r8,r8[0x0]
80003fc6:	f0 ca 00 01 	sub	r10,r8,1
80003fca:	30 19       	mov	r9,1
80003fcc:	f2 0a 18 00 	cp.b	r10,r9
80003fd0:	e0 8b 00 23 	brhi	80004016 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80003fd4:	fe f8 02 48 	ld.w	r8,pc[584]
80003fd8:	70 18       	ld.w	r8,r8[0x4]
80003fda:	fe f9 02 46 	ld.w	r9,pc[582]
80003fde:	f3 19 00 1a 	ld.uh	r9,r9[26]
80003fe2:	12 38       	cp.w	r8,r9
80003fe4:	c1 32       	brcc	8000400a <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80003fe6:	fe f9 02 36 	ld.w	r9,pc[566]
80003fea:	fe fa 02 36 	ld.w	r10,pc[566]
80003fee:	74 4b       	ld.w	r11,r10[0x10]
80003ff0:	16 08       	add	r8,r11
80003ff2:	f5 1b 00 18 	ld.uh	r11,r10[24]
80003ff6:	16 08       	add	r8,r11
80003ff8:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80003ffa:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80003ffe:	72 18       	ld.w	r8,r9[0x4]
80004000:	f4 08 01 08 	sub	r8,r10,r8
80004004:	93 18       	st.w	r9[0x4],r8
80004006:	30 1c       	mov	r12,1
            return true;
80004008:	c0 19       	rjmp	8000420a <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
8000400a:	31 a9       	mov	r9,26
8000400c:	fe f8 02 04 	ld.w	r8,pc[516]
80004010:	b0 89       	st.b	r8[0x0],r9
80004012:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004014:	cf b8       	rjmp	8000420a <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004016:	30 39       	mov	r9,3
80004018:	f2 08 18 00 	cp.b	r8,r9
8000401c:	c0 a1       	brne	80004030 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000401e:	fe f8 02 02 	ld.w	r8,pc[514]
80004022:	70 69       	ld.w	r9,r8[0x18]
80004024:	fe f8 02 00 	ld.w	r8,pc[512]
80004028:	91 09       	st.w	r8[0x0],r9
8000402a:	c0 38       	rjmp	80004030 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000402c:	4f e9       	lddpc	r9,80004224 <fat_cluster_list+0x2ac>
8000402e:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004030:	30 38       	mov	r8,3
80004032:	f0 03 18 00 	cp.b	r3,r8
80004036:	c0 70       	breq	80004044 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004038:	0e 9c       	mov	r12,r7
8000403a:	f0 1f 00 7c 	mcall	80004228 <fat_cluster_list+0x2b0>
8000403e:	c0 70       	breq	8000404c <fat_cluster_list+0xd4>
80004040:	30 1c       	mov	r12,1
80004042:	ce 48       	rjmp	8000420a <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004044:	f0 1f 00 7a 	mcall	8000422c <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004048:	f0 1f 00 7a 	mcall	80004230 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
8000404c:	4f 40       	lddpc	r0,8000421c <fat_cluster_list+0x2a4>
8000404e:	3f f8       	mov	r8,-1
80004050:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004052:	00 96       	mov	r6,r0
80004054:	4f 35       	lddpc	r5,80004220 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004056:	4f 47       	lddpc	r7,80004224 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004058:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000405a:	e0 c8 ff f9 	sub	r8,r0,-7
8000405e:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004060:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004062:	6c 19       	ld.w	r9,r6[0x4]
80004064:	0b 98       	ld.ub	r8,r5[0x1]
80004066:	10 39       	cp.w	r9,r8
80004068:	c4 32       	brcc	800040ee <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000406a:	6a 4a       	ld.w	r10,r5[0x10]
8000406c:	14 09       	add	r9,r10
8000406e:	6a 5a       	ld.w	r10,r5[0x14]
80004070:	14 09       	add	r9,r10
80004072:	6e 0a       	ld.w	r10,r7[0x0]
80004074:	20 2a       	sub	r10,2
80004076:	f4 08 02 48 	mul	r8,r10,r8
8000407a:	f2 08 00 08 	add	r8,r9,r8
8000407e:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004080:	e2 03 18 00 	cp.b	r3,r1
80004084:	c0 d1       	brne	8000409e <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004086:	4e 67       	lddpc	r7,8000421c <fat_cluster_list+0x2a4>
80004088:	4e 68       	lddpc	r8,80004220 <fat_cluster_list+0x2a8>
8000408a:	11 99       	ld.ub	r9,r8[0x1]
8000408c:	6e 18       	ld.w	r8,r7[0x4]
8000408e:	f2 08 01 08 	sub	r8,r9,r8
80004092:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004094:	f0 1f 00 68 	mcall	80004234 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004098:	30 1c       	mov	r12,1
8000409a:	8f 1c       	st.w	r7[0x4],r12
            return true;
8000409c:	cb 78       	rjmp	8000420a <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000409e:	0b 99       	ld.ub	r9,r5[0x1]
800040a0:	40 1a       	lddsp	r10,sp[0x4]
800040a2:	15 88       	ld.ub	r8,r10[0x0]
800040a4:	f2 08 01 08 	sub	r8,r9,r8
800040a8:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
800040aa:	e4 03 18 00 	cp.b	r3,r2
800040ae:	c2 01       	brne	800040ee <fat_cluster_list+0x176>
800040b0:	4d 99       	lddpc	r9,80004214 <fat_cluster_list+0x29c>
800040b2:	13 88       	ld.ub	r8,r9[0x0]
800040b4:	e4 08 18 00 	cp.b	r8,r2
800040b8:	c1 b0       	breq	800040ee <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
800040ba:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800040bc:	30 0c       	mov	r12,0
800040be:	f0 1f 00 5f 	mcall	80004238 <fat_cluster_list+0x2c0>
800040c2:	e0 80 00 a3 	breq	80004208 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
800040c6:	6e 09       	ld.w	r9,r7[0x0]
800040c8:	f2 c8 ff ff 	sub	r8,r9,-1
800040cc:	8f 08       	st.w	r7[0x0],r8
800040ce:	6e 1a       	ld.w	r10,r7[0x4]
800040d0:	14 38       	cp.w	r8,r10
800040d2:	c0 a0       	breq	800040e6 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
800040d4:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
800040d6:	08 19       	sub	r9,r4
800040d8:	0b 98       	ld.ub	r8,r5[0x1]
800040da:	b1 39       	mul	r9,r8
800040dc:	6c 18       	ld.w	r8,r6[0x4]
800040de:	f2 08 00 08 	add	r8,r9,r8
800040e2:	8d 18       	st.w	r6[0x4],r8
                  break;
800040e4:	c0 58       	rjmp	800040ee <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
800040e6:	f0 1f 00 56 	mcall	8000423c <fat_cluster_list+0x2c4>
800040ea:	ce e1       	brne	800040c6 <fat_cluster_list+0x14e>
800040ec:	c8 e8       	rjmp	80004208 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800040ee:	30 0c       	mov	r12,0
800040f0:	f0 1f 00 52 	mcall	80004238 <fat_cluster_list+0x2c0>
800040f4:	e0 80 00 8a 	breq	80004208 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
800040f8:	f0 1f 00 52 	mcall	80004240 <fat_cluster_list+0x2c8>
800040fc:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
800040fe:	e4 0c 18 00 	cp.b	r12,r2
80004102:	e0 80 00 83 	breq	80004208 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004106:	01 89       	ld.ub	r9,r0[0x0]
80004108:	3f f8       	mov	r8,-1
8000410a:	f0 09 18 00 	cp.b	r9,r8
8000410e:	c4 61       	brne	8000419a <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004110:	e2 0c 18 00 	cp.b	r12,r1
80004114:	c2 b1       	brne	8000416a <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004116:	4c 28       	lddpc	r8,8000421c <fat_cluster_list+0x2a4>
80004118:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
8000411a:	4c b9       	lddpc	r9,80004244 <fat_cluster_list+0x2cc>
8000411c:	13 89       	ld.ub	r9,r9[0x0]
8000411e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004122:	4c aa       	lddpc	r10,80004248 <fat_cluster_list+0x2d0>
80004124:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004128:	72 2a       	ld.w	r10,r9[0x8]
8000412a:	0e 1a       	sub	r10,r7
8000412c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000412e:	4b d9       	lddpc	r9,80004220 <fat_cluster_list+0x2a8>
80004130:	72 5b       	ld.w	r11,r9[0x14]
80004132:	72 4a       	ld.w	r10,r9[0x10]
80004134:	14 0b       	add	r11,r10
80004136:	13 99       	ld.ub	r9,r9[0x1]
80004138:	4b ba       	lddpc	r10,80004224 <fat_cluster_list+0x2ac>
8000413a:	74 0a       	ld.w	r10,r10[0x0]
8000413c:	20 2a       	sub	r10,2
8000413e:	f2 0a 02 4a 	mul	r10,r9,r10
80004142:	f6 0a 00 0a 	add	r10,r11,r10
80004146:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004148:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
8000414a:	30 38       	mov	r8,3
8000414c:	f0 03 18 00 	cp.b	r3,r8
80004150:	c0 30       	breq	80004156 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004152:	f0 1f 00 39 	mcall	80004234 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004156:	4b 28       	lddpc	r8,8000421c <fat_cluster_list+0x2a4>
80004158:	4b 39       	lddpc	r9,80004224 <fat_cluster_list+0x2ac>
8000415a:	72 09       	ld.w	r9,r9[0x0]
8000415c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
8000415e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004160:	31 a9       	mov	r9,26
80004162:	4a c8       	lddpc	r8,80004210 <fat_cluster_list+0x298>
80004164:	b0 89       	st.b	r8[0x0],r9
80004166:	30 0c       	mov	r12,0
            return false;
80004168:	c5 18       	rjmp	8000420a <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000416a:	0b 98       	ld.ub	r8,r5[0x1]
8000416c:	6c 19       	ld.w	r9,r6[0x4]
8000416e:	f2 08 01 08 	sub	r8,r9,r8
80004172:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004174:	40 0a       	lddsp	r10,sp[0x0]
80004176:	58 0a       	cp.w	r10,0
80004178:	c4 50       	breq	80004202 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
8000417a:	58 08       	cp.w	r8,0
8000417c:	c4 31       	brne	80004202 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
8000417e:	6e 18       	ld.w	r8,r7[0x4]
80004180:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004182:	e0 68 ff ff 	mov	r8,65535
80004186:	ea 18 0f ff 	orh	r8,0xfff
8000418a:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
8000418c:	30 1c       	mov	r12,1
8000418e:	f0 1f 00 2b 	mcall	80004238 <fat_cluster_list+0x2c0>
80004192:	c3 b0       	breq	80004208 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004194:	6c 08       	ld.w	r8,r6[0x0]
80004196:	8f 18       	st.w	r7[0x4],r8
80004198:	c3 58       	rjmp	80004202 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
8000419a:	e4 03 18 00 	cp.b	r3,r2
8000419e:	c0 a1       	brne	800041b2 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
800041a0:	6e 09       	ld.w	r9,r7[0x0]
800041a2:	2f f9       	sub	r9,-1
800041a4:	6e 18       	ld.w	r8,r7[0x4]
800041a6:	10 39       	cp.w	r9,r8
800041a8:	c1 b0       	breq	800041de <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
800041aa:	f0 1f 00 23 	mcall	80004234 <fat_cluster_list+0x2bc>
800041ae:	30 1c       	mov	r12,1
               return true;                              // End of segment
800041b0:	c2 d8       	rjmp	8000420a <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
800041b2:	40 09       	lddsp	r9,sp[0x0]
800041b4:	58 09       	cp.w	r9,0
800041b6:	c1 40       	breq	800041de <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
800041b8:	6e 18       	ld.w	r8,r7[0x4]
800041ba:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
800041bc:	30 08       	mov	r8,0
800041be:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
800041c0:	0b 98       	ld.ub	r8,r5[0x1]
800041c2:	6c 19       	ld.w	r9,r6[0x4]
800041c4:	10 39       	cp.w	r9,r8
800041c6:	c0 62       	brcc	800041d2 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
800041c8:	e0 68 ff ff 	mov	r8,65535
800041cc:	ea 18 0f ff 	orh	r8,0xfff
800041d0:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800041d2:	30 1c       	mov	r12,1
800041d4:	f0 1f 00 19 	mcall	80004238 <fat_cluster_list+0x2c0>
800041d8:	c1 80       	breq	80004208 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
800041da:	6c 08       	ld.w	r8,r6[0x0]
800041dc:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
800041de:	e2 04 18 00 	cp.b	r4,r1
800041e2:	c0 b1       	brne	800041f8 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
800041e4:	40 0a       	lddsp	r10,sp[0x0]
800041e6:	58 0a       	cp.w	r10,0
800041e8:	c0 40       	breq	800041f0 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
800041ea:	f0 1f 00 19 	mcall	8000424c <fat_cluster_list+0x2d4>
800041ee:	c0 e8       	rjmp	8000420a <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
800041f0:	f0 1f 00 11 	mcall	80004234 <fat_cluster_list+0x2bc>
800041f4:	30 1c       	mov	r12,1
            return true; // End of segment
800041f6:	c0 a8       	rjmp	8000420a <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
800041f8:	0b 99       	ld.ub	r9,r5[0x1]
800041fa:	6c 18       	ld.w	r8,r6[0x4]
800041fc:	f2 08 00 08 	add	r8,r9,r8
80004200:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004202:	6e 18       	ld.w	r8,r7[0x4]
80004204:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004206:	c2 eb       	rjmp	80004062 <fat_cluster_list+0xea>
80004208:	30 0c       	mov	r12,0
}
8000420a:	2f ed       	sub	sp,-8
8000420c:	d8 32       	popm	r0-r7,pc
8000420e:	00 00       	add	r0,r0
80004210:	00 00       	add	r0,r0
80004212:	06 b8       	st.h	r3++,r8
80004214:	00 00       	add	r0,r0
80004216:	06 b4       	st.h	r3++,r4
80004218:	80 00       	ld.sh	r0,r0[0x0]
8000421a:	47 14       	lddsp	r4,sp[0x1c4]
8000421c:	00 00       	add	r0,r0
8000421e:	07 10       	ld.sh	r0,r3++
80004220:	00 00       	add	r0,r0
80004222:	06 68       	and	r8,r3
80004224:	00 00       	add	r0,r0
80004226:	07 08       	ld.w	r8,r3++
80004228:	80 00       	ld.sh	r0,r0[0x0]
8000422a:	35 c0       	mov	r0,92
8000422c:	80 00       	ld.sh	r0,r0[0x0]
8000422e:	34 98       	mov	r8,73
80004230:	80 00       	ld.sh	r0,r0[0x0]
80004232:	44 7c       	lddsp	r12,sp[0x11c]
80004234:	80 00       	ld.sh	r0,r0[0x0]
80004236:	35 68       	mov	r8,86
80004238:	80 00       	ld.sh	r0,r0[0x0]
8000423a:	3d 34       	mov	r4,-45
8000423c:	80 00       	ld.sh	r0,r0[0x0]
8000423e:	3c a0       	mov	r0,-54
80004240:	80 00       	ld.sh	r0,r0[0x0]
80004242:	34 38       	mov	r8,67
80004244:	00 00       	add	r0,r0
80004246:	06 ba       	st.h	r3++,r10
80004248:	00 00       	add	r0,r0
8000424a:	04 3c       	cp.w	r12,r2
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	45 08       	lddsp	r8,sp[0x140]

80004250 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004250:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004254:	49 98       	lddpc	r8,800042b8 <fat_read_dir+0x68>
80004256:	90 97       	ld.uh	r7,r8[0x2]
80004258:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000425a:	49 98       	lddpc	r8,800042bc <fat_read_dir+0x6c>
8000425c:	11 89       	ld.ub	r9,r8[0x0]
8000425e:	49 98       	lddpc	r8,800042c0 <fat_read_dir+0x70>
80004260:	11 88       	ld.ub	r8,r8[0x0]
80004262:	f0 09 18 00 	cp.b	r9,r8
80004266:	c0 d1       	brne	80004280 <fat_read_dir+0x30>
80004268:	49 58       	lddpc	r8,800042bc <fat_read_dir+0x6c>
8000426a:	70 39       	ld.w	r9,r8[0xc]
8000426c:	49 58       	lddpc	r8,800042c0 <fat_read_dir+0x70>
8000426e:	70 88       	ld.w	r8,r8[0x20]
80004270:	10 39       	cp.w	r9,r8
80004272:	c0 71       	brne	80004280 <fat_read_dir+0x30>
80004274:	49 28       	lddpc	r8,800042bc <fat_read_dir+0x6c>
80004276:	70 48       	ld.w	r8,r8[0x10]
80004278:	0e 38       	cp.w	r8,r7
8000427a:	c0 31       	brne	80004280 <fat_read_dir+0x30>
8000427c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004280:	49 18       	lddpc	r8,800042c4 <fat_read_dir+0x74>
80004282:	49 09       	lddpc	r9,800042c0 <fat_read_dir+0x70>
80004284:	72 89       	ld.w	r9,r9[0x20]
80004286:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004288:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
8000428a:	30 0b       	mov	r11,0
8000428c:	30 2c       	mov	r12,2
8000428e:	f0 1f 00 0f 	mcall	800042c8 <fat_read_dir+0x78>
80004292:	c1 00       	breq	800042b2 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004294:	48 c8       	lddpc	r8,800042c4 <fat_read_dir+0x74>
80004296:	70 09       	ld.w	r9,r8[0x0]
80004298:	48 d8       	lddpc	r8,800042cc <fat_read_dir+0x7c>
8000429a:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
8000429c:	30 1c       	mov	r12,1
8000429e:	f0 1f 00 0d 	mcall	800042d0 <fat_read_dir+0x80>
800042a2:	c0 80       	breq	800042b2 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
800042a4:	48 68       	lddpc	r8,800042bc <fat_read_dir+0x6c>
800042a6:	48 79       	lddpc	r9,800042c0 <fat_read_dir+0x70>
800042a8:	72 89       	ld.w	r9,r9[0x20]
800042aa:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
800042ac:	91 47       	st.w	r8[0x10],r7
800042ae:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
800042b2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800042b6:	00 00       	add	r0,r0
800042b8:	00 00       	add	r0,r0
800042ba:	06 b4       	st.h	r3++,r4
800042bc:	00 00       	add	r0,r0
800042be:	06 f0       	st.b	--r3,r0
800042c0:	00 00       	add	r0,r0
800042c2:	06 68       	and	r8,r3
800042c4:	00 00       	add	r0,r0
800042c6:	07 10       	ld.sh	r0,r3++
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	3f 78       	mov	r8,-9
800042cc:	00 00       	add	r0,r0
800042ce:	04 24       	rsub	r4,r2
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	3c 20       	mov	r0,-62

800042d4 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
800042d4:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
800042d6:	4a 28       	lddpc	r8,8000435c <fat_check_device+0x88>
800042d8:	11 89       	ld.ub	r9,r8[0x0]
800042da:	30 08       	mov	r8,0
800042dc:	f0 09 18 00 	cp.b	r9,r8
800042e0:	c3 c1       	brne	80004358 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
800042e2:	4a 08       	lddpc	r8,80004360 <fat_check_device+0x8c>
800042e4:	11 89       	ld.ub	r9,r8[0x0]
800042e6:	3f f8       	mov	r8,-1
800042e8:	f0 09 18 00 	cp.b	r9,r8
800042ec:	c0 51       	brne	800042f6 <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
800042ee:	30 19       	mov	r9,1
800042f0:	49 d8       	lddpc	r8,80004364 <fat_check_device+0x90>
800042f2:	b0 89       	st.b	r8[0x0],r9
800042f4:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
800042f6:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
800042f8:	49 a5       	lddpc	r5,80004360 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800042fa:	49 c1       	lddpc	r1,80004368 <fat_check_device+0x94>
800042fc:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
800042fe:	49 c0       	lddpc	r0,8000436c <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004300:	49 c4       	lddpc	r4,80004370 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004302:	49 d3       	lddpc	r3,80004374 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80004304:	0b 8c       	ld.ub	r12,r5[0x0]
80004306:	f0 1f 00 1d 	mcall	80004378 <fat_check_device+0xa4>
8000430a:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
8000430c:	c2 60       	breq	80004358 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000430e:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80004310:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004312:	0b 88       	ld.ub	r8,r5[0x0]
80004314:	09 89       	ld.ub	r9,r4[0x0]
80004316:	f0 09 18 00 	cp.b	r9,r8
8000431a:	c0 51       	brne	80004324 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
8000431c:	49 89       	lddpc	r9,8000437c <fat_check_device+0xa8>
8000431e:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80004320:	49 89       	lddpc	r9,80004380 <fat_check_device+0xac>
80004322:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004324:	07 89       	ld.ub	r9,r3[0x0]
80004326:	f0 09 18 00 	cp.b	r9,r8
8000432a:	c0 31       	brne	80004330 <fat_check_device+0x5c>
      {
         fat_cache_reset();
8000432c:	f0 1f 00 16 	mcall	80004384 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80004330:	f0 1f 00 16 	mcall	80004388 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80004334:	30 18       	mov	r8,1
80004336:	48 c9       	lddpc	r9,80004364 <fat_check_device+0x90>
80004338:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
8000433a:	58 37       	cp.w	r7,3
8000433c:	c0 81       	brne	8000434c <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
8000433e:	10 02       	add	r2,r8
80004340:	5c 52       	castu.b	r2
80004342:	36 48       	mov	r8,100
80004344:	f0 02 18 00 	cp.b	r2,r8
80004348:	cd e1       	brne	80004304 <fat_check_device+0x30>
8000434a:	c0 88       	rjmp	8000435a <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
8000434c:	58 27       	cp.w	r7,2
8000434e:	c0 61       	brne	8000435a <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80004350:	31 89       	mov	r9,24
80004352:	48 58       	lddpc	r8,80004364 <fat_check_device+0x90>
80004354:	b0 89       	st.b	r8[0x0],r9
80004356:	d8 3a       	popm	r0-r7,pc,r12=0
80004358:	da 3a       	popm	r0-r7,pc,r12=1
8000435a:	d8 3a       	popm	r0-r7,pc,r12=0
8000435c:	00 00       	add	r0,r0
8000435e:	04 3a       	cp.w	r10,r2
80004360:	00 00       	add	r0,r0
80004362:	06 68       	and	r8,r3
80004364:	00 00       	add	r0,r0
80004366:	06 b8       	st.h	r3++,r8
80004368:	00 00       	add	r0,r0
8000436a:	06 b4       	st.h	r3++,r4
8000436c:	00 00       	add	r0,r0
8000436e:	04 28       	rsub	r8,r2
80004370:	00 00       	add	r0,r0
80004372:	06 bc       	st.h	r3++,r12
80004374:	00 00       	add	r0,r0
80004376:	06 f0       	st.b	--r3,r0
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	55 b8       	stdsp	sp[0x16c],r8
8000437c:	00 00       	add	r0,r0
8000437e:	06 b0       	st.h	r3++,r0
80004380:	00 00       	add	r0,r0
80004382:	06 a0       	st.w	r3++,r0
80004384:	80 00       	ld.sh	r0,r0[0x0]
80004386:	3a a0       	mov	r0,-86
80004388:	80 00       	ld.sh	r0,r0[0x0]
8000438a:	34 98       	mov	r8,73

8000438c <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
8000438c:	d4 01       	pushm	lr
   if( !fat_check_device() )
8000438e:	f0 1f 00 0b 	mcall	800043b8 <fat_check_noopen+0x2c>
80004392:	c1 10       	breq	800043b4 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80004394:	48 a8       	lddpc	r8,800043bc <fat_check_noopen+0x30>
80004396:	11 89       	ld.ub	r9,r8[0x0]
80004398:	30 08       	mov	r8,0
8000439a:	f0 09 18 00 	cp.b	r9,r8
8000439e:	c0 b0       	breq	800043b4 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
800043a0:	48 88       	lddpc	r8,800043c0 <fat_check_noopen+0x34>
800043a2:	11 89       	ld.ub	r9,r8[0x0]
800043a4:	30 08       	mov	r8,0
800043a6:	f0 09 18 00 	cp.b	r9,r8
800043aa:	c0 50       	breq	800043b4 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
800043ac:	30 59       	mov	r9,5
800043ae:	48 68       	lddpc	r8,800043c4 <fat_check_noopen+0x38>
800043b0:	b0 89       	st.b	r8[0x0],r9
800043b2:	d8 0a       	popm	pc,r12=0
      return false;
800043b4:	da 0a       	popm	pc,r12=1
800043b6:	00 00       	add	r0,r0
800043b8:	80 00       	ld.sh	r0,r0[0x0]
800043ba:	42 d4       	lddsp	r4,sp[0xb4]
800043bc:	00 00       	add	r0,r0
800043be:	06 b4       	st.h	r3++,r4
800043c0:	00 00       	add	r0,r0
800043c2:	04 28       	rsub	r8,r2
800043c4:	00 00       	add	r0,r0
800043c6:	06 b8       	st.h	r3++,r8

800043c8 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
800043c8:	d4 01       	pushm	lr
   if( !fat_check_device() )
800043ca:	f0 1f 00 0a 	mcall	800043f0 <fat_check_mount+0x28>
800043ce:	c0 f0       	breq	800043ec <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800043d0:	48 98       	lddpc	r8,800043f4 <fat_check_mount+0x2c>
800043d2:	11 89       	ld.ub	r9,r8[0x0]
800043d4:	30 08       	mov	r8,0
800043d6:	f0 09 18 00 	cp.b	r9,r8
800043da:	c0 81       	brne	800043ea <fat_check_mount+0x22>
   {
      if( !fat_mount() )
800043dc:	f0 1f 00 07 	mcall	800043f8 <fat_check_mount+0x30>
800043e0:	c0 51       	brne	800043ea <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
800043e2:	30 e9       	mov	r9,14
800043e4:	48 68       	lddpc	r8,800043fc <fat_check_mount+0x34>
800043e6:	b0 89       	st.b	r8[0x0],r9
         return false;
800043e8:	d8 02       	popm	pc
800043ea:	30 1c       	mov	r12,1
      }
   }
   return true;
}
800043ec:	d8 02       	popm	pc
800043ee:	00 00       	add	r0,r0
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	42 d4       	lddsp	r4,sp[0xb4]
800043f4:	00 00       	add	r0,r0
800043f6:	06 b4       	st.h	r3++,r4
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	4d 4c       	lddpc	r12,80004548 <fat_update_fat2+0x40>
800043fc:	00 00       	add	r0,r0
800043fe:	06 b8       	st.h	r3++,r8

80004400 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80004400:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004402:	f0 1f 00 04 	mcall	80004410 <fat_check_mount_select+0x10>
80004406:	c0 30       	breq	8000440c <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80004408:	f0 1f 00 03 	mcall	80004414 <fat_check_mount_select+0x14>
}
8000440c:	d8 02       	popm	pc
8000440e:	00 00       	add	r0,r0
80004410:	80 00       	ld.sh	r0,r0[0x0]
80004412:	43 c8       	lddsp	r8,sp[0xf0]
80004414:	80 00       	ld.sh	r0,r0[0x0]
80004416:	34 18       	mov	r8,65

80004418 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80004418:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000441a:	f0 1f 00 04 	mcall	80004428 <fat_check_mount_noopen+0x10>
8000441e:	c0 30       	breq	80004424 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80004420:	f0 1f 00 03 	mcall	8000442c <fat_check_mount_noopen+0x14>
}
80004424:	d8 02       	popm	pc
80004426:	00 00       	add	r0,r0
80004428:	80 00       	ld.sh	r0,r0[0x0]
8000442a:	43 c8       	lddsp	r8,sp[0xf0]
8000442c:	80 00       	ld.sh	r0,r0[0x0]
8000442e:	43 8c       	lddsp	r12,sp[0xe0]

80004430 <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80004430:	f8 c9 00 21 	sub	r9,r12,33
80004434:	35 d8       	mov	r8,93
80004436:	f0 09 18 00 	cp.b	r9,r8
8000443a:	e0 8b 00 1d 	brhi	80004474 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000443e:	f8 c9 00 61 	sub	r9,r12,97
80004442:	31 98       	mov	r8,25
80004444:	f0 09 18 00 	cp.b	r9,r8
80004448:	e0 88 00 07 	brls	80004456 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
8000444c:	32 b8       	mov	r8,43
8000444e:	f0 0c 18 00 	cp.b	r12,r8
80004452:	c0 51       	brne	8000445c <fat_translate_char_shortname+0x2c>
80004454:	c1 08       	rjmp	80004474 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80004456:	22 0c       	sub	r12,32
80004458:	5c 5c       	castu.b	r12
8000445a:	5e fc       	retal	r12
8000445c:	48 7a       	lddpc	r10,80004478 <fat_translate_char_shortname+0x48>
8000445e:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
80004462:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80004464:	11 89       	ld.ub	r9,r8[0x0]
80004466:	f8 09 18 00 	cp.b	r9,r12
8000446a:	c0 50       	breq	80004474 <fat_translate_char_shortname+0x44>
8000446c:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000446e:	14 38       	cp.w	r8,r10
80004470:	cf a1       	brne	80004464 <fat_translate_char_shortname+0x34>
80004472:	5e fc       	retal	r12
80004474:	5e fd       	retal	0
80004476:	00 00       	add	r0,r0
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	5d a4       	*unknown*

8000447c <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000447c:	3f f9       	mov	r9,-1
8000447e:	48 48       	lddpc	r8,8000448c <fat_clear_info_fat_mod+0x10>
80004480:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80004482:	30 09       	mov	r9,0
80004484:	48 38       	lddpc	r8,80004490 <fat_clear_info_fat_mod+0x14>
80004486:	91 09       	st.w	r8[0x0],r9
}
80004488:	5e fc       	retal	r12
8000448a:	00 00       	add	r0,r0
8000448c:	00 00       	add	r0,r0
8000448e:	06 9c       	mov	r12,r3
80004490:	00 00       	add	r0,r0
80004492:	04 64       	and	r4,r2

80004494 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
80004494:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80004496:	30 0b       	mov	r11,0
80004498:	49 58       	lddpc	r8,800044ec <fat_clear_cluster+0x58>
8000449a:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000449c:	30 2c       	mov	r12,2
8000449e:	f0 1f 00 15 	mcall	800044f0 <fat_clear_cluster+0x5c>
800044a2:	c2 30       	breq	800044e8 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800044a4:	49 48       	lddpc	r8,800044f4 <fat_clear_cluster+0x60>
800044a6:	11 98       	ld.ub	r8,r8[0x1]
800044a8:	49 19       	lddpc	r9,800044ec <fat_clear_cluster+0x58>
800044aa:	72 0a       	ld.w	r10,r9[0x0]
800044ac:	20 1a       	sub	r10,1
800044ae:	10 0a       	add	r10,r8
800044b0:	49 29       	lddpc	r9,800044f8 <fat_clear_cluster+0x64>
800044b2:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
800044b4:	58 08       	cp.w	r8,0
800044b6:	c1 a0       	breq	800044ea <fat_clear_cluster+0x56>
800044b8:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800044ba:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
800044bc:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800044be:	48 e5       	lddpc	r5,800044f4 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800044c0:	08 9c       	mov	r12,r4
800044c2:	f0 1f 00 0f 	mcall	800044fc <fat_clear_cluster+0x68>
800044c6:	c1 10       	breq	800044e8 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800044c8:	58 07       	cp.w	r7,0
800044ca:	c0 31       	brne	800044d0 <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800044cc:	f0 1f 00 0d 	mcall	80004500 <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800044d0:	f0 1f 00 0d 	mcall	80004504 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
800044d4:	6c 08       	ld.w	r8,r6[0x0]
800044d6:	20 18       	sub	r8,1
800044d8:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800044da:	2f f7       	sub	r7,-1
800044dc:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800044de:	0b 98       	ld.ub	r8,r5[0x1]
800044e0:	ee 08 18 00 	cp.b	r8,r7
800044e4:	ce e1       	brne	800044c0 <fat_clear_cluster+0x2c>
800044e6:	c0 28       	rjmp	800044ea <fat_clear_cluster+0x56>
800044e8:	d8 2a       	popm	r4-r7,pc,r12=0
800044ea:	da 2a       	popm	r4-r7,pc,r12=1
800044ec:	00 00       	add	r0,r0
800044ee:	07 10       	ld.sh	r0,r3++
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	3f 78       	mov	r8,-9
800044f4:	00 00       	add	r0,r0
800044f6:	06 68       	and	r8,r3
800044f8:	00 00       	add	r0,r0
800044fa:	04 24       	rsub	r4,r2
800044fc:	80 00       	ld.sh	r0,r0[0x0]
800044fe:	3c 20       	mov	r0,-62
80004500:	80 00       	ld.sh	r0,r0[0x0]
80004502:	3c 08       	mov	r8,-64
80004504:	80 00       	ld.sh	r0,r0[0x0]
80004506:	3a b8       	mov	r8,-85

80004508 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80004508:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000450c:	49 68       	lddpc	r8,80004564 <fat_update_fat2+0x5c>
8000450e:	70 08       	ld.w	r8,r8[0x0]
80004510:	49 69       	lddpc	r9,80004568 <fat_update_fat2+0x60>
80004512:	72 09       	ld.w	r9,r9[0x0]
80004514:	12 38       	cp.w	r8,r9
80004516:	e0 8b 00 25 	brhi	80004560 <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000451a:	49 55       	lddpc	r5,8000456c <fat_update_fat2+0x64>
8000451c:	49 57       	lddpc	r7,80004570 <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000451e:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004520:	49 16       	lddpc	r6,80004564 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004522:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004524:	49 14       	lddpc	r4,80004568 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004526:	6e 49       	ld.w	r9,r7[0x10]
80004528:	12 08       	add	r8,r9
8000452a:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000452c:	06 9c       	mov	r12,r3
8000452e:	f0 1f 00 12 	mcall	80004574 <fat_update_fat2+0x6c>
80004532:	c1 50       	breq	8000455c <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004534:	6e 19       	ld.w	r9,r7[0x4]
80004536:	6e 48       	ld.w	r8,r7[0x10]
80004538:	f2 08 00 08 	add	r8,r9,r8
8000453c:	6c 09       	ld.w	r9,r6[0x0]
8000453e:	12 08       	add	r8,r9
80004540:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004542:	04 9c       	mov	r12,r2
80004544:	f0 1f 00 0c 	mcall	80004574 <fat_update_fat2+0x6c>
80004548:	c0 a0       	breq	8000455c <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000454a:	f0 1f 00 0c 	mcall	80004578 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000454e:	6c 08       	ld.w	r8,r6[0x0]
80004550:	2f f8       	sub	r8,-1
80004552:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004554:	68 09       	ld.w	r9,r4[0x0]
80004556:	10 39       	cp.w	r9,r8
80004558:	ce 72       	brcc	80004526 <fat_update_fat2+0x1e>
8000455a:	c0 38       	rjmp	80004560 <fat_update_fat2+0x58>
8000455c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80004560:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80004564:	00 00       	add	r0,r0
80004566:	06 9c       	mov	r12,r3
80004568:	00 00       	add	r0,r0
8000456a:	04 64       	and	r4,r2
8000456c:	00 00       	add	r0,r0
8000456e:	04 24       	rsub	r4,r2
80004570:	00 00       	add	r0,r0
80004572:	06 68       	and	r8,r3
80004574:	80 00       	ld.sh	r0,r0[0x0]
80004576:	3c 20       	mov	r0,-62
80004578:	80 00       	ld.sh	r0,r0[0x0]
8000457a:	3a b8       	mov	r8,-85

8000457c <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
8000457c:	d4 31       	pushm	r0-r7,lr
8000457e:	20 5d       	sub	sp,20
80004580:	18 97       	mov	r7,r12
80004582:	50 3b       	stdsp	sp[0xc],r11
80004584:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
80004586:	f0 1f 00 30 	mcall	80004644 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
8000458a:	f0 1f 00 30 	mcall	80004648 <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
8000458e:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80004590:	30 01       	mov	r1,0
80004592:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80004594:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80004596:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80004598:	30 c6       	mov	r6,12
8000459a:	31 ab       	mov	r11,26
8000459c:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000459e:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
800045a0:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
800045a2:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800045a4:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
800045a6:	f2 08 18 00 	cp.b	r8,r9
800045aa:	c0 31       	brne	800045b0 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
800045ac:	b8 83       	st.b	r12[0x0],r3
         continue;
800045ae:	c4 58       	rjmp	80004638 <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
800045b0:	ec 08 18 00 	cp.b	r8,r6
800045b4:	5f 00       	sreq	r0
800045b6:	f6 08 18 00 	cp.b	r8,r11
800045ba:	5f 04       	sreq	r4
800045bc:	08 40       	or	r0,r4
800045be:	00 94       	mov	r4,r0
800045c0:	f4 00 18 00 	cp.b	r0,r10
800045c4:	c3 21       	brne	80004628 <fat_create_long_name_entry+0xac>
800045c6:	ea 08 18 00 	cp.b	r8,r5
800045ca:	c3 70       	breq	80004638 <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
800045cc:	e4 08 18 00 	cp.b	r8,r2
800045d0:	c0 41       	brne	800045d8 <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
800045d2:	40 34       	lddsp	r4,sp[0xc]
800045d4:	b8 84       	st.b	r12[0x0],r4
         continue;
800045d6:	c3 18       	rjmp	80004638 <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
800045d8:	40 01       	lddsp	r1,sp[0x0]
800045da:	58 01       	cp.w	r1,0
800045dc:	c2 41       	brne	80004624 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
800045de:	0f 84       	ld.ub	r4,r7[0x0]
800045e0:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
800045e4:	35 c1       	mov	r1,92
800045e6:	e2 04 19 00 	cp.h	r4,r1
800045ea:	5f 00       	sreq	r0
800045ec:	50 20       	stdsp	sp[0x8],r0
800045ee:	32 f0       	mov	r0,47
800045f0:	e0 04 19 00 	cp.h	r4,r0
800045f4:	5f 01       	sreq	r1
800045f6:	40 20       	lddsp	r0,sp[0x8]
800045f8:	02 40       	or	r0,r1
800045fa:	f4 00 18 00 	cp.b	r0,r10
800045fe:	c0 50       	breq	80004608 <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80004600:	30 04       	mov	r4,0
80004602:	fb 54 00 12 	st.h	sp[18],r4
80004606:	c0 38       	rjmp	8000460c <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80004608:	58 04       	cp.w	r4,0
8000460a:	c0 31       	brne	80004610 <fat_create_long_name_entry+0x94>
8000460c:	30 14       	mov	r4,1
8000460e:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80004610:	fa c4 ff ee 	sub	r4,sp,-18
80004614:	09 90       	ld.ub	r0,r4[0x1]
80004616:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80004618:	09 84       	ld.ub	r4,r4[0x0]
8000461a:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
8000461c:	2f f8       	sub	r8,-1
8000461e:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80004620:	2f f7       	sub	r7,-1
80004622:	c0 38       	rjmp	80004628 <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80004624:	3f f1       	mov	r1,-1
80004626:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80004628:	2f f8       	sub	r8,-1
8000462a:	5c 58       	castu.b	r8
8000462c:	fc 08 18 00 	cp.b	r8,lr
80004630:	e0 8b 00 08 	brhi	80004640 <fat_create_long_name_entry+0xc4>
80004634:	2f fc       	sub	r12,-1
80004636:	cb 8b       	rjmp	800045a6 <fat_create_long_name_entry+0x2a>
80004638:	2f f8       	sub	r8,-1
8000463a:	5c 58       	castu.b	r8
8000463c:	2f fc       	sub	r12,-1
8000463e:	cb 4b       	rjmp	800045a6 <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
80004640:	2f bd       	sub	sp,-20
80004642:	d8 32       	popm	r0-r7,pc
80004644:	80 00       	ld.sh	r0,r0[0x0]
80004646:	3a b8       	mov	r8,-85
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	37 48       	mov	r8,116

8000464c <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
8000464c:	eb cd 40 fc 	pushm	r2-r7,lr
80004650:	20 8d       	sub	sp,32
80004652:	30 06       	mov	r6,0
80004654:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004656:	4a 95       	lddpc	r5,800046f8 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004658:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000465a:	1a 93       	mov	r3,sp
8000465c:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000465e:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004660:	f0 1f 00 27 	mcall	800046fc <fat_garbage_collector_entry+0xb0>
80004664:	c0 81       	brne	80004674 <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004666:	4a 78       	lddpc	r8,80004700 <fat_garbage_collector_entry+0xb4>
80004668:	11 89       	ld.ub	r9,r8[0x0]
8000466a:	31 a8       	mov	r8,26
8000466c:	f0 09 18 00 	cp.b	r9,r8
80004670:	c3 d1       	brne	800046ea <fat_garbage_collector_entry+0x9e>
80004672:	c0 68       	rjmp	8000467e <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80004674:	f0 1f 00 24 	mcall	80004704 <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
80004678:	19 88       	ld.ub	r8,r12[0x0]
8000467a:	58 08       	cp.w	r8,0
8000467c:	c1 b1       	brne	800046b2 <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000467e:	49 f8       	lddpc	r8,800046f8 <fat_garbage_collector_entry+0xac>
80004680:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80004682:	ec 07 19 00 	cp.h	r7,r6
80004686:	c3 40       	breq	800046ee <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004688:	32 05       	mov	r5,32
8000468a:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
8000468c:	49 b6       	lddpc	r6,800046f8 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000468e:	f0 1f 00 1c 	mcall	800046fc <fat_garbage_collector_entry+0xb0>
80004692:	c2 c0       	breq	800046ea <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004694:	f0 1f 00 1c 	mcall	80004704 <fat_garbage_collector_entry+0xb8>
80004698:	0a 9a       	mov	r10,r5
8000469a:	08 9b       	mov	r11,r4
8000469c:	f0 1f 00 1b 	mcall	80004708 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
800046a0:	f0 1f 00 1b 	mcall	8000470c <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800046a4:	8c 18       	ld.sh	r8,r6[0x2]
800046a6:	2f f8       	sub	r8,-1
800046a8:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800046aa:	f0 07 19 00 	cp.h	r7,r8
800046ae:	cf 01       	brne	8000468e <fat_garbage_collector_entry+0x42>
800046b0:	c1 f8       	rjmp	800046ee <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
800046b2:	e8 08 18 00 	cp.b	r8,r4
800046b6:	c1 70       	breq	800046e4 <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800046b8:	ec 07 19 00 	cp.h	r7,r6
800046bc:	c1 20       	breq	800046e0 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800046be:	04 9a       	mov	r10,r2
800046c0:	18 9b       	mov	r11,r12
800046c2:	1a 9c       	mov	r12,sp
800046c4:	f0 1f 00 13 	mcall	80004710 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800046c8:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800046ca:	f0 1f 00 0d 	mcall	800046fc <fat_garbage_collector_entry+0xb0>
800046ce:	c0 e0       	breq	800046ea <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
800046d0:	f0 1f 00 0d 	mcall	80004704 <fat_garbage_collector_entry+0xb8>
800046d4:	04 9a       	mov	r10,r2
800046d6:	1a 9b       	mov	r11,sp
800046d8:	f0 1f 00 0e 	mcall	80004710 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
800046dc:	f0 1f 00 0c 	mcall	8000470c <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
800046e0:	2f f6       	sub	r6,-1
800046e2:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
800046e4:	2f f7       	sub	r7,-1
800046e6:	5c 87       	casts.h	r7
   }  // end of while(1)
800046e8:	cb bb       	rjmp	8000465e <fat_garbage_collector_entry+0x12>
800046ea:	30 0c       	mov	r12,0
800046ec:	c0 28       	rjmp	800046f0 <fat_garbage_collector_entry+0xa4>
800046ee:	30 1c       	mov	r12,1
}
800046f0:	2f 8d       	sub	sp,-32
800046f2:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800046f6:	00 00       	add	r0,r0
800046f8:	00 00       	add	r0,r0
800046fa:	06 b4       	st.h	r3++,r4
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	42 50       	lddsp	r0,sp[0x94]
80004700:	00 00       	add	r0,r0
80004702:	06 b8       	st.h	r3++,r8
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	37 48       	mov	r8,116
80004708:	80 00       	ld.sh	r0,r0[0x0]
8000470a:	59 32       	cp.w	r2,19
8000470c:	80 00       	ld.sh	r0,r0[0x0]
8000470e:	3a b8       	mov	r8,-85
80004710:	80 00       	ld.sh	r0,r0[0x0]
80004712:	57 ea       	stdsp	sp[0x1f8],r10

80004714 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
80004714:	eb cd 40 c0 	pushm	r6-r7,lr
80004718:	20 1d       	sub	sp,4
8000471a:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
8000471c:	49 c8       	lddpc	r8,8000478c <fat_write_fat32_FSInfo+0x78>
8000471e:	90 c9       	ld.uh	r9,r8[0x8]
80004720:	70 4a       	ld.w	r10,r8[0x10]
80004722:	49 c8       	lddpc	r8,80004790 <fat_write_fat32_FSInfo+0x7c>
80004724:	12 1a       	sub	r10,r9
80004726:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80004728:	30 0c       	mov	r12,0
8000472a:	f0 1f 00 1b 	mcall	80004794 <fat_write_fat32_FSInfo+0x80>
8000472e:	c2 c0       	breq	80004786 <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80004730:	f0 1f 00 1a 	mcall	80004798 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
80004734:	f0 1f 00 1a 	mcall	8000479c <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80004738:	49 a7       	lddpc	r7,800047a0 <fat_write_fat32_FSInfo+0x8c>
8000473a:	30 46       	mov	r6,4
8000473c:	0c 9a       	mov	r10,r6
8000473e:	49 ab       	lddpc	r11,800047a4 <fat_write_fat32_FSInfo+0x90>
80004740:	0e 9c       	mov	r12,r7
80004742:	f0 1f 00 1a 	mcall	800047a8 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
80004746:	0c 9a       	mov	r10,r6
80004748:	49 9b       	lddpc	r11,800047ac <fat_write_fat32_FSInfo+0x98>
8000474a:	ee cc fe 1c 	sub	r12,r7,-484
8000474e:	f0 1f 00 17 	mcall	800047a8 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
80004752:	1b b9       	ld.ub	r9,sp[0x3]
80004754:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80004758:	1b a9       	ld.ub	r9,sp[0x2]
8000475a:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000475e:	1b 99       	ld.ub	r9,sp[0x1]
80004760:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80004764:	1b 88       	ld.ub	r8,sp[0x0]
80004766:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000476a:	0c 9a       	mov	r10,r6
8000476c:	e0 6b 00 ff 	mov	r11,255
80004770:	ee cc fe 14 	sub	r12,r7,-492
80004774:	f0 1f 00 0f 	mcall	800047b0 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80004778:	35 58       	mov	r8,85
8000477a:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000477e:	3a a8       	mov	r8,-86
80004780:	ef 68 01 ff 	st.b	r7[511],r8
80004784:	30 1c       	mov	r12,1
   return true;
}
80004786:	2f fd       	sub	sp,-4
80004788:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000478c:	00 00       	add	r0,r0
8000478e:	06 68       	and	r8,r3
80004790:	00 00       	add	r0,r0
80004792:	04 24       	rsub	r4,r2
80004794:	80 00       	ld.sh	r0,r0[0x0]
80004796:	3c 20       	mov	r0,-62
80004798:	80 00       	ld.sh	r0,r0[0x0]
8000479a:	3a b8       	mov	r8,-85
8000479c:	80 00       	ld.sh	r0,r0[0x0]
8000479e:	3c 08       	mov	r8,-64
800047a0:	00 00       	add	r0,r0
800047a2:	04 68       	and	r8,r2
800047a4:	80 00       	ld.sh	r0,r0[0x0]
800047a6:	5d 98       	*unknown*
800047a8:	80 00       	ld.sh	r0,r0[0x0]
800047aa:	57 ea       	stdsp	sp[0x1f8],r10
800047ac:	80 00       	ld.sh	r0,r0[0x0]
800047ae:	5d ac       	*unknown*
800047b0:	80 00       	ld.sh	r0,r0[0x0]
800047b2:	59 32       	cp.w	r2,19

800047b4 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800047b4:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800047b6:	4c 78       	lddpc	r8,800048d0 <fat_allocfreespace+0x11c>
800047b8:	11 89       	ld.ub	r9,r8[0x0]
800047ba:	30 38       	mov	r8,3
800047bc:	f0 09 18 00 	cp.b	r9,r8
800047c0:	c0 61       	brne	800047cc <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800047c2:	3f fc       	mov	r12,-1
800047c4:	f0 1f 00 44 	mcall	800048d4 <fat_allocfreespace+0x120>
800047c8:	e0 80 00 83 	breq	800048ce <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800047cc:	4c 31       	lddpc	r1,800048d8 <fat_allocfreespace+0x124>
800047ce:	03 89       	ld.ub	r9,r1[0x0]
800047d0:	3f f8       	mov	r8,-1
800047d2:	f0 09 18 00 	cp.b	r9,r8
800047d6:	c0 61       	brne	800047e2 <fat_allocfreespace+0x2e>
800047d8:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
800047da:	30 29       	mov	r9,2
800047dc:	4c 08       	lddpc	r8,800048dc <fat_allocfreespace+0x128>
800047de:	91 09       	st.w	r8[0x0],r9
800047e0:	c0 78       	rjmp	800047ee <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
800047e2:	4b e8       	lddpc	r8,800048d8 <fat_allocfreespace+0x124>
800047e4:	70 09       	ld.w	r9,r8[0x0]
800047e6:	2f f9       	sub	r9,-1
800047e8:	4b d8       	lddpc	r8,800048dc <fat_allocfreespace+0x128>
800047ea:	91 09       	st.w	r8[0x0],r9
800047ec:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
800047ee:	f0 1f 00 3d 	mcall	800048e0 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
800047f2:	4b b8       	lddpc	r8,800048dc <fat_allocfreespace+0x128>
800047f4:	70 09       	ld.w	r9,r8[0x0]
800047f6:	4b c8       	lddpc	r8,800048e4 <fat_allocfreespace+0x130>
800047f8:	70 38       	ld.w	r8,r8[0xc]
800047fa:	10 39       	cp.w	r9,r8
800047fc:	c5 e2       	brcc	800048b8 <fat_allocfreespace+0x104>
800047fe:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80004800:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004802:	4b 77       	lddpc	r7,800048dc <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004804:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004806:	4b 55       	lddpc	r5,800048d8 <fat_allocfreespace+0x124>
80004808:	4b 76       	lddpc	r6,800048e4 <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
8000480a:	04 9c       	mov	r12,r2
8000480c:	f0 1f 00 37 	mcall	800048e8 <fat_allocfreespace+0x134>
80004810:	c5 f0       	breq	800048ce <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004812:	6e 18       	ld.w	r8,r7[0x4]
80004814:	58 08       	cp.w	r8,0
80004816:	c4 01       	brne	80004896 <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80004818:	6e 08       	ld.w	r8,r7[0x0]
8000481a:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
8000481c:	58 04       	cp.w	r4,0
8000481e:	c0 80       	breq	8000482e <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004820:	20 18       	sub	r8,1
80004822:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004824:	06 9c       	mov	r12,r3
80004826:	f0 1f 00 31 	mcall	800048e8 <fat_allocfreespace+0x134>
8000482a:	c1 e1       	brne	80004866 <fat_allocfreespace+0xb2>
8000482c:	c5 18       	rjmp	800048ce <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000482e:	03 88       	ld.ub	r8,r1[0x0]
80004830:	3f f9       	mov	r9,-1
80004832:	f2 08 18 00 	cp.b	r8,r9
80004836:	c1 60       	breq	80004862 <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80004838:	6a 08       	ld.w	r8,r5[0x0]
8000483a:	58 08       	cp.w	r8,0
8000483c:	c0 e1       	brne	80004858 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000483e:	4a 59       	lddpc	r9,800048d0 <fat_allocfreespace+0x11c>
80004840:	13 88       	ld.ub	r8,r9[0x0]
80004842:	30 39       	mov	r9,3
80004844:	f2 08 18 00 	cp.b	r8,r9
80004848:	c0 50       	breq	80004852 <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
8000484a:	31 b9       	mov	r9,27
8000484c:	4a 88       	lddpc	r8,800048ec <fat_allocfreespace+0x138>
8000484e:	b0 89       	st.b	r8[0x0],r9
80004850:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004852:	6c 68       	ld.w	r8,r6[0x18]
80004854:	8f 08       	st.w	r7[0x0],r8
80004856:	c0 28       	rjmp	8000485a <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004858:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000485a:	06 9c       	mov	r12,r3
8000485c:	f0 1f 00 23 	mcall	800048e8 <fat_allocfreespace+0x134>
80004860:	c3 70       	breq	800048ce <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
80004862:	6e 18       	ld.w	r8,r7[0x4]
80004864:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80004866:	6e 18       	ld.w	r8,r7[0x4]
80004868:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
8000486a:	e0 68 ff ff 	mov	r8,65535
8000486e:	ea 18 0f ff 	orh	r8,0xfff
80004872:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004874:	06 9c       	mov	r12,r3
80004876:	f0 1f 00 1d 	mcall	800048e8 <fat_allocfreespace+0x134>
8000487a:	c2 a0       	breq	800048ce <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000487c:	6a 19       	ld.w	r9,r5[0x4]
8000487e:	0d 98       	ld.ub	r8,r6[0x1]
80004880:	10 39       	cp.w	r9,r8
80004882:	e0 8b 00 06 	brhi	8000488e <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80004886:	30 09       	mov	r9,0
80004888:	49 48       	lddpc	r8,800048d8 <fat_allocfreespace+0x124>
8000488a:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
8000488c:	c1 e8       	rjmp	800048c8 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000488e:	10 19       	sub	r9,r8
80004890:	8b 19       	st.w	r5[0x4],r9
80004892:	06 94       	mov	r4,r3
80004894:	c0 98       	rjmp	800048a6 <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80004896:	58 04       	cp.w	r4,0
80004898:	c1 81       	brne	800048c8 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
8000489a:	58 00       	cp.w	r0,0
8000489c:	c0 50       	breq	800048a6 <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
8000489e:	6e 08       	ld.w	r8,r7[0x0]
800048a0:	f0 c8 fe 0c 	sub	r8,r8,-500
800048a4:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800048a6:	6e 08       	ld.w	r8,r7[0x0]
800048a8:	2f f8       	sub	r8,-1
800048aa:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800048ac:	6c 39       	ld.w	r9,r6[0xc]
800048ae:	10 39       	cp.w	r9,r8
800048b0:	fe 9b ff ad 	brhi	8000480a <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800048b4:	58 04       	cp.w	r4,0
800048b6:	c0 91       	brne	800048c8 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800048b8:	58 00       	cp.w	r0,0
800048ba:	c0 30       	breq	800048c0 <fat_allocfreespace+0x10c>
800048bc:	30 00       	mov	r0,0
800048be:	c8 eb       	rjmp	800047da <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800048c0:	31 b9       	mov	r9,27
800048c2:	48 b8       	lddpc	r8,800048ec <fat_allocfreespace+0x138>
800048c4:	b0 89       	st.b	r8[0x0],r9
800048c6:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
800048c8:	f0 1f 00 0a 	mcall	800048f0 <fat_allocfreespace+0x13c>
800048cc:	d8 32       	popm	r0-r7,pc
800048ce:	d8 3a       	popm	r0-r7,pc,r12=0
800048d0:	00 00       	add	r0,r0
800048d2:	06 b4       	st.h	r3++,r4
800048d4:	80 00       	ld.sh	r0,r0[0x0]
800048d6:	47 14       	lddsp	r4,sp[0x1c4]
800048d8:	00 00       	add	r0,r0
800048da:	07 10       	ld.sh	r0,r3++
800048dc:	00 00       	add	r0,r0
800048de:	07 08       	ld.w	r8,r3++
800048e0:	80 00       	ld.sh	r0,r0[0x0]
800048e2:	44 7c       	lddsp	r12,sp[0x11c]
800048e4:	00 00       	add	r0,r0
800048e6:	06 68       	and	r8,r3
800048e8:	80 00       	ld.sh	r0,r0[0x0]
800048ea:	3d 34       	mov	r4,-45
800048ec:	00 00       	add	r0,r0
800048ee:	06 b8       	st.h	r3++,r8
800048f0:	80 00       	ld.sh	r0,r0[0x0]
800048f2:	45 08       	lddsp	r8,sp[0x140]

800048f4 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
800048f4:	d4 31       	pushm	r0-r7,lr
800048f6:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
800048f8:	30 09       	mov	r9,0
800048fa:	4a 38       	lddpc	r8,80004984 <fat_alloc_entry_free+0x90>
800048fc:	b0 19       	st.h	r8[0x2],r9
800048fe:	18 92       	mov	r2,r12
80004900:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004902:	4a 26       	lddpc	r6,80004988 <fat_alloc_entry_free+0x94>
80004904:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80004906:	4a 21       	lddpc	r1,8000498c <fat_alloc_entry_free+0x98>
80004908:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000490a:	10 97       	mov	r7,r8
8000490c:	12 90       	mov	r0,r9
8000490e:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004910:	f0 1f 00 20 	mcall	80004990 <fat_alloc_entry_free+0x9c>
80004914:	c1 61       	brne	80004940 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004916:	0d 88       	ld.ub	r8,r6[0x0]
80004918:	e6 08 18 00 	cp.b	r8,r3
8000491c:	c3 11       	brne	8000497e <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000491e:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80004920:	f0 1f 00 1d 	mcall	80004994 <fat_alloc_entry_free+0xa0>
80004924:	c0 a1       	brne	80004938 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80004926:	58 04       	cp.w	r4,0
80004928:	c2 b1       	brne	8000497e <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
8000492a:	f0 1f 00 1c 	mcall	80004998 <fat_alloc_entry_free+0xa4>
8000492e:	c2 80       	breq	8000497e <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004930:	ae 10       	st.h	r7[0x2],r0
80004932:	40 02       	lddsp	r2,sp[0x0]
80004934:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
80004936:	ce db       	rjmp	80004910 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80004938:	f0 1f 00 19 	mcall	8000499c <fat_alloc_entry_free+0xa8>
8000493c:	ce a1       	brne	80004910 <fat_alloc_entry_free+0x1c>
8000493e:	c2 08       	rjmp	8000497e <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80004940:	f0 1f 00 18 	mcall	800049a0 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
80004944:	19 88       	ld.ub	r8,r12[0x0]
80004946:	30 09       	mov	r9,0
80004948:	f2 08 18 00 	cp.b	r8,r9
8000494c:	c0 61       	brne	80004958 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
8000494e:	20 12       	sub	r2,1
80004950:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
80004952:	c0 31       	brne	80004958 <fat_alloc_entry_free+0x64>
80004954:	30 1c       	mov	r12,1
80004956:	c1 58       	rjmp	80004980 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80004958:	8e 18       	ld.sh	r8,r7[0x2]
8000495a:	2f f8       	sub	r8,-1
8000495c:	5c 88       	casts.h	r8
8000495e:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80004960:	cd 81       	brne	80004910 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
80004962:	58 04       	cp.w	r4,0
80004964:	c0 60       	breq	80004970 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80004966:	31 b9       	mov	r9,27
80004968:	48 88       	lddpc	r8,80004988 <fat_alloc_entry_free+0x94>
8000496a:	b0 89       	st.b	r8[0x0],r9
8000496c:	30 0c       	mov	r12,0
            return false;
8000496e:	c0 98       	rjmp	80004980 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
80004970:	f0 1f 00 0a 	mcall	80004998 <fat_alloc_entry_free+0xa4>
80004974:	c0 50       	breq	8000497e <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004976:	ae 10       	st.h	r7[0x2],r0
80004978:	40 02       	lddsp	r2,sp[0x0]
8000497a:	0a 94       	mov	r4,r5
8000497c:	cc ab       	rjmp	80004910 <fat_alloc_entry_free+0x1c>
8000497e:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
80004980:	2f fd       	sub	sp,-4
80004982:	d8 32       	popm	r0-r7,pc
80004984:	00 00       	add	r0,r0
80004986:	06 b4       	st.h	r3++,r4
80004988:	00 00       	add	r0,r0
8000498a:	06 b8       	st.h	r3++,r8
8000498c:	00 00       	add	r0,r0
8000498e:	07 10       	ld.sh	r0,r3++
80004990:	80 00       	ld.sh	r0,r0[0x0]
80004992:	42 50       	lddsp	r0,sp[0x94]
80004994:	80 00       	ld.sh	r0,r0[0x0]
80004996:	47 b4       	lddsp	r4,sp[0x1ec]
80004998:	80 00       	ld.sh	r0,r0[0x0]
8000499a:	46 4c       	lddsp	r12,sp[0x190]
8000499c:	80 00       	ld.sh	r0,r0[0x0]
8000499e:	44 94       	lddsp	r4,sp[0x124]
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	37 48       	mov	r8,116

800049a4 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800049a4:	d4 31       	pushm	r0-r7,lr
800049a6:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800049a8:	33 a2       	mov	r2,58
800049aa:	30 d5       	mov	r5,13
800049ac:	30 23       	mov	r3,2
800049ae:	49 86       	lddpc	r6,80004a0c <fat_check_name+0x68>
800049b0:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800049b4:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800049b6:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800049b8:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800049ba:	0e 9c       	mov	r12,r7
800049bc:	f0 1f 00 15 	mcall	80004a10 <fat_check_name+0x6c>
800049c0:	c1 a1       	brne	800049f4 <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800049c2:	ee 02 19 00 	cp.h	r2,r7
800049c6:	c0 60       	breq	800049d2 <fat_check_name+0x2e>
800049c8:	02 98       	mov	r8,r1
800049ca:	11 89       	ld.ub	r9,r8[0x0]
800049cc:	ee 09 19 00 	cp.h	r9,r7
800049d0:	c0 61       	brne	800049dc <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800049d2:	31 c9       	mov	r9,28
800049d4:	49 08       	lddpc	r8,80004a14 <fat_check_name+0x70>
800049d6:	b0 89       	st.b	r8[0x0],r9
800049d8:	30 03       	mov	r3,0
            return 0;      // incorrect character
800049da:	c1 68       	rjmp	80004a06 <fat_check_name+0x62>
800049dc:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
800049de:	0c 38       	cp.w	r8,r6
800049e0:	cf 51       	brne	800049ca <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800049e2:	58 05       	cp.w	r5,0
800049e4:	c0 41       	brne	800049ec <fat_check_name+0x48>
      {
         u8_nb_entry++;
800049e6:	2f f3       	sub	r3,-1
800049e8:	5c 53       	castu.b	r3
800049ea:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
800049ec:	20 15       	sub	r5,1
800049ee:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
800049f0:	2f f4       	sub	r4,-1
   }
800049f2:	ce 3b       	rjmp	800049b8 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
800049f4:	31 48       	mov	r8,20
800049f6:	f0 03 18 00 	cp.b	r3,r8
800049fa:	e0 88 00 06 	brls	80004a06 <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
800049fe:	32 b9       	mov	r9,43
80004a00:	48 58       	lddpc	r8,80004a14 <fat_check_name+0x70>
80004a02:	b0 89       	st.b	r8[0x0],r9
80004a04:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
80004a06:	06 9c       	mov	r12,r3
80004a08:	d8 32       	popm	r0-r7,pc
80004a0a:	00 00       	add	r0,r0
80004a0c:	80 00       	ld.sh	r0,r0[0x0]
80004a0e:	5d 9c       	*unknown*
80004a10:	80 00       	ld.sh	r0,r0[0x0]
80004a12:	37 20       	mov	r0,114
80004a14:	00 00       	add	r0,r0
80004a16:	06 b8       	st.h	r3++,r8

80004a18 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80004a18:	d4 31       	pushm	r0-r7,lr
80004a1a:	20 8d       	sub	sp,32
80004a1c:	18 94       	mov	r4,r12
80004a1e:	50 2b       	stdsp	sp[0x8],r11
80004a20:	14 97       	mov	r7,r10
80004a22:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80004a24:	58 09       	cp.w	r9,0
80004a26:	c0 40       	breq	80004a2e <fat_create_short_entry_name+0x16>
80004a28:	30 09       	mov	r9,0
80004a2a:	50 19       	stdsp	sp[0x4],r9
80004a2c:	c0 68       	rjmp	80004a38 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80004a2e:	f0 1f 00 66 	mcall	80004bc4 <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80004a32:	f0 1f 00 66 	mcall	80004bc8 <fat_create_short_entry_name+0x1b0>
80004a36:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80004a38:	30 98       	mov	r8,9
80004a3a:	f0 07 18 00 	cp.b	r7,r8
80004a3e:	e0 8b 00 04 	brhi	80004a46 <fat_create_short_entry_name+0x2e>
80004a42:	30 18       	mov	r8,1
80004a44:	c0 88       	rjmp	80004a54 <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80004a46:	36 38       	mov	r8,99
80004a48:	ee 08 18 00 	cp.b	r8,r7
80004a4c:	f9 b8 02 02 	movhs	r8,2
80004a50:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80004a54:	e0 6a cc cd 	mov	r10,52429
80004a58:	ea 1a cc cc 	orh	r10,0xcccc
80004a5c:	ee 0a 06 42 	mulu.d	r2,r7,r10
80004a60:	e6 09 16 03 	lsr	r9,r3,0x3
80004a64:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004a68:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80004a6c:	2d 09       	sub	r9,-48
80004a6e:	5c 59       	castu.b	r9
80004a70:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80004a72:	e0 63 85 1f 	mov	r3,34079
80004a76:	ea 13 51 eb 	orh	r3,0x51eb
80004a7a:	ee 03 06 42 	mulu.d	r2,r7,r3
80004a7e:	e6 09 16 05 	lsr	r9,r3,0x5
80004a82:	f2 0b 10 64 	mul	r11,r9,100
80004a86:	ee 0b 01 0b 	sub	r11,r7,r11
80004a8a:	5c 5b       	castu.b	r11
80004a8c:	f6 0a 06 4a 	mulu.d	r10,r11,r10
80004a90:	f6 0a 16 03 	lsr	r10,r11,0x3
80004a94:	2d 0a       	sub	r10,-48
80004a96:	5c 5a       	castu.b	r10
80004a98:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80004a9a:	2d 09       	sub	r9,-48
80004a9c:	5c 59       	castu.b	r9
80004a9e:	50 49       	stdsp	sp[0x10],r9
80004aa0:	30 01       	mov	r1,0
80004aa2:	30 17       	mov	r7,1
80004aa4:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80004aa6:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004aa8:	f0 09 11 ff 	rsub	r9,r8,-1
80004aac:	2f 89       	sub	r9,-8
80004aae:	50 39       	stdsp	sp[0xc],r9
80004ab0:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
80004ab2:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80004ab4:	f0 08 11 06 	rsub	r8,r8,6
80004ab8:	5c 58       	castu.b	r8
80004aba:	50 78       	stdsp	sp[0x1c],r8
80004abc:	c0 28       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80004abe:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80004ac0:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
80004ac2:	e6 07 18 00 	cp.b	r7,r3
80004ac6:	c1 41       	brne	80004aee <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80004ac8:	40 39       	lddsp	r9,sp[0xc]
80004aca:	0a 39       	cp.w	r9,r5
80004acc:	5f 09       	sreq	r9
80004ace:	e0 06 18 00 	cp.b	r6,r0
80004ad2:	5f 08       	sreq	r8
80004ad4:	f3 e8 10 08 	or	r8,r9,r8
80004ad8:	30 09       	mov	r9,0
80004ada:	f2 08 18 00 	cp.b	r8,r9
80004ade:	c0 51       	brne	80004ae8 <fat_create_short_entry_name+0xd0>
80004ae0:	0c 9c       	mov	r12,r6
80004ae2:	f0 1f 00 3b 	mcall	80004bcc <fat_create_short_entry_name+0x1b4>
80004ae6:	c1 10       	breq	80004b08 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80004ae8:	2f f7       	sub	r7,-1
80004aea:	5c 57       	castu.b	r7
            continue;
80004aec:	ce ab       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80004aee:	e4 07 18 00 	cp.b	r7,r2
80004af2:	c1 21       	brne	80004b16 <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80004af4:	30 b9       	mov	r9,11
80004af6:	f2 05 18 00 	cp.b	r5,r9
80004afa:	c0 50       	breq	80004b04 <fat_create_short_entry_name+0xec>
80004afc:	0c 9c       	mov	r12,r6
80004afe:	f0 1f 00 34 	mcall	80004bcc <fat_create_short_entry_name+0x1b4>
80004b02:	c0 30       	breq	80004b08 <fat_create_short_entry_name+0xf0>
80004b04:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80004b06:	cd db       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80004b08:	0c 9c       	mov	r12,r6
80004b0a:	f0 1f 00 32 	mcall	80004bd0 <fat_create_short_entry_name+0x1b8>
80004b0e:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80004b10:	2f f4       	sub	r4,-1
         if( 0 == character )
80004b12:	58 0c       	cp.w	r12,0
80004b14:	cd 60       	breq	80004ac0 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80004b16:	30 78       	mov	r8,7
80004b18:	f0 07 18 00 	cp.b	r7,r8
80004b1c:	c0 c1       	brne	80004b34 <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80004b1e:	e0 06 18 00 	cp.b	r6,r0
80004b22:	c0 50       	breq	80004b2c <fat_create_short_entry_name+0x114>
80004b24:	0c 9c       	mov	r12,r6
80004b26:	f0 1f 00 2a 	mcall	80004bcc <fat_create_short_entry_name+0x1b4>
80004b2a:	c0 30       	breq	80004b30 <fat_create_short_entry_name+0x118>
80004b2c:	30 87       	mov	r7,8
80004b2e:	cc 9b       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80004b30:	2f f4       	sub	r4,-1
80004b32:	cc 7b       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80004b34:	30 68       	mov	r8,6
80004b36:	f0 07 18 00 	cp.b	r7,r8
80004b3a:	c0 61       	brne	80004b46 <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80004b3c:	e4 05 18 00 	cp.b	r5,r2
80004b40:	cb f0       	breq	80004abe <fat_create_short_entry_name+0xa6>
80004b42:	32 06       	mov	r6,32
80004b44:	c1 28       	rjmp	80004b68 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80004b46:	30 98       	mov	r8,9
80004b48:	f0 07 18 00 	cp.b	r7,r8
80004b4c:	c0 71       	brne	80004b5a <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80004b4e:	30 b8       	mov	r8,11
80004b50:	f0 05 18 00 	cp.b	r5,r8
80004b54:	c3 50       	breq	80004bbe <fat_create_short_entry_name+0x1a6>
80004b56:	32 06       	mov	r6,32
80004b58:	c0 f8       	rjmp	80004b76 <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80004b5a:	30 58       	mov	r8,5
80004b5c:	f0 07 18 00 	cp.b	r7,r8
80004b60:	c0 41       	brne	80004b68 <fat_create_short_entry_name+0x150>
80004b62:	40 66       	lddsp	r6,sp[0x18]
80004b64:	30 67       	mov	r7,6
80004b66:	c0 f8       	rjmp	80004b84 <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80004b68:	30 48       	mov	r8,4
80004b6a:	f0 07 18 00 	cp.b	r7,r8
80004b6e:	c0 41       	brne	80004b76 <fat_create_short_entry_name+0x15e>
80004b70:	40 56       	lddsp	r6,sp[0x14]
80004b72:	30 57       	mov	r7,5
80004b74:	c1 28       	rjmp	80004b98 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80004b76:	30 38       	mov	r8,3
80004b78:	f0 07 18 00 	cp.b	r7,r8
80004b7c:	c0 41       	brne	80004b84 <fat_create_short_entry_name+0x16c>
80004b7e:	40 46       	lddsp	r6,sp[0x10]
80004b80:	30 47       	mov	r7,4
80004b82:	c0 b8       	rjmp	80004b98 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80004b84:	30 28       	mov	r8,2
80004b86:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80004b88:	f0 07 18 00 	cp.b	r7,r8
80004b8c:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
80004b90:	f0 09 18 00 	cp.b	r9,r8
80004b94:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
80004b98:	40 08       	lddsp	r8,sp[0x0]
80004b9a:	58 08       	cp.w	r8,0
80004b9c:	c0 50       	breq	80004ba6 <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
80004b9e:	40 29       	lddsp	r9,sp[0x8]
80004ba0:	12 c6       	st.b	r9++,r6
80004ba2:	50 29       	stdsp	sp[0x8],r9
80004ba4:	c0 48       	rjmp	80004bac <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80004ba6:	40 18       	lddsp	r8,sp[0x4]
80004ba8:	10 c6       	st.b	r8++,r6
80004baa:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80004bac:	2f f5       	sub	r5,-1
80004bae:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80004bb0:	e2 08 16 01 	lsr	r8,r1,0x1
80004bb4:	a7 71       	lsl	r1,0x7
80004bb6:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80004bb8:	0c 01       	add	r1,r6
80004bba:	5c 51       	castu.b	r1
80004bbc:	c8 2b       	rjmp	80004ac0 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80004bbe:	02 9c       	mov	r12,r1
80004bc0:	2f 8d       	sub	sp,-32
80004bc2:	d8 32       	popm	r0-r7,pc
80004bc4:	80 00       	ld.sh	r0,r0[0x0]
80004bc6:	3a b8       	mov	r8,-85
80004bc8:	80 00       	ld.sh	r0,r0[0x0]
80004bca:	37 48       	mov	r8,116
80004bcc:	80 00       	ld.sh	r0,r0[0x0]
80004bce:	37 20       	mov	r0,114
80004bd0:	80 00       	ld.sh	r0,r0[0x0]
80004bd2:	44 30       	lddsp	r0,sp[0x10c]

80004bd4 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80004bd4:	eb cd 40 80 	pushm	r7,lr
80004bd8:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80004bda:	f0 1f 00 12 	mcall	80004c20 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80004bde:	19 88       	ld.ub	r8,r12[0x0]
80004be0:	58 08       	cp.w	r8,0
80004be2:	c0 61       	brne	80004bee <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80004be4:	30 a9       	mov	r9,10
80004be6:	49 08       	lddpc	r8,80004c24 <fat_entry_shortname_compare+0x50>
80004be8:	b0 89       	st.b	r8[0x0],r9
80004bea:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80004bee:	3e 59       	mov	r9,-27
80004bf0:	f2 08 18 00 	cp.b	r8,r9
80004bf4:	c0 70       	breq	80004c02 <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80004bf6:	f9 39 00 0b 	ld.ub	r9,r12[11]
80004bfa:	30 f8       	mov	r8,15
80004bfc:	f0 09 18 00 	cp.b	r9,r8
80004c00:	c0 61       	brne	80004c0c <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004c02:	30 b9       	mov	r9,11
80004c04:	48 88       	lddpc	r8,80004c24 <fat_entry_shortname_compare+0x50>
80004c06:	b0 89       	st.b	r8[0x0],r9
80004c08:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80004c0c:	30 b9       	mov	r9,11
80004c0e:	48 68       	lddpc	r8,80004c24 <fat_entry_shortname_compare+0x50>
80004c10:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80004c12:	30 ba       	mov	r10,11
80004c14:	0e 9b       	mov	r11,r7
80004c16:	f0 1f 00 05 	mcall	80004c28 <fat_entry_shortname_compare+0x54>
80004c1a:	5f 0c       	sreq	r12
}
80004c1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	37 48       	mov	r8,116
80004c24:	00 00       	add	r0,r0
80004c26:	06 b8       	st.h	r3++,r8
80004c28:	80 00       	ld.sh	r0,r0[0x0]
80004c2a:	57 c4       	stdsp	sp[0x1f0],r4

80004c2c <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80004c2c:	d4 31       	pushm	r0-r7,lr
80004c2e:	20 3d       	sub	sp,12
80004c30:	18 93       	mov	r3,r12
80004c32:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004c34:	1a 96       	mov	r6,sp
80004c36:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004c38:	49 65       	lddpc	r5,80004c90 <fat_find_short_entry_name+0x64>
80004c3a:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80004c3c:	49 61       	lddpc	r1,80004c94 <fat_find_short_entry_name+0x68>
80004c3e:	30 a0       	mov	r0,10
80004c40:	c0 58       	rjmp	80004c4a <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80004c42:	3f f8       	mov	r8,-1
80004c44:	f0 07 18 00 	cp.b	r7,r8
80004c48:	c2 00       	breq	80004c88 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80004c4a:	2f f7       	sub	r7,-1
80004c4c:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80004c4e:	04 99       	mov	r9,r2
80004c50:	0e 9a       	mov	r10,r7
80004c52:	1a 9b       	mov	r11,sp
80004c54:	06 9c       	mov	r12,r3
80004c56:	f0 1f 00 11 	mcall	80004c98 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80004c5a:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80004c5c:	f0 1f 00 10 	mcall	80004c9c <fat_find_short_entry_name+0x70>
80004c60:	c0 81       	brne	80004c70 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80004c62:	48 d8       	lddpc	r8,80004c94 <fat_find_short_entry_name+0x68>
80004c64:	11 89       	ld.ub	r9,r8[0x0]
80004c66:	31 a8       	mov	r8,26
80004c68:	f0 09 18 00 	cp.b	r9,r8
80004c6c:	c0 e1       	brne	80004c88 <fat_find_short_entry_name+0x5c>
80004c6e:	c0 e8       	rjmp	80004c8a <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80004c70:	1a 9c       	mov	r12,sp
80004c72:	f0 1f 00 0c 	mcall	80004ca0 <fat_find_short_entry_name+0x74>
80004c76:	ce 61       	brne	80004c42 <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80004c78:	03 88       	ld.ub	r8,r1[0x0]
80004c7a:	e0 08 18 00 	cp.b	r8,r0
80004c7e:	c0 60       	breq	80004c8a <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80004c80:	8a 18       	ld.sh	r8,r5[0x2]
80004c82:	2f f8       	sub	r8,-1
80004c84:	aa 18       	st.h	r5[0x2],r8
      }
80004c86:	ce bb       	rjmp	80004c5c <fat_find_short_entry_name+0x30>
80004c88:	30 07       	mov	r7,0
   }
}
80004c8a:	0e 9c       	mov	r12,r7
80004c8c:	2f dd       	sub	sp,-12
80004c8e:	d8 32       	popm	r0-r7,pc
80004c90:	00 00       	add	r0,r0
80004c92:	06 b4       	st.h	r3++,r4
80004c94:	00 00       	add	r0,r0
80004c96:	06 b8       	st.h	r3++,r8
80004c98:	80 00       	ld.sh	r0,r0[0x0]
80004c9a:	4a 18       	lddpc	r8,80004d1c <fat_create_entry_file_name+0x78>
80004c9c:	80 00       	ld.sh	r0,r0[0x0]
80004c9e:	42 50       	lddsp	r0,sp[0x94]
80004ca0:	80 00       	ld.sh	r0,r0[0x0]
80004ca2:	4b d4       	lddpc	r4,80004d94 <fat_mount+0x48>

80004ca4 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80004ca4:	eb cd 40 fc 	pushm	r2-r7,lr
80004ca8:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80004caa:	f0 1f 00 21 	mcall	80004d2c <fat_create_entry_file_name+0x88>
80004cae:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80004cb0:	c3 b0       	breq	80004d26 <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80004cb2:	0c 9c       	mov	r12,r6
80004cb4:	f0 1f 00 1f 	mcall	80004d30 <fat_create_entry_file_name+0x8c>
80004cb8:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80004cba:	c0 61       	brne	80004cc6 <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80004cbc:	32 a9       	mov	r9,42
80004cbe:	49 e8       	lddpc	r8,80004d34 <fat_create_entry_file_name+0x90>
80004cc0:	b0 89       	st.b	r8[0x0],r9
80004cc2:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
80004cc6:	0a 9c       	mov	r12,r5
80004cc8:	f0 1f 00 1c 	mcall	80004d38 <fat_create_entry_file_name+0x94>
80004ccc:	c2 d0       	breq	80004d26 <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80004cce:	30 09       	mov	r9,0
80004cd0:	0e 9a       	mov	r10,r7
80004cd2:	12 9b       	mov	r11,r9
80004cd4:	0c 9c       	mov	r12,r6
80004cd6:	f0 1f 00 1a 	mcall	80004d3c <fat_create_entry_file_name+0x98>
80004cda:	18 92       	mov	r2,r12
   u8_nb_entry--;
80004cdc:	20 15       	sub	r5,1
80004cde:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80004ce0:	c1 c0       	breq	80004d18 <fat_create_entry_file_name+0x74>
80004ce2:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004ce4:	49 74       	lddpc	r4,80004d40 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80004ce6:	ea c3 ff c0 	sub	r3,r5,-64
80004cea:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004cec:	88 18       	ld.sh	r8,r4[0x2]
80004cee:	20 18       	sub	r8,1
80004cf0:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80004cf2:	f0 1f 00 15 	mcall	80004d44 <fat_create_entry_file_name+0xa0>
80004cf6:	c1 80       	breq	80004d26 <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80004cf8:	ea 07 18 00 	cp.b	r7,r5
80004cfc:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80004d00:	0e 9a       	mov	r10,r7
80004d02:	04 9b       	mov	r11,r2
80004d04:	0c 9c       	mov	r12,r6
80004d06:	f0 1f 00 11 	mcall	80004d48 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80004d0a:	2f f7       	sub	r7,-1
80004d0c:	5c 57       	castu.b	r7
80004d0e:	ee 05 18 00 	cp.b	r5,r7
80004d12:	c0 33       	brcs	80004d18 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80004d14:	2f 36       	sub	r6,-13
80004d16:	ce bb       	rjmp	80004cec <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80004d18:	48 a8       	lddpc	r8,80004d40 <fat_create_entry_file_name+0x9c>
80004d1a:	90 19       	ld.sh	r9,r8[0x2]
80004d1c:	f2 05 00 05 	add	r5,r9,r5
80004d20:	b0 15       	st.h	r8[0x2],r5
80004d22:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80004d26:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80004d2a:	00 00       	add	r0,r0
80004d2c:	80 00       	ld.sh	r0,r0[0x0]
80004d2e:	49 a4       	lddpc	r4,80004d94 <fat_mount+0x48>
80004d30:	80 00       	ld.sh	r0,r0[0x0]
80004d32:	4c 2c       	lddpc	r12,80004e38 <fat_mount+0xec>
80004d34:	00 00       	add	r0,r0
80004d36:	06 b8       	st.h	r3++,r8
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	48 f4       	lddpc	r4,80004d74 <fat_mount+0x28>
80004d3c:	80 00       	ld.sh	r0,r0[0x0]
80004d3e:	4a 18       	lddpc	r8,80004dc0 <fat_mount+0x74>
80004d40:	00 00       	add	r0,r0
80004d42:	06 b4       	st.h	r3++,r4
80004d44:	80 00       	ld.sh	r0,r0[0x0]
80004d46:	42 50       	lddsp	r0,sp[0x94]
80004d48:	80 00       	ld.sh	r0,r0[0x0]
80004d4a:	45 7c       	lddsp	r12,sp[0x15c]

80004d4c <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80004d4c:	d4 31       	pushm	r0-r7,lr
80004d4e:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80004d50:	30 07       	mov	r7,0
80004d52:	fe f8 02 d2 	ld.w	r8,pc[722]
80004d56:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80004d58:	f0 1f 00 b4 	mcall	80005028 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80004d5c:	fe f8 02 d0 	ld.w	r8,pc[720]
80004d60:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80004d62:	fe f8 02 ce 	ld.w	r8,pc[718]
80004d66:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80004d68:	f0 1f 00 b3 	mcall	80005034 <fat_mount+0x2e8>
80004d6c:	e0 80 01 58 	breq	8000501c <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80004d70:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80004d74:	ea c8 fe 42 	sub	r8,r5,-446
80004d78:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004d7a:	38 04       	mov	r4,-128
80004d7c:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80004d7e:	30 1c       	mov	r12,1
80004d80:	f0 1f 00 af 	mcall	8000503c <fat_mount+0x2f0>
80004d84:	e0 80 01 4c 	breq	8000501c <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80004d88:	eb 39 01 fe 	ld.ub	r9,r5[510]
80004d8c:	35 58       	mov	r8,85
80004d8e:	f0 09 18 00 	cp.b	r9,r8
80004d92:	c0 d0       	breq	80004dac <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80004d94:	eb 39 01 ff 	ld.ub	r9,r5[511]
80004d98:	3a a8       	mov	r8,-86
80004d9a:	f0 09 18 00 	cp.b	r9,r8
80004d9e:	c0 70       	breq	80004dac <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80004da0:	30 29       	mov	r9,2
80004da2:	fe f8 02 9e 	ld.w	r8,pc[670]
80004da6:	b0 89       	st.b	r8[0x0],r9
80004da8:	30 0c       	mov	r12,0
         return false;
80004daa:	c3 a9       	rjmp	8000501e <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80004dac:	fe f8 02 84 	ld.w	r8,pc[644]
80004db0:	70 08       	ld.w	r8,r8[0x0]
80004db2:	58 08       	cp.w	r8,0
80004db4:	c5 21       	brne	80004e58 <fat_mount+0x10c>
80004db6:	40 08       	lddsp	r8,sp[0x0]
80004db8:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004dba:	30 1e       	mov	lr,1
80004dbc:	30 63       	mov	r3,6
80004dbe:	30 e2       	mov	r2,14
80004dc0:	30 b1       	mov	r1,11
80004dc2:	30 c0       	mov	r0,12
80004dc4:	11 89       	ld.ub	r9,r8[0x0]
80004dc6:	e8 09 18 00 	cp.b	r9,r4
80004dca:	5f 0b       	sreq	r11
80004dcc:	ee 09 18 00 	cp.b	r9,r7
80004dd0:	5f 09       	sreq	r9
80004dd2:	f7 e9 10 09 	or	r9,r11,r9
80004dd6:	ee 09 18 00 	cp.b	r9,r7
80004dda:	c1 90       	breq	80004e0c <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80004ddc:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80004dde:	fc 09 18 00 	cp.b	r9,lr
80004de2:	5f 0c       	sreq	r12
80004de4:	ec 09 18 00 	cp.b	r9,r6
80004de8:	5f 0b       	sreq	r11
80004dea:	f9 eb 10 0b 	or	r11,r12,r11
80004dee:	ee 0b 18 00 	cp.b	r11,r7
80004df2:	c1 41       	brne	80004e1a <fat_mount+0xce>
80004df4:	e6 09 18 00 	cp.b	r9,r3
80004df8:	c1 10       	breq	80004e1a <fat_mount+0xce>
80004dfa:	e4 09 18 00 	cp.b	r9,r2
80004dfe:	c0 e0       	breq	80004e1a <fat_mount+0xce>
80004e00:	e2 09 18 00 	cp.b	r9,r1
80004e04:	c0 b0       	breq	80004e1a <fat_mount+0xce>
80004e06:	e0 09 18 00 	cp.b	r9,r0
80004e0a:	c0 80       	breq	80004e1a <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80004e0c:	2f fa       	sub	r10,-1
80004e0e:	5c 5a       	castu.b	r10
80004e10:	2f 08       	sub	r8,-16
80004e12:	ec 0a 18 00 	cp.b	r10,r6
80004e16:	cd 71       	brne	80004dc4 <fat_mount+0x78>
80004e18:	c2 08       	rjmp	80004e58 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80004e1a:	ec 0a 18 00 	cp.b	r10,r6
80004e1e:	c1 d0       	breq	80004e58 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80004e20:	fe f3 02 10 	ld.w	r3,pc[528]
80004e24:	a5 6a       	lsl	r10,0x4
80004e26:	f4 ca fe 42 	sub	r10,r10,-446
80004e2a:	ea 0a 00 0a 	add	r10,r5,r10
80004e2e:	f5 38 00 08 	ld.ub	r8,r10[8]
80004e32:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80004e34:	f5 38 00 09 	ld.ub	r8,r10[9]
80004e38:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80004e3a:	f5 38 00 0a 	ld.ub	r8,r10[10]
80004e3e:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80004e40:	f5 38 00 0b 	ld.ub	r8,r10[11]
80004e44:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80004e46:	4f 88       	lddpc	r8,80005024 <fat_mount+0x2d8>
80004e48:	11 8c       	ld.ub	r12,r8[0x0]
80004e4a:	f0 1f 00 7f 	mcall	80005044 <fat_mount+0x2f8>
80004e4e:	66 08       	ld.w	r8,r3[0x0]
80004e50:	f8 08 02 48 	mul	r8,r12,r8
80004e54:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80004e56:	c9 4b       	rjmp	80004d7e <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80004e58:	4f 88       	lddpc	r8,80005038 <fat_mount+0x2ec>
80004e5a:	11 89       	ld.ub	r9,r8[0x0]
80004e5c:	3e b8       	mov	r8,-21
80004e5e:	f0 09 18 00 	cp.b	r9,r8
80004e62:	c0 f1       	brne	80004e80 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80004e64:	4f 58       	lddpc	r8,80005038 <fat_mount+0x2ec>
80004e66:	11 a9       	ld.ub	r9,r8[0x2]
80004e68:	39 08       	mov	r8,-112
80004e6a:	f0 09 18 00 	cp.b	r9,r8
80004e6e:	c0 91       	brne	80004e80 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80004e70:	4f 28       	lddpc	r8,80005038 <fat_mount+0x2ec>
80004e72:	f1 38 00 15 	ld.ub	r8,r8[21]
80004e76:	e2 18 00 f0 	andl	r8,0xf0,COH
80004e7a:	e0 48 00 f0 	cp.w	r8,240
80004e7e:	c0 60       	breq	80004e8a <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80004e80:	30 39       	mov	r9,3
80004e82:	4f 08       	lddpc	r8,80005040 <fat_mount+0x2f4>
80004e84:	b0 89       	st.b	r8[0x0],r9
80004e86:	30 0c       	mov	r12,0
      return false;
80004e88:	cc b8       	rjmp	8000501e <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80004e8a:	30 49       	mov	r9,4
80004e8c:	4e d8       	lddpc	r8,80005040 <fat_mount+0x2f4>
80004e8e:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80004e90:	4e aa       	lddpc	r10,80005038 <fat_mount+0x2ec>
80004e92:	f5 39 00 0c 	ld.ub	r9,r10[12]
80004e96:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80004e98:	f5 38 00 0d 	ld.ub	r8,r10[13]
80004e9c:	b3 38       	mul	r8,r9
80004e9e:	5c 58       	castu.b	r8
80004ea0:	4e 1b       	lddpc	r11,80005024 <fat_mount+0x2d8>
80004ea2:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80004ea4:	30 0b       	mov	r11,0
80004ea6:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80004ea8:	fa cb ff fc 	sub	r11,sp,-4
80004eac:	fa c7 ff f9 	sub	r7,sp,-7
80004eb0:	f5 3c 00 16 	ld.ub	r12,r10[22]
80004eb4:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80004eb6:	fa ce ff fa 	sub	lr,sp,-6
80004eba:	f5 3a 00 17 	ld.ub	r10,r10[23]
80004ebe:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80004ec0:	40 1a       	lddsp	r10,sp[0x4]
80004ec2:	58 0a       	cp.w	r10,0
80004ec4:	c0 e1       	brne	80004ee0 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80004ec6:	4d da       	lddpc	r10,80005038 <fat_mount+0x2ec>
80004ec8:	f5 3c 00 24 	ld.ub	r12,r10[36]
80004ecc:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80004ece:	f5 3c 00 25 	ld.ub	r12,r10[37]
80004ed2:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80004ed4:	f5 3c 00 26 	ld.ub	r12,r10[38]
80004ed8:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80004eda:	f5 3a 00 27 	ld.ub	r10,r10[39]
80004ede:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80004ee0:	12 95       	mov	r5,r9
80004ee2:	40 1c       	lddsp	r12,sp[0x4]
80004ee4:	f2 0c 02 4c 	mul	r12,r9,r12
80004ee8:	4c fa       	lddpc	r10,80005024 <fat_mount+0x2d8>
80004eea:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80004eec:	4d 3a       	lddpc	r10,80005038 <fat_mount+0x2ec>
80004eee:	f5 3a 00 13 	ld.ub	r10,r10[19]
80004ef2:	58 0a       	cp.w	r10,0
80004ef4:	c1 61       	brne	80004f20 <fat_mount+0x1d4>
80004ef6:	4d 16       	lddpc	r6,80005038 <fat_mount+0x2ec>
80004ef8:	ed 34 00 14 	ld.ub	r4,r6[20]
80004efc:	30 06       	mov	r6,0
80004efe:	ec 04 18 00 	cp.b	r4,r6
80004f02:	c0 f1       	brne	80004f20 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80004f04:	4c da       	lddpc	r10,80005038 <fat_mount+0x2ec>
80004f06:	f5 36 00 20 	ld.ub	r6,r10[32]
80004f0a:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80004f0c:	f5 37 00 21 	ld.ub	r7,r10[33]
80004f10:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80004f12:	f5 3e 00 22 	ld.ub	lr,r10[34]
80004f16:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80004f18:	f5 3a 00 23 	ld.ub	r10,r10[35]
80004f1c:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80004f1e:	c0 98       	rjmp	80004f30 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80004f20:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80004f22:	4c 6a       	lddpc	r10,80005038 <fat_mount+0x2ec>
80004f24:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004f28:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80004f2a:	30 0a       	mov	r10,0
80004f2c:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80004f2e:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80004f30:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80004f32:	4b da       	lddpc	r10,80005024 <fat_mount+0x2d8>
80004f34:	f8 0b 15 01 	lsl	r11,r12,0x1
80004f38:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80004f3c:	fa c6 ff f6 	sub	r6,sp,-10
80004f40:	fa c7 ff f4 	sub	r7,sp,-12
80004f44:	4b db       	lddpc	r11,80005038 <fat_mount+0x2ec>
80004f46:	f7 3e 00 11 	ld.ub	lr,r11[17]
80004f4a:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80004f4c:	f7 3e 00 12 	ld.ub	lr,r11[18]
80004f50:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80004f52:	f2 03 15 04 	lsl	r3,r9,0x4
80004f56:	9a de       	ld.uh	lr,sp[0xa]
80004f58:	e6 0e 00 0e 	add	lr,r3,lr
80004f5c:	a5 7e       	lsl	lr,0x5
80004f5e:	20 1e       	sub	lr,1
80004f60:	f2 03 15 09 	lsl	r3,r9,0x9
80004f64:	fc 03 0c 02 	divs	r2,lr,r3
80004f68:	e4 09 02 4e 	mul	lr,r2,r9
80004f6c:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80004f70:	f7 33 00 0e 	ld.ub	r3,r11[14]
80004f74:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80004f76:	f7 37 00 0f 	ld.ub	r7,r11[15]
80004f7a:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80004f7c:	9a 57       	ld.sh	r7,sp[0xa]
80004f7e:	f7 3b 00 30 	ld.ub	r11,r11[48]
80004f82:	0e 96       	mov	r6,r7
80004f84:	ee 0b 01 0b 	sub	r11,r7,r11
80004f88:	b3 3b       	mul	r11,r9
80004f8a:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80004f8c:	ee 09 02 49 	mul	r9,r7,r9
80004f90:	5c 79       	castu.h	r9
80004f92:	4a 8b       	lddpc	r11,80005030 <fat_mount+0x2e4>
80004f94:	76 0b       	ld.w	r11,r11[0x0]
80004f96:	f2 0b 00 0b 	add	r11,r9,r11
80004f9a:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80004f9c:	5c 7e       	castu.h	lr
80004f9e:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80004fa2:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80004fa4:	58 08       	cp.w	r8,0
80004fa6:	c3 b0       	breq	8000501c <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80004fa8:	a9 35       	mul	r5,r4
80004faa:	ea 09 01 09 	sub	r9,r5,r9
80004fae:	18 19       	sub	r9,r12
80004fb0:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004fb2:	30 1a       	mov	r10,1
80004fb4:	f4 08 18 00 	cp.b	r8,r10
80004fb8:	c0 70       	breq	80004fc6 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80004fba:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80004fbc:	a1 98       	lsr	r8,0x1
80004fbe:	f4 08 18 00 	cp.b	r8,r10
80004fc2:	cf c1       	brne	80004fba <fat_mount+0x26e>
80004fc4:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80004fc6:	40 18       	lddsp	r8,sp[0x4]
80004fc8:	f0 ca ff fe 	sub	r10,r8,-2
80004fcc:	49 69       	lddpc	r9,80005024 <fat_mount+0x2d8>
80004fce:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80004fd0:	e0 48 0f f4 	cp.w	r8,4084
80004fd4:	e0 8b 00 07 	brhi	80004fe2 <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80004fd8:	30 19       	mov	r9,1
80004fda:	49 58       	lddpc	r8,8000502c <fat_mount+0x2e0>
80004fdc:	b0 89       	st.b	r8[0x0],r9
80004fde:	30 1c       	mov	r12,1
80004fe0:	c1 f8       	rjmp	8000501e <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80004fe2:	e0 48 ff f4 	cp.w	r8,65524
80004fe6:	e0 8b 00 07 	brhi	80004ff4 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80004fea:	30 29       	mov	r9,2
80004fec:	49 08       	lddpc	r8,8000502c <fat_mount+0x2e0>
80004fee:	b0 89       	st.b	r8[0x0],r9
80004ff0:	30 1c       	mov	r12,1
80004ff2:	c1 68       	rjmp	8000501e <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80004ff4:	30 39       	mov	r9,3
80004ff6:	48 e8       	lddpc	r8,8000502c <fat_mount+0x2e0>
80004ff8:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80004ffa:	48 b8       	lddpc	r8,80005024 <fat_mount+0x2d8>
80004ffc:	2e 88       	sub	r8,-24
80004ffe:	48 f9       	lddpc	r9,80005038 <fat_mount+0x2ec>
80005000:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80005004:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80005006:	f3 3a 00 2d 	ld.ub	r10,r9[45]
8000500a:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
8000500c:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005010:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80005012:	f3 39 00 2f 	ld.ub	r9,r9[47]
80005016:	b0 89       	st.b	r8[0x0],r9
80005018:	30 1c       	mov	r12,1
8000501a:	c0 28       	rjmp	8000501e <fat_mount+0x2d2>
8000501c:	30 0c       	mov	r12,0
   }
   }

   return true;
}
8000501e:	2f dd       	sub	sp,-12
80005020:	d8 32       	popm	r0-r7,pc
80005022:	00 00       	add	r0,r0
80005024:	00 00       	add	r0,r0
80005026:	06 68       	and	r8,r3
80005028:	80 00       	ld.sh	r0,r0[0x0]
8000502a:	36 e4       	mov	r4,110
8000502c:	00 00       	add	r0,r0
8000502e:	06 b4       	st.h	r3++,r4
80005030:	00 00       	add	r0,r0
80005032:	04 24       	rsub	r4,r2
80005034:	80 00       	ld.sh	r0,r0[0x0]
80005036:	42 d4       	lddsp	r4,sp[0xb4]
80005038:	00 00       	add	r0,r0
8000503a:	04 68       	and	r8,r2
8000503c:	80 00       	ld.sh	r0,r0[0x0]
8000503e:	3c 20       	mov	r0,-62
80005040:	00 00       	add	r0,r0
80005042:	06 b8       	st.h	r3++,r8
80005044:	80 00       	ld.sh	r0,r0[0x0]
80005046:	55 e4       	stdsp	sp[0x178],r4

80005048 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80005048:	d4 31       	pushm	r0-r7,lr
8000504a:	20 1d       	sub	sp,4
8000504c:	18 95       	mov	r5,r12
8000504e:	16 96       	mov	r6,r11
80005050:	14 97       	mov	r7,r10
80005052:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80005054:	f0 1f 00 2f 	mcall	80005110 <nav_file_name+0xc8>
80005058:	c5 80       	breq	80005108 <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000505a:	58 07       	cp.w	r7,0
8000505c:	c0 50       	breq	80005066 <nav_file_name+0x1e>
8000505e:	58 06       	cp.w	r6,0
80005060:	c0 31       	brne	80005066 <nav_file_name+0x1e>
80005062:	30 1c       	mov	r12,1
80005064:	c5 38       	rjmp	8000510a <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
80005066:	4a c8       	lddpc	r8,80005114 <nav_file_name+0xcc>
80005068:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000506a:	58 04       	cp.w	r4,0
8000506c:	c0 31       	brne	80005072 <nav_file_name+0x2a>
8000506e:	30 10       	mov	r0,1
80005070:	c0 68       	rjmp	8000507c <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005072:	08 99       	mov	r9,r4
80005074:	20 19       	sub	r9,1
80005076:	4a 88       	lddpc	r8,80005114 <nav_file_name+0xcc>
80005078:	b0 19       	st.h	r8[0x2],r9
8000507a:	30 00       	mov	r0,0
8000507c:	30 09       	mov	r9,0
8000507e:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80005080:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80005082:	4a 52       	lddpc	r2,80005114 <nav_file_name+0xcc>
80005084:	c0 28       	rjmp	80005088 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005086:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80005088:	f0 1f 00 24 	mcall	80005118 <nav_file_name+0xd0>
8000508c:	c3 e0       	breq	80005108 <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
8000508e:	58 00       	cp.w	r0,0
80005090:	c0 70       	breq	8000509e <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80005092:	0e 9a       	mov	r10,r7
80005094:	0c 9b       	mov	r11,r6
80005096:	0a 9c       	mov	r12,r5
80005098:	f0 1f 00 21 	mcall	8000511c <nav_file_name+0xd4>
8000509c:	c3 78       	rjmp	8000510a <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000509e:	06 99       	mov	r9,r3
800050a0:	0e 9a       	mov	r10,r7
800050a2:	0c 9b       	mov	r11,r6
800050a4:	0a 9c       	mov	r12,r5
800050a6:	f0 1f 00 1f 	mcall	80005120 <nav_file_name+0xd8>
800050aa:	c1 20       	breq	800050ce <nav_file_name+0x86>
      {
         if( g_b_string_length )
800050ac:	49 e8       	lddpc	r8,80005124 <nav_file_name+0xdc>
800050ae:	11 89       	ld.ub	r9,r8[0x0]
800050b0:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
800050b2:	f0 09 18 00 	cp.b	r9,r8
800050b6:	eb f8 12 00 	ld.shne	r8,r5[0x0]
800050ba:	fb f9 10 00 	ld.wne	r9,sp[0x0]
800050be:	f1 d9 e1 08 	addne	r8,r8,r9
800050c2:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800050c6:	49 48       	lddpc	r8,80005114 <nav_file_name+0xcc>
800050c8:	b0 14       	st.h	r8[0x2],r4
800050ca:	30 1c       	mov	r12,1
         return true;
800050cc:	c1 f8       	rjmp	8000510a <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800050ce:	49 79       	lddpc	r9,80005128 <nav_file_name+0xe0>
800050d0:	13 88       	ld.ub	r8,r9[0x0]
800050d2:	e2 08 18 00 	cp.b	r8,r1
800050d6:	c0 70       	breq	800050e4 <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800050d8:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
800050da:	30 b9       	mov	r9,11
800050dc:	f2 08 18 00 	cp.b	r8,r9
800050e0:	c1 41       	brne	80005108 <nav_file_name+0xc0>
800050e2:	cd 2b       	rjmp	80005086 <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800050e4:	49 09       	lddpc	r9,80005124 <nav_file_name+0xdc>
800050e6:	13 88       	ld.ub	r8,r9[0x0]
800050e8:	30 09       	mov	r9,0
800050ea:	f2 08 18 00 	cp.b	r8,r9
800050ee:	c0 60       	breq	800050fa <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800050f0:	40 08       	lddsp	r8,sp[0x0]
800050f2:	2f 38       	sub	r8,-13
800050f4:	5c 88       	casts.h	r8
800050f6:	50 08       	stdsp	sp[0x0],r8
800050f8:	c0 48       	rjmp	80005100 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
800050fa:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800050fc:	20 d6       	sub	r6,13
800050fe:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80005100:	84 18       	ld.sh	r8,r2[0x2]
80005102:	20 18       	sub	r8,1
80005104:	a4 18       	st.h	r2[0x2],r8
80005106:	cc 1b       	rjmp	80005088 <nav_file_name+0x40>
80005108:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
8000510a:	2f fd       	sub	sp,-4
8000510c:	d8 32       	popm	r0-r7,pc
8000510e:	00 00       	add	r0,r0
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	44 00       	lddsp	r0,sp[0x100]
80005114:	00 00       	add	r0,r0
80005116:	06 b4       	st.h	r3++,r4
80005118:	80 00       	ld.sh	r0,r0[0x0]
8000511a:	42 50       	lddsp	r0,sp[0x94]
8000511c:	80 00       	ld.sh	r0,r0[0x0]
8000511e:	38 f4       	mov	r4,-113
80005120:	80 00       	ld.sh	r0,r0[0x0]
80005122:	37 60       	mov	r0,118
80005124:	00 00       	add	r0,r0
80005126:	06 b9       	st.h	r3++,r9
80005128:	00 00       	add	r0,r0
8000512a:	06 b8       	st.h	r3++,r8

8000512c <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000512c:	d4 31       	pushm	r0-r7,lr
8000512e:	20 4d       	sub	sp,16
80005130:	50 0c       	stdsp	sp[0x0],r12
80005132:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
80005134:	f0 1f 00 51 	mcall	80005278 <nav_filelist_set+0x14c>
80005138:	e0 80 00 9e 	breq	80005274 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000513c:	4d 08       	lddpc	r8,8000527c <nav_filelist_set+0x150>
8000513e:	90 18       	ld.sh	r8,r8[0x2]
80005140:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80005142:	4d 08       	lddpc	r8,80005280 <nav_filelist_set+0x154>
80005144:	f1 0a 00 24 	ld.sh	r10,r8[36]
80005148:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000514a:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000514e:	50 38       	stdsp	sp[0xc],r8
80005150:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80005152:	4c b7       	lddpc	r7,8000527c <nav_filelist_set+0x150>
80005154:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005156:	4c b6       	lddpc	r6,80005280 <nav_filelist_set+0x154>
80005158:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000515a:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000515c:	4c a5       	lddpc	r5,80005284 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000515e:	58 02       	cp.w	r2,0
80005160:	c0 31       	brne	80005166 <nav_filelist_set+0x3a>
80005162:	58 03       	cp.w	r3,0
80005164:	c0 c0       	breq	8000517c <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80005166:	8e 18       	ld.sh	r8,r7[0x2]
80005168:	e2 08 19 00 	cp.h	r8,r1
8000516c:	c0 51       	brne	80005176 <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000516e:	30 89       	mov	r9,8
80005170:	4c 58       	lddpc	r8,80005284 <nav_filelist_set+0x158>
80005172:	b0 89       	st.b	r8[0x0],r9
            break;
80005174:	c7 38       	rjmp	8000525a <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
80005176:	2f f8       	sub	r8,-1
80005178:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000517a:	c1 d8       	rjmp	800051b4 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000517c:	8e 18       	ld.sh	r8,r7[0x2]
8000517e:	e0 08 19 00 	cp.h	r8,r0
80005182:	c0 51       	brne	8000518c <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80005184:	30 99       	mov	r9,9
80005186:	4c 08       	lddpc	r8,80005284 <nav_filelist_set+0x158>
80005188:	b0 89       	st.b	r8[0x0],r9
            break;
8000518a:	c6 88       	rjmp	8000525a <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000518c:	58 08       	cp.w	r8,0
8000518e:	c1 11       	brne	800051b0 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005190:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005194:	e8 08 18 00 	cp.b	r8,r4
80005198:	c0 80       	breq	800051a8 <nav_filelist_set+0x7c>
8000519a:	ed 38 00 2d 	ld.ub	r8,r6[45]
8000519e:	e8 08 18 00 	cp.b	r8,r4
800051a2:	c0 31       	brne	800051a8 <nav_filelist_set+0x7c>
800051a4:	30 13       	mov	r3,1
800051a6:	c0 78       	rjmp	800051b4 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
800051a8:	30 99       	mov	r9,9
800051aa:	4b 78       	lddpc	r8,80005284 <nav_filelist_set+0x158>
800051ac:	b0 89       	st.b	r8[0x0],r9
               break;
800051ae:	c5 68       	rjmp	8000525a <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
800051b0:	20 18       	sub	r8,1
800051b2:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
800051b4:	f0 1f 00 35 	mcall	80005288 <nav_filelist_set+0x15c>
800051b8:	c0 71       	brne	800051c6 <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800051ba:	0b 89       	ld.ub	r9,r5[0x0]
800051bc:	31 a8       	mov	r8,26
800051be:	f0 09 18 00 	cp.b	r9,r8
800051c2:	c3 20       	breq	80005226 <nav_filelist_set+0xfa>
800051c4:	c4 b8       	rjmp	8000525a <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
800051c6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800051ca:	e8 08 18 00 	cp.b	r8,r4
800051ce:	5f 1c       	srne	r12
800051d0:	f0 1f 00 2f 	mcall	8000528c <nav_filelist_set+0x160>
800051d4:	c1 c0       	breq	8000520c <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
800051d6:	58 03       	cp.w	r3,0
800051d8:	cc 31       	brne	8000515e <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
800051da:	58 02       	cp.w	r2,0
800051dc:	ed f8 12 12 	ld.shne	r8,r6[0x24]
800051e0:	f7 b8 01 ff 	subne	r8,-1
800051e4:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
800051e8:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
800051ec:	f7 b8 00 01 	subeq	r8,1
800051f0:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
800051f4:	40 09       	lddsp	r9,sp[0x0]
800051f6:	58 09       	cp.w	r9,0
800051f8:	c0 51       	brne	80005202 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
800051fa:	f0 1f 00 26 	mcall	80005290 <nav_filelist_set+0x164>
800051fe:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80005200:	c3 a8       	rjmp	80005274 <nav_filelist_set+0x148>
           }
           u16_nb--;
80005202:	40 08       	lddsp	r8,sp[0x0]
80005204:	20 18       	sub	r8,1
80005206:	5c 88       	casts.h	r8
80005208:	50 08       	stdsp	sp[0x0],r8
           continue;
8000520a:	ca ab       	rjmp	8000515e <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000520c:	0b 88       	ld.ub	r8,r5[0x0]
8000520e:	30 a9       	mov	r9,10
80005210:	f2 08 18 00 	cp.b	r8,r9
80005214:	5f 09       	sreq	r9
80005216:	31 aa       	mov	r10,26
80005218:	f4 08 18 00 	cp.b	r8,r10
8000521c:	5f 08       	sreq	r8
8000521e:	10 49       	or	r9,r8
80005220:	e8 09 18 00 	cp.b	r9,r4
80005224:	c9 d0       	breq	8000515e <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80005226:	58 03       	cp.w	r3,0
80005228:	c0 50       	breq	80005232 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
8000522a:	ed 64 00 2c 	st.b	r6[44],r4
8000522e:	30 03       	mov	r3,0
            continue;
80005230:	c9 7b       	rjmp	8000515e <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80005232:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005236:	30 1a       	mov	r10,1
80005238:	f4 08 18 00 	cp.b	r8,r10
8000523c:	c0 60       	breq	80005248 <nav_filelist_set+0x11c>
8000523e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80005242:	e8 08 18 00 	cp.b	r8,r4
80005246:	c0 50       	breq	80005250 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80005248:	30 99       	mov	r9,9
8000524a:	48 f8       	lddpc	r8,80005284 <nav_filelist_set+0x158>
8000524c:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
8000524e:	c0 68       	rjmp	8000525a <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80005250:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80005252:	30 19       	mov	r9,1
80005254:	ed 69 00 2c 	st.b	r6[44],r9
80005258:	c8 3b       	rjmp	8000515e <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000525a:	48 a8       	lddpc	r8,80005280 <nav_filelist_set+0x154>
8000525c:	40 3a       	lddsp	r10,sp[0xc]
8000525e:	58 0a       	cp.w	r10,0
80005260:	5f 19       	srne	r9
80005262:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80005266:	48 69       	lddpc	r9,8000527c <nav_filelist_set+0x150>
80005268:	40 2a       	lddsp	r10,sp[0x8]
8000526a:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000526c:	40 19       	lddsp	r9,sp[0x4]
8000526e:	f1 59 00 24 	st.h	r8[36],r9
80005272:	30 0c       	mov	r12,0
   return false;
}
80005274:	2f cd       	sub	sp,-16
80005276:	d8 32       	popm	r0-r7,pc
80005278:	80 00       	ld.sh	r0,r0[0x0]
8000527a:	44 18       	lddsp	r8,sp[0x104]
8000527c:	00 00       	add	r0,r0
8000527e:	06 b4       	st.h	r3++,r4
80005280:	00 00       	add	r0,r0
80005282:	06 68       	and	r8,r3
80005284:	00 00       	add	r0,r0
80005286:	06 b8       	st.h	r3++,r8
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	42 50       	lddsp	r0,sp[0x94]
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	3a 44       	mov	r4,-92
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	39 fc       	mov	r12,-97

80005294 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80005294:	d4 21       	pushm	r4-r7,lr
80005296:	18 95       	mov	r5,r12
80005298:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000529a:	30 16       	mov	r6,1
8000529c:	30 07       	mov	r7,0
8000529e:	0c 9b       	mov	r11,r6
800052a0:	0e 9c       	mov	r12,r7
800052a2:	f0 1f 00 07 	mcall	800052bc <nav_filelist_findname+0x28>
800052a6:	c0 90       	breq	800052b8 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
800052a8:	08 99       	mov	r9,r4
800052aa:	0e 9a       	mov	r10,r7
800052ac:	0e 9b       	mov	r11,r7
800052ae:	0a 9c       	mov	r12,r5
800052b0:	f0 1f 00 04 	mcall	800052c0 <nav_filelist_findname+0x2c>
800052b4:	cf 50       	breq	8000529e <nav_filelist_findname+0xa>
800052b6:	30 1c       	mov	r12,1
         return true;
   }
}
800052b8:	d8 22       	popm	r4-r7,pc
800052ba:	00 00       	add	r0,r0
800052bc:	80 00       	ld.sh	r0,r0[0x0]
800052be:	51 2c       	stdsp	sp[0x48],r12
800052c0:	80 00       	ld.sh	r0,r0[0x0]
800052c2:	50 48       	stdsp	sp[0x10],r8

800052c4 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
800052c4:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
800052c6:	f0 1f 00 04 	mcall	800052d4 <nav_filelist_reset+0x10>
800052ca:	c0 40       	breq	800052d2 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800052cc:	f0 1f 00 03 	mcall	800052d8 <nav_filelist_reset+0x14>
800052d0:	30 1c       	mov	r12,1
   return true;
}
800052d2:	d8 02       	popm	pc
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	44 18       	lddsp	r8,sp[0x104]
800052d8:	80 00       	ld.sh	r0,r0[0x0]
800052da:	36 e4       	mov	r4,110

800052dc <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
800052dc:	eb cd 40 80 	pushm	r7,lr
800052e0:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
800052e2:	f0 1f 00 13 	mcall	8000532c <nav_file_create+0x50>
800052e6:	c2 10       	breq	80005328 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
800052e8:	30 0b       	mov	r11,0
800052ea:	0e 9c       	mov	r12,r7
800052ec:	f0 1f 00 11 	mcall	80005330 <nav_file_create+0x54>
800052f0:	c0 60       	breq	800052fc <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800052f2:	32 a9       	mov	r9,42
800052f4:	49 08       	lddpc	r8,80005334 <nav_file_create+0x58>
800052f6:	b0 89       	st.b	r8[0x0],r9
800052f8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
800052fc:	0e 9c       	mov	r12,r7
800052fe:	f0 1f 00 0f 	mcall	80005338 <nav_file_create+0x5c>
80005302:	c1 30       	breq	80005328 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80005304:	48 e8       	lddpc	r8,8000533c <nav_file_create+0x60>
80005306:	30 09       	mov	r9,0
80005308:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000530a:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
8000530c:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000530e:	48 d8       	lddpc	r8,80005340 <nav_file_create+0x64>
80005310:	f1 09 00 24 	ld.sh	r9,r8[36]
80005314:	2f f9       	sub	r9,-1
80005316:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
8000531a:	30 19       	mov	r9,1
8000531c:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80005320:	f0 1f 00 09 	mcall	80005344 <nav_file_create+0x68>
80005324:	e3 cd 80 80 	ldm	sp++,r7,pc
80005328:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	52 c4       	stdsp	sp[0xb0],r4
80005330:	80 00       	ld.sh	r0,r0[0x0]
80005332:	52 94       	stdsp	sp[0xa4],r4
80005334:	00 00       	add	r0,r0
80005336:	06 b8       	st.h	r3++,r8
80005338:	80 00       	ld.sh	r0,r0[0x0]
8000533a:	4c a4       	lddpc	r4,80005460 <nav_reset+0x34>
8000533c:	00 00       	add	r0,r0
8000533e:	04 28       	rsub	r8,r2
80005340:	00 00       	add	r0,r0
80005342:	06 68       	and	r8,r3
80005344:	80 00       	ld.sh	r0,r0[0x0]
80005346:	3b b4       	mov	r4,-69

80005348 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
80005348:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
8000534a:	f0 1f 00 0a 	mcall	80005370 <nav_partition_mount+0x28>
8000534e:	c0 f0       	breq	8000536c <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80005350:	48 98       	lddpc	r8,80005374 <nav_partition_mount+0x2c>
80005352:	11 89       	ld.ub	r9,r8[0x0]
80005354:	30 08       	mov	r8,0
80005356:	f0 09 18 00 	cp.b	r9,r8
8000535a:	c0 70       	breq	80005368 <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000535c:	30 09       	mov	r9,0
8000535e:	48 78       	lddpc	r8,80005378 <nav_partition_mount+0x30>
80005360:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80005362:	f0 1f 00 07 	mcall	8000537c <nav_partition_mount+0x34>
80005366:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
80005368:	f0 1f 00 06 	mcall	80005380 <nav_partition_mount+0x38>
}
8000536c:	d8 02       	popm	pc
8000536e:	00 00       	add	r0,r0
80005370:	80 00       	ld.sh	r0,r0[0x0]
80005372:	43 8c       	lddsp	r12,sp[0xe0]
80005374:	00 00       	add	r0,r0
80005376:	06 b4       	st.h	r3++,r4
80005378:	00 00       	add	r0,r0
8000537a:	06 68       	and	r8,r3
8000537c:	80 00       	ld.sh	r0,r0[0x0]
8000537e:	36 e4       	mov	r4,110
80005380:	80 00       	ld.sh	r0,r0[0x0]
80005382:	4d 4c       	lddpc	r12,800054d0 <print_ulong+0x2c>

80005384 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80005384:	eb cd 40 80 	pushm	r7,lr
80005388:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
8000538a:	f0 1f 00 0f 	mcall	800053c4 <nav_drive_set+0x40>
8000538e:	c1 90       	breq	800053c0 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80005390:	f0 1f 00 0e 	mcall	800053c8 <nav_drive_set+0x44>
80005394:	ee 0c 18 00 	cp.b	r12,r7
80005398:	e0 8b 00 07 	brhi	800053a6 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000539c:	30 69       	mov	r9,6
8000539e:	48 c8       	lddpc	r8,800053cc <nav_drive_set+0x48>
800053a0:	b0 89       	st.b	r8[0x0],r9
800053a2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
800053a6:	48 b8       	lddpc	r8,800053d0 <nav_drive_set+0x4c>
800053a8:	11 88       	ld.ub	r8,r8[0x0]
800053aa:	ee 08 18 00 	cp.b	r8,r7
800053ae:	c0 31       	brne	800053b4 <nav_drive_set+0x30>
800053b0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
800053b4:	48 78       	lddpc	r8,800053d0 <nav_drive_set+0x4c>
800053b6:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
800053b8:	30 09       	mov	r9,0
800053ba:	48 78       	lddpc	r8,800053d4 <nav_drive_set+0x50>
800053bc:	b0 89       	st.b	r8[0x0],r9
800053be:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
800053c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800053c4:	80 00       	ld.sh	r0,r0[0x0]
800053c6:	43 8c       	lddsp	r12,sp[0xe0]
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	55 b6       	stdsp	sp[0x16c],r6
800053cc:	00 00       	add	r0,r0
800053ce:	06 b8       	st.h	r3++,r8
800053d0:	00 00       	add	r0,r0
800053d2:	06 68       	and	r8,r3
800053d4:	00 00       	add	r0,r0
800053d6:	06 b4       	st.h	r3++,r4

800053d8 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
800053d8:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
800053da:	f0 1f 00 02 	mcall	800053e0 <nav_drive_nb+0x8>
}
800053de:	d8 02       	popm	pc
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	55 b6       	stdsp	sp[0x16c],r6

800053e4 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
800053e4:	eb cd 40 80 	pushm	r7,lr
800053e8:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
800053ea:	30 18       	mov	r8,1
800053ec:	f0 0c 18 00 	cp.b	r12,r8
800053f0:	e0 88 00 07 	brls	800053fe <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
800053f4:	32 79       	mov	r9,39
800053f6:	48 b8       	lddpc	r8,80005420 <nav_select+0x3c>
800053f8:	b0 89       	st.b	r8[0x0],r9
800053fa:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800053fe:	48 a8       	lddpc	r8,80005424 <nav_select+0x40>
80005400:	11 8c       	ld.ub	r12,r8[0x0]
80005402:	ee 0c 18 00 	cp.b	r12,r7
80005406:	c0 31       	brne	8000540c <nav_select+0x28>
80005408:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
8000540c:	f0 1f 00 07 	mcall	80005428 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80005410:	0e 9c       	mov	r12,r7
80005412:	f0 1f 00 06 	mcall	80005428 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80005416:	48 48       	lddpc	r8,80005424 <nav_select+0x40>
80005418:	b0 87       	st.b	r8[0x0],r7
8000541a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000541e:	00 00       	add	r0,r0
80005420:	00 00       	add	r0,r0
80005422:	06 b8       	st.h	r3++,r8
80005424:	00 00       	add	r0,r0
80005426:	07 30       	ld.ub	r0,r3++
80005428:	80 00       	ld.sh	r0,r0[0x0]
8000542a:	3a c8       	mov	r8,-84

8000542c <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
8000542c:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80005430:	30 07       	mov	r7,0
80005432:	49 18       	lddpc	r8,80005474 <nav_reset+0x48>
80005434:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80005436:	49 18       	lddpc	r8,80005478 <nav_reset+0x4c>
80005438:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
8000543a:	f0 1f 00 11 	mcall	8000547c <nav_reset+0x50>
   fat_cache_clusterlist_reset();
8000543e:	f0 1f 00 11 	mcall	80005480 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80005442:	30 0c       	mov	r12,0
80005444:	f0 1f 00 10 	mcall	80005484 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005448:	49 03       	lddpc	r3,80005488 <nav_reset+0x5c>
8000544a:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000544c:	49 05       	lddpc	r5,8000548c <nav_reset+0x60>
8000544e:	3f f4       	mov	r4,-1
80005450:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80005452:	49 06       	lddpc	r6,80005490 <nav_reset+0x64>
80005454:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80005456:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
8000545a:	30 1c       	mov	r12,1
8000545c:	f0 1f 00 0a 	mcall	80005484 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005460:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80005462:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80005464:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80005466:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000546a:	48 b8       	lddpc	r8,80005494 <nav_reset+0x68>
8000546c:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000546e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80005472:	00 00       	add	r0,r0
80005474:	00 00       	add	r0,r0
80005476:	06 b9       	st.h	r3++,r9
80005478:	00 00       	add	r0,r0
8000547a:	04 3a       	cp.w	r10,r2
8000547c:	80 00       	ld.sh	r0,r0[0x0]
8000547e:	3a a0       	mov	r0,-86
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	34 98       	mov	r8,73
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	53 e4       	stdsp	sp[0xf8],r4
80005488:	00 00       	add	r0,r0
8000548a:	06 b4       	st.h	r3++,r4
8000548c:	00 00       	add	r0,r0
8000548e:	06 68       	and	r8,r3
80005490:	00 00       	add	r0,r0
80005492:	04 28       	rsub	r8,r2
80005494:	00 00       	add	r0,r0
80005496:	07 30       	ld.ub	r0,r3++

80005498 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80005498:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000549a:	f0 1f 00 02 	mcall	800054a0 <print+0x8>
}
8000549e:	d8 02       	popm	pc
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	32 fc       	mov	r12,47

800054a4 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
800054a4:	eb cd 40 e0 	pushm	r5-r7,lr
800054a8:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800054aa:	30 08       	mov	r8,0
800054ac:	fb 68 00 0a 	st.b	sp[10],r8
800054b0:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
800054b2:	1a 95       	mov	r5,sp
800054b4:	e0 6e cc cd 	mov	lr,52429
800054b8:	ea 1e cc cc 	orh	lr,0xcccc
800054bc:	20 19       	sub	r9,1
800054be:	f6 0e 06 46 	mulu.d	r6,r11,lr
800054c2:	0e 98       	mov	r8,r7
800054c4:	a3 98       	lsr	r8,0x3
800054c6:	f0 08 00 2a 	add	r10,r8,r8<<0x2
800054ca:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
800054ce:	2d 0b       	sub	r11,-48
800054d0:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
800054d4:	10 9b       	mov	r11,r8
  } while (n);
800054d6:	58 08       	cp.w	r8,0
800054d8:	cf 21       	brne	800054bc <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
800054da:	1a 9b       	mov	r11,sp
800054dc:	12 0b       	add	r11,r9
800054de:	f0 1f 00 03 	mcall	800054e8 <print_ulong+0x44>
}
800054e2:	2f dd       	sub	sp,-12
800054e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800054e8:	80 00       	ld.sh	r0,r0[0x0]
800054ea:	54 98       	stdsp	sp[0x124],r8

800054ec <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
800054ec:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800054ee:	18 9b       	mov	r11,r12
800054f0:	fe 7c 2c 00 	mov	r12,-54272
800054f4:	f0 1f 00 02 	mcall	800054fc <print_dbg_ulong+0x10>
}
800054f8:	d8 02       	popm	pc
800054fa:	00 00       	add	r0,r0
800054fc:	80 00       	ld.sh	r0,r0[0x0]
800054fe:	54 a4       	stdsp	sp[0x128],r4

80005500 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80005500:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80005502:	18 9b       	mov	r11,r12
80005504:	fe 7c 2c 00 	mov	r12,-54272
80005508:	f0 1f 00 02 	mcall	80005510 <print_dbg+0x10>
}
8000550c:	d8 02       	popm	pc
8000550e:	00 00       	add	r0,r0
80005510:	80 00       	ld.sh	r0,r0[0x0]
80005512:	54 98       	stdsp	sp[0x124],r8

80005514 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80005514:	eb cd 40 80 	pushm	r7,lr
80005518:	20 3d       	sub	sp,12
8000551a:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000551c:	50 0c       	stdsp	sp[0x0],r12
8000551e:	30 88       	mov	r8,8
80005520:	ba c8       	st.b	sp[0x4],r8
80005522:	30 48       	mov	r8,4
80005524:	ba d8       	st.b	sp[0x5],r8
80005526:	30 08       	mov	r8,0
80005528:	ba 38       	st.h	sp[0x6],r8
8000552a:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000552e:	30 2b       	mov	r11,2
80005530:	48 6c       	lddpc	r12,80005548 <init_dbg_rs232_ex+0x34>
80005532:	f0 1f 00 07 	mcall	8000554c <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80005536:	0e 9a       	mov	r10,r7
80005538:	1a 9b       	mov	r11,sp
8000553a:	fe 7c 2c 00 	mov	r12,-54272
8000553e:	f0 1f 00 05 	mcall	80005550 <init_dbg_rs232_ex+0x3c>
}
80005542:	2f dd       	sub	sp,-12
80005544:	e3 cd 80 80 	ldm	sp++,r7,pc
80005548:	80 00       	ld.sh	r0,r0[0x0]
8000554a:	5d b0       	*unknown*
8000554c:	80 00       	ld.sh	r0,r0[0x0]
8000554e:	2e 34       	sub	r4,-29
80005550:	80 00       	ld.sh	r0,r0[0x0]
80005552:	33 4c       	mov	r12,52

80005554 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80005554:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80005556:	18 9b       	mov	r11,r12
80005558:	e0 6c e1 00 	mov	r12,57600
8000555c:	f0 1f 00 02 	mcall	80005564 <init_dbg_rs232+0x10>
}
80005560:	d8 02       	popm	pc
80005562:	00 00       	add	r0,r0
80005564:	80 00       	ld.sh	r0,r0[0x0]
80005566:	55 14       	stdsp	sp[0x144],r4

80005568 <_stext>:
80005568:	48 dd       	lddpc	sp,8000559c <udata_clear_loop_end+0x4>
8000556a:	fe c0 fb 6a 	sub	r0,pc,-1174
8000556e:	e3 b0 00 01 	mtsr	0x4,r0
80005572:	d5 53       	csrf	0x15
80005574:	48 b0       	lddpc	r0,800055a0 <udata_clear_loop_end+0x8>
80005576:	48 c1       	lddpc	r1,800055a4 <udata_clear_loop_end+0xc>
80005578:	02 30       	cp.w	r0,r1
8000557a:	c0 62       	brcc	80005586 <idata_load_loop_end>
8000557c:	48 b2       	lddpc	r2,800055a8 <udata_clear_loop_end+0x10>

8000557e <idata_load_loop>:
8000557e:	a5 05       	ld.d	r4,r2++
80005580:	a1 24       	st.d	r0++,r4
80005582:	02 30       	cp.w	r0,r1
80005584:	cf d3       	brcs	8000557e <idata_load_loop>

80005586 <idata_load_loop_end>:
80005586:	48 a0       	lddpc	r0,800055ac <udata_clear_loop_end+0x14>
80005588:	48 a1       	lddpc	r1,800055b0 <udata_clear_loop_end+0x18>
8000558a:	02 30       	cp.w	r0,r1
8000558c:	c0 62       	brcc	80005598 <udata_clear_loop_end>
8000558e:	30 02       	mov	r2,0
80005590:	30 03       	mov	r3,0

80005592 <udata_clear_loop>:
80005592:	a1 22       	st.d	r0++,r2
80005594:	02 30       	cp.w	r0,r1
80005596:	cf e3       	brcs	80005592 <udata_clear_loop>

80005598 <udata_clear_loop_end>:
80005598:	fe cf fe dc 	sub	pc,pc,-292
8000559c:	00 01       	add	r1,r0
8000559e:	00 00       	add	r0,r0
800055a0:	00 00       	add	r0,r0
800055a2:	00 04       	add	r4,r0
800055a4:	00 00       	add	r0,r0
800055a6:	00 10       	sub	r0,r0
800055a8:	80 00       	ld.sh	r0,r0[0x0]
800055aa:	5e f0       	retal	r0
800055ac:	00 00       	add	r0,r0
800055ae:	00 10       	sub	r0,r0
800055b0:	00 00       	add	r0,r0
800055b2:	07 38       	ld.ub	r8,r3++

800055b4 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
800055b4:	5e fc       	retal	r12

800055b6 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800055b6:	5e ff       	retal	1

800055b8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800055b8:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800055ba:	58 0c       	cp.w	r12,0
800055bc:	c0 20       	breq	800055c0 <mem_test_unit_ready+0x8>
800055be:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800055c0:	48 28       	lddpc	r8,800055c8 <mem_test_unit_ready+0x10>
800055c2:	70 0c       	ld.w	r12,r8[0x0]
800055c4:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
800055c6:	d8 02       	popm	pc
800055c8:	80 00       	ld.sh	r0,r0[0x0]
800055ca:	5d c0       	*unknown*

800055cc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
800055cc:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800055ce:	58 0c       	cp.w	r12,0
800055d0:	c0 20       	breq	800055d4 <mem_read_capacity+0x8>
800055d2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
800055d4:	48 38       	lddpc	r8,800055e0 <mem_read_capacity+0x14>
800055d6:	70 18       	ld.w	r8,r8[0x4]
800055d8:	16 9c       	mov	r12,r11
800055da:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
800055dc:	d8 02       	popm	pc
800055de:	00 00       	add	r0,r0
800055e0:	80 00       	ld.sh	r0,r0[0x0]
800055e2:	5d c0       	*unknown*

800055e4 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
800055e4:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
800055e6:	5f 0c       	sreq	r12
800055e8:	5e fc       	retal	r12
800055ea:	d7 03       	nop

800055ec <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
800055ec:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
800055ee:	58 0c       	cp.w	r12,0
800055f0:	c0 20       	breq	800055f4 <mem_wr_protect+0x8>
800055f2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
800055f4:	48 28       	lddpc	r8,800055fc <mem_wr_protect+0x10>
800055f6:	70 2c       	ld.w	r12,r8[0x8]
800055f8:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800055fa:	d8 02       	popm	pc
800055fc:	80 00       	ld.sh	r0,r0[0x0]
800055fe:	5d c0       	*unknown*

80005600 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80005600:	d4 01       	pushm	lr
80005602:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80005604:	58 0c       	cp.w	r12,0
80005606:	c0 20       	breq	8000560a <memory_2_ram+0xa>
80005608:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
8000560a:	48 49       	lddpc	r9,80005618 <memory_2_ram+0x18>
8000560c:	72 49       	ld.w	r9,r9[0x10]
8000560e:	14 9b       	mov	r11,r10
80005610:	10 9c       	mov	r12,r8
80005612:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80005614:	d8 02       	popm	pc
80005616:	00 00       	add	r0,r0
80005618:	80 00       	ld.sh	r0,r0[0x0]
8000561a:	5d c0       	*unknown*

8000561c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
8000561c:	d4 01       	pushm	lr
8000561e:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80005620:	58 0c       	cp.w	r12,0
80005622:	c0 20       	breq	80005626 <ram_2_memory+0xa>
80005624:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80005626:	48 49       	lddpc	r9,80005634 <ram_2_memory+0x18>
80005628:	72 59       	ld.w	r9,r9[0x14]
8000562a:	14 9b       	mov	r11,r10
8000562c:	10 9c       	mov	r12,r8
8000562e:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80005630:	d8 02       	popm	pc
80005632:	00 00       	add	r0,r0
80005634:	80 00       	ld.sh	r0,r0[0x0]
80005636:	5d c0       	*unknown*

80005638 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
80005638:	eb cd 40 80 	pushm	r7,lr
8000563c:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
8000563e:	49 98       	lddpc	r8,800056a0 <sd_mmc_resources_init+0x68>
80005640:	1a 97       	mov	r7,sp
80005642:	70 09       	ld.w	r9,r8[0x0]
80005644:	50 09       	stdsp	sp[0x0],r9
80005646:	70 19       	ld.w	r9,r8[0x4]
80005648:	50 19       	stdsp	sp[0x4],r9
8000564a:	70 29       	ld.w	r9,r8[0x8]
8000564c:	50 29       	stdsp	sp[0x8],r9
8000564e:	70 38       	ld.w	r8,r8[0xc]
80005650:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80005652:	30 4b       	mov	r11,4
80005654:	49 4c       	lddpc	r12,800056a4 <sd_mmc_resources_init+0x6c>
80005656:	f0 1f 00 15 	mcall	800056a8 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
8000565a:	1a 9b       	mov	r11,sp
8000565c:	fe 7c 34 00 	mov	r12,-52224
80005660:	f0 1f 00 13 	mcall	800056ac <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80005664:	30 09       	mov	r9,0
80005666:	12 9a       	mov	r10,r9
80005668:	12 9b       	mov	r11,r9
8000566a:	fe 7c 34 00 	mov	r12,-52224
8000566e:	f0 1f 00 11 	mcall	800056b0 <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80005672:	fe 7c 34 00 	mov	r12,-52224
80005676:	f0 1f 00 10 	mcall	800056b4 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
8000567a:	20 4d       	sub	sp,16
8000567c:	6e 08       	ld.w	r8,r7[0x0]
8000567e:	50 08       	stdsp	sp[0x0],r8
80005680:	6e 18       	ld.w	r8,r7[0x4]
80005682:	50 18       	stdsp	sp[0x4],r8
80005684:	6e 28       	ld.w	r8,r7[0x8]
80005686:	50 28       	stdsp	sp[0x8],r8
80005688:	6e 38       	ld.w	r8,r7[0xc]
8000568a:	50 38       	stdsp	sp[0xc],r8
8000568c:	e0 6c 24 00 	mov	r12,9216
80005690:	ea 1c 00 f4 	orh	r12,0xf4
80005694:	f0 1f 00 09 	mcall	800056b8 <sd_mmc_resources_init+0x80>
80005698:	2f cd       	sub	sp,-16
}
8000569a:	2f cd       	sub	sp,-16
8000569c:	e3 cd 80 80 	ldm	sp++,r7,pc
800056a0:	80 00       	ld.sh	r0,r0[0x0]
800056a2:	5d f4       	*unknown*
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	5e 04       	reteq	r4
800056a8:	80 00       	ld.sh	r0,r0[0x0]
800056aa:	2e 34       	sub	r4,-29
800056ac:	80 00       	ld.sh	r0,r0[0x0]
800056ae:	30 80       	mov	r0,8
800056b0:	80 00       	ld.sh	r0,r0[0x0]
800056b2:	30 b8       	mov	r8,11
800056b4:	80 00       	ld.sh	r0,r0[0x0]
800056b6:	32 20       	mov	r0,34
800056b8:	80 00       	ld.sh	r0,r0[0x0]
800056ba:	2b 10       	sub	r0,-79

800056bc <main>:
}

#define TOGGLE LED_Flash

int main (void)
{
800056bc:	d4 01       	pushm	lr
800056be:	20 1d       	sub	sp,4
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
800056c0:	f0 1f 00 28 	mcall	80005760 <main+0xa4>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800056c4:	30 3a       	mov	r10,3
800056c6:	e0 6b 24 00 	mov	r11,9216
800056ca:	ea 1b 00 f4 	orh	r11,0xf4
800056ce:	30 0c       	mov	r12,0
800056d0:	f0 1f 00 25 	mcall	80005764 <main+0xa8>
	init_dbg_rs232(FOSC0);
800056d4:	e0 6c 24 00 	mov	r12,9216
800056d8:	ea 1c 00 f4 	orh	r12,0xf4
800056dc:	f0 1f 00 23 	mcall	80005768 <main+0xac>
	print_dbg("\x0C");
800056e0:	4a 3c       	lddpc	r12,8000576c <main+0xb0>
800056e2:	f0 1f 00 24 	mcall	80005770 <main+0xb4>
	print_dbg("Columbus Board Tester\n\n\r");
800056e6:	4a 4c       	lddpc	r12,80005774 <main+0xb8>
800056e8:	f0 1f 00 22 	mcall	80005770 <main+0xb4>
	sd_mmc_resources_init();
800056ec:	f0 1f 00 23 	mcall	80005778 <main+0xbc>
	//sd_mmc_resources_init();
	print_dbg("\n\n\rSD Card Memory Test:\n\r");
800056f0:	4a 3c       	lddpc	r12,8000577c <main+0xc0>
800056f2:	f0 1f 00 20 	mcall	80005770 <main+0xb4>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
800056f6:	30 0c       	mov	r12,0
800056f8:	f0 1f 00 22 	mcall	80005780 <main+0xc4>
800056fc:	c1 31       	brne	80005722 <main+0x66>
	{
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
800056fe:	1a 9b       	mov	r11,sp
80005700:	f0 1f 00 21 	mcall	80005784 <main+0xc8>
		print_dbg("OK:\t");
80005704:	4a 1c       	lddpc	r12,80005788 <main+0xcc>
80005706:	f0 1f 00 1b 	mcall	80005770 <main+0xb4>
		print_dbg_ulong((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
8000570a:	40 0c       	lddsp	r12,sp[0x0]
8000570c:	2f fc       	sub	r12,-1
8000570e:	ab 9c       	lsr	r12,0xb
80005710:	f0 1f 00 1f 	mcall	8000578c <main+0xd0>
		print_dbg("MB\r\n");
80005714:	49 fc       	lddpc	r12,80005790 <main+0xd4>
80005716:	f0 1f 00 17 	mcall	80005770 <main+0xb4>
		print_dbg("SD Card Okay.\n\r");
8000571a:	49 fc       	lddpc	r12,80005794 <main+0xd8>
8000571c:	f0 1f 00 15 	mcall	80005770 <main+0xb4>
80005720:	c0 48       	rjmp	80005728 <main+0x6c>
	}
	else
	{
		// Display an error message
		print_dbg("Not initialized: Check if memory is ready...\r\n");
80005722:	49 ec       	lddpc	r12,80005798 <main+0xdc>
80005724:	f0 1f 00 13 	mcall	80005770 <main+0xb4>
	}
	nav_reset();
80005728:	f0 1f 00 1d 	mcall	8000579c <main+0xe0>
	// Use the last drive available as default.
	nav_drive_set(nav_drive_nb() - 1);
8000572c:	f0 1f 00 1d 	mcall	800057a0 <main+0xe4>
80005730:	20 1c       	sub	r12,1
80005732:	5c 5c       	castu.b	r12
80005734:	f0 1f 00 1c 	mcall	800057a4 <main+0xe8>
	// Mount it.
	nav_partition_mount();
80005738:	f0 1f 00 1c 	mcall	800057a8 <main+0xec>
	nav_filelist_reset();
8000573c:	f0 1f 00 1c 	mcall	800057ac <main+0xf0>
	
	print_dbg("\n\rCreating Log File.");
80005740:	49 cc       	lddpc	r12,800057b0 <main+0xf4>
80005742:	f0 1f 00 0c 	mcall	80005770 <main+0xb4>
	//char buff[20] = "log.txt";
	if(nav_file_create((FS_STRING)LOG_FILE) == true)
80005746:	49 cc       	lddpc	r12,800057b4 <main+0xf8>
80005748:	f0 1f 00 1c 	mcall	800057b8 <main+0xfc>
8000574c:	c0 50       	breq	80005756 <main+0x9a>
		print_dbg("\n\rSuccess!");
8000574e:	49 cc       	lddpc	r12,800057bc <main+0x100>
80005750:	f0 1f 00 08 	mcall	80005770 <main+0xb4>
80005754:	c0 48       	rjmp	8000575c <main+0xa0>
	else
		print_dbg("\n\rNot worked...");
80005756:	49 bc       	lddpc	r12,800057c0 <main+0x104>
80005758:	f0 1f 00 06 	mcall	80005770 <main+0xb4>
	while(1)
	{
		TOGGLE();

	}
}
8000575c:	2f fd       	sub	sp,-4
8000575e:	d8 0a       	popm	pc,r12=0
80005760:	80 00       	ld.sh	r0,r0[0x0]
80005762:	55 b4       	stdsp	sp[0x16c],r4
80005764:	80 00       	ld.sh	r0,r0[0x0]
80005766:	2e bc       	sub	r12,-21
80005768:	80 00       	ld.sh	r0,r0[0x0]
8000576a:	55 54       	stdsp	sp[0x154],r4
8000576c:	80 00       	ld.sh	r0,r0[0x0]
8000576e:	5e 24       	reths	r4
80005770:	80 00       	ld.sh	r0,r0[0x0]
80005772:	55 00       	stdsp	sp[0x140],r0
80005774:	80 00       	ld.sh	r0,r0[0x0]
80005776:	5e 28       	reths	r8
80005778:	80 00       	ld.sh	r0,r0[0x0]
8000577a:	56 38       	stdsp	sp[0x18c],r8
8000577c:	80 00       	ld.sh	r0,r0[0x0]
8000577e:	5e 44       	retge	r4
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	55 b8       	stdsp	sp[0x16c],r8
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	55 cc       	stdsp	sp[0x170],r12
80005788:	80 00       	ld.sh	r0,r0[0x0]
8000578a:	5e 60       	retmi	r0
8000578c:	80 00       	ld.sh	r0,r0[0x0]
8000578e:	54 ec       	stdsp	sp[0x138],r12
80005790:	80 00       	ld.sh	r0,r0[0x0]
80005792:	5e 68       	retmi	r8
80005794:	80 00       	ld.sh	r0,r0[0x0]
80005796:	5e 70       	retpl	r0
80005798:	80 00       	ld.sh	r0,r0[0x0]
8000579a:	5e 80       	retls	r0
8000579c:	80 00       	ld.sh	r0,r0[0x0]
8000579e:	54 2c       	stdsp	sp[0x108],r12
800057a0:	80 00       	ld.sh	r0,r0[0x0]
800057a2:	53 d8       	stdsp	sp[0xf4],r8
800057a4:	80 00       	ld.sh	r0,r0[0x0]
800057a6:	53 84       	stdsp	sp[0xe0],r4
800057a8:	80 00       	ld.sh	r0,r0[0x0]
800057aa:	53 48       	stdsp	sp[0xd0],r8
800057ac:	80 00       	ld.sh	r0,r0[0x0]
800057ae:	52 c4       	stdsp	sp[0xb0],r4
800057b0:	80 00       	ld.sh	r0,r0[0x0]
800057b2:	5e b0       	rethi	r0
800057b4:	80 00       	ld.sh	r0,r0[0x0]
800057b6:	5e c8       	retvs	r8
800057b8:	80 00       	ld.sh	r0,r0[0x0]
800057ba:	52 dc       	stdsp	sp[0xb4],r12
800057bc:	80 00       	ld.sh	r0,r0[0x0]
800057be:	5e d0       	retvc	r0
800057c0:	80 00       	ld.sh	r0,r0[0x0]
800057c2:	5e dc       	retvc	r12

800057c4 <memcmp>:
800057c4:	d4 01       	pushm	lr
800057c6:	30 08       	mov	r8,0
800057c8:	c0 d8       	rjmp	800057e2 <memcmp+0x1e>
800057ca:	f8 08 07 0e 	ld.ub	lr,r12[r8]
800057ce:	f6 08 07 09 	ld.ub	r9,r11[r8]
800057d2:	20 1a       	sub	r10,1
800057d4:	2f f8       	sub	r8,-1
800057d6:	f2 0e 18 00 	cp.b	lr,r9
800057da:	c0 40       	breq	800057e2 <memcmp+0x1e>
800057dc:	fc 09 01 0c 	sub	r12,lr,r9
800057e0:	d8 02       	popm	pc
800057e2:	58 0a       	cp.w	r10,0
800057e4:	cf 31       	brne	800057ca <memcmp+0x6>
800057e6:	14 9c       	mov	r12,r10
800057e8:	d8 02       	popm	pc

800057ea <memcpy>:
800057ea:	58 8a       	cp.w	r10,8
800057ec:	c2 f5       	brlt	8000584a <memcpy+0x60>
800057ee:	f9 eb 10 09 	or	r9,r12,r11
800057f2:	e2 19 00 03 	andl	r9,0x3,COH
800057f6:	e0 81 00 97 	brne	80005924 <memcpy+0x13a>
800057fa:	e0 4a 00 20 	cp.w	r10,32
800057fe:	c3 b4       	brge	80005874 <memcpy+0x8a>
80005800:	f4 08 14 02 	asr	r8,r10,0x2
80005804:	f0 09 11 08 	rsub	r9,r8,8
80005808:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000580c:	76 69       	ld.w	r9,r11[0x18]
8000580e:	99 69       	st.w	r12[0x18],r9
80005810:	76 59       	ld.w	r9,r11[0x14]
80005812:	99 59       	st.w	r12[0x14],r9
80005814:	76 49       	ld.w	r9,r11[0x10]
80005816:	99 49       	st.w	r12[0x10],r9
80005818:	76 39       	ld.w	r9,r11[0xc]
8000581a:	99 39       	st.w	r12[0xc],r9
8000581c:	76 29       	ld.w	r9,r11[0x8]
8000581e:	99 29       	st.w	r12[0x8],r9
80005820:	76 19       	ld.w	r9,r11[0x4]
80005822:	99 19       	st.w	r12[0x4],r9
80005824:	76 09       	ld.w	r9,r11[0x0]
80005826:	99 09       	st.w	r12[0x0],r9
80005828:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000582c:	f8 08 00 28 	add	r8,r12,r8<<0x2
80005830:	e0 1a 00 03 	andl	r10,0x3
80005834:	f4 0a 11 04 	rsub	r10,r10,4
80005838:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000583c:	17 a9       	ld.ub	r9,r11[0x2]
8000583e:	b0 a9       	st.b	r8[0x2],r9
80005840:	17 99       	ld.ub	r9,r11[0x1]
80005842:	b0 99       	st.b	r8[0x1],r9
80005844:	17 89       	ld.ub	r9,r11[0x0]
80005846:	b0 89       	st.b	r8[0x0],r9
80005848:	5e fc       	retal	r12
8000584a:	f4 0a 11 09 	rsub	r10,r10,9
8000584e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80005852:	17 f9       	ld.ub	r9,r11[0x7]
80005854:	b8 f9       	st.b	r12[0x7],r9
80005856:	17 e9       	ld.ub	r9,r11[0x6]
80005858:	b8 e9       	st.b	r12[0x6],r9
8000585a:	17 d9       	ld.ub	r9,r11[0x5]
8000585c:	b8 d9       	st.b	r12[0x5],r9
8000585e:	17 c9       	ld.ub	r9,r11[0x4]
80005860:	b8 c9       	st.b	r12[0x4],r9
80005862:	17 b9       	ld.ub	r9,r11[0x3]
80005864:	b8 b9       	st.b	r12[0x3],r9
80005866:	17 a9       	ld.ub	r9,r11[0x2]
80005868:	b8 a9       	st.b	r12[0x2],r9
8000586a:	17 99       	ld.ub	r9,r11[0x1]
8000586c:	b8 99       	st.b	r12[0x1],r9
8000586e:	17 89       	ld.ub	r9,r11[0x0]
80005870:	b8 89       	st.b	r12[0x0],r9
80005872:	5e fc       	retal	r12
80005874:	eb cd 40 c0 	pushm	r6-r7,lr
80005878:	18 99       	mov	r9,r12
8000587a:	22 0a       	sub	r10,32
8000587c:	b7 07       	ld.d	r6,r11++
8000587e:	b3 26       	st.d	r9++,r6
80005880:	b7 07       	ld.d	r6,r11++
80005882:	b3 26       	st.d	r9++,r6
80005884:	b7 07       	ld.d	r6,r11++
80005886:	b3 26       	st.d	r9++,r6
80005888:	b7 07       	ld.d	r6,r11++
8000588a:	b3 26       	st.d	r9++,r6
8000588c:	22 0a       	sub	r10,32
8000588e:	cf 74       	brge	8000587c <memcpy+0x92>
80005890:	2f 0a       	sub	r10,-16
80005892:	c0 65       	brlt	8000589e <memcpy+0xb4>
80005894:	b7 07       	ld.d	r6,r11++
80005896:	b3 26       	st.d	r9++,r6
80005898:	b7 07       	ld.d	r6,r11++
8000589a:	b3 26       	st.d	r9++,r6
8000589c:	21 0a       	sub	r10,16
8000589e:	5c 3a       	neg	r10
800058a0:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800058a4:	d7 03       	nop
800058a6:	d7 03       	nop
800058a8:	f7 36 00 0e 	ld.ub	r6,r11[14]
800058ac:	f3 66 00 0e 	st.b	r9[14],r6
800058b0:	f7 36 00 0d 	ld.ub	r6,r11[13]
800058b4:	f3 66 00 0d 	st.b	r9[13],r6
800058b8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800058bc:	f3 66 00 0c 	st.b	r9[12],r6
800058c0:	f7 36 00 0b 	ld.ub	r6,r11[11]
800058c4:	f3 66 00 0b 	st.b	r9[11],r6
800058c8:	f7 36 00 0a 	ld.ub	r6,r11[10]
800058cc:	f3 66 00 0a 	st.b	r9[10],r6
800058d0:	f7 36 00 09 	ld.ub	r6,r11[9]
800058d4:	f3 66 00 09 	st.b	r9[9],r6
800058d8:	f7 36 00 08 	ld.ub	r6,r11[8]
800058dc:	f3 66 00 08 	st.b	r9[8],r6
800058e0:	f7 36 00 07 	ld.ub	r6,r11[7]
800058e4:	f3 66 00 07 	st.b	r9[7],r6
800058e8:	f7 36 00 06 	ld.ub	r6,r11[6]
800058ec:	f3 66 00 06 	st.b	r9[6],r6
800058f0:	f7 36 00 05 	ld.ub	r6,r11[5]
800058f4:	f3 66 00 05 	st.b	r9[5],r6
800058f8:	f7 36 00 04 	ld.ub	r6,r11[4]
800058fc:	f3 66 00 04 	st.b	r9[4],r6
80005900:	f7 36 00 03 	ld.ub	r6,r11[3]
80005904:	f3 66 00 03 	st.b	r9[3],r6
80005908:	f7 36 00 02 	ld.ub	r6,r11[2]
8000590c:	f3 66 00 02 	st.b	r9[2],r6
80005910:	f7 36 00 01 	ld.ub	r6,r11[1]
80005914:	f3 66 00 01 	st.b	r9[1],r6
80005918:	f7 36 00 00 	ld.ub	r6,r11[0]
8000591c:	f3 66 00 00 	st.b	r9[0],r6
80005920:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005924:	20 1a       	sub	r10,1
80005926:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000592a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000592e:	cf b1       	brne	80005924 <memcpy+0x13a>
80005930:	5e fc       	retal	r12

80005932 <memset>:
80005932:	18 98       	mov	r8,r12
80005934:	c0 38       	rjmp	8000593a <memset+0x8>
80005936:	10 cb       	st.b	r8++,r11
80005938:	20 1a       	sub	r10,1
8000593a:	58 0a       	cp.w	r10,0
8000593c:	cf d1       	brne	80005936 <memset+0x4>
8000593e:	5e fc       	retal	r12

Disassembly of section .exception:

80005a00 <_evba>:
80005a00:	c0 08       	rjmp	80005a00 <_evba>
	...

80005a04 <_handle_TLB_Multiple_Hit>:
80005a04:	c0 08       	rjmp	80005a04 <_handle_TLB_Multiple_Hit>
	...

80005a08 <_handle_Bus_Error_Data_Fetch>:
80005a08:	c0 08       	rjmp	80005a08 <_handle_Bus_Error_Data_Fetch>
	...

80005a0c <_handle_Bus_Error_Instruction_Fetch>:
80005a0c:	c0 08       	rjmp	80005a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005a10 <_handle_NMI>:
80005a10:	c0 08       	rjmp	80005a10 <_handle_NMI>
	...

80005a14 <_handle_Instruction_Address>:
80005a14:	c0 08       	rjmp	80005a14 <_handle_Instruction_Address>
	...

80005a18 <_handle_ITLB_Protection>:
80005a18:	c0 08       	rjmp	80005a18 <_handle_ITLB_Protection>
	...

80005a1c <_handle_Breakpoint>:
80005a1c:	c0 08       	rjmp	80005a1c <_handle_Breakpoint>
	...

80005a20 <_handle_Illegal_Opcode>:
80005a20:	c0 08       	rjmp	80005a20 <_handle_Illegal_Opcode>
	...

80005a24 <_handle_Unimplemented_Instruction>:
80005a24:	c0 08       	rjmp	80005a24 <_handle_Unimplemented_Instruction>
	...

80005a28 <_handle_Privilege_Violation>:
80005a28:	c0 08       	rjmp	80005a28 <_handle_Privilege_Violation>
	...

80005a2c <_handle_Floating_Point>:
80005a2c:	c0 08       	rjmp	80005a2c <_handle_Floating_Point>
	...

80005a30 <_handle_Coprocessor_Absent>:
80005a30:	c0 08       	rjmp	80005a30 <_handle_Coprocessor_Absent>
	...

80005a34 <_handle_Data_Address_Read>:
80005a34:	c0 08       	rjmp	80005a34 <_handle_Data_Address_Read>
	...

80005a38 <_handle_Data_Address_Write>:
80005a38:	c0 08       	rjmp	80005a38 <_handle_Data_Address_Write>
	...

80005a3c <_handle_DTLB_Protection_Read>:
80005a3c:	c0 08       	rjmp	80005a3c <_handle_DTLB_Protection_Read>
	...

80005a40 <_handle_DTLB_Protection_Write>:
80005a40:	c0 08       	rjmp	80005a40 <_handle_DTLB_Protection_Write>
	...

80005a44 <_handle_DTLB_Modified>:
80005a44:	c0 08       	rjmp	80005a44 <_handle_DTLB_Modified>
	...

80005a50 <_handle_ITLB_Miss>:
80005a50:	c0 08       	rjmp	80005a50 <_handle_ITLB_Miss>
	...

80005a60 <_handle_DTLB_Miss_Read>:
80005a60:	c0 08       	rjmp	80005a60 <_handle_DTLB_Miss_Read>
	...

80005a70 <_handle_DTLB_Miss_Write>:
80005a70:	c0 08       	rjmp	80005a70 <_handle_DTLB_Miss_Write>
	...

80005b00 <_handle_Supervisor_Call>:
80005b00:	c0 08       	rjmp	80005b00 <_handle_Supervisor_Call>
80005b02:	d7 03       	nop

80005b04 <_int0>:
80005b04:	30 0c       	mov	r12,0
80005b06:	fe b0 e9 af 	rcall	80002e64 <_get_interrupt_handler>
80005b0a:	58 0c       	cp.w	r12,0
80005b0c:	f8 0f 17 10 	movne	pc,r12
80005b10:	d6 03       	rete

80005b12 <_int1>:
80005b12:	30 1c       	mov	r12,1
80005b14:	fe b0 e9 a8 	rcall	80002e64 <_get_interrupt_handler>
80005b18:	58 0c       	cp.w	r12,0
80005b1a:	f8 0f 17 10 	movne	pc,r12
80005b1e:	d6 03       	rete

80005b20 <_int2>:
80005b20:	30 2c       	mov	r12,2
80005b22:	fe b0 e9 a1 	rcall	80002e64 <_get_interrupt_handler>
80005b26:	58 0c       	cp.w	r12,0
80005b28:	f8 0f 17 10 	movne	pc,r12
80005b2c:	d6 03       	rete

80005b2e <_int3>:
80005b2e:	30 3c       	mov	r12,3
80005b30:	fe b0 e9 9a 	rcall	80002e64 <_get_interrupt_handler>
80005b34:	58 0c       	cp.w	r12,0
80005b36:	f8 0f 17 10 	movne	pc,r12
80005b3a:	d6 03       	rete
80005b3c:	d7 03       	nop
80005b3e:	d7 03       	nop
80005b40:	d7 03       	nop
80005b42:	d7 03       	nop
80005b44:	d7 03       	nop
80005b46:	d7 03       	nop
80005b48:	d7 03       	nop
80005b4a:	d7 03       	nop
80005b4c:	d7 03       	nop
80005b4e:	d7 03       	nop
80005b50:	d7 03       	nop
80005b52:	d7 03       	nop
80005b54:	d7 03       	nop
80005b56:	d7 03       	nop
80005b58:	d7 03       	nop
80005b5a:	d7 03       	nop
80005b5c:	d7 03       	nop
80005b5e:	d7 03       	nop
80005b60:	d7 03       	nop
80005b62:	d7 03       	nop
80005b64:	d7 03       	nop
80005b66:	d7 03       	nop
80005b68:	d7 03       	nop
80005b6a:	d7 03       	nop
80005b6c:	d7 03       	nop
80005b6e:	d7 03       	nop
80005b70:	d7 03       	nop
80005b72:	d7 03       	nop
80005b74:	d7 03       	nop
80005b76:	d7 03       	nop
80005b78:	d7 03       	nop
80005b7a:	d7 03       	nop
80005b7c:	d7 03       	nop
80005b7e:	d7 03       	nop
80005b80:	d7 03       	nop
80005b82:	d7 03       	nop
80005b84:	d7 03       	nop
80005b86:	d7 03       	nop
80005b88:	d7 03       	nop
80005b8a:	d7 03       	nop
80005b8c:	d7 03       	nop
80005b8e:	d7 03       	nop
80005b90:	d7 03       	nop
80005b92:	d7 03       	nop
80005b94:	d7 03       	nop
80005b96:	d7 03       	nop
80005b98:	d7 03       	nop
80005b9a:	d7 03       	nop
80005b9c:	d7 03       	nop
80005b9e:	d7 03       	nop
80005ba0:	d7 03       	nop
80005ba2:	d7 03       	nop
80005ba4:	d7 03       	nop
80005ba6:	d7 03       	nop
80005ba8:	d7 03       	nop
80005baa:	d7 03       	nop
80005bac:	d7 03       	nop
80005bae:	d7 03       	nop
80005bb0:	d7 03       	nop
80005bb2:	d7 03       	nop
80005bb4:	d7 03       	nop
80005bb6:	d7 03       	nop
80005bb8:	d7 03       	nop
80005bba:	d7 03       	nop
80005bbc:	d7 03       	nop
80005bbe:	d7 03       	nop
80005bc0:	d7 03       	nop
80005bc2:	d7 03       	nop
80005bc4:	d7 03       	nop
80005bc6:	d7 03       	nop
80005bc8:	d7 03       	nop
80005bca:	d7 03       	nop
80005bcc:	d7 03       	nop
80005bce:	d7 03       	nop
80005bd0:	d7 03       	nop
80005bd2:	d7 03       	nop
80005bd4:	d7 03       	nop
80005bd6:	d7 03       	nop
80005bd8:	d7 03       	nop
80005bda:	d7 03       	nop
80005bdc:	d7 03       	nop
80005bde:	d7 03       	nop
80005be0:	d7 03       	nop
80005be2:	d7 03       	nop
80005be4:	d7 03       	nop
80005be6:	d7 03       	nop
80005be8:	d7 03       	nop
80005bea:	d7 03       	nop
80005bec:	d7 03       	nop
80005bee:	d7 03       	nop
80005bf0:	d7 03       	nop
80005bf2:	d7 03       	nop
80005bf4:	d7 03       	nop
80005bf6:	d7 03       	nop
80005bf8:	d7 03       	nop
80005bfa:	d7 03       	nop
80005bfc:	d7 03       	nop
80005bfe:	d7 03       	nop
