
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bd8c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000de00  8000de00  0000e200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001048  8000e000  8000e000  0000e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000510  00000004  8000f048  0000f804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .balign       00000004  00000514  8000f558  0000fd14  2**0
                  ALLOC
  7 .bss          000007d8  00000518  8000f558  0000fd18  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  0000fd14  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000019d8  00000000  00000000  0000fd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00004413  00000000  00000000  0001171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000380ae  00000000  00000000  00015b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007967  00000000  00000000  0004dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c07f  00000000  00000000  00055544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004538  00000000  00000000  000715c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009b55  00000000  00000000  00075afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000109b6  00000000  00000000  0007f651  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 025aedcd  00000000  00000000  00090007  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00001de8  00000000  00000000  0263edd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b2 c8 	sub	pc,pc,-19768

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	09 74       	ld.ub	r4,--r4
8000210c:	00 00       	add	r0,r0
8000210e:	09 72       	ld.ub	r2,--r4
80002110:	00 00       	add	r0,r0
80002112:	09 60       	ld.uh	r0,--r4
80002114:	00 00       	add	r0,r0
80002116:	09 68       	ld.uh	r8,--r4
80002118:	00 00       	add	r0,r0
8000211a:	09 6c       	ld.uh	r12,--r4
8000211c:	00 00       	add	r0,r0
8000211e:	09 6a       	ld.uh	r10,--r4

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	3a c6       	mov	r6,-84
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	3a e2       	mov	r2,-82

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	39 96       	mov	r6,-103
800021a4:	00 00       	add	r0,r0
800021a6:	09 84       	ld.ub	r4,r4[0x0]
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	39 e2       	mov	r2,-98
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	05 18       	ld.sh	r8,r2++
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	05 18       	ld.sh	r8,r2++
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	3a c6       	mov	r6,-84
800022ac:	00 00       	add	r0,r0
800022ae:	09 84       	ld.ub	r4,r4[0x0]
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 96       	mov	r6,-103
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	09 84       	ld.ub	r4,r4[0x0]
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	39 e2       	mov	r2,-98

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	05 30       	ld.ub	r0,r2++
80002364:	00 00       	add	r0,r0
80002366:	09 84       	ld.ub	r4,r4[0x0]
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	3a c6       	mov	r6,-84
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	39 96       	mov	r6,-103
800024a0:	00 00       	add	r0,r0
800024a2:	09 72       	ld.ub	r2,--r4
800024a4:	00 00       	add	r0,r0
800024a6:	05 18       	ld.sh	r8,r2++
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	09 84       	ld.ub	r4,r4[0x0]
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	39 e2       	mov	r2,-98
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	3a c6       	mov	r6,-84
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	39 96       	mov	r6,-103
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	09 84       	ld.ub	r4,r4[0x0]
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	39 e2       	mov	r2,-98
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	39 96       	mov	r6,-103
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	09 84       	ld.ub	r4,r4[0x0]
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	39 e2       	mov	r2,-98
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	39 96       	mov	r6,-103
80002730:	00 00       	add	r0,r0
80002732:	09 72       	ld.ub	r2,--r4
80002734:	00 00       	add	r0,r0
80002736:	05 18       	ld.sh	r8,r2++
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	09 84       	ld.ub	r4,r4[0x0]
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	39 e2       	mov	r2,-98
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3a c6       	mov	r6,-84
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	3a e2       	mov	r2,-82

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	39 96       	mov	r6,-103
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	09 84       	ld.ub	r4,r4[0x0]
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	39 e2       	mov	r2,-98
80002834:	00 00       	add	r0,r0
80002836:	05 30       	ld.ub	r0,r2++
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	3a c6       	mov	r6,-84
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	3a e2       	mov	r2,-82

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	05 1c       	ld.sh	r12,r2++
80002ab0:	00 00       	add	r0,r0
80002ab2:	05 2c       	ld.uh	r12,r2++
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	3a 08       	mov	r8,-96
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	39 96       	mov	r6,-103
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	3a c6       	mov	r6,-84
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	39 e2       	mov	r2,-98
80002ac4:	00 00       	add	r0,r0
80002ac6:	05 30       	ld.ub	r0,r2++
80002ac8:	00 00       	add	r0,r0
80002aca:	09 72       	ld.ub	r2,--r4
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	09 84       	ld.ub	r4,r4[0x0]
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	09 74       	ld.ub	r4,--r4
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	05 30       	ld.ub	r0,r2++
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	05 2c       	ld.uh	r12,r2++
80002b3c:	00 00       	add	r0,r0
80002b3e:	05 1c       	ld.sh	r12,r2++
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	05 30       	ld.ub	r0,r2++
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	05 30       	ld.ub	r0,r2++
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	05 30       	ld.ub	r0,r2++
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	05 30       	ld.ub	r0,r2++
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	09 6c       	ld.uh	r12,--r4

80002cd0 <acifa_is_aca_ready>:
#include "compiler.h"
#include "acifa.h"

static bool acifa_is_aca_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACARDY_MASK) != 0;
80002cd0:	79 0c       	ld.w	r12,r12[0x40]
}
80002cd2:	f9 dc c3 01 	bfextu	r12,r12,0x18,0x1
80002cd6:	5e fc       	retal	r12

80002cd8 <acifa_is_acb_ready>:

static bool acifa_is_acb_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBRDY_MASK) != 0;
80002cd8:	79 0c       	ld.w	r12,r12[0x40]
}
80002cda:	f9 dc c3 21 	bfextu	r12,r12,0x19,0x1
80002cde:	5e fc       	retal	r12

80002ce0 <acifa_configure>:
void acifa_configure(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel,
		uint8_t input_p,
		uint8_t input_n,
		uint32_t pb_hz)
{
80002ce0:	d4 01       	pushm	lr
	Assert( acifa != NULL );
	if (comp_sel == ACIFA_COMP_SELA) {
80002ce2:	30 1e       	mov	lr,1
80002ce4:	fc 0b 18 00 	cp.b	r11,lr
80002ce8:	c0 a1       	brne	80002cfc <acifa_configure+0x1c>
		acifa->confa
80002cea:	b1 69       	lsl	r9,0x10
80002cec:	e6 19 00 0f 	andh	r9,0xf,COH
80002cf0:	a9 6a       	lsl	r10,0x8
80002cf2:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002cf6:	14 49       	or	r9,r10
80002cf8:	99 09       	st.w	r12[0x0],r9
80002cfa:	c0 98       	rjmp	80002d0c <acifa_configure+0x2c>
				AVR32_ACIFA_CONFA_INSELP_MASK) |
				((input_n <<
				AVR32_ACIFA_CONFA_INSELN_OFFSET) &
				AVR32_ACIFA_CONFA_INSELN_MASK);
	} else {
		acifa->confb
80002cfc:	b1 69       	lsl	r9,0x10
80002cfe:	e6 19 00 0f 	andh	r9,0xf,COH
80002d02:	a9 6a       	lsl	r10,0x8
80002d04:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002d08:	14 49       	or	r9,r10
80002d0a:	99 19       	st.w	r12[0x4],r9
				AVR32_ACIFA_CONFB_INSELN_OFFSET) &
				AVR32_ACIFA_CONFB_INSELN_MASK);
	}

	/* Startup Time of up to 10us max. */
	acifa->sut = (pb_hz / 100000);
80002d0c:	f0 09 16 05 	lsr	r9,r8,0x5
80002d10:	e0 6a 5a c5 	mov	r10,23237
80002d14:	ea 1a 0a 7c 	orh	r10,0xa7c
80002d18:	f2 0a 06 48 	mulu.d	r8,r9,r10
80002d1c:	f2 08 16 07 	lsr	r8,r9,0x7
80002d20:	99 98       	st.w	r12[0x24],r8
}
80002d22:	d8 02       	popm	pc

80002d24 <acifa_configure_hysteresis>:
		uint8_t level)
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
80002d24:	30 18       	mov	r8,1
80002d26:	f0 0b 18 00 	cp.b	r11,r8
80002d2a:	c0 81       	brne	80002d3a <acifa_configure_hysteresis+0x16>
		acifa->confa
			|= ((level <<
80002d2c:	78 08       	ld.w	r8,r12[0x0]
80002d2e:	b9 6a       	lsl	r10,0x18
80002d30:	e6 1a 03 00 	andh	r10,0x300,COH
80002d34:	10 4a       	or	r10,r8
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
		acifa->confa
80002d36:	99 0a       	st.w	r12[0x0],r10
80002d38:	5e fc       	retal	r12
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
			|= ((level <<
80002d3a:	78 18       	ld.w	r8,r12[0x4]
80002d3c:	b9 6a       	lsl	r10,0x18
80002d3e:	e6 1a 03 00 	andh	r10,0x300,COH
80002d42:	10 4a       	or	r10,r8
		acifa->confa
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
80002d44:	99 1a       	st.w	r12[0x4],r10
80002d46:	5e fc       	retal	r12

80002d48 <acifa_start>:
 * \param *acifa        Base address of the ACIFA
 * \param comp_sel      Comparator Selection
 */
void acifa_start(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	18 97       	mov	r7,r12
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002d4e:	30 18       	mov	r8,1
80002d50:	f0 0b 18 00 	cp.b	r11,r8
80002d54:	c0 91       	brne	80002d66 <acifa_start+0x1e>
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d56:	30 98       	mov	r8,9
80002d58:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0f 	mcall	80002d98 <acifa_start+0x50>
80002d60:	cf d0       	breq	80002d5a <acifa_start+0x12>
80002d62:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACA */
		}
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002d66:	30 28       	mov	r8,2
80002d68:	f0 0b 18 00 	cp.b	r11,r8
80002d6c:	c0 91       	brne	80002d7e <acifa_start+0x36>
		acifa->en = (AVR32_ACIFA_EN_ACBEN_MASK) |
80002d6e:	31 28       	mov	r8,18
80002d70:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_acb_ready(acifa)) {
80002d72:	0e 9c       	mov	r12,r7
80002d74:	f0 1f 00 0a 	mcall	80002d9c <acifa_start+0x54>
80002d78:	cf d0       	breq	80002d72 <acifa_start+0x2a>
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACB */
		}
	} else {
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d7e:	31 b8       	mov	r8,27
80002d80:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK) |
				(AVR32_ACIFA_EN_ACBEN_MASK) |
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d82:	0e 9c       	mov	r12,r7
80002d84:	f0 1f 00 05 	mcall	80002d98 <acifa_start+0x50>
80002d88:	cf d0       	breq	80002d82 <acifa_start+0x3a>
			/* Wait for ACA */
		}
		while (!acifa_is_acb_ready(acifa)) {
80002d8a:	0e 9c       	mov	r12,r7
80002d8c:	f0 1f 00 04 	mcall	80002d9c <acifa_start+0x54>
80002d90:	cf d0       	breq	80002d8a <acifa_start+0x42>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c d8       	sub	r8,-51

80002da0 <acifa_is_aca_inp_higher>:
 *  \retval true when ACA Input P is higher than Input N
 *  \retval false when ACA Input P is Lower than Input N
 */
bool acifa_is_aca_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACACS_MASK) != 0;
80002da0:	79 0c       	ld.w	r12,r12[0x40]
}
80002da2:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
80002da6:	5e fc       	retal	r12

80002da8 <acifa_is_acb_inp_higher>:
 *  \retval true when ACB Input P is higher than Input N
 *  \retval false when ACB Input P is Lower than Input N
 */
bool acifa_is_acb_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBCS_MASK) != 0;
80002da8:	79 0c       	ld.w	r12,r12[0x40]
}
80002daa:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80002dae:	5e fc       	retal	r12

80002db0 <acifa_clear_flags>:
 * \param acifa         Base address of the ACIFA
 * \param flag_mask     Flag Mask Value
 */
void acifa_clear_flags(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	acifa->scr = flag_mask;
80002db0:	f9 4b 00 44 	st.w	r12[68],r11
}
80002db4:	5e fc       	retal	r12

80002db6 <acifa_enable_interrupt_toggle>:
void acifa_enable_interrupt_toggle(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002db6:	30 18       	mov	r8,1
80002db8:	f0 0b 18 00 	cp.b	r11,r8
80002dbc:	c0 71       	brne	80002dca <acifa_enable_interrupt_toggle+0x14>
		acifa->CONFA.is = 2;
80002dbe:	78 08       	ld.w	r8,r12[0x0]
80002dc0:	30 29       	mov	r9,2
80002dc2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dc6:	99 08       	st.w	r12[0x0],r8
80002dc8:	5e fc       	retal	r12
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002dca:	30 28       	mov	r8,2
80002dcc:	f0 0b 18 00 	cp.b	r11,r8
80002dd0:	5e 1c       	retne	r12
		acifa->CONFB.is = 2;
80002dd2:	78 18       	ld.w	r8,r12[0x4]
80002dd4:	30 29       	mov	r9,2
80002dd6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dda:	99 18       	st.w	r12[0x4],r8
80002ddc:	5e fc       	retal	r12

80002dde <acifa_enable_interrupt>:
 */
void acifa_enable_interrupt(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	Assert( acifa != NULL );

	acifa->ier = flag_mask;
80002dde:	99 ab       	st.w	r12[0x28],r11
}
80002de0:	5e fc       	retal	r12

80002de2 <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002de2:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002de6:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002dea:	18 38       	cp.w	r8,r12
80002dec:	e0 88 00 06 	brls	80002df8 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002df0:	e1 b8 00 42 	mfsr	r8,0x108
80002df4:	10 3c       	cp.w	r12,r8
80002df6:	cf d3       	brcs	80002df0 <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002df8:	e1 b8 00 42 	mfsr	r8,0x108
80002dfc:	10 3c       	cp.w	r12,r8
80002dfe:	fe 9b ff fd 	brhi	80002df8 <sdramc_ck_delay+0x16>
}
80002e02:	5e fc       	retal	r12

80002e04 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002e04:	d4 31       	pushm	r0-r7,lr
80002e06:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002e08:	ee 78 42 3f 	mov	r8,999999
80002e0c:	f8 08 00 09 	add	r9,r12,r8
80002e10:	e0 60 de 83 	mov	r0,56963
80002e14:	ea 10 43 1b 	orh	r0,0x431b
80002e18:	f2 00 06 48 	mulu.d	r8,r9,r0
80002e1c:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002e20:	32 5b       	mov	r11,37
80002e22:	4c 9c       	lddpc	r12,80002f44 <sdramc_init+0x140>
80002e24:	f0 1f 00 49 	mcall	80002f48 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002e28:	fe 68 20 00 	mov	r8,-122880
80002e2c:	f0 f9 01 28 	ld.w	r9,r8[296]
80002e30:	a1 a9       	sbr	r9,0x0
80002e32:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002e36:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002e3a:	ec 08 15 04 	lsl	r8,r6,0x4
80002e3e:	0c 18       	sub	r8,r6
80002e40:	f0 c3 fc 19 	sub	r3,r8,-999
80002e44:	e0 65 4d d3 	mov	r5,19923
80002e48:	ea 15 10 62 	orh	r5,0x1062
80002e4c:	e6 05 06 42 	mulu.d	r2,r3,r5
80002e50:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002e52:	ec 02 15 05 	lsl	r2,r6,0x5
80002e56:	0c 02       	add	r2,r6
80002e58:	a1 72       	lsl	r2,0x1
80002e5a:	e4 06 00 0b 	add	r11,r2,r6
80002e5e:	f6 cb fc 19 	sub	r11,r11,-999
80002e62:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002e66:	f6 0a 16 06 	lsr	r10,r11,0x6
80002e6a:	bd 6a       	lsl	r10,0x1c
80002e6c:	e8 1a 00 f0 	orl	r10,0xf0
80002e70:	e6 09 15 08 	lsl	r9,r3,0x8
80002e74:	e2 19 0f 00 	andl	r9,0xf00,COH
80002e78:	12 4a       	or	r10,r9
80002e7a:	f0 09 15 02 	lsl	r9,r8,0x2
80002e7e:	f2 c9 fc 19 	sub	r9,r9,-999
80002e82:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e86:	a7 69       	lsl	r9,0x6
80002e88:	e2 19 f0 00 	andl	r9,0xf000,COH
80002e8c:	f5 e9 10 08 	or	r8,r10,r9
80002e90:	e6 09 15 10 	lsl	r9,r3,0x10
80002e94:	e6 19 00 0f 	andh	r9,0xf,COH
80002e98:	12 48       	or	r8,r9
80002e9a:	e6 09 15 14 	lsl	r9,r3,0x14
80002e9e:	e6 19 00 f0 	andh	r9,0xf0,COH
80002ea2:	12 48       	or	r8,r9
80002ea4:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002ea8:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002eac:	f6 cb fc 19 	sub	r11,r11,-999
80002eb0:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002eb4:	f6 09 15 12 	lsl	r9,r11,0x12
80002eb8:	e6 19 0f 00 	andh	r9,0xf00,COH
80002ebc:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002ebe:	fe 67 2c 00 	mov	r7,-119808
80002ec2:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002ec4:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002ec6:	30 18       	mov	r8,1
80002ec8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eca:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ecc:	fc 14 c0 00 	movh	r4,0xc000
80002ed0:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002ed2:	ec 0c 10 64 	mul	r12,r6,100
80002ed6:	f0 1f 00 1e 	mcall	80002f4c <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002eda:	30 28       	mov	r8,2
80002edc:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ede:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ee0:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002ee2:	06 9c       	mov	r12,r3
80002ee4:	f0 1f 00 1a 	mcall	80002f4c <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002ee8:	30 48       	mov	r8,4
80002eea:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eec:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002eee:	e4 c3 fc 19 	sub	r3,r2,-999
80002ef2:	e6 05 06 42 	mulu.d	r2,r3,r5
80002ef6:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002ef8:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002efa:	06 9c       	mov	r12,r3
80002efc:	f0 1f 00 14 	mcall	80002f4c <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002f00:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002f02:	06 9c       	mov	r12,r3
80002f04:	f0 1f 00 12 	mcall	80002f4c <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002f08:	30 38       	mov	r8,3
80002f0a:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f0c:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f0e:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002f10:	ec 09 15 01 	lsl	r9,r6,0x1
80002f14:	f2 c9 fc 19 	sub	r9,r9,-999
80002f18:	f2 05 06 48 	mulu.d	r8,r9,r5
80002f1c:	f2 0c 16 06 	lsr	r12,r9,0x6
80002f20:	f0 1f 00 0b 	mcall	80002f4c <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002f24:	30 08       	mov	r8,0
80002f26:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f28:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f2a:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002f2c:	e2 00 06 40 	mulu.d	r0,r1,r0
80002f30:	b3 81       	lsr	r1,0x12
80002f32:	e0 68 1e 84 	mov	r8,7812
80002f36:	b1 31       	mul	r1,r8
80002f38:	e2 05 06 44 	mulu.d	r4,r1,r5
80002f3c:	a7 85       	lsr	r5,0x6
80002f3e:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002f40:	6e 18       	ld.w	r8,r7[0x4]
}
80002f42:	d8 32       	popm	r0-r7,pc
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	e0 00       	*unknown*
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	31 c4       	mov	r4,28
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2d e2       	sub	r2,-34

80002f50 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002f50:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002f54:	58 0a       	cp.w	r10,0
80002f56:	c6 30       	breq	8000301c <eic_init+0xcc>
80002f58:	30 08       	mov	r8,0
80002f5a:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f5c:	30 19       	mov	r9,1
80002f5e:	30 1e       	mov	lr,1
80002f60:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002f64:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002f68:	11 96       	ld.ub	r6,r8[0x1]
80002f6a:	f2 06 18 00 	cp.b	r6,r9
80002f6e:	c0 71       	brne	80002f7c <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002f70:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f72:	11 86       	ld.ub	r6,r8[0x0]
80002f74:	fc 06 09 46 	lsl	r6,lr,r6
80002f78:	0a 46       	or	r6,r5
80002f7a:	c0 78       	rjmp	80002f88 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002f7c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f7e:	11 86       	ld.ub	r6,r8[0x0]
80002f80:	fc 06 09 46 	lsl	r6,lr,r6
80002f84:	5c d6       	com	r6
80002f86:	0a 66       	and	r6,r5
80002f88:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f8a:	11 a6       	ld.ub	r6,r8[0x2]
80002f8c:	f2 06 18 00 	cp.b	r6,r9
80002f90:	c0 71       	brne	80002f9e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002f92:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f94:	11 86       	ld.ub	r6,r8[0x0]
80002f96:	fc 06 09 46 	lsl	r6,lr,r6
80002f9a:	0a 46       	or	r6,r5
80002f9c:	c0 78       	rjmp	80002faa <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002f9e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002fa0:	11 86       	ld.ub	r6,r8[0x0]
80002fa2:	fc 06 09 46 	lsl	r6,lr,r6
80002fa6:	5c d6       	com	r6
80002fa8:	0a 66       	and	r6,r5
80002faa:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fac:	11 b6       	ld.ub	r6,r8[0x3]
80002fae:	f2 06 18 00 	cp.b	r6,r9
80002fb2:	c0 71       	brne	80002fc0 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002fb4:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fb6:	11 86       	ld.ub	r6,r8[0x0]
80002fb8:	fc 06 09 46 	lsl	r6,lr,r6
80002fbc:	0a 46       	or	r6,r5
80002fbe:	c0 78       	rjmp	80002fcc <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002fc0:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fc2:	11 86       	ld.ub	r6,r8[0x0]
80002fc4:	fc 06 09 46 	lsl	r6,lr,r6
80002fc8:	5c d6       	com	r6
80002fca:	0a 66       	and	r6,r5
80002fcc:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fce:	11 c6       	ld.ub	r6,r8[0x4]
80002fd0:	f2 06 18 00 	cp.b	r6,r9
80002fd4:	c0 71       	brne	80002fe2 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002fd6:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fd8:	11 86       	ld.ub	r6,r8[0x0]
80002fda:	fc 06 09 46 	lsl	r6,lr,r6
80002fde:	0a 46       	or	r6,r5
80002fe0:	c0 78       	rjmp	80002fee <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002fe2:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fe4:	11 86       	ld.ub	r6,r8[0x0]
80002fe6:	fc 06 09 46 	lsl	r6,lr,r6
80002fea:	5c d6       	com	r6
80002fec:	0a 66       	and	r6,r5
80002fee:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ff0:	11 d6       	ld.ub	r6,r8[0x5]
80002ff2:	f2 06 18 00 	cp.b	r6,r9
80002ff6:	c0 71       	brne	80003004 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002ff8:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ffa:	11 88       	ld.ub	r8,r8[0x0]
80002ffc:	fc 08 09 48 	lsl	r8,lr,r8
80003000:	0c 48       	or	r8,r6
80003002:	c0 78       	rjmp	80003010 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003004:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003006:	11 88       	ld.ub	r8,r8[0x0]
80003008:	fc 08 09 48 	lsl	r8,lr,r8
8000300c:	5c d8       	com	r8
8000300e:	0c 68       	and	r8,r6
80003010:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80003012:	2f f7       	sub	r7,-1
80003014:	0e 98       	mov	r8,r7
80003016:	0e 3a       	cp.w	r10,r7
80003018:	fe 9b ff a4 	brhi	80002f60 <eic_init+0x10>
8000301c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003020 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80003020:	30 18       	mov	r8,1
80003022:	f0 0b 09 48 	lsl	r8,r8,r11
80003026:	99 c8       	st.w	r12[0x30],r8
}
80003028:	5e fc       	retal	r12

8000302a <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
8000302a:	30 18       	mov	r8,1
8000302c:	f0 0b 09 48 	lsl	r8,r8,r11
80003030:	99 08       	st.w	r12[0x0],r8
}
80003032:	5e fc       	retal	r12

80003034 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003034:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003038:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
8000303a:	30 19       	mov	r9,1
8000303c:	f2 0b 09 4b 	lsl	r11,r9,r11
80003040:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80003042:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003044:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80003048:	5e fc       	retal	r12

8000304a <eic_disable_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000304a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000304e:	d3 03       	ssrf	0x10

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->idr = 1 << line_number;
80003050:	30 19       	mov	r9,1
80003052:	f2 0b 09 4b 	lsl	r11,r9,r11
80003056:	99 1b       	st.w	r12[0x4],r11
	eic->imr;
80003058:	78 29       	ld.w	r9,r12[0x8]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000305a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
8000305e:	5e fc       	retal	r12

80003060 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003060:	fe 68 00 00 	mov	r8,-131072
80003064:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003066:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000306a:	91 09       	st.w	r8[0x0],r9
}
8000306c:	5e fc       	retal	r12

8000306e <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000306e:	fe 68 00 00 	mov	r8,-131072
80003072:	70 2c       	ld.w	r12,r8[0x8]
}
80003074:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003078:	5e fc       	retal	r12
8000307a:	d7 03       	nop

8000307c <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
8000307c:	d4 01       	pushm	lr
	while (!flashc_is_ready());
8000307e:	f0 1f 00 03 	mcall	80003088 <flashc_default_wait_until_ready+0xc>
80003082:	cf e0       	breq	8000307e <flashc_default_wait_until_ready+0x2>
}
80003084:	d8 02       	popm	pc
80003086:	00 00       	add	r0,r0
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 6e       	mov	lr,6

8000308c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000308c:	eb cd 40 c0 	pushm	r6-r7,lr
80003090:	18 96       	mov	r6,r12
80003092:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003094:	48 e8       	lddpc	r8,800030cc <flashc_issue_command+0x40>
80003096:	70 08       	ld.w	r8,r8[0x0]
80003098:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000309a:	fe 68 00 00 	mov	r8,-131072
8000309e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800030a0:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800030a4:	58 07       	cp.w	r7,0
800030a6:	c0 35       	brlt	800030ac <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800030a8:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800030ac:	3a 59       	mov	r9,-91
800030ae:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800030b2:	fe 69 00 00 	mov	r9,-131072
800030b6:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800030b8:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800030ba:	e2 19 00 0c 	andl	r9,0xc,COH
800030be:	48 58       	lddpc	r8,800030d0 <flashc_issue_command+0x44>
800030c0:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800030c2:	48 38       	lddpc	r8,800030cc <flashc_issue_command+0x40>
800030c4:	70 08       	ld.w	r8,r8[0x0]
800030c6:	5d 18       	icall	r8
}
800030c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030cc:	00 00       	add	r0,r0
800030ce:	00 08       	add	r8,r0
800030d0:	00 00       	add	r0,r0
800030d2:	05 34       	ld.ub	r4,r2++

800030d4 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800030da:	e0 68 8a 40 	mov	r8,35392
800030de:	ea 18 01 f7 	orh	r8,0x1f7
800030e2:	10 3c       	cp.w	r12,r8
800030e4:	e0 88 00 18 	brls	80003114 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
800030e8:	30 1c       	mov	r12,1
800030ea:	f0 1f 00 10 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800030ee:	e0 68 14 80 	mov	r8,5248
800030f2:	ea 18 03 ef 	orh	r8,0x3ef
800030f6:	10 37       	cp.w	r7,r8
800030f8:	e0 8b 00 08 	brhi	80003108 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800030fc:	3f fb       	mov	r11,-1
800030fe:	31 1c       	mov	r12,17
80003100:	f0 1f 00 0b 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80003108:	3f fb       	mov	r11,-1
8000310a:	31 0c       	mov	r12,16
8000310c:	f0 1f 00 08 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003110:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80003114:	30 0c       	mov	r12,0
80003116:	f0 1f 00 05 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8000311a:	3f fb       	mov	r11,-1
8000311c:	31 1c       	mov	r12,17
8000311e:	f0 1f 00 04 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003122:	e3 cd 80 80 	ldm	sp++,r7,pc
80003126:	00 00       	add	r0,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	30 60       	mov	r0,6
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	30 8c       	mov	r12,8

80003130 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003130:	f8 08 16 05 	lsr	r8,r12,0x5
80003134:	a9 78       	lsl	r8,0x9
80003136:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
8000313a:	58 7b       	cp.w	r11,7
8000313c:	e0 8b 00 05 	brhi	80003146 <gpio_enable_module_pin+0x16>
80003140:	4a 09       	lddpc	r9,800031c0 <gpio_enable_module_pin+0x90>
80003142:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80003146:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003148:	30 19       	mov	r9,1
8000314a:	f2 0c 09 49 	lsl	r9,r9,r12
8000314e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003150:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003152:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003154:	c3 18       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003156:	30 19       	mov	r9,1
80003158:	f2 0c 09 49 	lsl	r9,r9,r12
8000315c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000315e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003160:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003162:	c2 a8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003164:	30 19       	mov	r9,1
80003166:	f2 0c 09 49 	lsl	r9,r9,r12
8000316a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000316c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000316e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003170:	c2 38       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003172:	30 19       	mov	r9,1
80003174:	f2 0c 09 49 	lsl	r9,r9,r12
80003178:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000317a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000317c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000317e:	c1 c8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003180:	30 19       	mov	r9,1
80003182:	f2 0c 09 49 	lsl	r9,r9,r12
80003186:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003188:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000318a:	91 d9       	st.w	r8[0x34],r9
		break;
8000318c:	c1 58       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000318e:	30 19       	mov	r9,1
80003190:	f2 0c 09 49 	lsl	r9,r9,r12
80003194:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003196:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003198:	91 d9       	st.w	r8[0x34],r9
		break;
8000319a:	c0 e8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000319c:	30 19       	mov	r9,1
8000319e:	f2 0c 09 49 	lsl	r9,r9,r12
800031a2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031a4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031a6:	91 d9       	st.w	r8[0x34],r9
		break;
800031a8:	c0 78       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031aa:	30 19       	mov	r9,1
800031ac:	f2 0c 09 49 	lsl	r9,r9,r12
800031b0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031b2:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031b4:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800031b6:	30 19       	mov	r9,1
800031b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800031bc:	91 2c       	st.w	r8[0x8],r12
800031be:	5e fd       	retal	0
800031c0:	80 00       	ld.sh	r0,r0[0x0]
800031c2:	e1 28 d4 21 	ld.sb	r8,r0[-11231]

800031c4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c4:	d4 21       	pushm	r4-r7,lr
800031c6:	18 97       	mov	r7,r12
800031c8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031ca:	58 0b       	cp.w	r11,0
800031cc:	c0 31       	brne	800031d2 <gpio_enable_module+0xe>
800031ce:	30 05       	mov	r5,0
800031d0:	c0 d8       	rjmp	800031ea <gpio_enable_module+0x26>
800031d2:	30 05       	mov	r5,0
800031d4:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031d6:	6e 1b       	ld.w	r11,r7[0x4]
800031d8:	6e 0c       	ld.w	r12,r7[0x0]
800031da:	f0 1f 00 06 	mcall	800031f0 <gpio_enable_module+0x2c>
800031de:	18 45       	or	r5,r12
		gpiomap++;
800031e0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031e2:	2f f6       	sub	r6,-1
800031e4:	0c 34       	cp.w	r4,r6
800031e6:	fe 9b ff f8 	brhi	800031d6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800031ea:	0a 9c       	mov	r12,r5
800031ec:	d8 22       	popm	r4-r7,pc
800031ee:	00 00       	add	r0,r0
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	31 30       	mov	r0,19

800031f4 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031f4:	f8 08 16 05 	lsr	r8,r12,0x5
800031f8:	a9 78       	lsl	r8,0x9
800031fa:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
800031fe:	30 19       	mov	r9,1
80003200:	f2 0c 09 4c 	lsl	r12,r9,r12
80003204:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80003208:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
8000320c:	5e fc       	retal	r12

8000320e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000320e:	f8 08 16 05 	lsr	r8,r12,0x5
80003212:	a9 78       	lsl	r8,0x9
80003214:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003218:	30 19       	mov	r9,1
8000321a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000321e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003222:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003226:	91 1c       	st.w	r8[0x4],r12
}
80003228:	5e fc       	retal	r12

8000322a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000322a:	f8 08 16 05 	lsr	r8,r12,0x5
8000322e:	a9 78       	lsl	r8,0x9
80003230:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003234:	30 19       	mov	r9,1
80003236:	f2 0c 09 4c 	lsl	r12,r9,r12
8000323a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000323e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003242:	91 1c       	st.w	r8[0x4],r12
}
80003244:	5e fc       	retal	r12

80003246 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003246:	c0 08       	rjmp	80003246 <_unhandled_interrupt>

80003248 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003248:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000324c:	49 99       	lddpc	r9,800032b0 <INTC_register_interrupt+0x68>
8000324e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003252:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003256:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003258:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000325c:	58 0a       	cp.w	r10,0
8000325e:	c0 91       	brne	80003270 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003260:	49 59       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003262:	49 6a       	lddpc	r10,800032b8 <INTC_register_interrupt+0x70>
80003264:	12 1a       	sub	r10,r9
80003266:	fe 79 00 00 	mov	r9,-65536
8000326a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000326e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003270:	58 1a       	cp.w	r10,1
80003272:	c0 a1       	brne	80003286 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003274:	49 09       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003276:	49 2a       	lddpc	r10,800032bc <INTC_register_interrupt+0x74>
80003278:	12 1a       	sub	r10,r9
8000327a:	bf aa       	sbr	r10,0x1e
8000327c:	fe 79 00 00 	mov	r9,-65536
80003280:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003284:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003286:	58 2a       	cp.w	r10,2
80003288:	c0 a1       	brne	8000329c <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000328a:	48 b9       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000328c:	48 da       	lddpc	r10,800032c0 <INTC_register_interrupt+0x78>
8000328e:	12 1a       	sub	r10,r9
80003290:	bf ba       	sbr	r10,0x1f
80003292:	fe 79 00 00 	mov	r9,-65536
80003296:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000329a:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000329c:	48 69       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000329e:	48 aa       	lddpc	r10,800032c4 <INTC_register_interrupt+0x7c>
800032a0:	12 1a       	sub	r10,r9
800032a2:	ea 1a c0 00 	orh	r10,0xc000
800032a6:	fe 79 00 00 	mov	r9,-65536
800032aa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800032ae:	5e fc       	retal	r12
800032b0:	80 00       	ld.sh	r0,r0[0x0]
800032b2:	e1 48 80 00 	st.w	r0[-32768],r8
800032b6:	de 00       	acall	0x380
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	df 04       	*unknown*
800032bc:	80 00       	ld.sh	r0,r0[0x0]
800032be:	df 12       	popm	r0-r3,r11-r12,lr-pc
800032c0:	80 00       	ld.sh	r0,r0[0x0]
800032c2:	df 20       	acall	0x3c8
800032c4:	80 00       	ld.sh	r0,r0[0x0]
800032c6:	df 2e       	*unknown*

800032c8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032ca:	49 18       	lddpc	r8,8000330c <INTC_init_interrupts+0x44>
800032cc:	e3 b8 00 01 	mtsr	0x4,r8
800032d0:	49 0e       	lddpc	lr,80003310 <INTC_init_interrupts+0x48>
800032d2:	30 07       	mov	r7,0
800032d4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d6:	49 0c       	lddpc	r12,80003314 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d8:	49 05       	lddpc	r5,80003318 <INTC_init_interrupts+0x50>
800032da:	10 15       	sub	r5,r8
800032dc:	fe 76 00 00 	mov	r6,-65536
800032e0:	c1 18       	rjmp	80003302 <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032e2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032ec:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ee:	10 3a       	cp.w	r10,r8
800032f0:	fe 9b ff fc 	brhi	800032e8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f8:	2f f7       	sub	r7,-1
800032fa:	2f 8e       	sub	lr,-8
800032fc:	e0 47 00 2f 	cp.w	r7,47
80003300:	c0 50       	breq	8000330a <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003302:	7c 08       	ld.w	r8,lr[0x0]
80003304:	58 08       	cp.w	r8,0
80003306:	ce e1       	brne	800032e2 <INTC_init_interrupts+0x1a>
80003308:	cf 6b       	rjmp	800032f4 <INTC_init_interrupts+0x2c>
8000330a:	d8 22       	popm	r4-r7,pc
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	de 00       	acall	0x380
80003310:	80 00       	ld.sh	r0,r0[0x0]
80003312:	e1 48 80 00 	st.w	r0[-32768],r8
80003316:	32 46       	mov	r6,36
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	df 04       	*unknown*

8000331c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000331c:	fe 78 00 00 	mov	r8,-65536
80003320:	e0 69 00 83 	mov	r9,131
80003324:	f2 0c 01 0c 	sub	r12,r9,r12
80003328:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000332c:	f2 ca ff c0 	sub	r10,r9,-64
80003330:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003334:	58 08       	cp.w	r8,0
80003336:	c0 21       	brne	8000333a <_get_interrupt_handler+0x1e>
80003338:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000333a:	f0 08 12 00 	clz	r8,r8
8000333e:	48 5a       	lddpc	r10,80003350 <_get_interrupt_handler+0x34>
80003340:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003344:	f0 08 11 1f 	rsub	r8,r8,31
80003348:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000334a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334e:	5e fc       	retal	r12
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	e1 48 e1 b9 	st.w	r0[-7751],r8

80003354 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003354:	e1 b9 00 00 	mfsr	r9,0x0
80003358:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000335a:	fe 78 04 00 	mov	r8,-64512
8000335e:	fc 1a aa 00 	movh	r10,0xaa00
80003362:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80003366:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80003368:	12 98       	mov	r8,r9
8000336a:	e6 18 00 01 	andh	r8,0x1,COH
8000336e:	c0 21       	brne	80003372 <pm_set_mclk_source+0x1e>
80003370:	d5 03       	csrf	0x10

  return PASS;
}
80003372:	5e fd       	retal	0

80003374 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003374:	eb cd 40 c0 	pushm	r6-r7,lr
80003378:	16 97       	mov	r7,r11
8000337a:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
8000337c:	58 0c       	cp.w	r12,0
8000337e:	c0 50       	breq	80003388 <pcl_switch_to_osc+0x14>
80003380:	fe 7c d8 f0 	mov	r12,-10000
80003384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80003388:	30 0c       	mov	r12,0
8000338a:	f0 1f 00 08 	mcall	800033a8 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
8000338e:	30 1a       	mov	r10,1
80003390:	0c 9b       	mov	r11,r6
80003392:	30 0c       	mov	r12,0
80003394:	f0 1f 00 06 	mcall	800033ac <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003398:	0e 9c       	mov	r12,r7
8000339a:	f0 1f 00 06 	mcall	800033b0 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000339e:	30 1c       	mov	r12,1
800033a0:	f0 1f 00 05 	mcall	800033b4 <pcl_switch_to_osc+0x40>
800033a4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	38 30       	mov	r0,-125
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	37 bc       	mov	r12,123
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	30 d4       	mov	r4,13
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 54       	mov	r4,53

800033b8 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
800033b8:	58 2c       	cp.w	r12,2
800033ba:	c2 80       	breq	8000340a <pwm_write_protect_sw_unlock+0x52>
800033bc:	e0 89 00 07 	brgt	800033ca <pwm_write_protect_sw_unlock+0x12>
800033c0:	58 0c       	cp.w	r12,0
800033c2:	c0 a0       	breq	800033d6 <pwm_write_protect_sw_unlock+0x1e>
800033c4:	58 1c       	cp.w	r12,1
800033c6:	c5 61       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033c8:	c1 48       	rjmp	800033f0 <pwm_write_protect_sw_unlock+0x38>
800033ca:	58 4c       	cp.w	r12,4
800033cc:	c3 90       	breq	8000343e <pwm_write_protect_sw_unlock+0x86>
800033ce:	c2 b5       	brlt	80003424 <pwm_write_protect_sw_unlock+0x6c>
800033d0:	58 5c       	cp.w	r12,5
800033d2:	c5 01       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033d4:	c4 28       	rjmp	80003458 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033d6:	fe 78 4c 00 	mov	r8,-46080
800033da:	e0 69 4d 04 	mov	r9,19716
800033de:	ea 19 50 57 	orh	r9,0x5057
800033e2:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033e6:	f0 f8 00 e8 	ld.w	r8,r8[232]
800033ea:	58 08       	cp.w	r8,0
800033ec:	c4 30       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
800033ee:	c4 18       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033f0:	fe 78 4c 00 	mov	r8,-46080
800033f4:	e0 69 4d 08 	mov	r9,19720
800033f8:	ea 19 50 57 	orh	r9,0x5057
800033fc:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003400:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003404:	58 08       	cp.w	r8,0
80003406:	c3 60       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003408:	c3 48       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000340a:	fe 78 4c 00 	mov	r8,-46080
8000340e:	e0 69 4d 10 	mov	r9,19728
80003412:	ea 19 50 57 	orh	r9,0x5057
80003416:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000341a:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000341e:	58 08       	cp.w	r8,0
80003420:	c2 90       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003422:	c2 78       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003424:	fe 78 4c 00 	mov	r8,-46080
80003428:	e0 69 4d 20 	mov	r9,19744
8000342c:	ea 19 50 57 	orh	r9,0x5057
80003430:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003434:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003438:	58 08       	cp.w	r8,0
8000343a:	c1 c0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
8000343c:	c1 a8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000343e:	fe 78 4c 00 	mov	r8,-46080
80003442:	e0 69 4d 40 	mov	r9,19776
80003446:	ea 19 50 57 	orh	r9,0x5057
8000344a:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000344e:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003452:	58 08       	cp.w	r8,0
80003454:	c0 f0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003456:	c0 d8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003458:	fe 78 4c 00 	mov	r8,-46080
8000345c:	e0 69 4d 80 	mov	r9,19840
80003460:	ea 19 50 57 	orh	r9,0x5057
80003464:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003468:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000346c:	58 08       	cp.w	r8,0
8000346e:	c0 20       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003470:	5e fe       	retal	-1
80003472:	5e fd       	retal	0

80003474 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003474:	58 0b       	cp.w	r11,0
80003476:	c1 d0       	breq	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003478:	58 4c       	cp.w	r12,4
8000347a:	e0 8b 00 1b 	brhi	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000347e:	76 0a       	ld.w	r10,r11[0x0]
80003480:	fe 78 4c 00 	mov	r8,-46080
80003484:	f8 c9 ff f0 	sub	r9,r12,-16
80003488:	a5 79       	lsl	r9,0x5
8000348a:	f0 09 00 09 	add	r9,r8,r9
8000348e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003490:	76 19       	ld.w	r9,r11[0x4]
80003492:	a5 7c       	lsl	r12,0x5
80003494:	f0 0c 00 0c 	add	r12,r8,r12
80003498:	f8 c8 fd fc 	sub	r8,r12,-516
8000349c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000349e:	76 39       	ld.w	r9,r11[0xc]
800034a0:	f8 c8 fd f4 	sub	r8,r12,-524
800034a4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
800034a6:	76 68       	ld.w	r8,r11[0x18]
800034a8:	f8 cc fd e8 	sub	r12,r12,-536
800034ac:	99 08       	st.w	r12[0x0],r8
800034ae:	5e fd       	retal	0
  return PWM_SUCCESS;
800034b0:	5e ff       	retal	1

800034b2 <pwm_start_channels>:
}

int pwm_start_channels(unsigned long channels_bitmask)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034b2:	18 98       	mov	r8,r12
800034b4:	e0 18 ff e0 	andl	r8,0xffe0
800034b8:	c0 20       	breq	800034bc <pwm_start_channels+0xa>
800034ba:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  //pwm->wpsr; // Clear Fault register
  pwm->ena = channels_bitmask; // Enable channels.
800034bc:	fe 78 4c 00 	mov	r8,-46080
800034c0:	91 1c       	st.w	r8[0x4],r12
800034c2:	5e fd       	retal	0

800034c4 <pwm_stop_channels>:
  return PWM_SUCCESS;
}

int pwm_stop_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034c4:	18 98       	mov	r8,r12
800034c6:	e0 18 ff e0 	andl	r8,0xffe0
800034ca:	c0 20       	breq	800034ce <pwm_stop_channels+0xa>
800034cc:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.dis = channels_bitmask; // Disable channels.
800034ce:	fe 78 4c 00 	mov	r8,-46080
800034d2:	91 2c       	st.w	r8[0x8],r12
800034d4:	5e fd       	retal	0

800034d6 <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
800034d6:	fe 78 4c 00 	mov	r8,-46080
800034da:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
800034dc:	5e fd       	retal	0
800034de:	d7 03       	nop

800034e0 <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
800034e0:	eb cd 40 c0 	pushm	r6-r7,lr
800034e4:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034e6:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
800034ea:	58 0c       	cp.w	r12,0
800034ec:	c0 31       	brne	800034f2 <pwm_init+0x12>
800034ee:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800034f2:	ee 16 00 01 	eorh	r6,0x1
800034f6:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
800034fa:	30 0c       	mov	r12,0
800034fc:	f0 1f 00 37 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
80003500:	30 1c       	mov	r12,1
80003502:	f0 1f 00 36 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
80003506:	30 2c       	mov	r12,2
80003508:	f0 1f 00 34 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
8000350c:	30 3c       	mov	r12,3
8000350e:	f0 1f 00 33 	mcall	800035d8 <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003512:	58 06       	cp.w	r6,0
80003514:	c0 20       	breq	80003518 <pwm_init+0x38>
80003516:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
80003518:	31 f9       	mov	r9,31
8000351a:	fe 78 4c 00 	mov	r8,-46080
8000351e:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
80003520:	ef 39 00 14 	ld.ub	r9,r7[20]
80003524:	30 08       	mov	r8,0
80003526:	f0 09 18 00 	cp.b	r9,r8
8000352a:	c0 70       	breq	80003538 <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
8000352c:	fe 78 4c 00 	mov	r8,-46080
80003530:	70 59       	ld.w	r9,r8[0x14]
80003532:	ea 19 00 1f 	orh	r9,0x1f
80003536:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
80003538:	fe 78 4c 00 	mov	r8,-46080
8000353c:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
8000353e:	ef 39 00 15 	ld.ub	r9,r7[21]
80003542:	30 08       	mov	r8,0
80003544:	f0 09 18 00 	cp.b	r9,r8
80003548:	c1 40       	breq	80003570 <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
8000354a:	30 99       	mov	r9,9
8000354c:	fe 78 4c 00 	mov	r8,-46080
80003550:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
80003552:	ef 39 00 16 	ld.ub	r9,r7[22]
80003556:	30 28       	mov	r8,2
80003558:	f0 09 18 00 	cp.b	r9,r8
8000355c:	c0 71       	brne	8000356a <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
8000355e:	fe 78 4c 00 	mov	r8,-46080
80003562:	70 e9       	ld.w	r9,r8[0x38]
80003564:	e8 19 00 06 	orl	r9,0x6
80003568:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
8000356a:	fe 78 4c 00 	mov	r8,-46080
8000356e:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
80003570:	58 06       	cp.w	r6,0
80003572:	c0 20       	breq	80003576 <pwm_init+0x96>
80003574:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003576:	6e 08       	ld.w	r8,r7[0x0]
80003578:	6e 39       	ld.w	r9,r7[0xc]
8000357a:	a9 69       	lsl	r9,0x8
8000357c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003580:	6e 18       	ld.w	r8,r7[0x4]
80003582:	10 49       	or	r9,r8
80003584:	6e 28       	ld.w	r8,r7[0x8]
80003586:	f3 e8 11 89 	or	r9,r9,r8<<0x18
8000358a:	6e 48       	ld.w	r8,r7[0x10]
8000358c:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
80003590:	fe 78 4c 00 	mov	r8,-46080
80003594:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
80003596:	ef 3a 00 16 	ld.ub	r10,r7[22]
8000359a:	70 89       	ld.w	r9,r8[0x20]
8000359c:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
800035a0:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
800035a2:	70 89       	ld.w	r9,r8[0x20]
800035a4:	ef 3a 00 17 	ld.ub	r10,r7[23]
800035a8:	f5 e9 10 09 	or	r9,r10,r9
800035ac:	91 89       	st.w	r8[0x20],r9
800035ae:	70 89       	ld.w	r9,r8[0x20]
800035b0:	ef 3a 00 18 	ld.ub	r10,r7[24]
800035b4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800035b8:	91 89       	st.w	r8[0x20],r9
800035ba:	70 89       	ld.w	r9,r8[0x20]
800035bc:	ef 3a 00 19 	ld.ub	r10,r7[25]
800035c0:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800035c4:	91 89       	st.w	r8[0x20],r9
800035c6:	70 89       	ld.w	r9,r8[0x20]
800035c8:	ef 3a 00 1a 	ld.ub	r10,r7[26]
800035cc:	f3 ea 10 39 	or	r9,r9,r10<<0x3
800035d0:	91 89       	st.w	r8[0x20],r9
800035d2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035d6:	00 00       	add	r0,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	33 b8       	mov	r8,59

800035dc <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800035dc:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035e0:	fe 7a 08 00 	mov	r10,-63488
800035e4:	c0 48       	rjmp	800035ec <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800035e6:	20 18       	sub	r8,1
800035e8:	c0 21       	brne	800035ec <scif_pclksr_statushigh_wait+0x10>
800035ea:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035ec:	74 59       	ld.w	r9,r10[0x14]
800035ee:	f9 e9 00 09 	and	r9,r12,r9
800035f2:	cf a0       	breq	800035e6 <scif_pclksr_statushigh_wait+0xa>
800035f4:	5e fd       	retal	0

800035f6 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
800035f6:	58 0c       	cp.w	r12,0
800035f8:	c0 81       	brne	80003608 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800035fa:	fe 79 08 00 	mov	r9,-63488
800035fe:	72 58       	ld.w	r8,r9[0x14]
80003600:	e2 18 00 10 	andl	r8,0x10,COH
80003604:	cf d0       	breq	800035fe <scif_wait_for_pll_locked+0x8>
80003606:	c0 78       	rjmp	80003614 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80003608:	fe 79 08 00 	mov	r9,-63488
8000360c:	72 58       	ld.w	r8,r9[0x14]
8000360e:	e2 18 00 20 	andl	r8,0x20,COH
80003612:	cf d0       	breq	8000360c <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80003614:	5e fd       	retal	0

80003616 <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80003616:	fe 78 08 00 	mov	r8,-63488
8000361a:	f8 c9 ff e7 	sub	r9,r12,-25
8000361e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80003622:	a1 ca       	cbr	r10,0x0
80003624:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003628:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000362c:	fe 7a 08 00 	mov	r10,-63488
80003630:	12 9c       	mov	r12,r9
80003632:	c0 48       	rjmp	8000363a <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
80003634:	20 18       	sub	r8,1
80003636:	c0 21       	brne	8000363a <scif_stop_gclk+0x24>
80003638:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000363a:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
8000363e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003642:	cf 91       	brne	80003634 <scif_stop_gclk+0x1e>
80003644:	5e fd       	retal	0
80003646:	d7 03       	nop

80003648 <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80003648:	d4 21       	pushm	r4-r7,lr
8000364a:	18 97       	mov	r7,r12
8000364c:	16 95       	mov	r5,r11
8000364e:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
80003650:	a1 99       	lsr	r9,0x1
80003652:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003656:	f8 c9 ff e7 	sub	r9,r12,-25
8000365a:	fe 78 08 00 	mov	r8,-63488
8000365e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003662:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003666:	c0 50       	breq	80003670 <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
80003668:	f0 1f 00 18 	mcall	800036c8 <scif_gc_setup+0x80>
8000366c:	c1 44       	brge	80003694 <scif_gc_setup+0x4c>
8000366e:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80003670:	a1 76       	lsl	r6,0x1
80003672:	e2 16 00 02 	andl	r6,0x2,COH
80003676:	a9 65       	lsl	r5,0x8
80003678:	e2 15 0f 00 	andl	r5,0xf00,COH
8000367c:	0a 46       	or	r6,r5
8000367e:	b1 64       	lsl	r4,0x10
80003680:	e6 14 00 ff 	andh	r4,0xff,COH
80003684:	ed e4 10 04 	or	r4,r6,r4
80003688:	2e 77       	sub	r7,-25
8000368a:	fe 78 08 00 	mov	r8,-63488
8000368e:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
80003692:	d8 2a       	popm	r4-r7,pc,r12=0
80003694:	ec 09 15 01 	lsl	r9,r6,0x1
80003698:	e2 19 00 02 	andl	r9,0x2,COH
8000369c:	ea 08 15 08 	lsl	r8,r5,0x8
800036a0:	e2 18 0f 00 	andl	r8,0xf00,COH
800036a4:	10 49       	or	r9,r8
800036a6:	e8 08 15 10 	lsl	r8,r4,0x10
800036aa:	e6 18 00 ff 	andh	r8,0xff,COH
800036ae:	10 49       	or	r9,r8
800036b0:	fe 78 08 00 	mov	r8,-63488
800036b4:	2e 77       	sub	r7,-25
800036b6:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
800036ba:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
800036be:	a1 a9       	sbr	r9,0x0
800036c0:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
800036c4:	d8 2a       	popm	r4-r7,pc,r12=0
800036c6:	00 00       	add	r0,r0
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	36 16       	mov	r6,97

800036cc <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800036cc:	f8 c9 ff e7 	sub	r9,r12,-25
800036d0:	fe 78 08 00 	mov	r8,-63488
800036d4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036dc:	c0 91       	brne	800036ee <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800036de:	fe 78 08 00 	mov	r8,-63488
800036e2:	12 9c       	mov	r12,r9
800036e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036e8:	a1 a9       	sbr	r9,0x0
800036ea:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
800036ee:	5e fd       	retal	0

800036f0 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
800036f0:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800036f2:	fa c8 ff f8 	sub	r8,sp,-8
800036f6:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800036fa:	fe 78 08 00 	mov	r8,-63488
800036fe:	2f 9c       	sub	r12,-7
80003700:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80003704:	30 1b       	mov	r11,1
80003706:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000370a:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
8000370e:	e1 ba 00 00 	mfsr	r10,0x0
80003712:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003714:	f8 0b 15 02 	lsl	r11,r12,0x2
80003718:	ea 1b aa 00 	orh	r11,0xaa00
8000371c:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000371e:	f2 f9 ff f8 	ld.w	r9,r9[-8]
80003722:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80003726:	14 98       	mov	r8,r10
80003728:	e6 18 00 01 	andh	r8,0x1,COH
8000372c:	c0 21       	brne	80003730 <scif_pll_enable+0x40>
8000372e:	d5 03       	csrf	0x10

  return PASS;
}
80003730:	2f ed       	sub	sp,-8
80003732:	5e fd       	retal	0

80003734 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80003734:	eb cd 40 c0 	pushm	r6-r7,lr
80003738:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
8000373a:	fa c9 ff f8 	sub	r9,sp,-8
8000373e:	f2 0c 00 28 	add	r8,r9,r12<<0x2
80003742:	fe 79 08 00 	mov	r9,-63488
80003746:	2f 9c       	sub	r12,-7
80003748:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
8000374c:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
80003750:	f7 3e 00 10 	ld.ub	lr,r11[16]
80003754:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80003758:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
8000375c:	17 a7       	ld.ub	r7,r11[0x2]
8000375e:	17 9e       	ld.ub	lr,r11[0x1]
80003760:	a3 6e       	lsl	lr,0x2
80003762:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80003766:	17 87       	ld.ub	r7,r11[0x0]
80003768:	0e 96       	mov	r6,r7
8000376a:	0e 4e       	or	lr,r7
8000376c:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
80003770:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80003774:	76 2e       	ld.w	lr,r11[0x8]
80003776:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
8000377a:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
8000377e:	76 1e       	ld.w	lr,r11[0x4]
80003780:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80003784:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80003788:	76 3b       	ld.w	r11,r11[0xc]
8000378a:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
8000378e:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
80003792:	e1 ba 00 00 	mfsr	r10,0x0
80003796:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003798:	f8 0b 15 02 	lsl	r11,r12,0x2
8000379c:	ea 1b aa 00 	orh	r11,0xaa00
800037a0:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800037a2:	f0 f8 ff f8 	ld.w	r8,r8[-8]
800037a6:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800037aa:	14 98       	mov	r8,r10
800037ac:	e6 18 00 01 	andh	r8,0x1,COH
800037b0:	c0 21       	brne	800037b4 <scif_pll_setup+0x80>
800037b2:	d5 03       	csrf	0x10

  return PASS;
}
800037b4:	2f ed       	sub	sp,-8
800037b6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800037ba:	d7 03       	nop

800037bc <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800037bc:	eb cd 40 80 	pushm	r7,lr
800037c0:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800037c2:	fa c8 ff f8 	sub	r8,sp,-8
800037c6:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800037ca:	fe 78 08 00 	mov	r8,-63488
800037ce:	f8 c9 ff f7 	sub	r9,r12,-9
800037d2:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800037d6:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800037da:	30 1b       	mov	r11,1
800037dc:	ef db d2 01 	bfins	r7,r11,0x10,0x1
800037e0:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
800037e4:	e1 bb 00 00 	mfsr	r11,0x0
800037e8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800037ea:	f2 07 15 02 	lsl	r7,r9,0x2
800037ee:	ea 17 aa 00 	orh	r7,0xaa00
800037f2:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800037f4:	fc fe ff f8 	ld.w	lr,lr[-8]
800037f8:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
800037fc:	16 98       	mov	r8,r11
800037fe:	e6 18 00 01 	andh	r8,0x1,COH
80003802:	c0 21       	brne	80003806 <scif_enable_osc+0x4a>
80003804:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003806:	58 0a       	cp.w	r10,0
80003808:	c0 e0       	breq	80003824 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
8000380a:	58 0c       	cp.w	r12,0
8000380c:	c0 61       	brne	80003818 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000380e:	30 1c       	mov	r12,1
80003810:	f0 1f 00 07 	mcall	8000382c <scif_enable_osc+0x70>
80003814:	c0 80       	breq	80003824 <scif_enable_osc+0x68>
80003816:	c0 58       	rjmp	80003820 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003818:	30 2c       	mov	r12,2
8000381a:	f0 1f 00 05 	mcall	8000382c <scif_enable_osc+0x70>
8000381e:	c0 30       	breq	80003824 <scif_enable_osc+0x68>
80003820:	3f fc       	mov	r12,-1
80003822:	c0 28       	rjmp	80003826 <scif_enable_osc+0x6a>
80003824:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003826:	2f ed       	sub	sp,-8
80003828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	35 dc       	mov	r12,93

80003830 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
80003830:	58 0c       	cp.w	r12,0
80003832:	c3 41       	brne	8000389a <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003834:	fe 78 08 00 	mov	r8,-63488
80003838:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
8000383a:	e0 69 84 7f 	mov	r9,33919
8000383e:	ea 19 00 1e 	orh	r9,0x1e
80003842:	12 3b       	cp.w	r11,r9
80003844:	e0 8b 00 04 	brhi	8000384c <scif_configure_osc_crystalmode+0x1c>
80003848:	30 0b       	mov	r11,0
8000384a:	c1 38       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000384c:	e0 69 96 7f 	mov	r9,38527
80003850:	ea 19 00 98 	orh	r9,0x98
80003854:	12 3b       	cp.w	r11,r9
80003856:	e0 8b 00 04 	brhi	8000385e <scif_configure_osc_crystalmode+0x2e>
8000385a:	30 1b       	mov	r11,1
8000385c:	c0 a8       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000385e:	e0 69 24 00 	mov	r9,9216
80003862:	ea 19 00 f4 	orh	r9,0xf4
80003866:	12 3b       	cp.w	r11,r9
80003868:	f9 bb 03 02 	movlo	r11,2
8000386c:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80003870:	30 19       	mov	r9,1
80003872:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003876:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8000387a:	e1 ba 00 00 	mfsr	r10,0x0
8000387e:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80003880:	fe 79 08 00 	mov	r9,-63488
80003884:	32 4b       	mov	r11,36
80003886:	ea 1b aa 00 	orh	r11,0xaa00
8000388a:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
8000388c:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000388e:	14 98       	mov	r8,r10
80003890:	e6 18 00 01 	andh	r8,0x1,COH
80003894:	c3 51       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
80003896:	d5 03       	csrf	0x10
80003898:	c3 38       	rjmp	800038fe <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
8000389a:	fe 78 08 00 	mov	r8,-63488
8000389e:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038a0:	e0 69 84 7f 	mov	r9,33919
800038a4:	ea 19 00 1e 	orh	r9,0x1e
800038a8:	12 3b       	cp.w	r11,r9
800038aa:	e0 8b 00 04 	brhi	800038b2 <scif_configure_osc_crystalmode+0x82>
800038ae:	30 0b       	mov	r11,0
800038b0:	c1 38       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038b2:	e0 69 96 7f 	mov	r9,38527
800038b6:	ea 19 00 98 	orh	r9,0x98
800038ba:	12 3b       	cp.w	r11,r9
800038bc:	e0 8b 00 04 	brhi	800038c4 <scif_configure_osc_crystalmode+0x94>
800038c0:	30 1b       	mov	r11,1
800038c2:	c0 a8       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038c4:	e0 69 24 00 	mov	r9,9216
800038c8:	ea 19 00 f4 	orh	r9,0xf4
800038cc:	12 3b       	cp.w	r11,r9
800038ce:	f9 bb 03 02 	movlo	r11,2
800038d2:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800038d6:	30 19       	mov	r9,1
800038d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038dc:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800038e0:	e1 ba 00 00 	mfsr	r10,0x0
800038e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800038e6:	fe 79 08 00 	mov	r9,-63488
800038ea:	32 8b       	mov	r11,40
800038ec:	ea 1b aa 00 	orh	r11,0xaa00
800038f0:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800038f2:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800038f4:	14 98       	mov	r8,r10
800038f6:	e6 18 00 01 	andh	r8,0x1,COH
800038fa:	c0 21       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
800038fc:	d5 03       	csrf	0x10
  }

  return PASS;
}
800038fe:	5e fd       	retal	0

80003900 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003900:	f8 c8 00 01 	sub	r8,r12,1
80003904:	f0 0b 00 0b 	add	r11,r8,r11
80003908:	f6 0c 0d 0a 	divu	r10,r11,r12
8000390c:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000390e:	f4 c8 00 01 	sub	r8,r10,1
80003912:	e0 48 00 fe 	cp.w	r8,254
80003916:	e0 88 00 03 	brls	8000391c <getBaudDiv+0x1c>
8000391a:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000391c:	5c 8c       	casts.h	r12
}
8000391e:	5e fc       	retal	r12

80003920 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003920:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003924:	30 18       	mov	r8,1
80003926:	f0 09 18 00 	cp.b	r9,r8
8000392a:	e0 88 00 04 	brls	80003932 <spi_initMaster+0x12>
8000392e:	30 2c       	mov	r12,2
80003930:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003932:	e0 68 00 80 	mov	r8,128
80003936:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003938:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
8000393a:	30 19       	mov	r9,1
8000393c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003940:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003944:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003948:	30 09       	mov	r9,0
8000394a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000394e:	30 fa       	mov	r10,15
80003950:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003954:	99 18       	st.w	r12[0x4],r8
80003956:	5e f9       	retal	r9

80003958 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003958:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000395c:	30 1e       	mov	lr,1
8000395e:	f6 0e 18 00 	cp.b	lr,r11
80003962:	f9 be 02 00 	movhs	lr,0
80003966:	30 18       	mov	r8,1
80003968:	f4 08 18 00 	cp.b	r8,r10
8000396c:	f9 b8 02 00 	movhs	r8,0
80003970:	fd e8 10 08 	or	r8,lr,r8
80003974:	30 07       	mov	r7,0
80003976:	ee 08 18 00 	cp.b	r8,r7
8000397a:	c0 40       	breq	80003982 <spi_selectionMode+0x2a>
8000397c:	30 2c       	mov	r12,2
8000397e:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003982:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003984:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003988:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000398c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003990:	99 18       	st.w	r12[0x4],r8
80003992:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003996 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003996:	78 18       	ld.w	r8,r12[0x4]
80003998:	ea 18 00 0f 	orh	r8,0xf
8000399c:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000399e:	78 18       	ld.w	r8,r12[0x4]
800039a0:	e2 18 00 04 	andl	r8,0x4,COH
800039a4:	c0 f0       	breq	800039c2 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800039a6:	30 e8       	mov	r8,14
800039a8:	f0 0b 18 00 	cp.b	r11,r8
800039ac:	e0 8b 00 19 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800039b0:	78 18       	ld.w	r8,r12[0x4]
800039b2:	b1 6b       	lsl	r11,0x10
800039b4:	ea 1b ff f0 	orh	r11,0xfff0
800039b8:	e8 1b ff ff 	orl	r11,0xffff
800039bc:	10 6b       	and	r11,r8
800039be:	99 1b       	st.w	r12[0x4],r11
800039c0:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800039c2:	30 38       	mov	r8,3
800039c4:	f0 0b 18 00 	cp.b	r11,r8
800039c8:	e0 8b 00 0b 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800039cc:	78 18       	ld.w	r8,r12[0x4]
800039ce:	2f 0b       	sub	r11,-16
800039d0:	30 19       	mov	r9,1
800039d2:	f2 0b 09 4b 	lsl	r11,r9,r11
800039d6:	5c db       	com	r11
800039d8:	10 6b       	and	r11,r8
800039da:	99 1b       	st.w	r12[0x4],r11
800039dc:	5e fd       	retal	0
800039de:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800039e0:	5e fc       	retal	r12

800039e2 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039e2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039e6:	c0 58       	rjmp	800039f0 <spi_unselectChip+0xe>
		if (!timeout--) {
800039e8:	58 08       	cp.w	r8,0
800039ea:	c0 21       	brne	800039ee <spi_unselectChip+0xc>
800039ec:	5e ff       	retal	1
800039ee:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039f0:	78 49       	ld.w	r9,r12[0x10]
800039f2:	e2 19 02 00 	andl	r9,0x200,COH
800039f6:	cf 90       	breq	800039e8 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039f8:	78 18       	ld.w	r8,r12[0x4]
800039fa:	ea 18 00 0f 	orh	r8,0xf
800039fe:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003a00:	fc 18 01 00 	movh	r8,0x100
80003a04:	99 08       	st.w	r12[0x0],r8
80003a06:	5e fd       	retal	0

80003a08 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003a08:	eb cd 40 f8 	pushm	r3-r7,lr
80003a0c:	18 95       	mov	r5,r12
80003a0e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a10:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a14:	30 38       	mov	r8,3
80003a16:	f0 06 18 00 	cp.b	r6,r8
80003a1a:	e0 8b 00 4d 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003a1e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a22:	30 18       	mov	r8,1
80003a24:	f0 04 18 00 	cp.b	r4,r8
80003a28:	e0 8b 00 46 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a2c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a30:	30 78       	mov	r8,7
80003a32:	f0 03 18 00 	cp.b	r3,r8
80003a36:	e0 88 00 3f 	brls	80003ab4 <spi_setupChipReg+0xac>
80003a3a:	31 08       	mov	r8,16
80003a3c:	f0 03 18 00 	cp.b	r3,r8
80003a40:	e0 8b 00 3a 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a44:	14 9b       	mov	r11,r10
80003a46:	6e 1c       	ld.w	r12,r7[0x4]
80003a48:	f0 1f 00 1d 	mcall	80003abc <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003a4c:	c3 45       	brlt	80003ab4 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003a4e:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003a50:	ec 09 16 01 	lsr	r9,r6,0x1
80003a54:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003a58:	ec 16 00 01 	eorl	r6,0x1
80003a5c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003a60:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003a64:	20 83       	sub	r3,8
80003a66:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003a6a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003a6e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003a72:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003a76:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003a7a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003a7e:	0f 89       	ld.ub	r9,r7[0x0]
80003a80:	30 1a       	mov	r10,1
80003a82:	f4 09 18 00 	cp.b	r9,r10
80003a86:	c0 e0       	breq	80003aa2 <spi_setupChipReg+0x9a>
80003a88:	c0 a3       	brcs	80003a9c <spi_setupChipReg+0x94>
80003a8a:	30 2a       	mov	r10,2
80003a8c:	f4 09 18 00 	cp.b	r9,r10
80003a90:	c0 c0       	breq	80003aa8 <spi_setupChipReg+0xa0>
80003a92:	30 3a       	mov	r10,3
80003a94:	f4 09 18 00 	cp.b	r9,r10
80003a98:	c0 e1       	brne	80003ab4 <spi_setupChipReg+0xac>
80003a9a:	c0 a8       	rjmp	80003aae <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003a9c:	8b c8       	st.w	r5[0x30],r8
80003a9e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003aa2:	8b d8       	st.w	r5[0x34],r8
80003aa4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003aa8:	8b e8       	st.w	r5[0x38],r8
80003aaa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003aae:	8b f8       	st.w	r5[0x3c],r8
80003ab0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003ab4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003ab6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003aba:	00 00       	add	r0,r0
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	39 00       	mov	r0,-112

80003ac0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003ac0:	30 18       	mov	r8,1
80003ac2:	99 08       	st.w	r12[0x0],r8
}
80003ac4:	5e fc       	retal	r12

80003ac6 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003ac6:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003aca:	c0 58       	rjmp	80003ad4 <spi_write+0xe>
		if (!timeout--) {
80003acc:	58 08       	cp.w	r8,0
80003ace:	c0 21       	brne	80003ad2 <spi_write+0xc>
80003ad0:	5e ff       	retal	1
80003ad2:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ad4:	78 49       	ld.w	r9,r12[0x10]
80003ad6:	e2 19 00 02 	andl	r9,0x2,COH
80003ada:	cf 90       	breq	80003acc <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003adc:	5c 7b       	castu.h	r11
80003ade:	99 3b       	st.w	r12[0xc],r11
80003ae0:	5e fd       	retal	0

80003ae2 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003ae2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003ae6:	c0 58       	rjmp	80003af0 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003ae8:	58 08       	cp.w	r8,0
80003aea:	c0 21       	brne	80003aee <spi_read+0xc>
80003aec:	5e ff       	retal	1
80003aee:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003af0:	78 49       	ld.w	r9,r12[0x10]
80003af2:	e2 19 02 01 	andl	r9,0x201,COH
80003af6:	e0 49 02 01 	cp.w	r9,513
80003afa:	cf 71       	brne	80003ae8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003afc:	78 28       	ld.w	r8,r12[0x8]
80003afe:	b6 08       	st.h	r11[0x0],r8
80003b00:	5e fd       	retal	0
80003b02:	d7 03       	nop

80003b04 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003b04:	4a e8       	lddpc	r8,80003bbc <twim_master_interrupt_handler+0xb8>
80003b06:	70 08       	ld.w	r8,r8[0x0]
80003b08:	70 79       	ld.w	r9,r8[0x1c]
80003b0a:	4a ea       	lddpc	r10,80003bc0 <twim_master_interrupt_handler+0xbc>
80003b0c:	74 0a       	ld.w	r10,r10[0x0]
80003b0e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003b12:	12 9a       	mov	r10,r9
80003b14:	e2 1a 07 00 	andl	r10,0x700,COH
80003b18:	c1 40       	breq	80003b40 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003b1a:	e2 19 03 00 	andl	r9,0x300,COH
80003b1e:	f9 b9 01 fc 	movne	r9,-4
80003b22:	f9 b9 00 fe 	moveq	r9,-2
80003b26:	4a 8a       	lddpc	r10,80003bc4 <twim_master_interrupt_handler+0xc0>
80003b28:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003b2a:	70 3a       	ld.w	r10,r8[0xc]
80003b2c:	30 09       	mov	r9,0
80003b2e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80003b32:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003b34:	3f fa       	mov	r10,-1
80003b36:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003b38:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003b3a:	4a 48       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b3c:	b0 89       	st.b	r8[0x0],r9
80003b3e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003b40:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003b44:	c1 30       	breq	80003b6a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003b46:	4a 2a       	lddpc	r10,80003bcc <twim_master_interrupt_handler+0xc8>
80003b48:	70 5b       	ld.w	r11,r8[0x14]
80003b4a:	74 09       	ld.w	r9,r10[0x0]
80003b4c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80003b4e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003b50:	4a 09       	lddpc	r9,80003bd0 <twim_master_interrupt_handler+0xcc>
80003b52:	72 0a       	ld.w	r10,r9[0x0]
80003b54:	20 1a       	sub	r10,1
80003b56:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003b58:	72 09       	ld.w	r9,r9[0x0]
80003b5a:	58 09       	cp.w	r9,0
80003b5c:	c2 f1       	brne	80003bba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80003b5e:	30 19       	mov	r9,1
80003b60:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b62:	30 09       	mov	r9,0
80003b64:	49 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b66:	b0 89       	st.b	r8[0x0],r9
80003b68:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003b6a:	e2 19 00 02 	andl	r9,0x2,COH
80003b6e:	c2 60       	breq	80003bba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80003b70:	49 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b72:	72 09       	ld.w	r9,r9[0x0]
80003b74:	58 09       	cp.w	r9,0
80003b76:	c0 71       	brne	80003b84 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003b78:	30 29       	mov	r9,2
80003b7a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b7c:	30 09       	mov	r9,0
80003b7e:	49 38       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b80:	b0 89       	st.b	r8[0x0],r9
80003b82:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80003b84:	49 5a       	lddpc	r10,80003bd8 <twim_master_interrupt_handler+0xd4>
80003b86:	74 09       	ld.w	r9,r10[0x0]
80003b88:	13 3b       	ld.ub	r11,r9++
80003b8a:	91 6b       	st.w	r8[0x18],r11
80003b8c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003b8e:	49 28       	lddpc	r8,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b90:	70 09       	ld.w	r9,r8[0x0]
80003b92:	20 19       	sub	r9,1
80003b94:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80003b96:	70 08       	ld.w	r8,r8[0x0]
80003b98:	58 08       	cp.w	r8,0
80003b9a:	c1 01       	brne	80003bba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003b9c:	48 b8       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b9e:	11 88       	ld.ub	r8,r8[0x0]
80003ba0:	58 08       	cp.w	r8,0
80003ba2:	c0 c0       	breq	80003bba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80003ba4:	30 09       	mov	r9,0
80003ba6:	48 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003ba8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003baa:	48 d8       	lddpc	r8,80003bdc <twim_master_interrupt_handler+0xd8>
80003bac:	70 08       	ld.w	r8,r8[0x0]
80003bae:	70 3a       	ld.w	r10,r8[0xc]
80003bb0:	48 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003bb2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80003bb4:	70 29       	ld.w	r9,r8[0x8]
80003bb6:	48 98       	lddpc	r8,80003bd8 <twim_master_interrupt_handler+0xd4>
80003bb8:	91 09       	st.w	r8[0x0],r9
80003bba:	d6 03       	rete
80003bbc:	00 00       	add	r0,r0
80003bbe:	07 00       	ld.w	r0,r3++
80003bc0:	00 00       	add	r0,r0
80003bc2:	07 14       	ld.sh	r4,r3++
80003bc4:	00 00       	add	r0,r0
80003bc6:	07 0c       	ld.w	r12,r3++
80003bc8:	00 00       	add	r0,r0
80003bca:	07 18       	ld.sh	r8,r3++
80003bcc:	00 00       	add	r0,r0
80003bce:	07 04       	ld.w	r4,r3++
80003bd0:	00 00       	add	r0,r0
80003bd2:	07 08       	ld.w	r8,r3++
80003bd4:	00 00       	add	r0,r0
80003bd6:	07 20       	ld.uh	r0,r3++
80003bd8:	00 00       	add	r0,r0
80003bda:	07 10       	ld.sh	r0,r3++
80003bdc:	00 00       	add	r0,r0
80003bde:	07 1c       	ld.sh	r12,r3++

80003be0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003be0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003be4:	f4 0b 0d 0a 	divu	r10,r10,r11
80003be8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003bec:	e0 48 00 ff 	cp.w	r8,255
80003bf0:	e0 8b 00 04 	brhi	80003bf8 <twim_set_speed+0x18>
80003bf4:	30 09       	mov	r9,0
80003bf6:	c2 18       	rjmp	80003c38 <twim_set_speed+0x58>
80003bf8:	30 09       	mov	r9,0
80003bfa:	30 16       	mov	r6,1
80003bfc:	30 7a       	mov	r10,7
80003bfe:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003c00:	2f f9       	sub	r9,-1
80003c02:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003c04:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003c06:	e0 48 00 ff 	cp.w	r8,255
80003c0a:	f9 be 0b 01 	movhi	lr,1
80003c0e:	f9 be 08 00 	movls	lr,0
80003c12:	f2 0a 18 00 	cp.b	r10,r9
80003c16:	ec 0b 17 20 	movhs	r11,r6
80003c1a:	f9 bb 03 00 	movlo	r11,0
80003c1e:	fd eb 00 0b 	and	r11,lr,r11
80003c22:	ee 0b 18 00 	cp.b	r11,r7
80003c26:	ce d1       	brne	80003c00 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003c28:	30 7a       	mov	r10,7
80003c2a:	f4 09 18 00 	cp.b	r9,r10
80003c2e:	e0 88 00 05 	brls	80003c38 <twim_set_speed+0x58>
80003c32:	3f 8c       	mov	r12,-8
80003c34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003c38:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003c3c:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80003c40:	14 18       	sub	r8,r10
80003c42:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003c46:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003c4a:	99 19       	st.w	r12[0x4],r9
80003c4c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80003c50 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80003c50:	48 38       	lddpc	r8,80003c5c <twim_status+0xc>
80003c52:	70 08       	ld.w	r8,r8[0x0]
80003c54:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003c56:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003c5a:	5e fc       	retal	r12
80003c5c:	00 00       	add	r0,r0
80003c5e:	07 00       	ld.w	r0,r3++

80003c60 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003c60:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003c64:	e6 18 00 01 	andh	r8,0x1,COH
80003c68:	c0 21       	brne	80003c6c <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003c6a:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003c6c:	3f f8       	mov	r8,-1
80003c6e:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80003c70:	99 b8       	st.w	r12[0x2c],r8
}
80003c72:	5e fc       	retal	r12

80003c74 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80003c74:	eb cd 40 fe 	pushm	r1-r7,lr
80003c78:	18 97       	mov	r7,r12
80003c7a:	16 93       	mov	r3,r11
80003c7c:	14 95       	mov	r5,r10
80003c7e:	12 92       	mov	r2,r9
80003c80:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003c82:	30 14       	mov	r4,1
80003c84:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003c86:	e0 68 00 80 	mov	r8,128
80003c8a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003c8c:	30 28       	mov	r8,2
80003c8e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003c90:	49 e6       	lddpc	r6,80003d08 <twim_write+0x94>
80003c92:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80003c94:	f0 1f 00 1e 	mcall	80003d0c <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003c98:	49 e8       	lddpc	r8,80003d10 <twim_write+0x9c>
80003c9a:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003c9c:	49 e8       	lddpc	r8,80003d14 <twim_write+0xa0>
80003c9e:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003ca0:	30 09       	mov	r9,0
80003ca2:	49 e8       	lddpc	r8,80003d18 <twim_write+0xa4>
80003ca4:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003ca6:	49 e9       	lddpc	r9,80003d1c <twim_write+0xa8>
80003ca8:	30 08       	mov	r8,0
80003caa:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003cac:	6c 08       	ld.w	r8,r6[0x0]
80003cae:	b1 65       	lsl	r5,0x10
80003cb0:	e8 15 e0 00 	orl	r5,0xe000
80003cb4:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003cb8:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003cbc:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003cbe:	49 9a       	lddpc	r10,80003d20 <twim_write+0xac>
80003cc0:	e0 6b 03 02 	mov	r11,770
80003cc4:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80003cc6:	74 0a       	ld.w	r10,r10[0x0]
80003cc8:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003cca:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003ccc:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cce:	72 08       	ld.w	r8,r9[0x0]
80003cd0:	58 08       	cp.w	r8,0
80003cd2:	c0 80       	breq	80003ce2 <twim_write+0x6e>
80003cd4:	c0 b8       	rjmp	80003cea <twim_write+0x76>
		cpu_relax();
80003cd6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cda:	6c 08       	ld.w	r8,r6[0x0]
80003cdc:	58 08       	cp.w	r8,0
80003cde:	c0 30       	breq	80003ce4 <twim_write+0x70>
80003ce0:	c0 58       	rjmp	80003cea <twim_write+0x76>
80003ce2:	48 f6       	lddpc	r6,80003d1c <twim_write+0xa8>
80003ce4:	f0 1f 00 10 	mcall	80003d24 <twim_write+0xb0>
80003ce8:	cf 70       	breq	80003cd6 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003cea:	30 28       	mov	r8,2
80003cec:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cee:	48 c8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cf2:	5b c8       	cp.w	r8,-4
80003cf4:	c0 70       	breq	80003d02 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cf6:	48 a8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf8:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cfa:	5b e8       	cp.w	r8,-2
80003cfc:	c0 30       	breq	80003d02 <twim_write+0x8e>
80003cfe:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003d02:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003d06:	00 00       	add	r0,r0
80003d08:	00 00       	add	r0,r0
80003d0a:	07 00       	ld.w	r0,r3++
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	3c 60       	mov	r0,-58
80003d10:	00 00       	add	r0,r0
80003d12:	07 10       	ld.sh	r0,r3++
80003d14:	00 00       	add	r0,r0
80003d16:	07 20       	ld.uh	r0,r3++
80003d18:	00 00       	add	r0,r0
80003d1a:	07 18       	ld.sh	r8,r3++
80003d1c:	00 00       	add	r0,r0
80003d1e:	07 0c       	ld.w	r12,r3++
80003d20:	00 00       	add	r0,r0
80003d22:	07 14       	ld.sh	r4,r3++
80003d24:	80 00       	ld.sh	r0,r0[0x0]
80003d26:	3c 50       	mov	r0,-59

80003d28 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003d28:	d4 01       	pushm	lr
80003d2a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003d2c:	30 08       	mov	r8,0
80003d2e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80003d30:	30 08       	mov	r8,0
80003d32:	16 99       	mov	r9,r11
80003d34:	10 9a       	mov	r10,r8
80003d36:	1a 9b       	mov	r11,sp
80003d38:	f0 1f 00 02 	mcall	80003d40 <twim_probe+0x18>
}
80003d3c:	2f fd       	sub	sp,-4
80003d3e:	d8 02       	popm	pc
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	3c 74       	mov	r4,-57

80003d44 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003d44:	eb cd 40 e0 	pushm	r5-r7,lr
80003d48:	18 97       	mov	r7,r12
80003d4a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003d4c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003d50:	30 0a       	mov	r10,0
80003d52:	4a 59       	lddpc	r9,80003de4 <twim_master_init+0xa0>
80003d54:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003d56:	e6 18 00 01 	andh	r8,0x1,COH
80003d5a:	c0 b1       	brne	80003d70 <twim_master_init+0x2c>
		cpu_irq_disable ();
80003d5c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80003d5e:	3f f8       	mov	r8,-1
80003d60:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d62:	30 18       	mov	r8,1
80003d64:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d66:	e0 68 00 80 	mov	r8,128
80003d6a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003d6c:	d5 03       	csrf	0x10
80003d6e:	c0 88       	rjmp	80003d7e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80003d70:	3f f8       	mov	r8,-1
80003d72:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d74:	30 18       	mov	r8,1
80003d76:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d78:	e0 68 00 80 	mov	r8,128
80003d7c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003d7e:	3f f8       	mov	r8,-1
80003d80:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d82:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003d86:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003d88:	30 1a       	mov	r10,1
80003d8a:	e0 6b 03 20 	mov	r11,800
80003d8e:	49 7c       	lddpc	r12,80003de8 <twim_master_init+0xa4>
80003d90:	f0 1f 00 17 	mcall	80003dec <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003d94:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003d98:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003d9c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003d9e:	f0 09 18 00 	cp.b	r9,r8
80003da2:	f9 b8 01 10 	movne	r8,16
80003da6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003daa:	f9 b8 01 ff 	movne	r8,-1
80003dae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80003db2:	6a 0a       	ld.w	r10,r5[0x0]
80003db4:	6a 1b       	ld.w	r11,r5[0x4]
80003db6:	0e 9c       	mov	r12,r7
80003db8:	f0 1f 00 0e 	mcall	80003df0 <twim_master_init+0xac>
80003dbc:	5b 8c       	cp.w	r12,-8
80003dbe:	c1 00       	breq	80003dde <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003dc0:	6a 2b       	ld.w	r11,r5[0x8]
80003dc2:	0e 9c       	mov	r12,r7
80003dc4:	f0 1f 00 0c 	mcall	80003df4 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dc8:	48 78       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dcc:	5b c8       	cp.w	r8,-4
80003dce:	c0 70       	breq	80003ddc <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dd0:	48 58       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dd2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dd4:	5b e8       	cp.w	r8,-2
80003dd6:	c0 30       	breq	80003ddc <twim_master_init+0x98>
80003dd8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003ddc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003dde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003de2:	00 00       	add	r0,r0
80003de4:	00 00       	add	r0,r0
80003de6:	07 0c       	ld.w	r12,r3++
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3b 04       	mov	r4,-80
80003dec:	80 00       	ld.sh	r0,r0[0x0]
80003dee:	32 48       	mov	r8,36
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3b e0       	mov	r0,-66
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	3d 28       	mov	r8,-46

80003df8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003df8:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003dfa:	f6 08 15 04 	lsl	r8,r11,0x4
80003dfe:	14 38       	cp.w	r8,r10
80003e00:	f9 b8 08 10 	movls	r8,16
80003e04:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003e08:	f0 0b 02 4b 	mul	r11,r8,r11
80003e0c:	f6 09 16 01 	lsr	r9,r11,0x1
80003e10:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003e14:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003e18:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003e1c:	f2 cb 00 01 	sub	r11,r9,1
80003e20:	e0 4b ff fe 	cp.w	r11,65534
80003e24:	e0 88 00 03 	brls	80003e2a <usart_set_async_baudrate+0x32>
80003e28:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003e2a:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003e2c:	e8 6e 00 00 	mov	lr,524288
80003e30:	59 08       	cp.w	r8,16
80003e32:	fc 08 17 10 	movne	r8,lr
80003e36:	f9 b8 00 00 	moveq	r8,0
80003e3a:	e4 1b ff f7 	andh	r11,0xfff7
80003e3e:	e0 1b fe cf 	andl	r11,0xfecf
80003e42:	16 48       	or	r8,r11
80003e44:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003e46:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003e4a:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003e4e:	99 89       	st.w	r12[0x20],r9
80003e50:	d8 0a       	popm	pc,r12=0

80003e52 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003e52:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003e54:	e2 18 00 02 	andl	r8,0x2,COH
80003e58:	c0 31       	brne	80003e5e <usart_write_char+0xc>
80003e5a:	30 2c       	mov	r12,2
80003e5c:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003e5e:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003e62:	99 7b       	st.w	r12[0x1c],r11
80003e64:	5e fd       	retal	0
80003e66:	d7 03       	nop

80003e68 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003e68:	eb cd 40 e0 	pushm	r5-r7,lr
80003e6c:	18 96       	mov	r6,r12
80003e6e:	16 95       	mov	r5,r11
80003e70:	e0 67 27 0f 	mov	r7,9999
80003e74:	c0 68       	rjmp	80003e80 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003e76:	58 07       	cp.w	r7,0
80003e78:	c0 31       	brne	80003e7e <usart_putchar+0x16>
80003e7a:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003e7e:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003e80:	0a 9b       	mov	r11,r5
80003e82:	0c 9c       	mov	r12,r6
80003e84:	f0 1f 00 03 	mcall	80003e90 <usart_putchar+0x28>
80003e88:	cf 71       	brne	80003e76 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003e8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e8e:	00 00       	add	r0,r0
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	3e 52       	mov	r2,-27

80003e94 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003e94:	eb cd 40 c0 	pushm	r6-r7,lr
80003e98:	18 96       	mov	r6,r12
80003e9a:	16 97       	mov	r7,r11
  while (*string != '\0')
80003e9c:	17 8b       	ld.ub	r11,r11[0x0]
80003e9e:	58 0b       	cp.w	r11,0
80003ea0:	c0 80       	breq	80003eb0 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003ea2:	2f f7       	sub	r7,-1
80003ea4:	0c 9c       	mov	r12,r6
80003ea6:	f0 1f 00 04 	mcall	80003eb4 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003eaa:	0f 8b       	ld.ub	r11,r7[0x0]
80003eac:	58 0b       	cp.w	r11,0
80003eae:	cf a1       	brne	80003ea2 <usart_write_line+0xe>
80003eb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	3e 68       	mov	r8,-26

80003eb8 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003eb8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003ebc:	e6 18 00 01 	andh	r8,0x1,COH
80003ec0:	c0 71       	brne	80003ece <usart_reset+0x16>
80003ec2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003ec4:	3f f8       	mov	r8,-1
80003ec6:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003ec8:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003eca:	d5 03       	csrf	0x10
80003ecc:	c0 48       	rjmp	80003ed4 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80003ece:	3f f8       	mov	r8,-1
80003ed0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003ed2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003ed4:	30 08       	mov	r8,0
80003ed6:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003ed8:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003eda:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003edc:	ea 68 61 0c 	mov	r8,680204
80003ee0:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003ee2:	5e fc       	retal	r12

80003ee4 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003ee4:	eb cd 40 e0 	pushm	r5-r7,lr
80003ee8:	18 96       	mov	r6,r12
80003eea:	16 97       	mov	r7,r11
80003eec:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003eee:	f0 1f 00 2f 	mcall	80003fa8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80003ef2:	58 07       	cp.w	r7,0
80003ef4:	c5 80       	breq	80003fa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003ef6:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003ef8:	30 49       	mov	r9,4
80003efa:	f2 08 18 00 	cp.b	r8,r9
80003efe:	e0 88 00 53 	brls	80003fa4 <usart_init_rs232+0xc0>
80003f02:	30 99       	mov	r9,9
80003f04:	f2 08 18 00 	cp.b	r8,r9
80003f08:	e0 8b 00 4e 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003f0c:	0f d9       	ld.ub	r9,r7[0x5]
80003f0e:	30 78       	mov	r8,7
80003f10:	f0 09 18 00 	cp.b	r9,r8
80003f14:	e0 8b 00 48 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003f18:	8e 39       	ld.sh	r9,r7[0x6]
80003f1a:	e0 68 01 01 	mov	r8,257
80003f1e:	f0 09 19 00 	cp.h	r9,r8
80003f22:	e0 8b 00 41 	brhi	80003fa4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003f26:	ef 39 00 08 	ld.ub	r9,r7[8]
80003f2a:	30 38       	mov	r8,3
80003f2c:	f0 09 18 00 	cp.b	r9,r8
80003f30:	e0 8b 00 3a 	brhi	80003fa4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003f34:	0a 9a       	mov	r10,r5
80003f36:	6e 0b       	ld.w	r11,r7[0x0]
80003f38:	0c 9c       	mov	r12,r6
80003f3a:	f0 1f 00 1d 	mcall	80003fac <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003f3e:	58 1c       	cp.w	r12,1
80003f40:	c3 20       	breq	80003fa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80003f42:	0f c8       	ld.ub	r8,r7[0x4]
80003f44:	30 99       	mov	r9,9
80003f46:	f2 08 18 00 	cp.b	r8,r9
80003f4a:	c0 51       	brne	80003f54 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003f4c:	6c 18       	ld.w	r8,r6[0x4]
80003f4e:	b1 b8       	sbr	r8,0x11
80003f50:	8d 18       	st.w	r6[0x4],r8
80003f52:	c0 68       	rjmp	80003f5e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003f54:	6c 19       	ld.w	r9,r6[0x4]
80003f56:	20 58       	sub	r8,5
80003f58:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003f5c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003f5e:	6c 19       	ld.w	r9,r6[0x4]
80003f60:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003f64:	0f d8       	ld.ub	r8,r7[0x5]
80003f66:	a9 78       	lsl	r8,0x9
80003f68:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003f6c:	12 48       	or	r8,r9
80003f6e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003f70:	8e 38       	ld.sh	r8,r7[0x6]
80003f72:	30 29       	mov	r9,2
80003f74:	f2 08 19 00 	cp.h	r8,r9
80003f78:	e0 88 00 09 	brls	80003f8a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003f7c:	6c 18       	ld.w	r8,r6[0x4]
80003f7e:	ad b8       	sbr	r8,0xd
80003f80:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003f82:	8e b8       	ld.uh	r8,r7[0x6]
80003f84:	20 28       	sub	r8,2
80003f86:	8d a8       	st.w	r6[0x28],r8
80003f88:	c0 68       	rjmp	80003f94 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003f8a:	6c 19       	ld.w	r9,r6[0x4]
80003f8c:	5c 78       	castu.h	r8
80003f8e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80003f92:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003f94:	6c 18       	ld.w	r8,r6[0x4]
80003f96:	e0 18 ff f0 	andl	r8,0xfff0
80003f9a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003f9c:	35 08       	mov	r8,80
80003f9e:	8d 08       	st.w	r6[0x0],r8
80003fa0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003fa4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3e b8       	mov	r8,-21
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	3d f8       	mov	r8,-33

80003fb0 <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80003fb0:	48 68       	lddpc	r8,80003fc8 <fat_check_open+0x18>
80003fb2:	11 89       	ld.ub	r9,r8[0x0]
80003fb4:	30 08       	mov	r8,0
80003fb6:	f0 09 18 00 	cp.b	r9,r8
80003fba:	c0 20       	breq	80003fbe <fat_check_open+0xe>
80003fbc:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80003fbe:	31 79       	mov	r9,23
80003fc0:	48 38       	lddpc	r8,80003fcc <fat_check_open+0x1c>
80003fc2:	b0 89       	st.b	r8[0x0],r9
80003fc4:	5e fd       	retal	0
80003fc6:	00 00       	add	r0,r0
80003fc8:	00 00       	add	r0,r0
80003fca:	09 8c       	ld.ub	r12,r4[0x0]
80003fcc:	00 00       	add	r0,r0
80003fce:	0c 1c       	sub	r12,r6

80003fd0 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003fd0:	48 68       	lddpc	r8,80003fe8 <fat_check_select+0x18>
80003fd2:	90 19       	ld.sh	r9,r8[0x2]
80003fd4:	3f f8       	mov	r8,-1
80003fd6:	f0 09 19 00 	cp.h	r9,r8
80003fda:	c0 20       	breq	80003fde <fat_check_select+0xe>
80003fdc:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003fde:	30 f9       	mov	r9,15
80003fe0:	48 38       	lddpc	r8,80003fec <fat_check_select+0x1c>
80003fe2:	b0 89       	st.b	r8[0x0],r9
80003fe4:	5e fd       	retal	0
80003fe6:	00 00       	add	r0,r0
80003fe8:	00 00       	add	r0,r0
80003fea:	0c 18       	sub	r8,r6
80003fec:	00 00       	add	r0,r0
80003fee:	0c 1c       	sub	r12,r6

80003ff0 <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80003ff0:	48 58       	lddpc	r8,80004004 <fat_check_is_file+0x14>
80003ff2:	11 a8       	ld.ub	r8,r8[0x2]
80003ff4:	e2 18 00 18 	andl	r8,0x18,COH
80003ff8:	c0 21       	brne	80003ffc <fat_check_is_file+0xc>
80003ffa:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003ffc:	31 39       	mov	r9,19
80003ffe:	48 38       	lddpc	r8,80004008 <fat_check_is_file+0x18>
80004000:	b0 89       	st.b	r8[0x0],r9
80004002:	5e fd       	retal	0
80004004:	00 00       	add	r0,r0
80004006:	09 8c       	ld.ub	r12,r4[0x0]
80004008:	00 00       	add	r0,r0
8000400a:	0c 1c       	sub	r12,r6

8000400c <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
8000400c:	49 68       	lddpc	r8,80004064 <fat_checkcluster+0x58>
8000400e:	70 18       	ld.w	r8,r8[0x4]
80004010:	58 08       	cp.w	r8,0
80004012:	c0 21       	brne	80004016 <fat_checkcluster+0xa>
80004014:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80004016:	49 59       	lddpc	r9,80004068 <fat_checkcluster+0x5c>
80004018:	13 89       	ld.ub	r9,r9[0x0]
8000401a:	30 3a       	mov	r10,3
8000401c:	f4 09 18 00 	cp.b	r9,r10
80004020:	c0 a1       	brne	80004034 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80004022:	e0 69 ff f7 	mov	r9,65527
80004026:	ea 19 0f ff 	orh	r9,0xfff
8000402a:	12 38       	cp.w	r8,r9
8000402c:	e0 8b 00 19 	brhi	8000405e <fat_checkcluster+0x52>
80004030:	5f 0c       	sreq	r12
80004032:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004034:	30 2a       	mov	r10,2
80004036:	f4 09 18 00 	cp.b	r9,r10
8000403a:	c0 71       	brne	80004048 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
8000403c:	e0 48 ff f7 	cp.w	r8,65527
80004040:	e0 8b 00 0f 	brhi	8000405e <fat_checkcluster+0x52>
80004044:	5f 0c       	sreq	r12
80004046:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004048:	30 1a       	mov	r10,1
8000404a:	f4 09 18 00 	cp.b	r9,r10
8000404e:	c0 20       	breq	80004052 <fat_checkcluster+0x46>
80004050:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80004052:	e0 48 0f f7 	cp.w	r8,4087
80004056:	e0 8b 00 04 	brhi	8000405e <fat_checkcluster+0x52>
8000405a:	5f 0c       	sreq	r12
8000405c:	5e fc       	retal	r12
8000405e:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80004060:	5e fc       	retal	r12
80004062:	00 00       	add	r0,r0
80004064:	00 00       	add	r0,r0
80004066:	0c 6c       	and	r12,r6
80004068:	00 00       	add	r0,r0
8000406a:	0c 18       	sub	r8,r6

8000406c <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
8000406c:	30 0a       	mov	r10,0
8000406e:	48 88       	lddpc	r8,8000408c <fat_cache_clusterlist_reset+0x20>
80004070:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80004072:	48 88       	lddpc	r8,80004090 <fat_cache_clusterlist_reset+0x24>
80004074:	30 19       	mov	r9,1
80004076:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004078:	3f f9       	mov	r9,-1
8000407a:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
8000407c:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000407e:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004082:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004086:	f1 69 00 15 	st.b	r8[21],r9
   }
}
8000408a:	5e fc       	retal	r12
8000408c:	00 00       	add	r0,r0
8000408e:	0c 1e       	sub	lr,r6
80004090:	00 00       	add	r0,r0
80004092:	09 a0       	ld.ub	r0,r4[0x2]

80004094 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80004094:	48 c9       	lddpc	r9,800040c4 <fat_cache_clusterlist_update_start+0x30>
80004096:	13 88       	ld.ub	r8,r9[0x0]
80004098:	f8 08 18 00 	cp.b	r8,r12
8000409c:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
8000409e:	48 ba       	lddpc	r10,800040c8 <fat_cache_clusterlist_update_start+0x34>
800040a0:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800040a2:	f0 0a 15 02 	lsl	r10,r8,0x2
800040a6:	10 0a       	add	r10,r8
800040a8:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800040ac:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800040ae:	3f fb       	mov	r11,-1
800040b0:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800040b2:	2f fa       	sub	r10,-1
800040b4:	48 6b       	lddpc	r11,800040cc <fat_cache_clusterlist_update_start+0x38>
800040b6:	76 0b       	ld.w	r11,r11[0x0]
800040b8:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800040bc:	48 59       	lddpc	r9,800040d0 <fat_cache_clusterlist_update_start+0x3c>
800040be:	72 19       	ld.w	r9,r9[0x4]
800040c0:	91 29       	st.w	r8[0x8],r9
}
800040c2:	5e fc       	retal	r12
800040c4:	00 00       	add	r0,r0
800040c6:	09 a0       	ld.ub	r0,r4[0x2]
800040c8:	00 00       	add	r0,r0
800040ca:	0c 1e       	sub	lr,r6
800040cc:	00 00       	add	r0,r0
800040ce:	0c 6c       	and	r12,r6
800040d0:	00 00       	add	r0,r0
800040d2:	0c 74       	tst	r4,r6

800040d4 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
800040d4:	49 88       	lddpc	r8,80004134 <fat_cache_clusterlist_update_select+0x60>
800040d6:	11 88       	ld.ub	r8,r8[0x0]
800040d8:	49 8a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
800040da:	f0 08 00 2b 	add	r11,r8,r8<<0x2
800040de:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
800040e2:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
800040e4:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040e6:	15 8a       	ld.ub	r10,r10[0x0]
800040e8:	f2 0a 18 00 	cp.b	r10,r9
800040ec:	c0 a1       	brne	80004100 <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800040ee:	49 3a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
800040f0:	15 9a       	ld.ub	r10,r10[0x1]
800040f2:	f4 0b 18 00 	cp.b	r11,r10
800040f6:	e0 88 00 05 	brls	80004100 <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040fa:	2f fa       	sub	r10,-1
800040fc:	48 fc       	lddpc	r12,80004138 <fat_cache_clusterlist_update_select+0x64>
800040fe:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004100:	48 ea       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
80004102:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004106:	f2 0a 18 00 	cp.b	r10,r9
8000410a:	c0 c1       	brne	80004122 <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
8000410c:	48 b9       	lddpc	r9,80004138 <fat_cache_clusterlist_update_select+0x64>
8000410e:	f3 39 00 15 	ld.ub	r9,r9[21]
80004112:	f2 0b 18 00 	cp.b	r11,r9
80004116:	e0 88 00 06 	brls	80004122 <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
8000411a:	2f f9       	sub	r9,-1
8000411c:	48 7a       	lddpc	r10,80004138 <fat_cache_clusterlist_update_select+0x64>
8000411e:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80004122:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004126:	48 59       	lddpc	r9,80004138 <fat_cache_clusterlist_update_select+0x64>
80004128:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000412c:	30 09       	mov	r9,0
8000412e:	b0 99       	st.b	r8[0x1],r9
}
80004130:	5e fc       	retal	r12
80004132:	00 00       	add	r0,r0
80004134:	00 00       	add	r0,r0
80004136:	0c 1e       	sub	lr,r6
80004138:	00 00       	add	r0,r0
8000413a:	09 a0       	ld.ub	r0,r4[0x2]

8000413c <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
8000413c:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80004140:	49 08       	lddpc	r8,80004180 <fat_cache_clusterlist_update_finish+0x44>
80004142:	11 88       	ld.ub	r8,r8[0x0]
80004144:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004148:	48 f9       	lddpc	r9,80004184 <fat_cache_clusterlist_update_finish+0x48>
8000414a:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000414e:	f0 ca ff f8 	sub	r10,r8,-8
80004152:	48 eb       	lddpc	r11,80004188 <fat_cache_clusterlist_update_finish+0x4c>
80004154:	17 97       	ld.ub	r7,r11[0x1]
80004156:	74 09       	ld.w	r9,r10[0x0]
80004158:	f2 07 0d 06 	divu	r6,r9,r7
8000415c:	0e 99       	mov	r9,r7
8000415e:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80004160:	17 8b       	ld.ub	r11,r11[0x0]
80004162:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80004164:	74 0b       	ld.w	r11,r10[0x0]
80004166:	12 1b       	sub	r11,r9
80004168:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
8000416a:	48 9a       	lddpc	r10,8000418c <fat_cache_clusterlist_update_finish+0x50>
8000416c:	74 0b       	ld.w	r11,r10[0x0]
8000416e:	12 1b       	sub	r11,r9
80004170:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80004172:	74 1a       	ld.w	r10,r10[0x4]
80004174:	14 09       	add	r9,r10
80004176:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80004178:	f0 1f 00 06 	mcall	80004190 <fat_cache_clusterlist_update_finish+0x54>
}
8000417c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004180:	00 00       	add	r0,r0
80004182:	0c 1e       	sub	lr,r6
80004184:	00 00       	add	r0,r0
80004186:	09 a0       	ld.ub	r0,r4[0x2]
80004188:	00 00       	add	r0,r0
8000418a:	0b cc       	ld.ub	r12,r5[0x4]
8000418c:	00 00       	add	r0,r0
8000418e:	0c 74       	tst	r4,r6
80004190:	80 00       	ld.sh	r0,r0[0x0]
80004192:	40 d4       	lddsp	r4,sp[0x34]

80004194 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80004194:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80004198:	4c 18       	lddpc	r8,8000429c <fat_cache_clusterlist_update_read+0x108>
8000419a:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000419c:	4c 18       	lddpc	r8,800042a0 <fat_cache_clusterlist_update_read+0x10c>
8000419e:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041a0:	4c 18       	lddpc	r8,800042a4 <fat_cache_clusterlist_update_read+0x110>
800041a2:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041a4:	4c 18       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041a6:	11 88       	ld.ub	r8,r8[0x0]
800041a8:	f8 08 18 00 	cp.b	r8,r12
800041ac:	c1 11       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
800041ae:	4b f8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041b0:	11 a8       	ld.ub	r8,r8[0x2]
800041b2:	f2 08 18 00 	cp.b	r8,r9
800041b6:	c0 c1       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041b8:	4b c8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041ba:	70 18       	ld.w	r8,r8[0x4]
800041bc:	14 38       	cp.w	r8,r10
800041be:	c0 81       	brne	800041ce <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041c0:	4b a8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041c2:	70 28       	ld.w	r8,r8[0x8]
800041c4:	10 3b       	cp.w	r11,r8
800041c6:	c0 43       	brcs	800041ce <fat_cache_clusterlist_update_read+0x3a>
800041c8:	30 0a       	mov	r10,0
800041ca:	14 99       	mov	r9,r10
800041cc:	c1 88       	rjmp	800041fc <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800041ce:	4b 78       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041d0:	f1 38 00 14 	ld.ub	r8,r8[20]
800041d4:	f8 08 18 00 	cp.b	r8,r12
800041d8:	c5 e1       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
800041da:	4b 48       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041dc:	f1 38 00 16 	ld.ub	r8,r8[22]
800041e0:	f2 08 18 00 	cp.b	r8,r9
800041e4:	c5 81       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041e6:	4b 18       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041e8:	70 68       	ld.w	r8,r8[0x18]
800041ea:	14 38       	cp.w	r8,r10
800041ec:	c5 41       	brne	80004294 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041ee:	4a f8       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
800041f0:	70 78       	ld.w	r8,r8[0x1c]
800041f2:	16 38       	cp.w	r8,r11
800041f4:	e0 8b 00 50 	brhi	80004294 <fat_cache_clusterlist_update_read+0x100>
800041f8:	30 1a       	mov	r10,1
800041fa:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
800041fc:	f2 0e 15 02 	lsl	lr,r9,0x2
80004200:	12 0e       	add	lr,r9
80004202:	4a ac       	lddpc	r12,800042a8 <fat_cache_clusterlist_update_read+0x114>
80004204:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80004208:	78 4c       	ld.w	r12,r12[0x10]
8000420a:	f6 08 01 08 	sub	r8,r11,r8
8000420e:	10 3c       	cp.w	r12,r8
80004210:	e0 88 00 16 	brls	8000423c <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004214:	4a 4b       	lddpc	r11,800042a4 <fat_cache_clusterlist_update_read+0x110>
80004216:	f2 0e 15 02 	lsl	lr,r9,0x2
8000421a:	fc 09 00 09 	add	r9,lr,r9
8000421e:	4a 3e       	lddpc	lr,800042a8 <fat_cache_clusterlist_update_read+0x114>
80004220:	fc 09 00 29 	add	r9,lr,r9<<0x2
80004224:	72 39       	ld.w	r9,r9[0xc]
80004226:	f0 09 00 09 	add	r9,r8,r9
8000422a:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
8000422c:	10 1c       	sub	r12,r8
8000422e:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80004230:	49 f8       	lddpc	r8,800042ac <fat_cache_clusterlist_update_read+0x118>
80004232:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004234:	f0 1f 00 1f 	mcall	800042b0 <fat_cache_clusterlist_update_read+0x11c>
80004238:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
8000423c:	49 c8       	lddpc	r8,800042ac <fat_cache_clusterlist_update_read+0x118>
8000423e:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80004240:	f2 08 15 02 	lsl	r8,r9,0x2
80004244:	f0 09 00 09 	add	r9,r8,r9
80004248:	49 88       	lddpc	r8,800042a8 <fat_cache_clusterlist_update_read+0x114>
8000424a:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000424e:	3f f9       	mov	r9,-1
80004250:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004252:	70 4c       	ld.w	r12,r8[0x10]
80004254:	49 2a       	lddpc	r10,8000429c <fat_cache_clusterlist_update_read+0x108>
80004256:	15 99       	ld.ub	r9,r10[0x1]
80004258:	70 3e       	ld.w	lr,r8[0xc]
8000425a:	f8 0e 00 0e 	add	lr,r12,lr
8000425e:	20 1e       	sub	lr,1
80004260:	74 57       	ld.w	r7,r10[0x14]
80004262:	fc 07 01 07 	sub	r7,lr,r7
80004266:	74 4a       	ld.w	r10,r10[0x10]
80004268:	14 17       	sub	r7,r10
8000426a:	ee 09 0d 06 	divu	r6,r7,r9
8000426e:	0c 97       	mov	r7,r6
80004270:	2f e7       	sub	r7,-2
80004272:	48 ca       	lddpc	r10,800042a0 <fat_cache_clusterlist_update_read+0x10c>
80004274:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004276:	2f 88       	sub	r8,-8
80004278:	70 0a       	ld.w	r10,r8[0x0]
8000427a:	14 0c       	add	r12,r10
8000427c:	f8 c7 00 01 	sub	r7,r12,1
80004280:	ee 09 0d 06 	divu	r6,r7,r9
80004284:	ad 39       	mul	r9,r6
80004286:	48 8a       	lddpc	r10,800042a4 <fat_cache_clusterlist_update_read+0x110>
80004288:	f6 09 01 09 	sub	r9,r11,r9
8000428c:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
8000428e:	91 0b       	st.w	r8[0x0],r11
80004290:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80004294:	f0 1f 00 08 	mcall	800042b4 <fat_cache_clusterlist_update_read+0x120>
80004298:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000429c:	00 00       	add	r0,r0
8000429e:	0b cc       	ld.ub	r12,r5[0x4]
800042a0:	00 00       	add	r0,r0
800042a2:	0c 6c       	and	r12,r6
800042a4:	00 00       	add	r0,r0
800042a6:	0c 74       	tst	r4,r6
800042a8:	00 00       	add	r0,r0
800042aa:	09 a0       	ld.ub	r0,r4[0x2]
800042ac:	00 00       	add	r0,r0
800042ae:	0c 1e       	sub	lr,r6
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	40 d4       	lddsp	r4,sp[0x34]
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	40 94       	lddsp	r4,sp[0x24]

800042b8 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
800042b8:	30 d9       	mov	r9,13
800042ba:	48 48       	lddpc	r8,800042c8 <fat_entry_is_dir+0x10>
800042bc:	b0 89       	st.b	r8[0x0],r9
800042be:	48 48       	lddpc	r8,800042cc <fat_entry_is_dir+0x14>
800042c0:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
800042c2:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800042c6:	5e fc       	retal	r12
800042c8:	00 00       	add	r0,r0
800042ca:	0c 1c       	sub	r12,r6
800042cc:	00 00       	add	r0,r0
800042ce:	09 8c       	ld.ub	r12,r4[0x0]

800042d0 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800042d0:	3f f9       	mov	r9,-1
800042d2:	48 c8       	lddpc	r8,80004300 <fat_clear_entry_info_and_ptr+0x30>
800042d4:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800042d6:	48 c8       	lddpc	r8,80004304 <fat_clear_entry_info_and_ptr+0x34>
800042d8:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
800042dc:	f1 39 00 2d 	ld.ub	r9,r8[45]
800042e0:	30 08       	mov	r8,0
800042e2:	f0 09 18 00 	cp.b	r9,r8
800042e6:	c0 51       	brne	800042f0 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
800042e8:	10 99       	mov	r9,r8
800042ea:	48 78       	lddpc	r8,80004304 <fat_clear_entry_info_and_ptr+0x34>
800042ec:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
800042f0:	48 68       	lddpc	r8,80004308 <fat_clear_entry_info_and_ptr+0x38>
800042f2:	30 09       	mov	r9,0
800042f4:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
800042f6:	30 0a       	mov	r10,0
800042f8:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
800042fa:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
800042fc:	b0 89       	st.b	r8[0x0],r9
}
800042fe:	5e fc       	retal	r12
80004300:	00 00       	add	r0,r0
80004302:	0c 18       	sub	r8,r6
80004304:	00 00       	add	r0,r0
80004306:	0b cc       	ld.ub	r12,r5[0x4]
80004308:	00 00       	add	r0,r0
8000430a:	09 8c       	ld.ub	r12,r4[0x0]

8000430c <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
8000430c:	30 08       	mov	r8,0
8000430e:	f0 0c 19 00 	cp.h	r12,r8
80004312:	5f 0a       	sreq	r10
80004314:	35 c9       	mov	r9,92
80004316:	f2 0c 19 00 	cp.h	r12,r9
8000431a:	5f 09       	sreq	r9
8000431c:	f5 e9 10 09 	or	r9,r10,r9
80004320:	f0 09 18 00 	cp.b	r9,r8
80004324:	c0 20       	breq	80004328 <fat_check_eof_name+0x1c>
80004326:	5e ff       	retal	1
80004328:	32 f8       	mov	r8,47
8000432a:	f0 0c 19 00 	cp.h	r12,r8
8000432e:	5f 0c       	sreq	r12
}
80004330:	5e fc       	retal	r12
80004332:	d7 03       	nop

80004334 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80004334:	48 48       	lddpc	r8,80004344 <fat_get_ptr_entry+0x10>
80004336:	90 98       	ld.uh	r8,r8[0x2]
80004338:	a5 78       	lsl	r8,0x5
8000433a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000433e:	48 3c       	lddpc	r12,80004348 <fat_get_ptr_entry+0x14>
80004340:	10 0c       	add	r12,r8
80004342:	5e fc       	retal	r12
80004344:	00 00       	add	r0,r0
80004346:	0c 18       	sub	r8,r6
80004348:	00 00       	add	r0,r0
8000434a:	09 cc       	ld.ub	r12,r4[0x4]

8000434c <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
8000434c:	d4 31       	pushm	r0-r7,lr
8000434e:	20 3d       	sub	sp,12
80004350:	18 97       	mov	r7,r12
80004352:	16 94       	mov	r4,r11
80004354:	14 96       	mov	r6,r10
80004356:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80004358:	f0 1f 00 5e 	mcall	800044d0 <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000435c:	19 88       	ld.ub	r8,r12[0x0]
8000435e:	30 09       	mov	r9,0
80004360:	f2 08 18 00 	cp.b	r8,r9
80004364:	5f 0b       	sreq	r11
80004366:	3e 5a       	mov	r10,-27
80004368:	f4 08 18 00 	cp.b	r8,r10
8000436c:	5f 0a       	sreq	r10
8000436e:	f7 ea 10 0a 	or	r10,r11,r10
80004372:	f2 0a 18 00 	cp.b	r10,r9
80004376:	c0 71       	brne	80004384 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80004378:	f9 3a 00 0b 	ld.ub	r10,r12[11]
8000437c:	30 f9       	mov	r9,15
8000437e:	f2 0a 18 00 	cp.b	r10,r9
80004382:	c0 60       	breq	8000438e <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004384:	30 b9       	mov	r9,11
80004386:	4d 48       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
80004388:	b0 89       	st.b	r8[0x0],r9
8000438a:	30 0c       	mov	r12,0
      return false;
8000438c:	c9 c8       	rjmp	800044c4 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
8000438e:	4d 39       	lddpc	r9,800044d8 <fat_entry_longname+0x18c>
80004390:	13 8a       	ld.ub	r10,r9[0x0]
80004392:	30 09       	mov	r9,0
80004394:	f2 0a 18 00 	cp.b	r10,r9
80004398:	c0 90       	breq	800043aa <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000439a:	e2 18 00 40 	andl	r8,0x40,COH
8000439e:	c0 61       	brne	800043aa <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800043a0:	31 09       	mov	r9,16
800043a2:	4c d8       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
800043a4:	b0 89       	st.b	r8[0x0],r9
800043a6:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800043a8:	c8 e8       	rjmp	800044c4 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800043aa:	2f fc       	sub	r12,-1
800043ac:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043ae:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043b2:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800043b4:	4c 95       	lddpc	r5,800044d8 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043b6:	20 14       	sub	r4,1
800043b8:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800043ba:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800043bc:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800043be:	19 89       	ld.ub	r9,r12[0x0]
800043c0:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
800043c2:	19 99       	ld.ub	r9,r12[0x1]
800043c4:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
800043c6:	58 06       	cp.w	r6,0
800043c8:	c0 f0       	breq	800043e6 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
800043ca:	0b 89       	ld.ub	r9,r5[0x0]
800043cc:	f6 09 18 00 	cp.b	r9,r11
800043d0:	c3 91       	brne	80004442 <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043d2:	40 1e       	lddsp	lr,sp[0x4]
800043d4:	1c 38       	cp.w	r8,lr
800043d6:	c0 55       	brlt	800043e0 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800043d8:	30 08       	mov	r8,0
800043da:	ae 88       	st.b	r7[0x0],r8
800043dc:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
800043de:	c7 38       	rjmp	800044c4 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800043e0:	9a 59       	ld.sh	r9,sp[0xa]
800043e2:	ae 89       	st.b	r7[0x0],r9
800043e4:	c2 f8       	rjmp	80004442 <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
800043e6:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800043e8:	32 a3       	mov	r3,42
800043ea:	e6 09 19 00 	cp.h	r9,r3
800043ee:	c6 a0       	breq	800044c2 <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043f0:	9a 5e       	ld.sh	lr,sp[0xa]
800043f2:	58 0e       	cp.w	lr,0
800043f4:	c0 e1       	brne	80004410 <fat_entry_longname+0xc4>
800043f6:	35 c0       	mov	r0,92
800043f8:	e0 09 19 00 	cp.h	r9,r0
800043fc:	5f 12       	srne	r2
800043fe:	32 f3       	mov	r3,47
80004400:	e6 09 19 00 	cp.h	r9,r3
80004404:	5f 13       	srne	r3
80004406:	e5 e3 00 03 	and	r3,r2,r3
8000440a:	f6 03 18 00 	cp.b	r3,r11
8000440e:	c1 e0       	breq	8000444a <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80004410:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80004414:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80004418:	e4 c0 ff e0 	sub	r0,r2,-32
8000441c:	00 33       	cp.w	r3,r0
8000441e:	c0 41       	brne	80004426 <fat_entry_longname+0xda>
80004420:	40 00       	lddsp	r0,sp[0x0]
80004422:	58 00       	cp.w	r0,0
80004424:	c0 f0       	breq	80004442 <fat_entry_longname+0xf6>
80004426:	22 02       	sub	r2,32
80004428:	04 33       	cp.w	r3,r2
8000442a:	c0 41       	brne	80004432 <fat_entry_longname+0xe6>
8000442c:	40 03       	lddsp	r3,sp[0x0]
8000442e:	58 03       	cp.w	r3,0
80004430:	c0 90       	breq	80004442 <fat_entry_longname+0xf6>
80004432:	fc 09 19 00 	cp.h	r9,lr
80004436:	c0 60       	breq	80004442 <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80004438:	31 69       	mov	r9,22
8000443a:	4a 78       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
8000443c:	b0 89       	st.b	r8[0x0],r9
8000443e:	30 0c       	mov	r12,0
           return false;
80004440:	c4 28       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
80004442:	9a 59       	ld.sh	r9,sp[0xa]
80004444:	e2 09 19 00 	cp.h	r9,r1
80004448:	c0 b1       	brne	8000445e <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
8000444a:	4a 49       	lddpc	r9,800044d8 <fat_entry_longname+0x18c>
8000444c:	13 8a       	ld.ub	r10,r9[0x0]
8000444e:	30 09       	mov	r9,0
80004450:	f2 0a 18 00 	cp.b	r10,r9
80004454:	c3 70       	breq	800044c2 <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80004456:	2f f8       	sub	r8,-1
80004458:	ae 08       	st.h	r7[0x0],r8
8000445a:	30 1c       	mov	r12,1
8000445c:	c3 48       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000445e:	e8 08 18 00 	cp.b	r8,r4
80004462:	c0 31       	brne	80004468 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
80004464:	2f dc       	sub	r12,-3
80004466:	c2 58       	rjmp	800044b0 <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
80004468:	30 a9       	mov	r9,10
8000446a:	f2 08 18 00 	cp.b	r8,r9
8000446e:	c0 31       	brne	80004474 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
80004470:	2f ec       	sub	r12,-2
80004472:	c1 f8       	rjmp	800044b0 <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
80004474:	30 c9       	mov	r9,12
80004476:	f2 08 18 00 	cp.b	r8,r9
8000447a:	c1 b1       	brne	800044b0 <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000447c:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80004480:	e2 18 00 40 	andl	r8,0x40,COH
80004484:	c0 61       	brne	80004490 <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80004486:	31 09       	mov	r9,16
80004488:	49 38       	lddpc	r8,800044d4 <fat_entry_longname+0x188>
8000448a:	b0 89       	st.b	r8[0x0],r9
8000448c:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
8000448e:	c1 b8       	rjmp	800044c4 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80004490:	58 06       	cp.w	r6,0
80004492:	c0 b0       	breq	800044a8 <fat_entry_longname+0x15c>
80004494:	49 18       	lddpc	r8,800044d8 <fat_entry_longname+0x18c>
80004496:	11 89       	ld.ub	r9,r8[0x0]
80004498:	30 08       	mov	r8,0
8000449a:	f0 09 18 00 	cp.b	r9,r8
8000449e:	c1 50       	breq	800044c8 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800044a0:	30 e8       	mov	r8,14
800044a2:	ae 08       	st.h	r7[0x0],r8
800044a4:	30 1c       	mov	r12,1
               return true;
800044a6:	c0 f8       	rjmp	800044c4 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800044a8:	0f 9c       	ld.ub	r12,r7[0x1]
800044aa:	f0 1f 00 0d 	mcall	800044dc <fat_entry_longname+0x190>
800044ae:	c0 b8       	rjmp	800044c4 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800044b0:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800044b2:	f6 09 18 00 	cp.b	r9,r11
800044b6:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800044ba:	2f f8       	sub	r8,-1
800044bc:	5c 58       	castu.b	r8
      ptr_entry+=2;
800044be:	2f ec       	sub	r12,-2
   }
800044c0:	c7 fb       	rjmp	800043be <fat_entry_longname+0x72>
800044c2:	30 1c       	mov	r12,1
}
800044c4:	2f dd       	sub	sp,-12
800044c6:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800044c8:	30 08       	mov	r8,0
800044ca:	ae 98       	st.b	r7[0x1],r8
800044cc:	30 1c       	mov	r12,1
               }
               return true;
800044ce:	cf bb       	rjmp	800044c4 <fat_entry_longname+0x178>
800044d0:	80 00       	ld.sh	r0,r0[0x0]
800044d2:	43 34       	lddsp	r4,sp[0xcc]
800044d4:	00 00       	add	r0,r0
800044d6:	0c 1c       	sub	r12,r6
800044d8:	00 00       	add	r0,r0
800044da:	0c 1d       	sub	sp,r6
800044dc:	80 00       	ld.sh	r0,r0[0x0]
800044de:	43 0c       	lddsp	r12,sp[0xc0]

800044e0 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
800044e0:	d4 31       	pushm	r0-r7,lr
800044e2:	20 2d       	sub	sp,8
800044e4:	18 97       	mov	r7,r12
800044e6:	50 1b       	stdsp	sp[0x4],r11
800044e8:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
800044ea:	31 69       	mov	r9,22
800044ec:	4b c8       	lddpc	r8,800045dc <fat_entry_shortname+0xfc>
800044ee:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
800044f0:	f0 1f 00 3c 	mcall	800045e0 <fat_entry_shortname+0x100>
800044f4:	30 08       	mov	r8,0
800044f6:	10 9a       	mov	r10,r8
800044f8:	30 1b       	mov	r11,1
800044fa:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
800044fc:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
800044fe:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80004500:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80004502:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80004504:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80004506:	fc 08 18 00 	cp.b	r8,lr
8000450a:	c1 90       	breq	8000453c <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
8000450c:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80004510:	ea 08 18 00 	cp.b	r8,r5
80004514:	c0 41       	brne	8000451c <fat_entry_shortname+0x3c>
80004516:	40 01       	lddsp	r1,sp[0x0]
80004518:	58 01       	cp.w	r1,0
8000451a:	c0 81       	brne	8000452a <fat_entry_shortname+0x4a>
8000451c:	e8 09 18 00 	cp.b	r9,r4
80004520:	c0 f1       	brne	8000453e <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80004522:	ea 08 18 00 	cp.b	r8,r5
80004526:	e0 8b 00 0b 	brhi	8000453c <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000452a:	f9 39 00 08 	ld.ub	r9,r12[8]
8000452e:	e8 09 18 00 	cp.b	r9,r4
80004532:	c0 50       	breq	8000453c <fat_entry_shortname+0x5c>
80004534:	30 78       	mov	r8,7
80004536:	32 e9       	mov	r9,46
80004538:	50 03       	stdsp	sp[0x0],r3
8000453a:	c0 28       	rjmp	8000453e <fat_entry_shortname+0x5e>
8000453c:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000453e:	58 06       	cp.w	r6,0
80004540:	c1 80       	breq	80004570 <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
80004542:	4a 9b       	lddpc	r11,800045e4 <fat_entry_shortname+0x104>
80004544:	17 81       	ld.ub	r1,r11[0x0]
80004546:	30 0b       	mov	r11,0
80004548:	f6 01 18 00 	cp.b	r1,r11
8000454c:	c2 c1       	brne	800045a4 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000454e:	40 1b       	lddsp	r11,sp[0x4]
80004550:	20 1b       	sub	r11,1
80004552:	16 3a       	cp.w	r10,r11
80004554:	c0 35       	brlt	8000455a <fat_entry_shortname+0x7a>
80004556:	06 99       	mov	r9,r3
80004558:	c0 a8       	rjmp	8000456c <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000455a:	f2 c1 00 41 	sub	r1,r9,65
8000455e:	31 9b       	mov	r11,25
80004560:	f6 01 18 00 	cp.b	r1,r11
80004564:	e0 8b 00 04 	brhi	8000456c <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
80004568:	2e 09       	sub	r9,-32
8000456a:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
8000456c:	ae 89       	st.b	r7[0x0],r9
8000456e:	c1 b8       	rjmp	800045a4 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80004570:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
80004572:	e4 0b 18 00 	cp.b	r11,r2
80004576:	c2 f0       	breq	800045d4 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80004578:	58 09       	cp.w	r9,0
8000457a:	c0 c1       	brne	80004592 <fat_entry_shortname+0xb2>
8000457c:	35 c1       	mov	r1,92
8000457e:	e2 0b 18 00 	cp.b	r11,r1
80004582:	5f 10       	srne	r0
80004584:	32 f1       	mov	r1,47
80004586:	e2 0b 18 00 	cp.b	r11,r1
8000458a:	5f 11       	srne	r1
8000458c:	e1 e1 00 01 	and	r1,r0,r1
80004590:	c0 c0       	breq	800045a8 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
80004592:	f2 0b 18 00 	cp.b	r11,r9
80004596:	c0 70       	breq	800045a4 <fat_entry_shortname+0xc4>
80004598:	f2 c1 ff e0 	sub	r1,r9,-32
8000459c:	02 3b       	cp.w	r11,r1
8000459e:	c0 30       	breq	800045a4 <fat_entry_shortname+0xc4>
800045a0:	30 0c       	mov	r12,0
800045a2:	c1 a8       	rjmp	800045d6 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800045a4:	58 09       	cp.w	r9,0
800045a6:	c0 b1       	brne	800045bc <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800045a8:	48 f8       	lddpc	r8,800045e4 <fat_entry_shortname+0x104>
800045aa:	11 89       	ld.ub	r9,r8[0x0]
800045ac:	30 08       	mov	r8,0
800045ae:	f0 09 18 00 	cp.b	r9,r8
800045b2:	c1 10       	breq	800045d4 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800045b4:	2f fa       	sub	r10,-1
800045b6:	ae 0a       	st.h	r7[0x0],r10
800045b8:	30 1c       	mov	r12,1
800045ba:	c0 e8       	rjmp	800045d6 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800045bc:	48 a9       	lddpc	r9,800045e4 <fat_entry_shortname+0x104>
800045be:	13 8b       	ld.ub	r11,r9[0x0]
800045c0:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
800045c2:	f2 0b 18 00 	cp.b	r11,r9
800045c6:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800045ca:	2f fa       	sub	r10,-1
800045cc:	5c 5a       	castu.b	r10
      u8_pos_entry++;
800045ce:	2f f8       	sub	r8,-1
800045d0:	5c 58       	castu.b	r8
   }
800045d2:	c9 ab       	rjmp	80004506 <fat_entry_shortname+0x26>
800045d4:	30 1c       	mov	r12,1
}
800045d6:	2f ed       	sub	sp,-8
800045d8:	d8 32       	popm	r0-r7,pc
800045da:	00 00       	add	r0,r0
800045dc:	00 00       	add	r0,r0
800045de:	0c 1c       	sub	r12,r6
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	43 34       	lddsp	r4,sp[0xcc]
800045e4:	00 00       	add	r0,r0
800045e6:	0c 1d       	sub	sp,r6

800045e8 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800045e8:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800045ea:	f0 1f 00 10 	mcall	80004628 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
800045ee:	49 08       	lddpc	r8,8000462c <fat_get_entry_info+0x44>
800045f0:	f9 39 00 0b 	ld.ub	r9,r12[11]
800045f4:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
800045f6:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
800045fa:	f0 c9 ff fc 	sub	r9,r8,-4
800045fe:	15 8b       	ld.ub	r11,r10[0x0]
80004600:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80004602:	15 9a       	ld.ub	r10,r10[0x1]
80004604:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80004606:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000460a:	15 8b       	ld.ub	r11,r10[0x0]
8000460c:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000460e:	15 9a       	ld.ub	r10,r10[0x1]
80004610:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
80004612:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80004614:	2f 88       	sub	r8,-8
80004616:	19 89       	ld.ub	r9,r12[0x0]
80004618:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000461a:	19 99       	ld.ub	r9,r12[0x1]
8000461c:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000461e:	19 a9       	ld.ub	r9,r12[0x2]
80004620:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80004622:	19 b9       	ld.ub	r9,r12[0x3]
80004624:	b0 89       	st.b	r8[0x0],r9
}
80004626:	d8 02       	popm	pc
80004628:	80 00       	ld.sh	r0,r0[0x0]
8000462a:	43 34       	lddsp	r4,sp[0xcc]
8000462c:	00 00       	add	r0,r0
8000462e:	09 8c       	ld.ub	r12,r4[0x0]

80004630 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80004630:	eb cd 40 80 	pushm	r7,lr
80004634:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80004636:	f0 1f 00 14 	mcall	80004684 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
8000463a:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
8000463c:	58 08       	cp.w	r8,0
8000463e:	c0 61       	brne	8000464a <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80004640:	30 a9       	mov	r9,10
80004642:	49 28       	lddpc	r8,80004688 <fat_entry_check+0x58>
80004644:	b0 89       	st.b	r8[0x0],r9
80004646:	30 07       	mov	r7,0
      return false;
80004648:	c1 a8       	rjmp	8000467c <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000464a:	30 ba       	mov	r10,11
8000464c:	48 f9       	lddpc	r9,80004688 <fat_entry_check+0x58>
8000464e:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80004650:	3e 59       	mov	r9,-27
80004652:	f2 08 18 00 	cp.b	r8,r9
80004656:	c1 20       	breq	8000467a <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80004658:	32 e9       	mov	r9,46
8000465a:	f2 08 18 00 	cp.b	r8,r9
8000465e:	c0 e0       	breq	8000467a <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80004660:	f9 38 00 0b 	ld.ub	r8,r12[11]
80004664:	10 99       	mov	r9,r8
80004666:	e2 19 00 08 	andl	r9,0x8,COH
8000466a:	c0 81       	brne	8000467a <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
8000466c:	e2 18 00 10 	andl	r8,0x10,COH
80004670:	c0 60       	breq	8000467c <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
80004672:	ec 17 00 01 	eorl	r7,0x1
80004676:	5c 57       	castu.b	r7
80004678:	c0 28       	rjmp	8000467c <fat_entry_check+0x4c>
8000467a:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
8000467c:	0e 9c       	mov	r12,r7
8000467e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004682:	00 00       	add	r0,r0
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	43 34       	lddsp	r4,sp[0xcc]
80004688:	00 00       	add	r0,r0
8000468a:	0c 1c       	sub	r12,r6

8000468c <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000468c:	48 58       	lddpc	r8,800046a0 <fat_cache_reset+0x14>
8000468e:	3f f9       	mov	r9,-1
80004690:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
80004692:	30 09       	mov	r9,0
80004694:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80004698:	3f f9       	mov	r9,-1
8000469a:	91 39       	st.w	r8[0xc],r9
}
8000469c:	5e fc       	retal	r12
8000469e:	00 00       	add	r0,r0
800046a0:	00 00       	add	r0,r0
800046a2:	0c 54       	eor	r4,r6

800046a4 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800046a4:	30 19       	mov	r9,1
800046a6:	48 38       	lddpc	r8,800046b0 <fat_cache_mark_sector_as_dirty+0xc>
800046a8:	f1 69 00 08 	st.b	r8[8],r9
}
800046ac:	5e fc       	retal	r12
800046ae:	00 00       	add	r0,r0
800046b0:	00 00       	add	r0,r0
800046b2:	0c 54       	eor	r4,r6

800046b4 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
800046b4:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
800046b6:	f0 1f 00 11 	mcall	800046f8 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
800046ba:	f0 1f 00 11 	mcall	800046fc <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
800046be:	49 18       	lddpc	r8,80004700 <fat_write_entry_file+0x4c>
800046c0:	11 a9       	ld.ub	r9,r8[0x2]
800046c2:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
800046c6:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
800046ca:	f0 c9 ff fc 	sub	r9,r8,-4
800046ce:	13 9b       	ld.ub	r11,r9[0x1]
800046d0:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
800046d2:	13 8b       	ld.ub	r11,r9[0x0]
800046d4:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
800046d6:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
800046da:	13 bb       	ld.ub	r11,r9[0x3]
800046dc:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
800046de:	13 a9       	ld.ub	r9,r9[0x2]
800046e0:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
800046e2:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
800046e4:	2f 88       	sub	r8,-8
800046e6:	11 b9       	ld.ub	r9,r8[0x3]
800046e8:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
800046ea:	11 a9       	ld.ub	r9,r8[0x2]
800046ec:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
800046ee:	11 99       	ld.ub	r9,r8[0x1]
800046f0:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
800046f2:	11 88       	ld.ub	r8,r8[0x0]
800046f4:	b8 b8       	st.b	r12[0x3],r8
}
800046f6:	d8 02       	popm	pc
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	46 a4       	lddsp	r4,sp[0x1a8]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	43 34       	lddsp	r4,sp[0xcc]
80004700:	00 00       	add	r0,r0
80004702:	09 8c       	ld.ub	r12,r4[0x0]

80004704 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80004704:	49 88       	lddpc	r8,80004764 <fat_check_nav_access_file+0x60>
80004706:	11 89       	ld.ub	r9,r8[0x0]
80004708:	30 08       	mov	r8,0
8000470a:	f0 09 18 00 	cp.b	r9,r8
8000470e:	c2 a0       	breq	80004762 <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004710:	49 68       	lddpc	r8,80004768 <fat_check_nav_access_file+0x64>
80004712:	11 89       	ld.ub	r9,r8[0x0]
80004714:	49 68       	lddpc	r8,8000476c <fat_check_nav_access_file+0x68>
80004716:	11 88       	ld.ub	r8,r8[0x0]
80004718:	f0 09 18 00 	cp.b	r9,r8
8000471c:	c2 31       	brne	80004762 <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000471e:	49 38       	lddpc	r8,80004768 <fat_check_nav_access_file+0x64>
80004720:	70 89       	ld.w	r9,r8[0x20]
80004722:	49 38       	lddpc	r8,8000476c <fat_check_nav_access_file+0x68>
80004724:	70 88       	ld.w	r8,r8[0x20]
80004726:	10 39       	cp.w	r9,r8
80004728:	c1 d1       	brne	80004762 <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000472a:	49 28       	lddpc	r8,80004770 <fat_check_nav_access_file+0x6c>
8000472c:	90 19       	ld.sh	r9,r8[0x2]
8000472e:	48 e8       	lddpc	r8,80004764 <fat_check_nav_access_file+0x60>
80004730:	90 18       	ld.sh	r8,r8[0x2]
80004732:	f0 09 19 00 	cp.h	r9,r8
80004736:	c1 61       	brne	80004762 <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004738:	58 0c       	cp.w	r12,0
8000473a:	c0 b0       	breq	80004750 <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
8000473c:	48 e8       	lddpc	r8,80004774 <fat_check_nav_access_file+0x70>
8000473e:	11 89       	ld.ub	r9,r8[0x0]
80004740:	30 08       	mov	r8,0
80004742:	f0 09 18 00 	cp.b	r9,r8
80004746:	c0 e0       	breq	80004762 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004748:	32 89       	mov	r9,40
8000474a:	48 c8       	lddpc	r8,80004778 <fat_check_nav_access_file+0x74>
8000474c:	b0 89       	st.b	r8[0x0],r9
8000474e:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
80004750:	48 98       	lddpc	r8,80004774 <fat_check_nav_access_file+0x70>
80004752:	11 88       	ld.ub	r8,r8[0x0]
80004754:	e2 18 00 02 	andl	r8,0x2,COH
80004758:	c0 50       	breq	80004762 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000475a:	32 99       	mov	r9,41
8000475c:	48 78       	lddpc	r8,80004778 <fat_check_nav_access_file+0x74>
8000475e:	b0 89       	st.b	r8[0x0],r9
80004760:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
80004762:	5e ff       	retal	1
80004764:	00 00       	add	r0,r0
80004766:	0c 14       	sub	r4,r6
80004768:	00 00       	add	r0,r0
8000476a:	0b cc       	ld.ub	r12,r5[0x4]
8000476c:	00 00       	add	r0,r0
8000476e:	0c 20       	rsub	r0,r6
80004770:	00 00       	add	r0,r0
80004772:	0c 18       	sub	r8,r6
80004774:	00 00       	add	r0,r0
80004776:	0c 04       	add	r4,r6
80004778:	00 00       	add	r0,r0
8000477a:	0c 1c       	sub	r12,r6

8000477c <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
8000477c:	d4 21       	pushm	r4-r7,lr
8000477e:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80004780:	58 0c       	cp.w	r12,0
80004782:	c6 20       	breq	80004846 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80004784:	1a 97       	mov	r7,sp
80004786:	4b 28       	lddpc	r8,8000484c <fat_invert_nav+0xd0>
80004788:	70 09       	ld.w	r9,r8[0x0]
8000478a:	50 09       	stdsp	sp[0x0],r9
8000478c:	70 19       	ld.w	r9,r8[0x4]
8000478e:	50 19       	stdsp	sp[0x4],r9
80004790:	70 29       	ld.w	r9,r8[0x8]
80004792:	50 29       	stdsp	sp[0x8],r9
80004794:	70 39       	ld.w	r9,r8[0xc]
80004796:	50 39       	stdsp	sp[0xc],r9
80004798:	fa c9 ff f0 	sub	r9,sp,-16
8000479c:	f0 ca ff f0 	sub	r10,r8,-16
800047a0:	74 0b       	ld.w	r11,r10[0x0]
800047a2:	93 0b       	st.w	r9[0x0],r11
800047a4:	74 1b       	ld.w	r11,r10[0x4]
800047a6:	93 1b       	st.w	r9[0x4],r11
800047a8:	74 2b       	ld.w	r11,r10[0x8]
800047aa:	93 2b       	st.w	r9[0x8],r11
800047ac:	74 3a       	ld.w	r10,r10[0xc]
800047ae:	93 3a       	st.w	r9[0xc],r10
800047b0:	fa c9 ff e0 	sub	r9,sp,-32
800047b4:	f0 ca ff e0 	sub	r10,r8,-32
800047b8:	74 0b       	ld.w	r11,r10[0x0]
800047ba:	93 0b       	st.w	r9[0x0],r11
800047bc:	74 1b       	ld.w	r11,r10[0x4]
800047be:	93 1b       	st.w	r9[0x4],r11
800047c0:	74 2b       	ld.w	r11,r10[0x8]
800047c2:	93 2b       	st.w	r9[0x8],r11
800047c4:	74 3a       	ld.w	r10,r10[0xc]
800047c6:	93 3a       	st.w	r9[0xc],r10
800047c8:	70 c9       	ld.w	r9,r8[0x30]
800047ca:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
800047cc:	f8 c6 00 01 	sub	r6,r12,1
800047d0:	5c 56       	castu.b	r6
800047d2:	ec 04 10 34 	mul	r4,r6,52
800047d6:	49 f9       	lddpc	r9,80004850 <fat_invert_nav+0xd4>
800047d8:	12 04       	add	r4,r9
800047da:	33 45       	mov	r5,52
800047dc:	0a 9a       	mov	r10,r5
800047de:	08 9b       	mov	r11,r4
800047e0:	10 9c       	mov	r12,r8
800047e2:	f0 1f 00 1d 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
800047e6:	0a 9a       	mov	r10,r5
800047e8:	1a 9b       	mov	r11,sp
800047ea:	08 9c       	mov	r12,r4
800047ec:	f0 1f 00 1a 	mcall	80004854 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
800047f0:	49 ac       	lddpc	r12,80004858 <fat_invert_nav+0xdc>
800047f2:	78 08       	ld.w	r8,r12[0x0]
800047f4:	50 08       	stdsp	sp[0x0],r8
800047f6:	78 18       	ld.w	r8,r12[0x4]
800047f8:	50 18       	stdsp	sp[0x4],r8
800047fa:	78 28       	ld.w	r8,r12[0x8]
800047fc:	50 28       	stdsp	sp[0x8],r8
800047fe:	78 38       	ld.w	r8,r12[0xc]
80004800:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80004802:	ec 04 15 04 	lsl	r4,r6,0x4
80004806:	49 68       	lddpc	r8,8000485c <fat_invert_nav+0xe0>
80004808:	10 04       	add	r4,r8
8000480a:	31 05       	mov	r5,16
8000480c:	0a 9a       	mov	r10,r5
8000480e:	08 9b       	mov	r11,r4
80004810:	f0 1f 00 11 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80004814:	0a 9a       	mov	r10,r5
80004816:	1a 9b       	mov	r11,sp
80004818:	08 9c       	mov	r12,r4
8000481a:	f0 1f 00 0f 	mcall	80004854 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000481e:	49 14       	lddpc	r4,80004860 <fat_invert_nav+0xe4>
80004820:	30 45       	mov	r5,4
80004822:	0a 9a       	mov	r10,r5
80004824:	08 9b       	mov	r11,r4
80004826:	1a 9c       	mov	r12,sp
80004828:	f0 1f 00 0b 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
8000482c:	48 e8       	lddpc	r8,80004864 <fat_invert_nav+0xe8>
8000482e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004832:	0a 9a       	mov	r10,r5
80004834:	0c 9b       	mov	r11,r6
80004836:	08 9c       	mov	r12,r4
80004838:	f0 1f 00 07 	mcall	80004854 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
8000483c:	0a 9a       	mov	r10,r5
8000483e:	1a 9b       	mov	r11,sp
80004840:	0c 9c       	mov	r12,r6
80004842:	f0 1f 00 05 	mcall	80004854 <fat_invert_nav+0xd8>
}
80004846:	2f 3d       	sub	sp,-52
80004848:	d8 22       	popm	r4-r7,pc
8000484a:	00 00       	add	r0,r0
8000484c:	00 00       	add	r0,r0
8000484e:	0b cc       	ld.ub	r12,r5[0x4]
80004850:	00 00       	add	r0,r0
80004852:	0c 20       	rsub	r0,r6
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	83 ba       	st.w	r1[0x2c],r10
80004858:	00 00       	add	r0,r0
8000485a:	09 8c       	ld.ub	r12,r4[0x0]
8000485c:	00 00       	add	r0,r0
8000485e:	0c 04       	add	r4,r6
80004860:	00 00       	add	r0,r0
80004862:	0c 18       	sub	r8,r6
80004864:	00 00       	add	r0,r0
80004866:	0c 14       	sub	r4,r6

80004868 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
80004868:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000486a:	49 08       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
8000486c:	f1 39 00 08 	ld.ub	r9,r8[8]
80004870:	30 18       	mov	r8,1
80004872:	f0 09 18 00 	cp.b	r9,r8
80004876:	c1 81       	brne	800048a6 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80004878:	48 c8       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
8000487a:	30 09       	mov	r9,0
8000487c:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004880:	11 8c       	ld.ub	r12,r8[0x0]
80004882:	f0 1f 00 0b 	mcall	800048ac <fat_cache_flush+0x44>
80004886:	c0 50       	breq	80004890 <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80004888:	31 49       	mov	r9,20
8000488a:	48 a8       	lddpc	r8,800048b0 <fat_cache_flush+0x48>
8000488c:	b0 89       	st.b	r8[0x0],r9
8000488e:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004890:	48 68       	lddpc	r8,800048a8 <fat_cache_flush+0x40>
80004892:	48 9a       	lddpc	r10,800048b4 <fat_cache_flush+0x4c>
80004894:	70 1b       	ld.w	r11,r8[0x4]
80004896:	11 8c       	ld.ub	r12,r8[0x0]
80004898:	f0 1f 00 08 	mcall	800048b8 <fat_cache_flush+0x50>
8000489c:	c0 50       	breq	800048a6 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
8000489e:	30 19       	mov	r9,1
800048a0:	48 48       	lddpc	r8,800048b0 <fat_cache_flush+0x48>
800048a2:	b0 89       	st.b	r8[0x0],r9
800048a4:	d8 0a       	popm	pc,r12=0
         return false;
800048a6:	da 0a       	popm	pc,r12=1
800048a8:	00 00       	add	r0,r0
800048aa:	0c 54       	eor	r4,r6
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	6d bc       	ld.w	r12,r6[0x6c]
800048b0:	00 00       	add	r0,r0
800048b2:	0c 1c       	sub	r12,r6
800048b4:	00 00       	add	r0,r0
800048b6:	09 cc       	ld.ub	r12,r4[0x4]
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	6d ec       	ld.w	r12,r6[0x78]

800048bc <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
800048bc:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
800048be:	e0 6a 02 00 	mov	r10,512
800048c2:	30 0b       	mov	r11,0
800048c4:	48 2c       	lddpc	r12,800048cc <fat_cache_clear+0x10>
800048c6:	f0 1f 00 03 	mcall	800048d0 <fat_cache_clear+0x14>
}
800048ca:	d8 02       	popm	pc
800048cc:	00 00       	add	r0,r0
800048ce:	09 cc       	ld.ub	r12,r4[0x4]
800048d0:	80 00       	ld.sh	r0,r0[0x0]
800048d2:	85 02       	st.w	r2[0x0],r2

800048d4 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
800048d4:	eb cd 40 80 	pushm	r7,lr
800048d8:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800048da:	49 78       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
800048dc:	11 89       	ld.ub	r9,r8[0x0]
800048de:	49 78       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
800048e0:	11 88       	ld.ub	r8,r8[0x0]
800048e2:	f0 09 18 00 	cp.b	r9,r8
800048e6:	c0 91       	brne	800048f8 <fat_cache_read_sector+0x24>
800048e8:	49 38       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
800048ea:	70 19       	ld.w	r9,r8[0x4]
800048ec:	49 48       	lddpc	r8,8000493c <fat_cache_read_sector+0x68>
800048ee:	70 08       	ld.w	r8,r8[0x0]
800048f0:	10 39       	cp.w	r9,r8
800048f2:	c0 31       	brne	800048f8 <fat_cache_read_sector+0x24>
800048f4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
800048f8:	f0 1f 00 12 	mcall	80004940 <fat_cache_read_sector+0x6c>
800048fc:	c1 90       	breq	8000492e <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
800048fe:	f0 1f 00 12 	mcall	80004944 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80004902:	48 f8       	lddpc	r8,8000493c <fat_cache_read_sector+0x68>
80004904:	70 0b       	ld.w	r11,r8[0x0]
80004906:	48 c8       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
80004908:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
8000490a:	58 07       	cp.w	r7,0
8000490c:	c0 c0       	breq	80004924 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000490e:	48 fa       	lddpc	r10,80004948 <fat_cache_read_sector+0x74>
80004910:	48 a8       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
80004912:	11 8c       	ld.ub	r12,r8[0x0]
80004914:	f0 1f 00 0e 	mcall	8000494c <fat_cache_read_sector+0x78>
80004918:	c0 60       	breq	80004924 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
8000491a:	30 19       	mov	r9,1
8000491c:	48 d8       	lddpc	r8,80004950 <fat_cache_read_sector+0x7c>
8000491e:	b0 89       	st.b	r8[0x0],r9
80004920:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004924:	48 58       	lddpc	r8,80004938 <fat_cache_read_sector+0x64>
80004926:	11 89       	ld.ub	r9,r8[0x0]
80004928:	48 38       	lddpc	r8,80004934 <fat_cache_read_sector+0x60>
8000492a:	b0 89       	st.b	r8[0x0],r9
8000492c:	30 1c       	mov	r12,1
   return true;
}
8000492e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004932:	00 00       	add	r0,r0
80004934:	00 00       	add	r0,r0
80004936:	0c 54       	eor	r4,r6
80004938:	00 00       	add	r0,r0
8000493a:	0b cc       	ld.ub	r12,r5[0x4]
8000493c:	00 00       	add	r0,r0
8000493e:	09 88       	ld.ub	r8,r4[0x0]
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	48 68       	lddpc	r8,80004958 <fat_cluster_readnext+0x4>
80004944:	80 00       	ld.sh	r0,r0[0x0]
80004946:	46 8c       	lddsp	r12,sp[0x1a0]
80004948:	00 00       	add	r0,r0
8000494a:	09 cc       	ld.ub	r12,r4[0x4]
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	6d d0       	ld.w	r0,r6[0x74]
80004950:	00 00       	add	r0,r0
80004952:	0c 1c       	sub	r12,r6

80004954 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80004954:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80004956:	49 f8       	lddpc	r8,800049d0 <fat_cluster_readnext+0x7c>
80004958:	11 89       	ld.ub	r9,r8[0x0]
8000495a:	30 38       	mov	r8,3
8000495c:	f0 09 18 00 	cp.b	r9,r8
80004960:	c0 61       	brne	8000496c <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
80004962:	49 d8       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004964:	90 09       	ld.sh	r9,r8[0x0]
80004966:	2f c9       	sub	r9,-4
80004968:	b0 09       	st.h	r8[0x0],r9
8000496a:	c0 58       	rjmp	80004974 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
8000496c:	49 a8       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
8000496e:	90 09       	ld.sh	r9,r8[0x0]
80004970:	2f e9       	sub	r9,-2
80004972:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80004974:	49 88       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004976:	90 09       	ld.sh	r9,r8[0x0]
80004978:	e0 68 02 00 	mov	r8,512
8000497c:	f0 09 19 00 	cp.h	r9,r8
80004980:	c0 c1       	brne	80004998 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80004982:	30 09       	mov	r9,0
80004984:	49 48       	lddpc	r8,800049d4 <fat_cluster_readnext+0x80>
80004986:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80004988:	49 48       	lddpc	r8,800049d8 <fat_cluster_readnext+0x84>
8000498a:	70 09       	ld.w	r9,r8[0x0]
8000498c:	2f f9       	sub	r9,-1
8000498e:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80004990:	30 1c       	mov	r12,1
80004992:	f0 1f 00 13 	mcall	800049dc <fat_cluster_readnext+0x88>
80004996:	c1 b0       	breq	800049cc <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80004998:	49 28       	lddpc	r8,800049e0 <fat_cluster_readnext+0x8c>
8000499a:	2f c8       	sub	r8,-4
8000499c:	48 e9       	lddpc	r9,800049d4 <fat_cluster_readnext+0x80>
8000499e:	92 89       	ld.uh	r9,r9[0x0]
800049a0:	49 1a       	lddpc	r10,800049e4 <fat_cluster_readnext+0x90>
800049a2:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800049a6:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800049a8:	12 0a       	add	r10,r9
800049aa:	15 9a       	ld.ub	r10,r10[0x1]
800049ac:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800049ae:	48 9a       	lddpc	r10,800049d0 <fat_cluster_readnext+0x7c>
800049b0:	15 8b       	ld.ub	r11,r10[0x0]
800049b2:	30 3a       	mov	r10,3
800049b4:	f4 0b 18 00 	cp.b	r11,r10
800049b8:	c0 20       	breq	800049bc <fat_cluster_readnext+0x68>
800049ba:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800049bc:	48 aa       	lddpc	r10,800049e4 <fat_cluster_readnext+0x90>
800049be:	f4 09 00 09 	add	r9,r10,r9
800049c2:	13 aa       	ld.ub	r10,r9[0x2]
800049c4:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800049c6:	13 b9       	ld.ub	r9,r9[0x3]
800049c8:	b0 89       	st.b	r8[0x0],r9
800049ca:	30 1c       	mov	r12,1
   }
   return true;
}
800049cc:	d8 02       	popm	pc
800049ce:	00 00       	add	r0,r0
800049d0:	00 00       	add	r0,r0
800049d2:	0c 18       	sub	r8,r6
800049d4:	00 00       	add	r0,r0
800049d6:	09 9c       	ld.ub	r12,r4[0x1]
800049d8:	00 00       	add	r0,r0
800049da:	09 88       	ld.ub	r8,r4[0x0]
800049dc:	80 00       	ld.sh	r0,r0[0x0]
800049de:	48 d4       	lddpc	r4,80004a10 <fat_cluster_val+0x28>
800049e0:	00 00       	add	r0,r0
800049e2:	0c 6c       	and	r12,r6
800049e4:	00 00       	add	r0,r0
800049e6:	09 cc       	ld.ub	r12,r4[0x4]

800049e8 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
800049e8:	d4 31       	pushm	r0-r7,lr
800049ea:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
800049ec:	fe f8 02 18 	ld.w	r8,pc[536]
800049f0:	11 88       	ld.ub	r8,r8[0x0]
800049f2:	30 39       	mov	r9,3
800049f4:	f2 08 18 00 	cp.b	r8,r9
800049f8:	c0 d1       	brne	80004a12 <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800049fa:	fe fa 02 0e 	ld.w	r10,pc[526]
800049fe:	74 09       	ld.w	r9,r10[0x0]
80004a00:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80004a02:	15 bb       	ld.ub	r11,r10[0x3]
80004a04:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004a08:	a3 6b       	lsl	r11,0x2
80004a0a:	fe fa 02 02 	ld.w	r10,pc[514]
80004a0e:	b4 0b       	st.h	r10[0x0],r11
80004a10:	c2 08       	rjmp	80004a50 <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80004a12:	30 29       	mov	r9,2
80004a14:	f2 08 18 00 	cp.b	r8,r9
80004a18:	c0 81       	brne	80004a28 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004a1a:	4f ca       	lddpc	r10,80004c08 <fat_cluster_val+0x220>
80004a1c:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004a1e:	15 bb       	ld.ub	r11,r10[0x3]
80004a20:	a1 7b       	lsl	r11,0x1
80004a22:	4f ba       	lddpc	r10,80004c0c <fat_cluster_val+0x224>
80004a24:	b4 0b       	st.h	r10[0x0],r11
80004a26:	c1 58       	rjmp	80004a50 <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004a28:	30 19       	mov	r9,1
80004a2a:	f2 08 18 00 	cp.b	r8,r9
80004a2e:	c0 30       	breq	80004a34 <fat_cluster_val+0x4c>
80004a30:	30 09       	mov	r9,0
80004a32:	c0 f8       	rjmp	80004a50 <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004a34:	4f 59       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004a36:	72 09       	ld.w	r9,r9[0x0]
80004a38:	4f 5a       	lddpc	r10,80004c0c <fat_cluster_val+0x224>
80004a3a:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80004a3e:	12 0b       	add	r11,r9
80004a40:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80004a42:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004a46:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004a4a:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004a4e:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80004a50:	58 05       	cp.w	r5,0
80004a52:	c2 20       	breq	80004a96 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004a54:	4e fa       	lddpc	r10,80004c10 <fat_cluster_val+0x228>
80004a56:	74 0a       	ld.w	r10,r10[0x0]
80004a58:	14 39       	cp.w	r9,r10
80004a5a:	c0 32       	brcc	80004a60 <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004a5c:	4e da       	lddpc	r10,80004c10 <fat_cluster_val+0x228>
80004a5e:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80004a60:	4e da       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a62:	74 0a       	ld.w	r10,r10[0x0]
80004a64:	14 39       	cp.w	r9,r10
80004a66:	e0 88 00 04 	brls	80004a6e <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004a6a:	4e ba       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a6c:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80004a6e:	30 1a       	mov	r10,1
80004a70:	f4 08 18 00 	cp.b	r8,r10
80004a74:	c1 11       	brne	80004a96 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004a76:	4e 68       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004a78:	90 0a       	ld.sh	r10,r8[0x0]
80004a7a:	e0 68 01 ff 	mov	r8,511
80004a7e:	f0 0a 19 00 	cp.h	r10,r8
80004a82:	c0 a1       	brne	80004a96 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004a84:	f2 c8 ff ff 	sub	r8,r9,-1
80004a88:	4e 3a       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a8a:	74 0a       	ld.w	r10,r10[0x0]
80004a8c:	14 38       	cp.w	r8,r10
80004a8e:	e0 88 00 04 	brls	80004a96 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004a92:	4e 1a       	lddpc	r10,80004c14 <fat_cluster_val+0x22c>
80004a94:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004a96:	4e 18       	lddpc	r8,80004c18 <fat_cluster_val+0x230>
80004a98:	70 48       	ld.w	r8,r8[0x10]
80004a9a:	10 09       	add	r9,r8
80004a9c:	4e 08       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004a9e:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004aa0:	30 1c       	mov	r12,1
80004aa2:	f0 1f 00 60 	mcall	80004c20 <fat_cluster_val+0x238>
80004aa6:	e0 80 00 ad 	breq	80004c00 <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80004aaa:	4d 98       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004aac:	90 08       	ld.sh	r8,r8[0x0]
80004aae:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80004ab2:	4d d9       	lddpc	r9,80004c24 <fat_cluster_val+0x23c>
80004ab4:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80004ab6:	0c 97       	mov	r7,r6
80004ab8:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80004aba:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80004abc:	ec c4 ff fe 	sub	r4,r6,-2
80004ac0:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80004ac2:	ec c3 ff fd 	sub	r3,r6,-3
80004ac6:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80004ac8:	4c f9       	lddpc	r9,80004c04 <fat_cluster_val+0x21c>
80004aca:	13 8a       	ld.ub	r10,r9[0x0]
80004acc:	30 19       	mov	r9,1
80004ace:	f2 0a 18 00 	cp.b	r10,r9
80004ad2:	c1 11       	brne	80004af4 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ad4:	e0 69 01 ff 	mov	r9,511
80004ad8:	f2 08 19 00 	cp.h	r8,r9
80004adc:	c0 c1       	brne	80004af4 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80004ade:	4d 08       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004ae0:	70 09       	ld.w	r9,r8[0x0]
80004ae2:	2f f9       	sub	r9,-1
80004ae4:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004ae6:	30 1c       	mov	r12,1
80004ae8:	f0 1f 00 4e 	mcall	80004c20 <fat_cluster_val+0x238>
80004aec:	e0 80 00 8a 	breq	80004c00 <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80004af0:	4c d8       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004af2:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004af4:	58 05       	cp.w	r5,0
80004af6:	c3 11       	brne	80004b58 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004af8:	4c 48       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004afa:	f0 c9 ff fc 	sub	r9,r8,-4
80004afe:	f0 cc ff f9 	sub	r12,r8,-7
80004b02:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004b04:	2f a8       	sub	r8,-6
80004b06:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004b08:	4b fa       	lddpc	r10,80004c04 <fat_cluster_val+0x21c>
80004b0a:	15 8a       	ld.ub	r10,r10[0x0]
80004b0c:	30 3b       	mov	r11,3
80004b0e:	f6 0a 18 00 	cp.b	r10,r11
80004b12:	c0 61       	brne	80004b1e <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004b14:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004b16:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004b1a:	b2 80       	st.b	r9[0x0],r0
80004b1c:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004b1e:	30 0b       	mov	r11,0
80004b20:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80004b22:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004b24:	30 19       	mov	r9,1
80004b26:	f2 0a 18 00 	cp.b	r10,r9
80004b2a:	c0 20       	breq	80004b2e <fat_cluster_val+0x146>
80004b2c:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b2e:	4b 79       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004b30:	13 b9       	ld.ub	r9,r9[0x3]
80004b32:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004b36:	c0 c0       	breq	80004b4e <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004b38:	19 8b       	ld.ub	r11,r12[0x0]
80004b3a:	a5 8b       	lsr	r11,0x4
80004b3c:	11 89       	ld.ub	r9,r8[0x0]
80004b3e:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b42:	f6 0a 00 0a 	add	r10,r11,r10
80004b46:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004b48:	a5 89       	lsr	r9,0x4
80004b4a:	b0 89       	st.b	r8[0x0],r9
80004b4c:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80004b4e:	11 89       	ld.ub	r9,r8[0x0]
80004b50:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004b54:	b0 89       	st.b	r8[0x0],r9
80004b56:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004b58:	4a b8       	lddpc	r8,80004c04 <fat_cluster_val+0x21c>
80004b5a:	11 88       	ld.ub	r8,r8[0x0]
80004b5c:	30 19       	mov	r9,1
80004b5e:	f2 08 18 00 	cp.b	r8,r9
80004b62:	c3 a1       	brne	80004bd6 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b64:	4a 98       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b66:	11 b8       	ld.ub	r8,r8[0x3]
80004b68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b6c:	c1 10       	breq	80004b8e <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80004b6e:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80004b72:	4a 68       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b74:	2f c8       	sub	r8,-4
80004b76:	11 b9       	ld.ub	r9,r8[0x3]
80004b78:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b7c:	14 05       	add	r5,r10
80004b7e:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004b80:	a5 89       	lsr	r9,0x4
80004b82:	11 a8       	ld.ub	r8,r8[0x2]
80004b84:	a5 68       	lsl	r8,0x4
80004b86:	f2 08 00 0a 	add	r10,r9,r8
80004b8a:	5c 5a       	castu.b	r10
80004b8c:	c0 c8       	rjmp	80004ba4 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80004b8e:	49 f8       	lddpc	r8,80004c08 <fat_cluster_val+0x220>
80004b90:	2f c8       	sub	r8,-4
80004b92:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004b94:	16 9a       	mov	r10,r11
80004b96:	e2 1a 00 f0 	andl	r10,0xf0,COH
80004b9a:	11 a8       	ld.ub	r8,r8[0x2]
80004b9c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004ba0:	10 0a       	add	r10,r8
80004ba2:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004ba4:	49 a8       	lddpc	r8,80004c0c <fat_cluster_val+0x224>
80004ba6:	90 09       	ld.sh	r9,r8[0x0]
80004ba8:	e0 68 01 ff 	mov	r8,511
80004bac:	f0 09 19 00 	cp.h	r9,r8
80004bb0:	c2 31       	brne	80004bf6 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80004bb2:	49 d8       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004bb4:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80004bb6:	f0 1f 00 1d 	mcall	80004c28 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80004bba:	49 98       	lddpc	r8,80004c1c <fat_cluster_val+0x234>
80004bbc:	70 09       	ld.w	r9,r8[0x0]
80004bbe:	20 19       	sub	r9,1
80004bc0:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80004bc2:	30 1c       	mov	r12,1
80004bc4:	f0 1f 00 17 	mcall	80004c20 <fat_cluster_val+0x238>
80004bc8:	c1 c0       	breq	80004c00 <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80004bca:	49 78       	lddpc	r8,80004c24 <fat_cluster_val+0x23c>
80004bcc:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80004bd0:	f0 1f 00 16 	mcall	80004c28 <fat_cluster_val+0x240>
80004bd4:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004bd6:	48 d9       	lddpc	r9,80004c08 <fat_cluster_val+0x220>
80004bd8:	2f c9       	sub	r9,-4
80004bda:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004bdc:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80004bde:	30 3b       	mov	r11,3
80004be0:	f6 08 18 00 	cp.b	r8,r11
80004be4:	c0 91       	brne	80004bf6 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004be6:	13 98       	ld.ub	r8,r9[0x1]
80004be8:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004bea:	e0 10 ff f0 	andl	r0,0xfff0
80004bee:	13 88       	ld.ub	r8,r9[0x0]
80004bf0:	f0 00 00 00 	add	r0,r8,r0
80004bf4:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004bf6:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004bf8:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004bfa:	f0 1f 00 0c 	mcall	80004c28 <fat_cluster_val+0x240>
80004bfe:	da 3a       	popm	r0-r7,pc,r12=1
80004c00:	d8 3a       	popm	r0-r7,pc,r12=0
80004c02:	00 00       	add	r0,r0
80004c04:	00 00       	add	r0,r0
80004c06:	0c 18       	sub	r8,r6
80004c08:	00 00       	add	r0,r0
80004c0a:	0c 6c       	and	r12,r6
80004c0c:	00 00       	add	r0,r0
80004c0e:	09 9c       	ld.ub	r12,r4[0x1]
80004c10:	00 00       	add	r0,r0
80004c12:	0c 00       	add	r0,r6
80004c14:	00 00       	add	r0,r0
80004c16:	09 c8       	ld.ub	r8,r4[0x4]
80004c18:	00 00       	add	r0,r0
80004c1a:	0b cc       	ld.ub	r12,r5[0x4]
80004c1c:	00 00       	add	r0,r0
80004c1e:	09 88       	ld.ub	r8,r4[0x0]
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	48 d4       	lddpc	r4,80004c54 <fat_cluster_list+0x28>
80004c24:	00 00       	add	r0,r0
80004c26:	09 cc       	ld.ub	r12,r4[0x4]
80004c28:	80 00       	ld.sh	r0,r0[0x0]
80004c2a:	46 a4       	lddsp	r4,sp[0x1a8]

80004c2c <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80004c2c:	d4 31       	pushm	r0-r7,lr
80004c2e:	20 2d       	sub	sp,8
80004c30:	18 93       	mov	r3,r12
80004c32:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004c34:	30 89       	mov	r9,8
80004c36:	fe f8 02 8e 	ld.w	r8,pc[654]
80004c3a:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004c3c:	30 38       	mov	r8,3
80004c3e:	f0 0c 18 00 	cp.b	r12,r8
80004c42:	5f 0a       	sreq	r10
80004c44:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004c46:	fe f9 02 82 	ld.w	r9,pc[642]
80004c4a:	13 89       	ld.ub	r9,r9[0x0]
80004c4c:	f0 09 18 00 	cp.b	r9,r8
80004c50:	5f 08       	sreq	r8
80004c52:	f5 e8 00 08 	and	r8,r10,r8
80004c56:	c0 60       	breq	80004c62 <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004c58:	3f fc       	mov	r12,-1
80004c5a:	f0 1f 00 9d 	mcall	80004ecc <fat_cluster_list+0x2a0>
80004c5e:	e0 80 01 2f 	breq	80004ebc <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004c62:	fe f8 02 6e 	ld.w	r8,pc[622]
80004c66:	70 08       	ld.w	r8,r8[0x0]
80004c68:	58 08       	cp.w	r8,0
80004c6a:	c3 b1       	brne	80004ce0 <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004c6c:	40 09       	lddsp	r9,sp[0x0]
80004c6e:	58 09       	cp.w	r9,0
80004c70:	e0 81 01 26 	brne	80004ebc <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004c74:	fe f8 02 54 	ld.w	r8,pc[596]
80004c78:	11 88       	ld.ub	r8,r8[0x0]
80004c7a:	f0 ca 00 01 	sub	r10,r8,1
80004c7e:	30 19       	mov	r9,1
80004c80:	f2 0a 18 00 	cp.b	r10,r9
80004c84:	e0 8b 00 23 	brhi	80004cca <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004c88:	fe f8 02 48 	ld.w	r8,pc[584]
80004c8c:	70 18       	ld.w	r8,r8[0x4]
80004c8e:	fe f9 02 46 	ld.w	r9,pc[582]
80004c92:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004c96:	12 38       	cp.w	r8,r9
80004c98:	c1 32       	brcc	80004cbe <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004c9a:	fe f9 02 36 	ld.w	r9,pc[566]
80004c9e:	fe fa 02 36 	ld.w	r10,pc[566]
80004ca2:	74 4b       	ld.w	r11,r10[0x10]
80004ca4:	16 08       	add	r8,r11
80004ca6:	f5 1b 00 18 	ld.uh	r11,r10[24]
80004caa:	16 08       	add	r8,r11
80004cac:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004cae:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004cb2:	72 18       	ld.w	r8,r9[0x4]
80004cb4:	f4 08 01 08 	sub	r8,r10,r8
80004cb8:	93 18       	st.w	r9[0x4],r8
80004cba:	30 1c       	mov	r12,1
            return true;
80004cbc:	c0 19       	rjmp	80004ebe <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80004cbe:	31 a9       	mov	r9,26
80004cc0:	fe f8 02 04 	ld.w	r8,pc[516]
80004cc4:	b0 89       	st.b	r8[0x0],r9
80004cc6:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004cc8:	cf b8       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004cca:	30 39       	mov	r9,3
80004ccc:	f2 08 18 00 	cp.b	r8,r9
80004cd0:	c0 a1       	brne	80004ce4 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004cd2:	fe f8 02 02 	ld.w	r8,pc[514]
80004cd6:	70 69       	ld.w	r9,r8[0x18]
80004cd8:	fe f8 02 00 	ld.w	r8,pc[512]
80004cdc:	91 09       	st.w	r8[0x0],r9
80004cde:	c0 38       	rjmp	80004ce4 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004ce0:	4f e9       	lddpc	r9,80004ed8 <fat_cluster_list+0x2ac>
80004ce2:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004ce4:	30 38       	mov	r8,3
80004ce6:	f0 03 18 00 	cp.b	r3,r8
80004cea:	c0 70       	breq	80004cf8 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004cec:	0e 9c       	mov	r12,r7
80004cee:	f0 1f 00 7c 	mcall	80004edc <fat_cluster_list+0x2b0>
80004cf2:	c0 70       	breq	80004d00 <fat_cluster_list+0xd4>
80004cf4:	30 1c       	mov	r12,1
80004cf6:	ce 48       	rjmp	80004ebe <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004cf8:	f0 1f 00 7a 	mcall	80004ee0 <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004cfc:	f0 1f 00 7a 	mcall	80004ee4 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80004d00:	4f 40       	lddpc	r0,80004ed0 <fat_cluster_list+0x2a4>
80004d02:	3f f8       	mov	r8,-1
80004d04:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d06:	00 96       	mov	r6,r0
80004d08:	4f 35       	lddpc	r5,80004ed4 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d0a:	4f 47       	lddpc	r7,80004ed8 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d0c:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d0e:	e0 c8 ff f9 	sub	r8,r0,-7
80004d12:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d14:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d16:	6c 19       	ld.w	r9,r6[0x4]
80004d18:	0b 98       	ld.ub	r8,r5[0x1]
80004d1a:	10 39       	cp.w	r9,r8
80004d1c:	c4 32       	brcc	80004da2 <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d1e:	6a 4a       	ld.w	r10,r5[0x10]
80004d20:	14 09       	add	r9,r10
80004d22:	6a 5a       	ld.w	r10,r5[0x14]
80004d24:	14 09       	add	r9,r10
80004d26:	6e 0a       	ld.w	r10,r7[0x0]
80004d28:	20 2a       	sub	r10,2
80004d2a:	f4 08 02 48 	mul	r8,r10,r8
80004d2e:	f2 08 00 08 	add	r8,r9,r8
80004d32:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d34:	e2 03 18 00 	cp.b	r3,r1
80004d38:	c0 d1       	brne	80004d52 <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004d3a:	4e 67       	lddpc	r7,80004ed0 <fat_cluster_list+0x2a4>
80004d3c:	4e 68       	lddpc	r8,80004ed4 <fat_cluster_list+0x2a8>
80004d3e:	11 99       	ld.ub	r9,r8[0x1]
80004d40:	6e 18       	ld.w	r8,r7[0x4]
80004d42:	f2 08 01 08 	sub	r8,r9,r8
80004d46:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004d48:	f0 1f 00 68 	mcall	80004ee8 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004d4c:	30 1c       	mov	r12,1
80004d4e:	8f 1c       	st.w	r7[0x4],r12
            return true;
80004d50:	cb 78       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d52:	0b 99       	ld.ub	r9,r5[0x1]
80004d54:	40 1a       	lddsp	r10,sp[0x4]
80004d56:	15 88       	ld.ub	r8,r10[0x0]
80004d58:	f2 08 01 08 	sub	r8,r9,r8
80004d5c:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d5e:	e4 03 18 00 	cp.b	r3,r2
80004d62:	c2 01       	brne	80004da2 <fat_cluster_list+0x176>
80004d64:	4d 99       	lddpc	r9,80004ec8 <fat_cluster_list+0x29c>
80004d66:	13 88       	ld.ub	r8,r9[0x0]
80004d68:	e4 08 18 00 	cp.b	r8,r2
80004d6c:	c1 b0       	breq	80004da2 <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004d6e:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004d70:	30 0c       	mov	r12,0
80004d72:	f0 1f 00 5f 	mcall	80004eec <fat_cluster_list+0x2c0>
80004d76:	e0 80 00 a3 	breq	80004ebc <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004d7a:	6e 09       	ld.w	r9,r7[0x0]
80004d7c:	f2 c8 ff ff 	sub	r8,r9,-1
80004d80:	8f 08       	st.w	r7[0x0],r8
80004d82:	6e 1a       	ld.w	r10,r7[0x4]
80004d84:	14 38       	cp.w	r8,r10
80004d86:	c0 a0       	breq	80004d9a <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004d88:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004d8a:	08 19       	sub	r9,r4
80004d8c:	0b 98       	ld.ub	r8,r5[0x1]
80004d8e:	b1 39       	mul	r9,r8
80004d90:	6c 18       	ld.w	r8,r6[0x4]
80004d92:	f2 08 00 08 	add	r8,r9,r8
80004d96:	8d 18       	st.w	r6[0x4],r8
                  break;
80004d98:	c0 58       	rjmp	80004da2 <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80004d9a:	f0 1f 00 56 	mcall	80004ef0 <fat_cluster_list+0x2c4>
80004d9e:	ce e1       	brne	80004d7a <fat_cluster_list+0x14e>
80004da0:	c8 e8       	rjmp	80004ebc <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004da2:	30 0c       	mov	r12,0
80004da4:	f0 1f 00 52 	mcall	80004eec <fat_cluster_list+0x2c0>
80004da8:	e0 80 00 8a 	breq	80004ebc <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004dac:	f0 1f 00 52 	mcall	80004ef4 <fat_cluster_list+0x2c8>
80004db0:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80004db2:	e4 0c 18 00 	cp.b	r12,r2
80004db6:	e0 80 00 83 	breq	80004ebc <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004dba:	01 89       	ld.ub	r9,r0[0x0]
80004dbc:	3f f8       	mov	r8,-1
80004dbe:	f0 09 18 00 	cp.b	r9,r8
80004dc2:	c4 61       	brne	80004e4e <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004dc4:	e2 0c 18 00 	cp.b	r12,r1
80004dc8:	c2 b1       	brne	80004e1e <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004dca:	4c 28       	lddpc	r8,80004ed0 <fat_cluster_list+0x2a4>
80004dcc:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004dce:	4c b9       	lddpc	r9,80004ef8 <fat_cluster_list+0x2cc>
80004dd0:	13 89       	ld.ub	r9,r9[0x0]
80004dd2:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004dd6:	4c aa       	lddpc	r10,80004efc <fat_cluster_list+0x2d0>
80004dd8:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004ddc:	72 2a       	ld.w	r10,r9[0x8]
80004dde:	0e 1a       	sub	r10,r7
80004de0:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004de2:	4b d9       	lddpc	r9,80004ed4 <fat_cluster_list+0x2a8>
80004de4:	72 5b       	ld.w	r11,r9[0x14]
80004de6:	72 4a       	ld.w	r10,r9[0x10]
80004de8:	14 0b       	add	r11,r10
80004dea:	13 99       	ld.ub	r9,r9[0x1]
80004dec:	4b ba       	lddpc	r10,80004ed8 <fat_cluster_list+0x2ac>
80004dee:	74 0a       	ld.w	r10,r10[0x0]
80004df0:	20 2a       	sub	r10,2
80004df2:	f2 0a 02 4a 	mul	r10,r9,r10
80004df6:	f6 0a 00 0a 	add	r10,r11,r10
80004dfa:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004dfc:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80004dfe:	30 38       	mov	r8,3
80004e00:	f0 03 18 00 	cp.b	r3,r8
80004e04:	c0 30       	breq	80004e0a <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004e06:	f0 1f 00 39 	mcall	80004ee8 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004e0a:	4b 28       	lddpc	r8,80004ed0 <fat_cluster_list+0x2a4>
80004e0c:	4b 39       	lddpc	r9,80004ed8 <fat_cluster_list+0x2ac>
80004e0e:	72 09       	ld.w	r9,r9[0x0]
80004e10:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80004e12:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004e14:	31 a9       	mov	r9,26
80004e16:	4a c8       	lddpc	r8,80004ec4 <fat_cluster_list+0x298>
80004e18:	b0 89       	st.b	r8[0x0],r9
80004e1a:	30 0c       	mov	r12,0
            return false;
80004e1c:	c5 18       	rjmp	80004ebe <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e1e:	0b 98       	ld.ub	r8,r5[0x1]
80004e20:	6c 19       	ld.w	r9,r6[0x4]
80004e22:	f2 08 01 08 	sub	r8,r9,r8
80004e26:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e28:	40 0a       	lddsp	r10,sp[0x0]
80004e2a:	58 0a       	cp.w	r10,0
80004e2c:	c4 50       	breq	80004eb6 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80004e2e:	58 08       	cp.w	r8,0
80004e30:	c4 31       	brne	80004eb6 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004e32:	6e 18       	ld.w	r8,r7[0x4]
80004e34:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004e36:	e0 68 ff ff 	mov	r8,65535
80004e3a:	ea 18 0f ff 	orh	r8,0xfff
80004e3e:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e40:	30 1c       	mov	r12,1
80004e42:	f0 1f 00 2b 	mcall	80004eec <fat_cluster_list+0x2c0>
80004e46:	c3 b0       	breq	80004ebc <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004e48:	6c 08       	ld.w	r8,r6[0x0]
80004e4a:	8f 18       	st.w	r7[0x4],r8
80004e4c:	c3 58       	rjmp	80004eb6 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004e4e:	e4 03 18 00 	cp.b	r3,r2
80004e52:	c0 a1       	brne	80004e66 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004e54:	6e 09       	ld.w	r9,r7[0x0]
80004e56:	2f f9       	sub	r9,-1
80004e58:	6e 18       	ld.w	r8,r7[0x4]
80004e5a:	10 39       	cp.w	r9,r8
80004e5c:	c1 b0       	breq	80004e92 <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004e5e:	f0 1f 00 23 	mcall	80004ee8 <fat_cluster_list+0x2bc>
80004e62:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004e64:	c2 d8       	rjmp	80004ebe <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e66:	40 09       	lddsp	r9,sp[0x0]
80004e68:	58 09       	cp.w	r9,0
80004e6a:	c1 40       	breq	80004e92 <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004e6c:	6e 18       	ld.w	r8,r7[0x4]
80004e6e:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80004e70:	30 08       	mov	r8,0
80004e72:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004e74:	0b 98       	ld.ub	r8,r5[0x1]
80004e76:	6c 19       	ld.w	r9,r6[0x4]
80004e78:	10 39       	cp.w	r9,r8
80004e7a:	c0 62       	brcc	80004e86 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004e7c:	e0 68 ff ff 	mov	r8,65535
80004e80:	ea 18 0f ff 	orh	r8,0xfff
80004e84:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e86:	30 1c       	mov	r12,1
80004e88:	f0 1f 00 19 	mcall	80004eec <fat_cluster_list+0x2c0>
80004e8c:	c1 80       	breq	80004ebc <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80004e8e:	6c 08       	ld.w	r8,r6[0x0]
80004e90:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80004e92:	e2 04 18 00 	cp.b	r4,r1
80004e96:	c0 b1       	brne	80004eac <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004e98:	40 0a       	lddsp	r10,sp[0x0]
80004e9a:	58 0a       	cp.w	r10,0
80004e9c:	c0 40       	breq	80004ea4 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80004e9e:	f0 1f 00 19 	mcall	80004f00 <fat_cluster_list+0x2d4>
80004ea2:	c0 e8       	rjmp	80004ebe <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80004ea4:	f0 1f 00 11 	mcall	80004ee8 <fat_cluster_list+0x2bc>
80004ea8:	30 1c       	mov	r12,1
            return true; // End of segment
80004eaa:	c0 a8       	rjmp	80004ebe <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004eac:	0b 99       	ld.ub	r9,r5[0x1]
80004eae:	6c 18       	ld.w	r8,r6[0x4]
80004eb0:	f2 08 00 08 	add	r8,r9,r8
80004eb4:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004eb6:	6e 18       	ld.w	r8,r7[0x4]
80004eb8:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004eba:	c2 eb       	rjmp	80004d16 <fat_cluster_list+0xea>
80004ebc:	30 0c       	mov	r12,0
}
80004ebe:	2f ed       	sub	sp,-8
80004ec0:	d8 32       	popm	r0-r7,pc
80004ec2:	00 00       	add	r0,r0
80004ec4:	00 00       	add	r0,r0
80004ec6:	0c 1c       	sub	r12,r6
80004ec8:	00 00       	add	r0,r0
80004eca:	0c 18       	sub	r8,r6
80004ecc:	80 00       	ld.sh	r0,r0[0x0]
80004ece:	57 00       	stdsp	sp[0x1c0],r0
80004ed0:	00 00       	add	r0,r0
80004ed2:	0c 74       	tst	r4,r6
80004ed4:	00 00       	add	r0,r0
80004ed6:	0b cc       	ld.ub	r12,r5[0x4]
80004ed8:	00 00       	add	r0,r0
80004eda:	0c 6c       	and	r12,r6
80004edc:	80 00       	ld.sh	r0,r0[0x0]
80004ede:	41 94       	lddsp	r4,sp[0x64]
80004ee0:	80 00       	ld.sh	r0,r0[0x0]
80004ee2:	40 6c       	lddsp	r12,sp[0x18]
80004ee4:	80 00       	ld.sh	r0,r0[0x0]
80004ee6:	53 5c       	stdsp	sp[0xd4],r12
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	41 3c       	lddsp	r12,sp[0x4c]
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	49 e8       	lddpc	r8,80004f64 <fat_read_dir+0x60>
80004ef0:	80 00       	ld.sh	r0,r0[0x0]
80004ef2:	49 54       	lddpc	r4,80004f44 <fat_read_dir+0x40>
80004ef4:	80 00       	ld.sh	r0,r0[0x0]
80004ef6:	40 0c       	lddsp	r12,sp[0x0]
80004ef8:	00 00       	add	r0,r0
80004efa:	0c 1e       	sub	lr,r6
80004efc:	00 00       	add	r0,r0
80004efe:	09 a0       	ld.ub	r0,r4[0x2]
80004f00:	80 00       	ld.sh	r0,r0[0x0]
80004f02:	53 e8       	stdsp	sp[0xf8],r8

80004f04 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004f04:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f08:	49 98       	lddpc	r8,80004f6c <fat_read_dir+0x68>
80004f0a:	90 97       	ld.uh	r7,r8[0x2]
80004f0c:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f0e:	49 98       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f10:	11 89       	ld.ub	r9,r8[0x0]
80004f12:	49 98       	lddpc	r8,80004f74 <fat_read_dir+0x70>
80004f14:	11 88       	ld.ub	r8,r8[0x0]
80004f16:	f0 09 18 00 	cp.b	r9,r8
80004f1a:	c0 d1       	brne	80004f34 <fat_read_dir+0x30>
80004f1c:	49 58       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f1e:	70 39       	ld.w	r9,r8[0xc]
80004f20:	49 58       	lddpc	r8,80004f74 <fat_read_dir+0x70>
80004f22:	70 88       	ld.w	r8,r8[0x20]
80004f24:	10 39       	cp.w	r9,r8
80004f26:	c0 71       	brne	80004f34 <fat_read_dir+0x30>
80004f28:	49 28       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f2a:	70 48       	ld.w	r8,r8[0x10]
80004f2c:	0e 38       	cp.w	r8,r7
80004f2e:	c0 31       	brne	80004f34 <fat_read_dir+0x30>
80004f30:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004f34:	49 18       	lddpc	r8,80004f78 <fat_read_dir+0x74>
80004f36:	49 09       	lddpc	r9,80004f74 <fat_read_dir+0x70>
80004f38:	72 89       	ld.w	r9,r9[0x20]
80004f3a:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004f3c:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004f3e:	30 0b       	mov	r11,0
80004f40:	30 2c       	mov	r12,2
80004f42:	f0 1f 00 0f 	mcall	80004f7c <fat_read_dir+0x78>
80004f46:	c1 00       	breq	80004f66 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004f48:	48 c8       	lddpc	r8,80004f78 <fat_read_dir+0x74>
80004f4a:	70 09       	ld.w	r9,r8[0x0]
80004f4c:	48 d8       	lddpc	r8,80004f80 <fat_read_dir+0x7c>
80004f4e:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004f50:	30 1c       	mov	r12,1
80004f52:	f0 1f 00 0d 	mcall	80004f84 <fat_read_dir+0x80>
80004f56:	c0 80       	breq	80004f66 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004f58:	48 68       	lddpc	r8,80004f70 <fat_read_dir+0x6c>
80004f5a:	48 79       	lddpc	r9,80004f74 <fat_read_dir+0x70>
80004f5c:	72 89       	ld.w	r9,r9[0x20]
80004f5e:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004f60:	91 47       	st.w	r8[0x10],r7
80004f62:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004f66:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004f6a:	00 00       	add	r0,r0
80004f6c:	00 00       	add	r0,r0
80004f6e:	0c 18       	sub	r8,r6
80004f70:	00 00       	add	r0,r0
80004f72:	0c 54       	eor	r4,r6
80004f74:	00 00       	add	r0,r0
80004f76:	0b cc       	ld.ub	r12,r5[0x4]
80004f78:	00 00       	add	r0,r0
80004f7a:	0c 74       	tst	r4,r6
80004f7c:	80 00       	ld.sh	r0,r0[0x0]
80004f7e:	4c 2c       	lddpc	r12,80005084 <fat_write_file+0x20>
80004f80:	00 00       	add	r0,r0
80004f82:	09 88       	ld.ub	r8,r4[0x0]
80004f84:	80 00       	ld.sh	r0,r0[0x0]
80004f86:	48 d4       	lddpc	r4,80004fb8 <fat_read_file+0x30>

80004f88 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004f88:	eb cd 40 c0 	pushm	r6-r7,lr
80004f8c:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004f8e:	4a e8       	lddpc	r8,80005044 <fat_read_file+0xbc>
80004f90:	70 38       	ld.w	r8,r8[0xc]
80004f92:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80004f96:	30 29       	mov	r9,2
80004f98:	f2 0c 18 00 	cp.b	r12,r9
80004f9c:	c1 31       	brne	80004fc2 <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f9e:	4a b8       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fa0:	11 89       	ld.ub	r9,r8[0x0]
80004fa2:	4a b8       	lddpc	r8,8000504c <fat_read_file+0xc4>
80004fa4:	11 88       	ld.ub	r8,r8[0x0]
80004fa6:	f0 09 18 00 	cp.b	r9,r8
80004faa:	c1 91       	brne	80004fdc <fat_read_file+0x54>
80004fac:	4a 78       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fae:	70 39       	ld.w	r9,r8[0xc]
80004fb0:	4a 58       	lddpc	r8,80005044 <fat_read_file+0xbc>
80004fb2:	70 18       	ld.w	r8,r8[0x4]
80004fb4:	10 39       	cp.w	r9,r8
80004fb6:	c1 31       	brne	80004fdc <fat_read_file+0x54>
80004fb8:	4a 48       	lddpc	r8,80005048 <fat_read_file+0xc0>
80004fba:	70 48       	ld.w	r8,r8[0x10]
80004fbc:	0c 38       	cp.w	r8,r6
80004fbe:	c0 f1       	brne	80004fdc <fat_read_file+0x54>
80004fc0:	c3 38       	rjmp	80005026 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004fc2:	30 39       	mov	r9,3
80004fc4:	f2 0c 18 00 	cp.b	r12,r9
80004fc8:	c3 31       	brne	8000502e <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80004fca:	49 f9       	lddpc	r9,80005044 <fat_read_file+0xbc>
80004fcc:	72 19       	ld.w	r9,r9[0x4]
80004fce:	58 09       	cp.w	r9,0
80004fd0:	c2 b0       	breq	80005026 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80004fd2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004fd6:	c2 c0       	breq	8000502e <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004fd8:	2f f6       	sub	r6,-1
80004fda:	c2 a8       	rjmp	8000502e <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004fdc:	49 d8       	lddpc	r8,80005050 <fat_read_file+0xc8>
80004fde:	49 a9       	lddpc	r9,80005044 <fat_read_file+0xbc>
80004fe0:	72 19       	ld.w	r9,r9[0x4]
80004fe2:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004fe4:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004fe6:	30 1b       	mov	r11,1
80004fe8:	16 9c       	mov	r12,r11
80004fea:	f0 1f 00 1b 	mcall	80005054 <fat_read_file+0xcc>
80004fee:	c1 e0       	breq	8000502a <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80004ff0:	49 88       	lddpc	r8,80005050 <fat_read_file+0xc8>
80004ff2:	70 09       	ld.w	r9,r8[0x0]
80004ff4:	49 98       	lddpc	r8,80005058 <fat_read_file+0xd0>
80004ff6:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80004ff8:	30 1c       	mov	r12,1
80004ffa:	f0 1f 00 19 	mcall	8000505c <fat_read_file+0xd4>
80004ffe:	c1 60       	breq	8000502a <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80005000:	49 28       	lddpc	r8,80005048 <fat_read_file+0xc0>
80005002:	49 19       	lddpc	r9,80005044 <fat_read_file+0xbc>
80005004:	72 19       	ld.w	r9,r9[0x4]
80005006:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005008:	91 46       	st.w	r8[0x10],r6
8000500a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000500e:	30 38       	mov	r8,3
80005010:	f0 07 18 00 	cp.b	r7,r8
80005014:	c0 b1       	brne	8000502a <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80005016:	49 38       	lddpc	r8,80005060 <fat_read_file+0xd8>
80005018:	11 89       	ld.ub	r9,r8[0x0]
8000501a:	31 a8       	mov	r8,26
8000501c:	f0 09 18 00 	cp.b	r9,r8
80005020:	5f 0c       	sreq	r12
80005022:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005026:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8000502a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000502e:	48 98       	lddpc	r8,80005050 <fat_read_file+0xc8>
80005030:	48 59       	lddpc	r9,80005044 <fat_read_file+0xbc>
80005032:	72 19       	ld.w	r9,r9[0x4]
80005034:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005036:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005038:	30 1b       	mov	r11,1
8000503a:	0e 9c       	mov	r12,r7
8000503c:	f0 1f 00 06 	mcall	80005054 <fat_read_file+0xcc>
80005040:	ce 70       	breq	8000500e <fat_read_file+0x86>
80005042:	cf 2b       	rjmp	80005026 <fat_read_file+0x9e>
80005044:	00 00       	add	r0,r0
80005046:	09 8c       	ld.ub	r12,r4[0x0]
80005048:	00 00       	add	r0,r0
8000504a:	0c 54       	eor	r4,r6
8000504c:	00 00       	add	r0,r0
8000504e:	0b cc       	ld.ub	r12,r5[0x4]
80005050:	00 00       	add	r0,r0
80005052:	0c 74       	tst	r4,r6
80005054:	80 00       	ld.sh	r0,r0[0x0]
80005056:	4c 2c       	lddpc	r12,8000515c <fat_write_file+0xf8>
80005058:	00 00       	add	r0,r0
8000505a:	09 88       	ld.ub	r8,r4[0x0]
8000505c:	80 00       	ld.sh	r0,r0[0x0]
8000505e:	48 d4       	lddpc	r4,80005090 <fat_write_file+0x2c>
80005060:	00 00       	add	r0,r0
80005062:	0c 1c       	sub	r12,r6

80005064 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80005064:	eb cd 40 c0 	pushm	r6-r7,lr
80005068:	18 97       	mov	r7,r12
8000506a:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
8000506c:	4b 68       	lddpc	r8,80005144 <fat_write_file+0xe0>
8000506e:	70 18       	ld.w	r8,r8[0x4]
80005070:	58 08       	cp.w	r8,0
80005072:	c0 a1       	brne	80005086 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
80005074:	4b 58       	lddpc	r8,80005148 <fat_write_file+0xe4>
80005076:	3f f9       	mov	r9,-1
80005078:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
8000507a:	30 09       	mov	r9,0
8000507c:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
8000507e:	30 1c       	mov	r12,1
80005080:	f0 1f 00 33 	mcall	8000514c <fat_write_file+0xe8>
80005084:	c1 c8       	rjmp	800050bc <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
80005086:	f0 1f 00 33 	mcall	80005150 <fat_write_file+0xec>
8000508a:	c0 30       	breq	80005090 <fat_write_file+0x2c>
8000508c:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
80005090:	4b 18       	lddpc	r8,80005154 <fat_write_file+0xf0>
80005092:	11 89       	ld.ub	r9,r8[0x0]
80005094:	31 a8       	mov	r8,26
80005096:	f0 09 18 00 	cp.b	r9,r8
8000509a:	c5 21       	brne	8000513e <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
8000509c:	4a f8       	lddpc	r8,80005158 <fat_write_file+0xf4>
8000509e:	11 88       	ld.ub	r8,r8[0x0]
800050a0:	f0 08 00 28 	add	r8,r8,r8<<0x2
800050a4:	4a e9       	lddpc	r9,8000515c <fat_write_file+0xf8>
800050a6:	f2 08 00 28 	add	r8,r9,r8<<0x2
800050aa:	3f f9       	mov	r9,-1
800050ac:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
800050ae:	2f 88       	sub	r8,-8
800050b0:	4a c9       	lddpc	r9,80005160 <fat_write_file+0xfc>
800050b2:	13 9a       	ld.ub	r10,r9[0x1]
800050b4:	70 09       	ld.w	r9,r8[0x0]
800050b6:	f4 09 00 09 	add	r9,r10,r9
800050ba:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
800050bc:	30 18       	mov	r8,1
800050be:	f0 07 18 00 	cp.b	r7,r8
800050c2:	c0 41       	brne	800050ca <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
800050c4:	4a 18       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050c6:	91 16       	st.w	r8[0x4],r6
800050c8:	c0 48       	rjmp	800050d0 <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
800050ca:	30 19       	mov	r9,1
800050cc:	49 f8       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050ce:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
800050d0:	f0 1f 00 25 	mcall	80005164 <fat_write_file+0x100>
800050d4:	c3 50       	breq	8000513e <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
800050d6:	49 c8       	lddpc	r8,80005144 <fat_write_file+0xe0>
800050d8:	70 18       	ld.w	r8,r8[0x4]
800050da:	58 08       	cp.w	r8,0
800050dc:	c0 d1       	brne	800050f6 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
800050de:	49 b8       	lddpc	r8,80005148 <fat_write_file+0xe4>
800050e0:	70 08       	ld.w	r8,r8[0x0]
800050e2:	49 e9       	lddpc	r9,80005158 <fat_write_file+0xf4>
800050e4:	13 89       	ld.ub	r9,r9[0x0]
800050e6:	f2 09 00 29 	add	r9,r9,r9<<0x2
800050ea:	2f f9       	sub	r9,-1
800050ec:	49 ca       	lddpc	r10,8000515c <fat_write_file+0xf8>
800050ee:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
800050f2:	49 59       	lddpc	r9,80005144 <fat_write_file+0xe0>
800050f4:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
800050f6:	30 18       	mov	r8,1
800050f8:	f0 07 18 00 	cp.b	r7,r8
800050fc:	c0 71       	brne	8000510a <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
800050fe:	49 38       	lddpc	r8,80005148 <fat_write_file+0xe4>
80005100:	70 19       	ld.w	r9,r8[0x4]
80005102:	ec 09 01 09 	sub	r9,r6,r9
80005106:	91 19       	st.w	r8[0x4],r9
80005108:	c0 68       	rjmp	80005114 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
8000510a:	49 08       	lddpc	r8,80005148 <fat_write_file+0xe4>
8000510c:	70 19       	ld.w	r9,r8[0x4]
8000510e:	f2 09 11 01 	rsub	r9,r9,1
80005112:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005114:	48 d9       	lddpc	r9,80005148 <fat_write_file+0xe4>
80005116:	49 38       	lddpc	r8,80005160 <fat_write_file+0xfc>
80005118:	70 5b       	ld.w	r11,r8[0x14]
8000511a:	70 4a       	ld.w	r10,r8[0x10]
8000511c:	f6 0a 00 0a 	add	r10,r11,r10
80005120:	11 9b       	ld.ub	r11,r8[0x1]
80005122:	72 08       	ld.w	r8,r9[0x0]
80005124:	20 28       	sub	r8,2
80005126:	f6 08 02 48 	mul	r8,r11,r8
8000512a:	f4 08 00 08 	add	r8,r10,r8
8000512e:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80005130:	f0 1f 00 0e 	mcall	80005168 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80005134:	0e 9c       	mov	r12,r7
80005136:	f0 1f 00 07 	mcall	80005150 <fat_write_file+0xec>
8000513a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000513e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005142:	00 00       	add	r0,r0
80005144:	00 00       	add	r0,r0
80005146:	09 8c       	ld.ub	r12,r4[0x0]
80005148:	00 00       	add	r0,r0
8000514a:	0c 74       	tst	r4,r6
8000514c:	80 00       	ld.sh	r0,r0[0x0]
8000514e:	40 94       	lddsp	r4,sp[0x24]
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4f 88       	lddpc	r8,80005330 <fat_translate_char_shortname+0x20>
80005154:	00 00       	add	r0,r0
80005156:	0c 1c       	sub	r12,r6
80005158:	00 00       	add	r0,r0
8000515a:	0c 1e       	sub	lr,r6
8000515c:	00 00       	add	r0,r0
8000515e:	09 a0       	ld.ub	r0,r4[0x2]
80005160:	00 00       	add	r0,r0
80005162:	0b cc       	ld.ub	r12,r5[0x4]
80005164:	80 00       	ld.sh	r0,r0[0x0]
80005166:	57 a0       	stdsp	sp[0x1e8],r0
80005168:	80 00       	ld.sh	r0,r0[0x0]
8000516a:	41 3c       	lddsp	r12,sp[0x4c]

8000516c <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
8000516c:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000516e:	4a 28       	lddpc	r8,800051f4 <fat_check_device+0x88>
80005170:	11 89       	ld.ub	r9,r8[0x0]
80005172:	30 08       	mov	r8,0
80005174:	f0 09 18 00 	cp.b	r9,r8
80005178:	c3 c1       	brne	800051f0 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000517a:	4a 08       	lddpc	r8,800051f8 <fat_check_device+0x8c>
8000517c:	11 89       	ld.ub	r9,r8[0x0]
8000517e:	3f f8       	mov	r8,-1
80005180:	f0 09 18 00 	cp.b	r9,r8
80005184:	c0 51       	brne	8000518e <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80005186:	30 19       	mov	r9,1
80005188:	49 d8       	lddpc	r8,800051fc <fat_check_device+0x90>
8000518a:	b0 89       	st.b	r8[0x0],r9
8000518c:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
8000518e:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80005190:	49 a5       	lddpc	r5,800051f8 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005192:	49 c1       	lddpc	r1,80005200 <fat_check_device+0x94>
80005194:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80005196:	49 c0       	lddpc	r0,80005204 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005198:	49 c4       	lddpc	r4,80005208 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
8000519a:	49 d3       	lddpc	r3,8000520c <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
8000519c:	0b 8c       	ld.ub	r12,r5[0x0]
8000519e:	f0 1f 00 1d 	mcall	80005210 <fat_check_device+0xa4>
800051a2:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
800051a4:	c2 60       	breq	800051f0 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800051a6:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
800051a8:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800051aa:	0b 88       	ld.ub	r8,r5[0x0]
800051ac:	09 89       	ld.ub	r9,r4[0x0]
800051ae:	f0 09 18 00 	cp.b	r9,r8
800051b2:	c0 51       	brne	800051bc <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800051b4:	49 89       	lddpc	r9,80005214 <fat_check_device+0xa8>
800051b6:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800051b8:	49 89       	lddpc	r9,80005218 <fat_check_device+0xac>
800051ba:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800051bc:	07 89       	ld.ub	r9,r3[0x0]
800051be:	f0 09 18 00 	cp.b	r9,r8
800051c2:	c0 31       	brne	800051c8 <fat_check_device+0x5c>
      {
         fat_cache_reset();
800051c4:	f0 1f 00 16 	mcall	8000521c <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
800051c8:	f0 1f 00 16 	mcall	80005220 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
800051cc:	30 18       	mov	r8,1
800051ce:	48 c9       	lddpc	r9,800051fc <fat_check_device+0x90>
800051d0:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
800051d2:	58 37       	cp.w	r7,3
800051d4:	c0 81       	brne	800051e4 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
800051d6:	10 02       	add	r2,r8
800051d8:	5c 52       	castu.b	r2
800051da:	36 48       	mov	r8,100
800051dc:	f0 02 18 00 	cp.b	r2,r8
800051e0:	cd e1       	brne	8000519c <fat_check_device+0x30>
800051e2:	c0 88       	rjmp	800051f2 <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800051e4:	58 27       	cp.w	r7,2
800051e6:	c0 61       	brne	800051f2 <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800051e8:	31 89       	mov	r9,24
800051ea:	48 58       	lddpc	r8,800051fc <fat_check_device+0x90>
800051ec:	b0 89       	st.b	r8[0x0],r9
800051ee:	d8 3a       	popm	r0-r7,pc,r12=0
800051f0:	da 3a       	popm	r0-r7,pc,r12=1
800051f2:	d8 3a       	popm	r0-r7,pc,r12=0
800051f4:	00 00       	add	r0,r0
800051f6:	09 9e       	ld.ub	lr,r4[0x1]
800051f8:	00 00       	add	r0,r0
800051fa:	0b cc       	ld.ub	r12,r5[0x4]
800051fc:	00 00       	add	r0,r0
800051fe:	0c 1c       	sub	r12,r6
80005200:	00 00       	add	r0,r0
80005202:	0c 18       	sub	r8,r6
80005204:	00 00       	add	r0,r0
80005206:	09 8c       	ld.ub	r12,r4[0x0]
80005208:	00 00       	add	r0,r0
8000520a:	0c 20       	rsub	r0,r6
8000520c:	00 00       	add	r0,r0
8000520e:	0c 54       	eor	r4,r6
80005210:	80 00       	ld.sh	r0,r0[0x0]
80005212:	6d 88       	ld.w	r8,r6[0x60]
80005214:	00 00       	add	r0,r0
80005216:	0c 14       	sub	r4,r6
80005218:	00 00       	add	r0,r0
8000521a:	0c 04       	add	r4,r6
8000521c:	80 00       	ld.sh	r0,r0[0x0]
8000521e:	46 8c       	lddsp	r12,sp[0x1a0]
80005220:	80 00       	ld.sh	r0,r0[0x0]
80005222:	40 6c       	lddsp	r12,sp[0x18]

80005224 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80005224:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005226:	f0 1f 00 0b 	mcall	80005250 <fat_check_noopen+0x2c>
8000522a:	c1 10       	breq	8000524c <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
8000522c:	48 a8       	lddpc	r8,80005254 <fat_check_noopen+0x30>
8000522e:	11 89       	ld.ub	r9,r8[0x0]
80005230:	30 08       	mov	r8,0
80005232:	f0 09 18 00 	cp.b	r9,r8
80005236:	c0 b0       	breq	8000524c <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005238:	48 88       	lddpc	r8,80005258 <fat_check_noopen+0x34>
8000523a:	11 89       	ld.ub	r9,r8[0x0]
8000523c:	30 08       	mov	r8,0
8000523e:	f0 09 18 00 	cp.b	r9,r8
80005242:	c0 50       	breq	8000524c <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005244:	30 59       	mov	r9,5
80005246:	48 68       	lddpc	r8,8000525c <fat_check_noopen+0x38>
80005248:	b0 89       	st.b	r8[0x0],r9
8000524a:	d8 0a       	popm	pc,r12=0
      return false;
8000524c:	da 0a       	popm	pc,r12=1
8000524e:	00 00       	add	r0,r0
80005250:	80 00       	ld.sh	r0,r0[0x0]
80005252:	51 6c       	stdsp	sp[0x58],r12
80005254:	00 00       	add	r0,r0
80005256:	0c 18       	sub	r8,r6
80005258:	00 00       	add	r0,r0
8000525a:	09 8c       	ld.ub	r12,r4[0x0]
8000525c:	00 00       	add	r0,r0
8000525e:	0c 1c       	sub	r12,r6

80005260 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80005260:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005262:	f0 1f 00 0a 	mcall	80005288 <fat_check_mount+0x28>
80005266:	c0 f0       	breq	80005284 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005268:	48 98       	lddpc	r8,8000528c <fat_check_mount+0x2c>
8000526a:	11 89       	ld.ub	r9,r8[0x0]
8000526c:	30 08       	mov	r8,0
8000526e:	f0 09 18 00 	cp.b	r9,r8
80005272:	c0 81       	brne	80005282 <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80005274:	f0 1f 00 07 	mcall	80005290 <fat_check_mount+0x30>
80005278:	c0 51       	brne	80005282 <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
8000527a:	30 e9       	mov	r9,14
8000527c:	48 68       	lddpc	r8,80005294 <fat_check_mount+0x34>
8000527e:	b0 89       	st.b	r8[0x0],r9
         return false;
80005280:	d8 02       	popm	pc
80005282:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80005284:	d8 02       	popm	pc
80005286:	00 00       	add	r0,r0
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	51 6c       	stdsp	sp[0x58],r12
8000528c:	00 00       	add	r0,r0
8000528e:	0c 18       	sub	r8,r6
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	5d 38       	musfr	r8
80005294:	00 00       	add	r0,r0
80005296:	0c 1c       	sub	r12,r6

80005298 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80005298:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000529a:	f0 1f 00 04 	mcall	800052a8 <fat_check_mount_select+0x10>
8000529e:	c0 30       	breq	800052a4 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
800052a0:	f0 1f 00 03 	mcall	800052ac <fat_check_mount_select+0x14>
}
800052a4:	d8 02       	popm	pc
800052a6:	00 00       	add	r0,r0
800052a8:	80 00       	ld.sh	r0,r0[0x0]
800052aa:	52 60       	stdsp	sp[0x98],r0
800052ac:	80 00       	ld.sh	r0,r0[0x0]
800052ae:	3f d0       	mov	r0,-3

800052b0 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
800052b0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052b2:	f0 1f 00 06 	mcall	800052c8 <fat_check_mount_select_open+0x18>
800052b6:	c0 70       	breq	800052c4 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
800052b8:	f0 1f 00 05 	mcall	800052cc <fat_check_mount_select_open+0x1c>
800052bc:	c0 40       	breq	800052c4 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
800052be:	f0 1f 00 05 	mcall	800052d0 <fat_check_mount_select_open+0x20>
800052c2:	d8 02       	popm	pc
800052c4:	d8 0a       	popm	pc,r12=0
800052c6:	00 00       	add	r0,r0
800052c8:	80 00       	ld.sh	r0,r0[0x0]
800052ca:	52 60       	stdsp	sp[0x98],r0
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	3f d0       	mov	r0,-3
800052d0:	80 00       	ld.sh	r0,r0[0x0]
800052d2:	3f b0       	mov	r0,-5

800052d4 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
800052d4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052d6:	f0 1f 00 06 	mcall	800052ec <fat_check_mount_select_noopen+0x18>
800052da:	c0 70       	breq	800052e8 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
800052dc:	f0 1f 00 05 	mcall	800052f0 <fat_check_mount_select_noopen+0x1c>
800052e0:	c0 40       	breq	800052e8 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
800052e2:	f0 1f 00 05 	mcall	800052f4 <fat_check_mount_select_noopen+0x20>
800052e6:	d8 02       	popm	pc
800052e8:	d8 0a       	popm	pc,r12=0
800052ea:	00 00       	add	r0,r0
800052ec:	80 00       	ld.sh	r0,r0[0x0]
800052ee:	52 60       	stdsp	sp[0x98],r0
800052f0:	80 00       	ld.sh	r0,r0[0x0]
800052f2:	3f d0       	mov	r0,-3
800052f4:	80 00       	ld.sh	r0,r0[0x0]
800052f6:	52 24       	stdsp	sp[0x88],r4

800052f8 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
800052f8:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800052fa:	f0 1f 00 04 	mcall	80005308 <fat_check_mount_noopen+0x10>
800052fe:	c0 30       	breq	80005304 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80005300:	f0 1f 00 03 	mcall	8000530c <fat_check_mount_noopen+0x14>
}
80005304:	d8 02       	popm	pc
80005306:	00 00       	add	r0,r0
80005308:	80 00       	ld.sh	r0,r0[0x0]
8000530a:	52 60       	stdsp	sp[0x98],r0
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	52 24       	stdsp	sp[0x88],r4

80005310 <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80005310:	f8 c9 00 21 	sub	r9,r12,33
80005314:	35 d8       	mov	r8,93
80005316:	f0 09 18 00 	cp.b	r9,r8
8000531a:	e0 8b 00 1d 	brhi	80005354 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000531e:	f8 c9 00 61 	sub	r9,r12,97
80005322:	31 98       	mov	r8,25
80005324:	f0 09 18 00 	cp.b	r9,r8
80005328:	e0 88 00 07 	brls	80005336 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
8000532c:	32 b8       	mov	r8,43
8000532e:	f0 0c 18 00 	cp.b	r12,r8
80005332:	c0 51       	brne	8000533c <fat_translate_char_shortname+0x2c>
80005334:	c1 08       	rjmp	80005354 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80005336:	22 0c       	sub	r12,32
80005338:	5c 5c       	castu.b	r12
8000533a:	5e fc       	retal	r12
8000533c:	48 7a       	lddpc	r10,80005358 <fat_translate_char_shortname+0x48>
8000533e:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
80005342:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005344:	11 89       	ld.ub	r9,r8[0x0]
80005346:	f8 09 18 00 	cp.b	r9,r12
8000534a:	c0 50       	breq	80005354 <fat_translate_char_shortname+0x44>
8000534c:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000534e:	14 38       	cp.w	r8,r10
80005350:	cf a1       	brne	80005344 <fat_translate_char_shortname+0x34>
80005352:	5e fc       	retal	r12
80005354:	5e fd       	retal	0
80005356:	00 00       	add	r0,r0
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	e2 cc 3f f9 	sub	r12,r1,16377

8000535c <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000535c:	3f f9       	mov	r9,-1
8000535e:	48 48       	lddpc	r8,8000536c <fat_clear_info_fat_mod+0x10>
80005360:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80005362:	30 09       	mov	r9,0
80005364:	48 38       	lddpc	r8,80005370 <fat_clear_info_fat_mod+0x14>
80005366:	91 09       	st.w	r8[0x0],r9
}
80005368:	5e fc       	retal	r12
8000536a:	00 00       	add	r0,r0
8000536c:	00 00       	add	r0,r0
8000536e:	0c 00       	add	r0,r6
80005370:	00 00       	add	r0,r0
80005372:	09 c8       	ld.ub	r8,r4[0x4]

80005374 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
80005374:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80005376:	30 0b       	mov	r11,0
80005378:	49 58       	lddpc	r8,800053cc <fat_clear_cluster+0x58>
8000537a:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000537c:	30 2c       	mov	r12,2
8000537e:	f0 1f 00 15 	mcall	800053d0 <fat_clear_cluster+0x5c>
80005382:	c2 30       	breq	800053c8 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80005384:	49 48       	lddpc	r8,800053d4 <fat_clear_cluster+0x60>
80005386:	11 98       	ld.ub	r8,r8[0x1]
80005388:	49 19       	lddpc	r9,800053cc <fat_clear_cluster+0x58>
8000538a:	72 0a       	ld.w	r10,r9[0x0]
8000538c:	20 1a       	sub	r10,1
8000538e:	10 0a       	add	r10,r8
80005390:	49 29       	lddpc	r9,800053d8 <fat_clear_cluster+0x64>
80005392:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
80005394:	58 08       	cp.w	r8,0
80005396:	c1 a0       	breq	800053ca <fat_clear_cluster+0x56>
80005398:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000539a:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
8000539c:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000539e:	48 e5       	lddpc	r5,800053d4 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800053a0:	08 9c       	mov	r12,r4
800053a2:	f0 1f 00 0f 	mcall	800053dc <fat_clear_cluster+0x68>
800053a6:	c1 10       	breq	800053c8 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800053a8:	58 07       	cp.w	r7,0
800053aa:	c0 31       	brne	800053b0 <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800053ac:	f0 1f 00 0d 	mcall	800053e0 <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800053b0:	f0 1f 00 0d 	mcall	800053e4 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
800053b4:	6c 08       	ld.w	r8,r6[0x0]
800053b6:	20 18       	sub	r8,1
800053b8:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800053ba:	2f f7       	sub	r7,-1
800053bc:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800053be:	0b 98       	ld.ub	r8,r5[0x1]
800053c0:	ee 08 18 00 	cp.b	r8,r7
800053c4:	ce e1       	brne	800053a0 <fat_clear_cluster+0x2c>
800053c6:	c0 28       	rjmp	800053ca <fat_clear_cluster+0x56>
800053c8:	d8 2a       	popm	r4-r7,pc,r12=0
800053ca:	da 2a       	popm	r4-r7,pc,r12=1
800053cc:	00 00       	add	r0,r0
800053ce:	0c 74       	tst	r4,r6
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	4c 2c       	lddpc	r12,800054d8 <fat_initialize_dir+0x7c>
800053d4:	00 00       	add	r0,r0
800053d6:	0b cc       	ld.ub	r12,r5[0x4]
800053d8:	00 00       	add	r0,r0
800053da:	09 88       	ld.ub	r8,r4[0x0]
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	48 d4       	lddpc	r4,80005410 <fat_update_fat2+0x28>
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	48 bc       	lddpc	r12,8000540c <fat_update_fat2+0x24>
800053e4:	80 00       	ld.sh	r0,r0[0x0]
800053e6:	46 a4       	lddsp	r4,sp[0x1a8]

800053e8 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
800053e8:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800053ec:	49 68       	lddpc	r8,80005444 <fat_update_fat2+0x5c>
800053ee:	70 08       	ld.w	r8,r8[0x0]
800053f0:	49 69       	lddpc	r9,80005448 <fat_update_fat2+0x60>
800053f2:	72 09       	ld.w	r9,r9[0x0]
800053f4:	12 38       	cp.w	r8,r9
800053f6:	e0 8b 00 25 	brhi	80005440 <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800053fa:	49 55       	lddpc	r5,8000544c <fat_update_fat2+0x64>
800053fc:	49 57       	lddpc	r7,80005450 <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800053fe:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005400:	49 16       	lddpc	r6,80005444 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80005402:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005404:	49 14       	lddpc	r4,80005448 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80005406:	6e 49       	ld.w	r9,r7[0x10]
80005408:	12 08       	add	r8,r9
8000540a:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000540c:	06 9c       	mov	r12,r3
8000540e:	f0 1f 00 12 	mcall	80005454 <fat_update_fat2+0x6c>
80005412:	c1 50       	breq	8000543c <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005414:	6e 19       	ld.w	r9,r7[0x4]
80005416:	6e 48       	ld.w	r8,r7[0x10]
80005418:	f2 08 00 08 	add	r8,r9,r8
8000541c:	6c 09       	ld.w	r9,r6[0x0]
8000541e:	12 08       	add	r8,r9
80005420:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80005422:	04 9c       	mov	r12,r2
80005424:	f0 1f 00 0c 	mcall	80005454 <fat_update_fat2+0x6c>
80005428:	c0 a0       	breq	8000543c <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000542a:	f0 1f 00 0c 	mcall	80005458 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000542e:	6c 08       	ld.w	r8,r6[0x0]
80005430:	2f f8       	sub	r8,-1
80005432:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005434:	68 09       	ld.w	r9,r4[0x0]
80005436:	10 39       	cp.w	r9,r8
80005438:	ce 72       	brcc	80005406 <fat_update_fat2+0x1e>
8000543a:	c0 38       	rjmp	80005440 <fat_update_fat2+0x58>
8000543c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005440:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005444:	00 00       	add	r0,r0
80005446:	0c 00       	add	r0,r6
80005448:	00 00       	add	r0,r0
8000544a:	09 c8       	ld.ub	r8,r4[0x4]
8000544c:	00 00       	add	r0,r0
8000544e:	09 88       	ld.ub	r8,r4[0x0]
80005450:	00 00       	add	r0,r0
80005452:	0b cc       	ld.ub	r12,r5[0x4]
80005454:	80 00       	ld.sh	r0,r0[0x0]
80005456:	48 d4       	lddpc	r4,80005488 <fat_initialize_dir+0x2c>
80005458:	80 00       	ld.sh	r0,r0[0x0]
8000545a:	46 a4       	lddsp	r4,sp[0x1a8]

8000545c <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
8000545c:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000545e:	f0 1f 00 21 	mcall	800054e0 <fat_initialize_dir+0x84>
80005462:	c3 e0       	breq	800054de <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
80005464:	f0 1f 00 20 	mcall	800054e4 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80005468:	4a 0b       	lddpc	r11,800054e8 <fat_initialize_dir+0x8c>
8000546a:	16 98       	mov	r8,r11
8000546c:	32 e9       	mov	r9,46
8000546e:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80005470:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80005474:	32 09       	mov	r9,32
80005476:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80005478:	14 38       	cp.w	r8,r10
8000547a:	cf e1       	brne	80005476 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000547c:	49 b8       	lddpc	r8,800054e8 <fat_initialize_dir+0x8c>
8000547e:	31 09       	mov	r9,16
80005480:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80005484:	49 a9       	lddpc	r9,800054ec <fat_initialize_dir+0x90>
80005486:	2f c9       	sub	r9,-4
80005488:	13 ba       	ld.ub	r10,r9[0x3]
8000548a:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000548e:	13 aa       	ld.ub	r10,r9[0x2]
80005490:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80005494:	13 9a       	ld.ub	r10,r9[0x1]
80005496:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000549a:	13 89       	ld.ub	r9,r9[0x0]
8000549c:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
800054a0:	32 e9       	mov	r9,46
800054a2:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
800054a6:	f1 69 00 21 	st.b	r8[33],r9
800054aa:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800054ac:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800054b0:	32 09       	mov	r9,32
800054b2:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
800054b4:	14 38       	cp.w	r8,r10
800054b6:	cf e1       	brne	800054b2 <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
800054b8:	48 c8       	lddpc	r8,800054e8 <fat_initialize_dir+0x8c>
800054ba:	31 09       	mov	r9,16
800054bc:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
800054c0:	48 c9       	lddpc	r9,800054f0 <fat_initialize_dir+0x94>
800054c2:	2e 09       	sub	r9,-32
800054c4:	13 ba       	ld.ub	r10,r9[0x3]
800054c6:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
800054ca:	13 aa       	ld.ub	r10,r9[0x2]
800054cc:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
800054d0:	13 9a       	ld.ub	r10,r9[0x1]
800054d2:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
800054d6:	13 89       	ld.ub	r9,r9[0x0]
800054d8:	f1 69 00 35 	st.b	r8[53],r9
800054dc:	30 1c       	mov	r12,1

   return true;
}
800054de:	d8 02       	popm	pc
800054e0:	80 00       	ld.sh	r0,r0[0x0]
800054e2:	53 74       	stdsp	sp[0xdc],r4
800054e4:	80 00       	ld.sh	r0,r0[0x0]
800054e6:	46 a4       	lddsp	r4,sp[0x1a8]
800054e8:	00 00       	add	r0,r0
800054ea:	09 cc       	ld.ub	r12,r4[0x4]
800054ec:	00 00       	add	r0,r0
800054ee:	09 8c       	ld.ub	r12,r4[0x0]
800054f0:	00 00       	add	r0,r0
800054f2:	0b cc       	ld.ub	r12,r5[0x4]

800054f4 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
800054f4:	d4 31       	pushm	r0-r7,lr
800054f6:	20 5d       	sub	sp,20
800054f8:	18 97       	mov	r7,r12
800054fa:	50 3b       	stdsp	sp[0xc],r11
800054fc:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
800054fe:	f0 1f 00 30 	mcall	800055bc <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
80005502:	f0 1f 00 30 	mcall	800055c0 <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80005506:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80005508:	30 01       	mov	r1,0
8000550a:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000550c:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000550e:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80005510:	30 c6       	mov	r6,12
80005512:	31 ab       	mov	r11,26
80005514:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005516:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80005518:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000551a:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000551c:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000551e:	f2 08 18 00 	cp.b	r8,r9
80005522:	c0 31       	brne	80005528 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80005524:	b8 83       	st.b	r12[0x0],r3
         continue;
80005526:	c4 58       	rjmp	800055b0 <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80005528:	ec 08 18 00 	cp.b	r8,r6
8000552c:	5f 00       	sreq	r0
8000552e:	f6 08 18 00 	cp.b	r8,r11
80005532:	5f 04       	sreq	r4
80005534:	08 40       	or	r0,r4
80005536:	00 94       	mov	r4,r0
80005538:	f4 00 18 00 	cp.b	r0,r10
8000553c:	c3 21       	brne	800055a0 <fat_create_long_name_entry+0xac>
8000553e:	ea 08 18 00 	cp.b	r8,r5
80005542:	c3 70       	breq	800055b0 <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005544:	e4 08 18 00 	cp.b	r8,r2
80005548:	c0 41       	brne	80005550 <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
8000554a:	40 34       	lddsp	r4,sp[0xc]
8000554c:	b8 84       	st.b	r12[0x0],r4
         continue;
8000554e:	c3 18       	rjmp	800055b0 <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
80005550:	40 01       	lddsp	r1,sp[0x0]
80005552:	58 01       	cp.w	r1,0
80005554:	c2 41       	brne	8000559c <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005556:	0f 84       	ld.ub	r4,r7[0x0]
80005558:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
8000555c:	35 c1       	mov	r1,92
8000555e:	e2 04 19 00 	cp.h	r4,r1
80005562:	5f 00       	sreq	r0
80005564:	50 20       	stdsp	sp[0x8],r0
80005566:	32 f0       	mov	r0,47
80005568:	e0 04 19 00 	cp.h	r4,r0
8000556c:	5f 01       	sreq	r1
8000556e:	40 20       	lddsp	r0,sp[0x8]
80005570:	02 40       	or	r0,r1
80005572:	f4 00 18 00 	cp.b	r0,r10
80005576:	c0 50       	breq	80005580 <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80005578:	30 04       	mov	r4,0
8000557a:	fb 54 00 12 	st.h	sp[18],r4
8000557e:	c0 38       	rjmp	80005584 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80005580:	58 04       	cp.w	r4,0
80005582:	c0 31       	brne	80005588 <fat_create_long_name_entry+0x94>
80005584:	30 14       	mov	r4,1
80005586:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80005588:	fa c4 ff ee 	sub	r4,sp,-18
8000558c:	09 90       	ld.ub	r0,r4[0x1]
8000558e:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80005590:	09 84       	ld.ub	r4,r4[0x0]
80005592:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
80005594:	2f f8       	sub	r8,-1
80005596:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80005598:	2f f7       	sub	r7,-1
8000559a:	c0 38       	rjmp	800055a0 <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000559c:	3f f1       	mov	r1,-1
8000559e:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800055a0:	2f f8       	sub	r8,-1
800055a2:	5c 58       	castu.b	r8
800055a4:	fc 08 18 00 	cp.b	r8,lr
800055a8:	e0 8b 00 08 	brhi	800055b8 <fat_create_long_name_entry+0xc4>
800055ac:	2f fc       	sub	r12,-1
800055ae:	cb 8b       	rjmp	8000551e <fat_create_long_name_entry+0x2a>
800055b0:	2f f8       	sub	r8,-1
800055b2:	5c 58       	castu.b	r8
800055b4:	2f fc       	sub	r12,-1
800055b6:	cb 4b       	rjmp	8000551e <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
800055b8:	2f bd       	sub	sp,-20
800055ba:	d8 32       	popm	r0-r7,pc
800055bc:	80 00       	ld.sh	r0,r0[0x0]
800055be:	46 a4       	lddsp	r4,sp[0x1a8]
800055c0:	80 00       	ld.sh	r0,r0[0x0]
800055c2:	43 34       	lddsp	r4,sp[0xcc]

800055c4 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
800055c4:	d4 31       	pushm	r0-r7,lr
800055c6:	18 90       	mov	r0,r12
800055c8:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800055ca:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800055cc:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800055ce:	49 56       	lddpc	r6,80005620 <fat_delete_file+0x5c>
800055d0:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800055d2:	f0 1f 00 15 	mcall	80005624 <fat_delete_file+0x60>
800055d6:	c2 40       	breq	8000561e <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
800055d8:	f0 1f 00 14 	mcall	80005628 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
800055dc:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800055de:	f8 c7 ff f5 	sub	r7,r12,-11
800055e2:	0f 88       	ld.ub	r8,r7[0x0]
800055e4:	ea 08 18 00 	cp.b	r8,r5
800055e8:	c0 30       	breq	800055ee <fat_delete_file+0x2a>
800055ea:	58 04       	cp.w	r4,0
800055ec:	c1 01       	brne	8000560c <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800055ee:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
800055f0:	f0 1f 00 0f 	mcall	8000562c <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
800055f4:	0f 88       	ld.ub	r8,r7[0x0]
800055f6:	ea 08 18 00 	cp.b	r8,r5
800055fa:	c0 41       	brne	80005602 <fat_delete_file+0x3e>
800055fc:	e2 12 00 40 	andl	r2,0x40,COH
80005600:	c0 61       	brne	8000560c <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005602:	8c 18       	ld.sh	r8,r6[0x2]
80005604:	20 18       	sub	r8,1
80005606:	ac 18       	st.h	r6[0x2],r8
80005608:	02 94       	mov	r4,r1
   }  // end of while(1)
8000560a:	ce 4b       	rjmp	800055d2 <fat_delete_file+0xe>

   if( b_cluster_list )
8000560c:	58 00       	cp.w	r0,0
8000560e:	c0 21       	brne	80005612 <fat_delete_file+0x4e>
80005610:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80005612:	30 09       	mov	r9,0
80005614:	48 78       	lddpc	r8,80005630 <fat_delete_file+0x6c>
80005616:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80005618:	30 3c       	mov	r12,3
8000561a:	f0 1f 00 07 	mcall	80005634 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
8000561e:	d8 32       	popm	r0-r7,pc
80005620:	00 00       	add	r0,r0
80005622:	0c 18       	sub	r8,r6
80005624:	80 00       	ld.sh	r0,r0[0x0]
80005626:	4f 04       	lddpc	r4,800057e4 <fat_allocfreespace+0x44>
80005628:	80 00       	ld.sh	r0,r0[0x0]
8000562a:	43 34       	lddsp	r4,sp[0xcc]
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	46 a4       	lddsp	r4,sp[0x1a8]
80005630:	00 00       	add	r0,r0
80005632:	09 8c       	ld.ub	r12,r4[0x0]
80005634:	80 00       	ld.sh	r0,r0[0x0]
80005636:	4f 88       	lddpc	r8,80005814 <fat_allocfreespace+0x74>

80005638 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80005638:	eb cd 40 fc 	pushm	r2-r7,lr
8000563c:	20 8d       	sub	sp,32
8000563e:	30 06       	mov	r6,0
80005640:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80005642:	4a 95       	lddpc	r5,800056e4 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80005644:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80005646:	1a 93       	mov	r3,sp
80005648:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000564a:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000564c:	f0 1f 00 27 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
80005650:	c0 81       	brne	80005660 <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005652:	4a 78       	lddpc	r8,800056ec <fat_garbage_collector_entry+0xb4>
80005654:	11 89       	ld.ub	r9,r8[0x0]
80005656:	31 a8       	mov	r8,26
80005658:	f0 09 18 00 	cp.b	r9,r8
8000565c:	c3 d1       	brne	800056d6 <fat_garbage_collector_entry+0x9e>
8000565e:	c0 68       	rjmp	8000566a <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005660:	f0 1f 00 24 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
80005664:	19 88       	ld.ub	r8,r12[0x0]
80005666:	58 08       	cp.w	r8,0
80005668:	c1 b1       	brne	8000569e <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000566a:	49 f8       	lddpc	r8,800056e4 <fat_garbage_collector_entry+0xac>
8000566c:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000566e:	ec 07 19 00 	cp.h	r7,r6
80005672:	c3 40       	breq	800056da <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80005674:	32 05       	mov	r5,32
80005676:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005678:	49 b6       	lddpc	r6,800056e4 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000567a:	f0 1f 00 1c 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
8000567e:	c2 c0       	breq	800056d6 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80005680:	f0 1f 00 1c 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>
80005684:	0a 9a       	mov	r10,r5
80005686:	08 9b       	mov	r11,r4
80005688:	f0 1f 00 1b 	mcall	800056f4 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
8000568c:	f0 1f 00 1b 	mcall	800056f8 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005690:	8c 18       	ld.sh	r8,r6[0x2]
80005692:	2f f8       	sub	r8,-1
80005694:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80005696:	f0 07 19 00 	cp.h	r7,r8
8000569a:	cf 01       	brne	8000567a <fat_garbage_collector_entry+0x42>
8000569c:	c1 f8       	rjmp	800056da <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000569e:	e8 08 18 00 	cp.b	r8,r4
800056a2:	c1 70       	breq	800056d0 <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800056a4:	ec 07 19 00 	cp.h	r7,r6
800056a8:	c1 20       	breq	800056cc <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800056aa:	04 9a       	mov	r10,r2
800056ac:	18 9b       	mov	r11,r12
800056ae:	1a 9c       	mov	r12,sp
800056b0:	f0 1f 00 13 	mcall	800056fc <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800056b4:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800056b6:	f0 1f 00 0d 	mcall	800056e8 <fat_garbage_collector_entry+0xb0>
800056ba:	c0 e0       	breq	800056d6 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
800056bc:	f0 1f 00 0d 	mcall	800056f0 <fat_garbage_collector_entry+0xb8>
800056c0:	04 9a       	mov	r10,r2
800056c2:	1a 9b       	mov	r11,sp
800056c4:	f0 1f 00 0e 	mcall	800056fc <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
800056c8:	f0 1f 00 0c 	mcall	800056f8 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
800056cc:	2f f6       	sub	r6,-1
800056ce:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
800056d0:	2f f7       	sub	r7,-1
800056d2:	5c 87       	casts.h	r7
   }  // end of while(1)
800056d4:	cb bb       	rjmp	8000564a <fat_garbage_collector_entry+0x12>
800056d6:	30 0c       	mov	r12,0
800056d8:	c0 28       	rjmp	800056dc <fat_garbage_collector_entry+0xa4>
800056da:	30 1c       	mov	r12,1
}
800056dc:	2f 8d       	sub	sp,-32
800056de:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800056e2:	00 00       	add	r0,r0
800056e4:	00 00       	add	r0,r0
800056e6:	0c 18       	sub	r8,r6
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	4f 04       	lddpc	r4,800058a8 <fat_allocfreespace+0x108>
800056ec:	00 00       	add	r0,r0
800056ee:	0c 1c       	sub	r12,r6
800056f0:	80 00       	ld.sh	r0,r0[0x0]
800056f2:	43 34       	lddsp	r4,sp[0xcc]
800056f4:	80 00       	ld.sh	r0,r0[0x0]
800056f6:	85 02       	st.w	r2[0x0],r2
800056f8:	80 00       	ld.sh	r0,r0[0x0]
800056fa:	46 a4       	lddsp	r4,sp[0x1a8]
800056fc:	80 00       	ld.sh	r0,r0[0x0]
800056fe:	83 ba       	st.w	r1[0x2c],r10

80005700 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
80005700:	eb cd 40 c0 	pushm	r6-r7,lr
80005704:	20 1d       	sub	sp,4
80005706:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005708:	49 c8       	lddpc	r8,80005778 <fat_write_fat32_FSInfo+0x78>
8000570a:	90 c9       	ld.uh	r9,r8[0x8]
8000570c:	70 4a       	ld.w	r10,r8[0x10]
8000570e:	49 c8       	lddpc	r8,8000577c <fat_write_fat32_FSInfo+0x7c>
80005710:	12 1a       	sub	r10,r9
80005712:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80005714:	30 0c       	mov	r12,0
80005716:	f0 1f 00 1b 	mcall	80005780 <fat_write_fat32_FSInfo+0x80>
8000571a:	c2 c0       	breq	80005772 <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
8000571c:	f0 1f 00 1a 	mcall	80005784 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
80005720:	f0 1f 00 1a 	mcall	80005788 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80005724:	49 a7       	lddpc	r7,8000578c <fat_write_fat32_FSInfo+0x8c>
80005726:	30 46       	mov	r6,4
80005728:	0c 9a       	mov	r10,r6
8000572a:	49 ab       	lddpc	r11,80005790 <fat_write_fat32_FSInfo+0x90>
8000572c:	0e 9c       	mov	r12,r7
8000572e:	f0 1f 00 1a 	mcall	80005794 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
80005732:	0c 9a       	mov	r10,r6
80005734:	49 9b       	lddpc	r11,80005798 <fat_write_fat32_FSInfo+0x98>
80005736:	ee cc fe 1c 	sub	r12,r7,-484
8000573a:	f0 1f 00 17 	mcall	80005794 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000573e:	1b b9       	ld.ub	r9,sp[0x3]
80005740:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80005744:	1b a9       	ld.ub	r9,sp[0x2]
80005746:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000574a:	1b 99       	ld.ub	r9,sp[0x1]
8000574c:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80005750:	1b 88       	ld.ub	r8,sp[0x0]
80005752:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80005756:	0c 9a       	mov	r10,r6
80005758:	e0 6b 00 ff 	mov	r11,255
8000575c:	ee cc fe 14 	sub	r12,r7,-492
80005760:	f0 1f 00 0f 	mcall	8000579c <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80005764:	35 58       	mov	r8,85
80005766:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000576a:	3a a8       	mov	r8,-86
8000576c:	ef 68 01 ff 	st.b	r7[511],r8
80005770:	30 1c       	mov	r12,1
   return true;
}
80005772:	2f fd       	sub	sp,-4
80005774:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005778:	00 00       	add	r0,r0
8000577a:	0b cc       	ld.ub	r12,r5[0x4]
8000577c:	00 00       	add	r0,r0
8000577e:	09 88       	ld.ub	r8,r4[0x0]
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	48 d4       	lddpc	r4,800057b4 <fat_allocfreespace+0x14>
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	46 a4       	lddsp	r4,sp[0x1a8]
80005788:	80 00       	ld.sh	r0,r0[0x0]
8000578a:	48 bc       	lddpc	r12,800057b4 <fat_allocfreespace+0x14>
8000578c:	00 00       	add	r0,r0
8000578e:	09 cc       	ld.ub	r12,r4[0x4]
80005790:	80 00       	ld.sh	r0,r0[0x0]
80005792:	e2 c0 80 00 	sub	r0,r1,-32768
80005796:	83 ba       	st.w	r1[0x2c],r10
80005798:	80 00       	ld.sh	r0,r0[0x0]
8000579a:	e2 d4 80 00 	satsub.w	r4,r1,-32768
8000579e:	85 02       	st.w	r2[0x0],r2

800057a0 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800057a0:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800057a2:	4c 78       	lddpc	r8,800058bc <fat_allocfreespace+0x11c>
800057a4:	11 89       	ld.ub	r9,r8[0x0]
800057a6:	30 38       	mov	r8,3
800057a8:	f0 09 18 00 	cp.b	r9,r8
800057ac:	c0 61       	brne	800057b8 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800057ae:	3f fc       	mov	r12,-1
800057b0:	f0 1f 00 44 	mcall	800058c0 <fat_allocfreespace+0x120>
800057b4:	e0 80 00 83 	breq	800058ba <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800057b8:	4c 31       	lddpc	r1,800058c4 <fat_allocfreespace+0x124>
800057ba:	03 89       	ld.ub	r9,r1[0x0]
800057bc:	3f f8       	mov	r8,-1
800057be:	f0 09 18 00 	cp.b	r9,r8
800057c2:	c0 61       	brne	800057ce <fat_allocfreespace+0x2e>
800057c4:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
800057c6:	30 29       	mov	r9,2
800057c8:	4c 08       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057ca:	91 09       	st.w	r8[0x0],r9
800057cc:	c0 78       	rjmp	800057da <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
800057ce:	4b e8       	lddpc	r8,800058c4 <fat_allocfreespace+0x124>
800057d0:	70 09       	ld.w	r9,r8[0x0]
800057d2:	2f f9       	sub	r9,-1
800057d4:	4b d8       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057d6:	91 09       	st.w	r8[0x0],r9
800057d8:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
800057da:	f0 1f 00 3d 	mcall	800058cc <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
800057de:	4b b8       	lddpc	r8,800058c8 <fat_allocfreespace+0x128>
800057e0:	70 09       	ld.w	r9,r8[0x0]
800057e2:	4b c8       	lddpc	r8,800058d0 <fat_allocfreespace+0x130>
800057e4:	70 38       	ld.w	r8,r8[0xc]
800057e6:	10 39       	cp.w	r9,r8
800057e8:	c5 e2       	brcc	800058a4 <fat_allocfreespace+0x104>
800057ea:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
800057ec:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
800057ee:	4b 77       	lddpc	r7,800058c8 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
800057f0:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
800057f2:	4b 55       	lddpc	r5,800058c4 <fat_allocfreespace+0x124>
800057f4:	4b 76       	lddpc	r6,800058d0 <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
800057f6:	04 9c       	mov	r12,r2
800057f8:	f0 1f 00 37 	mcall	800058d4 <fat_allocfreespace+0x134>
800057fc:	c5 f0       	breq	800058ba <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
800057fe:	6e 18       	ld.w	r8,r7[0x4]
80005800:	58 08       	cp.w	r8,0
80005802:	c4 01       	brne	80005882 <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005804:	6e 08       	ld.w	r8,r7[0x0]
80005806:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005808:	58 04       	cp.w	r4,0
8000580a:	c0 80       	breq	8000581a <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000580c:	20 18       	sub	r8,1
8000580e:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005810:	06 9c       	mov	r12,r3
80005812:	f0 1f 00 31 	mcall	800058d4 <fat_allocfreespace+0x134>
80005816:	c1 e1       	brne	80005852 <fat_allocfreespace+0xb2>
80005818:	c5 18       	rjmp	800058ba <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000581a:	03 88       	ld.ub	r8,r1[0x0]
8000581c:	3f f9       	mov	r9,-1
8000581e:	f2 08 18 00 	cp.b	r8,r9
80005822:	c1 60       	breq	8000584e <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005824:	6a 08       	ld.w	r8,r5[0x0]
80005826:	58 08       	cp.w	r8,0
80005828:	c0 e1       	brne	80005844 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000582a:	4a 59       	lddpc	r9,800058bc <fat_allocfreespace+0x11c>
8000582c:	13 88       	ld.ub	r8,r9[0x0]
8000582e:	30 39       	mov	r9,3
80005830:	f2 08 18 00 	cp.b	r8,r9
80005834:	c0 50       	breq	8000583e <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005836:	31 b9       	mov	r9,27
80005838:	4a 88       	lddpc	r8,800058d8 <fat_allocfreespace+0x138>
8000583a:	b0 89       	st.b	r8[0x0],r9
8000583c:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000583e:	6c 68       	ld.w	r8,r6[0x18]
80005840:	8f 08       	st.w	r7[0x0],r8
80005842:	c0 28       	rjmp	80005846 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005844:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005846:	06 9c       	mov	r12,r3
80005848:	f0 1f 00 23 	mcall	800058d4 <fat_allocfreespace+0x134>
8000584c:	c3 70       	breq	800058ba <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000584e:	6e 18       	ld.w	r8,r7[0x4]
80005850:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80005852:	6e 18       	ld.w	r8,r7[0x4]
80005854:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80005856:	e0 68 ff ff 	mov	r8,65535
8000585a:	ea 18 0f ff 	orh	r8,0xfff
8000585e:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005860:	06 9c       	mov	r12,r3
80005862:	f0 1f 00 1d 	mcall	800058d4 <fat_allocfreespace+0x134>
80005866:	c2 a0       	breq	800058ba <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80005868:	6a 19       	ld.w	r9,r5[0x4]
8000586a:	0d 98       	ld.ub	r8,r6[0x1]
8000586c:	10 39       	cp.w	r9,r8
8000586e:	e0 8b 00 06 	brhi	8000587a <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80005872:	30 09       	mov	r9,0
80005874:	49 48       	lddpc	r8,800058c4 <fat_allocfreespace+0x124>
80005876:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
80005878:	c1 e8       	rjmp	800058b4 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000587a:	10 19       	sub	r9,r8
8000587c:	8b 19       	st.w	r5[0x4],r9
8000587e:	06 94       	mov	r4,r3
80005880:	c0 98       	rjmp	80005892 <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80005882:	58 04       	cp.w	r4,0
80005884:	c1 81       	brne	800058b4 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80005886:	58 00       	cp.w	r0,0
80005888:	c0 50       	breq	80005892 <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
8000588a:	6e 08       	ld.w	r8,r7[0x0]
8000588c:	f0 c8 fe 0c 	sub	r8,r8,-500
80005890:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
80005892:	6e 08       	ld.w	r8,r7[0x0]
80005894:	2f f8       	sub	r8,-1
80005896:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80005898:	6c 39       	ld.w	r9,r6[0xc]
8000589a:	10 39       	cp.w	r9,r8
8000589c:	fe 9b ff ad 	brhi	800057f6 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800058a0:	58 04       	cp.w	r4,0
800058a2:	c0 91       	brne	800058b4 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800058a4:	58 00       	cp.w	r0,0
800058a6:	c0 30       	breq	800058ac <fat_allocfreespace+0x10c>
800058a8:	30 00       	mov	r0,0
800058aa:	c8 eb       	rjmp	800057c6 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800058ac:	31 b9       	mov	r9,27
800058ae:	48 b8       	lddpc	r8,800058d8 <fat_allocfreespace+0x138>
800058b0:	b0 89       	st.b	r8[0x0],r9
800058b2:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
800058b4:	f0 1f 00 0a 	mcall	800058dc <fat_allocfreespace+0x13c>
800058b8:	d8 32       	popm	r0-r7,pc
800058ba:	d8 3a       	popm	r0-r7,pc,r12=0
800058bc:	00 00       	add	r0,r0
800058be:	0c 18       	sub	r8,r6
800058c0:	80 00       	ld.sh	r0,r0[0x0]
800058c2:	57 00       	stdsp	sp[0x1c0],r0
800058c4:	00 00       	add	r0,r0
800058c6:	0c 74       	tst	r4,r6
800058c8:	00 00       	add	r0,r0
800058ca:	0c 6c       	and	r12,r6
800058cc:	80 00       	ld.sh	r0,r0[0x0]
800058ce:	53 5c       	stdsp	sp[0xd4],r12
800058d0:	00 00       	add	r0,r0
800058d2:	0b cc       	ld.ub	r12,r5[0x4]
800058d4:	80 00       	ld.sh	r0,r0[0x0]
800058d6:	49 e8       	lddpc	r8,8000594c <fat_alloc_entry_free+0x6c>
800058d8:	00 00       	add	r0,r0
800058da:	0c 1c       	sub	r12,r6
800058dc:	80 00       	ld.sh	r0,r0[0x0]
800058de:	53 e8       	stdsp	sp[0xf8],r8

800058e0 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
800058e0:	d4 31       	pushm	r0-r7,lr
800058e2:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
800058e4:	30 09       	mov	r9,0
800058e6:	4a 38       	lddpc	r8,80005970 <fat_alloc_entry_free+0x90>
800058e8:	b0 19       	st.h	r8[0x2],r9
800058ea:	18 92       	mov	r2,r12
800058ec:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800058ee:	4a 26       	lddpc	r6,80005974 <fat_alloc_entry_free+0x94>
800058f0:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
800058f2:	4a 21       	lddpc	r1,80005978 <fat_alloc_entry_free+0x98>
800058f4:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
800058f6:	10 97       	mov	r7,r8
800058f8:	12 90       	mov	r0,r9
800058fa:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800058fc:	f0 1f 00 20 	mcall	8000597c <fat_alloc_entry_free+0x9c>
80005900:	c1 61       	brne	8000592c <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005902:	0d 88       	ld.ub	r8,r6[0x0]
80005904:	e6 08 18 00 	cp.b	r8,r3
80005908:	c3 11       	brne	8000596a <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000590a:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
8000590c:	f0 1f 00 1d 	mcall	80005980 <fat_alloc_entry_free+0xa0>
80005910:	c0 a1       	brne	80005924 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80005912:	58 04       	cp.w	r4,0
80005914:	c2 b1       	brne	8000596a <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80005916:	f0 1f 00 1c 	mcall	80005984 <fat_alloc_entry_free+0xa4>
8000591a:	c2 80       	breq	8000596a <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000591c:	ae 10       	st.h	r7[0x2],r0
8000591e:	40 02       	lddsp	r2,sp[0x0]
80005920:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
80005922:	ce db       	rjmp	800058fc <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005924:	f0 1f 00 19 	mcall	80005988 <fat_alloc_entry_free+0xa8>
80005928:	ce a1       	brne	800058fc <fat_alloc_entry_free+0x1c>
8000592a:	c2 08       	rjmp	8000596a <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000592c:	f0 1f 00 18 	mcall	8000598c <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
80005930:	19 88       	ld.ub	r8,r12[0x0]
80005932:	30 09       	mov	r9,0
80005934:	f2 08 18 00 	cp.b	r8,r9
80005938:	c0 61       	brne	80005944 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
8000593a:	20 12       	sub	r2,1
8000593c:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000593e:	c0 31       	brne	80005944 <fat_alloc_entry_free+0x64>
80005940:	30 1c       	mov	r12,1
80005942:	c1 58       	rjmp	8000596c <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005944:	8e 18       	ld.sh	r8,r7[0x2]
80005946:	2f f8       	sub	r8,-1
80005948:	5c 88       	casts.h	r8
8000594a:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000594c:	cd 81       	brne	800058fc <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000594e:	58 04       	cp.w	r4,0
80005950:	c0 60       	breq	8000595c <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80005952:	31 b9       	mov	r9,27
80005954:	48 88       	lddpc	r8,80005974 <fat_alloc_entry_free+0x94>
80005956:	b0 89       	st.b	r8[0x0],r9
80005958:	30 0c       	mov	r12,0
            return false;
8000595a:	c0 98       	rjmp	8000596c <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
8000595c:	f0 1f 00 0a 	mcall	80005984 <fat_alloc_entry_free+0xa4>
80005960:	c0 50       	breq	8000596a <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005962:	ae 10       	st.h	r7[0x2],r0
80005964:	40 02       	lddsp	r2,sp[0x0]
80005966:	0a 94       	mov	r4,r5
80005968:	cc ab       	rjmp	800058fc <fat_alloc_entry_free+0x1c>
8000596a:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
8000596c:	2f fd       	sub	sp,-4
8000596e:	d8 32       	popm	r0-r7,pc
80005970:	00 00       	add	r0,r0
80005972:	0c 18       	sub	r8,r6
80005974:	00 00       	add	r0,r0
80005976:	0c 1c       	sub	r12,r6
80005978:	00 00       	add	r0,r0
8000597a:	0c 74       	tst	r4,r6
8000597c:	80 00       	ld.sh	r0,r0[0x0]
8000597e:	4f 04       	lddpc	r4,80005b3c <fat_create_short_entry_name+0x138>
80005980:	80 00       	ld.sh	r0,r0[0x0]
80005982:	57 a0       	stdsp	sp[0x1e8],r0
80005984:	80 00       	ld.sh	r0,r0[0x0]
80005986:	56 38       	stdsp	sp[0x18c],r8
80005988:	80 00       	ld.sh	r0,r0[0x0]
8000598a:	53 74       	stdsp	sp[0xdc],r4
8000598c:	80 00       	ld.sh	r0,r0[0x0]
8000598e:	43 34       	lddsp	r4,sp[0xcc]

80005990 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
80005990:	d4 31       	pushm	r0-r7,lr
80005992:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
80005994:	33 a2       	mov	r2,58
80005996:	30 d5       	mov	r5,13
80005998:	30 23       	mov	r3,2
8000599a:	49 86       	lddpc	r6,800059f8 <fat_check_name+0x68>
8000599c:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800059a0:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800059a2:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800059a4:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800059a6:	0e 9c       	mov	r12,r7
800059a8:	f0 1f 00 15 	mcall	800059fc <fat_check_name+0x6c>
800059ac:	c1 a1       	brne	800059e0 <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800059ae:	ee 02 19 00 	cp.h	r2,r7
800059b2:	c0 60       	breq	800059be <fat_check_name+0x2e>
800059b4:	02 98       	mov	r8,r1
800059b6:	11 89       	ld.ub	r9,r8[0x0]
800059b8:	ee 09 19 00 	cp.h	r9,r7
800059bc:	c0 61       	brne	800059c8 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800059be:	31 c9       	mov	r9,28
800059c0:	49 08       	lddpc	r8,80005a00 <fat_check_name+0x70>
800059c2:	b0 89       	st.b	r8[0x0],r9
800059c4:	30 03       	mov	r3,0
            return 0;      // incorrect character
800059c6:	c1 68       	rjmp	800059f2 <fat_check_name+0x62>
800059c8:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
800059ca:	0c 38       	cp.w	r8,r6
800059cc:	cf 51       	brne	800059b6 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800059ce:	58 05       	cp.w	r5,0
800059d0:	c0 41       	brne	800059d8 <fat_check_name+0x48>
      {
         u8_nb_entry++;
800059d2:	2f f3       	sub	r3,-1
800059d4:	5c 53       	castu.b	r3
800059d6:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
800059d8:	20 15       	sub	r5,1
800059da:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
800059dc:	2f f4       	sub	r4,-1
   }
800059de:	ce 3b       	rjmp	800059a4 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
800059e0:	31 48       	mov	r8,20
800059e2:	f0 03 18 00 	cp.b	r3,r8
800059e6:	e0 88 00 06 	brls	800059f2 <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
800059ea:	32 b9       	mov	r9,43
800059ec:	48 58       	lddpc	r8,80005a00 <fat_check_name+0x70>
800059ee:	b0 89       	st.b	r8[0x0],r9
800059f0:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
800059f2:	06 9c       	mov	r12,r3
800059f4:	d8 32       	popm	r0-r7,pc
800059f6:	00 00       	add	r0,r0
800059f8:	80 00       	ld.sh	r0,r0[0x0]
800059fa:	e2 c4 80 00 	sub	r4,r1,-32768
800059fe:	43 0c       	lddsp	r12,sp[0xc0]
80005a00:	00 00       	add	r0,r0
80005a02:	0c 1c       	sub	r12,r6

80005a04 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005a04:	d4 31       	pushm	r0-r7,lr
80005a06:	20 8d       	sub	sp,32
80005a08:	18 94       	mov	r4,r12
80005a0a:	50 2b       	stdsp	sp[0x8],r11
80005a0c:	14 97       	mov	r7,r10
80005a0e:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80005a10:	58 09       	cp.w	r9,0
80005a12:	c0 40       	breq	80005a1a <fat_create_short_entry_name+0x16>
80005a14:	30 09       	mov	r9,0
80005a16:	50 19       	stdsp	sp[0x4],r9
80005a18:	c0 68       	rjmp	80005a24 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005a1a:	f0 1f 00 66 	mcall	80005bb0 <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80005a1e:	f0 1f 00 66 	mcall	80005bb4 <fat_create_short_entry_name+0x1b0>
80005a22:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005a24:	30 98       	mov	r8,9
80005a26:	f0 07 18 00 	cp.b	r7,r8
80005a2a:	e0 8b 00 04 	brhi	80005a32 <fat_create_short_entry_name+0x2e>
80005a2e:	30 18       	mov	r8,1
80005a30:	c0 88       	rjmp	80005a40 <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80005a32:	36 38       	mov	r8,99
80005a34:	ee 08 18 00 	cp.b	r8,r7
80005a38:	f9 b8 02 02 	movhs	r8,2
80005a3c:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80005a40:	e0 6a cc cd 	mov	r10,52429
80005a44:	ea 1a cc cc 	orh	r10,0xcccc
80005a48:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005a4c:	e6 09 16 03 	lsr	r9,r3,0x3
80005a50:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005a54:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80005a58:	2d 09       	sub	r9,-48
80005a5a:	5c 59       	castu.b	r9
80005a5c:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80005a5e:	e0 63 85 1f 	mov	r3,34079
80005a62:	ea 13 51 eb 	orh	r3,0x51eb
80005a66:	ee 03 06 42 	mulu.d	r2,r7,r3
80005a6a:	e6 09 16 05 	lsr	r9,r3,0x5
80005a6e:	f2 0b 10 64 	mul	r11,r9,100
80005a72:	ee 0b 01 0b 	sub	r11,r7,r11
80005a76:	5c 5b       	castu.b	r11
80005a78:	f6 0a 06 4a 	mulu.d	r10,r11,r10
80005a7c:	f6 0a 16 03 	lsr	r10,r11,0x3
80005a80:	2d 0a       	sub	r10,-48
80005a82:	5c 5a       	castu.b	r10
80005a84:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005a86:	2d 09       	sub	r9,-48
80005a88:	5c 59       	castu.b	r9
80005a8a:	50 49       	stdsp	sp[0x10],r9
80005a8c:	30 01       	mov	r1,0
80005a8e:	30 17       	mov	r7,1
80005a90:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
80005a92:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005a94:	f0 09 11 ff 	rsub	r9,r8,-1
80005a98:	2f 89       	sub	r9,-8
80005a9a:	50 39       	stdsp	sp[0xc],r9
80005a9c:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
80005a9e:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005aa0:	f0 08 11 06 	rsub	r8,r8,6
80005aa4:	5c 58       	castu.b	r8
80005aa6:	50 78       	stdsp	sp[0x1c],r8
80005aa8:	c0 28       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005aaa:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80005aac:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
80005aae:	e6 07 18 00 	cp.b	r7,r3
80005ab2:	c1 41       	brne	80005ada <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005ab4:	40 39       	lddsp	r9,sp[0xc]
80005ab6:	0a 39       	cp.w	r9,r5
80005ab8:	5f 09       	sreq	r9
80005aba:	e0 06 18 00 	cp.b	r6,r0
80005abe:	5f 08       	sreq	r8
80005ac0:	f3 e8 10 08 	or	r8,r9,r8
80005ac4:	30 09       	mov	r9,0
80005ac6:	f2 08 18 00 	cp.b	r8,r9
80005aca:	c0 51       	brne	80005ad4 <fat_create_short_entry_name+0xd0>
80005acc:	0c 9c       	mov	r12,r6
80005ace:	f0 1f 00 3b 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005ad2:	c1 10       	breq	80005af4 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005ad4:	2f f7       	sub	r7,-1
80005ad6:	5c 57       	castu.b	r7
            continue;
80005ad8:	ce ab       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005ada:	e4 07 18 00 	cp.b	r7,r2
80005ade:	c1 21       	brne	80005b02 <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005ae0:	30 b9       	mov	r9,11
80005ae2:	f2 05 18 00 	cp.b	r5,r9
80005ae6:	c0 50       	breq	80005af0 <fat_create_short_entry_name+0xec>
80005ae8:	0c 9c       	mov	r12,r6
80005aea:	f0 1f 00 34 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005aee:	c0 30       	breq	80005af4 <fat_create_short_entry_name+0xf0>
80005af0:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80005af2:	cd db       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005af4:	0c 9c       	mov	r12,r6
80005af6:	f0 1f 00 32 	mcall	80005bbc <fat_create_short_entry_name+0x1b8>
80005afa:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005afc:	2f f4       	sub	r4,-1
         if( 0 == character )
80005afe:	58 0c       	cp.w	r12,0
80005b00:	cd 60       	breq	80005aac <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80005b02:	30 78       	mov	r8,7
80005b04:	f0 07 18 00 	cp.b	r7,r8
80005b08:	c0 c1       	brne	80005b20 <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005b0a:	e0 06 18 00 	cp.b	r6,r0
80005b0e:	c0 50       	breq	80005b18 <fat_create_short_entry_name+0x114>
80005b10:	0c 9c       	mov	r12,r6
80005b12:	f0 1f 00 2a 	mcall	80005bb8 <fat_create_short_entry_name+0x1b4>
80005b16:	c0 30       	breq	80005b1c <fat_create_short_entry_name+0x118>
80005b18:	30 87       	mov	r7,8
80005b1a:	cc 9b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005b1c:	2f f4       	sub	r4,-1
80005b1e:	cc 7b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80005b20:	30 68       	mov	r8,6
80005b22:	f0 07 18 00 	cp.b	r7,r8
80005b26:	c0 61       	brne	80005b32 <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005b28:	e4 05 18 00 	cp.b	r5,r2
80005b2c:	cb f0       	breq	80005aaa <fat_create_short_entry_name+0xa6>
80005b2e:	32 06       	mov	r6,32
80005b30:	c1 28       	rjmp	80005b54 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80005b32:	30 98       	mov	r8,9
80005b34:	f0 07 18 00 	cp.b	r7,r8
80005b38:	c0 71       	brne	80005b46 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005b3a:	30 b8       	mov	r8,11
80005b3c:	f0 05 18 00 	cp.b	r5,r8
80005b40:	c3 50       	breq	80005baa <fat_create_short_entry_name+0x1a6>
80005b42:	32 06       	mov	r6,32
80005b44:	c0 f8       	rjmp	80005b62 <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005b46:	30 58       	mov	r8,5
80005b48:	f0 07 18 00 	cp.b	r7,r8
80005b4c:	c0 41       	brne	80005b54 <fat_create_short_entry_name+0x150>
80005b4e:	40 66       	lddsp	r6,sp[0x18]
80005b50:	30 67       	mov	r7,6
80005b52:	c0 f8       	rjmp	80005b70 <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005b54:	30 48       	mov	r8,4
80005b56:	f0 07 18 00 	cp.b	r7,r8
80005b5a:	c0 41       	brne	80005b62 <fat_create_short_entry_name+0x15e>
80005b5c:	40 56       	lddsp	r6,sp[0x14]
80005b5e:	30 57       	mov	r7,5
80005b60:	c1 28       	rjmp	80005b84 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80005b62:	30 38       	mov	r8,3
80005b64:	f0 07 18 00 	cp.b	r7,r8
80005b68:	c0 41       	brne	80005b70 <fat_create_short_entry_name+0x16c>
80005b6a:	40 46       	lddsp	r6,sp[0x10]
80005b6c:	30 47       	mov	r7,4
80005b6e:	c0 b8       	rjmp	80005b84 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80005b70:	30 28       	mov	r8,2
80005b72:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005b74:	f0 07 18 00 	cp.b	r7,r8
80005b78:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
80005b7c:	f0 09 18 00 	cp.b	r9,r8
80005b80:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
80005b84:	40 08       	lddsp	r8,sp[0x0]
80005b86:	58 08       	cp.w	r8,0
80005b88:	c0 50       	breq	80005b92 <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
80005b8a:	40 29       	lddsp	r9,sp[0x8]
80005b8c:	12 c6       	st.b	r9++,r6
80005b8e:	50 29       	stdsp	sp[0x8],r9
80005b90:	c0 48       	rjmp	80005b98 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80005b92:	40 18       	lddsp	r8,sp[0x4]
80005b94:	10 c6       	st.b	r8++,r6
80005b96:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80005b98:	2f f5       	sub	r5,-1
80005b9a:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005b9c:	e2 08 16 01 	lsr	r8,r1,0x1
80005ba0:	a7 71       	lsl	r1,0x7
80005ba2:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005ba4:	0c 01       	add	r1,r6
80005ba6:	5c 51       	castu.b	r1
80005ba8:	c8 2b       	rjmp	80005aac <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005baa:	02 9c       	mov	r12,r1
80005bac:	2f 8d       	sub	sp,-32
80005bae:	d8 32       	popm	r0-r7,pc
80005bb0:	80 00       	ld.sh	r0,r0[0x0]
80005bb2:	46 a4       	lddsp	r4,sp[0x1a8]
80005bb4:	80 00       	ld.sh	r0,r0[0x0]
80005bb6:	43 34       	lddsp	r4,sp[0xcc]
80005bb8:	80 00       	ld.sh	r0,r0[0x0]
80005bba:	43 0c       	lddsp	r12,sp[0xc0]
80005bbc:	80 00       	ld.sh	r0,r0[0x0]
80005bbe:	53 10       	stdsp	sp[0xc4],r0

80005bc0 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80005bc0:	eb cd 40 80 	pushm	r7,lr
80005bc4:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005bc6:	f0 1f 00 12 	mcall	80005c0c <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005bca:	19 88       	ld.ub	r8,r12[0x0]
80005bcc:	58 08       	cp.w	r8,0
80005bce:	c0 61       	brne	80005bda <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80005bd0:	30 a9       	mov	r9,10
80005bd2:	49 08       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bd4:	b0 89       	st.b	r8[0x0],r9
80005bd6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005bda:	3e 59       	mov	r9,-27
80005bdc:	f2 08 18 00 	cp.b	r8,r9
80005be0:	c0 70       	breq	80005bee <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80005be2:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005be6:	30 f8       	mov	r8,15
80005be8:	f0 09 18 00 	cp.b	r9,r8
80005bec:	c0 61       	brne	80005bf8 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005bee:	30 b9       	mov	r9,11
80005bf0:	48 88       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bf2:	b0 89       	st.b	r8[0x0],r9
80005bf4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005bf8:	30 b9       	mov	r9,11
80005bfa:	48 68       	lddpc	r8,80005c10 <fat_entry_shortname_compare+0x50>
80005bfc:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80005bfe:	30 ba       	mov	r10,11
80005c00:	0e 9b       	mov	r11,r7
80005c02:	f0 1f 00 05 	mcall	80005c14 <fat_entry_shortname_compare+0x54>
80005c06:	5f 0c       	sreq	r12
}
80005c08:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	43 34       	lddsp	r4,sp[0xcc]
80005c10:	00 00       	add	r0,r0
80005c12:	0c 1c       	sub	r12,r6
80005c14:	80 00       	ld.sh	r0,r0[0x0]
80005c16:	83 94       	st.w	r1[0x24],r4

80005c18 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005c18:	d4 31       	pushm	r0-r7,lr
80005c1a:	20 3d       	sub	sp,12
80005c1c:	18 93       	mov	r3,r12
80005c1e:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c20:	1a 96       	mov	r6,sp
80005c22:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c24:	49 65       	lddpc	r5,80005c7c <fat_find_short_entry_name+0x64>
80005c26:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c28:	49 61       	lddpc	r1,80005c80 <fat_find_short_entry_name+0x68>
80005c2a:	30 a0       	mov	r0,10
80005c2c:	c0 58       	rjmp	80005c36 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80005c2e:	3f f8       	mov	r8,-1
80005c30:	f0 07 18 00 	cp.b	r7,r8
80005c34:	c2 00       	breq	80005c74 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80005c36:	2f f7       	sub	r7,-1
80005c38:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005c3a:	04 99       	mov	r9,r2
80005c3c:	0e 9a       	mov	r10,r7
80005c3e:	1a 9b       	mov	r11,sp
80005c40:	06 9c       	mov	r12,r3
80005c42:	f0 1f 00 11 	mcall	80005c84 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005c46:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005c48:	f0 1f 00 10 	mcall	80005c88 <fat_find_short_entry_name+0x70>
80005c4c:	c0 81       	brne	80005c5c <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80005c4e:	48 d8       	lddpc	r8,80005c80 <fat_find_short_entry_name+0x68>
80005c50:	11 89       	ld.ub	r9,r8[0x0]
80005c52:	31 a8       	mov	r8,26
80005c54:	f0 09 18 00 	cp.b	r9,r8
80005c58:	c0 e1       	brne	80005c74 <fat_find_short_entry_name+0x5c>
80005c5a:	c0 e8       	rjmp	80005c76 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005c5c:	1a 9c       	mov	r12,sp
80005c5e:	f0 1f 00 0c 	mcall	80005c8c <fat_find_short_entry_name+0x74>
80005c62:	ce 61       	brne	80005c2e <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005c64:	03 88       	ld.ub	r8,r1[0x0]
80005c66:	e0 08 18 00 	cp.b	r8,r0
80005c6a:	c0 60       	breq	80005c76 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005c6c:	8a 18       	ld.sh	r8,r5[0x2]
80005c6e:	2f f8       	sub	r8,-1
80005c70:	aa 18       	st.h	r5[0x2],r8
      }
80005c72:	ce bb       	rjmp	80005c48 <fat_find_short_entry_name+0x30>
80005c74:	30 07       	mov	r7,0
   }
}
80005c76:	0e 9c       	mov	r12,r7
80005c78:	2f dd       	sub	sp,-12
80005c7a:	d8 32       	popm	r0-r7,pc
80005c7c:	00 00       	add	r0,r0
80005c7e:	0c 18       	sub	r8,r6
80005c80:	00 00       	add	r0,r0
80005c82:	0c 1c       	sub	r12,r6
80005c84:	80 00       	ld.sh	r0,r0[0x0]
80005c86:	5a 04       	cp.w	r4,-32
80005c88:	80 00       	ld.sh	r0,r0[0x0]
80005c8a:	4f 04       	lddpc	r4,80005e48 <fat_mount+0x110>
80005c8c:	80 00       	ld.sh	r0,r0[0x0]
80005c8e:	5b c0       	cp.w	r0,-4

80005c90 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80005c90:	eb cd 40 fc 	pushm	r2-r7,lr
80005c94:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005c96:	f0 1f 00 21 	mcall	80005d18 <fat_create_entry_file_name+0x88>
80005c9a:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005c9c:	c3 b0       	breq	80005d12 <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005c9e:	0c 9c       	mov	r12,r6
80005ca0:	f0 1f 00 1f 	mcall	80005d1c <fat_create_entry_file_name+0x8c>
80005ca4:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005ca6:	c0 61       	brne	80005cb2 <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005ca8:	32 a9       	mov	r9,42
80005caa:	49 e8       	lddpc	r8,80005d20 <fat_create_entry_file_name+0x90>
80005cac:	b0 89       	st.b	r8[0x0],r9
80005cae:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005cb2:	0a 9c       	mov	r12,r5
80005cb4:	f0 1f 00 1c 	mcall	80005d24 <fat_create_entry_file_name+0x94>
80005cb8:	c2 d0       	breq	80005d12 <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005cba:	30 09       	mov	r9,0
80005cbc:	0e 9a       	mov	r10,r7
80005cbe:	12 9b       	mov	r11,r9
80005cc0:	0c 9c       	mov	r12,r6
80005cc2:	f0 1f 00 1a 	mcall	80005d28 <fat_create_entry_file_name+0x98>
80005cc6:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005cc8:	20 15       	sub	r5,1
80005cca:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005ccc:	c1 c0       	breq	80005d04 <fat_create_entry_file_name+0x74>
80005cce:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005cd0:	49 74       	lddpc	r4,80005d2c <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005cd2:	ea c3 ff c0 	sub	r3,r5,-64
80005cd6:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005cd8:	88 18       	ld.sh	r8,r4[0x2]
80005cda:	20 18       	sub	r8,1
80005cdc:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80005cde:	f0 1f 00 15 	mcall	80005d30 <fat_create_entry_file_name+0xa0>
80005ce2:	c1 80       	breq	80005d12 <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005ce4:	ea 07 18 00 	cp.b	r7,r5
80005ce8:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005cec:	0e 9a       	mov	r10,r7
80005cee:	04 9b       	mov	r11,r2
80005cf0:	0c 9c       	mov	r12,r6
80005cf2:	f0 1f 00 11 	mcall	80005d34 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005cf6:	2f f7       	sub	r7,-1
80005cf8:	5c 57       	castu.b	r7
80005cfa:	ee 05 18 00 	cp.b	r5,r7
80005cfe:	c0 33       	brcs	80005d04 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005d00:	2f 36       	sub	r6,-13
80005d02:	ce bb       	rjmp	80005cd8 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005d04:	48 a8       	lddpc	r8,80005d2c <fat_create_entry_file_name+0x9c>
80005d06:	90 19       	ld.sh	r9,r8[0x2]
80005d08:	f2 05 00 05 	add	r5,r9,r5
80005d0c:	b0 15       	st.h	r8[0x2],r5
80005d0e:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80005d12:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005d16:	00 00       	add	r0,r0
80005d18:	80 00       	ld.sh	r0,r0[0x0]
80005d1a:	59 90       	cp.w	r0,25
80005d1c:	80 00       	ld.sh	r0,r0[0x0]
80005d1e:	5c 18       	scr	r8
80005d20:	00 00       	add	r0,r0
80005d22:	0c 1c       	sub	r12,r6
80005d24:	80 00       	ld.sh	r0,r0[0x0]
80005d26:	58 e0       	cp.w	r0,14
80005d28:	80 00       	ld.sh	r0,r0[0x0]
80005d2a:	5a 04       	cp.w	r4,-32
80005d2c:	00 00       	add	r0,r0
80005d2e:	0c 18       	sub	r8,r6
80005d30:	80 00       	ld.sh	r0,r0[0x0]
80005d32:	4f 04       	lddpc	r4,80005ef0 <fat_mount+0x1b8>
80005d34:	80 00       	ld.sh	r0,r0[0x0]
80005d36:	54 f4       	stdsp	sp[0x13c],r4

80005d38 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005d38:	d4 31       	pushm	r0-r7,lr
80005d3a:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005d3c:	30 07       	mov	r7,0
80005d3e:	fe f8 02 d2 	ld.w	r8,pc[722]
80005d42:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005d44:	f0 1f 00 b4 	mcall	80006014 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005d48:	fe f8 02 d0 	ld.w	r8,pc[720]
80005d4c:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005d4e:	fe f8 02 ce 	ld.w	r8,pc[718]
80005d52:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80005d54:	f0 1f 00 b3 	mcall	80006020 <fat_mount+0x2e8>
80005d58:	e0 80 01 58 	breq	80006008 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d5c:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005d60:	ea c8 fe 42 	sub	r8,r5,-446
80005d64:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005d66:	38 04       	mov	r4,-128
80005d68:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005d6a:	30 1c       	mov	r12,1
80005d6c:	f0 1f 00 af 	mcall	80006028 <fat_mount+0x2f0>
80005d70:	e0 80 01 4c 	breq	80006008 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d74:	eb 39 01 fe 	ld.ub	r9,r5[510]
80005d78:	35 58       	mov	r8,85
80005d7a:	f0 09 18 00 	cp.b	r9,r8
80005d7e:	c0 d0       	breq	80005d98 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005d80:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005d84:	3a a8       	mov	r8,-86
80005d86:	f0 09 18 00 	cp.b	r9,r8
80005d8a:	c0 70       	breq	80005d98 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005d8c:	30 29       	mov	r9,2
80005d8e:	fe f8 02 9e 	ld.w	r8,pc[670]
80005d92:	b0 89       	st.b	r8[0x0],r9
80005d94:	30 0c       	mov	r12,0
         return false;
80005d96:	c3 a9       	rjmp	8000600a <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80005d98:	fe f8 02 84 	ld.w	r8,pc[644]
80005d9c:	70 08       	ld.w	r8,r8[0x0]
80005d9e:	58 08       	cp.w	r8,0
80005da0:	c5 21       	brne	80005e44 <fat_mount+0x10c>
80005da2:	40 08       	lddsp	r8,sp[0x0]
80005da4:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005da6:	30 1e       	mov	lr,1
80005da8:	30 63       	mov	r3,6
80005daa:	30 e2       	mov	r2,14
80005dac:	30 b1       	mov	r1,11
80005dae:	30 c0       	mov	r0,12
80005db0:	11 89       	ld.ub	r9,r8[0x0]
80005db2:	e8 09 18 00 	cp.b	r9,r4
80005db6:	5f 0b       	sreq	r11
80005db8:	ee 09 18 00 	cp.b	r9,r7
80005dbc:	5f 09       	sreq	r9
80005dbe:	f7 e9 10 09 	or	r9,r11,r9
80005dc2:	ee 09 18 00 	cp.b	r9,r7
80005dc6:	c1 90       	breq	80005df8 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005dc8:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005dca:	fc 09 18 00 	cp.b	r9,lr
80005dce:	5f 0c       	sreq	r12
80005dd0:	ec 09 18 00 	cp.b	r9,r6
80005dd4:	5f 0b       	sreq	r11
80005dd6:	f9 eb 10 0b 	or	r11,r12,r11
80005dda:	ee 0b 18 00 	cp.b	r11,r7
80005dde:	c1 41       	brne	80005e06 <fat_mount+0xce>
80005de0:	e6 09 18 00 	cp.b	r9,r3
80005de4:	c1 10       	breq	80005e06 <fat_mount+0xce>
80005de6:	e4 09 18 00 	cp.b	r9,r2
80005dea:	c0 e0       	breq	80005e06 <fat_mount+0xce>
80005dec:	e2 09 18 00 	cp.b	r9,r1
80005df0:	c0 b0       	breq	80005e06 <fat_mount+0xce>
80005df2:	e0 09 18 00 	cp.b	r9,r0
80005df6:	c0 80       	breq	80005e06 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005df8:	2f fa       	sub	r10,-1
80005dfa:	5c 5a       	castu.b	r10
80005dfc:	2f 08       	sub	r8,-16
80005dfe:	ec 0a 18 00 	cp.b	r10,r6
80005e02:	cd 71       	brne	80005db0 <fat_mount+0x78>
80005e04:	c2 08       	rjmp	80005e44 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005e06:	ec 0a 18 00 	cp.b	r10,r6
80005e0a:	c1 d0       	breq	80005e44 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005e0c:	fe f3 02 10 	ld.w	r3,pc[528]
80005e10:	a5 6a       	lsl	r10,0x4
80005e12:	f4 ca fe 42 	sub	r10,r10,-446
80005e16:	ea 0a 00 0a 	add	r10,r5,r10
80005e1a:	f5 38 00 08 	ld.ub	r8,r10[8]
80005e1e:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005e20:	f5 38 00 09 	ld.ub	r8,r10[9]
80005e24:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005e26:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005e2a:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005e2c:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005e30:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005e32:	4f 88       	lddpc	r8,80006010 <fat_mount+0x2d8>
80005e34:	11 8c       	ld.ub	r12,r8[0x0]
80005e36:	f0 1f 00 7f 	mcall	80006030 <fat_mount+0x2f8>
80005e3a:	66 08       	ld.w	r8,r3[0x0]
80005e3c:	f8 08 02 48 	mul	r8,r12,r8
80005e40:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005e42:	c9 4b       	rjmp	80005d6a <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005e44:	4f 88       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e46:	11 89       	ld.ub	r9,r8[0x0]
80005e48:	3e b8       	mov	r8,-21
80005e4a:	f0 09 18 00 	cp.b	r9,r8
80005e4e:	c0 f1       	brne	80005e6c <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005e50:	4f 58       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e52:	11 a9       	ld.ub	r9,r8[0x2]
80005e54:	39 08       	mov	r8,-112
80005e56:	f0 09 18 00 	cp.b	r9,r8
80005e5a:	c0 91       	brne	80005e6c <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005e5c:	4f 28       	lddpc	r8,80006024 <fat_mount+0x2ec>
80005e5e:	f1 38 00 15 	ld.ub	r8,r8[21]
80005e62:	e2 18 00 f0 	andl	r8,0xf0,COH
80005e66:	e0 48 00 f0 	cp.w	r8,240
80005e6a:	c0 60       	breq	80005e76 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005e6c:	30 39       	mov	r9,3
80005e6e:	4f 08       	lddpc	r8,8000602c <fat_mount+0x2f4>
80005e70:	b0 89       	st.b	r8[0x0],r9
80005e72:	30 0c       	mov	r12,0
      return false;
80005e74:	cc b8       	rjmp	8000600a <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005e76:	30 49       	mov	r9,4
80005e78:	4e d8       	lddpc	r8,8000602c <fat_mount+0x2f4>
80005e7a:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005e7c:	4e aa       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005e7e:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005e82:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005e84:	f5 38 00 0d 	ld.ub	r8,r10[13]
80005e88:	b3 38       	mul	r8,r9
80005e8a:	5c 58       	castu.b	r8
80005e8c:	4e 1b       	lddpc	r11,80006010 <fat_mount+0x2d8>
80005e8e:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005e90:	30 0b       	mov	r11,0
80005e92:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005e94:	fa cb ff fc 	sub	r11,sp,-4
80005e98:	fa c7 ff f9 	sub	r7,sp,-7
80005e9c:	f5 3c 00 16 	ld.ub	r12,r10[22]
80005ea0:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005ea2:	fa ce ff fa 	sub	lr,sp,-6
80005ea6:	f5 3a 00 17 	ld.ub	r10,r10[23]
80005eaa:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80005eac:	40 1a       	lddsp	r10,sp[0x4]
80005eae:	58 0a       	cp.w	r10,0
80005eb0:	c0 e1       	brne	80005ecc <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005eb2:	4d da       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005eb4:	f5 3c 00 24 	ld.ub	r12,r10[36]
80005eb8:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005eba:	f5 3c 00 25 	ld.ub	r12,r10[37]
80005ebe:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005ec0:	f5 3c 00 26 	ld.ub	r12,r10[38]
80005ec4:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80005ec6:	f5 3a 00 27 	ld.ub	r10,r10[39]
80005eca:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80005ecc:	12 95       	mov	r5,r9
80005ece:	40 1c       	lddsp	r12,sp[0x4]
80005ed0:	f2 0c 02 4c 	mul	r12,r9,r12
80005ed4:	4c fa       	lddpc	r10,80006010 <fat_mount+0x2d8>
80005ed6:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005ed8:	4d 3a       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005eda:	f5 3a 00 13 	ld.ub	r10,r10[19]
80005ede:	58 0a       	cp.w	r10,0
80005ee0:	c1 61       	brne	80005f0c <fat_mount+0x1d4>
80005ee2:	4d 16       	lddpc	r6,80006024 <fat_mount+0x2ec>
80005ee4:	ed 34 00 14 	ld.ub	r4,r6[20]
80005ee8:	30 06       	mov	r6,0
80005eea:	ec 04 18 00 	cp.b	r4,r6
80005eee:	c0 f1       	brne	80005f0c <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005ef0:	4c da       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005ef2:	f5 36 00 20 	ld.ub	r6,r10[32]
80005ef6:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005ef8:	f5 37 00 21 	ld.ub	r7,r10[33]
80005efc:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005efe:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005f02:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005f04:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005f08:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005f0a:	c0 98       	rjmp	80005f1c <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005f0c:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005f0e:	4c 6a       	lddpc	r10,80006024 <fat_mount+0x2ec>
80005f10:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005f14:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005f16:	30 0a       	mov	r10,0
80005f18:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005f1a:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005f1c:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005f1e:	4b da       	lddpc	r10,80006010 <fat_mount+0x2d8>
80005f20:	f8 0b 15 01 	lsl	r11,r12,0x1
80005f24:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005f28:	fa c6 ff f6 	sub	r6,sp,-10
80005f2c:	fa c7 ff f4 	sub	r7,sp,-12
80005f30:	4b db       	lddpc	r11,80006024 <fat_mount+0x2ec>
80005f32:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005f36:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005f38:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005f3c:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005f3e:	f2 03 15 04 	lsl	r3,r9,0x4
80005f42:	9a de       	ld.uh	lr,sp[0xa]
80005f44:	e6 0e 00 0e 	add	lr,r3,lr
80005f48:	a5 7e       	lsl	lr,0x5
80005f4a:	20 1e       	sub	lr,1
80005f4c:	f2 03 15 09 	lsl	r3,r9,0x9
80005f50:	fc 03 0c 02 	divs	r2,lr,r3
80005f54:	e4 09 02 4e 	mul	lr,r2,r9
80005f58:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005f5c:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005f60:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005f62:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005f66:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005f68:	9a 57       	ld.sh	r7,sp[0xa]
80005f6a:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005f6e:	0e 96       	mov	r6,r7
80005f70:	ee 0b 01 0b 	sub	r11,r7,r11
80005f74:	b3 3b       	mul	r11,r9
80005f76:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005f78:	ee 09 02 49 	mul	r9,r7,r9
80005f7c:	5c 79       	castu.h	r9
80005f7e:	4a 8b       	lddpc	r11,8000601c <fat_mount+0x2e4>
80005f80:	76 0b       	ld.w	r11,r11[0x0]
80005f82:	f2 0b 00 0b 	add	r11,r9,r11
80005f86:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005f88:	5c 7e       	castu.h	lr
80005f8a:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005f8e:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005f90:	58 08       	cp.w	r8,0
80005f92:	c3 b0       	breq	80006008 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005f94:	a9 35       	mul	r5,r4
80005f96:	ea 09 01 09 	sub	r9,r5,r9
80005f9a:	18 19       	sub	r9,r12
80005f9c:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005f9e:	30 1a       	mov	r10,1
80005fa0:	f4 08 18 00 	cp.b	r8,r10
80005fa4:	c0 70       	breq	80005fb2 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005fa6:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005fa8:	a1 98       	lsr	r8,0x1
80005faa:	f4 08 18 00 	cp.b	r8,r10
80005fae:	cf c1       	brne	80005fa6 <fat_mount+0x26e>
80005fb0:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005fb2:	40 18       	lddsp	r8,sp[0x4]
80005fb4:	f0 ca ff fe 	sub	r10,r8,-2
80005fb8:	49 69       	lddpc	r9,80006010 <fat_mount+0x2d8>
80005fba:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80005fbc:	e0 48 0f f4 	cp.w	r8,4084
80005fc0:	e0 8b 00 07 	brhi	80005fce <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80005fc4:	30 19       	mov	r9,1
80005fc6:	49 58       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fc8:	b0 89       	st.b	r8[0x0],r9
80005fca:	30 1c       	mov	r12,1
80005fcc:	c1 f8       	rjmp	8000600a <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80005fce:	e0 48 ff f4 	cp.w	r8,65524
80005fd2:	e0 8b 00 07 	brhi	80005fe0 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80005fd6:	30 29       	mov	r9,2
80005fd8:	49 08       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fda:	b0 89       	st.b	r8[0x0],r9
80005fdc:	30 1c       	mov	r12,1
80005fde:	c1 68       	rjmp	8000600a <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80005fe0:	30 39       	mov	r9,3
80005fe2:	48 e8       	lddpc	r8,80006018 <fat_mount+0x2e0>
80005fe4:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80005fe6:	48 b8       	lddpc	r8,80006010 <fat_mount+0x2d8>
80005fe8:	2e 88       	sub	r8,-24
80005fea:	48 f9       	lddpc	r9,80006024 <fat_mount+0x2ec>
80005fec:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80005ff0:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80005ff2:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80005ff6:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80005ff8:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005ffc:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80005ffe:	f3 39 00 2f 	ld.ub	r9,r9[47]
80006002:	b0 89       	st.b	r8[0x0],r9
80006004:	30 1c       	mov	r12,1
80006006:	c0 28       	rjmp	8000600a <fat_mount+0x2d2>
80006008:	30 0c       	mov	r12,0
   }
   }

   return true;
}
8000600a:	2f dd       	sub	sp,-12
8000600c:	d8 32       	popm	r0-r7,pc
8000600e:	00 00       	add	r0,r0
80006010:	00 00       	add	r0,r0
80006012:	0b cc       	ld.ub	r12,r5[0x4]
80006014:	80 00       	ld.sh	r0,r0[0x0]
80006016:	42 d0       	lddsp	r0,sp[0xb4]
80006018:	00 00       	add	r0,r0
8000601a:	0c 18       	sub	r8,r6
8000601c:	00 00       	add	r0,r0
8000601e:	09 88       	ld.ub	r8,r4[0x0]
80006020:	80 00       	ld.sh	r0,r0[0x0]
80006022:	51 6c       	stdsp	sp[0x58],r12
80006024:	00 00       	add	r0,r0
80006026:	09 cc       	ld.ub	r12,r4[0x4]
80006028:	80 00       	ld.sh	r0,r0[0x0]
8000602a:	48 d4       	lddpc	r4,8000605c <file_close+0x28>
8000602c:	00 00       	add	r0,r0
8000602e:	0c 1c       	sub	r12,r6
80006030:	80 00       	ld.sh	r0,r0[0x0]
80006032:	6d b4       	ld.w	r4,r6[0x6c]

80006034 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80006034:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80006036:	f0 1f 00 0a 	mcall	8000605c <file_close+0x28>
8000603a:	c1 00       	breq	8000605a <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
8000603c:	48 98       	lddpc	r8,80006060 <file_close+0x2c>
8000603e:	11 88       	ld.ub	r8,r8[0x0]
80006040:	e2 18 00 02 	andl	r8,0x2,COH
80006044:	c0 80       	breq	80006054 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80006046:	f0 1f 00 08 	mcall	80006064 <file_close+0x30>
8000604a:	c0 80       	breq	8000605a <file_close+0x26>
            return;           // error
         fat_write_entry_file();
8000604c:	f0 1f 00 07 	mcall	80006068 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80006050:	f0 1f 00 07 	mcall	8000606c <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80006054:	30 09       	mov	r9,0
80006056:	48 38       	lddpc	r8,80006060 <file_close+0x2c>
80006058:	b0 89       	st.b	r8[0x0],r9
8000605a:	d8 02       	popm	pc
8000605c:	80 00       	ld.sh	r0,r0[0x0]
8000605e:	52 b0       	stdsp	sp[0xac],r0
80006060:	00 00       	add	r0,r0
80006062:	09 8c       	ld.ub	r12,r4[0x0]
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	4f 04       	lddpc	r4,80006224 <file_open+0x40>
80006068:	80 00       	ld.sh	r0,r0[0x0]
8000606a:	46 b4       	lddsp	r4,sp[0x1ac]
8000606c:	80 00       	ld.sh	r0,r0[0x0]
8000606e:	48 68       	lddpc	r8,80006084 <file_write_buf+0x14>

80006070 <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006070:	d4 31       	pushm	r0-r7,lr
80006072:	20 1d       	sub	sp,4
80006074:	18 95       	mov	r5,r12
80006076:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
80006078:	f0 1f 00 4f 	mcall	800061b4 <file_write_buf+0x144>
8000607c:	e0 80 00 98 	breq	800061ac <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80006080:	4c e8       	lddpc	r8,800061b8 <file_write_buf+0x148>
80006082:	11 88       	ld.ub	r8,r8[0x0]
80006084:	e2 18 00 02 	andl	r8,0x2,COH
80006088:	c0 40       	breq	80006090 <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
8000608a:	58 06       	cp.w	r6,0
8000608c:	c0 71       	brne	8000609a <file_write_buf+0x2a>
8000608e:	c8 f8       	rjmp	800061ac <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
80006090:	31 59       	mov	r9,21
80006092:	4c b8       	lddpc	r8,800061bc <file_write_buf+0x14c>
80006094:	b0 89       	st.b	r8[0x0],r9
80006096:	30 00       	mov	r0,0
      return false;
80006098:	c8 b8       	rjmp	800061ae <file_write_buf+0x13e>
8000609a:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
8000609c:	4c 74       	lddpc	r4,800061b8 <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
8000609e:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
800060a2:	4c 87       	lddpc	r7,800061c0 <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800060a4:	68 39       	ld.w	r9,r4[0xc]
800060a6:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
800060aa:	30 0b       	mov	r11,0
800060ac:	f6 02 19 00 	cp.h	r2,r11
800060b0:	5f 08       	sreq	r8
800060b2:	ec 01 19 00 	cp.h	r1,r6
800060b6:	f9 ba 03 01 	movlo	r10,1
800060ba:	f9 ba 02 00 	movhs	r10,0
800060be:	f1 ea 00 0a 	and	r10,r8,r10
800060c2:	f6 0a 18 00 	cp.b	r10,r11
800060c6:	c3 10       	breq	80006128 <file_write_buf+0xb8>
800060c8:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
800060cc:	c2 e1       	brne	80006128 <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
800060ce:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
800060d2:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
800060d6:	06 9b       	mov	r11,r3
800060d8:	30 1c       	mov	r12,1
800060da:	f0 1f 00 3b 	mcall	800061c4 <file_write_buf+0x154>
800060de:	c6 70       	breq	800061ac <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
800060e0:	6e 18       	ld.w	r8,r7[0x4]
800060e2:	10 33       	cp.w	r3,r8
800060e4:	c0 62       	brcc	800060f0 <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
800060e6:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
800060e8:	6e 18       	ld.w	r8,r7[0x4]
800060ea:	58 08       	cp.w	r8,0
800060ec:	c0 51       	brne	800060f6 <file_write_buf+0x86>
800060ee:	c1 98       	rjmp	80006120 <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
800060f0:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
800060f4:	cf ab       	rjmp	800060e8 <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
800060f6:	0a 9a       	mov	r10,r5
800060f8:	6e 0b       	ld.w	r11,r7[0x0]
800060fa:	4b 49       	lddpc	r9,800061c8 <file_write_buf+0x158>
800060fc:	13 8c       	ld.ub	r12,r9[0x0]
800060fe:	f0 1f 00 34 	mcall	800061cc <file_write_buf+0x15c>
80006102:	c0 50       	breq	8000610c <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
80006104:	30 19       	mov	r9,1
80006106:	4a e8       	lddpc	r8,800061bc <file_write_buf+0x14c>
80006108:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
8000610a:	c5 28       	rjmp	800061ae <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
8000610c:	6e 18       	ld.w	r8,r7[0x4]
8000610e:	20 18       	sub	r8,1
80006110:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006112:	6e 09       	ld.w	r9,r7[0x0]
80006114:	2f f9       	sub	r9,-1
80006116:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006118:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
8000611c:	58 08       	cp.w	r8,0
8000611e:	ce c1       	brne	800060f6 <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80006120:	e4 03 15 09 	lsl	r3,r2,0x9
80006124:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
80006126:	c3 08       	rjmp	80006186 <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80006128:	68 2a       	ld.w	r10,r4[0x8]
8000612a:	14 39       	cp.w	r9,r10
8000612c:	5f 09       	sreq	r9
8000612e:	12 68       	and	r8,r9
80006130:	30 0b       	mov	r11,0
80006132:	f6 08 18 00 	cp.b	r8,r11
80006136:	c0 e0       	breq	80006152 <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
80006138:	30 1b       	mov	r11,1
8000613a:	16 9c       	mov	r12,r11
8000613c:	f0 1f 00 22 	mcall	800061c4 <file_write_buf+0x154>
80006140:	c3 60       	breq	800061ac <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80006142:	6e 09       	ld.w	r9,r7[0x0]
80006144:	4a 38       	lddpc	r8,800061d0 <file_write_buf+0x160>
80006146:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80006148:	30 0c       	mov	r12,0
8000614a:	f0 1f 00 23 	mcall	800061d4 <file_write_buf+0x164>
8000614e:	c0 71       	brne	8000615c <file_write_buf+0xec>
80006150:	c2 e8       	rjmp	800061ac <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
80006152:	30 1b       	mov	r11,1
80006154:	30 2c       	mov	r12,2
80006156:	f0 1f 00 1c 	mcall	800061c4 <file_write_buf+0x154>
8000615a:	c2 90       	breq	800061ac <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
8000615c:	f0 1f 00 1f 	mcall	800061d8 <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80006160:	e0 63 02 00 	mov	r3,512
80006164:	04 13       	sub	r3,r2
80006166:	ec 03 19 00 	cp.h	r3,r6
8000616a:	ec 03 17 20 	movhs	r3,r6
8000616e:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
80006170:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80006174:	50 09       	stdsp	sp[0x0],r9
80006176:	12 9a       	mov	r10,r9
80006178:	0a 9b       	mov	r11,r5
8000617a:	49 9c       	lddpc	r12,800061dc <file_write_buf+0x16c>
8000617c:	04 0c       	add	r12,r2
8000617e:	f0 1f 00 19 	mcall	800061e0 <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
80006182:	40 08       	lddsp	r8,sp[0x0]
80006184:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
80006186:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
8000618a:	68 38       	ld.w	r8,r4[0xc]
8000618c:	f2 08 00 08 	add	r8,r9,r8
80006190:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
80006192:	e6 00 00 00 	add	r0,r3,r0
80006196:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
80006198:	06 16       	sub	r6,r3
8000619a:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
8000619c:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
8000619e:	12 38       	cp.w	r8,r9
800061a0:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800061a4:	58 06       	cp.w	r6,0
800061a6:	fe 91 ff 7f 	brne	800060a4 <file_write_buf+0x34>
800061aa:	c0 28       	rjmp	800061ae <file_write_buf+0x13e>
800061ac:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
800061ae:	00 9c       	mov	r12,r0
800061b0:	2f fd       	sub	sp,-4
800061b2:	d8 32       	popm	r0-r7,pc
800061b4:	80 00       	ld.sh	r0,r0[0x0]
800061b6:	52 b0       	stdsp	sp[0xac],r0
800061b8:	00 00       	add	r0,r0
800061ba:	09 8c       	ld.ub	r12,r4[0x0]
800061bc:	00 00       	add	r0,r0
800061be:	0c 1c       	sub	r12,r6
800061c0:	00 00       	add	r0,r0
800061c2:	0c 74       	tst	r4,r6
800061c4:	80 00       	ld.sh	r0,r0[0x0]
800061c6:	50 64       	stdsp	sp[0x18],r4
800061c8:	00 00       	add	r0,r0
800061ca:	0b cc       	ld.ub	r12,r5[0x4]
800061cc:	80 00       	ld.sh	r0,r0[0x0]
800061ce:	6d ec       	ld.w	r12,r6[0x78]
800061d0:	00 00       	add	r0,r0
800061d2:	09 88       	ld.ub	r8,r4[0x0]
800061d4:	80 00       	ld.sh	r0,r0[0x0]
800061d6:	48 d4       	lddpc	r4,80006208 <file_open+0x24>
800061d8:	80 00       	ld.sh	r0,r0[0x0]
800061da:	46 a4       	lddsp	r4,sp[0x1a8]
800061dc:	00 00       	add	r0,r0
800061de:	09 cc       	ld.ub	r12,r4[0x4]
800061e0:	80 00       	ld.sh	r0,r0[0x0]
800061e2:	83 ba       	st.w	r1[0x2c],r10

800061e4 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
800061e4:	eb cd 40 c0 	pushm	r6-r7,lr
800061e8:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
800061ea:	f0 1f 00 20 	mcall	80006268 <file_open+0x84>
800061ee:	c3 a0       	breq	80006262 <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
800061f0:	f0 1f 00 1f 	mcall	8000626c <file_open+0x88>
800061f4:	c3 70       	breq	80006262 <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
800061f6:	0e 96       	mov	r6,r7
800061f8:	0e 98       	mov	r8,r7
800061fa:	e2 18 00 02 	andl	r8,0x2,COH
800061fe:	c1 90       	breq	80006230 <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80006200:	30 1c       	mov	r12,1
80006202:	f0 1f 00 1c 	mcall	80006270 <file_open+0x8c>
80006206:	c2 e0       	breq	80006262 <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80006208:	49 b8       	lddpc	r8,80006274 <file_open+0x90>
8000620a:	11 a8       	ld.ub	r8,r8[0x2]
8000620c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006210:	c0 60       	breq	8000621c <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80006212:	31 59       	mov	r9,21
80006214:	49 98       	lddpc	r8,80006278 <file_open+0x94>
80006216:	b0 89       	st.b	r8[0x0],r9
80006218:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000621c:	49 88       	lddpc	r8,8000627c <file_open+0x98>
8000621e:	11 8c       	ld.ub	r12,r8[0x0]
80006220:	f0 1f 00 18 	mcall	80006280 <file_open+0x9c>
80006224:	c0 a0       	breq	80006238 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006226:	31 49       	mov	r9,20
80006228:	49 48       	lddpc	r8,80006278 <file_open+0x94>
8000622a:	b0 89       	st.b	r8[0x0],r9
8000622c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80006230:	30 0c       	mov	r12,0
80006232:	f0 1f 00 10 	mcall	80006270 <file_open+0x8c>
80006236:	c1 60       	breq	80006262 <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006238:	0c 98       	mov	r8,r6
8000623a:	e2 18 00 04 	andl	r8,0x4,COH
8000623e:	c0 40       	breq	80006246 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80006240:	30 09       	mov	r9,0
80006242:	48 d8       	lddpc	r8,80006274 <file_open+0x90>
80006244:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80006246:	e2 16 00 08 	andl	r6,0x8,COH
8000624a:	c0 50       	breq	80006254 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000624c:	30 09       	mov	r9,0
8000624e:	48 a8       	lddpc	r8,80006274 <file_open+0x90>
80006250:	91 39       	st.w	r8[0xc],r9
80006252:	c0 48       	rjmp	8000625a <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80006254:	48 88       	lddpc	r8,80006274 <file_open+0x90>
80006256:	70 29       	ld.w	r9,r8[0x8]
80006258:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000625a:	48 78       	lddpc	r8,80006274 <file_open+0x90>
8000625c:	b0 87       	st.b	r8[0x0],r7
8000625e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80006262:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006266:	00 00       	add	r0,r0
80006268:	80 00       	ld.sh	r0,r0[0x0]
8000626a:	52 d4       	stdsp	sp[0xb4],r4
8000626c:	80 00       	ld.sh	r0,r0[0x0]
8000626e:	3f f0       	mov	r0,-1
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	47 04       	lddsp	r4,sp[0x1c0]
80006274:	00 00       	add	r0,r0
80006276:	09 8c       	ld.ub	r12,r4[0x0]
80006278:	00 00       	add	r0,r0
8000627a:	0c 1c       	sub	r12,r6
8000627c:	00 00       	add	r0,r0
8000627e:	0b cc       	ld.ub	r12,r5[0x4]
80006280:	80 00       	ld.sh	r0,r0[0x0]
80006282:	6d bc       	ld.w	r12,r6[0x6c]

80006284 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80006284:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80006286:	48 69       	lddpc	r9,8000629c <nav_getindex+0x18>
80006288:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000628a:	48 6a       	lddpc	r10,800062a0 <nav_getindex+0x1c>
8000628c:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
8000628e:	13 89       	ld.ub	r9,r9[0x0]
80006290:	b8 89       	st.b	r12[0x0],r9
80006292:	99 1b       	st.w	r12[0x4],r11
80006294:	b8 4a       	st.h	r12[0x8],r10
}
80006296:	2f dd       	sub	sp,-12
80006298:	5e fc       	retal	r12
8000629a:	00 00       	add	r0,r0
8000629c:	00 00       	add	r0,r0
8000629e:	0b cc       	ld.ub	r12,r5[0x4]
800062a0:	00 00       	add	r0,r0
800062a2:	0c 18       	sub	r8,r6

800062a4 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
800062a4:	d4 01       	pushm	lr
   return fat_entry_is_dir();
800062a6:	f0 1f 00 02 	mcall	800062ac <nav_file_isdir+0x8>
}
800062aa:	d8 02       	popm	pc
800062ac:	80 00       	ld.sh	r0,r0[0x0]
800062ae:	42 b8       	lddsp	r8,sp[0xac]

800062b0 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
800062b0:	d4 31       	pushm	r0-r7,lr
800062b2:	20 1d       	sub	sp,4
800062b4:	18 95       	mov	r5,r12
800062b6:	16 96       	mov	r6,r11
800062b8:	14 97       	mov	r7,r10
800062ba:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
800062bc:	f0 1f 00 2f 	mcall	80006378 <nav_file_name+0xc8>
800062c0:	c5 80       	breq	80006370 <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
800062c2:	58 07       	cp.w	r7,0
800062c4:	c0 50       	breq	800062ce <nav_file_name+0x1e>
800062c6:	58 06       	cp.w	r6,0
800062c8:	c0 31       	brne	800062ce <nav_file_name+0x1e>
800062ca:	30 1c       	mov	r12,1
800062cc:	c5 38       	rjmp	80006372 <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
800062ce:	4a c8       	lddpc	r8,8000637c <nav_file_name+0xcc>
800062d0:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800062d2:	58 04       	cp.w	r4,0
800062d4:	c0 31       	brne	800062da <nav_file_name+0x2a>
800062d6:	30 10       	mov	r0,1
800062d8:	c0 68       	rjmp	800062e4 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062da:	08 99       	mov	r9,r4
800062dc:	20 19       	sub	r9,1
800062de:	4a 88       	lddpc	r8,8000637c <nav_file_name+0xcc>
800062e0:	b0 19       	st.h	r8[0x2],r9
800062e2:	30 00       	mov	r0,0
800062e4:	30 09       	mov	r9,0
800062e6:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800062e8:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800062ea:	4a 52       	lddpc	r2,8000637c <nav_file_name+0xcc>
800062ec:	c0 28       	rjmp	800062f0 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062ee:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
800062f0:	f0 1f 00 24 	mcall	80006380 <nav_file_name+0xd0>
800062f4:	c3 e0       	breq	80006370 <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
800062f6:	58 00       	cp.w	r0,0
800062f8:	c0 70       	breq	80006306 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
800062fa:	0e 9a       	mov	r10,r7
800062fc:	0c 9b       	mov	r11,r6
800062fe:	0a 9c       	mov	r12,r5
80006300:	f0 1f 00 21 	mcall	80006384 <nav_file_name+0xd4>
80006304:	c3 78       	rjmp	80006372 <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80006306:	06 99       	mov	r9,r3
80006308:	0e 9a       	mov	r10,r7
8000630a:	0c 9b       	mov	r11,r6
8000630c:	0a 9c       	mov	r12,r5
8000630e:	f0 1f 00 1f 	mcall	80006388 <nav_file_name+0xd8>
80006312:	c1 20       	breq	80006336 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80006314:	49 e8       	lddpc	r8,8000638c <nav_file_name+0xdc>
80006316:	11 89       	ld.ub	r9,r8[0x0]
80006318:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000631a:	f0 09 18 00 	cp.b	r9,r8
8000631e:	eb f8 12 00 	ld.shne	r8,r5[0x0]
80006322:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80006326:	f1 d9 e1 08 	addne	r8,r8,r9
8000632a:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000632e:	49 48       	lddpc	r8,8000637c <nav_file_name+0xcc>
80006330:	b0 14       	st.h	r8[0x2],r4
80006332:	30 1c       	mov	r12,1
         return true;
80006334:	c1 f8       	rjmp	80006372 <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006336:	49 79       	lddpc	r9,80006390 <nav_file_name+0xe0>
80006338:	13 88       	ld.ub	r8,r9[0x0]
8000633a:	e2 08 18 00 	cp.b	r8,r1
8000633e:	c0 70       	breq	8000634c <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80006340:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80006342:	30 b9       	mov	r9,11
80006344:	f2 08 18 00 	cp.b	r8,r9
80006348:	c1 41       	brne	80006370 <nav_file_name+0xc0>
8000634a:	cd 2b       	rjmp	800062ee <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000634c:	49 09       	lddpc	r9,8000638c <nav_file_name+0xdc>
8000634e:	13 88       	ld.ub	r8,r9[0x0]
80006350:	30 09       	mov	r9,0
80006352:	f2 08 18 00 	cp.b	r8,r9
80006356:	c0 60       	breq	80006362 <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80006358:	40 08       	lddsp	r8,sp[0x0]
8000635a:	2f 38       	sub	r8,-13
8000635c:	5c 88       	casts.h	r8
8000635e:	50 08       	stdsp	sp[0x0],r8
80006360:	c0 48       	rjmp	80006368 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80006362:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80006364:	20 d6       	sub	r6,13
80006366:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006368:	84 18       	ld.sh	r8,r2[0x2]
8000636a:	20 18       	sub	r8,1
8000636c:	a4 18       	st.h	r2[0x2],r8
8000636e:	cc 1b       	rjmp	800062f0 <nav_file_name+0x40>
80006370:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
80006372:	2f fd       	sub	sp,-4
80006374:	d8 32       	popm	r0-r7,pc
80006376:	00 00       	add	r0,r0
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	52 98       	stdsp	sp[0xa4],r8
8000637c:	00 00       	add	r0,r0
8000637e:	0c 18       	sub	r8,r6
80006380:	80 00       	ld.sh	r0,r0[0x0]
80006382:	4f 04       	lddpc	r4,80006540 <nav_filelist_reset+0x14>
80006384:	80 00       	ld.sh	r0,r0[0x0]
80006386:	44 e0       	lddsp	r0,sp[0x138]
80006388:	80 00       	ld.sh	r0,r0[0x0]
8000638a:	43 4c       	lddsp	r12,sp[0xd0]
8000638c:	00 00       	add	r0,r0
8000638e:	0c 1d       	sub	sp,r6
80006390:	00 00       	add	r0,r0
80006392:	0c 1c       	sub	r12,r6

80006394 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
80006394:	d4 31       	pushm	r0-r7,lr
80006396:	20 4d       	sub	sp,16
80006398:	50 0c       	stdsp	sp[0x0],r12
8000639a:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
8000639c:	f0 1f 00 51 	mcall	800064e0 <nav_filelist_set+0x14c>
800063a0:	e0 80 00 9e 	breq	800064dc <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
800063a4:	4d 08       	lddpc	r8,800064e4 <nav_filelist_set+0x150>
800063a6:	90 18       	ld.sh	r8,r8[0x2]
800063a8:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
800063aa:	4d 08       	lddpc	r8,800064e8 <nav_filelist_set+0x154>
800063ac:	f1 0a 00 24 	ld.sh	r10,r8[36]
800063b0:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800063b2:	f1 38 00 2c 	ld.ub	r8,r8[44]
800063b6:	50 38       	stdsp	sp[0xc],r8
800063b8:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ba:	4c b7       	lddpc	r7,800064e4 <nav_filelist_set+0x150>
800063bc:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063be:	4c b6       	lddpc	r6,800064e8 <nav_filelist_set+0x154>
800063c0:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063c2:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800063c4:	4c a5       	lddpc	r5,800064ec <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063c6:	58 02       	cp.w	r2,0
800063c8:	c0 31       	brne	800063ce <nav_filelist_set+0x3a>
800063ca:	58 03       	cp.w	r3,0
800063cc:	c0 c0       	breq	800063e4 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ce:	8e 18       	ld.sh	r8,r7[0x2]
800063d0:	e2 08 19 00 	cp.h	r8,r1
800063d4:	c0 51       	brne	800063de <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
800063d6:	30 89       	mov	r9,8
800063d8:	4c 58       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800063da:	b0 89       	st.b	r8[0x0],r9
            break;
800063dc:	c7 38       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800063de:	2f f8       	sub	r8,-1
800063e0:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063e2:	c1 d8       	rjmp	8000641c <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800063e4:	8e 18       	ld.sh	r8,r7[0x2]
800063e6:	e0 08 19 00 	cp.h	r8,r0
800063ea:	c0 51       	brne	800063f4 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
800063ec:	30 99       	mov	r9,9
800063ee:	4c 08       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800063f0:	b0 89       	st.b	r8[0x0],r9
            break;
800063f2:	c6 88       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800063f4:	58 08       	cp.w	r8,0
800063f6:	c1 11       	brne	80006418 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063f8:	ed 38 00 2c 	ld.ub	r8,r6[44]
800063fc:	e8 08 18 00 	cp.b	r8,r4
80006400:	c0 80       	breq	80006410 <nav_filelist_set+0x7c>
80006402:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006406:	e8 08 18 00 	cp.b	r8,r4
8000640a:	c0 31       	brne	80006410 <nav_filelist_set+0x7c>
8000640c:	30 13       	mov	r3,1
8000640e:	c0 78       	rjmp	8000641c <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80006410:	30 99       	mov	r9,9
80006412:	4b 78       	lddpc	r8,800064ec <nav_filelist_set+0x158>
80006414:	b0 89       	st.b	r8[0x0],r9
               break;
80006416:	c5 68       	rjmp	800064c2 <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006418:	20 18       	sub	r8,1
8000641a:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
8000641c:	f0 1f 00 35 	mcall	800064f0 <nav_filelist_set+0x15c>
80006420:	c0 71       	brne	8000642e <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006422:	0b 89       	ld.ub	r9,r5[0x0]
80006424:	31 a8       	mov	r8,26
80006426:	f0 09 18 00 	cp.b	r9,r8
8000642a:	c3 20       	breq	8000648e <nav_filelist_set+0xfa>
8000642c:	c4 b8       	rjmp	800064c2 <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000642e:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006432:	e8 08 18 00 	cp.b	r8,r4
80006436:	5f 1c       	srne	r12
80006438:	f0 1f 00 2f 	mcall	800064f4 <nav_filelist_set+0x160>
8000643c:	c1 c0       	breq	80006474 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000643e:	58 03       	cp.w	r3,0
80006440:	cc 31       	brne	800063c6 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80006442:	58 02       	cp.w	r2,0
80006444:	ed f8 12 12 	ld.shne	r8,r6[0x24]
80006448:	f7 b8 01 ff 	subne	r8,-1
8000644c:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
80006450:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
80006454:	f7 b8 00 01 	subeq	r8,1
80006458:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
8000645c:	40 09       	lddsp	r9,sp[0x0]
8000645e:	58 09       	cp.w	r9,0
80006460:	c0 51       	brne	8000646a <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80006462:	f0 1f 00 26 	mcall	800064f8 <nav_filelist_set+0x164>
80006466:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80006468:	c3 a8       	rjmp	800064dc <nav_filelist_set+0x148>
           }
           u16_nb--;
8000646a:	40 08       	lddsp	r8,sp[0x0]
8000646c:	20 18       	sub	r8,1
8000646e:	5c 88       	casts.h	r8
80006470:	50 08       	stdsp	sp[0x0],r8
           continue;
80006472:	ca ab       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80006474:	0b 88       	ld.ub	r8,r5[0x0]
80006476:	30 a9       	mov	r9,10
80006478:	f2 08 18 00 	cp.b	r8,r9
8000647c:	5f 09       	sreq	r9
8000647e:	31 aa       	mov	r10,26
80006480:	f4 08 18 00 	cp.b	r8,r10
80006484:	5f 08       	sreq	r8
80006486:	10 49       	or	r9,r8
80006488:	e8 09 18 00 	cp.b	r9,r4
8000648c:	c9 d0       	breq	800063c6 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000648e:	58 03       	cp.w	r3,0
80006490:	c0 50       	breq	8000649a <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
80006492:	ed 64 00 2c 	st.b	r6[44],r4
80006496:	30 03       	mov	r3,0
            continue;
80006498:	c9 7b       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000649a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000649e:	30 1a       	mov	r10,1
800064a0:	f4 08 18 00 	cp.b	r8,r10
800064a4:	c0 60       	breq	800064b0 <nav_filelist_set+0x11c>
800064a6:	ed 38 00 2d 	ld.ub	r8,r6[45]
800064aa:	e8 08 18 00 	cp.b	r8,r4
800064ae:	c0 50       	breq	800064b8 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800064b0:	30 99       	mov	r9,9
800064b2:	48 f8       	lddpc	r8,800064ec <nav_filelist_set+0x158>
800064b4:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
800064b6:	c0 68       	rjmp	800064c2 <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800064b8:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
800064ba:	30 19       	mov	r9,1
800064bc:	ed 69 00 2c 	st.b	r6[44],r9
800064c0:	c8 3b       	rjmp	800063c6 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
800064c2:	48 a8       	lddpc	r8,800064e8 <nav_filelist_set+0x154>
800064c4:	40 3a       	lddsp	r10,sp[0xc]
800064c6:	58 0a       	cp.w	r10,0
800064c8:	5f 19       	srne	r9
800064ca:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
800064ce:	48 69       	lddpc	r9,800064e4 <nav_filelist_set+0x150>
800064d0:	40 2a       	lddsp	r10,sp[0x8]
800064d2:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
800064d4:	40 19       	lddsp	r9,sp[0x4]
800064d6:	f1 59 00 24 	st.h	r8[36],r9
800064da:	30 0c       	mov	r12,0
   return false;
}
800064dc:	2f cd       	sub	sp,-16
800064de:	d8 32       	popm	r0-r7,pc
800064e0:	80 00       	ld.sh	r0,r0[0x0]
800064e2:	52 f8       	stdsp	sp[0xbc],r8
800064e4:	00 00       	add	r0,r0
800064e6:	0c 18       	sub	r8,r6
800064e8:	00 00       	add	r0,r0
800064ea:	0b cc       	ld.ub	r12,r5[0x4]
800064ec:	00 00       	add	r0,r0
800064ee:	0c 1c       	sub	r12,r6
800064f0:	80 00       	ld.sh	r0,r0[0x0]
800064f2:	4f 04       	lddpc	r4,800066b0 <nav_file_del+0x20>
800064f4:	80 00       	ld.sh	r0,r0[0x0]
800064f6:	46 30       	lddsp	r0,sp[0x18c]
800064f8:	80 00       	ld.sh	r0,r0[0x0]
800064fa:	45 e8       	lddsp	r8,sp[0x178]

800064fc <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
800064fc:	d4 21       	pushm	r4-r7,lr
800064fe:	18 95       	mov	r5,r12
80006500:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80006502:	30 16       	mov	r6,1
80006504:	30 07       	mov	r7,0
80006506:	0c 9b       	mov	r11,r6
80006508:	0e 9c       	mov	r12,r7
8000650a:	f0 1f 00 07 	mcall	80006524 <nav_filelist_findname+0x28>
8000650e:	c0 90       	breq	80006520 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80006510:	08 99       	mov	r9,r4
80006512:	0e 9a       	mov	r10,r7
80006514:	0e 9b       	mov	r11,r7
80006516:	0a 9c       	mov	r12,r5
80006518:	f0 1f 00 04 	mcall	80006528 <nav_filelist_findname+0x2c>
8000651c:	cf 50       	breq	80006506 <nav_filelist_findname+0xa>
8000651e:	30 1c       	mov	r12,1
         return true;
   }
}
80006520:	d8 22       	popm	r4-r7,pc
80006522:	00 00       	add	r0,r0
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	63 94       	ld.w	r4,r1[0x64]
80006528:	80 00       	ld.sh	r0,r0[0x0]
8000652a:	62 b0       	ld.w	r0,r1[0x2c]

8000652c <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
8000652c:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
8000652e:	f0 1f 00 04 	mcall	8000653c <nav_filelist_reset+0x10>
80006532:	c0 40       	breq	8000653a <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80006534:	f0 1f 00 03 	mcall	80006540 <nav_filelist_reset+0x14>
80006538:	30 1c       	mov	r12,1
   return true;
}
8000653a:	d8 02       	popm	pc
8000653c:	80 00       	ld.sh	r0,r0[0x0]
8000653e:	52 f8       	stdsp	sp[0xbc],r8
80006540:	80 00       	ld.sh	r0,r0[0x0]
80006542:	42 d0       	lddsp	r0,sp[0xb4]

80006544 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80006544:	eb cd 40 80 	pushm	r7,lr
80006548:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000654a:	f0 1f 00 13 	mcall	80006594 <nav_file_create+0x50>
8000654e:	c2 10       	breq	80006590 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
80006550:	30 0b       	mov	r11,0
80006552:	0e 9c       	mov	r12,r7
80006554:	f0 1f 00 11 	mcall	80006598 <nav_file_create+0x54>
80006558:	c0 60       	breq	80006564 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000655a:	32 a9       	mov	r9,42
8000655c:	49 08       	lddpc	r8,8000659c <nav_file_create+0x58>
8000655e:	b0 89       	st.b	r8[0x0],r9
80006560:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
80006564:	0e 9c       	mov	r12,r7
80006566:	f0 1f 00 0f 	mcall	800065a0 <nav_file_create+0x5c>
8000656a:	c1 30       	breq	80006590 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000656c:	48 e8       	lddpc	r8,800065a4 <nav_file_create+0x60>
8000656e:	30 09       	mov	r9,0
80006570:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
80006572:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
80006574:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80006576:	48 d8       	lddpc	r8,800065a8 <nav_file_create+0x64>
80006578:	f1 09 00 24 	ld.sh	r9,r8[36]
8000657c:	2f f9       	sub	r9,-1
8000657e:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
80006582:	30 19       	mov	r9,1
80006584:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80006588:	f0 1f 00 09 	mcall	800065ac <nav_file_create+0x68>
8000658c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006590:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006594:	80 00       	ld.sh	r0,r0[0x0]
80006596:	65 2c       	ld.w	r12,r2[0x48]
80006598:	80 00       	ld.sh	r0,r0[0x0]
8000659a:	64 fc       	ld.w	r12,r2[0x3c]
8000659c:	00 00       	add	r0,r0
8000659e:	0c 1c       	sub	r12,r6
800065a0:	80 00       	ld.sh	r0,r0[0x0]
800065a2:	5c 90       	brev	r0
800065a4:	00 00       	add	r0,r0
800065a6:	09 8c       	ld.ub	r12,r4[0x0]
800065a8:	00 00       	add	r0,r0
800065aa:	0b cc       	ld.ub	r12,r5[0x4]
800065ac:	80 00       	ld.sh	r0,r0[0x0]
800065ae:	48 68       	lddpc	r8,800065c4 <nav_dir_gotoparent+0x14>

800065b0 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
800065b0:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800065b2:	f0 1f 00 1f 	mcall	8000662c <nav_dir_gotoparent+0x7c>
800065b6:	c3 80       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800065b8:	49 e8       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065ba:	70 88       	ld.w	r8,r8[0x20]
800065bc:	58 08       	cp.w	r8,0
800065be:	c0 51       	brne	800065c8 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800065c0:	31 99       	mov	r9,25
800065c2:	49 d8       	lddpc	r8,80006634 <nav_dir_gotoparent+0x84>
800065c4:	b0 89       	st.b	r8[0x0],r9
800065c6:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800065c8:	30 19       	mov	r9,1
800065ca:	49 c8       	lddpc	r8,80006638 <nav_dir_gotoparent+0x88>
800065cc:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
800065ce:	f0 1f 00 1c 	mcall	8000663c <nav_dir_gotoparent+0x8c>
800065d2:	c2 a0       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
800065d4:	f0 1f 00 1b 	mcall	80006640 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
800065d8:	49 68       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065da:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800065dc:	49 a9       	lddpc	r9,80006644 <nav_dir_gotoparent+0x94>
800065de:	72 19       	ld.w	r9,r9[0x4]
800065e0:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
800065e2:	f0 1f 00 1a 	mcall	80006648 <nav_dir_gotoparent+0x98>
800065e6:	c2 00       	breq	80006626 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
800065e8:	49 28       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065ea:	f1 39 00 2d 	ld.ub	r9,r8[45]
800065ee:	30 08       	mov	r8,0
800065f0:	f0 09 18 00 	cp.b	r9,r8
800065f4:	c0 d0       	breq	8000660e <nav_dir_gotoparent+0x5e>
800065f6:	48 f8       	lddpc	r8,80006630 <nav_dir_gotoparent+0x80>
800065f8:	f1 39 00 2c 	ld.ub	r9,r8[44]
800065fc:	30 08       	mov	r8,0
800065fe:	f0 09 18 00 	cp.b	r9,r8
80006602:	c0 60       	breq	8000660e <nav_dir_gotoparent+0x5e>
80006604:	c1 28       	rjmp	80006628 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006606:	6c 18       	ld.w	r8,r6[0x4]
80006608:	0e 38       	cp.w	r8,r7
8000660a:	c0 51       	brne	80006614 <nav_dir_gotoparent+0x64>
8000660c:	c0 e8       	rjmp	80006628 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000660e:	30 15       	mov	r5,1
80006610:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80006612:	48 d6       	lddpc	r6,80006644 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006614:	0a 9b       	mov	r11,r5
80006616:	08 9c       	mov	r12,r4
80006618:	f0 1f 00 0d 	mcall	8000664c <nav_dir_gotoparent+0x9c>
8000661c:	cf 51       	brne	80006606 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000661e:	30 89       	mov	r9,8
80006620:	48 58       	lddpc	r8,80006634 <nav_dir_gotoparent+0x84>
80006622:	b0 89       	st.b	r8[0x0],r9
   return false;
80006624:	d8 22       	popm	r4-r7,pc
80006626:	d8 2a       	popm	r4-r7,pc,r12=0
80006628:	da 2a       	popm	r4-r7,pc,r12=1
8000662a:	00 00       	add	r0,r0
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	52 f8       	stdsp	sp[0xbc],r8
80006630:	00 00       	add	r0,r0
80006632:	0b cc       	ld.ub	r12,r5[0x4]
80006634:	00 00       	add	r0,r0
80006636:	0c 1c       	sub	r12,r6
80006638:	00 00       	add	r0,r0
8000663a:	0c 18       	sub	r8,r6
8000663c:	80 00       	ld.sh	r0,r0[0x0]
8000663e:	4f 04       	lddpc	r4,800067fc <nav_filelist_last+0x10>
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	45 e8       	lddsp	r8,sp[0x178]
80006644:	00 00       	add	r0,r0
80006646:	09 8c       	ld.ub	r12,r4[0x0]
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	65 2c       	ld.w	r12,r2[0x48]
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	63 94       	ld.w	r4,r1[0x64]

80006650 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
80006650:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
80006652:	f0 1f 00 0a 	mcall	80006678 <nav_dir_cd+0x28>
80006656:	c0 f0       	breq	80006674 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80006658:	f0 1f 00 09 	mcall	8000667c <nav_dir_cd+0x2c>
8000665c:	c0 c0       	breq	80006674 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000665e:	48 98       	lddpc	r8,80006680 <nav_dir_cd+0x30>
80006660:	48 99       	lddpc	r9,80006684 <nav_dir_cd+0x34>
80006662:	92 19       	ld.sh	r9,r9[0x2]
80006664:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006668:	48 89       	lddpc	r9,80006688 <nav_dir_cd+0x38>
8000666a:	72 19       	ld.w	r9,r9[0x4]
8000666c:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
8000666e:	f0 1f 00 08 	mcall	8000668c <nav_dir_cd+0x3c>
80006672:	d8 02       	popm	pc
80006674:	d8 0a       	popm	pc,r12=0
80006676:	00 00       	add	r0,r0
80006678:	80 00       	ld.sh	r0,r0[0x0]
8000667a:	52 d4       	stdsp	sp[0xb4],r4
8000667c:	80 00       	ld.sh	r0,r0[0x0]
8000667e:	42 b8       	lddsp	r8,sp[0xac]
80006680:	00 00       	add	r0,r0
80006682:	0b cc       	ld.ub	r12,r5[0x4]
80006684:	00 00       	add	r0,r0
80006686:	0c 18       	sub	r8,r6
80006688:	00 00       	add	r0,r0
8000668a:	09 8c       	ld.ub	r12,r4[0x0]
8000668c:	80 00       	ld.sh	r0,r0[0x0]
8000668e:	65 2c       	ld.w	r12,r2[0x48]

80006690 <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
80006690:	eb cd 40 f8 	pushm	r3-r7,lr
80006694:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
80006696:	f0 1f 00 20 	mcall	80006714 <nav_file_del+0x84>
8000669a:	c1 c1       	brne	800066d2 <nav_file_del+0x42>
8000669c:	c3 a8       	rjmp	80006710 <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000669e:	0c 9b       	mov	r11,r6
800066a0:	0a 9c       	mov	r12,r5
800066a2:	f0 1f 00 1e 	mcall	80006718 <nav_file_del+0x88>
800066a6:	c0 80       	breq	800066b6 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
800066a8:	58 04       	cp.w	r4,0
800066aa:	c1 90       	breq	800066dc <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
800066ac:	31 d9       	mov	r9,29
800066ae:	49 c8       	lddpc	r8,8000671c <nav_file_del+0x8c>
800066b0:	b0 89       	st.b	r8[0x0],r9
800066b2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
800066b6:	f0 1f 00 1b 	mcall	80006720 <nav_file_del+0x90>
800066ba:	c2 b0       	breq	80006710 <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
800066bc:	0c 9c       	mov	r12,r6
800066be:	f0 1f 00 1a 	mcall	80006724 <nav_file_del+0x94>
800066c2:	c2 70       	breq	80006710 <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
800066c4:	58 07       	cp.w	r7,0
800066c6:	c0 31       	brne	800066cc <nav_file_del+0x3c>
800066c8:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
800066cc:	20 17       	sub	r7,1
800066ce:	5c 57       	castu.b	r7

      } // end of second while (1)
800066d0:	ce 7b       	rjmp	8000669e <nav_file_del+0xe>
800066d2:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
800066d6:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
800066d8:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066da:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
800066dc:	f0 1f 00 13 	mcall	80006728 <nav_file_del+0x98>
800066e0:	c0 70       	breq	800066ee <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
800066e2:	f0 1f 00 13 	mcall	8000672c <nav_file_del+0x9c>
800066e6:	c1 50       	breq	80006710 <nav_file_del+0x80>
            return false;
         u8_folder_level++;
800066e8:	2f f7       	sub	r7,-1
800066ea:	5c 57       	castu.b	r7
800066ec:	cd 9b       	rjmp	8000669e <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
800066ee:	0c 9c       	mov	r12,r6
800066f0:	f0 1f 00 10 	mcall	80006730 <nav_file_del+0xa0>
800066f4:	c0 e0       	breq	80006710 <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
800066f6:	0c 9c       	mov	r12,r6
800066f8:	f0 1f 00 0b 	mcall	80006724 <nav_file_del+0x94>
800066fc:	c0 a0       	breq	80006710 <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
800066fe:	e6 07 18 00 	cp.b	r7,r3
80006702:	cc e1       	brne	8000669e <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006704:	f0 1f 00 0c 	mcall	80006734 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006708:	f0 1f 00 0c 	mcall	80006738 <nav_file_del+0xa8>
8000670c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006710:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006714:	80 00       	ld.sh	r0,r0[0x0]
80006716:	52 d4       	stdsp	sp[0xb4],r4
80006718:	80 00       	ld.sh	r0,r0[0x0]
8000671a:	63 94       	ld.w	r4,r1[0x64]
8000671c:	00 00       	add	r0,r0
8000671e:	0c 1c       	sub	r12,r6
80006720:	80 00       	ld.sh	r0,r0[0x0]
80006722:	65 b0       	ld.w	r0,r2[0x6c]
80006724:	80 00       	ld.sh	r0,r0[0x0]
80006726:	55 c4       	stdsp	sp[0x170],r4
80006728:	80 00       	ld.sh	r0,r0[0x0]
8000672a:	62 a4       	ld.w	r4,r1[0x28]
8000672c:	80 00       	ld.sh	r0,r0[0x0]
8000672e:	66 50       	ld.w	r0,r3[0x14]
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	47 04       	lddsp	r4,sp[0x1c0]
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	65 2c       	ld.w	r12,r2[0x48]
80006738:	80 00       	ld.sh	r0,r0[0x0]
8000673a:	48 68       	lddpc	r8,80006750 <nav_filelist_first+0x14>

8000673c <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
8000673c:	d4 21       	pushm	r4-r7,lr
8000673e:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
80006740:	f0 1f 00 0b 	mcall	8000676c <nav_filelist_first+0x30>
80006744:	c0 71       	brne	80006752 <nav_filelist_first+0x16>
80006746:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006748:	e9 38 00 2c 	ld.ub	r8,r4[44]
8000674c:	10 37       	cp.w	r7,r8
8000674e:	c0 51       	brne	80006758 <nav_filelist_first+0x1c>
80006750:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006752:	30 16       	mov	r6,1
80006754:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006756:	48 74       	lddpc	r4,80006770 <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006758:	0c 9b       	mov	r11,r6
8000675a:	0a 9c       	mov	r12,r5
8000675c:	f0 1f 00 06 	mcall	80006774 <nav_filelist_first+0x38>
80006760:	cf 41       	brne	80006748 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
80006762:	30 99       	mov	r9,9
80006764:	48 58       	lddpc	r8,80006778 <nav_filelist_first+0x3c>
80006766:	b0 89       	st.b	r8[0x0],r9
   return false;
}
80006768:	d8 22       	popm	r4-r7,pc
8000676a:	00 00       	add	r0,r0
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	65 2c       	ld.w	r12,r2[0x48]
80006770:	00 00       	add	r0,r0
80006772:	0b cc       	ld.ub	r12,r5[0x4]
80006774:	80 00       	ld.sh	r0,r0[0x0]
80006776:	63 94       	ld.w	r4,r1[0x64]
80006778:	00 00       	add	r0,r0
8000677a:	0c 1c       	sub	r12,r6

8000677c <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
8000677c:	d4 31       	pushm	r0-r7,lr
8000677e:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
80006780:	49 88       	lddpc	r8,800067e0 <nav_filelist_nb+0x64>
80006782:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
80006786:	f0 1f 00 18 	mcall	800067e4 <nav_filelist_nb+0x68>
8000678a:	c0 31       	brne	80006790 <nav_filelist_nb+0x14>
8000678c:	30 02       	mov	r2,0
8000678e:	c2 68       	rjmp	800067da <nav_filelist_nb+0x5e>
80006790:	30 02       	mov	r2,0
80006792:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006794:	30 14       	mov	r4,1
80006796:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80006798:	49 26       	lddpc	r6,800067e0 <nav_filelist_nb+0x64>
8000679a:	30 15       	mov	r5,1
8000679c:	c0 b8       	rjmp	800067b2 <nav_filelist_nb+0x36>
8000679e:	ed 38 00 2c 	ld.ub	r8,r6[44]
800067a2:	ea 08 18 00 	cp.b	r8,r5
800067a6:	c0 41       	brne	800067ae <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
800067a8:	2f f2       	sub	r2,-1
800067aa:	5c 82       	casts.h	r2
800067ac:	c0 38       	rjmp	800067b2 <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
800067ae:	2f f7       	sub	r7,-1
800067b0:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800067b2:	08 9b       	mov	r11,r4
800067b4:	06 9c       	mov	r12,r3
800067b6:	f0 1f 00 0d 	mcall	800067e8 <nav_filelist_nb+0x6c>
800067ba:	cf 21       	brne	8000679e <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
800067bc:	f0 1f 00 0a 	mcall	800067e4 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
800067c0:	3f f8       	mov	r8,-1
800067c2:	f0 01 19 00 	cp.h	r1,r8
800067c6:	c0 60       	breq	800067d2 <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
800067c8:	30 1b       	mov	r11,1
800067ca:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
800067ce:	f0 1f 00 07 	mcall	800067e8 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
800067d2:	58 00       	cp.w	r0,0
800067d4:	c0 31       	brne	800067da <nav_filelist_nb+0x5e>
800067d6:	0e 92       	mov	r2,r7
800067d8:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
800067da:	04 9c       	mov	r12,r2
800067dc:	d8 32       	popm	r0-r7,pc
800067de:	00 00       	add	r0,r0
800067e0:	00 00       	add	r0,r0
800067e2:	0b cc       	ld.ub	r12,r5[0x4]
800067e4:	80 00       	ld.sh	r0,r0[0x0]
800067e6:	65 2c       	ld.w	r12,r2[0x48]
800067e8:	80 00       	ld.sh	r0,r0[0x0]
800067ea:	63 94       	ld.w	r4,r1[0x64]

800067ec <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
800067ec:	eb cd 40 c0 	pushm	r6-r7,lr
800067f0:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
800067f2:	f0 1f 00 0f 	mcall	8000682c <nav_filelist_last+0x40>
800067f6:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
800067fa:	c0 61       	brne	80006806 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
800067fc:	30 99       	mov	r9,9
800067fe:	48 d8       	lddpc	r8,80006830 <nav_filelist_last+0x44>
80006800:	b0 89       	st.b	r8[0x0],r9
80006802:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006806:	0c 9c       	mov	r12,r6
80006808:	f0 1f 00 0b 	mcall	80006834 <nav_filelist_last+0x48>
8000680c:	c0 d0       	breq	80006826 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000680e:	30 18       	mov	r8,1
80006810:	f0 07 19 00 	cp.h	r7,r8
80006814:	c0 31       	brne	8000681a <nav_filelist_last+0x2e>
80006816:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000681a:	0e 9c       	mov	r12,r7
8000681c:	20 2c       	sub	r12,2
8000681e:	30 1b       	mov	r11,1
80006820:	5c 7c       	castu.h	r12
80006822:	f0 1f 00 06 	mcall	80006838 <nav_filelist_last+0x4c>
}
80006826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000682a:	00 00       	add	r0,r0
8000682c:	80 00       	ld.sh	r0,r0[0x0]
8000682e:	67 7c       	ld.w	r12,r3[0x5c]
80006830:	00 00       	add	r0,r0
80006832:	0c 1c       	sub	r12,r6
80006834:	80 00       	ld.sh	r0,r0[0x0]
80006836:	67 3c       	ld.w	r12,r3[0x4c]
80006838:	80 00       	ld.sh	r0,r0[0x0]
8000683a:	63 94       	ld.w	r4,r1[0x64]

8000683c <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
8000683c:	eb cd 40 80 	pushm	r7,lr
80006840:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
80006842:	f0 1f 00 18 	mcall	800068a0 <nav_dir_make+0x64>
80006846:	c2 b0       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006848:	0e 9c       	mov	r12,r7
8000684a:	f0 1f 00 17 	mcall	800068a4 <nav_dir_make+0x68>
8000684e:	c2 70       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
80006850:	49 68       	lddpc	r8,800068a8 <nav_dir_make+0x6c>
80006852:	3f f9       	mov	r9,-1
80006854:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006856:	30 19       	mov	r9,1
80006858:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
8000685a:	f0 1f 00 15 	mcall	800068ac <nav_dir_make+0x70>
8000685e:	c0 71       	brne	8000686c <nav_dir_make+0x30>
   {
      fat_delete_file( false );
80006860:	f0 1f 00 14 	mcall	800068b0 <nav_dir_make+0x74>
      fat_cache_flush();
80006864:	f0 1f 00 14 	mcall	800068b4 <nav_dir_make+0x78>
80006868:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000686c:	49 38       	lddpc	r8,800068b8 <nav_dir_make+0x7c>
8000686e:	48 f9       	lddpc	r9,800068a8 <nav_dir_make+0x6c>
80006870:	72 09       	ld.w	r9,r9[0x0]
80006872:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80006874:	30 09       	mov	r9,0
80006876:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
80006878:	31 09       	mov	r9,16
8000687a:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000687c:	f0 1f 00 10 	mcall	800068bc <nav_dir_make+0x80>
80006880:	c0 e0       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
80006882:	f0 1f 00 10 	mcall	800068c0 <nav_dir_make+0x84>
80006886:	c0 b0       	breq	8000689c <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
80006888:	f0 1f 00 0f 	mcall	800068c4 <nav_dir_make+0x88>
   if( !fat_cache_flush())
8000688c:	f0 1f 00 0a 	mcall	800068b4 <nav_dir_make+0x78>
80006890:	c0 60       	breq	8000689c <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
80006892:	30 0c       	mov	r12,0
80006894:	f0 1f 00 0d 	mcall	800068c8 <nav_dir_make+0x8c>
80006898:	e3 cd 80 80 	ldm	sp++,r7,pc
8000689c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800068a0:	80 00       	ld.sh	r0,r0[0x0]
800068a2:	52 f8       	stdsp	sp[0xbc],r8
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	65 44       	ld.w	r4,r2[0x50]
800068a8:	00 00       	add	r0,r0
800068aa:	0c 74       	tst	r4,r6
800068ac:	80 00       	ld.sh	r0,r0[0x0]
800068ae:	57 a0       	stdsp	sp[0x1e8],r0
800068b0:	80 00       	ld.sh	r0,r0[0x0]
800068b2:	55 c4       	stdsp	sp[0x170],r4
800068b4:	80 00       	ld.sh	r0,r0[0x0]
800068b6:	48 68       	lddpc	r8,800068cc <nav_partition_mount>
800068b8:	00 00       	add	r0,r0
800068ba:	09 8c       	ld.ub	r12,r4[0x0]
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	54 5c       	stdsp	sp[0x114],r12
800068c0:	80 00       	ld.sh	r0,r0[0x0]
800068c2:	4f 04       	lddpc	r4,80006a80 <nav_setcwd+0xbc>
800068c4:	80 00       	ld.sh	r0,r0[0x0]
800068c6:	46 b4       	lddsp	r4,sp[0x1ac]
800068c8:	80 00       	ld.sh	r0,r0[0x0]
800068ca:	67 ec       	ld.w	r12,r3[0x78]

800068cc <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800068cc:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
800068ce:	f0 1f 00 0a 	mcall	800068f4 <nav_partition_mount+0x28>
800068d2:	c0 f0       	breq	800068f0 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800068d4:	48 98       	lddpc	r8,800068f8 <nav_partition_mount+0x2c>
800068d6:	11 89       	ld.ub	r9,r8[0x0]
800068d8:	30 08       	mov	r8,0
800068da:	f0 09 18 00 	cp.b	r9,r8
800068de:	c0 70       	breq	800068ec <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800068e0:	30 09       	mov	r9,0
800068e2:	48 78       	lddpc	r8,800068fc <nav_partition_mount+0x30>
800068e4:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800068e6:	f0 1f 00 07 	mcall	80006900 <nav_partition_mount+0x34>
800068ea:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
800068ec:	f0 1f 00 06 	mcall	80006904 <nav_partition_mount+0x38>
}
800068f0:	d8 02       	popm	pc
800068f2:	00 00       	add	r0,r0
800068f4:	80 00       	ld.sh	r0,r0[0x0]
800068f6:	52 24       	stdsp	sp[0x88],r4
800068f8:	00 00       	add	r0,r0
800068fa:	0c 18       	sub	r8,r6
800068fc:	00 00       	add	r0,r0
800068fe:	0b cc       	ld.ub	r12,r5[0x4]
80006900:	80 00       	ld.sh	r0,r0[0x0]
80006902:	42 d0       	lddsp	r0,sp[0xb4]
80006904:	80 00       	ld.sh	r0,r0[0x0]
80006906:	5d 38       	musfr	r8

80006908 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006908:	d4 01       	pushm	lr
   return nav_partition_mount();
8000690a:	f0 1f 00 02 	mcall	80006910 <nav_dir_root+0x8>
}
8000690e:	d8 02       	popm	pc
80006910:	80 00       	ld.sh	r0,r0[0x0]
80006912:	68 cc       	ld.w	r12,r4[0x30]

80006914 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80006914:	eb cd 40 80 	pushm	r7,lr
80006918:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
8000691a:	f0 1f 00 0f 	mcall	80006954 <nav_drive_set+0x40>
8000691e:	c1 90       	breq	80006950 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80006920:	f0 1f 00 0e 	mcall	80006958 <nav_drive_set+0x44>
80006924:	ee 0c 18 00 	cp.b	r12,r7
80006928:	e0 8b 00 07 	brhi	80006936 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000692c:	30 69       	mov	r9,6
8000692e:	48 c8       	lddpc	r8,8000695c <nav_drive_set+0x48>
80006930:	b0 89       	st.b	r8[0x0],r9
80006932:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006936:	48 b8       	lddpc	r8,80006960 <nav_drive_set+0x4c>
80006938:	11 88       	ld.ub	r8,r8[0x0]
8000693a:	ee 08 18 00 	cp.b	r8,r7
8000693e:	c0 31       	brne	80006944 <nav_drive_set+0x30>
80006940:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006944:	48 78       	lddpc	r8,80006960 <nav_drive_set+0x4c>
80006946:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006948:	30 09       	mov	r9,0
8000694a:	48 78       	lddpc	r8,80006964 <nav_drive_set+0x50>
8000694c:	b0 89       	st.b	r8[0x0],r9
8000694e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80006950:	e3 cd 80 80 	ldm	sp++,r7,pc
80006954:	80 00       	ld.sh	r0,r0[0x0]
80006956:	52 24       	stdsp	sp[0x88],r4
80006958:	80 00       	ld.sh	r0,r0[0x0]
8000695a:	6d 86       	ld.w	r6,r6[0x60]
8000695c:	00 00       	add	r0,r0
8000695e:	0c 1c       	sub	r12,r6
80006960:	00 00       	add	r0,r0
80006962:	0b cc       	ld.ub	r12,r5[0x4]
80006964:	00 00       	add	r0,r0
80006966:	0c 18       	sub	r8,r6

80006968 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006968:	d4 21       	pushm	r4-r7,lr
8000696a:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000696c:	19 8c       	ld.ub	r12,r12[0x0]
8000696e:	f0 1f 00 10 	mcall	800069ac <nav_gotoindex+0x44>
80006972:	c1 c0       	breq	800069aa <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80006974:	f0 1f 00 0f 	mcall	800069b0 <nav_gotoindex+0x48>
80006978:	c1 90       	breq	800069aa <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000697a:	6e 19       	ld.w	r9,r7[0x4]
8000697c:	48 e8       	lddpc	r8,800069b4 <nav_gotoindex+0x4c>
8000697e:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
80006980:	f0 1f 00 0e 	mcall	800069b8 <nav_gotoindex+0x50>
80006984:	c0 a1       	brne	80006998 <nav_gotoindex+0x30>
80006986:	c1 28       	rjmp	800069aa <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006988:	0a 9b       	mov	r11,r5
8000698a:	08 9c       	mov	r12,r4
8000698c:	f0 1f 00 0c 	mcall	800069bc <nav_gotoindex+0x54>
80006990:	c0 71       	brne	8000699e <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
80006992:	f0 1f 00 0a 	mcall	800069b8 <nav_gotoindex+0x50>
80006996:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006998:	48 a6       	lddpc	r6,800069c0 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000699a:	30 15       	mov	r5,1
8000699c:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000699e:	8c 19       	ld.sh	r9,r6[0x2]
800069a0:	8e 48       	ld.sh	r8,r7[0x8]
800069a2:	f0 09 19 00 	cp.h	r9,r8
800069a6:	cf 11       	brne	80006988 <nav_gotoindex+0x20>
800069a8:	da 2a       	popm	r4-r7,pc,r12=1
800069aa:	d8 2a       	popm	r4-r7,pc,r12=0
800069ac:	80 00       	ld.sh	r0,r0[0x0]
800069ae:	69 14       	ld.w	r4,r4[0x44]
800069b0:	80 00       	ld.sh	r0,r0[0x0]
800069b2:	68 cc       	ld.w	r12,r4[0x30]
800069b4:	00 00       	add	r0,r0
800069b6:	0b cc       	ld.ub	r12,r5[0x4]
800069b8:	80 00       	ld.sh	r0,r0[0x0]
800069ba:	65 2c       	ld.w	r12,r2[0x48]
800069bc:	80 00       	ld.sh	r0,r0[0x0]
800069be:	63 94       	ld.w	r4,r1[0x64]
800069c0:	00 00       	add	r0,r0
800069c2:	0c 18       	sub	r8,r6

800069c4 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
800069c4:	d4 31       	pushm	r0-r7,lr
800069c6:	20 6d       	sub	sp,24
800069c8:	18 97       	mov	r7,r12
800069ca:	16 91       	mov	r1,r11
800069cc:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
800069ce:	f0 1f 00 61 	mcall	80006b50 <nav_setcwd+0x18c>
800069d2:	e0 80 00 bd 	breq	80006b4c <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
800069d6:	1a 96       	mov	r6,sp
800069d8:	1a 9c       	mov	r12,sp
800069da:	f0 1f 00 5f 	mcall	80006b54 <nav_setcwd+0x190>
800069de:	fa c8 ff f4 	sub	r8,sp,-12
800069e2:	fa ea 00 00 	ld.d	r10,sp[0]
800069e6:	f0 eb 00 00 	st.d	r8[0],r10
800069ea:	40 29       	lddsp	r9,sp[0x8]
800069ec:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
800069ee:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
800069f0:	35 c9       	mov	r9,92
800069f2:	f2 08 18 00 	cp.b	r8,r9
800069f6:	5f 0a       	sreq	r10
800069f8:	32 f9       	mov	r9,47
800069fa:	f2 08 18 00 	cp.b	r8,r9
800069fe:	5f 09       	sreq	r9
80006a00:	f5 e9 10 09 	or	r9,r10,r9
80006a04:	c0 70       	breq	80006a12 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006a06:	f0 1f 00 55 	mcall	80006b58 <nav_setcwd+0x194>
80006a0a:	e0 80 00 9c 	breq	80006b42 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
80006a0e:	2f f7       	sub	r7,-1
80006a10:	c5 e8       	rjmp	80006acc <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006a12:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a14:	33 aa       	mov	r10,58
80006a16:	f4 09 18 00 	cp.b	r9,r10
80006a1a:	c2 01       	brne	80006a5a <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006a1c:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a1e:	35 cb       	mov	r11,92
80006a20:	f6 0a 18 00 	cp.b	r10,r11
80006a24:	5f 0b       	sreq	r11
80006a26:	32 fc       	mov	r12,47
80006a28:	f8 0a 18 00 	cp.b	r10,r12
80006a2c:	5f 0a       	sreq	r10
80006a2e:	f7 ea 10 0a 	or	r10,r11,r10
80006a32:	c1 40       	breq	80006a5a <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006a34:	4c a9       	lddpc	r9,80006b5c <nav_setcwd+0x198>
80006a36:	72 09       	ld.w	r9,r9[0x0]
80006a38:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006a3c:	e2 19 00 02 	andl	r9,0x2,COH
80006a40:	f7 b8 01 20 	subne	r8,32
80006a44:	24 18       	sub	r8,65
80006a46:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006a4a:	f0 1f 00 46 	mcall	80006b60 <nav_setcwd+0x19c>
80006a4e:	c7 a0       	breq	80006b42 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80006a50:	f0 1f 00 45 	mcall	80006b64 <nav_setcwd+0x1a0>
80006a54:	c7 70       	breq	80006b42 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006a56:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a58:	c3 a8       	rjmp	80006acc <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a5a:	32 ea       	mov	r10,46
80006a5c:	f4 08 18 00 	cp.b	r8,r10
80006a60:	c1 a1       	brne	80006a94 <nav_setcwd+0xd0>
80006a62:	35 c8       	mov	r8,92
80006a64:	f0 09 18 00 	cp.b	r9,r8
80006a68:	5f 0a       	sreq	r10
80006a6a:	32 f8       	mov	r8,47
80006a6c:	f0 09 18 00 	cp.b	r9,r8
80006a70:	5f 08       	sreq	r8
80006a72:	f5 e8 10 08 	or	r8,r10,r8
80006a76:	c0 f0       	breq	80006a94 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80006a78:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a7a:	c2 98       	rjmp	80006acc <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80006a7c:	f0 1f 00 3b 	mcall	80006b68 <nav_setcwd+0x1a4>
80006a80:	c6 10       	breq	80006b42 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
80006a82:	0d 88       	ld.ub	r8,r6[0x0]
80006a84:	e8 08 18 00 	cp.b	r8,r4
80006a88:	c0 31       	brne	80006a8e <nav_setcwd+0xca>
80006a8a:	0c 97       	mov	r7,r6
80006a8c:	c0 88       	rjmp	80006a9c <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
80006a8e:	ec c7 ff ff 	sub	r7,r6,-1
80006a92:	c0 58       	rjmp	80006a9c <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006a94:	32 e5       	mov	r5,46
80006a96:	35 c3       	mov	r3,92
80006a98:	32 f2       	mov	r2,47
80006a9a:	30 04       	mov	r4,0
80006a9c:	0f 88       	ld.ub	r8,r7[0x0]
80006a9e:	ea 08 18 00 	cp.b	r8,r5
80006aa2:	c1 51       	brne	80006acc <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80006aa4:	0f 98       	ld.ub	r8,r7[0x1]
80006aa6:	ea 08 18 00 	cp.b	r8,r5
80006aaa:	c1 11       	brne	80006acc <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80006aac:	ee c6 ff fe 	sub	r6,r7,-2
80006ab0:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006ab2:	e6 08 18 00 	cp.b	r8,r3
80006ab6:	5f 0a       	sreq	r10
80006ab8:	e4 08 18 00 	cp.b	r8,r2
80006abc:	5f 09       	sreq	r9
80006abe:	f5 e9 10 09 	or	r9,r10,r9
80006ac2:	e8 09 18 00 	cp.b	r9,r4
80006ac6:	cd b1       	brne	80006a7c <nav_setcwd+0xb8>
80006ac8:	58 08       	cp.w	r8,0
80006aca:	cd 90       	breq	80006a7c <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006acc:	f0 1f 00 28 	mcall	80006b6c <nav_setcwd+0x1a8>
80006ad0:	c3 90       	breq	80006b42 <nav_setcwd+0x17e>
80006ad2:	30 03       	mov	r3,0
80006ad4:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006ad6:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006ad8:	35 c5       	mov	r5,92
80006ada:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006adc:	0f 88       	ld.ub	r8,r7[0x0]
80006ade:	ec 08 18 00 	cp.b	r8,r6
80006ae2:	c0 31       	brne	80006ae8 <nav_setcwd+0x124>
80006ae4:	30 1c       	mov	r12,1
80006ae6:	c3 38       	rjmp	80006b4c <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006ae8:	02 9b       	mov	r11,r1
80006aea:	0e 9c       	mov	r12,r7
80006aec:	f0 1f 00 21 	mcall	80006b70 <nav_setcwd+0x1ac>
80006af0:	c0 51       	brne	80006afa <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
80006af2:	58 00       	cp.w	r0,0
80006af4:	c2 70       	breq	80006b42 <nav_setcwd+0x17e>
80006af6:	0e 92       	mov	r2,r7
80006af8:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006afa:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006afc:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006afe:	58 08       	cp.w	r8,0
80006b00:	c0 81       	brne	80006b10 <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006b02:	58 03       	cp.w	r3,0
80006b04:	ce c0       	breq	80006adc <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006b06:	04 9c       	mov	r12,r2
80006b08:	f0 1f 00 1b 	mcall	80006b74 <nav_setcwd+0x1b0>
80006b0c:	ce 81       	brne	80006adc <nav_setcwd+0x118>
80006b0e:	c1 a8       	rjmp	80006b42 <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006b10:	ea 08 18 00 	cp.b	r8,r5
80006b14:	5f 09       	sreq	r9
80006b16:	e8 08 18 00 	cp.b	r8,r4
80006b1a:	5f 08       	sreq	r8
80006b1c:	f3 e8 10 08 	or	r8,r9,r8
80006b20:	ec 08 18 00 	cp.b	r8,r6
80006b24:	ce b0       	breq	80006afa <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006b26:	58 03       	cp.w	r3,0
80006b28:	c0 50       	breq	80006b32 <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006b2a:	04 9c       	mov	r12,r2
80006b2c:	f0 1f 00 13 	mcall	80006b78 <nav_setcwd+0x1b4>
80006b30:	c0 90       	breq	80006b42 <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006b32:	f0 1f 00 13 	mcall	80006b7c <nav_setcwd+0x1b8>
80006b36:	c0 60       	breq	80006b42 <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006b38:	f0 1f 00 12 	mcall	80006b80 <nav_setcwd+0x1bc>
80006b3c:	c0 30       	breq	80006b42 <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006b3e:	2f f7       	sub	r7,-1
80006b40:	cc eb       	rjmp	80006adc <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006b42:	fa cc ff f4 	sub	r12,sp,-12
80006b46:	f0 1f 00 10 	mcall	80006b84 <nav_setcwd+0x1c0>
80006b4a:	30 0c       	mov	r12,0
   return false;
}
80006b4c:	2f ad       	sub	sp,-24
80006b4e:	d8 32       	popm	r0-r7,pc
80006b50:	80 00       	ld.sh	r0,r0[0x0]
80006b52:	52 24       	stdsp	sp[0x88],r4
80006b54:	80 00       	ld.sh	r0,r0[0x0]
80006b56:	62 84       	ld.w	r4,r1[0x20]
80006b58:	80 00       	ld.sh	r0,r0[0x0]
80006b5a:	69 08       	ld.w	r8,r4[0x40]
80006b5c:	00 00       	add	r0,r0
80006b5e:	00 0c       	add	r12,r0
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	69 14       	ld.w	r4,r4[0x44]
80006b64:	80 00       	ld.sh	r0,r0[0x0]
80006b66:	68 cc       	ld.w	r12,r4[0x30]
80006b68:	80 00       	ld.sh	r0,r0[0x0]
80006b6a:	65 b0       	ld.w	r0,r2[0x6c]
80006b6c:	80 00       	ld.sh	r0,r0[0x0]
80006b6e:	65 2c       	ld.w	r12,r2[0x48]
80006b70:	80 00       	ld.sh	r0,r0[0x0]
80006b72:	64 fc       	ld.w	r12,r2[0x3c]
80006b74:	80 00       	ld.sh	r0,r0[0x0]
80006b76:	65 44       	ld.w	r4,r2[0x50]
80006b78:	80 00       	ld.sh	r0,r0[0x0]
80006b7a:	68 3c       	ld.w	r12,r4[0xc]
80006b7c:	80 00       	ld.sh	r0,r0[0x0]
80006b7e:	42 b8       	lddsp	r8,sp[0xac]
80006b80:	80 00       	ld.sh	r0,r0[0x0]
80006b82:	66 50       	ld.w	r0,r3[0x14]
80006b84:	80 00       	ld.sh	r0,r0[0x0]
80006b86:	69 68       	ld.w	r8,r4[0x58]

80006b88 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
80006b88:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
80006b8a:	f0 1f 00 02 	mcall	80006b90 <nav_drive_nb+0x8>
}
80006b8e:	d8 02       	popm	pc
80006b90:	80 00       	ld.sh	r0,r0[0x0]
80006b92:	6d 86       	ld.w	r6,r6[0x60]

80006b94 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80006b94:	eb cd 40 80 	pushm	r7,lr
80006b98:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006b9a:	30 18       	mov	r8,1
80006b9c:	f0 0c 18 00 	cp.b	r12,r8
80006ba0:	e0 88 00 07 	brls	80006bae <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006ba4:	32 79       	mov	r9,39
80006ba6:	48 b8       	lddpc	r8,80006bd0 <nav_select+0x3c>
80006ba8:	b0 89       	st.b	r8[0x0],r9
80006baa:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006bae:	48 a8       	lddpc	r8,80006bd4 <nav_select+0x40>
80006bb0:	11 8c       	ld.ub	r12,r8[0x0]
80006bb2:	ee 0c 18 00 	cp.b	r12,r7
80006bb6:	c0 31       	brne	80006bbc <nav_select+0x28>
80006bb8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006bbc:	f0 1f 00 07 	mcall	80006bd8 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006bc0:	0e 9c       	mov	r12,r7
80006bc2:	f0 1f 00 06 	mcall	80006bd8 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006bc6:	48 48       	lddpc	r8,80006bd4 <nav_select+0x40>
80006bc8:	b0 87       	st.b	r8[0x0],r7
80006bca:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006bce:	00 00       	add	r0,r0
80006bd0:	00 00       	add	r0,r0
80006bd2:	0c 1c       	sub	r12,r6
80006bd4:	00 00       	add	r0,r0
80006bd6:	0c 94       	mov	r4,r6
80006bd8:	80 00       	ld.sh	r0,r0[0x0]
80006bda:	47 7c       	lddsp	r12,sp[0x1dc]

80006bdc <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006bdc:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006be0:	30 07       	mov	r7,0
80006be2:	49 18       	lddpc	r8,80006c24 <nav_reset+0x48>
80006be4:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006be6:	49 18       	lddpc	r8,80006c28 <nav_reset+0x4c>
80006be8:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006bea:	f0 1f 00 11 	mcall	80006c2c <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006bee:	f0 1f 00 11 	mcall	80006c30 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006bf2:	30 0c       	mov	r12,0
80006bf4:	f0 1f 00 10 	mcall	80006c34 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006bf8:	49 03       	lddpc	r3,80006c38 <nav_reset+0x5c>
80006bfa:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006bfc:	49 05       	lddpc	r5,80006c3c <nav_reset+0x60>
80006bfe:	3f f4       	mov	r4,-1
80006c00:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006c02:	49 06       	lddpc	r6,80006c40 <nav_reset+0x64>
80006c04:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006c06:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006c0a:	30 1c       	mov	r12,1
80006c0c:	f0 1f 00 0a 	mcall	80006c34 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006c10:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006c12:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006c14:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006c16:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006c1a:	48 b8       	lddpc	r8,80006c44 <nav_reset+0x68>
80006c1c:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006c1e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006c22:	00 00       	add	r0,r0
80006c24:	00 00       	add	r0,r0
80006c26:	0c 1d       	sub	sp,r6
80006c28:	00 00       	add	r0,r0
80006c2a:	09 9e       	ld.ub	lr,r4[0x1]
80006c2c:	80 00       	ld.sh	r0,r0[0x0]
80006c2e:	46 8c       	lddsp	r12,sp[0x1a0]
80006c30:	80 00       	ld.sh	r0,r0[0x0]
80006c32:	40 6c       	lddsp	r12,sp[0x18]
80006c34:	80 00       	ld.sh	r0,r0[0x0]
80006c36:	6b 94       	ld.w	r4,r5[0x64]
80006c38:	00 00       	add	r0,r0
80006c3a:	0c 18       	sub	r8,r6
80006c3c:	00 00       	add	r0,r0
80006c3e:	0b cc       	ld.ub	r12,r5[0x4]
80006c40:	00 00       	add	r0,r0
80006c42:	09 8c       	ld.ub	r12,r4[0x0]
80006c44:	00 00       	add	r0,r0
80006c46:	0c 94       	mov	r4,r6

80006c48 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80006c48:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80006c4a:	f0 1f 00 02 	mcall	80006c50 <print_char+0x8>
}
80006c4e:	d8 02       	popm	pc
80006c50:	80 00       	ld.sh	r0,r0[0x0]
80006c52:	3e 68       	mov	r8,-26

80006c54 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80006c54:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
80006c56:	18 9b       	mov	r11,r12
80006c58:	fe 7c 2c 00 	mov	r12,-54272
80006c5c:	f0 1f 00 02 	mcall	80006c64 <print_dbg_char+0x10>
}
80006c60:	d8 02       	popm	pc
80006c62:	00 00       	add	r0,r0
80006c64:	80 00       	ld.sh	r0,r0[0x0]
80006c66:	6c 48       	ld.w	r8,r6[0x10]

80006c68 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006c68:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006c6a:	f0 1f 00 02 	mcall	80006c70 <print+0x8>
}
80006c6e:	d8 02       	popm	pc
80006c70:	80 00       	ld.sh	r0,r0[0x0]
80006c72:	3e 94       	mov	r4,-23

80006c74 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80006c74:	eb cd 40 e0 	pushm	r5-r7,lr
80006c78:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80006c7a:	30 08       	mov	r8,0
80006c7c:	fb 68 00 0a 	st.b	sp[10],r8
80006c80:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80006c82:	1a 95       	mov	r5,sp
80006c84:	e0 6e cc cd 	mov	lr,52429
80006c88:	ea 1e cc cc 	orh	lr,0xcccc
80006c8c:	20 19       	sub	r9,1
80006c8e:	f6 0e 06 46 	mulu.d	r6,r11,lr
80006c92:	0e 98       	mov	r8,r7
80006c94:	a3 98       	lsr	r8,0x3
80006c96:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80006c9a:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80006c9e:	2d 0b       	sub	r11,-48
80006ca0:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80006ca4:	10 9b       	mov	r11,r8
  } while (n);
80006ca6:	58 08       	cp.w	r8,0
80006ca8:	cf 21       	brne	80006c8c <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80006caa:	1a 9b       	mov	r11,sp
80006cac:	12 0b       	add	r11,r9
80006cae:	f0 1f 00 03 	mcall	80006cb8 <print_ulong+0x44>
}
80006cb2:	2f dd       	sub	sp,-12
80006cb4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006cb8:	80 00       	ld.sh	r0,r0[0x0]
80006cba:	6c 68       	ld.w	r8,r6[0x18]

80006cbc <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80006cbc:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80006cbe:	18 9b       	mov	r11,r12
80006cc0:	fe 7c 2c 00 	mov	r12,-54272
80006cc4:	f0 1f 00 02 	mcall	80006ccc <print_dbg_ulong+0x10>
}
80006cc8:	d8 02       	popm	pc
80006cca:	00 00       	add	r0,r0
80006ccc:	80 00       	ld.sh	r0,r0[0x0]
80006cce:	6c 74       	ld.w	r4,r6[0x1c]

80006cd0 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80006cd0:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80006cd2:	18 9b       	mov	r11,r12
80006cd4:	fe 7c 2c 00 	mov	r12,-54272
80006cd8:	f0 1f 00 02 	mcall	80006ce0 <print_dbg+0x10>
}
80006cdc:	d8 02       	popm	pc
80006cde:	00 00       	add	r0,r0
80006ce0:	80 00       	ld.sh	r0,r0[0x0]
80006ce2:	6c 68       	ld.w	r8,r6[0x18]

80006ce4 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80006ce4:	eb cd 40 80 	pushm	r7,lr
80006ce8:	20 3d       	sub	sp,12
80006cea:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80006cec:	50 0c       	stdsp	sp[0x0],r12
80006cee:	30 88       	mov	r8,8
80006cf0:	ba c8       	st.b	sp[0x4],r8
80006cf2:	30 48       	mov	r8,4
80006cf4:	ba d8       	st.b	sp[0x5],r8
80006cf6:	30 08       	mov	r8,0
80006cf8:	ba 38       	st.h	sp[0x6],r8
80006cfa:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80006cfe:	30 2b       	mov	r11,2
80006d00:	48 6c       	lddpc	r12,80006d18 <init_dbg_rs232_ex+0x34>
80006d02:	f0 1f 00 07 	mcall	80006d1c <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80006d06:	0e 9a       	mov	r10,r7
80006d08:	1a 9b       	mov	r11,sp
80006d0a:	fe 7c 2c 00 	mov	r12,-54272
80006d0e:	f0 1f 00 05 	mcall	80006d20 <init_dbg_rs232_ex+0x3c>
}
80006d12:	2f dd       	sub	sp,-12
80006d14:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d18:	80 00       	ld.sh	r0,r0[0x0]
80006d1a:	e2 d8 80 00 	satsub.w	r8,r1,-32768
80006d1e:	31 c4       	mov	r4,28
80006d20:	80 00       	ld.sh	r0,r0[0x0]
80006d22:	3e e4       	mov	r4,-18

80006d24 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80006d24:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80006d26:	18 9b       	mov	r11,r12
80006d28:	e0 6c e1 00 	mov	r12,57600
80006d2c:	f0 1f 00 02 	mcall	80006d34 <init_dbg_rs232+0x10>
}
80006d30:	d8 02       	popm	pc
80006d32:	00 00       	add	r0,r0
80006d34:	80 00       	ld.sh	r0,r0[0x0]
80006d36:	6c e4       	ld.w	r4,r6[0x38]

80006d38 <_stext>:
80006d38:	48 dd       	lddpc	sp,80006d6c <udata_clear_loop_end+0x4>
80006d3a:	fe c0 8f 3a 	sub	r0,pc,-28870
80006d3e:	e3 b0 00 01 	mtsr	0x4,r0
80006d42:	d5 53       	csrf	0x15
80006d44:	48 b0       	lddpc	r0,80006d70 <udata_clear_loop_end+0x8>
80006d46:	48 c1       	lddpc	r1,80006d74 <udata_clear_loop_end+0xc>
80006d48:	02 30       	cp.w	r0,r1
80006d4a:	c0 62       	brcc	80006d56 <idata_load_loop_end>
80006d4c:	48 b2       	lddpc	r2,80006d78 <udata_clear_loop_end+0x10>

80006d4e <idata_load_loop>:
80006d4e:	a5 05       	ld.d	r4,r2++
80006d50:	a1 24       	st.d	r0++,r4
80006d52:	02 30       	cp.w	r0,r1
80006d54:	cf d3       	brcs	80006d4e <idata_load_loop>

80006d56 <idata_load_loop_end>:
80006d56:	48 a0       	lddpc	r0,80006d7c <udata_clear_loop_end+0x14>
80006d58:	48 a1       	lddpc	r1,80006d80 <udata_clear_loop_end+0x18>
80006d5a:	02 30       	cp.w	r0,r1
80006d5c:	c0 62       	brcc	80006d68 <udata_clear_loop_end>
80006d5e:	30 02       	mov	r2,0
80006d60:	30 03       	mov	r3,0

80006d62 <udata_clear_loop>:
80006d62:	a1 22       	st.d	r0++,r2
80006d64:	02 30       	cp.w	r0,r1
80006d66:	cf e3       	brcs	80006d62 <udata_clear_loop>

80006d68 <udata_clear_loop_end>:
80006d68:	fe cf f0 34 	sub	pc,pc,-4044
80006d6c:	00 01       	add	r1,r0
80006d6e:	00 00       	add	r0,r0
80006d70:	00 00       	add	r0,r0
80006d72:	00 04       	add	r4,r0
80006d74:	00 00       	add	r0,r0
80006d76:	05 18       	ld.sh	r8,r2++
80006d78:	80 00       	ld.sh	r0,r0[0x0]
80006d7a:	f0 48 00 00 	cp.w	r8,-1048576
80006d7e:	05 18       	ld.sh	r8,r2++
80006d80:	00 00       	add	r0,r0
80006d82:	0c f0       	st.b	--r6,r0

80006d84 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
80006d84:	5e fc       	retal	r12

80006d86 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80006d86:	5e ff       	retal	1

80006d88 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80006d88:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d8a:	58 0c       	cp.w	r12,0
80006d8c:	c0 20       	breq	80006d90 <mem_test_unit_ready+0x8>
80006d8e:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80006d90:	48 28       	lddpc	r8,80006d98 <mem_test_unit_ready+0x10>
80006d92:	70 0c       	ld.w	r12,r8[0x0]
80006d94:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80006d96:	d8 02       	popm	pc
80006d98:	80 00       	ld.sh	r0,r0[0x0]
80006d9a:	e2 e8 d4 01 	ld.d	r8,r1[-11263]

80006d9c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80006d9c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d9e:	58 0c       	cp.w	r12,0
80006da0:	c0 20       	breq	80006da4 <mem_read_capacity+0x8>
80006da2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80006da4:	48 38       	lddpc	r8,80006db0 <mem_read_capacity+0x14>
80006da6:	70 18       	ld.w	r8,r8[0x4]
80006da8:	16 9c       	mov	r12,r11
80006daa:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80006dac:	d8 02       	popm	pc
80006dae:	00 00       	add	r0,r0
80006db0:	80 00       	ld.sh	r0,r0[0x0]
80006db2:	e2 e8 58 0c 	ld.d	r8,r1[22540]

80006db4 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80006db4:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
80006db6:	5f 0c       	sreq	r12
80006db8:	5e fc       	retal	r12
80006dba:	d7 03       	nop

80006dbc <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80006dbc:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80006dbe:	58 0c       	cp.w	r12,0
80006dc0:	c0 20       	breq	80006dc4 <mem_wr_protect+0x8>
80006dc2:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80006dc4:	48 28       	lddpc	r8,80006dcc <mem_wr_protect+0x10>
80006dc6:	70 2c       	ld.w	r12,r8[0x8]
80006dc8:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80006dca:	d8 02       	popm	pc
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	e2 e8 d4 01 	ld.d	r8,r1[-11263]

80006dd0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80006dd0:	d4 01       	pushm	lr
80006dd2:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80006dd4:	58 0c       	cp.w	r12,0
80006dd6:	c0 20       	breq	80006dda <memory_2_ram+0xa>
80006dd8:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80006dda:	48 49       	lddpc	r9,80006de8 <memory_2_ram+0x18>
80006ddc:	72 49       	ld.w	r9,r9[0x10]
80006dde:	14 9b       	mov	r11,r10
80006de0:	10 9c       	mov	r12,r8
80006de2:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80006de4:	d8 02       	popm	pc
80006de6:	00 00       	add	r0,r0
80006de8:	80 00       	ld.sh	r0,r0[0x0]
80006dea:	e2 e8 d4 01 	ld.d	r8,r1[-11263]

80006dec <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80006dec:	d4 01       	pushm	lr
80006dee:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80006df0:	58 0c       	cp.w	r12,0
80006df2:	c0 20       	breq	80006df6 <ram_2_memory+0xa>
80006df4:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80006df6:	48 49       	lddpc	r9,80006e04 <ram_2_memory+0x18>
80006df8:	72 59       	ld.w	r9,r9[0x14]
80006dfa:	14 9b       	mov	r11,r10
80006dfc:	10 9c       	mov	r12,r8
80006dfe:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80006e00:	d8 02       	popm	pc
80006e02:	00 00       	add	r0,r0
80006e04:	80 00       	ld.sh	r0,r0[0x0]
80006e06:	e2 e8 48 58 	ld.d	r8,r1[18520]

80006e08 <Motors_Moving>:
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
{
	if(Motor_Cntrl.Left_State != STOP)
80006e08:	48 58       	lddpc	r8,80006e1c <Motors_Moving+0x14>
80006e0a:	70 08       	ld.w	r8,r8[0x0]
80006e0c:	58 68       	cp.w	r8,6
80006e0e:	c0 21       	brne	80006e12 <Motors_Moving+0xa>
80006e10:	5e fd       	retal	0
	Motor_Cntrl.Right_State = FORWARD;
	Motor_Cntrl.Right_Count = 1;
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
80006e12:	48 38       	lddpc	r8,80006e1c <Motors_Moving+0x14>
80006e14:	70 18       	ld.w	r8,r8[0x4]
80006e16:	58 68       	cp.w	r8,6
80006e18:	5f 1c       	srne	r12
	else
	{
		return false;
	}
	
80006e1a:	5e fc       	retal	r12
80006e1c:	00 00       	add	r0,r0
80006e1e:	0c 98       	mov	r8,r6

80006e20 <Motor_Stop>:
		pwm_start_channels((1 << MOTOR_R));
	}	
}

void Motor_Stop(int Motors)
{
80006e20:	eb cd 40 80 	pushm	r7,lr
80006e24:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80006e26:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80006e2a:	c0 a0       	breq	80006e3e <Motor_Stop+0x1e>
	{
		ML_STANDBY;
80006e2c:	32 8c       	mov	r12,40
80006e2e:	f0 1f 00 0c 	mcall	80006e5c <Motor_Stop+0x3c>
		Motor_Cntrl.Left_State = STOP;
80006e32:	30 69       	mov	r9,6
80006e34:	48 b8       	lddpc	r8,80006e60 <Motor_Stop+0x40>
80006e36:	91 09       	st.w	r8[0x0],r9
		pwm_stop_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80006e38:	30 2c       	mov	r12,2
80006e3a:	f0 1f 00 0b 	mcall	80006e64 <Motor_Stop+0x44>
	}
	
	if(Motors & MOTOR_R)
80006e3e:	e2 17 00 02 	andl	r7,0x2,COH
80006e42:	c0 a0       	breq	80006e56 <Motor_Stop+0x36>
	{
		MR_STANDBY;
80006e44:	33 0c       	mov	r12,48
80006e46:	f0 1f 00 06 	mcall	80006e5c <Motor_Stop+0x3c>
		Motor_Cntrl.Right_State = STOP;
80006e4a:	30 69       	mov	r9,6
80006e4c:	48 58       	lddpc	r8,80006e60 <Motor_Stop+0x40>
80006e4e:	91 19       	st.w	r8[0x4],r9
		pwm_stop_channels((1 << MOTOR_R));
80006e50:	30 4c       	mov	r12,4
80006e52:	f0 1f 00 05 	mcall	80006e64 <Motor_Stop+0x44>
80006e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e5a:	00 00       	add	r0,r0
80006e5c:	80 00       	ld.sh	r0,r0[0x0]
80006e5e:	32 2a       	mov	r10,34
80006e60:	00 00       	add	r0,r0
80006e62:	0c 98       	mov	r8,r6
80006e64:	80 00       	ld.sh	r0,r0[0x0]
80006e66:	34 c4       	mov	r4,76

80006e68 <Motor_Start>:
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
	
	Enable_global_interrupt();
}
void Motor_Start(int Motors)
{
80006e68:	eb cd 40 80 	pushm	r7,lr
80006e6c:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80006e6e:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80006e72:	c2 30       	breq	80006eb8 <Motor_Start+0x50>
	{
		if(Motor_Cntrl.Left_State == FORWARD)
80006e74:	4a 58       	lddpc	r8,80006f08 <Motor_Start+0xa0>
80006e76:	70 08       	ld.w	r8,r8[0x0]
80006e78:	58 28       	cp.w	r8,2
80006e7a:	c0 81       	brne	80006e8a <Motor_Start+0x22>
		{
			ML_IN1_SET;
80006e7c:	32 9c       	mov	r12,41
80006e7e:	f0 1f 00 24 	mcall	80006f0c <Motor_Start+0xa4>
			ML_IN2_CLR;
80006e82:	32 ac       	mov	r12,42
80006e84:	f0 1f 00 23 	mcall	80006f10 <Motor_Start+0xa8>
80006e88:	c1 28       	rjmp	80006eac <Motor_Start+0x44>
		}
		else if (Motor_Cntrl.Left_State == BACKWARD)
80006e8a:	58 38       	cp.w	r8,3
80006e8c:	c0 81       	brne	80006e9c <Motor_Start+0x34>
		{
			ML_IN1_CLR;
80006e8e:	32 9c       	mov	r12,41
80006e90:	f0 1f 00 20 	mcall	80006f10 <Motor_Start+0xa8>
			ML_IN2_SET;
80006e94:	32 ac       	mov	r12,42
80006e96:	f0 1f 00 1e 	mcall	80006f0c <Motor_Start+0xa4>
80006e9a:	c0 98       	rjmp	80006eac <Motor_Start+0x44>
		}
		else //Somethings gone wrong
		{
			ML_IN1_CLR;
80006e9c:	32 9c       	mov	r12,41
80006e9e:	f0 1f 00 1d 	mcall	80006f10 <Motor_Start+0xa8>
			ML_IN2_CLR;
80006ea2:	32 ac       	mov	r12,42
80006ea4:	f0 1f 00 1b 	mcall	80006f10 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80006ea8:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		ML_GO;
80006eac:	32 8c       	mov	r12,40
80006eae:	f0 1f 00 18 	mcall	80006f0c <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80006eb2:	30 2c       	mov	r12,2
80006eb4:	f0 1f 00 18 	mcall	80006f14 <Motor_Start+0xac>
	}
	
	if(Motors & MOTOR_R)
80006eb8:	e2 17 00 02 	andl	r7,0x2,COH
80006ebc:	c2 30       	breq	80006f02 <Motor_Start+0x9a>
	{
		if(Motor_Cntrl.Right_State == FORWARD)
80006ebe:	49 38       	lddpc	r8,80006f08 <Motor_Start+0xa0>
80006ec0:	70 18       	ld.w	r8,r8[0x4]
80006ec2:	58 28       	cp.w	r8,2
80006ec4:	c0 81       	brne	80006ed4 <Motor_Start+0x6c>
		{
			MR_IN1_SET;
80006ec6:	32 fc       	mov	r12,47
80006ec8:	f0 1f 00 11 	mcall	80006f0c <Motor_Start+0xa4>
			MR_IN2_CLR;
80006ecc:	32 ec       	mov	r12,46
80006ece:	f0 1f 00 11 	mcall	80006f10 <Motor_Start+0xa8>
80006ed2:	c1 28       	rjmp	80006ef6 <Motor_Start+0x8e>
		}
		else if (Motor_Cntrl.Right_State == BACKWARD)
80006ed4:	58 38       	cp.w	r8,3
80006ed6:	c0 81       	brne	80006ee6 <Motor_Start+0x7e>
		{
			MR_IN1_CLR;
80006ed8:	32 fc       	mov	r12,47
80006eda:	f0 1f 00 0e 	mcall	80006f10 <Motor_Start+0xa8>
			MR_IN2_SET;
80006ede:	32 ec       	mov	r12,46
80006ee0:	f0 1f 00 0b 	mcall	80006f0c <Motor_Start+0xa4>
80006ee4:	c0 98       	rjmp	80006ef6 <Motor_Start+0x8e>
		}
		else //Somethings gone wrong
		{
			MR_IN1_CLR;
80006ee6:	32 fc       	mov	r12,47
80006ee8:	f0 1f 00 0a 	mcall	80006f10 <Motor_Start+0xa8>
			MR_IN2_CLR;
80006eec:	32 ec       	mov	r12,46
80006eee:	f0 1f 00 09 	mcall	80006f10 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80006ef2:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		MR_GO;
80006ef6:	33 0c       	mov	r12,48
80006ef8:	f0 1f 00 05 	mcall	80006f0c <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_R));
80006efc:	30 4c       	mov	r12,4
80006efe:	f0 1f 00 06 	mcall	80006f14 <Motor_Start+0xac>
80006f02:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f06:	00 00       	add	r0,r0
80006f08:	00 00       	add	r0,r0
80006f0a:	0c 98       	mov	r8,r6
80006f0c:	80 00       	ld.sh	r0,r0[0x0]
80006f0e:	32 0e       	mov	lr,32
80006f10:	80 00       	ld.sh	r0,r0[0x0]
80006f12:	32 2a       	mov	r10,34
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	34 b2       	mov	r2,75

80006f18 <Motors_Reset>:
{
	//Calculate number of interrupts of each wheel
}

void Motors_Reset(void)
{
80006f18:	d4 01       	pushm	lr
	Motor_Cntrl.Left_State = FORWARD;
80006f1a:	48 68       	lddpc	r8,80006f30 <Motors_Reset+0x18>
80006f1c:	30 2a       	mov	r10,2
80006f1e:	91 0a       	st.w	r8[0x0],r10
	Motor_Cntrl.Left_Count = 1;
80006f20:	30 19       	mov	r9,1
80006f22:	91 29       	st.w	r8[0x8],r9
	Motor_Cntrl.Right_State = FORWARD;
80006f24:	91 1a       	st.w	r8[0x4],r10
	Motor_Cntrl.Right_Count = 1;
80006f26:	91 39       	st.w	r8[0xc],r9
	Motor_Start(MOTOR_L | MOTOR_R);
80006f28:	30 3c       	mov	r12,3
80006f2a:	f0 1f 00 03 	mcall	80006f34 <Motors_Reset+0x1c>
}
80006f2e:	d8 02       	popm	pc
80006f30:	00 00       	add	r0,r0
80006f32:	0c 98       	mov	r8,r6
80006f34:	80 00       	ld.sh	r0,r0[0x0]
80006f36:	6e 68       	ld.w	r8,r7[0x18]

80006f38 <Analogue_Comparator_Init>:
		temp |= MOTOR_R;
		
	Motor_Stop(temp); //Stop the Right Motor
}
void Analogue_Comparator_Init()
{
80006f38:	d4 01       	pushm	lr
	{POT1_AC1BP1_PIN, POT1_AC1BP1_FUNCTION},
	{SENSE0_AC1AN1_PIN, SENSE0_AC1AN1_FUNCTION},
	{SENSE1_AC1BN1_PIN, SENSE1_AC1BN1_FUNCTION},
	};
	
	gpio_enable_module(ACIFA_GPIO_MAP, sizeof(ACIFA_GPIO_MAP) / sizeof(ACIFA_GPIO_MAP[0]));
80006f3a:	30 4b       	mov	r11,4
80006f3c:	4a 1c       	lddpc	r12,80006fc0 <Analogue_Comparator_Init+0x88>
80006f3e:	f0 1f 00 22 	mcall	80006fc4 <Analogue_Comparator_Init+0x8c>
	//Make it an interrupt
	Disable_global_interrupt();
80006f42:	d3 03       	ssrf	0x10
	
	//INTC_init_interrupts();
	
	acifa_configure(&AVR32_ACIFA1,
80006f44:	e0 68 24 00 	mov	r8,9216
80006f48:	ea 18 00 f4 	orh	r8,0xf4
80006f4c:	30 19       	mov	r9,1
80006f4e:	12 9a       	mov	r10,r9
80006f50:	12 9b       	mov	r11,r9
80006f52:	fe 7c 64 00 	mov	r12,-39936
80006f56:	f0 1f 00 1d 	mcall	80006fc8 <Analogue_Comparator_Init+0x90>
	ACIFA_COMP_SELA,
	POT0_AC1AP1_INPUT,
	SENSE0_AC1AN1_INPUT,
	FOSC0);
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELA, 2);
80006f5a:	30 2a       	mov	r10,2
80006f5c:	30 1b       	mov	r11,1
80006f5e:	fe 7c 64 00 	mov	r12,-39936
80006f62:	f0 1f 00 1b 	mcall	80006fcc <Analogue_Comparator_Init+0x94>
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELB, 2);
80006f66:	30 2a       	mov	r10,2
80006f68:	14 9b       	mov	r11,r10
80006f6a:	fe 7c 64 00 	mov	r12,-39936
80006f6e:	f0 1f 00 18 	mcall	80006fcc <Analogue_Comparator_Init+0x94>
	acifa_configure(&AVR32_ACIFA1,
80006f72:	e0 68 24 00 	mov	r8,9216
80006f76:	ea 18 00 f4 	orh	r8,0xf4
80006f7a:	30 19       	mov	r9,1
80006f7c:	30 3a       	mov	r10,3
80006f7e:	30 2b       	mov	r11,2
80006f80:	fe 7c 64 00 	mov	r12,-39936
80006f84:	f0 1f 00 11 	mcall	80006fc8 <Analogue_Comparator_Init+0x90>
	// 			;
	// 		M1_IN1_CLR;
	
	
	//Motor_Go(S)
	acifa_enable_interrupt(&AVR32_ACIFA1, 3);//Enable ACBINT and ACAINT
80006f88:	30 3b       	mov	r11,3
80006f8a:	fe 7c 64 00 	mov	r12,-39936
80006f8e:	f0 1f 00 11 	mcall	80006fd0 <Analogue_Comparator_Init+0x98>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELA);
80006f92:	30 1b       	mov	r11,1
80006f94:	fe 7c 64 00 	mov	r12,-39936
80006f98:	f0 1f 00 0f 	mcall	80006fd4 <Analogue_Comparator_Init+0x9c>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELB);
80006f9c:	30 2b       	mov	r11,2
80006f9e:	fe 7c 64 00 	mov	r12,-39936
80006fa2:	f0 1f 00 0d 	mcall	80006fd4 <Analogue_Comparator_Init+0x9c>

	acifa_start(&AVR32_ACIFA1, (ACIFA_COMP_SELA|ACIFA_COMP_SELB));
80006fa6:	30 3b       	mov	r11,3
80006fa8:	fe 7c 64 00 	mov	r12,-39936
80006fac:	f0 1f 00 0b 	mcall	80006fd8 <Analogue_Comparator_Init+0xa0>
	
	
	
	
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
80006fb0:	30 0a       	mov	r10,0
80006fb2:	e0 6b 04 c0 	mov	r11,1216
80006fb6:	48 ac       	lddpc	r12,80006fdc <Analogue_Comparator_Init+0xa4>
80006fb8:	f0 1f 00 0a 	mcall	80006fe0 <Analogue_Comparator_Init+0xa8>
	
	Enable_global_interrupt();
80006fbc:	d5 03       	csrf	0x10
}
80006fbe:	d8 02       	popm	pc
80006fc0:	80 00       	ld.sh	r0,r0[0x0]
80006fc2:	e3 bc       	*unknown*
80006fc4:	80 00       	ld.sh	r0,r0[0x0]
80006fc6:	31 c4       	mov	r4,28
80006fc8:	80 00       	ld.sh	r0,r0[0x0]
80006fca:	2c e0       	sub	r0,-50
80006fcc:	80 00       	ld.sh	r0,r0[0x0]
80006fce:	2d 24       	sub	r4,-46
80006fd0:	80 00       	ld.sh	r0,r0[0x0]
80006fd2:	2d de       	sub	lr,-35
80006fd4:	80 00       	ld.sh	r0,r0[0x0]
80006fd6:	2d b6       	sub	r6,-37
80006fd8:	80 00       	ld.sh	r0,r0[0x0]
80006fda:	2d 48       	sub	r8,-44
80006fdc:	80 00       	ld.sh	r0,r0[0x0]
80006fde:	6f e4       	ld.w	r4,r7[0x78]
80006fe0:	80 00       	ld.sh	r0,r0[0x0]
80006fe2:	32 48       	mov	r8,36

80006fe4 <ACInterruptHandler>:
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
}
__attribute__((__interrupt__)) static void ACInterruptHandler(void)
{
80006fe4:	d4 01       	pushm	lr
	//print_dbg("\n\rACIFA Interrupt Entered.");
	acifa_clear_flags(&AVR32_ACIFA1, 3);
80006fe6:	30 3b       	mov	r11,3
80006fe8:	fe 7c 64 00 	mov	r12,-39936
80006fec:	f0 1f 00 1a 	mcall	80007054 <ACInterruptHandler+0x70>
	
	if (acifa_is_acb_inp_higher(&AVR32_ACIFA1)) //LEFT MOTOR
80006ff0:	fe 7c 64 00 	mov	r12,-39936
80006ff4:	f0 1f 00 19 	mcall	80007058 <ACInterruptHandler+0x74>
80006ff8:	c0 50       	breq	80007002 <ACInterruptHandler+0x1e>
	{
		LED5_SET; //wheel not on white tab
80006ffa:	33 cc       	mov	r12,60
80006ffc:	f0 1f 00 18 	mcall	8000705c <ACInterruptHandler+0x78>
80007000:	c0 88       	rjmp	80007010 <ACInterruptHandler+0x2c>
	}
	else
	{
		LED5_CLR;
80007002:	33 cc       	mov	r12,60
80007004:	f0 1f 00 17 	mcall	80007060 <ACInterruptHandler+0x7c>
		Motor_Cntrl.Left_Count --;
80007008:	49 78       	lddpc	r8,80007064 <ACInterruptHandler+0x80>
8000700a:	70 29       	ld.w	r9,r8[0x8]
8000700c:	20 19       	sub	r9,1
8000700e:	91 29       	st.w	r8[0x8],r9
	}
	
	if (acifa_is_aca_inp_higher(&AVR32_ACIFA1))
80007010:	fe 7c 64 00 	mov	r12,-39936
80007014:	f0 1f 00 15 	mcall	80007068 <ACInterruptHandler+0x84>
80007018:	c0 50       	breq	80007022 <ACInterruptHandler+0x3e>
	{

		LED6_SET;
8000701a:	33 dc       	mov	r12,61
8000701c:	f0 1f 00 10 	mcall	8000705c <ACInterruptHandler+0x78>
80007020:	c0 88       	rjmp	80007030 <ACInterruptHandler+0x4c>
		
	}
	else
	{
		LED6_CLR;
80007022:	33 dc       	mov	r12,61
80007024:	f0 1f 00 0f 	mcall	80007060 <ACInterruptHandler+0x7c>
		Motor_Cntrl.Right_Count --;
80007028:	48 f8       	lddpc	r8,80007064 <ACInterruptHandler+0x80>
8000702a:	70 39       	ld.w	r9,r8[0xc]
8000702c:	20 19       	sub	r9,1
8000702e:	91 39       	st.w	r8[0xc],r9
80007030:	48 d8       	lddpc	r8,80007064 <ACInterruptHandler+0x80>
80007032:	70 29       	ld.w	r9,r8[0x8]
80007034:	f2 cc 00 01 	sub	r12,r9,1
80007038:	f9 e9 10 09 	or	r9,r12,r9
8000703c:	f2 0c 16 1f 	lsr	r12,r9,0x1f
	}
	int temp = 0;
	if(Motor_Cntrl.Left_Count <= 0) //if we have reached the end of the movement on left wheel
		temp |= MOTOR_L;
	
	if(Motor_Cntrl.Right_Count <= 0)
80007040:	70 38       	ld.w	r8,r8[0xc]
80007042:	58 08       	cp.w	r8,0
80007044:	e0 89 00 03 	brgt	8000704a <ACInterruptHandler+0x66>
		temp |= MOTOR_R;
80007048:	a1 bc       	sbr	r12,0x1
		
	Motor_Stop(temp); //Stop the Right Motor
8000704a:	f0 1f 00 09 	mcall	8000706c <ACInterruptHandler+0x88>
}
8000704e:	d4 02       	popm	lr
80007050:	d6 03       	rete
80007052:	00 00       	add	r0,r0
80007054:	80 00       	ld.sh	r0,r0[0x0]
80007056:	2d b0       	sub	r0,-37
80007058:	80 00       	ld.sh	r0,r0[0x0]
8000705a:	2d a8       	sub	r8,-38
8000705c:	80 00       	ld.sh	r0,r0[0x0]
8000705e:	32 0e       	mov	lr,32
80007060:	80 00       	ld.sh	r0,r0[0x0]
80007062:	32 2a       	mov	r10,34
80007064:	00 00       	add	r0,r0
80007066:	0c 98       	mov	r8,r6
80007068:	80 00       	ld.sh	r0,r0[0x0]
8000706a:	2d a0       	sub	r0,-38
8000706c:	80 00       	ld.sh	r0,r0[0x0]
8000706e:	6e 20       	ld.w	r0,r7[0x8]

80007070 <Motor_Init>:
// #  define EXAMPLE_PWM_L_FUNCTION        AVR32_PWM_PWML_0_1_FUNCTION
// #  define EXAMPLE_PWM_H_PIN             AVR32_PWM_PWMH_0_1_PIN
// #  define EXAMPLE_PWM_H_FUNCTION        AVR32_PWM_PWMH_0_1_FUNCTION
// #  define EXAMPLE_PWM_CHANNEL_ID        0
void Motor_Init()
{
80007070:	eb cd 40 c0 	pushm	r6-r7,lr
80007074:	20 dd       	sub	sp,52
	//Turn boths motors off
	ML_STANDBY;
80007076:	32 8c       	mov	r12,40
80007078:	f0 1f 00 41 	mcall	8000717c <Motor_Init+0x10c>
	MR_STANDBY;
8000707c:	33 0c       	mov	r12,48
8000707e:	f0 1f 00 40 	mcall	8000717c <Motor_Init+0x10c>
	
	ML_IN1_CLR;
80007082:	32 9c       	mov	r12,41
80007084:	f0 1f 00 3e 	mcall	8000717c <Motor_Init+0x10c>
	ML_IN2_CLR;
80007088:	32 ac       	mov	r12,42
8000708a:	f0 1f 00 3d 	mcall	8000717c <Motor_Init+0x10c>
	
	MR_IN1_CLR;
8000708e:	32 fc       	mov	r12,47
80007090:	f0 1f 00 3b 	mcall	8000717c <Motor_Init+0x10c>
	MR_IN2_CLR;
80007094:	32 ec       	mov	r12,46
80007096:	f0 1f 00 3a 	mcall	8000717c <Motor_Init+0x10c>
	
	Motor_Cntrl.Left_Count = 0;
8000709a:	4b a8       	lddpc	r8,80007180 <Motor_Init+0x110>
8000709c:	30 07       	mov	r7,0
8000709e:	91 27       	st.w	r8[0x8],r7
	Motor_Cntrl.Right_Count = 0;
800070a0:	91 37       	st.w	r8[0xc],r7
	Motor_Cntrl.Left_State = STOP;
800070a2:	30 69       	mov	r9,6
800070a4:	91 09       	st.w	r8[0x0],r9
	Motor_Cntrl.Right_State = STOP;
800070a6:	91 19       	st.w	r8[0x4],r9
											{0}, // cdtyupd
											{0}, // cprd
											{0}, // cprdupd
											{0}, // ccnt
											{0}, // dt
											{0}};// dtupd  ;  One channel config.
800070a8:	30 08       	mov	r8,0
800070aa:	30 09       	mov	r9,0
800070ac:	fa e9 00 14 	st.d	sp[20],r8
800070b0:	fa e9 00 1c 	st.d	sp[28],r8
800070b4:	fa e9 00 24 	st.d	sp[36],r8
800070b8:	fa e9 00 2c 	st.d	sp[44],r8
            .div = 1,             // DIV=1 in the formula
            .mul = 6,             // MUL=7 in the formula
            .pll_div2 = 1,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
            .pll_wbwdisable = 0,  // pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
            .pll_freq = 1,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
  };
800070bc:	4b 28       	lddpc	r8,80007184 <Motor_Init+0x114>
800070be:	1a 9b       	mov	r11,sp
800070c0:	70 09       	ld.w	r9,r8[0x0]
800070c2:	50 09       	stdsp	sp[0x0],r9
800070c4:	70 19       	ld.w	r9,r8[0x4]
800070c6:	50 19       	stdsp	sp[0x4],r9
800070c8:	70 29       	ld.w	r9,r8[0x8]
800070ca:	50 29       	stdsp	sp[0x8],r9
800070cc:	70 39       	ld.w	r9,r8[0xc]
800070ce:	50 39       	stdsp	sp[0xc],r9
800070d0:	70 48       	ld.w	r8,r8[0x10]
800070d2:	50 48       	stdsp	sp[0x10],r8
  // Switch main clock to Osc0.
//  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

  /* Setup PLL0 on Osc0, mul=7 ,no divisor, lockcount=16, ie. (16Mhzx7)/(div2) = 56MHz output */
  scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
800070d4:	0e 9c       	mov	r12,r7
800070d6:	f0 1f 00 2d 	mcall	80007188 <Motor_Init+0x118>

  /* Enable PLL0 */
  scif_pll_enable(SCIF_PLL0);
800070da:	0e 9c       	mov	r12,r7
800070dc:	f0 1f 00 2c 	mcall	8000718c <Motor_Init+0x11c>

  /* Wait for PLL0 locked */
  scif_wait_for_pll_locked(SCIF_PLL0) ;
800070e0:	0e 9c       	mov	r12,r7
800070e2:	f0 1f 00 2c 	mcall	80007190 <Motor_Init+0x120>
}
static void pwm_start_gc(void)
{
  scif_gc_setup(AVR32_SCIF_GCLK_PWM,
800070e6:	0e 99       	mov	r9,r7
800070e8:	0e 9a       	mov	r10,r7
800070ea:	30 5b       	mov	r11,5
800070ec:	30 4c       	mov	r12,4
800070ee:	f0 1f 00 2a 	mcall	80007194 <Motor_Init+0x124>
//   scif_gc_setup(  AVR32_SCIF_GCLK_PWM,
// 				  SCIF_GCCTRL_OSC0,
// 				  AVR32_SCIF_GC_NO_DIV_CLOCK,
// 				  0);
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_PWM);
800070f2:	30 4c       	mov	r12,4
800070f4:	f0 1f 00 29 	mcall	80007198 <Motor_Init+0x128>
	
// 	gpio_enable_module_pin(EXAMPLE_PWM_L_PIN, EXAMPLE_PWM_L_FUNCTION);
// 	gpio_enable_module_pin(EXAMPLE_PWM_H_PIN, EXAMPLE_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(AVR32_PIN_PB10, AVR32_PWM_PWMH_1_1_FUNCTION); //PWM1 Low
	gpio_enable_module_pin(ML_PWM_H_PIN, ML_PWM_H_FUNCTION);
800070f8:	30 2b       	mov	r11,2
800070fa:	32 bc       	mov	r12,43
800070fc:	f0 1f 00 28 	mcall	8000719c <Motor_Init+0x12c>
	gpio_enable_module_pin(MR_PWM_H_PIN, MR_PWM_H_FUNCTION); //PWM1 Low
80007100:	30 2b       	mov	r11,2
80007102:	32 dc       	mov	r12,45
80007104:	f0 1f 00 26 	mcall	8000719c <Motor_Init+0x12c>
	//gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION);
	// PWM controller configuration.
	pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80007108:	4a 6c       	lddpc	r12,800071a0 <Motor_Init+0x130>
8000710a:	99 17       	st.w	r12[0x4],r7
	pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
8000710c:	99 07       	st.w	r12[0x0],r7
	pwm_opt.prea = AVR32_PWM_PREA_CCK;
8000710e:	99 37       	st.w	r12[0xc],r7
	pwm_opt.preb = AVR32_PWM_PREB_CCK;
80007110:	99 27       	st.w	r12[0x8],r7
	
	pwm_opt.fault_detection_activated = false;
80007112:	f9 67 00 14 	st.b	r12[20],r7
	pwm_opt.sync_channel_activated    = true;
80007116:	30 18       	mov	r8,1
80007118:	f9 68 00 15 	st.b	r12[21],r8
	pwm_opt.sync_update_channel_mode  = PWM_SYNC_UPDATE_MANUAL_WRITE_MANUAL_UPDATE;
8000711c:	f9 67 00 16 	st.b	r12[22],r7
	pwm_opt.sync_channel_select[0]    = false;
80007120:	f9 67 00 17 	st.b	r12[23],r7
	pwm_opt.sync_channel_select[1]    = false;
80007124:	f9 67 00 18 	st.b	r12[24],r7
	pwm_opt.sync_channel_select[2]    = false;
80007128:	f9 67 00 19 	st.b	r12[25],r7
	pwm_opt.sync_channel_select[3]    = false;
8000712c:	f9 67 00 1a 	st.b	r12[26],r7
	pwm_opt.cksel                     = PWM_CKSEL_GCLK;
80007130:	30 16       	mov	r6,1
80007132:	99 46       	st.w	r12[0x10],r6
	pwm_init(&pwm_opt);
80007134:	f0 1f 00 1c 	mcall	800071a4 <Motor_Init+0x134>
	
	// Update the period
	pwm_update_period_value(10);
80007138:	30 ac       	mov	r12,10
8000713a:	f0 1f 00 1c 	mcall	800071a8 <Motor_Init+0x138>
	pwm_channel.CMR.dte   = 0;        // Enable Deadtime for complementary Mode
	pwm_channel.CMR.dthi  = 0;        // Deadtime Inverted on PWMH
	pwm_channel.CMR.dtli  = 0;        // Deadtime Not Inverted on PWML
	pwm_channel.CMR.ces   = 0;        // 0/1 Channel Event at the End of PWM Period
	pwm_channel.CMR.calg  = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
	pwm_channel.CMR.cpol  = PWM_POLARITY_HIGH;            // Channel polarity.
8000713e:	40 58       	lddsp	r8,sp[0x14]
80007140:	e4 18 ff f8 	andh	r8,0xfff8
80007144:	e0 18 fa ff 	andl	r8,0xfaff
80007148:	f1 d6 d1 21 	bfins	r8,r6,0x9,0x1
	pwm_channel.CMR.cpre  = AVR32_PWM_CPRE_CCK;           // Channel prescaler.
8000714c:	f1 d7 d0 04 	bfins	r8,r7,0x0,0x4
80007150:	50 58       	stdsp	sp[0x14],r8
	pwm_channel.cdty      = 50;       // Channel duty cycle, should be < CPRD.
80007152:	33 28       	mov	r8,50
80007154:	50 68       	stdsp	sp[0x18],r8
	pwm_channel.cprd      = 200;       // Channel period.
80007156:	e0 68 00 c8 	mov	r8,200
8000715a:	50 88       	stdsp	sp[0x20],r8
	
/*	channel_id = M0_PWM_CHANNEL_ID;*/
	pwm_channel_init(ML_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
8000715c:	fa c7 ff ec 	sub	r7,sp,-20
80007160:	0e 9b       	mov	r11,r7
80007162:	0c 9c       	mov	r12,r6
80007164:	f0 1f 00 12 	mcall	800071ac <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
/*	channel_id = M1_PWM_CHANNEL_ID; */
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80007168:	0e 9b       	mov	r11,r7
8000716a:	30 2c       	mov	r12,2
8000716c:	f0 1f 00 10 	mcall	800071ac <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
80007170:	f0 1f 00 10 	mcall	800071b0 <Motor_Init+0x140>
}
80007174:	2f 3d       	sub	sp,-52
80007176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000717a:	00 00       	add	r0,r0
8000717c:	80 00       	ld.sh	r0,r0[0x0]
8000717e:	32 2a       	mov	r10,34
80007180:	00 00       	add	r0,r0
80007182:	0c 98       	mov	r8,r6
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	e3 a8 80 00 	cop	cp4,cr0,cr0,cr0,0x30
8000718a:	37 34       	mov	r4,115
8000718c:	80 00       	ld.sh	r0,r0[0x0]
8000718e:	36 f0       	mov	r0,111
80007190:	80 00       	ld.sh	r0,r0[0x0]
80007192:	35 f6       	mov	r6,95
80007194:	80 00       	ld.sh	r0,r0[0x0]
80007196:	36 48       	mov	r8,100
80007198:	80 00       	ld.sh	r0,r0[0x0]
8000719a:	36 cc       	mov	r12,108
8000719c:	80 00       	ld.sh	r0,r0[0x0]
8000719e:	31 30       	mov	r0,19
800071a0:	00 00       	add	r0,r0
800071a2:	0c d0       	st.w	--r6,r0
800071a4:	80 00       	ld.sh	r0,r0[0x0]
800071a6:	34 e0       	mov	r0,78
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	34 d6       	mov	r6,77
800071ac:	80 00       	ld.sh	r0,r0[0x0]
800071ae:	34 74       	mov	r4,71
800071b0:	80 00       	ld.sh	r0,r0[0x0]
800071b2:	6f 38       	ld.w	r8,r7[0x4c]

800071b4 <Photos_Ready>:
}

bool Photos_Ready(void)
{
	int status = 0;
	if(OV7670_Status.Camera_0_Found == true) //If camera is there
800071b4:	49 78       	lddpc	r8,80007210 <Photos_Ready+0x5c>
800071b6:	11 99       	ld.ub	r9,r8[0x1]
800071b8:	30 08       	mov	r8,0
800071ba:	f0 09 18 00 	cp.b	r9,r8
800071be:	c0 e0       	breq	800071da <Photos_Ready+0x26>
	{ 
		if(OV7670_Status.Camera_0_Error == false)//and has no errors
800071c0:	49 48       	lddpc	r8,80007210 <Photos_Ready+0x5c>
800071c2:	11 b9       	ld.ub	r9,r8[0x3]
800071c4:	30 08       	mov	r8,0
800071c6:	f0 09 18 00 	cp.b	r9,r8
800071ca:	c0 81       	brne	800071da <Photos_Ready+0x26>
800071cc:	49 18       	lddpc	r8,80007210 <Photos_Ready+0x5c>
800071ce:	11 d9       	ld.ub	r9,r8[0x5]
800071d0:	30 38       	mov	r8,3
800071d2:	f0 09 18 00 	cp.b	r9,r8
800071d6:	5f 08       	sreq	r8
800071d8:	c0 28       	rjmp	800071dc <Photos_Ready+0x28>
800071da:	30 18       	mov	r8,1
			status |= 1;
	}
	else
		status |= 1;		
		
	if(OV7670_Status.Camera_1_Found == true) //If camera is there
800071dc:	48 d9       	lddpc	r9,80007210 <Photos_Ready+0x5c>
800071de:	13 aa       	ld.ub	r10,r9[0x2]
800071e0:	30 09       	mov	r9,0
800071e2:	f2 0a 18 00 	cp.b	r10,r9
800071e6:	c1 10       	breq	80007208 <Photos_Ready+0x54>
	{
		if(OV7670_Status.Camera_1_Error == false)//and has no errors
800071e8:	48 a9       	lddpc	r9,80007210 <Photos_Ready+0x5c>
800071ea:	13 ca       	ld.ub	r10,r9[0x4]
800071ec:	30 09       	mov	r9,0
800071ee:	f2 0a 18 00 	cp.b	r10,r9
800071f2:	c0 91       	brne	80007204 <Photos_Ready+0x50>
		{
			if(OV7670_Status.VSYNC1_State == TAKEN_PHOTO)
800071f4:	48 79       	lddpc	r9,80007210 <Photos_Ready+0x5c>
800071f6:	13 ea       	ld.ub	r10,r9[0x6]
800071f8:	30 39       	mov	r9,3
800071fa:	f2 0a 18 00 	cp.b	r10,r9
800071fe:	c0 61       	brne	8000720a <Photos_Ready+0x56>
			{
				status |= 1; //camera0 has taken photo
80007200:	a1 a8       	sbr	r8,0x0
80007202:	c0 48       	rjmp	8000720a <Photos_Ready+0x56>
			}
		}
		else
		status |= 1;
80007204:	a1 a8       	sbr	r8,0x0
80007206:	c0 28       	rjmp	8000720a <Photos_Ready+0x56>
	}
	else
		status |= 1;
80007208:	a1 a8       	sbr	r8,0x0
8000720a:	58 08       	cp.w	r8,0
		
	if(status)
		return true;
	else
		return false;
}
8000720c:	5f 1c       	srne	r12
8000720e:	5e fc       	retal	r12
80007210:	00 00       	add	r0,r0
80007212:	0c a8       	st.w	r6++,r8

80007214 <FIFO_Reset>:
	delay_us(10);
	FIFO_1_WRST_SET;
}

void FIFO_Reset(uint8_t CameraID)
{
80007214:	eb cd 40 80 	pushm	r7,lr
80007218:	18 97       	mov	r7,r12
	FIFO_0_nOE_SET;
8000721a:	31 cc       	mov	r12,28
8000721c:	f0 1f 00 19 	mcall	80007280 <FIFO_Reset+0x6c>
	FIFO_1_nOE_SET;
80007220:	31 bc       	mov	r12,27
80007222:	f0 1f 00 18 	mcall	80007280 <FIFO_Reset+0x6c>
	if(CameraID & CAMERA_LEFT)
80007226:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
8000722a:	c1 30       	breq	80007250 <FIFO_Reset+0x3c>
	{
		FIFO_0_WRST_CLR;
8000722c:	31 5c       	mov	r12,21
8000722e:	f0 1f 00 16 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_0_nRRST_CLR;
80007232:	30 fc       	mov	r12,15
80007234:	f0 1f 00 14 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_0_RCLK_SET;
80007238:	31 3c       	mov	r12,19
8000723a:	f0 1f 00 12 	mcall	80007280 <FIFO_Reset+0x6c>
		FIFO_0_RCLK_CLR;
8000723e:	31 3c       	mov	r12,19
80007240:	f0 1f 00 11 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_0_nRRST_SET;
80007244:	30 fc       	mov	r12,15
80007246:	f0 1f 00 0f 	mcall	80007280 <FIFO_Reset+0x6c>
		FIFO_0_WRST_SET;
8000724a:	31 5c       	mov	r12,21
8000724c:	f0 1f 00 0d 	mcall	80007280 <FIFO_Reset+0x6c>
	}
	if(CameraID & CAMERA_RIGHT)
80007250:	e2 17 00 02 	andl	r7,0x2,COH
80007254:	c1 30       	breq	8000727a <FIFO_Reset+0x66>
	{
		FIFO_1_WRST_CLR;
80007256:	31 9c       	mov	r12,25
80007258:	f0 1f 00 0b 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_1_nRRST_CLR;
8000725c:	31 6c       	mov	r12,22
8000725e:	f0 1f 00 0a 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_1_RCLK_SET;
80007262:	31 7c       	mov	r12,23
80007264:	f0 1f 00 07 	mcall	80007280 <FIFO_Reset+0x6c>
		FIFO_1_RCLK_CLR;
80007268:	31 7c       	mov	r12,23
8000726a:	f0 1f 00 07 	mcall	80007284 <FIFO_Reset+0x70>
		FIFO_1_nRRST_SET;
8000726e:	31 6c       	mov	r12,22
80007270:	f0 1f 00 04 	mcall	80007280 <FIFO_Reset+0x6c>
		FIFO_1_WRST_SET;
80007274:	31 9c       	mov	r12,25
80007276:	f0 1f 00 03 	mcall	80007280 <FIFO_Reset+0x6c>
8000727a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000727e:	00 00       	add	r0,r0
80007280:	80 00       	ld.sh	r0,r0[0x0]
80007282:	32 0e       	mov	lr,32
80007284:	80 00       	ld.sh	r0,r0[0x0]
80007286:	32 2a       	mov	r10,34

80007288 <Store_Image_0>:
	FIFO_Reset(CAMERA_LEFT);
	
	return true;
}
void Store_Image_0()
{ 
80007288:	d4 31       	pushm	r0-r7,lr
8000728a:	fa cd 02 90 	sub	sp,sp,656
8000728e:	30 07       	mov	r7,0
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
		sprintf(&Filename_buff, Image0Name, i++);
80007290:	4b 44       	lddpc	r4,80007360 <Store_Image_0+0xd8>
80007292:	fa c5 fd 80 	sub	r5,sp,-640
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80007296:	0e 93       	mov	r3,r7
	//delete file if it exits already
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
80007298:	f0 1f 00 33 	mcall	80007364 <Store_Image_0+0xdc>
		sprintf(&Filename_buff, Image0Name, i++);
8000729c:	ee c6 ff ff 	sub	r6,r7,-1
800072a0:	1a d7       	st.w	--sp,r7
800072a2:	08 9b       	mov	r11,r4
800072a4:	0a 9c       	mov	r12,r5
800072a6:	f0 1f 00 31 	mcall	80007368 <Store_Image_0+0xe0>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
800072aa:	06 9b       	mov	r11,r3
800072ac:	0a 9c       	mov	r12,r5
800072ae:	f0 1f 00 30 	mcall	8000736c <Store_Image_0+0xe4>
800072b2:	2f fd       	sub	sp,-4
800072b4:	58 0c       	cp.w	r12,0
800072b6:	c0 30       	breq	800072bc <Store_Image_0+0x34>
800072b8:	0c 97       	mov	r7,r6
800072ba:	ce fb       	rjmp	80007298 <Store_Image_0+0x10>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
800072bc:	fa cc fd 80 	sub	r12,sp,-640
800072c0:	f0 1f 00 2c 	mcall	80007370 <Store_Image_0+0xe8>
	
	file_open(FOPEN_MODE_W);
800072c4:	30 ec       	mov	r12,14
800072c6:	f0 1f 00 2c 	mcall	80007374 <Store_Image_0+0xec>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
800072ca:	30 eb       	mov	r11,14
800072cc:	4a bc       	lddpc	r12,80007378 <Store_Image_0+0xf0>
800072ce:	f0 1f 00 2c 	mcall	8000737c <Store_Image_0+0xf4>
	file_write_buf(DIBHead, DIBHEADERSIZE);
800072d2:	37 cb       	mov	r11,124
800072d4:	4a bc       	lddpc	r12,80007380 <Store_Image_0+0xf8>
800072d6:	f0 1f 00 2a 	mcall	8000737c <Store_Image_0+0xf4>
	
	//read and write image data
	//Image0
	//reset read pointer
	FIFO_0_nRRST_CLR;
800072da:	30 fc       	mov	r12,15
800072dc:	f0 1f 00 2a 	mcall	80007384 <Store_Image_0+0xfc>
	FIFO_0_RCLK_SET;
800072e0:	31 3c       	mov	r12,19
800072e2:	f0 1f 00 2a 	mcall	80007388 <Store_Image_0+0x100>

	FIFO_0_RCLK_CLR;
800072e6:	31 3c       	mov	r12,19
800072e8:	f0 1f 00 27 	mcall	80007384 <Store_Image_0+0xfc>
	FIFO_0_nRRST_SET;
800072ec:	30 fc       	mov	r12,15
800072ee:	f0 1f 00 27 	mcall	80007388 <Store_Image_0+0x100>
	
	//enable output
	FIFO_0_nOE_CLR;
800072f2:	31 cc       	mov	r12,28
800072f4:	f0 1f 00 24 	mcall	80007384 <Store_Image_0+0xfc>
800072f8:	30 03       	mov	r3,0
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
800072fa:	fa c2 ff ff 	sub	r2,sp,-1
	Store_Image_0();
	FIFO_Reset(CAMERA_LEFT);
	
	return true;
}
void Store_Image_0()
800072fe:	fa c4 fd 7f 	sub	r4,sp,-641
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
80007302:	31 36       	mov	r6,19
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80007304:	fe 75 20 00 	mov	r5,-57344
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80007308:	1a 91       	mov	r1,sp
8000730a:	e0 60 02 80 	mov	r0,640
8000730e:	c1 f8       	rjmp	8000734c <Store_Image_0+0xc4>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
80007310:	0c 9c       	mov	r12,r6
80007312:	f0 1f 00 1e 	mcall	80007388 <Store_Image_0+0x100>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80007316:	ea f8 02 60 	ld.w	r8,r5[608]
8000731a:	ae 88       	st.b	r7[0x0],r8
			FIFO_0_RCLK_CLR;
8000731c:	0c 9c       	mov	r12,r6
8000731e:	f0 1f 00 1a 	mcall	80007384 <Store_Image_0+0xfc>
			FIFO_0_RCLK_SET;
80007322:	0c 9c       	mov	r12,r6
80007324:	f0 1f 00 19 	mcall	80007388 <Store_Image_0+0x100>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80007328:	ea f8 02 60 	ld.w	r8,r5[608]
8000732c:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_0_RCLK_CLR;
80007330:	0c 9c       	mov	r12,r6
80007332:	f0 1f 00 15 	mcall	80007384 <Store_Image_0+0xfc>
80007336:	2f e7       	sub	r7,-2
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
80007338:	08 37       	cp.w	r7,r4
8000733a:	ce b1       	brne	80007310 <Store_Image_0+0x88>
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
8000733c:	00 9b       	mov	r11,r0
8000733e:	1a 9c       	mov	r12,sp
80007340:	f0 1f 00 0f 	mcall	8000737c <Store_Image_0+0xf4>
	
	//enable output
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
80007344:	2f f3       	sub	r3,-1
80007346:	e0 43 00 f0 	cp.w	r3,240
8000734a:	c0 30       	breq	80007350 <Store_Image_0+0xc8>
8000734c:	04 97       	mov	r7,r2
8000734e:	ce 1b       	rjmp	80007310 <Store_Image_0+0x88>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_0_nOE_SET;
80007350:	31 cc       	mov	r12,28
80007352:	f0 1f 00 0e 	mcall	80007388 <Store_Image_0+0x100>
	file_close();
80007356:	f0 1f 00 0e 	mcall	8000738c <Store_Image_0+0x104>

	
}
8000735a:	fe 3d fd 70 	sub	sp,-656
8000735e:	d8 32       	popm	r0-r7,pc
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	e3 dc 80 00 	ldswp.w	r12,r1[0]
80007366:	65 2c       	ld.w	r12,r2[0x48]
80007368:	80 00       	ld.sh	r0,r0[0x0]
8000736a:	85 10       	st.w	r2[0x4],r0
8000736c:	80 00       	ld.sh	r0,r0[0x0]
8000736e:	64 fc       	ld.w	r12,r2[0x3c]
80007370:	80 00       	ld.sh	r0,r0[0x0]
80007372:	65 44       	ld.w	r4,r2[0x50]
80007374:	80 00       	ld.sh	r0,r0[0x0]
80007376:	61 e4       	ld.w	r4,r0[0x78]
80007378:	80 00       	ld.sh	r0,r0[0x0]
8000737a:	e3 1c 80 00 	ld.uh	r12,r1[-32768]
8000737e:	60 70       	ld.w	r0,r0[0x1c]
80007380:	80 00       	ld.sh	r0,r0[0x0]
80007382:	e3 2c 80 00 	ld.sb	r12,r1[-32768]
80007386:	32 2a       	mov	r10,34
80007388:	80 00       	ld.sh	r0,r0[0x0]
8000738a:	32 0e       	mov	lr,32
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	60 34       	ld.w	r4,r0[0xc]

80007390 <Store_Image_1>:

void Store_Image_1()
{
80007390:	d4 31       	pushm	r0-r7,lr
80007392:	fa cd 02 90 	sub	sp,sp,656
	uint8_t buffer[WIDTH * 2];
	char Filename_buff[15];
	i = 0;
	//make file
	//delete file if it exits already
	nav_filelist_reset();
80007396:	f0 1f 00 3f 	mcall	80007490 <Store_Image_1+0x100>
8000739a:	30 08       	mov	r8,0
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
8000739c:	4b e5       	lddpc	r5,80007494 <Store_Image_1+0x104>
8000739e:	1a 97       	mov	r7,sp
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
800073a0:	10 94       	mov	r4,r8
	//make file
	//delete file if it exits already
	nav_filelist_reset();
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
800073a2:	f0 c6 ff ff 	sub	r6,r8,-1
800073a6:	1a d8       	st.w	--sp,r8
800073a8:	0a 9b       	mov	r11,r5
800073aa:	0e 9c       	mov	r12,r7
800073ac:	f0 1f 00 3b 	mcall	80007498 <Store_Image_1+0x108>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
800073b0:	08 9b       	mov	r11,r4
800073b2:	0e 9c       	mov	r12,r7
800073b4:	f0 1f 00 3a 	mcall	8000749c <Store_Image_1+0x10c>
800073b8:	0c 98       	mov	r8,r6
800073ba:	2f fd       	sub	sp,-4
800073bc:	58 0c       	cp.w	r12,0
800073be:	cf 21       	brne	800073a2 <Store_Image_1+0x12>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
800073c0:	1a 9c       	mov	r12,sp
800073c2:	f0 1f 00 38 	mcall	800074a0 <Store_Image_1+0x110>
	file_open(FOPEN_MODE_W);
800073c6:	30 ec       	mov	r12,14
800073c8:	f0 1f 00 37 	mcall	800074a4 <Store_Image_1+0x114>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
800073cc:	30 eb       	mov	r11,14
800073ce:	4b 7c       	lddpc	r12,800074a8 <Store_Image_1+0x118>
800073d0:	f0 1f 00 37 	mcall	800074ac <Store_Image_1+0x11c>
	file_write_buf(DIBHead, DIBHEADERSIZE);
800073d4:	37 cb       	mov	r11,124
800073d6:	4b 7c       	lddpc	r12,800074b0 <Store_Image_1+0x120>
800073d8:	f0 1f 00 35 	mcall	800074ac <Store_Image_1+0x11c>
	//Image1
	//reset read pointer
	FIFO_1_nRRST_CLR;
800073dc:	31 6c       	mov	r12,22
800073de:	f0 1f 00 36 	mcall	800074b4 <Store_Image_1+0x124>
	FIFO_1_RCLK_SET;
800073e2:	31 7c       	mov	r12,23
800073e4:	f0 1f 00 35 	mcall	800074b8 <Store_Image_1+0x128>

	FIFO_1_RCLK_CLR;
800073e8:	31 7c       	mov	r12,23
800073ea:	f0 1f 00 33 	mcall	800074b4 <Store_Image_1+0x124>
	FIFO_1_nRRST_SET;
800073ee:	31 6c       	mov	r12,22
800073f0:	f0 1f 00 32 	mcall	800074b8 <Store_Image_1+0x128>
	
	//enable output
	FIFO_1_nOE_CLR;
800073f4:	31 bc       	mov	r12,27
800073f6:	f0 1f 00 30 	mcall	800074b4 <Store_Image_1+0x124>
800073fa:	30 03       	mov	r3,0
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
800073fc:	fa c2 ff ef 	sub	r2,sp,-17
	file_close();

	
}

void Store_Image_1()
80007400:	fa c4 fd 6f 	sub	r4,sp,-657
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
80007404:	31 76       	mov	r6,23
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80007406:	fe 75 20 00 	mov	r5,-57344
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
8000740a:	fa c1 ff f0 	sub	r1,sp,-16
8000740e:	e0 60 02 80 	mov	r0,640
80007412:	c2 78       	rjmp	80007460 <Store_Image_1+0xd0>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
80007414:	0c 9c       	mov	r12,r6
80007416:	f0 1f 00 29 	mcall	800074b8 <Store_Image_1+0x128>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000741a:	ea f8 02 60 	ld.w	r8,r5[608]
8000741e:	ae 88       	st.b	r7[0x0],r8
			FIFO_1_RCLK_CLR;
80007420:	0c 9c       	mov	r12,r6
80007422:	f0 1f 00 25 	mcall	800074b4 <Store_Image_1+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007426:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000742a:	f0 ca ff f0 	sub	r10,r8,-16
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000742e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007432:	14 38       	cp.w	r8,r10
80007434:	e0 88 00 08 	brls	80007444 <Store_Image_1+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007438:	12 38       	cp.w	r8,r9
8000743a:	fe 98 ff fa 	brls	8000742e <Store_Image_1+0x9e>
8000743e:	12 3a       	cp.w	r10,r9
80007440:	c1 a3       	brcs	80007474 <Store_Image_1+0xe4>
80007442:	cf 6b       	rjmp	8000742e <Store_Image_1+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007444:	12 38       	cp.w	r8,r9
80007446:	e0 8b 00 17 	brhi	80007474 <Store_Image_1+0xe4>
8000744a:	12 3a       	cp.w	r10,r9
8000744c:	c1 43       	brcs	80007474 <Store_Image_1+0xe4>
8000744e:	cf 0b       	rjmp	8000742e <Store_Image_1+0x9e>
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80007450:	00 9b       	mov	r11,r0
80007452:	02 9c       	mov	r12,r1
80007454:	f0 1f 00 16 	mcall	800074ac <Store_Image_1+0x11c>
	
	//enable output
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
80007458:	2f f3       	sub	r3,-1
8000745a:	e0 43 00 f0 	cp.w	r3,240
8000745e:	c0 30       	breq	80007464 <Store_Image_1+0xd4>
80007460:	04 97       	mov	r7,r2
80007462:	cd 9b       	rjmp	80007414 <Store_Image_1+0x84>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_1_nOE_SET;//disable output
80007464:	31 bc       	mov	r12,27
80007466:	f0 1f 00 15 	mcall	800074b8 <Store_Image_1+0x128>
	file_close();
8000746a:	f0 1f 00 15 	mcall	800074bc <Store_Image_1+0x12c>
8000746e:	fe 3d fd 70 	sub	sp,-656
80007472:	d8 32       	popm	r0-r7,pc
		{
			FIFO_1_RCLK_SET;
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
			delay_us(1);
			FIFO_1_RCLK_SET;
80007474:	0c 9c       	mov	r12,r6
80007476:	f0 1f 00 11 	mcall	800074b8 <Store_Image_1+0x128>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000747a:	ea f8 02 60 	ld.w	r8,r5[608]
8000747e:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_1_RCLK_CLR;
80007482:	0c 9c       	mov	r12,r6
80007484:	f0 1f 00 0c 	mcall	800074b4 <Store_Image_1+0x124>
80007488:	2f e7       	sub	r7,-2
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
8000748a:	08 37       	cp.w	r7,r4
8000748c:	cc 41       	brne	80007414 <Store_Image_1+0x84>
8000748e:	ce 1b       	rjmp	80007450 <Store_Image_1+0xc0>
80007490:	80 00       	ld.sh	r0,r0[0x0]
80007492:	65 2c       	ld.w	r12,r2[0x48]
80007494:	80 00       	ld.sh	r0,r0[0x0]
80007496:	e3 ec 80 00 	sthh.w	r0[r0],r1:b,r12:b
8000749a:	85 10       	st.w	r2[0x4],r0
8000749c:	80 00       	ld.sh	r0,r0[0x0]
8000749e:	64 fc       	ld.w	r12,r2[0x3c]
800074a0:	80 00       	ld.sh	r0,r0[0x0]
800074a2:	65 44       	ld.w	r4,r2[0x50]
800074a4:	80 00       	ld.sh	r0,r0[0x0]
800074a6:	61 e4       	ld.w	r4,r0[0x78]
800074a8:	80 00       	ld.sh	r0,r0[0x0]
800074aa:	e3 1c 80 00 	ld.uh	r12,r1[-32768]
800074ae:	60 70       	ld.w	r0,r0[0x1c]
800074b0:	80 00       	ld.sh	r0,r0[0x0]
800074b2:	e3 2c 80 00 	ld.sb	r12,r1[-32768]
800074b6:	32 2a       	mov	r10,34
800074b8:	80 00       	ld.sh	r0,r0[0x0]
800074ba:	32 0e       	mov	lr,32
800074bc:	80 00       	ld.sh	r0,r0[0x0]
800074be:	60 34       	ld.w	r4,r0[0xc]

800074c0 <Store_Both_Images>:
}



bool Store_Both_Images()
{
800074c0:	d4 01       	pushm	lr
	if(Photos_Ready() == false)
800074c2:	f0 1f 00 08 	mcall	800074e0 <Store_Both_Images+0x20>
800074c6:	c0 c0       	breq	800074de <Store_Both_Images+0x1e>
		return false;
	
	Store_Image_1();
800074c8:	f0 1f 00 07 	mcall	800074e4 <Store_Both_Images+0x24>
	FIFO_Reset(CAMERA_RIGHT);
800074cc:	30 2c       	mov	r12,2
800074ce:	f0 1f 00 07 	mcall	800074e8 <Store_Both_Images+0x28>
	
	Store_Image_0();
800074d2:	f0 1f 00 07 	mcall	800074ec <Store_Both_Images+0x2c>
	FIFO_Reset(CAMERA_LEFT);
800074d6:	30 1c       	mov	r12,1
800074d8:	f0 1f 00 04 	mcall	800074e8 <Store_Both_Images+0x28>
800074dc:	30 1c       	mov	r12,1
	
	return true;
}
800074de:	d8 02       	popm	pc
800074e0:	80 00       	ld.sh	r0,r0[0x0]
800074e2:	71 b4       	ld.w	r4,r8[0x6c]
800074e4:	80 00       	ld.sh	r0,r0[0x0]
800074e6:	73 90       	ld.w	r0,r9[0x64]
800074e8:	80 00       	ld.sh	r0,r0[0x0]
800074ea:	72 14       	ld.w	r4,r9[0x4]
800074ec:	80 00       	ld.sh	r0,r0[0x0]
800074ee:	72 88       	ld.w	r8,r9[0x20]

800074f0 <FIFO_Init>:
	FIFO_Init();
	Enable_global_interrupt();
	
}
void FIFO_Init()
{
800074f0:	d4 01       	pushm	lr
	//Disable both outputs
	FIFO_0_nOE_SET
800074f2:	31 cc       	mov	r12,28
800074f4:	f0 1f 00 97 	mcall	80007750 <FIFO_Init+0x260>
	FIFO_1_nOE_SET
800074f8:	31 bc       	mov	r12,27
800074fa:	f0 1f 00 96 	mcall	80007750 <FIFO_Init+0x260>
	
	//Reset Buffer 0
	FIFO_0_WRST_CLR;
800074fe:	31 5c       	mov	r12,21
80007500:	f0 1f 00 95 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_0_RCLK_CLR;
80007504:	31 3c       	mov	r12,19
80007506:	f0 1f 00 94 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
8000750a:	30 fc       	mov	r12,15
8000750c:	f0 1f 00 91 	mcall	80007750 <FIFO_Init+0x260>
	FIFO_0_WEN_CLR;
80007510:	31 4c       	mov	r12,20
80007512:	f0 1f 00 91 	mcall	80007754 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007516:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000751a:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000751e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007522:	14 38       	cp.w	r8,r10
80007524:	e0 88 00 09 	brls	80007536 <FIFO_Init+0x46>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007528:	12 38       	cp.w	r8,r9
8000752a:	fe 98 ff fa 	brls	8000751e <FIFO_Init+0x2e>
8000752e:	12 3a       	cp.w	r10,r9
80007530:	e0 83 00 ac 	brlo	80007688 <FIFO_Init+0x198>
80007534:	cf 5b       	rjmp	8000751e <FIFO_Init+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007536:	12 38       	cp.w	r8,r9
80007538:	e0 8b 00 a8 	brhi	80007688 <FIFO_Init+0x198>
8000753c:	12 3a       	cp.w	r10,r9
8000753e:	e0 83 00 a5 	brlo	80007688 <FIFO_Init+0x198>
80007542:	ce eb       	rjmp	8000751e <FIFO_Init+0x2e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007544:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007548:	14 38       	cp.w	r8,r10
8000754a:	e0 88 00 09 	brls	8000755c <FIFO_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000754e:	12 38       	cp.w	r8,r9
80007550:	fe 98 ff fa 	brls	80007544 <FIFO_Init+0x54>
80007554:	12 3a       	cp.w	r10,r9
80007556:	e0 83 00 a1 	brlo	80007698 <FIFO_Init+0x1a8>
8000755a:	cf 5b       	rjmp	80007544 <FIFO_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000755c:	12 38       	cp.w	r8,r9
8000755e:	e0 8b 00 9d 	brhi	80007698 <FIFO_Init+0x1a8>
80007562:	12 3a       	cp.w	r10,r9
80007564:	e0 83 00 9a 	brlo	80007698 <FIFO_Init+0x1a8>
80007568:	ce eb       	rjmp	80007544 <FIFO_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000756a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000756e:	14 38       	cp.w	r8,r10
80007570:	e0 88 00 09 	brls	80007582 <FIFO_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007574:	12 38       	cp.w	r8,r9
80007576:	fe 98 ff fa 	brls	8000756a <FIFO_Init+0x7a>
8000757a:	12 3a       	cp.w	r10,r9
8000757c:	e0 83 00 99 	brlo	800076ae <FIFO_Init+0x1be>
80007580:	cf 5b       	rjmp	8000756a <FIFO_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007582:	12 38       	cp.w	r8,r9
80007584:	e0 8b 00 95 	brhi	800076ae <FIFO_Init+0x1be>
80007588:	12 3a       	cp.w	r10,r9
8000758a:	e0 83 00 92 	brlo	800076ae <FIFO_Init+0x1be>
8000758e:	ce eb       	rjmp	8000756a <FIFO_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007590:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007594:	14 38       	cp.w	r8,r10
80007596:	e0 88 00 09 	brls	800075a8 <FIFO_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000759a:	12 38       	cp.w	r8,r9
8000759c:	fe 98 ff fa 	brls	80007590 <FIFO_Init+0xa0>
800075a0:	12 3a       	cp.w	r10,r9
800075a2:	e0 83 00 8e 	brlo	800076be <FIFO_Init+0x1ce>
800075a6:	cf 5b       	rjmp	80007590 <FIFO_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800075a8:	12 38       	cp.w	r8,r9
800075aa:	e0 8b 00 8a 	brhi	800076be <FIFO_Init+0x1ce>
800075ae:	12 3a       	cp.w	r10,r9
800075b0:	e0 83 00 87 	brlo	800076be <FIFO_Init+0x1ce>
800075b4:	ce eb       	rjmp	80007590 <FIFO_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800075b6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800075ba:	14 38       	cp.w	r8,r10
800075bc:	e0 88 00 09 	brls	800075ce <FIFO_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800075c0:	12 38       	cp.w	r8,r9
800075c2:	fe 98 ff fa 	brls	800075b6 <FIFO_Init+0xc6>
800075c6:	12 3a       	cp.w	r10,r9
800075c8:	e0 83 00 86 	brlo	800076d4 <FIFO_Init+0x1e4>
800075cc:	cf 5b       	rjmp	800075b6 <FIFO_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800075ce:	12 38       	cp.w	r8,r9
800075d0:	e0 8b 00 82 	brhi	800076d4 <FIFO_Init+0x1e4>
800075d4:	12 3a       	cp.w	r10,r9
800075d6:	c7 f3       	brcs	800076d4 <FIFO_Init+0x1e4>
800075d8:	ce fb       	rjmp	800075b6 <FIFO_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800075da:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800075de:	14 38       	cp.w	r8,r10
800075e0:	e0 88 00 09 	brls	800075f2 <FIFO_Init+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800075e4:	12 38       	cp.w	r8,r9
800075e6:	fe 98 ff fa 	brls	800075da <FIFO_Init+0xea>
800075ea:	12 3a       	cp.w	r10,r9
800075ec:	e0 83 00 88 	brlo	800076fc <FIFO_Init+0x20c>
800075f0:	cf 5b       	rjmp	800075da <FIFO_Init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800075f2:	12 38       	cp.w	r8,r9
800075f4:	e0 8b 00 84 	brhi	800076fc <FIFO_Init+0x20c>
800075f8:	12 3a       	cp.w	r10,r9
800075fa:	e0 83 00 81 	brlo	800076fc <FIFO_Init+0x20c>
800075fe:	ce eb       	rjmp	800075da <FIFO_Init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007600:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007604:	14 38       	cp.w	r8,r10
80007606:	e0 88 00 08 	brls	80007616 <FIFO_Init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000760a:	12 38       	cp.w	r8,r9
8000760c:	fe 98 ff fa 	brls	80007600 <FIFO_Init+0x110>
80007610:	12 3a       	cp.w	r10,r9
80007612:	c7 d3       	brcs	8000770c <FIFO_Init+0x21c>
80007614:	cf 6b       	rjmp	80007600 <FIFO_Init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007616:	12 38       	cp.w	r8,r9
80007618:	e0 8b 00 7a 	brhi	8000770c <FIFO_Init+0x21c>
8000761c:	12 3a       	cp.w	r10,r9
8000761e:	c7 73       	brcs	8000770c <FIFO_Init+0x21c>
80007620:	cf 0b       	rjmp	80007600 <FIFO_Init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007622:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007626:	14 38       	cp.w	r8,r10
80007628:	e0 88 00 08 	brls	80007638 <FIFO_Init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000762c:	12 38       	cp.w	r8,r9
8000762e:	fe 98 ff fa 	brls	80007622 <FIFO_Init+0x132>
80007632:	12 3a       	cp.w	r10,r9
80007634:	c7 73       	brcs	80007722 <FIFO_Init+0x232>
80007636:	cf 6b       	rjmp	80007622 <FIFO_Init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007638:	12 38       	cp.w	r8,r9
8000763a:	e0 8b 00 74 	brhi	80007722 <FIFO_Init+0x232>
8000763e:	12 3a       	cp.w	r10,r9
80007640:	c7 13       	brcs	80007722 <FIFO_Init+0x232>
80007642:	cf 0b       	rjmp	80007622 <FIFO_Init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007644:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007648:	14 38       	cp.w	r8,r10
8000764a:	e0 88 00 08 	brls	8000765a <FIFO_Init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000764e:	12 38       	cp.w	r8,r9
80007650:	fe 98 ff fa 	brls	80007644 <FIFO_Init+0x154>
80007654:	12 3a       	cp.w	r10,r9
80007656:	c6 e3       	brcs	80007732 <FIFO_Init+0x242>
80007658:	cf 6b       	rjmp	80007644 <FIFO_Init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000765a:	12 38       	cp.w	r8,r9
8000765c:	e0 8b 00 6b 	brhi	80007732 <FIFO_Init+0x242>
80007660:	12 3a       	cp.w	r10,r9
80007662:	c6 83       	brcs	80007732 <FIFO_Init+0x242>
80007664:	cf 0b       	rjmp	80007644 <FIFO_Init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007666:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000766a:	14 38       	cp.w	r8,r10
8000766c:	e0 88 00 08 	brls	8000767c <FIFO_Init+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007670:	12 38       	cp.w	r8,r9
80007672:	fe 98 ff fa 	brls	80007666 <FIFO_Init+0x176>
80007676:	12 3a       	cp.w	r10,r9
80007678:	c6 83       	brcs	80007748 <FIFO_Init+0x258>
8000767a:	cf 6b       	rjmp	80007666 <FIFO_Init+0x176>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000767c:	12 38       	cp.w	r8,r9
8000767e:	e0 8b 00 65 	brhi	80007748 <FIFO_Init+0x258>
80007682:	12 3a       	cp.w	r10,r9
80007684:	c6 23       	brcs	80007748 <FIFO_Init+0x258>
80007686:	cf 0b       	rjmp	80007666 <FIFO_Init+0x176>
	delay_us(10);
	FIFO_0_RCLK_SET;
80007688:	31 3c       	mov	r12,19
8000768a:	f0 1f 00 32 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000768e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007692:	f0 ca ff 60 	sub	r10,r8,-160
80007696:	c5 7b       	rjmp	80007544 <FIFO_Init+0x54>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80007698:	31 3c       	mov	r12,19
8000769a:	f0 1f 00 2f 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_0_nRRST_CLR;
8000769e:	30 fc       	mov	r12,15
800076a0:	f0 1f 00 2d 	mcall	80007754 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800076a4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800076a8:	f0 ca ff 60 	sub	r10,r8,-160
800076ac:	c5 fb       	rjmp	8000756a <FIFO_Init+0x7a>
	delay_us(10);
	FIFO_0_RCLK_SET;
800076ae:	31 3c       	mov	r12,19
800076b0:	f0 1f 00 28 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800076b4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800076b8:	f0 ca ff 60 	sub	r10,r8,-160
800076bc:	c6 ab       	rjmp	80007590 <FIFO_Init+0xa0>
	delay_us(10);
	FIFO_0_RCLK_CLR;
800076be:	31 3c       	mov	r12,19
800076c0:	f0 1f 00 25 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
800076c4:	30 fc       	mov	r12,15
800076c6:	f0 1f 00 23 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800076ca:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800076ce:	f0 ca ff 60 	sub	r10,r8,-160
800076d2:	c7 2b       	rjmp	800075b6 <FIFO_Init+0xc6>
	delay_us(10);
	FIFO_0_WRST_SET;
800076d4:	31 5c       	mov	r12,21
800076d6:	f0 1f 00 1f 	mcall	80007750 <FIFO_Init+0x260>
	
	//Reset Buffer 1
	FIFO_1_WRST_CLR;
800076da:	31 9c       	mov	r12,25
800076dc:	f0 1f 00 1e 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_1_RCLK_CLR;
800076e0:	31 7c       	mov	r12,23
800076e2:	f0 1f 00 1d 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
800076e6:	31 6c       	mov	r12,22
800076e8:	f0 1f 00 1a 	mcall	80007750 <FIFO_Init+0x260>
	FIFO_1_WEN_CLR;
800076ec:	31 8c       	mov	r12,24
800076ee:	f0 1f 00 1a 	mcall	80007754 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800076f2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800076f6:	f0 ca ff 60 	sub	r10,r8,-160
800076fa:	c7 0b       	rjmp	800075da <FIFO_Init+0xea>
	delay_us(10);
	FIFO_1_RCLK_SET;
800076fc:	31 7c       	mov	r12,23
800076fe:	f0 1f 00 15 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007702:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007706:	f0 ca ff 60 	sub	r10,r8,-160
8000770a:	c7 bb       	rjmp	80007600 <FIFO_Init+0x110>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000770c:	31 3c       	mov	r12,19
8000770e:	f0 1f 00 12 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_1_nRRST_CLR;
80007712:	31 6c       	mov	r12,22
80007714:	f0 1f 00 10 	mcall	80007754 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007718:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000771c:	f0 ca ff 60 	sub	r10,r8,-160
80007720:	c8 1b       	rjmp	80007622 <FIFO_Init+0x132>
	delay_us(10);
	FIFO_1_RCLK_SET;
80007722:	31 7c       	mov	r12,23
80007724:	f0 1f 00 0b 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007728:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000772c:	f0 ca ff 60 	sub	r10,r8,-160
80007730:	c8 ab       	rjmp	80007644 <FIFO_Init+0x154>
	delay_us(10);
	FIFO_1_RCLK_CLR;
80007732:	31 7c       	mov	r12,23
80007734:	f0 1f 00 08 	mcall	80007754 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
80007738:	31 6c       	mov	r12,22
8000773a:	f0 1f 00 06 	mcall	80007750 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000773e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007742:	f0 ca ff 60 	sub	r10,r8,-160
80007746:	c9 0b       	rjmp	80007666 <FIFO_Init+0x176>
	delay_us(10);
	FIFO_1_WRST_SET;
80007748:	31 9c       	mov	r12,25
8000774a:	f0 1f 00 02 	mcall	80007750 <FIFO_Init+0x260>
}
8000774e:	d8 02       	popm	pc
80007750:	80 00       	ld.sh	r0,r0[0x0]
80007752:	32 0e       	mov	lr,32
80007754:	80 00       	ld.sh	r0,r0[0x0]
80007756:	32 2a       	mov	r10,34

80007758 <TakePhoto>:
	}
	
}

int TakePhoto(uint8_t Cameras)
{
80007758:	eb cd 40 80 	pushm	r7,lr
8000775c:	18 97       	mov	r7,r12
	VSYNC_0_ENABLE_INTERRUPT;
8000775e:	30 4b       	mov	r11,4
80007760:	fe 7c 14 00 	mov	r12,-60416
80007764:	f0 1f 00 1a 	mcall	800077cc <TakePhoto+0x74>
	VSYNC_1_ENABLE_INTERRUPT;
80007768:	30 1b       	mov	r11,1
8000776a:	fe 7c 14 00 	mov	r12,-60416
8000776e:	f0 1f 00 18 	mcall	800077cc <TakePhoto+0x74>
	//Only want to take pictures on cameras found
	if(((OV7670_Status.VSYNC0_State != IDLE) || !OV7670_Status.Camera_0_Found) && ((OV7670_Status.VSYNC1_State != IDLE) || !OV7670_Status.Camera_1_Found))
80007772:	49 88       	lddpc	r8,800077d0 <TakePhoto+0x78>
80007774:	11 d9       	ld.ub	r9,r8[0x5]
80007776:	30 08       	mov	r8,0
80007778:	f0 09 18 00 	cp.b	r9,r8
8000777c:	c0 71       	brne	8000778a <TakePhoto+0x32>
8000777e:	49 58       	lddpc	r8,800077d0 <TakePhoto+0x78>
80007780:	11 99       	ld.ub	r9,r8[0x1]
80007782:	30 08       	mov	r8,0
80007784:	f0 09 18 00 	cp.b	r9,r8
80007788:	c0 d1       	brne	800077a2 <TakePhoto+0x4a>
8000778a:	49 28       	lddpc	r8,800077d0 <TakePhoto+0x78>
8000778c:	11 e9       	ld.ub	r9,r8[0x6]
8000778e:	30 08       	mov	r8,0
80007790:	f0 09 18 00 	cp.b	r9,r8
80007794:	c1 91       	brne	800077c6 <TakePhoto+0x6e>
80007796:	48 f8       	lddpc	r8,800077d0 <TakePhoto+0x78>
80007798:	11 a9       	ld.ub	r9,r8[0x2]
8000779a:	30 08       	mov	r8,0
8000779c:	f0 09 18 00 	cp.b	r9,r8
800077a0:	c1 30       	breq	800077c6 <TakePhoto+0x6e>
		return CAMERAS_BUSY; //wait for cameras to be idle if they are found
	
	if(Cameras & CAMERA_LEFT)
800077a2:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
800077a6:	c0 40       	breq	800077ae <TakePhoto+0x56>
		OV7670_Status.VSYNC0_State = TAKE_PHOTO;
800077a8:	30 19       	mov	r9,1
800077aa:	48 a8       	lddpc	r8,800077d0 <TakePhoto+0x78>
800077ac:	b0 d9       	st.b	r8[0x5],r9
		
	if(Cameras & CAMERA_RIGHT)
800077ae:	e2 17 00 02 	andl	r7,0x2,COH
800077b2:	c0 41       	brne	800077ba <TakePhoto+0x62>
800077b4:	30 2c       	mov	r12,2
800077b6:	e3 cd 80 80 	ldm	sp++,r7,pc
		OV7670_Status.VSYNC1_State = TAKE_PHOTO;
800077ba:	30 19       	mov	r9,1
800077bc:	48 58       	lddpc	r8,800077d0 <TakePhoto+0x78>
800077be:	b0 e9       	st.b	r8[0x6],r9
800077c0:	30 2c       	mov	r12,2
800077c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800077c6:	30 4c       	mov	r12,4
	
	return TAKING_PHOTO;
	
}
800077c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800077cc:	80 00       	ld.sh	r0,r0[0x0]
800077ce:	30 2a       	mov	r10,2
800077d0:	00 00       	add	r0,r0
800077d2:	0c a8       	st.w	r6++,r8

800077d4 <VSYNC0_Handler>:
// /*#include "CustomDevices/MotorDriver.h"*/
// SDCard
// #include "CustomDevices/SD_Card.h"

__attribute__((__interrupt__)) static void VSYNC0_Handler (void)
{
800077d4:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC0 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
800077d6:	30 4b       	mov	r11,4
800077d8:	fe 7c 14 00 	mov	r12,-60416
800077dc:	f0 1f 00 18 	mcall	8000783c <VSYNC0_Handler+0x68>
	//VSYNC_0_DISABLE_INTERRUPT;
	switch(OV7670_Status.VSYNC0_State)
800077e0:	49 88       	lddpc	r8,80007840 <VSYNC0_Handler+0x6c>
800077e2:	11 d8       	ld.ub	r8,r8[0x5]
800077e4:	30 29       	mov	r9,2
800077e6:	f2 08 18 00 	cp.b	r8,r9
800077ea:	c1 00       	breq	8000780a <VSYNC0_Handler+0x36>
800077ec:	30 39       	mov	r9,3
800077ee:	f2 08 18 00 	cp.b	r8,r9
800077f2:	c1 30       	breq	80007818 <VSYNC0_Handler+0x44>
800077f4:	30 19       	mov	r9,1
800077f6:	f2 08 18 00 	cp.b	r8,r9
800077fa:	c1 31       	brne	80007820 <VSYNC0_Handler+0x4c>
	{
		case(TAKE_PHOTO):
			FIFO_0_WEN_SET;
800077fc:	31 4c       	mov	r12,20
800077fe:	f0 1f 00 12 	mcall	80007844 <VSYNC0_Handler+0x70>
			OV7670_Status.VSYNC0_State = TAKING_PHOTO;
80007802:	30 29       	mov	r9,2
80007804:	48 f8       	lddpc	r8,80007840 <VSYNC0_Handler+0x6c>
80007806:	b0 d9       	st.b	r8[0x5],r9
			break;
80007808:	c1 78       	rjmp	80007836 <VSYNC0_Handler+0x62>
			
		case(TAKING_PHOTO):
			FIFO_0_WEN_CLR;
8000780a:	31 4c       	mov	r12,20
8000780c:	f0 1f 00 0f 	mcall	80007848 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = TAKEN_PHOTO;
80007810:	30 39       	mov	r9,3
80007812:	48 c8       	lddpc	r8,80007840 <VSYNC0_Handler+0x6c>
80007814:	b0 d9       	st.b	r8[0x5],r9
			break;
80007816:	c1 08       	rjmp	80007836 <VSYNC0_Handler+0x62>
		
		case (TAKEN_PHOTO):
			FIFO_0_WEN_CLR;
80007818:	31 4c       	mov	r12,20
8000781a:	f0 1f 00 0c 	mcall	80007848 <VSYNC0_Handler+0x74>
			break;
8000781e:	c0 c8       	rjmp	80007836 <VSYNC0_Handler+0x62>
			
		case(IDLE):
		default:
			VSYNC_0_DISABLE_INTERRUPT;
80007820:	30 4b       	mov	r11,4
80007822:	fe 7c 14 00 	mov	r12,-60416
80007826:	f0 1f 00 0a 	mcall	8000784c <VSYNC0_Handler+0x78>
			FIFO_0_WEN_CLR;
8000782a:	31 4c       	mov	r12,20
8000782c:	f0 1f 00 07 	mcall	80007848 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = IDLE;
80007830:	30 09       	mov	r9,0
80007832:	48 48       	lddpc	r8,80007840 <VSYNC0_Handler+0x6c>
80007834:	b0 d9       	st.b	r8[0x5],r9
			break;
	}
}
80007836:	d4 02       	popm	lr
80007838:	d6 03       	rete
8000783a:	00 00       	add	r0,r0
8000783c:	80 00       	ld.sh	r0,r0[0x0]
8000783e:	30 34       	mov	r4,3
80007840:	00 00       	add	r0,r0
80007842:	0c a8       	st.w	r6++,r8
80007844:	80 00       	ld.sh	r0,r0[0x0]
80007846:	32 0e       	mov	lr,32
80007848:	80 00       	ld.sh	r0,r0[0x0]
8000784a:	32 2a       	mov	r10,34
8000784c:	80 00       	ld.sh	r0,r0[0x0]
8000784e:	30 4a       	mov	r10,4

80007850 <VSYNC1_Handler>:

__attribute__((__interrupt__)) static void VSYNC1_Handler (void)
{
80007850:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC1 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
80007852:	30 1b       	mov	r11,1
80007854:	fe 7c 14 00 	mov	r12,-60416
80007858:	f0 1f 00 18 	mcall	800078b8 <VSYNC1_Handler+0x68>
	//VSYNC_1_DISABLE_INTERRUPT;
		switch(OV7670_Status.VSYNC1_State)
8000785c:	49 88       	lddpc	r8,800078bc <VSYNC1_Handler+0x6c>
8000785e:	11 e8       	ld.ub	r8,r8[0x6]
80007860:	30 29       	mov	r9,2
80007862:	f2 08 18 00 	cp.b	r8,r9
80007866:	c1 00       	breq	80007886 <VSYNC1_Handler+0x36>
80007868:	30 39       	mov	r9,3
8000786a:	f2 08 18 00 	cp.b	r8,r9
8000786e:	c1 30       	breq	80007894 <VSYNC1_Handler+0x44>
80007870:	30 19       	mov	r9,1
80007872:	f2 08 18 00 	cp.b	r8,r9
80007876:	c1 31       	brne	8000789c <VSYNC1_Handler+0x4c>
		{
			case(TAKE_PHOTO):
			FIFO_1_WEN_SET;
80007878:	31 8c       	mov	r12,24
8000787a:	f0 1f 00 12 	mcall	800078c0 <VSYNC1_Handler+0x70>
			OV7670_Status.VSYNC1_State = TAKING_PHOTO;
8000787e:	30 29       	mov	r9,2
80007880:	48 f8       	lddpc	r8,800078bc <VSYNC1_Handler+0x6c>
80007882:	b0 e9       	st.b	r8[0x6],r9
			break;
80007884:	c1 78       	rjmp	800078b2 <VSYNC1_Handler+0x62>
			
			case(TAKING_PHOTO):
			FIFO_1_WEN_CLR;
80007886:	31 8c       	mov	r12,24
80007888:	f0 1f 00 0f 	mcall	800078c4 <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = TAKEN_PHOTO;
8000788c:	30 39       	mov	r9,3
8000788e:	48 c8       	lddpc	r8,800078bc <VSYNC1_Handler+0x6c>
80007890:	b0 e9       	st.b	r8[0x6],r9
			break;
80007892:	c1 08       	rjmp	800078b2 <VSYNC1_Handler+0x62>
			
			case (TAKEN_PHOTO):
			FIFO_1_WEN_CLR;
80007894:	31 8c       	mov	r12,24
80007896:	f0 1f 00 0c 	mcall	800078c4 <VSYNC1_Handler+0x74>
			break;
8000789a:	c0 c8       	rjmp	800078b2 <VSYNC1_Handler+0x62>
			
			case(IDLE):
			default:
			VSYNC_1_DISABLE_INTERRUPT;
8000789c:	30 1b       	mov	r11,1
8000789e:	fe 7c 14 00 	mov	r12,-60416
800078a2:	f0 1f 00 0a 	mcall	800078c8 <VSYNC1_Handler+0x78>
			FIFO_1_WEN_CLR;
800078a6:	31 8c       	mov	r12,24
800078a8:	f0 1f 00 07 	mcall	800078c4 <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = IDLE;
800078ac:	30 09       	mov	r9,0
800078ae:	48 48       	lddpc	r8,800078bc <VSYNC1_Handler+0x6c>
800078b0:	b0 e9       	st.b	r8[0x6],r9
			break;
		}
}
800078b2:	d4 02       	popm	lr
800078b4:	d6 03       	rete
800078b6:	00 00       	add	r0,r0
800078b8:	80 00       	ld.sh	r0,r0[0x0]
800078ba:	30 34       	mov	r4,3
800078bc:	00 00       	add	r0,r0
800078be:	0c a8       	st.w	r6++,r8
800078c0:	80 00       	ld.sh	r0,r0[0x0]
800078c2:	32 0e       	mov	lr,32
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	32 2a       	mov	r10,34
800078c8:	80 00       	ld.sh	r0,r0[0x0]
800078ca:	30 4a       	mov	r10,4

800078cc <Write_Reg>:
unsigned char Write_Reg(unsigned char Register, unsigned char Data)
{
800078cc:	d4 01       	pushm	lr
800078ce:	20 1d       	sub	sp,4
	/*	I2C Traffic Generated:
	 *	S | OV_7670 + W | A | RegID | A | Data | A | P |
	 */
	uint8_t Buff[2] = {Register, Data};
800078d0:	ba 8c       	st.b	sp[0x0],r12
800078d2:	ba 9b       	st.b	sp[0x1],r11
	int status = twim_write(&AVR32_TWIM0, &Buff, 2, OV7670_ADDR, false);
800078d4:	30 08       	mov	r8,0
800078d6:	32 19       	mov	r9,33
800078d8:	30 2a       	mov	r10,2
800078da:	1a 9b       	mov	r11,sp
800078dc:	fe 7c 38 00 	mov	r12,-51200
800078e0:	f0 1f 00 03 	mcall	800078ec <Write_Reg+0x20>
	return status;
}
800078e4:	5c 5c       	castu.b	r12
800078e6:	2f fd       	sub	sp,-4
800078e8:	d8 02       	popm	pc
800078ea:	00 00       	add	r0,r0
800078ec:	80 00       	ld.sh	r0,r0[0x0]
800078ee:	3c 74       	mov	r4,-57

800078f0 <OV7670_Init>:
	
	return status;
	
}
void OV7670_Init()
{
800078f0:	eb cd 40 c0 	pushm	r6-r7,lr
800078f4:	20 2d       	sub	sp,8
	
	//Check Cameras Exist
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
800078f6:	30 4c       	mov	r12,4
800078f8:	f0 1f 00 95 	mcall	80007b4c <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
800078fc:	32 1b       	mov	r11,33
800078fe:	fe 7c 38 00 	mov	r12,-51200
80007902:	f0 1f 00 94 	mcall	80007b50 <OV7670_Init+0x260>
80007906:	c0 61       	brne	80007912 <OV7670_Init+0x22>
		OV7670_Status.Camera_0_Found = true;
80007908:	30 19       	mov	r9,1
8000790a:	fe f8 02 4a 	ld.w	r8,pc[586]
8000790e:	b0 99       	st.b	r8[0x1],r9
80007910:	c0 58       	rjmp	8000791a <OV7670_Init+0x2a>
	else
		OV7670_Status.Camera_0_Found = false;
80007912:	30 09       	mov	r9,0
80007914:	fe f8 02 40 	ld.w	r8,pc[576]
80007918:	b0 99       	st.b	r8[0x1],r9
		
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
8000791a:	30 5c       	mov	r12,5
8000791c:	f0 1f 00 8c 	mcall	80007b4c <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80007920:	32 1b       	mov	r11,33
80007922:	fe 7c 38 00 	mov	r12,-51200
80007926:	f0 1f 00 8b 	mcall	80007b50 <OV7670_Init+0x260>
8000792a:	c0 61       	brne	80007936 <OV7670_Init+0x46>
		OV7670_Status.Camera_1_Found = true;
8000792c:	30 19       	mov	r9,1
8000792e:	fe f8 02 26 	ld.w	r8,pc[550]
80007932:	b0 a9       	st.b	r8[0x2],r9
80007934:	c0 58       	rjmp	8000793e <OV7670_Init+0x4e>
	else
		OV7670_Status.Camera_1_Found = false;
80007936:	30 09       	mov	r9,0
80007938:	fe f8 02 1c 	ld.w	r8,pc[540]
8000793c:	b0 a9       	st.b	r8[0x2],r9
		
	
	//Iniialise Cameras
	if(OV7670_Status.Camera_0_Found)
8000793e:	fe f8 02 16 	ld.w	r8,pc[534]
80007942:	11 99       	ld.ub	r9,r8[0x1]
80007944:	30 08       	mov	r8,0
80007946:	f0 09 18 00 	cp.b	r9,r8
8000794a:	c5 40       	breq	800079f2 <OV7670_Init+0x102>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_0);
8000794c:	30 4c       	mov	r12,4
8000794e:	f0 1f 00 80 	mcall	80007b4c <OV7670_Init+0x25c>
		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
80007952:	e0 6b 00 80 	mov	r11,128
80007956:	31 2c       	mov	r12,18
80007958:	f0 1f 00 80 	mcall	80007b58 <OV7670_Init+0x268>
8000795c:	c0 90       	breq	8000796e <OV7670_Init+0x7e>
		{
			print_dbg("\n\rCamera Reset Fail");
8000795e:	fe fc 01 fe 	ld.w	r12,pc[510]
80007962:	f0 1f 00 80 	mcall	80007b60 <OV7670_Init+0x270>
			OV7670_Status.Camera_0_Error = true;
80007966:	4f c8       	lddpc	r8,80007b54 <OV7670_Init+0x264>
80007968:	30 19       	mov	r9,1
8000796a:	b0 b9       	st.b	r8[0x3],r9
			OV7670_Status.Error = true;
8000796c:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000796e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007972:	e2 69 71 00 	mov	r9,160000
80007976:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000797a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000797e:	14 38       	cp.w	r8,r10
80007980:	e0 88 00 08 	brls	80007990 <OV7670_Init+0xa0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007984:	12 38       	cp.w	r8,r9
80007986:	fe 98 ff fa 	brls	8000797a <OV7670_Init+0x8a>
8000798a:	12 3a       	cp.w	r10,r9
8000798c:	c0 53       	brcs	80007996 <OV7670_Init+0xa6>
8000798e:	cf 6b       	rjmp	8000797a <OV7670_Init+0x8a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007990:	12 38       	cp.w	r8,r9
80007992:	e0 88 00 08 	brls	800079a2 <OV7670_Init+0xb2>
80007996:	4f 46       	lddpc	r6,80007b64 <OV7670_Init+0x274>
80007998:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
8000799c:	ec c6 fe b1 	sub	r6,r6,-335
800079a0:	c0 48       	rjmp	800079a8 <OV7670_Init+0xb8>
800079a2:	12 3a       	cp.w	r10,r9
800079a4:	cf 93       	brcs	80007996 <OV7670_Init+0xa6>
800079a6:	ce ab       	rjmp	8000797a <OV7670_Init+0x8a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
800079a8:	0f 8b       	ld.ub	r11,r7[0x0]
800079aa:	ef 3c ff ff 	ld.ub	r12,r7[-1]
800079ae:	f0 1f 00 6b 	mcall	80007b58 <OV7670_Init+0x268>
800079b2:	c0 90       	breq	800079c4 <OV7670_Init+0xd4>
			{
				print_dbg("\n\rCamera Initialise Fail");
800079b4:	4e dc       	lddpc	r12,80007b68 <OV7670_Init+0x278>
800079b6:	f0 1f 00 6b 	mcall	80007b60 <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_0_Error = true;	
800079ba:	4e 78       	lddpc	r8,80007b54 <OV7670_Init+0x264>
800079bc:	30 19       	mov	r9,1
800079be:	b0 b9       	st.b	r8[0x3],r9
				OV7670_Status.Error = true;	
800079c0:	b0 89       	st.b	r8[0x0],r9
				break;
800079c2:	c1 88       	rjmp	800079f2 <OV7670_Init+0x102>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800079c4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800079c8:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800079cc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800079d0:	14 38       	cp.w	r8,r10
800079d2:	e0 88 00 09 	brls	800079e4 <OV7670_Init+0xf4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800079d6:	12 38       	cp.w	r8,r9
800079d8:	fe 98 ff fa 	brls	800079cc <OV7670_Init+0xdc>
800079dc:	12 3a       	cp.w	r10,r9
800079de:	e0 83 00 ae 	brlo	80007b3a <OV7670_Init+0x24a>
800079e2:	cf 5b       	rjmp	800079cc <OV7670_Init+0xdc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800079e4:	12 38       	cp.w	r8,r9
800079e6:	e0 8b 00 aa 	brhi	80007b3a <OV7670_Init+0x24a>
800079ea:	12 3a       	cp.w	r10,r9
800079ec:	e0 83 00 a7 	brlo	80007b3a <OV7670_Init+0x24a>
800079f0:	ce eb       	rjmp	800079cc <OV7670_Init+0xdc>
			}
			delay_ms(1);
		}	
	}
	if(OV7670_Status.Camera_1_Found)
800079f2:	4d 98       	lddpc	r8,80007b54 <OV7670_Init+0x264>
800079f4:	11 a9       	ld.ub	r9,r8[0x2]
800079f6:	30 08       	mov	r8,0
800079f8:	f0 09 18 00 	cp.b	r9,r8
800079fc:	c5 10       	breq	80007a9e <OV7670_Init+0x1ae>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_1);
800079fe:	30 5c       	mov	r12,5
80007a00:	f0 1f 00 53 	mcall	80007b4c <OV7670_Init+0x25c>

		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
80007a04:	e0 6b 00 80 	mov	r11,128
80007a08:	31 2c       	mov	r12,18
80007a0a:	f0 1f 00 54 	mcall	80007b58 <OV7670_Init+0x268>
80007a0e:	c0 80       	breq	80007a1e <OV7670_Init+0x12e>
		{
			print_dbg("\n\rCamera Reset Fail");
80007a10:	4d 3c       	lddpc	r12,80007b5c <OV7670_Init+0x26c>
80007a12:	f0 1f 00 54 	mcall	80007b60 <OV7670_Init+0x270>
			OV7670_Status.Camera_1_Error = true;
80007a16:	4d 08       	lddpc	r8,80007b54 <OV7670_Init+0x264>
80007a18:	30 19       	mov	r9,1
80007a1a:	b0 c9       	st.b	r8[0x4],r9
			OV7670_Status.Error = true;
80007a1c:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007a1e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007a22:	e2 69 71 00 	mov	r9,160000
80007a26:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007a2a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007a2e:	14 38       	cp.w	r8,r10
80007a30:	e0 88 00 08 	brls	80007a40 <OV7670_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007a34:	12 38       	cp.w	r8,r9
80007a36:	fe 98 ff fa 	brls	80007a2a <OV7670_Init+0x13a>
80007a3a:	12 3a       	cp.w	r10,r9
80007a3c:	c0 53       	brcs	80007a46 <OV7670_Init+0x156>
80007a3e:	cf 6b       	rjmp	80007a2a <OV7670_Init+0x13a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007a40:	12 38       	cp.w	r8,r9
80007a42:	e0 88 00 08 	brls	80007a52 <OV7670_Init+0x162>
80007a46:	4c 86       	lddpc	r6,80007b64 <OV7670_Init+0x274>
80007a48:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80007a4c:	ec c6 fe b1 	sub	r6,r6,-335
80007a50:	c0 48       	rjmp	80007a58 <OV7670_Init+0x168>
80007a52:	12 3a       	cp.w	r10,r9
80007a54:	cf 93       	brcs	80007a46 <OV7670_Init+0x156>
80007a56:	ce ab       	rjmp	80007a2a <OV7670_Init+0x13a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
80007a58:	0f 8b       	ld.ub	r11,r7[0x0]
80007a5a:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80007a5e:	f0 1f 00 3f 	mcall	80007b58 <OV7670_Init+0x268>
80007a62:	c0 90       	breq	80007a74 <OV7670_Init+0x184>
			{
				print_dbg("\n\rCamera Initialise Fail");
80007a64:	4c 1c       	lddpc	r12,80007b68 <OV7670_Init+0x278>
80007a66:	f0 1f 00 3f 	mcall	80007b60 <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_1_Error = true;
80007a6a:	4b b8       	lddpc	r8,80007b54 <OV7670_Init+0x264>
80007a6c:	30 19       	mov	r9,1
80007a6e:	b0 c9       	st.b	r8[0x4],r9
				OV7670_Status.Error = true;				
80007a70:	b0 89       	st.b	r8[0x0],r9
				break;
80007a72:	c1 68       	rjmp	80007a9e <OV7670_Init+0x1ae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007a74:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007a78:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007a7c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007a80:	14 38       	cp.w	r8,r10
80007a82:	e0 88 00 08 	brls	80007a92 <OV7670_Init+0x1a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007a86:	12 38       	cp.w	r8,r9
80007a88:	fe 98 ff fa 	brls	80007a7c <OV7670_Init+0x18c>
80007a8c:	12 3a       	cp.w	r10,r9
80007a8e:	c5 b3       	brcs	80007b44 <OV7670_Init+0x254>
80007a90:	cf 6b       	rjmp	80007a7c <OV7670_Init+0x18c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007a92:	12 38       	cp.w	r8,r9
80007a94:	e0 8b 00 58 	brhi	80007b44 <OV7670_Init+0x254>
80007a98:	12 3a       	cp.w	r10,r9
80007a9a:	c5 53       	brcs	80007b44 <OV7670_Init+0x254>
80007a9c:	cf 0b       	rjmp	80007a7c <OV7670_Init+0x18c>
			}
			delay_ms(1);
		}
	}
	PCA9542A_Chan_Sel(NO_SELECT);
80007a9e:	30 0c       	mov	r12,0
80007aa0:	f0 1f 00 2b 	mcall	80007b4c <OV7670_Init+0x25c>
	
	//Initialise VSYNC Interrupts
	eic_options_t eic_options;
	eic_options.eic_mode = EIC_MODE_EDGE_TRIGGERED;
80007aa4:	30 08       	mov	r8,0
80007aa6:	ba b8       	st.b	sp[0x3],r8
	eic_options.eic_edge = EIC_EDGE_FALLING_EDGE;
80007aa8:	ba c8       	st.b	sp[0x4],r8
	eic_options.eic_async = EIC_SYNCH_MODE;
80007aaa:	ba f8       	st.b	sp[0x7],r8
	eic_options.eic_line = VSYNC_1_LINE;
80007aac:	30 18       	mov	r8,1
80007aae:	ba a8       	st.b	sp[0x2],r8
	//eic_options.eic_line = VSYNC_0_LINE;
	
	Disable_global_interrupt();
80007ab0:	d3 03       	ssrf	0x10
	gpio_enable_module_pin(VSYNC_1_PIN, VSYNC_1_FUNCTION);
80007ab2:	30 1b       	mov	r11,1
80007ab4:	31 ac       	mov	r12,26
80007ab6:	f0 1f 00 2e 	mcall	80007b6c <OV7670_Init+0x27c>
	gpio_enable_module_pin(VSYNC_0_PIN, VSYNC_0_FUNCTION);
80007aba:	30 1b       	mov	r11,1
80007abc:	30 ac       	mov	r12,10
80007abe:	f0 1f 00 2c 	mcall	80007b6c <OV7670_Init+0x27c>
	
	gpio_enable_pin_pull_up(VSYNC_1_PIN); //Enable pull up as it is a low level interrupt
80007ac2:	31 ac       	mov	r12,26
80007ac4:	f0 1f 00 2b 	mcall	80007b70 <OV7670_Init+0x280>
	gpio_enable_pin_pull_up(VSYNC_0_PIN);
80007ac8:	30 ac       	mov	r12,10
80007aca:	f0 1f 00 2a 	mcall	80007b70 <OV7670_Init+0x280>
	//Initialise EIC
	eic_init(&AVR32_EIC, &eic_options, 1);
80007ace:	fa c7 ff fe 	sub	r7,sp,-2
80007ad2:	30 1a       	mov	r10,1
80007ad4:	0e 9b       	mov	r11,r7
80007ad6:	fe 7c 14 00 	mov	r12,-60416
80007ada:	f0 1f 00 27 	mcall	80007b74 <OV7670_Init+0x284>
	eic_options.eic_line = VSYNC_0_LINE;
80007ade:	30 48       	mov	r8,4
80007ae0:	ba a8       	st.b	sp[0x2],r8
	eic_init(&AVR32_EIC, &eic_options, 1);
80007ae2:	30 1a       	mov	r10,1
80007ae4:	0e 9b       	mov	r11,r7
80007ae6:	fe 7c 14 00 	mov	r12,-60416
80007aea:	f0 1f 00 23 	mcall	80007b74 <OV7670_Init+0x284>
	
	INTC_register_interrupt(&VSYNC1_Handler, AVR32_EIC_IRQ_1, AVR32_INTC_INT0);
80007aee:	30 0a       	mov	r10,0
80007af0:	e0 6b 01 e0 	mov	r11,480
80007af4:	4a 1c       	lddpc	r12,80007b78 <OV7670_Init+0x288>
80007af6:	f0 1f 00 22 	mcall	80007b7c <OV7670_Init+0x28c>
	INTC_register_interrupt(&VSYNC0_Handler, AVR32_EIC_IRQ_4, AVR32_INTC_INT0);
80007afa:	30 0a       	mov	r10,0
80007afc:	e0 6b 01 e3 	mov	r11,483
80007b00:	4a 0c       	lddpc	r12,80007b80 <OV7670_Init+0x290>
80007b02:	f0 1f 00 1f 	mcall	80007b7c <OV7670_Init+0x28c>
	//Enable interrupt on VSYNC1
	eic_enable_line(&AVR32_EIC, VSYNC_1_LINE);
80007b06:	30 1b       	mov	r11,1
80007b08:	fe 7c 14 00 	mov	r12,-60416
80007b0c:	f0 1f 00 1e 	mcall	80007b84 <OV7670_Init+0x294>
	eic_enable_line(&AVR32_EIC, (VSYNC_0_LINE));
80007b10:	30 4b       	mov	r11,4
80007b12:	fe 7c 14 00 	mov	r12,-60416
80007b16:	f0 1f 00 1c 	mcall	80007b84 <OV7670_Init+0x294>
 	VSYNC_1_ENABLE_INTERRUPT;
80007b1a:	30 1b       	mov	r11,1
80007b1c:	fe 7c 14 00 	mov	r12,-60416
80007b20:	f0 1f 00 1a 	mcall	80007b88 <OV7670_Init+0x298>
 	VSYNC_0_ENABLE_INTERRUPT;
80007b24:	30 4b       	mov	r11,4
80007b26:	fe 7c 14 00 	mov	r12,-60416
80007b2a:	f0 1f 00 18 	mcall	80007b88 <OV7670_Init+0x298>
	
	FIFO_Init();
80007b2e:	f0 1f 00 18 	mcall	80007b8c <OV7670_Init+0x29c>
	Enable_global_interrupt();
80007b32:	d5 03       	csrf	0x10
	
}
80007b34:	2f ed       	sub	sp,-8
80007b36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007b3a:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_0_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80007b3c:	0c 37       	cp.w	r7,r6
80007b3e:	fe 91 ff 35 	brne	800079a8 <OV7670_Init+0xb8>
80007b42:	c5 8b       	rjmp	800079f2 <OV7670_Init+0x102>
80007b44:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_1_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80007b46:	0c 37       	cp.w	r7,r6
80007b48:	c8 81       	brne	80007a58 <OV7670_Init+0x168>
80007b4a:	ca ab       	rjmp	80007a9e <OV7670_Init+0x1ae>
80007b4c:	80 00       	ld.sh	r0,r0[0x0]
80007b4e:	7b 90       	ld.w	r0,sp[0x64]
80007b50:	80 00       	ld.sh	r0,r0[0x0]
80007b52:	3d 28       	mov	r8,-46
80007b54:	00 00       	add	r0,r0
80007b56:	0c a8       	st.w	r6++,r8
80007b58:	80 00       	ld.sh	r0,r0[0x0]
80007b5a:	78 cc       	ld.w	r12,r12[0x30]
80007b5c:	80 00       	ld.sh	r0,r0[0x0]
80007b5e:	e3 fc 80 00 	ld.wls	r12,r1[0x0]
80007b62:	6c d0       	ld.w	r0,r6[0x34]
80007b64:	80 00       	ld.sh	r0,r0[0x0]
80007b66:	e4 29 80 00 	sub	r9,294912
80007b6a:	e4 10 80 00 	andh	r0,0x8000
80007b6e:	31 30       	mov	r0,19
80007b70:	80 00       	ld.sh	r0,r0[0x0]
80007b72:	31 f4       	mov	r4,31
80007b74:	80 00       	ld.sh	r0,r0[0x0]
80007b76:	2f 50       	sub	r0,-11
80007b78:	80 00       	ld.sh	r0,r0[0x0]
80007b7a:	78 50       	ld.w	r0,r12[0x14]
80007b7c:	80 00       	ld.sh	r0,r0[0x0]
80007b7e:	32 48       	mov	r8,36
80007b80:	80 00       	ld.sh	r0,r0[0x0]
80007b82:	77 d4       	ld.w	r4,r11[0x74]
80007b84:	80 00       	ld.sh	r0,r0[0x0]
80007b86:	30 20       	mov	r0,2
80007b88:	80 00       	ld.sh	r0,r0[0x0]
80007b8a:	30 2a       	mov	r10,2
80007b8c:	80 00       	ld.sh	r0,r0[0x0]
80007b8e:	74 f0       	ld.w	r0,r10[0x3c]

80007b90 <PCA9542A_Chan_Sel>:
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
	//return status;
}

void PCA9542A_Chan_Sel(unsigned char Channel)
{
80007b90:	d4 01       	pushm	lr
80007b92:	20 1d       	sub	sp,4
	int status = 0;
	char buff[2] = {Channel, 0};
80007b94:	ba 8c       	st.b	sp[0x0],r12
80007b96:	30 08       	mov	r8,0
80007b98:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
80007b9a:	30 08       	mov	r8,0
80007b9c:	37 49       	mov	r9,116
80007b9e:	30 1a       	mov	r10,1
80007ba0:	1a 9b       	mov	r11,sp
80007ba2:	fe 7c 38 00 	mov	r12,-51200
80007ba6:	f0 1f 00 03 	mcall	80007bb0 <PCA9542A_Chan_Sel+0x20>
80007baa:	2f fd       	sub	sp,-4
80007bac:	d8 02       	popm	pc
80007bae:	00 00       	add	r0,r0
80007bb0:	80 00       	ld.sh	r0,r0[0x0]
80007bb2:	3c 74       	mov	r4,-57

80007bb4 <PCA9542A_Init>:
/*#include "CustomDevices/MotorDriver.h"*/
//SDCard
/*#include "CustomDevices/SD_Card.h"*/

int PCA9542A_Init()
{
80007bb4:	d4 01       	pushm	lr
80007bb6:	20 1d       	sub	sp,4
	int status = twim_probe(&AVR32_TWIM0, PCA9542A_ADDR);
80007bb8:	37 4b       	mov	r11,116
80007bba:	fe 7c 38 00 	mov	r12,-51200
80007bbe:	f0 1f 00 0a 	mcall	80007be4 <PCA9542A_Init+0x30>
	if (status != STATUS_OK)
80007bc2:	c0 30       	breq	80007bc8 <PCA9542A_Init+0x14>
80007bc4:	30 2c       	mov	r12,2
80007bc6:	c0 c8       	rjmp	80007bde <PCA9542A_Init+0x2a>
		return DEVICE_NOT_FOUND;
	char buff[2] = {NO_SELECT, 0};
80007bc8:	30 08       	mov	r8,0
80007bca:	ba 88       	st.b	sp[0x0],r8
80007bcc:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
80007bce:	30 08       	mov	r8,0
80007bd0:	37 49       	mov	r9,116
80007bd2:	30 1a       	mov	r10,1
80007bd4:	1a 9b       	mov	r11,sp
80007bd6:	fe 7c 38 00 	mov	r12,-51200
80007bda:	f0 1f 00 04 	mcall	80007be8 <PCA9542A_Init+0x34>
	
	return status;
}
80007bde:	2f fd       	sub	sp,-4
80007be0:	d8 02       	popm	pc
80007be2:	00 00       	add	r0,r0
80007be4:	80 00       	ld.sh	r0,r0[0x0]
80007be6:	3d 28       	mov	r8,-46
80007be8:	80 00       	ld.sh	r0,r0[0x0]
80007bea:	3c 74       	mov	r4,-57

80007bec <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
80007bec:	eb cd 40 80 	pushm	r7,lr
80007bf0:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
80007bf2:	49 98       	lddpc	r8,80007c54 <sd_mmc_resources_init+0x68>
80007bf4:	1a 97       	mov	r7,sp
80007bf6:	70 09       	ld.w	r9,r8[0x0]
80007bf8:	50 09       	stdsp	sp[0x0],r9
80007bfa:	70 19       	ld.w	r9,r8[0x4]
80007bfc:	50 19       	stdsp	sp[0x4],r9
80007bfe:	70 29       	ld.w	r9,r8[0x8]
80007c00:	50 29       	stdsp	sp[0x8],r9
80007c02:	70 38       	ld.w	r8,r8[0xc]
80007c04:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80007c06:	30 4b       	mov	r11,4
80007c08:	49 4c       	lddpc	r12,80007c58 <sd_mmc_resources_init+0x6c>
80007c0a:	f0 1f 00 15 	mcall	80007c5c <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
80007c0e:	1a 9b       	mov	r11,sp
80007c10:	fe 7c 34 00 	mov	r12,-52224
80007c14:	f0 1f 00 13 	mcall	80007c60 <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007c18:	30 09       	mov	r9,0
80007c1a:	12 9a       	mov	r10,r9
80007c1c:	12 9b       	mov	r11,r9
80007c1e:	fe 7c 34 00 	mov	r12,-52224
80007c22:	f0 1f 00 11 	mcall	80007c64 <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80007c26:	fe 7c 34 00 	mov	r12,-52224
80007c2a:	f0 1f 00 10 	mcall	80007c68 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
80007c2e:	20 4d       	sub	sp,16
80007c30:	6e 08       	ld.w	r8,r7[0x0]
80007c32:	50 08       	stdsp	sp[0x0],r8
80007c34:	6e 18       	ld.w	r8,r7[0x4]
80007c36:	50 18       	stdsp	sp[0x4],r8
80007c38:	6e 28       	ld.w	r8,r7[0x8]
80007c3a:	50 28       	stdsp	sp[0x8],r8
80007c3c:	6e 38       	ld.w	r8,r7[0xc]
80007c3e:	50 38       	stdsp	sp[0xc],r8
80007c40:	e0 6c 24 00 	mov	r12,9216
80007c44:	ea 1c 00 f4 	orh	r12,0xf4
80007c48:	f0 1f 00 09 	mcall	80007c6c <sd_mmc_resources_init+0x80>
80007c4c:	2f cd       	sub	sp,-16
}
80007c4e:	2f cd       	sub	sp,-16
80007c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	e5 78 80 00 	stcond	r2[-32768],r8
80007c5a:	e5 88       	*unknown*
80007c5c:	80 00       	ld.sh	r0,r0[0x0]
80007c5e:	31 c4       	mov	r4,28
80007c60:	80 00       	ld.sh	r0,r0[0x0]
80007c62:	39 20       	mov	r0,-110
80007c64:	80 00       	ld.sh	r0,r0[0x0]
80007c66:	39 58       	mov	r8,-107
80007c68:	80 00       	ld.sh	r0,r0[0x0]
80007c6a:	3a c0       	mov	r0,-84
80007c6c:	80 00       	ld.sh	r0,r0[0x0]
80007c6e:	2b 10       	sub	r0,-79

80007c70 <LED_Flash>:

#define LOG_FILE "log.txt"


void LED_Flash()
{
80007c70:	d4 01       	pushm	lr
	LED2_SET;
80007c72:	33 1c       	mov	r12,49
80007c74:	f0 1f 00 1d 	mcall	80007ce8 <LED_Flash+0x78>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007c78:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007c7c:	e0 6a 24 00 	mov	r10,9216
80007c80:	ea 1a 00 f4 	orh	r10,0xf4
80007c84:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007c88:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007c8c:	14 38       	cp.w	r8,r10
80007c8e:	e0 88 00 08 	brls	80007c9e <LED_Flash+0x2e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007c92:	12 38       	cp.w	r8,r9
80007c94:	fe 98 ff fa 	brls	80007c88 <LED_Flash+0x18>
80007c98:	12 3a       	cp.w	r10,r9
80007c9a:	c1 93       	brcs	80007ccc <LED_Flash+0x5c>
80007c9c:	cf 6b       	rjmp	80007c88 <LED_Flash+0x18>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007c9e:	12 38       	cp.w	r8,r9
80007ca0:	e0 8b 00 16 	brhi	80007ccc <LED_Flash+0x5c>
80007ca4:	12 3a       	cp.w	r10,r9
80007ca6:	c1 33       	brcs	80007ccc <LED_Flash+0x5c>
80007ca8:	cf 0b       	rjmp	80007c88 <LED_Flash+0x18>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007caa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007cae:	14 38       	cp.w	r8,r10
80007cb0:	e0 88 00 08 	brls	80007cc0 <LED_Flash+0x50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007cb4:	12 38       	cp.w	r8,r9
80007cb6:	fe 98 ff fa 	brls	80007caa <LED_Flash+0x3a>
80007cba:	12 3a       	cp.w	r10,r9
80007cbc:	c1 43       	brcs	80007ce4 <LED_Flash+0x74>
80007cbe:	cf 6b       	rjmp	80007caa <LED_Flash+0x3a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007cc0:	12 38       	cp.w	r8,r9
80007cc2:	e0 8b 00 11 	brhi	80007ce4 <LED_Flash+0x74>
80007cc6:	12 3a       	cp.w	r10,r9
80007cc8:	c0 e3       	brcs	80007ce4 <LED_Flash+0x74>
80007cca:	cf 0b       	rjmp	80007caa <LED_Flash+0x3a>
	delay_s(1);
	LED2_CLR;
80007ccc:	33 1c       	mov	r12,49
80007cce:	f0 1f 00 08 	mcall	80007cec <LED_Flash+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007cd2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007cd6:	e0 6a 24 00 	mov	r10,9216
80007cda:	ea 1a 00 f4 	orh	r10,0xf4
80007cde:	f0 0a 00 0a 	add	r10,r8,r10
80007ce2:	ce 4b       	rjmp	80007caa <LED_Flash+0x3a>
80007ce4:	d8 02       	popm	pc
80007ce6:	00 00       	add	r0,r0
80007ce8:	80 00       	ld.sh	r0,r0[0x0]
80007cea:	32 0e       	mov	lr,32
80007cec:	80 00       	ld.sh	r0,r0[0x0]
80007cee:	32 2a       	mov	r10,34

80007cf0 <Log_Write>:
}

#define TOGGLE LED_Flash

void Log_Write(char *buff, int length) 
{
80007cf0:	eb cd 40 c0 	pushm	r6-r7,lr
80007cf4:	18 96       	mov	r6,r12
80007cf6:	16 97       	mov	r7,r11
	nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007cf8:	30 0a       	mov	r10,0
80007cfa:	30 1b       	mov	r11,1
80007cfc:	48 9c       	lddpc	r12,80007d20 <Log_Write+0x30>
80007cfe:	f0 1f 00 0a 	mcall	80007d24 <Log_Write+0x34>
	file_open(FOPEN_MODE_APPEND);
80007d02:	30 2c       	mov	r12,2
80007d04:	f0 1f 00 09 	mcall	80007d28 <Log_Write+0x38>
	if(length == -1)
80007d08:	5b f7       	cp.w	r7,-1
80007d0a:	f9 b7 00 04 	moveq	r7,4
		length = sizeof(buff);
	file_write_buf(buff, length);
80007d0e:	0e 9b       	mov	r11,r7
80007d10:	5c 7b       	castu.h	r11
80007d12:	0c 9c       	mov	r12,r6
80007d14:	f0 1f 00 06 	mcall	80007d2c <Log_Write+0x3c>
	file_close();
80007d18:	f0 1f 00 06 	mcall	80007d30 <Log_Write+0x40>
}
80007d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007d20:	80 00       	ld.sh	r0,r0[0x0]
80007d22:	e5 b8       	*unknown*
80007d24:	80 00       	ld.sh	r0,r0[0x0]
80007d26:	69 c4       	ld.w	r4,r4[0x70]
80007d28:	80 00       	ld.sh	r0,r0[0x0]
80007d2a:	61 e4       	ld.w	r4,r0[0x78]
80007d2c:	80 00       	ld.sh	r0,r0[0x0]
80007d2e:	60 70       	ld.w	r0,r0[0x1c]
80007d30:	80 00       	ld.sh	r0,r0[0x0]
80007d32:	60 34       	ld.w	r4,r0[0xc]

80007d34 <main>:

	// Transmit the resulting string with the given USART.
	Log_Write(tmp + i, -1);
}
int main (void)
{
80007d34:	d4 31       	pushm	r0-r7,lr
80007d36:	20 9d       	sub	sp,36
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
80007d38:	f0 1f 01 43 	mcall	80008244 <main+0x510>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80007d3c:	30 3a       	mov	r10,3
80007d3e:	e0 6b 24 00 	mov	r11,9216
80007d42:	ea 1b 00 f4 	orh	r11,0xf4
80007d46:	30 0c       	mov	r12,0
80007d48:	f0 1f 01 40 	mcall	80008248 <main+0x514>
	init_dbg_rs232(FOSC0);
80007d4c:	e0 6c 24 00 	mov	r12,9216
80007d50:	ea 1c 00 f4 	orh	r12,0xf4
80007d54:	f0 1f 01 3e 	mcall	8000824c <main+0x518>
	print_dbg("\x0C");
80007d58:	fe fc 04 f8 	ld.w	r12,pc[1272]
80007d5c:	f0 1f 01 3e 	mcall	80008254 <main+0x520>
	print_dbg("Columbus Board Tester\n\n\r");
80007d60:	fe fc 04 f8 	ld.w	r12,pc[1272]
80007d64:	f0 1f 01 3c 	mcall	80008254 <main+0x520>
	sd_mmc_resources_init();
80007d68:	f0 1f 01 3d 	mcall	8000825c <main+0x528>
	INTC_init_interrupts();
80007d6c:	f0 1f 01 3d 	mcall	80008260 <main+0x52c>
	
	print_dbg("\n\n\rSD Card Memory Test:\n\r");
80007d70:	fe fc 04 f4 	ld.w	r12,pc[1268]
80007d74:	f0 1f 01 38 	mcall	80008254 <main+0x520>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
80007d78:	30 0c       	mov	r12,0
80007d7a:	f0 1f 01 3c 	mcall	80008268 <main+0x534>
80007d7e:	c1 71       	brne	80007dac <main+0x78>
	{
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
80007d80:	fa cb ff e0 	sub	r11,sp,-32
80007d84:	f0 1f 01 3a 	mcall	8000826c <main+0x538>
		print_dbg("OK:\t");
80007d88:	fe fc 04 e8 	ld.w	r12,pc[1256]
80007d8c:	f0 1f 01 32 	mcall	80008254 <main+0x520>
		print_dbg_ulong((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
80007d90:	40 8c       	lddsp	r12,sp[0x20]
80007d92:	2f fc       	sub	r12,-1
80007d94:	ab 9c       	lsr	r12,0xb
80007d96:	f0 1f 01 38 	mcall	80008274 <main+0x540>
		print_dbg("MB\r\n");
80007d9a:	fe fc 04 de 	ld.w	r12,pc[1246]
80007d9e:	f0 1f 01 2e 	mcall	80008254 <main+0x520>
		print_dbg("SD Card Okay.\n\r");
80007da2:	fe fc 04 da 	ld.w	r12,pc[1242]
80007da6:	f0 1f 01 2c 	mcall	80008254 <main+0x520>
80007daa:	c0 58       	rjmp	80007db4 <main+0x80>
	}
	else
	{
		// Display an error message
		print_dbg("Not initialized: Check if memory is ready...\r\n");
80007dac:	fe fc 04 d4 	ld.w	r12,pc[1236]
80007db0:	f0 1f 01 29 	mcall	80008254 <main+0x520>
	}
	nav_reset();
80007db4:	f0 1f 01 34 	mcall	80008284 <main+0x550>
	// Use the last drive available as default.
	nav_drive_set(nav_drive_nb() - 1);
80007db8:	f0 1f 01 34 	mcall	80008288 <main+0x554>
80007dbc:	20 1c       	sub	r12,1
80007dbe:	5c 5c       	castu.b	r12
80007dc0:	f0 1f 01 33 	mcall	8000828c <main+0x558>
	// Mount it.
	nav_partition_mount();
80007dc4:	f0 1f 01 33 	mcall	80008290 <main+0x55c>
	nav_filelist_reset();
80007dc8:	f0 1f 01 33 	mcall	80008294 <main+0x560>
	if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
80007dcc:	30 0b       	mov	r11,0
80007dce:	fe fc 04 ca 	ld.w	r12,pc[1226]
80007dd2:	f0 1f 01 33 	mcall	8000829c <main+0x568>
80007dd6:	c1 d0       	breq	80007e10 <main+0xdc>
	{
		print_dbg("\n\rLog File Already Exists\n\rAttempting to delete...");	
80007dd8:	fe fc 04 c8 	ld.w	r12,pc[1224]
80007ddc:	f0 1f 01 1e 	mcall	80008254 <main+0x520>
		nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007de0:	fe f7 04 b8 	ld.w	r7,pc[1208]
80007de4:	30 0a       	mov	r10,0
80007de6:	30 1b       	mov	r11,1
80007de8:	0e 9c       	mov	r12,r7
80007dea:	f0 1f 01 2f 	mcall	800082a4 <main+0x570>
		nav_file_del(false);
80007dee:	30 0c       	mov	r12,0
80007df0:	f0 1f 01 2e 	mcall	800082a8 <main+0x574>
		
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
80007df4:	30 0b       	mov	r11,0
80007df6:	0e 9c       	mov	r12,r7
80007df8:	f0 1f 01 29 	mcall	8000829c <main+0x568>
80007dfc:	c0 60       	breq	80007e08 <main+0xd4>
			print_dbg("\n\rLog File Still Exists...");
80007dfe:	fe fc 04 ae 	ld.w	r12,pc[1198]
80007e02:	f0 1f 01 15 	mcall	80008254 <main+0x520>
80007e06:	c0 58       	rjmp	80007e10 <main+0xdc>
		else
			print_dbg("\n\rLog File Deleted!");
80007e08:	fe fc 04 a8 	ld.w	r12,pc[1192]
80007e0c:	f0 1f 01 12 	mcall	80008254 <main+0x520>
	}
	
	
	print_dbg("\n\rCreating Log File.");
80007e10:	fe fc 04 a4 	ld.w	r12,pc[1188]
80007e14:	f0 1f 01 10 	mcall	80008254 <main+0x520>
	//char buff[20] = "log.txt";
	if(nav_file_create((FS_STRING)LOG_FILE) == true)
80007e18:	fe fc 04 80 	ld.w	r12,pc[1152]
80007e1c:	f0 1f 01 27 	mcall	800082b8 <main+0x584>
80007e20:	c0 60       	breq	80007e2c <main+0xf8>
		print_dbg("\n\rSuccess!");
80007e22:	fe fc 04 9a 	ld.w	r12,pc[1178]
80007e26:	f0 1f 01 0c 	mcall	80008254 <main+0x520>
80007e2a:	c0 58       	rjmp	80007e34 <main+0x100>
	else
		print_dbg("\n\rNot worked...");
80007e2c:	fe fc 04 94 	ld.w	r12,pc[1172]
80007e30:	f0 1f 01 09 	mcall	80008254 <main+0x520>
	
	print_dbg("\n\rWriting to log file.");
80007e34:	fe fc 04 90 	ld.w	r12,pc[1168]
80007e38:	f0 1f 01 07 	mcall	80008254 <main+0x520>
	
	Log_Write("Columbus Tester:\n\r", -1);
80007e3c:	3f fb       	mov	r11,-1
80007e3e:	fe fc 04 8a 	ld.w	r12,pc[1162]
80007e42:	f0 1f 01 23 	mcall	800082cc <main+0x598>


	print_dbg("\n\rLED Test:\n\rAll LEDS on;");
80007e46:	fe fc 04 8a 	ld.w	r12,pc[1162]
80007e4a:	f0 1f 01 03 	mcall	80008254 <main+0x520>
	LEDMOTOR_SET;
80007e4e:	32 cc       	mov	r12,44
80007e50:	f0 1f 01 21 	mcall	800082d4 <main+0x5a0>
	LED2_SET;
80007e54:	33 1c       	mov	r12,49
80007e56:	f0 1f 01 20 	mcall	800082d4 <main+0x5a0>
	LED3_SET;
80007e5a:	33 2c       	mov	r12,50
80007e5c:	f0 1f 01 1e 	mcall	800082d4 <main+0x5a0>
	LED4_SET;
80007e60:	33 bc       	mov	r12,59
80007e62:	f0 1f 01 1d 	mcall	800082d4 <main+0x5a0>
	LED5_SET;
80007e66:	33 cc       	mov	r12,60
80007e68:	f0 1f 01 1b 	mcall	800082d4 <main+0x5a0>
	LED6_SET;
80007e6c:	33 dc       	mov	r12,61
80007e6e:	f0 1f 01 1a 	mcall	800082d4 <main+0x5a0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007e72:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007e76:	e0 6a 24 00 	mov	r10,9216
80007e7a:	ea 1a 00 f4 	orh	r10,0xf4
80007e7e:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007e82:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007e86:	14 38       	cp.w	r8,r10
80007e88:	e0 88 00 09 	brls	80007e9a <main+0x166>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007e8c:	12 38       	cp.w	r8,r9
80007e8e:	fe 98 ff fa 	brls	80007e82 <main+0x14e>
80007e92:	12 3a       	cp.w	r10,r9
80007e94:	e0 83 01 9a 	brlo	800081c8 <main+0x494>
80007e98:	cf 5b       	rjmp	80007e82 <main+0x14e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007e9a:	12 38       	cp.w	r8,r9
80007e9c:	e0 8b 01 96 	brhi	800081c8 <main+0x494>
80007ea0:	12 3a       	cp.w	r10,r9
80007ea2:	e0 83 01 93 	brlo	800081c8 <main+0x494>
80007ea6:	ce eb       	rjmp	80007e82 <main+0x14e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007ea8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007eac:	14 38       	cp.w	r8,r10
80007eae:	e0 88 00 09 	brls	80007ec0 <main+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007eb2:	12 38       	cp.w	r8,r9
80007eb4:	fe 98 ff fa 	brls	80007ea8 <main+0x174>
80007eb8:	12 3a       	cp.w	r10,r9
80007eba:	e0 83 01 a6 	brlo	80008206 <main+0x4d2>
80007ebe:	cf 5b       	rjmp	80007ea8 <main+0x174>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007ec0:	12 38       	cp.w	r8,r9
80007ec2:	e0 8b 01 a2 	brhi	80008206 <main+0x4d2>
80007ec6:	12 3a       	cp.w	r10,r9
80007ec8:	e0 83 01 9f 	brlo	80008206 <main+0x4d2>
80007ecc:	ce eb       	rjmp	80007ea8 <main+0x174>
80007ece:	0c 95       	mov	r5,r6
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80007ed0:	ea 03 02 48 	mul	r8,r5,r3
80007ed4:	0e 38       	cp.w	r8,r7
80007ed6:	c0 30       	breq	80007edc <main+0x1a8>
80007ed8:	0a 96       	mov	r6,r5
80007eda:	c0 c8       	rjmp	80007ef2 <main+0x1be>
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			print_dbg("\rFilling SDRAM with test pattern: ");
80007edc:	04 9c       	mov	r12,r2
80007ede:	f0 1f 00 de 	mcall	80008254 <main+0x520>
			print_dbg_ulong(j++);
80007ee2:	ea c6 ff ff 	sub	r6,r5,-1
80007ee6:	0a 9c       	mov	r12,r5
80007ee8:	f0 1f 00 e3 	mcall	80008274 <main+0x540>
			print_dbg_char('%');
80007eec:	02 9c       	mov	r12,r1
80007eee:	f0 1f 00 fb 	mcall	800082d8 <main+0x5a4>
		}
		sdram[i] = i;
80007ef2:	08 a7       	st.w	r4++,r7
	print_dbg("SDRAM initialized\r\n");
	// Determine the increment of SDRAM word address requiring an update of the
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
80007ef4:	2f f7       	sub	r7,-1
80007ef6:	fc 18 00 10 	movh	r8,0x10
80007efa:	10 37       	cp.w	r7,r8
80007efc:	ce 91       	brne	80007ece <main+0x19a>
			print_dbg_char('%');
		}
		sdram[i] = i;
		
	}
	print_dbg("\rSDRAM filled with test pattern       \r\n");
80007efe:	fe fc 03 de 	ld.w	r12,pc[990]
80007f02:	f0 1f 00 d5 	mcall	80008254 <main+0x520>
80007f06:	fc 15 c0 00 	movh	r5,0xc000
80007f0a:	30 04       	mov	r4,0
80007f0c:	08 96       	mov	r6,r4
80007f0e:	08 97       	mov	r7,r4
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80007f10:	e0 62 28 f6 	mov	r2,10486
		{
			print_dbg("\rRecovering test pattern from SDRAM: ");
80007f14:	fe f1 03 cc 	ld.w	r1,pc[972]
			print_dbg_ulong(j++);
			print_dbg_char('%');
80007f18:	32 50       	mov	r0,37
	print_dbg("\rSDRAM filled with test pattern       \r\n");
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80007f1a:	ec 02 02 48 	mul	r8,r6,r2
80007f1e:	0e 38       	cp.w	r8,r7
80007f20:	c0 30       	breq	80007f26 <main+0x1f2>
80007f22:	0c 93       	mov	r3,r6
80007f24:	c0 c8       	rjmp	80007f3c <main+0x208>
		{
			print_dbg("\rRecovering test pattern from SDRAM: ");
80007f26:	02 9c       	mov	r12,r1
80007f28:	f0 1f 00 cb 	mcall	80008254 <main+0x520>
			print_dbg_ulong(j++);
80007f2c:	ec c3 ff ff 	sub	r3,r6,-1
80007f30:	0c 9c       	mov	r12,r6
80007f32:	f0 1f 00 d1 	mcall	80008274 <main+0x540>
			print_dbg_char('%');
80007f36:	00 9c       	mov	r12,r0
80007f38:	f0 1f 00 e8 	mcall	800082d8 <main+0x5a4>
		}
		tmp = sdram[i];
80007f3c:	6a 08       	ld.w	r8,r5[0x0]
		if (tmp != i)//failed
		{
			noErrors++;
80007f3e:	0e 38       	cp.w	r8,r7
80007f40:	f7 b4 01 ff 	subne	r4,-1
		sdram[i] = i;
		
	}
	print_dbg("\rSDRAM filled with test pattern       \r\n");
	// Recover the test pattern from the SDRAM and verify it.
	for (i = 0, j = 0; i < sdram_size; i++)
80007f44:	2f f7       	sub	r7,-1
80007f46:	2f c5       	sub	r5,-4
80007f48:	fc 18 00 10 	movh	r8,0x10
80007f4c:	10 37       	cp.w	r7,r8
80007f4e:	c0 30       	breq	80007f54 <main+0x220>
80007f50:	06 96       	mov	r6,r3
80007f52:	ce 4b       	rjmp	80007f1a <main+0x1e6>
		{
			noErrors++;
		}

	}
	print_dbg("\rSDRAM tested: ");
80007f54:	fe fc 03 90 	ld.w	r12,pc[912]
80007f58:	f0 1f 00 bf 	mcall	80008254 <main+0x520>
	print_dbg_ulong(noErrors);
80007f5c:	08 9c       	mov	r12,r4
80007f5e:	f0 1f 00 c6 	mcall	80008274 <main+0x540>
	print_dbg(" corrupted word(s)       \r\n");
80007f62:	fe fc 03 86 	ld.w	r12,pc[902]
80007f66:	f0 1f 00 bc 	mcall	80008254 <main+0x520>
	if (noErrors)
80007f6a:	58 04       	cp.w	r4,0
80007f6c:	c0 50       	breq	80007f76 <main+0x242>
	{
			LED3_SET;
80007f6e:	33 2c       	mov	r12,50
80007f70:	f0 1f 00 d9 	mcall	800082d4 <main+0x5a0>
80007f74:	c0 48       	rjmp	80007f7c <main+0x248>
	}
	else
	{
			LED2_SET;
80007f76:	33 1c       	mov	r12,49
80007f78:	f0 1f 00 d7 	mcall	800082d4 <main+0x5a0>
80007f7c:	fc 16 c0 00 	movh	r6,0xc000
80007f80:	30 07       	mov	r7,0
	
	
	for(i = 0; i < 10; i++)
	{
		sdram[i] = i;
		print_dbg("\n\rWritten data: ");
80007f82:	fe f5 03 6a 	ld.w	r5,pc[874]
		print_dbg_ulong(i);
		print_dbg("\n\rRead data: ");
80007f86:	fe f4 03 6a 	ld.w	r4,pc[874]
	}
	
	
	for(i = 0; i < 10; i++)
	{
		sdram[i] = i;
80007f8a:	8d 07       	st.w	r6[0x0],r7
		print_dbg("\n\rWritten data: ");
80007f8c:	0a 9c       	mov	r12,r5
80007f8e:	f0 1f 00 b2 	mcall	80008254 <main+0x520>
		print_dbg_ulong(i);
80007f92:	0e 9c       	mov	r12,r7
80007f94:	f0 1f 00 b8 	mcall	80008274 <main+0x540>
		print_dbg("\n\rRead data: ");
80007f98:	08 9c       	mov	r12,r4
80007f9a:	f0 1f 00 af 	mcall	80008254 <main+0x520>
		print_dbg_ulong(sdram[i]);
80007f9e:	0d 0c       	ld.w	r12,r6++
80007fa0:	f0 1f 00 b5 	mcall	80008274 <main+0x540>
	{
			LED2_SET;
	}
	
	
	for(i = 0; i < 10; i++)
80007fa4:	2f f7       	sub	r7,-1
80007fa6:	58 a7       	cp.w	r7,10
80007fa8:	cf 11       	brne	80007f8a <main+0x256>
		print_dbg("\n\rWritten data: ");
		print_dbg_ulong(i);
		print_dbg("\n\rRead data: ");
		print_dbg_ulong(sdram[i]);
	}
	print_dbg("\n\rRead data from address 1: ");
80007faa:	fe fc 03 4a 	ld.w	r12,pc[842]
80007fae:	f0 1f 00 aa 	mcall	80008254 <main+0x520>
	print_dbg_ulong(sdram[1]);
80007fb2:	30 48       	mov	r8,4
80007fb4:	ea 18 c0 00 	orh	r8,0xc000
80007fb8:	70 0c       	ld.w	r12,r8[0x0]
80007fba:	f0 1f 00 af 	mcall	80008274 <main+0x540>
	
	

// 
 	print_dbg("\n\n\rTWI Test:\n\r");
80007fbe:	fe f7 03 3a 	ld.w	r7,pc[826]
80007fc2:	0e 9c       	mov	r12,r7
80007fc4:	f0 1f 00 a4 	mcall	80008254 <main+0x520>
	Log_Write("\n\n\rTWI Test:\n\r", 14);
80007fc8:	30 eb       	mov	r11,14
80007fca:	0e 9c       	mov	r12,r7
80007fcc:	f0 1f 00 c0 	mcall	800082cc <main+0x598>
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
80007fd0:	fe f8 03 2c 	ld.w	r8,pc[812]
80007fd4:	fa cc ff f0 	sub	r12,sp,-16
80007fd8:	70 09       	ld.w	r9,r8[0x0]
80007fda:	99 09       	st.w	r12[0x0],r9
80007fdc:	70 19       	ld.w	r9,r8[0x4]
80007fde:	99 19       	st.w	r12[0x4],r9
80007fe0:	70 29       	ld.w	r9,r8[0x8]
80007fe2:	99 29       	st.w	r12[0x8],r9
80007fe4:	70 38       	ld.w	r8,r8[0xc]
80007fe6:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
80007fe8:	fe f8 03 18 	ld.w	r8,pc[792]
80007fec:	70 09       	ld.w	r9,r8[0x0]
80007fee:	50 09       	stdsp	sp[0x0],r9
80007ff0:	70 19       	ld.w	r9,r8[0x4]
80007ff2:	50 19       	stdsp	sp[0x4],r9
80007ff4:	70 29       	ld.w	r9,r8[0x8]
80007ff6:	50 29       	stdsp	sp[0x8],r9
80007ff8:	70 38       	ld.w	r8,r8[0xc]
80007ffa:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
80007ffc:	30 2b       	mov	r11,2
80007ffe:	f0 1f 00 c2 	mcall	80008304 <main+0x5d0>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (TWIM, &TWIM_OPTIONS);
80008002:	1a 9b       	mov	r11,sp
80008004:	fe 7c 38 00 	mov	r12,-51200
80008008:	f0 1f 00 c0 	mcall	80008308 <main+0x5d4>

// 
 	print_dbg("\n\n\rTWI Test:\n\r");
	Log_Write("\n\n\rTWI Test:\n\r", 14);
 	twim_init();
	print_dbg("\n\rInitialising the I2C Mux");
8000800c:	fe fc 03 00 	ld.w	r12,pc[768]
80008010:	f0 1f 00 91 	mcall	80008254 <main+0x520>
	PCA9542A_Init();
80008014:	f0 1f 00 bf 	mcall	80008310 <main+0x5dc>
	
	print_dbg("Scanning all Channels\n\r");
80008018:	fe fc 02 fc 	ld.w	r12,pc[764]
8000801c:	f0 1f 00 8e 	mcall	80008254 <main+0x520>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80008020:	fe fc 02 f8 	ld.w	r12,pc[760]
80008024:	f0 1f 00 8c 	mcall	80008254 <main+0x520>
80008028:	30 07       	mov	r7,0
8000802a:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
8000802c:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
8000802e:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
80008032:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
80008034:	34 11       	mov	r1,65
	print_dbg("Scanning all Channels\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
80008036:	00 9c       	mov	r12,r0
80008038:	f0 1f 00 8f 	mcall	80008274 <main+0x540>
		print_dbg_char(' ');
8000803c:	0a 9c       	mov	r12,r5
8000803e:	f0 1f 00 a7 	mcall	800082d8 <main+0x5a4>
80008042:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80008046:	ee c6 ff ff 	sub	r6,r7,-1
8000804a:	0e 9b       	mov	r11,r7
8000804c:	06 9c       	mov	r12,r3
8000804e:	f0 1f 00 b4 	mcall	8000831c <main+0x5e8>
			if(status == STATUS_OK)
80008052:	c0 51       	brne	8000805c <main+0x328>
			{
				print_dbg_char('A');
80008054:	02 9c       	mov	r12,r1
80008056:	f0 1f 00 a1 	mcall	800082d8 <main+0x5a4>
8000805a:	c0 48       	rjmp	80008062 <main+0x32e>
			}
			else
			{
				print_dbg_char('-');
8000805c:	04 9c       	mov	r12,r2
8000805e:	f0 1f 00 9f 	mcall	800082d8 <main+0x5a4>
			}
			print_dbg_char(' ');
80008062:	0a 9c       	mov	r12,r5
80008064:	f0 1f 00 9d 	mcall	800082d8 <main+0x5a4>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
80008068:	08 36       	cp.w	r6,r4
8000806a:	c0 30       	breq	80008070 <main+0x33c>
8000806c:	0c 97       	mov	r7,r6
8000806e:	ce cb       	rjmp	80008046 <main+0x312>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
80008070:	fe fc 02 b0 	ld.w	r12,pc[688]
80008074:	f0 1f 00 78 	mcall	80008254 <main+0x520>
	PCA9542A_Init();
	
	print_dbg("Scanning all Channels\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80008078:	2f f0       	sub	r0,-1
8000807a:	58 80       	cp.w	r0,8
8000807c:	c0 30       	breq	80008082 <main+0x34e>
8000807e:	0c 97       	mov	r7,r6
80008080:	cd bb       	rjmp	80008036 <main+0x302>
// 	while(Motors_Moving() == true)
//		;//wait for the motors to finish moving
	
	
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80008082:	30 4c       	mov	r12,4
80008084:	f0 1f 00 a8 	mcall	80008324 <main+0x5f0>
	print_dbg("\n\rScanning Channel 0\n\r");
80008088:	fe fc 02 a0 	ld.w	r12,pc[672]
8000808c:	f0 1f 00 72 	mcall	80008254 <main+0x520>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80008090:	fe fc 02 88 	ld.w	r12,pc[648]
80008094:	f0 1f 00 70 	mcall	80008254 <main+0x520>
80008098:	30 07       	mov	r7,0
8000809a:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
8000809c:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
8000809e:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
800080a2:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
800080a4:	34 11       	mov	r1,65
	print_dbg("\n\rScanning Channel 0\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
800080a6:	00 9c       	mov	r12,r0
800080a8:	f0 1f 00 73 	mcall	80008274 <main+0x540>
		print_dbg_char(' ');
800080ac:	0a 9c       	mov	r12,r5
800080ae:	f0 1f 00 8b 	mcall	800082d8 <main+0x5a4>
800080b2:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
800080b6:	ee c6 ff ff 	sub	r6,r7,-1
800080ba:	0e 9b       	mov	r11,r7
800080bc:	06 9c       	mov	r12,r3
800080be:	f0 1f 00 98 	mcall	8000831c <main+0x5e8>
			if(status == STATUS_OK)
800080c2:	c0 51       	brne	800080cc <main+0x398>
			{
				print_dbg_char('A');
800080c4:	02 9c       	mov	r12,r1
800080c6:	f0 1f 00 85 	mcall	800082d8 <main+0x5a4>
800080ca:	c0 48       	rjmp	800080d2 <main+0x39e>
			}
			else
			{
				print_dbg_char('-');
800080cc:	04 9c       	mov	r12,r2
800080ce:	f0 1f 00 83 	mcall	800082d8 <main+0x5a4>
			}
			print_dbg_char(' ');
800080d2:	0a 9c       	mov	r12,r5
800080d4:	f0 1f 00 81 	mcall	800082d8 <main+0x5a4>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
800080d8:	08 36       	cp.w	r6,r4
800080da:	c0 30       	breq	800080e0 <main+0x3ac>
800080dc:	0c 97       	mov	r7,r6
800080de:	ce cb       	rjmp	800080b6 <main+0x382>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
800080e0:	fe fc 02 40 	ld.w	r12,pc[576]
800080e4:	f0 1f 00 5c 	mcall	80008254 <main+0x520>
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
	print_dbg("\n\rScanning Channel 0\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
800080e8:	2f f0       	sub	r0,-1
800080ea:	58 80       	cp.w	r0,8
800080ec:	c0 30       	breq	800080f2 <main+0x3be>
800080ee:	0c 97       	mov	r7,r6
800080f0:	cd bb       	rjmp	800080a6 <main+0x372>
		}
		print_dbg("\n\r");
	}
	
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
800080f2:	30 5c       	mov	r12,5
800080f4:	f0 1f 00 8c 	mcall	80008324 <main+0x5f0>
	print_dbg("\n\rScanning Channel 1\n\r");
800080f8:	fe fc 02 34 	ld.w	r12,pc[564]
800080fc:	f0 1f 00 56 	mcall	80008254 <main+0x520>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80008100:	fe fc 02 18 	ld.w	r12,pc[536]
80008104:	f0 1f 00 54 	mcall	80008254 <main+0x520>
80008108:	30 07       	mov	r7,0
8000810a:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
8000810c:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
8000810e:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
80008112:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
80008114:	34 11       	mov	r1,65
	print_dbg("\n\rScanning Channel 1\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
80008116:	00 9c       	mov	r12,r0
80008118:	f0 1f 00 57 	mcall	80008274 <main+0x540>
		print_dbg_char(' ');
8000811c:	0a 9c       	mov	r12,r5
8000811e:	f0 1f 00 6f 	mcall	800082d8 <main+0x5a4>
80008122:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80008126:	ee c6 ff ff 	sub	r6,r7,-1
8000812a:	0e 9b       	mov	r11,r7
8000812c:	06 9c       	mov	r12,r3
8000812e:	f0 1f 00 7c 	mcall	8000831c <main+0x5e8>
			if(status == STATUS_OK)
80008132:	c0 51       	brne	8000813c <main+0x408>
			{
				print_dbg_char('A');
80008134:	02 9c       	mov	r12,r1
80008136:	f0 1f 00 69 	mcall	800082d8 <main+0x5a4>
8000813a:	c0 48       	rjmp	80008142 <main+0x40e>
			}
			else
			{
				print_dbg_char('-');
8000813c:	04 9c       	mov	r12,r2
8000813e:	f0 1f 00 67 	mcall	800082d8 <main+0x5a4>
			}
			print_dbg_char(' ');
80008142:	0a 9c       	mov	r12,r5
80008144:	f0 1f 00 65 	mcall	800082d8 <main+0x5a4>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
80008148:	08 36       	cp.w	r6,r4
8000814a:	c0 30       	breq	80008150 <main+0x41c>
8000814c:	0c 97       	mov	r7,r6
8000814e:	ce cb       	rjmp	80008126 <main+0x3f2>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
80008150:	4f 4c       	lddpc	r12,80008320 <main+0x5ec>
80008152:	f0 1f 00 41 	mcall	80008254 <main+0x520>
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
	print_dbg("\n\rScanning Channel 1\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80008156:	2f f0       	sub	r0,-1
80008158:	58 80       	cp.w	r0,8
8000815a:	c0 30       	breq	80008160 <main+0x42c>
8000815c:	0c 97       	mov	r7,r6
8000815e:	cd cb       	rjmp	80008116 <main+0x3e2>
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
	}
	
	print_dbg("\n\rInitialising Cameras");
80008160:	4f 4c       	lddpc	r12,80008330 <main+0x5fc>
80008162:	f0 1f 00 3d 	mcall	80008254 <main+0x520>
	OV7670_Init();
80008166:	f0 1f 00 74 	mcall	80008334 <main+0x600>
	FIFO_Reset(CAMERA_LEFT | CAMERA_RIGHT);
8000816a:	30 3c       	mov	r12,3
8000816c:	f0 1f 00 73 	mcall	80008338 <main+0x604>
	if(STATUS_OK == OV7670_Status.Error)
80008170:	4f 38       	lddpc	r8,8000833c <main+0x608>
80008172:	11 89       	ld.ub	r9,r8[0x0]
80008174:	30 08       	mov	r8,0
80008176:	f0 09 18 00 	cp.b	r9,r8
8000817a:	c0 51       	brne	80008184 <main+0x450>
	{
		print_dbg("\n\rCamera Initialise Okay!");
8000817c:	4f 1c       	lddpc	r12,80008340 <main+0x60c>
8000817e:	f0 1f 00 36 	mcall	80008254 <main+0x520>
80008182:	c0 48       	rjmp	8000818a <main+0x456>
	}
	else
		print_dbg("\n\rCamara Initialise Fail.");
80008184:	4f 0c       	lddpc	r12,80008344 <main+0x610>
80008186:	f0 1f 00 34 	mcall	80008254 <main+0x520>
		
	print_dbg("\n\rTaking Photos");
8000818a:	4f 0c       	lddpc	r12,80008348 <main+0x614>
8000818c:	f0 1f 00 32 	mcall	80008254 <main+0x520>
	//TakePhoto(CAMERA_LEFT);
	//TakePhoto(CAMERA_RIGHT);
	TakePhoto(CAMERA_LEFT | CAMERA_RIGHT);
80008190:	30 3c       	mov	r12,3
80008192:	f0 1f 00 6f 	mcall	8000834c <main+0x618>
	while(Photos_Ready() == false)
80008196:	f0 1f 00 6f 	mcall	80008350 <main+0x61c>
8000819a:	cf e0       	breq	80008196 <main+0x462>
		;

	if(Store_Both_Images() == true)
8000819c:	f0 1f 00 6e 	mcall	80008354 <main+0x620>
800081a0:	c0 40       	breq	800081a8 <main+0x474>
		print_dbg("\n\rImages Stored Successfully!");
800081a2:	4e ec       	lddpc	r12,80008358 <main+0x624>
800081a4:	f0 1f 00 2c 	mcall	80008254 <main+0x520>
		
	print_dbg("\n\rMotor Testing:\n\rMotor Initialised");
800081a8:	4e dc       	lddpc	r12,8000835c <main+0x628>
800081aa:	f0 1f 00 2b 	mcall	80008254 <main+0x520>
 	Motor_Init();
800081ae:	f0 1f 00 6d 	mcall	80008360 <main+0x62c>
	Motors_Reset();//reset the motors to test them
800081b2:	f0 1f 00 6d 	mcall	80008364 <main+0x630>
	while(Motors_Moving() == true)
800081b6:	f0 1f 00 6d 	mcall	80008368 <main+0x634>
800081ba:	cf e1       	brne	800081b6 <main+0x482>
		;//wait for the motors to finish moving
		
	print_dbg("\n\rTest Complete!");
800081bc:	4e cc       	lddpc	r12,8000836c <main+0x638>
800081be:	f0 1f 00 26 	mcall	80008254 <main+0x520>
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		TOGGLE();
800081c2:	f0 1f 00 6c 	mcall	80008370 <main+0x63c>
800081c6:	cf eb       	rjmp	800081c2 <main+0x48e>
	LED3_SET;
	LED4_SET;
	LED5_SET;
	LED6_SET;
	delay_s(1);
	print_dbg("\n\rAll LEDS off;");
800081c8:	4e bc       	lddpc	r12,80008374 <main+0x640>
800081ca:	f0 1f 00 23 	mcall	80008254 <main+0x520>
	LEDMOTOR_CLR;
800081ce:	32 cc       	mov	r12,44
800081d0:	f0 1f 00 6a 	mcall	80008378 <main+0x644>
	LED2_CLR;
800081d4:	33 1c       	mov	r12,49
800081d6:	f0 1f 00 69 	mcall	80008378 <main+0x644>
	LED3_CLR;
800081da:	33 2c       	mov	r12,50
800081dc:	f0 1f 00 67 	mcall	80008378 <main+0x644>
	LED4_CLR;
800081e0:	33 bc       	mov	r12,59
800081e2:	f0 1f 00 66 	mcall	80008378 <main+0x644>
	LED5_CLR;
800081e6:	33 cc       	mov	r12,60
800081e8:	f0 1f 00 64 	mcall	80008378 <main+0x644>
	LED6_CLR;
800081ec:	33 dc       	mov	r12,61
800081ee:	f0 1f 00 63 	mcall	80008378 <main+0x644>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800081f2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800081f6:	e0 6a 24 00 	mov	r10,9216
800081fa:	ea 1a 00 f4 	orh	r10,0xf4
800081fe:	f0 0a 00 0a 	add	r10,r8,r10
80008202:	fe 9f fe 53 	bral	80007ea8 <main+0x174>
	delay_s(1);
	
	print_dbg("\n\n\rSDRAM Test:");
80008206:	4d ec       	lddpc	r12,8000837c <main+0x648>
80008208:	f0 1f 00 13 	mcall	80008254 <main+0x520>
	sdram_size = SDRAM_SIZE >> 2;
	print_dbg("\n\rSDRAM size: ");
8000820c:	4d dc       	lddpc	r12,80008380 <main+0x64c>
8000820e:	f0 1f 00 12 	mcall	80008254 <main+0x520>
	print_dbg_ulong(SDRAM_SIZE >> 20);
80008212:	30 4c       	mov	r12,4
80008214:	f0 1f 00 18 	mcall	80008274 <main+0x540>
	print_dbg(" MB\r\n");
80008218:	4d bc       	lddpc	r12,80008384 <main+0x650>
8000821a:	f0 1f 00 0f 	mcall	80008254 <main+0x520>
	sdramc_init(FOSC0);
8000821e:	e0 6c 24 00 	mov	r12,9216
80008222:	ea 1c 00 f4 	orh	r12,0xf4
80008226:	f0 1f 00 59 	mcall	80008388 <main+0x654>
	print_dbg("SDRAM initialized\r\n");
8000822a:	4d 9c       	lddpc	r12,8000838c <main+0x658>
8000822c:	f0 1f 00 0a 	mcall	80008254 <main+0x520>
80008230:	fc 14 c0 00 	movh	r4,0xc000
80008234:	30 05       	mov	r5,0
80008236:	0a 97       	mov	r7,r5
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80008238:	e0 63 28 f6 	mov	r3,10486
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			print_dbg("\rFilling SDRAM with test pattern: ");
8000823c:	4d 52       	lddpc	r2,80008390 <main+0x65c>
			print_dbg_ulong(j++);
			print_dbg_char('%');
8000823e:	32 51       	mov	r1,37
80008240:	fe 9f fe 48 	bral	80007ed0 <main+0x19c>
80008244:	80 00       	ld.sh	r0,r0[0x0]
80008246:	6d 84       	ld.w	r4,r6[0x60]
80008248:	80 00       	ld.sh	r0,r0[0x0]
8000824a:	33 74       	mov	r4,55
8000824c:	80 00       	ld.sh	r0,r0[0x0]
8000824e:	6d 24       	ld.w	r4,r6[0x48]
80008250:	80 00       	ld.sh	r0,r0[0x0]
80008252:	e5 c0 80 00 	ldmts	r0,pc
80008256:	6c d0       	ld.w	r0,r6[0x34]
80008258:	80 00       	ld.sh	r0,r0[0x0]
8000825a:	e5 c4 80 00 	ldmts	r4,pc
8000825e:	7b ec       	ld.w	r12,sp[0x78]
80008260:	80 00       	ld.sh	r0,r0[0x0]
80008262:	32 c8       	mov	r8,44
80008264:	80 00       	ld.sh	r0,r0[0x0]
80008266:	e5 e0 80 00 	sthh.w	r0[r0],r2:b,r0:b
8000826a:	6d 88       	ld.w	r8,r6[0x60]
8000826c:	80 00       	ld.sh	r0,r0[0x0]
8000826e:	6d 9c       	ld.w	r12,r6[0x64]
80008270:	80 00       	ld.sh	r0,r0[0x0]
80008272:	e5 fc 80 00 	ld.wls	r12,r2[0x0]
80008276:	6c bc       	ld.w	r12,r6[0x2c]
80008278:	80 00       	ld.sh	r0,r0[0x0]
8000827a:	e6 04       	*unknown*
8000827c:	80 00       	ld.sh	r0,r0[0x0]
8000827e:	e6 0c       	*unknown*
80008280:	80 00       	ld.sh	r0,r0[0x0]
80008282:	e6 1c 80 00 	andh	r12,0x8000,COH
80008286:	6b dc       	ld.w	r12,r5[0x74]
80008288:	80 00       	ld.sh	r0,r0[0x0]
8000828a:	6b 88       	ld.w	r8,r5[0x60]
8000828c:	80 00       	ld.sh	r0,r0[0x0]
8000828e:	69 14       	ld.w	r4,r4[0x44]
80008290:	80 00       	ld.sh	r0,r0[0x0]
80008292:	68 cc       	ld.w	r12,r4[0x30]
80008294:	80 00       	ld.sh	r0,r0[0x0]
80008296:	65 2c       	ld.w	r12,r2[0x48]
80008298:	80 00       	ld.sh	r0,r0[0x0]
8000829a:	e5 b8       	*unknown*
8000829c:	80 00       	ld.sh	r0,r0[0x0]
8000829e:	64 fc       	ld.w	r12,r2[0x3c]
800082a0:	80 00       	ld.sh	r0,r0[0x0]
800082a2:	e6 4c 80 00 	cp.w	r12,425984
800082a6:	69 c4       	ld.w	r4,r4[0x70]
800082a8:	80 00       	ld.sh	r0,r0[0x0]
800082aa:	66 90       	ld.w	r0,r3[0x24]
800082ac:	80 00       	ld.sh	r0,r0[0x0]
800082ae:	e6 80 80 00 	breq	800d82ae <_data_lma+0xc9266>
800082b2:	e6 9c 80 00 	brvs	800f82b2 <_data_lma+0xe926a>
800082b6:	e6 b0 80 00 	rcall	800f82b6 <_data_lma+0xe926e>
800082ba:	65 44       	ld.w	r4,r2[0x50]
800082bc:	80 00       	ld.sh	r0,r0[0x0]
800082be:	e6 c8 80 00 	sub	r8,r3,-32768
800082c2:	e6 d4 80 00 	satsub.w	r4,r3,-32768
800082c6:	e6 e4 80 00 	ld.d	r4,r3[-32768]
800082ca:	e6 fc 80 00 	ld.w	r12,r3[-32768]
800082ce:	7c f0       	ld.w	r0,lr[0x3c]
800082d0:	80 00       	ld.sh	r0,r0[0x0]
800082d2:	e7 10 80 00 	ld.uh	r0,r3[-32768]
800082d6:	32 0e       	mov	lr,32
800082d8:	80 00       	ld.sh	r0,r0[0x0]
800082da:	6c 54       	ld.w	r4,r6[0x14]
800082dc:	80 00       	ld.sh	r0,r0[0x0]
800082de:	e7 50 80 00 	st.h	r3[-32768],r0
800082e2:	e7 7c 80 00 	stcond	r3[-32768],r12
800082e6:	e7 a4 80 00 	cop	cp4,cr0,cr0,cr0,0x68
800082ea:	e7 b4       	*unknown*
800082ec:	80 00       	ld.sh	r0,r0[0x0]
800082ee:	e7 d0 80 00 	ldswp.w	r0,r3[0]
800082f2:	e7 e4 80 00 	sthh.w	r0[r0],r3:b,r4:b
800082f6:	e7 f4 80 00 	ld.wls	r4,r3[0x0]
800082fa:	e8 14 80 00 	orl	r4,0x8000
800082fe:	e9 b0       	*unknown*
80008300:	80 00       	ld.sh	r0,r0[0x0]
80008302:	e5 a8 80 00 	cop	cp4,cr0,cr0,cr0,0x50
80008306:	31 c4       	mov	r4,28
80008308:	80 00       	ld.sh	r0,r0[0x0]
8000830a:	3d 44       	mov	r4,-44
8000830c:	80 00       	ld.sh	r0,r0[0x0]
8000830e:	e8 24 80 00 	sub	r4,557056
80008312:	7b b4       	ld.w	r4,sp[0x6c]
80008314:	80 00       	ld.sh	r0,r0[0x0]
80008316:	e8 40 80 00 	cp.w	r0,557056
8000831a:	e8 58 80 00 	cp.w	r8,622592
8000831e:	3d 28       	mov	r8,-46
80008320:	80 00       	ld.sh	r0,r0[0x0]
80008322:	e8 90 80 00 	breq	80138322 <_data_lma+0x1292da>
80008326:	7b 90       	ld.w	r0,sp[0x64]
80008328:	80 00       	ld.sh	r0,r0[0x0]
8000832a:	e8 7c 80 00 	mov	r12,622592
8000832e:	e8 94 80 00 	brge	8013832e <_data_lma+0x1292e6>
80008332:	e8 ac       	*unknown*
80008334:	80 00       	ld.sh	r0,r0[0x0]
80008336:	78 f0       	ld.w	r0,r12[0x3c]
80008338:	80 00       	ld.sh	r0,r0[0x0]
8000833a:	72 14       	ld.w	r4,r9[0x4]
8000833c:	00 00       	add	r0,r0
8000833e:	0c a8       	st.w	r6++,r8
80008340:	80 00       	ld.sh	r0,r0[0x0]
80008342:	e8 c4 80 00 	sub	r4,r4,-32768
80008346:	e8 e0 80 00 	ld.d	r0,r4[-32768]
8000834a:	e8 fc 80 00 	ld.w	r12,r4[-32768]
8000834e:	77 58       	ld.w	r8,r11[0x54]
80008350:	80 00       	ld.sh	r0,r0[0x0]
80008352:	71 b4       	ld.w	r4,r8[0x6c]
80008354:	80 00       	ld.sh	r0,r0[0x0]
80008356:	74 c0       	ld.w	r0,r10[0x30]
80008358:	80 00       	ld.sh	r0,r0[0x0]
8000835a:	e9 0c 80 00 	ld.sh	r12,r4[-32768]
8000835e:	e9 2c 80 00 	ld.sb	r12,r4[-32768]
80008362:	70 70       	ld.w	r0,r8[0x1c]
80008364:	80 00       	ld.sh	r0,r0[0x0]
80008366:	6f 18       	ld.w	r8,r7[0x44]
80008368:	80 00       	ld.sh	r0,r0[0x0]
8000836a:	6e 08       	ld.w	r8,r7[0x0]
8000836c:	80 00       	ld.sh	r0,r0[0x0]
8000836e:	e9 50 80 00 	st.h	r4[-32768],r0
80008372:	7c 70       	ld.w	r0,lr[0x1c]
80008374:	80 00       	ld.sh	r0,r0[0x0]
80008376:	e9 64 80 00 	st.b	r4[-32768],r4
8000837a:	32 2a       	mov	r10,34
8000837c:	80 00       	ld.sh	r0,r0[0x0]
8000837e:	e9 74 80 00 	stcond	r4[-32768],r4
80008382:	e9 84       	*unknown*
80008384:	80 00       	ld.sh	r0,r0[0x0]
80008386:	e9 94       	*unknown*
80008388:	80 00       	ld.sh	r0,r0[0x0]
8000838a:	2e 04       	sub	r4,-32
8000838c:	80 00       	ld.sh	r0,r0[0x0]
8000838e:	e9 9c       	*unknown*
80008390:	80 00       	ld.sh	r0,r0[0x0]
80008392:	e7 2c d4 01 	ld.sb	r12,r3[-11263]

80008394 <memcmp>:
80008394:	d4 01       	pushm	lr
80008396:	30 08       	mov	r8,0
80008398:	c0 d8       	rjmp	800083b2 <memcmp+0x1e>
8000839a:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000839e:	f6 08 07 09 	ld.ub	r9,r11[r8]
800083a2:	20 1a       	sub	r10,1
800083a4:	2f f8       	sub	r8,-1
800083a6:	f2 0e 18 00 	cp.b	lr,r9
800083aa:	c0 40       	breq	800083b2 <memcmp+0x1e>
800083ac:	fc 09 01 0c 	sub	r12,lr,r9
800083b0:	d8 02       	popm	pc
800083b2:	58 0a       	cp.w	r10,0
800083b4:	cf 31       	brne	8000839a <memcmp+0x6>
800083b6:	14 9c       	mov	r12,r10
800083b8:	d8 02       	popm	pc

800083ba <memcpy>:
800083ba:	58 8a       	cp.w	r10,8
800083bc:	c2 f5       	brlt	8000841a <memcpy+0x60>
800083be:	f9 eb 10 09 	or	r9,r12,r11
800083c2:	e2 19 00 03 	andl	r9,0x3,COH
800083c6:	e0 81 00 97 	brne	800084f4 <memcpy+0x13a>
800083ca:	e0 4a 00 20 	cp.w	r10,32
800083ce:	c3 b4       	brge	80008444 <memcpy+0x8a>
800083d0:	f4 08 14 02 	asr	r8,r10,0x2
800083d4:	f0 09 11 08 	rsub	r9,r8,8
800083d8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800083dc:	76 69       	ld.w	r9,r11[0x18]
800083de:	99 69       	st.w	r12[0x18],r9
800083e0:	76 59       	ld.w	r9,r11[0x14]
800083e2:	99 59       	st.w	r12[0x14],r9
800083e4:	76 49       	ld.w	r9,r11[0x10]
800083e6:	99 49       	st.w	r12[0x10],r9
800083e8:	76 39       	ld.w	r9,r11[0xc]
800083ea:	99 39       	st.w	r12[0xc],r9
800083ec:	76 29       	ld.w	r9,r11[0x8]
800083ee:	99 29       	st.w	r12[0x8],r9
800083f0:	76 19       	ld.w	r9,r11[0x4]
800083f2:	99 19       	st.w	r12[0x4],r9
800083f4:	76 09       	ld.w	r9,r11[0x0]
800083f6:	99 09       	st.w	r12[0x0],r9
800083f8:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800083fc:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008400:	e0 1a 00 03 	andl	r10,0x3
80008404:	f4 0a 11 04 	rsub	r10,r10,4
80008408:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000840c:	17 a9       	ld.ub	r9,r11[0x2]
8000840e:	b0 a9       	st.b	r8[0x2],r9
80008410:	17 99       	ld.ub	r9,r11[0x1]
80008412:	b0 99       	st.b	r8[0x1],r9
80008414:	17 89       	ld.ub	r9,r11[0x0]
80008416:	b0 89       	st.b	r8[0x0],r9
80008418:	5e fc       	retal	r12
8000841a:	f4 0a 11 09 	rsub	r10,r10,9
8000841e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008422:	17 f9       	ld.ub	r9,r11[0x7]
80008424:	b8 f9       	st.b	r12[0x7],r9
80008426:	17 e9       	ld.ub	r9,r11[0x6]
80008428:	b8 e9       	st.b	r12[0x6],r9
8000842a:	17 d9       	ld.ub	r9,r11[0x5]
8000842c:	b8 d9       	st.b	r12[0x5],r9
8000842e:	17 c9       	ld.ub	r9,r11[0x4]
80008430:	b8 c9       	st.b	r12[0x4],r9
80008432:	17 b9       	ld.ub	r9,r11[0x3]
80008434:	b8 b9       	st.b	r12[0x3],r9
80008436:	17 a9       	ld.ub	r9,r11[0x2]
80008438:	b8 a9       	st.b	r12[0x2],r9
8000843a:	17 99       	ld.ub	r9,r11[0x1]
8000843c:	b8 99       	st.b	r12[0x1],r9
8000843e:	17 89       	ld.ub	r9,r11[0x0]
80008440:	b8 89       	st.b	r12[0x0],r9
80008442:	5e fc       	retal	r12
80008444:	eb cd 40 c0 	pushm	r6-r7,lr
80008448:	18 99       	mov	r9,r12
8000844a:	22 0a       	sub	r10,32
8000844c:	b7 07       	ld.d	r6,r11++
8000844e:	b3 26       	st.d	r9++,r6
80008450:	b7 07       	ld.d	r6,r11++
80008452:	b3 26       	st.d	r9++,r6
80008454:	b7 07       	ld.d	r6,r11++
80008456:	b3 26       	st.d	r9++,r6
80008458:	b7 07       	ld.d	r6,r11++
8000845a:	b3 26       	st.d	r9++,r6
8000845c:	22 0a       	sub	r10,32
8000845e:	cf 74       	brge	8000844c <memcpy+0x92>
80008460:	2f 0a       	sub	r10,-16
80008462:	c0 65       	brlt	8000846e <memcpy+0xb4>
80008464:	b7 07       	ld.d	r6,r11++
80008466:	b3 26       	st.d	r9++,r6
80008468:	b7 07       	ld.d	r6,r11++
8000846a:	b3 26       	st.d	r9++,r6
8000846c:	21 0a       	sub	r10,16
8000846e:	5c 3a       	neg	r10
80008470:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80008474:	d7 03       	nop
80008476:	d7 03       	nop
80008478:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000847c:	f3 66 00 0e 	st.b	r9[14],r6
80008480:	f7 36 00 0d 	ld.ub	r6,r11[13]
80008484:	f3 66 00 0d 	st.b	r9[13],r6
80008488:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000848c:	f3 66 00 0c 	st.b	r9[12],r6
80008490:	f7 36 00 0b 	ld.ub	r6,r11[11]
80008494:	f3 66 00 0b 	st.b	r9[11],r6
80008498:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000849c:	f3 66 00 0a 	st.b	r9[10],r6
800084a0:	f7 36 00 09 	ld.ub	r6,r11[9]
800084a4:	f3 66 00 09 	st.b	r9[9],r6
800084a8:	f7 36 00 08 	ld.ub	r6,r11[8]
800084ac:	f3 66 00 08 	st.b	r9[8],r6
800084b0:	f7 36 00 07 	ld.ub	r6,r11[7]
800084b4:	f3 66 00 07 	st.b	r9[7],r6
800084b8:	f7 36 00 06 	ld.ub	r6,r11[6]
800084bc:	f3 66 00 06 	st.b	r9[6],r6
800084c0:	f7 36 00 05 	ld.ub	r6,r11[5]
800084c4:	f3 66 00 05 	st.b	r9[5],r6
800084c8:	f7 36 00 04 	ld.ub	r6,r11[4]
800084cc:	f3 66 00 04 	st.b	r9[4],r6
800084d0:	f7 36 00 03 	ld.ub	r6,r11[3]
800084d4:	f3 66 00 03 	st.b	r9[3],r6
800084d8:	f7 36 00 02 	ld.ub	r6,r11[2]
800084dc:	f3 66 00 02 	st.b	r9[2],r6
800084e0:	f7 36 00 01 	ld.ub	r6,r11[1]
800084e4:	f3 66 00 01 	st.b	r9[1],r6
800084e8:	f7 36 00 00 	ld.ub	r6,r11[0]
800084ec:	f3 66 00 00 	st.b	r9[0],r6
800084f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800084f4:	20 1a       	sub	r10,1
800084f6:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800084fa:	f8 0a 0b 09 	st.b	r12[r10],r9
800084fe:	cf b1       	brne	800084f4 <memcpy+0x13a>
80008500:	5e fc       	retal	r12

80008502 <memset>:
80008502:	18 98       	mov	r8,r12
80008504:	c0 38       	rjmp	8000850a <memset+0x8>
80008506:	10 cb       	st.b	r8++,r11
80008508:	20 1a       	sub	r10,1
8000850a:	58 0a       	cp.w	r10,0
8000850c:	cf d1       	brne	80008506 <memset+0x4>
8000850e:	5e fc       	retal	r12

80008510 <sprintf>:
80008510:	d4 01       	pushm	lr
80008512:	21 7d       	sub	sp,92
80008514:	e0 68 ff ff 	mov	r8,65535
80008518:	ea 18 7f ff 	orh	r8,0x7fff
8000851c:	50 58       	stdsp	sp[0x14],r8
8000851e:	50 28       	stdsp	sp[0x8],r8
80008520:	e0 68 02 08 	mov	r8,520
80008524:	ba 68       	st.h	sp[0xc],r8
80008526:	3f f8       	mov	r8,-1
80008528:	ba 78       	st.h	sp[0xe],r8
8000852a:	48 88       	lddpc	r8,80008548 <sprintf+0x38>
8000852c:	50 4c       	stdsp	sp[0x10],r12
8000852e:	16 9a       	mov	r10,r11
80008530:	50 0c       	stdsp	sp[0x0],r12
80008532:	fa c9 ff a0 	sub	r9,sp,-96
80008536:	70 0c       	ld.w	r12,r8[0x0]
80008538:	1a 9b       	mov	r11,sp
8000853a:	ca 3d       	rcall	80008880 <_vfprintf_r>
8000853c:	30 09       	mov	r9,0
8000853e:	40 08       	lddsp	r8,sp[0x0]
80008540:	b0 89       	st.b	r8[0x0],r9
80008542:	2e 9d       	sub	sp,-92
80008544:	d8 02       	popm	pc
80008546:	d7 03       	nop
80008548:	00 00       	add	r0,r0
8000854a:	01 00       	ld.w	r0,r0++

8000854c <get_arg>:
8000854c:	d4 31       	pushm	r0-r7,lr
8000854e:	20 8d       	sub	sp,32
80008550:	fa c4 ff bc 	sub	r4,sp,-68
80008554:	50 4b       	stdsp	sp[0x10],r11
80008556:	68 2e       	ld.w	lr,r4[0x8]
80008558:	50 58       	stdsp	sp[0x14],r8
8000855a:	12 96       	mov	r6,r9
8000855c:	7c 0b       	ld.w	r11,lr[0x0]
8000855e:	70 05       	ld.w	r5,r8[0x0]
80008560:	50 6e       	stdsp	sp[0x18],lr
80008562:	58 0b       	cp.w	r11,0
80008564:	f4 0b 17 00 	moveq	r11,r10
80008568:	68 03       	ld.w	r3,r4[0x0]
8000856a:	68 11       	ld.w	r1,r4[0x4]
8000856c:	40 49       	lddsp	r9,sp[0x10]
8000856e:	30 08       	mov	r8,0
80008570:	c2 a9       	rjmp	800087c4 <get_arg+0x278>
80008572:	2f fb       	sub	r11,-1
80008574:	32 5c       	mov	r12,37
80008576:	17 8a       	ld.ub	r10,r11[0x0]
80008578:	f8 0a 18 00 	cp.b	r10,r12
8000857c:	5f 1e       	srne	lr
8000857e:	f0 0a 18 00 	cp.b	r10,r8
80008582:	5f 1c       	srne	r12
80008584:	fd ec 00 0c 	and	r12,lr,r12
80008588:	f0 0c 18 00 	cp.b	r12,r8
8000858c:	cf 31       	brne	80008572 <get_arg+0x26>
8000858e:	58 0a       	cp.w	r10,0
80008590:	e0 80 01 27 	breq	800087de <get_arg+0x292>
80008594:	30 0c       	mov	r12,0
80008596:	3f fa       	mov	r10,-1
80008598:	18 90       	mov	r0,r12
8000859a:	50 3a       	stdsp	sp[0xc],r10
8000859c:	18 94       	mov	r4,r12
8000859e:	18 92       	mov	r2,r12
800085a0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800085a4:	16 97       	mov	r7,r11
800085a6:	50 7c       	stdsp	sp[0x1c],r12
800085a8:	4c dc       	lddpc	r12,800086dc <get_arg+0x190>
800085aa:	0f 3a       	ld.ub	r10,r7++
800085ac:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800085b0:	40 7c       	lddsp	r12,sp[0x1c]
800085b2:	1c 0c       	add	r12,lr
800085b4:	4c be       	lddpc	lr,800086e0 <get_arg+0x194>
800085b6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800085ba:	20 1e       	sub	lr,1
800085bc:	50 0e       	stdsp	sp[0x0],lr
800085be:	4c ae       	lddpc	lr,800086e4 <get_arg+0x198>
800085c0:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800085c4:	50 7c       	stdsp	sp[0x1c],r12
800085c6:	40 0c       	lddsp	r12,sp[0x0]
800085c8:	58 7c       	cp.w	r12,7
800085ca:	e0 8b 00 f6 	brhi	800087b6 <get_arg+0x26a>
800085ce:	4c 7e       	lddpc	lr,800086e8 <get_arg+0x19c>
800085d0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800085d4:	36 8b       	mov	r11,104
800085d6:	f6 0a 18 00 	cp.b	r10,r11
800085da:	e0 80 00 ee 	breq	800087b6 <get_arg+0x26a>
800085de:	37 1b       	mov	r11,113
800085e0:	f6 0a 18 00 	cp.b	r10,r11
800085e4:	c0 70       	breq	800085f2 <get_arg+0xa6>
800085e6:	34 cb       	mov	r11,76
800085e8:	f6 0a 18 00 	cp.b	r10,r11
800085ec:	c0 51       	brne	800085f6 <get_arg+0xaa>
800085ee:	a3 b4       	sbr	r4,0x3
800085f0:	ce 38       	rjmp	800087b6 <get_arg+0x26a>
800085f2:	a5 b4       	sbr	r4,0x5
800085f4:	ce 18       	rjmp	800087b6 <get_arg+0x26a>
800085f6:	0f 8b       	ld.ub	r11,r7[0x0]
800085f8:	36 ca       	mov	r10,108
800085fa:	f4 0b 18 00 	cp.b	r11,r10
800085fe:	c0 51       	brne	80008608 <get_arg+0xbc>
80008600:	a5 b4       	sbr	r4,0x5
80008602:	ee cb ff ff 	sub	r11,r7,-1
80008606:	cd 98       	rjmp	800087b8 <get_arg+0x26c>
80008608:	a5 a4       	sbr	r4,0x4
8000860a:	cd 68       	rjmp	800087b6 <get_arg+0x26a>
8000860c:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80008610:	36 7c       	mov	r12,103
80008612:	f8 0a 18 00 	cp.b	r10,r12
80008616:	e0 8b 00 27 	brhi	80008664 <get_arg+0x118>
8000861a:	36 5b       	mov	r11,101
8000861c:	f6 0a 18 00 	cp.b	r10,r11
80008620:	c4 82       	brcc	800086b0 <get_arg+0x164>
80008622:	34 fb       	mov	r11,79
80008624:	f6 0a 18 00 	cp.b	r10,r11
80008628:	c4 80       	breq	800086b8 <get_arg+0x16c>
8000862a:	e0 8b 00 0c 	brhi	80008642 <get_arg+0xf6>
8000862e:	34 5b       	mov	r11,69
80008630:	f6 0a 18 00 	cp.b	r10,r11
80008634:	c3 e0       	breq	800086b0 <get_arg+0x164>
80008636:	34 7b       	mov	r11,71
80008638:	f6 0a 18 00 	cp.b	r10,r11
8000863c:	c3 a0       	breq	800086b0 <get_arg+0x164>
8000863e:	34 4b       	mov	r11,68
80008640:	c0 88       	rjmp	80008650 <get_arg+0x104>
80008642:	35 8b       	mov	r11,88
80008644:	f6 0a 18 00 	cp.b	r10,r11
80008648:	c2 c0       	breq	800086a0 <get_arg+0x154>
8000864a:	e0 8b 00 07 	brhi	80008658 <get_arg+0x10c>
8000864e:	35 5b       	mov	r11,85
80008650:	f6 0a 18 00 	cp.b	r10,r11
80008654:	c3 51       	brne	800086be <get_arg+0x172>
80008656:	c3 18       	rjmp	800086b8 <get_arg+0x16c>
80008658:	36 3b       	mov	r11,99
8000865a:	f6 0a 18 00 	cp.b	r10,r11
8000865e:	c2 f0       	breq	800086bc <get_arg+0x170>
80008660:	36 4b       	mov	r11,100
80008662:	c0 e8       	rjmp	8000867e <get_arg+0x132>
80008664:	37 0b       	mov	r11,112
80008666:	f6 0a 18 00 	cp.b	r10,r11
8000866a:	c2 50       	breq	800086b4 <get_arg+0x168>
8000866c:	e0 8b 00 0d 	brhi	80008686 <get_arg+0x13a>
80008670:	36 eb       	mov	r11,110
80008672:	f6 0a 18 00 	cp.b	r10,r11
80008676:	c1 f0       	breq	800086b4 <get_arg+0x168>
80008678:	e0 8b 00 14 	brhi	800086a0 <get_arg+0x154>
8000867c:	36 9b       	mov	r11,105
8000867e:	f6 0a 18 00 	cp.b	r10,r11
80008682:	c1 e1       	brne	800086be <get_arg+0x172>
80008684:	c0 e8       	rjmp	800086a0 <get_arg+0x154>
80008686:	37 5b       	mov	r11,117
80008688:	f6 0a 18 00 	cp.b	r10,r11
8000868c:	c0 a0       	breq	800086a0 <get_arg+0x154>
8000868e:	37 8b       	mov	r11,120
80008690:	f6 0a 18 00 	cp.b	r10,r11
80008694:	c0 60       	breq	800086a0 <get_arg+0x154>
80008696:	37 3b       	mov	r11,115
80008698:	f6 0a 18 00 	cp.b	r10,r11
8000869c:	c1 11       	brne	800086be <get_arg+0x172>
8000869e:	c0 b8       	rjmp	800086b4 <get_arg+0x168>
800086a0:	ed b4 00 04 	bld	r4,0x4
800086a4:	c0 a0       	breq	800086b8 <get_arg+0x16c>
800086a6:	ed b4 00 05 	bld	r4,0x5
800086aa:	c0 91       	brne	800086bc <get_arg+0x170>
800086ac:	30 20       	mov	r0,2
800086ae:	c0 88       	rjmp	800086be <get_arg+0x172>
800086b0:	30 40       	mov	r0,4
800086b2:	c0 68       	rjmp	800086be <get_arg+0x172>
800086b4:	30 30       	mov	r0,3
800086b6:	c0 48       	rjmp	800086be <get_arg+0x172>
800086b8:	30 10       	mov	r0,1
800086ba:	c0 28       	rjmp	800086be <get_arg+0x172>
800086bc:	30 00       	mov	r0,0
800086be:	40 3b       	lddsp	r11,sp[0xc]
800086c0:	5b fb       	cp.w	r11,-1
800086c2:	c0 40       	breq	800086ca <get_arg+0x17e>
800086c4:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800086c8:	c7 78       	rjmp	800087b6 <get_arg+0x26a>
800086ca:	58 60       	cp.w	r0,6
800086cc:	e0 8b 00 75 	brhi	800087b6 <get_arg+0x26a>
800086d0:	6c 0a       	ld.w	r10,r6[0x0]
800086d2:	ea cc ff ff 	sub	r12,r5,-1
800086d6:	48 6e       	lddpc	lr,800086ec <get_arg+0x1a0>
800086d8:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800086dc:	80 00       	ld.sh	r0,r0[0x0]
800086de:	ed 98       	*unknown*
800086e0:	80 00       	ld.sh	r0,r0[0x0]
800086e2:	ec d0 80 00 	satsub.w	r0,r6,-32768
800086e6:	ec 64 80 00 	mov	r4,819200
800086ea:	ea c4 80 00 	sub	r4,r5,-32768
800086ee:	ea e4 f4 cb 	ld.d	r4,r5[-2869]
800086f2:	ff f8 8d 0b 	st.hls	pc[0x216],r8
800086f6:	f4 ea 00 00 	ld.d	r10,r10[0]
800086fa:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800086fe:	c0 f8       	rjmp	8000871c <get_arg+0x1d0>
80008700:	f4 cb ff fc 	sub	r11,r10,-4
80008704:	8d 0b       	st.w	r6[0x0],r11
80008706:	74 0a       	ld.w	r10,r10[0x0]
80008708:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000870c:	c0 88       	rjmp	8000871c <get_arg+0x1d0>
8000870e:	f4 cb ff f8 	sub	r11,r10,-8
80008712:	8d 0b       	st.w	r6[0x0],r11
80008714:	f4 ea 00 00 	ld.d	r10,r10[0]
80008718:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000871c:	0e 9b       	mov	r11,r7
8000871e:	18 95       	mov	r5,r12
80008720:	c4 c8       	rjmp	800087b8 <get_arg+0x26c>
80008722:	62 0a       	ld.w	r10,r1[0x0]
80008724:	5b fa       	cp.w	r10,-1
80008726:	c0 a1       	brne	8000873a <get_arg+0x1ee>
80008728:	50 19       	stdsp	sp[0x4],r9
8000872a:	50 28       	stdsp	sp[0x8],r8
8000872c:	e0 6a 00 80 	mov	r10,128
80008730:	30 0b       	mov	r11,0
80008732:	02 9c       	mov	r12,r1
80008734:	ce 7e       	rcall	80008502 <memset>
80008736:	40 28       	lddsp	r8,sp[0x8]
80008738:	40 19       	lddsp	r9,sp[0x4]
8000873a:	e4 cc 00 01 	sub	r12,r2,1
8000873e:	0e 9b       	mov	r11,r7
80008740:	50 3c       	stdsp	sp[0xc],r12
80008742:	f2 0c 0c 49 	max	r9,r9,r12
80008746:	c3 98       	rjmp	800087b8 <get_arg+0x26c>
80008748:	62 0a       	ld.w	r10,r1[0x0]
8000874a:	5b fa       	cp.w	r10,-1
8000874c:	c0 a1       	brne	80008760 <get_arg+0x214>
8000874e:	50 19       	stdsp	sp[0x4],r9
80008750:	50 28       	stdsp	sp[0x8],r8
80008752:	e0 6a 00 80 	mov	r10,128
80008756:	30 0b       	mov	r11,0
80008758:	02 9c       	mov	r12,r1
8000875a:	cd 4e       	rcall	80008502 <memset>
8000875c:	40 28       	lddsp	r8,sp[0x8]
8000875e:	40 19       	lddsp	r9,sp[0x4]
80008760:	20 12       	sub	r2,1
80008762:	30 0a       	mov	r10,0
80008764:	0e 9b       	mov	r11,r7
80008766:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000876a:	f2 02 0c 49 	max	r9,r9,r2
8000876e:	c2 58       	rjmp	800087b8 <get_arg+0x26c>
80008770:	16 97       	mov	r7,r11
80008772:	6c 0a       	ld.w	r10,r6[0x0]
80008774:	f4 cb ff fc 	sub	r11,r10,-4
80008778:	8d 0b       	st.w	r6[0x0],r11
8000877a:	74 0a       	ld.w	r10,r10[0x0]
8000877c:	0e 9b       	mov	r11,r7
8000877e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80008782:	2f f5       	sub	r5,-1
80008784:	c1 a8       	rjmp	800087b8 <get_arg+0x26c>
80008786:	f4 c2 00 30 	sub	r2,r10,48
8000878a:	c0 68       	rjmp	80008796 <get_arg+0x24a>
8000878c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80008790:	2f f7       	sub	r7,-1
80008792:	f4 02 00 12 	add	r2,r10,r2<<0x1
80008796:	0f 8a       	ld.ub	r10,r7[0x0]
80008798:	58 0a       	cp.w	r10,0
8000879a:	c0 e0       	breq	800087b6 <get_arg+0x26a>
8000879c:	23 0a       	sub	r10,48
8000879e:	58 9a       	cp.w	r10,9
800087a0:	fe 98 ff f6 	brls	8000878c <get_arg+0x240>
800087a4:	c0 98       	rjmp	800087b6 <get_arg+0x26a>
800087a6:	2f f7       	sub	r7,-1
800087a8:	0f 8a       	ld.ub	r10,r7[0x0]
800087aa:	58 0a       	cp.w	r10,0
800087ac:	c0 50       	breq	800087b6 <get_arg+0x26a>
800087ae:	23 0a       	sub	r10,48
800087b0:	58 9a       	cp.w	r10,9
800087b2:	fe 98 ff fa 	brls	800087a6 <get_arg+0x25a>
800087b6:	0e 9b       	mov	r11,r7
800087b8:	40 7c       	lddsp	r12,sp[0x1c]
800087ba:	30 ba       	mov	r10,11
800087bc:	f4 0c 18 00 	cp.b	r12,r10
800087c0:	fe 91 fe f0 	brne	800085a0 <get_arg+0x54>
800087c4:	40 42       	lddsp	r2,sp[0x10]
800087c6:	17 8c       	ld.ub	r12,r11[0x0]
800087c8:	0a 32       	cp.w	r2,r5
800087ca:	5f 4a       	srge	r10
800087cc:	f0 0c 18 00 	cp.b	r12,r8
800087d0:	5f 1c       	srne	r12
800087d2:	f9 ea 00 0a 	and	r10,r12,r10
800087d6:	f0 0a 18 00 	cp.b	r10,r8
800087da:	fe 91 fe cd 	brne	80008574 <get_arg+0x28>
800087de:	30 08       	mov	r8,0
800087e0:	40 4e       	lddsp	lr,sp[0x10]
800087e2:	17 8a       	ld.ub	r10,r11[0x0]
800087e4:	e2 05 00 21 	add	r1,r1,r5<<0x2
800087e8:	f0 0a 18 00 	cp.b	r10,r8
800087ec:	fc 09 17 10 	movne	r9,lr
800087f0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800087f4:	06 9e       	mov	lr,r3
800087f6:	c2 a8       	rjmp	8000884a <get_arg+0x2fe>
800087f8:	62 0a       	ld.w	r10,r1[0x0]
800087fa:	58 3a       	cp.w	r10,3
800087fc:	c1 e0       	breq	80008838 <get_arg+0x2ec>
800087fe:	e0 89 00 07 	brgt	8000880c <get_arg+0x2c0>
80008802:	58 1a       	cp.w	r10,1
80008804:	c1 a0       	breq	80008838 <get_arg+0x2ec>
80008806:	58 2a       	cp.w	r10,2
80008808:	c1 81       	brne	80008838 <get_arg+0x2ec>
8000880a:	c0 58       	rjmp	80008814 <get_arg+0x2c8>
8000880c:	58 5a       	cp.w	r10,5
8000880e:	c0 c0       	breq	80008826 <get_arg+0x2da>
80008810:	c0 b5       	brlt	80008826 <get_arg+0x2da>
80008812:	c1 38       	rjmp	80008838 <get_arg+0x2ec>
80008814:	6c 0a       	ld.w	r10,r6[0x0]
80008816:	f4 cc ff f8 	sub	r12,r10,-8
8000881a:	8d 0c       	st.w	r6[0x0],r12
8000881c:	f4 e2 00 00 	ld.d	r2,r10[0]
80008820:	f0 e3 00 00 	st.d	r8[0],r2
80008824:	c1 08       	rjmp	80008844 <get_arg+0x2f8>
80008826:	6c 0a       	ld.w	r10,r6[0x0]
80008828:	f4 cc ff f8 	sub	r12,r10,-8
8000882c:	8d 0c       	st.w	r6[0x0],r12
8000882e:	f4 e2 00 00 	ld.d	r2,r10[0]
80008832:	f0 e3 00 00 	st.d	r8[0],r2
80008836:	c0 78       	rjmp	80008844 <get_arg+0x2f8>
80008838:	6c 0a       	ld.w	r10,r6[0x0]
8000883a:	f4 cc ff fc 	sub	r12,r10,-4
8000883e:	8d 0c       	st.w	r6[0x0],r12
80008840:	74 0a       	ld.w	r10,r10[0x0]
80008842:	91 0a       	st.w	r8[0x0],r10
80008844:	2f f5       	sub	r5,-1
80008846:	2f 88       	sub	r8,-8
80008848:	2f c1       	sub	r1,-4
8000884a:	12 35       	cp.w	r5,r9
8000884c:	fe 9a ff d6 	brle	800087f8 <get_arg+0x2ac>
80008850:	1c 93       	mov	r3,lr
80008852:	40 52       	lddsp	r2,sp[0x14]
80008854:	40 6e       	lddsp	lr,sp[0x18]
80008856:	85 05       	st.w	r2[0x0],r5
80008858:	9d 0b       	st.w	lr[0x0],r11
8000885a:	40 4b       	lddsp	r11,sp[0x10]
8000885c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80008860:	2f 8d       	sub	sp,-32
80008862:	d8 32       	popm	r0-r7,pc

80008864 <__sprint_r>:
80008864:	d4 21       	pushm	r4-r7,lr
80008866:	14 97       	mov	r7,r10
80008868:	74 28       	ld.w	r8,r10[0x8]
8000886a:	58 08       	cp.w	r8,0
8000886c:	c0 41       	brne	80008874 <__sprint_r+0x10>
8000886e:	95 18       	st.w	r10[0x4],r8
80008870:	10 9c       	mov	r12,r8
80008872:	d8 22       	popm	r4-r7,pc
80008874:	e0 a0 18 c2 	rcall	8000b9f8 <__sfvwrite_r>
80008878:	30 08       	mov	r8,0
8000887a:	8f 18       	st.w	r7[0x4],r8
8000887c:	8f 28       	st.w	r7[0x8],r8
8000887e:	d8 22       	popm	r4-r7,pc

80008880 <_vfprintf_r>:
80008880:	d4 31       	pushm	r0-r7,lr
80008882:	fa cd 06 bc 	sub	sp,sp,1724
80008886:	51 09       	stdsp	sp[0x40],r9
80008888:	16 91       	mov	r1,r11
8000888a:	14 97       	mov	r7,r10
8000888c:	18 95       	mov	r5,r12
8000888e:	e0 a0 1a 2d 	rcall	8000bce8 <_localeconv_r>
80008892:	78 0c       	ld.w	r12,r12[0x0]
80008894:	50 cc       	stdsp	sp[0x30],r12
80008896:	58 05       	cp.w	r5,0
80008898:	c0 70       	breq	800088a6 <_vfprintf_r+0x26>
8000889a:	6a 68       	ld.w	r8,r5[0x18]
8000889c:	58 08       	cp.w	r8,0
8000889e:	c0 41       	brne	800088a6 <_vfprintf_r+0x26>
800088a0:	0a 9c       	mov	r12,r5
800088a2:	e0 a0 17 47 	rcall	8000b730 <__sinit>
800088a6:	4c f8       	lddpc	r8,800089e0 <_vfprintf_r+0x160>
800088a8:	10 31       	cp.w	r1,r8
800088aa:	c0 31       	brne	800088b0 <_vfprintf_r+0x30>
800088ac:	6a 01       	ld.w	r1,r5[0x0]
800088ae:	c0 a8       	rjmp	800088c2 <_vfprintf_r+0x42>
800088b0:	4c d8       	lddpc	r8,800089e4 <_vfprintf_r+0x164>
800088b2:	10 31       	cp.w	r1,r8
800088b4:	c0 31       	brne	800088ba <_vfprintf_r+0x3a>
800088b6:	6a 11       	ld.w	r1,r5[0x4]
800088b8:	c0 58       	rjmp	800088c2 <_vfprintf_r+0x42>
800088ba:	4c c8       	lddpc	r8,800089e8 <_vfprintf_r+0x168>
800088bc:	10 31       	cp.w	r1,r8
800088be:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800088c2:	82 68       	ld.sh	r8,r1[0xc]
800088c4:	ed b8 00 03 	bld	r8,0x3
800088c8:	c0 41       	brne	800088d0 <_vfprintf_r+0x50>
800088ca:	62 48       	ld.w	r8,r1[0x10]
800088cc:	58 08       	cp.w	r8,0
800088ce:	c0 71       	brne	800088dc <_vfprintf_r+0x5c>
800088d0:	02 9b       	mov	r11,r1
800088d2:	0a 9c       	mov	r12,r5
800088d4:	e0 a0 0f 64 	rcall	8000a79c <__swsetup_r>
800088d8:	e0 81 0f 5c 	brne	8000a790 <_vfprintf_r+0x1f10>
800088dc:	82 68       	ld.sh	r8,r1[0xc]
800088de:	10 99       	mov	r9,r8
800088e0:	e2 19 00 1a 	andl	r9,0x1a,COH
800088e4:	58 a9       	cp.w	r9,10
800088e6:	c3 c1       	brne	8000895e <_vfprintf_r+0xde>
800088e8:	82 79       	ld.sh	r9,r1[0xe]
800088ea:	30 0a       	mov	r10,0
800088ec:	f4 09 19 00 	cp.h	r9,r10
800088f0:	c3 75       	brlt	8000895e <_vfprintf_r+0xde>
800088f2:	a1 d8       	cbr	r8,0x1
800088f4:	fb 58 05 d0 	st.h	sp[1488],r8
800088f8:	62 88       	ld.w	r8,r1[0x20]
800088fa:	fb 48 05 e4 	st.w	sp[1508],r8
800088fe:	62 a8       	ld.w	r8,r1[0x28]
80008900:	fb 48 05 ec 	st.w	sp[1516],r8
80008904:	fa c8 ff bc 	sub	r8,sp,-68
80008908:	fb 48 05 d4 	st.w	sp[1492],r8
8000890c:	fb 48 05 c4 	st.w	sp[1476],r8
80008910:	e0 68 04 00 	mov	r8,1024
80008914:	fb 48 05 d8 	st.w	sp[1496],r8
80008918:	fb 48 05 cc 	st.w	sp[1484],r8
8000891c:	30 08       	mov	r8,0
8000891e:	fb 59 05 d2 	st.h	sp[1490],r9
80008922:	0e 9a       	mov	r10,r7
80008924:	41 09       	lddsp	r9,sp[0x40]
80008926:	fa c7 fa 3c 	sub	r7,sp,-1476
8000892a:	fb 48 05 dc 	st.w	sp[1500],r8
8000892e:	0a 9c       	mov	r12,r5
80008930:	0e 9b       	mov	r11,r7
80008932:	ca 7f       	rcall	80008880 <_vfprintf_r>
80008934:	50 bc       	stdsp	sp[0x2c],r12
80008936:	c0 95       	brlt	80008948 <_vfprintf_r+0xc8>
80008938:	0e 9b       	mov	r11,r7
8000893a:	0a 9c       	mov	r12,r5
8000893c:	e0 a0 16 1e 	rcall	8000b578 <_fflush_r>
80008940:	40 be       	lddsp	lr,sp[0x2c]
80008942:	f9 be 01 ff 	movne	lr,-1
80008946:	50 be       	stdsp	sp[0x2c],lr
80008948:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000894c:	ed b8 00 06 	bld	r8,0x6
80008950:	e0 81 0f 22 	brne	8000a794 <_vfprintf_r+0x1f14>
80008954:	82 68       	ld.sh	r8,r1[0xc]
80008956:	a7 a8       	sbr	r8,0x6
80008958:	a2 68       	st.h	r1[0xc],r8
8000895a:	e0 8f 0f 1d 	bral	8000a794 <_vfprintf_r+0x1f14>
8000895e:	30 08       	mov	r8,0
80008960:	fb 48 06 b4 	st.w	sp[1716],r8
80008964:	fb 48 06 90 	st.w	sp[1680],r8
80008968:	fb 48 06 8c 	st.w	sp[1676],r8
8000896c:	fb 48 06 b0 	st.w	sp[1712],r8
80008970:	30 08       	mov	r8,0
80008972:	30 09       	mov	r9,0
80008974:	50 a7       	stdsp	sp[0x28],r7
80008976:	50 78       	stdsp	sp[0x1c],r8
80008978:	fa c4 f9 e0 	sub	r4,sp,-1568
8000897c:	3f f8       	mov	r8,-1
8000897e:	50 59       	stdsp	sp[0x14],r9
80008980:	fb 44 06 88 	st.w	sp[1672],r4
80008984:	fb 48 05 44 	st.w	sp[1348],r8
80008988:	12 9c       	mov	r12,r9
8000898a:	50 69       	stdsp	sp[0x18],r9
8000898c:	50 d9       	stdsp	sp[0x34],r9
8000898e:	50 e9       	stdsp	sp[0x38],r9
80008990:	50 b9       	stdsp	sp[0x2c],r9
80008992:	12 97       	mov	r7,r9
80008994:	40 a2       	lddsp	r2,sp[0x28]
80008996:	32 5a       	mov	r10,37
80008998:	30 08       	mov	r8,0
8000899a:	c0 28       	rjmp	8000899e <_vfprintf_r+0x11e>
8000899c:	2f f2       	sub	r2,-1
8000899e:	05 89       	ld.ub	r9,r2[0x0]
800089a0:	f0 09 18 00 	cp.b	r9,r8
800089a4:	5f 1b       	srne	r11
800089a6:	f4 09 18 00 	cp.b	r9,r10
800089aa:	5f 19       	srne	r9
800089ac:	f3 eb 00 0b 	and	r11,r9,r11
800089b0:	f0 0b 18 00 	cp.b	r11,r8
800089b4:	cf 41       	brne	8000899c <_vfprintf_r+0x11c>
800089b6:	40 ab       	lddsp	r11,sp[0x28]
800089b8:	e4 0b 01 06 	sub	r6,r2,r11
800089bc:	c2 40       	breq	80008a04 <_vfprintf_r+0x184>
800089be:	fa f8 06 90 	ld.w	r8,sp[1680]
800089c2:	0c 08       	add	r8,r6
800089c4:	89 0b       	st.w	r4[0x0],r11
800089c6:	fb 48 06 90 	st.w	sp[1680],r8
800089ca:	89 16       	st.w	r4[0x4],r6
800089cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800089d0:	2f f8       	sub	r8,-1
800089d2:	fb 48 06 8c 	st.w	sp[1676],r8
800089d6:	58 78       	cp.w	r8,7
800089d8:	e0 89 00 0a 	brgt	800089ec <_vfprintf_r+0x16c>
800089dc:	2f 84       	sub	r4,-8
800089de:	c1 08       	rjmp	800089fe <_vfprintf_r+0x17e>
800089e0:	80 00       	ld.sh	r0,r0[0x0]
800089e2:	ee a8       	*unknown*
800089e4:	80 00       	ld.sh	r0,r0[0x0]
800089e6:	ee c8 80 00 	sub	r8,r7,-32768
800089ea:	ee e8 fa ca 	ld.d	r8,r7[-1334]
800089ee:	f9 78 02 9b 	stcond	r12[667],r8
800089f2:	0a 9c       	mov	r12,r5
800089f4:	c3 8f       	rcall	80008864 <__sprint_r>
800089f6:	e0 81 0e c9 	brne	8000a788 <_vfprintf_r+0x1f08>
800089fa:	fa c4 f9 e0 	sub	r4,sp,-1568
800089fe:	40 ba       	lddsp	r10,sp[0x2c]
80008a00:	0c 0a       	add	r10,r6
80008a02:	50 ba       	stdsp	sp[0x2c],r10
80008a04:	05 89       	ld.ub	r9,r2[0x0]
80008a06:	30 08       	mov	r8,0
80008a08:	f0 09 18 00 	cp.b	r9,r8
80008a0c:	e0 80 0e ae 	breq	8000a768 <_vfprintf_r+0x1ee8>
80008a10:	30 09       	mov	r9,0
80008a12:	fb 68 06 bb 	st.b	sp[1723],r8
80008a16:	0e 96       	mov	r6,r7
80008a18:	e4 c8 ff ff 	sub	r8,r2,-1
80008a1c:	3f fe       	mov	lr,-1
80008a1e:	50 94       	stdsp	sp[0x24],r4
80008a20:	50 41       	stdsp	sp[0x10],r1
80008a22:	0e 94       	mov	r4,r7
80008a24:	04 91       	mov	r1,r2
80008a26:	50 89       	stdsp	sp[0x20],r9
80008a28:	50 a8       	stdsp	sp[0x28],r8
80008a2a:	50 2e       	stdsp	sp[0x8],lr
80008a2c:	50 39       	stdsp	sp[0xc],r9
80008a2e:	12 93       	mov	r3,r9
80008a30:	12 90       	mov	r0,r9
80008a32:	10 97       	mov	r7,r8
80008a34:	0a 92       	mov	r2,r5
80008a36:	c0 78       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008a38:	3f fc       	mov	r12,-1
80008a3a:	0a 97       	mov	r7,r5
80008a3c:	50 2c       	stdsp	sp[0x8],r12
80008a3e:	c0 38       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008a40:	30 0b       	mov	r11,0
80008a42:	50 3b       	stdsp	sp[0xc],r11
80008a44:	0f 38       	ld.ub	r8,r7++
80008a46:	c0 28       	rjmp	80008a4a <_vfprintf_r+0x1ca>
80008a48:	12 90       	mov	r0,r9
80008a4a:	f0 c9 00 20 	sub	r9,r8,32
80008a4e:	e0 49 00 58 	cp.w	r9,88
80008a52:	e0 8b 0a 33 	brhi	80009eb8 <_vfprintf_r+0x1638>
80008a56:	4d 9a       	lddpc	r10,80008bb8 <_vfprintf_r+0x338>
80008a58:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80008a5c:	50 a7       	stdsp	sp[0x28],r7
80008a5e:	50 80       	stdsp	sp[0x20],r0
80008a60:	0c 97       	mov	r7,r6
80008a62:	04 95       	mov	r5,r2
80008a64:	08 96       	mov	r6,r4
80008a66:	02 92       	mov	r2,r1
80008a68:	4d 59       	lddpc	r9,80008bbc <_vfprintf_r+0x33c>
80008a6a:	40 94       	lddsp	r4,sp[0x24]
80008a6c:	10 90       	mov	r0,r8
80008a6e:	40 41       	lddsp	r1,sp[0x10]
80008a70:	50 d9       	stdsp	sp[0x34],r9
80008a72:	e0 8f 08 95 	bral	80009b9c <_vfprintf_r+0x131c>
80008a76:	30 08       	mov	r8,0
80008a78:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80008a7c:	f0 09 18 00 	cp.b	r9,r8
80008a80:	ce 21       	brne	80008a44 <_vfprintf_r+0x1c4>
80008a82:	32 08       	mov	r8,32
80008a84:	c6 e8       	rjmp	80008b60 <_vfprintf_r+0x2e0>
80008a86:	a1 a3       	sbr	r3,0x0
80008a88:	cd eb       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008a8a:	0f 89       	ld.ub	r9,r7[0x0]
80008a8c:	f2 c8 00 30 	sub	r8,r9,48
80008a90:	58 98       	cp.w	r8,9
80008a92:	e0 8b 00 1d 	brhi	80008acc <_vfprintf_r+0x24c>
80008a96:	ee c8 ff ff 	sub	r8,r7,-1
80008a9a:	30 0b       	mov	r11,0
80008a9c:	23 09       	sub	r9,48
80008a9e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80008aa2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80008aa6:	11 39       	ld.ub	r9,r8++
80008aa8:	f2 ca 00 30 	sub	r10,r9,48
80008aac:	58 9a       	cp.w	r10,9
80008aae:	fe 98 ff f7 	brls	80008a9c <_vfprintf_r+0x21c>
80008ab2:	e0 49 00 24 	cp.w	r9,36
80008ab6:	cc 51       	brne	80008a40 <_vfprintf_r+0x1c0>
80008ab8:	e0 4b 00 20 	cp.w	r11,32
80008abc:	e0 89 0e 65 	brgt	8000a786 <_vfprintf_r+0x1f06>
80008ac0:	20 1b       	sub	r11,1
80008ac2:	fa f9 06 b4 	ld.w	r9,sp[1716]
80008ac6:	12 3b       	cp.w	r11,r9
80008ac8:	c0 95       	brlt	80008ada <_vfprintf_r+0x25a>
80008aca:	c1 08       	rjmp	80008aea <_vfprintf_r+0x26a>
80008acc:	fa f9 06 b4 	ld.w	r9,sp[1716]
80008ad0:	ec ca ff ff 	sub	r10,r6,-1
80008ad4:	12 36       	cp.w	r6,r9
80008ad6:	c1 f5       	brlt	80008b14 <_vfprintf_r+0x294>
80008ad8:	c2 68       	rjmp	80008b24 <_vfprintf_r+0x2a4>
80008ada:	fa ce f9 44 	sub	lr,sp,-1724
80008ade:	10 97       	mov	r7,r8
80008ae0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80008ae4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80008ae8:	c3 58       	rjmp	80008b52 <_vfprintf_r+0x2d2>
80008aea:	10 97       	mov	r7,r8
80008aec:	fa c8 f9 50 	sub	r8,sp,-1712
80008af0:	1a d8       	st.w	--sp,r8
80008af2:	fa c8 fa b8 	sub	r8,sp,-1352
80008af6:	1a d8       	st.w	--sp,r8
80008af8:	fa c8 fb b4 	sub	r8,sp,-1100
80008afc:	02 9a       	mov	r10,r1
80008afe:	1a d8       	st.w	--sp,r8
80008b00:	04 9c       	mov	r12,r2
80008b02:	fa c8 f9 40 	sub	r8,sp,-1728
80008b06:	fa c9 ff b4 	sub	r9,sp,-76
80008b0a:	fe b0 fd 21 	rcall	8000854c <get_arg>
80008b0e:	2f dd       	sub	sp,-12
80008b10:	78 00       	ld.w	r0,r12[0x0]
80008b12:	c2 08       	rjmp	80008b52 <_vfprintf_r+0x2d2>
80008b14:	fa cc f9 44 	sub	r12,sp,-1724
80008b18:	14 96       	mov	r6,r10
80008b1a:	f8 04 00 38 	add	r8,r12,r4<<0x3
80008b1e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80008b22:	c1 88       	rjmp	80008b52 <_vfprintf_r+0x2d2>
80008b24:	41 08       	lddsp	r8,sp[0x40]
80008b26:	59 f9       	cp.w	r9,31
80008b28:	e0 89 00 11 	brgt	80008b4a <_vfprintf_r+0x2ca>
80008b2c:	f0 cb ff fc 	sub	r11,r8,-4
80008b30:	51 0b       	stdsp	sp[0x40],r11
80008b32:	70 00       	ld.w	r0,r8[0x0]
80008b34:	fa cb f9 44 	sub	r11,sp,-1724
80008b38:	f6 09 00 38 	add	r8,r11,r9<<0x3
80008b3c:	f1 40 fd 88 	st.w	r8[-632],r0
80008b40:	2f f9       	sub	r9,-1
80008b42:	14 96       	mov	r6,r10
80008b44:	fb 49 06 b4 	st.w	sp[1716],r9
80008b48:	c0 58       	rjmp	80008b52 <_vfprintf_r+0x2d2>
80008b4a:	70 00       	ld.w	r0,r8[0x0]
80008b4c:	14 96       	mov	r6,r10
80008b4e:	2f c8       	sub	r8,-4
80008b50:	51 08       	stdsp	sp[0x40],r8
80008b52:	58 00       	cp.w	r0,0
80008b54:	fe 94 ff 78 	brge	80008a44 <_vfprintf_r+0x1c4>
80008b58:	5c 30       	neg	r0
80008b5a:	a3 a3       	sbr	r3,0x2
80008b5c:	c7 4b       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008b5e:	32 b8       	mov	r8,43
80008b60:	fb 68 06 bb 	st.b	sp[1723],r8
80008b64:	c7 0b       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008b66:	0f 38       	ld.ub	r8,r7++
80008b68:	e0 48 00 2a 	cp.w	r8,42
80008b6c:	c0 30       	breq	80008b72 <_vfprintf_r+0x2f2>
80008b6e:	30 09       	mov	r9,0
80008b70:	c7 d8       	rjmp	80008c6a <_vfprintf_r+0x3ea>
80008b72:	0f 88       	ld.ub	r8,r7[0x0]
80008b74:	f0 c9 00 30 	sub	r9,r8,48
80008b78:	58 99       	cp.w	r9,9
80008b7a:	e0 8b 00 23 	brhi	80008bc0 <_vfprintf_r+0x340>
80008b7e:	ee c5 ff ff 	sub	r5,r7,-1
80008b82:	30 0b       	mov	r11,0
80008b84:	23 08       	sub	r8,48
80008b86:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80008b8a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80008b8e:	0b 38       	ld.ub	r8,r5++
80008b90:	f0 c9 00 30 	sub	r9,r8,48
80008b94:	58 99       	cp.w	r9,9
80008b96:	fe 98 ff f7 	brls	80008b84 <_vfprintf_r+0x304>
80008b9a:	e0 48 00 24 	cp.w	r8,36
80008b9e:	fe 91 ff 51 	brne	80008a40 <_vfprintf_r+0x1c0>
80008ba2:	e0 4b 00 20 	cp.w	r11,32
80008ba6:	e0 89 0d f0 	brgt	8000a786 <_vfprintf_r+0x1f06>
80008baa:	20 1b       	sub	r11,1
80008bac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008bb0:	10 3b       	cp.w	r11,r8
80008bb2:	c0 e5       	brlt	80008bce <_vfprintf_r+0x34e>
80008bb4:	c1 58       	rjmp	80008bde <_vfprintf_r+0x35e>
80008bb6:	d7 03       	nop
80008bb8:	80 00       	ld.sh	r0,r0[0x0]
80008bba:	eb 00 80 00 	ld.sh	r0,r5[-32768]
80008bbe:	ed 3c fa fa 	ld.ub	r12,r6[-1286]
80008bc2:	06 b4       	st.h	r3++,r4
80008bc4:	ec c9 ff ff 	sub	r9,r6,-1
80008bc8:	14 36       	cp.w	r6,r10
80008bca:	c1 f5       	brlt	80008c08 <_vfprintf_r+0x388>
80008bcc:	c2 88       	rjmp	80008c1c <_vfprintf_r+0x39c>
80008bce:	fa ca f9 44 	sub	r10,sp,-1724
80008bd2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80008bd6:	f6 fb fd 88 	ld.w	r11,r11[-632]
80008bda:	50 2b       	stdsp	sp[0x8],r11
80008bdc:	c3 c8       	rjmp	80008c54 <_vfprintf_r+0x3d4>
80008bde:	fa c8 f9 50 	sub	r8,sp,-1712
80008be2:	1a d8       	st.w	--sp,r8
80008be4:	fa c8 fa b8 	sub	r8,sp,-1352
80008be8:	1a d8       	st.w	--sp,r8
80008bea:	fa c8 fb b4 	sub	r8,sp,-1100
80008bee:	02 9a       	mov	r10,r1
80008bf0:	1a d8       	st.w	--sp,r8
80008bf2:	04 9c       	mov	r12,r2
80008bf4:	fa c8 f9 40 	sub	r8,sp,-1728
80008bf8:	fa c9 ff b4 	sub	r9,sp,-76
80008bfc:	fe b0 fc a8 	rcall	8000854c <get_arg>
80008c00:	2f dd       	sub	sp,-12
80008c02:	78 0c       	ld.w	r12,r12[0x0]
80008c04:	50 2c       	stdsp	sp[0x8],r12
80008c06:	c2 78       	rjmp	80008c54 <_vfprintf_r+0x3d4>
80008c08:	12 96       	mov	r6,r9
80008c0a:	0e 95       	mov	r5,r7
80008c0c:	fa c9 f9 44 	sub	r9,sp,-1724
80008c10:	f2 04 00 38 	add	r8,r9,r4<<0x3
80008c14:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80008c18:	50 28       	stdsp	sp[0x8],r8
80008c1a:	c1 d8       	rjmp	80008c54 <_vfprintf_r+0x3d4>
80008c1c:	41 08       	lddsp	r8,sp[0x40]
80008c1e:	59 fa       	cp.w	r10,31
80008c20:	e0 89 00 14 	brgt	80008c48 <_vfprintf_r+0x3c8>
80008c24:	f0 cb ff fc 	sub	r11,r8,-4
80008c28:	70 08       	ld.w	r8,r8[0x0]
80008c2a:	51 0b       	stdsp	sp[0x40],r11
80008c2c:	50 28       	stdsp	sp[0x8],r8
80008c2e:	fa c6 f9 44 	sub	r6,sp,-1724
80008c32:	40 2e       	lddsp	lr,sp[0x8]
80008c34:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80008c38:	f1 4e fd 88 	st.w	r8[-632],lr
80008c3c:	2f fa       	sub	r10,-1
80008c3e:	0e 95       	mov	r5,r7
80008c40:	fb 4a 06 b4 	st.w	sp[1716],r10
80008c44:	12 96       	mov	r6,r9
80008c46:	c0 78       	rjmp	80008c54 <_vfprintf_r+0x3d4>
80008c48:	70 0c       	ld.w	r12,r8[0x0]
80008c4a:	0e 95       	mov	r5,r7
80008c4c:	2f c8       	sub	r8,-4
80008c4e:	50 2c       	stdsp	sp[0x8],r12
80008c50:	12 96       	mov	r6,r9
80008c52:	51 08       	stdsp	sp[0x40],r8
80008c54:	40 2b       	lddsp	r11,sp[0x8]
80008c56:	58 0b       	cp.w	r11,0
80008c58:	fe 95 fe f0 	brlt	80008a38 <_vfprintf_r+0x1b8>
80008c5c:	0a 97       	mov	r7,r5
80008c5e:	cf 3a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008c60:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008c64:	0f 38       	ld.ub	r8,r7++
80008c66:	f4 09 00 19 	add	r9,r10,r9<<0x1
80008c6a:	f0 ca 00 30 	sub	r10,r8,48
80008c6e:	58 9a       	cp.w	r10,9
80008c70:	fe 98 ff f8 	brls	80008c60 <_vfprintf_r+0x3e0>
80008c74:	3f fa       	mov	r10,-1
80008c76:	f2 0a 0c 49 	max	r9,r9,r10
80008c7a:	50 29       	stdsp	sp[0x8],r9
80008c7c:	ce 7a       	rjmp	80008a4a <_vfprintf_r+0x1ca>
80008c7e:	a7 b3       	sbr	r3,0x7
80008c80:	ce 2a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008c82:	30 09       	mov	r9,0
80008c84:	23 08       	sub	r8,48
80008c86:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008c8a:	f0 09 00 19 	add	r9,r8,r9<<0x1
80008c8e:	0f 38       	ld.ub	r8,r7++
80008c90:	f0 ca 00 30 	sub	r10,r8,48
80008c94:	58 9a       	cp.w	r10,9
80008c96:	fe 98 ff f7 	brls	80008c84 <_vfprintf_r+0x404>
80008c9a:	e0 48 00 24 	cp.w	r8,36
80008c9e:	fe 91 fe d5 	brne	80008a48 <_vfprintf_r+0x1c8>
80008ca2:	e0 49 00 20 	cp.w	r9,32
80008ca6:	e0 89 0d 70 	brgt	8000a786 <_vfprintf_r+0x1f06>
80008caa:	f2 c4 00 01 	sub	r4,r9,1
80008cae:	30 19       	mov	r9,1
80008cb0:	50 39       	stdsp	sp[0xc],r9
80008cb2:	cc 9a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008cb4:	a3 b3       	sbr	r3,0x3
80008cb6:	cc 7a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008cb8:	a7 a3       	sbr	r3,0x6
80008cba:	cc 5a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008cbc:	0f 88       	ld.ub	r8,r7[0x0]
80008cbe:	36 ce       	mov	lr,108
80008cc0:	fc 08 18 00 	cp.b	r8,lr
80008cc4:	c0 41       	brne	80008ccc <_vfprintf_r+0x44c>
80008cc6:	2f f7       	sub	r7,-1
80008cc8:	a5 b3       	sbr	r3,0x5
80008cca:	cb da       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008ccc:	a5 a3       	sbr	r3,0x4
80008cce:	cb ba       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008cd0:	a5 b3       	sbr	r3,0x5
80008cd2:	cb 9a       	rjmp	80008a44 <_vfprintf_r+0x1c4>
80008cd4:	50 a7       	stdsp	sp[0x28],r7
80008cd6:	50 80       	stdsp	sp[0x20],r0
80008cd8:	0c 97       	mov	r7,r6
80008cda:	10 90       	mov	r0,r8
80008cdc:	08 96       	mov	r6,r4
80008cde:	04 95       	mov	r5,r2
80008ce0:	40 94       	lddsp	r4,sp[0x24]
80008ce2:	02 92       	mov	r2,r1
80008ce4:	0e 99       	mov	r9,r7
80008ce6:	40 41       	lddsp	r1,sp[0x10]
80008ce8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008cec:	40 3c       	lddsp	r12,sp[0xc]
80008cee:	58 0c       	cp.w	r12,0
80008cf0:	c1 d0       	breq	80008d2a <_vfprintf_r+0x4aa>
80008cf2:	10 36       	cp.w	r6,r8
80008cf4:	c0 64       	brge	80008d00 <_vfprintf_r+0x480>
80008cf6:	fa cb f9 44 	sub	r11,sp,-1724
80008cfa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008cfe:	c1 d8       	rjmp	80008d38 <_vfprintf_r+0x4b8>
80008d00:	fa c8 f9 50 	sub	r8,sp,-1712
80008d04:	1a d8       	st.w	--sp,r8
80008d06:	fa c8 fa b8 	sub	r8,sp,-1352
80008d0a:	1a d8       	st.w	--sp,r8
80008d0c:	fa c8 fb b4 	sub	r8,sp,-1100
80008d10:	1a d8       	st.w	--sp,r8
80008d12:	fa c8 f9 40 	sub	r8,sp,-1728
80008d16:	fa c9 ff b4 	sub	r9,sp,-76
80008d1a:	04 9a       	mov	r10,r2
80008d1c:	0c 9b       	mov	r11,r6
80008d1e:	0a 9c       	mov	r12,r5
80008d20:	fe b0 fc 16 	rcall	8000854c <get_arg>
80008d24:	2f dd       	sub	sp,-12
80008d26:	19 b8       	ld.ub	r8,r12[0x3]
80008d28:	c2 28       	rjmp	80008d6c <_vfprintf_r+0x4ec>
80008d2a:	2f f7       	sub	r7,-1
80008d2c:	10 39       	cp.w	r9,r8
80008d2e:	c0 84       	brge	80008d3e <_vfprintf_r+0x4be>
80008d30:	fa ca f9 44 	sub	r10,sp,-1724
80008d34:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008d38:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80008d3c:	c1 88       	rjmp	80008d6c <_vfprintf_r+0x4ec>
80008d3e:	41 09       	lddsp	r9,sp[0x40]
80008d40:	59 f8       	cp.w	r8,31
80008d42:	e0 89 00 12 	brgt	80008d66 <_vfprintf_r+0x4e6>
80008d46:	f2 ca ff fc 	sub	r10,r9,-4
80008d4a:	51 0a       	stdsp	sp[0x40],r10
80008d4c:	72 09       	ld.w	r9,r9[0x0]
80008d4e:	fa c6 f9 44 	sub	r6,sp,-1724
80008d52:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008d56:	2f f8       	sub	r8,-1
80008d58:	f5 49 fd 88 	st.w	r10[-632],r9
80008d5c:	fb 48 06 b4 	st.w	sp[1716],r8
80008d60:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80008d64:	c0 48       	rjmp	80008d6c <_vfprintf_r+0x4ec>
80008d66:	13 b8       	ld.ub	r8,r9[0x3]
80008d68:	2f c9       	sub	r9,-4
80008d6a:	51 09       	stdsp	sp[0x40],r9
80008d6c:	fb 68 06 60 	st.b	sp[1632],r8
80008d70:	30 0e       	mov	lr,0
80008d72:	30 08       	mov	r8,0
80008d74:	30 12       	mov	r2,1
80008d76:	fb 68 06 bb 	st.b	sp[1723],r8
80008d7a:	50 2e       	stdsp	sp[0x8],lr
80008d7c:	e0 8f 08 b0 	bral	80009edc <_vfprintf_r+0x165c>
80008d80:	50 a7       	stdsp	sp[0x28],r7
80008d82:	50 80       	stdsp	sp[0x20],r0
80008d84:	0c 97       	mov	r7,r6
80008d86:	04 95       	mov	r5,r2
80008d88:	08 96       	mov	r6,r4
80008d8a:	02 92       	mov	r2,r1
80008d8c:	40 94       	lddsp	r4,sp[0x24]
80008d8e:	10 90       	mov	r0,r8
80008d90:	40 41       	lddsp	r1,sp[0x10]
80008d92:	a5 a3       	sbr	r3,0x4
80008d94:	c0 a8       	rjmp	80008da8 <_vfprintf_r+0x528>
80008d96:	50 a7       	stdsp	sp[0x28],r7
80008d98:	50 80       	stdsp	sp[0x20],r0
80008d9a:	0c 97       	mov	r7,r6
80008d9c:	04 95       	mov	r5,r2
80008d9e:	08 96       	mov	r6,r4
80008da0:	02 92       	mov	r2,r1
80008da2:	40 94       	lddsp	r4,sp[0x24]
80008da4:	10 90       	mov	r0,r8
80008da6:	40 41       	lddsp	r1,sp[0x10]
80008da8:	ed b3 00 05 	bld	r3,0x5
80008dac:	c5 11       	brne	80008e4e <_vfprintf_r+0x5ce>
80008dae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008db2:	40 3c       	lddsp	r12,sp[0xc]
80008db4:	58 0c       	cp.w	r12,0
80008db6:	c1 e0       	breq	80008df2 <_vfprintf_r+0x572>
80008db8:	10 36       	cp.w	r6,r8
80008dba:	c0 64       	brge	80008dc6 <_vfprintf_r+0x546>
80008dbc:	fa cb f9 44 	sub	r11,sp,-1724
80008dc0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008dc4:	c2 08       	rjmp	80008e04 <_vfprintf_r+0x584>
80008dc6:	fa c8 f9 50 	sub	r8,sp,-1712
80008dca:	1a d8       	st.w	--sp,r8
80008dcc:	fa c8 fa b8 	sub	r8,sp,-1352
80008dd0:	0c 9b       	mov	r11,r6
80008dd2:	1a d8       	st.w	--sp,r8
80008dd4:	fa c8 fb b4 	sub	r8,sp,-1100
80008dd8:	1a d8       	st.w	--sp,r8
80008dda:	fa c9 ff b4 	sub	r9,sp,-76
80008dde:	fa c8 f9 40 	sub	r8,sp,-1728
80008de2:	04 9a       	mov	r10,r2
80008de4:	0a 9c       	mov	r12,r5
80008de6:	fe b0 fb b3 	rcall	8000854c <get_arg>
80008dea:	2f dd       	sub	sp,-12
80008dec:	78 1b       	ld.w	r11,r12[0x4]
80008dee:	78 09       	ld.w	r9,r12[0x0]
80008df0:	c2 b8       	rjmp	80008e46 <_vfprintf_r+0x5c6>
80008df2:	ee ca ff ff 	sub	r10,r7,-1
80008df6:	10 37       	cp.w	r7,r8
80008df8:	c0 b4       	brge	80008e0e <_vfprintf_r+0x58e>
80008dfa:	fa c9 f9 44 	sub	r9,sp,-1724
80008dfe:	14 97       	mov	r7,r10
80008e00:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008e04:	ec fb fd 8c 	ld.w	r11,r6[-628]
80008e08:	ec f9 fd 88 	ld.w	r9,r6[-632]
80008e0c:	c1 d8       	rjmp	80008e46 <_vfprintf_r+0x5c6>
80008e0e:	41 09       	lddsp	r9,sp[0x40]
80008e10:	59 f8       	cp.w	r8,31
80008e12:	e0 89 00 14 	brgt	80008e3a <_vfprintf_r+0x5ba>
80008e16:	f2 cb ff f8 	sub	r11,r9,-8
80008e1a:	51 0b       	stdsp	sp[0x40],r11
80008e1c:	fa c6 f9 44 	sub	r6,sp,-1724
80008e20:	72 1b       	ld.w	r11,r9[0x4]
80008e22:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80008e26:	72 09       	ld.w	r9,r9[0x0]
80008e28:	f9 4b fd 8c 	st.w	r12[-628],r11
80008e2c:	f9 49 fd 88 	st.w	r12[-632],r9
80008e30:	2f f8       	sub	r8,-1
80008e32:	14 97       	mov	r7,r10
80008e34:	fb 48 06 b4 	st.w	sp[1716],r8
80008e38:	c0 78       	rjmp	80008e46 <_vfprintf_r+0x5c6>
80008e3a:	f2 c8 ff f8 	sub	r8,r9,-8
80008e3e:	72 1b       	ld.w	r11,r9[0x4]
80008e40:	14 97       	mov	r7,r10
80008e42:	51 08       	stdsp	sp[0x40],r8
80008e44:	72 09       	ld.w	r9,r9[0x0]
80008e46:	16 98       	mov	r8,r11
80008e48:	fa e9 00 00 	st.d	sp[0],r8
80008e4c:	ca e8       	rjmp	80008fa8 <_vfprintf_r+0x728>
80008e4e:	ed b3 00 04 	bld	r3,0x4
80008e52:	c1 71       	brne	80008e80 <_vfprintf_r+0x600>
80008e54:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008e58:	40 3e       	lddsp	lr,sp[0xc]
80008e5a:	58 0e       	cp.w	lr,0
80008e5c:	c0 80       	breq	80008e6c <_vfprintf_r+0x5ec>
80008e5e:	10 36       	cp.w	r6,r8
80008e60:	c6 94       	brge	80008f32 <_vfprintf_r+0x6b2>
80008e62:	fa cc f9 44 	sub	r12,sp,-1724
80008e66:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008e6a:	c8 28       	rjmp	80008f6e <_vfprintf_r+0x6ee>
80008e6c:	ee ca ff ff 	sub	r10,r7,-1
80008e70:	10 37       	cp.w	r7,r8
80008e72:	e0 84 00 81 	brge	80008f74 <_vfprintf_r+0x6f4>
80008e76:	fa cb f9 44 	sub	r11,sp,-1724
80008e7a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008e7e:	c7 78       	rjmp	80008f6c <_vfprintf_r+0x6ec>
80008e80:	ed b3 00 06 	bld	r3,0x6
80008e84:	c4 b1       	brne	80008f1a <_vfprintf_r+0x69a>
80008e86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008e8a:	40 3c       	lddsp	r12,sp[0xc]
80008e8c:	58 0c       	cp.w	r12,0
80008e8e:	c1 d0       	breq	80008ec8 <_vfprintf_r+0x648>
80008e90:	10 36       	cp.w	r6,r8
80008e92:	c0 64       	brge	80008e9e <_vfprintf_r+0x61e>
80008e94:	fa cb f9 44 	sub	r11,sp,-1724
80008e98:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008e9c:	c1 f8       	rjmp	80008eda <_vfprintf_r+0x65a>
80008e9e:	fa c8 f9 50 	sub	r8,sp,-1712
80008ea2:	1a d8       	st.w	--sp,r8
80008ea4:	fa c8 fa b8 	sub	r8,sp,-1352
80008ea8:	1a d8       	st.w	--sp,r8
80008eaa:	fa c8 fb b4 	sub	r8,sp,-1100
80008eae:	1a d8       	st.w	--sp,r8
80008eb0:	fa c8 f9 40 	sub	r8,sp,-1728
80008eb4:	fa c9 ff b4 	sub	r9,sp,-76
80008eb8:	04 9a       	mov	r10,r2
80008eba:	0c 9b       	mov	r11,r6
80008ebc:	0a 9c       	mov	r12,r5
80008ebe:	fe b0 fb 47 	rcall	8000854c <get_arg>
80008ec2:	2f dd       	sub	sp,-12
80008ec4:	98 18       	ld.sh	r8,r12[0x2]
80008ec6:	c2 68       	rjmp	80008f12 <_vfprintf_r+0x692>
80008ec8:	ee ca ff ff 	sub	r10,r7,-1
80008ecc:	10 37       	cp.w	r7,r8
80008ece:	c0 94       	brge	80008ee0 <_vfprintf_r+0x660>
80008ed0:	fa c9 f9 44 	sub	r9,sp,-1724
80008ed4:	14 97       	mov	r7,r10
80008ed6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008eda:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008ede:	c1 a8       	rjmp	80008f12 <_vfprintf_r+0x692>
80008ee0:	41 09       	lddsp	r9,sp[0x40]
80008ee2:	59 f8       	cp.w	r8,31
80008ee4:	e0 89 00 13 	brgt	80008f0a <_vfprintf_r+0x68a>
80008ee8:	f2 cb ff fc 	sub	r11,r9,-4
80008eec:	51 0b       	stdsp	sp[0x40],r11
80008eee:	72 09       	ld.w	r9,r9[0x0]
80008ef0:	fa c6 f9 44 	sub	r6,sp,-1724
80008ef4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008ef8:	2f f8       	sub	r8,-1
80008efa:	f7 49 fd 88 	st.w	r11[-632],r9
80008efe:	fb 48 06 b4 	st.w	sp[1716],r8
80008f02:	14 97       	mov	r7,r10
80008f04:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008f08:	c0 58       	rjmp	80008f12 <_vfprintf_r+0x692>
80008f0a:	92 18       	ld.sh	r8,r9[0x2]
80008f0c:	14 97       	mov	r7,r10
80008f0e:	2f c9       	sub	r9,-4
80008f10:	51 09       	stdsp	sp[0x40],r9
80008f12:	50 18       	stdsp	sp[0x4],r8
80008f14:	bf 58       	asr	r8,0x1f
80008f16:	50 08       	stdsp	sp[0x0],r8
80008f18:	c4 88       	rjmp	80008fa8 <_vfprintf_r+0x728>
80008f1a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008f1e:	40 3c       	lddsp	r12,sp[0xc]
80008f20:	58 0c       	cp.w	r12,0
80008f22:	c1 d0       	breq	80008f5c <_vfprintf_r+0x6dc>
80008f24:	10 36       	cp.w	r6,r8
80008f26:	c0 64       	brge	80008f32 <_vfprintf_r+0x6b2>
80008f28:	fa cb f9 44 	sub	r11,sp,-1724
80008f2c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008f30:	c1 f8       	rjmp	80008f6e <_vfprintf_r+0x6ee>
80008f32:	fa c8 f9 50 	sub	r8,sp,-1712
80008f36:	1a d8       	st.w	--sp,r8
80008f38:	fa c8 fa b8 	sub	r8,sp,-1352
80008f3c:	0c 9b       	mov	r11,r6
80008f3e:	1a d8       	st.w	--sp,r8
80008f40:	fa c8 fb b4 	sub	r8,sp,-1100
80008f44:	04 9a       	mov	r10,r2
80008f46:	1a d8       	st.w	--sp,r8
80008f48:	0a 9c       	mov	r12,r5
80008f4a:	fa c8 f9 40 	sub	r8,sp,-1728
80008f4e:	fa c9 ff b4 	sub	r9,sp,-76
80008f52:	fe b0 fa fd 	rcall	8000854c <get_arg>
80008f56:	2f dd       	sub	sp,-12
80008f58:	78 0b       	ld.w	r11,r12[0x0]
80008f5a:	c2 48       	rjmp	80008fa2 <_vfprintf_r+0x722>
80008f5c:	ee ca ff ff 	sub	r10,r7,-1
80008f60:	10 37       	cp.w	r7,r8
80008f62:	c0 94       	brge	80008f74 <_vfprintf_r+0x6f4>
80008f64:	fa c9 f9 44 	sub	r9,sp,-1724
80008f68:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008f6c:	14 97       	mov	r7,r10
80008f6e:	ec fb fd 88 	ld.w	r11,r6[-632]
80008f72:	c1 88       	rjmp	80008fa2 <_vfprintf_r+0x722>
80008f74:	41 09       	lddsp	r9,sp[0x40]
80008f76:	59 f8       	cp.w	r8,31
80008f78:	e0 89 00 11 	brgt	80008f9a <_vfprintf_r+0x71a>
80008f7c:	f2 cb ff fc 	sub	r11,r9,-4
80008f80:	51 0b       	stdsp	sp[0x40],r11
80008f82:	fa c6 f9 44 	sub	r6,sp,-1724
80008f86:	72 0b       	ld.w	r11,r9[0x0]
80008f88:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008f8c:	f3 4b fd 88 	st.w	r9[-632],r11
80008f90:	2f f8       	sub	r8,-1
80008f92:	14 97       	mov	r7,r10
80008f94:	fb 48 06 b4 	st.w	sp[1716],r8
80008f98:	c0 58       	rjmp	80008fa2 <_vfprintf_r+0x722>
80008f9a:	72 0b       	ld.w	r11,r9[0x0]
80008f9c:	14 97       	mov	r7,r10
80008f9e:	2f c9       	sub	r9,-4
80008fa0:	51 09       	stdsp	sp[0x40],r9
80008fa2:	50 1b       	stdsp	sp[0x4],r11
80008fa4:	bf 5b       	asr	r11,0x1f
80008fa6:	50 0b       	stdsp	sp[0x0],r11
80008fa8:	fa ea 00 00 	ld.d	r10,sp[0]
80008fac:	58 0a       	cp.w	r10,0
80008fae:	5c 2b       	cpc	r11
80008fb0:	c0 e4       	brge	80008fcc <_vfprintf_r+0x74c>
80008fb2:	30 08       	mov	r8,0
80008fb4:	fa ea 00 00 	ld.d	r10,sp[0]
80008fb8:	30 09       	mov	r9,0
80008fba:	f0 0a 01 0a 	sub	r10,r8,r10
80008fbe:	f2 0b 01 4b 	sbc	r11,r9,r11
80008fc2:	32 d8       	mov	r8,45
80008fc4:	fa eb 00 00 	st.d	sp[0],r10
80008fc8:	fb 68 06 bb 	st.b	sp[1723],r8
80008fcc:	30 18       	mov	r8,1
80008fce:	e0 8f 06 fd 	bral	80009dc8 <_vfprintf_r+0x1548>
80008fd2:	50 a7       	stdsp	sp[0x28],r7
80008fd4:	50 80       	stdsp	sp[0x20],r0
80008fd6:	0c 97       	mov	r7,r6
80008fd8:	04 95       	mov	r5,r2
80008fda:	08 96       	mov	r6,r4
80008fdc:	02 92       	mov	r2,r1
80008fde:	40 94       	lddsp	r4,sp[0x24]
80008fe0:	10 90       	mov	r0,r8
80008fe2:	40 41       	lddsp	r1,sp[0x10]
80008fe4:	0e 99       	mov	r9,r7
80008fe6:	ed b3 00 03 	bld	r3,0x3
80008fea:	c4 11       	brne	8000906c <_vfprintf_r+0x7ec>
80008fec:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008ff0:	40 3a       	lddsp	r10,sp[0xc]
80008ff2:	58 0a       	cp.w	r10,0
80008ff4:	c1 90       	breq	80009026 <_vfprintf_r+0x7a6>
80008ff6:	10 36       	cp.w	r6,r8
80008ff8:	c6 45       	brlt	800090c0 <_vfprintf_r+0x840>
80008ffa:	fa c8 f9 50 	sub	r8,sp,-1712
80008ffe:	1a d8       	st.w	--sp,r8
80009000:	fa c8 fa b8 	sub	r8,sp,-1352
80009004:	1a d8       	st.w	--sp,r8
80009006:	fa c8 fb b4 	sub	r8,sp,-1100
8000900a:	0c 9b       	mov	r11,r6
8000900c:	1a d8       	st.w	--sp,r8
8000900e:	04 9a       	mov	r10,r2
80009010:	fa c8 f9 40 	sub	r8,sp,-1728
80009014:	fa c9 ff b4 	sub	r9,sp,-76
80009018:	0a 9c       	mov	r12,r5
8000901a:	fe b0 fa 99 	rcall	8000854c <get_arg>
8000901e:	2f dd       	sub	sp,-12
80009020:	78 16       	ld.w	r6,r12[0x4]
80009022:	50 76       	stdsp	sp[0x1c],r6
80009024:	c4 88       	rjmp	800090b4 <_vfprintf_r+0x834>
80009026:	2f f7       	sub	r7,-1
80009028:	10 39       	cp.w	r9,r8
8000902a:	c0 c4       	brge	80009042 <_vfprintf_r+0x7c2>
8000902c:	fa ce f9 44 	sub	lr,sp,-1724
80009030:	fc 06 00 36 	add	r6,lr,r6<<0x3
80009034:	ec fc fd 8c 	ld.w	r12,r6[-628]
80009038:	50 7c       	stdsp	sp[0x1c],r12
8000903a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000903e:	50 56       	stdsp	sp[0x14],r6
80009040:	c6 68       	rjmp	8000910c <_vfprintf_r+0x88c>
80009042:	41 09       	lddsp	r9,sp[0x40]
80009044:	59 f8       	cp.w	r8,31
80009046:	e0 89 00 10 	brgt	80009066 <_vfprintf_r+0x7e6>
8000904a:	f2 ca ff f8 	sub	r10,r9,-8
8000904e:	72 1b       	ld.w	r11,r9[0x4]
80009050:	51 0a       	stdsp	sp[0x40],r10
80009052:	72 09       	ld.w	r9,r9[0x0]
80009054:	fa ca f9 44 	sub	r10,sp,-1724
80009058:	50 7b       	stdsp	sp[0x1c],r11
8000905a:	50 59       	stdsp	sp[0x14],r9
8000905c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009060:	40 5b       	lddsp	r11,sp[0x14]
80009062:	40 7a       	lddsp	r10,sp[0x1c]
80009064:	c4 78       	rjmp	800090f2 <_vfprintf_r+0x872>
80009066:	72 18       	ld.w	r8,r9[0x4]
80009068:	50 78       	stdsp	sp[0x1c],r8
8000906a:	c4 c8       	rjmp	80009102 <_vfprintf_r+0x882>
8000906c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009070:	40 3e       	lddsp	lr,sp[0xc]
80009072:	58 0e       	cp.w	lr,0
80009074:	c2 30       	breq	800090ba <_vfprintf_r+0x83a>
80009076:	10 36       	cp.w	r6,r8
80009078:	c0 94       	brge	8000908a <_vfprintf_r+0x80a>
8000907a:	fa cc f9 44 	sub	r12,sp,-1724
8000907e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009082:	ec fb fd 8c 	ld.w	r11,r6[-628]
80009086:	50 7b       	stdsp	sp[0x1c],r11
80009088:	cd 9b       	rjmp	8000903a <_vfprintf_r+0x7ba>
8000908a:	fa c8 f9 50 	sub	r8,sp,-1712
8000908e:	1a d8       	st.w	--sp,r8
80009090:	fa c8 fa b8 	sub	r8,sp,-1352
80009094:	04 9a       	mov	r10,r2
80009096:	1a d8       	st.w	--sp,r8
80009098:	fa c8 fb b4 	sub	r8,sp,-1100
8000909c:	0c 9b       	mov	r11,r6
8000909e:	1a d8       	st.w	--sp,r8
800090a0:	0a 9c       	mov	r12,r5
800090a2:	fa c8 f9 40 	sub	r8,sp,-1728
800090a6:	fa c9 ff b4 	sub	r9,sp,-76
800090aa:	fe b0 fa 51 	rcall	8000854c <get_arg>
800090ae:	2f dd       	sub	sp,-12
800090b0:	78 1a       	ld.w	r10,r12[0x4]
800090b2:	50 7a       	stdsp	sp[0x1c],r10
800090b4:	78 0c       	ld.w	r12,r12[0x0]
800090b6:	50 5c       	stdsp	sp[0x14],r12
800090b8:	c2 a8       	rjmp	8000910c <_vfprintf_r+0x88c>
800090ba:	2f f7       	sub	r7,-1
800090bc:	10 39       	cp.w	r9,r8
800090be:	c0 94       	brge	800090d0 <_vfprintf_r+0x850>
800090c0:	fa c9 f9 44 	sub	r9,sp,-1724
800090c4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800090c8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800090cc:	50 78       	stdsp	sp[0x1c],r8
800090ce:	cb 6b       	rjmp	8000903a <_vfprintf_r+0x7ba>
800090d0:	41 09       	lddsp	r9,sp[0x40]
800090d2:	59 f8       	cp.w	r8,31
800090d4:	e0 89 00 15 	brgt	800090fe <_vfprintf_r+0x87e>
800090d8:	f2 ca ff f8 	sub	r10,r9,-8
800090dc:	72 16       	ld.w	r6,r9[0x4]
800090de:	72 09       	ld.w	r9,r9[0x0]
800090e0:	51 0a       	stdsp	sp[0x40],r10
800090e2:	50 59       	stdsp	sp[0x14],r9
800090e4:	fa ce f9 44 	sub	lr,sp,-1724
800090e8:	50 76       	stdsp	sp[0x1c],r6
800090ea:	fc 08 00 39 	add	r9,lr,r8<<0x3
800090ee:	40 5b       	lddsp	r11,sp[0x14]
800090f0:	0c 9a       	mov	r10,r6
800090f2:	f2 eb fd 88 	st.d	r9[-632],r10
800090f6:	2f f8       	sub	r8,-1
800090f8:	fb 48 06 b4 	st.w	sp[1716],r8
800090fc:	c0 88       	rjmp	8000910c <_vfprintf_r+0x88c>
800090fe:	72 1c       	ld.w	r12,r9[0x4]
80009100:	50 7c       	stdsp	sp[0x1c],r12
80009102:	f2 c8 ff f8 	sub	r8,r9,-8
80009106:	51 08       	stdsp	sp[0x40],r8
80009108:	72 09       	ld.w	r9,r9[0x0]
8000910a:	50 59       	stdsp	sp[0x14],r9
8000910c:	40 5b       	lddsp	r11,sp[0x14]
8000910e:	40 7a       	lddsp	r10,sp[0x1c]
80009110:	e0 a0 1d 02 	rcall	8000cb14 <__isinfd>
80009114:	18 96       	mov	r6,r12
80009116:	c1 50       	breq	80009140 <_vfprintf_r+0x8c0>
80009118:	30 08       	mov	r8,0
8000911a:	30 09       	mov	r9,0
8000911c:	40 5b       	lddsp	r11,sp[0x14]
8000911e:	40 7a       	lddsp	r10,sp[0x1c]
80009120:	e0 a0 21 f6 	rcall	8000d50c <__avr32_f64_cmp_lt>
80009124:	c0 40       	breq	8000912c <_vfprintf_r+0x8ac>
80009126:	32 d8       	mov	r8,45
80009128:	fb 68 06 bb 	st.b	sp[1723],r8
8000912c:	4a f8       	lddpc	r8,800091e8 <_vfprintf_r+0x968>
8000912e:	4b 06       	lddpc	r6,800091ec <_vfprintf_r+0x96c>
80009130:	a7 d3       	cbr	r3,0x7
80009132:	e0 40 00 47 	cp.w	r0,71
80009136:	f0 06 17 a0 	movle	r6,r8
8000913a:	30 32       	mov	r2,3
8000913c:	e0 8f 06 d3 	bral	80009ee2 <_vfprintf_r+0x1662>
80009140:	40 5b       	lddsp	r11,sp[0x14]
80009142:	40 7a       	lddsp	r10,sp[0x1c]
80009144:	e0 a0 1c fd 	rcall	8000cb3e <__isnand>
80009148:	c0 c0       	breq	80009160 <_vfprintf_r+0x8e0>
8000914a:	50 26       	stdsp	sp[0x8],r6
8000914c:	4a 98       	lddpc	r8,800091f0 <_vfprintf_r+0x970>
8000914e:	4a a6       	lddpc	r6,800091f4 <_vfprintf_r+0x974>
80009150:	a7 d3       	cbr	r3,0x7
80009152:	e0 40 00 47 	cp.w	r0,71
80009156:	f0 06 17 a0 	movle	r6,r8
8000915a:	30 32       	mov	r2,3
8000915c:	e0 8f 06 c9 	bral	80009eee <_vfprintf_r+0x166e>
80009160:	40 2a       	lddsp	r10,sp[0x8]
80009162:	5b fa       	cp.w	r10,-1
80009164:	c0 41       	brne	8000916c <_vfprintf_r+0x8ec>
80009166:	30 69       	mov	r9,6
80009168:	50 29       	stdsp	sp[0x8],r9
8000916a:	c1 18       	rjmp	8000918c <_vfprintf_r+0x90c>
8000916c:	e0 40 00 47 	cp.w	r0,71
80009170:	5f 09       	sreq	r9
80009172:	e0 40 00 67 	cp.w	r0,103
80009176:	5f 08       	sreq	r8
80009178:	f3 e8 10 08 	or	r8,r9,r8
8000917c:	f8 08 18 00 	cp.b	r8,r12
80009180:	c0 60       	breq	8000918c <_vfprintf_r+0x90c>
80009182:	40 28       	lddsp	r8,sp[0x8]
80009184:	58 08       	cp.w	r8,0
80009186:	f9 b8 00 01 	moveq	r8,1
8000918a:	50 28       	stdsp	sp[0x8],r8
8000918c:	40 78       	lddsp	r8,sp[0x1c]
8000918e:	40 59       	lddsp	r9,sp[0x14]
80009190:	fa e9 06 94 	st.d	sp[1684],r8
80009194:	a9 a3       	sbr	r3,0x8
80009196:	fa f8 06 94 	ld.w	r8,sp[1684]
8000919a:	58 08       	cp.w	r8,0
8000919c:	c0 65       	brlt	800091a8 <_vfprintf_r+0x928>
8000919e:	40 5e       	lddsp	lr,sp[0x14]
800091a0:	30 0c       	mov	r12,0
800091a2:	50 6e       	stdsp	sp[0x18],lr
800091a4:	50 9c       	stdsp	sp[0x24],r12
800091a6:	c0 78       	rjmp	800091b4 <_vfprintf_r+0x934>
800091a8:	40 5b       	lddsp	r11,sp[0x14]
800091aa:	32 da       	mov	r10,45
800091ac:	ee 1b 80 00 	eorh	r11,0x8000
800091b0:	50 9a       	stdsp	sp[0x24],r10
800091b2:	50 6b       	stdsp	sp[0x18],r11
800091b4:	e0 40 00 46 	cp.w	r0,70
800091b8:	5f 09       	sreq	r9
800091ba:	e0 40 00 66 	cp.w	r0,102
800091be:	5f 08       	sreq	r8
800091c0:	f3 e8 10 08 	or	r8,r9,r8
800091c4:	50 48       	stdsp	sp[0x10],r8
800091c6:	c0 40       	breq	800091ce <_vfprintf_r+0x94e>
800091c8:	40 22       	lddsp	r2,sp[0x8]
800091ca:	30 39       	mov	r9,3
800091cc:	c1 a8       	rjmp	80009200 <_vfprintf_r+0x980>
800091ce:	e0 40 00 45 	cp.w	r0,69
800091d2:	5f 09       	sreq	r9
800091d4:	e0 40 00 65 	cp.w	r0,101
800091d8:	5f 08       	sreq	r8
800091da:	40 46       	lddsp	r6,sp[0x10]
800091dc:	10 49       	or	r9,r8
800091de:	ec 09 18 00 	cp.b	r9,r6
800091e2:	c0 b1       	brne	800091f8 <_vfprintf_r+0x978>
800091e4:	40 22       	lddsp	r2,sp[0x8]
800091e6:	c0 c8       	rjmp	800091fe <_vfprintf_r+0x97e>
800091e8:	80 00       	ld.sh	r0,r0[0x0]
800091ea:	ed 50 80 00 	st.h	r6[-32768],r0
800091ee:	ed 54 80 00 	st.h	r6[-32768],r4
800091f2:	ed 58 80 00 	st.h	r6[-32768],r8
800091f6:	ed 5c 40 2e 	st.h	r6[16430],r12
800091fa:	fc c2 ff ff 	sub	r2,lr,-1
800091fe:	30 29       	mov	r9,2
80009200:	fa c8 f9 5c 	sub	r8,sp,-1700
80009204:	1a d8       	st.w	--sp,r8
80009206:	fa c8 f9 54 	sub	r8,sp,-1708
8000920a:	1a d8       	st.w	--sp,r8
8000920c:	fa c8 f9 4c 	sub	r8,sp,-1716
80009210:	0a 9c       	mov	r12,r5
80009212:	1a d8       	st.w	--sp,r8
80009214:	04 98       	mov	r8,r2
80009216:	40 9b       	lddsp	r11,sp[0x24]
80009218:	40 aa       	lddsp	r10,sp[0x28]
8000921a:	e0 a0 0b bf 	rcall	8000a998 <_dtoa_r>
8000921e:	e0 40 00 47 	cp.w	r0,71
80009222:	5f 19       	srne	r9
80009224:	e0 40 00 67 	cp.w	r0,103
80009228:	5f 18       	srne	r8
8000922a:	18 96       	mov	r6,r12
8000922c:	2f dd       	sub	sp,-12
8000922e:	f3 e8 00 08 	and	r8,r9,r8
80009232:	c0 41       	brne	8000923a <_vfprintf_r+0x9ba>
80009234:	ed b3 00 00 	bld	r3,0x0
80009238:	c3 01       	brne	80009298 <_vfprintf_r+0xa18>
8000923a:	ec 02 00 0c 	add	r12,r6,r2
8000923e:	50 3c       	stdsp	sp[0xc],r12
80009240:	40 4b       	lddsp	r11,sp[0x10]
80009242:	58 0b       	cp.w	r11,0
80009244:	c1 50       	breq	8000926e <_vfprintf_r+0x9ee>
80009246:	0d 89       	ld.ub	r9,r6[0x0]
80009248:	33 08       	mov	r8,48
8000924a:	f0 09 18 00 	cp.b	r9,r8
8000924e:	c0 b1       	brne	80009264 <_vfprintf_r+0x9e4>
80009250:	30 08       	mov	r8,0
80009252:	30 09       	mov	r9,0
80009254:	40 6b       	lddsp	r11,sp[0x18]
80009256:	40 7a       	lddsp	r10,sp[0x1c]
80009258:	e0 a0 21 13 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000925c:	fb b2 00 01 	rsubeq	r2,1
80009260:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80009264:	40 3a       	lddsp	r10,sp[0xc]
80009266:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000926a:	10 0a       	add	r10,r8
8000926c:	50 3a       	stdsp	sp[0xc],r10
8000926e:	40 6b       	lddsp	r11,sp[0x18]
80009270:	30 08       	mov	r8,0
80009272:	30 09       	mov	r9,0
80009274:	40 7a       	lddsp	r10,sp[0x1c]
80009276:	e0 a0 21 04 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000927a:	c0 90       	breq	8000928c <_vfprintf_r+0xa0c>
8000927c:	40 39       	lddsp	r9,sp[0xc]
8000927e:	fb 49 06 a4 	st.w	sp[1700],r9
80009282:	c0 58       	rjmp	8000928c <_vfprintf_r+0xa0c>
80009284:	10 c9       	st.b	r8++,r9
80009286:	fb 48 06 a4 	st.w	sp[1700],r8
8000928a:	c0 28       	rjmp	8000928e <_vfprintf_r+0xa0e>
8000928c:	33 09       	mov	r9,48
8000928e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80009292:	40 3e       	lddsp	lr,sp[0xc]
80009294:	1c 38       	cp.w	r8,lr
80009296:	cf 73       	brcs	80009284 <_vfprintf_r+0xa04>
80009298:	e0 40 00 47 	cp.w	r0,71
8000929c:	5f 09       	sreq	r9
8000929e:	e0 40 00 67 	cp.w	r0,103
800092a2:	5f 08       	sreq	r8
800092a4:	f3 e8 10 08 	or	r8,r9,r8
800092a8:	fa f9 06 a4 	ld.w	r9,sp[1700]
800092ac:	0c 19       	sub	r9,r6
800092ae:	50 69       	stdsp	sp[0x18],r9
800092b0:	58 08       	cp.w	r8,0
800092b2:	c0 b0       	breq	800092c8 <_vfprintf_r+0xa48>
800092b4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800092b8:	5b d8       	cp.w	r8,-3
800092ba:	c0 55       	brlt	800092c4 <_vfprintf_r+0xa44>
800092bc:	40 2c       	lddsp	r12,sp[0x8]
800092be:	18 38       	cp.w	r8,r12
800092c0:	e0 8a 00 6a 	brle	80009394 <_vfprintf_r+0xb14>
800092c4:	20 20       	sub	r0,2
800092c6:	c0 58       	rjmp	800092d0 <_vfprintf_r+0xa50>
800092c8:	e0 40 00 65 	cp.w	r0,101
800092cc:	e0 89 00 46 	brgt	80009358 <_vfprintf_r+0xad8>
800092d0:	fa fb 06 ac 	ld.w	r11,sp[1708]
800092d4:	fb 60 06 9c 	st.b	sp[1692],r0
800092d8:	20 1b       	sub	r11,1
800092da:	fb 4b 06 ac 	st.w	sp[1708],r11
800092de:	c0 47       	brpl	800092e6 <_vfprintf_r+0xa66>
800092e0:	5c 3b       	neg	r11
800092e2:	32 d8       	mov	r8,45
800092e4:	c0 28       	rjmp	800092e8 <_vfprintf_r+0xa68>
800092e6:	32 b8       	mov	r8,43
800092e8:	fb 68 06 9d 	st.b	sp[1693],r8
800092ec:	58 9b       	cp.w	r11,9
800092ee:	e0 8a 00 1d 	brle	80009328 <_vfprintf_r+0xaa8>
800092f2:	fa c9 fa 35 	sub	r9,sp,-1483
800092f6:	30 aa       	mov	r10,10
800092f8:	12 98       	mov	r8,r9
800092fa:	0e 9c       	mov	r12,r7
800092fc:	0c 92       	mov	r2,r6
800092fe:	f6 0a 0c 06 	divs	r6,r11,r10
80009302:	0e 9b       	mov	r11,r7
80009304:	2d 0b       	sub	r11,-48
80009306:	10 fb       	st.b	--r8,r11
80009308:	0c 9b       	mov	r11,r6
8000930a:	58 96       	cp.w	r6,9
8000930c:	fe 99 ff f9 	brgt	800092fe <_vfprintf_r+0xa7e>
80009310:	2d 0b       	sub	r11,-48
80009312:	18 97       	mov	r7,r12
80009314:	04 96       	mov	r6,r2
80009316:	10 fb       	st.b	--r8,r11
80009318:	fa ca f9 62 	sub	r10,sp,-1694
8000931c:	c0 38       	rjmp	80009322 <_vfprintf_r+0xaa2>
8000931e:	11 3b       	ld.ub	r11,r8++
80009320:	14 cb       	st.b	r10++,r11
80009322:	12 38       	cp.w	r8,r9
80009324:	cf d3       	brcs	8000931e <_vfprintf_r+0xa9e>
80009326:	c0 98       	rjmp	80009338 <_vfprintf_r+0xab8>
80009328:	2d 0b       	sub	r11,-48
8000932a:	33 08       	mov	r8,48
8000932c:	fb 6b 06 9f 	st.b	sp[1695],r11
80009330:	fb 68 06 9e 	st.b	sp[1694],r8
80009334:	fa ca f9 60 	sub	r10,sp,-1696
80009338:	fa c8 f9 64 	sub	r8,sp,-1692
8000933c:	f4 08 01 08 	sub	r8,r10,r8
80009340:	50 e8       	stdsp	sp[0x38],r8
80009342:	10 92       	mov	r2,r8
80009344:	40 6b       	lddsp	r11,sp[0x18]
80009346:	16 02       	add	r2,r11
80009348:	58 1b       	cp.w	r11,1
8000934a:	e0 89 00 05 	brgt	80009354 <_vfprintf_r+0xad4>
8000934e:	ed b3 00 00 	bld	r3,0x0
80009352:	c3 51       	brne	800093bc <_vfprintf_r+0xb3c>
80009354:	2f f2       	sub	r2,-1
80009356:	c3 38       	rjmp	800093bc <_vfprintf_r+0xb3c>
80009358:	e0 40 00 66 	cp.w	r0,102
8000935c:	c1 c1       	brne	80009394 <_vfprintf_r+0xb14>
8000935e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009362:	58 02       	cp.w	r2,0
80009364:	e0 8a 00 0c 	brle	8000937c <_vfprintf_r+0xafc>
80009368:	40 2a       	lddsp	r10,sp[0x8]
8000936a:	58 0a       	cp.w	r10,0
8000936c:	c0 41       	brne	80009374 <_vfprintf_r+0xaf4>
8000936e:	ed b3 00 00 	bld	r3,0x0
80009372:	c2 51       	brne	800093bc <_vfprintf_r+0xb3c>
80009374:	2f f2       	sub	r2,-1
80009376:	40 29       	lddsp	r9,sp[0x8]
80009378:	12 02       	add	r2,r9
8000937a:	c0 b8       	rjmp	80009390 <_vfprintf_r+0xb10>
8000937c:	40 28       	lddsp	r8,sp[0x8]
8000937e:	58 08       	cp.w	r8,0
80009380:	c0 61       	brne	8000938c <_vfprintf_r+0xb0c>
80009382:	ed b3 00 00 	bld	r3,0x0
80009386:	c0 30       	breq	8000938c <_vfprintf_r+0xb0c>
80009388:	30 12       	mov	r2,1
8000938a:	c1 98       	rjmp	800093bc <_vfprintf_r+0xb3c>
8000938c:	40 22       	lddsp	r2,sp[0x8]
8000938e:	2f e2       	sub	r2,-2
80009390:	36 60       	mov	r0,102
80009392:	c1 58       	rjmp	800093bc <_vfprintf_r+0xb3c>
80009394:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009398:	40 6e       	lddsp	lr,sp[0x18]
8000939a:	1c 32       	cp.w	r2,lr
8000939c:	c0 65       	brlt	800093a8 <_vfprintf_r+0xb28>
8000939e:	ed b3 00 00 	bld	r3,0x0
800093a2:	f7 b2 00 ff 	subeq	r2,-1
800093a6:	c0 a8       	rjmp	800093ba <_vfprintf_r+0xb3a>
800093a8:	e4 08 11 02 	rsub	r8,r2,2
800093ac:	40 6c       	lddsp	r12,sp[0x18]
800093ae:	58 02       	cp.w	r2,0
800093b0:	f0 02 17 a0 	movle	r2,r8
800093b4:	f9 b2 09 01 	movgt	r2,1
800093b8:	18 02       	add	r2,r12
800093ba:	36 70       	mov	r0,103
800093bc:	40 9b       	lddsp	r11,sp[0x24]
800093be:	58 0b       	cp.w	r11,0
800093c0:	e0 80 05 91 	breq	80009ee2 <_vfprintf_r+0x1662>
800093c4:	32 d8       	mov	r8,45
800093c6:	fb 68 06 bb 	st.b	sp[1723],r8
800093ca:	e0 8f 05 90 	bral	80009eea <_vfprintf_r+0x166a>
800093ce:	50 a7       	stdsp	sp[0x28],r7
800093d0:	04 95       	mov	r5,r2
800093d2:	0c 97       	mov	r7,r6
800093d4:	02 92       	mov	r2,r1
800093d6:	08 96       	mov	r6,r4
800093d8:	40 41       	lddsp	r1,sp[0x10]
800093da:	40 94       	lddsp	r4,sp[0x24]
800093dc:	0e 99       	mov	r9,r7
800093de:	ed b3 00 05 	bld	r3,0x5
800093e2:	c4 81       	brne	80009472 <_vfprintf_r+0xbf2>
800093e4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800093e8:	40 3e       	lddsp	lr,sp[0xc]
800093ea:	58 0e       	cp.w	lr,0
800093ec:	c1 d0       	breq	80009426 <_vfprintf_r+0xba6>
800093ee:	10 36       	cp.w	r6,r8
800093f0:	c0 64       	brge	800093fc <_vfprintf_r+0xb7c>
800093f2:	fa cc f9 44 	sub	r12,sp,-1724
800093f6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800093fa:	c1 d8       	rjmp	80009434 <_vfprintf_r+0xbb4>
800093fc:	fa c8 f9 50 	sub	r8,sp,-1712
80009400:	1a d8       	st.w	--sp,r8
80009402:	fa c8 fa b8 	sub	r8,sp,-1352
80009406:	04 9a       	mov	r10,r2
80009408:	1a d8       	st.w	--sp,r8
8000940a:	fa c8 fb b4 	sub	r8,sp,-1100
8000940e:	0c 9b       	mov	r11,r6
80009410:	1a d8       	st.w	--sp,r8
80009412:	0a 9c       	mov	r12,r5
80009414:	fa c8 f9 40 	sub	r8,sp,-1728
80009418:	fa c9 ff b4 	sub	r9,sp,-76
8000941c:	fe b0 f8 98 	rcall	8000854c <get_arg>
80009420:	2f dd       	sub	sp,-12
80009422:	78 0a       	ld.w	r10,r12[0x0]
80009424:	c2 08       	rjmp	80009464 <_vfprintf_r+0xbe4>
80009426:	2f f7       	sub	r7,-1
80009428:	10 39       	cp.w	r9,r8
8000942a:	c0 84       	brge	8000943a <_vfprintf_r+0xbba>
8000942c:	fa cb f9 44 	sub	r11,sp,-1724
80009430:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009434:	ec fa fd 88 	ld.w	r10,r6[-632]
80009438:	c1 68       	rjmp	80009464 <_vfprintf_r+0xbe4>
8000943a:	41 09       	lddsp	r9,sp[0x40]
8000943c:	59 f8       	cp.w	r8,31
8000943e:	e0 89 00 10 	brgt	8000945e <_vfprintf_r+0xbde>
80009442:	f2 ca ff fc 	sub	r10,r9,-4
80009446:	51 0a       	stdsp	sp[0x40],r10
80009448:	fa c6 f9 44 	sub	r6,sp,-1724
8000944c:	72 0a       	ld.w	r10,r9[0x0]
8000944e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009452:	f3 4a fd 88 	st.w	r9[-632],r10
80009456:	2f f8       	sub	r8,-1
80009458:	fb 48 06 b4 	st.w	sp[1716],r8
8000945c:	c0 48       	rjmp	80009464 <_vfprintf_r+0xbe4>
8000945e:	72 0a       	ld.w	r10,r9[0x0]
80009460:	2f c9       	sub	r9,-4
80009462:	51 09       	stdsp	sp[0x40],r9
80009464:	40 be       	lddsp	lr,sp[0x2c]
80009466:	1c 98       	mov	r8,lr
80009468:	95 1e       	st.w	r10[0x4],lr
8000946a:	bf 58       	asr	r8,0x1f
8000946c:	95 08       	st.w	r10[0x0],r8
8000946e:	fe 9f fa 93 	bral	80008994 <_vfprintf_r+0x114>
80009472:	ed b3 00 04 	bld	r3,0x4
80009476:	c4 80       	breq	80009506 <_vfprintf_r+0xc86>
80009478:	e2 13 00 40 	andl	r3,0x40,COH
8000947c:	c4 50       	breq	80009506 <_vfprintf_r+0xc86>
8000947e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009482:	40 3c       	lddsp	r12,sp[0xc]
80009484:	58 0c       	cp.w	r12,0
80009486:	c1 d0       	breq	800094c0 <_vfprintf_r+0xc40>
80009488:	10 36       	cp.w	r6,r8
8000948a:	c0 64       	brge	80009496 <_vfprintf_r+0xc16>
8000948c:	fa cb f9 44 	sub	r11,sp,-1724
80009490:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009494:	c1 d8       	rjmp	800094ce <_vfprintf_r+0xc4e>
80009496:	fa c8 f9 50 	sub	r8,sp,-1712
8000949a:	1a d8       	st.w	--sp,r8
8000949c:	fa c8 fa b8 	sub	r8,sp,-1352
800094a0:	04 9a       	mov	r10,r2
800094a2:	1a d8       	st.w	--sp,r8
800094a4:	fa c8 fb b4 	sub	r8,sp,-1100
800094a8:	0c 9b       	mov	r11,r6
800094aa:	1a d8       	st.w	--sp,r8
800094ac:	0a 9c       	mov	r12,r5
800094ae:	fa c8 f9 40 	sub	r8,sp,-1728
800094b2:	fa c9 ff b4 	sub	r9,sp,-76
800094b6:	fe b0 f8 4b 	rcall	8000854c <get_arg>
800094ba:	2f dd       	sub	sp,-12
800094bc:	78 0a       	ld.w	r10,r12[0x0]
800094be:	c2 08       	rjmp	800094fe <_vfprintf_r+0xc7e>
800094c0:	2f f7       	sub	r7,-1
800094c2:	10 39       	cp.w	r9,r8
800094c4:	c0 84       	brge	800094d4 <_vfprintf_r+0xc54>
800094c6:	fa ca f9 44 	sub	r10,sp,-1724
800094ca:	f4 06 00 36 	add	r6,r10,r6<<0x3
800094ce:	ec fa fd 88 	ld.w	r10,r6[-632]
800094d2:	c1 68       	rjmp	800094fe <_vfprintf_r+0xc7e>
800094d4:	41 09       	lddsp	r9,sp[0x40]
800094d6:	59 f8       	cp.w	r8,31
800094d8:	e0 89 00 10 	brgt	800094f8 <_vfprintf_r+0xc78>
800094dc:	f2 ca ff fc 	sub	r10,r9,-4
800094e0:	51 0a       	stdsp	sp[0x40],r10
800094e2:	fa c6 f9 44 	sub	r6,sp,-1724
800094e6:	72 0a       	ld.w	r10,r9[0x0]
800094e8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800094ec:	f3 4a fd 88 	st.w	r9[-632],r10
800094f0:	2f f8       	sub	r8,-1
800094f2:	fb 48 06 b4 	st.w	sp[1716],r8
800094f6:	c0 48       	rjmp	800094fe <_vfprintf_r+0xc7e>
800094f8:	72 0a       	ld.w	r10,r9[0x0]
800094fa:	2f c9       	sub	r9,-4
800094fc:	51 09       	stdsp	sp[0x40],r9
800094fe:	40 be       	lddsp	lr,sp[0x2c]
80009500:	b4 0e       	st.h	r10[0x0],lr
80009502:	fe 9f fa 49 	bral	80008994 <_vfprintf_r+0x114>
80009506:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000950a:	40 3c       	lddsp	r12,sp[0xc]
8000950c:	58 0c       	cp.w	r12,0
8000950e:	c1 d0       	breq	80009548 <_vfprintf_r+0xcc8>
80009510:	10 36       	cp.w	r6,r8
80009512:	c0 64       	brge	8000951e <_vfprintf_r+0xc9e>
80009514:	fa cb f9 44 	sub	r11,sp,-1724
80009518:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000951c:	c1 d8       	rjmp	80009556 <_vfprintf_r+0xcd6>
8000951e:	fa c8 f9 50 	sub	r8,sp,-1712
80009522:	1a d8       	st.w	--sp,r8
80009524:	fa c8 fa b8 	sub	r8,sp,-1352
80009528:	04 9a       	mov	r10,r2
8000952a:	1a d8       	st.w	--sp,r8
8000952c:	fa c8 fb b4 	sub	r8,sp,-1100
80009530:	0c 9b       	mov	r11,r6
80009532:	1a d8       	st.w	--sp,r8
80009534:	0a 9c       	mov	r12,r5
80009536:	fa c8 f9 40 	sub	r8,sp,-1728
8000953a:	fa c9 ff b4 	sub	r9,sp,-76
8000953e:	fe b0 f8 07 	rcall	8000854c <get_arg>
80009542:	2f dd       	sub	sp,-12
80009544:	78 0a       	ld.w	r10,r12[0x0]
80009546:	c2 08       	rjmp	80009586 <_vfprintf_r+0xd06>
80009548:	2f f7       	sub	r7,-1
8000954a:	10 39       	cp.w	r9,r8
8000954c:	c0 84       	brge	8000955c <_vfprintf_r+0xcdc>
8000954e:	fa ca f9 44 	sub	r10,sp,-1724
80009552:	f4 06 00 36 	add	r6,r10,r6<<0x3
80009556:	ec fa fd 88 	ld.w	r10,r6[-632]
8000955a:	c1 68       	rjmp	80009586 <_vfprintf_r+0xd06>
8000955c:	41 09       	lddsp	r9,sp[0x40]
8000955e:	59 f8       	cp.w	r8,31
80009560:	e0 89 00 10 	brgt	80009580 <_vfprintf_r+0xd00>
80009564:	f2 ca ff fc 	sub	r10,r9,-4
80009568:	51 0a       	stdsp	sp[0x40],r10
8000956a:	fa c6 f9 44 	sub	r6,sp,-1724
8000956e:	72 0a       	ld.w	r10,r9[0x0]
80009570:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009574:	f3 4a fd 88 	st.w	r9[-632],r10
80009578:	2f f8       	sub	r8,-1
8000957a:	fb 48 06 b4 	st.w	sp[1716],r8
8000957e:	c0 48       	rjmp	80009586 <_vfprintf_r+0xd06>
80009580:	72 0a       	ld.w	r10,r9[0x0]
80009582:	2f c9       	sub	r9,-4
80009584:	51 09       	stdsp	sp[0x40],r9
80009586:	40 be       	lddsp	lr,sp[0x2c]
80009588:	95 0e       	st.w	r10[0x0],lr
8000958a:	fe 9f fa 05 	bral	80008994 <_vfprintf_r+0x114>
8000958e:	50 a7       	stdsp	sp[0x28],r7
80009590:	50 80       	stdsp	sp[0x20],r0
80009592:	0c 97       	mov	r7,r6
80009594:	04 95       	mov	r5,r2
80009596:	08 96       	mov	r6,r4
80009598:	02 92       	mov	r2,r1
8000959a:	40 94       	lddsp	r4,sp[0x24]
8000959c:	10 90       	mov	r0,r8
8000959e:	40 41       	lddsp	r1,sp[0x10]
800095a0:	a5 a3       	sbr	r3,0x4
800095a2:	c0 a8       	rjmp	800095b6 <_vfprintf_r+0xd36>
800095a4:	50 a7       	stdsp	sp[0x28],r7
800095a6:	50 80       	stdsp	sp[0x20],r0
800095a8:	0c 97       	mov	r7,r6
800095aa:	04 95       	mov	r5,r2
800095ac:	08 96       	mov	r6,r4
800095ae:	02 92       	mov	r2,r1
800095b0:	40 94       	lddsp	r4,sp[0x24]
800095b2:	10 90       	mov	r0,r8
800095b4:	40 41       	lddsp	r1,sp[0x10]
800095b6:	ed b3 00 05 	bld	r3,0x5
800095ba:	c5 d1       	brne	80009674 <_vfprintf_r+0xdf4>
800095bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800095c0:	40 3c       	lddsp	r12,sp[0xc]
800095c2:	58 0c       	cp.w	r12,0
800095c4:	c2 60       	breq	80009610 <_vfprintf_r+0xd90>
800095c6:	10 36       	cp.w	r6,r8
800095c8:	c0 a4       	brge	800095dc <_vfprintf_r+0xd5c>
800095ca:	fa cb f9 44 	sub	r11,sp,-1724
800095ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800095d2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800095d6:	fa e9 00 00 	st.d	sp[0],r8
800095da:	c1 88       	rjmp	8000960a <_vfprintf_r+0xd8a>
800095dc:	fa c8 f9 50 	sub	r8,sp,-1712
800095e0:	1a d8       	st.w	--sp,r8
800095e2:	fa c8 fa b8 	sub	r8,sp,-1352
800095e6:	04 9a       	mov	r10,r2
800095e8:	1a d8       	st.w	--sp,r8
800095ea:	0c 9b       	mov	r11,r6
800095ec:	fa c8 fb b4 	sub	r8,sp,-1100
800095f0:	0a 9c       	mov	r12,r5
800095f2:	1a d8       	st.w	--sp,r8
800095f4:	fa c8 f9 40 	sub	r8,sp,-1728
800095f8:	fa c9 ff b4 	sub	r9,sp,-76
800095fc:	fe b0 f7 a8 	rcall	8000854c <get_arg>
80009600:	2f dd       	sub	sp,-12
80009602:	f8 ea 00 00 	ld.d	r10,r12[0]
80009606:	fa eb 00 00 	st.d	sp[0],r10
8000960a:	30 08       	mov	r8,0
8000960c:	e0 8f 03 db 	bral	80009dc2 <_vfprintf_r+0x1542>
80009610:	ee ca ff ff 	sub	r10,r7,-1
80009614:	10 37       	cp.w	r7,r8
80009616:	c0 b4       	brge	8000962c <_vfprintf_r+0xdac>
80009618:	fa c9 f9 44 	sub	r9,sp,-1724
8000961c:	14 97       	mov	r7,r10
8000961e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009622:	ec ea fd 88 	ld.d	r10,r6[-632]
80009626:	fa eb 00 00 	st.d	sp[0],r10
8000962a:	c1 88       	rjmp	8000965a <_vfprintf_r+0xdda>
8000962c:	41 09       	lddsp	r9,sp[0x40]
8000962e:	59 f8       	cp.w	r8,31
80009630:	e0 89 00 18 	brgt	80009660 <_vfprintf_r+0xde0>
80009634:	f2 e6 00 00 	ld.d	r6,r9[0]
80009638:	f2 cb ff f8 	sub	r11,r9,-8
8000963c:	fa e7 00 00 	st.d	sp[0],r6
80009640:	51 0b       	stdsp	sp[0x40],r11
80009642:	fa c6 f9 44 	sub	r6,sp,-1724
80009646:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000964a:	fa e6 00 00 	ld.d	r6,sp[0]
8000964e:	f2 e7 fd 88 	st.d	r9[-632],r6
80009652:	2f f8       	sub	r8,-1
80009654:	14 97       	mov	r7,r10
80009656:	fb 48 06 b4 	st.w	sp[1716],r8
8000965a:	40 38       	lddsp	r8,sp[0xc]
8000965c:	e0 8f 03 b3 	bral	80009dc2 <_vfprintf_r+0x1542>
80009660:	f2 e6 00 00 	ld.d	r6,r9[0]
80009664:	40 38       	lddsp	r8,sp[0xc]
80009666:	fa e7 00 00 	st.d	sp[0],r6
8000966a:	2f 89       	sub	r9,-8
8000966c:	14 97       	mov	r7,r10
8000966e:	51 09       	stdsp	sp[0x40],r9
80009670:	e0 8f 03 a9 	bral	80009dc2 <_vfprintf_r+0x1542>
80009674:	ed b3 00 04 	bld	r3,0x4
80009678:	c1 61       	brne	800096a4 <_vfprintf_r+0xe24>
8000967a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000967e:	40 3e       	lddsp	lr,sp[0xc]
80009680:	58 0e       	cp.w	lr,0
80009682:	c0 80       	breq	80009692 <_vfprintf_r+0xe12>
80009684:	10 36       	cp.w	r6,r8
80009686:	c6 74       	brge	80009754 <_vfprintf_r+0xed4>
80009688:	fa cc f9 44 	sub	r12,sp,-1724
8000968c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009690:	c8 08       	rjmp	80009790 <_vfprintf_r+0xf10>
80009692:	ee ca ff ff 	sub	r10,r7,-1
80009696:	10 37       	cp.w	r7,r8
80009698:	c7 f4       	brge	80009796 <_vfprintf_r+0xf16>
8000969a:	fa cb f9 44 	sub	r11,sp,-1724
8000969e:	f6 06 00 36 	add	r6,r11,r6<<0x3
800096a2:	c7 68       	rjmp	8000978e <_vfprintf_r+0xf0e>
800096a4:	ed b3 00 06 	bld	r3,0x6
800096a8:	c4 a1       	brne	8000973c <_vfprintf_r+0xebc>
800096aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800096ae:	40 3c       	lddsp	r12,sp[0xc]
800096b0:	58 0c       	cp.w	r12,0
800096b2:	c1 d0       	breq	800096ec <_vfprintf_r+0xe6c>
800096b4:	10 36       	cp.w	r6,r8
800096b6:	c0 64       	brge	800096c2 <_vfprintf_r+0xe42>
800096b8:	fa cb f9 44 	sub	r11,sp,-1724
800096bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800096c0:	c1 f8       	rjmp	800096fe <_vfprintf_r+0xe7e>
800096c2:	fa c8 f9 50 	sub	r8,sp,-1712
800096c6:	1a d8       	st.w	--sp,r8
800096c8:	fa c8 fa b8 	sub	r8,sp,-1352
800096cc:	1a d8       	st.w	--sp,r8
800096ce:	fa c8 fb b4 	sub	r8,sp,-1100
800096d2:	1a d8       	st.w	--sp,r8
800096d4:	fa c8 f9 40 	sub	r8,sp,-1728
800096d8:	fa c9 ff b4 	sub	r9,sp,-76
800096dc:	04 9a       	mov	r10,r2
800096de:	0c 9b       	mov	r11,r6
800096e0:	0a 9c       	mov	r12,r5
800096e2:	fe b0 f7 35 	rcall	8000854c <get_arg>
800096e6:	2f dd       	sub	sp,-12
800096e8:	98 18       	ld.sh	r8,r12[0x2]
800096ea:	c2 68       	rjmp	80009736 <_vfprintf_r+0xeb6>
800096ec:	ee ca ff ff 	sub	r10,r7,-1
800096f0:	10 37       	cp.w	r7,r8
800096f2:	c0 94       	brge	80009704 <_vfprintf_r+0xe84>
800096f4:	fa c9 f9 44 	sub	r9,sp,-1724
800096f8:	14 97       	mov	r7,r10
800096fa:	f2 06 00 36 	add	r6,r9,r6<<0x3
800096fe:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80009702:	c1 a8       	rjmp	80009736 <_vfprintf_r+0xeb6>
80009704:	41 09       	lddsp	r9,sp[0x40]
80009706:	59 f8       	cp.w	r8,31
80009708:	e0 89 00 13 	brgt	8000972e <_vfprintf_r+0xeae>
8000970c:	f2 cb ff fc 	sub	r11,r9,-4
80009710:	51 0b       	stdsp	sp[0x40],r11
80009712:	72 09       	ld.w	r9,r9[0x0]
80009714:	fa c6 f9 44 	sub	r6,sp,-1724
80009718:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000971c:	2f f8       	sub	r8,-1
8000971e:	f7 49 fd 88 	st.w	r11[-632],r9
80009722:	fb 48 06 b4 	st.w	sp[1716],r8
80009726:	14 97       	mov	r7,r10
80009728:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000972c:	c0 58       	rjmp	80009736 <_vfprintf_r+0xeb6>
8000972e:	92 18       	ld.sh	r8,r9[0x2]
80009730:	14 97       	mov	r7,r10
80009732:	2f c9       	sub	r9,-4
80009734:	51 09       	stdsp	sp[0x40],r9
80009736:	5c 78       	castu.h	r8
80009738:	50 18       	stdsp	sp[0x4],r8
8000973a:	c4 68       	rjmp	800097c6 <_vfprintf_r+0xf46>
8000973c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009740:	40 3c       	lddsp	r12,sp[0xc]
80009742:	58 0c       	cp.w	r12,0
80009744:	c1 d0       	breq	8000977e <_vfprintf_r+0xefe>
80009746:	10 36       	cp.w	r6,r8
80009748:	c0 64       	brge	80009754 <_vfprintf_r+0xed4>
8000974a:	fa cb f9 44 	sub	r11,sp,-1724
8000974e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009752:	c1 f8       	rjmp	80009790 <_vfprintf_r+0xf10>
80009754:	fa c8 f9 50 	sub	r8,sp,-1712
80009758:	1a d8       	st.w	--sp,r8
8000975a:	fa c8 fa b8 	sub	r8,sp,-1352
8000975e:	0c 9b       	mov	r11,r6
80009760:	1a d8       	st.w	--sp,r8
80009762:	fa c8 fb b4 	sub	r8,sp,-1100
80009766:	04 9a       	mov	r10,r2
80009768:	1a d8       	st.w	--sp,r8
8000976a:	0a 9c       	mov	r12,r5
8000976c:	fa c8 f9 40 	sub	r8,sp,-1728
80009770:	fa c9 ff b4 	sub	r9,sp,-76
80009774:	fe b0 f6 ec 	rcall	8000854c <get_arg>
80009778:	2f dd       	sub	sp,-12
8000977a:	78 0b       	ld.w	r11,r12[0x0]
8000977c:	c2 48       	rjmp	800097c4 <_vfprintf_r+0xf44>
8000977e:	ee ca ff ff 	sub	r10,r7,-1
80009782:	10 37       	cp.w	r7,r8
80009784:	c0 94       	brge	80009796 <_vfprintf_r+0xf16>
80009786:	fa c9 f9 44 	sub	r9,sp,-1724
8000978a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000978e:	14 97       	mov	r7,r10
80009790:	ec fb fd 88 	ld.w	r11,r6[-632]
80009794:	c1 88       	rjmp	800097c4 <_vfprintf_r+0xf44>
80009796:	41 09       	lddsp	r9,sp[0x40]
80009798:	59 f8       	cp.w	r8,31
8000979a:	e0 89 00 11 	brgt	800097bc <_vfprintf_r+0xf3c>
8000979e:	f2 cb ff fc 	sub	r11,r9,-4
800097a2:	51 0b       	stdsp	sp[0x40],r11
800097a4:	fa c6 f9 44 	sub	r6,sp,-1724
800097a8:	72 0b       	ld.w	r11,r9[0x0]
800097aa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800097ae:	f3 4b fd 88 	st.w	r9[-632],r11
800097b2:	2f f8       	sub	r8,-1
800097b4:	14 97       	mov	r7,r10
800097b6:	fb 48 06 b4 	st.w	sp[1716],r8
800097ba:	c0 58       	rjmp	800097c4 <_vfprintf_r+0xf44>
800097bc:	72 0b       	ld.w	r11,r9[0x0]
800097be:	14 97       	mov	r7,r10
800097c0:	2f c9       	sub	r9,-4
800097c2:	51 09       	stdsp	sp[0x40],r9
800097c4:	50 1b       	stdsp	sp[0x4],r11
800097c6:	30 0e       	mov	lr,0
800097c8:	50 0e       	stdsp	sp[0x0],lr
800097ca:	1c 98       	mov	r8,lr
800097cc:	e0 8f 02 fb 	bral	80009dc2 <_vfprintf_r+0x1542>
800097d0:	50 a7       	stdsp	sp[0x28],r7
800097d2:	50 80       	stdsp	sp[0x20],r0
800097d4:	0c 97       	mov	r7,r6
800097d6:	04 95       	mov	r5,r2
800097d8:	08 96       	mov	r6,r4
800097da:	02 92       	mov	r2,r1
800097dc:	40 94       	lddsp	r4,sp[0x24]
800097de:	40 41       	lddsp	r1,sp[0x10]
800097e0:	0e 99       	mov	r9,r7
800097e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800097e6:	40 3c       	lddsp	r12,sp[0xc]
800097e8:	58 0c       	cp.w	r12,0
800097ea:	c1 d0       	breq	80009824 <_vfprintf_r+0xfa4>
800097ec:	10 36       	cp.w	r6,r8
800097ee:	c0 64       	brge	800097fa <_vfprintf_r+0xf7a>
800097f0:	fa cb f9 44 	sub	r11,sp,-1724
800097f4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800097f8:	c1 d8       	rjmp	80009832 <_vfprintf_r+0xfb2>
800097fa:	fa c8 f9 50 	sub	r8,sp,-1712
800097fe:	1a d8       	st.w	--sp,r8
80009800:	fa c8 fa b8 	sub	r8,sp,-1352
80009804:	1a d8       	st.w	--sp,r8
80009806:	fa c8 fb b4 	sub	r8,sp,-1100
8000980a:	1a d8       	st.w	--sp,r8
8000980c:	fa c9 ff b4 	sub	r9,sp,-76
80009810:	fa c8 f9 40 	sub	r8,sp,-1728
80009814:	04 9a       	mov	r10,r2
80009816:	0c 9b       	mov	r11,r6
80009818:	0a 9c       	mov	r12,r5
8000981a:	fe b0 f6 99 	rcall	8000854c <get_arg>
8000981e:	2f dd       	sub	sp,-12
80009820:	78 09       	ld.w	r9,r12[0x0]
80009822:	c2 18       	rjmp	80009864 <_vfprintf_r+0xfe4>
80009824:	2f f7       	sub	r7,-1
80009826:	10 39       	cp.w	r9,r8
80009828:	c0 84       	brge	80009838 <_vfprintf_r+0xfb8>
8000982a:	fa ca f9 44 	sub	r10,sp,-1724
8000982e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80009832:	ec f9 fd 88 	ld.w	r9,r6[-632]
80009836:	c1 78       	rjmp	80009864 <_vfprintf_r+0xfe4>
80009838:	41 09       	lddsp	r9,sp[0x40]
8000983a:	59 f8       	cp.w	r8,31
8000983c:	e0 89 00 10 	brgt	8000985c <_vfprintf_r+0xfdc>
80009840:	f2 ca ff fc 	sub	r10,r9,-4
80009844:	51 0a       	stdsp	sp[0x40],r10
80009846:	fa c6 f9 44 	sub	r6,sp,-1724
8000984a:	72 09       	ld.w	r9,r9[0x0]
8000984c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80009850:	f5 49 fd 88 	st.w	r10[-632],r9
80009854:	2f f8       	sub	r8,-1
80009856:	fb 48 06 b4 	st.w	sp[1716],r8
8000985a:	c0 58       	rjmp	80009864 <_vfprintf_r+0xfe4>
8000985c:	f2 c8 ff fc 	sub	r8,r9,-4
80009860:	51 08       	stdsp	sp[0x40],r8
80009862:	72 09       	ld.w	r9,r9[0x0]
80009864:	33 08       	mov	r8,48
80009866:	fb 68 06 b8 	st.b	sp[1720],r8
8000986a:	37 88       	mov	r8,120
8000986c:	30 0e       	mov	lr,0
8000986e:	fb 68 06 b9 	st.b	sp[1721],r8
80009872:	4c ac       	lddpc	r12,80009998 <_vfprintf_r+0x1118>
80009874:	50 19       	stdsp	sp[0x4],r9
80009876:	a1 b3       	sbr	r3,0x1
80009878:	50 0e       	stdsp	sp[0x0],lr
8000987a:	50 dc       	stdsp	sp[0x34],r12
8000987c:	30 28       	mov	r8,2
8000987e:	37 80       	mov	r0,120
80009880:	e0 8f 02 a1 	bral	80009dc2 <_vfprintf_r+0x1542>
80009884:	50 a7       	stdsp	sp[0x28],r7
80009886:	50 80       	stdsp	sp[0x20],r0
80009888:	10 90       	mov	r0,r8
8000988a:	30 08       	mov	r8,0
8000988c:	fb 68 06 bb 	st.b	sp[1723],r8
80009890:	0c 97       	mov	r7,r6
80009892:	04 95       	mov	r5,r2
80009894:	08 96       	mov	r6,r4
80009896:	02 92       	mov	r2,r1
80009898:	40 94       	lddsp	r4,sp[0x24]
8000989a:	40 41       	lddsp	r1,sp[0x10]
8000989c:	0e 99       	mov	r9,r7
8000989e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800098a2:	40 3b       	lddsp	r11,sp[0xc]
800098a4:	58 0b       	cp.w	r11,0
800098a6:	c1 d0       	breq	800098e0 <_vfprintf_r+0x1060>
800098a8:	10 36       	cp.w	r6,r8
800098aa:	c0 64       	brge	800098b6 <_vfprintf_r+0x1036>
800098ac:	fa ca f9 44 	sub	r10,sp,-1724
800098b0:	f4 06 00 36 	add	r6,r10,r6<<0x3
800098b4:	c1 d8       	rjmp	800098ee <_vfprintf_r+0x106e>
800098b6:	fa c8 f9 50 	sub	r8,sp,-1712
800098ba:	1a d8       	st.w	--sp,r8
800098bc:	fa c8 fa b8 	sub	r8,sp,-1352
800098c0:	1a d8       	st.w	--sp,r8
800098c2:	fa c8 fb b4 	sub	r8,sp,-1100
800098c6:	0c 9b       	mov	r11,r6
800098c8:	1a d8       	st.w	--sp,r8
800098ca:	04 9a       	mov	r10,r2
800098cc:	fa c8 f9 40 	sub	r8,sp,-1728
800098d0:	fa c9 ff b4 	sub	r9,sp,-76
800098d4:	0a 9c       	mov	r12,r5
800098d6:	fe b0 f6 3b 	rcall	8000854c <get_arg>
800098da:	2f dd       	sub	sp,-12
800098dc:	78 06       	ld.w	r6,r12[0x0]
800098de:	c2 08       	rjmp	8000991e <_vfprintf_r+0x109e>
800098e0:	2f f7       	sub	r7,-1
800098e2:	10 39       	cp.w	r9,r8
800098e4:	c0 84       	brge	800098f4 <_vfprintf_r+0x1074>
800098e6:	fa c9 f9 44 	sub	r9,sp,-1724
800098ea:	f2 06 00 36 	add	r6,r9,r6<<0x3
800098ee:	ec f6 fd 88 	ld.w	r6,r6[-632]
800098f2:	c1 68       	rjmp	8000991e <_vfprintf_r+0x109e>
800098f4:	41 09       	lddsp	r9,sp[0x40]
800098f6:	59 f8       	cp.w	r8,31
800098f8:	e0 89 00 10 	brgt	80009918 <_vfprintf_r+0x1098>
800098fc:	f2 ca ff fc 	sub	r10,r9,-4
80009900:	51 0a       	stdsp	sp[0x40],r10
80009902:	72 06       	ld.w	r6,r9[0x0]
80009904:	fa ce f9 44 	sub	lr,sp,-1724
80009908:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000990c:	f3 46 fd 88 	st.w	r9[-632],r6
80009910:	2f f8       	sub	r8,-1
80009912:	fb 48 06 b4 	st.w	sp[1716],r8
80009916:	c0 48       	rjmp	8000991e <_vfprintf_r+0x109e>
80009918:	72 06       	ld.w	r6,r9[0x0]
8000991a:	2f c9       	sub	r9,-4
8000991c:	51 09       	stdsp	sp[0x40],r9
8000991e:	40 2c       	lddsp	r12,sp[0x8]
80009920:	58 0c       	cp.w	r12,0
80009922:	c1 05       	brlt	80009942 <_vfprintf_r+0x10c2>
80009924:	18 9a       	mov	r10,r12
80009926:	30 0b       	mov	r11,0
80009928:	0c 9c       	mov	r12,r6
8000992a:	e0 a0 14 67 	rcall	8000c1f8 <memchr>
8000992e:	e0 80 02 dd 	breq	80009ee8 <_vfprintf_r+0x1668>
80009932:	f8 06 01 02 	sub	r2,r12,r6
80009936:	40 2b       	lddsp	r11,sp[0x8]
80009938:	16 32       	cp.w	r2,r11
8000993a:	e0 89 02 d7 	brgt	80009ee8 <_vfprintf_r+0x1668>
8000993e:	e0 8f 02 d2 	bral	80009ee2 <_vfprintf_r+0x1662>
80009942:	30 0a       	mov	r10,0
80009944:	0c 9c       	mov	r12,r6
80009946:	50 2a       	stdsp	sp[0x8],r10
80009948:	e0 a0 19 46 	rcall	8000cbd4 <strlen>
8000994c:	18 92       	mov	r2,r12
8000994e:	e0 8f 02 d0 	bral	80009eee <_vfprintf_r+0x166e>
80009952:	50 a7       	stdsp	sp[0x28],r7
80009954:	50 80       	stdsp	sp[0x20],r0
80009956:	0c 97       	mov	r7,r6
80009958:	04 95       	mov	r5,r2
8000995a:	08 96       	mov	r6,r4
8000995c:	02 92       	mov	r2,r1
8000995e:	40 94       	lddsp	r4,sp[0x24]
80009960:	10 90       	mov	r0,r8
80009962:	40 41       	lddsp	r1,sp[0x10]
80009964:	a5 a3       	sbr	r3,0x4
80009966:	c0 a8       	rjmp	8000997a <_vfprintf_r+0x10fa>
80009968:	50 a7       	stdsp	sp[0x28],r7
8000996a:	50 80       	stdsp	sp[0x20],r0
8000996c:	0c 97       	mov	r7,r6
8000996e:	04 95       	mov	r5,r2
80009970:	08 96       	mov	r6,r4
80009972:	02 92       	mov	r2,r1
80009974:	40 94       	lddsp	r4,sp[0x24]
80009976:	10 90       	mov	r0,r8
80009978:	40 41       	lddsp	r1,sp[0x10]
8000997a:	ed b3 00 05 	bld	r3,0x5
8000997e:	c5 71       	brne	80009a2c <_vfprintf_r+0x11ac>
80009980:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009984:	40 39       	lddsp	r9,sp[0xc]
80009986:	58 09       	cp.w	r9,0
80009988:	c2 20       	breq	800099cc <_vfprintf_r+0x114c>
8000998a:	10 36       	cp.w	r6,r8
8000998c:	c0 84       	brge	8000999c <_vfprintf_r+0x111c>
8000998e:	fa c8 f9 44 	sub	r8,sp,-1724
80009992:	f0 06 00 36 	add	r6,r8,r6<<0x3
80009996:	c2 48       	rjmp	800099de <_vfprintf_r+0x115e>
80009998:	80 00       	ld.sh	r0,r0[0x0]
8000999a:	ed 60 fa c8 	st.b	r6[-1336],r0
8000999e:	f9 50 1a d8 	st.h	r12[6872],r0
800099a2:	fa c8 fa b8 	sub	r8,sp,-1352
800099a6:	1a d8       	st.w	--sp,r8
800099a8:	fa c8 fb b4 	sub	r8,sp,-1100
800099ac:	1a d8       	st.w	--sp,r8
800099ae:	fa c8 f9 40 	sub	r8,sp,-1728
800099b2:	fa c9 ff b4 	sub	r9,sp,-76
800099b6:	04 9a       	mov	r10,r2
800099b8:	0c 9b       	mov	r11,r6
800099ba:	0a 9c       	mov	r12,r5
800099bc:	fe b0 f5 c8 	rcall	8000854c <get_arg>
800099c0:	2f dd       	sub	sp,-12
800099c2:	f8 e8 00 00 	ld.d	r8,r12[0]
800099c6:	fa e9 00 00 	st.d	sp[0],r8
800099ca:	c2 e8       	rjmp	80009a26 <_vfprintf_r+0x11a6>
800099cc:	ee ca ff ff 	sub	r10,r7,-1
800099d0:	10 37       	cp.w	r7,r8
800099d2:	c0 b4       	brge	800099e8 <_vfprintf_r+0x1168>
800099d4:	fa c8 f9 44 	sub	r8,sp,-1724
800099d8:	14 97       	mov	r7,r10
800099da:	f0 06 00 36 	add	r6,r8,r6<<0x3
800099de:	ec ea fd 88 	ld.d	r10,r6[-632]
800099e2:	fa eb 00 00 	st.d	sp[0],r10
800099e6:	c2 08       	rjmp	80009a26 <_vfprintf_r+0x11a6>
800099e8:	41 09       	lddsp	r9,sp[0x40]
800099ea:	59 f8       	cp.w	r8,31
800099ec:	e0 89 00 16 	brgt	80009a18 <_vfprintf_r+0x1198>
800099f0:	f2 e6 00 00 	ld.d	r6,r9[0]
800099f4:	f2 cb ff f8 	sub	r11,r9,-8
800099f8:	fa e7 00 00 	st.d	sp[0],r6
800099fc:	51 0b       	stdsp	sp[0x40],r11
800099fe:	fa c6 f9 44 	sub	r6,sp,-1724
80009a02:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009a06:	fa e6 00 00 	ld.d	r6,sp[0]
80009a0a:	f2 e7 fd 88 	st.d	r9[-632],r6
80009a0e:	2f f8       	sub	r8,-1
80009a10:	14 97       	mov	r7,r10
80009a12:	fb 48 06 b4 	st.w	sp[1716],r8
80009a16:	c0 88       	rjmp	80009a26 <_vfprintf_r+0x11a6>
80009a18:	f2 e6 00 00 	ld.d	r6,r9[0]
80009a1c:	2f 89       	sub	r9,-8
80009a1e:	fa e7 00 00 	st.d	sp[0],r6
80009a22:	51 09       	stdsp	sp[0x40],r9
80009a24:	14 97       	mov	r7,r10
80009a26:	30 18       	mov	r8,1
80009a28:	e0 8f 01 cd 	bral	80009dc2 <_vfprintf_r+0x1542>
80009a2c:	ed b3 00 04 	bld	r3,0x4
80009a30:	c1 61       	brne	80009a5c <_vfprintf_r+0x11dc>
80009a32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009a36:	40 3e       	lddsp	lr,sp[0xc]
80009a38:	58 0e       	cp.w	lr,0
80009a3a:	c0 80       	breq	80009a4a <_vfprintf_r+0x11ca>
80009a3c:	10 36       	cp.w	r6,r8
80009a3e:	c6 74       	brge	80009b0c <_vfprintf_r+0x128c>
80009a40:	fa cc f9 44 	sub	r12,sp,-1724
80009a44:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009a48:	c8 08       	rjmp	80009b48 <_vfprintf_r+0x12c8>
80009a4a:	ee ca ff ff 	sub	r10,r7,-1
80009a4e:	10 37       	cp.w	r7,r8
80009a50:	c7 f4       	brge	80009b4e <_vfprintf_r+0x12ce>
80009a52:	fa cb f9 44 	sub	r11,sp,-1724
80009a56:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009a5a:	c7 68       	rjmp	80009b46 <_vfprintf_r+0x12c6>
80009a5c:	ed b3 00 06 	bld	r3,0x6
80009a60:	c4 a1       	brne	80009af4 <_vfprintf_r+0x1274>
80009a62:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009a66:	40 3c       	lddsp	r12,sp[0xc]
80009a68:	58 0c       	cp.w	r12,0
80009a6a:	c1 d0       	breq	80009aa4 <_vfprintf_r+0x1224>
80009a6c:	10 36       	cp.w	r6,r8
80009a6e:	c0 64       	brge	80009a7a <_vfprintf_r+0x11fa>
80009a70:	fa cb f9 44 	sub	r11,sp,-1724
80009a74:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009a78:	c1 f8       	rjmp	80009ab6 <_vfprintf_r+0x1236>
80009a7a:	fa c8 f9 50 	sub	r8,sp,-1712
80009a7e:	1a d8       	st.w	--sp,r8
80009a80:	fa c8 fa b8 	sub	r8,sp,-1352
80009a84:	1a d8       	st.w	--sp,r8
80009a86:	fa c8 fb b4 	sub	r8,sp,-1100
80009a8a:	1a d8       	st.w	--sp,r8
80009a8c:	fa c8 f9 40 	sub	r8,sp,-1728
80009a90:	fa c9 ff b4 	sub	r9,sp,-76
80009a94:	04 9a       	mov	r10,r2
80009a96:	0c 9b       	mov	r11,r6
80009a98:	0a 9c       	mov	r12,r5
80009a9a:	fe b0 f5 59 	rcall	8000854c <get_arg>
80009a9e:	2f dd       	sub	sp,-12
80009aa0:	98 18       	ld.sh	r8,r12[0x2]
80009aa2:	c2 68       	rjmp	80009aee <_vfprintf_r+0x126e>
80009aa4:	ee ca ff ff 	sub	r10,r7,-1
80009aa8:	10 37       	cp.w	r7,r8
80009aaa:	c0 94       	brge	80009abc <_vfprintf_r+0x123c>
80009aac:	fa c9 f9 44 	sub	r9,sp,-1724
80009ab0:	14 97       	mov	r7,r10
80009ab2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009ab6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80009aba:	c1 a8       	rjmp	80009aee <_vfprintf_r+0x126e>
80009abc:	41 09       	lddsp	r9,sp[0x40]
80009abe:	59 f8       	cp.w	r8,31
80009ac0:	e0 89 00 13 	brgt	80009ae6 <_vfprintf_r+0x1266>
80009ac4:	f2 cb ff fc 	sub	r11,r9,-4
80009ac8:	51 0b       	stdsp	sp[0x40],r11
80009aca:	72 09       	ld.w	r9,r9[0x0]
80009acc:	fa c6 f9 44 	sub	r6,sp,-1724
80009ad0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80009ad4:	2f f8       	sub	r8,-1
80009ad6:	f7 49 fd 88 	st.w	r11[-632],r9
80009ada:	fb 48 06 b4 	st.w	sp[1716],r8
80009ade:	14 97       	mov	r7,r10
80009ae0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80009ae4:	c0 58       	rjmp	80009aee <_vfprintf_r+0x126e>
80009ae6:	92 18       	ld.sh	r8,r9[0x2]
80009ae8:	14 97       	mov	r7,r10
80009aea:	2f c9       	sub	r9,-4
80009aec:	51 09       	stdsp	sp[0x40],r9
80009aee:	5c 78       	castu.h	r8
80009af0:	50 18       	stdsp	sp[0x4],r8
80009af2:	c4 68       	rjmp	80009b7e <_vfprintf_r+0x12fe>
80009af4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009af8:	40 3c       	lddsp	r12,sp[0xc]
80009afa:	58 0c       	cp.w	r12,0
80009afc:	c1 d0       	breq	80009b36 <_vfprintf_r+0x12b6>
80009afe:	10 36       	cp.w	r6,r8
80009b00:	c0 64       	brge	80009b0c <_vfprintf_r+0x128c>
80009b02:	fa cb f9 44 	sub	r11,sp,-1724
80009b06:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009b0a:	c1 f8       	rjmp	80009b48 <_vfprintf_r+0x12c8>
80009b0c:	fa c8 f9 50 	sub	r8,sp,-1712
80009b10:	1a d8       	st.w	--sp,r8
80009b12:	fa c8 fa b8 	sub	r8,sp,-1352
80009b16:	0c 9b       	mov	r11,r6
80009b18:	1a d8       	st.w	--sp,r8
80009b1a:	fa c8 fb b4 	sub	r8,sp,-1100
80009b1e:	04 9a       	mov	r10,r2
80009b20:	1a d8       	st.w	--sp,r8
80009b22:	0a 9c       	mov	r12,r5
80009b24:	fa c8 f9 40 	sub	r8,sp,-1728
80009b28:	fa c9 ff b4 	sub	r9,sp,-76
80009b2c:	fe b0 f5 10 	rcall	8000854c <get_arg>
80009b30:	2f dd       	sub	sp,-12
80009b32:	78 0b       	ld.w	r11,r12[0x0]
80009b34:	c2 48       	rjmp	80009b7c <_vfprintf_r+0x12fc>
80009b36:	ee ca ff ff 	sub	r10,r7,-1
80009b3a:	10 37       	cp.w	r7,r8
80009b3c:	c0 94       	brge	80009b4e <_vfprintf_r+0x12ce>
80009b3e:	fa c9 f9 44 	sub	r9,sp,-1724
80009b42:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009b46:	14 97       	mov	r7,r10
80009b48:	ec fb fd 88 	ld.w	r11,r6[-632]
80009b4c:	c1 88       	rjmp	80009b7c <_vfprintf_r+0x12fc>
80009b4e:	41 09       	lddsp	r9,sp[0x40]
80009b50:	59 f8       	cp.w	r8,31
80009b52:	e0 89 00 11 	brgt	80009b74 <_vfprintf_r+0x12f4>
80009b56:	f2 cb ff fc 	sub	r11,r9,-4
80009b5a:	51 0b       	stdsp	sp[0x40],r11
80009b5c:	fa c6 f9 44 	sub	r6,sp,-1724
80009b60:	72 0b       	ld.w	r11,r9[0x0]
80009b62:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009b66:	f3 4b fd 88 	st.w	r9[-632],r11
80009b6a:	2f f8       	sub	r8,-1
80009b6c:	14 97       	mov	r7,r10
80009b6e:	fb 48 06 b4 	st.w	sp[1716],r8
80009b72:	c0 58       	rjmp	80009b7c <_vfprintf_r+0x12fc>
80009b74:	72 0b       	ld.w	r11,r9[0x0]
80009b76:	14 97       	mov	r7,r10
80009b78:	2f c9       	sub	r9,-4
80009b7a:	51 09       	stdsp	sp[0x40],r9
80009b7c:	50 1b       	stdsp	sp[0x4],r11
80009b7e:	30 0e       	mov	lr,0
80009b80:	30 18       	mov	r8,1
80009b82:	50 0e       	stdsp	sp[0x0],lr
80009b84:	c1 f9       	rjmp	80009dc2 <_vfprintf_r+0x1542>
80009b86:	50 a7       	stdsp	sp[0x28],r7
80009b88:	50 80       	stdsp	sp[0x20],r0
80009b8a:	0c 97       	mov	r7,r6
80009b8c:	04 95       	mov	r5,r2
80009b8e:	08 96       	mov	r6,r4
80009b90:	02 92       	mov	r2,r1
80009b92:	4d 3c       	lddpc	r12,80009cdc <_vfprintf_r+0x145c>
80009b94:	40 94       	lddsp	r4,sp[0x24]
80009b96:	10 90       	mov	r0,r8
80009b98:	40 41       	lddsp	r1,sp[0x10]
80009b9a:	50 dc       	stdsp	sp[0x34],r12
80009b9c:	ed b3 00 05 	bld	r3,0x5
80009ba0:	c5 51       	brne	80009c4a <_vfprintf_r+0x13ca>
80009ba2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009ba6:	40 3b       	lddsp	r11,sp[0xc]
80009ba8:	58 0b       	cp.w	r11,0
80009baa:	c2 20       	breq	80009bee <_vfprintf_r+0x136e>
80009bac:	10 36       	cp.w	r6,r8
80009bae:	c0 a4       	brge	80009bc2 <_vfprintf_r+0x1342>
80009bb0:	fa ca f9 44 	sub	r10,sp,-1724
80009bb4:	f4 06 00 36 	add	r6,r10,r6<<0x3
80009bb8:	ec e8 fd 88 	ld.d	r8,r6[-632]
80009bbc:	fa e9 00 00 	st.d	sp[0],r8
80009bc0:	cf 38       	rjmp	80009da6 <_vfprintf_r+0x1526>
80009bc2:	fa c8 f9 50 	sub	r8,sp,-1712
80009bc6:	1a d8       	st.w	--sp,r8
80009bc8:	fa c8 fa b8 	sub	r8,sp,-1352
80009bcc:	04 9a       	mov	r10,r2
80009bce:	1a d8       	st.w	--sp,r8
80009bd0:	0c 9b       	mov	r11,r6
80009bd2:	fa c8 fb b4 	sub	r8,sp,-1100
80009bd6:	0a 9c       	mov	r12,r5
80009bd8:	1a d8       	st.w	--sp,r8
80009bda:	fa c8 f9 40 	sub	r8,sp,-1728
80009bde:	fa c9 ff b4 	sub	r9,sp,-76
80009be2:	fe b0 f4 b5 	rcall	8000854c <get_arg>
80009be6:	2f dd       	sub	sp,-12
80009be8:	f8 ea 00 00 	ld.d	r10,r12[0]
80009bec:	c0 c8       	rjmp	80009c04 <_vfprintf_r+0x1384>
80009bee:	ee ca ff ff 	sub	r10,r7,-1
80009bf2:	10 37       	cp.w	r7,r8
80009bf4:	c0 b4       	brge	80009c0a <_vfprintf_r+0x138a>
80009bf6:	fa c9 f9 44 	sub	r9,sp,-1724
80009bfa:	14 97       	mov	r7,r10
80009bfc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009c00:	ec ea fd 88 	ld.d	r10,r6[-632]
80009c04:	fa eb 00 00 	st.d	sp[0],r10
80009c08:	cc f8       	rjmp	80009da6 <_vfprintf_r+0x1526>
80009c0a:	41 09       	lddsp	r9,sp[0x40]
80009c0c:	59 f8       	cp.w	r8,31
80009c0e:	e0 89 00 16 	brgt	80009c3a <_vfprintf_r+0x13ba>
80009c12:	f2 e6 00 00 	ld.d	r6,r9[0]
80009c16:	f2 cb ff f8 	sub	r11,r9,-8
80009c1a:	fa e7 00 00 	st.d	sp[0],r6
80009c1e:	51 0b       	stdsp	sp[0x40],r11
80009c20:	fa c6 f9 44 	sub	r6,sp,-1724
80009c24:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009c28:	fa e6 00 00 	ld.d	r6,sp[0]
80009c2c:	f2 e7 fd 88 	st.d	r9[-632],r6
80009c30:	2f f8       	sub	r8,-1
80009c32:	14 97       	mov	r7,r10
80009c34:	fb 48 06 b4 	st.w	sp[1716],r8
80009c38:	cb 78       	rjmp	80009da6 <_vfprintf_r+0x1526>
80009c3a:	f2 e6 00 00 	ld.d	r6,r9[0]
80009c3e:	2f 89       	sub	r9,-8
80009c40:	fa e7 00 00 	st.d	sp[0],r6
80009c44:	51 09       	stdsp	sp[0x40],r9
80009c46:	14 97       	mov	r7,r10
80009c48:	ca f8       	rjmp	80009da6 <_vfprintf_r+0x1526>
80009c4a:	ed b3 00 04 	bld	r3,0x4
80009c4e:	c1 71       	brne	80009c7c <_vfprintf_r+0x13fc>
80009c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009c54:	40 3e       	lddsp	lr,sp[0xc]
80009c56:	58 0e       	cp.w	lr,0
80009c58:	c0 80       	breq	80009c68 <_vfprintf_r+0x13e8>
80009c5a:	10 36       	cp.w	r6,r8
80009c5c:	c6 a4       	brge	80009d30 <_vfprintf_r+0x14b0>
80009c5e:	fa cc f9 44 	sub	r12,sp,-1724
80009c62:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009c66:	c8 38       	rjmp	80009d6c <_vfprintf_r+0x14ec>
80009c68:	ee ca ff ff 	sub	r10,r7,-1
80009c6c:	10 37       	cp.w	r7,r8
80009c6e:	e0 84 00 82 	brge	80009d72 <_vfprintf_r+0x14f2>
80009c72:	fa cb f9 44 	sub	r11,sp,-1724
80009c76:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009c7a:	c7 88       	rjmp	80009d6a <_vfprintf_r+0x14ea>
80009c7c:	ed b3 00 06 	bld	r3,0x6
80009c80:	c4 c1       	brne	80009d18 <_vfprintf_r+0x1498>
80009c82:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009c86:	40 3c       	lddsp	r12,sp[0xc]
80009c88:	58 0c       	cp.w	r12,0
80009c8a:	c1 d0       	breq	80009cc4 <_vfprintf_r+0x1444>
80009c8c:	10 36       	cp.w	r6,r8
80009c8e:	c0 64       	brge	80009c9a <_vfprintf_r+0x141a>
80009c90:	fa cb f9 44 	sub	r11,sp,-1724
80009c94:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009c98:	c1 f8       	rjmp	80009cd6 <_vfprintf_r+0x1456>
80009c9a:	fa c8 f9 50 	sub	r8,sp,-1712
80009c9e:	1a d8       	st.w	--sp,r8
80009ca0:	fa c8 fa b8 	sub	r8,sp,-1352
80009ca4:	1a d8       	st.w	--sp,r8
80009ca6:	fa c8 fb b4 	sub	r8,sp,-1100
80009caa:	1a d8       	st.w	--sp,r8
80009cac:	fa c8 f9 40 	sub	r8,sp,-1728
80009cb0:	fa c9 ff b4 	sub	r9,sp,-76
80009cb4:	04 9a       	mov	r10,r2
80009cb6:	0c 9b       	mov	r11,r6
80009cb8:	0a 9c       	mov	r12,r5
80009cba:	fe b0 f4 49 	rcall	8000854c <get_arg>
80009cbe:	2f dd       	sub	sp,-12
80009cc0:	98 18       	ld.sh	r8,r12[0x2]
80009cc2:	c2 88       	rjmp	80009d12 <_vfprintf_r+0x1492>
80009cc4:	ee ca ff ff 	sub	r10,r7,-1
80009cc8:	10 37       	cp.w	r7,r8
80009cca:	c0 b4       	brge	80009ce0 <_vfprintf_r+0x1460>
80009ccc:	fa c9 f9 44 	sub	r9,sp,-1724
80009cd0:	14 97       	mov	r7,r10
80009cd2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009cd6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80009cda:	c1 c8       	rjmp	80009d12 <_vfprintf_r+0x1492>
80009cdc:	80 00       	ld.sh	r0,r0[0x0]
80009cde:	ed 60 41 09 	st.b	r6[16649],r0
80009ce2:	59 f8       	cp.w	r8,31
80009ce4:	e0 89 00 13 	brgt	80009d0a <_vfprintf_r+0x148a>
80009ce8:	f2 cb ff fc 	sub	r11,r9,-4
80009cec:	51 0b       	stdsp	sp[0x40],r11
80009cee:	72 09       	ld.w	r9,r9[0x0]
80009cf0:	fa c6 f9 44 	sub	r6,sp,-1724
80009cf4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80009cf8:	2f f8       	sub	r8,-1
80009cfa:	f7 49 fd 88 	st.w	r11[-632],r9
80009cfe:	fb 48 06 b4 	st.w	sp[1716],r8
80009d02:	14 97       	mov	r7,r10
80009d04:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80009d08:	c0 58       	rjmp	80009d12 <_vfprintf_r+0x1492>
80009d0a:	92 18       	ld.sh	r8,r9[0x2]
80009d0c:	14 97       	mov	r7,r10
80009d0e:	2f c9       	sub	r9,-4
80009d10:	51 09       	stdsp	sp[0x40],r9
80009d12:	5c 78       	castu.h	r8
80009d14:	50 18       	stdsp	sp[0x4],r8
80009d16:	c4 68       	rjmp	80009da2 <_vfprintf_r+0x1522>
80009d18:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009d1c:	40 3c       	lddsp	r12,sp[0xc]
80009d1e:	58 0c       	cp.w	r12,0
80009d20:	c1 d0       	breq	80009d5a <_vfprintf_r+0x14da>
80009d22:	10 36       	cp.w	r6,r8
80009d24:	c0 64       	brge	80009d30 <_vfprintf_r+0x14b0>
80009d26:	fa cb f9 44 	sub	r11,sp,-1724
80009d2a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009d2e:	c1 f8       	rjmp	80009d6c <_vfprintf_r+0x14ec>
80009d30:	fa c8 f9 50 	sub	r8,sp,-1712
80009d34:	1a d8       	st.w	--sp,r8
80009d36:	fa c8 fa b8 	sub	r8,sp,-1352
80009d3a:	0c 9b       	mov	r11,r6
80009d3c:	1a d8       	st.w	--sp,r8
80009d3e:	fa c8 fb b4 	sub	r8,sp,-1100
80009d42:	04 9a       	mov	r10,r2
80009d44:	1a d8       	st.w	--sp,r8
80009d46:	0a 9c       	mov	r12,r5
80009d48:	fa c8 f9 40 	sub	r8,sp,-1728
80009d4c:	fa c9 ff b4 	sub	r9,sp,-76
80009d50:	fe b0 f3 fe 	rcall	8000854c <get_arg>
80009d54:	2f dd       	sub	sp,-12
80009d56:	78 0b       	ld.w	r11,r12[0x0]
80009d58:	c2 48       	rjmp	80009da0 <_vfprintf_r+0x1520>
80009d5a:	ee ca ff ff 	sub	r10,r7,-1
80009d5e:	10 37       	cp.w	r7,r8
80009d60:	c0 94       	brge	80009d72 <_vfprintf_r+0x14f2>
80009d62:	fa c9 f9 44 	sub	r9,sp,-1724
80009d66:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009d6a:	14 97       	mov	r7,r10
80009d6c:	ec fb fd 88 	ld.w	r11,r6[-632]
80009d70:	c1 88       	rjmp	80009da0 <_vfprintf_r+0x1520>
80009d72:	41 09       	lddsp	r9,sp[0x40]
80009d74:	59 f8       	cp.w	r8,31
80009d76:	e0 89 00 11 	brgt	80009d98 <_vfprintf_r+0x1518>
80009d7a:	f2 cb ff fc 	sub	r11,r9,-4
80009d7e:	51 0b       	stdsp	sp[0x40],r11
80009d80:	fa c6 f9 44 	sub	r6,sp,-1724
80009d84:	72 0b       	ld.w	r11,r9[0x0]
80009d86:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009d8a:	f3 4b fd 88 	st.w	r9[-632],r11
80009d8e:	2f f8       	sub	r8,-1
80009d90:	14 97       	mov	r7,r10
80009d92:	fb 48 06 b4 	st.w	sp[1716],r8
80009d96:	c0 58       	rjmp	80009da0 <_vfprintf_r+0x1520>
80009d98:	72 0b       	ld.w	r11,r9[0x0]
80009d9a:	14 97       	mov	r7,r10
80009d9c:	2f c9       	sub	r9,-4
80009d9e:	51 09       	stdsp	sp[0x40],r9
80009da0:	50 1b       	stdsp	sp[0x4],r11
80009da2:	30 0e       	mov	lr,0
80009da4:	50 0e       	stdsp	sp[0x0],lr
80009da6:	40 08       	lddsp	r8,sp[0x0]
80009da8:	40 1c       	lddsp	r12,sp[0x4]
80009daa:	18 48       	or	r8,r12
80009dac:	5f 18       	srne	r8
80009dae:	e7 e8 00 08 	and	r8,r3,r8
80009db2:	c0 70       	breq	80009dc0 <_vfprintf_r+0x1540>
80009db4:	33 08       	mov	r8,48
80009db6:	fb 60 06 b9 	st.b	sp[1721],r0
80009dba:	a1 b3       	sbr	r3,0x1
80009dbc:	fb 68 06 b8 	st.b	sp[1720],r8
80009dc0:	30 28       	mov	r8,2
80009dc2:	30 09       	mov	r9,0
80009dc4:	fb 69 06 bb 	st.b	sp[1723],r9
80009dc8:	40 2b       	lddsp	r11,sp[0x8]
80009dca:	58 0b       	cp.w	r11,0
80009dcc:	c0 25       	brlt	80009dd0 <_vfprintf_r+0x1550>
80009dce:	a7 d3       	cbr	r3,0x7
80009dd0:	40 2a       	lddsp	r10,sp[0x8]
80009dd2:	40 09       	lddsp	r9,sp[0x0]
80009dd4:	58 0a       	cp.w	r10,0
80009dd6:	5f 1a       	srne	r10
80009dd8:	40 16       	lddsp	r6,sp[0x4]
80009dda:	fa c2 f9 78 	sub	r2,sp,-1672
80009dde:	0c 49       	or	r9,r6
80009de0:	5f 19       	srne	r9
80009de2:	f5 e9 10 09 	or	r9,r10,r9
80009de6:	c5 c0       	breq	80009e9e <_vfprintf_r+0x161e>
80009de8:	30 19       	mov	r9,1
80009dea:	f2 08 18 00 	cp.b	r8,r9
80009dee:	c0 60       	breq	80009dfa <_vfprintf_r+0x157a>
80009df0:	30 29       	mov	r9,2
80009df2:	f2 08 18 00 	cp.b	r8,r9
80009df6:	c0 41       	brne	80009dfe <_vfprintf_r+0x157e>
80009df8:	c3 c8       	rjmp	80009e70 <_vfprintf_r+0x15f0>
80009dfa:	04 96       	mov	r6,r2
80009dfc:	c3 08       	rjmp	80009e5c <_vfprintf_r+0x15dc>
80009dfe:	04 96       	mov	r6,r2
80009e00:	fa e8 00 00 	ld.d	r8,sp[0]
80009e04:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80009e08:	2d 0a       	sub	r10,-48
80009e0a:	0c fa       	st.b	--r6,r10
80009e0c:	f0 0b 16 03 	lsr	r11,r8,0x3
80009e10:	f2 0c 16 03 	lsr	r12,r9,0x3
80009e14:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80009e18:	18 99       	mov	r9,r12
80009e1a:	16 98       	mov	r8,r11
80009e1c:	58 08       	cp.w	r8,0
80009e1e:	5c 29       	cpc	r9
80009e20:	cf 21       	brne	80009e04 <_vfprintf_r+0x1584>
80009e22:	fa e9 00 00 	st.d	sp[0],r8
80009e26:	ed b3 00 00 	bld	r3,0x0
80009e2a:	c4 51       	brne	80009eb4 <_vfprintf_r+0x1634>
80009e2c:	33 09       	mov	r9,48
80009e2e:	f2 0a 18 00 	cp.b	r10,r9
80009e32:	c4 10       	breq	80009eb4 <_vfprintf_r+0x1634>
80009e34:	0c f9       	st.b	--r6,r9
80009e36:	c3 f8       	rjmp	80009eb4 <_vfprintf_r+0x1634>
80009e38:	fa ea 00 00 	ld.d	r10,sp[0]
80009e3c:	30 a8       	mov	r8,10
80009e3e:	30 09       	mov	r9,0
80009e40:	e0 a0 1e 6f 	rcall	8000db1e <__avr32_umod64>
80009e44:	30 a8       	mov	r8,10
80009e46:	2d 0a       	sub	r10,-48
80009e48:	30 09       	mov	r9,0
80009e4a:	ac 8a       	st.b	r6[0x0],r10
80009e4c:	fa ea 00 00 	ld.d	r10,sp[0]
80009e50:	e0 a0 1d 1e 	rcall	8000d88c <__avr32_udiv64>
80009e54:	16 99       	mov	r9,r11
80009e56:	14 98       	mov	r8,r10
80009e58:	fa e9 00 00 	st.d	sp[0],r8
80009e5c:	20 16       	sub	r6,1
80009e5e:	fa ea 00 00 	ld.d	r10,sp[0]
80009e62:	58 9a       	cp.w	r10,9
80009e64:	5c 2b       	cpc	r11
80009e66:	fe 9b ff e9 	brhi	80009e38 <_vfprintf_r+0x15b8>
80009e6a:	1b f8       	ld.ub	r8,sp[0x7]
80009e6c:	2d 08       	sub	r8,-48
80009e6e:	c2 08       	rjmp	80009eae <_vfprintf_r+0x162e>
80009e70:	04 96       	mov	r6,r2
80009e72:	fa e8 00 00 	ld.d	r8,sp[0]
80009e76:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80009e7a:	40 de       	lddsp	lr,sp[0x34]
80009e7c:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80009e80:	0c fa       	st.b	--r6,r10
80009e82:	f2 0b 16 04 	lsr	r11,r9,0x4
80009e86:	f0 0a 16 04 	lsr	r10,r8,0x4
80009e8a:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80009e8e:	16 99       	mov	r9,r11
80009e90:	14 98       	mov	r8,r10
80009e92:	58 08       	cp.w	r8,0
80009e94:	5c 29       	cpc	r9
80009e96:	cf 01       	brne	80009e76 <_vfprintf_r+0x15f6>
80009e98:	fa e9 00 00 	st.d	sp[0],r8
80009e9c:	c0 c8       	rjmp	80009eb4 <_vfprintf_r+0x1634>
80009e9e:	58 08       	cp.w	r8,0
80009ea0:	c0 91       	brne	80009eb2 <_vfprintf_r+0x1632>
80009ea2:	ed b3 00 00 	bld	r3,0x0
80009ea6:	c0 61       	brne	80009eb2 <_vfprintf_r+0x1632>
80009ea8:	fa c6 f9 79 	sub	r6,sp,-1671
80009eac:	33 08       	mov	r8,48
80009eae:	ac 88       	st.b	r6[0x0],r8
80009eb0:	c0 28       	rjmp	80009eb4 <_vfprintf_r+0x1634>
80009eb2:	04 96       	mov	r6,r2
80009eb4:	0c 12       	sub	r2,r6
80009eb6:	c1 c8       	rjmp	80009eee <_vfprintf_r+0x166e>
80009eb8:	50 a7       	stdsp	sp[0x28],r7
80009eba:	50 80       	stdsp	sp[0x20],r0
80009ebc:	40 94       	lddsp	r4,sp[0x24]
80009ebe:	0c 97       	mov	r7,r6
80009ec0:	10 90       	mov	r0,r8
80009ec2:	04 95       	mov	r5,r2
80009ec4:	40 41       	lddsp	r1,sp[0x10]
80009ec6:	58 08       	cp.w	r8,0
80009ec8:	e0 80 04 50 	breq	8000a768 <_vfprintf_r+0x1ee8>
80009ecc:	fb 68 06 60 	st.b	sp[1632],r8
80009ed0:	30 0c       	mov	r12,0
80009ed2:	30 08       	mov	r8,0
80009ed4:	30 12       	mov	r2,1
80009ed6:	fb 68 06 bb 	st.b	sp[1723],r8
80009eda:	50 2c       	stdsp	sp[0x8],r12
80009edc:	fa c6 f9 a0 	sub	r6,sp,-1632
80009ee0:	c0 78       	rjmp	80009eee <_vfprintf_r+0x166e>
80009ee2:	30 0b       	mov	r11,0
80009ee4:	50 2b       	stdsp	sp[0x8],r11
80009ee6:	c0 48       	rjmp	80009eee <_vfprintf_r+0x166e>
80009ee8:	40 22       	lddsp	r2,sp[0x8]
80009eea:	30 0a       	mov	r10,0
80009eec:	50 2a       	stdsp	sp[0x8],r10
80009eee:	40 29       	lddsp	r9,sp[0x8]
80009ef0:	e4 09 0c 49 	max	r9,r2,r9
80009ef4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80009ef8:	50 39       	stdsp	sp[0xc],r9
80009efa:	06 9e       	mov	lr,r3
80009efc:	30 09       	mov	r9,0
80009efe:	e2 1e 00 02 	andl	lr,0x2,COH
80009f02:	f2 08 18 00 	cp.b	r8,r9
80009f06:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80009f0a:	f7 b8 01 ff 	subne	r8,-1
80009f0e:	fb f8 1a 03 	st.wne	sp[0xc],r8
80009f12:	06 9b       	mov	r11,r3
80009f14:	58 0e       	cp.w	lr,0
80009f16:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80009f1a:	f7 bc 01 fe 	subne	r12,-2
80009f1e:	fb fc 1a 03 	st.wne	sp[0xc],r12
80009f22:	e2 1b 00 84 	andl	r11,0x84,COH
80009f26:	50 fe       	stdsp	sp[0x3c],lr
80009f28:	50 9b       	stdsp	sp[0x24],r11
80009f2a:	c4 51       	brne	80009fb4 <_vfprintf_r+0x1734>
80009f2c:	40 8a       	lddsp	r10,sp[0x20]
80009f2e:	40 39       	lddsp	r9,sp[0xc]
80009f30:	12 1a       	sub	r10,r9
80009f32:	50 4a       	stdsp	sp[0x10],r10
80009f34:	58 0a       	cp.w	r10,0
80009f36:	e0 89 00 1f 	brgt	80009f74 <_vfprintf_r+0x16f4>
80009f3a:	c3 d8       	rjmp	80009fb4 <_vfprintf_r+0x1734>
80009f3c:	2f 09       	sub	r9,-16
80009f3e:	2f f8       	sub	r8,-1
80009f40:	4c de       	lddpc	lr,8000a074 <_vfprintf_r+0x17f4>
80009f42:	31 0c       	mov	r12,16
80009f44:	fb 49 06 90 	st.w	sp[1680],r9
80009f48:	89 0e       	st.w	r4[0x0],lr
80009f4a:	89 1c       	st.w	r4[0x4],r12
80009f4c:	fb 48 06 8c 	st.w	sp[1676],r8
80009f50:	58 78       	cp.w	r8,7
80009f52:	e0 89 00 04 	brgt	80009f5a <_vfprintf_r+0x16da>
80009f56:	2f 84       	sub	r4,-8
80009f58:	c0 b8       	rjmp	80009f6e <_vfprintf_r+0x16ee>
80009f5a:	fa ca f9 78 	sub	r10,sp,-1672
80009f5e:	02 9b       	mov	r11,r1
80009f60:	0a 9c       	mov	r12,r5
80009f62:	fe b0 f4 81 	rcall	80008864 <__sprint_r>
80009f66:	e0 81 04 11 	brne	8000a788 <_vfprintf_r+0x1f08>
80009f6a:	fa c4 f9 e0 	sub	r4,sp,-1568
80009f6e:	40 4b       	lddsp	r11,sp[0x10]
80009f70:	21 0b       	sub	r11,16
80009f72:	50 4b       	stdsp	sp[0x10],r11
80009f74:	fa f9 06 90 	ld.w	r9,sp[1680]
80009f78:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009f7c:	4b ea       	lddpc	r10,8000a074 <_vfprintf_r+0x17f4>
80009f7e:	40 4e       	lddsp	lr,sp[0x10]
80009f80:	59 0e       	cp.w	lr,16
80009f82:	fe 99 ff dd 	brgt	80009f3c <_vfprintf_r+0x16bc>
80009f86:	1c 09       	add	r9,lr
80009f88:	2f f8       	sub	r8,-1
80009f8a:	89 0a       	st.w	r4[0x0],r10
80009f8c:	fb 49 06 90 	st.w	sp[1680],r9
80009f90:	89 1e       	st.w	r4[0x4],lr
80009f92:	fb 48 06 8c 	st.w	sp[1676],r8
80009f96:	58 78       	cp.w	r8,7
80009f98:	e0 89 00 04 	brgt	80009fa0 <_vfprintf_r+0x1720>
80009f9c:	2f 84       	sub	r4,-8
80009f9e:	c0 b8       	rjmp	80009fb4 <_vfprintf_r+0x1734>
80009fa0:	fa ca f9 78 	sub	r10,sp,-1672
80009fa4:	02 9b       	mov	r11,r1
80009fa6:	0a 9c       	mov	r12,r5
80009fa8:	fe b0 f4 5e 	rcall	80008864 <__sprint_r>
80009fac:	e0 81 03 ee 	brne	8000a788 <_vfprintf_r+0x1f08>
80009fb0:	fa c4 f9 e0 	sub	r4,sp,-1568
80009fb4:	30 09       	mov	r9,0
80009fb6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80009fba:	f2 08 18 00 	cp.b	r8,r9
80009fbe:	c1 f0       	breq	80009ffc <_vfprintf_r+0x177c>
80009fc0:	fa f8 06 90 	ld.w	r8,sp[1680]
80009fc4:	fa c9 f9 45 	sub	r9,sp,-1723
80009fc8:	2f f8       	sub	r8,-1
80009fca:	89 09       	st.w	r4[0x0],r9
80009fcc:	fb 48 06 90 	st.w	sp[1680],r8
80009fd0:	30 19       	mov	r9,1
80009fd2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009fd6:	89 19       	st.w	r4[0x4],r9
80009fd8:	2f f8       	sub	r8,-1
80009fda:	fb 48 06 8c 	st.w	sp[1676],r8
80009fde:	58 78       	cp.w	r8,7
80009fe0:	e0 89 00 04 	brgt	80009fe8 <_vfprintf_r+0x1768>
80009fe4:	2f 84       	sub	r4,-8
80009fe6:	c0 b8       	rjmp	80009ffc <_vfprintf_r+0x177c>
80009fe8:	fa ca f9 78 	sub	r10,sp,-1672
80009fec:	02 9b       	mov	r11,r1
80009fee:	0a 9c       	mov	r12,r5
80009ff0:	fe b0 f4 3a 	rcall	80008864 <__sprint_r>
80009ff4:	e0 81 03 ca 	brne	8000a788 <_vfprintf_r+0x1f08>
80009ff8:	fa c4 f9 e0 	sub	r4,sp,-1568
80009ffc:	40 fc       	lddsp	r12,sp[0x3c]
80009ffe:	58 0c       	cp.w	r12,0
8000a000:	c1 f0       	breq	8000a03e <_vfprintf_r+0x17be>
8000a002:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a006:	fa c9 f9 48 	sub	r9,sp,-1720
8000a00a:	2f e8       	sub	r8,-2
8000a00c:	89 09       	st.w	r4[0x0],r9
8000a00e:	fb 48 06 90 	st.w	sp[1680],r8
8000a012:	30 29       	mov	r9,2
8000a014:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a018:	89 19       	st.w	r4[0x4],r9
8000a01a:	2f f8       	sub	r8,-1
8000a01c:	fb 48 06 8c 	st.w	sp[1676],r8
8000a020:	58 78       	cp.w	r8,7
8000a022:	e0 89 00 04 	brgt	8000a02a <_vfprintf_r+0x17aa>
8000a026:	2f 84       	sub	r4,-8
8000a028:	c0 b8       	rjmp	8000a03e <_vfprintf_r+0x17be>
8000a02a:	fa ca f9 78 	sub	r10,sp,-1672
8000a02e:	02 9b       	mov	r11,r1
8000a030:	0a 9c       	mov	r12,r5
8000a032:	fe b0 f4 19 	rcall	80008864 <__sprint_r>
8000a036:	e0 81 03 a9 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a03a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a03e:	40 9b       	lddsp	r11,sp[0x24]
8000a040:	e0 4b 00 80 	cp.w	r11,128
8000a044:	c4 91       	brne	8000a0d6 <_vfprintf_r+0x1856>
8000a046:	40 8a       	lddsp	r10,sp[0x20]
8000a048:	40 39       	lddsp	r9,sp[0xc]
8000a04a:	12 1a       	sub	r10,r9
8000a04c:	50 4a       	stdsp	sp[0x10],r10
8000a04e:	58 0a       	cp.w	r10,0
8000a050:	e0 89 00 23 	brgt	8000a096 <_vfprintf_r+0x1816>
8000a054:	c4 18       	rjmp	8000a0d6 <_vfprintf_r+0x1856>
8000a056:	2f 09       	sub	r9,-16
8000a058:	2f f8       	sub	r8,-1
8000a05a:	48 8e       	lddpc	lr,8000a078 <_vfprintf_r+0x17f8>
8000a05c:	31 0c       	mov	r12,16
8000a05e:	fb 49 06 90 	st.w	sp[1680],r9
8000a062:	89 0e       	st.w	r4[0x0],lr
8000a064:	89 1c       	st.w	r4[0x4],r12
8000a066:	fb 48 06 8c 	st.w	sp[1676],r8
8000a06a:	58 78       	cp.w	r8,7
8000a06c:	e0 89 00 08 	brgt	8000a07c <_vfprintf_r+0x17fc>
8000a070:	2f 84       	sub	r4,-8
8000a072:	c0 f8       	rjmp	8000a090 <_vfprintf_r+0x1810>
8000a074:	80 00       	ld.sh	r0,r0[0x0]
8000a076:	ed 78 80 00 	stcond	r6[-32768],r8
8000a07a:	ed 88       	*unknown*
8000a07c:	fa ca f9 78 	sub	r10,sp,-1672
8000a080:	02 9b       	mov	r11,r1
8000a082:	0a 9c       	mov	r12,r5
8000a084:	fe b0 f3 f0 	rcall	80008864 <__sprint_r>
8000a088:	e0 81 03 80 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a08c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a090:	40 4b       	lddsp	r11,sp[0x10]
8000a092:	21 0b       	sub	r11,16
8000a094:	50 4b       	stdsp	sp[0x10],r11
8000a096:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a09a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a09e:	4c 6a       	lddpc	r10,8000a1b4 <_vfprintf_r+0x1934>
8000a0a0:	40 4e       	lddsp	lr,sp[0x10]
8000a0a2:	59 0e       	cp.w	lr,16
8000a0a4:	fe 99 ff d9 	brgt	8000a056 <_vfprintf_r+0x17d6>
8000a0a8:	1c 09       	add	r9,lr
8000a0aa:	2f f8       	sub	r8,-1
8000a0ac:	89 0a       	st.w	r4[0x0],r10
8000a0ae:	fb 49 06 90 	st.w	sp[1680],r9
8000a0b2:	89 1e       	st.w	r4[0x4],lr
8000a0b4:	fb 48 06 8c 	st.w	sp[1676],r8
8000a0b8:	58 78       	cp.w	r8,7
8000a0ba:	e0 89 00 04 	brgt	8000a0c2 <_vfprintf_r+0x1842>
8000a0be:	2f 84       	sub	r4,-8
8000a0c0:	c0 b8       	rjmp	8000a0d6 <_vfprintf_r+0x1856>
8000a0c2:	fa ca f9 78 	sub	r10,sp,-1672
8000a0c6:	02 9b       	mov	r11,r1
8000a0c8:	0a 9c       	mov	r12,r5
8000a0ca:	fe b0 f3 cd 	rcall	80008864 <__sprint_r>
8000a0ce:	e0 81 03 5d 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a0d2:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a0d6:	40 2c       	lddsp	r12,sp[0x8]
8000a0d8:	04 1c       	sub	r12,r2
8000a0da:	50 2c       	stdsp	sp[0x8],r12
8000a0dc:	58 0c       	cp.w	r12,0
8000a0de:	e0 89 00 1f 	brgt	8000a11c <_vfprintf_r+0x189c>
8000a0e2:	c3 d8       	rjmp	8000a15c <_vfprintf_r+0x18dc>
8000a0e4:	2f 09       	sub	r9,-16
8000a0e6:	2f f8       	sub	r8,-1
8000a0e8:	4b 3b       	lddpc	r11,8000a1b4 <_vfprintf_r+0x1934>
8000a0ea:	31 0a       	mov	r10,16
8000a0ec:	fb 49 06 90 	st.w	sp[1680],r9
8000a0f0:	89 0b       	st.w	r4[0x0],r11
8000a0f2:	89 1a       	st.w	r4[0x4],r10
8000a0f4:	fb 48 06 8c 	st.w	sp[1676],r8
8000a0f8:	58 78       	cp.w	r8,7
8000a0fa:	e0 89 00 04 	brgt	8000a102 <_vfprintf_r+0x1882>
8000a0fe:	2f 84       	sub	r4,-8
8000a100:	c0 b8       	rjmp	8000a116 <_vfprintf_r+0x1896>
8000a102:	fa ca f9 78 	sub	r10,sp,-1672
8000a106:	02 9b       	mov	r11,r1
8000a108:	0a 9c       	mov	r12,r5
8000a10a:	fe b0 f3 ad 	rcall	80008864 <__sprint_r>
8000a10e:	e0 81 03 3d 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a112:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a116:	40 29       	lddsp	r9,sp[0x8]
8000a118:	21 09       	sub	r9,16
8000a11a:	50 29       	stdsp	sp[0x8],r9
8000a11c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a120:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a124:	4a 4a       	lddpc	r10,8000a1b4 <_vfprintf_r+0x1934>
8000a126:	40 2e       	lddsp	lr,sp[0x8]
8000a128:	59 0e       	cp.w	lr,16
8000a12a:	fe 99 ff dd 	brgt	8000a0e4 <_vfprintf_r+0x1864>
8000a12e:	1c 09       	add	r9,lr
8000a130:	2f f8       	sub	r8,-1
8000a132:	89 0a       	st.w	r4[0x0],r10
8000a134:	fb 49 06 90 	st.w	sp[1680],r9
8000a138:	89 1e       	st.w	r4[0x4],lr
8000a13a:	fb 48 06 8c 	st.w	sp[1676],r8
8000a13e:	58 78       	cp.w	r8,7
8000a140:	e0 89 00 04 	brgt	8000a148 <_vfprintf_r+0x18c8>
8000a144:	2f 84       	sub	r4,-8
8000a146:	c0 b8       	rjmp	8000a15c <_vfprintf_r+0x18dc>
8000a148:	fa ca f9 78 	sub	r10,sp,-1672
8000a14c:	02 9b       	mov	r11,r1
8000a14e:	0a 9c       	mov	r12,r5
8000a150:	fe b0 f3 8a 	rcall	80008864 <__sprint_r>
8000a154:	e0 81 03 1a 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a158:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a15c:	ed b3 00 08 	bld	r3,0x8
8000a160:	c0 b0       	breq	8000a176 <_vfprintf_r+0x18f6>
8000a162:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a166:	89 12       	st.w	r4[0x4],r2
8000a168:	89 06       	st.w	r4[0x0],r6
8000a16a:	f0 02 00 02 	add	r2,r8,r2
8000a16e:	fb 42 06 90 	st.w	sp[1680],r2
8000a172:	e0 8f 01 d5 	bral	8000a51c <_vfprintf_r+0x1c9c>
8000a176:	e0 40 00 65 	cp.w	r0,101
8000a17a:	e0 8a 01 d7 	brle	8000a528 <_vfprintf_r+0x1ca8>
8000a17e:	30 08       	mov	r8,0
8000a180:	30 09       	mov	r9,0
8000a182:	40 5b       	lddsp	r11,sp[0x14]
8000a184:	40 7a       	lddsp	r10,sp[0x1c]
8000a186:	e0 a0 19 7c 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000a18a:	c7 a0       	breq	8000a27e <_vfprintf_r+0x19fe>
8000a18c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a190:	48 a9       	lddpc	r9,8000a1b8 <_vfprintf_r+0x1938>
8000a192:	2f f8       	sub	r8,-1
8000a194:	89 09       	st.w	r4[0x0],r9
8000a196:	fb 48 06 90 	st.w	sp[1680],r8
8000a19a:	30 19       	mov	r9,1
8000a19c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a1a0:	89 19       	st.w	r4[0x4],r9
8000a1a2:	2f f8       	sub	r8,-1
8000a1a4:	fb 48 06 8c 	st.w	sp[1676],r8
8000a1a8:	58 78       	cp.w	r8,7
8000a1aa:	e0 89 00 09 	brgt	8000a1bc <_vfprintf_r+0x193c>
8000a1ae:	2f 84       	sub	r4,-8
8000a1b0:	c1 08       	rjmp	8000a1d0 <_vfprintf_r+0x1950>
8000a1b2:	d7 03       	nop
8000a1b4:	80 00       	ld.sh	r0,r0[0x0]
8000a1b6:	ed 88       	*unknown*
8000a1b8:	80 00       	ld.sh	r0,r0[0x0]
8000a1ba:	ed 74 fa ca 	stcond	r6[-1334],r4
8000a1be:	f9 78 02 9b 	stcond	r12[667],r8
8000a1c2:	0a 9c       	mov	r12,r5
8000a1c4:	fe b0 f3 50 	rcall	80008864 <__sprint_r>
8000a1c8:	e0 81 02 e0 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a1cc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a1d0:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a1d4:	40 6c       	lddsp	r12,sp[0x18]
8000a1d6:	18 38       	cp.w	r8,r12
8000a1d8:	c0 55       	brlt	8000a1e2 <_vfprintf_r+0x1962>
8000a1da:	ed b3 00 00 	bld	r3,0x0
8000a1de:	e0 81 02 69 	brne	8000a6b0 <_vfprintf_r+0x1e30>
8000a1e2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a1e6:	2f f8       	sub	r8,-1
8000a1e8:	40 cb       	lddsp	r11,sp[0x30]
8000a1ea:	fb 48 06 90 	st.w	sp[1680],r8
8000a1ee:	30 19       	mov	r9,1
8000a1f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a1f4:	89 0b       	st.w	r4[0x0],r11
8000a1f6:	2f f8       	sub	r8,-1
8000a1f8:	89 19       	st.w	r4[0x4],r9
8000a1fa:	fb 48 06 8c 	st.w	sp[1676],r8
8000a1fe:	58 78       	cp.w	r8,7
8000a200:	e0 89 00 04 	brgt	8000a208 <_vfprintf_r+0x1988>
8000a204:	2f 84       	sub	r4,-8
8000a206:	c0 b8       	rjmp	8000a21c <_vfprintf_r+0x199c>
8000a208:	fa ca f9 78 	sub	r10,sp,-1672
8000a20c:	02 9b       	mov	r11,r1
8000a20e:	0a 9c       	mov	r12,r5
8000a210:	fe b0 f3 2a 	rcall	80008864 <__sprint_r>
8000a214:	e0 81 02 ba 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a218:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a21c:	40 66       	lddsp	r6,sp[0x18]
8000a21e:	20 16       	sub	r6,1
8000a220:	58 06       	cp.w	r6,0
8000a222:	e0 89 00 1d 	brgt	8000a25c <_vfprintf_r+0x19dc>
8000a226:	e0 8f 02 45 	bral	8000a6b0 <_vfprintf_r+0x1e30>
8000a22a:	2f 09       	sub	r9,-16
8000a22c:	2f f8       	sub	r8,-1
8000a22e:	fb 49 06 90 	st.w	sp[1680],r9
8000a232:	89 02       	st.w	r4[0x0],r2
8000a234:	89 10       	st.w	r4[0x4],r0
8000a236:	fb 48 06 8c 	st.w	sp[1676],r8
8000a23a:	58 78       	cp.w	r8,7
8000a23c:	e0 89 00 04 	brgt	8000a244 <_vfprintf_r+0x19c4>
8000a240:	2f 84       	sub	r4,-8
8000a242:	c0 b8       	rjmp	8000a258 <_vfprintf_r+0x19d8>
8000a244:	fa ca f9 78 	sub	r10,sp,-1672
8000a248:	02 9b       	mov	r11,r1
8000a24a:	0a 9c       	mov	r12,r5
8000a24c:	fe b0 f3 0c 	rcall	80008864 <__sprint_r>
8000a250:	e0 81 02 9c 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a254:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a258:	21 06       	sub	r6,16
8000a25a:	c0 38       	rjmp	8000a260 <_vfprintf_r+0x19e0>
8000a25c:	4d 22       	lddpc	r2,8000a3a4 <_vfprintf_r+0x1b24>
8000a25e:	31 00       	mov	r0,16
8000a260:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a264:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a268:	4c fa       	lddpc	r10,8000a3a4 <_vfprintf_r+0x1b24>
8000a26a:	59 06       	cp.w	r6,16
8000a26c:	fe 99 ff df 	brgt	8000a22a <_vfprintf_r+0x19aa>
8000a270:	0c 09       	add	r9,r6
8000a272:	89 0a       	st.w	r4[0x0],r10
8000a274:	fb 49 06 90 	st.w	sp[1680],r9
8000a278:	2f f8       	sub	r8,-1
8000a27a:	89 16       	st.w	r4[0x4],r6
8000a27c:	c5 39       	rjmp	8000a522 <_vfprintf_r+0x1ca2>
8000a27e:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000a282:	58 0a       	cp.w	r10,0
8000a284:	e0 89 00 94 	brgt	8000a3ac <_vfprintf_r+0x1b2c>
8000a288:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a28c:	4c 79       	lddpc	r9,8000a3a8 <_vfprintf_r+0x1b28>
8000a28e:	2f f8       	sub	r8,-1
8000a290:	89 09       	st.w	r4[0x0],r9
8000a292:	fb 48 06 90 	st.w	sp[1680],r8
8000a296:	30 19       	mov	r9,1
8000a298:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a29c:	89 19       	st.w	r4[0x4],r9
8000a29e:	2f f8       	sub	r8,-1
8000a2a0:	fb 48 06 8c 	st.w	sp[1676],r8
8000a2a4:	58 78       	cp.w	r8,7
8000a2a6:	e0 89 00 04 	brgt	8000a2ae <_vfprintf_r+0x1a2e>
8000a2aa:	2f 84       	sub	r4,-8
8000a2ac:	c0 b8       	rjmp	8000a2c2 <_vfprintf_r+0x1a42>
8000a2ae:	fa ca f9 78 	sub	r10,sp,-1672
8000a2b2:	02 9b       	mov	r11,r1
8000a2b4:	0a 9c       	mov	r12,r5
8000a2b6:	fe b0 f2 d7 	rcall	80008864 <__sprint_r>
8000a2ba:	e0 81 02 67 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a2be:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a2c2:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a2c6:	58 08       	cp.w	r8,0
8000a2c8:	c0 81       	brne	8000a2d8 <_vfprintf_r+0x1a58>
8000a2ca:	40 6a       	lddsp	r10,sp[0x18]
8000a2cc:	58 0a       	cp.w	r10,0
8000a2ce:	c0 51       	brne	8000a2d8 <_vfprintf_r+0x1a58>
8000a2d0:	ed b3 00 00 	bld	r3,0x0
8000a2d4:	e0 81 01 ee 	brne	8000a6b0 <_vfprintf_r+0x1e30>
8000a2d8:	40 c9       	lddsp	r9,sp[0x30]
8000a2da:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a2de:	2f f8       	sub	r8,-1
8000a2e0:	89 09       	st.w	r4[0x0],r9
8000a2e2:	fb 48 06 90 	st.w	sp[1680],r8
8000a2e6:	30 19       	mov	r9,1
8000a2e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a2ec:	89 19       	st.w	r4[0x4],r9
8000a2ee:	2f f8       	sub	r8,-1
8000a2f0:	fb 48 06 8c 	st.w	sp[1676],r8
8000a2f4:	58 78       	cp.w	r8,7
8000a2f6:	e0 89 00 04 	brgt	8000a2fe <_vfprintf_r+0x1a7e>
8000a2fa:	2f 84       	sub	r4,-8
8000a2fc:	c0 b8       	rjmp	8000a312 <_vfprintf_r+0x1a92>
8000a2fe:	fa ca f9 78 	sub	r10,sp,-1672
8000a302:	02 9b       	mov	r11,r1
8000a304:	0a 9c       	mov	r12,r5
8000a306:	fe b0 f2 af 	rcall	80008864 <__sprint_r>
8000a30a:	e0 81 02 3f 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a30e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a312:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000a316:	5c 32       	neg	r2
8000a318:	58 02       	cp.w	r2,0
8000a31a:	e0 89 00 1d 	brgt	8000a354 <_vfprintf_r+0x1ad4>
8000a31e:	c3 b8       	rjmp	8000a394 <_vfprintf_r+0x1b14>
8000a320:	2f 09       	sub	r9,-16
8000a322:	2f f8       	sub	r8,-1
8000a324:	31 0e       	mov	lr,16
8000a326:	fb 49 06 90 	st.w	sp[1680],r9
8000a32a:	89 00       	st.w	r4[0x0],r0
8000a32c:	89 1e       	st.w	r4[0x4],lr
8000a32e:	fb 48 06 8c 	st.w	sp[1676],r8
8000a332:	58 78       	cp.w	r8,7
8000a334:	e0 89 00 04 	brgt	8000a33c <_vfprintf_r+0x1abc>
8000a338:	2f 84       	sub	r4,-8
8000a33a:	c0 b8       	rjmp	8000a350 <_vfprintf_r+0x1ad0>
8000a33c:	fa ca f9 78 	sub	r10,sp,-1672
8000a340:	02 9b       	mov	r11,r1
8000a342:	0a 9c       	mov	r12,r5
8000a344:	fe b0 f2 90 	rcall	80008864 <__sprint_r>
8000a348:	e0 81 02 20 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a34c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a350:	21 02       	sub	r2,16
8000a352:	c0 28       	rjmp	8000a356 <_vfprintf_r+0x1ad6>
8000a354:	49 40       	lddpc	r0,8000a3a4 <_vfprintf_r+0x1b24>
8000a356:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a35a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a35e:	49 2a       	lddpc	r10,8000a3a4 <_vfprintf_r+0x1b24>
8000a360:	59 02       	cp.w	r2,16
8000a362:	fe 99 ff df 	brgt	8000a320 <_vfprintf_r+0x1aa0>
8000a366:	04 09       	add	r9,r2
8000a368:	2f f8       	sub	r8,-1
8000a36a:	89 0a       	st.w	r4[0x0],r10
8000a36c:	fb 49 06 90 	st.w	sp[1680],r9
8000a370:	89 12       	st.w	r4[0x4],r2
8000a372:	fb 48 06 8c 	st.w	sp[1676],r8
8000a376:	58 78       	cp.w	r8,7
8000a378:	e0 89 00 04 	brgt	8000a380 <_vfprintf_r+0x1b00>
8000a37c:	2f 84       	sub	r4,-8
8000a37e:	c0 b8       	rjmp	8000a394 <_vfprintf_r+0x1b14>
8000a380:	fa ca f9 78 	sub	r10,sp,-1672
8000a384:	02 9b       	mov	r11,r1
8000a386:	0a 9c       	mov	r12,r5
8000a388:	fe b0 f2 6e 	rcall	80008864 <__sprint_r>
8000a38c:	e0 81 01 fe 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a390:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a394:	40 6c       	lddsp	r12,sp[0x18]
8000a396:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a39a:	89 06       	st.w	r4[0x0],r6
8000a39c:	89 1c       	st.w	r4[0x4],r12
8000a39e:	18 08       	add	r8,r12
8000a3a0:	cb c8       	rjmp	8000a518 <_vfprintf_r+0x1c98>
8000a3a2:	d7 03       	nop
8000a3a4:	80 00       	ld.sh	r0,r0[0x0]
8000a3a6:	ed 88       	*unknown*
8000a3a8:	80 00       	ld.sh	r0,r0[0x0]
8000a3aa:	ed 74 fa f9 	stcond	r6[-1287],r4
8000a3ae:	06 90       	mov	r0,r3
8000a3b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a3b4:	40 6b       	lddsp	r11,sp[0x18]
8000a3b6:	16 3a       	cp.w	r10,r11
8000a3b8:	c6 d5       	brlt	8000a492 <_vfprintf_r+0x1c12>
8000a3ba:	16 09       	add	r9,r11
8000a3bc:	2f f8       	sub	r8,-1
8000a3be:	89 06       	st.w	r4[0x0],r6
8000a3c0:	fb 49 06 90 	st.w	sp[1680],r9
8000a3c4:	89 1b       	st.w	r4[0x4],r11
8000a3c6:	fb 48 06 8c 	st.w	sp[1676],r8
8000a3ca:	58 78       	cp.w	r8,7
8000a3cc:	e0 89 00 04 	brgt	8000a3d4 <_vfprintf_r+0x1b54>
8000a3d0:	2f 84       	sub	r4,-8
8000a3d2:	c0 b8       	rjmp	8000a3e8 <_vfprintf_r+0x1b68>
8000a3d4:	fa ca f9 78 	sub	r10,sp,-1672
8000a3d8:	02 9b       	mov	r11,r1
8000a3da:	0a 9c       	mov	r12,r5
8000a3dc:	fe b0 f2 44 	rcall	80008864 <__sprint_r>
8000a3e0:	e0 81 01 d4 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a3e4:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a3e8:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000a3ec:	40 6a       	lddsp	r10,sp[0x18]
8000a3ee:	14 16       	sub	r6,r10
8000a3f0:	58 06       	cp.w	r6,0
8000a3f2:	e0 89 00 1c 	brgt	8000a42a <_vfprintf_r+0x1baa>
8000a3f6:	c3 b8       	rjmp	8000a46c <_vfprintf_r+0x1bec>
8000a3f8:	2f 09       	sub	r9,-16
8000a3fa:	2f f8       	sub	r8,-1
8000a3fc:	fb 49 06 90 	st.w	sp[1680],r9
8000a400:	89 02       	st.w	r4[0x0],r2
8000a402:	89 10       	st.w	r4[0x4],r0
8000a404:	fb 48 06 8c 	st.w	sp[1676],r8
8000a408:	58 78       	cp.w	r8,7
8000a40a:	e0 89 00 04 	brgt	8000a412 <_vfprintf_r+0x1b92>
8000a40e:	2f 84       	sub	r4,-8
8000a410:	c0 b8       	rjmp	8000a426 <_vfprintf_r+0x1ba6>
8000a412:	fa ca f9 78 	sub	r10,sp,-1672
8000a416:	02 9b       	mov	r11,r1
8000a418:	0a 9c       	mov	r12,r5
8000a41a:	fe b0 f2 25 	rcall	80008864 <__sprint_r>
8000a41e:	e0 81 01 b5 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a422:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a426:	21 06       	sub	r6,16
8000a428:	c0 38       	rjmp	8000a42e <_vfprintf_r+0x1bae>
8000a42a:	4d c2       	lddpc	r2,8000a598 <_vfprintf_r+0x1d18>
8000a42c:	31 00       	mov	r0,16
8000a42e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a432:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a436:	4d 9a       	lddpc	r10,8000a598 <_vfprintf_r+0x1d18>
8000a438:	59 06       	cp.w	r6,16
8000a43a:	fe 99 ff df 	brgt	8000a3f8 <_vfprintf_r+0x1b78>
8000a43e:	0c 09       	add	r9,r6
8000a440:	2f f8       	sub	r8,-1
8000a442:	89 0a       	st.w	r4[0x0],r10
8000a444:	fb 49 06 90 	st.w	sp[1680],r9
8000a448:	89 16       	st.w	r4[0x4],r6
8000a44a:	fb 48 06 8c 	st.w	sp[1676],r8
8000a44e:	58 78       	cp.w	r8,7
8000a450:	e0 89 00 04 	brgt	8000a458 <_vfprintf_r+0x1bd8>
8000a454:	2f 84       	sub	r4,-8
8000a456:	c0 b8       	rjmp	8000a46c <_vfprintf_r+0x1bec>
8000a458:	fa ca f9 78 	sub	r10,sp,-1672
8000a45c:	02 9b       	mov	r11,r1
8000a45e:	0a 9c       	mov	r12,r5
8000a460:	fe b0 f2 02 	rcall	80008864 <__sprint_r>
8000a464:	e0 81 01 92 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a468:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a46c:	ed b3 00 00 	bld	r3,0x0
8000a470:	e0 81 01 20 	brne	8000a6b0 <_vfprintf_r+0x1e30>
8000a474:	40 c9       	lddsp	r9,sp[0x30]
8000a476:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a47a:	2f f8       	sub	r8,-1
8000a47c:	89 09       	st.w	r4[0x0],r9
8000a47e:	fb 48 06 90 	st.w	sp[1680],r8
8000a482:	30 19       	mov	r9,1
8000a484:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a488:	89 19       	st.w	r4[0x4],r9
8000a48a:	2f f8       	sub	r8,-1
8000a48c:	fb 48 06 8c 	st.w	sp[1676],r8
8000a490:	c0 29       	rjmp	8000a694 <_vfprintf_r+0x1e14>
8000a492:	14 09       	add	r9,r10
8000a494:	2f f8       	sub	r8,-1
8000a496:	fb 49 06 90 	st.w	sp[1680],r9
8000a49a:	89 06       	st.w	r4[0x0],r6
8000a49c:	89 1a       	st.w	r4[0x4],r10
8000a49e:	fb 48 06 8c 	st.w	sp[1676],r8
8000a4a2:	58 78       	cp.w	r8,7
8000a4a4:	e0 89 00 04 	brgt	8000a4ac <_vfprintf_r+0x1c2c>
8000a4a8:	2f 84       	sub	r4,-8
8000a4aa:	c0 b8       	rjmp	8000a4c0 <_vfprintf_r+0x1c40>
8000a4ac:	fa ca f9 78 	sub	r10,sp,-1672
8000a4b0:	02 9b       	mov	r11,r1
8000a4b2:	0a 9c       	mov	r12,r5
8000a4b4:	fe b0 f1 d8 	rcall	80008864 <__sprint_r>
8000a4b8:	e0 81 01 68 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a4bc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a4c0:	40 c8       	lddsp	r8,sp[0x30]
8000a4c2:	89 08       	st.w	r4[0x0],r8
8000a4c4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a4c8:	2f f8       	sub	r8,-1
8000a4ca:	30 19       	mov	r9,1
8000a4cc:	fb 48 06 90 	st.w	sp[1680],r8
8000a4d0:	89 19       	st.w	r4[0x4],r9
8000a4d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a4d6:	2f f8       	sub	r8,-1
8000a4d8:	fb 48 06 8c 	st.w	sp[1676],r8
8000a4dc:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000a4e0:	58 78       	cp.w	r8,7
8000a4e2:	e0 89 00 04 	brgt	8000a4ea <_vfprintf_r+0x1c6a>
8000a4e6:	2f 84       	sub	r4,-8
8000a4e8:	c0 b8       	rjmp	8000a4fe <_vfprintf_r+0x1c7e>
8000a4ea:	fa ca f9 78 	sub	r10,sp,-1672
8000a4ee:	02 9b       	mov	r11,r1
8000a4f0:	0a 9c       	mov	r12,r5
8000a4f2:	fe b0 f1 b9 	rcall	80008864 <__sprint_r>
8000a4f6:	e0 81 01 49 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a4fa:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a4fe:	04 06       	add	r6,r2
8000a500:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a504:	89 06       	st.w	r4[0x0],r6
8000a506:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a50a:	40 66       	lddsp	r6,sp[0x18]
8000a50c:	40 6e       	lddsp	lr,sp[0x18]
8000a50e:	10 16       	sub	r6,r8
8000a510:	f2 08 01 08 	sub	r8,r9,r8
8000a514:	89 16       	st.w	r4[0x4],r6
8000a516:	1c 08       	add	r8,lr
8000a518:	fb 48 06 90 	st.w	sp[1680],r8
8000a51c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a520:	2f f8       	sub	r8,-1
8000a522:	fb 48 06 8c 	st.w	sp[1676],r8
8000a526:	cb 78       	rjmp	8000a694 <_vfprintf_r+0x1e14>
8000a528:	40 6c       	lddsp	r12,sp[0x18]
8000a52a:	58 1c       	cp.w	r12,1
8000a52c:	e0 89 00 06 	brgt	8000a538 <_vfprintf_r+0x1cb8>
8000a530:	ed b3 00 00 	bld	r3,0x0
8000a534:	e0 81 00 85 	brne	8000a63e <_vfprintf_r+0x1dbe>
8000a538:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a53c:	2f f8       	sub	r8,-1
8000a53e:	30 19       	mov	r9,1
8000a540:	fb 48 06 90 	st.w	sp[1680],r8
8000a544:	89 06       	st.w	r4[0x0],r6
8000a546:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a54a:	89 19       	st.w	r4[0x4],r9
8000a54c:	2f f8       	sub	r8,-1
8000a54e:	fb 48 06 8c 	st.w	sp[1676],r8
8000a552:	58 78       	cp.w	r8,7
8000a554:	e0 89 00 04 	brgt	8000a55c <_vfprintf_r+0x1cdc>
8000a558:	2f 84       	sub	r4,-8
8000a55a:	c0 b8       	rjmp	8000a570 <_vfprintf_r+0x1cf0>
8000a55c:	fa ca f9 78 	sub	r10,sp,-1672
8000a560:	02 9b       	mov	r11,r1
8000a562:	0a 9c       	mov	r12,r5
8000a564:	fe b0 f1 80 	rcall	80008864 <__sprint_r>
8000a568:	e0 81 01 10 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a56c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a570:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a574:	2f f8       	sub	r8,-1
8000a576:	40 cb       	lddsp	r11,sp[0x30]
8000a578:	fb 48 06 90 	st.w	sp[1680],r8
8000a57c:	30 19       	mov	r9,1
8000a57e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a582:	89 0b       	st.w	r4[0x0],r11
8000a584:	2f f8       	sub	r8,-1
8000a586:	89 19       	st.w	r4[0x4],r9
8000a588:	fb 48 06 8c 	st.w	sp[1676],r8
8000a58c:	58 78       	cp.w	r8,7
8000a58e:	e0 89 00 07 	brgt	8000a59c <_vfprintf_r+0x1d1c>
8000a592:	2f 84       	sub	r4,-8
8000a594:	c0 e8       	rjmp	8000a5b0 <_vfprintf_r+0x1d30>
8000a596:	d7 03       	nop
8000a598:	80 00       	ld.sh	r0,r0[0x0]
8000a59a:	ed 88       	*unknown*
8000a59c:	fa ca f9 78 	sub	r10,sp,-1672
8000a5a0:	02 9b       	mov	r11,r1
8000a5a2:	0a 9c       	mov	r12,r5
8000a5a4:	fe b0 f1 60 	rcall	80008864 <__sprint_r>
8000a5a8:	e0 81 00 f0 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a5ac:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a5b0:	30 08       	mov	r8,0
8000a5b2:	30 09       	mov	r9,0
8000a5b4:	40 5b       	lddsp	r11,sp[0x14]
8000a5b6:	40 7a       	lddsp	r10,sp[0x1c]
8000a5b8:	e0 a0 17 63 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000a5bc:	40 68       	lddsp	r8,sp[0x18]
8000a5be:	20 18       	sub	r8,1
8000a5c0:	58 0c       	cp.w	r12,0
8000a5c2:	c0 d1       	brne	8000a5dc <_vfprintf_r+0x1d5c>
8000a5c4:	2f f6       	sub	r6,-1
8000a5c6:	89 18       	st.w	r4[0x4],r8
8000a5c8:	89 06       	st.w	r4[0x0],r6
8000a5ca:	fa f6 06 90 	ld.w	r6,sp[1680]
8000a5ce:	10 06       	add	r6,r8
8000a5d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a5d4:	fb 46 06 90 	st.w	sp[1680],r6
8000a5d8:	2f f8       	sub	r8,-1
8000a5da:	c2 f8       	rjmp	8000a638 <_vfprintf_r+0x1db8>
8000a5dc:	10 96       	mov	r6,r8
8000a5de:	58 08       	cp.w	r8,0
8000a5e0:	e0 89 00 1c 	brgt	8000a618 <_vfprintf_r+0x1d98>
8000a5e4:	c4 98       	rjmp	8000a676 <_vfprintf_r+0x1df6>
8000a5e6:	2f 09       	sub	r9,-16
8000a5e8:	2f f8       	sub	r8,-1
8000a5ea:	fb 49 06 90 	st.w	sp[1680],r9
8000a5ee:	89 02       	st.w	r4[0x0],r2
8000a5f0:	89 10       	st.w	r4[0x4],r0
8000a5f2:	fb 48 06 8c 	st.w	sp[1676],r8
8000a5f6:	58 78       	cp.w	r8,7
8000a5f8:	e0 89 00 04 	brgt	8000a600 <_vfprintf_r+0x1d80>
8000a5fc:	2f 84       	sub	r4,-8
8000a5fe:	c0 b8       	rjmp	8000a614 <_vfprintf_r+0x1d94>
8000a600:	fa ca f9 78 	sub	r10,sp,-1672
8000a604:	02 9b       	mov	r11,r1
8000a606:	0a 9c       	mov	r12,r5
8000a608:	fe b0 f1 2e 	rcall	80008864 <__sprint_r>
8000a60c:	e0 81 00 be 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a610:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a614:	21 06       	sub	r6,16
8000a616:	c0 38       	rjmp	8000a61c <_vfprintf_r+0x1d9c>
8000a618:	4d 22       	lddpc	r2,8000a760 <_vfprintf_r+0x1ee0>
8000a61a:	31 00       	mov	r0,16
8000a61c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a620:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a624:	4c fa       	lddpc	r10,8000a760 <_vfprintf_r+0x1ee0>
8000a626:	59 06       	cp.w	r6,16
8000a628:	fe 99 ff df 	brgt	8000a5e6 <_vfprintf_r+0x1d66>
8000a62c:	0c 09       	add	r9,r6
8000a62e:	89 0a       	st.w	r4[0x0],r10
8000a630:	fb 49 06 90 	st.w	sp[1680],r9
8000a634:	2f f8       	sub	r8,-1
8000a636:	89 16       	st.w	r4[0x4],r6
8000a638:	fb 48 06 8c 	st.w	sp[1676],r8
8000a63c:	c0 e8       	rjmp	8000a658 <_vfprintf_r+0x1dd8>
8000a63e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a642:	2f f8       	sub	r8,-1
8000a644:	30 19       	mov	r9,1
8000a646:	fb 48 06 90 	st.w	sp[1680],r8
8000a64a:	89 06       	st.w	r4[0x0],r6
8000a64c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a650:	89 19       	st.w	r4[0x4],r9
8000a652:	2f f8       	sub	r8,-1
8000a654:	fb 48 06 8c 	st.w	sp[1676],r8
8000a658:	58 78       	cp.w	r8,7
8000a65a:	e0 89 00 04 	brgt	8000a662 <_vfprintf_r+0x1de2>
8000a65e:	2f 84       	sub	r4,-8
8000a660:	c0 b8       	rjmp	8000a676 <_vfprintf_r+0x1df6>
8000a662:	fa ca f9 78 	sub	r10,sp,-1672
8000a666:	02 9b       	mov	r11,r1
8000a668:	0a 9c       	mov	r12,r5
8000a66a:	fe b0 f0 fd 	rcall	80008864 <__sprint_r>
8000a66e:	e0 81 00 8d 	brne	8000a788 <_vfprintf_r+0x1f08>
8000a672:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a676:	40 ea       	lddsp	r10,sp[0x38]
8000a678:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a67c:	14 08       	add	r8,r10
8000a67e:	fa c9 f9 64 	sub	r9,sp,-1692
8000a682:	fb 48 06 90 	st.w	sp[1680],r8
8000a686:	89 1a       	st.w	r4[0x4],r10
8000a688:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a68c:	89 09       	st.w	r4[0x0],r9
8000a68e:	2f f8       	sub	r8,-1
8000a690:	fb 48 06 8c 	st.w	sp[1676],r8
8000a694:	58 78       	cp.w	r8,7
8000a696:	e0 89 00 04 	brgt	8000a69e <_vfprintf_r+0x1e1e>
8000a69a:	2f 84       	sub	r4,-8
8000a69c:	c0 a8       	rjmp	8000a6b0 <_vfprintf_r+0x1e30>
8000a69e:	fa ca f9 78 	sub	r10,sp,-1672
8000a6a2:	02 9b       	mov	r11,r1
8000a6a4:	0a 9c       	mov	r12,r5
8000a6a6:	fe b0 f0 df 	rcall	80008864 <__sprint_r>
8000a6aa:	c6 f1       	brne	8000a788 <_vfprintf_r+0x1f08>
8000a6ac:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a6b0:	e2 13 00 04 	andl	r3,0x4,COH
8000a6b4:	c3 d0       	breq	8000a72e <_vfprintf_r+0x1eae>
8000a6b6:	40 86       	lddsp	r6,sp[0x20]
8000a6b8:	40 39       	lddsp	r9,sp[0xc]
8000a6ba:	12 16       	sub	r6,r9
8000a6bc:	58 06       	cp.w	r6,0
8000a6be:	e0 89 00 1a 	brgt	8000a6f2 <_vfprintf_r+0x1e72>
8000a6c2:	c3 68       	rjmp	8000a72e <_vfprintf_r+0x1eae>
8000a6c4:	2f 09       	sub	r9,-16
8000a6c6:	2f f8       	sub	r8,-1
8000a6c8:	fb 49 06 90 	st.w	sp[1680],r9
8000a6cc:	89 03       	st.w	r4[0x0],r3
8000a6ce:	89 12       	st.w	r4[0x4],r2
8000a6d0:	fb 48 06 8c 	st.w	sp[1676],r8
8000a6d4:	58 78       	cp.w	r8,7
8000a6d6:	e0 89 00 04 	brgt	8000a6de <_vfprintf_r+0x1e5e>
8000a6da:	2f 84       	sub	r4,-8
8000a6dc:	c0 98       	rjmp	8000a6ee <_vfprintf_r+0x1e6e>
8000a6de:	00 9a       	mov	r10,r0
8000a6e0:	02 9b       	mov	r11,r1
8000a6e2:	0a 9c       	mov	r12,r5
8000a6e4:	fe b0 f0 c0 	rcall	80008864 <__sprint_r>
8000a6e8:	c5 01       	brne	8000a788 <_vfprintf_r+0x1f08>
8000a6ea:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a6ee:	21 06       	sub	r6,16
8000a6f0:	c0 58       	rjmp	8000a6fa <_vfprintf_r+0x1e7a>
8000a6f2:	49 d3       	lddpc	r3,8000a764 <_vfprintf_r+0x1ee4>
8000a6f4:	31 02       	mov	r2,16
8000a6f6:	fa c0 f9 78 	sub	r0,sp,-1672
8000a6fa:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a6fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a702:	49 9a       	lddpc	r10,8000a764 <_vfprintf_r+0x1ee4>
8000a704:	59 06       	cp.w	r6,16
8000a706:	fe 99 ff df 	brgt	8000a6c4 <_vfprintf_r+0x1e44>
8000a70a:	0c 09       	add	r9,r6
8000a70c:	2f f8       	sub	r8,-1
8000a70e:	89 0a       	st.w	r4[0x0],r10
8000a710:	89 16       	st.w	r4[0x4],r6
8000a712:	fb 49 06 90 	st.w	sp[1680],r9
8000a716:	fb 48 06 8c 	st.w	sp[1676],r8
8000a71a:	58 78       	cp.w	r8,7
8000a71c:	e0 8a 00 09 	brle	8000a72e <_vfprintf_r+0x1eae>
8000a720:	fa ca f9 78 	sub	r10,sp,-1672
8000a724:	02 9b       	mov	r11,r1
8000a726:	0a 9c       	mov	r12,r5
8000a728:	fe b0 f0 9e 	rcall	80008864 <__sprint_r>
8000a72c:	c2 e1       	brne	8000a788 <_vfprintf_r+0x1f08>
8000a72e:	40 bc       	lddsp	r12,sp[0x2c]
8000a730:	40 36       	lddsp	r6,sp[0xc]
8000a732:	40 8e       	lddsp	lr,sp[0x20]
8000a734:	ec 0e 0c 48 	max	r8,r6,lr
8000a738:	10 0c       	add	r12,r8
8000a73a:	50 bc       	stdsp	sp[0x2c],r12
8000a73c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a740:	58 08       	cp.w	r8,0
8000a742:	c0 80       	breq	8000a752 <_vfprintf_r+0x1ed2>
8000a744:	fa ca f9 78 	sub	r10,sp,-1672
8000a748:	02 9b       	mov	r11,r1
8000a74a:	0a 9c       	mov	r12,r5
8000a74c:	fe b0 f0 8c 	rcall	80008864 <__sprint_r>
8000a750:	c1 c1       	brne	8000a788 <_vfprintf_r+0x1f08>
8000a752:	30 0b       	mov	r11,0
8000a754:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a758:	fb 4b 06 8c 	st.w	sp[1676],r11
8000a75c:	fe 9f f1 1c 	bral	80008994 <_vfprintf_r+0x114>
8000a760:	80 00       	ld.sh	r0,r0[0x0]
8000a762:	ed 88       	*unknown*
8000a764:	80 00       	ld.sh	r0,r0[0x0]
8000a766:	ed 78 fa f8 	stcond	r6[-1288],r8
8000a76a:	06 90       	mov	r0,r3
8000a76c:	58 08       	cp.w	r8,0
8000a76e:	c0 80       	breq	8000a77e <_vfprintf_r+0x1efe>
8000a770:	0a 9c       	mov	r12,r5
8000a772:	fa ca f9 78 	sub	r10,sp,-1672
8000a776:	02 9b       	mov	r11,r1
8000a778:	fe b0 f0 76 	rcall	80008864 <__sprint_r>
8000a77c:	c0 61       	brne	8000a788 <_vfprintf_r+0x1f08>
8000a77e:	30 08       	mov	r8,0
8000a780:	fb 48 06 8c 	st.w	sp[1676],r8
8000a784:	c0 28       	rjmp	8000a788 <_vfprintf_r+0x1f08>
8000a786:	40 41       	lddsp	r1,sp[0x10]
8000a788:	82 68       	ld.sh	r8,r1[0xc]
8000a78a:	ed b8 00 06 	bld	r8,0x6
8000a78e:	c0 31       	brne	8000a794 <_vfprintf_r+0x1f14>
8000a790:	3f fa       	mov	r10,-1
8000a792:	50 ba       	stdsp	sp[0x2c],r10
8000a794:	40 bc       	lddsp	r12,sp[0x2c]
8000a796:	fe 3d f9 44 	sub	sp,-1724
8000a79a:	d8 32       	popm	r0-r7,pc

8000a79c <__swsetup_r>:
8000a79c:	d4 21       	pushm	r4-r7,lr
8000a79e:	4b 38       	lddpc	r8,8000a868 <__swsetup_r+0xcc>
8000a7a0:	18 96       	mov	r6,r12
8000a7a2:	16 97       	mov	r7,r11
8000a7a4:	70 0c       	ld.w	r12,r8[0x0]
8000a7a6:	58 0c       	cp.w	r12,0
8000a7a8:	c0 60       	breq	8000a7b4 <__swsetup_r+0x18>
8000a7aa:	78 68       	ld.w	r8,r12[0x18]
8000a7ac:	58 08       	cp.w	r8,0
8000a7ae:	c0 31       	brne	8000a7b4 <__swsetup_r+0x18>
8000a7b0:	e0 a0 07 c0 	rcall	8000b730 <__sinit>
8000a7b4:	4a e8       	lddpc	r8,8000a86c <__swsetup_r+0xd0>
8000a7b6:	10 37       	cp.w	r7,r8
8000a7b8:	c0 51       	brne	8000a7c2 <__swsetup_r+0x26>
8000a7ba:	4a c8       	lddpc	r8,8000a868 <__swsetup_r+0xcc>
8000a7bc:	70 08       	ld.w	r8,r8[0x0]
8000a7be:	70 07       	ld.w	r7,r8[0x0]
8000a7c0:	c0 e8       	rjmp	8000a7dc <__swsetup_r+0x40>
8000a7c2:	4a c8       	lddpc	r8,8000a870 <__swsetup_r+0xd4>
8000a7c4:	10 37       	cp.w	r7,r8
8000a7c6:	c0 51       	brne	8000a7d0 <__swsetup_r+0x34>
8000a7c8:	4a 88       	lddpc	r8,8000a868 <__swsetup_r+0xcc>
8000a7ca:	70 08       	ld.w	r8,r8[0x0]
8000a7cc:	70 17       	ld.w	r7,r8[0x4]
8000a7ce:	c0 78       	rjmp	8000a7dc <__swsetup_r+0x40>
8000a7d0:	4a 98       	lddpc	r8,8000a874 <__swsetup_r+0xd8>
8000a7d2:	10 37       	cp.w	r7,r8
8000a7d4:	c0 41       	brne	8000a7dc <__swsetup_r+0x40>
8000a7d6:	4a 58       	lddpc	r8,8000a868 <__swsetup_r+0xcc>
8000a7d8:	70 08       	ld.w	r8,r8[0x0]
8000a7da:	70 27       	ld.w	r7,r8[0x8]
8000a7dc:	8e 68       	ld.sh	r8,r7[0xc]
8000a7de:	ed b8 00 03 	bld	r8,0x3
8000a7e2:	c1 e0       	breq	8000a81e <__swsetup_r+0x82>
8000a7e4:	ed b8 00 04 	bld	r8,0x4
8000a7e8:	c3 e1       	brne	8000a864 <__swsetup_r+0xc8>
8000a7ea:	ed b8 00 02 	bld	r8,0x2
8000a7ee:	c1 51       	brne	8000a818 <__swsetup_r+0x7c>
8000a7f0:	6e db       	ld.w	r11,r7[0x34]
8000a7f2:	58 0b       	cp.w	r11,0
8000a7f4:	c0 a0       	breq	8000a808 <__swsetup_r+0x6c>
8000a7f6:	ee c8 ff bc 	sub	r8,r7,-68
8000a7fa:	10 3b       	cp.w	r11,r8
8000a7fc:	c0 40       	breq	8000a804 <__swsetup_r+0x68>
8000a7fe:	0c 9c       	mov	r12,r6
8000a800:	e0 a0 08 34 	rcall	8000b868 <_free_r>
8000a804:	30 08       	mov	r8,0
8000a806:	8f d8       	st.w	r7[0x34],r8
8000a808:	8e 68       	ld.sh	r8,r7[0xc]
8000a80a:	e0 18 ff db 	andl	r8,0xffdb
8000a80e:	ae 68       	st.h	r7[0xc],r8
8000a810:	30 08       	mov	r8,0
8000a812:	8f 18       	st.w	r7[0x4],r8
8000a814:	6e 48       	ld.w	r8,r7[0x10]
8000a816:	8f 08       	st.w	r7[0x0],r8
8000a818:	8e 68       	ld.sh	r8,r7[0xc]
8000a81a:	a3 b8       	sbr	r8,0x3
8000a81c:	ae 68       	st.h	r7[0xc],r8
8000a81e:	6e 48       	ld.w	r8,r7[0x10]
8000a820:	58 08       	cp.w	r8,0
8000a822:	c0 b1       	brne	8000a838 <__swsetup_r+0x9c>
8000a824:	8e 68       	ld.sh	r8,r7[0xc]
8000a826:	e2 18 02 80 	andl	r8,0x280,COH
8000a82a:	e0 48 02 00 	cp.w	r8,512
8000a82e:	c0 50       	breq	8000a838 <__swsetup_r+0x9c>
8000a830:	0c 9c       	mov	r12,r6
8000a832:	0e 9b       	mov	r11,r7
8000a834:	e0 a0 0a 5e 	rcall	8000bcf0 <__smakebuf_r>
8000a838:	8e 69       	ld.sh	r9,r7[0xc]
8000a83a:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000a83e:	c0 70       	breq	8000a84c <__swsetup_r+0xb0>
8000a840:	30 08       	mov	r8,0
8000a842:	8f 28       	st.w	r7[0x8],r8
8000a844:	6e 58       	ld.w	r8,r7[0x14]
8000a846:	5c 38       	neg	r8
8000a848:	8f 68       	st.w	r7[0x18],r8
8000a84a:	c0 68       	rjmp	8000a856 <__swsetup_r+0xba>
8000a84c:	ed b9 00 01 	bld	r9,0x1
8000a850:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000a854:	8f 28       	st.w	r7[0x8],r8
8000a856:	6e 48       	ld.w	r8,r7[0x10]
8000a858:	58 08       	cp.w	r8,0
8000a85a:	c0 61       	brne	8000a866 <__swsetup_r+0xca>
8000a85c:	8e 68       	ld.sh	r8,r7[0xc]
8000a85e:	ed b8 00 07 	bld	r8,0x7
8000a862:	c0 21       	brne	8000a866 <__swsetup_r+0xca>
8000a864:	dc 2a       	popm	r4-r7,pc,r12=-1
8000a866:	d8 2a       	popm	r4-r7,pc,r12=0
8000a868:	00 00       	add	r0,r0
8000a86a:	01 00       	ld.w	r0,r0++
8000a86c:	80 00       	ld.sh	r0,r0[0x0]
8000a86e:	ee a8       	*unknown*
8000a870:	80 00       	ld.sh	r0,r0[0x0]
8000a872:	ee c8 80 00 	sub	r8,r7,-32768
8000a876:	ee e8 d4 31 	ld.d	r8,r7[-11215]

8000a878 <quorem>:
8000a878:	d4 31       	pushm	r0-r7,lr
8000a87a:	20 2d       	sub	sp,8
8000a87c:	18 97       	mov	r7,r12
8000a87e:	78 48       	ld.w	r8,r12[0x10]
8000a880:	76 46       	ld.w	r6,r11[0x10]
8000a882:	0c 38       	cp.w	r8,r6
8000a884:	c0 34       	brge	8000a88a <quorem+0x12>
8000a886:	30 0c       	mov	r12,0
8000a888:	c8 58       	rjmp	8000a992 <quorem+0x11a>
8000a88a:	ec c2 ff fc 	sub	r2,r6,-4
8000a88e:	f6 c3 ff ec 	sub	r3,r11,-20
8000a892:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000a896:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000a89a:	2f f9       	sub	r9,-1
8000a89c:	20 16       	sub	r6,1
8000a89e:	f8 09 0d 08 	divu	r8,r12,r9
8000a8a2:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000a8a6:	ee c4 ff ec 	sub	r4,r7,-20
8000a8aa:	10 95       	mov	r5,r8
8000a8ac:	58 08       	cp.w	r8,0
8000a8ae:	c4 10       	breq	8000a930 <quorem+0xb8>
8000a8b0:	30 09       	mov	r9,0
8000a8b2:	06 9a       	mov	r10,r3
8000a8b4:	08 98       	mov	r8,r4
8000a8b6:	12 91       	mov	r1,r9
8000a8b8:	50 0b       	stdsp	sp[0x0],r11
8000a8ba:	70 0e       	ld.w	lr,r8[0x0]
8000a8bc:	b1 8e       	lsr	lr,0x10
8000a8be:	50 1e       	stdsp	sp[0x4],lr
8000a8c0:	15 0e       	ld.w	lr,r10++
8000a8c2:	fc 00 16 10 	lsr	r0,lr,0x10
8000a8c6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a8ca:	ea 0e 03 41 	mac	r1,r5,lr
8000a8ce:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000a8d2:	b1 81       	lsr	r1,0x10
8000a8d4:	40 1b       	lddsp	r11,sp[0x4]
8000a8d6:	ea 00 02 40 	mul	r0,r5,r0
8000a8da:	e2 00 00 00 	add	r0,r1,r0
8000a8de:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000a8e2:	02 1b       	sub	r11,r1
8000a8e4:	50 1b       	stdsp	sp[0x4],r11
8000a8e6:	70 0b       	ld.w	r11,r8[0x0]
8000a8e8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000a8ec:	02 09       	add	r9,r1
8000a8ee:	f2 0e 01 0e 	sub	lr,r9,lr
8000a8f2:	b0 1e       	st.h	r8[0x2],lr
8000a8f4:	fc 09 14 10 	asr	r9,lr,0x10
8000a8f8:	40 1e       	lddsp	lr,sp[0x4]
8000a8fa:	fc 09 00 09 	add	r9,lr,r9
8000a8fe:	b0 09       	st.h	r8[0x0],r9
8000a900:	e0 01 16 10 	lsr	r1,r0,0x10
8000a904:	2f c8       	sub	r8,-4
8000a906:	b1 49       	asr	r9,0x10
8000a908:	04 3a       	cp.w	r10,r2
8000a90a:	fe 98 ff d8 	brls	8000a8ba <quorem+0x42>
8000a90e:	40 0b       	lddsp	r11,sp[0x0]
8000a910:	58 0c       	cp.w	r12,0
8000a912:	c0 f1       	brne	8000a930 <quorem+0xb8>
8000a914:	ec c8 ff fb 	sub	r8,r6,-5
8000a918:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000a91c:	c0 28       	rjmp	8000a920 <quorem+0xa8>
8000a91e:	20 16       	sub	r6,1
8000a920:	20 48       	sub	r8,4
8000a922:	08 38       	cp.w	r8,r4
8000a924:	e0 88 00 05 	brls	8000a92e <quorem+0xb6>
8000a928:	70 09       	ld.w	r9,r8[0x0]
8000a92a:	58 09       	cp.w	r9,0
8000a92c:	cf 90       	breq	8000a91e <quorem+0xa6>
8000a92e:	8f 46       	st.w	r7[0x10],r6
8000a930:	0e 9c       	mov	r12,r7
8000a932:	e0 a0 0d 06 	rcall	8000c33e <__mcmp>
8000a936:	c2 d5       	brlt	8000a990 <quorem+0x118>
8000a938:	2f f5       	sub	r5,-1
8000a93a:	08 98       	mov	r8,r4
8000a93c:	30 09       	mov	r9,0
8000a93e:	07 0b       	ld.w	r11,r3++
8000a940:	f6 0a 16 10 	lsr	r10,r11,0x10
8000a944:	70 0c       	ld.w	r12,r8[0x0]
8000a946:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a94a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a94e:	14 1e       	sub	lr,r10
8000a950:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a954:	16 1a       	sub	r10,r11
8000a956:	12 0a       	add	r10,r9
8000a958:	b0 1a       	st.h	r8[0x2],r10
8000a95a:	b1 4a       	asr	r10,0x10
8000a95c:	fc 0a 00 09 	add	r9,lr,r10
8000a960:	b0 09       	st.h	r8[0x0],r9
8000a962:	2f c8       	sub	r8,-4
8000a964:	b1 49       	asr	r9,0x10
8000a966:	04 33       	cp.w	r3,r2
8000a968:	fe 98 ff eb 	brls	8000a93e <quorem+0xc6>
8000a96c:	ec c8 ff fb 	sub	r8,r6,-5
8000a970:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000a974:	58 09       	cp.w	r9,0
8000a976:	c0 d1       	brne	8000a990 <quorem+0x118>
8000a978:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000a97c:	c0 28       	rjmp	8000a980 <quorem+0x108>
8000a97e:	20 16       	sub	r6,1
8000a980:	20 48       	sub	r8,4
8000a982:	08 38       	cp.w	r8,r4
8000a984:	e0 88 00 05 	brls	8000a98e <quorem+0x116>
8000a988:	70 09       	ld.w	r9,r8[0x0]
8000a98a:	58 09       	cp.w	r9,0
8000a98c:	cf 90       	breq	8000a97e <quorem+0x106>
8000a98e:	8f 46       	st.w	r7[0x10],r6
8000a990:	0a 9c       	mov	r12,r5
8000a992:	2f ed       	sub	sp,-8
8000a994:	d8 32       	popm	r0-r7,pc
8000a996:	d7 03       	nop

8000a998 <_dtoa_r>:
8000a998:	d4 31       	pushm	r0-r7,lr
8000a99a:	21 ad       	sub	sp,104
8000a99c:	fa c4 ff 74 	sub	r4,sp,-140
8000a9a0:	18 97       	mov	r7,r12
8000a9a2:	16 95       	mov	r5,r11
8000a9a4:	68 2c       	ld.w	r12,r4[0x8]
8000a9a6:	50 c9       	stdsp	sp[0x30],r9
8000a9a8:	68 16       	ld.w	r6,r4[0x4]
8000a9aa:	68 09       	ld.w	r9,r4[0x0]
8000a9ac:	50 e8       	stdsp	sp[0x38],r8
8000a9ae:	14 94       	mov	r4,r10
8000a9b0:	51 2c       	stdsp	sp[0x48],r12
8000a9b2:	fa e5 00 08 	st.d	sp[8],r4
8000a9b6:	51 59       	stdsp	sp[0x54],r9
8000a9b8:	6e 95       	ld.w	r5,r7[0x24]
8000a9ba:	58 05       	cp.w	r5,0
8000a9bc:	c0 91       	brne	8000a9ce <_dtoa_r+0x36>
8000a9be:	31 0c       	mov	r12,16
8000a9c0:	e0 a0 09 fa 	rcall	8000bdb4 <malloc>
8000a9c4:	99 35       	st.w	r12[0xc],r5
8000a9c6:	8f 9c       	st.w	r7[0x24],r12
8000a9c8:	99 15       	st.w	r12[0x4],r5
8000a9ca:	99 25       	st.w	r12[0x8],r5
8000a9cc:	99 05       	st.w	r12[0x0],r5
8000a9ce:	6e 99       	ld.w	r9,r7[0x24]
8000a9d0:	72 08       	ld.w	r8,r9[0x0]
8000a9d2:	58 08       	cp.w	r8,0
8000a9d4:	c0 f0       	breq	8000a9f2 <_dtoa_r+0x5a>
8000a9d6:	72 1a       	ld.w	r10,r9[0x4]
8000a9d8:	91 1a       	st.w	r8[0x4],r10
8000a9da:	30 1a       	mov	r10,1
8000a9dc:	72 19       	ld.w	r9,r9[0x4]
8000a9de:	f4 09 09 49 	lsl	r9,r10,r9
8000a9e2:	10 9b       	mov	r11,r8
8000a9e4:	91 29       	st.w	r8[0x8],r9
8000a9e6:	0e 9c       	mov	r12,r7
8000a9e8:	e0 a0 0c c4 	rcall	8000c370 <_Bfree>
8000a9ec:	6e 98       	ld.w	r8,r7[0x24]
8000a9ee:	30 09       	mov	r9,0
8000a9f0:	91 09       	st.w	r8[0x0],r9
8000a9f2:	40 28       	lddsp	r8,sp[0x8]
8000a9f4:	10 94       	mov	r4,r8
8000a9f6:	58 08       	cp.w	r8,0
8000a9f8:	c0 64       	brge	8000aa04 <_dtoa_r+0x6c>
8000a9fa:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000a9fe:	50 28       	stdsp	sp[0x8],r8
8000aa00:	30 18       	mov	r8,1
8000aa02:	c0 28       	rjmp	8000aa06 <_dtoa_r+0x6e>
8000aa04:	30 08       	mov	r8,0
8000aa06:	8d 08       	st.w	r6[0x0],r8
8000aa08:	fc 1c 7f f0 	movh	r12,0x7ff0
8000aa0c:	40 26       	lddsp	r6,sp[0x8]
8000aa0e:	0c 98       	mov	r8,r6
8000aa10:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000aa14:	18 38       	cp.w	r8,r12
8000aa16:	c1 c1       	brne	8000aa4e <_dtoa_r+0xb6>
8000aa18:	e0 68 27 0f 	mov	r8,9999
8000aa1c:	41 5b       	lddsp	r11,sp[0x54]
8000aa1e:	97 08       	st.w	r11[0x0],r8
8000aa20:	40 3a       	lddsp	r10,sp[0xc]
8000aa22:	58 0a       	cp.w	r10,0
8000aa24:	c0 61       	brne	8000aa30 <_dtoa_r+0x98>
8000aa26:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000aa2a:	c0 31       	brne	8000aa30 <_dtoa_r+0x98>
8000aa2c:	4a cc       	lddpc	r12,8000aadc <_dtoa_r+0x144>
8000aa2e:	c0 28       	rjmp	8000aa32 <_dtoa_r+0x9a>
8000aa30:	4a cc       	lddpc	r12,8000aae0 <_dtoa_r+0x148>
8000aa32:	41 29       	lddsp	r9,sp[0x48]
8000aa34:	58 09       	cp.w	r9,0
8000aa36:	e0 80 05 9e 	breq	8000b572 <_dtoa_r+0xbda>
8000aa3a:	f8 c8 ff fd 	sub	r8,r12,-3
8000aa3e:	30 09       	mov	r9,0
8000aa40:	11 8a       	ld.ub	r10,r8[0x0]
8000aa42:	f2 0a 18 00 	cp.b	r10,r9
8000aa46:	c1 90       	breq	8000aa78 <_dtoa_r+0xe0>
8000aa48:	f8 c8 ff f8 	sub	r8,r12,-8
8000aa4c:	c1 68       	rjmp	8000aa78 <_dtoa_r+0xe0>
8000aa4e:	fa ea 00 08 	ld.d	r10,sp[8]
8000aa52:	30 08       	mov	r8,0
8000aa54:	fa eb 00 3c 	st.d	sp[60],r10
8000aa58:	30 09       	mov	r9,0
8000aa5a:	e0 a0 15 12 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000aa5e:	c1 10       	breq	8000aa80 <_dtoa_r+0xe8>
8000aa60:	30 18       	mov	r8,1
8000aa62:	41 5a       	lddsp	r10,sp[0x54]
8000aa64:	95 08       	st.w	r10[0x0],r8
8000aa66:	41 29       	lddsp	r9,sp[0x48]
8000aa68:	49 f8       	lddpc	r8,8000aae4 <_dtoa_r+0x14c>
8000aa6a:	58 09       	cp.w	r9,0
8000aa6c:	c0 41       	brne	8000aa74 <_dtoa_r+0xdc>
8000aa6e:	10 9c       	mov	r12,r8
8000aa70:	e0 8f 05 81 	bral	8000b572 <_dtoa_r+0xbda>
8000aa74:	10 9c       	mov	r12,r8
8000aa76:	2f f8       	sub	r8,-1
8000aa78:	41 25       	lddsp	r5,sp[0x48]
8000aa7a:	8b 08       	st.w	r5[0x0],r8
8000aa7c:	e0 8f 05 7b 	bral	8000b572 <_dtoa_r+0xbda>
8000aa80:	fa c8 ff 9c 	sub	r8,sp,-100
8000aa84:	fa c9 ff a0 	sub	r9,sp,-96
8000aa88:	fa ea 00 3c 	ld.d	r10,sp[60]
8000aa8c:	0e 9c       	mov	r12,r7
8000aa8e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000aa92:	e0 a0 0c c1 	rcall	8000c414 <__d2b>
8000aa96:	18 93       	mov	r3,r12
8000aa98:	58 05       	cp.w	r5,0
8000aa9a:	c0 d0       	breq	8000aab4 <_dtoa_r+0x11c>
8000aa9c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000aaa0:	30 04       	mov	r4,0
8000aaa2:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000aaa6:	ea c5 03 ff 	sub	r5,r5,1023
8000aaaa:	10 9b       	mov	r11,r8
8000aaac:	51 74       	stdsp	sp[0x5c],r4
8000aaae:	ea 1b 3f f0 	orh	r11,0x3ff0
8000aab2:	c2 a8       	rjmp	8000ab06 <_dtoa_r+0x16e>
8000aab4:	41 88       	lddsp	r8,sp[0x60]
8000aab6:	41 9c       	lddsp	r12,sp[0x64]
8000aab8:	10 0c       	add	r12,r8
8000aaba:	f8 c5 fb ce 	sub	r5,r12,-1074
8000aabe:	e0 45 00 20 	cp.w	r5,32
8000aac2:	e0 8a 00 13 	brle	8000aae8 <_dtoa_r+0x150>
8000aac6:	f8 cc fb ee 	sub	r12,r12,-1042
8000aaca:	40 3b       	lddsp	r11,sp[0xc]
8000aacc:	ea 08 11 40 	rsub	r8,r5,64
8000aad0:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000aad4:	ec 08 09 46 	lsl	r6,r6,r8
8000aad8:	0c 4c       	or	r12,r6
8000aada:	c0 c8       	rjmp	8000aaf2 <_dtoa_r+0x15a>
8000aadc:	80 00       	ld.sh	r0,r0[0x0]
8000aade:	ee 98 80 00 	brls	801faade <_data_lma+0x1eba96>
8000aae2:	ee a4       	*unknown*
8000aae4:	80 00       	ld.sh	r0,r0[0x0]
8000aae6:	ed 74 ea 0c 	stcond	r6[-5620],r4
8000aaea:	11 20       	ld.uh	r0,r8++
8000aaec:	40 3a       	lddsp	r10,sp[0xc]
8000aaee:	f4 0c 09 4c 	lsl	r12,r10,r12
8000aaf2:	e0 a0 14 52 	rcall	8000d396 <__avr32_u32_to_f64>
8000aaf6:	fc 18 fe 10 	movh	r8,0xfe10
8000aafa:	30 19       	mov	r9,1
8000aafc:	ea c5 04 33 	sub	r5,r5,1075
8000ab00:	f0 0b 00 0b 	add	r11,r8,r11
8000ab04:	51 79       	stdsp	sp[0x5c],r9
8000ab06:	30 08       	mov	r8,0
8000ab08:	fc 19 3f f8 	movh	r9,0x3ff8
8000ab0c:	e0 a0 12 de 	rcall	8000d0c8 <__avr32_f64_sub>
8000ab10:	e0 68 43 61 	mov	r8,17249
8000ab14:	ea 18 63 6f 	orh	r8,0x636f
8000ab18:	e0 69 87 a7 	mov	r9,34727
8000ab1c:	ea 19 3f d2 	orh	r9,0x3fd2
8000ab20:	e0 a0 11 e8 	rcall	8000cef0 <__avr32_f64_mul>
8000ab24:	e0 68 c8 b3 	mov	r8,51379
8000ab28:	ea 18 8b 60 	orh	r8,0x8b60
8000ab2c:	e0 69 8a 28 	mov	r9,35368
8000ab30:	ea 19 3f c6 	orh	r9,0x3fc6
8000ab34:	e0 a0 13 98 	rcall	8000d264 <__avr32_f64_add>
8000ab38:	0a 9c       	mov	r12,r5
8000ab3a:	14 90       	mov	r0,r10
8000ab3c:	16 91       	mov	r1,r11
8000ab3e:	e0 a0 14 30 	rcall	8000d39e <__avr32_s32_to_f64>
8000ab42:	e0 68 79 fb 	mov	r8,31227
8000ab46:	ea 18 50 9f 	orh	r8,0x509f
8000ab4a:	e0 69 44 13 	mov	r9,17427
8000ab4e:	ea 19 3f d3 	orh	r9,0x3fd3
8000ab52:	e0 a0 11 cf 	rcall	8000cef0 <__avr32_f64_mul>
8000ab56:	14 98       	mov	r8,r10
8000ab58:	16 99       	mov	r9,r11
8000ab5a:	00 9a       	mov	r10,r0
8000ab5c:	02 9b       	mov	r11,r1
8000ab5e:	e0 a0 13 83 	rcall	8000d264 <__avr32_f64_add>
8000ab62:	14 90       	mov	r0,r10
8000ab64:	16 91       	mov	r1,r11
8000ab66:	e0 a0 14 05 	rcall	8000d370 <__avr32_f64_to_s32>
8000ab6a:	30 08       	mov	r8,0
8000ab6c:	18 96       	mov	r6,r12
8000ab6e:	30 09       	mov	r9,0
8000ab70:	00 9a       	mov	r10,r0
8000ab72:	02 9b       	mov	r11,r1
8000ab74:	e0 a0 14 cc 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000ab78:	c0 c0       	breq	8000ab90 <_dtoa_r+0x1f8>
8000ab7a:	0c 9c       	mov	r12,r6
8000ab7c:	e0 a0 14 11 	rcall	8000d39e <__avr32_s32_to_f64>
8000ab80:	14 98       	mov	r8,r10
8000ab82:	16 99       	mov	r9,r11
8000ab84:	00 9a       	mov	r10,r0
8000ab86:	02 9b       	mov	r11,r1
8000ab88:	e0 a0 14 7b 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000ab8c:	f7 b6 00 01 	subeq	r6,1
8000ab90:	59 66       	cp.w	r6,22
8000ab92:	e0 88 00 05 	brls	8000ab9c <_dtoa_r+0x204>
8000ab96:	30 18       	mov	r8,1
8000ab98:	51 48       	stdsp	sp[0x50],r8
8000ab9a:	c1 28       	rjmp	8000abbe <_dtoa_r+0x226>
8000ab9c:	4c 08       	lddpc	r8,8000ac9c <_dtoa_r+0x304>
8000ab9e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000aba2:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000aba6:	e0 a0 14 b3 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000abaa:	f9 b4 00 00 	moveq	r4,0
8000abae:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000abb2:	f7 b6 01 01 	subne	r6,1
8000abb6:	f9 bc 01 00 	movne	r12,0
8000abba:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000abbe:	41 90       	lddsp	r0,sp[0x64]
8000abc0:	20 10       	sub	r0,1
8000abc2:	0a 10       	sub	r0,r5
8000abc4:	c0 46       	brmi	8000abcc <_dtoa_r+0x234>
8000abc6:	50 40       	stdsp	sp[0x10],r0
8000abc8:	30 00       	mov	r0,0
8000abca:	c0 48       	rjmp	8000abd2 <_dtoa_r+0x23a>
8000abcc:	30 0b       	mov	r11,0
8000abce:	5c 30       	neg	r0
8000abd0:	50 4b       	stdsp	sp[0x10],r11
8000abd2:	ec 02 11 00 	rsub	r2,r6,0
8000abd6:	58 06       	cp.w	r6,0
8000abd8:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000abdc:	f5 d6 e4 0a 	addge	r10,r10,r6
8000abe0:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000abe4:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000abe8:	f9 b2 04 00 	movge	r2,0
8000abec:	e1 d6 e5 10 	sublt	r0,r0,r6
8000abf0:	f9 b9 05 00 	movlt	r9,0
8000abf4:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000abf8:	40 c8       	lddsp	r8,sp[0x30]
8000abfa:	58 98       	cp.w	r8,9
8000abfc:	e0 8b 00 20 	brhi	8000ac3c <_dtoa_r+0x2a4>
8000ac00:	58 58       	cp.w	r8,5
8000ac02:	f9 b4 0a 01 	movle	r4,1
8000ac06:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000ac0a:	f7 b5 09 04 	subgt	r5,4
8000ac0e:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000ac12:	f9 b4 09 00 	movgt	r4,0
8000ac16:	40 cc       	lddsp	r12,sp[0x30]
8000ac18:	58 3c       	cp.w	r12,3
8000ac1a:	c2 d0       	breq	8000ac74 <_dtoa_r+0x2dc>
8000ac1c:	e0 89 00 05 	brgt	8000ac26 <_dtoa_r+0x28e>
8000ac20:	58 2c       	cp.w	r12,2
8000ac22:	c1 01       	brne	8000ac42 <_dtoa_r+0x2aa>
8000ac24:	c1 88       	rjmp	8000ac54 <_dtoa_r+0x2bc>
8000ac26:	40 cb       	lddsp	r11,sp[0x30]
8000ac28:	58 4b       	cp.w	r11,4
8000ac2a:	c0 60       	breq	8000ac36 <_dtoa_r+0x29e>
8000ac2c:	58 5b       	cp.w	r11,5
8000ac2e:	c0 a1       	brne	8000ac42 <_dtoa_r+0x2aa>
8000ac30:	30 1a       	mov	r10,1
8000ac32:	50 da       	stdsp	sp[0x34],r10
8000ac34:	c2 28       	rjmp	8000ac78 <_dtoa_r+0x2e0>
8000ac36:	30 19       	mov	r9,1
8000ac38:	50 d9       	stdsp	sp[0x34],r9
8000ac3a:	c0 f8       	rjmp	8000ac58 <_dtoa_r+0x2c0>
8000ac3c:	30 08       	mov	r8,0
8000ac3e:	30 14       	mov	r4,1
8000ac40:	50 c8       	stdsp	sp[0x30],r8
8000ac42:	3f f5       	mov	r5,-1
8000ac44:	30 1c       	mov	r12,1
8000ac46:	30 0b       	mov	r11,0
8000ac48:	50 95       	stdsp	sp[0x24],r5
8000ac4a:	50 dc       	stdsp	sp[0x34],r12
8000ac4c:	0a 91       	mov	r1,r5
8000ac4e:	31 28       	mov	r8,18
8000ac50:	50 eb       	stdsp	sp[0x38],r11
8000ac52:	c2 08       	rjmp	8000ac92 <_dtoa_r+0x2fa>
8000ac54:	30 0a       	mov	r10,0
8000ac56:	50 da       	stdsp	sp[0x34],r10
8000ac58:	40 e9       	lddsp	r9,sp[0x38]
8000ac5a:	58 09       	cp.w	r9,0
8000ac5c:	e0 89 00 07 	brgt	8000ac6a <_dtoa_r+0x2d2>
8000ac60:	30 18       	mov	r8,1
8000ac62:	50 98       	stdsp	sp[0x24],r8
8000ac64:	10 91       	mov	r1,r8
8000ac66:	50 e8       	stdsp	sp[0x38],r8
8000ac68:	c1 58       	rjmp	8000ac92 <_dtoa_r+0x2fa>
8000ac6a:	40 e5       	lddsp	r5,sp[0x38]
8000ac6c:	50 95       	stdsp	sp[0x24],r5
8000ac6e:	0a 91       	mov	r1,r5
8000ac70:	0a 98       	mov	r8,r5
8000ac72:	c1 08       	rjmp	8000ac92 <_dtoa_r+0x2fa>
8000ac74:	30 0c       	mov	r12,0
8000ac76:	50 dc       	stdsp	sp[0x34],r12
8000ac78:	40 eb       	lddsp	r11,sp[0x38]
8000ac7a:	ec 0b 00 0b 	add	r11,r6,r11
8000ac7e:	50 9b       	stdsp	sp[0x24],r11
8000ac80:	16 98       	mov	r8,r11
8000ac82:	2f f8       	sub	r8,-1
8000ac84:	58 08       	cp.w	r8,0
8000ac86:	e0 89 00 05 	brgt	8000ac90 <_dtoa_r+0x2f8>
8000ac8a:	10 91       	mov	r1,r8
8000ac8c:	30 18       	mov	r8,1
8000ac8e:	c0 28       	rjmp	8000ac92 <_dtoa_r+0x2fa>
8000ac90:	10 91       	mov	r1,r8
8000ac92:	30 09       	mov	r9,0
8000ac94:	6e 9a       	ld.w	r10,r7[0x24]
8000ac96:	95 19       	st.w	r10[0x4],r9
8000ac98:	30 49       	mov	r9,4
8000ac9a:	c0 78       	rjmp	8000aca8 <_dtoa_r+0x310>
8000ac9c:	80 00       	ld.sh	r0,r0[0x0]
8000ac9e:	ef 58 6a 1a 	st.h	r7[27162],r8
8000aca2:	a1 79       	lsl	r9,0x1
8000aca4:	2f fa       	sub	r10,-1
8000aca6:	8b 1a       	st.w	r5[0x4],r10
8000aca8:	6e 95       	ld.w	r5,r7[0x24]
8000acaa:	f2 ca ff ec 	sub	r10,r9,-20
8000acae:	10 3a       	cp.w	r10,r8
8000acb0:	fe 98 ff f8 	brls	8000aca0 <_dtoa_r+0x308>
8000acb4:	6a 1b       	ld.w	r11,r5[0x4]
8000acb6:	0e 9c       	mov	r12,r7
8000acb8:	e0 a0 0b 76 	rcall	8000c3a4 <_Balloc>
8000acbc:	58 e1       	cp.w	r1,14
8000acbe:	5f 88       	srls	r8
8000acc0:	8b 0c       	st.w	r5[0x0],r12
8000acc2:	f1 e4 00 04 	and	r4,r8,r4
8000acc6:	6e 98       	ld.w	r8,r7[0x24]
8000acc8:	70 08       	ld.w	r8,r8[0x0]
8000acca:	50 88       	stdsp	sp[0x20],r8
8000accc:	e0 80 01 82 	breq	8000afd0 <_dtoa_r+0x638>
8000acd0:	58 06       	cp.w	r6,0
8000acd2:	e0 8a 00 40 	brle	8000ad52 <_dtoa_r+0x3ba>
8000acd6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000acda:	4c b8       	lddpc	r8,8000ae04 <_dtoa_r+0x46c>
8000acdc:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000ace0:	fa e5 00 18 	st.d	sp[24],r4
8000ace4:	ec 04 14 04 	asr	r4,r6,0x4
8000ace8:	ed b4 00 04 	bld	r4,0x4
8000acec:	c0 30       	breq	8000acf2 <_dtoa_r+0x35a>
8000acee:	30 25       	mov	r5,2
8000acf0:	c0 f8       	rjmp	8000ad0e <_dtoa_r+0x376>
8000acf2:	4c 68       	lddpc	r8,8000ae08 <_dtoa_r+0x470>
8000acf4:	f0 e8 00 20 	ld.d	r8,r8[32]
8000acf8:	fa ea 00 3c 	ld.d	r10,sp[60]
8000acfc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000ad00:	e0 a0 14 3a 	rcall	8000d574 <__avr32_f64_div>
8000ad04:	30 35       	mov	r5,3
8000ad06:	14 98       	mov	r8,r10
8000ad08:	16 99       	mov	r9,r11
8000ad0a:	fa e9 00 08 	st.d	sp[8],r8
8000ad0e:	4b fc       	lddpc	r12,8000ae08 <_dtoa_r+0x470>
8000ad10:	50 a3       	stdsp	sp[0x28],r3
8000ad12:	0c 93       	mov	r3,r6
8000ad14:	18 96       	mov	r6,r12
8000ad16:	c0 f8       	rjmp	8000ad34 <_dtoa_r+0x39c>
8000ad18:	fa ea 00 18 	ld.d	r10,sp[24]
8000ad1c:	ed b4 00 00 	bld	r4,0x0
8000ad20:	c0 81       	brne	8000ad30 <_dtoa_r+0x398>
8000ad22:	ec e8 00 00 	ld.d	r8,r6[0]
8000ad26:	2f f5       	sub	r5,-1
8000ad28:	e0 a0 10 e4 	rcall	8000cef0 <__avr32_f64_mul>
8000ad2c:	fa eb 00 18 	st.d	sp[24],r10
8000ad30:	a1 54       	asr	r4,0x1
8000ad32:	2f 86       	sub	r6,-8
8000ad34:	58 04       	cp.w	r4,0
8000ad36:	cf 11       	brne	8000ad18 <_dtoa_r+0x380>
8000ad38:	fa e8 00 18 	ld.d	r8,sp[24]
8000ad3c:	fa ea 00 08 	ld.d	r10,sp[8]
8000ad40:	06 96       	mov	r6,r3
8000ad42:	e0 a0 14 19 	rcall	8000d574 <__avr32_f64_div>
8000ad46:	40 a3       	lddsp	r3,sp[0x28]
8000ad48:	14 98       	mov	r8,r10
8000ad4a:	16 99       	mov	r9,r11
8000ad4c:	fa e9 00 08 	st.d	sp[8],r8
8000ad50:	c2 d8       	rjmp	8000adaa <_dtoa_r+0x412>
8000ad52:	ec 08 11 00 	rsub	r8,r6,0
8000ad56:	c0 31       	brne	8000ad5c <_dtoa_r+0x3c4>
8000ad58:	30 25       	mov	r5,2
8000ad5a:	c2 88       	rjmp	8000adaa <_dtoa_r+0x412>
8000ad5c:	4a bc       	lddpc	r12,8000ae08 <_dtoa_r+0x470>
8000ad5e:	f0 04 14 04 	asr	r4,r8,0x4
8000ad62:	50 1c       	stdsp	sp[0x4],r12
8000ad64:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000ad68:	4a 79       	lddpc	r9,8000ae04 <_dtoa_r+0x46c>
8000ad6a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ad6e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ad72:	e0 a0 10 bf 	rcall	8000cef0 <__avr32_f64_mul>
8000ad76:	40 1c       	lddsp	r12,sp[0x4]
8000ad78:	50 63       	stdsp	sp[0x18],r3
8000ad7a:	30 25       	mov	r5,2
8000ad7c:	0c 93       	mov	r3,r6
8000ad7e:	fa eb 00 08 	st.d	sp[8],r10
8000ad82:	18 96       	mov	r6,r12
8000ad84:	c0 f8       	rjmp	8000ada2 <_dtoa_r+0x40a>
8000ad86:	fa ea 00 08 	ld.d	r10,sp[8]
8000ad8a:	ed b4 00 00 	bld	r4,0x0
8000ad8e:	c0 81       	brne	8000ad9e <_dtoa_r+0x406>
8000ad90:	ec e8 00 00 	ld.d	r8,r6[0]
8000ad94:	2f f5       	sub	r5,-1
8000ad96:	e0 a0 10 ad 	rcall	8000cef0 <__avr32_f64_mul>
8000ad9a:	fa eb 00 08 	st.d	sp[8],r10
8000ad9e:	a1 54       	asr	r4,0x1
8000ada0:	2f 86       	sub	r6,-8
8000ada2:	58 04       	cp.w	r4,0
8000ada4:	cf 11       	brne	8000ad86 <_dtoa_r+0x3ee>
8000ada6:	06 96       	mov	r6,r3
8000ada8:	40 63       	lddsp	r3,sp[0x18]
8000adaa:	41 4a       	lddsp	r10,sp[0x50]
8000adac:	58 0a       	cp.w	r10,0
8000adae:	c2 f0       	breq	8000ae0c <_dtoa_r+0x474>
8000adb0:	fa e8 00 08 	ld.d	r8,sp[8]
8000adb4:	58 01       	cp.w	r1,0
8000adb6:	5f 94       	srgt	r4
8000adb8:	fa e9 00 18 	st.d	sp[24],r8
8000adbc:	30 08       	mov	r8,0
8000adbe:	fc 19 3f f0 	movh	r9,0x3ff0
8000adc2:	fa ea 00 18 	ld.d	r10,sp[24]
8000adc6:	e0 a0 13 a3 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000adca:	f9 bc 00 00 	moveq	r12,0
8000adce:	f9 bc 01 01 	movne	r12,1
8000add2:	e9 ec 00 0c 	and	r12,r4,r12
8000add6:	c1 b0       	breq	8000ae0c <_dtoa_r+0x474>
8000add8:	40 98       	lddsp	r8,sp[0x24]
8000adda:	58 08       	cp.w	r8,0
8000addc:	e0 8a 00 f6 	brle	8000afc8 <_dtoa_r+0x630>
8000ade0:	30 08       	mov	r8,0
8000ade2:	fc 19 40 24 	movh	r9,0x4024
8000ade6:	ec c4 00 01 	sub	r4,r6,1
8000adea:	fa ea 00 18 	ld.d	r10,sp[24]
8000adee:	2f f5       	sub	r5,-1
8000adf0:	50 64       	stdsp	sp[0x18],r4
8000adf2:	e0 a0 10 7f 	rcall	8000cef0 <__avr32_f64_mul>
8000adf6:	40 94       	lddsp	r4,sp[0x24]
8000adf8:	14 98       	mov	r8,r10
8000adfa:	16 99       	mov	r9,r11
8000adfc:	fa e9 00 08 	st.d	sp[8],r8
8000ae00:	c0 88       	rjmp	8000ae10 <_dtoa_r+0x478>
8000ae02:	d7 03       	nop
8000ae04:	80 00       	ld.sh	r0,r0[0x0]
8000ae06:	ef 58 80 00 	st.h	r7[-32768],r8
8000ae0a:	f0 20 50 66 	sub	r0,-1027994
8000ae0e:	02 94       	mov	r4,r1
8000ae10:	0a 9c       	mov	r12,r5
8000ae12:	e0 a0 12 c6 	rcall	8000d39e <__avr32_s32_to_f64>
8000ae16:	fa e8 00 08 	ld.d	r8,sp[8]
8000ae1a:	e0 a0 10 6b 	rcall	8000cef0 <__avr32_f64_mul>
8000ae1e:	30 08       	mov	r8,0
8000ae20:	fc 19 40 1c 	movh	r9,0x401c
8000ae24:	e0 a0 12 20 	rcall	8000d264 <__avr32_f64_add>
8000ae28:	14 98       	mov	r8,r10
8000ae2a:	16 99       	mov	r9,r11
8000ae2c:	fa e9 00 28 	st.d	sp[40],r8
8000ae30:	fc 18 fc c0 	movh	r8,0xfcc0
8000ae34:	40 a5       	lddsp	r5,sp[0x28]
8000ae36:	10 05       	add	r5,r8
8000ae38:	50 a5       	stdsp	sp[0x28],r5
8000ae3a:	58 04       	cp.w	r4,0
8000ae3c:	c2 11       	brne	8000ae7e <_dtoa_r+0x4e6>
8000ae3e:	fa ea 00 08 	ld.d	r10,sp[8]
8000ae42:	30 08       	mov	r8,0
8000ae44:	fc 19 40 14 	movh	r9,0x4014
8000ae48:	e0 a0 11 40 	rcall	8000d0c8 <__avr32_f64_sub>
8000ae4c:	40 bc       	lddsp	r12,sp[0x2c]
8000ae4e:	fa eb 00 08 	st.d	sp[8],r10
8000ae52:	14 98       	mov	r8,r10
8000ae54:	16 99       	mov	r9,r11
8000ae56:	18 9a       	mov	r10,r12
8000ae58:	0a 9b       	mov	r11,r5
8000ae5a:	e0 a0 13 59 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000ae5e:	e0 81 02 54 	brne	8000b306 <_dtoa_r+0x96e>
8000ae62:	0a 98       	mov	r8,r5
8000ae64:	40 b9       	lddsp	r9,sp[0x2c]
8000ae66:	ee 18 80 00 	eorh	r8,0x8000
8000ae6a:	fa ea 00 08 	ld.d	r10,sp[8]
8000ae6e:	10 95       	mov	r5,r8
8000ae70:	12 98       	mov	r8,r9
8000ae72:	0a 99       	mov	r9,r5
8000ae74:	e0 a0 13 4c 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000ae78:	e0 81 02 3e 	brne	8000b2f4 <_dtoa_r+0x95c>
8000ae7c:	ca 68       	rjmp	8000afc8 <_dtoa_r+0x630>
8000ae7e:	4c e9       	lddpc	r9,8000afb4 <_dtoa_r+0x61c>
8000ae80:	e8 c8 00 01 	sub	r8,r4,1
8000ae84:	40 d5       	lddsp	r5,sp[0x34]
8000ae86:	58 05       	cp.w	r5,0
8000ae88:	c4 f0       	breq	8000af26 <_dtoa_r+0x58e>
8000ae8a:	30 0c       	mov	r12,0
8000ae8c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ae90:	51 3c       	stdsp	sp[0x4c],r12
8000ae92:	30 0a       	mov	r10,0
8000ae94:	fc 1b 3f e0 	movh	r11,0x3fe0
8000ae98:	e0 a0 13 6e 	rcall	8000d574 <__avr32_f64_div>
8000ae9c:	fa e8 00 28 	ld.d	r8,sp[40]
8000aea0:	40 85       	lddsp	r5,sp[0x20]
8000aea2:	e0 a0 11 13 	rcall	8000d0c8 <__avr32_f64_sub>
8000aea6:	fa eb 00 28 	st.d	sp[40],r10
8000aeaa:	fa ea 00 08 	ld.d	r10,sp[8]
8000aeae:	e0 a0 12 61 	rcall	8000d370 <__avr32_f64_to_s32>
8000aeb2:	51 6c       	stdsp	sp[0x58],r12
8000aeb4:	e0 a0 12 75 	rcall	8000d39e <__avr32_s32_to_f64>
8000aeb8:	14 98       	mov	r8,r10
8000aeba:	16 99       	mov	r9,r11
8000aebc:	fa ea 00 08 	ld.d	r10,sp[8]
8000aec0:	e0 a0 11 04 	rcall	8000d0c8 <__avr32_f64_sub>
8000aec4:	fa eb 00 08 	st.d	sp[8],r10
8000aec8:	41 68       	lddsp	r8,sp[0x58]
8000aeca:	2d 08       	sub	r8,-48
8000aecc:	0a c8       	st.b	r5++,r8
8000aece:	41 39       	lddsp	r9,sp[0x4c]
8000aed0:	2f f9       	sub	r9,-1
8000aed2:	51 39       	stdsp	sp[0x4c],r9
8000aed4:	fa e8 00 28 	ld.d	r8,sp[40]
8000aed8:	e0 a0 13 1a 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000aedc:	e0 81 03 3a 	brne	8000b550 <_dtoa_r+0xbb8>
8000aee0:	fa e8 00 08 	ld.d	r8,sp[8]
8000aee4:	30 0a       	mov	r10,0
8000aee6:	fc 1b 3f f0 	movh	r11,0x3ff0
8000aeea:	e0 a0 10 ef 	rcall	8000d0c8 <__avr32_f64_sub>
8000aeee:	fa e8 00 28 	ld.d	r8,sp[40]
8000aef2:	e0 a0 13 0d 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000aef6:	fa ea 00 28 	ld.d	r10,sp[40]
8000aefa:	30 08       	mov	r8,0
8000aefc:	fc 19 40 24 	movh	r9,0x4024
8000af00:	e0 81 00 da 	brne	8000b0b4 <_dtoa_r+0x71c>
8000af04:	41 3c       	lddsp	r12,sp[0x4c]
8000af06:	08 3c       	cp.w	r12,r4
8000af08:	c6 04       	brge	8000afc8 <_dtoa_r+0x630>
8000af0a:	e0 a0 0f f3 	rcall	8000cef0 <__avr32_f64_mul>
8000af0e:	30 08       	mov	r8,0
8000af10:	fa eb 00 28 	st.d	sp[40],r10
8000af14:	fc 19 40 24 	movh	r9,0x4024
8000af18:	fa ea 00 08 	ld.d	r10,sp[8]
8000af1c:	e0 a0 0f ea 	rcall	8000cef0 <__avr32_f64_mul>
8000af20:	fa eb 00 08 	st.d	sp[8],r10
8000af24:	cc 3b       	rjmp	8000aeaa <_dtoa_r+0x512>
8000af26:	40 85       	lddsp	r5,sp[0x20]
8000af28:	08 05       	add	r5,r4
8000af2a:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000af2e:	51 35       	stdsp	sp[0x4c],r5
8000af30:	fa e8 00 28 	ld.d	r8,sp[40]
8000af34:	40 85       	lddsp	r5,sp[0x20]
8000af36:	e0 a0 0f dd 	rcall	8000cef0 <__avr32_f64_mul>
8000af3a:	fa eb 00 28 	st.d	sp[40],r10
8000af3e:	fa ea 00 08 	ld.d	r10,sp[8]
8000af42:	e0 a0 12 17 	rcall	8000d370 <__avr32_f64_to_s32>
8000af46:	51 6c       	stdsp	sp[0x58],r12
8000af48:	e0 a0 12 2b 	rcall	8000d39e <__avr32_s32_to_f64>
8000af4c:	14 98       	mov	r8,r10
8000af4e:	16 99       	mov	r9,r11
8000af50:	fa ea 00 08 	ld.d	r10,sp[8]
8000af54:	e0 a0 10 ba 	rcall	8000d0c8 <__avr32_f64_sub>
8000af58:	fa eb 00 08 	st.d	sp[8],r10
8000af5c:	41 68       	lddsp	r8,sp[0x58]
8000af5e:	2d 08       	sub	r8,-48
8000af60:	0a c8       	st.b	r5++,r8
8000af62:	41 3c       	lddsp	r12,sp[0x4c]
8000af64:	18 35       	cp.w	r5,r12
8000af66:	c2 91       	brne	8000afb8 <_dtoa_r+0x620>
8000af68:	30 08       	mov	r8,0
8000af6a:	fc 19 3f e0 	movh	r9,0x3fe0
8000af6e:	fa ea 00 28 	ld.d	r10,sp[40]
8000af72:	e0 a0 11 79 	rcall	8000d264 <__avr32_f64_add>
8000af76:	40 85       	lddsp	r5,sp[0x20]
8000af78:	fa e8 00 08 	ld.d	r8,sp[8]
8000af7c:	08 05       	add	r5,r4
8000af7e:	e0 a0 12 c7 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000af82:	e0 81 00 99 	brne	8000b0b4 <_dtoa_r+0x71c>
8000af86:	fa e8 00 28 	ld.d	r8,sp[40]
8000af8a:	30 0a       	mov	r10,0
8000af8c:	fc 1b 3f e0 	movh	r11,0x3fe0
8000af90:	e0 a0 10 9c 	rcall	8000d0c8 <__avr32_f64_sub>
8000af94:	14 98       	mov	r8,r10
8000af96:	16 99       	mov	r9,r11
8000af98:	fa ea 00 08 	ld.d	r10,sp[8]
8000af9c:	e0 a0 12 b8 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000afa0:	c1 40       	breq	8000afc8 <_dtoa_r+0x630>
8000afa2:	33 09       	mov	r9,48
8000afa4:	0a 98       	mov	r8,r5
8000afa6:	11 7a       	ld.ub	r10,--r8
8000afa8:	f2 0a 18 00 	cp.b	r10,r9
8000afac:	e0 81 02 d2 	brne	8000b550 <_dtoa_r+0xbb8>
8000afb0:	10 95       	mov	r5,r8
8000afb2:	cf 9b       	rjmp	8000afa4 <_dtoa_r+0x60c>
8000afb4:	80 00       	ld.sh	r0,r0[0x0]
8000afb6:	ef 58 30 08 	st.h	r7[12296],r8
8000afba:	fc 19 40 24 	movh	r9,0x4024
8000afbe:	e0 a0 0f 99 	rcall	8000cef0 <__avr32_f64_mul>
8000afc2:	fa eb 00 08 	st.d	sp[8],r10
8000afc6:	cb cb       	rjmp	8000af3e <_dtoa_r+0x5a6>
8000afc8:	fa ea 00 3c 	ld.d	r10,sp[60]
8000afcc:	fa eb 00 08 	st.d	sp[8],r10
8000afd0:	58 e6       	cp.w	r6,14
8000afd2:	5f ab       	srle	r11
8000afd4:	41 8a       	lddsp	r10,sp[0x60]
8000afd6:	30 08       	mov	r8,0
8000afd8:	f4 09 11 ff 	rsub	r9,r10,-1
8000afdc:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000afe0:	f0 09 18 00 	cp.b	r9,r8
8000afe4:	e0 80 00 81 	breq	8000b0e6 <_dtoa_r+0x74e>
8000afe8:	40 ea       	lddsp	r10,sp[0x38]
8000afea:	58 01       	cp.w	r1,0
8000afec:	5f a9       	srle	r9
8000afee:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000aff2:	4c 9a       	lddpc	r10,8000b114 <_dtoa_r+0x77c>
8000aff4:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000aff8:	fa e5 00 10 	st.d	sp[16],r4
8000affc:	f0 09 18 00 	cp.b	r9,r8
8000b000:	c1 40       	breq	8000b028 <_dtoa_r+0x690>
8000b002:	58 01       	cp.w	r1,0
8000b004:	e0 81 01 78 	brne	8000b2f4 <_dtoa_r+0x95c>
8000b008:	30 08       	mov	r8,0
8000b00a:	fc 19 40 14 	movh	r9,0x4014
8000b00e:	08 9a       	mov	r10,r4
8000b010:	0a 9b       	mov	r11,r5
8000b012:	e0 a0 0f 6f 	rcall	8000cef0 <__avr32_f64_mul>
8000b016:	fa e8 00 08 	ld.d	r8,sp[8]
8000b01a:	e0 a0 12 45 	rcall	8000d4a4 <__avr32_f64_cmp_ge>
8000b01e:	e0 81 01 6b 	brne	8000b2f4 <_dtoa_r+0x95c>
8000b022:	02 92       	mov	r2,r1
8000b024:	e0 8f 01 73 	bral	8000b30a <_dtoa_r+0x972>
8000b028:	40 85       	lddsp	r5,sp[0x20]
8000b02a:	30 14       	mov	r4,1
8000b02c:	fa e8 00 10 	ld.d	r8,sp[16]
8000b030:	fa ea 00 08 	ld.d	r10,sp[8]
8000b034:	e0 a0 12 a0 	rcall	8000d574 <__avr32_f64_div>
8000b038:	e0 a0 11 9c 	rcall	8000d370 <__avr32_f64_to_s32>
8000b03c:	18 92       	mov	r2,r12
8000b03e:	e0 a0 11 b0 	rcall	8000d39e <__avr32_s32_to_f64>
8000b042:	fa e8 00 10 	ld.d	r8,sp[16]
8000b046:	e0 a0 0f 55 	rcall	8000cef0 <__avr32_f64_mul>
8000b04a:	14 98       	mov	r8,r10
8000b04c:	16 99       	mov	r9,r11
8000b04e:	fa ea 00 08 	ld.d	r10,sp[8]
8000b052:	e0 a0 10 3b 	rcall	8000d0c8 <__avr32_f64_sub>
8000b056:	fa eb 00 08 	st.d	sp[8],r10
8000b05a:	e4 c8 ff d0 	sub	r8,r2,-48
8000b05e:	0a c8       	st.b	r5++,r8
8000b060:	fc 19 40 24 	movh	r9,0x4024
8000b064:	30 08       	mov	r8,0
8000b066:	02 34       	cp.w	r4,r1
8000b068:	c3 31       	brne	8000b0ce <_dtoa_r+0x736>
8000b06a:	fa e8 00 08 	ld.d	r8,sp[8]
8000b06e:	e0 a0 10 fb 	rcall	8000d264 <__avr32_f64_add>
8000b072:	16 91       	mov	r1,r11
8000b074:	14 90       	mov	r0,r10
8000b076:	14 98       	mov	r8,r10
8000b078:	02 99       	mov	r9,r1
8000b07a:	fa ea 00 10 	ld.d	r10,sp[16]
8000b07e:	e0 a0 12 47 	rcall	8000d50c <__avr32_f64_cmp_lt>
8000b082:	c1 a1       	brne	8000b0b6 <_dtoa_r+0x71e>
8000b084:	fa e8 00 10 	ld.d	r8,sp[16]
8000b088:	00 9a       	mov	r10,r0
8000b08a:	02 9b       	mov	r11,r1
8000b08c:	e0 a0 11 f9 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000b090:	e0 80 02 5f 	breq	8000b54e <_dtoa_r+0xbb6>
8000b094:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000b098:	c0 f1       	brne	8000b0b6 <_dtoa_r+0x71e>
8000b09a:	e0 8f 02 5a 	bral	8000b54e <_dtoa_r+0xbb6>
8000b09e:	40 8a       	lddsp	r10,sp[0x20]
8000b0a0:	14 38       	cp.w	r8,r10
8000b0a2:	c0 30       	breq	8000b0a8 <_dtoa_r+0x710>
8000b0a4:	10 95       	mov	r5,r8
8000b0a6:	c0 98       	rjmp	8000b0b8 <_dtoa_r+0x720>
8000b0a8:	33 08       	mov	r8,48
8000b0aa:	40 89       	lddsp	r9,sp[0x20]
8000b0ac:	2f f6       	sub	r6,-1
8000b0ae:	b2 88       	st.b	r9[0x0],r8
8000b0b0:	40 88       	lddsp	r8,sp[0x20]
8000b0b2:	c0 88       	rjmp	8000b0c2 <_dtoa_r+0x72a>
8000b0b4:	40 66       	lddsp	r6,sp[0x18]
8000b0b6:	33 99       	mov	r9,57
8000b0b8:	0a 98       	mov	r8,r5
8000b0ba:	11 7a       	ld.ub	r10,--r8
8000b0bc:	f2 0a 18 00 	cp.b	r10,r9
8000b0c0:	ce f0       	breq	8000b09e <_dtoa_r+0x706>
8000b0c2:	50 66       	stdsp	sp[0x18],r6
8000b0c4:	11 89       	ld.ub	r9,r8[0x0]
8000b0c6:	2f f9       	sub	r9,-1
8000b0c8:	b0 89       	st.b	r8[0x0],r9
8000b0ca:	e0 8f 02 43 	bral	8000b550 <_dtoa_r+0xbb8>
8000b0ce:	e0 a0 0f 11 	rcall	8000cef0 <__avr32_f64_mul>
8000b0d2:	2f f4       	sub	r4,-1
8000b0d4:	fa eb 00 08 	st.d	sp[8],r10
8000b0d8:	30 08       	mov	r8,0
8000b0da:	30 09       	mov	r9,0
8000b0dc:	e0 a0 11 d1 	rcall	8000d47e <__avr32_f64_cmp_eq>
8000b0e0:	ca 60       	breq	8000b02c <_dtoa_r+0x694>
8000b0e2:	e0 8f 02 36 	bral	8000b54e <_dtoa_r+0xbb6>
8000b0e6:	40 d8       	lddsp	r8,sp[0x34]
8000b0e8:	58 08       	cp.w	r8,0
8000b0ea:	c0 51       	brne	8000b0f4 <_dtoa_r+0x75c>
8000b0ec:	04 98       	mov	r8,r2
8000b0ee:	00 95       	mov	r5,r0
8000b0f0:	40 d4       	lddsp	r4,sp[0x34]
8000b0f2:	c3 88       	rjmp	8000b162 <_dtoa_r+0x7ca>
8000b0f4:	40 c5       	lddsp	r5,sp[0x30]
8000b0f6:	58 15       	cp.w	r5,1
8000b0f8:	e0 89 00 10 	brgt	8000b118 <_dtoa_r+0x780>
8000b0fc:	41 74       	lddsp	r4,sp[0x5c]
8000b0fe:	58 04       	cp.w	r4,0
8000b100:	c0 40       	breq	8000b108 <_dtoa_r+0x770>
8000b102:	f4 c9 fb cd 	sub	r9,r10,-1075
8000b106:	c0 48       	rjmp	8000b10e <_dtoa_r+0x776>
8000b108:	41 99       	lddsp	r9,sp[0x64]
8000b10a:	f2 09 11 36 	rsub	r9,r9,54
8000b10e:	04 98       	mov	r8,r2
8000b110:	00 95       	mov	r5,r0
8000b112:	c1 d8       	rjmp	8000b14c <_dtoa_r+0x7b4>
8000b114:	80 00       	ld.sh	r0,r0[0x0]
8000b116:	ef 58 e2 c8 	st.h	r7[-7480],r8
8000b11a:	00 01       	add	r1,r0
8000b11c:	58 01       	cp.w	r1,0
8000b11e:	e0 05 17 40 	movge	r5,r0
8000b122:	e2 09 17 40 	movge	r9,r1
8000b126:	e1 d1 e5 15 	sublt	r5,r0,r1
8000b12a:	f9 b9 05 00 	movlt	r9,0
8000b12e:	10 32       	cp.w	r2,r8
8000b130:	e5 d8 e4 18 	subge	r8,r2,r8
8000b134:	f1 d2 e5 18 	sublt	r8,r8,r2
8000b138:	e5 d8 e5 02 	addlt	r2,r2,r8
8000b13c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000b140:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000b144:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000b148:	f9 b8 05 00 	movlt	r8,0
8000b14c:	40 4b       	lddsp	r11,sp[0x10]
8000b14e:	12 0b       	add	r11,r9
8000b150:	50 08       	stdsp	sp[0x0],r8
8000b152:	50 4b       	stdsp	sp[0x10],r11
8000b154:	12 00       	add	r0,r9
8000b156:	30 1b       	mov	r11,1
8000b158:	0e 9c       	mov	r12,r7
8000b15a:	e0 a0 0a dd 	rcall	8000c714 <__i2b>
8000b15e:	40 08       	lddsp	r8,sp[0x0]
8000b160:	18 94       	mov	r4,r12
8000b162:	40 4a       	lddsp	r10,sp[0x10]
8000b164:	58 05       	cp.w	r5,0
8000b166:	5f 99       	srgt	r9
8000b168:	58 0a       	cp.w	r10,0
8000b16a:	5f 9a       	srgt	r10
8000b16c:	f5 e9 00 09 	and	r9,r10,r9
8000b170:	c0 80       	breq	8000b180 <_dtoa_r+0x7e8>
8000b172:	40 4c       	lddsp	r12,sp[0x10]
8000b174:	f8 05 0d 49 	min	r9,r12,r5
8000b178:	12 1c       	sub	r12,r9
8000b17a:	12 10       	sub	r0,r9
8000b17c:	50 4c       	stdsp	sp[0x10],r12
8000b17e:	12 15       	sub	r5,r9
8000b180:	58 02       	cp.w	r2,0
8000b182:	e0 8a 00 27 	brle	8000b1d0 <_dtoa_r+0x838>
8000b186:	40 db       	lddsp	r11,sp[0x34]
8000b188:	58 0b       	cp.w	r11,0
8000b18a:	c1 d0       	breq	8000b1c4 <_dtoa_r+0x82c>
8000b18c:	58 08       	cp.w	r8,0
8000b18e:	e0 8a 00 17 	brle	8000b1bc <_dtoa_r+0x824>
8000b192:	10 9a       	mov	r10,r8
8000b194:	50 08       	stdsp	sp[0x0],r8
8000b196:	08 9b       	mov	r11,r4
8000b198:	0e 9c       	mov	r12,r7
8000b19a:	e0 a0 0b 03 	rcall	8000c7a0 <__pow5mult>
8000b19e:	06 9a       	mov	r10,r3
8000b1a0:	18 9b       	mov	r11,r12
8000b1a2:	18 94       	mov	r4,r12
8000b1a4:	0e 9c       	mov	r12,r7
8000b1a6:	e0 a0 0a 37 	rcall	8000c614 <__multiply>
8000b1aa:	18 99       	mov	r9,r12
8000b1ac:	06 9b       	mov	r11,r3
8000b1ae:	50 19       	stdsp	sp[0x4],r9
8000b1b0:	0e 9c       	mov	r12,r7
8000b1b2:	e0 a0 08 df 	rcall	8000c370 <_Bfree>
8000b1b6:	40 19       	lddsp	r9,sp[0x4]
8000b1b8:	40 08       	lddsp	r8,sp[0x0]
8000b1ba:	12 93       	mov	r3,r9
8000b1bc:	e4 08 01 0a 	sub	r10,r2,r8
8000b1c0:	c0 80       	breq	8000b1d0 <_dtoa_r+0x838>
8000b1c2:	c0 28       	rjmp	8000b1c6 <_dtoa_r+0x82e>
8000b1c4:	04 9a       	mov	r10,r2
8000b1c6:	06 9b       	mov	r11,r3
8000b1c8:	0e 9c       	mov	r12,r7
8000b1ca:	e0 a0 0a eb 	rcall	8000c7a0 <__pow5mult>
8000b1ce:	18 93       	mov	r3,r12
8000b1d0:	30 1b       	mov	r11,1
8000b1d2:	0e 9c       	mov	r12,r7
8000b1d4:	e0 a0 0a a0 	rcall	8000c714 <__i2b>
8000b1d8:	41 1a       	lddsp	r10,sp[0x44]
8000b1da:	18 92       	mov	r2,r12
8000b1dc:	58 0a       	cp.w	r10,0
8000b1de:	e0 8a 00 07 	brle	8000b1ec <_dtoa_r+0x854>
8000b1e2:	18 9b       	mov	r11,r12
8000b1e4:	0e 9c       	mov	r12,r7
8000b1e6:	e0 a0 0a dd 	rcall	8000c7a0 <__pow5mult>
8000b1ea:	18 92       	mov	r2,r12
8000b1ec:	40 c9       	lddsp	r9,sp[0x30]
8000b1ee:	58 19       	cp.w	r9,1
8000b1f0:	e0 89 00 14 	brgt	8000b218 <_dtoa_r+0x880>
8000b1f4:	40 38       	lddsp	r8,sp[0xc]
8000b1f6:	58 08       	cp.w	r8,0
8000b1f8:	c1 01       	brne	8000b218 <_dtoa_r+0x880>
8000b1fa:	40 29       	lddsp	r9,sp[0x8]
8000b1fc:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000b200:	c0 c1       	brne	8000b218 <_dtoa_r+0x880>
8000b202:	12 98       	mov	r8,r9
8000b204:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b208:	c0 80       	breq	8000b218 <_dtoa_r+0x880>
8000b20a:	40 4c       	lddsp	r12,sp[0x10]
8000b20c:	30 1b       	mov	r11,1
8000b20e:	2f fc       	sub	r12,-1
8000b210:	2f f0       	sub	r0,-1
8000b212:	50 4c       	stdsp	sp[0x10],r12
8000b214:	50 6b       	stdsp	sp[0x18],r11
8000b216:	c0 38       	rjmp	8000b21c <_dtoa_r+0x884>
8000b218:	30 0a       	mov	r10,0
8000b21a:	50 6a       	stdsp	sp[0x18],r10
8000b21c:	41 19       	lddsp	r9,sp[0x44]
8000b21e:	58 09       	cp.w	r9,0
8000b220:	c0 31       	brne	8000b226 <_dtoa_r+0x88e>
8000b222:	30 1c       	mov	r12,1
8000b224:	c0 98       	rjmp	8000b236 <_dtoa_r+0x89e>
8000b226:	64 48       	ld.w	r8,r2[0x10]
8000b228:	2f c8       	sub	r8,-4
8000b22a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000b22e:	e0 a0 08 11 	rcall	8000c250 <__hi0bits>
8000b232:	f8 0c 11 20 	rsub	r12,r12,32
8000b236:	40 4b       	lddsp	r11,sp[0x10]
8000b238:	f8 0b 00 08 	add	r8,r12,r11
8000b23c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000b240:	c0 c0       	breq	8000b258 <_dtoa_r+0x8c0>
8000b242:	f0 08 11 20 	rsub	r8,r8,32
8000b246:	58 48       	cp.w	r8,4
8000b248:	e0 8a 00 06 	brle	8000b254 <_dtoa_r+0x8bc>
8000b24c:	20 48       	sub	r8,4
8000b24e:	10 0b       	add	r11,r8
8000b250:	50 4b       	stdsp	sp[0x10],r11
8000b252:	c0 78       	rjmp	8000b260 <_dtoa_r+0x8c8>
8000b254:	58 48       	cp.w	r8,4
8000b256:	c0 70       	breq	8000b264 <_dtoa_r+0x8cc>
8000b258:	40 4a       	lddsp	r10,sp[0x10]
8000b25a:	2e 48       	sub	r8,-28
8000b25c:	10 0a       	add	r10,r8
8000b25e:	50 4a       	stdsp	sp[0x10],r10
8000b260:	10 00       	add	r0,r8
8000b262:	10 05       	add	r5,r8
8000b264:	58 00       	cp.w	r0,0
8000b266:	e0 8a 00 08 	brle	8000b276 <_dtoa_r+0x8de>
8000b26a:	06 9b       	mov	r11,r3
8000b26c:	00 9a       	mov	r10,r0
8000b26e:	0e 9c       	mov	r12,r7
8000b270:	e0 a0 09 8e 	rcall	8000c58c <__lshift>
8000b274:	18 93       	mov	r3,r12
8000b276:	40 49       	lddsp	r9,sp[0x10]
8000b278:	58 09       	cp.w	r9,0
8000b27a:	e0 8a 00 08 	brle	8000b28a <_dtoa_r+0x8f2>
8000b27e:	04 9b       	mov	r11,r2
8000b280:	12 9a       	mov	r10,r9
8000b282:	0e 9c       	mov	r12,r7
8000b284:	e0 a0 09 84 	rcall	8000c58c <__lshift>
8000b288:	18 92       	mov	r2,r12
8000b28a:	41 48       	lddsp	r8,sp[0x50]
8000b28c:	58 08       	cp.w	r8,0
8000b28e:	c1 b0       	breq	8000b2c4 <_dtoa_r+0x92c>
8000b290:	04 9b       	mov	r11,r2
8000b292:	06 9c       	mov	r12,r3
8000b294:	e0 a0 08 55 	rcall	8000c33e <__mcmp>
8000b298:	c1 64       	brge	8000b2c4 <_dtoa_r+0x92c>
8000b29a:	06 9b       	mov	r11,r3
8000b29c:	30 09       	mov	r9,0
8000b29e:	30 aa       	mov	r10,10
8000b2a0:	0e 9c       	mov	r12,r7
8000b2a2:	e0 a0 0a 41 	rcall	8000c724 <__multadd>
8000b2a6:	20 16       	sub	r6,1
8000b2a8:	18 93       	mov	r3,r12
8000b2aa:	40 dc       	lddsp	r12,sp[0x34]
8000b2ac:	58 0c       	cp.w	r12,0
8000b2ae:	c0 31       	brne	8000b2b4 <_dtoa_r+0x91c>
8000b2b0:	40 91       	lddsp	r1,sp[0x24]
8000b2b2:	c0 98       	rjmp	8000b2c4 <_dtoa_r+0x92c>
8000b2b4:	08 9b       	mov	r11,r4
8000b2b6:	40 91       	lddsp	r1,sp[0x24]
8000b2b8:	30 09       	mov	r9,0
8000b2ba:	30 aa       	mov	r10,10
8000b2bc:	0e 9c       	mov	r12,r7
8000b2be:	e0 a0 0a 33 	rcall	8000c724 <__multadd>
8000b2c2:	18 94       	mov	r4,r12
8000b2c4:	58 01       	cp.w	r1,0
8000b2c6:	5f a9       	srle	r9
8000b2c8:	40 cb       	lddsp	r11,sp[0x30]
8000b2ca:	58 2b       	cp.w	r11,2
8000b2cc:	5f 98       	srgt	r8
8000b2ce:	f3 e8 00 08 	and	r8,r9,r8
8000b2d2:	c2 50       	breq	8000b31c <_dtoa_r+0x984>
8000b2d4:	58 01       	cp.w	r1,0
8000b2d6:	c1 11       	brne	8000b2f8 <_dtoa_r+0x960>
8000b2d8:	04 9b       	mov	r11,r2
8000b2da:	02 99       	mov	r9,r1
8000b2dc:	30 5a       	mov	r10,5
8000b2de:	0e 9c       	mov	r12,r7
8000b2e0:	e0 a0 0a 22 	rcall	8000c724 <__multadd>
8000b2e4:	18 92       	mov	r2,r12
8000b2e6:	18 9b       	mov	r11,r12
8000b2e8:	06 9c       	mov	r12,r3
8000b2ea:	e0 a0 08 2a 	rcall	8000c33e <__mcmp>
8000b2ee:	e0 89 00 0f 	brgt	8000b30c <_dtoa_r+0x974>
8000b2f2:	c0 38       	rjmp	8000b2f8 <_dtoa_r+0x960>
8000b2f4:	30 02       	mov	r2,0
8000b2f6:	04 94       	mov	r4,r2
8000b2f8:	40 ea       	lddsp	r10,sp[0x38]
8000b2fa:	30 09       	mov	r9,0
8000b2fc:	5c da       	com	r10
8000b2fe:	40 85       	lddsp	r5,sp[0x20]
8000b300:	50 6a       	stdsp	sp[0x18],r10
8000b302:	50 49       	stdsp	sp[0x10],r9
8000b304:	c0 f9       	rjmp	8000b522 <_dtoa_r+0xb8a>
8000b306:	08 92       	mov	r2,r4
8000b308:	40 66       	lddsp	r6,sp[0x18]
8000b30a:	04 94       	mov	r4,r2
8000b30c:	2f f6       	sub	r6,-1
8000b30e:	50 66       	stdsp	sp[0x18],r6
8000b310:	33 18       	mov	r8,49
8000b312:	40 85       	lddsp	r5,sp[0x20]
8000b314:	0a c8       	st.b	r5++,r8
8000b316:	30 08       	mov	r8,0
8000b318:	50 48       	stdsp	sp[0x10],r8
8000b31a:	c0 49       	rjmp	8000b522 <_dtoa_r+0xb8a>
8000b31c:	40 dc       	lddsp	r12,sp[0x34]
8000b31e:	58 0c       	cp.w	r12,0
8000b320:	e0 80 00 b5 	breq	8000b48a <_dtoa_r+0xaf2>
8000b324:	58 05       	cp.w	r5,0
8000b326:	e0 8a 00 08 	brle	8000b336 <_dtoa_r+0x99e>
8000b32a:	08 9b       	mov	r11,r4
8000b32c:	0a 9a       	mov	r10,r5
8000b32e:	0e 9c       	mov	r12,r7
8000b330:	e0 a0 09 2e 	rcall	8000c58c <__lshift>
8000b334:	18 94       	mov	r4,r12
8000b336:	40 6b       	lddsp	r11,sp[0x18]
8000b338:	58 0b       	cp.w	r11,0
8000b33a:	c0 31       	brne	8000b340 <_dtoa_r+0x9a8>
8000b33c:	08 9c       	mov	r12,r4
8000b33e:	c1 38       	rjmp	8000b364 <_dtoa_r+0x9cc>
8000b340:	68 1b       	ld.w	r11,r4[0x4]
8000b342:	0e 9c       	mov	r12,r7
8000b344:	e0 a0 08 30 	rcall	8000c3a4 <_Balloc>
8000b348:	68 4a       	ld.w	r10,r4[0x10]
8000b34a:	18 95       	mov	r5,r12
8000b34c:	e8 cb ff f4 	sub	r11,r4,-12
8000b350:	2f ea       	sub	r10,-2
8000b352:	2f 4c       	sub	r12,-12
8000b354:	a3 6a       	lsl	r10,0x2
8000b356:	fe b0 e8 32 	rcall	800083ba <memcpy>
8000b35a:	0a 9b       	mov	r11,r5
8000b35c:	30 1a       	mov	r10,1
8000b35e:	0e 9c       	mov	r12,r7
8000b360:	e0 a0 09 16 	rcall	8000c58c <__lshift>
8000b364:	50 44       	stdsp	sp[0x10],r4
8000b366:	40 3a       	lddsp	r10,sp[0xc]
8000b368:	30 19       	mov	r9,1
8000b36a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000b36e:	18 94       	mov	r4,r12
8000b370:	50 da       	stdsp	sp[0x34],r10
8000b372:	40 85       	lddsp	r5,sp[0x20]
8000b374:	50 99       	stdsp	sp[0x24],r9
8000b376:	50 26       	stdsp	sp[0x8],r6
8000b378:	50 e1       	stdsp	sp[0x38],r1
8000b37a:	04 9b       	mov	r11,r2
8000b37c:	06 9c       	mov	r12,r3
8000b37e:	fe b0 fa 7d 	rcall	8000a878 <quorem>
8000b382:	40 4b       	lddsp	r11,sp[0x10]
8000b384:	f8 c0 ff d0 	sub	r0,r12,-48
8000b388:	06 9c       	mov	r12,r3
8000b38a:	e0 a0 07 da 	rcall	8000c33e <__mcmp>
8000b38e:	08 9a       	mov	r10,r4
8000b390:	50 6c       	stdsp	sp[0x18],r12
8000b392:	04 9b       	mov	r11,r2
8000b394:	0e 9c       	mov	r12,r7
8000b396:	e0 a0 08 93 	rcall	8000c4bc <__mdiff>
8000b39a:	18 91       	mov	r1,r12
8000b39c:	78 38       	ld.w	r8,r12[0xc]
8000b39e:	58 08       	cp.w	r8,0
8000b3a0:	c0 30       	breq	8000b3a6 <_dtoa_r+0xa0e>
8000b3a2:	30 16       	mov	r6,1
8000b3a4:	c0 68       	rjmp	8000b3b0 <_dtoa_r+0xa18>
8000b3a6:	18 9b       	mov	r11,r12
8000b3a8:	06 9c       	mov	r12,r3
8000b3aa:	e0 a0 07 ca 	rcall	8000c33e <__mcmp>
8000b3ae:	18 96       	mov	r6,r12
8000b3b0:	0e 9c       	mov	r12,r7
8000b3b2:	02 9b       	mov	r11,r1
8000b3b4:	e0 a0 07 de 	rcall	8000c370 <_Bfree>
8000b3b8:	40 cc       	lddsp	r12,sp[0x30]
8000b3ba:	ed ec 10 08 	or	r8,r6,r12
8000b3be:	c0 d1       	brne	8000b3d8 <_dtoa_r+0xa40>
8000b3c0:	40 db       	lddsp	r11,sp[0x34]
8000b3c2:	58 0b       	cp.w	r11,0
8000b3c4:	c0 a1       	brne	8000b3d8 <_dtoa_r+0xa40>
8000b3c6:	40 26       	lddsp	r6,sp[0x8]
8000b3c8:	e0 40 00 39 	cp.w	r0,57
8000b3cc:	c3 00       	breq	8000b42c <_dtoa_r+0xa94>
8000b3ce:	40 6a       	lddsp	r10,sp[0x18]
8000b3d0:	58 0a       	cp.w	r10,0
8000b3d2:	e0 89 00 24 	brgt	8000b41a <_dtoa_r+0xa82>
8000b3d6:	c2 f8       	rjmp	8000b434 <_dtoa_r+0xa9c>
8000b3d8:	40 69       	lddsp	r9,sp[0x18]
8000b3da:	58 09       	cp.w	r9,0
8000b3dc:	c0 85       	brlt	8000b3ec <_dtoa_r+0xa54>
8000b3de:	12 98       	mov	r8,r9
8000b3e0:	40 cc       	lddsp	r12,sp[0x30]
8000b3e2:	18 48       	or	r8,r12
8000b3e4:	c1 d1       	brne	8000b41e <_dtoa_r+0xa86>
8000b3e6:	40 db       	lddsp	r11,sp[0x34]
8000b3e8:	58 0b       	cp.w	r11,0
8000b3ea:	c1 a1       	brne	8000b41e <_dtoa_r+0xa86>
8000b3ec:	0c 99       	mov	r9,r6
8000b3ee:	40 26       	lddsp	r6,sp[0x8]
8000b3f0:	58 09       	cp.w	r9,0
8000b3f2:	e0 8a 00 21 	brle	8000b434 <_dtoa_r+0xa9c>
8000b3f6:	06 9b       	mov	r11,r3
8000b3f8:	30 1a       	mov	r10,1
8000b3fa:	0e 9c       	mov	r12,r7
8000b3fc:	e0 a0 08 c8 	rcall	8000c58c <__lshift>
8000b400:	04 9b       	mov	r11,r2
8000b402:	18 93       	mov	r3,r12
8000b404:	e0 a0 07 9d 	rcall	8000c33e <__mcmp>
8000b408:	e0 89 00 06 	brgt	8000b414 <_dtoa_r+0xa7c>
8000b40c:	c1 41       	brne	8000b434 <_dtoa_r+0xa9c>
8000b40e:	ed b0 00 00 	bld	r0,0x0
8000b412:	c1 11       	brne	8000b434 <_dtoa_r+0xa9c>
8000b414:	e0 40 00 39 	cp.w	r0,57
8000b418:	c0 a0       	breq	8000b42c <_dtoa_r+0xa94>
8000b41a:	2f f0       	sub	r0,-1
8000b41c:	c0 c8       	rjmp	8000b434 <_dtoa_r+0xa9c>
8000b41e:	58 06       	cp.w	r6,0
8000b420:	e0 8a 00 0c 	brle	8000b438 <_dtoa_r+0xaa0>
8000b424:	40 26       	lddsp	r6,sp[0x8]
8000b426:	e0 40 00 39 	cp.w	r0,57
8000b42a:	c0 41       	brne	8000b432 <_dtoa_r+0xa9a>
8000b42c:	33 98       	mov	r8,57
8000b42e:	0a c8       	st.b	r5++,r8
8000b430:	c6 78       	rjmp	8000b4fe <_dtoa_r+0xb66>
8000b432:	2f f0       	sub	r0,-1
8000b434:	0a c0       	st.b	r5++,r0
8000b436:	c7 58       	rjmp	8000b520 <_dtoa_r+0xb88>
8000b438:	0a c0       	st.b	r5++,r0
8000b43a:	40 9a       	lddsp	r10,sp[0x24]
8000b43c:	40 e9       	lddsp	r9,sp[0x38]
8000b43e:	12 3a       	cp.w	r10,r9
8000b440:	c4 30       	breq	8000b4c6 <_dtoa_r+0xb2e>
8000b442:	06 9b       	mov	r11,r3
8000b444:	30 09       	mov	r9,0
8000b446:	30 aa       	mov	r10,10
8000b448:	0e 9c       	mov	r12,r7
8000b44a:	e0 a0 09 6d 	rcall	8000c724 <__multadd>
8000b44e:	40 48       	lddsp	r8,sp[0x10]
8000b450:	18 93       	mov	r3,r12
8000b452:	08 38       	cp.w	r8,r4
8000b454:	c0 91       	brne	8000b466 <_dtoa_r+0xace>
8000b456:	10 9b       	mov	r11,r8
8000b458:	30 09       	mov	r9,0
8000b45a:	30 aa       	mov	r10,10
8000b45c:	0e 9c       	mov	r12,r7
8000b45e:	e0 a0 09 63 	rcall	8000c724 <__multadd>
8000b462:	50 4c       	stdsp	sp[0x10],r12
8000b464:	c0 e8       	rjmp	8000b480 <_dtoa_r+0xae8>
8000b466:	40 4b       	lddsp	r11,sp[0x10]
8000b468:	30 09       	mov	r9,0
8000b46a:	30 aa       	mov	r10,10
8000b46c:	0e 9c       	mov	r12,r7
8000b46e:	e0 a0 09 5b 	rcall	8000c724 <__multadd>
8000b472:	08 9b       	mov	r11,r4
8000b474:	50 4c       	stdsp	sp[0x10],r12
8000b476:	30 09       	mov	r9,0
8000b478:	30 aa       	mov	r10,10
8000b47a:	0e 9c       	mov	r12,r7
8000b47c:	e0 a0 09 54 	rcall	8000c724 <__multadd>
8000b480:	18 94       	mov	r4,r12
8000b482:	40 9c       	lddsp	r12,sp[0x24]
8000b484:	2f fc       	sub	r12,-1
8000b486:	50 9c       	stdsp	sp[0x24],r12
8000b488:	c7 9b       	rjmp	8000b37a <_dtoa_r+0x9e2>
8000b48a:	30 18       	mov	r8,1
8000b48c:	06 90       	mov	r0,r3
8000b48e:	40 85       	lddsp	r5,sp[0x20]
8000b490:	08 93       	mov	r3,r4
8000b492:	0c 94       	mov	r4,r6
8000b494:	10 96       	mov	r6,r8
8000b496:	04 9b       	mov	r11,r2
8000b498:	00 9c       	mov	r12,r0
8000b49a:	fe b0 f9 ef 	rcall	8000a878 <quorem>
8000b49e:	2d 0c       	sub	r12,-48
8000b4a0:	0a cc       	st.b	r5++,r12
8000b4a2:	02 36       	cp.w	r6,r1
8000b4a4:	c0 a4       	brge	8000b4b8 <_dtoa_r+0xb20>
8000b4a6:	00 9b       	mov	r11,r0
8000b4a8:	30 09       	mov	r9,0
8000b4aa:	30 aa       	mov	r10,10
8000b4ac:	0e 9c       	mov	r12,r7
8000b4ae:	2f f6       	sub	r6,-1
8000b4b0:	e0 a0 09 3a 	rcall	8000c724 <__multadd>
8000b4b4:	18 90       	mov	r0,r12
8000b4b6:	cf 0b       	rjmp	8000b496 <_dtoa_r+0xafe>
8000b4b8:	08 96       	mov	r6,r4
8000b4ba:	30 0b       	mov	r11,0
8000b4bc:	06 94       	mov	r4,r3
8000b4be:	50 4b       	stdsp	sp[0x10],r11
8000b4c0:	00 93       	mov	r3,r0
8000b4c2:	18 90       	mov	r0,r12
8000b4c4:	c0 28       	rjmp	8000b4c8 <_dtoa_r+0xb30>
8000b4c6:	40 26       	lddsp	r6,sp[0x8]
8000b4c8:	06 9b       	mov	r11,r3
8000b4ca:	30 1a       	mov	r10,1
8000b4cc:	0e 9c       	mov	r12,r7
8000b4ce:	e0 a0 08 5f 	rcall	8000c58c <__lshift>
8000b4d2:	04 9b       	mov	r11,r2
8000b4d4:	18 93       	mov	r3,r12
8000b4d6:	e0 a0 07 34 	rcall	8000c33e <__mcmp>
8000b4da:	e0 89 00 12 	brgt	8000b4fe <_dtoa_r+0xb66>
8000b4de:	c1 b1       	brne	8000b514 <_dtoa_r+0xb7c>
8000b4e0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000b4e4:	c0 d1       	brne	8000b4fe <_dtoa_r+0xb66>
8000b4e6:	c1 78       	rjmp	8000b514 <_dtoa_r+0xb7c>
8000b4e8:	40 89       	lddsp	r9,sp[0x20]
8000b4ea:	12 38       	cp.w	r8,r9
8000b4ec:	c0 30       	breq	8000b4f2 <_dtoa_r+0xb5a>
8000b4ee:	10 95       	mov	r5,r8
8000b4f0:	c0 88       	rjmp	8000b500 <_dtoa_r+0xb68>
8000b4f2:	2f f6       	sub	r6,-1
8000b4f4:	50 66       	stdsp	sp[0x18],r6
8000b4f6:	33 18       	mov	r8,49
8000b4f8:	40 8c       	lddsp	r12,sp[0x20]
8000b4fa:	b8 88       	st.b	r12[0x0],r8
8000b4fc:	c1 38       	rjmp	8000b522 <_dtoa_r+0xb8a>
8000b4fe:	33 9a       	mov	r10,57
8000b500:	0a 98       	mov	r8,r5
8000b502:	11 79       	ld.ub	r9,--r8
8000b504:	f4 09 18 00 	cp.b	r9,r10
8000b508:	cf 00       	breq	8000b4e8 <_dtoa_r+0xb50>
8000b50a:	2f f9       	sub	r9,-1
8000b50c:	b0 89       	st.b	r8[0x0],r9
8000b50e:	c0 98       	rjmp	8000b520 <_dtoa_r+0xb88>
8000b510:	10 95       	mov	r5,r8
8000b512:	c0 28       	rjmp	8000b516 <_dtoa_r+0xb7e>
8000b514:	33 09       	mov	r9,48
8000b516:	0a 98       	mov	r8,r5
8000b518:	11 7a       	ld.ub	r10,--r8
8000b51a:	f2 0a 18 00 	cp.b	r10,r9
8000b51e:	cf 90       	breq	8000b510 <_dtoa_r+0xb78>
8000b520:	50 66       	stdsp	sp[0x18],r6
8000b522:	04 9b       	mov	r11,r2
8000b524:	0e 9c       	mov	r12,r7
8000b526:	e0 a0 07 25 	rcall	8000c370 <_Bfree>
8000b52a:	58 04       	cp.w	r4,0
8000b52c:	c1 20       	breq	8000b550 <_dtoa_r+0xbb8>
8000b52e:	40 4b       	lddsp	r11,sp[0x10]
8000b530:	08 3b       	cp.w	r11,r4
8000b532:	5f 19       	srne	r9
8000b534:	58 0b       	cp.w	r11,0
8000b536:	5f 18       	srne	r8
8000b538:	f3 e8 00 08 	and	r8,r9,r8
8000b53c:	c0 40       	breq	8000b544 <_dtoa_r+0xbac>
8000b53e:	0e 9c       	mov	r12,r7
8000b540:	e0 a0 07 18 	rcall	8000c370 <_Bfree>
8000b544:	08 9b       	mov	r11,r4
8000b546:	0e 9c       	mov	r12,r7
8000b548:	e0 a0 07 14 	rcall	8000c370 <_Bfree>
8000b54c:	c0 28       	rjmp	8000b550 <_dtoa_r+0xbb8>
8000b54e:	50 66       	stdsp	sp[0x18],r6
8000b550:	0e 9c       	mov	r12,r7
8000b552:	06 9b       	mov	r11,r3
8000b554:	e0 a0 07 0e 	rcall	8000c370 <_Bfree>
8000b558:	30 08       	mov	r8,0
8000b55a:	aa 88       	st.b	r5[0x0],r8
8000b55c:	40 68       	lddsp	r8,sp[0x18]
8000b55e:	41 5a       	lddsp	r10,sp[0x54]
8000b560:	2f f8       	sub	r8,-1
8000b562:	41 29       	lddsp	r9,sp[0x48]
8000b564:	95 08       	st.w	r10[0x0],r8
8000b566:	40 8c       	lddsp	r12,sp[0x20]
8000b568:	58 09       	cp.w	r9,0
8000b56a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000b56e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000b572:	2e 6d       	sub	sp,-104
8000b574:	d8 32       	popm	r0-r7,pc
8000b576:	d7 03       	nop

8000b578 <_fflush_r>:
8000b578:	d4 21       	pushm	r4-r7,lr
8000b57a:	16 97       	mov	r7,r11
8000b57c:	18 96       	mov	r6,r12
8000b57e:	76 48       	ld.w	r8,r11[0x10]
8000b580:	58 08       	cp.w	r8,0
8000b582:	c7 c0       	breq	8000b67a <_fflush_r+0x102>
8000b584:	58 0c       	cp.w	r12,0
8000b586:	c0 50       	breq	8000b590 <_fflush_r+0x18>
8000b588:	78 68       	ld.w	r8,r12[0x18]
8000b58a:	58 08       	cp.w	r8,0
8000b58c:	c0 21       	brne	8000b590 <_fflush_r+0x18>
8000b58e:	cd 1c       	rcall	8000b730 <__sinit>
8000b590:	4b b8       	lddpc	r8,8000b67c <_fflush_r+0x104>
8000b592:	10 37       	cp.w	r7,r8
8000b594:	c0 31       	brne	8000b59a <_fflush_r+0x22>
8000b596:	6c 07       	ld.w	r7,r6[0x0]
8000b598:	c0 a8       	rjmp	8000b5ac <_fflush_r+0x34>
8000b59a:	4b a8       	lddpc	r8,8000b680 <_fflush_r+0x108>
8000b59c:	10 37       	cp.w	r7,r8
8000b59e:	c0 31       	brne	8000b5a4 <_fflush_r+0x2c>
8000b5a0:	6c 17       	ld.w	r7,r6[0x4]
8000b5a2:	c0 58       	rjmp	8000b5ac <_fflush_r+0x34>
8000b5a4:	4b 88       	lddpc	r8,8000b684 <_fflush_r+0x10c>
8000b5a6:	10 37       	cp.w	r7,r8
8000b5a8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000b5ac:	8e 6a       	ld.sh	r10,r7[0xc]
8000b5ae:	14 98       	mov	r8,r10
8000b5b0:	ed ba 00 03 	bld	r10,0x3
8000b5b4:	c4 20       	breq	8000b638 <_fflush_r+0xc0>
8000b5b6:	ab ba       	sbr	r10,0xb
8000b5b8:	ae 6a       	st.h	r7[0xc],r10
8000b5ba:	6e 18       	ld.w	r8,r7[0x4]
8000b5bc:	58 08       	cp.w	r8,0
8000b5be:	e0 89 00 06 	brgt	8000b5ca <_fflush_r+0x52>
8000b5c2:	6f 08       	ld.w	r8,r7[0x40]
8000b5c4:	58 08       	cp.w	r8,0
8000b5c6:	e0 8a 00 5a 	brle	8000b67a <_fflush_r+0x102>
8000b5ca:	6e b8       	ld.w	r8,r7[0x2c]
8000b5cc:	58 08       	cp.w	r8,0
8000b5ce:	c5 60       	breq	8000b67a <_fflush_r+0x102>
8000b5d0:	e2 1a 10 00 	andl	r10,0x1000,COH
8000b5d4:	c0 30       	breq	8000b5da <_fflush_r+0x62>
8000b5d6:	6f 55       	ld.w	r5,r7[0x54]
8000b5d8:	c0 f8       	rjmp	8000b5f6 <_fflush_r+0x7e>
8000b5da:	30 19       	mov	r9,1
8000b5dc:	6e 8b       	ld.w	r11,r7[0x20]
8000b5de:	0c 9c       	mov	r12,r6
8000b5e0:	5d 18       	icall	r8
8000b5e2:	18 95       	mov	r5,r12
8000b5e4:	5b fc       	cp.w	r12,-1
8000b5e6:	c0 81       	brne	8000b5f6 <_fflush_r+0x7e>
8000b5e8:	6c 38       	ld.w	r8,r6[0xc]
8000b5ea:	59 d8       	cp.w	r8,29
8000b5ec:	c4 70       	breq	8000b67a <_fflush_r+0x102>
8000b5ee:	8e 68       	ld.sh	r8,r7[0xc]
8000b5f0:	a7 a8       	sbr	r8,0x6
8000b5f2:	ae 68       	st.h	r7[0xc],r8
8000b5f4:	d8 22       	popm	r4-r7,pc
8000b5f6:	8e 68       	ld.sh	r8,r7[0xc]
8000b5f8:	ed b8 00 02 	bld	r8,0x2
8000b5fc:	c0 91       	brne	8000b60e <_fflush_r+0x96>
8000b5fe:	6e 18       	ld.w	r8,r7[0x4]
8000b600:	10 15       	sub	r5,r8
8000b602:	6e d8       	ld.w	r8,r7[0x34]
8000b604:	58 08       	cp.w	r8,0
8000b606:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000b60a:	eb d8 e1 15 	subne	r5,r5,r8
8000b60e:	6e b8       	ld.w	r8,r7[0x2c]
8000b610:	0c 9c       	mov	r12,r6
8000b612:	30 09       	mov	r9,0
8000b614:	0a 9a       	mov	r10,r5
8000b616:	6e 8b       	ld.w	r11,r7[0x20]
8000b618:	5d 18       	icall	r8
8000b61a:	8e 68       	ld.sh	r8,r7[0xc]
8000b61c:	0a 3c       	cp.w	r12,r5
8000b61e:	c2 61       	brne	8000b66a <_fflush_r+0xf2>
8000b620:	ab d8       	cbr	r8,0xb
8000b622:	30 0c       	mov	r12,0
8000b624:	6e 49       	ld.w	r9,r7[0x10]
8000b626:	ae 68       	st.h	r7[0xc],r8
8000b628:	8f 1c       	st.w	r7[0x4],r12
8000b62a:	8f 09       	st.w	r7[0x0],r9
8000b62c:	ed b8 00 0c 	bld	r8,0xc
8000b630:	c2 51       	brne	8000b67a <_fflush_r+0x102>
8000b632:	ef 45 00 54 	st.w	r7[84],r5
8000b636:	d8 22       	popm	r4-r7,pc
8000b638:	6e 45       	ld.w	r5,r7[0x10]
8000b63a:	58 05       	cp.w	r5,0
8000b63c:	c1 f0       	breq	8000b67a <_fflush_r+0x102>
8000b63e:	6e 04       	ld.w	r4,r7[0x0]
8000b640:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000b644:	8f 05       	st.w	r7[0x0],r5
8000b646:	f9 b8 01 00 	movne	r8,0
8000b64a:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000b64e:	0a 14       	sub	r4,r5
8000b650:	8f 28       	st.w	r7[0x8],r8
8000b652:	c1 18       	rjmp	8000b674 <_fflush_r+0xfc>
8000b654:	08 99       	mov	r9,r4
8000b656:	0a 9a       	mov	r10,r5
8000b658:	6e a8       	ld.w	r8,r7[0x28]
8000b65a:	6e 8b       	ld.w	r11,r7[0x20]
8000b65c:	0c 9c       	mov	r12,r6
8000b65e:	5d 18       	icall	r8
8000b660:	18 14       	sub	r4,r12
8000b662:	58 0c       	cp.w	r12,0
8000b664:	e0 89 00 07 	brgt	8000b672 <_fflush_r+0xfa>
8000b668:	8e 68       	ld.sh	r8,r7[0xc]
8000b66a:	a7 a8       	sbr	r8,0x6
8000b66c:	3f fc       	mov	r12,-1
8000b66e:	ae 68       	st.h	r7[0xc],r8
8000b670:	d8 22       	popm	r4-r7,pc
8000b672:	18 05       	add	r5,r12
8000b674:	58 04       	cp.w	r4,0
8000b676:	fe 99 ff ef 	brgt	8000b654 <_fflush_r+0xdc>
8000b67a:	d8 2a       	popm	r4-r7,pc,r12=0
8000b67c:	80 00       	ld.sh	r0,r0[0x0]
8000b67e:	ee a8       	*unknown*
8000b680:	80 00       	ld.sh	r0,r0[0x0]
8000b682:	ee c8 80 00 	sub	r8,r7,-32768
8000b686:	ee e8 5e fc 	ld.d	r8,r7[24316]

8000b688 <__sfp_lock_acquire>:
8000b688:	5e fc       	retal	r12

8000b68a <__sfp_lock_release>:
8000b68a:	5e fc       	retal	r12

8000b68c <_cleanup_r>:
8000b68c:	d4 01       	pushm	lr
8000b68e:	fe cb e8 22 	sub	r11,pc,-6110
8000b692:	e0 a0 03 05 	rcall	8000bc9c <_fwalk>
8000b696:	d8 02       	popm	pc

8000b698 <__sfmoreglue>:
8000b698:	d4 21       	pushm	r4-r7,lr
8000b69a:	16 95       	mov	r5,r11
8000b69c:	f6 06 10 5c 	mul	r6,r11,92
8000b6a0:	ec cb ff f4 	sub	r11,r6,-12
8000b6a4:	e0 a0 03 90 	rcall	8000bdc4 <_malloc_r>
8000b6a8:	18 97       	mov	r7,r12
8000b6aa:	c0 90       	breq	8000b6bc <__sfmoreglue+0x24>
8000b6ac:	99 15       	st.w	r12[0x4],r5
8000b6ae:	30 0b       	mov	r11,0
8000b6b0:	2f 4c       	sub	r12,-12
8000b6b2:	0c 9a       	mov	r10,r6
8000b6b4:	8f 2c       	st.w	r7[0x8],r12
8000b6b6:	8f 0b       	st.w	r7[0x0],r11
8000b6b8:	fe b0 e7 25 	rcall	80008502 <memset>
8000b6bc:	0e 9c       	mov	r12,r7
8000b6be:	d8 22       	popm	r4-r7,pc

8000b6c0 <__sfp>:
8000b6c0:	d4 21       	pushm	r4-r7,lr
8000b6c2:	49 b8       	lddpc	r8,8000b72c <__sfp+0x6c>
8000b6c4:	18 96       	mov	r6,r12
8000b6c6:	70 07       	ld.w	r7,r8[0x0]
8000b6c8:	6e 68       	ld.w	r8,r7[0x18]
8000b6ca:	58 08       	cp.w	r8,0
8000b6cc:	c0 31       	brne	8000b6d2 <__sfp+0x12>
8000b6ce:	0e 9c       	mov	r12,r7
8000b6d0:	c3 0c       	rcall	8000b730 <__sinit>
8000b6d2:	ee c7 ff 28 	sub	r7,r7,-216
8000b6d6:	30 05       	mov	r5,0
8000b6d8:	6e 2c       	ld.w	r12,r7[0x8]
8000b6da:	6e 18       	ld.w	r8,r7[0x4]
8000b6dc:	c0 68       	rjmp	8000b6e8 <__sfp+0x28>
8000b6de:	98 69       	ld.sh	r9,r12[0xc]
8000b6e0:	ea 09 19 00 	cp.h	r9,r5
8000b6e4:	c1 10       	breq	8000b706 <__sfp+0x46>
8000b6e6:	2a 4c       	sub	r12,-92
8000b6e8:	20 18       	sub	r8,1
8000b6ea:	cf a7       	brpl	8000b6de <__sfp+0x1e>
8000b6ec:	6e 08       	ld.w	r8,r7[0x0]
8000b6ee:	58 08       	cp.w	r8,0
8000b6f0:	c0 61       	brne	8000b6fc <__sfp+0x3c>
8000b6f2:	30 4b       	mov	r11,4
8000b6f4:	0c 9c       	mov	r12,r6
8000b6f6:	cd 1f       	rcall	8000b698 <__sfmoreglue>
8000b6f8:	8f 0c       	st.w	r7[0x0],r12
8000b6fa:	c0 30       	breq	8000b700 <__sfp+0x40>
8000b6fc:	6e 07       	ld.w	r7,r7[0x0]
8000b6fe:	ce db       	rjmp	8000b6d8 <__sfp+0x18>
8000b700:	30 c8       	mov	r8,12
8000b702:	8d 38       	st.w	r6[0xc],r8
8000b704:	d8 22       	popm	r4-r7,pc
8000b706:	30 08       	mov	r8,0
8000b708:	f9 48 00 4c 	st.w	r12[76],r8
8000b70c:	99 08       	st.w	r12[0x0],r8
8000b70e:	99 28       	st.w	r12[0x8],r8
8000b710:	99 18       	st.w	r12[0x4],r8
8000b712:	99 48       	st.w	r12[0x10],r8
8000b714:	99 58       	st.w	r12[0x14],r8
8000b716:	99 68       	st.w	r12[0x18],r8
8000b718:	99 d8       	st.w	r12[0x34],r8
8000b71a:	99 e8       	st.w	r12[0x38],r8
8000b71c:	f9 48 00 48 	st.w	r12[72],r8
8000b720:	3f f8       	mov	r8,-1
8000b722:	b8 78       	st.h	r12[0xe],r8
8000b724:	30 18       	mov	r8,1
8000b726:	b8 68       	st.h	r12[0xc],r8
8000b728:	d8 22       	popm	r4-r7,pc
8000b72a:	d7 03       	nop
8000b72c:	80 00       	ld.sh	r0,r0[0x0]
8000b72e:	ef 0c d4 21 	ld.sh	r12,r7[-11231]

8000b730 <__sinit>:
8000b730:	d4 21       	pushm	r4-r7,lr
8000b732:	18 96       	mov	r6,r12
8000b734:	78 67       	ld.w	r7,r12[0x18]
8000b736:	58 07       	cp.w	r7,0
8000b738:	c4 91       	brne	8000b7ca <__sinit+0x9a>
8000b73a:	fe c8 00 ae 	sub	r8,pc,174
8000b73e:	30 15       	mov	r5,1
8000b740:	99 a8       	st.w	r12[0x28],r8
8000b742:	f9 47 00 d8 	st.w	r12[216],r7
8000b746:	f9 47 00 dc 	st.w	r12[220],r7
8000b74a:	f9 47 00 e0 	st.w	r12[224],r7
8000b74e:	99 65       	st.w	r12[0x18],r5
8000b750:	cb 8f       	rcall	8000b6c0 <__sfp>
8000b752:	8d 0c       	st.w	r6[0x0],r12
8000b754:	0c 9c       	mov	r12,r6
8000b756:	cb 5f       	rcall	8000b6c0 <__sfp>
8000b758:	8d 1c       	st.w	r6[0x4],r12
8000b75a:	0c 9c       	mov	r12,r6
8000b75c:	cb 2f       	rcall	8000b6c0 <__sfp>
8000b75e:	6c 09       	ld.w	r9,r6[0x0]
8000b760:	30 48       	mov	r8,4
8000b762:	93 07       	st.w	r9[0x0],r7
8000b764:	b2 68       	st.h	r9[0xc],r8
8000b766:	93 17       	st.w	r9[0x4],r7
8000b768:	93 27       	st.w	r9[0x8],r7
8000b76a:	6c 18       	ld.w	r8,r6[0x4]
8000b76c:	b2 77       	st.h	r9[0xe],r7
8000b76e:	93 47       	st.w	r9[0x10],r7
8000b770:	93 57       	st.w	r9[0x14],r7
8000b772:	93 67       	st.w	r9[0x18],r7
8000b774:	93 89       	st.w	r9[0x20],r9
8000b776:	91 07       	st.w	r8[0x0],r7
8000b778:	91 17       	st.w	r8[0x4],r7
8000b77a:	91 27       	st.w	r8[0x8],r7
8000b77c:	fe ce eb c4 	sub	lr,pc,-5180
8000b780:	fe cb eb f4 	sub	r11,pc,-5132
8000b784:	93 9e       	st.w	r9[0x24],lr
8000b786:	93 ab       	st.w	r9[0x28],r11
8000b788:	fe ca ec 24 	sub	r10,pc,-5084
8000b78c:	fe c4 ec 30 	sub	r4,pc,-5072
8000b790:	93 ba       	st.w	r9[0x2c],r10
8000b792:	93 c4       	st.w	r9[0x30],r4
8000b794:	30 99       	mov	r9,9
8000b796:	b0 69       	st.h	r8[0xc],r9
8000b798:	b0 75       	st.h	r8[0xe],r5
8000b79a:	91 c4       	st.w	r8[0x30],r4
8000b79c:	91 47       	st.w	r8[0x10],r7
8000b79e:	91 57       	st.w	r8[0x14],r7
8000b7a0:	91 67       	st.w	r8[0x18],r7
8000b7a2:	91 88       	st.w	r8[0x20],r8
8000b7a4:	91 9e       	st.w	r8[0x24],lr
8000b7a6:	91 ab       	st.w	r8[0x28],r11
8000b7a8:	91 ba       	st.w	r8[0x2c],r10
8000b7aa:	8d 2c       	st.w	r6[0x8],r12
8000b7ac:	31 28       	mov	r8,18
8000b7ae:	99 07       	st.w	r12[0x0],r7
8000b7b0:	b8 68       	st.h	r12[0xc],r8
8000b7b2:	99 17       	st.w	r12[0x4],r7
8000b7b4:	99 27       	st.w	r12[0x8],r7
8000b7b6:	30 28       	mov	r8,2
8000b7b8:	b8 78       	st.h	r12[0xe],r8
8000b7ba:	99 c4       	st.w	r12[0x30],r4
8000b7bc:	99 67       	st.w	r12[0x18],r7
8000b7be:	99 9e       	st.w	r12[0x24],lr
8000b7c0:	99 ab       	st.w	r12[0x28],r11
8000b7c2:	99 ba       	st.w	r12[0x2c],r10
8000b7c4:	99 47       	st.w	r12[0x10],r7
8000b7c6:	99 57       	st.w	r12[0x14],r7
8000b7c8:	99 8c       	st.w	r12[0x20],r12
8000b7ca:	d8 22       	popm	r4-r7,pc

8000b7cc <_malloc_trim_r>:
8000b7cc:	d4 21       	pushm	r4-r7,lr
8000b7ce:	16 95       	mov	r5,r11
8000b7d0:	18 97       	mov	r7,r12
8000b7d2:	e0 a0 05 3d 	rcall	8000c24c <__malloc_lock>
8000b7d6:	4a 24       	lddpc	r4,8000b85c <_malloc_trim_r+0x90>
8000b7d8:	68 28       	ld.w	r8,r4[0x8]
8000b7da:	70 16       	ld.w	r6,r8[0x4]
8000b7dc:	e0 16 ff fc 	andl	r6,0xfffc
8000b7e0:	ec c8 ff 91 	sub	r8,r6,-111
8000b7e4:	f0 05 01 05 	sub	r5,r8,r5
8000b7e8:	e0 15 ff 80 	andl	r5,0xff80
8000b7ec:	ea c5 00 80 	sub	r5,r5,128
8000b7f0:	e0 45 00 7f 	cp.w	r5,127
8000b7f4:	e0 8a 00 23 	brle	8000b83a <_malloc_trim_r+0x6e>
8000b7f8:	30 0b       	mov	r11,0
8000b7fa:	0e 9c       	mov	r12,r7
8000b7fc:	e0 a0 09 7c 	rcall	8000caf4 <_sbrk_r>
8000b800:	68 28       	ld.w	r8,r4[0x8]
8000b802:	0c 08       	add	r8,r6
8000b804:	10 3c       	cp.w	r12,r8
8000b806:	c1 a1       	brne	8000b83a <_malloc_trim_r+0x6e>
8000b808:	ea 0b 11 00 	rsub	r11,r5,0
8000b80c:	0e 9c       	mov	r12,r7
8000b80e:	e0 a0 09 73 	rcall	8000caf4 <_sbrk_r>
8000b812:	5b fc       	cp.w	r12,-1
8000b814:	c1 71       	brne	8000b842 <_malloc_trim_r+0x76>
8000b816:	30 0b       	mov	r11,0
8000b818:	0e 9c       	mov	r12,r7
8000b81a:	e0 a0 09 6d 	rcall	8000caf4 <_sbrk_r>
8000b81e:	68 28       	ld.w	r8,r4[0x8]
8000b820:	f8 08 01 09 	sub	r9,r12,r8
8000b824:	58 f9       	cp.w	r9,15
8000b826:	e0 8a 00 0a 	brle	8000b83a <_malloc_trim_r+0x6e>
8000b82a:	a1 a9       	sbr	r9,0x0
8000b82c:	91 19       	st.w	r8[0x4],r9
8000b82e:	48 d8       	lddpc	r8,8000b860 <_malloc_trim_r+0x94>
8000b830:	70 09       	ld.w	r9,r8[0x0]
8000b832:	48 d8       	lddpc	r8,8000b864 <_malloc_trim_r+0x98>
8000b834:	f8 09 01 09 	sub	r9,r12,r9
8000b838:	91 09       	st.w	r8[0x0],r9
8000b83a:	0e 9c       	mov	r12,r7
8000b83c:	e0 a0 05 09 	rcall	8000c24e <__malloc_unlock>
8000b840:	d8 2a       	popm	r4-r7,pc,r12=0
8000b842:	68 28       	ld.w	r8,r4[0x8]
8000b844:	0a 16       	sub	r6,r5
8000b846:	a1 a6       	sbr	r6,0x0
8000b848:	91 16       	st.w	r8[0x4],r6
8000b84a:	48 78       	lddpc	r8,8000b864 <_malloc_trim_r+0x98>
8000b84c:	70 09       	ld.w	r9,r8[0x0]
8000b84e:	0a 19       	sub	r9,r5
8000b850:	0e 9c       	mov	r12,r7
8000b852:	91 09       	st.w	r8[0x0],r9
8000b854:	e0 a0 04 fd 	rcall	8000c24e <__malloc_unlock>
8000b858:	da 2a       	popm	r4-r7,pc,r12=1
8000b85a:	d7 03       	nop
8000b85c:	00 00       	add	r0,r0
8000b85e:	01 04       	ld.w	r4,r0++
8000b860:	00 00       	add	r0,r0
8000b862:	05 10       	ld.sh	r0,r2++
8000b864:	00 00       	add	r0,r0
8000b866:	07 30       	ld.ub	r0,r3++

8000b868 <_free_r>:
8000b868:	d4 21       	pushm	r4-r7,lr
8000b86a:	16 96       	mov	r6,r11
8000b86c:	18 97       	mov	r7,r12
8000b86e:	58 0b       	cp.w	r11,0
8000b870:	e0 80 00 c2 	breq	8000b9f4 <_free_r+0x18c>
8000b874:	e0 a0 04 ec 	rcall	8000c24c <__malloc_lock>
8000b878:	20 86       	sub	r6,8
8000b87a:	4c ca       	lddpc	r10,8000b9a8 <_free_r+0x140>
8000b87c:	6c 18       	ld.w	r8,r6[0x4]
8000b87e:	74 2e       	ld.w	lr,r10[0x8]
8000b880:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000b884:	a1 c8       	cbr	r8,0x0
8000b886:	ec 08 00 09 	add	r9,r6,r8
8000b88a:	72 1b       	ld.w	r11,r9[0x4]
8000b88c:	e0 1b ff fc 	andl	r11,0xfffc
8000b890:	1c 39       	cp.w	r9,lr
8000b892:	c1 c1       	brne	8000b8ca <_free_r+0x62>
8000b894:	f6 08 00 08 	add	r8,r11,r8
8000b898:	58 0c       	cp.w	r12,0
8000b89a:	c0 81       	brne	8000b8aa <_free_r+0x42>
8000b89c:	6c 09       	ld.w	r9,r6[0x0]
8000b89e:	12 16       	sub	r6,r9
8000b8a0:	12 08       	add	r8,r9
8000b8a2:	6c 3b       	ld.w	r11,r6[0xc]
8000b8a4:	6c 29       	ld.w	r9,r6[0x8]
8000b8a6:	97 29       	st.w	r11[0x8],r9
8000b8a8:	93 3b       	st.w	r9[0xc],r11
8000b8aa:	10 99       	mov	r9,r8
8000b8ac:	95 26       	st.w	r10[0x8],r6
8000b8ae:	a1 a9       	sbr	r9,0x0
8000b8b0:	8d 19       	st.w	r6[0x4],r9
8000b8b2:	4b f9       	lddpc	r9,8000b9ac <_free_r+0x144>
8000b8b4:	72 09       	ld.w	r9,r9[0x0]
8000b8b6:	12 38       	cp.w	r8,r9
8000b8b8:	c0 53       	brcs	8000b8c2 <_free_r+0x5a>
8000b8ba:	4b e8       	lddpc	r8,8000b9b0 <_free_r+0x148>
8000b8bc:	0e 9c       	mov	r12,r7
8000b8be:	70 0b       	ld.w	r11,r8[0x0]
8000b8c0:	c8 6f       	rcall	8000b7cc <_malloc_trim_r>
8000b8c2:	0e 9c       	mov	r12,r7
8000b8c4:	e0 a0 04 c5 	rcall	8000c24e <__malloc_unlock>
8000b8c8:	d8 22       	popm	r4-r7,pc
8000b8ca:	93 1b       	st.w	r9[0x4],r11
8000b8cc:	58 0c       	cp.w	r12,0
8000b8ce:	c0 30       	breq	8000b8d4 <_free_r+0x6c>
8000b8d0:	30 0c       	mov	r12,0
8000b8d2:	c1 08       	rjmp	8000b8f2 <_free_r+0x8a>
8000b8d4:	6c 0e       	ld.w	lr,r6[0x0]
8000b8d6:	f4 c5 ff f8 	sub	r5,r10,-8
8000b8da:	1c 16       	sub	r6,lr
8000b8dc:	1c 08       	add	r8,lr
8000b8de:	6c 2e       	ld.w	lr,r6[0x8]
8000b8e0:	0a 3e       	cp.w	lr,r5
8000b8e2:	f9 bc 00 01 	moveq	r12,1
8000b8e6:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000b8ea:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000b8ee:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000b8f2:	f2 0b 00 0e 	add	lr,r9,r11
8000b8f6:	7c 1e       	ld.w	lr,lr[0x4]
8000b8f8:	ed be 00 00 	bld	lr,0x0
8000b8fc:	c1 30       	breq	8000b922 <_free_r+0xba>
8000b8fe:	16 08       	add	r8,r11
8000b900:	58 0c       	cp.w	r12,0
8000b902:	c0 c1       	brne	8000b91a <_free_r+0xb2>
8000b904:	4a 9e       	lddpc	lr,8000b9a8 <_free_r+0x140>
8000b906:	72 2b       	ld.w	r11,r9[0x8]
8000b908:	2f 8e       	sub	lr,-8
8000b90a:	1c 3b       	cp.w	r11,lr
8000b90c:	c0 71       	brne	8000b91a <_free_r+0xb2>
8000b90e:	97 36       	st.w	r11[0xc],r6
8000b910:	97 26       	st.w	r11[0x8],r6
8000b912:	8d 2b       	st.w	r6[0x8],r11
8000b914:	8d 3b       	st.w	r6[0xc],r11
8000b916:	30 1c       	mov	r12,1
8000b918:	c0 58       	rjmp	8000b922 <_free_r+0xba>
8000b91a:	72 2b       	ld.w	r11,r9[0x8]
8000b91c:	72 39       	ld.w	r9,r9[0xc]
8000b91e:	93 2b       	st.w	r9[0x8],r11
8000b920:	97 39       	st.w	r11[0xc],r9
8000b922:	10 99       	mov	r9,r8
8000b924:	ec 08 09 08 	st.w	r6[r8],r8
8000b928:	a1 a9       	sbr	r9,0x0
8000b92a:	8d 19       	st.w	r6[0x4],r9
8000b92c:	58 0c       	cp.w	r12,0
8000b92e:	c6 01       	brne	8000b9ee <_free_r+0x186>
8000b930:	e0 48 01 ff 	cp.w	r8,511
8000b934:	e0 8b 00 13 	brhi	8000b95a <_free_r+0xf2>
8000b938:	a3 98       	lsr	r8,0x3
8000b93a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000b93e:	72 2b       	ld.w	r11,r9[0x8]
8000b940:	8d 39       	st.w	r6[0xc],r9
8000b942:	8d 2b       	st.w	r6[0x8],r11
8000b944:	97 36       	st.w	r11[0xc],r6
8000b946:	93 26       	st.w	r9[0x8],r6
8000b948:	a3 48       	asr	r8,0x2
8000b94a:	74 19       	ld.w	r9,r10[0x4]
8000b94c:	30 1b       	mov	r11,1
8000b94e:	f6 08 09 48 	lsl	r8,r11,r8
8000b952:	f3 e8 10 08 	or	r8,r9,r8
8000b956:	95 18       	st.w	r10[0x4],r8
8000b958:	c4 b8       	rjmp	8000b9ee <_free_r+0x186>
8000b95a:	f0 09 16 09 	lsr	r9,r8,0x9
8000b95e:	58 49       	cp.w	r9,4
8000b960:	e0 8b 00 06 	brhi	8000b96c <_free_r+0x104>
8000b964:	f0 0b 16 06 	lsr	r11,r8,0x6
8000b968:	2c 8b       	sub	r11,-56
8000b96a:	c2 68       	rjmp	8000b9b6 <_free_r+0x14e>
8000b96c:	59 49       	cp.w	r9,20
8000b96e:	e0 8b 00 05 	brhi	8000b978 <_free_r+0x110>
8000b972:	f2 cb ff a5 	sub	r11,r9,-91
8000b976:	c2 08       	rjmp	8000b9b6 <_free_r+0x14e>
8000b978:	e0 49 00 54 	cp.w	r9,84
8000b97c:	e0 8b 00 06 	brhi	8000b988 <_free_r+0x120>
8000b980:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000b984:	29 2b       	sub	r11,-110
8000b986:	c1 88       	rjmp	8000b9b6 <_free_r+0x14e>
8000b988:	e0 49 01 54 	cp.w	r9,340
8000b98c:	e0 8b 00 06 	brhi	8000b998 <_free_r+0x130>
8000b990:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000b994:	28 9b       	sub	r11,-119
8000b996:	c1 08       	rjmp	8000b9b6 <_free_r+0x14e>
8000b998:	f0 0b 16 12 	lsr	r11,r8,0x12
8000b99c:	e0 49 05 54 	cp.w	r9,1364
8000b9a0:	e0 88 00 0a 	brls	8000b9b4 <_free_r+0x14c>
8000b9a4:	37 eb       	mov	r11,126
8000b9a6:	c0 88       	rjmp	8000b9b6 <_free_r+0x14e>
8000b9a8:	00 00       	add	r0,r0
8000b9aa:	01 04       	ld.w	r4,r0++
8000b9ac:	00 00       	add	r0,r0
8000b9ae:	05 0c       	ld.w	r12,r2++
8000b9b0:	00 00       	add	r0,r0
8000b9b2:	07 2c       	ld.uh	r12,r3++
8000b9b4:	28 4b       	sub	r11,-124
8000b9b6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000b9ba:	78 29       	ld.w	r9,r12[0x8]
8000b9bc:	18 39       	cp.w	r9,r12
8000b9be:	c0 e1       	brne	8000b9da <_free_r+0x172>
8000b9c0:	74 18       	ld.w	r8,r10[0x4]
8000b9c2:	a3 4b       	asr	r11,0x2
8000b9c4:	30 1c       	mov	r12,1
8000b9c6:	f8 0b 09 4b 	lsl	r11,r12,r11
8000b9ca:	f1 eb 10 0b 	or	r11,r8,r11
8000b9ce:	12 98       	mov	r8,r9
8000b9d0:	95 1b       	st.w	r10[0x4],r11
8000b9d2:	c0 a8       	rjmp	8000b9e6 <_free_r+0x17e>
8000b9d4:	72 29       	ld.w	r9,r9[0x8]
8000b9d6:	18 39       	cp.w	r9,r12
8000b9d8:	c0 60       	breq	8000b9e4 <_free_r+0x17c>
8000b9da:	72 1a       	ld.w	r10,r9[0x4]
8000b9dc:	e0 1a ff fc 	andl	r10,0xfffc
8000b9e0:	14 38       	cp.w	r8,r10
8000b9e2:	cf 93       	brcs	8000b9d4 <_free_r+0x16c>
8000b9e4:	72 38       	ld.w	r8,r9[0xc]
8000b9e6:	8d 38       	st.w	r6[0xc],r8
8000b9e8:	8d 29       	st.w	r6[0x8],r9
8000b9ea:	93 36       	st.w	r9[0xc],r6
8000b9ec:	91 26       	st.w	r8[0x8],r6
8000b9ee:	0e 9c       	mov	r12,r7
8000b9f0:	e0 a0 04 2f 	rcall	8000c24e <__malloc_unlock>
8000b9f4:	d8 22       	popm	r4-r7,pc
8000b9f6:	d7 03       	nop

8000b9f8 <__sfvwrite_r>:
8000b9f8:	d4 31       	pushm	r0-r7,lr
8000b9fa:	20 3d       	sub	sp,12
8000b9fc:	14 94       	mov	r4,r10
8000b9fe:	18 95       	mov	r5,r12
8000ba00:	16 97       	mov	r7,r11
8000ba02:	74 28       	ld.w	r8,r10[0x8]
8000ba04:	58 08       	cp.w	r8,0
8000ba06:	e0 80 01 48 	breq	8000bc96 <__sfvwrite_r+0x29e>
8000ba0a:	96 68       	ld.sh	r8,r11[0xc]
8000ba0c:	ed b8 00 03 	bld	r8,0x3
8000ba10:	c0 41       	brne	8000ba18 <__sfvwrite_r+0x20>
8000ba12:	76 48       	ld.w	r8,r11[0x10]
8000ba14:	58 08       	cp.w	r8,0
8000ba16:	c0 c1       	brne	8000ba2e <__sfvwrite_r+0x36>
8000ba18:	0e 9b       	mov	r11,r7
8000ba1a:	0a 9c       	mov	r12,r5
8000ba1c:	fe b0 f6 c0 	rcall	8000a79c <__swsetup_r>
8000ba20:	c0 70       	breq	8000ba2e <__sfvwrite_r+0x36>
8000ba22:	8e 68       	ld.sh	r8,r7[0xc]
8000ba24:	a7 a8       	sbr	r8,0x6
8000ba26:	ae 68       	st.h	r7[0xc],r8
8000ba28:	30 98       	mov	r8,9
8000ba2a:	8b 38       	st.w	r5[0xc],r8
8000ba2c:	c3 39       	rjmp	8000bc92 <__sfvwrite_r+0x29a>
8000ba2e:	8e 63       	ld.sh	r3,r7[0xc]
8000ba30:	68 00       	ld.w	r0,r4[0x0]
8000ba32:	06 96       	mov	r6,r3
8000ba34:	e2 16 00 02 	andl	r6,0x2,COH
8000ba38:	c2 10       	breq	8000ba7a <__sfvwrite_r+0x82>
8000ba3a:	30 03       	mov	r3,0
8000ba3c:	e0 62 04 00 	mov	r2,1024
8000ba40:	06 96       	mov	r6,r3
8000ba42:	c0 48       	rjmp	8000ba4a <__sfvwrite_r+0x52>
8000ba44:	60 03       	ld.w	r3,r0[0x0]
8000ba46:	60 16       	ld.w	r6,r0[0x4]
8000ba48:	2f 80       	sub	r0,-8
8000ba4a:	58 06       	cp.w	r6,0
8000ba4c:	cf c0       	breq	8000ba44 <__sfvwrite_r+0x4c>
8000ba4e:	e0 46 04 00 	cp.w	r6,1024
8000ba52:	ec 09 17 80 	movls	r9,r6
8000ba56:	e4 09 17 b0 	movhi	r9,r2
8000ba5a:	06 9a       	mov	r10,r3
8000ba5c:	6e a8       	ld.w	r8,r7[0x28]
8000ba5e:	6e 8b       	ld.w	r11,r7[0x20]
8000ba60:	0a 9c       	mov	r12,r5
8000ba62:	5d 18       	icall	r8
8000ba64:	18 16       	sub	r6,r12
8000ba66:	58 0c       	cp.w	r12,0
8000ba68:	e0 8a 01 12 	brle	8000bc8c <__sfvwrite_r+0x294>
8000ba6c:	68 28       	ld.w	r8,r4[0x8]
8000ba6e:	18 18       	sub	r8,r12
8000ba70:	89 28       	st.w	r4[0x8],r8
8000ba72:	e0 80 01 12 	breq	8000bc96 <__sfvwrite_r+0x29e>
8000ba76:	18 03       	add	r3,r12
8000ba78:	ce 9b       	rjmp	8000ba4a <__sfvwrite_r+0x52>
8000ba7a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ba7e:	c0 70       	breq	8000ba8c <__sfvwrite_r+0x94>
8000ba80:	50 06       	stdsp	sp[0x0],r6
8000ba82:	0c 93       	mov	r3,r6
8000ba84:	0c 91       	mov	r1,r6
8000ba86:	50 15       	stdsp	sp[0x4],r5
8000ba88:	08 92       	mov	r2,r4
8000ba8a:	c9 e8       	rjmp	8000bbc6 <__sfvwrite_r+0x1ce>
8000ba8c:	06 96       	mov	r6,r3
8000ba8e:	08 91       	mov	r1,r4
8000ba90:	c0 48       	rjmp	8000ba98 <__sfvwrite_r+0xa0>
8000ba92:	60 03       	ld.w	r3,r0[0x0]
8000ba94:	60 16       	ld.w	r6,r0[0x4]
8000ba96:	2f 80       	sub	r0,-8
8000ba98:	58 06       	cp.w	r6,0
8000ba9a:	cf c0       	breq	8000ba92 <__sfvwrite_r+0x9a>
8000ba9c:	8e 68       	ld.sh	r8,r7[0xc]
8000ba9e:	6e 24       	ld.w	r4,r7[0x8]
8000baa0:	10 99       	mov	r9,r8
8000baa2:	e2 19 02 00 	andl	r9,0x200,COH
8000baa6:	c5 50       	breq	8000bb50 <__sfvwrite_r+0x158>
8000baa8:	08 36       	cp.w	r6,r4
8000baaa:	c4 33       	brcs	8000bb30 <__sfvwrite_r+0x138>
8000baac:	10 99       	mov	r9,r8
8000baae:	e2 19 04 80 	andl	r9,0x480,COH
8000bab2:	c3 f0       	breq	8000bb30 <__sfvwrite_r+0x138>
8000bab4:	6e 4b       	ld.w	r11,r7[0x10]
8000bab6:	6e 09       	ld.w	r9,r7[0x0]
8000bab8:	16 19       	sub	r9,r11
8000baba:	50 09       	stdsp	sp[0x0],r9
8000babc:	6e 59       	ld.w	r9,r7[0x14]
8000babe:	10 9c       	mov	r12,r8
8000bac0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000bac4:	30 28       	mov	r8,2
8000bac6:	f4 08 0c 08 	divs	r8,r10,r8
8000baca:	fa e9 00 04 	st.d	sp[4],r8
8000bace:	10 94       	mov	r4,r8
8000bad0:	40 09       	lddsp	r9,sp[0x0]
8000bad2:	e2 1c 04 00 	andl	r12,0x400,COH
8000bad6:	2f f9       	sub	r9,-1
8000bad8:	0c 09       	add	r9,r6
8000bada:	12 38       	cp.w	r8,r9
8000badc:	f2 04 17 30 	movlo	r4,r9
8000bae0:	58 0c       	cp.w	r12,0
8000bae2:	c1 00       	breq	8000bb02 <__sfvwrite_r+0x10a>
8000bae4:	08 9b       	mov	r11,r4
8000bae6:	0a 9c       	mov	r12,r5
8000bae8:	c6 ed       	rcall	8000bdc4 <_malloc_r>
8000baea:	18 92       	mov	r2,r12
8000baec:	c1 40       	breq	8000bb14 <__sfvwrite_r+0x11c>
8000baee:	40 0a       	lddsp	r10,sp[0x0]
8000baf0:	6e 4b       	ld.w	r11,r7[0x10]
8000baf2:	fe b0 e4 64 	rcall	800083ba <memcpy>
8000baf6:	8e 68       	ld.sh	r8,r7[0xc]
8000baf8:	e0 18 fb 7f 	andl	r8,0xfb7f
8000bafc:	a7 b8       	sbr	r8,0x7
8000bafe:	ae 68       	st.h	r7[0xc],r8
8000bb00:	c0 d8       	rjmp	8000bb1a <__sfvwrite_r+0x122>
8000bb02:	08 9a       	mov	r10,r4
8000bb04:	0a 9c       	mov	r12,r5
8000bb06:	e0 a0 06 95 	rcall	8000c830 <_realloc_r>
8000bb0a:	18 92       	mov	r2,r12
8000bb0c:	c0 71       	brne	8000bb1a <__sfvwrite_r+0x122>
8000bb0e:	6e 4b       	ld.w	r11,r7[0x10]
8000bb10:	0a 9c       	mov	r12,r5
8000bb12:	ca be       	rcall	8000b868 <_free_r>
8000bb14:	30 c8       	mov	r8,12
8000bb16:	8b 38       	st.w	r5[0xc],r8
8000bb18:	cb a8       	rjmp	8000bc8c <__sfvwrite_r+0x294>
8000bb1a:	40 0a       	lddsp	r10,sp[0x0]
8000bb1c:	40 09       	lddsp	r9,sp[0x0]
8000bb1e:	e8 0a 01 0a 	sub	r10,r4,r10
8000bb22:	e4 09 00 08 	add	r8,r2,r9
8000bb26:	8f 54       	st.w	r7[0x14],r4
8000bb28:	8f 2a       	st.w	r7[0x8],r10
8000bb2a:	8f 08       	st.w	r7[0x0],r8
8000bb2c:	8f 42       	st.w	r7[0x10],r2
8000bb2e:	0c 94       	mov	r4,r6
8000bb30:	08 36       	cp.w	r6,r4
8000bb32:	ec 04 17 30 	movlo	r4,r6
8000bb36:	06 9b       	mov	r11,r3
8000bb38:	08 9a       	mov	r10,r4
8000bb3a:	6e 0c       	ld.w	r12,r7[0x0]
8000bb3c:	e0 a0 03 69 	rcall	8000c20e <memmove>
8000bb40:	6e 08       	ld.w	r8,r7[0x0]
8000bb42:	08 08       	add	r8,r4
8000bb44:	8f 08       	st.w	r7[0x0],r8
8000bb46:	6e 28       	ld.w	r8,r7[0x8]
8000bb48:	08 18       	sub	r8,r4
8000bb4a:	0c 94       	mov	r4,r6
8000bb4c:	8f 28       	st.w	r7[0x8],r8
8000bb4e:	c3 08       	rjmp	8000bbae <__sfvwrite_r+0x1b6>
8000bb50:	08 36       	cp.w	r6,r4
8000bb52:	5f ba       	srhi	r10
8000bb54:	6e 0c       	ld.w	r12,r7[0x0]
8000bb56:	6e 48       	ld.w	r8,r7[0x10]
8000bb58:	10 3c       	cp.w	r12,r8
8000bb5a:	5f b8       	srhi	r8
8000bb5c:	f5 e8 00 08 	and	r8,r10,r8
8000bb60:	f2 08 18 00 	cp.b	r8,r9
8000bb64:	c0 e0       	breq	8000bb80 <__sfvwrite_r+0x188>
8000bb66:	06 9b       	mov	r11,r3
8000bb68:	08 9a       	mov	r10,r4
8000bb6a:	e0 a0 03 52 	rcall	8000c20e <memmove>
8000bb6e:	6e 08       	ld.w	r8,r7[0x0]
8000bb70:	08 08       	add	r8,r4
8000bb72:	0e 9b       	mov	r11,r7
8000bb74:	8f 08       	st.w	r7[0x0],r8
8000bb76:	0a 9c       	mov	r12,r5
8000bb78:	fe b0 fd 00 	rcall	8000b578 <_fflush_r>
8000bb7c:	c1 90       	breq	8000bbae <__sfvwrite_r+0x1b6>
8000bb7e:	c8 78       	rjmp	8000bc8c <__sfvwrite_r+0x294>
8000bb80:	6e 59       	ld.w	r9,r7[0x14]
8000bb82:	12 36       	cp.w	r6,r9
8000bb84:	c0 a3       	brcs	8000bb98 <__sfvwrite_r+0x1a0>
8000bb86:	6e a8       	ld.w	r8,r7[0x28]
8000bb88:	06 9a       	mov	r10,r3
8000bb8a:	6e 8b       	ld.w	r11,r7[0x20]
8000bb8c:	0a 9c       	mov	r12,r5
8000bb8e:	5d 18       	icall	r8
8000bb90:	18 94       	mov	r4,r12
8000bb92:	e0 89 00 0e 	brgt	8000bbae <__sfvwrite_r+0x1b6>
8000bb96:	c7 b8       	rjmp	8000bc8c <__sfvwrite_r+0x294>
8000bb98:	0c 9a       	mov	r10,r6
8000bb9a:	06 9b       	mov	r11,r3
8000bb9c:	e0 a0 03 39 	rcall	8000c20e <memmove>
8000bba0:	6e 08       	ld.w	r8,r7[0x0]
8000bba2:	0c 08       	add	r8,r6
8000bba4:	0c 94       	mov	r4,r6
8000bba6:	8f 08       	st.w	r7[0x0],r8
8000bba8:	6e 28       	ld.w	r8,r7[0x8]
8000bbaa:	0c 18       	sub	r8,r6
8000bbac:	8f 28       	st.w	r7[0x8],r8
8000bbae:	62 28       	ld.w	r8,r1[0x8]
8000bbb0:	08 18       	sub	r8,r4
8000bbb2:	83 28       	st.w	r1[0x8],r8
8000bbb4:	c7 10       	breq	8000bc96 <__sfvwrite_r+0x29e>
8000bbb6:	08 16       	sub	r6,r4
8000bbb8:	08 03       	add	r3,r4
8000bbba:	c6 fb       	rjmp	8000ba98 <__sfvwrite_r+0xa0>
8000bbbc:	60 03       	ld.w	r3,r0[0x0]
8000bbbe:	60 11       	ld.w	r1,r0[0x4]
8000bbc0:	30 08       	mov	r8,0
8000bbc2:	2f 80       	sub	r0,-8
8000bbc4:	50 08       	stdsp	sp[0x0],r8
8000bbc6:	58 01       	cp.w	r1,0
8000bbc8:	cf a0       	breq	8000bbbc <__sfvwrite_r+0x1c4>
8000bbca:	40 0a       	lddsp	r10,sp[0x0]
8000bbcc:	58 0a       	cp.w	r10,0
8000bbce:	c1 81       	brne	8000bbfe <__sfvwrite_r+0x206>
8000bbd0:	02 9a       	mov	r10,r1
8000bbd2:	30 ab       	mov	r11,10
8000bbd4:	06 9c       	mov	r12,r3
8000bbd6:	e0 a0 03 11 	rcall	8000c1f8 <memchr>
8000bbda:	f9 b8 01 01 	movne	r8,1
8000bbde:	f9 d8 e1 06 	addne	r6,r12,r8
8000bbe2:	ed d3 e1 16 	subne	r6,r6,r3
8000bbe6:	f9 b9 01 01 	movne	r9,1
8000bbea:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000bbee:	f9 b8 00 01 	moveq	r8,1
8000bbf2:	e3 d8 e0 06 	addeq	r6,r1,r8
8000bbf6:	f9 b8 00 01 	moveq	r8,1
8000bbfa:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000bbfe:	02 36       	cp.w	r6,r1
8000bc00:	ec 04 17 80 	movls	r4,r6
8000bc04:	e2 04 17 b0 	movhi	r4,r1
8000bc08:	6e 59       	ld.w	r9,r7[0x14]
8000bc0a:	6e 25       	ld.w	r5,r7[0x8]
8000bc0c:	f2 05 00 05 	add	r5,r9,r5
8000bc10:	0a 34       	cp.w	r4,r5
8000bc12:	5f 9a       	srgt	r10
8000bc14:	6e 0c       	ld.w	r12,r7[0x0]
8000bc16:	6e 48       	ld.w	r8,r7[0x10]
8000bc18:	10 3c       	cp.w	r12,r8
8000bc1a:	5f b8       	srhi	r8
8000bc1c:	f5 e8 00 08 	and	r8,r10,r8
8000bc20:	30 0a       	mov	r10,0
8000bc22:	f4 08 18 00 	cp.b	r8,r10
8000bc26:	c0 e0       	breq	8000bc42 <__sfvwrite_r+0x24a>
8000bc28:	06 9b       	mov	r11,r3
8000bc2a:	0a 9a       	mov	r10,r5
8000bc2c:	e0 a0 02 f1 	rcall	8000c20e <memmove>
8000bc30:	6e 08       	ld.w	r8,r7[0x0]
8000bc32:	0a 08       	add	r8,r5
8000bc34:	0e 9b       	mov	r11,r7
8000bc36:	8f 08       	st.w	r7[0x0],r8
8000bc38:	40 1c       	lddsp	r12,sp[0x4]
8000bc3a:	fe b0 fc 9f 	rcall	8000b578 <_fflush_r>
8000bc3e:	c1 80       	breq	8000bc6e <__sfvwrite_r+0x276>
8000bc40:	c2 68       	rjmp	8000bc8c <__sfvwrite_r+0x294>
8000bc42:	12 34       	cp.w	r4,r9
8000bc44:	c0 a5       	brlt	8000bc58 <__sfvwrite_r+0x260>
8000bc46:	6e a8       	ld.w	r8,r7[0x28]
8000bc48:	06 9a       	mov	r10,r3
8000bc4a:	6e 8b       	ld.w	r11,r7[0x20]
8000bc4c:	40 1c       	lddsp	r12,sp[0x4]
8000bc4e:	5d 18       	icall	r8
8000bc50:	18 95       	mov	r5,r12
8000bc52:	e0 89 00 0e 	brgt	8000bc6e <__sfvwrite_r+0x276>
8000bc56:	c1 b8       	rjmp	8000bc8c <__sfvwrite_r+0x294>
8000bc58:	08 9a       	mov	r10,r4
8000bc5a:	06 9b       	mov	r11,r3
8000bc5c:	e0 a0 02 d9 	rcall	8000c20e <memmove>
8000bc60:	6e 08       	ld.w	r8,r7[0x0]
8000bc62:	08 08       	add	r8,r4
8000bc64:	08 95       	mov	r5,r4
8000bc66:	8f 08       	st.w	r7[0x0],r8
8000bc68:	6e 28       	ld.w	r8,r7[0x8]
8000bc6a:	08 18       	sub	r8,r4
8000bc6c:	8f 28       	st.w	r7[0x8],r8
8000bc6e:	0a 16       	sub	r6,r5
8000bc70:	c0 71       	brne	8000bc7e <__sfvwrite_r+0x286>
8000bc72:	0e 9b       	mov	r11,r7
8000bc74:	40 1c       	lddsp	r12,sp[0x4]
8000bc76:	fe b0 fc 81 	rcall	8000b578 <_fflush_r>
8000bc7a:	c0 91       	brne	8000bc8c <__sfvwrite_r+0x294>
8000bc7c:	50 06       	stdsp	sp[0x0],r6
8000bc7e:	64 28       	ld.w	r8,r2[0x8]
8000bc80:	0a 18       	sub	r8,r5
8000bc82:	85 28       	st.w	r2[0x8],r8
8000bc84:	c0 90       	breq	8000bc96 <__sfvwrite_r+0x29e>
8000bc86:	0a 11       	sub	r1,r5
8000bc88:	0a 03       	add	r3,r5
8000bc8a:	c9 eb       	rjmp	8000bbc6 <__sfvwrite_r+0x1ce>
8000bc8c:	8e 68       	ld.sh	r8,r7[0xc]
8000bc8e:	a7 a8       	sbr	r8,0x6
8000bc90:	ae 68       	st.h	r7[0xc],r8
8000bc92:	3f fc       	mov	r12,-1
8000bc94:	c0 28       	rjmp	8000bc98 <__sfvwrite_r+0x2a0>
8000bc96:	30 0c       	mov	r12,0
8000bc98:	2f dd       	sub	sp,-12
8000bc9a:	d8 32       	popm	r0-r7,pc

8000bc9c <_fwalk>:
8000bc9c:	d4 31       	pushm	r0-r7,lr
8000bc9e:	30 05       	mov	r5,0
8000bca0:	16 91       	mov	r1,r11
8000bca2:	f8 c7 ff 28 	sub	r7,r12,-216
8000bca6:	0a 92       	mov	r2,r5
8000bca8:	fe b0 fc f0 	rcall	8000b688 <__sfp_lock_acquire>
8000bcac:	3f f3       	mov	r3,-1
8000bcae:	c1 68       	rjmp	8000bcda <_fwalk+0x3e>
8000bcb0:	6e 26       	ld.w	r6,r7[0x8]
8000bcb2:	6e 14       	ld.w	r4,r7[0x4]
8000bcb4:	2f 46       	sub	r6,-12
8000bcb6:	c0 c8       	rjmp	8000bcce <_fwalk+0x32>
8000bcb8:	8c 08       	ld.sh	r8,r6[0x0]
8000bcba:	e4 08 19 00 	cp.h	r8,r2
8000bcbe:	c0 70       	breq	8000bccc <_fwalk+0x30>
8000bcc0:	8c 18       	ld.sh	r8,r6[0x2]
8000bcc2:	e6 08 19 00 	cp.h	r8,r3
8000bcc6:	c0 30       	breq	8000bccc <_fwalk+0x30>
8000bcc8:	5d 11       	icall	r1
8000bcca:	18 45       	or	r5,r12
8000bccc:	2a 46       	sub	r6,-92
8000bcce:	20 14       	sub	r4,1
8000bcd0:	ec cc 00 0c 	sub	r12,r6,12
8000bcd4:	58 04       	cp.w	r4,0
8000bcd6:	cf 14       	brge	8000bcb8 <_fwalk+0x1c>
8000bcd8:	6e 07       	ld.w	r7,r7[0x0]
8000bcda:	58 07       	cp.w	r7,0
8000bcdc:	ce a1       	brne	8000bcb0 <_fwalk+0x14>
8000bcde:	fe b0 fc d6 	rcall	8000b68a <__sfp_lock_release>
8000bce2:	0a 9c       	mov	r12,r5
8000bce4:	d8 32       	popm	r0-r7,pc
8000bce6:	d7 03       	nop

8000bce8 <_localeconv_r>:
8000bce8:	48 1c       	lddpc	r12,8000bcec <_localeconv_r+0x4>
8000bcea:	5e fc       	retal	r12
8000bcec:	80 00       	ld.sh	r0,r0[0x0]
8000bcee:	ef 10 d4 21 	ld.uh	r0,r7[-11231]

8000bcf0 <__smakebuf_r>:
8000bcf0:	d4 21       	pushm	r4-r7,lr
8000bcf2:	20 fd       	sub	sp,60
8000bcf4:	96 68       	ld.sh	r8,r11[0xc]
8000bcf6:	16 97       	mov	r7,r11
8000bcf8:	18 96       	mov	r6,r12
8000bcfa:	e2 18 00 02 	andl	r8,0x2,COH
8000bcfe:	c3 c1       	brne	8000bd76 <__smakebuf_r+0x86>
8000bd00:	96 7b       	ld.sh	r11,r11[0xe]
8000bd02:	f0 0b 19 00 	cp.h	r11,r8
8000bd06:	c0 55       	brlt	8000bd10 <__smakebuf_r+0x20>
8000bd08:	1a 9a       	mov	r10,sp
8000bd0a:	e0 a0 08 b9 	rcall	8000ce7c <_fstat_r>
8000bd0e:	c0 f4       	brge	8000bd2c <__smakebuf_r+0x3c>
8000bd10:	8e 65       	ld.sh	r5,r7[0xc]
8000bd12:	0a 98       	mov	r8,r5
8000bd14:	ab b8       	sbr	r8,0xb
8000bd16:	e2 15 00 80 	andl	r5,0x80,COH
8000bd1a:	ae 68       	st.h	r7[0xc],r8
8000bd1c:	30 04       	mov	r4,0
8000bd1e:	e0 68 04 00 	mov	r8,1024
8000bd22:	f9 b5 01 40 	movne	r5,64
8000bd26:	f0 05 17 00 	moveq	r5,r8
8000bd2a:	c1 c8       	rjmp	8000bd62 <__smakebuf_r+0x72>
8000bd2c:	40 18       	lddsp	r8,sp[0x4]
8000bd2e:	e2 18 f0 00 	andl	r8,0xf000,COH
8000bd32:	e0 48 20 00 	cp.w	r8,8192
8000bd36:	5f 04       	sreq	r4
8000bd38:	e0 48 80 00 	cp.w	r8,32768
8000bd3c:	c0 e1       	brne	8000bd58 <__smakebuf_r+0x68>
8000bd3e:	6e b9       	ld.w	r9,r7[0x2c]
8000bd40:	fe c8 f1 dc 	sub	r8,pc,-3620
8000bd44:	10 39       	cp.w	r9,r8
8000bd46:	c0 91       	brne	8000bd58 <__smakebuf_r+0x68>
8000bd48:	8e 68       	ld.sh	r8,r7[0xc]
8000bd4a:	e0 65 04 00 	mov	r5,1024
8000bd4e:	ab a8       	sbr	r8,0xa
8000bd50:	ef 45 00 50 	st.w	r7[80],r5
8000bd54:	ae 68       	st.h	r7[0xc],r8
8000bd56:	c0 68       	rjmp	8000bd62 <__smakebuf_r+0x72>
8000bd58:	8e 68       	ld.sh	r8,r7[0xc]
8000bd5a:	e0 65 04 00 	mov	r5,1024
8000bd5e:	ab b8       	sbr	r8,0xb
8000bd60:	ae 68       	st.h	r7[0xc],r8
8000bd62:	0a 9b       	mov	r11,r5
8000bd64:	0c 9c       	mov	r12,r6
8000bd66:	c2 fc       	rcall	8000bdc4 <_malloc_r>
8000bd68:	8e 68       	ld.sh	r8,r7[0xc]
8000bd6a:	c0 d1       	brne	8000bd84 <__smakebuf_r+0x94>
8000bd6c:	ed b8 00 09 	bld	r8,0x9
8000bd70:	c1 f0       	breq	8000bdae <__smakebuf_r+0xbe>
8000bd72:	a1 b8       	sbr	r8,0x1
8000bd74:	ae 68       	st.h	r7[0xc],r8
8000bd76:	ee c8 ff b9 	sub	r8,r7,-71
8000bd7a:	8f 48       	st.w	r7[0x10],r8
8000bd7c:	8f 08       	st.w	r7[0x0],r8
8000bd7e:	30 18       	mov	r8,1
8000bd80:	8f 58       	st.w	r7[0x14],r8
8000bd82:	c1 68       	rjmp	8000bdae <__smakebuf_r+0xbe>
8000bd84:	a7 b8       	sbr	r8,0x7
8000bd86:	8f 4c       	st.w	r7[0x10],r12
8000bd88:	ae 68       	st.h	r7[0xc],r8
8000bd8a:	8f 55       	st.w	r7[0x14],r5
8000bd8c:	fe c8 07 00 	sub	r8,pc,1792
8000bd90:	8f 0c       	st.w	r7[0x0],r12
8000bd92:	8d a8       	st.w	r6[0x28],r8
8000bd94:	58 04       	cp.w	r4,0
8000bd96:	c0 c0       	breq	8000bdae <__smakebuf_r+0xbe>
8000bd98:	8e 7c       	ld.sh	r12,r7[0xe]
8000bd9a:	e0 a0 07 59 	rcall	8000cc4c <isatty>
8000bd9e:	ef f8 12 06 	ld.shne	r8,r7[0xc]
8000bda2:	f9 b9 01 01 	movne	r9,1
8000bda6:	f1 d9 e1 38 	orne	r8,r8,r9
8000bdaa:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000bdae:	2f 1d       	sub	sp,-60
8000bdb0:	d8 22       	popm	r4-r7,pc
8000bdb2:	d7 03       	nop

8000bdb4 <malloc>:
8000bdb4:	d4 01       	pushm	lr
8000bdb6:	48 38       	lddpc	r8,8000bdc0 <malloc+0xc>
8000bdb8:	18 9b       	mov	r11,r12
8000bdba:	70 0c       	ld.w	r12,r8[0x0]
8000bdbc:	c0 4c       	rcall	8000bdc4 <_malloc_r>
8000bdbe:	d8 02       	popm	pc
8000bdc0:	00 00       	add	r0,r0
8000bdc2:	01 00       	ld.w	r0,r0++

8000bdc4 <_malloc_r>:
8000bdc4:	d4 31       	pushm	r0-r7,lr
8000bdc6:	f6 c7 ff f5 	sub	r7,r11,-11
8000bdca:	18 95       	mov	r5,r12
8000bdcc:	59 67       	cp.w	r7,22
8000bdce:	f9 b7 08 10 	movls	r7,16
8000bdd2:	f9 b8 0b f8 	movhi	r8,-8
8000bdd6:	ef d8 eb 27 	andhi	r7,r7,r8
8000bdda:	16 37       	cp.w	r7,r11
8000bddc:	5f 38       	srlo	r8
8000bdde:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000bde2:	c0 50       	breq	8000bdec <_malloc_r+0x28>
8000bde4:	30 c8       	mov	r8,12
8000bde6:	99 38       	st.w	r12[0xc],r8
8000bde8:	e0 8f 01 ef 	bral	8000c1c6 <_malloc_r+0x402>
8000bdec:	e0 a0 02 30 	rcall	8000c24c <__malloc_lock>
8000bdf0:	e0 47 01 f7 	cp.w	r7,503
8000bdf4:	e0 8b 00 1c 	brhi	8000be2c <_malloc_r+0x68>
8000bdf8:	ee 03 16 03 	lsr	r3,r7,0x3
8000bdfc:	4c c8       	lddpc	r8,8000bf2c <_malloc_r+0x168>
8000bdfe:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000be02:	70 36       	ld.w	r6,r8[0xc]
8000be04:	10 36       	cp.w	r6,r8
8000be06:	c0 61       	brne	8000be12 <_malloc_r+0x4e>
8000be08:	ec c8 ff f8 	sub	r8,r6,-8
8000be0c:	70 36       	ld.w	r6,r8[0xc]
8000be0e:	10 36       	cp.w	r6,r8
8000be10:	c0 c0       	breq	8000be28 <_malloc_r+0x64>
8000be12:	6c 18       	ld.w	r8,r6[0x4]
8000be14:	e0 18 ff fc 	andl	r8,0xfffc
8000be18:	6c 3a       	ld.w	r10,r6[0xc]
8000be1a:	ec 08 00 09 	add	r9,r6,r8
8000be1e:	0a 9c       	mov	r12,r5
8000be20:	6c 28       	ld.w	r8,r6[0x8]
8000be22:	95 28       	st.w	r10[0x8],r8
8000be24:	91 3a       	st.w	r8[0xc],r10
8000be26:	c4 78       	rjmp	8000beb4 <_malloc_r+0xf0>
8000be28:	2f e3       	sub	r3,-2
8000be2a:	c4 d8       	rjmp	8000bec4 <_malloc_r+0x100>
8000be2c:	ee 08 16 09 	lsr	r8,r7,0x9
8000be30:	c0 41       	brne	8000be38 <_malloc_r+0x74>
8000be32:	ee 03 16 03 	lsr	r3,r7,0x3
8000be36:	c2 78       	rjmp	8000be84 <_malloc_r+0xc0>
8000be38:	58 48       	cp.w	r8,4
8000be3a:	e0 8b 00 06 	brhi	8000be46 <_malloc_r+0x82>
8000be3e:	ee 03 16 06 	lsr	r3,r7,0x6
8000be42:	2c 83       	sub	r3,-56
8000be44:	c2 08       	rjmp	8000be84 <_malloc_r+0xc0>
8000be46:	59 48       	cp.w	r8,20
8000be48:	e0 8b 00 05 	brhi	8000be52 <_malloc_r+0x8e>
8000be4c:	f0 c3 ff a5 	sub	r3,r8,-91
8000be50:	c1 a8       	rjmp	8000be84 <_malloc_r+0xc0>
8000be52:	e0 48 00 54 	cp.w	r8,84
8000be56:	e0 8b 00 06 	brhi	8000be62 <_malloc_r+0x9e>
8000be5a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000be5e:	29 23       	sub	r3,-110
8000be60:	c1 28       	rjmp	8000be84 <_malloc_r+0xc0>
8000be62:	e0 48 01 54 	cp.w	r8,340
8000be66:	e0 8b 00 06 	brhi	8000be72 <_malloc_r+0xae>
8000be6a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000be6e:	28 93       	sub	r3,-119
8000be70:	c0 a8       	rjmp	8000be84 <_malloc_r+0xc0>
8000be72:	ee 03 16 12 	lsr	r3,r7,0x12
8000be76:	e0 48 05 54 	cp.w	r8,1364
8000be7a:	e0 88 00 04 	brls	8000be82 <_malloc_r+0xbe>
8000be7e:	37 e3       	mov	r3,126
8000be80:	c0 28       	rjmp	8000be84 <_malloc_r+0xc0>
8000be82:	28 43       	sub	r3,-124
8000be84:	4a aa       	lddpc	r10,8000bf2c <_malloc_r+0x168>
8000be86:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000be8a:	74 36       	ld.w	r6,r10[0xc]
8000be8c:	c1 98       	rjmp	8000bebe <_malloc_r+0xfa>
8000be8e:	6c 19       	ld.w	r9,r6[0x4]
8000be90:	e0 19 ff fc 	andl	r9,0xfffc
8000be94:	f2 07 01 0b 	sub	r11,r9,r7
8000be98:	58 fb       	cp.w	r11,15
8000be9a:	e0 8a 00 04 	brle	8000bea2 <_malloc_r+0xde>
8000be9e:	20 13       	sub	r3,1
8000bea0:	c1 18       	rjmp	8000bec2 <_malloc_r+0xfe>
8000bea2:	6c 38       	ld.w	r8,r6[0xc]
8000bea4:	58 0b       	cp.w	r11,0
8000bea6:	c0 b5       	brlt	8000bebc <_malloc_r+0xf8>
8000bea8:	6c 2a       	ld.w	r10,r6[0x8]
8000beaa:	ec 09 00 09 	add	r9,r6,r9
8000beae:	0a 9c       	mov	r12,r5
8000beb0:	91 2a       	st.w	r8[0x8],r10
8000beb2:	95 38       	st.w	r10[0xc],r8
8000beb4:	72 18       	ld.w	r8,r9[0x4]
8000beb6:	a1 a8       	sbr	r8,0x0
8000beb8:	93 18       	st.w	r9[0x4],r8
8000beba:	cb b8       	rjmp	8000c030 <_malloc_r+0x26c>
8000bebc:	10 96       	mov	r6,r8
8000bebe:	14 36       	cp.w	r6,r10
8000bec0:	ce 71       	brne	8000be8e <_malloc_r+0xca>
8000bec2:	2f f3       	sub	r3,-1
8000bec4:	49 aa       	lddpc	r10,8000bf2c <_malloc_r+0x168>
8000bec6:	f4 cc ff f8 	sub	r12,r10,-8
8000beca:	78 26       	ld.w	r6,r12[0x8]
8000becc:	18 36       	cp.w	r6,r12
8000bece:	c6 d0       	breq	8000bfa8 <_malloc_r+0x1e4>
8000bed0:	6c 19       	ld.w	r9,r6[0x4]
8000bed2:	e0 19 ff fc 	andl	r9,0xfffc
8000bed6:	f2 07 01 08 	sub	r8,r9,r7
8000beda:	58 f8       	cp.w	r8,15
8000bedc:	e0 89 00 8f 	brgt	8000bffa <_malloc_r+0x236>
8000bee0:	99 3c       	st.w	r12[0xc],r12
8000bee2:	99 2c       	st.w	r12[0x8],r12
8000bee4:	58 08       	cp.w	r8,0
8000bee6:	c0 55       	brlt	8000bef0 <_malloc_r+0x12c>
8000bee8:	ec 09 00 09 	add	r9,r6,r9
8000beec:	0a 9c       	mov	r12,r5
8000beee:	ce 3b       	rjmp	8000beb4 <_malloc_r+0xf0>
8000bef0:	e0 49 01 ff 	cp.w	r9,511
8000bef4:	e0 8b 00 13 	brhi	8000bf1a <_malloc_r+0x156>
8000bef8:	a3 99       	lsr	r9,0x3
8000befa:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000befe:	70 2b       	ld.w	r11,r8[0x8]
8000bf00:	8d 38       	st.w	r6[0xc],r8
8000bf02:	8d 2b       	st.w	r6[0x8],r11
8000bf04:	97 36       	st.w	r11[0xc],r6
8000bf06:	91 26       	st.w	r8[0x8],r6
8000bf08:	a3 49       	asr	r9,0x2
8000bf0a:	74 18       	ld.w	r8,r10[0x4]
8000bf0c:	30 1b       	mov	r11,1
8000bf0e:	f6 09 09 49 	lsl	r9,r11,r9
8000bf12:	f1 e9 10 09 	or	r9,r8,r9
8000bf16:	95 19       	st.w	r10[0x4],r9
8000bf18:	c4 88       	rjmp	8000bfa8 <_malloc_r+0x1e4>
8000bf1a:	f2 08 16 09 	lsr	r8,r9,0x9
8000bf1e:	58 48       	cp.w	r8,4
8000bf20:	e0 8b 00 08 	brhi	8000bf30 <_malloc_r+0x16c>
8000bf24:	f2 0a 16 06 	lsr	r10,r9,0x6
8000bf28:	2c 8a       	sub	r10,-56
8000bf2a:	c2 28       	rjmp	8000bf6e <_malloc_r+0x1aa>
8000bf2c:	00 00       	add	r0,r0
8000bf2e:	01 04       	ld.w	r4,r0++
8000bf30:	59 48       	cp.w	r8,20
8000bf32:	e0 8b 00 05 	brhi	8000bf3c <_malloc_r+0x178>
8000bf36:	f0 ca ff a5 	sub	r10,r8,-91
8000bf3a:	c1 a8       	rjmp	8000bf6e <_malloc_r+0x1aa>
8000bf3c:	e0 48 00 54 	cp.w	r8,84
8000bf40:	e0 8b 00 06 	brhi	8000bf4c <_malloc_r+0x188>
8000bf44:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000bf48:	29 2a       	sub	r10,-110
8000bf4a:	c1 28       	rjmp	8000bf6e <_malloc_r+0x1aa>
8000bf4c:	e0 48 01 54 	cp.w	r8,340
8000bf50:	e0 8b 00 06 	brhi	8000bf5c <_malloc_r+0x198>
8000bf54:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000bf58:	28 9a       	sub	r10,-119
8000bf5a:	c0 a8       	rjmp	8000bf6e <_malloc_r+0x1aa>
8000bf5c:	f2 0a 16 12 	lsr	r10,r9,0x12
8000bf60:	e0 48 05 54 	cp.w	r8,1364
8000bf64:	e0 88 00 04 	brls	8000bf6c <_malloc_r+0x1a8>
8000bf68:	37 ea       	mov	r10,126
8000bf6a:	c0 28       	rjmp	8000bf6e <_malloc_r+0x1aa>
8000bf6c:	28 4a       	sub	r10,-124
8000bf6e:	4c 8b       	lddpc	r11,8000c08c <_malloc_r+0x2c8>
8000bf70:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000bf74:	68 28       	ld.w	r8,r4[0x8]
8000bf76:	08 38       	cp.w	r8,r4
8000bf78:	c0 e1       	brne	8000bf94 <_malloc_r+0x1d0>
8000bf7a:	76 19       	ld.w	r9,r11[0x4]
8000bf7c:	a3 4a       	asr	r10,0x2
8000bf7e:	30 1e       	mov	lr,1
8000bf80:	fc 0a 09 4a 	lsl	r10,lr,r10
8000bf84:	f3 ea 10 0a 	or	r10,r9,r10
8000bf88:	10 99       	mov	r9,r8
8000bf8a:	97 1a       	st.w	r11[0x4],r10
8000bf8c:	c0 a8       	rjmp	8000bfa0 <_malloc_r+0x1dc>
8000bf8e:	70 28       	ld.w	r8,r8[0x8]
8000bf90:	08 38       	cp.w	r8,r4
8000bf92:	c0 60       	breq	8000bf9e <_malloc_r+0x1da>
8000bf94:	70 1a       	ld.w	r10,r8[0x4]
8000bf96:	e0 1a ff fc 	andl	r10,0xfffc
8000bf9a:	14 39       	cp.w	r9,r10
8000bf9c:	cf 93       	brcs	8000bf8e <_malloc_r+0x1ca>
8000bf9e:	70 39       	ld.w	r9,r8[0xc]
8000bfa0:	8d 39       	st.w	r6[0xc],r9
8000bfa2:	8d 28       	st.w	r6[0x8],r8
8000bfa4:	91 36       	st.w	r8[0xc],r6
8000bfa6:	93 26       	st.w	r9[0x8],r6
8000bfa8:	e6 08 14 02 	asr	r8,r3,0x2
8000bfac:	30 1b       	mov	r11,1
8000bfae:	4b 84       	lddpc	r4,8000c08c <_malloc_r+0x2c8>
8000bfb0:	f6 08 09 4b 	lsl	r11,r11,r8
8000bfb4:	68 18       	ld.w	r8,r4[0x4]
8000bfb6:	10 3b       	cp.w	r11,r8
8000bfb8:	e0 8b 00 6c 	brhi	8000c090 <_malloc_r+0x2cc>
8000bfbc:	f7 e8 00 09 	and	r9,r11,r8
8000bfc0:	c0 b1       	brne	8000bfd6 <_malloc_r+0x212>
8000bfc2:	e0 13 ff fc 	andl	r3,0xfffc
8000bfc6:	a1 7b       	lsl	r11,0x1
8000bfc8:	2f c3       	sub	r3,-4
8000bfca:	c0 38       	rjmp	8000bfd0 <_malloc_r+0x20c>
8000bfcc:	2f c3       	sub	r3,-4
8000bfce:	a1 7b       	lsl	r11,0x1
8000bfd0:	f7 e8 00 09 	and	r9,r11,r8
8000bfd4:	cf c0       	breq	8000bfcc <_malloc_r+0x208>
8000bfd6:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000bfda:	06 92       	mov	r2,r3
8000bfdc:	1c 91       	mov	r1,lr
8000bfde:	62 36       	ld.w	r6,r1[0xc]
8000bfe0:	c2 d8       	rjmp	8000c03a <_malloc_r+0x276>
8000bfe2:	6c 1a       	ld.w	r10,r6[0x4]
8000bfe4:	e0 1a ff fc 	andl	r10,0xfffc
8000bfe8:	f4 07 01 08 	sub	r8,r10,r7
8000bfec:	58 f8       	cp.w	r8,15
8000bfee:	e0 8a 00 15 	brle	8000c018 <_malloc_r+0x254>
8000bff2:	6c 3a       	ld.w	r10,r6[0xc]
8000bff4:	6c 29       	ld.w	r9,r6[0x8]
8000bff6:	95 29       	st.w	r10[0x8],r9
8000bff8:	93 3a       	st.w	r9[0xc],r10
8000bffa:	0e 99       	mov	r9,r7
8000bffc:	ec 07 00 07 	add	r7,r6,r7
8000c000:	a1 a9       	sbr	r9,0x0
8000c002:	99 37       	st.w	r12[0xc],r7
8000c004:	99 27       	st.w	r12[0x8],r7
8000c006:	8d 19       	st.w	r6[0x4],r9
8000c008:	ee 08 09 08 	st.w	r7[r8],r8
8000c00c:	8f 2c       	st.w	r7[0x8],r12
8000c00e:	8f 3c       	st.w	r7[0xc],r12
8000c010:	a1 a8       	sbr	r8,0x0
8000c012:	0a 9c       	mov	r12,r5
8000c014:	8f 18       	st.w	r7[0x4],r8
8000c016:	c0 d8       	rjmp	8000c030 <_malloc_r+0x26c>
8000c018:	6c 39       	ld.w	r9,r6[0xc]
8000c01a:	58 08       	cp.w	r8,0
8000c01c:	c0 e5       	brlt	8000c038 <_malloc_r+0x274>
8000c01e:	ec 0a 00 0a 	add	r10,r6,r10
8000c022:	74 18       	ld.w	r8,r10[0x4]
8000c024:	a1 a8       	sbr	r8,0x0
8000c026:	0a 9c       	mov	r12,r5
8000c028:	95 18       	st.w	r10[0x4],r8
8000c02a:	6c 28       	ld.w	r8,r6[0x8]
8000c02c:	93 28       	st.w	r9[0x8],r8
8000c02e:	91 39       	st.w	r8[0xc],r9
8000c030:	c0 fd       	rcall	8000c24e <__malloc_unlock>
8000c032:	ec cc ff f8 	sub	r12,r6,-8
8000c036:	d8 32       	popm	r0-r7,pc
8000c038:	12 96       	mov	r6,r9
8000c03a:	02 36       	cp.w	r6,r1
8000c03c:	cd 31       	brne	8000bfe2 <_malloc_r+0x21e>
8000c03e:	2f f2       	sub	r2,-1
8000c040:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000c044:	c0 30       	breq	8000c04a <_malloc_r+0x286>
8000c046:	2f 81       	sub	r1,-8
8000c048:	cc bb       	rjmp	8000bfde <_malloc_r+0x21a>
8000c04a:	1c 98       	mov	r8,lr
8000c04c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000c050:	c0 81       	brne	8000c060 <_malloc_r+0x29c>
8000c052:	68 19       	ld.w	r9,r4[0x4]
8000c054:	f6 08 11 ff 	rsub	r8,r11,-1
8000c058:	f3 e8 00 08 	and	r8,r9,r8
8000c05c:	89 18       	st.w	r4[0x4],r8
8000c05e:	c0 78       	rjmp	8000c06c <_malloc_r+0x2a8>
8000c060:	f0 c9 00 08 	sub	r9,r8,8
8000c064:	20 13       	sub	r3,1
8000c066:	70 08       	ld.w	r8,r8[0x0]
8000c068:	12 38       	cp.w	r8,r9
8000c06a:	cf 10       	breq	8000c04c <_malloc_r+0x288>
8000c06c:	a1 7b       	lsl	r11,0x1
8000c06e:	68 18       	ld.w	r8,r4[0x4]
8000c070:	10 3b       	cp.w	r11,r8
8000c072:	e0 8b 00 0f 	brhi	8000c090 <_malloc_r+0x2cc>
8000c076:	58 0b       	cp.w	r11,0
8000c078:	c0 c0       	breq	8000c090 <_malloc_r+0x2cc>
8000c07a:	04 93       	mov	r3,r2
8000c07c:	c0 38       	rjmp	8000c082 <_malloc_r+0x2be>
8000c07e:	2f c3       	sub	r3,-4
8000c080:	a1 7b       	lsl	r11,0x1
8000c082:	f7 e8 00 09 	and	r9,r11,r8
8000c086:	ca 81       	brne	8000bfd6 <_malloc_r+0x212>
8000c088:	cf bb       	rjmp	8000c07e <_malloc_r+0x2ba>
8000c08a:	d7 03       	nop
8000c08c:	00 00       	add	r0,r0
8000c08e:	01 04       	ld.w	r4,r0++
8000c090:	68 23       	ld.w	r3,r4[0x8]
8000c092:	66 12       	ld.w	r2,r3[0x4]
8000c094:	e0 12 ff fc 	andl	r2,0xfffc
8000c098:	0e 32       	cp.w	r2,r7
8000c09a:	5f 39       	srlo	r9
8000c09c:	e4 07 01 08 	sub	r8,r2,r7
8000c0a0:	58 f8       	cp.w	r8,15
8000c0a2:	5f aa       	srle	r10
8000c0a4:	f5 e9 10 09 	or	r9,r10,r9
8000c0a8:	e0 80 00 9a 	breq	8000c1dc <_malloc_r+0x418>
8000c0ac:	4c 78       	lddpc	r8,8000c1c8 <_malloc_r+0x404>
8000c0ae:	70 01       	ld.w	r1,r8[0x0]
8000c0b0:	4c 78       	lddpc	r8,8000c1cc <_malloc_r+0x408>
8000c0b2:	2f 01       	sub	r1,-16
8000c0b4:	70 08       	ld.w	r8,r8[0x0]
8000c0b6:	0e 01       	add	r1,r7
8000c0b8:	5b f8       	cp.w	r8,-1
8000c0ba:	c0 40       	breq	8000c0c2 <_malloc_r+0x2fe>
8000c0bc:	28 11       	sub	r1,-127
8000c0be:	e0 11 ff 80 	andl	r1,0xff80
8000c0c2:	02 9b       	mov	r11,r1
8000c0c4:	0a 9c       	mov	r12,r5
8000c0c6:	e0 a0 05 17 	rcall	8000caf4 <_sbrk_r>
8000c0ca:	18 96       	mov	r6,r12
8000c0cc:	5b fc       	cp.w	r12,-1
8000c0ce:	c6 e0       	breq	8000c1aa <_malloc_r+0x3e6>
8000c0d0:	e6 02 00 08 	add	r8,r3,r2
8000c0d4:	10 3c       	cp.w	r12,r8
8000c0d6:	c0 32       	brcc	8000c0dc <_malloc_r+0x318>
8000c0d8:	08 33       	cp.w	r3,r4
8000c0da:	c6 81       	brne	8000c1aa <_malloc_r+0x3e6>
8000c0dc:	4b da       	lddpc	r10,8000c1d0 <_malloc_r+0x40c>
8000c0de:	74 09       	ld.w	r9,r10[0x0]
8000c0e0:	e2 09 00 09 	add	r9,r1,r9
8000c0e4:	95 09       	st.w	r10[0x0],r9
8000c0e6:	10 36       	cp.w	r6,r8
8000c0e8:	c0 a1       	brne	8000c0fc <_malloc_r+0x338>
8000c0ea:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000c0ee:	c0 71       	brne	8000c0fc <_malloc_r+0x338>
8000c0f0:	e2 02 00 02 	add	r2,r1,r2
8000c0f4:	68 28       	ld.w	r8,r4[0x8]
8000c0f6:	a1 a2       	sbr	r2,0x0
8000c0f8:	91 12       	st.w	r8[0x4],r2
8000c0fa:	c4 c8       	rjmp	8000c192 <_malloc_r+0x3ce>
8000c0fc:	4b 4a       	lddpc	r10,8000c1cc <_malloc_r+0x408>
8000c0fe:	74 0b       	ld.w	r11,r10[0x0]
8000c100:	5b fb       	cp.w	r11,-1
8000c102:	c0 31       	brne	8000c108 <_malloc_r+0x344>
8000c104:	95 06       	st.w	r10[0x0],r6
8000c106:	c0 68       	rjmp	8000c112 <_malloc_r+0x34e>
8000c108:	ec 09 00 09 	add	r9,r6,r9
8000c10c:	4b 1a       	lddpc	r10,8000c1d0 <_malloc_r+0x40c>
8000c10e:	10 19       	sub	r9,r8
8000c110:	95 09       	st.w	r10[0x0],r9
8000c112:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000c116:	f0 09 11 08 	rsub	r9,r8,8
8000c11a:	58 08       	cp.w	r8,0
8000c11c:	f2 08 17 10 	movne	r8,r9
8000c120:	ed d8 e1 06 	addne	r6,r6,r8
8000c124:	28 08       	sub	r8,-128
8000c126:	ec 01 00 01 	add	r1,r6,r1
8000c12a:	0a 9c       	mov	r12,r5
8000c12c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000c130:	f0 01 01 01 	sub	r1,r8,r1
8000c134:	02 9b       	mov	r11,r1
8000c136:	e0 a0 04 df 	rcall	8000caf4 <_sbrk_r>
8000c13a:	4a 68       	lddpc	r8,8000c1d0 <_malloc_r+0x40c>
8000c13c:	5b fc       	cp.w	r12,-1
8000c13e:	ec 0c 17 00 	moveq	r12,r6
8000c142:	f9 b1 00 00 	moveq	r1,0
8000c146:	70 09       	ld.w	r9,r8[0x0]
8000c148:	0c 1c       	sub	r12,r6
8000c14a:	89 26       	st.w	r4[0x8],r6
8000c14c:	02 0c       	add	r12,r1
8000c14e:	12 01       	add	r1,r9
8000c150:	a1 ac       	sbr	r12,0x0
8000c152:	91 01       	st.w	r8[0x0],r1
8000c154:	8d 1c       	st.w	r6[0x4],r12
8000c156:	08 33       	cp.w	r3,r4
8000c158:	c1 d0       	breq	8000c192 <_malloc_r+0x3ce>
8000c15a:	58 f2       	cp.w	r2,15
8000c15c:	e0 8b 00 05 	brhi	8000c166 <_malloc_r+0x3a2>
8000c160:	30 18       	mov	r8,1
8000c162:	8d 18       	st.w	r6[0x4],r8
8000c164:	c2 38       	rjmp	8000c1aa <_malloc_r+0x3e6>
8000c166:	30 59       	mov	r9,5
8000c168:	20 c2       	sub	r2,12
8000c16a:	e0 12 ff f8 	andl	r2,0xfff8
8000c16e:	e6 02 00 08 	add	r8,r3,r2
8000c172:	91 29       	st.w	r8[0x8],r9
8000c174:	91 19       	st.w	r8[0x4],r9
8000c176:	66 18       	ld.w	r8,r3[0x4]
8000c178:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c17c:	e5 e8 10 08 	or	r8,r2,r8
8000c180:	87 18       	st.w	r3[0x4],r8
8000c182:	58 f2       	cp.w	r2,15
8000c184:	e0 88 00 07 	brls	8000c192 <_malloc_r+0x3ce>
8000c188:	e6 cb ff f8 	sub	r11,r3,-8
8000c18c:	0a 9c       	mov	r12,r5
8000c18e:	fe b0 fb 6d 	rcall	8000b868 <_free_r>
8000c192:	49 19       	lddpc	r9,8000c1d4 <_malloc_r+0x410>
8000c194:	72 0a       	ld.w	r10,r9[0x0]
8000c196:	48 f8       	lddpc	r8,8000c1d0 <_malloc_r+0x40c>
8000c198:	70 08       	ld.w	r8,r8[0x0]
8000c19a:	14 38       	cp.w	r8,r10
8000c19c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000c1a0:	48 e9       	lddpc	r9,8000c1d8 <_malloc_r+0x414>
8000c1a2:	72 0a       	ld.w	r10,r9[0x0]
8000c1a4:	14 38       	cp.w	r8,r10
8000c1a6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000c1aa:	68 28       	ld.w	r8,r4[0x8]
8000c1ac:	70 18       	ld.w	r8,r8[0x4]
8000c1ae:	e0 18 ff fc 	andl	r8,0xfffc
8000c1b2:	0e 38       	cp.w	r8,r7
8000c1b4:	5f 39       	srlo	r9
8000c1b6:	0e 18       	sub	r8,r7
8000c1b8:	58 f8       	cp.w	r8,15
8000c1ba:	5f aa       	srle	r10
8000c1bc:	f5 e9 10 09 	or	r9,r10,r9
8000c1c0:	c0 e0       	breq	8000c1dc <_malloc_r+0x418>
8000c1c2:	0a 9c       	mov	r12,r5
8000c1c4:	c4 5c       	rcall	8000c24e <__malloc_unlock>
8000c1c6:	d8 3a       	popm	r0-r7,pc,r12=0
8000c1c8:	00 00       	add	r0,r0
8000c1ca:	07 2c       	ld.uh	r12,r3++
8000c1cc:	00 00       	add	r0,r0
8000c1ce:	05 10       	ld.sh	r0,r2++
8000c1d0:	00 00       	add	r0,r0
8000c1d2:	07 30       	ld.ub	r0,r3++
8000c1d4:	00 00       	add	r0,r0
8000c1d6:	07 28       	ld.uh	r8,r3++
8000c1d8:	00 00       	add	r0,r0
8000c1da:	07 24       	ld.uh	r4,r3++
8000c1dc:	68 26       	ld.w	r6,r4[0x8]
8000c1de:	a1 a8       	sbr	r8,0x0
8000c1e0:	0e 99       	mov	r9,r7
8000c1e2:	a1 a9       	sbr	r9,0x0
8000c1e4:	8d 19       	st.w	r6[0x4],r9
8000c1e6:	ec 07 00 07 	add	r7,r6,r7
8000c1ea:	0a 9c       	mov	r12,r5
8000c1ec:	89 27       	st.w	r4[0x8],r7
8000c1ee:	8f 18       	st.w	r7[0x4],r8
8000c1f0:	c2 fc       	rcall	8000c24e <__malloc_unlock>
8000c1f2:	ec cc ff f8 	sub	r12,r6,-8
8000c1f6:	d8 32       	popm	r0-r7,pc

8000c1f8 <memchr>:
8000c1f8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000c1fc:	c0 68       	rjmp	8000c208 <memchr+0x10>
8000c1fe:	20 1a       	sub	r10,1
8000c200:	19 88       	ld.ub	r8,r12[0x0]
8000c202:	16 38       	cp.w	r8,r11
8000c204:	5e 0c       	reteq	r12
8000c206:	2f fc       	sub	r12,-1
8000c208:	58 0a       	cp.w	r10,0
8000c20a:	cf a1       	brne	8000c1fe <memchr+0x6>
8000c20c:	5e fa       	retal	r10

8000c20e <memmove>:
8000c20e:	d4 01       	pushm	lr
8000c210:	18 3b       	cp.w	r11,r12
8000c212:	c1 92       	brcc	8000c244 <memmove+0x36>
8000c214:	f6 0a 00 09 	add	r9,r11,r10
8000c218:	12 3c       	cp.w	r12,r9
8000c21a:	c1 52       	brcc	8000c244 <memmove+0x36>
8000c21c:	f8 0a 00 0b 	add	r11,r12,r10
8000c220:	30 08       	mov	r8,0
8000c222:	c0 68       	rjmp	8000c22e <memmove+0x20>
8000c224:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000c228:	20 1a       	sub	r10,1
8000c22a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000c22e:	20 18       	sub	r8,1
8000c230:	58 0a       	cp.w	r10,0
8000c232:	cf 91       	brne	8000c224 <memmove+0x16>
8000c234:	d8 02       	popm	pc
8000c236:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000c23a:	20 1a       	sub	r10,1
8000c23c:	f8 08 0b 09 	st.b	r12[r8],r9
8000c240:	2f f8       	sub	r8,-1
8000c242:	c0 28       	rjmp	8000c246 <memmove+0x38>
8000c244:	30 08       	mov	r8,0
8000c246:	58 0a       	cp.w	r10,0
8000c248:	cf 71       	brne	8000c236 <memmove+0x28>
8000c24a:	d8 02       	popm	pc

8000c24c <__malloc_lock>:
8000c24c:	5e fc       	retal	r12

8000c24e <__malloc_unlock>:
8000c24e:	5e fc       	retal	r12

8000c250 <__hi0bits>:
8000c250:	18 98       	mov	r8,r12
8000c252:	e0 1c 00 00 	andl	r12,0x0
8000c256:	f0 09 15 10 	lsl	r9,r8,0x10
8000c25a:	58 0c       	cp.w	r12,0
8000c25c:	f2 08 17 00 	moveq	r8,r9
8000c260:	f9 bc 00 10 	moveq	r12,16
8000c264:	f9 bc 01 00 	movne	r12,0
8000c268:	10 9a       	mov	r10,r8
8000c26a:	f0 09 15 08 	lsl	r9,r8,0x8
8000c26e:	e6 1a ff 00 	andh	r10,0xff00,COH
8000c272:	f7 bc 00 f8 	subeq	r12,-8
8000c276:	f2 08 17 00 	moveq	r8,r9
8000c27a:	10 9a       	mov	r10,r8
8000c27c:	f0 09 15 04 	lsl	r9,r8,0x4
8000c280:	e6 1a f0 00 	andh	r10,0xf000,COH
8000c284:	f7 bc 00 fc 	subeq	r12,-4
8000c288:	f2 08 17 00 	moveq	r8,r9
8000c28c:	10 9a       	mov	r10,r8
8000c28e:	f0 09 15 02 	lsl	r9,r8,0x2
8000c292:	e6 1a c0 00 	andh	r10,0xc000,COH
8000c296:	f7 bc 00 fe 	subeq	r12,-2
8000c29a:	f2 08 17 00 	moveq	r8,r9
8000c29e:	58 08       	cp.w	r8,0
8000c2a0:	5e 5c       	retlt	r12
8000c2a2:	ed b8 00 1e 	bld	r8,0x1e
8000c2a6:	f9 bc 01 20 	movne	r12,32
8000c2aa:	f7 bc 00 ff 	subeq	r12,-1
8000c2ae:	5e fc       	retal	r12

8000c2b0 <__lo0bits>:
8000c2b0:	18 99       	mov	r9,r12
8000c2b2:	78 08       	ld.w	r8,r12[0x0]
8000c2b4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000c2b8:	c1 50       	breq	8000c2e2 <__lo0bits+0x32>
8000c2ba:	ed b8 00 00 	bld	r8,0x0
8000c2be:	c0 21       	brne	8000c2c2 <__lo0bits+0x12>
8000c2c0:	5e fd       	retal	0
8000c2c2:	10 9b       	mov	r11,r8
8000c2c4:	f0 0a 16 01 	lsr	r10,r8,0x1
8000c2c8:	e2 1b 00 02 	andl	r11,0x2,COH
8000c2cc:	a3 88       	lsr	r8,0x2
8000c2ce:	58 0b       	cp.w	r11,0
8000c2d0:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000c2d4:	f9 bc 01 01 	movne	r12,1
8000c2d8:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000c2dc:	f9 bc 00 02 	moveq	r12,2
8000c2e0:	5e fc       	retal	r12
8000c2e2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000c2e6:	f0 0b 16 10 	lsr	r11,r8,0x10
8000c2ea:	58 0a       	cp.w	r10,0
8000c2ec:	f6 08 17 00 	moveq	r8,r11
8000c2f0:	f9 bc 00 10 	moveq	r12,16
8000c2f4:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000c2f8:	f0 0a 16 08 	lsr	r10,r8,0x8
8000c2fc:	58 0b       	cp.w	r11,0
8000c2fe:	f7 bc 00 f8 	subeq	r12,-8
8000c302:	f4 08 17 00 	moveq	r8,r10
8000c306:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000c30a:	f0 0a 16 04 	lsr	r10,r8,0x4
8000c30e:	58 0b       	cp.w	r11,0
8000c310:	f7 bc 00 fc 	subeq	r12,-4
8000c314:	f4 08 17 00 	moveq	r8,r10
8000c318:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000c31c:	f0 0a 16 02 	lsr	r10,r8,0x2
8000c320:	58 0b       	cp.w	r11,0
8000c322:	f7 bc 00 fe 	subeq	r12,-2
8000c326:	f4 08 17 00 	moveq	r8,r10
8000c32a:	ed b8 00 00 	bld	r8,0x0
8000c32e:	c0 60       	breq	8000c33a <__lo0bits+0x8a>
8000c330:	a1 98       	lsr	r8,0x1
8000c332:	c0 31       	brne	8000c338 <__lo0bits+0x88>
8000c334:	32 0c       	mov	r12,32
8000c336:	5e fc       	retal	r12
8000c338:	2f fc       	sub	r12,-1
8000c33a:	93 08       	st.w	r9[0x0],r8
8000c33c:	5e fc       	retal	r12

8000c33e <__mcmp>:
8000c33e:	d4 01       	pushm	lr
8000c340:	18 98       	mov	r8,r12
8000c342:	76 49       	ld.w	r9,r11[0x10]
8000c344:	78 4c       	ld.w	r12,r12[0x10]
8000c346:	12 1c       	sub	r12,r9
8000c348:	c1 31       	brne	8000c36e <__mcmp+0x30>
8000c34a:	2f b9       	sub	r9,-5
8000c34c:	a3 69       	lsl	r9,0x2
8000c34e:	12 0b       	add	r11,r9
8000c350:	f0 09 00 09 	add	r9,r8,r9
8000c354:	2e c8       	sub	r8,-20
8000c356:	13 4e       	ld.w	lr,--r9
8000c358:	17 4a       	ld.w	r10,--r11
8000c35a:	14 3e       	cp.w	lr,r10
8000c35c:	c0 60       	breq	8000c368 <__mcmp+0x2a>
8000c35e:	f9 bc 03 ff 	movlo	r12,-1
8000c362:	f9 bc 02 01 	movhs	r12,1
8000c366:	d8 02       	popm	pc
8000c368:	10 39       	cp.w	r9,r8
8000c36a:	fe 9b ff f6 	brhi	8000c356 <__mcmp+0x18>
8000c36e:	d8 02       	popm	pc

8000c370 <_Bfree>:
8000c370:	d4 21       	pushm	r4-r7,lr
8000c372:	18 97       	mov	r7,r12
8000c374:	16 95       	mov	r5,r11
8000c376:	78 96       	ld.w	r6,r12[0x24]
8000c378:	58 06       	cp.w	r6,0
8000c37a:	c0 91       	brne	8000c38c <_Bfree+0x1c>
8000c37c:	31 0c       	mov	r12,16
8000c37e:	fe b0 fd 1b 	rcall	8000bdb4 <malloc>
8000c382:	99 36       	st.w	r12[0xc],r6
8000c384:	8f 9c       	st.w	r7[0x24],r12
8000c386:	99 16       	st.w	r12[0x4],r6
8000c388:	99 26       	st.w	r12[0x8],r6
8000c38a:	99 06       	st.w	r12[0x0],r6
8000c38c:	58 05       	cp.w	r5,0
8000c38e:	c0 90       	breq	8000c3a0 <_Bfree+0x30>
8000c390:	6a 19       	ld.w	r9,r5[0x4]
8000c392:	6e 98       	ld.w	r8,r7[0x24]
8000c394:	70 38       	ld.w	r8,r8[0xc]
8000c396:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000c39a:	8b 0a       	st.w	r5[0x0],r10
8000c39c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000c3a0:	d8 22       	popm	r4-r7,pc
8000c3a2:	d7 03       	nop

8000c3a4 <_Balloc>:
8000c3a4:	d4 21       	pushm	r4-r7,lr
8000c3a6:	18 97       	mov	r7,r12
8000c3a8:	16 96       	mov	r6,r11
8000c3aa:	78 95       	ld.w	r5,r12[0x24]
8000c3ac:	58 05       	cp.w	r5,0
8000c3ae:	c0 91       	brne	8000c3c0 <_Balloc+0x1c>
8000c3b0:	31 0c       	mov	r12,16
8000c3b2:	fe b0 fd 01 	rcall	8000bdb4 <malloc>
8000c3b6:	99 35       	st.w	r12[0xc],r5
8000c3b8:	8f 9c       	st.w	r7[0x24],r12
8000c3ba:	99 15       	st.w	r12[0x4],r5
8000c3bc:	99 25       	st.w	r12[0x8],r5
8000c3be:	99 05       	st.w	r12[0x0],r5
8000c3c0:	6e 95       	ld.w	r5,r7[0x24]
8000c3c2:	6a 38       	ld.w	r8,r5[0xc]
8000c3c4:	58 08       	cp.w	r8,0
8000c3c6:	c0 b1       	brne	8000c3dc <_Balloc+0x38>
8000c3c8:	31 0a       	mov	r10,16
8000c3ca:	30 4b       	mov	r11,4
8000c3cc:	0e 9c       	mov	r12,r7
8000c3ce:	e0 a0 04 af 	rcall	8000cd2c <_calloc_r>
8000c3d2:	8b 3c       	st.w	r5[0xc],r12
8000c3d4:	6e 98       	ld.w	r8,r7[0x24]
8000c3d6:	70 3c       	ld.w	r12,r8[0xc]
8000c3d8:	58 0c       	cp.w	r12,0
8000c3da:	c1 b0       	breq	8000c410 <_Balloc+0x6c>
8000c3dc:	6e 98       	ld.w	r8,r7[0x24]
8000c3de:	70 38       	ld.w	r8,r8[0xc]
8000c3e0:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000c3e4:	70 0c       	ld.w	r12,r8[0x0]
8000c3e6:	58 0c       	cp.w	r12,0
8000c3e8:	c0 40       	breq	8000c3f0 <_Balloc+0x4c>
8000c3ea:	78 09       	ld.w	r9,r12[0x0]
8000c3ec:	91 09       	st.w	r8[0x0],r9
8000c3ee:	c0 e8       	rjmp	8000c40a <_Balloc+0x66>
8000c3f0:	0e 9c       	mov	r12,r7
8000c3f2:	30 17       	mov	r7,1
8000c3f4:	0e 9b       	mov	r11,r7
8000c3f6:	ee 06 09 47 	lsl	r7,r7,r6
8000c3fa:	ee ca ff fb 	sub	r10,r7,-5
8000c3fe:	a3 6a       	lsl	r10,0x2
8000c400:	e0 a0 04 96 	rcall	8000cd2c <_calloc_r>
8000c404:	c0 60       	breq	8000c410 <_Balloc+0x6c>
8000c406:	99 16       	st.w	r12[0x4],r6
8000c408:	99 27       	st.w	r12[0x8],r7
8000c40a:	30 08       	mov	r8,0
8000c40c:	99 38       	st.w	r12[0xc],r8
8000c40e:	99 48       	st.w	r12[0x10],r8
8000c410:	d8 22       	popm	r4-r7,pc
8000c412:	d7 03       	nop

8000c414 <__d2b>:
8000c414:	d4 31       	pushm	r0-r7,lr
8000c416:	20 2d       	sub	sp,8
8000c418:	16 93       	mov	r3,r11
8000c41a:	12 96       	mov	r6,r9
8000c41c:	10 95       	mov	r5,r8
8000c41e:	14 92       	mov	r2,r10
8000c420:	30 1b       	mov	r11,1
8000c422:	cc 1f       	rcall	8000c3a4 <_Balloc>
8000c424:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000c428:	50 09       	stdsp	sp[0x0],r9
8000c42a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000c42e:	f0 01 16 14 	lsr	r1,r8,0x14
8000c432:	fc 1a 00 10 	movh	r10,0x10
8000c436:	f3 da e1 39 	orne	r9,r9,r10
8000c43a:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000c43e:	18 94       	mov	r4,r12
8000c440:	58 02       	cp.w	r2,0
8000c442:	c1 d0       	breq	8000c47c <__d2b+0x68>
8000c444:	fa cc ff f8 	sub	r12,sp,-8
8000c448:	18 d2       	st.w	--r12,r2
8000c44a:	c3 3f       	rcall	8000c2b0 <__lo0bits>
8000c44c:	40 18       	lddsp	r8,sp[0x4]
8000c44e:	c0 d0       	breq	8000c468 <__d2b+0x54>
8000c450:	40 09       	lddsp	r9,sp[0x0]
8000c452:	f8 0a 11 20 	rsub	r10,r12,32
8000c456:	f2 0a 09 4a 	lsl	r10,r9,r10
8000c45a:	f5 e8 10 08 	or	r8,r10,r8
8000c45e:	89 58       	st.w	r4[0x14],r8
8000c460:	f2 0c 0a 49 	lsr	r9,r9,r12
8000c464:	50 09       	stdsp	sp[0x0],r9
8000c466:	c0 28       	rjmp	8000c46a <__d2b+0x56>
8000c468:	89 58       	st.w	r4[0x14],r8
8000c46a:	40 08       	lddsp	r8,sp[0x0]
8000c46c:	58 08       	cp.w	r8,0
8000c46e:	f9 b3 01 02 	movne	r3,2
8000c472:	f9 b3 00 01 	moveq	r3,1
8000c476:	89 68       	st.w	r4[0x18],r8
8000c478:	89 43       	st.w	r4[0x10],r3
8000c47a:	c0 88       	rjmp	8000c48a <__d2b+0x76>
8000c47c:	1a 9c       	mov	r12,sp
8000c47e:	c1 9f       	rcall	8000c2b0 <__lo0bits>
8000c480:	30 13       	mov	r3,1
8000c482:	40 08       	lddsp	r8,sp[0x0]
8000c484:	2e 0c       	sub	r12,-32
8000c486:	89 43       	st.w	r4[0x10],r3
8000c488:	89 58       	st.w	r4[0x14],r8
8000c48a:	58 01       	cp.w	r1,0
8000c48c:	c0 90       	breq	8000c49e <__d2b+0x8a>
8000c48e:	e2 c1 04 33 	sub	r1,r1,1075
8000c492:	18 01       	add	r1,r12
8000c494:	8d 01       	st.w	r6[0x0],r1
8000c496:	f8 0c 11 35 	rsub	r12,r12,53
8000c49a:	8b 0c       	st.w	r5[0x0],r12
8000c49c:	c0 c8       	rjmp	8000c4b4 <__d2b+0xa0>
8000c49e:	e6 c8 ff fc 	sub	r8,r3,-4
8000c4a2:	f8 cc 04 32 	sub	r12,r12,1074
8000c4a6:	a5 73       	lsl	r3,0x5
8000c4a8:	8d 0c       	st.w	r6[0x0],r12
8000c4aa:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000c4ae:	cd 1e       	rcall	8000c250 <__hi0bits>
8000c4b0:	18 13       	sub	r3,r12
8000c4b2:	8b 03       	st.w	r5[0x0],r3
8000c4b4:	08 9c       	mov	r12,r4
8000c4b6:	2f ed       	sub	sp,-8
8000c4b8:	d8 32       	popm	r0-r7,pc
8000c4ba:	d7 03       	nop

8000c4bc <__mdiff>:
8000c4bc:	d4 31       	pushm	r0-r7,lr
8000c4be:	74 48       	ld.w	r8,r10[0x10]
8000c4c0:	76 45       	ld.w	r5,r11[0x10]
8000c4c2:	16 97       	mov	r7,r11
8000c4c4:	14 96       	mov	r6,r10
8000c4c6:	10 15       	sub	r5,r8
8000c4c8:	c1 31       	brne	8000c4ee <__mdiff+0x32>
8000c4ca:	2f b8       	sub	r8,-5
8000c4cc:	ee ce ff ec 	sub	lr,r7,-20
8000c4d0:	a3 68       	lsl	r8,0x2
8000c4d2:	f4 08 00 0b 	add	r11,r10,r8
8000c4d6:	ee 08 00 08 	add	r8,r7,r8
8000c4da:	11 4a       	ld.w	r10,--r8
8000c4dc:	17 49       	ld.w	r9,--r11
8000c4de:	12 3a       	cp.w	r10,r9
8000c4e0:	c0 30       	breq	8000c4e6 <__mdiff+0x2a>
8000c4e2:	c0 e2       	brcc	8000c4fe <__mdiff+0x42>
8000c4e4:	c0 78       	rjmp	8000c4f2 <__mdiff+0x36>
8000c4e6:	1c 38       	cp.w	r8,lr
8000c4e8:	fe 9b ff f9 	brhi	8000c4da <__mdiff+0x1e>
8000c4ec:	c4 98       	rjmp	8000c57e <__mdiff+0xc2>
8000c4ee:	58 05       	cp.w	r5,0
8000c4f0:	c0 64       	brge	8000c4fc <__mdiff+0x40>
8000c4f2:	0e 98       	mov	r8,r7
8000c4f4:	30 15       	mov	r5,1
8000c4f6:	0c 97       	mov	r7,r6
8000c4f8:	10 96       	mov	r6,r8
8000c4fa:	c0 28       	rjmp	8000c4fe <__mdiff+0x42>
8000c4fc:	30 05       	mov	r5,0
8000c4fe:	6e 1b       	ld.w	r11,r7[0x4]
8000c500:	c5 2f       	rcall	8000c3a4 <_Balloc>
8000c502:	6e 49       	ld.w	r9,r7[0x10]
8000c504:	6c 44       	ld.w	r4,r6[0x10]
8000c506:	99 35       	st.w	r12[0xc],r5
8000c508:	2f b4       	sub	r4,-5
8000c50a:	f2 c5 ff fb 	sub	r5,r9,-5
8000c50e:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000c512:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000c516:	2e c6       	sub	r6,-20
8000c518:	2e c7       	sub	r7,-20
8000c51a:	f8 c8 ff ec 	sub	r8,r12,-20
8000c51e:	30 0a       	mov	r10,0
8000c520:	0f 0e       	ld.w	lr,r7++
8000c522:	0d 0b       	ld.w	r11,r6++
8000c524:	fc 02 16 10 	lsr	r2,lr,0x10
8000c528:	f6 03 16 10 	lsr	r3,r11,0x10
8000c52c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000c530:	e4 03 01 03 	sub	r3,r2,r3
8000c534:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000c538:	fc 0b 01 0b 	sub	r11,lr,r11
8000c53c:	f6 0a 00 0a 	add	r10,r11,r10
8000c540:	b0 1a       	st.h	r8[0x2],r10
8000c542:	b1 4a       	asr	r10,0x10
8000c544:	e6 0a 00 0a 	add	r10,r3,r10
8000c548:	b0 0a       	st.h	r8[0x0],r10
8000c54a:	2f c8       	sub	r8,-4
8000c54c:	b1 4a       	asr	r10,0x10
8000c54e:	08 36       	cp.w	r6,r4
8000c550:	ce 83       	brcs	8000c520 <__mdiff+0x64>
8000c552:	c0 d8       	rjmp	8000c56c <__mdiff+0xb0>
8000c554:	0f 0b       	ld.w	r11,r7++
8000c556:	f6 0e 16 10 	lsr	lr,r11,0x10
8000c55a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000c55e:	16 0a       	add	r10,r11
8000c560:	b0 1a       	st.h	r8[0x2],r10
8000c562:	b1 4a       	asr	r10,0x10
8000c564:	1c 0a       	add	r10,lr
8000c566:	b0 0a       	st.h	r8[0x0],r10
8000c568:	2f c8       	sub	r8,-4
8000c56a:	b1 4a       	asr	r10,0x10
8000c56c:	0a 37       	cp.w	r7,r5
8000c56e:	cf 33       	brcs	8000c554 <__mdiff+0x98>
8000c570:	c0 28       	rjmp	8000c574 <__mdiff+0xb8>
8000c572:	20 19       	sub	r9,1
8000c574:	11 4a       	ld.w	r10,--r8
8000c576:	58 0a       	cp.w	r10,0
8000c578:	cf d0       	breq	8000c572 <__mdiff+0xb6>
8000c57a:	99 49       	st.w	r12[0x10],r9
8000c57c:	d8 32       	popm	r0-r7,pc
8000c57e:	30 0b       	mov	r11,0
8000c580:	c1 2f       	rcall	8000c3a4 <_Balloc>
8000c582:	30 18       	mov	r8,1
8000c584:	99 48       	st.w	r12[0x10],r8
8000c586:	30 08       	mov	r8,0
8000c588:	99 58       	st.w	r12[0x14],r8
8000c58a:	d8 32       	popm	r0-r7,pc

8000c58c <__lshift>:
8000c58c:	d4 31       	pushm	r0-r7,lr
8000c58e:	16 97       	mov	r7,r11
8000c590:	76 46       	ld.w	r6,r11[0x10]
8000c592:	f4 02 14 05 	asr	r2,r10,0x5
8000c596:	2f f6       	sub	r6,-1
8000c598:	14 93       	mov	r3,r10
8000c59a:	18 94       	mov	r4,r12
8000c59c:	04 06       	add	r6,r2
8000c59e:	76 1b       	ld.w	r11,r11[0x4]
8000c5a0:	6e 28       	ld.w	r8,r7[0x8]
8000c5a2:	c0 38       	rjmp	8000c5a8 <__lshift+0x1c>
8000c5a4:	2f fb       	sub	r11,-1
8000c5a6:	a1 78       	lsl	r8,0x1
8000c5a8:	10 36       	cp.w	r6,r8
8000c5aa:	fe 99 ff fd 	brgt	8000c5a4 <__lshift+0x18>
8000c5ae:	08 9c       	mov	r12,r4
8000c5b0:	cf ae       	rcall	8000c3a4 <_Balloc>
8000c5b2:	30 09       	mov	r9,0
8000c5b4:	18 95       	mov	r5,r12
8000c5b6:	f8 c8 ff ec 	sub	r8,r12,-20
8000c5ba:	12 9a       	mov	r10,r9
8000c5bc:	c0 38       	rjmp	8000c5c2 <__lshift+0x36>
8000c5be:	10 aa       	st.w	r8++,r10
8000c5c0:	2f f9       	sub	r9,-1
8000c5c2:	04 39       	cp.w	r9,r2
8000c5c4:	cf d5       	brlt	8000c5be <__lshift+0x32>
8000c5c6:	6e 4b       	ld.w	r11,r7[0x10]
8000c5c8:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000c5cc:	2f bb       	sub	r11,-5
8000c5ce:	ee c9 ff ec 	sub	r9,r7,-20
8000c5d2:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000c5d6:	58 03       	cp.w	r3,0
8000c5d8:	c1 30       	breq	8000c5fe <__lshift+0x72>
8000c5da:	e6 0c 11 20 	rsub	r12,r3,32
8000c5de:	30 0a       	mov	r10,0
8000c5e0:	72 02       	ld.w	r2,r9[0x0]
8000c5e2:	e4 03 09 42 	lsl	r2,r2,r3
8000c5e6:	04 4a       	or	r10,r2
8000c5e8:	10 aa       	st.w	r8++,r10
8000c5ea:	13 0a       	ld.w	r10,r9++
8000c5ec:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c5f0:	16 39       	cp.w	r9,r11
8000c5f2:	cf 73       	brcs	8000c5e0 <__lshift+0x54>
8000c5f4:	91 0a       	st.w	r8[0x0],r10
8000c5f6:	58 0a       	cp.w	r10,0
8000c5f8:	c0 70       	breq	8000c606 <__lshift+0x7a>
8000c5fa:	2f f6       	sub	r6,-1
8000c5fc:	c0 58       	rjmp	8000c606 <__lshift+0x7a>
8000c5fe:	13 0a       	ld.w	r10,r9++
8000c600:	10 aa       	st.w	r8++,r10
8000c602:	16 39       	cp.w	r9,r11
8000c604:	cf d3       	brcs	8000c5fe <__lshift+0x72>
8000c606:	08 9c       	mov	r12,r4
8000c608:	20 16       	sub	r6,1
8000c60a:	0e 9b       	mov	r11,r7
8000c60c:	8b 46       	st.w	r5[0x10],r6
8000c60e:	cb 1e       	rcall	8000c370 <_Bfree>
8000c610:	0a 9c       	mov	r12,r5
8000c612:	d8 32       	popm	r0-r7,pc

8000c614 <__multiply>:
8000c614:	d4 31       	pushm	r0-r7,lr
8000c616:	20 2d       	sub	sp,8
8000c618:	76 49       	ld.w	r9,r11[0x10]
8000c61a:	74 48       	ld.w	r8,r10[0x10]
8000c61c:	16 96       	mov	r6,r11
8000c61e:	14 95       	mov	r5,r10
8000c620:	10 39       	cp.w	r9,r8
8000c622:	ec 08 17 50 	movlt	r8,r6
8000c626:	ea 06 17 50 	movlt	r6,r5
8000c62a:	f0 05 17 50 	movlt	r5,r8
8000c62e:	6c 28       	ld.w	r8,r6[0x8]
8000c630:	76 43       	ld.w	r3,r11[0x10]
8000c632:	74 42       	ld.w	r2,r10[0x10]
8000c634:	76 1b       	ld.w	r11,r11[0x4]
8000c636:	e4 03 00 07 	add	r7,r2,r3
8000c63a:	10 37       	cp.w	r7,r8
8000c63c:	f7 bb 09 ff 	subgt	r11,-1
8000c640:	cb 2e       	rcall	8000c3a4 <_Balloc>
8000c642:	ee c4 ff fb 	sub	r4,r7,-5
8000c646:	f8 c9 ff ec 	sub	r9,r12,-20
8000c64a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000c64e:	30 0a       	mov	r10,0
8000c650:	12 98       	mov	r8,r9
8000c652:	c0 28       	rjmp	8000c656 <__multiply+0x42>
8000c654:	10 aa       	st.w	r8++,r10
8000c656:	08 38       	cp.w	r8,r4
8000c658:	cf e3       	brcs	8000c654 <__multiply+0x40>
8000c65a:	2f b3       	sub	r3,-5
8000c65c:	2f b2       	sub	r2,-5
8000c65e:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000c662:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000c666:	ec cb ff ec 	sub	r11,r6,-20
8000c66a:	50 12       	stdsp	sp[0x4],r2
8000c66c:	ea ca ff ec 	sub	r10,r5,-20
8000c670:	c4 48       	rjmp	8000c6f8 <__multiply+0xe4>
8000c672:	94 95       	ld.uh	r5,r10[0x2]
8000c674:	58 05       	cp.w	r5,0
8000c676:	c2 00       	breq	8000c6b6 <__multiply+0xa2>
8000c678:	12 98       	mov	r8,r9
8000c67a:	16 96       	mov	r6,r11
8000c67c:	30 0e       	mov	lr,0
8000c67e:	50 09       	stdsp	sp[0x0],r9
8000c680:	0d 02       	ld.w	r2,r6++
8000c682:	e4 00 16 10 	lsr	r0,r2,0x10
8000c686:	70 01       	ld.w	r1,r8[0x0]
8000c688:	70 09       	ld.w	r9,r8[0x0]
8000c68a:	b1 81       	lsr	r1,0x10
8000c68c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000c690:	e0 05 03 41 	mac	r1,r0,r5
8000c694:	ab 32       	mul	r2,r5
8000c696:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000c69a:	00 02       	add	r2,r0
8000c69c:	e4 0e 00 0e 	add	lr,r2,lr
8000c6a0:	b0 1e       	st.h	r8[0x2],lr
8000c6a2:	b1 8e       	lsr	lr,0x10
8000c6a4:	1c 01       	add	r1,lr
8000c6a6:	b0 01       	st.h	r8[0x0],r1
8000c6a8:	e2 0e 16 10 	lsr	lr,r1,0x10
8000c6ac:	2f c8       	sub	r8,-4
8000c6ae:	06 36       	cp.w	r6,r3
8000c6b0:	ce 83       	brcs	8000c680 <__multiply+0x6c>
8000c6b2:	40 09       	lddsp	r9,sp[0x0]
8000c6b4:	91 0e       	st.w	r8[0x0],lr
8000c6b6:	94 86       	ld.uh	r6,r10[0x0]
8000c6b8:	58 06       	cp.w	r6,0
8000c6ba:	c1 d0       	breq	8000c6f4 <__multiply+0xe0>
8000c6bc:	72 02       	ld.w	r2,r9[0x0]
8000c6be:	12 98       	mov	r8,r9
8000c6c0:	16 9e       	mov	lr,r11
8000c6c2:	30 05       	mov	r5,0
8000c6c4:	b0 12       	st.h	r8[0x2],r2
8000c6c6:	1d 01       	ld.w	r1,lr++
8000c6c8:	90 82       	ld.uh	r2,r8[0x0]
8000c6ca:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000c6ce:	ad 30       	mul	r0,r6
8000c6d0:	e0 02 00 02 	add	r2,r0,r2
8000c6d4:	e4 05 00 05 	add	r5,r2,r5
8000c6d8:	b0 05       	st.h	r8[0x0],r5
8000c6da:	b1 85       	lsr	r5,0x10
8000c6dc:	b1 81       	lsr	r1,0x10
8000c6de:	2f c8       	sub	r8,-4
8000c6e0:	ad 31       	mul	r1,r6
8000c6e2:	90 92       	ld.uh	r2,r8[0x2]
8000c6e4:	e2 02 00 02 	add	r2,r1,r2
8000c6e8:	0a 02       	add	r2,r5
8000c6ea:	e4 05 16 10 	lsr	r5,r2,0x10
8000c6ee:	06 3e       	cp.w	lr,r3
8000c6f0:	ce a3       	brcs	8000c6c4 <__multiply+0xb0>
8000c6f2:	91 02       	st.w	r8[0x0],r2
8000c6f4:	2f ca       	sub	r10,-4
8000c6f6:	2f c9       	sub	r9,-4
8000c6f8:	40 18       	lddsp	r8,sp[0x4]
8000c6fa:	10 3a       	cp.w	r10,r8
8000c6fc:	cb b3       	brcs	8000c672 <__multiply+0x5e>
8000c6fe:	c0 28       	rjmp	8000c702 <__multiply+0xee>
8000c700:	20 17       	sub	r7,1
8000c702:	58 07       	cp.w	r7,0
8000c704:	e0 8a 00 05 	brle	8000c70e <__multiply+0xfa>
8000c708:	09 48       	ld.w	r8,--r4
8000c70a:	58 08       	cp.w	r8,0
8000c70c:	cf a0       	breq	8000c700 <__multiply+0xec>
8000c70e:	99 47       	st.w	r12[0x10],r7
8000c710:	2f ed       	sub	sp,-8
8000c712:	d8 32       	popm	r0-r7,pc

8000c714 <__i2b>:
8000c714:	d4 21       	pushm	r4-r7,lr
8000c716:	16 97       	mov	r7,r11
8000c718:	30 1b       	mov	r11,1
8000c71a:	c4 5e       	rcall	8000c3a4 <_Balloc>
8000c71c:	30 19       	mov	r9,1
8000c71e:	99 57       	st.w	r12[0x14],r7
8000c720:	99 49       	st.w	r12[0x10],r9
8000c722:	d8 22       	popm	r4-r7,pc

8000c724 <__multadd>:
8000c724:	d4 31       	pushm	r0-r7,lr
8000c726:	30 08       	mov	r8,0
8000c728:	12 95       	mov	r5,r9
8000c72a:	16 97       	mov	r7,r11
8000c72c:	18 96       	mov	r6,r12
8000c72e:	76 44       	ld.w	r4,r11[0x10]
8000c730:	f6 c9 ff ec 	sub	r9,r11,-20
8000c734:	72 0b       	ld.w	r11,r9[0x0]
8000c736:	f6 0c 16 10 	lsr	r12,r11,0x10
8000c73a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000c73e:	f4 0c 02 4c 	mul	r12,r10,r12
8000c742:	f4 0b 03 45 	mac	r5,r10,r11
8000c746:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000c74a:	b1 85       	lsr	r5,0x10
8000c74c:	18 05       	add	r5,r12
8000c74e:	ea 0c 15 10 	lsl	r12,r5,0x10
8000c752:	f8 0b 00 0b 	add	r11,r12,r11
8000c756:	12 ab       	st.w	r9++,r11
8000c758:	2f f8       	sub	r8,-1
8000c75a:	b1 85       	lsr	r5,0x10
8000c75c:	08 38       	cp.w	r8,r4
8000c75e:	ce b5       	brlt	8000c734 <__multadd+0x10>
8000c760:	58 05       	cp.w	r5,0
8000c762:	c1 c0       	breq	8000c79a <__multadd+0x76>
8000c764:	6e 28       	ld.w	r8,r7[0x8]
8000c766:	10 34       	cp.w	r4,r8
8000c768:	c1 35       	brlt	8000c78e <__multadd+0x6a>
8000c76a:	6e 1b       	ld.w	r11,r7[0x4]
8000c76c:	0c 9c       	mov	r12,r6
8000c76e:	2f fb       	sub	r11,-1
8000c770:	c1 ae       	rcall	8000c3a4 <_Balloc>
8000c772:	6e 4a       	ld.w	r10,r7[0x10]
8000c774:	ee cb ff f4 	sub	r11,r7,-12
8000c778:	18 93       	mov	r3,r12
8000c77a:	2f ea       	sub	r10,-2
8000c77c:	2f 4c       	sub	r12,-12
8000c77e:	a3 6a       	lsl	r10,0x2
8000c780:	fe b0 de 1d 	rcall	800083ba <memcpy>
8000c784:	0e 9b       	mov	r11,r7
8000c786:	0c 9c       	mov	r12,r6
8000c788:	fe b0 fd f4 	rcall	8000c370 <_Bfree>
8000c78c:	06 97       	mov	r7,r3
8000c78e:	e8 c8 ff ff 	sub	r8,r4,-1
8000c792:	2f b4       	sub	r4,-5
8000c794:	8f 48       	st.w	r7[0x10],r8
8000c796:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000c79a:	0e 9c       	mov	r12,r7
8000c79c:	d8 32       	popm	r0-r7,pc
8000c79e:	d7 03       	nop

8000c7a0 <__pow5mult>:
8000c7a0:	d4 31       	pushm	r0-r7,lr
8000c7a2:	14 96       	mov	r6,r10
8000c7a4:	18 97       	mov	r7,r12
8000c7a6:	16 94       	mov	r4,r11
8000c7a8:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000c7ac:	c0 80       	breq	8000c7bc <__pow5mult+0x1c>
8000c7ae:	20 18       	sub	r8,1
8000c7b0:	49 f9       	lddpc	r9,8000c82c <__pow5mult+0x8c>
8000c7b2:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000c7b6:	30 09       	mov	r9,0
8000c7b8:	cb 6f       	rcall	8000c724 <__multadd>
8000c7ba:	18 94       	mov	r4,r12
8000c7bc:	a3 46       	asr	r6,0x2
8000c7be:	c3 40       	breq	8000c826 <__pow5mult+0x86>
8000c7c0:	6e 95       	ld.w	r5,r7[0x24]
8000c7c2:	58 05       	cp.w	r5,0
8000c7c4:	c0 91       	brne	8000c7d6 <__pow5mult+0x36>
8000c7c6:	31 0c       	mov	r12,16
8000c7c8:	fe b0 fa f6 	rcall	8000bdb4 <malloc>
8000c7cc:	99 35       	st.w	r12[0xc],r5
8000c7ce:	8f 9c       	st.w	r7[0x24],r12
8000c7d0:	99 15       	st.w	r12[0x4],r5
8000c7d2:	99 25       	st.w	r12[0x8],r5
8000c7d4:	99 05       	st.w	r12[0x0],r5
8000c7d6:	6e 93       	ld.w	r3,r7[0x24]
8000c7d8:	66 25       	ld.w	r5,r3[0x8]
8000c7da:	58 05       	cp.w	r5,0
8000c7dc:	c0 c1       	brne	8000c7f4 <__pow5mult+0x54>
8000c7de:	e0 6b 02 71 	mov	r11,625
8000c7e2:	0e 9c       	mov	r12,r7
8000c7e4:	c9 8f       	rcall	8000c714 <__i2b>
8000c7e6:	87 2c       	st.w	r3[0x8],r12
8000c7e8:	30 08       	mov	r8,0
8000c7ea:	18 95       	mov	r5,r12
8000c7ec:	99 08       	st.w	r12[0x0],r8
8000c7ee:	c0 38       	rjmp	8000c7f4 <__pow5mult+0x54>
8000c7f0:	06 9c       	mov	r12,r3
8000c7f2:	18 95       	mov	r5,r12
8000c7f4:	ed b6 00 00 	bld	r6,0x0
8000c7f8:	c0 b1       	brne	8000c80e <__pow5mult+0x6e>
8000c7fa:	08 9b       	mov	r11,r4
8000c7fc:	0a 9a       	mov	r10,r5
8000c7fe:	0e 9c       	mov	r12,r7
8000c800:	c0 af       	rcall	8000c614 <__multiply>
8000c802:	08 9b       	mov	r11,r4
8000c804:	18 93       	mov	r3,r12
8000c806:	0e 9c       	mov	r12,r7
8000c808:	06 94       	mov	r4,r3
8000c80a:	fe b0 fd b3 	rcall	8000c370 <_Bfree>
8000c80e:	a1 56       	asr	r6,0x1
8000c810:	c0 b0       	breq	8000c826 <__pow5mult+0x86>
8000c812:	6a 03       	ld.w	r3,r5[0x0]
8000c814:	58 03       	cp.w	r3,0
8000c816:	ce d1       	brne	8000c7f0 <__pow5mult+0x50>
8000c818:	0a 9a       	mov	r10,r5
8000c81a:	0a 9b       	mov	r11,r5
8000c81c:	0e 9c       	mov	r12,r7
8000c81e:	cf be       	rcall	8000c614 <__multiply>
8000c820:	8b 0c       	st.w	r5[0x0],r12
8000c822:	99 03       	st.w	r12[0x0],r3
8000c824:	ce 7b       	rjmp	8000c7f2 <__pow5mult+0x52>
8000c826:	08 9c       	mov	r12,r4
8000c828:	d8 32       	popm	r0-r7,pc
8000c82a:	d7 03       	nop
8000c82c:	80 00       	ld.sh	r0,r0[0x0]
8000c82e:	ef 4c d4 31 	st.w	r7[-11215],r12

8000c830 <_realloc_r>:
8000c830:	d4 31       	pushm	r0-r7,lr
8000c832:	20 1d       	sub	sp,4
8000c834:	16 94       	mov	r4,r11
8000c836:	18 92       	mov	r2,r12
8000c838:	14 9b       	mov	r11,r10
8000c83a:	58 04       	cp.w	r4,0
8000c83c:	c0 51       	brne	8000c846 <_realloc_r+0x16>
8000c83e:	fe b0 fa c3 	rcall	8000bdc4 <_malloc_r>
8000c842:	18 95       	mov	r5,r12
8000c844:	c5 59       	rjmp	8000caee <_realloc_r+0x2be>
8000c846:	50 0a       	stdsp	sp[0x0],r10
8000c848:	fe b0 fd 02 	rcall	8000c24c <__malloc_lock>
8000c84c:	40 0b       	lddsp	r11,sp[0x0]
8000c84e:	e8 c1 00 08 	sub	r1,r4,8
8000c852:	f6 c6 ff f5 	sub	r6,r11,-11
8000c856:	62 1c       	ld.w	r12,r1[0x4]
8000c858:	59 66       	cp.w	r6,22
8000c85a:	f9 b6 08 10 	movls	r6,16
8000c85e:	f9 b8 0b f8 	movhi	r8,-8
8000c862:	ed d8 eb 26 	andhi	r6,r6,r8
8000c866:	16 36       	cp.w	r6,r11
8000c868:	5f 38       	srlo	r8
8000c86a:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000c86e:	c0 50       	breq	8000c878 <_realloc_r+0x48>
8000c870:	30 c8       	mov	r8,12
8000c872:	30 05       	mov	r5,0
8000c874:	85 38       	st.w	r2[0xc],r8
8000c876:	c3 c9       	rjmp	8000caee <_realloc_r+0x2be>
8000c878:	18 90       	mov	r0,r12
8000c87a:	e0 10 ff fc 	andl	r0,0xfffc
8000c87e:	0c 30       	cp.w	r0,r6
8000c880:	e0 84 01 0c 	brge	8000ca98 <_realloc_r+0x268>
8000c884:	4c 98       	lddpc	r8,8000c9a8 <_realloc_r+0x178>
8000c886:	e2 00 00 09 	add	r9,r1,r0
8000c88a:	70 25       	ld.w	r5,r8[0x8]
8000c88c:	0a 39       	cp.w	r9,r5
8000c88e:	c0 90       	breq	8000c8a0 <_realloc_r+0x70>
8000c890:	72 1a       	ld.w	r10,r9[0x4]
8000c892:	a1 ca       	cbr	r10,0x0
8000c894:	f2 0a 00 0a 	add	r10,r9,r10
8000c898:	74 1a       	ld.w	r10,r10[0x4]
8000c89a:	ed ba 00 00 	bld	r10,0x0
8000c89e:	c2 20       	breq	8000c8e2 <_realloc_r+0xb2>
8000c8a0:	72 1a       	ld.w	r10,r9[0x4]
8000c8a2:	e0 1a ff fc 	andl	r10,0xfffc
8000c8a6:	f4 00 00 03 	add	r3,r10,r0
8000c8aa:	0a 39       	cp.w	r9,r5
8000c8ac:	c1 31       	brne	8000c8d2 <_realloc_r+0xa2>
8000c8ae:	ec c7 ff f0 	sub	r7,r6,-16
8000c8b2:	0e 33       	cp.w	r3,r7
8000c8b4:	c1 95       	brlt	8000c8e6 <_realloc_r+0xb6>
8000c8b6:	e2 06 00 09 	add	r9,r1,r6
8000c8ba:	0c 13       	sub	r3,r6
8000c8bc:	a1 a3       	sbr	r3,0x0
8000c8be:	93 13       	st.w	r9[0x4],r3
8000c8c0:	91 29       	st.w	r8[0x8],r9
8000c8c2:	04 9c       	mov	r12,r2
8000c8c4:	62 18       	ld.w	r8,r1[0x4]
8000c8c6:	08 95       	mov	r5,r4
8000c8c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c8cc:	10 46       	or	r6,r8
8000c8ce:	83 16       	st.w	r1[0x4],r6
8000c8d0:	c0 d9       	rjmp	8000caea <_realloc_r+0x2ba>
8000c8d2:	0c 33       	cp.w	r3,r6
8000c8d4:	c0 95       	brlt	8000c8e6 <_realloc_r+0xb6>
8000c8d6:	72 28       	ld.w	r8,r9[0x8]
8000c8d8:	02 97       	mov	r7,r1
8000c8da:	72 39       	ld.w	r9,r9[0xc]
8000c8dc:	93 28       	st.w	r9[0x8],r8
8000c8de:	91 39       	st.w	r8[0xc],r9
8000c8e0:	cd e8       	rjmp	8000ca9c <_realloc_r+0x26c>
8000c8e2:	30 0a       	mov	r10,0
8000c8e4:	14 99       	mov	r9,r10
8000c8e6:	ed bc 00 00 	bld	r12,0x0
8000c8ea:	e0 80 00 97 	breq	8000ca18 <_realloc_r+0x1e8>
8000c8ee:	62 07       	ld.w	r7,r1[0x0]
8000c8f0:	e2 07 01 07 	sub	r7,r1,r7
8000c8f4:	6e 1c       	ld.w	r12,r7[0x4]
8000c8f6:	e0 1c ff fc 	andl	r12,0xfffc
8000c8fa:	58 09       	cp.w	r9,0
8000c8fc:	c5 80       	breq	8000c9ac <_realloc_r+0x17c>
8000c8fe:	f8 00 00 03 	add	r3,r12,r0
8000c902:	0a 39       	cp.w	r9,r5
8000c904:	c4 81       	brne	8000c994 <_realloc_r+0x164>
8000c906:	14 03       	add	r3,r10
8000c908:	ec c9 ff f0 	sub	r9,r6,-16
8000c90c:	12 33       	cp.w	r3,r9
8000c90e:	c4 f5       	brlt	8000c9ac <_realloc_r+0x17c>
8000c910:	6e 3a       	ld.w	r10,r7[0xc]
8000c912:	6e 29       	ld.w	r9,r7[0x8]
8000c914:	95 29       	st.w	r10[0x8],r9
8000c916:	93 3a       	st.w	r9[0xc],r10
8000c918:	ee c5 ff f8 	sub	r5,r7,-8
8000c91c:	e0 ca 00 04 	sub	r10,r0,4
8000c920:	e0 4a 00 24 	cp.w	r10,36
8000c924:	e0 8b 00 25 	brhi	8000c96e <_realloc_r+0x13e>
8000c928:	0a 99       	mov	r9,r5
8000c92a:	59 3a       	cp.w	r10,19
8000c92c:	e0 88 00 1a 	brls	8000c960 <_realloc_r+0x130>
8000c930:	09 09       	ld.w	r9,r4++
8000c932:	8b 09       	st.w	r5[0x0],r9
8000c934:	09 09       	ld.w	r9,r4++
8000c936:	8f 39       	st.w	r7[0xc],r9
8000c938:	ee c9 ff f0 	sub	r9,r7,-16
8000c93c:	59 ba       	cp.w	r10,27
8000c93e:	e0 88 00 11 	brls	8000c960 <_realloc_r+0x130>
8000c942:	09 0b       	ld.w	r11,r4++
8000c944:	93 0b       	st.w	r9[0x0],r11
8000c946:	09 09       	ld.w	r9,r4++
8000c948:	8f 59       	st.w	r7[0x14],r9
8000c94a:	ee c9 ff e8 	sub	r9,r7,-24
8000c94e:	e0 4a 00 24 	cp.w	r10,36
8000c952:	c0 71       	brne	8000c960 <_realloc_r+0x130>
8000c954:	09 0a       	ld.w	r10,r4++
8000c956:	93 0a       	st.w	r9[0x0],r10
8000c958:	ee c9 ff e0 	sub	r9,r7,-32
8000c95c:	09 0a       	ld.w	r10,r4++
8000c95e:	8f 7a       	st.w	r7[0x1c],r10
8000c960:	09 0a       	ld.w	r10,r4++
8000c962:	12 aa       	st.w	r9++,r10
8000c964:	68 0a       	ld.w	r10,r4[0x0]
8000c966:	93 0a       	st.w	r9[0x0],r10
8000c968:	68 1a       	ld.w	r10,r4[0x4]
8000c96a:	93 1a       	st.w	r9[0x4],r10
8000c96c:	c0 78       	rjmp	8000c97a <_realloc_r+0x14a>
8000c96e:	50 08       	stdsp	sp[0x0],r8
8000c970:	08 9b       	mov	r11,r4
8000c972:	0a 9c       	mov	r12,r5
8000c974:	fe b0 fc 4d 	rcall	8000c20e <memmove>
8000c978:	40 08       	lddsp	r8,sp[0x0]
8000c97a:	ee 06 00 09 	add	r9,r7,r6
8000c97e:	0c 13       	sub	r3,r6
8000c980:	a1 a3       	sbr	r3,0x0
8000c982:	93 13       	st.w	r9[0x4],r3
8000c984:	91 29       	st.w	r8[0x8],r9
8000c986:	04 9c       	mov	r12,r2
8000c988:	6e 18       	ld.w	r8,r7[0x4]
8000c98a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c98e:	10 46       	or	r6,r8
8000c990:	8f 16       	st.w	r7[0x4],r6
8000c992:	ca c8       	rjmp	8000caea <_realloc_r+0x2ba>
8000c994:	14 03       	add	r3,r10
8000c996:	0c 33       	cp.w	r3,r6
8000c998:	c0 a5       	brlt	8000c9ac <_realloc_r+0x17c>
8000c99a:	72 28       	ld.w	r8,r9[0x8]
8000c99c:	72 39       	ld.w	r9,r9[0xc]
8000c99e:	93 28       	st.w	r9[0x8],r8
8000c9a0:	91 39       	st.w	r8[0xc],r9
8000c9a2:	6e 28       	ld.w	r8,r7[0x8]
8000c9a4:	6e 39       	ld.w	r9,r7[0xc]
8000c9a6:	c0 98       	rjmp	8000c9b8 <_realloc_r+0x188>
8000c9a8:	00 00       	add	r0,r0
8000c9aa:	01 04       	ld.w	r4,r0++
8000c9ac:	f8 00 00 03 	add	r3,r12,r0
8000c9b0:	0c 33       	cp.w	r3,r6
8000c9b2:	c3 35       	brlt	8000ca18 <_realloc_r+0x1e8>
8000c9b4:	6e 39       	ld.w	r9,r7[0xc]
8000c9b6:	6e 28       	ld.w	r8,r7[0x8]
8000c9b8:	93 28       	st.w	r9[0x8],r8
8000c9ba:	91 39       	st.w	r8[0xc],r9
8000c9bc:	e0 ca 00 04 	sub	r10,r0,4
8000c9c0:	ee cc ff f8 	sub	r12,r7,-8
8000c9c4:	e0 4a 00 24 	cp.w	r10,36
8000c9c8:	e0 8b 00 24 	brhi	8000ca10 <_realloc_r+0x1e0>
8000c9cc:	59 3a       	cp.w	r10,19
8000c9ce:	e0 88 00 1a 	brls	8000ca02 <_realloc_r+0x1d2>
8000c9d2:	09 08       	ld.w	r8,r4++
8000c9d4:	99 08       	st.w	r12[0x0],r8
8000c9d6:	09 08       	ld.w	r8,r4++
8000c9d8:	8f 38       	st.w	r7[0xc],r8
8000c9da:	ee cc ff f0 	sub	r12,r7,-16
8000c9de:	59 ba       	cp.w	r10,27
8000c9e0:	e0 88 00 11 	brls	8000ca02 <_realloc_r+0x1d2>
8000c9e4:	09 08       	ld.w	r8,r4++
8000c9e6:	99 08       	st.w	r12[0x0],r8
8000c9e8:	09 08       	ld.w	r8,r4++
8000c9ea:	8f 58       	st.w	r7[0x14],r8
8000c9ec:	ee cc ff e8 	sub	r12,r7,-24
8000c9f0:	e0 4a 00 24 	cp.w	r10,36
8000c9f4:	c0 71       	brne	8000ca02 <_realloc_r+0x1d2>
8000c9f6:	09 08       	ld.w	r8,r4++
8000c9f8:	99 08       	st.w	r12[0x0],r8
8000c9fa:	ee cc ff e0 	sub	r12,r7,-32
8000c9fe:	09 08       	ld.w	r8,r4++
8000ca00:	8f 78       	st.w	r7[0x1c],r8
8000ca02:	09 08       	ld.w	r8,r4++
8000ca04:	18 a8       	st.w	r12++,r8
8000ca06:	68 08       	ld.w	r8,r4[0x0]
8000ca08:	99 08       	st.w	r12[0x0],r8
8000ca0a:	68 18       	ld.w	r8,r4[0x4]
8000ca0c:	99 18       	st.w	r12[0x4],r8
8000ca0e:	c4 78       	rjmp	8000ca9c <_realloc_r+0x26c>
8000ca10:	08 9b       	mov	r11,r4
8000ca12:	fe b0 fb fe 	rcall	8000c20e <memmove>
8000ca16:	c4 38       	rjmp	8000ca9c <_realloc_r+0x26c>
8000ca18:	04 9c       	mov	r12,r2
8000ca1a:	fe b0 f9 d5 	rcall	8000bdc4 <_malloc_r>
8000ca1e:	18 95       	mov	r5,r12
8000ca20:	c3 a0       	breq	8000ca94 <_realloc_r+0x264>
8000ca22:	62 18       	ld.w	r8,r1[0x4]
8000ca24:	f8 c9 00 08 	sub	r9,r12,8
8000ca28:	a1 c8       	cbr	r8,0x0
8000ca2a:	e2 08 00 08 	add	r8,r1,r8
8000ca2e:	10 39       	cp.w	r9,r8
8000ca30:	c0 71       	brne	8000ca3e <_realloc_r+0x20e>
8000ca32:	72 13       	ld.w	r3,r9[0x4]
8000ca34:	02 97       	mov	r7,r1
8000ca36:	e0 13 ff fc 	andl	r3,0xfffc
8000ca3a:	00 03       	add	r3,r0
8000ca3c:	c3 08       	rjmp	8000ca9c <_realloc_r+0x26c>
8000ca3e:	e0 ca 00 04 	sub	r10,r0,4
8000ca42:	e0 4a 00 24 	cp.w	r10,36
8000ca46:	e0 8b 00 20 	brhi	8000ca86 <_realloc_r+0x256>
8000ca4a:	08 99       	mov	r9,r4
8000ca4c:	18 98       	mov	r8,r12
8000ca4e:	59 3a       	cp.w	r10,19
8000ca50:	e0 88 00 14 	brls	8000ca78 <_realloc_r+0x248>
8000ca54:	13 0b       	ld.w	r11,r9++
8000ca56:	10 ab       	st.w	r8++,r11
8000ca58:	13 0b       	ld.w	r11,r9++
8000ca5a:	10 ab       	st.w	r8++,r11
8000ca5c:	59 ba       	cp.w	r10,27
8000ca5e:	e0 88 00 0d 	brls	8000ca78 <_realloc_r+0x248>
8000ca62:	13 0b       	ld.w	r11,r9++
8000ca64:	10 ab       	st.w	r8++,r11
8000ca66:	13 0b       	ld.w	r11,r9++
8000ca68:	10 ab       	st.w	r8++,r11
8000ca6a:	e0 4a 00 24 	cp.w	r10,36
8000ca6e:	c0 51       	brne	8000ca78 <_realloc_r+0x248>
8000ca70:	13 0a       	ld.w	r10,r9++
8000ca72:	10 aa       	st.w	r8++,r10
8000ca74:	13 0a       	ld.w	r10,r9++
8000ca76:	10 aa       	st.w	r8++,r10
8000ca78:	13 0a       	ld.w	r10,r9++
8000ca7a:	10 aa       	st.w	r8++,r10
8000ca7c:	72 0a       	ld.w	r10,r9[0x0]
8000ca7e:	91 0a       	st.w	r8[0x0],r10
8000ca80:	72 19       	ld.w	r9,r9[0x4]
8000ca82:	91 19       	st.w	r8[0x4],r9
8000ca84:	c0 48       	rjmp	8000ca8c <_realloc_r+0x25c>
8000ca86:	08 9b       	mov	r11,r4
8000ca88:	fe b0 fb c3 	rcall	8000c20e <memmove>
8000ca8c:	08 9b       	mov	r11,r4
8000ca8e:	04 9c       	mov	r12,r2
8000ca90:	fe b0 f6 ec 	rcall	8000b868 <_free_r>
8000ca94:	04 9c       	mov	r12,r2
8000ca96:	c2 a8       	rjmp	8000caea <_realloc_r+0x2ba>
8000ca98:	00 93       	mov	r3,r0
8000ca9a:	02 97       	mov	r7,r1
8000ca9c:	e6 06 01 09 	sub	r9,r3,r6
8000caa0:	6e 18       	ld.w	r8,r7[0x4]
8000caa2:	58 f9       	cp.w	r9,15
8000caa4:	e0 88 00 16 	brls	8000cad0 <_realloc_r+0x2a0>
8000caa8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000caac:	ed e8 10 08 	or	r8,r6,r8
8000cab0:	8f 18       	st.w	r7[0x4],r8
8000cab2:	12 98       	mov	r8,r9
8000cab4:	a1 a8       	sbr	r8,0x0
8000cab6:	ee 06 00 0b 	add	r11,r7,r6
8000caba:	f6 09 00 09 	add	r9,r11,r9
8000cabe:	97 18       	st.w	r11[0x4],r8
8000cac0:	72 18       	ld.w	r8,r9[0x4]
8000cac2:	a1 a8       	sbr	r8,0x0
8000cac4:	2f 8b       	sub	r11,-8
8000cac6:	93 18       	st.w	r9[0x4],r8
8000cac8:	04 9c       	mov	r12,r2
8000caca:	fe b0 f6 cf 	rcall	8000b868 <_free_r>
8000cace:	c0 b8       	rjmp	8000cae4 <_realloc_r+0x2b4>
8000cad0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000cad4:	e7 e8 10 08 	or	r8,r3,r8
8000cad8:	8f 18       	st.w	r7[0x4],r8
8000cada:	ee 03 00 03 	add	r3,r7,r3
8000cade:	66 18       	ld.w	r8,r3[0x4]
8000cae0:	a1 a8       	sbr	r8,0x0
8000cae2:	87 18       	st.w	r3[0x4],r8
8000cae4:	04 9c       	mov	r12,r2
8000cae6:	ee c5 ff f8 	sub	r5,r7,-8
8000caea:	fe b0 fb b2 	rcall	8000c24e <__malloc_unlock>
8000caee:	0a 9c       	mov	r12,r5
8000caf0:	2f fd       	sub	sp,-4
8000caf2:	d8 32       	popm	r0-r7,pc

8000caf4 <_sbrk_r>:
8000caf4:	d4 21       	pushm	r4-r7,lr
8000caf6:	30 08       	mov	r8,0
8000caf8:	18 97       	mov	r7,r12
8000cafa:	48 66       	lddpc	r6,8000cb10 <_sbrk_r+0x1c>
8000cafc:	16 9c       	mov	r12,r11
8000cafe:	8d 08       	st.w	r6[0x0],r8
8000cb00:	ce 4c       	rcall	8000ccc8 <_sbrk>
8000cb02:	5b fc       	cp.w	r12,-1
8000cb04:	c0 51       	brne	8000cb0e <_sbrk_r+0x1a>
8000cb06:	6c 08       	ld.w	r8,r6[0x0]
8000cb08:	58 08       	cp.w	r8,0
8000cb0a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000cb0e:	d8 22       	popm	r4-r7,pc
8000cb10:	00 00       	add	r0,r0
8000cb12:	0c ec       	st.h	--r6,r12

8000cb14 <__isinfd>:
8000cb14:	14 98       	mov	r8,r10
8000cb16:	fc 19 7f f0 	movh	r9,0x7ff0
8000cb1a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000cb1e:	f0 0b 11 00 	rsub	r11,r8,0
8000cb22:	f7 e8 10 08 	or	r8,r11,r8
8000cb26:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000cb2a:	f2 08 01 08 	sub	r8,r9,r8
8000cb2e:	f0 0c 11 00 	rsub	r12,r8,0
8000cb32:	f9 e8 10 08 	or	r8,r12,r8
8000cb36:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000cb3a:	2f fc       	sub	r12,-1
8000cb3c:	5e fc       	retal	r12

8000cb3e <__isnand>:
8000cb3e:	14 98       	mov	r8,r10
8000cb40:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000cb44:	f0 0c 11 00 	rsub	r12,r8,0
8000cb48:	10 4c       	or	r12,r8
8000cb4a:	fc 18 7f f0 	movh	r8,0x7ff0
8000cb4e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000cb52:	f0 0c 01 0c 	sub	r12,r8,r12
8000cb56:	bf 9c       	lsr	r12,0x1f
8000cb58:	5e fc       	retal	r12
8000cb5a:	d7 03       	nop

8000cb5c <__sclose>:
8000cb5c:	d4 01       	pushm	lr
8000cb5e:	96 7b       	ld.sh	r11,r11[0xe]
8000cb60:	c1 2d       	rcall	8000cd84 <_close_r>
8000cb62:	d8 02       	popm	pc

8000cb64 <__sseek>:
8000cb64:	d4 21       	pushm	r4-r7,lr
8000cb66:	16 97       	mov	r7,r11
8000cb68:	96 7b       	ld.sh	r11,r11[0xe]
8000cb6a:	c9 bd       	rcall	8000cea0 <_lseek_r>
8000cb6c:	8e 68       	ld.sh	r8,r7[0xc]
8000cb6e:	10 99       	mov	r9,r8
8000cb70:	ad c9       	cbr	r9,0xc
8000cb72:	5b fc       	cp.w	r12,-1
8000cb74:	ef f9 0c 06 	st.heq	r7[0xc],r9
8000cb78:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000cb7c:	e0 69 10 00 	mov	r9,4096
8000cb80:	f1 d9 e1 38 	orne	r8,r8,r9
8000cb84:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000cb88:	d8 22       	popm	r4-r7,pc
8000cb8a:	d7 03       	nop

8000cb8c <__swrite>:
8000cb8c:	d4 21       	pushm	r4-r7,lr
8000cb8e:	96 68       	ld.sh	r8,r11[0xc]
8000cb90:	16 97       	mov	r7,r11
8000cb92:	14 95       	mov	r5,r10
8000cb94:	12 94       	mov	r4,r9
8000cb96:	e2 18 01 00 	andl	r8,0x100,COH
8000cb9a:	18 96       	mov	r6,r12
8000cb9c:	c0 50       	breq	8000cba6 <__swrite+0x1a>
8000cb9e:	30 29       	mov	r9,2
8000cba0:	30 0a       	mov	r10,0
8000cba2:	96 7b       	ld.sh	r11,r11[0xe]
8000cba4:	c7 ed       	rcall	8000cea0 <_lseek_r>
8000cba6:	8e 68       	ld.sh	r8,r7[0xc]
8000cba8:	ad c8       	cbr	r8,0xc
8000cbaa:	08 99       	mov	r9,r4
8000cbac:	0a 9a       	mov	r10,r5
8000cbae:	8e 7b       	ld.sh	r11,r7[0xe]
8000cbb0:	0c 9c       	mov	r12,r6
8000cbb2:	ae 68       	st.h	r7[0xc],r8
8000cbb4:	ca 8c       	rcall	8000cd04 <_write_r>
8000cbb6:	d8 22       	popm	r4-r7,pc

8000cbb8 <__sread>:
8000cbb8:	d4 21       	pushm	r4-r7,lr
8000cbba:	16 97       	mov	r7,r11
8000cbbc:	96 7b       	ld.sh	r11,r11[0xe]
8000cbbe:	c8 5d       	rcall	8000cec8 <_read_r>
8000cbc0:	c0 65       	brlt	8000cbcc <__sread+0x14>
8000cbc2:	6f 58       	ld.w	r8,r7[0x54]
8000cbc4:	18 08       	add	r8,r12
8000cbc6:	ef 48 00 54 	st.w	r7[84],r8
8000cbca:	d8 22       	popm	r4-r7,pc
8000cbcc:	8e 68       	ld.sh	r8,r7[0xc]
8000cbce:	ad c8       	cbr	r8,0xc
8000cbd0:	ae 68       	st.h	r7[0xc],r8
8000cbd2:	d8 22       	popm	r4-r7,pc

8000cbd4 <strlen>:
8000cbd4:	30 09       	mov	r9,0
8000cbd6:	18 98       	mov	r8,r12
8000cbd8:	c0 28       	rjmp	8000cbdc <strlen+0x8>
8000cbda:	2f f8       	sub	r8,-1
8000cbdc:	11 8a       	ld.ub	r10,r8[0x0]
8000cbde:	f2 0a 18 00 	cp.b	r10,r9
8000cbe2:	cf c1       	brne	8000cbda <strlen+0x6>
8000cbe4:	f0 0c 01 0c 	sub	r12,r8,r12
8000cbe8:	5e fc       	retal	r12
8000cbea:	d7 03       	nop

8000cbec <_close>:
8000cbec:	30 28       	mov	r8,2
8000cbee:	d6 73       	breakpoint
8000cbf0:	3f fc       	mov	r12,-1
8000cbf2:	35 8b       	mov	r11,88
8000cbf4:	58 0c       	cp.w	r12,0
8000cbf6:	5e 4c       	retge	r12
8000cbf8:	48 2a       	lddpc	r10,8000cc00 <_close+0x14>
8000cbfa:	95 0b       	st.w	r10[0x0],r11
8000cbfc:	5e fc       	retal	r12
8000cbfe:	d7 03       	nop
8000cc00:	00 00       	add	r0,r0
8000cc02:	0c ec       	st.h	--r6,r12

8000cc04 <_lseek>:
8000cc04:	30 58       	mov	r8,5
8000cc06:	d6 73       	breakpoint
8000cc08:	3f fc       	mov	r12,-1
8000cc0a:	35 8b       	mov	r11,88
8000cc0c:	58 0c       	cp.w	r12,0
8000cc0e:	5e 4c       	retge	r12
8000cc10:	48 2a       	lddpc	r10,8000cc18 <_lseek+0x14>
8000cc12:	95 0b       	st.w	r10[0x0],r11
8000cc14:	5e fc       	retal	r12
8000cc16:	d7 03       	nop
8000cc18:	00 00       	add	r0,r0
8000cc1a:	0c ec       	st.h	--r6,r12

8000cc1c <_read>:
8000cc1c:	30 38       	mov	r8,3
8000cc1e:	d6 73       	breakpoint
8000cc20:	3f fc       	mov	r12,-1
8000cc22:	35 8b       	mov	r11,88
8000cc24:	58 0c       	cp.w	r12,0
8000cc26:	5e 4c       	retge	r12
8000cc28:	48 2a       	lddpc	r10,8000cc30 <_read+0x14>
8000cc2a:	95 0b       	st.w	r10[0x0],r11
8000cc2c:	5e fc       	retal	r12
8000cc2e:	d7 03       	nop
8000cc30:	00 00       	add	r0,r0
8000cc32:	0c ec       	st.h	--r6,r12

8000cc34 <_write>:
8000cc34:	30 48       	mov	r8,4
8000cc36:	d6 73       	breakpoint
8000cc38:	3f fc       	mov	r12,-1
8000cc3a:	35 8b       	mov	r11,88
8000cc3c:	58 0c       	cp.w	r12,0
8000cc3e:	5e 4c       	retge	r12
8000cc40:	48 2a       	lddpc	r10,8000cc48 <_write+0x14>
8000cc42:	95 0b       	st.w	r10[0x0],r11
8000cc44:	5e fc       	retal	r12
8000cc46:	d7 03       	nop
8000cc48:	00 00       	add	r0,r0
8000cc4a:	0c ec       	st.h	--r6,r12

8000cc4c <isatty>:
8000cc4c:	30 b8       	mov	r8,11
8000cc4e:	d6 73       	breakpoint
8000cc50:	3f fc       	mov	r12,-1
8000cc52:	35 8b       	mov	r11,88
8000cc54:	58 0c       	cp.w	r12,0
8000cc56:	5e 4c       	retge	r12
8000cc58:	48 2a       	lddpc	r10,8000cc60 <isatty+0x14>
8000cc5a:	95 0b       	st.w	r10[0x0],r11
8000cc5c:	5e fc       	retal	r12
8000cc5e:	d7 03       	nop
8000cc60:	00 00       	add	r0,r0
8000cc62:	0c ec       	st.h	--r6,r12

8000cc64 <_fstat_host>:
8000cc64:	30 98       	mov	r8,9
8000cc66:	d6 73       	breakpoint
8000cc68:	3f fc       	mov	r12,-1
8000cc6a:	35 8b       	mov	r11,88
8000cc6c:	58 0c       	cp.w	r12,0
8000cc6e:	5e 4c       	retge	r12
8000cc70:	48 2a       	lddpc	r10,8000cc78 <_fstat_host+0x14>
8000cc72:	95 0b       	st.w	r10[0x0],r11
8000cc74:	5e fc       	retal	r12
8000cc76:	d7 03       	nop
8000cc78:	00 00       	add	r0,r0
8000cc7a:	0c ec       	st.h	--r6,r12

8000cc7c <_fstat>:
8000cc7c:	d4 21       	pushm	r4-r7,lr
8000cc7e:	21 0d       	sub	sp,64
8000cc80:	16 97       	mov	r7,r11
8000cc82:	1a 9b       	mov	r11,sp
8000cc84:	cf 0f       	rcall	8000cc64 <_fstat_host>
8000cc86:	c0 34       	brge	8000cc8c <_fstat+0x10>
8000cc88:	3f fc       	mov	r12,-1
8000cc8a:	c1 c8       	rjmp	8000ccc2 <_fstat+0x46>
8000cc8c:	40 08       	lddsp	r8,sp[0x0]
8000cc8e:	ae 08       	st.h	r7[0x0],r8
8000cc90:	40 18       	lddsp	r8,sp[0x4]
8000cc92:	ae 18       	st.h	r7[0x2],r8
8000cc94:	40 28       	lddsp	r8,sp[0x8]
8000cc96:	8f 18       	st.w	r7[0x4],r8
8000cc98:	40 38       	lddsp	r8,sp[0xc]
8000cc9a:	ae 48       	st.h	r7[0x8],r8
8000cc9c:	40 48       	lddsp	r8,sp[0x10]
8000cc9e:	ae 58       	st.h	r7[0xa],r8
8000cca0:	40 58       	lddsp	r8,sp[0x14]
8000cca2:	ae 68       	st.h	r7[0xc],r8
8000cca4:	40 68       	lddsp	r8,sp[0x18]
8000cca6:	ae 78       	st.h	r7[0xe],r8
8000cca8:	40 88       	lddsp	r8,sp[0x20]
8000ccaa:	8f 48       	st.w	r7[0x10],r8
8000ccac:	40 a8       	lddsp	r8,sp[0x28]
8000ccae:	8f b8       	st.w	r7[0x2c],r8
8000ccb0:	40 c8       	lddsp	r8,sp[0x30]
8000ccb2:	8f c8       	st.w	r7[0x30],r8
8000ccb4:	40 d8       	lddsp	r8,sp[0x34]
8000ccb6:	8f 58       	st.w	r7[0x14],r8
8000ccb8:	40 e8       	lddsp	r8,sp[0x38]
8000ccba:	30 0c       	mov	r12,0
8000ccbc:	8f 78       	st.w	r7[0x1c],r8
8000ccbe:	40 f8       	lddsp	r8,sp[0x3c]
8000ccc0:	8f 98       	st.w	r7[0x24],r8
8000ccc2:	2f 0d       	sub	sp,-64
8000ccc4:	d8 22       	popm	r4-r7,pc
8000ccc6:	d7 03       	nop

8000ccc8 <_sbrk>:
8000ccc8:	d4 01       	pushm	lr
8000ccca:	48 c8       	lddpc	r8,8000ccf8 <_sbrk+0x30>
8000cccc:	70 09       	ld.w	r9,r8[0x0]
8000ccce:	58 09       	cp.w	r9,0
8000ccd0:	c0 31       	brne	8000ccd6 <_sbrk+0xe>
8000ccd2:	48 b9       	lddpc	r9,8000ccfc <_sbrk+0x34>
8000ccd4:	91 09       	st.w	r8[0x0],r9
8000ccd6:	48 99       	lddpc	r9,8000ccf8 <_sbrk+0x30>
8000ccd8:	48 aa       	lddpc	r10,8000cd00 <_sbrk+0x38>
8000ccda:	72 08       	ld.w	r8,r9[0x0]
8000ccdc:	f0 0c 00 0c 	add	r12,r8,r12
8000cce0:	14 3c       	cp.w	r12,r10
8000cce2:	e0 8b 00 04 	brhi	8000ccea <_sbrk+0x22>
8000cce6:	93 0c       	st.w	r9[0x0],r12
8000cce8:	c0 58       	rjmp	8000ccf2 <_sbrk+0x2a>
8000ccea:	c5 dc       	rcall	8000cda4 <__errno>
8000ccec:	30 c8       	mov	r8,12
8000ccee:	99 08       	st.w	r12[0x0],r8
8000ccf0:	3f f8       	mov	r8,-1
8000ccf2:	10 9c       	mov	r12,r8
8000ccf4:	d8 02       	popm	pc
8000ccf6:	d7 03       	nop
8000ccf8:	00 00       	add	r0,r0
8000ccfa:	07 58       	ld.sh	r8,--r3
8000ccfc:	00 00       	add	r0,r0
8000ccfe:	0c f0       	st.b	--r6,r0
8000cd00:	00 00       	add	r0,r0
8000cd02:	f0 00       	*unknown*

8000cd04 <_write_r>:
8000cd04:	d4 21       	pushm	r4-r7,lr
8000cd06:	16 98       	mov	r8,r11
8000cd08:	18 97       	mov	r7,r12
8000cd0a:	10 9c       	mov	r12,r8
8000cd0c:	30 08       	mov	r8,0
8000cd0e:	14 9b       	mov	r11,r10
8000cd10:	48 66       	lddpc	r6,8000cd28 <_write_r+0x24>
8000cd12:	12 9a       	mov	r10,r9
8000cd14:	8d 08       	st.w	r6[0x0],r8
8000cd16:	c8 ff       	rcall	8000cc34 <_write>
8000cd18:	5b fc       	cp.w	r12,-1
8000cd1a:	c0 51       	brne	8000cd24 <_write_r+0x20>
8000cd1c:	6c 08       	ld.w	r8,r6[0x0]
8000cd1e:	58 08       	cp.w	r8,0
8000cd20:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000cd24:	d8 22       	popm	r4-r7,pc
8000cd26:	d7 03       	nop
8000cd28:	00 00       	add	r0,r0
8000cd2a:	0c ec       	st.h	--r6,r12

8000cd2c <_calloc_r>:
8000cd2c:	d4 21       	pushm	r4-r7,lr
8000cd2e:	f4 0b 02 4b 	mul	r11,r10,r11
8000cd32:	fe b0 f8 49 	rcall	8000bdc4 <_malloc_r>
8000cd36:	18 97       	mov	r7,r12
8000cd38:	c2 30       	breq	8000cd7e <_calloc_r+0x52>
8000cd3a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000cd3e:	e0 1a ff fc 	andl	r10,0xfffc
8000cd42:	20 4a       	sub	r10,4
8000cd44:	e0 4a 00 24 	cp.w	r10,36
8000cd48:	e0 8b 00 18 	brhi	8000cd78 <_calloc_r+0x4c>
8000cd4c:	18 98       	mov	r8,r12
8000cd4e:	59 3a       	cp.w	r10,19
8000cd50:	e0 88 00 0f 	brls	8000cd6e <_calloc_r+0x42>
8000cd54:	30 09       	mov	r9,0
8000cd56:	10 a9       	st.w	r8++,r9
8000cd58:	10 a9       	st.w	r8++,r9
8000cd5a:	59 ba       	cp.w	r10,27
8000cd5c:	e0 88 00 09 	brls	8000cd6e <_calloc_r+0x42>
8000cd60:	10 a9       	st.w	r8++,r9
8000cd62:	10 a9       	st.w	r8++,r9
8000cd64:	e0 4a 00 24 	cp.w	r10,36
8000cd68:	c0 31       	brne	8000cd6e <_calloc_r+0x42>
8000cd6a:	10 a9       	st.w	r8++,r9
8000cd6c:	10 a9       	st.w	r8++,r9
8000cd6e:	30 09       	mov	r9,0
8000cd70:	10 a9       	st.w	r8++,r9
8000cd72:	91 19       	st.w	r8[0x4],r9
8000cd74:	91 09       	st.w	r8[0x0],r9
8000cd76:	c0 48       	rjmp	8000cd7e <_calloc_r+0x52>
8000cd78:	30 0b       	mov	r11,0
8000cd7a:	fe b0 db c4 	rcall	80008502 <memset>
8000cd7e:	0e 9c       	mov	r12,r7
8000cd80:	d8 22       	popm	r4-r7,pc
8000cd82:	d7 03       	nop

8000cd84 <_close_r>:
8000cd84:	d4 21       	pushm	r4-r7,lr
8000cd86:	30 08       	mov	r8,0
8000cd88:	18 97       	mov	r7,r12
8000cd8a:	48 66       	lddpc	r6,8000cda0 <_close_r+0x1c>
8000cd8c:	16 9c       	mov	r12,r11
8000cd8e:	8d 08       	st.w	r6[0x0],r8
8000cd90:	c2 ef       	rcall	8000cbec <_close>
8000cd92:	5b fc       	cp.w	r12,-1
8000cd94:	c0 51       	brne	8000cd9e <_close_r+0x1a>
8000cd96:	6c 08       	ld.w	r8,r6[0x0]
8000cd98:	58 08       	cp.w	r8,0
8000cd9a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000cd9e:	d8 22       	popm	r4-r7,pc
8000cda0:	00 00       	add	r0,r0
8000cda2:	0c ec       	st.h	--r6,r12

8000cda4 <__errno>:
8000cda4:	48 28       	lddpc	r8,8000cdac <__errno+0x8>
8000cda6:	70 0c       	ld.w	r12,r8[0x0]
8000cda8:	2f 4c       	sub	r12,-12
8000cdaa:	5e fc       	retal	r12
8000cdac:	00 00       	add	r0,r0
8000cdae:	01 00       	ld.w	r0,r0++

8000cdb0 <_fclose_r>:
8000cdb0:	d4 21       	pushm	r4-r7,lr
8000cdb2:	18 96       	mov	r6,r12
8000cdb4:	16 97       	mov	r7,r11
8000cdb6:	58 0b       	cp.w	r11,0
8000cdb8:	c0 31       	brne	8000cdbe <_fclose_r+0xe>
8000cdba:	16 95       	mov	r5,r11
8000cdbc:	c5 08       	rjmp	8000ce5c <_fclose_r+0xac>
8000cdbe:	fe b0 f4 65 	rcall	8000b688 <__sfp_lock_acquire>
8000cdc2:	58 06       	cp.w	r6,0
8000cdc4:	c0 70       	breq	8000cdd2 <_fclose_r+0x22>
8000cdc6:	6c 68       	ld.w	r8,r6[0x18]
8000cdc8:	58 08       	cp.w	r8,0
8000cdca:	c0 41       	brne	8000cdd2 <_fclose_r+0x22>
8000cdcc:	0c 9c       	mov	r12,r6
8000cdce:	fe b0 f4 b1 	rcall	8000b730 <__sinit>
8000cdd2:	4a 48       	lddpc	r8,8000ce60 <_fclose_r+0xb0>
8000cdd4:	10 37       	cp.w	r7,r8
8000cdd6:	c0 31       	brne	8000cddc <_fclose_r+0x2c>
8000cdd8:	6c 07       	ld.w	r7,r6[0x0]
8000cdda:	c0 a8       	rjmp	8000cdee <_fclose_r+0x3e>
8000cddc:	4a 28       	lddpc	r8,8000ce64 <_fclose_r+0xb4>
8000cdde:	10 37       	cp.w	r7,r8
8000cde0:	c0 31       	brne	8000cde6 <_fclose_r+0x36>
8000cde2:	6c 17       	ld.w	r7,r6[0x4]
8000cde4:	c0 58       	rjmp	8000cdee <_fclose_r+0x3e>
8000cde6:	4a 18       	lddpc	r8,8000ce68 <_fclose_r+0xb8>
8000cde8:	10 37       	cp.w	r7,r8
8000cdea:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000cdee:	8e 69       	ld.sh	r9,r7[0xc]
8000cdf0:	30 08       	mov	r8,0
8000cdf2:	f0 09 19 00 	cp.h	r9,r8
8000cdf6:	c0 51       	brne	8000ce00 <_fclose_r+0x50>
8000cdf8:	fe b0 f4 49 	rcall	8000b68a <__sfp_lock_release>
8000cdfc:	30 05       	mov	r5,0
8000cdfe:	c2 f8       	rjmp	8000ce5c <_fclose_r+0xac>
8000ce00:	0e 9b       	mov	r11,r7
8000ce02:	0c 9c       	mov	r12,r6
8000ce04:	fe b0 f3 ba 	rcall	8000b578 <_fflush_r>
8000ce08:	6e c8       	ld.w	r8,r7[0x30]
8000ce0a:	18 95       	mov	r5,r12
8000ce0c:	58 08       	cp.w	r8,0
8000ce0e:	c0 60       	breq	8000ce1a <_fclose_r+0x6a>
8000ce10:	6e 8b       	ld.w	r11,r7[0x20]
8000ce12:	0c 9c       	mov	r12,r6
8000ce14:	5d 18       	icall	r8
8000ce16:	f9 b5 05 ff 	movlt	r5,-1
8000ce1a:	8e 68       	ld.sh	r8,r7[0xc]
8000ce1c:	ed b8 00 07 	bld	r8,0x7
8000ce20:	c0 51       	brne	8000ce2a <_fclose_r+0x7a>
8000ce22:	6e 4b       	ld.w	r11,r7[0x10]
8000ce24:	0c 9c       	mov	r12,r6
8000ce26:	fe b0 f5 21 	rcall	8000b868 <_free_r>
8000ce2a:	6e db       	ld.w	r11,r7[0x34]
8000ce2c:	58 0b       	cp.w	r11,0
8000ce2e:	c0 a0       	breq	8000ce42 <_fclose_r+0x92>
8000ce30:	ee c8 ff bc 	sub	r8,r7,-68
8000ce34:	10 3b       	cp.w	r11,r8
8000ce36:	c0 40       	breq	8000ce3e <_fclose_r+0x8e>
8000ce38:	0c 9c       	mov	r12,r6
8000ce3a:	fe b0 f5 17 	rcall	8000b868 <_free_r>
8000ce3e:	30 08       	mov	r8,0
8000ce40:	8f d8       	st.w	r7[0x34],r8
8000ce42:	6f 2b       	ld.w	r11,r7[0x48]
8000ce44:	58 0b       	cp.w	r11,0
8000ce46:	c0 70       	breq	8000ce54 <_fclose_r+0xa4>
8000ce48:	0c 9c       	mov	r12,r6
8000ce4a:	fe b0 f5 0f 	rcall	8000b868 <_free_r>
8000ce4e:	30 08       	mov	r8,0
8000ce50:	ef 48 00 48 	st.w	r7[72],r8
8000ce54:	30 08       	mov	r8,0
8000ce56:	ae 68       	st.h	r7[0xc],r8
8000ce58:	fe b0 f4 19 	rcall	8000b68a <__sfp_lock_release>
8000ce5c:	0a 9c       	mov	r12,r5
8000ce5e:	d8 22       	popm	r4-r7,pc
8000ce60:	80 00       	ld.sh	r0,r0[0x0]
8000ce62:	ee a8       	*unknown*
8000ce64:	80 00       	ld.sh	r0,r0[0x0]
8000ce66:	ee c8 80 00 	sub	r8,r7,-32768
8000ce6a:	ee e8 d4 01 	ld.d	r8,r7[-11263]

8000ce6c <fclose>:
8000ce6c:	d4 01       	pushm	lr
8000ce6e:	48 38       	lddpc	r8,8000ce78 <fclose+0xc>
8000ce70:	18 9b       	mov	r11,r12
8000ce72:	70 0c       	ld.w	r12,r8[0x0]
8000ce74:	c9 ef       	rcall	8000cdb0 <_fclose_r>
8000ce76:	d8 02       	popm	pc
8000ce78:	00 00       	add	r0,r0
8000ce7a:	01 00       	ld.w	r0,r0++

8000ce7c <_fstat_r>:
8000ce7c:	d4 21       	pushm	r4-r7,lr
8000ce7e:	16 98       	mov	r8,r11
8000ce80:	18 97       	mov	r7,r12
8000ce82:	10 9c       	mov	r12,r8
8000ce84:	30 08       	mov	r8,0
8000ce86:	48 66       	lddpc	r6,8000ce9c <_fstat_r+0x20>
8000ce88:	14 9b       	mov	r11,r10
8000ce8a:	8d 08       	st.w	r6[0x0],r8
8000ce8c:	cf 8e       	rcall	8000cc7c <_fstat>
8000ce8e:	5b fc       	cp.w	r12,-1
8000ce90:	c0 51       	brne	8000ce9a <_fstat_r+0x1e>
8000ce92:	6c 08       	ld.w	r8,r6[0x0]
8000ce94:	58 08       	cp.w	r8,0
8000ce96:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ce9a:	d8 22       	popm	r4-r7,pc
8000ce9c:	00 00       	add	r0,r0
8000ce9e:	0c ec       	st.h	--r6,r12

8000cea0 <_lseek_r>:
8000cea0:	d4 21       	pushm	r4-r7,lr
8000cea2:	16 98       	mov	r8,r11
8000cea4:	18 97       	mov	r7,r12
8000cea6:	10 9c       	mov	r12,r8
8000cea8:	30 08       	mov	r8,0
8000ceaa:	14 9b       	mov	r11,r10
8000ceac:	48 66       	lddpc	r6,8000cec4 <_lseek_r+0x24>
8000ceae:	12 9a       	mov	r10,r9
8000ceb0:	8d 08       	st.w	r6[0x0],r8
8000ceb2:	ca 9e       	rcall	8000cc04 <_lseek>
8000ceb4:	5b fc       	cp.w	r12,-1
8000ceb6:	c0 51       	brne	8000cec0 <_lseek_r+0x20>
8000ceb8:	6c 08       	ld.w	r8,r6[0x0]
8000ceba:	58 08       	cp.w	r8,0
8000cebc:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000cec0:	d8 22       	popm	r4-r7,pc
8000cec2:	d7 03       	nop
8000cec4:	00 00       	add	r0,r0
8000cec6:	0c ec       	st.h	--r6,r12

8000cec8 <_read_r>:
8000cec8:	d4 21       	pushm	r4-r7,lr
8000ceca:	16 98       	mov	r8,r11
8000cecc:	18 97       	mov	r7,r12
8000cece:	10 9c       	mov	r12,r8
8000ced0:	30 08       	mov	r8,0
8000ced2:	14 9b       	mov	r11,r10
8000ced4:	48 66       	lddpc	r6,8000ceec <_read_r+0x24>
8000ced6:	12 9a       	mov	r10,r9
8000ced8:	8d 08       	st.w	r6[0x0],r8
8000ceda:	ca 1e       	rcall	8000cc1c <_read>
8000cedc:	5b fc       	cp.w	r12,-1
8000cede:	c0 51       	brne	8000cee8 <_read_r+0x20>
8000cee0:	6c 08       	ld.w	r8,r6[0x0]
8000cee2:	58 08       	cp.w	r8,0
8000cee4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000cee8:	d8 22       	popm	r4-r7,pc
8000ceea:	d7 03       	nop
8000ceec:	00 00       	add	r0,r0
8000ceee:	0c ec       	st.h	--r6,r12

8000cef0 <__avr32_f64_mul>:
8000cef0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000cef4:	e0 80 00 dc 	breq	8000d0ac <__avr32_f64_mul_op1_zero>
8000cef8:	d4 21       	pushm	r4-r7,lr
8000cefa:	f7 e9 20 0e 	eor	lr,r11,r9
8000cefe:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000cf02:	30 15       	mov	r5,1
8000cf04:	c4 30       	breq	8000cf8a <__avr32_f64_mul_op1_subnormal>
8000cf06:	ab 6b       	lsl	r11,0xa
8000cf08:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000cf0c:	ab 6a       	lsl	r10,0xa
8000cf0e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000cf12:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000cf16:	c5 c0       	breq	8000cfce <__avr32_f64_mul_op2_subnormal>
8000cf18:	a1 78       	lsl	r8,0x1
8000cf1a:	5c f9       	rol	r9
8000cf1c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000cf20:	e0 47 07 ff 	cp.w	r7,2047
8000cf24:	c7 70       	breq	8000d012 <__avr32_f64_mul_op_nan_or_inf>
8000cf26:	e0 46 07 ff 	cp.w	r6,2047
8000cf2a:	c7 40       	breq	8000d012 <__avr32_f64_mul_op_nan_or_inf>
8000cf2c:	ee 06 00 0c 	add	r12,r7,r6
8000cf30:	e0 2c 03 fe 	sub	r12,1022
8000cf34:	f6 08 06 44 	mulu.d	r4,r11,r8
8000cf38:	f4 09 07 44 	macu.d	r4,r10,r9
8000cf3c:	f4 08 06 46 	mulu.d	r6,r10,r8
8000cf40:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000cf44:	08 07       	add	r7,r4
8000cf46:	f4 05 00 4a 	adc	r10,r10,r5
8000cf4a:	5c 0b       	acr	r11
8000cf4c:	ed bb 00 14 	bld	r11,0x14
8000cf50:	c0 50       	breq	8000cf5a <__avr32_f64_mul+0x6a>
8000cf52:	a1 77       	lsl	r7,0x1
8000cf54:	5c fa       	rol	r10
8000cf56:	5c fb       	rol	r11
8000cf58:	20 1c       	sub	r12,1
8000cf5a:	58 0c       	cp.w	r12,0
8000cf5c:	e0 8a 00 6f 	brle	8000d03a <__avr32_f64_mul_res_subnormal>
8000cf60:	e0 4c 07 ff 	cp.w	r12,2047
8000cf64:	e0 84 00 9c 	brge	8000d09c <__avr32_f64_mul_res_inf>
8000cf68:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000cf6c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000cf70:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000cf74:	ee 17 80 00 	eorh	r7,0x8000
8000cf78:	f1 b7 04 20 	satu	r7,0x1
8000cf7c:	0e 0a       	add	r10,r7
8000cf7e:	5c 0b       	acr	r11
8000cf80:	ed be 00 1f 	bld	lr,0x1f
8000cf84:	ef bb 00 1f 	bst	r11,0x1f
8000cf88:	d8 22       	popm	r4-r7,pc

8000cf8a <__avr32_f64_mul_op1_subnormal>:
8000cf8a:	e4 1b 00 0f 	andh	r11,0xf
8000cf8e:	f4 0c 12 00 	clz	r12,r10
8000cf92:	f6 06 12 00 	clz	r6,r11
8000cf96:	f7 bc 03 e1 	sublo	r12,-31
8000cf9a:	f8 06 17 30 	movlo	r6,r12
8000cf9e:	f7 b6 02 01 	subhs	r6,1
8000cfa2:	e0 46 00 20 	cp.w	r6,32
8000cfa6:	c0 d4       	brge	8000cfc0 <__avr32_f64_mul_op1_subnormal+0x36>
8000cfa8:	ec 0c 11 20 	rsub	r12,r6,32
8000cfac:	f6 06 09 4b 	lsl	r11,r11,r6
8000cfb0:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000cfb4:	18 4b       	or	r11,r12
8000cfb6:	f4 06 09 4a 	lsl	r10,r10,r6
8000cfba:	20 b6       	sub	r6,11
8000cfbc:	0c 17       	sub	r7,r6
8000cfbe:	ca ab       	rjmp	8000cf12 <__avr32_f64_mul+0x22>
8000cfc0:	f4 06 09 4b 	lsl	r11,r10,r6
8000cfc4:	c6 40       	breq	8000d08c <__avr32_f64_mul_res_zero>
8000cfc6:	30 0a       	mov	r10,0
8000cfc8:	20 b6       	sub	r6,11
8000cfca:	0c 17       	sub	r7,r6
8000cfcc:	ca 3b       	rjmp	8000cf12 <__avr32_f64_mul+0x22>

8000cfce <__avr32_f64_mul_op2_subnormal>:
8000cfce:	e4 19 00 0f 	andh	r9,0xf
8000cfd2:	f0 0c 12 00 	clz	r12,r8
8000cfd6:	f2 05 12 00 	clz	r5,r9
8000cfda:	f7 bc 03 ea 	sublo	r12,-22
8000cfde:	f8 05 17 30 	movlo	r5,r12
8000cfe2:	f7 b5 02 0a 	subhs	r5,10
8000cfe6:	e0 45 00 20 	cp.w	r5,32
8000cfea:	c0 d4       	brge	8000d004 <__avr32_f64_mul_op2_subnormal+0x36>
8000cfec:	ea 0c 11 20 	rsub	r12,r5,32
8000cff0:	f2 05 09 49 	lsl	r9,r9,r5
8000cff4:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000cff8:	18 49       	or	r9,r12
8000cffa:	f0 05 09 48 	lsl	r8,r8,r5
8000cffe:	20 25       	sub	r5,2
8000d000:	0a 16       	sub	r6,r5
8000d002:	c8 fb       	rjmp	8000cf20 <__avr32_f64_mul+0x30>
8000d004:	f0 05 09 49 	lsl	r9,r8,r5
8000d008:	c4 20       	breq	8000d08c <__avr32_f64_mul_res_zero>
8000d00a:	30 08       	mov	r8,0
8000d00c:	20 25       	sub	r5,2
8000d00e:	0a 16       	sub	r6,r5
8000d010:	c8 8b       	rjmp	8000cf20 <__avr32_f64_mul+0x30>

8000d012 <__avr32_f64_mul_op_nan_or_inf>:
8000d012:	e4 19 00 0f 	andh	r9,0xf
8000d016:	e4 1b 00 0f 	andh	r11,0xf
8000d01a:	14 4b       	or	r11,r10
8000d01c:	10 49       	or	r9,r8
8000d01e:	e0 47 07 ff 	cp.w	r7,2047
8000d022:	c0 91       	brne	8000d034 <__avr32_f64_mul_op1_not_naninf>
8000d024:	58 0b       	cp.w	r11,0
8000d026:	c3 81       	brne	8000d096 <__avr32_f64_mul_res_nan>
8000d028:	e0 46 07 ff 	cp.w	r6,2047
8000d02c:	c3 81       	brne	8000d09c <__avr32_f64_mul_res_inf>
8000d02e:	58 09       	cp.w	r9,0
8000d030:	c3 60       	breq	8000d09c <__avr32_f64_mul_res_inf>
8000d032:	c3 28       	rjmp	8000d096 <__avr32_f64_mul_res_nan>

8000d034 <__avr32_f64_mul_op1_not_naninf>:
8000d034:	58 09       	cp.w	r9,0
8000d036:	c3 30       	breq	8000d09c <__avr32_f64_mul_res_inf>
8000d038:	c2 f8       	rjmp	8000d096 <__avr32_f64_mul_res_nan>

8000d03a <__avr32_f64_mul_res_subnormal>:
8000d03a:	5c 3c       	neg	r12
8000d03c:	2f fc       	sub	r12,-1
8000d03e:	f1 bc 04 c0 	satu	r12,0x6
8000d042:	e0 4c 00 20 	cp.w	r12,32
8000d046:	c1 14       	brge	8000d068 <__avr32_f64_mul_res_subnormal+0x2e>
8000d048:	f8 08 11 20 	rsub	r8,r12,32
8000d04c:	0e 46       	or	r6,r7
8000d04e:	ee 0c 0a 47 	lsr	r7,r7,r12
8000d052:	f4 08 09 49 	lsl	r9,r10,r8
8000d056:	12 47       	or	r7,r9
8000d058:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000d05c:	f6 08 09 49 	lsl	r9,r11,r8
8000d060:	12 4a       	or	r10,r9
8000d062:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000d066:	c8 3b       	rjmp	8000cf6c <__avr32_f64_mul+0x7c>
8000d068:	f8 08 11 20 	rsub	r8,r12,32
8000d06c:	f9 b9 00 00 	moveq	r9,0
8000d070:	c0 30       	breq	8000d076 <__avr32_f64_mul_res_subnormal+0x3c>
8000d072:	f6 08 09 49 	lsl	r9,r11,r8
8000d076:	0e 46       	or	r6,r7
8000d078:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000d07c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000d080:	f3 ea 10 07 	or	r7,r9,r10
8000d084:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000d088:	30 0b       	mov	r11,0
8000d08a:	c7 1b       	rjmp	8000cf6c <__avr32_f64_mul+0x7c>

8000d08c <__avr32_f64_mul_res_zero>:
8000d08c:	1c 9b       	mov	r11,lr
8000d08e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d092:	30 0a       	mov	r10,0
8000d094:	d8 22       	popm	r4-r7,pc

8000d096 <__avr32_f64_mul_res_nan>:
8000d096:	3f fb       	mov	r11,-1
8000d098:	3f fa       	mov	r10,-1
8000d09a:	d8 22       	popm	r4-r7,pc

8000d09c <__avr32_f64_mul_res_inf>:
8000d09c:	f0 6b 00 00 	mov	r11,-1048576
8000d0a0:	ed be 00 1f 	bld	lr,0x1f
8000d0a4:	ef bb 00 1f 	bst	r11,0x1f
8000d0a8:	30 0a       	mov	r10,0
8000d0aa:	d8 22       	popm	r4-r7,pc

8000d0ac <__avr32_f64_mul_op1_zero>:
8000d0ac:	f7 e9 20 0b 	eor	r11,r11,r9
8000d0b0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d0b4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000d0b8:	e0 4c 07 ff 	cp.w	r12,2047
8000d0bc:	5e 1c       	retne	r12
8000d0be:	3f fa       	mov	r10,-1
8000d0c0:	3f fb       	mov	r11,-1
8000d0c2:	5e fc       	retal	r12

8000d0c4 <__avr32_f64_sub_from_add>:
8000d0c4:	ee 19 80 00 	eorh	r9,0x8000

8000d0c8 <__avr32_f64_sub>:
8000d0c8:	f7 e9 20 0c 	eor	r12,r11,r9
8000d0cc:	e0 86 00 ca 	brmi	8000d260 <__avr32_f64_add_from_sub>
8000d0d0:	eb cd 40 e0 	pushm	r5-r7,lr
8000d0d4:	16 9c       	mov	r12,r11
8000d0d6:	e6 1c 80 00 	andh	r12,0x8000,COH
8000d0da:	bf db       	cbr	r11,0x1f
8000d0dc:	bf d9       	cbr	r9,0x1f
8000d0de:	10 3a       	cp.w	r10,r8
8000d0e0:	f2 0b 13 00 	cpc	r11,r9
8000d0e4:	c0 92       	brcc	8000d0f6 <__avr32_f64_sub+0x2e>
8000d0e6:	16 97       	mov	r7,r11
8000d0e8:	12 9b       	mov	r11,r9
8000d0ea:	0e 99       	mov	r9,r7
8000d0ec:	14 97       	mov	r7,r10
8000d0ee:	10 9a       	mov	r10,r8
8000d0f0:	0e 98       	mov	r8,r7
8000d0f2:	ee 1c 80 00 	eorh	r12,0x8000
8000d0f6:	f6 07 16 14 	lsr	r7,r11,0x14
8000d0fa:	ab 7b       	lsl	r11,0xb
8000d0fc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000d100:	ab 7a       	lsl	r10,0xb
8000d102:	bf bb       	sbr	r11,0x1f
8000d104:	f2 06 16 14 	lsr	r6,r9,0x14
8000d108:	c4 40       	breq	8000d190 <__avr32_f64_sub_opL_subnormal>
8000d10a:	ab 79       	lsl	r9,0xb
8000d10c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000d110:	ab 78       	lsl	r8,0xb
8000d112:	bf b9       	sbr	r9,0x1f

8000d114 <__avr32_f64_sub_opL_subnormal_done>:
8000d114:	e0 47 07 ff 	cp.w	r7,2047
8000d118:	c4 f0       	breq	8000d1b6 <__avr32_f64_sub_opH_nan_or_inf>
8000d11a:	0e 26       	rsub	r6,r7
8000d11c:	c1 20       	breq	8000d140 <__avr32_f64_sub_shift_done>
8000d11e:	ec 05 11 20 	rsub	r5,r6,32
8000d122:	e0 46 00 20 	cp.w	r6,32
8000d126:	c7 c2       	brcc	8000d21e <__avr32_f64_sub_longshift>
8000d128:	f0 05 09 4e 	lsl	lr,r8,r5
8000d12c:	f2 05 09 45 	lsl	r5,r9,r5
8000d130:	f0 06 0a 48 	lsr	r8,r8,r6
8000d134:	f2 06 0a 49 	lsr	r9,r9,r6
8000d138:	0a 48       	or	r8,r5
8000d13a:	58 0e       	cp.w	lr,0
8000d13c:	5f 1e       	srne	lr
8000d13e:	1c 48       	or	r8,lr

8000d140 <__avr32_f64_sub_shift_done>:
8000d140:	10 1a       	sub	r10,r8
8000d142:	f6 09 01 4b 	sbc	r11,r11,r9
8000d146:	f6 06 12 00 	clz	r6,r11
8000d14a:	c0 e0       	breq	8000d166 <__avr32_f64_sub_longnormalize_done>
8000d14c:	c7 83       	brcs	8000d23c <__avr32_f64_sub_longnormalize>
8000d14e:	ec 0e 11 20 	rsub	lr,r6,32
8000d152:	f6 06 09 4b 	lsl	r11,r11,r6
8000d156:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000d15a:	1c 4b       	or	r11,lr
8000d15c:	f4 06 09 4a 	lsl	r10,r10,r6
8000d160:	0c 17       	sub	r7,r6
8000d162:	e0 8a 00 39 	brle	8000d1d4 <__avr32_f64_sub_subnormal_result>

8000d166 <__avr32_f64_sub_longnormalize_done>:
8000d166:	f4 09 15 15 	lsl	r9,r10,0x15
8000d16a:	ab 9a       	lsr	r10,0xb
8000d16c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000d170:	ab 9b       	lsr	r11,0xb
8000d172:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000d176:	18 4b       	or	r11,r12

8000d178 <__avr32_f64_sub_round>:
8000d178:	fc 17 80 00 	movh	r7,0x8000
8000d17c:	ed ba 00 00 	bld	r10,0x0
8000d180:	f7 b7 01 ff 	subne	r7,-1
8000d184:	0e 39       	cp.w	r9,r7
8000d186:	5f 29       	srhs	r9
8000d188:	12 0a       	add	r10,r9
8000d18a:	5c 0b       	acr	r11
8000d18c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d190 <__avr32_f64_sub_opL_subnormal>:
8000d190:	ab 79       	lsl	r9,0xb
8000d192:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000d196:	ab 78       	lsl	r8,0xb
8000d198:	f3 e8 10 0e 	or	lr,r9,r8
8000d19c:	f9 b6 01 01 	movne	r6,1
8000d1a0:	ee 0e 11 00 	rsub	lr,r7,0
8000d1a4:	f9 b7 00 01 	moveq	r7,1
8000d1a8:	ef bb 00 1f 	bst	r11,0x1f
8000d1ac:	f7 ea 10 0e 	or	lr,r11,r10
8000d1b0:	f9 b7 00 00 	moveq	r7,0
8000d1b4:	cb 0b       	rjmp	8000d114 <__avr32_f64_sub_opL_subnormal_done>

8000d1b6 <__avr32_f64_sub_opH_nan_or_inf>:
8000d1b6:	bf db       	cbr	r11,0x1f
8000d1b8:	f7 ea 10 0e 	or	lr,r11,r10
8000d1bc:	c0 81       	brne	8000d1cc <__avr32_f64_sub_return_nan>
8000d1be:	e0 46 07 ff 	cp.w	r6,2047
8000d1c2:	c0 50       	breq	8000d1cc <__avr32_f64_sub_return_nan>
8000d1c4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000d1c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d1cc <__avr32_f64_sub_return_nan>:
8000d1cc:	3f fa       	mov	r10,-1
8000d1ce:	3f fb       	mov	r11,-1
8000d1d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d1d4 <__avr32_f64_sub_subnormal_result>:
8000d1d4:	5c 37       	neg	r7
8000d1d6:	2f f7       	sub	r7,-1
8000d1d8:	f1 b7 04 c0 	satu	r7,0x6
8000d1dc:	e0 47 00 20 	cp.w	r7,32
8000d1e0:	c1 14       	brge	8000d202 <__avr32_f64_sub_subnormal_result+0x2e>
8000d1e2:	ee 08 11 20 	rsub	r8,r7,32
8000d1e6:	f4 08 09 49 	lsl	r9,r10,r8
8000d1ea:	5f 16       	srne	r6
8000d1ec:	f4 07 0a 4a 	lsr	r10,r10,r7
8000d1f0:	0c 4a       	or	r10,r6
8000d1f2:	f6 08 09 49 	lsl	r9,r11,r8
8000d1f6:	f5 e9 10 0a 	or	r10,r10,r9
8000d1fa:	f4 07 0a 4b 	lsr	r11,r10,r7
8000d1fe:	30 07       	mov	r7,0
8000d200:	cb 3b       	rjmp	8000d166 <__avr32_f64_sub_longnormalize_done>
8000d202:	ee 08 11 40 	rsub	r8,r7,64
8000d206:	f6 08 09 49 	lsl	r9,r11,r8
8000d20a:	14 49       	or	r9,r10
8000d20c:	5f 16       	srne	r6
8000d20e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000d212:	0c 4a       	or	r10,r6
8000d214:	30 0b       	mov	r11,0
8000d216:	30 07       	mov	r7,0
8000d218:	ca 7b       	rjmp	8000d166 <__avr32_f64_sub_longnormalize_done>
8000d21a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d21e <__avr32_f64_sub_longshift>:
8000d21e:	f1 b6 04 c0 	satu	r6,0x6
8000d222:	f0 0e 17 00 	moveq	lr,r8
8000d226:	c0 40       	breq	8000d22e <__avr32_f64_sub_longshift+0x10>
8000d228:	f2 05 09 4e 	lsl	lr,r9,r5
8000d22c:	10 4e       	or	lr,r8
8000d22e:	f2 06 0a 48 	lsr	r8,r9,r6
8000d232:	30 09       	mov	r9,0
8000d234:	58 0e       	cp.w	lr,0
8000d236:	5f 1e       	srne	lr
8000d238:	1c 48       	or	r8,lr
8000d23a:	c8 3b       	rjmp	8000d140 <__avr32_f64_sub_shift_done>

8000d23c <__avr32_f64_sub_longnormalize>:
8000d23c:	f4 06 12 00 	clz	r6,r10
8000d240:	f9 b7 03 00 	movlo	r7,0
8000d244:	f9 b6 03 00 	movlo	r6,0
8000d248:	f9 bc 03 00 	movlo	r12,0
8000d24c:	f7 b6 02 e0 	subhs	r6,-32
8000d250:	f4 06 09 4b 	lsl	r11,r10,r6
8000d254:	30 0a       	mov	r10,0
8000d256:	0c 17       	sub	r7,r6
8000d258:	fe 9a ff be 	brle	8000d1d4 <__avr32_f64_sub_subnormal_result>
8000d25c:	c8 5b       	rjmp	8000d166 <__avr32_f64_sub_longnormalize_done>
8000d25e:	d7 03       	nop

8000d260 <__avr32_f64_add_from_sub>:
8000d260:	ee 19 80 00 	eorh	r9,0x8000

8000d264 <__avr32_f64_add>:
8000d264:	f7 e9 20 0c 	eor	r12,r11,r9
8000d268:	fe 96 ff 2e 	brmi	8000d0c4 <__avr32_f64_sub_from_add>
8000d26c:	eb cd 40 e0 	pushm	r5-r7,lr
8000d270:	16 9c       	mov	r12,r11
8000d272:	e6 1c 80 00 	andh	r12,0x8000,COH
8000d276:	bf db       	cbr	r11,0x1f
8000d278:	bf d9       	cbr	r9,0x1f
8000d27a:	12 3b       	cp.w	r11,r9
8000d27c:	c0 72       	brcc	8000d28a <__avr32_f64_add+0x26>
8000d27e:	16 97       	mov	r7,r11
8000d280:	12 9b       	mov	r11,r9
8000d282:	0e 99       	mov	r9,r7
8000d284:	14 97       	mov	r7,r10
8000d286:	10 9a       	mov	r10,r8
8000d288:	0e 98       	mov	r8,r7
8000d28a:	30 0e       	mov	lr,0
8000d28c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000d290:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000d294:	b5 ab       	sbr	r11,0x14
8000d296:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000d29a:	c5 f0       	breq	8000d358 <__avr32_f64_add_op2_subnormal>
8000d29c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000d2a0:	b5 a9       	sbr	r9,0x14
8000d2a2:	e0 47 07 ff 	cp.w	r7,2047
8000d2a6:	c2 50       	breq	8000d2f0 <__avr32_f64_add_opH_nan_or_inf>
8000d2a8:	0e 26       	rsub	r6,r7
8000d2aa:	c0 f0       	breq	8000d2c8 <__avr32_f64_add_shift_done>
8000d2ac:	ec 05 11 20 	rsub	r5,r6,32
8000d2b0:	e0 46 00 20 	cp.w	r6,32
8000d2b4:	c3 52       	brcc	8000d31e <__avr32_f64_add_longshift>
8000d2b6:	f0 05 09 4e 	lsl	lr,r8,r5
8000d2ba:	f2 05 09 45 	lsl	r5,r9,r5
8000d2be:	f0 06 0a 48 	lsr	r8,r8,r6
8000d2c2:	f2 06 0a 49 	lsr	r9,r9,r6
8000d2c6:	0a 48       	or	r8,r5

8000d2c8 <__avr32_f64_add_shift_done>:
8000d2c8:	10 0a       	add	r10,r8
8000d2ca:	f6 09 00 4b 	adc	r11,r11,r9
8000d2ce:	ed bb 00 15 	bld	r11,0x15
8000d2d2:	c3 40       	breq	8000d33a <__avr32_f64_add_res_of>

8000d2d4 <__avr32_f64_add_res_of_done>:
8000d2d4:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000d2d8:	18 4b       	or	r11,r12

8000d2da <__avr32_f64_add_round>:
8000d2da:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000d2de:	18 4e       	or	lr,r12
8000d2e0:	ee 1e 80 00 	eorh	lr,0x8000
8000d2e4:	f1 be 04 20 	satu	lr,0x1
8000d2e8:	1c 0a       	add	r10,lr
8000d2ea:	5c 0b       	acr	r11
8000d2ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d2f0 <__avr32_f64_add_opH_nan_or_inf>:
8000d2f0:	b5 cb       	cbr	r11,0x14
8000d2f2:	f7 ea 10 0e 	or	lr,r11,r10
8000d2f6:	c1 01       	brne	8000d316 <__avr32_f64_add_return_nan>
8000d2f8:	e0 46 07 ff 	cp.w	r6,2047
8000d2fc:	c0 30       	breq	8000d302 <__avr32_f64_add_opL_nan_or_inf>
8000d2fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d302 <__avr32_f64_add_opL_nan_or_inf>:
8000d302:	b5 c9       	cbr	r9,0x14
8000d304:	f3 e8 10 0e 	or	lr,r9,r8
8000d308:	c0 71       	brne	8000d316 <__avr32_f64_add_return_nan>
8000d30a:	30 0a       	mov	r10,0
8000d30c:	fc 1b 7f f0 	movh	r11,0x7ff0
8000d310:	18 4b       	or	r11,r12
8000d312:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d316 <__avr32_f64_add_return_nan>:
8000d316:	3f fa       	mov	r10,-1
8000d318:	3f fb       	mov	r11,-1
8000d31a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d31e <__avr32_f64_add_longshift>:
8000d31e:	f1 b6 04 c0 	satu	r6,0x6
8000d322:	f0 0e 17 00 	moveq	lr,r8
8000d326:	c0 60       	breq	8000d332 <__avr32_f64_add_longshift+0x14>
8000d328:	f2 05 09 4e 	lsl	lr,r9,r5
8000d32c:	58 08       	cp.w	r8,0
8000d32e:	5f 18       	srne	r8
8000d330:	10 4e       	or	lr,r8
8000d332:	f2 06 0a 48 	lsr	r8,r9,r6
8000d336:	30 09       	mov	r9,0
8000d338:	cc 8b       	rjmp	8000d2c8 <__avr32_f64_add_shift_done>

8000d33a <__avr32_f64_add_res_of>:
8000d33a:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000d33e:	a1 9b       	lsr	r11,0x1
8000d340:	5d 0a       	ror	r10
8000d342:	5d 0e       	ror	lr
8000d344:	2f f7       	sub	r7,-1
8000d346:	e0 47 07 ff 	cp.w	r7,2047
8000d34a:	f9 ba 00 00 	moveq	r10,0
8000d34e:	f9 bb 00 00 	moveq	r11,0
8000d352:	f9 be 00 00 	moveq	lr,0
8000d356:	cb fb       	rjmp	8000d2d4 <__avr32_f64_add_res_of_done>

8000d358 <__avr32_f64_add_op2_subnormal>:
8000d358:	30 16       	mov	r6,1
8000d35a:	58 07       	cp.w	r7,0
8000d35c:	ca 31       	brne	8000d2a2 <__avr32_f64_add+0x3e>
8000d35e:	b5 cb       	cbr	r11,0x14
8000d360:	10 0a       	add	r10,r8
8000d362:	f6 09 00 4b 	adc	r11,r11,r9
8000d366:	18 4b       	or	r11,r12
8000d368:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000d36c <__avr32_f64_to_u32>:
8000d36c:	58 0b       	cp.w	r11,0
8000d36e:	5e 6d       	retmi	0

8000d370 <__avr32_f64_to_s32>:
8000d370:	f6 0c 15 01 	lsl	r12,r11,0x1
8000d374:	b5 9c       	lsr	r12,0x15
8000d376:	e0 2c 03 ff 	sub	r12,1023
8000d37a:	5e 3d       	retlo	0
8000d37c:	f8 0c 11 1f 	rsub	r12,r12,31
8000d380:	16 99       	mov	r9,r11
8000d382:	ab 7b       	lsl	r11,0xb
8000d384:	bf bb       	sbr	r11,0x1f
8000d386:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000d38a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000d38e:	a1 79       	lsl	r9,0x1
8000d390:	5e 2b       	reths	r11
8000d392:	5c 3b       	neg	r11
8000d394:	5e fb       	retal	r11

8000d396 <__avr32_u32_to_f64>:
8000d396:	f8 cb 00 00 	sub	r11,r12,0
8000d39a:	30 0c       	mov	r12,0
8000d39c:	c0 38       	rjmp	8000d3a2 <__avr32_s32_to_f64+0x4>

8000d39e <__avr32_s32_to_f64>:
8000d39e:	18 9b       	mov	r11,r12
8000d3a0:	5c 4b       	abs	r11
8000d3a2:	30 0a       	mov	r10,0
8000d3a4:	5e 0b       	reteq	r11
8000d3a6:	d4 01       	pushm	lr
8000d3a8:	e0 69 04 1e 	mov	r9,1054
8000d3ac:	f6 08 12 00 	clz	r8,r11
8000d3b0:	c1 70       	breq	8000d3de <__avr32_s32_to_f64+0x40>
8000d3b2:	c0 c3       	brcs	8000d3ca <__avr32_s32_to_f64+0x2c>
8000d3b4:	f0 0e 11 20 	rsub	lr,r8,32
8000d3b8:	f6 08 09 4b 	lsl	r11,r11,r8
8000d3bc:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000d3c0:	1c 4b       	or	r11,lr
8000d3c2:	f4 08 09 4a 	lsl	r10,r10,r8
8000d3c6:	10 19       	sub	r9,r8
8000d3c8:	c0 b8       	rjmp	8000d3de <__avr32_s32_to_f64+0x40>
8000d3ca:	f4 08 12 00 	clz	r8,r10
8000d3ce:	f9 b8 03 00 	movlo	r8,0
8000d3d2:	f7 b8 02 e0 	subhs	r8,-32
8000d3d6:	f4 08 09 4b 	lsl	r11,r10,r8
8000d3da:	30 0a       	mov	r10,0
8000d3dc:	10 19       	sub	r9,r8
8000d3de:	58 09       	cp.w	r9,0
8000d3e0:	e0 89 00 30 	brgt	8000d440 <__avr32_s32_to_f64+0xa2>
8000d3e4:	5c 39       	neg	r9
8000d3e6:	2f f9       	sub	r9,-1
8000d3e8:	e0 49 00 36 	cp.w	r9,54
8000d3ec:	c0 43       	brcs	8000d3f4 <__avr32_s32_to_f64+0x56>
8000d3ee:	30 0b       	mov	r11,0
8000d3f0:	30 0a       	mov	r10,0
8000d3f2:	c2 68       	rjmp	8000d43e <__avr32_s32_to_f64+0xa0>
8000d3f4:	2f 69       	sub	r9,-10
8000d3f6:	f2 08 11 20 	rsub	r8,r9,32
8000d3fa:	e0 49 00 20 	cp.w	r9,32
8000d3fe:	c0 b2       	brcc	8000d414 <__avr32_s32_to_f64+0x76>
8000d400:	f4 08 09 4e 	lsl	lr,r10,r8
8000d404:	f6 08 09 48 	lsl	r8,r11,r8
8000d408:	f4 09 0a 4a 	lsr	r10,r10,r9
8000d40c:	f6 09 0a 4b 	lsr	r11,r11,r9
8000d410:	10 4b       	or	r11,r8
8000d412:	c0 88       	rjmp	8000d422 <__avr32_s32_to_f64+0x84>
8000d414:	f6 08 09 4e 	lsl	lr,r11,r8
8000d418:	14 4e       	or	lr,r10
8000d41a:	16 9a       	mov	r10,r11
8000d41c:	30 0b       	mov	r11,0
8000d41e:	f4 09 0a 4a 	lsr	r10,r10,r9
8000d422:	ed ba 00 00 	bld	r10,0x0
8000d426:	c0 92       	brcc	8000d438 <__avr32_s32_to_f64+0x9a>
8000d428:	1c 7e       	tst	lr,lr
8000d42a:	c0 41       	brne	8000d432 <__avr32_s32_to_f64+0x94>
8000d42c:	ed ba 00 01 	bld	r10,0x1
8000d430:	c0 42       	brcc	8000d438 <__avr32_s32_to_f64+0x9a>
8000d432:	2f fa       	sub	r10,-1
8000d434:	f7 bb 02 ff 	subhs	r11,-1
8000d438:	5c fc       	rol	r12
8000d43a:	5d 0b       	ror	r11
8000d43c:	5d 0a       	ror	r10
8000d43e:	d8 02       	popm	pc
8000d440:	e0 68 03 ff 	mov	r8,1023
8000d444:	ed ba 00 0b 	bld	r10,0xb
8000d448:	f7 b8 00 ff 	subeq	r8,-1
8000d44c:	10 0a       	add	r10,r8
8000d44e:	5c 0b       	acr	r11
8000d450:	f7 b9 03 fe 	sublo	r9,-2
8000d454:	e0 49 07 ff 	cp.w	r9,2047
8000d458:	c0 55       	brlt	8000d462 <__avr32_s32_to_f64+0xc4>
8000d45a:	30 0a       	mov	r10,0
8000d45c:	fc 1b ff e0 	movh	r11,0xffe0
8000d460:	c0 c8       	rjmp	8000d478 <__floatsidf_return_op1>
8000d462:	ed bb 00 1f 	bld	r11,0x1f
8000d466:	f7 b9 01 01 	subne	r9,1
8000d46a:	ab 9a       	lsr	r10,0xb
8000d46c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000d470:	a1 7b       	lsl	r11,0x1
8000d472:	ab 9b       	lsr	r11,0xb
8000d474:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000d478 <__floatsidf_return_op1>:
8000d478:	a1 7c       	lsl	r12,0x1
8000d47a:	5d 0b       	ror	r11
8000d47c:	d8 02       	popm	pc

8000d47e <__avr32_f64_cmp_eq>:
8000d47e:	10 3a       	cp.w	r10,r8
8000d480:	f2 0b 13 00 	cpc	r11,r9
8000d484:	c0 80       	breq	8000d494 <__avr32_f64_cmp_eq+0x16>
8000d486:	a1 7b       	lsl	r11,0x1
8000d488:	a1 79       	lsl	r9,0x1
8000d48a:	14 4b       	or	r11,r10
8000d48c:	12 4b       	or	r11,r9
8000d48e:	10 4b       	or	r11,r8
8000d490:	5e 0f       	reteq	1
8000d492:	5e fd       	retal	0
8000d494:	a1 7b       	lsl	r11,0x1
8000d496:	fc 1c ff e0 	movh	r12,0xffe0
8000d49a:	58 0a       	cp.w	r10,0
8000d49c:	f8 0b 13 00 	cpc	r11,r12
8000d4a0:	5e 8f       	retls	1
8000d4a2:	5e fd       	retal	0

8000d4a4 <__avr32_f64_cmp_ge>:
8000d4a4:	1a de       	st.w	--sp,lr
8000d4a6:	1a d7       	st.w	--sp,r7
8000d4a8:	a1 7b       	lsl	r11,0x1
8000d4aa:	5f 3c       	srlo	r12
8000d4ac:	a1 79       	lsl	r9,0x1
8000d4ae:	5f 37       	srlo	r7
8000d4b0:	5c fc       	rol	r12
8000d4b2:	fc 1e ff e0 	movh	lr,0xffe0
8000d4b6:	58 0a       	cp.w	r10,0
8000d4b8:	fc 0b 13 00 	cpc	r11,lr
8000d4bc:	e0 8b 00 1d 	brhi	8000d4f6 <__avr32_f64_cmp_ge+0x52>
8000d4c0:	58 08       	cp.w	r8,0
8000d4c2:	fc 09 13 00 	cpc	r9,lr
8000d4c6:	e0 8b 00 18 	brhi	8000d4f6 <__avr32_f64_cmp_ge+0x52>
8000d4ca:	58 0b       	cp.w	r11,0
8000d4cc:	f5 ba 00 00 	subfeq	r10,0
8000d4d0:	c1 50       	breq	8000d4fa <__avr32_f64_cmp_ge+0x56>
8000d4d2:	1b 07       	ld.w	r7,sp++
8000d4d4:	1b 0e       	ld.w	lr,sp++
8000d4d6:	58 3c       	cp.w	r12,3
8000d4d8:	c0 a0       	breq	8000d4ec <__avr32_f64_cmp_ge+0x48>
8000d4da:	58 1c       	cp.w	r12,1
8000d4dc:	c0 33       	brcs	8000d4e2 <__avr32_f64_cmp_ge+0x3e>
8000d4de:	5e 0f       	reteq	1
8000d4e0:	5e 1d       	retne	0
8000d4e2:	10 3a       	cp.w	r10,r8
8000d4e4:	f2 0b 13 00 	cpc	r11,r9
8000d4e8:	5e 2f       	reths	1
8000d4ea:	5e 3d       	retlo	0
8000d4ec:	14 38       	cp.w	r8,r10
8000d4ee:	f6 09 13 00 	cpc	r9,r11
8000d4f2:	5e 2f       	reths	1
8000d4f4:	5e 3d       	retlo	0
8000d4f6:	1b 07       	ld.w	r7,sp++
8000d4f8:	d8 0a       	popm	pc,r12=0
8000d4fa:	58 17       	cp.w	r7,1
8000d4fc:	5f 0c       	sreq	r12
8000d4fe:	58 09       	cp.w	r9,0
8000d500:	f5 b8 00 00 	subfeq	r8,0
8000d504:	1b 07       	ld.w	r7,sp++
8000d506:	1b 0e       	ld.w	lr,sp++
8000d508:	5e 0f       	reteq	1
8000d50a:	5e fc       	retal	r12

8000d50c <__avr32_f64_cmp_lt>:
8000d50c:	1a de       	st.w	--sp,lr
8000d50e:	1a d7       	st.w	--sp,r7
8000d510:	a1 7b       	lsl	r11,0x1
8000d512:	5f 3c       	srlo	r12
8000d514:	a1 79       	lsl	r9,0x1
8000d516:	5f 37       	srlo	r7
8000d518:	5c fc       	rol	r12
8000d51a:	fc 1e ff e0 	movh	lr,0xffe0
8000d51e:	58 0a       	cp.w	r10,0
8000d520:	fc 0b 13 00 	cpc	r11,lr
8000d524:	e0 8b 00 1d 	brhi	8000d55e <__avr32_f64_cmp_lt+0x52>
8000d528:	58 08       	cp.w	r8,0
8000d52a:	fc 09 13 00 	cpc	r9,lr
8000d52e:	e0 8b 00 18 	brhi	8000d55e <__avr32_f64_cmp_lt+0x52>
8000d532:	58 0b       	cp.w	r11,0
8000d534:	f5 ba 00 00 	subfeq	r10,0
8000d538:	c1 50       	breq	8000d562 <__avr32_f64_cmp_lt+0x56>
8000d53a:	1b 07       	ld.w	r7,sp++
8000d53c:	1b 0e       	ld.w	lr,sp++
8000d53e:	58 3c       	cp.w	r12,3
8000d540:	c0 a0       	breq	8000d554 <__avr32_f64_cmp_lt+0x48>
8000d542:	58 1c       	cp.w	r12,1
8000d544:	c0 33       	brcs	8000d54a <__avr32_f64_cmp_lt+0x3e>
8000d546:	5e 0d       	reteq	0
8000d548:	5e 1f       	retne	1
8000d54a:	10 3a       	cp.w	r10,r8
8000d54c:	f2 0b 13 00 	cpc	r11,r9
8000d550:	5e 2d       	reths	0
8000d552:	5e 3f       	retlo	1
8000d554:	14 38       	cp.w	r8,r10
8000d556:	f6 09 13 00 	cpc	r9,r11
8000d55a:	5e 2d       	reths	0
8000d55c:	5e 3f       	retlo	1
8000d55e:	1b 07       	ld.w	r7,sp++
8000d560:	d8 0a       	popm	pc,r12=0
8000d562:	58 17       	cp.w	r7,1
8000d564:	5f 1c       	srne	r12
8000d566:	58 09       	cp.w	r9,0
8000d568:	f5 b8 00 00 	subfeq	r8,0
8000d56c:	1b 07       	ld.w	r7,sp++
8000d56e:	1b 0e       	ld.w	lr,sp++
8000d570:	5e 0d       	reteq	0
8000d572:	5e fc       	retal	r12

8000d574 <__avr32_f64_div>:
8000d574:	eb cd 40 ff 	pushm	r0-r7,lr
8000d578:	f7 e9 20 0e 	eor	lr,r11,r9
8000d57c:	f6 07 16 14 	lsr	r7,r11,0x14
8000d580:	a9 7b       	lsl	r11,0x9
8000d582:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000d586:	a9 7a       	lsl	r10,0x9
8000d588:	bd bb       	sbr	r11,0x1d
8000d58a:	e4 1b 3f ff 	andh	r11,0x3fff
8000d58e:	ab d7       	cbr	r7,0xb
8000d590:	e0 80 00 cc 	breq	8000d728 <__avr32_f64_div_round_subnormal+0x54>
8000d594:	e0 47 07 ff 	cp.w	r7,2047
8000d598:	e0 84 00 b5 	brge	8000d702 <__avr32_f64_div_round_subnormal+0x2e>
8000d59c:	f2 06 16 14 	lsr	r6,r9,0x14
8000d5a0:	a9 79       	lsl	r9,0x9
8000d5a2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000d5a6:	a9 78       	lsl	r8,0x9
8000d5a8:	bd b9       	sbr	r9,0x1d
8000d5aa:	e4 19 3f ff 	andh	r9,0x3fff
8000d5ae:	ab d6       	cbr	r6,0xb
8000d5b0:	e0 80 00 e2 	breq	8000d774 <__avr32_f64_div_round_subnormal+0xa0>
8000d5b4:	e0 46 07 ff 	cp.w	r6,2047
8000d5b8:	e0 84 00 b2 	brge	8000d71c <__avr32_f64_div_round_subnormal+0x48>
8000d5bc:	0c 17       	sub	r7,r6
8000d5be:	fe 37 fc 01 	sub	r7,-1023
8000d5c2:	fc 1c 80 00 	movh	r12,0x8000
8000d5c6:	f8 03 16 01 	lsr	r3,r12,0x1
8000d5ca:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000d5ce:	5c d4       	com	r4
8000d5d0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000d5d4:	e6 09 06 44 	mulu.d	r4,r3,r9
8000d5d8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000d5dc:	e6 05 06 44 	mulu.d	r4,r3,r5
8000d5e0:	ea 03 15 02 	lsl	r3,r5,0x2
8000d5e4:	e6 09 06 44 	mulu.d	r4,r3,r9
8000d5e8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000d5ec:	e6 05 06 44 	mulu.d	r4,r3,r5
8000d5f0:	ea 03 15 02 	lsl	r3,r5,0x2
8000d5f4:	e6 09 06 44 	mulu.d	r4,r3,r9
8000d5f8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000d5fc:	e6 05 06 44 	mulu.d	r4,r3,r5
8000d600:	ea 03 15 02 	lsl	r3,r5,0x2
8000d604:	e6 08 06 40 	mulu.d	r0,r3,r8
8000d608:	e4 09 07 40 	macu.d	r0,r2,r9
8000d60c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000d610:	02 04       	add	r4,r1
8000d612:	5c 05       	acr	r5
8000d614:	a3 65       	lsl	r5,0x2
8000d616:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000d61a:	a3 64       	lsl	r4,0x2
8000d61c:	5c 34       	neg	r4
8000d61e:	f8 05 01 45 	sbc	r5,r12,r5
8000d622:	e6 04 06 40 	mulu.d	r0,r3,r4
8000d626:	e4 05 07 40 	macu.d	r0,r2,r5
8000d62a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000d62e:	02 04       	add	r4,r1
8000d630:	5c 05       	acr	r5
8000d632:	ea 03 15 02 	lsl	r3,r5,0x2
8000d636:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000d63a:	e8 02 15 02 	lsl	r2,r4,0x2
8000d63e:	e6 08 06 40 	mulu.d	r0,r3,r8
8000d642:	e4 09 07 40 	macu.d	r0,r2,r9
8000d646:	e6 09 06 44 	mulu.d	r4,r3,r9
8000d64a:	02 04       	add	r4,r1
8000d64c:	5c 05       	acr	r5
8000d64e:	a3 65       	lsl	r5,0x2
8000d650:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000d654:	a3 64       	lsl	r4,0x2
8000d656:	5c 34       	neg	r4
8000d658:	f8 05 01 45 	sbc	r5,r12,r5
8000d65c:	e6 04 06 40 	mulu.d	r0,r3,r4
8000d660:	e4 05 07 40 	macu.d	r0,r2,r5
8000d664:	e6 05 06 44 	mulu.d	r4,r3,r5
8000d668:	02 04       	add	r4,r1
8000d66a:	5c 05       	acr	r5
8000d66c:	ea 03 15 02 	lsl	r3,r5,0x2
8000d670:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000d674:	e8 02 15 02 	lsl	r2,r4,0x2
8000d678:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000d67c:	e4 0b 07 40 	macu.d	r0,r2,r11
8000d680:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000d684:	02 02       	add	r2,r1
8000d686:	5c 03       	acr	r3
8000d688:	ed b3 00 1c 	bld	r3,0x1c
8000d68c:	c0 90       	breq	8000d69e <__avr32_f64_div+0x12a>
8000d68e:	a1 72       	lsl	r2,0x1
8000d690:	5c f3       	rol	r3
8000d692:	20 17       	sub	r7,1
8000d694:	a3 9a       	lsr	r10,0x3
8000d696:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000d69a:	a3 9b       	lsr	r11,0x3
8000d69c:	c0 58       	rjmp	8000d6a6 <__avr32_f64_div+0x132>
8000d69e:	a5 8a       	lsr	r10,0x4
8000d6a0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000d6a4:	a5 8b       	lsr	r11,0x4
8000d6a6:	58 07       	cp.w	r7,0
8000d6a8:	e0 8a 00 8b 	brle	8000d7be <__avr32_f64_div_res_subnormal>
8000d6ac:	e0 12 ff 00 	andl	r2,0xff00
8000d6b0:	e8 12 00 80 	orl	r2,0x80
8000d6b4:	e6 08 06 40 	mulu.d	r0,r3,r8
8000d6b8:	e4 09 07 40 	macu.d	r0,r2,r9
8000d6bc:	e4 08 06 44 	mulu.d	r4,r2,r8
8000d6c0:	e6 09 06 48 	mulu.d	r8,r3,r9
8000d6c4:	00 05       	add	r5,r0
8000d6c6:	f0 01 00 48 	adc	r8,r8,r1
8000d6ca:	5c 09       	acr	r9
8000d6cc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000d6d0:	58 04       	cp.w	r4,0
8000d6d2:	5c 25       	cpc	r5

8000d6d4 <__avr32_f64_div_round_subnormal>:
8000d6d4:	f4 08 13 00 	cpc	r8,r10
8000d6d8:	f6 09 13 00 	cpc	r9,r11
8000d6dc:	5f 36       	srlo	r6
8000d6de:	f8 06 17 00 	moveq	r6,r12
8000d6e2:	e4 0a 16 08 	lsr	r10,r2,0x8
8000d6e6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000d6ea:	e6 0b 16 08 	lsr	r11,r3,0x8
8000d6ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000d6f2:	ed be 00 1f 	bld	lr,0x1f
8000d6f6:	ef bb 00 1f 	bst	r11,0x1f
8000d6fa:	0c 0a       	add	r10,r6
8000d6fc:	5c 0b       	acr	r11
8000d6fe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000d702:	e4 1b 00 0f 	andh	r11,0xf
8000d706:	14 4b       	or	r11,r10
8000d708:	e0 81 00 a7 	brne	8000d856 <__avr32_f64_div_res_subnormal+0x98>
8000d70c:	f2 06 16 14 	lsr	r6,r9,0x14
8000d710:	ab d6       	cbr	r6,0xb
8000d712:	e0 46 07 ff 	cp.w	r6,2047
8000d716:	e0 81 00 a4 	brne	8000d85e <__avr32_f64_div_res_subnormal+0xa0>
8000d71a:	c9 e8       	rjmp	8000d856 <__avr32_f64_div_res_subnormal+0x98>
8000d71c:	e4 19 00 0f 	andh	r9,0xf
8000d720:	10 49       	or	r9,r8
8000d722:	e0 81 00 9a 	brne	8000d856 <__avr32_f64_div_res_subnormal+0x98>
8000d726:	c9 28       	rjmp	8000d84a <__avr32_f64_div_res_subnormal+0x8c>
8000d728:	a3 7b       	lsl	r11,0x3
8000d72a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000d72e:	a3 7a       	lsl	r10,0x3
8000d730:	f5 eb 10 04 	or	r4,r10,r11
8000d734:	e0 80 00 a0 	breq	8000d874 <__avr32_f64_div_op1_zero>
8000d738:	f6 04 12 00 	clz	r4,r11
8000d73c:	c1 70       	breq	8000d76a <__avr32_f64_div_round_subnormal+0x96>
8000d73e:	c0 c3       	brcs	8000d756 <__avr32_f64_div_round_subnormal+0x82>
8000d740:	e8 05 11 20 	rsub	r5,r4,32
8000d744:	f6 04 09 4b 	lsl	r11,r11,r4
8000d748:	f4 05 0a 45 	lsr	r5,r10,r5
8000d74c:	0a 4b       	or	r11,r5
8000d74e:	f4 04 09 4a 	lsl	r10,r10,r4
8000d752:	08 17       	sub	r7,r4
8000d754:	c0 b8       	rjmp	8000d76a <__avr32_f64_div_round_subnormal+0x96>
8000d756:	f4 04 12 00 	clz	r4,r10
8000d75a:	f9 b4 03 00 	movlo	r4,0
8000d75e:	f7 b4 02 e0 	subhs	r4,-32
8000d762:	f4 04 09 4b 	lsl	r11,r10,r4
8000d766:	30 0a       	mov	r10,0
8000d768:	08 17       	sub	r7,r4
8000d76a:	a3 8a       	lsr	r10,0x2
8000d76c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000d770:	a3 8b       	lsr	r11,0x2
8000d772:	c1 1b       	rjmp	8000d594 <__avr32_f64_div+0x20>
8000d774:	a3 79       	lsl	r9,0x3
8000d776:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000d77a:	a3 78       	lsl	r8,0x3
8000d77c:	f3 e8 10 04 	or	r4,r9,r8
8000d780:	c6 f0       	breq	8000d85e <__avr32_f64_div_res_subnormal+0xa0>
8000d782:	f2 04 12 00 	clz	r4,r9
8000d786:	c1 70       	breq	8000d7b4 <__avr32_f64_div_round_subnormal+0xe0>
8000d788:	c0 c3       	brcs	8000d7a0 <__avr32_f64_div_round_subnormal+0xcc>
8000d78a:	e8 05 11 20 	rsub	r5,r4,32
8000d78e:	f2 04 09 49 	lsl	r9,r9,r4
8000d792:	f0 05 0a 45 	lsr	r5,r8,r5
8000d796:	0a 49       	or	r9,r5
8000d798:	f0 04 09 48 	lsl	r8,r8,r4
8000d79c:	08 16       	sub	r6,r4
8000d79e:	c0 b8       	rjmp	8000d7b4 <__avr32_f64_div_round_subnormal+0xe0>
8000d7a0:	f0 04 12 00 	clz	r4,r8
8000d7a4:	f9 b4 03 00 	movlo	r4,0
8000d7a8:	f7 b4 02 e0 	subhs	r4,-32
8000d7ac:	f0 04 09 49 	lsl	r9,r8,r4
8000d7b0:	30 08       	mov	r8,0
8000d7b2:	08 16       	sub	r6,r4
8000d7b4:	a3 88       	lsr	r8,0x2
8000d7b6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000d7ba:	a3 89       	lsr	r9,0x2
8000d7bc:	cf ca       	rjmp	8000d5b4 <__avr32_f64_div+0x40>

8000d7be <__avr32_f64_div_res_subnormal>:
8000d7be:	5c 37       	neg	r7
8000d7c0:	2f f7       	sub	r7,-1
8000d7c2:	f1 b7 04 c0 	satu	r7,0x6
8000d7c6:	e0 47 00 20 	cp.w	r7,32
8000d7ca:	c1 54       	brge	8000d7f4 <__avr32_f64_div_res_subnormal+0x36>
8000d7cc:	ee 06 11 20 	rsub	r6,r7,32
8000d7d0:	e4 07 0a 42 	lsr	r2,r2,r7
8000d7d4:	e6 06 09 4c 	lsl	r12,r3,r6
8000d7d8:	18 42       	or	r2,r12
8000d7da:	e6 07 0a 43 	lsr	r3,r3,r7
8000d7de:	f4 06 09 41 	lsl	r1,r10,r6
8000d7e2:	f4 07 0a 4a 	lsr	r10,r10,r7
8000d7e6:	f6 06 09 4c 	lsl	r12,r11,r6
8000d7ea:	18 4a       	or	r10,r12
8000d7ec:	f6 07 0a 4b 	lsr	r11,r11,r7
8000d7f0:	30 00       	mov	r0,0
8000d7f2:	c1 58       	rjmp	8000d81c <__avr32_f64_div_res_subnormal+0x5e>
8000d7f4:	ee 06 11 20 	rsub	r6,r7,32
8000d7f8:	f9 b0 00 00 	moveq	r0,0
8000d7fc:	f9 bc 00 00 	moveq	r12,0
8000d800:	c0 50       	breq	8000d80a <__avr32_f64_div_res_subnormal+0x4c>
8000d802:	f4 06 09 40 	lsl	r0,r10,r6
8000d806:	f6 06 09 4c 	lsl	r12,r11,r6
8000d80a:	e6 07 0a 42 	lsr	r2,r3,r7
8000d80e:	30 03       	mov	r3,0
8000d810:	f4 07 0a 41 	lsr	r1,r10,r7
8000d814:	18 41       	or	r1,r12
8000d816:	f6 07 0a 4a 	lsr	r10,r11,r7
8000d81a:	30 0b       	mov	r11,0
8000d81c:	e0 12 ff 00 	andl	r2,0xff00
8000d820:	e8 12 00 80 	orl	r2,0x80
8000d824:	e6 08 06 46 	mulu.d	r6,r3,r8
8000d828:	e4 09 07 46 	macu.d	r6,r2,r9
8000d82c:	e4 08 06 44 	mulu.d	r4,r2,r8
8000d830:	e6 09 06 48 	mulu.d	r8,r3,r9
8000d834:	0c 05       	add	r5,r6
8000d836:	f0 07 00 48 	adc	r8,r8,r7
8000d83a:	5c 09       	acr	r9
8000d83c:	30 07       	mov	r7,0
8000d83e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000d842:	00 34       	cp.w	r4,r0
8000d844:	e2 05 13 00 	cpc	r5,r1
8000d848:	c4 6b       	rjmp	8000d6d4 <__avr32_f64_div_round_subnormal>
8000d84a:	1c 9b       	mov	r11,lr
8000d84c:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d850:	30 0a       	mov	r10,0
8000d852:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000d856:	3f fb       	mov	r11,-1
8000d858:	30 0a       	mov	r10,0
8000d85a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000d85e:	f5 eb 10 04 	or	r4,r10,r11
8000d862:	c0 90       	breq	8000d874 <__avr32_f64_div_op1_zero>
8000d864:	1c 9b       	mov	r11,lr
8000d866:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d86a:	ea 1b 7f f0 	orh	r11,0x7ff0
8000d86e:	30 0a       	mov	r10,0
8000d870:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000d874 <__avr32_f64_div_op1_zero>:
8000d874:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000d878:	ce f0       	breq	8000d856 <__avr32_f64_div_res_subnormal+0x98>
8000d87a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000d87e:	e0 44 07 ff 	cp.w	r4,2047
8000d882:	ce 41       	brne	8000d84a <__avr32_f64_div_res_subnormal+0x8c>
8000d884:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000d888:	ce 10       	breq	8000d84a <__avr32_f64_div_res_subnormal+0x8c>
8000d88a:	ce 6b       	rjmp	8000d856 <__avr32_f64_div_res_subnormal+0x98>

8000d88c <__avr32_udiv64>:
8000d88c:	d4 31       	pushm	r0-r7,lr
8000d88e:	1a 97       	mov	r7,sp
8000d890:	20 2d       	sub	sp,8
8000d892:	10 9e       	mov	lr,r8
8000d894:	12 95       	mov	r5,r9
8000d896:	14 96       	mov	r6,r10
8000d898:	58 09       	cp.w	r9,0
8000d89a:	c4 91       	brne	8000d92c <__avr32_udiv64+0xa0>
8000d89c:	16 38       	cp.w	r8,r11
8000d89e:	e0 88 00 57 	brls	8000d94c <__avr32_udiv64+0xc0>
8000d8a2:	f0 08 12 00 	clz	r8,r8
8000d8a6:	c0 d0       	breq	8000d8c0 <__avr32_udiv64+0x34>
8000d8a8:	f6 08 09 4b 	lsl	r11,r11,r8
8000d8ac:	f0 09 11 20 	rsub	r9,r8,32
8000d8b0:	fc 08 09 4e 	lsl	lr,lr,r8
8000d8b4:	f4 09 0a 49 	lsr	r9,r10,r9
8000d8b8:	f4 08 09 46 	lsl	r6,r10,r8
8000d8bc:	f3 eb 10 0b 	or	r11,r9,r11
8000d8c0:	fc 05 16 10 	lsr	r5,lr,0x10
8000d8c4:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000d8c8:	f6 05 0d 0a 	divu	r10,r11,r5
8000d8cc:	ec 08 16 10 	lsr	r8,r6,0x10
8000d8d0:	14 99       	mov	r9,r10
8000d8d2:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000d8d6:	b9 3a       	mul	r10,r12
8000d8d8:	10 3a       	cp.w	r10,r8
8000d8da:	e0 88 00 0c 	brls	8000d8f2 <__avr32_udiv64+0x66>
8000d8de:	20 19       	sub	r9,1
8000d8e0:	1c 08       	add	r8,lr
8000d8e2:	10 3e       	cp.w	lr,r8
8000d8e4:	e0 8b 00 07 	brhi	8000d8f2 <__avr32_udiv64+0x66>
8000d8e8:	10 3a       	cp.w	r10,r8
8000d8ea:	f7 b9 0b 01 	subhi	r9,1
8000d8ee:	f1 de eb 08 	addhi	r8,r8,lr
8000d8f2:	f0 0a 01 0b 	sub	r11,r8,r10
8000d8f6:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000d8fa:	f6 05 0d 0a 	divu	r10,r11,r5
8000d8fe:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000d902:	14 98       	mov	r8,r10
8000d904:	f4 0c 02 4c 	mul	r12,r10,r12
8000d908:	0c 3c       	cp.w	r12,r6
8000d90a:	e0 88 00 0a 	brls	8000d91e <__avr32_udiv64+0x92>
8000d90e:	20 18       	sub	r8,1
8000d910:	1c 06       	add	r6,lr
8000d912:	0c 3e       	cp.w	lr,r6
8000d914:	e0 8b 00 05 	brhi	8000d91e <__avr32_udiv64+0x92>
8000d918:	0c 3c       	cp.w	r12,r6
8000d91a:	f7 b8 0b 01 	subhi	r8,1
8000d91e:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000d922:	30 0c       	mov	r12,0
8000d924:	16 9a       	mov	r10,r11
8000d926:	18 9b       	mov	r11,r12
8000d928:	2f ed       	sub	sp,-8
8000d92a:	d8 32       	popm	r0-r7,pc
8000d92c:	16 39       	cp.w	r9,r11
8000d92e:	e0 8b 00 51 	brhi	8000d9d0 <__avr32_udiv64+0x144>
8000d932:	f2 0c 12 00 	clz	r12,r9
8000d936:	c5 31       	brne	8000d9dc <__avr32_udiv64+0x150>
8000d938:	14 38       	cp.w	r8,r10
8000d93a:	5f 89       	srls	r9
8000d93c:	16 35       	cp.w	r5,r11
8000d93e:	5f 38       	srlo	r8
8000d940:	10 49       	or	r9,r8
8000d942:	f8 09 18 00 	cp.b	r9,r12
8000d946:	c4 50       	breq	8000d9d0 <__avr32_udiv64+0x144>
8000d948:	30 1b       	mov	r11,1
8000d94a:	c4 58       	rjmp	8000d9d4 <__avr32_udiv64+0x148>
8000d94c:	58 08       	cp.w	r8,0
8000d94e:	c0 51       	brne	8000d958 <__avr32_udiv64+0xcc>
8000d950:	30 19       	mov	r9,1
8000d952:	f2 08 0d 08 	divu	r8,r9,r8
8000d956:	10 9e       	mov	lr,r8
8000d958:	fc 08 12 00 	clz	r8,lr
8000d95c:	e0 81 00 91 	brne	8000da7e <__avr32_udiv64+0x1f2>
8000d960:	1c 1b       	sub	r11,lr
8000d962:	fc 05 16 10 	lsr	r5,lr,0x10
8000d966:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000d96a:	30 1c       	mov	r12,1
8000d96c:	f6 05 0d 0a 	divu	r10,r11,r5
8000d970:	ec 08 16 10 	lsr	r8,r6,0x10
8000d974:	f4 09 02 43 	mul	r3,r10,r9
8000d978:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000d97c:	14 9b       	mov	r11,r10
8000d97e:	10 33       	cp.w	r3,r8
8000d980:	e0 88 00 0c 	brls	8000d998 <__avr32_udiv64+0x10c>
8000d984:	20 1b       	sub	r11,1
8000d986:	1c 08       	add	r8,lr
8000d988:	10 3e       	cp.w	lr,r8
8000d98a:	e0 8b 00 07 	brhi	8000d998 <__avr32_udiv64+0x10c>
8000d98e:	10 33       	cp.w	r3,r8
8000d990:	f7 bb 0b 01 	subhi	r11,1
8000d994:	f1 de eb 08 	addhi	r8,r8,lr
8000d998:	f0 03 01 03 	sub	r3,r8,r3
8000d99c:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000d9a0:	e6 05 0d 02 	divu	r2,r3,r5
8000d9a4:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000d9a8:	04 98       	mov	r8,r2
8000d9aa:	e4 09 02 49 	mul	r9,r2,r9
8000d9ae:	0c 39       	cp.w	r9,r6
8000d9b0:	e0 88 00 0a 	brls	8000d9c4 <__avr32_udiv64+0x138>
8000d9b4:	20 18       	sub	r8,1
8000d9b6:	1c 06       	add	r6,lr
8000d9b8:	0c 3e       	cp.w	lr,r6
8000d9ba:	e0 8b 00 05 	brhi	8000d9c4 <__avr32_udiv64+0x138>
8000d9be:	0c 39       	cp.w	r9,r6
8000d9c0:	f7 b8 0b 01 	subhi	r8,1
8000d9c4:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000d9c8:	16 9a       	mov	r10,r11
8000d9ca:	18 9b       	mov	r11,r12
8000d9cc:	2f ed       	sub	sp,-8
8000d9ce:	d8 32       	popm	r0-r7,pc
8000d9d0:	30 0b       	mov	r11,0
8000d9d2:	16 9c       	mov	r12,r11
8000d9d4:	16 9a       	mov	r10,r11
8000d9d6:	18 9b       	mov	r11,r12
8000d9d8:	2f ed       	sub	sp,-8
8000d9da:	d8 32       	popm	r0-r7,pc
8000d9dc:	f2 0c 09 45 	lsl	r5,r9,r12
8000d9e0:	f8 0e 11 20 	rsub	lr,r12,32
8000d9e4:	f0 0c 09 43 	lsl	r3,r8,r12
8000d9e8:	f4 0e 0a 46 	lsr	r6,r10,lr
8000d9ec:	f0 0e 0a 48 	lsr	r8,r8,lr
8000d9f0:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000d9f4:	0a 48       	or	r8,r5
8000d9f6:	f0 01 16 10 	lsr	r1,r8,0x10
8000d9fa:	fc 01 0d 04 	divu	r4,lr,r1
8000d9fe:	ee e5 ff f8 	st.d	r7[-8],r4
8000da02:	f6 0c 09 49 	lsl	r9,r11,r12
8000da06:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000da0a:	ed e9 10 09 	or	r9,r6,r9
8000da0e:	08 96       	mov	r6,r4
8000da10:	f2 0e 16 10 	lsr	lr,r9,0x10
8000da14:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000da18:	ec 05 02 4b 	mul	r11,r6,r5
8000da1c:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000da20:	1c 3b       	cp.w	r11,lr
8000da22:	e0 88 00 07 	brls	8000da30 <__avr32_udiv64+0x1a4>
8000da26:	20 16       	sub	r6,1
8000da28:	10 0e       	add	lr,r8
8000da2a:	1c 38       	cp.w	r8,lr
8000da2c:	e0 88 00 6d 	brls	8000db06 <__avr32_udiv64+0x27a>
8000da30:	16 1e       	sub	lr,r11
8000da32:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000da36:	fc 01 0d 00 	divu	r0,lr,r1
8000da3a:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000da3e:	00 9b       	mov	r11,r0
8000da40:	e0 05 02 4e 	mul	lr,r0,r5
8000da44:	12 3e       	cp.w	lr,r9
8000da46:	e0 88 00 07 	brls	8000da54 <__avr32_udiv64+0x1c8>
8000da4a:	20 1b       	sub	r11,1
8000da4c:	10 09       	add	r9,r8
8000da4e:	12 38       	cp.w	r8,r9
8000da50:	e0 88 00 55 	brls	8000dafa <__avr32_udiv64+0x26e>
8000da54:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000da58:	1c 19       	sub	r9,lr
8000da5a:	f6 03 06 42 	mulu.d	r2,r11,r3
8000da5e:	06 39       	cp.w	r9,r3
8000da60:	c0 93       	brcs	8000da72 <__avr32_udiv64+0x1e6>
8000da62:	5f 09       	sreq	r9
8000da64:	f4 0c 09 4c 	lsl	r12,r10,r12
8000da68:	04 3c       	cp.w	r12,r2
8000da6a:	5f 38       	srlo	r8
8000da6c:	f3 e8 00 08 	and	r8,r9,r8
8000da70:	c0 20       	breq	8000da74 <__avr32_udiv64+0x1e8>
8000da72:	20 1b       	sub	r11,1
8000da74:	30 0c       	mov	r12,0
8000da76:	16 9a       	mov	r10,r11
8000da78:	18 9b       	mov	r11,r12
8000da7a:	2f ed       	sub	sp,-8
8000da7c:	d8 32       	popm	r0-r7,pc
8000da7e:	f6 08 09 49 	lsl	r9,r11,r8
8000da82:	fc 08 09 4e 	lsl	lr,lr,r8
8000da86:	f0 01 11 20 	rsub	r1,r8,32
8000da8a:	fc 05 16 10 	lsr	r5,lr,0x10
8000da8e:	f4 01 0a 42 	lsr	r2,r10,r1
8000da92:	f6 01 0a 41 	lsr	r1,r11,r1
8000da96:	12 42       	or	r2,r9
8000da98:	e2 05 0d 00 	divu	r0,r1,r5
8000da9c:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000daa0:	e4 06 16 10 	lsr	r6,r2,0x10
8000daa4:	00 93       	mov	r3,r0
8000daa6:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000daaa:	e0 09 02 4c 	mul	r12,r0,r9
8000daae:	0c 3c       	cp.w	r12,r6
8000dab0:	e0 88 00 07 	brls	8000dabe <__avr32_udiv64+0x232>
8000dab4:	20 13       	sub	r3,1
8000dab6:	1c 06       	add	r6,lr
8000dab8:	0c 3e       	cp.w	lr,r6
8000daba:	e0 88 00 2c 	brls	8000db12 <__avr32_udiv64+0x286>
8000dabe:	ec 0c 01 01 	sub	r1,r6,r12
8000dac2:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000dac6:	e2 05 0d 00 	divu	r0,r1,r5
8000daca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000dace:	00 9c       	mov	r12,r0
8000dad0:	e0 09 02 41 	mul	r1,r0,r9
8000dad4:	16 31       	cp.w	r1,r11
8000dad6:	e0 88 00 0c 	brls	8000daee <__avr32_udiv64+0x262>
8000dada:	20 1c       	sub	r12,1
8000dadc:	1c 0b       	add	r11,lr
8000dade:	16 3e       	cp.w	lr,r11
8000dae0:	e0 8b 00 07 	brhi	8000daee <__avr32_udiv64+0x262>
8000dae4:	16 31       	cp.w	r1,r11
8000dae6:	f7 bc 0b 01 	subhi	r12,1
8000daea:	f7 de eb 0b 	addhi	r11,r11,lr
8000daee:	f4 08 09 46 	lsl	r6,r10,r8
8000daf2:	02 1b       	sub	r11,r1
8000daf4:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000daf8:	c3 ab       	rjmp	8000d96c <__avr32_udiv64+0xe0>
8000dafa:	12 3e       	cp.w	lr,r9
8000dafc:	f3 d8 eb 09 	addhi	r9,r9,r8
8000db00:	f7 bb 0b 01 	subhi	r11,1
8000db04:	ca 8b       	rjmp	8000da54 <__avr32_udiv64+0x1c8>
8000db06:	1c 3b       	cp.w	r11,lr
8000db08:	f7 b6 0b 01 	subhi	r6,1
8000db0c:	fd d8 eb 0e 	addhi	lr,lr,r8
8000db10:	c9 0b       	rjmp	8000da30 <__avr32_udiv64+0x1a4>
8000db12:	0c 3c       	cp.w	r12,r6
8000db14:	f7 b3 0b 01 	subhi	r3,1
8000db18:	ed de eb 06 	addhi	r6,r6,lr
8000db1c:	cd 1b       	rjmp	8000dabe <__avr32_udiv64+0x232>

8000db1e <__avr32_umod64>:
8000db1e:	d4 31       	pushm	r0-r7,lr
8000db20:	1a 97       	mov	r7,sp
8000db22:	20 2d       	sub	sp,8
8000db24:	10 9c       	mov	r12,r8
8000db26:	12 95       	mov	r5,r9
8000db28:	14 9e       	mov	lr,r10
8000db2a:	16 93       	mov	r3,r11
8000db2c:	16 96       	mov	r6,r11
8000db2e:	58 09       	cp.w	r9,0
8000db30:	c4 41       	brne	8000dbb8 <__avr32_umod64+0x9a>
8000db32:	16 38       	cp.w	r8,r11
8000db34:	e0 88 00 5a 	brls	8000dbe8 <__avr32_umod64+0xca>
8000db38:	f0 08 12 00 	clz	r8,r8
8000db3c:	c0 d0       	breq	8000db56 <__avr32_umod64+0x38>
8000db3e:	f6 08 09 46 	lsl	r6,r11,r8
8000db42:	f8 08 09 4c 	lsl	r12,r12,r8
8000db46:	f0 0b 11 20 	rsub	r11,r8,32
8000db4a:	f4 08 09 4e 	lsl	lr,r10,r8
8000db4e:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000db52:	f7 e6 10 06 	or	r6,r11,r6
8000db56:	f8 0a 16 10 	lsr	r10,r12,0x10
8000db5a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000db5e:	ec 0a 0d 02 	divu	r2,r6,r10
8000db62:	fc 09 16 10 	lsr	r9,lr,0x10
8000db66:	ea 02 02 4b 	mul	r11,r5,r2
8000db6a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000db6e:	12 3b       	cp.w	r11,r9
8000db70:	e0 88 00 09 	brls	8000db82 <__avr32_umod64+0x64>
8000db74:	18 09       	add	r9,r12
8000db76:	12 3c       	cp.w	r12,r9
8000db78:	e0 8b 00 05 	brhi	8000db82 <__avr32_umod64+0x64>
8000db7c:	12 3b       	cp.w	r11,r9
8000db7e:	f3 dc eb 09 	addhi	r9,r9,r12
8000db82:	f2 0b 01 0b 	sub	r11,r9,r11
8000db86:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000db8a:	f6 0a 0d 0a 	divu	r10,r11,r10
8000db8e:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000db92:	ea 0a 02 4a 	mul	r10,r5,r10
8000db96:	1c 3a       	cp.w	r10,lr
8000db98:	e0 88 00 09 	brls	8000dbaa <__avr32_umod64+0x8c>
8000db9c:	18 0e       	add	lr,r12
8000db9e:	1c 3c       	cp.w	r12,lr
8000dba0:	e0 8b 00 05 	brhi	8000dbaa <__avr32_umod64+0x8c>
8000dba4:	1c 3a       	cp.w	r10,lr
8000dba6:	fd dc eb 0e 	addhi	lr,lr,r12
8000dbaa:	fc 0a 01 0a 	sub	r10,lr,r10
8000dbae:	30 0b       	mov	r11,0
8000dbb0:	f4 08 0a 4a 	lsr	r10,r10,r8
8000dbb4:	2f ed       	sub	sp,-8
8000dbb6:	d8 32       	popm	r0-r7,pc
8000dbb8:	16 39       	cp.w	r9,r11
8000dbba:	fe 9b ff fd 	brhi	8000dbb4 <__avr32_umod64+0x96>
8000dbbe:	f2 09 12 00 	clz	r9,r9
8000dbc2:	c4 61       	brne	8000dc4e <__avr32_umod64+0x130>
8000dbc4:	14 38       	cp.w	r8,r10
8000dbc6:	5f 8b       	srls	r11
8000dbc8:	06 35       	cp.w	r5,r3
8000dbca:	5f 3a       	srlo	r10
8000dbcc:	f7 ea 10 0a 	or	r10,r11,r10
8000dbd0:	f2 0a 18 00 	cp.b	r10,r9
8000dbd4:	c0 60       	breq	8000dbe0 <__avr32_umod64+0xc2>
8000dbd6:	fc 08 01 0a 	sub	r10,lr,r8
8000dbda:	e6 05 01 46 	sbc	r6,r3,r5
8000dbde:	14 9e       	mov	lr,r10
8000dbe0:	0c 9b       	mov	r11,r6
8000dbe2:	1c 9a       	mov	r10,lr
8000dbe4:	2f ed       	sub	sp,-8
8000dbe6:	d8 32       	popm	r0-r7,pc
8000dbe8:	58 08       	cp.w	r8,0
8000dbea:	c0 51       	brne	8000dbf4 <__avr32_umod64+0xd6>
8000dbec:	30 19       	mov	r9,1
8000dbee:	f2 08 0d 08 	divu	r8,r9,r8
8000dbf2:	10 9c       	mov	r12,r8
8000dbf4:	f8 08 12 00 	clz	r8,r12
8000dbf8:	e0 81 00 84 	brne	8000dd00 <__avr32_umod64+0x1e2>
8000dbfc:	ec 0c 01 0b 	sub	r11,r6,r12
8000dc00:	f8 03 16 10 	lsr	r3,r12,0x10
8000dc04:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000dc08:	f6 03 0d 0a 	divu	r10,r11,r3
8000dc0c:	fc 09 16 10 	lsr	r9,lr,0x10
8000dc10:	ea 0a 02 4a 	mul	r10,r5,r10
8000dc14:	f3 eb 11 09 	or	r9,r9,r11<<0x10
8000dc18:	12 3a       	cp.w	r10,r9
8000dc1a:	e0 88 00 09 	brls	8000dc2c <__avr32_umod64+0x10e>
8000dc1e:	18 09       	add	r9,r12
8000dc20:	12 3c       	cp.w	r12,r9
8000dc22:	e0 8b 00 05 	brhi	8000dc2c <__avr32_umod64+0x10e>
8000dc26:	12 3a       	cp.w	r10,r9
8000dc28:	f3 dc eb 09 	addhi	r9,r9,r12
8000dc2c:	14 19       	sub	r9,r10
8000dc2e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000dc32:	f2 03 0d 02 	divu	r2,r9,r3
8000dc36:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000dc3a:	ea 02 02 4a 	mul	r10,r5,r2
8000dc3e:	1c 3a       	cp.w	r10,lr
8000dc40:	fe 98 ff b5 	brls	8000dbaa <__avr32_umod64+0x8c>
8000dc44:	18 0e       	add	lr,r12
8000dc46:	1c 3c       	cp.w	r12,lr
8000dc48:	fe 9b ff b1 	brhi	8000dbaa <__avr32_umod64+0x8c>
8000dc4c:	ca cb       	rjmp	8000dba4 <__avr32_umod64+0x86>
8000dc4e:	f2 0e 11 20 	rsub	lr,r9,32
8000dc52:	ea 09 09 45 	lsl	r5,r5,r9
8000dc56:	f6 09 09 4b 	lsl	r11,r11,r9
8000dc5a:	e6 0e 0a 43 	lsr	r3,r3,lr
8000dc5e:	f0 09 09 41 	lsl	r1,r8,r9
8000dc62:	f4 09 09 42 	lsl	r2,r10,r9
8000dc66:	f0 0e 0a 48 	lsr	r8,r8,lr
8000dc6a:	f4 0e 0a 4a 	lsr	r10,r10,lr
8000dc6e:	0a 48       	or	r8,r5
8000dc70:	16 4a       	or	r10,r11
8000dc72:	f0 06 16 10 	lsr	r6,r8,0x10
8000dc76:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000dc7a:	e6 06 0d 04 	divu	r4,r3,r6
8000dc7e:	f4 03 16 10 	lsr	r3,r10,0x10
8000dc82:	08 9b       	mov	r11,r4
8000dc84:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000dc88:	e8 0c 02 45 	mul	r5,r4,r12
8000dc8c:	06 35       	cp.w	r5,r3
8000dc8e:	e0 88 00 07 	brls	8000dc9c <__avr32_umod64+0x17e>
8000dc92:	20 1b       	sub	r11,1
8000dc94:	10 03       	add	r3,r8
8000dc96:	06 38       	cp.w	r8,r3
8000dc98:	e0 88 00 72 	brls	8000dd7c <__avr32_umod64+0x25e>
8000dc9c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000dca0:	0a 13       	sub	r3,r5
8000dca2:	e6 06 0d 04 	divu	r4,r3,r6
8000dca6:	f5 e5 11 06 	or	r6,r10,r5<<0x10
8000dcaa:	e8 0c 02 4c 	mul	r12,r4,r12
8000dcae:	08 9a       	mov	r10,r4
8000dcb0:	0c 3c       	cp.w	r12,r6
8000dcb2:	e0 88 00 07 	brls	8000dcc0 <__avr32_umod64+0x1a2>
8000dcb6:	20 1a       	sub	r10,1
8000dcb8:	10 06       	add	r6,r8
8000dcba:	0c 38       	cp.w	r8,r6
8000dcbc:	e0 88 00 5a 	brls	8000dd70 <__avr32_umod64+0x252>
8000dcc0:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
8000dcc4:	18 16       	sub	r6,r12
8000dcc6:	f6 01 06 4a 	mulu.d	r10,r11,r1
8000dcca:	14 9c       	mov	r12,r10
8000dccc:	16 36       	cp.w	r6,r11
8000dcce:	c0 73       	brcs	8000dcdc <__avr32_umod64+0x1be>
8000dcd0:	5f 05       	sreq	r5
8000dcd2:	14 32       	cp.w	r2,r10
8000dcd4:	5f 3a       	srlo	r10
8000dcd6:	eb ea 00 0a 	and	r10,r5,r10
8000dcda:	c0 60       	breq	8000dce6 <__avr32_umod64+0x1c8>
8000dcdc:	f8 01 01 04 	sub	r4,r12,r1
8000dce0:	f6 08 01 4b 	sbc	r11,r11,r8
8000dce4:	08 9c       	mov	r12,r4
8000dce6:	e4 0c 01 0a 	sub	r10,r2,r12
8000dcea:	ec 0b 01 46 	sbc	r6,r6,r11
8000dcee:	ec 09 0a 4b 	lsr	r11,r6,r9
8000dcf2:	f4 09 0a 4a 	lsr	r10,r10,r9
8000dcf6:	ec 0e 09 46 	lsl	r6,r6,lr
8000dcfa:	0c 4a       	or	r10,r6
8000dcfc:	2f ed       	sub	sp,-8
8000dcfe:	d8 32       	popm	r0-r7,pc
8000dd00:	f0 01 11 20 	rsub	r1,r8,32
8000dd04:	f4 01 0a 4b 	lsr	r11,r10,r1
8000dd08:	f8 08 09 4c 	lsl	r12,r12,r8
8000dd0c:	ec 08 09 49 	lsl	r9,r6,r8
8000dd10:	ec 01 0a 41 	lsr	r1,r6,r1
8000dd14:	f7 e9 10 09 	or	r9,r11,r9
8000dd18:	f8 03 16 10 	lsr	r3,r12,0x10
8000dd1c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000dd20:	e2 03 0d 00 	divu	r0,r1,r3
8000dd24:	f2 0b 16 10 	lsr	r11,r9,0x10
8000dd28:	ea 00 02 4e 	mul	lr,r5,r0
8000dd2c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000dd30:	16 3e       	cp.w	lr,r11
8000dd32:	e0 88 00 06 	brls	8000dd3e <__avr32_umod64+0x220>
8000dd36:	18 0b       	add	r11,r12
8000dd38:	16 3c       	cp.w	r12,r11
8000dd3a:	e0 88 00 27 	brls	8000dd88 <__avr32_umod64+0x26a>
8000dd3e:	f6 0e 01 01 	sub	r1,r11,lr
8000dd42:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000dd46:	e2 03 0d 00 	divu	r0,r1,r3
8000dd4a:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000dd4e:	ea 00 02 4b 	mul	r11,r5,r0
8000dd52:	12 3b       	cp.w	r11,r9
8000dd54:	e0 88 00 09 	brls	8000dd66 <__avr32_umod64+0x248>
8000dd58:	18 09       	add	r9,r12
8000dd5a:	12 3c       	cp.w	r12,r9
8000dd5c:	e0 8b 00 05 	brhi	8000dd66 <__avr32_umod64+0x248>
8000dd60:	12 3b       	cp.w	r11,r9
8000dd62:	f3 dc eb 09 	addhi	r9,r9,r12
8000dd66:	f2 0b 01 0b 	sub	r11,r9,r11
8000dd6a:	f4 08 09 4e 	lsl	lr,r10,r8
8000dd6e:	c4 db       	rjmp	8000dc08 <__avr32_umod64+0xea>
8000dd70:	0c 3c       	cp.w	r12,r6
8000dd72:	f7 ba 0b 01 	subhi	r10,1
8000dd76:	ed d8 eb 06 	addhi	r6,r6,r8
8000dd7a:	ca 3b       	rjmp	8000dcc0 <__avr32_umod64+0x1a2>
8000dd7c:	06 35       	cp.w	r5,r3
8000dd7e:	f7 bb 0b 01 	subhi	r11,1
8000dd82:	e7 d8 eb 03 	addhi	r3,r3,r8
8000dd86:	c8 bb       	rjmp	8000dc9c <__avr32_umod64+0x17e>
8000dd88:	16 3e       	cp.w	lr,r11
8000dd8a:	f7 dc eb 0b 	addhi	r11,r11,r12
8000dd8e:	cd 8b       	rjmp	8000dd3e <__avr32_umod64+0x220>

Disassembly of section .exception:

8000de00 <_evba>:
8000de00:	c0 08       	rjmp	8000de00 <_evba>
	...

8000de04 <_handle_TLB_Multiple_Hit>:
8000de04:	c0 08       	rjmp	8000de04 <_handle_TLB_Multiple_Hit>
	...

8000de08 <_handle_Bus_Error_Data_Fetch>:
8000de08:	c0 08       	rjmp	8000de08 <_handle_Bus_Error_Data_Fetch>
	...

8000de0c <_handle_Bus_Error_Instruction_Fetch>:
8000de0c:	c0 08       	rjmp	8000de0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000de10 <_handle_NMI>:
8000de10:	c0 08       	rjmp	8000de10 <_handle_NMI>
	...

8000de14 <_handle_Instruction_Address>:
8000de14:	c0 08       	rjmp	8000de14 <_handle_Instruction_Address>
	...

8000de18 <_handle_ITLB_Protection>:
8000de18:	c0 08       	rjmp	8000de18 <_handle_ITLB_Protection>
	...

8000de1c <_handle_Breakpoint>:
8000de1c:	c0 08       	rjmp	8000de1c <_handle_Breakpoint>
	...

8000de20 <_handle_Illegal_Opcode>:
8000de20:	c0 08       	rjmp	8000de20 <_handle_Illegal_Opcode>
	...

8000de24 <_handle_Unimplemented_Instruction>:
8000de24:	c0 08       	rjmp	8000de24 <_handle_Unimplemented_Instruction>
	...

8000de28 <_handle_Privilege_Violation>:
8000de28:	c0 08       	rjmp	8000de28 <_handle_Privilege_Violation>
	...

8000de2c <_handle_Floating_Point>:
8000de2c:	c0 08       	rjmp	8000de2c <_handle_Floating_Point>
	...

8000de30 <_handle_Coprocessor_Absent>:
8000de30:	c0 08       	rjmp	8000de30 <_handle_Coprocessor_Absent>
	...

8000de34 <_handle_Data_Address_Read>:
8000de34:	c0 08       	rjmp	8000de34 <_handle_Data_Address_Read>
	...

8000de38 <_handle_Data_Address_Write>:
8000de38:	c0 08       	rjmp	8000de38 <_handle_Data_Address_Write>
	...

8000de3c <_handle_DTLB_Protection_Read>:
8000de3c:	c0 08       	rjmp	8000de3c <_handle_DTLB_Protection_Read>
	...

8000de40 <_handle_DTLB_Protection_Write>:
8000de40:	c0 08       	rjmp	8000de40 <_handle_DTLB_Protection_Write>
	...

8000de44 <_handle_DTLB_Modified>:
8000de44:	c0 08       	rjmp	8000de44 <_handle_DTLB_Modified>
	...

8000de50 <_handle_ITLB_Miss>:
8000de50:	c0 08       	rjmp	8000de50 <_handle_ITLB_Miss>
	...

8000de60 <_handle_DTLB_Miss_Read>:
8000de60:	c0 08       	rjmp	8000de60 <_handle_DTLB_Miss_Read>
	...

8000de70 <_handle_DTLB_Miss_Write>:
8000de70:	c0 08       	rjmp	8000de70 <_handle_DTLB_Miss_Write>
	...

8000df00 <_handle_Supervisor_Call>:
8000df00:	c0 08       	rjmp	8000df00 <_handle_Supervisor_Call>
8000df02:	d7 03       	nop

8000df04 <_int0>:
8000df04:	30 0c       	mov	r12,0
8000df06:	fe b0 aa 0b 	rcall	8000331c <_get_interrupt_handler>
8000df0a:	58 0c       	cp.w	r12,0
8000df0c:	f8 0f 17 10 	movne	pc,r12
8000df10:	d6 03       	rete

8000df12 <_int1>:
8000df12:	30 1c       	mov	r12,1
8000df14:	fe b0 aa 04 	rcall	8000331c <_get_interrupt_handler>
8000df18:	58 0c       	cp.w	r12,0
8000df1a:	f8 0f 17 10 	movne	pc,r12
8000df1e:	d6 03       	rete

8000df20 <_int2>:
8000df20:	30 2c       	mov	r12,2
8000df22:	fe b0 a9 fd 	rcall	8000331c <_get_interrupt_handler>
8000df26:	58 0c       	cp.w	r12,0
8000df28:	f8 0f 17 10 	movne	pc,r12
8000df2c:	d6 03       	rete

8000df2e <_int3>:
8000df2e:	30 3c       	mov	r12,3
8000df30:	fe b0 a9 f6 	rcall	8000331c <_get_interrupt_handler>
8000df34:	58 0c       	cp.w	r12,0
8000df36:	f8 0f 17 10 	movne	pc,r12
8000df3a:	d6 03       	rete
8000df3c:	d7 03       	nop
8000df3e:	d7 03       	nop
8000df40:	d7 03       	nop
8000df42:	d7 03       	nop
8000df44:	d7 03       	nop
8000df46:	d7 03       	nop
8000df48:	d7 03       	nop
8000df4a:	d7 03       	nop
8000df4c:	d7 03       	nop
8000df4e:	d7 03       	nop
8000df50:	d7 03       	nop
8000df52:	d7 03       	nop
8000df54:	d7 03       	nop
8000df56:	d7 03       	nop
8000df58:	d7 03       	nop
8000df5a:	d7 03       	nop
8000df5c:	d7 03       	nop
8000df5e:	d7 03       	nop
8000df60:	d7 03       	nop
8000df62:	d7 03       	nop
8000df64:	d7 03       	nop
8000df66:	d7 03       	nop
8000df68:	d7 03       	nop
8000df6a:	d7 03       	nop
8000df6c:	d7 03       	nop
8000df6e:	d7 03       	nop
8000df70:	d7 03       	nop
8000df72:	d7 03       	nop
8000df74:	d7 03       	nop
8000df76:	d7 03       	nop
8000df78:	d7 03       	nop
8000df7a:	d7 03       	nop
8000df7c:	d7 03       	nop
8000df7e:	d7 03       	nop
8000df80:	d7 03       	nop
8000df82:	d7 03       	nop
8000df84:	d7 03       	nop
8000df86:	d7 03       	nop
8000df88:	d7 03       	nop
8000df8a:	d7 03       	nop
8000df8c:	d7 03       	nop
8000df8e:	d7 03       	nop
8000df90:	d7 03       	nop
8000df92:	d7 03       	nop
8000df94:	d7 03       	nop
8000df96:	d7 03       	nop
8000df98:	d7 03       	nop
8000df9a:	d7 03       	nop
8000df9c:	d7 03       	nop
8000df9e:	d7 03       	nop
8000dfa0:	d7 03       	nop
8000dfa2:	d7 03       	nop
8000dfa4:	d7 03       	nop
8000dfa6:	d7 03       	nop
8000dfa8:	d7 03       	nop
8000dfaa:	d7 03       	nop
8000dfac:	d7 03       	nop
8000dfae:	d7 03       	nop
8000dfb0:	d7 03       	nop
8000dfb2:	d7 03       	nop
8000dfb4:	d7 03       	nop
8000dfb6:	d7 03       	nop
8000dfb8:	d7 03       	nop
8000dfba:	d7 03       	nop
8000dfbc:	d7 03       	nop
8000dfbe:	d7 03       	nop
8000dfc0:	d7 03       	nop
8000dfc2:	d7 03       	nop
8000dfc4:	d7 03       	nop
8000dfc6:	d7 03       	nop
8000dfc8:	d7 03       	nop
8000dfca:	d7 03       	nop
8000dfcc:	d7 03       	nop
8000dfce:	d7 03       	nop
8000dfd0:	d7 03       	nop
8000dfd2:	d7 03       	nop
8000dfd4:	d7 03       	nop
8000dfd6:	d7 03       	nop
8000dfd8:	d7 03       	nop
8000dfda:	d7 03       	nop
8000dfdc:	d7 03       	nop
8000dfde:	d7 03       	nop
8000dfe0:	d7 03       	nop
8000dfe2:	d7 03       	nop
8000dfe4:	d7 03       	nop
8000dfe6:	d7 03       	nop
8000dfe8:	d7 03       	nop
8000dfea:	d7 03       	nop
8000dfec:	d7 03       	nop
8000dfee:	d7 03       	nop
8000dff0:	d7 03       	nop
8000dff2:	d7 03       	nop
8000dff4:	d7 03       	nop
8000dff6:	d7 03       	nop
8000dff8:	d7 03       	nop
8000dffa:	d7 03       	nop
8000dffc:	d7 03       	nop
8000dffe:	d7 03       	nop
