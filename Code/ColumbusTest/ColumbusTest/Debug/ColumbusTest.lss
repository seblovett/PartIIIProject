
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b130  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000d200  8000d200  0000d600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000da4  8000d400  8000d400  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8000e1a4  8000e1a4  0000e5a4  2**0
                  ALLOC
  6 .data         00000510  00000004  8000e1a8  0000e804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000514  8000e6b8  0000ed14  2**0
                  ALLOC
  8 .bss          000007d8  00000518  8000e6b8  0000ed18  2**2
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000ed14  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000017b0  00000000  00000000  0000ed44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00003db1  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003268f  00000000  00000000  000142a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007068  00000000  00000000  00046934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019714  00000000  00000000  0004d99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040b4  00000000  00000000  000670b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000086d6  00000000  00000000  0006b164  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000100ef  00000000  00000000  0007383a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0207f5fc  00000000  00000000  00083929  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00001be0  00000000  00000000  02102f25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b9 9c 	sub	pc,pc,-18020

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	09 74       	ld.ub	r4,--r4
8000210c:	00 00       	add	r0,r0
8000210e:	09 72       	ld.ub	r2,--r4
80002110:	00 00       	add	r0,r0
80002112:	09 60       	ld.uh	r0,--r4
80002114:	00 00       	add	r0,r0
80002116:	09 68       	ld.uh	r8,--r4
80002118:	00 00       	add	r0,r0
8000211a:	09 6c       	ld.uh	r12,--r4
8000211c:	00 00       	add	r0,r0
8000211e:	09 6a       	ld.uh	r10,--r4

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	33 f2       	mov	r2,63
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	34 0e       	mov	lr,64

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	32 c2       	mov	r2,44
800021a4:	00 00       	add	r0,r0
800021a6:	09 84       	ld.ub	r4,r4[0x0]
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	33 0e       	mov	lr,48
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	05 18       	ld.sh	r8,r2++
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	05 18       	ld.sh	r8,r2++
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	33 f2       	mov	r2,63
800022ac:	00 00       	add	r0,r0
800022ae:	09 84       	ld.ub	r4,r4[0x0]
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	32 c2       	mov	r2,44
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	09 84       	ld.ub	r4,r4[0x0]
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	33 0e       	mov	lr,48

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	05 30       	ld.ub	r0,r2++
80002364:	00 00       	add	r0,r0
80002366:	09 84       	ld.ub	r4,r4[0x0]
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	33 f2       	mov	r2,63
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	32 c2       	mov	r2,44
800024a0:	00 00       	add	r0,r0
800024a2:	09 72       	ld.ub	r2,--r4
800024a4:	00 00       	add	r0,r0
800024a6:	05 18       	ld.sh	r8,r2++
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	09 84       	ld.ub	r4,r4[0x0]
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	33 0e       	mov	lr,48
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	33 f2       	mov	r2,63
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	32 c2       	mov	r2,44
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	09 84       	ld.ub	r4,r4[0x0]
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	33 0e       	mov	lr,48
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	32 c2       	mov	r2,44
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	09 84       	ld.ub	r4,r4[0x0]
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	33 0e       	mov	lr,48
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	32 c2       	mov	r2,44
80002730:	00 00       	add	r0,r0
80002732:	09 72       	ld.ub	r2,--r4
80002734:	00 00       	add	r0,r0
80002736:	05 18       	ld.sh	r8,r2++
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	09 84       	ld.ub	r4,r4[0x0]
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	33 0e       	mov	lr,48
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	33 f2       	mov	r2,63
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	34 0e       	mov	lr,64

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	32 c2       	mov	r2,44
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	09 84       	ld.ub	r4,r4[0x0]
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	33 0e       	mov	lr,48
80002834:	00 00       	add	r0,r0
80002836:	05 30       	ld.ub	r0,r2++
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	33 f2       	mov	r2,63
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	34 0e       	mov	lr,64

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	05 1c       	ld.sh	r12,r2++
80002ab0:	00 00       	add	r0,r0
80002ab2:	05 2c       	ld.uh	r12,r2++
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	33 34       	mov	r4,51
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	32 c2       	mov	r2,44
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	33 f2       	mov	r2,63
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	33 0e       	mov	lr,48
80002ac4:	00 00       	add	r0,r0
80002ac6:	05 30       	ld.ub	r0,r2++
80002ac8:	00 00       	add	r0,r0
80002aca:	09 72       	ld.ub	r2,--r4
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	09 84       	ld.ub	r4,r4[0x0]
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	09 74       	ld.ub	r4,--r4
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	05 30       	ld.ub	r0,r2++
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	05 2c       	ld.uh	r12,r2++
80002b3c:	00 00       	add	r0,r0
80002b3e:	05 1c       	ld.sh	r12,r2++
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	05 30       	ld.ub	r0,r2++
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	05 30       	ld.ub	r0,r2++
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	05 30       	ld.ub	r0,r2++
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	05 30       	ld.ub	r0,r2++
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	09 6c       	ld.uh	r12,--r4

80002cd0 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002cd0:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002cd4:	58 0a       	cp.w	r10,0
80002cd6:	c6 30       	breq	80002d9c <eic_init+0xcc>
80002cd8:	30 08       	mov	r8,0
80002cda:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002cdc:	30 19       	mov	r9,1
80002cde:	30 1e       	mov	lr,1
80002ce0:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002ce4:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002ce8:	11 96       	ld.ub	r6,r8[0x1]
80002cea:	f2 06 18 00 	cp.b	r6,r9
80002cee:	c0 71       	brne	80002cfc <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002cf0:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002cf2:	11 86       	ld.ub	r6,r8[0x0]
80002cf4:	fc 06 09 46 	lsl	r6,lr,r6
80002cf8:	0a 46       	or	r6,r5
80002cfa:	c0 78       	rjmp	80002d08 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002cfc:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002cfe:	11 86       	ld.ub	r6,r8[0x0]
80002d00:	fc 06 09 46 	lsl	r6,lr,r6
80002d04:	5c d6       	com	r6
80002d06:	0a 66       	and	r6,r5
80002d08:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002d0a:	11 a6       	ld.ub	r6,r8[0x2]
80002d0c:	f2 06 18 00 	cp.b	r6,r9
80002d10:	c0 71       	brne	80002d1e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002d12:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002d14:	11 86       	ld.ub	r6,r8[0x0]
80002d16:	fc 06 09 46 	lsl	r6,lr,r6
80002d1a:	0a 46       	or	r6,r5
80002d1c:	c0 78       	rjmp	80002d2a <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002d1e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002d20:	11 86       	ld.ub	r6,r8[0x0]
80002d22:	fc 06 09 46 	lsl	r6,lr,r6
80002d26:	5c d6       	com	r6
80002d28:	0a 66       	and	r6,r5
80002d2a:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d2c:	11 b6       	ld.ub	r6,r8[0x3]
80002d2e:	f2 06 18 00 	cp.b	r6,r9
80002d32:	c0 71       	brne	80002d40 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002d34:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d36:	11 86       	ld.ub	r6,r8[0x0]
80002d38:	fc 06 09 46 	lsl	r6,lr,r6
80002d3c:	0a 46       	or	r6,r5
80002d3e:	c0 78       	rjmp	80002d4c <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002d40:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d42:	11 86       	ld.ub	r6,r8[0x0]
80002d44:	fc 06 09 46 	lsl	r6,lr,r6
80002d48:	5c d6       	com	r6
80002d4a:	0a 66       	and	r6,r5
80002d4c:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002d4e:	11 c6       	ld.ub	r6,r8[0x4]
80002d50:	f2 06 18 00 	cp.b	r6,r9
80002d54:	c0 71       	brne	80002d62 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002d56:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002d58:	11 86       	ld.ub	r6,r8[0x0]
80002d5a:	fc 06 09 46 	lsl	r6,lr,r6
80002d5e:	0a 46       	or	r6,r5
80002d60:	c0 78       	rjmp	80002d6e <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002d62:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002d64:	11 86       	ld.ub	r6,r8[0x0]
80002d66:	fc 06 09 46 	lsl	r6,lr,r6
80002d6a:	5c d6       	com	r6
80002d6c:	0a 66       	and	r6,r5
80002d6e:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002d70:	11 d6       	ld.ub	r6,r8[0x5]
80002d72:	f2 06 18 00 	cp.b	r6,r9
80002d76:	c0 71       	brne	80002d84 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002d78:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002d7a:	11 88       	ld.ub	r8,r8[0x0]
80002d7c:	fc 08 09 48 	lsl	r8,lr,r8
80002d80:	0c 48       	or	r8,r6
80002d82:	c0 78       	rjmp	80002d90 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80002d84:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002d86:	11 88       	ld.ub	r8,r8[0x0]
80002d88:	fc 08 09 48 	lsl	r8,lr,r8
80002d8c:	5c d8       	com	r8
80002d8e:	0c 68       	and	r8,r6
80002d90:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80002d92:	2f f7       	sub	r7,-1
80002d94:	0e 98       	mov	r8,r7
80002d96:	0e 3a       	cp.w	r10,r7
80002d98:	fe 9b ff a4 	brhi	80002ce0 <eic_init+0x10>
80002d9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80002da0 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80002da0:	30 18       	mov	r8,1
80002da2:	f0 0b 09 48 	lsl	r8,r8,r11
80002da6:	99 c8       	st.w	r12[0x30],r8
}
80002da8:	5e fc       	retal	r12

80002daa <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
80002daa:	30 18       	mov	r8,1
80002dac:	f0 0b 09 48 	lsl	r8,r8,r11
80002db0:	99 08       	st.w	r12[0x0],r8
}
80002db2:	5e fc       	retal	r12

80002db4 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002db4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002db8:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
80002dba:	30 19       	mov	r9,1
80002dbc:	f2 0b 09 4b 	lsl	r11,r9,r11
80002dc0:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80002dc2:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002dc4:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80002dc8:	5e fc       	retal	r12

80002dca <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002dca:	fe 68 00 00 	mov	r8,-131072
80002dce:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002dd0:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002dd4:	91 09       	st.w	r8[0x0],r9
}
80002dd6:	5e fc       	retal	r12

80002dd8 <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002dd8:	fe 68 00 00 	mov	r8,-131072
80002ddc:	70 2c       	ld.w	r12,r8[0x8]
}
80002dde:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002de2:	5e fc       	retal	r12

80002de4 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80002de4:	d4 01       	pushm	lr
	while (!flashc_is_ready());
80002de6:	f0 1f 00 03 	mcall	80002df0 <flashc_default_wait_until_ready+0xc>
80002dea:	cf e0       	breq	80002de6 <flashc_default_wait_until_ready+0x2>
}
80002dec:	d8 02       	popm	pc
80002dee:	00 00       	add	r0,r0
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2d d8       	sub	r8,-35

80002df4 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002df4:	eb cd 40 c0 	pushm	r6-r7,lr
80002df8:	18 96       	mov	r6,r12
80002dfa:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002dfc:	48 e8       	lddpc	r8,80002e34 <flashc_issue_command+0x40>
80002dfe:	70 08       	ld.w	r8,r8[0x0]
80002e00:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80002e02:	fe 68 00 00 	mov	r8,-131072
80002e06:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002e08:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002e0c:	58 07       	cp.w	r7,0
80002e0e:	c0 35       	brlt	80002e14 <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80002e10:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002e14:	3a 59       	mov	r9,-91
80002e16:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002e1a:	fe 69 00 00 	mov	r9,-131072
80002e1e:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80002e20:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80002e22:	e2 19 00 0c 	andl	r9,0xc,COH
80002e26:	48 58       	lddpc	r8,80002e38 <flashc_issue_command+0x44>
80002e28:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80002e2a:	48 38       	lddpc	r8,80002e34 <flashc_issue_command+0x40>
80002e2c:	70 08       	ld.w	r8,r8[0x0]
80002e2e:	5d 18       	icall	r8
}
80002e30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e34:	00 00       	add	r0,r0
80002e36:	00 08       	add	r8,r0
80002e38:	00 00       	add	r0,r0
80002e3a:	05 34       	ld.ub	r4,r2++

80002e3c <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002e3c:	eb cd 40 80 	pushm	r7,lr
80002e40:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
80002e42:	e0 68 8a 40 	mov	r8,35392
80002e46:	ea 18 01 f7 	orh	r8,0x1f7
80002e4a:	10 3c       	cp.w	r12,r8
80002e4c:	e0 88 00 18 	brls	80002e7c <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
80002e50:	30 1c       	mov	r12,1
80002e52:	f0 1f 00 10 	mcall	80002e90 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
80002e56:	e0 68 14 80 	mov	r8,5248
80002e5a:	ea 18 03 ef 	orh	r8,0x3ef
80002e5e:	10 37       	cp.w	r7,r8
80002e60:	e0 8b 00 08 	brhi	80002e70 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002e64:	3f fb       	mov	r11,-1
80002e66:	31 1c       	mov	r12,17
80002e68:	f0 1f 00 0b 	mcall	80002e94 <flashc_set_flash_waitstate_and_readmode+0x58>
80002e6c:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80002e70:	3f fb       	mov	r11,-1
80002e72:	31 0c       	mov	r12,16
80002e74:	f0 1f 00 08 	mcall	80002e94 <flashc_set_flash_waitstate_and_readmode+0x58>
80002e78:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80002e7c:	30 0c       	mov	r12,0
80002e7e:	f0 1f 00 05 	mcall	80002e90 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80002e82:	3f fb       	mov	r11,-1
80002e84:	31 1c       	mov	r12,17
80002e86:	f0 1f 00 04 	mcall	80002e94 <flashc_set_flash_waitstate_and_readmode+0x58>
80002e8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e8e:	00 00       	add	r0,r0
80002e90:	80 00       	ld.sh	r0,r0[0x0]
80002e92:	2d ca       	sub	r10,-36
80002e94:	80 00       	ld.sh	r0,r0[0x0]
80002e96:	2d f4       	sub	r4,-33

80002e98 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002e98:	f8 08 16 05 	lsr	r8,r12,0x5
80002e9c:	a9 78       	lsl	r8,0x9
80002e9e:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002ea2:	58 7b       	cp.w	r11,7
80002ea4:	e0 8b 00 05 	brhi	80002eae <gpio_enable_module_pin+0x16>
80002ea8:	4a 09       	lddpc	r9,80002f28 <gpio_enable_module_pin+0x90>
80002eaa:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002eae:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002eb0:	30 19       	mov	r9,1
80002eb2:	f2 0c 09 49 	lsl	r9,r9,r12
80002eb6:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002eb8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002eba:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002ebc:	c3 18       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002ebe:	30 19       	mov	r9,1
80002ec0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ec4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ec6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002ec8:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002eca:	c2 a8       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002ecc:	30 19       	mov	r9,1
80002ece:	f2 0c 09 49 	lsl	r9,r9,r12
80002ed2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002ed4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002ed6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002ed8:	c2 38       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002eda:	30 19       	mov	r9,1
80002edc:	f2 0c 09 49 	lsl	r9,r9,r12
80002ee0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002ee2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002ee4:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002ee6:	c1 c8       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002ee8:	30 19       	mov	r9,1
80002eea:	f2 0c 09 49 	lsl	r9,r9,r12
80002eee:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ef0:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002ef2:	91 d9       	st.w	r8[0x34],r9
		break;
80002ef4:	c1 58       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002ef6:	30 19       	mov	r9,1
80002ef8:	f2 0c 09 49 	lsl	r9,r9,r12
80002efc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002efe:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f00:	91 d9       	st.w	r8[0x34],r9
		break;
80002f02:	c0 e8       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f04:	30 19       	mov	r9,1
80002f06:	f2 0c 09 49 	lsl	r9,r9,r12
80002f0a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f0c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f0e:	91 d9       	st.w	r8[0x34],r9
		break;
80002f10:	c0 78       	rjmp	80002f1e <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f12:	30 19       	mov	r9,1
80002f14:	f2 0c 09 49 	lsl	r9,r9,r12
80002f18:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f1a:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002f1c:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002f1e:	30 19       	mov	r9,1
80002f20:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f24:	91 2c       	st.w	r8[0x8],r12
80002f26:	5e fd       	retal	0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	d4 00       	acall	0x100

80002f2c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002f2c:	d4 21       	pushm	r4-r7,lr
80002f2e:	18 97       	mov	r7,r12
80002f30:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002f32:	58 0b       	cp.w	r11,0
80002f34:	c0 31       	brne	80002f3a <gpio_enable_module+0xe>
80002f36:	30 05       	mov	r5,0
80002f38:	c0 d8       	rjmp	80002f52 <gpio_enable_module+0x26>
80002f3a:	30 05       	mov	r5,0
80002f3c:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002f3e:	6e 1b       	ld.w	r11,r7[0x4]
80002f40:	6e 0c       	ld.w	r12,r7[0x0]
80002f42:	f0 1f 00 06 	mcall	80002f58 <gpio_enable_module+0x2c>
80002f46:	18 45       	or	r5,r12
		gpiomap++;
80002f48:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002f4a:	2f f6       	sub	r6,-1
80002f4c:	0c 34       	cp.w	r4,r6
80002f4e:	fe 9b ff f8 	brhi	80002f3e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002f52:	0a 9c       	mov	r12,r5
80002f54:	d8 22       	popm	r4-r7,pc
80002f56:	00 00       	add	r0,r0
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2e 98       	sub	r8,-23

80002f5c <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f5c:	f8 08 16 05 	lsr	r8,r12,0x5
80002f60:	a9 78       	lsl	r8,0x9
80002f62:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
80002f66:	30 19       	mov	r9,1
80002f68:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f6c:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80002f70:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
80002f74:	5e fc       	retal	r12

80002f76 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f76:	f8 08 16 05 	lsr	r8,r12,0x5
80002f7a:	a9 78       	lsl	r8,0x9
80002f7c:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002f80:	30 19       	mov	r9,1
80002f82:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f86:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002f8a:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f8e:	91 1c       	st.w	r8[0x4],r12
}
80002f90:	5e fc       	retal	r12

80002f92 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f92:	f8 08 16 05 	lsr	r8,r12,0x5
80002f96:	a9 78       	lsl	r8,0x9
80002f98:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002f9c:	30 19       	mov	r9,1
80002f9e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fa2:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002fa6:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002faa:	91 1c       	st.w	r8[0x4],r12
}
80002fac:	5e fc       	retal	r12
80002fae:	d7 03       	nop

80002fb0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002fb0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002fb4:	49 99       	lddpc	r9,80003018 <INTC_register_interrupt+0x68>
80002fb6:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002fba:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002fbe:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002fc0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002fc4:	58 0a       	cp.w	r10,0
80002fc6:	c0 91       	brne	80002fd8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002fc8:	49 59       	lddpc	r9,8000301c <INTC_register_interrupt+0x6c>
80002fca:	49 6a       	lddpc	r10,80003020 <INTC_register_interrupt+0x70>
80002fcc:	12 1a       	sub	r10,r9
80002fce:	fe 79 00 00 	mov	r9,-65536
80002fd2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fd6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002fd8:	58 1a       	cp.w	r10,1
80002fda:	c0 a1       	brne	80002fee <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002fdc:	49 09       	lddpc	r9,8000301c <INTC_register_interrupt+0x6c>
80002fde:	49 2a       	lddpc	r10,80003024 <INTC_register_interrupt+0x74>
80002fe0:	12 1a       	sub	r10,r9
80002fe2:	bf aa       	sbr	r10,0x1e
80002fe4:	fe 79 00 00 	mov	r9,-65536
80002fe8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fec:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002fee:	58 2a       	cp.w	r10,2
80002ff0:	c0 a1       	brne	80003004 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002ff2:	48 b9       	lddpc	r9,8000301c <INTC_register_interrupt+0x6c>
80002ff4:	48 da       	lddpc	r10,80003028 <INTC_register_interrupt+0x78>
80002ff6:	12 1a       	sub	r10,r9
80002ff8:	bf ba       	sbr	r10,0x1f
80002ffa:	fe 79 00 00 	mov	r9,-65536
80002ffe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003002:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003004:	48 69       	lddpc	r9,8000301c <INTC_register_interrupt+0x6c>
80003006:	48 aa       	lddpc	r10,8000302c <INTC_register_interrupt+0x7c>
80003008:	12 1a       	sub	r10,r9
8000300a:	ea 1a c0 00 	orh	r10,0xc000
8000300e:	fe 79 00 00 	mov	r9,-65536
80003012:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003016:	5e fc       	retal	r12
80003018:	80 00       	ld.sh	r0,r0[0x0]
8000301a:	d4 20       	acall	0x108
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	d2 00       	acall	0x80
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	d3 04       	*unknown*
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	d3 12       	popm	r0-r3,r11-r12
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	d3 20       	acall	0xc8
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	d3 2e       	*unknown*

80003030 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003030:	fe 78 00 00 	mov	r8,-65536
80003034:	e0 69 00 83 	mov	r9,131
80003038:	f2 0c 01 0c 	sub	r12,r9,r12
8000303c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003040:	f2 ca ff c0 	sub	r10,r9,-64
80003044:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003048:	58 08       	cp.w	r8,0
8000304a:	c0 21       	brne	8000304e <_get_interrupt_handler+0x1e>
8000304c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000304e:	f0 08 12 00 	clz	r8,r8
80003052:	48 5a       	lddpc	r10,80003064 <_get_interrupt_handler+0x34>
80003054:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003058:	f0 08 11 1f 	rsub	r8,r8,31
8000305c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000305e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003062:	5e fc       	retal	r12
80003064:	80 00       	ld.sh	r0,r0[0x0]
80003066:	d4 20       	acall	0x108

80003068 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003068:	e1 b9 00 00 	mfsr	r9,0x0
8000306c:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000306e:	fe 78 04 00 	mov	r8,-64512
80003072:	fc 1a aa 00 	movh	r10,0xaa00
80003076:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
8000307a:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
8000307c:	12 98       	mov	r8,r9
8000307e:	e6 18 00 01 	andh	r8,0x1,COH
80003082:	c0 21       	brne	80003086 <pm_set_mclk_source+0x1e>
80003084:	d5 03       	csrf	0x10

  return PASS;
}
80003086:	5e fd       	retal	0

80003088 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003088:	eb cd 40 c0 	pushm	r6-r7,lr
8000308c:	16 97       	mov	r7,r11
8000308e:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
80003090:	58 0c       	cp.w	r12,0
80003092:	c0 50       	breq	8000309c <pcl_switch_to_osc+0x14>
80003094:	fe 7c d8 f0 	mov	r12,-10000
80003098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
8000309c:	30 0c       	mov	r12,0
8000309e:	f0 1f 00 08 	mcall	800030bc <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
800030a2:	30 1a       	mov	r10,1
800030a4:	0c 9b       	mov	r11,r6
800030a6:	30 0c       	mov	r12,0
800030a8:	f0 1f 00 06 	mcall	800030c0 <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
800030ac:	0e 9c       	mov	r12,r7
800030ae:	f0 1f 00 06 	mcall	800030c4 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
800030b2:	30 1c       	mov	r12,1
800030b4:	f0 1f 00 05 	mcall	800030c8 <pcl_switch_to_osc+0x40>
800030b8:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	31 5c       	mov	r12,21
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	30 e8       	mov	r8,14
800030c4:	80 00       	ld.sh	r0,r0[0x0]
800030c6:	2e 3c       	sub	r12,-29
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	30 68       	mov	r8,6

800030cc <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800030cc:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800030d0:	fe 7a 08 00 	mov	r10,-63488
800030d4:	c0 48       	rjmp	800030dc <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800030d6:	20 18       	sub	r8,1
800030d8:	c0 21       	brne	800030dc <scif_pclksr_statushigh_wait+0x10>
800030da:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800030dc:	74 59       	ld.w	r9,r10[0x14]
800030de:	f9 e9 00 09 	and	r9,r12,r9
800030e2:	cf a0       	breq	800030d6 <scif_pclksr_statushigh_wait+0xa>
800030e4:	5e fd       	retal	0
800030e6:	d7 03       	nop

800030e8 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800030e8:	eb cd 40 80 	pushm	r7,lr
800030ec:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800030ee:	fa c8 ff f8 	sub	r8,sp,-8
800030f2:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800030f6:	fe 78 08 00 	mov	r8,-63488
800030fa:	f8 c9 ff f7 	sub	r9,r12,-9
800030fe:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80003102:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80003106:	30 1b       	mov	r11,1
80003108:	ef db d2 01 	bfins	r7,r11,0x10,0x1
8000310c:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
80003110:	e1 bb 00 00 	mfsr	r11,0x0
80003114:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80003116:	f2 07 15 02 	lsl	r7,r9,0x2
8000311a:	ea 17 aa 00 	orh	r7,0xaa00
8000311e:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80003120:	fc fe ff f8 	ld.w	lr,lr[-8]
80003124:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80003128:	16 98       	mov	r8,r11
8000312a:	e6 18 00 01 	andh	r8,0x1,COH
8000312e:	c0 21       	brne	80003132 <scif_enable_osc+0x4a>
80003130:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003132:	58 0a       	cp.w	r10,0
80003134:	c0 e0       	breq	80003150 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
80003136:	58 0c       	cp.w	r12,0
80003138:	c0 61       	brne	80003144 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000313a:	30 1c       	mov	r12,1
8000313c:	f0 1f 00 07 	mcall	80003158 <scif_enable_osc+0x70>
80003140:	c0 80       	breq	80003150 <scif_enable_osc+0x68>
80003142:	c0 58       	rjmp	8000314c <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003144:	30 2c       	mov	r12,2
80003146:	f0 1f 00 05 	mcall	80003158 <scif_enable_osc+0x70>
8000314a:	c0 30       	breq	80003150 <scif_enable_osc+0x68>
8000314c:	3f fc       	mov	r12,-1
8000314e:	c0 28       	rjmp	80003152 <scif_enable_osc+0x6a>
80003150:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003152:	2f ed       	sub	sp,-8
80003154:	e3 cd 80 80 	ldm	sp++,r7,pc
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	30 cc       	mov	r12,12

8000315c <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
8000315c:	58 0c       	cp.w	r12,0
8000315e:	c3 41       	brne	800031c6 <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003160:	fe 78 08 00 	mov	r8,-63488
80003164:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003166:	e0 69 84 7f 	mov	r9,33919
8000316a:	ea 19 00 1e 	orh	r9,0x1e
8000316e:	12 3b       	cp.w	r11,r9
80003170:	e0 8b 00 04 	brhi	80003178 <scif_configure_osc_crystalmode+0x1c>
80003174:	30 0b       	mov	r11,0
80003176:	c1 38       	rjmp	8000319c <scif_configure_osc_crystalmode+0x40>
80003178:	e0 69 96 7f 	mov	r9,38527
8000317c:	ea 19 00 98 	orh	r9,0x98
80003180:	12 3b       	cp.w	r11,r9
80003182:	e0 8b 00 04 	brhi	8000318a <scif_configure_osc_crystalmode+0x2e>
80003186:	30 1b       	mov	r11,1
80003188:	c0 a8       	rjmp	8000319c <scif_configure_osc_crystalmode+0x40>
8000318a:	e0 69 24 00 	mov	r9,9216
8000318e:	ea 19 00 f4 	orh	r9,0xf4
80003192:	12 3b       	cp.w	r11,r9
80003194:	f9 bb 03 02 	movlo	r11,2
80003198:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000319c:	30 19       	mov	r9,1
8000319e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800031a2:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800031a6:	e1 ba 00 00 	mfsr	r10,0x0
800031aa:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
800031ac:	fe 79 08 00 	mov	r9,-63488
800031b0:	32 4b       	mov	r11,36
800031b2:	ea 1b aa 00 	orh	r11,0xaa00
800031b6:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
800031b8:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800031ba:	14 98       	mov	r8,r10
800031bc:	e6 18 00 01 	andh	r8,0x1,COH
800031c0:	c3 51       	brne	8000322a <scif_configure_osc_crystalmode+0xce>
800031c2:	d5 03       	csrf	0x10
800031c4:	c3 38       	rjmp	8000322a <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
800031c6:	fe 78 08 00 	mov	r8,-63488
800031ca:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800031cc:	e0 69 84 7f 	mov	r9,33919
800031d0:	ea 19 00 1e 	orh	r9,0x1e
800031d4:	12 3b       	cp.w	r11,r9
800031d6:	e0 8b 00 04 	brhi	800031de <scif_configure_osc_crystalmode+0x82>
800031da:	30 0b       	mov	r11,0
800031dc:	c1 38       	rjmp	80003202 <scif_configure_osc_crystalmode+0xa6>
800031de:	e0 69 96 7f 	mov	r9,38527
800031e2:	ea 19 00 98 	orh	r9,0x98
800031e6:	12 3b       	cp.w	r11,r9
800031e8:	e0 8b 00 04 	brhi	800031f0 <scif_configure_osc_crystalmode+0x94>
800031ec:	30 1b       	mov	r11,1
800031ee:	c0 a8       	rjmp	80003202 <scif_configure_osc_crystalmode+0xa6>
800031f0:	e0 69 24 00 	mov	r9,9216
800031f4:	ea 19 00 f4 	orh	r9,0xf4
800031f8:	12 3b       	cp.w	r11,r9
800031fa:	f9 bb 03 02 	movlo	r11,2
800031fe:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80003202:	30 19       	mov	r9,1
80003204:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80003208:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8000320c:	e1 ba 00 00 	mfsr	r10,0x0
80003210:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
80003212:	fe 79 08 00 	mov	r9,-63488
80003216:	32 8b       	mov	r11,40
80003218:	ea 1b aa 00 	orh	r11,0xaa00
8000321c:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
8000321e:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80003220:	14 98       	mov	r8,r10
80003222:	e6 18 00 01 	andh	r8,0x1,COH
80003226:	c0 21       	brne	8000322a <scif_configure_osc_crystalmode+0xce>
80003228:	d5 03       	csrf	0x10
  }

  return PASS;
}
8000322a:	5e fd       	retal	0

8000322c <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000322c:	f8 c8 00 01 	sub	r8,r12,1
80003230:	f0 0b 00 0b 	add	r11,r8,r11
80003234:	f6 0c 0d 0a 	divu	r10,r11,r12
80003238:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000323a:	f4 c8 00 01 	sub	r8,r10,1
8000323e:	e0 48 00 fe 	cp.w	r8,254
80003242:	e0 88 00 03 	brls	80003248 <getBaudDiv+0x1c>
80003246:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003248:	5c 8c       	casts.h	r12
}
8000324a:	5e fc       	retal	r12

8000324c <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000324c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003250:	30 18       	mov	r8,1
80003252:	f0 09 18 00 	cp.b	r9,r8
80003256:	e0 88 00 04 	brls	8000325e <spi_initMaster+0x12>
8000325a:	30 2c       	mov	r12,2
8000325c:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000325e:	e0 68 00 80 	mov	r8,128
80003262:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003264:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003266:	30 19       	mov	r9,1
80003268:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000326c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003270:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003274:	30 09       	mov	r9,0
80003276:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000327a:	30 fa       	mov	r10,15
8000327c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003280:	99 18       	st.w	r12[0x4],r8
80003282:	5e f9       	retal	r9

80003284 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003284:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003288:	30 1e       	mov	lr,1
8000328a:	f6 0e 18 00 	cp.b	lr,r11
8000328e:	f9 be 02 00 	movhs	lr,0
80003292:	30 18       	mov	r8,1
80003294:	f4 08 18 00 	cp.b	r8,r10
80003298:	f9 b8 02 00 	movhs	r8,0
8000329c:	fd e8 10 08 	or	r8,lr,r8
800032a0:	30 07       	mov	r7,0
800032a2:	ee 08 18 00 	cp.b	r8,r7
800032a6:	c0 40       	breq	800032ae <spi_selectionMode+0x2a>
800032a8:	30 2c       	mov	r12,2
800032aa:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800032ae:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800032b0:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800032b4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800032b8:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800032bc:	99 18       	st.w	r12[0x4],r8
800032be:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

800032c2 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800032c2:	78 18       	ld.w	r8,r12[0x4]
800032c4:	ea 18 00 0f 	orh	r8,0xf
800032c8:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800032ca:	78 18       	ld.w	r8,r12[0x4]
800032cc:	e2 18 00 04 	andl	r8,0x4,COH
800032d0:	c0 f0       	breq	800032ee <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800032d2:	30 e8       	mov	r8,14
800032d4:	f0 0b 18 00 	cp.b	r11,r8
800032d8:	e0 8b 00 19 	brhi	8000330a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800032dc:	78 18       	ld.w	r8,r12[0x4]
800032de:	b1 6b       	lsl	r11,0x10
800032e0:	ea 1b ff f0 	orh	r11,0xfff0
800032e4:	e8 1b ff ff 	orl	r11,0xffff
800032e8:	10 6b       	and	r11,r8
800032ea:	99 1b       	st.w	r12[0x4],r11
800032ec:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800032ee:	30 38       	mov	r8,3
800032f0:	f0 0b 18 00 	cp.b	r11,r8
800032f4:	e0 8b 00 0b 	brhi	8000330a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800032f8:	78 18       	ld.w	r8,r12[0x4]
800032fa:	2f 0b       	sub	r11,-16
800032fc:	30 19       	mov	r9,1
800032fe:	f2 0b 09 4b 	lsl	r11,r9,r11
80003302:	5c db       	com	r11
80003304:	10 6b       	and	r11,r8
80003306:	99 1b       	st.w	r12[0x4],r11
80003308:	5e fd       	retal	0
8000330a:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000330c:	5e fc       	retal	r12

8000330e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000330e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003312:	c0 58       	rjmp	8000331c <spi_unselectChip+0xe>
		if (!timeout--) {
80003314:	58 08       	cp.w	r8,0
80003316:	c0 21       	brne	8000331a <spi_unselectChip+0xc>
80003318:	5e ff       	retal	1
8000331a:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000331c:	78 49       	ld.w	r9,r12[0x10]
8000331e:	e2 19 02 00 	andl	r9,0x200,COH
80003322:	cf 90       	breq	80003314 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003324:	78 18       	ld.w	r8,r12[0x4]
80003326:	ea 18 00 0f 	orh	r8,0xf
8000332a:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000332c:	fc 18 01 00 	movh	r8,0x100
80003330:	99 08       	st.w	r12[0x0],r8
80003332:	5e fd       	retal	0

80003334 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003334:	eb cd 40 f8 	pushm	r3-r7,lr
80003338:	18 95       	mov	r5,r12
8000333a:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000333c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003340:	30 38       	mov	r8,3
80003342:	f0 06 18 00 	cp.b	r6,r8
80003346:	e0 8b 00 4d 	brhi	800033e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000334a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000334e:	30 18       	mov	r8,1
80003350:	f0 04 18 00 	cp.b	r4,r8
80003354:	e0 8b 00 46 	brhi	800033e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003358:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000335c:	30 78       	mov	r8,7
8000335e:	f0 03 18 00 	cp.b	r3,r8
80003362:	e0 88 00 3f 	brls	800033e0 <spi_setupChipReg+0xac>
80003366:	31 08       	mov	r8,16
80003368:	f0 03 18 00 	cp.b	r3,r8
8000336c:	e0 8b 00 3a 	brhi	800033e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003370:	14 9b       	mov	r11,r10
80003372:	6e 1c       	ld.w	r12,r7[0x4]
80003374:	f0 1f 00 1d 	mcall	800033e8 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003378:	c3 45       	brlt	800033e0 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000337a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000337c:	ec 09 16 01 	lsr	r9,r6,0x1
80003380:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003384:	ec 16 00 01 	eorl	r6,0x1
80003388:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000338c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003390:	20 83       	sub	r3,8
80003392:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003396:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000339a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000339e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800033a2:	ef 39 00 0a 	ld.ub	r9,r7[10]
800033a6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800033aa:	0f 89       	ld.ub	r9,r7[0x0]
800033ac:	30 1a       	mov	r10,1
800033ae:	f4 09 18 00 	cp.b	r9,r10
800033b2:	c0 e0       	breq	800033ce <spi_setupChipReg+0x9a>
800033b4:	c0 a3       	brcs	800033c8 <spi_setupChipReg+0x94>
800033b6:	30 2a       	mov	r10,2
800033b8:	f4 09 18 00 	cp.b	r9,r10
800033bc:	c0 c0       	breq	800033d4 <spi_setupChipReg+0xa0>
800033be:	30 3a       	mov	r10,3
800033c0:	f4 09 18 00 	cp.b	r9,r10
800033c4:	c0 e1       	brne	800033e0 <spi_setupChipReg+0xac>
800033c6:	c0 a8       	rjmp	800033da <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800033c8:	8b c8       	st.w	r5[0x30],r8
800033ca:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800033ce:	8b d8       	st.w	r5[0x34],r8
800033d0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800033d4:	8b e8       	st.w	r5[0x38],r8
800033d6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800033da:	8b f8       	st.w	r5[0x3c],r8
800033dc:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800033e0:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800033e2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800033e6:	00 00       	add	r0,r0
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	32 2c       	mov	r12,34

800033ec <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800033ec:	30 18       	mov	r8,1
800033ee:	99 08       	st.w	r12[0x0],r8
}
800033f0:	5e fc       	retal	r12

800033f2 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800033f2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800033f6:	c0 58       	rjmp	80003400 <spi_write+0xe>
		if (!timeout--) {
800033f8:	58 08       	cp.w	r8,0
800033fa:	c0 21       	brne	800033fe <spi_write+0xc>
800033fc:	5e ff       	retal	1
800033fe:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003400:	78 49       	ld.w	r9,r12[0x10]
80003402:	e2 19 00 02 	andl	r9,0x2,COH
80003406:	cf 90       	breq	800033f8 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003408:	5c 7b       	castu.h	r11
8000340a:	99 3b       	st.w	r12[0xc],r11
8000340c:	5e fd       	retal	0

8000340e <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000340e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003412:	c0 58       	rjmp	8000341c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003414:	58 08       	cp.w	r8,0
80003416:	c0 21       	brne	8000341a <spi_read+0xc>
80003418:	5e ff       	retal	1
8000341a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000341c:	78 49       	ld.w	r9,r12[0x10]
8000341e:	e2 19 02 01 	andl	r9,0x201,COH
80003422:	e0 49 02 01 	cp.w	r9,513
80003426:	cf 71       	brne	80003414 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003428:	78 28       	ld.w	r8,r12[0x8]
8000342a:	b6 08       	st.h	r11[0x0],r8
8000342c:	5e fd       	retal	0
8000342e:	d7 03       	nop

80003430 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003430:	4a e8       	lddpc	r8,800034e8 <twim_master_interrupt_handler+0xb8>
80003432:	70 08       	ld.w	r8,r8[0x0]
80003434:	70 79       	ld.w	r9,r8[0x1c]
80003436:	4a ea       	lddpc	r10,800034ec <twim_master_interrupt_handler+0xbc>
80003438:	74 0a       	ld.w	r10,r10[0x0]
8000343a:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8000343e:	12 9a       	mov	r10,r9
80003440:	e2 1a 07 00 	andl	r10,0x700,COH
80003444:	c1 40       	breq	8000346c <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003446:	e2 19 03 00 	andl	r9,0x300,COH
8000344a:	f9 b9 01 fc 	movne	r9,-4
8000344e:	f9 b9 00 fe 	moveq	r9,-2
80003452:	4a 8a       	lddpc	r10,800034f0 <twim_master_interrupt_handler+0xc0>
80003454:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003456:	70 3a       	ld.w	r10,r8[0xc]
80003458:	30 09       	mov	r9,0
8000345a:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
8000345e:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003460:	3f fa       	mov	r10,-1
80003462:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003464:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003466:	4a 48       	lddpc	r8,800034f4 <twim_master_interrupt_handler+0xc4>
80003468:	b0 89       	st.b	r8[0x0],r9
8000346a:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8000346c:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003470:	c1 30       	breq	80003496 <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003472:	4a 2a       	lddpc	r10,800034f8 <twim_master_interrupt_handler+0xc8>
80003474:	70 5b       	ld.w	r11,r8[0x14]
80003476:	74 09       	ld.w	r9,r10[0x0]
80003478:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000347a:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
8000347c:	4a 09       	lddpc	r9,800034fc <twim_master_interrupt_handler+0xcc>
8000347e:	72 0a       	ld.w	r10,r9[0x0]
80003480:	20 1a       	sub	r10,1
80003482:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003484:	72 09       	ld.w	r9,r9[0x0]
80003486:	58 09       	cp.w	r9,0
80003488:	c2 f1       	brne	800034e6 <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000348a:	30 19       	mov	r9,1
8000348c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000348e:	30 09       	mov	r9,0
80003490:	49 98       	lddpc	r8,800034f4 <twim_master_interrupt_handler+0xc4>
80003492:	b0 89       	st.b	r8[0x0],r9
80003494:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003496:	e2 19 00 02 	andl	r9,0x2,COH
8000349a:	c2 60       	breq	800034e6 <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8000349c:	49 99       	lddpc	r9,80003500 <twim_master_interrupt_handler+0xd0>
8000349e:	72 09       	ld.w	r9,r9[0x0]
800034a0:	58 09       	cp.w	r9,0
800034a2:	c0 71       	brne	800034b0 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800034a4:	30 29       	mov	r9,2
800034a6:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800034a8:	30 09       	mov	r9,0
800034aa:	49 38       	lddpc	r8,800034f4 <twim_master_interrupt_handler+0xc4>
800034ac:	b0 89       	st.b	r8[0x0],r9
800034ae:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800034b0:	49 5a       	lddpc	r10,80003504 <twim_master_interrupt_handler+0xd4>
800034b2:	74 09       	ld.w	r9,r10[0x0]
800034b4:	13 3b       	ld.ub	r11,r9++
800034b6:	91 6b       	st.w	r8[0x18],r11
800034b8:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
800034ba:	49 28       	lddpc	r8,80003500 <twim_master_interrupt_handler+0xd0>
800034bc:	70 09       	ld.w	r9,r8[0x0]
800034be:	20 19       	sub	r9,1
800034c0:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
800034c2:	70 08       	ld.w	r8,r8[0x0]
800034c4:	58 08       	cp.w	r8,0
800034c6:	c1 01       	brne	800034e6 <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800034c8:	48 b8       	lddpc	r8,800034f4 <twim_master_interrupt_handler+0xc4>
800034ca:	11 88       	ld.ub	r8,r8[0x0]
800034cc:	58 08       	cp.w	r8,0
800034ce:	c0 c0       	breq	800034e6 <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800034d0:	30 09       	mov	r9,0
800034d2:	48 98       	lddpc	r8,800034f4 <twim_master_interrupt_handler+0xc4>
800034d4:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800034d6:	48 d8       	lddpc	r8,80003508 <twim_master_interrupt_handler+0xd8>
800034d8:	70 08       	ld.w	r8,r8[0x0]
800034da:	70 3a       	ld.w	r10,r8[0xc]
800034dc:	48 99       	lddpc	r9,80003500 <twim_master_interrupt_handler+0xd0>
800034de:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800034e0:	70 29       	ld.w	r9,r8[0x8]
800034e2:	48 98       	lddpc	r8,80003504 <twim_master_interrupt_handler+0xd4>
800034e4:	91 09       	st.w	r8[0x0],r9
800034e6:	d6 03       	rete
800034e8:	00 00       	add	r0,r0
800034ea:	07 00       	ld.w	r0,r3++
800034ec:	00 00       	add	r0,r0
800034ee:	07 14       	ld.sh	r4,r3++
800034f0:	00 00       	add	r0,r0
800034f2:	07 0c       	ld.w	r12,r3++
800034f4:	00 00       	add	r0,r0
800034f6:	07 18       	ld.sh	r8,r3++
800034f8:	00 00       	add	r0,r0
800034fa:	07 04       	ld.w	r4,r3++
800034fc:	00 00       	add	r0,r0
800034fe:	07 08       	ld.w	r8,r3++
80003500:	00 00       	add	r0,r0
80003502:	07 20       	ld.uh	r0,r3++
80003504:	00 00       	add	r0,r0
80003506:	07 10       	ld.sh	r0,r3++
80003508:	00 00       	add	r0,r0
8000350a:	07 1c       	ld.sh	r12,r3++

8000350c <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8000350c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003510:	f4 0b 0d 0a 	divu	r10,r10,r11
80003514:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003518:	e0 48 00 ff 	cp.w	r8,255
8000351c:	e0 8b 00 04 	brhi	80003524 <twim_set_speed+0x18>
80003520:	30 09       	mov	r9,0
80003522:	c2 18       	rjmp	80003564 <twim_set_speed+0x58>
80003524:	30 09       	mov	r9,0
80003526:	30 16       	mov	r6,1
80003528:	30 7a       	mov	r10,7
8000352a:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
8000352c:	2f f9       	sub	r9,-1
8000352e:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003530:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003532:	e0 48 00 ff 	cp.w	r8,255
80003536:	f9 be 0b 01 	movhi	lr,1
8000353a:	f9 be 08 00 	movls	lr,0
8000353e:	f2 0a 18 00 	cp.b	r10,r9
80003542:	ec 0b 17 20 	movhs	r11,r6
80003546:	f9 bb 03 00 	movlo	r11,0
8000354a:	fd eb 00 0b 	and	r11,lr,r11
8000354e:	ee 0b 18 00 	cp.b	r11,r7
80003552:	ce d1       	brne	8000352c <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003554:	30 7a       	mov	r10,7
80003556:	f4 09 18 00 	cp.b	r9,r10
8000355a:	e0 88 00 05 	brls	80003564 <twim_set_speed+0x58>
8000355e:	3f 8c       	mov	r12,-8
80003560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003564:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003568:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
8000356c:	14 18       	sub	r8,r10
8000356e:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003572:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003576:	99 19       	st.w	r12[0x4],r9
80003578:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

8000357c <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
8000357c:	48 38       	lddpc	r8,80003588 <twim_status+0xc>
8000357e:	70 08       	ld.w	r8,r8[0x0]
80003580:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003582:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003586:	5e fc       	retal	r12
80003588:	00 00       	add	r0,r0
8000358a:	07 00       	ld.w	r0,r3++

8000358c <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000358c:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003590:	e6 18 00 01 	andh	r8,0x1,COH
80003594:	c0 21       	brne	80003598 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003596:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003598:	3f f8       	mov	r8,-1
8000359a:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
8000359c:	99 b8       	st.w	r12[0x2c],r8
}
8000359e:	5e fc       	retal	r12

800035a0 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800035a0:	eb cd 40 fe 	pushm	r1-r7,lr
800035a4:	18 97       	mov	r7,r12
800035a6:	16 93       	mov	r3,r11
800035a8:	14 95       	mov	r5,r10
800035aa:	12 92       	mov	r2,r9
800035ac:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800035ae:	30 14       	mov	r4,1
800035b0:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800035b2:	e0 68 00 80 	mov	r8,128
800035b6:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800035b8:	30 28       	mov	r8,2
800035ba:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800035bc:	49 e6       	lddpc	r6,80003634 <twim_write+0x94>
800035be:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800035c0:	f0 1f 00 1e 	mcall	80003638 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
800035c4:	49 e8       	lddpc	r8,8000363c <twim_write+0x9c>
800035c6:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800035c8:	49 e8       	lddpc	r8,80003640 <twim_write+0xa0>
800035ca:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800035cc:	30 09       	mov	r9,0
800035ce:	49 e8       	lddpc	r8,80003644 <twim_write+0xa4>
800035d0:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800035d2:	49 e9       	lddpc	r9,80003648 <twim_write+0xa8>
800035d4:	30 08       	mov	r8,0
800035d6:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800035d8:	6c 08       	ld.w	r8,r6[0x0]
800035da:	b1 65       	lsl	r5,0x10
800035dc:	e8 15 e0 00 	orl	r5,0xe000
800035e0:	eb e2 10 12 	or	r2,r5,r2<<0x1
800035e4:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800035e8:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800035ea:	49 9a       	lddpc	r10,8000364c <twim_write+0xac>
800035ec:	e0 6b 03 02 	mov	r11,770
800035f0:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800035f2:	74 0a       	ld.w	r10,r10[0x0]
800035f4:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800035f6:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
800035f8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800035fa:	72 08       	ld.w	r8,r9[0x0]
800035fc:	58 08       	cp.w	r8,0
800035fe:	c0 80       	breq	8000360e <twim_write+0x6e>
80003600:	c0 b8       	rjmp	80003616 <twim_write+0x76>
		cpu_relax();
80003602:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003606:	6c 08       	ld.w	r8,r6[0x0]
80003608:	58 08       	cp.w	r8,0
8000360a:	c0 30       	breq	80003610 <twim_write+0x70>
8000360c:	c0 58       	rjmp	80003616 <twim_write+0x76>
8000360e:	48 f6       	lddpc	r6,80003648 <twim_write+0xa8>
80003610:	f0 1f 00 10 	mcall	80003650 <twim_write+0xb0>
80003614:	cf 70       	breq	80003602 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003616:	30 28       	mov	r8,2
80003618:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000361a:	48 c8       	lddpc	r8,80003648 <twim_write+0xa8>
8000361c:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000361e:	5b c8       	cp.w	r8,-4
80003620:	c0 70       	breq	8000362e <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003622:	48 a8       	lddpc	r8,80003648 <twim_write+0xa8>
80003624:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003626:	5b e8       	cp.w	r8,-2
80003628:	c0 30       	breq	8000362e <twim_write+0x8e>
8000362a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000362e:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003632:	00 00       	add	r0,r0
80003634:	00 00       	add	r0,r0
80003636:	07 00       	ld.w	r0,r3++
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	35 8c       	mov	r12,88
8000363c:	00 00       	add	r0,r0
8000363e:	07 10       	ld.sh	r0,r3++
80003640:	00 00       	add	r0,r0
80003642:	07 20       	ld.uh	r0,r3++
80003644:	00 00       	add	r0,r0
80003646:	07 18       	ld.sh	r8,r3++
80003648:	00 00       	add	r0,r0
8000364a:	07 0c       	ld.w	r12,r3++
8000364c:	00 00       	add	r0,r0
8000364e:	07 14       	ld.sh	r4,r3++
80003650:	80 00       	ld.sh	r0,r0[0x0]
80003652:	35 7c       	mov	r12,87

80003654 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003654:	d4 01       	pushm	lr
80003656:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003658:	30 08       	mov	r8,0
8000365a:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000365c:	30 08       	mov	r8,0
8000365e:	16 99       	mov	r9,r11
80003660:	10 9a       	mov	r10,r8
80003662:	1a 9b       	mov	r11,sp
80003664:	f0 1f 00 02 	mcall	8000366c <twim_probe+0x18>
}
80003668:	2f fd       	sub	sp,-4
8000366a:	d8 02       	popm	pc
8000366c:	80 00       	ld.sh	r0,r0[0x0]
8000366e:	35 a0       	mov	r0,90

80003670 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003670:	eb cd 40 e0 	pushm	r5-r7,lr
80003674:	18 97       	mov	r7,r12
80003676:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003678:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000367c:	30 0a       	mov	r10,0
8000367e:	4a 59       	lddpc	r9,80003710 <twim_master_init+0xa0>
80003680:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003682:	e6 18 00 01 	andh	r8,0x1,COH
80003686:	c0 b1       	brne	8000369c <twim_master_init+0x2c>
		cpu_irq_disable ();
80003688:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8000368a:	3f f8       	mov	r8,-1
8000368c:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000368e:	30 18       	mov	r8,1
80003690:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003692:	e0 68 00 80 	mov	r8,128
80003696:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003698:	d5 03       	csrf	0x10
8000369a:	c0 88       	rjmp	800036aa <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
8000369c:	3f f8       	mov	r8,-1
8000369e:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800036a0:	30 18       	mov	r8,1
800036a2:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800036a4:	e0 68 00 80 	mov	r8,128
800036a8:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
800036aa:	3f f8       	mov	r8,-1
800036ac:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800036ae:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800036b2:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
800036b4:	30 1a       	mov	r10,1
800036b6:	e0 6b 03 20 	mov	r11,800
800036ba:	49 7c       	lddpc	r12,80003714 <twim_master_init+0xa4>
800036bc:	f0 1f 00 17 	mcall	80003718 <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800036c0:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800036c4:	eb 39 00 0c 	ld.ub	r9,r5[12]
800036c8:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800036ca:	f0 09 18 00 	cp.b	r9,r8
800036ce:	f9 b8 01 10 	movne	r8,16
800036d2:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800036d6:	f9 b8 01 ff 	movne	r8,-1
800036da:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800036de:	6a 0a       	ld.w	r10,r5[0x0]
800036e0:	6a 1b       	ld.w	r11,r5[0x4]
800036e2:	0e 9c       	mov	r12,r7
800036e4:	f0 1f 00 0e 	mcall	8000371c <twim_master_init+0xac>
800036e8:	5b 8c       	cp.w	r12,-8
800036ea:	c1 00       	breq	8000370a <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800036ec:	6a 2b       	ld.w	r11,r5[0x8]
800036ee:	0e 9c       	mov	r12,r7
800036f0:	f0 1f 00 0c 	mcall	80003720 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800036f4:	48 78       	lddpc	r8,80003710 <twim_master_init+0xa0>
800036f6:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800036f8:	5b c8       	cp.w	r8,-4
800036fa:	c0 70       	breq	80003708 <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800036fc:	48 58       	lddpc	r8,80003710 <twim_master_init+0xa0>
800036fe:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003700:	5b e8       	cp.w	r8,-2
80003702:	c0 30       	breq	80003708 <twim_master_init+0x98>
80003704:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003708:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
8000370a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000370e:	00 00       	add	r0,r0
80003710:	00 00       	add	r0,r0
80003712:	07 0c       	ld.w	r12,r3++
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	34 30       	mov	r0,67
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	2f b0       	sub	r0,-5
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	35 0c       	mov	r12,80
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	36 54       	mov	r4,101

80003724 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003724:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003726:	f6 08 15 04 	lsl	r8,r11,0x4
8000372a:	14 38       	cp.w	r8,r10
8000372c:	f9 b8 08 10 	movls	r8,16
80003730:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003734:	f0 0b 02 4b 	mul	r11,r8,r11
80003738:	f6 09 16 01 	lsr	r9,r11,0x1
8000373c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003740:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003744:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003748:	f2 cb 00 01 	sub	r11,r9,1
8000374c:	e0 4b ff fe 	cp.w	r11,65534
80003750:	e0 88 00 03 	brls	80003756 <usart_set_async_baudrate+0x32>
80003754:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003756:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003758:	e8 6e 00 00 	mov	lr,524288
8000375c:	59 08       	cp.w	r8,16
8000375e:	fc 08 17 10 	movne	r8,lr
80003762:	f9 b8 00 00 	moveq	r8,0
80003766:	e4 1b ff f7 	andh	r11,0xfff7
8000376a:	e0 1b fe cf 	andl	r11,0xfecf
8000376e:	16 48       	or	r8,r11
80003770:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003772:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003776:	f3 ea 11 09 	or	r9,r9,r10<<0x10
8000377a:	99 89       	st.w	r12[0x20],r9
8000377c:	d8 0a       	popm	pc,r12=0

8000377e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8000377e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003780:	e2 18 00 02 	andl	r8,0x2,COH
80003784:	c0 31       	brne	8000378a <usart_write_char+0xc>
80003786:	30 2c       	mov	r12,2
80003788:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000378a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
8000378e:	99 7b       	st.w	r12[0x1c],r11
80003790:	5e fd       	retal	0
80003792:	d7 03       	nop

80003794 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003794:	eb cd 40 e0 	pushm	r5-r7,lr
80003798:	18 96       	mov	r6,r12
8000379a:	16 95       	mov	r5,r11
8000379c:	e0 67 27 0f 	mov	r7,9999
800037a0:	c0 68       	rjmp	800037ac <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800037a2:	58 07       	cp.w	r7,0
800037a4:	c0 31       	brne	800037aa <usart_putchar+0x16>
800037a6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800037aa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800037ac:	0a 9b       	mov	r11,r5
800037ae:	0c 9c       	mov	r12,r6
800037b0:	f0 1f 00 03 	mcall	800037bc <usart_putchar+0x28>
800037b4:	cf 71       	brne	800037a2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
800037b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800037ba:	00 00       	add	r0,r0
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	37 7e       	mov	lr,119

800037c0 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800037c0:	eb cd 40 c0 	pushm	r6-r7,lr
800037c4:	18 96       	mov	r6,r12
800037c6:	16 97       	mov	r7,r11
  while (*string != '\0')
800037c8:	17 8b       	ld.ub	r11,r11[0x0]
800037ca:	58 0b       	cp.w	r11,0
800037cc:	c0 80       	breq	800037dc <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
800037ce:	2f f7       	sub	r7,-1
800037d0:	0c 9c       	mov	r12,r6
800037d2:	f0 1f 00 04 	mcall	800037e0 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800037d6:	0f 8b       	ld.ub	r11,r7[0x0]
800037d8:	58 0b       	cp.w	r11,0
800037da:	cf a1       	brne	800037ce <usart_write_line+0xe>
800037dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	37 94       	mov	r4,121

800037e4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800037e4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800037e8:	e6 18 00 01 	andh	r8,0x1,COH
800037ec:	c0 71       	brne	800037fa <usart_reset+0x16>
800037ee:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800037f0:	3f f8       	mov	r8,-1
800037f2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800037f4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800037f6:	d5 03       	csrf	0x10
800037f8:	c0 48       	rjmp	80003800 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800037fa:	3f f8       	mov	r8,-1
800037fc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800037fe:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003800:	30 08       	mov	r8,0
80003802:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003804:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003806:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003808:	ea 68 61 0c 	mov	r8,680204
8000380c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000380e:	5e fc       	retal	r12

80003810 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003810:	eb cd 40 e0 	pushm	r5-r7,lr
80003814:	18 96       	mov	r6,r12
80003816:	16 97       	mov	r7,r11
80003818:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000381a:	f0 1f 00 2f 	mcall	800038d4 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000381e:	58 07       	cp.w	r7,0
80003820:	c5 80       	breq	800038d0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80003822:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003824:	30 49       	mov	r9,4
80003826:	f2 08 18 00 	cp.b	r8,r9
8000382a:	e0 88 00 53 	brls	800038d0 <usart_init_rs232+0xc0>
8000382e:	30 99       	mov	r9,9
80003830:	f2 08 18 00 	cp.b	r8,r9
80003834:	e0 8b 00 4e 	brhi	800038d0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003838:	0f d9       	ld.ub	r9,r7[0x5]
8000383a:	30 78       	mov	r8,7
8000383c:	f0 09 18 00 	cp.b	r9,r8
80003840:	e0 8b 00 48 	brhi	800038d0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003844:	8e 39       	ld.sh	r9,r7[0x6]
80003846:	e0 68 01 01 	mov	r8,257
8000384a:	f0 09 19 00 	cp.h	r9,r8
8000384e:	e0 8b 00 41 	brhi	800038d0 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003852:	ef 39 00 08 	ld.ub	r9,r7[8]
80003856:	30 38       	mov	r8,3
80003858:	f0 09 18 00 	cp.b	r9,r8
8000385c:	e0 8b 00 3a 	brhi	800038d0 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003860:	0a 9a       	mov	r10,r5
80003862:	6e 0b       	ld.w	r11,r7[0x0]
80003864:	0c 9c       	mov	r12,r6
80003866:	f0 1f 00 1d 	mcall	800038d8 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000386a:	58 1c       	cp.w	r12,1
8000386c:	c3 20       	breq	800038d0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000386e:	0f c8       	ld.ub	r8,r7[0x4]
80003870:	30 99       	mov	r9,9
80003872:	f2 08 18 00 	cp.b	r8,r9
80003876:	c0 51       	brne	80003880 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003878:	6c 18       	ld.w	r8,r6[0x4]
8000387a:	b1 b8       	sbr	r8,0x11
8000387c:	8d 18       	st.w	r6[0x4],r8
8000387e:	c0 68       	rjmp	8000388a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003880:	6c 19       	ld.w	r9,r6[0x4]
80003882:	20 58       	sub	r8,5
80003884:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003888:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000388a:	6c 19       	ld.w	r9,r6[0x4]
8000388c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003890:	0f d8       	ld.ub	r8,r7[0x5]
80003892:	a9 78       	lsl	r8,0x9
80003894:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003898:	12 48       	or	r8,r9
8000389a:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000389c:	8e 38       	ld.sh	r8,r7[0x6]
8000389e:	30 29       	mov	r9,2
800038a0:	f2 08 19 00 	cp.h	r8,r9
800038a4:	e0 88 00 09 	brls	800038b6 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800038a8:	6c 18       	ld.w	r8,r6[0x4]
800038aa:	ad b8       	sbr	r8,0xd
800038ac:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800038ae:	8e b8       	ld.uh	r8,r7[0x6]
800038b0:	20 28       	sub	r8,2
800038b2:	8d a8       	st.w	r6[0x28],r8
800038b4:	c0 68       	rjmp	800038c0 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800038b6:	6c 19       	ld.w	r9,r6[0x4]
800038b8:	5c 78       	castu.h	r8
800038ba:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800038be:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800038c0:	6c 18       	ld.w	r8,r6[0x4]
800038c2:	e0 18 ff f0 	andl	r8,0xfff0
800038c6:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800038c8:	35 08       	mov	r8,80
800038ca:	8d 08       	st.w	r6[0x0],r8
800038cc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800038d0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800038d4:	80 00       	ld.sh	r0,r0[0x0]
800038d6:	37 e4       	mov	r4,126
800038d8:	80 00       	ld.sh	r0,r0[0x0]
800038da:	37 24       	mov	r4,114

800038dc <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
800038dc:	48 68       	lddpc	r8,800038f4 <fat_check_open+0x18>
800038de:	11 89       	ld.ub	r9,r8[0x0]
800038e0:	30 08       	mov	r8,0
800038e2:	f0 09 18 00 	cp.b	r9,r8
800038e6:	c0 20       	breq	800038ea <fat_check_open+0xe>
800038e8:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
800038ea:	31 79       	mov	r9,23
800038ec:	48 38       	lddpc	r8,800038f8 <fat_check_open+0x1c>
800038ee:	b0 89       	st.b	r8[0x0],r9
800038f0:	5e fd       	retal	0
800038f2:	00 00       	add	r0,r0
800038f4:	00 00       	add	r0,r0
800038f6:	09 8c       	ld.ub	r12,r4[0x0]
800038f8:	00 00       	add	r0,r0
800038fa:	0c 1c       	sub	r12,r6

800038fc <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
800038fc:	48 68       	lddpc	r8,80003914 <fat_check_select+0x18>
800038fe:	90 19       	ld.sh	r9,r8[0x2]
80003900:	3f f8       	mov	r8,-1
80003902:	f0 09 19 00 	cp.h	r9,r8
80003906:	c0 20       	breq	8000390a <fat_check_select+0xe>
80003908:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
8000390a:	30 f9       	mov	r9,15
8000390c:	48 38       	lddpc	r8,80003918 <fat_check_select+0x1c>
8000390e:	b0 89       	st.b	r8[0x0],r9
80003910:	5e fd       	retal	0
80003912:	00 00       	add	r0,r0
80003914:	00 00       	add	r0,r0
80003916:	0c 18       	sub	r8,r6
80003918:	00 00       	add	r0,r0
8000391a:	0c 1c       	sub	r12,r6

8000391c <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
8000391c:	48 58       	lddpc	r8,80003930 <fat_check_is_file+0x14>
8000391e:	11 a8       	ld.ub	r8,r8[0x2]
80003920:	e2 18 00 18 	andl	r8,0x18,COH
80003924:	c0 21       	brne	80003928 <fat_check_is_file+0xc>
80003926:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003928:	31 39       	mov	r9,19
8000392a:	48 38       	lddpc	r8,80003934 <fat_check_is_file+0x18>
8000392c:	b0 89       	st.b	r8[0x0],r9
8000392e:	5e fd       	retal	0
80003930:	00 00       	add	r0,r0
80003932:	09 8c       	ld.ub	r12,r4[0x0]
80003934:	00 00       	add	r0,r0
80003936:	0c 1c       	sub	r12,r6

80003938 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003938:	49 68       	lddpc	r8,80003990 <fat_checkcluster+0x58>
8000393a:	70 18       	ld.w	r8,r8[0x4]
8000393c:	58 08       	cp.w	r8,0
8000393e:	c0 21       	brne	80003942 <fat_checkcluster+0xa>
80003940:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80003942:	49 59       	lddpc	r9,80003994 <fat_checkcluster+0x5c>
80003944:	13 89       	ld.ub	r9,r9[0x0]
80003946:	30 3a       	mov	r10,3
80003948:	f4 09 18 00 	cp.b	r9,r10
8000394c:	c0 a1       	brne	80003960 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000394e:	e0 69 ff f7 	mov	r9,65527
80003952:	ea 19 0f ff 	orh	r9,0xfff
80003956:	12 38       	cp.w	r8,r9
80003958:	e0 8b 00 19 	brhi	8000398a <fat_checkcluster+0x52>
8000395c:	5f 0c       	sreq	r12
8000395e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80003960:	30 2a       	mov	r10,2
80003962:	f4 09 18 00 	cp.b	r9,r10
80003966:	c0 71       	brne	80003974 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80003968:	e0 48 ff f7 	cp.w	r8,65527
8000396c:	e0 8b 00 0f 	brhi	8000398a <fat_checkcluster+0x52>
80003970:	5f 0c       	sreq	r12
80003972:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80003974:	30 1a       	mov	r10,1
80003976:	f4 09 18 00 	cp.b	r9,r10
8000397a:	c0 20       	breq	8000397e <fat_checkcluster+0x46>
8000397c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
8000397e:	e0 48 0f f7 	cp.w	r8,4087
80003982:	e0 8b 00 04 	brhi	8000398a <fat_checkcluster+0x52>
80003986:	5f 0c       	sreq	r12
80003988:	5e fc       	retal	r12
8000398a:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
8000398c:	5e fc       	retal	r12
8000398e:	00 00       	add	r0,r0
80003990:	00 00       	add	r0,r0
80003992:	0c 6c       	and	r12,r6
80003994:	00 00       	add	r0,r0
80003996:	0c 18       	sub	r8,r6

80003998 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003998:	30 0a       	mov	r10,0
8000399a:	48 88       	lddpc	r8,800039b8 <fat_cache_clusterlist_reset+0x20>
8000399c:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000399e:	48 88       	lddpc	r8,800039bc <fat_cache_clusterlist_reset+0x24>
800039a0:	30 19       	mov	r9,1
800039a2:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800039a4:	3f f9       	mov	r9,-1
800039a6:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800039a8:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800039aa:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800039ae:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800039b2:	f1 69 00 15 	st.b	r8[21],r9
   }
}
800039b6:	5e fc       	retal	r12
800039b8:	00 00       	add	r0,r0
800039ba:	0c 1e       	sub	lr,r6
800039bc:	00 00       	add	r0,r0
800039be:	09 a0       	ld.ub	r0,r4[0x2]

800039c0 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800039c0:	48 c9       	lddpc	r9,800039f0 <fat_cache_clusterlist_update_start+0x30>
800039c2:	13 88       	ld.ub	r8,r9[0x0]
800039c4:	f8 08 18 00 	cp.b	r8,r12
800039c8:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800039ca:	48 ba       	lddpc	r10,800039f4 <fat_cache_clusterlist_update_start+0x34>
800039cc:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800039ce:	f0 0a 15 02 	lsl	r10,r8,0x2
800039d2:	10 0a       	add	r10,r8
800039d4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800039d8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800039da:	3f fb       	mov	r11,-1
800039dc:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800039de:	2f fa       	sub	r10,-1
800039e0:	48 6b       	lddpc	r11,800039f8 <fat_cache_clusterlist_update_start+0x38>
800039e2:	76 0b       	ld.w	r11,r11[0x0]
800039e4:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800039e8:	48 59       	lddpc	r9,800039fc <fat_cache_clusterlist_update_start+0x3c>
800039ea:	72 19       	ld.w	r9,r9[0x4]
800039ec:	91 29       	st.w	r8[0x8],r9
}
800039ee:	5e fc       	retal	r12
800039f0:	00 00       	add	r0,r0
800039f2:	09 a0       	ld.ub	r0,r4[0x2]
800039f4:	00 00       	add	r0,r0
800039f6:	0c 1e       	sub	lr,r6
800039f8:	00 00       	add	r0,r0
800039fa:	0c 6c       	and	r12,r6
800039fc:	00 00       	add	r0,r0
800039fe:	0c 74       	tst	r4,r6

80003a00 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80003a00:	49 88       	lddpc	r8,80003a60 <fat_cache_clusterlist_update_select+0x60>
80003a02:	11 88       	ld.ub	r8,r8[0x0]
80003a04:	49 8a       	lddpc	r10,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a06:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80003a0a:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
80003a0e:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80003a10:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80003a12:	15 8a       	ld.ub	r10,r10[0x0]
80003a14:	f2 0a 18 00 	cp.b	r10,r9
80003a18:	c0 a1       	brne	80003a2c <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80003a1a:	49 3a       	lddpc	r10,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a1c:	15 9a       	ld.ub	r10,r10[0x1]
80003a1e:	f4 0b 18 00 	cp.b	r11,r10
80003a22:	e0 88 00 05 	brls	80003a2c <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003a26:	2f fa       	sub	r10,-1
80003a28:	48 fc       	lddpc	r12,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a2a:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80003a2c:	48 ea       	lddpc	r10,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a2e:	f5 3a 00 14 	ld.ub	r10,r10[20]
80003a32:	f2 0a 18 00 	cp.b	r10,r9
80003a36:	c0 c1       	brne	80003a4e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80003a38:	48 b9       	lddpc	r9,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a3a:	f3 39 00 15 	ld.ub	r9,r9[21]
80003a3e:	f2 0b 18 00 	cp.b	r11,r9
80003a42:	e0 88 00 06 	brls	80003a4e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003a46:	2f f9       	sub	r9,-1
80003a48:	48 7a       	lddpc	r10,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a4a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80003a4e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003a52:	48 59       	lddpc	r9,80003a64 <fat_cache_clusterlist_update_select+0x64>
80003a54:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003a58:	30 09       	mov	r9,0
80003a5a:	b0 99       	st.b	r8[0x1],r9
}
80003a5c:	5e fc       	retal	r12
80003a5e:	00 00       	add	r0,r0
80003a60:	00 00       	add	r0,r0
80003a62:	0c 1e       	sub	lr,r6
80003a64:	00 00       	add	r0,r0
80003a66:	09 a0       	ld.ub	r0,r4[0x2]

80003a68 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80003a68:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80003a6c:	49 08       	lddpc	r8,80003aac <fat_cache_clusterlist_update_finish+0x44>
80003a6e:	11 88       	ld.ub	r8,r8[0x0]
80003a70:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003a74:	48 f9       	lddpc	r9,80003ab0 <fat_cache_clusterlist_update_finish+0x48>
80003a76:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003a7a:	f0 ca ff f8 	sub	r10,r8,-8
80003a7e:	48 eb       	lddpc	r11,80003ab4 <fat_cache_clusterlist_update_finish+0x4c>
80003a80:	17 97       	ld.ub	r7,r11[0x1]
80003a82:	74 09       	ld.w	r9,r10[0x0]
80003a84:	f2 07 0d 06 	divu	r6,r9,r7
80003a88:	0e 99       	mov	r9,r7
80003a8a:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80003a8c:	17 8b       	ld.ub	r11,r11[0x0]
80003a8e:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80003a90:	74 0b       	ld.w	r11,r10[0x0]
80003a92:	12 1b       	sub	r11,r9
80003a94:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80003a96:	48 9a       	lddpc	r10,80003ab8 <fat_cache_clusterlist_update_finish+0x50>
80003a98:	74 0b       	ld.w	r11,r10[0x0]
80003a9a:	12 1b       	sub	r11,r9
80003a9c:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80003a9e:	74 1a       	ld.w	r10,r10[0x4]
80003aa0:	14 09       	add	r9,r10
80003aa2:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80003aa4:	f0 1f 00 06 	mcall	80003abc <fat_cache_clusterlist_update_finish+0x54>
}
80003aa8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003aac:	00 00       	add	r0,r0
80003aae:	0c 1e       	sub	lr,r6
80003ab0:	00 00       	add	r0,r0
80003ab2:	09 a0       	ld.ub	r0,r4[0x2]
80003ab4:	00 00       	add	r0,r0
80003ab6:	0b cc       	ld.ub	r12,r5[0x4]
80003ab8:	00 00       	add	r0,r0
80003aba:	0c 74       	tst	r4,r6
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	3a 00       	mov	r0,-96

80003ac0 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80003ac0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80003ac4:	4c 18       	lddpc	r8,80003bc8 <fat_cache_clusterlist_update_read+0x108>
80003ac6:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003ac8:	4c 18       	lddpc	r8,80003bcc <fat_cache_clusterlist_update_read+0x10c>
80003aca:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003acc:	4c 18       	lddpc	r8,80003bd0 <fat_cache_clusterlist_update_read+0x110>
80003ace:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003ad0:	4c 18       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003ad2:	11 88       	ld.ub	r8,r8[0x0]
80003ad4:	f8 08 18 00 	cp.b	r8,r12
80003ad8:	c1 11       	brne	80003afa <fat_cache_clusterlist_update_read+0x3a>
80003ada:	4b f8       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003adc:	11 a8       	ld.ub	r8,r8[0x2]
80003ade:	f2 08 18 00 	cp.b	r8,r9
80003ae2:	c0 c1       	brne	80003afa <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003ae4:	4b c8       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003ae6:	70 18       	ld.w	r8,r8[0x4]
80003ae8:	14 38       	cp.w	r8,r10
80003aea:	c0 81       	brne	80003afa <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003aec:	4b a8       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003aee:	70 28       	ld.w	r8,r8[0x8]
80003af0:	10 3b       	cp.w	r11,r8
80003af2:	c0 43       	brcs	80003afa <fat_cache_clusterlist_update_read+0x3a>
80003af4:	30 0a       	mov	r10,0
80003af6:	14 99       	mov	r9,r10
80003af8:	c1 88       	rjmp	80003b28 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80003afa:	4b 78       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003afc:	f1 38 00 14 	ld.ub	r8,r8[20]
80003b00:	f8 08 18 00 	cp.b	r8,r12
80003b04:	c5 e1       	brne	80003bc0 <fat_cache_clusterlist_update_read+0x100>
80003b06:	4b 48       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b08:	f1 38 00 16 	ld.ub	r8,r8[22]
80003b0c:	f2 08 18 00 	cp.b	r8,r9
80003b10:	c5 81       	brne	80003bc0 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80003b12:	4b 18       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b14:	70 68       	ld.w	r8,r8[0x18]
80003b16:	14 38       	cp.w	r8,r10
80003b18:	c5 41       	brne	80003bc0 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003b1a:	4a f8       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b1c:	70 78       	ld.w	r8,r8[0x1c]
80003b1e:	16 38       	cp.w	r8,r11
80003b20:	e0 8b 00 50 	brhi	80003bc0 <fat_cache_clusterlist_update_read+0x100>
80003b24:	30 1a       	mov	r10,1
80003b26:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80003b28:	f2 0e 15 02 	lsl	lr,r9,0x2
80003b2c:	12 0e       	add	lr,r9
80003b2e:	4a ac       	lddpc	r12,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b30:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80003b34:	78 4c       	ld.w	r12,r12[0x10]
80003b36:	f6 08 01 08 	sub	r8,r11,r8
80003b3a:	10 3c       	cp.w	r12,r8
80003b3c:	e0 88 00 16 	brls	80003b68 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80003b40:	4a 4b       	lddpc	r11,80003bd0 <fat_cache_clusterlist_update_read+0x110>
80003b42:	f2 0e 15 02 	lsl	lr,r9,0x2
80003b46:	fc 09 00 09 	add	r9,lr,r9
80003b4a:	4a 3e       	lddpc	lr,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b4c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80003b50:	72 39       	ld.w	r9,r9[0xc]
80003b52:	f0 09 00 09 	add	r9,r8,r9
80003b56:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80003b58:	10 1c       	sub	r12,r8
80003b5a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80003b5c:	49 f8       	lddpc	r8,80003bd8 <fat_cache_clusterlist_update_read+0x118>
80003b5e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80003b60:	f0 1f 00 1f 	mcall	80003bdc <fat_cache_clusterlist_update_read+0x11c>
80003b64:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80003b68:	49 c8       	lddpc	r8,80003bd8 <fat_cache_clusterlist_update_read+0x118>
80003b6a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80003b6c:	f2 08 15 02 	lsl	r8,r9,0x2
80003b70:	f0 09 00 09 	add	r9,r8,r9
80003b74:	49 88       	lddpc	r8,80003bd4 <fat_cache_clusterlist_update_read+0x114>
80003b76:	f0 09 00 28 	add	r8,r8,r9<<0x2
80003b7a:	3f f9       	mov	r9,-1
80003b7c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80003b7e:	70 4c       	ld.w	r12,r8[0x10]
80003b80:	49 2a       	lddpc	r10,80003bc8 <fat_cache_clusterlist_update_read+0x108>
80003b82:	15 99       	ld.ub	r9,r10[0x1]
80003b84:	70 3e       	ld.w	lr,r8[0xc]
80003b86:	f8 0e 00 0e 	add	lr,r12,lr
80003b8a:	20 1e       	sub	lr,1
80003b8c:	74 57       	ld.w	r7,r10[0x14]
80003b8e:	fc 07 01 07 	sub	r7,lr,r7
80003b92:	74 4a       	ld.w	r10,r10[0x10]
80003b94:	14 17       	sub	r7,r10
80003b96:	ee 09 0d 06 	divu	r6,r7,r9
80003b9a:	0c 97       	mov	r7,r6
80003b9c:	2f e7       	sub	r7,-2
80003b9e:	48 ca       	lddpc	r10,80003bcc <fat_cache_clusterlist_update_read+0x10c>
80003ba0:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80003ba2:	2f 88       	sub	r8,-8
80003ba4:	70 0a       	ld.w	r10,r8[0x0]
80003ba6:	14 0c       	add	r12,r10
80003ba8:	f8 c7 00 01 	sub	r7,r12,1
80003bac:	ee 09 0d 06 	divu	r6,r7,r9
80003bb0:	ad 39       	mul	r9,r6
80003bb2:	48 8a       	lddpc	r10,80003bd0 <fat_cache_clusterlist_update_read+0x110>
80003bb4:	f6 09 01 09 	sub	r9,r11,r9
80003bb8:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80003bba:	91 0b       	st.w	r8[0x0],r11
80003bbc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80003bc0:	f0 1f 00 08 	mcall	80003be0 <fat_cache_clusterlist_update_read+0x120>
80003bc4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80003bc8:	00 00       	add	r0,r0
80003bca:	0b cc       	ld.ub	r12,r5[0x4]
80003bcc:	00 00       	add	r0,r0
80003bce:	0c 6c       	and	r12,r6
80003bd0:	00 00       	add	r0,r0
80003bd2:	0c 74       	tst	r4,r6
80003bd4:	00 00       	add	r0,r0
80003bd6:	09 a0       	ld.ub	r0,r4[0x2]
80003bd8:	00 00       	add	r0,r0
80003bda:	0c 1e       	sub	lr,r6
80003bdc:	80 00       	ld.sh	r0,r0[0x0]
80003bde:	3a 00       	mov	r0,-96
80003be0:	80 00       	ld.sh	r0,r0[0x0]
80003be2:	39 c0       	mov	r0,-100

80003be4 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80003be4:	30 d9       	mov	r9,13
80003be6:	48 48       	lddpc	r8,80003bf4 <fat_entry_is_dir+0x10>
80003be8:	b0 89       	st.b	r8[0x0],r9
80003bea:	48 48       	lddpc	r8,80003bf8 <fat_entry_is_dir+0x14>
80003bec:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80003bee:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003bf2:	5e fc       	retal	r12
80003bf4:	00 00       	add	r0,r0
80003bf6:	0c 1c       	sub	r12,r6
80003bf8:	00 00       	add	r0,r0
80003bfa:	09 8c       	ld.ub	r12,r4[0x0]

80003bfc <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
80003bfc:	3f f9       	mov	r9,-1
80003bfe:	48 c8       	lddpc	r8,80003c2c <fat_clear_entry_info_and_ptr+0x30>
80003c00:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80003c02:	48 c8       	lddpc	r8,80003c30 <fat_clear_entry_info_and_ptr+0x34>
80003c04:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80003c08:	f1 39 00 2d 	ld.ub	r9,r8[45]
80003c0c:	30 08       	mov	r8,0
80003c0e:	f0 09 18 00 	cp.b	r9,r8
80003c12:	c0 51       	brne	80003c1c <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80003c14:	10 99       	mov	r9,r8
80003c16:	48 78       	lddpc	r8,80003c30 <fat_clear_entry_info_and_ptr+0x34>
80003c18:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
80003c1c:	48 68       	lddpc	r8,80003c34 <fat_clear_entry_info_and_ptr+0x38>
80003c1e:	30 09       	mov	r9,0
80003c20:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80003c22:	30 0a       	mov	r10,0
80003c24:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80003c26:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80003c28:	b0 89       	st.b	r8[0x0],r9
}
80003c2a:	5e fc       	retal	r12
80003c2c:	00 00       	add	r0,r0
80003c2e:	0c 18       	sub	r8,r6
80003c30:	00 00       	add	r0,r0
80003c32:	0b cc       	ld.ub	r12,r5[0x4]
80003c34:	00 00       	add	r0,r0
80003c36:	09 8c       	ld.ub	r12,r4[0x0]

80003c38 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80003c38:	30 08       	mov	r8,0
80003c3a:	f0 0c 19 00 	cp.h	r12,r8
80003c3e:	5f 0a       	sreq	r10
80003c40:	35 c9       	mov	r9,92
80003c42:	f2 0c 19 00 	cp.h	r12,r9
80003c46:	5f 09       	sreq	r9
80003c48:	f5 e9 10 09 	or	r9,r10,r9
80003c4c:	f0 09 18 00 	cp.b	r9,r8
80003c50:	c0 20       	breq	80003c54 <fat_check_eof_name+0x1c>
80003c52:	5e ff       	retal	1
80003c54:	32 f8       	mov	r8,47
80003c56:	f0 0c 19 00 	cp.h	r12,r8
80003c5a:	5f 0c       	sreq	r12
}
80003c5c:	5e fc       	retal	r12
80003c5e:	d7 03       	nop

80003c60 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80003c60:	48 48       	lddpc	r8,80003c70 <fat_get_ptr_entry+0x10>
80003c62:	90 98       	ld.uh	r8,r8[0x2]
80003c64:	a5 78       	lsl	r8,0x5
80003c66:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80003c6a:	48 3c       	lddpc	r12,80003c74 <fat_get_ptr_entry+0x14>
80003c6c:	10 0c       	add	r12,r8
80003c6e:	5e fc       	retal	r12
80003c70:	00 00       	add	r0,r0
80003c72:	0c 18       	sub	r8,r6
80003c74:	00 00       	add	r0,r0
80003c76:	09 cc       	ld.ub	r12,r4[0x4]

80003c78 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80003c78:	d4 31       	pushm	r0-r7,lr
80003c7a:	20 3d       	sub	sp,12
80003c7c:	18 97       	mov	r7,r12
80003c7e:	16 94       	mov	r4,r11
80003c80:	14 96       	mov	r6,r10
80003c82:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80003c84:	f0 1f 00 5e 	mcall	80003dfc <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80003c88:	19 88       	ld.ub	r8,r12[0x0]
80003c8a:	30 09       	mov	r9,0
80003c8c:	f2 08 18 00 	cp.b	r8,r9
80003c90:	5f 0b       	sreq	r11
80003c92:	3e 5a       	mov	r10,-27
80003c94:	f4 08 18 00 	cp.b	r8,r10
80003c98:	5f 0a       	sreq	r10
80003c9a:	f7 ea 10 0a 	or	r10,r11,r10
80003c9e:	f2 0a 18 00 	cp.b	r10,r9
80003ca2:	c0 71       	brne	80003cb0 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80003ca4:	f9 3a 00 0b 	ld.ub	r10,r12[11]
80003ca8:	30 f9       	mov	r9,15
80003caa:	f2 0a 18 00 	cp.b	r10,r9
80003cae:	c0 60       	breq	80003cba <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80003cb0:	30 b9       	mov	r9,11
80003cb2:	4d 48       	lddpc	r8,80003e00 <fat_entry_longname+0x188>
80003cb4:	b0 89       	st.b	r8[0x0],r9
80003cb6:	30 0c       	mov	r12,0
      return false;
80003cb8:	c9 c8       	rjmp	80003df0 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
80003cba:	4d 39       	lddpc	r9,80003e04 <fat_entry_longname+0x18c>
80003cbc:	13 8a       	ld.ub	r10,r9[0x0]
80003cbe:	30 09       	mov	r9,0
80003cc0:	f2 0a 18 00 	cp.b	r10,r9
80003cc4:	c0 90       	breq	80003cd6 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
80003cc6:	e2 18 00 40 	andl	r8,0x40,COH
80003cca:	c0 61       	brne	80003cd6 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
80003ccc:	31 09       	mov	r9,16
80003cce:	4c d8       	lddpc	r8,80003e00 <fat_entry_longname+0x188>
80003cd0:	b0 89       	st.b	r8[0x0],r9
80003cd2:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
80003cd4:	c8 e8       	rjmp	80003df0 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
80003cd6:	2f fc       	sub	r12,-1
80003cd8:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003cda:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003cde:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80003ce0:	4c 95       	lddpc	r5,80003e04 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003ce2:	20 14       	sub	r4,1
80003ce4:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80003ce6:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003ce8:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003cea:	19 89       	ld.ub	r9,r12[0x0]
80003cec:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
80003cee:	19 99       	ld.ub	r9,r12[0x1]
80003cf0:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
80003cf2:	58 06       	cp.w	r6,0
80003cf4:	c0 f0       	breq	80003d12 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
80003cf6:	0b 89       	ld.ub	r9,r5[0x0]
80003cf8:	f6 09 18 00 	cp.b	r9,r11
80003cfc:	c3 91       	brne	80003d6e <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003cfe:	40 1e       	lddsp	lr,sp[0x4]
80003d00:	1c 38       	cp.w	r8,lr
80003d02:	c0 55       	brlt	80003d0c <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80003d04:	30 08       	mov	r8,0
80003d06:	ae 88       	st.b	r7[0x0],r8
80003d08:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
80003d0a:	c7 38       	rjmp	80003df0 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80003d0c:	9a 59       	ld.sh	r9,sp[0xa]
80003d0e:	ae 89       	st.b	r7[0x0],r9
80003d10:	c2 f8       	rjmp	80003d6e <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
80003d12:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80003d14:	32 a3       	mov	r3,42
80003d16:	e6 09 19 00 	cp.h	r9,r3
80003d1a:	c6 a0       	breq	80003dee <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003d1c:	9a 5e       	ld.sh	lr,sp[0xa]
80003d1e:	58 0e       	cp.w	lr,0
80003d20:	c0 e1       	brne	80003d3c <fat_entry_longname+0xc4>
80003d22:	35 c0       	mov	r0,92
80003d24:	e0 09 19 00 	cp.h	r9,r0
80003d28:	5f 12       	srne	r2
80003d2a:	32 f3       	mov	r3,47
80003d2c:	e6 09 19 00 	cp.h	r9,r3
80003d30:	5f 13       	srne	r3
80003d32:	e5 e3 00 03 	and	r3,r2,r3
80003d36:	f6 03 18 00 	cp.b	r3,r11
80003d3a:	c1 e0       	breq	80003d76 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80003d3c:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80003d40:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003d44:	e4 c0 ff e0 	sub	r0,r2,-32
80003d48:	00 33       	cp.w	r3,r0
80003d4a:	c0 41       	brne	80003d52 <fat_entry_longname+0xda>
80003d4c:	40 00       	lddsp	r0,sp[0x0]
80003d4e:	58 00       	cp.w	r0,0
80003d50:	c0 f0       	breq	80003d6e <fat_entry_longname+0xf6>
80003d52:	22 02       	sub	r2,32
80003d54:	04 33       	cp.w	r3,r2
80003d56:	c0 41       	brne	80003d5e <fat_entry_longname+0xe6>
80003d58:	40 03       	lddsp	r3,sp[0x0]
80003d5a:	58 03       	cp.w	r3,0
80003d5c:	c0 90       	breq	80003d6e <fat_entry_longname+0xf6>
80003d5e:	fc 09 19 00 	cp.h	r9,lr
80003d62:	c0 60       	breq	80003d6e <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80003d64:	31 69       	mov	r9,22
80003d66:	4a 78       	lddpc	r8,80003e00 <fat_entry_longname+0x188>
80003d68:	b0 89       	st.b	r8[0x0],r9
80003d6a:	30 0c       	mov	r12,0
           return false;
80003d6c:	c4 28       	rjmp	80003df0 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
80003d6e:	9a 59       	ld.sh	r9,sp[0xa]
80003d70:	e2 09 19 00 	cp.h	r9,r1
80003d74:	c0 b1       	brne	80003d8a <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80003d76:	4a 49       	lddpc	r9,80003e04 <fat_entry_longname+0x18c>
80003d78:	13 8a       	ld.ub	r10,r9[0x0]
80003d7a:	30 09       	mov	r9,0
80003d7c:	f2 0a 18 00 	cp.b	r10,r9
80003d80:	c3 70       	breq	80003dee <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80003d82:	2f f8       	sub	r8,-1
80003d84:	ae 08       	st.h	r7[0x0],r8
80003d86:	30 1c       	mov	r12,1
80003d88:	c3 48       	rjmp	80003df0 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003d8a:	e8 08 18 00 	cp.b	r8,r4
80003d8e:	c0 31       	brne	80003d94 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
80003d90:	2f dc       	sub	r12,-3
80003d92:	c2 58       	rjmp	80003ddc <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
80003d94:	30 a9       	mov	r9,10
80003d96:	f2 08 18 00 	cp.b	r8,r9
80003d9a:	c0 31       	brne	80003da0 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
80003d9c:	2f ec       	sub	r12,-2
80003d9e:	c1 f8       	rjmp	80003ddc <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
80003da0:	30 c9       	mov	r9,12
80003da2:	f2 08 18 00 	cp.b	r8,r9
80003da6:	c1 b1       	brne	80003ddc <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
80003da8:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80003dac:	e2 18 00 40 	andl	r8,0x40,COH
80003db0:	c0 61       	brne	80003dbc <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80003db2:	31 09       	mov	r9,16
80003db4:	49 38       	lddpc	r8,80003e00 <fat_entry_longname+0x188>
80003db6:	b0 89       	st.b	r8[0x0],r9
80003db8:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
80003dba:	c1 b8       	rjmp	80003df0 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80003dbc:	58 06       	cp.w	r6,0
80003dbe:	c0 b0       	breq	80003dd4 <fat_entry_longname+0x15c>
80003dc0:	49 18       	lddpc	r8,80003e04 <fat_entry_longname+0x18c>
80003dc2:	11 89       	ld.ub	r9,r8[0x0]
80003dc4:	30 08       	mov	r8,0
80003dc6:	f0 09 18 00 	cp.b	r9,r8
80003dca:	c1 50       	breq	80003df4 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
80003dcc:	30 e8       	mov	r8,14
80003dce:	ae 08       	st.h	r7[0x0],r8
80003dd0:	30 1c       	mov	r12,1
               return true;
80003dd2:	c0 f8       	rjmp	80003df0 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
80003dd4:	0f 9c       	ld.ub	r12,r7[0x1]
80003dd6:	f0 1f 00 0d 	mcall	80003e08 <fat_entry_longname+0x190>
80003dda:	c0 b8       	rjmp	80003df0 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
80003ddc:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
80003dde:	f6 09 18 00 	cp.b	r9,r11
80003de2:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80003de6:	2f f8       	sub	r8,-1
80003de8:	5c 58       	castu.b	r8
      ptr_entry+=2;
80003dea:	2f ec       	sub	r12,-2
   }
80003dec:	c7 fb       	rjmp	80003cea <fat_entry_longname+0x72>
80003dee:	30 1c       	mov	r12,1
}
80003df0:	2f dd       	sub	sp,-12
80003df2:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80003df4:	30 08       	mov	r8,0
80003df6:	ae 98       	st.b	r7[0x1],r8
80003df8:	30 1c       	mov	r12,1
               }
               return true;
80003dfa:	cf bb       	rjmp	80003df0 <fat_entry_longname+0x178>
80003dfc:	80 00       	ld.sh	r0,r0[0x0]
80003dfe:	3c 60       	mov	r0,-58
80003e00:	00 00       	add	r0,r0
80003e02:	0c 1c       	sub	r12,r6
80003e04:	00 00       	add	r0,r0
80003e06:	0c 1d       	sub	sp,r6
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c 38       	mov	r8,-61

80003e0c <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
80003e0c:	d4 31       	pushm	r0-r7,lr
80003e0e:	20 2d       	sub	sp,8
80003e10:	18 97       	mov	r7,r12
80003e12:	50 1b       	stdsp	sp[0x4],r11
80003e14:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80003e16:	31 69       	mov	r9,22
80003e18:	4b c8       	lddpc	r8,80003f08 <fat_entry_shortname+0xfc>
80003e1a:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
80003e1c:	f0 1f 00 3c 	mcall	80003f0c <fat_entry_shortname+0x100>
80003e20:	30 08       	mov	r8,0
80003e22:	10 9a       	mov	r10,r8
80003e24:	30 1b       	mov	r11,1
80003e26:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003e28:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003e2a:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80003e2c:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003e2e:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80003e30:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003e32:	fc 08 18 00 	cp.b	r8,lr
80003e36:	c1 90       	breq	80003e68 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80003e38:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80003e3c:	ea 08 18 00 	cp.b	r8,r5
80003e40:	c0 41       	brne	80003e48 <fat_entry_shortname+0x3c>
80003e42:	40 01       	lddsp	r1,sp[0x0]
80003e44:	58 01       	cp.w	r1,0
80003e46:	c0 81       	brne	80003e56 <fat_entry_shortname+0x4a>
80003e48:	e8 09 18 00 	cp.b	r9,r4
80003e4c:	c0 f1       	brne	80003e6a <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80003e4e:	ea 08 18 00 	cp.b	r8,r5
80003e52:	e0 8b 00 0b 	brhi	80003e68 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003e56:	f9 39 00 08 	ld.ub	r9,r12[8]
80003e5a:	e8 09 18 00 	cp.b	r9,r4
80003e5e:	c0 50       	breq	80003e68 <fat_entry_shortname+0x5c>
80003e60:	30 78       	mov	r8,7
80003e62:	32 e9       	mov	r9,46
80003e64:	50 03       	stdsp	sp[0x0],r3
80003e66:	c0 28       	rjmp	80003e6a <fat_entry_shortname+0x5e>
80003e68:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
80003e6a:	58 06       	cp.w	r6,0
80003e6c:	c1 80       	breq	80003e9c <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
80003e6e:	4a 9b       	lddpc	r11,80003f10 <fat_entry_shortname+0x104>
80003e70:	17 81       	ld.ub	r1,r11[0x0]
80003e72:	30 0b       	mov	r11,0
80003e74:	f6 01 18 00 	cp.b	r1,r11
80003e78:	c2 c1       	brne	80003ed0 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
80003e7a:	40 1b       	lddsp	r11,sp[0x4]
80003e7c:	20 1b       	sub	r11,1
80003e7e:	16 3a       	cp.w	r10,r11
80003e80:	c0 35       	brlt	80003e86 <fat_entry_shortname+0x7a>
80003e82:	06 99       	mov	r9,r3
80003e84:	c0 a8       	rjmp	80003e98 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80003e86:	f2 c1 00 41 	sub	r1,r9,65
80003e8a:	31 9b       	mov	r11,25
80003e8c:	f6 01 18 00 	cp.b	r1,r11
80003e90:	e0 8b 00 04 	brhi	80003e98 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
80003e94:	2e 09       	sub	r9,-32
80003e96:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80003e98:	ae 89       	st.b	r7[0x0],r9
80003e9a:	c1 b8       	rjmp	80003ed0 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80003e9c:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
80003e9e:	e4 0b 18 00 	cp.b	r11,r2
80003ea2:	c2 f0       	breq	80003f00 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80003ea4:	58 09       	cp.w	r9,0
80003ea6:	c0 c1       	brne	80003ebe <fat_entry_shortname+0xb2>
80003ea8:	35 c1       	mov	r1,92
80003eaa:	e2 0b 18 00 	cp.b	r11,r1
80003eae:	5f 10       	srne	r0
80003eb0:	32 f1       	mov	r1,47
80003eb2:	e2 0b 18 00 	cp.b	r11,r1
80003eb6:	5f 11       	srne	r1
80003eb8:	e1 e1 00 01 	and	r1,r0,r1
80003ebc:	c0 c0       	breq	80003ed4 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
80003ebe:	f2 0b 18 00 	cp.b	r11,r9
80003ec2:	c0 70       	breq	80003ed0 <fat_entry_shortname+0xc4>
80003ec4:	f2 c1 ff e0 	sub	r1,r9,-32
80003ec8:	02 3b       	cp.w	r11,r1
80003eca:	c0 30       	breq	80003ed0 <fat_entry_shortname+0xc4>
80003ecc:	30 0c       	mov	r12,0
80003ece:	c1 a8       	rjmp	80003f02 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80003ed0:	58 09       	cp.w	r9,0
80003ed2:	c0 b1       	brne	80003ee8 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
80003ed4:	48 f8       	lddpc	r8,80003f10 <fat_entry_shortname+0x104>
80003ed6:	11 89       	ld.ub	r9,r8[0x0]
80003ed8:	30 08       	mov	r8,0
80003eda:	f0 09 18 00 	cp.b	r9,r8
80003ede:	c1 10       	breq	80003f00 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80003ee0:	2f fa       	sub	r10,-1
80003ee2:	ae 0a       	st.h	r7[0x0],r10
80003ee4:	30 1c       	mov	r12,1
80003ee6:	c0 e8       	rjmp	80003f02 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
80003ee8:	48 a9       	lddpc	r9,80003f10 <fat_entry_shortname+0x104>
80003eea:	13 8b       	ld.ub	r11,r9[0x0]
80003eec:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
80003eee:	f2 0b 18 00 	cp.b	r11,r9
80003ef2:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80003ef6:	2f fa       	sub	r10,-1
80003ef8:	5c 5a       	castu.b	r10
      u8_pos_entry++;
80003efa:	2f f8       	sub	r8,-1
80003efc:	5c 58       	castu.b	r8
   }
80003efe:	c9 ab       	rjmp	80003e32 <fat_entry_shortname+0x26>
80003f00:	30 1c       	mov	r12,1
}
80003f02:	2f ed       	sub	sp,-8
80003f04:	d8 32       	popm	r0-r7,pc
80003f06:	00 00       	add	r0,r0
80003f08:	00 00       	add	r0,r0
80003f0a:	0c 1c       	sub	r12,r6
80003f0c:	80 00       	ld.sh	r0,r0[0x0]
80003f0e:	3c 60       	mov	r0,-58
80003f10:	00 00       	add	r0,r0
80003f12:	0c 1d       	sub	sp,r6

80003f14 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
80003f14:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80003f16:	f0 1f 00 10 	mcall	80003f54 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80003f1a:	49 08       	lddpc	r8,80003f58 <fat_get_entry_info+0x44>
80003f1c:	f9 39 00 0b 	ld.ub	r9,r12[11]
80003f20:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80003f22:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003f26:	f0 c9 ff fc 	sub	r9,r8,-4
80003f2a:	15 8b       	ld.ub	r11,r10[0x0]
80003f2c:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003f2e:	15 9a       	ld.ub	r10,r10[0x1]
80003f30:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80003f32:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003f36:	15 8b       	ld.ub	r11,r10[0x0]
80003f38:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003f3a:	15 9a       	ld.ub	r10,r10[0x1]
80003f3c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
80003f3e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80003f40:	2f 88       	sub	r8,-8
80003f42:	19 89       	ld.ub	r9,r12[0x0]
80003f44:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80003f46:	19 99       	ld.ub	r9,r12[0x1]
80003f48:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80003f4a:	19 a9       	ld.ub	r9,r12[0x2]
80003f4c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
80003f4e:	19 b9       	ld.ub	r9,r12[0x3]
80003f50:	b0 89       	st.b	r8[0x0],r9
}
80003f52:	d8 02       	popm	pc
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3c 60       	mov	r0,-58
80003f58:	00 00       	add	r0,r0
80003f5a:	09 8c       	ld.ub	r12,r4[0x0]

80003f5c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80003f5c:	eb cd 40 80 	pushm	r7,lr
80003f60:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80003f62:	f0 1f 00 14 	mcall	80003fb0 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80003f66:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80003f68:	58 08       	cp.w	r8,0
80003f6a:	c0 61       	brne	80003f76 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80003f6c:	30 a9       	mov	r9,10
80003f6e:	49 28       	lddpc	r8,80003fb4 <fat_entry_check+0x58>
80003f70:	b0 89       	st.b	r8[0x0],r9
80003f72:	30 07       	mov	r7,0
      return false;
80003f74:	c1 a8       	rjmp	80003fa8 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80003f76:	30 ba       	mov	r10,11
80003f78:	48 f9       	lddpc	r9,80003fb4 <fat_entry_check+0x58>
80003f7a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80003f7c:	3e 59       	mov	r9,-27
80003f7e:	f2 08 18 00 	cp.b	r8,r9
80003f82:	c1 20       	breq	80003fa6 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80003f84:	32 e9       	mov	r9,46
80003f86:	f2 08 18 00 	cp.b	r8,r9
80003f8a:	c0 e0       	breq	80003fa6 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80003f8c:	f9 38 00 0b 	ld.ub	r8,r12[11]
80003f90:	10 99       	mov	r9,r8
80003f92:	e2 19 00 08 	andl	r9,0x8,COH
80003f96:	c0 81       	brne	80003fa6 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80003f98:	e2 18 00 10 	andl	r8,0x10,COH
80003f9c:	c0 60       	breq	80003fa8 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
80003f9e:	ec 17 00 01 	eorl	r7,0x1
80003fa2:	5c 57       	castu.b	r7
80003fa4:	c0 28       	rjmp	80003fa8 <fat_entry_check+0x4c>
80003fa6:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
80003fa8:	0e 9c       	mov	r12,r7
80003faa:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fae:	00 00       	add	r0,r0
80003fb0:	80 00       	ld.sh	r0,r0[0x0]
80003fb2:	3c 60       	mov	r0,-58
80003fb4:	00 00       	add	r0,r0
80003fb6:	0c 1c       	sub	r12,r6

80003fb8 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003fb8:	48 58       	lddpc	r8,80003fcc <fat_cache_reset+0x14>
80003fba:	3f f9       	mov	r9,-1
80003fbc:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
80003fbe:	30 09       	mov	r9,0
80003fc0:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003fc4:	3f f9       	mov	r9,-1
80003fc6:	91 39       	st.w	r8[0xc],r9
}
80003fc8:	5e fc       	retal	r12
80003fca:	00 00       	add	r0,r0
80003fcc:	00 00       	add	r0,r0
80003fce:	0c 54       	eor	r4,r6

80003fd0 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
80003fd0:	30 19       	mov	r9,1
80003fd2:	48 38       	lddpc	r8,80003fdc <fat_cache_mark_sector_as_dirty+0xc>
80003fd4:	f1 69 00 08 	st.b	r8[8],r9
}
80003fd8:	5e fc       	retal	r12
80003fda:	00 00       	add	r0,r0
80003fdc:	00 00       	add	r0,r0
80003fde:	0c 54       	eor	r4,r6

80003fe0 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
80003fe0:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
80003fe2:	f0 1f 00 11 	mcall	80004024 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
80003fe6:	f0 1f 00 11 	mcall	80004028 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
80003fea:	49 18       	lddpc	r8,8000402c <fat_write_entry_file+0x4c>
80003fec:	11 a9       	ld.ub	r9,r8[0x2]
80003fee:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80003ff2:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80003ff6:	f0 c9 ff fc 	sub	r9,r8,-4
80003ffa:	13 9b       	ld.ub	r11,r9[0x1]
80003ffc:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
80003ffe:	13 8b       	ld.ub	r11,r9[0x0]
80004000:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
80004002:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80004006:	13 bb       	ld.ub	r11,r9[0x3]
80004008:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000400a:	13 a9       	ld.ub	r9,r9[0x2]
8000400c:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
8000400e:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80004010:	2f 88       	sub	r8,-8
80004012:	11 b9       	ld.ub	r9,r8[0x3]
80004014:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80004016:	11 a9       	ld.ub	r9,r8[0x2]
80004018:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000401a:	11 99       	ld.ub	r9,r8[0x1]
8000401c:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000401e:	11 88       	ld.ub	r8,r8[0x0]
80004020:	b8 b8       	st.b	r12[0x3],r8
}
80004022:	d8 02       	popm	pc
80004024:	80 00       	ld.sh	r0,r0[0x0]
80004026:	3f d0       	mov	r0,-3
80004028:	80 00       	ld.sh	r0,r0[0x0]
8000402a:	3c 60       	mov	r0,-58
8000402c:	00 00       	add	r0,r0
8000402e:	09 8c       	ld.ub	r12,r4[0x0]

80004030 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80004030:	49 88       	lddpc	r8,80004090 <fat_check_nav_access_file+0x60>
80004032:	11 89       	ld.ub	r9,r8[0x0]
80004034:	30 08       	mov	r8,0
80004036:	f0 09 18 00 	cp.b	r9,r8
8000403a:	c2 a0       	breq	8000408e <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000403c:	49 68       	lddpc	r8,80004094 <fat_check_nav_access_file+0x64>
8000403e:	11 89       	ld.ub	r9,r8[0x0]
80004040:	49 68       	lddpc	r8,80004098 <fat_check_nav_access_file+0x68>
80004042:	11 88       	ld.ub	r8,r8[0x0]
80004044:	f0 09 18 00 	cp.b	r9,r8
80004048:	c2 31       	brne	8000408e <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000404a:	49 38       	lddpc	r8,80004094 <fat_check_nav_access_file+0x64>
8000404c:	70 89       	ld.w	r9,r8[0x20]
8000404e:	49 38       	lddpc	r8,80004098 <fat_check_nav_access_file+0x68>
80004050:	70 88       	ld.w	r8,r8[0x20]
80004052:	10 39       	cp.w	r9,r8
80004054:	c1 d1       	brne	8000408e <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80004056:	49 28       	lddpc	r8,8000409c <fat_check_nav_access_file+0x6c>
80004058:	90 19       	ld.sh	r9,r8[0x2]
8000405a:	48 e8       	lddpc	r8,80004090 <fat_check_nav_access_file+0x60>
8000405c:	90 18       	ld.sh	r8,r8[0x2]
8000405e:	f0 09 19 00 	cp.h	r9,r8
80004062:	c1 61       	brne	8000408e <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004064:	58 0c       	cp.w	r12,0
80004066:	c0 b0       	breq	8000407c <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80004068:	48 e8       	lddpc	r8,800040a0 <fat_check_nav_access_file+0x70>
8000406a:	11 89       	ld.ub	r9,r8[0x0]
8000406c:	30 08       	mov	r8,0
8000406e:	f0 09 18 00 	cp.b	r9,r8
80004072:	c0 e0       	breq	8000408e <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004074:	32 89       	mov	r9,40
80004076:	48 c8       	lddpc	r8,800040a4 <fat_check_nav_access_file+0x74>
80004078:	b0 89       	st.b	r8[0x0],r9
8000407a:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000407c:	48 98       	lddpc	r8,800040a0 <fat_check_nav_access_file+0x70>
8000407e:	11 88       	ld.ub	r8,r8[0x0]
80004080:	e2 18 00 02 	andl	r8,0x2,COH
80004084:	c0 50       	breq	8000408e <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
80004086:	32 99       	mov	r9,41
80004088:	48 78       	lddpc	r8,800040a4 <fat_check_nav_access_file+0x74>
8000408a:	b0 89       	st.b	r8[0x0],r9
8000408c:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
8000408e:	5e ff       	retal	1
80004090:	00 00       	add	r0,r0
80004092:	0c 14       	sub	r4,r6
80004094:	00 00       	add	r0,r0
80004096:	0b cc       	ld.ub	r12,r5[0x4]
80004098:	00 00       	add	r0,r0
8000409a:	0c 20       	rsub	r0,r6
8000409c:	00 00       	add	r0,r0
8000409e:	0c 18       	sub	r8,r6
800040a0:	00 00       	add	r0,r0
800040a2:	0c 04       	add	r4,r6
800040a4:	00 00       	add	r0,r0
800040a6:	0c 1c       	sub	r12,r6

800040a8 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
800040a8:	d4 21       	pushm	r4-r7,lr
800040aa:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
800040ac:	58 0c       	cp.w	r12,0
800040ae:	c6 20       	breq	80004172 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
800040b0:	1a 97       	mov	r7,sp
800040b2:	4b 28       	lddpc	r8,80004178 <fat_invert_nav+0xd0>
800040b4:	70 09       	ld.w	r9,r8[0x0]
800040b6:	50 09       	stdsp	sp[0x0],r9
800040b8:	70 19       	ld.w	r9,r8[0x4]
800040ba:	50 19       	stdsp	sp[0x4],r9
800040bc:	70 29       	ld.w	r9,r8[0x8]
800040be:	50 29       	stdsp	sp[0x8],r9
800040c0:	70 39       	ld.w	r9,r8[0xc]
800040c2:	50 39       	stdsp	sp[0xc],r9
800040c4:	fa c9 ff f0 	sub	r9,sp,-16
800040c8:	f0 ca ff f0 	sub	r10,r8,-16
800040cc:	74 0b       	ld.w	r11,r10[0x0]
800040ce:	93 0b       	st.w	r9[0x0],r11
800040d0:	74 1b       	ld.w	r11,r10[0x4]
800040d2:	93 1b       	st.w	r9[0x4],r11
800040d4:	74 2b       	ld.w	r11,r10[0x8]
800040d6:	93 2b       	st.w	r9[0x8],r11
800040d8:	74 3a       	ld.w	r10,r10[0xc]
800040da:	93 3a       	st.w	r9[0xc],r10
800040dc:	fa c9 ff e0 	sub	r9,sp,-32
800040e0:	f0 ca ff e0 	sub	r10,r8,-32
800040e4:	74 0b       	ld.w	r11,r10[0x0]
800040e6:	93 0b       	st.w	r9[0x0],r11
800040e8:	74 1b       	ld.w	r11,r10[0x4]
800040ea:	93 1b       	st.w	r9[0x4],r11
800040ec:	74 2b       	ld.w	r11,r10[0x8]
800040ee:	93 2b       	st.w	r9[0x8],r11
800040f0:	74 3a       	ld.w	r10,r10[0xc]
800040f2:	93 3a       	st.w	r9[0xc],r10
800040f4:	70 c9       	ld.w	r9,r8[0x30]
800040f6:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
800040f8:	f8 c6 00 01 	sub	r6,r12,1
800040fc:	5c 56       	castu.b	r6
800040fe:	ec 04 10 34 	mul	r4,r6,52
80004102:	49 f9       	lddpc	r9,8000417c <fat_invert_nav+0xd4>
80004104:	12 04       	add	r4,r9
80004106:	33 45       	mov	r5,52
80004108:	0a 9a       	mov	r10,r5
8000410a:	08 9b       	mov	r11,r4
8000410c:	10 9c       	mov	r12,r8
8000410e:	f0 1f 00 1d 	mcall	80004180 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80004112:	0a 9a       	mov	r10,r5
80004114:	1a 9b       	mov	r11,sp
80004116:	08 9c       	mov	r12,r4
80004118:	f0 1f 00 1a 	mcall	80004180 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000411c:	49 ac       	lddpc	r12,80004184 <fat_invert_nav+0xdc>
8000411e:	78 08       	ld.w	r8,r12[0x0]
80004120:	50 08       	stdsp	sp[0x0],r8
80004122:	78 18       	ld.w	r8,r12[0x4]
80004124:	50 18       	stdsp	sp[0x4],r8
80004126:	78 28       	ld.w	r8,r12[0x8]
80004128:	50 28       	stdsp	sp[0x8],r8
8000412a:	78 38       	ld.w	r8,r12[0xc]
8000412c:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000412e:	ec 04 15 04 	lsl	r4,r6,0x4
80004132:	49 68       	lddpc	r8,80004188 <fat_invert_nav+0xe0>
80004134:	10 04       	add	r4,r8
80004136:	31 05       	mov	r5,16
80004138:	0a 9a       	mov	r10,r5
8000413a:	08 9b       	mov	r11,r4
8000413c:	f0 1f 00 11 	mcall	80004180 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80004140:	0a 9a       	mov	r10,r5
80004142:	1a 9b       	mov	r11,sp
80004144:	08 9c       	mov	r12,r4
80004146:	f0 1f 00 0f 	mcall	80004180 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000414a:	49 14       	lddpc	r4,8000418c <fat_invert_nav+0xe4>
8000414c:	30 45       	mov	r5,4
8000414e:	0a 9a       	mov	r10,r5
80004150:	08 9b       	mov	r11,r4
80004152:	1a 9c       	mov	r12,sp
80004154:	f0 1f 00 0b 	mcall	80004180 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80004158:	48 e8       	lddpc	r8,80004190 <fat_invert_nav+0xe8>
8000415a:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000415e:	0a 9a       	mov	r10,r5
80004160:	0c 9b       	mov	r11,r6
80004162:	08 9c       	mov	r12,r4
80004164:	f0 1f 00 07 	mcall	80004180 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80004168:	0a 9a       	mov	r10,r5
8000416a:	1a 9b       	mov	r11,sp
8000416c:	0c 9c       	mov	r12,r6
8000416e:	f0 1f 00 05 	mcall	80004180 <fat_invert_nav+0xd8>
}
80004172:	2f 3d       	sub	sp,-52
80004174:	d8 22       	popm	r4-r7,pc
80004176:	00 00       	add	r0,r0
80004178:	00 00       	add	r0,r0
8000417a:	0b cc       	ld.ub	r12,r5[0x4]
8000417c:	00 00       	add	r0,r0
8000417e:	0c 20       	rsub	r0,r6
80004180:	80 00       	ld.sh	r0,r0[0x0]
80004182:	77 5e       	ld.w	lr,r11[0x54]
80004184:	00 00       	add	r0,r0
80004186:	09 8c       	ld.ub	r12,r4[0x0]
80004188:	00 00       	add	r0,r0
8000418a:	0c 04       	add	r4,r6
8000418c:	00 00       	add	r0,r0
8000418e:	0c 18       	sub	r8,r6
80004190:	00 00       	add	r0,r0
80004192:	0c 14       	sub	r4,r6

80004194 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
80004194:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80004196:	49 08       	lddpc	r8,800041d4 <fat_cache_flush+0x40>
80004198:	f1 39 00 08 	ld.ub	r9,r8[8]
8000419c:	30 18       	mov	r8,1
8000419e:	f0 09 18 00 	cp.b	r9,r8
800041a2:	c1 81       	brne	800041d2 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800041a4:	48 c8       	lddpc	r8,800041d4 <fat_cache_flush+0x40>
800041a6:	30 09       	mov	r9,0
800041a8:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800041ac:	11 8c       	ld.ub	r12,r8[0x0]
800041ae:	f0 1f 00 0b 	mcall	800041d8 <fat_cache_flush+0x44>
800041b2:	c0 50       	breq	800041bc <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
800041b4:	31 49       	mov	r9,20
800041b6:	48 a8       	lddpc	r8,800041dc <fat_cache_flush+0x48>
800041b8:	b0 89       	st.b	r8[0x0],r9
800041ba:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800041bc:	48 68       	lddpc	r8,800041d4 <fat_cache_flush+0x40>
800041be:	48 9a       	lddpc	r10,800041e0 <fat_cache_flush+0x4c>
800041c0:	70 1b       	ld.w	r11,r8[0x4]
800041c2:	11 8c       	ld.ub	r12,r8[0x0]
800041c4:	f0 1f 00 08 	mcall	800041e4 <fat_cache_flush+0x50>
800041c8:	c0 50       	breq	800041d2 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
800041ca:	30 19       	mov	r9,1
800041cc:	48 48       	lddpc	r8,800041dc <fat_cache_flush+0x48>
800041ce:	b0 89       	st.b	r8[0x0],r9
800041d0:	d8 0a       	popm	pc,r12=0
         return false;
800041d2:	da 0a       	popm	pc,r12=1
800041d4:	00 00       	add	r0,r0
800041d6:	0c 54       	eor	r4,r6
800041d8:	80 00       	ld.sh	r0,r0[0x0]
800041da:	66 e8       	ld.w	r8,r3[0x38]
800041dc:	00 00       	add	r0,r0
800041de:	0c 1c       	sub	r12,r6
800041e0:	00 00       	add	r0,r0
800041e2:	09 cc       	ld.ub	r12,r4[0x4]
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	67 18       	ld.w	r8,r3[0x44]

800041e8 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
800041e8:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
800041ea:	e0 6a 02 00 	mov	r10,512
800041ee:	30 0b       	mov	r11,0
800041f0:	48 2c       	lddpc	r12,800041f8 <fat_cache_clear+0x10>
800041f2:	f0 1f 00 03 	mcall	800041fc <fat_cache_clear+0x14>
}
800041f6:	d8 02       	popm	pc
800041f8:	00 00       	add	r0,r0
800041fa:	09 cc       	ld.ub	r12,r4[0x4]
800041fc:	80 00       	ld.sh	r0,r0[0x0]
800041fe:	78 a6       	ld.w	r6,r12[0x28]

80004200 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80004200:	eb cd 40 80 	pushm	r7,lr
80004204:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80004206:	49 78       	lddpc	r8,80004260 <fat_cache_read_sector+0x60>
80004208:	11 89       	ld.ub	r9,r8[0x0]
8000420a:	49 78       	lddpc	r8,80004264 <fat_cache_read_sector+0x64>
8000420c:	11 88       	ld.ub	r8,r8[0x0]
8000420e:	f0 09 18 00 	cp.b	r9,r8
80004212:	c0 91       	brne	80004224 <fat_cache_read_sector+0x24>
80004214:	49 38       	lddpc	r8,80004260 <fat_cache_read_sector+0x60>
80004216:	70 19       	ld.w	r9,r8[0x4]
80004218:	49 48       	lddpc	r8,80004268 <fat_cache_read_sector+0x68>
8000421a:	70 08       	ld.w	r8,r8[0x0]
8000421c:	10 39       	cp.w	r9,r8
8000421e:	c0 31       	brne	80004224 <fat_cache_read_sector+0x24>
80004220:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80004224:	f0 1f 00 12 	mcall	8000426c <fat_cache_read_sector+0x6c>
80004228:	c1 90       	breq	8000425a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
8000422a:	f0 1f 00 12 	mcall	80004270 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000422e:	48 f8       	lddpc	r8,80004268 <fat_cache_read_sector+0x68>
80004230:	70 0b       	ld.w	r11,r8[0x0]
80004232:	48 c8       	lddpc	r8,80004260 <fat_cache_read_sector+0x60>
80004234:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80004236:	58 07       	cp.w	r7,0
80004238:	c0 c0       	breq	80004250 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000423a:	48 fa       	lddpc	r10,80004274 <fat_cache_read_sector+0x74>
8000423c:	48 a8       	lddpc	r8,80004264 <fat_cache_read_sector+0x64>
8000423e:	11 8c       	ld.ub	r12,r8[0x0]
80004240:	f0 1f 00 0e 	mcall	80004278 <fat_cache_read_sector+0x78>
80004244:	c0 60       	breq	80004250 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80004246:	30 19       	mov	r9,1
80004248:	48 d8       	lddpc	r8,8000427c <fat_cache_read_sector+0x7c>
8000424a:	b0 89       	st.b	r8[0x0],r9
8000424c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80004250:	48 58       	lddpc	r8,80004264 <fat_cache_read_sector+0x64>
80004252:	11 89       	ld.ub	r9,r8[0x0]
80004254:	48 38       	lddpc	r8,80004260 <fat_cache_read_sector+0x60>
80004256:	b0 89       	st.b	r8[0x0],r9
80004258:	30 1c       	mov	r12,1
   return true;
}
8000425a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000425e:	00 00       	add	r0,r0
80004260:	00 00       	add	r0,r0
80004262:	0c 54       	eor	r4,r6
80004264:	00 00       	add	r0,r0
80004266:	0b cc       	ld.ub	r12,r5[0x4]
80004268:	00 00       	add	r0,r0
8000426a:	09 88       	ld.ub	r8,r4[0x0]
8000426c:	80 00       	ld.sh	r0,r0[0x0]
8000426e:	41 94       	lddsp	r4,sp[0x64]
80004270:	80 00       	ld.sh	r0,r0[0x0]
80004272:	3f b8       	mov	r8,-5
80004274:	00 00       	add	r0,r0
80004276:	09 cc       	ld.ub	r12,r4[0x4]
80004278:	80 00       	ld.sh	r0,r0[0x0]
8000427a:	66 fc       	ld.w	r12,r3[0x3c]
8000427c:	00 00       	add	r0,r0
8000427e:	0c 1c       	sub	r12,r6

80004280 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80004280:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80004282:	49 f8       	lddpc	r8,800042fc <fat_cluster_readnext+0x7c>
80004284:	11 89       	ld.ub	r9,r8[0x0]
80004286:	30 38       	mov	r8,3
80004288:	f0 09 18 00 	cp.b	r9,r8
8000428c:	c0 61       	brne	80004298 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
8000428e:	49 d8       	lddpc	r8,80004300 <fat_cluster_readnext+0x80>
80004290:	90 09       	ld.sh	r9,r8[0x0]
80004292:	2f c9       	sub	r9,-4
80004294:	b0 09       	st.h	r8[0x0],r9
80004296:	c0 58       	rjmp	800042a0 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80004298:	49 a8       	lddpc	r8,80004300 <fat_cluster_readnext+0x80>
8000429a:	90 09       	ld.sh	r9,r8[0x0]
8000429c:	2f e9       	sub	r9,-2
8000429e:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800042a0:	49 88       	lddpc	r8,80004300 <fat_cluster_readnext+0x80>
800042a2:	90 09       	ld.sh	r9,r8[0x0]
800042a4:	e0 68 02 00 	mov	r8,512
800042a8:	f0 09 19 00 	cp.h	r9,r8
800042ac:	c0 c1       	brne	800042c4 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800042ae:	30 09       	mov	r9,0
800042b0:	49 48       	lddpc	r8,80004300 <fat_cluster_readnext+0x80>
800042b2:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
800042b4:	49 48       	lddpc	r8,80004304 <fat_cluster_readnext+0x84>
800042b6:	70 09       	ld.w	r9,r8[0x0]
800042b8:	2f f9       	sub	r9,-1
800042ba:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800042bc:	30 1c       	mov	r12,1
800042be:	f0 1f 00 13 	mcall	80004308 <fat_cluster_readnext+0x88>
800042c2:	c1 b0       	breq	800042f8 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800042c4:	49 28       	lddpc	r8,8000430c <fat_cluster_readnext+0x8c>
800042c6:	2f c8       	sub	r8,-4
800042c8:	48 e9       	lddpc	r9,80004300 <fat_cluster_readnext+0x80>
800042ca:	92 89       	ld.uh	r9,r9[0x0]
800042cc:	49 1a       	lddpc	r10,80004310 <fat_cluster_readnext+0x90>
800042ce:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800042d2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800042d4:	12 0a       	add	r10,r9
800042d6:	15 9a       	ld.ub	r10,r10[0x1]
800042d8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800042da:	48 9a       	lddpc	r10,800042fc <fat_cluster_readnext+0x7c>
800042dc:	15 8b       	ld.ub	r11,r10[0x0]
800042de:	30 3a       	mov	r10,3
800042e0:	f4 0b 18 00 	cp.b	r11,r10
800042e4:	c0 20       	breq	800042e8 <fat_cluster_readnext+0x68>
800042e6:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800042e8:	48 aa       	lddpc	r10,80004310 <fat_cluster_readnext+0x90>
800042ea:	f4 09 00 09 	add	r9,r10,r9
800042ee:	13 aa       	ld.ub	r10,r9[0x2]
800042f0:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800042f2:	13 b9       	ld.ub	r9,r9[0x3]
800042f4:	b0 89       	st.b	r8[0x0],r9
800042f6:	30 1c       	mov	r12,1
   }
   return true;
}
800042f8:	d8 02       	popm	pc
800042fa:	00 00       	add	r0,r0
800042fc:	00 00       	add	r0,r0
800042fe:	0c 18       	sub	r8,r6
80004300:	00 00       	add	r0,r0
80004302:	09 9c       	ld.ub	r12,r4[0x1]
80004304:	00 00       	add	r0,r0
80004306:	09 88       	ld.ub	r8,r4[0x0]
80004308:	80 00       	ld.sh	r0,r0[0x0]
8000430a:	42 00       	lddsp	r0,sp[0x80]
8000430c:	00 00       	add	r0,r0
8000430e:	0c 6c       	and	r12,r6
80004310:	00 00       	add	r0,r0
80004312:	09 cc       	ld.ub	r12,r4[0x4]

80004314 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80004314:	d4 31       	pushm	r0-r7,lr
80004316:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80004318:	fe f8 02 18 	ld.w	r8,pc[536]
8000431c:	11 88       	ld.ub	r8,r8[0x0]
8000431e:	30 39       	mov	r9,3
80004320:	f2 08 18 00 	cp.b	r8,r9
80004324:	c0 d1       	brne	8000433e <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80004326:	fe fa 02 0e 	ld.w	r10,pc[526]
8000432a:	74 09       	ld.w	r9,r10[0x0]
8000432c:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
8000432e:	15 bb       	ld.ub	r11,r10[0x3]
80004330:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004334:	a3 6b       	lsl	r11,0x2
80004336:	fe fa 02 02 	ld.w	r10,pc[514]
8000433a:	b4 0b       	st.h	r10[0x0],r11
8000433c:	c2 08       	rjmp	8000437c <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
8000433e:	30 29       	mov	r9,2
80004340:	f2 08 18 00 	cp.b	r8,r9
80004344:	c0 81       	brne	80004354 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004346:	4f ca       	lddpc	r10,80004534 <fat_cluster_val+0x220>
80004348:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
8000434a:	15 bb       	ld.ub	r11,r10[0x3]
8000434c:	a1 7b       	lsl	r11,0x1
8000434e:	4f ba       	lddpc	r10,80004538 <fat_cluster_val+0x224>
80004350:	b4 0b       	st.h	r10[0x0],r11
80004352:	c1 58       	rjmp	8000437c <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004354:	30 19       	mov	r9,1
80004356:	f2 08 18 00 	cp.b	r8,r9
8000435a:	c0 30       	breq	80004360 <fat_cluster_val+0x4c>
8000435c:	30 09       	mov	r9,0
8000435e:	c0 f8       	rjmp	8000437c <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004360:	4f 59       	lddpc	r9,80004534 <fat_cluster_val+0x220>
80004362:	72 09       	ld.w	r9,r9[0x0]
80004364:	4f 5a       	lddpc	r10,80004538 <fat_cluster_val+0x224>
80004366:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
8000436a:	12 0b       	add	r11,r9
8000436c:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
8000436e:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004372:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004376:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000437a:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
8000437c:	58 05       	cp.w	r5,0
8000437e:	c2 20       	breq	800043c2 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004380:	4e fa       	lddpc	r10,8000453c <fat_cluster_val+0x228>
80004382:	74 0a       	ld.w	r10,r10[0x0]
80004384:	14 39       	cp.w	r9,r10
80004386:	c0 32       	brcc	8000438c <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004388:	4e da       	lddpc	r10,8000453c <fat_cluster_val+0x228>
8000438a:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
8000438c:	4e da       	lddpc	r10,80004540 <fat_cluster_val+0x22c>
8000438e:	74 0a       	ld.w	r10,r10[0x0]
80004390:	14 39       	cp.w	r9,r10
80004392:	e0 88 00 04 	brls	8000439a <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004396:	4e ba       	lddpc	r10,80004540 <fat_cluster_val+0x22c>
80004398:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
8000439a:	30 1a       	mov	r10,1
8000439c:	f4 08 18 00 	cp.b	r8,r10
800043a0:	c1 11       	brne	800043c2 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800043a2:	4e 68       	lddpc	r8,80004538 <fat_cluster_val+0x224>
800043a4:	90 0a       	ld.sh	r10,r8[0x0]
800043a6:	e0 68 01 ff 	mov	r8,511
800043aa:	f0 0a 19 00 	cp.h	r10,r8
800043ae:	c0 a1       	brne	800043c2 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
800043b0:	f2 c8 ff ff 	sub	r8,r9,-1
800043b4:	4e 3a       	lddpc	r10,80004540 <fat_cluster_val+0x22c>
800043b6:	74 0a       	ld.w	r10,r10[0x0]
800043b8:	14 38       	cp.w	r8,r10
800043ba:	e0 88 00 04 	brls	800043c2 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
800043be:	4e 1a       	lddpc	r10,80004540 <fat_cluster_val+0x22c>
800043c0:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
800043c2:	4e 18       	lddpc	r8,80004544 <fat_cluster_val+0x230>
800043c4:	70 48       	ld.w	r8,r8[0x10]
800043c6:	10 09       	add	r9,r8
800043c8:	4e 08       	lddpc	r8,80004548 <fat_cluster_val+0x234>
800043ca:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
800043cc:	30 1c       	mov	r12,1
800043ce:	f0 1f 00 60 	mcall	8000454c <fat_cluster_val+0x238>
800043d2:	e0 80 00 ad 	breq	8000452c <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
800043d6:	4d 98       	lddpc	r8,80004538 <fat_cluster_val+0x224>
800043d8:	90 08       	ld.sh	r8,r8[0x0]
800043da:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
800043de:	4d d9       	lddpc	r9,80004550 <fat_cluster_val+0x23c>
800043e0:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
800043e2:	0c 97       	mov	r7,r6
800043e4:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
800043e6:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
800043e8:	ec c4 ff fe 	sub	r4,r6,-2
800043ec:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
800043ee:	ec c3 ff fd 	sub	r3,r6,-3
800043f2:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
800043f4:	4c f9       	lddpc	r9,80004530 <fat_cluster_val+0x21c>
800043f6:	13 8a       	ld.ub	r10,r9[0x0]
800043f8:	30 19       	mov	r9,1
800043fa:	f2 0a 18 00 	cp.b	r10,r9
800043fe:	c1 11       	brne	80004420 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004400:	e0 69 01 ff 	mov	r9,511
80004404:	f2 08 19 00 	cp.h	r8,r9
80004408:	c0 c1       	brne	80004420 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
8000440a:	4d 08       	lddpc	r8,80004548 <fat_cluster_val+0x234>
8000440c:	70 09       	ld.w	r9,r8[0x0]
8000440e:	2f f9       	sub	r9,-1
80004410:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004412:	30 1c       	mov	r12,1
80004414:	f0 1f 00 4e 	mcall	8000454c <fat_cluster_val+0x238>
80004418:	e0 80 00 8a 	breq	8000452c <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
8000441c:	4c d8       	lddpc	r8,80004550 <fat_cluster_val+0x23c>
8000441e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004420:	58 05       	cp.w	r5,0
80004422:	c3 11       	brne	80004484 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004424:	4c 48       	lddpc	r8,80004534 <fat_cluster_val+0x220>
80004426:	f0 c9 ff fc 	sub	r9,r8,-4
8000442a:	f0 cc ff f9 	sub	r12,r8,-7
8000442e:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004430:	2f a8       	sub	r8,-6
80004432:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004434:	4b fa       	lddpc	r10,80004530 <fat_cluster_val+0x21c>
80004436:	15 8a       	ld.ub	r10,r10[0x0]
80004438:	30 3b       	mov	r11,3
8000443a:	f6 0a 18 00 	cp.b	r10,r11
8000443e:	c0 61       	brne	8000444a <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004440:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004442:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004446:	b2 80       	st.b	r9[0x0],r0
80004448:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
8000444a:	30 0b       	mov	r11,0
8000444c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
8000444e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004450:	30 19       	mov	r9,1
80004452:	f2 0a 18 00 	cp.b	r10,r9
80004456:	c0 20       	breq	8000445a <fat_cluster_val+0x146>
80004458:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000445a:	4b 79       	lddpc	r9,80004534 <fat_cluster_val+0x220>
8000445c:	13 b9       	ld.ub	r9,r9[0x3]
8000445e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004462:	c0 c0       	breq	8000447a <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004464:	19 8b       	ld.ub	r11,r12[0x0]
80004466:	a5 8b       	lsr	r11,0x4
80004468:	11 89       	ld.ub	r9,r8[0x0]
8000446a:	f2 0a 15 04 	lsl	r10,r9,0x4
8000446e:	f6 0a 00 0a 	add	r10,r11,r10
80004472:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004474:	a5 89       	lsr	r9,0x4
80004476:	b0 89       	st.b	r8[0x0],r9
80004478:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
8000447a:	11 89       	ld.ub	r9,r8[0x0]
8000447c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004480:	b0 89       	st.b	r8[0x0],r9
80004482:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004484:	4a b8       	lddpc	r8,80004530 <fat_cluster_val+0x21c>
80004486:	11 88       	ld.ub	r8,r8[0x0]
80004488:	30 19       	mov	r9,1
8000448a:	f2 08 18 00 	cp.b	r8,r9
8000448e:	c3 a1       	brne	80004502 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004490:	4a 98       	lddpc	r8,80004534 <fat_cluster_val+0x220>
80004492:	11 b8       	ld.ub	r8,r8[0x3]
80004494:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004498:	c1 10       	breq	800044ba <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
8000449a:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
8000449e:	4a 68       	lddpc	r8,80004534 <fat_cluster_val+0x220>
800044a0:	2f c8       	sub	r8,-4
800044a2:	11 b9       	ld.ub	r9,r8[0x3]
800044a4:	f2 0a 15 04 	lsl	r10,r9,0x4
800044a8:	14 05       	add	r5,r10
800044aa:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800044ac:	a5 89       	lsr	r9,0x4
800044ae:	11 a8       	ld.ub	r8,r8[0x2]
800044b0:	a5 68       	lsl	r8,0x4
800044b2:	f2 08 00 0a 	add	r10,r9,r8
800044b6:	5c 5a       	castu.b	r10
800044b8:	c0 c8       	rjmp	800044d0 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
800044ba:	49 f8       	lddpc	r8,80004534 <fat_cluster_val+0x220>
800044bc:	2f c8       	sub	r8,-4
800044be:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
800044c0:	16 9a       	mov	r10,r11
800044c2:	e2 1a 00 f0 	andl	r10,0xf0,COH
800044c6:	11 a8       	ld.ub	r8,r8[0x2]
800044c8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800044cc:	10 0a       	add	r10,r8
800044ce:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800044d0:	49 a8       	lddpc	r8,80004538 <fat_cluster_val+0x224>
800044d2:	90 09       	ld.sh	r9,r8[0x0]
800044d4:	e0 68 01 ff 	mov	r8,511
800044d8:	f0 09 19 00 	cp.h	r9,r8
800044dc:	c2 31       	brne	80004522 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
800044de:	49 d8       	lddpc	r8,80004550 <fat_cluster_val+0x23c>
800044e0:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
800044e2:	f0 1f 00 1d 	mcall	80004554 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
800044e6:	49 98       	lddpc	r8,80004548 <fat_cluster_val+0x234>
800044e8:	70 09       	ld.w	r9,r8[0x0]
800044ea:	20 19       	sub	r9,1
800044ec:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
800044ee:	30 1c       	mov	r12,1
800044f0:	f0 1f 00 17 	mcall	8000454c <fat_cluster_val+0x238>
800044f4:	c1 c0       	breq	8000452c <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800044f6:	49 78       	lddpc	r8,80004550 <fat_cluster_val+0x23c>
800044f8:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
800044fc:	f0 1f 00 16 	mcall	80004554 <fat_cluster_val+0x240>
80004500:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004502:	48 d9       	lddpc	r9,80004534 <fat_cluster_val+0x220>
80004504:	2f c9       	sub	r9,-4
80004506:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004508:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
8000450a:	30 3b       	mov	r11,3
8000450c:	f6 08 18 00 	cp.b	r8,r11
80004510:	c0 91       	brne	80004522 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004512:	13 98       	ld.ub	r8,r9[0x1]
80004514:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004516:	e0 10 ff f0 	andl	r0,0xfff0
8000451a:	13 88       	ld.ub	r8,r9[0x0]
8000451c:	f0 00 00 00 	add	r0,r8,r0
80004520:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004522:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004524:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004526:	f0 1f 00 0c 	mcall	80004554 <fat_cluster_val+0x240>
8000452a:	da 3a       	popm	r0-r7,pc,r12=1
8000452c:	d8 3a       	popm	r0-r7,pc,r12=0
8000452e:	00 00       	add	r0,r0
80004530:	00 00       	add	r0,r0
80004532:	0c 18       	sub	r8,r6
80004534:	00 00       	add	r0,r0
80004536:	0c 6c       	and	r12,r6
80004538:	00 00       	add	r0,r0
8000453a:	09 9c       	ld.ub	r12,r4[0x1]
8000453c:	00 00       	add	r0,r0
8000453e:	0c 00       	add	r0,r6
80004540:	00 00       	add	r0,r0
80004542:	09 c8       	ld.ub	r8,r4[0x4]
80004544:	00 00       	add	r0,r0
80004546:	0b cc       	ld.ub	r12,r5[0x4]
80004548:	00 00       	add	r0,r0
8000454a:	09 88       	ld.ub	r8,r4[0x0]
8000454c:	80 00       	ld.sh	r0,r0[0x0]
8000454e:	42 00       	lddsp	r0,sp[0x80]
80004550:	00 00       	add	r0,r0
80004552:	09 cc       	ld.ub	r12,r4[0x4]
80004554:	80 00       	ld.sh	r0,r0[0x0]
80004556:	3f d0       	mov	r0,-3

80004558 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80004558:	d4 31       	pushm	r0-r7,lr
8000455a:	20 2d       	sub	sp,8
8000455c:	18 93       	mov	r3,r12
8000455e:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004560:	30 89       	mov	r9,8
80004562:	fe f8 02 8e 	ld.w	r8,pc[654]
80004566:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004568:	30 38       	mov	r8,3
8000456a:	f0 0c 18 00 	cp.b	r12,r8
8000456e:	5f 0a       	sreq	r10
80004570:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004572:	fe f9 02 82 	ld.w	r9,pc[642]
80004576:	13 89       	ld.ub	r9,r9[0x0]
80004578:	f0 09 18 00 	cp.b	r9,r8
8000457c:	5f 08       	sreq	r8
8000457e:	f5 e8 00 08 	and	r8,r10,r8
80004582:	c0 60       	breq	8000458e <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004584:	3f fc       	mov	r12,-1
80004586:	f0 1f 00 9d 	mcall	800047f8 <fat_cluster_list+0x2a0>
8000458a:	e0 80 01 2f 	breq	800047e8 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
8000458e:	fe f8 02 6e 	ld.w	r8,pc[622]
80004592:	70 08       	ld.w	r8,r8[0x0]
80004594:	58 08       	cp.w	r8,0
80004596:	c3 b1       	brne	8000460c <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004598:	40 09       	lddsp	r9,sp[0x0]
8000459a:	58 09       	cp.w	r9,0
8000459c:	e0 81 01 26 	brne	800047e8 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
800045a0:	fe f8 02 54 	ld.w	r8,pc[596]
800045a4:	11 88       	ld.ub	r8,r8[0x0]
800045a6:	f0 ca 00 01 	sub	r10,r8,1
800045aa:	30 19       	mov	r9,1
800045ac:	f2 0a 18 00 	cp.b	r10,r9
800045b0:	e0 8b 00 23 	brhi	800045f6 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
800045b4:	fe f8 02 48 	ld.w	r8,pc[584]
800045b8:	70 18       	ld.w	r8,r8[0x4]
800045ba:	fe f9 02 46 	ld.w	r9,pc[582]
800045be:	f3 19 00 1a 	ld.uh	r9,r9[26]
800045c2:	12 38       	cp.w	r8,r9
800045c4:	c1 32       	brcc	800045ea <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
800045c6:	fe f9 02 36 	ld.w	r9,pc[566]
800045ca:	fe fa 02 36 	ld.w	r10,pc[566]
800045ce:	74 4b       	ld.w	r11,r10[0x10]
800045d0:	16 08       	add	r8,r11
800045d2:	f5 1b 00 18 	ld.uh	r11,r10[24]
800045d6:	16 08       	add	r8,r11
800045d8:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
800045da:	f5 1a 00 1a 	ld.uh	r10,r10[26]
800045de:	72 18       	ld.w	r8,r9[0x4]
800045e0:	f4 08 01 08 	sub	r8,r10,r8
800045e4:	93 18       	st.w	r9[0x4],r8
800045e6:	30 1c       	mov	r12,1
            return true;
800045e8:	c0 19       	rjmp	800047ea <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
800045ea:	31 a9       	mov	r9,26
800045ec:	fe f8 02 04 	ld.w	r8,pc[516]
800045f0:	b0 89       	st.b	r8[0x0],r9
800045f2:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
800045f4:	cf b8       	rjmp	800047ea <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
800045f6:	30 39       	mov	r9,3
800045f8:	f2 08 18 00 	cp.b	r8,r9
800045fc:	c0 a1       	brne	80004610 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
800045fe:	fe f8 02 02 	ld.w	r8,pc[514]
80004602:	70 69       	ld.w	r9,r8[0x18]
80004604:	fe f8 02 00 	ld.w	r8,pc[512]
80004608:	91 09       	st.w	r8[0x0],r9
8000460a:	c0 38       	rjmp	80004610 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000460c:	4f e9       	lddpc	r9,80004804 <fat_cluster_list+0x2ac>
8000460e:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004610:	30 38       	mov	r8,3
80004612:	f0 03 18 00 	cp.b	r3,r8
80004616:	c0 70       	breq	80004624 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004618:	0e 9c       	mov	r12,r7
8000461a:	f0 1f 00 7c 	mcall	80004808 <fat_cluster_list+0x2b0>
8000461e:	c0 70       	breq	8000462c <fat_cluster_list+0xd4>
80004620:	30 1c       	mov	r12,1
80004622:	ce 48       	rjmp	800047ea <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004624:	f0 1f 00 7a 	mcall	8000480c <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004628:	f0 1f 00 7a 	mcall	80004810 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
8000462c:	4f 40       	lddpc	r0,800047fc <fat_cluster_list+0x2a4>
8000462e:	3f f8       	mov	r8,-1
80004630:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004632:	00 96       	mov	r6,r0
80004634:	4f 35       	lddpc	r5,80004800 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004636:	4f 47       	lddpc	r7,80004804 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004638:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000463a:	e0 c8 ff f9 	sub	r8,r0,-7
8000463e:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004640:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004642:	6c 19       	ld.w	r9,r6[0x4]
80004644:	0b 98       	ld.ub	r8,r5[0x1]
80004646:	10 39       	cp.w	r9,r8
80004648:	c4 32       	brcc	800046ce <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000464a:	6a 4a       	ld.w	r10,r5[0x10]
8000464c:	14 09       	add	r9,r10
8000464e:	6a 5a       	ld.w	r10,r5[0x14]
80004650:	14 09       	add	r9,r10
80004652:	6e 0a       	ld.w	r10,r7[0x0]
80004654:	20 2a       	sub	r10,2
80004656:	f4 08 02 48 	mul	r8,r10,r8
8000465a:	f2 08 00 08 	add	r8,r9,r8
8000465e:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004660:	e2 03 18 00 	cp.b	r3,r1
80004664:	c0 d1       	brne	8000467e <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004666:	4e 67       	lddpc	r7,800047fc <fat_cluster_list+0x2a4>
80004668:	4e 68       	lddpc	r8,80004800 <fat_cluster_list+0x2a8>
8000466a:	11 99       	ld.ub	r9,r8[0x1]
8000466c:	6e 18       	ld.w	r8,r7[0x4]
8000466e:	f2 08 01 08 	sub	r8,r9,r8
80004672:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004674:	f0 1f 00 68 	mcall	80004814 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004678:	30 1c       	mov	r12,1
8000467a:	8f 1c       	st.w	r7[0x4],r12
            return true;
8000467c:	cb 78       	rjmp	800047ea <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000467e:	0b 99       	ld.ub	r9,r5[0x1]
80004680:	40 1a       	lddsp	r10,sp[0x4]
80004682:	15 88       	ld.ub	r8,r10[0x0]
80004684:	f2 08 01 08 	sub	r8,r9,r8
80004688:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
8000468a:	e4 03 18 00 	cp.b	r3,r2
8000468e:	c2 01       	brne	800046ce <fat_cluster_list+0x176>
80004690:	4d 99       	lddpc	r9,800047f4 <fat_cluster_list+0x29c>
80004692:	13 88       	ld.ub	r8,r9[0x0]
80004694:	e4 08 18 00 	cp.b	r8,r2
80004698:	c1 b0       	breq	800046ce <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
8000469a:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
8000469c:	30 0c       	mov	r12,0
8000469e:	f0 1f 00 5f 	mcall	80004818 <fat_cluster_list+0x2c0>
800046a2:	e0 80 00 a3 	breq	800047e8 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
800046a6:	6e 09       	ld.w	r9,r7[0x0]
800046a8:	f2 c8 ff ff 	sub	r8,r9,-1
800046ac:	8f 08       	st.w	r7[0x0],r8
800046ae:	6e 1a       	ld.w	r10,r7[0x4]
800046b0:	14 38       	cp.w	r8,r10
800046b2:	c0 a0       	breq	800046c6 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
800046b4:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
800046b6:	08 19       	sub	r9,r4
800046b8:	0b 98       	ld.ub	r8,r5[0x1]
800046ba:	b1 39       	mul	r9,r8
800046bc:	6c 18       	ld.w	r8,r6[0x4]
800046be:	f2 08 00 08 	add	r8,r9,r8
800046c2:	8d 18       	st.w	r6[0x4],r8
                  break;
800046c4:	c0 58       	rjmp	800046ce <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
800046c6:	f0 1f 00 56 	mcall	8000481c <fat_cluster_list+0x2c4>
800046ca:	ce e1       	brne	800046a6 <fat_cluster_list+0x14e>
800046cc:	c8 e8       	rjmp	800047e8 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800046ce:	30 0c       	mov	r12,0
800046d0:	f0 1f 00 52 	mcall	80004818 <fat_cluster_list+0x2c0>
800046d4:	e0 80 00 8a 	breq	800047e8 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
800046d8:	f0 1f 00 52 	mcall	80004820 <fat_cluster_list+0x2c8>
800046dc:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
800046de:	e4 0c 18 00 	cp.b	r12,r2
800046e2:	e0 80 00 83 	breq	800047e8 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
800046e6:	01 89       	ld.ub	r9,r0[0x0]
800046e8:	3f f8       	mov	r8,-1
800046ea:	f0 09 18 00 	cp.b	r9,r8
800046ee:	c4 61       	brne	8000477a <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
800046f0:	e2 0c 18 00 	cp.b	r12,r1
800046f4:	c2 b1       	brne	8000474a <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
800046f6:	4c 28       	lddpc	r8,800047fc <fat_cluster_list+0x2a4>
800046f8:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
800046fa:	4c b9       	lddpc	r9,80004824 <fat_cluster_list+0x2cc>
800046fc:	13 89       	ld.ub	r9,r9[0x0]
800046fe:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004702:	4c aa       	lddpc	r10,80004828 <fat_cluster_list+0x2d0>
80004704:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004708:	72 2a       	ld.w	r10,r9[0x8]
8000470a:	0e 1a       	sub	r10,r7
8000470c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000470e:	4b d9       	lddpc	r9,80004800 <fat_cluster_list+0x2a8>
80004710:	72 5b       	ld.w	r11,r9[0x14]
80004712:	72 4a       	ld.w	r10,r9[0x10]
80004714:	14 0b       	add	r11,r10
80004716:	13 99       	ld.ub	r9,r9[0x1]
80004718:	4b ba       	lddpc	r10,80004804 <fat_cluster_list+0x2ac>
8000471a:	74 0a       	ld.w	r10,r10[0x0]
8000471c:	20 2a       	sub	r10,2
8000471e:	f2 0a 02 4a 	mul	r10,r9,r10
80004722:	f6 0a 00 0a 	add	r10,r11,r10
80004726:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004728:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
8000472a:	30 38       	mov	r8,3
8000472c:	f0 03 18 00 	cp.b	r3,r8
80004730:	c0 30       	breq	80004736 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004732:	f0 1f 00 39 	mcall	80004814 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004736:	4b 28       	lddpc	r8,800047fc <fat_cluster_list+0x2a4>
80004738:	4b 39       	lddpc	r9,80004804 <fat_cluster_list+0x2ac>
8000473a:	72 09       	ld.w	r9,r9[0x0]
8000473c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
8000473e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004740:	31 a9       	mov	r9,26
80004742:	4a c8       	lddpc	r8,800047f0 <fat_cluster_list+0x298>
80004744:	b0 89       	st.b	r8[0x0],r9
80004746:	30 0c       	mov	r12,0
            return false;
80004748:	c5 18       	rjmp	800047ea <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000474a:	0b 98       	ld.ub	r8,r5[0x1]
8000474c:	6c 19       	ld.w	r9,r6[0x4]
8000474e:	f2 08 01 08 	sub	r8,r9,r8
80004752:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004754:	40 0a       	lddsp	r10,sp[0x0]
80004756:	58 0a       	cp.w	r10,0
80004758:	c4 50       	breq	800047e2 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
8000475a:	58 08       	cp.w	r8,0
8000475c:	c4 31       	brne	800047e2 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
8000475e:	6e 18       	ld.w	r8,r7[0x4]
80004760:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004762:	e0 68 ff ff 	mov	r8,65535
80004766:	ea 18 0f ff 	orh	r8,0xfff
8000476a:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
8000476c:	30 1c       	mov	r12,1
8000476e:	f0 1f 00 2b 	mcall	80004818 <fat_cluster_list+0x2c0>
80004772:	c3 b0       	breq	800047e8 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004774:	6c 08       	ld.w	r8,r6[0x0]
80004776:	8f 18       	st.w	r7[0x4],r8
80004778:	c3 58       	rjmp	800047e2 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
8000477a:	e4 03 18 00 	cp.b	r3,r2
8000477e:	c0 a1       	brne	80004792 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004780:	6e 09       	ld.w	r9,r7[0x0]
80004782:	2f f9       	sub	r9,-1
80004784:	6e 18       	ld.w	r8,r7[0x4]
80004786:	10 39       	cp.w	r9,r8
80004788:	c1 b0       	breq	800047be <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
8000478a:	f0 1f 00 23 	mcall	80004814 <fat_cluster_list+0x2bc>
8000478e:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004790:	c2 d8       	rjmp	800047ea <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004792:	40 09       	lddsp	r9,sp[0x0]
80004794:	58 09       	cp.w	r9,0
80004796:	c1 40       	breq	800047be <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004798:	6e 18       	ld.w	r8,r7[0x4]
8000479a:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
8000479c:	30 08       	mov	r8,0
8000479e:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
800047a0:	0b 98       	ld.ub	r8,r5[0x1]
800047a2:	6c 19       	ld.w	r9,r6[0x4]
800047a4:	10 39       	cp.w	r9,r8
800047a6:	c0 62       	brcc	800047b2 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
800047a8:	e0 68 ff ff 	mov	r8,65535
800047ac:	ea 18 0f ff 	orh	r8,0xfff
800047b0:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800047b2:	30 1c       	mov	r12,1
800047b4:	f0 1f 00 19 	mcall	80004818 <fat_cluster_list+0x2c0>
800047b8:	c1 80       	breq	800047e8 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
800047ba:	6c 08       	ld.w	r8,r6[0x0]
800047bc:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
800047be:	e2 04 18 00 	cp.b	r4,r1
800047c2:	c0 b1       	brne	800047d8 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
800047c4:	40 0a       	lddsp	r10,sp[0x0]
800047c6:	58 0a       	cp.w	r10,0
800047c8:	c0 40       	breq	800047d0 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
800047ca:	f0 1f 00 19 	mcall	8000482c <fat_cluster_list+0x2d4>
800047ce:	c0 e8       	rjmp	800047ea <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
800047d0:	f0 1f 00 11 	mcall	80004814 <fat_cluster_list+0x2bc>
800047d4:	30 1c       	mov	r12,1
            return true; // End of segment
800047d6:	c0 a8       	rjmp	800047ea <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
800047d8:	0b 99       	ld.ub	r9,r5[0x1]
800047da:	6c 18       	ld.w	r8,r6[0x4]
800047dc:	f2 08 00 08 	add	r8,r9,r8
800047e0:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
800047e2:	6e 18       	ld.w	r8,r7[0x4]
800047e4:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
800047e6:	c2 eb       	rjmp	80004642 <fat_cluster_list+0xea>
800047e8:	30 0c       	mov	r12,0
}
800047ea:	2f ed       	sub	sp,-8
800047ec:	d8 32       	popm	r0-r7,pc
800047ee:	00 00       	add	r0,r0
800047f0:	00 00       	add	r0,r0
800047f2:	0c 1c       	sub	r12,r6
800047f4:	00 00       	add	r0,r0
800047f6:	0c 18       	sub	r8,r6
800047f8:	80 00       	ld.sh	r0,r0[0x0]
800047fa:	50 2c       	stdsp	sp[0x8],r12
800047fc:	00 00       	add	r0,r0
800047fe:	0c 74       	tst	r4,r6
80004800:	00 00       	add	r0,r0
80004802:	0b cc       	ld.ub	r12,r5[0x4]
80004804:	00 00       	add	r0,r0
80004806:	0c 6c       	and	r12,r6
80004808:	80 00       	ld.sh	r0,r0[0x0]
8000480a:	3a c0       	mov	r0,-84
8000480c:	80 00       	ld.sh	r0,r0[0x0]
8000480e:	39 98       	mov	r8,-103
80004810:	80 00       	ld.sh	r0,r0[0x0]
80004812:	4c 88       	lddpc	r8,80004930 <fat_read_file+0x7c>
80004814:	80 00       	ld.sh	r0,r0[0x0]
80004816:	3a 68       	mov	r8,-90
80004818:	80 00       	ld.sh	r0,r0[0x0]
8000481a:	43 14       	lddsp	r4,sp[0xc4]
8000481c:	80 00       	ld.sh	r0,r0[0x0]
8000481e:	42 80       	lddsp	r0,sp[0xa0]
80004820:	80 00       	ld.sh	r0,r0[0x0]
80004822:	39 38       	mov	r8,-109
80004824:	00 00       	add	r0,r0
80004826:	0c 1e       	sub	lr,r6
80004828:	00 00       	add	r0,r0
8000482a:	09 a0       	ld.ub	r0,r4[0x2]
8000482c:	80 00       	ld.sh	r0,r0[0x0]
8000482e:	4d 14       	lddpc	r4,80004970 <fat_read_file+0xbc>

80004830 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004830:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004834:	49 98       	lddpc	r8,80004898 <fat_read_dir+0x68>
80004836:	90 97       	ld.uh	r7,r8[0x2]
80004838:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000483a:	49 98       	lddpc	r8,8000489c <fat_read_dir+0x6c>
8000483c:	11 89       	ld.ub	r9,r8[0x0]
8000483e:	49 98       	lddpc	r8,800048a0 <fat_read_dir+0x70>
80004840:	11 88       	ld.ub	r8,r8[0x0]
80004842:	f0 09 18 00 	cp.b	r9,r8
80004846:	c0 d1       	brne	80004860 <fat_read_dir+0x30>
80004848:	49 58       	lddpc	r8,8000489c <fat_read_dir+0x6c>
8000484a:	70 39       	ld.w	r9,r8[0xc]
8000484c:	49 58       	lddpc	r8,800048a0 <fat_read_dir+0x70>
8000484e:	70 88       	ld.w	r8,r8[0x20]
80004850:	10 39       	cp.w	r9,r8
80004852:	c0 71       	brne	80004860 <fat_read_dir+0x30>
80004854:	49 28       	lddpc	r8,8000489c <fat_read_dir+0x6c>
80004856:	70 48       	ld.w	r8,r8[0x10]
80004858:	0e 38       	cp.w	r8,r7
8000485a:	c0 31       	brne	80004860 <fat_read_dir+0x30>
8000485c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004860:	49 18       	lddpc	r8,800048a4 <fat_read_dir+0x74>
80004862:	49 09       	lddpc	r9,800048a0 <fat_read_dir+0x70>
80004864:	72 89       	ld.w	r9,r9[0x20]
80004866:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004868:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
8000486a:	30 0b       	mov	r11,0
8000486c:	30 2c       	mov	r12,2
8000486e:	f0 1f 00 0f 	mcall	800048a8 <fat_read_dir+0x78>
80004872:	c1 00       	breq	80004892 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004874:	48 c8       	lddpc	r8,800048a4 <fat_read_dir+0x74>
80004876:	70 09       	ld.w	r9,r8[0x0]
80004878:	48 d8       	lddpc	r8,800048ac <fat_read_dir+0x7c>
8000487a:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
8000487c:	30 1c       	mov	r12,1
8000487e:	f0 1f 00 0d 	mcall	800048b0 <fat_read_dir+0x80>
80004882:	c0 80       	breq	80004892 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004884:	48 68       	lddpc	r8,8000489c <fat_read_dir+0x6c>
80004886:	48 79       	lddpc	r9,800048a0 <fat_read_dir+0x70>
80004888:	72 89       	ld.w	r9,r9[0x20]
8000488a:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
8000488c:	91 47       	st.w	r8[0x10],r7
8000488e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004892:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004896:	00 00       	add	r0,r0
80004898:	00 00       	add	r0,r0
8000489a:	0c 18       	sub	r8,r6
8000489c:	00 00       	add	r0,r0
8000489e:	0c 54       	eor	r4,r6
800048a0:	00 00       	add	r0,r0
800048a2:	0b cc       	ld.ub	r12,r5[0x4]
800048a4:	00 00       	add	r0,r0
800048a6:	0c 74       	tst	r4,r6
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	45 58       	lddsp	r8,sp[0x154]
800048ac:	00 00       	add	r0,r0
800048ae:	09 88       	ld.ub	r8,r4[0x0]
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	42 00       	lddsp	r0,sp[0x80]

800048b4 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
800048b4:	eb cd 40 c0 	pushm	r6-r7,lr
800048b8:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
800048ba:	4a e8       	lddpc	r8,80004970 <fat_read_file+0xbc>
800048bc:	70 38       	ld.w	r8,r8[0xc]
800048be:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
800048c2:	30 29       	mov	r9,2
800048c4:	f2 0c 18 00 	cp.b	r12,r9
800048c8:	c1 31       	brne	800048ee <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800048ca:	4a b8       	lddpc	r8,80004974 <fat_read_file+0xc0>
800048cc:	11 89       	ld.ub	r9,r8[0x0]
800048ce:	4a b8       	lddpc	r8,80004978 <fat_read_file+0xc4>
800048d0:	11 88       	ld.ub	r8,r8[0x0]
800048d2:	f0 09 18 00 	cp.b	r9,r8
800048d6:	c1 91       	brne	80004908 <fat_read_file+0x54>
800048d8:	4a 78       	lddpc	r8,80004974 <fat_read_file+0xc0>
800048da:	70 39       	ld.w	r9,r8[0xc]
800048dc:	4a 58       	lddpc	r8,80004970 <fat_read_file+0xbc>
800048de:	70 18       	ld.w	r8,r8[0x4]
800048e0:	10 39       	cp.w	r9,r8
800048e2:	c1 31       	brne	80004908 <fat_read_file+0x54>
800048e4:	4a 48       	lddpc	r8,80004974 <fat_read_file+0xc0>
800048e6:	70 48       	ld.w	r8,r8[0x10]
800048e8:	0c 38       	cp.w	r8,r6
800048ea:	c0 f1       	brne	80004908 <fat_read_file+0x54>
800048ec:	c3 38       	rjmp	80004952 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
800048ee:	30 39       	mov	r9,3
800048f0:	f2 0c 18 00 	cp.b	r12,r9
800048f4:	c3 31       	brne	8000495a <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
800048f6:	49 f9       	lddpc	r9,80004970 <fat_read_file+0xbc>
800048f8:	72 19       	ld.w	r9,r9[0x4]
800048fa:	58 09       	cp.w	r9,0
800048fc:	c2 b0       	breq	80004952 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
800048fe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004902:	c2 c0       	breq	8000495a <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004904:	2f f6       	sub	r6,-1
80004906:	c2 a8       	rjmp	8000495a <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004908:	49 d8       	lddpc	r8,8000497c <fat_read_file+0xc8>
8000490a:	49 a9       	lddpc	r9,80004970 <fat_read_file+0xbc>
8000490c:	72 19       	ld.w	r9,r9[0x4]
8000490e:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004910:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004912:	30 1b       	mov	r11,1
80004914:	16 9c       	mov	r12,r11
80004916:	f0 1f 00 1b 	mcall	80004980 <fat_read_file+0xcc>
8000491a:	c1 e0       	breq	80004956 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
8000491c:	49 88       	lddpc	r8,8000497c <fat_read_file+0xc8>
8000491e:	70 09       	ld.w	r9,r8[0x0]
80004920:	49 98       	lddpc	r8,80004984 <fat_read_file+0xd0>
80004922:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80004924:	30 1c       	mov	r12,1
80004926:	f0 1f 00 19 	mcall	80004988 <fat_read_file+0xd4>
8000492a:	c1 60       	breq	80004956 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
8000492c:	49 28       	lddpc	r8,80004974 <fat_read_file+0xc0>
8000492e:	49 19       	lddpc	r9,80004970 <fat_read_file+0xbc>
80004930:	72 19       	ld.w	r9,r9[0x4]
80004932:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80004934:	91 46       	st.w	r8[0x10],r6
80004936:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000493a:	30 38       	mov	r8,3
8000493c:	f0 07 18 00 	cp.b	r7,r8
80004940:	c0 b1       	brne	80004956 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80004942:	49 38       	lddpc	r8,8000498c <fat_read_file+0xd8>
80004944:	11 89       	ld.ub	r9,r8[0x0]
80004946:	31 a8       	mov	r8,26
80004948:	f0 09 18 00 	cp.b	r9,r8
8000494c:	5f 0c       	sreq	r12
8000494e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004952:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80004956:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000495a:	48 98       	lddpc	r8,8000497c <fat_read_file+0xc8>
8000495c:	48 59       	lddpc	r9,80004970 <fat_read_file+0xbc>
8000495e:	72 19       	ld.w	r9,r9[0x4]
80004960:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004962:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80004964:	30 1b       	mov	r11,1
80004966:	0e 9c       	mov	r12,r7
80004968:	f0 1f 00 06 	mcall	80004980 <fat_read_file+0xcc>
8000496c:	ce 70       	breq	8000493a <fat_read_file+0x86>
8000496e:	cf 2b       	rjmp	80004952 <fat_read_file+0x9e>
80004970:	00 00       	add	r0,r0
80004972:	09 8c       	ld.ub	r12,r4[0x0]
80004974:	00 00       	add	r0,r0
80004976:	0c 54       	eor	r4,r6
80004978:	00 00       	add	r0,r0
8000497a:	0b cc       	ld.ub	r12,r5[0x4]
8000497c:	00 00       	add	r0,r0
8000497e:	0c 74       	tst	r4,r6
80004980:	80 00       	ld.sh	r0,r0[0x0]
80004982:	45 58       	lddsp	r8,sp[0x154]
80004984:	00 00       	add	r0,r0
80004986:	09 88       	ld.ub	r8,r4[0x0]
80004988:	80 00       	ld.sh	r0,r0[0x0]
8000498a:	42 00       	lddsp	r0,sp[0x80]
8000498c:	00 00       	add	r0,r0
8000498e:	0c 1c       	sub	r12,r6

80004990 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80004990:	eb cd 40 c0 	pushm	r6-r7,lr
80004994:	18 97       	mov	r7,r12
80004996:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
80004998:	4b 68       	lddpc	r8,80004a70 <fat_write_file+0xe0>
8000499a:	70 18       	ld.w	r8,r8[0x4]
8000499c:	58 08       	cp.w	r8,0
8000499e:	c0 a1       	brne	800049b2 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
800049a0:	4b 58       	lddpc	r8,80004a74 <fat_write_file+0xe4>
800049a2:	3f f9       	mov	r9,-1
800049a4:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
800049a6:	30 09       	mov	r9,0
800049a8:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
800049aa:	30 1c       	mov	r12,1
800049ac:	f0 1f 00 33 	mcall	80004a78 <fat_write_file+0xe8>
800049b0:	c1 c8       	rjmp	800049e8 <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
800049b2:	f0 1f 00 33 	mcall	80004a7c <fat_write_file+0xec>
800049b6:	c0 30       	breq	800049bc <fat_write_file+0x2c>
800049b8:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
800049bc:	4b 18       	lddpc	r8,80004a80 <fat_write_file+0xf0>
800049be:	11 89       	ld.ub	r9,r8[0x0]
800049c0:	31 a8       	mov	r8,26
800049c2:	f0 09 18 00 	cp.b	r9,r8
800049c6:	c5 21       	brne	80004a6a <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800049c8:	4a f8       	lddpc	r8,80004a84 <fat_write_file+0xf4>
800049ca:	11 88       	ld.ub	r8,r8[0x0]
800049cc:	f0 08 00 28 	add	r8,r8,r8<<0x2
800049d0:	4a e9       	lddpc	r9,80004a88 <fat_write_file+0xf8>
800049d2:	f2 08 00 28 	add	r8,r9,r8<<0x2
800049d6:	3f f9       	mov	r9,-1
800049d8:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
800049da:	2f 88       	sub	r8,-8
800049dc:	4a c9       	lddpc	r9,80004a8c <fat_write_file+0xfc>
800049de:	13 9a       	ld.ub	r10,r9[0x1]
800049e0:	70 09       	ld.w	r9,r8[0x0]
800049e2:	f4 09 00 09 	add	r9,r10,r9
800049e6:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
800049e8:	30 18       	mov	r8,1
800049ea:	f0 07 18 00 	cp.b	r7,r8
800049ee:	c0 41       	brne	800049f6 <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
800049f0:	4a 18       	lddpc	r8,80004a74 <fat_write_file+0xe4>
800049f2:	91 16       	st.w	r8[0x4],r6
800049f4:	c0 48       	rjmp	800049fc <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
800049f6:	30 19       	mov	r9,1
800049f8:	49 f8       	lddpc	r8,80004a74 <fat_write_file+0xe4>
800049fa:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
800049fc:	f0 1f 00 25 	mcall	80004a90 <fat_write_file+0x100>
80004a00:	c3 50       	breq	80004a6a <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80004a02:	49 c8       	lddpc	r8,80004a70 <fat_write_file+0xe0>
80004a04:	70 18       	ld.w	r8,r8[0x4]
80004a06:	58 08       	cp.w	r8,0
80004a08:	c0 d1       	brne	80004a22 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
80004a0a:	49 b8       	lddpc	r8,80004a74 <fat_write_file+0xe4>
80004a0c:	70 08       	ld.w	r8,r8[0x0]
80004a0e:	49 e9       	lddpc	r9,80004a84 <fat_write_file+0xf4>
80004a10:	13 89       	ld.ub	r9,r9[0x0]
80004a12:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004a16:	2f f9       	sub	r9,-1
80004a18:	49 ca       	lddpc	r10,80004a88 <fat_write_file+0xf8>
80004a1a:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
80004a1e:	49 59       	lddpc	r9,80004a70 <fat_write_file+0xe0>
80004a20:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80004a22:	30 18       	mov	r8,1
80004a24:	f0 07 18 00 	cp.b	r7,r8
80004a28:	c0 71       	brne	80004a36 <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
80004a2a:	49 38       	lddpc	r8,80004a74 <fat_write_file+0xe4>
80004a2c:	70 19       	ld.w	r9,r8[0x4]
80004a2e:	ec 09 01 09 	sub	r9,r6,r9
80004a32:	91 19       	st.w	r8[0x4],r9
80004a34:	c0 68       	rjmp	80004a40 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80004a36:	49 08       	lddpc	r8,80004a74 <fat_write_file+0xe4>
80004a38:	70 19       	ld.w	r9,r8[0x4]
80004a3a:	f2 09 11 01 	rsub	r9,r9,1
80004a3e:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004a40:	48 d9       	lddpc	r9,80004a74 <fat_write_file+0xe4>
80004a42:	49 38       	lddpc	r8,80004a8c <fat_write_file+0xfc>
80004a44:	70 5b       	ld.w	r11,r8[0x14]
80004a46:	70 4a       	ld.w	r10,r8[0x10]
80004a48:	f6 0a 00 0a 	add	r10,r11,r10
80004a4c:	11 9b       	ld.ub	r11,r8[0x1]
80004a4e:	72 08       	ld.w	r8,r9[0x0]
80004a50:	20 28       	sub	r8,2
80004a52:	f6 08 02 48 	mul	r8,r11,r8
80004a56:	f4 08 00 08 	add	r8,r10,r8
80004a5a:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80004a5c:	f0 1f 00 0e 	mcall	80004a94 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80004a60:	0e 9c       	mov	r12,r7
80004a62:	f0 1f 00 07 	mcall	80004a7c <fat_write_file+0xec>
80004a66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004a6a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004a6e:	00 00       	add	r0,r0
80004a70:	00 00       	add	r0,r0
80004a72:	09 8c       	ld.ub	r12,r4[0x0]
80004a74:	00 00       	add	r0,r0
80004a76:	0c 74       	tst	r4,r6
80004a78:	80 00       	ld.sh	r0,r0[0x0]
80004a7a:	39 c0       	mov	r0,-100
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	48 b4       	lddpc	r4,80004aa8 <fat_check_device+0x10>
80004a80:	00 00       	add	r0,r0
80004a82:	0c 1c       	sub	r12,r6
80004a84:	00 00       	add	r0,r0
80004a86:	0c 1e       	sub	lr,r6
80004a88:	00 00       	add	r0,r0
80004a8a:	09 a0       	ld.ub	r0,r4[0x2]
80004a8c:	00 00       	add	r0,r0
80004a8e:	0b cc       	ld.ub	r12,r5[0x4]
80004a90:	80 00       	ld.sh	r0,r0[0x0]
80004a92:	50 cc       	stdsp	sp[0x30],r12
80004a94:	80 00       	ld.sh	r0,r0[0x0]
80004a96:	3a 68       	mov	r8,-90

80004a98 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80004a98:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80004a9a:	4a 28       	lddpc	r8,80004b20 <fat_check_device+0x88>
80004a9c:	11 89       	ld.ub	r9,r8[0x0]
80004a9e:	30 08       	mov	r8,0
80004aa0:	f0 09 18 00 	cp.b	r9,r8
80004aa4:	c3 c1       	brne	80004b1c <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80004aa6:	4a 08       	lddpc	r8,80004b24 <fat_check_device+0x8c>
80004aa8:	11 89       	ld.ub	r9,r8[0x0]
80004aaa:	3f f8       	mov	r8,-1
80004aac:	f0 09 18 00 	cp.b	r9,r8
80004ab0:	c0 51       	brne	80004aba <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80004ab2:	30 19       	mov	r9,1
80004ab4:	49 d8       	lddpc	r8,80004b28 <fat_check_device+0x90>
80004ab6:	b0 89       	st.b	r8[0x0],r9
80004ab8:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
80004aba:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80004abc:	49 a5       	lddpc	r5,80004b24 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80004abe:	49 c1       	lddpc	r1,80004b2c <fat_check_device+0x94>
80004ac0:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80004ac2:	49 c0       	lddpc	r0,80004b30 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004ac4:	49 c4       	lddpc	r4,80004b34 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004ac6:	49 d3       	lddpc	r3,80004b38 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80004ac8:	0b 8c       	ld.ub	r12,r5[0x0]
80004aca:	f0 1f 00 1d 	mcall	80004b3c <fat_check_device+0xa4>
80004ace:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
80004ad0:	c2 60       	breq	80004b1c <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80004ad2:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80004ad4:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004ad6:	0b 88       	ld.ub	r8,r5[0x0]
80004ad8:	09 89       	ld.ub	r9,r4[0x0]
80004ada:	f0 09 18 00 	cp.b	r9,r8
80004ade:	c0 51       	brne	80004ae8 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80004ae0:	49 89       	lddpc	r9,80004b40 <fat_check_device+0xa8>
80004ae2:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80004ae4:	49 89       	lddpc	r9,80004b44 <fat_check_device+0xac>
80004ae6:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004ae8:	07 89       	ld.ub	r9,r3[0x0]
80004aea:	f0 09 18 00 	cp.b	r9,r8
80004aee:	c0 31       	brne	80004af4 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80004af0:	f0 1f 00 16 	mcall	80004b48 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80004af4:	f0 1f 00 16 	mcall	80004b4c <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80004af8:	30 18       	mov	r8,1
80004afa:	48 c9       	lddpc	r9,80004b28 <fat_check_device+0x90>
80004afc:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80004afe:	58 37       	cp.w	r7,3
80004b00:	c0 81       	brne	80004b10 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80004b02:	10 02       	add	r2,r8
80004b04:	5c 52       	castu.b	r2
80004b06:	36 48       	mov	r8,100
80004b08:	f0 02 18 00 	cp.b	r2,r8
80004b0c:	cd e1       	brne	80004ac8 <fat_check_device+0x30>
80004b0e:	c0 88       	rjmp	80004b1e <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80004b10:	58 27       	cp.w	r7,2
80004b12:	c0 61       	brne	80004b1e <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80004b14:	31 89       	mov	r9,24
80004b16:	48 58       	lddpc	r8,80004b28 <fat_check_device+0x90>
80004b18:	b0 89       	st.b	r8[0x0],r9
80004b1a:	d8 3a       	popm	r0-r7,pc,r12=0
80004b1c:	da 3a       	popm	r0-r7,pc,r12=1
80004b1e:	d8 3a       	popm	r0-r7,pc,r12=0
80004b20:	00 00       	add	r0,r0
80004b22:	09 9e       	ld.ub	lr,r4[0x1]
80004b24:	00 00       	add	r0,r0
80004b26:	0b cc       	ld.ub	r12,r5[0x4]
80004b28:	00 00       	add	r0,r0
80004b2a:	0c 1c       	sub	r12,r6
80004b2c:	00 00       	add	r0,r0
80004b2e:	0c 18       	sub	r8,r6
80004b30:	00 00       	add	r0,r0
80004b32:	09 8c       	ld.ub	r12,r4[0x0]
80004b34:	00 00       	add	r0,r0
80004b36:	0c 20       	rsub	r0,r6
80004b38:	00 00       	add	r0,r0
80004b3a:	0c 54       	eor	r4,r6
80004b3c:	80 00       	ld.sh	r0,r0[0x0]
80004b3e:	66 b4       	ld.w	r4,r3[0x2c]
80004b40:	00 00       	add	r0,r0
80004b42:	0c 14       	sub	r4,r6
80004b44:	00 00       	add	r0,r0
80004b46:	0c 04       	add	r4,r6
80004b48:	80 00       	ld.sh	r0,r0[0x0]
80004b4a:	3f b8       	mov	r8,-5
80004b4c:	80 00       	ld.sh	r0,r0[0x0]
80004b4e:	39 98       	mov	r8,-103

80004b50 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80004b50:	d4 01       	pushm	lr
   if( !fat_check_device() )
80004b52:	f0 1f 00 0b 	mcall	80004b7c <fat_check_noopen+0x2c>
80004b56:	c1 10       	breq	80004b78 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80004b58:	48 a8       	lddpc	r8,80004b80 <fat_check_noopen+0x30>
80004b5a:	11 89       	ld.ub	r9,r8[0x0]
80004b5c:	30 08       	mov	r8,0
80004b5e:	f0 09 18 00 	cp.b	r9,r8
80004b62:	c0 b0       	breq	80004b78 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80004b64:	48 88       	lddpc	r8,80004b84 <fat_check_noopen+0x34>
80004b66:	11 89       	ld.ub	r9,r8[0x0]
80004b68:	30 08       	mov	r8,0
80004b6a:	f0 09 18 00 	cp.b	r9,r8
80004b6e:	c0 50       	breq	80004b78 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80004b70:	30 59       	mov	r9,5
80004b72:	48 68       	lddpc	r8,80004b88 <fat_check_noopen+0x38>
80004b74:	b0 89       	st.b	r8[0x0],r9
80004b76:	d8 0a       	popm	pc,r12=0
      return false;
80004b78:	da 0a       	popm	pc,r12=1
80004b7a:	00 00       	add	r0,r0
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	4a 98       	lddpc	r8,80004c20 <fat_check_mount_select_noopen+0x20>
80004b80:	00 00       	add	r0,r0
80004b82:	0c 18       	sub	r8,r6
80004b84:	00 00       	add	r0,r0
80004b86:	09 8c       	ld.ub	r12,r4[0x0]
80004b88:	00 00       	add	r0,r0
80004b8a:	0c 1c       	sub	r12,r6

80004b8c <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80004b8c:	d4 01       	pushm	lr
   if( !fat_check_device() )
80004b8e:	f0 1f 00 0a 	mcall	80004bb4 <fat_check_mount+0x28>
80004b92:	c0 f0       	breq	80004bb0 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80004b94:	48 98       	lddpc	r8,80004bb8 <fat_check_mount+0x2c>
80004b96:	11 89       	ld.ub	r9,r8[0x0]
80004b98:	30 08       	mov	r8,0
80004b9a:	f0 09 18 00 	cp.b	r9,r8
80004b9e:	c0 81       	brne	80004bae <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80004ba0:	f0 1f 00 07 	mcall	80004bbc <fat_check_mount+0x30>
80004ba4:	c0 51       	brne	80004bae <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80004ba6:	30 e9       	mov	r9,14
80004ba8:	48 68       	lddpc	r8,80004bc0 <fat_check_mount+0x34>
80004baa:	b0 89       	st.b	r8[0x0],r9
         return false;
80004bac:	d8 02       	popm	pc
80004bae:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80004bb0:	d8 02       	popm	pc
80004bb2:	00 00       	add	r0,r0
80004bb4:	80 00       	ld.sh	r0,r0[0x0]
80004bb6:	4a 98       	lddpc	r8,80004c58 <fat_translate_char_shortname+0x1c>
80004bb8:	00 00       	add	r0,r0
80004bba:	0c 18       	sub	r8,r6
80004bbc:	80 00       	ld.sh	r0,r0[0x0]
80004bbe:	56 64       	stdsp	sp[0x198],r4
80004bc0:	00 00       	add	r0,r0
80004bc2:	0c 1c       	sub	r12,r6

80004bc4 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80004bc4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004bc6:	f0 1f 00 04 	mcall	80004bd4 <fat_check_mount_select+0x10>
80004bca:	c0 30       	breq	80004bd0 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80004bcc:	f0 1f 00 03 	mcall	80004bd8 <fat_check_mount_select+0x14>
}
80004bd0:	d8 02       	popm	pc
80004bd2:	00 00       	add	r0,r0
80004bd4:	80 00       	ld.sh	r0,r0[0x0]
80004bd6:	4b 8c       	lddpc	r12,80004cb4 <fat_clear_cluster+0x14>
80004bd8:	80 00       	ld.sh	r0,r0[0x0]
80004bda:	38 fc       	mov	r12,-113

80004bdc <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80004bdc:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004bde:	f0 1f 00 06 	mcall	80004bf4 <fat_check_mount_select_open+0x18>
80004be2:	c0 70       	breq	80004bf0 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80004be4:	f0 1f 00 05 	mcall	80004bf8 <fat_check_mount_select_open+0x1c>
80004be8:	c0 40       	breq	80004bf0 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
80004bea:	f0 1f 00 05 	mcall	80004bfc <fat_check_mount_select_open+0x20>
80004bee:	d8 02       	popm	pc
80004bf0:	d8 0a       	popm	pc,r12=0
80004bf2:	00 00       	add	r0,r0
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	4b 8c       	lddpc	r12,80004cd4 <fat_clear_cluster+0x34>
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	38 fc       	mov	r12,-113
80004bfc:	80 00       	ld.sh	r0,r0[0x0]
80004bfe:	38 dc       	mov	r12,-115

80004c00 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80004c00:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004c02:	f0 1f 00 06 	mcall	80004c18 <fat_check_mount_select_noopen+0x18>
80004c06:	c0 70       	breq	80004c14 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80004c08:	f0 1f 00 05 	mcall	80004c1c <fat_check_mount_select_noopen+0x1c>
80004c0c:	c0 40       	breq	80004c14 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
80004c0e:	f0 1f 00 05 	mcall	80004c20 <fat_check_mount_select_noopen+0x20>
80004c12:	d8 02       	popm	pc
80004c14:	d8 0a       	popm	pc,r12=0
80004c16:	00 00       	add	r0,r0
80004c18:	80 00       	ld.sh	r0,r0[0x0]
80004c1a:	4b 8c       	lddpc	r12,80004cf8 <fat_clear_cluster+0x58>
80004c1c:	80 00       	ld.sh	r0,r0[0x0]
80004c1e:	38 fc       	mov	r12,-113
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	4b 50       	lddpc	r0,80004cf4 <fat_clear_cluster+0x54>

80004c24 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80004c24:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004c26:	f0 1f 00 04 	mcall	80004c34 <fat_check_mount_noopen+0x10>
80004c2a:	c0 30       	breq	80004c30 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80004c2c:	f0 1f 00 03 	mcall	80004c38 <fat_check_mount_noopen+0x14>
}
80004c30:	d8 02       	popm	pc
80004c32:	00 00       	add	r0,r0
80004c34:	80 00       	ld.sh	r0,r0[0x0]
80004c36:	4b 8c       	lddpc	r12,80004d14 <fat_update_fat2>
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	4b 50       	lddpc	r0,80004d0c <fat_clear_cluster+0x6c>

80004c3c <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80004c3c:	f8 c9 00 21 	sub	r9,r12,33
80004c40:	35 d8       	mov	r8,93
80004c42:	f0 09 18 00 	cp.b	r9,r8
80004c46:	e0 8b 00 1d 	brhi	80004c80 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
80004c4a:	f8 c9 00 61 	sub	r9,r12,97
80004c4e:	31 98       	mov	r8,25
80004c50:	f0 09 18 00 	cp.b	r9,r8
80004c54:	e0 88 00 07 	brls	80004c62 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80004c58:	32 b8       	mov	r8,43
80004c5a:	f0 0c 18 00 	cp.b	r12,r8
80004c5e:	c0 51       	brne	80004c68 <fat_translate_char_shortname+0x2c>
80004c60:	c1 08       	rjmp	80004c80 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80004c62:	22 0c       	sub	r12,32
80004c64:	5c 5c       	castu.b	r12
80004c66:	5e fc       	retal	r12
80004c68:	48 7a       	lddpc	r10,80004c84 <fat_translate_char_shortname+0x48>
80004c6a:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
80004c6e:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80004c70:	11 89       	ld.ub	r9,r8[0x0]
80004c72:	f8 09 18 00 	cp.b	r9,r12
80004c76:	c0 50       	breq	80004c80 <fat_translate_char_shortname+0x44>
80004c78:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
80004c7a:	14 38       	cp.w	r8,r10
80004c7c:	cf a1       	brne	80004c70 <fat_translate_char_shortname+0x34>
80004c7e:	5e fc       	retal	r12
80004c80:	5e fd       	retal	0
80004c82:	00 00       	add	r0,r0
80004c84:	80 00       	ld.sh	r0,r0[0x0]
80004c86:	d5 a4       	*unknown*

80004c88 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
80004c88:	3f f9       	mov	r9,-1
80004c8a:	48 48       	lddpc	r8,80004c98 <fat_clear_info_fat_mod+0x10>
80004c8c:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80004c8e:	30 09       	mov	r9,0
80004c90:	48 38       	lddpc	r8,80004c9c <fat_clear_info_fat_mod+0x14>
80004c92:	91 09       	st.w	r8[0x0],r9
}
80004c94:	5e fc       	retal	r12
80004c96:	00 00       	add	r0,r0
80004c98:	00 00       	add	r0,r0
80004c9a:	0c 00       	add	r0,r6
80004c9c:	00 00       	add	r0,r0
80004c9e:	09 c8       	ld.ub	r8,r4[0x4]

80004ca0 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
80004ca0:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80004ca2:	30 0b       	mov	r11,0
80004ca4:	49 58       	lddpc	r8,80004cf8 <fat_clear_cluster+0x58>
80004ca6:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
80004ca8:	30 2c       	mov	r12,2
80004caa:	f0 1f 00 15 	mcall	80004cfc <fat_clear_cluster+0x5c>
80004cae:	c2 30       	breq	80004cf4 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80004cb0:	49 48       	lddpc	r8,80004d00 <fat_clear_cluster+0x60>
80004cb2:	11 98       	ld.ub	r8,r8[0x1]
80004cb4:	49 19       	lddpc	r9,80004cf8 <fat_clear_cluster+0x58>
80004cb6:	72 0a       	ld.w	r10,r9[0x0]
80004cb8:	20 1a       	sub	r10,1
80004cba:	10 0a       	add	r10,r8
80004cbc:	49 29       	lddpc	r9,80004d04 <fat_clear_cluster+0x64>
80004cbe:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
80004cc0:	58 08       	cp.w	r8,0
80004cc2:	c1 a0       	breq	80004cf6 <fat_clear_cluster+0x56>
80004cc4:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
80004cc6:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
80004cc8:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004cca:	48 e5       	lddpc	r5,80004d00 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
80004ccc:	08 9c       	mov	r12,r4
80004cce:	f0 1f 00 0f 	mcall	80004d08 <fat_clear_cluster+0x68>
80004cd2:	c1 10       	breq	80004cf4 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
80004cd4:	58 07       	cp.w	r7,0
80004cd6:	c0 31       	brne	80004cdc <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80004cd8:	f0 1f 00 0d 	mcall	80004d0c <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
80004cdc:	f0 1f 00 0d 	mcall	80004d10 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
80004ce0:	6c 08       	ld.w	r8,r6[0x0]
80004ce2:	20 18       	sub	r8,1
80004ce4:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004ce6:	2f f7       	sub	r7,-1
80004ce8:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80004cea:	0b 98       	ld.ub	r8,r5[0x1]
80004cec:	ee 08 18 00 	cp.b	r8,r7
80004cf0:	ce e1       	brne	80004ccc <fat_clear_cluster+0x2c>
80004cf2:	c0 28       	rjmp	80004cf6 <fat_clear_cluster+0x56>
80004cf4:	d8 2a       	popm	r4-r7,pc,r12=0
80004cf6:	da 2a       	popm	r4-r7,pc,r12=1
80004cf8:	00 00       	add	r0,r0
80004cfa:	0c 74       	tst	r4,r6
80004cfc:	80 00       	ld.sh	r0,r0[0x0]
80004cfe:	45 58       	lddsp	r8,sp[0x154]
80004d00:	00 00       	add	r0,r0
80004d02:	0b cc       	ld.ub	r12,r5[0x4]
80004d04:	00 00       	add	r0,r0
80004d06:	09 88       	ld.ub	r8,r4[0x0]
80004d08:	80 00       	ld.sh	r0,r0[0x0]
80004d0a:	42 00       	lddsp	r0,sp[0x80]
80004d0c:	80 00       	ld.sh	r0,r0[0x0]
80004d0e:	41 e8       	lddsp	r8,sp[0x78]
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	3f d0       	mov	r0,-3

80004d14 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80004d14:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004d18:	49 68       	lddpc	r8,80004d70 <fat_update_fat2+0x5c>
80004d1a:	70 08       	ld.w	r8,r8[0x0]
80004d1c:	49 69       	lddpc	r9,80004d74 <fat_update_fat2+0x60>
80004d1e:	72 09       	ld.w	r9,r9[0x0]
80004d20:	12 38       	cp.w	r8,r9
80004d22:	e0 8b 00 25 	brhi	80004d6c <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004d26:	49 55       	lddpc	r5,80004d78 <fat_update_fat2+0x64>
80004d28:	49 57       	lddpc	r7,80004d7c <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004d2a:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004d2c:	49 16       	lddpc	r6,80004d70 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004d2e:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004d30:	49 14       	lddpc	r4,80004d74 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004d32:	6e 49       	ld.w	r9,r7[0x10]
80004d34:	12 08       	add	r8,r9
80004d36:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004d38:	06 9c       	mov	r12,r3
80004d3a:	f0 1f 00 12 	mcall	80004d80 <fat_update_fat2+0x6c>
80004d3e:	c1 50       	breq	80004d68 <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004d40:	6e 19       	ld.w	r9,r7[0x4]
80004d42:	6e 48       	ld.w	r8,r7[0x10]
80004d44:	f2 08 00 08 	add	r8,r9,r8
80004d48:	6c 09       	ld.w	r9,r6[0x0]
80004d4a:	12 08       	add	r8,r9
80004d4c:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80004d4e:	04 9c       	mov	r12,r2
80004d50:	f0 1f 00 0c 	mcall	80004d80 <fat_update_fat2+0x6c>
80004d54:	c0 a0       	breq	80004d68 <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80004d56:	f0 1f 00 0c 	mcall	80004d84 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
80004d5a:	6c 08       	ld.w	r8,r6[0x0]
80004d5c:	2f f8       	sub	r8,-1
80004d5e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004d60:	68 09       	ld.w	r9,r4[0x0]
80004d62:	10 39       	cp.w	r9,r8
80004d64:	ce 72       	brcc	80004d32 <fat_update_fat2+0x1e>
80004d66:	c0 38       	rjmp	80004d6c <fat_update_fat2+0x58>
80004d68:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80004d6c:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80004d70:	00 00       	add	r0,r0
80004d72:	0c 00       	add	r0,r6
80004d74:	00 00       	add	r0,r0
80004d76:	09 c8       	ld.ub	r8,r4[0x4]
80004d78:	00 00       	add	r0,r0
80004d7a:	09 88       	ld.ub	r8,r4[0x0]
80004d7c:	00 00       	add	r0,r0
80004d7e:	0b cc       	ld.ub	r12,r5[0x4]
80004d80:	80 00       	ld.sh	r0,r0[0x0]
80004d82:	42 00       	lddsp	r0,sp[0x80]
80004d84:	80 00       	ld.sh	r0,r0[0x0]
80004d86:	3f d0       	mov	r0,-3

80004d88 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
80004d88:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
80004d8a:	f0 1f 00 21 	mcall	80004e0c <fat_initialize_dir+0x84>
80004d8e:	c3 e0       	breq	80004e0a <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
80004d90:	f0 1f 00 20 	mcall	80004e10 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80004d94:	4a 0b       	lddpc	r11,80004e14 <fat_initialize_dir+0x8c>
80004d96:	16 98       	mov	r8,r11
80004d98:	32 e9       	mov	r9,46
80004d9a:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004d9c:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80004da0:	32 09       	mov	r9,32
80004da2:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80004da4:	14 38       	cp.w	r8,r10
80004da6:	cf e1       	brne	80004da2 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
80004da8:	49 b8       	lddpc	r8,80004e14 <fat_initialize_dir+0x8c>
80004daa:	31 09       	mov	r9,16
80004dac:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80004db0:	49 a9       	lddpc	r9,80004e18 <fat_initialize_dir+0x90>
80004db2:	2f c9       	sub	r9,-4
80004db4:	13 ba       	ld.ub	r10,r9[0x3]
80004db6:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
80004dba:	13 aa       	ld.ub	r10,r9[0x2]
80004dbc:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80004dc0:	13 9a       	ld.ub	r10,r9[0x1]
80004dc2:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
80004dc6:	13 89       	ld.ub	r9,r9[0x0]
80004dc8:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004dcc:	32 e9       	mov	r9,46
80004dce:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004dd2:	f1 69 00 21 	st.b	r8[33],r9
80004dd6:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004dd8:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004ddc:	32 09       	mov	r9,32
80004dde:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004de0:	14 38       	cp.w	r8,r10
80004de2:	cf e1       	brne	80004dde <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80004de4:	48 c8       	lddpc	r8,80004e14 <fat_initialize_dir+0x8c>
80004de6:	31 09       	mov	r9,16
80004de8:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004dec:	48 c9       	lddpc	r9,80004e1c <fat_initialize_dir+0x94>
80004dee:	2e 09       	sub	r9,-32
80004df0:	13 ba       	ld.ub	r10,r9[0x3]
80004df2:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80004df6:	13 aa       	ld.ub	r10,r9[0x2]
80004df8:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
80004dfc:	13 9a       	ld.ub	r10,r9[0x1]
80004dfe:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80004e02:	13 89       	ld.ub	r9,r9[0x0]
80004e04:	f1 69 00 35 	st.b	r8[53],r9
80004e08:	30 1c       	mov	r12,1

   return true;
}
80004e0a:	d8 02       	popm	pc
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	4c a0       	lddpc	r0,80004f34 <fat_delete_file+0x44>
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	3f d0       	mov	r0,-3
80004e14:	00 00       	add	r0,r0
80004e16:	09 cc       	ld.ub	r12,r4[0x4]
80004e18:	00 00       	add	r0,r0
80004e1a:	09 8c       	ld.ub	r12,r4[0x0]
80004e1c:	00 00       	add	r0,r0
80004e1e:	0b cc       	ld.ub	r12,r5[0x4]

80004e20 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
80004e20:	d4 31       	pushm	r0-r7,lr
80004e22:	20 5d       	sub	sp,20
80004e24:	18 97       	mov	r7,r12
80004e26:	50 3b       	stdsp	sp[0xc],r11
80004e28:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
80004e2a:	f0 1f 00 30 	mcall	80004ee8 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
80004e2e:	f0 1f 00 30 	mcall	80004eec <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80004e32:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80004e34:	30 01       	mov	r1,0
80004e36:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80004e38:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80004e3a:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80004e3c:	30 c6       	mov	r6,12
80004e3e:	31 ab       	mov	r11,26
80004e40:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80004e42:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80004e44:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80004e46:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80004e48:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80004e4a:	f2 08 18 00 	cp.b	r8,r9
80004e4e:	c0 31       	brne	80004e54 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80004e50:	b8 83       	st.b	r12[0x0],r3
         continue;
80004e52:	c4 58       	rjmp	80004edc <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80004e54:	ec 08 18 00 	cp.b	r8,r6
80004e58:	5f 00       	sreq	r0
80004e5a:	f6 08 18 00 	cp.b	r8,r11
80004e5e:	5f 04       	sreq	r4
80004e60:	08 40       	or	r0,r4
80004e62:	00 94       	mov	r4,r0
80004e64:	f4 00 18 00 	cp.b	r0,r10
80004e68:	c3 21       	brne	80004ecc <fat_create_long_name_entry+0xac>
80004e6a:	ea 08 18 00 	cp.b	r8,r5
80004e6e:	c3 70       	breq	80004edc <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80004e70:	e4 08 18 00 	cp.b	r8,r2
80004e74:	c0 41       	brne	80004e7c <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
80004e76:	40 34       	lddsp	r4,sp[0xc]
80004e78:	b8 84       	st.b	r12[0x0],r4
         continue;
80004e7a:	c3 18       	rjmp	80004edc <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
80004e7c:	40 01       	lddsp	r1,sp[0x0]
80004e7e:	58 01       	cp.w	r1,0
80004e80:	c2 41       	brne	80004ec8 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80004e82:	0f 84       	ld.ub	r4,r7[0x0]
80004e84:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
80004e88:	35 c1       	mov	r1,92
80004e8a:	e2 04 19 00 	cp.h	r4,r1
80004e8e:	5f 00       	sreq	r0
80004e90:	50 20       	stdsp	sp[0x8],r0
80004e92:	32 f0       	mov	r0,47
80004e94:	e0 04 19 00 	cp.h	r4,r0
80004e98:	5f 01       	sreq	r1
80004e9a:	40 20       	lddsp	r0,sp[0x8]
80004e9c:	02 40       	or	r0,r1
80004e9e:	f4 00 18 00 	cp.b	r0,r10
80004ea2:	c0 50       	breq	80004eac <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80004ea4:	30 04       	mov	r4,0
80004ea6:	fb 54 00 12 	st.h	sp[18],r4
80004eaa:	c0 38       	rjmp	80004eb0 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80004eac:	58 04       	cp.w	r4,0
80004eae:	c0 31       	brne	80004eb4 <fat_create_long_name_entry+0x94>
80004eb0:	30 14       	mov	r4,1
80004eb2:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80004eb4:	fa c4 ff ee 	sub	r4,sp,-18
80004eb8:	09 90       	ld.ub	r0,r4[0x1]
80004eba:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80004ebc:	09 84       	ld.ub	r4,r4[0x0]
80004ebe:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
80004ec0:	2f f8       	sub	r8,-1
80004ec2:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80004ec4:	2f f7       	sub	r7,-1
80004ec6:	c0 38       	rjmp	80004ecc <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80004ec8:	3f f1       	mov	r1,-1
80004eca:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80004ecc:	2f f8       	sub	r8,-1
80004ece:	5c 58       	castu.b	r8
80004ed0:	fc 08 18 00 	cp.b	r8,lr
80004ed4:	e0 8b 00 08 	brhi	80004ee4 <fat_create_long_name_entry+0xc4>
80004ed8:	2f fc       	sub	r12,-1
80004eda:	cb 8b       	rjmp	80004e4a <fat_create_long_name_entry+0x2a>
80004edc:	2f f8       	sub	r8,-1
80004ede:	5c 58       	castu.b	r8
80004ee0:	2f fc       	sub	r12,-1
80004ee2:	cb 4b       	rjmp	80004e4a <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
80004ee4:	2f bd       	sub	sp,-20
80004ee6:	d8 32       	popm	r0-r7,pc
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	3f d0       	mov	r0,-3
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	3c 60       	mov	r0,-58

80004ef0 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
80004ef0:	d4 31       	pushm	r0-r7,lr
80004ef2:	18 90       	mov	r0,r12
80004ef4:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80004ef6:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80004ef8:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004efa:	49 56       	lddpc	r6,80004f4c <fat_delete_file+0x5c>
80004efc:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004efe:	f0 1f 00 15 	mcall	80004f50 <fat_delete_file+0x60>
80004f02:	c2 40       	breq	80004f4a <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80004f04:	f0 1f 00 14 	mcall	80004f54 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
80004f08:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80004f0a:	f8 c7 ff f5 	sub	r7,r12,-11
80004f0e:	0f 88       	ld.ub	r8,r7[0x0]
80004f10:	ea 08 18 00 	cp.b	r8,r5
80004f14:	c0 30       	breq	80004f1a <fat_delete_file+0x2a>
80004f16:	58 04       	cp.w	r4,0
80004f18:	c1 01       	brne	80004f38 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80004f1a:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
80004f1c:	f0 1f 00 0f 	mcall	80004f58 <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
80004f20:	0f 88       	ld.ub	r8,r7[0x0]
80004f22:	ea 08 18 00 	cp.b	r8,r5
80004f26:	c0 41       	brne	80004f2e <fat_delete_file+0x3e>
80004f28:	e2 12 00 40 	andl	r2,0x40,COH
80004f2c:	c0 61       	brne	80004f38 <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004f2e:	8c 18       	ld.sh	r8,r6[0x2]
80004f30:	20 18       	sub	r8,1
80004f32:	ac 18       	st.h	r6[0x2],r8
80004f34:	02 94       	mov	r4,r1
   }  // end of while(1)
80004f36:	ce 4b       	rjmp	80004efe <fat_delete_file+0xe>

   if( b_cluster_list )
80004f38:	58 00       	cp.w	r0,0
80004f3a:	c0 21       	brne	80004f3e <fat_delete_file+0x4e>
80004f3c:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80004f3e:	30 09       	mov	r9,0
80004f40:	48 78       	lddpc	r8,80004f5c <fat_delete_file+0x6c>
80004f42:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80004f44:	30 3c       	mov	r12,3
80004f46:	f0 1f 00 07 	mcall	80004f60 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
80004f4a:	d8 32       	popm	r0-r7,pc
80004f4c:	00 00       	add	r0,r0
80004f4e:	0c 18       	sub	r8,r6
80004f50:	80 00       	ld.sh	r0,r0[0x0]
80004f52:	48 30       	lddpc	r0,80004f5c <fat_delete_file+0x6c>
80004f54:	80 00       	ld.sh	r0,r0[0x0]
80004f56:	3c 60       	mov	r0,-58
80004f58:	80 00       	ld.sh	r0,r0[0x0]
80004f5a:	3f d0       	mov	r0,-3
80004f5c:	00 00       	add	r0,r0
80004f5e:	09 8c       	ld.ub	r12,r4[0x0]
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	48 b4       	lddpc	r4,80004f8c <fat_garbage_collector_entry+0x28>

80004f64 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80004f64:	eb cd 40 fc 	pushm	r2-r7,lr
80004f68:	20 8d       	sub	sp,32
80004f6a:	30 06       	mov	r6,0
80004f6c:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004f6e:	4a 95       	lddpc	r5,80005010 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004f70:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004f72:	1a 93       	mov	r3,sp
80004f74:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004f76:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004f78:	f0 1f 00 27 	mcall	80005014 <fat_garbage_collector_entry+0xb0>
80004f7c:	c0 81       	brne	80004f8c <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004f7e:	4a 78       	lddpc	r8,80005018 <fat_garbage_collector_entry+0xb4>
80004f80:	11 89       	ld.ub	r9,r8[0x0]
80004f82:	31 a8       	mov	r8,26
80004f84:	f0 09 18 00 	cp.b	r9,r8
80004f88:	c3 d1       	brne	80005002 <fat_garbage_collector_entry+0x9e>
80004f8a:	c0 68       	rjmp	80004f96 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80004f8c:	f0 1f 00 24 	mcall	8000501c <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
80004f90:	19 88       	ld.ub	r8,r12[0x0]
80004f92:	58 08       	cp.w	r8,0
80004f94:	c1 b1       	brne	80004fca <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80004f96:	49 f8       	lddpc	r8,80005010 <fat_garbage_collector_entry+0xac>
80004f98:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80004f9a:	ec 07 19 00 	cp.h	r7,r6
80004f9e:	c3 40       	breq	80005006 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004fa0:	32 05       	mov	r5,32
80004fa2:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80004fa4:	49 b6       	lddpc	r6,80005010 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80004fa6:	f0 1f 00 1c 	mcall	80005014 <fat_garbage_collector_entry+0xb0>
80004faa:	c2 c0       	breq	80005002 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004fac:	f0 1f 00 1c 	mcall	8000501c <fat_garbage_collector_entry+0xb8>
80004fb0:	0a 9a       	mov	r10,r5
80004fb2:	08 9b       	mov	r11,r4
80004fb4:	f0 1f 00 1b 	mcall	80005020 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
80004fb8:	f0 1f 00 1b 	mcall	80005024 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80004fbc:	8c 18       	ld.sh	r8,r6[0x2]
80004fbe:	2f f8       	sub	r8,-1
80004fc0:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80004fc2:	f0 07 19 00 	cp.h	r7,r8
80004fc6:	cf 01       	brne	80004fa6 <fat_garbage_collector_entry+0x42>
80004fc8:	c1 f8       	rjmp	80005006 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004fca:	e8 08 18 00 	cp.b	r8,r4
80004fce:	c1 70       	breq	80004ffc <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
80004fd0:	ec 07 19 00 	cp.h	r7,r6
80004fd4:	c1 20       	breq	80004ff8 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004fd6:	04 9a       	mov	r10,r2
80004fd8:	18 9b       	mov	r11,r12
80004fda:	1a 9c       	mov	r12,sp
80004fdc:	f0 1f 00 13 	mcall	80005028 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80004fe0:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80004fe2:	f0 1f 00 0d 	mcall	80005014 <fat_garbage_collector_entry+0xb0>
80004fe6:	c0 e0       	breq	80005002 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80004fe8:	f0 1f 00 0d 	mcall	8000501c <fat_garbage_collector_entry+0xb8>
80004fec:	04 9a       	mov	r10,r2
80004fee:	1a 9b       	mov	r11,sp
80004ff0:	f0 1f 00 0e 	mcall	80005028 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
80004ff4:	f0 1f 00 0c 	mcall	80005024 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
80004ff8:	2f f6       	sub	r6,-1
80004ffa:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
80004ffc:	2f f7       	sub	r7,-1
80004ffe:	5c 87       	casts.h	r7
   }  // end of while(1)
80005000:	cb bb       	rjmp	80004f76 <fat_garbage_collector_entry+0x12>
80005002:	30 0c       	mov	r12,0
80005004:	c0 28       	rjmp	80005008 <fat_garbage_collector_entry+0xa4>
80005006:	30 1c       	mov	r12,1
}
80005008:	2f 8d       	sub	sp,-32
8000500a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000500e:	00 00       	add	r0,r0
80005010:	00 00       	add	r0,r0
80005012:	0c 18       	sub	r8,r6
80005014:	80 00       	ld.sh	r0,r0[0x0]
80005016:	48 30       	lddpc	r0,80005020 <fat_garbage_collector_entry+0xbc>
80005018:	00 00       	add	r0,r0
8000501a:	0c 1c       	sub	r12,r6
8000501c:	80 00       	ld.sh	r0,r0[0x0]
8000501e:	3c 60       	mov	r0,-58
80005020:	80 00       	ld.sh	r0,r0[0x0]
80005022:	78 a6       	ld.w	r6,r12[0x28]
80005024:	80 00       	ld.sh	r0,r0[0x0]
80005026:	3f d0       	mov	r0,-3
80005028:	80 00       	ld.sh	r0,r0[0x0]
8000502a:	77 5e       	ld.w	lr,r11[0x54]

8000502c <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000502c:	eb cd 40 c0 	pushm	r6-r7,lr
80005030:	20 1d       	sub	sp,4
80005032:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005034:	49 c8       	lddpc	r8,800050a4 <fat_write_fat32_FSInfo+0x78>
80005036:	90 c9       	ld.uh	r9,r8[0x8]
80005038:	70 4a       	ld.w	r10,r8[0x10]
8000503a:	49 c8       	lddpc	r8,800050a8 <fat_write_fat32_FSInfo+0x7c>
8000503c:	12 1a       	sub	r10,r9
8000503e:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80005040:	30 0c       	mov	r12,0
80005042:	f0 1f 00 1b 	mcall	800050ac <fat_write_fat32_FSInfo+0x80>
80005046:	c2 c0       	breq	8000509e <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80005048:	f0 1f 00 1a 	mcall	800050b0 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
8000504c:	f0 1f 00 1a 	mcall	800050b4 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80005050:	49 a7       	lddpc	r7,800050b8 <fat_write_fat32_FSInfo+0x8c>
80005052:	30 46       	mov	r6,4
80005054:	0c 9a       	mov	r10,r6
80005056:	49 ab       	lddpc	r11,800050bc <fat_write_fat32_FSInfo+0x90>
80005058:	0e 9c       	mov	r12,r7
8000505a:	f0 1f 00 1a 	mcall	800050c0 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000505e:	0c 9a       	mov	r10,r6
80005060:	49 9b       	lddpc	r11,800050c4 <fat_write_fat32_FSInfo+0x98>
80005062:	ee cc fe 1c 	sub	r12,r7,-484
80005066:	f0 1f 00 17 	mcall	800050c0 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000506a:	1b b9       	ld.ub	r9,sp[0x3]
8000506c:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80005070:	1b a9       	ld.ub	r9,sp[0x2]
80005072:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80005076:	1b 99       	ld.ub	r9,sp[0x1]
80005078:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000507c:	1b 88       	ld.ub	r8,sp[0x0]
8000507e:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80005082:	0c 9a       	mov	r10,r6
80005084:	e0 6b 00 ff 	mov	r11,255
80005088:	ee cc fe 14 	sub	r12,r7,-492
8000508c:	f0 1f 00 0f 	mcall	800050c8 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80005090:	35 58       	mov	r8,85
80005092:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80005096:	3a a8       	mov	r8,-86
80005098:	ef 68 01 ff 	st.b	r7[511],r8
8000509c:	30 1c       	mov	r12,1
   return true;
}
8000509e:	2f fd       	sub	sp,-4
800050a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800050a4:	00 00       	add	r0,r0
800050a6:	0b cc       	ld.ub	r12,r5[0x4]
800050a8:	00 00       	add	r0,r0
800050aa:	09 88       	ld.ub	r8,r4[0x0]
800050ac:	80 00       	ld.sh	r0,r0[0x0]
800050ae:	42 00       	lddsp	r0,sp[0x80]
800050b0:	80 00       	ld.sh	r0,r0[0x0]
800050b2:	3f d0       	mov	r0,-3
800050b4:	80 00       	ld.sh	r0,r0[0x0]
800050b6:	41 e8       	lddsp	r8,sp[0x78]
800050b8:	00 00       	add	r0,r0
800050ba:	09 cc       	ld.ub	r12,r4[0x4]
800050bc:	80 00       	ld.sh	r0,r0[0x0]
800050be:	d5 98       	*unknown*
800050c0:	80 00       	ld.sh	r0,r0[0x0]
800050c2:	77 5e       	ld.w	lr,r11[0x54]
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	d5 ac       	*unknown*
800050c8:	80 00       	ld.sh	r0,r0[0x0]
800050ca:	78 a6       	ld.w	r6,r12[0x28]

800050cc <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800050cc:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800050ce:	4c 78       	lddpc	r8,800051e8 <fat_allocfreespace+0x11c>
800050d0:	11 89       	ld.ub	r9,r8[0x0]
800050d2:	30 38       	mov	r8,3
800050d4:	f0 09 18 00 	cp.b	r9,r8
800050d8:	c0 61       	brne	800050e4 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800050da:	3f fc       	mov	r12,-1
800050dc:	f0 1f 00 44 	mcall	800051ec <fat_allocfreespace+0x120>
800050e0:	e0 80 00 83 	breq	800051e6 <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800050e4:	4c 31       	lddpc	r1,800051f0 <fat_allocfreespace+0x124>
800050e6:	03 89       	ld.ub	r9,r1[0x0]
800050e8:	3f f8       	mov	r8,-1
800050ea:	f0 09 18 00 	cp.b	r9,r8
800050ee:	c0 61       	brne	800050fa <fat_allocfreespace+0x2e>
800050f0:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
800050f2:	30 29       	mov	r9,2
800050f4:	4c 08       	lddpc	r8,800051f4 <fat_allocfreespace+0x128>
800050f6:	91 09       	st.w	r8[0x0],r9
800050f8:	c0 78       	rjmp	80005106 <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
800050fa:	4b e8       	lddpc	r8,800051f0 <fat_allocfreespace+0x124>
800050fc:	70 09       	ld.w	r9,r8[0x0]
800050fe:	2f f9       	sub	r9,-1
80005100:	4b d8       	lddpc	r8,800051f4 <fat_allocfreespace+0x128>
80005102:	91 09       	st.w	r8[0x0],r9
80005104:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
80005106:	f0 1f 00 3d 	mcall	800051f8 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
8000510a:	4b b8       	lddpc	r8,800051f4 <fat_allocfreespace+0x128>
8000510c:	70 09       	ld.w	r9,r8[0x0]
8000510e:	4b c8       	lddpc	r8,800051fc <fat_allocfreespace+0x130>
80005110:	70 38       	ld.w	r8,r8[0xc]
80005112:	10 39       	cp.w	r9,r8
80005114:	c5 e2       	brcc	800051d0 <fat_allocfreespace+0x104>
80005116:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005118:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000511a:	4b 77       	lddpc	r7,800051f4 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000511c:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000511e:	4b 55       	lddpc	r5,800051f0 <fat_allocfreespace+0x124>
80005120:	4b 76       	lddpc	r6,800051fc <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005122:	04 9c       	mov	r12,r2
80005124:	f0 1f 00 37 	mcall	80005200 <fat_allocfreespace+0x134>
80005128:	c5 f0       	breq	800051e6 <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000512a:	6e 18       	ld.w	r8,r7[0x4]
8000512c:	58 08       	cp.w	r8,0
8000512e:	c4 01       	brne	800051ae <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005130:	6e 08       	ld.w	r8,r7[0x0]
80005132:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005134:	58 04       	cp.w	r4,0
80005136:	c0 80       	breq	80005146 <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80005138:	20 18       	sub	r8,1
8000513a:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000513c:	06 9c       	mov	r12,r3
8000513e:	f0 1f 00 31 	mcall	80005200 <fat_allocfreespace+0x134>
80005142:	c1 e1       	brne	8000517e <fat_allocfreespace+0xb2>
80005144:	c5 18       	rjmp	800051e6 <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80005146:	03 88       	ld.ub	r8,r1[0x0]
80005148:	3f f9       	mov	r9,-1
8000514a:	f2 08 18 00 	cp.b	r8,r9
8000514e:	c1 60       	breq	8000517a <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005150:	6a 08       	ld.w	r8,r5[0x0]
80005152:	58 08       	cp.w	r8,0
80005154:	c0 e1       	brne	80005170 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80005156:	4a 59       	lddpc	r9,800051e8 <fat_allocfreespace+0x11c>
80005158:	13 88       	ld.ub	r8,r9[0x0]
8000515a:	30 39       	mov	r9,3
8000515c:	f2 08 18 00 	cp.b	r8,r9
80005160:	c0 50       	breq	8000516a <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005162:	31 b9       	mov	r9,27
80005164:	4a 88       	lddpc	r8,80005204 <fat_allocfreespace+0x138>
80005166:	b0 89       	st.b	r8[0x0],r9
80005168:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000516a:	6c 68       	ld.w	r8,r6[0x18]
8000516c:	8f 08       	st.w	r7[0x0],r8
8000516e:	c0 28       	rjmp	80005172 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005170:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005172:	06 9c       	mov	r12,r3
80005174:	f0 1f 00 23 	mcall	80005200 <fat_allocfreespace+0x134>
80005178:	c3 70       	breq	800051e6 <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000517a:	6e 18       	ld.w	r8,r7[0x4]
8000517c:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000517e:	6e 18       	ld.w	r8,r7[0x4]
80005180:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80005182:	e0 68 ff ff 	mov	r8,65535
80005186:	ea 18 0f ff 	orh	r8,0xfff
8000518a:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000518c:	06 9c       	mov	r12,r3
8000518e:	f0 1f 00 1d 	mcall	80005200 <fat_allocfreespace+0x134>
80005192:	c2 a0       	breq	800051e6 <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80005194:	6a 19       	ld.w	r9,r5[0x4]
80005196:	0d 98       	ld.ub	r8,r6[0x1]
80005198:	10 39       	cp.w	r9,r8
8000519a:	e0 8b 00 06 	brhi	800051a6 <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
8000519e:	30 09       	mov	r9,0
800051a0:	49 48       	lddpc	r8,800051f0 <fat_allocfreespace+0x124>
800051a2:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
800051a4:	c1 e8       	rjmp	800051e0 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800051a6:	10 19       	sub	r9,r8
800051a8:	8b 19       	st.w	r5[0x4],r9
800051aa:	06 94       	mov	r4,r3
800051ac:	c0 98       	rjmp	800051be <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
800051ae:	58 04       	cp.w	r4,0
800051b0:	c1 81       	brne	800051e0 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
800051b2:	58 00       	cp.w	r0,0
800051b4:	c0 50       	breq	800051be <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
800051b6:	6e 08       	ld.w	r8,r7[0x0]
800051b8:	f0 c8 fe 0c 	sub	r8,r8,-500
800051bc:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800051be:	6e 08       	ld.w	r8,r7[0x0]
800051c0:	2f f8       	sub	r8,-1
800051c2:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800051c4:	6c 39       	ld.w	r9,r6[0xc]
800051c6:	10 39       	cp.w	r9,r8
800051c8:	fe 9b ff ad 	brhi	80005122 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800051cc:	58 04       	cp.w	r4,0
800051ce:	c0 91       	brne	800051e0 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800051d0:	58 00       	cp.w	r0,0
800051d2:	c0 30       	breq	800051d8 <fat_allocfreespace+0x10c>
800051d4:	30 00       	mov	r0,0
800051d6:	c8 eb       	rjmp	800050f2 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800051d8:	31 b9       	mov	r9,27
800051da:	48 b8       	lddpc	r8,80005204 <fat_allocfreespace+0x138>
800051dc:	b0 89       	st.b	r8[0x0],r9
800051de:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
800051e0:	f0 1f 00 0a 	mcall	80005208 <fat_allocfreespace+0x13c>
800051e4:	d8 32       	popm	r0-r7,pc
800051e6:	d8 3a       	popm	r0-r7,pc,r12=0
800051e8:	00 00       	add	r0,r0
800051ea:	0c 18       	sub	r8,r6
800051ec:	80 00       	ld.sh	r0,r0[0x0]
800051ee:	50 2c       	stdsp	sp[0x8],r12
800051f0:	00 00       	add	r0,r0
800051f2:	0c 74       	tst	r4,r6
800051f4:	00 00       	add	r0,r0
800051f6:	0c 6c       	and	r12,r6
800051f8:	80 00       	ld.sh	r0,r0[0x0]
800051fa:	4c 88       	lddpc	r8,80005318 <fat_check_name+0x5c>
800051fc:	00 00       	add	r0,r0
800051fe:	0b cc       	ld.ub	r12,r5[0x4]
80005200:	80 00       	ld.sh	r0,r0[0x0]
80005202:	43 14       	lddsp	r4,sp[0xc4]
80005204:	00 00       	add	r0,r0
80005206:	0c 1c       	sub	r12,r6
80005208:	80 00       	ld.sh	r0,r0[0x0]
8000520a:	4d 14       	lddpc	r4,8000534c <fat_create_short_entry_name+0x1c>

8000520c <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000520c:	d4 31       	pushm	r0-r7,lr
8000520e:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005210:	30 09       	mov	r9,0
80005212:	4a 38       	lddpc	r8,8000529c <fat_alloc_entry_free+0x90>
80005214:	b0 19       	st.h	r8[0x2],r9
80005216:	18 92       	mov	r2,r12
80005218:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000521a:	4a 26       	lddpc	r6,800052a0 <fat_alloc_entry_free+0x94>
8000521c:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000521e:	4a 21       	lddpc	r1,800052a4 <fat_alloc_entry_free+0x98>
80005220:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005222:	10 97       	mov	r7,r8
80005224:	12 90       	mov	r0,r9
80005226:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005228:	f0 1f 00 20 	mcall	800052a8 <fat_alloc_entry_free+0x9c>
8000522c:	c1 61       	brne	80005258 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000522e:	0d 88       	ld.ub	r8,r6[0x0]
80005230:	e6 08 18 00 	cp.b	r8,r3
80005234:	c3 11       	brne	80005296 <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80005236:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80005238:	f0 1f 00 1d 	mcall	800052ac <fat_alloc_entry_free+0xa0>
8000523c:	c0 a1       	brne	80005250 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000523e:	58 04       	cp.w	r4,0
80005240:	c2 b1       	brne	80005296 <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80005242:	f0 1f 00 1c 	mcall	800052b0 <fat_alloc_entry_free+0xa4>
80005246:	c2 80       	breq	80005296 <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005248:	ae 10       	st.h	r7[0x2],r0
8000524a:	40 02       	lddsp	r2,sp[0x0]
8000524c:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
8000524e:	ce db       	rjmp	80005228 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005250:	f0 1f 00 19 	mcall	800052b4 <fat_alloc_entry_free+0xa8>
80005254:	ce a1       	brne	80005228 <fat_alloc_entry_free+0x1c>
80005256:	c2 08       	rjmp	80005296 <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005258:	f0 1f 00 18 	mcall	800052b8 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
8000525c:	19 88       	ld.ub	r8,r12[0x0]
8000525e:	30 09       	mov	r9,0
80005260:	f2 08 18 00 	cp.b	r8,r9
80005264:	c0 61       	brne	80005270 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
80005266:	20 12       	sub	r2,1
80005268:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000526a:	c0 31       	brne	80005270 <fat_alloc_entry_free+0x64>
8000526c:	30 1c       	mov	r12,1
8000526e:	c1 58       	rjmp	80005298 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005270:	8e 18       	ld.sh	r8,r7[0x2]
80005272:	2f f8       	sub	r8,-1
80005274:	5c 88       	casts.h	r8
80005276:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005278:	cd 81       	brne	80005228 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000527a:	58 04       	cp.w	r4,0
8000527c:	c0 60       	breq	80005288 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000527e:	31 b9       	mov	r9,27
80005280:	48 88       	lddpc	r8,800052a0 <fat_alloc_entry_free+0x94>
80005282:	b0 89       	st.b	r8[0x0],r9
80005284:	30 0c       	mov	r12,0
            return false;
80005286:	c0 98       	rjmp	80005298 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
80005288:	f0 1f 00 0a 	mcall	800052b0 <fat_alloc_entry_free+0xa4>
8000528c:	c0 50       	breq	80005296 <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000528e:	ae 10       	st.h	r7[0x2],r0
80005290:	40 02       	lddsp	r2,sp[0x0]
80005292:	0a 94       	mov	r4,r5
80005294:	cc ab       	rjmp	80005228 <fat_alloc_entry_free+0x1c>
80005296:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
80005298:	2f fd       	sub	sp,-4
8000529a:	d8 32       	popm	r0-r7,pc
8000529c:	00 00       	add	r0,r0
8000529e:	0c 18       	sub	r8,r6
800052a0:	00 00       	add	r0,r0
800052a2:	0c 1c       	sub	r12,r6
800052a4:	00 00       	add	r0,r0
800052a6:	0c 74       	tst	r4,r6
800052a8:	80 00       	ld.sh	r0,r0[0x0]
800052aa:	48 30       	lddpc	r0,800052b4 <fat_alloc_entry_free+0xa8>
800052ac:	80 00       	ld.sh	r0,r0[0x0]
800052ae:	50 cc       	stdsp	sp[0x30],r12
800052b0:	80 00       	ld.sh	r0,r0[0x0]
800052b2:	4f 64       	lddpc	r4,80005488 <fat_create_short_entry_name+0x158>
800052b4:	80 00       	ld.sh	r0,r0[0x0]
800052b6:	4c a0       	lddpc	r0,800053dc <fat_create_short_entry_name+0xac>
800052b8:	80 00       	ld.sh	r0,r0[0x0]
800052ba:	3c 60       	mov	r0,-58

800052bc <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800052bc:	d4 31       	pushm	r0-r7,lr
800052be:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800052c0:	33 a2       	mov	r2,58
800052c2:	30 d5       	mov	r5,13
800052c4:	30 23       	mov	r3,2
800052c6:	49 86       	lddpc	r6,80005324 <fat_check_name+0x68>
800052c8:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800052cc:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800052ce:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800052d0:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800052d2:	0e 9c       	mov	r12,r7
800052d4:	f0 1f 00 15 	mcall	80005328 <fat_check_name+0x6c>
800052d8:	c1 a1       	brne	8000530c <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800052da:	ee 02 19 00 	cp.h	r2,r7
800052de:	c0 60       	breq	800052ea <fat_check_name+0x2e>
800052e0:	02 98       	mov	r8,r1
800052e2:	11 89       	ld.ub	r9,r8[0x0]
800052e4:	ee 09 19 00 	cp.h	r9,r7
800052e8:	c0 61       	brne	800052f4 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800052ea:	31 c9       	mov	r9,28
800052ec:	49 08       	lddpc	r8,8000532c <fat_check_name+0x70>
800052ee:	b0 89       	st.b	r8[0x0],r9
800052f0:	30 03       	mov	r3,0
            return 0;      // incorrect character
800052f2:	c1 68       	rjmp	8000531e <fat_check_name+0x62>
800052f4:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
800052f6:	0c 38       	cp.w	r8,r6
800052f8:	cf 51       	brne	800052e2 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800052fa:	58 05       	cp.w	r5,0
800052fc:	c0 41       	brne	80005304 <fat_check_name+0x48>
      {
         u8_nb_entry++;
800052fe:	2f f3       	sub	r3,-1
80005300:	5c 53       	castu.b	r3
80005302:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
80005304:	20 15       	sub	r5,1
80005306:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80005308:	2f f4       	sub	r4,-1
   }
8000530a:	ce 3b       	rjmp	800052d0 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
8000530c:	31 48       	mov	r8,20
8000530e:	f0 03 18 00 	cp.b	r3,r8
80005312:	e0 88 00 06 	brls	8000531e <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80005316:	32 b9       	mov	r9,43
80005318:	48 58       	lddpc	r8,8000532c <fat_check_name+0x70>
8000531a:	b0 89       	st.b	r8[0x0],r9
8000531c:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
8000531e:	06 9c       	mov	r12,r3
80005320:	d8 32       	popm	r0-r7,pc
80005322:	00 00       	add	r0,r0
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	d5 9c       	*unknown*
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	3c 38       	mov	r8,-61
8000532c:	00 00       	add	r0,r0
8000532e:	0c 1c       	sub	r12,r6

80005330 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005330:	d4 31       	pushm	r0-r7,lr
80005332:	20 8d       	sub	sp,32
80005334:	18 94       	mov	r4,r12
80005336:	50 2b       	stdsp	sp[0x8],r11
80005338:	14 97       	mov	r7,r10
8000533a:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000533c:	58 09       	cp.w	r9,0
8000533e:	c0 40       	breq	80005346 <fat_create_short_entry_name+0x16>
80005340:	30 09       	mov	r9,0
80005342:	50 19       	stdsp	sp[0x4],r9
80005344:	c0 68       	rjmp	80005350 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005346:	f0 1f 00 66 	mcall	800054dc <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000534a:	f0 1f 00 66 	mcall	800054e0 <fat_create_short_entry_name+0x1b0>
8000534e:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005350:	30 98       	mov	r8,9
80005352:	f0 07 18 00 	cp.b	r7,r8
80005356:	e0 8b 00 04 	brhi	8000535e <fat_create_short_entry_name+0x2e>
8000535a:	30 18       	mov	r8,1
8000535c:	c0 88       	rjmp	8000536c <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
8000535e:	36 38       	mov	r8,99
80005360:	ee 08 18 00 	cp.b	r8,r7
80005364:	f9 b8 02 02 	movhs	r8,2
80005368:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000536c:	e0 6a cc cd 	mov	r10,52429
80005370:	ea 1a cc cc 	orh	r10,0xcccc
80005374:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005378:	e6 09 16 03 	lsr	r9,r3,0x3
8000537c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005380:	ee 09 01 19 	sub	r9,r7,r9<<0x1
80005384:	2d 09       	sub	r9,-48
80005386:	5c 59       	castu.b	r9
80005388:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000538a:	e0 63 85 1f 	mov	r3,34079
8000538e:	ea 13 51 eb 	orh	r3,0x51eb
80005392:	ee 03 06 42 	mulu.d	r2,r7,r3
80005396:	e6 09 16 05 	lsr	r9,r3,0x5
8000539a:	f2 0b 10 64 	mul	r11,r9,100
8000539e:	ee 0b 01 0b 	sub	r11,r7,r11
800053a2:	5c 5b       	castu.b	r11
800053a4:	f6 0a 06 4a 	mulu.d	r10,r11,r10
800053a8:	f6 0a 16 03 	lsr	r10,r11,0x3
800053ac:	2d 0a       	sub	r10,-48
800053ae:	5c 5a       	castu.b	r10
800053b0:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800053b2:	2d 09       	sub	r9,-48
800053b4:	5c 59       	castu.b	r9
800053b6:	50 49       	stdsp	sp[0x10],r9
800053b8:	30 01       	mov	r1,0
800053ba:	30 17       	mov	r7,1
800053bc:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800053be:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800053c0:	f0 09 11 ff 	rsub	r9,r8,-1
800053c4:	2f 89       	sub	r9,-8
800053c6:	50 39       	stdsp	sp[0xc],r9
800053c8:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800053ca:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800053cc:	f0 08 11 06 	rsub	r8,r8,6
800053d0:	5c 58       	castu.b	r8
800053d2:	50 78       	stdsp	sp[0x1c],r8
800053d4:	c0 28       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800053d6:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
800053d8:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
800053da:	e6 07 18 00 	cp.b	r7,r3
800053de:	c1 41       	brne	80005406 <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800053e0:	40 39       	lddsp	r9,sp[0xc]
800053e2:	0a 39       	cp.w	r9,r5
800053e4:	5f 09       	sreq	r9
800053e6:	e0 06 18 00 	cp.b	r6,r0
800053ea:	5f 08       	sreq	r8
800053ec:	f3 e8 10 08 	or	r8,r9,r8
800053f0:	30 09       	mov	r9,0
800053f2:	f2 08 18 00 	cp.b	r8,r9
800053f6:	c0 51       	brne	80005400 <fat_create_short_entry_name+0xd0>
800053f8:	0c 9c       	mov	r12,r6
800053fa:	f0 1f 00 3b 	mcall	800054e4 <fat_create_short_entry_name+0x1b4>
800053fe:	c1 10       	breq	80005420 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005400:	2f f7       	sub	r7,-1
80005402:	5c 57       	castu.b	r7
            continue;
80005404:	ce ab       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005406:	e4 07 18 00 	cp.b	r7,r2
8000540a:	c1 21       	brne	8000542e <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000540c:	30 b9       	mov	r9,11
8000540e:	f2 05 18 00 	cp.b	r5,r9
80005412:	c0 50       	breq	8000541c <fat_create_short_entry_name+0xec>
80005414:	0c 9c       	mov	r12,r6
80005416:	f0 1f 00 34 	mcall	800054e4 <fat_create_short_entry_name+0x1b4>
8000541a:	c0 30       	breq	80005420 <fat_create_short_entry_name+0xf0>
8000541c:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
8000541e:	cd db       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005420:	0c 9c       	mov	r12,r6
80005422:	f0 1f 00 32 	mcall	800054e8 <fat_create_short_entry_name+0x1b8>
80005426:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005428:	2f f4       	sub	r4,-1
         if( 0 == character )
8000542a:	58 0c       	cp.w	r12,0
8000542c:	cd 60       	breq	800053d8 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
8000542e:	30 78       	mov	r8,7
80005430:	f0 07 18 00 	cp.b	r7,r8
80005434:	c0 c1       	brne	8000544c <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005436:	e0 06 18 00 	cp.b	r6,r0
8000543a:	c0 50       	breq	80005444 <fat_create_short_entry_name+0x114>
8000543c:	0c 9c       	mov	r12,r6
8000543e:	f0 1f 00 2a 	mcall	800054e4 <fat_create_short_entry_name+0x1b4>
80005442:	c0 30       	breq	80005448 <fat_create_short_entry_name+0x118>
80005444:	30 87       	mov	r7,8
80005446:	cc 9b       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005448:	2f f4       	sub	r4,-1
8000544a:	cc 7b       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
8000544c:	30 68       	mov	r8,6
8000544e:	f0 07 18 00 	cp.b	r7,r8
80005452:	c0 61       	brne	8000545e <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005454:	e4 05 18 00 	cp.b	r5,r2
80005458:	cb f0       	breq	800053d6 <fat_create_short_entry_name+0xa6>
8000545a:	32 06       	mov	r6,32
8000545c:	c1 28       	rjmp	80005480 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
8000545e:	30 98       	mov	r8,9
80005460:	f0 07 18 00 	cp.b	r7,r8
80005464:	c0 71       	brne	80005472 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005466:	30 b8       	mov	r8,11
80005468:	f0 05 18 00 	cp.b	r5,r8
8000546c:	c3 50       	breq	800054d6 <fat_create_short_entry_name+0x1a6>
8000546e:	32 06       	mov	r6,32
80005470:	c0 f8       	rjmp	8000548e <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005472:	30 58       	mov	r8,5
80005474:	f0 07 18 00 	cp.b	r7,r8
80005478:	c0 41       	brne	80005480 <fat_create_short_entry_name+0x150>
8000547a:	40 66       	lddsp	r6,sp[0x18]
8000547c:	30 67       	mov	r7,6
8000547e:	c0 f8       	rjmp	8000549c <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005480:	30 48       	mov	r8,4
80005482:	f0 07 18 00 	cp.b	r7,r8
80005486:	c0 41       	brne	8000548e <fat_create_short_entry_name+0x15e>
80005488:	40 56       	lddsp	r6,sp[0x14]
8000548a:	30 57       	mov	r7,5
8000548c:	c1 28       	rjmp	800054b0 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
8000548e:	30 38       	mov	r8,3
80005490:	f0 07 18 00 	cp.b	r7,r8
80005494:	c0 41       	brne	8000549c <fat_create_short_entry_name+0x16c>
80005496:	40 46       	lddsp	r6,sp[0x10]
80005498:	30 47       	mov	r7,4
8000549a:	c0 b8       	rjmp	800054b0 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
8000549c:	30 28       	mov	r8,2
8000549e:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800054a0:	f0 07 18 00 	cp.b	r7,r8
800054a4:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
800054a8:	f0 09 18 00 	cp.b	r9,r8
800054ac:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
800054b0:	40 08       	lddsp	r8,sp[0x0]
800054b2:	58 08       	cp.w	r8,0
800054b4:	c0 50       	breq	800054be <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
800054b6:	40 29       	lddsp	r9,sp[0x8]
800054b8:	12 c6       	st.b	r9++,r6
800054ba:	50 29       	stdsp	sp[0x8],r9
800054bc:	c0 48       	rjmp	800054c4 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800054be:	40 18       	lddsp	r8,sp[0x4]
800054c0:	10 c6       	st.b	r8++,r6
800054c2:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
800054c4:	2f f5       	sub	r5,-1
800054c6:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
800054c8:	e2 08 16 01 	lsr	r8,r1,0x1
800054cc:	a7 71       	lsl	r1,0x7
800054ce:	10 01       	add	r1,r8
      crc += character;                                  // add next char
800054d0:	0c 01       	add	r1,r6
800054d2:	5c 51       	castu.b	r1
800054d4:	c8 2b       	rjmp	800053d8 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
800054d6:	02 9c       	mov	r12,r1
800054d8:	2f 8d       	sub	sp,-32
800054da:	d8 32       	popm	r0-r7,pc
800054dc:	80 00       	ld.sh	r0,r0[0x0]
800054de:	3f d0       	mov	r0,-3
800054e0:	80 00       	ld.sh	r0,r0[0x0]
800054e2:	3c 60       	mov	r0,-58
800054e4:	80 00       	ld.sh	r0,r0[0x0]
800054e6:	3c 38       	mov	r8,-61
800054e8:	80 00       	ld.sh	r0,r0[0x0]
800054ea:	4c 3c       	lddpc	r12,800055f4 <fat_create_entry_file_name+0x38>

800054ec <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
800054ec:	eb cd 40 80 	pushm	r7,lr
800054f0:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800054f2:	f0 1f 00 12 	mcall	80005538 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
800054f6:	19 88       	ld.ub	r8,r12[0x0]
800054f8:	58 08       	cp.w	r8,0
800054fa:	c0 61       	brne	80005506 <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
800054fc:	30 a9       	mov	r9,10
800054fe:	49 08       	lddpc	r8,8000553c <fat_entry_shortname_compare+0x50>
80005500:	b0 89       	st.b	r8[0x0],r9
80005502:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005506:	3e 59       	mov	r9,-27
80005508:	f2 08 18 00 	cp.b	r8,r9
8000550c:	c0 70       	breq	8000551a <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
8000550e:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005512:	30 f8       	mov	r8,15
80005514:	f0 09 18 00 	cp.b	r9,r8
80005518:	c0 61       	brne	80005524 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000551a:	30 b9       	mov	r9,11
8000551c:	48 88       	lddpc	r8,8000553c <fat_entry_shortname_compare+0x50>
8000551e:	b0 89       	st.b	r8[0x0],r9
80005520:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005524:	30 b9       	mov	r9,11
80005526:	48 68       	lddpc	r8,8000553c <fat_entry_shortname_compare+0x50>
80005528:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000552a:	30 ba       	mov	r10,11
8000552c:	0e 9b       	mov	r11,r7
8000552e:	f0 1f 00 05 	mcall	80005540 <fat_entry_shortname_compare+0x54>
80005532:	5f 0c       	sreq	r12
}
80005534:	e3 cd 80 80 	ldm	sp++,r7,pc
80005538:	80 00       	ld.sh	r0,r0[0x0]
8000553a:	3c 60       	mov	r0,-58
8000553c:	00 00       	add	r0,r0
8000553e:	0c 1c       	sub	r12,r6
80005540:	80 00       	ld.sh	r0,r0[0x0]
80005542:	77 38       	ld.w	r8,r11[0x4c]

80005544 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005544:	d4 31       	pushm	r0-r7,lr
80005546:	20 3d       	sub	sp,12
80005548:	18 93       	mov	r3,r12
8000554a:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
8000554c:	1a 96       	mov	r6,sp
8000554e:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005550:	49 65       	lddpc	r5,800055a8 <fat_find_short_entry_name+0x64>
80005552:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005554:	49 61       	lddpc	r1,800055ac <fat_find_short_entry_name+0x68>
80005556:	30 a0       	mov	r0,10
80005558:	c0 58       	rjmp	80005562 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000555a:	3f f8       	mov	r8,-1
8000555c:	f0 07 18 00 	cp.b	r7,r8
80005560:	c2 00       	breq	800055a0 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80005562:	2f f7       	sub	r7,-1
80005564:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005566:	04 99       	mov	r9,r2
80005568:	0e 9a       	mov	r10,r7
8000556a:	1a 9b       	mov	r11,sp
8000556c:	06 9c       	mov	r12,r3
8000556e:	f0 1f 00 11 	mcall	800055b0 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005572:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005574:	f0 1f 00 10 	mcall	800055b4 <fat_find_short_entry_name+0x70>
80005578:	c0 81       	brne	80005588 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000557a:	48 d8       	lddpc	r8,800055ac <fat_find_short_entry_name+0x68>
8000557c:	11 89       	ld.ub	r9,r8[0x0]
8000557e:	31 a8       	mov	r8,26
80005580:	f0 09 18 00 	cp.b	r9,r8
80005584:	c0 e1       	brne	800055a0 <fat_find_short_entry_name+0x5c>
80005586:	c0 e8       	rjmp	800055a2 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005588:	1a 9c       	mov	r12,sp
8000558a:	f0 1f 00 0c 	mcall	800055b8 <fat_find_short_entry_name+0x74>
8000558e:	ce 61       	brne	8000555a <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005590:	03 88       	ld.ub	r8,r1[0x0]
80005592:	e0 08 18 00 	cp.b	r8,r0
80005596:	c0 60       	breq	800055a2 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005598:	8a 18       	ld.sh	r8,r5[0x2]
8000559a:	2f f8       	sub	r8,-1
8000559c:	aa 18       	st.h	r5[0x2],r8
      }
8000559e:	ce bb       	rjmp	80005574 <fat_find_short_entry_name+0x30>
800055a0:	30 07       	mov	r7,0
   }
}
800055a2:	0e 9c       	mov	r12,r7
800055a4:	2f dd       	sub	sp,-12
800055a6:	d8 32       	popm	r0-r7,pc
800055a8:	00 00       	add	r0,r0
800055aa:	0c 18       	sub	r8,r6
800055ac:	00 00       	add	r0,r0
800055ae:	0c 1c       	sub	r12,r6
800055b0:	80 00       	ld.sh	r0,r0[0x0]
800055b2:	53 30       	stdsp	sp[0xcc],r0
800055b4:	80 00       	ld.sh	r0,r0[0x0]
800055b6:	48 30       	lddpc	r0,800055c0 <fat_create_entry_file_name+0x4>
800055b8:	80 00       	ld.sh	r0,r0[0x0]
800055ba:	54 ec       	stdsp	sp[0x138],r12

800055bc <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
800055bc:	eb cd 40 fc 	pushm	r2-r7,lr
800055c0:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
800055c2:	f0 1f 00 21 	mcall	80005644 <fat_create_entry_file_name+0x88>
800055c6:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
800055c8:	c3 b0       	breq	8000563e <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
800055ca:	0c 9c       	mov	r12,r6
800055cc:	f0 1f 00 1f 	mcall	80005648 <fat_create_entry_file_name+0x8c>
800055d0:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
800055d2:	c0 61       	brne	800055de <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800055d4:	32 a9       	mov	r9,42
800055d6:	49 e8       	lddpc	r8,8000564c <fat_create_entry_file_name+0x90>
800055d8:	b0 89       	st.b	r8[0x0],r9
800055da:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
800055de:	0a 9c       	mov	r12,r5
800055e0:	f0 1f 00 1c 	mcall	80005650 <fat_create_entry_file_name+0x94>
800055e4:	c2 d0       	breq	8000563e <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
800055e6:	30 09       	mov	r9,0
800055e8:	0e 9a       	mov	r10,r7
800055ea:	12 9b       	mov	r11,r9
800055ec:	0c 9c       	mov	r12,r6
800055ee:	f0 1f 00 1a 	mcall	80005654 <fat_create_entry_file_name+0x98>
800055f2:	18 92       	mov	r2,r12
   u8_nb_entry--;
800055f4:	20 15       	sub	r5,1
800055f6:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
800055f8:	c1 c0       	breq	80005630 <fat_create_entry_file_name+0x74>
800055fa:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800055fc:	49 74       	lddpc	r4,80005658 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
800055fe:	ea c3 ff c0 	sub	r3,r5,-64
80005602:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005604:	88 18       	ld.sh	r8,r4[0x2]
80005606:	20 18       	sub	r8,1
80005608:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
8000560a:	f0 1f 00 15 	mcall	8000565c <fat_create_entry_file_name+0xa0>
8000560e:	c1 80       	breq	8000563e <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005610:	ea 07 18 00 	cp.b	r7,r5
80005614:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005618:	0e 9a       	mov	r10,r7
8000561a:	04 9b       	mov	r11,r2
8000561c:	0c 9c       	mov	r12,r6
8000561e:	f0 1f 00 11 	mcall	80005660 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005622:	2f f7       	sub	r7,-1
80005624:	5c 57       	castu.b	r7
80005626:	ee 05 18 00 	cp.b	r5,r7
8000562a:	c0 33       	brcs	80005630 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000562c:	2f 36       	sub	r6,-13
8000562e:	ce bb       	rjmp	80005604 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005630:	48 a8       	lddpc	r8,80005658 <fat_create_entry_file_name+0x9c>
80005632:	90 19       	ld.sh	r9,r8[0x2]
80005634:	f2 05 00 05 	add	r5,r9,r5
80005638:	b0 15       	st.h	r8[0x2],r5
8000563a:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
8000563e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005642:	00 00       	add	r0,r0
80005644:	80 00       	ld.sh	r0,r0[0x0]
80005646:	52 bc       	stdsp	sp[0xac],r12
80005648:	80 00       	ld.sh	r0,r0[0x0]
8000564a:	55 44       	stdsp	sp[0x150],r4
8000564c:	00 00       	add	r0,r0
8000564e:	0c 1c       	sub	r12,r6
80005650:	80 00       	ld.sh	r0,r0[0x0]
80005652:	52 0c       	stdsp	sp[0x80],r12
80005654:	80 00       	ld.sh	r0,r0[0x0]
80005656:	53 30       	stdsp	sp[0xcc],r0
80005658:	00 00       	add	r0,r0
8000565a:	0c 18       	sub	r8,r6
8000565c:	80 00       	ld.sh	r0,r0[0x0]
8000565e:	48 30       	lddpc	r0,80005668 <fat_mount+0x4>
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	4e 20       	lddpc	r0,800057e8 <fat_mount+0x184>

80005664 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005664:	d4 31       	pushm	r0-r7,lr
80005666:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005668:	30 07       	mov	r7,0
8000566a:	fe f8 02 d2 	ld.w	r8,pc[722]
8000566e:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005670:	f0 1f 00 b4 	mcall	80005940 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005674:	fe f8 02 d0 	ld.w	r8,pc[720]
80005678:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
8000567a:	fe f8 02 ce 	ld.w	r8,pc[718]
8000567e:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80005680:	f0 1f 00 b3 	mcall	8000594c <fat_mount+0x2e8>
80005684:	e0 80 01 58 	breq	80005934 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005688:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
8000568c:	ea c8 fe 42 	sub	r8,r5,-446
80005690:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005692:	38 04       	mov	r4,-128
80005694:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005696:	30 1c       	mov	r12,1
80005698:	f0 1f 00 af 	mcall	80005954 <fat_mount+0x2f0>
8000569c:	e0 80 01 4c 	breq	80005934 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
800056a0:	eb 39 01 fe 	ld.ub	r9,r5[510]
800056a4:	35 58       	mov	r8,85
800056a6:	f0 09 18 00 	cp.b	r9,r8
800056aa:	c0 d0       	breq	800056c4 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
800056ac:	eb 39 01 ff 	ld.ub	r9,r5[511]
800056b0:	3a a8       	mov	r8,-86
800056b2:	f0 09 18 00 	cp.b	r9,r8
800056b6:	c0 70       	breq	800056c4 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
800056b8:	30 29       	mov	r9,2
800056ba:	fe f8 02 9e 	ld.w	r8,pc[670]
800056be:	b0 89       	st.b	r8[0x0],r9
800056c0:	30 0c       	mov	r12,0
         return false;
800056c2:	c3 a9       	rjmp	80005936 <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
800056c4:	fe f8 02 84 	ld.w	r8,pc[644]
800056c8:	70 08       	ld.w	r8,r8[0x0]
800056ca:	58 08       	cp.w	r8,0
800056cc:	c5 21       	brne	80005770 <fat_mount+0x10c>
800056ce:	40 08       	lddsp	r8,sp[0x0]
800056d0:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800056d2:	30 1e       	mov	lr,1
800056d4:	30 63       	mov	r3,6
800056d6:	30 e2       	mov	r2,14
800056d8:	30 b1       	mov	r1,11
800056da:	30 c0       	mov	r0,12
800056dc:	11 89       	ld.ub	r9,r8[0x0]
800056de:	e8 09 18 00 	cp.b	r9,r4
800056e2:	5f 0b       	sreq	r11
800056e4:	ee 09 18 00 	cp.b	r9,r7
800056e8:	5f 09       	sreq	r9
800056ea:	f7 e9 10 09 	or	r9,r11,r9
800056ee:	ee 09 18 00 	cp.b	r9,r7
800056f2:	c1 90       	breq	80005724 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
800056f4:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800056f6:	fc 09 18 00 	cp.b	r9,lr
800056fa:	5f 0c       	sreq	r12
800056fc:	ec 09 18 00 	cp.b	r9,r6
80005700:	5f 0b       	sreq	r11
80005702:	f9 eb 10 0b 	or	r11,r12,r11
80005706:	ee 0b 18 00 	cp.b	r11,r7
8000570a:	c1 41       	brne	80005732 <fat_mount+0xce>
8000570c:	e6 09 18 00 	cp.b	r9,r3
80005710:	c1 10       	breq	80005732 <fat_mount+0xce>
80005712:	e4 09 18 00 	cp.b	r9,r2
80005716:	c0 e0       	breq	80005732 <fat_mount+0xce>
80005718:	e2 09 18 00 	cp.b	r9,r1
8000571c:	c0 b0       	breq	80005732 <fat_mount+0xce>
8000571e:	e0 09 18 00 	cp.b	r9,r0
80005722:	c0 80       	breq	80005732 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005724:	2f fa       	sub	r10,-1
80005726:	5c 5a       	castu.b	r10
80005728:	2f 08       	sub	r8,-16
8000572a:	ec 0a 18 00 	cp.b	r10,r6
8000572e:	cd 71       	brne	800056dc <fat_mount+0x78>
80005730:	c2 08       	rjmp	80005770 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005732:	ec 0a 18 00 	cp.b	r10,r6
80005736:	c1 d0       	breq	80005770 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005738:	fe f3 02 10 	ld.w	r3,pc[528]
8000573c:	a5 6a       	lsl	r10,0x4
8000573e:	f4 ca fe 42 	sub	r10,r10,-446
80005742:	ea 0a 00 0a 	add	r10,r5,r10
80005746:	f5 38 00 08 	ld.ub	r8,r10[8]
8000574a:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
8000574c:	f5 38 00 09 	ld.ub	r8,r10[9]
80005750:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005752:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005756:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005758:	f5 38 00 0b 	ld.ub	r8,r10[11]
8000575c:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
8000575e:	4f 88       	lddpc	r8,8000593c <fat_mount+0x2d8>
80005760:	11 8c       	ld.ub	r12,r8[0x0]
80005762:	f0 1f 00 7f 	mcall	8000595c <fat_mount+0x2f8>
80005766:	66 08       	ld.w	r8,r3[0x0]
80005768:	f8 08 02 48 	mul	r8,r12,r8
8000576c:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
8000576e:	c9 4b       	rjmp	80005696 <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005770:	4f 88       	lddpc	r8,80005950 <fat_mount+0x2ec>
80005772:	11 89       	ld.ub	r9,r8[0x0]
80005774:	3e b8       	mov	r8,-21
80005776:	f0 09 18 00 	cp.b	r9,r8
8000577a:	c0 f1       	brne	80005798 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
8000577c:	4f 58       	lddpc	r8,80005950 <fat_mount+0x2ec>
8000577e:	11 a9       	ld.ub	r9,r8[0x2]
80005780:	39 08       	mov	r8,-112
80005782:	f0 09 18 00 	cp.b	r9,r8
80005786:	c0 91       	brne	80005798 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005788:	4f 28       	lddpc	r8,80005950 <fat_mount+0x2ec>
8000578a:	f1 38 00 15 	ld.ub	r8,r8[21]
8000578e:	e2 18 00 f0 	andl	r8,0xf0,COH
80005792:	e0 48 00 f0 	cp.w	r8,240
80005796:	c0 60       	breq	800057a2 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005798:	30 39       	mov	r9,3
8000579a:	4f 08       	lddpc	r8,80005958 <fat_mount+0x2f4>
8000579c:	b0 89       	st.b	r8[0x0],r9
8000579e:	30 0c       	mov	r12,0
      return false;
800057a0:	cc b8       	rjmp	80005936 <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
800057a2:	30 49       	mov	r9,4
800057a4:	4e d8       	lddpc	r8,80005958 <fat_mount+0x2f4>
800057a6:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
800057a8:	4e aa       	lddpc	r10,80005950 <fat_mount+0x2ec>
800057aa:	f5 39 00 0c 	ld.ub	r9,r10[12]
800057ae:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
800057b0:	f5 38 00 0d 	ld.ub	r8,r10[13]
800057b4:	b3 38       	mul	r8,r9
800057b6:	5c 58       	castu.b	r8
800057b8:	4e 1b       	lddpc	r11,8000593c <fat_mount+0x2d8>
800057ba:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
800057bc:	30 0b       	mov	r11,0
800057be:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
800057c0:	fa cb ff fc 	sub	r11,sp,-4
800057c4:	fa c7 ff f9 	sub	r7,sp,-7
800057c8:	f5 3c 00 16 	ld.ub	r12,r10[22]
800057cc:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
800057ce:	fa ce ff fa 	sub	lr,sp,-6
800057d2:	f5 3a 00 17 	ld.ub	r10,r10[23]
800057d6:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
800057d8:	40 1a       	lddsp	r10,sp[0x4]
800057da:	58 0a       	cp.w	r10,0
800057dc:	c0 e1       	brne	800057f8 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
800057de:	4d da       	lddpc	r10,80005950 <fat_mount+0x2ec>
800057e0:	f5 3c 00 24 	ld.ub	r12,r10[36]
800057e4:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
800057e6:	f5 3c 00 25 	ld.ub	r12,r10[37]
800057ea:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
800057ec:	f5 3c 00 26 	ld.ub	r12,r10[38]
800057f0:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
800057f2:	f5 3a 00 27 	ld.ub	r10,r10[39]
800057f6:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
800057f8:	12 95       	mov	r5,r9
800057fa:	40 1c       	lddsp	r12,sp[0x4]
800057fc:	f2 0c 02 4c 	mul	r12,r9,r12
80005800:	4c fa       	lddpc	r10,8000593c <fat_mount+0x2d8>
80005802:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005804:	4d 3a       	lddpc	r10,80005950 <fat_mount+0x2ec>
80005806:	f5 3a 00 13 	ld.ub	r10,r10[19]
8000580a:	58 0a       	cp.w	r10,0
8000580c:	c1 61       	brne	80005838 <fat_mount+0x1d4>
8000580e:	4d 16       	lddpc	r6,80005950 <fat_mount+0x2ec>
80005810:	ed 34 00 14 	ld.ub	r4,r6[20]
80005814:	30 06       	mov	r6,0
80005816:	ec 04 18 00 	cp.b	r4,r6
8000581a:	c0 f1       	brne	80005838 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
8000581c:	4c da       	lddpc	r10,80005950 <fat_mount+0x2ec>
8000581e:	f5 36 00 20 	ld.ub	r6,r10[32]
80005822:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005824:	f5 37 00 21 	ld.ub	r7,r10[33]
80005828:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
8000582a:	f5 3e 00 22 	ld.ub	lr,r10[34]
8000582e:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005830:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005834:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005836:	c0 98       	rjmp	80005848 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005838:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
8000583a:	4c 6a       	lddpc	r10,80005950 <fat_mount+0x2ec>
8000583c:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005840:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005842:	30 0a       	mov	r10,0
80005844:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005846:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005848:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
8000584a:	4b da       	lddpc	r10,8000593c <fat_mount+0x2d8>
8000584c:	f8 0b 15 01 	lsl	r11,r12,0x1
80005850:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005854:	fa c6 ff f6 	sub	r6,sp,-10
80005858:	fa c7 ff f4 	sub	r7,sp,-12
8000585c:	4b db       	lddpc	r11,80005950 <fat_mount+0x2ec>
8000585e:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005862:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005864:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005868:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
8000586a:	f2 03 15 04 	lsl	r3,r9,0x4
8000586e:	9a de       	ld.uh	lr,sp[0xa]
80005870:	e6 0e 00 0e 	add	lr,r3,lr
80005874:	a5 7e       	lsl	lr,0x5
80005876:	20 1e       	sub	lr,1
80005878:	f2 03 15 09 	lsl	r3,r9,0x9
8000587c:	fc 03 0c 02 	divs	r2,lr,r3
80005880:	e4 09 02 4e 	mul	lr,r2,r9
80005884:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005888:	f7 33 00 0e 	ld.ub	r3,r11[14]
8000588c:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
8000588e:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005892:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005894:	9a 57       	ld.sh	r7,sp[0xa]
80005896:	f7 3b 00 30 	ld.ub	r11,r11[48]
8000589a:	0e 96       	mov	r6,r7
8000589c:	ee 0b 01 0b 	sub	r11,r7,r11
800058a0:	b3 3b       	mul	r11,r9
800058a2:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
800058a4:	ee 09 02 49 	mul	r9,r7,r9
800058a8:	5c 79       	castu.h	r9
800058aa:	4a 8b       	lddpc	r11,80005948 <fat_mount+0x2e4>
800058ac:	76 0b       	ld.w	r11,r11[0x0]
800058ae:	f2 0b 00 0b 	add	r11,r9,r11
800058b2:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
800058b4:	5c 7e       	castu.h	lr
800058b6:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
800058ba:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
800058bc:	58 08       	cp.w	r8,0
800058be:	c3 b0       	breq	80005934 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
800058c0:	a9 35       	mul	r5,r4
800058c2:	ea 09 01 09 	sub	r9,r5,r9
800058c6:	18 19       	sub	r9,r12
800058c8:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
800058ca:	30 1a       	mov	r10,1
800058cc:	f4 08 18 00 	cp.b	r8,r10
800058d0:	c0 70       	breq	800058de <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
800058d2:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
800058d4:	a1 98       	lsr	r8,0x1
800058d6:	f4 08 18 00 	cp.b	r8,r10
800058da:	cf c1       	brne	800058d2 <fat_mount+0x26e>
800058dc:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
800058de:	40 18       	lddsp	r8,sp[0x4]
800058e0:	f0 ca ff fe 	sub	r10,r8,-2
800058e4:	49 69       	lddpc	r9,8000593c <fat_mount+0x2d8>
800058e6:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
800058e8:	e0 48 0f f4 	cp.w	r8,4084
800058ec:	e0 8b 00 07 	brhi	800058fa <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
800058f0:	30 19       	mov	r9,1
800058f2:	49 58       	lddpc	r8,80005944 <fat_mount+0x2e0>
800058f4:	b0 89       	st.b	r8[0x0],r9
800058f6:	30 1c       	mov	r12,1
800058f8:	c1 f8       	rjmp	80005936 <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
800058fa:	e0 48 ff f4 	cp.w	r8,65524
800058fe:	e0 8b 00 07 	brhi	8000590c <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80005902:	30 29       	mov	r9,2
80005904:	49 08       	lddpc	r8,80005944 <fat_mount+0x2e0>
80005906:	b0 89       	st.b	r8[0x0],r9
80005908:	30 1c       	mov	r12,1
8000590a:	c1 68       	rjmp	80005936 <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000590c:	30 39       	mov	r9,3
8000590e:	48 e8       	lddpc	r8,80005944 <fat_mount+0x2e0>
80005910:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80005912:	48 b8       	lddpc	r8,8000593c <fat_mount+0x2d8>
80005914:	2e 88       	sub	r8,-24
80005916:	48 f9       	lddpc	r9,80005950 <fat_mount+0x2ec>
80005918:	f3 3a 00 2c 	ld.ub	r10,r9[44]
8000591c:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000591e:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80005922:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80005924:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005928:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000592a:	f3 39 00 2f 	ld.ub	r9,r9[47]
8000592e:	b0 89       	st.b	r8[0x0],r9
80005930:	30 1c       	mov	r12,1
80005932:	c0 28       	rjmp	80005936 <fat_mount+0x2d2>
80005934:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80005936:	2f dd       	sub	sp,-12
80005938:	d8 32       	popm	r0-r7,pc
8000593a:	00 00       	add	r0,r0
8000593c:	00 00       	add	r0,r0
8000593e:	0b cc       	ld.ub	r12,r5[0x4]
80005940:	80 00       	ld.sh	r0,r0[0x0]
80005942:	3b fc       	mov	r12,-65
80005944:	00 00       	add	r0,r0
80005946:	0c 18       	sub	r8,r6
80005948:	00 00       	add	r0,r0
8000594a:	09 88       	ld.ub	r8,r4[0x0]
8000594c:	80 00       	ld.sh	r0,r0[0x0]
8000594e:	4a 98       	lddpc	r8,800059f0 <file_write_buf+0x54>
80005950:	00 00       	add	r0,r0
80005952:	09 cc       	ld.ub	r12,r4[0x4]
80005954:	80 00       	ld.sh	r0,r0[0x0]
80005956:	42 00       	lddsp	r0,sp[0x80]
80005958:	00 00       	add	r0,r0
8000595a:	0c 1c       	sub	r12,r6
8000595c:	80 00       	ld.sh	r0,r0[0x0]
8000595e:	66 e0       	ld.w	r0,r3[0x38]

80005960 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80005960:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80005962:	f0 1f 00 0a 	mcall	80005988 <file_close+0x28>
80005966:	c1 00       	breq	80005986 <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
80005968:	48 98       	lddpc	r8,8000598c <file_close+0x2c>
8000596a:	11 88       	ld.ub	r8,r8[0x0]
8000596c:	e2 18 00 02 	andl	r8,0x2,COH
80005970:	c0 80       	breq	80005980 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80005972:	f0 1f 00 08 	mcall	80005990 <file_close+0x30>
80005976:	c0 80       	breq	80005986 <file_close+0x26>
            return;           // error
         fat_write_entry_file();
80005978:	f0 1f 00 07 	mcall	80005994 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
8000597c:	f0 1f 00 07 	mcall	80005998 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80005980:	30 09       	mov	r9,0
80005982:	48 38       	lddpc	r8,8000598c <file_close+0x2c>
80005984:	b0 89       	st.b	r8[0x0],r9
80005986:	d8 02       	popm	pc
80005988:	80 00       	ld.sh	r0,r0[0x0]
8000598a:	4b dc       	lddpc	r12,80005a7c <file_write_buf+0xe0>
8000598c:	00 00       	add	r0,r0
8000598e:	09 8c       	ld.ub	r12,r4[0x0]
80005990:	80 00       	ld.sh	r0,r0[0x0]
80005992:	48 30       	lddpc	r0,8000599c <file_write_buf>
80005994:	80 00       	ld.sh	r0,r0[0x0]
80005996:	3f e0       	mov	r0,-2
80005998:	80 00       	ld.sh	r0,r0[0x0]
8000599a:	41 94       	lddsp	r4,sp[0x64]

8000599c <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
8000599c:	d4 31       	pushm	r0-r7,lr
8000599e:	20 1d       	sub	sp,4
800059a0:	18 95       	mov	r5,r12
800059a2:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
800059a4:	f0 1f 00 4f 	mcall	80005ae0 <file_write_buf+0x144>
800059a8:	e0 80 00 98 	breq	80005ad8 <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
800059ac:	4c e8       	lddpc	r8,80005ae4 <file_write_buf+0x148>
800059ae:	11 88       	ld.ub	r8,r8[0x0]
800059b0:	e2 18 00 02 	andl	r8,0x2,COH
800059b4:	c0 40       	breq	800059bc <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800059b6:	58 06       	cp.w	r6,0
800059b8:	c0 71       	brne	800059c6 <file_write_buf+0x2a>
800059ba:	c8 f8       	rjmp	80005ad8 <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
800059bc:	31 59       	mov	r9,21
800059be:	4c b8       	lddpc	r8,80005ae8 <file_write_buf+0x14c>
800059c0:	b0 89       	st.b	r8[0x0],r9
800059c2:	30 00       	mov	r0,0
      return false;
800059c4:	c8 b8       	rjmp	80005ada <file_write_buf+0x13e>
800059c6:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800059c8:	4c 74       	lddpc	r4,80005ae4 <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
800059ca:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
800059ce:	4c 87       	lddpc	r7,80005aec <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800059d0:	68 39       	ld.w	r9,r4[0xc]
800059d2:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
800059d6:	30 0b       	mov	r11,0
800059d8:	f6 02 19 00 	cp.h	r2,r11
800059dc:	5f 08       	sreq	r8
800059de:	ec 01 19 00 	cp.h	r1,r6
800059e2:	f9 ba 03 01 	movlo	r10,1
800059e6:	f9 ba 02 00 	movhs	r10,0
800059ea:	f1 ea 00 0a 	and	r10,r8,r10
800059ee:	f6 0a 18 00 	cp.b	r10,r11
800059f2:	c3 10       	breq	80005a54 <file_write_buf+0xb8>
800059f4:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
800059f8:	c2 e1       	brne	80005a54 <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
800059fa:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
800059fe:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
80005a02:	06 9b       	mov	r11,r3
80005a04:	30 1c       	mov	r12,1
80005a06:	f0 1f 00 3b 	mcall	80005af0 <file_write_buf+0x154>
80005a0a:	c6 70       	breq	80005ad8 <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
80005a0c:	6e 18       	ld.w	r8,r7[0x4]
80005a0e:	10 33       	cp.w	r3,r8
80005a10:	c0 62       	brcc	80005a1c <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
80005a12:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80005a14:	6e 18       	ld.w	r8,r7[0x4]
80005a16:	58 08       	cp.w	r8,0
80005a18:	c0 51       	brne	80005a22 <file_write_buf+0x86>
80005a1a:	c1 98       	rjmp	80005a4c <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
80005a1c:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
80005a20:	cf ab       	rjmp	80005a14 <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
80005a22:	0a 9a       	mov	r10,r5
80005a24:	6e 0b       	ld.w	r11,r7[0x0]
80005a26:	4b 49       	lddpc	r9,80005af4 <file_write_buf+0x158>
80005a28:	13 8c       	ld.ub	r12,r9[0x0]
80005a2a:	f0 1f 00 34 	mcall	80005af8 <file_write_buf+0x15c>
80005a2e:	c0 50       	breq	80005a38 <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
80005a30:	30 19       	mov	r9,1
80005a32:	4a e8       	lddpc	r8,80005ae8 <file_write_buf+0x14c>
80005a34:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
80005a36:	c5 28       	rjmp	80005ada <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
80005a38:	6e 18       	ld.w	r8,r7[0x4]
80005a3a:	20 18       	sub	r8,1
80005a3c:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80005a3e:	6e 09       	ld.w	r9,r7[0x0]
80005a40:	2f f9       	sub	r9,-1
80005a42:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80005a44:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80005a48:	58 08       	cp.w	r8,0
80005a4a:	ce c1       	brne	80005a22 <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80005a4c:	e4 03 15 09 	lsl	r3,r2,0x9
80005a50:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
80005a52:	c3 08       	rjmp	80005ab2 <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80005a54:	68 2a       	ld.w	r10,r4[0x8]
80005a56:	14 39       	cp.w	r9,r10
80005a58:	5f 09       	sreq	r9
80005a5a:	12 68       	and	r8,r9
80005a5c:	30 0b       	mov	r11,0
80005a5e:	f6 08 18 00 	cp.b	r8,r11
80005a62:	c0 e0       	breq	80005a7e <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
80005a64:	30 1b       	mov	r11,1
80005a66:	16 9c       	mov	r12,r11
80005a68:	f0 1f 00 22 	mcall	80005af0 <file_write_buf+0x154>
80005a6c:	c3 60       	breq	80005ad8 <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80005a6e:	6e 09       	ld.w	r9,r7[0x0]
80005a70:	4a 38       	lddpc	r8,80005afc <file_write_buf+0x160>
80005a72:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80005a74:	30 0c       	mov	r12,0
80005a76:	f0 1f 00 23 	mcall	80005b00 <file_write_buf+0x164>
80005a7a:	c0 71       	brne	80005a88 <file_write_buf+0xec>
80005a7c:	c2 e8       	rjmp	80005ad8 <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
80005a7e:	30 1b       	mov	r11,1
80005a80:	30 2c       	mov	r12,2
80005a82:	f0 1f 00 1c 	mcall	80005af0 <file_write_buf+0x154>
80005a86:	c2 90       	breq	80005ad8 <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
80005a88:	f0 1f 00 1f 	mcall	80005b04 <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80005a8c:	e0 63 02 00 	mov	r3,512
80005a90:	04 13       	sub	r3,r2
80005a92:	ec 03 19 00 	cp.h	r3,r6
80005a96:	ec 03 17 20 	movhs	r3,r6
80005a9a:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
80005a9c:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80005aa0:	50 09       	stdsp	sp[0x0],r9
80005aa2:	12 9a       	mov	r10,r9
80005aa4:	0a 9b       	mov	r11,r5
80005aa6:	49 9c       	lddpc	r12,80005b08 <file_write_buf+0x16c>
80005aa8:	04 0c       	add	r12,r2
80005aaa:	f0 1f 00 19 	mcall	80005b0c <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
80005aae:	40 08       	lddsp	r8,sp[0x0]
80005ab0:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
80005ab2:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80005ab6:	68 38       	ld.w	r8,r4[0xc]
80005ab8:	f2 08 00 08 	add	r8,r9,r8
80005abc:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
80005abe:	e6 00 00 00 	add	r0,r3,r0
80005ac2:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
80005ac4:	06 16       	sub	r6,r3
80005ac6:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
80005ac8:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80005aca:	12 38       	cp.w	r8,r9
80005acc:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
80005ad0:	58 06       	cp.w	r6,0
80005ad2:	fe 91 ff 7f 	brne	800059d0 <file_write_buf+0x34>
80005ad6:	c0 28       	rjmp	80005ada <file_write_buf+0x13e>
80005ad8:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
80005ada:	00 9c       	mov	r12,r0
80005adc:	2f fd       	sub	sp,-4
80005ade:	d8 32       	popm	r0-r7,pc
80005ae0:	80 00       	ld.sh	r0,r0[0x0]
80005ae2:	4b dc       	lddpc	r12,80005bd4 <nav_file_isdir+0x4>
80005ae4:	00 00       	add	r0,r0
80005ae6:	09 8c       	ld.ub	r12,r4[0x0]
80005ae8:	00 00       	add	r0,r0
80005aea:	0c 1c       	sub	r12,r6
80005aec:	00 00       	add	r0,r0
80005aee:	0c 74       	tst	r4,r6
80005af0:	80 00       	ld.sh	r0,r0[0x0]
80005af2:	49 90       	lddpc	r0,80005b54 <file_open+0x44>
80005af4:	00 00       	add	r0,r0
80005af6:	0b cc       	ld.ub	r12,r5[0x4]
80005af8:	80 00       	ld.sh	r0,r0[0x0]
80005afa:	67 18       	ld.w	r8,r3[0x44]
80005afc:	00 00       	add	r0,r0
80005afe:	09 88       	ld.ub	r8,r4[0x0]
80005b00:	80 00       	ld.sh	r0,r0[0x0]
80005b02:	42 00       	lddsp	r0,sp[0x80]
80005b04:	80 00       	ld.sh	r0,r0[0x0]
80005b06:	3f d0       	mov	r0,-3
80005b08:	00 00       	add	r0,r0
80005b0a:	09 cc       	ld.ub	r12,r4[0x4]
80005b0c:	80 00       	ld.sh	r0,r0[0x0]
80005b0e:	77 5e       	ld.w	lr,r11[0x54]

80005b10 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
80005b10:	eb cd 40 c0 	pushm	r6-r7,lr
80005b14:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
80005b16:	f0 1f 00 20 	mcall	80005b94 <file_open+0x84>
80005b1a:	c3 a0       	breq	80005b8e <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
80005b1c:	f0 1f 00 1f 	mcall	80005b98 <file_open+0x88>
80005b20:	c3 70       	breq	80005b8e <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
80005b22:	0e 96       	mov	r6,r7
80005b24:	0e 98       	mov	r8,r7
80005b26:	e2 18 00 02 	andl	r8,0x2,COH
80005b2a:	c1 90       	breq	80005b5c <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80005b2c:	30 1c       	mov	r12,1
80005b2e:	f0 1f 00 1c 	mcall	80005b9c <file_open+0x8c>
80005b32:	c2 e0       	breq	80005b8e <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80005b34:	49 b8       	lddpc	r8,80005ba0 <file_open+0x90>
80005b36:	11 a8       	ld.ub	r8,r8[0x2]
80005b38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b3c:	c0 60       	breq	80005b48 <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80005b3e:	31 59       	mov	r9,21
80005b40:	49 98       	lddpc	r8,80005ba4 <file_open+0x94>
80005b42:	b0 89       	st.b	r8[0x0],r9
80005b44:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
80005b48:	49 88       	lddpc	r8,80005ba8 <file_open+0x98>
80005b4a:	11 8c       	ld.ub	r12,r8[0x0]
80005b4c:	f0 1f 00 18 	mcall	80005bac <file_open+0x9c>
80005b50:	c0 a0       	breq	80005b64 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80005b52:	31 49       	mov	r9,20
80005b54:	49 48       	lddpc	r8,80005ba4 <file_open+0x94>
80005b56:	b0 89       	st.b	r8[0x0],r9
80005b58:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80005b5c:	30 0c       	mov	r12,0
80005b5e:	f0 1f 00 10 	mcall	80005b9c <file_open+0x8c>
80005b62:	c1 60       	breq	80005b8e <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80005b64:	0c 98       	mov	r8,r6
80005b66:	e2 18 00 04 	andl	r8,0x4,COH
80005b6a:	c0 40       	breq	80005b72 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80005b6c:	30 09       	mov	r9,0
80005b6e:	48 d8       	lddpc	r8,80005ba0 <file_open+0x90>
80005b70:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80005b72:	e2 16 00 08 	andl	r6,0x8,COH
80005b76:	c0 50       	breq	80005b80 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
80005b78:	30 09       	mov	r9,0
80005b7a:	48 a8       	lddpc	r8,80005ba0 <file_open+0x90>
80005b7c:	91 39       	st.w	r8[0xc],r9
80005b7e:	c0 48       	rjmp	80005b86 <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80005b80:	48 88       	lddpc	r8,80005ba0 <file_open+0x90>
80005b82:	70 29       	ld.w	r9,r8[0x8]
80005b84:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
80005b86:	48 78       	lddpc	r8,80005ba0 <file_open+0x90>
80005b88:	b0 87       	st.b	r8[0x0],r7
80005b8a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80005b8e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005b92:	00 00       	add	r0,r0
80005b94:	80 00       	ld.sh	r0,r0[0x0]
80005b96:	4c 00       	lddpc	r0,80005c94 <nav_file_name+0xb8>
80005b98:	80 00       	ld.sh	r0,r0[0x0]
80005b9a:	39 1c       	mov	r12,-111
80005b9c:	80 00       	ld.sh	r0,r0[0x0]
80005b9e:	40 30       	lddsp	r0,sp[0xc]
80005ba0:	00 00       	add	r0,r0
80005ba2:	09 8c       	ld.ub	r12,r4[0x0]
80005ba4:	00 00       	add	r0,r0
80005ba6:	0c 1c       	sub	r12,r6
80005ba8:	00 00       	add	r0,r0
80005baa:	0b cc       	ld.ub	r12,r5[0x4]
80005bac:	80 00       	ld.sh	r0,r0[0x0]
80005bae:	66 e8       	ld.w	r8,r3[0x38]

80005bb0 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80005bb0:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80005bb2:	48 69       	lddpc	r9,80005bc8 <nav_getindex+0x18>
80005bb4:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
80005bb6:	48 6a       	lddpc	r10,80005bcc <nav_getindex+0x1c>
80005bb8:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
80005bba:	13 89       	ld.ub	r9,r9[0x0]
80005bbc:	b8 89       	st.b	r12[0x0],r9
80005bbe:	99 1b       	st.w	r12[0x4],r11
80005bc0:	b8 4a       	st.h	r12[0x8],r10
}
80005bc2:	2f dd       	sub	sp,-12
80005bc4:	5e fc       	retal	r12
80005bc6:	00 00       	add	r0,r0
80005bc8:	00 00       	add	r0,r0
80005bca:	0b cc       	ld.ub	r12,r5[0x4]
80005bcc:	00 00       	add	r0,r0
80005bce:	0c 18       	sub	r8,r6

80005bd0 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
80005bd0:	d4 01       	pushm	lr
   return fat_entry_is_dir();
80005bd2:	f0 1f 00 02 	mcall	80005bd8 <nav_file_isdir+0x8>
}
80005bd6:	d8 02       	popm	pc
80005bd8:	80 00       	ld.sh	r0,r0[0x0]
80005bda:	3b e4       	mov	r4,-66

80005bdc <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80005bdc:	d4 31       	pushm	r0-r7,lr
80005bde:	20 1d       	sub	sp,4
80005be0:	18 95       	mov	r5,r12
80005be2:	16 96       	mov	r6,r11
80005be4:	14 97       	mov	r7,r10
80005be6:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80005be8:	f0 1f 00 2f 	mcall	80005ca4 <nav_file_name+0xc8>
80005bec:	c5 80       	breq	80005c9c <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
80005bee:	58 07       	cp.w	r7,0
80005bf0:	c0 50       	breq	80005bfa <nav_file_name+0x1e>
80005bf2:	58 06       	cp.w	r6,0
80005bf4:	c0 31       	brne	80005bfa <nav_file_name+0x1e>
80005bf6:	30 1c       	mov	r12,1
80005bf8:	c5 38       	rjmp	80005c9e <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
80005bfa:	4a c8       	lddpc	r8,80005ca8 <nav_file_name+0xcc>
80005bfc:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005bfe:	58 04       	cp.w	r4,0
80005c00:	c0 31       	brne	80005c06 <nav_file_name+0x2a>
80005c02:	30 10       	mov	r0,1
80005c04:	c0 68       	rjmp	80005c10 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005c06:	08 99       	mov	r9,r4
80005c08:	20 19       	sub	r9,1
80005c0a:	4a 88       	lddpc	r8,80005ca8 <nav_file_name+0xcc>
80005c0c:	b0 19       	st.h	r8[0x2],r9
80005c0e:	30 00       	mov	r0,0
80005c10:	30 09       	mov	r9,0
80005c12:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80005c14:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80005c16:	4a 52       	lddpc	r2,80005ca8 <nav_file_name+0xcc>
80005c18:	c0 28       	rjmp	80005c1c <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80005c1a:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80005c1c:	f0 1f 00 24 	mcall	80005cac <nav_file_name+0xd0>
80005c20:	c3 e0       	breq	80005c9c <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
80005c22:	58 00       	cp.w	r0,0
80005c24:	c0 70       	breq	80005c32 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80005c26:	0e 9a       	mov	r10,r7
80005c28:	0c 9b       	mov	r11,r6
80005c2a:	0a 9c       	mov	r12,r5
80005c2c:	f0 1f 00 21 	mcall	80005cb0 <nav_file_name+0xd4>
80005c30:	c3 78       	rjmp	80005c9e <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80005c32:	06 99       	mov	r9,r3
80005c34:	0e 9a       	mov	r10,r7
80005c36:	0c 9b       	mov	r11,r6
80005c38:	0a 9c       	mov	r12,r5
80005c3a:	f0 1f 00 1f 	mcall	80005cb4 <nav_file_name+0xd8>
80005c3e:	c1 20       	breq	80005c62 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80005c40:	49 e8       	lddpc	r8,80005cb8 <nav_file_name+0xdc>
80005c42:	11 89       	ld.ub	r9,r8[0x0]
80005c44:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80005c46:	f0 09 18 00 	cp.b	r9,r8
80005c4a:	eb f8 12 00 	ld.shne	r8,r5[0x0]
80005c4e:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80005c52:	f1 d9 e1 08 	addne	r8,r8,r9
80005c56:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80005c5a:	49 48       	lddpc	r8,80005ca8 <nav_file_name+0xcc>
80005c5c:	b0 14       	st.h	r8[0x2],r4
80005c5e:	30 1c       	mov	r12,1
         return true;
80005c60:	c1 f8       	rjmp	80005c9e <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80005c62:	49 79       	lddpc	r9,80005cbc <nav_file_name+0xe0>
80005c64:	13 88       	ld.ub	r8,r9[0x0]
80005c66:	e2 08 18 00 	cp.b	r8,r1
80005c6a:	c0 70       	breq	80005c78 <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80005c6c:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80005c6e:	30 b9       	mov	r9,11
80005c70:	f2 08 18 00 	cp.b	r8,r9
80005c74:	c1 41       	brne	80005c9c <nav_file_name+0xc0>
80005c76:	cd 2b       	rjmp	80005c1a <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
80005c78:	49 09       	lddpc	r9,80005cb8 <nav_file_name+0xdc>
80005c7a:	13 88       	ld.ub	r8,r9[0x0]
80005c7c:	30 09       	mov	r9,0
80005c7e:	f2 08 18 00 	cp.b	r8,r9
80005c82:	c0 60       	breq	80005c8e <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80005c84:	40 08       	lddsp	r8,sp[0x0]
80005c86:	2f 38       	sub	r8,-13
80005c88:	5c 88       	casts.h	r8
80005c8a:	50 08       	stdsp	sp[0x0],r8
80005c8c:	c0 48       	rjmp	80005c94 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80005c8e:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80005c90:	20 d6       	sub	r6,13
80005c92:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80005c94:	84 18       	ld.sh	r8,r2[0x2]
80005c96:	20 18       	sub	r8,1
80005c98:	a4 18       	st.h	r2[0x2],r8
80005c9a:	cc 1b       	rjmp	80005c1c <nav_file_name+0x40>
80005c9c:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
80005c9e:	2f fd       	sub	sp,-4
80005ca0:	d8 32       	popm	r0-r7,pc
80005ca2:	00 00       	add	r0,r0
80005ca4:	80 00       	ld.sh	r0,r0[0x0]
80005ca6:	4b c4       	lddpc	r4,80005d94 <nav_filelist_set+0xd4>
80005ca8:	00 00       	add	r0,r0
80005caa:	0c 18       	sub	r8,r6
80005cac:	80 00       	ld.sh	r0,r0[0x0]
80005cae:	48 30       	lddpc	r0,80005cb8 <nav_file_name+0xdc>
80005cb0:	80 00       	ld.sh	r0,r0[0x0]
80005cb2:	3e 0c       	mov	r12,-32
80005cb4:	80 00       	ld.sh	r0,r0[0x0]
80005cb6:	3c 78       	mov	r8,-57
80005cb8:	00 00       	add	r0,r0
80005cba:	0c 1d       	sub	sp,r6
80005cbc:	00 00       	add	r0,r0
80005cbe:	0c 1c       	sub	r12,r6

80005cc0 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
80005cc0:	d4 31       	pushm	r0-r7,lr
80005cc2:	20 4d       	sub	sp,16
80005cc4:	50 0c       	stdsp	sp[0x0],r12
80005cc6:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
80005cc8:	f0 1f 00 51 	mcall	80005e0c <nav_filelist_set+0x14c>
80005ccc:	e0 80 00 9e 	breq	80005e08 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80005cd0:	4d 08       	lddpc	r8,80005e10 <nav_filelist_set+0x150>
80005cd2:	90 18       	ld.sh	r8,r8[0x2]
80005cd4:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80005cd6:	4d 08       	lddpc	r8,80005e14 <nav_filelist_set+0x154>
80005cd8:	f1 0a 00 24 	ld.sh	r10,r8[36]
80005cdc:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
80005cde:	f1 38 00 2c 	ld.ub	r8,r8[44]
80005ce2:	50 38       	stdsp	sp[0xc],r8
80005ce4:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80005ce6:	4c b7       	lddpc	r7,80005e10 <nav_filelist_set+0x150>
80005ce8:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005cea:	4c b6       	lddpc	r6,80005e14 <nav_filelist_set+0x154>
80005cec:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80005cee:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005cf0:	4c a5       	lddpc	r5,80005e18 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80005cf2:	58 02       	cp.w	r2,0
80005cf4:	c0 31       	brne	80005cfa <nav_filelist_set+0x3a>
80005cf6:	58 03       	cp.w	r3,0
80005cf8:	c0 c0       	breq	80005d10 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80005cfa:	8e 18       	ld.sh	r8,r7[0x2]
80005cfc:	e2 08 19 00 	cp.h	r8,r1
80005d00:	c0 51       	brne	80005d0a <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80005d02:	30 89       	mov	r9,8
80005d04:	4c 58       	lddpc	r8,80005e18 <nav_filelist_set+0x158>
80005d06:	b0 89       	st.b	r8[0x0],r9
            break;
80005d08:	c7 38       	rjmp	80005dee <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
80005d0a:	2f f8       	sub	r8,-1
80005d0c:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80005d0e:	c1 d8       	rjmp	80005d48 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80005d10:	8e 18       	ld.sh	r8,r7[0x2]
80005d12:	e0 08 19 00 	cp.h	r8,r0
80005d16:	c0 51       	brne	80005d20 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80005d18:	30 99       	mov	r9,9
80005d1a:	4c 08       	lddpc	r8,80005e18 <nav_filelist_set+0x158>
80005d1c:	b0 89       	st.b	r8[0x0],r9
            break;
80005d1e:	c6 88       	rjmp	80005dee <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005d20:	58 08       	cp.w	r8,0
80005d22:	c1 11       	brne	80005d44 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80005d24:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005d28:	e8 08 18 00 	cp.b	r8,r4
80005d2c:	c0 80       	breq	80005d3c <nav_filelist_set+0x7c>
80005d2e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80005d32:	e8 08 18 00 	cp.b	r8,r4
80005d36:	c0 31       	brne	80005d3c <nav_filelist_set+0x7c>
80005d38:	30 13       	mov	r3,1
80005d3a:	c0 78       	rjmp	80005d48 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80005d3c:	30 99       	mov	r9,9
80005d3e:	4b 78       	lddpc	r8,80005e18 <nav_filelist_set+0x158>
80005d40:	b0 89       	st.b	r8[0x0],r9
               break;
80005d42:	c5 68       	rjmp	80005dee <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80005d44:	20 18       	sub	r8,1
80005d46:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
80005d48:	f0 1f 00 35 	mcall	80005e1c <nav_filelist_set+0x15c>
80005d4c:	c0 71       	brne	80005d5a <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005d4e:	0b 89       	ld.ub	r9,r5[0x0]
80005d50:	31 a8       	mov	r8,26
80005d52:	f0 09 18 00 	cp.b	r9,r8
80005d56:	c3 20       	breq	80005dba <nav_filelist_set+0xfa>
80005d58:	c4 b8       	rjmp	80005dee <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
80005d5a:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005d5e:	e8 08 18 00 	cp.b	r8,r4
80005d62:	5f 1c       	srne	r12
80005d64:	f0 1f 00 2f 	mcall	80005e20 <nav_filelist_set+0x160>
80005d68:	c1 c0       	breq	80005da0 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
80005d6a:	58 03       	cp.w	r3,0
80005d6c:	cc 31       	brne	80005cf2 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
80005d6e:	58 02       	cp.w	r2,0
80005d70:	ed f8 12 12 	ld.shne	r8,r6[0x24]
80005d74:	f7 b8 01 ff 	subne	r8,-1
80005d78:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
80005d7c:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
80005d80:	f7 b8 00 01 	subeq	r8,1
80005d84:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
80005d88:	40 09       	lddsp	r9,sp[0x0]
80005d8a:	58 09       	cp.w	r9,0
80005d8c:	c0 51       	brne	80005d96 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80005d8e:	f0 1f 00 26 	mcall	80005e24 <nav_filelist_set+0x164>
80005d92:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80005d94:	c3 a8       	rjmp	80005e08 <nav_filelist_set+0x148>
           }
           u16_nb--;
80005d96:	40 08       	lddsp	r8,sp[0x0]
80005d98:	20 18       	sub	r8,1
80005d9a:	5c 88       	casts.h	r8
80005d9c:	50 08       	stdsp	sp[0x0],r8
           continue;
80005d9e:	ca ab       	rjmp	80005cf2 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005da0:	0b 88       	ld.ub	r8,r5[0x0]
80005da2:	30 a9       	mov	r9,10
80005da4:	f2 08 18 00 	cp.b	r8,r9
80005da8:	5f 09       	sreq	r9
80005daa:	31 aa       	mov	r10,26
80005dac:	f4 08 18 00 	cp.b	r8,r10
80005db0:	5f 08       	sreq	r8
80005db2:	10 49       	or	r9,r8
80005db4:	e8 09 18 00 	cp.b	r9,r4
80005db8:	c9 d0       	breq	80005cf2 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80005dba:	58 03       	cp.w	r3,0
80005dbc:	c0 50       	breq	80005dc6 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
80005dbe:	ed 64 00 2c 	st.b	r6[44],r4
80005dc2:	30 03       	mov	r3,0
            continue;
80005dc4:	c9 7b       	rjmp	80005cf2 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80005dc6:	ed 38 00 2c 	ld.ub	r8,r6[44]
80005dca:	30 1a       	mov	r10,1
80005dcc:	f4 08 18 00 	cp.b	r8,r10
80005dd0:	c0 60       	breq	80005ddc <nav_filelist_set+0x11c>
80005dd2:	ed 38 00 2d 	ld.ub	r8,r6[45]
80005dd6:	e8 08 18 00 	cp.b	r8,r4
80005dda:	c0 50       	breq	80005de4 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80005ddc:	30 99       	mov	r9,9
80005dde:	48 f8       	lddpc	r8,80005e18 <nav_filelist_set+0x158>
80005de0:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
80005de2:	c0 68       	rjmp	80005dee <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80005de4:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80005de6:	30 19       	mov	r9,1
80005de8:	ed 69 00 2c 	st.b	r6[44],r9
80005dec:	c8 3b       	rjmp	80005cf2 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
80005dee:	48 a8       	lddpc	r8,80005e14 <nav_filelist_set+0x154>
80005df0:	40 3a       	lddsp	r10,sp[0xc]
80005df2:	58 0a       	cp.w	r10,0
80005df4:	5f 19       	srne	r9
80005df6:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80005dfa:	48 69       	lddpc	r9,80005e10 <nav_filelist_set+0x150>
80005dfc:	40 2a       	lddsp	r10,sp[0x8]
80005dfe:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80005e00:	40 19       	lddsp	r9,sp[0x4]
80005e02:	f1 59 00 24 	st.h	r8[36],r9
80005e06:	30 0c       	mov	r12,0
   return false;
}
80005e08:	2f cd       	sub	sp,-16
80005e0a:	d8 32       	popm	r0-r7,pc
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	4c 24       	lddpc	r4,80005f14 <nav_dir_gotoparent+0x38>
80005e10:	00 00       	add	r0,r0
80005e12:	0c 18       	sub	r8,r6
80005e14:	00 00       	add	r0,r0
80005e16:	0b cc       	ld.ub	r12,r5[0x4]
80005e18:	00 00       	add	r0,r0
80005e1a:	0c 1c       	sub	r12,r6
80005e1c:	80 00       	ld.sh	r0,r0[0x0]
80005e1e:	48 30       	lddpc	r0,80005e28 <nav_filelist_findname>
80005e20:	80 00       	ld.sh	r0,r0[0x0]
80005e22:	3f 5c       	mov	r12,-11
80005e24:	80 00       	ld.sh	r0,r0[0x0]
80005e26:	3f 14       	mov	r4,-15

80005e28 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80005e28:	d4 21       	pushm	r4-r7,lr
80005e2a:	18 95       	mov	r5,r12
80005e2c:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80005e2e:	30 16       	mov	r6,1
80005e30:	30 07       	mov	r7,0
80005e32:	0c 9b       	mov	r11,r6
80005e34:	0e 9c       	mov	r12,r7
80005e36:	f0 1f 00 07 	mcall	80005e50 <nav_filelist_findname+0x28>
80005e3a:	c0 90       	breq	80005e4c <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80005e3c:	08 99       	mov	r9,r4
80005e3e:	0e 9a       	mov	r10,r7
80005e40:	0e 9b       	mov	r11,r7
80005e42:	0a 9c       	mov	r12,r5
80005e44:	f0 1f 00 04 	mcall	80005e54 <nav_filelist_findname+0x2c>
80005e48:	cf 50       	breq	80005e32 <nav_filelist_findname+0xa>
80005e4a:	30 1c       	mov	r12,1
         return true;
   }
}
80005e4c:	d8 22       	popm	r4-r7,pc
80005e4e:	00 00       	add	r0,r0
80005e50:	80 00       	ld.sh	r0,r0[0x0]
80005e52:	5c c0       	swap.bh	r0
80005e54:	80 00       	ld.sh	r0,r0[0x0]
80005e56:	5b dc       	cp.w	r12,-3

80005e58 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
80005e58:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
80005e5a:	f0 1f 00 04 	mcall	80005e68 <nav_filelist_reset+0x10>
80005e5e:	c0 40       	breq	80005e66 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80005e60:	f0 1f 00 03 	mcall	80005e6c <nav_filelist_reset+0x14>
80005e64:	30 1c       	mov	r12,1
   return true;
}
80005e66:	d8 02       	popm	pc
80005e68:	80 00       	ld.sh	r0,r0[0x0]
80005e6a:	4c 24       	lddpc	r4,80005f70 <nav_dir_gotoparent+0x94>
80005e6c:	80 00       	ld.sh	r0,r0[0x0]
80005e6e:	3b fc       	mov	r12,-65

80005e70 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80005e70:	eb cd 40 80 	pushm	r7,lr
80005e74:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
80005e76:	f0 1f 00 13 	mcall	80005ec0 <nav_file_create+0x50>
80005e7a:	c2 10       	breq	80005ebc <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
80005e7c:	30 0b       	mov	r11,0
80005e7e:	0e 9c       	mov	r12,r7
80005e80:	f0 1f 00 11 	mcall	80005ec4 <nav_file_create+0x54>
80005e84:	c0 60       	breq	80005e90 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005e86:	32 a9       	mov	r9,42
80005e88:	49 08       	lddpc	r8,80005ec8 <nav_file_create+0x58>
80005e8a:	b0 89       	st.b	r8[0x0],r9
80005e8c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
80005e90:	0e 9c       	mov	r12,r7
80005e92:	f0 1f 00 0f 	mcall	80005ecc <nav_file_create+0x5c>
80005e96:	c1 30       	breq	80005ebc <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80005e98:	48 e8       	lddpc	r8,80005ed0 <nav_file_create+0x60>
80005e9a:	30 09       	mov	r9,0
80005e9c:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
80005e9e:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
80005ea0:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80005ea2:	48 d8       	lddpc	r8,80005ed4 <nav_file_create+0x64>
80005ea4:	f1 09 00 24 	ld.sh	r9,r8[36]
80005ea8:	2f f9       	sub	r9,-1
80005eaa:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
80005eae:	30 19       	mov	r9,1
80005eb0:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80005eb4:	f0 1f 00 09 	mcall	80005ed8 <nav_file_create+0x68>
80005eb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ebc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80005ec0:	80 00       	ld.sh	r0,r0[0x0]
80005ec2:	5e 58       	retlt	r8
80005ec4:	80 00       	ld.sh	r0,r0[0x0]
80005ec6:	5e 28       	reths	r8
80005ec8:	00 00       	add	r0,r0
80005eca:	0c 1c       	sub	r12,r6
80005ecc:	80 00       	ld.sh	r0,r0[0x0]
80005ece:	55 bc       	stdsp	sp[0x16c],r12
80005ed0:	00 00       	add	r0,r0
80005ed2:	09 8c       	ld.ub	r12,r4[0x0]
80005ed4:	00 00       	add	r0,r0
80005ed6:	0b cc       	ld.ub	r12,r5[0x4]
80005ed8:	80 00       	ld.sh	r0,r0[0x0]
80005eda:	41 94       	lddsp	r4,sp[0x64]

80005edc <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
80005edc:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
80005ede:	f0 1f 00 1f 	mcall	80005f58 <nav_dir_gotoparent+0x7c>
80005ee2:	c3 80       	breq	80005f52 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
80005ee4:	49 e8       	lddpc	r8,80005f5c <nav_dir_gotoparent+0x80>
80005ee6:	70 88       	ld.w	r8,r8[0x20]
80005ee8:	58 08       	cp.w	r8,0
80005eea:	c0 51       	brne	80005ef4 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
80005eec:	31 99       	mov	r9,25
80005eee:	49 d8       	lddpc	r8,80005f60 <nav_dir_gotoparent+0x84>
80005ef0:	b0 89       	st.b	r8[0x0],r9
80005ef2:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
80005ef4:	30 19       	mov	r9,1
80005ef6:	49 c8       	lddpc	r8,80005f64 <nav_dir_gotoparent+0x88>
80005ef8:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
80005efa:	f0 1f 00 1c 	mcall	80005f68 <nav_dir_gotoparent+0x8c>
80005efe:	c2 a0       	breq	80005f52 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
80005f00:	f0 1f 00 1b 	mcall	80005f6c <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
80005f04:	49 68       	lddpc	r8,80005f5c <nav_dir_gotoparent+0x80>
80005f06:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80005f08:	49 a9       	lddpc	r9,80005f70 <nav_dir_gotoparent+0x94>
80005f0a:	72 19       	ld.w	r9,r9[0x4]
80005f0c:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
80005f0e:	f0 1f 00 1a 	mcall	80005f74 <nav_dir_gotoparent+0x98>
80005f12:	c2 00       	breq	80005f52 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80005f14:	49 28       	lddpc	r8,80005f5c <nav_dir_gotoparent+0x80>
80005f16:	f1 39 00 2d 	ld.ub	r9,r8[45]
80005f1a:	30 08       	mov	r8,0
80005f1c:	f0 09 18 00 	cp.b	r9,r8
80005f20:	c0 d0       	breq	80005f3a <nav_dir_gotoparent+0x5e>
80005f22:	48 f8       	lddpc	r8,80005f5c <nav_dir_gotoparent+0x80>
80005f24:	f1 39 00 2c 	ld.ub	r9,r8[44]
80005f28:	30 08       	mov	r8,0
80005f2a:	f0 09 18 00 	cp.b	r9,r8
80005f2e:	c0 60       	breq	80005f3a <nav_dir_gotoparent+0x5e>
80005f30:	c1 28       	rjmp	80005f54 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80005f32:	6c 18       	ld.w	r8,r6[0x4]
80005f34:	0e 38       	cp.w	r8,r7
80005f36:	c0 51       	brne	80005f40 <nav_dir_gotoparent+0x64>
80005f38:	c0 e8       	rjmp	80005f54 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005f3a:	30 15       	mov	r5,1
80005f3c:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80005f3e:	48 d6       	lddpc	r6,80005f70 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005f40:	0a 9b       	mov	r11,r5
80005f42:	08 9c       	mov	r12,r4
80005f44:	f0 1f 00 0d 	mcall	80005f78 <nav_dir_gotoparent+0x9c>
80005f48:	cf 51       	brne	80005f32 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
80005f4a:	30 89       	mov	r9,8
80005f4c:	48 58       	lddpc	r8,80005f60 <nav_dir_gotoparent+0x84>
80005f4e:	b0 89       	st.b	r8[0x0],r9
   return false;
80005f50:	d8 22       	popm	r4-r7,pc
80005f52:	d8 2a       	popm	r4-r7,pc,r12=0
80005f54:	da 2a       	popm	r4-r7,pc,r12=1
80005f56:	00 00       	add	r0,r0
80005f58:	80 00       	ld.sh	r0,r0[0x0]
80005f5a:	4c 24       	lddpc	r4,80006060 <nav_file_del+0xa4>
80005f5c:	00 00       	add	r0,r0
80005f5e:	0b cc       	ld.ub	r12,r5[0x4]
80005f60:	00 00       	add	r0,r0
80005f62:	0c 1c       	sub	r12,r6
80005f64:	00 00       	add	r0,r0
80005f66:	0c 18       	sub	r8,r6
80005f68:	80 00       	ld.sh	r0,r0[0x0]
80005f6a:	48 30       	lddpc	r0,80005f74 <nav_dir_gotoparent+0x98>
80005f6c:	80 00       	ld.sh	r0,r0[0x0]
80005f6e:	3f 14       	mov	r4,-15
80005f70:	00 00       	add	r0,r0
80005f72:	09 8c       	ld.ub	r12,r4[0x0]
80005f74:	80 00       	ld.sh	r0,r0[0x0]
80005f76:	5e 58       	retlt	r8
80005f78:	80 00       	ld.sh	r0,r0[0x0]
80005f7a:	5c c0       	swap.bh	r0

80005f7c <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
80005f7c:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
80005f7e:	f0 1f 00 0a 	mcall	80005fa4 <nav_dir_cd+0x28>
80005f82:	c0 f0       	breq	80005fa0 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80005f84:	f0 1f 00 09 	mcall	80005fa8 <nav_dir_cd+0x2c>
80005f88:	c0 c0       	breq	80005fa0 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
80005f8a:	48 98       	lddpc	r8,80005fac <nav_dir_cd+0x30>
80005f8c:	48 99       	lddpc	r9,80005fb0 <nav_dir_cd+0x34>
80005f8e:	92 19       	ld.sh	r9,r9[0x2]
80005f90:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80005f94:	48 89       	lddpc	r9,80005fb4 <nav_dir_cd+0x38>
80005f96:	72 19       	ld.w	r9,r9[0x4]
80005f98:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
80005f9a:	f0 1f 00 08 	mcall	80005fb8 <nav_dir_cd+0x3c>
80005f9e:	d8 02       	popm	pc
80005fa0:	d8 0a       	popm	pc,r12=0
80005fa2:	00 00       	add	r0,r0
80005fa4:	80 00       	ld.sh	r0,r0[0x0]
80005fa6:	4c 00       	lddpc	r0,800060a4 <nav_filelist_first+0x3c>
80005fa8:	80 00       	ld.sh	r0,r0[0x0]
80005faa:	3b e4       	mov	r4,-66
80005fac:	00 00       	add	r0,r0
80005fae:	0b cc       	ld.ub	r12,r5[0x4]
80005fb0:	00 00       	add	r0,r0
80005fb2:	0c 18       	sub	r8,r6
80005fb4:	00 00       	add	r0,r0
80005fb6:	09 8c       	ld.ub	r12,r4[0x0]
80005fb8:	80 00       	ld.sh	r0,r0[0x0]
80005fba:	5e 58       	retlt	r8

80005fbc <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
80005fbc:	eb cd 40 f8 	pushm	r3-r7,lr
80005fc0:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
80005fc2:	f0 1f 00 20 	mcall	80006040 <nav_file_del+0x84>
80005fc6:	c1 c1       	brne	80005ffe <nav_file_del+0x42>
80005fc8:	c3 a8       	rjmp	8000603c <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80005fca:	0c 9b       	mov	r11,r6
80005fcc:	0a 9c       	mov	r12,r5
80005fce:	f0 1f 00 1e 	mcall	80006044 <nav_file_del+0x88>
80005fd2:	c0 80       	breq	80005fe2 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
80005fd4:	58 04       	cp.w	r4,0
80005fd6:	c1 90       	breq	80006008 <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
80005fd8:	31 d9       	mov	r9,29
80005fda:	49 c8       	lddpc	r8,80006048 <nav_file_del+0x8c>
80005fdc:	b0 89       	st.b	r8[0x0],r9
80005fde:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
80005fe2:	f0 1f 00 1b 	mcall	8000604c <nav_file_del+0x90>
80005fe6:	c2 b0       	breq	8000603c <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
80005fe8:	0c 9c       	mov	r12,r6
80005fea:	f0 1f 00 1a 	mcall	80006050 <nav_file_del+0x94>
80005fee:	c2 70       	breq	8000603c <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
80005ff0:	58 07       	cp.w	r7,0
80005ff2:	c0 31       	brne	80005ff8 <nav_file_del+0x3c>
80005ff4:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
80005ff8:	20 17       	sub	r7,1
80005ffa:	5c 57       	castu.b	r7

      } // end of second while (1)
80005ffc:	ce 7b       	rjmp	80005fca <nav_file_del+0xe>
80005ffe:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
80006002:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
80006004:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006006:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
80006008:	f0 1f 00 13 	mcall	80006054 <nav_file_del+0x98>
8000600c:	c0 70       	breq	8000601a <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
8000600e:	f0 1f 00 13 	mcall	80006058 <nav_file_del+0x9c>
80006012:	c1 50       	breq	8000603c <nav_file_del+0x80>
            return false;
         u8_folder_level++;
80006014:	2f f7       	sub	r7,-1
80006016:	5c 57       	castu.b	r7
80006018:	cd 9b       	rjmp	80005fca <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
8000601a:	0c 9c       	mov	r12,r6
8000601c:	f0 1f 00 10 	mcall	8000605c <nav_file_del+0xa0>
80006020:	c0 e0       	breq	8000603c <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
80006022:	0c 9c       	mov	r12,r6
80006024:	f0 1f 00 0b 	mcall	80006050 <nav_file_del+0x94>
80006028:	c0 a0       	breq	8000603c <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
8000602a:	e6 07 18 00 	cp.b	r7,r3
8000602e:	cc e1       	brne	80005fca <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006030:	f0 1f 00 0c 	mcall	80006060 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006034:	f0 1f 00 0c 	mcall	80006064 <nav_file_del+0xa8>
80006038:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000603c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006040:	80 00       	ld.sh	r0,r0[0x0]
80006042:	4c 00       	lddpc	r0,80006140 <nav_filelist_last+0x28>
80006044:	80 00       	ld.sh	r0,r0[0x0]
80006046:	5c c0       	swap.bh	r0
80006048:	00 00       	add	r0,r0
8000604a:	0c 1c       	sub	r12,r6
8000604c:	80 00       	ld.sh	r0,r0[0x0]
8000604e:	5e dc       	retvc	r12
80006050:	80 00       	ld.sh	r0,r0[0x0]
80006052:	4e f0       	lddpc	r0,8000620c <nav_partition_mount+0x14>
80006054:	80 00       	ld.sh	r0,r0[0x0]
80006056:	5b d0       	cp.w	r0,-3
80006058:	80 00       	ld.sh	r0,r0[0x0]
8000605a:	5f 7c       	srpl	r12
8000605c:	80 00       	ld.sh	r0,r0[0x0]
8000605e:	40 30       	lddsp	r0,sp[0xc]
80006060:	80 00       	ld.sh	r0,r0[0x0]
80006062:	5e 58       	retlt	r8
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	41 94       	lddsp	r4,sp[0x64]

80006068 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
80006068:	d4 21       	pushm	r4-r7,lr
8000606a:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
8000606c:	f0 1f 00 0b 	mcall	80006098 <nav_filelist_first+0x30>
80006070:	c0 71       	brne	8000607e <nav_filelist_first+0x16>
80006072:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006074:	e9 38 00 2c 	ld.ub	r8,r4[44]
80006078:	10 37       	cp.w	r7,r8
8000607a:	c0 51       	brne	80006084 <nav_filelist_first+0x1c>
8000607c:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000607e:	30 16       	mov	r6,1
80006080:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006082:	48 74       	lddpc	r4,8000609c <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006084:	0c 9b       	mov	r11,r6
80006086:	0a 9c       	mov	r12,r5
80006088:	f0 1f 00 06 	mcall	800060a0 <nav_filelist_first+0x38>
8000608c:	cf 41       	brne	80006074 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
8000608e:	30 99       	mov	r9,9
80006090:	48 58       	lddpc	r8,800060a4 <nav_filelist_first+0x3c>
80006092:	b0 89       	st.b	r8[0x0],r9
   return false;
}
80006094:	d8 22       	popm	r4-r7,pc
80006096:	00 00       	add	r0,r0
80006098:	80 00       	ld.sh	r0,r0[0x0]
8000609a:	5e 58       	retlt	r8
8000609c:	00 00       	add	r0,r0
8000609e:	0b cc       	ld.ub	r12,r5[0x4]
800060a0:	80 00       	ld.sh	r0,r0[0x0]
800060a2:	5c c0       	swap.bh	r0
800060a4:	00 00       	add	r0,r0
800060a6:	0c 1c       	sub	r12,r6

800060a8 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
800060a8:	d4 31       	pushm	r0-r7,lr
800060aa:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
800060ac:	49 88       	lddpc	r8,8000610c <nav_filelist_nb+0x64>
800060ae:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
800060b2:	f0 1f 00 18 	mcall	80006110 <nav_filelist_nb+0x68>
800060b6:	c0 31       	brne	800060bc <nav_filelist_nb+0x14>
800060b8:	30 02       	mov	r2,0
800060ba:	c2 68       	rjmp	80006106 <nav_filelist_nb+0x5e>
800060bc:	30 02       	mov	r2,0
800060be:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800060c0:	30 14       	mov	r4,1
800060c2:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800060c4:	49 26       	lddpc	r6,8000610c <nav_filelist_nb+0x64>
800060c6:	30 15       	mov	r5,1
800060c8:	c0 b8       	rjmp	800060de <nav_filelist_nb+0x36>
800060ca:	ed 38 00 2c 	ld.ub	r8,r6[44]
800060ce:	ea 08 18 00 	cp.b	r8,r5
800060d2:	c0 41       	brne	800060da <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
800060d4:	2f f2       	sub	r2,-1
800060d6:	5c 82       	casts.h	r2
800060d8:	c0 38       	rjmp	800060de <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
800060da:	2f f7       	sub	r7,-1
800060dc:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800060de:	08 9b       	mov	r11,r4
800060e0:	06 9c       	mov	r12,r3
800060e2:	f0 1f 00 0d 	mcall	80006114 <nav_filelist_nb+0x6c>
800060e6:	cf 21       	brne	800060ca <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
800060e8:	f0 1f 00 0a 	mcall	80006110 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
800060ec:	3f f8       	mov	r8,-1
800060ee:	f0 01 19 00 	cp.h	r1,r8
800060f2:	c0 60       	breq	800060fe <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
800060f4:	30 1b       	mov	r11,1
800060f6:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
800060fa:	f0 1f 00 07 	mcall	80006114 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
800060fe:	58 00       	cp.w	r0,0
80006100:	c0 31       	brne	80006106 <nav_filelist_nb+0x5e>
80006102:	0e 92       	mov	r2,r7
80006104:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80006106:	04 9c       	mov	r12,r2
80006108:	d8 32       	popm	r0-r7,pc
8000610a:	00 00       	add	r0,r0
8000610c:	00 00       	add	r0,r0
8000610e:	0b cc       	ld.ub	r12,r5[0x4]
80006110:	80 00       	ld.sh	r0,r0[0x0]
80006112:	5e 58       	retlt	r8
80006114:	80 00       	ld.sh	r0,r0[0x0]
80006116:	5c c0       	swap.bh	r0

80006118 <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
80006118:	eb cd 40 c0 	pushm	r6-r7,lr
8000611c:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000611e:	f0 1f 00 0f 	mcall	80006158 <nav_filelist_last+0x40>
80006122:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
80006126:	c0 61       	brne	80006132 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
80006128:	30 99       	mov	r9,9
8000612a:	48 d8       	lddpc	r8,8000615c <nav_filelist_last+0x44>
8000612c:	b0 89       	st.b	r8[0x0],r9
8000612e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006132:	0c 9c       	mov	r12,r6
80006134:	f0 1f 00 0b 	mcall	80006160 <nav_filelist_last+0x48>
80006138:	c0 d0       	breq	80006152 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000613a:	30 18       	mov	r8,1
8000613c:	f0 07 19 00 	cp.h	r7,r8
80006140:	c0 31       	brne	80006146 <nav_filelist_last+0x2e>
80006142:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80006146:	0e 9c       	mov	r12,r7
80006148:	20 2c       	sub	r12,2
8000614a:	30 1b       	mov	r11,1
8000614c:	5c 7c       	castu.h	r12
8000614e:	f0 1f 00 06 	mcall	80006164 <nav_filelist_last+0x4c>
}
80006152:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006156:	00 00       	add	r0,r0
80006158:	80 00       	ld.sh	r0,r0[0x0]
8000615a:	60 a8       	ld.w	r8,r0[0x28]
8000615c:	00 00       	add	r0,r0
8000615e:	0c 1c       	sub	r12,r6
80006160:	80 00       	ld.sh	r0,r0[0x0]
80006162:	60 68       	ld.w	r8,r0[0x18]
80006164:	80 00       	ld.sh	r0,r0[0x0]
80006166:	5c c0       	swap.bh	r0

80006168 <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
80006168:	eb cd 40 80 	pushm	r7,lr
8000616c:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
8000616e:	f0 1f 00 18 	mcall	800061cc <nav_dir_make+0x64>
80006172:	c2 b0       	breq	800061c8 <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006174:	0e 9c       	mov	r12,r7
80006176:	f0 1f 00 17 	mcall	800061d0 <nav_dir_make+0x68>
8000617a:	c2 70       	breq	800061c8 <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000617c:	49 68       	lddpc	r8,800061d4 <nav_dir_make+0x6c>
8000617e:	3f f9       	mov	r9,-1
80006180:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006182:	30 19       	mov	r9,1
80006184:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
80006186:	f0 1f 00 15 	mcall	800061d8 <nav_dir_make+0x70>
8000618a:	c0 71       	brne	80006198 <nav_dir_make+0x30>
   {
      fat_delete_file( false );
8000618c:	f0 1f 00 14 	mcall	800061dc <nav_dir_make+0x74>
      fat_cache_flush();
80006190:	f0 1f 00 14 	mcall	800061e0 <nav_dir_make+0x78>
80006194:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
80006198:	49 38       	lddpc	r8,800061e4 <nav_dir_make+0x7c>
8000619a:	48 f9       	lddpc	r9,800061d4 <nav_dir_make+0x6c>
8000619c:	72 09       	ld.w	r9,r9[0x0]
8000619e:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
800061a0:	30 09       	mov	r9,0
800061a2:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
800061a4:	31 09       	mov	r9,16
800061a6:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
800061a8:	f0 1f 00 10 	mcall	800061e8 <nav_dir_make+0x80>
800061ac:	c0 e0       	breq	800061c8 <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
800061ae:	f0 1f 00 10 	mcall	800061ec <nav_dir_make+0x84>
800061b2:	c0 b0       	breq	800061c8 <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
800061b4:	f0 1f 00 0f 	mcall	800061f0 <nav_dir_make+0x88>
   if( !fat_cache_flush())
800061b8:	f0 1f 00 0a 	mcall	800061e0 <nav_dir_make+0x78>
800061bc:	c0 60       	breq	800061c8 <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
800061be:	30 0c       	mov	r12,0
800061c0:	f0 1f 00 0d 	mcall	800061f4 <nav_dir_make+0x8c>
800061c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800061c8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800061cc:	80 00       	ld.sh	r0,r0[0x0]
800061ce:	4c 24       	lddpc	r4,800062d4 <nav_gotoindex+0x40>
800061d0:	80 00       	ld.sh	r0,r0[0x0]
800061d2:	5e 70       	retpl	r0
800061d4:	00 00       	add	r0,r0
800061d6:	0c 74       	tst	r4,r6
800061d8:	80 00       	ld.sh	r0,r0[0x0]
800061da:	50 cc       	stdsp	sp[0x30],r12
800061dc:	80 00       	ld.sh	r0,r0[0x0]
800061de:	4e f0       	lddpc	r0,80006398 <nav_setcwd+0xa8>
800061e0:	80 00       	ld.sh	r0,r0[0x0]
800061e2:	41 94       	lddsp	r4,sp[0x64]
800061e4:	00 00       	add	r0,r0
800061e6:	09 8c       	ld.ub	r12,r4[0x0]
800061e8:	80 00       	ld.sh	r0,r0[0x0]
800061ea:	4d 88       	lddpc	r8,80006348 <nav_setcwd+0x58>
800061ec:	80 00       	ld.sh	r0,r0[0x0]
800061ee:	48 30       	lddpc	r0,800061f8 <nav_partition_mount>
800061f0:	80 00       	ld.sh	r0,r0[0x0]
800061f2:	3f e0       	mov	r0,-2
800061f4:	80 00       	ld.sh	r0,r0[0x0]
800061f6:	61 18       	ld.w	r8,r0[0x44]

800061f8 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800061f8:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
800061fa:	f0 1f 00 0a 	mcall	80006220 <nav_partition_mount+0x28>
800061fe:	c0 f0       	breq	8000621c <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80006200:	48 98       	lddpc	r8,80006224 <nav_partition_mount+0x2c>
80006202:	11 89       	ld.ub	r9,r8[0x0]
80006204:	30 08       	mov	r8,0
80006206:	f0 09 18 00 	cp.b	r9,r8
8000620a:	c0 70       	breq	80006218 <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000620c:	30 09       	mov	r9,0
8000620e:	48 78       	lddpc	r8,80006228 <nav_partition_mount+0x30>
80006210:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80006212:	f0 1f 00 07 	mcall	8000622c <nav_partition_mount+0x34>
80006216:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
80006218:	f0 1f 00 06 	mcall	80006230 <nav_partition_mount+0x38>
}
8000621c:	d8 02       	popm	pc
8000621e:	00 00       	add	r0,r0
80006220:	80 00       	ld.sh	r0,r0[0x0]
80006222:	4b 50       	lddpc	r0,800062f4 <nav_setcwd+0x4>
80006224:	00 00       	add	r0,r0
80006226:	0c 18       	sub	r8,r6
80006228:	00 00       	add	r0,r0
8000622a:	0b cc       	ld.ub	r12,r5[0x4]
8000622c:	80 00       	ld.sh	r0,r0[0x0]
8000622e:	3b fc       	mov	r12,-65
80006230:	80 00       	ld.sh	r0,r0[0x0]
80006232:	56 64       	stdsp	sp[0x198],r4

80006234 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006234:	d4 01       	pushm	lr
   return nav_partition_mount();
80006236:	f0 1f 00 02 	mcall	8000623c <nav_dir_root+0x8>
}
8000623a:	d8 02       	popm	pc
8000623c:	80 00       	ld.sh	r0,r0[0x0]
8000623e:	61 f8       	ld.w	r8,r0[0x7c]

80006240 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80006240:	eb cd 40 80 	pushm	r7,lr
80006244:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
80006246:	f0 1f 00 0f 	mcall	80006280 <nav_drive_set+0x40>
8000624a:	c1 90       	breq	8000627c <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
8000624c:	f0 1f 00 0e 	mcall	80006284 <nav_drive_set+0x44>
80006250:	ee 0c 18 00 	cp.b	r12,r7
80006254:	e0 8b 00 07 	brhi	80006262 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80006258:	30 69       	mov	r9,6
8000625a:	48 c8       	lddpc	r8,80006288 <nav_drive_set+0x48>
8000625c:	b0 89       	st.b	r8[0x0],r9
8000625e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006262:	48 b8       	lddpc	r8,8000628c <nav_drive_set+0x4c>
80006264:	11 88       	ld.ub	r8,r8[0x0]
80006266:	ee 08 18 00 	cp.b	r8,r7
8000626a:	c0 31       	brne	80006270 <nav_drive_set+0x30>
8000626c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006270:	48 78       	lddpc	r8,8000628c <nav_drive_set+0x4c>
80006272:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006274:	30 09       	mov	r9,0
80006276:	48 78       	lddpc	r8,80006290 <nav_drive_set+0x50>
80006278:	b0 89       	st.b	r8[0x0],r9
8000627a:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
8000627c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006280:	80 00       	ld.sh	r0,r0[0x0]
80006282:	4b 50       	lddpc	r0,80006354 <nav_setcwd+0x64>
80006284:	80 00       	ld.sh	r0,r0[0x0]
80006286:	66 b2       	ld.w	r2,r3[0x2c]
80006288:	00 00       	add	r0,r0
8000628a:	0c 1c       	sub	r12,r6
8000628c:	00 00       	add	r0,r0
8000628e:	0b cc       	ld.ub	r12,r5[0x4]
80006290:	00 00       	add	r0,r0
80006292:	0c 18       	sub	r8,r6

80006294 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006294:	d4 21       	pushm	r4-r7,lr
80006296:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
80006298:	19 8c       	ld.ub	r12,r12[0x0]
8000629a:	f0 1f 00 10 	mcall	800062d8 <nav_gotoindex+0x44>
8000629e:	c1 c0       	breq	800062d6 <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
800062a0:	f0 1f 00 0f 	mcall	800062dc <nav_gotoindex+0x48>
800062a4:	c1 90       	breq	800062d6 <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
800062a6:	6e 19       	ld.w	r9,r7[0x4]
800062a8:	48 e8       	lddpc	r8,800062e0 <nav_gotoindex+0x4c>
800062aa:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
800062ac:	f0 1f 00 0e 	mcall	800062e4 <nav_gotoindex+0x50>
800062b0:	c0 a1       	brne	800062c4 <nav_gotoindex+0x30>
800062b2:	c1 28       	rjmp	800062d6 <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800062b4:	0a 9b       	mov	r11,r5
800062b6:	08 9c       	mov	r12,r4
800062b8:	f0 1f 00 0c 	mcall	800062e8 <nav_gotoindex+0x54>
800062bc:	c0 71       	brne	800062ca <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
800062be:	f0 1f 00 0a 	mcall	800062e4 <nav_gotoindex+0x50>
800062c2:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800062c4:	48 a6       	lddpc	r6,800062ec <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800062c6:	30 15       	mov	r5,1
800062c8:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800062ca:	8c 19       	ld.sh	r9,r6[0x2]
800062cc:	8e 48       	ld.sh	r8,r7[0x8]
800062ce:	f0 09 19 00 	cp.h	r9,r8
800062d2:	cf 11       	brne	800062b4 <nav_gotoindex+0x20>
800062d4:	da 2a       	popm	r4-r7,pc,r12=1
800062d6:	d8 2a       	popm	r4-r7,pc,r12=0
800062d8:	80 00       	ld.sh	r0,r0[0x0]
800062da:	62 40       	ld.w	r0,r1[0x10]
800062dc:	80 00       	ld.sh	r0,r0[0x0]
800062de:	61 f8       	ld.w	r8,r0[0x7c]
800062e0:	00 00       	add	r0,r0
800062e2:	0b cc       	ld.ub	r12,r5[0x4]
800062e4:	80 00       	ld.sh	r0,r0[0x0]
800062e6:	5e 58       	retlt	r8
800062e8:	80 00       	ld.sh	r0,r0[0x0]
800062ea:	5c c0       	swap.bh	r0
800062ec:	00 00       	add	r0,r0
800062ee:	0c 18       	sub	r8,r6

800062f0 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
800062f0:	d4 31       	pushm	r0-r7,lr
800062f2:	20 6d       	sub	sp,24
800062f4:	18 97       	mov	r7,r12
800062f6:	16 91       	mov	r1,r11
800062f8:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
800062fa:	f0 1f 00 61 	mcall	8000647c <nav_setcwd+0x18c>
800062fe:	e0 80 00 bd 	breq	80006478 <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
80006302:	1a 96       	mov	r6,sp
80006304:	1a 9c       	mov	r12,sp
80006306:	f0 1f 00 5f 	mcall	80006480 <nav_setcwd+0x190>
8000630a:	fa c8 ff f4 	sub	r8,sp,-12
8000630e:	fa ea 00 00 	ld.d	r10,sp[0]
80006312:	f0 eb 00 00 	st.d	r8[0],r10
80006316:	40 29       	lddsp	r9,sp[0x8]
80006318:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000631a:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000631c:	35 c9       	mov	r9,92
8000631e:	f2 08 18 00 	cp.b	r8,r9
80006322:	5f 0a       	sreq	r10
80006324:	32 f9       	mov	r9,47
80006326:	f2 08 18 00 	cp.b	r8,r9
8000632a:	5f 09       	sreq	r9
8000632c:	f5 e9 10 09 	or	r9,r10,r9
80006330:	c0 70       	breq	8000633e <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006332:	f0 1f 00 55 	mcall	80006484 <nav_setcwd+0x194>
80006336:	e0 80 00 9c 	breq	8000646e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000633a:	2f f7       	sub	r7,-1
8000633c:	c5 e8       	rjmp	800063f8 <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000633e:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006340:	33 aa       	mov	r10,58
80006342:	f4 09 18 00 	cp.b	r9,r10
80006346:	c2 01       	brne	80006386 <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006348:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000634a:	35 cb       	mov	r11,92
8000634c:	f6 0a 18 00 	cp.b	r10,r11
80006350:	5f 0b       	sreq	r11
80006352:	32 fc       	mov	r12,47
80006354:	f8 0a 18 00 	cp.b	r10,r12
80006358:	5f 0a       	sreq	r10
8000635a:	f7 ea 10 0a 	or	r10,r11,r10
8000635e:	c1 40       	breq	80006386 <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006360:	4c a9       	lddpc	r9,80006488 <nav_setcwd+0x198>
80006362:	72 09       	ld.w	r9,r9[0x0]
80006364:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006368:	e2 19 00 02 	andl	r9,0x2,COH
8000636c:	f7 b8 01 20 	subne	r8,32
80006370:	24 18       	sub	r8,65
80006372:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006376:	f0 1f 00 46 	mcall	8000648c <nav_setcwd+0x19c>
8000637a:	c7 a0       	breq	8000646e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000637c:	f0 1f 00 45 	mcall	80006490 <nav_setcwd+0x1a0>
80006380:	c7 70       	breq	8000646e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006382:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006384:	c3 a8       	rjmp	800063f8 <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006386:	32 ea       	mov	r10,46
80006388:	f4 08 18 00 	cp.b	r8,r10
8000638c:	c1 a1       	brne	800063c0 <nav_setcwd+0xd0>
8000638e:	35 c8       	mov	r8,92
80006390:	f0 09 18 00 	cp.b	r9,r8
80006394:	5f 0a       	sreq	r10
80006396:	32 f8       	mov	r8,47
80006398:	f0 09 18 00 	cp.b	r9,r8
8000639c:	5f 08       	sreq	r8
8000639e:	f5 e8 10 08 	or	r8,r10,r8
800063a2:	c0 f0       	breq	800063c0 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
800063a4:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
800063a6:	c2 98       	rjmp	800063f8 <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
800063a8:	f0 1f 00 3b 	mcall	80006494 <nav_setcwd+0x1a4>
800063ac:	c6 10       	breq	8000646e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
800063ae:	0d 88       	ld.ub	r8,r6[0x0]
800063b0:	e8 08 18 00 	cp.b	r8,r4
800063b4:	c0 31       	brne	800063ba <nav_setcwd+0xca>
800063b6:	0c 97       	mov	r7,r6
800063b8:	c0 88       	rjmp	800063c8 <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
800063ba:	ec c7 ff ff 	sub	r7,r6,-1
800063be:	c0 58       	rjmp	800063c8 <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800063c0:	32 e5       	mov	r5,46
800063c2:	35 c3       	mov	r3,92
800063c4:	32 f2       	mov	r2,47
800063c6:	30 04       	mov	r4,0
800063c8:	0f 88       	ld.ub	r8,r7[0x0]
800063ca:	ea 08 18 00 	cp.b	r8,r5
800063ce:	c1 51       	brne	800063f8 <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
800063d0:	0f 98       	ld.ub	r8,r7[0x1]
800063d2:	ea 08 18 00 	cp.b	r8,r5
800063d6:	c1 11       	brne	800063f8 <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
800063d8:	ee c6 ff fe 	sub	r6,r7,-2
800063dc:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800063de:	e6 08 18 00 	cp.b	r8,r3
800063e2:	5f 0a       	sreq	r10
800063e4:	e4 08 18 00 	cp.b	r8,r2
800063e8:	5f 09       	sreq	r9
800063ea:	f5 e9 10 09 	or	r9,r10,r9
800063ee:	e8 09 18 00 	cp.b	r9,r4
800063f2:	cd b1       	brne	800063a8 <nav_setcwd+0xb8>
800063f4:	58 08       	cp.w	r8,0
800063f6:	cd 90       	breq	800063a8 <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
800063f8:	f0 1f 00 28 	mcall	80006498 <nav_setcwd+0x1a8>
800063fc:	c3 90       	breq	8000646e <nav_setcwd+0x17e>
800063fe:	30 03       	mov	r3,0
80006400:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006402:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006404:	35 c5       	mov	r5,92
80006406:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006408:	0f 88       	ld.ub	r8,r7[0x0]
8000640a:	ec 08 18 00 	cp.b	r8,r6
8000640e:	c0 31       	brne	80006414 <nav_setcwd+0x124>
80006410:	30 1c       	mov	r12,1
80006412:	c3 38       	rjmp	80006478 <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006414:	02 9b       	mov	r11,r1
80006416:	0e 9c       	mov	r12,r7
80006418:	f0 1f 00 21 	mcall	8000649c <nav_setcwd+0x1ac>
8000641c:	c0 51       	brne	80006426 <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
8000641e:	58 00       	cp.w	r0,0
80006420:	c2 70       	breq	8000646e <nav_setcwd+0x17e>
80006422:	0e 92       	mov	r2,r7
80006424:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006426:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006428:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000642a:	58 08       	cp.w	r8,0
8000642c:	c0 81       	brne	8000643c <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
8000642e:	58 03       	cp.w	r3,0
80006430:	ce c0       	breq	80006408 <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006432:	04 9c       	mov	r12,r2
80006434:	f0 1f 00 1b 	mcall	800064a0 <nav_setcwd+0x1b0>
80006438:	ce 81       	brne	80006408 <nav_setcwd+0x118>
8000643a:	c1 a8       	rjmp	8000646e <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000643c:	ea 08 18 00 	cp.b	r8,r5
80006440:	5f 09       	sreq	r9
80006442:	e8 08 18 00 	cp.b	r8,r4
80006446:	5f 08       	sreq	r8
80006448:	f3 e8 10 08 	or	r8,r9,r8
8000644c:	ec 08 18 00 	cp.b	r8,r6
80006450:	ce b0       	breq	80006426 <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006452:	58 03       	cp.w	r3,0
80006454:	c0 50       	breq	8000645e <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006456:	04 9c       	mov	r12,r2
80006458:	f0 1f 00 13 	mcall	800064a4 <nav_setcwd+0x1b4>
8000645c:	c0 90       	breq	8000646e <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
8000645e:	f0 1f 00 13 	mcall	800064a8 <nav_setcwd+0x1b8>
80006462:	c0 60       	breq	8000646e <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006464:	f0 1f 00 12 	mcall	800064ac <nav_setcwd+0x1bc>
80006468:	c0 30       	breq	8000646e <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000646a:	2f f7       	sub	r7,-1
8000646c:	cc eb       	rjmp	80006408 <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000646e:	fa cc ff f4 	sub	r12,sp,-12
80006472:	f0 1f 00 10 	mcall	800064b0 <nav_setcwd+0x1c0>
80006476:	30 0c       	mov	r12,0
   return false;
}
80006478:	2f ad       	sub	sp,-24
8000647a:	d8 32       	popm	r0-r7,pc
8000647c:	80 00       	ld.sh	r0,r0[0x0]
8000647e:	4b 50       	lddpc	r0,80006550 <nav_reset+0x48>
80006480:	80 00       	ld.sh	r0,r0[0x0]
80006482:	5b b0       	cp.w	r0,-5
80006484:	80 00       	ld.sh	r0,r0[0x0]
80006486:	62 34       	ld.w	r4,r1[0xc]
80006488:	00 00       	add	r0,r0
8000648a:	00 0c       	add	r12,r0
8000648c:	80 00       	ld.sh	r0,r0[0x0]
8000648e:	62 40       	ld.w	r0,r1[0x10]
80006490:	80 00       	ld.sh	r0,r0[0x0]
80006492:	61 f8       	ld.w	r8,r0[0x7c]
80006494:	80 00       	ld.sh	r0,r0[0x0]
80006496:	5e dc       	retvc	r12
80006498:	80 00       	ld.sh	r0,r0[0x0]
8000649a:	5e 58       	retlt	r8
8000649c:	80 00       	ld.sh	r0,r0[0x0]
8000649e:	5e 28       	reths	r8
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	5e 70       	retpl	r0
800064a4:	80 00       	ld.sh	r0,r0[0x0]
800064a6:	61 68       	ld.w	r8,r0[0x58]
800064a8:	80 00       	ld.sh	r0,r0[0x0]
800064aa:	3b e4       	mov	r4,-66
800064ac:	80 00       	ld.sh	r0,r0[0x0]
800064ae:	5f 7c       	srpl	r12
800064b0:	80 00       	ld.sh	r0,r0[0x0]
800064b2:	62 94       	ld.w	r4,r1[0x24]

800064b4 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
800064b4:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
800064b6:	f0 1f 00 02 	mcall	800064bc <nav_drive_nb+0x8>
}
800064ba:	d8 02       	popm	pc
800064bc:	80 00       	ld.sh	r0,r0[0x0]
800064be:	66 b2       	ld.w	r2,r3[0x2c]

800064c0 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
800064c0:	eb cd 40 80 	pushm	r7,lr
800064c4:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
800064c6:	30 18       	mov	r8,1
800064c8:	f0 0c 18 00 	cp.b	r12,r8
800064cc:	e0 88 00 07 	brls	800064da <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
800064d0:	32 79       	mov	r9,39
800064d2:	48 b8       	lddpc	r8,800064fc <nav_select+0x3c>
800064d4:	b0 89       	st.b	r8[0x0],r9
800064d6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800064da:	48 a8       	lddpc	r8,80006500 <nav_select+0x40>
800064dc:	11 8c       	ld.ub	r12,r8[0x0]
800064de:	ee 0c 18 00 	cp.b	r12,r7
800064e2:	c0 31       	brne	800064e8 <nav_select+0x28>
800064e4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
800064e8:	f0 1f 00 07 	mcall	80006504 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
800064ec:	0e 9c       	mov	r12,r7
800064ee:	f0 1f 00 06 	mcall	80006504 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
800064f2:	48 48       	lddpc	r8,80006500 <nav_select+0x40>
800064f4:	b0 87       	st.b	r8[0x0],r7
800064f6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800064fa:	00 00       	add	r0,r0
800064fc:	00 00       	add	r0,r0
800064fe:	0c 1c       	sub	r12,r6
80006500:	00 00       	add	r0,r0
80006502:	0c 94       	mov	r4,r6
80006504:	80 00       	ld.sh	r0,r0[0x0]
80006506:	40 a8       	lddsp	r8,sp[0x28]

80006508 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006508:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
8000650c:	30 07       	mov	r7,0
8000650e:	49 18       	lddpc	r8,80006550 <nav_reset+0x48>
80006510:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006512:	49 18       	lddpc	r8,80006554 <nav_reset+0x4c>
80006514:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006516:	f0 1f 00 11 	mcall	80006558 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
8000651a:	f0 1f 00 11 	mcall	8000655c <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
8000651e:	30 0c       	mov	r12,0
80006520:	f0 1f 00 10 	mcall	80006560 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006524:	49 03       	lddpc	r3,80006564 <nav_reset+0x5c>
80006526:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006528:	49 05       	lddpc	r5,80006568 <nav_reset+0x60>
8000652a:	3f f4       	mov	r4,-1
8000652c:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000652e:	49 06       	lddpc	r6,8000656c <nav_reset+0x64>
80006530:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006532:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006536:	30 1c       	mov	r12,1
80006538:	f0 1f 00 0a 	mcall	80006560 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000653c:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000653e:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006540:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006542:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006546:	48 b8       	lddpc	r8,80006570 <nav_reset+0x68>
80006548:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000654a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000654e:	00 00       	add	r0,r0
80006550:	00 00       	add	r0,r0
80006552:	0c 1d       	sub	sp,r6
80006554:	00 00       	add	r0,r0
80006556:	09 9e       	ld.ub	lr,r4[0x1]
80006558:	80 00       	ld.sh	r0,r0[0x0]
8000655a:	3f b8       	mov	r8,-5
8000655c:	80 00       	ld.sh	r0,r0[0x0]
8000655e:	39 98       	mov	r8,-103
80006560:	80 00       	ld.sh	r0,r0[0x0]
80006562:	64 c0       	ld.w	r0,r2[0x30]
80006564:	00 00       	add	r0,r0
80006566:	0c 18       	sub	r8,r6
80006568:	00 00       	add	r0,r0
8000656a:	0b cc       	ld.ub	r12,r5[0x4]
8000656c:	00 00       	add	r0,r0
8000656e:	09 8c       	ld.ub	r12,r4[0x0]
80006570:	00 00       	add	r0,r0
80006572:	0c 94       	mov	r4,r6

80006574 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80006574:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80006576:	f0 1f 00 02 	mcall	8000657c <print_char+0x8>
}
8000657a:	d8 02       	popm	pc
8000657c:	80 00       	ld.sh	r0,r0[0x0]
8000657e:	37 94       	mov	r4,121

80006580 <print_dbg_char>:
  print(DBG_USART, str);
}


void print_dbg_char(int c)
{
80006580:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_char(DBG_USART, c);
80006582:	18 9b       	mov	r11,r12
80006584:	fe 7c 2c 00 	mov	r12,-54272
80006588:	f0 1f 00 02 	mcall	80006590 <print_dbg_char+0x10>
}
8000658c:	d8 02       	popm	pc
8000658e:	00 00       	add	r0,r0
80006590:	80 00       	ld.sh	r0,r0[0x0]
80006592:	65 74       	ld.w	r4,r2[0x5c]

80006594 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006594:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006596:	f0 1f 00 02 	mcall	8000659c <print+0x8>
}
8000659a:	d8 02       	popm	pc
8000659c:	80 00       	ld.sh	r0,r0[0x0]
8000659e:	37 c0       	mov	r0,124

800065a0 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
800065a0:	eb cd 40 e0 	pushm	r5-r7,lr
800065a4:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800065a6:	30 08       	mov	r8,0
800065a8:	fb 68 00 0a 	st.b	sp[10],r8
800065ac:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
800065ae:	1a 95       	mov	r5,sp
800065b0:	e0 6e cc cd 	mov	lr,52429
800065b4:	ea 1e cc cc 	orh	lr,0xcccc
800065b8:	20 19       	sub	r9,1
800065ba:	f6 0e 06 46 	mulu.d	r6,r11,lr
800065be:	0e 98       	mov	r8,r7
800065c0:	a3 98       	lsr	r8,0x3
800065c2:	f0 08 00 2a 	add	r10,r8,r8<<0x2
800065c6:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
800065ca:	2d 0b       	sub	r11,-48
800065cc:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
800065d0:	10 9b       	mov	r11,r8
  } while (n);
800065d2:	58 08       	cp.w	r8,0
800065d4:	cf 21       	brne	800065b8 <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
800065d6:	1a 9b       	mov	r11,sp
800065d8:	12 0b       	add	r11,r9
800065da:	f0 1f 00 03 	mcall	800065e4 <print_ulong+0x44>
}
800065de:	2f dd       	sub	sp,-12
800065e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800065e4:	80 00       	ld.sh	r0,r0[0x0]
800065e6:	65 94       	ld.w	r4,r2[0x64]

800065e8 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
800065e8:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800065ea:	18 9b       	mov	r11,r12
800065ec:	fe 7c 2c 00 	mov	r12,-54272
800065f0:	f0 1f 00 02 	mcall	800065f8 <print_dbg_ulong+0x10>
}
800065f4:	d8 02       	popm	pc
800065f6:	00 00       	add	r0,r0
800065f8:	80 00       	ld.sh	r0,r0[0x0]
800065fa:	65 a0       	ld.w	r0,r2[0x68]

800065fc <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
800065fc:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
800065fe:	18 9b       	mov	r11,r12
80006600:	fe 7c 2c 00 	mov	r12,-54272
80006604:	f0 1f 00 02 	mcall	8000660c <print_dbg+0x10>
}
80006608:	d8 02       	popm	pc
8000660a:	00 00       	add	r0,r0
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	65 94       	ld.w	r4,r2[0x64]

80006610 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80006610:	eb cd 40 80 	pushm	r7,lr
80006614:	20 3d       	sub	sp,12
80006616:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80006618:	50 0c       	stdsp	sp[0x0],r12
8000661a:	30 88       	mov	r8,8
8000661c:	ba c8       	st.b	sp[0x4],r8
8000661e:	30 48       	mov	r8,4
80006620:	ba d8       	st.b	sp[0x5],r8
80006622:	30 08       	mov	r8,0
80006624:	ba 38       	st.h	sp[0x6],r8
80006626:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000662a:	30 2b       	mov	r11,2
8000662c:	48 6c       	lddpc	r12,80006644 <init_dbg_rs232_ex+0x34>
8000662e:	f0 1f 00 07 	mcall	80006648 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80006632:	0e 9a       	mov	r10,r7
80006634:	1a 9b       	mov	r11,sp
80006636:	fe 7c 2c 00 	mov	r12,-54272
8000663a:	f0 1f 00 05 	mcall	8000664c <init_dbg_rs232_ex+0x3c>
}
8000663e:	2f dd       	sub	sp,-12
80006640:	e3 cd 80 80 	ldm	sp++,r7,pc
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	d5 b0       	acall	0x16c
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	2f 2c       	sub	r12,-14
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	38 10       	mov	r0,-127

80006650 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80006650:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80006652:	18 9b       	mov	r11,r12
80006654:	e0 6c e1 00 	mov	r12,57600
80006658:	f0 1f 00 02 	mcall	80006660 <init_dbg_rs232+0x10>
}
8000665c:	d8 02       	popm	pc
8000665e:	00 00       	add	r0,r0
80006660:	80 00       	ld.sh	r0,r0[0x0]
80006662:	66 10       	ld.w	r0,r3[0x4]

80006664 <_stext>:
80006664:	48 dd       	lddpc	sp,80006698 <udata_clear_loop_end+0x4>
80006666:	fe c0 94 66 	sub	r0,pc,-27546
8000666a:	e3 b0 00 01 	mtsr	0x4,r0
8000666e:	d5 53       	csrf	0x15
80006670:	48 b0       	lddpc	r0,8000669c <udata_clear_loop_end+0x8>
80006672:	48 c1       	lddpc	r1,800066a0 <udata_clear_loop_end+0xc>
80006674:	02 30       	cp.w	r0,r1
80006676:	c0 62       	brcc	80006682 <idata_load_loop_end>
80006678:	48 b2       	lddpc	r2,800066a4 <udata_clear_loop_end+0x10>

8000667a <idata_load_loop>:
8000667a:	a5 05       	ld.d	r4,r2++
8000667c:	a1 24       	st.d	r0++,r4
8000667e:	02 30       	cp.w	r0,r1
80006680:	cf d3       	brcs	8000667a <idata_load_loop>

80006682 <idata_load_loop_end>:
80006682:	48 a0       	lddpc	r0,800066a8 <udata_clear_loop_end+0x14>
80006684:	48 a1       	lddpc	r1,800066ac <udata_clear_loop_end+0x18>
80006686:	02 30       	cp.w	r0,r1
80006688:	c0 62       	brcc	80006694 <udata_clear_loop_end>
8000668a:	30 02       	mov	r2,0
8000668c:	30 03       	mov	r3,0

8000668e <udata_clear_loop>:
8000668e:	a1 22       	st.d	r0++,r2
80006690:	02 30       	cp.w	r0,r1
80006692:	cf e3       	brcs	8000668e <udata_clear_loop>

80006694 <udata_clear_loop_end>:
80006694:	fe cf f4 24 	sub	pc,pc,-3036
80006698:	00 01       	add	r1,r0
8000669a:	00 00       	add	r0,r0
8000669c:	00 00       	add	r0,r0
8000669e:	00 04       	add	r4,r0
800066a0:	00 00       	add	r0,r0
800066a2:	05 18       	ld.sh	r8,r2++
800066a4:	80 00       	ld.sh	r0,r0[0x0]
800066a6:	e1 a8 00 00 	cop	cp0,cr0,cr0,cr0,0x10
800066aa:	05 18       	ld.sh	r8,r2++
800066ac:	00 00       	add	r0,r0
800066ae:	0c f0       	st.b	--r6,r0

800066b0 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
800066b0:	5e fc       	retal	r12

800066b2 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
800066b2:	5e ff       	retal	1

800066b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
800066b4:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800066b6:	58 0c       	cp.w	r12,0
800066b8:	c0 20       	breq	800066bc <mem_test_unit_ready+0x8>
800066ba:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
800066bc:	48 28       	lddpc	r8,800066c4 <mem_test_unit_ready+0x10>
800066be:	70 0c       	ld.w	r12,r8[0x0]
800066c0:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
800066c2:	d8 02       	popm	pc
800066c4:	80 00       	ld.sh	r0,r0[0x0]
800066c6:	d5 c0       	acall	0x170

800066c8 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
800066c8:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
800066ca:	58 0c       	cp.w	r12,0
800066cc:	c0 20       	breq	800066d0 <mem_read_capacity+0x8>
800066ce:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
800066d0:	48 38       	lddpc	r8,800066dc <mem_read_capacity+0x14>
800066d2:	70 18       	ld.w	r8,r8[0x4]
800066d4:	16 9c       	mov	r12,r11
800066d6:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
800066d8:	d8 02       	popm	pc
800066da:	00 00       	add	r0,r0
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	d5 c0       	acall	0x170

800066e0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
800066e0:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
800066e2:	5f 0c       	sreq	r12
800066e4:	5e fc       	retal	r12
800066e6:	d7 03       	nop

800066e8 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
800066e8:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
800066ea:	58 0c       	cp.w	r12,0
800066ec:	c0 20       	breq	800066f0 <mem_wr_protect+0x8>
800066ee:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
800066f0:	48 28       	lddpc	r8,800066f8 <mem_wr_protect+0x10>
800066f2:	70 2c       	ld.w	r12,r8[0x8]
800066f4:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800066f6:	d8 02       	popm	pc
800066f8:	80 00       	ld.sh	r0,r0[0x0]
800066fa:	d5 c0       	acall	0x170

800066fc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
800066fc:	d4 01       	pushm	lr
800066fe:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80006700:	58 0c       	cp.w	r12,0
80006702:	c0 20       	breq	80006706 <memory_2_ram+0xa>
80006704:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80006706:	48 49       	lddpc	r9,80006714 <memory_2_ram+0x18>
80006708:	72 49       	ld.w	r9,r9[0x10]
8000670a:	14 9b       	mov	r11,r10
8000670c:	10 9c       	mov	r12,r8
8000670e:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80006710:	d8 02       	popm	pc
80006712:	00 00       	add	r0,r0
80006714:	80 00       	ld.sh	r0,r0[0x0]
80006716:	d5 c0       	acall	0x170

80006718 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80006718:	d4 01       	pushm	lr
8000671a:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
8000671c:	58 0c       	cp.w	r12,0
8000671e:	c0 20       	breq	80006722 <ram_2_memory+0xa>
80006720:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80006722:	48 49       	lddpc	r9,80006730 <ram_2_memory+0x18>
80006724:	72 59       	ld.w	r9,r9[0x14]
80006726:	14 9b       	mov	r11,r10
80006728:	10 9c       	mov	r12,r8
8000672a:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
8000672c:	d8 02       	popm	pc
8000672e:	00 00       	add	r0,r0
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	d5 c0       	acall	0x170

80006734 <TakePhoto>:
int TakePhoto(uint8_t Cameras)
{
// 	VSYNC_0_ENABLE_INTERRUPT;
// 	VSYNC_1_ENABLE_INTERRUPT;
	//Only want to take pictures on cameras found
	if(((OV7670_Status.VSYNC0_State != IDLE) || !OV7670_Status.Camera_0_Found) && ((OV7670_Status.VSYNC1_State != IDLE) || !OV7670_Status.Camera_1_Found))
80006734:	49 58       	lddpc	r8,80006788 <TakePhoto+0x54>
80006736:	11 d9       	ld.ub	r9,r8[0x5]
80006738:	30 08       	mov	r8,0
8000673a:	f0 09 18 00 	cp.b	r9,r8
8000673e:	c0 71       	brne	8000674c <TakePhoto+0x18>
80006740:	49 28       	lddpc	r8,80006788 <TakePhoto+0x54>
80006742:	11 99       	ld.ub	r9,r8[0x1]
80006744:	30 08       	mov	r8,0
80006746:	f0 09 18 00 	cp.b	r9,r8
8000674a:	c0 d1       	brne	80006764 <TakePhoto+0x30>
8000674c:	48 f8       	lddpc	r8,80006788 <TakePhoto+0x54>
8000674e:	11 e9       	ld.ub	r9,r8[0x6]
80006750:	30 08       	mov	r8,0
80006752:	f0 09 18 00 	cp.b	r9,r8
80006756:	c1 71       	brne	80006784 <TakePhoto+0x50>
80006758:	48 c8       	lddpc	r8,80006788 <TakePhoto+0x54>
8000675a:	11 a9       	ld.ub	r9,r8[0x2]
8000675c:	30 08       	mov	r8,0
8000675e:	f0 09 18 00 	cp.b	r9,r8
80006762:	c1 10       	breq	80006784 <TakePhoto+0x50>
		return CAMERAS_BUSY; //wait for cameras to be idle if they are found
	
	if(Cameras & CAMERA_LEFT)
80006764:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80006768:	c0 40       	breq	80006770 <TakePhoto+0x3c>
		OV7670_Status.VSYNC0_State = TAKE_PHOTO;
8000676a:	30 19       	mov	r9,1
8000676c:	48 78       	lddpc	r8,80006788 <TakePhoto+0x54>
8000676e:	b0 d9       	st.b	r8[0x5],r9
		
	if(Cameras & CAMERA_RIGHT)
80006770:	e2 1c 00 02 	andl	r12,0x2,COH
80006774:	c0 31       	brne	8000677a <TakePhoto+0x46>
80006776:	30 2c       	mov	r12,2
80006778:	5e fc       	retal	r12
		OV7670_Status.VSYNC1_State = TAKE_PHOTO;
8000677a:	30 19       	mov	r9,1
8000677c:	48 38       	lddpc	r8,80006788 <TakePhoto+0x54>
8000677e:	b0 e9       	st.b	r8[0x6],r9
80006780:	30 2c       	mov	r12,2
80006782:	5e fc       	retal	r12
80006784:	30 4c       	mov	r12,4
	
	return TAKING_PHOTO;
	
}
80006786:	5e fc       	retal	r12
80006788:	00 00       	add	r0,r0
8000678a:	0c a8       	st.w	r6++,r8

8000678c <Photos_Ready>:

bool Photos_Ready(void)
{
	int status = 0;
	if(OV7670_Status.Camera_0_Found == true) //If camera is there
8000678c:	49 78       	lddpc	r8,800067e8 <Photos_Ready+0x5c>
8000678e:	11 99       	ld.ub	r9,r8[0x1]
80006790:	30 08       	mov	r8,0
80006792:	f0 09 18 00 	cp.b	r9,r8
80006796:	c0 e0       	breq	800067b2 <Photos_Ready+0x26>
	{ 
		if(OV7670_Status.Camera_0_Error == false)//and has no errors
80006798:	49 48       	lddpc	r8,800067e8 <Photos_Ready+0x5c>
8000679a:	11 b9       	ld.ub	r9,r8[0x3]
8000679c:	30 08       	mov	r8,0
8000679e:	f0 09 18 00 	cp.b	r9,r8
800067a2:	c0 81       	brne	800067b2 <Photos_Ready+0x26>
800067a4:	49 18       	lddpc	r8,800067e8 <Photos_Ready+0x5c>
800067a6:	11 d9       	ld.ub	r9,r8[0x5]
800067a8:	30 38       	mov	r8,3
800067aa:	f0 09 18 00 	cp.b	r9,r8
800067ae:	5f 08       	sreq	r8
800067b0:	c0 28       	rjmp	800067b4 <Photos_Ready+0x28>
800067b2:	30 18       	mov	r8,1
			status |= 1;
	}
	else
		status |= 1;		
		
	if(OV7670_Status.Camera_1_Found == true) //If camera is there
800067b4:	48 d9       	lddpc	r9,800067e8 <Photos_Ready+0x5c>
800067b6:	13 aa       	ld.ub	r10,r9[0x2]
800067b8:	30 09       	mov	r9,0
800067ba:	f2 0a 18 00 	cp.b	r10,r9
800067be:	c1 10       	breq	800067e0 <Photos_Ready+0x54>
	{
		if(OV7670_Status.Camera_1_Error == false)//and has no errors
800067c0:	48 a9       	lddpc	r9,800067e8 <Photos_Ready+0x5c>
800067c2:	13 ca       	ld.ub	r10,r9[0x4]
800067c4:	30 09       	mov	r9,0
800067c6:	f2 0a 18 00 	cp.b	r10,r9
800067ca:	c0 91       	brne	800067dc <Photos_Ready+0x50>
		{
			if(OV7670_Status.VSYNC1_State == TAKEN_PHOTO)
800067cc:	48 79       	lddpc	r9,800067e8 <Photos_Ready+0x5c>
800067ce:	13 ea       	ld.ub	r10,r9[0x6]
800067d0:	30 39       	mov	r9,3
800067d2:	f2 0a 18 00 	cp.b	r10,r9
800067d6:	c0 61       	brne	800067e2 <Photos_Ready+0x56>
			{
				status |= 1; //camera0 has taken photo
800067d8:	a1 a8       	sbr	r8,0x0
800067da:	c0 48       	rjmp	800067e2 <Photos_Ready+0x56>
			}
		}
		else
		status |= 1;
800067dc:	a1 a8       	sbr	r8,0x0
800067de:	c0 28       	rjmp	800067e2 <Photos_Ready+0x56>
	}
	else
		status |= 1;
800067e0:	a1 a8       	sbr	r8,0x0
800067e2:	58 08       	cp.w	r8,0
		
	if(status)
		return true;
	else
		return false;
}
800067e4:	5f 1c       	srne	r12
800067e6:	5e fc       	retal	r12
800067e8:	00 00       	add	r0,r0
800067ea:	0c a8       	st.w	r6++,r8

800067ec <FIFO_Reset>:
	delay_us(10);
	FIFO_1_WRST_SET;
}

void FIFO_Reset(uint8_t CameraID)
{
800067ec:	eb cd 40 80 	pushm	r7,lr
800067f0:	18 97       	mov	r7,r12
	FIFO_0_nOE_SET;
800067f2:	31 cc       	mov	r12,28
800067f4:	f0 1f 00 19 	mcall	80006858 <FIFO_Reset+0x6c>
	FIFO_1_nOE_SET;
800067f8:	31 bc       	mov	r12,27
800067fa:	f0 1f 00 18 	mcall	80006858 <FIFO_Reset+0x6c>
	if(CameraID & CAMERA_LEFT)
800067fe:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80006802:	c1 30       	breq	80006828 <FIFO_Reset+0x3c>
	{
		FIFO_0_WRST_CLR;
80006804:	31 5c       	mov	r12,21
80006806:	f0 1f 00 16 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_0_nRRST_CLR;
8000680a:	30 fc       	mov	r12,15
8000680c:	f0 1f 00 14 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_0_RCLK_SET;
80006810:	31 3c       	mov	r12,19
80006812:	f0 1f 00 12 	mcall	80006858 <FIFO_Reset+0x6c>
		FIFO_0_RCLK_CLR;
80006816:	31 3c       	mov	r12,19
80006818:	f0 1f 00 11 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_0_nRRST_SET;
8000681c:	30 fc       	mov	r12,15
8000681e:	f0 1f 00 0f 	mcall	80006858 <FIFO_Reset+0x6c>
		FIFO_0_WRST_SET;
80006822:	31 5c       	mov	r12,21
80006824:	f0 1f 00 0d 	mcall	80006858 <FIFO_Reset+0x6c>
	}
	if(CameraID & CAMERA_RIGHT)
80006828:	e2 17 00 02 	andl	r7,0x2,COH
8000682c:	c1 30       	breq	80006852 <FIFO_Reset+0x66>
	{
		FIFO_1_WRST_CLR;
8000682e:	31 9c       	mov	r12,25
80006830:	f0 1f 00 0b 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_1_nRRST_CLR;
80006834:	31 6c       	mov	r12,22
80006836:	f0 1f 00 0a 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_1_RCLK_SET;
8000683a:	31 7c       	mov	r12,23
8000683c:	f0 1f 00 07 	mcall	80006858 <FIFO_Reset+0x6c>
		FIFO_1_RCLK_CLR;
80006840:	31 7c       	mov	r12,23
80006842:	f0 1f 00 07 	mcall	8000685c <FIFO_Reset+0x70>
		FIFO_1_nRRST_SET;
80006846:	31 6c       	mov	r12,22
80006848:	f0 1f 00 04 	mcall	80006858 <FIFO_Reset+0x6c>
		FIFO_1_WRST_SET;
8000684c:	31 9c       	mov	r12,25
8000684e:	f0 1f 00 03 	mcall	80006858 <FIFO_Reset+0x6c>
80006852:	e3 cd 80 80 	ldm	sp++,r7,pc
80006856:	00 00       	add	r0,r0
80006858:	80 00       	ld.sh	r0,r0[0x0]
8000685a:	2f 76       	sub	r6,-9
8000685c:	80 00       	ld.sh	r0,r0[0x0]
8000685e:	2f 92       	sub	r2,-7

80006860 <Store_Image_0>:
	Store_Image_1();
	FIFO_Reset(CAMERA_RIGHT);
	return true;
}
void Store_Image_0()
{ 
80006860:	d4 31       	pushm	r0-r7,lr
80006862:	fa cd 02 90 	sub	sp,sp,656
80006866:	30 07       	mov	r7,0
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
		sprintf(&Filename_buff, Image0Name, i++);
80006868:	4b 44       	lddpc	r4,80006938 <Store_Image_0+0xd8>
8000686a:	fa c5 fd 80 	sub	r5,sp,-640
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
8000686e:	0e 93       	mov	r3,r7
	//delete file if it exits already
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
80006870:	f0 1f 00 33 	mcall	8000693c <Store_Image_0+0xdc>
		sprintf(&Filename_buff, Image0Name, i++);
80006874:	ee c6 ff ff 	sub	r6,r7,-1
80006878:	1a d7       	st.w	--sp,r7
8000687a:	08 9b       	mov	r11,r4
8000687c:	0a 9c       	mov	r12,r5
8000687e:	f0 1f 00 31 	mcall	80006940 <Store_Image_0+0xe0>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80006882:	06 9b       	mov	r11,r3
80006884:	0a 9c       	mov	r12,r5
80006886:	f0 1f 00 30 	mcall	80006944 <Store_Image_0+0xe4>
8000688a:	2f fd       	sub	sp,-4
8000688c:	58 0c       	cp.w	r12,0
8000688e:	c0 30       	breq	80006894 <Store_Image_0+0x34>
80006890:	0c 97       	mov	r7,r6
80006892:	ce fb       	rjmp	80006870 <Store_Image_0+0x10>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
80006894:	fa cc fd 80 	sub	r12,sp,-640
80006898:	f0 1f 00 2c 	mcall	80006948 <Store_Image_0+0xe8>
	
	file_open(FOPEN_MODE_W);
8000689c:	30 ec       	mov	r12,14
8000689e:	f0 1f 00 2c 	mcall	8000694c <Store_Image_0+0xec>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
800068a2:	30 eb       	mov	r11,14
800068a4:	4a bc       	lddpc	r12,80006950 <Store_Image_0+0xf0>
800068a6:	f0 1f 00 2c 	mcall	80006954 <Store_Image_0+0xf4>
	file_write_buf(DIBHead, DIBHEADERSIZE);
800068aa:	37 cb       	mov	r11,124
800068ac:	4a bc       	lddpc	r12,80006958 <Store_Image_0+0xf8>
800068ae:	f0 1f 00 2a 	mcall	80006954 <Store_Image_0+0xf4>
	
	//read and write image data
	//Image0
	//reset read pointer
	FIFO_0_nRRST_CLR;
800068b2:	30 fc       	mov	r12,15
800068b4:	f0 1f 00 2a 	mcall	8000695c <Store_Image_0+0xfc>
	FIFO_0_RCLK_SET;
800068b8:	31 3c       	mov	r12,19
800068ba:	f0 1f 00 2a 	mcall	80006960 <Store_Image_0+0x100>

	FIFO_0_RCLK_CLR;
800068be:	31 3c       	mov	r12,19
800068c0:	f0 1f 00 27 	mcall	8000695c <Store_Image_0+0xfc>
	FIFO_0_nRRST_SET;
800068c4:	30 fc       	mov	r12,15
800068c6:	f0 1f 00 27 	mcall	80006960 <Store_Image_0+0x100>
	
	//enable output
	FIFO_0_nOE_CLR;
800068ca:	31 cc       	mov	r12,28
800068cc:	f0 1f 00 24 	mcall	8000695c <Store_Image_0+0xfc>
800068d0:	30 03       	mov	r3,0
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
800068d2:	fa c2 ff ff 	sub	r2,sp,-1
	FIFO_Reset(CAMERA_LEFT);
	Store_Image_1();
	FIFO_Reset(CAMERA_RIGHT);
	return true;
}
void Store_Image_0()
800068d6:	fa c4 fd 7f 	sub	r4,sp,-641
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
800068da:	31 36       	mov	r6,19
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
800068dc:	fe 75 20 00 	mov	r5,-57344
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
800068e0:	1a 91       	mov	r1,sp
800068e2:	e0 60 02 80 	mov	r0,640
800068e6:	c1 f8       	rjmp	80006924 <Store_Image_0+0xc4>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
800068e8:	0c 9c       	mov	r12,r6
800068ea:	f0 1f 00 1e 	mcall	80006960 <Store_Image_0+0x100>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
800068ee:	ea f8 02 60 	ld.w	r8,r5[608]
800068f2:	ae 88       	st.b	r7[0x0],r8
			FIFO_0_RCLK_CLR;
800068f4:	0c 9c       	mov	r12,r6
800068f6:	f0 1f 00 1a 	mcall	8000695c <Store_Image_0+0xfc>
			FIFO_0_RCLK_SET;
800068fa:	0c 9c       	mov	r12,r6
800068fc:	f0 1f 00 19 	mcall	80006960 <Store_Image_0+0x100>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80006900:	ea f8 02 60 	ld.w	r8,r5[608]
80006904:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_0_RCLK_CLR;
80006908:	0c 9c       	mov	r12,r6
8000690a:	f0 1f 00 15 	mcall	8000695c <Store_Image_0+0xfc>
8000690e:	2f e7       	sub	r7,-2
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
80006910:	08 37       	cp.w	r7,r4
80006912:	ce b1       	brne	800068e8 <Store_Image_0+0x88>
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80006914:	00 9b       	mov	r11,r0
80006916:	1a 9c       	mov	r12,sp
80006918:	f0 1f 00 0f 	mcall	80006954 <Store_Image_0+0xf4>
	
	//enable output
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
8000691c:	2f f3       	sub	r3,-1
8000691e:	e0 43 00 f0 	cp.w	r3,240
80006922:	c0 30       	breq	80006928 <Store_Image_0+0xc8>
80006924:	04 97       	mov	r7,r2
80006926:	ce 1b       	rjmp	800068e8 <Store_Image_0+0x88>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_0_nOE_SET;
80006928:	31 cc       	mov	r12,28
8000692a:	f0 1f 00 0e 	mcall	80006960 <Store_Image_0+0x100>
	file_close();
8000692e:	f0 1f 00 0e 	mcall	80006964 <Store_Image_0+0x104>

	
}
80006932:	fe 3d fd 70 	sub	sp,-656
80006936:	d8 32       	popm	r0-r7,pc
80006938:	80 00       	ld.sh	r0,r0[0x0]
8000693a:	d6 80       	acall	0x1a0
8000693c:	80 00       	ld.sh	r0,r0[0x0]
8000693e:	5e 58       	retlt	r8
80006940:	80 00       	ld.sh	r0,r0[0x0]
80006942:	78 b4       	ld.w	r4,r12[0x2c]
80006944:	80 00       	ld.sh	r0,r0[0x0]
80006946:	5e 28       	reths	r8
80006948:	80 00       	ld.sh	r0,r0[0x0]
8000694a:	5e 70       	retpl	r0
8000694c:	80 00       	ld.sh	r0,r0[0x0]
8000694e:	5b 10       	cp.w	r0,-15
80006950:	80 00       	ld.sh	r0,r0[0x0]
80006952:	d5 f4       	*unknown*
80006954:	80 00       	ld.sh	r0,r0[0x0]
80006956:	59 9c       	cp.w	r12,25
80006958:	80 00       	ld.sh	r0,r0[0x0]
8000695a:	d6 04       	*unknown*
8000695c:	80 00       	ld.sh	r0,r0[0x0]
8000695e:	2f 92       	sub	r2,-7
80006960:	80 00       	ld.sh	r0,r0[0x0]
80006962:	2f 76       	sub	r6,-9
80006964:	80 00       	ld.sh	r0,r0[0x0]
80006966:	59 60       	cp.w	r0,22

80006968 <Store_Image_1>:

void Store_Image_1()
{
80006968:	d4 31       	pushm	r0-r7,lr
8000696a:	fa cd 02 90 	sub	sp,sp,656
	int i, j;
	uint8_t buffer[WIDTH * 2];
	char Filename_buff[15];
	//make file
	//delete file if it exits already
	nav_filelist_reset();
8000696e:	f0 1f 00 3f 	mcall	80006a68 <Store_Image_1+0x100>
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
80006972:	4b f4       	lddpc	r4,80006a6c <Store_Image_1+0x104>
80006974:	1a 95       	mov	r5,sp
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80006976:	30 03       	mov	r3,0
	//make file
	//delete file if it exits already
	nav_filelist_reset();
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
80006978:	ee c6 ff ff 	sub	r6,r7,-1
8000697c:	1a d7       	st.w	--sp,r7
8000697e:	08 9b       	mov	r11,r4
80006980:	0a 9c       	mov	r12,r5
80006982:	f0 1f 00 3c 	mcall	80006a70 <Store_Image_1+0x108>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80006986:	06 9b       	mov	r11,r3
80006988:	0a 9c       	mov	r12,r5
8000698a:	f0 1f 00 3b 	mcall	80006a74 <Store_Image_1+0x10c>
8000698e:	0c 97       	mov	r7,r6
80006990:	2f fd       	sub	sp,-4
80006992:	58 0c       	cp.w	r12,0
80006994:	cf 21       	brne	80006978 <Store_Image_1+0x10>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
80006996:	1a 9c       	mov	r12,sp
80006998:	f0 1f 00 38 	mcall	80006a78 <Store_Image_1+0x110>
	file_open(FOPEN_MODE_W);
8000699c:	30 ec       	mov	r12,14
8000699e:	f0 1f 00 38 	mcall	80006a7c <Store_Image_1+0x114>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
800069a2:	30 eb       	mov	r11,14
800069a4:	4b 7c       	lddpc	r12,80006a80 <Store_Image_1+0x118>
800069a6:	f0 1f 00 38 	mcall	80006a84 <Store_Image_1+0x11c>
	file_write_buf(DIBHead, DIBHEADERSIZE);
800069aa:	37 cb       	mov	r11,124
800069ac:	4b 7c       	lddpc	r12,80006a88 <Store_Image_1+0x120>
800069ae:	f0 1f 00 36 	mcall	80006a84 <Store_Image_1+0x11c>
	//Image1
	//reset read pointer
	FIFO_1_nRRST_CLR;
800069b2:	31 6c       	mov	r12,22
800069b4:	f0 1f 00 36 	mcall	80006a8c <Store_Image_1+0x124>
	FIFO_1_RCLK_SET;
800069b8:	31 7c       	mov	r12,23
800069ba:	f0 1f 00 36 	mcall	80006a90 <Store_Image_1+0x128>

	FIFO_1_RCLK_CLR;
800069be:	31 7c       	mov	r12,23
800069c0:	f0 1f 00 33 	mcall	80006a8c <Store_Image_1+0x124>
	FIFO_1_nRRST_SET;
800069c4:	31 6c       	mov	r12,22
800069c6:	f0 1f 00 33 	mcall	80006a90 <Store_Image_1+0x128>
	
	//enable output
	FIFO_1_nOE_CLR;
800069ca:	31 bc       	mov	r12,27
800069cc:	f0 1f 00 30 	mcall	80006a8c <Store_Image_1+0x124>
800069d0:	30 03       	mov	r3,0
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
800069d2:	fa c2 ff ef 	sub	r2,sp,-17
	file_close();

	
}

void Store_Image_1()
800069d6:	fa c4 fd 6f 	sub	r4,sp,-657
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
800069da:	31 76       	mov	r6,23
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
800069dc:	fe 75 20 00 	mov	r5,-57344
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
800069e0:	fa c1 ff f0 	sub	r1,sp,-16
800069e4:	e0 60 02 80 	mov	r0,640
800069e8:	c2 78       	rjmp	80006a36 <Store_Image_1+0xce>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
800069ea:	0c 9c       	mov	r12,r6
800069ec:	f0 1f 00 29 	mcall	80006a90 <Store_Image_1+0x128>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
800069f0:	ea f8 02 60 	ld.w	r8,r5[608]
800069f4:	ae 88       	st.b	r7[0x0],r8
			FIFO_1_RCLK_CLR;
800069f6:	0c 9c       	mov	r12,r6
800069f8:	f0 1f 00 25 	mcall	80006a8c <Store_Image_1+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800069fc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006a00:	f0 ca ff f0 	sub	r10,r8,-16
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006a04:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006a08:	14 38       	cp.w	r8,r10
80006a0a:	e0 88 00 08 	brls	80006a1a <Store_Image_1+0xb2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006a0e:	12 38       	cp.w	r8,r9
80006a10:	fe 98 ff fa 	brls	80006a04 <Store_Image_1+0x9c>
80006a14:	12 3a       	cp.w	r10,r9
80006a16:	c1 a3       	brcs	80006a4a <Store_Image_1+0xe2>
80006a18:	cf 6b       	rjmp	80006a04 <Store_Image_1+0x9c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006a1a:	12 38       	cp.w	r8,r9
80006a1c:	e0 8b 00 17 	brhi	80006a4a <Store_Image_1+0xe2>
80006a20:	12 3a       	cp.w	r10,r9
80006a22:	c1 43       	brcs	80006a4a <Store_Image_1+0xe2>
80006a24:	cf 0b       	rjmp	80006a04 <Store_Image_1+0x9c>
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80006a26:	00 9b       	mov	r11,r0
80006a28:	02 9c       	mov	r12,r1
80006a2a:	f0 1f 00 17 	mcall	80006a84 <Store_Image_1+0x11c>
	
	//enable output
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
80006a2e:	2f f3       	sub	r3,-1
80006a30:	e0 43 00 f0 	cp.w	r3,240
80006a34:	c0 30       	breq	80006a3a <Store_Image_1+0xd2>
80006a36:	04 97       	mov	r7,r2
80006a38:	cd 9b       	rjmp	800069ea <Store_Image_1+0x82>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_1_nOE_SET;//disable output
80006a3a:	31 bc       	mov	r12,27
80006a3c:	f0 1f 00 15 	mcall	80006a90 <Store_Image_1+0x128>
	file_close();
80006a40:	f0 1f 00 15 	mcall	80006a94 <Store_Image_1+0x12c>
80006a44:	fe 3d fd 70 	sub	sp,-656
80006a48:	d8 32       	popm	r0-r7,pc
		{
			FIFO_1_RCLK_SET;
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
			delay_us(1);
			FIFO_1_RCLK_SET;
80006a4a:	0c 9c       	mov	r12,r6
80006a4c:	f0 1f 00 11 	mcall	80006a90 <Store_Image_1+0x128>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80006a50:	ea f8 02 60 	ld.w	r8,r5[608]
80006a54:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_1_RCLK_CLR;
80006a58:	0c 9c       	mov	r12,r6
80006a5a:	f0 1f 00 0d 	mcall	80006a8c <Store_Image_1+0x124>
80006a5e:	2f e7       	sub	r7,-2
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
80006a60:	08 37       	cp.w	r7,r4
80006a62:	cc 41       	brne	800069ea <Store_Image_1+0x82>
80006a64:	ce 1b       	rjmp	80006a26 <Store_Image_1+0xbe>
80006a66:	00 00       	add	r0,r0
80006a68:	80 00       	ld.sh	r0,r0[0x0]
80006a6a:	5e 58       	retlt	r8
80006a6c:	80 00       	ld.sh	r0,r0[0x0]
80006a6e:	d6 90       	acall	0x1a4
80006a70:	80 00       	ld.sh	r0,r0[0x0]
80006a72:	78 b4       	ld.w	r4,r12[0x2c]
80006a74:	80 00       	ld.sh	r0,r0[0x0]
80006a76:	5e 28       	reths	r8
80006a78:	80 00       	ld.sh	r0,r0[0x0]
80006a7a:	5e 70       	retpl	r0
80006a7c:	80 00       	ld.sh	r0,r0[0x0]
80006a7e:	5b 10       	cp.w	r0,-15
80006a80:	80 00       	ld.sh	r0,r0[0x0]
80006a82:	d5 f4       	*unknown*
80006a84:	80 00       	ld.sh	r0,r0[0x0]
80006a86:	59 9c       	cp.w	r12,25
80006a88:	80 00       	ld.sh	r0,r0[0x0]
80006a8a:	d6 04       	*unknown*
80006a8c:	80 00       	ld.sh	r0,r0[0x0]
80006a8e:	2f 92       	sub	r2,-7
80006a90:	80 00       	ld.sh	r0,r0[0x0]
80006a92:	2f 76       	sub	r6,-9
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	59 60       	cp.w	r0,22

80006a98 <Store_Both_Images>:
}



bool Store_Both_Images()
{
80006a98:	d4 01       	pushm	lr
	if(Photos_Ready() == false)
80006a9a:	f0 1f 00 08 	mcall	80006ab8 <Store_Both_Images+0x20>
80006a9e:	c0 c0       	breq	80006ab6 <Store_Both_Images+0x1e>
		return false;
	Store_Image_0();
80006aa0:	f0 1f 00 07 	mcall	80006abc <Store_Both_Images+0x24>
	FIFO_Reset(CAMERA_LEFT);
80006aa4:	30 1c       	mov	r12,1
80006aa6:	f0 1f 00 07 	mcall	80006ac0 <Store_Both_Images+0x28>
	Store_Image_1();
80006aaa:	f0 1f 00 07 	mcall	80006ac4 <Store_Both_Images+0x2c>
	FIFO_Reset(CAMERA_RIGHT);
80006aae:	30 2c       	mov	r12,2
80006ab0:	f0 1f 00 04 	mcall	80006ac0 <Store_Both_Images+0x28>
80006ab4:	30 1c       	mov	r12,1
	return true;
}
80006ab6:	d8 02       	popm	pc
80006ab8:	80 00       	ld.sh	r0,r0[0x0]
80006aba:	67 8c       	ld.w	r12,r3[0x60]
80006abc:	80 00       	ld.sh	r0,r0[0x0]
80006abe:	68 60       	ld.w	r0,r4[0x18]
80006ac0:	80 00       	ld.sh	r0,r0[0x0]
80006ac2:	67 ec       	ld.w	r12,r3[0x78]
80006ac4:	80 00       	ld.sh	r0,r0[0x0]
80006ac6:	69 68       	ld.w	r8,r4[0x58]

80006ac8 <FIFO_Init>:
	FIFO_Init();
	Enable_global_interrupt();
	
}
void FIFO_Init()
{
80006ac8:	d4 01       	pushm	lr
	//Disable both outputs
	FIFO_0_nOE_SET
80006aca:	31 cc       	mov	r12,28
80006acc:	f0 1f 00 97 	mcall	80006d28 <FIFO_Init+0x260>
	FIFO_1_nOE_SET
80006ad0:	31 bc       	mov	r12,27
80006ad2:	f0 1f 00 96 	mcall	80006d28 <FIFO_Init+0x260>
	
	//Reset Buffer 0
	FIFO_0_WRST_CLR;
80006ad6:	31 5c       	mov	r12,21
80006ad8:	f0 1f 00 95 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_0_RCLK_CLR;
80006adc:	31 3c       	mov	r12,19
80006ade:	f0 1f 00 94 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
80006ae2:	30 fc       	mov	r12,15
80006ae4:	f0 1f 00 91 	mcall	80006d28 <FIFO_Init+0x260>
	FIFO_0_WEN_CLR;
80006ae8:	31 4c       	mov	r12,20
80006aea:	f0 1f 00 91 	mcall	80006d2c <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006aee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006af2:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006af6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006afa:	14 38       	cp.w	r8,r10
80006afc:	e0 88 00 09 	brls	80006b0e <FIFO_Init+0x46>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006b00:	12 38       	cp.w	r8,r9
80006b02:	fe 98 ff fa 	brls	80006af6 <FIFO_Init+0x2e>
80006b06:	12 3a       	cp.w	r10,r9
80006b08:	e0 83 00 ac 	brlo	80006c60 <FIFO_Init+0x198>
80006b0c:	cf 5b       	rjmp	80006af6 <FIFO_Init+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006b0e:	12 38       	cp.w	r8,r9
80006b10:	e0 8b 00 a8 	brhi	80006c60 <FIFO_Init+0x198>
80006b14:	12 3a       	cp.w	r10,r9
80006b16:	e0 83 00 a5 	brlo	80006c60 <FIFO_Init+0x198>
80006b1a:	ce eb       	rjmp	80006af6 <FIFO_Init+0x2e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006b1c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006b20:	14 38       	cp.w	r8,r10
80006b22:	e0 88 00 09 	brls	80006b34 <FIFO_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006b26:	12 38       	cp.w	r8,r9
80006b28:	fe 98 ff fa 	brls	80006b1c <FIFO_Init+0x54>
80006b2c:	12 3a       	cp.w	r10,r9
80006b2e:	e0 83 00 a1 	brlo	80006c70 <FIFO_Init+0x1a8>
80006b32:	cf 5b       	rjmp	80006b1c <FIFO_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006b34:	12 38       	cp.w	r8,r9
80006b36:	e0 8b 00 9d 	brhi	80006c70 <FIFO_Init+0x1a8>
80006b3a:	12 3a       	cp.w	r10,r9
80006b3c:	e0 83 00 9a 	brlo	80006c70 <FIFO_Init+0x1a8>
80006b40:	ce eb       	rjmp	80006b1c <FIFO_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006b42:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006b46:	14 38       	cp.w	r8,r10
80006b48:	e0 88 00 09 	brls	80006b5a <FIFO_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006b4c:	12 38       	cp.w	r8,r9
80006b4e:	fe 98 ff fa 	brls	80006b42 <FIFO_Init+0x7a>
80006b52:	12 3a       	cp.w	r10,r9
80006b54:	e0 83 00 99 	brlo	80006c86 <FIFO_Init+0x1be>
80006b58:	cf 5b       	rjmp	80006b42 <FIFO_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006b5a:	12 38       	cp.w	r8,r9
80006b5c:	e0 8b 00 95 	brhi	80006c86 <FIFO_Init+0x1be>
80006b60:	12 3a       	cp.w	r10,r9
80006b62:	e0 83 00 92 	brlo	80006c86 <FIFO_Init+0x1be>
80006b66:	ce eb       	rjmp	80006b42 <FIFO_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006b68:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006b6c:	14 38       	cp.w	r8,r10
80006b6e:	e0 88 00 09 	brls	80006b80 <FIFO_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006b72:	12 38       	cp.w	r8,r9
80006b74:	fe 98 ff fa 	brls	80006b68 <FIFO_Init+0xa0>
80006b78:	12 3a       	cp.w	r10,r9
80006b7a:	e0 83 00 8e 	brlo	80006c96 <FIFO_Init+0x1ce>
80006b7e:	cf 5b       	rjmp	80006b68 <FIFO_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006b80:	12 38       	cp.w	r8,r9
80006b82:	e0 8b 00 8a 	brhi	80006c96 <FIFO_Init+0x1ce>
80006b86:	12 3a       	cp.w	r10,r9
80006b88:	e0 83 00 87 	brlo	80006c96 <FIFO_Init+0x1ce>
80006b8c:	ce eb       	rjmp	80006b68 <FIFO_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006b8e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006b92:	14 38       	cp.w	r8,r10
80006b94:	e0 88 00 09 	brls	80006ba6 <FIFO_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006b98:	12 38       	cp.w	r8,r9
80006b9a:	fe 98 ff fa 	brls	80006b8e <FIFO_Init+0xc6>
80006b9e:	12 3a       	cp.w	r10,r9
80006ba0:	e0 83 00 86 	brlo	80006cac <FIFO_Init+0x1e4>
80006ba4:	cf 5b       	rjmp	80006b8e <FIFO_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006ba6:	12 38       	cp.w	r8,r9
80006ba8:	e0 8b 00 82 	brhi	80006cac <FIFO_Init+0x1e4>
80006bac:	12 3a       	cp.w	r10,r9
80006bae:	c7 f3       	brcs	80006cac <FIFO_Init+0x1e4>
80006bb0:	ce fb       	rjmp	80006b8e <FIFO_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006bb2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006bb6:	14 38       	cp.w	r8,r10
80006bb8:	e0 88 00 09 	brls	80006bca <FIFO_Init+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006bbc:	12 38       	cp.w	r8,r9
80006bbe:	fe 98 ff fa 	brls	80006bb2 <FIFO_Init+0xea>
80006bc2:	12 3a       	cp.w	r10,r9
80006bc4:	e0 83 00 88 	brlo	80006cd4 <FIFO_Init+0x20c>
80006bc8:	cf 5b       	rjmp	80006bb2 <FIFO_Init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006bca:	12 38       	cp.w	r8,r9
80006bcc:	e0 8b 00 84 	brhi	80006cd4 <FIFO_Init+0x20c>
80006bd0:	12 3a       	cp.w	r10,r9
80006bd2:	e0 83 00 81 	brlo	80006cd4 <FIFO_Init+0x20c>
80006bd6:	ce eb       	rjmp	80006bb2 <FIFO_Init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006bd8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006bdc:	14 38       	cp.w	r8,r10
80006bde:	e0 88 00 08 	brls	80006bee <FIFO_Init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006be2:	12 38       	cp.w	r8,r9
80006be4:	fe 98 ff fa 	brls	80006bd8 <FIFO_Init+0x110>
80006be8:	12 3a       	cp.w	r10,r9
80006bea:	c7 d3       	brcs	80006ce4 <FIFO_Init+0x21c>
80006bec:	cf 6b       	rjmp	80006bd8 <FIFO_Init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006bee:	12 38       	cp.w	r8,r9
80006bf0:	e0 8b 00 7a 	brhi	80006ce4 <FIFO_Init+0x21c>
80006bf4:	12 3a       	cp.w	r10,r9
80006bf6:	c7 73       	brcs	80006ce4 <FIFO_Init+0x21c>
80006bf8:	cf 0b       	rjmp	80006bd8 <FIFO_Init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006bfa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006bfe:	14 38       	cp.w	r8,r10
80006c00:	e0 88 00 08 	brls	80006c10 <FIFO_Init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006c04:	12 38       	cp.w	r8,r9
80006c06:	fe 98 ff fa 	brls	80006bfa <FIFO_Init+0x132>
80006c0a:	12 3a       	cp.w	r10,r9
80006c0c:	c7 73       	brcs	80006cfa <FIFO_Init+0x232>
80006c0e:	cf 6b       	rjmp	80006bfa <FIFO_Init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006c10:	12 38       	cp.w	r8,r9
80006c12:	e0 8b 00 74 	brhi	80006cfa <FIFO_Init+0x232>
80006c16:	12 3a       	cp.w	r10,r9
80006c18:	c7 13       	brcs	80006cfa <FIFO_Init+0x232>
80006c1a:	cf 0b       	rjmp	80006bfa <FIFO_Init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006c1c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006c20:	14 38       	cp.w	r8,r10
80006c22:	e0 88 00 08 	brls	80006c32 <FIFO_Init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006c26:	12 38       	cp.w	r8,r9
80006c28:	fe 98 ff fa 	brls	80006c1c <FIFO_Init+0x154>
80006c2c:	12 3a       	cp.w	r10,r9
80006c2e:	c6 e3       	brcs	80006d0a <FIFO_Init+0x242>
80006c30:	cf 6b       	rjmp	80006c1c <FIFO_Init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006c32:	12 38       	cp.w	r8,r9
80006c34:	e0 8b 00 6b 	brhi	80006d0a <FIFO_Init+0x242>
80006c38:	12 3a       	cp.w	r10,r9
80006c3a:	c6 83       	brcs	80006d0a <FIFO_Init+0x242>
80006c3c:	cf 0b       	rjmp	80006c1c <FIFO_Init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006c3e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006c42:	14 38       	cp.w	r8,r10
80006c44:	e0 88 00 08 	brls	80006c54 <FIFO_Init+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006c48:	12 38       	cp.w	r8,r9
80006c4a:	fe 98 ff fa 	brls	80006c3e <FIFO_Init+0x176>
80006c4e:	12 3a       	cp.w	r10,r9
80006c50:	c6 83       	brcs	80006d20 <FIFO_Init+0x258>
80006c52:	cf 6b       	rjmp	80006c3e <FIFO_Init+0x176>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006c54:	12 38       	cp.w	r8,r9
80006c56:	e0 8b 00 65 	brhi	80006d20 <FIFO_Init+0x258>
80006c5a:	12 3a       	cp.w	r10,r9
80006c5c:	c6 23       	brcs	80006d20 <FIFO_Init+0x258>
80006c5e:	cf 0b       	rjmp	80006c3e <FIFO_Init+0x176>
	delay_us(10);
	FIFO_0_RCLK_SET;
80006c60:	31 3c       	mov	r12,19
80006c62:	f0 1f 00 32 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006c66:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006c6a:	f0 ca ff 60 	sub	r10,r8,-160
80006c6e:	c5 7b       	rjmp	80006b1c <FIFO_Init+0x54>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80006c70:	31 3c       	mov	r12,19
80006c72:	f0 1f 00 2f 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_0_nRRST_CLR;
80006c76:	30 fc       	mov	r12,15
80006c78:	f0 1f 00 2d 	mcall	80006d2c <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006c7c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006c80:	f0 ca ff 60 	sub	r10,r8,-160
80006c84:	c5 fb       	rjmp	80006b42 <FIFO_Init+0x7a>
	delay_us(10);
	FIFO_0_RCLK_SET;
80006c86:	31 3c       	mov	r12,19
80006c88:	f0 1f 00 28 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006c8c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006c90:	f0 ca ff 60 	sub	r10,r8,-160
80006c94:	c6 ab       	rjmp	80006b68 <FIFO_Init+0xa0>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80006c96:	31 3c       	mov	r12,19
80006c98:	f0 1f 00 25 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
80006c9c:	30 fc       	mov	r12,15
80006c9e:	f0 1f 00 23 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006ca2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006ca6:	f0 ca ff 60 	sub	r10,r8,-160
80006caa:	c7 2b       	rjmp	80006b8e <FIFO_Init+0xc6>
	delay_us(10);
	FIFO_0_WRST_SET;
80006cac:	31 5c       	mov	r12,21
80006cae:	f0 1f 00 1f 	mcall	80006d28 <FIFO_Init+0x260>
	
	//Reset Buffer 1
	FIFO_1_WRST_CLR;
80006cb2:	31 9c       	mov	r12,25
80006cb4:	f0 1f 00 1e 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_1_RCLK_CLR;
80006cb8:	31 7c       	mov	r12,23
80006cba:	f0 1f 00 1d 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
80006cbe:	31 6c       	mov	r12,22
80006cc0:	f0 1f 00 1a 	mcall	80006d28 <FIFO_Init+0x260>
	FIFO_1_WEN_CLR;
80006cc4:	31 8c       	mov	r12,24
80006cc6:	f0 1f 00 1a 	mcall	80006d2c <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006cca:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006cce:	f0 ca ff 60 	sub	r10,r8,-160
80006cd2:	c7 0b       	rjmp	80006bb2 <FIFO_Init+0xea>
	delay_us(10);
	FIFO_1_RCLK_SET;
80006cd4:	31 7c       	mov	r12,23
80006cd6:	f0 1f 00 15 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006cda:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006cde:	f0 ca ff 60 	sub	r10,r8,-160
80006ce2:	c7 bb       	rjmp	80006bd8 <FIFO_Init+0x110>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80006ce4:	31 3c       	mov	r12,19
80006ce6:	f0 1f 00 12 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_1_nRRST_CLR;
80006cea:	31 6c       	mov	r12,22
80006cec:	f0 1f 00 10 	mcall	80006d2c <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006cf0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006cf4:	f0 ca ff 60 	sub	r10,r8,-160
80006cf8:	c8 1b       	rjmp	80006bfa <FIFO_Init+0x132>
	delay_us(10);
	FIFO_1_RCLK_SET;
80006cfa:	31 7c       	mov	r12,23
80006cfc:	f0 1f 00 0b 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006d00:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006d04:	f0 ca ff 60 	sub	r10,r8,-160
80006d08:	c8 ab       	rjmp	80006c1c <FIFO_Init+0x154>
	delay_us(10);
	FIFO_1_RCLK_CLR;
80006d0a:	31 7c       	mov	r12,23
80006d0c:	f0 1f 00 08 	mcall	80006d2c <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
80006d10:	31 6c       	mov	r12,22
80006d12:	f0 1f 00 06 	mcall	80006d28 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006d16:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006d1a:	f0 ca ff 60 	sub	r10,r8,-160
80006d1e:	c9 0b       	rjmp	80006c3e <FIFO_Init+0x176>
	delay_us(10);
	FIFO_1_WRST_SET;
80006d20:	31 9c       	mov	r12,25
80006d22:	f0 1f 00 02 	mcall	80006d28 <FIFO_Init+0x260>
}
80006d26:	d8 02       	popm	pc
80006d28:	80 00       	ld.sh	r0,r0[0x0]
80006d2a:	2f 76       	sub	r6,-9
80006d2c:	80 00       	ld.sh	r0,r0[0x0]
80006d2e:	2f 92       	sub	r2,-7

80006d30 <VSYNC0_Handler>:
// /*#include "CustomDevices/MotorDriver.h"*/
// SDCard
// #include "CustomDevices/SD_Card.h"

__attribute__((__interrupt__)) static void VSYNC0_Handler (void)
{
80006d30:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC0 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
80006d32:	30 4b       	mov	r11,4
80006d34:	fe 7c 14 00 	mov	r12,-60416
80006d38:	f0 1f 00 15 	mcall	80006d8c <VSYNC0_Handler+0x5c>
	//VSYNC_0_DISABLE_INTERRUPT;
	switch(OV7670_Status.VSYNC0_State)
80006d3c:	49 58       	lddpc	r8,80006d90 <VSYNC0_Handler+0x60>
80006d3e:	11 d8       	ld.ub	r8,r8[0x5]
80006d40:	30 29       	mov	r9,2
80006d42:	f2 08 18 00 	cp.b	r8,r9
80006d46:	c1 00       	breq	80006d66 <VSYNC0_Handler+0x36>
80006d48:	30 39       	mov	r9,3
80006d4a:	f2 08 18 00 	cp.b	r8,r9
80006d4e:	c1 30       	breq	80006d74 <VSYNC0_Handler+0x44>
80006d50:	30 19       	mov	r9,1
80006d52:	f2 08 18 00 	cp.b	r8,r9
80006d56:	c1 31       	brne	80006d7c <VSYNC0_Handler+0x4c>
	{
		case(TAKE_PHOTO):
			FIFO_0_WEN_SET;
80006d58:	31 4c       	mov	r12,20
80006d5a:	f0 1f 00 0f 	mcall	80006d94 <VSYNC0_Handler+0x64>
			OV7670_Status.VSYNC0_State = TAKING_PHOTO;
80006d5e:	30 29       	mov	r9,2
80006d60:	48 c8       	lddpc	r8,80006d90 <VSYNC0_Handler+0x60>
80006d62:	b0 d9       	st.b	r8[0x5],r9
			break;
80006d64:	c1 28       	rjmp	80006d88 <VSYNC0_Handler+0x58>
			
		case(TAKING_PHOTO):
			FIFO_0_WEN_CLR;
80006d66:	31 4c       	mov	r12,20
80006d68:	f0 1f 00 0c 	mcall	80006d98 <VSYNC0_Handler+0x68>
			OV7670_Status.VSYNC0_State = TAKEN_PHOTO;
80006d6c:	30 39       	mov	r9,3
80006d6e:	48 98       	lddpc	r8,80006d90 <VSYNC0_Handler+0x60>
80006d70:	b0 d9       	st.b	r8[0x5],r9
			break;
80006d72:	c0 b8       	rjmp	80006d88 <VSYNC0_Handler+0x58>
		
		case (TAKEN_PHOTO):
			FIFO_0_WEN_CLR;
80006d74:	31 4c       	mov	r12,20
80006d76:	f0 1f 00 09 	mcall	80006d98 <VSYNC0_Handler+0x68>
			break;
80006d7a:	c0 78       	rjmp	80006d88 <VSYNC0_Handler+0x58>
			
		case(IDLE):
		default:
			FIFO_0_WEN_CLR;
80006d7c:	31 4c       	mov	r12,20
80006d7e:	f0 1f 00 07 	mcall	80006d98 <VSYNC0_Handler+0x68>
			OV7670_Status.VSYNC0_State = IDLE;
80006d82:	30 09       	mov	r9,0
80006d84:	48 38       	lddpc	r8,80006d90 <VSYNC0_Handler+0x60>
80006d86:	b0 d9       	st.b	r8[0x5],r9
			break;
	}
}
80006d88:	d4 02       	popm	lr
80006d8a:	d6 03       	rete
80006d8c:	80 00       	ld.sh	r0,r0[0x0]
80006d8e:	2d b4       	sub	r4,-37
80006d90:	00 00       	add	r0,r0
80006d92:	0c a8       	st.w	r6++,r8
80006d94:	80 00       	ld.sh	r0,r0[0x0]
80006d96:	2f 76       	sub	r6,-9
80006d98:	80 00       	ld.sh	r0,r0[0x0]
80006d9a:	2f 92       	sub	r2,-7

80006d9c <VSYNC1_Handler>:

__attribute__((__interrupt__)) static void VSYNC1_Handler (void)
{
80006d9c:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC1 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
80006d9e:	30 1b       	mov	r11,1
80006da0:	fe 7c 14 00 	mov	r12,-60416
80006da4:	f0 1f 00 15 	mcall	80006df8 <VSYNC1_Handler+0x5c>
	//VSYNC_1_DISABLE_INTERRUPT;
		switch(OV7670_Status.VSYNC1_State)
80006da8:	49 58       	lddpc	r8,80006dfc <VSYNC1_Handler+0x60>
80006daa:	11 e8       	ld.ub	r8,r8[0x6]
80006dac:	30 29       	mov	r9,2
80006dae:	f2 08 18 00 	cp.b	r8,r9
80006db2:	c1 00       	breq	80006dd2 <VSYNC1_Handler+0x36>
80006db4:	30 39       	mov	r9,3
80006db6:	f2 08 18 00 	cp.b	r8,r9
80006dba:	c1 30       	breq	80006de0 <VSYNC1_Handler+0x44>
80006dbc:	30 19       	mov	r9,1
80006dbe:	f2 08 18 00 	cp.b	r8,r9
80006dc2:	c1 31       	brne	80006de8 <VSYNC1_Handler+0x4c>
		{
			case(TAKE_PHOTO):
			FIFO_1_WEN_SET;
80006dc4:	31 8c       	mov	r12,24
80006dc6:	f0 1f 00 0f 	mcall	80006e00 <VSYNC1_Handler+0x64>
			OV7670_Status.VSYNC1_State = TAKING_PHOTO;
80006dca:	30 29       	mov	r9,2
80006dcc:	48 c8       	lddpc	r8,80006dfc <VSYNC1_Handler+0x60>
80006dce:	b0 e9       	st.b	r8[0x6],r9
			break;
80006dd0:	c1 28       	rjmp	80006df4 <VSYNC1_Handler+0x58>
			
			case(TAKING_PHOTO):
			FIFO_1_WEN_CLR;
80006dd2:	31 8c       	mov	r12,24
80006dd4:	f0 1f 00 0c 	mcall	80006e04 <VSYNC1_Handler+0x68>
			OV7670_Status.VSYNC1_State = TAKEN_PHOTO;
80006dd8:	30 39       	mov	r9,3
80006dda:	48 98       	lddpc	r8,80006dfc <VSYNC1_Handler+0x60>
80006ddc:	b0 e9       	st.b	r8[0x6],r9
			break;
80006dde:	c0 b8       	rjmp	80006df4 <VSYNC1_Handler+0x58>
			
			case (TAKEN_PHOTO):
			FIFO_1_WEN_CLR;
80006de0:	31 8c       	mov	r12,24
80006de2:	f0 1f 00 09 	mcall	80006e04 <VSYNC1_Handler+0x68>
			break;
80006de6:	c0 78       	rjmp	80006df4 <VSYNC1_Handler+0x58>
			
			case(IDLE):
			default:
			FIFO_1_WEN_CLR;
80006de8:	31 8c       	mov	r12,24
80006dea:	f0 1f 00 07 	mcall	80006e04 <VSYNC1_Handler+0x68>
			OV7670_Status.VSYNC1_State = IDLE;
80006dee:	30 09       	mov	r9,0
80006df0:	48 38       	lddpc	r8,80006dfc <VSYNC1_Handler+0x60>
80006df2:	b0 e9       	st.b	r8[0x6],r9
			break;
		}
}
80006df4:	d4 02       	popm	lr
80006df6:	d6 03       	rete
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	2d b4       	sub	r4,-37
80006dfc:	00 00       	add	r0,r0
80006dfe:	0c a8       	st.w	r6++,r8
80006e00:	80 00       	ld.sh	r0,r0[0x0]
80006e02:	2f 76       	sub	r6,-9
80006e04:	80 00       	ld.sh	r0,r0[0x0]
80006e06:	2f 92       	sub	r2,-7

80006e08 <Write_Reg>:
unsigned char Write_Reg(unsigned char Register, unsigned char Data)
{
80006e08:	d4 01       	pushm	lr
80006e0a:	20 1d       	sub	sp,4
	/*	I2C Traffic Generated:
	 *	S | OV_7670 + W | A | RegID | A | Data | A | P |
	 */
	uint8_t Buff[2] = {Register, Data};
80006e0c:	ba 8c       	st.b	sp[0x0],r12
80006e0e:	ba 9b       	st.b	sp[0x1],r11
	int status = twim_write(&AVR32_TWIM0, &Buff, 2, OV7670_ADDR, false);
80006e10:	30 08       	mov	r8,0
80006e12:	32 19       	mov	r9,33
80006e14:	30 2a       	mov	r10,2
80006e16:	1a 9b       	mov	r11,sp
80006e18:	fe 7c 38 00 	mov	r12,-51200
80006e1c:	f0 1f 00 03 	mcall	80006e28 <Write_Reg+0x20>
	return status;
}
80006e20:	5c 5c       	castu.b	r12
80006e22:	2f fd       	sub	sp,-4
80006e24:	d8 02       	popm	pc
80006e26:	00 00       	add	r0,r0
80006e28:	80 00       	ld.sh	r0,r0[0x0]
80006e2a:	35 a0       	mov	r0,90

80006e2c <OV7670_Init>:
	
	return status;
	
}
void OV7670_Init()
{
80006e2c:	eb cd 40 c0 	pushm	r6-r7,lr
80006e30:	20 2d       	sub	sp,8
	
	//Check Cameras Exist
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80006e32:	30 4c       	mov	r12,4
80006e34:	f0 1f 00 95 	mcall	80007088 <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80006e38:	32 1b       	mov	r11,33
80006e3a:	fe 7c 38 00 	mov	r12,-51200
80006e3e:	f0 1f 00 94 	mcall	8000708c <OV7670_Init+0x260>
80006e42:	c0 61       	brne	80006e4e <OV7670_Init+0x22>
		OV7670_Status.Camera_0_Found = true;
80006e44:	30 19       	mov	r9,1
80006e46:	fe f8 02 4a 	ld.w	r8,pc[586]
80006e4a:	b0 99       	st.b	r8[0x1],r9
80006e4c:	c0 58       	rjmp	80006e56 <OV7670_Init+0x2a>
	else
		OV7670_Status.Camera_0_Found = false;
80006e4e:	30 09       	mov	r9,0
80006e50:	fe f8 02 40 	ld.w	r8,pc[576]
80006e54:	b0 99       	st.b	r8[0x1],r9
		
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80006e56:	30 5c       	mov	r12,5
80006e58:	f0 1f 00 8c 	mcall	80007088 <OV7670_Init+0x25c>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80006e5c:	32 1b       	mov	r11,33
80006e5e:	fe 7c 38 00 	mov	r12,-51200
80006e62:	f0 1f 00 8b 	mcall	8000708c <OV7670_Init+0x260>
80006e66:	c0 61       	brne	80006e72 <OV7670_Init+0x46>
		OV7670_Status.Camera_1_Found = true;
80006e68:	30 19       	mov	r9,1
80006e6a:	fe f8 02 26 	ld.w	r8,pc[550]
80006e6e:	b0 a9       	st.b	r8[0x2],r9
80006e70:	c0 58       	rjmp	80006e7a <OV7670_Init+0x4e>
	else
		OV7670_Status.Camera_1_Found = false;
80006e72:	30 09       	mov	r9,0
80006e74:	fe f8 02 1c 	ld.w	r8,pc[540]
80006e78:	b0 a9       	st.b	r8[0x2],r9
		
	
	//Iniialise Cameras
	if(OV7670_Status.Camera_0_Found)
80006e7a:	fe f8 02 16 	ld.w	r8,pc[534]
80006e7e:	11 99       	ld.ub	r9,r8[0x1]
80006e80:	30 08       	mov	r8,0
80006e82:	f0 09 18 00 	cp.b	r9,r8
80006e86:	c5 40       	breq	80006f2e <OV7670_Init+0x102>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80006e88:	30 4c       	mov	r12,4
80006e8a:	f0 1f 00 80 	mcall	80007088 <OV7670_Init+0x25c>
		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
80006e8e:	e0 6b 00 80 	mov	r11,128
80006e92:	31 2c       	mov	r12,18
80006e94:	f0 1f 00 80 	mcall	80007094 <OV7670_Init+0x268>
80006e98:	c0 90       	breq	80006eaa <OV7670_Init+0x7e>
		{
			print_dbg("\n\rCamera Reset Fail");
80006e9a:	fe fc 01 fe 	ld.w	r12,pc[510]
80006e9e:	f0 1f 00 80 	mcall	8000709c <OV7670_Init+0x270>
			OV7670_Status.Camera_0_Error = true;
80006ea2:	4f c8       	lddpc	r8,80007090 <OV7670_Init+0x264>
80006ea4:	30 19       	mov	r9,1
80006ea6:	b0 b9       	st.b	r8[0x3],r9
			OV7670_Status.Error = true;
80006ea8:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006eaa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006eae:	e2 69 71 00 	mov	r9,160000
80006eb2:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006eb6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006eba:	14 38       	cp.w	r8,r10
80006ebc:	e0 88 00 08 	brls	80006ecc <OV7670_Init+0xa0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006ec0:	12 38       	cp.w	r8,r9
80006ec2:	fe 98 ff fa 	brls	80006eb6 <OV7670_Init+0x8a>
80006ec6:	12 3a       	cp.w	r10,r9
80006ec8:	c0 53       	brcs	80006ed2 <OV7670_Init+0xa6>
80006eca:	cf 6b       	rjmp	80006eb6 <OV7670_Init+0x8a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006ecc:	12 38       	cp.w	r8,r9
80006ece:	e0 88 00 08 	brls	80006ede <OV7670_Init+0xb2>
80006ed2:	4f 46       	lddpc	r6,800070a0 <OV7670_Init+0x274>
80006ed4:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80006ed8:	ec c6 fe b1 	sub	r6,r6,-335
80006edc:	c0 48       	rjmp	80006ee4 <OV7670_Init+0xb8>
80006ede:	12 3a       	cp.w	r10,r9
80006ee0:	cf 93       	brcs	80006ed2 <OV7670_Init+0xa6>
80006ee2:	ce ab       	rjmp	80006eb6 <OV7670_Init+0x8a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
80006ee4:	0f 8b       	ld.ub	r11,r7[0x0]
80006ee6:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80006eea:	f0 1f 00 6b 	mcall	80007094 <OV7670_Init+0x268>
80006eee:	c0 90       	breq	80006f00 <OV7670_Init+0xd4>
			{
				print_dbg("\n\rCamera Initialise Fail");
80006ef0:	4e dc       	lddpc	r12,800070a4 <OV7670_Init+0x278>
80006ef2:	f0 1f 00 6b 	mcall	8000709c <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_0_Error = true;	
80006ef6:	4e 78       	lddpc	r8,80007090 <OV7670_Init+0x264>
80006ef8:	30 19       	mov	r9,1
80006efa:	b0 b9       	st.b	r8[0x3],r9
				OV7670_Status.Error = true;	
80006efc:	b0 89       	st.b	r8[0x0],r9
				break;
80006efe:	c1 88       	rjmp	80006f2e <OV7670_Init+0x102>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006f00:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006f04:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006f08:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006f0c:	14 38       	cp.w	r8,r10
80006f0e:	e0 88 00 09 	brls	80006f20 <OV7670_Init+0xf4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006f12:	12 38       	cp.w	r8,r9
80006f14:	fe 98 ff fa 	brls	80006f08 <OV7670_Init+0xdc>
80006f18:	12 3a       	cp.w	r10,r9
80006f1a:	e0 83 00 ae 	brlo	80007076 <OV7670_Init+0x24a>
80006f1e:	cf 5b       	rjmp	80006f08 <OV7670_Init+0xdc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006f20:	12 38       	cp.w	r8,r9
80006f22:	e0 8b 00 aa 	brhi	80007076 <OV7670_Init+0x24a>
80006f26:	12 3a       	cp.w	r10,r9
80006f28:	e0 83 00 a7 	brlo	80007076 <OV7670_Init+0x24a>
80006f2c:	ce eb       	rjmp	80006f08 <OV7670_Init+0xdc>
			}
			delay_ms(1);
		}	
	}
	if(OV7670_Status.Camera_1_Found)
80006f2e:	4d 98       	lddpc	r8,80007090 <OV7670_Init+0x264>
80006f30:	11 a9       	ld.ub	r9,r8[0x2]
80006f32:	30 08       	mov	r8,0
80006f34:	f0 09 18 00 	cp.b	r9,r8
80006f38:	c5 10       	breq	80006fda <OV7670_Init+0x1ae>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80006f3a:	30 5c       	mov	r12,5
80006f3c:	f0 1f 00 53 	mcall	80007088 <OV7670_Init+0x25c>

		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
80006f40:	e0 6b 00 80 	mov	r11,128
80006f44:	31 2c       	mov	r12,18
80006f46:	f0 1f 00 54 	mcall	80007094 <OV7670_Init+0x268>
80006f4a:	c0 80       	breq	80006f5a <OV7670_Init+0x12e>
		{
			print_dbg("\n\rCamera Reset Fail");
80006f4c:	4d 3c       	lddpc	r12,80007098 <OV7670_Init+0x26c>
80006f4e:	f0 1f 00 54 	mcall	8000709c <OV7670_Init+0x270>
			OV7670_Status.Camera_1_Error = true;
80006f52:	4d 08       	lddpc	r8,80007090 <OV7670_Init+0x264>
80006f54:	30 19       	mov	r9,1
80006f56:	b0 c9       	st.b	r8[0x4],r9
			OV7670_Status.Error = true;
80006f58:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006f5a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006f5e:	e2 69 71 00 	mov	r9,160000
80006f62:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006f66:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006f6a:	14 38       	cp.w	r8,r10
80006f6c:	e0 88 00 08 	brls	80006f7c <OV7670_Init+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006f70:	12 38       	cp.w	r8,r9
80006f72:	fe 98 ff fa 	brls	80006f66 <OV7670_Init+0x13a>
80006f76:	12 3a       	cp.w	r10,r9
80006f78:	c0 53       	brcs	80006f82 <OV7670_Init+0x156>
80006f7a:	cf 6b       	rjmp	80006f66 <OV7670_Init+0x13a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006f7c:	12 38       	cp.w	r8,r9
80006f7e:	e0 88 00 08 	brls	80006f8e <OV7670_Init+0x162>
80006f82:	4c 86       	lddpc	r6,800070a0 <OV7670_Init+0x274>
80006f84:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80006f88:	ec c6 fe b1 	sub	r6,r6,-335
80006f8c:	c0 48       	rjmp	80006f94 <OV7670_Init+0x168>
80006f8e:	12 3a       	cp.w	r10,r9
80006f90:	cf 93       	brcs	80006f82 <OV7670_Init+0x156>
80006f92:	ce ab       	rjmp	80006f66 <OV7670_Init+0x13a>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
80006f94:	0f 8b       	ld.ub	r11,r7[0x0]
80006f96:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80006f9a:	f0 1f 00 3f 	mcall	80007094 <OV7670_Init+0x268>
80006f9e:	c0 90       	breq	80006fb0 <OV7670_Init+0x184>
			{
				print_dbg("\n\rCamera Initialise Fail");
80006fa0:	4c 1c       	lddpc	r12,800070a4 <OV7670_Init+0x278>
80006fa2:	f0 1f 00 3f 	mcall	8000709c <OV7670_Init+0x270>
				//return FAIL;
				OV7670_Status.Camera_1_Error = true;
80006fa6:	4b b8       	lddpc	r8,80007090 <OV7670_Init+0x264>
80006fa8:	30 19       	mov	r9,1
80006faa:	b0 c9       	st.b	r8[0x4],r9
				OV7670_Status.Error = true;				
80006fac:	b0 89       	st.b	r8[0x0],r9
				break;
80006fae:	c1 68       	rjmp	80006fda <OV7670_Init+0x1ae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006fb0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006fb4:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006fb8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006fbc:	14 38       	cp.w	r8,r10
80006fbe:	e0 88 00 08 	brls	80006fce <OV7670_Init+0x1a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006fc2:	12 38       	cp.w	r8,r9
80006fc4:	fe 98 ff fa 	brls	80006fb8 <OV7670_Init+0x18c>
80006fc8:	12 3a       	cp.w	r10,r9
80006fca:	c5 b3       	brcs	80007080 <OV7670_Init+0x254>
80006fcc:	cf 6b       	rjmp	80006fb8 <OV7670_Init+0x18c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006fce:	12 38       	cp.w	r8,r9
80006fd0:	e0 8b 00 58 	brhi	80007080 <OV7670_Init+0x254>
80006fd4:	12 3a       	cp.w	r10,r9
80006fd6:	c5 53       	brcs	80007080 <OV7670_Init+0x254>
80006fd8:	cf 0b       	rjmp	80006fb8 <OV7670_Init+0x18c>
			}
			delay_ms(1);
		}
	}
	PCA9542A_Chan_Sel(NO_SELECT);
80006fda:	30 0c       	mov	r12,0
80006fdc:	f0 1f 00 2b 	mcall	80007088 <OV7670_Init+0x25c>
	
	//Initialise VSYNC Interrupts
	eic_options_t eic_options;
	eic_options.eic_mode = EIC_MODE_EDGE_TRIGGERED;
80006fe0:	30 08       	mov	r8,0
80006fe2:	ba b8       	st.b	sp[0x3],r8
	eic_options.eic_edge = EIC_EDGE_FALLING_EDGE;
80006fe4:	ba c8       	st.b	sp[0x4],r8
	eic_options.eic_async = EIC_SYNCH_MODE;
80006fe6:	ba f8       	st.b	sp[0x7],r8
	eic_options.eic_line = VSYNC_1_LINE;
80006fe8:	30 18       	mov	r8,1
80006fea:	ba a8       	st.b	sp[0x2],r8
	//eic_options.eic_line = VSYNC_0_LINE;
	
	Disable_global_interrupt();
80006fec:	d3 03       	ssrf	0x10
	gpio_enable_module_pin(VSYNC_1_PIN, VSYNC_1_FUNCTION);
80006fee:	30 1b       	mov	r11,1
80006ff0:	31 ac       	mov	r12,26
80006ff2:	f0 1f 00 2e 	mcall	800070a8 <OV7670_Init+0x27c>
	gpio_enable_module_pin(VSYNC_0_PIN, VSYNC_0_FUNCTION);
80006ff6:	30 1b       	mov	r11,1
80006ff8:	30 ac       	mov	r12,10
80006ffa:	f0 1f 00 2c 	mcall	800070a8 <OV7670_Init+0x27c>
	
	gpio_enable_pin_pull_up(VSYNC_1_PIN); //Enable pull up as it is a low level interrupt
80006ffe:	31 ac       	mov	r12,26
80007000:	f0 1f 00 2b 	mcall	800070ac <OV7670_Init+0x280>
	gpio_enable_pin_pull_up(VSYNC_0_PIN);
80007004:	30 ac       	mov	r12,10
80007006:	f0 1f 00 2a 	mcall	800070ac <OV7670_Init+0x280>
	//Initialise EIC
	eic_init(&AVR32_EIC, &eic_options, 1);
8000700a:	fa c7 ff fe 	sub	r7,sp,-2
8000700e:	30 1a       	mov	r10,1
80007010:	0e 9b       	mov	r11,r7
80007012:	fe 7c 14 00 	mov	r12,-60416
80007016:	f0 1f 00 27 	mcall	800070b0 <OV7670_Init+0x284>
	eic_options.eic_line = VSYNC_0_LINE;
8000701a:	30 48       	mov	r8,4
8000701c:	ba a8       	st.b	sp[0x2],r8
	eic_init(&AVR32_EIC, &eic_options, 1);
8000701e:	30 1a       	mov	r10,1
80007020:	0e 9b       	mov	r11,r7
80007022:	fe 7c 14 00 	mov	r12,-60416
80007026:	f0 1f 00 23 	mcall	800070b0 <OV7670_Init+0x284>
	
	INTC_register_interrupt(&VSYNC1_Handler, AVR32_EIC_IRQ_1, AVR32_INTC_INT0);
8000702a:	30 0a       	mov	r10,0
8000702c:	e0 6b 01 e0 	mov	r11,480
80007030:	4a 1c       	lddpc	r12,800070b4 <OV7670_Init+0x288>
80007032:	f0 1f 00 22 	mcall	800070b8 <OV7670_Init+0x28c>
	INTC_register_interrupt(&VSYNC0_Handler, AVR32_EIC_IRQ_4, AVR32_INTC_INT0);
80007036:	30 0a       	mov	r10,0
80007038:	e0 6b 01 e3 	mov	r11,483
8000703c:	4a 0c       	lddpc	r12,800070bc <OV7670_Init+0x290>
8000703e:	f0 1f 00 1f 	mcall	800070b8 <OV7670_Init+0x28c>
	//Enable interrupt on VSYNC1
	eic_enable_line(&AVR32_EIC, VSYNC_1_LINE);
80007042:	30 1b       	mov	r11,1
80007044:	fe 7c 14 00 	mov	r12,-60416
80007048:	f0 1f 00 1e 	mcall	800070c0 <OV7670_Init+0x294>
	eic_enable_line(&AVR32_EIC, (VSYNC_0_LINE));
8000704c:	30 4b       	mov	r11,4
8000704e:	fe 7c 14 00 	mov	r12,-60416
80007052:	f0 1f 00 1c 	mcall	800070c0 <OV7670_Init+0x294>
 	VSYNC_1_ENABLE_INTERRUPT;
80007056:	30 1b       	mov	r11,1
80007058:	fe 7c 14 00 	mov	r12,-60416
8000705c:	f0 1f 00 1a 	mcall	800070c4 <OV7670_Init+0x298>
 	VSYNC_0_ENABLE_INTERRUPT;
80007060:	30 4b       	mov	r11,4
80007062:	fe 7c 14 00 	mov	r12,-60416
80007066:	f0 1f 00 18 	mcall	800070c4 <OV7670_Init+0x298>
	
	FIFO_Init();
8000706a:	f0 1f 00 18 	mcall	800070c8 <OV7670_Init+0x29c>
	Enable_global_interrupt();
8000706e:	d5 03       	csrf	0x10
	
}
80007070:	2f ed       	sub	sp,-8
80007072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007076:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_0_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80007078:	0c 37       	cp.w	r7,r6
8000707a:	fe 91 ff 35 	brne	80006ee4 <OV7670_Init+0xb8>
8000707e:	c5 8b       	rjmp	80006f2e <OV7670_Init+0x102>
80007080:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_1_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80007082:	0c 37       	cp.w	r7,r6
80007084:	c8 81       	brne	80006f94 <OV7670_Init+0x168>
80007086:	ca ab       	rjmp	80006fda <OV7670_Init+0x1ae>
80007088:	80 00       	ld.sh	r0,r0[0x0]
8000708a:	70 cc       	ld.w	r12,r8[0x30]
8000708c:	80 00       	ld.sh	r0,r0[0x0]
8000708e:	36 54       	mov	r4,101
80007090:	00 00       	add	r0,r0
80007092:	0c a8       	st.w	r6++,r8
80007094:	80 00       	ld.sh	r0,r0[0x0]
80007096:	6e 08       	ld.w	r8,r7[0x0]
80007098:	80 00       	ld.sh	r0,r0[0x0]
8000709a:	d6 a0       	acall	0x1a8
8000709c:	80 00       	ld.sh	r0,r0[0x0]
8000709e:	65 fc       	ld.w	r12,r2[0x7c]
800070a0:	80 00       	ld.sh	r0,r0[0x0]
800070a2:	d6 cd       	*unknown*
800070a4:	80 00       	ld.sh	r0,r0[0x0]
800070a6:	d6 b4       	*unknown*
800070a8:	80 00       	ld.sh	r0,r0[0x0]
800070aa:	2e 98       	sub	r8,-23
800070ac:	80 00       	ld.sh	r0,r0[0x0]
800070ae:	2f 5c       	sub	r12,-11
800070b0:	80 00       	ld.sh	r0,r0[0x0]
800070b2:	2c d0       	sub	r0,-51
800070b4:	80 00       	ld.sh	r0,r0[0x0]
800070b6:	6d 9c       	ld.w	r12,r6[0x64]
800070b8:	80 00       	ld.sh	r0,r0[0x0]
800070ba:	2f b0       	sub	r0,-5
800070bc:	80 00       	ld.sh	r0,r0[0x0]
800070be:	6d 30       	ld.w	r0,r6[0x4c]
800070c0:	80 00       	ld.sh	r0,r0[0x0]
800070c2:	2d a0       	sub	r0,-38
800070c4:	80 00       	ld.sh	r0,r0[0x0]
800070c6:	2d aa       	sub	r10,-38
800070c8:	80 00       	ld.sh	r0,r0[0x0]
800070ca:	6a c8       	ld.w	r8,r5[0x30]

800070cc <PCA9542A_Chan_Sel>:
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
	//return status;
}

void PCA9542A_Chan_Sel(unsigned char Channel)
{
800070cc:	d4 01       	pushm	lr
800070ce:	20 1d       	sub	sp,4
	int status = 0;
	char buff[2] = {Channel, 0};
800070d0:	ba 8c       	st.b	sp[0x0],r12
800070d2:	30 08       	mov	r8,0
800070d4:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
800070d6:	30 08       	mov	r8,0
800070d8:	37 49       	mov	r9,116
800070da:	30 1a       	mov	r10,1
800070dc:	1a 9b       	mov	r11,sp
800070de:	fe 7c 38 00 	mov	r12,-51200
800070e2:	f0 1f 00 03 	mcall	800070ec <PCA9542A_Chan_Sel+0x20>
800070e6:	2f fd       	sub	sp,-4
800070e8:	d8 02       	popm	pc
800070ea:	00 00       	add	r0,r0
800070ec:	80 00       	ld.sh	r0,r0[0x0]
800070ee:	35 a0       	mov	r0,90

800070f0 <PCA9542A_Init>:
/*#include "CustomDevices/MotorDriver.h"*/
//SDCard
/*#include "CustomDevices/SD_Card.h"*/

int PCA9542A_Init()
{
800070f0:	d4 01       	pushm	lr
800070f2:	20 1d       	sub	sp,4
	int status = twim_probe(&AVR32_TWIM0, PCA9542A_ADDR);
800070f4:	37 4b       	mov	r11,116
800070f6:	fe 7c 38 00 	mov	r12,-51200
800070fa:	f0 1f 00 0a 	mcall	80007120 <PCA9542A_Init+0x30>
	if (status != STATUS_OK)
800070fe:	c0 30       	breq	80007104 <PCA9542A_Init+0x14>
80007100:	30 2c       	mov	r12,2
80007102:	c0 c8       	rjmp	8000711a <PCA9542A_Init+0x2a>
		return DEVICE_NOT_FOUND;
	char buff[2] = {NO_SELECT, 0};
80007104:	30 08       	mov	r8,0
80007106:	ba 88       	st.b	sp[0x0],r8
80007108:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
8000710a:	30 08       	mov	r8,0
8000710c:	37 49       	mov	r9,116
8000710e:	30 1a       	mov	r10,1
80007110:	1a 9b       	mov	r11,sp
80007112:	fe 7c 38 00 	mov	r12,-51200
80007116:	f0 1f 00 04 	mcall	80007124 <PCA9542A_Init+0x34>
	
	return status;
}
8000711a:	2f fd       	sub	sp,-4
8000711c:	d8 02       	popm	pc
8000711e:	00 00       	add	r0,r0
80007120:	80 00       	ld.sh	r0,r0[0x0]
80007122:	36 54       	mov	r4,101
80007124:	80 00       	ld.sh	r0,r0[0x0]
80007126:	35 a0       	mov	r0,90

80007128 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
80007128:	eb cd 40 80 	pushm	r7,lr
8000712c:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
8000712e:	49 98       	lddpc	r8,80007190 <sd_mmc_resources_init+0x68>
80007130:	1a 97       	mov	r7,sp
80007132:	70 09       	ld.w	r9,r8[0x0]
80007134:	50 09       	stdsp	sp[0x0],r9
80007136:	70 19       	ld.w	r9,r8[0x4]
80007138:	50 19       	stdsp	sp[0x4],r9
8000713a:	70 29       	ld.w	r9,r8[0x8]
8000713c:	50 29       	stdsp	sp[0x8],r9
8000713e:	70 38       	ld.w	r8,r8[0xc]
80007140:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80007142:	30 4b       	mov	r11,4
80007144:	49 4c       	lddpc	r12,80007194 <sd_mmc_resources_init+0x6c>
80007146:	f0 1f 00 15 	mcall	80007198 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
8000714a:	1a 9b       	mov	r11,sp
8000714c:	fe 7c 34 00 	mov	r12,-52224
80007150:	f0 1f 00 13 	mcall	8000719c <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007154:	30 09       	mov	r9,0
80007156:	12 9a       	mov	r10,r9
80007158:	12 9b       	mov	r11,r9
8000715a:	fe 7c 34 00 	mov	r12,-52224
8000715e:	f0 1f 00 11 	mcall	800071a0 <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
80007162:	fe 7c 34 00 	mov	r12,-52224
80007166:	f0 1f 00 10 	mcall	800071a4 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
8000716a:	20 4d       	sub	sp,16
8000716c:	6e 08       	ld.w	r8,r7[0x0]
8000716e:	50 08       	stdsp	sp[0x0],r8
80007170:	6e 18       	ld.w	r8,r7[0x4]
80007172:	50 18       	stdsp	sp[0x4],r8
80007174:	6e 28       	ld.w	r8,r7[0x8]
80007176:	50 28       	stdsp	sp[0x8],r8
80007178:	6e 38       	ld.w	r8,r7[0xc]
8000717a:	50 38       	stdsp	sp[0xc],r8
8000717c:	e0 6c 24 00 	mov	r12,9216
80007180:	ea 1c 00 f4 	orh	r12,0xf4
80007184:	f0 1f 00 09 	mcall	800071a8 <sd_mmc_resources_init+0x80>
80007188:	2f cd       	sub	sp,-16
}
8000718a:	2f cd       	sub	sp,-16
8000718c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007190:	80 00       	ld.sh	r0,r0[0x0]
80007192:	d8 1c       	*unknown*
80007194:	80 00       	ld.sh	r0,r0[0x0]
80007196:	d8 2c       	*unknown*
80007198:	80 00       	ld.sh	r0,r0[0x0]
8000719a:	2f 2c       	sub	r12,-14
8000719c:	80 00       	ld.sh	r0,r0[0x0]
8000719e:	32 4c       	mov	r12,36
800071a0:	80 00       	ld.sh	r0,r0[0x0]
800071a2:	32 84       	mov	r4,40
800071a4:	80 00       	ld.sh	r0,r0[0x0]
800071a6:	33 ec       	mov	r12,62
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	2b 10       	sub	r0,-79

800071ac <LED_Flash>:

#define LOG_FILE "log.txt"


void LED_Flash()
{
800071ac:	d4 01       	pushm	lr
	LED2_SET;
800071ae:	33 1c       	mov	r12,49
800071b0:	f0 1f 00 1d 	mcall	80007224 <LED_Flash+0x78>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800071b4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800071b8:	e0 6a 24 00 	mov	r10,9216
800071bc:	ea 1a 00 f4 	orh	r10,0xf4
800071c0:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800071c4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800071c8:	14 38       	cp.w	r8,r10
800071ca:	e0 88 00 08 	brls	800071da <LED_Flash+0x2e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800071ce:	12 38       	cp.w	r8,r9
800071d0:	fe 98 ff fa 	brls	800071c4 <LED_Flash+0x18>
800071d4:	12 3a       	cp.w	r10,r9
800071d6:	c1 93       	brcs	80007208 <LED_Flash+0x5c>
800071d8:	cf 6b       	rjmp	800071c4 <LED_Flash+0x18>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800071da:	12 38       	cp.w	r8,r9
800071dc:	e0 8b 00 16 	brhi	80007208 <LED_Flash+0x5c>
800071e0:	12 3a       	cp.w	r10,r9
800071e2:	c1 33       	brcs	80007208 <LED_Flash+0x5c>
800071e4:	cf 0b       	rjmp	800071c4 <LED_Flash+0x18>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800071e6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800071ea:	14 38       	cp.w	r8,r10
800071ec:	e0 88 00 08 	brls	800071fc <LED_Flash+0x50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800071f0:	12 38       	cp.w	r8,r9
800071f2:	fe 98 ff fa 	brls	800071e6 <LED_Flash+0x3a>
800071f6:	12 3a       	cp.w	r10,r9
800071f8:	c1 43       	brcs	80007220 <LED_Flash+0x74>
800071fa:	cf 6b       	rjmp	800071e6 <LED_Flash+0x3a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800071fc:	12 38       	cp.w	r8,r9
800071fe:	e0 8b 00 11 	brhi	80007220 <LED_Flash+0x74>
80007202:	12 3a       	cp.w	r10,r9
80007204:	c0 e3       	brcs	80007220 <LED_Flash+0x74>
80007206:	cf 0b       	rjmp	800071e6 <LED_Flash+0x3a>
	delay_s(1);
	LED2_CLR;
80007208:	33 1c       	mov	r12,49
8000720a:	f0 1f 00 08 	mcall	80007228 <LED_Flash+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000720e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007212:	e0 6a 24 00 	mov	r10,9216
80007216:	ea 1a 00 f4 	orh	r10,0xf4
8000721a:	f0 0a 00 0a 	add	r10,r8,r10
8000721e:	ce 4b       	rjmp	800071e6 <LED_Flash+0x3a>
80007220:	d8 02       	popm	pc
80007222:	00 00       	add	r0,r0
80007224:	80 00       	ld.sh	r0,r0[0x0]
80007226:	2f 76       	sub	r6,-9
80007228:	80 00       	ld.sh	r0,r0[0x0]
8000722a:	2f 92       	sub	r2,-7

8000722c <Log_Write>:
}

#define TOGGLE LED_Flash

void Log_Write(char *buff, int length) 
{
8000722c:	eb cd 40 c0 	pushm	r6-r7,lr
80007230:	18 96       	mov	r6,r12
80007232:	16 97       	mov	r7,r11
	nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007234:	30 0a       	mov	r10,0
80007236:	30 1b       	mov	r11,1
80007238:	48 9c       	lddpc	r12,8000725c <Log_Write+0x30>
8000723a:	f0 1f 00 0a 	mcall	80007260 <Log_Write+0x34>
	file_open(FOPEN_MODE_APPEND);
8000723e:	30 2c       	mov	r12,2
80007240:	f0 1f 00 09 	mcall	80007264 <Log_Write+0x38>
	if(length == -1)
80007244:	5b f7       	cp.w	r7,-1
80007246:	f9 b7 00 04 	moveq	r7,4
		length = sizeof(buff);
	file_write_buf(buff, length);
8000724a:	0e 9b       	mov	r11,r7
8000724c:	5c 7b       	castu.h	r11
8000724e:	0c 9c       	mov	r12,r6
80007250:	f0 1f 00 06 	mcall	80007268 <Log_Write+0x3c>
	file_close();
80007254:	f0 1f 00 06 	mcall	8000726c <Log_Write+0x40>
}
80007258:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000725c:	80 00       	ld.sh	r0,r0[0x0]
8000725e:	d8 5c       	*unknown*
80007260:	80 00       	ld.sh	r0,r0[0x0]
80007262:	62 f0       	ld.w	r0,r1[0x3c]
80007264:	80 00       	ld.sh	r0,r0[0x0]
80007266:	5b 10       	cp.w	r0,-15
80007268:	80 00       	ld.sh	r0,r0[0x0]
8000726a:	59 9c       	cp.w	r12,25
8000726c:	80 00       	ld.sh	r0,r0[0x0]
8000726e:	59 60       	cp.w	r0,22

80007270 <main>:

	// Transmit the resulting string with the given USART.
	Log_Write(tmp + i, -1);
}
int main (void)
{
80007270:	d4 31       	pushm	r0-r7,lr
80007272:	20 9d       	sub	sp,36
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
80007274:	f0 1f 00 ef 	mcall	80007630 <main+0x3c0>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80007278:	30 3a       	mov	r10,3
8000727a:	e0 6b 24 00 	mov	r11,9216
8000727e:	ea 1b 00 f4 	orh	r11,0xf4
80007282:	30 0c       	mov	r12,0
80007284:	f0 1f 00 ec 	mcall	80007634 <main+0x3c4>
	init_dbg_rs232(FOSC0);
80007288:	e0 6c 24 00 	mov	r12,9216
8000728c:	ea 1c 00 f4 	orh	r12,0xf4
80007290:	f0 1f 00 ea 	mcall	80007638 <main+0x3c8>
	print_dbg("\x0C");
80007294:	fe fc 03 a8 	ld.w	r12,pc[936]
80007298:	f0 1f 00 ea 	mcall	80007640 <main+0x3d0>
	print_dbg("Columbus Board Tester\n\n\r");
8000729c:	fe fc 03 a8 	ld.w	r12,pc[936]
800072a0:	f0 1f 00 e8 	mcall	80007640 <main+0x3d0>
	sd_mmc_resources_init();
800072a4:	f0 1f 00 e9 	mcall	80007648 <main+0x3d8>
	//sd_mmc_resources_init();
	print_dbg("\n\n\rSD Card Memory Test:\n\r");
800072a8:	fe fc 03 a4 	ld.w	r12,pc[932]
800072ac:	f0 1f 00 e5 	mcall	80007640 <main+0x3d0>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
800072b0:	30 0c       	mov	r12,0
800072b2:	f0 1f 00 e8 	mcall	80007650 <main+0x3e0>
800072b6:	c1 71       	brne	800072e4 <main+0x74>
	{
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
800072b8:	fa cb ff e0 	sub	r11,sp,-32
800072bc:	f0 1f 00 e6 	mcall	80007654 <main+0x3e4>
		print_dbg("OK:\t");
800072c0:	fe fc 03 98 	ld.w	r12,pc[920]
800072c4:	f0 1f 00 df 	mcall	80007640 <main+0x3d0>
		print_dbg_ulong((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
800072c8:	40 8c       	lddsp	r12,sp[0x20]
800072ca:	2f fc       	sub	r12,-1
800072cc:	ab 9c       	lsr	r12,0xb
800072ce:	f0 1f 00 e4 	mcall	8000765c <main+0x3ec>
		print_dbg("MB\r\n");
800072d2:	fe fc 03 8e 	ld.w	r12,pc[910]
800072d6:	f0 1f 00 db 	mcall	80007640 <main+0x3d0>
		print_dbg("SD Card Okay.\n\r");
800072da:	fe fc 03 8a 	ld.w	r12,pc[906]
800072de:	f0 1f 00 d9 	mcall	80007640 <main+0x3d0>
800072e2:	c0 58       	rjmp	800072ec <main+0x7c>
	}
	else
	{
		// Display an error message
		print_dbg("Not initialized: Check if memory is ready...\r\n");
800072e4:	fe fc 03 84 	ld.w	r12,pc[900]
800072e8:	f0 1f 00 d6 	mcall	80007640 <main+0x3d0>
	}
	nav_reset();
800072ec:	f0 1f 00 e0 	mcall	8000766c <main+0x3fc>
	// Use the last drive available as default.
	nav_drive_set(nav_drive_nb() - 1);
800072f0:	f0 1f 00 e0 	mcall	80007670 <main+0x400>
800072f4:	20 1c       	sub	r12,1
800072f6:	5c 5c       	castu.b	r12
800072f8:	f0 1f 00 df 	mcall	80007674 <main+0x404>
	// Mount it.
	nav_partition_mount();
800072fc:	f0 1f 00 df 	mcall	80007678 <main+0x408>
	nav_filelist_reset();
80007300:	f0 1f 00 df 	mcall	8000767c <main+0x40c>
	if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
80007304:	30 0b       	mov	r11,0
80007306:	fe fc 03 7a 	ld.w	r12,pc[890]
8000730a:	f0 1f 00 df 	mcall	80007684 <main+0x414>
8000730e:	c1 d0       	breq	80007348 <main+0xd8>
	{
		print_dbg("\n\rLog File Already Exists\n\rAttempting to delete...");	
80007310:	fe fc 03 78 	ld.w	r12,pc[888]
80007314:	f0 1f 00 cb 	mcall	80007640 <main+0x3d0>
		nav_setcwd((FS_STRING)LOG_FILE, true, false);
80007318:	fe f7 03 68 	ld.w	r7,pc[872]
8000731c:	30 0a       	mov	r10,0
8000731e:	30 1b       	mov	r11,1
80007320:	0e 9c       	mov	r12,r7
80007322:	f0 1f 00 db 	mcall	8000768c <main+0x41c>
		nav_file_del(false);
80007326:	30 0c       	mov	r12,0
80007328:	f0 1f 00 da 	mcall	80007690 <main+0x420>
		
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
8000732c:	30 0b       	mov	r11,0
8000732e:	0e 9c       	mov	r12,r7
80007330:	f0 1f 00 d5 	mcall	80007684 <main+0x414>
80007334:	c0 60       	breq	80007340 <main+0xd0>
			print_dbg("\n\rLog File Still Exists...");
80007336:	fe fc 03 5e 	ld.w	r12,pc[862]
8000733a:	f0 1f 00 c2 	mcall	80007640 <main+0x3d0>
8000733e:	c0 58       	rjmp	80007348 <main+0xd8>
		else
			print_dbg("\n\rLog File Deleted!");
80007340:	fe fc 03 58 	ld.w	r12,pc[856]
80007344:	f0 1f 00 bf 	mcall	80007640 <main+0x3d0>
	}
	
	
	print_dbg("\n\rCreating Log File.");
80007348:	fe fc 03 54 	ld.w	r12,pc[852]
8000734c:	f0 1f 00 bd 	mcall	80007640 <main+0x3d0>
	//char buff[20] = "log.txt";
	if(nav_file_create((FS_STRING)LOG_FILE) == true)
80007350:	fe fc 03 30 	ld.w	r12,pc[816]
80007354:	f0 1f 00 d3 	mcall	800076a0 <main+0x430>
80007358:	c0 60       	breq	80007364 <main+0xf4>
		print_dbg("\n\rSuccess!");
8000735a:	fe fc 03 4a 	ld.w	r12,pc[842]
8000735e:	f0 1f 00 b9 	mcall	80007640 <main+0x3d0>
80007362:	c0 58       	rjmp	8000736c <main+0xfc>
	else
		print_dbg("\n\rNot worked...");
80007364:	fe fc 03 44 	ld.w	r12,pc[836]
80007368:	f0 1f 00 b6 	mcall	80007640 <main+0x3d0>
	
	print_dbg("\n\rWriting to log file.");
8000736c:	fe fc 03 40 	ld.w	r12,pc[832]
80007370:	f0 1f 00 b4 	mcall	80007640 <main+0x3d0>
	
	Log_Write("Columbus Tester:\n\r", -1);
80007374:	3f fb       	mov	r11,-1
80007376:	fe fc 03 3a 	ld.w	r12,pc[826]
8000737a:	f0 1f 00 cf 	mcall	800076b4 <main+0x444>


	print_dbg("\n\rLED Test:\n\rAll LEDS on;");
8000737e:	fe fc 03 3a 	ld.w	r12,pc[826]
80007382:	f0 1f 00 b0 	mcall	80007640 <main+0x3d0>
	LEDMOTOR_SET;
80007386:	32 cc       	mov	r12,44
80007388:	f0 1f 00 cd 	mcall	800076bc <main+0x44c>
	LED2_SET;
8000738c:	33 1c       	mov	r12,49
8000738e:	f0 1f 00 cc 	mcall	800076bc <main+0x44c>
	LED3_SET;
80007392:	33 2c       	mov	r12,50
80007394:	f0 1f 00 ca 	mcall	800076bc <main+0x44c>
	LED4_SET;
80007398:	33 bc       	mov	r12,59
8000739a:	f0 1f 00 c9 	mcall	800076bc <main+0x44c>
	LED5_SET;
8000739e:	33 cc       	mov	r12,60
800073a0:	f0 1f 00 c7 	mcall	800076bc <main+0x44c>
	LED6_SET;
800073a4:	33 dc       	mov	r12,61
800073a6:	f0 1f 00 c6 	mcall	800076bc <main+0x44c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800073aa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073ae:	e0 6a 24 00 	mov	r10,9216
800073b2:	ea 1a 00 f4 	orh	r10,0xf4
800073b6:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800073ba:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800073be:	14 38       	cp.w	r8,r10
800073c0:	e0 88 00 09 	brls	800073d2 <main+0x162>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800073c4:	12 38       	cp.w	r8,r9
800073c6:	fe 98 ff fa 	brls	800073ba <main+0x14a>
800073ca:	12 3a       	cp.w	r10,r9
800073cc:	e0 83 00 db 	brlo	80007582 <main+0x312>
800073d0:	cf 5b       	rjmp	800073ba <main+0x14a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800073d2:	12 38       	cp.w	r8,r9
800073d4:	e0 8b 00 d7 	brhi	80007582 <main+0x312>
800073d8:	12 3a       	cp.w	r10,r9
800073da:	e0 83 00 d4 	brlo	80007582 <main+0x312>
800073de:	ce eb       	rjmp	800073ba <main+0x14a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800073e0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800073e4:	14 38       	cp.w	r8,r10
800073e6:	e0 88 00 09 	brls	800073f8 <main+0x188>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800073ea:	12 38       	cp.w	r8,r9
800073ec:	fe 98 ff fa 	brls	800073e0 <main+0x170>
800073f0:	12 3a       	cp.w	r10,r9
800073f2:	e0 83 00 e6 	brlo	800075be <main+0x34e>
800073f6:	cf 5b       	rjmp	800073e0 <main+0x170>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800073f8:	12 38       	cp.w	r8,r9
800073fa:	e0 8b 00 e2 	brhi	800075be <main+0x34e>
800073fe:	12 3a       	cp.w	r10,r9
80007400:	e0 83 00 df 	brlo	800075be <main+0x34e>
80007404:	ce eb       	rjmp	800073e0 <main+0x170>
80007406:	0c 97       	mov	r7,r6
	print_dbg("Scanning all Channels\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
80007408:	00 9c       	mov	r12,r0
8000740a:	f0 1f 00 95 	mcall	8000765c <main+0x3ec>
		print_dbg_char(' ');
8000740e:	0a 9c       	mov	r12,r5
80007410:	f0 1f 00 ac 	mcall	800076c0 <main+0x450>
80007414:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80007418:	ee c6 ff ff 	sub	r6,r7,-1
8000741c:	0e 9b       	mov	r11,r7
8000741e:	06 9c       	mov	r12,r3
80007420:	f0 1f 00 a9 	mcall	800076c4 <main+0x454>
			if(status == STATUS_OK)
80007424:	c0 51       	brne	8000742e <main+0x1be>
			{
				print_dbg_char('A');
80007426:	02 9c       	mov	r12,r1
80007428:	f0 1f 00 a6 	mcall	800076c0 <main+0x450>
8000742c:	c0 48       	rjmp	80007434 <main+0x1c4>
			}
			else
			{
				print_dbg_char('-');
8000742e:	04 9c       	mov	r12,r2
80007430:	f0 1f 00 a4 	mcall	800076c0 <main+0x450>
			}
			print_dbg_char(' ');
80007434:	0a 9c       	mov	r12,r5
80007436:	f0 1f 00 a3 	mcall	800076c0 <main+0x450>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
8000743a:	08 36       	cp.w	r6,r4
8000743c:	c0 30       	breq	80007442 <main+0x1d2>
8000743e:	0c 97       	mov	r7,r6
80007440:	ce cb       	rjmp	80007418 <main+0x1a8>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
80007442:	fe fc 02 86 	ld.w	r12,pc[646]
80007446:	f0 1f 00 7f 	mcall	80007640 <main+0x3d0>
	PCA9542A_Init();
	
	print_dbg("Scanning all Channels\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
8000744a:	2f f0       	sub	r0,-1
8000744c:	58 80       	cp.w	r0,8
8000744e:	cd c1       	brne	80007406 <main+0x196>
// 	Motors_Reset();//reset the motors to test them
	
	
	
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80007450:	30 4c       	mov	r12,4
80007452:	f0 1f 00 9f 	mcall	800076cc <main+0x45c>
	print_dbg("\n\rScanning Channel 0\n\r");
80007456:	fe fc 02 7a 	ld.w	r12,pc[634]
8000745a:	f0 1f 00 7a 	mcall	80007640 <main+0x3d0>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
8000745e:	fe fc 02 76 	ld.w	r12,pc[630]
80007462:	f0 1f 00 78 	mcall	80007640 <main+0x3d0>
80007466:	30 07       	mov	r7,0
80007468:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
8000746a:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
8000746c:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
80007470:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
80007472:	34 11       	mov	r1,65
	print_dbg("\n\rScanning Channel 0\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
80007474:	00 9c       	mov	r12,r0
80007476:	f0 1f 00 7a 	mcall	8000765c <main+0x3ec>
		print_dbg_char(' ');
8000747a:	0a 9c       	mov	r12,r5
8000747c:	f0 1f 00 91 	mcall	800076c0 <main+0x450>
80007480:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80007484:	ee c6 ff ff 	sub	r6,r7,-1
80007488:	0e 9b       	mov	r11,r7
8000748a:	06 9c       	mov	r12,r3
8000748c:	f0 1f 00 8e 	mcall	800076c4 <main+0x454>
			if(status == STATUS_OK)
80007490:	c0 51       	brne	8000749a <main+0x22a>
			{
				print_dbg_char('A');
80007492:	02 9c       	mov	r12,r1
80007494:	f0 1f 00 8b 	mcall	800076c0 <main+0x450>
80007498:	c0 48       	rjmp	800074a0 <main+0x230>
			}
			else
			{
				print_dbg_char('-');
8000749a:	04 9c       	mov	r12,r2
8000749c:	f0 1f 00 89 	mcall	800076c0 <main+0x450>
			}
			print_dbg_char(' ');
800074a0:	0a 9c       	mov	r12,r5
800074a2:	f0 1f 00 88 	mcall	800076c0 <main+0x450>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
800074a6:	08 36       	cp.w	r6,r4
800074a8:	c0 30       	breq	800074ae <main+0x23e>
800074aa:	0c 97       	mov	r7,r6
800074ac:	ce cb       	rjmp	80007484 <main+0x214>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
800074ae:	fe fc 02 1a 	ld.w	r12,pc[538]
800074b2:	f0 1f 00 64 	mcall	80007640 <main+0x3d0>
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
	print_dbg("\n\rScanning Channel 0\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
800074b6:	2f f0       	sub	r0,-1
800074b8:	58 80       	cp.w	r0,8
800074ba:	c0 30       	breq	800074c0 <main+0x250>
800074bc:	0c 97       	mov	r7,r6
800074be:	cd bb       	rjmp	80007474 <main+0x204>
		}
		print_dbg("\n\r");
	}
	
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
800074c0:	30 5c       	mov	r12,5
800074c2:	f0 1f 00 83 	mcall	800076cc <main+0x45c>
	print_dbg("\n\rScanning Channel 1\n\r");
800074c6:	fe fc 02 12 	ld.w	r12,pc[530]
800074ca:	f0 1f 00 5e 	mcall	80007640 <main+0x3d0>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
800074ce:	fe fc 02 06 	ld.w	r12,pc[518]
800074d2:	f0 1f 00 5c 	mcall	80007640 <main+0x3d0>
800074d6:	30 07       	mov	r7,0
800074d8:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
800074da:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
800074dc:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
800074e0:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
800074e2:	34 11       	mov	r1,65
	print_dbg("\n\rScanning Channel 1\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
800074e4:	00 9c       	mov	r12,r0
800074e6:	f0 1f 00 5e 	mcall	8000765c <main+0x3ec>
		print_dbg_char(' ');
800074ea:	0a 9c       	mov	r12,r5
800074ec:	f0 1f 00 75 	mcall	800076c0 <main+0x450>
800074f0:	ee c4 ff f0 	sub	r4,r7,-16
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
800074f4:	ee c6 ff ff 	sub	r6,r7,-1
800074f8:	0e 9b       	mov	r11,r7
800074fa:	06 9c       	mov	r12,r3
800074fc:	f0 1f 00 72 	mcall	800076c4 <main+0x454>
			if(status == STATUS_OK)
80007500:	c0 51       	brne	8000750a <main+0x29a>
			{
				print_dbg_char('A');
80007502:	02 9c       	mov	r12,r1
80007504:	f0 1f 00 6f 	mcall	800076c0 <main+0x450>
80007508:	c0 48       	rjmp	80007510 <main+0x2a0>
			}
			else
			{
				print_dbg_char('-');
8000750a:	04 9c       	mov	r12,r2
8000750c:	f0 1f 00 6d 	mcall	800076c0 <main+0x450>
			}
			print_dbg_char(' ');
80007510:	0a 9c       	mov	r12,r5
80007512:	f0 1f 00 6c 	mcall	800076c0 <main+0x450>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
		for(j = 0; j < 16; j++)
80007516:	08 36       	cp.w	r6,r4
80007518:	c0 30       	breq	8000751e <main+0x2ae>
8000751a:	0c 97       	mov	r7,r6
8000751c:	ce cb       	rjmp	800074f4 <main+0x284>
			{
				print_dbg_char('-');
			}
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
8000751e:	4e bc       	lddpc	r12,800076c8 <main+0x458>
80007520:	f0 1f 00 48 	mcall	80007640 <main+0x3d0>
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
	print_dbg("\n\rScanning Channel 1\n\r");
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80007524:	2f f0       	sub	r0,-1
80007526:	58 80       	cp.w	r0,8
80007528:	c0 30       	breq	8000752e <main+0x2be>
8000752a:	0c 97       	mov	r7,r6
8000752c:	cd cb       	rjmp	800074e4 <main+0x274>
			print_dbg_char(' ');
		}
		print_dbg("\n\r");
	}
	
	print_dbg("\n\rInitialising Cameras");
8000752e:	4e cc       	lddpc	r12,800076dc <main+0x46c>
80007530:	f0 1f 00 44 	mcall	80007640 <main+0x3d0>
	OV7670_Init();
80007534:	f0 1f 00 6b 	mcall	800076e0 <main+0x470>
	FIFO_Reset(CAMERA_LEFT | CAMERA_RIGHT);
80007538:	30 3c       	mov	r12,3
8000753a:	f0 1f 00 6b 	mcall	800076e4 <main+0x474>
	if(STATUS_OK == OV7670_Status.Error)
8000753e:	4e b8       	lddpc	r8,800076e8 <main+0x478>
80007540:	11 89       	ld.ub	r9,r8[0x0]
80007542:	30 08       	mov	r8,0
80007544:	f0 09 18 00 	cp.b	r9,r8
80007548:	c0 51       	brne	80007552 <main+0x2e2>
	{
		print_dbg("\n\rCamera Initialise Okay!");
8000754a:	4e 9c       	lddpc	r12,800076ec <main+0x47c>
8000754c:	f0 1f 00 3d 	mcall	80007640 <main+0x3d0>
80007550:	c0 48       	rjmp	80007558 <main+0x2e8>
	}
	else
		print_dbg("\n\rCamara Initialise Fail.");
80007552:	4e 8c       	lddpc	r12,800076f0 <main+0x480>
80007554:	f0 1f 00 3b 	mcall	80007640 <main+0x3d0>
		
	print_dbg("\n\rTaking Photos");
80007558:	4e 7c       	lddpc	r12,800076f4 <main+0x484>
8000755a:	f0 1f 00 3a 	mcall	80007640 <main+0x3d0>
	//TakePhoto(CAMERA_LEFT);
	//TakePhoto(CAMERA_RIGHT);
	TakePhoto(CAMERA_LEFT | CAMERA_RIGHT);
8000755e:	30 3c       	mov	r12,3
80007560:	f0 1f 00 66 	mcall	800076f8 <main+0x488>
	while(Photos_Ready() == false)
80007564:	f0 1f 00 66 	mcall	800076fc <main+0x48c>
80007568:	cf e0       	breq	80007564 <main+0x2f4>
		;

	if(Store_Both_Images() == true)
8000756a:	f0 1f 00 66 	mcall	80007700 <main+0x490>
8000756e:	c0 40       	breq	80007576 <main+0x306>
		print_dbg("\n\rImages Stored Successfully!");
80007570:	4e 5c       	lddpc	r12,80007704 <main+0x494>
80007572:	f0 1f 00 34 	mcall	80007640 <main+0x3d0>
	print_dbg("\n\rTest Complete!");
80007576:	4e 5c       	lddpc	r12,80007708 <main+0x498>
80007578:	f0 1f 00 32 	mcall	80007640 <main+0x3d0>
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		TOGGLE();
8000757c:	f0 1f 00 64 	mcall	8000770c <main+0x49c>
80007580:	cf eb       	rjmp	8000757c <main+0x30c>
	LED3_SET;
	LED4_SET;
	LED5_SET;
	LED6_SET;
	delay_s(1);
	print_dbg("\n\rAll LEDS off;");
80007582:	4e 4c       	lddpc	r12,80007710 <main+0x4a0>
80007584:	f0 1f 00 2f 	mcall	80007640 <main+0x3d0>
	LEDMOTOR_CLR;
80007588:	32 cc       	mov	r12,44
8000758a:	f0 1f 00 63 	mcall	80007714 <main+0x4a4>
	LED2_CLR;
8000758e:	33 1c       	mov	r12,49
80007590:	f0 1f 00 61 	mcall	80007714 <main+0x4a4>
	LED3_CLR;
80007594:	33 2c       	mov	r12,50
80007596:	f0 1f 00 60 	mcall	80007714 <main+0x4a4>
	LED4_CLR;
8000759a:	33 bc       	mov	r12,59
8000759c:	f0 1f 00 5e 	mcall	80007714 <main+0x4a4>
	LED5_CLR;
800075a0:	33 cc       	mov	r12,60
800075a2:	f0 1f 00 5d 	mcall	80007714 <main+0x4a4>
	LED6_CLR;
800075a6:	33 dc       	mov	r12,61
800075a8:	f0 1f 00 5b 	mcall	80007714 <main+0x4a4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800075ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800075b0:	e0 6a 24 00 	mov	r10,9216
800075b4:	ea 1a 00 f4 	orh	r10,0xf4
800075b8:	f0 0a 00 0a 	add	r10,r8,r10
800075bc:	c1 2b       	rjmp	800073e0 <main+0x170>
// 	print_dbg_ulong(sdram[1]);
// 	
// 	
// 
// 
 	print_dbg("\n\n\rTWI Test:\n\r");
800075be:	4d 77       	lddpc	r7,80007718 <main+0x4a8>
800075c0:	0e 9c       	mov	r12,r7
800075c2:	f0 1f 00 20 	mcall	80007640 <main+0x3d0>
	Log_Write("\n\n\rTWI Test:\n\r", 14);
800075c6:	30 eb       	mov	r11,14
800075c8:	0e 9c       	mov	r12,r7
800075ca:	f0 1f 00 3b 	mcall	800076b4 <main+0x444>
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
800075ce:	4d 48       	lddpc	r8,8000771c <main+0x4ac>
800075d0:	fa cc ff f0 	sub	r12,sp,-16
800075d4:	70 09       	ld.w	r9,r8[0x0]
800075d6:	99 09       	st.w	r12[0x0],r9
800075d8:	70 19       	ld.w	r9,r8[0x4]
800075da:	99 19       	st.w	r12[0x4],r9
800075dc:	70 29       	ld.w	r9,r8[0x8]
800075de:	99 29       	st.w	r12[0x8],r9
800075e0:	70 38       	ld.w	r8,r8[0xc]
800075e2:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
800075e4:	4c f8       	lddpc	r8,80007720 <main+0x4b0>
800075e6:	70 09       	ld.w	r9,r8[0x0]
800075e8:	50 09       	stdsp	sp[0x0],r9
800075ea:	70 19       	ld.w	r9,r8[0x4]
800075ec:	50 19       	stdsp	sp[0x4],r9
800075ee:	70 29       	ld.w	r9,r8[0x8]
800075f0:	50 29       	stdsp	sp[0x8],r9
800075f2:	70 38       	ld.w	r8,r8[0xc]
800075f4:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
800075f6:	30 2b       	mov	r11,2
800075f8:	f0 1f 00 4b 	mcall	80007724 <main+0x4b4>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (TWIM, &TWIM_OPTIONS);
800075fc:	1a 9b       	mov	r11,sp
800075fe:	fe 7c 38 00 	mov	r12,-51200
80007602:	f0 1f 00 4a 	mcall	80007728 <main+0x4b8>
// 
// 
 	print_dbg("\n\n\rTWI Test:\n\r");
	Log_Write("\n\n\rTWI Test:\n\r", 14);
 	twim_init();
	print_dbg("\n\rInitialising the I2C Mux");
80007606:	4c ac       	lddpc	r12,8000772c <main+0x4bc>
80007608:	f0 1f 00 0e 	mcall	80007640 <main+0x3d0>
	PCA9542A_Init();
8000760c:	f0 1f 00 49 	mcall	80007730 <main+0x4c0>
	
	print_dbg("Scanning all Channels\n\r");
80007610:	4c 9c       	lddpc	r12,80007734 <main+0x4c4>
80007612:	f0 1f 00 0c 	mcall	80007640 <main+0x3d0>
	print_dbg("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80007616:	4b 0c       	lddpc	r12,800076d4 <main+0x464>
80007618:	f0 1f 00 0a 	mcall	80007640 <main+0x3d0>
8000761c:	30 07       	mov	r7,0
8000761e:	0e 90       	mov	r0,r7
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		print_dbg_ulong(i);
		print_dbg_char(' ');
80007620:	32 05       	mov	r5,32
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80007622:	fe 73 38 00 	mov	r3,-51200
			{
				print_dbg_char('A');
			}
			else
			{
				print_dbg_char('-');
80007626:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				print_dbg_char('A');
80007628:	34 11       	mov	r1,65
8000762a:	fe 9f fe ef 	bral	80007408 <main+0x198>
8000762e:	00 00       	add	r0,r0
80007630:	80 00       	ld.sh	r0,r0[0x0]
80007632:	66 b0       	ld.w	r0,r3[0x2c]
80007634:	80 00       	ld.sh	r0,r0[0x0]
80007636:	30 88       	mov	r8,8
80007638:	80 00       	ld.sh	r0,r0[0x0]
8000763a:	66 50       	ld.w	r0,r3[0x14]
8000763c:	80 00       	ld.sh	r0,r0[0x0]
8000763e:	d8 64       	*unknown*
80007640:	80 00       	ld.sh	r0,r0[0x0]
80007642:	65 fc       	ld.w	r12,r2[0x7c]
80007644:	80 00       	ld.sh	r0,r0[0x0]
80007646:	d8 68       	*unknown*
80007648:	80 00       	ld.sh	r0,r0[0x0]
8000764a:	71 28       	ld.w	r8,r8[0x48]
8000764c:	80 00       	ld.sh	r0,r0[0x0]
8000764e:	d8 84       	*unknown*
80007650:	80 00       	ld.sh	r0,r0[0x0]
80007652:	66 b4       	ld.w	r4,r3[0x2c]
80007654:	80 00       	ld.sh	r0,r0[0x0]
80007656:	66 c8       	ld.w	r8,r3[0x30]
80007658:	80 00       	ld.sh	r0,r0[0x0]
8000765a:	d8 a0       	acall	0x228
8000765c:	80 00       	ld.sh	r0,r0[0x0]
8000765e:	65 e8       	ld.w	r8,r2[0x78]
80007660:	80 00       	ld.sh	r0,r0[0x0]
80007662:	d8 a8       	*unknown*
80007664:	80 00       	ld.sh	r0,r0[0x0]
80007666:	d8 b0       	acall	0x22c
80007668:	80 00       	ld.sh	r0,r0[0x0]
8000766a:	d8 c0       	acall	0x230
8000766c:	80 00       	ld.sh	r0,r0[0x0]
8000766e:	65 08       	ld.w	r8,r2[0x40]
80007670:	80 00       	ld.sh	r0,r0[0x0]
80007672:	64 b4       	ld.w	r4,r2[0x2c]
80007674:	80 00       	ld.sh	r0,r0[0x0]
80007676:	62 40       	ld.w	r0,r1[0x10]
80007678:	80 00       	ld.sh	r0,r0[0x0]
8000767a:	61 f8       	ld.w	r8,r0[0x7c]
8000767c:	80 00       	ld.sh	r0,r0[0x0]
8000767e:	5e 58       	retlt	r8
80007680:	80 00       	ld.sh	r0,r0[0x0]
80007682:	d8 5c       	*unknown*
80007684:	80 00       	ld.sh	r0,r0[0x0]
80007686:	5e 28       	reths	r8
80007688:	80 00       	ld.sh	r0,r0[0x0]
8000768a:	d8 f0       	acall	0x23c
8000768c:	80 00       	ld.sh	r0,r0[0x0]
8000768e:	62 f0       	ld.w	r0,r1[0x3c]
80007690:	80 00       	ld.sh	r0,r0[0x0]
80007692:	5f bc       	srhi	r12
80007694:	80 00       	ld.sh	r0,r0[0x0]
80007696:	d9 24       	*unknown*
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	d9 40       	acall	0x250
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	d9 54       	*unknown*
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	5e 70       	retpl	r0
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	d9 6c       	*unknown*
800076a8:	80 00       	ld.sh	r0,r0[0x0]
800076aa:	d9 78       	*unknown*
800076ac:	80 00       	ld.sh	r0,r0[0x0]
800076ae:	d9 88       	*unknown*
800076b0:	80 00       	ld.sh	r0,r0[0x0]
800076b2:	d9 a0       	acall	0x268
800076b4:	80 00       	ld.sh	r0,r0[0x0]
800076b6:	72 2c       	ld.w	r12,r9[0x8]
800076b8:	80 00       	ld.sh	r0,r0[0x0]
800076ba:	d9 b4       	*unknown*
800076bc:	80 00       	ld.sh	r0,r0[0x0]
800076be:	2f 76       	sub	r6,-9
800076c0:	80 00       	ld.sh	r0,r0[0x0]
800076c2:	65 80       	ld.w	r0,r2[0x60]
800076c4:	80 00       	ld.sh	r0,r0[0x0]
800076c6:	36 54       	mov	r4,101
800076c8:	80 00       	ld.sh	r0,r0[0x0]
800076ca:	d9 e4       	*unknown*
800076cc:	80 00       	ld.sh	r0,r0[0x0]
800076ce:	70 cc       	ld.w	r12,r8[0x30]
800076d0:	80 00       	ld.sh	r0,r0[0x0]
800076d2:	d9 d0       	acall	0x274
800076d4:	80 00       	ld.sh	r0,r0[0x0]
800076d6:	d9 e8       	*unknown*
800076d8:	80 00       	ld.sh	r0,r0[0x0]
800076da:	da 0c       	*unknown*
800076dc:	80 00       	ld.sh	r0,r0[0x0]
800076de:	da 24       	*unknown*
800076e0:	80 00       	ld.sh	r0,r0[0x0]
800076e2:	6e 2c       	ld.w	r12,r7[0x8]
800076e4:	80 00       	ld.sh	r0,r0[0x0]
800076e6:	67 ec       	ld.w	r12,r3[0x78]
800076e8:	00 00       	add	r0,r0
800076ea:	0c a8       	st.w	r6++,r8
800076ec:	80 00       	ld.sh	r0,r0[0x0]
800076ee:	da 3c       	*unknown*
800076f0:	80 00       	ld.sh	r0,r0[0x0]
800076f2:	da 58       	*unknown*
800076f4:	80 00       	ld.sh	r0,r0[0x0]
800076f6:	da 74       	*unknown*
800076f8:	80 00       	ld.sh	r0,r0[0x0]
800076fa:	67 34       	ld.w	r4,r3[0x4c]
800076fc:	80 00       	ld.sh	r0,r0[0x0]
800076fe:	67 8c       	ld.w	r12,r3[0x60]
80007700:	80 00       	ld.sh	r0,r0[0x0]
80007702:	6a 98       	ld.w	r8,r5[0x24]
80007704:	80 00       	ld.sh	r0,r0[0x0]
80007706:	da 84       	*unknown*
80007708:	80 00       	ld.sh	r0,r0[0x0]
8000770a:	da a4       	*unknown*
8000770c:	80 00       	ld.sh	r0,r0[0x0]
8000770e:	71 ac       	ld.w	r12,r8[0x68]
80007710:	80 00       	ld.sh	r0,r0[0x0]
80007712:	da b8       	*unknown*
80007714:	80 00       	ld.sh	r0,r0[0x0]
80007716:	2f 92       	sub	r2,-7
80007718:	80 00       	ld.sh	r0,r0[0x0]
8000771a:	da c8       	*unknown*
8000771c:	80 00       	ld.sh	r0,r0[0x0]
8000771e:	db 0c       	*unknown*
80007720:	80 00       	ld.sh	r0,r0[0x0]
80007722:	d8 4c       	*unknown*
80007724:	80 00       	ld.sh	r0,r0[0x0]
80007726:	2f 2c       	sub	r12,-14
80007728:	80 00       	ld.sh	r0,r0[0x0]
8000772a:	36 70       	mov	r0,103
8000772c:	80 00       	ld.sh	r0,r0[0x0]
8000772e:	da d8       	*unknown*
80007730:	80 00       	ld.sh	r0,r0[0x0]
80007732:	70 f0       	ld.w	r0,r8[0x3c]
80007734:	80 00       	ld.sh	r0,r0[0x0]
80007736:	da f4       	*unknown*

80007738 <memcmp>:
80007738:	d4 01       	pushm	lr
8000773a:	30 08       	mov	r8,0
8000773c:	c0 d8       	rjmp	80007756 <memcmp+0x1e>
8000773e:	f8 08 07 0e 	ld.ub	lr,r12[r8]
80007742:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007746:	20 1a       	sub	r10,1
80007748:	2f f8       	sub	r8,-1
8000774a:	f2 0e 18 00 	cp.b	lr,r9
8000774e:	c0 40       	breq	80007756 <memcmp+0x1e>
80007750:	fc 09 01 0c 	sub	r12,lr,r9
80007754:	d8 02       	popm	pc
80007756:	58 0a       	cp.w	r10,0
80007758:	cf 31       	brne	8000773e <memcmp+0x6>
8000775a:	14 9c       	mov	r12,r10
8000775c:	d8 02       	popm	pc

8000775e <memcpy>:
8000775e:	58 8a       	cp.w	r10,8
80007760:	c2 f5       	brlt	800077be <memcpy+0x60>
80007762:	f9 eb 10 09 	or	r9,r12,r11
80007766:	e2 19 00 03 	andl	r9,0x3,COH
8000776a:	e0 81 00 97 	brne	80007898 <memcpy+0x13a>
8000776e:	e0 4a 00 20 	cp.w	r10,32
80007772:	c3 b4       	brge	800077e8 <memcpy+0x8a>
80007774:	f4 08 14 02 	asr	r8,r10,0x2
80007778:	f0 09 11 08 	rsub	r9,r8,8
8000777c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80007780:	76 69       	ld.w	r9,r11[0x18]
80007782:	99 69       	st.w	r12[0x18],r9
80007784:	76 59       	ld.w	r9,r11[0x14]
80007786:	99 59       	st.w	r12[0x14],r9
80007788:	76 49       	ld.w	r9,r11[0x10]
8000778a:	99 49       	st.w	r12[0x10],r9
8000778c:	76 39       	ld.w	r9,r11[0xc]
8000778e:	99 39       	st.w	r12[0xc],r9
80007790:	76 29       	ld.w	r9,r11[0x8]
80007792:	99 29       	st.w	r12[0x8],r9
80007794:	76 19       	ld.w	r9,r11[0x4]
80007796:	99 19       	st.w	r12[0x4],r9
80007798:	76 09       	ld.w	r9,r11[0x0]
8000779a:	99 09       	st.w	r12[0x0],r9
8000779c:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800077a0:	f8 08 00 28 	add	r8,r12,r8<<0x2
800077a4:	e0 1a 00 03 	andl	r10,0x3
800077a8:	f4 0a 11 04 	rsub	r10,r10,4
800077ac:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800077b0:	17 a9       	ld.ub	r9,r11[0x2]
800077b2:	b0 a9       	st.b	r8[0x2],r9
800077b4:	17 99       	ld.ub	r9,r11[0x1]
800077b6:	b0 99       	st.b	r8[0x1],r9
800077b8:	17 89       	ld.ub	r9,r11[0x0]
800077ba:	b0 89       	st.b	r8[0x0],r9
800077bc:	5e fc       	retal	r12
800077be:	f4 0a 11 09 	rsub	r10,r10,9
800077c2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800077c6:	17 f9       	ld.ub	r9,r11[0x7]
800077c8:	b8 f9       	st.b	r12[0x7],r9
800077ca:	17 e9       	ld.ub	r9,r11[0x6]
800077cc:	b8 e9       	st.b	r12[0x6],r9
800077ce:	17 d9       	ld.ub	r9,r11[0x5]
800077d0:	b8 d9       	st.b	r12[0x5],r9
800077d2:	17 c9       	ld.ub	r9,r11[0x4]
800077d4:	b8 c9       	st.b	r12[0x4],r9
800077d6:	17 b9       	ld.ub	r9,r11[0x3]
800077d8:	b8 b9       	st.b	r12[0x3],r9
800077da:	17 a9       	ld.ub	r9,r11[0x2]
800077dc:	b8 a9       	st.b	r12[0x2],r9
800077de:	17 99       	ld.ub	r9,r11[0x1]
800077e0:	b8 99       	st.b	r12[0x1],r9
800077e2:	17 89       	ld.ub	r9,r11[0x0]
800077e4:	b8 89       	st.b	r12[0x0],r9
800077e6:	5e fc       	retal	r12
800077e8:	eb cd 40 c0 	pushm	r6-r7,lr
800077ec:	18 99       	mov	r9,r12
800077ee:	22 0a       	sub	r10,32
800077f0:	b7 07       	ld.d	r6,r11++
800077f2:	b3 26       	st.d	r9++,r6
800077f4:	b7 07       	ld.d	r6,r11++
800077f6:	b3 26       	st.d	r9++,r6
800077f8:	b7 07       	ld.d	r6,r11++
800077fa:	b3 26       	st.d	r9++,r6
800077fc:	b7 07       	ld.d	r6,r11++
800077fe:	b3 26       	st.d	r9++,r6
80007800:	22 0a       	sub	r10,32
80007802:	cf 74       	brge	800077f0 <memcpy+0x92>
80007804:	2f 0a       	sub	r10,-16
80007806:	c0 65       	brlt	80007812 <memcpy+0xb4>
80007808:	b7 07       	ld.d	r6,r11++
8000780a:	b3 26       	st.d	r9++,r6
8000780c:	b7 07       	ld.d	r6,r11++
8000780e:	b3 26       	st.d	r9++,r6
80007810:	21 0a       	sub	r10,16
80007812:	5c 3a       	neg	r10
80007814:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80007818:	d7 03       	nop
8000781a:	d7 03       	nop
8000781c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80007820:	f3 66 00 0e 	st.b	r9[14],r6
80007824:	f7 36 00 0d 	ld.ub	r6,r11[13]
80007828:	f3 66 00 0d 	st.b	r9[13],r6
8000782c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80007830:	f3 66 00 0c 	st.b	r9[12],r6
80007834:	f7 36 00 0b 	ld.ub	r6,r11[11]
80007838:	f3 66 00 0b 	st.b	r9[11],r6
8000783c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80007840:	f3 66 00 0a 	st.b	r9[10],r6
80007844:	f7 36 00 09 	ld.ub	r6,r11[9]
80007848:	f3 66 00 09 	st.b	r9[9],r6
8000784c:	f7 36 00 08 	ld.ub	r6,r11[8]
80007850:	f3 66 00 08 	st.b	r9[8],r6
80007854:	f7 36 00 07 	ld.ub	r6,r11[7]
80007858:	f3 66 00 07 	st.b	r9[7],r6
8000785c:	f7 36 00 06 	ld.ub	r6,r11[6]
80007860:	f3 66 00 06 	st.b	r9[6],r6
80007864:	f7 36 00 05 	ld.ub	r6,r11[5]
80007868:	f3 66 00 05 	st.b	r9[5],r6
8000786c:	f7 36 00 04 	ld.ub	r6,r11[4]
80007870:	f3 66 00 04 	st.b	r9[4],r6
80007874:	f7 36 00 03 	ld.ub	r6,r11[3]
80007878:	f3 66 00 03 	st.b	r9[3],r6
8000787c:	f7 36 00 02 	ld.ub	r6,r11[2]
80007880:	f3 66 00 02 	st.b	r9[2],r6
80007884:	f7 36 00 01 	ld.ub	r6,r11[1]
80007888:	f3 66 00 01 	st.b	r9[1],r6
8000788c:	f7 36 00 00 	ld.ub	r6,r11[0]
80007890:	f3 66 00 00 	st.b	r9[0],r6
80007894:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007898:	20 1a       	sub	r10,1
8000789a:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000789e:	f8 0a 0b 09 	st.b	r12[r10],r9
800078a2:	cf b1       	brne	80007898 <memcpy+0x13a>
800078a4:	5e fc       	retal	r12

800078a6 <memset>:
800078a6:	18 98       	mov	r8,r12
800078a8:	c0 38       	rjmp	800078ae <memset+0x8>
800078aa:	10 cb       	st.b	r8++,r11
800078ac:	20 1a       	sub	r10,1
800078ae:	58 0a       	cp.w	r10,0
800078b0:	cf d1       	brne	800078aa <memset+0x4>
800078b2:	5e fc       	retal	r12

800078b4 <sprintf>:
800078b4:	d4 01       	pushm	lr
800078b6:	21 7d       	sub	sp,92
800078b8:	e0 68 ff ff 	mov	r8,65535
800078bc:	ea 18 7f ff 	orh	r8,0x7fff
800078c0:	50 58       	stdsp	sp[0x14],r8
800078c2:	50 28       	stdsp	sp[0x8],r8
800078c4:	e0 68 02 08 	mov	r8,520
800078c8:	ba 68       	st.h	sp[0xc],r8
800078ca:	3f f8       	mov	r8,-1
800078cc:	ba 78       	st.h	sp[0xe],r8
800078ce:	48 88       	lddpc	r8,800078ec <sprintf+0x38>
800078d0:	50 4c       	stdsp	sp[0x10],r12
800078d2:	16 9a       	mov	r10,r11
800078d4:	50 0c       	stdsp	sp[0x0],r12
800078d6:	fa c9 ff a0 	sub	r9,sp,-96
800078da:	70 0c       	ld.w	r12,r8[0x0]
800078dc:	1a 9b       	mov	r11,sp
800078de:	ca 3d       	rcall	80007c24 <_vfprintf_r>
800078e0:	30 09       	mov	r9,0
800078e2:	40 08       	lddsp	r8,sp[0x0]
800078e4:	b0 89       	st.b	r8[0x0],r9
800078e6:	2e 9d       	sub	sp,-92
800078e8:	d8 02       	popm	pc
800078ea:	d7 03       	nop
800078ec:	00 00       	add	r0,r0
800078ee:	01 00       	ld.w	r0,r0++

800078f0 <get_arg>:
800078f0:	d4 31       	pushm	r0-r7,lr
800078f2:	20 8d       	sub	sp,32
800078f4:	fa c4 ff bc 	sub	r4,sp,-68
800078f8:	50 4b       	stdsp	sp[0x10],r11
800078fa:	68 2e       	ld.w	lr,r4[0x8]
800078fc:	50 58       	stdsp	sp[0x14],r8
800078fe:	12 96       	mov	r6,r9
80007900:	7c 0b       	ld.w	r11,lr[0x0]
80007902:	70 05       	ld.w	r5,r8[0x0]
80007904:	50 6e       	stdsp	sp[0x18],lr
80007906:	58 0b       	cp.w	r11,0
80007908:	f4 0b 17 00 	moveq	r11,r10
8000790c:	68 03       	ld.w	r3,r4[0x0]
8000790e:	68 11       	ld.w	r1,r4[0x4]
80007910:	40 49       	lddsp	r9,sp[0x10]
80007912:	30 08       	mov	r8,0
80007914:	c2 a9       	rjmp	80007b68 <get_arg+0x278>
80007916:	2f fb       	sub	r11,-1
80007918:	32 5c       	mov	r12,37
8000791a:	17 8a       	ld.ub	r10,r11[0x0]
8000791c:	f8 0a 18 00 	cp.b	r10,r12
80007920:	5f 1e       	srne	lr
80007922:	f0 0a 18 00 	cp.b	r10,r8
80007926:	5f 1c       	srne	r12
80007928:	fd ec 00 0c 	and	r12,lr,r12
8000792c:	f0 0c 18 00 	cp.b	r12,r8
80007930:	cf 31       	brne	80007916 <get_arg+0x26>
80007932:	58 0a       	cp.w	r10,0
80007934:	e0 80 01 27 	breq	80007b82 <get_arg+0x292>
80007938:	30 0c       	mov	r12,0
8000793a:	3f fa       	mov	r10,-1
8000793c:	18 90       	mov	r0,r12
8000793e:	50 3a       	stdsp	sp[0xc],r10
80007940:	18 94       	mov	r4,r12
80007942:	18 92       	mov	r2,r12
80007944:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80007948:	16 97       	mov	r7,r11
8000794a:	50 7c       	stdsp	sp[0x1c],r12
8000794c:	4c dc       	lddpc	r12,80007a80 <get_arg+0x190>
8000794e:	0f 3a       	ld.ub	r10,r7++
80007950:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80007954:	40 7c       	lddsp	r12,sp[0x1c]
80007956:	1c 0c       	add	r12,lr
80007958:	4c be       	lddpc	lr,80007a84 <get_arg+0x194>
8000795a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000795e:	20 1e       	sub	lr,1
80007960:	50 0e       	stdsp	sp[0x0],lr
80007962:	4c ae       	lddpc	lr,80007a88 <get_arg+0x198>
80007964:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80007968:	50 7c       	stdsp	sp[0x1c],r12
8000796a:	40 0c       	lddsp	r12,sp[0x0]
8000796c:	58 7c       	cp.w	r12,7
8000796e:	e0 8b 00 f6 	brhi	80007b5a <get_arg+0x26a>
80007972:	4c 7e       	lddpc	lr,80007a8c <get_arg+0x19c>
80007974:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80007978:	36 8b       	mov	r11,104
8000797a:	f6 0a 18 00 	cp.b	r10,r11
8000797e:	e0 80 00 ee 	breq	80007b5a <get_arg+0x26a>
80007982:	37 1b       	mov	r11,113
80007984:	f6 0a 18 00 	cp.b	r10,r11
80007988:	c0 70       	breq	80007996 <get_arg+0xa6>
8000798a:	34 cb       	mov	r11,76
8000798c:	f6 0a 18 00 	cp.b	r10,r11
80007990:	c0 51       	brne	8000799a <get_arg+0xaa>
80007992:	a3 b4       	sbr	r4,0x3
80007994:	ce 38       	rjmp	80007b5a <get_arg+0x26a>
80007996:	a5 b4       	sbr	r4,0x5
80007998:	ce 18       	rjmp	80007b5a <get_arg+0x26a>
8000799a:	0f 8b       	ld.ub	r11,r7[0x0]
8000799c:	36 ca       	mov	r10,108
8000799e:	f4 0b 18 00 	cp.b	r11,r10
800079a2:	c0 51       	brne	800079ac <get_arg+0xbc>
800079a4:	a5 b4       	sbr	r4,0x5
800079a6:	ee cb ff ff 	sub	r11,r7,-1
800079aa:	cd 98       	rjmp	80007b5c <get_arg+0x26c>
800079ac:	a5 a4       	sbr	r4,0x4
800079ae:	cd 68       	rjmp	80007b5a <get_arg+0x26a>
800079b0:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800079b4:	36 7c       	mov	r12,103
800079b6:	f8 0a 18 00 	cp.b	r10,r12
800079ba:	e0 8b 00 27 	brhi	80007a08 <get_arg+0x118>
800079be:	36 5b       	mov	r11,101
800079c0:	f6 0a 18 00 	cp.b	r10,r11
800079c4:	c4 82       	brcc	80007a54 <get_arg+0x164>
800079c6:	34 fb       	mov	r11,79
800079c8:	f6 0a 18 00 	cp.b	r10,r11
800079cc:	c4 80       	breq	80007a5c <get_arg+0x16c>
800079ce:	e0 8b 00 0c 	brhi	800079e6 <get_arg+0xf6>
800079d2:	34 5b       	mov	r11,69
800079d4:	f6 0a 18 00 	cp.b	r10,r11
800079d8:	c3 e0       	breq	80007a54 <get_arg+0x164>
800079da:	34 7b       	mov	r11,71
800079dc:	f6 0a 18 00 	cp.b	r10,r11
800079e0:	c3 a0       	breq	80007a54 <get_arg+0x164>
800079e2:	34 4b       	mov	r11,68
800079e4:	c0 88       	rjmp	800079f4 <get_arg+0x104>
800079e6:	35 8b       	mov	r11,88
800079e8:	f6 0a 18 00 	cp.b	r10,r11
800079ec:	c2 c0       	breq	80007a44 <get_arg+0x154>
800079ee:	e0 8b 00 07 	brhi	800079fc <get_arg+0x10c>
800079f2:	35 5b       	mov	r11,85
800079f4:	f6 0a 18 00 	cp.b	r10,r11
800079f8:	c3 51       	brne	80007a62 <get_arg+0x172>
800079fa:	c3 18       	rjmp	80007a5c <get_arg+0x16c>
800079fc:	36 3b       	mov	r11,99
800079fe:	f6 0a 18 00 	cp.b	r10,r11
80007a02:	c2 f0       	breq	80007a60 <get_arg+0x170>
80007a04:	36 4b       	mov	r11,100
80007a06:	c0 e8       	rjmp	80007a22 <get_arg+0x132>
80007a08:	37 0b       	mov	r11,112
80007a0a:	f6 0a 18 00 	cp.b	r10,r11
80007a0e:	c2 50       	breq	80007a58 <get_arg+0x168>
80007a10:	e0 8b 00 0d 	brhi	80007a2a <get_arg+0x13a>
80007a14:	36 eb       	mov	r11,110
80007a16:	f6 0a 18 00 	cp.b	r10,r11
80007a1a:	c1 f0       	breq	80007a58 <get_arg+0x168>
80007a1c:	e0 8b 00 14 	brhi	80007a44 <get_arg+0x154>
80007a20:	36 9b       	mov	r11,105
80007a22:	f6 0a 18 00 	cp.b	r10,r11
80007a26:	c1 e1       	brne	80007a62 <get_arg+0x172>
80007a28:	c0 e8       	rjmp	80007a44 <get_arg+0x154>
80007a2a:	37 5b       	mov	r11,117
80007a2c:	f6 0a 18 00 	cp.b	r10,r11
80007a30:	c0 a0       	breq	80007a44 <get_arg+0x154>
80007a32:	37 8b       	mov	r11,120
80007a34:	f6 0a 18 00 	cp.b	r10,r11
80007a38:	c0 60       	breq	80007a44 <get_arg+0x154>
80007a3a:	37 3b       	mov	r11,115
80007a3c:	f6 0a 18 00 	cp.b	r10,r11
80007a40:	c1 11       	brne	80007a62 <get_arg+0x172>
80007a42:	c0 b8       	rjmp	80007a58 <get_arg+0x168>
80007a44:	ed b4 00 04 	bld	r4,0x4
80007a48:	c0 a0       	breq	80007a5c <get_arg+0x16c>
80007a4a:	ed b4 00 05 	bld	r4,0x5
80007a4e:	c0 91       	brne	80007a60 <get_arg+0x170>
80007a50:	30 20       	mov	r0,2
80007a52:	c0 88       	rjmp	80007a62 <get_arg+0x172>
80007a54:	30 40       	mov	r0,4
80007a56:	c0 68       	rjmp	80007a62 <get_arg+0x172>
80007a58:	30 30       	mov	r0,3
80007a5a:	c0 48       	rjmp	80007a62 <get_arg+0x172>
80007a5c:	30 10       	mov	r0,1
80007a5e:	c0 28       	rjmp	80007a62 <get_arg+0x172>
80007a60:	30 00       	mov	r0,0
80007a62:	40 3b       	lddsp	r11,sp[0xc]
80007a64:	5b fb       	cp.w	r11,-1
80007a66:	c0 40       	breq	80007a6e <get_arg+0x17e>
80007a68:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80007a6c:	c7 78       	rjmp	80007b5a <get_arg+0x26a>
80007a6e:	58 60       	cp.w	r0,6
80007a70:	e0 8b 00 75 	brhi	80007b5a <get_arg+0x26a>
80007a74:	6c 0a       	ld.w	r10,r6[0x0]
80007a76:	ea cc ff ff 	sub	r12,r5,-1
80007a7a:	48 6e       	lddpc	lr,80007a90 <get_arg+0x1a0>
80007a7c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80007a80:	80 00       	ld.sh	r0,r0[0x0]
80007a82:	de f4       	*unknown*
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	de 2c       	*unknown*
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	dd c0       	acall	0x370
80007a8c:	80 00       	ld.sh	r0,r0[0x0]
80007a8e:	dc 20       	acall	0x308
80007a90:	80 00       	ld.sh	r0,r0[0x0]
80007a92:	dc 40       	acall	0x310
80007a94:	f4 cb ff f8 	sub	r11,r10,-8
80007a98:	8d 0b       	st.w	r6[0x0],r11
80007a9a:	f4 ea 00 00 	ld.d	r10,r10[0]
80007a9e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80007aa2:	c0 f8       	rjmp	80007ac0 <get_arg+0x1d0>
80007aa4:	f4 cb ff fc 	sub	r11,r10,-4
80007aa8:	8d 0b       	st.w	r6[0x0],r11
80007aaa:	74 0a       	ld.w	r10,r10[0x0]
80007aac:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80007ab0:	c0 88       	rjmp	80007ac0 <get_arg+0x1d0>
80007ab2:	f4 cb ff f8 	sub	r11,r10,-8
80007ab6:	8d 0b       	st.w	r6[0x0],r11
80007ab8:	f4 ea 00 00 	ld.d	r10,r10[0]
80007abc:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80007ac0:	0e 9b       	mov	r11,r7
80007ac2:	18 95       	mov	r5,r12
80007ac4:	c4 c8       	rjmp	80007b5c <get_arg+0x26c>
80007ac6:	62 0a       	ld.w	r10,r1[0x0]
80007ac8:	5b fa       	cp.w	r10,-1
80007aca:	c0 a1       	brne	80007ade <get_arg+0x1ee>
80007acc:	50 19       	stdsp	sp[0x4],r9
80007ace:	50 28       	stdsp	sp[0x8],r8
80007ad0:	e0 6a 00 80 	mov	r10,128
80007ad4:	30 0b       	mov	r11,0
80007ad6:	02 9c       	mov	r12,r1
80007ad8:	ce 7e       	rcall	800078a6 <memset>
80007ada:	40 28       	lddsp	r8,sp[0x8]
80007adc:	40 19       	lddsp	r9,sp[0x4]
80007ade:	e4 cc 00 01 	sub	r12,r2,1
80007ae2:	0e 9b       	mov	r11,r7
80007ae4:	50 3c       	stdsp	sp[0xc],r12
80007ae6:	f2 0c 0c 49 	max	r9,r9,r12
80007aea:	c3 98       	rjmp	80007b5c <get_arg+0x26c>
80007aec:	62 0a       	ld.w	r10,r1[0x0]
80007aee:	5b fa       	cp.w	r10,-1
80007af0:	c0 a1       	brne	80007b04 <get_arg+0x214>
80007af2:	50 19       	stdsp	sp[0x4],r9
80007af4:	50 28       	stdsp	sp[0x8],r8
80007af6:	e0 6a 00 80 	mov	r10,128
80007afa:	30 0b       	mov	r11,0
80007afc:	02 9c       	mov	r12,r1
80007afe:	cd 4e       	rcall	800078a6 <memset>
80007b00:	40 28       	lddsp	r8,sp[0x8]
80007b02:	40 19       	lddsp	r9,sp[0x4]
80007b04:	20 12       	sub	r2,1
80007b06:	30 0a       	mov	r10,0
80007b08:	0e 9b       	mov	r11,r7
80007b0a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80007b0e:	f2 02 0c 49 	max	r9,r9,r2
80007b12:	c2 58       	rjmp	80007b5c <get_arg+0x26c>
80007b14:	16 97       	mov	r7,r11
80007b16:	6c 0a       	ld.w	r10,r6[0x0]
80007b18:	f4 cb ff fc 	sub	r11,r10,-4
80007b1c:	8d 0b       	st.w	r6[0x0],r11
80007b1e:	74 0a       	ld.w	r10,r10[0x0]
80007b20:	0e 9b       	mov	r11,r7
80007b22:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80007b26:	2f f5       	sub	r5,-1
80007b28:	c1 a8       	rjmp	80007b5c <get_arg+0x26c>
80007b2a:	f4 c2 00 30 	sub	r2,r10,48
80007b2e:	c0 68       	rjmp	80007b3a <get_arg+0x24a>
80007b30:	e4 02 00 22 	add	r2,r2,r2<<0x2
80007b34:	2f f7       	sub	r7,-1
80007b36:	f4 02 00 12 	add	r2,r10,r2<<0x1
80007b3a:	0f 8a       	ld.ub	r10,r7[0x0]
80007b3c:	58 0a       	cp.w	r10,0
80007b3e:	c0 e0       	breq	80007b5a <get_arg+0x26a>
80007b40:	23 0a       	sub	r10,48
80007b42:	58 9a       	cp.w	r10,9
80007b44:	fe 98 ff f6 	brls	80007b30 <get_arg+0x240>
80007b48:	c0 98       	rjmp	80007b5a <get_arg+0x26a>
80007b4a:	2f f7       	sub	r7,-1
80007b4c:	0f 8a       	ld.ub	r10,r7[0x0]
80007b4e:	58 0a       	cp.w	r10,0
80007b50:	c0 50       	breq	80007b5a <get_arg+0x26a>
80007b52:	23 0a       	sub	r10,48
80007b54:	58 9a       	cp.w	r10,9
80007b56:	fe 98 ff fa 	brls	80007b4a <get_arg+0x25a>
80007b5a:	0e 9b       	mov	r11,r7
80007b5c:	40 7c       	lddsp	r12,sp[0x1c]
80007b5e:	30 ba       	mov	r10,11
80007b60:	f4 0c 18 00 	cp.b	r12,r10
80007b64:	fe 91 fe f0 	brne	80007944 <get_arg+0x54>
80007b68:	40 42       	lddsp	r2,sp[0x10]
80007b6a:	17 8c       	ld.ub	r12,r11[0x0]
80007b6c:	0a 32       	cp.w	r2,r5
80007b6e:	5f 4a       	srge	r10
80007b70:	f0 0c 18 00 	cp.b	r12,r8
80007b74:	5f 1c       	srne	r12
80007b76:	f9 ea 00 0a 	and	r10,r12,r10
80007b7a:	f0 0a 18 00 	cp.b	r10,r8
80007b7e:	fe 91 fe cd 	brne	80007918 <get_arg+0x28>
80007b82:	30 08       	mov	r8,0
80007b84:	40 4e       	lddsp	lr,sp[0x10]
80007b86:	17 8a       	ld.ub	r10,r11[0x0]
80007b88:	e2 05 00 21 	add	r1,r1,r5<<0x2
80007b8c:	f0 0a 18 00 	cp.b	r10,r8
80007b90:	fc 09 17 10 	movne	r9,lr
80007b94:	e6 05 00 38 	add	r8,r3,r5<<0x3
80007b98:	06 9e       	mov	lr,r3
80007b9a:	c2 a8       	rjmp	80007bee <get_arg+0x2fe>
80007b9c:	62 0a       	ld.w	r10,r1[0x0]
80007b9e:	58 3a       	cp.w	r10,3
80007ba0:	c1 e0       	breq	80007bdc <get_arg+0x2ec>
80007ba2:	e0 89 00 07 	brgt	80007bb0 <get_arg+0x2c0>
80007ba6:	58 1a       	cp.w	r10,1
80007ba8:	c1 a0       	breq	80007bdc <get_arg+0x2ec>
80007baa:	58 2a       	cp.w	r10,2
80007bac:	c1 81       	brne	80007bdc <get_arg+0x2ec>
80007bae:	c0 58       	rjmp	80007bb8 <get_arg+0x2c8>
80007bb0:	58 5a       	cp.w	r10,5
80007bb2:	c0 c0       	breq	80007bca <get_arg+0x2da>
80007bb4:	c0 b5       	brlt	80007bca <get_arg+0x2da>
80007bb6:	c1 38       	rjmp	80007bdc <get_arg+0x2ec>
80007bb8:	6c 0a       	ld.w	r10,r6[0x0]
80007bba:	f4 cc ff f8 	sub	r12,r10,-8
80007bbe:	8d 0c       	st.w	r6[0x0],r12
80007bc0:	f4 e2 00 00 	ld.d	r2,r10[0]
80007bc4:	f0 e3 00 00 	st.d	r8[0],r2
80007bc8:	c1 08       	rjmp	80007be8 <get_arg+0x2f8>
80007bca:	6c 0a       	ld.w	r10,r6[0x0]
80007bcc:	f4 cc ff f8 	sub	r12,r10,-8
80007bd0:	8d 0c       	st.w	r6[0x0],r12
80007bd2:	f4 e2 00 00 	ld.d	r2,r10[0]
80007bd6:	f0 e3 00 00 	st.d	r8[0],r2
80007bda:	c0 78       	rjmp	80007be8 <get_arg+0x2f8>
80007bdc:	6c 0a       	ld.w	r10,r6[0x0]
80007bde:	f4 cc ff fc 	sub	r12,r10,-4
80007be2:	8d 0c       	st.w	r6[0x0],r12
80007be4:	74 0a       	ld.w	r10,r10[0x0]
80007be6:	91 0a       	st.w	r8[0x0],r10
80007be8:	2f f5       	sub	r5,-1
80007bea:	2f 88       	sub	r8,-8
80007bec:	2f c1       	sub	r1,-4
80007bee:	12 35       	cp.w	r5,r9
80007bf0:	fe 9a ff d6 	brle	80007b9c <get_arg+0x2ac>
80007bf4:	1c 93       	mov	r3,lr
80007bf6:	40 52       	lddsp	r2,sp[0x14]
80007bf8:	40 6e       	lddsp	lr,sp[0x18]
80007bfa:	85 05       	st.w	r2[0x0],r5
80007bfc:	9d 0b       	st.w	lr[0x0],r11
80007bfe:	40 4b       	lddsp	r11,sp[0x10]
80007c00:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80007c04:	2f 8d       	sub	sp,-32
80007c06:	d8 32       	popm	r0-r7,pc

80007c08 <__sprint_r>:
80007c08:	d4 21       	pushm	r4-r7,lr
80007c0a:	14 97       	mov	r7,r10
80007c0c:	74 28       	ld.w	r8,r10[0x8]
80007c0e:	58 08       	cp.w	r8,0
80007c10:	c0 41       	brne	80007c18 <__sprint_r+0x10>
80007c12:	95 18       	st.w	r10[0x4],r8
80007c14:	10 9c       	mov	r12,r8
80007c16:	d8 22       	popm	r4-r7,pc
80007c18:	e0 a0 18 c2 	rcall	8000ad9c <__sfvwrite_r>
80007c1c:	30 08       	mov	r8,0
80007c1e:	8f 18       	st.w	r7[0x4],r8
80007c20:	8f 28       	st.w	r7[0x8],r8
80007c22:	d8 22       	popm	r4-r7,pc

80007c24 <_vfprintf_r>:
80007c24:	d4 31       	pushm	r0-r7,lr
80007c26:	fa cd 06 bc 	sub	sp,sp,1724
80007c2a:	51 09       	stdsp	sp[0x40],r9
80007c2c:	16 91       	mov	r1,r11
80007c2e:	14 97       	mov	r7,r10
80007c30:	18 95       	mov	r5,r12
80007c32:	e0 a0 1a 2d 	rcall	8000b08c <_localeconv_r>
80007c36:	78 0c       	ld.w	r12,r12[0x0]
80007c38:	50 cc       	stdsp	sp[0x30],r12
80007c3a:	58 05       	cp.w	r5,0
80007c3c:	c0 70       	breq	80007c4a <_vfprintf_r+0x26>
80007c3e:	6a 68       	ld.w	r8,r5[0x18]
80007c40:	58 08       	cp.w	r8,0
80007c42:	c0 41       	brne	80007c4a <_vfprintf_r+0x26>
80007c44:	0a 9c       	mov	r12,r5
80007c46:	e0 a0 17 47 	rcall	8000aad4 <__sinit>
80007c4a:	4c f8       	lddpc	r8,80007d84 <_vfprintf_r+0x160>
80007c4c:	10 31       	cp.w	r1,r8
80007c4e:	c0 31       	brne	80007c54 <_vfprintf_r+0x30>
80007c50:	6a 01       	ld.w	r1,r5[0x0]
80007c52:	c0 a8       	rjmp	80007c66 <_vfprintf_r+0x42>
80007c54:	4c d8       	lddpc	r8,80007d88 <_vfprintf_r+0x164>
80007c56:	10 31       	cp.w	r1,r8
80007c58:	c0 31       	brne	80007c5e <_vfprintf_r+0x3a>
80007c5a:	6a 11       	ld.w	r1,r5[0x4]
80007c5c:	c0 58       	rjmp	80007c66 <_vfprintf_r+0x42>
80007c5e:	4c c8       	lddpc	r8,80007d8c <_vfprintf_r+0x168>
80007c60:	10 31       	cp.w	r1,r8
80007c62:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80007c66:	82 68       	ld.sh	r8,r1[0xc]
80007c68:	ed b8 00 03 	bld	r8,0x3
80007c6c:	c0 41       	brne	80007c74 <_vfprintf_r+0x50>
80007c6e:	62 48       	ld.w	r8,r1[0x10]
80007c70:	58 08       	cp.w	r8,0
80007c72:	c0 71       	brne	80007c80 <_vfprintf_r+0x5c>
80007c74:	02 9b       	mov	r11,r1
80007c76:	0a 9c       	mov	r12,r5
80007c78:	e0 a0 0f 64 	rcall	80009b40 <__swsetup_r>
80007c7c:	e0 81 0f 5c 	brne	80009b34 <_vfprintf_r+0x1f10>
80007c80:	82 68       	ld.sh	r8,r1[0xc]
80007c82:	10 99       	mov	r9,r8
80007c84:	e2 19 00 1a 	andl	r9,0x1a,COH
80007c88:	58 a9       	cp.w	r9,10
80007c8a:	c3 c1       	brne	80007d02 <_vfprintf_r+0xde>
80007c8c:	82 79       	ld.sh	r9,r1[0xe]
80007c8e:	30 0a       	mov	r10,0
80007c90:	f4 09 19 00 	cp.h	r9,r10
80007c94:	c3 75       	brlt	80007d02 <_vfprintf_r+0xde>
80007c96:	a1 d8       	cbr	r8,0x1
80007c98:	fb 58 05 d0 	st.h	sp[1488],r8
80007c9c:	62 88       	ld.w	r8,r1[0x20]
80007c9e:	fb 48 05 e4 	st.w	sp[1508],r8
80007ca2:	62 a8       	ld.w	r8,r1[0x28]
80007ca4:	fb 48 05 ec 	st.w	sp[1516],r8
80007ca8:	fa c8 ff bc 	sub	r8,sp,-68
80007cac:	fb 48 05 d4 	st.w	sp[1492],r8
80007cb0:	fb 48 05 c4 	st.w	sp[1476],r8
80007cb4:	e0 68 04 00 	mov	r8,1024
80007cb8:	fb 48 05 d8 	st.w	sp[1496],r8
80007cbc:	fb 48 05 cc 	st.w	sp[1484],r8
80007cc0:	30 08       	mov	r8,0
80007cc2:	fb 59 05 d2 	st.h	sp[1490],r9
80007cc6:	0e 9a       	mov	r10,r7
80007cc8:	41 09       	lddsp	r9,sp[0x40]
80007cca:	fa c7 fa 3c 	sub	r7,sp,-1476
80007cce:	fb 48 05 dc 	st.w	sp[1500],r8
80007cd2:	0a 9c       	mov	r12,r5
80007cd4:	0e 9b       	mov	r11,r7
80007cd6:	ca 7f       	rcall	80007c24 <_vfprintf_r>
80007cd8:	50 bc       	stdsp	sp[0x2c],r12
80007cda:	c0 95       	brlt	80007cec <_vfprintf_r+0xc8>
80007cdc:	0e 9b       	mov	r11,r7
80007cde:	0a 9c       	mov	r12,r5
80007ce0:	e0 a0 16 1e 	rcall	8000a91c <_fflush_r>
80007ce4:	40 be       	lddsp	lr,sp[0x2c]
80007ce6:	f9 be 01 ff 	movne	lr,-1
80007cea:	50 be       	stdsp	sp[0x2c],lr
80007cec:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80007cf0:	ed b8 00 06 	bld	r8,0x6
80007cf4:	e0 81 0f 22 	brne	80009b38 <_vfprintf_r+0x1f14>
80007cf8:	82 68       	ld.sh	r8,r1[0xc]
80007cfa:	a7 a8       	sbr	r8,0x6
80007cfc:	a2 68       	st.h	r1[0xc],r8
80007cfe:	e0 8f 0f 1d 	bral	80009b38 <_vfprintf_r+0x1f14>
80007d02:	30 08       	mov	r8,0
80007d04:	fb 48 06 b4 	st.w	sp[1716],r8
80007d08:	fb 48 06 90 	st.w	sp[1680],r8
80007d0c:	fb 48 06 8c 	st.w	sp[1676],r8
80007d10:	fb 48 06 b0 	st.w	sp[1712],r8
80007d14:	30 08       	mov	r8,0
80007d16:	30 09       	mov	r9,0
80007d18:	50 a7       	stdsp	sp[0x28],r7
80007d1a:	50 78       	stdsp	sp[0x1c],r8
80007d1c:	fa c4 f9 e0 	sub	r4,sp,-1568
80007d20:	3f f8       	mov	r8,-1
80007d22:	50 59       	stdsp	sp[0x14],r9
80007d24:	fb 44 06 88 	st.w	sp[1672],r4
80007d28:	fb 48 05 44 	st.w	sp[1348],r8
80007d2c:	12 9c       	mov	r12,r9
80007d2e:	50 69       	stdsp	sp[0x18],r9
80007d30:	50 d9       	stdsp	sp[0x34],r9
80007d32:	50 e9       	stdsp	sp[0x38],r9
80007d34:	50 b9       	stdsp	sp[0x2c],r9
80007d36:	12 97       	mov	r7,r9
80007d38:	40 a2       	lddsp	r2,sp[0x28]
80007d3a:	32 5a       	mov	r10,37
80007d3c:	30 08       	mov	r8,0
80007d3e:	c0 28       	rjmp	80007d42 <_vfprintf_r+0x11e>
80007d40:	2f f2       	sub	r2,-1
80007d42:	05 89       	ld.ub	r9,r2[0x0]
80007d44:	f0 09 18 00 	cp.b	r9,r8
80007d48:	5f 1b       	srne	r11
80007d4a:	f4 09 18 00 	cp.b	r9,r10
80007d4e:	5f 19       	srne	r9
80007d50:	f3 eb 00 0b 	and	r11,r9,r11
80007d54:	f0 0b 18 00 	cp.b	r11,r8
80007d58:	cf 41       	brne	80007d40 <_vfprintf_r+0x11c>
80007d5a:	40 ab       	lddsp	r11,sp[0x28]
80007d5c:	e4 0b 01 06 	sub	r6,r2,r11
80007d60:	c2 40       	breq	80007da8 <_vfprintf_r+0x184>
80007d62:	fa f8 06 90 	ld.w	r8,sp[1680]
80007d66:	0c 08       	add	r8,r6
80007d68:	89 0b       	st.w	r4[0x0],r11
80007d6a:	fb 48 06 90 	st.w	sp[1680],r8
80007d6e:	89 16       	st.w	r4[0x4],r6
80007d70:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007d74:	2f f8       	sub	r8,-1
80007d76:	fb 48 06 8c 	st.w	sp[1676],r8
80007d7a:	58 78       	cp.w	r8,7
80007d7c:	e0 89 00 0a 	brgt	80007d90 <_vfprintf_r+0x16c>
80007d80:	2f 84       	sub	r4,-8
80007d82:	c1 08       	rjmp	80007da2 <_vfprintf_r+0x17e>
80007d84:	80 00       	ld.sh	r0,r0[0x0]
80007d86:	e0 04       	*unknown*
80007d88:	80 00       	ld.sh	r0,r0[0x0]
80007d8a:	e0 24 80 00 	sub	r4,32768
80007d8e:	e0 44 fa ca 	cp.w	r4,64202
80007d92:	f9 78 02 9b 	stcond	r12[667],r8
80007d96:	0a 9c       	mov	r12,r5
80007d98:	c3 8f       	rcall	80007c08 <__sprint_r>
80007d9a:	e0 81 0e c9 	brne	80009b2c <_vfprintf_r+0x1f08>
80007d9e:	fa c4 f9 e0 	sub	r4,sp,-1568
80007da2:	40 ba       	lddsp	r10,sp[0x2c]
80007da4:	0c 0a       	add	r10,r6
80007da6:	50 ba       	stdsp	sp[0x2c],r10
80007da8:	05 89       	ld.ub	r9,r2[0x0]
80007daa:	30 08       	mov	r8,0
80007dac:	f0 09 18 00 	cp.b	r9,r8
80007db0:	e0 80 0e ae 	breq	80009b0c <_vfprintf_r+0x1ee8>
80007db4:	30 09       	mov	r9,0
80007db6:	fb 68 06 bb 	st.b	sp[1723],r8
80007dba:	0e 96       	mov	r6,r7
80007dbc:	e4 c8 ff ff 	sub	r8,r2,-1
80007dc0:	3f fe       	mov	lr,-1
80007dc2:	50 94       	stdsp	sp[0x24],r4
80007dc4:	50 41       	stdsp	sp[0x10],r1
80007dc6:	0e 94       	mov	r4,r7
80007dc8:	04 91       	mov	r1,r2
80007dca:	50 89       	stdsp	sp[0x20],r9
80007dcc:	50 a8       	stdsp	sp[0x28],r8
80007dce:	50 2e       	stdsp	sp[0x8],lr
80007dd0:	50 39       	stdsp	sp[0xc],r9
80007dd2:	12 93       	mov	r3,r9
80007dd4:	12 90       	mov	r0,r9
80007dd6:	10 97       	mov	r7,r8
80007dd8:	0a 92       	mov	r2,r5
80007dda:	c0 78       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80007ddc:	3f fc       	mov	r12,-1
80007dde:	0a 97       	mov	r7,r5
80007de0:	50 2c       	stdsp	sp[0x8],r12
80007de2:	c0 38       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80007de4:	30 0b       	mov	r11,0
80007de6:	50 3b       	stdsp	sp[0xc],r11
80007de8:	0f 38       	ld.ub	r8,r7++
80007dea:	c0 28       	rjmp	80007dee <_vfprintf_r+0x1ca>
80007dec:	12 90       	mov	r0,r9
80007dee:	f0 c9 00 20 	sub	r9,r8,32
80007df2:	e0 49 00 58 	cp.w	r9,88
80007df6:	e0 8b 0a 33 	brhi	8000925c <_vfprintf_r+0x1638>
80007dfa:	4d 9a       	lddpc	r10,80007f5c <_vfprintf_r+0x338>
80007dfc:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80007e00:	50 a7       	stdsp	sp[0x28],r7
80007e02:	50 80       	stdsp	sp[0x20],r0
80007e04:	0c 97       	mov	r7,r6
80007e06:	04 95       	mov	r5,r2
80007e08:	08 96       	mov	r6,r4
80007e0a:	02 92       	mov	r2,r1
80007e0c:	4d 59       	lddpc	r9,80007f60 <_vfprintf_r+0x33c>
80007e0e:	40 94       	lddsp	r4,sp[0x24]
80007e10:	10 90       	mov	r0,r8
80007e12:	40 41       	lddsp	r1,sp[0x10]
80007e14:	50 d9       	stdsp	sp[0x34],r9
80007e16:	e0 8f 08 95 	bral	80008f40 <_vfprintf_r+0x131c>
80007e1a:	30 08       	mov	r8,0
80007e1c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80007e20:	f0 09 18 00 	cp.b	r9,r8
80007e24:	ce 21       	brne	80007de8 <_vfprintf_r+0x1c4>
80007e26:	32 08       	mov	r8,32
80007e28:	c6 e8       	rjmp	80007f04 <_vfprintf_r+0x2e0>
80007e2a:	a1 a3       	sbr	r3,0x0
80007e2c:	cd eb       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80007e2e:	0f 89       	ld.ub	r9,r7[0x0]
80007e30:	f2 c8 00 30 	sub	r8,r9,48
80007e34:	58 98       	cp.w	r8,9
80007e36:	e0 8b 00 1d 	brhi	80007e70 <_vfprintf_r+0x24c>
80007e3a:	ee c8 ff ff 	sub	r8,r7,-1
80007e3e:	30 0b       	mov	r11,0
80007e40:	23 09       	sub	r9,48
80007e42:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80007e46:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80007e4a:	11 39       	ld.ub	r9,r8++
80007e4c:	f2 ca 00 30 	sub	r10,r9,48
80007e50:	58 9a       	cp.w	r10,9
80007e52:	fe 98 ff f7 	brls	80007e40 <_vfprintf_r+0x21c>
80007e56:	e0 49 00 24 	cp.w	r9,36
80007e5a:	cc 51       	brne	80007de4 <_vfprintf_r+0x1c0>
80007e5c:	e0 4b 00 20 	cp.w	r11,32
80007e60:	e0 89 0e 65 	brgt	80009b2a <_vfprintf_r+0x1f06>
80007e64:	20 1b       	sub	r11,1
80007e66:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007e6a:	12 3b       	cp.w	r11,r9
80007e6c:	c0 95       	brlt	80007e7e <_vfprintf_r+0x25a>
80007e6e:	c1 08       	rjmp	80007e8e <_vfprintf_r+0x26a>
80007e70:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007e74:	ec ca ff ff 	sub	r10,r6,-1
80007e78:	12 36       	cp.w	r6,r9
80007e7a:	c1 f5       	brlt	80007eb8 <_vfprintf_r+0x294>
80007e7c:	c2 68       	rjmp	80007ec8 <_vfprintf_r+0x2a4>
80007e7e:	fa ce f9 44 	sub	lr,sp,-1724
80007e82:	10 97       	mov	r7,r8
80007e84:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80007e88:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80007e8c:	c3 58       	rjmp	80007ef6 <_vfprintf_r+0x2d2>
80007e8e:	10 97       	mov	r7,r8
80007e90:	fa c8 f9 50 	sub	r8,sp,-1712
80007e94:	1a d8       	st.w	--sp,r8
80007e96:	fa c8 fa b8 	sub	r8,sp,-1352
80007e9a:	1a d8       	st.w	--sp,r8
80007e9c:	fa c8 fb b4 	sub	r8,sp,-1100
80007ea0:	02 9a       	mov	r10,r1
80007ea2:	1a d8       	st.w	--sp,r8
80007ea4:	04 9c       	mov	r12,r2
80007ea6:	fa c8 f9 40 	sub	r8,sp,-1728
80007eaa:	fa c9 ff b4 	sub	r9,sp,-76
80007eae:	fe b0 fd 21 	rcall	800078f0 <get_arg>
80007eb2:	2f dd       	sub	sp,-12
80007eb4:	78 00       	ld.w	r0,r12[0x0]
80007eb6:	c2 08       	rjmp	80007ef6 <_vfprintf_r+0x2d2>
80007eb8:	fa cc f9 44 	sub	r12,sp,-1724
80007ebc:	14 96       	mov	r6,r10
80007ebe:	f8 04 00 38 	add	r8,r12,r4<<0x3
80007ec2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80007ec6:	c1 88       	rjmp	80007ef6 <_vfprintf_r+0x2d2>
80007ec8:	41 08       	lddsp	r8,sp[0x40]
80007eca:	59 f9       	cp.w	r9,31
80007ecc:	e0 89 00 11 	brgt	80007eee <_vfprintf_r+0x2ca>
80007ed0:	f0 cb ff fc 	sub	r11,r8,-4
80007ed4:	51 0b       	stdsp	sp[0x40],r11
80007ed6:	70 00       	ld.w	r0,r8[0x0]
80007ed8:	fa cb f9 44 	sub	r11,sp,-1724
80007edc:	f6 09 00 38 	add	r8,r11,r9<<0x3
80007ee0:	f1 40 fd 88 	st.w	r8[-632],r0
80007ee4:	2f f9       	sub	r9,-1
80007ee6:	14 96       	mov	r6,r10
80007ee8:	fb 49 06 b4 	st.w	sp[1716],r9
80007eec:	c0 58       	rjmp	80007ef6 <_vfprintf_r+0x2d2>
80007eee:	70 00       	ld.w	r0,r8[0x0]
80007ef0:	14 96       	mov	r6,r10
80007ef2:	2f c8       	sub	r8,-4
80007ef4:	51 08       	stdsp	sp[0x40],r8
80007ef6:	58 00       	cp.w	r0,0
80007ef8:	fe 94 ff 78 	brge	80007de8 <_vfprintf_r+0x1c4>
80007efc:	5c 30       	neg	r0
80007efe:	a3 a3       	sbr	r3,0x2
80007f00:	c7 4b       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80007f02:	32 b8       	mov	r8,43
80007f04:	fb 68 06 bb 	st.b	sp[1723],r8
80007f08:	c7 0b       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80007f0a:	0f 38       	ld.ub	r8,r7++
80007f0c:	e0 48 00 2a 	cp.w	r8,42
80007f10:	c0 30       	breq	80007f16 <_vfprintf_r+0x2f2>
80007f12:	30 09       	mov	r9,0
80007f14:	c7 d8       	rjmp	8000800e <_vfprintf_r+0x3ea>
80007f16:	0f 88       	ld.ub	r8,r7[0x0]
80007f18:	f0 c9 00 30 	sub	r9,r8,48
80007f1c:	58 99       	cp.w	r9,9
80007f1e:	e0 8b 00 23 	brhi	80007f64 <_vfprintf_r+0x340>
80007f22:	ee c5 ff ff 	sub	r5,r7,-1
80007f26:	30 0b       	mov	r11,0
80007f28:	23 08       	sub	r8,48
80007f2a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80007f2e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80007f32:	0b 38       	ld.ub	r8,r5++
80007f34:	f0 c9 00 30 	sub	r9,r8,48
80007f38:	58 99       	cp.w	r9,9
80007f3a:	fe 98 ff f7 	brls	80007f28 <_vfprintf_r+0x304>
80007f3e:	e0 48 00 24 	cp.w	r8,36
80007f42:	fe 91 ff 51 	brne	80007de4 <_vfprintf_r+0x1c0>
80007f46:	e0 4b 00 20 	cp.w	r11,32
80007f4a:	e0 89 0d f0 	brgt	80009b2a <_vfprintf_r+0x1f06>
80007f4e:	20 1b       	sub	r11,1
80007f50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007f54:	10 3b       	cp.w	r11,r8
80007f56:	c0 e5       	brlt	80007f72 <_vfprintf_r+0x34e>
80007f58:	c1 58       	rjmp	80007f82 <_vfprintf_r+0x35e>
80007f5a:	d7 03       	nop
80007f5c:	80 00       	ld.sh	r0,r0[0x0]
80007f5e:	dc 5c       	*unknown*
80007f60:	80 00       	ld.sh	r0,r0[0x0]
80007f62:	de 98       	*unknown*
80007f64:	fa fa 06 b4 	ld.w	r10,sp[1716]
80007f68:	ec c9 ff ff 	sub	r9,r6,-1
80007f6c:	14 36       	cp.w	r6,r10
80007f6e:	c1 f5       	brlt	80007fac <_vfprintf_r+0x388>
80007f70:	c2 88       	rjmp	80007fc0 <_vfprintf_r+0x39c>
80007f72:	fa ca f9 44 	sub	r10,sp,-1724
80007f76:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80007f7a:	f6 fb fd 88 	ld.w	r11,r11[-632]
80007f7e:	50 2b       	stdsp	sp[0x8],r11
80007f80:	c3 c8       	rjmp	80007ff8 <_vfprintf_r+0x3d4>
80007f82:	fa c8 f9 50 	sub	r8,sp,-1712
80007f86:	1a d8       	st.w	--sp,r8
80007f88:	fa c8 fa b8 	sub	r8,sp,-1352
80007f8c:	1a d8       	st.w	--sp,r8
80007f8e:	fa c8 fb b4 	sub	r8,sp,-1100
80007f92:	02 9a       	mov	r10,r1
80007f94:	1a d8       	st.w	--sp,r8
80007f96:	04 9c       	mov	r12,r2
80007f98:	fa c8 f9 40 	sub	r8,sp,-1728
80007f9c:	fa c9 ff b4 	sub	r9,sp,-76
80007fa0:	fe b0 fc a8 	rcall	800078f0 <get_arg>
80007fa4:	2f dd       	sub	sp,-12
80007fa6:	78 0c       	ld.w	r12,r12[0x0]
80007fa8:	50 2c       	stdsp	sp[0x8],r12
80007faa:	c2 78       	rjmp	80007ff8 <_vfprintf_r+0x3d4>
80007fac:	12 96       	mov	r6,r9
80007fae:	0e 95       	mov	r5,r7
80007fb0:	fa c9 f9 44 	sub	r9,sp,-1724
80007fb4:	f2 04 00 38 	add	r8,r9,r4<<0x3
80007fb8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80007fbc:	50 28       	stdsp	sp[0x8],r8
80007fbe:	c1 d8       	rjmp	80007ff8 <_vfprintf_r+0x3d4>
80007fc0:	41 08       	lddsp	r8,sp[0x40]
80007fc2:	59 fa       	cp.w	r10,31
80007fc4:	e0 89 00 14 	brgt	80007fec <_vfprintf_r+0x3c8>
80007fc8:	f0 cb ff fc 	sub	r11,r8,-4
80007fcc:	70 08       	ld.w	r8,r8[0x0]
80007fce:	51 0b       	stdsp	sp[0x40],r11
80007fd0:	50 28       	stdsp	sp[0x8],r8
80007fd2:	fa c6 f9 44 	sub	r6,sp,-1724
80007fd6:	40 2e       	lddsp	lr,sp[0x8]
80007fd8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80007fdc:	f1 4e fd 88 	st.w	r8[-632],lr
80007fe0:	2f fa       	sub	r10,-1
80007fe2:	0e 95       	mov	r5,r7
80007fe4:	fb 4a 06 b4 	st.w	sp[1716],r10
80007fe8:	12 96       	mov	r6,r9
80007fea:	c0 78       	rjmp	80007ff8 <_vfprintf_r+0x3d4>
80007fec:	70 0c       	ld.w	r12,r8[0x0]
80007fee:	0e 95       	mov	r5,r7
80007ff0:	2f c8       	sub	r8,-4
80007ff2:	50 2c       	stdsp	sp[0x8],r12
80007ff4:	12 96       	mov	r6,r9
80007ff6:	51 08       	stdsp	sp[0x40],r8
80007ff8:	40 2b       	lddsp	r11,sp[0x8]
80007ffa:	58 0b       	cp.w	r11,0
80007ffc:	fe 95 fe f0 	brlt	80007ddc <_vfprintf_r+0x1b8>
80008000:	0a 97       	mov	r7,r5
80008002:	cf 3a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008004:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008008:	0f 38       	ld.ub	r8,r7++
8000800a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000800e:	f0 ca 00 30 	sub	r10,r8,48
80008012:	58 9a       	cp.w	r10,9
80008014:	fe 98 ff f8 	brls	80008004 <_vfprintf_r+0x3e0>
80008018:	3f fa       	mov	r10,-1
8000801a:	f2 0a 0c 49 	max	r9,r9,r10
8000801e:	50 29       	stdsp	sp[0x8],r9
80008020:	ce 7a       	rjmp	80007dee <_vfprintf_r+0x1ca>
80008022:	a7 b3       	sbr	r3,0x7
80008024:	ce 2a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008026:	30 09       	mov	r9,0
80008028:	23 08       	sub	r8,48
8000802a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000802e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80008032:	0f 38       	ld.ub	r8,r7++
80008034:	f0 ca 00 30 	sub	r10,r8,48
80008038:	58 9a       	cp.w	r10,9
8000803a:	fe 98 ff f7 	brls	80008028 <_vfprintf_r+0x404>
8000803e:	e0 48 00 24 	cp.w	r8,36
80008042:	fe 91 fe d5 	brne	80007dec <_vfprintf_r+0x1c8>
80008046:	e0 49 00 20 	cp.w	r9,32
8000804a:	e0 89 0d 70 	brgt	80009b2a <_vfprintf_r+0x1f06>
8000804e:	f2 c4 00 01 	sub	r4,r9,1
80008052:	30 19       	mov	r9,1
80008054:	50 39       	stdsp	sp[0xc],r9
80008056:	cc 9a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008058:	a3 b3       	sbr	r3,0x3
8000805a:	cc 7a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
8000805c:	a7 a3       	sbr	r3,0x6
8000805e:	cc 5a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008060:	0f 88       	ld.ub	r8,r7[0x0]
80008062:	36 ce       	mov	lr,108
80008064:	fc 08 18 00 	cp.b	r8,lr
80008068:	c0 41       	brne	80008070 <_vfprintf_r+0x44c>
8000806a:	2f f7       	sub	r7,-1
8000806c:	a5 b3       	sbr	r3,0x5
8000806e:	cb da       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008070:	a5 a3       	sbr	r3,0x4
80008072:	cb ba       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008074:	a5 b3       	sbr	r3,0x5
80008076:	cb 9a       	rjmp	80007de8 <_vfprintf_r+0x1c4>
80008078:	50 a7       	stdsp	sp[0x28],r7
8000807a:	50 80       	stdsp	sp[0x20],r0
8000807c:	0c 97       	mov	r7,r6
8000807e:	10 90       	mov	r0,r8
80008080:	08 96       	mov	r6,r4
80008082:	04 95       	mov	r5,r2
80008084:	40 94       	lddsp	r4,sp[0x24]
80008086:	02 92       	mov	r2,r1
80008088:	0e 99       	mov	r9,r7
8000808a:	40 41       	lddsp	r1,sp[0x10]
8000808c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008090:	40 3c       	lddsp	r12,sp[0xc]
80008092:	58 0c       	cp.w	r12,0
80008094:	c1 d0       	breq	800080ce <_vfprintf_r+0x4aa>
80008096:	10 36       	cp.w	r6,r8
80008098:	c0 64       	brge	800080a4 <_vfprintf_r+0x480>
8000809a:	fa cb f9 44 	sub	r11,sp,-1724
8000809e:	f6 06 00 36 	add	r6,r11,r6<<0x3
800080a2:	c1 d8       	rjmp	800080dc <_vfprintf_r+0x4b8>
800080a4:	fa c8 f9 50 	sub	r8,sp,-1712
800080a8:	1a d8       	st.w	--sp,r8
800080aa:	fa c8 fa b8 	sub	r8,sp,-1352
800080ae:	1a d8       	st.w	--sp,r8
800080b0:	fa c8 fb b4 	sub	r8,sp,-1100
800080b4:	1a d8       	st.w	--sp,r8
800080b6:	fa c8 f9 40 	sub	r8,sp,-1728
800080ba:	fa c9 ff b4 	sub	r9,sp,-76
800080be:	04 9a       	mov	r10,r2
800080c0:	0c 9b       	mov	r11,r6
800080c2:	0a 9c       	mov	r12,r5
800080c4:	fe b0 fc 16 	rcall	800078f0 <get_arg>
800080c8:	2f dd       	sub	sp,-12
800080ca:	19 b8       	ld.ub	r8,r12[0x3]
800080cc:	c2 28       	rjmp	80008110 <_vfprintf_r+0x4ec>
800080ce:	2f f7       	sub	r7,-1
800080d0:	10 39       	cp.w	r9,r8
800080d2:	c0 84       	brge	800080e2 <_vfprintf_r+0x4be>
800080d4:	fa ca f9 44 	sub	r10,sp,-1724
800080d8:	f4 06 00 36 	add	r6,r10,r6<<0x3
800080dc:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800080e0:	c1 88       	rjmp	80008110 <_vfprintf_r+0x4ec>
800080e2:	41 09       	lddsp	r9,sp[0x40]
800080e4:	59 f8       	cp.w	r8,31
800080e6:	e0 89 00 12 	brgt	8000810a <_vfprintf_r+0x4e6>
800080ea:	f2 ca ff fc 	sub	r10,r9,-4
800080ee:	51 0a       	stdsp	sp[0x40],r10
800080f0:	72 09       	ld.w	r9,r9[0x0]
800080f2:	fa c6 f9 44 	sub	r6,sp,-1724
800080f6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800080fa:	2f f8       	sub	r8,-1
800080fc:	f5 49 fd 88 	st.w	r10[-632],r9
80008100:	fb 48 06 b4 	st.w	sp[1716],r8
80008104:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80008108:	c0 48       	rjmp	80008110 <_vfprintf_r+0x4ec>
8000810a:	13 b8       	ld.ub	r8,r9[0x3]
8000810c:	2f c9       	sub	r9,-4
8000810e:	51 09       	stdsp	sp[0x40],r9
80008110:	fb 68 06 60 	st.b	sp[1632],r8
80008114:	30 0e       	mov	lr,0
80008116:	30 08       	mov	r8,0
80008118:	30 12       	mov	r2,1
8000811a:	fb 68 06 bb 	st.b	sp[1723],r8
8000811e:	50 2e       	stdsp	sp[0x8],lr
80008120:	e0 8f 08 b0 	bral	80009280 <_vfprintf_r+0x165c>
80008124:	50 a7       	stdsp	sp[0x28],r7
80008126:	50 80       	stdsp	sp[0x20],r0
80008128:	0c 97       	mov	r7,r6
8000812a:	04 95       	mov	r5,r2
8000812c:	08 96       	mov	r6,r4
8000812e:	02 92       	mov	r2,r1
80008130:	40 94       	lddsp	r4,sp[0x24]
80008132:	10 90       	mov	r0,r8
80008134:	40 41       	lddsp	r1,sp[0x10]
80008136:	a5 a3       	sbr	r3,0x4
80008138:	c0 a8       	rjmp	8000814c <_vfprintf_r+0x528>
8000813a:	50 a7       	stdsp	sp[0x28],r7
8000813c:	50 80       	stdsp	sp[0x20],r0
8000813e:	0c 97       	mov	r7,r6
80008140:	04 95       	mov	r5,r2
80008142:	08 96       	mov	r6,r4
80008144:	02 92       	mov	r2,r1
80008146:	40 94       	lddsp	r4,sp[0x24]
80008148:	10 90       	mov	r0,r8
8000814a:	40 41       	lddsp	r1,sp[0x10]
8000814c:	ed b3 00 05 	bld	r3,0x5
80008150:	c5 11       	brne	800081f2 <_vfprintf_r+0x5ce>
80008152:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008156:	40 3c       	lddsp	r12,sp[0xc]
80008158:	58 0c       	cp.w	r12,0
8000815a:	c1 e0       	breq	80008196 <_vfprintf_r+0x572>
8000815c:	10 36       	cp.w	r6,r8
8000815e:	c0 64       	brge	8000816a <_vfprintf_r+0x546>
80008160:	fa cb f9 44 	sub	r11,sp,-1724
80008164:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008168:	c2 08       	rjmp	800081a8 <_vfprintf_r+0x584>
8000816a:	fa c8 f9 50 	sub	r8,sp,-1712
8000816e:	1a d8       	st.w	--sp,r8
80008170:	fa c8 fa b8 	sub	r8,sp,-1352
80008174:	0c 9b       	mov	r11,r6
80008176:	1a d8       	st.w	--sp,r8
80008178:	fa c8 fb b4 	sub	r8,sp,-1100
8000817c:	1a d8       	st.w	--sp,r8
8000817e:	fa c9 ff b4 	sub	r9,sp,-76
80008182:	fa c8 f9 40 	sub	r8,sp,-1728
80008186:	04 9a       	mov	r10,r2
80008188:	0a 9c       	mov	r12,r5
8000818a:	fe b0 fb b3 	rcall	800078f0 <get_arg>
8000818e:	2f dd       	sub	sp,-12
80008190:	78 1b       	ld.w	r11,r12[0x4]
80008192:	78 09       	ld.w	r9,r12[0x0]
80008194:	c2 b8       	rjmp	800081ea <_vfprintf_r+0x5c6>
80008196:	ee ca ff ff 	sub	r10,r7,-1
8000819a:	10 37       	cp.w	r7,r8
8000819c:	c0 b4       	brge	800081b2 <_vfprintf_r+0x58e>
8000819e:	fa c9 f9 44 	sub	r9,sp,-1724
800081a2:	14 97       	mov	r7,r10
800081a4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800081a8:	ec fb fd 8c 	ld.w	r11,r6[-628]
800081ac:	ec f9 fd 88 	ld.w	r9,r6[-632]
800081b0:	c1 d8       	rjmp	800081ea <_vfprintf_r+0x5c6>
800081b2:	41 09       	lddsp	r9,sp[0x40]
800081b4:	59 f8       	cp.w	r8,31
800081b6:	e0 89 00 14 	brgt	800081de <_vfprintf_r+0x5ba>
800081ba:	f2 cb ff f8 	sub	r11,r9,-8
800081be:	51 0b       	stdsp	sp[0x40],r11
800081c0:	fa c6 f9 44 	sub	r6,sp,-1724
800081c4:	72 1b       	ld.w	r11,r9[0x4]
800081c6:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800081ca:	72 09       	ld.w	r9,r9[0x0]
800081cc:	f9 4b fd 8c 	st.w	r12[-628],r11
800081d0:	f9 49 fd 88 	st.w	r12[-632],r9
800081d4:	2f f8       	sub	r8,-1
800081d6:	14 97       	mov	r7,r10
800081d8:	fb 48 06 b4 	st.w	sp[1716],r8
800081dc:	c0 78       	rjmp	800081ea <_vfprintf_r+0x5c6>
800081de:	f2 c8 ff f8 	sub	r8,r9,-8
800081e2:	72 1b       	ld.w	r11,r9[0x4]
800081e4:	14 97       	mov	r7,r10
800081e6:	51 08       	stdsp	sp[0x40],r8
800081e8:	72 09       	ld.w	r9,r9[0x0]
800081ea:	16 98       	mov	r8,r11
800081ec:	fa e9 00 00 	st.d	sp[0],r8
800081f0:	ca e8       	rjmp	8000834c <_vfprintf_r+0x728>
800081f2:	ed b3 00 04 	bld	r3,0x4
800081f6:	c1 71       	brne	80008224 <_vfprintf_r+0x600>
800081f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800081fc:	40 3e       	lddsp	lr,sp[0xc]
800081fe:	58 0e       	cp.w	lr,0
80008200:	c0 80       	breq	80008210 <_vfprintf_r+0x5ec>
80008202:	10 36       	cp.w	r6,r8
80008204:	c6 94       	brge	800082d6 <_vfprintf_r+0x6b2>
80008206:	fa cc f9 44 	sub	r12,sp,-1724
8000820a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000820e:	c8 28       	rjmp	80008312 <_vfprintf_r+0x6ee>
80008210:	ee ca ff ff 	sub	r10,r7,-1
80008214:	10 37       	cp.w	r7,r8
80008216:	e0 84 00 81 	brge	80008318 <_vfprintf_r+0x6f4>
8000821a:	fa cb f9 44 	sub	r11,sp,-1724
8000821e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008222:	c7 78       	rjmp	80008310 <_vfprintf_r+0x6ec>
80008224:	ed b3 00 06 	bld	r3,0x6
80008228:	c4 b1       	brne	800082be <_vfprintf_r+0x69a>
8000822a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000822e:	40 3c       	lddsp	r12,sp[0xc]
80008230:	58 0c       	cp.w	r12,0
80008232:	c1 d0       	breq	8000826c <_vfprintf_r+0x648>
80008234:	10 36       	cp.w	r6,r8
80008236:	c0 64       	brge	80008242 <_vfprintf_r+0x61e>
80008238:	fa cb f9 44 	sub	r11,sp,-1724
8000823c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008240:	c1 f8       	rjmp	8000827e <_vfprintf_r+0x65a>
80008242:	fa c8 f9 50 	sub	r8,sp,-1712
80008246:	1a d8       	st.w	--sp,r8
80008248:	fa c8 fa b8 	sub	r8,sp,-1352
8000824c:	1a d8       	st.w	--sp,r8
8000824e:	fa c8 fb b4 	sub	r8,sp,-1100
80008252:	1a d8       	st.w	--sp,r8
80008254:	fa c8 f9 40 	sub	r8,sp,-1728
80008258:	fa c9 ff b4 	sub	r9,sp,-76
8000825c:	04 9a       	mov	r10,r2
8000825e:	0c 9b       	mov	r11,r6
80008260:	0a 9c       	mov	r12,r5
80008262:	fe b0 fb 47 	rcall	800078f0 <get_arg>
80008266:	2f dd       	sub	sp,-12
80008268:	98 18       	ld.sh	r8,r12[0x2]
8000826a:	c2 68       	rjmp	800082b6 <_vfprintf_r+0x692>
8000826c:	ee ca ff ff 	sub	r10,r7,-1
80008270:	10 37       	cp.w	r7,r8
80008272:	c0 94       	brge	80008284 <_vfprintf_r+0x660>
80008274:	fa c9 f9 44 	sub	r9,sp,-1724
80008278:	14 97       	mov	r7,r10
8000827a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000827e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008282:	c1 a8       	rjmp	800082b6 <_vfprintf_r+0x692>
80008284:	41 09       	lddsp	r9,sp[0x40]
80008286:	59 f8       	cp.w	r8,31
80008288:	e0 89 00 13 	brgt	800082ae <_vfprintf_r+0x68a>
8000828c:	f2 cb ff fc 	sub	r11,r9,-4
80008290:	51 0b       	stdsp	sp[0x40],r11
80008292:	72 09       	ld.w	r9,r9[0x0]
80008294:	fa c6 f9 44 	sub	r6,sp,-1724
80008298:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000829c:	2f f8       	sub	r8,-1
8000829e:	f7 49 fd 88 	st.w	r11[-632],r9
800082a2:	fb 48 06 b4 	st.w	sp[1716],r8
800082a6:	14 97       	mov	r7,r10
800082a8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800082ac:	c0 58       	rjmp	800082b6 <_vfprintf_r+0x692>
800082ae:	92 18       	ld.sh	r8,r9[0x2]
800082b0:	14 97       	mov	r7,r10
800082b2:	2f c9       	sub	r9,-4
800082b4:	51 09       	stdsp	sp[0x40],r9
800082b6:	50 18       	stdsp	sp[0x4],r8
800082b8:	bf 58       	asr	r8,0x1f
800082ba:	50 08       	stdsp	sp[0x0],r8
800082bc:	c4 88       	rjmp	8000834c <_vfprintf_r+0x728>
800082be:	fa f8 06 b4 	ld.w	r8,sp[1716]
800082c2:	40 3c       	lddsp	r12,sp[0xc]
800082c4:	58 0c       	cp.w	r12,0
800082c6:	c1 d0       	breq	80008300 <_vfprintf_r+0x6dc>
800082c8:	10 36       	cp.w	r6,r8
800082ca:	c0 64       	brge	800082d6 <_vfprintf_r+0x6b2>
800082cc:	fa cb f9 44 	sub	r11,sp,-1724
800082d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800082d4:	c1 f8       	rjmp	80008312 <_vfprintf_r+0x6ee>
800082d6:	fa c8 f9 50 	sub	r8,sp,-1712
800082da:	1a d8       	st.w	--sp,r8
800082dc:	fa c8 fa b8 	sub	r8,sp,-1352
800082e0:	0c 9b       	mov	r11,r6
800082e2:	1a d8       	st.w	--sp,r8
800082e4:	fa c8 fb b4 	sub	r8,sp,-1100
800082e8:	04 9a       	mov	r10,r2
800082ea:	1a d8       	st.w	--sp,r8
800082ec:	0a 9c       	mov	r12,r5
800082ee:	fa c8 f9 40 	sub	r8,sp,-1728
800082f2:	fa c9 ff b4 	sub	r9,sp,-76
800082f6:	fe b0 fa fd 	rcall	800078f0 <get_arg>
800082fa:	2f dd       	sub	sp,-12
800082fc:	78 0b       	ld.w	r11,r12[0x0]
800082fe:	c2 48       	rjmp	80008346 <_vfprintf_r+0x722>
80008300:	ee ca ff ff 	sub	r10,r7,-1
80008304:	10 37       	cp.w	r7,r8
80008306:	c0 94       	brge	80008318 <_vfprintf_r+0x6f4>
80008308:	fa c9 f9 44 	sub	r9,sp,-1724
8000830c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008310:	14 97       	mov	r7,r10
80008312:	ec fb fd 88 	ld.w	r11,r6[-632]
80008316:	c1 88       	rjmp	80008346 <_vfprintf_r+0x722>
80008318:	41 09       	lddsp	r9,sp[0x40]
8000831a:	59 f8       	cp.w	r8,31
8000831c:	e0 89 00 11 	brgt	8000833e <_vfprintf_r+0x71a>
80008320:	f2 cb ff fc 	sub	r11,r9,-4
80008324:	51 0b       	stdsp	sp[0x40],r11
80008326:	fa c6 f9 44 	sub	r6,sp,-1724
8000832a:	72 0b       	ld.w	r11,r9[0x0]
8000832c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008330:	f3 4b fd 88 	st.w	r9[-632],r11
80008334:	2f f8       	sub	r8,-1
80008336:	14 97       	mov	r7,r10
80008338:	fb 48 06 b4 	st.w	sp[1716],r8
8000833c:	c0 58       	rjmp	80008346 <_vfprintf_r+0x722>
8000833e:	72 0b       	ld.w	r11,r9[0x0]
80008340:	14 97       	mov	r7,r10
80008342:	2f c9       	sub	r9,-4
80008344:	51 09       	stdsp	sp[0x40],r9
80008346:	50 1b       	stdsp	sp[0x4],r11
80008348:	bf 5b       	asr	r11,0x1f
8000834a:	50 0b       	stdsp	sp[0x0],r11
8000834c:	fa ea 00 00 	ld.d	r10,sp[0]
80008350:	58 0a       	cp.w	r10,0
80008352:	5c 2b       	cpc	r11
80008354:	c0 e4       	brge	80008370 <_vfprintf_r+0x74c>
80008356:	30 08       	mov	r8,0
80008358:	fa ea 00 00 	ld.d	r10,sp[0]
8000835c:	30 09       	mov	r9,0
8000835e:	f0 0a 01 0a 	sub	r10,r8,r10
80008362:	f2 0b 01 4b 	sbc	r11,r9,r11
80008366:	32 d8       	mov	r8,45
80008368:	fa eb 00 00 	st.d	sp[0],r10
8000836c:	fb 68 06 bb 	st.b	sp[1723],r8
80008370:	30 18       	mov	r8,1
80008372:	e0 8f 06 fd 	bral	8000916c <_vfprintf_r+0x1548>
80008376:	50 a7       	stdsp	sp[0x28],r7
80008378:	50 80       	stdsp	sp[0x20],r0
8000837a:	0c 97       	mov	r7,r6
8000837c:	04 95       	mov	r5,r2
8000837e:	08 96       	mov	r6,r4
80008380:	02 92       	mov	r2,r1
80008382:	40 94       	lddsp	r4,sp[0x24]
80008384:	10 90       	mov	r0,r8
80008386:	40 41       	lddsp	r1,sp[0x10]
80008388:	0e 99       	mov	r9,r7
8000838a:	ed b3 00 03 	bld	r3,0x3
8000838e:	c4 11       	brne	80008410 <_vfprintf_r+0x7ec>
80008390:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008394:	40 3a       	lddsp	r10,sp[0xc]
80008396:	58 0a       	cp.w	r10,0
80008398:	c1 90       	breq	800083ca <_vfprintf_r+0x7a6>
8000839a:	10 36       	cp.w	r6,r8
8000839c:	c6 45       	brlt	80008464 <_vfprintf_r+0x840>
8000839e:	fa c8 f9 50 	sub	r8,sp,-1712
800083a2:	1a d8       	st.w	--sp,r8
800083a4:	fa c8 fa b8 	sub	r8,sp,-1352
800083a8:	1a d8       	st.w	--sp,r8
800083aa:	fa c8 fb b4 	sub	r8,sp,-1100
800083ae:	0c 9b       	mov	r11,r6
800083b0:	1a d8       	st.w	--sp,r8
800083b2:	04 9a       	mov	r10,r2
800083b4:	fa c8 f9 40 	sub	r8,sp,-1728
800083b8:	fa c9 ff b4 	sub	r9,sp,-76
800083bc:	0a 9c       	mov	r12,r5
800083be:	fe b0 fa 99 	rcall	800078f0 <get_arg>
800083c2:	2f dd       	sub	sp,-12
800083c4:	78 16       	ld.w	r6,r12[0x4]
800083c6:	50 76       	stdsp	sp[0x1c],r6
800083c8:	c4 88       	rjmp	80008458 <_vfprintf_r+0x834>
800083ca:	2f f7       	sub	r7,-1
800083cc:	10 39       	cp.w	r9,r8
800083ce:	c0 c4       	brge	800083e6 <_vfprintf_r+0x7c2>
800083d0:	fa ce f9 44 	sub	lr,sp,-1724
800083d4:	fc 06 00 36 	add	r6,lr,r6<<0x3
800083d8:	ec fc fd 8c 	ld.w	r12,r6[-628]
800083dc:	50 7c       	stdsp	sp[0x1c],r12
800083de:	ec f6 fd 88 	ld.w	r6,r6[-632]
800083e2:	50 56       	stdsp	sp[0x14],r6
800083e4:	c6 68       	rjmp	800084b0 <_vfprintf_r+0x88c>
800083e6:	41 09       	lddsp	r9,sp[0x40]
800083e8:	59 f8       	cp.w	r8,31
800083ea:	e0 89 00 10 	brgt	8000840a <_vfprintf_r+0x7e6>
800083ee:	f2 ca ff f8 	sub	r10,r9,-8
800083f2:	72 1b       	ld.w	r11,r9[0x4]
800083f4:	51 0a       	stdsp	sp[0x40],r10
800083f6:	72 09       	ld.w	r9,r9[0x0]
800083f8:	fa ca f9 44 	sub	r10,sp,-1724
800083fc:	50 7b       	stdsp	sp[0x1c],r11
800083fe:	50 59       	stdsp	sp[0x14],r9
80008400:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008404:	40 5b       	lddsp	r11,sp[0x14]
80008406:	40 7a       	lddsp	r10,sp[0x1c]
80008408:	c4 78       	rjmp	80008496 <_vfprintf_r+0x872>
8000840a:	72 18       	ld.w	r8,r9[0x4]
8000840c:	50 78       	stdsp	sp[0x1c],r8
8000840e:	c4 c8       	rjmp	800084a6 <_vfprintf_r+0x882>
80008410:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008414:	40 3e       	lddsp	lr,sp[0xc]
80008416:	58 0e       	cp.w	lr,0
80008418:	c2 30       	breq	8000845e <_vfprintf_r+0x83a>
8000841a:	10 36       	cp.w	r6,r8
8000841c:	c0 94       	brge	8000842e <_vfprintf_r+0x80a>
8000841e:	fa cc f9 44 	sub	r12,sp,-1724
80008422:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008426:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000842a:	50 7b       	stdsp	sp[0x1c],r11
8000842c:	cd 9b       	rjmp	800083de <_vfprintf_r+0x7ba>
8000842e:	fa c8 f9 50 	sub	r8,sp,-1712
80008432:	1a d8       	st.w	--sp,r8
80008434:	fa c8 fa b8 	sub	r8,sp,-1352
80008438:	04 9a       	mov	r10,r2
8000843a:	1a d8       	st.w	--sp,r8
8000843c:	fa c8 fb b4 	sub	r8,sp,-1100
80008440:	0c 9b       	mov	r11,r6
80008442:	1a d8       	st.w	--sp,r8
80008444:	0a 9c       	mov	r12,r5
80008446:	fa c8 f9 40 	sub	r8,sp,-1728
8000844a:	fa c9 ff b4 	sub	r9,sp,-76
8000844e:	fe b0 fa 51 	rcall	800078f0 <get_arg>
80008452:	2f dd       	sub	sp,-12
80008454:	78 1a       	ld.w	r10,r12[0x4]
80008456:	50 7a       	stdsp	sp[0x1c],r10
80008458:	78 0c       	ld.w	r12,r12[0x0]
8000845a:	50 5c       	stdsp	sp[0x14],r12
8000845c:	c2 a8       	rjmp	800084b0 <_vfprintf_r+0x88c>
8000845e:	2f f7       	sub	r7,-1
80008460:	10 39       	cp.w	r9,r8
80008462:	c0 94       	brge	80008474 <_vfprintf_r+0x850>
80008464:	fa c9 f9 44 	sub	r9,sp,-1724
80008468:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000846c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80008470:	50 78       	stdsp	sp[0x1c],r8
80008472:	cb 6b       	rjmp	800083de <_vfprintf_r+0x7ba>
80008474:	41 09       	lddsp	r9,sp[0x40]
80008476:	59 f8       	cp.w	r8,31
80008478:	e0 89 00 15 	brgt	800084a2 <_vfprintf_r+0x87e>
8000847c:	f2 ca ff f8 	sub	r10,r9,-8
80008480:	72 16       	ld.w	r6,r9[0x4]
80008482:	72 09       	ld.w	r9,r9[0x0]
80008484:	51 0a       	stdsp	sp[0x40],r10
80008486:	50 59       	stdsp	sp[0x14],r9
80008488:	fa ce f9 44 	sub	lr,sp,-1724
8000848c:	50 76       	stdsp	sp[0x1c],r6
8000848e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80008492:	40 5b       	lddsp	r11,sp[0x14]
80008494:	0c 9a       	mov	r10,r6
80008496:	f2 eb fd 88 	st.d	r9[-632],r10
8000849a:	2f f8       	sub	r8,-1
8000849c:	fb 48 06 b4 	st.w	sp[1716],r8
800084a0:	c0 88       	rjmp	800084b0 <_vfprintf_r+0x88c>
800084a2:	72 1c       	ld.w	r12,r9[0x4]
800084a4:	50 7c       	stdsp	sp[0x1c],r12
800084a6:	f2 c8 ff f8 	sub	r8,r9,-8
800084aa:	51 08       	stdsp	sp[0x40],r8
800084ac:	72 09       	ld.w	r9,r9[0x0]
800084ae:	50 59       	stdsp	sp[0x14],r9
800084b0:	40 5b       	lddsp	r11,sp[0x14]
800084b2:	40 7a       	lddsp	r10,sp[0x1c]
800084b4:	e0 a0 1d 02 	rcall	8000beb8 <__isinfd>
800084b8:	18 96       	mov	r6,r12
800084ba:	c1 50       	breq	800084e4 <_vfprintf_r+0x8c0>
800084bc:	30 08       	mov	r8,0
800084be:	30 09       	mov	r9,0
800084c0:	40 5b       	lddsp	r11,sp[0x14]
800084c2:	40 7a       	lddsp	r10,sp[0x1c]
800084c4:	e0 a0 21 f6 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
800084c8:	c0 40       	breq	800084d0 <_vfprintf_r+0x8ac>
800084ca:	32 d8       	mov	r8,45
800084cc:	fb 68 06 bb 	st.b	sp[1723],r8
800084d0:	4a f8       	lddpc	r8,8000858c <_vfprintf_r+0x968>
800084d2:	4b 06       	lddpc	r6,80008590 <_vfprintf_r+0x96c>
800084d4:	a7 d3       	cbr	r3,0x7
800084d6:	e0 40 00 47 	cp.w	r0,71
800084da:	f0 06 17 a0 	movle	r6,r8
800084de:	30 32       	mov	r2,3
800084e0:	e0 8f 06 d3 	bral	80009286 <_vfprintf_r+0x1662>
800084e4:	40 5b       	lddsp	r11,sp[0x14]
800084e6:	40 7a       	lddsp	r10,sp[0x1c]
800084e8:	e0 a0 1c fd 	rcall	8000bee2 <__isnand>
800084ec:	c0 c0       	breq	80008504 <_vfprintf_r+0x8e0>
800084ee:	50 26       	stdsp	sp[0x8],r6
800084f0:	4a 98       	lddpc	r8,80008594 <_vfprintf_r+0x970>
800084f2:	4a a6       	lddpc	r6,80008598 <_vfprintf_r+0x974>
800084f4:	a7 d3       	cbr	r3,0x7
800084f6:	e0 40 00 47 	cp.w	r0,71
800084fa:	f0 06 17 a0 	movle	r6,r8
800084fe:	30 32       	mov	r2,3
80008500:	e0 8f 06 c9 	bral	80009292 <_vfprintf_r+0x166e>
80008504:	40 2a       	lddsp	r10,sp[0x8]
80008506:	5b fa       	cp.w	r10,-1
80008508:	c0 41       	brne	80008510 <_vfprintf_r+0x8ec>
8000850a:	30 69       	mov	r9,6
8000850c:	50 29       	stdsp	sp[0x8],r9
8000850e:	c1 18       	rjmp	80008530 <_vfprintf_r+0x90c>
80008510:	e0 40 00 47 	cp.w	r0,71
80008514:	5f 09       	sreq	r9
80008516:	e0 40 00 67 	cp.w	r0,103
8000851a:	5f 08       	sreq	r8
8000851c:	f3 e8 10 08 	or	r8,r9,r8
80008520:	f8 08 18 00 	cp.b	r8,r12
80008524:	c0 60       	breq	80008530 <_vfprintf_r+0x90c>
80008526:	40 28       	lddsp	r8,sp[0x8]
80008528:	58 08       	cp.w	r8,0
8000852a:	f9 b8 00 01 	moveq	r8,1
8000852e:	50 28       	stdsp	sp[0x8],r8
80008530:	40 78       	lddsp	r8,sp[0x1c]
80008532:	40 59       	lddsp	r9,sp[0x14]
80008534:	fa e9 06 94 	st.d	sp[1684],r8
80008538:	a9 a3       	sbr	r3,0x8
8000853a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000853e:	58 08       	cp.w	r8,0
80008540:	c0 65       	brlt	8000854c <_vfprintf_r+0x928>
80008542:	40 5e       	lddsp	lr,sp[0x14]
80008544:	30 0c       	mov	r12,0
80008546:	50 6e       	stdsp	sp[0x18],lr
80008548:	50 9c       	stdsp	sp[0x24],r12
8000854a:	c0 78       	rjmp	80008558 <_vfprintf_r+0x934>
8000854c:	40 5b       	lddsp	r11,sp[0x14]
8000854e:	32 da       	mov	r10,45
80008550:	ee 1b 80 00 	eorh	r11,0x8000
80008554:	50 9a       	stdsp	sp[0x24],r10
80008556:	50 6b       	stdsp	sp[0x18],r11
80008558:	e0 40 00 46 	cp.w	r0,70
8000855c:	5f 09       	sreq	r9
8000855e:	e0 40 00 66 	cp.w	r0,102
80008562:	5f 08       	sreq	r8
80008564:	f3 e8 10 08 	or	r8,r9,r8
80008568:	50 48       	stdsp	sp[0x10],r8
8000856a:	c0 40       	breq	80008572 <_vfprintf_r+0x94e>
8000856c:	40 22       	lddsp	r2,sp[0x8]
8000856e:	30 39       	mov	r9,3
80008570:	c1 a8       	rjmp	800085a4 <_vfprintf_r+0x980>
80008572:	e0 40 00 45 	cp.w	r0,69
80008576:	5f 09       	sreq	r9
80008578:	e0 40 00 65 	cp.w	r0,101
8000857c:	5f 08       	sreq	r8
8000857e:	40 46       	lddsp	r6,sp[0x10]
80008580:	10 49       	or	r9,r8
80008582:	ec 09 18 00 	cp.b	r9,r6
80008586:	c0 b1       	brne	8000859c <_vfprintf_r+0x978>
80008588:	40 22       	lddsp	r2,sp[0x8]
8000858a:	c0 c8       	rjmp	800085a2 <_vfprintf_r+0x97e>
8000858c:	80 00       	ld.sh	r0,r0[0x0]
8000858e:	de ac       	*unknown*
80008590:	80 00       	ld.sh	r0,r0[0x0]
80008592:	de b0       	acall	0x3ac
80008594:	80 00       	ld.sh	r0,r0[0x0]
80008596:	de b4       	*unknown*
80008598:	80 00       	ld.sh	r0,r0[0x0]
8000859a:	de b8       	*unknown*
8000859c:	40 2e       	lddsp	lr,sp[0x8]
8000859e:	fc c2 ff ff 	sub	r2,lr,-1
800085a2:	30 29       	mov	r9,2
800085a4:	fa c8 f9 5c 	sub	r8,sp,-1700
800085a8:	1a d8       	st.w	--sp,r8
800085aa:	fa c8 f9 54 	sub	r8,sp,-1708
800085ae:	1a d8       	st.w	--sp,r8
800085b0:	fa c8 f9 4c 	sub	r8,sp,-1716
800085b4:	0a 9c       	mov	r12,r5
800085b6:	1a d8       	st.w	--sp,r8
800085b8:	04 98       	mov	r8,r2
800085ba:	40 9b       	lddsp	r11,sp[0x24]
800085bc:	40 aa       	lddsp	r10,sp[0x28]
800085be:	e0 a0 0b bf 	rcall	80009d3c <_dtoa_r>
800085c2:	e0 40 00 47 	cp.w	r0,71
800085c6:	5f 19       	srne	r9
800085c8:	e0 40 00 67 	cp.w	r0,103
800085cc:	5f 18       	srne	r8
800085ce:	18 96       	mov	r6,r12
800085d0:	2f dd       	sub	sp,-12
800085d2:	f3 e8 00 08 	and	r8,r9,r8
800085d6:	c0 41       	brne	800085de <_vfprintf_r+0x9ba>
800085d8:	ed b3 00 00 	bld	r3,0x0
800085dc:	c3 01       	brne	8000863c <_vfprintf_r+0xa18>
800085de:	ec 02 00 0c 	add	r12,r6,r2
800085e2:	50 3c       	stdsp	sp[0xc],r12
800085e4:	40 4b       	lddsp	r11,sp[0x10]
800085e6:	58 0b       	cp.w	r11,0
800085e8:	c1 50       	breq	80008612 <_vfprintf_r+0x9ee>
800085ea:	0d 89       	ld.ub	r9,r6[0x0]
800085ec:	33 08       	mov	r8,48
800085ee:	f0 09 18 00 	cp.b	r9,r8
800085f2:	c0 b1       	brne	80008608 <_vfprintf_r+0x9e4>
800085f4:	30 08       	mov	r8,0
800085f6:	30 09       	mov	r9,0
800085f8:	40 6b       	lddsp	r11,sp[0x18]
800085fa:	40 7a       	lddsp	r10,sp[0x1c]
800085fc:	e0 a0 21 13 	rcall	8000c822 <__avr32_f64_cmp_eq>
80008600:	fb b2 00 01 	rsubeq	r2,1
80008604:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80008608:	40 3a       	lddsp	r10,sp[0xc]
8000860a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000860e:	10 0a       	add	r10,r8
80008610:	50 3a       	stdsp	sp[0xc],r10
80008612:	40 6b       	lddsp	r11,sp[0x18]
80008614:	30 08       	mov	r8,0
80008616:	30 09       	mov	r9,0
80008618:	40 7a       	lddsp	r10,sp[0x1c]
8000861a:	e0 a0 21 04 	rcall	8000c822 <__avr32_f64_cmp_eq>
8000861e:	c0 90       	breq	80008630 <_vfprintf_r+0xa0c>
80008620:	40 39       	lddsp	r9,sp[0xc]
80008622:	fb 49 06 a4 	st.w	sp[1700],r9
80008626:	c0 58       	rjmp	80008630 <_vfprintf_r+0xa0c>
80008628:	10 c9       	st.b	r8++,r9
8000862a:	fb 48 06 a4 	st.w	sp[1700],r8
8000862e:	c0 28       	rjmp	80008632 <_vfprintf_r+0xa0e>
80008630:	33 09       	mov	r9,48
80008632:	fa f8 06 a4 	ld.w	r8,sp[1700]
80008636:	40 3e       	lddsp	lr,sp[0xc]
80008638:	1c 38       	cp.w	r8,lr
8000863a:	cf 73       	brcs	80008628 <_vfprintf_r+0xa04>
8000863c:	e0 40 00 47 	cp.w	r0,71
80008640:	5f 09       	sreq	r9
80008642:	e0 40 00 67 	cp.w	r0,103
80008646:	5f 08       	sreq	r8
80008648:	f3 e8 10 08 	or	r8,r9,r8
8000864c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80008650:	0c 19       	sub	r9,r6
80008652:	50 69       	stdsp	sp[0x18],r9
80008654:	58 08       	cp.w	r8,0
80008656:	c0 b0       	breq	8000866c <_vfprintf_r+0xa48>
80008658:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000865c:	5b d8       	cp.w	r8,-3
8000865e:	c0 55       	brlt	80008668 <_vfprintf_r+0xa44>
80008660:	40 2c       	lddsp	r12,sp[0x8]
80008662:	18 38       	cp.w	r8,r12
80008664:	e0 8a 00 6a 	brle	80008738 <_vfprintf_r+0xb14>
80008668:	20 20       	sub	r0,2
8000866a:	c0 58       	rjmp	80008674 <_vfprintf_r+0xa50>
8000866c:	e0 40 00 65 	cp.w	r0,101
80008670:	e0 89 00 46 	brgt	800086fc <_vfprintf_r+0xad8>
80008674:	fa fb 06 ac 	ld.w	r11,sp[1708]
80008678:	fb 60 06 9c 	st.b	sp[1692],r0
8000867c:	20 1b       	sub	r11,1
8000867e:	fb 4b 06 ac 	st.w	sp[1708],r11
80008682:	c0 47       	brpl	8000868a <_vfprintf_r+0xa66>
80008684:	5c 3b       	neg	r11
80008686:	32 d8       	mov	r8,45
80008688:	c0 28       	rjmp	8000868c <_vfprintf_r+0xa68>
8000868a:	32 b8       	mov	r8,43
8000868c:	fb 68 06 9d 	st.b	sp[1693],r8
80008690:	58 9b       	cp.w	r11,9
80008692:	e0 8a 00 1d 	brle	800086cc <_vfprintf_r+0xaa8>
80008696:	fa c9 fa 35 	sub	r9,sp,-1483
8000869a:	30 aa       	mov	r10,10
8000869c:	12 98       	mov	r8,r9
8000869e:	0e 9c       	mov	r12,r7
800086a0:	0c 92       	mov	r2,r6
800086a2:	f6 0a 0c 06 	divs	r6,r11,r10
800086a6:	0e 9b       	mov	r11,r7
800086a8:	2d 0b       	sub	r11,-48
800086aa:	10 fb       	st.b	--r8,r11
800086ac:	0c 9b       	mov	r11,r6
800086ae:	58 96       	cp.w	r6,9
800086b0:	fe 99 ff f9 	brgt	800086a2 <_vfprintf_r+0xa7e>
800086b4:	2d 0b       	sub	r11,-48
800086b6:	18 97       	mov	r7,r12
800086b8:	04 96       	mov	r6,r2
800086ba:	10 fb       	st.b	--r8,r11
800086bc:	fa ca f9 62 	sub	r10,sp,-1694
800086c0:	c0 38       	rjmp	800086c6 <_vfprintf_r+0xaa2>
800086c2:	11 3b       	ld.ub	r11,r8++
800086c4:	14 cb       	st.b	r10++,r11
800086c6:	12 38       	cp.w	r8,r9
800086c8:	cf d3       	brcs	800086c2 <_vfprintf_r+0xa9e>
800086ca:	c0 98       	rjmp	800086dc <_vfprintf_r+0xab8>
800086cc:	2d 0b       	sub	r11,-48
800086ce:	33 08       	mov	r8,48
800086d0:	fb 6b 06 9f 	st.b	sp[1695],r11
800086d4:	fb 68 06 9e 	st.b	sp[1694],r8
800086d8:	fa ca f9 60 	sub	r10,sp,-1696
800086dc:	fa c8 f9 64 	sub	r8,sp,-1692
800086e0:	f4 08 01 08 	sub	r8,r10,r8
800086e4:	50 e8       	stdsp	sp[0x38],r8
800086e6:	10 92       	mov	r2,r8
800086e8:	40 6b       	lddsp	r11,sp[0x18]
800086ea:	16 02       	add	r2,r11
800086ec:	58 1b       	cp.w	r11,1
800086ee:	e0 89 00 05 	brgt	800086f8 <_vfprintf_r+0xad4>
800086f2:	ed b3 00 00 	bld	r3,0x0
800086f6:	c3 51       	brne	80008760 <_vfprintf_r+0xb3c>
800086f8:	2f f2       	sub	r2,-1
800086fa:	c3 38       	rjmp	80008760 <_vfprintf_r+0xb3c>
800086fc:	e0 40 00 66 	cp.w	r0,102
80008700:	c1 c1       	brne	80008738 <_vfprintf_r+0xb14>
80008702:	fa f2 06 ac 	ld.w	r2,sp[1708]
80008706:	58 02       	cp.w	r2,0
80008708:	e0 8a 00 0c 	brle	80008720 <_vfprintf_r+0xafc>
8000870c:	40 2a       	lddsp	r10,sp[0x8]
8000870e:	58 0a       	cp.w	r10,0
80008710:	c0 41       	brne	80008718 <_vfprintf_r+0xaf4>
80008712:	ed b3 00 00 	bld	r3,0x0
80008716:	c2 51       	brne	80008760 <_vfprintf_r+0xb3c>
80008718:	2f f2       	sub	r2,-1
8000871a:	40 29       	lddsp	r9,sp[0x8]
8000871c:	12 02       	add	r2,r9
8000871e:	c0 b8       	rjmp	80008734 <_vfprintf_r+0xb10>
80008720:	40 28       	lddsp	r8,sp[0x8]
80008722:	58 08       	cp.w	r8,0
80008724:	c0 61       	brne	80008730 <_vfprintf_r+0xb0c>
80008726:	ed b3 00 00 	bld	r3,0x0
8000872a:	c0 30       	breq	80008730 <_vfprintf_r+0xb0c>
8000872c:	30 12       	mov	r2,1
8000872e:	c1 98       	rjmp	80008760 <_vfprintf_r+0xb3c>
80008730:	40 22       	lddsp	r2,sp[0x8]
80008732:	2f e2       	sub	r2,-2
80008734:	36 60       	mov	r0,102
80008736:	c1 58       	rjmp	80008760 <_vfprintf_r+0xb3c>
80008738:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000873c:	40 6e       	lddsp	lr,sp[0x18]
8000873e:	1c 32       	cp.w	r2,lr
80008740:	c0 65       	brlt	8000874c <_vfprintf_r+0xb28>
80008742:	ed b3 00 00 	bld	r3,0x0
80008746:	f7 b2 00 ff 	subeq	r2,-1
8000874a:	c0 a8       	rjmp	8000875e <_vfprintf_r+0xb3a>
8000874c:	e4 08 11 02 	rsub	r8,r2,2
80008750:	40 6c       	lddsp	r12,sp[0x18]
80008752:	58 02       	cp.w	r2,0
80008754:	f0 02 17 a0 	movle	r2,r8
80008758:	f9 b2 09 01 	movgt	r2,1
8000875c:	18 02       	add	r2,r12
8000875e:	36 70       	mov	r0,103
80008760:	40 9b       	lddsp	r11,sp[0x24]
80008762:	58 0b       	cp.w	r11,0
80008764:	e0 80 05 91 	breq	80009286 <_vfprintf_r+0x1662>
80008768:	32 d8       	mov	r8,45
8000876a:	fb 68 06 bb 	st.b	sp[1723],r8
8000876e:	e0 8f 05 90 	bral	8000928e <_vfprintf_r+0x166a>
80008772:	50 a7       	stdsp	sp[0x28],r7
80008774:	04 95       	mov	r5,r2
80008776:	0c 97       	mov	r7,r6
80008778:	02 92       	mov	r2,r1
8000877a:	08 96       	mov	r6,r4
8000877c:	40 41       	lddsp	r1,sp[0x10]
8000877e:	40 94       	lddsp	r4,sp[0x24]
80008780:	0e 99       	mov	r9,r7
80008782:	ed b3 00 05 	bld	r3,0x5
80008786:	c4 81       	brne	80008816 <_vfprintf_r+0xbf2>
80008788:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000878c:	40 3e       	lddsp	lr,sp[0xc]
8000878e:	58 0e       	cp.w	lr,0
80008790:	c1 d0       	breq	800087ca <_vfprintf_r+0xba6>
80008792:	10 36       	cp.w	r6,r8
80008794:	c0 64       	brge	800087a0 <_vfprintf_r+0xb7c>
80008796:	fa cc f9 44 	sub	r12,sp,-1724
8000879a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000879e:	c1 d8       	rjmp	800087d8 <_vfprintf_r+0xbb4>
800087a0:	fa c8 f9 50 	sub	r8,sp,-1712
800087a4:	1a d8       	st.w	--sp,r8
800087a6:	fa c8 fa b8 	sub	r8,sp,-1352
800087aa:	04 9a       	mov	r10,r2
800087ac:	1a d8       	st.w	--sp,r8
800087ae:	fa c8 fb b4 	sub	r8,sp,-1100
800087b2:	0c 9b       	mov	r11,r6
800087b4:	1a d8       	st.w	--sp,r8
800087b6:	0a 9c       	mov	r12,r5
800087b8:	fa c8 f9 40 	sub	r8,sp,-1728
800087bc:	fa c9 ff b4 	sub	r9,sp,-76
800087c0:	fe b0 f8 98 	rcall	800078f0 <get_arg>
800087c4:	2f dd       	sub	sp,-12
800087c6:	78 0a       	ld.w	r10,r12[0x0]
800087c8:	c2 08       	rjmp	80008808 <_vfprintf_r+0xbe4>
800087ca:	2f f7       	sub	r7,-1
800087cc:	10 39       	cp.w	r9,r8
800087ce:	c0 84       	brge	800087de <_vfprintf_r+0xbba>
800087d0:	fa cb f9 44 	sub	r11,sp,-1724
800087d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800087d8:	ec fa fd 88 	ld.w	r10,r6[-632]
800087dc:	c1 68       	rjmp	80008808 <_vfprintf_r+0xbe4>
800087de:	41 09       	lddsp	r9,sp[0x40]
800087e0:	59 f8       	cp.w	r8,31
800087e2:	e0 89 00 10 	brgt	80008802 <_vfprintf_r+0xbde>
800087e6:	f2 ca ff fc 	sub	r10,r9,-4
800087ea:	51 0a       	stdsp	sp[0x40],r10
800087ec:	fa c6 f9 44 	sub	r6,sp,-1724
800087f0:	72 0a       	ld.w	r10,r9[0x0]
800087f2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800087f6:	f3 4a fd 88 	st.w	r9[-632],r10
800087fa:	2f f8       	sub	r8,-1
800087fc:	fb 48 06 b4 	st.w	sp[1716],r8
80008800:	c0 48       	rjmp	80008808 <_vfprintf_r+0xbe4>
80008802:	72 0a       	ld.w	r10,r9[0x0]
80008804:	2f c9       	sub	r9,-4
80008806:	51 09       	stdsp	sp[0x40],r9
80008808:	40 be       	lddsp	lr,sp[0x2c]
8000880a:	1c 98       	mov	r8,lr
8000880c:	95 1e       	st.w	r10[0x4],lr
8000880e:	bf 58       	asr	r8,0x1f
80008810:	95 08       	st.w	r10[0x0],r8
80008812:	fe 9f fa 93 	bral	80007d38 <_vfprintf_r+0x114>
80008816:	ed b3 00 04 	bld	r3,0x4
8000881a:	c4 80       	breq	800088aa <_vfprintf_r+0xc86>
8000881c:	e2 13 00 40 	andl	r3,0x40,COH
80008820:	c4 50       	breq	800088aa <_vfprintf_r+0xc86>
80008822:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008826:	40 3c       	lddsp	r12,sp[0xc]
80008828:	58 0c       	cp.w	r12,0
8000882a:	c1 d0       	breq	80008864 <_vfprintf_r+0xc40>
8000882c:	10 36       	cp.w	r6,r8
8000882e:	c0 64       	brge	8000883a <_vfprintf_r+0xc16>
80008830:	fa cb f9 44 	sub	r11,sp,-1724
80008834:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008838:	c1 d8       	rjmp	80008872 <_vfprintf_r+0xc4e>
8000883a:	fa c8 f9 50 	sub	r8,sp,-1712
8000883e:	1a d8       	st.w	--sp,r8
80008840:	fa c8 fa b8 	sub	r8,sp,-1352
80008844:	04 9a       	mov	r10,r2
80008846:	1a d8       	st.w	--sp,r8
80008848:	fa c8 fb b4 	sub	r8,sp,-1100
8000884c:	0c 9b       	mov	r11,r6
8000884e:	1a d8       	st.w	--sp,r8
80008850:	0a 9c       	mov	r12,r5
80008852:	fa c8 f9 40 	sub	r8,sp,-1728
80008856:	fa c9 ff b4 	sub	r9,sp,-76
8000885a:	fe b0 f8 4b 	rcall	800078f0 <get_arg>
8000885e:	2f dd       	sub	sp,-12
80008860:	78 0a       	ld.w	r10,r12[0x0]
80008862:	c2 08       	rjmp	800088a2 <_vfprintf_r+0xc7e>
80008864:	2f f7       	sub	r7,-1
80008866:	10 39       	cp.w	r9,r8
80008868:	c0 84       	brge	80008878 <_vfprintf_r+0xc54>
8000886a:	fa ca f9 44 	sub	r10,sp,-1724
8000886e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008872:	ec fa fd 88 	ld.w	r10,r6[-632]
80008876:	c1 68       	rjmp	800088a2 <_vfprintf_r+0xc7e>
80008878:	41 09       	lddsp	r9,sp[0x40]
8000887a:	59 f8       	cp.w	r8,31
8000887c:	e0 89 00 10 	brgt	8000889c <_vfprintf_r+0xc78>
80008880:	f2 ca ff fc 	sub	r10,r9,-4
80008884:	51 0a       	stdsp	sp[0x40],r10
80008886:	fa c6 f9 44 	sub	r6,sp,-1724
8000888a:	72 0a       	ld.w	r10,r9[0x0]
8000888c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008890:	f3 4a fd 88 	st.w	r9[-632],r10
80008894:	2f f8       	sub	r8,-1
80008896:	fb 48 06 b4 	st.w	sp[1716],r8
8000889a:	c0 48       	rjmp	800088a2 <_vfprintf_r+0xc7e>
8000889c:	72 0a       	ld.w	r10,r9[0x0]
8000889e:	2f c9       	sub	r9,-4
800088a0:	51 09       	stdsp	sp[0x40],r9
800088a2:	40 be       	lddsp	lr,sp[0x2c]
800088a4:	b4 0e       	st.h	r10[0x0],lr
800088a6:	fe 9f fa 49 	bral	80007d38 <_vfprintf_r+0x114>
800088aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800088ae:	40 3c       	lddsp	r12,sp[0xc]
800088b0:	58 0c       	cp.w	r12,0
800088b2:	c1 d0       	breq	800088ec <_vfprintf_r+0xcc8>
800088b4:	10 36       	cp.w	r6,r8
800088b6:	c0 64       	brge	800088c2 <_vfprintf_r+0xc9e>
800088b8:	fa cb f9 44 	sub	r11,sp,-1724
800088bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800088c0:	c1 d8       	rjmp	800088fa <_vfprintf_r+0xcd6>
800088c2:	fa c8 f9 50 	sub	r8,sp,-1712
800088c6:	1a d8       	st.w	--sp,r8
800088c8:	fa c8 fa b8 	sub	r8,sp,-1352
800088cc:	04 9a       	mov	r10,r2
800088ce:	1a d8       	st.w	--sp,r8
800088d0:	fa c8 fb b4 	sub	r8,sp,-1100
800088d4:	0c 9b       	mov	r11,r6
800088d6:	1a d8       	st.w	--sp,r8
800088d8:	0a 9c       	mov	r12,r5
800088da:	fa c8 f9 40 	sub	r8,sp,-1728
800088de:	fa c9 ff b4 	sub	r9,sp,-76
800088e2:	fe b0 f8 07 	rcall	800078f0 <get_arg>
800088e6:	2f dd       	sub	sp,-12
800088e8:	78 0a       	ld.w	r10,r12[0x0]
800088ea:	c2 08       	rjmp	8000892a <_vfprintf_r+0xd06>
800088ec:	2f f7       	sub	r7,-1
800088ee:	10 39       	cp.w	r9,r8
800088f0:	c0 84       	brge	80008900 <_vfprintf_r+0xcdc>
800088f2:	fa ca f9 44 	sub	r10,sp,-1724
800088f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800088fa:	ec fa fd 88 	ld.w	r10,r6[-632]
800088fe:	c1 68       	rjmp	8000892a <_vfprintf_r+0xd06>
80008900:	41 09       	lddsp	r9,sp[0x40]
80008902:	59 f8       	cp.w	r8,31
80008904:	e0 89 00 10 	brgt	80008924 <_vfprintf_r+0xd00>
80008908:	f2 ca ff fc 	sub	r10,r9,-4
8000890c:	51 0a       	stdsp	sp[0x40],r10
8000890e:	fa c6 f9 44 	sub	r6,sp,-1724
80008912:	72 0a       	ld.w	r10,r9[0x0]
80008914:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008918:	f3 4a fd 88 	st.w	r9[-632],r10
8000891c:	2f f8       	sub	r8,-1
8000891e:	fb 48 06 b4 	st.w	sp[1716],r8
80008922:	c0 48       	rjmp	8000892a <_vfprintf_r+0xd06>
80008924:	72 0a       	ld.w	r10,r9[0x0]
80008926:	2f c9       	sub	r9,-4
80008928:	51 09       	stdsp	sp[0x40],r9
8000892a:	40 be       	lddsp	lr,sp[0x2c]
8000892c:	95 0e       	st.w	r10[0x0],lr
8000892e:	fe 9f fa 05 	bral	80007d38 <_vfprintf_r+0x114>
80008932:	50 a7       	stdsp	sp[0x28],r7
80008934:	50 80       	stdsp	sp[0x20],r0
80008936:	0c 97       	mov	r7,r6
80008938:	04 95       	mov	r5,r2
8000893a:	08 96       	mov	r6,r4
8000893c:	02 92       	mov	r2,r1
8000893e:	40 94       	lddsp	r4,sp[0x24]
80008940:	10 90       	mov	r0,r8
80008942:	40 41       	lddsp	r1,sp[0x10]
80008944:	a5 a3       	sbr	r3,0x4
80008946:	c0 a8       	rjmp	8000895a <_vfprintf_r+0xd36>
80008948:	50 a7       	stdsp	sp[0x28],r7
8000894a:	50 80       	stdsp	sp[0x20],r0
8000894c:	0c 97       	mov	r7,r6
8000894e:	04 95       	mov	r5,r2
80008950:	08 96       	mov	r6,r4
80008952:	02 92       	mov	r2,r1
80008954:	40 94       	lddsp	r4,sp[0x24]
80008956:	10 90       	mov	r0,r8
80008958:	40 41       	lddsp	r1,sp[0x10]
8000895a:	ed b3 00 05 	bld	r3,0x5
8000895e:	c5 d1       	brne	80008a18 <_vfprintf_r+0xdf4>
80008960:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008964:	40 3c       	lddsp	r12,sp[0xc]
80008966:	58 0c       	cp.w	r12,0
80008968:	c2 60       	breq	800089b4 <_vfprintf_r+0xd90>
8000896a:	10 36       	cp.w	r6,r8
8000896c:	c0 a4       	brge	80008980 <_vfprintf_r+0xd5c>
8000896e:	fa cb f9 44 	sub	r11,sp,-1724
80008972:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008976:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000897a:	fa e9 00 00 	st.d	sp[0],r8
8000897e:	c1 88       	rjmp	800089ae <_vfprintf_r+0xd8a>
80008980:	fa c8 f9 50 	sub	r8,sp,-1712
80008984:	1a d8       	st.w	--sp,r8
80008986:	fa c8 fa b8 	sub	r8,sp,-1352
8000898a:	04 9a       	mov	r10,r2
8000898c:	1a d8       	st.w	--sp,r8
8000898e:	0c 9b       	mov	r11,r6
80008990:	fa c8 fb b4 	sub	r8,sp,-1100
80008994:	0a 9c       	mov	r12,r5
80008996:	1a d8       	st.w	--sp,r8
80008998:	fa c8 f9 40 	sub	r8,sp,-1728
8000899c:	fa c9 ff b4 	sub	r9,sp,-76
800089a0:	fe b0 f7 a8 	rcall	800078f0 <get_arg>
800089a4:	2f dd       	sub	sp,-12
800089a6:	f8 ea 00 00 	ld.d	r10,r12[0]
800089aa:	fa eb 00 00 	st.d	sp[0],r10
800089ae:	30 08       	mov	r8,0
800089b0:	e0 8f 03 db 	bral	80009166 <_vfprintf_r+0x1542>
800089b4:	ee ca ff ff 	sub	r10,r7,-1
800089b8:	10 37       	cp.w	r7,r8
800089ba:	c0 b4       	brge	800089d0 <_vfprintf_r+0xdac>
800089bc:	fa c9 f9 44 	sub	r9,sp,-1724
800089c0:	14 97       	mov	r7,r10
800089c2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800089c6:	ec ea fd 88 	ld.d	r10,r6[-632]
800089ca:	fa eb 00 00 	st.d	sp[0],r10
800089ce:	c1 88       	rjmp	800089fe <_vfprintf_r+0xdda>
800089d0:	41 09       	lddsp	r9,sp[0x40]
800089d2:	59 f8       	cp.w	r8,31
800089d4:	e0 89 00 18 	brgt	80008a04 <_vfprintf_r+0xde0>
800089d8:	f2 e6 00 00 	ld.d	r6,r9[0]
800089dc:	f2 cb ff f8 	sub	r11,r9,-8
800089e0:	fa e7 00 00 	st.d	sp[0],r6
800089e4:	51 0b       	stdsp	sp[0x40],r11
800089e6:	fa c6 f9 44 	sub	r6,sp,-1724
800089ea:	ec 08 00 39 	add	r9,r6,r8<<0x3
800089ee:	fa e6 00 00 	ld.d	r6,sp[0]
800089f2:	f2 e7 fd 88 	st.d	r9[-632],r6
800089f6:	2f f8       	sub	r8,-1
800089f8:	14 97       	mov	r7,r10
800089fa:	fb 48 06 b4 	st.w	sp[1716],r8
800089fe:	40 38       	lddsp	r8,sp[0xc]
80008a00:	e0 8f 03 b3 	bral	80009166 <_vfprintf_r+0x1542>
80008a04:	f2 e6 00 00 	ld.d	r6,r9[0]
80008a08:	40 38       	lddsp	r8,sp[0xc]
80008a0a:	fa e7 00 00 	st.d	sp[0],r6
80008a0e:	2f 89       	sub	r9,-8
80008a10:	14 97       	mov	r7,r10
80008a12:	51 09       	stdsp	sp[0x40],r9
80008a14:	e0 8f 03 a9 	bral	80009166 <_vfprintf_r+0x1542>
80008a18:	ed b3 00 04 	bld	r3,0x4
80008a1c:	c1 61       	brne	80008a48 <_vfprintf_r+0xe24>
80008a1e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a22:	40 3e       	lddsp	lr,sp[0xc]
80008a24:	58 0e       	cp.w	lr,0
80008a26:	c0 80       	breq	80008a36 <_vfprintf_r+0xe12>
80008a28:	10 36       	cp.w	r6,r8
80008a2a:	c6 74       	brge	80008af8 <_vfprintf_r+0xed4>
80008a2c:	fa cc f9 44 	sub	r12,sp,-1724
80008a30:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008a34:	c8 08       	rjmp	80008b34 <_vfprintf_r+0xf10>
80008a36:	ee ca ff ff 	sub	r10,r7,-1
80008a3a:	10 37       	cp.w	r7,r8
80008a3c:	c7 f4       	brge	80008b3a <_vfprintf_r+0xf16>
80008a3e:	fa cb f9 44 	sub	r11,sp,-1724
80008a42:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008a46:	c7 68       	rjmp	80008b32 <_vfprintf_r+0xf0e>
80008a48:	ed b3 00 06 	bld	r3,0x6
80008a4c:	c4 a1       	brne	80008ae0 <_vfprintf_r+0xebc>
80008a4e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a52:	40 3c       	lddsp	r12,sp[0xc]
80008a54:	58 0c       	cp.w	r12,0
80008a56:	c1 d0       	breq	80008a90 <_vfprintf_r+0xe6c>
80008a58:	10 36       	cp.w	r6,r8
80008a5a:	c0 64       	brge	80008a66 <_vfprintf_r+0xe42>
80008a5c:	fa cb f9 44 	sub	r11,sp,-1724
80008a60:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008a64:	c1 f8       	rjmp	80008aa2 <_vfprintf_r+0xe7e>
80008a66:	fa c8 f9 50 	sub	r8,sp,-1712
80008a6a:	1a d8       	st.w	--sp,r8
80008a6c:	fa c8 fa b8 	sub	r8,sp,-1352
80008a70:	1a d8       	st.w	--sp,r8
80008a72:	fa c8 fb b4 	sub	r8,sp,-1100
80008a76:	1a d8       	st.w	--sp,r8
80008a78:	fa c8 f9 40 	sub	r8,sp,-1728
80008a7c:	fa c9 ff b4 	sub	r9,sp,-76
80008a80:	04 9a       	mov	r10,r2
80008a82:	0c 9b       	mov	r11,r6
80008a84:	0a 9c       	mov	r12,r5
80008a86:	fe b0 f7 35 	rcall	800078f0 <get_arg>
80008a8a:	2f dd       	sub	sp,-12
80008a8c:	98 18       	ld.sh	r8,r12[0x2]
80008a8e:	c2 68       	rjmp	80008ada <_vfprintf_r+0xeb6>
80008a90:	ee ca ff ff 	sub	r10,r7,-1
80008a94:	10 37       	cp.w	r7,r8
80008a96:	c0 94       	brge	80008aa8 <_vfprintf_r+0xe84>
80008a98:	fa c9 f9 44 	sub	r9,sp,-1724
80008a9c:	14 97       	mov	r7,r10
80008a9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008aa2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008aa6:	c1 a8       	rjmp	80008ada <_vfprintf_r+0xeb6>
80008aa8:	41 09       	lddsp	r9,sp[0x40]
80008aaa:	59 f8       	cp.w	r8,31
80008aac:	e0 89 00 13 	brgt	80008ad2 <_vfprintf_r+0xeae>
80008ab0:	f2 cb ff fc 	sub	r11,r9,-4
80008ab4:	51 0b       	stdsp	sp[0x40],r11
80008ab6:	72 09       	ld.w	r9,r9[0x0]
80008ab8:	fa c6 f9 44 	sub	r6,sp,-1724
80008abc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008ac0:	2f f8       	sub	r8,-1
80008ac2:	f7 49 fd 88 	st.w	r11[-632],r9
80008ac6:	fb 48 06 b4 	st.w	sp[1716],r8
80008aca:	14 97       	mov	r7,r10
80008acc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008ad0:	c0 58       	rjmp	80008ada <_vfprintf_r+0xeb6>
80008ad2:	92 18       	ld.sh	r8,r9[0x2]
80008ad4:	14 97       	mov	r7,r10
80008ad6:	2f c9       	sub	r9,-4
80008ad8:	51 09       	stdsp	sp[0x40],r9
80008ada:	5c 78       	castu.h	r8
80008adc:	50 18       	stdsp	sp[0x4],r8
80008ade:	c4 68       	rjmp	80008b6a <_vfprintf_r+0xf46>
80008ae0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008ae4:	40 3c       	lddsp	r12,sp[0xc]
80008ae6:	58 0c       	cp.w	r12,0
80008ae8:	c1 d0       	breq	80008b22 <_vfprintf_r+0xefe>
80008aea:	10 36       	cp.w	r6,r8
80008aec:	c0 64       	brge	80008af8 <_vfprintf_r+0xed4>
80008aee:	fa cb f9 44 	sub	r11,sp,-1724
80008af2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008af6:	c1 f8       	rjmp	80008b34 <_vfprintf_r+0xf10>
80008af8:	fa c8 f9 50 	sub	r8,sp,-1712
80008afc:	1a d8       	st.w	--sp,r8
80008afe:	fa c8 fa b8 	sub	r8,sp,-1352
80008b02:	0c 9b       	mov	r11,r6
80008b04:	1a d8       	st.w	--sp,r8
80008b06:	fa c8 fb b4 	sub	r8,sp,-1100
80008b0a:	04 9a       	mov	r10,r2
80008b0c:	1a d8       	st.w	--sp,r8
80008b0e:	0a 9c       	mov	r12,r5
80008b10:	fa c8 f9 40 	sub	r8,sp,-1728
80008b14:	fa c9 ff b4 	sub	r9,sp,-76
80008b18:	fe b0 f6 ec 	rcall	800078f0 <get_arg>
80008b1c:	2f dd       	sub	sp,-12
80008b1e:	78 0b       	ld.w	r11,r12[0x0]
80008b20:	c2 48       	rjmp	80008b68 <_vfprintf_r+0xf44>
80008b22:	ee ca ff ff 	sub	r10,r7,-1
80008b26:	10 37       	cp.w	r7,r8
80008b28:	c0 94       	brge	80008b3a <_vfprintf_r+0xf16>
80008b2a:	fa c9 f9 44 	sub	r9,sp,-1724
80008b2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008b32:	14 97       	mov	r7,r10
80008b34:	ec fb fd 88 	ld.w	r11,r6[-632]
80008b38:	c1 88       	rjmp	80008b68 <_vfprintf_r+0xf44>
80008b3a:	41 09       	lddsp	r9,sp[0x40]
80008b3c:	59 f8       	cp.w	r8,31
80008b3e:	e0 89 00 11 	brgt	80008b60 <_vfprintf_r+0xf3c>
80008b42:	f2 cb ff fc 	sub	r11,r9,-4
80008b46:	51 0b       	stdsp	sp[0x40],r11
80008b48:	fa c6 f9 44 	sub	r6,sp,-1724
80008b4c:	72 0b       	ld.w	r11,r9[0x0]
80008b4e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008b52:	f3 4b fd 88 	st.w	r9[-632],r11
80008b56:	2f f8       	sub	r8,-1
80008b58:	14 97       	mov	r7,r10
80008b5a:	fb 48 06 b4 	st.w	sp[1716],r8
80008b5e:	c0 58       	rjmp	80008b68 <_vfprintf_r+0xf44>
80008b60:	72 0b       	ld.w	r11,r9[0x0]
80008b62:	14 97       	mov	r7,r10
80008b64:	2f c9       	sub	r9,-4
80008b66:	51 09       	stdsp	sp[0x40],r9
80008b68:	50 1b       	stdsp	sp[0x4],r11
80008b6a:	30 0e       	mov	lr,0
80008b6c:	50 0e       	stdsp	sp[0x0],lr
80008b6e:	1c 98       	mov	r8,lr
80008b70:	e0 8f 02 fb 	bral	80009166 <_vfprintf_r+0x1542>
80008b74:	50 a7       	stdsp	sp[0x28],r7
80008b76:	50 80       	stdsp	sp[0x20],r0
80008b78:	0c 97       	mov	r7,r6
80008b7a:	04 95       	mov	r5,r2
80008b7c:	08 96       	mov	r6,r4
80008b7e:	02 92       	mov	r2,r1
80008b80:	40 94       	lddsp	r4,sp[0x24]
80008b82:	40 41       	lddsp	r1,sp[0x10]
80008b84:	0e 99       	mov	r9,r7
80008b86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008b8a:	40 3c       	lddsp	r12,sp[0xc]
80008b8c:	58 0c       	cp.w	r12,0
80008b8e:	c1 d0       	breq	80008bc8 <_vfprintf_r+0xfa4>
80008b90:	10 36       	cp.w	r6,r8
80008b92:	c0 64       	brge	80008b9e <_vfprintf_r+0xf7a>
80008b94:	fa cb f9 44 	sub	r11,sp,-1724
80008b98:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008b9c:	c1 d8       	rjmp	80008bd6 <_vfprintf_r+0xfb2>
80008b9e:	fa c8 f9 50 	sub	r8,sp,-1712
80008ba2:	1a d8       	st.w	--sp,r8
80008ba4:	fa c8 fa b8 	sub	r8,sp,-1352
80008ba8:	1a d8       	st.w	--sp,r8
80008baa:	fa c8 fb b4 	sub	r8,sp,-1100
80008bae:	1a d8       	st.w	--sp,r8
80008bb0:	fa c9 ff b4 	sub	r9,sp,-76
80008bb4:	fa c8 f9 40 	sub	r8,sp,-1728
80008bb8:	04 9a       	mov	r10,r2
80008bba:	0c 9b       	mov	r11,r6
80008bbc:	0a 9c       	mov	r12,r5
80008bbe:	fe b0 f6 99 	rcall	800078f0 <get_arg>
80008bc2:	2f dd       	sub	sp,-12
80008bc4:	78 09       	ld.w	r9,r12[0x0]
80008bc6:	c2 18       	rjmp	80008c08 <_vfprintf_r+0xfe4>
80008bc8:	2f f7       	sub	r7,-1
80008bca:	10 39       	cp.w	r9,r8
80008bcc:	c0 84       	brge	80008bdc <_vfprintf_r+0xfb8>
80008bce:	fa ca f9 44 	sub	r10,sp,-1724
80008bd2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008bd6:	ec f9 fd 88 	ld.w	r9,r6[-632]
80008bda:	c1 78       	rjmp	80008c08 <_vfprintf_r+0xfe4>
80008bdc:	41 09       	lddsp	r9,sp[0x40]
80008bde:	59 f8       	cp.w	r8,31
80008be0:	e0 89 00 10 	brgt	80008c00 <_vfprintf_r+0xfdc>
80008be4:	f2 ca ff fc 	sub	r10,r9,-4
80008be8:	51 0a       	stdsp	sp[0x40],r10
80008bea:	fa c6 f9 44 	sub	r6,sp,-1724
80008bee:	72 09       	ld.w	r9,r9[0x0]
80008bf0:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008bf4:	f5 49 fd 88 	st.w	r10[-632],r9
80008bf8:	2f f8       	sub	r8,-1
80008bfa:	fb 48 06 b4 	st.w	sp[1716],r8
80008bfe:	c0 58       	rjmp	80008c08 <_vfprintf_r+0xfe4>
80008c00:	f2 c8 ff fc 	sub	r8,r9,-4
80008c04:	51 08       	stdsp	sp[0x40],r8
80008c06:	72 09       	ld.w	r9,r9[0x0]
80008c08:	33 08       	mov	r8,48
80008c0a:	fb 68 06 b8 	st.b	sp[1720],r8
80008c0e:	37 88       	mov	r8,120
80008c10:	30 0e       	mov	lr,0
80008c12:	fb 68 06 b9 	st.b	sp[1721],r8
80008c16:	4c ac       	lddpc	r12,80008d3c <_vfprintf_r+0x1118>
80008c18:	50 19       	stdsp	sp[0x4],r9
80008c1a:	a1 b3       	sbr	r3,0x1
80008c1c:	50 0e       	stdsp	sp[0x0],lr
80008c1e:	50 dc       	stdsp	sp[0x34],r12
80008c20:	30 28       	mov	r8,2
80008c22:	37 80       	mov	r0,120
80008c24:	e0 8f 02 a1 	bral	80009166 <_vfprintf_r+0x1542>
80008c28:	50 a7       	stdsp	sp[0x28],r7
80008c2a:	50 80       	stdsp	sp[0x20],r0
80008c2c:	10 90       	mov	r0,r8
80008c2e:	30 08       	mov	r8,0
80008c30:	fb 68 06 bb 	st.b	sp[1723],r8
80008c34:	0c 97       	mov	r7,r6
80008c36:	04 95       	mov	r5,r2
80008c38:	08 96       	mov	r6,r4
80008c3a:	02 92       	mov	r2,r1
80008c3c:	40 94       	lddsp	r4,sp[0x24]
80008c3e:	40 41       	lddsp	r1,sp[0x10]
80008c40:	0e 99       	mov	r9,r7
80008c42:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008c46:	40 3b       	lddsp	r11,sp[0xc]
80008c48:	58 0b       	cp.w	r11,0
80008c4a:	c1 d0       	breq	80008c84 <_vfprintf_r+0x1060>
80008c4c:	10 36       	cp.w	r6,r8
80008c4e:	c0 64       	brge	80008c5a <_vfprintf_r+0x1036>
80008c50:	fa ca f9 44 	sub	r10,sp,-1724
80008c54:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008c58:	c1 d8       	rjmp	80008c92 <_vfprintf_r+0x106e>
80008c5a:	fa c8 f9 50 	sub	r8,sp,-1712
80008c5e:	1a d8       	st.w	--sp,r8
80008c60:	fa c8 fa b8 	sub	r8,sp,-1352
80008c64:	1a d8       	st.w	--sp,r8
80008c66:	fa c8 fb b4 	sub	r8,sp,-1100
80008c6a:	0c 9b       	mov	r11,r6
80008c6c:	1a d8       	st.w	--sp,r8
80008c6e:	04 9a       	mov	r10,r2
80008c70:	fa c8 f9 40 	sub	r8,sp,-1728
80008c74:	fa c9 ff b4 	sub	r9,sp,-76
80008c78:	0a 9c       	mov	r12,r5
80008c7a:	fe b0 f6 3b 	rcall	800078f0 <get_arg>
80008c7e:	2f dd       	sub	sp,-12
80008c80:	78 06       	ld.w	r6,r12[0x0]
80008c82:	c2 08       	rjmp	80008cc2 <_vfprintf_r+0x109e>
80008c84:	2f f7       	sub	r7,-1
80008c86:	10 39       	cp.w	r9,r8
80008c88:	c0 84       	brge	80008c98 <_vfprintf_r+0x1074>
80008c8a:	fa c9 f9 44 	sub	r9,sp,-1724
80008c8e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008c92:	ec f6 fd 88 	ld.w	r6,r6[-632]
80008c96:	c1 68       	rjmp	80008cc2 <_vfprintf_r+0x109e>
80008c98:	41 09       	lddsp	r9,sp[0x40]
80008c9a:	59 f8       	cp.w	r8,31
80008c9c:	e0 89 00 10 	brgt	80008cbc <_vfprintf_r+0x1098>
80008ca0:	f2 ca ff fc 	sub	r10,r9,-4
80008ca4:	51 0a       	stdsp	sp[0x40],r10
80008ca6:	72 06       	ld.w	r6,r9[0x0]
80008ca8:	fa ce f9 44 	sub	lr,sp,-1724
80008cac:	fc 08 00 39 	add	r9,lr,r8<<0x3
80008cb0:	f3 46 fd 88 	st.w	r9[-632],r6
80008cb4:	2f f8       	sub	r8,-1
80008cb6:	fb 48 06 b4 	st.w	sp[1716],r8
80008cba:	c0 48       	rjmp	80008cc2 <_vfprintf_r+0x109e>
80008cbc:	72 06       	ld.w	r6,r9[0x0]
80008cbe:	2f c9       	sub	r9,-4
80008cc0:	51 09       	stdsp	sp[0x40],r9
80008cc2:	40 2c       	lddsp	r12,sp[0x8]
80008cc4:	58 0c       	cp.w	r12,0
80008cc6:	c1 05       	brlt	80008ce6 <_vfprintf_r+0x10c2>
80008cc8:	18 9a       	mov	r10,r12
80008cca:	30 0b       	mov	r11,0
80008ccc:	0c 9c       	mov	r12,r6
80008cce:	e0 a0 14 67 	rcall	8000b59c <memchr>
80008cd2:	e0 80 02 dd 	breq	8000928c <_vfprintf_r+0x1668>
80008cd6:	f8 06 01 02 	sub	r2,r12,r6
80008cda:	40 2b       	lddsp	r11,sp[0x8]
80008cdc:	16 32       	cp.w	r2,r11
80008cde:	e0 89 02 d7 	brgt	8000928c <_vfprintf_r+0x1668>
80008ce2:	e0 8f 02 d2 	bral	80009286 <_vfprintf_r+0x1662>
80008ce6:	30 0a       	mov	r10,0
80008ce8:	0c 9c       	mov	r12,r6
80008cea:	50 2a       	stdsp	sp[0x8],r10
80008cec:	e0 a0 19 46 	rcall	8000bf78 <strlen>
80008cf0:	18 92       	mov	r2,r12
80008cf2:	e0 8f 02 d0 	bral	80009292 <_vfprintf_r+0x166e>
80008cf6:	50 a7       	stdsp	sp[0x28],r7
80008cf8:	50 80       	stdsp	sp[0x20],r0
80008cfa:	0c 97       	mov	r7,r6
80008cfc:	04 95       	mov	r5,r2
80008cfe:	08 96       	mov	r6,r4
80008d00:	02 92       	mov	r2,r1
80008d02:	40 94       	lddsp	r4,sp[0x24]
80008d04:	10 90       	mov	r0,r8
80008d06:	40 41       	lddsp	r1,sp[0x10]
80008d08:	a5 a3       	sbr	r3,0x4
80008d0a:	c0 a8       	rjmp	80008d1e <_vfprintf_r+0x10fa>
80008d0c:	50 a7       	stdsp	sp[0x28],r7
80008d0e:	50 80       	stdsp	sp[0x20],r0
80008d10:	0c 97       	mov	r7,r6
80008d12:	04 95       	mov	r5,r2
80008d14:	08 96       	mov	r6,r4
80008d16:	02 92       	mov	r2,r1
80008d18:	40 94       	lddsp	r4,sp[0x24]
80008d1a:	10 90       	mov	r0,r8
80008d1c:	40 41       	lddsp	r1,sp[0x10]
80008d1e:	ed b3 00 05 	bld	r3,0x5
80008d22:	c5 71       	brne	80008dd0 <_vfprintf_r+0x11ac>
80008d24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008d28:	40 39       	lddsp	r9,sp[0xc]
80008d2a:	58 09       	cp.w	r9,0
80008d2c:	c2 20       	breq	80008d70 <_vfprintf_r+0x114c>
80008d2e:	10 36       	cp.w	r6,r8
80008d30:	c0 84       	brge	80008d40 <_vfprintf_r+0x111c>
80008d32:	fa c8 f9 44 	sub	r8,sp,-1724
80008d36:	f0 06 00 36 	add	r6,r8,r6<<0x3
80008d3a:	c2 48       	rjmp	80008d82 <_vfprintf_r+0x115e>
80008d3c:	80 00       	ld.sh	r0,r0[0x0]
80008d3e:	de bc       	*unknown*
80008d40:	fa c8 f9 50 	sub	r8,sp,-1712
80008d44:	1a d8       	st.w	--sp,r8
80008d46:	fa c8 fa b8 	sub	r8,sp,-1352
80008d4a:	1a d8       	st.w	--sp,r8
80008d4c:	fa c8 fb b4 	sub	r8,sp,-1100
80008d50:	1a d8       	st.w	--sp,r8
80008d52:	fa c8 f9 40 	sub	r8,sp,-1728
80008d56:	fa c9 ff b4 	sub	r9,sp,-76
80008d5a:	04 9a       	mov	r10,r2
80008d5c:	0c 9b       	mov	r11,r6
80008d5e:	0a 9c       	mov	r12,r5
80008d60:	fe b0 f5 c8 	rcall	800078f0 <get_arg>
80008d64:	2f dd       	sub	sp,-12
80008d66:	f8 e8 00 00 	ld.d	r8,r12[0]
80008d6a:	fa e9 00 00 	st.d	sp[0],r8
80008d6e:	c2 e8       	rjmp	80008dca <_vfprintf_r+0x11a6>
80008d70:	ee ca ff ff 	sub	r10,r7,-1
80008d74:	10 37       	cp.w	r7,r8
80008d76:	c0 b4       	brge	80008d8c <_vfprintf_r+0x1168>
80008d78:	fa c8 f9 44 	sub	r8,sp,-1724
80008d7c:	14 97       	mov	r7,r10
80008d7e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80008d82:	ec ea fd 88 	ld.d	r10,r6[-632]
80008d86:	fa eb 00 00 	st.d	sp[0],r10
80008d8a:	c2 08       	rjmp	80008dca <_vfprintf_r+0x11a6>
80008d8c:	41 09       	lddsp	r9,sp[0x40]
80008d8e:	59 f8       	cp.w	r8,31
80008d90:	e0 89 00 16 	brgt	80008dbc <_vfprintf_r+0x1198>
80008d94:	f2 e6 00 00 	ld.d	r6,r9[0]
80008d98:	f2 cb ff f8 	sub	r11,r9,-8
80008d9c:	fa e7 00 00 	st.d	sp[0],r6
80008da0:	51 0b       	stdsp	sp[0x40],r11
80008da2:	fa c6 f9 44 	sub	r6,sp,-1724
80008da6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008daa:	fa e6 00 00 	ld.d	r6,sp[0]
80008dae:	f2 e7 fd 88 	st.d	r9[-632],r6
80008db2:	2f f8       	sub	r8,-1
80008db4:	14 97       	mov	r7,r10
80008db6:	fb 48 06 b4 	st.w	sp[1716],r8
80008dba:	c0 88       	rjmp	80008dca <_vfprintf_r+0x11a6>
80008dbc:	f2 e6 00 00 	ld.d	r6,r9[0]
80008dc0:	2f 89       	sub	r9,-8
80008dc2:	fa e7 00 00 	st.d	sp[0],r6
80008dc6:	51 09       	stdsp	sp[0x40],r9
80008dc8:	14 97       	mov	r7,r10
80008dca:	30 18       	mov	r8,1
80008dcc:	e0 8f 01 cd 	bral	80009166 <_vfprintf_r+0x1542>
80008dd0:	ed b3 00 04 	bld	r3,0x4
80008dd4:	c1 61       	brne	80008e00 <_vfprintf_r+0x11dc>
80008dd6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008dda:	40 3e       	lddsp	lr,sp[0xc]
80008ddc:	58 0e       	cp.w	lr,0
80008dde:	c0 80       	breq	80008dee <_vfprintf_r+0x11ca>
80008de0:	10 36       	cp.w	r6,r8
80008de2:	c6 74       	brge	80008eb0 <_vfprintf_r+0x128c>
80008de4:	fa cc f9 44 	sub	r12,sp,-1724
80008de8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008dec:	c8 08       	rjmp	80008eec <_vfprintf_r+0x12c8>
80008dee:	ee ca ff ff 	sub	r10,r7,-1
80008df2:	10 37       	cp.w	r7,r8
80008df4:	c7 f4       	brge	80008ef2 <_vfprintf_r+0x12ce>
80008df6:	fa cb f9 44 	sub	r11,sp,-1724
80008dfa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008dfe:	c7 68       	rjmp	80008eea <_vfprintf_r+0x12c6>
80008e00:	ed b3 00 06 	bld	r3,0x6
80008e04:	c4 a1       	brne	80008e98 <_vfprintf_r+0x1274>
80008e06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008e0a:	40 3c       	lddsp	r12,sp[0xc]
80008e0c:	58 0c       	cp.w	r12,0
80008e0e:	c1 d0       	breq	80008e48 <_vfprintf_r+0x1224>
80008e10:	10 36       	cp.w	r6,r8
80008e12:	c0 64       	brge	80008e1e <_vfprintf_r+0x11fa>
80008e14:	fa cb f9 44 	sub	r11,sp,-1724
80008e18:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008e1c:	c1 f8       	rjmp	80008e5a <_vfprintf_r+0x1236>
80008e1e:	fa c8 f9 50 	sub	r8,sp,-1712
80008e22:	1a d8       	st.w	--sp,r8
80008e24:	fa c8 fa b8 	sub	r8,sp,-1352
80008e28:	1a d8       	st.w	--sp,r8
80008e2a:	fa c8 fb b4 	sub	r8,sp,-1100
80008e2e:	1a d8       	st.w	--sp,r8
80008e30:	fa c8 f9 40 	sub	r8,sp,-1728
80008e34:	fa c9 ff b4 	sub	r9,sp,-76
80008e38:	04 9a       	mov	r10,r2
80008e3a:	0c 9b       	mov	r11,r6
80008e3c:	0a 9c       	mov	r12,r5
80008e3e:	fe b0 f5 59 	rcall	800078f0 <get_arg>
80008e42:	2f dd       	sub	sp,-12
80008e44:	98 18       	ld.sh	r8,r12[0x2]
80008e46:	c2 68       	rjmp	80008e92 <_vfprintf_r+0x126e>
80008e48:	ee ca ff ff 	sub	r10,r7,-1
80008e4c:	10 37       	cp.w	r7,r8
80008e4e:	c0 94       	brge	80008e60 <_vfprintf_r+0x123c>
80008e50:	fa c9 f9 44 	sub	r9,sp,-1724
80008e54:	14 97       	mov	r7,r10
80008e56:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008e5a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008e5e:	c1 a8       	rjmp	80008e92 <_vfprintf_r+0x126e>
80008e60:	41 09       	lddsp	r9,sp[0x40]
80008e62:	59 f8       	cp.w	r8,31
80008e64:	e0 89 00 13 	brgt	80008e8a <_vfprintf_r+0x1266>
80008e68:	f2 cb ff fc 	sub	r11,r9,-4
80008e6c:	51 0b       	stdsp	sp[0x40],r11
80008e6e:	72 09       	ld.w	r9,r9[0x0]
80008e70:	fa c6 f9 44 	sub	r6,sp,-1724
80008e74:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008e78:	2f f8       	sub	r8,-1
80008e7a:	f7 49 fd 88 	st.w	r11[-632],r9
80008e7e:	fb 48 06 b4 	st.w	sp[1716],r8
80008e82:	14 97       	mov	r7,r10
80008e84:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008e88:	c0 58       	rjmp	80008e92 <_vfprintf_r+0x126e>
80008e8a:	92 18       	ld.sh	r8,r9[0x2]
80008e8c:	14 97       	mov	r7,r10
80008e8e:	2f c9       	sub	r9,-4
80008e90:	51 09       	stdsp	sp[0x40],r9
80008e92:	5c 78       	castu.h	r8
80008e94:	50 18       	stdsp	sp[0x4],r8
80008e96:	c4 68       	rjmp	80008f22 <_vfprintf_r+0x12fe>
80008e98:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008e9c:	40 3c       	lddsp	r12,sp[0xc]
80008e9e:	58 0c       	cp.w	r12,0
80008ea0:	c1 d0       	breq	80008eda <_vfprintf_r+0x12b6>
80008ea2:	10 36       	cp.w	r6,r8
80008ea4:	c0 64       	brge	80008eb0 <_vfprintf_r+0x128c>
80008ea6:	fa cb f9 44 	sub	r11,sp,-1724
80008eaa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008eae:	c1 f8       	rjmp	80008eec <_vfprintf_r+0x12c8>
80008eb0:	fa c8 f9 50 	sub	r8,sp,-1712
80008eb4:	1a d8       	st.w	--sp,r8
80008eb6:	fa c8 fa b8 	sub	r8,sp,-1352
80008eba:	0c 9b       	mov	r11,r6
80008ebc:	1a d8       	st.w	--sp,r8
80008ebe:	fa c8 fb b4 	sub	r8,sp,-1100
80008ec2:	04 9a       	mov	r10,r2
80008ec4:	1a d8       	st.w	--sp,r8
80008ec6:	0a 9c       	mov	r12,r5
80008ec8:	fa c8 f9 40 	sub	r8,sp,-1728
80008ecc:	fa c9 ff b4 	sub	r9,sp,-76
80008ed0:	fe b0 f5 10 	rcall	800078f0 <get_arg>
80008ed4:	2f dd       	sub	sp,-12
80008ed6:	78 0b       	ld.w	r11,r12[0x0]
80008ed8:	c2 48       	rjmp	80008f20 <_vfprintf_r+0x12fc>
80008eda:	ee ca ff ff 	sub	r10,r7,-1
80008ede:	10 37       	cp.w	r7,r8
80008ee0:	c0 94       	brge	80008ef2 <_vfprintf_r+0x12ce>
80008ee2:	fa c9 f9 44 	sub	r9,sp,-1724
80008ee6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008eea:	14 97       	mov	r7,r10
80008eec:	ec fb fd 88 	ld.w	r11,r6[-632]
80008ef0:	c1 88       	rjmp	80008f20 <_vfprintf_r+0x12fc>
80008ef2:	41 09       	lddsp	r9,sp[0x40]
80008ef4:	59 f8       	cp.w	r8,31
80008ef6:	e0 89 00 11 	brgt	80008f18 <_vfprintf_r+0x12f4>
80008efa:	f2 cb ff fc 	sub	r11,r9,-4
80008efe:	51 0b       	stdsp	sp[0x40],r11
80008f00:	fa c6 f9 44 	sub	r6,sp,-1724
80008f04:	72 0b       	ld.w	r11,r9[0x0]
80008f06:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008f0a:	f3 4b fd 88 	st.w	r9[-632],r11
80008f0e:	2f f8       	sub	r8,-1
80008f10:	14 97       	mov	r7,r10
80008f12:	fb 48 06 b4 	st.w	sp[1716],r8
80008f16:	c0 58       	rjmp	80008f20 <_vfprintf_r+0x12fc>
80008f18:	72 0b       	ld.w	r11,r9[0x0]
80008f1a:	14 97       	mov	r7,r10
80008f1c:	2f c9       	sub	r9,-4
80008f1e:	51 09       	stdsp	sp[0x40],r9
80008f20:	50 1b       	stdsp	sp[0x4],r11
80008f22:	30 0e       	mov	lr,0
80008f24:	30 18       	mov	r8,1
80008f26:	50 0e       	stdsp	sp[0x0],lr
80008f28:	c1 f9       	rjmp	80009166 <_vfprintf_r+0x1542>
80008f2a:	50 a7       	stdsp	sp[0x28],r7
80008f2c:	50 80       	stdsp	sp[0x20],r0
80008f2e:	0c 97       	mov	r7,r6
80008f30:	04 95       	mov	r5,r2
80008f32:	08 96       	mov	r6,r4
80008f34:	02 92       	mov	r2,r1
80008f36:	4d 3c       	lddpc	r12,80009080 <_vfprintf_r+0x145c>
80008f38:	40 94       	lddsp	r4,sp[0x24]
80008f3a:	10 90       	mov	r0,r8
80008f3c:	40 41       	lddsp	r1,sp[0x10]
80008f3e:	50 dc       	stdsp	sp[0x34],r12
80008f40:	ed b3 00 05 	bld	r3,0x5
80008f44:	c5 51       	brne	80008fee <_vfprintf_r+0x13ca>
80008f46:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008f4a:	40 3b       	lddsp	r11,sp[0xc]
80008f4c:	58 0b       	cp.w	r11,0
80008f4e:	c2 20       	breq	80008f92 <_vfprintf_r+0x136e>
80008f50:	10 36       	cp.w	r6,r8
80008f52:	c0 a4       	brge	80008f66 <_vfprintf_r+0x1342>
80008f54:	fa ca f9 44 	sub	r10,sp,-1724
80008f58:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008f5c:	ec e8 fd 88 	ld.d	r8,r6[-632]
80008f60:	fa e9 00 00 	st.d	sp[0],r8
80008f64:	cf 38       	rjmp	8000914a <_vfprintf_r+0x1526>
80008f66:	fa c8 f9 50 	sub	r8,sp,-1712
80008f6a:	1a d8       	st.w	--sp,r8
80008f6c:	fa c8 fa b8 	sub	r8,sp,-1352
80008f70:	04 9a       	mov	r10,r2
80008f72:	1a d8       	st.w	--sp,r8
80008f74:	0c 9b       	mov	r11,r6
80008f76:	fa c8 fb b4 	sub	r8,sp,-1100
80008f7a:	0a 9c       	mov	r12,r5
80008f7c:	1a d8       	st.w	--sp,r8
80008f7e:	fa c8 f9 40 	sub	r8,sp,-1728
80008f82:	fa c9 ff b4 	sub	r9,sp,-76
80008f86:	fe b0 f4 b5 	rcall	800078f0 <get_arg>
80008f8a:	2f dd       	sub	sp,-12
80008f8c:	f8 ea 00 00 	ld.d	r10,r12[0]
80008f90:	c0 c8       	rjmp	80008fa8 <_vfprintf_r+0x1384>
80008f92:	ee ca ff ff 	sub	r10,r7,-1
80008f96:	10 37       	cp.w	r7,r8
80008f98:	c0 b4       	brge	80008fae <_vfprintf_r+0x138a>
80008f9a:	fa c9 f9 44 	sub	r9,sp,-1724
80008f9e:	14 97       	mov	r7,r10
80008fa0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008fa4:	ec ea fd 88 	ld.d	r10,r6[-632]
80008fa8:	fa eb 00 00 	st.d	sp[0],r10
80008fac:	cc f8       	rjmp	8000914a <_vfprintf_r+0x1526>
80008fae:	41 09       	lddsp	r9,sp[0x40]
80008fb0:	59 f8       	cp.w	r8,31
80008fb2:	e0 89 00 16 	brgt	80008fde <_vfprintf_r+0x13ba>
80008fb6:	f2 e6 00 00 	ld.d	r6,r9[0]
80008fba:	f2 cb ff f8 	sub	r11,r9,-8
80008fbe:	fa e7 00 00 	st.d	sp[0],r6
80008fc2:	51 0b       	stdsp	sp[0x40],r11
80008fc4:	fa c6 f9 44 	sub	r6,sp,-1724
80008fc8:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008fcc:	fa e6 00 00 	ld.d	r6,sp[0]
80008fd0:	f2 e7 fd 88 	st.d	r9[-632],r6
80008fd4:	2f f8       	sub	r8,-1
80008fd6:	14 97       	mov	r7,r10
80008fd8:	fb 48 06 b4 	st.w	sp[1716],r8
80008fdc:	cb 78       	rjmp	8000914a <_vfprintf_r+0x1526>
80008fde:	f2 e6 00 00 	ld.d	r6,r9[0]
80008fe2:	2f 89       	sub	r9,-8
80008fe4:	fa e7 00 00 	st.d	sp[0],r6
80008fe8:	51 09       	stdsp	sp[0x40],r9
80008fea:	14 97       	mov	r7,r10
80008fec:	ca f8       	rjmp	8000914a <_vfprintf_r+0x1526>
80008fee:	ed b3 00 04 	bld	r3,0x4
80008ff2:	c1 71       	brne	80009020 <_vfprintf_r+0x13fc>
80008ff4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008ff8:	40 3e       	lddsp	lr,sp[0xc]
80008ffa:	58 0e       	cp.w	lr,0
80008ffc:	c0 80       	breq	8000900c <_vfprintf_r+0x13e8>
80008ffe:	10 36       	cp.w	r6,r8
80009000:	c6 a4       	brge	800090d4 <_vfprintf_r+0x14b0>
80009002:	fa cc f9 44 	sub	r12,sp,-1724
80009006:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000900a:	c8 38       	rjmp	80009110 <_vfprintf_r+0x14ec>
8000900c:	ee ca ff ff 	sub	r10,r7,-1
80009010:	10 37       	cp.w	r7,r8
80009012:	e0 84 00 82 	brge	80009116 <_vfprintf_r+0x14f2>
80009016:	fa cb f9 44 	sub	r11,sp,-1724
8000901a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000901e:	c7 88       	rjmp	8000910e <_vfprintf_r+0x14ea>
80009020:	ed b3 00 06 	bld	r3,0x6
80009024:	c4 c1       	brne	800090bc <_vfprintf_r+0x1498>
80009026:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000902a:	40 3c       	lddsp	r12,sp[0xc]
8000902c:	58 0c       	cp.w	r12,0
8000902e:	c1 d0       	breq	80009068 <_vfprintf_r+0x1444>
80009030:	10 36       	cp.w	r6,r8
80009032:	c0 64       	brge	8000903e <_vfprintf_r+0x141a>
80009034:	fa cb f9 44 	sub	r11,sp,-1724
80009038:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000903c:	c1 f8       	rjmp	8000907a <_vfprintf_r+0x1456>
8000903e:	fa c8 f9 50 	sub	r8,sp,-1712
80009042:	1a d8       	st.w	--sp,r8
80009044:	fa c8 fa b8 	sub	r8,sp,-1352
80009048:	1a d8       	st.w	--sp,r8
8000904a:	fa c8 fb b4 	sub	r8,sp,-1100
8000904e:	1a d8       	st.w	--sp,r8
80009050:	fa c8 f9 40 	sub	r8,sp,-1728
80009054:	fa c9 ff b4 	sub	r9,sp,-76
80009058:	04 9a       	mov	r10,r2
8000905a:	0c 9b       	mov	r11,r6
8000905c:	0a 9c       	mov	r12,r5
8000905e:	fe b0 f4 49 	rcall	800078f0 <get_arg>
80009062:	2f dd       	sub	sp,-12
80009064:	98 18       	ld.sh	r8,r12[0x2]
80009066:	c2 88       	rjmp	800090b6 <_vfprintf_r+0x1492>
80009068:	ee ca ff ff 	sub	r10,r7,-1
8000906c:	10 37       	cp.w	r7,r8
8000906e:	c0 b4       	brge	80009084 <_vfprintf_r+0x1460>
80009070:	fa c9 f9 44 	sub	r9,sp,-1724
80009074:	14 97       	mov	r7,r10
80009076:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000907a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000907e:	c1 c8       	rjmp	800090b6 <_vfprintf_r+0x1492>
80009080:	80 00       	ld.sh	r0,r0[0x0]
80009082:	de bc       	*unknown*
80009084:	41 09       	lddsp	r9,sp[0x40]
80009086:	59 f8       	cp.w	r8,31
80009088:	e0 89 00 13 	brgt	800090ae <_vfprintf_r+0x148a>
8000908c:	f2 cb ff fc 	sub	r11,r9,-4
80009090:	51 0b       	stdsp	sp[0x40],r11
80009092:	72 09       	ld.w	r9,r9[0x0]
80009094:	fa c6 f9 44 	sub	r6,sp,-1724
80009098:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000909c:	2f f8       	sub	r8,-1
8000909e:	f7 49 fd 88 	st.w	r11[-632],r9
800090a2:	fb 48 06 b4 	st.w	sp[1716],r8
800090a6:	14 97       	mov	r7,r10
800090a8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800090ac:	c0 58       	rjmp	800090b6 <_vfprintf_r+0x1492>
800090ae:	92 18       	ld.sh	r8,r9[0x2]
800090b0:	14 97       	mov	r7,r10
800090b2:	2f c9       	sub	r9,-4
800090b4:	51 09       	stdsp	sp[0x40],r9
800090b6:	5c 78       	castu.h	r8
800090b8:	50 18       	stdsp	sp[0x4],r8
800090ba:	c4 68       	rjmp	80009146 <_vfprintf_r+0x1522>
800090bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800090c0:	40 3c       	lddsp	r12,sp[0xc]
800090c2:	58 0c       	cp.w	r12,0
800090c4:	c1 d0       	breq	800090fe <_vfprintf_r+0x14da>
800090c6:	10 36       	cp.w	r6,r8
800090c8:	c0 64       	brge	800090d4 <_vfprintf_r+0x14b0>
800090ca:	fa cb f9 44 	sub	r11,sp,-1724
800090ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800090d2:	c1 f8       	rjmp	80009110 <_vfprintf_r+0x14ec>
800090d4:	fa c8 f9 50 	sub	r8,sp,-1712
800090d8:	1a d8       	st.w	--sp,r8
800090da:	fa c8 fa b8 	sub	r8,sp,-1352
800090de:	0c 9b       	mov	r11,r6
800090e0:	1a d8       	st.w	--sp,r8
800090e2:	fa c8 fb b4 	sub	r8,sp,-1100
800090e6:	04 9a       	mov	r10,r2
800090e8:	1a d8       	st.w	--sp,r8
800090ea:	0a 9c       	mov	r12,r5
800090ec:	fa c8 f9 40 	sub	r8,sp,-1728
800090f0:	fa c9 ff b4 	sub	r9,sp,-76
800090f4:	fe b0 f3 fe 	rcall	800078f0 <get_arg>
800090f8:	2f dd       	sub	sp,-12
800090fa:	78 0b       	ld.w	r11,r12[0x0]
800090fc:	c2 48       	rjmp	80009144 <_vfprintf_r+0x1520>
800090fe:	ee ca ff ff 	sub	r10,r7,-1
80009102:	10 37       	cp.w	r7,r8
80009104:	c0 94       	brge	80009116 <_vfprintf_r+0x14f2>
80009106:	fa c9 f9 44 	sub	r9,sp,-1724
8000910a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000910e:	14 97       	mov	r7,r10
80009110:	ec fb fd 88 	ld.w	r11,r6[-632]
80009114:	c1 88       	rjmp	80009144 <_vfprintf_r+0x1520>
80009116:	41 09       	lddsp	r9,sp[0x40]
80009118:	59 f8       	cp.w	r8,31
8000911a:	e0 89 00 11 	brgt	8000913c <_vfprintf_r+0x1518>
8000911e:	f2 cb ff fc 	sub	r11,r9,-4
80009122:	51 0b       	stdsp	sp[0x40],r11
80009124:	fa c6 f9 44 	sub	r6,sp,-1724
80009128:	72 0b       	ld.w	r11,r9[0x0]
8000912a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000912e:	f3 4b fd 88 	st.w	r9[-632],r11
80009132:	2f f8       	sub	r8,-1
80009134:	14 97       	mov	r7,r10
80009136:	fb 48 06 b4 	st.w	sp[1716],r8
8000913a:	c0 58       	rjmp	80009144 <_vfprintf_r+0x1520>
8000913c:	72 0b       	ld.w	r11,r9[0x0]
8000913e:	14 97       	mov	r7,r10
80009140:	2f c9       	sub	r9,-4
80009142:	51 09       	stdsp	sp[0x40],r9
80009144:	50 1b       	stdsp	sp[0x4],r11
80009146:	30 0e       	mov	lr,0
80009148:	50 0e       	stdsp	sp[0x0],lr
8000914a:	40 08       	lddsp	r8,sp[0x0]
8000914c:	40 1c       	lddsp	r12,sp[0x4]
8000914e:	18 48       	or	r8,r12
80009150:	5f 18       	srne	r8
80009152:	e7 e8 00 08 	and	r8,r3,r8
80009156:	c0 70       	breq	80009164 <_vfprintf_r+0x1540>
80009158:	33 08       	mov	r8,48
8000915a:	fb 60 06 b9 	st.b	sp[1721],r0
8000915e:	a1 b3       	sbr	r3,0x1
80009160:	fb 68 06 b8 	st.b	sp[1720],r8
80009164:	30 28       	mov	r8,2
80009166:	30 09       	mov	r9,0
80009168:	fb 69 06 bb 	st.b	sp[1723],r9
8000916c:	40 2b       	lddsp	r11,sp[0x8]
8000916e:	58 0b       	cp.w	r11,0
80009170:	c0 25       	brlt	80009174 <_vfprintf_r+0x1550>
80009172:	a7 d3       	cbr	r3,0x7
80009174:	40 2a       	lddsp	r10,sp[0x8]
80009176:	40 09       	lddsp	r9,sp[0x0]
80009178:	58 0a       	cp.w	r10,0
8000917a:	5f 1a       	srne	r10
8000917c:	40 16       	lddsp	r6,sp[0x4]
8000917e:	fa c2 f9 78 	sub	r2,sp,-1672
80009182:	0c 49       	or	r9,r6
80009184:	5f 19       	srne	r9
80009186:	f5 e9 10 09 	or	r9,r10,r9
8000918a:	c5 c0       	breq	80009242 <_vfprintf_r+0x161e>
8000918c:	30 19       	mov	r9,1
8000918e:	f2 08 18 00 	cp.b	r8,r9
80009192:	c0 60       	breq	8000919e <_vfprintf_r+0x157a>
80009194:	30 29       	mov	r9,2
80009196:	f2 08 18 00 	cp.b	r8,r9
8000919a:	c0 41       	brne	800091a2 <_vfprintf_r+0x157e>
8000919c:	c3 c8       	rjmp	80009214 <_vfprintf_r+0x15f0>
8000919e:	04 96       	mov	r6,r2
800091a0:	c3 08       	rjmp	80009200 <_vfprintf_r+0x15dc>
800091a2:	04 96       	mov	r6,r2
800091a4:	fa e8 00 00 	ld.d	r8,sp[0]
800091a8:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800091ac:	2d 0a       	sub	r10,-48
800091ae:	0c fa       	st.b	--r6,r10
800091b0:	f0 0b 16 03 	lsr	r11,r8,0x3
800091b4:	f2 0c 16 03 	lsr	r12,r9,0x3
800091b8:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800091bc:	18 99       	mov	r9,r12
800091be:	16 98       	mov	r8,r11
800091c0:	58 08       	cp.w	r8,0
800091c2:	5c 29       	cpc	r9
800091c4:	cf 21       	brne	800091a8 <_vfprintf_r+0x1584>
800091c6:	fa e9 00 00 	st.d	sp[0],r8
800091ca:	ed b3 00 00 	bld	r3,0x0
800091ce:	c4 51       	brne	80009258 <_vfprintf_r+0x1634>
800091d0:	33 09       	mov	r9,48
800091d2:	f2 0a 18 00 	cp.b	r10,r9
800091d6:	c4 10       	breq	80009258 <_vfprintf_r+0x1634>
800091d8:	0c f9       	st.b	--r6,r9
800091da:	c3 f8       	rjmp	80009258 <_vfprintf_r+0x1634>
800091dc:	fa ea 00 00 	ld.d	r10,sp[0]
800091e0:	30 a8       	mov	r8,10
800091e2:	30 09       	mov	r9,0
800091e4:	e0 a0 1e 6f 	rcall	8000cec2 <__avr32_umod64>
800091e8:	30 a8       	mov	r8,10
800091ea:	2d 0a       	sub	r10,-48
800091ec:	30 09       	mov	r9,0
800091ee:	ac 8a       	st.b	r6[0x0],r10
800091f0:	fa ea 00 00 	ld.d	r10,sp[0]
800091f4:	e0 a0 1d 1e 	rcall	8000cc30 <__avr32_udiv64>
800091f8:	16 99       	mov	r9,r11
800091fa:	14 98       	mov	r8,r10
800091fc:	fa e9 00 00 	st.d	sp[0],r8
80009200:	20 16       	sub	r6,1
80009202:	fa ea 00 00 	ld.d	r10,sp[0]
80009206:	58 9a       	cp.w	r10,9
80009208:	5c 2b       	cpc	r11
8000920a:	fe 9b ff e9 	brhi	800091dc <_vfprintf_r+0x15b8>
8000920e:	1b f8       	ld.ub	r8,sp[0x7]
80009210:	2d 08       	sub	r8,-48
80009212:	c2 08       	rjmp	80009252 <_vfprintf_r+0x162e>
80009214:	04 96       	mov	r6,r2
80009216:	fa e8 00 00 	ld.d	r8,sp[0]
8000921a:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000921e:	40 de       	lddsp	lr,sp[0x34]
80009220:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80009224:	0c fa       	st.b	--r6,r10
80009226:	f2 0b 16 04 	lsr	r11,r9,0x4
8000922a:	f0 0a 16 04 	lsr	r10,r8,0x4
8000922e:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80009232:	16 99       	mov	r9,r11
80009234:	14 98       	mov	r8,r10
80009236:	58 08       	cp.w	r8,0
80009238:	5c 29       	cpc	r9
8000923a:	cf 01       	brne	8000921a <_vfprintf_r+0x15f6>
8000923c:	fa e9 00 00 	st.d	sp[0],r8
80009240:	c0 c8       	rjmp	80009258 <_vfprintf_r+0x1634>
80009242:	58 08       	cp.w	r8,0
80009244:	c0 91       	brne	80009256 <_vfprintf_r+0x1632>
80009246:	ed b3 00 00 	bld	r3,0x0
8000924a:	c0 61       	brne	80009256 <_vfprintf_r+0x1632>
8000924c:	fa c6 f9 79 	sub	r6,sp,-1671
80009250:	33 08       	mov	r8,48
80009252:	ac 88       	st.b	r6[0x0],r8
80009254:	c0 28       	rjmp	80009258 <_vfprintf_r+0x1634>
80009256:	04 96       	mov	r6,r2
80009258:	0c 12       	sub	r2,r6
8000925a:	c1 c8       	rjmp	80009292 <_vfprintf_r+0x166e>
8000925c:	50 a7       	stdsp	sp[0x28],r7
8000925e:	50 80       	stdsp	sp[0x20],r0
80009260:	40 94       	lddsp	r4,sp[0x24]
80009262:	0c 97       	mov	r7,r6
80009264:	10 90       	mov	r0,r8
80009266:	04 95       	mov	r5,r2
80009268:	40 41       	lddsp	r1,sp[0x10]
8000926a:	58 08       	cp.w	r8,0
8000926c:	e0 80 04 50 	breq	80009b0c <_vfprintf_r+0x1ee8>
80009270:	fb 68 06 60 	st.b	sp[1632],r8
80009274:	30 0c       	mov	r12,0
80009276:	30 08       	mov	r8,0
80009278:	30 12       	mov	r2,1
8000927a:	fb 68 06 bb 	st.b	sp[1723],r8
8000927e:	50 2c       	stdsp	sp[0x8],r12
80009280:	fa c6 f9 a0 	sub	r6,sp,-1632
80009284:	c0 78       	rjmp	80009292 <_vfprintf_r+0x166e>
80009286:	30 0b       	mov	r11,0
80009288:	50 2b       	stdsp	sp[0x8],r11
8000928a:	c0 48       	rjmp	80009292 <_vfprintf_r+0x166e>
8000928c:	40 22       	lddsp	r2,sp[0x8]
8000928e:	30 0a       	mov	r10,0
80009290:	50 2a       	stdsp	sp[0x8],r10
80009292:	40 29       	lddsp	r9,sp[0x8]
80009294:	e4 09 0c 49 	max	r9,r2,r9
80009298:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000929c:	50 39       	stdsp	sp[0xc],r9
8000929e:	06 9e       	mov	lr,r3
800092a0:	30 09       	mov	r9,0
800092a2:	e2 1e 00 02 	andl	lr,0x2,COH
800092a6:	f2 08 18 00 	cp.b	r8,r9
800092aa:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800092ae:	f7 b8 01 ff 	subne	r8,-1
800092b2:	fb f8 1a 03 	st.wne	sp[0xc],r8
800092b6:	06 9b       	mov	r11,r3
800092b8:	58 0e       	cp.w	lr,0
800092ba:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800092be:	f7 bc 01 fe 	subne	r12,-2
800092c2:	fb fc 1a 03 	st.wne	sp[0xc],r12
800092c6:	e2 1b 00 84 	andl	r11,0x84,COH
800092ca:	50 fe       	stdsp	sp[0x3c],lr
800092cc:	50 9b       	stdsp	sp[0x24],r11
800092ce:	c4 51       	brne	80009358 <_vfprintf_r+0x1734>
800092d0:	40 8a       	lddsp	r10,sp[0x20]
800092d2:	40 39       	lddsp	r9,sp[0xc]
800092d4:	12 1a       	sub	r10,r9
800092d6:	50 4a       	stdsp	sp[0x10],r10
800092d8:	58 0a       	cp.w	r10,0
800092da:	e0 89 00 1f 	brgt	80009318 <_vfprintf_r+0x16f4>
800092de:	c3 d8       	rjmp	80009358 <_vfprintf_r+0x1734>
800092e0:	2f 09       	sub	r9,-16
800092e2:	2f f8       	sub	r8,-1
800092e4:	4c de       	lddpc	lr,80009418 <_vfprintf_r+0x17f4>
800092e6:	31 0c       	mov	r12,16
800092e8:	fb 49 06 90 	st.w	sp[1680],r9
800092ec:	89 0e       	st.w	r4[0x0],lr
800092ee:	89 1c       	st.w	r4[0x4],r12
800092f0:	fb 48 06 8c 	st.w	sp[1676],r8
800092f4:	58 78       	cp.w	r8,7
800092f6:	e0 89 00 04 	brgt	800092fe <_vfprintf_r+0x16da>
800092fa:	2f 84       	sub	r4,-8
800092fc:	c0 b8       	rjmp	80009312 <_vfprintf_r+0x16ee>
800092fe:	fa ca f9 78 	sub	r10,sp,-1672
80009302:	02 9b       	mov	r11,r1
80009304:	0a 9c       	mov	r12,r5
80009306:	fe b0 f4 81 	rcall	80007c08 <__sprint_r>
8000930a:	e0 81 04 11 	brne	80009b2c <_vfprintf_r+0x1f08>
8000930e:	fa c4 f9 e0 	sub	r4,sp,-1568
80009312:	40 4b       	lddsp	r11,sp[0x10]
80009314:	21 0b       	sub	r11,16
80009316:	50 4b       	stdsp	sp[0x10],r11
80009318:	fa f9 06 90 	ld.w	r9,sp[1680]
8000931c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009320:	4b ea       	lddpc	r10,80009418 <_vfprintf_r+0x17f4>
80009322:	40 4e       	lddsp	lr,sp[0x10]
80009324:	59 0e       	cp.w	lr,16
80009326:	fe 99 ff dd 	brgt	800092e0 <_vfprintf_r+0x16bc>
8000932a:	1c 09       	add	r9,lr
8000932c:	2f f8       	sub	r8,-1
8000932e:	89 0a       	st.w	r4[0x0],r10
80009330:	fb 49 06 90 	st.w	sp[1680],r9
80009334:	89 1e       	st.w	r4[0x4],lr
80009336:	fb 48 06 8c 	st.w	sp[1676],r8
8000933a:	58 78       	cp.w	r8,7
8000933c:	e0 89 00 04 	brgt	80009344 <_vfprintf_r+0x1720>
80009340:	2f 84       	sub	r4,-8
80009342:	c0 b8       	rjmp	80009358 <_vfprintf_r+0x1734>
80009344:	fa ca f9 78 	sub	r10,sp,-1672
80009348:	02 9b       	mov	r11,r1
8000934a:	0a 9c       	mov	r12,r5
8000934c:	fe b0 f4 5e 	rcall	80007c08 <__sprint_r>
80009350:	e0 81 03 ee 	brne	80009b2c <_vfprintf_r+0x1f08>
80009354:	fa c4 f9 e0 	sub	r4,sp,-1568
80009358:	30 09       	mov	r9,0
8000935a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000935e:	f2 08 18 00 	cp.b	r8,r9
80009362:	c1 f0       	breq	800093a0 <_vfprintf_r+0x177c>
80009364:	fa f8 06 90 	ld.w	r8,sp[1680]
80009368:	fa c9 f9 45 	sub	r9,sp,-1723
8000936c:	2f f8       	sub	r8,-1
8000936e:	89 09       	st.w	r4[0x0],r9
80009370:	fb 48 06 90 	st.w	sp[1680],r8
80009374:	30 19       	mov	r9,1
80009376:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000937a:	89 19       	st.w	r4[0x4],r9
8000937c:	2f f8       	sub	r8,-1
8000937e:	fb 48 06 8c 	st.w	sp[1676],r8
80009382:	58 78       	cp.w	r8,7
80009384:	e0 89 00 04 	brgt	8000938c <_vfprintf_r+0x1768>
80009388:	2f 84       	sub	r4,-8
8000938a:	c0 b8       	rjmp	800093a0 <_vfprintf_r+0x177c>
8000938c:	fa ca f9 78 	sub	r10,sp,-1672
80009390:	02 9b       	mov	r11,r1
80009392:	0a 9c       	mov	r12,r5
80009394:	fe b0 f4 3a 	rcall	80007c08 <__sprint_r>
80009398:	e0 81 03 ca 	brne	80009b2c <_vfprintf_r+0x1f08>
8000939c:	fa c4 f9 e0 	sub	r4,sp,-1568
800093a0:	40 fc       	lddsp	r12,sp[0x3c]
800093a2:	58 0c       	cp.w	r12,0
800093a4:	c1 f0       	breq	800093e2 <_vfprintf_r+0x17be>
800093a6:	fa f8 06 90 	ld.w	r8,sp[1680]
800093aa:	fa c9 f9 48 	sub	r9,sp,-1720
800093ae:	2f e8       	sub	r8,-2
800093b0:	89 09       	st.w	r4[0x0],r9
800093b2:	fb 48 06 90 	st.w	sp[1680],r8
800093b6:	30 29       	mov	r9,2
800093b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800093bc:	89 19       	st.w	r4[0x4],r9
800093be:	2f f8       	sub	r8,-1
800093c0:	fb 48 06 8c 	st.w	sp[1676],r8
800093c4:	58 78       	cp.w	r8,7
800093c6:	e0 89 00 04 	brgt	800093ce <_vfprintf_r+0x17aa>
800093ca:	2f 84       	sub	r4,-8
800093cc:	c0 b8       	rjmp	800093e2 <_vfprintf_r+0x17be>
800093ce:	fa ca f9 78 	sub	r10,sp,-1672
800093d2:	02 9b       	mov	r11,r1
800093d4:	0a 9c       	mov	r12,r5
800093d6:	fe b0 f4 19 	rcall	80007c08 <__sprint_r>
800093da:	e0 81 03 a9 	brne	80009b2c <_vfprintf_r+0x1f08>
800093de:	fa c4 f9 e0 	sub	r4,sp,-1568
800093e2:	40 9b       	lddsp	r11,sp[0x24]
800093e4:	e0 4b 00 80 	cp.w	r11,128
800093e8:	c4 91       	brne	8000947a <_vfprintf_r+0x1856>
800093ea:	40 8a       	lddsp	r10,sp[0x20]
800093ec:	40 39       	lddsp	r9,sp[0xc]
800093ee:	12 1a       	sub	r10,r9
800093f0:	50 4a       	stdsp	sp[0x10],r10
800093f2:	58 0a       	cp.w	r10,0
800093f4:	e0 89 00 23 	brgt	8000943a <_vfprintf_r+0x1816>
800093f8:	c4 18       	rjmp	8000947a <_vfprintf_r+0x1856>
800093fa:	2f 09       	sub	r9,-16
800093fc:	2f f8       	sub	r8,-1
800093fe:	48 8e       	lddpc	lr,8000941c <_vfprintf_r+0x17f8>
80009400:	31 0c       	mov	r12,16
80009402:	fb 49 06 90 	st.w	sp[1680],r9
80009406:	89 0e       	st.w	r4[0x0],lr
80009408:	89 1c       	st.w	r4[0x4],r12
8000940a:	fb 48 06 8c 	st.w	sp[1676],r8
8000940e:	58 78       	cp.w	r8,7
80009410:	e0 89 00 08 	brgt	80009420 <_vfprintf_r+0x17fc>
80009414:	2f 84       	sub	r4,-8
80009416:	c0 f8       	rjmp	80009434 <_vfprintf_r+0x1810>
80009418:	80 00       	ld.sh	r0,r0[0x0]
8000941a:	de d4       	*unknown*
8000941c:	80 00       	ld.sh	r0,r0[0x0]
8000941e:	de e4       	*unknown*
80009420:	fa ca f9 78 	sub	r10,sp,-1672
80009424:	02 9b       	mov	r11,r1
80009426:	0a 9c       	mov	r12,r5
80009428:	fe b0 f3 f0 	rcall	80007c08 <__sprint_r>
8000942c:	e0 81 03 80 	brne	80009b2c <_vfprintf_r+0x1f08>
80009430:	fa c4 f9 e0 	sub	r4,sp,-1568
80009434:	40 4b       	lddsp	r11,sp[0x10]
80009436:	21 0b       	sub	r11,16
80009438:	50 4b       	stdsp	sp[0x10],r11
8000943a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000943e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009442:	4c 6a       	lddpc	r10,80009558 <_vfprintf_r+0x1934>
80009444:	40 4e       	lddsp	lr,sp[0x10]
80009446:	59 0e       	cp.w	lr,16
80009448:	fe 99 ff d9 	brgt	800093fa <_vfprintf_r+0x17d6>
8000944c:	1c 09       	add	r9,lr
8000944e:	2f f8       	sub	r8,-1
80009450:	89 0a       	st.w	r4[0x0],r10
80009452:	fb 49 06 90 	st.w	sp[1680],r9
80009456:	89 1e       	st.w	r4[0x4],lr
80009458:	fb 48 06 8c 	st.w	sp[1676],r8
8000945c:	58 78       	cp.w	r8,7
8000945e:	e0 89 00 04 	brgt	80009466 <_vfprintf_r+0x1842>
80009462:	2f 84       	sub	r4,-8
80009464:	c0 b8       	rjmp	8000947a <_vfprintf_r+0x1856>
80009466:	fa ca f9 78 	sub	r10,sp,-1672
8000946a:	02 9b       	mov	r11,r1
8000946c:	0a 9c       	mov	r12,r5
8000946e:	fe b0 f3 cd 	rcall	80007c08 <__sprint_r>
80009472:	e0 81 03 5d 	brne	80009b2c <_vfprintf_r+0x1f08>
80009476:	fa c4 f9 e0 	sub	r4,sp,-1568
8000947a:	40 2c       	lddsp	r12,sp[0x8]
8000947c:	04 1c       	sub	r12,r2
8000947e:	50 2c       	stdsp	sp[0x8],r12
80009480:	58 0c       	cp.w	r12,0
80009482:	e0 89 00 1f 	brgt	800094c0 <_vfprintf_r+0x189c>
80009486:	c3 d8       	rjmp	80009500 <_vfprintf_r+0x18dc>
80009488:	2f 09       	sub	r9,-16
8000948a:	2f f8       	sub	r8,-1
8000948c:	4b 3b       	lddpc	r11,80009558 <_vfprintf_r+0x1934>
8000948e:	31 0a       	mov	r10,16
80009490:	fb 49 06 90 	st.w	sp[1680],r9
80009494:	89 0b       	st.w	r4[0x0],r11
80009496:	89 1a       	st.w	r4[0x4],r10
80009498:	fb 48 06 8c 	st.w	sp[1676],r8
8000949c:	58 78       	cp.w	r8,7
8000949e:	e0 89 00 04 	brgt	800094a6 <_vfprintf_r+0x1882>
800094a2:	2f 84       	sub	r4,-8
800094a4:	c0 b8       	rjmp	800094ba <_vfprintf_r+0x1896>
800094a6:	fa ca f9 78 	sub	r10,sp,-1672
800094aa:	02 9b       	mov	r11,r1
800094ac:	0a 9c       	mov	r12,r5
800094ae:	fe b0 f3 ad 	rcall	80007c08 <__sprint_r>
800094b2:	e0 81 03 3d 	brne	80009b2c <_vfprintf_r+0x1f08>
800094b6:	fa c4 f9 e0 	sub	r4,sp,-1568
800094ba:	40 29       	lddsp	r9,sp[0x8]
800094bc:	21 09       	sub	r9,16
800094be:	50 29       	stdsp	sp[0x8],r9
800094c0:	fa f9 06 90 	ld.w	r9,sp[1680]
800094c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800094c8:	4a 4a       	lddpc	r10,80009558 <_vfprintf_r+0x1934>
800094ca:	40 2e       	lddsp	lr,sp[0x8]
800094cc:	59 0e       	cp.w	lr,16
800094ce:	fe 99 ff dd 	brgt	80009488 <_vfprintf_r+0x1864>
800094d2:	1c 09       	add	r9,lr
800094d4:	2f f8       	sub	r8,-1
800094d6:	89 0a       	st.w	r4[0x0],r10
800094d8:	fb 49 06 90 	st.w	sp[1680],r9
800094dc:	89 1e       	st.w	r4[0x4],lr
800094de:	fb 48 06 8c 	st.w	sp[1676],r8
800094e2:	58 78       	cp.w	r8,7
800094e4:	e0 89 00 04 	brgt	800094ec <_vfprintf_r+0x18c8>
800094e8:	2f 84       	sub	r4,-8
800094ea:	c0 b8       	rjmp	80009500 <_vfprintf_r+0x18dc>
800094ec:	fa ca f9 78 	sub	r10,sp,-1672
800094f0:	02 9b       	mov	r11,r1
800094f2:	0a 9c       	mov	r12,r5
800094f4:	fe b0 f3 8a 	rcall	80007c08 <__sprint_r>
800094f8:	e0 81 03 1a 	brne	80009b2c <_vfprintf_r+0x1f08>
800094fc:	fa c4 f9 e0 	sub	r4,sp,-1568
80009500:	ed b3 00 08 	bld	r3,0x8
80009504:	c0 b0       	breq	8000951a <_vfprintf_r+0x18f6>
80009506:	fa f8 06 90 	ld.w	r8,sp[1680]
8000950a:	89 12       	st.w	r4[0x4],r2
8000950c:	89 06       	st.w	r4[0x0],r6
8000950e:	f0 02 00 02 	add	r2,r8,r2
80009512:	fb 42 06 90 	st.w	sp[1680],r2
80009516:	e0 8f 01 d5 	bral	800098c0 <_vfprintf_r+0x1c9c>
8000951a:	e0 40 00 65 	cp.w	r0,101
8000951e:	e0 8a 01 d7 	brle	800098cc <_vfprintf_r+0x1ca8>
80009522:	30 08       	mov	r8,0
80009524:	30 09       	mov	r9,0
80009526:	40 5b       	lddsp	r11,sp[0x14]
80009528:	40 7a       	lddsp	r10,sp[0x1c]
8000952a:	e0 a0 19 7c 	rcall	8000c822 <__avr32_f64_cmp_eq>
8000952e:	c7 a0       	breq	80009622 <_vfprintf_r+0x19fe>
80009530:	fa f8 06 90 	ld.w	r8,sp[1680]
80009534:	48 a9       	lddpc	r9,8000955c <_vfprintf_r+0x1938>
80009536:	2f f8       	sub	r8,-1
80009538:	89 09       	st.w	r4[0x0],r9
8000953a:	fb 48 06 90 	st.w	sp[1680],r8
8000953e:	30 19       	mov	r9,1
80009540:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009544:	89 19       	st.w	r4[0x4],r9
80009546:	2f f8       	sub	r8,-1
80009548:	fb 48 06 8c 	st.w	sp[1676],r8
8000954c:	58 78       	cp.w	r8,7
8000954e:	e0 89 00 09 	brgt	80009560 <_vfprintf_r+0x193c>
80009552:	2f 84       	sub	r4,-8
80009554:	c1 08       	rjmp	80009574 <_vfprintf_r+0x1950>
80009556:	d7 03       	nop
80009558:	80 00       	ld.sh	r0,r0[0x0]
8000955a:	de e4       	*unknown*
8000955c:	80 00       	ld.sh	r0,r0[0x0]
8000955e:	de d0       	acall	0x3b4
80009560:	fa ca f9 78 	sub	r10,sp,-1672
80009564:	02 9b       	mov	r11,r1
80009566:	0a 9c       	mov	r12,r5
80009568:	fe b0 f3 50 	rcall	80007c08 <__sprint_r>
8000956c:	e0 81 02 e0 	brne	80009b2c <_vfprintf_r+0x1f08>
80009570:	fa c4 f9 e0 	sub	r4,sp,-1568
80009574:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009578:	40 6c       	lddsp	r12,sp[0x18]
8000957a:	18 38       	cp.w	r8,r12
8000957c:	c0 55       	brlt	80009586 <_vfprintf_r+0x1962>
8000957e:	ed b3 00 00 	bld	r3,0x0
80009582:	e0 81 02 69 	brne	80009a54 <_vfprintf_r+0x1e30>
80009586:	fa f8 06 90 	ld.w	r8,sp[1680]
8000958a:	2f f8       	sub	r8,-1
8000958c:	40 cb       	lddsp	r11,sp[0x30]
8000958e:	fb 48 06 90 	st.w	sp[1680],r8
80009592:	30 19       	mov	r9,1
80009594:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009598:	89 0b       	st.w	r4[0x0],r11
8000959a:	2f f8       	sub	r8,-1
8000959c:	89 19       	st.w	r4[0x4],r9
8000959e:	fb 48 06 8c 	st.w	sp[1676],r8
800095a2:	58 78       	cp.w	r8,7
800095a4:	e0 89 00 04 	brgt	800095ac <_vfprintf_r+0x1988>
800095a8:	2f 84       	sub	r4,-8
800095aa:	c0 b8       	rjmp	800095c0 <_vfprintf_r+0x199c>
800095ac:	fa ca f9 78 	sub	r10,sp,-1672
800095b0:	02 9b       	mov	r11,r1
800095b2:	0a 9c       	mov	r12,r5
800095b4:	fe b0 f3 2a 	rcall	80007c08 <__sprint_r>
800095b8:	e0 81 02 ba 	brne	80009b2c <_vfprintf_r+0x1f08>
800095bc:	fa c4 f9 e0 	sub	r4,sp,-1568
800095c0:	40 66       	lddsp	r6,sp[0x18]
800095c2:	20 16       	sub	r6,1
800095c4:	58 06       	cp.w	r6,0
800095c6:	e0 89 00 1d 	brgt	80009600 <_vfprintf_r+0x19dc>
800095ca:	e0 8f 02 45 	bral	80009a54 <_vfprintf_r+0x1e30>
800095ce:	2f 09       	sub	r9,-16
800095d0:	2f f8       	sub	r8,-1
800095d2:	fb 49 06 90 	st.w	sp[1680],r9
800095d6:	89 02       	st.w	r4[0x0],r2
800095d8:	89 10       	st.w	r4[0x4],r0
800095da:	fb 48 06 8c 	st.w	sp[1676],r8
800095de:	58 78       	cp.w	r8,7
800095e0:	e0 89 00 04 	brgt	800095e8 <_vfprintf_r+0x19c4>
800095e4:	2f 84       	sub	r4,-8
800095e6:	c0 b8       	rjmp	800095fc <_vfprintf_r+0x19d8>
800095e8:	fa ca f9 78 	sub	r10,sp,-1672
800095ec:	02 9b       	mov	r11,r1
800095ee:	0a 9c       	mov	r12,r5
800095f0:	fe b0 f3 0c 	rcall	80007c08 <__sprint_r>
800095f4:	e0 81 02 9c 	brne	80009b2c <_vfprintf_r+0x1f08>
800095f8:	fa c4 f9 e0 	sub	r4,sp,-1568
800095fc:	21 06       	sub	r6,16
800095fe:	c0 38       	rjmp	80009604 <_vfprintf_r+0x19e0>
80009600:	4d 22       	lddpc	r2,80009748 <_vfprintf_r+0x1b24>
80009602:	31 00       	mov	r0,16
80009604:	fa f9 06 90 	ld.w	r9,sp[1680]
80009608:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000960c:	4c fa       	lddpc	r10,80009748 <_vfprintf_r+0x1b24>
8000960e:	59 06       	cp.w	r6,16
80009610:	fe 99 ff df 	brgt	800095ce <_vfprintf_r+0x19aa>
80009614:	0c 09       	add	r9,r6
80009616:	89 0a       	st.w	r4[0x0],r10
80009618:	fb 49 06 90 	st.w	sp[1680],r9
8000961c:	2f f8       	sub	r8,-1
8000961e:	89 16       	st.w	r4[0x4],r6
80009620:	c5 39       	rjmp	800098c6 <_vfprintf_r+0x1ca2>
80009622:	fa fa 06 ac 	ld.w	r10,sp[1708]
80009626:	58 0a       	cp.w	r10,0
80009628:	e0 89 00 94 	brgt	80009750 <_vfprintf_r+0x1b2c>
8000962c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009630:	4c 79       	lddpc	r9,8000974c <_vfprintf_r+0x1b28>
80009632:	2f f8       	sub	r8,-1
80009634:	89 09       	st.w	r4[0x0],r9
80009636:	fb 48 06 90 	st.w	sp[1680],r8
8000963a:	30 19       	mov	r9,1
8000963c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009640:	89 19       	st.w	r4[0x4],r9
80009642:	2f f8       	sub	r8,-1
80009644:	fb 48 06 8c 	st.w	sp[1676],r8
80009648:	58 78       	cp.w	r8,7
8000964a:	e0 89 00 04 	brgt	80009652 <_vfprintf_r+0x1a2e>
8000964e:	2f 84       	sub	r4,-8
80009650:	c0 b8       	rjmp	80009666 <_vfprintf_r+0x1a42>
80009652:	fa ca f9 78 	sub	r10,sp,-1672
80009656:	02 9b       	mov	r11,r1
80009658:	0a 9c       	mov	r12,r5
8000965a:	fe b0 f2 d7 	rcall	80007c08 <__sprint_r>
8000965e:	e0 81 02 67 	brne	80009b2c <_vfprintf_r+0x1f08>
80009662:	fa c4 f9 e0 	sub	r4,sp,-1568
80009666:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000966a:	58 08       	cp.w	r8,0
8000966c:	c0 81       	brne	8000967c <_vfprintf_r+0x1a58>
8000966e:	40 6a       	lddsp	r10,sp[0x18]
80009670:	58 0a       	cp.w	r10,0
80009672:	c0 51       	brne	8000967c <_vfprintf_r+0x1a58>
80009674:	ed b3 00 00 	bld	r3,0x0
80009678:	e0 81 01 ee 	brne	80009a54 <_vfprintf_r+0x1e30>
8000967c:	40 c9       	lddsp	r9,sp[0x30]
8000967e:	fa f8 06 90 	ld.w	r8,sp[1680]
80009682:	2f f8       	sub	r8,-1
80009684:	89 09       	st.w	r4[0x0],r9
80009686:	fb 48 06 90 	st.w	sp[1680],r8
8000968a:	30 19       	mov	r9,1
8000968c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009690:	89 19       	st.w	r4[0x4],r9
80009692:	2f f8       	sub	r8,-1
80009694:	fb 48 06 8c 	st.w	sp[1676],r8
80009698:	58 78       	cp.w	r8,7
8000969a:	e0 89 00 04 	brgt	800096a2 <_vfprintf_r+0x1a7e>
8000969e:	2f 84       	sub	r4,-8
800096a0:	c0 b8       	rjmp	800096b6 <_vfprintf_r+0x1a92>
800096a2:	fa ca f9 78 	sub	r10,sp,-1672
800096a6:	02 9b       	mov	r11,r1
800096a8:	0a 9c       	mov	r12,r5
800096aa:	fe b0 f2 af 	rcall	80007c08 <__sprint_r>
800096ae:	e0 81 02 3f 	brne	80009b2c <_vfprintf_r+0x1f08>
800096b2:	fa c4 f9 e0 	sub	r4,sp,-1568
800096b6:	fa f2 06 ac 	ld.w	r2,sp[1708]
800096ba:	5c 32       	neg	r2
800096bc:	58 02       	cp.w	r2,0
800096be:	e0 89 00 1d 	brgt	800096f8 <_vfprintf_r+0x1ad4>
800096c2:	c3 b8       	rjmp	80009738 <_vfprintf_r+0x1b14>
800096c4:	2f 09       	sub	r9,-16
800096c6:	2f f8       	sub	r8,-1
800096c8:	31 0e       	mov	lr,16
800096ca:	fb 49 06 90 	st.w	sp[1680],r9
800096ce:	89 00       	st.w	r4[0x0],r0
800096d0:	89 1e       	st.w	r4[0x4],lr
800096d2:	fb 48 06 8c 	st.w	sp[1676],r8
800096d6:	58 78       	cp.w	r8,7
800096d8:	e0 89 00 04 	brgt	800096e0 <_vfprintf_r+0x1abc>
800096dc:	2f 84       	sub	r4,-8
800096de:	c0 b8       	rjmp	800096f4 <_vfprintf_r+0x1ad0>
800096e0:	fa ca f9 78 	sub	r10,sp,-1672
800096e4:	02 9b       	mov	r11,r1
800096e6:	0a 9c       	mov	r12,r5
800096e8:	fe b0 f2 90 	rcall	80007c08 <__sprint_r>
800096ec:	e0 81 02 20 	brne	80009b2c <_vfprintf_r+0x1f08>
800096f0:	fa c4 f9 e0 	sub	r4,sp,-1568
800096f4:	21 02       	sub	r2,16
800096f6:	c0 28       	rjmp	800096fa <_vfprintf_r+0x1ad6>
800096f8:	49 40       	lddpc	r0,80009748 <_vfprintf_r+0x1b24>
800096fa:	fa f9 06 90 	ld.w	r9,sp[1680]
800096fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009702:	49 2a       	lddpc	r10,80009748 <_vfprintf_r+0x1b24>
80009704:	59 02       	cp.w	r2,16
80009706:	fe 99 ff df 	brgt	800096c4 <_vfprintf_r+0x1aa0>
8000970a:	04 09       	add	r9,r2
8000970c:	2f f8       	sub	r8,-1
8000970e:	89 0a       	st.w	r4[0x0],r10
80009710:	fb 49 06 90 	st.w	sp[1680],r9
80009714:	89 12       	st.w	r4[0x4],r2
80009716:	fb 48 06 8c 	st.w	sp[1676],r8
8000971a:	58 78       	cp.w	r8,7
8000971c:	e0 89 00 04 	brgt	80009724 <_vfprintf_r+0x1b00>
80009720:	2f 84       	sub	r4,-8
80009722:	c0 b8       	rjmp	80009738 <_vfprintf_r+0x1b14>
80009724:	fa ca f9 78 	sub	r10,sp,-1672
80009728:	02 9b       	mov	r11,r1
8000972a:	0a 9c       	mov	r12,r5
8000972c:	fe b0 f2 6e 	rcall	80007c08 <__sprint_r>
80009730:	e0 81 01 fe 	brne	80009b2c <_vfprintf_r+0x1f08>
80009734:	fa c4 f9 e0 	sub	r4,sp,-1568
80009738:	40 6c       	lddsp	r12,sp[0x18]
8000973a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000973e:	89 06       	st.w	r4[0x0],r6
80009740:	89 1c       	st.w	r4[0x4],r12
80009742:	18 08       	add	r8,r12
80009744:	cb c8       	rjmp	800098bc <_vfprintf_r+0x1c98>
80009746:	d7 03       	nop
80009748:	80 00       	ld.sh	r0,r0[0x0]
8000974a:	de e4       	*unknown*
8000974c:	80 00       	ld.sh	r0,r0[0x0]
8000974e:	de d0       	acall	0x3b4
80009750:	fa f9 06 90 	ld.w	r9,sp[1680]
80009754:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009758:	40 6b       	lddsp	r11,sp[0x18]
8000975a:	16 3a       	cp.w	r10,r11
8000975c:	c6 d5       	brlt	80009836 <_vfprintf_r+0x1c12>
8000975e:	16 09       	add	r9,r11
80009760:	2f f8       	sub	r8,-1
80009762:	89 06       	st.w	r4[0x0],r6
80009764:	fb 49 06 90 	st.w	sp[1680],r9
80009768:	89 1b       	st.w	r4[0x4],r11
8000976a:	fb 48 06 8c 	st.w	sp[1676],r8
8000976e:	58 78       	cp.w	r8,7
80009770:	e0 89 00 04 	brgt	80009778 <_vfprintf_r+0x1b54>
80009774:	2f 84       	sub	r4,-8
80009776:	c0 b8       	rjmp	8000978c <_vfprintf_r+0x1b68>
80009778:	fa ca f9 78 	sub	r10,sp,-1672
8000977c:	02 9b       	mov	r11,r1
8000977e:	0a 9c       	mov	r12,r5
80009780:	fe b0 f2 44 	rcall	80007c08 <__sprint_r>
80009784:	e0 81 01 d4 	brne	80009b2c <_vfprintf_r+0x1f08>
80009788:	fa c4 f9 e0 	sub	r4,sp,-1568
8000978c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80009790:	40 6a       	lddsp	r10,sp[0x18]
80009792:	14 16       	sub	r6,r10
80009794:	58 06       	cp.w	r6,0
80009796:	e0 89 00 1c 	brgt	800097ce <_vfprintf_r+0x1baa>
8000979a:	c3 b8       	rjmp	80009810 <_vfprintf_r+0x1bec>
8000979c:	2f 09       	sub	r9,-16
8000979e:	2f f8       	sub	r8,-1
800097a0:	fb 49 06 90 	st.w	sp[1680],r9
800097a4:	89 02       	st.w	r4[0x0],r2
800097a6:	89 10       	st.w	r4[0x4],r0
800097a8:	fb 48 06 8c 	st.w	sp[1676],r8
800097ac:	58 78       	cp.w	r8,7
800097ae:	e0 89 00 04 	brgt	800097b6 <_vfprintf_r+0x1b92>
800097b2:	2f 84       	sub	r4,-8
800097b4:	c0 b8       	rjmp	800097ca <_vfprintf_r+0x1ba6>
800097b6:	fa ca f9 78 	sub	r10,sp,-1672
800097ba:	02 9b       	mov	r11,r1
800097bc:	0a 9c       	mov	r12,r5
800097be:	fe b0 f2 25 	rcall	80007c08 <__sprint_r>
800097c2:	e0 81 01 b5 	brne	80009b2c <_vfprintf_r+0x1f08>
800097c6:	fa c4 f9 e0 	sub	r4,sp,-1568
800097ca:	21 06       	sub	r6,16
800097cc:	c0 38       	rjmp	800097d2 <_vfprintf_r+0x1bae>
800097ce:	4d c2       	lddpc	r2,8000993c <_vfprintf_r+0x1d18>
800097d0:	31 00       	mov	r0,16
800097d2:	fa f9 06 90 	ld.w	r9,sp[1680]
800097d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800097da:	4d 9a       	lddpc	r10,8000993c <_vfprintf_r+0x1d18>
800097dc:	59 06       	cp.w	r6,16
800097de:	fe 99 ff df 	brgt	8000979c <_vfprintf_r+0x1b78>
800097e2:	0c 09       	add	r9,r6
800097e4:	2f f8       	sub	r8,-1
800097e6:	89 0a       	st.w	r4[0x0],r10
800097e8:	fb 49 06 90 	st.w	sp[1680],r9
800097ec:	89 16       	st.w	r4[0x4],r6
800097ee:	fb 48 06 8c 	st.w	sp[1676],r8
800097f2:	58 78       	cp.w	r8,7
800097f4:	e0 89 00 04 	brgt	800097fc <_vfprintf_r+0x1bd8>
800097f8:	2f 84       	sub	r4,-8
800097fa:	c0 b8       	rjmp	80009810 <_vfprintf_r+0x1bec>
800097fc:	fa ca f9 78 	sub	r10,sp,-1672
80009800:	02 9b       	mov	r11,r1
80009802:	0a 9c       	mov	r12,r5
80009804:	fe b0 f2 02 	rcall	80007c08 <__sprint_r>
80009808:	e0 81 01 92 	brne	80009b2c <_vfprintf_r+0x1f08>
8000980c:	fa c4 f9 e0 	sub	r4,sp,-1568
80009810:	ed b3 00 00 	bld	r3,0x0
80009814:	e0 81 01 20 	brne	80009a54 <_vfprintf_r+0x1e30>
80009818:	40 c9       	lddsp	r9,sp[0x30]
8000981a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000981e:	2f f8       	sub	r8,-1
80009820:	89 09       	st.w	r4[0x0],r9
80009822:	fb 48 06 90 	st.w	sp[1680],r8
80009826:	30 19       	mov	r9,1
80009828:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000982c:	89 19       	st.w	r4[0x4],r9
8000982e:	2f f8       	sub	r8,-1
80009830:	fb 48 06 8c 	st.w	sp[1676],r8
80009834:	c0 29       	rjmp	80009a38 <_vfprintf_r+0x1e14>
80009836:	14 09       	add	r9,r10
80009838:	2f f8       	sub	r8,-1
8000983a:	fb 49 06 90 	st.w	sp[1680],r9
8000983e:	89 06       	st.w	r4[0x0],r6
80009840:	89 1a       	st.w	r4[0x4],r10
80009842:	fb 48 06 8c 	st.w	sp[1676],r8
80009846:	58 78       	cp.w	r8,7
80009848:	e0 89 00 04 	brgt	80009850 <_vfprintf_r+0x1c2c>
8000984c:	2f 84       	sub	r4,-8
8000984e:	c0 b8       	rjmp	80009864 <_vfprintf_r+0x1c40>
80009850:	fa ca f9 78 	sub	r10,sp,-1672
80009854:	02 9b       	mov	r11,r1
80009856:	0a 9c       	mov	r12,r5
80009858:	fe b0 f1 d8 	rcall	80007c08 <__sprint_r>
8000985c:	e0 81 01 68 	brne	80009b2c <_vfprintf_r+0x1f08>
80009860:	fa c4 f9 e0 	sub	r4,sp,-1568
80009864:	40 c8       	lddsp	r8,sp[0x30]
80009866:	89 08       	st.w	r4[0x0],r8
80009868:	fa f8 06 90 	ld.w	r8,sp[1680]
8000986c:	2f f8       	sub	r8,-1
8000986e:	30 19       	mov	r9,1
80009870:	fb 48 06 90 	st.w	sp[1680],r8
80009874:	89 19       	st.w	r4[0x4],r9
80009876:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000987a:	2f f8       	sub	r8,-1
8000987c:	fb 48 06 8c 	st.w	sp[1676],r8
80009880:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009884:	58 78       	cp.w	r8,7
80009886:	e0 89 00 04 	brgt	8000988e <_vfprintf_r+0x1c6a>
8000988a:	2f 84       	sub	r4,-8
8000988c:	c0 b8       	rjmp	800098a2 <_vfprintf_r+0x1c7e>
8000988e:	fa ca f9 78 	sub	r10,sp,-1672
80009892:	02 9b       	mov	r11,r1
80009894:	0a 9c       	mov	r12,r5
80009896:	fe b0 f1 b9 	rcall	80007c08 <__sprint_r>
8000989a:	e0 81 01 49 	brne	80009b2c <_vfprintf_r+0x1f08>
8000989e:	fa c4 f9 e0 	sub	r4,sp,-1568
800098a2:	04 06       	add	r6,r2
800098a4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800098a8:	89 06       	st.w	r4[0x0],r6
800098aa:	fa f9 06 90 	ld.w	r9,sp[1680]
800098ae:	40 66       	lddsp	r6,sp[0x18]
800098b0:	40 6e       	lddsp	lr,sp[0x18]
800098b2:	10 16       	sub	r6,r8
800098b4:	f2 08 01 08 	sub	r8,r9,r8
800098b8:	89 16       	st.w	r4[0x4],r6
800098ba:	1c 08       	add	r8,lr
800098bc:	fb 48 06 90 	st.w	sp[1680],r8
800098c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800098c4:	2f f8       	sub	r8,-1
800098c6:	fb 48 06 8c 	st.w	sp[1676],r8
800098ca:	cb 78       	rjmp	80009a38 <_vfprintf_r+0x1e14>
800098cc:	40 6c       	lddsp	r12,sp[0x18]
800098ce:	58 1c       	cp.w	r12,1
800098d0:	e0 89 00 06 	brgt	800098dc <_vfprintf_r+0x1cb8>
800098d4:	ed b3 00 00 	bld	r3,0x0
800098d8:	e0 81 00 85 	brne	800099e2 <_vfprintf_r+0x1dbe>
800098dc:	fa f8 06 90 	ld.w	r8,sp[1680]
800098e0:	2f f8       	sub	r8,-1
800098e2:	30 19       	mov	r9,1
800098e4:	fb 48 06 90 	st.w	sp[1680],r8
800098e8:	89 06       	st.w	r4[0x0],r6
800098ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
800098ee:	89 19       	st.w	r4[0x4],r9
800098f0:	2f f8       	sub	r8,-1
800098f2:	fb 48 06 8c 	st.w	sp[1676],r8
800098f6:	58 78       	cp.w	r8,7
800098f8:	e0 89 00 04 	brgt	80009900 <_vfprintf_r+0x1cdc>
800098fc:	2f 84       	sub	r4,-8
800098fe:	c0 b8       	rjmp	80009914 <_vfprintf_r+0x1cf0>
80009900:	fa ca f9 78 	sub	r10,sp,-1672
80009904:	02 9b       	mov	r11,r1
80009906:	0a 9c       	mov	r12,r5
80009908:	fe b0 f1 80 	rcall	80007c08 <__sprint_r>
8000990c:	e0 81 01 10 	brne	80009b2c <_vfprintf_r+0x1f08>
80009910:	fa c4 f9 e0 	sub	r4,sp,-1568
80009914:	fa f8 06 90 	ld.w	r8,sp[1680]
80009918:	2f f8       	sub	r8,-1
8000991a:	40 cb       	lddsp	r11,sp[0x30]
8000991c:	fb 48 06 90 	st.w	sp[1680],r8
80009920:	30 19       	mov	r9,1
80009922:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009926:	89 0b       	st.w	r4[0x0],r11
80009928:	2f f8       	sub	r8,-1
8000992a:	89 19       	st.w	r4[0x4],r9
8000992c:	fb 48 06 8c 	st.w	sp[1676],r8
80009930:	58 78       	cp.w	r8,7
80009932:	e0 89 00 07 	brgt	80009940 <_vfprintf_r+0x1d1c>
80009936:	2f 84       	sub	r4,-8
80009938:	c0 e8       	rjmp	80009954 <_vfprintf_r+0x1d30>
8000993a:	d7 03       	nop
8000993c:	80 00       	ld.sh	r0,r0[0x0]
8000993e:	de e4       	*unknown*
80009940:	fa ca f9 78 	sub	r10,sp,-1672
80009944:	02 9b       	mov	r11,r1
80009946:	0a 9c       	mov	r12,r5
80009948:	fe b0 f1 60 	rcall	80007c08 <__sprint_r>
8000994c:	e0 81 00 f0 	brne	80009b2c <_vfprintf_r+0x1f08>
80009950:	fa c4 f9 e0 	sub	r4,sp,-1568
80009954:	30 08       	mov	r8,0
80009956:	30 09       	mov	r9,0
80009958:	40 5b       	lddsp	r11,sp[0x14]
8000995a:	40 7a       	lddsp	r10,sp[0x1c]
8000995c:	e0 a0 17 63 	rcall	8000c822 <__avr32_f64_cmp_eq>
80009960:	40 68       	lddsp	r8,sp[0x18]
80009962:	20 18       	sub	r8,1
80009964:	58 0c       	cp.w	r12,0
80009966:	c0 d1       	brne	80009980 <_vfprintf_r+0x1d5c>
80009968:	2f f6       	sub	r6,-1
8000996a:	89 18       	st.w	r4[0x4],r8
8000996c:	89 06       	st.w	r4[0x0],r6
8000996e:	fa f6 06 90 	ld.w	r6,sp[1680]
80009972:	10 06       	add	r6,r8
80009974:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009978:	fb 46 06 90 	st.w	sp[1680],r6
8000997c:	2f f8       	sub	r8,-1
8000997e:	c2 f8       	rjmp	800099dc <_vfprintf_r+0x1db8>
80009980:	10 96       	mov	r6,r8
80009982:	58 08       	cp.w	r8,0
80009984:	e0 89 00 1c 	brgt	800099bc <_vfprintf_r+0x1d98>
80009988:	c4 98       	rjmp	80009a1a <_vfprintf_r+0x1df6>
8000998a:	2f 09       	sub	r9,-16
8000998c:	2f f8       	sub	r8,-1
8000998e:	fb 49 06 90 	st.w	sp[1680],r9
80009992:	89 02       	st.w	r4[0x0],r2
80009994:	89 10       	st.w	r4[0x4],r0
80009996:	fb 48 06 8c 	st.w	sp[1676],r8
8000999a:	58 78       	cp.w	r8,7
8000999c:	e0 89 00 04 	brgt	800099a4 <_vfprintf_r+0x1d80>
800099a0:	2f 84       	sub	r4,-8
800099a2:	c0 b8       	rjmp	800099b8 <_vfprintf_r+0x1d94>
800099a4:	fa ca f9 78 	sub	r10,sp,-1672
800099a8:	02 9b       	mov	r11,r1
800099aa:	0a 9c       	mov	r12,r5
800099ac:	fe b0 f1 2e 	rcall	80007c08 <__sprint_r>
800099b0:	e0 81 00 be 	brne	80009b2c <_vfprintf_r+0x1f08>
800099b4:	fa c4 f9 e0 	sub	r4,sp,-1568
800099b8:	21 06       	sub	r6,16
800099ba:	c0 38       	rjmp	800099c0 <_vfprintf_r+0x1d9c>
800099bc:	4d 22       	lddpc	r2,80009b04 <_vfprintf_r+0x1ee0>
800099be:	31 00       	mov	r0,16
800099c0:	fa f9 06 90 	ld.w	r9,sp[1680]
800099c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800099c8:	4c fa       	lddpc	r10,80009b04 <_vfprintf_r+0x1ee0>
800099ca:	59 06       	cp.w	r6,16
800099cc:	fe 99 ff df 	brgt	8000998a <_vfprintf_r+0x1d66>
800099d0:	0c 09       	add	r9,r6
800099d2:	89 0a       	st.w	r4[0x0],r10
800099d4:	fb 49 06 90 	st.w	sp[1680],r9
800099d8:	2f f8       	sub	r8,-1
800099da:	89 16       	st.w	r4[0x4],r6
800099dc:	fb 48 06 8c 	st.w	sp[1676],r8
800099e0:	c0 e8       	rjmp	800099fc <_vfprintf_r+0x1dd8>
800099e2:	fa f8 06 90 	ld.w	r8,sp[1680]
800099e6:	2f f8       	sub	r8,-1
800099e8:	30 19       	mov	r9,1
800099ea:	fb 48 06 90 	st.w	sp[1680],r8
800099ee:	89 06       	st.w	r4[0x0],r6
800099f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800099f4:	89 19       	st.w	r4[0x4],r9
800099f6:	2f f8       	sub	r8,-1
800099f8:	fb 48 06 8c 	st.w	sp[1676],r8
800099fc:	58 78       	cp.w	r8,7
800099fe:	e0 89 00 04 	brgt	80009a06 <_vfprintf_r+0x1de2>
80009a02:	2f 84       	sub	r4,-8
80009a04:	c0 b8       	rjmp	80009a1a <_vfprintf_r+0x1df6>
80009a06:	fa ca f9 78 	sub	r10,sp,-1672
80009a0a:	02 9b       	mov	r11,r1
80009a0c:	0a 9c       	mov	r12,r5
80009a0e:	fe b0 f0 fd 	rcall	80007c08 <__sprint_r>
80009a12:	e0 81 00 8d 	brne	80009b2c <_vfprintf_r+0x1f08>
80009a16:	fa c4 f9 e0 	sub	r4,sp,-1568
80009a1a:	40 ea       	lddsp	r10,sp[0x38]
80009a1c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009a20:	14 08       	add	r8,r10
80009a22:	fa c9 f9 64 	sub	r9,sp,-1692
80009a26:	fb 48 06 90 	st.w	sp[1680],r8
80009a2a:	89 1a       	st.w	r4[0x4],r10
80009a2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009a30:	89 09       	st.w	r4[0x0],r9
80009a32:	2f f8       	sub	r8,-1
80009a34:	fb 48 06 8c 	st.w	sp[1676],r8
80009a38:	58 78       	cp.w	r8,7
80009a3a:	e0 89 00 04 	brgt	80009a42 <_vfprintf_r+0x1e1e>
80009a3e:	2f 84       	sub	r4,-8
80009a40:	c0 a8       	rjmp	80009a54 <_vfprintf_r+0x1e30>
80009a42:	fa ca f9 78 	sub	r10,sp,-1672
80009a46:	02 9b       	mov	r11,r1
80009a48:	0a 9c       	mov	r12,r5
80009a4a:	fe b0 f0 df 	rcall	80007c08 <__sprint_r>
80009a4e:	c6 f1       	brne	80009b2c <_vfprintf_r+0x1f08>
80009a50:	fa c4 f9 e0 	sub	r4,sp,-1568
80009a54:	e2 13 00 04 	andl	r3,0x4,COH
80009a58:	c3 d0       	breq	80009ad2 <_vfprintf_r+0x1eae>
80009a5a:	40 86       	lddsp	r6,sp[0x20]
80009a5c:	40 39       	lddsp	r9,sp[0xc]
80009a5e:	12 16       	sub	r6,r9
80009a60:	58 06       	cp.w	r6,0
80009a62:	e0 89 00 1a 	brgt	80009a96 <_vfprintf_r+0x1e72>
80009a66:	c3 68       	rjmp	80009ad2 <_vfprintf_r+0x1eae>
80009a68:	2f 09       	sub	r9,-16
80009a6a:	2f f8       	sub	r8,-1
80009a6c:	fb 49 06 90 	st.w	sp[1680],r9
80009a70:	89 03       	st.w	r4[0x0],r3
80009a72:	89 12       	st.w	r4[0x4],r2
80009a74:	fb 48 06 8c 	st.w	sp[1676],r8
80009a78:	58 78       	cp.w	r8,7
80009a7a:	e0 89 00 04 	brgt	80009a82 <_vfprintf_r+0x1e5e>
80009a7e:	2f 84       	sub	r4,-8
80009a80:	c0 98       	rjmp	80009a92 <_vfprintf_r+0x1e6e>
80009a82:	00 9a       	mov	r10,r0
80009a84:	02 9b       	mov	r11,r1
80009a86:	0a 9c       	mov	r12,r5
80009a88:	fe b0 f0 c0 	rcall	80007c08 <__sprint_r>
80009a8c:	c5 01       	brne	80009b2c <_vfprintf_r+0x1f08>
80009a8e:	fa c4 f9 e0 	sub	r4,sp,-1568
80009a92:	21 06       	sub	r6,16
80009a94:	c0 58       	rjmp	80009a9e <_vfprintf_r+0x1e7a>
80009a96:	49 d3       	lddpc	r3,80009b08 <_vfprintf_r+0x1ee4>
80009a98:	31 02       	mov	r2,16
80009a9a:	fa c0 f9 78 	sub	r0,sp,-1672
80009a9e:	fa f9 06 90 	ld.w	r9,sp[1680]
80009aa2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009aa6:	49 9a       	lddpc	r10,80009b08 <_vfprintf_r+0x1ee4>
80009aa8:	59 06       	cp.w	r6,16
80009aaa:	fe 99 ff df 	brgt	80009a68 <_vfprintf_r+0x1e44>
80009aae:	0c 09       	add	r9,r6
80009ab0:	2f f8       	sub	r8,-1
80009ab2:	89 0a       	st.w	r4[0x0],r10
80009ab4:	89 16       	st.w	r4[0x4],r6
80009ab6:	fb 49 06 90 	st.w	sp[1680],r9
80009aba:	fb 48 06 8c 	st.w	sp[1676],r8
80009abe:	58 78       	cp.w	r8,7
80009ac0:	e0 8a 00 09 	brle	80009ad2 <_vfprintf_r+0x1eae>
80009ac4:	fa ca f9 78 	sub	r10,sp,-1672
80009ac8:	02 9b       	mov	r11,r1
80009aca:	0a 9c       	mov	r12,r5
80009acc:	fe b0 f0 9e 	rcall	80007c08 <__sprint_r>
80009ad0:	c2 e1       	brne	80009b2c <_vfprintf_r+0x1f08>
80009ad2:	40 bc       	lddsp	r12,sp[0x2c]
80009ad4:	40 36       	lddsp	r6,sp[0xc]
80009ad6:	40 8e       	lddsp	lr,sp[0x20]
80009ad8:	ec 0e 0c 48 	max	r8,r6,lr
80009adc:	10 0c       	add	r12,r8
80009ade:	50 bc       	stdsp	sp[0x2c],r12
80009ae0:	fa f8 06 90 	ld.w	r8,sp[1680]
80009ae4:	58 08       	cp.w	r8,0
80009ae6:	c0 80       	breq	80009af6 <_vfprintf_r+0x1ed2>
80009ae8:	fa ca f9 78 	sub	r10,sp,-1672
80009aec:	02 9b       	mov	r11,r1
80009aee:	0a 9c       	mov	r12,r5
80009af0:	fe b0 f0 8c 	rcall	80007c08 <__sprint_r>
80009af4:	c1 c1       	brne	80009b2c <_vfprintf_r+0x1f08>
80009af6:	30 0b       	mov	r11,0
80009af8:	fa c4 f9 e0 	sub	r4,sp,-1568
80009afc:	fb 4b 06 8c 	st.w	sp[1676],r11
80009b00:	fe 9f f1 1c 	bral	80007d38 <_vfprintf_r+0x114>
80009b04:	80 00       	ld.sh	r0,r0[0x0]
80009b06:	de e4       	*unknown*
80009b08:	80 00       	ld.sh	r0,r0[0x0]
80009b0a:	de d4       	*unknown*
80009b0c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009b10:	58 08       	cp.w	r8,0
80009b12:	c0 80       	breq	80009b22 <_vfprintf_r+0x1efe>
80009b14:	0a 9c       	mov	r12,r5
80009b16:	fa ca f9 78 	sub	r10,sp,-1672
80009b1a:	02 9b       	mov	r11,r1
80009b1c:	fe b0 f0 76 	rcall	80007c08 <__sprint_r>
80009b20:	c0 61       	brne	80009b2c <_vfprintf_r+0x1f08>
80009b22:	30 08       	mov	r8,0
80009b24:	fb 48 06 8c 	st.w	sp[1676],r8
80009b28:	c0 28       	rjmp	80009b2c <_vfprintf_r+0x1f08>
80009b2a:	40 41       	lddsp	r1,sp[0x10]
80009b2c:	82 68       	ld.sh	r8,r1[0xc]
80009b2e:	ed b8 00 06 	bld	r8,0x6
80009b32:	c0 31       	brne	80009b38 <_vfprintf_r+0x1f14>
80009b34:	3f fa       	mov	r10,-1
80009b36:	50 ba       	stdsp	sp[0x2c],r10
80009b38:	40 bc       	lddsp	r12,sp[0x2c]
80009b3a:	fe 3d f9 44 	sub	sp,-1724
80009b3e:	d8 32       	popm	r0-r7,pc

80009b40 <__swsetup_r>:
80009b40:	d4 21       	pushm	r4-r7,lr
80009b42:	4b 38       	lddpc	r8,80009c0c <__swsetup_r+0xcc>
80009b44:	18 96       	mov	r6,r12
80009b46:	16 97       	mov	r7,r11
80009b48:	70 0c       	ld.w	r12,r8[0x0]
80009b4a:	58 0c       	cp.w	r12,0
80009b4c:	c0 60       	breq	80009b58 <__swsetup_r+0x18>
80009b4e:	78 68       	ld.w	r8,r12[0x18]
80009b50:	58 08       	cp.w	r8,0
80009b52:	c0 31       	brne	80009b58 <__swsetup_r+0x18>
80009b54:	e0 a0 07 c0 	rcall	8000aad4 <__sinit>
80009b58:	4a e8       	lddpc	r8,80009c10 <__swsetup_r+0xd0>
80009b5a:	10 37       	cp.w	r7,r8
80009b5c:	c0 51       	brne	80009b66 <__swsetup_r+0x26>
80009b5e:	4a c8       	lddpc	r8,80009c0c <__swsetup_r+0xcc>
80009b60:	70 08       	ld.w	r8,r8[0x0]
80009b62:	70 07       	ld.w	r7,r8[0x0]
80009b64:	c0 e8       	rjmp	80009b80 <__swsetup_r+0x40>
80009b66:	4a c8       	lddpc	r8,80009c14 <__swsetup_r+0xd4>
80009b68:	10 37       	cp.w	r7,r8
80009b6a:	c0 51       	brne	80009b74 <__swsetup_r+0x34>
80009b6c:	4a 88       	lddpc	r8,80009c0c <__swsetup_r+0xcc>
80009b6e:	70 08       	ld.w	r8,r8[0x0]
80009b70:	70 17       	ld.w	r7,r8[0x4]
80009b72:	c0 78       	rjmp	80009b80 <__swsetup_r+0x40>
80009b74:	4a 98       	lddpc	r8,80009c18 <__swsetup_r+0xd8>
80009b76:	10 37       	cp.w	r7,r8
80009b78:	c0 41       	brne	80009b80 <__swsetup_r+0x40>
80009b7a:	4a 58       	lddpc	r8,80009c0c <__swsetup_r+0xcc>
80009b7c:	70 08       	ld.w	r8,r8[0x0]
80009b7e:	70 27       	ld.w	r7,r8[0x8]
80009b80:	8e 68       	ld.sh	r8,r7[0xc]
80009b82:	ed b8 00 03 	bld	r8,0x3
80009b86:	c1 e0       	breq	80009bc2 <__swsetup_r+0x82>
80009b88:	ed b8 00 04 	bld	r8,0x4
80009b8c:	c3 e1       	brne	80009c08 <__swsetup_r+0xc8>
80009b8e:	ed b8 00 02 	bld	r8,0x2
80009b92:	c1 51       	brne	80009bbc <__swsetup_r+0x7c>
80009b94:	6e db       	ld.w	r11,r7[0x34]
80009b96:	58 0b       	cp.w	r11,0
80009b98:	c0 a0       	breq	80009bac <__swsetup_r+0x6c>
80009b9a:	ee c8 ff bc 	sub	r8,r7,-68
80009b9e:	10 3b       	cp.w	r11,r8
80009ba0:	c0 40       	breq	80009ba8 <__swsetup_r+0x68>
80009ba2:	0c 9c       	mov	r12,r6
80009ba4:	e0 a0 08 34 	rcall	8000ac0c <_free_r>
80009ba8:	30 08       	mov	r8,0
80009baa:	8f d8       	st.w	r7[0x34],r8
80009bac:	8e 68       	ld.sh	r8,r7[0xc]
80009bae:	e0 18 ff db 	andl	r8,0xffdb
80009bb2:	ae 68       	st.h	r7[0xc],r8
80009bb4:	30 08       	mov	r8,0
80009bb6:	8f 18       	st.w	r7[0x4],r8
80009bb8:	6e 48       	ld.w	r8,r7[0x10]
80009bba:	8f 08       	st.w	r7[0x0],r8
80009bbc:	8e 68       	ld.sh	r8,r7[0xc]
80009bbe:	a3 b8       	sbr	r8,0x3
80009bc0:	ae 68       	st.h	r7[0xc],r8
80009bc2:	6e 48       	ld.w	r8,r7[0x10]
80009bc4:	58 08       	cp.w	r8,0
80009bc6:	c0 b1       	brne	80009bdc <__swsetup_r+0x9c>
80009bc8:	8e 68       	ld.sh	r8,r7[0xc]
80009bca:	e2 18 02 80 	andl	r8,0x280,COH
80009bce:	e0 48 02 00 	cp.w	r8,512
80009bd2:	c0 50       	breq	80009bdc <__swsetup_r+0x9c>
80009bd4:	0c 9c       	mov	r12,r6
80009bd6:	0e 9b       	mov	r11,r7
80009bd8:	e0 a0 0a 5e 	rcall	8000b094 <__smakebuf_r>
80009bdc:	8e 69       	ld.sh	r9,r7[0xc]
80009bde:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80009be2:	c0 70       	breq	80009bf0 <__swsetup_r+0xb0>
80009be4:	30 08       	mov	r8,0
80009be6:	8f 28       	st.w	r7[0x8],r8
80009be8:	6e 58       	ld.w	r8,r7[0x14]
80009bea:	5c 38       	neg	r8
80009bec:	8f 68       	st.w	r7[0x18],r8
80009bee:	c0 68       	rjmp	80009bfa <__swsetup_r+0xba>
80009bf0:	ed b9 00 01 	bld	r9,0x1
80009bf4:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80009bf8:	8f 28       	st.w	r7[0x8],r8
80009bfa:	6e 48       	ld.w	r8,r7[0x10]
80009bfc:	58 08       	cp.w	r8,0
80009bfe:	c0 61       	brne	80009c0a <__swsetup_r+0xca>
80009c00:	8e 68       	ld.sh	r8,r7[0xc]
80009c02:	ed b8 00 07 	bld	r8,0x7
80009c06:	c0 21       	brne	80009c0a <__swsetup_r+0xca>
80009c08:	dc 2a       	popm	r4-r7,pc,r12=-1
80009c0a:	d8 2a       	popm	r4-r7,pc,r12=0
80009c0c:	00 00       	add	r0,r0
80009c0e:	01 00       	ld.w	r0,r0++
80009c10:	80 00       	ld.sh	r0,r0[0x0]
80009c12:	e0 04       	*unknown*
80009c14:	80 00       	ld.sh	r0,r0[0x0]
80009c16:	e0 24 80 00 	sub	r4,32768
80009c1a:	e0 44 d4 31 	cp.w	r4,54321

80009c1c <quorem>:
80009c1c:	d4 31       	pushm	r0-r7,lr
80009c1e:	20 2d       	sub	sp,8
80009c20:	18 97       	mov	r7,r12
80009c22:	78 48       	ld.w	r8,r12[0x10]
80009c24:	76 46       	ld.w	r6,r11[0x10]
80009c26:	0c 38       	cp.w	r8,r6
80009c28:	c0 34       	brge	80009c2e <quorem+0x12>
80009c2a:	30 0c       	mov	r12,0
80009c2c:	c8 58       	rjmp	80009d36 <quorem+0x11a>
80009c2e:	ec c2 ff fc 	sub	r2,r6,-4
80009c32:	f6 c3 ff ec 	sub	r3,r11,-20
80009c36:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80009c3a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80009c3e:	2f f9       	sub	r9,-1
80009c40:	20 16       	sub	r6,1
80009c42:	f8 09 0d 08 	divu	r8,r12,r9
80009c46:	f6 02 00 22 	add	r2,r11,r2<<0x2
80009c4a:	ee c4 ff ec 	sub	r4,r7,-20
80009c4e:	10 95       	mov	r5,r8
80009c50:	58 08       	cp.w	r8,0
80009c52:	c4 10       	breq	80009cd4 <quorem+0xb8>
80009c54:	30 09       	mov	r9,0
80009c56:	06 9a       	mov	r10,r3
80009c58:	08 98       	mov	r8,r4
80009c5a:	12 91       	mov	r1,r9
80009c5c:	50 0b       	stdsp	sp[0x0],r11
80009c5e:	70 0e       	ld.w	lr,r8[0x0]
80009c60:	b1 8e       	lsr	lr,0x10
80009c62:	50 1e       	stdsp	sp[0x4],lr
80009c64:	15 0e       	ld.w	lr,r10++
80009c66:	fc 00 16 10 	lsr	r0,lr,0x10
80009c6a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009c6e:	ea 0e 03 41 	mac	r1,r5,lr
80009c72:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80009c76:	b1 81       	lsr	r1,0x10
80009c78:	40 1b       	lddsp	r11,sp[0x4]
80009c7a:	ea 00 02 40 	mul	r0,r5,r0
80009c7e:	e2 00 00 00 	add	r0,r1,r0
80009c82:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80009c86:	02 1b       	sub	r11,r1
80009c88:	50 1b       	stdsp	sp[0x4],r11
80009c8a:	70 0b       	ld.w	r11,r8[0x0]
80009c8c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80009c90:	02 09       	add	r9,r1
80009c92:	f2 0e 01 0e 	sub	lr,r9,lr
80009c96:	b0 1e       	st.h	r8[0x2],lr
80009c98:	fc 09 14 10 	asr	r9,lr,0x10
80009c9c:	40 1e       	lddsp	lr,sp[0x4]
80009c9e:	fc 09 00 09 	add	r9,lr,r9
80009ca2:	b0 09       	st.h	r8[0x0],r9
80009ca4:	e0 01 16 10 	lsr	r1,r0,0x10
80009ca8:	2f c8       	sub	r8,-4
80009caa:	b1 49       	asr	r9,0x10
80009cac:	04 3a       	cp.w	r10,r2
80009cae:	fe 98 ff d8 	brls	80009c5e <quorem+0x42>
80009cb2:	40 0b       	lddsp	r11,sp[0x0]
80009cb4:	58 0c       	cp.w	r12,0
80009cb6:	c0 f1       	brne	80009cd4 <quorem+0xb8>
80009cb8:	ec c8 ff fb 	sub	r8,r6,-5
80009cbc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80009cc0:	c0 28       	rjmp	80009cc4 <quorem+0xa8>
80009cc2:	20 16       	sub	r6,1
80009cc4:	20 48       	sub	r8,4
80009cc6:	08 38       	cp.w	r8,r4
80009cc8:	e0 88 00 05 	brls	80009cd2 <quorem+0xb6>
80009ccc:	70 09       	ld.w	r9,r8[0x0]
80009cce:	58 09       	cp.w	r9,0
80009cd0:	cf 90       	breq	80009cc2 <quorem+0xa6>
80009cd2:	8f 46       	st.w	r7[0x10],r6
80009cd4:	0e 9c       	mov	r12,r7
80009cd6:	e0 a0 0d 06 	rcall	8000b6e2 <__mcmp>
80009cda:	c2 d5       	brlt	80009d34 <quorem+0x118>
80009cdc:	2f f5       	sub	r5,-1
80009cde:	08 98       	mov	r8,r4
80009ce0:	30 09       	mov	r9,0
80009ce2:	07 0b       	ld.w	r11,r3++
80009ce4:	f6 0a 16 10 	lsr	r10,r11,0x10
80009ce8:	70 0c       	ld.w	r12,r8[0x0]
80009cea:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009cee:	f8 0e 16 10 	lsr	lr,r12,0x10
80009cf2:	14 1e       	sub	lr,r10
80009cf4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009cf8:	16 1a       	sub	r10,r11
80009cfa:	12 0a       	add	r10,r9
80009cfc:	b0 1a       	st.h	r8[0x2],r10
80009cfe:	b1 4a       	asr	r10,0x10
80009d00:	fc 0a 00 09 	add	r9,lr,r10
80009d04:	b0 09       	st.h	r8[0x0],r9
80009d06:	2f c8       	sub	r8,-4
80009d08:	b1 49       	asr	r9,0x10
80009d0a:	04 33       	cp.w	r3,r2
80009d0c:	fe 98 ff eb 	brls	80009ce2 <quorem+0xc6>
80009d10:	ec c8 ff fb 	sub	r8,r6,-5
80009d14:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80009d18:	58 09       	cp.w	r9,0
80009d1a:	c0 d1       	brne	80009d34 <quorem+0x118>
80009d1c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80009d20:	c0 28       	rjmp	80009d24 <quorem+0x108>
80009d22:	20 16       	sub	r6,1
80009d24:	20 48       	sub	r8,4
80009d26:	08 38       	cp.w	r8,r4
80009d28:	e0 88 00 05 	brls	80009d32 <quorem+0x116>
80009d2c:	70 09       	ld.w	r9,r8[0x0]
80009d2e:	58 09       	cp.w	r9,0
80009d30:	cf 90       	breq	80009d22 <quorem+0x106>
80009d32:	8f 46       	st.w	r7[0x10],r6
80009d34:	0a 9c       	mov	r12,r5
80009d36:	2f ed       	sub	sp,-8
80009d38:	d8 32       	popm	r0-r7,pc
80009d3a:	d7 03       	nop

80009d3c <_dtoa_r>:
80009d3c:	d4 31       	pushm	r0-r7,lr
80009d3e:	21 ad       	sub	sp,104
80009d40:	fa c4 ff 74 	sub	r4,sp,-140
80009d44:	18 97       	mov	r7,r12
80009d46:	16 95       	mov	r5,r11
80009d48:	68 2c       	ld.w	r12,r4[0x8]
80009d4a:	50 c9       	stdsp	sp[0x30],r9
80009d4c:	68 16       	ld.w	r6,r4[0x4]
80009d4e:	68 09       	ld.w	r9,r4[0x0]
80009d50:	50 e8       	stdsp	sp[0x38],r8
80009d52:	14 94       	mov	r4,r10
80009d54:	51 2c       	stdsp	sp[0x48],r12
80009d56:	fa e5 00 08 	st.d	sp[8],r4
80009d5a:	51 59       	stdsp	sp[0x54],r9
80009d5c:	6e 95       	ld.w	r5,r7[0x24]
80009d5e:	58 05       	cp.w	r5,0
80009d60:	c0 91       	brne	80009d72 <_dtoa_r+0x36>
80009d62:	31 0c       	mov	r12,16
80009d64:	e0 a0 09 fa 	rcall	8000b158 <malloc>
80009d68:	99 35       	st.w	r12[0xc],r5
80009d6a:	8f 9c       	st.w	r7[0x24],r12
80009d6c:	99 15       	st.w	r12[0x4],r5
80009d6e:	99 25       	st.w	r12[0x8],r5
80009d70:	99 05       	st.w	r12[0x0],r5
80009d72:	6e 99       	ld.w	r9,r7[0x24]
80009d74:	72 08       	ld.w	r8,r9[0x0]
80009d76:	58 08       	cp.w	r8,0
80009d78:	c0 f0       	breq	80009d96 <_dtoa_r+0x5a>
80009d7a:	72 1a       	ld.w	r10,r9[0x4]
80009d7c:	91 1a       	st.w	r8[0x4],r10
80009d7e:	30 1a       	mov	r10,1
80009d80:	72 19       	ld.w	r9,r9[0x4]
80009d82:	f4 09 09 49 	lsl	r9,r10,r9
80009d86:	10 9b       	mov	r11,r8
80009d88:	91 29       	st.w	r8[0x8],r9
80009d8a:	0e 9c       	mov	r12,r7
80009d8c:	e0 a0 0c c4 	rcall	8000b714 <_Bfree>
80009d90:	6e 98       	ld.w	r8,r7[0x24]
80009d92:	30 09       	mov	r9,0
80009d94:	91 09       	st.w	r8[0x0],r9
80009d96:	40 28       	lddsp	r8,sp[0x8]
80009d98:	10 94       	mov	r4,r8
80009d9a:	58 08       	cp.w	r8,0
80009d9c:	c0 64       	brge	80009da8 <_dtoa_r+0x6c>
80009d9e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80009da2:	50 28       	stdsp	sp[0x8],r8
80009da4:	30 18       	mov	r8,1
80009da6:	c0 28       	rjmp	80009daa <_dtoa_r+0x6e>
80009da8:	30 08       	mov	r8,0
80009daa:	8d 08       	st.w	r6[0x0],r8
80009dac:	fc 1c 7f f0 	movh	r12,0x7ff0
80009db0:	40 26       	lddsp	r6,sp[0x8]
80009db2:	0c 98       	mov	r8,r6
80009db4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009db8:	18 38       	cp.w	r8,r12
80009dba:	c1 c1       	brne	80009df2 <_dtoa_r+0xb6>
80009dbc:	e0 68 27 0f 	mov	r8,9999
80009dc0:	41 5b       	lddsp	r11,sp[0x54]
80009dc2:	97 08       	st.w	r11[0x0],r8
80009dc4:	40 3a       	lddsp	r10,sp[0xc]
80009dc6:	58 0a       	cp.w	r10,0
80009dc8:	c0 61       	brne	80009dd4 <_dtoa_r+0x98>
80009dca:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80009dce:	c0 31       	brne	80009dd4 <_dtoa_r+0x98>
80009dd0:	4a cc       	lddpc	r12,80009e80 <_dtoa_r+0x144>
80009dd2:	c0 28       	rjmp	80009dd6 <_dtoa_r+0x9a>
80009dd4:	4a cc       	lddpc	r12,80009e84 <_dtoa_r+0x148>
80009dd6:	41 29       	lddsp	r9,sp[0x48]
80009dd8:	58 09       	cp.w	r9,0
80009dda:	e0 80 05 9e 	breq	8000a916 <_dtoa_r+0xbda>
80009dde:	f8 c8 ff fd 	sub	r8,r12,-3
80009de2:	30 09       	mov	r9,0
80009de4:	11 8a       	ld.ub	r10,r8[0x0]
80009de6:	f2 0a 18 00 	cp.b	r10,r9
80009dea:	c1 90       	breq	80009e1c <_dtoa_r+0xe0>
80009dec:	f8 c8 ff f8 	sub	r8,r12,-8
80009df0:	c1 68       	rjmp	80009e1c <_dtoa_r+0xe0>
80009df2:	fa ea 00 08 	ld.d	r10,sp[8]
80009df6:	30 08       	mov	r8,0
80009df8:	fa eb 00 3c 	st.d	sp[60],r10
80009dfc:	30 09       	mov	r9,0
80009dfe:	e0 a0 15 12 	rcall	8000c822 <__avr32_f64_cmp_eq>
80009e02:	c1 10       	breq	80009e24 <_dtoa_r+0xe8>
80009e04:	30 18       	mov	r8,1
80009e06:	41 5a       	lddsp	r10,sp[0x54]
80009e08:	95 08       	st.w	r10[0x0],r8
80009e0a:	41 29       	lddsp	r9,sp[0x48]
80009e0c:	49 f8       	lddpc	r8,80009e88 <_dtoa_r+0x14c>
80009e0e:	58 09       	cp.w	r9,0
80009e10:	c0 41       	brne	80009e18 <_dtoa_r+0xdc>
80009e12:	10 9c       	mov	r12,r8
80009e14:	e0 8f 05 81 	bral	8000a916 <_dtoa_r+0xbda>
80009e18:	10 9c       	mov	r12,r8
80009e1a:	2f f8       	sub	r8,-1
80009e1c:	41 25       	lddsp	r5,sp[0x48]
80009e1e:	8b 08       	st.w	r5[0x0],r8
80009e20:	e0 8f 05 7b 	bral	8000a916 <_dtoa_r+0xbda>
80009e24:	fa c8 ff 9c 	sub	r8,sp,-100
80009e28:	fa c9 ff a0 	sub	r9,sp,-96
80009e2c:	fa ea 00 3c 	ld.d	r10,sp[60]
80009e30:	0e 9c       	mov	r12,r7
80009e32:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80009e36:	e0 a0 0c c1 	rcall	8000b7b8 <__d2b>
80009e3a:	18 93       	mov	r3,r12
80009e3c:	58 05       	cp.w	r5,0
80009e3e:	c0 d0       	breq	80009e58 <_dtoa_r+0x11c>
80009e40:	fa ea 00 3c 	ld.d	r10,sp[60]
80009e44:	30 04       	mov	r4,0
80009e46:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80009e4a:	ea c5 03 ff 	sub	r5,r5,1023
80009e4e:	10 9b       	mov	r11,r8
80009e50:	51 74       	stdsp	sp[0x5c],r4
80009e52:	ea 1b 3f f0 	orh	r11,0x3ff0
80009e56:	c2 a8       	rjmp	80009eaa <_dtoa_r+0x16e>
80009e58:	41 88       	lddsp	r8,sp[0x60]
80009e5a:	41 9c       	lddsp	r12,sp[0x64]
80009e5c:	10 0c       	add	r12,r8
80009e5e:	f8 c5 fb ce 	sub	r5,r12,-1074
80009e62:	e0 45 00 20 	cp.w	r5,32
80009e66:	e0 8a 00 13 	brle	80009e8c <_dtoa_r+0x150>
80009e6a:	f8 cc fb ee 	sub	r12,r12,-1042
80009e6e:	40 3b       	lddsp	r11,sp[0xc]
80009e70:	ea 08 11 40 	rsub	r8,r5,64
80009e74:	f6 0c 0a 4c 	lsr	r12,r11,r12
80009e78:	ec 08 09 46 	lsl	r6,r6,r8
80009e7c:	0c 4c       	or	r12,r6
80009e7e:	c0 c8       	rjmp	80009e96 <_dtoa_r+0x15a>
80009e80:	80 00       	ld.sh	r0,r0[0x0]
80009e82:	df f4       	*unknown*
80009e84:	80 00       	ld.sh	r0,r0[0x0]
80009e86:	e0 00       	*unknown*
80009e88:	80 00       	ld.sh	r0,r0[0x0]
80009e8a:	de d0       	acall	0x3b4
80009e8c:	ea 0c 11 20 	rsub	r12,r5,32
80009e90:	40 3a       	lddsp	r10,sp[0xc]
80009e92:	f4 0c 09 4c 	lsl	r12,r10,r12
80009e96:	e0 a0 14 52 	rcall	8000c73a <__avr32_u32_to_f64>
80009e9a:	fc 18 fe 10 	movh	r8,0xfe10
80009e9e:	30 19       	mov	r9,1
80009ea0:	ea c5 04 33 	sub	r5,r5,1075
80009ea4:	f0 0b 00 0b 	add	r11,r8,r11
80009ea8:	51 79       	stdsp	sp[0x5c],r9
80009eaa:	30 08       	mov	r8,0
80009eac:	fc 19 3f f8 	movh	r9,0x3ff8
80009eb0:	e0 a0 12 de 	rcall	8000c46c <__avr32_f64_sub>
80009eb4:	e0 68 43 61 	mov	r8,17249
80009eb8:	ea 18 63 6f 	orh	r8,0x636f
80009ebc:	e0 69 87 a7 	mov	r9,34727
80009ec0:	ea 19 3f d2 	orh	r9,0x3fd2
80009ec4:	e0 a0 11 e8 	rcall	8000c294 <__avr32_f64_mul>
80009ec8:	e0 68 c8 b3 	mov	r8,51379
80009ecc:	ea 18 8b 60 	orh	r8,0x8b60
80009ed0:	e0 69 8a 28 	mov	r9,35368
80009ed4:	ea 19 3f c6 	orh	r9,0x3fc6
80009ed8:	e0 a0 13 98 	rcall	8000c608 <__avr32_f64_add>
80009edc:	0a 9c       	mov	r12,r5
80009ede:	14 90       	mov	r0,r10
80009ee0:	16 91       	mov	r1,r11
80009ee2:	e0 a0 14 30 	rcall	8000c742 <__avr32_s32_to_f64>
80009ee6:	e0 68 79 fb 	mov	r8,31227
80009eea:	ea 18 50 9f 	orh	r8,0x509f
80009eee:	e0 69 44 13 	mov	r9,17427
80009ef2:	ea 19 3f d3 	orh	r9,0x3fd3
80009ef6:	e0 a0 11 cf 	rcall	8000c294 <__avr32_f64_mul>
80009efa:	14 98       	mov	r8,r10
80009efc:	16 99       	mov	r9,r11
80009efe:	00 9a       	mov	r10,r0
80009f00:	02 9b       	mov	r11,r1
80009f02:	e0 a0 13 83 	rcall	8000c608 <__avr32_f64_add>
80009f06:	14 90       	mov	r0,r10
80009f08:	16 91       	mov	r1,r11
80009f0a:	e0 a0 14 05 	rcall	8000c714 <__avr32_f64_to_s32>
80009f0e:	30 08       	mov	r8,0
80009f10:	18 96       	mov	r6,r12
80009f12:	30 09       	mov	r9,0
80009f14:	00 9a       	mov	r10,r0
80009f16:	02 9b       	mov	r11,r1
80009f18:	e0 a0 14 cc 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
80009f1c:	c0 c0       	breq	80009f34 <_dtoa_r+0x1f8>
80009f1e:	0c 9c       	mov	r12,r6
80009f20:	e0 a0 14 11 	rcall	8000c742 <__avr32_s32_to_f64>
80009f24:	14 98       	mov	r8,r10
80009f26:	16 99       	mov	r9,r11
80009f28:	00 9a       	mov	r10,r0
80009f2a:	02 9b       	mov	r11,r1
80009f2c:	e0 a0 14 7b 	rcall	8000c822 <__avr32_f64_cmp_eq>
80009f30:	f7 b6 00 01 	subeq	r6,1
80009f34:	59 66       	cp.w	r6,22
80009f36:	e0 88 00 05 	brls	80009f40 <_dtoa_r+0x204>
80009f3a:	30 18       	mov	r8,1
80009f3c:	51 48       	stdsp	sp[0x50],r8
80009f3e:	c1 28       	rjmp	80009f62 <_dtoa_r+0x226>
80009f40:	4c 08       	lddpc	r8,8000a040 <_dtoa_r+0x304>
80009f42:	fa ea 00 3c 	ld.d	r10,sp[60]
80009f46:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80009f4a:	e0 a0 14 b3 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
80009f4e:	f9 b4 00 00 	moveq	r4,0
80009f52:	fb f4 0a 14 	st.weq	sp[0x50],r4
80009f56:	f7 b6 01 01 	subne	r6,1
80009f5a:	f9 bc 01 00 	movne	r12,0
80009f5e:	fb fc 1a 14 	st.wne	sp[0x50],r12
80009f62:	41 90       	lddsp	r0,sp[0x64]
80009f64:	20 10       	sub	r0,1
80009f66:	0a 10       	sub	r0,r5
80009f68:	c0 46       	brmi	80009f70 <_dtoa_r+0x234>
80009f6a:	50 40       	stdsp	sp[0x10],r0
80009f6c:	30 00       	mov	r0,0
80009f6e:	c0 48       	rjmp	80009f76 <_dtoa_r+0x23a>
80009f70:	30 0b       	mov	r11,0
80009f72:	5c 30       	neg	r0
80009f74:	50 4b       	stdsp	sp[0x10],r11
80009f76:	ec 02 11 00 	rsub	r2,r6,0
80009f7a:	58 06       	cp.w	r6,0
80009f7c:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80009f80:	f5 d6 e4 0a 	addge	r10,r10,r6
80009f84:	fb fa 4a 04 	st.wge	sp[0x10],r10
80009f88:	fb f6 4a 11 	st.wge	sp[0x44],r6
80009f8c:	f9 b2 04 00 	movge	r2,0
80009f90:	e1 d6 e5 10 	sublt	r0,r0,r6
80009f94:	f9 b9 05 00 	movlt	r9,0
80009f98:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80009f9c:	40 c8       	lddsp	r8,sp[0x30]
80009f9e:	58 98       	cp.w	r8,9
80009fa0:	e0 8b 00 20 	brhi	80009fe0 <_dtoa_r+0x2a4>
80009fa4:	58 58       	cp.w	r8,5
80009fa6:	f9 b4 0a 01 	movle	r4,1
80009faa:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80009fae:	f7 b5 09 04 	subgt	r5,4
80009fb2:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80009fb6:	f9 b4 09 00 	movgt	r4,0
80009fba:	40 cc       	lddsp	r12,sp[0x30]
80009fbc:	58 3c       	cp.w	r12,3
80009fbe:	c2 d0       	breq	8000a018 <_dtoa_r+0x2dc>
80009fc0:	e0 89 00 05 	brgt	80009fca <_dtoa_r+0x28e>
80009fc4:	58 2c       	cp.w	r12,2
80009fc6:	c1 01       	brne	80009fe6 <_dtoa_r+0x2aa>
80009fc8:	c1 88       	rjmp	80009ff8 <_dtoa_r+0x2bc>
80009fca:	40 cb       	lddsp	r11,sp[0x30]
80009fcc:	58 4b       	cp.w	r11,4
80009fce:	c0 60       	breq	80009fda <_dtoa_r+0x29e>
80009fd0:	58 5b       	cp.w	r11,5
80009fd2:	c0 a1       	brne	80009fe6 <_dtoa_r+0x2aa>
80009fd4:	30 1a       	mov	r10,1
80009fd6:	50 da       	stdsp	sp[0x34],r10
80009fd8:	c2 28       	rjmp	8000a01c <_dtoa_r+0x2e0>
80009fda:	30 19       	mov	r9,1
80009fdc:	50 d9       	stdsp	sp[0x34],r9
80009fde:	c0 f8       	rjmp	80009ffc <_dtoa_r+0x2c0>
80009fe0:	30 08       	mov	r8,0
80009fe2:	30 14       	mov	r4,1
80009fe4:	50 c8       	stdsp	sp[0x30],r8
80009fe6:	3f f5       	mov	r5,-1
80009fe8:	30 1c       	mov	r12,1
80009fea:	30 0b       	mov	r11,0
80009fec:	50 95       	stdsp	sp[0x24],r5
80009fee:	50 dc       	stdsp	sp[0x34],r12
80009ff0:	0a 91       	mov	r1,r5
80009ff2:	31 28       	mov	r8,18
80009ff4:	50 eb       	stdsp	sp[0x38],r11
80009ff6:	c2 08       	rjmp	8000a036 <_dtoa_r+0x2fa>
80009ff8:	30 0a       	mov	r10,0
80009ffa:	50 da       	stdsp	sp[0x34],r10
80009ffc:	40 e9       	lddsp	r9,sp[0x38]
80009ffe:	58 09       	cp.w	r9,0
8000a000:	e0 89 00 07 	brgt	8000a00e <_dtoa_r+0x2d2>
8000a004:	30 18       	mov	r8,1
8000a006:	50 98       	stdsp	sp[0x24],r8
8000a008:	10 91       	mov	r1,r8
8000a00a:	50 e8       	stdsp	sp[0x38],r8
8000a00c:	c1 58       	rjmp	8000a036 <_dtoa_r+0x2fa>
8000a00e:	40 e5       	lddsp	r5,sp[0x38]
8000a010:	50 95       	stdsp	sp[0x24],r5
8000a012:	0a 91       	mov	r1,r5
8000a014:	0a 98       	mov	r8,r5
8000a016:	c1 08       	rjmp	8000a036 <_dtoa_r+0x2fa>
8000a018:	30 0c       	mov	r12,0
8000a01a:	50 dc       	stdsp	sp[0x34],r12
8000a01c:	40 eb       	lddsp	r11,sp[0x38]
8000a01e:	ec 0b 00 0b 	add	r11,r6,r11
8000a022:	50 9b       	stdsp	sp[0x24],r11
8000a024:	16 98       	mov	r8,r11
8000a026:	2f f8       	sub	r8,-1
8000a028:	58 08       	cp.w	r8,0
8000a02a:	e0 89 00 05 	brgt	8000a034 <_dtoa_r+0x2f8>
8000a02e:	10 91       	mov	r1,r8
8000a030:	30 18       	mov	r8,1
8000a032:	c0 28       	rjmp	8000a036 <_dtoa_r+0x2fa>
8000a034:	10 91       	mov	r1,r8
8000a036:	30 09       	mov	r9,0
8000a038:	6e 9a       	ld.w	r10,r7[0x24]
8000a03a:	95 19       	st.w	r10[0x4],r9
8000a03c:	30 49       	mov	r9,4
8000a03e:	c0 78       	rjmp	8000a04c <_dtoa_r+0x310>
8000a040:	80 00       	ld.sh	r0,r0[0x0]
8000a042:	e0 b4       	*unknown*
8000a044:	6a 1a       	ld.w	r10,r5[0x4]
8000a046:	a1 79       	lsl	r9,0x1
8000a048:	2f fa       	sub	r10,-1
8000a04a:	8b 1a       	st.w	r5[0x4],r10
8000a04c:	6e 95       	ld.w	r5,r7[0x24]
8000a04e:	f2 ca ff ec 	sub	r10,r9,-20
8000a052:	10 3a       	cp.w	r10,r8
8000a054:	fe 98 ff f8 	brls	8000a044 <_dtoa_r+0x308>
8000a058:	6a 1b       	ld.w	r11,r5[0x4]
8000a05a:	0e 9c       	mov	r12,r7
8000a05c:	e0 a0 0b 76 	rcall	8000b748 <_Balloc>
8000a060:	58 e1       	cp.w	r1,14
8000a062:	5f 88       	srls	r8
8000a064:	8b 0c       	st.w	r5[0x0],r12
8000a066:	f1 e4 00 04 	and	r4,r8,r4
8000a06a:	6e 98       	ld.w	r8,r7[0x24]
8000a06c:	70 08       	ld.w	r8,r8[0x0]
8000a06e:	50 88       	stdsp	sp[0x20],r8
8000a070:	e0 80 01 82 	breq	8000a374 <_dtoa_r+0x638>
8000a074:	58 06       	cp.w	r6,0
8000a076:	e0 8a 00 40 	brle	8000a0f6 <_dtoa_r+0x3ba>
8000a07a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000a07e:	4c b8       	lddpc	r8,8000a1a8 <_dtoa_r+0x46c>
8000a080:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000a084:	fa e5 00 18 	st.d	sp[24],r4
8000a088:	ec 04 14 04 	asr	r4,r6,0x4
8000a08c:	ed b4 00 04 	bld	r4,0x4
8000a090:	c0 30       	breq	8000a096 <_dtoa_r+0x35a>
8000a092:	30 25       	mov	r5,2
8000a094:	c0 f8       	rjmp	8000a0b2 <_dtoa_r+0x376>
8000a096:	4c 68       	lddpc	r8,8000a1ac <_dtoa_r+0x470>
8000a098:	f0 e8 00 20 	ld.d	r8,r8[32]
8000a09c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a0a0:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000a0a4:	e0 a0 14 3a 	rcall	8000c918 <__avr32_f64_div>
8000a0a8:	30 35       	mov	r5,3
8000a0aa:	14 98       	mov	r8,r10
8000a0ac:	16 99       	mov	r9,r11
8000a0ae:	fa e9 00 08 	st.d	sp[8],r8
8000a0b2:	4b fc       	lddpc	r12,8000a1ac <_dtoa_r+0x470>
8000a0b4:	50 a3       	stdsp	sp[0x28],r3
8000a0b6:	0c 93       	mov	r3,r6
8000a0b8:	18 96       	mov	r6,r12
8000a0ba:	c0 f8       	rjmp	8000a0d8 <_dtoa_r+0x39c>
8000a0bc:	fa ea 00 18 	ld.d	r10,sp[24]
8000a0c0:	ed b4 00 00 	bld	r4,0x0
8000a0c4:	c0 81       	brne	8000a0d4 <_dtoa_r+0x398>
8000a0c6:	ec e8 00 00 	ld.d	r8,r6[0]
8000a0ca:	2f f5       	sub	r5,-1
8000a0cc:	e0 a0 10 e4 	rcall	8000c294 <__avr32_f64_mul>
8000a0d0:	fa eb 00 18 	st.d	sp[24],r10
8000a0d4:	a1 54       	asr	r4,0x1
8000a0d6:	2f 86       	sub	r6,-8
8000a0d8:	58 04       	cp.w	r4,0
8000a0da:	cf 11       	brne	8000a0bc <_dtoa_r+0x380>
8000a0dc:	fa e8 00 18 	ld.d	r8,sp[24]
8000a0e0:	fa ea 00 08 	ld.d	r10,sp[8]
8000a0e4:	06 96       	mov	r6,r3
8000a0e6:	e0 a0 14 19 	rcall	8000c918 <__avr32_f64_div>
8000a0ea:	40 a3       	lddsp	r3,sp[0x28]
8000a0ec:	14 98       	mov	r8,r10
8000a0ee:	16 99       	mov	r9,r11
8000a0f0:	fa e9 00 08 	st.d	sp[8],r8
8000a0f4:	c2 d8       	rjmp	8000a14e <_dtoa_r+0x412>
8000a0f6:	ec 08 11 00 	rsub	r8,r6,0
8000a0fa:	c0 31       	brne	8000a100 <_dtoa_r+0x3c4>
8000a0fc:	30 25       	mov	r5,2
8000a0fe:	c2 88       	rjmp	8000a14e <_dtoa_r+0x412>
8000a100:	4a bc       	lddpc	r12,8000a1ac <_dtoa_r+0x470>
8000a102:	f0 04 14 04 	asr	r4,r8,0x4
8000a106:	50 1c       	stdsp	sp[0x4],r12
8000a108:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a10c:	4a 79       	lddpc	r9,8000a1a8 <_dtoa_r+0x46c>
8000a10e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a112:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000a116:	e0 a0 10 bf 	rcall	8000c294 <__avr32_f64_mul>
8000a11a:	40 1c       	lddsp	r12,sp[0x4]
8000a11c:	50 63       	stdsp	sp[0x18],r3
8000a11e:	30 25       	mov	r5,2
8000a120:	0c 93       	mov	r3,r6
8000a122:	fa eb 00 08 	st.d	sp[8],r10
8000a126:	18 96       	mov	r6,r12
8000a128:	c0 f8       	rjmp	8000a146 <_dtoa_r+0x40a>
8000a12a:	fa ea 00 08 	ld.d	r10,sp[8]
8000a12e:	ed b4 00 00 	bld	r4,0x0
8000a132:	c0 81       	brne	8000a142 <_dtoa_r+0x406>
8000a134:	ec e8 00 00 	ld.d	r8,r6[0]
8000a138:	2f f5       	sub	r5,-1
8000a13a:	e0 a0 10 ad 	rcall	8000c294 <__avr32_f64_mul>
8000a13e:	fa eb 00 08 	st.d	sp[8],r10
8000a142:	a1 54       	asr	r4,0x1
8000a144:	2f 86       	sub	r6,-8
8000a146:	58 04       	cp.w	r4,0
8000a148:	cf 11       	brne	8000a12a <_dtoa_r+0x3ee>
8000a14a:	06 96       	mov	r6,r3
8000a14c:	40 63       	lddsp	r3,sp[0x18]
8000a14e:	41 4a       	lddsp	r10,sp[0x50]
8000a150:	58 0a       	cp.w	r10,0
8000a152:	c2 f0       	breq	8000a1b0 <_dtoa_r+0x474>
8000a154:	fa e8 00 08 	ld.d	r8,sp[8]
8000a158:	58 01       	cp.w	r1,0
8000a15a:	5f 94       	srgt	r4
8000a15c:	fa e9 00 18 	st.d	sp[24],r8
8000a160:	30 08       	mov	r8,0
8000a162:	fc 19 3f f0 	movh	r9,0x3ff0
8000a166:	fa ea 00 18 	ld.d	r10,sp[24]
8000a16a:	e0 a0 13 a3 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a16e:	f9 bc 00 00 	moveq	r12,0
8000a172:	f9 bc 01 01 	movne	r12,1
8000a176:	e9 ec 00 0c 	and	r12,r4,r12
8000a17a:	c1 b0       	breq	8000a1b0 <_dtoa_r+0x474>
8000a17c:	40 98       	lddsp	r8,sp[0x24]
8000a17e:	58 08       	cp.w	r8,0
8000a180:	e0 8a 00 f6 	brle	8000a36c <_dtoa_r+0x630>
8000a184:	30 08       	mov	r8,0
8000a186:	fc 19 40 24 	movh	r9,0x4024
8000a18a:	ec c4 00 01 	sub	r4,r6,1
8000a18e:	fa ea 00 18 	ld.d	r10,sp[24]
8000a192:	2f f5       	sub	r5,-1
8000a194:	50 64       	stdsp	sp[0x18],r4
8000a196:	e0 a0 10 7f 	rcall	8000c294 <__avr32_f64_mul>
8000a19a:	40 94       	lddsp	r4,sp[0x24]
8000a19c:	14 98       	mov	r8,r10
8000a19e:	16 99       	mov	r9,r11
8000a1a0:	fa e9 00 08 	st.d	sp[8],r8
8000a1a4:	c0 88       	rjmp	8000a1b4 <_dtoa_r+0x478>
8000a1a6:	d7 03       	nop
8000a1a8:	80 00       	ld.sh	r0,r0[0x0]
8000a1aa:	e0 b4       	*unknown*
8000a1ac:	80 00       	ld.sh	r0,r0[0x0]
8000a1ae:	e1 7c 50 66 	stcond	r0[20582],r12
8000a1b2:	02 94       	mov	r4,r1
8000a1b4:	0a 9c       	mov	r12,r5
8000a1b6:	e0 a0 12 c6 	rcall	8000c742 <__avr32_s32_to_f64>
8000a1ba:	fa e8 00 08 	ld.d	r8,sp[8]
8000a1be:	e0 a0 10 6b 	rcall	8000c294 <__avr32_f64_mul>
8000a1c2:	30 08       	mov	r8,0
8000a1c4:	fc 19 40 1c 	movh	r9,0x401c
8000a1c8:	e0 a0 12 20 	rcall	8000c608 <__avr32_f64_add>
8000a1cc:	14 98       	mov	r8,r10
8000a1ce:	16 99       	mov	r9,r11
8000a1d0:	fa e9 00 28 	st.d	sp[40],r8
8000a1d4:	fc 18 fc c0 	movh	r8,0xfcc0
8000a1d8:	40 a5       	lddsp	r5,sp[0x28]
8000a1da:	10 05       	add	r5,r8
8000a1dc:	50 a5       	stdsp	sp[0x28],r5
8000a1de:	58 04       	cp.w	r4,0
8000a1e0:	c2 11       	brne	8000a222 <_dtoa_r+0x4e6>
8000a1e2:	fa ea 00 08 	ld.d	r10,sp[8]
8000a1e6:	30 08       	mov	r8,0
8000a1e8:	fc 19 40 14 	movh	r9,0x4014
8000a1ec:	e0 a0 11 40 	rcall	8000c46c <__avr32_f64_sub>
8000a1f0:	40 bc       	lddsp	r12,sp[0x2c]
8000a1f2:	fa eb 00 08 	st.d	sp[8],r10
8000a1f6:	14 98       	mov	r8,r10
8000a1f8:	16 99       	mov	r9,r11
8000a1fa:	18 9a       	mov	r10,r12
8000a1fc:	0a 9b       	mov	r11,r5
8000a1fe:	e0 a0 13 59 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a202:	e0 81 02 54 	brne	8000a6aa <_dtoa_r+0x96e>
8000a206:	0a 98       	mov	r8,r5
8000a208:	40 b9       	lddsp	r9,sp[0x2c]
8000a20a:	ee 18 80 00 	eorh	r8,0x8000
8000a20e:	fa ea 00 08 	ld.d	r10,sp[8]
8000a212:	10 95       	mov	r5,r8
8000a214:	12 98       	mov	r8,r9
8000a216:	0a 99       	mov	r9,r5
8000a218:	e0 a0 13 4c 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a21c:	e0 81 02 3e 	brne	8000a698 <_dtoa_r+0x95c>
8000a220:	ca 68       	rjmp	8000a36c <_dtoa_r+0x630>
8000a222:	4c e9       	lddpc	r9,8000a358 <_dtoa_r+0x61c>
8000a224:	e8 c8 00 01 	sub	r8,r4,1
8000a228:	40 d5       	lddsp	r5,sp[0x34]
8000a22a:	58 05       	cp.w	r5,0
8000a22c:	c4 f0       	breq	8000a2ca <_dtoa_r+0x58e>
8000a22e:	30 0c       	mov	r12,0
8000a230:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000a234:	51 3c       	stdsp	sp[0x4c],r12
8000a236:	30 0a       	mov	r10,0
8000a238:	fc 1b 3f e0 	movh	r11,0x3fe0
8000a23c:	e0 a0 13 6e 	rcall	8000c918 <__avr32_f64_div>
8000a240:	fa e8 00 28 	ld.d	r8,sp[40]
8000a244:	40 85       	lddsp	r5,sp[0x20]
8000a246:	e0 a0 11 13 	rcall	8000c46c <__avr32_f64_sub>
8000a24a:	fa eb 00 28 	st.d	sp[40],r10
8000a24e:	fa ea 00 08 	ld.d	r10,sp[8]
8000a252:	e0 a0 12 61 	rcall	8000c714 <__avr32_f64_to_s32>
8000a256:	51 6c       	stdsp	sp[0x58],r12
8000a258:	e0 a0 12 75 	rcall	8000c742 <__avr32_s32_to_f64>
8000a25c:	14 98       	mov	r8,r10
8000a25e:	16 99       	mov	r9,r11
8000a260:	fa ea 00 08 	ld.d	r10,sp[8]
8000a264:	e0 a0 11 04 	rcall	8000c46c <__avr32_f64_sub>
8000a268:	fa eb 00 08 	st.d	sp[8],r10
8000a26c:	41 68       	lddsp	r8,sp[0x58]
8000a26e:	2d 08       	sub	r8,-48
8000a270:	0a c8       	st.b	r5++,r8
8000a272:	41 39       	lddsp	r9,sp[0x4c]
8000a274:	2f f9       	sub	r9,-1
8000a276:	51 39       	stdsp	sp[0x4c],r9
8000a278:	fa e8 00 28 	ld.d	r8,sp[40]
8000a27c:	e0 a0 13 1a 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a280:	e0 81 03 3a 	brne	8000a8f4 <_dtoa_r+0xbb8>
8000a284:	fa e8 00 08 	ld.d	r8,sp[8]
8000a288:	30 0a       	mov	r10,0
8000a28a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a28e:	e0 a0 10 ef 	rcall	8000c46c <__avr32_f64_sub>
8000a292:	fa e8 00 28 	ld.d	r8,sp[40]
8000a296:	e0 a0 13 0d 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a29a:	fa ea 00 28 	ld.d	r10,sp[40]
8000a29e:	30 08       	mov	r8,0
8000a2a0:	fc 19 40 24 	movh	r9,0x4024
8000a2a4:	e0 81 00 da 	brne	8000a458 <_dtoa_r+0x71c>
8000a2a8:	41 3c       	lddsp	r12,sp[0x4c]
8000a2aa:	08 3c       	cp.w	r12,r4
8000a2ac:	c6 04       	brge	8000a36c <_dtoa_r+0x630>
8000a2ae:	e0 a0 0f f3 	rcall	8000c294 <__avr32_f64_mul>
8000a2b2:	30 08       	mov	r8,0
8000a2b4:	fa eb 00 28 	st.d	sp[40],r10
8000a2b8:	fc 19 40 24 	movh	r9,0x4024
8000a2bc:	fa ea 00 08 	ld.d	r10,sp[8]
8000a2c0:	e0 a0 0f ea 	rcall	8000c294 <__avr32_f64_mul>
8000a2c4:	fa eb 00 08 	st.d	sp[8],r10
8000a2c8:	cc 3b       	rjmp	8000a24e <_dtoa_r+0x512>
8000a2ca:	40 85       	lddsp	r5,sp[0x20]
8000a2cc:	08 05       	add	r5,r4
8000a2ce:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000a2d2:	51 35       	stdsp	sp[0x4c],r5
8000a2d4:	fa e8 00 28 	ld.d	r8,sp[40]
8000a2d8:	40 85       	lddsp	r5,sp[0x20]
8000a2da:	e0 a0 0f dd 	rcall	8000c294 <__avr32_f64_mul>
8000a2de:	fa eb 00 28 	st.d	sp[40],r10
8000a2e2:	fa ea 00 08 	ld.d	r10,sp[8]
8000a2e6:	e0 a0 12 17 	rcall	8000c714 <__avr32_f64_to_s32>
8000a2ea:	51 6c       	stdsp	sp[0x58],r12
8000a2ec:	e0 a0 12 2b 	rcall	8000c742 <__avr32_s32_to_f64>
8000a2f0:	14 98       	mov	r8,r10
8000a2f2:	16 99       	mov	r9,r11
8000a2f4:	fa ea 00 08 	ld.d	r10,sp[8]
8000a2f8:	e0 a0 10 ba 	rcall	8000c46c <__avr32_f64_sub>
8000a2fc:	fa eb 00 08 	st.d	sp[8],r10
8000a300:	41 68       	lddsp	r8,sp[0x58]
8000a302:	2d 08       	sub	r8,-48
8000a304:	0a c8       	st.b	r5++,r8
8000a306:	41 3c       	lddsp	r12,sp[0x4c]
8000a308:	18 35       	cp.w	r5,r12
8000a30a:	c2 91       	brne	8000a35c <_dtoa_r+0x620>
8000a30c:	30 08       	mov	r8,0
8000a30e:	fc 19 3f e0 	movh	r9,0x3fe0
8000a312:	fa ea 00 28 	ld.d	r10,sp[40]
8000a316:	e0 a0 11 79 	rcall	8000c608 <__avr32_f64_add>
8000a31a:	40 85       	lddsp	r5,sp[0x20]
8000a31c:	fa e8 00 08 	ld.d	r8,sp[8]
8000a320:	08 05       	add	r5,r4
8000a322:	e0 a0 12 c7 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a326:	e0 81 00 99 	brne	8000a458 <_dtoa_r+0x71c>
8000a32a:	fa e8 00 28 	ld.d	r8,sp[40]
8000a32e:	30 0a       	mov	r10,0
8000a330:	fc 1b 3f e0 	movh	r11,0x3fe0
8000a334:	e0 a0 10 9c 	rcall	8000c46c <__avr32_f64_sub>
8000a338:	14 98       	mov	r8,r10
8000a33a:	16 99       	mov	r9,r11
8000a33c:	fa ea 00 08 	ld.d	r10,sp[8]
8000a340:	e0 a0 12 b8 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a344:	c1 40       	breq	8000a36c <_dtoa_r+0x630>
8000a346:	33 09       	mov	r9,48
8000a348:	0a 98       	mov	r8,r5
8000a34a:	11 7a       	ld.ub	r10,--r8
8000a34c:	f2 0a 18 00 	cp.b	r10,r9
8000a350:	e0 81 02 d2 	brne	8000a8f4 <_dtoa_r+0xbb8>
8000a354:	10 95       	mov	r5,r8
8000a356:	cf 9b       	rjmp	8000a348 <_dtoa_r+0x60c>
8000a358:	80 00       	ld.sh	r0,r0[0x0]
8000a35a:	e0 b4       	*unknown*
8000a35c:	30 08       	mov	r8,0
8000a35e:	fc 19 40 24 	movh	r9,0x4024
8000a362:	e0 a0 0f 99 	rcall	8000c294 <__avr32_f64_mul>
8000a366:	fa eb 00 08 	st.d	sp[8],r10
8000a36a:	cb cb       	rjmp	8000a2e2 <_dtoa_r+0x5a6>
8000a36c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a370:	fa eb 00 08 	st.d	sp[8],r10
8000a374:	58 e6       	cp.w	r6,14
8000a376:	5f ab       	srle	r11
8000a378:	41 8a       	lddsp	r10,sp[0x60]
8000a37a:	30 08       	mov	r8,0
8000a37c:	f4 09 11 ff 	rsub	r9,r10,-1
8000a380:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000a384:	f0 09 18 00 	cp.b	r9,r8
8000a388:	e0 80 00 81 	breq	8000a48a <_dtoa_r+0x74e>
8000a38c:	40 ea       	lddsp	r10,sp[0x38]
8000a38e:	58 01       	cp.w	r1,0
8000a390:	5f a9       	srle	r9
8000a392:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000a396:	4c 9a       	lddpc	r10,8000a4b8 <_dtoa_r+0x77c>
8000a398:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000a39c:	fa e5 00 10 	st.d	sp[16],r4
8000a3a0:	f0 09 18 00 	cp.b	r9,r8
8000a3a4:	c1 40       	breq	8000a3cc <_dtoa_r+0x690>
8000a3a6:	58 01       	cp.w	r1,0
8000a3a8:	e0 81 01 78 	brne	8000a698 <_dtoa_r+0x95c>
8000a3ac:	30 08       	mov	r8,0
8000a3ae:	fc 19 40 14 	movh	r9,0x4014
8000a3b2:	08 9a       	mov	r10,r4
8000a3b4:	0a 9b       	mov	r11,r5
8000a3b6:	e0 a0 0f 6f 	rcall	8000c294 <__avr32_f64_mul>
8000a3ba:	fa e8 00 08 	ld.d	r8,sp[8]
8000a3be:	e0 a0 12 45 	rcall	8000c848 <__avr32_f64_cmp_ge>
8000a3c2:	e0 81 01 6b 	brne	8000a698 <_dtoa_r+0x95c>
8000a3c6:	02 92       	mov	r2,r1
8000a3c8:	e0 8f 01 73 	bral	8000a6ae <_dtoa_r+0x972>
8000a3cc:	40 85       	lddsp	r5,sp[0x20]
8000a3ce:	30 14       	mov	r4,1
8000a3d0:	fa e8 00 10 	ld.d	r8,sp[16]
8000a3d4:	fa ea 00 08 	ld.d	r10,sp[8]
8000a3d8:	e0 a0 12 a0 	rcall	8000c918 <__avr32_f64_div>
8000a3dc:	e0 a0 11 9c 	rcall	8000c714 <__avr32_f64_to_s32>
8000a3e0:	18 92       	mov	r2,r12
8000a3e2:	e0 a0 11 b0 	rcall	8000c742 <__avr32_s32_to_f64>
8000a3e6:	fa e8 00 10 	ld.d	r8,sp[16]
8000a3ea:	e0 a0 0f 55 	rcall	8000c294 <__avr32_f64_mul>
8000a3ee:	14 98       	mov	r8,r10
8000a3f0:	16 99       	mov	r9,r11
8000a3f2:	fa ea 00 08 	ld.d	r10,sp[8]
8000a3f6:	e0 a0 10 3b 	rcall	8000c46c <__avr32_f64_sub>
8000a3fa:	fa eb 00 08 	st.d	sp[8],r10
8000a3fe:	e4 c8 ff d0 	sub	r8,r2,-48
8000a402:	0a c8       	st.b	r5++,r8
8000a404:	fc 19 40 24 	movh	r9,0x4024
8000a408:	30 08       	mov	r8,0
8000a40a:	02 34       	cp.w	r4,r1
8000a40c:	c3 31       	brne	8000a472 <_dtoa_r+0x736>
8000a40e:	fa e8 00 08 	ld.d	r8,sp[8]
8000a412:	e0 a0 10 fb 	rcall	8000c608 <__avr32_f64_add>
8000a416:	16 91       	mov	r1,r11
8000a418:	14 90       	mov	r0,r10
8000a41a:	14 98       	mov	r8,r10
8000a41c:	02 99       	mov	r9,r1
8000a41e:	fa ea 00 10 	ld.d	r10,sp[16]
8000a422:	e0 a0 12 47 	rcall	8000c8b0 <__avr32_f64_cmp_lt>
8000a426:	c1 a1       	brne	8000a45a <_dtoa_r+0x71e>
8000a428:	fa e8 00 10 	ld.d	r8,sp[16]
8000a42c:	00 9a       	mov	r10,r0
8000a42e:	02 9b       	mov	r11,r1
8000a430:	e0 a0 11 f9 	rcall	8000c822 <__avr32_f64_cmp_eq>
8000a434:	e0 80 02 5f 	breq	8000a8f2 <_dtoa_r+0xbb6>
8000a438:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000a43c:	c0 f1       	brne	8000a45a <_dtoa_r+0x71e>
8000a43e:	e0 8f 02 5a 	bral	8000a8f2 <_dtoa_r+0xbb6>
8000a442:	40 8a       	lddsp	r10,sp[0x20]
8000a444:	14 38       	cp.w	r8,r10
8000a446:	c0 30       	breq	8000a44c <_dtoa_r+0x710>
8000a448:	10 95       	mov	r5,r8
8000a44a:	c0 98       	rjmp	8000a45c <_dtoa_r+0x720>
8000a44c:	33 08       	mov	r8,48
8000a44e:	40 89       	lddsp	r9,sp[0x20]
8000a450:	2f f6       	sub	r6,-1
8000a452:	b2 88       	st.b	r9[0x0],r8
8000a454:	40 88       	lddsp	r8,sp[0x20]
8000a456:	c0 88       	rjmp	8000a466 <_dtoa_r+0x72a>
8000a458:	40 66       	lddsp	r6,sp[0x18]
8000a45a:	33 99       	mov	r9,57
8000a45c:	0a 98       	mov	r8,r5
8000a45e:	11 7a       	ld.ub	r10,--r8
8000a460:	f2 0a 18 00 	cp.b	r10,r9
8000a464:	ce f0       	breq	8000a442 <_dtoa_r+0x706>
8000a466:	50 66       	stdsp	sp[0x18],r6
8000a468:	11 89       	ld.ub	r9,r8[0x0]
8000a46a:	2f f9       	sub	r9,-1
8000a46c:	b0 89       	st.b	r8[0x0],r9
8000a46e:	e0 8f 02 43 	bral	8000a8f4 <_dtoa_r+0xbb8>
8000a472:	e0 a0 0f 11 	rcall	8000c294 <__avr32_f64_mul>
8000a476:	2f f4       	sub	r4,-1
8000a478:	fa eb 00 08 	st.d	sp[8],r10
8000a47c:	30 08       	mov	r8,0
8000a47e:	30 09       	mov	r9,0
8000a480:	e0 a0 11 d1 	rcall	8000c822 <__avr32_f64_cmp_eq>
8000a484:	ca 60       	breq	8000a3d0 <_dtoa_r+0x694>
8000a486:	e0 8f 02 36 	bral	8000a8f2 <_dtoa_r+0xbb6>
8000a48a:	40 d8       	lddsp	r8,sp[0x34]
8000a48c:	58 08       	cp.w	r8,0
8000a48e:	c0 51       	brne	8000a498 <_dtoa_r+0x75c>
8000a490:	04 98       	mov	r8,r2
8000a492:	00 95       	mov	r5,r0
8000a494:	40 d4       	lddsp	r4,sp[0x34]
8000a496:	c3 88       	rjmp	8000a506 <_dtoa_r+0x7ca>
8000a498:	40 c5       	lddsp	r5,sp[0x30]
8000a49a:	58 15       	cp.w	r5,1
8000a49c:	e0 89 00 10 	brgt	8000a4bc <_dtoa_r+0x780>
8000a4a0:	41 74       	lddsp	r4,sp[0x5c]
8000a4a2:	58 04       	cp.w	r4,0
8000a4a4:	c0 40       	breq	8000a4ac <_dtoa_r+0x770>
8000a4a6:	f4 c9 fb cd 	sub	r9,r10,-1075
8000a4aa:	c0 48       	rjmp	8000a4b2 <_dtoa_r+0x776>
8000a4ac:	41 99       	lddsp	r9,sp[0x64]
8000a4ae:	f2 09 11 36 	rsub	r9,r9,54
8000a4b2:	04 98       	mov	r8,r2
8000a4b4:	00 95       	mov	r5,r0
8000a4b6:	c1 d8       	rjmp	8000a4f0 <_dtoa_r+0x7b4>
8000a4b8:	80 00       	ld.sh	r0,r0[0x0]
8000a4ba:	e0 b4       	*unknown*
8000a4bc:	e2 c8 00 01 	sub	r8,r1,1
8000a4c0:	58 01       	cp.w	r1,0
8000a4c2:	e0 05 17 40 	movge	r5,r0
8000a4c6:	e2 09 17 40 	movge	r9,r1
8000a4ca:	e1 d1 e5 15 	sublt	r5,r0,r1
8000a4ce:	f9 b9 05 00 	movlt	r9,0
8000a4d2:	10 32       	cp.w	r2,r8
8000a4d4:	e5 d8 e4 18 	subge	r8,r2,r8
8000a4d8:	f1 d2 e5 18 	sublt	r8,r8,r2
8000a4dc:	e5 d8 e5 02 	addlt	r2,r2,r8
8000a4e0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000a4e4:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000a4e8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000a4ec:	f9 b8 05 00 	movlt	r8,0
8000a4f0:	40 4b       	lddsp	r11,sp[0x10]
8000a4f2:	12 0b       	add	r11,r9
8000a4f4:	50 08       	stdsp	sp[0x0],r8
8000a4f6:	50 4b       	stdsp	sp[0x10],r11
8000a4f8:	12 00       	add	r0,r9
8000a4fa:	30 1b       	mov	r11,1
8000a4fc:	0e 9c       	mov	r12,r7
8000a4fe:	e0 a0 0a dd 	rcall	8000bab8 <__i2b>
8000a502:	40 08       	lddsp	r8,sp[0x0]
8000a504:	18 94       	mov	r4,r12
8000a506:	40 4a       	lddsp	r10,sp[0x10]
8000a508:	58 05       	cp.w	r5,0
8000a50a:	5f 99       	srgt	r9
8000a50c:	58 0a       	cp.w	r10,0
8000a50e:	5f 9a       	srgt	r10
8000a510:	f5 e9 00 09 	and	r9,r10,r9
8000a514:	c0 80       	breq	8000a524 <_dtoa_r+0x7e8>
8000a516:	40 4c       	lddsp	r12,sp[0x10]
8000a518:	f8 05 0d 49 	min	r9,r12,r5
8000a51c:	12 1c       	sub	r12,r9
8000a51e:	12 10       	sub	r0,r9
8000a520:	50 4c       	stdsp	sp[0x10],r12
8000a522:	12 15       	sub	r5,r9
8000a524:	58 02       	cp.w	r2,0
8000a526:	e0 8a 00 27 	brle	8000a574 <_dtoa_r+0x838>
8000a52a:	40 db       	lddsp	r11,sp[0x34]
8000a52c:	58 0b       	cp.w	r11,0
8000a52e:	c1 d0       	breq	8000a568 <_dtoa_r+0x82c>
8000a530:	58 08       	cp.w	r8,0
8000a532:	e0 8a 00 17 	brle	8000a560 <_dtoa_r+0x824>
8000a536:	10 9a       	mov	r10,r8
8000a538:	50 08       	stdsp	sp[0x0],r8
8000a53a:	08 9b       	mov	r11,r4
8000a53c:	0e 9c       	mov	r12,r7
8000a53e:	e0 a0 0b 03 	rcall	8000bb44 <__pow5mult>
8000a542:	06 9a       	mov	r10,r3
8000a544:	18 9b       	mov	r11,r12
8000a546:	18 94       	mov	r4,r12
8000a548:	0e 9c       	mov	r12,r7
8000a54a:	e0 a0 0a 37 	rcall	8000b9b8 <__multiply>
8000a54e:	18 99       	mov	r9,r12
8000a550:	06 9b       	mov	r11,r3
8000a552:	50 19       	stdsp	sp[0x4],r9
8000a554:	0e 9c       	mov	r12,r7
8000a556:	e0 a0 08 df 	rcall	8000b714 <_Bfree>
8000a55a:	40 19       	lddsp	r9,sp[0x4]
8000a55c:	40 08       	lddsp	r8,sp[0x0]
8000a55e:	12 93       	mov	r3,r9
8000a560:	e4 08 01 0a 	sub	r10,r2,r8
8000a564:	c0 80       	breq	8000a574 <_dtoa_r+0x838>
8000a566:	c0 28       	rjmp	8000a56a <_dtoa_r+0x82e>
8000a568:	04 9a       	mov	r10,r2
8000a56a:	06 9b       	mov	r11,r3
8000a56c:	0e 9c       	mov	r12,r7
8000a56e:	e0 a0 0a eb 	rcall	8000bb44 <__pow5mult>
8000a572:	18 93       	mov	r3,r12
8000a574:	30 1b       	mov	r11,1
8000a576:	0e 9c       	mov	r12,r7
8000a578:	e0 a0 0a a0 	rcall	8000bab8 <__i2b>
8000a57c:	41 1a       	lddsp	r10,sp[0x44]
8000a57e:	18 92       	mov	r2,r12
8000a580:	58 0a       	cp.w	r10,0
8000a582:	e0 8a 00 07 	brle	8000a590 <_dtoa_r+0x854>
8000a586:	18 9b       	mov	r11,r12
8000a588:	0e 9c       	mov	r12,r7
8000a58a:	e0 a0 0a dd 	rcall	8000bb44 <__pow5mult>
8000a58e:	18 92       	mov	r2,r12
8000a590:	40 c9       	lddsp	r9,sp[0x30]
8000a592:	58 19       	cp.w	r9,1
8000a594:	e0 89 00 14 	brgt	8000a5bc <_dtoa_r+0x880>
8000a598:	40 38       	lddsp	r8,sp[0xc]
8000a59a:	58 08       	cp.w	r8,0
8000a59c:	c1 01       	brne	8000a5bc <_dtoa_r+0x880>
8000a59e:	40 29       	lddsp	r9,sp[0x8]
8000a5a0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000a5a4:	c0 c1       	brne	8000a5bc <_dtoa_r+0x880>
8000a5a6:	12 98       	mov	r8,r9
8000a5a8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a5ac:	c0 80       	breq	8000a5bc <_dtoa_r+0x880>
8000a5ae:	40 4c       	lddsp	r12,sp[0x10]
8000a5b0:	30 1b       	mov	r11,1
8000a5b2:	2f fc       	sub	r12,-1
8000a5b4:	2f f0       	sub	r0,-1
8000a5b6:	50 4c       	stdsp	sp[0x10],r12
8000a5b8:	50 6b       	stdsp	sp[0x18],r11
8000a5ba:	c0 38       	rjmp	8000a5c0 <_dtoa_r+0x884>
8000a5bc:	30 0a       	mov	r10,0
8000a5be:	50 6a       	stdsp	sp[0x18],r10
8000a5c0:	41 19       	lddsp	r9,sp[0x44]
8000a5c2:	58 09       	cp.w	r9,0
8000a5c4:	c0 31       	brne	8000a5ca <_dtoa_r+0x88e>
8000a5c6:	30 1c       	mov	r12,1
8000a5c8:	c0 98       	rjmp	8000a5da <_dtoa_r+0x89e>
8000a5ca:	64 48       	ld.w	r8,r2[0x10]
8000a5cc:	2f c8       	sub	r8,-4
8000a5ce:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000a5d2:	e0 a0 08 11 	rcall	8000b5f4 <__hi0bits>
8000a5d6:	f8 0c 11 20 	rsub	r12,r12,32
8000a5da:	40 4b       	lddsp	r11,sp[0x10]
8000a5dc:	f8 0b 00 08 	add	r8,r12,r11
8000a5e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000a5e4:	c0 c0       	breq	8000a5fc <_dtoa_r+0x8c0>
8000a5e6:	f0 08 11 20 	rsub	r8,r8,32
8000a5ea:	58 48       	cp.w	r8,4
8000a5ec:	e0 8a 00 06 	brle	8000a5f8 <_dtoa_r+0x8bc>
8000a5f0:	20 48       	sub	r8,4
8000a5f2:	10 0b       	add	r11,r8
8000a5f4:	50 4b       	stdsp	sp[0x10],r11
8000a5f6:	c0 78       	rjmp	8000a604 <_dtoa_r+0x8c8>
8000a5f8:	58 48       	cp.w	r8,4
8000a5fa:	c0 70       	breq	8000a608 <_dtoa_r+0x8cc>
8000a5fc:	40 4a       	lddsp	r10,sp[0x10]
8000a5fe:	2e 48       	sub	r8,-28
8000a600:	10 0a       	add	r10,r8
8000a602:	50 4a       	stdsp	sp[0x10],r10
8000a604:	10 00       	add	r0,r8
8000a606:	10 05       	add	r5,r8
8000a608:	58 00       	cp.w	r0,0
8000a60a:	e0 8a 00 08 	brle	8000a61a <_dtoa_r+0x8de>
8000a60e:	06 9b       	mov	r11,r3
8000a610:	00 9a       	mov	r10,r0
8000a612:	0e 9c       	mov	r12,r7
8000a614:	e0 a0 09 8e 	rcall	8000b930 <__lshift>
8000a618:	18 93       	mov	r3,r12
8000a61a:	40 49       	lddsp	r9,sp[0x10]
8000a61c:	58 09       	cp.w	r9,0
8000a61e:	e0 8a 00 08 	brle	8000a62e <_dtoa_r+0x8f2>
8000a622:	04 9b       	mov	r11,r2
8000a624:	12 9a       	mov	r10,r9
8000a626:	0e 9c       	mov	r12,r7
8000a628:	e0 a0 09 84 	rcall	8000b930 <__lshift>
8000a62c:	18 92       	mov	r2,r12
8000a62e:	41 48       	lddsp	r8,sp[0x50]
8000a630:	58 08       	cp.w	r8,0
8000a632:	c1 b0       	breq	8000a668 <_dtoa_r+0x92c>
8000a634:	04 9b       	mov	r11,r2
8000a636:	06 9c       	mov	r12,r3
8000a638:	e0 a0 08 55 	rcall	8000b6e2 <__mcmp>
8000a63c:	c1 64       	brge	8000a668 <_dtoa_r+0x92c>
8000a63e:	06 9b       	mov	r11,r3
8000a640:	30 09       	mov	r9,0
8000a642:	30 aa       	mov	r10,10
8000a644:	0e 9c       	mov	r12,r7
8000a646:	e0 a0 0a 41 	rcall	8000bac8 <__multadd>
8000a64a:	20 16       	sub	r6,1
8000a64c:	18 93       	mov	r3,r12
8000a64e:	40 dc       	lddsp	r12,sp[0x34]
8000a650:	58 0c       	cp.w	r12,0
8000a652:	c0 31       	brne	8000a658 <_dtoa_r+0x91c>
8000a654:	40 91       	lddsp	r1,sp[0x24]
8000a656:	c0 98       	rjmp	8000a668 <_dtoa_r+0x92c>
8000a658:	08 9b       	mov	r11,r4
8000a65a:	40 91       	lddsp	r1,sp[0x24]
8000a65c:	30 09       	mov	r9,0
8000a65e:	30 aa       	mov	r10,10
8000a660:	0e 9c       	mov	r12,r7
8000a662:	e0 a0 0a 33 	rcall	8000bac8 <__multadd>
8000a666:	18 94       	mov	r4,r12
8000a668:	58 01       	cp.w	r1,0
8000a66a:	5f a9       	srle	r9
8000a66c:	40 cb       	lddsp	r11,sp[0x30]
8000a66e:	58 2b       	cp.w	r11,2
8000a670:	5f 98       	srgt	r8
8000a672:	f3 e8 00 08 	and	r8,r9,r8
8000a676:	c2 50       	breq	8000a6c0 <_dtoa_r+0x984>
8000a678:	58 01       	cp.w	r1,0
8000a67a:	c1 11       	brne	8000a69c <_dtoa_r+0x960>
8000a67c:	04 9b       	mov	r11,r2
8000a67e:	02 99       	mov	r9,r1
8000a680:	30 5a       	mov	r10,5
8000a682:	0e 9c       	mov	r12,r7
8000a684:	e0 a0 0a 22 	rcall	8000bac8 <__multadd>
8000a688:	18 92       	mov	r2,r12
8000a68a:	18 9b       	mov	r11,r12
8000a68c:	06 9c       	mov	r12,r3
8000a68e:	e0 a0 08 2a 	rcall	8000b6e2 <__mcmp>
8000a692:	e0 89 00 0f 	brgt	8000a6b0 <_dtoa_r+0x974>
8000a696:	c0 38       	rjmp	8000a69c <_dtoa_r+0x960>
8000a698:	30 02       	mov	r2,0
8000a69a:	04 94       	mov	r4,r2
8000a69c:	40 ea       	lddsp	r10,sp[0x38]
8000a69e:	30 09       	mov	r9,0
8000a6a0:	5c da       	com	r10
8000a6a2:	40 85       	lddsp	r5,sp[0x20]
8000a6a4:	50 6a       	stdsp	sp[0x18],r10
8000a6a6:	50 49       	stdsp	sp[0x10],r9
8000a6a8:	c0 f9       	rjmp	8000a8c6 <_dtoa_r+0xb8a>
8000a6aa:	08 92       	mov	r2,r4
8000a6ac:	40 66       	lddsp	r6,sp[0x18]
8000a6ae:	04 94       	mov	r4,r2
8000a6b0:	2f f6       	sub	r6,-1
8000a6b2:	50 66       	stdsp	sp[0x18],r6
8000a6b4:	33 18       	mov	r8,49
8000a6b6:	40 85       	lddsp	r5,sp[0x20]
8000a6b8:	0a c8       	st.b	r5++,r8
8000a6ba:	30 08       	mov	r8,0
8000a6bc:	50 48       	stdsp	sp[0x10],r8
8000a6be:	c0 49       	rjmp	8000a8c6 <_dtoa_r+0xb8a>
8000a6c0:	40 dc       	lddsp	r12,sp[0x34]
8000a6c2:	58 0c       	cp.w	r12,0
8000a6c4:	e0 80 00 b5 	breq	8000a82e <_dtoa_r+0xaf2>
8000a6c8:	58 05       	cp.w	r5,0
8000a6ca:	e0 8a 00 08 	brle	8000a6da <_dtoa_r+0x99e>
8000a6ce:	08 9b       	mov	r11,r4
8000a6d0:	0a 9a       	mov	r10,r5
8000a6d2:	0e 9c       	mov	r12,r7
8000a6d4:	e0 a0 09 2e 	rcall	8000b930 <__lshift>
8000a6d8:	18 94       	mov	r4,r12
8000a6da:	40 6b       	lddsp	r11,sp[0x18]
8000a6dc:	58 0b       	cp.w	r11,0
8000a6de:	c0 31       	brne	8000a6e4 <_dtoa_r+0x9a8>
8000a6e0:	08 9c       	mov	r12,r4
8000a6e2:	c1 38       	rjmp	8000a708 <_dtoa_r+0x9cc>
8000a6e4:	68 1b       	ld.w	r11,r4[0x4]
8000a6e6:	0e 9c       	mov	r12,r7
8000a6e8:	e0 a0 08 30 	rcall	8000b748 <_Balloc>
8000a6ec:	68 4a       	ld.w	r10,r4[0x10]
8000a6ee:	18 95       	mov	r5,r12
8000a6f0:	e8 cb ff f4 	sub	r11,r4,-12
8000a6f4:	2f ea       	sub	r10,-2
8000a6f6:	2f 4c       	sub	r12,-12
8000a6f8:	a3 6a       	lsl	r10,0x2
8000a6fa:	fe b0 e8 32 	rcall	8000775e <memcpy>
8000a6fe:	0a 9b       	mov	r11,r5
8000a700:	30 1a       	mov	r10,1
8000a702:	0e 9c       	mov	r12,r7
8000a704:	e0 a0 09 16 	rcall	8000b930 <__lshift>
8000a708:	50 44       	stdsp	sp[0x10],r4
8000a70a:	40 3a       	lddsp	r10,sp[0xc]
8000a70c:	30 19       	mov	r9,1
8000a70e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000a712:	18 94       	mov	r4,r12
8000a714:	50 da       	stdsp	sp[0x34],r10
8000a716:	40 85       	lddsp	r5,sp[0x20]
8000a718:	50 99       	stdsp	sp[0x24],r9
8000a71a:	50 26       	stdsp	sp[0x8],r6
8000a71c:	50 e1       	stdsp	sp[0x38],r1
8000a71e:	04 9b       	mov	r11,r2
8000a720:	06 9c       	mov	r12,r3
8000a722:	fe b0 fa 7d 	rcall	80009c1c <quorem>
8000a726:	40 4b       	lddsp	r11,sp[0x10]
8000a728:	f8 c0 ff d0 	sub	r0,r12,-48
8000a72c:	06 9c       	mov	r12,r3
8000a72e:	e0 a0 07 da 	rcall	8000b6e2 <__mcmp>
8000a732:	08 9a       	mov	r10,r4
8000a734:	50 6c       	stdsp	sp[0x18],r12
8000a736:	04 9b       	mov	r11,r2
8000a738:	0e 9c       	mov	r12,r7
8000a73a:	e0 a0 08 93 	rcall	8000b860 <__mdiff>
8000a73e:	18 91       	mov	r1,r12
8000a740:	78 38       	ld.w	r8,r12[0xc]
8000a742:	58 08       	cp.w	r8,0
8000a744:	c0 30       	breq	8000a74a <_dtoa_r+0xa0e>
8000a746:	30 16       	mov	r6,1
8000a748:	c0 68       	rjmp	8000a754 <_dtoa_r+0xa18>
8000a74a:	18 9b       	mov	r11,r12
8000a74c:	06 9c       	mov	r12,r3
8000a74e:	e0 a0 07 ca 	rcall	8000b6e2 <__mcmp>
8000a752:	18 96       	mov	r6,r12
8000a754:	0e 9c       	mov	r12,r7
8000a756:	02 9b       	mov	r11,r1
8000a758:	e0 a0 07 de 	rcall	8000b714 <_Bfree>
8000a75c:	40 cc       	lddsp	r12,sp[0x30]
8000a75e:	ed ec 10 08 	or	r8,r6,r12
8000a762:	c0 d1       	brne	8000a77c <_dtoa_r+0xa40>
8000a764:	40 db       	lddsp	r11,sp[0x34]
8000a766:	58 0b       	cp.w	r11,0
8000a768:	c0 a1       	brne	8000a77c <_dtoa_r+0xa40>
8000a76a:	40 26       	lddsp	r6,sp[0x8]
8000a76c:	e0 40 00 39 	cp.w	r0,57
8000a770:	c3 00       	breq	8000a7d0 <_dtoa_r+0xa94>
8000a772:	40 6a       	lddsp	r10,sp[0x18]
8000a774:	58 0a       	cp.w	r10,0
8000a776:	e0 89 00 24 	brgt	8000a7be <_dtoa_r+0xa82>
8000a77a:	c2 f8       	rjmp	8000a7d8 <_dtoa_r+0xa9c>
8000a77c:	40 69       	lddsp	r9,sp[0x18]
8000a77e:	58 09       	cp.w	r9,0
8000a780:	c0 85       	brlt	8000a790 <_dtoa_r+0xa54>
8000a782:	12 98       	mov	r8,r9
8000a784:	40 cc       	lddsp	r12,sp[0x30]
8000a786:	18 48       	or	r8,r12
8000a788:	c1 d1       	brne	8000a7c2 <_dtoa_r+0xa86>
8000a78a:	40 db       	lddsp	r11,sp[0x34]
8000a78c:	58 0b       	cp.w	r11,0
8000a78e:	c1 a1       	brne	8000a7c2 <_dtoa_r+0xa86>
8000a790:	0c 99       	mov	r9,r6
8000a792:	40 26       	lddsp	r6,sp[0x8]
8000a794:	58 09       	cp.w	r9,0
8000a796:	e0 8a 00 21 	brle	8000a7d8 <_dtoa_r+0xa9c>
8000a79a:	06 9b       	mov	r11,r3
8000a79c:	30 1a       	mov	r10,1
8000a79e:	0e 9c       	mov	r12,r7
8000a7a0:	e0 a0 08 c8 	rcall	8000b930 <__lshift>
8000a7a4:	04 9b       	mov	r11,r2
8000a7a6:	18 93       	mov	r3,r12
8000a7a8:	e0 a0 07 9d 	rcall	8000b6e2 <__mcmp>
8000a7ac:	e0 89 00 06 	brgt	8000a7b8 <_dtoa_r+0xa7c>
8000a7b0:	c1 41       	brne	8000a7d8 <_dtoa_r+0xa9c>
8000a7b2:	ed b0 00 00 	bld	r0,0x0
8000a7b6:	c1 11       	brne	8000a7d8 <_dtoa_r+0xa9c>
8000a7b8:	e0 40 00 39 	cp.w	r0,57
8000a7bc:	c0 a0       	breq	8000a7d0 <_dtoa_r+0xa94>
8000a7be:	2f f0       	sub	r0,-1
8000a7c0:	c0 c8       	rjmp	8000a7d8 <_dtoa_r+0xa9c>
8000a7c2:	58 06       	cp.w	r6,0
8000a7c4:	e0 8a 00 0c 	brle	8000a7dc <_dtoa_r+0xaa0>
8000a7c8:	40 26       	lddsp	r6,sp[0x8]
8000a7ca:	e0 40 00 39 	cp.w	r0,57
8000a7ce:	c0 41       	brne	8000a7d6 <_dtoa_r+0xa9a>
8000a7d0:	33 98       	mov	r8,57
8000a7d2:	0a c8       	st.b	r5++,r8
8000a7d4:	c6 78       	rjmp	8000a8a2 <_dtoa_r+0xb66>
8000a7d6:	2f f0       	sub	r0,-1
8000a7d8:	0a c0       	st.b	r5++,r0
8000a7da:	c7 58       	rjmp	8000a8c4 <_dtoa_r+0xb88>
8000a7dc:	0a c0       	st.b	r5++,r0
8000a7de:	40 9a       	lddsp	r10,sp[0x24]
8000a7e0:	40 e9       	lddsp	r9,sp[0x38]
8000a7e2:	12 3a       	cp.w	r10,r9
8000a7e4:	c4 30       	breq	8000a86a <_dtoa_r+0xb2e>
8000a7e6:	06 9b       	mov	r11,r3
8000a7e8:	30 09       	mov	r9,0
8000a7ea:	30 aa       	mov	r10,10
8000a7ec:	0e 9c       	mov	r12,r7
8000a7ee:	e0 a0 09 6d 	rcall	8000bac8 <__multadd>
8000a7f2:	40 48       	lddsp	r8,sp[0x10]
8000a7f4:	18 93       	mov	r3,r12
8000a7f6:	08 38       	cp.w	r8,r4
8000a7f8:	c0 91       	brne	8000a80a <_dtoa_r+0xace>
8000a7fa:	10 9b       	mov	r11,r8
8000a7fc:	30 09       	mov	r9,0
8000a7fe:	30 aa       	mov	r10,10
8000a800:	0e 9c       	mov	r12,r7
8000a802:	e0 a0 09 63 	rcall	8000bac8 <__multadd>
8000a806:	50 4c       	stdsp	sp[0x10],r12
8000a808:	c0 e8       	rjmp	8000a824 <_dtoa_r+0xae8>
8000a80a:	40 4b       	lddsp	r11,sp[0x10]
8000a80c:	30 09       	mov	r9,0
8000a80e:	30 aa       	mov	r10,10
8000a810:	0e 9c       	mov	r12,r7
8000a812:	e0 a0 09 5b 	rcall	8000bac8 <__multadd>
8000a816:	08 9b       	mov	r11,r4
8000a818:	50 4c       	stdsp	sp[0x10],r12
8000a81a:	30 09       	mov	r9,0
8000a81c:	30 aa       	mov	r10,10
8000a81e:	0e 9c       	mov	r12,r7
8000a820:	e0 a0 09 54 	rcall	8000bac8 <__multadd>
8000a824:	18 94       	mov	r4,r12
8000a826:	40 9c       	lddsp	r12,sp[0x24]
8000a828:	2f fc       	sub	r12,-1
8000a82a:	50 9c       	stdsp	sp[0x24],r12
8000a82c:	c7 9b       	rjmp	8000a71e <_dtoa_r+0x9e2>
8000a82e:	30 18       	mov	r8,1
8000a830:	06 90       	mov	r0,r3
8000a832:	40 85       	lddsp	r5,sp[0x20]
8000a834:	08 93       	mov	r3,r4
8000a836:	0c 94       	mov	r4,r6
8000a838:	10 96       	mov	r6,r8
8000a83a:	04 9b       	mov	r11,r2
8000a83c:	00 9c       	mov	r12,r0
8000a83e:	fe b0 f9 ef 	rcall	80009c1c <quorem>
8000a842:	2d 0c       	sub	r12,-48
8000a844:	0a cc       	st.b	r5++,r12
8000a846:	02 36       	cp.w	r6,r1
8000a848:	c0 a4       	brge	8000a85c <_dtoa_r+0xb20>
8000a84a:	00 9b       	mov	r11,r0
8000a84c:	30 09       	mov	r9,0
8000a84e:	30 aa       	mov	r10,10
8000a850:	0e 9c       	mov	r12,r7
8000a852:	2f f6       	sub	r6,-1
8000a854:	e0 a0 09 3a 	rcall	8000bac8 <__multadd>
8000a858:	18 90       	mov	r0,r12
8000a85a:	cf 0b       	rjmp	8000a83a <_dtoa_r+0xafe>
8000a85c:	08 96       	mov	r6,r4
8000a85e:	30 0b       	mov	r11,0
8000a860:	06 94       	mov	r4,r3
8000a862:	50 4b       	stdsp	sp[0x10],r11
8000a864:	00 93       	mov	r3,r0
8000a866:	18 90       	mov	r0,r12
8000a868:	c0 28       	rjmp	8000a86c <_dtoa_r+0xb30>
8000a86a:	40 26       	lddsp	r6,sp[0x8]
8000a86c:	06 9b       	mov	r11,r3
8000a86e:	30 1a       	mov	r10,1
8000a870:	0e 9c       	mov	r12,r7
8000a872:	e0 a0 08 5f 	rcall	8000b930 <__lshift>
8000a876:	04 9b       	mov	r11,r2
8000a878:	18 93       	mov	r3,r12
8000a87a:	e0 a0 07 34 	rcall	8000b6e2 <__mcmp>
8000a87e:	e0 89 00 12 	brgt	8000a8a2 <_dtoa_r+0xb66>
8000a882:	c1 b1       	brne	8000a8b8 <_dtoa_r+0xb7c>
8000a884:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000a888:	c0 d1       	brne	8000a8a2 <_dtoa_r+0xb66>
8000a88a:	c1 78       	rjmp	8000a8b8 <_dtoa_r+0xb7c>
8000a88c:	40 89       	lddsp	r9,sp[0x20]
8000a88e:	12 38       	cp.w	r8,r9
8000a890:	c0 30       	breq	8000a896 <_dtoa_r+0xb5a>
8000a892:	10 95       	mov	r5,r8
8000a894:	c0 88       	rjmp	8000a8a4 <_dtoa_r+0xb68>
8000a896:	2f f6       	sub	r6,-1
8000a898:	50 66       	stdsp	sp[0x18],r6
8000a89a:	33 18       	mov	r8,49
8000a89c:	40 8c       	lddsp	r12,sp[0x20]
8000a89e:	b8 88       	st.b	r12[0x0],r8
8000a8a0:	c1 38       	rjmp	8000a8c6 <_dtoa_r+0xb8a>
8000a8a2:	33 9a       	mov	r10,57
8000a8a4:	0a 98       	mov	r8,r5
8000a8a6:	11 79       	ld.ub	r9,--r8
8000a8a8:	f4 09 18 00 	cp.b	r9,r10
8000a8ac:	cf 00       	breq	8000a88c <_dtoa_r+0xb50>
8000a8ae:	2f f9       	sub	r9,-1
8000a8b0:	b0 89       	st.b	r8[0x0],r9
8000a8b2:	c0 98       	rjmp	8000a8c4 <_dtoa_r+0xb88>
8000a8b4:	10 95       	mov	r5,r8
8000a8b6:	c0 28       	rjmp	8000a8ba <_dtoa_r+0xb7e>
8000a8b8:	33 09       	mov	r9,48
8000a8ba:	0a 98       	mov	r8,r5
8000a8bc:	11 7a       	ld.ub	r10,--r8
8000a8be:	f2 0a 18 00 	cp.b	r10,r9
8000a8c2:	cf 90       	breq	8000a8b4 <_dtoa_r+0xb78>
8000a8c4:	50 66       	stdsp	sp[0x18],r6
8000a8c6:	04 9b       	mov	r11,r2
8000a8c8:	0e 9c       	mov	r12,r7
8000a8ca:	e0 a0 07 25 	rcall	8000b714 <_Bfree>
8000a8ce:	58 04       	cp.w	r4,0
8000a8d0:	c1 20       	breq	8000a8f4 <_dtoa_r+0xbb8>
8000a8d2:	40 4b       	lddsp	r11,sp[0x10]
8000a8d4:	08 3b       	cp.w	r11,r4
8000a8d6:	5f 19       	srne	r9
8000a8d8:	58 0b       	cp.w	r11,0
8000a8da:	5f 18       	srne	r8
8000a8dc:	f3 e8 00 08 	and	r8,r9,r8
8000a8e0:	c0 40       	breq	8000a8e8 <_dtoa_r+0xbac>
8000a8e2:	0e 9c       	mov	r12,r7
8000a8e4:	e0 a0 07 18 	rcall	8000b714 <_Bfree>
8000a8e8:	08 9b       	mov	r11,r4
8000a8ea:	0e 9c       	mov	r12,r7
8000a8ec:	e0 a0 07 14 	rcall	8000b714 <_Bfree>
8000a8f0:	c0 28       	rjmp	8000a8f4 <_dtoa_r+0xbb8>
8000a8f2:	50 66       	stdsp	sp[0x18],r6
8000a8f4:	0e 9c       	mov	r12,r7
8000a8f6:	06 9b       	mov	r11,r3
8000a8f8:	e0 a0 07 0e 	rcall	8000b714 <_Bfree>
8000a8fc:	30 08       	mov	r8,0
8000a8fe:	aa 88       	st.b	r5[0x0],r8
8000a900:	40 68       	lddsp	r8,sp[0x18]
8000a902:	41 5a       	lddsp	r10,sp[0x54]
8000a904:	2f f8       	sub	r8,-1
8000a906:	41 29       	lddsp	r9,sp[0x48]
8000a908:	95 08       	st.w	r10[0x0],r8
8000a90a:	40 8c       	lddsp	r12,sp[0x20]
8000a90c:	58 09       	cp.w	r9,0
8000a90e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000a912:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000a916:	2e 6d       	sub	sp,-104
8000a918:	d8 32       	popm	r0-r7,pc
8000a91a:	d7 03       	nop

8000a91c <_fflush_r>:
8000a91c:	d4 21       	pushm	r4-r7,lr
8000a91e:	16 97       	mov	r7,r11
8000a920:	18 96       	mov	r6,r12
8000a922:	76 48       	ld.w	r8,r11[0x10]
8000a924:	58 08       	cp.w	r8,0
8000a926:	c7 c0       	breq	8000aa1e <_fflush_r+0x102>
8000a928:	58 0c       	cp.w	r12,0
8000a92a:	c0 50       	breq	8000a934 <_fflush_r+0x18>
8000a92c:	78 68       	ld.w	r8,r12[0x18]
8000a92e:	58 08       	cp.w	r8,0
8000a930:	c0 21       	brne	8000a934 <_fflush_r+0x18>
8000a932:	cd 1c       	rcall	8000aad4 <__sinit>
8000a934:	4b b8       	lddpc	r8,8000aa20 <_fflush_r+0x104>
8000a936:	10 37       	cp.w	r7,r8
8000a938:	c0 31       	brne	8000a93e <_fflush_r+0x22>
8000a93a:	6c 07       	ld.w	r7,r6[0x0]
8000a93c:	c0 a8       	rjmp	8000a950 <_fflush_r+0x34>
8000a93e:	4b a8       	lddpc	r8,8000aa24 <_fflush_r+0x108>
8000a940:	10 37       	cp.w	r7,r8
8000a942:	c0 31       	brne	8000a948 <_fflush_r+0x2c>
8000a944:	6c 17       	ld.w	r7,r6[0x4]
8000a946:	c0 58       	rjmp	8000a950 <_fflush_r+0x34>
8000a948:	4b 88       	lddpc	r8,8000aa28 <_fflush_r+0x10c>
8000a94a:	10 37       	cp.w	r7,r8
8000a94c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a950:	8e 6a       	ld.sh	r10,r7[0xc]
8000a952:	14 98       	mov	r8,r10
8000a954:	ed ba 00 03 	bld	r10,0x3
8000a958:	c4 20       	breq	8000a9dc <_fflush_r+0xc0>
8000a95a:	ab ba       	sbr	r10,0xb
8000a95c:	ae 6a       	st.h	r7[0xc],r10
8000a95e:	6e 18       	ld.w	r8,r7[0x4]
8000a960:	58 08       	cp.w	r8,0
8000a962:	e0 89 00 06 	brgt	8000a96e <_fflush_r+0x52>
8000a966:	6f 08       	ld.w	r8,r7[0x40]
8000a968:	58 08       	cp.w	r8,0
8000a96a:	e0 8a 00 5a 	brle	8000aa1e <_fflush_r+0x102>
8000a96e:	6e b8       	ld.w	r8,r7[0x2c]
8000a970:	58 08       	cp.w	r8,0
8000a972:	c5 60       	breq	8000aa1e <_fflush_r+0x102>
8000a974:	e2 1a 10 00 	andl	r10,0x1000,COH
8000a978:	c0 30       	breq	8000a97e <_fflush_r+0x62>
8000a97a:	6f 55       	ld.w	r5,r7[0x54]
8000a97c:	c0 f8       	rjmp	8000a99a <_fflush_r+0x7e>
8000a97e:	30 19       	mov	r9,1
8000a980:	6e 8b       	ld.w	r11,r7[0x20]
8000a982:	0c 9c       	mov	r12,r6
8000a984:	5d 18       	icall	r8
8000a986:	18 95       	mov	r5,r12
8000a988:	5b fc       	cp.w	r12,-1
8000a98a:	c0 81       	brne	8000a99a <_fflush_r+0x7e>
8000a98c:	6c 38       	ld.w	r8,r6[0xc]
8000a98e:	59 d8       	cp.w	r8,29
8000a990:	c4 70       	breq	8000aa1e <_fflush_r+0x102>
8000a992:	8e 68       	ld.sh	r8,r7[0xc]
8000a994:	a7 a8       	sbr	r8,0x6
8000a996:	ae 68       	st.h	r7[0xc],r8
8000a998:	d8 22       	popm	r4-r7,pc
8000a99a:	8e 68       	ld.sh	r8,r7[0xc]
8000a99c:	ed b8 00 02 	bld	r8,0x2
8000a9a0:	c0 91       	brne	8000a9b2 <_fflush_r+0x96>
8000a9a2:	6e 18       	ld.w	r8,r7[0x4]
8000a9a4:	10 15       	sub	r5,r8
8000a9a6:	6e d8       	ld.w	r8,r7[0x34]
8000a9a8:	58 08       	cp.w	r8,0
8000a9aa:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000a9ae:	eb d8 e1 15 	subne	r5,r5,r8
8000a9b2:	6e b8       	ld.w	r8,r7[0x2c]
8000a9b4:	0c 9c       	mov	r12,r6
8000a9b6:	30 09       	mov	r9,0
8000a9b8:	0a 9a       	mov	r10,r5
8000a9ba:	6e 8b       	ld.w	r11,r7[0x20]
8000a9bc:	5d 18       	icall	r8
8000a9be:	8e 68       	ld.sh	r8,r7[0xc]
8000a9c0:	0a 3c       	cp.w	r12,r5
8000a9c2:	c2 61       	brne	8000aa0e <_fflush_r+0xf2>
8000a9c4:	ab d8       	cbr	r8,0xb
8000a9c6:	30 0c       	mov	r12,0
8000a9c8:	6e 49       	ld.w	r9,r7[0x10]
8000a9ca:	ae 68       	st.h	r7[0xc],r8
8000a9cc:	8f 1c       	st.w	r7[0x4],r12
8000a9ce:	8f 09       	st.w	r7[0x0],r9
8000a9d0:	ed b8 00 0c 	bld	r8,0xc
8000a9d4:	c2 51       	brne	8000aa1e <_fflush_r+0x102>
8000a9d6:	ef 45 00 54 	st.w	r7[84],r5
8000a9da:	d8 22       	popm	r4-r7,pc
8000a9dc:	6e 45       	ld.w	r5,r7[0x10]
8000a9de:	58 05       	cp.w	r5,0
8000a9e0:	c1 f0       	breq	8000aa1e <_fflush_r+0x102>
8000a9e2:	6e 04       	ld.w	r4,r7[0x0]
8000a9e4:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000a9e8:	8f 05       	st.w	r7[0x0],r5
8000a9ea:	f9 b8 01 00 	movne	r8,0
8000a9ee:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000a9f2:	0a 14       	sub	r4,r5
8000a9f4:	8f 28       	st.w	r7[0x8],r8
8000a9f6:	c1 18       	rjmp	8000aa18 <_fflush_r+0xfc>
8000a9f8:	08 99       	mov	r9,r4
8000a9fa:	0a 9a       	mov	r10,r5
8000a9fc:	6e a8       	ld.w	r8,r7[0x28]
8000a9fe:	6e 8b       	ld.w	r11,r7[0x20]
8000aa00:	0c 9c       	mov	r12,r6
8000aa02:	5d 18       	icall	r8
8000aa04:	18 14       	sub	r4,r12
8000aa06:	58 0c       	cp.w	r12,0
8000aa08:	e0 89 00 07 	brgt	8000aa16 <_fflush_r+0xfa>
8000aa0c:	8e 68       	ld.sh	r8,r7[0xc]
8000aa0e:	a7 a8       	sbr	r8,0x6
8000aa10:	3f fc       	mov	r12,-1
8000aa12:	ae 68       	st.h	r7[0xc],r8
8000aa14:	d8 22       	popm	r4-r7,pc
8000aa16:	18 05       	add	r5,r12
8000aa18:	58 04       	cp.w	r4,0
8000aa1a:	fe 99 ff ef 	brgt	8000a9f8 <_fflush_r+0xdc>
8000aa1e:	d8 2a       	popm	r4-r7,pc,r12=0
8000aa20:	80 00       	ld.sh	r0,r0[0x0]
8000aa22:	e0 04       	*unknown*
8000aa24:	80 00       	ld.sh	r0,r0[0x0]
8000aa26:	e0 24 80 00 	sub	r4,32768
8000aa2a:	e0 44 5e fc 	cp.w	r4,24316

8000aa2c <__sfp_lock_acquire>:
8000aa2c:	5e fc       	retal	r12

8000aa2e <__sfp_lock_release>:
8000aa2e:	5e fc       	retal	r12

8000aa30 <_cleanup_r>:
8000aa30:	d4 01       	pushm	lr
8000aa32:	fe cb e8 22 	sub	r11,pc,-6110
8000aa36:	e0 a0 03 05 	rcall	8000b040 <_fwalk>
8000aa3a:	d8 02       	popm	pc

8000aa3c <__sfmoreglue>:
8000aa3c:	d4 21       	pushm	r4-r7,lr
8000aa3e:	16 95       	mov	r5,r11
8000aa40:	f6 06 10 5c 	mul	r6,r11,92
8000aa44:	ec cb ff f4 	sub	r11,r6,-12
8000aa48:	e0 a0 03 90 	rcall	8000b168 <_malloc_r>
8000aa4c:	18 97       	mov	r7,r12
8000aa4e:	c0 90       	breq	8000aa60 <__sfmoreglue+0x24>
8000aa50:	99 15       	st.w	r12[0x4],r5
8000aa52:	30 0b       	mov	r11,0
8000aa54:	2f 4c       	sub	r12,-12
8000aa56:	0c 9a       	mov	r10,r6
8000aa58:	8f 2c       	st.w	r7[0x8],r12
8000aa5a:	8f 0b       	st.w	r7[0x0],r11
8000aa5c:	fe b0 e7 25 	rcall	800078a6 <memset>
8000aa60:	0e 9c       	mov	r12,r7
8000aa62:	d8 22       	popm	r4-r7,pc

8000aa64 <__sfp>:
8000aa64:	d4 21       	pushm	r4-r7,lr
8000aa66:	49 b8       	lddpc	r8,8000aad0 <__sfp+0x6c>
8000aa68:	18 96       	mov	r6,r12
8000aa6a:	70 07       	ld.w	r7,r8[0x0]
8000aa6c:	6e 68       	ld.w	r8,r7[0x18]
8000aa6e:	58 08       	cp.w	r8,0
8000aa70:	c0 31       	brne	8000aa76 <__sfp+0x12>
8000aa72:	0e 9c       	mov	r12,r7
8000aa74:	c3 0c       	rcall	8000aad4 <__sinit>
8000aa76:	ee c7 ff 28 	sub	r7,r7,-216
8000aa7a:	30 05       	mov	r5,0
8000aa7c:	6e 2c       	ld.w	r12,r7[0x8]
8000aa7e:	6e 18       	ld.w	r8,r7[0x4]
8000aa80:	c0 68       	rjmp	8000aa8c <__sfp+0x28>
8000aa82:	98 69       	ld.sh	r9,r12[0xc]
8000aa84:	ea 09 19 00 	cp.h	r9,r5
8000aa88:	c1 10       	breq	8000aaaa <__sfp+0x46>
8000aa8a:	2a 4c       	sub	r12,-92
8000aa8c:	20 18       	sub	r8,1
8000aa8e:	cf a7       	brpl	8000aa82 <__sfp+0x1e>
8000aa90:	6e 08       	ld.w	r8,r7[0x0]
8000aa92:	58 08       	cp.w	r8,0
8000aa94:	c0 61       	brne	8000aaa0 <__sfp+0x3c>
8000aa96:	30 4b       	mov	r11,4
8000aa98:	0c 9c       	mov	r12,r6
8000aa9a:	cd 1f       	rcall	8000aa3c <__sfmoreglue>
8000aa9c:	8f 0c       	st.w	r7[0x0],r12
8000aa9e:	c0 30       	breq	8000aaa4 <__sfp+0x40>
8000aaa0:	6e 07       	ld.w	r7,r7[0x0]
8000aaa2:	ce db       	rjmp	8000aa7c <__sfp+0x18>
8000aaa4:	30 c8       	mov	r8,12
8000aaa6:	8d 38       	st.w	r6[0xc],r8
8000aaa8:	d8 22       	popm	r4-r7,pc
8000aaaa:	30 08       	mov	r8,0
8000aaac:	f9 48 00 4c 	st.w	r12[76],r8
8000aab0:	99 08       	st.w	r12[0x0],r8
8000aab2:	99 28       	st.w	r12[0x8],r8
8000aab4:	99 18       	st.w	r12[0x4],r8
8000aab6:	99 48       	st.w	r12[0x10],r8
8000aab8:	99 58       	st.w	r12[0x14],r8
8000aaba:	99 68       	st.w	r12[0x18],r8
8000aabc:	99 d8       	st.w	r12[0x34],r8
8000aabe:	99 e8       	st.w	r12[0x38],r8
8000aac0:	f9 48 00 48 	st.w	r12[72],r8
8000aac4:	3f f8       	mov	r8,-1
8000aac6:	b8 78       	st.h	r12[0xe],r8
8000aac8:	30 18       	mov	r8,1
8000aaca:	b8 68       	st.h	r12[0xc],r8
8000aacc:	d8 22       	popm	r4-r7,pc
8000aace:	d7 03       	nop
8000aad0:	80 00       	ld.sh	r0,r0[0x0]
8000aad2:	e0 68 d4 21 	mov	r8,54305

8000aad4 <__sinit>:
8000aad4:	d4 21       	pushm	r4-r7,lr
8000aad6:	18 96       	mov	r6,r12
8000aad8:	78 67       	ld.w	r7,r12[0x18]
8000aada:	58 07       	cp.w	r7,0
8000aadc:	c4 91       	brne	8000ab6e <__sinit+0x9a>
8000aade:	fe c8 00 ae 	sub	r8,pc,174
8000aae2:	30 15       	mov	r5,1
8000aae4:	99 a8       	st.w	r12[0x28],r8
8000aae6:	f9 47 00 d8 	st.w	r12[216],r7
8000aaea:	f9 47 00 dc 	st.w	r12[220],r7
8000aaee:	f9 47 00 e0 	st.w	r12[224],r7
8000aaf2:	99 65       	st.w	r12[0x18],r5
8000aaf4:	cb 8f       	rcall	8000aa64 <__sfp>
8000aaf6:	8d 0c       	st.w	r6[0x0],r12
8000aaf8:	0c 9c       	mov	r12,r6
8000aafa:	cb 5f       	rcall	8000aa64 <__sfp>
8000aafc:	8d 1c       	st.w	r6[0x4],r12
8000aafe:	0c 9c       	mov	r12,r6
8000ab00:	cb 2f       	rcall	8000aa64 <__sfp>
8000ab02:	6c 09       	ld.w	r9,r6[0x0]
8000ab04:	30 48       	mov	r8,4
8000ab06:	93 07       	st.w	r9[0x0],r7
8000ab08:	b2 68       	st.h	r9[0xc],r8
8000ab0a:	93 17       	st.w	r9[0x4],r7
8000ab0c:	93 27       	st.w	r9[0x8],r7
8000ab0e:	6c 18       	ld.w	r8,r6[0x4]
8000ab10:	b2 77       	st.h	r9[0xe],r7
8000ab12:	93 47       	st.w	r9[0x10],r7
8000ab14:	93 57       	st.w	r9[0x14],r7
8000ab16:	93 67       	st.w	r9[0x18],r7
8000ab18:	93 89       	st.w	r9[0x20],r9
8000ab1a:	91 07       	st.w	r8[0x0],r7
8000ab1c:	91 17       	st.w	r8[0x4],r7
8000ab1e:	91 27       	st.w	r8[0x8],r7
8000ab20:	fe ce eb c4 	sub	lr,pc,-5180
8000ab24:	fe cb eb f4 	sub	r11,pc,-5132
8000ab28:	93 9e       	st.w	r9[0x24],lr
8000ab2a:	93 ab       	st.w	r9[0x28],r11
8000ab2c:	fe ca ec 24 	sub	r10,pc,-5084
8000ab30:	fe c4 ec 30 	sub	r4,pc,-5072
8000ab34:	93 ba       	st.w	r9[0x2c],r10
8000ab36:	93 c4       	st.w	r9[0x30],r4
8000ab38:	30 99       	mov	r9,9
8000ab3a:	b0 69       	st.h	r8[0xc],r9
8000ab3c:	b0 75       	st.h	r8[0xe],r5
8000ab3e:	91 c4       	st.w	r8[0x30],r4
8000ab40:	91 47       	st.w	r8[0x10],r7
8000ab42:	91 57       	st.w	r8[0x14],r7
8000ab44:	91 67       	st.w	r8[0x18],r7
8000ab46:	91 88       	st.w	r8[0x20],r8
8000ab48:	91 9e       	st.w	r8[0x24],lr
8000ab4a:	91 ab       	st.w	r8[0x28],r11
8000ab4c:	91 ba       	st.w	r8[0x2c],r10
8000ab4e:	8d 2c       	st.w	r6[0x8],r12
8000ab50:	31 28       	mov	r8,18
8000ab52:	99 07       	st.w	r12[0x0],r7
8000ab54:	b8 68       	st.h	r12[0xc],r8
8000ab56:	99 17       	st.w	r12[0x4],r7
8000ab58:	99 27       	st.w	r12[0x8],r7
8000ab5a:	30 28       	mov	r8,2
8000ab5c:	b8 78       	st.h	r12[0xe],r8
8000ab5e:	99 c4       	st.w	r12[0x30],r4
8000ab60:	99 67       	st.w	r12[0x18],r7
8000ab62:	99 9e       	st.w	r12[0x24],lr
8000ab64:	99 ab       	st.w	r12[0x28],r11
8000ab66:	99 ba       	st.w	r12[0x2c],r10
8000ab68:	99 47       	st.w	r12[0x10],r7
8000ab6a:	99 57       	st.w	r12[0x14],r7
8000ab6c:	99 8c       	st.w	r12[0x20],r12
8000ab6e:	d8 22       	popm	r4-r7,pc

8000ab70 <_malloc_trim_r>:
8000ab70:	d4 21       	pushm	r4-r7,lr
8000ab72:	16 95       	mov	r5,r11
8000ab74:	18 97       	mov	r7,r12
8000ab76:	e0 a0 05 3d 	rcall	8000b5f0 <__malloc_lock>
8000ab7a:	4a 24       	lddpc	r4,8000ac00 <_malloc_trim_r+0x90>
8000ab7c:	68 28       	ld.w	r8,r4[0x8]
8000ab7e:	70 16       	ld.w	r6,r8[0x4]
8000ab80:	e0 16 ff fc 	andl	r6,0xfffc
8000ab84:	ec c8 ff 91 	sub	r8,r6,-111
8000ab88:	f0 05 01 05 	sub	r5,r8,r5
8000ab8c:	e0 15 ff 80 	andl	r5,0xff80
8000ab90:	ea c5 00 80 	sub	r5,r5,128
8000ab94:	e0 45 00 7f 	cp.w	r5,127
8000ab98:	e0 8a 00 23 	brle	8000abde <_malloc_trim_r+0x6e>
8000ab9c:	30 0b       	mov	r11,0
8000ab9e:	0e 9c       	mov	r12,r7
8000aba0:	e0 a0 09 7c 	rcall	8000be98 <_sbrk_r>
8000aba4:	68 28       	ld.w	r8,r4[0x8]
8000aba6:	0c 08       	add	r8,r6
8000aba8:	10 3c       	cp.w	r12,r8
8000abaa:	c1 a1       	brne	8000abde <_malloc_trim_r+0x6e>
8000abac:	ea 0b 11 00 	rsub	r11,r5,0
8000abb0:	0e 9c       	mov	r12,r7
8000abb2:	e0 a0 09 73 	rcall	8000be98 <_sbrk_r>
8000abb6:	5b fc       	cp.w	r12,-1
8000abb8:	c1 71       	brne	8000abe6 <_malloc_trim_r+0x76>
8000abba:	30 0b       	mov	r11,0
8000abbc:	0e 9c       	mov	r12,r7
8000abbe:	e0 a0 09 6d 	rcall	8000be98 <_sbrk_r>
8000abc2:	68 28       	ld.w	r8,r4[0x8]
8000abc4:	f8 08 01 09 	sub	r9,r12,r8
8000abc8:	58 f9       	cp.w	r9,15
8000abca:	e0 8a 00 0a 	brle	8000abde <_malloc_trim_r+0x6e>
8000abce:	a1 a9       	sbr	r9,0x0
8000abd0:	91 19       	st.w	r8[0x4],r9
8000abd2:	48 d8       	lddpc	r8,8000ac04 <_malloc_trim_r+0x94>
8000abd4:	70 09       	ld.w	r9,r8[0x0]
8000abd6:	48 d8       	lddpc	r8,8000ac08 <_malloc_trim_r+0x98>
8000abd8:	f8 09 01 09 	sub	r9,r12,r9
8000abdc:	91 09       	st.w	r8[0x0],r9
8000abde:	0e 9c       	mov	r12,r7
8000abe0:	e0 a0 05 09 	rcall	8000b5f2 <__malloc_unlock>
8000abe4:	d8 2a       	popm	r4-r7,pc,r12=0
8000abe6:	68 28       	ld.w	r8,r4[0x8]
8000abe8:	0a 16       	sub	r6,r5
8000abea:	a1 a6       	sbr	r6,0x0
8000abec:	91 16       	st.w	r8[0x4],r6
8000abee:	48 78       	lddpc	r8,8000ac08 <_malloc_trim_r+0x98>
8000abf0:	70 09       	ld.w	r9,r8[0x0]
8000abf2:	0a 19       	sub	r9,r5
8000abf4:	0e 9c       	mov	r12,r7
8000abf6:	91 09       	st.w	r8[0x0],r9
8000abf8:	e0 a0 04 fd 	rcall	8000b5f2 <__malloc_unlock>
8000abfc:	da 2a       	popm	r4-r7,pc,r12=1
8000abfe:	d7 03       	nop
8000ac00:	00 00       	add	r0,r0
8000ac02:	01 04       	ld.w	r4,r0++
8000ac04:	00 00       	add	r0,r0
8000ac06:	05 10       	ld.sh	r0,r2++
8000ac08:	00 00       	add	r0,r0
8000ac0a:	07 30       	ld.ub	r0,r3++

8000ac0c <_free_r>:
8000ac0c:	d4 21       	pushm	r4-r7,lr
8000ac0e:	16 96       	mov	r6,r11
8000ac10:	18 97       	mov	r7,r12
8000ac12:	58 0b       	cp.w	r11,0
8000ac14:	e0 80 00 c2 	breq	8000ad98 <_free_r+0x18c>
8000ac18:	e0 a0 04 ec 	rcall	8000b5f0 <__malloc_lock>
8000ac1c:	20 86       	sub	r6,8
8000ac1e:	4c ca       	lddpc	r10,8000ad4c <_free_r+0x140>
8000ac20:	6c 18       	ld.w	r8,r6[0x4]
8000ac22:	74 2e       	ld.w	lr,r10[0x8]
8000ac24:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000ac28:	a1 c8       	cbr	r8,0x0
8000ac2a:	ec 08 00 09 	add	r9,r6,r8
8000ac2e:	72 1b       	ld.w	r11,r9[0x4]
8000ac30:	e0 1b ff fc 	andl	r11,0xfffc
8000ac34:	1c 39       	cp.w	r9,lr
8000ac36:	c1 c1       	brne	8000ac6e <_free_r+0x62>
8000ac38:	f6 08 00 08 	add	r8,r11,r8
8000ac3c:	58 0c       	cp.w	r12,0
8000ac3e:	c0 81       	brne	8000ac4e <_free_r+0x42>
8000ac40:	6c 09       	ld.w	r9,r6[0x0]
8000ac42:	12 16       	sub	r6,r9
8000ac44:	12 08       	add	r8,r9
8000ac46:	6c 3b       	ld.w	r11,r6[0xc]
8000ac48:	6c 29       	ld.w	r9,r6[0x8]
8000ac4a:	97 29       	st.w	r11[0x8],r9
8000ac4c:	93 3b       	st.w	r9[0xc],r11
8000ac4e:	10 99       	mov	r9,r8
8000ac50:	95 26       	st.w	r10[0x8],r6
8000ac52:	a1 a9       	sbr	r9,0x0
8000ac54:	8d 19       	st.w	r6[0x4],r9
8000ac56:	4b f9       	lddpc	r9,8000ad50 <_free_r+0x144>
8000ac58:	72 09       	ld.w	r9,r9[0x0]
8000ac5a:	12 38       	cp.w	r8,r9
8000ac5c:	c0 53       	brcs	8000ac66 <_free_r+0x5a>
8000ac5e:	4b e8       	lddpc	r8,8000ad54 <_free_r+0x148>
8000ac60:	0e 9c       	mov	r12,r7
8000ac62:	70 0b       	ld.w	r11,r8[0x0]
8000ac64:	c8 6f       	rcall	8000ab70 <_malloc_trim_r>
8000ac66:	0e 9c       	mov	r12,r7
8000ac68:	e0 a0 04 c5 	rcall	8000b5f2 <__malloc_unlock>
8000ac6c:	d8 22       	popm	r4-r7,pc
8000ac6e:	93 1b       	st.w	r9[0x4],r11
8000ac70:	58 0c       	cp.w	r12,0
8000ac72:	c0 30       	breq	8000ac78 <_free_r+0x6c>
8000ac74:	30 0c       	mov	r12,0
8000ac76:	c1 08       	rjmp	8000ac96 <_free_r+0x8a>
8000ac78:	6c 0e       	ld.w	lr,r6[0x0]
8000ac7a:	f4 c5 ff f8 	sub	r5,r10,-8
8000ac7e:	1c 16       	sub	r6,lr
8000ac80:	1c 08       	add	r8,lr
8000ac82:	6c 2e       	ld.w	lr,r6[0x8]
8000ac84:	0a 3e       	cp.w	lr,r5
8000ac86:	f9 bc 00 01 	moveq	r12,1
8000ac8a:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000ac8e:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000ac92:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000ac96:	f2 0b 00 0e 	add	lr,r9,r11
8000ac9a:	7c 1e       	ld.w	lr,lr[0x4]
8000ac9c:	ed be 00 00 	bld	lr,0x0
8000aca0:	c1 30       	breq	8000acc6 <_free_r+0xba>
8000aca2:	16 08       	add	r8,r11
8000aca4:	58 0c       	cp.w	r12,0
8000aca6:	c0 c1       	brne	8000acbe <_free_r+0xb2>
8000aca8:	4a 9e       	lddpc	lr,8000ad4c <_free_r+0x140>
8000acaa:	72 2b       	ld.w	r11,r9[0x8]
8000acac:	2f 8e       	sub	lr,-8
8000acae:	1c 3b       	cp.w	r11,lr
8000acb0:	c0 71       	brne	8000acbe <_free_r+0xb2>
8000acb2:	97 36       	st.w	r11[0xc],r6
8000acb4:	97 26       	st.w	r11[0x8],r6
8000acb6:	8d 2b       	st.w	r6[0x8],r11
8000acb8:	8d 3b       	st.w	r6[0xc],r11
8000acba:	30 1c       	mov	r12,1
8000acbc:	c0 58       	rjmp	8000acc6 <_free_r+0xba>
8000acbe:	72 2b       	ld.w	r11,r9[0x8]
8000acc0:	72 39       	ld.w	r9,r9[0xc]
8000acc2:	93 2b       	st.w	r9[0x8],r11
8000acc4:	97 39       	st.w	r11[0xc],r9
8000acc6:	10 99       	mov	r9,r8
8000acc8:	ec 08 09 08 	st.w	r6[r8],r8
8000accc:	a1 a9       	sbr	r9,0x0
8000acce:	8d 19       	st.w	r6[0x4],r9
8000acd0:	58 0c       	cp.w	r12,0
8000acd2:	c6 01       	brne	8000ad92 <_free_r+0x186>
8000acd4:	e0 48 01 ff 	cp.w	r8,511
8000acd8:	e0 8b 00 13 	brhi	8000acfe <_free_r+0xf2>
8000acdc:	a3 98       	lsr	r8,0x3
8000acde:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000ace2:	72 2b       	ld.w	r11,r9[0x8]
8000ace4:	8d 39       	st.w	r6[0xc],r9
8000ace6:	8d 2b       	st.w	r6[0x8],r11
8000ace8:	97 36       	st.w	r11[0xc],r6
8000acea:	93 26       	st.w	r9[0x8],r6
8000acec:	a3 48       	asr	r8,0x2
8000acee:	74 19       	ld.w	r9,r10[0x4]
8000acf0:	30 1b       	mov	r11,1
8000acf2:	f6 08 09 48 	lsl	r8,r11,r8
8000acf6:	f3 e8 10 08 	or	r8,r9,r8
8000acfa:	95 18       	st.w	r10[0x4],r8
8000acfc:	c4 b8       	rjmp	8000ad92 <_free_r+0x186>
8000acfe:	f0 09 16 09 	lsr	r9,r8,0x9
8000ad02:	58 49       	cp.w	r9,4
8000ad04:	e0 8b 00 06 	brhi	8000ad10 <_free_r+0x104>
8000ad08:	f0 0b 16 06 	lsr	r11,r8,0x6
8000ad0c:	2c 8b       	sub	r11,-56
8000ad0e:	c2 68       	rjmp	8000ad5a <_free_r+0x14e>
8000ad10:	59 49       	cp.w	r9,20
8000ad12:	e0 8b 00 05 	brhi	8000ad1c <_free_r+0x110>
8000ad16:	f2 cb ff a5 	sub	r11,r9,-91
8000ad1a:	c2 08       	rjmp	8000ad5a <_free_r+0x14e>
8000ad1c:	e0 49 00 54 	cp.w	r9,84
8000ad20:	e0 8b 00 06 	brhi	8000ad2c <_free_r+0x120>
8000ad24:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000ad28:	29 2b       	sub	r11,-110
8000ad2a:	c1 88       	rjmp	8000ad5a <_free_r+0x14e>
8000ad2c:	e0 49 01 54 	cp.w	r9,340
8000ad30:	e0 8b 00 06 	brhi	8000ad3c <_free_r+0x130>
8000ad34:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000ad38:	28 9b       	sub	r11,-119
8000ad3a:	c1 08       	rjmp	8000ad5a <_free_r+0x14e>
8000ad3c:	f0 0b 16 12 	lsr	r11,r8,0x12
8000ad40:	e0 49 05 54 	cp.w	r9,1364
8000ad44:	e0 88 00 0a 	brls	8000ad58 <_free_r+0x14c>
8000ad48:	37 eb       	mov	r11,126
8000ad4a:	c0 88       	rjmp	8000ad5a <_free_r+0x14e>
8000ad4c:	00 00       	add	r0,r0
8000ad4e:	01 04       	ld.w	r4,r0++
8000ad50:	00 00       	add	r0,r0
8000ad52:	05 0c       	ld.w	r12,r2++
8000ad54:	00 00       	add	r0,r0
8000ad56:	07 2c       	ld.uh	r12,r3++
8000ad58:	28 4b       	sub	r11,-124
8000ad5a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000ad5e:	78 29       	ld.w	r9,r12[0x8]
8000ad60:	18 39       	cp.w	r9,r12
8000ad62:	c0 e1       	brne	8000ad7e <_free_r+0x172>
8000ad64:	74 18       	ld.w	r8,r10[0x4]
8000ad66:	a3 4b       	asr	r11,0x2
8000ad68:	30 1c       	mov	r12,1
8000ad6a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000ad6e:	f1 eb 10 0b 	or	r11,r8,r11
8000ad72:	12 98       	mov	r8,r9
8000ad74:	95 1b       	st.w	r10[0x4],r11
8000ad76:	c0 a8       	rjmp	8000ad8a <_free_r+0x17e>
8000ad78:	72 29       	ld.w	r9,r9[0x8]
8000ad7a:	18 39       	cp.w	r9,r12
8000ad7c:	c0 60       	breq	8000ad88 <_free_r+0x17c>
8000ad7e:	72 1a       	ld.w	r10,r9[0x4]
8000ad80:	e0 1a ff fc 	andl	r10,0xfffc
8000ad84:	14 38       	cp.w	r8,r10
8000ad86:	cf 93       	brcs	8000ad78 <_free_r+0x16c>
8000ad88:	72 38       	ld.w	r8,r9[0xc]
8000ad8a:	8d 38       	st.w	r6[0xc],r8
8000ad8c:	8d 29       	st.w	r6[0x8],r9
8000ad8e:	93 36       	st.w	r9[0xc],r6
8000ad90:	91 26       	st.w	r8[0x8],r6
8000ad92:	0e 9c       	mov	r12,r7
8000ad94:	e0 a0 04 2f 	rcall	8000b5f2 <__malloc_unlock>
8000ad98:	d8 22       	popm	r4-r7,pc
8000ad9a:	d7 03       	nop

8000ad9c <__sfvwrite_r>:
8000ad9c:	d4 31       	pushm	r0-r7,lr
8000ad9e:	20 3d       	sub	sp,12
8000ada0:	14 94       	mov	r4,r10
8000ada2:	18 95       	mov	r5,r12
8000ada4:	16 97       	mov	r7,r11
8000ada6:	74 28       	ld.w	r8,r10[0x8]
8000ada8:	58 08       	cp.w	r8,0
8000adaa:	e0 80 01 48 	breq	8000b03a <__sfvwrite_r+0x29e>
8000adae:	96 68       	ld.sh	r8,r11[0xc]
8000adb0:	ed b8 00 03 	bld	r8,0x3
8000adb4:	c0 41       	brne	8000adbc <__sfvwrite_r+0x20>
8000adb6:	76 48       	ld.w	r8,r11[0x10]
8000adb8:	58 08       	cp.w	r8,0
8000adba:	c0 c1       	brne	8000add2 <__sfvwrite_r+0x36>
8000adbc:	0e 9b       	mov	r11,r7
8000adbe:	0a 9c       	mov	r12,r5
8000adc0:	fe b0 f6 c0 	rcall	80009b40 <__swsetup_r>
8000adc4:	c0 70       	breq	8000add2 <__sfvwrite_r+0x36>
8000adc6:	8e 68       	ld.sh	r8,r7[0xc]
8000adc8:	a7 a8       	sbr	r8,0x6
8000adca:	ae 68       	st.h	r7[0xc],r8
8000adcc:	30 98       	mov	r8,9
8000adce:	8b 38       	st.w	r5[0xc],r8
8000add0:	c3 39       	rjmp	8000b036 <__sfvwrite_r+0x29a>
8000add2:	8e 63       	ld.sh	r3,r7[0xc]
8000add4:	68 00       	ld.w	r0,r4[0x0]
8000add6:	06 96       	mov	r6,r3
8000add8:	e2 16 00 02 	andl	r6,0x2,COH
8000addc:	c2 10       	breq	8000ae1e <__sfvwrite_r+0x82>
8000adde:	30 03       	mov	r3,0
8000ade0:	e0 62 04 00 	mov	r2,1024
8000ade4:	06 96       	mov	r6,r3
8000ade6:	c0 48       	rjmp	8000adee <__sfvwrite_r+0x52>
8000ade8:	60 03       	ld.w	r3,r0[0x0]
8000adea:	60 16       	ld.w	r6,r0[0x4]
8000adec:	2f 80       	sub	r0,-8
8000adee:	58 06       	cp.w	r6,0
8000adf0:	cf c0       	breq	8000ade8 <__sfvwrite_r+0x4c>
8000adf2:	e0 46 04 00 	cp.w	r6,1024
8000adf6:	ec 09 17 80 	movls	r9,r6
8000adfa:	e4 09 17 b0 	movhi	r9,r2
8000adfe:	06 9a       	mov	r10,r3
8000ae00:	6e a8       	ld.w	r8,r7[0x28]
8000ae02:	6e 8b       	ld.w	r11,r7[0x20]
8000ae04:	0a 9c       	mov	r12,r5
8000ae06:	5d 18       	icall	r8
8000ae08:	18 16       	sub	r6,r12
8000ae0a:	58 0c       	cp.w	r12,0
8000ae0c:	e0 8a 01 12 	brle	8000b030 <__sfvwrite_r+0x294>
8000ae10:	68 28       	ld.w	r8,r4[0x8]
8000ae12:	18 18       	sub	r8,r12
8000ae14:	89 28       	st.w	r4[0x8],r8
8000ae16:	e0 80 01 12 	breq	8000b03a <__sfvwrite_r+0x29e>
8000ae1a:	18 03       	add	r3,r12
8000ae1c:	ce 9b       	rjmp	8000adee <__sfvwrite_r+0x52>
8000ae1e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ae22:	c0 70       	breq	8000ae30 <__sfvwrite_r+0x94>
8000ae24:	50 06       	stdsp	sp[0x0],r6
8000ae26:	0c 93       	mov	r3,r6
8000ae28:	0c 91       	mov	r1,r6
8000ae2a:	50 15       	stdsp	sp[0x4],r5
8000ae2c:	08 92       	mov	r2,r4
8000ae2e:	c9 e8       	rjmp	8000af6a <__sfvwrite_r+0x1ce>
8000ae30:	06 96       	mov	r6,r3
8000ae32:	08 91       	mov	r1,r4
8000ae34:	c0 48       	rjmp	8000ae3c <__sfvwrite_r+0xa0>
8000ae36:	60 03       	ld.w	r3,r0[0x0]
8000ae38:	60 16       	ld.w	r6,r0[0x4]
8000ae3a:	2f 80       	sub	r0,-8
8000ae3c:	58 06       	cp.w	r6,0
8000ae3e:	cf c0       	breq	8000ae36 <__sfvwrite_r+0x9a>
8000ae40:	8e 68       	ld.sh	r8,r7[0xc]
8000ae42:	6e 24       	ld.w	r4,r7[0x8]
8000ae44:	10 99       	mov	r9,r8
8000ae46:	e2 19 02 00 	andl	r9,0x200,COH
8000ae4a:	c5 50       	breq	8000aef4 <__sfvwrite_r+0x158>
8000ae4c:	08 36       	cp.w	r6,r4
8000ae4e:	c4 33       	brcs	8000aed4 <__sfvwrite_r+0x138>
8000ae50:	10 99       	mov	r9,r8
8000ae52:	e2 19 04 80 	andl	r9,0x480,COH
8000ae56:	c3 f0       	breq	8000aed4 <__sfvwrite_r+0x138>
8000ae58:	6e 4b       	ld.w	r11,r7[0x10]
8000ae5a:	6e 09       	ld.w	r9,r7[0x0]
8000ae5c:	16 19       	sub	r9,r11
8000ae5e:	50 09       	stdsp	sp[0x0],r9
8000ae60:	6e 59       	ld.w	r9,r7[0x14]
8000ae62:	10 9c       	mov	r12,r8
8000ae64:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000ae68:	30 28       	mov	r8,2
8000ae6a:	f4 08 0c 08 	divs	r8,r10,r8
8000ae6e:	fa e9 00 04 	st.d	sp[4],r8
8000ae72:	10 94       	mov	r4,r8
8000ae74:	40 09       	lddsp	r9,sp[0x0]
8000ae76:	e2 1c 04 00 	andl	r12,0x400,COH
8000ae7a:	2f f9       	sub	r9,-1
8000ae7c:	0c 09       	add	r9,r6
8000ae7e:	12 38       	cp.w	r8,r9
8000ae80:	f2 04 17 30 	movlo	r4,r9
8000ae84:	58 0c       	cp.w	r12,0
8000ae86:	c1 00       	breq	8000aea6 <__sfvwrite_r+0x10a>
8000ae88:	08 9b       	mov	r11,r4
8000ae8a:	0a 9c       	mov	r12,r5
8000ae8c:	c6 ed       	rcall	8000b168 <_malloc_r>
8000ae8e:	18 92       	mov	r2,r12
8000ae90:	c1 40       	breq	8000aeb8 <__sfvwrite_r+0x11c>
8000ae92:	40 0a       	lddsp	r10,sp[0x0]
8000ae94:	6e 4b       	ld.w	r11,r7[0x10]
8000ae96:	fe b0 e4 64 	rcall	8000775e <memcpy>
8000ae9a:	8e 68       	ld.sh	r8,r7[0xc]
8000ae9c:	e0 18 fb 7f 	andl	r8,0xfb7f
8000aea0:	a7 b8       	sbr	r8,0x7
8000aea2:	ae 68       	st.h	r7[0xc],r8
8000aea4:	c0 d8       	rjmp	8000aebe <__sfvwrite_r+0x122>
8000aea6:	08 9a       	mov	r10,r4
8000aea8:	0a 9c       	mov	r12,r5
8000aeaa:	e0 a0 06 95 	rcall	8000bbd4 <_realloc_r>
8000aeae:	18 92       	mov	r2,r12
8000aeb0:	c0 71       	brne	8000aebe <__sfvwrite_r+0x122>
8000aeb2:	6e 4b       	ld.w	r11,r7[0x10]
8000aeb4:	0a 9c       	mov	r12,r5
8000aeb6:	ca be       	rcall	8000ac0c <_free_r>
8000aeb8:	30 c8       	mov	r8,12
8000aeba:	8b 38       	st.w	r5[0xc],r8
8000aebc:	cb a8       	rjmp	8000b030 <__sfvwrite_r+0x294>
8000aebe:	40 0a       	lddsp	r10,sp[0x0]
8000aec0:	40 09       	lddsp	r9,sp[0x0]
8000aec2:	e8 0a 01 0a 	sub	r10,r4,r10
8000aec6:	e4 09 00 08 	add	r8,r2,r9
8000aeca:	8f 54       	st.w	r7[0x14],r4
8000aecc:	8f 2a       	st.w	r7[0x8],r10
8000aece:	8f 08       	st.w	r7[0x0],r8
8000aed0:	8f 42       	st.w	r7[0x10],r2
8000aed2:	0c 94       	mov	r4,r6
8000aed4:	08 36       	cp.w	r6,r4
8000aed6:	ec 04 17 30 	movlo	r4,r6
8000aeda:	06 9b       	mov	r11,r3
8000aedc:	08 9a       	mov	r10,r4
8000aede:	6e 0c       	ld.w	r12,r7[0x0]
8000aee0:	e0 a0 03 69 	rcall	8000b5b2 <memmove>
8000aee4:	6e 08       	ld.w	r8,r7[0x0]
8000aee6:	08 08       	add	r8,r4
8000aee8:	8f 08       	st.w	r7[0x0],r8
8000aeea:	6e 28       	ld.w	r8,r7[0x8]
8000aeec:	08 18       	sub	r8,r4
8000aeee:	0c 94       	mov	r4,r6
8000aef0:	8f 28       	st.w	r7[0x8],r8
8000aef2:	c3 08       	rjmp	8000af52 <__sfvwrite_r+0x1b6>
8000aef4:	08 36       	cp.w	r6,r4
8000aef6:	5f ba       	srhi	r10
8000aef8:	6e 0c       	ld.w	r12,r7[0x0]
8000aefa:	6e 48       	ld.w	r8,r7[0x10]
8000aefc:	10 3c       	cp.w	r12,r8
8000aefe:	5f b8       	srhi	r8
8000af00:	f5 e8 00 08 	and	r8,r10,r8
8000af04:	f2 08 18 00 	cp.b	r8,r9
8000af08:	c0 e0       	breq	8000af24 <__sfvwrite_r+0x188>
8000af0a:	06 9b       	mov	r11,r3
8000af0c:	08 9a       	mov	r10,r4
8000af0e:	e0 a0 03 52 	rcall	8000b5b2 <memmove>
8000af12:	6e 08       	ld.w	r8,r7[0x0]
8000af14:	08 08       	add	r8,r4
8000af16:	0e 9b       	mov	r11,r7
8000af18:	8f 08       	st.w	r7[0x0],r8
8000af1a:	0a 9c       	mov	r12,r5
8000af1c:	fe b0 fd 00 	rcall	8000a91c <_fflush_r>
8000af20:	c1 90       	breq	8000af52 <__sfvwrite_r+0x1b6>
8000af22:	c8 78       	rjmp	8000b030 <__sfvwrite_r+0x294>
8000af24:	6e 59       	ld.w	r9,r7[0x14]
8000af26:	12 36       	cp.w	r6,r9
8000af28:	c0 a3       	brcs	8000af3c <__sfvwrite_r+0x1a0>
8000af2a:	6e a8       	ld.w	r8,r7[0x28]
8000af2c:	06 9a       	mov	r10,r3
8000af2e:	6e 8b       	ld.w	r11,r7[0x20]
8000af30:	0a 9c       	mov	r12,r5
8000af32:	5d 18       	icall	r8
8000af34:	18 94       	mov	r4,r12
8000af36:	e0 89 00 0e 	brgt	8000af52 <__sfvwrite_r+0x1b6>
8000af3a:	c7 b8       	rjmp	8000b030 <__sfvwrite_r+0x294>
8000af3c:	0c 9a       	mov	r10,r6
8000af3e:	06 9b       	mov	r11,r3
8000af40:	e0 a0 03 39 	rcall	8000b5b2 <memmove>
8000af44:	6e 08       	ld.w	r8,r7[0x0]
8000af46:	0c 08       	add	r8,r6
8000af48:	0c 94       	mov	r4,r6
8000af4a:	8f 08       	st.w	r7[0x0],r8
8000af4c:	6e 28       	ld.w	r8,r7[0x8]
8000af4e:	0c 18       	sub	r8,r6
8000af50:	8f 28       	st.w	r7[0x8],r8
8000af52:	62 28       	ld.w	r8,r1[0x8]
8000af54:	08 18       	sub	r8,r4
8000af56:	83 28       	st.w	r1[0x8],r8
8000af58:	c7 10       	breq	8000b03a <__sfvwrite_r+0x29e>
8000af5a:	08 16       	sub	r6,r4
8000af5c:	08 03       	add	r3,r4
8000af5e:	c6 fb       	rjmp	8000ae3c <__sfvwrite_r+0xa0>
8000af60:	60 03       	ld.w	r3,r0[0x0]
8000af62:	60 11       	ld.w	r1,r0[0x4]
8000af64:	30 08       	mov	r8,0
8000af66:	2f 80       	sub	r0,-8
8000af68:	50 08       	stdsp	sp[0x0],r8
8000af6a:	58 01       	cp.w	r1,0
8000af6c:	cf a0       	breq	8000af60 <__sfvwrite_r+0x1c4>
8000af6e:	40 0a       	lddsp	r10,sp[0x0]
8000af70:	58 0a       	cp.w	r10,0
8000af72:	c1 81       	brne	8000afa2 <__sfvwrite_r+0x206>
8000af74:	02 9a       	mov	r10,r1
8000af76:	30 ab       	mov	r11,10
8000af78:	06 9c       	mov	r12,r3
8000af7a:	e0 a0 03 11 	rcall	8000b59c <memchr>
8000af7e:	f9 b8 01 01 	movne	r8,1
8000af82:	f9 d8 e1 06 	addne	r6,r12,r8
8000af86:	ed d3 e1 16 	subne	r6,r6,r3
8000af8a:	f9 b9 01 01 	movne	r9,1
8000af8e:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000af92:	f9 b8 00 01 	moveq	r8,1
8000af96:	e3 d8 e0 06 	addeq	r6,r1,r8
8000af9a:	f9 b8 00 01 	moveq	r8,1
8000af9e:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000afa2:	02 36       	cp.w	r6,r1
8000afa4:	ec 04 17 80 	movls	r4,r6
8000afa8:	e2 04 17 b0 	movhi	r4,r1
8000afac:	6e 59       	ld.w	r9,r7[0x14]
8000afae:	6e 25       	ld.w	r5,r7[0x8]
8000afb0:	f2 05 00 05 	add	r5,r9,r5
8000afb4:	0a 34       	cp.w	r4,r5
8000afb6:	5f 9a       	srgt	r10
8000afb8:	6e 0c       	ld.w	r12,r7[0x0]
8000afba:	6e 48       	ld.w	r8,r7[0x10]
8000afbc:	10 3c       	cp.w	r12,r8
8000afbe:	5f b8       	srhi	r8
8000afc0:	f5 e8 00 08 	and	r8,r10,r8
8000afc4:	30 0a       	mov	r10,0
8000afc6:	f4 08 18 00 	cp.b	r8,r10
8000afca:	c0 e0       	breq	8000afe6 <__sfvwrite_r+0x24a>
8000afcc:	06 9b       	mov	r11,r3
8000afce:	0a 9a       	mov	r10,r5
8000afd0:	e0 a0 02 f1 	rcall	8000b5b2 <memmove>
8000afd4:	6e 08       	ld.w	r8,r7[0x0]
8000afd6:	0a 08       	add	r8,r5
8000afd8:	0e 9b       	mov	r11,r7
8000afda:	8f 08       	st.w	r7[0x0],r8
8000afdc:	40 1c       	lddsp	r12,sp[0x4]
8000afde:	fe b0 fc 9f 	rcall	8000a91c <_fflush_r>
8000afe2:	c1 80       	breq	8000b012 <__sfvwrite_r+0x276>
8000afe4:	c2 68       	rjmp	8000b030 <__sfvwrite_r+0x294>
8000afe6:	12 34       	cp.w	r4,r9
8000afe8:	c0 a5       	brlt	8000affc <__sfvwrite_r+0x260>
8000afea:	6e a8       	ld.w	r8,r7[0x28]
8000afec:	06 9a       	mov	r10,r3
8000afee:	6e 8b       	ld.w	r11,r7[0x20]
8000aff0:	40 1c       	lddsp	r12,sp[0x4]
8000aff2:	5d 18       	icall	r8
8000aff4:	18 95       	mov	r5,r12
8000aff6:	e0 89 00 0e 	brgt	8000b012 <__sfvwrite_r+0x276>
8000affa:	c1 b8       	rjmp	8000b030 <__sfvwrite_r+0x294>
8000affc:	08 9a       	mov	r10,r4
8000affe:	06 9b       	mov	r11,r3
8000b000:	e0 a0 02 d9 	rcall	8000b5b2 <memmove>
8000b004:	6e 08       	ld.w	r8,r7[0x0]
8000b006:	08 08       	add	r8,r4
8000b008:	08 95       	mov	r5,r4
8000b00a:	8f 08       	st.w	r7[0x0],r8
8000b00c:	6e 28       	ld.w	r8,r7[0x8]
8000b00e:	08 18       	sub	r8,r4
8000b010:	8f 28       	st.w	r7[0x8],r8
8000b012:	0a 16       	sub	r6,r5
8000b014:	c0 71       	brne	8000b022 <__sfvwrite_r+0x286>
8000b016:	0e 9b       	mov	r11,r7
8000b018:	40 1c       	lddsp	r12,sp[0x4]
8000b01a:	fe b0 fc 81 	rcall	8000a91c <_fflush_r>
8000b01e:	c0 91       	brne	8000b030 <__sfvwrite_r+0x294>
8000b020:	50 06       	stdsp	sp[0x0],r6
8000b022:	64 28       	ld.w	r8,r2[0x8]
8000b024:	0a 18       	sub	r8,r5
8000b026:	85 28       	st.w	r2[0x8],r8
8000b028:	c0 90       	breq	8000b03a <__sfvwrite_r+0x29e>
8000b02a:	0a 11       	sub	r1,r5
8000b02c:	0a 03       	add	r3,r5
8000b02e:	c9 eb       	rjmp	8000af6a <__sfvwrite_r+0x1ce>
8000b030:	8e 68       	ld.sh	r8,r7[0xc]
8000b032:	a7 a8       	sbr	r8,0x6
8000b034:	ae 68       	st.h	r7[0xc],r8
8000b036:	3f fc       	mov	r12,-1
8000b038:	c0 28       	rjmp	8000b03c <__sfvwrite_r+0x2a0>
8000b03a:	30 0c       	mov	r12,0
8000b03c:	2f dd       	sub	sp,-12
8000b03e:	d8 32       	popm	r0-r7,pc

8000b040 <_fwalk>:
8000b040:	d4 31       	pushm	r0-r7,lr
8000b042:	30 05       	mov	r5,0
8000b044:	16 91       	mov	r1,r11
8000b046:	f8 c7 ff 28 	sub	r7,r12,-216
8000b04a:	0a 92       	mov	r2,r5
8000b04c:	fe b0 fc f0 	rcall	8000aa2c <__sfp_lock_acquire>
8000b050:	3f f3       	mov	r3,-1
8000b052:	c1 68       	rjmp	8000b07e <_fwalk+0x3e>
8000b054:	6e 26       	ld.w	r6,r7[0x8]
8000b056:	6e 14       	ld.w	r4,r7[0x4]
8000b058:	2f 46       	sub	r6,-12
8000b05a:	c0 c8       	rjmp	8000b072 <_fwalk+0x32>
8000b05c:	8c 08       	ld.sh	r8,r6[0x0]
8000b05e:	e4 08 19 00 	cp.h	r8,r2
8000b062:	c0 70       	breq	8000b070 <_fwalk+0x30>
8000b064:	8c 18       	ld.sh	r8,r6[0x2]
8000b066:	e6 08 19 00 	cp.h	r8,r3
8000b06a:	c0 30       	breq	8000b070 <_fwalk+0x30>
8000b06c:	5d 11       	icall	r1
8000b06e:	18 45       	or	r5,r12
8000b070:	2a 46       	sub	r6,-92
8000b072:	20 14       	sub	r4,1
8000b074:	ec cc 00 0c 	sub	r12,r6,12
8000b078:	58 04       	cp.w	r4,0
8000b07a:	cf 14       	brge	8000b05c <_fwalk+0x1c>
8000b07c:	6e 07       	ld.w	r7,r7[0x0]
8000b07e:	58 07       	cp.w	r7,0
8000b080:	ce a1       	brne	8000b054 <_fwalk+0x14>
8000b082:	fe b0 fc d6 	rcall	8000aa2e <__sfp_lock_release>
8000b086:	0a 9c       	mov	r12,r5
8000b088:	d8 32       	popm	r0-r7,pc
8000b08a:	d7 03       	nop

8000b08c <_localeconv_r>:
8000b08c:	48 1c       	lddpc	r12,8000b090 <_localeconv_r+0x4>
8000b08e:	5e fc       	retal	r12
8000b090:	80 00       	ld.sh	r0,r0[0x0]
8000b092:	e0 6c d4 21 	mov	r12,54305

8000b094 <__smakebuf_r>:
8000b094:	d4 21       	pushm	r4-r7,lr
8000b096:	20 fd       	sub	sp,60
8000b098:	96 68       	ld.sh	r8,r11[0xc]
8000b09a:	16 97       	mov	r7,r11
8000b09c:	18 96       	mov	r6,r12
8000b09e:	e2 18 00 02 	andl	r8,0x2,COH
8000b0a2:	c3 c1       	brne	8000b11a <__smakebuf_r+0x86>
8000b0a4:	96 7b       	ld.sh	r11,r11[0xe]
8000b0a6:	f0 0b 19 00 	cp.h	r11,r8
8000b0aa:	c0 55       	brlt	8000b0b4 <__smakebuf_r+0x20>
8000b0ac:	1a 9a       	mov	r10,sp
8000b0ae:	e0 a0 08 b9 	rcall	8000c220 <_fstat_r>
8000b0b2:	c0 f4       	brge	8000b0d0 <__smakebuf_r+0x3c>
8000b0b4:	8e 65       	ld.sh	r5,r7[0xc]
8000b0b6:	0a 98       	mov	r8,r5
8000b0b8:	ab b8       	sbr	r8,0xb
8000b0ba:	e2 15 00 80 	andl	r5,0x80,COH
8000b0be:	ae 68       	st.h	r7[0xc],r8
8000b0c0:	30 04       	mov	r4,0
8000b0c2:	e0 68 04 00 	mov	r8,1024
8000b0c6:	f9 b5 01 40 	movne	r5,64
8000b0ca:	f0 05 17 00 	moveq	r5,r8
8000b0ce:	c1 c8       	rjmp	8000b106 <__smakebuf_r+0x72>
8000b0d0:	40 18       	lddsp	r8,sp[0x4]
8000b0d2:	e2 18 f0 00 	andl	r8,0xf000,COH
8000b0d6:	e0 48 20 00 	cp.w	r8,8192
8000b0da:	5f 04       	sreq	r4
8000b0dc:	e0 48 80 00 	cp.w	r8,32768
8000b0e0:	c0 e1       	brne	8000b0fc <__smakebuf_r+0x68>
8000b0e2:	6e b9       	ld.w	r9,r7[0x2c]
8000b0e4:	fe c8 f1 dc 	sub	r8,pc,-3620
8000b0e8:	10 39       	cp.w	r9,r8
8000b0ea:	c0 91       	brne	8000b0fc <__smakebuf_r+0x68>
8000b0ec:	8e 68       	ld.sh	r8,r7[0xc]
8000b0ee:	e0 65 04 00 	mov	r5,1024
8000b0f2:	ab a8       	sbr	r8,0xa
8000b0f4:	ef 45 00 50 	st.w	r7[80],r5
8000b0f8:	ae 68       	st.h	r7[0xc],r8
8000b0fa:	c0 68       	rjmp	8000b106 <__smakebuf_r+0x72>
8000b0fc:	8e 68       	ld.sh	r8,r7[0xc]
8000b0fe:	e0 65 04 00 	mov	r5,1024
8000b102:	ab b8       	sbr	r8,0xb
8000b104:	ae 68       	st.h	r7[0xc],r8
8000b106:	0a 9b       	mov	r11,r5
8000b108:	0c 9c       	mov	r12,r6
8000b10a:	c2 fc       	rcall	8000b168 <_malloc_r>
8000b10c:	8e 68       	ld.sh	r8,r7[0xc]
8000b10e:	c0 d1       	brne	8000b128 <__smakebuf_r+0x94>
8000b110:	ed b8 00 09 	bld	r8,0x9
8000b114:	c1 f0       	breq	8000b152 <__smakebuf_r+0xbe>
8000b116:	a1 b8       	sbr	r8,0x1
8000b118:	ae 68       	st.h	r7[0xc],r8
8000b11a:	ee c8 ff b9 	sub	r8,r7,-71
8000b11e:	8f 48       	st.w	r7[0x10],r8
8000b120:	8f 08       	st.w	r7[0x0],r8
8000b122:	30 18       	mov	r8,1
8000b124:	8f 58       	st.w	r7[0x14],r8
8000b126:	c1 68       	rjmp	8000b152 <__smakebuf_r+0xbe>
8000b128:	a7 b8       	sbr	r8,0x7
8000b12a:	8f 4c       	st.w	r7[0x10],r12
8000b12c:	ae 68       	st.h	r7[0xc],r8
8000b12e:	8f 55       	st.w	r7[0x14],r5
8000b130:	fe c8 07 00 	sub	r8,pc,1792
8000b134:	8f 0c       	st.w	r7[0x0],r12
8000b136:	8d a8       	st.w	r6[0x28],r8
8000b138:	58 04       	cp.w	r4,0
8000b13a:	c0 c0       	breq	8000b152 <__smakebuf_r+0xbe>
8000b13c:	8e 7c       	ld.sh	r12,r7[0xe]
8000b13e:	e0 a0 07 59 	rcall	8000bff0 <isatty>
8000b142:	ef f8 12 06 	ld.shne	r8,r7[0xc]
8000b146:	f9 b9 01 01 	movne	r9,1
8000b14a:	f1 d9 e1 38 	orne	r8,r8,r9
8000b14e:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000b152:	2f 1d       	sub	sp,-60
8000b154:	d8 22       	popm	r4-r7,pc
8000b156:	d7 03       	nop

8000b158 <malloc>:
8000b158:	d4 01       	pushm	lr
8000b15a:	48 38       	lddpc	r8,8000b164 <malloc+0xc>
8000b15c:	18 9b       	mov	r11,r12
8000b15e:	70 0c       	ld.w	r12,r8[0x0]
8000b160:	c0 4c       	rcall	8000b168 <_malloc_r>
8000b162:	d8 02       	popm	pc
8000b164:	00 00       	add	r0,r0
8000b166:	01 00       	ld.w	r0,r0++

8000b168 <_malloc_r>:
8000b168:	d4 31       	pushm	r0-r7,lr
8000b16a:	f6 c7 ff f5 	sub	r7,r11,-11
8000b16e:	18 95       	mov	r5,r12
8000b170:	59 67       	cp.w	r7,22
8000b172:	f9 b7 08 10 	movls	r7,16
8000b176:	f9 b8 0b f8 	movhi	r8,-8
8000b17a:	ef d8 eb 27 	andhi	r7,r7,r8
8000b17e:	16 37       	cp.w	r7,r11
8000b180:	5f 38       	srlo	r8
8000b182:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000b186:	c0 50       	breq	8000b190 <_malloc_r+0x28>
8000b188:	30 c8       	mov	r8,12
8000b18a:	99 38       	st.w	r12[0xc],r8
8000b18c:	e0 8f 01 ef 	bral	8000b56a <_malloc_r+0x402>
8000b190:	e0 a0 02 30 	rcall	8000b5f0 <__malloc_lock>
8000b194:	e0 47 01 f7 	cp.w	r7,503
8000b198:	e0 8b 00 1c 	brhi	8000b1d0 <_malloc_r+0x68>
8000b19c:	ee 03 16 03 	lsr	r3,r7,0x3
8000b1a0:	4c c8       	lddpc	r8,8000b2d0 <_malloc_r+0x168>
8000b1a2:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000b1a6:	70 36       	ld.w	r6,r8[0xc]
8000b1a8:	10 36       	cp.w	r6,r8
8000b1aa:	c0 61       	brne	8000b1b6 <_malloc_r+0x4e>
8000b1ac:	ec c8 ff f8 	sub	r8,r6,-8
8000b1b0:	70 36       	ld.w	r6,r8[0xc]
8000b1b2:	10 36       	cp.w	r6,r8
8000b1b4:	c0 c0       	breq	8000b1cc <_malloc_r+0x64>
8000b1b6:	6c 18       	ld.w	r8,r6[0x4]
8000b1b8:	e0 18 ff fc 	andl	r8,0xfffc
8000b1bc:	6c 3a       	ld.w	r10,r6[0xc]
8000b1be:	ec 08 00 09 	add	r9,r6,r8
8000b1c2:	0a 9c       	mov	r12,r5
8000b1c4:	6c 28       	ld.w	r8,r6[0x8]
8000b1c6:	95 28       	st.w	r10[0x8],r8
8000b1c8:	91 3a       	st.w	r8[0xc],r10
8000b1ca:	c4 78       	rjmp	8000b258 <_malloc_r+0xf0>
8000b1cc:	2f e3       	sub	r3,-2
8000b1ce:	c4 d8       	rjmp	8000b268 <_malloc_r+0x100>
8000b1d0:	ee 08 16 09 	lsr	r8,r7,0x9
8000b1d4:	c0 41       	brne	8000b1dc <_malloc_r+0x74>
8000b1d6:	ee 03 16 03 	lsr	r3,r7,0x3
8000b1da:	c2 78       	rjmp	8000b228 <_malloc_r+0xc0>
8000b1dc:	58 48       	cp.w	r8,4
8000b1de:	e0 8b 00 06 	brhi	8000b1ea <_malloc_r+0x82>
8000b1e2:	ee 03 16 06 	lsr	r3,r7,0x6
8000b1e6:	2c 83       	sub	r3,-56
8000b1e8:	c2 08       	rjmp	8000b228 <_malloc_r+0xc0>
8000b1ea:	59 48       	cp.w	r8,20
8000b1ec:	e0 8b 00 05 	brhi	8000b1f6 <_malloc_r+0x8e>
8000b1f0:	f0 c3 ff a5 	sub	r3,r8,-91
8000b1f4:	c1 a8       	rjmp	8000b228 <_malloc_r+0xc0>
8000b1f6:	e0 48 00 54 	cp.w	r8,84
8000b1fa:	e0 8b 00 06 	brhi	8000b206 <_malloc_r+0x9e>
8000b1fe:	ee 03 16 0c 	lsr	r3,r7,0xc
8000b202:	29 23       	sub	r3,-110
8000b204:	c1 28       	rjmp	8000b228 <_malloc_r+0xc0>
8000b206:	e0 48 01 54 	cp.w	r8,340
8000b20a:	e0 8b 00 06 	brhi	8000b216 <_malloc_r+0xae>
8000b20e:	ee 03 16 0f 	lsr	r3,r7,0xf
8000b212:	28 93       	sub	r3,-119
8000b214:	c0 a8       	rjmp	8000b228 <_malloc_r+0xc0>
8000b216:	ee 03 16 12 	lsr	r3,r7,0x12
8000b21a:	e0 48 05 54 	cp.w	r8,1364
8000b21e:	e0 88 00 04 	brls	8000b226 <_malloc_r+0xbe>
8000b222:	37 e3       	mov	r3,126
8000b224:	c0 28       	rjmp	8000b228 <_malloc_r+0xc0>
8000b226:	28 43       	sub	r3,-124
8000b228:	4a aa       	lddpc	r10,8000b2d0 <_malloc_r+0x168>
8000b22a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000b22e:	74 36       	ld.w	r6,r10[0xc]
8000b230:	c1 98       	rjmp	8000b262 <_malloc_r+0xfa>
8000b232:	6c 19       	ld.w	r9,r6[0x4]
8000b234:	e0 19 ff fc 	andl	r9,0xfffc
8000b238:	f2 07 01 0b 	sub	r11,r9,r7
8000b23c:	58 fb       	cp.w	r11,15
8000b23e:	e0 8a 00 04 	brle	8000b246 <_malloc_r+0xde>
8000b242:	20 13       	sub	r3,1
8000b244:	c1 18       	rjmp	8000b266 <_malloc_r+0xfe>
8000b246:	6c 38       	ld.w	r8,r6[0xc]
8000b248:	58 0b       	cp.w	r11,0
8000b24a:	c0 b5       	brlt	8000b260 <_malloc_r+0xf8>
8000b24c:	6c 2a       	ld.w	r10,r6[0x8]
8000b24e:	ec 09 00 09 	add	r9,r6,r9
8000b252:	0a 9c       	mov	r12,r5
8000b254:	91 2a       	st.w	r8[0x8],r10
8000b256:	95 38       	st.w	r10[0xc],r8
8000b258:	72 18       	ld.w	r8,r9[0x4]
8000b25a:	a1 a8       	sbr	r8,0x0
8000b25c:	93 18       	st.w	r9[0x4],r8
8000b25e:	cb b8       	rjmp	8000b3d4 <_malloc_r+0x26c>
8000b260:	10 96       	mov	r6,r8
8000b262:	14 36       	cp.w	r6,r10
8000b264:	ce 71       	brne	8000b232 <_malloc_r+0xca>
8000b266:	2f f3       	sub	r3,-1
8000b268:	49 aa       	lddpc	r10,8000b2d0 <_malloc_r+0x168>
8000b26a:	f4 cc ff f8 	sub	r12,r10,-8
8000b26e:	78 26       	ld.w	r6,r12[0x8]
8000b270:	18 36       	cp.w	r6,r12
8000b272:	c6 d0       	breq	8000b34c <_malloc_r+0x1e4>
8000b274:	6c 19       	ld.w	r9,r6[0x4]
8000b276:	e0 19 ff fc 	andl	r9,0xfffc
8000b27a:	f2 07 01 08 	sub	r8,r9,r7
8000b27e:	58 f8       	cp.w	r8,15
8000b280:	e0 89 00 8f 	brgt	8000b39e <_malloc_r+0x236>
8000b284:	99 3c       	st.w	r12[0xc],r12
8000b286:	99 2c       	st.w	r12[0x8],r12
8000b288:	58 08       	cp.w	r8,0
8000b28a:	c0 55       	brlt	8000b294 <_malloc_r+0x12c>
8000b28c:	ec 09 00 09 	add	r9,r6,r9
8000b290:	0a 9c       	mov	r12,r5
8000b292:	ce 3b       	rjmp	8000b258 <_malloc_r+0xf0>
8000b294:	e0 49 01 ff 	cp.w	r9,511
8000b298:	e0 8b 00 13 	brhi	8000b2be <_malloc_r+0x156>
8000b29c:	a3 99       	lsr	r9,0x3
8000b29e:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000b2a2:	70 2b       	ld.w	r11,r8[0x8]
8000b2a4:	8d 38       	st.w	r6[0xc],r8
8000b2a6:	8d 2b       	st.w	r6[0x8],r11
8000b2a8:	97 36       	st.w	r11[0xc],r6
8000b2aa:	91 26       	st.w	r8[0x8],r6
8000b2ac:	a3 49       	asr	r9,0x2
8000b2ae:	74 18       	ld.w	r8,r10[0x4]
8000b2b0:	30 1b       	mov	r11,1
8000b2b2:	f6 09 09 49 	lsl	r9,r11,r9
8000b2b6:	f1 e9 10 09 	or	r9,r8,r9
8000b2ba:	95 19       	st.w	r10[0x4],r9
8000b2bc:	c4 88       	rjmp	8000b34c <_malloc_r+0x1e4>
8000b2be:	f2 08 16 09 	lsr	r8,r9,0x9
8000b2c2:	58 48       	cp.w	r8,4
8000b2c4:	e0 8b 00 08 	brhi	8000b2d4 <_malloc_r+0x16c>
8000b2c8:	f2 0a 16 06 	lsr	r10,r9,0x6
8000b2cc:	2c 8a       	sub	r10,-56
8000b2ce:	c2 28       	rjmp	8000b312 <_malloc_r+0x1aa>
8000b2d0:	00 00       	add	r0,r0
8000b2d2:	01 04       	ld.w	r4,r0++
8000b2d4:	59 48       	cp.w	r8,20
8000b2d6:	e0 8b 00 05 	brhi	8000b2e0 <_malloc_r+0x178>
8000b2da:	f0 ca ff a5 	sub	r10,r8,-91
8000b2de:	c1 a8       	rjmp	8000b312 <_malloc_r+0x1aa>
8000b2e0:	e0 48 00 54 	cp.w	r8,84
8000b2e4:	e0 8b 00 06 	brhi	8000b2f0 <_malloc_r+0x188>
8000b2e8:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000b2ec:	29 2a       	sub	r10,-110
8000b2ee:	c1 28       	rjmp	8000b312 <_malloc_r+0x1aa>
8000b2f0:	e0 48 01 54 	cp.w	r8,340
8000b2f4:	e0 8b 00 06 	brhi	8000b300 <_malloc_r+0x198>
8000b2f8:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000b2fc:	28 9a       	sub	r10,-119
8000b2fe:	c0 a8       	rjmp	8000b312 <_malloc_r+0x1aa>
8000b300:	f2 0a 16 12 	lsr	r10,r9,0x12
8000b304:	e0 48 05 54 	cp.w	r8,1364
8000b308:	e0 88 00 04 	brls	8000b310 <_malloc_r+0x1a8>
8000b30c:	37 ea       	mov	r10,126
8000b30e:	c0 28       	rjmp	8000b312 <_malloc_r+0x1aa>
8000b310:	28 4a       	sub	r10,-124
8000b312:	4c 8b       	lddpc	r11,8000b430 <_malloc_r+0x2c8>
8000b314:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000b318:	68 28       	ld.w	r8,r4[0x8]
8000b31a:	08 38       	cp.w	r8,r4
8000b31c:	c0 e1       	brne	8000b338 <_malloc_r+0x1d0>
8000b31e:	76 19       	ld.w	r9,r11[0x4]
8000b320:	a3 4a       	asr	r10,0x2
8000b322:	30 1e       	mov	lr,1
8000b324:	fc 0a 09 4a 	lsl	r10,lr,r10
8000b328:	f3 ea 10 0a 	or	r10,r9,r10
8000b32c:	10 99       	mov	r9,r8
8000b32e:	97 1a       	st.w	r11[0x4],r10
8000b330:	c0 a8       	rjmp	8000b344 <_malloc_r+0x1dc>
8000b332:	70 28       	ld.w	r8,r8[0x8]
8000b334:	08 38       	cp.w	r8,r4
8000b336:	c0 60       	breq	8000b342 <_malloc_r+0x1da>
8000b338:	70 1a       	ld.w	r10,r8[0x4]
8000b33a:	e0 1a ff fc 	andl	r10,0xfffc
8000b33e:	14 39       	cp.w	r9,r10
8000b340:	cf 93       	brcs	8000b332 <_malloc_r+0x1ca>
8000b342:	70 39       	ld.w	r9,r8[0xc]
8000b344:	8d 39       	st.w	r6[0xc],r9
8000b346:	8d 28       	st.w	r6[0x8],r8
8000b348:	91 36       	st.w	r8[0xc],r6
8000b34a:	93 26       	st.w	r9[0x8],r6
8000b34c:	e6 08 14 02 	asr	r8,r3,0x2
8000b350:	30 1b       	mov	r11,1
8000b352:	4b 84       	lddpc	r4,8000b430 <_malloc_r+0x2c8>
8000b354:	f6 08 09 4b 	lsl	r11,r11,r8
8000b358:	68 18       	ld.w	r8,r4[0x4]
8000b35a:	10 3b       	cp.w	r11,r8
8000b35c:	e0 8b 00 6c 	brhi	8000b434 <_malloc_r+0x2cc>
8000b360:	f7 e8 00 09 	and	r9,r11,r8
8000b364:	c0 b1       	brne	8000b37a <_malloc_r+0x212>
8000b366:	e0 13 ff fc 	andl	r3,0xfffc
8000b36a:	a1 7b       	lsl	r11,0x1
8000b36c:	2f c3       	sub	r3,-4
8000b36e:	c0 38       	rjmp	8000b374 <_malloc_r+0x20c>
8000b370:	2f c3       	sub	r3,-4
8000b372:	a1 7b       	lsl	r11,0x1
8000b374:	f7 e8 00 09 	and	r9,r11,r8
8000b378:	cf c0       	breq	8000b370 <_malloc_r+0x208>
8000b37a:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000b37e:	06 92       	mov	r2,r3
8000b380:	1c 91       	mov	r1,lr
8000b382:	62 36       	ld.w	r6,r1[0xc]
8000b384:	c2 d8       	rjmp	8000b3de <_malloc_r+0x276>
8000b386:	6c 1a       	ld.w	r10,r6[0x4]
8000b388:	e0 1a ff fc 	andl	r10,0xfffc
8000b38c:	f4 07 01 08 	sub	r8,r10,r7
8000b390:	58 f8       	cp.w	r8,15
8000b392:	e0 8a 00 15 	brle	8000b3bc <_malloc_r+0x254>
8000b396:	6c 3a       	ld.w	r10,r6[0xc]
8000b398:	6c 29       	ld.w	r9,r6[0x8]
8000b39a:	95 29       	st.w	r10[0x8],r9
8000b39c:	93 3a       	st.w	r9[0xc],r10
8000b39e:	0e 99       	mov	r9,r7
8000b3a0:	ec 07 00 07 	add	r7,r6,r7
8000b3a4:	a1 a9       	sbr	r9,0x0
8000b3a6:	99 37       	st.w	r12[0xc],r7
8000b3a8:	99 27       	st.w	r12[0x8],r7
8000b3aa:	8d 19       	st.w	r6[0x4],r9
8000b3ac:	ee 08 09 08 	st.w	r7[r8],r8
8000b3b0:	8f 2c       	st.w	r7[0x8],r12
8000b3b2:	8f 3c       	st.w	r7[0xc],r12
8000b3b4:	a1 a8       	sbr	r8,0x0
8000b3b6:	0a 9c       	mov	r12,r5
8000b3b8:	8f 18       	st.w	r7[0x4],r8
8000b3ba:	c0 d8       	rjmp	8000b3d4 <_malloc_r+0x26c>
8000b3bc:	6c 39       	ld.w	r9,r6[0xc]
8000b3be:	58 08       	cp.w	r8,0
8000b3c0:	c0 e5       	brlt	8000b3dc <_malloc_r+0x274>
8000b3c2:	ec 0a 00 0a 	add	r10,r6,r10
8000b3c6:	74 18       	ld.w	r8,r10[0x4]
8000b3c8:	a1 a8       	sbr	r8,0x0
8000b3ca:	0a 9c       	mov	r12,r5
8000b3cc:	95 18       	st.w	r10[0x4],r8
8000b3ce:	6c 28       	ld.w	r8,r6[0x8]
8000b3d0:	93 28       	st.w	r9[0x8],r8
8000b3d2:	91 39       	st.w	r8[0xc],r9
8000b3d4:	c0 fd       	rcall	8000b5f2 <__malloc_unlock>
8000b3d6:	ec cc ff f8 	sub	r12,r6,-8
8000b3da:	d8 32       	popm	r0-r7,pc
8000b3dc:	12 96       	mov	r6,r9
8000b3de:	02 36       	cp.w	r6,r1
8000b3e0:	cd 31       	brne	8000b386 <_malloc_r+0x21e>
8000b3e2:	2f f2       	sub	r2,-1
8000b3e4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000b3e8:	c0 30       	breq	8000b3ee <_malloc_r+0x286>
8000b3ea:	2f 81       	sub	r1,-8
8000b3ec:	cc bb       	rjmp	8000b382 <_malloc_r+0x21a>
8000b3ee:	1c 98       	mov	r8,lr
8000b3f0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000b3f4:	c0 81       	brne	8000b404 <_malloc_r+0x29c>
8000b3f6:	68 19       	ld.w	r9,r4[0x4]
8000b3f8:	f6 08 11 ff 	rsub	r8,r11,-1
8000b3fc:	f3 e8 00 08 	and	r8,r9,r8
8000b400:	89 18       	st.w	r4[0x4],r8
8000b402:	c0 78       	rjmp	8000b410 <_malloc_r+0x2a8>
8000b404:	f0 c9 00 08 	sub	r9,r8,8
8000b408:	20 13       	sub	r3,1
8000b40a:	70 08       	ld.w	r8,r8[0x0]
8000b40c:	12 38       	cp.w	r8,r9
8000b40e:	cf 10       	breq	8000b3f0 <_malloc_r+0x288>
8000b410:	a1 7b       	lsl	r11,0x1
8000b412:	68 18       	ld.w	r8,r4[0x4]
8000b414:	10 3b       	cp.w	r11,r8
8000b416:	e0 8b 00 0f 	brhi	8000b434 <_malloc_r+0x2cc>
8000b41a:	58 0b       	cp.w	r11,0
8000b41c:	c0 c0       	breq	8000b434 <_malloc_r+0x2cc>
8000b41e:	04 93       	mov	r3,r2
8000b420:	c0 38       	rjmp	8000b426 <_malloc_r+0x2be>
8000b422:	2f c3       	sub	r3,-4
8000b424:	a1 7b       	lsl	r11,0x1
8000b426:	f7 e8 00 09 	and	r9,r11,r8
8000b42a:	ca 81       	brne	8000b37a <_malloc_r+0x212>
8000b42c:	cf bb       	rjmp	8000b422 <_malloc_r+0x2ba>
8000b42e:	d7 03       	nop
8000b430:	00 00       	add	r0,r0
8000b432:	01 04       	ld.w	r4,r0++
8000b434:	68 23       	ld.w	r3,r4[0x8]
8000b436:	66 12       	ld.w	r2,r3[0x4]
8000b438:	e0 12 ff fc 	andl	r2,0xfffc
8000b43c:	0e 32       	cp.w	r2,r7
8000b43e:	5f 39       	srlo	r9
8000b440:	e4 07 01 08 	sub	r8,r2,r7
8000b444:	58 f8       	cp.w	r8,15
8000b446:	5f aa       	srle	r10
8000b448:	f5 e9 10 09 	or	r9,r10,r9
8000b44c:	e0 80 00 9a 	breq	8000b580 <_malloc_r+0x418>
8000b450:	4c 78       	lddpc	r8,8000b56c <_malloc_r+0x404>
8000b452:	70 01       	ld.w	r1,r8[0x0]
8000b454:	4c 78       	lddpc	r8,8000b570 <_malloc_r+0x408>
8000b456:	2f 01       	sub	r1,-16
8000b458:	70 08       	ld.w	r8,r8[0x0]
8000b45a:	0e 01       	add	r1,r7
8000b45c:	5b f8       	cp.w	r8,-1
8000b45e:	c0 40       	breq	8000b466 <_malloc_r+0x2fe>
8000b460:	28 11       	sub	r1,-127
8000b462:	e0 11 ff 80 	andl	r1,0xff80
8000b466:	02 9b       	mov	r11,r1
8000b468:	0a 9c       	mov	r12,r5
8000b46a:	e0 a0 05 17 	rcall	8000be98 <_sbrk_r>
8000b46e:	18 96       	mov	r6,r12
8000b470:	5b fc       	cp.w	r12,-1
8000b472:	c6 e0       	breq	8000b54e <_malloc_r+0x3e6>
8000b474:	e6 02 00 08 	add	r8,r3,r2
8000b478:	10 3c       	cp.w	r12,r8
8000b47a:	c0 32       	brcc	8000b480 <_malloc_r+0x318>
8000b47c:	08 33       	cp.w	r3,r4
8000b47e:	c6 81       	brne	8000b54e <_malloc_r+0x3e6>
8000b480:	4b da       	lddpc	r10,8000b574 <_malloc_r+0x40c>
8000b482:	74 09       	ld.w	r9,r10[0x0]
8000b484:	e2 09 00 09 	add	r9,r1,r9
8000b488:	95 09       	st.w	r10[0x0],r9
8000b48a:	10 36       	cp.w	r6,r8
8000b48c:	c0 a1       	brne	8000b4a0 <_malloc_r+0x338>
8000b48e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000b492:	c0 71       	brne	8000b4a0 <_malloc_r+0x338>
8000b494:	e2 02 00 02 	add	r2,r1,r2
8000b498:	68 28       	ld.w	r8,r4[0x8]
8000b49a:	a1 a2       	sbr	r2,0x0
8000b49c:	91 12       	st.w	r8[0x4],r2
8000b49e:	c4 c8       	rjmp	8000b536 <_malloc_r+0x3ce>
8000b4a0:	4b 4a       	lddpc	r10,8000b570 <_malloc_r+0x408>
8000b4a2:	74 0b       	ld.w	r11,r10[0x0]
8000b4a4:	5b fb       	cp.w	r11,-1
8000b4a6:	c0 31       	brne	8000b4ac <_malloc_r+0x344>
8000b4a8:	95 06       	st.w	r10[0x0],r6
8000b4aa:	c0 68       	rjmp	8000b4b6 <_malloc_r+0x34e>
8000b4ac:	ec 09 00 09 	add	r9,r6,r9
8000b4b0:	4b 1a       	lddpc	r10,8000b574 <_malloc_r+0x40c>
8000b4b2:	10 19       	sub	r9,r8
8000b4b4:	95 09       	st.w	r10[0x0],r9
8000b4b6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000b4ba:	f0 09 11 08 	rsub	r9,r8,8
8000b4be:	58 08       	cp.w	r8,0
8000b4c0:	f2 08 17 10 	movne	r8,r9
8000b4c4:	ed d8 e1 06 	addne	r6,r6,r8
8000b4c8:	28 08       	sub	r8,-128
8000b4ca:	ec 01 00 01 	add	r1,r6,r1
8000b4ce:	0a 9c       	mov	r12,r5
8000b4d0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000b4d4:	f0 01 01 01 	sub	r1,r8,r1
8000b4d8:	02 9b       	mov	r11,r1
8000b4da:	e0 a0 04 df 	rcall	8000be98 <_sbrk_r>
8000b4de:	4a 68       	lddpc	r8,8000b574 <_malloc_r+0x40c>
8000b4e0:	5b fc       	cp.w	r12,-1
8000b4e2:	ec 0c 17 00 	moveq	r12,r6
8000b4e6:	f9 b1 00 00 	moveq	r1,0
8000b4ea:	70 09       	ld.w	r9,r8[0x0]
8000b4ec:	0c 1c       	sub	r12,r6
8000b4ee:	89 26       	st.w	r4[0x8],r6
8000b4f0:	02 0c       	add	r12,r1
8000b4f2:	12 01       	add	r1,r9
8000b4f4:	a1 ac       	sbr	r12,0x0
8000b4f6:	91 01       	st.w	r8[0x0],r1
8000b4f8:	8d 1c       	st.w	r6[0x4],r12
8000b4fa:	08 33       	cp.w	r3,r4
8000b4fc:	c1 d0       	breq	8000b536 <_malloc_r+0x3ce>
8000b4fe:	58 f2       	cp.w	r2,15
8000b500:	e0 8b 00 05 	brhi	8000b50a <_malloc_r+0x3a2>
8000b504:	30 18       	mov	r8,1
8000b506:	8d 18       	st.w	r6[0x4],r8
8000b508:	c2 38       	rjmp	8000b54e <_malloc_r+0x3e6>
8000b50a:	30 59       	mov	r9,5
8000b50c:	20 c2       	sub	r2,12
8000b50e:	e0 12 ff f8 	andl	r2,0xfff8
8000b512:	e6 02 00 08 	add	r8,r3,r2
8000b516:	91 29       	st.w	r8[0x8],r9
8000b518:	91 19       	st.w	r8[0x4],r9
8000b51a:	66 18       	ld.w	r8,r3[0x4]
8000b51c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b520:	e5 e8 10 08 	or	r8,r2,r8
8000b524:	87 18       	st.w	r3[0x4],r8
8000b526:	58 f2       	cp.w	r2,15
8000b528:	e0 88 00 07 	brls	8000b536 <_malloc_r+0x3ce>
8000b52c:	e6 cb ff f8 	sub	r11,r3,-8
8000b530:	0a 9c       	mov	r12,r5
8000b532:	fe b0 fb 6d 	rcall	8000ac0c <_free_r>
8000b536:	49 19       	lddpc	r9,8000b578 <_malloc_r+0x410>
8000b538:	72 0a       	ld.w	r10,r9[0x0]
8000b53a:	48 f8       	lddpc	r8,8000b574 <_malloc_r+0x40c>
8000b53c:	70 08       	ld.w	r8,r8[0x0]
8000b53e:	14 38       	cp.w	r8,r10
8000b540:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000b544:	48 e9       	lddpc	r9,8000b57c <_malloc_r+0x414>
8000b546:	72 0a       	ld.w	r10,r9[0x0]
8000b548:	14 38       	cp.w	r8,r10
8000b54a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000b54e:	68 28       	ld.w	r8,r4[0x8]
8000b550:	70 18       	ld.w	r8,r8[0x4]
8000b552:	e0 18 ff fc 	andl	r8,0xfffc
8000b556:	0e 38       	cp.w	r8,r7
8000b558:	5f 39       	srlo	r9
8000b55a:	0e 18       	sub	r8,r7
8000b55c:	58 f8       	cp.w	r8,15
8000b55e:	5f aa       	srle	r10
8000b560:	f5 e9 10 09 	or	r9,r10,r9
8000b564:	c0 e0       	breq	8000b580 <_malloc_r+0x418>
8000b566:	0a 9c       	mov	r12,r5
8000b568:	c4 5c       	rcall	8000b5f2 <__malloc_unlock>
8000b56a:	d8 3a       	popm	r0-r7,pc,r12=0
8000b56c:	00 00       	add	r0,r0
8000b56e:	07 2c       	ld.uh	r12,r3++
8000b570:	00 00       	add	r0,r0
8000b572:	05 10       	ld.sh	r0,r2++
8000b574:	00 00       	add	r0,r0
8000b576:	07 30       	ld.ub	r0,r3++
8000b578:	00 00       	add	r0,r0
8000b57a:	07 28       	ld.uh	r8,r3++
8000b57c:	00 00       	add	r0,r0
8000b57e:	07 24       	ld.uh	r4,r3++
8000b580:	68 26       	ld.w	r6,r4[0x8]
8000b582:	a1 a8       	sbr	r8,0x0
8000b584:	0e 99       	mov	r9,r7
8000b586:	a1 a9       	sbr	r9,0x0
8000b588:	8d 19       	st.w	r6[0x4],r9
8000b58a:	ec 07 00 07 	add	r7,r6,r7
8000b58e:	0a 9c       	mov	r12,r5
8000b590:	89 27       	st.w	r4[0x8],r7
8000b592:	8f 18       	st.w	r7[0x4],r8
8000b594:	c2 fc       	rcall	8000b5f2 <__malloc_unlock>
8000b596:	ec cc ff f8 	sub	r12,r6,-8
8000b59a:	d8 32       	popm	r0-r7,pc

8000b59c <memchr>:
8000b59c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000b5a0:	c0 68       	rjmp	8000b5ac <memchr+0x10>
8000b5a2:	20 1a       	sub	r10,1
8000b5a4:	19 88       	ld.ub	r8,r12[0x0]
8000b5a6:	16 38       	cp.w	r8,r11
8000b5a8:	5e 0c       	reteq	r12
8000b5aa:	2f fc       	sub	r12,-1
8000b5ac:	58 0a       	cp.w	r10,0
8000b5ae:	cf a1       	brne	8000b5a2 <memchr+0x6>
8000b5b0:	5e fa       	retal	r10

8000b5b2 <memmove>:
8000b5b2:	d4 01       	pushm	lr
8000b5b4:	18 3b       	cp.w	r11,r12
8000b5b6:	c1 92       	brcc	8000b5e8 <memmove+0x36>
8000b5b8:	f6 0a 00 09 	add	r9,r11,r10
8000b5bc:	12 3c       	cp.w	r12,r9
8000b5be:	c1 52       	brcc	8000b5e8 <memmove+0x36>
8000b5c0:	f8 0a 00 0b 	add	r11,r12,r10
8000b5c4:	30 08       	mov	r8,0
8000b5c6:	c0 68       	rjmp	8000b5d2 <memmove+0x20>
8000b5c8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000b5cc:	20 1a       	sub	r10,1
8000b5ce:	f6 08 0b 0e 	st.b	r11[r8],lr
8000b5d2:	20 18       	sub	r8,1
8000b5d4:	58 0a       	cp.w	r10,0
8000b5d6:	cf 91       	brne	8000b5c8 <memmove+0x16>
8000b5d8:	d8 02       	popm	pc
8000b5da:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000b5de:	20 1a       	sub	r10,1
8000b5e0:	f8 08 0b 09 	st.b	r12[r8],r9
8000b5e4:	2f f8       	sub	r8,-1
8000b5e6:	c0 28       	rjmp	8000b5ea <memmove+0x38>
8000b5e8:	30 08       	mov	r8,0
8000b5ea:	58 0a       	cp.w	r10,0
8000b5ec:	cf 71       	brne	8000b5da <memmove+0x28>
8000b5ee:	d8 02       	popm	pc

8000b5f0 <__malloc_lock>:
8000b5f0:	5e fc       	retal	r12

8000b5f2 <__malloc_unlock>:
8000b5f2:	5e fc       	retal	r12

8000b5f4 <__hi0bits>:
8000b5f4:	18 98       	mov	r8,r12
8000b5f6:	e0 1c 00 00 	andl	r12,0x0
8000b5fa:	f0 09 15 10 	lsl	r9,r8,0x10
8000b5fe:	58 0c       	cp.w	r12,0
8000b600:	f2 08 17 00 	moveq	r8,r9
8000b604:	f9 bc 00 10 	moveq	r12,16
8000b608:	f9 bc 01 00 	movne	r12,0
8000b60c:	10 9a       	mov	r10,r8
8000b60e:	f0 09 15 08 	lsl	r9,r8,0x8
8000b612:	e6 1a ff 00 	andh	r10,0xff00,COH
8000b616:	f7 bc 00 f8 	subeq	r12,-8
8000b61a:	f2 08 17 00 	moveq	r8,r9
8000b61e:	10 9a       	mov	r10,r8
8000b620:	f0 09 15 04 	lsl	r9,r8,0x4
8000b624:	e6 1a f0 00 	andh	r10,0xf000,COH
8000b628:	f7 bc 00 fc 	subeq	r12,-4
8000b62c:	f2 08 17 00 	moveq	r8,r9
8000b630:	10 9a       	mov	r10,r8
8000b632:	f0 09 15 02 	lsl	r9,r8,0x2
8000b636:	e6 1a c0 00 	andh	r10,0xc000,COH
8000b63a:	f7 bc 00 fe 	subeq	r12,-2
8000b63e:	f2 08 17 00 	moveq	r8,r9
8000b642:	58 08       	cp.w	r8,0
8000b644:	5e 5c       	retlt	r12
8000b646:	ed b8 00 1e 	bld	r8,0x1e
8000b64a:	f9 bc 01 20 	movne	r12,32
8000b64e:	f7 bc 00 ff 	subeq	r12,-1
8000b652:	5e fc       	retal	r12

8000b654 <__lo0bits>:
8000b654:	18 99       	mov	r9,r12
8000b656:	78 08       	ld.w	r8,r12[0x0]
8000b658:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000b65c:	c1 50       	breq	8000b686 <__lo0bits+0x32>
8000b65e:	ed b8 00 00 	bld	r8,0x0
8000b662:	c0 21       	brne	8000b666 <__lo0bits+0x12>
8000b664:	5e fd       	retal	0
8000b666:	10 9b       	mov	r11,r8
8000b668:	f0 0a 16 01 	lsr	r10,r8,0x1
8000b66c:	e2 1b 00 02 	andl	r11,0x2,COH
8000b670:	a3 88       	lsr	r8,0x2
8000b672:	58 0b       	cp.w	r11,0
8000b674:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000b678:	f9 bc 01 01 	movne	r12,1
8000b67c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000b680:	f9 bc 00 02 	moveq	r12,2
8000b684:	5e fc       	retal	r12
8000b686:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b68a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b68e:	58 0a       	cp.w	r10,0
8000b690:	f6 08 17 00 	moveq	r8,r11
8000b694:	f9 bc 00 10 	moveq	r12,16
8000b698:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000b69c:	f0 0a 16 08 	lsr	r10,r8,0x8
8000b6a0:	58 0b       	cp.w	r11,0
8000b6a2:	f7 bc 00 f8 	subeq	r12,-8
8000b6a6:	f4 08 17 00 	moveq	r8,r10
8000b6aa:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000b6ae:	f0 0a 16 04 	lsr	r10,r8,0x4
8000b6b2:	58 0b       	cp.w	r11,0
8000b6b4:	f7 bc 00 fc 	subeq	r12,-4
8000b6b8:	f4 08 17 00 	moveq	r8,r10
8000b6bc:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000b6c0:	f0 0a 16 02 	lsr	r10,r8,0x2
8000b6c4:	58 0b       	cp.w	r11,0
8000b6c6:	f7 bc 00 fe 	subeq	r12,-2
8000b6ca:	f4 08 17 00 	moveq	r8,r10
8000b6ce:	ed b8 00 00 	bld	r8,0x0
8000b6d2:	c0 60       	breq	8000b6de <__lo0bits+0x8a>
8000b6d4:	a1 98       	lsr	r8,0x1
8000b6d6:	c0 31       	brne	8000b6dc <__lo0bits+0x88>
8000b6d8:	32 0c       	mov	r12,32
8000b6da:	5e fc       	retal	r12
8000b6dc:	2f fc       	sub	r12,-1
8000b6de:	93 08       	st.w	r9[0x0],r8
8000b6e0:	5e fc       	retal	r12

8000b6e2 <__mcmp>:
8000b6e2:	d4 01       	pushm	lr
8000b6e4:	18 98       	mov	r8,r12
8000b6e6:	76 49       	ld.w	r9,r11[0x10]
8000b6e8:	78 4c       	ld.w	r12,r12[0x10]
8000b6ea:	12 1c       	sub	r12,r9
8000b6ec:	c1 31       	brne	8000b712 <__mcmp+0x30>
8000b6ee:	2f b9       	sub	r9,-5
8000b6f0:	a3 69       	lsl	r9,0x2
8000b6f2:	12 0b       	add	r11,r9
8000b6f4:	f0 09 00 09 	add	r9,r8,r9
8000b6f8:	2e c8       	sub	r8,-20
8000b6fa:	13 4e       	ld.w	lr,--r9
8000b6fc:	17 4a       	ld.w	r10,--r11
8000b6fe:	14 3e       	cp.w	lr,r10
8000b700:	c0 60       	breq	8000b70c <__mcmp+0x2a>
8000b702:	f9 bc 03 ff 	movlo	r12,-1
8000b706:	f9 bc 02 01 	movhs	r12,1
8000b70a:	d8 02       	popm	pc
8000b70c:	10 39       	cp.w	r9,r8
8000b70e:	fe 9b ff f6 	brhi	8000b6fa <__mcmp+0x18>
8000b712:	d8 02       	popm	pc

8000b714 <_Bfree>:
8000b714:	d4 21       	pushm	r4-r7,lr
8000b716:	18 97       	mov	r7,r12
8000b718:	16 95       	mov	r5,r11
8000b71a:	78 96       	ld.w	r6,r12[0x24]
8000b71c:	58 06       	cp.w	r6,0
8000b71e:	c0 91       	brne	8000b730 <_Bfree+0x1c>
8000b720:	31 0c       	mov	r12,16
8000b722:	fe b0 fd 1b 	rcall	8000b158 <malloc>
8000b726:	99 36       	st.w	r12[0xc],r6
8000b728:	8f 9c       	st.w	r7[0x24],r12
8000b72a:	99 16       	st.w	r12[0x4],r6
8000b72c:	99 26       	st.w	r12[0x8],r6
8000b72e:	99 06       	st.w	r12[0x0],r6
8000b730:	58 05       	cp.w	r5,0
8000b732:	c0 90       	breq	8000b744 <_Bfree+0x30>
8000b734:	6a 19       	ld.w	r9,r5[0x4]
8000b736:	6e 98       	ld.w	r8,r7[0x24]
8000b738:	70 38       	ld.w	r8,r8[0xc]
8000b73a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000b73e:	8b 0a       	st.w	r5[0x0],r10
8000b740:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000b744:	d8 22       	popm	r4-r7,pc
8000b746:	d7 03       	nop

8000b748 <_Balloc>:
8000b748:	d4 21       	pushm	r4-r7,lr
8000b74a:	18 97       	mov	r7,r12
8000b74c:	16 96       	mov	r6,r11
8000b74e:	78 95       	ld.w	r5,r12[0x24]
8000b750:	58 05       	cp.w	r5,0
8000b752:	c0 91       	brne	8000b764 <_Balloc+0x1c>
8000b754:	31 0c       	mov	r12,16
8000b756:	fe b0 fd 01 	rcall	8000b158 <malloc>
8000b75a:	99 35       	st.w	r12[0xc],r5
8000b75c:	8f 9c       	st.w	r7[0x24],r12
8000b75e:	99 15       	st.w	r12[0x4],r5
8000b760:	99 25       	st.w	r12[0x8],r5
8000b762:	99 05       	st.w	r12[0x0],r5
8000b764:	6e 95       	ld.w	r5,r7[0x24]
8000b766:	6a 38       	ld.w	r8,r5[0xc]
8000b768:	58 08       	cp.w	r8,0
8000b76a:	c0 b1       	brne	8000b780 <_Balloc+0x38>
8000b76c:	31 0a       	mov	r10,16
8000b76e:	30 4b       	mov	r11,4
8000b770:	0e 9c       	mov	r12,r7
8000b772:	e0 a0 04 af 	rcall	8000c0d0 <_calloc_r>
8000b776:	8b 3c       	st.w	r5[0xc],r12
8000b778:	6e 98       	ld.w	r8,r7[0x24]
8000b77a:	70 3c       	ld.w	r12,r8[0xc]
8000b77c:	58 0c       	cp.w	r12,0
8000b77e:	c1 b0       	breq	8000b7b4 <_Balloc+0x6c>
8000b780:	6e 98       	ld.w	r8,r7[0x24]
8000b782:	70 38       	ld.w	r8,r8[0xc]
8000b784:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000b788:	70 0c       	ld.w	r12,r8[0x0]
8000b78a:	58 0c       	cp.w	r12,0
8000b78c:	c0 40       	breq	8000b794 <_Balloc+0x4c>
8000b78e:	78 09       	ld.w	r9,r12[0x0]
8000b790:	91 09       	st.w	r8[0x0],r9
8000b792:	c0 e8       	rjmp	8000b7ae <_Balloc+0x66>
8000b794:	0e 9c       	mov	r12,r7
8000b796:	30 17       	mov	r7,1
8000b798:	0e 9b       	mov	r11,r7
8000b79a:	ee 06 09 47 	lsl	r7,r7,r6
8000b79e:	ee ca ff fb 	sub	r10,r7,-5
8000b7a2:	a3 6a       	lsl	r10,0x2
8000b7a4:	e0 a0 04 96 	rcall	8000c0d0 <_calloc_r>
8000b7a8:	c0 60       	breq	8000b7b4 <_Balloc+0x6c>
8000b7aa:	99 16       	st.w	r12[0x4],r6
8000b7ac:	99 27       	st.w	r12[0x8],r7
8000b7ae:	30 08       	mov	r8,0
8000b7b0:	99 38       	st.w	r12[0xc],r8
8000b7b2:	99 48       	st.w	r12[0x10],r8
8000b7b4:	d8 22       	popm	r4-r7,pc
8000b7b6:	d7 03       	nop

8000b7b8 <__d2b>:
8000b7b8:	d4 31       	pushm	r0-r7,lr
8000b7ba:	20 2d       	sub	sp,8
8000b7bc:	16 93       	mov	r3,r11
8000b7be:	12 96       	mov	r6,r9
8000b7c0:	10 95       	mov	r5,r8
8000b7c2:	14 92       	mov	r2,r10
8000b7c4:	30 1b       	mov	r11,1
8000b7c6:	cc 1f       	rcall	8000b748 <_Balloc>
8000b7c8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000b7cc:	50 09       	stdsp	sp[0x0],r9
8000b7ce:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000b7d2:	f0 01 16 14 	lsr	r1,r8,0x14
8000b7d6:	fc 1a 00 10 	movh	r10,0x10
8000b7da:	f3 da e1 39 	orne	r9,r9,r10
8000b7de:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000b7e2:	18 94       	mov	r4,r12
8000b7e4:	58 02       	cp.w	r2,0
8000b7e6:	c1 d0       	breq	8000b820 <__d2b+0x68>
8000b7e8:	fa cc ff f8 	sub	r12,sp,-8
8000b7ec:	18 d2       	st.w	--r12,r2
8000b7ee:	c3 3f       	rcall	8000b654 <__lo0bits>
8000b7f0:	40 18       	lddsp	r8,sp[0x4]
8000b7f2:	c0 d0       	breq	8000b80c <__d2b+0x54>
8000b7f4:	40 09       	lddsp	r9,sp[0x0]
8000b7f6:	f8 0a 11 20 	rsub	r10,r12,32
8000b7fa:	f2 0a 09 4a 	lsl	r10,r9,r10
8000b7fe:	f5 e8 10 08 	or	r8,r10,r8
8000b802:	89 58       	st.w	r4[0x14],r8
8000b804:	f2 0c 0a 49 	lsr	r9,r9,r12
8000b808:	50 09       	stdsp	sp[0x0],r9
8000b80a:	c0 28       	rjmp	8000b80e <__d2b+0x56>
8000b80c:	89 58       	st.w	r4[0x14],r8
8000b80e:	40 08       	lddsp	r8,sp[0x0]
8000b810:	58 08       	cp.w	r8,0
8000b812:	f9 b3 01 02 	movne	r3,2
8000b816:	f9 b3 00 01 	moveq	r3,1
8000b81a:	89 68       	st.w	r4[0x18],r8
8000b81c:	89 43       	st.w	r4[0x10],r3
8000b81e:	c0 88       	rjmp	8000b82e <__d2b+0x76>
8000b820:	1a 9c       	mov	r12,sp
8000b822:	c1 9f       	rcall	8000b654 <__lo0bits>
8000b824:	30 13       	mov	r3,1
8000b826:	40 08       	lddsp	r8,sp[0x0]
8000b828:	2e 0c       	sub	r12,-32
8000b82a:	89 43       	st.w	r4[0x10],r3
8000b82c:	89 58       	st.w	r4[0x14],r8
8000b82e:	58 01       	cp.w	r1,0
8000b830:	c0 90       	breq	8000b842 <__d2b+0x8a>
8000b832:	e2 c1 04 33 	sub	r1,r1,1075
8000b836:	18 01       	add	r1,r12
8000b838:	8d 01       	st.w	r6[0x0],r1
8000b83a:	f8 0c 11 35 	rsub	r12,r12,53
8000b83e:	8b 0c       	st.w	r5[0x0],r12
8000b840:	c0 c8       	rjmp	8000b858 <__d2b+0xa0>
8000b842:	e6 c8 ff fc 	sub	r8,r3,-4
8000b846:	f8 cc 04 32 	sub	r12,r12,1074
8000b84a:	a5 73       	lsl	r3,0x5
8000b84c:	8d 0c       	st.w	r6[0x0],r12
8000b84e:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000b852:	cd 1e       	rcall	8000b5f4 <__hi0bits>
8000b854:	18 13       	sub	r3,r12
8000b856:	8b 03       	st.w	r5[0x0],r3
8000b858:	08 9c       	mov	r12,r4
8000b85a:	2f ed       	sub	sp,-8
8000b85c:	d8 32       	popm	r0-r7,pc
8000b85e:	d7 03       	nop

8000b860 <__mdiff>:
8000b860:	d4 31       	pushm	r0-r7,lr
8000b862:	74 48       	ld.w	r8,r10[0x10]
8000b864:	76 45       	ld.w	r5,r11[0x10]
8000b866:	16 97       	mov	r7,r11
8000b868:	14 96       	mov	r6,r10
8000b86a:	10 15       	sub	r5,r8
8000b86c:	c1 31       	brne	8000b892 <__mdiff+0x32>
8000b86e:	2f b8       	sub	r8,-5
8000b870:	ee ce ff ec 	sub	lr,r7,-20
8000b874:	a3 68       	lsl	r8,0x2
8000b876:	f4 08 00 0b 	add	r11,r10,r8
8000b87a:	ee 08 00 08 	add	r8,r7,r8
8000b87e:	11 4a       	ld.w	r10,--r8
8000b880:	17 49       	ld.w	r9,--r11
8000b882:	12 3a       	cp.w	r10,r9
8000b884:	c0 30       	breq	8000b88a <__mdiff+0x2a>
8000b886:	c0 e2       	brcc	8000b8a2 <__mdiff+0x42>
8000b888:	c0 78       	rjmp	8000b896 <__mdiff+0x36>
8000b88a:	1c 38       	cp.w	r8,lr
8000b88c:	fe 9b ff f9 	brhi	8000b87e <__mdiff+0x1e>
8000b890:	c4 98       	rjmp	8000b922 <__mdiff+0xc2>
8000b892:	58 05       	cp.w	r5,0
8000b894:	c0 64       	brge	8000b8a0 <__mdiff+0x40>
8000b896:	0e 98       	mov	r8,r7
8000b898:	30 15       	mov	r5,1
8000b89a:	0c 97       	mov	r7,r6
8000b89c:	10 96       	mov	r6,r8
8000b89e:	c0 28       	rjmp	8000b8a2 <__mdiff+0x42>
8000b8a0:	30 05       	mov	r5,0
8000b8a2:	6e 1b       	ld.w	r11,r7[0x4]
8000b8a4:	c5 2f       	rcall	8000b748 <_Balloc>
8000b8a6:	6e 49       	ld.w	r9,r7[0x10]
8000b8a8:	6c 44       	ld.w	r4,r6[0x10]
8000b8aa:	99 35       	st.w	r12[0xc],r5
8000b8ac:	2f b4       	sub	r4,-5
8000b8ae:	f2 c5 ff fb 	sub	r5,r9,-5
8000b8b2:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000b8b6:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000b8ba:	2e c6       	sub	r6,-20
8000b8bc:	2e c7       	sub	r7,-20
8000b8be:	f8 c8 ff ec 	sub	r8,r12,-20
8000b8c2:	30 0a       	mov	r10,0
8000b8c4:	0f 0e       	ld.w	lr,r7++
8000b8c6:	0d 0b       	ld.w	r11,r6++
8000b8c8:	fc 02 16 10 	lsr	r2,lr,0x10
8000b8cc:	f6 03 16 10 	lsr	r3,r11,0x10
8000b8d0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b8d4:	e4 03 01 03 	sub	r3,r2,r3
8000b8d8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b8dc:	fc 0b 01 0b 	sub	r11,lr,r11
8000b8e0:	f6 0a 00 0a 	add	r10,r11,r10
8000b8e4:	b0 1a       	st.h	r8[0x2],r10
8000b8e6:	b1 4a       	asr	r10,0x10
8000b8e8:	e6 0a 00 0a 	add	r10,r3,r10
8000b8ec:	b0 0a       	st.h	r8[0x0],r10
8000b8ee:	2f c8       	sub	r8,-4
8000b8f0:	b1 4a       	asr	r10,0x10
8000b8f2:	08 36       	cp.w	r6,r4
8000b8f4:	ce 83       	brcs	8000b8c4 <__mdiff+0x64>
8000b8f6:	c0 d8       	rjmp	8000b910 <__mdiff+0xb0>
8000b8f8:	0f 0b       	ld.w	r11,r7++
8000b8fa:	f6 0e 16 10 	lsr	lr,r11,0x10
8000b8fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b902:	16 0a       	add	r10,r11
8000b904:	b0 1a       	st.h	r8[0x2],r10
8000b906:	b1 4a       	asr	r10,0x10
8000b908:	1c 0a       	add	r10,lr
8000b90a:	b0 0a       	st.h	r8[0x0],r10
8000b90c:	2f c8       	sub	r8,-4
8000b90e:	b1 4a       	asr	r10,0x10
8000b910:	0a 37       	cp.w	r7,r5
8000b912:	cf 33       	brcs	8000b8f8 <__mdiff+0x98>
8000b914:	c0 28       	rjmp	8000b918 <__mdiff+0xb8>
8000b916:	20 19       	sub	r9,1
8000b918:	11 4a       	ld.w	r10,--r8
8000b91a:	58 0a       	cp.w	r10,0
8000b91c:	cf d0       	breq	8000b916 <__mdiff+0xb6>
8000b91e:	99 49       	st.w	r12[0x10],r9
8000b920:	d8 32       	popm	r0-r7,pc
8000b922:	30 0b       	mov	r11,0
8000b924:	c1 2f       	rcall	8000b748 <_Balloc>
8000b926:	30 18       	mov	r8,1
8000b928:	99 48       	st.w	r12[0x10],r8
8000b92a:	30 08       	mov	r8,0
8000b92c:	99 58       	st.w	r12[0x14],r8
8000b92e:	d8 32       	popm	r0-r7,pc

8000b930 <__lshift>:
8000b930:	d4 31       	pushm	r0-r7,lr
8000b932:	16 97       	mov	r7,r11
8000b934:	76 46       	ld.w	r6,r11[0x10]
8000b936:	f4 02 14 05 	asr	r2,r10,0x5
8000b93a:	2f f6       	sub	r6,-1
8000b93c:	14 93       	mov	r3,r10
8000b93e:	18 94       	mov	r4,r12
8000b940:	04 06       	add	r6,r2
8000b942:	76 1b       	ld.w	r11,r11[0x4]
8000b944:	6e 28       	ld.w	r8,r7[0x8]
8000b946:	c0 38       	rjmp	8000b94c <__lshift+0x1c>
8000b948:	2f fb       	sub	r11,-1
8000b94a:	a1 78       	lsl	r8,0x1
8000b94c:	10 36       	cp.w	r6,r8
8000b94e:	fe 99 ff fd 	brgt	8000b948 <__lshift+0x18>
8000b952:	08 9c       	mov	r12,r4
8000b954:	cf ae       	rcall	8000b748 <_Balloc>
8000b956:	30 09       	mov	r9,0
8000b958:	18 95       	mov	r5,r12
8000b95a:	f8 c8 ff ec 	sub	r8,r12,-20
8000b95e:	12 9a       	mov	r10,r9
8000b960:	c0 38       	rjmp	8000b966 <__lshift+0x36>
8000b962:	10 aa       	st.w	r8++,r10
8000b964:	2f f9       	sub	r9,-1
8000b966:	04 39       	cp.w	r9,r2
8000b968:	cf d5       	brlt	8000b962 <__lshift+0x32>
8000b96a:	6e 4b       	ld.w	r11,r7[0x10]
8000b96c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000b970:	2f bb       	sub	r11,-5
8000b972:	ee c9 ff ec 	sub	r9,r7,-20
8000b976:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000b97a:	58 03       	cp.w	r3,0
8000b97c:	c1 30       	breq	8000b9a2 <__lshift+0x72>
8000b97e:	e6 0c 11 20 	rsub	r12,r3,32
8000b982:	30 0a       	mov	r10,0
8000b984:	72 02       	ld.w	r2,r9[0x0]
8000b986:	e4 03 09 42 	lsl	r2,r2,r3
8000b98a:	04 4a       	or	r10,r2
8000b98c:	10 aa       	st.w	r8++,r10
8000b98e:	13 0a       	ld.w	r10,r9++
8000b990:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b994:	16 39       	cp.w	r9,r11
8000b996:	cf 73       	brcs	8000b984 <__lshift+0x54>
8000b998:	91 0a       	st.w	r8[0x0],r10
8000b99a:	58 0a       	cp.w	r10,0
8000b99c:	c0 70       	breq	8000b9aa <__lshift+0x7a>
8000b99e:	2f f6       	sub	r6,-1
8000b9a0:	c0 58       	rjmp	8000b9aa <__lshift+0x7a>
8000b9a2:	13 0a       	ld.w	r10,r9++
8000b9a4:	10 aa       	st.w	r8++,r10
8000b9a6:	16 39       	cp.w	r9,r11
8000b9a8:	cf d3       	brcs	8000b9a2 <__lshift+0x72>
8000b9aa:	08 9c       	mov	r12,r4
8000b9ac:	20 16       	sub	r6,1
8000b9ae:	0e 9b       	mov	r11,r7
8000b9b0:	8b 46       	st.w	r5[0x10],r6
8000b9b2:	cb 1e       	rcall	8000b714 <_Bfree>
8000b9b4:	0a 9c       	mov	r12,r5
8000b9b6:	d8 32       	popm	r0-r7,pc

8000b9b8 <__multiply>:
8000b9b8:	d4 31       	pushm	r0-r7,lr
8000b9ba:	20 2d       	sub	sp,8
8000b9bc:	76 49       	ld.w	r9,r11[0x10]
8000b9be:	74 48       	ld.w	r8,r10[0x10]
8000b9c0:	16 96       	mov	r6,r11
8000b9c2:	14 95       	mov	r5,r10
8000b9c4:	10 39       	cp.w	r9,r8
8000b9c6:	ec 08 17 50 	movlt	r8,r6
8000b9ca:	ea 06 17 50 	movlt	r6,r5
8000b9ce:	f0 05 17 50 	movlt	r5,r8
8000b9d2:	6c 28       	ld.w	r8,r6[0x8]
8000b9d4:	76 43       	ld.w	r3,r11[0x10]
8000b9d6:	74 42       	ld.w	r2,r10[0x10]
8000b9d8:	76 1b       	ld.w	r11,r11[0x4]
8000b9da:	e4 03 00 07 	add	r7,r2,r3
8000b9de:	10 37       	cp.w	r7,r8
8000b9e0:	f7 bb 09 ff 	subgt	r11,-1
8000b9e4:	cb 2e       	rcall	8000b748 <_Balloc>
8000b9e6:	ee c4 ff fb 	sub	r4,r7,-5
8000b9ea:	f8 c9 ff ec 	sub	r9,r12,-20
8000b9ee:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000b9f2:	30 0a       	mov	r10,0
8000b9f4:	12 98       	mov	r8,r9
8000b9f6:	c0 28       	rjmp	8000b9fa <__multiply+0x42>
8000b9f8:	10 aa       	st.w	r8++,r10
8000b9fa:	08 38       	cp.w	r8,r4
8000b9fc:	cf e3       	brcs	8000b9f8 <__multiply+0x40>
8000b9fe:	2f b3       	sub	r3,-5
8000ba00:	2f b2       	sub	r2,-5
8000ba02:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000ba06:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000ba0a:	ec cb ff ec 	sub	r11,r6,-20
8000ba0e:	50 12       	stdsp	sp[0x4],r2
8000ba10:	ea ca ff ec 	sub	r10,r5,-20
8000ba14:	c4 48       	rjmp	8000ba9c <__multiply+0xe4>
8000ba16:	94 95       	ld.uh	r5,r10[0x2]
8000ba18:	58 05       	cp.w	r5,0
8000ba1a:	c2 00       	breq	8000ba5a <__multiply+0xa2>
8000ba1c:	12 98       	mov	r8,r9
8000ba1e:	16 96       	mov	r6,r11
8000ba20:	30 0e       	mov	lr,0
8000ba22:	50 09       	stdsp	sp[0x0],r9
8000ba24:	0d 02       	ld.w	r2,r6++
8000ba26:	e4 00 16 10 	lsr	r0,r2,0x10
8000ba2a:	70 01       	ld.w	r1,r8[0x0]
8000ba2c:	70 09       	ld.w	r9,r8[0x0]
8000ba2e:	b1 81       	lsr	r1,0x10
8000ba30:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000ba34:	e0 05 03 41 	mac	r1,r0,r5
8000ba38:	ab 32       	mul	r2,r5
8000ba3a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000ba3e:	00 02       	add	r2,r0
8000ba40:	e4 0e 00 0e 	add	lr,r2,lr
8000ba44:	b0 1e       	st.h	r8[0x2],lr
8000ba46:	b1 8e       	lsr	lr,0x10
8000ba48:	1c 01       	add	r1,lr
8000ba4a:	b0 01       	st.h	r8[0x0],r1
8000ba4c:	e2 0e 16 10 	lsr	lr,r1,0x10
8000ba50:	2f c8       	sub	r8,-4
8000ba52:	06 36       	cp.w	r6,r3
8000ba54:	ce 83       	brcs	8000ba24 <__multiply+0x6c>
8000ba56:	40 09       	lddsp	r9,sp[0x0]
8000ba58:	91 0e       	st.w	r8[0x0],lr
8000ba5a:	94 86       	ld.uh	r6,r10[0x0]
8000ba5c:	58 06       	cp.w	r6,0
8000ba5e:	c1 d0       	breq	8000ba98 <__multiply+0xe0>
8000ba60:	72 02       	ld.w	r2,r9[0x0]
8000ba62:	12 98       	mov	r8,r9
8000ba64:	16 9e       	mov	lr,r11
8000ba66:	30 05       	mov	r5,0
8000ba68:	b0 12       	st.h	r8[0x2],r2
8000ba6a:	1d 01       	ld.w	r1,lr++
8000ba6c:	90 82       	ld.uh	r2,r8[0x0]
8000ba6e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000ba72:	ad 30       	mul	r0,r6
8000ba74:	e0 02 00 02 	add	r2,r0,r2
8000ba78:	e4 05 00 05 	add	r5,r2,r5
8000ba7c:	b0 05       	st.h	r8[0x0],r5
8000ba7e:	b1 85       	lsr	r5,0x10
8000ba80:	b1 81       	lsr	r1,0x10
8000ba82:	2f c8       	sub	r8,-4
8000ba84:	ad 31       	mul	r1,r6
8000ba86:	90 92       	ld.uh	r2,r8[0x2]
8000ba88:	e2 02 00 02 	add	r2,r1,r2
8000ba8c:	0a 02       	add	r2,r5
8000ba8e:	e4 05 16 10 	lsr	r5,r2,0x10
8000ba92:	06 3e       	cp.w	lr,r3
8000ba94:	ce a3       	brcs	8000ba68 <__multiply+0xb0>
8000ba96:	91 02       	st.w	r8[0x0],r2
8000ba98:	2f ca       	sub	r10,-4
8000ba9a:	2f c9       	sub	r9,-4
8000ba9c:	40 18       	lddsp	r8,sp[0x4]
8000ba9e:	10 3a       	cp.w	r10,r8
8000baa0:	cb b3       	brcs	8000ba16 <__multiply+0x5e>
8000baa2:	c0 28       	rjmp	8000baa6 <__multiply+0xee>
8000baa4:	20 17       	sub	r7,1
8000baa6:	58 07       	cp.w	r7,0
8000baa8:	e0 8a 00 05 	brle	8000bab2 <__multiply+0xfa>
8000baac:	09 48       	ld.w	r8,--r4
8000baae:	58 08       	cp.w	r8,0
8000bab0:	cf a0       	breq	8000baa4 <__multiply+0xec>
8000bab2:	99 47       	st.w	r12[0x10],r7
8000bab4:	2f ed       	sub	sp,-8
8000bab6:	d8 32       	popm	r0-r7,pc

8000bab8 <__i2b>:
8000bab8:	d4 21       	pushm	r4-r7,lr
8000baba:	16 97       	mov	r7,r11
8000babc:	30 1b       	mov	r11,1
8000babe:	c4 5e       	rcall	8000b748 <_Balloc>
8000bac0:	30 19       	mov	r9,1
8000bac2:	99 57       	st.w	r12[0x14],r7
8000bac4:	99 49       	st.w	r12[0x10],r9
8000bac6:	d8 22       	popm	r4-r7,pc

8000bac8 <__multadd>:
8000bac8:	d4 31       	pushm	r0-r7,lr
8000baca:	30 08       	mov	r8,0
8000bacc:	12 95       	mov	r5,r9
8000bace:	16 97       	mov	r7,r11
8000bad0:	18 96       	mov	r6,r12
8000bad2:	76 44       	ld.w	r4,r11[0x10]
8000bad4:	f6 c9 ff ec 	sub	r9,r11,-20
8000bad8:	72 0b       	ld.w	r11,r9[0x0]
8000bada:	f6 0c 16 10 	lsr	r12,r11,0x10
8000bade:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000bae2:	f4 0c 02 4c 	mul	r12,r10,r12
8000bae6:	f4 0b 03 45 	mac	r5,r10,r11
8000baea:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000baee:	b1 85       	lsr	r5,0x10
8000baf0:	18 05       	add	r5,r12
8000baf2:	ea 0c 15 10 	lsl	r12,r5,0x10
8000baf6:	f8 0b 00 0b 	add	r11,r12,r11
8000bafa:	12 ab       	st.w	r9++,r11
8000bafc:	2f f8       	sub	r8,-1
8000bafe:	b1 85       	lsr	r5,0x10
8000bb00:	08 38       	cp.w	r8,r4
8000bb02:	ce b5       	brlt	8000bad8 <__multadd+0x10>
8000bb04:	58 05       	cp.w	r5,0
8000bb06:	c1 c0       	breq	8000bb3e <__multadd+0x76>
8000bb08:	6e 28       	ld.w	r8,r7[0x8]
8000bb0a:	10 34       	cp.w	r4,r8
8000bb0c:	c1 35       	brlt	8000bb32 <__multadd+0x6a>
8000bb0e:	6e 1b       	ld.w	r11,r7[0x4]
8000bb10:	0c 9c       	mov	r12,r6
8000bb12:	2f fb       	sub	r11,-1
8000bb14:	c1 ae       	rcall	8000b748 <_Balloc>
8000bb16:	6e 4a       	ld.w	r10,r7[0x10]
8000bb18:	ee cb ff f4 	sub	r11,r7,-12
8000bb1c:	18 93       	mov	r3,r12
8000bb1e:	2f ea       	sub	r10,-2
8000bb20:	2f 4c       	sub	r12,-12
8000bb22:	a3 6a       	lsl	r10,0x2
8000bb24:	fe b0 de 1d 	rcall	8000775e <memcpy>
8000bb28:	0e 9b       	mov	r11,r7
8000bb2a:	0c 9c       	mov	r12,r6
8000bb2c:	fe b0 fd f4 	rcall	8000b714 <_Bfree>
8000bb30:	06 97       	mov	r7,r3
8000bb32:	e8 c8 ff ff 	sub	r8,r4,-1
8000bb36:	2f b4       	sub	r4,-5
8000bb38:	8f 48       	st.w	r7[0x10],r8
8000bb3a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000bb3e:	0e 9c       	mov	r12,r7
8000bb40:	d8 32       	popm	r0-r7,pc
8000bb42:	d7 03       	nop

8000bb44 <__pow5mult>:
8000bb44:	d4 31       	pushm	r0-r7,lr
8000bb46:	14 96       	mov	r6,r10
8000bb48:	18 97       	mov	r7,r12
8000bb4a:	16 94       	mov	r4,r11
8000bb4c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000bb50:	c0 80       	breq	8000bb60 <__pow5mult+0x1c>
8000bb52:	20 18       	sub	r8,1
8000bb54:	49 f9       	lddpc	r9,8000bbd0 <__pow5mult+0x8c>
8000bb56:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000bb5a:	30 09       	mov	r9,0
8000bb5c:	cb 6f       	rcall	8000bac8 <__multadd>
8000bb5e:	18 94       	mov	r4,r12
8000bb60:	a3 46       	asr	r6,0x2
8000bb62:	c3 40       	breq	8000bbca <__pow5mult+0x86>
8000bb64:	6e 95       	ld.w	r5,r7[0x24]
8000bb66:	58 05       	cp.w	r5,0
8000bb68:	c0 91       	brne	8000bb7a <__pow5mult+0x36>
8000bb6a:	31 0c       	mov	r12,16
8000bb6c:	fe b0 fa f6 	rcall	8000b158 <malloc>
8000bb70:	99 35       	st.w	r12[0xc],r5
8000bb72:	8f 9c       	st.w	r7[0x24],r12
8000bb74:	99 15       	st.w	r12[0x4],r5
8000bb76:	99 25       	st.w	r12[0x8],r5
8000bb78:	99 05       	st.w	r12[0x0],r5
8000bb7a:	6e 93       	ld.w	r3,r7[0x24]
8000bb7c:	66 25       	ld.w	r5,r3[0x8]
8000bb7e:	58 05       	cp.w	r5,0
8000bb80:	c0 c1       	brne	8000bb98 <__pow5mult+0x54>
8000bb82:	e0 6b 02 71 	mov	r11,625
8000bb86:	0e 9c       	mov	r12,r7
8000bb88:	c9 8f       	rcall	8000bab8 <__i2b>
8000bb8a:	87 2c       	st.w	r3[0x8],r12
8000bb8c:	30 08       	mov	r8,0
8000bb8e:	18 95       	mov	r5,r12
8000bb90:	99 08       	st.w	r12[0x0],r8
8000bb92:	c0 38       	rjmp	8000bb98 <__pow5mult+0x54>
8000bb94:	06 9c       	mov	r12,r3
8000bb96:	18 95       	mov	r5,r12
8000bb98:	ed b6 00 00 	bld	r6,0x0
8000bb9c:	c0 b1       	brne	8000bbb2 <__pow5mult+0x6e>
8000bb9e:	08 9b       	mov	r11,r4
8000bba0:	0a 9a       	mov	r10,r5
8000bba2:	0e 9c       	mov	r12,r7
8000bba4:	c0 af       	rcall	8000b9b8 <__multiply>
8000bba6:	08 9b       	mov	r11,r4
8000bba8:	18 93       	mov	r3,r12
8000bbaa:	0e 9c       	mov	r12,r7
8000bbac:	06 94       	mov	r4,r3
8000bbae:	fe b0 fd b3 	rcall	8000b714 <_Bfree>
8000bbb2:	a1 56       	asr	r6,0x1
8000bbb4:	c0 b0       	breq	8000bbca <__pow5mult+0x86>
8000bbb6:	6a 03       	ld.w	r3,r5[0x0]
8000bbb8:	58 03       	cp.w	r3,0
8000bbba:	ce d1       	brne	8000bb94 <__pow5mult+0x50>
8000bbbc:	0a 9a       	mov	r10,r5
8000bbbe:	0a 9b       	mov	r11,r5
8000bbc0:	0e 9c       	mov	r12,r7
8000bbc2:	cf be       	rcall	8000b9b8 <__multiply>
8000bbc4:	8b 0c       	st.w	r5[0x0],r12
8000bbc6:	99 03       	st.w	r12[0x0],r3
8000bbc8:	ce 7b       	rjmp	8000bb96 <__pow5mult+0x52>
8000bbca:	08 9c       	mov	r12,r4
8000bbcc:	d8 32       	popm	r0-r7,pc
8000bbce:	d7 03       	nop
8000bbd0:	80 00       	ld.sh	r0,r0[0x0]
8000bbd2:	e0 a8       	*unknown*

8000bbd4 <_realloc_r>:
8000bbd4:	d4 31       	pushm	r0-r7,lr
8000bbd6:	20 1d       	sub	sp,4
8000bbd8:	16 94       	mov	r4,r11
8000bbda:	18 92       	mov	r2,r12
8000bbdc:	14 9b       	mov	r11,r10
8000bbde:	58 04       	cp.w	r4,0
8000bbe0:	c0 51       	brne	8000bbea <_realloc_r+0x16>
8000bbe2:	fe b0 fa c3 	rcall	8000b168 <_malloc_r>
8000bbe6:	18 95       	mov	r5,r12
8000bbe8:	c5 59       	rjmp	8000be92 <_realloc_r+0x2be>
8000bbea:	50 0a       	stdsp	sp[0x0],r10
8000bbec:	fe b0 fd 02 	rcall	8000b5f0 <__malloc_lock>
8000bbf0:	40 0b       	lddsp	r11,sp[0x0]
8000bbf2:	e8 c1 00 08 	sub	r1,r4,8
8000bbf6:	f6 c6 ff f5 	sub	r6,r11,-11
8000bbfa:	62 1c       	ld.w	r12,r1[0x4]
8000bbfc:	59 66       	cp.w	r6,22
8000bbfe:	f9 b6 08 10 	movls	r6,16
8000bc02:	f9 b8 0b f8 	movhi	r8,-8
8000bc06:	ed d8 eb 26 	andhi	r6,r6,r8
8000bc0a:	16 36       	cp.w	r6,r11
8000bc0c:	5f 38       	srlo	r8
8000bc0e:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000bc12:	c0 50       	breq	8000bc1c <_realloc_r+0x48>
8000bc14:	30 c8       	mov	r8,12
8000bc16:	30 05       	mov	r5,0
8000bc18:	85 38       	st.w	r2[0xc],r8
8000bc1a:	c3 c9       	rjmp	8000be92 <_realloc_r+0x2be>
8000bc1c:	18 90       	mov	r0,r12
8000bc1e:	e0 10 ff fc 	andl	r0,0xfffc
8000bc22:	0c 30       	cp.w	r0,r6
8000bc24:	e0 84 01 0c 	brge	8000be3c <_realloc_r+0x268>
8000bc28:	4c 98       	lddpc	r8,8000bd4c <_realloc_r+0x178>
8000bc2a:	e2 00 00 09 	add	r9,r1,r0
8000bc2e:	70 25       	ld.w	r5,r8[0x8]
8000bc30:	0a 39       	cp.w	r9,r5
8000bc32:	c0 90       	breq	8000bc44 <_realloc_r+0x70>
8000bc34:	72 1a       	ld.w	r10,r9[0x4]
8000bc36:	a1 ca       	cbr	r10,0x0
8000bc38:	f2 0a 00 0a 	add	r10,r9,r10
8000bc3c:	74 1a       	ld.w	r10,r10[0x4]
8000bc3e:	ed ba 00 00 	bld	r10,0x0
8000bc42:	c2 20       	breq	8000bc86 <_realloc_r+0xb2>
8000bc44:	72 1a       	ld.w	r10,r9[0x4]
8000bc46:	e0 1a ff fc 	andl	r10,0xfffc
8000bc4a:	f4 00 00 03 	add	r3,r10,r0
8000bc4e:	0a 39       	cp.w	r9,r5
8000bc50:	c1 31       	brne	8000bc76 <_realloc_r+0xa2>
8000bc52:	ec c7 ff f0 	sub	r7,r6,-16
8000bc56:	0e 33       	cp.w	r3,r7
8000bc58:	c1 95       	brlt	8000bc8a <_realloc_r+0xb6>
8000bc5a:	e2 06 00 09 	add	r9,r1,r6
8000bc5e:	0c 13       	sub	r3,r6
8000bc60:	a1 a3       	sbr	r3,0x0
8000bc62:	93 13       	st.w	r9[0x4],r3
8000bc64:	91 29       	st.w	r8[0x8],r9
8000bc66:	04 9c       	mov	r12,r2
8000bc68:	62 18       	ld.w	r8,r1[0x4]
8000bc6a:	08 95       	mov	r5,r4
8000bc6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bc70:	10 46       	or	r6,r8
8000bc72:	83 16       	st.w	r1[0x4],r6
8000bc74:	c0 d9       	rjmp	8000be8e <_realloc_r+0x2ba>
8000bc76:	0c 33       	cp.w	r3,r6
8000bc78:	c0 95       	brlt	8000bc8a <_realloc_r+0xb6>
8000bc7a:	72 28       	ld.w	r8,r9[0x8]
8000bc7c:	02 97       	mov	r7,r1
8000bc7e:	72 39       	ld.w	r9,r9[0xc]
8000bc80:	93 28       	st.w	r9[0x8],r8
8000bc82:	91 39       	st.w	r8[0xc],r9
8000bc84:	cd e8       	rjmp	8000be40 <_realloc_r+0x26c>
8000bc86:	30 0a       	mov	r10,0
8000bc88:	14 99       	mov	r9,r10
8000bc8a:	ed bc 00 00 	bld	r12,0x0
8000bc8e:	e0 80 00 97 	breq	8000bdbc <_realloc_r+0x1e8>
8000bc92:	62 07       	ld.w	r7,r1[0x0]
8000bc94:	e2 07 01 07 	sub	r7,r1,r7
8000bc98:	6e 1c       	ld.w	r12,r7[0x4]
8000bc9a:	e0 1c ff fc 	andl	r12,0xfffc
8000bc9e:	58 09       	cp.w	r9,0
8000bca0:	c5 80       	breq	8000bd50 <_realloc_r+0x17c>
8000bca2:	f8 00 00 03 	add	r3,r12,r0
8000bca6:	0a 39       	cp.w	r9,r5
8000bca8:	c4 81       	brne	8000bd38 <_realloc_r+0x164>
8000bcaa:	14 03       	add	r3,r10
8000bcac:	ec c9 ff f0 	sub	r9,r6,-16
8000bcb0:	12 33       	cp.w	r3,r9
8000bcb2:	c4 f5       	brlt	8000bd50 <_realloc_r+0x17c>
8000bcb4:	6e 3a       	ld.w	r10,r7[0xc]
8000bcb6:	6e 29       	ld.w	r9,r7[0x8]
8000bcb8:	95 29       	st.w	r10[0x8],r9
8000bcba:	93 3a       	st.w	r9[0xc],r10
8000bcbc:	ee c5 ff f8 	sub	r5,r7,-8
8000bcc0:	e0 ca 00 04 	sub	r10,r0,4
8000bcc4:	e0 4a 00 24 	cp.w	r10,36
8000bcc8:	e0 8b 00 25 	brhi	8000bd12 <_realloc_r+0x13e>
8000bccc:	0a 99       	mov	r9,r5
8000bcce:	59 3a       	cp.w	r10,19
8000bcd0:	e0 88 00 1a 	brls	8000bd04 <_realloc_r+0x130>
8000bcd4:	09 09       	ld.w	r9,r4++
8000bcd6:	8b 09       	st.w	r5[0x0],r9
8000bcd8:	09 09       	ld.w	r9,r4++
8000bcda:	8f 39       	st.w	r7[0xc],r9
8000bcdc:	ee c9 ff f0 	sub	r9,r7,-16
8000bce0:	59 ba       	cp.w	r10,27
8000bce2:	e0 88 00 11 	brls	8000bd04 <_realloc_r+0x130>
8000bce6:	09 0b       	ld.w	r11,r4++
8000bce8:	93 0b       	st.w	r9[0x0],r11
8000bcea:	09 09       	ld.w	r9,r4++
8000bcec:	8f 59       	st.w	r7[0x14],r9
8000bcee:	ee c9 ff e8 	sub	r9,r7,-24
8000bcf2:	e0 4a 00 24 	cp.w	r10,36
8000bcf6:	c0 71       	brne	8000bd04 <_realloc_r+0x130>
8000bcf8:	09 0a       	ld.w	r10,r4++
8000bcfa:	93 0a       	st.w	r9[0x0],r10
8000bcfc:	ee c9 ff e0 	sub	r9,r7,-32
8000bd00:	09 0a       	ld.w	r10,r4++
8000bd02:	8f 7a       	st.w	r7[0x1c],r10
8000bd04:	09 0a       	ld.w	r10,r4++
8000bd06:	12 aa       	st.w	r9++,r10
8000bd08:	68 0a       	ld.w	r10,r4[0x0]
8000bd0a:	93 0a       	st.w	r9[0x0],r10
8000bd0c:	68 1a       	ld.w	r10,r4[0x4]
8000bd0e:	93 1a       	st.w	r9[0x4],r10
8000bd10:	c0 78       	rjmp	8000bd1e <_realloc_r+0x14a>
8000bd12:	50 08       	stdsp	sp[0x0],r8
8000bd14:	08 9b       	mov	r11,r4
8000bd16:	0a 9c       	mov	r12,r5
8000bd18:	fe b0 fc 4d 	rcall	8000b5b2 <memmove>
8000bd1c:	40 08       	lddsp	r8,sp[0x0]
8000bd1e:	ee 06 00 09 	add	r9,r7,r6
8000bd22:	0c 13       	sub	r3,r6
8000bd24:	a1 a3       	sbr	r3,0x0
8000bd26:	93 13       	st.w	r9[0x4],r3
8000bd28:	91 29       	st.w	r8[0x8],r9
8000bd2a:	04 9c       	mov	r12,r2
8000bd2c:	6e 18       	ld.w	r8,r7[0x4]
8000bd2e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bd32:	10 46       	or	r6,r8
8000bd34:	8f 16       	st.w	r7[0x4],r6
8000bd36:	ca c8       	rjmp	8000be8e <_realloc_r+0x2ba>
8000bd38:	14 03       	add	r3,r10
8000bd3a:	0c 33       	cp.w	r3,r6
8000bd3c:	c0 a5       	brlt	8000bd50 <_realloc_r+0x17c>
8000bd3e:	72 28       	ld.w	r8,r9[0x8]
8000bd40:	72 39       	ld.w	r9,r9[0xc]
8000bd42:	93 28       	st.w	r9[0x8],r8
8000bd44:	91 39       	st.w	r8[0xc],r9
8000bd46:	6e 28       	ld.w	r8,r7[0x8]
8000bd48:	6e 39       	ld.w	r9,r7[0xc]
8000bd4a:	c0 98       	rjmp	8000bd5c <_realloc_r+0x188>
8000bd4c:	00 00       	add	r0,r0
8000bd4e:	01 04       	ld.w	r4,r0++
8000bd50:	f8 00 00 03 	add	r3,r12,r0
8000bd54:	0c 33       	cp.w	r3,r6
8000bd56:	c3 35       	brlt	8000bdbc <_realloc_r+0x1e8>
8000bd58:	6e 39       	ld.w	r9,r7[0xc]
8000bd5a:	6e 28       	ld.w	r8,r7[0x8]
8000bd5c:	93 28       	st.w	r9[0x8],r8
8000bd5e:	91 39       	st.w	r8[0xc],r9
8000bd60:	e0 ca 00 04 	sub	r10,r0,4
8000bd64:	ee cc ff f8 	sub	r12,r7,-8
8000bd68:	e0 4a 00 24 	cp.w	r10,36
8000bd6c:	e0 8b 00 24 	brhi	8000bdb4 <_realloc_r+0x1e0>
8000bd70:	59 3a       	cp.w	r10,19
8000bd72:	e0 88 00 1a 	brls	8000bda6 <_realloc_r+0x1d2>
8000bd76:	09 08       	ld.w	r8,r4++
8000bd78:	99 08       	st.w	r12[0x0],r8
8000bd7a:	09 08       	ld.w	r8,r4++
8000bd7c:	8f 38       	st.w	r7[0xc],r8
8000bd7e:	ee cc ff f0 	sub	r12,r7,-16
8000bd82:	59 ba       	cp.w	r10,27
8000bd84:	e0 88 00 11 	brls	8000bda6 <_realloc_r+0x1d2>
8000bd88:	09 08       	ld.w	r8,r4++
8000bd8a:	99 08       	st.w	r12[0x0],r8
8000bd8c:	09 08       	ld.w	r8,r4++
8000bd8e:	8f 58       	st.w	r7[0x14],r8
8000bd90:	ee cc ff e8 	sub	r12,r7,-24
8000bd94:	e0 4a 00 24 	cp.w	r10,36
8000bd98:	c0 71       	brne	8000bda6 <_realloc_r+0x1d2>
8000bd9a:	09 08       	ld.w	r8,r4++
8000bd9c:	99 08       	st.w	r12[0x0],r8
8000bd9e:	ee cc ff e0 	sub	r12,r7,-32
8000bda2:	09 08       	ld.w	r8,r4++
8000bda4:	8f 78       	st.w	r7[0x1c],r8
8000bda6:	09 08       	ld.w	r8,r4++
8000bda8:	18 a8       	st.w	r12++,r8
8000bdaa:	68 08       	ld.w	r8,r4[0x0]
8000bdac:	99 08       	st.w	r12[0x0],r8
8000bdae:	68 18       	ld.w	r8,r4[0x4]
8000bdb0:	99 18       	st.w	r12[0x4],r8
8000bdb2:	c4 78       	rjmp	8000be40 <_realloc_r+0x26c>
8000bdb4:	08 9b       	mov	r11,r4
8000bdb6:	fe b0 fb fe 	rcall	8000b5b2 <memmove>
8000bdba:	c4 38       	rjmp	8000be40 <_realloc_r+0x26c>
8000bdbc:	04 9c       	mov	r12,r2
8000bdbe:	fe b0 f9 d5 	rcall	8000b168 <_malloc_r>
8000bdc2:	18 95       	mov	r5,r12
8000bdc4:	c3 a0       	breq	8000be38 <_realloc_r+0x264>
8000bdc6:	62 18       	ld.w	r8,r1[0x4]
8000bdc8:	f8 c9 00 08 	sub	r9,r12,8
8000bdcc:	a1 c8       	cbr	r8,0x0
8000bdce:	e2 08 00 08 	add	r8,r1,r8
8000bdd2:	10 39       	cp.w	r9,r8
8000bdd4:	c0 71       	brne	8000bde2 <_realloc_r+0x20e>
8000bdd6:	72 13       	ld.w	r3,r9[0x4]
8000bdd8:	02 97       	mov	r7,r1
8000bdda:	e0 13 ff fc 	andl	r3,0xfffc
8000bdde:	00 03       	add	r3,r0
8000bde0:	c3 08       	rjmp	8000be40 <_realloc_r+0x26c>
8000bde2:	e0 ca 00 04 	sub	r10,r0,4
8000bde6:	e0 4a 00 24 	cp.w	r10,36
8000bdea:	e0 8b 00 20 	brhi	8000be2a <_realloc_r+0x256>
8000bdee:	08 99       	mov	r9,r4
8000bdf0:	18 98       	mov	r8,r12
8000bdf2:	59 3a       	cp.w	r10,19
8000bdf4:	e0 88 00 14 	brls	8000be1c <_realloc_r+0x248>
8000bdf8:	13 0b       	ld.w	r11,r9++
8000bdfa:	10 ab       	st.w	r8++,r11
8000bdfc:	13 0b       	ld.w	r11,r9++
8000bdfe:	10 ab       	st.w	r8++,r11
8000be00:	59 ba       	cp.w	r10,27
8000be02:	e0 88 00 0d 	brls	8000be1c <_realloc_r+0x248>
8000be06:	13 0b       	ld.w	r11,r9++
8000be08:	10 ab       	st.w	r8++,r11
8000be0a:	13 0b       	ld.w	r11,r9++
8000be0c:	10 ab       	st.w	r8++,r11
8000be0e:	e0 4a 00 24 	cp.w	r10,36
8000be12:	c0 51       	brne	8000be1c <_realloc_r+0x248>
8000be14:	13 0a       	ld.w	r10,r9++
8000be16:	10 aa       	st.w	r8++,r10
8000be18:	13 0a       	ld.w	r10,r9++
8000be1a:	10 aa       	st.w	r8++,r10
8000be1c:	13 0a       	ld.w	r10,r9++
8000be1e:	10 aa       	st.w	r8++,r10
8000be20:	72 0a       	ld.w	r10,r9[0x0]
8000be22:	91 0a       	st.w	r8[0x0],r10
8000be24:	72 19       	ld.w	r9,r9[0x4]
8000be26:	91 19       	st.w	r8[0x4],r9
8000be28:	c0 48       	rjmp	8000be30 <_realloc_r+0x25c>
8000be2a:	08 9b       	mov	r11,r4
8000be2c:	fe b0 fb c3 	rcall	8000b5b2 <memmove>
8000be30:	08 9b       	mov	r11,r4
8000be32:	04 9c       	mov	r12,r2
8000be34:	fe b0 f6 ec 	rcall	8000ac0c <_free_r>
8000be38:	04 9c       	mov	r12,r2
8000be3a:	c2 a8       	rjmp	8000be8e <_realloc_r+0x2ba>
8000be3c:	00 93       	mov	r3,r0
8000be3e:	02 97       	mov	r7,r1
8000be40:	e6 06 01 09 	sub	r9,r3,r6
8000be44:	6e 18       	ld.w	r8,r7[0x4]
8000be46:	58 f9       	cp.w	r9,15
8000be48:	e0 88 00 16 	brls	8000be74 <_realloc_r+0x2a0>
8000be4c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000be50:	ed e8 10 08 	or	r8,r6,r8
8000be54:	8f 18       	st.w	r7[0x4],r8
8000be56:	12 98       	mov	r8,r9
8000be58:	a1 a8       	sbr	r8,0x0
8000be5a:	ee 06 00 0b 	add	r11,r7,r6
8000be5e:	f6 09 00 09 	add	r9,r11,r9
8000be62:	97 18       	st.w	r11[0x4],r8
8000be64:	72 18       	ld.w	r8,r9[0x4]
8000be66:	a1 a8       	sbr	r8,0x0
8000be68:	2f 8b       	sub	r11,-8
8000be6a:	93 18       	st.w	r9[0x4],r8
8000be6c:	04 9c       	mov	r12,r2
8000be6e:	fe b0 f6 cf 	rcall	8000ac0c <_free_r>
8000be72:	c0 b8       	rjmp	8000be88 <_realloc_r+0x2b4>
8000be74:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000be78:	e7 e8 10 08 	or	r8,r3,r8
8000be7c:	8f 18       	st.w	r7[0x4],r8
8000be7e:	ee 03 00 03 	add	r3,r7,r3
8000be82:	66 18       	ld.w	r8,r3[0x4]
8000be84:	a1 a8       	sbr	r8,0x0
8000be86:	87 18       	st.w	r3[0x4],r8
8000be88:	04 9c       	mov	r12,r2
8000be8a:	ee c5 ff f8 	sub	r5,r7,-8
8000be8e:	fe b0 fb b2 	rcall	8000b5f2 <__malloc_unlock>
8000be92:	0a 9c       	mov	r12,r5
8000be94:	2f fd       	sub	sp,-4
8000be96:	d8 32       	popm	r0-r7,pc

8000be98 <_sbrk_r>:
8000be98:	d4 21       	pushm	r4-r7,lr
8000be9a:	30 08       	mov	r8,0
8000be9c:	18 97       	mov	r7,r12
8000be9e:	48 66       	lddpc	r6,8000beb4 <_sbrk_r+0x1c>
8000bea0:	16 9c       	mov	r12,r11
8000bea2:	8d 08       	st.w	r6[0x0],r8
8000bea4:	ce 4c       	rcall	8000c06c <_sbrk>
8000bea6:	5b fc       	cp.w	r12,-1
8000bea8:	c0 51       	brne	8000beb2 <_sbrk_r+0x1a>
8000beaa:	6c 08       	ld.w	r8,r6[0x0]
8000beac:	58 08       	cp.w	r8,0
8000beae:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000beb2:	d8 22       	popm	r4-r7,pc
8000beb4:	00 00       	add	r0,r0
8000beb6:	0c ec       	st.h	--r6,r12

8000beb8 <__isinfd>:
8000beb8:	14 98       	mov	r8,r10
8000beba:	fc 19 7f f0 	movh	r9,0x7ff0
8000bebe:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000bec2:	f0 0b 11 00 	rsub	r11,r8,0
8000bec6:	f7 e8 10 08 	or	r8,r11,r8
8000beca:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000bece:	f2 08 01 08 	sub	r8,r9,r8
8000bed2:	f0 0c 11 00 	rsub	r12,r8,0
8000bed6:	f9 e8 10 08 	or	r8,r12,r8
8000beda:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000bede:	2f fc       	sub	r12,-1
8000bee0:	5e fc       	retal	r12

8000bee2 <__isnand>:
8000bee2:	14 98       	mov	r8,r10
8000bee4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000bee8:	f0 0c 11 00 	rsub	r12,r8,0
8000beec:	10 4c       	or	r12,r8
8000beee:	fc 18 7f f0 	movh	r8,0x7ff0
8000bef2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000bef6:	f0 0c 01 0c 	sub	r12,r8,r12
8000befa:	bf 9c       	lsr	r12,0x1f
8000befc:	5e fc       	retal	r12
8000befe:	d7 03       	nop

8000bf00 <__sclose>:
8000bf00:	d4 01       	pushm	lr
8000bf02:	96 7b       	ld.sh	r11,r11[0xe]
8000bf04:	c1 2d       	rcall	8000c128 <_close_r>
8000bf06:	d8 02       	popm	pc

8000bf08 <__sseek>:
8000bf08:	d4 21       	pushm	r4-r7,lr
8000bf0a:	16 97       	mov	r7,r11
8000bf0c:	96 7b       	ld.sh	r11,r11[0xe]
8000bf0e:	c9 bd       	rcall	8000c244 <_lseek_r>
8000bf10:	8e 68       	ld.sh	r8,r7[0xc]
8000bf12:	10 99       	mov	r9,r8
8000bf14:	ad c9       	cbr	r9,0xc
8000bf16:	5b fc       	cp.w	r12,-1
8000bf18:	ef f9 0c 06 	st.heq	r7[0xc],r9
8000bf1c:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000bf20:	e0 69 10 00 	mov	r9,4096
8000bf24:	f1 d9 e1 38 	orne	r8,r8,r9
8000bf28:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000bf2c:	d8 22       	popm	r4-r7,pc
8000bf2e:	d7 03       	nop

8000bf30 <__swrite>:
8000bf30:	d4 21       	pushm	r4-r7,lr
8000bf32:	96 68       	ld.sh	r8,r11[0xc]
8000bf34:	16 97       	mov	r7,r11
8000bf36:	14 95       	mov	r5,r10
8000bf38:	12 94       	mov	r4,r9
8000bf3a:	e2 18 01 00 	andl	r8,0x100,COH
8000bf3e:	18 96       	mov	r6,r12
8000bf40:	c0 50       	breq	8000bf4a <__swrite+0x1a>
8000bf42:	30 29       	mov	r9,2
8000bf44:	30 0a       	mov	r10,0
8000bf46:	96 7b       	ld.sh	r11,r11[0xe]
8000bf48:	c7 ed       	rcall	8000c244 <_lseek_r>
8000bf4a:	8e 68       	ld.sh	r8,r7[0xc]
8000bf4c:	ad c8       	cbr	r8,0xc
8000bf4e:	08 99       	mov	r9,r4
8000bf50:	0a 9a       	mov	r10,r5
8000bf52:	8e 7b       	ld.sh	r11,r7[0xe]
8000bf54:	0c 9c       	mov	r12,r6
8000bf56:	ae 68       	st.h	r7[0xc],r8
8000bf58:	ca 8c       	rcall	8000c0a8 <_write_r>
8000bf5a:	d8 22       	popm	r4-r7,pc

8000bf5c <__sread>:
8000bf5c:	d4 21       	pushm	r4-r7,lr
8000bf5e:	16 97       	mov	r7,r11
8000bf60:	96 7b       	ld.sh	r11,r11[0xe]
8000bf62:	c8 5d       	rcall	8000c26c <_read_r>
8000bf64:	c0 65       	brlt	8000bf70 <__sread+0x14>
8000bf66:	6f 58       	ld.w	r8,r7[0x54]
8000bf68:	18 08       	add	r8,r12
8000bf6a:	ef 48 00 54 	st.w	r7[84],r8
8000bf6e:	d8 22       	popm	r4-r7,pc
8000bf70:	8e 68       	ld.sh	r8,r7[0xc]
8000bf72:	ad c8       	cbr	r8,0xc
8000bf74:	ae 68       	st.h	r7[0xc],r8
8000bf76:	d8 22       	popm	r4-r7,pc

8000bf78 <strlen>:
8000bf78:	30 09       	mov	r9,0
8000bf7a:	18 98       	mov	r8,r12
8000bf7c:	c0 28       	rjmp	8000bf80 <strlen+0x8>
8000bf7e:	2f f8       	sub	r8,-1
8000bf80:	11 8a       	ld.ub	r10,r8[0x0]
8000bf82:	f2 0a 18 00 	cp.b	r10,r9
8000bf86:	cf c1       	brne	8000bf7e <strlen+0x6>
8000bf88:	f0 0c 01 0c 	sub	r12,r8,r12
8000bf8c:	5e fc       	retal	r12
8000bf8e:	d7 03       	nop

8000bf90 <_close>:
8000bf90:	30 28       	mov	r8,2
8000bf92:	d6 73       	breakpoint
8000bf94:	3f fc       	mov	r12,-1
8000bf96:	35 8b       	mov	r11,88
8000bf98:	58 0c       	cp.w	r12,0
8000bf9a:	5e 4c       	retge	r12
8000bf9c:	48 2a       	lddpc	r10,8000bfa4 <_close+0x14>
8000bf9e:	95 0b       	st.w	r10[0x0],r11
8000bfa0:	5e fc       	retal	r12
8000bfa2:	d7 03       	nop
8000bfa4:	00 00       	add	r0,r0
8000bfa6:	0c ec       	st.h	--r6,r12

8000bfa8 <_lseek>:
8000bfa8:	30 58       	mov	r8,5
8000bfaa:	d6 73       	breakpoint
8000bfac:	3f fc       	mov	r12,-1
8000bfae:	35 8b       	mov	r11,88
8000bfb0:	58 0c       	cp.w	r12,0
8000bfb2:	5e 4c       	retge	r12
8000bfb4:	48 2a       	lddpc	r10,8000bfbc <_lseek+0x14>
8000bfb6:	95 0b       	st.w	r10[0x0],r11
8000bfb8:	5e fc       	retal	r12
8000bfba:	d7 03       	nop
8000bfbc:	00 00       	add	r0,r0
8000bfbe:	0c ec       	st.h	--r6,r12

8000bfc0 <_read>:
8000bfc0:	30 38       	mov	r8,3
8000bfc2:	d6 73       	breakpoint
8000bfc4:	3f fc       	mov	r12,-1
8000bfc6:	35 8b       	mov	r11,88
8000bfc8:	58 0c       	cp.w	r12,0
8000bfca:	5e 4c       	retge	r12
8000bfcc:	48 2a       	lddpc	r10,8000bfd4 <_read+0x14>
8000bfce:	95 0b       	st.w	r10[0x0],r11
8000bfd0:	5e fc       	retal	r12
8000bfd2:	d7 03       	nop
8000bfd4:	00 00       	add	r0,r0
8000bfd6:	0c ec       	st.h	--r6,r12

8000bfd8 <_write>:
8000bfd8:	30 48       	mov	r8,4
8000bfda:	d6 73       	breakpoint
8000bfdc:	3f fc       	mov	r12,-1
8000bfde:	35 8b       	mov	r11,88
8000bfe0:	58 0c       	cp.w	r12,0
8000bfe2:	5e 4c       	retge	r12
8000bfe4:	48 2a       	lddpc	r10,8000bfec <_write+0x14>
8000bfe6:	95 0b       	st.w	r10[0x0],r11
8000bfe8:	5e fc       	retal	r12
8000bfea:	d7 03       	nop
8000bfec:	00 00       	add	r0,r0
8000bfee:	0c ec       	st.h	--r6,r12

8000bff0 <isatty>:
8000bff0:	30 b8       	mov	r8,11
8000bff2:	d6 73       	breakpoint
8000bff4:	3f fc       	mov	r12,-1
8000bff6:	35 8b       	mov	r11,88
8000bff8:	58 0c       	cp.w	r12,0
8000bffa:	5e 4c       	retge	r12
8000bffc:	48 2a       	lddpc	r10,8000c004 <isatty+0x14>
8000bffe:	95 0b       	st.w	r10[0x0],r11
8000c000:	5e fc       	retal	r12
8000c002:	d7 03       	nop
8000c004:	00 00       	add	r0,r0
8000c006:	0c ec       	st.h	--r6,r12

8000c008 <_fstat_host>:
8000c008:	30 98       	mov	r8,9
8000c00a:	d6 73       	breakpoint
8000c00c:	3f fc       	mov	r12,-1
8000c00e:	35 8b       	mov	r11,88
8000c010:	58 0c       	cp.w	r12,0
8000c012:	5e 4c       	retge	r12
8000c014:	48 2a       	lddpc	r10,8000c01c <_fstat_host+0x14>
8000c016:	95 0b       	st.w	r10[0x0],r11
8000c018:	5e fc       	retal	r12
8000c01a:	d7 03       	nop
8000c01c:	00 00       	add	r0,r0
8000c01e:	0c ec       	st.h	--r6,r12

8000c020 <_fstat>:
8000c020:	d4 21       	pushm	r4-r7,lr
8000c022:	21 0d       	sub	sp,64
8000c024:	16 97       	mov	r7,r11
8000c026:	1a 9b       	mov	r11,sp
8000c028:	cf 0f       	rcall	8000c008 <_fstat_host>
8000c02a:	c0 34       	brge	8000c030 <_fstat+0x10>
8000c02c:	3f fc       	mov	r12,-1
8000c02e:	c1 c8       	rjmp	8000c066 <_fstat+0x46>
8000c030:	40 08       	lddsp	r8,sp[0x0]
8000c032:	ae 08       	st.h	r7[0x0],r8
8000c034:	40 18       	lddsp	r8,sp[0x4]
8000c036:	ae 18       	st.h	r7[0x2],r8
8000c038:	40 28       	lddsp	r8,sp[0x8]
8000c03a:	8f 18       	st.w	r7[0x4],r8
8000c03c:	40 38       	lddsp	r8,sp[0xc]
8000c03e:	ae 48       	st.h	r7[0x8],r8
8000c040:	40 48       	lddsp	r8,sp[0x10]
8000c042:	ae 58       	st.h	r7[0xa],r8
8000c044:	40 58       	lddsp	r8,sp[0x14]
8000c046:	ae 68       	st.h	r7[0xc],r8
8000c048:	40 68       	lddsp	r8,sp[0x18]
8000c04a:	ae 78       	st.h	r7[0xe],r8
8000c04c:	40 88       	lddsp	r8,sp[0x20]
8000c04e:	8f 48       	st.w	r7[0x10],r8
8000c050:	40 a8       	lddsp	r8,sp[0x28]
8000c052:	8f b8       	st.w	r7[0x2c],r8
8000c054:	40 c8       	lddsp	r8,sp[0x30]
8000c056:	8f c8       	st.w	r7[0x30],r8
8000c058:	40 d8       	lddsp	r8,sp[0x34]
8000c05a:	8f 58       	st.w	r7[0x14],r8
8000c05c:	40 e8       	lddsp	r8,sp[0x38]
8000c05e:	30 0c       	mov	r12,0
8000c060:	8f 78       	st.w	r7[0x1c],r8
8000c062:	40 f8       	lddsp	r8,sp[0x3c]
8000c064:	8f 98       	st.w	r7[0x24],r8
8000c066:	2f 0d       	sub	sp,-64
8000c068:	d8 22       	popm	r4-r7,pc
8000c06a:	d7 03       	nop

8000c06c <_sbrk>:
8000c06c:	d4 01       	pushm	lr
8000c06e:	48 c8       	lddpc	r8,8000c09c <_sbrk+0x30>
8000c070:	70 09       	ld.w	r9,r8[0x0]
8000c072:	58 09       	cp.w	r9,0
8000c074:	c0 31       	brne	8000c07a <_sbrk+0xe>
8000c076:	48 b9       	lddpc	r9,8000c0a0 <_sbrk+0x34>
8000c078:	91 09       	st.w	r8[0x0],r9
8000c07a:	48 99       	lddpc	r9,8000c09c <_sbrk+0x30>
8000c07c:	48 aa       	lddpc	r10,8000c0a4 <_sbrk+0x38>
8000c07e:	72 08       	ld.w	r8,r9[0x0]
8000c080:	f0 0c 00 0c 	add	r12,r8,r12
8000c084:	14 3c       	cp.w	r12,r10
8000c086:	e0 8b 00 04 	brhi	8000c08e <_sbrk+0x22>
8000c08a:	93 0c       	st.w	r9[0x0],r12
8000c08c:	c0 58       	rjmp	8000c096 <_sbrk+0x2a>
8000c08e:	c5 dc       	rcall	8000c148 <__errno>
8000c090:	30 c8       	mov	r8,12
8000c092:	99 08       	st.w	r12[0x0],r8
8000c094:	3f f8       	mov	r8,-1
8000c096:	10 9c       	mov	r12,r8
8000c098:	d8 02       	popm	pc
8000c09a:	d7 03       	nop
8000c09c:	00 00       	add	r0,r0
8000c09e:	07 58       	ld.sh	r8,--r3
8000c0a0:	00 00       	add	r0,r0
8000c0a2:	0c f0       	st.b	--r6,r0
8000c0a4:	00 00       	add	r0,r0
8000c0a6:	f0 00       	*unknown*

8000c0a8 <_write_r>:
8000c0a8:	d4 21       	pushm	r4-r7,lr
8000c0aa:	16 98       	mov	r8,r11
8000c0ac:	18 97       	mov	r7,r12
8000c0ae:	10 9c       	mov	r12,r8
8000c0b0:	30 08       	mov	r8,0
8000c0b2:	14 9b       	mov	r11,r10
8000c0b4:	48 66       	lddpc	r6,8000c0cc <_write_r+0x24>
8000c0b6:	12 9a       	mov	r10,r9
8000c0b8:	8d 08       	st.w	r6[0x0],r8
8000c0ba:	c8 ff       	rcall	8000bfd8 <_write>
8000c0bc:	5b fc       	cp.w	r12,-1
8000c0be:	c0 51       	brne	8000c0c8 <_write_r+0x20>
8000c0c0:	6c 08       	ld.w	r8,r6[0x0]
8000c0c2:	58 08       	cp.w	r8,0
8000c0c4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c0c8:	d8 22       	popm	r4-r7,pc
8000c0ca:	d7 03       	nop
8000c0cc:	00 00       	add	r0,r0
8000c0ce:	0c ec       	st.h	--r6,r12

8000c0d0 <_calloc_r>:
8000c0d0:	d4 21       	pushm	r4-r7,lr
8000c0d2:	f4 0b 02 4b 	mul	r11,r10,r11
8000c0d6:	fe b0 f8 49 	rcall	8000b168 <_malloc_r>
8000c0da:	18 97       	mov	r7,r12
8000c0dc:	c2 30       	breq	8000c122 <_calloc_r+0x52>
8000c0de:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000c0e2:	e0 1a ff fc 	andl	r10,0xfffc
8000c0e6:	20 4a       	sub	r10,4
8000c0e8:	e0 4a 00 24 	cp.w	r10,36
8000c0ec:	e0 8b 00 18 	brhi	8000c11c <_calloc_r+0x4c>
8000c0f0:	18 98       	mov	r8,r12
8000c0f2:	59 3a       	cp.w	r10,19
8000c0f4:	e0 88 00 0f 	brls	8000c112 <_calloc_r+0x42>
8000c0f8:	30 09       	mov	r9,0
8000c0fa:	10 a9       	st.w	r8++,r9
8000c0fc:	10 a9       	st.w	r8++,r9
8000c0fe:	59 ba       	cp.w	r10,27
8000c100:	e0 88 00 09 	brls	8000c112 <_calloc_r+0x42>
8000c104:	10 a9       	st.w	r8++,r9
8000c106:	10 a9       	st.w	r8++,r9
8000c108:	e0 4a 00 24 	cp.w	r10,36
8000c10c:	c0 31       	brne	8000c112 <_calloc_r+0x42>
8000c10e:	10 a9       	st.w	r8++,r9
8000c110:	10 a9       	st.w	r8++,r9
8000c112:	30 09       	mov	r9,0
8000c114:	10 a9       	st.w	r8++,r9
8000c116:	91 19       	st.w	r8[0x4],r9
8000c118:	91 09       	st.w	r8[0x0],r9
8000c11a:	c0 48       	rjmp	8000c122 <_calloc_r+0x52>
8000c11c:	30 0b       	mov	r11,0
8000c11e:	fe b0 db c4 	rcall	800078a6 <memset>
8000c122:	0e 9c       	mov	r12,r7
8000c124:	d8 22       	popm	r4-r7,pc
8000c126:	d7 03       	nop

8000c128 <_close_r>:
8000c128:	d4 21       	pushm	r4-r7,lr
8000c12a:	30 08       	mov	r8,0
8000c12c:	18 97       	mov	r7,r12
8000c12e:	48 66       	lddpc	r6,8000c144 <_close_r+0x1c>
8000c130:	16 9c       	mov	r12,r11
8000c132:	8d 08       	st.w	r6[0x0],r8
8000c134:	c2 ef       	rcall	8000bf90 <_close>
8000c136:	5b fc       	cp.w	r12,-1
8000c138:	c0 51       	brne	8000c142 <_close_r+0x1a>
8000c13a:	6c 08       	ld.w	r8,r6[0x0]
8000c13c:	58 08       	cp.w	r8,0
8000c13e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c142:	d8 22       	popm	r4-r7,pc
8000c144:	00 00       	add	r0,r0
8000c146:	0c ec       	st.h	--r6,r12

8000c148 <__errno>:
8000c148:	48 28       	lddpc	r8,8000c150 <__errno+0x8>
8000c14a:	70 0c       	ld.w	r12,r8[0x0]
8000c14c:	2f 4c       	sub	r12,-12
8000c14e:	5e fc       	retal	r12
8000c150:	00 00       	add	r0,r0
8000c152:	01 00       	ld.w	r0,r0++

8000c154 <_fclose_r>:
8000c154:	d4 21       	pushm	r4-r7,lr
8000c156:	18 96       	mov	r6,r12
8000c158:	16 97       	mov	r7,r11
8000c15a:	58 0b       	cp.w	r11,0
8000c15c:	c0 31       	brne	8000c162 <_fclose_r+0xe>
8000c15e:	16 95       	mov	r5,r11
8000c160:	c5 08       	rjmp	8000c200 <_fclose_r+0xac>
8000c162:	fe b0 f4 65 	rcall	8000aa2c <__sfp_lock_acquire>
8000c166:	58 06       	cp.w	r6,0
8000c168:	c0 70       	breq	8000c176 <_fclose_r+0x22>
8000c16a:	6c 68       	ld.w	r8,r6[0x18]
8000c16c:	58 08       	cp.w	r8,0
8000c16e:	c0 41       	brne	8000c176 <_fclose_r+0x22>
8000c170:	0c 9c       	mov	r12,r6
8000c172:	fe b0 f4 b1 	rcall	8000aad4 <__sinit>
8000c176:	4a 48       	lddpc	r8,8000c204 <_fclose_r+0xb0>
8000c178:	10 37       	cp.w	r7,r8
8000c17a:	c0 31       	brne	8000c180 <_fclose_r+0x2c>
8000c17c:	6c 07       	ld.w	r7,r6[0x0]
8000c17e:	c0 a8       	rjmp	8000c192 <_fclose_r+0x3e>
8000c180:	4a 28       	lddpc	r8,8000c208 <_fclose_r+0xb4>
8000c182:	10 37       	cp.w	r7,r8
8000c184:	c0 31       	brne	8000c18a <_fclose_r+0x36>
8000c186:	6c 17       	ld.w	r7,r6[0x4]
8000c188:	c0 58       	rjmp	8000c192 <_fclose_r+0x3e>
8000c18a:	4a 18       	lddpc	r8,8000c20c <_fclose_r+0xb8>
8000c18c:	10 37       	cp.w	r7,r8
8000c18e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000c192:	8e 69       	ld.sh	r9,r7[0xc]
8000c194:	30 08       	mov	r8,0
8000c196:	f0 09 19 00 	cp.h	r9,r8
8000c19a:	c0 51       	brne	8000c1a4 <_fclose_r+0x50>
8000c19c:	fe b0 f4 49 	rcall	8000aa2e <__sfp_lock_release>
8000c1a0:	30 05       	mov	r5,0
8000c1a2:	c2 f8       	rjmp	8000c200 <_fclose_r+0xac>
8000c1a4:	0e 9b       	mov	r11,r7
8000c1a6:	0c 9c       	mov	r12,r6
8000c1a8:	fe b0 f3 ba 	rcall	8000a91c <_fflush_r>
8000c1ac:	6e c8       	ld.w	r8,r7[0x30]
8000c1ae:	18 95       	mov	r5,r12
8000c1b0:	58 08       	cp.w	r8,0
8000c1b2:	c0 60       	breq	8000c1be <_fclose_r+0x6a>
8000c1b4:	6e 8b       	ld.w	r11,r7[0x20]
8000c1b6:	0c 9c       	mov	r12,r6
8000c1b8:	5d 18       	icall	r8
8000c1ba:	f9 b5 05 ff 	movlt	r5,-1
8000c1be:	8e 68       	ld.sh	r8,r7[0xc]
8000c1c0:	ed b8 00 07 	bld	r8,0x7
8000c1c4:	c0 51       	brne	8000c1ce <_fclose_r+0x7a>
8000c1c6:	6e 4b       	ld.w	r11,r7[0x10]
8000c1c8:	0c 9c       	mov	r12,r6
8000c1ca:	fe b0 f5 21 	rcall	8000ac0c <_free_r>
8000c1ce:	6e db       	ld.w	r11,r7[0x34]
8000c1d0:	58 0b       	cp.w	r11,0
8000c1d2:	c0 a0       	breq	8000c1e6 <_fclose_r+0x92>
8000c1d4:	ee c8 ff bc 	sub	r8,r7,-68
8000c1d8:	10 3b       	cp.w	r11,r8
8000c1da:	c0 40       	breq	8000c1e2 <_fclose_r+0x8e>
8000c1dc:	0c 9c       	mov	r12,r6
8000c1de:	fe b0 f5 17 	rcall	8000ac0c <_free_r>
8000c1e2:	30 08       	mov	r8,0
8000c1e4:	8f d8       	st.w	r7[0x34],r8
8000c1e6:	6f 2b       	ld.w	r11,r7[0x48]
8000c1e8:	58 0b       	cp.w	r11,0
8000c1ea:	c0 70       	breq	8000c1f8 <_fclose_r+0xa4>
8000c1ec:	0c 9c       	mov	r12,r6
8000c1ee:	fe b0 f5 0f 	rcall	8000ac0c <_free_r>
8000c1f2:	30 08       	mov	r8,0
8000c1f4:	ef 48 00 48 	st.w	r7[72],r8
8000c1f8:	30 08       	mov	r8,0
8000c1fa:	ae 68       	st.h	r7[0xc],r8
8000c1fc:	fe b0 f4 19 	rcall	8000aa2e <__sfp_lock_release>
8000c200:	0a 9c       	mov	r12,r5
8000c202:	d8 22       	popm	r4-r7,pc
8000c204:	80 00       	ld.sh	r0,r0[0x0]
8000c206:	e0 04       	*unknown*
8000c208:	80 00       	ld.sh	r0,r0[0x0]
8000c20a:	e0 24 80 00 	sub	r4,32768
8000c20e:	e0 44 d4 01 	cp.w	r4,54273

8000c210 <fclose>:
8000c210:	d4 01       	pushm	lr
8000c212:	48 38       	lddpc	r8,8000c21c <fclose+0xc>
8000c214:	18 9b       	mov	r11,r12
8000c216:	70 0c       	ld.w	r12,r8[0x0]
8000c218:	c9 ef       	rcall	8000c154 <_fclose_r>
8000c21a:	d8 02       	popm	pc
8000c21c:	00 00       	add	r0,r0
8000c21e:	01 00       	ld.w	r0,r0++

8000c220 <_fstat_r>:
8000c220:	d4 21       	pushm	r4-r7,lr
8000c222:	16 98       	mov	r8,r11
8000c224:	18 97       	mov	r7,r12
8000c226:	10 9c       	mov	r12,r8
8000c228:	30 08       	mov	r8,0
8000c22a:	48 66       	lddpc	r6,8000c240 <_fstat_r+0x20>
8000c22c:	14 9b       	mov	r11,r10
8000c22e:	8d 08       	st.w	r6[0x0],r8
8000c230:	cf 8e       	rcall	8000c020 <_fstat>
8000c232:	5b fc       	cp.w	r12,-1
8000c234:	c0 51       	brne	8000c23e <_fstat_r+0x1e>
8000c236:	6c 08       	ld.w	r8,r6[0x0]
8000c238:	58 08       	cp.w	r8,0
8000c23a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c23e:	d8 22       	popm	r4-r7,pc
8000c240:	00 00       	add	r0,r0
8000c242:	0c ec       	st.h	--r6,r12

8000c244 <_lseek_r>:
8000c244:	d4 21       	pushm	r4-r7,lr
8000c246:	16 98       	mov	r8,r11
8000c248:	18 97       	mov	r7,r12
8000c24a:	10 9c       	mov	r12,r8
8000c24c:	30 08       	mov	r8,0
8000c24e:	14 9b       	mov	r11,r10
8000c250:	48 66       	lddpc	r6,8000c268 <_lseek_r+0x24>
8000c252:	12 9a       	mov	r10,r9
8000c254:	8d 08       	st.w	r6[0x0],r8
8000c256:	ca 9e       	rcall	8000bfa8 <_lseek>
8000c258:	5b fc       	cp.w	r12,-1
8000c25a:	c0 51       	brne	8000c264 <_lseek_r+0x20>
8000c25c:	6c 08       	ld.w	r8,r6[0x0]
8000c25e:	58 08       	cp.w	r8,0
8000c260:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c264:	d8 22       	popm	r4-r7,pc
8000c266:	d7 03       	nop
8000c268:	00 00       	add	r0,r0
8000c26a:	0c ec       	st.h	--r6,r12

8000c26c <_read_r>:
8000c26c:	d4 21       	pushm	r4-r7,lr
8000c26e:	16 98       	mov	r8,r11
8000c270:	18 97       	mov	r7,r12
8000c272:	10 9c       	mov	r12,r8
8000c274:	30 08       	mov	r8,0
8000c276:	14 9b       	mov	r11,r10
8000c278:	48 66       	lddpc	r6,8000c290 <_read_r+0x24>
8000c27a:	12 9a       	mov	r10,r9
8000c27c:	8d 08       	st.w	r6[0x0],r8
8000c27e:	ca 1e       	rcall	8000bfc0 <_read>
8000c280:	5b fc       	cp.w	r12,-1
8000c282:	c0 51       	brne	8000c28c <_read_r+0x20>
8000c284:	6c 08       	ld.w	r8,r6[0x0]
8000c286:	58 08       	cp.w	r8,0
8000c288:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c28c:	d8 22       	popm	r4-r7,pc
8000c28e:	d7 03       	nop
8000c290:	00 00       	add	r0,r0
8000c292:	0c ec       	st.h	--r6,r12

8000c294 <__avr32_f64_mul>:
8000c294:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000c298:	e0 80 00 dc 	breq	8000c450 <__avr32_f64_mul_op1_zero>
8000c29c:	d4 21       	pushm	r4-r7,lr
8000c29e:	f7 e9 20 0e 	eor	lr,r11,r9
8000c2a2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c2a6:	30 15       	mov	r5,1
8000c2a8:	c4 30       	breq	8000c32e <__avr32_f64_mul_op1_subnormal>
8000c2aa:	ab 6b       	lsl	r11,0xa
8000c2ac:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000c2b0:	ab 6a       	lsl	r10,0xa
8000c2b2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000c2b6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c2ba:	c5 c0       	breq	8000c372 <__avr32_f64_mul_op2_subnormal>
8000c2bc:	a1 78       	lsl	r8,0x1
8000c2be:	5c f9       	rol	r9
8000c2c0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000c2c4:	e0 47 07 ff 	cp.w	r7,2047
8000c2c8:	c7 70       	breq	8000c3b6 <__avr32_f64_mul_op_nan_or_inf>
8000c2ca:	e0 46 07 ff 	cp.w	r6,2047
8000c2ce:	c7 40       	breq	8000c3b6 <__avr32_f64_mul_op_nan_or_inf>
8000c2d0:	ee 06 00 0c 	add	r12,r7,r6
8000c2d4:	e0 2c 03 fe 	sub	r12,1022
8000c2d8:	f6 08 06 44 	mulu.d	r4,r11,r8
8000c2dc:	f4 09 07 44 	macu.d	r4,r10,r9
8000c2e0:	f4 08 06 46 	mulu.d	r6,r10,r8
8000c2e4:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000c2e8:	08 07       	add	r7,r4
8000c2ea:	f4 05 00 4a 	adc	r10,r10,r5
8000c2ee:	5c 0b       	acr	r11
8000c2f0:	ed bb 00 14 	bld	r11,0x14
8000c2f4:	c0 50       	breq	8000c2fe <__avr32_f64_mul+0x6a>
8000c2f6:	a1 77       	lsl	r7,0x1
8000c2f8:	5c fa       	rol	r10
8000c2fa:	5c fb       	rol	r11
8000c2fc:	20 1c       	sub	r12,1
8000c2fe:	58 0c       	cp.w	r12,0
8000c300:	e0 8a 00 6f 	brle	8000c3de <__avr32_f64_mul_res_subnormal>
8000c304:	e0 4c 07 ff 	cp.w	r12,2047
8000c308:	e0 84 00 9c 	brge	8000c440 <__avr32_f64_mul_res_inf>
8000c30c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000c310:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000c314:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000c318:	ee 17 80 00 	eorh	r7,0x8000
8000c31c:	f1 b7 04 20 	satu	r7,0x1
8000c320:	0e 0a       	add	r10,r7
8000c322:	5c 0b       	acr	r11
8000c324:	ed be 00 1f 	bld	lr,0x1f
8000c328:	ef bb 00 1f 	bst	r11,0x1f
8000c32c:	d8 22       	popm	r4-r7,pc

8000c32e <__avr32_f64_mul_op1_subnormal>:
8000c32e:	e4 1b 00 0f 	andh	r11,0xf
8000c332:	f4 0c 12 00 	clz	r12,r10
8000c336:	f6 06 12 00 	clz	r6,r11
8000c33a:	f7 bc 03 e1 	sublo	r12,-31
8000c33e:	f8 06 17 30 	movlo	r6,r12
8000c342:	f7 b6 02 01 	subhs	r6,1
8000c346:	e0 46 00 20 	cp.w	r6,32
8000c34a:	c0 d4       	brge	8000c364 <__avr32_f64_mul_op1_subnormal+0x36>
8000c34c:	ec 0c 11 20 	rsub	r12,r6,32
8000c350:	f6 06 09 4b 	lsl	r11,r11,r6
8000c354:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000c358:	18 4b       	or	r11,r12
8000c35a:	f4 06 09 4a 	lsl	r10,r10,r6
8000c35e:	20 b6       	sub	r6,11
8000c360:	0c 17       	sub	r7,r6
8000c362:	ca ab       	rjmp	8000c2b6 <__avr32_f64_mul+0x22>
8000c364:	f4 06 09 4b 	lsl	r11,r10,r6
8000c368:	c6 40       	breq	8000c430 <__avr32_f64_mul_res_zero>
8000c36a:	30 0a       	mov	r10,0
8000c36c:	20 b6       	sub	r6,11
8000c36e:	0c 17       	sub	r7,r6
8000c370:	ca 3b       	rjmp	8000c2b6 <__avr32_f64_mul+0x22>

8000c372 <__avr32_f64_mul_op2_subnormal>:
8000c372:	e4 19 00 0f 	andh	r9,0xf
8000c376:	f0 0c 12 00 	clz	r12,r8
8000c37a:	f2 05 12 00 	clz	r5,r9
8000c37e:	f7 bc 03 ea 	sublo	r12,-22
8000c382:	f8 05 17 30 	movlo	r5,r12
8000c386:	f7 b5 02 0a 	subhs	r5,10
8000c38a:	e0 45 00 20 	cp.w	r5,32
8000c38e:	c0 d4       	brge	8000c3a8 <__avr32_f64_mul_op2_subnormal+0x36>
8000c390:	ea 0c 11 20 	rsub	r12,r5,32
8000c394:	f2 05 09 49 	lsl	r9,r9,r5
8000c398:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000c39c:	18 49       	or	r9,r12
8000c39e:	f0 05 09 48 	lsl	r8,r8,r5
8000c3a2:	20 25       	sub	r5,2
8000c3a4:	0a 16       	sub	r6,r5
8000c3a6:	c8 fb       	rjmp	8000c2c4 <__avr32_f64_mul+0x30>
8000c3a8:	f0 05 09 49 	lsl	r9,r8,r5
8000c3ac:	c4 20       	breq	8000c430 <__avr32_f64_mul_res_zero>
8000c3ae:	30 08       	mov	r8,0
8000c3b0:	20 25       	sub	r5,2
8000c3b2:	0a 16       	sub	r6,r5
8000c3b4:	c8 8b       	rjmp	8000c2c4 <__avr32_f64_mul+0x30>

8000c3b6 <__avr32_f64_mul_op_nan_or_inf>:
8000c3b6:	e4 19 00 0f 	andh	r9,0xf
8000c3ba:	e4 1b 00 0f 	andh	r11,0xf
8000c3be:	14 4b       	or	r11,r10
8000c3c0:	10 49       	or	r9,r8
8000c3c2:	e0 47 07 ff 	cp.w	r7,2047
8000c3c6:	c0 91       	brne	8000c3d8 <__avr32_f64_mul_op1_not_naninf>
8000c3c8:	58 0b       	cp.w	r11,0
8000c3ca:	c3 81       	brne	8000c43a <__avr32_f64_mul_res_nan>
8000c3cc:	e0 46 07 ff 	cp.w	r6,2047
8000c3d0:	c3 81       	brne	8000c440 <__avr32_f64_mul_res_inf>
8000c3d2:	58 09       	cp.w	r9,0
8000c3d4:	c3 60       	breq	8000c440 <__avr32_f64_mul_res_inf>
8000c3d6:	c3 28       	rjmp	8000c43a <__avr32_f64_mul_res_nan>

8000c3d8 <__avr32_f64_mul_op1_not_naninf>:
8000c3d8:	58 09       	cp.w	r9,0
8000c3da:	c3 30       	breq	8000c440 <__avr32_f64_mul_res_inf>
8000c3dc:	c2 f8       	rjmp	8000c43a <__avr32_f64_mul_res_nan>

8000c3de <__avr32_f64_mul_res_subnormal>:
8000c3de:	5c 3c       	neg	r12
8000c3e0:	2f fc       	sub	r12,-1
8000c3e2:	f1 bc 04 c0 	satu	r12,0x6
8000c3e6:	e0 4c 00 20 	cp.w	r12,32
8000c3ea:	c1 14       	brge	8000c40c <__avr32_f64_mul_res_subnormal+0x2e>
8000c3ec:	f8 08 11 20 	rsub	r8,r12,32
8000c3f0:	0e 46       	or	r6,r7
8000c3f2:	ee 0c 0a 47 	lsr	r7,r7,r12
8000c3f6:	f4 08 09 49 	lsl	r9,r10,r8
8000c3fa:	12 47       	or	r7,r9
8000c3fc:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c400:	f6 08 09 49 	lsl	r9,r11,r8
8000c404:	12 4a       	or	r10,r9
8000c406:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c40a:	c8 3b       	rjmp	8000c310 <__avr32_f64_mul+0x7c>
8000c40c:	f8 08 11 20 	rsub	r8,r12,32
8000c410:	f9 b9 00 00 	moveq	r9,0
8000c414:	c0 30       	breq	8000c41a <__avr32_f64_mul_res_subnormal+0x3c>
8000c416:	f6 08 09 49 	lsl	r9,r11,r8
8000c41a:	0e 46       	or	r6,r7
8000c41c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000c420:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c424:	f3 ea 10 07 	or	r7,r9,r10
8000c428:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000c42c:	30 0b       	mov	r11,0
8000c42e:	c7 1b       	rjmp	8000c310 <__avr32_f64_mul+0x7c>

8000c430 <__avr32_f64_mul_res_zero>:
8000c430:	1c 9b       	mov	r11,lr
8000c432:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c436:	30 0a       	mov	r10,0
8000c438:	d8 22       	popm	r4-r7,pc

8000c43a <__avr32_f64_mul_res_nan>:
8000c43a:	3f fb       	mov	r11,-1
8000c43c:	3f fa       	mov	r10,-1
8000c43e:	d8 22       	popm	r4-r7,pc

8000c440 <__avr32_f64_mul_res_inf>:
8000c440:	f0 6b 00 00 	mov	r11,-1048576
8000c444:	ed be 00 1f 	bld	lr,0x1f
8000c448:	ef bb 00 1f 	bst	r11,0x1f
8000c44c:	30 0a       	mov	r10,0
8000c44e:	d8 22       	popm	r4-r7,pc

8000c450 <__avr32_f64_mul_op1_zero>:
8000c450:	f7 e9 20 0b 	eor	r11,r11,r9
8000c454:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c458:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000c45c:	e0 4c 07 ff 	cp.w	r12,2047
8000c460:	5e 1c       	retne	r12
8000c462:	3f fa       	mov	r10,-1
8000c464:	3f fb       	mov	r11,-1
8000c466:	5e fc       	retal	r12

8000c468 <__avr32_f64_sub_from_add>:
8000c468:	ee 19 80 00 	eorh	r9,0x8000

8000c46c <__avr32_f64_sub>:
8000c46c:	f7 e9 20 0c 	eor	r12,r11,r9
8000c470:	e0 86 00 ca 	brmi	8000c604 <__avr32_f64_add_from_sub>
8000c474:	eb cd 40 e0 	pushm	r5-r7,lr
8000c478:	16 9c       	mov	r12,r11
8000c47a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c47e:	bf db       	cbr	r11,0x1f
8000c480:	bf d9       	cbr	r9,0x1f
8000c482:	10 3a       	cp.w	r10,r8
8000c484:	f2 0b 13 00 	cpc	r11,r9
8000c488:	c0 92       	brcc	8000c49a <__avr32_f64_sub+0x2e>
8000c48a:	16 97       	mov	r7,r11
8000c48c:	12 9b       	mov	r11,r9
8000c48e:	0e 99       	mov	r9,r7
8000c490:	14 97       	mov	r7,r10
8000c492:	10 9a       	mov	r10,r8
8000c494:	0e 98       	mov	r8,r7
8000c496:	ee 1c 80 00 	eorh	r12,0x8000
8000c49a:	f6 07 16 14 	lsr	r7,r11,0x14
8000c49e:	ab 7b       	lsl	r11,0xb
8000c4a0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c4a4:	ab 7a       	lsl	r10,0xb
8000c4a6:	bf bb       	sbr	r11,0x1f
8000c4a8:	f2 06 16 14 	lsr	r6,r9,0x14
8000c4ac:	c4 40       	breq	8000c534 <__avr32_f64_sub_opL_subnormal>
8000c4ae:	ab 79       	lsl	r9,0xb
8000c4b0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c4b4:	ab 78       	lsl	r8,0xb
8000c4b6:	bf b9       	sbr	r9,0x1f

8000c4b8 <__avr32_f64_sub_opL_subnormal_done>:
8000c4b8:	e0 47 07 ff 	cp.w	r7,2047
8000c4bc:	c4 f0       	breq	8000c55a <__avr32_f64_sub_opH_nan_or_inf>
8000c4be:	0e 26       	rsub	r6,r7
8000c4c0:	c1 20       	breq	8000c4e4 <__avr32_f64_sub_shift_done>
8000c4c2:	ec 05 11 20 	rsub	r5,r6,32
8000c4c6:	e0 46 00 20 	cp.w	r6,32
8000c4ca:	c7 c2       	brcc	8000c5c2 <__avr32_f64_sub_longshift>
8000c4cc:	f0 05 09 4e 	lsl	lr,r8,r5
8000c4d0:	f2 05 09 45 	lsl	r5,r9,r5
8000c4d4:	f0 06 0a 48 	lsr	r8,r8,r6
8000c4d8:	f2 06 0a 49 	lsr	r9,r9,r6
8000c4dc:	0a 48       	or	r8,r5
8000c4de:	58 0e       	cp.w	lr,0
8000c4e0:	5f 1e       	srne	lr
8000c4e2:	1c 48       	or	r8,lr

8000c4e4 <__avr32_f64_sub_shift_done>:
8000c4e4:	10 1a       	sub	r10,r8
8000c4e6:	f6 09 01 4b 	sbc	r11,r11,r9
8000c4ea:	f6 06 12 00 	clz	r6,r11
8000c4ee:	c0 e0       	breq	8000c50a <__avr32_f64_sub_longnormalize_done>
8000c4f0:	c7 83       	brcs	8000c5e0 <__avr32_f64_sub_longnormalize>
8000c4f2:	ec 0e 11 20 	rsub	lr,r6,32
8000c4f6:	f6 06 09 4b 	lsl	r11,r11,r6
8000c4fa:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c4fe:	1c 4b       	or	r11,lr
8000c500:	f4 06 09 4a 	lsl	r10,r10,r6
8000c504:	0c 17       	sub	r7,r6
8000c506:	e0 8a 00 39 	brle	8000c578 <__avr32_f64_sub_subnormal_result>

8000c50a <__avr32_f64_sub_longnormalize_done>:
8000c50a:	f4 09 15 15 	lsl	r9,r10,0x15
8000c50e:	ab 9a       	lsr	r10,0xb
8000c510:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c514:	ab 9b       	lsr	r11,0xb
8000c516:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c51a:	18 4b       	or	r11,r12

8000c51c <__avr32_f64_sub_round>:
8000c51c:	fc 17 80 00 	movh	r7,0x8000
8000c520:	ed ba 00 00 	bld	r10,0x0
8000c524:	f7 b7 01 ff 	subne	r7,-1
8000c528:	0e 39       	cp.w	r9,r7
8000c52a:	5f 29       	srhs	r9
8000c52c:	12 0a       	add	r10,r9
8000c52e:	5c 0b       	acr	r11
8000c530:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c534 <__avr32_f64_sub_opL_subnormal>:
8000c534:	ab 79       	lsl	r9,0xb
8000c536:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c53a:	ab 78       	lsl	r8,0xb
8000c53c:	f3 e8 10 0e 	or	lr,r9,r8
8000c540:	f9 b6 01 01 	movne	r6,1
8000c544:	ee 0e 11 00 	rsub	lr,r7,0
8000c548:	f9 b7 00 01 	moveq	r7,1
8000c54c:	ef bb 00 1f 	bst	r11,0x1f
8000c550:	f7 ea 10 0e 	or	lr,r11,r10
8000c554:	f9 b7 00 00 	moveq	r7,0
8000c558:	cb 0b       	rjmp	8000c4b8 <__avr32_f64_sub_opL_subnormal_done>

8000c55a <__avr32_f64_sub_opH_nan_or_inf>:
8000c55a:	bf db       	cbr	r11,0x1f
8000c55c:	f7 ea 10 0e 	or	lr,r11,r10
8000c560:	c0 81       	brne	8000c570 <__avr32_f64_sub_return_nan>
8000c562:	e0 46 07 ff 	cp.w	r6,2047
8000c566:	c0 50       	breq	8000c570 <__avr32_f64_sub_return_nan>
8000c568:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000c56c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c570 <__avr32_f64_sub_return_nan>:
8000c570:	3f fa       	mov	r10,-1
8000c572:	3f fb       	mov	r11,-1
8000c574:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c578 <__avr32_f64_sub_subnormal_result>:
8000c578:	5c 37       	neg	r7
8000c57a:	2f f7       	sub	r7,-1
8000c57c:	f1 b7 04 c0 	satu	r7,0x6
8000c580:	e0 47 00 20 	cp.w	r7,32
8000c584:	c1 14       	brge	8000c5a6 <__avr32_f64_sub_subnormal_result+0x2e>
8000c586:	ee 08 11 20 	rsub	r8,r7,32
8000c58a:	f4 08 09 49 	lsl	r9,r10,r8
8000c58e:	5f 16       	srne	r6
8000c590:	f4 07 0a 4a 	lsr	r10,r10,r7
8000c594:	0c 4a       	or	r10,r6
8000c596:	f6 08 09 49 	lsl	r9,r11,r8
8000c59a:	f5 e9 10 0a 	or	r10,r10,r9
8000c59e:	f4 07 0a 4b 	lsr	r11,r10,r7
8000c5a2:	30 07       	mov	r7,0
8000c5a4:	cb 3b       	rjmp	8000c50a <__avr32_f64_sub_longnormalize_done>
8000c5a6:	ee 08 11 40 	rsub	r8,r7,64
8000c5aa:	f6 08 09 49 	lsl	r9,r11,r8
8000c5ae:	14 49       	or	r9,r10
8000c5b0:	5f 16       	srne	r6
8000c5b2:	f6 07 0a 4a 	lsr	r10,r11,r7
8000c5b6:	0c 4a       	or	r10,r6
8000c5b8:	30 0b       	mov	r11,0
8000c5ba:	30 07       	mov	r7,0
8000c5bc:	ca 7b       	rjmp	8000c50a <__avr32_f64_sub_longnormalize_done>
8000c5be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c5c2 <__avr32_f64_sub_longshift>:
8000c5c2:	f1 b6 04 c0 	satu	r6,0x6
8000c5c6:	f0 0e 17 00 	moveq	lr,r8
8000c5ca:	c0 40       	breq	8000c5d2 <__avr32_f64_sub_longshift+0x10>
8000c5cc:	f2 05 09 4e 	lsl	lr,r9,r5
8000c5d0:	10 4e       	or	lr,r8
8000c5d2:	f2 06 0a 48 	lsr	r8,r9,r6
8000c5d6:	30 09       	mov	r9,0
8000c5d8:	58 0e       	cp.w	lr,0
8000c5da:	5f 1e       	srne	lr
8000c5dc:	1c 48       	or	r8,lr
8000c5de:	c8 3b       	rjmp	8000c4e4 <__avr32_f64_sub_shift_done>

8000c5e0 <__avr32_f64_sub_longnormalize>:
8000c5e0:	f4 06 12 00 	clz	r6,r10
8000c5e4:	f9 b7 03 00 	movlo	r7,0
8000c5e8:	f9 b6 03 00 	movlo	r6,0
8000c5ec:	f9 bc 03 00 	movlo	r12,0
8000c5f0:	f7 b6 02 e0 	subhs	r6,-32
8000c5f4:	f4 06 09 4b 	lsl	r11,r10,r6
8000c5f8:	30 0a       	mov	r10,0
8000c5fa:	0c 17       	sub	r7,r6
8000c5fc:	fe 9a ff be 	brle	8000c578 <__avr32_f64_sub_subnormal_result>
8000c600:	c8 5b       	rjmp	8000c50a <__avr32_f64_sub_longnormalize_done>
8000c602:	d7 03       	nop

8000c604 <__avr32_f64_add_from_sub>:
8000c604:	ee 19 80 00 	eorh	r9,0x8000

8000c608 <__avr32_f64_add>:
8000c608:	f7 e9 20 0c 	eor	r12,r11,r9
8000c60c:	fe 96 ff 2e 	brmi	8000c468 <__avr32_f64_sub_from_add>
8000c610:	eb cd 40 e0 	pushm	r5-r7,lr
8000c614:	16 9c       	mov	r12,r11
8000c616:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c61a:	bf db       	cbr	r11,0x1f
8000c61c:	bf d9       	cbr	r9,0x1f
8000c61e:	12 3b       	cp.w	r11,r9
8000c620:	c0 72       	brcc	8000c62e <__avr32_f64_add+0x26>
8000c622:	16 97       	mov	r7,r11
8000c624:	12 9b       	mov	r11,r9
8000c626:	0e 99       	mov	r9,r7
8000c628:	14 97       	mov	r7,r10
8000c62a:	10 9a       	mov	r10,r8
8000c62c:	0e 98       	mov	r8,r7
8000c62e:	30 0e       	mov	lr,0
8000c630:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c634:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000c638:	b5 ab       	sbr	r11,0x14
8000c63a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c63e:	c5 f0       	breq	8000c6fc <__avr32_f64_add_op2_subnormal>
8000c640:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000c644:	b5 a9       	sbr	r9,0x14
8000c646:	e0 47 07 ff 	cp.w	r7,2047
8000c64a:	c2 50       	breq	8000c694 <__avr32_f64_add_opH_nan_or_inf>
8000c64c:	0e 26       	rsub	r6,r7
8000c64e:	c0 f0       	breq	8000c66c <__avr32_f64_add_shift_done>
8000c650:	ec 05 11 20 	rsub	r5,r6,32
8000c654:	e0 46 00 20 	cp.w	r6,32
8000c658:	c3 52       	brcc	8000c6c2 <__avr32_f64_add_longshift>
8000c65a:	f0 05 09 4e 	lsl	lr,r8,r5
8000c65e:	f2 05 09 45 	lsl	r5,r9,r5
8000c662:	f0 06 0a 48 	lsr	r8,r8,r6
8000c666:	f2 06 0a 49 	lsr	r9,r9,r6
8000c66a:	0a 48       	or	r8,r5

8000c66c <__avr32_f64_add_shift_done>:
8000c66c:	10 0a       	add	r10,r8
8000c66e:	f6 09 00 4b 	adc	r11,r11,r9
8000c672:	ed bb 00 15 	bld	r11,0x15
8000c676:	c3 40       	breq	8000c6de <__avr32_f64_add_res_of>

8000c678 <__avr32_f64_add_res_of_done>:
8000c678:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c67c:	18 4b       	or	r11,r12

8000c67e <__avr32_f64_add_round>:
8000c67e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000c682:	18 4e       	or	lr,r12
8000c684:	ee 1e 80 00 	eorh	lr,0x8000
8000c688:	f1 be 04 20 	satu	lr,0x1
8000c68c:	1c 0a       	add	r10,lr
8000c68e:	5c 0b       	acr	r11
8000c690:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c694 <__avr32_f64_add_opH_nan_or_inf>:
8000c694:	b5 cb       	cbr	r11,0x14
8000c696:	f7 ea 10 0e 	or	lr,r11,r10
8000c69a:	c1 01       	brne	8000c6ba <__avr32_f64_add_return_nan>
8000c69c:	e0 46 07 ff 	cp.w	r6,2047
8000c6a0:	c0 30       	breq	8000c6a6 <__avr32_f64_add_opL_nan_or_inf>
8000c6a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c6a6 <__avr32_f64_add_opL_nan_or_inf>:
8000c6a6:	b5 c9       	cbr	r9,0x14
8000c6a8:	f3 e8 10 0e 	or	lr,r9,r8
8000c6ac:	c0 71       	brne	8000c6ba <__avr32_f64_add_return_nan>
8000c6ae:	30 0a       	mov	r10,0
8000c6b0:	fc 1b 7f f0 	movh	r11,0x7ff0
8000c6b4:	18 4b       	or	r11,r12
8000c6b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c6ba <__avr32_f64_add_return_nan>:
8000c6ba:	3f fa       	mov	r10,-1
8000c6bc:	3f fb       	mov	r11,-1
8000c6be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c6c2 <__avr32_f64_add_longshift>:
8000c6c2:	f1 b6 04 c0 	satu	r6,0x6
8000c6c6:	f0 0e 17 00 	moveq	lr,r8
8000c6ca:	c0 60       	breq	8000c6d6 <__avr32_f64_add_longshift+0x14>
8000c6cc:	f2 05 09 4e 	lsl	lr,r9,r5
8000c6d0:	58 08       	cp.w	r8,0
8000c6d2:	5f 18       	srne	r8
8000c6d4:	10 4e       	or	lr,r8
8000c6d6:	f2 06 0a 48 	lsr	r8,r9,r6
8000c6da:	30 09       	mov	r9,0
8000c6dc:	cc 8b       	rjmp	8000c66c <__avr32_f64_add_shift_done>

8000c6de <__avr32_f64_add_res_of>:
8000c6de:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000c6e2:	a1 9b       	lsr	r11,0x1
8000c6e4:	5d 0a       	ror	r10
8000c6e6:	5d 0e       	ror	lr
8000c6e8:	2f f7       	sub	r7,-1
8000c6ea:	e0 47 07 ff 	cp.w	r7,2047
8000c6ee:	f9 ba 00 00 	moveq	r10,0
8000c6f2:	f9 bb 00 00 	moveq	r11,0
8000c6f6:	f9 be 00 00 	moveq	lr,0
8000c6fa:	cb fb       	rjmp	8000c678 <__avr32_f64_add_res_of_done>

8000c6fc <__avr32_f64_add_op2_subnormal>:
8000c6fc:	30 16       	mov	r6,1
8000c6fe:	58 07       	cp.w	r7,0
8000c700:	ca 31       	brne	8000c646 <__avr32_f64_add+0x3e>
8000c702:	b5 cb       	cbr	r11,0x14
8000c704:	10 0a       	add	r10,r8
8000c706:	f6 09 00 4b 	adc	r11,r11,r9
8000c70a:	18 4b       	or	r11,r12
8000c70c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c710 <__avr32_f64_to_u32>:
8000c710:	58 0b       	cp.w	r11,0
8000c712:	5e 6d       	retmi	0

8000c714 <__avr32_f64_to_s32>:
8000c714:	f6 0c 15 01 	lsl	r12,r11,0x1
8000c718:	b5 9c       	lsr	r12,0x15
8000c71a:	e0 2c 03 ff 	sub	r12,1023
8000c71e:	5e 3d       	retlo	0
8000c720:	f8 0c 11 1f 	rsub	r12,r12,31
8000c724:	16 99       	mov	r9,r11
8000c726:	ab 7b       	lsl	r11,0xb
8000c728:	bf bb       	sbr	r11,0x1f
8000c72a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c72e:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c732:	a1 79       	lsl	r9,0x1
8000c734:	5e 2b       	reths	r11
8000c736:	5c 3b       	neg	r11
8000c738:	5e fb       	retal	r11

8000c73a <__avr32_u32_to_f64>:
8000c73a:	f8 cb 00 00 	sub	r11,r12,0
8000c73e:	30 0c       	mov	r12,0
8000c740:	c0 38       	rjmp	8000c746 <__avr32_s32_to_f64+0x4>

8000c742 <__avr32_s32_to_f64>:
8000c742:	18 9b       	mov	r11,r12
8000c744:	5c 4b       	abs	r11
8000c746:	30 0a       	mov	r10,0
8000c748:	5e 0b       	reteq	r11
8000c74a:	d4 01       	pushm	lr
8000c74c:	e0 69 04 1e 	mov	r9,1054
8000c750:	f6 08 12 00 	clz	r8,r11
8000c754:	c1 70       	breq	8000c782 <__avr32_s32_to_f64+0x40>
8000c756:	c0 c3       	brcs	8000c76e <__avr32_s32_to_f64+0x2c>
8000c758:	f0 0e 11 20 	rsub	lr,r8,32
8000c75c:	f6 08 09 4b 	lsl	r11,r11,r8
8000c760:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c764:	1c 4b       	or	r11,lr
8000c766:	f4 08 09 4a 	lsl	r10,r10,r8
8000c76a:	10 19       	sub	r9,r8
8000c76c:	c0 b8       	rjmp	8000c782 <__avr32_s32_to_f64+0x40>
8000c76e:	f4 08 12 00 	clz	r8,r10
8000c772:	f9 b8 03 00 	movlo	r8,0
8000c776:	f7 b8 02 e0 	subhs	r8,-32
8000c77a:	f4 08 09 4b 	lsl	r11,r10,r8
8000c77e:	30 0a       	mov	r10,0
8000c780:	10 19       	sub	r9,r8
8000c782:	58 09       	cp.w	r9,0
8000c784:	e0 89 00 30 	brgt	8000c7e4 <__avr32_s32_to_f64+0xa2>
8000c788:	5c 39       	neg	r9
8000c78a:	2f f9       	sub	r9,-1
8000c78c:	e0 49 00 36 	cp.w	r9,54
8000c790:	c0 43       	brcs	8000c798 <__avr32_s32_to_f64+0x56>
8000c792:	30 0b       	mov	r11,0
8000c794:	30 0a       	mov	r10,0
8000c796:	c2 68       	rjmp	8000c7e2 <__avr32_s32_to_f64+0xa0>
8000c798:	2f 69       	sub	r9,-10
8000c79a:	f2 08 11 20 	rsub	r8,r9,32
8000c79e:	e0 49 00 20 	cp.w	r9,32
8000c7a2:	c0 b2       	brcc	8000c7b8 <__avr32_s32_to_f64+0x76>
8000c7a4:	f4 08 09 4e 	lsl	lr,r10,r8
8000c7a8:	f6 08 09 48 	lsl	r8,r11,r8
8000c7ac:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c7b0:	f6 09 0a 4b 	lsr	r11,r11,r9
8000c7b4:	10 4b       	or	r11,r8
8000c7b6:	c0 88       	rjmp	8000c7c6 <__avr32_s32_to_f64+0x84>
8000c7b8:	f6 08 09 4e 	lsl	lr,r11,r8
8000c7bc:	14 4e       	or	lr,r10
8000c7be:	16 9a       	mov	r10,r11
8000c7c0:	30 0b       	mov	r11,0
8000c7c2:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c7c6:	ed ba 00 00 	bld	r10,0x0
8000c7ca:	c0 92       	brcc	8000c7dc <__avr32_s32_to_f64+0x9a>
8000c7cc:	1c 7e       	tst	lr,lr
8000c7ce:	c0 41       	brne	8000c7d6 <__avr32_s32_to_f64+0x94>
8000c7d0:	ed ba 00 01 	bld	r10,0x1
8000c7d4:	c0 42       	brcc	8000c7dc <__avr32_s32_to_f64+0x9a>
8000c7d6:	2f fa       	sub	r10,-1
8000c7d8:	f7 bb 02 ff 	subhs	r11,-1
8000c7dc:	5c fc       	rol	r12
8000c7de:	5d 0b       	ror	r11
8000c7e0:	5d 0a       	ror	r10
8000c7e2:	d8 02       	popm	pc
8000c7e4:	e0 68 03 ff 	mov	r8,1023
8000c7e8:	ed ba 00 0b 	bld	r10,0xb
8000c7ec:	f7 b8 00 ff 	subeq	r8,-1
8000c7f0:	10 0a       	add	r10,r8
8000c7f2:	5c 0b       	acr	r11
8000c7f4:	f7 b9 03 fe 	sublo	r9,-2
8000c7f8:	e0 49 07 ff 	cp.w	r9,2047
8000c7fc:	c0 55       	brlt	8000c806 <__avr32_s32_to_f64+0xc4>
8000c7fe:	30 0a       	mov	r10,0
8000c800:	fc 1b ff e0 	movh	r11,0xffe0
8000c804:	c0 c8       	rjmp	8000c81c <__floatsidf_return_op1>
8000c806:	ed bb 00 1f 	bld	r11,0x1f
8000c80a:	f7 b9 01 01 	subne	r9,1
8000c80e:	ab 9a       	lsr	r10,0xb
8000c810:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c814:	a1 7b       	lsl	r11,0x1
8000c816:	ab 9b       	lsr	r11,0xb
8000c818:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000c81c <__floatsidf_return_op1>:
8000c81c:	a1 7c       	lsl	r12,0x1
8000c81e:	5d 0b       	ror	r11
8000c820:	d8 02       	popm	pc

8000c822 <__avr32_f64_cmp_eq>:
8000c822:	10 3a       	cp.w	r10,r8
8000c824:	f2 0b 13 00 	cpc	r11,r9
8000c828:	c0 80       	breq	8000c838 <__avr32_f64_cmp_eq+0x16>
8000c82a:	a1 7b       	lsl	r11,0x1
8000c82c:	a1 79       	lsl	r9,0x1
8000c82e:	14 4b       	or	r11,r10
8000c830:	12 4b       	or	r11,r9
8000c832:	10 4b       	or	r11,r8
8000c834:	5e 0f       	reteq	1
8000c836:	5e fd       	retal	0
8000c838:	a1 7b       	lsl	r11,0x1
8000c83a:	fc 1c ff e0 	movh	r12,0xffe0
8000c83e:	58 0a       	cp.w	r10,0
8000c840:	f8 0b 13 00 	cpc	r11,r12
8000c844:	5e 8f       	retls	1
8000c846:	5e fd       	retal	0

8000c848 <__avr32_f64_cmp_ge>:
8000c848:	1a de       	st.w	--sp,lr
8000c84a:	1a d7       	st.w	--sp,r7
8000c84c:	a1 7b       	lsl	r11,0x1
8000c84e:	5f 3c       	srlo	r12
8000c850:	a1 79       	lsl	r9,0x1
8000c852:	5f 37       	srlo	r7
8000c854:	5c fc       	rol	r12
8000c856:	fc 1e ff e0 	movh	lr,0xffe0
8000c85a:	58 0a       	cp.w	r10,0
8000c85c:	fc 0b 13 00 	cpc	r11,lr
8000c860:	e0 8b 00 1d 	brhi	8000c89a <__avr32_f64_cmp_ge+0x52>
8000c864:	58 08       	cp.w	r8,0
8000c866:	fc 09 13 00 	cpc	r9,lr
8000c86a:	e0 8b 00 18 	brhi	8000c89a <__avr32_f64_cmp_ge+0x52>
8000c86e:	58 0b       	cp.w	r11,0
8000c870:	f5 ba 00 00 	subfeq	r10,0
8000c874:	c1 50       	breq	8000c89e <__avr32_f64_cmp_ge+0x56>
8000c876:	1b 07       	ld.w	r7,sp++
8000c878:	1b 0e       	ld.w	lr,sp++
8000c87a:	58 3c       	cp.w	r12,3
8000c87c:	c0 a0       	breq	8000c890 <__avr32_f64_cmp_ge+0x48>
8000c87e:	58 1c       	cp.w	r12,1
8000c880:	c0 33       	brcs	8000c886 <__avr32_f64_cmp_ge+0x3e>
8000c882:	5e 0f       	reteq	1
8000c884:	5e 1d       	retne	0
8000c886:	10 3a       	cp.w	r10,r8
8000c888:	f2 0b 13 00 	cpc	r11,r9
8000c88c:	5e 2f       	reths	1
8000c88e:	5e 3d       	retlo	0
8000c890:	14 38       	cp.w	r8,r10
8000c892:	f6 09 13 00 	cpc	r9,r11
8000c896:	5e 2f       	reths	1
8000c898:	5e 3d       	retlo	0
8000c89a:	1b 07       	ld.w	r7,sp++
8000c89c:	d8 0a       	popm	pc,r12=0
8000c89e:	58 17       	cp.w	r7,1
8000c8a0:	5f 0c       	sreq	r12
8000c8a2:	58 09       	cp.w	r9,0
8000c8a4:	f5 b8 00 00 	subfeq	r8,0
8000c8a8:	1b 07       	ld.w	r7,sp++
8000c8aa:	1b 0e       	ld.w	lr,sp++
8000c8ac:	5e 0f       	reteq	1
8000c8ae:	5e fc       	retal	r12

8000c8b0 <__avr32_f64_cmp_lt>:
8000c8b0:	1a de       	st.w	--sp,lr
8000c8b2:	1a d7       	st.w	--sp,r7
8000c8b4:	a1 7b       	lsl	r11,0x1
8000c8b6:	5f 3c       	srlo	r12
8000c8b8:	a1 79       	lsl	r9,0x1
8000c8ba:	5f 37       	srlo	r7
8000c8bc:	5c fc       	rol	r12
8000c8be:	fc 1e ff e0 	movh	lr,0xffe0
8000c8c2:	58 0a       	cp.w	r10,0
8000c8c4:	fc 0b 13 00 	cpc	r11,lr
8000c8c8:	e0 8b 00 1d 	brhi	8000c902 <__avr32_f64_cmp_lt+0x52>
8000c8cc:	58 08       	cp.w	r8,0
8000c8ce:	fc 09 13 00 	cpc	r9,lr
8000c8d2:	e0 8b 00 18 	brhi	8000c902 <__avr32_f64_cmp_lt+0x52>
8000c8d6:	58 0b       	cp.w	r11,0
8000c8d8:	f5 ba 00 00 	subfeq	r10,0
8000c8dc:	c1 50       	breq	8000c906 <__avr32_f64_cmp_lt+0x56>
8000c8de:	1b 07       	ld.w	r7,sp++
8000c8e0:	1b 0e       	ld.w	lr,sp++
8000c8e2:	58 3c       	cp.w	r12,3
8000c8e4:	c0 a0       	breq	8000c8f8 <__avr32_f64_cmp_lt+0x48>
8000c8e6:	58 1c       	cp.w	r12,1
8000c8e8:	c0 33       	brcs	8000c8ee <__avr32_f64_cmp_lt+0x3e>
8000c8ea:	5e 0d       	reteq	0
8000c8ec:	5e 1f       	retne	1
8000c8ee:	10 3a       	cp.w	r10,r8
8000c8f0:	f2 0b 13 00 	cpc	r11,r9
8000c8f4:	5e 2d       	reths	0
8000c8f6:	5e 3f       	retlo	1
8000c8f8:	14 38       	cp.w	r8,r10
8000c8fa:	f6 09 13 00 	cpc	r9,r11
8000c8fe:	5e 2d       	reths	0
8000c900:	5e 3f       	retlo	1
8000c902:	1b 07       	ld.w	r7,sp++
8000c904:	d8 0a       	popm	pc,r12=0
8000c906:	58 17       	cp.w	r7,1
8000c908:	5f 1c       	srne	r12
8000c90a:	58 09       	cp.w	r9,0
8000c90c:	f5 b8 00 00 	subfeq	r8,0
8000c910:	1b 07       	ld.w	r7,sp++
8000c912:	1b 0e       	ld.w	lr,sp++
8000c914:	5e 0d       	reteq	0
8000c916:	5e fc       	retal	r12

8000c918 <__avr32_f64_div>:
8000c918:	eb cd 40 ff 	pushm	r0-r7,lr
8000c91c:	f7 e9 20 0e 	eor	lr,r11,r9
8000c920:	f6 07 16 14 	lsr	r7,r11,0x14
8000c924:	a9 7b       	lsl	r11,0x9
8000c926:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000c92a:	a9 7a       	lsl	r10,0x9
8000c92c:	bd bb       	sbr	r11,0x1d
8000c92e:	e4 1b 3f ff 	andh	r11,0x3fff
8000c932:	ab d7       	cbr	r7,0xb
8000c934:	e0 80 00 cc 	breq	8000cacc <__avr32_f64_div_round_subnormal+0x54>
8000c938:	e0 47 07 ff 	cp.w	r7,2047
8000c93c:	e0 84 00 b5 	brge	8000caa6 <__avr32_f64_div_round_subnormal+0x2e>
8000c940:	f2 06 16 14 	lsr	r6,r9,0x14
8000c944:	a9 79       	lsl	r9,0x9
8000c946:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000c94a:	a9 78       	lsl	r8,0x9
8000c94c:	bd b9       	sbr	r9,0x1d
8000c94e:	e4 19 3f ff 	andh	r9,0x3fff
8000c952:	ab d6       	cbr	r6,0xb
8000c954:	e0 80 00 e2 	breq	8000cb18 <__avr32_f64_div_round_subnormal+0xa0>
8000c958:	e0 46 07 ff 	cp.w	r6,2047
8000c95c:	e0 84 00 b2 	brge	8000cac0 <__avr32_f64_div_round_subnormal+0x48>
8000c960:	0c 17       	sub	r7,r6
8000c962:	fe 37 fc 01 	sub	r7,-1023
8000c966:	fc 1c 80 00 	movh	r12,0x8000
8000c96a:	f8 03 16 01 	lsr	r3,r12,0x1
8000c96e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000c972:	5c d4       	com	r4
8000c974:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000c978:	e6 09 06 44 	mulu.d	r4,r3,r9
8000c97c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000c980:	e6 05 06 44 	mulu.d	r4,r3,r5
8000c984:	ea 03 15 02 	lsl	r3,r5,0x2
8000c988:	e6 09 06 44 	mulu.d	r4,r3,r9
8000c98c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000c990:	e6 05 06 44 	mulu.d	r4,r3,r5
8000c994:	ea 03 15 02 	lsl	r3,r5,0x2
8000c998:	e6 09 06 44 	mulu.d	r4,r3,r9
8000c99c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000c9a0:	e6 05 06 44 	mulu.d	r4,r3,r5
8000c9a4:	ea 03 15 02 	lsl	r3,r5,0x2
8000c9a8:	e6 08 06 40 	mulu.d	r0,r3,r8
8000c9ac:	e4 09 07 40 	macu.d	r0,r2,r9
8000c9b0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000c9b4:	02 04       	add	r4,r1
8000c9b6:	5c 05       	acr	r5
8000c9b8:	a3 65       	lsl	r5,0x2
8000c9ba:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000c9be:	a3 64       	lsl	r4,0x2
8000c9c0:	5c 34       	neg	r4
8000c9c2:	f8 05 01 45 	sbc	r5,r12,r5
8000c9c6:	e6 04 06 40 	mulu.d	r0,r3,r4
8000c9ca:	e4 05 07 40 	macu.d	r0,r2,r5
8000c9ce:	e6 05 06 44 	mulu.d	r4,r3,r5
8000c9d2:	02 04       	add	r4,r1
8000c9d4:	5c 05       	acr	r5
8000c9d6:	ea 03 15 02 	lsl	r3,r5,0x2
8000c9da:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000c9de:	e8 02 15 02 	lsl	r2,r4,0x2
8000c9e2:	e6 08 06 40 	mulu.d	r0,r3,r8
8000c9e6:	e4 09 07 40 	macu.d	r0,r2,r9
8000c9ea:	e6 09 06 44 	mulu.d	r4,r3,r9
8000c9ee:	02 04       	add	r4,r1
8000c9f0:	5c 05       	acr	r5
8000c9f2:	a3 65       	lsl	r5,0x2
8000c9f4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000c9f8:	a3 64       	lsl	r4,0x2
8000c9fa:	5c 34       	neg	r4
8000c9fc:	f8 05 01 45 	sbc	r5,r12,r5
8000ca00:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ca04:	e4 05 07 40 	macu.d	r0,r2,r5
8000ca08:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ca0c:	02 04       	add	r4,r1
8000ca0e:	5c 05       	acr	r5
8000ca10:	ea 03 15 02 	lsl	r3,r5,0x2
8000ca14:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ca18:	e8 02 15 02 	lsl	r2,r4,0x2
8000ca1c:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000ca20:	e4 0b 07 40 	macu.d	r0,r2,r11
8000ca24:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000ca28:	02 02       	add	r2,r1
8000ca2a:	5c 03       	acr	r3
8000ca2c:	ed b3 00 1c 	bld	r3,0x1c
8000ca30:	c0 90       	breq	8000ca42 <__avr32_f64_div+0x12a>
8000ca32:	a1 72       	lsl	r2,0x1
8000ca34:	5c f3       	rol	r3
8000ca36:	20 17       	sub	r7,1
8000ca38:	a3 9a       	lsr	r10,0x3
8000ca3a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000ca3e:	a3 9b       	lsr	r11,0x3
8000ca40:	c0 58       	rjmp	8000ca4a <__avr32_f64_div+0x132>
8000ca42:	a5 8a       	lsr	r10,0x4
8000ca44:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000ca48:	a5 8b       	lsr	r11,0x4
8000ca4a:	58 07       	cp.w	r7,0
8000ca4c:	e0 8a 00 8b 	brle	8000cb62 <__avr32_f64_div_res_subnormal>
8000ca50:	e0 12 ff 00 	andl	r2,0xff00
8000ca54:	e8 12 00 80 	orl	r2,0x80
8000ca58:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ca5c:	e4 09 07 40 	macu.d	r0,r2,r9
8000ca60:	e4 08 06 44 	mulu.d	r4,r2,r8
8000ca64:	e6 09 06 48 	mulu.d	r8,r3,r9
8000ca68:	00 05       	add	r5,r0
8000ca6a:	f0 01 00 48 	adc	r8,r8,r1
8000ca6e:	5c 09       	acr	r9
8000ca70:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000ca74:	58 04       	cp.w	r4,0
8000ca76:	5c 25       	cpc	r5

8000ca78 <__avr32_f64_div_round_subnormal>:
8000ca78:	f4 08 13 00 	cpc	r8,r10
8000ca7c:	f6 09 13 00 	cpc	r9,r11
8000ca80:	5f 36       	srlo	r6
8000ca82:	f8 06 17 00 	moveq	r6,r12
8000ca86:	e4 0a 16 08 	lsr	r10,r2,0x8
8000ca8a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000ca8e:	e6 0b 16 08 	lsr	r11,r3,0x8
8000ca92:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000ca96:	ed be 00 1f 	bld	lr,0x1f
8000ca9a:	ef bb 00 1f 	bst	r11,0x1f
8000ca9e:	0c 0a       	add	r10,r6
8000caa0:	5c 0b       	acr	r11
8000caa2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000caa6:	e4 1b 00 0f 	andh	r11,0xf
8000caaa:	14 4b       	or	r11,r10
8000caac:	e0 81 00 a7 	brne	8000cbfa <__avr32_f64_div_res_subnormal+0x98>
8000cab0:	f2 06 16 14 	lsr	r6,r9,0x14
8000cab4:	ab d6       	cbr	r6,0xb
8000cab6:	e0 46 07 ff 	cp.w	r6,2047
8000caba:	e0 81 00 a4 	brne	8000cc02 <__avr32_f64_div_res_subnormal+0xa0>
8000cabe:	c9 e8       	rjmp	8000cbfa <__avr32_f64_div_res_subnormal+0x98>
8000cac0:	e4 19 00 0f 	andh	r9,0xf
8000cac4:	10 49       	or	r9,r8
8000cac6:	e0 81 00 9a 	brne	8000cbfa <__avr32_f64_div_res_subnormal+0x98>
8000caca:	c9 28       	rjmp	8000cbee <__avr32_f64_div_res_subnormal+0x8c>
8000cacc:	a3 7b       	lsl	r11,0x3
8000cace:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000cad2:	a3 7a       	lsl	r10,0x3
8000cad4:	f5 eb 10 04 	or	r4,r10,r11
8000cad8:	e0 80 00 a0 	breq	8000cc18 <__avr32_f64_div_op1_zero>
8000cadc:	f6 04 12 00 	clz	r4,r11
8000cae0:	c1 70       	breq	8000cb0e <__avr32_f64_div_round_subnormal+0x96>
8000cae2:	c0 c3       	brcs	8000cafa <__avr32_f64_div_round_subnormal+0x82>
8000cae4:	e8 05 11 20 	rsub	r5,r4,32
8000cae8:	f6 04 09 4b 	lsl	r11,r11,r4
8000caec:	f4 05 0a 45 	lsr	r5,r10,r5
8000caf0:	0a 4b       	or	r11,r5
8000caf2:	f4 04 09 4a 	lsl	r10,r10,r4
8000caf6:	08 17       	sub	r7,r4
8000caf8:	c0 b8       	rjmp	8000cb0e <__avr32_f64_div_round_subnormal+0x96>
8000cafa:	f4 04 12 00 	clz	r4,r10
8000cafe:	f9 b4 03 00 	movlo	r4,0
8000cb02:	f7 b4 02 e0 	subhs	r4,-32
8000cb06:	f4 04 09 4b 	lsl	r11,r10,r4
8000cb0a:	30 0a       	mov	r10,0
8000cb0c:	08 17       	sub	r7,r4
8000cb0e:	a3 8a       	lsr	r10,0x2
8000cb10:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000cb14:	a3 8b       	lsr	r11,0x2
8000cb16:	c1 1b       	rjmp	8000c938 <__avr32_f64_div+0x20>
8000cb18:	a3 79       	lsl	r9,0x3
8000cb1a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000cb1e:	a3 78       	lsl	r8,0x3
8000cb20:	f3 e8 10 04 	or	r4,r9,r8
8000cb24:	c6 f0       	breq	8000cc02 <__avr32_f64_div_res_subnormal+0xa0>
8000cb26:	f2 04 12 00 	clz	r4,r9
8000cb2a:	c1 70       	breq	8000cb58 <__avr32_f64_div_round_subnormal+0xe0>
8000cb2c:	c0 c3       	brcs	8000cb44 <__avr32_f64_div_round_subnormal+0xcc>
8000cb2e:	e8 05 11 20 	rsub	r5,r4,32
8000cb32:	f2 04 09 49 	lsl	r9,r9,r4
8000cb36:	f0 05 0a 45 	lsr	r5,r8,r5
8000cb3a:	0a 49       	or	r9,r5
8000cb3c:	f0 04 09 48 	lsl	r8,r8,r4
8000cb40:	08 16       	sub	r6,r4
8000cb42:	c0 b8       	rjmp	8000cb58 <__avr32_f64_div_round_subnormal+0xe0>
8000cb44:	f0 04 12 00 	clz	r4,r8
8000cb48:	f9 b4 03 00 	movlo	r4,0
8000cb4c:	f7 b4 02 e0 	subhs	r4,-32
8000cb50:	f0 04 09 49 	lsl	r9,r8,r4
8000cb54:	30 08       	mov	r8,0
8000cb56:	08 16       	sub	r6,r4
8000cb58:	a3 88       	lsr	r8,0x2
8000cb5a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000cb5e:	a3 89       	lsr	r9,0x2
8000cb60:	cf ca       	rjmp	8000c958 <__avr32_f64_div+0x40>

8000cb62 <__avr32_f64_div_res_subnormal>:
8000cb62:	5c 37       	neg	r7
8000cb64:	2f f7       	sub	r7,-1
8000cb66:	f1 b7 04 c0 	satu	r7,0x6
8000cb6a:	e0 47 00 20 	cp.w	r7,32
8000cb6e:	c1 54       	brge	8000cb98 <__avr32_f64_div_res_subnormal+0x36>
8000cb70:	ee 06 11 20 	rsub	r6,r7,32
8000cb74:	e4 07 0a 42 	lsr	r2,r2,r7
8000cb78:	e6 06 09 4c 	lsl	r12,r3,r6
8000cb7c:	18 42       	or	r2,r12
8000cb7e:	e6 07 0a 43 	lsr	r3,r3,r7
8000cb82:	f4 06 09 41 	lsl	r1,r10,r6
8000cb86:	f4 07 0a 4a 	lsr	r10,r10,r7
8000cb8a:	f6 06 09 4c 	lsl	r12,r11,r6
8000cb8e:	18 4a       	or	r10,r12
8000cb90:	f6 07 0a 4b 	lsr	r11,r11,r7
8000cb94:	30 00       	mov	r0,0
8000cb96:	c1 58       	rjmp	8000cbc0 <__avr32_f64_div_res_subnormal+0x5e>
8000cb98:	ee 06 11 20 	rsub	r6,r7,32
8000cb9c:	f9 b0 00 00 	moveq	r0,0
8000cba0:	f9 bc 00 00 	moveq	r12,0
8000cba4:	c0 50       	breq	8000cbae <__avr32_f64_div_res_subnormal+0x4c>
8000cba6:	f4 06 09 40 	lsl	r0,r10,r6
8000cbaa:	f6 06 09 4c 	lsl	r12,r11,r6
8000cbae:	e6 07 0a 42 	lsr	r2,r3,r7
8000cbb2:	30 03       	mov	r3,0
8000cbb4:	f4 07 0a 41 	lsr	r1,r10,r7
8000cbb8:	18 41       	or	r1,r12
8000cbba:	f6 07 0a 4a 	lsr	r10,r11,r7
8000cbbe:	30 0b       	mov	r11,0
8000cbc0:	e0 12 ff 00 	andl	r2,0xff00
8000cbc4:	e8 12 00 80 	orl	r2,0x80
8000cbc8:	e6 08 06 46 	mulu.d	r6,r3,r8
8000cbcc:	e4 09 07 46 	macu.d	r6,r2,r9
8000cbd0:	e4 08 06 44 	mulu.d	r4,r2,r8
8000cbd4:	e6 09 06 48 	mulu.d	r8,r3,r9
8000cbd8:	0c 05       	add	r5,r6
8000cbda:	f0 07 00 48 	adc	r8,r8,r7
8000cbde:	5c 09       	acr	r9
8000cbe0:	30 07       	mov	r7,0
8000cbe2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000cbe6:	00 34       	cp.w	r4,r0
8000cbe8:	e2 05 13 00 	cpc	r5,r1
8000cbec:	c4 6b       	rjmp	8000ca78 <__avr32_f64_div_round_subnormal>
8000cbee:	1c 9b       	mov	r11,lr
8000cbf0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000cbf4:	30 0a       	mov	r10,0
8000cbf6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cbfa:	3f fb       	mov	r11,-1
8000cbfc:	30 0a       	mov	r10,0
8000cbfe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cc02:	f5 eb 10 04 	or	r4,r10,r11
8000cc06:	c0 90       	breq	8000cc18 <__avr32_f64_div_op1_zero>
8000cc08:	1c 9b       	mov	r11,lr
8000cc0a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000cc0e:	ea 1b 7f f0 	orh	r11,0x7ff0
8000cc12:	30 0a       	mov	r10,0
8000cc14:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000cc18 <__avr32_f64_div_op1_zero>:
8000cc18:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000cc1c:	ce f0       	breq	8000cbfa <__avr32_f64_div_res_subnormal+0x98>
8000cc1e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000cc22:	e0 44 07 ff 	cp.w	r4,2047
8000cc26:	ce 41       	brne	8000cbee <__avr32_f64_div_res_subnormal+0x8c>
8000cc28:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000cc2c:	ce 10       	breq	8000cbee <__avr32_f64_div_res_subnormal+0x8c>
8000cc2e:	ce 6b       	rjmp	8000cbfa <__avr32_f64_div_res_subnormal+0x98>

8000cc30 <__avr32_udiv64>:
8000cc30:	d4 31       	pushm	r0-r7,lr
8000cc32:	1a 97       	mov	r7,sp
8000cc34:	20 2d       	sub	sp,8
8000cc36:	10 9e       	mov	lr,r8
8000cc38:	12 95       	mov	r5,r9
8000cc3a:	14 96       	mov	r6,r10
8000cc3c:	58 09       	cp.w	r9,0
8000cc3e:	c4 91       	brne	8000ccd0 <__avr32_udiv64+0xa0>
8000cc40:	16 38       	cp.w	r8,r11
8000cc42:	e0 88 00 57 	brls	8000ccf0 <__avr32_udiv64+0xc0>
8000cc46:	f0 08 12 00 	clz	r8,r8
8000cc4a:	c0 d0       	breq	8000cc64 <__avr32_udiv64+0x34>
8000cc4c:	f6 08 09 4b 	lsl	r11,r11,r8
8000cc50:	f0 09 11 20 	rsub	r9,r8,32
8000cc54:	fc 08 09 4e 	lsl	lr,lr,r8
8000cc58:	f4 09 0a 49 	lsr	r9,r10,r9
8000cc5c:	f4 08 09 46 	lsl	r6,r10,r8
8000cc60:	f3 eb 10 0b 	or	r11,r9,r11
8000cc64:	fc 05 16 10 	lsr	r5,lr,0x10
8000cc68:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000cc6c:	f6 05 0d 0a 	divu	r10,r11,r5
8000cc70:	ec 08 16 10 	lsr	r8,r6,0x10
8000cc74:	14 99       	mov	r9,r10
8000cc76:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000cc7a:	b9 3a       	mul	r10,r12
8000cc7c:	10 3a       	cp.w	r10,r8
8000cc7e:	e0 88 00 0c 	brls	8000cc96 <__avr32_udiv64+0x66>
8000cc82:	20 19       	sub	r9,1
8000cc84:	1c 08       	add	r8,lr
8000cc86:	10 3e       	cp.w	lr,r8
8000cc88:	e0 8b 00 07 	brhi	8000cc96 <__avr32_udiv64+0x66>
8000cc8c:	10 3a       	cp.w	r10,r8
8000cc8e:	f7 b9 0b 01 	subhi	r9,1
8000cc92:	f1 de eb 08 	addhi	r8,r8,lr
8000cc96:	f0 0a 01 0b 	sub	r11,r8,r10
8000cc9a:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cc9e:	f6 05 0d 0a 	divu	r10,r11,r5
8000cca2:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000cca6:	14 98       	mov	r8,r10
8000cca8:	f4 0c 02 4c 	mul	r12,r10,r12
8000ccac:	0c 3c       	cp.w	r12,r6
8000ccae:	e0 88 00 0a 	brls	8000ccc2 <__avr32_udiv64+0x92>
8000ccb2:	20 18       	sub	r8,1
8000ccb4:	1c 06       	add	r6,lr
8000ccb6:	0c 3e       	cp.w	lr,r6
8000ccb8:	e0 8b 00 05 	brhi	8000ccc2 <__avr32_udiv64+0x92>
8000ccbc:	0c 3c       	cp.w	r12,r6
8000ccbe:	f7 b8 0b 01 	subhi	r8,1
8000ccc2:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000ccc6:	30 0c       	mov	r12,0
8000ccc8:	16 9a       	mov	r10,r11
8000ccca:	18 9b       	mov	r11,r12
8000cccc:	2f ed       	sub	sp,-8
8000ccce:	d8 32       	popm	r0-r7,pc
8000ccd0:	16 39       	cp.w	r9,r11
8000ccd2:	e0 8b 00 51 	brhi	8000cd74 <__avr32_udiv64+0x144>
8000ccd6:	f2 0c 12 00 	clz	r12,r9
8000ccda:	c5 31       	brne	8000cd80 <__avr32_udiv64+0x150>
8000ccdc:	14 38       	cp.w	r8,r10
8000ccde:	5f 89       	srls	r9
8000cce0:	16 35       	cp.w	r5,r11
8000cce2:	5f 38       	srlo	r8
8000cce4:	10 49       	or	r9,r8
8000cce6:	f8 09 18 00 	cp.b	r9,r12
8000ccea:	c4 50       	breq	8000cd74 <__avr32_udiv64+0x144>
8000ccec:	30 1b       	mov	r11,1
8000ccee:	c4 58       	rjmp	8000cd78 <__avr32_udiv64+0x148>
8000ccf0:	58 08       	cp.w	r8,0
8000ccf2:	c0 51       	brne	8000ccfc <__avr32_udiv64+0xcc>
8000ccf4:	30 19       	mov	r9,1
8000ccf6:	f2 08 0d 08 	divu	r8,r9,r8
8000ccfa:	10 9e       	mov	lr,r8
8000ccfc:	fc 08 12 00 	clz	r8,lr
8000cd00:	e0 81 00 91 	brne	8000ce22 <__avr32_udiv64+0x1f2>
8000cd04:	1c 1b       	sub	r11,lr
8000cd06:	fc 05 16 10 	lsr	r5,lr,0x10
8000cd0a:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000cd0e:	30 1c       	mov	r12,1
8000cd10:	f6 05 0d 0a 	divu	r10,r11,r5
8000cd14:	ec 08 16 10 	lsr	r8,r6,0x10
8000cd18:	f4 09 02 43 	mul	r3,r10,r9
8000cd1c:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000cd20:	14 9b       	mov	r11,r10
8000cd22:	10 33       	cp.w	r3,r8
8000cd24:	e0 88 00 0c 	brls	8000cd3c <__avr32_udiv64+0x10c>
8000cd28:	20 1b       	sub	r11,1
8000cd2a:	1c 08       	add	r8,lr
8000cd2c:	10 3e       	cp.w	lr,r8
8000cd2e:	e0 8b 00 07 	brhi	8000cd3c <__avr32_udiv64+0x10c>
8000cd32:	10 33       	cp.w	r3,r8
8000cd34:	f7 bb 0b 01 	subhi	r11,1
8000cd38:	f1 de eb 08 	addhi	r8,r8,lr
8000cd3c:	f0 03 01 03 	sub	r3,r8,r3
8000cd40:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000cd44:	e6 05 0d 02 	divu	r2,r3,r5
8000cd48:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000cd4c:	04 98       	mov	r8,r2
8000cd4e:	e4 09 02 49 	mul	r9,r2,r9
8000cd52:	0c 39       	cp.w	r9,r6
8000cd54:	e0 88 00 0a 	brls	8000cd68 <__avr32_udiv64+0x138>
8000cd58:	20 18       	sub	r8,1
8000cd5a:	1c 06       	add	r6,lr
8000cd5c:	0c 3e       	cp.w	lr,r6
8000cd5e:	e0 8b 00 05 	brhi	8000cd68 <__avr32_udiv64+0x138>
8000cd62:	0c 39       	cp.w	r9,r6
8000cd64:	f7 b8 0b 01 	subhi	r8,1
8000cd68:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000cd6c:	16 9a       	mov	r10,r11
8000cd6e:	18 9b       	mov	r11,r12
8000cd70:	2f ed       	sub	sp,-8
8000cd72:	d8 32       	popm	r0-r7,pc
8000cd74:	30 0b       	mov	r11,0
8000cd76:	16 9c       	mov	r12,r11
8000cd78:	16 9a       	mov	r10,r11
8000cd7a:	18 9b       	mov	r11,r12
8000cd7c:	2f ed       	sub	sp,-8
8000cd7e:	d8 32       	popm	r0-r7,pc
8000cd80:	f2 0c 09 45 	lsl	r5,r9,r12
8000cd84:	f8 0e 11 20 	rsub	lr,r12,32
8000cd88:	f0 0c 09 43 	lsl	r3,r8,r12
8000cd8c:	f4 0e 0a 46 	lsr	r6,r10,lr
8000cd90:	f0 0e 0a 48 	lsr	r8,r8,lr
8000cd94:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000cd98:	0a 48       	or	r8,r5
8000cd9a:	f0 01 16 10 	lsr	r1,r8,0x10
8000cd9e:	fc 01 0d 04 	divu	r4,lr,r1
8000cda2:	ee e5 ff f8 	st.d	r7[-8],r4
8000cda6:	f6 0c 09 49 	lsl	r9,r11,r12
8000cdaa:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000cdae:	ed e9 10 09 	or	r9,r6,r9
8000cdb2:	08 96       	mov	r6,r4
8000cdb4:	f2 0e 16 10 	lsr	lr,r9,0x10
8000cdb8:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000cdbc:	ec 05 02 4b 	mul	r11,r6,r5
8000cdc0:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000cdc4:	1c 3b       	cp.w	r11,lr
8000cdc6:	e0 88 00 07 	brls	8000cdd4 <__avr32_udiv64+0x1a4>
8000cdca:	20 16       	sub	r6,1
8000cdcc:	10 0e       	add	lr,r8
8000cdce:	1c 38       	cp.w	r8,lr
8000cdd0:	e0 88 00 6d 	brls	8000ceaa <__avr32_udiv64+0x27a>
8000cdd4:	16 1e       	sub	lr,r11
8000cdd6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000cdda:	fc 01 0d 00 	divu	r0,lr,r1
8000cdde:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000cde2:	00 9b       	mov	r11,r0
8000cde4:	e0 05 02 4e 	mul	lr,r0,r5
8000cde8:	12 3e       	cp.w	lr,r9
8000cdea:	e0 88 00 07 	brls	8000cdf8 <__avr32_udiv64+0x1c8>
8000cdee:	20 1b       	sub	r11,1
8000cdf0:	10 09       	add	r9,r8
8000cdf2:	12 38       	cp.w	r8,r9
8000cdf4:	e0 88 00 55 	brls	8000ce9e <__avr32_udiv64+0x26e>
8000cdf8:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000cdfc:	1c 19       	sub	r9,lr
8000cdfe:	f6 03 06 42 	mulu.d	r2,r11,r3
8000ce02:	06 39       	cp.w	r9,r3
8000ce04:	c0 93       	brcs	8000ce16 <__avr32_udiv64+0x1e6>
8000ce06:	5f 09       	sreq	r9
8000ce08:	f4 0c 09 4c 	lsl	r12,r10,r12
8000ce0c:	04 3c       	cp.w	r12,r2
8000ce0e:	5f 38       	srlo	r8
8000ce10:	f3 e8 00 08 	and	r8,r9,r8
8000ce14:	c0 20       	breq	8000ce18 <__avr32_udiv64+0x1e8>
8000ce16:	20 1b       	sub	r11,1
8000ce18:	30 0c       	mov	r12,0
8000ce1a:	16 9a       	mov	r10,r11
8000ce1c:	18 9b       	mov	r11,r12
8000ce1e:	2f ed       	sub	sp,-8
8000ce20:	d8 32       	popm	r0-r7,pc
8000ce22:	f6 08 09 49 	lsl	r9,r11,r8
8000ce26:	fc 08 09 4e 	lsl	lr,lr,r8
8000ce2a:	f0 01 11 20 	rsub	r1,r8,32
8000ce2e:	fc 05 16 10 	lsr	r5,lr,0x10
8000ce32:	f4 01 0a 42 	lsr	r2,r10,r1
8000ce36:	f6 01 0a 41 	lsr	r1,r11,r1
8000ce3a:	12 42       	or	r2,r9
8000ce3c:	e2 05 0d 00 	divu	r0,r1,r5
8000ce40:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000ce44:	e4 06 16 10 	lsr	r6,r2,0x10
8000ce48:	00 93       	mov	r3,r0
8000ce4a:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000ce4e:	e0 09 02 4c 	mul	r12,r0,r9
8000ce52:	0c 3c       	cp.w	r12,r6
8000ce54:	e0 88 00 07 	brls	8000ce62 <__avr32_udiv64+0x232>
8000ce58:	20 13       	sub	r3,1
8000ce5a:	1c 06       	add	r6,lr
8000ce5c:	0c 3e       	cp.w	lr,r6
8000ce5e:	e0 88 00 2c 	brls	8000ceb6 <__avr32_udiv64+0x286>
8000ce62:	ec 0c 01 01 	sub	r1,r6,r12
8000ce66:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000ce6a:	e2 05 0d 00 	divu	r0,r1,r5
8000ce6e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ce72:	00 9c       	mov	r12,r0
8000ce74:	e0 09 02 41 	mul	r1,r0,r9
8000ce78:	16 31       	cp.w	r1,r11
8000ce7a:	e0 88 00 0c 	brls	8000ce92 <__avr32_udiv64+0x262>
8000ce7e:	20 1c       	sub	r12,1
8000ce80:	1c 0b       	add	r11,lr
8000ce82:	16 3e       	cp.w	lr,r11
8000ce84:	e0 8b 00 07 	brhi	8000ce92 <__avr32_udiv64+0x262>
8000ce88:	16 31       	cp.w	r1,r11
8000ce8a:	f7 bc 0b 01 	subhi	r12,1
8000ce8e:	f7 de eb 0b 	addhi	r11,r11,lr
8000ce92:	f4 08 09 46 	lsl	r6,r10,r8
8000ce96:	02 1b       	sub	r11,r1
8000ce98:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000ce9c:	c3 ab       	rjmp	8000cd10 <__avr32_udiv64+0xe0>
8000ce9e:	12 3e       	cp.w	lr,r9
8000cea0:	f3 d8 eb 09 	addhi	r9,r9,r8
8000cea4:	f7 bb 0b 01 	subhi	r11,1
8000cea8:	ca 8b       	rjmp	8000cdf8 <__avr32_udiv64+0x1c8>
8000ceaa:	1c 3b       	cp.w	r11,lr
8000ceac:	f7 b6 0b 01 	subhi	r6,1
8000ceb0:	fd d8 eb 0e 	addhi	lr,lr,r8
8000ceb4:	c9 0b       	rjmp	8000cdd4 <__avr32_udiv64+0x1a4>
8000ceb6:	0c 3c       	cp.w	r12,r6
8000ceb8:	f7 b3 0b 01 	subhi	r3,1
8000cebc:	ed de eb 06 	addhi	r6,r6,lr
8000cec0:	cd 1b       	rjmp	8000ce62 <__avr32_udiv64+0x232>

8000cec2 <__avr32_umod64>:
8000cec2:	d4 31       	pushm	r0-r7,lr
8000cec4:	1a 97       	mov	r7,sp
8000cec6:	20 2d       	sub	sp,8
8000cec8:	10 9c       	mov	r12,r8
8000ceca:	12 95       	mov	r5,r9
8000cecc:	14 9e       	mov	lr,r10
8000cece:	16 93       	mov	r3,r11
8000ced0:	16 96       	mov	r6,r11
8000ced2:	58 09       	cp.w	r9,0
8000ced4:	c4 41       	brne	8000cf5c <__avr32_umod64+0x9a>
8000ced6:	16 38       	cp.w	r8,r11
8000ced8:	e0 88 00 5a 	brls	8000cf8c <__avr32_umod64+0xca>
8000cedc:	f0 08 12 00 	clz	r8,r8
8000cee0:	c0 d0       	breq	8000cefa <__avr32_umod64+0x38>
8000cee2:	f6 08 09 46 	lsl	r6,r11,r8
8000cee6:	f8 08 09 4c 	lsl	r12,r12,r8
8000ceea:	f0 0b 11 20 	rsub	r11,r8,32
8000ceee:	f4 08 09 4e 	lsl	lr,r10,r8
8000cef2:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000cef6:	f7 e6 10 06 	or	r6,r11,r6
8000cefa:	f8 0a 16 10 	lsr	r10,r12,0x10
8000cefe:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000cf02:	ec 0a 0d 02 	divu	r2,r6,r10
8000cf06:	fc 09 16 10 	lsr	r9,lr,0x10
8000cf0a:	ea 02 02 4b 	mul	r11,r5,r2
8000cf0e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000cf12:	12 3b       	cp.w	r11,r9
8000cf14:	e0 88 00 09 	brls	8000cf26 <__avr32_umod64+0x64>
8000cf18:	18 09       	add	r9,r12
8000cf1a:	12 3c       	cp.w	r12,r9
8000cf1c:	e0 8b 00 05 	brhi	8000cf26 <__avr32_umod64+0x64>
8000cf20:	12 3b       	cp.w	r11,r9
8000cf22:	f3 dc eb 09 	addhi	r9,r9,r12
8000cf26:	f2 0b 01 0b 	sub	r11,r9,r11
8000cf2a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000cf2e:	f6 0a 0d 0a 	divu	r10,r11,r10
8000cf32:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000cf36:	ea 0a 02 4a 	mul	r10,r5,r10
8000cf3a:	1c 3a       	cp.w	r10,lr
8000cf3c:	e0 88 00 09 	brls	8000cf4e <__avr32_umod64+0x8c>
8000cf40:	18 0e       	add	lr,r12
8000cf42:	1c 3c       	cp.w	r12,lr
8000cf44:	e0 8b 00 05 	brhi	8000cf4e <__avr32_umod64+0x8c>
8000cf48:	1c 3a       	cp.w	r10,lr
8000cf4a:	fd dc eb 0e 	addhi	lr,lr,r12
8000cf4e:	fc 0a 01 0a 	sub	r10,lr,r10
8000cf52:	30 0b       	mov	r11,0
8000cf54:	f4 08 0a 4a 	lsr	r10,r10,r8
8000cf58:	2f ed       	sub	sp,-8
8000cf5a:	d8 32       	popm	r0-r7,pc
8000cf5c:	16 39       	cp.w	r9,r11
8000cf5e:	fe 9b ff fd 	brhi	8000cf58 <__avr32_umod64+0x96>
8000cf62:	f2 09 12 00 	clz	r9,r9
8000cf66:	c4 61       	brne	8000cff2 <__avr32_umod64+0x130>
8000cf68:	14 38       	cp.w	r8,r10
8000cf6a:	5f 8b       	srls	r11
8000cf6c:	06 35       	cp.w	r5,r3
8000cf6e:	5f 3a       	srlo	r10
8000cf70:	f7 ea 10 0a 	or	r10,r11,r10
8000cf74:	f2 0a 18 00 	cp.b	r10,r9
8000cf78:	c0 60       	breq	8000cf84 <__avr32_umod64+0xc2>
8000cf7a:	fc 08 01 0a 	sub	r10,lr,r8
8000cf7e:	e6 05 01 46 	sbc	r6,r3,r5
8000cf82:	14 9e       	mov	lr,r10
8000cf84:	0c 9b       	mov	r11,r6
8000cf86:	1c 9a       	mov	r10,lr
8000cf88:	2f ed       	sub	sp,-8
8000cf8a:	d8 32       	popm	r0-r7,pc
8000cf8c:	58 08       	cp.w	r8,0
8000cf8e:	c0 51       	brne	8000cf98 <__avr32_umod64+0xd6>
8000cf90:	30 19       	mov	r9,1
8000cf92:	f2 08 0d 08 	divu	r8,r9,r8
8000cf96:	10 9c       	mov	r12,r8
8000cf98:	f8 08 12 00 	clz	r8,r12
8000cf9c:	e0 81 00 84 	brne	8000d0a4 <__avr32_umod64+0x1e2>
8000cfa0:	ec 0c 01 0b 	sub	r11,r6,r12
8000cfa4:	f8 03 16 10 	lsr	r3,r12,0x10
8000cfa8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000cfac:	f6 03 0d 0a 	divu	r10,r11,r3
8000cfb0:	fc 09 16 10 	lsr	r9,lr,0x10
8000cfb4:	ea 0a 02 4a 	mul	r10,r5,r10
8000cfb8:	f3 eb 11 09 	or	r9,r9,r11<<0x10
8000cfbc:	12 3a       	cp.w	r10,r9
8000cfbe:	e0 88 00 09 	brls	8000cfd0 <__avr32_umod64+0x10e>
8000cfc2:	18 09       	add	r9,r12
8000cfc4:	12 3c       	cp.w	r12,r9
8000cfc6:	e0 8b 00 05 	brhi	8000cfd0 <__avr32_umod64+0x10e>
8000cfca:	12 3a       	cp.w	r10,r9
8000cfcc:	f3 dc eb 09 	addhi	r9,r9,r12
8000cfd0:	14 19       	sub	r9,r10
8000cfd2:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000cfd6:	f2 03 0d 02 	divu	r2,r9,r3
8000cfda:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000cfde:	ea 02 02 4a 	mul	r10,r5,r2
8000cfe2:	1c 3a       	cp.w	r10,lr
8000cfe4:	fe 98 ff b5 	brls	8000cf4e <__avr32_umod64+0x8c>
8000cfe8:	18 0e       	add	lr,r12
8000cfea:	1c 3c       	cp.w	r12,lr
8000cfec:	fe 9b ff b1 	brhi	8000cf4e <__avr32_umod64+0x8c>
8000cff0:	ca cb       	rjmp	8000cf48 <__avr32_umod64+0x86>
8000cff2:	f2 0e 11 20 	rsub	lr,r9,32
8000cff6:	ea 09 09 45 	lsl	r5,r5,r9
8000cffa:	f6 09 09 4b 	lsl	r11,r11,r9
8000cffe:	e6 0e 0a 43 	lsr	r3,r3,lr
8000d002:	f0 09 09 41 	lsl	r1,r8,r9
8000d006:	f4 09 09 42 	lsl	r2,r10,r9
8000d00a:	f0 0e 0a 48 	lsr	r8,r8,lr
8000d00e:	f4 0e 0a 4a 	lsr	r10,r10,lr
8000d012:	0a 48       	or	r8,r5
8000d014:	16 4a       	or	r10,r11
8000d016:	f0 06 16 10 	lsr	r6,r8,0x10
8000d01a:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000d01e:	e6 06 0d 04 	divu	r4,r3,r6
8000d022:	f4 03 16 10 	lsr	r3,r10,0x10
8000d026:	08 9b       	mov	r11,r4
8000d028:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000d02c:	e8 0c 02 45 	mul	r5,r4,r12
8000d030:	06 35       	cp.w	r5,r3
8000d032:	e0 88 00 07 	brls	8000d040 <__avr32_umod64+0x17e>
8000d036:	20 1b       	sub	r11,1
8000d038:	10 03       	add	r3,r8
8000d03a:	06 38       	cp.w	r8,r3
8000d03c:	e0 88 00 72 	brls	8000d120 <__avr32_umod64+0x25e>
8000d040:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000d044:	0a 13       	sub	r3,r5
8000d046:	e6 06 0d 04 	divu	r4,r3,r6
8000d04a:	f5 e5 11 06 	or	r6,r10,r5<<0x10
8000d04e:	e8 0c 02 4c 	mul	r12,r4,r12
8000d052:	08 9a       	mov	r10,r4
8000d054:	0c 3c       	cp.w	r12,r6
8000d056:	e0 88 00 07 	brls	8000d064 <__avr32_umod64+0x1a2>
8000d05a:	20 1a       	sub	r10,1
8000d05c:	10 06       	add	r6,r8
8000d05e:	0c 38       	cp.w	r8,r6
8000d060:	e0 88 00 5a 	brls	8000d114 <__avr32_umod64+0x252>
8000d064:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
8000d068:	18 16       	sub	r6,r12
8000d06a:	f6 01 06 4a 	mulu.d	r10,r11,r1
8000d06e:	14 9c       	mov	r12,r10
8000d070:	16 36       	cp.w	r6,r11
8000d072:	c0 73       	brcs	8000d080 <__avr32_umod64+0x1be>
8000d074:	5f 05       	sreq	r5
8000d076:	14 32       	cp.w	r2,r10
8000d078:	5f 3a       	srlo	r10
8000d07a:	eb ea 00 0a 	and	r10,r5,r10
8000d07e:	c0 60       	breq	8000d08a <__avr32_umod64+0x1c8>
8000d080:	f8 01 01 04 	sub	r4,r12,r1
8000d084:	f6 08 01 4b 	sbc	r11,r11,r8
8000d088:	08 9c       	mov	r12,r4
8000d08a:	e4 0c 01 0a 	sub	r10,r2,r12
8000d08e:	ec 0b 01 46 	sbc	r6,r6,r11
8000d092:	ec 09 0a 4b 	lsr	r11,r6,r9
8000d096:	f4 09 0a 4a 	lsr	r10,r10,r9
8000d09a:	ec 0e 09 46 	lsl	r6,r6,lr
8000d09e:	0c 4a       	or	r10,r6
8000d0a0:	2f ed       	sub	sp,-8
8000d0a2:	d8 32       	popm	r0-r7,pc
8000d0a4:	f0 01 11 20 	rsub	r1,r8,32
8000d0a8:	f4 01 0a 4b 	lsr	r11,r10,r1
8000d0ac:	f8 08 09 4c 	lsl	r12,r12,r8
8000d0b0:	ec 08 09 49 	lsl	r9,r6,r8
8000d0b4:	ec 01 0a 41 	lsr	r1,r6,r1
8000d0b8:	f7 e9 10 09 	or	r9,r11,r9
8000d0bc:	f8 03 16 10 	lsr	r3,r12,0x10
8000d0c0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000d0c4:	e2 03 0d 00 	divu	r0,r1,r3
8000d0c8:	f2 0b 16 10 	lsr	r11,r9,0x10
8000d0cc:	ea 00 02 4e 	mul	lr,r5,r0
8000d0d0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d0d4:	16 3e       	cp.w	lr,r11
8000d0d6:	e0 88 00 06 	brls	8000d0e2 <__avr32_umod64+0x220>
8000d0da:	18 0b       	add	r11,r12
8000d0dc:	16 3c       	cp.w	r12,r11
8000d0de:	e0 88 00 27 	brls	8000d12c <__avr32_umod64+0x26a>
8000d0e2:	f6 0e 01 01 	sub	r1,r11,lr
8000d0e6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000d0ea:	e2 03 0d 00 	divu	r0,r1,r3
8000d0ee:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000d0f2:	ea 00 02 4b 	mul	r11,r5,r0
8000d0f6:	12 3b       	cp.w	r11,r9
8000d0f8:	e0 88 00 09 	brls	8000d10a <__avr32_umod64+0x248>
8000d0fc:	18 09       	add	r9,r12
8000d0fe:	12 3c       	cp.w	r12,r9
8000d100:	e0 8b 00 05 	brhi	8000d10a <__avr32_umod64+0x248>
8000d104:	12 3b       	cp.w	r11,r9
8000d106:	f3 dc eb 09 	addhi	r9,r9,r12
8000d10a:	f2 0b 01 0b 	sub	r11,r9,r11
8000d10e:	f4 08 09 4e 	lsl	lr,r10,r8
8000d112:	c4 db       	rjmp	8000cfac <__avr32_umod64+0xea>
8000d114:	0c 3c       	cp.w	r12,r6
8000d116:	f7 ba 0b 01 	subhi	r10,1
8000d11a:	ed d8 eb 06 	addhi	r6,r6,r8
8000d11e:	ca 3b       	rjmp	8000d064 <__avr32_umod64+0x1a2>
8000d120:	06 35       	cp.w	r5,r3
8000d122:	f7 bb 0b 01 	subhi	r11,1
8000d126:	e7 d8 eb 03 	addhi	r3,r3,r8
8000d12a:	c8 bb       	rjmp	8000d040 <__avr32_umod64+0x17e>
8000d12c:	16 3e       	cp.w	lr,r11
8000d12e:	f7 dc eb 0b 	addhi	r11,r11,r12
8000d132:	cd 8b       	rjmp	8000d0e2 <__avr32_umod64+0x220>

Disassembly of section .exception:

8000d200 <_evba>:
8000d200:	c0 08       	rjmp	8000d200 <_evba>
	...

8000d204 <_handle_TLB_Multiple_Hit>:
8000d204:	c0 08       	rjmp	8000d204 <_handle_TLB_Multiple_Hit>
	...

8000d208 <_handle_Bus_Error_Data_Fetch>:
8000d208:	c0 08       	rjmp	8000d208 <_handle_Bus_Error_Data_Fetch>
	...

8000d20c <_handle_Bus_Error_Instruction_Fetch>:
8000d20c:	c0 08       	rjmp	8000d20c <_handle_Bus_Error_Instruction_Fetch>
	...

8000d210 <_handle_NMI>:
8000d210:	c0 08       	rjmp	8000d210 <_handle_NMI>
	...

8000d214 <_handle_Instruction_Address>:
8000d214:	c0 08       	rjmp	8000d214 <_handle_Instruction_Address>
	...

8000d218 <_handle_ITLB_Protection>:
8000d218:	c0 08       	rjmp	8000d218 <_handle_ITLB_Protection>
	...

8000d21c <_handle_Breakpoint>:
8000d21c:	c0 08       	rjmp	8000d21c <_handle_Breakpoint>
	...

8000d220 <_handle_Illegal_Opcode>:
8000d220:	c0 08       	rjmp	8000d220 <_handle_Illegal_Opcode>
	...

8000d224 <_handle_Unimplemented_Instruction>:
8000d224:	c0 08       	rjmp	8000d224 <_handle_Unimplemented_Instruction>
	...

8000d228 <_handle_Privilege_Violation>:
8000d228:	c0 08       	rjmp	8000d228 <_handle_Privilege_Violation>
	...

8000d22c <_handle_Floating_Point>:
8000d22c:	c0 08       	rjmp	8000d22c <_handle_Floating_Point>
	...

8000d230 <_handle_Coprocessor_Absent>:
8000d230:	c0 08       	rjmp	8000d230 <_handle_Coprocessor_Absent>
	...

8000d234 <_handle_Data_Address_Read>:
8000d234:	c0 08       	rjmp	8000d234 <_handle_Data_Address_Read>
	...

8000d238 <_handle_Data_Address_Write>:
8000d238:	c0 08       	rjmp	8000d238 <_handle_Data_Address_Write>
	...

8000d23c <_handle_DTLB_Protection_Read>:
8000d23c:	c0 08       	rjmp	8000d23c <_handle_DTLB_Protection_Read>
	...

8000d240 <_handle_DTLB_Protection_Write>:
8000d240:	c0 08       	rjmp	8000d240 <_handle_DTLB_Protection_Write>
	...

8000d244 <_handle_DTLB_Modified>:
8000d244:	c0 08       	rjmp	8000d244 <_handle_DTLB_Modified>
	...

8000d250 <_handle_ITLB_Miss>:
8000d250:	c0 08       	rjmp	8000d250 <_handle_ITLB_Miss>
	...

8000d260 <_handle_DTLB_Miss_Read>:
8000d260:	c0 08       	rjmp	8000d260 <_handle_DTLB_Miss_Read>
	...

8000d270 <_handle_DTLB_Miss_Write>:
8000d270:	c0 08       	rjmp	8000d270 <_handle_DTLB_Miss_Write>
	...

8000d300 <_handle_Supervisor_Call>:
8000d300:	c0 08       	rjmp	8000d300 <_handle_Supervisor_Call>
8000d302:	d7 03       	nop

8000d304 <_int0>:
8000d304:	30 0c       	mov	r12,0
8000d306:	fe b0 ae 95 	rcall	80003030 <_get_interrupt_handler>
8000d30a:	58 0c       	cp.w	r12,0
8000d30c:	f8 0f 17 10 	movne	pc,r12
8000d310:	d6 03       	rete

8000d312 <_int1>:
8000d312:	30 1c       	mov	r12,1
8000d314:	fe b0 ae 8e 	rcall	80003030 <_get_interrupt_handler>
8000d318:	58 0c       	cp.w	r12,0
8000d31a:	f8 0f 17 10 	movne	pc,r12
8000d31e:	d6 03       	rete

8000d320 <_int2>:
8000d320:	30 2c       	mov	r12,2
8000d322:	fe b0 ae 87 	rcall	80003030 <_get_interrupt_handler>
8000d326:	58 0c       	cp.w	r12,0
8000d328:	f8 0f 17 10 	movne	pc,r12
8000d32c:	d6 03       	rete

8000d32e <_int3>:
8000d32e:	30 3c       	mov	r12,3
8000d330:	fe b0 ae 80 	rcall	80003030 <_get_interrupt_handler>
8000d334:	58 0c       	cp.w	r12,0
8000d336:	f8 0f 17 10 	movne	pc,r12
8000d33a:	d6 03       	rete
8000d33c:	d7 03       	nop
8000d33e:	d7 03       	nop
8000d340:	d7 03       	nop
8000d342:	d7 03       	nop
8000d344:	d7 03       	nop
8000d346:	d7 03       	nop
8000d348:	d7 03       	nop
8000d34a:	d7 03       	nop
8000d34c:	d7 03       	nop
8000d34e:	d7 03       	nop
8000d350:	d7 03       	nop
8000d352:	d7 03       	nop
8000d354:	d7 03       	nop
8000d356:	d7 03       	nop
8000d358:	d7 03       	nop
8000d35a:	d7 03       	nop
8000d35c:	d7 03       	nop
8000d35e:	d7 03       	nop
8000d360:	d7 03       	nop
8000d362:	d7 03       	nop
8000d364:	d7 03       	nop
8000d366:	d7 03       	nop
8000d368:	d7 03       	nop
8000d36a:	d7 03       	nop
8000d36c:	d7 03       	nop
8000d36e:	d7 03       	nop
8000d370:	d7 03       	nop
8000d372:	d7 03       	nop
8000d374:	d7 03       	nop
8000d376:	d7 03       	nop
8000d378:	d7 03       	nop
8000d37a:	d7 03       	nop
8000d37c:	d7 03       	nop
8000d37e:	d7 03       	nop
8000d380:	d7 03       	nop
8000d382:	d7 03       	nop
8000d384:	d7 03       	nop
8000d386:	d7 03       	nop
8000d388:	d7 03       	nop
8000d38a:	d7 03       	nop
8000d38c:	d7 03       	nop
8000d38e:	d7 03       	nop
8000d390:	d7 03       	nop
8000d392:	d7 03       	nop
8000d394:	d7 03       	nop
8000d396:	d7 03       	nop
8000d398:	d7 03       	nop
8000d39a:	d7 03       	nop
8000d39c:	d7 03       	nop
8000d39e:	d7 03       	nop
8000d3a0:	d7 03       	nop
8000d3a2:	d7 03       	nop
8000d3a4:	d7 03       	nop
8000d3a6:	d7 03       	nop
8000d3a8:	d7 03       	nop
8000d3aa:	d7 03       	nop
8000d3ac:	d7 03       	nop
8000d3ae:	d7 03       	nop
8000d3b0:	d7 03       	nop
8000d3b2:	d7 03       	nop
8000d3b4:	d7 03       	nop
8000d3b6:	d7 03       	nop
8000d3b8:	d7 03       	nop
8000d3ba:	d7 03       	nop
8000d3bc:	d7 03       	nop
8000d3be:	d7 03       	nop
8000d3c0:	d7 03       	nop
8000d3c2:	d7 03       	nop
8000d3c4:	d7 03       	nop
8000d3c6:	d7 03       	nop
8000d3c8:	d7 03       	nop
8000d3ca:	d7 03       	nop
8000d3cc:	d7 03       	nop
8000d3ce:	d7 03       	nop
8000d3d0:	d7 03       	nop
8000d3d2:	d7 03       	nop
8000d3d4:	d7 03       	nop
8000d3d6:	d7 03       	nop
8000d3d8:	d7 03       	nop
8000d3da:	d7 03       	nop
8000d3dc:	d7 03       	nop
8000d3de:	d7 03       	nop
8000d3e0:	d7 03       	nop
8000d3e2:	d7 03       	nop
8000d3e4:	d7 03       	nop
8000d3e6:	d7 03       	nop
8000d3e8:	d7 03       	nop
8000d3ea:	d7 03       	nop
8000d3ec:	d7 03       	nop
8000d3ee:	d7 03       	nop
8000d3f0:	d7 03       	nop
8000d3f2:	d7 03       	nop
8000d3f4:	d7 03       	nop
8000d3f6:	d7 03       	nop
8000d3f8:	d7 03       	nop
8000d3fa:	d7 03       	nop
8000d3fc:	d7 03       	nop
8000d3fe:	d7 03       	nop
