
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011086  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80013200  80013200  00013600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001088  80013400  80013400  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000005fc  00000004  80014488  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001030  00000600  80014aa0  00015200  2**5
                  ALLOC
  7 .comment      00000030  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00002198  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00005128  00000000  00000000  000173c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00058bb0  00000000  00000000  0001c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b624  00000000  00000000  000750a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028fb9  00000000  00000000  000806c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000057a4  00000000  00000000  000a9680  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000e95c  00000000  00000000  000aee24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000162fc  00000000  00000000  000bd780  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 0343c7ca  00000000  00000000  000d3a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 18 .debug_ranges 000024a0  00000000  00000000  03510246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf a5 f0 	sub	pc,pc,-23056

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002004:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	10 88       	andn	r8,r8
8000210c:	00 00       	add	r0,r0
8000210e:	10 86       	andn	r6,r8
80002110:	00 00       	add	r0,r0
80002112:	10 74       	tst	r4,r8
80002114:	00 00       	add	r0,r0
80002116:	10 7c       	tst	r12,r8
80002118:	00 00       	add	r0,r0
8000211a:	10 80       	andn	r0,r8
8000211c:	00 00       	add	r0,r0
8000211e:	10 7e       	tst	lr,r8

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 34 00 	mov	r12,-52224
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 34 00 	mov	r12,-52224
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	3a c6       	mov	r6,-84
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	3a e2       	mov	r2,-82

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 0b       	mov	r11,0
8000215c:	fe 7c 34 00 	mov	r12,-52224
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 0b       	mov	r11,0
8000217a:	fe 7c 34 00 	mov	r12,-52224
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 0b       	mov	r11,0
80002194:	fe 7c 34 00 	mov	r12,-52224
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	39 96       	mov	r6,-103
800021a4:	00 00       	add	r0,r0
800021a6:	10 98       	mov	r8,r8
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	39 e2       	mov	r2,-98
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	06 00       	add	r0,r3
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	06 00       	add	r0,r3
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 34 00 	mov	r12,-52224
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 34 00 	mov	r12,-52224
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 34 00 	mov	r12,-52224
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 34 00 	mov	r12,-52224
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 34 00 	mov	r12,-52224
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 34 00 	mov	r12,-52224
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 34 00 	mov	r12,-52224
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 34 00 	mov	r12,-52224
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 34 00 	mov	r12,-52224
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	3a c6       	mov	r6,-84
800022ac:	00 00       	add	r0,r0
800022ae:	10 98       	mov	r8,r8
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 0b       	mov	r11,0
800022be:	fe 7c 34 00 	mov	r12,-52224
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 0b       	mov	r11,0
800022d4:	fe 7c 34 00 	mov	r12,-52224
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 96       	mov	r6,-103
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	10 98       	mov	r8,r8
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	39 e2       	mov	r2,-98

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 34 00 	mov	r1,-52224
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	06 18       	sub	r8,r3
80002364:	00 00       	add	r0,r0
80002366:	10 98       	mov	r8,r8
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	3a c6       	mov	r6,-84
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 0b       	mov	r11,0
80002380:	fe 7c 34 00 	mov	r12,-52224
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 0b       	mov	r11,0
800023c2:	fe 7c 34 00 	mov	r12,-52224
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 34 00 	mov	r12,-52224
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 34 00 	mov	r12,-52224
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 34 00 	mov	r5,-52224
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 34 00 	mov	r12,-52224
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 34 00 	mov	r12,-52224
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 34 00 	mov	r12,-52224
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 34 00 	mov	r12,-52224
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 0b       	mov	r11,0
80002440:	fe 7c 34 00 	mov	r12,-52224
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 34 00 	mov	r12,-52224
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 34 00 	mov	r12,-52224
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 0b       	mov	r11,0
80002466:	fe 7c 34 00 	mov	r12,-52224
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	39 96       	mov	r6,-103
800024a0:	00 00       	add	r0,r0
800024a2:	10 86       	andn	r6,r8
800024a4:	00 00       	add	r0,r0
800024a6:	06 00       	add	r0,r3
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	10 98       	mov	r8,r8
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	39 e2       	mov	r2,-98
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	3a c6       	mov	r6,-84
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 0b       	mov	r11,0
800024cc:	fe 7c 34 00 	mov	r12,-52224
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 0b       	mov	r11,0
800024e6:	fe 7c 34 00 	mov	r12,-52224
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 0b       	mov	r11,0
8000251e:	fe 7c 34 00 	mov	r12,-52224
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	39 96       	mov	r6,-103
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	10 98       	mov	r8,r8
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	39 e2       	mov	r2,-98
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 0b       	mov	r11,0
80002558:	fe 7c 34 00 	mov	r12,-52224
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 0b       	mov	r11,0
80002576:	fe 7c 34 00 	mov	r12,-52224
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 0b       	mov	r11,0
800025aa:	fe 7c 34 00 	mov	r12,-52224
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 0b       	mov	r11,0
800025cc:	fe 7c 34 00 	mov	r12,-52224
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 0b       	mov	r11,0
800025da:	fe 7c 34 00 	mov	r12,-52224
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	39 96       	mov	r6,-103
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	10 98       	mov	r8,r8
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	39 e2       	mov	r2,-98
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 0b       	mov	r11,0
80002612:	fe 7c 34 00 	mov	r12,-52224
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 0b       	mov	r11,0
80002654:	fe 7c 34 00 	mov	r12,-52224
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 0b       	mov	r11,0
80002668:	fe 7c 34 00 	mov	r12,-52224
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 34 00 	mov	r12,-52224
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 0b       	mov	r11,0
800026a4:	fe 7c 34 00 	mov	r12,-52224
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 34 00 	mov	r6,-52224
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 34 00 	mov	r12,-52224
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 34 00 	mov	r12,-52224
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 34 00 	mov	r12,-52224
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 34 00 	mov	r12,-52224
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 0b       	mov	r11,0
80002716:	fe 7c 34 00 	mov	r12,-52224
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	39 96       	mov	r6,-103
80002730:	00 00       	add	r0,r0
80002732:	10 86       	andn	r6,r8
80002734:	00 00       	add	r0,r0
80002736:	06 00       	add	r0,r3
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	10 98       	mov	r8,r8
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	39 e2       	mov	r2,-98
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	3a c6       	mov	r6,-84
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	3a e2       	mov	r2,-82

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 0b       	mov	r11,0
80002760:	fe 7c 34 00 	mov	r12,-52224
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 0b       	mov	r11,0
80002788:	fe 7c 34 00 	mov	r12,-52224
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 0b       	mov	r11,0
800027a2:	fe 7c 34 00 	mov	r12,-52224
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 34 00 	mov	r6,-52224
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 34 00 	mov	r12,-52224
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 34 00 	mov	r12,-52224
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 34 00 	mov	r12,-52224
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 0b       	mov	r11,0
80002810:	fe 7c 34 00 	mov	r12,-52224
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	39 96       	mov	r6,-103
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	10 98       	mov	r8,r8
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	39 e2       	mov	r2,-98
80002834:	00 00       	add	r0,r0
80002836:	06 18       	sub	r8,r3
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	3a c6       	mov	r6,-84
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	3a e2       	mov	r2,-82

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 34 00 	mov	r12,-52224
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 0b       	mov	r11,0
80002860:	fe 7c 34 00 	mov	r12,-52224
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 34 00 	mov	r5,-52224
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 0b       	mov	r11,0
80002882:	fe 7c 34 00 	mov	r12,-52224
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 34 00 	mov	r12,-52224
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 34 00 	mov	r1,-52224
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 34 00 	mov	r12,-52224
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 34 00 	mov	r12,-52224
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 34 00 	mov	r12,-52224
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 34 00 	mov	r1,-52224
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 34 00 	mov	r1,-52224

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 34 00 	mov	r12,-52224
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 34 00 	mov	r12,-52224
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 34 00 	mov	r12,-52224
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	06 04       	add	r4,r3
80002ab0:	00 00       	add	r0,r0
80002ab2:	06 14       	sub	r4,r3
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	3a 08       	mov	r8,-96
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	39 96       	mov	r6,-103
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	3a c6       	mov	r6,-84
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	39 e2       	mov	r2,-98
80002ac4:	00 00       	add	r0,r0
80002ac6:	06 18       	sub	r8,r3
80002ac8:	00 00       	add	r0,r0
80002aca:	10 86       	andn	r6,r8
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	10 98       	mov	r8,r8
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	10 88       	andn	r8,r8
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	06 18       	sub	r8,r3
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	68 09       	ld.w	r9,r4[0x0]
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	68 19       	ld.w	r9,r4[0x4]
80002b24:	91 19       	st.w	r8[0x4],r9
80002b26:	68 29       	ld.w	r9,r4[0x8]
80002b28:	91 29       	st.w	r8[0x8],r9
80002b2a:	68 39       	ld.w	r9,r4[0xc]
80002b2c:	91 39       	st.w	r8[0xc],r9

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	06 14       	sub	r4,r3
80002b3c:	00 00       	add	r0,r0
80002b3e:	06 04       	add	r4,r3
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 04       	add	r4,r0
80002bac:	00 00       	add	r0,r0
80002bae:	06 18       	sub	r8,r3
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	06 18       	sub	r8,r3
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	06 18       	sub	r8,r3
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	06 18       	sub	r8,r3
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	10 80       	andn	r0,r8

80002cd0 <acifa_is_aca_ready>:
#include "compiler.h"
#include "acifa.h"

static bool acifa_is_aca_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACARDY_MASK) != 0;
80002cd0:	79 0c       	ld.w	r12,r12[0x40]
}
80002cd2:	f9 dc c3 01 	bfextu	r12,r12,0x18,0x1
80002cd6:	5e fc       	retal	r12

80002cd8 <acifa_is_acb_ready>:

static bool acifa_is_acb_ready(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBRDY_MASK) != 0;
80002cd8:	79 0c       	ld.w	r12,r12[0x40]
}
80002cda:	f9 dc c3 21 	bfextu	r12,r12,0x19,0x1
80002cde:	5e fc       	retal	r12

80002ce0 <acifa_configure>:
void acifa_configure(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel,
		uint8_t input_p,
		uint8_t input_n,
		uint32_t pb_hz)
{
80002ce0:	d4 01       	pushm	lr
	Assert( acifa != NULL );
	if (comp_sel == ACIFA_COMP_SELA) {
80002ce2:	30 1e       	mov	lr,1
80002ce4:	fc 0b 18 00 	cp.b	r11,lr
80002ce8:	c0 a1       	brne	80002cfc <acifa_configure+0x1c>
		acifa->confa
80002cea:	b1 69       	lsl	r9,0x10
80002cec:	e6 19 00 0f 	andh	r9,0xf,COH
80002cf0:	a9 6a       	lsl	r10,0x8
80002cf2:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002cf6:	14 49       	or	r9,r10
80002cf8:	99 09       	st.w	r12[0x0],r9
80002cfa:	c0 98       	rjmp	80002d0c <acifa_configure+0x2c>
				AVR32_ACIFA_CONFA_INSELP_MASK) |
				((input_n <<
				AVR32_ACIFA_CONFA_INSELN_OFFSET) &
				AVR32_ACIFA_CONFA_INSELN_MASK);
	} else {
		acifa->confb
80002cfc:	b1 69       	lsl	r9,0x10
80002cfe:	e6 19 00 0f 	andh	r9,0xf,COH
80002d02:	a9 6a       	lsl	r10,0x8
80002d04:	e2 1a 0f 00 	andl	r10,0xf00,COH
80002d08:	14 49       	or	r9,r10
80002d0a:	99 19       	st.w	r12[0x4],r9
				AVR32_ACIFA_CONFB_INSELN_OFFSET) &
				AVR32_ACIFA_CONFB_INSELN_MASK);
	}

	/* Startup Time of up to 10us max. */
	acifa->sut = (pb_hz / 100000);
80002d0c:	f0 09 16 05 	lsr	r9,r8,0x5
80002d10:	e0 6a 5a c5 	mov	r10,23237
80002d14:	ea 1a 0a 7c 	orh	r10,0xa7c
80002d18:	f2 0a 06 48 	mulu.d	r8,r9,r10
80002d1c:	f2 08 16 07 	lsr	r8,r9,0x7
80002d20:	99 98       	st.w	r12[0x24],r8
}
80002d22:	d8 02       	popm	pc

80002d24 <acifa_configure_hysteresis>:
		uint8_t level)
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
80002d24:	30 18       	mov	r8,1
80002d26:	f0 0b 18 00 	cp.b	r11,r8
80002d2a:	c0 81       	brne	80002d3a <acifa_configure_hysteresis+0x16>
		acifa->confa
			|= ((level <<
80002d2c:	78 08       	ld.w	r8,r12[0x0]
80002d2e:	b9 6a       	lsl	r10,0x18
80002d30:	e6 1a 03 00 	andh	r10,0x300,COH
80002d34:	10 4a       	or	r10,r8
{
	Assert( acifa != NULL );

	/* Hysteresis Configuration */
	if (comp_sel == ACIFA_COMP_SELA) {
		acifa->confa
80002d36:	99 0a       	st.w	r12[0x0],r10
80002d38:	5e fc       	retal	r12
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
			|= ((level <<
80002d3a:	78 18       	ld.w	r8,r12[0x4]
80002d3c:	b9 6a       	lsl	r10,0x18
80002d3e:	e6 1a 03 00 	andh	r10,0x300,COH
80002d42:	10 4a       	or	r10,r8
		acifa->confa
			|= ((level <<
				AVR32_ACIFA_CONFA_HS_OFFSET) &
				AVR32_ACIFA_CONFA_HS_MASK);
	} else {
		acifa->confb
80002d44:	99 1a       	st.w	r12[0x4],r10
80002d46:	5e fc       	retal	r12

80002d48 <acifa_start>:
 * \param *acifa        Base address of the ACIFA
 * \param comp_sel      Comparator Selection
 */
void acifa_start(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	18 97       	mov	r7,r12
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002d4e:	30 18       	mov	r8,1
80002d50:	f0 0b 18 00 	cp.b	r11,r8
80002d54:	c0 91       	brne	80002d66 <acifa_start+0x1e>
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d56:	30 98       	mov	r8,9
80002d58:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0f 	mcall	80002d98 <acifa_start+0x50>
80002d60:	cf d0       	breq	80002d5a <acifa_start+0x12>
80002d62:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACA */
		}
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002d66:	30 28       	mov	r8,2
80002d68:	f0 0b 18 00 	cp.b	r11,r8
80002d6c:	c0 91       	brne	80002d7e <acifa_start+0x36>
		acifa->en = (AVR32_ACIFA_EN_ACBEN_MASK) |
80002d6e:	31 28       	mov	r8,18
80002d70:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_acb_ready(acifa)) {
80002d72:	0e 9c       	mov	r12,r7
80002d74:	f0 1f 00 0a 	mcall	80002d9c <acifa_start+0x54>
80002d78:	cf d0       	breq	80002d72 <acifa_start+0x2a>
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
			/* Wait for ACB */
		}
	} else {
		acifa->en = (AVR32_ACIFA_EN_ACAEN_MASK) |
80002d7e:	31 b8       	mov	r8,27
80002d80:	99 78       	st.w	r12[0x1c],r8
				(AVR32_ACIFA_EN_ACACPEN_MASK) |
				(AVR32_ACIFA_EN_ACBEN_MASK) |
				(AVR32_ACIFA_EN_ACBCPEN_MASK);

		while (!acifa_is_aca_ready(acifa)) {
80002d82:	0e 9c       	mov	r12,r7
80002d84:	f0 1f 00 05 	mcall	80002d98 <acifa_start+0x50>
80002d88:	cf d0       	breq	80002d82 <acifa_start+0x3a>
			/* Wait for ACA */
		}
		while (!acifa_is_acb_ready(acifa)) {
80002d8a:	0e 9c       	mov	r12,r7
80002d8c:	f0 1f 00 04 	mcall	80002d9c <acifa_start+0x54>
80002d90:	cf d0       	breq	80002d8a <acifa_start+0x42>
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c d0       	sub	r0,-51
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	2c d8       	sub	r8,-51

80002da0 <acifa_is_aca_inp_higher>:
 *  \retval true when ACA Input P is higher than Input N
 *  \retval false when ACA Input P is Lower than Input N
 */
bool acifa_is_aca_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACACS_MASK) != 0;
80002da0:	79 0c       	ld.w	r12,r12[0x40]
}
80002da2:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
80002da6:	5e fc       	retal	r12

80002da8 <acifa_is_acb_inp_higher>:
 *  \retval true when ACB Input P is higher than Input N
 *  \retval false when ACB Input P is Lower than Input N
 */
bool acifa_is_acb_inp_higher(volatile avr32_acifa_t *acifa)
{
	return (acifa->sr & AVR32_ACIFA_SR_ACBCS_MASK) != 0;
80002da8:	79 0c       	ld.w	r12,r12[0x40]
}
80002daa:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80002dae:	5e fc       	retal	r12

80002db0 <acifa_clear_flags>:
 * \param acifa         Base address of the ACIFA
 * \param flag_mask     Flag Mask Value
 */
void acifa_clear_flags(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	acifa->scr = flag_mask;
80002db0:	f9 4b 00 44 	st.w	r12[68],r11
}
80002db4:	5e fc       	retal	r12

80002db6 <acifa_enable_interrupt_toggle>:
void acifa_enable_interrupt_toggle(volatile avr32_acifa_t *acifa,
		uint8_t comp_sel)
{
	Assert( acifa != NULL );

	if (comp_sel == ACIFA_COMP_SELA) {
80002db6:	30 18       	mov	r8,1
80002db8:	f0 0b 18 00 	cp.b	r11,r8
80002dbc:	c0 71       	brne	80002dca <acifa_enable_interrupt_toggle+0x14>
		acifa->CONFA.is = 2;
80002dbe:	78 08       	ld.w	r8,r12[0x0]
80002dc0:	30 29       	mov	r9,2
80002dc2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dc6:	99 08       	st.w	r12[0x0],r8
80002dc8:	5e fc       	retal	r12
	} else if (comp_sel == ACIFA_COMP_SELB) {
80002dca:	30 28       	mov	r8,2
80002dcc:	f0 0b 18 00 	cp.b	r11,r8
80002dd0:	5e 1c       	retne	r12
		acifa->CONFB.is = 2;
80002dd2:	78 18       	ld.w	r8,r12[0x4]
80002dd4:	30 29       	mov	r9,2
80002dd6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002dda:	99 18       	st.w	r12[0x4],r8
80002ddc:	5e fc       	retal	r12

80002dde <acifa_enable_interrupt>:
 */
void acifa_enable_interrupt(volatile avr32_acifa_t *acifa, uint32_t flag_mask)
{
	Assert( acifa != NULL );

	acifa->ier = flag_mask;
80002dde:	99 ab       	st.w	r12[0x28],r11
}
80002de0:	5e fc       	retal	r12

80002de2 <sdramc_ck_delay>:
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002de2:	e1 b8 00 42 	mfsr	r8,0x108
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80002de6:	f0 0c 00 0c 	add	r12,r8,r12

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80002dea:	18 38       	cp.w	r8,r12
80002dec:	e0 88 00 06 	brls	80002df8 <sdramc_ck_delay+0x16>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80002df0:	e1 b8 00 42 	mfsr	r8,0x108
80002df4:	10 3c       	cp.w	r12,r8
80002df6:	cf d3       	brcs	80002df0 <sdramc_ck_delay+0xe>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80002df8:	e1 b8 00 42 	mfsr	r8,0x108
80002dfc:	10 3c       	cp.w	r12,r8
80002dfe:	fe 9b ff fd 	brhi	80002df8 <sdramc_ck_delay+0x16>
}
80002e02:	5e fc       	retal	r12

80002e04 <sdramc_init>:
// {
// }
// #endif

void sdramc_init(unsigned long hsb_hz)
{
80002e04:	d4 31       	pushm	r0-r7,lr
80002e06:	18 91       	mov	r1,r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80002e08:	ee 78 42 3f 	mov	r8,999999
80002e0c:	f8 08 00 09 	add	r9,r12,r8
80002e10:	e0 60 de 83 	mov	r0,56963
80002e14:	ea 10 43 1b 	orh	r0,0x431b
80002e18:	f2 00 06 48 	mulu.d	r8,r9,r0
80002e1c:	f2 06 16 12 	lsr	r6,r9,0x12
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_PIN,            AVR32_EBI_SDCK_FUNCTION           },
    {AVR32_EBI_SDCKE_PIN,           AVR32_EBI_SDCKE_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002e20:	32 5b       	mov	r11,37
80002e22:	4c 9c       	lddpc	r12,80002f44 <sdramc_init+0x140>
80002e24:	f0 1f 00 49 	mcall	80002f48 <sdramc_init+0x144>
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
#if (defined AVR32_HMATRIXB)
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
80002e28:	fe 68 20 00 	mov	r8,-122880
80002e2c:	f0 f9 01 28 	ld.w	r9,r8[296]
80002e30:	a1 b9       	sbr	r9,0x1
80002e32:	f1 49 01 28 	st.w	r8[296],r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
80002e36:	f0 f8 01 28 	ld.w	r8,r8[296]
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
80002e3a:	ec 08 15 04 	lsl	r8,r6,0x4
80002e3e:	0c 18       	sub	r8,r6
80002e40:	f0 c3 fc 19 	sub	r3,r8,-999
80002e44:	e0 65 4d d3 	mov	r5,19923
80002e48:	ea 15 10 62 	orh	r5,0x1062
80002e4c:	e6 05 06 42 	mulu.d	r2,r3,r5
80002e50:	a7 83       	lsr	r3,0x6
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002e52:	ec 02 15 05 	lsl	r2,r6,0x5
80002e56:	0c 02       	add	r2,r6
80002e58:	a1 72       	lsl	r2,0x1
80002e5a:	e4 06 00 0b 	add	r11,r2,r6
80002e5e:	f6 cb fc 19 	sub	r11,r11,-999
80002e62:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002e66:	f6 0a 16 06 	lsr	r10,r11,0x6
80002e6a:	bd 6a       	lsl	r10,0x1c
80002e6c:	e8 1a 00 f0 	orl	r10,0xf0
80002e70:	e6 09 15 08 	lsl	r9,r3,0x8
80002e74:	e2 19 0f 00 	andl	r9,0xf00,COH
80002e78:	12 4a       	or	r10,r9
80002e7a:	f0 09 15 02 	lsl	r9,r8,0x2
80002e7e:	f2 c9 fc 19 	sub	r9,r9,-999
80002e82:	f2 05 06 48 	mulu.d	r8,r9,r5
80002e86:	a7 69       	lsl	r9,0x6
80002e88:	e2 19 f0 00 	andl	r9,0xf000,COH
80002e8c:	f5 e9 10 08 	or	r8,r10,r9
80002e90:	e6 09 15 10 	lsl	r9,r3,0x10
80002e94:	e6 19 00 0f 	andh	r9,0xf,COH
80002e98:	12 48       	or	r8,r9
80002e9a:	e6 09 15 14 	lsl	r9,r3,0x14
80002e9e:	e6 19 00 f0 	andh	r9,0xf0,COH
80002ea2:	12 48       	or	r8,r9
80002ea4:	ec 06 00 3b 	add	r11,r6,r6<<0x3
80002ea8:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80002eac:	f6 cb fc 19 	sub	r11,r11,-999
80002eb0:	f6 05 06 4a 	mulu.d	r10,r11,r5
80002eb4:	f6 09 15 12 	lsl	r9,r11,0x12
80002eb8:	e6 19 0f 00 	andh	r9,0xf00,COH
80002ebc:	12 48       	or	r8,r9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
80002ebe:	fe 67 2c 00 	mov	r7,-119808
80002ec2:	8f 28       	st.w	r7[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
80002ec4:	6e 28       	ld.w	r8,r7[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
80002ec6:	30 18       	mov	r8,1
80002ec8:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eca:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ecc:	fc 14 d0 00 	movh	r4,0xd000
80002ed0:	88 08       	ld.sh	r8,r4[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
80002ed2:	ec 0c 10 64 	mul	r12,r6,100
80002ed6:	f0 1f 00 1e 	mcall	80002f4c <sdramc_init+0x148>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002eda:	30 28       	mov	r8,2
80002edc:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002ede:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002ee0:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
80002ee2:	06 9c       	mov	r12,r3
80002ee4:	f0 1f 00 1a 	mcall	80002f4c <sdramc_init+0x148>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80002ee8:	30 48       	mov	r8,4
80002eea:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002eec:	6e 08       	ld.w	r8,r7[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002eee:	e4 c3 fc 19 	sub	r3,r2,-999
80002ef2:	e6 05 06 42 	mulu.d	r2,r3,r5
80002ef6:	a7 83       	lsr	r3,0x6
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002ef8:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002efa:	06 9c       	mov	r12,r3
80002efc:	f0 1f 00 14 	mcall	80002f4c <sdramc_init+0x148>
  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
  {
    sdram[0];
80002f00:	88 08       	ld.sh	r8,r4[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
80002f02:	06 9c       	mov	r12,r3
80002f04:	f0 1f 00 12 	mcall	80002f4c <sdramc_init+0x148>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002f08:	30 38       	mov	r8,3
80002f0a:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f0c:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f0e:	88 08       	ld.sh	r8,r4[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
80002f10:	ec 09 15 01 	lsl	r9,r6,0x1
80002f14:	f2 c9 fc 19 	sub	r9,r9,-999
80002f18:	f2 05 06 48 	mulu.d	r8,r9,r5
80002f1c:	f2 0c 16 06 	lsr	r12,r9,0x6
80002f20:	f0 1f 00 0b 	mcall	80002f4c <sdramc_init+0x148>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
80002f24:	30 08       	mov	r8,0
80002f26:	8f 08       	st.w	r7[0x0],r8
  AVR32_SDRAMC.mr;
80002f28:	6e 08       	ld.w	r8,r7[0x0]
  sdram[0];
80002f2a:	88 08       	ld.sh	r8,r4[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
80002f2c:	e2 00 06 40 	mulu.d	r0,r1,r0
80002f30:	b3 81       	lsr	r1,0x12
80002f32:	e0 68 1e 84 	mov	r8,7812
80002f36:	b1 31       	mul	r1,r8
80002f38:	e2 05 06 44 	mulu.d	r4,r1,r5
80002f3c:	a7 85       	lsr	r5,0x6
80002f3e:	8f 15       	st.w	r7[0x4],r5
  AVR32_SDRAMC.tr;
80002f40:	6e 18       	ld.w	r8,r7[0x4]
}
80002f42:	d8 32       	popm	r0-r7,pc
80002f44:	80 01       	ld.sh	r1,r0[0x0]
80002f46:	34 00       	mov	r0,64
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	31 c4       	mov	r4,28
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2d e2       	sub	r2,-34

80002f50 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002f50:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002f54:	58 0a       	cp.w	r10,0
80002f56:	c6 30       	breq	8000301c <eic_init+0xcc>
80002f58:	30 08       	mov	r8,0
80002f5a:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f5c:	30 19       	mov	r9,1
80002f5e:	30 1e       	mov	lr,1
80002f60:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002f64:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002f68:	11 96       	ld.ub	r6,r8[0x1]
80002f6a:	f2 06 18 00 	cp.b	r6,r9
80002f6e:	c0 71       	brne	80002f7c <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80002f70:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f72:	11 86       	ld.ub	r6,r8[0x0]
80002f74:	fc 06 09 46 	lsl	r6,lr,r6
80002f78:	0a 46       	or	r6,r5
80002f7a:	c0 78       	rjmp	80002f88 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002f7c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002f7e:	11 86       	ld.ub	r6,r8[0x0]
80002f80:	fc 06 09 46 	lsl	r6,lr,r6
80002f84:	5c d6       	com	r6
80002f86:	0a 66       	and	r6,r5
80002f88:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f8a:	11 a6       	ld.ub	r6,r8[0x2]
80002f8c:	f2 06 18 00 	cp.b	r6,r9
80002f90:	c0 71       	brne	80002f9e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80002f92:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002f94:	11 86       	ld.ub	r6,r8[0x0]
80002f96:	fc 06 09 46 	lsl	r6,lr,r6
80002f9a:	0a 46       	or	r6,r5
80002f9c:	c0 78       	rjmp	80002faa <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002f9e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002fa0:	11 86       	ld.ub	r6,r8[0x0]
80002fa2:	fc 06 09 46 	lsl	r6,lr,r6
80002fa6:	5c d6       	com	r6
80002fa8:	0a 66       	and	r6,r5
80002faa:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fac:	11 b6       	ld.ub	r6,r8[0x3]
80002fae:	f2 06 18 00 	cp.b	r6,r9
80002fb2:	c0 71       	brne	80002fc0 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80002fb4:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fb6:	11 86       	ld.ub	r6,r8[0x0]
80002fb8:	fc 06 09 46 	lsl	r6,lr,r6
80002fbc:	0a 46       	or	r6,r5
80002fbe:	c0 78       	rjmp	80002fcc <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002fc0:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002fc2:	11 86       	ld.ub	r6,r8[0x0]
80002fc4:	fc 06 09 46 	lsl	r6,lr,r6
80002fc8:	5c d6       	com	r6
80002fca:	0a 66       	and	r6,r5
80002fcc:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fce:	11 c6       	ld.ub	r6,r8[0x4]
80002fd0:	f2 06 18 00 	cp.b	r6,r9
80002fd4:	c0 71       	brne	80002fe2 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80002fd6:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fd8:	11 86       	ld.ub	r6,r8[0x0]
80002fda:	fc 06 09 46 	lsl	r6,lr,r6
80002fde:	0a 46       	or	r6,r5
80002fe0:	c0 78       	rjmp	80002fee <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002fe2:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002fe4:	11 86       	ld.ub	r6,r8[0x0]
80002fe6:	fc 06 09 46 	lsl	r6,lr,r6
80002fea:	5c d6       	com	r6
80002fec:	0a 66       	and	r6,r5
80002fee:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ff0:	11 d6       	ld.ub	r6,r8[0x5]
80002ff2:	f2 06 18 00 	cp.b	r6,r9
80002ff6:	c0 71       	brne	80003004 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80002ff8:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002ffa:	11 88       	ld.ub	r8,r8[0x0]
80002ffc:	fc 08 09 48 	lsl	r8,lr,r8
80003000:	0c 48       	or	r8,r6
80003002:	c0 78       	rjmp	80003010 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003004:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003006:	11 88       	ld.ub	r8,r8[0x0]
80003008:	fc 08 09 48 	lsl	r8,lr,r8
8000300c:	5c d8       	com	r8
8000300e:	0c 68       	and	r8,r6
80003010:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80003012:	2f f7       	sub	r7,-1
80003014:	0e 98       	mov	r8,r7
80003016:	0e 3a       	cp.w	r10,r7
80003018:	fe 9b ff a4 	brhi	80002f60 <eic_init+0x10>
8000301c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003020 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80003020:	30 18       	mov	r8,1
80003022:	f0 0b 09 48 	lsl	r8,r8,r11
80003026:	99 c8       	st.w	r12[0x30],r8
}
80003028:	5e fc       	retal	r12

8000302a <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
8000302a:	30 18       	mov	r8,1
8000302c:	f0 0b 09 48 	lsl	r8,r8,r11
80003030:	99 08       	st.w	r12[0x0],r8
}
80003032:	5e fc       	retal	r12

80003034 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003034:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003038:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
8000303a:	30 19       	mov	r9,1
8000303c:	f2 0b 09 4b 	lsl	r11,r9,r11
80003040:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80003042:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003044:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80003048:	5e fc       	retal	r12

8000304a <eic_disable_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000304a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000304e:	d3 03       	ssrf	0x10

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->idr = 1 << line_number;
80003050:	30 19       	mov	r9,1
80003052:	f2 0b 09 4b 	lsl	r11,r9,r11
80003056:	99 1b       	st.w	r12[0x4],r11
	eic->imr;
80003058:	78 29       	ld.w	r9,r12[0x8]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000305a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
8000305e:	5e fc       	retal	r12

80003060 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003060:	fe 68 00 00 	mov	r8,-131072
80003064:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003066:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000306a:	91 09       	st.w	r8[0x0],r9
}
8000306c:	5e fc       	retal	r12

8000306e <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000306e:	fe 68 00 00 	mov	r8,-131072
80003072:	70 2c       	ld.w	r12,r8[0x8]
}
80003074:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003078:	5e fc       	retal	r12
8000307a:	d7 03       	nop

8000307c <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
8000307c:	d4 01       	pushm	lr
	while (!flashc_is_ready());
8000307e:	f0 1f 00 03 	mcall	80003088 <flashc_default_wait_until_ready+0xc>
80003082:	cf e0       	breq	8000307e <flashc_default_wait_until_ready+0x2>
}
80003084:	d8 02       	popm	pc
80003086:	00 00       	add	r0,r0
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 6e       	mov	lr,6

8000308c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000308c:	eb cd 40 c0 	pushm	r6-r7,lr
80003090:	18 96       	mov	r6,r12
80003092:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003094:	48 e8       	lddpc	r8,800030cc <flashc_issue_command+0x40>
80003096:	70 08       	ld.w	r8,r8[0x0]
80003098:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000309a:	fe 68 00 00 	mov	r8,-131072
8000309e:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800030a0:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
800030a4:	58 07       	cp.w	r7,0
800030a6:	c0 35       	brlt	800030ac <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800030a8:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800030ac:	3a 59       	mov	r9,-91
800030ae:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800030b2:	fe 69 00 00 	mov	r9,-131072
800030b6:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800030b8:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800030ba:	e2 19 00 0c 	andl	r9,0xc,COH
800030be:	48 58       	lddpc	r8,800030d0 <flashc_issue_command+0x44>
800030c0:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800030c2:	48 38       	lddpc	r8,800030cc <flashc_issue_command+0x40>
800030c4:	70 08       	ld.w	r8,r8[0x0]
800030c6:	5d 18       	icall	r8
}
800030c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030cc:	00 00       	add	r0,r0
800030ce:	00 08       	add	r8,r0
800030d0:	00 00       	add	r0,r0
800030d2:	06 1c       	sub	r12,r3

800030d4 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
800030da:	e0 68 8a 40 	mov	r8,35392
800030de:	ea 18 01 f7 	orh	r8,0x1f7
800030e2:	10 3c       	cp.w	r12,r8
800030e4:	e0 88 00 18 	brls	80003114 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
800030e8:	30 1c       	mov	r12,1
800030ea:	f0 1f 00 10 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
800030ee:	e0 68 14 80 	mov	r8,5248
800030f2:	ea 18 03 ef 	orh	r8,0x3ef
800030f6:	10 37       	cp.w	r7,r8
800030f8:	e0 8b 00 08 	brhi	80003108 <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800030fc:	3f fb       	mov	r11,-1
800030fe:	31 1c       	mov	r12,17
80003100:	f0 1f 00 0b 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
80003108:	3f fb       	mov	r11,-1
8000310a:	31 0c       	mov	r12,16
8000310c:	f0 1f 00 08 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003110:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
80003114:	30 0c       	mov	r12,0
80003116:	f0 1f 00 05 	mcall	80003128 <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8000311a:	3f fb       	mov	r11,-1
8000311c:	31 1c       	mov	r12,17
8000311e:	f0 1f 00 04 	mcall	8000312c <flashc_set_flash_waitstate_and_readmode+0x58>
80003122:	e3 cd 80 80 	ldm	sp++,r7,pc
80003126:	00 00       	add	r0,r0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	30 60       	mov	r0,6
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	30 8c       	mov	r12,8

80003130 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003130:	f8 08 16 05 	lsr	r8,r12,0x5
80003134:	a9 78       	lsl	r8,0x9
80003136:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
8000313a:	58 7b       	cp.w	r11,7
8000313c:	e0 8b 00 05 	brhi	80003146 <gpio_enable_module_pin+0x16>
80003140:	4a 09       	lddpc	r9,800031c0 <gpio_enable_module_pin+0x90>
80003142:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80003146:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003148:	30 19       	mov	r9,1
8000314a:	f2 0c 09 49 	lsl	r9,r9,r12
8000314e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003150:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003152:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003154:	c3 18       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003156:	30 19       	mov	r9,1
80003158:	f2 0c 09 49 	lsl	r9,r9,r12
8000315c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000315e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003160:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003162:	c2 a8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003164:	30 19       	mov	r9,1
80003166:	f2 0c 09 49 	lsl	r9,r9,r12
8000316a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000316c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000316e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003170:	c2 38       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003172:	30 19       	mov	r9,1
80003174:	f2 0c 09 49 	lsl	r9,r9,r12
80003178:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000317a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000317c:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000317e:	c1 c8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003180:	30 19       	mov	r9,1
80003182:	f2 0c 09 49 	lsl	r9,r9,r12
80003186:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003188:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000318a:	91 d9       	st.w	r8[0x34],r9
		break;
8000318c:	c1 58       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000318e:	30 19       	mov	r9,1
80003190:	f2 0c 09 49 	lsl	r9,r9,r12
80003194:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003196:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003198:	91 d9       	st.w	r8[0x34],r9
		break;
8000319a:	c0 e8       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000319c:	30 19       	mov	r9,1
8000319e:	f2 0c 09 49 	lsl	r9,r9,r12
800031a2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031a4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031a6:	91 d9       	st.w	r8[0x34],r9
		break;
800031a8:	c0 78       	rjmp	800031b6 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031aa:	30 19       	mov	r9,1
800031ac:	f2 0c 09 49 	lsl	r9,r9,r12
800031b0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031b2:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800031b4:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800031b6:	30 19       	mov	r9,1
800031b8:	f2 0c 09 4c 	lsl	r12,r9,r12
800031bc:	91 2c       	st.w	r8[0x8],r12
800031be:	5e fd       	retal	0
800031c0:	80 01       	ld.sh	r1,r0[0x0]
800031c2:	35 28       	mov	r8,82

800031c4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c4:	d4 21       	pushm	r4-r7,lr
800031c6:	18 97       	mov	r7,r12
800031c8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031ca:	58 0b       	cp.w	r11,0
800031cc:	c0 31       	brne	800031d2 <gpio_enable_module+0xe>
800031ce:	30 05       	mov	r5,0
800031d0:	c0 d8       	rjmp	800031ea <gpio_enable_module+0x26>
800031d2:	30 05       	mov	r5,0
800031d4:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031d6:	6e 1b       	ld.w	r11,r7[0x4]
800031d8:	6e 0c       	ld.w	r12,r7[0x0]
800031da:	f0 1f 00 06 	mcall	800031f0 <gpio_enable_module+0x2c>
800031de:	18 45       	or	r5,r12
		gpiomap++;
800031e0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800031e2:	2f f6       	sub	r6,-1
800031e4:	0c 34       	cp.w	r4,r6
800031e6:	fe 9b ff f8 	brhi	800031d6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800031ea:	0a 9c       	mov	r12,r5
800031ec:	d8 22       	popm	r4-r7,pc
800031ee:	00 00       	add	r0,r0
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	31 30       	mov	r0,19

800031f4 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031f4:	f8 08 16 05 	lsr	r8,r12,0x5
800031f8:	a9 78       	lsl	r8,0x9
800031fa:	e0 28 e0 00 	sub	r8,57344
	
	gpio_port->puers = 1 << (pin & 0x1F);
800031fe:	30 19       	mov	r9,1
80003200:	f2 0c 09 4c 	lsl	r12,r9,r12
80003204:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
80003208:	f1 4c 00 88 	st.w	r8[136],r12
#endif
}
8000320c:	5e fc       	retal	r12

8000320e <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000320e:	f8 08 16 05 	lsr	r8,r12,0x5
80003212:	a9 78       	lsl	r8,0x9
80003214:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003218:	30 19       	mov	r9,1
8000321a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000321e:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003222:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003226:	91 1c       	st.w	r8[0x4],r12
}
80003228:	5e fc       	retal	r12

8000322a <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000322a:	f8 08 16 05 	lsr	r8,r12,0x5
8000322e:	a9 78       	lsl	r8,0x9
80003230:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003234:	30 19       	mov	r9,1
80003236:	f2 0c 09 4c 	lsl	r12,r9,r12
8000323a:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000323e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003242:	91 1c       	st.w	r8[0x4],r12
}
80003244:	5e fc       	retal	r12

80003246 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003246:	c0 08       	rjmp	80003246 <_unhandled_interrupt>

80003248 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003248:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000324c:	49 99       	lddpc	r9,800032b0 <INTC_register_interrupt+0x68>
8000324e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003252:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003256:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003258:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000325c:	58 0a       	cp.w	r10,0
8000325e:	c0 91       	brne	80003270 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003260:	49 59       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003262:	49 6a       	lddpc	r10,800032b8 <INTC_register_interrupt+0x70>
80003264:	12 1a       	sub	r10,r9
80003266:	fe 79 00 00 	mov	r9,-65536
8000326a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000326e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003270:	58 1a       	cp.w	r10,1
80003272:	c0 a1       	brne	80003286 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003274:	49 09       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
80003276:	49 2a       	lddpc	r10,800032bc <INTC_register_interrupt+0x74>
80003278:	12 1a       	sub	r10,r9
8000327a:	bf aa       	sbr	r10,0x1e
8000327c:	fe 79 00 00 	mov	r9,-65536
80003280:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003284:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003286:	58 2a       	cp.w	r10,2
80003288:	c0 a1       	brne	8000329c <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000328a:	48 b9       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000328c:	48 da       	lddpc	r10,800032c0 <INTC_register_interrupt+0x78>
8000328e:	12 1a       	sub	r10,r9
80003290:	bf ba       	sbr	r10,0x1f
80003292:	fe 79 00 00 	mov	r9,-65536
80003296:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000329a:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000329c:	48 69       	lddpc	r9,800032b4 <INTC_register_interrupt+0x6c>
8000329e:	48 aa       	lddpc	r10,800032c4 <INTC_register_interrupt+0x7c>
800032a0:	12 1a       	sub	r10,r9
800032a2:	ea 1a c0 00 	orh	r10,0xc000
800032a6:	fe 79 00 00 	mov	r9,-65536
800032aa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800032ae:	5e fc       	retal	r12
800032b0:	80 01       	ld.sh	r1,r0[0x0]
800032b2:	35 48       	mov	r8,84
800032b4:	80 01       	ld.sh	r1,r0[0x0]
800032b6:	32 00       	mov	r0,32
800032b8:	80 01       	ld.sh	r1,r0[0x0]
800032ba:	33 04       	mov	r4,48
800032bc:	80 01       	ld.sh	r1,r0[0x0]
800032be:	33 12       	mov	r2,49
800032c0:	80 01       	ld.sh	r1,r0[0x0]
800032c2:	33 20       	mov	r0,50
800032c4:	80 01       	ld.sh	r1,r0[0x0]
800032c6:	33 2e       	mov	lr,50

800032c8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032c8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032ca:	49 18       	lddpc	r8,8000330c <INTC_init_interrupts+0x44>
800032cc:	e3 b8 00 01 	mtsr	0x4,r8
800032d0:	49 0e       	lddpc	lr,80003310 <INTC_init_interrupts+0x48>
800032d2:	30 07       	mov	r7,0
800032d4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032d6:	49 0c       	lddpc	r12,80003314 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032d8:	49 05       	lddpc	r5,80003318 <INTC_init_interrupts+0x50>
800032da:	10 15       	sub	r5,r8
800032dc:	fe 76 00 00 	mov	r6,-65536
800032e0:	c1 18       	rjmp	80003302 <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032e2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032e4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032e6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032ec:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032ee:	10 3a       	cp.w	r10,r8
800032f0:	fe 9b ff fc 	brhi	800032e8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032f4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800032f8:	2f f7       	sub	r7,-1
800032fa:	2f 8e       	sub	lr,-8
800032fc:	e0 47 00 2f 	cp.w	r7,47
80003300:	c0 50       	breq	8000330a <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003302:	7c 08       	ld.w	r8,lr[0x0]
80003304:	58 08       	cp.w	r8,0
80003306:	ce e1       	brne	800032e2 <INTC_init_interrupts+0x1a>
80003308:	cf 6b       	rjmp	800032f4 <INTC_init_interrupts+0x2c>
8000330a:	d8 22       	popm	r4-r7,pc
8000330c:	80 01       	ld.sh	r1,r0[0x0]
8000330e:	32 00       	mov	r0,32
80003310:	80 01       	ld.sh	r1,r0[0x0]
80003312:	35 48       	mov	r8,84
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	32 46       	mov	r6,36
80003318:	80 01       	ld.sh	r1,r0[0x0]
8000331a:	33 04       	mov	r4,48

8000331c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000331c:	fe 78 00 00 	mov	r8,-65536
80003320:	e0 69 00 83 	mov	r9,131
80003324:	f2 0c 01 0c 	sub	r12,r9,r12
80003328:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000332c:	f2 ca ff c0 	sub	r10,r9,-64
80003330:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003334:	58 08       	cp.w	r8,0
80003336:	c0 21       	brne	8000333a <_get_interrupt_handler+0x1e>
80003338:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000333a:	f0 08 12 00 	clz	r8,r8
8000333e:	48 5a       	lddpc	r10,80003350 <_get_interrupt_handler+0x34>
80003340:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003344:	f0 08 11 1f 	rsub	r8,r8,31
80003348:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000334a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000334e:	5e fc       	retal	r12
80003350:	80 01       	ld.sh	r1,r0[0x0]
80003352:	35 48       	mov	r8,84

80003354 <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80003354:	e1 b9 00 00 	mfsr	r9,0x0
80003358:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000335a:	fe 78 04 00 	mov	r8,-64512
8000335e:	fc 1a aa 00 	movh	r10,0xaa00
80003362:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
80003366:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80003368:	12 98       	mov	r8,r9
8000336a:	e6 18 00 01 	andh	r8,0x1,COH
8000336e:	c0 21       	brne	80003372 <pm_set_mclk_source+0x1e>
80003370:	d5 03       	csrf	0x10

  return PASS;
}
80003372:	5e fd       	retal	0

80003374 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80003374:	eb cd 40 c0 	pushm	r6-r7,lr
80003378:	16 97       	mov	r7,r11
8000337a:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
8000337c:	58 0c       	cp.w	r12,0
8000337e:	c0 50       	breq	80003388 <pcl_switch_to_osc+0x14>
80003380:	fe 7c d8 f0 	mov	r12,-10000
80003384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80003388:	30 0c       	mov	r12,0
8000338a:	f0 1f 00 08 	mcall	800033a8 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
8000338e:	30 1a       	mov	r10,1
80003390:	0c 9b       	mov	r11,r6
80003392:	30 0c       	mov	r12,0
80003394:	f0 1f 00 06 	mcall	800033ac <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80003398:	0e 9c       	mov	r12,r7
8000339a:	f0 1f 00 06 	mcall	800033b0 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
8000339e:	30 1c       	mov	r12,1
800033a0:	f0 1f 00 05 	mcall	800033b4 <pcl_switch_to_osc+0x40>
800033a4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	38 30       	mov	r0,-125
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	37 bc       	mov	r12,123
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	30 d4       	mov	r4,13
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 54       	mov	r4,53

800033b8 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
800033b8:	58 2c       	cp.w	r12,2
800033ba:	c2 80       	breq	8000340a <pwm_write_protect_sw_unlock+0x52>
800033bc:	e0 89 00 07 	brgt	800033ca <pwm_write_protect_sw_unlock+0x12>
800033c0:	58 0c       	cp.w	r12,0
800033c2:	c0 a0       	breq	800033d6 <pwm_write_protect_sw_unlock+0x1e>
800033c4:	58 1c       	cp.w	r12,1
800033c6:	c5 61       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033c8:	c1 48       	rjmp	800033f0 <pwm_write_protect_sw_unlock+0x38>
800033ca:	58 4c       	cp.w	r12,4
800033cc:	c3 90       	breq	8000343e <pwm_write_protect_sw_unlock+0x86>
800033ce:	c2 b5       	brlt	80003424 <pwm_write_protect_sw_unlock+0x6c>
800033d0:	58 5c       	cp.w	r12,5
800033d2:	c5 01       	brne	80003472 <pwm_write_protect_sw_unlock+0xba>
800033d4:	c4 28       	rjmp	80003458 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033d6:	fe 78 4c 00 	mov	r8,-46080
800033da:	e0 69 4d 04 	mov	r9,19716
800033de:	ea 19 50 57 	orh	r9,0x5057
800033e2:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800033e6:	f0 f8 00 e8 	ld.w	r8,r8[232]
800033ea:	58 08       	cp.w	r8,0
800033ec:	c4 30       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
800033ee:	c4 18       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800033f0:	fe 78 4c 00 	mov	r8,-46080
800033f4:	e0 69 4d 08 	mov	r9,19720
800033f8:	ea 19 50 57 	orh	r9,0x5057
800033fc:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003400:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003404:	58 08       	cp.w	r8,0
80003406:	c3 60       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003408:	c3 48       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000340a:	fe 78 4c 00 	mov	r8,-46080
8000340e:	e0 69 4d 10 	mov	r9,19728
80003412:	ea 19 50 57 	orh	r9,0x5057
80003416:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000341a:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000341e:	58 08       	cp.w	r8,0
80003420:	c2 90       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003422:	c2 78       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003424:	fe 78 4c 00 	mov	r8,-46080
80003428:	e0 69 4d 20 	mov	r9,19744
8000342c:	ea 19 50 57 	orh	r9,0x5057
80003430:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003434:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003438:	58 08       	cp.w	r8,0
8000343a:	c1 c0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
8000343c:	c1 a8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000343e:	fe 78 4c 00 	mov	r8,-46080
80003442:	e0 69 4d 40 	mov	r9,19776
80003446:	ea 19 50 57 	orh	r9,0x5057
8000344a:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000344e:	f0 f8 00 e8 	ld.w	r8,r8[232]
80003452:	58 08       	cp.w	r8,0
80003454:	c0 f0       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003456:	c0 d8       	rjmp	80003470 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80003458:	fe 78 4c 00 	mov	r8,-46080
8000345c:	e0 69 4d 80 	mov	r9,19840
80003460:	ea 19 50 57 	orh	r9,0x5057
80003464:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80003468:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000346c:	58 08       	cp.w	r8,0
8000346e:	c0 20       	breq	80003472 <pwm_write_protect_sw_unlock+0xba>
80003470:	5e fe       	retal	-1
80003472:	5e fd       	retal	0

80003474 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003474:	58 0b       	cp.w	r11,0
80003476:	c1 d0       	breq	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003478:	58 4c       	cp.w	r12,4
8000347a:	e0 8b 00 1b 	brhi	800034b0 <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000347e:	76 0a       	ld.w	r10,r11[0x0]
80003480:	fe 78 4c 00 	mov	r8,-46080
80003484:	f8 c9 ff f0 	sub	r9,r12,-16
80003488:	a5 79       	lsl	r9,0x5
8000348a:	f0 09 00 09 	add	r9,r8,r9
8000348e:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003490:	76 19       	ld.w	r9,r11[0x4]
80003492:	a5 7c       	lsl	r12,0x5
80003494:	f0 0c 00 0c 	add	r12,r8,r12
80003498:	f8 c8 fd fc 	sub	r8,r12,-516
8000349c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000349e:	76 39       	ld.w	r9,r11[0xc]
800034a0:	f8 c8 fd f4 	sub	r8,r12,-524
800034a4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
800034a6:	76 68       	ld.w	r8,r11[0x18]
800034a8:	f8 cc fd e8 	sub	r12,r12,-536
800034ac:	99 08       	st.w	r12[0x0],r8
800034ae:	5e fd       	retal	0
  return PWM_SUCCESS;
800034b0:	5e ff       	retal	1

800034b2 <pwm_start_channels>:
}

int pwm_start_channels(unsigned long channels_bitmask)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034b2:	18 98       	mov	r8,r12
800034b4:	e0 18 ff e0 	andl	r8,0xffe0
800034b8:	c0 20       	breq	800034bc <pwm_start_channels+0xa>
800034ba:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  //pwm->wpsr; // Clear Fault register
  pwm->ena = channels_bitmask; // Enable channels.
800034bc:	fe 78 4c 00 	mov	r8,-46080
800034c0:	91 1c       	st.w	r8[0x4],r12
800034c2:	5e fd       	retal	0

800034c4 <pwm_stop_channels>:
  return PWM_SUCCESS;
}

int pwm_stop_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800034c4:	18 98       	mov	r8,r12
800034c6:	e0 18 ff e0 	andl	r8,0xffe0
800034ca:	c0 20       	breq	800034ce <pwm_stop_channels+0xa>
800034cc:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.dis = channels_bitmask; // Disable channels.
800034ce:	fe 78 4c 00 	mov	r8,-46080
800034d2:	91 2c       	st.w	r8[0x8],r12
800034d4:	5e fd       	retal	0

800034d6 <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
800034d6:	fe 78 4c 00 	mov	r8,-46080
800034da:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
800034dc:	5e fd       	retal	0
800034de:	d7 03       	nop

800034e0 <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
800034e0:	eb cd 40 c0 	pushm	r6-r7,lr
800034e4:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034e6:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
800034ea:	58 0c       	cp.w	r12,0
800034ec:	c0 31       	brne	800034f2 <pwm_init+0x12>
800034ee:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800034f2:	ee 16 00 01 	eorh	r6,0x1
800034f6:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
800034fa:	30 0c       	mov	r12,0
800034fc:	f0 1f 00 37 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
80003500:	30 1c       	mov	r12,1
80003502:	f0 1f 00 36 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
80003506:	30 2c       	mov	r12,2
80003508:	f0 1f 00 34 	mcall	800035d8 <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
8000350c:	30 3c       	mov	r12,3
8000350e:	f0 1f 00 33 	mcall	800035d8 <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003512:	58 06       	cp.w	r6,0
80003514:	c0 20       	breq	80003518 <pwm_init+0x38>
80003516:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
80003518:	31 f9       	mov	r9,31
8000351a:	fe 78 4c 00 	mov	r8,-46080
8000351e:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
80003520:	ef 39 00 14 	ld.ub	r9,r7[20]
80003524:	30 08       	mov	r8,0
80003526:	f0 09 18 00 	cp.b	r9,r8
8000352a:	c0 70       	breq	80003538 <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
8000352c:	fe 78 4c 00 	mov	r8,-46080
80003530:	70 59       	ld.w	r9,r8[0x14]
80003532:	ea 19 00 1f 	orh	r9,0x1f
80003536:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
80003538:	fe 78 4c 00 	mov	r8,-46080
8000353c:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
8000353e:	ef 39 00 15 	ld.ub	r9,r7[21]
80003542:	30 08       	mov	r8,0
80003544:	f0 09 18 00 	cp.b	r9,r8
80003548:	c1 40       	breq	80003570 <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
8000354a:	30 99       	mov	r9,9
8000354c:	fe 78 4c 00 	mov	r8,-46080
80003550:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
80003552:	ef 39 00 16 	ld.ub	r9,r7[22]
80003556:	30 28       	mov	r8,2
80003558:	f0 09 18 00 	cp.b	r9,r8
8000355c:	c0 71       	brne	8000356a <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
8000355e:	fe 78 4c 00 	mov	r8,-46080
80003562:	70 e9       	ld.w	r9,r8[0x38]
80003564:	e8 19 00 06 	orl	r9,0x6
80003568:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
8000356a:	fe 78 4c 00 	mov	r8,-46080
8000356e:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
80003570:	58 06       	cp.w	r6,0
80003572:	c0 20       	breq	80003576 <pwm_init+0x96>
80003574:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003576:	6e 08       	ld.w	r8,r7[0x0]
80003578:	6e 39       	ld.w	r9,r7[0xc]
8000357a:	a9 69       	lsl	r9,0x8
8000357c:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003580:	6e 18       	ld.w	r8,r7[0x4]
80003582:	10 49       	or	r9,r8
80003584:	6e 28       	ld.w	r8,r7[0x8]
80003586:	f3 e8 11 89 	or	r9,r9,r8<<0x18
8000358a:	6e 48       	ld.w	r8,r7[0x10]
8000358c:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
80003590:	fe 78 4c 00 	mov	r8,-46080
80003594:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
80003596:	ef 3a 00 16 	ld.ub	r10,r7[22]
8000359a:	70 89       	ld.w	r9,r8[0x20]
8000359c:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
800035a0:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
800035a2:	70 89       	ld.w	r9,r8[0x20]
800035a4:	ef 3a 00 17 	ld.ub	r10,r7[23]
800035a8:	f5 e9 10 09 	or	r9,r10,r9
800035ac:	91 89       	st.w	r8[0x20],r9
800035ae:	70 89       	ld.w	r9,r8[0x20]
800035b0:	ef 3a 00 18 	ld.ub	r10,r7[24]
800035b4:	f3 ea 10 19 	or	r9,r9,r10<<0x1
800035b8:	91 89       	st.w	r8[0x20],r9
800035ba:	70 89       	ld.w	r9,r8[0x20]
800035bc:	ef 3a 00 19 	ld.ub	r10,r7[25]
800035c0:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800035c4:	91 89       	st.w	r8[0x20],r9
800035c6:	70 89       	ld.w	r9,r8[0x20]
800035c8:	ef 3a 00 1a 	ld.ub	r10,r7[26]
800035cc:	f3 ea 10 39 	or	r9,r9,r10<<0x3
800035d0:	91 89       	st.w	r8[0x20],r9
800035d2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035d6:	00 00       	add	r0,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	33 b8       	mov	r8,59

800035dc <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800035dc:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035e0:	fe 7a 08 00 	mov	r10,-63488
800035e4:	c0 48       	rjmp	800035ec <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
800035e6:	20 18       	sub	r8,1
800035e8:	c0 21       	brne	800035ec <scif_pclksr_statushigh_wait+0x10>
800035ea:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800035ec:	74 59       	ld.w	r9,r10[0x14]
800035ee:	f9 e9 00 09 	and	r9,r12,r9
800035f2:	cf a0       	breq	800035e6 <scif_pclksr_statushigh_wait+0xa>
800035f4:	5e fd       	retal	0

800035f6 <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
800035f6:	58 0c       	cp.w	r12,0
800035f8:	c0 81       	brne	80003608 <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800035fa:	fe 79 08 00 	mov	r9,-63488
800035fe:	72 58       	ld.w	r8,r9[0x14]
80003600:	e2 18 00 10 	andl	r8,0x10,COH
80003604:	cf d0       	breq	800035fe <scif_wait_for_pll_locked+0x8>
80003606:	c0 78       	rjmp	80003614 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80003608:	fe 79 08 00 	mov	r9,-63488
8000360c:	72 58       	ld.w	r8,r9[0x14]
8000360e:	e2 18 00 20 	andl	r8,0x20,COH
80003612:	cf d0       	breq	8000360c <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80003614:	5e fd       	retal	0

80003616 <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80003616:	fe 78 08 00 	mov	r8,-63488
8000361a:	f8 c9 ff e7 	sub	r9,r12,-25
8000361e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80003622:	a1 ca       	cbr	r10,0x0
80003624:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003628:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000362c:	fe 7a 08 00 	mov	r10,-63488
80003630:	12 9c       	mov	r12,r9
80003632:	c0 48       	rjmp	8000363a <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
80003634:	20 18       	sub	r8,1
80003636:	c0 21       	brne	8000363a <scif_stop_gclk+0x24>
80003638:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000363a:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
8000363e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003642:	cf 91       	brne	80003634 <scif_stop_gclk+0x1e>
80003644:	5e fd       	retal	0
80003646:	d7 03       	nop

80003648 <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80003648:	d4 21       	pushm	r4-r7,lr
8000364a:	18 97       	mov	r7,r12
8000364c:	16 95       	mov	r5,r11
8000364e:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
80003650:	a1 99       	lsr	r9,0x1
80003652:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003656:	f8 c9 ff e7 	sub	r9,r12,-25
8000365a:	fe 78 08 00 	mov	r8,-63488
8000365e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003662:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003666:	c0 50       	breq	80003670 <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
80003668:	f0 1f 00 18 	mcall	800036c8 <scif_gc_setup+0x80>
8000366c:	c1 44       	brge	80003694 <scif_gc_setup+0x4c>
8000366e:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80003670:	a1 76       	lsl	r6,0x1
80003672:	e2 16 00 02 	andl	r6,0x2,COH
80003676:	a9 65       	lsl	r5,0x8
80003678:	e2 15 0f 00 	andl	r5,0xf00,COH
8000367c:	0a 46       	or	r6,r5
8000367e:	b1 64       	lsl	r4,0x10
80003680:	e6 14 00 ff 	andh	r4,0xff,COH
80003684:	ed e4 10 04 	or	r4,r6,r4
80003688:	2e 77       	sub	r7,-25
8000368a:	fe 78 08 00 	mov	r8,-63488
8000368e:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
80003692:	d8 2a       	popm	r4-r7,pc,r12=0
80003694:	ec 09 15 01 	lsl	r9,r6,0x1
80003698:	e2 19 00 02 	andl	r9,0x2,COH
8000369c:	ea 08 15 08 	lsl	r8,r5,0x8
800036a0:	e2 18 0f 00 	andl	r8,0xf00,COH
800036a4:	10 49       	or	r9,r8
800036a6:	e8 08 15 10 	lsl	r8,r4,0x10
800036aa:	e6 18 00 ff 	andh	r8,0xff,COH
800036ae:	10 49       	or	r9,r8
800036b0:	fe 78 08 00 	mov	r8,-63488
800036b4:	2e 77       	sub	r7,-25
800036b6:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
800036ba:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
800036be:	a1 a9       	sbr	r9,0x0
800036c0:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
800036c4:	d8 2a       	popm	r4-r7,pc,r12=0
800036c6:	00 00       	add	r0,r0
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	36 16       	mov	r6,97

800036cc <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800036cc:	f8 c9 ff e7 	sub	r9,r12,-25
800036d0:	fe 78 08 00 	mov	r8,-63488
800036d4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036dc:	c0 91       	brne	800036ee <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
800036de:	fe 78 08 00 	mov	r8,-63488
800036e2:	12 9c       	mov	r12,r9
800036e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036e8:	a1 a9       	sbr	r9,0x0
800036ea:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
800036ee:	5e fd       	retal	0

800036f0 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
800036f0:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800036f2:	fa c8 ff f8 	sub	r8,sp,-8
800036f6:	f0 0c 00 29 	add	r9,r8,r12<<0x2
800036fa:	fe 78 08 00 	mov	r8,-63488
800036fe:	2f 9c       	sub	r12,-7
80003700:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80003704:	30 1b       	mov	r11,1
80003706:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000370a:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
8000370e:	e1 ba 00 00 	mfsr	r10,0x0
80003712:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003714:	f8 0b 15 02 	lsl	r11,r12,0x2
80003718:	ea 1b aa 00 	orh	r11,0xaa00
8000371c:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8000371e:	f2 f9 ff f8 	ld.w	r9,r9[-8]
80003722:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80003726:	14 98       	mov	r8,r10
80003728:	e6 18 00 01 	andh	r8,0x1,COH
8000372c:	c0 21       	brne	80003730 <scif_pll_enable+0x40>
8000372e:	d5 03       	csrf	0x10

  return PASS;
}
80003730:	2f ed       	sub	sp,-8
80003732:	5e fd       	retal	0

80003734 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
80003734:	eb cd 40 c0 	pushm	r6-r7,lr
80003738:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
8000373a:	fa c9 ff f8 	sub	r9,sp,-8
8000373e:	f2 0c 00 28 	add	r8,r9,r12<<0x2
80003742:	fe 79 08 00 	mov	r9,-63488
80003746:	2f 9c       	sub	r12,-7
80003748:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
8000374c:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
80003750:	f7 3e 00 10 	ld.ub	lr,r11[16]
80003754:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
80003758:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
8000375c:	17 a7       	ld.ub	r7,r11[0x2]
8000375e:	17 9e       	ld.ub	lr,r11[0x1]
80003760:	a3 6e       	lsl	lr,0x2
80003762:	fd e7 10 1e 	or	lr,lr,r7<<0x1
80003766:	17 87       	ld.ub	r7,r11[0x0]
80003768:	0e 96       	mov	r6,r7
8000376a:	0e 4e       	or	lr,r7
8000376c:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
80003770:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
80003774:	76 2e       	ld.w	lr,r11[0x8]
80003776:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
8000377a:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
8000377e:	76 1e       	ld.w	lr,r11[0x4]
80003780:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
80003784:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
80003788:	76 3b       	ld.w	r11,r11[0xc]
8000378a:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
8000378e:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
80003792:	e1 ba 00 00 	mfsr	r10,0x0
80003796:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80003798:	f8 0b 15 02 	lsl	r11,r12,0x2
8000379c:	ea 1b aa 00 	orh	r11,0xaa00
800037a0:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800037a2:	f0 f8 ff f8 	ld.w	r8,r8[-8]
800037a6:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800037aa:	14 98       	mov	r8,r10
800037ac:	e6 18 00 01 	andh	r8,0x1,COH
800037b0:	c0 21       	brne	800037b4 <scif_pll_setup+0x80>
800037b2:	d5 03       	csrf	0x10

  return PASS;
}
800037b4:	2f ed       	sub	sp,-8
800037b6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800037ba:	d7 03       	nop

800037bc <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800037bc:	eb cd 40 80 	pushm	r7,lr
800037c0:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800037c2:	fa c8 ff f8 	sub	r8,sp,-8
800037c6:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
800037ca:	fe 78 08 00 	mov	r8,-63488
800037ce:	f8 c9 ff f7 	sub	r9,r12,-9
800037d2:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
800037d6:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800037da:	30 1b       	mov	r11,1
800037dc:	ef db d2 01 	bfins	r7,r11,0x10,0x1
800037e0:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
800037e4:	e1 bb 00 00 	mfsr	r11,0x0
800037e8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800037ea:	f2 07 15 02 	lsl	r7,r9,0x2
800037ee:	ea 17 aa 00 	orh	r7,0xaa00
800037f2:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800037f4:	fc fe ff f8 	ld.w	lr,lr[-8]
800037f8:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
800037fc:	16 98       	mov	r8,r11
800037fe:	e6 18 00 01 	andh	r8,0x1,COH
80003802:	c0 21       	brne	80003806 <scif_enable_osc+0x4a>
80003804:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003806:	58 0a       	cp.w	r10,0
80003808:	c0 e0       	breq	80003824 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
8000380a:	58 0c       	cp.w	r12,0
8000380c:	c0 61       	brne	80003818 <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000380e:	30 1c       	mov	r12,1
80003810:	f0 1f 00 07 	mcall	8000382c <scif_enable_osc+0x70>
80003814:	c0 80       	breq	80003824 <scif_enable_osc+0x68>
80003816:	c0 58       	rjmp	80003820 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
80003818:	30 2c       	mov	r12,2
8000381a:	f0 1f 00 05 	mcall	8000382c <scif_enable_osc+0x70>
8000381e:	c0 30       	breq	80003824 <scif_enable_osc+0x68>
80003820:	3f fc       	mov	r12,-1
80003822:	c0 28       	rjmp	80003826 <scif_enable_osc+0x6a>
80003824:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
80003826:	2f ed       	sub	sp,-8
80003828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000382c:	80 00       	ld.sh	r0,r0[0x0]
8000382e:	35 dc       	mov	r12,93

80003830 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
80003830:	58 0c       	cp.w	r12,0
80003832:	c3 41       	brne	8000389a <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
80003834:	fe 78 08 00 	mov	r8,-63488
80003838:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
8000383a:	e0 69 84 7f 	mov	r9,33919
8000383e:	ea 19 00 1e 	orh	r9,0x1e
80003842:	12 3b       	cp.w	r11,r9
80003844:	e0 8b 00 04 	brhi	8000384c <scif_configure_osc_crystalmode+0x1c>
80003848:	30 0b       	mov	r11,0
8000384a:	c1 38       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000384c:	e0 69 96 7f 	mov	r9,38527
80003850:	ea 19 00 98 	orh	r9,0x98
80003854:	12 3b       	cp.w	r11,r9
80003856:	e0 8b 00 04 	brhi	8000385e <scif_configure_osc_crystalmode+0x2e>
8000385a:	30 1b       	mov	r11,1
8000385c:	c0 a8       	rjmp	80003870 <scif_configure_osc_crystalmode+0x40>
8000385e:	e0 69 24 00 	mov	r9,9216
80003862:	ea 19 00 f4 	orh	r9,0xf4
80003866:	12 3b       	cp.w	r11,r9
80003868:	f9 bb 03 02 	movlo	r11,2
8000386c:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80003870:	30 19       	mov	r9,1
80003872:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80003876:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8000387a:	e1 ba 00 00 	mfsr	r10,0x0
8000387e:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80003880:	fe 79 08 00 	mov	r9,-63488
80003884:	32 4b       	mov	r11,36
80003886:	ea 1b aa 00 	orh	r11,0xaa00
8000388a:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
8000388c:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8000388e:	14 98       	mov	r8,r10
80003890:	e6 18 00 01 	andh	r8,0x1,COH
80003894:	c3 51       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
80003896:	d5 03       	csrf	0x10
80003898:	c3 38       	rjmp	800038fe <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
8000389a:	fe 78 08 00 	mov	r8,-63488
8000389e:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038a0:	e0 69 84 7f 	mov	r9,33919
800038a4:	ea 19 00 1e 	orh	r9,0x1e
800038a8:	12 3b       	cp.w	r11,r9
800038aa:	e0 8b 00 04 	brhi	800038b2 <scif_configure_osc_crystalmode+0x82>
800038ae:	30 0b       	mov	r11,0
800038b0:	c1 38       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038b2:	e0 69 96 7f 	mov	r9,38527
800038b6:	ea 19 00 98 	orh	r9,0x98
800038ba:	12 3b       	cp.w	r11,r9
800038bc:	e0 8b 00 04 	brhi	800038c4 <scif_configure_osc_crystalmode+0x94>
800038c0:	30 1b       	mov	r11,1
800038c2:	c0 a8       	rjmp	800038d6 <scif_configure_osc_crystalmode+0xa6>
800038c4:	e0 69 24 00 	mov	r9,9216
800038c8:	ea 19 00 f4 	orh	r9,0xf4
800038cc:	12 3b       	cp.w	r11,r9
800038ce:	f9 bb 03 02 	movlo	r11,2
800038d2:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800038d6:	30 19       	mov	r9,1
800038d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800038dc:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800038e0:	e1 ba 00 00 	mfsr	r10,0x0
800038e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800038e6:	fe 79 08 00 	mov	r9,-63488
800038ea:	32 8b       	mov	r11,40
800038ec:	ea 1b aa 00 	orh	r11,0xaa00
800038f0:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800038f2:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800038f4:	14 98       	mov	r8,r10
800038f6:	e6 18 00 01 	andh	r8,0x1,COH
800038fa:	c0 21       	brne	800038fe <scif_configure_osc_crystalmode+0xce>
800038fc:	d5 03       	csrf	0x10
  }

  return PASS;
}
800038fe:	5e fd       	retal	0

80003900 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003900:	f8 c8 00 01 	sub	r8,r12,1
80003904:	f0 0b 00 0b 	add	r11,r8,r11
80003908:	f6 0c 0d 0a 	divu	r10,r11,r12
8000390c:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000390e:	f4 c8 00 01 	sub	r8,r10,1
80003912:	e0 48 00 fe 	cp.w	r8,254
80003916:	e0 88 00 03 	brls	8000391c <getBaudDiv+0x1c>
8000391a:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000391c:	5c 8c       	casts.h	r12
}
8000391e:	5e fc       	retal	r12

80003920 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003920:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003924:	30 18       	mov	r8,1
80003926:	f0 09 18 00 	cp.b	r9,r8
8000392a:	e0 88 00 04 	brls	80003932 <spi_initMaster+0x12>
8000392e:	30 2c       	mov	r12,2
80003930:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003932:	e0 68 00 80 	mov	r8,128
80003936:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003938:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
8000393a:	30 19       	mov	r9,1
8000393c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003940:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003944:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003948:	30 09       	mov	r9,0
8000394a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000394e:	30 fa       	mov	r10,15
80003950:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003954:	99 18       	st.w	r12[0x4],r8
80003956:	5e f9       	retal	r9

80003958 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003958:	eb cd 40 80 	pushm	r7,lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000395c:	30 1e       	mov	lr,1
8000395e:	f6 0e 18 00 	cp.b	lr,r11
80003962:	f9 be 02 00 	movhs	lr,0
80003966:	30 18       	mov	r8,1
80003968:	f4 08 18 00 	cp.b	r8,r10
8000396c:	f9 b8 02 00 	movhs	r8,0
80003970:	fd e8 10 08 	or	r8,lr,r8
80003974:	30 07       	mov	r7,0
80003976:	ee 08 18 00 	cp.b	r8,r7
8000397a:	c0 40       	breq	80003982 <spi_selectionMode+0x2a>
8000397c:	30 2c       	mov	r12,2
8000397e:	e3 cd 80 80 	ldm	sp++,r7,pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003982:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003984:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003988:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000398c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003990:	99 18       	st.w	r12[0x4],r8
80003992:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80003996 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003996:	78 18       	ld.w	r8,r12[0x4]
80003998:	ea 18 00 0f 	orh	r8,0xf
8000399c:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000399e:	78 18       	ld.w	r8,r12[0x4]
800039a0:	e2 18 00 04 	andl	r8,0x4,COH
800039a4:	c0 f0       	breq	800039c2 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800039a6:	30 e8       	mov	r8,14
800039a8:	f0 0b 18 00 	cp.b	r11,r8
800039ac:	e0 8b 00 19 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800039b0:	78 18       	ld.w	r8,r12[0x4]
800039b2:	b1 6b       	lsl	r11,0x10
800039b4:	ea 1b ff f0 	orh	r11,0xfff0
800039b8:	e8 1b ff ff 	orl	r11,0xffff
800039bc:	10 6b       	and	r11,r8
800039be:	99 1b       	st.w	r12[0x4],r11
800039c0:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800039c2:	30 38       	mov	r8,3
800039c4:	f0 0b 18 00 	cp.b	r11,r8
800039c8:	e0 8b 00 0b 	brhi	800039de <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800039cc:	78 18       	ld.w	r8,r12[0x4]
800039ce:	2f 0b       	sub	r11,-16
800039d0:	30 19       	mov	r9,1
800039d2:	f2 0b 09 4b 	lsl	r11,r9,r11
800039d6:	5c db       	com	r11
800039d8:	10 6b       	and	r11,r8
800039da:	99 1b       	st.w	r12[0x4],r11
800039dc:	5e fd       	retal	0
800039de:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800039e0:	5e fc       	retal	r12

800039e2 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039e2:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039e6:	c0 58       	rjmp	800039f0 <spi_unselectChip+0xe>
		if (!timeout--) {
800039e8:	58 08       	cp.w	r8,0
800039ea:	c0 21       	brne	800039ee <spi_unselectChip+0xc>
800039ec:	5e ff       	retal	1
800039ee:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039f0:	78 49       	ld.w	r9,r12[0x10]
800039f2:	e2 19 02 00 	andl	r9,0x200,COH
800039f6:	cf 90       	breq	800039e8 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039f8:	78 18       	ld.w	r8,r12[0x4]
800039fa:	ea 18 00 0f 	orh	r8,0xf
800039fe:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003a00:	fc 18 01 00 	movh	r8,0x100
80003a04:	99 08       	st.w	r12[0x0],r8
80003a06:	5e fd       	retal	0

80003a08 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003a08:	eb cd 40 f8 	pushm	r3-r7,lr
80003a0c:	18 95       	mov	r5,r12
80003a0e:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a10:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003a14:	30 38       	mov	r8,3
80003a16:	f0 06 18 00 	cp.b	r6,r8
80003a1a:	e0 8b 00 4d 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003a1e:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a22:	30 18       	mov	r8,1
80003a24:	f0 04 18 00 	cp.b	r4,r8
80003a28:	e0 8b 00 46 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a2c:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a30:	30 78       	mov	r8,7
80003a32:	f0 03 18 00 	cp.b	r3,r8
80003a36:	e0 88 00 3f 	brls	80003ab4 <spi_setupChipReg+0xac>
80003a3a:	31 08       	mov	r8,16
80003a3c:	f0 03 18 00 	cp.b	r3,r8
80003a40:	e0 8b 00 3a 	brhi	80003ab4 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a44:	14 9b       	mov	r11,r10
80003a46:	6e 1c       	ld.w	r12,r7[0x4]
80003a48:	f0 1f 00 1d 	mcall	80003abc <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003a4c:	c3 45       	brlt	80003ab4 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003a4e:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003a50:	ec 09 16 01 	lsr	r9,r6,0x1
80003a54:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003a58:	ec 16 00 01 	eorl	r6,0x1
80003a5c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003a60:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003a64:	20 83       	sub	r3,8
80003a66:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003a6a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003a6e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003a72:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003a76:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003a7a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003a7e:	0f 89       	ld.ub	r9,r7[0x0]
80003a80:	30 1a       	mov	r10,1
80003a82:	f4 09 18 00 	cp.b	r9,r10
80003a86:	c0 e0       	breq	80003aa2 <spi_setupChipReg+0x9a>
80003a88:	c0 a3       	brcs	80003a9c <spi_setupChipReg+0x94>
80003a8a:	30 2a       	mov	r10,2
80003a8c:	f4 09 18 00 	cp.b	r9,r10
80003a90:	c0 c0       	breq	80003aa8 <spi_setupChipReg+0xa0>
80003a92:	30 3a       	mov	r10,3
80003a94:	f4 09 18 00 	cp.b	r9,r10
80003a98:	c0 e1       	brne	80003ab4 <spi_setupChipReg+0xac>
80003a9a:	c0 a8       	rjmp	80003aae <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003a9c:	8b c8       	st.w	r5[0x30],r8
80003a9e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003aa2:	8b d8       	st.w	r5[0x34],r8
80003aa4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003aa8:	8b e8       	st.w	r5[0x38],r8
80003aaa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003aae:	8b f8       	st.w	r5[0x3c],r8
80003ab0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003ab4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003ab6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003aba:	00 00       	add	r0,r0
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	39 00       	mov	r0,-112

80003ac0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003ac0:	30 18       	mov	r8,1
80003ac2:	99 08       	st.w	r12[0x0],r8
}
80003ac4:	5e fc       	retal	r12

80003ac6 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003ac6:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003aca:	c0 58       	rjmp	80003ad4 <spi_write+0xe>
		if (!timeout--) {
80003acc:	58 08       	cp.w	r8,0
80003ace:	c0 21       	brne	80003ad2 <spi_write+0xc>
80003ad0:	5e ff       	retal	1
80003ad2:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003ad4:	78 49       	ld.w	r9,r12[0x10]
80003ad6:	e2 19 00 02 	andl	r9,0x2,COH
80003ada:	cf 90       	breq	80003acc <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003adc:	5c 7b       	castu.h	r11
80003ade:	99 3b       	st.w	r12[0xc],r11
80003ae0:	5e fd       	retal	0

80003ae2 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003ae2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003ae6:	c0 58       	rjmp	80003af0 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003ae8:	58 08       	cp.w	r8,0
80003aea:	c0 21       	brne	80003aee <spi_read+0xc>
80003aec:	5e ff       	retal	1
80003aee:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003af0:	78 49       	ld.w	r9,r12[0x10]
80003af2:	e2 19 02 01 	andl	r9,0x201,COH
80003af6:	e0 49 02 01 	cp.w	r9,513
80003afa:	cf 71       	brne	80003ae8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003afc:	78 28       	ld.w	r8,r12[0x8]
80003afe:	b6 08       	st.h	r11[0x0],r8
80003b00:	5e fd       	retal	0
80003b02:	d7 03       	nop

80003b04 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003b04:	4a e8       	lddpc	r8,80003bbc <twim_master_interrupt_handler+0xb8>
80003b06:	70 08       	ld.w	r8,r8[0x0]
80003b08:	70 79       	ld.w	r9,r8[0x1c]
80003b0a:	4a ea       	lddpc	r10,80003bc0 <twim_master_interrupt_handler+0xbc>
80003b0c:	74 0a       	ld.w	r10,r10[0x0]
80003b0e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003b12:	12 9a       	mov	r10,r9
80003b14:	e2 1a 07 00 	andl	r10,0x700,COH
80003b18:	c1 40       	breq	80003b40 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003b1a:	e2 19 03 00 	andl	r9,0x300,COH
80003b1e:	f9 b9 01 fc 	movne	r9,-4
80003b22:	f9 b9 00 fe 	moveq	r9,-2
80003b26:	4a 8a       	lddpc	r10,80003bc4 <twim_master_interrupt_handler+0xc0>
80003b28:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003b2a:	70 3a       	ld.w	r10,r8[0xc]
80003b2c:	30 09       	mov	r9,0
80003b2e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80003b32:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80003b34:	3f fa       	mov	r10,-1
80003b36:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80003b38:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
80003b3a:	4a 48       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b3c:	b0 89       	st.b	r8[0x0],r9
80003b3e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003b40:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80003b44:	c1 30       	breq	80003b6a <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003b46:	4a 2a       	lddpc	r10,80003bcc <twim_master_interrupt_handler+0xc8>
80003b48:	70 5b       	ld.w	r11,r8[0x14]
80003b4a:	74 09       	ld.w	r9,r10[0x0]
80003b4c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80003b4e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003b50:	4a 09       	lddpc	r9,80003bd0 <twim_master_interrupt_handler+0xcc>
80003b52:	72 0a       	ld.w	r10,r9[0x0]
80003b54:	20 1a       	sub	r10,1
80003b56:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80003b58:	72 09       	ld.w	r9,r9[0x0]
80003b5a:	58 09       	cp.w	r9,0
80003b5c:	c2 f1       	brne	80003bba <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80003b5e:	30 19       	mov	r9,1
80003b60:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b62:	30 09       	mov	r9,0
80003b64:	49 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b66:	b0 89       	st.b	r8[0x0],r9
80003b68:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80003b6a:	e2 19 00 02 	andl	r9,0x2,COH
80003b6e:	c2 60       	breq	80003bba <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80003b70:	49 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b72:	72 09       	ld.w	r9,r9[0x0]
80003b74:	58 09       	cp.w	r9,0
80003b76:	c0 71       	brne	80003b84 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80003b78:	30 29       	mov	r9,2
80003b7a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80003b7c:	30 09       	mov	r9,0
80003b7e:	49 38       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b80:	b0 89       	st.b	r8[0x0],r9
80003b82:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80003b84:	49 5a       	lddpc	r10,80003bd8 <twim_master_interrupt_handler+0xd4>
80003b86:	74 09       	ld.w	r9,r10[0x0]
80003b88:	13 3b       	ld.ub	r11,r9++
80003b8a:	91 6b       	st.w	r8[0x18],r11
80003b8c:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80003b8e:	49 28       	lddpc	r8,80003bd4 <twim_master_interrupt_handler+0xd0>
80003b90:	70 09       	ld.w	r9,r8[0x0]
80003b92:	20 19       	sub	r9,1
80003b94:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80003b96:	70 08       	ld.w	r8,r8[0x0]
80003b98:	58 08       	cp.w	r8,0
80003b9a:	c1 01       	brne	80003bba <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
80003b9c:	48 b8       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003b9e:	11 88       	ld.ub	r8,r8[0x0]
80003ba0:	58 08       	cp.w	r8,0
80003ba2:	c0 c0       	breq	80003bba <twim_master_interrupt_handler+0xb6>
					twim_next = false;
80003ba4:	30 09       	mov	r9,0
80003ba6:	48 98       	lddpc	r8,80003bc8 <twim_master_interrupt_handler+0xc4>
80003ba8:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
80003baa:	48 d8       	lddpc	r8,80003bdc <twim_master_interrupt_handler+0xd8>
80003bac:	70 08       	ld.w	r8,r8[0x0]
80003bae:	70 3a       	ld.w	r10,r8[0xc]
80003bb0:	48 99       	lddpc	r9,80003bd4 <twim_master_interrupt_handler+0xd0>
80003bb2:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
80003bb4:	70 29       	ld.w	r9,r8[0x8]
80003bb6:	48 98       	lddpc	r8,80003bd8 <twim_master_interrupt_handler+0xd4>
80003bb8:	91 09       	st.w	r8[0x0],r9
80003bba:	d6 03       	rete
80003bbc:	00 00       	add	r0,r0
80003bbe:	07 e8       	ld.ub	r8,r3[0x6]
80003bc0:	00 00       	add	r0,r0
80003bc2:	07 fc       	ld.ub	r12,r3[0x7]
80003bc4:	00 00       	add	r0,r0
80003bc6:	07 f4       	ld.ub	r4,r3[0x7]
80003bc8:	00 00       	add	r0,r0
80003bca:	08 00       	add	r0,r4
80003bcc:	00 00       	add	r0,r0
80003bce:	07 ec       	ld.ub	r12,r3[0x6]
80003bd0:	00 00       	add	r0,r0
80003bd2:	07 f0       	ld.ub	r0,r3[0x7]
80003bd4:	00 00       	add	r0,r0
80003bd6:	08 08       	add	r8,r4
80003bd8:	00 00       	add	r0,r0
80003bda:	07 f8       	ld.ub	r8,r3[0x7]
80003bdc:	00 00       	add	r0,r0
80003bde:	08 04       	add	r4,r4

80003be0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003be0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80003be4:	f4 0b 0d 0a 	divu	r10,r10,r11
80003be8:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003bec:	e0 48 00 ff 	cp.w	r8,255
80003bf0:	e0 8b 00 04 	brhi	80003bf8 <twim_set_speed+0x18>
80003bf4:	30 09       	mov	r9,0
80003bf6:	c2 18       	rjmp	80003c38 <twim_set_speed+0x58>
80003bf8:	30 09       	mov	r9,0
80003bfa:	30 16       	mov	r6,1
80003bfc:	30 7a       	mov	r10,7
80003bfe:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80003c00:	2f f9       	sub	r9,-1
80003c02:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80003c04:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003c06:	e0 48 00 ff 	cp.w	r8,255
80003c0a:	f9 be 0b 01 	movhi	lr,1
80003c0e:	f9 be 08 00 	movls	lr,0
80003c12:	f2 0a 18 00 	cp.b	r10,r9
80003c16:	ec 0b 17 20 	movhs	r11,r6
80003c1a:	f9 bb 03 00 	movlo	r11,0
80003c1e:	fd eb 00 0b 	and	r11,lr,r11
80003c22:	ee 0b 18 00 	cp.b	r11,r7
80003c26:	ce d1       	brne	80003c00 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003c28:	30 7a       	mov	r10,7
80003c2a:	f4 09 18 00 	cp.b	r9,r10
80003c2e:	e0 88 00 05 	brls	80003c38 <twim_set_speed+0x58>
80003c32:	3f 8c       	mov	r12,-8
80003c34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003c38:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003c3c:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80003c40:	14 18       	sub	r8,r10
80003c42:	f7 e8 10 88 	or	r8,r11,r8<<0x8
80003c46:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
80003c4a:	99 19       	st.w	r12[0x4],r9
80003c4c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80003c50 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80003c50:	48 38       	lddpc	r8,80003c5c <twim_status+0xc>
80003c52:	70 08       	ld.w	r8,r8[0x0]
80003c54:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
80003c56:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80003c5a:	5e fc       	retal	r12
80003c5c:	00 00       	add	r0,r0
80003c5e:	07 e8       	ld.ub	r8,r3[0x6]

80003c60 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003c60:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80003c64:	e6 18 00 01 	andh	r8,0x1,COH
80003c68:	c0 21       	brne	80003c6c <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
80003c6a:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80003c6c:	3f f8       	mov	r8,-1
80003c6e:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80003c70:	99 b8       	st.w	r12[0x2c],r8
}
80003c72:	5e fc       	retal	r12

80003c74 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80003c74:	eb cd 40 fe 	pushm	r1-r7,lr
80003c78:	18 97       	mov	r7,r12
80003c7a:	16 93       	mov	r3,r11
80003c7c:	14 95       	mov	r5,r10
80003c7e:	12 92       	mov	r2,r9
80003c80:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003c82:	30 14       	mov	r4,1
80003c84:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003c86:	e0 68 00 80 	mov	r8,128
80003c8a:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003c8c:	30 28       	mov	r8,2
80003c8e:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80003c90:	49 e6       	lddpc	r6,80003d08 <twim_write+0x94>
80003c92:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80003c94:	f0 1f 00 1e 	mcall	80003d0c <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80003c98:	49 e8       	lddpc	r8,80003d10 <twim_write+0x9c>
80003c9a:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80003c9c:	49 e8       	lddpc	r8,80003d14 <twim_write+0xa0>
80003c9e:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
80003ca0:	30 09       	mov	r9,0
80003ca2:	49 e8       	lddpc	r8,80003d18 <twim_write+0xa4>
80003ca4:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003ca6:	49 e9       	lddpc	r9,80003d1c <twim_write+0xa8>
80003ca8:	30 08       	mov	r8,0
80003caa:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80003cac:	6c 08       	ld.w	r8,r6[0x0]
80003cae:	b1 65       	lsl	r5,0x10
80003cb0:	e8 15 e0 00 	orl	r5,0xe000
80003cb4:	eb e2 10 12 	or	r2,r5,r2<<0x1
80003cb8:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
80003cbc:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80003cbe:	49 9a       	lddpc	r10,80003d20 <twim_write+0xac>
80003cc0:	e0 6b 03 02 	mov	r11,770
80003cc4:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80003cc6:	74 0a       	ld.w	r10,r10[0x0]
80003cc8:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80003cca:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
80003ccc:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cce:	72 08       	ld.w	r8,r9[0x0]
80003cd0:	58 08       	cp.w	r8,0
80003cd2:	c0 80       	breq	80003ce2 <twim_write+0x6e>
80003cd4:	c0 b8       	rjmp	80003cea <twim_write+0x76>
		cpu_relax();
80003cd6:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80003cda:	6c 08       	ld.w	r8,r6[0x0]
80003cdc:	58 08       	cp.w	r8,0
80003cde:	c0 30       	breq	80003ce4 <twim_write+0x70>
80003ce0:	c0 58       	rjmp	80003cea <twim_write+0x76>
80003ce2:	48 f6       	lddpc	r6,80003d1c <twim_write+0xa8>
80003ce4:	f0 1f 00 10 	mcall	80003d24 <twim_write+0xb0>
80003ce8:	cf 70       	breq	80003cd6 <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80003cea:	30 28       	mov	r8,2
80003cec:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cee:	48 c8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf0:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cf2:	5b c8       	cp.w	r8,-4
80003cf4:	c0 70       	breq	80003d02 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003cf6:	48 a8       	lddpc	r8,80003d1c <twim_write+0xa8>
80003cf8:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80003cfa:	5b e8       	cp.w	r8,-2
80003cfc:	c0 30       	breq	80003d02 <twim_write+0x8e>
80003cfe:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003d02:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
80003d06:	00 00       	add	r0,r0
80003d08:	00 00       	add	r0,r0
80003d0a:	07 e8       	ld.ub	r8,r3[0x6]
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	3c 60       	mov	r0,-58
80003d10:	00 00       	add	r0,r0
80003d12:	07 f8       	ld.ub	r8,r3[0x7]
80003d14:	00 00       	add	r0,r0
80003d16:	08 08       	add	r8,r4
80003d18:	00 00       	add	r0,r0
80003d1a:	08 00       	add	r0,r4
80003d1c:	00 00       	add	r0,r0
80003d1e:	07 f4       	ld.ub	r4,r3[0x7]
80003d20:	00 00       	add	r0,r0
80003d22:	07 fc       	ld.ub	r12,r3[0x7]
80003d24:	80 00       	ld.sh	r0,r0[0x0]
80003d26:	3c 50       	mov	r0,-59

80003d28 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80003d28:	d4 01       	pushm	lr
80003d2a:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80003d2c:	30 08       	mov	r8,0
80003d2e:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80003d30:	30 08       	mov	r8,0
80003d32:	16 99       	mov	r9,r11
80003d34:	10 9a       	mov	r10,r8
80003d36:	1a 9b       	mov	r11,sp
80003d38:	f0 1f 00 02 	mcall	80003d40 <twim_probe+0x18>
}
80003d3c:	2f fd       	sub	sp,-4
80003d3e:	d8 02       	popm	pc
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	3c 74       	mov	r4,-57

80003d44 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80003d44:	eb cd 40 e0 	pushm	r5-r7,lr
80003d48:	18 97       	mov	r7,r12
80003d4a:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80003d4c:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80003d50:	30 0a       	mov	r10,0
80003d52:	4a 59       	lddpc	r9,80003de4 <twim_master_init+0xa0>
80003d54:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80003d56:	e6 18 00 01 	andh	r8,0x1,COH
80003d5a:	c0 b1       	brne	80003d70 <twim_master_init+0x2c>
		cpu_irq_disable ();
80003d5c:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80003d5e:	3f f8       	mov	r8,-1
80003d60:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d62:	30 18       	mov	r8,1
80003d64:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d66:	e0 68 00 80 	mov	r8,128
80003d6a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80003d6c:	d5 03       	csrf	0x10
80003d6e:	c0 88       	rjmp	80003d7e <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80003d70:	3f f8       	mov	r8,-1
80003d72:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80003d74:	30 18       	mov	r8,1
80003d76:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80003d78:	e0 68 00 80 	mov	r8,128
80003d7c:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80003d7e:	3f f8       	mov	r8,-1
80003d80:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d82:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003d86:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80003d88:	30 1a       	mov	r10,1
80003d8a:	e0 6b 03 20 	mov	r11,800
80003d8e:	49 7c       	lddpc	r12,80003de8 <twim_master_init+0xa4>
80003d90:	f0 1f 00 17 	mcall	80003dec <twim_master_init+0xa8>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003d94:	e3 b6 00 00 	mtsr	0x0,r6
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80003d98:	eb 39 00 0c 	ld.ub	r9,r5[12]
80003d9c:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80003d9e:	f0 09 18 00 	cp.b	r9,r8
80003da2:	f9 b8 01 10 	movne	r8,16
80003da6:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80003daa:	f9 b8 01 ff 	movne	r8,-1
80003dae:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80003db2:	6a 0a       	ld.w	r10,r5[0x0]
80003db4:	6a 1b       	ld.w	r11,r5[0x4]
80003db6:	0e 9c       	mov	r12,r7
80003db8:	f0 1f 00 0e 	mcall	80003df0 <twim_master_init+0xac>
80003dbc:	5b 8c       	cp.w	r12,-8
80003dbe:	c1 00       	breq	80003dde <twim_master_init+0x9a>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80003dc0:	6a 2b       	ld.w	r11,r5[0x8]
80003dc2:	0e 9c       	mov	r12,r7
80003dc4:	f0 1f 00 0c 	mcall	80003df4 <twim_master_init+0xb0>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dc8:	48 78       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dcc:	5b c8       	cp.w	r8,-4
80003dce:	c0 70       	breq	80003ddc <twim_master_init+0x98>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80003dd0:	48 58       	lddpc	r8,80003de4 <twim_master_init+0xa0>
80003dd2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80003dd4:	5b e8       	cp.w	r8,-2
80003dd6:	c0 30       	breq	80003ddc <twim_master_init+0x98>
80003dd8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003ddc:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003dde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003de2:	00 00       	add	r0,r0
80003de4:	00 00       	add	r0,r0
80003de6:	07 f4       	ld.ub	r4,r3[0x7]
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3b 04       	mov	r4,-80
80003dec:	80 00       	ld.sh	r0,r0[0x0]
80003dee:	32 48       	mov	r8,36
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	3b e0       	mov	r0,-66
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	3d 28       	mov	r8,-46

80003df8 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003df8:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003dfa:	e2 18 00 02 	andl	r8,0x2,COH
80003dfe:	c0 31       	brne	80003e04 <usart_write_char+0xc>
80003e00:	30 2c       	mov	r12,2
80003e02:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003e04:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003e08:	99 7b       	st.w	r12[0x1c],r11
80003e0a:	5e fd       	retal	0

80003e0c <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003e0c:	eb cd 40 e0 	pushm	r5-r7,lr
80003e10:	18 96       	mov	r6,r12
80003e12:	16 95       	mov	r5,r11
80003e14:	e0 67 27 0f 	mov	r7,9999
80003e18:	c0 68       	rjmp	80003e24 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003e1a:	58 07       	cp.w	r7,0
80003e1c:	c0 31       	brne	80003e22 <usart_putchar+0x16>
80003e1e:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003e22:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003e24:	0a 9b       	mov	r11,r5
80003e26:	0c 9c       	mov	r12,r6
80003e28:	f0 1f 00 03 	mcall	80003e34 <usart_putchar+0x28>
80003e2c:	cf 71       	brne	80003e1a <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003e2e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e32:	00 00       	add	r0,r0
80003e34:	80 00       	ld.sh	r0,r0[0x0]
80003e36:	3d f8       	mov	r8,-33

80003e38 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003e38:	eb cd 40 c0 	pushm	r6-r7,lr
80003e3c:	18 96       	mov	r6,r12
80003e3e:	16 97       	mov	r7,r11
  while (*string != '\0')
80003e40:	17 8b       	ld.ub	r11,r11[0x0]
80003e42:	58 0b       	cp.w	r11,0
80003e44:	c0 80       	breq	80003e54 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80003e46:	2f f7       	sub	r7,-1
80003e48:	0c 9c       	mov	r12,r6
80003e4a:	f0 1f 00 04 	mcall	80003e58 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003e4e:	0f 8b       	ld.ub	r11,r7[0x0]
80003e50:	58 0b       	cp.w	r11,0
80003e52:	cf a1       	brne	80003e46 <usart_write_line+0xe>
80003e54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	3e 0c       	mov	r12,-32

80003e5c <udd_include_vbus_monitoring>:
#if ( UC3L3_L4 )
	return false;
#else
	return true;
#endif
}
80003e5c:	5e ff       	retal	1

80003e5e <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
80003e5e:	5e fd       	retal	0

80003e60 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80003e60:	fe 68 10 00 	mov	r8,-126976
80003e64:	70 09       	ld.w	r9,r8[0x0]
80003e66:	a7 d9       	cbr	r9,0x7
80003e68:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80003e6a:	70 09       	ld.w	r9,r8[0x0]
80003e6c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003e70:	e0 19 ff 80 	andl	r9,0xff80
80003e74:	f9 e9 10 09 	or	r9,r12,r9
80003e78:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80003e7a:	70 09       	ld.w	r9,r8[0x0]
80003e7c:	a7 b9       	sbr	r9,0x7
80003e7e:	91 09       	st.w	r8[0x0],r9
}
80003e80:	5e fc       	retal	r12

80003e82 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80003e82:	fe 68 10 00 	mov	r8,-126976
80003e86:	70 0c       	ld.w	r12,r8[0x0]
}
80003e88:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003e8c:	5e fc       	retal	r12

80003e8e <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80003e8e:	fe 68 10 20 	mov	r8,-126944
80003e92:	70 0c       	ld.w	r12,r8[0x0]
}
80003e94:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80003e98:	5e fc       	retal	r12

80003e9a <udd_get_micro_frame_number>:
#ifdef USB_DEVICE_HS_SUPPORT
	return udd_micro_frame_number();
#else
	return 0;
#endif
}
80003e9a:	5e fd       	retal	0

80003e9c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80003e9c:	48 28       	lddpc	r8,80003ea4 <udd_set_setup_payload+0x8>
80003e9e:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80003ea0:	b0 6b       	st.h	r8[0xc],r11
}
80003ea2:	5e fc       	retal	r12
80003ea4:	00 00       	add	r0,r0
80003ea6:	11 5c       	ld.sh	r12,--r8

80003ea8 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80003ea8:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80003eac:	a3 68       	lsl	r8,0x2
80003eae:	e0 38 ee 40 	sub	r8,126528
80003eb2:	70 0c       	ld.w	r12,r8[0x0]
}
80003eb4:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80003eb8:	5e fc       	retal	r12
80003eba:	d7 03       	nop

80003ebc <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80003ebc:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80003ebe:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80003ec2:	30 38       	mov	r8,3
80003ec4:	f0 0c 18 00 	cp.b	r12,r8
80003ec8:	e0 88 00 03 	brls	80003ece <udd_ep_clear_halt+0x12>
80003ecc:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)) {
80003ece:	f8 08 15 02 	lsl	r8,r12,0x2
80003ed2:	fe 6a 11 c0 	mov	r10,-126528
80003ed6:	f0 0a 00 09 	add	r9,r8,r10
80003eda:	72 09       	ld.w	r9,r9[0x0]
80003edc:	e6 19 00 08 	andh	r9,0x8,COH
80003ee0:	c2 b0       	breq	80003f36 <udd_ep_clear_halt+0x7a>
		// Remove stall request
		udd_disable_stall_handshake(ep);
80003ee2:	fe 6a 12 20 	mov	r10,-126432
80003ee6:	f0 0a 00 09 	add	r9,r8,r10
80003eea:	e8 6a 00 00 	mov	r10,524288
80003eee:	93 0a       	st.w	r9[0x0],r10
		if (Is_udd_stall(ep)) {
80003ef0:	fe 6a 11 30 	mov	r10,-126672
80003ef4:	f0 0a 00 09 	add	r9,r8,r10
80003ef8:	72 09       	ld.w	r9,r9[0x0]
80003efa:	e2 19 00 40 	andl	r9,0x40,COH
80003efe:	c0 c0       	breq	80003f16 <udd_ep_clear_halt+0x5a>
			udd_ack_stall(ep);
80003f00:	fe 6a 11 60 	mov	r10,-126624
80003f04:	f0 0a 00 09 	add	r9,r8,r10
80003f08:	34 0a       	mov	r10,64
80003f0a:	93 0a       	st.w	r9[0x0],r10
			// The Stall has occurred, then reset data toggle
			udd_reset_data_toggle(ep);
80003f0c:	e0 38 ee 10 	sub	r8,126480
80003f10:	e4 69 00 00 	mov	r9,262144
80003f14:	91 09       	st.w	r8[0x0],r9
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80003f16:	20 1c       	sub	r12,1
80003f18:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003f1c:	48 78       	lddpc	r8,80003f38 <udd_ep_clear_halt+0x7c>
80003f1e:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
			udd_reset_data_toggle(ep);
		}

		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80003f22:	78 08       	ld.w	r8,r12[0x0]
80003f24:	58 08       	cp.w	r8,0
80003f26:	c0 84       	brge	80003f36 <udd_ep_clear_halt+0x7a>
			ptr_job->busy = false;
80003f28:	30 09       	mov	r9,0
80003f2a:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80003f2e:	99 08       	st.w	r12[0x0],r8
			ptr_job->call_nohalt();
80003f30:	78 48       	ld.w	r8,r12[0x10]
80003f32:	5d 18       	icall	r8
80003f34:	da 0a       	popm	pc,r12=1
80003f36:	da 0a       	popm	pc,r12=1
80003f38:	00 00       	add	r0,r0
80003f3a:	08 10       	sub	r0,r4

80003f3c <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80003f3c:	30 19       	mov	r9,1
80003f3e:	fe 68 12 20 	mov	r8,-126432
80003f42:	91 09       	st.w	r8[0x0],r9
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80003f44:	30 29       	mov	r9,2
80003f46:	fe 68 11 60 	mov	r8,-126624
80003f4a:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80003f4c:	48 49       	lddpc	r9,80003f5c <udd_ctrl_init+0x20>
80003f4e:	30 08       	mov	r8,0
80003f50:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80003f52:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80003f54:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80003f56:	48 39       	lddpc	r9,80003f60 <udd_ctrl_init+0x24>
80003f58:	93 08       	st.w	r9[0x0],r8
}
80003f5a:	5e fc       	retal	r12
80003f5c:	00 00       	add	r0,r0
80003f5e:	11 5c       	ld.sh	r12,--r8
80003f60:	00 00       	add	r0,r0
80003f62:	08 e8       	st.h	--r4,r8

80003f64 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80003f64:	30 59       	mov	r9,5
80003f66:	48 58       	lddpc	r8,80003f78 <udd_ctrl_stall_data+0x14>
80003f68:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80003f6a:	e8 69 00 00 	mov	r9,524288
80003f6e:	fe 68 11 f0 	mov	r8,-126480
80003f72:	91 09       	st.w	r8[0x0],r9
}
80003f74:	5e fc       	retal	r12
80003f76:	00 00       	add	r0,r0
80003f78:	00 00       	add	r0,r0
80003f7a:	08 e8       	st.h	--r4,r8

80003f7c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80003f7c:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80003f7e:	48 48       	lddpc	r8,80003f8c <udd_ctrl_endofrequest+0x10>
80003f80:	70 48       	ld.w	r8,r8[0x10]
80003f82:	58 08       	cp.w	r8,0
80003f84:	c0 20       	breq	80003f88 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80003f86:	5d 18       	icall	r8
80003f88:	d8 02       	popm	pc
80003f8a:	00 00       	add	r0,r0
80003f8c:	00 00       	add	r0,r0
80003f8e:	11 5c       	ld.sh	r12,--r8

80003f90 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80003f90:	eb cd 40 e0 	pushm	r5-r7,lr
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
80003f94:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
	if (Is_udd_endpoint_enabled(ep_addr)) {
80003f98:	fe 68 10 00 	mov	r8,-126976
80003f9c:	70 7e       	ld.w	lr,r8[0x1c]
80003f9e:	30 18       	mov	r8,1
80003fa0:	f0 09 09 48 	lsl	r8,r8,r9
80003fa4:	f1 ee 00 0e 	and	lr,r8,lr
80003fa8:	c0 30       	breq	80003fae <udd_ep_alloc+0x1e>
80003faa:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
	// Check endpoint type
	Assert(((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_BULK)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_INTERRUPT));

	udd_configure_endpoint(ep_addr, bmAttributes,
80003fae:	a3 69       	lsl	r9,0x2
80003fb0:	fe 67 11 00 	mov	r7,-126720
80003fb4:	f2 07 00 0e 	add	lr,r9,r7
80003fb8:	7c 06       	ld.w	r6,lr[0x0]
80003fba:	30 07       	mov	r7,0
80003fbc:	e0 65 01 00 	mov	r5,256
80003fc0:	f8 07 18 00 	cp.b	r7,r12
80003fc4:	ea 07 17 90 	movgt	r7,r5
80003fc8:	f9 b7 0a 00 	movle	r7,0
80003fcc:	5c 7a       	castu.h	r10
80003fce:	30 8c       	mov	r12,8
80003fd0:	f4 0c 0c 4a 	max	r10,r10,r12
80003fd4:	e0 6c 04 00 	mov	r12,1024
80003fd8:	f4 0c 0d 4a 	min	r10,r10,r12
80003fdc:	a1 7a       	lsl	r10,0x1
80003fde:	20 1a       	sub	r10,1
80003fe0:	f4 0a 12 00 	clz	r10,r10
80003fe4:	ab 7b       	lsl	r11,0xb
80003fe6:	e2 1b 18 00 	andl	r11,0x1800,COH
80003fea:	16 47       	or	r7,r11
80003fec:	f4 0c 11 1c 	rsub	r12,r10,28
80003ff0:	ef ec 10 4c 	or	r12,r7,r12<<0x4
80003ff4:	e2 1c 19 74 	andl	r12,0x1974,COH
80003ff8:	0c 9a       	mov	r10,r6
80003ffa:	e0 1a e6 8b 	andl	r10,0xe68b
80003ffe:	f9 ea 10 0a 	or	r10,r12,r10
80004002:	9d 0a       	st.w	lr[0x0],r10
			((ep & USB_EP_DIR_IN) ? 1 : 0), MaxEndpointSize,
			AVR32_USBC_UECFG0_EPBK_SINGLE);

	udd_enable_busy_bank0(ep_addr);
80004004:	e0 39 ee 10 	sub	r9,126480
80004008:	fc 1a 01 00 	movh	r10,0x100
8000400c:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(ep_addr);
8000400e:	fe 69 10 00 	mov	r9,-126976
80004012:	72 7a       	ld.w	r10,r9[0x1c]
80004014:	14 48       	or	r8,r10
80004016:	93 78       	st.w	r9[0x1c],r8
80004018:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1

8000401c <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
8000401c:	d4 01       	pushm	lr
	irqflags_t flags;
	udd_ep_job_t *ptr_job;
	
	ep &= USB_EP_ADDR_MASK;
8000401e:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004022:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004026:	d3 03       	ssrf	0x10

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
80004028:	e0 6b 10 00 	mov	r11,4096
8000402c:	f6 0a 09 4b 	lsl	r11,r11,r10
80004030:	fe 69 10 00 	mov	r9,-126976
80004034:	93 5b       	st.w	r9[0x14],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004036:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	// Stop transfer
	udd_enable_busy_bank0(ep);
8000403a:	f4 0b 15 02 	lsl	r11,r10,0x2
8000403e:	fe 69 11 f0 	mov	r9,-126480
80004042:	f6 09 00 08 	add	r8,r11,r9
80004046:	fc 19 01 00 	movh	r9,0x100
8000404a:	91 09       	st.w	r8[0x0],r9

	// Job complete then call callback
	ptr_job = &udd_ep_job[ep - 1];
8000404c:	f4 c9 00 01 	sub	r9,r10,1
80004050:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004054:	48 c8       	lddpc	r8,80004084 <udd_ep_abort+0x68>
80004056:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (!ptr_job->busy) {
8000405a:	72 08       	ld.w	r8,r9[0x0]
8000405c:	58 08       	cp.w	r8,0
8000405e:	c1 24       	brge	80004082 <udd_ep_abort+0x66>
		return;
	}
	ptr_job->busy = false;
80004060:	30 0c       	mov	r12,0
80004062:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
80004066:	93 08       	st.w	r9[0x0],r8
	if (NULL != ptr_job->call_trans) {
80004068:	72 48       	ld.w	r8,r9[0x10]
8000406a:	58 08       	cp.w	r8,0
8000406c:	c0 b0       	breq	80004082 <udd_ep_abort+0x66>
		if (Is_udd_endpoint_in(ep)) {
8000406e:	e0 3b ef 00 	sub	r11,126720
80004072:	76 0b       	ld.w	r11,r11[0x0]
80004074:	e2 1b 01 00 	andl	r11,0x100,COH
80004078:	c0 20       	breq	8000407c <udd_ep_abort+0x60>
			ep |= USB_EP_DIR_IN;
8000407a:	a7 ba       	sbr	r10,0x7
		}
		// It can be a Transfer or stall callback
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
8000407c:	72 3b       	ld.w	r11,r9[0xc]
8000407e:	30 1c       	mov	r12,1
80004080:	5d 18       	icall	r8
80004082:	d8 02       	popm	pc
80004084:	00 00       	add	r0,r0
80004086:	08 10       	sub	r0,r4

80004088 <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80004088:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000408a:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
8000408e:	30 39       	mov	r9,3
80004090:	f2 08 18 00 	cp.b	r8,r9
80004094:	e0 88 00 03 	brls	8000409a <udd_ep_set_halt+0x12>
80004098:	d8 0a       	popm	pc,r12=0
		return false;
	}

	// Stall endpoint
	udd_enable_stall_handshake(index);
8000409a:	a3 68       	lsl	r8,0x2
8000409c:	e0 38 ee 10 	sub	r8,126480
800040a0:	e8 69 00 00 	mov	r9,524288
800040a4:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort(ep);
800040a6:	f0 1f 00 02 	mcall	800040ac <udd_ep_set_halt+0x24>
800040aa:	da 0a       	popm	pc,r12=1
800040ac:	80 00       	ld.sh	r0,r0[0x0]
800040ae:	40 1c       	lddsp	r12,sp[0x4]

800040b0 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
800040b0:	eb cd 40 80 	pushm	r7,lr
800040b4:	18 97       	mov	r7,r12
	udd_ep_abort(ep);
800040b6:	f0 1f 00 07 	mcall	800040d0 <udd_ep_free+0x20>
#if( defined UDC_RAM_ACCESS_ERROR_EVENT )
	if( Is_udd_ram_access_error(ep & 0x7F) ){
		UDC_RAM_ACCESS_ERROR_EVENT();
	}
#endif
	udd_disable_endpoint(ep & 0x7F);
800040ba:	fe 68 10 00 	mov	r8,-126976
800040be:	70 79       	ld.w	r9,r8[0x1c]
800040c0:	30 1a       	mov	r10,1
800040c2:	f4 07 09 47 	lsl	r7,r10,r7
800040c6:	5c d7       	com	r7
800040c8:	12 67       	and	r7,r9
800040ca:	91 77       	st.w	r8[0x1c],r7
}
800040cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800040d0:	80 00       	ld.sh	r0,r0[0x0]
800040d2:	40 1c       	lddsp	r12,sp[0x4]

800040d4 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800040d4:	58 0c       	cp.w	r12,0
800040d6:	c1 11       	brne	800040f8 <udd_sleep_mode+0x24>
800040d8:	49 18       	lddpc	r8,8000411c <udd_sleep_mode+0x48>
800040da:	11 89       	ld.ub	r9,r8[0x0]
800040dc:	30 08       	mov	r8,0
800040de:	f0 09 18 00 	cp.b	r9,r8
800040e2:	c1 a0       	breq	80004116 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800040e4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800040e8:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800040ea:	48 e8       	lddpc	r8,80004120 <udd_sleep_mode+0x4c>
800040ec:	11 9a       	ld.ub	r10,r8[0x1]
800040ee:	20 1a       	sub	r10,1
800040f0:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800040f2:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800040f6:	c1 08       	rjmp	80004116 <udd_sleep_mode+0x42>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
800040f8:	48 98       	lddpc	r8,8000411c <udd_sleep_mode+0x48>
800040fa:	11 89       	ld.ub	r9,r8[0x0]
800040fc:	30 08       	mov	r8,0
800040fe:	f0 09 18 00 	cp.b	r9,r8
80004102:	c0 a1       	brne	80004116 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004104:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004108:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000410a:	48 68       	lddpc	r8,80004120 <udd_sleep_mode+0x4c>
8000410c:	11 9a       	ld.ub	r10,r8[0x1]
8000410e:	2f fa       	sub	r10,-1
80004110:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004112:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80004116:	48 28       	lddpc	r8,8000411c <udd_sleep_mode+0x48>
80004118:	b0 8c       	st.b	r8[0x0],r12
}
8000411a:	5e fc       	retal	r12
8000411c:	00 00       	add	r0,r0
8000411e:	08 e0       	st.h	--r4,r0
80004120:	00 00       	add	r0,r0
80004122:	14 c4       	st.b	r10++,r4

80004124 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80004124:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80004126:	fe 68 18 00 	mov	r8,-124928
8000412a:	70 09       	ld.w	r9,r8[0x0]
8000412c:	af c9       	cbr	r9,0xe
8000412e:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80004130:	fe 69 10 00 	mov	r9,-126976
80004134:	72 0a       	ld.w	r10,r9[0x0]
80004136:	a9 aa       	sbr	r10,0x8
80004138:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
8000413a:	70 09       	ld.w	r9,r8[0x0]
8000413c:	af a9       	sbr	r9,0xe
8000413e:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80004140:	30 0c       	mov	r12,0
80004142:	f0 1f 00 02 	mcall	80004148 <udd_detach+0x24>
}
80004146:	d8 02       	popm	pc
80004148:	80 00       	ld.sh	r0,r0[0x0]
8000414a:	40 d4       	lddsp	r4,sp[0x34]

8000414c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
8000414c:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004150:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004154:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80004156:	30 1c       	mov	r12,1
80004158:	f0 1f 00 17 	mcall	800041b4 <udd_attach+0x68>
	otg_unfreeze_clock();
8000415c:	fe 68 18 00 	mov	r8,-124928
80004160:	70 09       	ld.w	r9,r8[0x0]
80004162:	af c9       	cbr	r9,0xe
80004164:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80004166:	fe 68 18 04 	mov	r8,-124924
8000416a:	70 09       	ld.w	r9,r8[0x0]
8000416c:	e2 19 40 00 	andl	r9,0x4000,COH
80004170:	cf d0       	breq	8000416a <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
80004172:	fe 68 10 00 	mov	r8,-126976
80004176:	70 09       	ld.w	r9,r8[0x0]
80004178:	a9 c9       	cbr	r9,0x8
8000417a:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
8000417c:	fe 68 10 18 	mov	r8,-126952
80004180:	30 8c       	mov	r12,8
80004182:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80004184:	30 1a       	mov	r10,1
80004186:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80004188:	31 09       	mov	r9,16
8000418a:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
8000418c:	30 4b       	mov	r11,4
8000418e:	91 0b       	st.w	r8[0x0],r11

	// Reset following interrupts flag
	udd_ack_reset();
80004190:	fe 68 10 08 	mov	r8,-126968
80004194:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
80004196:	91 0b       	st.w	r8[0x0],r11

	// The first suspend interrupt must be forced
	udd_raise_suspend();
80004198:	fe 6b 10 0c 	mov	r11,-126964
8000419c:	97 0a       	st.w	r11[0x0],r10
	udd_ack_wake_up();
8000419e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800041a0:	fe 68 18 00 	mov	r8,-124928
800041a4:	70 09       	ld.w	r9,r8[0x0]
800041a6:	af a9       	sbr	r9,0xe
800041a8:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800041aa:	e3 b7 00 00 	mtsr	0x0,r7
	cpu_irq_restore(flags);
}
800041ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800041b2:	00 00       	add	r0,r0
800041b4:	80 00       	ld.sh	r0,r0[0x0]
800041b6:	40 d4       	lddsp	r4,sp[0x34]

800041b8 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800041b8:	30 39       	mov	r9,3
800041ba:	48 d8       	lddpc	r8,800041ec <udd_ctrl_send_zlp_in+0x34>
800041bc:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
800041be:	48 d8       	lddpc	r8,800041f0 <udd_ctrl_send_zlp_in+0x38>
800041c0:	70 19       	ld.w	r9,r8[0x4]
800041c2:	30 0a       	mov	r10,0
800041c4:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
800041c8:	91 19       	st.w	r8[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800041ca:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800041ce:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800041d0:	fe 6a 11 60 	mov	r10,-126624
800041d4:	30 19       	mov	r9,1
800041d6:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800041d8:	fe 68 11 f0 	mov	r8,-126480
800041dc:	91 09       	st.w	r8[0x0],r9

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800041de:	30 89       	mov	r9,8
800041e0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800041e2:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800041e4:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800041e8:	5e fc       	retal	r12
800041ea:	00 00       	add	r0,r0
800041ec:	00 00       	add	r0,r0
800041ee:	08 e8       	st.h	--r4,r8
800041f0:	00 00       	add	r0,r0
800041f2:	08 60       	and	r0,r4

800041f4 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800041f4:	eb cd 40 e0 	pushm	r5-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800041f8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800041fc:	d3 03       	ssrf	0x10
	static bool b_shortpacket = false;
	uint16_t nb_remain;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800041fe:	30 1a       	mov	r10,1
80004200:	fe 69 12 20 	mov	r9,-126432
80004204:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004206:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000420a:	4b c8       	lddpc	r8,800042f8 <udd_ctrl_in_sent+0x104>
8000420c:	70 08       	ld.w	r8,r8[0x0]
8000420e:	58 38       	cp.w	r8,3
80004210:	c0 71       	brne	8000421e <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80004212:	f0 1f 00 3b 	mcall	800042fc <udd_ctrl_in_sent+0x108>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80004216:	f0 1f 00 3b 	mcall	80004300 <udd_ctrl_in_sent+0x10c>
		return;
8000421a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000421e:	4b a8       	lddpc	r8,80004304 <udd_ctrl_in_sent+0x110>
80004220:	90 08       	ld.sh	r8,r8[0x0]
80004222:	4b a9       	lddpc	r9,80004308 <udd_ctrl_in_sent+0x114>
80004224:	92 67       	ld.sh	r7,r9[0xc]
80004226:	10 17       	sub	r7,r8
80004228:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
8000422a:	c2 d1       	brne	80004284 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000422c:	4b 89       	lddpc	r9,8000430c <udd_ctrl_in_sent+0x118>
8000422e:	92 0a       	ld.sh	r10,r9[0x0]
80004230:	f4 08 00 08 	add	r8,r10,r8
80004234:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80004236:	4b 59       	lddpc	r9,80004308 <udd_ctrl_in_sent+0x114>
80004238:	92 39       	ld.sh	r9,r9[0x6]
8000423a:	f0 09 19 00 	cp.h	r9,r8
8000423e:	c0 70       	breq	8000424c <udd_ctrl_in_sent+0x58>
80004240:	4b 48       	lddpc	r8,80004310 <udd_ctrl_in_sent+0x11c>
80004242:	11 89       	ld.ub	r9,r8[0x0]
80004244:	30 08       	mov	r8,0
80004246:	f0 09 18 00 	cp.b	r9,r8
8000424a:	c1 20       	breq	8000426e <udd_ctrl_in_sent+0x7a>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000424c:	30 49       	mov	r9,4
8000424e:	4a b8       	lddpc	r8,800042f8 <udd_ctrl_in_sent+0x104>
80004250:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004252:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004256:	d3 03       	ssrf	0x10

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80004258:	31 08       	mov	r8,16
8000425a:	fe 6a 11 60 	mov	r10,-126624
8000425e:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80004260:	fe 6a 11 f0 	mov	r10,-126480
80004264:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004266:	e3 b9 00 00 	mtsr	0x0,r9
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
8000426a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000426e:	4a 78       	lddpc	r8,80004308 <udd_ctrl_in_sent+0x114>
80004270:	70 5c       	ld.w	r12,r8[0x14]
80004272:	58 0c       	cp.w	r12,0
80004274:	c1 20       	breq	80004298 <udd_ctrl_in_sent+0xa4>
80004276:	5d 1c       	icall	r12
80004278:	c1 00       	breq	80004298 <udd_ctrl_in_sent+0xa4>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0, this allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000427a:	30 09       	mov	r9,0
8000427c:	4a 28       	lddpc	r8,80004304 <udd_ctrl_in_sent+0x110>
8000427e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80004280:	4a 28       	lddpc	r8,80004308 <udd_ctrl_in_sent+0x114>
80004282:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80004284:	33 f8       	mov	r8,63
80004286:	f0 07 19 00 	cp.h	r7,r8
8000428a:	e0 88 00 07 	brls	80004298 <udd_ctrl_in_sent+0xa4>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
8000428e:	30 09       	mov	r9,0
80004290:	4a 08       	lddpc	r8,80004310 <udd_ctrl_in_sent+0x11c>
80004292:	b0 89       	st.b	r8[0x0],r9
80004294:	34 07       	mov	r7,64
80004296:	c0 48       	rjmp	8000429e <udd_ctrl_in_sent+0xaa>
	} else {
		b_shortpacket = true;
80004298:	30 19       	mov	r9,1
8000429a:	49 e8       	lddpc	r8,80004310 <udd_ctrl_in_sent+0x11c>
8000429c:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000429e:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
800042a2:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800042a4:	fe 68 11 30 	mov	r8,-126672
800042a8:	70 08       	ld.w	r8,r8[0x0]
800042aa:	e2 18 00 02 	andl	r8,0x2,COH
800042ae:	c0 80       	breq	800042be <udd_ctrl_in_sent+0xca>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800042b0:	e3 b5 00 00 	mtsr	0x0,r5
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800042b4:	30 49       	mov	r9,4
800042b6:	49 18       	lddpc	r8,800042f8 <udd_ctrl_in_sent+0x104>
800042b8:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
800042ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}
	// Write quickly the IN data
	memcpy(udd_ctrl_buffer,
800042be:	49 26       	lddpc	r6,80004304 <udd_ctrl_in_sent+0x110>
800042c0:	8c 88       	ld.uh	r8,r6[0x0]
800042c2:	49 29       	lddpc	r9,80004308 <udd_ctrl_in_sent+0x114>
800042c4:	72 2b       	ld.w	r11,r9[0x8]
800042c6:	0e 9a       	mov	r10,r7
800042c8:	5c 7a       	castu.h	r10
800042ca:	10 0b       	add	r11,r8
800042cc:	49 2c       	lddpc	r12,80004314 <udd_ctrl_in_sent+0x120>
800042ce:	f0 1f 00 13 	mcall	80004318 <udd_ctrl_in_sent+0x124>
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
			nb_remain);
	udd_ctrl_payload_nb_trans += nb_remain;
800042d2:	8c 08       	ld.sh	r8,r6[0x0]
800042d4:	0e 08       	add	r8,r7
800042d6:	ac 08       	st.h	r6[0x0],r8
	udd_udesc_set_buf0_ctn(0, nb_remain);
800042d8:	49 18       	lddpc	r8,8000431c <udd_ctrl_in_sent+0x128>
800042da:	70 19       	ld.w	r9,r8[0x4]
800042dc:	f3 d7 d0 0f 	bfins	r9,r7,0x0,0xf
800042e0:	91 19       	st.w	r8[0x4],r9

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800042e2:	30 18       	mov	r8,1
800042e4:	fe 69 11 60 	mov	r9,-126624
800042e8:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800042ea:	fe 69 11 f0 	mov	r9,-126480
800042ee:	93 08       	st.w	r9[0x0],r8
800042f0:	e3 b5 00 00 	mtsr	0x0,r5
#endif
	barrier();
800042f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800042f8:	00 00       	add	r0,r0
800042fa:	08 e8       	st.h	--r4,r8
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	3f 7c       	mov	r12,-9
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	3f 3c       	mov	r12,-13
80004304:	00 00       	add	r0,r0
80004306:	08 e2       	st.h	--r4,r2
80004308:	00 00       	add	r0,r0
8000430a:	11 5c       	ld.sh	r12,--r8
8000430c:	00 00       	add	r0,r0
8000430e:	08 0c       	add	r12,r4
80004310:	00 00       	add	r0,r0
80004312:	08 e4       	st.h	--r4,r4
80004314:	00 00       	add	r0,r0
80004316:	11 74       	ld.ub	r4,--r8
80004318:	80 00       	ld.sh	r0,r0[0x0]
8000431a:	9f 52       	st.w	pc[0x14],r2
8000431c:	00 00       	add	r0,r0
8000431e:	08 60       	and	r0,r4

80004320 <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80004320:	d4 31       	pushm	r0-r7,lr
80004322:	20 2d       	sub	sp,8
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
80004324:	ed dc c0 04 	bfextu	r6,r12,0x0,0x4
	ep_size = udd_get_endpoint_size(ep_num);
80004328:	ec 08 15 02 	lsl	r8,r6,0x2
8000432c:	fe 6e 11 00 	mov	lr,-126720
80004330:	f0 0e 00 04 	add	r4,r8,lr
80004334:	68 00       	ld.w	r0,r4[0x0]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
80004336:	ec c5 00 01 	sub	r5,r6,1
8000433a:	ea 05 00 27 	add	r7,r5,r5<<0x2
8000433e:	fe f9 02 d6 	ld.w	r9,pc[726]
80004342:	f2 07 00 27 	add	r7,r9,r7<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004346:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000434a:	d3 03       	ssrf	0x10

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
8000434c:	0c 99       	mov	r9,r6
8000434e:	e0 63 10 00 	mov	r3,4096
80004352:	e6 06 09 43 	lsl	r3,r3,r6
80004356:	fe 6b 10 00 	mov	r11,-126976
8000435a:	97 53       	st.w	r11[0x14],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000435c:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
80004360:	6e 0a       	ld.w	r10,r7[0x0]
80004362:	58 0a       	cp.w	r10,0
80004364:	e0 84 01 55 	brge	8000460e <udd_ep_trans_done+0x2ee>
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	ep_size = udd_get_endpoint_size(ep_num);
80004368:	e1 d0 c0 83 	bfextu	r0,r0,0x4,0x3
8000436c:	30 8a       	mov	r10,8
8000436e:	f4 00 09 40 	lsl	r0,r10,r0
80004372:	5c 80       	casts.h	r0

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
80004374:	30 0a       	mov	r10,0
80004376:	f4 0c 18 00 	cp.b	r12,r10
8000437a:	e0 84 00 92 	brge	8000449e <udd_ep_trans_done+0x17e>
		// Transfer complete on IN
		nb_trans = udd_udesc_get_buf0_size(ep_num);
8000437e:	ec 0a 15 01 	lsl	r10,r6,0x1
80004382:	a3 79       	lsl	r9,0x3
80004384:	2f f9       	sub	r9,-1
80004386:	fe fb 02 92 	ld.w	r11,pc[658]
8000438a:	f6 09 03 29 	ld.w	r9,r11[r9<<0x2]
8000438e:	f3 d9 c2 0f 	bfextu	r9,r9,0x10,0xf

		// Lock emission of new IN packet
		udd_enable_busy_bank0(ep_num);
80004392:	fe 6c 11 f0 	mov	r12,-126480
80004396:	f0 0c 00 0b 	add	r11,r8,r12
8000439a:	fc 1c 01 00 	movh	r12,0x100
8000439e:	97 0c       	st.w	r11[0x0],r12

		// Ack interrupt
		udd_ack_in_send(ep_num);
800043a0:	fe 6e 11 60 	mov	lr,-126624
800043a4:	f0 0e 00 0c 	add	r12,r8,lr
800043a8:	30 15       	mov	r5,1
800043aa:	99 05       	st.w	r12[0x0],r5
		udd_ack_fifocon(ep_num);
800043ac:	fe 6e 12 20 	mov	lr,-126432
800043b0:	f0 0e 00 0c 	add	r12,r8,lr
800043b4:	e0 65 40 00 	mov	r5,16384
800043b8:	99 05       	st.w	r12[0x0],r5

		if (0 == nb_trans) {
800043ba:	58 09       	cp.w	r9,0
800043bc:	c1 01       	brne	800043dc <udd_ep_trans_done+0xbc>
			if (0 == udd_nb_busy_bank(ep_num)) {
800043be:	e0 38 ee d0 	sub	r8,126672
800043c2:	70 08       	ld.w	r8,r8[0x0]
800043c4:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
800043c8:	c0 a1       	brne	800043dc <udd_ep_trans_done+0xbc>
				// All byte are transfered than take nb byte requested
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
800043ca:	f4 09 15 02 	lsl	r9,r10,0x2
800043ce:	2f f9       	sub	r9,-1
800043d0:	fe f8 02 48 	ld.w	r8,pc[584]
800043d4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800043d8:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
			}
		}
		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
800043dc:	6e 38       	ld.w	r8,r7[0xc]
800043de:	10 09       	add	r9,r8
800043e0:	8f 39       	st.w	r7[0xc],r9

		// Need to send other data
		if ((ptr_job->nb_trans != ptr_job->buf_size)
800043e2:	6e 28       	ld.w	r8,r7[0x8]
800043e4:	10 39       	cp.w	r9,r8
800043e6:	c0 61       	brne	800043f2 <udd_ep_trans_done+0xd2>
				|| ptr_job->b_shortpacket) {
800043e8:	6e 05       	ld.w	r5,r7[0x0]
800043ea:	e6 15 40 00 	andh	r5,0x4000,COH
800043ee:	e0 80 00 ff 	breq	800045ec <udd_ep_trans_done+0x2cc>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800043f2:	f0 09 01 09 	sub	r9,r8,r9
800043f6:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
800043fa:	30 08       	mov	r8,0
800043fc:	f0 06 19 00 	cp.h	r6,r8
80004400:	c1 84       	brge	80004430 <udd_ep_trans_done+0x110>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
80004402:	f3 d0 c0 10 	bfextu	r9,r0,0x0,0x10
80004406:	e0 68 7f ff 	mov	r8,32767
8000440a:	f0 09 0c 08 	divs	r8,r8,r9
8000440e:	e0 66 7f ff 	mov	r6,32767
80004412:	12 16       	sub	r6,r9
80004414:	5c 86       	casts.h	r6
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
				udd_udesc_set_buf0_autozlp(ep_num, false);
80004416:	fe f8 02 02 	ld.w	r8,pc[514]
8000441a:	f4 09 15 02 	lsl	r9,r10,0x2
8000441e:	2f f9       	sub	r9,-1
80004420:	f0 09 03 25 	ld.w	r5,r8[r9<<0x2]
80004424:	30 04       	mov	r4,0
80004426:	eb d4 d3 e1 	bfins	r5,r4,0x1f,0x1
8000442a:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000442e:	c1 28       	rjmp	80004452 <udd_ep_trans_done+0x132>
			} else {
				// Need ZLP, if requested and last packet is not a short packet
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
80004430:	6e 08       	ld.w	r8,r7[0x0]
80004432:	e5 d8 c3 c1 	bfextu	r2,r8,0x1e,0x1
80004436:	4f 99       	lddpc	r9,80004618 <udd_ep_trans_done+0x2f8>
80004438:	f4 05 15 02 	lsl	r5,r10,0x2
8000443c:	2f f5       	sub	r5,-1
8000443e:	f2 05 03 24 	ld.w	r4,r9[r5<<0x2]
80004442:	e9 d2 d3 e1 	bfins	r4,r2,0x1f,0x1
80004446:	f2 05 09 24 	st.w	r9[r5<<0x2],r4
				ptr_job->b_shortpacket = false; // No need to request another ZLP
8000444a:	30 09       	mov	r9,0
8000444c:	f1 d9 d3 c1 	bfins	r8,r9,0x1e,0x1
80004450:	8f 08       	st.w	r7[0x0],r8
			}

			udd_udesc_set_buf0_ctn(ep_num, next_trans);
80004452:	4f 28       	lddpc	r8,80004618 <udd_ep_trans_done+0x2f8>
80004454:	f4 09 15 02 	lsl	r9,r10,0x2
80004458:	2f f9       	sub	r9,-1
8000445a:	f0 09 03 25 	ld.w	r5,r8[r9<<0x2]
8000445e:	eb d6 d0 0f 	bfins	r5,r6,0x0,0xf
80004462:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
			udd_udesc_rst_buf0_size(ep_num);
80004466:	f0 09 03 26 	ld.w	r6,r8[r9<<0x2]
8000446a:	30 05       	mov	r5,0
8000446c:	ed d5 d2 0f 	bfins	r6,r5,0x10,0xf
80004470:	f0 09 09 26 	st.w	r8[r9<<0x2],r6

			// Link the user buffer directly on USB hardware DMA
			udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
80004474:	6e 16       	ld.w	r6,r7[0x4]
80004476:	6e 39       	ld.w	r9,r7[0xc]
80004478:	ec 09 00 09 	add	r9,r6,r9
8000447c:	a5 6a       	lsl	r10,0x4
8000447e:	14 08       	add	r8,r10
80004480:	91 09       	st.w	r8[0x0],r9

			// Start transfer
			udd_disable_busy_bank0(ep_num);
80004482:	fc 18 01 00 	movh	r8,0x100
80004486:	99 08       	st.w	r12[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004488:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000448c:	d3 03       	ssrf	0x10

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_in_send_interrupt(ep_num);
8000448e:	30 19       	mov	r9,1
80004490:	97 09       	st.w	r11[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
80004492:	fe 69 10 00 	mov	r9,-126976
80004496:	93 63       	st.w	r9[0x18],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004498:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
8000449c:	cb 98       	rjmp	8000460e <udd_ep_trans_done+0x2ee>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
8000449e:	ec 01 15 01 	lsl	r1,r6,0x1
800044a2:	a3 79       	lsl	r9,0x3
800044a4:	2f f9       	sub	r9,-1
800044a6:	4d da       	lddpc	r10,80004618 <udd_ep_trans_done+0x2f8>
800044a8:	f4 09 03 22 	ld.w	r2,r10[r9<<0x2]
800044ac:	e5 d2 c0 0f 	bfextu	r2,r2,0x0,0xf

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
800044b0:	fe 6c 11 f0 	mov	r12,-126480
800044b4:	f0 0c 00 0c 	add	r12,r8,r12
800044b8:	50 1c       	stdsp	sp[0x4],r12
800044ba:	fc 19 01 00 	movh	r9,0x100
800044be:	99 09       	st.w	r12[0x0],r9

		// Ack interrupt
		udd_ack_out_received(ep_num);
800044c0:	fe 6a 11 60 	mov	r10,-126624
800044c4:	f0 0a 00 09 	add	r9,r8,r10
800044c8:	30 2a       	mov	r10,2
800044ca:	93 0a       	st.w	r9[0x0],r10
		udd_ack_fifocon(ep_num);
800044cc:	e0 38 ed e0 	sub	r8,126432
800044d0:	50 08       	stdsp	sp[0x0],r8
800044d2:	e0 68 40 00 	mov	r8,16384
800044d6:	40 09       	lddsp	r9,sp[0x0]
800044d8:	93 08       	st.w	r9[0x0],r8

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
800044da:	6e 08       	ld.w	r8,r7[0x0]
800044dc:	e6 18 20 00 	andh	r8,0x2000,COH
800044e0:	c1 00       	breq	80004500 <udd_ep_trans_done+0x1e0>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
800044e2:	6e 1c       	ld.w	r12,r7[0x4]
800044e4:	6e 39       	ld.w	r9,r7[0xc]
800044e6:	f7 d0 c0 10 	bfextu	r11,r0,0x0,0x10
800044ea:	6e 28       	ld.w	r8,r7[0x8]
800044ec:	f0 0b 0d 0a 	divu	r10,r8,r11
800044f0:	ea 08 15 06 	lsl	r8,r5,0x6
800044f4:	16 9a       	mov	r10,r11
800044f6:	4c ab       	lddpc	r11,8000461c <udd_ep_trans_done+0x2fc>
800044f8:	10 0b       	add	r11,r8
800044fa:	12 0c       	add	r12,r9
800044fc:	f0 1f 00 49 	mcall	80004620 <udd_ep_trans_done+0x300>
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
80004500:	6e 38       	ld.w	r8,r7[0xc]
80004502:	e4 08 00 08 	add	r8,r2,r8
80004506:	8f 38       	st.w	r7[0xc],r8
		if (ptr_job->nb_trans > ptr_job->buf_size) {
80004508:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
8000450a:	12 38       	cp.w	r8,r9
8000450c:	ef f9 ba 03 	st.whi	r7[0xc],r9
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
80004510:	e2 09 15 02 	lsl	r9,r1,0x2
80004514:	2f f9       	sub	r9,-1
80004516:	4c 18       	lddpc	r8,80004618 <udd_ep_trans_done+0x2f8>
80004518:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000451c:	f1 d8 c2 0f 	bfextu	r8,r8,0x10,0xf
80004520:	e4 08 19 00 	cp.h	r8,r2
80004524:	c6 41       	brne	800045ec <udd_ep_trans_done+0x2cc>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
80004526:	6e 38       	ld.w	r8,r7[0xc]
80004528:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
8000452a:	12 38       	cp.w	r8,r9
8000452c:	c6 00       	breq	800045ec <udd_ep_trans_done+0x2cc>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000452e:	f2 08 01 08 	sub	r8,r9,r8
80004532:	5c 88       	casts.h	r8
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80004534:	30 09       	mov	r9,0
80004536:	f2 08 19 00 	cp.h	r8,r9
8000453a:	c0 c4       	brge	80004552 <udd_ep_trans_done+0x232>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
8000453c:	f3 d0 c0 10 	bfextu	r9,r0,0x0,0x10
80004540:	e0 68 7f ff 	mov	r8,32767
80004544:	f0 09 0c 08 	divs	r8,r8,r9
80004548:	e0 68 7f ff 	mov	r8,32767
8000454c:	12 18       	sub	r8,r9
8000454e:	5c 88       	casts.h	r8
80004550:	c0 98       	rjmp	80004562 <udd_ep_trans_done+0x242>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
80004552:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004556:	f7 d0 c0 10 	bfextu	r11,r0,0x0,0x10
8000455a:	f2 0b 0d 0a 	divu	r10,r9,r11
8000455e:	16 18       	sub	r8,r11
80004560:	5c 88       	casts.h	r8
			}

			udd_udesc_rst_buf0_ctn(ep_num);
80004562:	4a e9       	lddpc	r9,80004618 <udd_ep_trans_done+0x2f8>
80004564:	e2 0a 15 02 	lsl	r10,r1,0x2
80004568:	2f fa       	sub	r10,-1
8000456a:	f2 0a 03 2b 	ld.w	r11,r9[r10<<0x2]
8000456e:	30 0c       	mov	r12,0
80004570:	f7 dc d0 0f 	bfins	r11,r12,0x0,0xf
80004574:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
			if (next_trans < ep_size) {
80004578:	e0 08 19 00 	cp.h	r8,r0
8000457c:	c1 72       	brcc	800045aa <udd_ep_trans_done+0x28a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
8000457e:	6e 08       	ld.w	r8,r7[0x0]
80004580:	30 19       	mov	r9,1
80004582:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80004586:	8f 08       	st.w	r7[0x0],r8
				udd_udesc_set_buf0_addr(ep_num,
80004588:	a7 65       	lsl	r5,0x6
8000458a:	4a 58       	lddpc	r8,8000461c <udd_ep_trans_done+0x2fc>
8000458c:	10 05       	add	r5,r8
8000458e:	4a 38       	lddpc	r8,80004618 <udd_ep_trans_done+0x2f8>
80004590:	e2 09 15 04 	lsl	r9,r1,0x4
80004594:	f0 09 00 09 	add	r9,r8,r9
80004598:	93 05       	st.w	r9[0x0],r5
						udd_ep_out_cache_buffer[ep_num-1]);
				udd_udesc_set_buf0_size(ep_num, ep_size);
8000459a:	14 91       	mov	r1,r10
8000459c:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
800045a0:	f3 d0 d2 0f 	bfins	r9,r0,0x10,0xf
800045a4:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9
800045a8:	c1 28       	rjmp	800045cc <udd_ep_trans_done+0x2ac>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
800045aa:	6e 1b       	ld.w	r11,r7[0x4]
800045ac:	6e 39       	ld.w	r9,r7[0xc]
800045ae:	12 0b       	add	r11,r9
800045b0:	49 a9       	lddpc	r9,80004618 <udd_ep_trans_done+0x2f8>
800045b2:	e2 0a 15 04 	lsl	r10,r1,0x4
800045b6:	f2 0a 00 0a 	add	r10,r9,r10
800045ba:	95 0b       	st.w	r10[0x0],r11
				udd_udesc_set_buf0_size(ep_num, next_trans);
800045bc:	a3 61       	lsl	r1,0x2
800045be:	2f f1       	sub	r1,-1
800045c0:	f2 01 03 2a 	ld.w	r10,r9[r1<<0x2]
800045c4:	f5 d8 d2 0f 	bfins	r10,r8,0x10,0xf
800045c8:	f2 01 09 2a 	st.w	r9[r1<<0x2],r10
			}
			// Start transfer
			udd_disable_busy_bank0(ep_num);
800045cc:	fc 18 01 00 	movh	r8,0x100
800045d0:	40 0e       	lddsp	lr,sp[0x0]
800045d2:	9d 08       	st.w	lr[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800045d4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800045d8:	d3 03       	ssrf	0x10

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_out_received_interrupt(ep_num);
800045da:	30 29       	mov	r9,2
800045dc:	40 1c       	lddsp	r12,sp[0x4]
800045de:	99 09       	st.w	r12[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
800045e0:	fe 69 10 00 	mov	r9,-126976
800045e4:	93 63       	st.w	r9[0x18],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800045e6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800045ea:	c1 28       	rjmp	8000460e <udd_ep_trans_done+0x2ee>
			return;
		}
	}

	// Job complete then call callback
	ptr_job->busy = false;
800045ec:	6e 08       	ld.w	r8,r7[0x0]
800045ee:	30 09       	mov	r9,0
800045f0:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
800045f4:	8f 08       	st.w	r7[0x0],r8
	if (NULL != ptr_job->call_trans) {
800045f6:	6e 48       	ld.w	r8,r7[0x10]
800045f8:	58 08       	cp.w	r8,0
800045fa:	c0 a0       	breq	8000460e <udd_ep_trans_done+0x2ee>
		if (Is_udd_endpoint_in(ep_num)) {
800045fc:	68 09       	ld.w	r9,r4[0x0]
800045fe:	e2 19 01 00 	andl	r9,0x100,COH
80004602:	c0 20       	breq	80004606 <udd_ep_trans_done+0x2e6>
			ep_num |= USB_EP_DIR_IN;
80004604:	a7 b6       	sbr	r6,0x7
		}
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep_num);
80004606:	0c 9a       	mov	r10,r6
80004608:	6e 3b       	ld.w	r11,r7[0xc]
8000460a:	30 0c       	mov	r12,0
8000460c:	5d 18       	icall	r8
	}
	return;
}
8000460e:	2f ed       	sub	sp,-8
80004610:	d8 32       	popm	r0-r7,pc
80004612:	00 00       	add	r0,r0
80004614:	00 00       	add	r0,r0
80004616:	08 10       	sub	r0,r4
80004618:	00 00       	add	r0,r0
8000461a:	08 60       	and	r0,r4
8000461c:	00 00       	add	r0,r0
8000461e:	10 9c       	mov	r12,r8
80004620:	80 00       	ld.sh	r0,r0[0x0]
80004622:	9f 52       	st.w	pc[0x14],r2

80004624 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80004624:	eb cd 40 f8 	pushm	r3-r7,lr
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
80004628:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep_num) {
8000462c:	30 37       	mov	r7,3
8000462e:	ee 0e 18 00 	cp.b	lr,r7
80004632:	e0 8b 00 66 	brhi	800046fe <udd_ep_run+0xda>
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80004636:	fe 67 10 00 	mov	r7,-126976
8000463a:	6e 76       	ld.w	r6,r7[0x1c]
8000463c:	1c 95       	mov	r5,lr
8000463e:	30 17       	mov	r7,1
80004640:	ee 0e 09 47 	lsl	r7,r7,lr
80004644:	0c 67       	and	r7,r6
80004646:	c5 c0       	breq	800046fe <udd_ep_run+0xda>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
80004648:	fc 07 15 02 	lsl	r7,lr,0x2
8000464c:	fe 64 11 c0 	mov	r4,-126528
80004650:	ee 04 00 06 	add	r6,r7,r4
80004654:	6c 06       	ld.w	r6,r6[0x0]

	ep_num = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_num) {
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80004656:	e6 16 00 08 	andh	r6,0x8,COH
8000465a:	c5 21       	brne	800046fe <udd_ep_run+0xda>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
		return false; // Endpoint is halted
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
8000465c:	20 1e       	sub	lr,1
8000465e:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80004662:	4a 96       	lddpc	r6,80004704 <udd_ep_run+0xe0>
80004664:	ec 0e 00 2e 	add	lr,r6,lr<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004668:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
8000466c:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000466e:	7c 06       	ld.w	r6,lr[0x0]
80004670:	58 06       	cp.w	r6,0
80004672:	c0 54       	brge	8000467c <udd_ep_run+0x58>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004674:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
80004678:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
8000467c:	7c 06       	ld.w	r6,lr[0x0]
8000467e:	30 13       	mov	r3,1
80004680:	ed d3 d3 e1 	bfins	r6,r3,0x1f,0x1
80004684:	9d 06       	st.w	lr[0x0],r6
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004686:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000468a:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
8000468c:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
8000468e:	30 0a       	mov	r10,0
80004690:	9d 3a       	st.w	lr[0xc],r10
	ptr_job->call_trans = callback;
80004692:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80004694:	7c 08       	ld.w	r8,lr[0x0]
80004696:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
	ptr_job->b_use_out_cache_buffer = false;
8000469a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000469e:	9d 08       	st.w	lr[0x0],r8

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
800046a0:	f4 0c 18 00 	cp.b	r12,r10
800046a4:	c1 95       	brlt	800046d6 <udd_ep_run+0xb2>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
800046a6:	e0 37 ef 00 	sub	r7,126720
800046aa:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
800046ac:	f1 d8 c1 62 	bfextu	r8,r8,0xb,0x2
800046b0:	06 38       	cp.w	r8,r3
800046b2:	c1 21       	brne	800046d6 <udd_ep_run+0xb2>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
800046b4:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
800046b6:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
800046ba:	30 8a       	mov	r10,8
800046bc:	f4 08 09 48 	lsl	r8,r10,r8
800046c0:	20 18       	sub	r8,1
800046c2:	f1 e9 00 09 	and	r9,r8,r9
800046c6:	c0 80       	breq	800046d6 <udd_ep_run+0xb2>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
		// The user must use a buffer size modulo endpoint size
		// for an isochronous IN endpoint
		ptr_job->busy = false;
800046c8:	7c 08       	ld.w	r8,lr[0x0]
800046ca:	30 0c       	mov	r12,0
800046cc:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
800046d0:	9d 08       	st.w	lr[0x0],r8
		return false;
800046d2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	}

	// Initialize value to simulate a empty transfer
	udd_udesc_rst_buf0_ctn(ep_num);
800046d6:	48 d8       	lddpc	r8,80004708 <udd_ep_run+0xe4>
800046d8:	a3 75       	lsl	r5,0x3
800046da:	2f f5       	sub	r5,-1
800046dc:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
800046e0:	30 0a       	mov	r10,0
800046e2:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
800046e6:	f0 05 09 29 	st.w	r8[r5<<0x2],r9
	udd_udesc_rst_buf0_size(ep_num);
800046ea:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
800046ee:	f3 da d2 0f 	bfins	r9,r10,0x10,0xf
800046f2:	f0 05 09 29 	st.w	r8[r5<<0x2],r9

	// Request next transfer
	udd_ep_trans_done(ep);
800046f6:	f0 1f 00 06 	mcall	8000470c <udd_ep_run+0xe8>
800046fa:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
	return true;
800046fe:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80004702:	00 00       	add	r0,r0
80004704:	00 00       	add	r0,r0
80004706:	08 10       	sub	r0,r4
80004708:	00 00       	add	r0,r0
8000470a:	08 60       	and	r0,r4
8000470c:	80 00       	ld.sh	r0,r0[0x0]
8000470e:	43 20       	lddsp	r0,sp[0xc8]

80004710 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80004710:	eb cd 40 80 	pushm	r7,lr
	if (Is_udd_sof()) {
80004714:	fe 68 10 04 	mov	r8,-126972
80004718:	70 08       	ld.w	r8,r8[0x0]
8000471a:	e2 18 00 04 	andl	r8,0x4,COH
8000471e:	c0 90       	breq	80004730 <udd_interrupt+0x20>
		udd_ack_sof();
80004720:	30 49       	mov	r9,4
80004722:	fe 68 10 08 	mov	r8,-126968
80004726:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80004728:	f0 1f 01 23 	mcall	80004bb4 <udd_interrupt+0x4a4>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
8000472c:	e0 8f 02 35 	bral	80004b96 <udd_interrupt+0x486>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
80004730:	fe 68 10 00 	mov	r8,-126976
80004734:	70 18       	ld.w	r8,r8[0x4]
80004736:	e2 18 10 00 	andl	r8,0x1000,COH
8000473a:	e0 80 01 6c 	breq	80004a12 <udd_interrupt+0x302>
		return false; // No interrupt events on control endpoint
	}

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000473e:	fe 68 12 20 	mov	r8,-126432
80004742:	31 09       	mov	r9,16
80004744:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80004746:	30 89       	mov	r9,8
80004748:	91 09       	st.w	r8[0x0],r9

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000474a:	fe 68 11 30 	mov	r8,-126672
8000474e:	70 08       	ld.w	r8,r8[0x0]
80004750:	e2 18 00 04 	andl	r8,0x4,COH
80004754:	c7 30       	breq	8000483a <udd_interrupt+0x12a>

static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80004756:	fe f8 04 62 	ld.w	r8,pc[1122]
8000475a:	70 08       	ld.w	r8,r8[0x0]
8000475c:	58 08       	cp.w	r8,0
8000475e:	c0 50       	breq	80004768 <udd_interrupt+0x58>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80004760:	f0 1f 01 17 	mcall	80004bbc <udd_interrupt+0x4ac>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80004764:	f0 1f 01 17 	mcall	80004bc0 <udd_interrupt+0x4b0>
	}
	// Fill setup request structure
	if (8 != udd_udesc_get_buf0_ctn(0)) {
80004768:	fe f8 04 5c 	ld.w	r8,pc[1116]
8000476c:	70 18       	ld.w	r8,r8[0x4]
8000476e:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80004772:	58 88       	cp.w	r8,8
80004774:	c0 90       	breq	80004786 <udd_interrupt+0x76>
		udd_ctrl_stall_data();
80004776:	f0 1f 01 15 	mcall	80004bc8 <udd_interrupt+0x4b8>
		udd_ack_setup_received(0);
8000477a:	30 49       	mov	r9,4
8000477c:	fe 68 11 60 	mov	r8,-126624
80004780:	91 09       	st.w	r8[0x0],r9
80004782:	e0 8f 02 0a 	bral	80004b96 <udd_interrupt+0x486>
		return; // Error data number doesn't correspond to SETUP packet
	}
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
80004786:	fe f7 04 46 	ld.w	r7,pc[1094]
8000478a:	30 8a       	mov	r10,8
8000478c:	fe fb 04 44 	ld.w	r11,pc[1092]
80004790:	0e 9c       	mov	r12,r7
80004792:	f0 1f 01 11 	mcall	80004bd4 <udd_interrupt+0x4c4>

	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80004796:	8e 18       	ld.sh	r8,r7[0x2]
80004798:	5c c8       	swap.bh	r8
8000479a:	ae 18       	st.h	r7[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000479c:	8e 28       	ld.sh	r8,r7[0x4]
8000479e:	5c c8       	swap.bh	r8
800047a0:	ae 28       	st.h	r7[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
800047a2:	8e 38       	ld.sh	r8,r7[0x6]
800047a4:	5c c8       	swap.bh	r8
800047a6:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
800047a8:	f0 1f 01 0c 	mcall	80004bd8 <udd_interrupt+0x4c8>
800047ac:	c0 91       	brne	800047be <udd_interrupt+0xae>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
800047ae:	f0 1f 01 07 	mcall	80004bc8 <udd_interrupt+0x4b8>
		udd_ack_setup_received(0);
800047b2:	30 49       	mov	r9,4
800047b4:	fe 68 11 60 	mov	r8,-126624
800047b8:	91 09       	st.w	r8[0x0],r9
800047ba:	e0 8f 01 ee 	bral	80004b96 <udd_interrupt+0x486>
		return;
	}
	udd_ack_setup_received(0);
800047be:	30 49       	mov	r9,4
800047c0:	fe 68 11 60 	mov	r8,-126624
800047c4:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800047c6:	fe f8 04 06 	ld.w	r8,pc[1030]
800047ca:	11 89       	ld.ub	r9,r8[0x0]
800047cc:	30 08       	mov	r8,0
800047ce:	f0 09 18 00 	cp.b	r9,r8
800047d2:	c1 04       	brge	800047f2 <udd_interrupt+0xe2>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800047d4:	30 08       	mov	r8,0
800047d6:	fe f9 04 06 	ld.w	r9,pc[1030]
800047da:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800047dc:	fe f9 04 04 	ld.w	r9,pc[1028]
800047e0:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800047e2:	30 29       	mov	r9,2
800047e4:	fe f8 03 d4 	ld.w	r8,pc[980]
800047e8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800047ea:	f0 1f 00 ff 	mcall	80004be4 <udd_interrupt+0x4d4>
800047ee:	e0 8f 01 d4 	bral	80004b96 <udd_interrupt+0x486>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800047f2:	fe f8 03 da 	ld.w	r8,pc[986]
800047f6:	90 39       	ld.sh	r9,r8[0x6]
800047f8:	30 08       	mov	r8,0
800047fa:	f0 09 19 00 	cp.h	r9,r8
800047fe:	c0 51       	brne	80004808 <udd_interrupt+0xf8>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80004800:	f0 1f 00 fa 	mcall	80004be8 <udd_interrupt+0x4d8>
80004804:	e0 8f 01 c9 	bral	80004b96 <udd_interrupt+0x486>
			return;
		}

		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80004808:	30 08       	mov	r8,0
8000480a:	fe f9 03 d2 	ld.w	r9,pc[978]
8000480e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80004810:	fe f9 03 d0 	ld.w	r9,pc[976]
80004814:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80004816:	30 19       	mov	r9,1
80004818:	fe f8 03 a0 	ld.w	r8,pc[928]
8000481c:	91 09       	st.w	r8[0x0],r9

		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000481e:	31 08       	mov	r8,16
80004820:	fe 69 11 60 	mov	r9,-126624
80004824:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004826:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000482a:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
8000482c:	fe 6a 11 f0 	mov	r10,-126480
80004830:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004832:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80004836:	e0 8f 01 b0 	bral	80004b96 <udd_interrupt+0x486>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_out_received(0)) {
8000483a:	fe 68 11 30 	mov	r8,-126672
8000483e:	70 08       	ld.w	r8,r8[0x0]
80004840:	e2 18 00 02 	andl	r8,0x2,COH
80004844:	e0 80 00 9a 	breq	80004978 <udd_interrupt+0x268>
static void udd_ctrl_out_received(void)
{
	irqflags_t flags;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80004848:	fe f8 03 70 	ld.w	r8,pc[880]
8000484c:	70 08       	ld.w	r8,r8[0x0]
8000484e:	58 18       	cp.w	r8,1
80004850:	c1 10       	breq	80004872 <udd_interrupt+0x162>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
80004852:	58 28       	cp.w	r8,2
80004854:	5f 09       	sreq	r9
80004856:	58 48       	cp.w	r8,4
80004858:	5f 08       	sreq	r8
8000485a:	f3 e8 10 08 	or	r8,r9,r8
8000485e:	c0 40       	breq	80004866 <udd_interrupt+0x156>
				(UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80004860:	f0 1f 00 d7 	mcall	80004bbc <udd_interrupt+0x4ac>
80004864:	c0 38       	rjmp	8000486a <udd_interrupt+0x15a>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80004866:	f0 1f 00 d9 	mcall	80004bc8 <udd_interrupt+0x4b8>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000486a:	f0 1f 00 d6 	mcall	80004bc0 <udd_interrupt+0x4b0>
8000486e:	e0 8f 01 94 	bral	80004b96 <udd_interrupt+0x486>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_udesc_get_buf0_ctn(0);
80004872:	fe f8 03 52 	ld.w	r8,pc[850]
80004876:	70 17       	ld.w	r7,r8[0x4]
80004878:	ef d7 c0 0f 	bfextu	r7,r7,0x0,0xf
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000487c:	fe f8 03 50 	ld.w	r8,pc[848]
80004880:	90 69       	ld.sh	r9,r8[0xc]
80004882:	fe f8 03 5e 	ld.w	r8,pc[862]
80004886:	90 08       	ld.sh	r8,r8[0x0]
80004888:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000488c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80004890:	ee 0a 00 0a 	add	r10,r7,r10
80004894:	14 3b       	cp.w	r11,r10
80004896:	c0 44       	brge	8000489e <udd_interrupt+0x18e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80004898:	10 19       	sub	r9,r8
8000489a:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
8000489e:	5c 78       	castu.h	r8
800048a0:	fe f9 03 2c 	ld.w	r9,pc[812]
800048a4:	72 2c       	ld.w	r12,r9[0x8]
800048a6:	0e 9a       	mov	r10,r7
800048a8:	5c 7a       	castu.h	r10
800048aa:	fe fb 03 26 	ld.w	r11,pc[806]
800048ae:	10 0c       	add	r12,r8
800048b0:	f0 1f 00 c9 	mcall	80004bd4 <udd_interrupt+0x4c4>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
800048b4:	fe f9 03 2c 	ld.w	r9,pc[812]
800048b8:	92 08       	ld.sh	r8,r9[0x0]
800048ba:	0e 08       	add	r8,r7
800048bc:	5c 88       	casts.h	r8
800048be:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
800048c0:	34 09       	mov	r9,64
800048c2:	f2 07 19 00 	cp.h	r7,r9
800048c6:	c0 e1       	brne	800048e2 <udd_interrupt+0x1d2>
800048c8:	fe f9 03 04 	ld.w	r9,pc[772]
800048cc:	92 ba       	ld.uh	r10,r9[0x6]
800048ce:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800048d2:	fe f9 03 0a 	ld.w	r9,pc[778]
800048d6:	92 89       	ld.uh	r9,r9[0x0]
800048d8:	f6 09 00 09 	add	r9,r11,r9
800048dc:	12 3a       	cp.w	r10,r9
800048de:	e0 89 00 18 	brgt	8000490e <udd_interrupt+0x1fe>
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800048e2:	fe f9 02 ea 	ld.w	r9,pc[746]
800048e6:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800048e8:	72 5c       	ld.w	r12,r9[0x14]
800048ea:	58 0c       	cp.w	r12,0
800048ec:	c0 a0       	breq	80004900 <udd_interrupt+0x1f0>
			if (!udd_g_ctrlreq.over_under_run()) {
800048ee:	5d 1c       	icall	r12
800048f0:	c0 81       	brne	80004900 <udd_interrupt+0x1f0>
				// Stall ZLP
				udd_ctrl_stall_data();
800048f2:	f0 1f 00 b6 	mcall	80004bc8 <udd_interrupt+0x4b8>

				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
800048f6:	30 29       	mov	r9,2
800048f8:	fe 68 11 60 	mov	r8,-126624
800048fc:	91 09       	st.w	r8[0x0],r9
800048fe:	c4 c9       	rjmp	80004b96 <udd_interrupt+0x486>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80004900:	30 29       	mov	r9,2
80004902:	fe 68 11 60 	mov	r8,-126624
80004906:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80004908:	f0 1f 00 b8 	mcall	80004be8 <udd_interrupt+0x4d8>
8000490c:	c4 59       	rjmp	80004b96 <udd_interrupt+0x486>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000490e:	fe f9 02 be 	ld.w	r9,pc[702]
80004912:	92 69       	ld.sh	r9,r9[0xc]
80004914:	f0 09 19 00 	cp.h	r9,r8
80004918:	c2 11       	brne	8000495a <udd_interrupt+0x24a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000491a:	fe f8 02 b2 	ld.w	r8,pc[690]
8000491e:	70 5c       	ld.w	r12,r8[0x14]
80004920:	58 0c       	cp.w	r12,0
80004922:	c0 81       	brne	80004932 <udd_interrupt+0x222>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80004924:	f0 1f 00 a9 	mcall	80004bc8 <udd_interrupt+0x4b8>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80004928:	30 29       	mov	r9,2
8000492a:	fe 68 11 60 	mov	r8,-126624
8000492e:	91 09       	st.w	r8[0x0],r9
80004930:	c3 39       	rjmp	80004b96 <udd_interrupt+0x486>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80004932:	5d 1c       	icall	r12
80004934:	c0 81       	brne	80004944 <udd_interrupt+0x234>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80004936:	f0 1f 00 a5 	mcall	80004bc8 <udd_interrupt+0x4b8>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000493a:	30 29       	mov	r9,2
8000493c:	fe 68 11 60 	mov	r8,-126624
80004940:	91 09       	st.w	r8[0x0],r9
80004942:	c2 a9       	rjmp	80004b96 <udd_interrupt+0x486>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80004944:	fe f9 02 98 	ld.w	r9,pc[664]
80004948:	fe f8 02 98 	ld.w	r8,pc[664]
8000494c:	90 0b       	ld.sh	r11,r8[0x0]
8000494e:	92 0a       	ld.sh	r10,r9[0x0]
80004950:	f6 0a 00 0a 	add	r10,r11,r10
80004954:	b2 0a       	st.h	r9[0x0],r10

		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80004956:	30 09       	mov	r9,0
80004958:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000495a:	fe 69 11 60 	mov	r9,-126624
8000495e:	30 28       	mov	r8,2
80004960:	93 08       	st.w	r9[0x0],r8

	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80004962:	31 08       	mov	r8,16
80004964:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004966:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000496a:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
8000496c:	fe 6a 11 f0 	mov	r10,-126480
80004970:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004972:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80004976:	c1 09       	rjmp	80004b96 <udd_interrupt+0x486>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80004978:	fe 68 11 30 	mov	r8,-126672
8000497c:	70 08       	ld.w	r8,r8[0x0]
8000497e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004982:	c0 a0       	breq	80004996 <udd_interrupt+0x286>
80004984:	fe 68 11 c0 	mov	r8,-126528
80004988:	70 08       	ld.w	r8,r8[0x0]
8000498a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000498e:	c0 40       	breq	80004996 <udd_interrupt+0x286>
		// IN packet sent
		udd_ctrl_in_sent();
80004990:	f0 1f 00 95 	mcall	80004be4 <udd_interrupt+0x4d4>
80004994:	c0 19       	rjmp	80004b96 <udd_interrupt+0x486>
		return true;
	}
	if (Is_udd_nak_out(0)) {
80004996:	fe 68 11 30 	mov	r8,-126672
8000499a:	70 08       	ld.w	r8,r8[0x0]
8000499c:	e2 18 00 08 	andl	r8,0x8,COH
800049a0:	c1 80       	breq	800049d0 <udd_interrupt+0x2c0>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800049a2:	30 89       	mov	r9,8
800049a4:	fe 68 11 60 	mov	r8,-126624
800049a8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0)) {
800049aa:	fe 68 11 30 	mov	r8,-126672
800049ae:	70 08       	ld.w	r8,r8[0x0]
800049b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800049b4:	e0 81 00 f1 	brne	80004b96 <udd_interrupt+0x486>
	}

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800049b8:	fe f8 02 00 	ld.w	r8,pc[512]
800049bc:	70 08       	ld.w	r8,r8[0x0]
800049be:	58 38       	cp.w	r8,3
800049c0:	e0 81 00 eb 	brne	80004b96 <udd_interrupt+0x486>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800049c4:	e8 69 00 00 	mov	r9,524288
800049c8:	fe 68 11 f0 	mov	r8,-126480
800049cc:	91 09       	st.w	r8[0x0],r9
800049ce:	ce 48       	rjmp	80004b96 <udd_interrupt+0x486>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800049d0:	fe 68 11 30 	mov	r8,-126672
800049d4:	70 08       	ld.w	r8,r8[0x0]
800049d6:	e2 18 00 10 	andl	r8,0x10,COH
800049da:	c1 c0       	breq	80004a12 <udd_interrupt+0x302>
		// Underflow on IN packet
		udd_ack_nak_in(0);
800049dc:	31 09       	mov	r9,16
800049de:	fe 68 11 60 	mov	r8,-126624
800049e2:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
800049e4:	fe 68 11 30 	mov	r8,-126672
800049e8:	70 08       	ld.w	r8,r8[0x0]
800049ea:	e2 18 00 02 	andl	r8,0x2,COH
800049ee:	e0 81 00 d4 	brne	80004b96 <udd_interrupt+0x486>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800049f2:	4f 28       	lddpc	r8,80004bb8 <udd_interrupt+0x4a8>
800049f4:	70 08       	ld.w	r8,r8[0x0]
800049f6:	58 18       	cp.w	r8,1
800049f8:	c0 41       	brne	80004a00 <udd_interrupt+0x2f0>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
800049fa:	f0 1f 00 7c 	mcall	80004be8 <udd_interrupt+0x4d8>
800049fe:	cc c8       	rjmp	80004b96 <udd_interrupt+0x486>

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80004a00:	58 48       	cp.w	r8,4
80004a02:	e0 81 00 ca 	brne	80004b96 <udd_interrupt+0x486>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80004a06:	e8 69 00 00 	mov	r9,524288
80004a0a:	fe 68 11 f0 	mov	r8,-126480
80004a0e:	91 09       	st.w	r8[0x0],r9
80004a10:	cc 38       	rjmp	80004b96 <udd_interrupt+0x486>
80004a12:	30 08       	mov	r8,0
{
	udd_ep_id_t ep;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep) || !Is_udd_endpoint_interrupt(ep)) {
80004a14:	fe 6b 10 00 	mov	r11,-126976
80004a18:	e0 67 10 00 	mov	r7,4096
80004a1c:	76 4a       	ld.w	r10,r11[0x10]
#  ifdef FREERTOS_USED
#    include "FreeRTOS.h"
#    include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
80004a1e:	2f f8       	sub	r8,-1
80004a20:	10 9c       	mov	r12,r8
{
	udd_ep_id_t ep;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep) || !Is_udd_endpoint_interrupt(ep)) {
80004a22:	ee 08 09 49 	lsl	r9,r7,r8
80004a26:	f3 ea 00 0a 	and	r10,r9,r10
80004a2a:	c0 40       	breq	80004a32 <udd_interrupt+0x322>
80004a2c:	76 1a       	ld.w	r10,r11[0x4]
80004a2e:	14 69       	and	r9,r10
80004a30:	c0 41       	brne	80004a38 <udd_interrupt+0x328>
static bool udd_ep_interrupt(void)
{
	udd_ep_id_t ep;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80004a32:	58 38       	cp.w	r8,3
80004a34:	cf 41       	brne	80004a1c <udd_interrupt+0x30c>
80004a36:	cb 78       	rjmp	80004ba4 <udd_interrupt+0x494>
		if (!Is_udd_endpoint_interrupt_enabled(ep) || !Is_udd_endpoint_interrupt(ep)) {
			continue;
		}
		udd_ep_trans_done(ep);
80004a38:	f0 1f 00 6d 	mcall	80004bec <udd_interrupt+0x4dc>
80004a3c:	ca d8       	rjmp	80004b96 <udd_interrupt+0x486>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80004a3e:	30 87       	mov	r7,8
80004a40:	fe 68 10 08 	mov	r8,-126968
80004a44:	91 07       	st.w	r8[0x0],r7
#if (USB_DEVICE_MAX_EP != 0)
		// For each endpoint, kill job
		{
			uint8_t i;
			for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
				udd_ep_abort(i);
80004a46:	30 1c       	mov	r12,1
80004a48:	f0 1f 00 6a 	mcall	80004bf0 <udd_interrupt+0x4e0>
80004a4c:	30 2c       	mov	r12,2
80004a4e:	f0 1f 00 69 	mcall	80004bf0 <udd_interrupt+0x4e0>
80004a52:	30 3c       	mov	r12,3
80004a54:	f0 1f 00 67 	mcall	80004bf0 <udd_interrupt+0x4e0>
			}
		}
#endif
		// Reset USB Device Stack Core
		udc_reset();
80004a58:	f0 1f 00 67 	mcall	80004bf4 <udd_interrupt+0x4e4>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80004a5c:	fe 68 10 00 	mov	r8,-126976
80004a60:	70 09       	ld.w	r9,r8[0x0]
80004a62:	e0 19 ff 80 	andl	r9,0xff80
80004a66:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80004a68:	70 09       	ld.w	r9,r8[0x0]
80004a6a:	a7 b9       	sbr	r9,0x7
80004a6c:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80004a6e:	fe 69 11 00 	mov	r9,-126720
80004a72:	72 0a       	ld.w	r10,r9[0x0]
80004a74:	34 0b       	mov	r11,64
80004a76:	f6 07 0c 47 	max	r7,r11,r7
80004a7a:	e0 6b 04 00 	mov	r11,1024
80004a7e:	ee 0b 0d 4b 	min	r11,r7,r11
80004a82:	a1 7b       	lsl	r11,0x1
80004a84:	20 1b       	sub	r11,1
80004a86:	f6 0b 12 00 	clz	r11,r11
80004a8a:	f6 0b 11 1c 	rsub	r11,r11,28
80004a8e:	a5 6b       	lsl	r11,0x4
80004a90:	e2 1b 19 74 	andl	r11,0x1974,COH
80004a94:	e0 1a e6 8b 	andl	r10,0xe68b
80004a98:	f7 ea 10 0a 	or	r10,r11,r10
80004a9c:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBC_UECFG0_EPBK_SINGLE);

	// Use internal buffer for endpoint control
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
80004a9e:	4c a9       	lddpc	r9,80004bc4 <udd_interrupt+0x4b4>
80004aa0:	4c ca       	lddpc	r10,80004bd0 <udd_interrupt+0x4c0>
80004aa2:	93 0a       	st.w	r9[0x0],r10

	// don't use multipacket on endpoint control
	udd_udesc_rst_buf0_size(0);
80004aa4:	72 1a       	ld.w	r10,r9[0x4]
80004aa6:	30 0b       	mov	r11,0
80004aa8:	f5 db d2 0f 	bfins	r10,r11,0x10,0xf
80004aac:	93 1a       	st.w	r9[0x4],r10
	udd_enable_endpoint(0);
80004aae:	70 79       	ld.w	r9,r8[0x1c]
80004ab0:	a1 a9       	sbr	r9,0x0
80004ab2:	91 79       	st.w	r8[0x1c],r9
	udd_disable_busy_bank0(0);
80004ab4:	fc 1a 01 00 	movh	r10,0x100
80004ab8:	fe 69 12 20 	mov	r9,-126432
80004abc:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004abe:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80004ac2:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80004ac4:	fe 69 11 f0 	mov	r9,-126480
80004ac8:	30 4b       	mov	r11,4
80004aca:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80004acc:	30 2b       	mov	r11,2
80004ace:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80004ad0:	e0 69 10 00 	mov	r9,4096
80004ad4:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004ad6:	e3 ba 00 00 	mtsr	0x0,r10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80004ada:	f0 1f 00 3a 	mcall	80004bc0 <udd_interrupt+0x4b0>
		goto udd_interrupt_end;
80004ade:	c5 c8       	rjmp	80004b96 <udd_interrupt+0x486>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80004ae0:	fe 68 10 10 	mov	r8,-126960
80004ae4:	70 08       	ld.w	r8,r8[0x0]
80004ae6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004aea:	c1 b0       	breq	80004b20 <udd_interrupt+0x410>
80004aec:	fe 68 10 04 	mov	r8,-126972
80004af0:	70 08       	ld.w	r8,r8[0x0]
80004af2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004af6:	c1 50       	breq	80004b20 <udd_interrupt+0x410>
		otg_unfreeze_clock();
80004af8:	fe 68 18 00 	mov	r8,-124928
80004afc:	70 09       	ld.w	r9,r8[0x0]
80004afe:	af c9       	cbr	r9,0xe
80004b00:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80004b02:	30 1a       	mov	r10,1
80004b04:	fe 69 10 14 	mov	r9,-126956
80004b08:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80004b0a:	31 0a       	mov	r10,16
80004b0c:	fe 69 10 18 	mov	r9,-126952
80004b10:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80004b12:	70 09       	ld.w	r9,r8[0x0]
80004b14:	af a9       	sbr	r9,0xe
80004b16:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80004b18:	30 0c       	mov	r12,0
80004b1a:	f0 1f 00 38 	mcall	80004bf8 <udd_interrupt+0x4e8>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80004b1e:	c3 c8       	rjmp	80004b96 <udd_interrupt+0x486>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80004b20:	fe 68 10 10 	mov	r8,-126960
80004b24:	70 08       	ld.w	r8,r8[0x0]
80004b26:	e2 18 00 10 	andl	r8,0x10,COH
80004b2a:	c1 d0       	breq	80004b64 <udd_interrupt+0x454>
80004b2c:	fe 68 10 04 	mov	r8,-126972
80004b30:	70 08       	ld.w	r8,r8[0x0]
80004b32:	e2 18 00 10 	andl	r8,0x10,COH
80004b36:	c1 70       	breq	80004b64 <udd_interrupt+0x454>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80004b38:	fe 68 18 00 	mov	r8,-124928
80004b3c:	70 09       	ld.w	r9,r8[0x0]
80004b3e:	af c9       	cbr	r9,0xe
80004b40:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80004b42:	fe 69 18 04 	mov	r9,-124924
80004b46:	72 08       	ld.w	r8,r9[0x0]
80004b48:	e2 18 40 00 	andl	r8,0x4000,COH
80004b4c:	cf d0       	breq	80004b46 <udd_interrupt+0x436>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004b4e:	31 09       	mov	r9,16
80004b50:	fe 68 10 14 	mov	r8,-126956
80004b54:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80004b56:	30 1c       	mov	r12,1
80004b58:	fe 68 10 18 	mov	r8,-126952
80004b5c:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80004b5e:	f0 1f 00 27 	mcall	80004bf8 <udd_interrupt+0x4e8>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80004b62:	c1 a8       	rjmp	80004b96 <udd_interrupt+0x486>
	}

	if (Is_otg_vbus_transition()) {
80004b64:	fe 68 18 04 	mov	r8,-124924
80004b68:	70 08       	ld.w	r8,r8[0x0]
80004b6a:	e2 18 00 02 	andl	r8,0x2,COH
80004b6e:	c1 40       	breq	80004b96 <udd_interrupt+0x486>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80004b70:	fe 68 18 00 	mov	r8,-124928
80004b74:	70 09       	ld.w	r9,r8[0x0]
80004b76:	af c9       	cbr	r9,0xe
80004b78:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80004b7a:	30 2a       	mov	r10,2
80004b7c:	fe 69 18 08 	mov	r9,-124920
80004b80:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80004b82:	70 09       	ld.w	r9,r8[0x0]
80004b84:	af a9       	sbr	r9,0xe
80004b86:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80004b88:	fe 68 18 04 	mov	r8,-124924
80004b8c:	70 0c       	ld.w	r12,r8[0x0]
80004b8e:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80004b92:	f0 1f 00 1b 	mcall	80004bfc <udd_interrupt+0x4ec>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80004b96:	fe 68 10 00 	mov	r8,-126976
80004b9a:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80004b9e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004ba2:	d6 03       	rete
		goto udd_interrupt_end;
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80004ba4:	fe 68 10 04 	mov	r8,-126972
80004ba8:	70 08       	ld.w	r8,r8[0x0]
80004baa:	e2 18 00 08 	andl	r8,0x8,COH
80004bae:	fe 91 ff 48 	brne	80004a3e <udd_interrupt+0x32e>
80004bb2:	c9 7b       	rjmp	80004ae0 <udd_interrupt+0x3d0>
80004bb4:	80 00       	ld.sh	r0,r0[0x0]
80004bb6:	81 58       	st.w	r0[0x14],r8
80004bb8:	00 00       	add	r0,r0
80004bba:	08 e8       	st.h	--r4,r8
80004bbc:	80 00       	ld.sh	r0,r0[0x0]
80004bbe:	3f 7c       	mov	r12,-9
80004bc0:	80 00       	ld.sh	r0,r0[0x0]
80004bc2:	3f 3c       	mov	r12,-13
80004bc4:	00 00       	add	r0,r0
80004bc6:	08 60       	and	r0,r4
80004bc8:	80 00       	ld.sh	r0,r0[0x0]
80004bca:	3f 64       	mov	r4,-10
80004bcc:	00 00       	add	r0,r0
80004bce:	11 5c       	ld.sh	r12,--r8
80004bd0:	00 00       	add	r0,r0
80004bd2:	11 74       	ld.ub	r4,--r8
80004bd4:	80 00       	ld.sh	r0,r0[0x0]
80004bd6:	9f 52       	st.w	pc[0x14],r2
80004bd8:	80 00       	ld.sh	r0,r0[0x0]
80004bda:	83 d8       	st.w	r1[0x34],r8
80004bdc:	00 00       	add	r0,r0
80004bde:	08 0c       	add	r12,r4
80004be0:	00 00       	add	r0,r0
80004be2:	08 e2       	st.h	--r4,r2
80004be4:	80 00       	ld.sh	r0,r0[0x0]
80004be6:	41 f4       	lddsp	r4,sp[0x7c]
80004be8:	80 00       	ld.sh	r0,r0[0x0]
80004bea:	41 b8       	lddsp	r8,sp[0x6c]
80004bec:	80 00       	ld.sh	r0,r0[0x0]
80004bee:	43 20       	lddsp	r0,sp[0xc8]
80004bf0:	80 00       	ld.sh	r0,r0[0x0]
80004bf2:	40 1c       	lddsp	r12,sp[0x4]
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	83 78       	st.w	r1[0x1c],r8
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	40 d4       	lddsp	r4,sp[0x34]
80004bfc:	80 00       	ld.sh	r0,r0[0x0]
80004bfe:	88 e8       	ld.uh	r8,r4[0xc]

80004c00 <udd_enable>:
#endif
}


void udd_enable(void)
{
80004c00:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004c04:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80004c08:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80004c0a:	f0 1f 00 35 	mcall	80004cdc <udd_enable+0xdc>

	// Here, only the device mode is possible, then link USBC interrupt to UDD interrupt
	irq_register_handler(
80004c0e:	30 0a       	mov	r10,0
80004c10:	e0 6b 01 00 	mov	r11,256
80004c14:	4b 3c       	lddpc	r12,80004ce0 <udd_enable+0xe0>
80004c16:	f0 1f 00 34 	mcall	80004ce4 <udd_enable+0xe4>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80004c1a:	fe 78 04 00 	mov	r8,-64512
80004c1e:	f0 f9 01 88 	ld.w	r9,r8[392]
80004c22:	a1 a9       	sbr	r9,0x0
80004c24:	f1 49 01 88 	st.w	r8[392],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80004c28:	fe 68 18 00 	mov	r8,-124928
80004c2c:	70 09       	ld.w	r9,r8[0x0]
80004c2e:	b9 c9       	cbr	r9,0x18
80004c30:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80004c32:	70 09       	ld.w	r9,r8[0x0]
80004c34:	b9 b9       	sbr	r9,0x19
80004c36:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80004c38:	70 09       	ld.w	r9,r8[0x0]
80004c3a:	ad a9       	sbr	r9,0xc
80004c3c:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80004c3e:	70 09       	ld.w	r9,r8[0x0]
80004c40:	af b9       	sbr	r9,0xf
80004c42:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80004c44:	70 09       	ld.w	r9,r8[0x0]
80004c46:	af c9       	cbr	r9,0xe
80004c48:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80004c4a:	70 08       	ld.w	r8,r8[0x0]

	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
80004c4c:	4a 77       	lddpc	r7,80004ce8 <udd_enable+0xe8>
80004c4e:	e0 6a 00 80 	mov	r10,128
80004c52:	30 0b       	mov	r11,0
80004c54:	0e 9c       	mov	r12,r7
80004c56:	f0 1f 00 26 	mcall	80004cec <udd_enable+0xec>
	otg_register_desc_tab(udd_g_ep_table);
80004c5a:	fe 68 10 00 	mov	r8,-126976
80004c5e:	f0 f9 08 30 	ld.w	r9,r8[2096]
80004c62:	f1 47 08 30 	st.w	r8[2096],r7
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	{
		uint8_t i;
		for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_job[i].busy = false;
80004c66:	4a 39       	lddpc	r9,80004cf0 <udd_enable+0xf0>
80004c68:	72 0b       	ld.w	r11,r9[0x0]
80004c6a:	30 0a       	mov	r10,0
80004c6c:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80004c70:	93 0b       	st.w	r9[0x0],r11
80004c72:	72 5b       	ld.w	r11,r9[0x14]
80004c74:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80004c78:	93 5b       	st.w	r9[0x14],r11
80004c7a:	72 ab       	ld.w	r11,r9[0x28]
80004c7c:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80004c80:	93 ab       	st.w	r9[0x28],r11

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80004c82:	70 09       	ld.w	r9,r8[0x0]
80004c84:	ad c9       	cbr	r9,0xc
80004c86:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80004c88:	70 09       	ld.w	r9,r8[0x0]
80004c8a:	e8 19 0c 00 	orl	r9,0xc00
80004c8e:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80004c90:	30 29       	mov	r9,2
80004c92:	fe 68 18 08 	mov	r8,-124920
80004c96:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80004c98:	fe 68 18 04 	mov	r8,-124924
80004c9c:	70 08       	ld.w	r8,r8[0x0]
80004c9e:	e2 18 08 00 	andl	r8,0x800,COH
80004ca2:	c0 40       	breq	80004caa <udd_enable+0xaa>
		otg_raise_vbus_transition();
80004ca4:	fe 68 18 0c 	mov	r8,-124916
80004ca8:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80004caa:	fe 68 18 00 	mov	r8,-124928
80004cae:	70 09       	ld.w	r9,r8[0x0]
80004cb0:	a1 b9       	sbr	r9,0x1
80004cb2:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80004cb4:	70 09       	ld.w	r9,r8[0x0]
80004cb6:	af a9       	sbr	r9,0xe
80004cb8:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80004cba:	30 09       	mov	r9,0
80004cbc:	48 e8       	lddpc	r8,80004cf4 <udd_enable+0xf4>
80004cbe:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004cc0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004cc4:	d3 03       	ssrf	0x10
80004cc6:	48 d8       	lddpc	r8,80004cf8 <udd_enable+0xf8>
80004cc8:	11 ca       	ld.ub	r10,r8[0x4]
80004cca:	2f fa       	sub	r10,-1
80004ccc:	b0 ca       	st.b	r8[0x4],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004cce:	e3 b9 00 00 	mtsr	0x0,r9
80004cd2:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80004cd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004cda:	00 00       	add	r0,r0
80004cdc:	80 00       	ld.sh	r0,r0[0x0]
80004cde:	7a a4       	ld.w	r4,sp[0x28]
80004ce0:	80 00       	ld.sh	r0,r0[0x0]
80004ce2:	47 10       	lddsp	r0,sp[0x1c4]
80004ce4:	80 00       	ld.sh	r0,r0[0x0]
80004ce6:	32 48       	mov	r8,36
80004ce8:	00 00       	add	r0,r0
80004cea:	08 60       	and	r0,r4
80004cec:	80 00       	ld.sh	r0,r0[0x0]
80004cee:	a0 9a       	st.b	r0[0x1],r10
80004cf0:	00 00       	add	r0,r0
80004cf2:	08 10       	sub	r0,r4
80004cf4:	00 00       	add	r0,r0
80004cf6:	08 e0       	st.h	--r4,r0
80004cf8:	00 00       	add	r0,r0
80004cfa:	14 c4       	st.b	r10++,r4

80004cfc <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80004cfc:	48 68       	lddpc	r8,80004d14 <fat_check_open+0x18>
80004cfe:	11 89       	ld.ub	r9,r8[0x0]
80004d00:	30 08       	mov	r8,0
80004d02:	f0 09 18 00 	cp.b	r9,r8
80004d06:	c0 20       	breq	80004d0a <fat_check_open+0xe>
80004d08:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80004d0a:	31 79       	mov	r9,23
80004d0c:	48 38       	lddpc	r8,80004d18 <fat_check_open+0x1c>
80004d0e:	b0 89       	st.b	r8[0x0],r9
80004d10:	5e fd       	retal	0
80004d12:	00 00       	add	r0,r0
80004d14:	00 00       	add	r0,r0
80004d16:	11 b8       	ld.ub	r8,r8[0x3]
80004d18:	00 00       	add	r0,r0
80004d1a:	14 48       	or	r8,r10

80004d1c <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80004d1c:	48 68       	lddpc	r8,80004d34 <fat_check_select+0x18>
80004d1e:	90 19       	ld.sh	r9,r8[0x2]
80004d20:	3f f8       	mov	r8,-1
80004d22:	f0 09 19 00 	cp.h	r9,r8
80004d26:	c0 20       	breq	80004d2a <fat_check_select+0xe>
80004d28:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80004d2a:	30 f9       	mov	r9,15
80004d2c:	48 38       	lddpc	r8,80004d38 <fat_check_select+0x1c>
80004d2e:	b0 89       	st.b	r8[0x0],r9
80004d30:	5e fd       	retal	0
80004d32:	00 00       	add	r0,r0
80004d34:	00 00       	add	r0,r0
80004d36:	14 44       	or	r4,r10
80004d38:	00 00       	add	r0,r0
80004d3a:	14 48       	or	r8,r10

80004d3c <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80004d3c:	48 58       	lddpc	r8,80004d50 <fat_check_is_file+0x14>
80004d3e:	11 a8       	ld.ub	r8,r8[0x2]
80004d40:	e2 18 00 18 	andl	r8,0x18,COH
80004d44:	c0 21       	brne	80004d48 <fat_check_is_file+0xc>
80004d46:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80004d48:	31 39       	mov	r9,19
80004d4a:	48 38       	lddpc	r8,80004d54 <fat_check_is_file+0x18>
80004d4c:	b0 89       	st.b	r8[0x0],r9
80004d4e:	5e fd       	retal	0
80004d50:	00 00       	add	r0,r0
80004d52:	11 b8       	ld.ub	r8,r8[0x3]
80004d54:	00 00       	add	r0,r0
80004d56:	14 48       	or	r8,r10

80004d58 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80004d58:	49 68       	lddpc	r8,80004db0 <fat_checkcluster+0x58>
80004d5a:	70 18       	ld.w	r8,r8[0x4]
80004d5c:	58 08       	cp.w	r8,0
80004d5e:	c0 21       	brne	80004d62 <fat_checkcluster+0xa>
80004d60:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80004d62:	49 59       	lddpc	r9,80004db4 <fat_checkcluster+0x5c>
80004d64:	13 89       	ld.ub	r9,r9[0x0]
80004d66:	30 3a       	mov	r10,3
80004d68:	f4 09 18 00 	cp.b	r9,r10
80004d6c:	c0 a1       	brne	80004d80 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80004d6e:	e0 69 ff f7 	mov	r9,65527
80004d72:	ea 19 0f ff 	orh	r9,0xfff
80004d76:	12 38       	cp.w	r8,r9
80004d78:	e0 8b 00 19 	brhi	80004daa <fat_checkcluster+0x52>
80004d7c:	5f 0c       	sreq	r12
80004d7e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004d80:	30 2a       	mov	r10,2
80004d82:	f4 09 18 00 	cp.b	r9,r10
80004d86:	c0 71       	brne	80004d94 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80004d88:	e0 48 ff f7 	cp.w	r8,65527
80004d8c:	e0 8b 00 0f 	brhi	80004daa <fat_checkcluster+0x52>
80004d90:	5f 0c       	sreq	r12
80004d92:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004d94:	30 1a       	mov	r10,1
80004d96:	f4 09 18 00 	cp.b	r9,r10
80004d9a:	c0 20       	breq	80004d9e <fat_checkcluster+0x46>
80004d9c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80004d9e:	e0 48 0f f7 	cp.w	r8,4087
80004da2:	e0 8b 00 04 	brhi	80004daa <fat_checkcluster+0x52>
80004da6:	5f 0c       	sreq	r12
80004da8:	5e fc       	retal	r12
80004daa:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80004dac:	5e fc       	retal	r12
80004dae:	00 00       	add	r0,r0
80004db0:	00 00       	add	r0,r0
80004db2:	14 98       	mov	r8,r10
80004db4:	00 00       	add	r0,r0
80004db6:	14 44       	or	r4,r10

80004db8 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80004db8:	30 0a       	mov	r10,0
80004dba:	48 88       	lddpc	r8,80004dd8 <fat_cache_clusterlist_reset+0x20>
80004dbc:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80004dbe:	48 88       	lddpc	r8,80004ddc <fat_cache_clusterlist_reset+0x24>
80004dc0:	30 19       	mov	r9,1
80004dc2:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004dc4:	3f f9       	mov	r9,-1
80004dc6:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004dc8:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80004dca:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004dce:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004dd2:	f1 69 00 15 	st.b	r8[21],r9
   }
}
80004dd6:	5e fc       	retal	r12
80004dd8:	00 00       	add	r0,r0
80004dda:	14 4a       	or	r10,r10
80004ddc:	00 00       	add	r0,r0
80004dde:	11 cc       	ld.ub	r12,r8[0x4]

80004de0 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80004de0:	48 c9       	lddpc	r9,80004e10 <fat_cache_clusterlist_update_start+0x30>
80004de2:	13 88       	ld.ub	r8,r9[0x0]
80004de4:	f8 08 18 00 	cp.b	r8,r12
80004de8:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
80004dea:	48 ba       	lddpc	r10,80004e14 <fat_cache_clusterlist_update_start+0x34>
80004dec:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80004dee:	f0 0a 15 02 	lsl	r10,r8,0x2
80004df2:	10 0a       	add	r10,r8
80004df4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
80004df8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80004dfa:	3f fb       	mov	r11,-1
80004dfc:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80004dfe:	2f fa       	sub	r10,-1
80004e00:	48 6b       	lddpc	r11,80004e18 <fat_cache_clusterlist_update_start+0x38>
80004e02:	76 0b       	ld.w	r11,r11[0x0]
80004e04:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80004e08:	48 59       	lddpc	r9,80004e1c <fat_cache_clusterlist_update_start+0x3c>
80004e0a:	72 19       	ld.w	r9,r9[0x4]
80004e0c:	91 29       	st.w	r8[0x8],r9
}
80004e0e:	5e fc       	retal	r12
80004e10:	00 00       	add	r0,r0
80004e12:	11 cc       	ld.ub	r12,r8[0x4]
80004e14:	00 00       	add	r0,r0
80004e16:	14 4a       	or	r10,r10
80004e18:	00 00       	add	r0,r0
80004e1a:	14 98       	mov	r8,r10
80004e1c:	00 00       	add	r0,r0
80004e1e:	14 a0       	st.w	r10++,r0

80004e20 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80004e20:	49 88       	lddpc	r8,80004e80 <fat_cache_clusterlist_update_select+0x60>
80004e22:	11 88       	ld.ub	r8,r8[0x0]
80004e24:	49 8a       	lddpc	r10,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e26:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80004e2a:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
80004e2e:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80004e30:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004e32:	15 8a       	ld.ub	r10,r10[0x0]
80004e34:	f2 0a 18 00 	cp.b	r10,r9
80004e38:	c0 a1       	brne	80004e4c <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80004e3a:	49 3a       	lddpc	r10,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e3c:	15 9a       	ld.ub	r10,r10[0x1]
80004e3e:	f4 0b 18 00 	cp.b	r11,r10
80004e42:	e0 88 00 05 	brls	80004e4c <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004e46:	2f fa       	sub	r10,-1
80004e48:	48 fc       	lddpc	r12,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e4a:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80004e4c:	48 ea       	lddpc	r10,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e4e:	f5 3a 00 14 	ld.ub	r10,r10[20]
80004e52:	f2 0a 18 00 	cp.b	r10,r9
80004e56:	c0 c1       	brne	80004e6e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80004e58:	48 b9       	lddpc	r9,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e5a:	f3 39 00 15 	ld.ub	r9,r9[21]
80004e5e:	f2 0b 18 00 	cp.b	r11,r9
80004e62:	e0 88 00 06 	brls	80004e6e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80004e66:	2f f9       	sub	r9,-1
80004e68:	48 7a       	lddpc	r10,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e6a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80004e6e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004e72:	48 59       	lddpc	r9,80004e84 <fat_cache_clusterlist_update_select+0x64>
80004e74:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004e78:	30 09       	mov	r9,0
80004e7a:	b0 99       	st.b	r8[0x1],r9
}
80004e7c:	5e fc       	retal	r12
80004e7e:	00 00       	add	r0,r0
80004e80:	00 00       	add	r0,r0
80004e82:	14 4a       	or	r10,r10
80004e84:	00 00       	add	r0,r0
80004e86:	11 cc       	ld.ub	r12,r8[0x4]

80004e88 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80004e88:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80004e8c:	49 08       	lddpc	r8,80004ecc <fat_cache_clusterlist_update_finish+0x44>
80004e8e:	11 88       	ld.ub	r8,r8[0x0]
80004e90:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004e94:	48 f9       	lddpc	r9,80004ed0 <fat_cache_clusterlist_update_finish+0x48>
80004e96:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004e9a:	f0 ca ff f8 	sub	r10,r8,-8
80004e9e:	48 eb       	lddpc	r11,80004ed4 <fat_cache_clusterlist_update_finish+0x4c>
80004ea0:	17 97       	ld.ub	r7,r11[0x1]
80004ea2:	74 09       	ld.w	r9,r10[0x0]
80004ea4:	f2 07 0d 06 	divu	r6,r9,r7
80004ea8:	0e 99       	mov	r9,r7
80004eaa:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80004eac:	17 8b       	ld.ub	r11,r11[0x0]
80004eae:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80004eb0:	74 0b       	ld.w	r11,r10[0x0]
80004eb2:	12 1b       	sub	r11,r9
80004eb4:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80004eb6:	48 9a       	lddpc	r10,80004ed8 <fat_cache_clusterlist_update_finish+0x50>
80004eb8:	74 0b       	ld.w	r11,r10[0x0]
80004eba:	12 1b       	sub	r11,r9
80004ebc:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80004ebe:	74 1a       	ld.w	r10,r10[0x4]
80004ec0:	14 09       	add	r9,r10
80004ec2:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80004ec4:	f0 1f 00 06 	mcall	80004edc <fat_cache_clusterlist_update_finish+0x54>
}
80004ec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004ecc:	00 00       	add	r0,r0
80004ece:	14 4a       	or	r10,r10
80004ed0:	00 00       	add	r0,r0
80004ed2:	11 cc       	ld.ub	r12,r8[0x4]
80004ed4:	00 00       	add	r0,r0
80004ed6:	13 f8       	ld.ub	r8,r9[0x7]
80004ed8:	00 00       	add	r0,r0
80004eda:	14 a0       	st.w	r10++,r0
80004edc:	80 00       	ld.sh	r0,r0[0x0]
80004ede:	4e 20       	lddpc	r0,80005064 <fat_check_eof_name+0xc>

80004ee0 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80004ee0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80004ee4:	4c 18       	lddpc	r8,80004fe8 <fat_cache_clusterlist_update_read+0x108>
80004ee6:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004ee8:	4c 18       	lddpc	r8,80004fec <fat_cache_clusterlist_update_read+0x10c>
80004eea:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004eec:	4c 18       	lddpc	r8,80004ff0 <fat_cache_clusterlist_update_read+0x110>
80004eee:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004ef0:	4c 18       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004ef2:	11 88       	ld.ub	r8,r8[0x0]
80004ef4:	f8 08 18 00 	cp.b	r8,r12
80004ef8:	c1 11       	brne	80004f1a <fat_cache_clusterlist_update_read+0x3a>
80004efa:	4b f8       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004efc:	11 a8       	ld.ub	r8,r8[0x2]
80004efe:	f2 08 18 00 	cp.b	r8,r9
80004f02:	c0 c1       	brne	80004f1a <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004f04:	4b c8       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f06:	70 18       	ld.w	r8,r8[0x4]
80004f08:	14 38       	cp.w	r8,r10
80004f0a:	c0 81       	brne	80004f1a <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004f0c:	4b a8       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f0e:	70 28       	ld.w	r8,r8[0x8]
80004f10:	10 3b       	cp.w	r11,r8
80004f12:	c0 43       	brcs	80004f1a <fat_cache_clusterlist_update_read+0x3a>
80004f14:	30 0a       	mov	r10,0
80004f16:	14 99       	mov	r9,r10
80004f18:	c1 88       	rjmp	80004f48 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004f1a:	4b 78       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f1c:	f1 38 00 14 	ld.ub	r8,r8[20]
80004f20:	f8 08 18 00 	cp.b	r8,r12
80004f24:	c5 e1       	brne	80004fe0 <fat_cache_clusterlist_update_read+0x100>
80004f26:	4b 48       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f28:	f1 38 00 16 	ld.ub	r8,r8[22]
80004f2c:	f2 08 18 00 	cp.b	r8,r9
80004f30:	c5 81       	brne	80004fe0 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004f32:	4b 18       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f34:	70 68       	ld.w	r8,r8[0x18]
80004f36:	14 38       	cp.w	r8,r10
80004f38:	c5 41       	brne	80004fe0 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004f3a:	4a f8       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f3c:	70 78       	ld.w	r8,r8[0x1c]
80004f3e:	16 38       	cp.w	r8,r11
80004f40:	e0 8b 00 50 	brhi	80004fe0 <fat_cache_clusterlist_update_read+0x100>
80004f44:	30 1a       	mov	r10,1
80004f46:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80004f48:	f2 0e 15 02 	lsl	lr,r9,0x2
80004f4c:	12 0e       	add	lr,r9
80004f4e:	4a ac       	lddpc	r12,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f50:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80004f54:	78 4c       	ld.w	r12,r12[0x10]
80004f56:	f6 08 01 08 	sub	r8,r11,r8
80004f5a:	10 3c       	cp.w	r12,r8
80004f5c:	e0 88 00 16 	brls	80004f88 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004f60:	4a 4b       	lddpc	r11,80004ff0 <fat_cache_clusterlist_update_read+0x110>
80004f62:	f2 0e 15 02 	lsl	lr,r9,0x2
80004f66:	fc 09 00 09 	add	r9,lr,r9
80004f6a:	4a 3e       	lddpc	lr,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f6c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80004f70:	72 39       	ld.w	r9,r9[0xc]
80004f72:	f0 09 00 09 	add	r9,r8,r9
80004f76:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80004f78:	10 1c       	sub	r12,r8
80004f7a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80004f7c:	49 f8       	lddpc	r8,80004ff8 <fat_cache_clusterlist_update_read+0x118>
80004f7e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004f80:	f0 1f 00 1f 	mcall	80004ffc <fat_cache_clusterlist_update_read+0x11c>
80004f84:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80004f88:	49 c8       	lddpc	r8,80004ff8 <fat_cache_clusterlist_update_read+0x118>
80004f8a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80004f8c:	f2 08 15 02 	lsl	r8,r9,0x2
80004f90:	f0 09 00 09 	add	r9,r8,r9
80004f94:	49 88       	lddpc	r8,80004ff4 <fat_cache_clusterlist_update_read+0x114>
80004f96:	f0 09 00 28 	add	r8,r8,r9<<0x2
80004f9a:	3f f9       	mov	r9,-1
80004f9c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004f9e:	70 4c       	ld.w	r12,r8[0x10]
80004fa0:	49 2a       	lddpc	r10,80004fe8 <fat_cache_clusterlist_update_read+0x108>
80004fa2:	15 99       	ld.ub	r9,r10[0x1]
80004fa4:	70 3e       	ld.w	lr,r8[0xc]
80004fa6:	f8 0e 00 0e 	add	lr,r12,lr
80004faa:	20 1e       	sub	lr,1
80004fac:	74 57       	ld.w	r7,r10[0x14]
80004fae:	fc 07 01 07 	sub	r7,lr,r7
80004fb2:	74 4a       	ld.w	r10,r10[0x10]
80004fb4:	14 17       	sub	r7,r10
80004fb6:	ee 09 0d 06 	divu	r6,r7,r9
80004fba:	0c 97       	mov	r7,r6
80004fbc:	2f e7       	sub	r7,-2
80004fbe:	48 ca       	lddpc	r10,80004fec <fat_cache_clusterlist_update_read+0x10c>
80004fc0:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004fc2:	2f 88       	sub	r8,-8
80004fc4:	70 0a       	ld.w	r10,r8[0x0]
80004fc6:	14 0c       	add	r12,r10
80004fc8:	f8 c7 00 01 	sub	r7,r12,1
80004fcc:	ee 09 0d 06 	divu	r6,r7,r9
80004fd0:	ad 39       	mul	r9,r6
80004fd2:	48 8a       	lddpc	r10,80004ff0 <fat_cache_clusterlist_update_read+0x110>
80004fd4:	f6 09 01 09 	sub	r9,r11,r9
80004fd8:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80004fda:	91 0b       	st.w	r8[0x0],r11
80004fdc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80004fe0:	f0 1f 00 08 	mcall	80005000 <fat_cache_clusterlist_update_read+0x120>
80004fe4:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004fe8:	00 00       	add	r0,r0
80004fea:	13 f8       	ld.ub	r8,r9[0x7]
80004fec:	00 00       	add	r0,r0
80004fee:	14 98       	mov	r8,r10
80004ff0:	00 00       	add	r0,r0
80004ff2:	14 a0       	st.w	r10++,r0
80004ff4:	00 00       	add	r0,r0
80004ff6:	11 cc       	ld.ub	r12,r8[0x4]
80004ff8:	00 00       	add	r0,r0
80004ffa:	14 4a       	or	r10,r10
80004ffc:	80 00       	ld.sh	r0,r0[0x0]
80004ffe:	4e 20       	lddpc	r0,80005184 <fat_entry_longname+0xec>
80005000:	80 00       	ld.sh	r0,r0[0x0]
80005002:	4d e0       	lddpc	r0,80005178 <fat_entry_longname+0xe0>

80005004 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80005004:	30 d9       	mov	r9,13
80005006:	48 48       	lddpc	r8,80005014 <fat_entry_is_dir+0x10>
80005008:	b0 89       	st.b	r8[0x0],r9
8000500a:	48 48       	lddpc	r8,80005018 <fat_entry_is_dir+0x14>
8000500c:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
8000500e:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80005012:	5e fc       	retal	r12
80005014:	00 00       	add	r0,r0
80005016:	14 48       	or	r8,r10
80005018:	00 00       	add	r0,r0
8000501a:	11 b8       	ld.ub	r8,r8[0x3]

8000501c <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000501c:	3f f9       	mov	r9,-1
8000501e:	48 c8       	lddpc	r8,8000504c <fat_clear_entry_info_and_ptr+0x30>
80005020:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80005022:	48 c8       	lddpc	r8,80005050 <fat_clear_entry_info_and_ptr+0x34>
80005024:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80005028:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000502c:	30 08       	mov	r8,0
8000502e:	f0 09 18 00 	cp.b	r9,r8
80005032:	c0 51       	brne	8000503c <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80005034:	10 99       	mov	r9,r8
80005036:	48 78       	lddpc	r8,80005050 <fat_clear_entry_info_and_ptr+0x34>
80005038:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
8000503c:	48 68       	lddpc	r8,80005054 <fat_clear_entry_info_and_ptr+0x38>
8000503e:	30 09       	mov	r9,0
80005040:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80005042:	30 0a       	mov	r10,0
80005044:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80005046:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80005048:	b0 89       	st.b	r8[0x0],r9
}
8000504a:	5e fc       	retal	r12
8000504c:	00 00       	add	r0,r0
8000504e:	14 44       	or	r4,r10
80005050:	00 00       	add	r0,r0
80005052:	13 f8       	ld.ub	r8,r9[0x7]
80005054:	00 00       	add	r0,r0
80005056:	11 b8       	ld.ub	r8,r8[0x3]

80005058 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80005058:	30 08       	mov	r8,0
8000505a:	f0 0c 19 00 	cp.h	r12,r8
8000505e:	5f 0a       	sreq	r10
80005060:	35 c9       	mov	r9,92
80005062:	f2 0c 19 00 	cp.h	r12,r9
80005066:	5f 09       	sreq	r9
80005068:	f5 e9 10 09 	or	r9,r10,r9
8000506c:	f0 09 18 00 	cp.b	r9,r8
80005070:	c0 20       	breq	80005074 <fat_check_eof_name+0x1c>
80005072:	5e ff       	retal	1
80005074:	32 f8       	mov	r8,47
80005076:	f0 0c 19 00 	cp.h	r12,r8
8000507a:	5f 0c       	sreq	r12
}
8000507c:	5e fc       	retal	r12
8000507e:	d7 03       	nop

80005080 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80005080:	48 48       	lddpc	r8,80005090 <fat_get_ptr_entry+0x10>
80005082:	90 98       	ld.uh	r8,r8[0x2]
80005084:	a5 78       	lsl	r8,0x5
80005086:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000508a:	48 3c       	lddpc	r12,80005094 <fat_get_ptr_entry+0x14>
8000508c:	10 0c       	add	r12,r8
8000508e:	5e fc       	retal	r12
80005090:	00 00       	add	r0,r0
80005092:	14 44       	or	r4,r10
80005094:	00 00       	add	r0,r0
80005096:	11 f8       	ld.ub	r8,r8[0x7]

80005098 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80005098:	d4 31       	pushm	r0-r7,lr
8000509a:	20 3d       	sub	sp,12
8000509c:	18 97       	mov	r7,r12
8000509e:	16 94       	mov	r4,r11
800050a0:	14 96       	mov	r6,r10
800050a2:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
800050a4:	f0 1f 00 5e 	mcall	8000521c <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
800050a8:	19 88       	ld.ub	r8,r12[0x0]
800050aa:	30 09       	mov	r9,0
800050ac:	f2 08 18 00 	cp.b	r8,r9
800050b0:	5f 0b       	sreq	r11
800050b2:	3e 5a       	mov	r10,-27
800050b4:	f4 08 18 00 	cp.b	r8,r10
800050b8:	5f 0a       	sreq	r10
800050ba:	f7 ea 10 0a 	or	r10,r11,r10
800050be:	f2 0a 18 00 	cp.b	r10,r9
800050c2:	c0 71       	brne	800050d0 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
800050c4:	f9 3a 00 0b 	ld.ub	r10,r12[11]
800050c8:	30 f9       	mov	r9,15
800050ca:	f2 0a 18 00 	cp.b	r10,r9
800050ce:	c0 60       	breq	800050da <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
800050d0:	30 b9       	mov	r9,11
800050d2:	4d 48       	lddpc	r8,80005220 <fat_entry_longname+0x188>
800050d4:	b0 89       	st.b	r8[0x0],r9
800050d6:	30 0c       	mov	r12,0
      return false;
800050d8:	c9 c8       	rjmp	80005210 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
800050da:	4d 39       	lddpc	r9,80005224 <fat_entry_longname+0x18c>
800050dc:	13 8a       	ld.ub	r10,r9[0x0]
800050de:	30 09       	mov	r9,0
800050e0:	f2 0a 18 00 	cp.b	r10,r9
800050e4:	c0 90       	breq	800050f6 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
800050e6:	e2 18 00 40 	andl	r8,0x40,COH
800050ea:	c0 61       	brne	800050f6 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800050ec:	31 09       	mov	r9,16
800050ee:	4c d8       	lddpc	r8,80005220 <fat_entry_longname+0x188>
800050f0:	b0 89       	st.b	r8[0x0],r9
800050f2:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800050f4:	c8 e8       	rjmp	80005210 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800050f6:	2f fc       	sub	r12,-1
800050f8:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800050fa:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800050fe:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80005100:	4c 95       	lddpc	r5,80005224 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80005102:	20 14       	sub	r4,1
80005104:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80005106:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80005108:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000510a:	19 89       	ld.ub	r9,r12[0x0]
8000510c:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
8000510e:	19 99       	ld.ub	r9,r12[0x1]
80005110:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
80005112:	58 06       	cp.w	r6,0
80005114:	c0 f0       	breq	80005132 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
80005116:	0b 89       	ld.ub	r9,r5[0x0]
80005118:	f6 09 18 00 	cp.b	r9,r11
8000511c:	c3 91       	brne	8000518e <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000511e:	40 1e       	lddsp	lr,sp[0x4]
80005120:	1c 38       	cp.w	r8,lr
80005122:	c0 55       	brlt	8000512c <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80005124:	30 08       	mov	r8,0
80005126:	ae 88       	st.b	r7[0x0],r8
80005128:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
8000512a:	c7 38       	rjmp	80005210 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000512c:	9a 59       	ld.sh	r9,sp[0xa]
8000512e:	ae 89       	st.b	r7[0x0],r9
80005130:	c2 f8       	rjmp	8000518e <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
80005132:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80005134:	32 a3       	mov	r3,42
80005136:	e6 09 19 00 	cp.h	r9,r3
8000513a:	c6 a0       	breq	8000520e <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000513c:	9a 5e       	ld.sh	lr,sp[0xa]
8000513e:	58 0e       	cp.w	lr,0
80005140:	c0 e1       	brne	8000515c <fat_entry_longname+0xc4>
80005142:	35 c0       	mov	r0,92
80005144:	e0 09 19 00 	cp.h	r9,r0
80005148:	5f 12       	srne	r2
8000514a:	32 f3       	mov	r3,47
8000514c:	e6 09 19 00 	cp.h	r9,r3
80005150:	5f 13       	srne	r3
80005152:	e5 e3 00 03 	and	r3,r2,r3
80005156:	f6 03 18 00 	cp.b	r3,r11
8000515a:	c1 e0       	breq	80005196 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000515c:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80005160:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80005164:	e4 c0 ff e0 	sub	r0,r2,-32
80005168:	00 33       	cp.w	r3,r0
8000516a:	c0 41       	brne	80005172 <fat_entry_longname+0xda>
8000516c:	40 00       	lddsp	r0,sp[0x0]
8000516e:	58 00       	cp.w	r0,0
80005170:	c0 f0       	breq	8000518e <fat_entry_longname+0xf6>
80005172:	22 02       	sub	r2,32
80005174:	04 33       	cp.w	r3,r2
80005176:	c0 41       	brne	8000517e <fat_entry_longname+0xe6>
80005178:	40 03       	lddsp	r3,sp[0x0]
8000517a:	58 03       	cp.w	r3,0
8000517c:	c0 90       	breq	8000518e <fat_entry_longname+0xf6>
8000517e:	fc 09 19 00 	cp.h	r9,lr
80005182:	c0 60       	breq	8000518e <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80005184:	31 69       	mov	r9,22
80005186:	4a 78       	lddpc	r8,80005220 <fat_entry_longname+0x188>
80005188:	b0 89       	st.b	r8[0x0],r9
8000518a:	30 0c       	mov	r12,0
           return false;
8000518c:	c4 28       	rjmp	80005210 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
8000518e:	9a 59       	ld.sh	r9,sp[0xa]
80005190:	e2 09 19 00 	cp.h	r9,r1
80005194:	c0 b1       	brne	800051aa <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80005196:	4a 49       	lddpc	r9,80005224 <fat_entry_longname+0x18c>
80005198:	13 8a       	ld.ub	r10,r9[0x0]
8000519a:	30 09       	mov	r9,0
8000519c:	f2 0a 18 00 	cp.b	r10,r9
800051a0:	c3 70       	breq	8000520e <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
800051a2:	2f f8       	sub	r8,-1
800051a4:	ae 08       	st.h	r7[0x0],r8
800051a6:	30 1c       	mov	r12,1
800051a8:	c3 48       	rjmp	80005210 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800051aa:	e8 08 18 00 	cp.b	r8,r4
800051ae:	c0 31       	brne	800051b4 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
800051b0:	2f dc       	sub	r12,-3
800051b2:	c2 58       	rjmp	800051fc <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
800051b4:	30 a9       	mov	r9,10
800051b6:	f2 08 18 00 	cp.b	r8,r9
800051ba:	c0 31       	brne	800051c0 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
800051bc:	2f ec       	sub	r12,-2
800051be:	c1 f8       	rjmp	800051fc <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
800051c0:	30 c9       	mov	r9,12
800051c2:	f2 08 18 00 	cp.b	r8,r9
800051c6:	c1 b1       	brne	800051fc <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
800051c8:	f9 38 ff e2 	ld.ub	r8,r12[-30]
800051cc:	e2 18 00 40 	andl	r8,0x40,COH
800051d0:	c0 61       	brne	800051dc <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
800051d2:	31 09       	mov	r9,16
800051d4:	49 38       	lddpc	r8,80005220 <fat_entry_longname+0x188>
800051d6:	b0 89       	st.b	r8[0x0],r9
800051d8:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
800051da:	c1 b8       	rjmp	80005210 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800051dc:	58 06       	cp.w	r6,0
800051de:	c0 b0       	breq	800051f4 <fat_entry_longname+0x15c>
800051e0:	49 18       	lddpc	r8,80005224 <fat_entry_longname+0x18c>
800051e2:	11 89       	ld.ub	r9,r8[0x0]
800051e4:	30 08       	mov	r8,0
800051e6:	f0 09 18 00 	cp.b	r9,r8
800051ea:	c1 50       	breq	80005214 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800051ec:	30 e8       	mov	r8,14
800051ee:	ae 08       	st.h	r7[0x0],r8
800051f0:	30 1c       	mov	r12,1
               return true;
800051f2:	c0 f8       	rjmp	80005210 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800051f4:	0f 9c       	ld.ub	r12,r7[0x1]
800051f6:	f0 1f 00 0d 	mcall	80005228 <fat_entry_longname+0x190>
800051fa:	c0 b8       	rjmp	80005210 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800051fc:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800051fe:	f6 09 18 00 	cp.b	r9,r11
80005202:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80005206:	2f f8       	sub	r8,-1
80005208:	5c 58       	castu.b	r8
      ptr_entry+=2;
8000520a:	2f ec       	sub	r12,-2
   }
8000520c:	c7 fb       	rjmp	8000510a <fat_entry_longname+0x72>
8000520e:	30 1c       	mov	r12,1
}
80005210:	2f dd       	sub	sp,-12
80005212:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80005214:	30 08       	mov	r8,0
80005216:	ae 98       	st.b	r7[0x1],r8
80005218:	30 1c       	mov	r12,1
               }
               return true;
8000521a:	cf bb       	rjmp	80005210 <fat_entry_longname+0x178>
8000521c:	80 00       	ld.sh	r0,r0[0x0]
8000521e:	50 80       	stdsp	sp[0x20],r0
80005220:	00 00       	add	r0,r0
80005222:	14 48       	or	r8,r10
80005224:	00 00       	add	r0,r0
80005226:	14 49       	or	r9,r10
80005228:	80 00       	ld.sh	r0,r0[0x0]
8000522a:	50 58       	stdsp	sp[0x14],r8

8000522c <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
8000522c:	d4 31       	pushm	r0-r7,lr
8000522e:	20 2d       	sub	sp,8
80005230:	18 97       	mov	r7,r12
80005232:	50 1b       	stdsp	sp[0x4],r11
80005234:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80005236:	31 69       	mov	r9,22
80005238:	4b c8       	lddpc	r8,80005328 <fat_entry_shortname+0xfc>
8000523a:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
8000523c:	f0 1f 00 3c 	mcall	8000532c <fat_entry_shortname+0x100>
80005240:	30 08       	mov	r8,0
80005242:	10 9a       	mov	r10,r8
80005244:	30 1b       	mov	r11,1
80005246:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80005248:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000524a:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000524c:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000524e:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80005250:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80005252:	fc 08 18 00 	cp.b	r8,lr
80005256:	c1 90       	breq	80005288 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80005258:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000525c:	ea 08 18 00 	cp.b	r8,r5
80005260:	c0 41       	brne	80005268 <fat_entry_shortname+0x3c>
80005262:	40 01       	lddsp	r1,sp[0x0]
80005264:	58 01       	cp.w	r1,0
80005266:	c0 81       	brne	80005276 <fat_entry_shortname+0x4a>
80005268:	e8 09 18 00 	cp.b	r9,r4
8000526c:	c0 f1       	brne	8000528a <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000526e:	ea 08 18 00 	cp.b	r8,r5
80005272:	e0 8b 00 0b 	brhi	80005288 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80005276:	f9 39 00 08 	ld.ub	r9,r12[8]
8000527a:	e8 09 18 00 	cp.b	r9,r4
8000527e:	c0 50       	breq	80005288 <fat_entry_shortname+0x5c>
80005280:	30 78       	mov	r8,7
80005282:	32 e9       	mov	r9,46
80005284:	50 03       	stdsp	sp[0x0],r3
80005286:	c0 28       	rjmp	8000528a <fat_entry_shortname+0x5e>
80005288:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000528a:	58 06       	cp.w	r6,0
8000528c:	c1 80       	breq	800052bc <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
8000528e:	4a 9b       	lddpc	r11,80005330 <fat_entry_shortname+0x104>
80005290:	17 81       	ld.ub	r1,r11[0x0]
80005292:	30 0b       	mov	r11,0
80005294:	f6 01 18 00 	cp.b	r1,r11
80005298:	c2 c1       	brne	800052f0 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000529a:	40 1b       	lddsp	r11,sp[0x4]
8000529c:	20 1b       	sub	r11,1
8000529e:	16 3a       	cp.w	r10,r11
800052a0:	c0 35       	brlt	800052a6 <fat_entry_shortname+0x7a>
800052a2:	06 99       	mov	r9,r3
800052a4:	c0 a8       	rjmp	800052b8 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
800052a6:	f2 c1 00 41 	sub	r1,r9,65
800052aa:	31 9b       	mov	r11,25
800052ac:	f6 01 18 00 	cp.b	r1,r11
800052b0:	e0 8b 00 04 	brhi	800052b8 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
800052b4:	2e 09       	sub	r9,-32
800052b6:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
800052b8:	ae 89       	st.b	r7[0x0],r9
800052ba:	c1 b8       	rjmp	800052f0 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
800052bc:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
800052be:	e4 0b 18 00 	cp.b	r11,r2
800052c2:	c2 f0       	breq	80005320 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
800052c4:	58 09       	cp.w	r9,0
800052c6:	c0 c1       	brne	800052de <fat_entry_shortname+0xb2>
800052c8:	35 c1       	mov	r1,92
800052ca:	e2 0b 18 00 	cp.b	r11,r1
800052ce:	5f 10       	srne	r0
800052d0:	32 f1       	mov	r1,47
800052d2:	e2 0b 18 00 	cp.b	r11,r1
800052d6:	5f 11       	srne	r1
800052d8:	e1 e1 00 01 	and	r1,r0,r1
800052dc:	c0 c0       	breq	800052f4 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
800052de:	f2 0b 18 00 	cp.b	r11,r9
800052e2:	c0 70       	breq	800052f0 <fat_entry_shortname+0xc4>
800052e4:	f2 c1 ff e0 	sub	r1,r9,-32
800052e8:	02 3b       	cp.w	r11,r1
800052ea:	c0 30       	breq	800052f0 <fat_entry_shortname+0xc4>
800052ec:	30 0c       	mov	r12,0
800052ee:	c1 a8       	rjmp	80005322 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800052f0:	58 09       	cp.w	r9,0
800052f2:	c0 b1       	brne	80005308 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800052f4:	48 f8       	lddpc	r8,80005330 <fat_entry_shortname+0x104>
800052f6:	11 89       	ld.ub	r9,r8[0x0]
800052f8:	30 08       	mov	r8,0
800052fa:	f0 09 18 00 	cp.b	r9,r8
800052fe:	c1 10       	breq	80005320 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80005300:	2f fa       	sub	r10,-1
80005302:	ae 0a       	st.h	r7[0x0],r10
80005304:	30 1c       	mov	r12,1
80005306:	c0 e8       	rjmp	80005322 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
80005308:	48 a9       	lddpc	r9,80005330 <fat_entry_shortname+0x104>
8000530a:	13 8b       	ld.ub	r11,r9[0x0]
8000530c:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
8000530e:	f2 0b 18 00 	cp.b	r11,r9
80005312:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
80005316:	2f fa       	sub	r10,-1
80005318:	5c 5a       	castu.b	r10
      u8_pos_entry++;
8000531a:	2f f8       	sub	r8,-1
8000531c:	5c 58       	castu.b	r8
   }
8000531e:	c9 ab       	rjmp	80005252 <fat_entry_shortname+0x26>
80005320:	30 1c       	mov	r12,1
}
80005322:	2f ed       	sub	sp,-8
80005324:	d8 32       	popm	r0-r7,pc
80005326:	00 00       	add	r0,r0
80005328:	00 00       	add	r0,r0
8000532a:	14 48       	or	r8,r10
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	50 80       	stdsp	sp[0x20],r0
80005330:	00 00       	add	r0,r0
80005332:	14 49       	or	r9,r10

80005334 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
80005334:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005336:	f0 1f 00 10 	mcall	80005374 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000533a:	49 08       	lddpc	r8,80005378 <fat_get_entry_info+0x44>
8000533c:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005340:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80005342:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80005346:	f0 c9 ff fc 	sub	r9,r8,-4
8000534a:	15 8b       	ld.ub	r11,r10[0x0]
8000534c:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000534e:	15 9a       	ld.ub	r10,r10[0x1]
80005350:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80005352:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80005356:	15 8b       	ld.ub	r11,r10[0x0]
80005358:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000535a:	15 9a       	ld.ub	r10,r10[0x1]
8000535c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000535e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80005360:	2f 88       	sub	r8,-8
80005362:	19 89       	ld.ub	r9,r12[0x0]
80005364:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80005366:	19 99       	ld.ub	r9,r12[0x1]
80005368:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000536a:	19 a9       	ld.ub	r9,r12[0x2]
8000536c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000536e:	19 b9       	ld.ub	r9,r12[0x3]
80005370:	b0 89       	st.b	r8[0x0],r9
}
80005372:	d8 02       	popm	pc
80005374:	80 00       	ld.sh	r0,r0[0x0]
80005376:	50 80       	stdsp	sp[0x20],r0
80005378:	00 00       	add	r0,r0
8000537a:	11 b8       	ld.ub	r8,r8[0x3]

8000537c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000537c:	eb cd 40 80 	pushm	r7,lr
80005380:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80005382:	f0 1f 00 14 	mcall	800053d0 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80005386:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80005388:	58 08       	cp.w	r8,0
8000538a:	c0 61       	brne	80005396 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000538c:	30 a9       	mov	r9,10
8000538e:	49 28       	lddpc	r8,800053d4 <fat_entry_check+0x58>
80005390:	b0 89       	st.b	r8[0x0],r9
80005392:	30 07       	mov	r7,0
      return false;
80005394:	c1 a8       	rjmp	800053c8 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80005396:	30 ba       	mov	r10,11
80005398:	48 f9       	lddpc	r9,800053d4 <fat_entry_check+0x58>
8000539a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000539c:	3e 59       	mov	r9,-27
8000539e:	f2 08 18 00 	cp.b	r8,r9
800053a2:	c1 20       	breq	800053c6 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
800053a4:	32 e9       	mov	r9,46
800053a6:	f2 08 18 00 	cp.b	r8,r9
800053aa:	c0 e0       	breq	800053c6 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
800053ac:	f9 38 00 0b 	ld.ub	r8,r12[11]
800053b0:	10 99       	mov	r9,r8
800053b2:	e2 19 00 08 	andl	r9,0x8,COH
800053b6:	c0 81       	brne	800053c6 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
800053b8:	e2 18 00 10 	andl	r8,0x10,COH
800053bc:	c0 60       	breq	800053c8 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
800053be:	ec 17 00 01 	eorl	r7,0x1
800053c2:	5c 57       	castu.b	r7
800053c4:	c0 28       	rjmp	800053c8 <fat_entry_check+0x4c>
800053c6:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
800053c8:	0e 9c       	mov	r12,r7
800053ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800053ce:	00 00       	add	r0,r0
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	50 80       	stdsp	sp[0x20],r0
800053d4:	00 00       	add	r0,r0
800053d6:	14 48       	or	r8,r10

800053d8 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800053d8:	48 58       	lddpc	r8,800053ec <fat_cache_reset+0x14>
800053da:	3f f9       	mov	r9,-1
800053dc:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
800053de:	30 09       	mov	r9,0
800053e0:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800053e4:	3f f9       	mov	r9,-1
800053e6:	91 39       	st.w	r8[0xc],r9
}
800053e8:	5e fc       	retal	r12
800053ea:	00 00       	add	r0,r0
800053ec:	00 00       	add	r0,r0
800053ee:	14 80       	andn	r0,r10

800053f0 <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800053f0:	30 19       	mov	r9,1
800053f2:	48 38       	lddpc	r8,800053fc <fat_cache_mark_sector_as_dirty+0xc>
800053f4:	f1 69 00 08 	st.b	r8[8],r9
}
800053f8:	5e fc       	retal	r12
800053fa:	00 00       	add	r0,r0
800053fc:	00 00       	add	r0,r0
800053fe:	14 80       	andn	r0,r10

80005400 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
80005400:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
80005402:	f0 1f 00 11 	mcall	80005444 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
80005406:	f0 1f 00 11 	mcall	80005448 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
8000540a:	49 18       	lddpc	r8,8000544c <fat_write_entry_file+0x4c>
8000540c:	11 a9       	ld.ub	r9,r8[0x2]
8000540e:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80005412:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
80005416:	f0 c9 ff fc 	sub	r9,r8,-4
8000541a:	13 9b       	ld.ub	r11,r9[0x1]
8000541c:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000541e:	13 8b       	ld.ub	r11,r9[0x0]
80005420:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
80005422:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80005426:	13 bb       	ld.ub	r11,r9[0x3]
80005428:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000542a:	13 a9       	ld.ub	r9,r9[0x2]
8000542c:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
8000542e:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80005430:	2f 88       	sub	r8,-8
80005432:	11 b9       	ld.ub	r9,r8[0x3]
80005434:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80005436:	11 a9       	ld.ub	r9,r8[0x2]
80005438:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000543a:	11 99       	ld.ub	r9,r8[0x1]
8000543c:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000543e:	11 88       	ld.ub	r8,r8[0x0]
80005440:	b8 b8       	st.b	r12[0x3],r8
}
80005442:	d8 02       	popm	pc
80005444:	80 00       	ld.sh	r0,r0[0x0]
80005446:	53 f0       	stdsp	sp[0xfc],r0
80005448:	80 00       	ld.sh	r0,r0[0x0]
8000544a:	50 80       	stdsp	sp[0x20],r0
8000544c:	00 00       	add	r0,r0
8000544e:	11 b8       	ld.ub	r8,r8[0x3]

80005450 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80005450:	49 88       	lddpc	r8,800054b0 <fat_check_nav_access_file+0x60>
80005452:	11 89       	ld.ub	r9,r8[0x0]
80005454:	30 08       	mov	r8,0
80005456:	f0 09 18 00 	cp.b	r9,r8
8000545a:	c2 a0       	breq	800054ae <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000545c:	49 68       	lddpc	r8,800054b4 <fat_check_nav_access_file+0x64>
8000545e:	11 89       	ld.ub	r9,r8[0x0]
80005460:	49 68       	lddpc	r8,800054b8 <fat_check_nav_access_file+0x68>
80005462:	11 88       	ld.ub	r8,r8[0x0]
80005464:	f0 09 18 00 	cp.b	r9,r8
80005468:	c2 31       	brne	800054ae <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000546a:	49 38       	lddpc	r8,800054b4 <fat_check_nav_access_file+0x64>
8000546c:	70 89       	ld.w	r9,r8[0x20]
8000546e:	49 38       	lddpc	r8,800054b8 <fat_check_nav_access_file+0x68>
80005470:	70 88       	ld.w	r8,r8[0x20]
80005472:	10 39       	cp.w	r9,r8
80005474:	c1 d1       	brne	800054ae <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80005476:	49 28       	lddpc	r8,800054bc <fat_check_nav_access_file+0x6c>
80005478:	90 19       	ld.sh	r9,r8[0x2]
8000547a:	48 e8       	lddpc	r8,800054b0 <fat_check_nav_access_file+0x60>
8000547c:	90 18       	ld.sh	r8,r8[0x2]
8000547e:	f0 09 19 00 	cp.h	r9,r8
80005482:	c1 61       	brne	800054ae <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80005484:	58 0c       	cp.w	r12,0
80005486:	c0 b0       	breq	8000549c <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80005488:	48 e8       	lddpc	r8,800054c0 <fat_check_nav_access_file+0x70>
8000548a:	11 89       	ld.ub	r9,r8[0x0]
8000548c:	30 08       	mov	r8,0
8000548e:	f0 09 18 00 	cp.b	r9,r8
80005492:	c0 e0       	breq	800054ae <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80005494:	32 89       	mov	r9,40
80005496:	48 c8       	lddpc	r8,800054c4 <fat_check_nav_access_file+0x74>
80005498:	b0 89       	st.b	r8[0x0],r9
8000549a:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000549c:	48 98       	lddpc	r8,800054c0 <fat_check_nav_access_file+0x70>
8000549e:	11 88       	ld.ub	r8,r8[0x0]
800054a0:	e2 18 00 02 	andl	r8,0x2,COH
800054a4:	c0 50       	breq	800054ae <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
800054a6:	32 99       	mov	r9,41
800054a8:	48 78       	lddpc	r8,800054c4 <fat_check_nav_access_file+0x74>
800054aa:	b0 89       	st.b	r8[0x0],r9
800054ac:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
800054ae:	5e ff       	retal	1
800054b0:	00 00       	add	r0,r0
800054b2:	14 40       	or	r0,r10
800054b4:	00 00       	add	r0,r0
800054b6:	13 f8       	ld.ub	r8,r9[0x7]
800054b8:	00 00       	add	r0,r0
800054ba:	14 4c       	or	r12,r10
800054bc:	00 00       	add	r0,r0
800054be:	14 44       	or	r4,r10
800054c0:	00 00       	add	r0,r0
800054c2:	14 30       	cp.w	r0,r10
800054c4:	00 00       	add	r0,r0
800054c6:	14 48       	or	r8,r10

800054c8 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
800054c8:	d4 21       	pushm	r4-r7,lr
800054ca:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
800054cc:	58 0c       	cp.w	r12,0
800054ce:	c6 20       	breq	80005592 <fat_invert_nav+0xca>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
800054d0:	1a 97       	mov	r7,sp
800054d2:	4b 28       	lddpc	r8,80005598 <fat_invert_nav+0xd0>
800054d4:	70 09       	ld.w	r9,r8[0x0]
800054d6:	50 09       	stdsp	sp[0x0],r9
800054d8:	70 19       	ld.w	r9,r8[0x4]
800054da:	50 19       	stdsp	sp[0x4],r9
800054dc:	70 29       	ld.w	r9,r8[0x8]
800054de:	50 29       	stdsp	sp[0x8],r9
800054e0:	70 39       	ld.w	r9,r8[0xc]
800054e2:	50 39       	stdsp	sp[0xc],r9
800054e4:	fa c9 ff f0 	sub	r9,sp,-16
800054e8:	f0 ca ff f0 	sub	r10,r8,-16
800054ec:	74 0b       	ld.w	r11,r10[0x0]
800054ee:	93 0b       	st.w	r9[0x0],r11
800054f0:	74 1b       	ld.w	r11,r10[0x4]
800054f2:	93 1b       	st.w	r9[0x4],r11
800054f4:	74 2b       	ld.w	r11,r10[0x8]
800054f6:	93 2b       	st.w	r9[0x8],r11
800054f8:	74 3a       	ld.w	r10,r10[0xc]
800054fa:	93 3a       	st.w	r9[0xc],r10
800054fc:	fa c9 ff e0 	sub	r9,sp,-32
80005500:	f0 ca ff e0 	sub	r10,r8,-32
80005504:	74 0b       	ld.w	r11,r10[0x0]
80005506:	93 0b       	st.w	r9[0x0],r11
80005508:	74 1b       	ld.w	r11,r10[0x4]
8000550a:	93 1b       	st.w	r9[0x4],r11
8000550c:	74 2b       	ld.w	r11,r10[0x8]
8000550e:	93 2b       	st.w	r9[0x8],r11
80005510:	74 3a       	ld.w	r10,r10[0xc]
80005512:	93 3a       	st.w	r9[0xc],r10
80005514:	70 c9       	ld.w	r9,r8[0x30]
80005516:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80005518:	f8 c6 00 01 	sub	r6,r12,1
8000551c:	5c 56       	castu.b	r6
8000551e:	ec 04 10 34 	mul	r4,r6,52
80005522:	49 f9       	lddpc	r9,8000559c <fat_invert_nav+0xd4>
80005524:	12 04       	add	r4,r9
80005526:	33 45       	mov	r5,52
80005528:	0a 9a       	mov	r10,r5
8000552a:	08 9b       	mov	r11,r4
8000552c:	10 9c       	mov	r12,r8
8000552e:	f0 1f 00 1d 	mcall	800055a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80005532:	0a 9a       	mov	r10,r5
80005534:	1a 9b       	mov	r11,sp
80005536:	08 9c       	mov	r12,r4
80005538:	f0 1f 00 1a 	mcall	800055a0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000553c:	49 ac       	lddpc	r12,800055a4 <fat_invert_nav+0xdc>
8000553e:	78 08       	ld.w	r8,r12[0x0]
80005540:	50 08       	stdsp	sp[0x0],r8
80005542:	78 18       	ld.w	r8,r12[0x4]
80005544:	50 18       	stdsp	sp[0x4],r8
80005546:	78 28       	ld.w	r8,r12[0x8]
80005548:	50 28       	stdsp	sp[0x8],r8
8000554a:	78 38       	ld.w	r8,r12[0xc]
8000554c:	50 38       	stdsp	sp[0xc],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000554e:	ec 04 15 04 	lsl	r4,r6,0x4
80005552:	49 68       	lddpc	r8,800055a8 <fat_invert_nav+0xe0>
80005554:	10 04       	add	r4,r8
80005556:	31 05       	mov	r5,16
80005558:	0a 9a       	mov	r10,r5
8000555a:	08 9b       	mov	r11,r4
8000555c:	f0 1f 00 11 	mcall	800055a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80005560:	0a 9a       	mov	r10,r5
80005562:	1a 9b       	mov	r11,sp
80005564:	08 9c       	mov	r12,r4
80005566:	f0 1f 00 0f 	mcall	800055a0 <fat_invert_nav+0xd8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000556a:	49 14       	lddpc	r4,800055ac <fat_invert_nav+0xe4>
8000556c:	30 45       	mov	r5,4
8000556e:	0a 9a       	mov	r10,r5
80005570:	08 9b       	mov	r11,r4
80005572:	1a 9c       	mov	r12,sp
80005574:	f0 1f 00 0b 	mcall	800055a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80005578:	48 e8       	lddpc	r8,800055b0 <fat_invert_nav+0xe8>
8000557a:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000557e:	0a 9a       	mov	r10,r5
80005580:	0c 9b       	mov	r11,r6
80005582:	08 9c       	mov	r12,r4
80005584:	f0 1f 00 07 	mcall	800055a0 <fat_invert_nav+0xd8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80005588:	0a 9a       	mov	r10,r5
8000558a:	1a 9b       	mov	r11,sp
8000558c:	0c 9c       	mov	r12,r6
8000558e:	f0 1f 00 05 	mcall	800055a0 <fat_invert_nav+0xd8>
}
80005592:	2f 3d       	sub	sp,-52
80005594:	d8 22       	popm	r4-r7,pc
80005596:	00 00       	add	r0,r0
80005598:	00 00       	add	r0,r0
8000559a:	13 f8       	ld.ub	r8,r9[0x7]
8000559c:	00 00       	add	r0,r0
8000559e:	14 4c       	or	r12,r10
800055a0:	80 00       	ld.sh	r0,r0[0x0]
800055a2:	9f 52       	st.w	pc[0x14],r2
800055a4:	00 00       	add	r0,r0
800055a6:	11 b8       	ld.ub	r8,r8[0x3]
800055a8:	00 00       	add	r0,r0
800055aa:	14 30       	cp.w	r0,r10
800055ac:	00 00       	add	r0,r0
800055ae:	14 44       	or	r4,r10
800055b0:	00 00       	add	r0,r0
800055b2:	14 40       	or	r0,r10

800055b4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
800055b4:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800055b6:	49 08       	lddpc	r8,800055f4 <fat_cache_flush+0x40>
800055b8:	f1 39 00 08 	ld.ub	r9,r8[8]
800055bc:	30 18       	mov	r8,1
800055be:	f0 09 18 00 	cp.b	r9,r8
800055c2:	c1 81       	brne	800055f2 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800055c4:	48 c8       	lddpc	r8,800055f4 <fat_cache_flush+0x40>
800055c6:	30 09       	mov	r9,0
800055c8:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800055cc:	11 8c       	ld.ub	r12,r8[0x0]
800055ce:	f0 1f 00 0b 	mcall	800055f8 <fat_cache_flush+0x44>
800055d2:	c0 50       	breq	800055dc <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
800055d4:	31 49       	mov	r9,20
800055d6:	48 a8       	lddpc	r8,800055fc <fat_cache_flush+0x48>
800055d8:	b0 89       	st.b	r8[0x0],r9
800055da:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800055dc:	48 68       	lddpc	r8,800055f4 <fat_cache_flush+0x40>
800055de:	48 9a       	lddpc	r10,80005600 <fat_cache_flush+0x4c>
800055e0:	70 1b       	ld.w	r11,r8[0x4]
800055e2:	11 8c       	ld.ub	r12,r8[0x0]
800055e4:	f0 1f 00 08 	mcall	80005604 <fat_cache_flush+0x50>
800055e8:	c0 50       	breq	800055f2 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
800055ea:	30 19       	mov	r9,1
800055ec:	48 48       	lddpc	r8,800055fc <fat_cache_flush+0x48>
800055ee:	b0 89       	st.b	r8[0x0],r9
800055f0:	d8 0a       	popm	pc,r12=0
         return false;
800055f2:	da 0a       	popm	pc,r12=1
800055f4:	00 00       	add	r0,r0
800055f6:	14 80       	andn	r0,r10
800055f8:	80 00       	ld.sh	r0,r0[0x0]
800055fa:	7b 54       	ld.w	r4,sp[0x54]
800055fc:	00 00       	add	r0,r0
800055fe:	14 48       	or	r8,r10
80005600:	00 00       	add	r0,r0
80005602:	11 f8       	ld.ub	r8,r8[0x7]
80005604:	80 00       	ld.sh	r0,r0[0x0]
80005606:	7b 84       	ld.w	r4,sp[0x60]

80005608 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
80005608:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
8000560a:	e0 6a 02 00 	mov	r10,512
8000560e:	30 0b       	mov	r11,0
80005610:	48 2c       	lddpc	r12,80005618 <fat_cache_clear+0x10>
80005612:	f0 1f 00 03 	mcall	8000561c <fat_cache_clear+0x14>
}
80005616:	d8 02       	popm	pc
80005618:	00 00       	add	r0,r0
8000561a:	11 f8       	ld.ub	r8,r8[0x7]
8000561c:	80 00       	ld.sh	r0,r0[0x0]
8000561e:	a0 9a       	st.b	r0[0x1],r10

80005620 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80005620:	eb cd 40 80 	pushm	r7,lr
80005624:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80005626:	49 78       	lddpc	r8,80005680 <fat_cache_read_sector+0x60>
80005628:	11 89       	ld.ub	r9,r8[0x0]
8000562a:	49 78       	lddpc	r8,80005684 <fat_cache_read_sector+0x64>
8000562c:	11 88       	ld.ub	r8,r8[0x0]
8000562e:	f0 09 18 00 	cp.b	r9,r8
80005632:	c0 91       	brne	80005644 <fat_cache_read_sector+0x24>
80005634:	49 38       	lddpc	r8,80005680 <fat_cache_read_sector+0x60>
80005636:	70 19       	ld.w	r9,r8[0x4]
80005638:	49 48       	lddpc	r8,80005688 <fat_cache_read_sector+0x68>
8000563a:	70 08       	ld.w	r8,r8[0x0]
8000563c:	10 39       	cp.w	r9,r8
8000563e:	c0 31       	brne	80005644 <fat_cache_read_sector+0x24>
80005640:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80005644:	f0 1f 00 12 	mcall	8000568c <fat_cache_read_sector+0x6c>
80005648:	c1 90       	breq	8000567a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
8000564a:	f0 1f 00 12 	mcall	80005690 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000564e:	48 f8       	lddpc	r8,80005688 <fat_cache_read_sector+0x68>
80005650:	70 0b       	ld.w	r11,r8[0x0]
80005652:	48 c8       	lddpc	r8,80005680 <fat_cache_read_sector+0x60>
80005654:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80005656:	58 07       	cp.w	r7,0
80005658:	c0 c0       	breq	80005670 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000565a:	48 fa       	lddpc	r10,80005694 <fat_cache_read_sector+0x74>
8000565c:	48 a8       	lddpc	r8,80005684 <fat_cache_read_sector+0x64>
8000565e:	11 8c       	ld.ub	r12,r8[0x0]
80005660:	f0 1f 00 0e 	mcall	80005698 <fat_cache_read_sector+0x78>
80005664:	c0 60       	breq	80005670 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80005666:	30 19       	mov	r9,1
80005668:	48 d8       	lddpc	r8,8000569c <fat_cache_read_sector+0x7c>
8000566a:	b0 89       	st.b	r8[0x0],r9
8000566c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80005670:	48 58       	lddpc	r8,80005684 <fat_cache_read_sector+0x64>
80005672:	11 89       	ld.ub	r9,r8[0x0]
80005674:	48 38       	lddpc	r8,80005680 <fat_cache_read_sector+0x60>
80005676:	b0 89       	st.b	r8[0x0],r9
80005678:	30 1c       	mov	r12,1
   return true;
}
8000567a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000567e:	00 00       	add	r0,r0
80005680:	00 00       	add	r0,r0
80005682:	14 80       	andn	r0,r10
80005684:	00 00       	add	r0,r0
80005686:	13 f8       	ld.ub	r8,r9[0x7]
80005688:	00 00       	add	r0,r0
8000568a:	11 b4       	ld.ub	r4,r8[0x3]
8000568c:	80 00       	ld.sh	r0,r0[0x0]
8000568e:	55 b4       	stdsp	sp[0x16c],r4
80005690:	80 00       	ld.sh	r0,r0[0x0]
80005692:	53 d8       	stdsp	sp[0xf4],r8
80005694:	00 00       	add	r0,r0
80005696:	11 f8       	ld.ub	r8,r8[0x7]
80005698:	80 00       	ld.sh	r0,r0[0x0]
8000569a:	7b 68       	ld.w	r8,sp[0x58]
8000569c:	00 00       	add	r0,r0
8000569e:	14 48       	or	r8,r10

800056a0 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
800056a0:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
800056a2:	49 f8       	lddpc	r8,8000571c <fat_cluster_readnext+0x7c>
800056a4:	11 89       	ld.ub	r9,r8[0x0]
800056a6:	30 38       	mov	r8,3
800056a8:	f0 09 18 00 	cp.b	r9,r8
800056ac:	c0 61       	brne	800056b8 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
800056ae:	49 d8       	lddpc	r8,80005720 <fat_cluster_readnext+0x80>
800056b0:	90 09       	ld.sh	r9,r8[0x0]
800056b2:	2f c9       	sub	r9,-4
800056b4:	b0 09       	st.h	r8[0x0],r9
800056b6:	c0 58       	rjmp	800056c0 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
800056b8:	49 a8       	lddpc	r8,80005720 <fat_cluster_readnext+0x80>
800056ba:	90 09       	ld.sh	r9,r8[0x0]
800056bc:	2f e9       	sub	r9,-2
800056be:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800056c0:	49 88       	lddpc	r8,80005720 <fat_cluster_readnext+0x80>
800056c2:	90 09       	ld.sh	r9,r8[0x0]
800056c4:	e0 68 02 00 	mov	r8,512
800056c8:	f0 09 19 00 	cp.h	r9,r8
800056cc:	c0 c1       	brne	800056e4 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800056ce:	30 09       	mov	r9,0
800056d0:	49 48       	lddpc	r8,80005720 <fat_cluster_readnext+0x80>
800056d2:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
800056d4:	49 48       	lddpc	r8,80005724 <fat_cluster_readnext+0x84>
800056d6:	70 09       	ld.w	r9,r8[0x0]
800056d8:	2f f9       	sub	r9,-1
800056da:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800056dc:	30 1c       	mov	r12,1
800056de:	f0 1f 00 13 	mcall	80005728 <fat_cluster_readnext+0x88>
800056e2:	c1 b0       	breq	80005718 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800056e4:	49 28       	lddpc	r8,8000572c <fat_cluster_readnext+0x8c>
800056e6:	2f c8       	sub	r8,-4
800056e8:	48 e9       	lddpc	r9,80005720 <fat_cluster_readnext+0x80>
800056ea:	92 89       	ld.uh	r9,r9[0x0]
800056ec:	49 1a       	lddpc	r10,80005730 <fat_cluster_readnext+0x90>
800056ee:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800056f2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800056f4:	12 0a       	add	r10,r9
800056f6:	15 9a       	ld.ub	r10,r10[0x1]
800056f8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800056fa:	48 9a       	lddpc	r10,8000571c <fat_cluster_readnext+0x7c>
800056fc:	15 8b       	ld.ub	r11,r10[0x0]
800056fe:	30 3a       	mov	r10,3
80005700:	f4 0b 18 00 	cp.b	r11,r10
80005704:	c0 20       	breq	80005708 <fat_cluster_readnext+0x68>
80005706:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80005708:	48 aa       	lddpc	r10,80005730 <fat_cluster_readnext+0x90>
8000570a:	f4 09 00 09 	add	r9,r10,r9
8000570e:	13 aa       	ld.ub	r10,r9[0x2]
80005710:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80005712:	13 b9       	ld.ub	r9,r9[0x3]
80005714:	b0 89       	st.b	r8[0x0],r9
80005716:	30 1c       	mov	r12,1
   }
   return true;
}
80005718:	d8 02       	popm	pc
8000571a:	00 00       	add	r0,r0
8000571c:	00 00       	add	r0,r0
8000571e:	14 44       	or	r4,r10
80005720:	00 00       	add	r0,r0
80005722:	11 c8       	ld.ub	r8,r8[0x4]
80005724:	00 00       	add	r0,r0
80005726:	11 b4       	ld.ub	r4,r8[0x3]
80005728:	80 00       	ld.sh	r0,r0[0x0]
8000572a:	56 20       	stdsp	sp[0x188],r0
8000572c:	00 00       	add	r0,r0
8000572e:	14 98       	mov	r8,r10
80005730:	00 00       	add	r0,r0
80005732:	11 f8       	ld.ub	r8,r8[0x7]

80005734 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80005734:	d4 31       	pushm	r0-r7,lr
80005736:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80005738:	fe f8 02 18 	ld.w	r8,pc[536]
8000573c:	11 88       	ld.ub	r8,r8[0x0]
8000573e:	30 39       	mov	r9,3
80005740:	f2 08 18 00 	cp.b	r8,r9
80005744:	c0 d1       	brne	8000575e <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80005746:	fe fa 02 0e 	ld.w	r10,pc[526]
8000574a:	74 09       	ld.w	r9,r10[0x0]
8000574c:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
8000574e:	15 bb       	ld.ub	r11,r10[0x3]
80005750:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80005754:	a3 6b       	lsl	r11,0x2
80005756:	fe fa 02 02 	ld.w	r10,pc[514]
8000575a:	b4 0b       	st.h	r10[0x0],r11
8000575c:	c2 08       	rjmp	8000579c <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
8000575e:	30 29       	mov	r9,2
80005760:	f2 08 18 00 	cp.b	r8,r9
80005764:	c0 81       	brne	80005774 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80005766:	4f ca       	lddpc	r10,80005954 <fat_cluster_val+0x220>
80005768:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
8000576a:	15 bb       	ld.ub	r11,r10[0x3]
8000576c:	a1 7b       	lsl	r11,0x1
8000576e:	4f ba       	lddpc	r10,80005958 <fat_cluster_val+0x224>
80005770:	b4 0b       	st.h	r10[0x0],r11
80005772:	c1 58       	rjmp	8000579c <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80005774:	30 19       	mov	r9,1
80005776:	f2 08 18 00 	cp.b	r8,r9
8000577a:	c0 30       	breq	80005780 <fat_cluster_val+0x4c>
8000577c:	30 09       	mov	r9,0
8000577e:	c0 f8       	rjmp	8000579c <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80005780:	4f 59       	lddpc	r9,80005954 <fat_cluster_val+0x220>
80005782:	72 09       	ld.w	r9,r9[0x0]
80005784:	4f 5a       	lddpc	r10,80005958 <fat_cluster_val+0x224>
80005786:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
8000578a:	12 0b       	add	r11,r9
8000578c:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
8000578e:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80005792:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80005796:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000579a:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
8000579c:	58 05       	cp.w	r5,0
8000579e:	c2 20       	breq	800057e2 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
800057a0:	4e fa       	lddpc	r10,8000595c <fat_cluster_val+0x228>
800057a2:	74 0a       	ld.w	r10,r10[0x0]
800057a4:	14 39       	cp.w	r9,r10
800057a6:	c0 32       	brcc	800057ac <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
800057a8:	4e da       	lddpc	r10,8000595c <fat_cluster_val+0x228>
800057aa:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
800057ac:	4e da       	lddpc	r10,80005960 <fat_cluster_val+0x22c>
800057ae:	74 0a       	ld.w	r10,r10[0x0]
800057b0:	14 39       	cp.w	r9,r10
800057b2:	e0 88 00 04 	brls	800057ba <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
800057b6:	4e ba       	lddpc	r10,80005960 <fat_cluster_val+0x22c>
800057b8:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
800057ba:	30 1a       	mov	r10,1
800057bc:	f4 08 18 00 	cp.b	r8,r10
800057c0:	c1 11       	brne	800057e2 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800057c2:	4e 68       	lddpc	r8,80005958 <fat_cluster_val+0x224>
800057c4:	90 0a       	ld.sh	r10,r8[0x0]
800057c6:	e0 68 01 ff 	mov	r8,511
800057ca:	f0 0a 19 00 	cp.h	r10,r8
800057ce:	c0 a1       	brne	800057e2 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
800057d0:	f2 c8 ff ff 	sub	r8,r9,-1
800057d4:	4e 3a       	lddpc	r10,80005960 <fat_cluster_val+0x22c>
800057d6:	74 0a       	ld.w	r10,r10[0x0]
800057d8:	14 38       	cp.w	r8,r10
800057da:	e0 88 00 04 	brls	800057e2 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
800057de:	4e 1a       	lddpc	r10,80005960 <fat_cluster_val+0x22c>
800057e0:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
800057e2:	4e 18       	lddpc	r8,80005964 <fat_cluster_val+0x230>
800057e4:	70 48       	ld.w	r8,r8[0x10]
800057e6:	10 09       	add	r9,r8
800057e8:	4e 08       	lddpc	r8,80005968 <fat_cluster_val+0x234>
800057ea:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
800057ec:	30 1c       	mov	r12,1
800057ee:	f0 1f 00 60 	mcall	8000596c <fat_cluster_val+0x238>
800057f2:	e0 80 00 ad 	breq	8000594c <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
800057f6:	4d 98       	lddpc	r8,80005958 <fat_cluster_val+0x224>
800057f8:	90 08       	ld.sh	r8,r8[0x0]
800057fa:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
800057fe:	4d d9       	lddpc	r9,80005970 <fat_cluster_val+0x23c>
80005800:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80005802:	0c 97       	mov	r7,r6
80005804:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80005806:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80005808:	ec c4 ff fe 	sub	r4,r6,-2
8000580c:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
8000580e:	ec c3 ff fd 	sub	r3,r6,-3
80005812:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80005814:	4c f9       	lddpc	r9,80005950 <fat_cluster_val+0x21c>
80005816:	13 8a       	ld.ub	r10,r9[0x0]
80005818:	30 19       	mov	r9,1
8000581a:	f2 0a 18 00 	cp.b	r10,r9
8000581e:	c1 11       	brne	80005840 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80005820:	e0 69 01 ff 	mov	r9,511
80005824:	f2 08 19 00 	cp.h	r8,r9
80005828:	c0 c1       	brne	80005840 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
8000582a:	4d 08       	lddpc	r8,80005968 <fat_cluster_val+0x234>
8000582c:	70 09       	ld.w	r9,r8[0x0]
8000582e:	2f f9       	sub	r9,-1
80005830:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80005832:	30 1c       	mov	r12,1
80005834:	f0 1f 00 4e 	mcall	8000596c <fat_cluster_val+0x238>
80005838:	e0 80 00 8a 	breq	8000594c <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
8000583c:	4c d8       	lddpc	r8,80005970 <fat_cluster_val+0x23c>
8000583e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80005840:	58 05       	cp.w	r5,0
80005842:	c3 11       	brne	800058a4 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80005844:	4c 48       	lddpc	r8,80005954 <fat_cluster_val+0x220>
80005846:	f0 c9 ff fc 	sub	r9,r8,-4
8000584a:	f0 cc ff f9 	sub	r12,r8,-7
8000584e:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80005850:	2f a8       	sub	r8,-6
80005852:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80005854:	4b fa       	lddpc	r10,80005950 <fat_cluster_val+0x21c>
80005856:	15 8a       	ld.ub	r10,r10[0x0]
80005858:	30 3b       	mov	r11,3
8000585a:	f6 0a 18 00 	cp.b	r10,r11
8000585e:	c0 61       	brne	8000586a <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80005860:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80005862:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80005866:	b2 80       	st.b	r9[0x0],r0
80005868:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
8000586a:	30 0b       	mov	r11,0
8000586c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
8000586e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80005870:	30 19       	mov	r9,1
80005872:	f2 0a 18 00 	cp.b	r10,r9
80005876:	c0 20       	breq	8000587a <fat_cluster_val+0x146>
80005878:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000587a:	4b 79       	lddpc	r9,80005954 <fat_cluster_val+0x220>
8000587c:	13 b9       	ld.ub	r9,r9[0x3]
8000587e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80005882:	c0 c0       	breq	8000589a <fat_cluster_val+0x166>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80005884:	19 8b       	ld.ub	r11,r12[0x0]
80005886:	a5 8b       	lsr	r11,0x4
80005888:	11 89       	ld.ub	r9,r8[0x0]
8000588a:	f2 0a 15 04 	lsl	r10,r9,0x4
8000588e:	f6 0a 00 0a 	add	r10,r11,r10
80005892:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80005894:	a5 89       	lsr	r9,0x4
80005896:	b0 89       	st.b	r8[0x0],r9
80005898:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
8000589a:	11 89       	ld.ub	r9,r8[0x0]
8000589c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800058a0:	b0 89       	st.b	r8[0x0],r9
800058a2:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
800058a4:	4a b8       	lddpc	r8,80005950 <fat_cluster_val+0x21c>
800058a6:	11 88       	ld.ub	r8,r8[0x0]
800058a8:	30 19       	mov	r9,1
800058aa:	f2 08 18 00 	cp.b	r8,r9
800058ae:	c3 a1       	brne	80005922 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800058b0:	4a 98       	lddpc	r8,80005954 <fat_cluster_val+0x220>
800058b2:	11 b8       	ld.ub	r8,r8[0x3]
800058b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800058b8:	c1 10       	breq	800058da <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
800058ba:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
800058be:	4a 68       	lddpc	r8,80005954 <fat_cluster_val+0x220>
800058c0:	2f c8       	sub	r8,-4
800058c2:	11 b9       	ld.ub	r9,r8[0x3]
800058c4:	f2 0a 15 04 	lsl	r10,r9,0x4
800058c8:	14 05       	add	r5,r10
800058ca:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
800058cc:	a5 89       	lsr	r9,0x4
800058ce:	11 a8       	ld.ub	r8,r8[0x2]
800058d0:	a5 68       	lsl	r8,0x4
800058d2:	f2 08 00 0a 	add	r10,r9,r8
800058d6:	5c 5a       	castu.b	r10
800058d8:	c0 c8       	rjmp	800058f0 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
800058da:	49 f8       	lddpc	r8,80005954 <fat_cluster_val+0x220>
800058dc:	2f c8       	sub	r8,-4
800058de:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
800058e0:	16 9a       	mov	r10,r11
800058e2:	e2 1a 00 f0 	andl	r10,0xf0,COH
800058e6:	11 a8       	ld.ub	r8,r8[0x2]
800058e8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800058ec:	10 0a       	add	r10,r8
800058ee:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800058f0:	49 a8       	lddpc	r8,80005958 <fat_cluster_val+0x224>
800058f2:	90 09       	ld.sh	r9,r8[0x0]
800058f4:	e0 68 01 ff 	mov	r8,511
800058f8:	f0 09 19 00 	cp.h	r9,r8
800058fc:	c2 31       	brne	80005942 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
800058fe:	49 d8       	lddpc	r8,80005970 <fat_cluster_val+0x23c>
80005900:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80005902:	f0 1f 00 1d 	mcall	80005974 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80005906:	49 98       	lddpc	r8,80005968 <fat_cluster_val+0x234>
80005908:	70 09       	ld.w	r9,r8[0x0]
8000590a:	20 19       	sub	r9,1
8000590c:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
8000590e:	30 1c       	mov	r12,1
80005910:	f0 1f 00 17 	mcall	8000596c <fat_cluster_val+0x238>
80005914:	c1 c0       	breq	8000594c <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80005916:	49 78       	lddpc	r8,80005970 <fat_cluster_val+0x23c>
80005918:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
8000591c:	f0 1f 00 16 	mcall	80005974 <fat_cluster_val+0x240>
80005920:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80005922:	48 d9       	lddpc	r9,80005954 <fat_cluster_val+0x220>
80005924:	2f c9       	sub	r9,-4
80005926:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80005928:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
8000592a:	30 3b       	mov	r11,3
8000592c:	f6 08 18 00 	cp.b	r8,r11
80005930:	c0 91       	brne	80005942 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80005932:	13 98       	ld.ub	r8,r9[0x1]
80005934:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80005936:	e0 10 ff f0 	andl	r0,0xfff0
8000593a:	13 88       	ld.ub	r8,r9[0x0]
8000593c:	f0 00 00 00 	add	r0,r8,r0
80005940:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80005942:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80005944:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80005946:	f0 1f 00 0c 	mcall	80005974 <fat_cluster_val+0x240>
8000594a:	da 3a       	popm	r0-r7,pc,r12=1
8000594c:	d8 3a       	popm	r0-r7,pc,r12=0
8000594e:	00 00       	add	r0,r0
80005950:	00 00       	add	r0,r0
80005952:	14 44       	or	r4,r10
80005954:	00 00       	add	r0,r0
80005956:	14 98       	mov	r8,r10
80005958:	00 00       	add	r0,r0
8000595a:	11 c8       	ld.ub	r8,r8[0x4]
8000595c:	00 00       	add	r0,r0
8000595e:	14 2c       	rsub	r12,r10
80005960:	00 00       	add	r0,r0
80005962:	11 f4       	ld.ub	r4,r8[0x7]
80005964:	00 00       	add	r0,r0
80005966:	13 f8       	ld.ub	r8,r9[0x7]
80005968:	00 00       	add	r0,r0
8000596a:	11 b4       	ld.ub	r4,r8[0x3]
8000596c:	80 00       	ld.sh	r0,r0[0x0]
8000596e:	56 20       	stdsp	sp[0x188],r0
80005970:	00 00       	add	r0,r0
80005972:	11 f8       	ld.ub	r8,r8[0x7]
80005974:	80 00       	ld.sh	r0,r0[0x0]
80005976:	53 f0       	stdsp	sp[0xfc],r0

80005978 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80005978:	d4 31       	pushm	r0-r7,lr
8000597a:	20 2d       	sub	sp,8
8000597c:	18 93       	mov	r3,r12
8000597e:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80005980:	30 89       	mov	r9,8
80005982:	fe f8 02 8e 	ld.w	r8,pc[654]
80005986:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80005988:	30 38       	mov	r8,3
8000598a:	f0 0c 18 00 	cp.b	r12,r8
8000598e:	5f 0a       	sreq	r10
80005990:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80005992:	fe f9 02 82 	ld.w	r9,pc[642]
80005996:	13 89       	ld.ub	r9,r9[0x0]
80005998:	f0 09 18 00 	cp.b	r9,r8
8000599c:	5f 08       	sreq	r8
8000599e:	f5 e8 00 08 	and	r8,r10,r8
800059a2:	c0 60       	breq	800059ae <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800059a4:	3f fc       	mov	r12,-1
800059a6:	f0 1f 00 9d 	mcall	80005c18 <fat_cluster_list+0x2a0>
800059aa:	e0 80 01 2f 	breq	80005c08 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
800059ae:	fe f8 02 6e 	ld.w	r8,pc[622]
800059b2:	70 08       	ld.w	r8,r8[0x0]
800059b4:	58 08       	cp.w	r8,0
800059b6:	c3 b1       	brne	80005a2c <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
800059b8:	40 09       	lddsp	r9,sp[0x0]
800059ba:	58 09       	cp.w	r9,0
800059bc:	e0 81 01 26 	brne	80005c08 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
800059c0:	fe f8 02 54 	ld.w	r8,pc[596]
800059c4:	11 88       	ld.ub	r8,r8[0x0]
800059c6:	f0 ca 00 01 	sub	r10,r8,1
800059ca:	30 19       	mov	r9,1
800059cc:	f2 0a 18 00 	cp.b	r10,r9
800059d0:	e0 8b 00 23 	brhi	80005a16 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
800059d4:	fe f8 02 48 	ld.w	r8,pc[584]
800059d8:	70 18       	ld.w	r8,r8[0x4]
800059da:	fe f9 02 46 	ld.w	r9,pc[582]
800059de:	f3 19 00 1a 	ld.uh	r9,r9[26]
800059e2:	12 38       	cp.w	r8,r9
800059e4:	c1 32       	brcc	80005a0a <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
800059e6:	fe f9 02 36 	ld.w	r9,pc[566]
800059ea:	fe fa 02 36 	ld.w	r10,pc[566]
800059ee:	74 4b       	ld.w	r11,r10[0x10]
800059f0:	16 08       	add	r8,r11
800059f2:	f5 1b 00 18 	ld.uh	r11,r10[24]
800059f6:	16 08       	add	r8,r11
800059f8:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
800059fa:	f5 1a 00 1a 	ld.uh	r10,r10[26]
800059fe:	72 18       	ld.w	r8,r9[0x4]
80005a00:	f4 08 01 08 	sub	r8,r10,r8
80005a04:	93 18       	st.w	r9[0x4],r8
80005a06:	30 1c       	mov	r12,1
            return true;
80005a08:	c0 19       	rjmp	80005c0a <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80005a0a:	31 a9       	mov	r9,26
80005a0c:	fe f8 02 04 	ld.w	r8,pc[516]
80005a10:	b0 89       	st.b	r8[0x0],r9
80005a12:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80005a14:	cf b8       	rjmp	80005c0a <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80005a16:	30 39       	mov	r9,3
80005a18:	f2 08 18 00 	cp.b	r8,r9
80005a1c:	c0 a1       	brne	80005a30 <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80005a1e:	fe f8 02 02 	ld.w	r8,pc[514]
80005a22:	70 69       	ld.w	r9,r8[0x18]
80005a24:	fe f8 02 00 	ld.w	r8,pc[512]
80005a28:	91 09       	st.w	r8[0x0],r9
80005a2a:	c0 38       	rjmp	80005a30 <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005a2c:	4f e9       	lddpc	r9,80005c24 <fat_cluster_list+0x2ac>
80005a2e:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80005a30:	30 38       	mov	r8,3
80005a32:	f0 03 18 00 	cp.b	r3,r8
80005a36:	c0 70       	breq	80005a44 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80005a38:	0e 9c       	mov	r12,r7
80005a3a:	f0 1f 00 7c 	mcall	80005c28 <fat_cluster_list+0x2b0>
80005a3e:	c0 70       	breq	80005a4c <fat_cluster_list+0xd4>
80005a40:	30 1c       	mov	r12,1
80005a42:	ce 48       	rjmp	80005c0a <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80005a44:	f0 1f 00 7a 	mcall	80005c2c <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80005a48:	f0 1f 00 7a 	mcall	80005c30 <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80005a4c:	4f 40       	lddpc	r0,80005c1c <fat_cluster_list+0x2a4>
80005a4e:	3f f8       	mov	r8,-1
80005a50:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80005a52:	00 96       	mov	r6,r0
80005a54:	4f 35       	lddpc	r5,80005c20 <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005a56:	4f 47       	lddpc	r7,80005c24 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80005a58:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80005a5a:	e0 c8 ff f9 	sub	r8,r0,-7
80005a5e:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80005a60:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80005a62:	6c 19       	ld.w	r9,r6[0x4]
80005a64:	0b 98       	ld.ub	r8,r5[0x1]
80005a66:	10 39       	cp.w	r9,r8
80005a68:	c4 32       	brcc	80005aee <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005a6a:	6a 4a       	ld.w	r10,r5[0x10]
80005a6c:	14 09       	add	r9,r10
80005a6e:	6a 5a       	ld.w	r10,r5[0x14]
80005a70:	14 09       	add	r9,r10
80005a72:	6e 0a       	ld.w	r10,r7[0x0]
80005a74:	20 2a       	sub	r10,2
80005a76:	f4 08 02 48 	mul	r8,r10,r8
80005a7a:	f2 08 00 08 	add	r8,r9,r8
80005a7e:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80005a80:	e2 03 18 00 	cp.b	r3,r1
80005a84:	c0 d1       	brne	80005a9e <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80005a86:	4e 67       	lddpc	r7,80005c1c <fat_cluster_list+0x2a4>
80005a88:	4e 68       	lddpc	r8,80005c20 <fat_cluster_list+0x2a8>
80005a8a:	11 99       	ld.ub	r9,r8[0x1]
80005a8c:	6e 18       	ld.w	r8,r7[0x4]
80005a8e:	f2 08 01 08 	sub	r8,r9,r8
80005a92:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80005a94:	f0 1f 00 68 	mcall	80005c34 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80005a98:	30 1c       	mov	r12,1
80005a9a:	8f 1c       	st.w	r7[0x4],r12
            return true;
80005a9c:	cb 78       	rjmp	80005c0a <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80005a9e:	0b 99       	ld.ub	r9,r5[0x1]
80005aa0:	40 1a       	lddsp	r10,sp[0x4]
80005aa2:	15 88       	ld.ub	r8,r10[0x0]
80005aa4:	f2 08 01 08 	sub	r8,r9,r8
80005aa8:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80005aaa:	e4 03 18 00 	cp.b	r3,r2
80005aae:	c2 01       	brne	80005aee <fat_cluster_list+0x176>
80005ab0:	4d 99       	lddpc	r9,80005c14 <fat_cluster_list+0x29c>
80005ab2:	13 88       	ld.ub	r8,r9[0x0]
80005ab4:	e4 08 18 00 	cp.b	r8,r2
80005ab8:	c1 b0       	breq	80005aee <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80005aba:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80005abc:	30 0c       	mov	r12,0
80005abe:	f0 1f 00 5f 	mcall	80005c38 <fat_cluster_list+0x2c0>
80005ac2:	e0 80 00 a3 	breq	80005c08 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80005ac6:	6e 09       	ld.w	r9,r7[0x0]
80005ac8:	f2 c8 ff ff 	sub	r8,r9,-1
80005acc:	8f 08       	st.w	r7[0x0],r8
80005ace:	6e 1a       	ld.w	r10,r7[0x4]
80005ad0:	14 38       	cp.w	r8,r10
80005ad2:	c0 a0       	breq	80005ae6 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80005ad4:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80005ad6:	08 19       	sub	r9,r4
80005ad8:	0b 98       	ld.ub	r8,r5[0x1]
80005ada:	b1 39       	mul	r9,r8
80005adc:	6c 18       	ld.w	r8,r6[0x4]
80005ade:	f2 08 00 08 	add	r8,r9,r8
80005ae2:	8d 18       	st.w	r6[0x4],r8
                  break;
80005ae4:	c0 58       	rjmp	80005aee <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80005ae6:	f0 1f 00 56 	mcall	80005c3c <fat_cluster_list+0x2c4>
80005aea:	ce e1       	brne	80005ac6 <fat_cluster_list+0x14e>
80005aec:	c8 e8       	rjmp	80005c08 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80005aee:	30 0c       	mov	r12,0
80005af0:	f0 1f 00 52 	mcall	80005c38 <fat_cluster_list+0x2c0>
80005af4:	e0 80 00 8a 	breq	80005c08 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80005af8:	f0 1f 00 52 	mcall	80005c40 <fat_cluster_list+0x2c8>
80005afc:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80005afe:	e4 0c 18 00 	cp.b	r12,r2
80005b02:	e0 80 00 83 	breq	80005c08 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80005b06:	01 89       	ld.ub	r9,r0[0x0]
80005b08:	3f f8       	mov	r8,-1
80005b0a:	f0 09 18 00 	cp.b	r9,r8
80005b0e:	c4 61       	brne	80005b9a <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80005b10:	e2 0c 18 00 	cp.b	r12,r1
80005b14:	c2 b1       	brne	80005b6a <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80005b16:	4c 28       	lddpc	r8,80005c1c <fat_cluster_list+0x2a4>
80005b18:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80005b1a:	4c b9       	lddpc	r9,80005c44 <fat_cluster_list+0x2cc>
80005b1c:	13 89       	ld.ub	r9,r9[0x0]
80005b1e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005b22:	4c aa       	lddpc	r10,80005c48 <fat_cluster_list+0x2d0>
80005b24:	f4 09 00 29 	add	r9,r10,r9<<0x2
80005b28:	72 2a       	ld.w	r10,r9[0x8]
80005b2a:	0e 1a       	sub	r10,r7
80005b2c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005b2e:	4b d9       	lddpc	r9,80005c20 <fat_cluster_list+0x2a8>
80005b30:	72 5b       	ld.w	r11,r9[0x14]
80005b32:	72 4a       	ld.w	r10,r9[0x10]
80005b34:	14 0b       	add	r11,r10
80005b36:	13 99       	ld.ub	r9,r9[0x1]
80005b38:	4b ba       	lddpc	r10,80005c24 <fat_cluster_list+0x2ac>
80005b3a:	74 0a       	ld.w	r10,r10[0x0]
80005b3c:	20 2a       	sub	r10,2
80005b3e:	f2 0a 02 4a 	mul	r10,r9,r10
80005b42:	f6 0a 00 0a 	add	r10,r11,r10
80005b46:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80005b48:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80005b4a:	30 38       	mov	r8,3
80005b4c:	f0 03 18 00 	cp.b	r3,r8
80005b50:	c0 30       	breq	80005b56 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80005b52:	f0 1f 00 39 	mcall	80005c34 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80005b56:	4b 28       	lddpc	r8,80005c1c <fat_cluster_list+0x2a4>
80005b58:	4b 39       	lddpc	r9,80005c24 <fat_cluster_list+0x2ac>
80005b5a:	72 09       	ld.w	r9,r9[0x0]
80005b5c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80005b5e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80005b60:	31 a9       	mov	r9,26
80005b62:	4a c8       	lddpc	r8,80005c10 <fat_cluster_list+0x298>
80005b64:	b0 89       	st.b	r8[0x0],r9
80005b66:	30 0c       	mov	r12,0
            return false;
80005b68:	c5 18       	rjmp	80005c0a <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80005b6a:	0b 98       	ld.ub	r8,r5[0x1]
80005b6c:	6c 19       	ld.w	r9,r6[0x4]
80005b6e:	f2 08 01 08 	sub	r8,r9,r8
80005b72:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80005b74:	40 0a       	lddsp	r10,sp[0x0]
80005b76:	58 0a       	cp.w	r10,0
80005b78:	c4 50       	breq	80005c02 <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	c4 31       	brne	80005c02 <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80005b7e:	6e 18       	ld.w	r8,r7[0x4]
80005b80:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80005b82:	e0 68 ff ff 	mov	r8,65535
80005b86:	ea 18 0f ff 	orh	r8,0xfff
80005b8a:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80005b8c:	30 1c       	mov	r12,1
80005b8e:	f0 1f 00 2b 	mcall	80005c38 <fat_cluster_list+0x2c0>
80005b92:	c3 b0       	breq	80005c08 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80005b94:	6c 08       	ld.w	r8,r6[0x0]
80005b96:	8f 18       	st.w	r7[0x4],r8
80005b98:	c3 58       	rjmp	80005c02 <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80005b9a:	e4 03 18 00 	cp.b	r3,r2
80005b9e:	c0 a1       	brne	80005bb2 <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80005ba0:	6e 09       	ld.w	r9,r7[0x0]
80005ba2:	2f f9       	sub	r9,-1
80005ba4:	6e 18       	ld.w	r8,r7[0x4]
80005ba6:	10 39       	cp.w	r9,r8
80005ba8:	c1 b0       	breq	80005bde <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80005baa:	f0 1f 00 23 	mcall	80005c34 <fat_cluster_list+0x2bc>
80005bae:	30 1c       	mov	r12,1
               return true;                              // End of segment
80005bb0:	c2 d8       	rjmp	80005c0a <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80005bb2:	40 09       	lddsp	r9,sp[0x0]
80005bb4:	58 09       	cp.w	r9,0
80005bb6:	c1 40       	breq	80005bde <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80005bb8:	6e 18       	ld.w	r8,r7[0x4]
80005bba:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80005bbc:	30 08       	mov	r8,0
80005bbe:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80005bc0:	0b 98       	ld.ub	r8,r5[0x1]
80005bc2:	6c 19       	ld.w	r9,r6[0x4]
80005bc4:	10 39       	cp.w	r9,r8
80005bc6:	c0 62       	brcc	80005bd2 <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80005bc8:	e0 68 ff ff 	mov	r8,65535
80005bcc:	ea 18 0f ff 	orh	r8,0xfff
80005bd0:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80005bd2:	30 1c       	mov	r12,1
80005bd4:	f0 1f 00 19 	mcall	80005c38 <fat_cluster_list+0x2c0>
80005bd8:	c1 80       	breq	80005c08 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80005bda:	6c 08       	ld.w	r8,r6[0x0]
80005bdc:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80005bde:	e2 04 18 00 	cp.b	r4,r1
80005be2:	c0 b1       	brne	80005bf8 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80005be4:	40 0a       	lddsp	r10,sp[0x0]
80005be6:	58 0a       	cp.w	r10,0
80005be8:	c0 40       	breq	80005bf0 <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80005bea:	f0 1f 00 19 	mcall	80005c4c <fat_cluster_list+0x2d4>
80005bee:	c0 e8       	rjmp	80005c0a <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80005bf0:	f0 1f 00 11 	mcall	80005c34 <fat_cluster_list+0x2bc>
80005bf4:	30 1c       	mov	r12,1
            return true; // End of segment
80005bf6:	c0 a8       	rjmp	80005c0a <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80005bf8:	0b 99       	ld.ub	r9,r5[0x1]
80005bfa:	6c 18       	ld.w	r8,r6[0x4]
80005bfc:	f2 08 00 08 	add	r8,r9,r8
80005c00:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80005c02:	6e 18       	ld.w	r8,r7[0x4]
80005c04:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80005c06:	c2 eb       	rjmp	80005a62 <fat_cluster_list+0xea>
80005c08:	30 0c       	mov	r12,0
}
80005c0a:	2f ed       	sub	sp,-8
80005c0c:	d8 32       	popm	r0-r7,pc
80005c0e:	00 00       	add	r0,r0
80005c10:	00 00       	add	r0,r0
80005c12:	14 48       	or	r8,r10
80005c14:	00 00       	add	r0,r0
80005c16:	14 44       	or	r4,r10
80005c18:	80 00       	ld.sh	r0,r0[0x0]
80005c1a:	64 4c       	ld.w	r12,r2[0x10]
80005c1c:	00 00       	add	r0,r0
80005c1e:	14 a0       	st.w	r10++,r0
80005c20:	00 00       	add	r0,r0
80005c22:	13 f8       	ld.ub	r8,r9[0x7]
80005c24:	00 00       	add	r0,r0
80005c26:	14 98       	mov	r8,r10
80005c28:	80 00       	ld.sh	r0,r0[0x0]
80005c2a:	4e e0       	lddpc	r0,80005de0 <fat_write_file+0x30>
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	4d b8       	lddpc	r8,80005d98 <fat_read_file+0xc4>
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	60 a8       	ld.w	r8,r0[0x28]
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	4e 88       	lddpc	r8,80005dd4 <fat_write_file+0x24>
80005c38:	80 00       	ld.sh	r0,r0[0x0]
80005c3a:	57 34       	stdsp	sp[0x1cc],r4
80005c3c:	80 00       	ld.sh	r0,r0[0x0]
80005c3e:	56 a0       	stdsp	sp[0x1a8],r0
80005c40:	80 00       	ld.sh	r0,r0[0x0]
80005c42:	4d 58       	lddpc	r8,80005d94 <fat_read_file+0xc0>
80005c44:	00 00       	add	r0,r0
80005c46:	14 4a       	or	r10,r10
80005c48:	00 00       	add	r0,r0
80005c4a:	11 cc       	ld.ub	r12,r8[0x4]
80005c4c:	80 00       	ld.sh	r0,r0[0x0]
80005c4e:	61 34       	ld.w	r4,r0[0x4c]

80005c50 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80005c50:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80005c54:	49 98       	lddpc	r8,80005cb8 <fat_read_dir+0x68>
80005c56:	90 97       	ld.uh	r7,r8[0x2]
80005c58:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80005c5a:	49 98       	lddpc	r8,80005cbc <fat_read_dir+0x6c>
80005c5c:	11 89       	ld.ub	r9,r8[0x0]
80005c5e:	49 98       	lddpc	r8,80005cc0 <fat_read_dir+0x70>
80005c60:	11 88       	ld.ub	r8,r8[0x0]
80005c62:	f0 09 18 00 	cp.b	r9,r8
80005c66:	c0 d1       	brne	80005c80 <fat_read_dir+0x30>
80005c68:	49 58       	lddpc	r8,80005cbc <fat_read_dir+0x6c>
80005c6a:	70 39       	ld.w	r9,r8[0xc]
80005c6c:	49 58       	lddpc	r8,80005cc0 <fat_read_dir+0x70>
80005c6e:	70 88       	ld.w	r8,r8[0x20]
80005c70:	10 39       	cp.w	r9,r8
80005c72:	c0 71       	brne	80005c80 <fat_read_dir+0x30>
80005c74:	49 28       	lddpc	r8,80005cbc <fat_read_dir+0x6c>
80005c76:	70 48       	ld.w	r8,r8[0x10]
80005c78:	0e 38       	cp.w	r8,r7
80005c7a:	c0 31       	brne	80005c80 <fat_read_dir+0x30>
80005c7c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80005c80:	49 18       	lddpc	r8,80005cc4 <fat_read_dir+0x74>
80005c82:	49 09       	lddpc	r9,80005cc0 <fat_read_dir+0x70>
80005c84:	72 89       	ld.w	r9,r9[0x20]
80005c86:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80005c88:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80005c8a:	30 0b       	mov	r11,0
80005c8c:	30 2c       	mov	r12,2
80005c8e:	f0 1f 00 0f 	mcall	80005cc8 <fat_read_dir+0x78>
80005c92:	c1 00       	breq	80005cb2 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80005c94:	48 c8       	lddpc	r8,80005cc4 <fat_read_dir+0x74>
80005c96:	70 09       	ld.w	r9,r8[0x0]
80005c98:	48 d8       	lddpc	r8,80005ccc <fat_read_dir+0x7c>
80005c9a:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80005c9c:	30 1c       	mov	r12,1
80005c9e:	f0 1f 00 0d 	mcall	80005cd0 <fat_read_dir+0x80>
80005ca2:	c0 80       	breq	80005cb2 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80005ca4:	48 68       	lddpc	r8,80005cbc <fat_read_dir+0x6c>
80005ca6:	48 79       	lddpc	r9,80005cc0 <fat_read_dir+0x70>
80005ca8:	72 89       	ld.w	r9,r9[0x20]
80005caa:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80005cac:	91 47       	st.w	r8[0x10],r7
80005cae:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80005cb2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80005cb6:	00 00       	add	r0,r0
80005cb8:	00 00       	add	r0,r0
80005cba:	14 44       	or	r4,r10
80005cbc:	00 00       	add	r0,r0
80005cbe:	14 80       	andn	r0,r10
80005cc0:	00 00       	add	r0,r0
80005cc2:	13 f8       	ld.ub	r8,r9[0x7]
80005cc4:	00 00       	add	r0,r0
80005cc6:	14 a0       	st.w	r10++,r0
80005cc8:	80 00       	ld.sh	r0,r0[0x0]
80005cca:	59 78       	cp.w	r8,23
80005ccc:	00 00       	add	r0,r0
80005cce:	11 b4       	ld.ub	r4,r8[0x3]
80005cd0:	80 00       	ld.sh	r0,r0[0x0]
80005cd2:	56 20       	stdsp	sp[0x188],r0

80005cd4 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80005cd4:	eb cd 40 c0 	pushm	r6-r7,lr
80005cd8:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80005cda:	4a e8       	lddpc	r8,80005d90 <fat_read_file+0xbc>
80005cdc:	70 38       	ld.w	r8,r8[0xc]
80005cde:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80005ce2:	30 29       	mov	r9,2
80005ce4:	f2 0c 18 00 	cp.b	r12,r9
80005ce8:	c1 31       	brne	80005d0e <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80005cea:	4a b8       	lddpc	r8,80005d94 <fat_read_file+0xc0>
80005cec:	11 89       	ld.ub	r9,r8[0x0]
80005cee:	4a b8       	lddpc	r8,80005d98 <fat_read_file+0xc4>
80005cf0:	11 88       	ld.ub	r8,r8[0x0]
80005cf2:	f0 09 18 00 	cp.b	r9,r8
80005cf6:	c1 91       	brne	80005d28 <fat_read_file+0x54>
80005cf8:	4a 78       	lddpc	r8,80005d94 <fat_read_file+0xc0>
80005cfa:	70 39       	ld.w	r9,r8[0xc]
80005cfc:	4a 58       	lddpc	r8,80005d90 <fat_read_file+0xbc>
80005cfe:	70 18       	ld.w	r8,r8[0x4]
80005d00:	10 39       	cp.w	r9,r8
80005d02:	c1 31       	brne	80005d28 <fat_read_file+0x54>
80005d04:	4a 48       	lddpc	r8,80005d94 <fat_read_file+0xc0>
80005d06:	70 48       	ld.w	r8,r8[0x10]
80005d08:	0c 38       	cp.w	r8,r6
80005d0a:	c0 f1       	brne	80005d28 <fat_read_file+0x54>
80005d0c:	c3 38       	rjmp	80005d72 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80005d0e:	30 39       	mov	r9,3
80005d10:	f2 0c 18 00 	cp.b	r12,r9
80005d14:	c3 31       	brne	80005d7a <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80005d16:	49 f9       	lddpc	r9,80005d90 <fat_read_file+0xbc>
80005d18:	72 19       	ld.w	r9,r9[0x4]
80005d1a:	58 09       	cp.w	r9,0
80005d1c:	c2 b0       	breq	80005d72 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80005d1e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80005d22:	c2 c0       	breq	80005d7a <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80005d24:	2f f6       	sub	r6,-1
80005d26:	c2 a8       	rjmp	80005d7a <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80005d28:	49 d8       	lddpc	r8,80005d9c <fat_read_file+0xc8>
80005d2a:	49 a9       	lddpc	r9,80005d90 <fat_read_file+0xbc>
80005d2c:	72 19       	ld.w	r9,r9[0x4]
80005d2e:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005d30:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80005d32:	30 1b       	mov	r11,1
80005d34:	16 9c       	mov	r12,r11
80005d36:	f0 1f 00 1b 	mcall	80005da0 <fat_read_file+0xcc>
80005d3a:	c1 e0       	breq	80005d76 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80005d3c:	49 88       	lddpc	r8,80005d9c <fat_read_file+0xc8>
80005d3e:	70 09       	ld.w	r9,r8[0x0]
80005d40:	49 98       	lddpc	r8,80005da4 <fat_read_file+0xd0>
80005d42:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80005d44:	30 1c       	mov	r12,1
80005d46:	f0 1f 00 19 	mcall	80005da8 <fat_read_file+0xd4>
80005d4a:	c1 60       	breq	80005d76 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80005d4c:	49 28       	lddpc	r8,80005d94 <fat_read_file+0xc0>
80005d4e:	49 19       	lddpc	r9,80005d90 <fat_read_file+0xbc>
80005d50:	72 19       	ld.w	r9,r9[0x4]
80005d52:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005d54:	91 46       	st.w	r8[0x10],r6
80005d56:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80005d5a:	30 38       	mov	r8,3
80005d5c:	f0 07 18 00 	cp.b	r7,r8
80005d60:	c0 b1       	brne	80005d76 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80005d62:	49 38       	lddpc	r8,80005dac <fat_read_file+0xd8>
80005d64:	11 89       	ld.ub	r9,r8[0x0]
80005d66:	31 a8       	mov	r8,26
80005d68:	f0 09 18 00 	cp.b	r9,r8
80005d6c:	5f 0c       	sreq	r12
80005d6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005d72:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80005d76:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80005d7a:	48 98       	lddpc	r8,80005d9c <fat_read_file+0xc8>
80005d7c:	48 59       	lddpc	r9,80005d90 <fat_read_file+0xbc>
80005d7e:	72 19       	ld.w	r9,r9[0x4]
80005d80:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80005d82:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005d84:	30 1b       	mov	r11,1
80005d86:	0e 9c       	mov	r12,r7
80005d88:	f0 1f 00 06 	mcall	80005da0 <fat_read_file+0xcc>
80005d8c:	ce 70       	breq	80005d5a <fat_read_file+0x86>
80005d8e:	cf 2b       	rjmp	80005d72 <fat_read_file+0x9e>
80005d90:	00 00       	add	r0,r0
80005d92:	11 b8       	ld.ub	r8,r8[0x3]
80005d94:	00 00       	add	r0,r0
80005d96:	14 80       	andn	r0,r10
80005d98:	00 00       	add	r0,r0
80005d9a:	13 f8       	ld.ub	r8,r9[0x7]
80005d9c:	00 00       	add	r0,r0
80005d9e:	14 a0       	st.w	r10++,r0
80005da0:	80 00       	ld.sh	r0,r0[0x0]
80005da2:	59 78       	cp.w	r8,23
80005da4:	00 00       	add	r0,r0
80005da6:	11 b4       	ld.ub	r4,r8[0x3]
80005da8:	80 00       	ld.sh	r0,r0[0x0]
80005daa:	56 20       	stdsp	sp[0x188],r0
80005dac:	00 00       	add	r0,r0
80005dae:	14 48       	or	r8,r10

80005db0 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80005db0:	eb cd 40 c0 	pushm	r6-r7,lr
80005db4:	18 97       	mov	r7,r12
80005db6:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
80005db8:	4b 68       	lddpc	r8,80005e90 <fat_write_file+0xe0>
80005dba:	70 18       	ld.w	r8,r8[0x4]
80005dbc:	58 08       	cp.w	r8,0
80005dbe:	c0 a1       	brne	80005dd2 <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
80005dc0:	4b 58       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005dc2:	3f f9       	mov	r9,-1
80005dc4:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
80005dc6:	30 09       	mov	r9,0
80005dc8:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
80005dca:	30 1c       	mov	r12,1
80005dcc:	f0 1f 00 33 	mcall	80005e98 <fat_write_file+0xe8>
80005dd0:	c1 c8       	rjmp	80005e08 <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
80005dd2:	f0 1f 00 33 	mcall	80005e9c <fat_write_file+0xec>
80005dd6:	c0 30       	breq	80005ddc <fat_write_file+0x2c>
80005dd8:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is available (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
80005ddc:	4b 18       	lddpc	r8,80005ea0 <fat_write_file+0xf0>
80005dde:	11 89       	ld.ub	r9,r8[0x0]
80005de0:	31 a8       	mov	r8,26
80005de2:	f0 09 18 00 	cp.b	r9,r8
80005de6:	c5 21       	brne	80005e8a <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80005de8:	4a f8       	lddpc	r8,80005ea4 <fat_write_file+0xf4>
80005dea:	11 88       	ld.ub	r8,r8[0x0]
80005dec:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005df0:	4a e9       	lddpc	r9,80005ea8 <fat_write_file+0xf8>
80005df2:	f2 08 00 28 	add	r8,r9,r8<<0x2
80005df6:	3f f9       	mov	r9,-1
80005df8:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
80005dfa:	2f 88       	sub	r8,-8
80005dfc:	4a c9       	lddpc	r9,80005eac <fat_write_file+0xfc>
80005dfe:	13 9a       	ld.ub	r10,r9[0x1]
80005e00:	70 09       	ld.w	r9,r8[0x0]
80005e02:	f4 09 00 09 	add	r9,r10,r9
80005e06:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
80005e08:	30 18       	mov	r8,1
80005e0a:	f0 07 18 00 	cp.b	r7,r8
80005e0e:	c0 41       	brne	80005e16 <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
80005e10:	4a 18       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005e12:	91 16       	st.w	r8[0x4],r6
80005e14:	c0 48       	rjmp	80005e1c <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80005e16:	30 19       	mov	r9,1
80005e18:	49 f8       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005e1a:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
80005e1c:	f0 1f 00 25 	mcall	80005eb0 <fat_write_file+0x100>
80005e20:	c3 50       	breq	80005e8a <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80005e22:	49 c8       	lddpc	r8,80005e90 <fat_write_file+0xe0>
80005e24:	70 18       	ld.w	r8,r8[0x4]
80005e26:	58 08       	cp.w	r8,0
80005e28:	c0 d1       	brne	80005e42 <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
80005e2a:	49 b8       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005e2c:	70 08       	ld.w	r8,r8[0x0]
80005e2e:	49 e9       	lddpc	r9,80005ea4 <fat_write_file+0xf4>
80005e30:	13 89       	ld.ub	r9,r9[0x0]
80005e32:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005e36:	2f f9       	sub	r9,-1
80005e38:	49 ca       	lddpc	r10,80005ea8 <fat_write_file+0xf8>
80005e3a:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
80005e3e:	49 59       	lddpc	r9,80005e90 <fat_write_file+0xe0>
80005e40:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80005e42:	30 18       	mov	r8,1
80005e44:	f0 07 18 00 	cp.b	r7,r8
80005e48:	c0 71       	brne	80005e56 <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
80005e4a:	49 38       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005e4c:	70 19       	ld.w	r9,r8[0x4]
80005e4e:	ec 09 01 09 	sub	r9,r6,r9
80005e52:	91 19       	st.w	r8[0x4],r9
80005e54:	c0 68       	rjmp	80005e60 <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80005e56:	49 08       	lddpc	r8,80005e94 <fat_write_file+0xe4>
80005e58:	70 19       	ld.w	r9,r8[0x4]
80005e5a:	f2 09 11 01 	rsub	r9,r9,1
80005e5e:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80005e60:	48 d9       	lddpc	r9,80005e94 <fat_write_file+0xe4>
80005e62:	49 38       	lddpc	r8,80005eac <fat_write_file+0xfc>
80005e64:	70 5b       	ld.w	r11,r8[0x14]
80005e66:	70 4a       	ld.w	r10,r8[0x10]
80005e68:	f6 0a 00 0a 	add	r10,r11,r10
80005e6c:	11 9b       	ld.ub	r11,r8[0x1]
80005e6e:	72 08       	ld.w	r8,r9[0x0]
80005e70:	20 28       	sub	r8,2
80005e72:	f6 08 02 48 	mul	r8,r11,r8
80005e76:	f4 08 00 08 	add	r8,r10,r8
80005e7a:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80005e7c:	f0 1f 00 0e 	mcall	80005eb4 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
80005e80:	0e 9c       	mov	r12,r7
80005e82:	f0 1f 00 07 	mcall	80005e9c <fat_write_file+0xec>
80005e86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005e8a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005e8e:	00 00       	add	r0,r0
80005e90:	00 00       	add	r0,r0
80005e92:	11 b8       	ld.ub	r8,r8[0x3]
80005e94:	00 00       	add	r0,r0
80005e96:	14 a0       	st.w	r10++,r0
80005e98:	80 00       	ld.sh	r0,r0[0x0]
80005e9a:	4d e0       	lddpc	r0,80006010 <fat_check_mount_select_open+0x14>
80005e9c:	80 00       	ld.sh	r0,r0[0x0]
80005e9e:	5c d4       	com	r4
80005ea0:	00 00       	add	r0,r0
80005ea2:	14 48       	or	r8,r10
80005ea4:	00 00       	add	r0,r0
80005ea6:	14 4a       	or	r10,r10
80005ea8:	00 00       	add	r0,r0
80005eaa:	11 cc       	ld.ub	r12,r8[0x4]
80005eac:	00 00       	add	r0,r0
80005eae:	13 f8       	ld.ub	r8,r9[0x7]
80005eb0:	80 00       	ld.sh	r0,r0[0x0]
80005eb2:	64 ec       	ld.w	r12,r2[0x38]
80005eb4:	80 00       	ld.sh	r0,r0[0x0]
80005eb6:	4e 88       	lddpc	r8,80006054 <fat_check_mount_noopen+0x10>

80005eb8 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80005eb8:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80005eba:	4a 28       	lddpc	r8,80005f40 <fat_check_device+0x88>
80005ebc:	11 89       	ld.ub	r9,r8[0x0]
80005ebe:	30 08       	mov	r8,0
80005ec0:	f0 09 18 00 	cp.b	r9,r8
80005ec4:	c3 c1       	brne	80005f3c <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80005ec6:	4a 08       	lddpc	r8,80005f44 <fat_check_device+0x8c>
80005ec8:	11 89       	ld.ub	r9,r8[0x0]
80005eca:	3f f8       	mov	r8,-1
80005ecc:	f0 09 18 00 	cp.b	r9,r8
80005ed0:	c0 51       	brne	80005eda <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80005ed2:	30 19       	mov	r9,1
80005ed4:	49 d8       	lddpc	r8,80005f48 <fat_check_device+0x90>
80005ed6:	b0 89       	st.b	r8[0x0],r9
80005ed8:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
80005eda:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80005edc:	49 a5       	lddpc	r5,80005f44 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005ede:	49 c1       	lddpc	r1,80005f4c <fat_check_device+0x94>
80005ee0:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80005ee2:	49 c0       	lddpc	r0,80005f50 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005ee4:	49 c4       	lddpc	r4,80005f54 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80005ee6:	49 d3       	lddpc	r3,80005f58 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80005ee8:	0b 8c       	ld.ub	r12,r5[0x0]
80005eea:	f0 1f 00 1d 	mcall	80005f5c <fat_check_device+0xa4>
80005eee:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
80005ef0:	c2 60       	breq	80005f3c <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005ef2:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80005ef4:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005ef6:	0b 88       	ld.ub	r8,r5[0x0]
80005ef8:	09 89       	ld.ub	r9,r4[0x0]
80005efa:	f0 09 18 00 	cp.b	r9,r8
80005efe:	c0 51       	brne	80005f08 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80005f00:	49 89       	lddpc	r9,80005f60 <fat_check_device+0xa8>
80005f02:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80005f04:	49 89       	lddpc	r9,80005f64 <fat_check_device+0xac>
80005f06:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80005f08:	07 89       	ld.ub	r9,r3[0x0]
80005f0a:	f0 09 18 00 	cp.b	r9,r8
80005f0e:	c0 31       	brne	80005f14 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80005f10:	f0 1f 00 16 	mcall	80005f68 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80005f14:	f0 1f 00 16 	mcall	80005f6c <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80005f18:	30 18       	mov	r8,1
80005f1a:	48 c9       	lddpc	r9,80005f48 <fat_check_device+0x90>
80005f1c:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80005f1e:	58 37       	cp.w	r7,3
80005f20:	c0 81       	brne	80005f30 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80005f22:	10 02       	add	r2,r8
80005f24:	5c 52       	castu.b	r2
80005f26:	36 48       	mov	r8,100
80005f28:	f0 02 18 00 	cp.b	r2,r8
80005f2c:	cd e1       	brne	80005ee8 <fat_check_device+0x30>
80005f2e:	c0 88       	rjmp	80005f3e <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80005f30:	58 27       	cp.w	r7,2
80005f32:	c0 61       	brne	80005f3e <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80005f34:	31 89       	mov	r9,24
80005f36:	48 58       	lddpc	r8,80005f48 <fat_check_device+0x90>
80005f38:	b0 89       	st.b	r8[0x0],r9
80005f3a:	d8 3a       	popm	r0-r7,pc,r12=0
80005f3c:	da 3a       	popm	r0-r7,pc,r12=1
80005f3e:	d8 3a       	popm	r0-r7,pc,r12=0
80005f40:	00 00       	add	r0,r0
80005f42:	11 ca       	ld.ub	r10,r8[0x4]
80005f44:	00 00       	add	r0,r0
80005f46:	13 f8       	ld.ub	r8,r9[0x7]
80005f48:	00 00       	add	r0,r0
80005f4a:	14 48       	or	r8,r10
80005f4c:	00 00       	add	r0,r0
80005f4e:	14 44       	or	r4,r10
80005f50:	00 00       	add	r0,r0
80005f52:	11 b8       	ld.ub	r8,r8[0x3]
80005f54:	00 00       	add	r0,r0
80005f56:	14 4c       	or	r12,r10
80005f58:	00 00       	add	r0,r0
80005f5a:	14 80       	andn	r0,r10
80005f5c:	80 00       	ld.sh	r0,r0[0x0]
80005f5e:	7b 20       	ld.w	r0,sp[0x48]
80005f60:	00 00       	add	r0,r0
80005f62:	14 40       	or	r0,r10
80005f64:	00 00       	add	r0,r0
80005f66:	14 30       	cp.w	r0,r10
80005f68:	80 00       	ld.sh	r0,r0[0x0]
80005f6a:	53 d8       	stdsp	sp[0xf4],r8
80005f6c:	80 00       	ld.sh	r0,r0[0x0]
80005f6e:	4d b8       	lddpc	r8,800060d8 <fat_clear_cluster+0x18>

80005f70 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80005f70:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005f72:	f0 1f 00 0b 	mcall	80005f9c <fat_check_noopen+0x2c>
80005f76:	c1 10       	breq	80005f98 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005f78:	48 a8       	lddpc	r8,80005fa0 <fat_check_noopen+0x30>
80005f7a:	11 89       	ld.ub	r9,r8[0x0]
80005f7c:	30 08       	mov	r8,0
80005f7e:	f0 09 18 00 	cp.b	r9,r8
80005f82:	c0 b0       	breq	80005f98 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005f84:	48 88       	lddpc	r8,80005fa4 <fat_check_noopen+0x34>
80005f86:	11 89       	ld.ub	r9,r8[0x0]
80005f88:	30 08       	mov	r8,0
80005f8a:	f0 09 18 00 	cp.b	r9,r8
80005f8e:	c0 50       	breq	80005f98 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005f90:	30 59       	mov	r9,5
80005f92:	48 68       	lddpc	r8,80005fa8 <fat_check_noopen+0x38>
80005f94:	b0 89       	st.b	r8[0x0],r9
80005f96:	d8 0a       	popm	pc,r12=0
      return false;
80005f98:	da 0a       	popm	pc,r12=1
80005f9a:	00 00       	add	r0,r0
80005f9c:	80 00       	ld.sh	r0,r0[0x0]
80005f9e:	5e b8       	rethi	r8
80005fa0:	00 00       	add	r0,r0
80005fa2:	14 44       	or	r4,r10
80005fa4:	00 00       	add	r0,r0
80005fa6:	11 b8       	ld.ub	r8,r8[0x3]
80005fa8:	00 00       	add	r0,r0
80005faa:	14 48       	or	r8,r10

80005fac <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80005fac:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005fae:	f0 1f 00 0a 	mcall	80005fd4 <fat_check_mount+0x28>
80005fb2:	c0 f0       	breq	80005fd0 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005fb4:	48 98       	lddpc	r8,80005fd8 <fat_check_mount+0x2c>
80005fb6:	11 89       	ld.ub	r9,r8[0x0]
80005fb8:	30 08       	mov	r8,0
80005fba:	f0 09 18 00 	cp.b	r9,r8
80005fbe:	c0 81       	brne	80005fce <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80005fc0:	f0 1f 00 07 	mcall	80005fdc <fat_check_mount+0x30>
80005fc4:	c0 51       	brne	80005fce <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80005fc6:	30 e9       	mov	r9,14
80005fc8:	48 68       	lddpc	r8,80005fe0 <fat_check_mount+0x34>
80005fca:	b0 89       	st.b	r8[0x0],r9
         return false;
80005fcc:	d8 02       	popm	pc
80005fce:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80005fd0:	d8 02       	popm	pc
80005fd2:	00 00       	add	r0,r0
80005fd4:	80 00       	ld.sh	r0,r0[0x0]
80005fd6:	5e b8       	rethi	r8
80005fd8:	00 00       	add	r0,r0
80005fda:	14 44       	or	r4,r10
80005fdc:	80 00       	ld.sh	r0,r0[0x0]
80005fde:	6a 84       	ld.w	r4,r5[0x20]
80005fe0:	00 00       	add	r0,r0
80005fe2:	14 48       	or	r8,r10

80005fe4 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80005fe4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005fe6:	f0 1f 00 04 	mcall	80005ff4 <fat_check_mount_select+0x10>
80005fea:	c0 30       	breq	80005ff0 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80005fec:	f0 1f 00 03 	mcall	80005ff8 <fat_check_mount_select+0x14>
}
80005ff0:	d8 02       	popm	pc
80005ff2:	00 00       	add	r0,r0
80005ff4:	80 00       	ld.sh	r0,r0[0x0]
80005ff6:	5f ac       	srle	r12
80005ff8:	80 00       	ld.sh	r0,r0[0x0]
80005ffa:	4d 1c       	lddpc	r12,8000613c <fat_update_fat2+0x8>

80005ffc <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80005ffc:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80005ffe:	f0 1f 00 06 	mcall	80006014 <fat_check_mount_select_open+0x18>
80006002:	c0 70       	breq	80006010 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80006004:	f0 1f 00 05 	mcall	80006018 <fat_check_mount_select_open+0x1c>
80006008:	c0 40       	breq	80006010 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
8000600a:	f0 1f 00 05 	mcall	8000601c <fat_check_mount_select_open+0x20>
8000600e:	d8 02       	popm	pc
80006010:	d8 0a       	popm	pc,r12=0
80006012:	00 00       	add	r0,r0
80006014:	80 00       	ld.sh	r0,r0[0x0]
80006016:	5f ac       	srle	r12
80006018:	80 00       	ld.sh	r0,r0[0x0]
8000601a:	4d 1c       	lddpc	r12,8000615c <fat_update_fat2+0x28>
8000601c:	80 00       	ld.sh	r0,r0[0x0]
8000601e:	4c fc       	lddpc	r12,80006158 <fat_update_fat2+0x24>

80006020 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80006020:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80006022:	f0 1f 00 06 	mcall	80006038 <fat_check_mount_select_noopen+0x18>
80006026:	c0 70       	breq	80006034 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80006028:	f0 1f 00 05 	mcall	8000603c <fat_check_mount_select_noopen+0x1c>
8000602c:	c0 40       	breq	80006034 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
8000602e:	f0 1f 00 05 	mcall	80006040 <fat_check_mount_select_noopen+0x20>
80006032:	d8 02       	popm	pc
80006034:	d8 0a       	popm	pc,r12=0
80006036:	00 00       	add	r0,r0
80006038:	80 00       	ld.sh	r0,r0[0x0]
8000603a:	5f ac       	srle	r12
8000603c:	80 00       	ld.sh	r0,r0[0x0]
8000603e:	4d 1c       	lddpc	r12,80006180 <fat_update_fat2+0x4c>
80006040:	80 00       	ld.sh	r0,r0[0x0]
80006042:	5f 70       	srpl	r0

80006044 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80006044:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80006046:	f0 1f 00 04 	mcall	80006054 <fat_check_mount_noopen+0x10>
8000604a:	c0 30       	breq	80006050 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
8000604c:	f0 1f 00 03 	mcall	80006058 <fat_check_mount_noopen+0x14>
}
80006050:	d8 02       	popm	pc
80006052:	00 00       	add	r0,r0
80006054:	80 00       	ld.sh	r0,r0[0x0]
80006056:	5f ac       	srle	r12
80006058:	80 00       	ld.sh	r0,r0[0x0]
8000605a:	5f 70       	srpl	r0

8000605c <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000605c:	f8 c9 00 21 	sub	r9,r12,33
80006060:	35 d8       	mov	r8,93
80006062:	f0 09 18 00 	cp.b	r9,r8
80006066:	e0 8b 00 1d 	brhi	800060a0 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000606a:	f8 c9 00 61 	sub	r9,r12,97
8000606e:	31 98       	mov	r8,25
80006070:	f0 09 18 00 	cp.b	r9,r8
80006074:	e0 88 00 07 	brls	80006082 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80006078:	32 b8       	mov	r8,43
8000607a:	f0 0c 18 00 	cp.b	r12,r8
8000607e:	c0 51       	brne	80006088 <fat_translate_char_shortname+0x2c>
80006080:	c1 08       	rjmp	800060a0 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80006082:	22 0c       	sub	r12,32
80006084:	5c 5c       	castu.b	r12
80006086:	5e fc       	retal	r12
80006088:	48 7a       	lddpc	r10,800060a4 <fat_translate_char_shortname+0x48>
8000608a:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
8000608e:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80006090:	11 89       	ld.ub	r9,r8[0x0]
80006092:	f8 09 18 00 	cp.b	r9,r12
80006096:	c0 50       	breq	800060a0 <fat_translate_char_shortname+0x44>
80006098:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000609a:	14 38       	cp.w	r8,r10
8000609c:	cf a1       	brne	80006090 <fat_translate_char_shortname+0x34>
8000609e:	5e fc       	retal	r12
800060a0:	5e fd       	retal	0
800060a2:	00 00       	add	r0,r0
800060a4:	80 01       	ld.sh	r1,r0[0x0]
800060a6:	36 cc       	mov	r12,108

800060a8 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
800060a8:	3f f9       	mov	r9,-1
800060aa:	48 48       	lddpc	r8,800060b8 <fat_clear_info_fat_mod+0x10>
800060ac:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
800060ae:	30 09       	mov	r9,0
800060b0:	48 38       	lddpc	r8,800060bc <fat_clear_info_fat_mod+0x14>
800060b2:	91 09       	st.w	r8[0x0],r9
}
800060b4:	5e fc       	retal	r12
800060b6:	00 00       	add	r0,r0
800060b8:	00 00       	add	r0,r0
800060ba:	14 2c       	rsub	r12,r10
800060bc:	00 00       	add	r0,r0
800060be:	11 f4       	ld.ub	r4,r8[0x7]

800060c0 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
800060c0:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
800060c2:	30 0b       	mov	r11,0
800060c4:	49 58       	lddpc	r8,80006118 <fat_clear_cluster+0x58>
800060c6:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
800060c8:	30 2c       	mov	r12,2
800060ca:	f0 1f 00 15 	mcall	8000611c <fat_clear_cluster+0x5c>
800060ce:	c2 30       	breq	80006114 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800060d0:	49 48       	lddpc	r8,80006120 <fat_clear_cluster+0x60>
800060d2:	11 98       	ld.ub	r8,r8[0x1]
800060d4:	49 19       	lddpc	r9,80006118 <fat_clear_cluster+0x58>
800060d6:	72 0a       	ld.w	r10,r9[0x0]
800060d8:	20 1a       	sub	r10,1
800060da:	10 0a       	add	r10,r8
800060dc:	49 29       	lddpc	r9,80006124 <fat_clear_cluster+0x64>
800060de:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
800060e0:	58 08       	cp.w	r8,0
800060e2:	c1 a0       	breq	80006116 <fat_clear_cluster+0x56>
800060e4:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800060e6:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
800060e8:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800060ea:	48 e5       	lddpc	r5,80006120 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
800060ec:	08 9c       	mov	r12,r4
800060ee:	f0 1f 00 0f 	mcall	80006128 <fat_clear_cluster+0x68>
800060f2:	c1 10       	breq	80006114 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
800060f4:	58 07       	cp.w	r7,0
800060f6:	c0 31       	brne	800060fc <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
800060f8:	f0 1f 00 0d 	mcall	8000612c <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800060fc:	f0 1f 00 0d 	mcall	80006130 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
80006100:	6c 08       	ld.w	r8,r6[0x0]
80006102:	20 18       	sub	r8,1
80006104:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80006106:	2f f7       	sub	r7,-1
80006108:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000610a:	0b 98       	ld.ub	r8,r5[0x1]
8000610c:	ee 08 18 00 	cp.b	r8,r7
80006110:	ce e1       	brne	800060ec <fat_clear_cluster+0x2c>
80006112:	c0 28       	rjmp	80006116 <fat_clear_cluster+0x56>
80006114:	d8 2a       	popm	r4-r7,pc,r12=0
80006116:	da 2a       	popm	r4-r7,pc,r12=1
80006118:	00 00       	add	r0,r0
8000611a:	14 a0       	st.w	r10++,r0
8000611c:	80 00       	ld.sh	r0,r0[0x0]
8000611e:	59 78       	cp.w	r8,23
80006120:	00 00       	add	r0,r0
80006122:	13 f8       	ld.ub	r8,r9[0x7]
80006124:	00 00       	add	r0,r0
80006126:	11 b4       	ld.ub	r4,r8[0x3]
80006128:	80 00       	ld.sh	r0,r0[0x0]
8000612a:	56 20       	stdsp	sp[0x188],r0
8000612c:	80 00       	ld.sh	r0,r0[0x0]
8000612e:	56 08       	stdsp	sp[0x180],r8
80006130:	80 00       	ld.sh	r0,r0[0x0]
80006132:	53 f0       	stdsp	sp[0xfc],r0

80006134 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80006134:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80006138:	49 68       	lddpc	r8,80006190 <fat_update_fat2+0x5c>
8000613a:	70 08       	ld.w	r8,r8[0x0]
8000613c:	49 69       	lddpc	r9,80006194 <fat_update_fat2+0x60>
8000613e:	72 09       	ld.w	r9,r9[0x0]
80006140:	12 38       	cp.w	r8,r9
80006142:	e0 8b 00 25 	brhi	8000618c <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80006146:	49 55       	lddpc	r5,80006198 <fat_update_fat2+0x64>
80006148:	49 57       	lddpc	r7,8000619c <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000614a:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000614c:	49 16       	lddpc	r6,80006190 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000614e:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80006150:	49 14       	lddpc	r4,80006194 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80006152:	6e 49       	ld.w	r9,r7[0x10]
80006154:	12 08       	add	r8,r9
80006156:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80006158:	06 9c       	mov	r12,r3
8000615a:	f0 1f 00 12 	mcall	800061a0 <fat_update_fat2+0x6c>
8000615e:	c1 50       	breq	80006188 <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80006160:	6e 19       	ld.w	r9,r7[0x4]
80006162:	6e 48       	ld.w	r8,r7[0x10]
80006164:	f2 08 00 08 	add	r8,r9,r8
80006168:	6c 09       	ld.w	r9,r6[0x0]
8000616a:	12 08       	add	r8,r9
8000616c:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000616e:	04 9c       	mov	r12,r2
80006170:	f0 1f 00 0c 	mcall	800061a0 <fat_update_fat2+0x6c>
80006174:	c0 a0       	breq	80006188 <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80006176:	f0 1f 00 0c 	mcall	800061a4 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000617a:	6c 08       	ld.w	r8,r6[0x0]
8000617c:	2f f8       	sub	r8,-1
8000617e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80006180:	68 09       	ld.w	r9,r4[0x0]
80006182:	10 39       	cp.w	r9,r8
80006184:	ce 72       	brcc	80006152 <fat_update_fat2+0x1e>
80006186:	c0 38       	rjmp	8000618c <fat_update_fat2+0x58>
80006188:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000618c:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80006190:	00 00       	add	r0,r0
80006192:	14 2c       	rsub	r12,r10
80006194:	00 00       	add	r0,r0
80006196:	11 f4       	ld.ub	r4,r8[0x7]
80006198:	00 00       	add	r0,r0
8000619a:	11 b4       	ld.ub	r4,r8[0x3]
8000619c:	00 00       	add	r0,r0
8000619e:	13 f8       	ld.ub	r8,r9[0x7]
800061a0:	80 00       	ld.sh	r0,r0[0x0]
800061a2:	56 20       	stdsp	sp[0x188],r0
800061a4:	80 00       	ld.sh	r0,r0[0x0]
800061a6:	53 f0       	stdsp	sp[0xfc],r0

800061a8 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
800061a8:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
800061aa:	f0 1f 00 21 	mcall	8000622c <fat_initialize_dir+0x84>
800061ae:	c3 e0       	breq	8000622a <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
800061b0:	f0 1f 00 20 	mcall	80006230 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
800061b4:	4a 0b       	lddpc	r11,80006234 <fat_initialize_dir+0x8c>
800061b6:	16 98       	mov	r8,r11
800061b8:	32 e9       	mov	r9,46
800061ba:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800061bc:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
800061c0:	32 09       	mov	r9,32
800061c2:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
800061c4:	14 38       	cp.w	r8,r10
800061c6:	cf e1       	brne	800061c2 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
800061c8:	49 b8       	lddpc	r8,80006234 <fat_initialize_dir+0x8c>
800061ca:	31 09       	mov	r9,16
800061cc:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
800061d0:	49 a9       	lddpc	r9,80006238 <fat_initialize_dir+0x90>
800061d2:	2f c9       	sub	r9,-4
800061d4:	13 ba       	ld.ub	r10,r9[0x3]
800061d6:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
800061da:	13 aa       	ld.ub	r10,r9[0x2]
800061dc:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
800061e0:	13 9a       	ld.ub	r10,r9[0x1]
800061e2:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
800061e6:	13 89       	ld.ub	r9,r9[0x0]
800061e8:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
800061ec:	32 e9       	mov	r9,46
800061ee:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
800061f2:	f1 69 00 21 	st.b	r8[33],r9
800061f6:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800061f8:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800061fc:	32 09       	mov	r9,32
800061fe:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80006200:	14 38       	cp.w	r8,r10
80006202:	cf e1       	brne	800061fe <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80006204:	48 c8       	lddpc	r8,80006234 <fat_initialize_dir+0x8c>
80006206:	31 09       	mov	r9,16
80006208:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
8000620c:	48 c9       	lddpc	r9,8000623c <fat_initialize_dir+0x94>
8000620e:	2e 09       	sub	r9,-32
80006210:	13 ba       	ld.ub	r10,r9[0x3]
80006212:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80006216:	13 aa       	ld.ub	r10,r9[0x2]
80006218:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000621c:	13 9a       	ld.ub	r10,r9[0x1]
8000621e:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80006222:	13 89       	ld.ub	r9,r9[0x0]
80006224:	f1 69 00 35 	st.b	r8[53],r9
80006228:	30 1c       	mov	r12,1

   return true;
}
8000622a:	d8 02       	popm	pc
8000622c:	80 00       	ld.sh	r0,r0[0x0]
8000622e:	60 c0       	ld.w	r0,r0[0x30]
80006230:	80 00       	ld.sh	r0,r0[0x0]
80006232:	53 f0       	stdsp	sp[0xfc],r0
80006234:	00 00       	add	r0,r0
80006236:	11 f8       	ld.ub	r8,r8[0x7]
80006238:	00 00       	add	r0,r0
8000623a:	11 b8       	ld.ub	r8,r8[0x3]
8000623c:	00 00       	add	r0,r0
8000623e:	13 f8       	ld.ub	r8,r9[0x7]

80006240 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
80006240:	d4 31       	pushm	r0-r7,lr
80006242:	20 5d       	sub	sp,20
80006244:	18 97       	mov	r7,r12
80006246:	50 3b       	stdsp	sp[0xc],r11
80006248:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
8000624a:	f0 1f 00 30 	mcall	80006308 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
8000624e:	f0 1f 00 30 	mcall	8000630c <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80006252:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80006254:	30 01       	mov	r1,0
80006256:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80006258:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000625a:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
8000625c:	30 c6       	mov	r6,12
8000625e:	31 ab       	mov	r11,26
80006260:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80006262:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
         continue;
      }
      if( (12 == u8_id)
80006264:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80006266:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80006268:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000626a:	f2 08 18 00 	cp.b	r8,r9
8000626e:	c0 31       	brne	80006274 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80006270:	b8 83       	st.b	r12[0x0],r3
         continue;
80006272:	c4 58       	rjmp	800062fc <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80006274:	ec 08 18 00 	cp.b	r8,r6
80006278:	5f 00       	sreq	r0
8000627a:	f6 08 18 00 	cp.b	r8,r11
8000627e:	5f 04       	sreq	r4
80006280:	08 40       	or	r0,r4
80006282:	00 94       	mov	r4,r0
80006284:	f4 00 18 00 	cp.b	r0,r10
80006288:	c3 21       	brne	800062ec <fat_create_long_name_entry+0xac>
8000628a:	ea 08 18 00 	cp.b	r8,r5
8000628e:	c3 70       	breq	800062fc <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80006290:	e4 08 18 00 	cp.b	r8,r2
80006294:	c0 41       	brne	8000629c <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
80006296:	40 34       	lddsp	r4,sp[0xc]
80006298:	b8 84       	st.b	r12[0x0],r4
         continue;
8000629a:	c3 18       	rjmp	800062fc <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
8000629c:	40 01       	lddsp	r1,sp[0x0]
8000629e:	58 01       	cp.w	r1,0
800062a0:	c2 41       	brne	800062e8 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
800062a2:	0f 84       	ld.ub	r4,r7[0x0]
800062a4:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
800062a8:	35 c1       	mov	r1,92
800062aa:	e2 04 19 00 	cp.h	r4,r1
800062ae:	5f 00       	sreq	r0
800062b0:	50 20       	stdsp	sp[0x8],r0
800062b2:	32 f0       	mov	r0,47
800062b4:	e0 04 19 00 	cp.h	r4,r0
800062b8:	5f 01       	sreq	r1
800062ba:	40 20       	lddsp	r0,sp[0x8]
800062bc:	02 40       	or	r0,r1
800062be:	f4 00 18 00 	cp.b	r0,r10
800062c2:	c0 50       	breq	800062cc <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
800062c4:	30 04       	mov	r4,0
800062c6:	fb 54 00 12 	st.h	sp[18],r4
800062ca:	c0 38       	rjmp	800062d0 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
800062cc:	58 04       	cp.w	r4,0
800062ce:	c0 31       	brne	800062d4 <fat_create_long_name_entry+0x94>
800062d0:	30 14       	mov	r4,1
800062d2:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
800062d4:	fa c4 ff ee 	sub	r4,sp,-18
800062d8:	09 90       	ld.ub	r0,r4[0x1]
800062da:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
800062dc:	09 84       	ld.ub	r4,r4[0x0]
800062de:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
800062e0:	2f f8       	sub	r8,-1
800062e2:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
800062e4:	2f f7       	sub	r7,-1
800062e6:	c0 38       	rjmp	800062ec <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800062e8:	3f f1       	mov	r1,-1
800062ea:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800062ec:	2f f8       	sub	r8,-1
800062ee:	5c 58       	castu.b	r8
800062f0:	fc 08 18 00 	cp.b	r8,lr
800062f4:	e0 8b 00 08 	brhi	80006304 <fat_create_long_name_entry+0xc4>
800062f8:	2f fc       	sub	r12,-1
800062fa:	cb 8b       	rjmp	8000626a <fat_create_long_name_entry+0x2a>
800062fc:	2f f8       	sub	r8,-1
800062fe:	5c 58       	castu.b	r8
80006300:	2f fc       	sub	r12,-1
80006302:	cb 4b       	rjmp	8000626a <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
80006304:	2f bd       	sub	sp,-20
80006306:	d8 32       	popm	r0-r7,pc
80006308:	80 00       	ld.sh	r0,r0[0x0]
8000630a:	53 f0       	stdsp	sp[0xfc],r0
8000630c:	80 00       	ld.sh	r0,r0[0x0]
8000630e:	50 80       	stdsp	sp[0x20],r0

80006310 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
80006310:	d4 31       	pushm	r0-r7,lr
80006312:	18 90       	mov	r0,r12
80006314:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80006316:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80006318:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000631a:	49 56       	lddpc	r6,8000636c <fat_delete_file+0x5c>
8000631c:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000631e:	f0 1f 00 15 	mcall	80006370 <fat_delete_file+0x60>
80006322:	c2 40       	breq	8000636a <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80006324:	f0 1f 00 14 	mcall	80006374 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
80006328:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000632a:	f8 c7 ff f5 	sub	r7,r12,-11
8000632e:	0f 88       	ld.ub	r8,r7[0x0]
80006330:	ea 08 18 00 	cp.b	r8,r5
80006334:	c0 30       	breq	8000633a <fat_delete_file+0x2a>
80006336:	58 04       	cp.w	r4,0
80006338:	c1 01       	brne	80006358 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
8000633a:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
8000633c:	f0 1f 00 0f 	mcall	80006378 <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
80006340:	0f 88       	ld.ub	r8,r7[0x0]
80006342:	ea 08 18 00 	cp.b	r8,r5
80006346:	c0 41       	brne	8000634e <fat_delete_file+0x3e>
80006348:	e2 12 00 40 	andl	r2,0x40,COH
8000634c:	c0 61       	brne	80006358 <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000634e:	8c 18       	ld.sh	r8,r6[0x2]
80006350:	20 18       	sub	r8,1
80006352:	ac 18       	st.h	r6[0x2],r8
80006354:	02 94       	mov	r4,r1
   }  // end of while(1)
80006356:	ce 4b       	rjmp	8000631e <fat_delete_file+0xe>

   if( b_cluster_list )
80006358:	58 00       	cp.w	r0,0
8000635a:	c0 21       	brne	8000635e <fat_delete_file+0x4e>
8000635c:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000635e:	30 09       	mov	r9,0
80006360:	48 78       	lddpc	r8,8000637c <fat_delete_file+0x6c>
80006362:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80006364:	30 3c       	mov	r12,3
80006366:	f0 1f 00 07 	mcall	80006380 <fat_delete_file+0x70>
         return false;
   }

   return true;
}
8000636a:	d8 32       	popm	r0-r7,pc
8000636c:	00 00       	add	r0,r0
8000636e:	14 44       	or	r4,r10
80006370:	80 00       	ld.sh	r0,r0[0x0]
80006372:	5c 50       	castu.b	r0
80006374:	80 00       	ld.sh	r0,r0[0x0]
80006376:	50 80       	stdsp	sp[0x20],r0
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	53 f0       	stdsp	sp[0xfc],r0
8000637c:	00 00       	add	r0,r0
8000637e:	11 b8       	ld.ub	r8,r8[0x3]
80006380:	80 00       	ld.sh	r0,r0[0x0]
80006382:	5c d4       	com	r4

80006384 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80006384:	eb cd 40 fc 	pushm	r2-r7,lr
80006388:	20 8d       	sub	sp,32
8000638a:	30 06       	mov	r6,0
8000638c:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000638e:	4a 95       	lddpc	r5,80006430 <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80006390:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80006392:	1a 93       	mov	r3,sp
80006394:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80006396:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80006398:	f0 1f 00 27 	mcall	80006434 <fat_garbage_collector_entry+0xb0>
8000639c:	c0 81       	brne	800063ac <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000639e:	4a 78       	lddpc	r8,80006438 <fat_garbage_collector_entry+0xb4>
800063a0:	11 89       	ld.ub	r9,r8[0x0]
800063a2:	31 a8       	mov	r8,26
800063a4:	f0 09 18 00 	cp.b	r9,r8
800063a8:	c3 d1       	brne	80006422 <fat_garbage_collector_entry+0x9e>
800063aa:	c0 68       	rjmp	800063b6 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
800063ac:	f0 1f 00 24 	mcall	8000643c <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
800063b0:	19 88       	ld.ub	r8,r12[0x0]
800063b2:	58 08       	cp.w	r8,0
800063b4:	c1 b1       	brne	800063ea <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800063b6:	49 f8       	lddpc	r8,80006430 <fat_garbage_collector_entry+0xac>
800063b8:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800063ba:	ec 07 19 00 	cp.h	r7,r6
800063be:	c3 40       	breq	80006426 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800063c0:	32 05       	mov	r5,32
800063c2:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800063c4:	49 b6       	lddpc	r6,80006430 <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800063c6:	f0 1f 00 1c 	mcall	80006434 <fat_garbage_collector_entry+0xb0>
800063ca:	c2 c0       	breq	80006422 <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
800063cc:	f0 1f 00 1c 	mcall	8000643c <fat_garbage_collector_entry+0xb8>
800063d0:	0a 9a       	mov	r10,r5
800063d2:	08 9b       	mov	r11,r4
800063d4:	f0 1f 00 1b 	mcall	80006440 <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
800063d8:	f0 1f 00 1b 	mcall	80006444 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
800063dc:	8c 18       	ld.sh	r8,r6[0x2]
800063de:	2f f8       	sub	r8,-1
800063e0:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
800063e2:	f0 07 19 00 	cp.h	r7,r8
800063e6:	cf 01       	brne	800063c6 <fat_garbage_collector_entry+0x42>
800063e8:	c1 f8       	rjmp	80006426 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
800063ea:	e8 08 18 00 	cp.b	r8,r4
800063ee:	c1 70       	breq	8000641c <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800063f0:	ec 07 19 00 	cp.h	r7,r6
800063f4:	c1 20       	breq	80006418 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800063f6:	04 9a       	mov	r10,r2
800063f8:	18 9b       	mov	r11,r12
800063fa:	1a 9c       	mov	r12,sp
800063fc:	f0 1f 00 13 	mcall	80006448 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80006400:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80006402:	f0 1f 00 0d 	mcall	80006434 <fat_garbage_collector_entry+0xb0>
80006406:	c0 e0       	breq	80006422 <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80006408:	f0 1f 00 0d 	mcall	8000643c <fat_garbage_collector_entry+0xb8>
8000640c:	04 9a       	mov	r10,r2
8000640e:	1a 9b       	mov	r11,sp
80006410:	f0 1f 00 0e 	mcall	80006448 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
80006414:	f0 1f 00 0c 	mcall	80006444 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
80006418:	2f f6       	sub	r6,-1
8000641a:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
8000641c:	2f f7       	sub	r7,-1
8000641e:	5c 87       	casts.h	r7
   }  // end of while(1)
80006420:	cb bb       	rjmp	80006396 <fat_garbage_collector_entry+0x12>
80006422:	30 0c       	mov	r12,0
80006424:	c0 28       	rjmp	80006428 <fat_garbage_collector_entry+0xa4>
80006426:	30 1c       	mov	r12,1
}
80006428:	2f 8d       	sub	sp,-32
8000642a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000642e:	00 00       	add	r0,r0
80006430:	00 00       	add	r0,r0
80006432:	14 44       	or	r4,r10
80006434:	80 00       	ld.sh	r0,r0[0x0]
80006436:	5c 50       	castu.b	r0
80006438:	00 00       	add	r0,r0
8000643a:	14 48       	or	r8,r10
8000643c:	80 00       	ld.sh	r0,r0[0x0]
8000643e:	50 80       	stdsp	sp[0x20],r0
80006440:	80 00       	ld.sh	r0,r0[0x0]
80006442:	a0 9a       	st.b	r0[0x1],r10
80006444:	80 00       	ld.sh	r0,r0[0x0]
80006446:	53 f0       	stdsp	sp[0xfc],r0
80006448:	80 00       	ld.sh	r0,r0[0x0]
8000644a:	9f 52       	st.w	pc[0x14],r2

8000644c <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000644c:	eb cd 40 c0 	pushm	r6-r7,lr
80006450:	20 1d       	sub	sp,4
80006452:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80006454:	49 c8       	lddpc	r8,800064c4 <fat_write_fat32_FSInfo+0x78>
80006456:	90 c9       	ld.uh	r9,r8[0x8]
80006458:	70 4a       	ld.w	r10,r8[0x10]
8000645a:	49 c8       	lddpc	r8,800064c8 <fat_write_fat32_FSInfo+0x7c>
8000645c:	12 1a       	sub	r10,r9
8000645e:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80006460:	30 0c       	mov	r12,0
80006462:	f0 1f 00 1b 	mcall	800064cc <fat_write_fat32_FSInfo+0x80>
80006466:	c2 c0       	breq	800064be <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80006468:	f0 1f 00 1a 	mcall	800064d0 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
8000646c:	f0 1f 00 1a 	mcall	800064d4 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80006470:	49 a7       	lddpc	r7,800064d8 <fat_write_fat32_FSInfo+0x8c>
80006472:	30 46       	mov	r6,4
80006474:	0c 9a       	mov	r10,r6
80006476:	49 ab       	lddpc	r11,800064dc <fat_write_fat32_FSInfo+0x90>
80006478:	0e 9c       	mov	r12,r7
8000647a:	f0 1f 00 1a 	mcall	800064e0 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000647e:	0c 9a       	mov	r10,r6
80006480:	49 9b       	lddpc	r11,800064e4 <fat_write_fat32_FSInfo+0x98>
80006482:	ee cc fe 1c 	sub	r12,r7,-484
80006486:	f0 1f 00 17 	mcall	800064e0 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000648a:	1b b9       	ld.ub	r9,sp[0x3]
8000648c:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80006490:	1b a9       	ld.ub	r9,sp[0x2]
80006492:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80006496:	1b 99       	ld.ub	r9,sp[0x1]
80006498:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000649c:	1b 88       	ld.ub	r8,sp[0x0]
8000649e:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
800064a2:	0c 9a       	mov	r10,r6
800064a4:	e0 6b 00 ff 	mov	r11,255
800064a8:	ee cc fe 14 	sub	r12,r7,-492
800064ac:	f0 1f 00 0f 	mcall	800064e8 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
800064b0:	35 58       	mov	r8,85
800064b2:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
800064b6:	3a a8       	mov	r8,-86
800064b8:	ef 68 01 ff 	st.b	r7[511],r8
800064bc:	30 1c       	mov	r12,1
   return true;
}
800064be:	2f fd       	sub	sp,-4
800064c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800064c4:	00 00       	add	r0,r0
800064c6:	13 f8       	ld.ub	r8,r9[0x7]
800064c8:	00 00       	add	r0,r0
800064ca:	11 b4       	ld.ub	r4,r8[0x3]
800064cc:	80 00       	ld.sh	r0,r0[0x0]
800064ce:	56 20       	stdsp	sp[0x188],r0
800064d0:	80 00       	ld.sh	r0,r0[0x0]
800064d2:	53 f0       	stdsp	sp[0xfc],r0
800064d4:	80 00       	ld.sh	r0,r0[0x0]
800064d6:	56 08       	stdsp	sp[0x180],r8
800064d8:	00 00       	add	r0,r0
800064da:	11 f8       	ld.ub	r8,r8[0x7]
800064dc:	80 01       	ld.sh	r1,r0[0x0]
800064de:	36 c0       	mov	r0,108
800064e0:	80 00       	ld.sh	r0,r0[0x0]
800064e2:	9f 52       	st.w	pc[0x14],r2
800064e4:	80 01       	ld.sh	r1,r0[0x0]
800064e6:	36 d4       	mov	r4,109
800064e8:	80 00       	ld.sh	r0,r0[0x0]
800064ea:	a0 9a       	st.b	r0[0x1],r10

800064ec <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
800064ec:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
800064ee:	4c 78       	lddpc	r8,80006608 <fat_allocfreespace+0x11c>
800064f0:	11 89       	ld.ub	r9,r8[0x0]
800064f2:	30 38       	mov	r8,3
800064f4:	f0 09 18 00 	cp.b	r9,r8
800064f8:	c0 61       	brne	80006504 <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800064fa:	3f fc       	mov	r12,-1
800064fc:	f0 1f 00 44 	mcall	8000660c <fat_allocfreespace+0x120>
80006500:	e0 80 00 83 	breq	80006606 <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80006504:	4c 31       	lddpc	r1,80006610 <fat_allocfreespace+0x124>
80006506:	03 89       	ld.ub	r9,r1[0x0]
80006508:	3f f8       	mov	r8,-1
8000650a:	f0 09 18 00 	cp.b	r9,r8
8000650e:	c0 61       	brne	8000651a <fat_allocfreespace+0x2e>
80006510:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80006512:	30 29       	mov	r9,2
80006514:	4c 08       	lddpc	r8,80006614 <fat_allocfreespace+0x128>
80006516:	91 09       	st.w	r8[0x0],r9
80006518:	c0 78       	rjmp	80006526 <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000651a:	4b e8       	lddpc	r8,80006610 <fat_allocfreespace+0x124>
8000651c:	70 09       	ld.w	r9,r8[0x0]
8000651e:	2f f9       	sub	r9,-1
80006520:	4b d8       	lddpc	r8,80006614 <fat_allocfreespace+0x128>
80006522:	91 09       	st.w	r8[0x0],r9
80006524:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
80006526:	f0 1f 00 3d 	mcall	80006618 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
8000652a:	4b b8       	lddpc	r8,80006614 <fat_allocfreespace+0x128>
8000652c:	70 09       	ld.w	r9,r8[0x0]
8000652e:	4b c8       	lddpc	r8,8000661c <fat_allocfreespace+0x130>
80006530:	70 38       	ld.w	r8,r8[0xc]
80006532:	10 39       	cp.w	r9,r8
80006534:	c5 e2       	brcc	800065f0 <fat_allocfreespace+0x104>
80006536:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80006538:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000653a:	4b 77       	lddpc	r7,80006614 <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000653c:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000653e:	4b 55       	lddpc	r5,80006610 <fat_allocfreespace+0x124>
80006540:	4b 76       	lddpc	r6,8000661c <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80006542:	04 9c       	mov	r12,r2
80006544:	f0 1f 00 37 	mcall	80006620 <fat_allocfreespace+0x134>
80006548:	c5 f0       	breq	80006606 <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000654a:	6e 18       	ld.w	r8,r7[0x4]
8000654c:	58 08       	cp.w	r8,0
8000654e:	c4 01       	brne	800065ce <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80006550:	6e 08       	ld.w	r8,r7[0x0]
80006552:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80006554:	58 04       	cp.w	r4,0
80006556:	c0 80       	breq	80006566 <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80006558:	20 18       	sub	r8,1
8000655a:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000655c:	06 9c       	mov	r12,r3
8000655e:	f0 1f 00 31 	mcall	80006620 <fat_allocfreespace+0x134>
80006562:	c1 e1       	brne	8000659e <fat_allocfreespace+0xb2>
80006564:	c5 18       	rjmp	80006606 <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80006566:	03 88       	ld.ub	r8,r1[0x0]
80006568:	3f f9       	mov	r9,-1
8000656a:	f2 08 18 00 	cp.b	r8,r9
8000656e:	c1 60       	breq	8000659a <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80006570:	6a 08       	ld.w	r8,r5[0x0]
80006572:	58 08       	cp.w	r8,0
80006574:	c0 e1       	brne	80006590 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80006576:	4a 59       	lddpc	r9,80006608 <fat_allocfreespace+0x11c>
80006578:	13 88       	ld.ub	r8,r9[0x0]
8000657a:	30 39       	mov	r9,3
8000657c:	f2 08 18 00 	cp.b	r8,r9
80006580:	c0 50       	breq	8000658a <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80006582:	31 b9       	mov	r9,27
80006584:	4a 88       	lddpc	r8,80006624 <fat_allocfreespace+0x138>
80006586:	b0 89       	st.b	r8[0x0],r9
80006588:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000658a:	6c 68       	ld.w	r8,r6[0x18]
8000658c:	8f 08       	st.w	r7[0x0],r8
8000658e:	c0 28       	rjmp	80006592 <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80006590:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80006592:	06 9c       	mov	r12,r3
80006594:	f0 1f 00 23 	mcall	80006620 <fat_allocfreespace+0x134>
80006598:	c3 70       	breq	80006606 <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000659a:	6e 18       	ld.w	r8,r7[0x4]
8000659c:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000659e:	6e 18       	ld.w	r8,r7[0x4]
800065a0:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
800065a2:	e0 68 ff ff 	mov	r8,65535
800065a6:	ea 18 0f ff 	orh	r8,0xfff
800065aa:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
800065ac:	06 9c       	mov	r12,r3
800065ae:	f0 1f 00 1d 	mcall	80006620 <fat_allocfreespace+0x134>
800065b2:	c2 a0       	breq	80006606 <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
800065b4:	6a 19       	ld.w	r9,r5[0x4]
800065b6:	0d 98       	ld.ub	r8,r6[0x1]
800065b8:	10 39       	cp.w	r9,r8
800065ba:	e0 8b 00 06 	brhi	800065c6 <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
800065be:	30 09       	mov	r9,0
800065c0:	49 48       	lddpc	r8,80006610 <fat_allocfreespace+0x124>
800065c2:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
800065c4:	c1 e8       	rjmp	80006600 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800065c6:	10 19       	sub	r9,r8
800065c8:	8b 19       	st.w	r5[0x4],r9
800065ca:	06 94       	mov	r4,r3
800065cc:	c0 98       	rjmp	800065de <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
800065ce:	58 04       	cp.w	r4,0
800065d0:	c1 81       	brne	80006600 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
800065d2:	58 00       	cp.w	r0,0
800065d4:	c0 50       	breq	800065de <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
800065d6:	6e 08       	ld.w	r8,r7[0x0]
800065d8:	f0 c8 fe 0c 	sub	r8,r8,-500
800065dc:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800065de:	6e 08       	ld.w	r8,r7[0x0]
800065e0:	2f f8       	sub	r8,-1
800065e2:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800065e4:	6c 39       	ld.w	r9,r6[0xc]
800065e6:	10 39       	cp.w	r9,r8
800065e8:	fe 9b ff ad 	brhi	80006542 <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800065ec:	58 04       	cp.w	r4,0
800065ee:	c0 91       	brne	80006600 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
800065f0:	58 00       	cp.w	r0,0
800065f2:	c0 30       	breq	800065f8 <fat_allocfreespace+0x10c>
800065f4:	30 00       	mov	r0,0
800065f6:	c8 eb       	rjmp	80006512 <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800065f8:	31 b9       	mov	r9,27
800065fa:	48 b8       	lddpc	r8,80006624 <fat_allocfreespace+0x138>
800065fc:	b0 89       	st.b	r8[0x0],r9
800065fe:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
80006600:	f0 1f 00 0a 	mcall	80006628 <fat_allocfreespace+0x13c>
80006604:	d8 32       	popm	r0-r7,pc
80006606:	d8 3a       	popm	r0-r7,pc,r12=0
80006608:	00 00       	add	r0,r0
8000660a:	14 44       	or	r4,r10
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	64 4c       	ld.w	r12,r2[0x10]
80006610:	00 00       	add	r0,r0
80006612:	14 a0       	st.w	r10++,r0
80006614:	00 00       	add	r0,r0
80006616:	14 98       	mov	r8,r10
80006618:	80 00       	ld.sh	r0,r0[0x0]
8000661a:	60 a8       	ld.w	r8,r0[0x28]
8000661c:	00 00       	add	r0,r0
8000661e:	13 f8       	ld.ub	r8,r9[0x7]
80006620:	80 00       	ld.sh	r0,r0[0x0]
80006622:	57 34       	stdsp	sp[0x1cc],r4
80006624:	00 00       	add	r0,r0
80006626:	14 48       	or	r8,r10
80006628:	80 00       	ld.sh	r0,r0[0x0]
8000662a:	61 34       	ld.w	r4,r0[0x4c]

8000662c <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000662c:	d4 31       	pushm	r0-r7,lr
8000662e:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006630:	30 09       	mov	r9,0
80006632:	4a 38       	lddpc	r8,800066bc <fat_alloc_entry_free+0x90>
80006634:	b0 19       	st.h	r8[0x2],r9
80006636:	18 92       	mov	r2,r12
80006638:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000663a:	4a 26       	lddpc	r6,800066c0 <fat_alloc_entry_free+0x94>
8000663c:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000663e:	4a 21       	lddpc	r1,800066c4 <fat_alloc_entry_free+0x98>
80006640:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006642:	10 97       	mov	r7,r8
80006644:	12 90       	mov	r0,r9
80006646:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80006648:	f0 1f 00 20 	mcall	800066c8 <fat_alloc_entry_free+0x9c>
8000664c:	c1 61       	brne	80006678 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000664e:	0d 88       	ld.ub	r8,r6[0x0]
80006650:	e6 08 18 00 	cp.b	r8,r3
80006654:	c3 11       	brne	800066b6 <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80006656:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80006658:	f0 1f 00 1d 	mcall	800066cc <fat_alloc_entry_free+0xa0>
8000665c:	c0 a1       	brne	80006670 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000665e:	58 04       	cp.w	r4,0
80006660:	c2 b1       	brne	800066b6 <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80006662:	f0 1f 00 1c 	mcall	800066d0 <fat_alloc_entry_free+0xa4>
80006666:	c2 80       	breq	800066b6 <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006668:	ae 10       	st.h	r7[0x2],r0
8000666a:	40 02       	lddsp	r2,sp[0x0]
8000666c:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
8000666e:	ce db       	rjmp	80006648 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80006670:	f0 1f 00 19 	mcall	800066d4 <fat_alloc_entry_free+0xa8>
80006674:	ce a1       	brne	80006648 <fat_alloc_entry_free+0x1c>
80006676:	c2 08       	rjmp	800066b6 <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80006678:	f0 1f 00 18 	mcall	800066d8 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
8000667c:	19 88       	ld.ub	r8,r12[0x0]
8000667e:	30 09       	mov	r9,0
80006680:	f2 08 18 00 	cp.b	r8,r9
80006684:	c0 61       	brne	80006690 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
80006686:	20 12       	sub	r2,1
80006688:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
8000668a:	c0 31       	brne	80006690 <fat_alloc_entry_free+0x64>
8000668c:	30 1c       	mov	r12,1
8000668e:	c1 58       	rjmp	800066b8 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80006690:	8e 18       	ld.sh	r8,r7[0x2]
80006692:	2f f8       	sub	r8,-1
80006694:	5c 88       	casts.h	r8
80006696:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80006698:	cd 81       	brne	80006648 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000669a:	58 04       	cp.w	r4,0
8000669c:	c0 60       	breq	800066a8 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000669e:	31 b9       	mov	r9,27
800066a0:	48 88       	lddpc	r8,800066c0 <fat_alloc_entry_free+0x94>
800066a2:	b0 89       	st.b	r8[0x0],r9
800066a4:	30 0c       	mov	r12,0
            return false;
800066a6:	c0 98       	rjmp	800066b8 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
800066a8:	f0 1f 00 0a 	mcall	800066d0 <fat_alloc_entry_free+0xa4>
800066ac:	c0 50       	breq	800066b6 <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
800066ae:	ae 10       	st.h	r7[0x2],r0
800066b0:	40 02       	lddsp	r2,sp[0x0]
800066b2:	0a 94       	mov	r4,r5
800066b4:	cc ab       	rjmp	80006648 <fat_alloc_entry_free+0x1c>
800066b6:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
800066b8:	2f fd       	sub	sp,-4
800066ba:	d8 32       	popm	r0-r7,pc
800066bc:	00 00       	add	r0,r0
800066be:	14 44       	or	r4,r10
800066c0:	00 00       	add	r0,r0
800066c2:	14 48       	or	r8,r10
800066c4:	00 00       	add	r0,r0
800066c6:	14 a0       	st.w	r10++,r0
800066c8:	80 00       	ld.sh	r0,r0[0x0]
800066ca:	5c 50       	castu.b	r0
800066cc:	80 00       	ld.sh	r0,r0[0x0]
800066ce:	64 ec       	ld.w	r12,r2[0x38]
800066d0:	80 00       	ld.sh	r0,r0[0x0]
800066d2:	63 84       	ld.w	r4,r1[0x60]
800066d4:	80 00       	ld.sh	r0,r0[0x0]
800066d6:	60 c0       	ld.w	r0,r0[0x30]
800066d8:	80 00       	ld.sh	r0,r0[0x0]
800066da:	50 80       	stdsp	sp[0x20],r0

800066dc <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800066dc:	d4 31       	pushm	r0-r7,lr
800066de:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800066e0:	33 a2       	mov	r2,58
800066e2:	30 d5       	mov	r5,13
800066e4:	30 23       	mov	r3,2
800066e6:	49 86       	lddpc	r6,80006744 <fat_check_name+0x68>
800066e8:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800066ec:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800066ee:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800066f0:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800066f2:	0e 9c       	mov	r12,r7
800066f4:	f0 1f 00 15 	mcall	80006748 <fat_check_name+0x6c>
800066f8:	c1 a1       	brne	8000672c <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800066fa:	ee 02 19 00 	cp.h	r2,r7
800066fe:	c0 60       	breq	8000670a <fat_check_name+0x2e>
80006700:	02 98       	mov	r8,r1
80006702:	11 89       	ld.ub	r9,r8[0x0]
80006704:	ee 09 19 00 	cp.h	r9,r7
80006708:	c0 61       	brne	80006714 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
8000670a:	31 c9       	mov	r9,28
8000670c:	49 08       	lddpc	r8,8000674c <fat_check_name+0x70>
8000670e:	b0 89       	st.b	r8[0x0],r9
80006710:	30 03       	mov	r3,0
            return 0;      // incorrect character
80006712:	c1 68       	rjmp	8000673e <fat_check_name+0x62>
80006714:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80006716:	0c 38       	cp.w	r8,r6
80006718:	cf 51       	brne	80006702 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
8000671a:	58 05       	cp.w	r5,0
8000671c:	c0 41       	brne	80006724 <fat_check_name+0x48>
      {
         u8_nb_entry++;
8000671e:	2f f3       	sub	r3,-1
80006720:	5c 53       	castu.b	r3
80006722:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
80006724:	20 15       	sub	r5,1
80006726:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80006728:	2f f4       	sub	r4,-1
   }
8000672a:	ce 3b       	rjmp	800066f0 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
8000672c:	31 48       	mov	r8,20
8000672e:	f0 03 18 00 	cp.b	r3,r8
80006732:	e0 88 00 06 	brls	8000673e <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80006736:	32 b9       	mov	r9,43
80006738:	48 58       	lddpc	r8,8000674c <fat_check_name+0x70>
8000673a:	b0 89       	st.b	r8[0x0],r9
8000673c:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
8000673e:	06 9c       	mov	r12,r3
80006740:	d8 32       	popm	r0-r7,pc
80006742:	00 00       	add	r0,r0
80006744:	80 01       	ld.sh	r1,r0[0x0]
80006746:	36 c4       	mov	r4,108
80006748:	80 00       	ld.sh	r0,r0[0x0]
8000674a:	50 58       	stdsp	sp[0x14],r8
8000674c:	00 00       	add	r0,r0
8000674e:	14 48       	or	r8,r10

80006750 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80006750:	d4 31       	pushm	r0-r7,lr
80006752:	20 8d       	sub	sp,32
80006754:	18 94       	mov	r4,r12
80006756:	50 2b       	stdsp	sp[0x8],r11
80006758:	14 97       	mov	r7,r10
8000675a:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000675c:	58 09       	cp.w	r9,0
8000675e:	c0 40       	breq	80006766 <fat_create_short_entry_name+0x16>
80006760:	30 09       	mov	r9,0
80006762:	50 19       	stdsp	sp[0x4],r9
80006764:	c0 68       	rjmp	80006770 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80006766:	f0 1f 00 66 	mcall	800068fc <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000676a:	f0 1f 00 66 	mcall	80006900 <fat_create_short_entry_name+0x1b0>
8000676e:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80006770:	30 98       	mov	r8,9
80006772:	f0 07 18 00 	cp.b	r7,r8
80006776:	e0 8b 00 04 	brhi	8000677e <fat_create_short_entry_name+0x2e>
8000677a:	30 18       	mov	r8,1
8000677c:	c0 88       	rjmp	8000678c <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
8000677e:	36 38       	mov	r8,99
80006780:	ee 08 18 00 	cp.b	r8,r7
80006784:	f9 b8 02 02 	movhs	r8,2
80006788:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000678c:	e0 6a cc cd 	mov	r10,52429
80006790:	ea 1a cc cc 	orh	r10,0xcccc
80006794:	ee 0a 06 42 	mulu.d	r2,r7,r10
80006798:	e6 09 16 03 	lsr	r9,r3,0x3
8000679c:	f2 09 00 29 	add	r9,r9,r9<<0x2
800067a0:	ee 09 01 19 	sub	r9,r7,r9<<0x1
800067a4:	2d 09       	sub	r9,-48
800067a6:	5c 59       	castu.b	r9
800067a8:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800067aa:	e0 63 85 1f 	mov	r3,34079
800067ae:	ea 13 51 eb 	orh	r3,0x51eb
800067b2:	ee 03 06 42 	mulu.d	r2,r7,r3
800067b6:	e6 09 16 05 	lsr	r9,r3,0x5
800067ba:	f2 0b 10 64 	mul	r11,r9,100
800067be:	ee 0b 01 0b 	sub	r11,r7,r11
800067c2:	5c 5b       	castu.b	r11
800067c4:	f6 0a 06 4a 	mulu.d	r10,r11,r10
800067c8:	f6 0a 16 03 	lsr	r10,r11,0x3
800067cc:	2d 0a       	sub	r10,-48
800067ce:	5c 5a       	castu.b	r10
800067d0:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800067d2:	2d 09       	sub	r9,-48
800067d4:	5c 59       	castu.b	r9
800067d6:	50 49       	stdsp	sp[0x10],r9
800067d8:	30 01       	mov	r1,0
800067da:	30 17       	mov	r7,1
800067dc:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800067de:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800067e0:	f0 09 11 ff 	rsub	r9,r8,-1
800067e4:	2f 89       	sub	r9,-8
800067e6:	50 39       	stdsp	sp[0xc],r9
800067e8:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800067ea:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800067ec:	f0 08 11 06 	rsub	r8,r8,6
800067f0:	5c 58       	castu.b	r8
800067f2:	50 78       	stdsp	sp[0x1c],r8
800067f4:	c0 28       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800067f6:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
800067f8:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
800067fa:	e6 07 18 00 	cp.b	r7,r3
800067fe:	c1 41       	brne	80006826 <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80006800:	40 39       	lddsp	r9,sp[0xc]
80006802:	0a 39       	cp.w	r9,r5
80006804:	5f 09       	sreq	r9
80006806:	e0 06 18 00 	cp.b	r6,r0
8000680a:	5f 08       	sreq	r8
8000680c:	f3 e8 10 08 	or	r8,r9,r8
80006810:	30 09       	mov	r9,0
80006812:	f2 08 18 00 	cp.b	r8,r9
80006816:	c0 51       	brne	80006820 <fat_create_short_entry_name+0xd0>
80006818:	0c 9c       	mov	r12,r6
8000681a:	f0 1f 00 3b 	mcall	80006904 <fat_create_short_entry_name+0x1b4>
8000681e:	c1 10       	breq	80006840 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80006820:	2f f7       	sub	r7,-1
80006822:	5c 57       	castu.b	r7
            continue;
80006824:	ce ab       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80006826:	e4 07 18 00 	cp.b	r7,r2
8000682a:	c1 21       	brne	8000684e <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000682c:	30 b9       	mov	r9,11
8000682e:	f2 05 18 00 	cp.b	r5,r9
80006832:	c0 50       	breq	8000683c <fat_create_short_entry_name+0xec>
80006834:	0c 9c       	mov	r12,r6
80006836:	f0 1f 00 34 	mcall	80006904 <fat_create_short_entry_name+0x1b4>
8000683a:	c0 30       	breq	80006840 <fat_create_short_entry_name+0xf0>
8000683c:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
8000683e:	cd db       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80006840:	0c 9c       	mov	r12,r6
80006842:	f0 1f 00 32 	mcall	80006908 <fat_create_short_entry_name+0x1b8>
80006846:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80006848:	2f f4       	sub	r4,-1
         if( 0 == character )
8000684a:	58 0c       	cp.w	r12,0
8000684c:	cd 60       	breq	800067f8 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
8000684e:	30 78       	mov	r8,7
80006850:	f0 07 18 00 	cp.b	r7,r8
80006854:	c0 c1       	brne	8000686c <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80006856:	e0 06 18 00 	cp.b	r6,r0
8000685a:	c0 50       	breq	80006864 <fat_create_short_entry_name+0x114>
8000685c:	0c 9c       	mov	r12,r6
8000685e:	f0 1f 00 2a 	mcall	80006904 <fat_create_short_entry_name+0x1b4>
80006862:	c0 30       	breq	80006868 <fat_create_short_entry_name+0x118>
80006864:	30 87       	mov	r7,8
80006866:	cc 9b       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80006868:	2f f4       	sub	r4,-1
8000686a:	cc 7b       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
8000686c:	30 68       	mov	r8,6
8000686e:	f0 07 18 00 	cp.b	r7,r8
80006872:	c0 61       	brne	8000687e <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80006874:	e4 05 18 00 	cp.b	r5,r2
80006878:	cb f0       	breq	800067f6 <fat_create_short_entry_name+0xa6>
8000687a:	32 06       	mov	r6,32
8000687c:	c1 28       	rjmp	800068a0 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
8000687e:	30 98       	mov	r8,9
80006880:	f0 07 18 00 	cp.b	r7,r8
80006884:	c0 71       	brne	80006892 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80006886:	30 b8       	mov	r8,11
80006888:	f0 05 18 00 	cp.b	r5,r8
8000688c:	c3 50       	breq	800068f6 <fat_create_short_entry_name+0x1a6>
8000688e:	32 06       	mov	r6,32
80006890:	c0 f8       	rjmp	800068ae <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80006892:	30 58       	mov	r8,5
80006894:	f0 07 18 00 	cp.b	r7,r8
80006898:	c0 41       	brne	800068a0 <fat_create_short_entry_name+0x150>
8000689a:	40 66       	lddsp	r6,sp[0x18]
8000689c:	30 67       	mov	r7,6
8000689e:	c0 f8       	rjmp	800068bc <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
800068a0:	30 48       	mov	r8,4
800068a2:	f0 07 18 00 	cp.b	r7,r8
800068a6:	c0 41       	brne	800068ae <fat_create_short_entry_name+0x15e>
800068a8:	40 56       	lddsp	r6,sp[0x14]
800068aa:	30 57       	mov	r7,5
800068ac:	c1 28       	rjmp	800068d0 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
800068ae:	30 38       	mov	r8,3
800068b0:	f0 07 18 00 	cp.b	r7,r8
800068b4:	c0 41       	brne	800068bc <fat_create_short_entry_name+0x16c>
800068b6:	40 46       	lddsp	r6,sp[0x10]
800068b8:	30 47       	mov	r7,4
800068ba:	c0 b8       	rjmp	800068d0 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
800068bc:	30 28       	mov	r8,2
800068be:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800068c0:	f0 07 18 00 	cp.b	r7,r8
800068c4:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
800068c8:	f0 09 18 00 	cp.b	r9,r8
800068cc:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
800068d0:	40 08       	lddsp	r8,sp[0x0]
800068d2:	58 08       	cp.w	r8,0
800068d4:	c0 50       	breq	800068de <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
800068d6:	40 29       	lddsp	r9,sp[0x8]
800068d8:	12 c6       	st.b	r9++,r6
800068da:	50 29       	stdsp	sp[0x8],r9
800068dc:	c0 48       	rjmp	800068e4 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800068de:	40 18       	lddsp	r8,sp[0x4]
800068e0:	10 c6       	st.b	r8++,r6
800068e2:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
800068e4:	2f f5       	sub	r5,-1
800068e6:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
800068e8:	e2 08 16 01 	lsr	r8,r1,0x1
800068ec:	a7 71       	lsl	r1,0x7
800068ee:	10 01       	add	r1,r8
      crc += character;                                  // add next char
800068f0:	0c 01       	add	r1,r6
800068f2:	5c 51       	castu.b	r1
800068f4:	c8 2b       	rjmp	800067f8 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
800068f6:	02 9c       	mov	r12,r1
800068f8:	2f 8d       	sub	sp,-32
800068fa:	d8 32       	popm	r0-r7,pc
800068fc:	80 00       	ld.sh	r0,r0[0x0]
800068fe:	53 f0       	stdsp	sp[0xfc],r0
80006900:	80 00       	ld.sh	r0,r0[0x0]
80006902:	50 80       	stdsp	sp[0x20],r0
80006904:	80 00       	ld.sh	r0,r0[0x0]
80006906:	50 58       	stdsp	sp[0x14],r8
80006908:	80 00       	ld.sh	r0,r0[0x0]
8000690a:	60 5c       	ld.w	r12,r0[0x14]

8000690c <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
8000690c:	eb cd 40 80 	pushm	r7,lr
80006910:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80006912:	f0 1f 00 12 	mcall	80006958 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80006916:	19 88       	ld.ub	r8,r12[0x0]
80006918:	58 08       	cp.w	r8,0
8000691a:	c0 61       	brne	80006926 <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
8000691c:	30 a9       	mov	r9,10
8000691e:	49 08       	lddpc	r8,8000695c <fat_entry_shortname_compare+0x50>
80006920:	b0 89       	st.b	r8[0x0],r9
80006922:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80006926:	3e 59       	mov	r9,-27
80006928:	f2 08 18 00 	cp.b	r8,r9
8000692c:	c0 70       	breq	8000693a <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
8000692e:	f9 39 00 0b 	ld.ub	r9,r12[11]
80006932:	30 f8       	mov	r8,15
80006934:	f0 09 18 00 	cp.b	r9,r8
80006938:	c0 61       	brne	80006944 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000693a:	30 b9       	mov	r9,11
8000693c:	48 88       	lddpc	r8,8000695c <fat_entry_shortname_compare+0x50>
8000693e:	b0 89       	st.b	r8[0x0],r9
80006940:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80006944:	30 b9       	mov	r9,11
80006946:	48 68       	lddpc	r8,8000695c <fat_entry_shortname_compare+0x50>
80006948:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000694a:	30 ba       	mov	r10,11
8000694c:	0e 9b       	mov	r11,r7
8000694e:	f0 1f 00 05 	mcall	80006960 <fat_entry_shortname_compare+0x54>
80006952:	5f 0c       	sreq	r12
}
80006954:	e3 cd 80 80 	ldm	sp++,r7,pc
80006958:	80 00       	ld.sh	r0,r0[0x0]
8000695a:	50 80       	stdsp	sp[0x20],r0
8000695c:	00 00       	add	r0,r0
8000695e:	14 48       	or	r8,r10
80006960:	80 00       	ld.sh	r0,r0[0x0]
80006962:	9f 2c       	st.w	pc[0x8],r12

80006964 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80006964:	d4 31       	pushm	r0-r7,lr
80006966:	20 3d       	sub	sp,12
80006968:	18 93       	mov	r3,r12
8000696a:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
8000696c:	1a 96       	mov	r6,sp
8000696e:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80006970:	49 65       	lddpc	r5,800069c8 <fat_find_short_entry_name+0x64>
80006972:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80006974:	49 61       	lddpc	r1,800069cc <fat_find_short_entry_name+0x68>
80006976:	30 a0       	mov	r0,10
80006978:	c0 58       	rjmp	80006982 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000697a:	3f f8       	mov	r8,-1
8000697c:	f0 07 18 00 	cp.b	r7,r8
80006980:	c2 00       	breq	800069c0 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
80006982:	2f f7       	sub	r7,-1
80006984:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80006986:	04 99       	mov	r9,r2
80006988:	0e 9a       	mov	r10,r7
8000698a:	1a 9b       	mov	r11,sp
8000698c:	06 9c       	mov	r12,r3
8000698e:	f0 1f 00 11 	mcall	800069d0 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80006992:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80006994:	f0 1f 00 10 	mcall	800069d4 <fat_find_short_entry_name+0x70>
80006998:	c0 81       	brne	800069a8 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000699a:	48 d8       	lddpc	r8,800069cc <fat_find_short_entry_name+0x68>
8000699c:	11 89       	ld.ub	r9,r8[0x0]
8000699e:	31 a8       	mov	r8,26
800069a0:	f0 09 18 00 	cp.b	r9,r8
800069a4:	c0 e1       	brne	800069c0 <fat_find_short_entry_name+0x5c>
800069a6:	c0 e8       	rjmp	800069c2 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
800069a8:	1a 9c       	mov	r12,sp
800069aa:	f0 1f 00 0c 	mcall	800069d8 <fat_find_short_entry_name+0x74>
800069ae:	ce 61       	brne	8000697a <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
800069b0:	03 88       	ld.ub	r8,r1[0x0]
800069b2:	e0 08 18 00 	cp.b	r8,r0
800069b6:	c0 60       	breq	800069c2 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
800069b8:	8a 18       	ld.sh	r8,r5[0x2]
800069ba:	2f f8       	sub	r8,-1
800069bc:	aa 18       	st.h	r5[0x2],r8
      }
800069be:	ce bb       	rjmp	80006994 <fat_find_short_entry_name+0x30>
800069c0:	30 07       	mov	r7,0
   }
}
800069c2:	0e 9c       	mov	r12,r7
800069c4:	2f dd       	sub	sp,-12
800069c6:	d8 32       	popm	r0-r7,pc
800069c8:	00 00       	add	r0,r0
800069ca:	14 44       	or	r4,r10
800069cc:	00 00       	add	r0,r0
800069ce:	14 48       	or	r8,r10
800069d0:	80 00       	ld.sh	r0,r0[0x0]
800069d2:	67 50       	ld.w	r0,r3[0x54]
800069d4:	80 00       	ld.sh	r0,r0[0x0]
800069d6:	5c 50       	castu.b	r0
800069d8:	80 00       	ld.sh	r0,r0[0x0]
800069da:	69 0c       	ld.w	r12,r4[0x40]

800069dc <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
800069dc:	eb cd 40 fc 	pushm	r2-r7,lr
800069e0:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
800069e2:	f0 1f 00 21 	mcall	80006a64 <fat_create_entry_file_name+0x88>
800069e6:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
800069e8:	c3 b0       	breq	80006a5e <fat_create_entry_file_name+0x82>
      return false;

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
800069ea:	0c 9c       	mov	r12,r6
800069ec:	f0 1f 00 1f 	mcall	80006a68 <fat_create_entry_file_name+0x8c>
800069f0:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
800069f2:	c0 61       	brne	800069fe <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800069f4:	32 a9       	mov	r9,42
800069f6:	49 e8       	lddpc	r8,80006a6c <fat_create_entry_file_name+0x90>
800069f8:	b0 89       	st.b	r8[0x0],r9
800069fa:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
800069fe:	0a 9c       	mov	r12,r5
80006a00:	f0 1f 00 1c 	mcall	80006a70 <fat_create_entry_file_name+0x94>
80006a04:	c2 d0       	breq	80006a5e <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80006a06:	30 09       	mov	r9,0
80006a08:	0e 9a       	mov	r10,r7
80006a0a:	12 9b       	mov	r11,r9
80006a0c:	0c 9c       	mov	r12,r6
80006a0e:	f0 1f 00 1a 	mcall	80006a74 <fat_create_entry_file_name+0x98>
80006a12:	18 92       	mov	r2,r12
   u8_nb_entry--;
80006a14:	20 15       	sub	r5,1
80006a16:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80006a18:	c1 c0       	breq	80006a50 <fat_create_entry_file_name+0x74>
80006a1a:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80006a1c:	49 74       	lddpc	r4,80006a78 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80006a1e:	ea c3 ff c0 	sub	r3,r5,-64
80006a22:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80006a24:	88 18       	ld.sh	r8,r4[0x2]
80006a26:	20 18       	sub	r8,1
80006a28:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80006a2a:	f0 1f 00 15 	mcall	80006a7c <fat_create_entry_file_name+0xa0>
80006a2e:	c1 80       	breq	80006a5e <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80006a30:	ea 07 18 00 	cp.b	r7,r5
80006a34:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80006a38:	0e 9a       	mov	r10,r7
80006a3a:	04 9b       	mov	r11,r2
80006a3c:	0c 9c       	mov	r12,r6
80006a3e:	f0 1f 00 11 	mcall	80006a80 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80006a42:	2f f7       	sub	r7,-1
80006a44:	5c 57       	castu.b	r7
80006a46:	ee 05 18 00 	cp.b	r5,r7
80006a4a:	c0 33       	brcs	80006a50 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80006a4c:	2f 36       	sub	r6,-13
80006a4e:	ce bb       	rjmp	80006a24 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80006a50:	48 a8       	lddpc	r8,80006a78 <fat_create_entry_file_name+0x9c>
80006a52:	90 19       	ld.sh	r9,r8[0x2]
80006a54:	f2 05 00 05 	add	r5,r9,r5
80006a58:	b0 15       	st.h	r8[0x2],r5
80006a5a:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80006a5e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80006a62:	00 00       	add	r0,r0
80006a64:	80 00       	ld.sh	r0,r0[0x0]
80006a66:	66 dc       	ld.w	r12,r3[0x34]
80006a68:	80 00       	ld.sh	r0,r0[0x0]
80006a6a:	69 64       	ld.w	r4,r4[0x58]
80006a6c:	00 00       	add	r0,r0
80006a6e:	14 48       	or	r8,r10
80006a70:	80 00       	ld.sh	r0,r0[0x0]
80006a72:	66 2c       	ld.w	r12,r3[0x8]
80006a74:	80 00       	ld.sh	r0,r0[0x0]
80006a76:	67 50       	ld.w	r0,r3[0x54]
80006a78:	00 00       	add	r0,r0
80006a7a:	14 44       	or	r4,r10
80006a7c:	80 00       	ld.sh	r0,r0[0x0]
80006a7e:	5c 50       	castu.b	r0
80006a80:	80 00       	ld.sh	r0,r0[0x0]
80006a82:	62 40       	ld.w	r0,r1[0x10]

80006a84 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80006a84:	d4 31       	pushm	r0-r7,lr
80006a86:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80006a88:	30 07       	mov	r7,0
80006a8a:	fe f8 02 d2 	ld.w	r8,pc[722]
80006a8e:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80006a90:	f0 1f 00 b4 	mcall	80006d60 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006a94:	fe f8 02 d0 	ld.w	r8,pc[720]
80006a98:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80006a9a:	fe f8 02 ce 	ld.w	r8,pc[718]
80006a9e:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80006aa0:	f0 1f 00 b3 	mcall	80006d6c <fat_mount+0x2e8>
80006aa4:	e0 80 01 58 	breq	80006d54 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80006aa8:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80006aac:	ea c8 fe 42 	sub	r8,r5,-446
80006ab0:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80006ab2:	38 04       	mov	r4,-128
80006ab4:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80006ab6:	30 1c       	mov	r12,1
80006ab8:	f0 1f 00 af 	mcall	80006d74 <fat_mount+0x2f0>
80006abc:	e0 80 01 4c 	breq	80006d54 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80006ac0:	eb 39 01 fe 	ld.ub	r9,r5[510]
80006ac4:	35 58       	mov	r8,85
80006ac6:	f0 09 18 00 	cp.b	r9,r8
80006aca:	c0 d0       	breq	80006ae4 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80006acc:	eb 39 01 ff 	ld.ub	r9,r5[511]
80006ad0:	3a a8       	mov	r8,-86
80006ad2:	f0 09 18 00 	cp.b	r9,r8
80006ad6:	c0 70       	breq	80006ae4 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80006ad8:	30 29       	mov	r9,2
80006ada:	fe f8 02 9e 	ld.w	r8,pc[670]
80006ade:	b0 89       	st.b	r8[0x0],r9
80006ae0:	30 0c       	mov	r12,0
         return false;
80006ae2:	c3 a9       	rjmp	80006d56 <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80006ae4:	fe f8 02 84 	ld.w	r8,pc[644]
80006ae8:	70 08       	ld.w	r8,r8[0x0]
80006aea:	58 08       	cp.w	r8,0
80006aec:	c5 21       	brne	80006b90 <fat_mount+0x10c>
80006aee:	40 08       	lddsp	r8,sp[0x0]
80006af0:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80006af2:	30 1e       	mov	lr,1
80006af4:	30 63       	mov	r3,6
80006af6:	30 e2       	mov	r2,14
80006af8:	30 b1       	mov	r1,11
80006afa:	30 c0       	mov	r0,12
80006afc:	11 89       	ld.ub	r9,r8[0x0]
80006afe:	e8 09 18 00 	cp.b	r9,r4
80006b02:	5f 0b       	sreq	r11
80006b04:	ee 09 18 00 	cp.b	r9,r7
80006b08:	5f 09       	sreq	r9
80006b0a:	f7 e9 10 09 	or	r9,r11,r9
80006b0e:	ee 09 18 00 	cp.b	r9,r7
80006b12:	c1 90       	breq	80006b44 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80006b14:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80006b16:	fc 09 18 00 	cp.b	r9,lr
80006b1a:	5f 0c       	sreq	r12
80006b1c:	ec 09 18 00 	cp.b	r9,r6
80006b20:	5f 0b       	sreq	r11
80006b22:	f9 eb 10 0b 	or	r11,r12,r11
80006b26:	ee 0b 18 00 	cp.b	r11,r7
80006b2a:	c1 41       	brne	80006b52 <fat_mount+0xce>
80006b2c:	e6 09 18 00 	cp.b	r9,r3
80006b30:	c1 10       	breq	80006b52 <fat_mount+0xce>
80006b32:	e4 09 18 00 	cp.b	r9,r2
80006b36:	c0 e0       	breq	80006b52 <fat_mount+0xce>
80006b38:	e2 09 18 00 	cp.b	r9,r1
80006b3c:	c0 b0       	breq	80006b52 <fat_mount+0xce>
80006b3e:	e0 09 18 00 	cp.b	r9,r0
80006b42:	c0 80       	breq	80006b52 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80006b44:	2f fa       	sub	r10,-1
80006b46:	5c 5a       	castu.b	r10
80006b48:	2f 08       	sub	r8,-16
80006b4a:	ec 0a 18 00 	cp.b	r10,r6
80006b4e:	cd 71       	brne	80006afc <fat_mount+0x78>
80006b50:	c2 08       	rjmp	80006b90 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80006b52:	ec 0a 18 00 	cp.b	r10,r6
80006b56:	c1 d0       	breq	80006b90 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80006b58:	fe f3 02 10 	ld.w	r3,pc[528]
80006b5c:	a5 6a       	lsl	r10,0x4
80006b5e:	f4 ca fe 42 	sub	r10,r10,-446
80006b62:	ea 0a 00 0a 	add	r10,r5,r10
80006b66:	f5 38 00 08 	ld.ub	r8,r10[8]
80006b6a:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80006b6c:	f5 38 00 09 	ld.ub	r8,r10[9]
80006b70:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80006b72:	f5 38 00 0a 	ld.ub	r8,r10[10]
80006b76:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80006b78:	f5 38 00 0b 	ld.ub	r8,r10[11]
80006b7c:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80006b7e:	4f 88       	lddpc	r8,80006d5c <fat_mount+0x2d8>
80006b80:	11 8c       	ld.ub	r12,r8[0x0]
80006b82:	f0 1f 00 7f 	mcall	80006d7c <fat_mount+0x2f8>
80006b86:	66 08       	ld.w	r8,r3[0x0]
80006b88:	f8 08 02 48 	mul	r8,r12,r8
80006b8c:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80006b8e:	c9 4b       	rjmp	80006ab6 <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80006b90:	4f 88       	lddpc	r8,80006d70 <fat_mount+0x2ec>
80006b92:	11 89       	ld.ub	r9,r8[0x0]
80006b94:	3e b8       	mov	r8,-21
80006b96:	f0 09 18 00 	cp.b	r9,r8
80006b9a:	c0 f1       	brne	80006bb8 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80006b9c:	4f 58       	lddpc	r8,80006d70 <fat_mount+0x2ec>
80006b9e:	11 a9       	ld.ub	r9,r8[0x2]
80006ba0:	39 08       	mov	r8,-112
80006ba2:	f0 09 18 00 	cp.b	r9,r8
80006ba6:	c0 91       	brne	80006bb8 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80006ba8:	4f 28       	lddpc	r8,80006d70 <fat_mount+0x2ec>
80006baa:	f1 38 00 15 	ld.ub	r8,r8[21]
80006bae:	e2 18 00 f0 	andl	r8,0xf0,COH
80006bb2:	e0 48 00 f0 	cp.w	r8,240
80006bb6:	c0 60       	breq	80006bc2 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80006bb8:	30 39       	mov	r9,3
80006bba:	4f 08       	lddpc	r8,80006d78 <fat_mount+0x2f4>
80006bbc:	b0 89       	st.b	r8[0x0],r9
80006bbe:	30 0c       	mov	r12,0
      return false;
80006bc0:	cc b8       	rjmp	80006d56 <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80006bc2:	30 49       	mov	r9,4
80006bc4:	4e d8       	lddpc	r8,80006d78 <fat_mount+0x2f4>
80006bc6:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80006bc8:	4e aa       	lddpc	r10,80006d70 <fat_mount+0x2ec>
80006bca:	f5 39 00 0c 	ld.ub	r9,r10[12]
80006bce:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80006bd0:	f5 38 00 0d 	ld.ub	r8,r10[13]
80006bd4:	b3 38       	mul	r8,r9
80006bd6:	5c 58       	castu.b	r8
80006bd8:	4e 1b       	lddpc	r11,80006d5c <fat_mount+0x2d8>
80006bda:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80006bdc:	30 0b       	mov	r11,0
80006bde:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80006be0:	fa cb ff fc 	sub	r11,sp,-4
80006be4:	fa c7 ff f9 	sub	r7,sp,-7
80006be8:	f5 3c 00 16 	ld.ub	r12,r10[22]
80006bec:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80006bee:	fa ce ff fa 	sub	lr,sp,-6
80006bf2:	f5 3a 00 17 	ld.ub	r10,r10[23]
80006bf6:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80006bf8:	40 1a       	lddsp	r10,sp[0x4]
80006bfa:	58 0a       	cp.w	r10,0
80006bfc:	c0 e1       	brne	80006c18 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80006bfe:	4d da       	lddpc	r10,80006d70 <fat_mount+0x2ec>
80006c00:	f5 3c 00 24 	ld.ub	r12,r10[36]
80006c04:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80006c06:	f5 3c 00 25 	ld.ub	r12,r10[37]
80006c0a:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80006c0c:	f5 3c 00 26 	ld.ub	r12,r10[38]
80006c10:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80006c12:	f5 3a 00 27 	ld.ub	r10,r10[39]
80006c16:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80006c18:	12 95       	mov	r5,r9
80006c1a:	40 1c       	lddsp	r12,sp[0x4]
80006c1c:	f2 0c 02 4c 	mul	r12,r9,r12
80006c20:	4c fa       	lddpc	r10,80006d5c <fat_mount+0x2d8>
80006c22:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80006c24:	4d 3a       	lddpc	r10,80006d70 <fat_mount+0x2ec>
80006c26:	f5 3a 00 13 	ld.ub	r10,r10[19]
80006c2a:	58 0a       	cp.w	r10,0
80006c2c:	c1 61       	brne	80006c58 <fat_mount+0x1d4>
80006c2e:	4d 16       	lddpc	r6,80006d70 <fat_mount+0x2ec>
80006c30:	ed 34 00 14 	ld.ub	r4,r6[20]
80006c34:	30 06       	mov	r6,0
80006c36:	ec 04 18 00 	cp.b	r4,r6
80006c3a:	c0 f1       	brne	80006c58 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80006c3c:	4c da       	lddpc	r10,80006d70 <fat_mount+0x2ec>
80006c3e:	f5 36 00 20 	ld.ub	r6,r10[32]
80006c42:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80006c44:	f5 37 00 21 	ld.ub	r7,r10[33]
80006c48:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80006c4a:	f5 3e 00 22 	ld.ub	lr,r10[34]
80006c4e:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80006c50:	f5 3a 00 23 	ld.ub	r10,r10[35]
80006c54:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80006c56:	c0 98       	rjmp	80006c68 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80006c58:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80006c5a:	4c 6a       	lddpc	r10,80006d70 <fat_mount+0x2ec>
80006c5c:	f5 3a 00 14 	ld.ub	r10,r10[20]
80006c60:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80006c62:	30 0a       	mov	r10,0
80006c64:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80006c66:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80006c68:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80006c6a:	4b da       	lddpc	r10,80006d5c <fat_mount+0x2d8>
80006c6c:	f8 0b 15 01 	lsl	r11,r12,0x1
80006c70:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80006c74:	fa c6 ff f6 	sub	r6,sp,-10
80006c78:	fa c7 ff f4 	sub	r7,sp,-12
80006c7c:	4b db       	lddpc	r11,80006d70 <fat_mount+0x2ec>
80006c7e:	f7 3e 00 11 	ld.ub	lr,r11[17]
80006c82:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80006c84:	f7 3e 00 12 	ld.ub	lr,r11[18]
80006c88:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80006c8a:	f2 03 15 04 	lsl	r3,r9,0x4
80006c8e:	9a de       	ld.uh	lr,sp[0xa]
80006c90:	e6 0e 00 0e 	add	lr,r3,lr
80006c94:	a5 7e       	lsl	lr,0x5
80006c96:	20 1e       	sub	lr,1
80006c98:	f2 03 15 09 	lsl	r3,r9,0x9
80006c9c:	fc 03 0c 02 	divs	r2,lr,r3
80006ca0:	e4 09 02 4e 	mul	lr,r2,r9
80006ca4:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80006ca8:	f7 33 00 0e 	ld.ub	r3,r11[14]
80006cac:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80006cae:	f7 37 00 0f 	ld.ub	r7,r11[15]
80006cb2:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80006cb4:	9a 57       	ld.sh	r7,sp[0xa]
80006cb6:	f7 3b 00 30 	ld.ub	r11,r11[48]
80006cba:	0e 96       	mov	r6,r7
80006cbc:	ee 0b 01 0b 	sub	r11,r7,r11
80006cc0:	b3 3b       	mul	r11,r9
80006cc2:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80006cc4:	ee 09 02 49 	mul	r9,r7,r9
80006cc8:	5c 79       	castu.h	r9
80006cca:	4a 8b       	lddpc	r11,80006d68 <fat_mount+0x2e4>
80006ccc:	76 0b       	ld.w	r11,r11[0x0]
80006cce:	f2 0b 00 0b 	add	r11,r9,r11
80006cd2:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80006cd4:	5c 7e       	castu.h	lr
80006cd6:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80006cda:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80006cdc:	58 08       	cp.w	r8,0
80006cde:	c3 b0       	breq	80006d54 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80006ce0:	a9 35       	mul	r5,r4
80006ce2:	ea 09 01 09 	sub	r9,r5,r9
80006ce6:	18 19       	sub	r9,r12
80006ce8:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80006cea:	30 1a       	mov	r10,1
80006cec:	f4 08 18 00 	cp.b	r8,r10
80006cf0:	c0 70       	breq	80006cfe <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80006cf2:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80006cf4:	a1 98       	lsr	r8,0x1
80006cf6:	f4 08 18 00 	cp.b	r8,r10
80006cfa:	cf c1       	brne	80006cf2 <fat_mount+0x26e>
80006cfc:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80006cfe:	40 18       	lddsp	r8,sp[0x4]
80006d00:	f0 ca ff fe 	sub	r10,r8,-2
80006d04:	49 69       	lddpc	r9,80006d5c <fat_mount+0x2d8>
80006d06:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80006d08:	e0 48 0f f4 	cp.w	r8,4084
80006d0c:	e0 8b 00 07 	brhi	80006d1a <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80006d10:	30 19       	mov	r9,1
80006d12:	49 58       	lddpc	r8,80006d64 <fat_mount+0x2e0>
80006d14:	b0 89       	st.b	r8[0x0],r9
80006d16:	30 1c       	mov	r12,1
80006d18:	c1 f8       	rjmp	80006d56 <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80006d1a:	e0 48 ff f4 	cp.w	r8,65524
80006d1e:	e0 8b 00 07 	brhi	80006d2c <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80006d22:	30 29       	mov	r9,2
80006d24:	49 08       	lddpc	r8,80006d64 <fat_mount+0x2e0>
80006d26:	b0 89       	st.b	r8[0x0],r9
80006d28:	30 1c       	mov	r12,1
80006d2a:	c1 68       	rjmp	80006d56 <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80006d2c:	30 39       	mov	r9,3
80006d2e:	48 e8       	lddpc	r8,80006d64 <fat_mount+0x2e0>
80006d30:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80006d32:	48 b8       	lddpc	r8,80006d5c <fat_mount+0x2d8>
80006d34:	2e 88       	sub	r8,-24
80006d36:	48 f9       	lddpc	r9,80006d70 <fat_mount+0x2ec>
80006d38:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80006d3c:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80006d3e:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80006d42:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80006d44:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80006d48:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80006d4a:	f3 39 00 2f 	ld.ub	r9,r9[47]
80006d4e:	b0 89       	st.b	r8[0x0],r9
80006d50:	30 1c       	mov	r12,1
80006d52:	c0 28       	rjmp	80006d56 <fat_mount+0x2d2>
80006d54:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80006d56:	2f dd       	sub	sp,-12
80006d58:	d8 32       	popm	r0-r7,pc
80006d5a:	00 00       	add	r0,r0
80006d5c:	00 00       	add	r0,r0
80006d5e:	13 f8       	ld.ub	r8,r9[0x7]
80006d60:	80 00       	ld.sh	r0,r0[0x0]
80006d62:	50 1c       	stdsp	sp[0x4],r12
80006d64:	00 00       	add	r0,r0
80006d66:	14 44       	or	r4,r10
80006d68:	00 00       	add	r0,r0
80006d6a:	11 b4       	ld.ub	r4,r8[0x3]
80006d6c:	80 00       	ld.sh	r0,r0[0x0]
80006d6e:	5e b8       	rethi	r8
80006d70:	00 00       	add	r0,r0
80006d72:	11 f8       	ld.ub	r8,r8[0x7]
80006d74:	80 00       	ld.sh	r0,r0[0x0]
80006d76:	56 20       	stdsp	sp[0x188],r0
80006d78:	00 00       	add	r0,r0
80006d7a:	14 48       	or	r8,r10
80006d7c:	80 00       	ld.sh	r0,r0[0x0]
80006d7e:	7b 4c       	ld.w	r12,sp[0x50]

80006d80 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80006d80:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80006d82:	f0 1f 00 0a 	mcall	80006da8 <file_close+0x28>
80006d86:	c1 00       	breq	80006da6 <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
80006d88:	48 98       	lddpc	r8,80006dac <file_close+0x2c>
80006d8a:	11 88       	ld.ub	r8,r8[0x0]
80006d8c:	e2 18 00 02 	andl	r8,0x2,COH
80006d90:	c0 80       	breq	80006da0 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80006d92:	f0 1f 00 08 	mcall	80006db0 <file_close+0x30>
80006d96:	c0 80       	breq	80006da6 <file_close+0x26>
            return;           // error
         fat_write_entry_file();
80006d98:	f0 1f 00 07 	mcall	80006db4 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80006d9c:	f0 1f 00 07 	mcall	80006db8 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80006da0:	30 09       	mov	r9,0
80006da2:	48 38       	lddpc	r8,80006dac <file_close+0x2c>
80006da4:	b0 89       	st.b	r8[0x0],r9
80006da6:	d8 02       	popm	pc
80006da8:	80 00       	ld.sh	r0,r0[0x0]
80006daa:	5f fc       	sral	r12
80006dac:	00 00       	add	r0,r0
80006dae:	11 b8       	ld.ub	r8,r8[0x3]
80006db0:	80 00       	ld.sh	r0,r0[0x0]
80006db2:	5c 50       	castu.b	r0
80006db4:	80 00       	ld.sh	r0,r0[0x0]
80006db6:	54 00       	stdsp	sp[0x100],r0
80006db8:	80 00       	ld.sh	r0,r0[0x0]
80006dba:	55 b4       	stdsp	sp[0x16c],r4

80006dbc <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006dbc:	d4 31       	pushm	r0-r7,lr
80006dbe:	20 1d       	sub	sp,4
80006dc0:	18 95       	mov	r5,r12
80006dc2:	16 96       	mov	r6,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
80006dc4:	f0 1f 00 4f 	mcall	80006f00 <file_write_buf+0x144>
80006dc8:	e0 80 00 98 	breq	80006ef8 <file_write_buf+0x13c>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80006dcc:	4c e8       	lddpc	r8,80006f04 <file_write_buf+0x148>
80006dce:	11 88       	ld.ub	r8,r8[0x0]
80006dd0:	e2 18 00 02 	andl	r8,0x2,COH
80006dd4:	c0 40       	breq	80006ddc <file_write_buf+0x20>
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
80006dd6:	58 06       	cp.w	r6,0
80006dd8:	c0 71       	brne	80006de6 <file_write_buf+0x2a>
80006dda:	c8 f8       	rjmp	80006ef8 <file_write_buf+0x13c>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_READ_ONLY;
80006ddc:	31 59       	mov	r9,21
80006dde:	4c b8       	lddpc	r8,80006f08 <file_write_buf+0x14c>
80006de0:	b0 89       	st.b	r8[0x0],r9
80006de2:	30 00       	mov	r0,0
      return false;
80006de4:	c8 b8       	rjmp	80006efa <file_write_buf+0x13e>
80006de6:	30 00       	mov	r0,0
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
80006de8:	4c 74       	lddpc	r4,80006f04 <file_write_buf+0x148>
      if( (0== u16_pos_in_sector)
80006dea:	e0 61 01 ff 	mov	r1,511
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80006dee:	4c 87       	lddpc	r7,80006f0c <file_write_buf+0x150>
   u16_nb_write = 0;

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
80006df0:	68 39       	ld.w	r9,r4[0xc]
80006df2:	e5 d9 c0 09 	bfextu	r2,r9,0x0,0x9
      if( (0== u16_pos_in_sector)
80006df6:	30 0b       	mov	r11,0
80006df8:	f6 02 19 00 	cp.h	r2,r11
80006dfc:	5f 08       	sreq	r8
80006dfe:	ec 01 19 00 	cp.h	r1,r6
80006e02:	f9 ba 03 01 	movlo	r10,1
80006e06:	f9 ba 02 00 	movhs	r10,0
80006e0a:	f1 ea 00 0a 	and	r10,r8,r10
80006e0e:	f6 0a 18 00 	cp.b	r10,r11
80006e12:	c3 10       	breq	80006e74 <file_write_buf+0xb8>
80006e14:	f5 d5 c0 02 	bfextu	r10,r5,0x0,0x2
80006e18:	c2 e1       	brne	80006e74 <file_write_buf+0xb8>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
80006e1a:	e5 d6 c1 27 	bfextu	r2,r6,0x9,0x7

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
80006e1e:	e7 d2 c0 10 	bfextu	r3,r2,0x0,0x10
80006e22:	06 9b       	mov	r11,r3
80006e24:	30 1c       	mov	r12,1
80006e26:	f0 1f 00 3b 	mcall	80006f10 <file_write_buf+0x154>
80006e2a:	c6 70       	breq	80006ef8 <file_write_buf+0x13c>
            return false;
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
80006e2c:	6e 18       	ld.w	r8,r7[0x4]
80006e2e:	10 33       	cp.w	r3,r8
80006e30:	c0 62       	brcc	80006e3c <file_write_buf+0x80>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
80006e32:	8f 13       	st.w	r7[0x4],r3
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80006e34:	6e 18       	ld.w	r8,r7[0x4]
80006e36:	58 08       	cp.w	r8,0
80006e38:	c0 51       	brne	80006e42 <file_write_buf+0x86>
80006e3a:	c1 98       	rjmp	80006e6c <file_write_buf+0xb0>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
80006e3c:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
80006e40:	cf ab       	rjmp	80006e34 <file_write_buf+0x78>
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
80006e42:	0a 9a       	mov	r10,r5
80006e44:	6e 0b       	ld.w	r11,r7[0x0]
80006e46:	4b 49       	lddpc	r9,80006f14 <file_write_buf+0x158>
80006e48:	13 8c       	ld.ub	r12,r9[0x0]
80006e4a:	f0 1f 00 34 	mcall	80006f18 <file_write_buf+0x15c>
80006e4e:	c0 50       	breq	80006e58 <file_write_buf+0x9c>
            {
               fs_g_status = FS_ERR_HW;
80006e50:	30 19       	mov	r9,1
80006e52:	4a e8       	lddpc	r8,80006f08 <file_write_buf+0x14c>
80006e54:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_write;
80006e56:	c5 28       	rjmp	80006efa <file_write_buf+0x13e>
            }
            fs_g_seg.u32_size_or_pos--;
80006e58:	6e 18       	ld.w	r8,r7[0x4]
80006e5a:	20 18       	sub	r8,1
80006e5c:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006e5e:	6e 09       	ld.w	r9,r7[0x0]
80006e60:	2f f9       	sub	r9,-1
80006e62:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006e64:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80006e68:	58 08       	cp.w	r8,0
80006e6a:	ce c1       	brne	80006e42 <file_write_buf+0x86>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
80006e6c:	e4 03 15 09 	lsl	r3,r2,0x9
80006e70:	5c 83       	casts.h	r3

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
80006e72:	c3 08       	rjmp	80006ed2 <file_write_buf+0x116>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80006e74:	68 2a       	ld.w	r10,r4[0x8]
80006e76:	14 39       	cp.w	r9,r10
80006e78:	5f 09       	sreq	r9
80006e7a:	12 68       	and	r8,r9
80006e7c:	30 0b       	mov	r11,0
80006e7e:	f6 08 18 00 	cp.b	r8,r11
80006e82:	c0 e0       	breq	80006e9e <file_write_buf+0xe2>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
80006e84:	30 1b       	mov	r11,1
80006e86:	16 9c       	mov	r12,r11
80006e88:	f0 1f 00 22 	mcall	80006f10 <file_write_buf+0x154>
80006e8c:	c3 60       	breq	80006ef8 <file_write_buf+0x13c>
               return false;
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80006e8e:	6e 09       	ld.w	r9,r7[0x0]
80006e90:	4a 38       	lddpc	r8,80006f1c <file_write_buf+0x160>
80006e92:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80006e94:	30 0c       	mov	r12,0
80006e96:	f0 1f 00 23 	mcall	80006f20 <file_write_buf+0x164>
80006e9a:	c0 71       	brne	80006ea8 <file_write_buf+0xec>
80006e9c:	c2 e8       	rjmp	80006ef8 <file_write_buf+0x13c>
               return false;
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
80006e9e:	30 1b       	mov	r11,1
80006ea0:	30 2c       	mov	r12,2
80006ea2:	f0 1f 00 1c 	mcall	80006f10 <file_write_buf+0x154>
80006ea6:	c2 90       	breq	80006ef8 <file_write_buf+0x13c>
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
80006ea8:	f0 1f 00 1f 	mcall	80006f24 <file_write_buf+0x168>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80006eac:	e0 63 02 00 	mov	r3,512
80006eb0:	04 13       	sub	r3,r2
80006eb2:	ec 03 19 00 	cp.h	r3,r6
80006eb6:	ec 03 17 20 	movhs	r3,r6
80006eba:	5c 83       	casts.h	r3
         if( u16_nb_write_tmp > u16_buf_size )
            u16_nb_write_tmp = u16_buf_size;

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
80006ebc:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80006ec0:	50 09       	stdsp	sp[0x0],r9
80006ec2:	12 9a       	mov	r10,r9
80006ec4:	0a 9b       	mov	r11,r5
80006ec6:	49 9c       	lddpc	r12,80006f28 <file_write_buf+0x16c>
80006ec8:	04 0c       	add	r12,r2
80006eca:	f0 1f 00 19 	mcall	80006f2c <file_write_buf+0x170>
         buffer += u16_nb_write_tmp;
80006ece:	40 08       	lddsp	r8,sp[0x0]
80006ed0:	10 05       	add	r5,r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
80006ed2:	f3 d3 c0 10 	bfextu	r9,r3,0x0,0x10
80006ed6:	68 38       	ld.w	r8,r4[0xc]
80006ed8:	f2 08 00 08 	add	r8,r9,r8
80006edc:	89 38       	st.w	r4[0xc],r8
      u16_nb_write                  += u16_nb_write_tmp;
80006ede:	e6 00 00 00 	add	r0,r3,r0
80006ee2:	5c 80       	casts.h	r0
      u16_buf_size                  -= u16_nb_write_tmp;
80006ee4:	06 16       	sub	r6,r3
80006ee6:	5c 86       	casts.h	r6
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
80006ee8:	68 29       	ld.w	r9,r4[0x8]
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80006eea:	12 38       	cp.w	r8,r9
80006eec:	e9 f8 ba 02 	st.whi	r4[0x8],r8
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
80006ef0:	58 06       	cp.w	r6,0
80006ef2:	fe 91 ff 7f 	brne	80006df0 <file_write_buf+0x34>
80006ef6:	c0 28       	rjmp	80006efa <file_write_buf+0x13e>
80006ef8:	30 00       	mov	r0,0
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
}
80006efa:	00 9c       	mov	r12,r0
80006efc:	2f fd       	sub	sp,-4
80006efe:	d8 32       	popm	r0-r7,pc
80006f00:	80 00       	ld.sh	r0,r0[0x0]
80006f02:	5f fc       	sral	r12
80006f04:	00 00       	add	r0,r0
80006f06:	11 b8       	ld.ub	r8,r8[0x3]
80006f08:	00 00       	add	r0,r0
80006f0a:	14 48       	or	r8,r10
80006f0c:	00 00       	add	r0,r0
80006f0e:	14 a0       	st.w	r10++,r0
80006f10:	80 00       	ld.sh	r0,r0[0x0]
80006f12:	5d b0       	*unknown*
80006f14:	00 00       	add	r0,r0
80006f16:	13 f8       	ld.ub	r8,r9[0x7]
80006f18:	80 00       	ld.sh	r0,r0[0x0]
80006f1a:	7b 84       	ld.w	r4,sp[0x60]
80006f1c:	00 00       	add	r0,r0
80006f1e:	11 b4       	ld.ub	r4,r8[0x3]
80006f20:	80 00       	ld.sh	r0,r0[0x0]
80006f22:	56 20       	stdsp	sp[0x188],r0
80006f24:	80 00       	ld.sh	r0,r0[0x0]
80006f26:	53 f0       	stdsp	sp[0xfc],r0
80006f28:	00 00       	add	r0,r0
80006f2a:	11 f8       	ld.ub	r8,r8[0x7]
80006f2c:	80 00       	ld.sh	r0,r0[0x0]
80006f2e:	9f 52       	st.w	pc[0x14],r2

80006f30 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
80006f30:	eb cd 40 c0 	pushm	r6-r7,lr
80006f34:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
80006f36:	f0 1f 00 20 	mcall	80006fb4 <file_open+0x84>
80006f3a:	c3 a0       	breq	80006fae <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
80006f3c:	f0 1f 00 1f 	mcall	80006fb8 <file_open+0x88>
80006f40:	c3 70       	breq	80006fae <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
80006f42:	0e 96       	mov	r6,r7
80006f44:	0e 98       	mov	r8,r7
80006f46:	e2 18 00 02 	andl	r8,0x2,COH
80006f4a:	c1 90       	breq	80006f7c <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80006f4c:	30 1c       	mov	r12,1
80006f4e:	f0 1f 00 1c 	mcall	80006fbc <file_open+0x8c>
80006f52:	c2 e0       	breq	80006fae <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80006f54:	49 b8       	lddpc	r8,80006fc0 <file_open+0x90>
80006f56:	11 a8       	ld.ub	r8,r8[0x2]
80006f58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006f5c:	c0 60       	breq	80006f68 <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80006f5e:	31 59       	mov	r9,21
80006f60:	49 98       	lddpc	r8,80006fc4 <file_open+0x94>
80006f62:	b0 89       	st.b	r8[0x0],r9
80006f64:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
80006f68:	49 88       	lddpc	r8,80006fc8 <file_open+0x98>
80006f6a:	11 8c       	ld.ub	r12,r8[0x0]
80006f6c:	f0 1f 00 18 	mcall	80006fcc <file_open+0x9c>
80006f70:	c0 a0       	breq	80006f84 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006f72:	31 49       	mov	r9,20
80006f74:	49 48       	lddpc	r8,80006fc4 <file_open+0x94>
80006f76:	b0 89       	st.b	r8[0x0],r9
80006f78:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80006f7c:	30 0c       	mov	r12,0
80006f7e:	f0 1f 00 10 	mcall	80006fbc <file_open+0x8c>
80006f82:	c1 60       	breq	80006fae <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006f84:	0c 98       	mov	r8,r6
80006f86:	e2 18 00 04 	andl	r8,0x4,COH
80006f8a:	c0 40       	breq	80006f92 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80006f8c:	30 09       	mov	r9,0
80006f8e:	48 d8       	lddpc	r8,80006fc0 <file_open+0x90>
80006f90:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80006f92:	e2 16 00 08 	andl	r6,0x8,COH
80006f96:	c0 50       	breq	80006fa0 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
80006f98:	30 09       	mov	r9,0
80006f9a:	48 a8       	lddpc	r8,80006fc0 <file_open+0x90>
80006f9c:	91 39       	st.w	r8[0xc],r9
80006f9e:	c0 48       	rjmp	80006fa6 <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80006fa0:	48 88       	lddpc	r8,80006fc0 <file_open+0x90>
80006fa2:	70 29       	ld.w	r9,r8[0x8]
80006fa4:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
80006fa6:	48 78       	lddpc	r8,80006fc0 <file_open+0x90>
80006fa8:	b0 87       	st.b	r8[0x0],r7
80006faa:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80006fae:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006fb2:	00 00       	add	r0,r0
80006fb4:	80 00       	ld.sh	r0,r0[0x0]
80006fb6:	60 20       	ld.w	r0,r0[0x8]
80006fb8:	80 00       	ld.sh	r0,r0[0x0]
80006fba:	4d 3c       	lddpc	r12,80007104 <nav_filelist_set+0x24>
80006fbc:	80 00       	ld.sh	r0,r0[0x0]
80006fbe:	54 50       	stdsp	sp[0x114],r0
80006fc0:	00 00       	add	r0,r0
80006fc2:	11 b8       	ld.ub	r8,r8[0x3]
80006fc4:	00 00       	add	r0,r0
80006fc6:	14 48       	or	r8,r10
80006fc8:	00 00       	add	r0,r0
80006fca:	13 f8       	ld.ub	r8,r9[0x7]
80006fcc:	80 00       	ld.sh	r0,r0[0x0]
80006fce:	7b 54       	ld.w	r4,sp[0x54]

80006fd0 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80006fd0:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80006fd2:	48 69       	lddpc	r9,80006fe8 <nav_getindex+0x18>
80006fd4:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
80006fd6:	48 6a       	lddpc	r10,80006fec <nav_getindex+0x1c>
80006fd8:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
80006fda:	13 89       	ld.ub	r9,r9[0x0]
80006fdc:	b8 89       	st.b	r12[0x0],r9
80006fde:	99 1b       	st.w	r12[0x4],r11
80006fe0:	b8 4a       	st.h	r12[0x8],r10
}
80006fe2:	2f dd       	sub	sp,-12
80006fe4:	5e fc       	retal	r12
80006fe6:	00 00       	add	r0,r0
80006fe8:	00 00       	add	r0,r0
80006fea:	13 f8       	ld.ub	r8,r9[0x7]
80006fec:	00 00       	add	r0,r0
80006fee:	14 44       	or	r4,r10

80006ff0 <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
80006ff0:	d4 01       	pushm	lr
   return fat_entry_is_dir();
80006ff2:	f0 1f 00 02 	mcall	80006ff8 <nav_file_isdir+0x8>
}
80006ff6:	d8 02       	popm	pc
80006ff8:	80 00       	ld.sh	r0,r0[0x0]
80006ffa:	50 04       	stdsp	sp[0x0],r4

80006ffc <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80006ffc:	d4 31       	pushm	r0-r7,lr
80006ffe:	20 1d       	sub	sp,4
80007000:	18 95       	mov	r5,r12
80007002:	16 96       	mov	r6,r11
80007004:	14 97       	mov	r7,r10
80007006:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80007008:	f0 1f 00 2f 	mcall	800070c4 <nav_file_name+0xc8>
8000700c:	c5 80       	breq	800070bc <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000700e:	58 07       	cp.w	r7,0
80007010:	c0 50       	breq	8000701a <nav_file_name+0x1e>
80007012:	58 06       	cp.w	r6,0
80007014:	c0 31       	brne	8000701a <nav_file_name+0x1e>
80007016:	30 1c       	mov	r12,1
80007018:	c5 38       	rjmp	800070be <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000701a:	4a c8       	lddpc	r8,800070c8 <nav_file_name+0xcc>
8000701c:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000701e:	58 04       	cp.w	r4,0
80007020:	c0 31       	brne	80007026 <nav_file_name+0x2a>
80007022:	30 10       	mov	r0,1
80007024:	c0 68       	rjmp	80007030 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80007026:	08 99       	mov	r9,r4
80007028:	20 19       	sub	r9,1
8000702a:	4a 88       	lddpc	r8,800070c8 <nav_file_name+0xcc>
8000702c:	b0 19       	st.h	r8[0x2],r9
8000702e:	30 00       	mov	r0,0
80007030:	30 09       	mov	r9,0
80007032:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80007034:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80007036:	4a 52       	lddpc	r2,800070c8 <nav_file_name+0xcc>
80007038:	c0 28       	rjmp	8000703c <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000703a:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
8000703c:	f0 1f 00 24 	mcall	800070cc <nav_file_name+0xd0>
80007040:	c3 e0       	breq	800070bc <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
80007042:	58 00       	cp.w	r0,0
80007044:	c0 70       	breq	80007052 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80007046:	0e 9a       	mov	r10,r7
80007048:	0c 9b       	mov	r11,r6
8000704a:	0a 9c       	mov	r12,r5
8000704c:	f0 1f 00 21 	mcall	800070d0 <nav_file_name+0xd4>
80007050:	c3 78       	rjmp	800070be <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80007052:	06 99       	mov	r9,r3
80007054:	0e 9a       	mov	r10,r7
80007056:	0c 9b       	mov	r11,r6
80007058:	0a 9c       	mov	r12,r5
8000705a:	f0 1f 00 1f 	mcall	800070d4 <nav_file_name+0xd8>
8000705e:	c1 20       	breq	80007082 <nav_file_name+0x86>
      {
         if( g_b_string_length )
80007060:	49 e8       	lddpc	r8,800070d8 <nav_file_name+0xdc>
80007062:	11 89       	ld.ub	r9,r8[0x0]
80007064:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80007066:	f0 09 18 00 	cp.b	r9,r8
8000706a:	eb f8 12 00 	ld.shne	r8,r5[0x0]
8000706e:	fb f9 10 00 	ld.wne	r9,sp[0x0]
80007072:	f1 d9 e1 08 	addne	r8,r8,r9
80007076:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000707a:	49 48       	lddpc	r8,800070c8 <nav_file_name+0xcc>
8000707c:	b0 14       	st.h	r8[0x2],r4
8000707e:	30 1c       	mov	r12,1
         return true;
80007080:	c1 f8       	rjmp	800070be <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80007082:	49 79       	lddpc	r9,800070dc <nav_file_name+0xe0>
80007084:	13 88       	ld.ub	r8,r9[0x0]
80007086:	e2 08 18 00 	cp.b	r8,r1
8000708a:	c0 70       	breq	80007098 <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000708c:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000708e:	30 b9       	mov	r9,11
80007090:	f2 08 18 00 	cp.b	r8,r9
80007094:	c1 41       	brne	800070bc <nav_file_name+0xc0>
80007096:	cd 2b       	rjmp	8000703a <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
80007098:	49 09       	lddpc	r9,800070d8 <nav_file_name+0xdc>
8000709a:	13 88       	ld.ub	r8,r9[0x0]
8000709c:	30 09       	mov	r9,0
8000709e:	f2 08 18 00 	cp.b	r8,r9
800070a2:	c0 60       	breq	800070ae <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800070a4:	40 08       	lddsp	r8,sp[0x0]
800070a6:	2f 38       	sub	r8,-13
800070a8:	5c 88       	casts.h	r8
800070aa:	50 08       	stdsp	sp[0x0],r8
800070ac:	c0 48       	rjmp	800070b4 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
800070ae:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800070b0:	20 d6       	sub	r6,13
800070b2:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800070b4:	84 18       	ld.sh	r8,r2[0x2]
800070b6:	20 18       	sub	r8,1
800070b8:	a4 18       	st.h	r2[0x2],r8
800070ba:	cc 1b       	rjmp	8000703c <nav_file_name+0x40>
800070bc:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
800070be:	2f fd       	sub	sp,-4
800070c0:	d8 32       	popm	r0-r7,pc
800070c2:	00 00       	add	r0,r0
800070c4:	80 00       	ld.sh	r0,r0[0x0]
800070c6:	5f e4       	srqs	r4
800070c8:	00 00       	add	r0,r0
800070ca:	14 44       	or	r4,r10
800070cc:	80 00       	ld.sh	r0,r0[0x0]
800070ce:	5c 50       	castu.b	r0
800070d0:	80 00       	ld.sh	r0,r0[0x0]
800070d2:	52 2c       	stdsp	sp[0x88],r12
800070d4:	80 00       	ld.sh	r0,r0[0x0]
800070d6:	50 98       	stdsp	sp[0x24],r8
800070d8:	00 00       	add	r0,r0
800070da:	14 49       	or	r9,r10
800070dc:	00 00       	add	r0,r0
800070de:	14 48       	or	r8,r10

800070e0 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
800070e0:	d4 31       	pushm	r0-r7,lr
800070e2:	20 4d       	sub	sp,16
800070e4:	50 0c       	stdsp	sp[0x0],r12
800070e6:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
800070e8:	f0 1f 00 51 	mcall	8000722c <nav_filelist_set+0x14c>
800070ec:	e0 80 00 9e 	breq	80007228 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
800070f0:	4d 08       	lddpc	r8,80007230 <nav_filelist_set+0x150>
800070f2:	90 18       	ld.sh	r8,r8[0x2]
800070f4:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
800070f6:	4d 08       	lddpc	r8,80007234 <nav_filelist_set+0x154>
800070f8:	f1 0a 00 24 	ld.sh	r10,r8[36]
800070fc:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800070fe:	f1 38 00 2c 	ld.ub	r8,r8[44]
80007102:	50 38       	stdsp	sp[0xc],r8
80007104:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80007106:	4c b7       	lddpc	r7,80007230 <nav_filelist_set+0x150>
80007108:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000710a:	4c b6       	lddpc	r6,80007234 <nav_filelist_set+0x154>
8000710c:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000710e:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80007110:	4c a5       	lddpc	r5,80007238 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80007112:	58 02       	cp.w	r2,0
80007114:	c0 31       	brne	8000711a <nav_filelist_set+0x3a>
80007116:	58 03       	cp.w	r3,0
80007118:	c0 c0       	breq	80007130 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000711a:	8e 18       	ld.sh	r8,r7[0x2]
8000711c:	e2 08 19 00 	cp.h	r8,r1
80007120:	c0 51       	brne	8000712a <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80007122:	30 89       	mov	r9,8
80007124:	4c 58       	lddpc	r8,80007238 <nav_filelist_set+0x158>
80007126:	b0 89       	st.b	r8[0x0],r9
            break;
80007128:	c7 38       	rjmp	8000720e <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000712a:	2f f8       	sub	r8,-1
8000712c:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000712e:	c1 d8       	rjmp	80007168 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80007130:	8e 18       	ld.sh	r8,r7[0x2]
80007132:	e0 08 19 00 	cp.h	r8,r0
80007136:	c0 51       	brne	80007140 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80007138:	30 99       	mov	r9,9
8000713a:	4c 08       	lddpc	r8,80007238 <nav_filelist_set+0x158>
8000713c:	b0 89       	st.b	r8[0x0],r9
            break;
8000713e:	c6 88       	rjmp	8000720e <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80007140:	58 08       	cp.w	r8,0
80007142:	c1 11       	brne	80007164 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80007144:	ed 38 00 2c 	ld.ub	r8,r6[44]
80007148:	e8 08 18 00 	cp.b	r8,r4
8000714c:	c0 80       	breq	8000715c <nav_filelist_set+0x7c>
8000714e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80007152:	e8 08 18 00 	cp.b	r8,r4
80007156:	c0 31       	brne	8000715c <nav_filelist_set+0x7c>
80007158:	30 13       	mov	r3,1
8000715a:	c0 78       	rjmp	80007168 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000715c:	30 99       	mov	r9,9
8000715e:	4b 78       	lddpc	r8,80007238 <nav_filelist_set+0x158>
80007160:	b0 89       	st.b	r8[0x0],r9
               break;
80007162:	c5 68       	rjmp	8000720e <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80007164:	20 18       	sub	r8,1
80007166:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
80007168:	f0 1f 00 35 	mcall	8000723c <nav_filelist_set+0x15c>
8000716c:	c0 71       	brne	8000717a <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000716e:	0b 89       	ld.ub	r9,r5[0x0]
80007170:	31 a8       	mov	r8,26
80007172:	f0 09 18 00 	cp.b	r9,r8
80007176:	c3 20       	breq	800071da <nav_filelist_set+0xfa>
80007178:	c4 b8       	rjmp	8000720e <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000717a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000717e:	e8 08 18 00 	cp.b	r8,r4
80007182:	5f 1c       	srne	r12
80007184:	f0 1f 00 2f 	mcall	80007240 <nav_filelist_set+0x160>
80007188:	c1 c0       	breq	800071c0 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000718a:	58 03       	cp.w	r3,0
8000718c:	cc 31       	brne	80007112 <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
8000718e:	58 02       	cp.w	r2,0
80007190:	ed f8 12 12 	ld.shne	r8,r6[0x24]
80007194:	f7 b8 01 ff 	subne	r8,-1
80007198:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
8000719c:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
800071a0:	f7 b8 00 01 	subeq	r8,1
800071a4:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
800071a8:	40 09       	lddsp	r9,sp[0x0]
800071aa:	58 09       	cp.w	r9,0
800071ac:	c0 51       	brne	800071b6 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
800071ae:	f0 1f 00 26 	mcall	80007244 <nav_filelist_set+0x164>
800071b2:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
800071b4:	c3 a8       	rjmp	80007228 <nav_filelist_set+0x148>
           }
           u16_nb--;
800071b6:	40 08       	lddsp	r8,sp[0x0]
800071b8:	20 18       	sub	r8,1
800071ba:	5c 88       	casts.h	r8
800071bc:	50 08       	stdsp	sp[0x0],r8
           continue;
800071be:	ca ab       	rjmp	80007112 <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800071c0:	0b 88       	ld.ub	r8,r5[0x0]
800071c2:	30 a9       	mov	r9,10
800071c4:	f2 08 18 00 	cp.b	r8,r9
800071c8:	5f 09       	sreq	r9
800071ca:	31 aa       	mov	r10,26
800071cc:	f4 08 18 00 	cp.b	r8,r10
800071d0:	5f 08       	sreq	r8
800071d2:	10 49       	or	r9,r8
800071d4:	e8 09 18 00 	cp.b	r9,r4
800071d8:	c9 d0       	breq	80007112 <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
800071da:	58 03       	cp.w	r3,0
800071dc:	c0 50       	breq	800071e6 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
800071de:	ed 64 00 2c 	st.b	r6[44],r4
800071e2:	30 03       	mov	r3,0
            continue;
800071e4:	c9 7b       	rjmp	80007112 <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
800071e6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800071ea:	30 1a       	mov	r10,1
800071ec:	f4 08 18 00 	cp.b	r8,r10
800071f0:	c0 60       	breq	800071fc <nav_filelist_set+0x11c>
800071f2:	ed 38 00 2d 	ld.ub	r8,r6[45]
800071f6:	e8 08 18 00 	cp.b	r8,r4
800071fa:	c0 50       	breq	80007204 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800071fc:	30 99       	mov	r9,9
800071fe:	48 f8       	lddpc	r8,80007238 <nav_filelist_set+0x158>
80007200:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
80007202:	c0 68       	rjmp	8000720e <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80007204:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80007206:	30 19       	mov	r9,1
80007208:	ed 69 00 2c 	st.b	r6[44],r9
8000720c:	c8 3b       	rjmp	80007112 <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000720e:	48 a8       	lddpc	r8,80007234 <nav_filelist_set+0x154>
80007210:	40 3a       	lddsp	r10,sp[0xc]
80007212:	58 0a       	cp.w	r10,0
80007214:	5f 19       	srne	r9
80007216:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000721a:	48 69       	lddpc	r9,80007230 <nav_filelist_set+0x150>
8000721c:	40 2a       	lddsp	r10,sp[0x8]
8000721e:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80007220:	40 19       	lddsp	r9,sp[0x4]
80007222:	f1 59 00 24 	st.h	r8[36],r9
80007226:	30 0c       	mov	r12,0
   return false;
}
80007228:	2f cd       	sub	sp,-16
8000722a:	d8 32       	popm	r0-r7,pc
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	60 44       	ld.w	r4,r0[0x10]
80007230:	00 00       	add	r0,r0
80007232:	14 44       	or	r4,r10
80007234:	00 00       	add	r0,r0
80007236:	13 f8       	ld.ub	r8,r9[0x7]
80007238:	00 00       	add	r0,r0
8000723a:	14 48       	or	r8,r10
8000723c:	80 00       	ld.sh	r0,r0[0x0]
8000723e:	5c 50       	castu.b	r0
80007240:	80 00       	ld.sh	r0,r0[0x0]
80007242:	53 7c       	stdsp	sp[0xdc],r12
80007244:	80 00       	ld.sh	r0,r0[0x0]
80007246:	53 34       	stdsp	sp[0xcc],r4

80007248 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80007248:	d4 21       	pushm	r4-r7,lr
8000724a:	18 95       	mov	r5,r12
8000724c:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000724e:	30 16       	mov	r6,1
80007250:	30 07       	mov	r7,0
80007252:	0c 9b       	mov	r11,r6
80007254:	0e 9c       	mov	r12,r7
80007256:	f0 1f 00 07 	mcall	80007270 <nav_filelist_findname+0x28>
8000725a:	c0 90       	breq	8000726c <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
8000725c:	08 99       	mov	r9,r4
8000725e:	0e 9a       	mov	r10,r7
80007260:	0e 9b       	mov	r11,r7
80007262:	0a 9c       	mov	r12,r5
80007264:	f0 1f 00 04 	mcall	80007274 <nav_filelist_findname+0x2c>
80007268:	cf 50       	breq	80007252 <nav_filelist_findname+0xa>
8000726a:	30 1c       	mov	r12,1
         return true;
   }
}
8000726c:	d8 22       	popm	r4-r7,pc
8000726e:	00 00       	add	r0,r0
80007270:	80 00       	ld.sh	r0,r0[0x0]
80007272:	70 e0       	ld.w	r0,r8[0x38]
80007274:	80 00       	ld.sh	r0,r0[0x0]
80007276:	6f fc       	ld.w	r12,r7[0x7c]

80007278 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
80007278:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
8000727a:	f0 1f 00 04 	mcall	80007288 <nav_filelist_reset+0x10>
8000727e:	c0 40       	breq	80007286 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80007280:	f0 1f 00 03 	mcall	8000728c <nav_filelist_reset+0x14>
80007284:	30 1c       	mov	r12,1
   return true;
}
80007286:	d8 02       	popm	pc
80007288:	80 00       	ld.sh	r0,r0[0x0]
8000728a:	60 44       	ld.w	r4,r0[0x10]
8000728c:	80 00       	ld.sh	r0,r0[0x0]
8000728e:	50 1c       	stdsp	sp[0x4],r12

80007290 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80007290:	eb cd 40 80 	pushm	r7,lr
80007294:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
80007296:	f0 1f 00 13 	mcall	800072e0 <nav_file_create+0x50>
8000729a:	c2 10       	breq	800072dc <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
8000729c:	30 0b       	mov	r11,0
8000729e:	0e 9c       	mov	r12,r7
800072a0:	f0 1f 00 11 	mcall	800072e4 <nav_file_create+0x54>
800072a4:	c0 60       	breq	800072b0 <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800072a6:	32 a9       	mov	r9,42
800072a8:	49 08       	lddpc	r8,800072e8 <nav_file_create+0x58>
800072aa:	b0 89       	st.b	r8[0x0],r9
800072ac:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
800072b0:	0e 9c       	mov	r12,r7
800072b2:	f0 1f 00 0f 	mcall	800072ec <nav_file_create+0x5c>
800072b6:	c1 30       	breq	800072dc <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
800072b8:	48 e8       	lddpc	r8,800072f0 <nav_file_create+0x60>
800072ba:	30 09       	mov	r9,0
800072bc:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
800072be:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
800072c0:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
800072c2:	48 d8       	lddpc	r8,800072f4 <nav_file_create+0x64>
800072c4:	f1 09 00 24 	ld.sh	r9,r8[36]
800072c8:	2f f9       	sub	r9,-1
800072ca:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
800072ce:	30 19       	mov	r9,1
800072d0:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
800072d4:	f0 1f 00 09 	mcall	800072f8 <nav_file_create+0x68>
800072d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800072dc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800072e0:	80 00       	ld.sh	r0,r0[0x0]
800072e2:	72 78       	ld.w	r8,r9[0x1c]
800072e4:	80 00       	ld.sh	r0,r0[0x0]
800072e6:	72 48       	ld.w	r8,r9[0x10]
800072e8:	00 00       	add	r0,r0
800072ea:	14 48       	or	r8,r10
800072ec:	80 00       	ld.sh	r0,r0[0x0]
800072ee:	69 dc       	ld.w	r12,r4[0x74]
800072f0:	00 00       	add	r0,r0
800072f2:	11 b8       	ld.ub	r8,r8[0x3]
800072f4:	00 00       	add	r0,r0
800072f6:	13 f8       	ld.ub	r8,r9[0x7]
800072f8:	80 00       	ld.sh	r0,r0[0x0]
800072fa:	55 b4       	stdsp	sp[0x16c],r4

800072fc <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
800072fc:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800072fe:	f0 1f 00 1f 	mcall	80007378 <nav_dir_gotoparent+0x7c>
80007302:	c3 80       	breq	80007372 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
80007304:	49 e8       	lddpc	r8,8000737c <nav_dir_gotoparent+0x80>
80007306:	70 88       	ld.w	r8,r8[0x20]
80007308:	58 08       	cp.w	r8,0
8000730a:	c0 51       	brne	80007314 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000730c:	31 99       	mov	r9,25
8000730e:	49 d8       	lddpc	r8,80007380 <nav_dir_gotoparent+0x84>
80007310:	b0 89       	st.b	r8[0x0],r9
80007312:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
80007314:	30 19       	mov	r9,1
80007316:	49 c8       	lddpc	r8,80007384 <nav_dir_gotoparent+0x88>
80007318:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
8000731a:	f0 1f 00 1c 	mcall	80007388 <nav_dir_gotoparent+0x8c>
8000731e:	c2 a0       	breq	80007372 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
80007320:	f0 1f 00 1b 	mcall	8000738c <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
80007324:	49 68       	lddpc	r8,8000737c <nav_dir_gotoparent+0x80>
80007326:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80007328:	49 a9       	lddpc	r9,80007390 <nav_dir_gotoparent+0x94>
8000732a:	72 19       	ld.w	r9,r9[0x4]
8000732c:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000732e:	f0 1f 00 1a 	mcall	80007394 <nav_dir_gotoparent+0x98>
80007332:	c2 00       	breq	80007372 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80007334:	49 28       	lddpc	r8,8000737c <nav_dir_gotoparent+0x80>
80007336:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000733a:	30 08       	mov	r8,0
8000733c:	f0 09 18 00 	cp.b	r9,r8
80007340:	c0 d0       	breq	8000735a <nav_dir_gotoparent+0x5e>
80007342:	48 f8       	lddpc	r8,8000737c <nav_dir_gotoparent+0x80>
80007344:	f1 39 00 2c 	ld.ub	r9,r8[44]
80007348:	30 08       	mov	r8,0
8000734a:	f0 09 18 00 	cp.b	r9,r8
8000734e:	c0 60       	breq	8000735a <nav_dir_gotoparent+0x5e>
80007350:	c1 28       	rjmp	80007374 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80007352:	6c 18       	ld.w	r8,r6[0x4]
80007354:	0e 38       	cp.w	r8,r7
80007356:	c0 51       	brne	80007360 <nav_dir_gotoparent+0x64>
80007358:	c0 e8       	rjmp	80007374 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000735a:	30 15       	mov	r5,1
8000735c:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000735e:	48 d6       	lddpc	r6,80007390 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80007360:	0a 9b       	mov	r11,r5
80007362:	08 9c       	mov	r12,r4
80007364:	f0 1f 00 0d 	mcall	80007398 <nav_dir_gotoparent+0x9c>
80007368:	cf 51       	brne	80007352 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000736a:	30 89       	mov	r9,8
8000736c:	48 58       	lddpc	r8,80007380 <nav_dir_gotoparent+0x84>
8000736e:	b0 89       	st.b	r8[0x0],r9
   return false;
80007370:	d8 22       	popm	r4-r7,pc
80007372:	d8 2a       	popm	r4-r7,pc,r12=0
80007374:	da 2a       	popm	r4-r7,pc,r12=1
80007376:	00 00       	add	r0,r0
80007378:	80 00       	ld.sh	r0,r0[0x0]
8000737a:	60 44       	ld.w	r4,r0[0x10]
8000737c:	00 00       	add	r0,r0
8000737e:	13 f8       	ld.ub	r8,r9[0x7]
80007380:	00 00       	add	r0,r0
80007382:	14 48       	or	r8,r10
80007384:	00 00       	add	r0,r0
80007386:	14 44       	or	r4,r10
80007388:	80 00       	ld.sh	r0,r0[0x0]
8000738a:	5c 50       	castu.b	r0
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	53 34       	stdsp	sp[0xcc],r4
80007390:	00 00       	add	r0,r0
80007392:	11 b8       	ld.ub	r8,r8[0x3]
80007394:	80 00       	ld.sh	r0,r0[0x0]
80007396:	72 78       	ld.w	r8,r9[0x1c]
80007398:	80 00       	ld.sh	r0,r0[0x0]
8000739a:	70 e0       	ld.w	r0,r8[0x38]

8000739c <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
8000739c:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
8000739e:	f0 1f 00 0a 	mcall	800073c4 <nav_dir_cd+0x28>
800073a2:	c0 f0       	breq	800073c0 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
800073a4:	f0 1f 00 09 	mcall	800073c8 <nav_dir_cd+0x2c>
800073a8:	c0 c0       	breq	800073c0 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
800073aa:	48 98       	lddpc	r8,800073cc <nav_dir_cd+0x30>
800073ac:	48 99       	lddpc	r9,800073d0 <nav_dir_cd+0x34>
800073ae:	92 19       	ld.sh	r9,r9[0x2]
800073b0:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800073b4:	48 89       	lddpc	r9,800073d4 <nav_dir_cd+0x38>
800073b6:	72 19       	ld.w	r9,r9[0x4]
800073b8:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
800073ba:	f0 1f 00 08 	mcall	800073d8 <nav_dir_cd+0x3c>
800073be:	d8 02       	popm	pc
800073c0:	d8 0a       	popm	pc,r12=0
800073c2:	00 00       	add	r0,r0
800073c4:	80 00       	ld.sh	r0,r0[0x0]
800073c6:	60 20       	ld.w	r0,r0[0x8]
800073c8:	80 00       	ld.sh	r0,r0[0x0]
800073ca:	50 04       	stdsp	sp[0x0],r4
800073cc:	00 00       	add	r0,r0
800073ce:	13 f8       	ld.ub	r8,r9[0x7]
800073d0:	00 00       	add	r0,r0
800073d2:	14 44       	or	r4,r10
800073d4:	00 00       	add	r0,r0
800073d6:	11 b8       	ld.ub	r8,r8[0x3]
800073d8:	80 00       	ld.sh	r0,r0[0x0]
800073da:	72 78       	ld.w	r8,r9[0x1c]

800073dc <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
800073dc:	eb cd 40 f8 	pushm	r3-r7,lr
800073e0:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
800073e2:	f0 1f 00 20 	mcall	80007460 <nav_file_del+0x84>
800073e6:	c1 c1       	brne	8000741e <nav_file_del+0x42>
800073e8:	c3 a8       	rjmp	8000745c <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800073ea:	0c 9b       	mov	r11,r6
800073ec:	0a 9c       	mov	r12,r5
800073ee:	f0 1f 00 1e 	mcall	80007464 <nav_file_del+0x88>
800073f2:	c0 80       	breq	80007402 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
800073f4:	58 04       	cp.w	r4,0
800073f6:	c1 90       	breq	80007428 <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
800073f8:	31 d9       	mov	r9,29
800073fa:	49 c8       	lddpc	r8,80007468 <nav_file_del+0x8c>
800073fc:	b0 89       	st.b	r8[0x0],r9
800073fe:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
80007402:	f0 1f 00 1b 	mcall	8000746c <nav_file_del+0x90>
80007406:	c2 b0       	breq	8000745c <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
80007408:	0c 9c       	mov	r12,r6
8000740a:	f0 1f 00 1a 	mcall	80007470 <nav_file_del+0x94>
8000740e:	c2 70       	breq	8000745c <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
80007410:	58 07       	cp.w	r7,0
80007412:	c0 31       	brne	80007418 <nav_file_del+0x3c>
80007414:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
80007418:	20 17       	sub	r7,1
8000741a:	5c 57       	castu.b	r7

      } // end of second while (1)
8000741c:	ce 7b       	rjmp	800073ea <nav_file_del+0xe>
8000741e:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
80007422:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
80007424:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80007426:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
80007428:	f0 1f 00 13 	mcall	80007474 <nav_file_del+0x98>
8000742c:	c0 70       	breq	8000743a <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
8000742e:	f0 1f 00 13 	mcall	80007478 <nav_file_del+0x9c>
80007432:	c1 50       	breq	8000745c <nav_file_del+0x80>
            return false;
         u8_folder_level++;
80007434:	2f f7       	sub	r7,-1
80007436:	5c 57       	castu.b	r7
80007438:	cd 9b       	rjmp	800073ea <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
8000743a:	0c 9c       	mov	r12,r6
8000743c:	f0 1f 00 10 	mcall	8000747c <nav_file_del+0xa0>
80007440:	c0 e0       	breq	8000745c <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
80007442:	0c 9c       	mov	r12,r6
80007444:	f0 1f 00 0b 	mcall	80007470 <nav_file_del+0x94>
80007448:	c0 a0       	breq	8000745c <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
8000744a:	e6 07 18 00 	cp.b	r7,r3
8000744e:	cc e1       	brne	800073ea <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80007450:	f0 1f 00 0c 	mcall	80007480 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80007454:	f0 1f 00 0c 	mcall	80007484 <nav_file_del+0xa8>
80007458:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000745c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80007460:	80 00       	ld.sh	r0,r0[0x0]
80007462:	60 20       	ld.w	r0,r0[0x8]
80007464:	80 00       	ld.sh	r0,r0[0x0]
80007466:	70 e0       	ld.w	r0,r8[0x38]
80007468:	00 00       	add	r0,r0
8000746a:	14 48       	or	r8,r10
8000746c:	80 00       	ld.sh	r0,r0[0x0]
8000746e:	72 fc       	ld.w	r12,r9[0x3c]
80007470:	80 00       	ld.sh	r0,r0[0x0]
80007472:	63 10       	ld.w	r0,r1[0x44]
80007474:	80 00       	ld.sh	r0,r0[0x0]
80007476:	6f f0       	ld.w	r0,r7[0x7c]
80007478:	80 00       	ld.sh	r0,r0[0x0]
8000747a:	73 9c       	ld.w	r12,r9[0x64]
8000747c:	80 00       	ld.sh	r0,r0[0x0]
8000747e:	54 50       	stdsp	sp[0x114],r0
80007480:	80 00       	ld.sh	r0,r0[0x0]
80007482:	72 78       	ld.w	r8,r9[0x1c]
80007484:	80 00       	ld.sh	r0,r0[0x0]
80007486:	55 b4       	stdsp	sp[0x16c],r4

80007488 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
80007488:	d4 21       	pushm	r4-r7,lr
8000748a:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
8000748c:	f0 1f 00 0b 	mcall	800074b8 <nav_filelist_first+0x30>
80007490:	c0 71       	brne	8000749e <nav_filelist_first+0x16>
80007492:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80007494:	e9 38 00 2c 	ld.ub	r8,r4[44]
80007498:	10 37       	cp.w	r7,r8
8000749a:	c0 51       	brne	800074a4 <nav_filelist_first+0x1c>
8000749c:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000749e:	30 16       	mov	r6,1
800074a0:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
800074a2:	48 74       	lddpc	r4,800074bc <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800074a4:	0c 9b       	mov	r11,r6
800074a6:	0a 9c       	mov	r12,r5
800074a8:	f0 1f 00 06 	mcall	800074c0 <nav_filelist_first+0x38>
800074ac:	cf 41       	brne	80007494 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800074ae:	30 99       	mov	r9,9
800074b0:	48 58       	lddpc	r8,800074c4 <nav_filelist_first+0x3c>
800074b2:	b0 89       	st.b	r8[0x0],r9
   return false;
}
800074b4:	d8 22       	popm	r4-r7,pc
800074b6:	00 00       	add	r0,r0
800074b8:	80 00       	ld.sh	r0,r0[0x0]
800074ba:	72 78       	ld.w	r8,r9[0x1c]
800074bc:	00 00       	add	r0,r0
800074be:	13 f8       	ld.ub	r8,r9[0x7]
800074c0:	80 00       	ld.sh	r0,r0[0x0]
800074c2:	70 e0       	ld.w	r0,r8[0x38]
800074c4:	00 00       	add	r0,r0
800074c6:	14 48       	or	r8,r10

800074c8 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
800074c8:	d4 31       	pushm	r0-r7,lr
800074ca:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
800074cc:	49 88       	lddpc	r8,8000752c <nav_filelist_nb+0x64>
800074ce:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
800074d2:	f0 1f 00 18 	mcall	80007530 <nav_filelist_nb+0x68>
800074d6:	c0 31       	brne	800074dc <nav_filelist_nb+0x14>
800074d8:	30 02       	mov	r2,0
800074da:	c2 68       	rjmp	80007526 <nav_filelist_nb+0x5e>
800074dc:	30 02       	mov	r2,0
800074de:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800074e0:	30 14       	mov	r4,1
800074e2:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800074e4:	49 26       	lddpc	r6,8000752c <nav_filelist_nb+0x64>
800074e6:	30 15       	mov	r5,1
800074e8:	c0 b8       	rjmp	800074fe <nav_filelist_nb+0x36>
800074ea:	ed 38 00 2c 	ld.ub	r8,r6[44]
800074ee:	ea 08 18 00 	cp.b	r8,r5
800074f2:	c0 41       	brne	800074fa <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
800074f4:	2f f2       	sub	r2,-1
800074f6:	5c 82       	casts.h	r2
800074f8:	c0 38       	rjmp	800074fe <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
800074fa:	2f f7       	sub	r7,-1
800074fc:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800074fe:	08 9b       	mov	r11,r4
80007500:	06 9c       	mov	r12,r3
80007502:	f0 1f 00 0d 	mcall	80007534 <nav_filelist_nb+0x6c>
80007506:	cf 21       	brne	800074ea <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
80007508:	f0 1f 00 0a 	mcall	80007530 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
8000750c:	3f f8       	mov	r8,-1
8000750e:	f0 01 19 00 	cp.h	r1,r8
80007512:	c0 60       	breq	8000751e <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80007514:	30 1b       	mov	r11,1
80007516:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
8000751a:	f0 1f 00 07 	mcall	80007534 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000751e:	58 00       	cp.w	r0,0
80007520:	c0 31       	brne	80007526 <nav_filelist_nb+0x5e>
80007522:	0e 92       	mov	r2,r7
80007524:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80007526:	04 9c       	mov	r12,r2
80007528:	d8 32       	popm	r0-r7,pc
8000752a:	00 00       	add	r0,r0
8000752c:	00 00       	add	r0,r0
8000752e:	13 f8       	ld.ub	r8,r9[0x7]
80007530:	80 00       	ld.sh	r0,r0[0x0]
80007532:	72 78       	ld.w	r8,r9[0x1c]
80007534:	80 00       	ld.sh	r0,r0[0x0]
80007536:	70 e0       	ld.w	r0,r8[0x38]

80007538 <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
80007538:	eb cd 40 c0 	pushm	r6-r7,lr
8000753c:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000753e:	f0 1f 00 0f 	mcall	80007578 <nav_filelist_last+0x40>
80007542:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
80007546:	c0 61       	brne	80007552 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
80007548:	30 99       	mov	r9,9
8000754a:	48 d8       	lddpc	r8,8000757c <nav_filelist_last+0x44>
8000754c:	b0 89       	st.b	r8[0x0],r9
8000754e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80007552:	0c 9c       	mov	r12,r6
80007554:	f0 1f 00 0b 	mcall	80007580 <nav_filelist_last+0x48>
80007558:	c0 d0       	breq	80007572 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000755a:	30 18       	mov	r8,1
8000755c:	f0 07 19 00 	cp.h	r7,r8
80007560:	c0 31       	brne	80007566 <nav_filelist_last+0x2e>
80007562:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80007566:	0e 9c       	mov	r12,r7
80007568:	20 2c       	sub	r12,2
8000756a:	30 1b       	mov	r11,1
8000756c:	5c 7c       	castu.h	r12
8000756e:	f0 1f 00 06 	mcall	80007584 <nav_filelist_last+0x4c>
}
80007572:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007576:	00 00       	add	r0,r0
80007578:	80 00       	ld.sh	r0,r0[0x0]
8000757a:	74 c8       	ld.w	r8,r10[0x30]
8000757c:	00 00       	add	r0,r0
8000757e:	14 48       	or	r8,r10
80007580:	80 00       	ld.sh	r0,r0[0x0]
80007582:	74 88       	ld.w	r8,r10[0x20]
80007584:	80 00       	ld.sh	r0,r0[0x0]
80007586:	70 e0       	ld.w	r0,r8[0x38]

80007588 <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
80007588:	eb cd 40 80 	pushm	r7,lr
8000758c:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
8000758e:	f0 1f 00 18 	mcall	800075ec <nav_dir_make+0x64>
80007592:	c2 b0       	breq	800075e8 <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80007594:	0e 9c       	mov	r12,r7
80007596:	f0 1f 00 17 	mcall	800075f0 <nav_dir_make+0x68>
8000759a:	c2 70       	breq	800075e8 <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000759c:	49 68       	lddpc	r8,800075f4 <nav_dir_make+0x6c>
8000759e:	3f f9       	mov	r9,-1
800075a0:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
800075a2:	30 19       	mov	r9,1
800075a4:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
800075a6:	f0 1f 00 15 	mcall	800075f8 <nav_dir_make+0x70>
800075aa:	c0 71       	brne	800075b8 <nav_dir_make+0x30>
   {
      fat_delete_file( false );
800075ac:	f0 1f 00 14 	mcall	800075fc <nav_dir_make+0x74>
      fat_cache_flush();
800075b0:	f0 1f 00 14 	mcall	80007600 <nav_dir_make+0x78>
800075b4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
800075b8:	49 38       	lddpc	r8,80007604 <nav_dir_make+0x7c>
800075ba:	48 f9       	lddpc	r9,800075f4 <nav_dir_make+0x6c>
800075bc:	72 09       	ld.w	r9,r9[0x0]
800075be:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
800075c0:	30 09       	mov	r9,0
800075c2:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
800075c4:	31 09       	mov	r9,16
800075c6:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
800075c8:	f0 1f 00 10 	mcall	80007608 <nav_dir_make+0x80>
800075cc:	c0 e0       	breq	800075e8 <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
800075ce:	f0 1f 00 10 	mcall	8000760c <nav_dir_make+0x84>
800075d2:	c0 b0       	breq	800075e8 <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
800075d4:	f0 1f 00 0f 	mcall	80007610 <nav_dir_make+0x88>
   if( !fat_cache_flush())
800075d8:	f0 1f 00 0a 	mcall	80007600 <nav_dir_make+0x78>
800075dc:	c0 60       	breq	800075e8 <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
800075de:	30 0c       	mov	r12,0
800075e0:	f0 1f 00 0d 	mcall	80007614 <nav_dir_make+0x8c>
800075e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800075e8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800075ec:	80 00       	ld.sh	r0,r0[0x0]
800075ee:	60 44       	ld.w	r4,r0[0x10]
800075f0:	80 00       	ld.sh	r0,r0[0x0]
800075f2:	72 90       	ld.w	r0,r9[0x24]
800075f4:	00 00       	add	r0,r0
800075f6:	14 a0       	st.w	r10++,r0
800075f8:	80 00       	ld.sh	r0,r0[0x0]
800075fa:	64 ec       	ld.w	r12,r2[0x38]
800075fc:	80 00       	ld.sh	r0,r0[0x0]
800075fe:	63 10       	ld.w	r0,r1[0x44]
80007600:	80 00       	ld.sh	r0,r0[0x0]
80007602:	55 b4       	stdsp	sp[0x16c],r4
80007604:	00 00       	add	r0,r0
80007606:	11 b8       	ld.ub	r8,r8[0x3]
80007608:	80 00       	ld.sh	r0,r0[0x0]
8000760a:	61 a8       	ld.w	r8,r0[0x68]
8000760c:	80 00       	ld.sh	r0,r0[0x0]
8000760e:	5c 50       	castu.b	r0
80007610:	80 00       	ld.sh	r0,r0[0x0]
80007612:	54 00       	stdsp	sp[0x100],r0
80007614:	80 00       	ld.sh	r0,r0[0x0]
80007616:	75 38       	ld.w	r8,r10[0x4c]

80007618 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
80007618:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
8000761a:	f0 1f 00 0a 	mcall	80007640 <nav_partition_mount+0x28>
8000761e:	c0 f0       	breq	8000763c <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80007620:	48 98       	lddpc	r8,80007644 <nav_partition_mount+0x2c>
80007622:	11 89       	ld.ub	r9,r8[0x0]
80007624:	30 08       	mov	r8,0
80007626:	f0 09 18 00 	cp.b	r9,r8
8000762a:	c0 70       	breq	80007638 <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000762c:	30 09       	mov	r9,0
8000762e:	48 78       	lddpc	r8,80007648 <nav_partition_mount+0x30>
80007630:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80007632:	f0 1f 00 07 	mcall	8000764c <nav_partition_mount+0x34>
80007636:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
80007638:	f0 1f 00 06 	mcall	80007650 <nav_partition_mount+0x38>
}
8000763c:	d8 02       	popm	pc
8000763e:	00 00       	add	r0,r0
80007640:	80 00       	ld.sh	r0,r0[0x0]
80007642:	5f 70       	srpl	r0
80007644:	00 00       	add	r0,r0
80007646:	14 44       	or	r4,r10
80007648:	00 00       	add	r0,r0
8000764a:	13 f8       	ld.ub	r8,r9[0x7]
8000764c:	80 00       	ld.sh	r0,r0[0x0]
8000764e:	50 1c       	stdsp	sp[0x4],r12
80007650:	80 00       	ld.sh	r0,r0[0x0]
80007652:	6a 84       	ld.w	r4,r5[0x20]

80007654 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80007654:	d4 01       	pushm	lr
   return nav_partition_mount();
80007656:	f0 1f 00 02 	mcall	8000765c <nav_dir_root+0x8>
}
8000765a:	d8 02       	popm	pc
8000765c:	80 00       	ld.sh	r0,r0[0x0]
8000765e:	76 18       	ld.w	r8,r11[0x4]

80007660 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80007660:	eb cd 40 80 	pushm	r7,lr
80007664:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
80007666:	f0 1f 00 0f 	mcall	800076a0 <nav_drive_set+0x40>
8000766a:	c1 90       	breq	8000769c <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
8000766c:	f0 1f 00 0e 	mcall	800076a4 <nav_drive_set+0x44>
80007670:	ee 0c 18 00 	cp.b	r12,r7
80007674:	e0 8b 00 07 	brhi	80007682 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80007678:	30 69       	mov	r9,6
8000767a:	48 c8       	lddpc	r8,800076a8 <nav_drive_set+0x48>
8000767c:	b0 89       	st.b	r8[0x0],r9
8000767e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80007682:	48 b8       	lddpc	r8,800076ac <nav_drive_set+0x4c>
80007684:	11 88       	ld.ub	r8,r8[0x0]
80007686:	ee 08 18 00 	cp.b	r8,r7
8000768a:	c0 31       	brne	80007690 <nav_drive_set+0x30>
8000768c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80007690:	48 78       	lddpc	r8,800076ac <nav_drive_set+0x4c>
80007692:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80007694:	30 09       	mov	r9,0
80007696:	48 78       	lddpc	r8,800076b0 <nav_drive_set+0x50>
80007698:	b0 89       	st.b	r8[0x0],r9
8000769a:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
8000769c:	e3 cd 80 80 	ldm	sp++,r7,pc
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	5f 70       	srpl	r0
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	7b 1c       	ld.w	r12,sp[0x44]
800076a8:	00 00       	add	r0,r0
800076aa:	14 48       	or	r8,r10
800076ac:	00 00       	add	r0,r0
800076ae:	13 f8       	ld.ub	r8,r9[0x7]
800076b0:	00 00       	add	r0,r0
800076b2:	14 44       	or	r4,r10

800076b4 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
800076b4:	d4 21       	pushm	r4-r7,lr
800076b6:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
800076b8:	19 8c       	ld.ub	r12,r12[0x0]
800076ba:	f0 1f 00 10 	mcall	800076f8 <nav_gotoindex+0x44>
800076be:	c1 c0       	breq	800076f6 <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
800076c0:	f0 1f 00 0f 	mcall	800076fc <nav_gotoindex+0x48>
800076c4:	c1 90       	breq	800076f6 <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
800076c6:	6e 19       	ld.w	r9,r7[0x4]
800076c8:	48 e8       	lddpc	r8,80007700 <nav_gotoindex+0x4c>
800076ca:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
800076cc:	f0 1f 00 0e 	mcall	80007704 <nav_gotoindex+0x50>
800076d0:	c0 a1       	brne	800076e4 <nav_gotoindex+0x30>
800076d2:	c1 28       	rjmp	800076f6 <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800076d4:	0a 9b       	mov	r11,r5
800076d6:	08 9c       	mov	r12,r4
800076d8:	f0 1f 00 0c 	mcall	80007708 <nav_gotoindex+0x54>
800076dc:	c0 71       	brne	800076ea <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
800076de:	f0 1f 00 0a 	mcall	80007704 <nav_gotoindex+0x50>
800076e2:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800076e4:	48 a6       	lddpc	r6,8000770c <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800076e6:	30 15       	mov	r5,1
800076e8:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800076ea:	8c 19       	ld.sh	r9,r6[0x2]
800076ec:	8e 48       	ld.sh	r8,r7[0x8]
800076ee:	f0 09 19 00 	cp.h	r9,r8
800076f2:	cf 11       	brne	800076d4 <nav_gotoindex+0x20>
800076f4:	da 2a       	popm	r4-r7,pc,r12=1
800076f6:	d8 2a       	popm	r4-r7,pc,r12=0
800076f8:	80 00       	ld.sh	r0,r0[0x0]
800076fa:	76 60       	ld.w	r0,r11[0x18]
800076fc:	80 00       	ld.sh	r0,r0[0x0]
800076fe:	76 18       	ld.w	r8,r11[0x4]
80007700:	00 00       	add	r0,r0
80007702:	13 f8       	ld.ub	r8,r9[0x7]
80007704:	80 00       	ld.sh	r0,r0[0x0]
80007706:	72 78       	ld.w	r8,r9[0x1c]
80007708:	80 00       	ld.sh	r0,r0[0x0]
8000770a:	70 e0       	ld.w	r0,r8[0x38]
8000770c:	00 00       	add	r0,r0
8000770e:	14 44       	or	r4,r10

80007710 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
80007710:	d4 31       	pushm	r0-r7,lr
80007712:	20 6d       	sub	sp,24
80007714:	18 97       	mov	r7,r12
80007716:	16 91       	mov	r1,r11
80007718:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
8000771a:	f0 1f 00 61 	mcall	8000789c <nav_setcwd+0x18c>
8000771e:	e0 80 00 bd 	breq	80007898 <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
80007722:	1a 96       	mov	r6,sp
80007724:	1a 9c       	mov	r12,sp
80007726:	f0 1f 00 5f 	mcall	800078a0 <nav_setcwd+0x190>
8000772a:	fa c8 ff f4 	sub	r8,sp,-12
8000772e:	fa ea 00 00 	ld.d	r10,sp[0]
80007732:	f0 eb 00 00 	st.d	r8[0],r10
80007736:	40 29       	lddsp	r9,sp[0x8]
80007738:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000773a:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000773c:	35 c9       	mov	r9,92
8000773e:	f2 08 18 00 	cp.b	r8,r9
80007742:	5f 0a       	sreq	r10
80007744:	32 f9       	mov	r9,47
80007746:	f2 08 18 00 	cp.b	r8,r9
8000774a:	5f 09       	sreq	r9
8000774c:	f5 e9 10 09 	or	r9,r10,r9
80007750:	c0 70       	breq	8000775e <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80007752:	f0 1f 00 55 	mcall	800078a4 <nav_setcwd+0x194>
80007756:	e0 80 00 9c 	breq	8000788e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000775a:	2f f7       	sub	r7,-1
8000775c:	c5 e8       	rjmp	80007818 <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000775e:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80007760:	33 aa       	mov	r10,58
80007762:	f4 09 18 00 	cp.b	r9,r10
80007766:	c2 01       	brne	800077a6 <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80007768:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000776a:	35 cb       	mov	r11,92
8000776c:	f6 0a 18 00 	cp.b	r10,r11
80007770:	5f 0b       	sreq	r11
80007772:	32 fc       	mov	r12,47
80007774:	f8 0a 18 00 	cp.b	r10,r12
80007778:	5f 0a       	sreq	r10
8000777a:	f7 ea 10 0a 	or	r10,r11,r10
8000777e:	c1 40       	breq	800077a6 <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80007780:	4c a9       	lddpc	r9,800078a8 <nav_setcwd+0x198>
80007782:	72 09       	ld.w	r9,r9[0x0]
80007784:	f2 08 07 09 	ld.ub	r9,r9[r8]
80007788:	e2 19 00 02 	andl	r9,0x2,COH
8000778c:	f7 b8 01 20 	subne	r8,32
80007790:	24 18       	sub	r8,65
80007792:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80007796:	f0 1f 00 46 	mcall	800078ac <nav_setcwd+0x19c>
8000779a:	c7 a0       	breq	8000788e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000779c:	f0 1f 00 45 	mcall	800078b0 <nav_setcwd+0x1a0>
800077a0:	c7 70       	breq	8000788e <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
800077a2:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800077a4:	c3 a8       	rjmp	80007818 <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
800077a6:	32 ea       	mov	r10,46
800077a8:	f4 08 18 00 	cp.b	r8,r10
800077ac:	c1 a1       	brne	800077e0 <nav_setcwd+0xd0>
800077ae:	35 c8       	mov	r8,92
800077b0:	f0 09 18 00 	cp.b	r9,r8
800077b4:	5f 0a       	sreq	r10
800077b6:	32 f8       	mov	r8,47
800077b8:	f0 09 18 00 	cp.b	r9,r8
800077bc:	5f 08       	sreq	r8
800077be:	f5 e8 10 08 	or	r8,r10,r8
800077c2:	c0 f0       	breq	800077e0 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
800077c4:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
800077c6:	c2 98       	rjmp	80007818 <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
800077c8:	f0 1f 00 3b 	mcall	800078b4 <nav_setcwd+0x1a4>
800077cc:	c6 10       	breq	8000788e <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
800077ce:	0d 88       	ld.ub	r8,r6[0x0]
800077d0:	e8 08 18 00 	cp.b	r8,r4
800077d4:	c0 31       	brne	800077da <nav_setcwd+0xca>
800077d6:	0c 97       	mov	r7,r6
800077d8:	c0 88       	rjmp	800077e8 <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
800077da:	ec c7 ff ff 	sub	r7,r6,-1
800077de:	c0 58       	rjmp	800077e8 <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800077e0:	32 e5       	mov	r5,46
800077e2:	35 c3       	mov	r3,92
800077e4:	32 f2       	mov	r2,47
800077e6:	30 04       	mov	r4,0
800077e8:	0f 88       	ld.ub	r8,r7[0x0]
800077ea:	ea 08 18 00 	cp.b	r8,r5
800077ee:	c1 51       	brne	80007818 <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
800077f0:	0f 98       	ld.ub	r8,r7[0x1]
800077f2:	ea 08 18 00 	cp.b	r8,r5
800077f6:	c1 11       	brne	80007818 <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
800077f8:	ee c6 ff fe 	sub	r6,r7,-2
800077fc:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800077fe:	e6 08 18 00 	cp.b	r8,r3
80007802:	5f 0a       	sreq	r10
80007804:	e4 08 18 00 	cp.b	r8,r2
80007808:	5f 09       	sreq	r9
8000780a:	f5 e9 10 09 	or	r9,r10,r9
8000780e:	e8 09 18 00 	cp.b	r9,r4
80007812:	cd b1       	brne	800077c8 <nav_setcwd+0xb8>
80007814:	58 08       	cp.w	r8,0
80007816:	cd 90       	breq	800077c8 <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80007818:	f0 1f 00 28 	mcall	800078b8 <nav_setcwd+0x1a8>
8000781c:	c3 90       	breq	8000788e <nav_setcwd+0x17e>
8000781e:	30 03       	mov	r3,0
80007820:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80007822:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80007824:	35 c5       	mov	r5,92
80007826:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80007828:	0f 88       	ld.ub	r8,r7[0x0]
8000782a:	ec 08 18 00 	cp.b	r8,r6
8000782e:	c0 31       	brne	80007834 <nav_setcwd+0x124>
80007830:	30 1c       	mov	r12,1
80007832:	c3 38       	rjmp	80007898 <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80007834:	02 9b       	mov	r11,r1
80007836:	0e 9c       	mov	r12,r7
80007838:	f0 1f 00 21 	mcall	800078bc <nav_setcwd+0x1ac>
8000783c:	c0 51       	brne	80007846 <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
8000783e:	58 00       	cp.w	r0,0
80007840:	c2 70       	breq	8000788e <nav_setcwd+0x17e>
80007842:	0e 92       	mov	r2,r7
80007844:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80007846:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80007848:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000784a:	58 08       	cp.w	r8,0
8000784c:	c0 81       	brne	8000785c <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
8000784e:	58 03       	cp.w	r3,0
80007850:	ce c0       	breq	80007828 <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80007852:	04 9c       	mov	r12,r2
80007854:	f0 1f 00 1b 	mcall	800078c0 <nav_setcwd+0x1b0>
80007858:	ce 81       	brne	80007828 <nav_setcwd+0x118>
8000785a:	c1 a8       	rjmp	8000788e <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000785c:	ea 08 18 00 	cp.b	r8,r5
80007860:	5f 09       	sreq	r9
80007862:	e8 08 18 00 	cp.b	r8,r4
80007866:	5f 08       	sreq	r8
80007868:	f3 e8 10 08 	or	r8,r9,r8
8000786c:	ec 08 18 00 	cp.b	r8,r6
80007870:	ce b0       	breq	80007846 <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80007872:	58 03       	cp.w	r3,0
80007874:	c0 50       	breq	8000787e <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80007876:	04 9c       	mov	r12,r2
80007878:	f0 1f 00 13 	mcall	800078c4 <nav_setcwd+0x1b4>
8000787c:	c0 90       	breq	8000788e <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
8000787e:	f0 1f 00 13 	mcall	800078c8 <nav_setcwd+0x1b8>
80007882:	c0 60       	breq	8000788e <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80007884:	f0 1f 00 12 	mcall	800078cc <nav_setcwd+0x1bc>
80007888:	c0 30       	breq	8000788e <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000788a:	2f f7       	sub	r7,-1
8000788c:	cc eb       	rjmp	80007828 <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000788e:	fa cc ff f4 	sub	r12,sp,-12
80007892:	f0 1f 00 10 	mcall	800078d0 <nav_setcwd+0x1c0>
80007896:	30 0c       	mov	r12,0
   return false;
}
80007898:	2f ad       	sub	sp,-24
8000789a:	d8 32       	popm	r0-r7,pc
8000789c:	80 00       	ld.sh	r0,r0[0x0]
8000789e:	5f 70       	srpl	r0
800078a0:	80 00       	ld.sh	r0,r0[0x0]
800078a2:	6f d0       	ld.w	r0,r7[0x74]
800078a4:	80 00       	ld.sh	r0,r0[0x0]
800078a6:	76 54       	ld.w	r4,r11[0x14]
800078a8:	00 00       	add	r0,r0
800078aa:	00 cc       	st.b	r0++,r12
800078ac:	80 00       	ld.sh	r0,r0[0x0]
800078ae:	76 60       	ld.w	r0,r11[0x18]
800078b0:	80 00       	ld.sh	r0,r0[0x0]
800078b2:	76 18       	ld.w	r8,r11[0x4]
800078b4:	80 00       	ld.sh	r0,r0[0x0]
800078b6:	72 fc       	ld.w	r12,r9[0x3c]
800078b8:	80 00       	ld.sh	r0,r0[0x0]
800078ba:	72 78       	ld.w	r8,r9[0x1c]
800078bc:	80 00       	ld.sh	r0,r0[0x0]
800078be:	72 48       	ld.w	r8,r9[0x10]
800078c0:	80 00       	ld.sh	r0,r0[0x0]
800078c2:	72 90       	ld.w	r0,r9[0x24]
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	75 88       	ld.w	r8,r10[0x60]
800078c8:	80 00       	ld.sh	r0,r0[0x0]
800078ca:	50 04       	stdsp	sp[0x0],r4
800078cc:	80 00       	ld.sh	r0,r0[0x0]
800078ce:	73 9c       	ld.w	r12,r9[0x64]
800078d0:	80 00       	ld.sh	r0,r0[0x0]
800078d2:	76 b4       	ld.w	r4,r11[0x2c]

800078d4 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
800078d4:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
800078d6:	f0 1f 00 02 	mcall	800078dc <nav_drive_nb+0x8>
}
800078da:	d8 02       	popm	pc
800078dc:	80 00       	ld.sh	r0,r0[0x0]
800078de:	7b 1c       	ld.w	r12,sp[0x44]

800078e0 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
800078e0:	eb cd 40 80 	pushm	r7,lr
800078e4:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
800078e6:	30 18       	mov	r8,1
800078e8:	f0 0c 18 00 	cp.b	r12,r8
800078ec:	e0 88 00 07 	brls	800078fa <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
800078f0:	32 79       	mov	r9,39
800078f2:	48 b8       	lddpc	r8,8000791c <nav_select+0x3c>
800078f4:	b0 89       	st.b	r8[0x0],r9
800078f6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800078fa:	48 a8       	lddpc	r8,80007920 <nav_select+0x40>
800078fc:	11 8c       	ld.ub	r12,r8[0x0]
800078fe:	ee 0c 18 00 	cp.b	r12,r7
80007902:	c0 31       	brne	80007908 <nav_select+0x28>
80007904:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80007908:	f0 1f 00 07 	mcall	80007924 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
8000790c:	0e 9c       	mov	r12,r7
8000790e:	f0 1f 00 06 	mcall	80007924 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80007912:	48 48       	lddpc	r8,80007920 <nav_select+0x40>
80007914:	b0 87       	st.b	r8[0x0],r7
80007916:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000791a:	00 00       	add	r0,r0
8000791c:	00 00       	add	r0,r0
8000791e:	14 48       	or	r8,r10
80007920:	00 00       	add	r0,r0
80007922:	14 c0       	st.b	r10++,r0
80007924:	80 00       	ld.sh	r0,r0[0x0]
80007926:	54 c8       	stdsp	sp[0x130],r8

80007928 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80007928:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
8000792c:	30 07       	mov	r7,0
8000792e:	49 18       	lddpc	r8,80007970 <nav_reset+0x48>
80007930:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80007932:	49 18       	lddpc	r8,80007974 <nav_reset+0x4c>
80007934:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80007936:	f0 1f 00 11 	mcall	80007978 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
8000793a:	f0 1f 00 11 	mcall	8000797c <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
8000793e:	30 0c       	mov	r12,0
80007940:	f0 1f 00 10 	mcall	80007980 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80007944:	49 03       	lddpc	r3,80007984 <nav_reset+0x5c>
80007946:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80007948:	49 05       	lddpc	r5,80007988 <nav_reset+0x60>
8000794a:	3f f4       	mov	r4,-1
8000794c:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000794e:	49 06       	lddpc	r6,8000798c <nav_reset+0x64>
80007950:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80007952:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80007956:	30 1c       	mov	r12,1
80007958:	f0 1f 00 0a 	mcall	80007980 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000795c:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000795e:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80007960:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80007962:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80007966:	48 b8       	lddpc	r8,80007990 <nav_reset+0x68>
80007968:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000796a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000796e:	00 00       	add	r0,r0
80007970:	00 00       	add	r0,r0
80007972:	14 49       	or	r9,r10
80007974:	00 00       	add	r0,r0
80007976:	11 ca       	ld.ub	r10,r8[0x4]
80007978:	80 00       	ld.sh	r0,r0[0x0]
8000797a:	53 d8       	stdsp	sp[0xf4],r8
8000797c:	80 00       	ld.sh	r0,r0[0x0]
8000797e:	4d b8       	lddpc	r8,80007ae8 <sysclk_enable_usb+0x44>
80007980:	80 00       	ld.sh	r0,r0[0x0]
80007982:	78 e0       	ld.w	r0,r12[0x38]
80007984:	00 00       	add	r0,r0
80007986:	14 44       	or	r4,r10
80007988:	00 00       	add	r0,r0
8000798a:	13 f8       	ld.ub	r8,r9[0x7]
8000798c:	00 00       	add	r0,r0
8000798e:	11 b8       	ld.ub	r8,r8[0x3]
80007990:	00 00       	add	r0,r0
80007992:	14 c0       	st.b	r10++,r0

80007994 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80007994:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80007996:	f0 1f 00 02 	mcall	8000799c <print+0x8>
}
8000799a:	d8 02       	popm	pc
8000799c:	80 00       	ld.sh	r0,r0[0x0]
8000799e:	3e 38       	mov	r8,-29

800079a0 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
800079a0:	eb cd 40 e0 	pushm	r5-r7,lr
800079a4:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800079a6:	30 08       	mov	r8,0
800079a8:	fb 68 00 0a 	st.b	sp[10],r8
800079ac:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
800079ae:	1a 95       	mov	r5,sp
800079b0:	e0 6e cc cd 	mov	lr,52429
800079b4:	ea 1e cc cc 	orh	lr,0xcccc
800079b8:	20 19       	sub	r9,1
800079ba:	f6 0e 06 46 	mulu.d	r6,r11,lr
800079be:	0e 98       	mov	r8,r7
800079c0:	a3 98       	lsr	r8,0x3
800079c2:	f0 08 00 2a 	add	r10,r8,r8<<0x2
800079c6:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
800079ca:	2d 0b       	sub	r11,-48
800079cc:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
800079d0:	10 9b       	mov	r11,r8
  } while (n);
800079d2:	58 08       	cp.w	r8,0
800079d4:	cf 21       	brne	800079b8 <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
800079d6:	1a 9b       	mov	r11,sp
800079d8:	12 0b       	add	r11,r9
800079da:	f0 1f 00 03 	mcall	800079e4 <print_ulong+0x44>
}
800079de:	2f dd       	sub	sp,-12
800079e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800079e4:	80 00       	ld.sh	r0,r0[0x0]
800079e6:	79 94       	ld.w	r4,r12[0x64]

800079e8 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
800079e8:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800079ea:	18 9b       	mov	r11,r12
800079ec:	fe 7c 2c 00 	mov	r12,-54272
800079f0:	f0 1f 00 02 	mcall	800079f8 <print_dbg_ulong+0x10>
}
800079f4:	d8 02       	popm	pc
800079f6:	00 00       	add	r0,r0
800079f8:	80 00       	ld.sh	r0,r0[0x0]
800079fa:	79 a0       	ld.w	r0,r12[0x68]

800079fc <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
800079fc:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
800079fe:	18 9b       	mov	r11,r12
80007a00:	fe 7c 2c 00 	mov	r12,-54272
80007a04:	f0 1f 00 02 	mcall	80007a0c <print_dbg+0x10>
}
80007a08:	d8 02       	popm	pc
80007a0a:	00 00       	add	r0,r0
80007a0c:	80 00       	ld.sh	r0,r0[0x0]
80007a0e:	79 94       	ld.w	r4,r12[0x64]

80007a10 <_stext>:
80007a10:	48 dd       	lddpc	sp,80007a44 <udata_clear_loop_end+0x6>
80007a12:	48 e0       	lddpc	r0,80007a48 <udata_clear_loop_end+0xa>
80007a14:	e3 b0 00 01 	mtsr	0x4,r0
80007a18:	d5 53       	csrf	0x15
80007a1a:	48 d0       	lddpc	r0,80007a4c <udata_clear_loop_end+0xe>
80007a1c:	48 d1       	lddpc	r1,80007a50 <udata_clear_loop_end+0x12>
80007a1e:	02 30       	cp.w	r0,r1
80007a20:	c0 62       	brcc	80007a2c <idata_load_loop_end>
80007a22:	48 d2       	lddpc	r2,80007a54 <udata_clear_loop_end+0x16>

80007a24 <idata_load_loop>:
80007a24:	a5 05       	ld.d	r4,r2++
80007a26:	a1 24       	st.d	r0++,r4
80007a28:	02 30       	cp.w	r0,r1
80007a2a:	cf d3       	brcs	80007a24 <idata_load_loop>

80007a2c <idata_load_loop_end>:
80007a2c:	48 b0       	lddpc	r0,80007a58 <udata_clear_loop_end+0x1a>
80007a2e:	48 c1       	lddpc	r1,80007a5c <udata_clear_loop_end+0x1e>
80007a30:	02 30       	cp.w	r0,r1
80007a32:	c0 62       	brcc	80007a3e <udata_clear_loop_end>
80007a34:	30 02       	mov	r2,0
80007a36:	30 03       	mov	r3,0

80007a38 <udata_clear_loop>:
80007a38:	a1 22       	st.d	r0++,r2
80007a3a:	02 30       	cp.w	r0,r1
80007a3c:	cf e3       	brcs	80007a38 <udata_clear_loop>

80007a3e <udata_clear_loop_end>:
80007a3e:	fe cf e1 3e 	sub	pc,pc,-7874
80007a42:	d7 03       	nop
80007a44:	00 01       	add	r1,r0
80007a46:	00 00       	add	r0,r0
80007a48:	80 01       	ld.sh	r1,r0[0x0]
80007a4a:	32 00       	mov	r0,32
80007a4c:	00 00       	add	r0,r0
80007a4e:	00 04       	add	r4,r0
80007a50:	00 00       	add	r0,r0
80007a52:	06 00       	add	r0,r3
80007a54:	80 01       	ld.sh	r1,r0[0x0]
80007a56:	44 88       	lddsp	r8,sp[0x120]
80007a58:	00 00       	add	r0,r0
80007a5a:	06 00       	add	r0,r3
80007a5c:	00 00       	add	r0,r0
80007a5e:	16 30       	cp.w	r0,r11

80007a60 <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
80007a60:	5e fc       	retal	r12

80007a62 <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007a62:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007a66:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
80007a68:	fe 78 08 00 	mov	r8,-63488
80007a6c:	32 4a       	mov	r10,36
80007a6e:	ea 1a aa 00 	orh	r10,0xaa00
80007a72:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
80007a74:	e0 7a 0c 07 	mov	r10,68615
80007a78:	91 9a       	st.w	r8[0x24],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007a7a:	e3 b9 00 00 	mtsr	0x0,r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
80007a7e:	5e fc       	retal	r12

80007a80 <pll_enable>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007a80:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007a84:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80007a86:	2f 9b       	sub	r11,-7
80007a88:	f6 0a 15 02 	lsl	r10,r11,0x2
80007a8c:	ea 1a aa 00 	orh	r10,0xaa00
80007a90:	fe 78 08 00 	mov	r8,-63488
80007a94:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80007a96:	78 0a       	ld.w	r10,r12[0x0]
80007a98:	a1 aa       	sbr	r10,0x0
80007a9a:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007a9e:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}
80007aa2:	5e fc       	retal	r12

80007aa4 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80007aa4:	d4 01       	pushm	lr
80007aa6:	20 1d       	sub	sp,4

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80007aa8:	fe 78 08 00 	mov	r8,-63488
80007aac:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80007aae:	e2 18 00 10 	andl	r8,0x10,COH
80007ab2:	c2 81       	brne	80007b02 <sysclk_enable_usb+0x5e>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80007ab4:	fe 78 08 00 	mov	r8,-63488
80007ab8:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80007aba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007abe:	c0 91       	brne	80007ad0 <sysclk_enable_usb+0x2c>
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80007ac0:	f0 1f 00 15 	mcall	80007b14 <sysclk_enable_usb+0x70>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80007ac4:	fe 79 08 00 	mov	r9,-63488
80007ac8:	72 58       	ld.w	r8,r9[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80007aca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ace:	cf d0       	breq	80007ac8 <sysclk_enable_usb+0x24>
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80007ad0:	31 08       	mov	r8,16
80007ad2:	a3 b8       	sbr	r8,0x3
80007ad4:	50 08       	stdsp	sp[0x0],r8
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80007ad6:	10 99       	mov	r9,r8
80007ad8:	ea 19 3f 00 	orh	r9,0x3f00
80007adc:	e8 19 01 00 	orl	r9,0x100
80007ae0:	30 68       	mov	r8,6
80007ae2:	20 18       	sub	r8,1
80007ae4:	f3 e8 11 08 	or	r8,r9,r8<<0x10
80007ae8:	fa cc ff fc 	sub	r12,sp,-4
80007aec:	18 d8       	st.w	--r12,r8
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80007aee:	30 0b       	mov	r11,0
80007af0:	1a 9c       	mov	r12,sp
80007af2:	f0 1f 00 0a 	mcall	80007b18 <sysclk_enable_usb+0x74>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80007af6:	fe 79 08 00 	mov	r9,-63488
80007afa:	72 58       	ld.w	r8,r9[0x14]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80007afc:	e2 18 00 10 	andl	r8,0x10,COH
80007b00:	cf d0       	breq	80007afa <sysclk_enable_usb+0x56>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80007b02:	e0 69 05 01 	mov	r9,1281
80007b06:	fe 78 08 00 	mov	r8,-63488
80007b0a:	f1 49 00 64 	st.w	r8[100],r9
	genclk_enable_config(AVR32_USBC_GCLK_NUM, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80007b0e:	2f fd       	sub	sp,-4
80007b10:	d8 02       	popm	pc
80007b12:	00 00       	add	r0,r0
80007b14:	80 00       	ld.sh	r0,r0[0x0]
80007b16:	7a 62       	ld.w	r2,sp[0x18]
80007b18:	80 00       	ld.sh	r0,r0[0x0]
80007b1a:	7a 80       	ld.w	r0,sp[0x20]

80007b1c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80007b1c:	5e ff       	retal	1
80007b1e:	d7 03       	nop

80007b20 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80007b20:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80007b22:	58 0c       	cp.w	r12,0
80007b24:	c0 20       	breq	80007b28 <mem_test_unit_ready+0x8>
80007b26:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80007b28:	48 28       	lddpc	r8,80007b30 <mem_test_unit_ready+0x10>
80007b2a:	70 0c       	ld.w	r12,r8[0x0]
80007b2c:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80007b2e:	d8 02       	popm	pc
80007b30:	80 01       	ld.sh	r1,r0[0x0]
80007b32:	36 d8       	mov	r8,109

80007b34 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80007b34:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80007b36:	58 0c       	cp.w	r12,0
80007b38:	c0 20       	breq	80007b3c <mem_read_capacity+0x8>
80007b3a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80007b3c:	48 38       	lddpc	r8,80007b48 <mem_read_capacity+0x14>
80007b3e:	70 18       	ld.w	r8,r8[0x4]
80007b40:	16 9c       	mov	r12,r11
80007b42:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80007b44:	d8 02       	popm	pc
80007b46:	00 00       	add	r0,r0
80007b48:	80 01       	ld.sh	r1,r0[0x0]
80007b4a:	36 d8       	mov	r8,109

80007b4c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80007b4c:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
80007b4e:	5f 0c       	sreq	r12
80007b50:	5e fc       	retal	r12
80007b52:	d7 03       	nop

80007b54 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80007b54:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80007b56:	58 0c       	cp.w	r12,0
80007b58:	c0 20       	breq	80007b5c <mem_wr_protect+0x8>
80007b5a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80007b5c:	48 28       	lddpc	r8,80007b64 <mem_wr_protect+0x10>
80007b5e:	70 2c       	ld.w	r12,r8[0x8]
80007b60:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80007b62:	d8 02       	popm	pc
80007b64:	80 01       	ld.sh	r1,r0[0x0]
80007b66:	36 d8       	mov	r8,109

80007b68 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80007b68:	d4 01       	pushm	lr
80007b6a:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80007b6c:	58 0c       	cp.w	r12,0
80007b6e:	c0 20       	breq	80007b72 <memory_2_ram+0xa>
80007b70:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80007b72:	48 49       	lddpc	r9,80007b80 <memory_2_ram+0x18>
80007b74:	72 49       	ld.w	r9,r9[0x10]
80007b76:	14 9b       	mov	r11,r10
80007b78:	10 9c       	mov	r12,r8
80007b7a:	5d 19       	icall	r9
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
80007b7c:	d8 02       	popm	pc
80007b7e:	00 00       	add	r0,r0
80007b80:	80 01       	ld.sh	r1,r0[0x0]
80007b82:	36 d8       	mov	r8,109

80007b84 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80007b84:	d4 01       	pushm	lr
80007b86:	16 98       	mov	r8,r11
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80007b88:	58 0c       	cp.w	r12,0
80007b8a:	c0 20       	breq	80007b8e <ram_2_memory+0xa>
80007b8c:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80007b8e:	48 49       	lddpc	r9,80007b9c <ram_2_memory+0x18>
80007b90:	72 59       	ld.w	r9,r9[0x14]
80007b92:	14 9b       	mov	r11,r10
80007b94:	10 9c       	mov	r12,r8
80007b96:	5d 19       	icall	r9
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
80007b98:	d8 02       	popm	pc
80007b9a:	00 00       	add	r0,r0
80007b9c:	80 01       	ld.sh	r1,r0[0x0]
80007b9e:	36 d8       	mov	r8,109

80007ba0 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80007ba0:	48 38       	lddpc	r8,80007bac <udi_cdc_comm_disable+0xc>
80007ba2:	11 89       	ld.ub	r9,r8[0x0]
80007ba4:	20 19       	sub	r9,1
80007ba6:	b0 89       	st.b	r8[0x0],r9
}
80007ba8:	5e fc       	retal	r12
80007baa:	00 00       	add	r0,r0
80007bac:	00 00       	add	r0,r0
80007bae:	0b 80       	ld.ub	r0,r5[0x0]

80007bb0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80007bb0:	5e fd       	retal	0

80007bb2 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80007bb2:	5e fd       	retal	0

80007bb4 <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
80007bb4:	5e fd       	retal	0
80007bb6:	d7 03       	nop

80007bb8 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
80007bb8:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
80007bba:	f0 1f 00 25 	mcall	80007c4c <udi_cdc_comm_setup+0x94>

	if (Udd_setup_is_in()) {
80007bbe:	4a 58       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007bc0:	11 88       	ld.ub	r8,r8[0x0]
80007bc2:	30 09       	mov	r9,0
80007bc4:	f2 08 18 00 	cp.b	r8,r9
80007bc8:	c1 d4       	brge	80007c02 <udi_cdc_comm_setup+0x4a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80007bca:	e2 18 00 60 	andl	r8,0x60,COH
80007bce:	e0 48 00 20 	cp.w	r8,32
80007bd2:	c3 c1       	brne	80007c4a <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80007bd4:	49 f8       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007bd6:	11 99       	ld.ub	r9,r8[0x1]
80007bd8:	32 18       	mov	r8,33
80007bda:	f0 09 18 00 	cp.b	r9,r8
80007bde:	c3 61       	brne	80007c4a <udi_cdc_comm_setup+0x92>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80007be0:	49 c8       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007be2:	90 39       	ld.sh	r9,r8[0x6]
80007be4:	30 78       	mov	r8,7
80007be6:	f0 09 19 00 	cp.h	r9,r8
80007bea:	c3 01       	brne	80007c4a <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
80007bec:	49 98       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007bee:	f8 09 15 03 	lsl	r9,r12,0x3
80007bf2:	f2 0c 01 0c 	sub	r12,r9,r12
80007bf6:	49 89       	lddpc	r9,80007c54 <udi_cdc_comm_setup+0x9c>
80007bf8:	18 09       	add	r9,r12
80007bfa:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80007bfc:	30 79       	mov	r9,7
80007bfe:	b0 69       	st.h	r8[0xc],r9
80007c00:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80007c02:	e2 18 00 60 	andl	r8,0x60,COH
80007c06:	e0 48 00 20 	cp.w	r8,32
80007c0a:	c2 01       	brne	80007c4a <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80007c0c:	49 18       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007c0e:	11 98       	ld.ub	r8,r8[0x1]
80007c10:	32 09       	mov	r9,32
80007c12:	f2 08 18 00 	cp.b	r8,r9
80007c16:	c0 60       	breq	80007c22 <udi_cdc_comm_setup+0x6a>
80007c18:	32 29       	mov	r9,34
80007c1a:	f2 08 18 00 	cp.b	r8,r9
80007c1e:	c1 61       	brne	80007c4a <udi_cdc_comm_setup+0x92>
80007c20:	da 0a       	popm	pc,r12=1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80007c22:	48 c8       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007c24:	90 39       	ld.sh	r9,r8[0x6]
80007c26:	30 78       	mov	r8,7
80007c28:	f0 09 19 00 	cp.h	r9,r8
80007c2c:	c0 f1       	brne	80007c4a <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
80007c2e:	48 98       	lddpc	r8,80007c50 <udi_cdc_comm_setup+0x98>
80007c30:	48 a9       	lddpc	r9,80007c58 <udi_cdc_comm_setup+0xa0>
80007c32:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80007c34:	f8 09 15 03 	lsl	r9,r12,0x3
80007c38:	f2 0c 01 0c 	sub	r12,r9,r12
80007c3c:	48 69       	lddpc	r9,80007c54 <udi_cdc_comm_setup+0x9c>
80007c3e:	f2 0c 00 0c 	add	r12,r9,r12
80007c42:	91 2c       	st.w	r8[0x8],r12
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80007c44:	30 79       	mov	r9,7
80007c46:	b0 69       	st.h	r8[0xc],r9
80007c48:	da 0a       	popm	pc,r12=1
						sizeof(usb_cdc_line_coding_t);
				return true;
80007c4a:	d8 0a       	popm	pc,r12=0
80007c4c:	80 00       	ld.sh	r0,r0[0x0]
80007c4e:	7b b4       	ld.w	r4,sp[0x6c]
80007c50:	00 00       	add	r0,r0
80007c52:	11 5c       	ld.sh	r12,--r8
80007c54:	00 00       	add	r0,r0
80007c56:	08 ec       	st.h	--r4,r12
80007c58:	80 00       	ld.sh	r0,r0[0x0]
80007c5a:	7c 5c       	ld.w	r12,lr[0x14]

80007c5c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
80007c5c:	5e fc       	retal	r12
80007c5e:	d7 03       	nop

80007c60 <udi_cdc_multi_is_tx_ready>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_buf_nb[port][udi_cdc_tx_buf_sel[port]]!=UDI_CDC_TX_BUFFERS) {
80007c60:	49 68       	lddpc	r8,80007cb8 <udi_cdc_multi_is_tx_ready+0x58>
80007c62:	11 89       	ld.ub	r9,r8[0x0]
80007c64:	49 68       	lddpc	r8,80007cbc <udi_cdc_multi_is_tx_ready+0x5c>
80007c66:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80007c6a:	e0 68 01 40 	mov	r8,320
80007c6e:	f0 09 19 00 	cp.h	r9,r8
80007c72:	c0 20       	breq	80007c76 <udi_cdc_multi_is_tx_ready+0x16>
80007c74:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send[port]) {
80007c76:	49 38       	lddpc	r8,80007cc0 <udi_cdc_multi_is_tx_ready+0x60>
80007c78:	11 88       	ld.ub	r8,r8[0x0]
80007c7a:	58 08       	cp.w	r8,0
80007c7c:	c1 21       	brne	80007ca0 <udi_cdc_multi_is_tx_ready+0x40>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007c7e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80007c82:	d3 03       	ssrf	0x10
		flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing[port]) {
80007c84:	49 09       	lddpc	r9,80007cc4 <udi_cdc_multi_is_tx_ready+0x64>
80007c86:	13 89       	ld.ub	r9,r9[0x0]
80007c88:	58 09       	cp.w	r9,0
80007c8a:	c0 91       	brne	80007c9c <udi_cdc_multi_is_tx_ready+0x3c>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send[port] = true;
80007c8c:	30 1a       	mov	r10,1
80007c8e:	48 d9       	lddpc	r9,80007cc0 <udi_cdc_multi_is_tx_ready+0x60>
80007c90:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel[port] = (udi_cdc_tx_buf_sel[port]==0)?1:0;
80007c92:	48 a9       	lddpc	r9,80007cb8 <udi_cdc_multi_is_tx_ready+0x58>
80007c94:	13 8a       	ld.ub	r10,r9[0x0]
80007c96:	58 0a       	cp.w	r10,0
80007c98:	5f 0a       	sreq	r10
80007c9a:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007c9c:	e3 b8 00 00 	mtsr	0x0,r8
		}
		cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[port][udi_cdc_tx_buf_sel[port]]!=UDI_CDC_TX_BUFFERS);
80007ca0:	48 68       	lddpc	r8,80007cb8 <udi_cdc_multi_is_tx_ready+0x58>
80007ca2:	11 89       	ld.ub	r9,r8[0x0]
80007ca4:	48 68       	lddpc	r8,80007cbc <udi_cdc_multi_is_tx_ready+0x5c>
80007ca6:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80007caa:	e0 68 01 40 	mov	r8,320
80007cae:	f0 09 19 00 	cp.h	r9,r8
80007cb2:	5f 1c       	srne	r12
}
80007cb4:	5e fc       	retal	r12
80007cb6:	00 00       	add	r0,r0
80007cb8:	00 00       	add	r0,r0
80007cba:	08 f4       	st.b	--r4,r4
80007cbc:	00 00       	add	r0,r0
80007cbe:	08 f8       	st.b	--r4,r8
80007cc0:	00 00       	add	r0,r0
80007cc2:	0e 20       	rsub	r0,r7
80007cc4:	00 00       	add	r0,r0
80007cc6:	0b 8c       	ld.ub	r12,r5[0x0]

80007cc8 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
80007cc8:	eb cd 40 fe 	pushm	r1-r7,lr
80007ccc:	16 96       	mov	r6,r11

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80007cce:	49 88       	lddpc	r8,80007d2c <udi_cdc_multi_putc+0x64>
80007cd0:	11 e9       	ld.ub	r9,r8[0x6]
80007cd2:	30 98       	mov	r8,9
80007cd4:	f0 09 18 00 	cp.b	r9,r8
80007cd8:	5f 03       	sreq	r3

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80007cda:	30 07       	mov	r7,0
		if (!udi_cdc_data_running) {
80007cdc:	49 55       	lddpc	r5,80007d30 <udi_cdc_multi_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80007cde:	49 62       	lddpc	r2,80007d34 <udi_cdc_multi_putc+0x6c>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
80007ce0:	49 64       	lddpc	r4,80007d38 <udi_cdc_multi_putc+0x70>
80007ce2:	49 71       	lddpc	r1,80007d3c <udi_cdc_multi_putc+0x74>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80007ce4:	0e 9c       	mov	r12,r7
80007ce6:	f0 1f 00 17 	mcall	80007d40 <udi_cdc_multi_putc+0x78>
80007cea:	c0 51       	brne	80007cf4 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
80007cec:	0b 88       	ld.ub	r8,r5[0x0]
80007cee:	58 08       	cp.w	r8,0
80007cf0:	cf a1       	brne	80007ce4 <udi_cdc_multi_putc+0x1c>
80007cf2:	c1 b8       	rjmp	80007d28 <udi_cdc_multi_putc+0x60>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007cf4:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007cf8:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80007cfa:	05 88       	ld.ub	r8,r2[0x0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
80007cfc:	e8 08 04 19 	ld.sh	r9,r4[r8<<0x1]
80007d00:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80007d04:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80007d08:	a7 6b       	lsl	r11,0x6
80007d0a:	18 0b       	add	r11,r12
80007d0c:	e2 0b 0b 06 	st.b	r1[r11],r6
80007d10:	2f f9       	sub	r9,-1
80007d12:	e8 08 0a 19 	st.h	r4[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007d16:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80007d1a:	58 03       	cp.w	r3,0
80007d1c:	c0 31       	brne	80007d22 <udi_cdc_multi_putc+0x5a>
80007d1e:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80007d22:	a9 46       	asr	r6,0x8
80007d24:	0e 93       	mov	r3,r7
80007d26:	cd fb       	rjmp	80007ce4 <udi_cdc_multi_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80007d28:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80007d2c:	00 00       	add	r0,r0
80007d2e:	08 ec       	st.h	--r4,r12
80007d30:	00 00       	add	r0,r0
80007d32:	0b 86       	ld.ub	r6,r5[0x0]
80007d34:	00 00       	add	r0,r0
80007d36:	08 f4       	st.b	--r4,r4
80007d38:	00 00       	add	r0,r0
80007d3a:	08 f8       	st.b	--r4,r8
80007d3c:	00 00       	add	r0,r0
80007d3e:	08 fc       	st.b	--r4,r12
80007d40:	80 00       	ld.sh	r0,r0[0x0]
80007d42:	7c 60       	ld.w	r0,lr[0x18]

80007d44 <udi_cdc_putc>:
	}
	return true;
}

int udi_cdc_putc(int value)
{
80007d44:	d4 01       	pushm	lr
	return udi_cdc_multi_putc(0, value);
80007d46:	18 9b       	mov	r11,r12
80007d48:	30 0c       	mov	r12,0
80007d4a:	f0 1f 00 02 	mcall	80007d50 <udi_cdc_putc+0xc>
}
80007d4e:	d8 02       	popm	pc
80007d50:	80 00       	ld.sh	r0,r0[0x0]
80007d52:	7c c8       	ld.w	r8,lr[0x30]

80007d54 <udi_cdc_multi_is_rx_ready>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007d54:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007d58:	d3 03       	ssrf	0x10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80007d5a:	48 98       	lddpc	r8,80007d7c <udi_cdc_multi_is_rx_ready+0x28>
80007d5c:	90 08       	ld.sh	r8,r8[0x0]
	ready = pos < udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]];
80007d5e:	48 99       	lddpc	r9,80007d80 <udi_cdc_multi_is_rx_ready+0x2c>
80007d60:	13 8b       	ld.ub	r11,r9[0x0]
80007d62:	30 1c       	mov	r12,1
80007d64:	48 89       	lddpc	r9,80007d84 <udi_cdc_multi_is_rx_ready+0x30>
80007d66:	f2 0b 04 19 	ld.sh	r9,r9[r11<<0x1]
80007d6a:	f0 09 19 00 	cp.h	r9,r8
80007d6e:	f9 bc 08 00 	movls	r12,0
80007d72:	5c 5c       	castu.b	r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007d74:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
	return ready;
}
80007d78:	5e fc       	retal	r12
80007d7a:	00 00       	add	r0,r0
80007d7c:	00 00       	add	r0,r0
80007d7e:	0b 82       	ld.ub	r2,r5[0x0]
80007d80:	00 00       	add	r0,r0
80007d82:	0b 88       	ld.ub	r8,r5[0x0]
80007d84:	00 00       	add	r0,r0
80007d86:	0b 7c       	ld.ub	r12,--r5

80007d88 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
80007d88:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007d8c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007d90:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
80007d92:	49 98       	lddpc	r8,80007df4 <udi_cdc_rx_start+0x6c>
80007d94:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing[port] ||
80007d96:	49 98       	lddpc	r8,80007df8 <udi_cdc_rx_start+0x70>
80007d98:	11 88       	ld.ub	r8,r8[0x0]
80007d9a:	58 08       	cp.w	r8,0
80007d9c:	c0 a1       	brne	80007db0 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80007d9e:	49 88       	lddpc	r8,80007dfc <udi_cdc_rx_start+0x74>
80007da0:	90 08       	ld.sh	r8,r8[0x0]
80007da2:	49 8a       	lddpc	r10,80007e00 <udi_cdc_rx_start+0x78>
80007da4:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80007da8:	f0 0a 19 00 	cp.h	r10,r8
80007dac:	e0 88 00 06 	brls	80007db8 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007db0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80007db4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
80007db8:	30 0a       	mov	r10,0
80007dba:	49 18       	lddpc	r8,80007dfc <udi_cdc_rx_start+0x74>
80007dbc:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80007dbe:	58 07       	cp.w	r7,0
80007dc0:	5f 0a       	sreq	r10
80007dc2:	48 d8       	lddpc	r8,80007df4 <udi_cdc_rx_start+0x6c>
80007dc4:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
80007dc6:	30 1a       	mov	r10,1
80007dc8:	48 c8       	lddpc	r8,80007df8 <udi_cdc_rx_start+0x70>
80007dca:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007dcc:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
80007dd0:	30 0c       	mov	r12,0
80007dd2:	f0 1f 00 0d 	mcall	80007e04 <udi_cdc_rx_start+0x7c>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
80007dd6:	ee 07 00 27 	add	r7,r7,r7<<0x2
80007dda:	a7 67       	lsl	r7,0x6
80007ddc:	48 b8       	lddpc	r8,80007e08 <udi_cdc_rx_start+0x80>
80007dde:	e0 69 01 40 	mov	r9,320
80007de2:	48 ba       	lddpc	r10,80007e0c <udi_cdc_rx_start+0x84>
80007de4:	0e 0a       	add	r10,r7
80007de6:	30 1b       	mov	r11,1
80007de8:	30 2c       	mov	r12,2
80007dea:	f0 1f 00 0a 	mcall	80007e10 <udi_cdc_rx_start+0x88>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
80007dee:	e3 cd 80 80 	ldm	sp++,r7,pc
80007df2:	00 00       	add	r0,r0
80007df4:	00 00       	add	r0,r0
80007df6:	0b 88       	ld.ub	r8,r5[0x0]
80007df8:	00 00       	add	r0,r0
80007dfa:	0e 1c       	sub	r12,r7
80007dfc:	00 00       	add	r0,r0
80007dfe:	0b 82       	ld.ub	r2,r5[0x0]
80007e00:	00 00       	add	r0,r0
80007e02:	0b 7c       	ld.ub	r12,--r5
80007e04:	80 00       	ld.sh	r0,r0[0x0]
80007e06:	7d 54       	ld.w	r4,lr[0x54]
80007e08:	80 00       	ld.sh	r0,r0[0x0]
80007e0a:	7e ac       	ld.w	r12,pc[0x28]
80007e0c:	00 00       	add	r0,r0
80007e0e:	0b 9c       	ld.ub	r12,r5[0x1]
80007e10:	80 00       	ld.sh	r0,r0[0x0]
80007e12:	46 24       	lddsp	r4,sp[0x188]

80007e14 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
80007e14:	d4 31       	pushm	r0-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80007e16:	49 b8       	lddpc	r8,80007e80 <udi_cdc_multi_getc+0x6c>
80007e18:	11 e9       	ld.ub	r9,r8[0x6]
80007e1a:	30 98       	mov	r8,9
80007e1c:	f0 09 18 00 	cp.b	r9,r8
80007e20:	5f 02       	sreq	r2
80007e22:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80007e24:	49 87       	lddpc	r7,80007e84 <udi_cdc_multi_getc+0x70>
	buf_sel = udi_cdc_rx_buf_sel[port];
80007e26:	49 95       	lddpc	r5,80007e88 <udi_cdc_multi_getc+0x74>
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80007e28:	49 96       	lddpc	r6,80007e8c <udi_cdc_multi_getc+0x78>
		if (!udi_cdc_data_running) {
80007e2a:	49 a4       	lddpc	r4,80007e90 <udi_cdc_multi_getc+0x7c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80007e2c:	49 a0       	lddpc	r0,80007e94 <udi_cdc_multi_getc+0x80>
	udi_cdc_rx_pos[port] = pos+1;

	udi_cdc_rx_start(port);
80007e2e:	06 91       	mov	r1,r3

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007e30:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007e34:	d3 03       	ssrf	0x10
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80007e36:	8e 08       	ld.sh	r8,r7[0x0]
	buf_sel = udi_cdc_rx_buf_sel[port];
80007e38:	0b 89       	ld.ub	r9,r5[0x0]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007e3a:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80007e3e:	ec 09 04 1a 	ld.sh	r10,r6[r9<<0x1]
80007e42:	f0 0a 19 00 	cp.h	r10,r8
80007e46:	e0 8b 00 06 	brhi	80007e52 <udi_cdc_multi_getc+0x3e>
		if (!udi_cdc_data_running) {
80007e4a:	09 88       	ld.ub	r8,r4[0x0]
80007e4c:	58 08       	cp.w	r8,0
80007e4e:	cf 11       	brne	80007e30 <udi_cdc_multi_getc+0x1c>
80007e50:	c1 48       	rjmp	80007e78 <udi_cdc_multi_getc+0x64>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80007e52:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007e56:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007e5a:	a7 69       	lsl	r9,0x6
80007e5c:	14 09       	add	r9,r10
80007e5e:	e0 09 07 09 	ld.ub	r9,r0[r9]
80007e62:	12 43       	or	r3,r9
	udi_cdc_rx_pos[port] = pos+1;
80007e64:	2f f8       	sub	r8,-1
80007e66:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start(port);
80007e68:	02 9c       	mov	r12,r1
80007e6a:	f0 1f 00 0c 	mcall	80007e98 <udi_cdc_multi_getc+0x84>

	if (b_databit_9) {
80007e6e:	58 02       	cp.w	r2,0
80007e70:	c0 50       	breq	80007e7a <udi_cdc_multi_getc+0x66>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80007e72:	a9 63       	lsl	r3,0x8
80007e74:	02 92       	mov	r2,r1
80007e76:	cd db       	rjmp	80007e30 <udi_cdc_multi_getc+0x1c>
		goto udi_cdc_getc_process_one_byte;
80007e78:	30 03       	mov	r3,0
	}
	return rx_data;
}
80007e7a:	06 9c       	mov	r12,r3
80007e7c:	d8 32       	popm	r0-r7,pc
80007e7e:	00 00       	add	r0,r0
80007e80:	00 00       	add	r0,r0
80007e82:	08 ec       	st.h	--r4,r12
80007e84:	00 00       	add	r0,r0
80007e86:	0b 82       	ld.ub	r2,r5[0x0]
80007e88:	00 00       	add	r0,r0
80007e8a:	0b 88       	ld.ub	r8,r5[0x0]
80007e8c:	00 00       	add	r0,r0
80007e8e:	0b 7c       	ld.ub	r12,--r5
80007e90:	00 00       	add	r0,r0
80007e92:	0b 86       	ld.ub	r6,r5[0x0]
80007e94:	00 00       	add	r0,r0
80007e96:	0b 9c       	ld.ub	r12,r5[0x1]
80007e98:	80 00       	ld.sh	r0,r0[0x0]
80007e9a:	7d 88       	ld.w	r8,lr[0x60]

80007e9c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
80007e9c:	d4 01       	pushm	lr
	return udi_cdc_multi_getc(0);
80007e9e:	30 0c       	mov	r12,0
80007ea0:	f0 1f 00 02 	mcall	80007ea8 <udi_cdc_getc+0xc>
}
80007ea4:	d8 02       	popm	pc
80007ea6:	00 00       	add	r0,r0
80007ea8:	80 00       	ld.sh	r0,r0[0x0]
80007eaa:	7e 14       	ld.w	r4,pc[0x4]

80007eac <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80007eac:	d4 01       	pushm	lr
80007eae:	14 9e       	mov	lr,r10
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80007eb0:	58 0c       	cp.w	r12,0
80007eb2:	c2 01       	brne	80007ef2 <udi_cdc_data_received+0x46>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80007eb4:	49 08       	lddpc	r8,80007ef4 <udi_cdc_data_received+0x48>
80007eb6:	11 88       	ld.ub	r8,r8[0x0]
80007eb8:	58 08       	cp.w	r8,0
80007eba:	5f 08       	sreq	r8
	if (!n) {
80007ebc:	58 0b       	cp.w	r11,0
80007ebe:	c1 11       	brne	80007ee0 <udi_cdc_data_received+0x34>
		udd_ep_run( ep,
80007ec0:	f0 0a 15 02 	lsl	r10,r8,0x2
80007ec4:	10 0a       	add	r10,r8
80007ec6:	a7 6a       	lsl	r10,0x6
80007ec8:	fe c8 00 1c 	sub	r8,pc,28
80007ecc:	e0 69 01 40 	mov	r9,320
80007ed0:	48 ab       	lddpc	r11,80007ef8 <udi_cdc_data_received+0x4c>
80007ed2:	f6 0a 00 0a 	add	r10,r11,r10
80007ed6:	30 1b       	mov	r11,1
80007ed8:	1c 9c       	mov	r12,lr
80007eda:	f0 1f 00 09 	mcall	80007efc <udi_cdc_data_received+0x50>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
80007ede:	d8 02       	popm	pc
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
80007ee0:	48 89       	lddpc	r9,80007f00 <udi_cdc_data_received+0x54>
80007ee2:	f2 08 0a 1b 	st.h	r9[r8<<0x1],r11
	udi_cdc_rx_trans_ongoing[port] = false;
80007ee6:	30 09       	mov	r9,0
80007ee8:	48 78       	lddpc	r8,80007f04 <udi_cdc_data_received+0x58>
80007eea:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start(port);
80007eec:	30 0c       	mov	r12,0
80007eee:	f0 1f 00 07 	mcall	80007f08 <udi_cdc_data_received+0x5c>
80007ef2:	d8 02       	popm	pc
80007ef4:	00 00       	add	r0,r0
80007ef6:	0b 88       	ld.ub	r8,r5[0x0]
80007ef8:	00 00       	add	r0,r0
80007efa:	0b 9c       	ld.ub	r12,r5[0x1]
80007efc:	80 00       	ld.sh	r0,r0[0x0]
80007efe:	46 24       	lddsp	r4,sp[0x188]
80007f00:	00 00       	add	r0,r0
80007f02:	0b 7c       	ld.ub	r12,--r5
80007f04:	00 00       	add	r0,r0
80007f06:	0e 1c       	sub	r12,r7
80007f08:	80 00       	ld.sh	r0,r0[0x0]
80007f0a:	7d 88       	ld.w	r8,lr[0x60]

80007f0c <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
80007f0c:	eb cd 40 e0 	pushm	r5-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80007f10:	4a c8       	lddpc	r8,80007fc0 <udi_cdc_tx_send+0xb4>
80007f12:	11 88       	ld.ub	r8,r8[0x0]
80007f14:	58 08       	cp.w	r8,0
80007f16:	c5 21       	brne	80007fba <udi_cdc_tx_send+0xae>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80007f18:	f0 1f 00 2b 	mcall	80007fc4 <udi_cdc_tx_send+0xb8>
80007f1c:	c0 a0       	breq	80007f30 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
80007f1e:	4a b8       	lddpc	r8,80007fc8 <udi_cdc_tx_send+0xbc>
80007f20:	90 07       	ld.sh	r7,r8[0x0]
80007f22:	f0 1f 00 2b 	mcall	80007fcc <udi_cdc_tx_send+0xc0>
80007f26:	f8 07 19 00 	cp.h	r7,r12
80007f2a:	c0 a1       	brne	80007f3e <udi_cdc_tx_send+0x32>
80007f2c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
80007f30:	4a 68       	lddpc	r8,80007fc8 <udi_cdc_tx_send+0xbc>
80007f32:	90 07       	ld.sh	r7,r8[0x0]
80007f34:	f0 1f 00 27 	mcall	80007fd0 <udi_cdc_tx_send+0xc4>
80007f38:	f8 07 19 00 	cp.h	r7,r12
80007f3c:	c3 f0       	breq	80007fba <udi_cdc_tx_send+0xae>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007f3e:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80007f42:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
80007f44:	4a 49       	lddpc	r9,80007fd4 <udi_cdc_tx_send+0xc8>
80007f46:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
80007f48:	4a 49       	lddpc	r9,80007fd8 <udi_cdc_tx_send+0xcc>
80007f4a:	13 89       	ld.ub	r9,r9[0x0]
80007f4c:	58 09       	cp.w	r9,0
80007f4e:	c0 61       	brne	80007f5a <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80007f50:	58 07       	cp.w	r7,0
80007f52:	5f 0a       	sreq	r10
80007f54:	4a 09       	lddpc	r9,80007fd4 <udi_cdc_tx_send+0xc8>
80007f56:	b2 8a       	st.b	r9[0x0],r10
80007f58:	c0 38       	rjmp	80007f5e <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80007f5a:	58 07       	cp.w	r7,0
80007f5c:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing[port] = true;
80007f5e:	30 1a       	mov	r10,1
80007f60:	49 89       	lddpc	r9,80007fc0 <udi_cdc_tx_send+0xb4>
80007f62:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80007f64:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80007f68:	0e 95       	mov	r5,r7
80007f6a:	49 d8       	lddpc	r8,80007fdc <udi_cdc_tx_send+0xd0>
80007f6c:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80007f70:	e0 68 01 40 	mov	r8,320
80007f74:	f0 09 19 00 	cp.h	r9,r8
80007f78:	5f 16       	srne	r6
	if (b_short_packet) {
80007f7a:	58 06       	cp.w	r6,0
80007f7c:	c0 e0       	breq	80007f98 <udi_cdc_tx_send+0x8c>
		if (udd_is_high_speed()) {
80007f7e:	f0 1f 00 12 	mcall	80007fc4 <udi_cdc_tx_send+0xb8>
80007f82:	c0 60       	breq	80007f8e <udi_cdc_tx_send+0x82>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80007f84:	f0 1f 00 12 	mcall	80007fcc <udi_cdc_tx_send+0xc0>
80007f88:	49 08       	lddpc	r8,80007fc8 <udi_cdc_tx_send+0xbc>
80007f8a:	b0 0c       	st.h	r8[0x0],r12
80007f8c:	c0 98       	rjmp	80007f9e <udi_cdc_tx_send+0x92>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80007f8e:	f0 1f 00 11 	mcall	80007fd0 <udi_cdc_tx_send+0xc4>
80007f92:	48 e8       	lddpc	r8,80007fc8 <udi_cdc_tx_send+0xbc>
80007f94:	b0 0c       	st.h	r8[0x0],r12
80007f96:	c0 48       	rjmp	80007f9e <udi_cdc_tx_send+0x92>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
80007f98:	30 09       	mov	r9,0
80007f9a:	48 c8       	lddpc	r8,80007fc8 <udi_cdc_tx_send+0xbc>
80007f9c:	b0 09       	st.h	r8[0x0],r9
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80007f9e:	ee 07 00 27 	add	r7,r7,r7<<0x2
80007fa2:	a7 67       	lsl	r7,0x6
80007fa4:	48 f8       	lddpc	r8,80007fe0 <udi_cdc_tx_send+0xd4>
80007fa6:	48 e9       	lddpc	r9,80007fdc <udi_cdc_tx_send+0xd0>
80007fa8:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80007fac:	48 ea       	lddpc	r10,80007fe4 <udi_cdc_tx_send+0xd8>
80007fae:	0e 0a       	add	r10,r7
80007fb0:	0c 9b       	mov	r11,r6
80007fb2:	e0 6c 00 81 	mov	r12,129
80007fb6:	f0 1f 00 0d 	mcall	80007fe8 <udi_cdc_tx_send+0xdc>
80007fba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007fbe:	00 00       	add	r0,r0
80007fc0:	00 00       	add	r0,r0
80007fc2:	0b 8c       	ld.ub	r12,r5[0x0]
80007fc4:	80 00       	ld.sh	r0,r0[0x0]
80007fc6:	3e 5e       	mov	lr,-27
80007fc8:	00 00       	add	r0,r0
80007fca:	0b 84       	ld.ub	r4,r5[0x0]
80007fcc:	80 00       	ld.sh	r0,r0[0x0]
80007fce:	3e 9a       	mov	r10,-23
80007fd0:	80 00       	ld.sh	r0,r0[0x0]
80007fd2:	3e 8e       	mov	lr,-24
80007fd4:	00 00       	add	r0,r0
80007fd6:	08 f4       	st.b	--r4,r4
80007fd8:	00 00       	add	r0,r0
80007fda:	0e 20       	rsub	r0,r7
80007fdc:	00 00       	add	r0,r0
80007fde:	08 f8       	st.b	--r4,r8
80007fe0:	80 00       	ld.sh	r0,r0[0x0]
80007fe2:	7f fc       	ld.w	r12,pc[0x7c]
80007fe4:	00 00       	add	r0,r0
80007fe6:	08 fc       	st.b	--r4,r12
80007fe8:	80 00       	ld.sh	r0,r0[0x0]
80007fea:	46 24       	lddsp	r4,sp[0x188]

80007fec <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
80007fec:	d4 01       	pushm	lr
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80007fee:	30 0c       	mov	r12,0
80007ff0:	f0 1f 00 02 	mcall	80007ff8 <udi_cdc_data_sof_notify+0xc>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80007ff4:	d8 02       	popm	pc
80007ff6:	00 00       	add	r0,r0
80007ff8:	80 00       	ld.sh	r0,r0[0x0]
80007ffa:	7f 0c       	ld.w	r12,pc[0x40]

80007ffc <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80007ffc:	d4 01       	pushm	lr
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80007ffe:	58 0c       	cp.w	r12,0
80008000:	c1 21       	brne	80008024 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
80008002:	48 a8       	lddpc	r8,80008028 <udi_cdc_data_sent+0x2c>
80008004:	11 88       	ld.ub	r8,r8[0x0]
80008006:	58 08       	cp.w	r8,0
80008008:	f9 b9 01 00 	movne	r9,0
8000800c:	f9 b9 00 02 	moveq	r9,2
80008010:	30 08       	mov	r8,0
80008012:	48 7a       	lddpc	r10,8000802c <udi_cdc_data_sent+0x30>
80008014:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80008018:	48 69       	lddpc	r9,80008030 <udi_cdc_data_sent+0x34>
8000801a:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing[port] = false;
8000801c:	48 69       	lddpc	r9,80008034 <udi_cdc_data_sent+0x38>
8000801e:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send(port);
80008020:	f0 1f 00 06 	mcall	80008038 <udi_cdc_data_sent+0x3c>
80008024:	d8 02       	popm	pc
80008026:	00 00       	add	r0,r0
80008028:	00 00       	add	r0,r0
8000802a:	08 f4       	st.b	--r4,r4
8000802c:	00 00       	add	r0,r0
8000802e:	08 f8       	st.b	--r4,r8
80008030:	00 00       	add	r0,r0
80008032:	0e 20       	rsub	r0,r7
80008034:	00 00       	add	r0,r0
80008036:	0b 8c       	ld.ub	r12,r5[0x0]
80008038:	80 00       	ld.sh	r0,r0[0x0]
8000803a:	7f 0c       	ld.w	r12,pc[0x40]

8000803c <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
8000803c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
80008040:	30 07       	mov	r7,0
80008042:	49 88       	lddpc	r8,800080a0 <udi_cdc_data_enable+0x64>
80008044:	b0 87       	st.b	r8[0x0],r7
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80008046:	49 88       	lddpc	r8,800080a4 <udi_cdc_data_enable+0x68>
80008048:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_both_buf_to_send[port] = false;
8000804a:	49 88       	lddpc	r8,800080a8 <udi_cdc_data_enable+0x6c>
8000804c:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_sel[port] = 0;
8000804e:	49 88       	lddpc	r8,800080ac <udi_cdc_data_enable+0x70>
80008050:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_nb[port][0] = 0;
80008052:	49 88       	lddpc	r8,800080b0 <udi_cdc_data_enable+0x74>
80008054:	30 06       	mov	r6,0
80008056:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_buf_nb[port][1] = 0;
80008058:	b0 16       	st.h	r8[0x2],r6
	udi_cdc_tx_sof_num[port] = 0;
8000805a:	49 78       	lddpc	r8,800080b4 <udi_cdc_data_enable+0x78>
8000805c:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_send(port);
8000805e:	30 0c       	mov	r12,0
80008060:	f0 1f 00 16 	mcall	800080b8 <udi_cdc_data_enable+0x7c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80008064:	49 68       	lddpc	r8,800080bc <udi_cdc_data_enable+0x80>
80008066:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_sel[port] = 0;
80008068:	49 68       	lddpc	r8,800080c0 <udi_cdc_data_enable+0x84>
8000806a:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_nb[port][0] = 0;
8000806c:	49 68       	lddpc	r8,800080c4 <udi_cdc_data_enable+0x88>
8000806e:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_rx_pos[port] = 0;
80008070:	49 68       	lddpc	r8,800080c8 <udi_cdc_data_enable+0x8c>
80008072:	b0 06       	st.h	r8[0x0],r6
	if (!udi_cdc_rx_start(port)) {
80008074:	30 0c       	mov	r12,0
80008076:	f0 1f 00 16 	mcall	800080cc <udi_cdc_data_enable+0x90>
8000807a:	c1 00       	breq	8000809a <udi_cdc_data_enable+0x5e>
		return false;
	}
	udi_cdc_nb_data_enabled++;
8000807c:	48 98       	lddpc	r8,800080a0 <udi_cdc_data_enable+0x64>
8000807e:	11 89       	ld.ub	r9,r8[0x0]
80008080:	2f f9       	sub	r9,-1
80008082:	b0 89       	st.b	r8[0x0],r9
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80008084:	11 89       	ld.ub	r9,r8[0x0]
80008086:	30 18       	mov	r8,1
80008088:	f0 09 18 00 	cp.b	r9,r8
8000808c:	c0 30       	breq	80008092 <udi_cdc_data_enable+0x56>
8000808e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
		udi_cdc_data_running = true;
80008092:	30 19       	mov	r9,1
80008094:	48 f8       	lddpc	r8,800080d0 <udi_cdc_data_enable+0x94>
80008096:	b0 89       	st.b	r8[0x0],r9
80008098:	30 1c       	mov	r12,1
	}
	return true;
}
8000809a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000809e:	00 00       	add	r0,r0
800080a0:	00 00       	add	r0,r0
800080a2:	08 f3       	st.b	--r4,r3
800080a4:	00 00       	add	r0,r0
800080a6:	0b 8c       	ld.ub	r12,r5[0x0]
800080a8:	00 00       	add	r0,r0
800080aa:	0e 20       	rsub	r0,r7
800080ac:	00 00       	add	r0,r0
800080ae:	08 f4       	st.b	--r4,r4
800080b0:	00 00       	add	r0,r0
800080b2:	08 f8       	st.b	--r4,r8
800080b4:	00 00       	add	r0,r0
800080b6:	0b 84       	ld.ub	r4,r5[0x0]
800080b8:	80 00       	ld.sh	r0,r0[0x0]
800080ba:	7f 0c       	ld.w	r12,pc[0x40]
800080bc:	00 00       	add	r0,r0
800080be:	0e 1c       	sub	r12,r7
800080c0:	00 00       	add	r0,r0
800080c2:	0b 88       	ld.ub	r8,r5[0x0]
800080c4:	00 00       	add	r0,r0
800080c6:	0b 7c       	ld.ub	r12,--r5
800080c8:	00 00       	add	r0,r0
800080ca:	0b 82       	ld.ub	r2,r5[0x0]
800080cc:	80 00       	ld.sh	r0,r0[0x0]
800080ce:	7d 88       	ld.w	r8,lr[0x60]
800080d0:	00 00       	add	r0,r0
800080d2:	0b 86       	ld.ub	r6,r5[0x0]

800080d4 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
800080d4:	d4 01       	pushm	lr
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
800080d6:	48 68       	lddpc	r8,800080ec <udi_cdc_data_disable+0x18>
800080d8:	11 89       	ld.ub	r9,r8[0x0]
800080da:	20 19       	sub	r9,1
800080dc:	b0 89       	st.b	r8[0x0],r9
	port = udi_cdc_nb_data_enabled;
800080de:	11 88       	ld.ub	r8,r8[0x0]
	UDI_CDC_DISABLE_EXT(port);
800080e0:	f0 1f 00 04 	mcall	800080f0 <udi_cdc_data_disable+0x1c>
	udi_cdc_data_running = false;
800080e4:	30 09       	mov	r9,0
800080e6:	48 48       	lddpc	r8,800080f4 <udi_cdc_data_disable+0x20>
800080e8:	b0 89       	st.b	r8[0x0],r9
}
800080ea:	d8 02       	popm	pc
800080ec:	00 00       	add	r0,r0
800080ee:	08 f3       	st.b	--r4,r3
800080f0:	80 00       	ld.sh	r0,r0[0x0]
800080f2:	88 dc       	ld.uh	r12,r4[0xa]
800080f4:	00 00       	add	r0,r0
800080f6:	0b 86       	ld.ub	r6,r5[0x0]

800080f8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
800080f8:	d4 01       	pushm	lr
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
800080fa:	30 0a       	mov	r10,0
800080fc:	49 28       	lddpc	r8,80008144 <udi_cdc_comm_enable+0x4c>
800080fe:	b0 8a       	st.b	r8[0x0],r10
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
80008100:	30 09       	mov	r9,0
80008102:	49 28       	lddpc	r8,80008148 <udi_cdc_comm_enable+0x50>
80008104:	b0 09       	st.h	r8[0x0],r9

	uid_cdc_state_msg[port].header.bmRequestType =
80008106:	49 28       	lddpc	r8,8000814c <udi_cdc_comm_enable+0x54>
80008108:	3a 1b       	mov	r11,-95
8000810a:	b0 8b       	st.b	r8[0x0],r11
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
8000810c:	32 0b       	mov	r11,32
8000810e:	b0 9b       	st.b	r8[0x1],r11
	uid_cdc_state_msg[port].header.wValue = LE16(0);
80008110:	b0 19       	st.h	r8[0x2],r9
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80008112:	b0 29       	st.h	r8[0x4],r9
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80008114:	e0 6b 02 00 	mov	r11,512
80008118:	b0 3b       	st.h	r8[0x6],r11
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
8000811a:	b0 49       	st.h	r8[0x8],r9

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000811c:	48 d8       	lddpc	r8,80008150 <udi_cdc_comm_enable+0x58>
8000811e:	b0 89       	st.b	r8[0x0],r9
80008120:	3c 29       	mov	r9,-62
80008122:	b0 99       	st.b	r8[0x1],r9
80008124:	30 19       	mov	r9,1
80008126:	b0 a9       	st.b	r8[0x2],r9
80008128:	b0 ba       	st.b	r8[0x3],r10
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
8000812a:	b0 ca       	st.b	r8[0x4],r10
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
8000812c:	b0 da       	st.b	r8[0x5],r10
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
8000812e:	30 89       	mov	r9,8
80008130:	b0 e9       	st.b	r8[0x6],r9
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
80008132:	f0 1f 00 09 	mcall	80008154 <udi_cdc_comm_enable+0x5c>
80008136:	c0 60       	breq	80008142 <udi_cdc_comm_enable+0x4a>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
80008138:	48 38       	lddpc	r8,80008144 <udi_cdc_comm_enable+0x4c>
8000813a:	11 89       	ld.ub	r9,r8[0x0]
8000813c:	2f f9       	sub	r9,-1
8000813e:	b0 89       	st.b	r8[0x0],r9
80008140:	30 1c       	mov	r12,1
	return true;
}
80008142:	d8 02       	popm	pc
80008144:	00 00       	add	r0,r0
80008146:	0b 80       	ld.ub	r0,r5[0x0]
80008148:	00 00       	add	r0,r0
8000814a:	0e 24       	rsub	r4,r7
8000814c:	00 00       	add	r0,r0
8000814e:	0b 90       	ld.ub	r0,r5[0x1]
80008150:	00 00       	add	r0,r0
80008152:	08 ec       	st.h	--r4,r12
80008154:	80 00       	ld.sh	r0,r0[0x0]
80008156:	88 d0       	ld.uh	r0,r4[0xa]

80008158 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80008158:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
8000815c:	49 18       	lddpc	r8,800081a0 <udc_sof_notify+0x48>
8000815e:	11 89       	ld.ub	r9,r8[0x0]
80008160:	30 08       	mov	r8,0
80008162:	f0 09 18 00 	cp.b	r9,r8
80008166:	c1 b0       	breq	8000819c <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008168:	48 f8       	lddpc	r8,800081a4 <udc_sof_notify+0x4c>
8000816a:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000816c:	70 09       	ld.w	r9,r8[0x0]
8000816e:	13 ca       	ld.ub	r10,r9[0x4]
80008170:	30 09       	mov	r9,0
80008172:	f2 0a 18 00 	cp.b	r10,r9
80008176:	c1 30       	breq	8000819c <udc_sof_notify+0x44>
80008178:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000817a:	48 b6       	lddpc	r6,800081a4 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000817c:	70 18       	ld.w	r8,r8[0x4]
8000817e:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80008182:	70 48       	ld.w	r8,r8[0x10]
80008184:	58 08       	cp.w	r8,0
80008186:	c0 20       	breq	8000818a <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80008188:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000818a:	2f f7       	sub	r7,-1
8000818c:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000818e:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80008190:	70 09       	ld.w	r9,r8[0x0]
80008192:	13 c9       	ld.ub	r9,r9[0x4]
80008194:	ee 09 18 00 	cp.b	r9,r7
80008198:	fe 9b ff f2 	brhi	8000817c <udc_sof_notify+0x24>
8000819c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800081a0:	00 00       	add	r0,r0
800081a2:	0e 2e       	rsub	lr,r7
800081a4:	00 00       	add	r0,r0
800081a6:	0e 28       	rsub	r8,r7

800081a8 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800081a8:	48 78       	lddpc	r8,800081c4 <udc_get_eof_conf+0x1c>
800081aa:	70 08       	ld.w	r8,r8[0x0]
800081ac:	70 08       	ld.w	r8,r8[0x0]
800081ae:	11 aa       	ld.ub	r10,r8[0x2]
800081b0:	11 b9       	ld.ub	r9,r8[0x3]
800081b2:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800081b6:	5c c9       	swap.bh	r9
800081b8:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
800081bc:	f0 0c 00 0c 	add	r12,r8,r12
800081c0:	5e fc       	retal	r12
800081c2:	00 00       	add	r0,r0
800081c4:	00 00       	add	r0,r0
800081c6:	0e 28       	rsub	r8,r7

800081c8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
800081c8:	eb cd 40 e0 	pushm	r5-r7,lr
800081cc:	18 97       	mov	r7,r12
800081ce:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
800081d0:	49 b8       	lddpc	r8,8000823c <udc_update_iface_desc+0x74>
800081d2:	11 89       	ld.ub	r9,r8[0x0]
800081d4:	30 08       	mov	r8,0
800081d6:	f0 09 18 00 	cp.b	r9,r8
800081da:	c2 f0       	breq	80008238 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800081dc:	49 98       	lddpc	r8,80008240 <udc_update_iface_desc+0x78>
800081de:	70 08       	ld.w	r8,r8[0x0]
800081e0:	70 08       	ld.w	r8,r8[0x0]
800081e2:	11 c9       	ld.ub	r9,r8[0x4]
800081e4:	18 9e       	mov	lr,r12
800081e6:	f8 09 18 00 	cp.b	r9,r12
800081ea:	e0 88 00 27 	brls	80008238 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800081ee:	49 65       	lddpc	r5,80008244 <udc_update_iface_desc+0x7c>
800081f0:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
800081f2:	f0 1f 00 16 	mcall	80008248 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
800081f6:	6a 08       	ld.w	r8,r5[0x0]
800081f8:	10 3c       	cp.w	r12,r8
800081fa:	e0 88 00 1f 	brls	80008238 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800081fe:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008200:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80008202:	11 9a       	ld.ub	r10,r8[0x1]
80008204:	f6 0a 18 00 	cp.b	r10,r11
80008208:	c0 a1       	brne	8000821c <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000820a:	11 aa       	ld.ub	r10,r8[0x2]
8000820c:	0e 9e       	mov	lr,r7
8000820e:	ee 0a 18 00 	cp.b	r10,r7
80008212:	c0 51       	brne	8000821c <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80008214:	11 ba       	ld.ub	r10,r8[0x3]
80008216:	ec 0a 18 00 	cp.b	r10,r6
8000821a:	c0 b0       	breq	80008230 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000821c:	13 88       	ld.ub	r8,r9[0x0]
8000821e:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008222:	10 3c       	cp.w	r12,r8
80008224:	fe 9b ff ee 	brhi	80008200 <udc_update_iface_desc+0x38>
80008228:	48 79       	lddpc	r9,80008244 <udc_update_iface_desc+0x7c>
8000822a:	93 08       	st.w	r9[0x0],r8
8000822c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80008230:	48 59       	lddpc	r9,80008244 <udc_update_iface_desc+0x7c>
80008232:	93 08       	st.w	r9[0x0],r8
80008234:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80008238:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000823c:	00 00       	add	r0,r0
8000823e:	0e 2e       	rsub	lr,r7
80008240:	00 00       	add	r0,r0
80008242:	0e 28       	rsub	r8,r7
80008244:	00 00       	add	r0,r0
80008246:	0e 30       	cp.w	r0,r7
80008248:	80 00       	ld.sh	r0,r0[0x0]
8000824a:	81 a8       	st.w	r0[0x28],r8

8000824c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000824c:	eb cd 40 c0 	pushm	r6-r7,lr
80008250:	18 96       	mov	r6,r12
80008252:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80008254:	f0 1f 00 11 	mcall	80008298 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80008258:	0d 88       	ld.ub	r8,r6[0x0]
8000825a:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000825c:	0c 3c       	cp.w	r12,r6
8000825e:	e0 88 00 19 	brls	80008290 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80008262:	0d 98       	ld.ub	r8,r6[0x1]
80008264:	30 49       	mov	r9,4
80008266:	f2 08 18 00 	cp.b	r8,r9
8000826a:	c1 30       	breq	80008290 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000826c:	ee 08 18 00 	cp.b	r8,r7
80008270:	c0 a1       	brne	80008284 <udc_next_desc_in_iface+0x38>
80008272:	c1 08       	rjmp	80008292 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80008274:	0d 98       	ld.ub	r8,r6[0x1]
80008276:	f2 08 18 00 	cp.b	r8,r9
8000827a:	c0 b0       	breq	80008290 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000827c:	ee 08 18 00 	cp.b	r8,r7
80008280:	c0 31       	brne	80008286 <udc_next_desc_in_iface+0x3a>
80008282:	c0 88       	rjmp	80008292 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80008284:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80008286:	0d 88       	ld.ub	r8,r6[0x0]
80008288:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000828a:	0c 3c       	cp.w	r12,r6
8000828c:	fe 9b ff f4 	brhi	80008274 <udc_next_desc_in_iface+0x28>
80008290:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80008292:	0c 9c       	mov	r12,r6
80008294:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008298:	80 00       	ld.sh	r0,r0[0x0]
8000829a:	81 a8       	st.w	r0[0x28],r8

8000829c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000829c:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000829e:	48 48       	lddpc	r8,800082ac <udc_valid_address+0x10>
800082a0:	11 bc       	ld.ub	r12,r8[0x3]
800082a2:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800082a6:	f0 1f 00 03 	mcall	800082b0 <udc_valid_address+0x14>
}
800082aa:	d8 02       	popm	pc
800082ac:	00 00       	add	r0,r0
800082ae:	11 5c       	ld.sh	r12,--r8
800082b0:	80 00       	ld.sh	r0,r0[0x0]
800082b2:	3e 60       	mov	r0,-26

800082b4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800082b4:	eb cd 40 e0 	pushm	r5-r7,lr
800082b8:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
800082ba:	f0 1f 00 12 	mcall	80008300 <udc_iface_enable+0x4c>
800082be:	c1 f0       	breq	800082fc <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800082c0:	49 18       	lddpc	r8,80008304 <udc_iface_enable+0x50>
800082c2:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800082c4:	30 56       	mov	r6,5
800082c6:	0c 9b       	mov	r11,r6
800082c8:	0e 9c       	mov	r12,r7
800082ca:	f0 1f 00 10 	mcall	80008308 <udc_iface_enable+0x54>
800082ce:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
800082d0:	c0 d0       	breq	800082ea <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
800082d2:	19 ca       	ld.ub	r10,r12[0x4]
800082d4:	19 d8       	ld.ub	r8,r12[0x5]
800082d6:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
800082da:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
800082dc:	5c 7a       	castu.h	r10
800082de:	19 bb       	ld.ub	r11,r12[0x3]
800082e0:	19 ac       	ld.ub	r12,r12[0x2]
800082e2:	f0 1f 00 0b 	mcall	8000830c <udc_iface_enable+0x58>
800082e6:	cf 01       	brne	800082c6 <udc_iface_enable+0x12>
800082e8:	c0 a8       	rjmp	800082fc <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
800082ea:	48 a8       	lddpc	r8,80008310 <udc_iface_enable+0x5c>
800082ec:	70 08       	ld.w	r8,r8[0x0]
800082ee:	70 18       	ld.w	r8,r8[0x4]
800082f0:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
800082f4:	70 0c       	ld.w	r12,r8[0x0]
800082f6:	5d 1c       	icall	r12
800082f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800082fc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80008300:	80 00       	ld.sh	r0,r0[0x0]
80008302:	81 c8       	st.w	r0[0x30],r8
80008304:	00 00       	add	r0,r0
80008306:	0e 30       	cp.w	r0,r7
80008308:	80 00       	ld.sh	r0,r0[0x0]
8000830a:	82 4c       	ld.sh	r12,r1[0x8]
8000830c:	80 00       	ld.sh	r0,r0[0x0]
8000830e:	3f 90       	mov	r0,-7
80008310:	00 00       	add	r0,r0
80008312:	0e 28       	rsub	r8,r7

80008314 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80008314:	eb cd 40 e0 	pushm	r5-r7,lr
80008318:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000831a:	18 97       	mov	r7,r12
8000831c:	30 0b       	mov	r11,0
8000831e:	f0 1f 00 12 	mcall	80008364 <udc_iface_disable+0x50>
80008322:	c1 e0       	breq	8000835e <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80008324:	49 18       	lddpc	r8,80008368 <udc_iface_disable+0x54>
80008326:	70 08       	ld.w	r8,r8[0x0]
80008328:	70 18       	ld.w	r8,r8[0x4]
8000832a:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000832e:	6a 3c       	ld.w	r12,r5[0xc]
80008330:	5d 1c       	icall	r12
80008332:	18 9b       	mov	r11,r12
80008334:	0c 9c       	mov	r12,r6
80008336:	f0 1f 00 0c 	mcall	80008364 <udc_iface_disable+0x50>
8000833a:	c1 20       	breq	8000835e <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000833c:	48 c8       	lddpc	r8,8000836c <udc_iface_disable+0x58>
8000833e:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80008340:	30 56       	mov	r6,5
80008342:	0c 9b       	mov	r11,r6
80008344:	0e 9c       	mov	r12,r7
80008346:	f0 1f 00 0b 	mcall	80008370 <udc_iface_disable+0x5c>
8000834a:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000834c:	c0 50       	breq	80008356 <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000834e:	19 ac       	ld.ub	r12,r12[0x2]
80008350:	f0 1f 00 09 	mcall	80008374 <udc_iface_disable+0x60>
		}
80008354:	cf 7b       	rjmp	80008342 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80008356:	6a 18       	ld.w	r8,r5[0x4]
80008358:	5d 18       	icall	r8
8000835a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
8000835e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80008362:	00 00       	add	r0,r0
80008364:	80 00       	ld.sh	r0,r0[0x0]
80008366:	81 c8       	st.w	r0[0x30],r8
80008368:	00 00       	add	r0,r0
8000836a:	0e 28       	rsub	r8,r7
8000836c:	00 00       	add	r0,r0
8000836e:	0e 30       	cp.w	r0,r7
80008370:	80 00       	ld.sh	r0,r0[0x0]
80008372:	82 4c       	ld.sh	r12,r1[0x8]
80008374:	80 00       	ld.sh	r0,r0[0x0]
80008376:	40 b0       	lddsp	r0,sp[0x2c]

80008378 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80008378:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
8000837c:	49 38       	lddpc	r8,800083c8 <udc_reset+0x50>
8000837e:	11 89       	ld.ub	r9,r8[0x0]
80008380:	30 08       	mov	r8,0
80008382:	f0 09 18 00 	cp.b	r9,r8
80008386:	c1 70       	breq	800083b4 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008388:	49 18       	lddpc	r8,800083cc <udc_reset+0x54>
8000838a:	70 08       	ld.w	r8,r8[0x0]
8000838c:	70 08       	ld.w	r8,r8[0x0]
8000838e:	11 c9       	ld.ub	r9,r8[0x4]
80008390:	30 08       	mov	r8,0
80008392:	f0 09 18 00 	cp.b	r9,r8
80008396:	c0 f0       	breq	800083b4 <udc_reset+0x3c>
80008398:	30 07       	mov	r7,0
8000839a:	48 d6       	lddpc	r6,800083cc <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
8000839c:	0e 9c       	mov	r12,r7
8000839e:	f0 1f 00 0d 	mcall	800083d0 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800083a2:	2f f7       	sub	r7,-1
800083a4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800083a6:	6c 08       	ld.w	r8,r6[0x0]
800083a8:	70 08       	ld.w	r8,r8[0x0]
800083aa:	11 c8       	ld.ub	r8,r8[0x4]
800083ac:	ee 08 18 00 	cp.b	r8,r7
800083b0:	fe 9b ff f6 	brhi	8000839c <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800083b4:	30 09       	mov	r9,0
800083b6:	48 58       	lddpc	r8,800083c8 <udc_reset+0x50>
800083b8:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800083ba:	e0 69 01 00 	mov	r9,256
800083be:	48 68       	lddpc	r8,800083d4 <udc_reset+0x5c>
800083c0:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800083c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800083c6:	00 00       	add	r0,r0
800083c8:	00 00       	add	r0,r0
800083ca:	0e 2e       	rsub	lr,r7
800083cc:	00 00       	add	r0,r0
800083ce:	0e 28       	rsub	r8,r7
800083d0:	80 00       	ld.sh	r0,r0[0x0]
800083d2:	83 14       	st.w	r1[0x4],r4
800083d4:	00 00       	add	r0,r0
800083d6:	0e 2c       	rsub	r12,r7

800083d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
800083d8:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
800083dc:	fe f8 04 4c 	ld.w	r8,pc[1100]
800083e0:	30 09       	mov	r9,0
800083e2:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
800083e4:	30 0a       	mov	r10,0
800083e6:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
800083e8:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
800083ea:	11 88       	ld.ub	r8,r8[0x0]
800083ec:	10 9a       	mov	r10,r8
800083ee:	f2 08 18 00 	cp.b	r8,r9
800083f2:	c0 94       	brge	80008404 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
800083f4:	fe f9 04 34 	ld.w	r9,pc[1076]
800083f8:	92 3b       	ld.sh	r11,r9[0x6]
800083fa:	30 09       	mov	r9,0
800083fc:	f2 0b 19 00 	cp.h	r11,r9
80008400:	e0 80 02 11 	breq	80008822 <udc_process_setup+0x44a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80008404:	10 99       	mov	r9,r8
80008406:	e2 19 00 60 	andl	r9,0x60,COH
8000840a:	e0 81 01 e0 	brne	800087ca <udc_process_setup+0x3f2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
8000840e:	f2 0a 18 00 	cp.b	r10,r9
80008412:	e0 84 01 04 	brge	8000861a <udc_process_setup+0x242>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80008416:	fe f9 04 12 	ld.w	r9,pc[1042]
8000841a:	92 39       	ld.sh	r9,r9[0x6]
8000841c:	58 09       	cp.w	r9,0
8000841e:	e0 80 01 d6 	breq	800087ca <udc_process_setup+0x3f2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80008422:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008426:	e0 81 00 a1 	brne	80008568 <udc_process_setup+0x190>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000842a:	fe fa 03 fe 	ld.w	r10,pc[1022]
8000842e:	15 9a       	ld.ub	r10,r10[0x1]
80008430:	30 6b       	mov	r11,6
80008432:	f6 0a 18 00 	cp.b	r10,r11
80008436:	c1 a0       	breq	8000846a <udc_process_setup+0x92>
80008438:	30 8b       	mov	r11,8
8000843a:	f6 0a 18 00 	cp.b	r10,r11
8000843e:	e0 80 00 88 	breq	8000854e <udc_process_setup+0x176>
80008442:	30 0b       	mov	r11,0
80008444:	f6 0a 18 00 	cp.b	r10,r11
80008448:	e0 81 00 90 	brne	80008568 <udc_process_setup+0x190>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000844c:	30 28       	mov	r8,2
8000844e:	f0 09 19 00 	cp.h	r9,r8
80008452:	c0 40       	breq	8000845a <udc_process_setup+0x82>
80008454:	30 0c       	mov	r12,0
80008456:	e0 8f 01 b6 	bral	800087c2 <udc_process_setup+0x3ea>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000845a:	30 2b       	mov	r11,2
8000845c:	fe fc 03 d0 	ld.w	r12,pc[976]
80008460:	f0 1f 00 f4 	mcall	80008830 <udc_process_setup+0x458>
80008464:	30 1c       	mov	r12,1
80008466:	e0 8f 01 ae 	bral	800087c2 <udc_process_setup+0x3ea>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000846a:	fe f8 03 be 	ld.w	r8,pc[958]
8000846e:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80008470:	f2 08 16 08 	lsr	r8,r9,0x8
80008474:	30 2a       	mov	r10,2
80008476:	f4 08 18 00 	cp.b	r8,r10
8000847a:	c1 00       	breq	8000849a <udc_process_setup+0xc2>
8000847c:	30 3a       	mov	r10,3
8000847e:	f4 08 18 00 	cp.b	r8,r10
80008482:	c2 a0       	breq	800084d6 <udc_process_setup+0xfe>
80008484:	30 19       	mov	r9,1
80008486:	f2 08 18 00 	cp.b	r8,r9
8000848a:	c5 f1       	brne	80008548 <udc_process_setup+0x170>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000848c:	fe f8 03 a8 	ld.w	r8,pc[936]
80008490:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80008492:	19 8b       	ld.ub	r11,r12[0x0]
80008494:	f0 1f 00 e7 	mcall	80008830 <udc_process_setup+0x458>
80008498:	c4 78       	rjmp	80008526 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000849a:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000849c:	fe f8 03 98 	ld.w	r8,pc[920]
800084a0:	70 08       	ld.w	r8,r8[0x0]
800084a2:	f1 38 00 11 	ld.ub	r8,r8[17]
800084a6:	f2 08 18 00 	cp.b	r8,r9
800084aa:	e0 88 00 4f 	brls	80008548 <udc_process_setup+0x170>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
800084ae:	fe f8 03 86 	ld.w	r8,pc[902]
800084b2:	70 18       	ld.w	r8,r8[0x4]
800084b4:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
800084b8:	19 a9       	ld.ub	r9,r12[0x2]
800084ba:	19 b8       	ld.ub	r8,r12[0x3]
800084bc:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800084c0:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
800084c2:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800084c6:	f0 1f 00 db 	mcall	80008830 <udc_process_setup+0x458>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
800084ca:	fe f8 03 5e 	ld.w	r8,pc[862]
800084ce:	70 28       	ld.w	r8,r8[0x8]
800084d0:	30 29       	mov	r9,2
800084d2:	b0 99       	st.b	r8[0x1],r9
800084d4:	c2 98       	rjmp	80008526 <udc_process_setup+0x14e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
800084d6:	5c 59       	castu.b	r9
800084d8:	58 19       	cp.w	r9,1
800084da:	c1 00       	breq	800084fa <udc_process_setup+0x122>
800084dc:	58 29       	cp.w	r9,2
800084de:	c0 40       	breq	800084e6 <udc_process_setup+0x10e>
800084e0:	58 09       	cp.w	r9,0
800084e2:	c0 60       	breq	800084ee <udc_process_setup+0x116>
800084e4:	c3 28       	rjmp	80008548 <udc_process_setup+0x170>
800084e6:	fe fc 03 52 	ld.w	r12,pc[850]
800084ea:	30 3b       	mov	r11,3
800084ec:	c0 a8       	rjmp	80008500 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
800084ee:	30 4b       	mov	r11,4
800084f0:	fe fc 03 4c 	ld.w	r12,pc[844]
800084f4:	f0 1f 00 cf 	mcall	80008830 <udc_process_setup+0x458>
800084f8:	c1 78       	rjmp	80008526 <udc_process_setup+0x14e>
800084fa:	fe fc 03 46 	ld.w	r12,pc[838]
800084fe:	30 9b       	mov	r11,9
80008500:	fe fa 03 44 	ld.w	r10,pc[836]
80008504:	2f ea       	sub	r10,-2
80008506:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80008508:	11 39       	ld.ub	r9,r8++
8000850a:	5c c9       	swap.bh	r9
8000850c:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000850e:	f0 0c 01 09 	sub	r9,r8,r12
80008512:	f6 09 18 00 	cp.b	r9,r11
80008516:	cf 93       	brcs	80008508 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80008518:	a1 7b       	lsl	r11,0x1
8000851a:	2f eb       	sub	r11,-2
8000851c:	fe fc 03 28 	ld.w	r12,pc[808]
80008520:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80008522:	f0 1f 00 c4 	mcall	80008830 <udc_process_setup+0x458>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80008526:	fe f8 03 02 	ld.w	r8,pc[770]
8000852a:	90 39       	ld.sh	r9,r8[0x6]
8000852c:	90 68       	ld.sh	r8,r8[0xc]
8000852e:	f2 08 19 00 	cp.h	r8,r9
80008532:	e0 8b 00 05 	brhi	8000853c <udc_process_setup+0x164>
80008536:	30 1c       	mov	r12,1
80008538:	e0 8f 01 45 	bral	800087c2 <udc_process_setup+0x3ea>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000853c:	fe f8 02 ec 	ld.w	r8,pc[748]
80008540:	b0 69       	st.h	r8[0xc],r9
80008542:	30 1c       	mov	r12,1
80008544:	e0 8f 01 3f 	bral	800087c2 <udc_process_setup+0x3ea>
80008548:	30 0c       	mov	r12,0
8000854a:	e0 8f 01 3c 	bral	800087c2 <udc_process_setup+0x3ea>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
8000854e:	30 18       	mov	r8,1
80008550:	f0 09 19 00 	cp.h	r9,r8
80008554:	c0 30       	breq	8000855a <udc_process_setup+0x182>
80008556:	30 0c       	mov	r12,0
80008558:	c3 59       	rjmp	800087c2 <udc_process_setup+0x3ea>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000855a:	30 1b       	mov	r11,1
8000855c:	fe fc 02 ec 	ld.w	r12,pc[748]
80008560:	f0 1f 00 b4 	mcall	80008830 <udc_process_setup+0x458>
80008564:	30 1c       	mov	r12,1
80008566:	c2 e9       	rjmp	800087c2 <udc_process_setup+0x3ea>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80008568:	58 18       	cp.w	r8,1
8000856a:	c3 61       	brne	800085d6 <udc_process_setup+0x1fe>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000856c:	fe fa 02 bc 	ld.w	r10,pc[700]
80008570:	15 9b       	ld.ub	r11,r10[0x1]
80008572:	30 aa       	mov	r10,10
80008574:	f4 0b 18 00 	cp.b	r11,r10
80008578:	c2 f1       	brne	800085d6 <udc_process_setup+0x1fe>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000857a:	f0 09 19 00 	cp.h	r9,r8
8000857e:	c2 a1       	brne	800085d2 <udc_process_setup+0x1fa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80008580:	fe f8 02 c8 	ld.w	r8,pc[712]
80008584:	11 89       	ld.ub	r9,r8[0x0]
80008586:	30 08       	mov	r8,0
80008588:	f0 09 18 00 	cp.b	r9,r8
8000858c:	c2 30       	breq	800085d2 <udc_process_setup+0x1fa>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000858e:	fe f8 02 9a 	ld.w	r8,pc[666]
80008592:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80008594:	fe f8 02 b8 	ld.w	r8,pc[696]
80008598:	70 08       	ld.w	r8,r8[0x0]
8000859a:	70 08       	ld.w	r8,r8[0x0]
8000859c:	11 c8       	ld.ub	r8,r8[0x4]
8000859e:	ee 08 18 00 	cp.b	r8,r7
800085a2:	e0 88 00 18 	brls	800085d2 <udc_process_setup+0x1fa>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800085a6:	30 0b       	mov	r11,0
800085a8:	0e 9c       	mov	r12,r7
800085aa:	f0 1f 00 aa 	mcall	80008850 <udc_process_setup+0x478>
800085ae:	c1 20       	breq	800085d2 <udc_process_setup+0x1fa>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
800085b0:	fe f8 02 9c 	ld.w	r8,pc[668]
800085b4:	70 08       	ld.w	r8,r8[0x0]
800085b6:	70 18       	ld.w	r8,r8[0x4]
800085b8:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800085bc:	70 3c       	ld.w	r12,r8[0xc]
800085be:	5d 1c       	icall	r12
800085c0:	fe f8 02 94 	ld.w	r8,pc[660]
800085c4:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800085c6:	30 1b       	mov	r11,1
800085c8:	10 9c       	mov	r12,r8
800085ca:	f0 1f 00 9a 	mcall	80008830 <udc_process_setup+0x458>
800085ce:	30 1c       	mov	r12,1
800085d0:	cf 98       	rjmp	800087c2 <udc_process_setup+0x3ea>
800085d2:	30 0c       	mov	r12,0
800085d4:	cf 78       	rjmp	800087c2 <udc_process_setup+0x3ea>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800085d6:	58 28       	cp.w	r8,2
800085d8:	e0 81 00 f9 	brne	800087ca <udc_process_setup+0x3f2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800085dc:	fe f8 02 4c 	ld.w	r8,pc[588]
800085e0:	11 9a       	ld.ub	r10,r8[0x1]
800085e2:	30 08       	mov	r8,0
800085e4:	f0 0a 18 00 	cp.b	r10,r8
800085e8:	e0 81 00 ec 	brne	800087c0 <udc_process_setup+0x3e8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
800085ec:	30 28       	mov	r8,2
800085ee:	f0 09 19 00 	cp.h	r9,r8
800085f2:	c0 30       	breq	800085f8 <udc_process_setup+0x220>
800085f4:	30 0c       	mov	r12,0
800085f6:	ce 68       	rjmp	800087c2 <udc_process_setup+0x3ea>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800085f8:	fe f8 02 30 	ld.w	r8,pc[560]
800085fc:	11 dc       	ld.ub	r12,r8[0x5]
800085fe:	f0 1f 00 97 	mcall	80008858 <udc_process_setup+0x480>
80008602:	e0 68 01 00 	mov	r8,256
80008606:	f9 b8 00 00 	moveq	r8,0
8000860a:	fe fc 02 52 	ld.w	r12,pc[594]
8000860e:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
80008610:	30 2b       	mov	r11,2
80008612:	f0 1f 00 88 	mcall	80008830 <udc_process_setup+0x458>
80008616:	30 1c       	mov	r12,1
80008618:	cd 58       	rjmp	800087c2 <udc_process_setup+0x3ea>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000861a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000861e:	c7 81       	brne	8000870e <udc_process_setup+0x336>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80008620:	fe f9 02 08 	ld.w	r9,pc[520]
80008624:	13 99       	ld.ub	r9,r9[0x1]
80008626:	30 3a       	mov	r10,3
80008628:	f4 09 18 00 	cp.b	r9,r10
8000862c:	e0 80 00 ca 	breq	800087c0 <udc_process_setup+0x3e8>
80008630:	e0 8b 00 07 	brhi	8000863e <udc_process_setup+0x266>
80008634:	30 1a       	mov	r10,1
80008636:	f4 09 18 00 	cp.b	r9,r10
8000863a:	c6 a1       	brne	8000870e <udc_process_setup+0x336>
8000863c:	c1 88       	rjmp	8000866c <udc_process_setup+0x294>
8000863e:	30 5a       	mov	r10,5
80008640:	f4 09 18 00 	cp.b	r9,r10
80008644:	c0 60       	breq	80008650 <udc_process_setup+0x278>
80008646:	30 9a       	mov	r10,9
80008648:	f4 09 18 00 	cp.b	r9,r10
8000864c:	c6 11       	brne	8000870e <udc_process_setup+0x336>
8000864e:	c2 38       	rjmp	80008694 <udc_process_setup+0x2bc>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80008650:	4f 68       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008652:	90 39       	ld.sh	r9,r8[0x6]
80008654:	30 08       	mov	r8,0
80008656:	f0 09 19 00 	cp.h	r9,r8
8000865a:	c0 30       	breq	80008660 <udc_process_setup+0x288>
8000865c:	30 0c       	mov	r12,0
8000865e:	cb 28       	rjmp	800087c2 <udc_process_setup+0x3ea>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80008660:	fe f9 02 00 	ld.w	r9,pc[512]
80008664:	4f 18       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008666:	91 49       	st.w	r8[0x10],r9
80008668:	30 1c       	mov	r12,1
8000866a:	ca c8       	rjmp	800087c2 <udc_process_setup+0x3ea>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000866c:	4e f8       	lddpc	r8,80008828 <udc_process_setup+0x450>
8000866e:	90 39       	ld.sh	r9,r8[0x6]
80008670:	30 08       	mov	r8,0
80008672:	f0 09 19 00 	cp.h	r9,r8
80008676:	c0 d1       	brne	80008690 <udc_process_setup+0x2b8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80008678:	4e c8       	lddpc	r8,80008828 <udc_process_setup+0x450>
8000867a:	90 19       	ld.sh	r9,r8[0x2]
8000867c:	30 18       	mov	r8,1
8000867e:	f0 09 19 00 	cp.h	r9,r8
80008682:	c0 71       	brne	80008690 <udc_process_setup+0x2b8>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80008684:	4e a8       	lddpc	r8,8000882c <udc_process_setup+0x454>
80008686:	90 09       	ld.sh	r9,r8[0x0]
80008688:	a9 d9       	cbr	r9,0x9
8000868a:	b0 09       	st.h	r8[0x0],r9
8000868c:	30 1c       	mov	r12,1
8000868e:	c9 a8       	rjmp	800087c2 <udc_process_setup+0x3ea>
80008690:	30 0c       	mov	r12,0
80008692:	c9 88       	rjmp	800087c2 <udc_process_setup+0x3ea>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80008694:	4e 58       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008696:	90 39       	ld.sh	r9,r8[0x6]
80008698:	30 08       	mov	r8,0
8000869a:	f0 09 19 00 	cp.h	r9,r8
8000869e:	c3 41       	brne	80008706 <udc_process_setup+0x32e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
800086a0:	f0 1f 00 71 	mcall	80008864 <udc_process_setup+0x48c>
800086a4:	c3 10       	breq	80008706 <udc_process_setup+0x32e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800086a6:	4e 18       	lddpc	r8,80008828 <udc_process_setup+0x450>
800086a8:	11 b9       	ld.ub	r9,r8[0x3]
800086aa:	4e 38       	lddpc	r8,80008834 <udc_process_setup+0x45c>
800086ac:	70 08       	ld.w	r8,r8[0x0]
800086ae:	f1 38 00 11 	ld.ub	r8,r8[17]
800086b2:	10 39       	cp.w	r9,r8
800086b4:	e0 89 00 29 	brgt	80008706 <udc_process_setup+0x32e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
800086b8:	f0 1f 00 6c 	mcall	80008868 <udc_process_setup+0x490>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800086bc:	4d b8       	lddpc	r8,80008828 <udc_process_setup+0x450>
800086be:	11 b8       	ld.ub	r8,r8[0x3]
800086c0:	4e 29       	lddpc	r9,80008848 <udc_process_setup+0x470>
800086c2:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
800086c4:	58 08       	cp.w	r8,0
800086c6:	c2 20       	breq	8000870a <udc_process_setup+0x332>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800086c8:	20 18       	sub	r8,1
800086ca:	4d b9       	lddpc	r9,80008834 <udc_process_setup+0x45c>
800086cc:	72 19       	ld.w	r9,r9[0x4]
800086ce:	f2 08 00 38 	add	r8,r9,r8<<0x3
800086d2:	4d f9       	lddpc	r9,8000884c <udc_process_setup+0x474>
800086d4:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800086d6:	70 08       	ld.w	r8,r8[0x0]
800086d8:	11 c9       	ld.ub	r9,r8[0x4]
800086da:	30 08       	mov	r8,0
800086dc:	f0 09 18 00 	cp.b	r9,r8
800086e0:	c1 50       	breq	8000870a <udc_process_setup+0x332>
800086e2:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800086e4:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800086e6:	4d a6       	lddpc	r6,8000884c <udc_process_setup+0x474>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800086e8:	0a 9b       	mov	r11,r5
800086ea:	0e 9c       	mov	r12,r7
800086ec:	f0 1f 00 60 	mcall	8000886c <udc_process_setup+0x494>
800086f0:	c0 b0       	breq	80008706 <udc_process_setup+0x32e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800086f2:	2f f7       	sub	r7,-1
800086f4:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800086f6:	6c 08       	ld.w	r8,r6[0x0]
800086f8:	70 08       	ld.w	r8,r8[0x0]
800086fa:	11 c8       	ld.ub	r8,r8[0x4]
800086fc:	ee 08 18 00 	cp.b	r8,r7
80008700:	fe 9b ff f4 	brhi	800086e8 <udc_process_setup+0x310>
80008704:	c0 38       	rjmp	8000870a <udc_process_setup+0x332>
80008706:	30 0c       	mov	r12,0
80008708:	c5 d8       	rjmp	800087c2 <udc_process_setup+0x3ea>
8000870a:	30 1c       	mov	r12,1
8000870c:	c5 b8       	rjmp	800087c2 <udc_process_setup+0x3ea>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000870e:	58 18       	cp.w	r8,1
80008710:	c2 21       	brne	80008754 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80008712:	4c 69       	lddpc	r9,80008828 <udc_process_setup+0x450>
80008714:	13 9a       	ld.ub	r10,r9[0x1]
80008716:	30 b9       	mov	r9,11
80008718:	f2 0a 18 00 	cp.b	r10,r9
8000871c:	c1 c1       	brne	80008754 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000871e:	4c 38       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008720:	90 39       	ld.sh	r9,r8[0x6]
80008722:	30 08       	mov	r8,0
80008724:	f0 09 19 00 	cp.h	r9,r8
80008728:	c1 41       	brne	80008750 <udc_process_setup+0x378>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000872a:	4c 88       	lddpc	r8,80008848 <udc_process_setup+0x470>
8000872c:	11 89       	ld.ub	r9,r8[0x0]
8000872e:	30 08       	mov	r8,0
80008730:	f0 09 18 00 	cp.b	r9,r8
80008734:	c0 e0       	breq	80008750 <udc_process_setup+0x378>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80008736:	4b d8       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008738:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000873a:	11 d7       	ld.ub	r7,r8[0x5]
8000873c:	0e 9c       	mov	r12,r7
8000873e:	f0 1f 00 4d 	mcall	80008870 <udc_process_setup+0x498>
80008742:	c0 70       	breq	80008750 <udc_process_setup+0x378>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80008744:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80008748:	0e 9c       	mov	r12,r7
8000874a:	f0 1f 00 49 	mcall	8000886c <udc_process_setup+0x494>
8000874e:	c3 a8       	rjmp	800087c2 <udc_process_setup+0x3ea>
80008750:	30 0c       	mov	r12,0
80008752:	c3 88       	rjmp	800087c2 <udc_process_setup+0x3ea>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80008754:	58 28       	cp.w	r8,2
80008756:	c3 a1       	brne	800087ca <udc_process_setup+0x3f2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80008758:	4b 48       	lddpc	r8,80008828 <udc_process_setup+0x450>
8000875a:	11 98       	ld.ub	r8,r8[0x1]
8000875c:	30 19       	mov	r9,1
8000875e:	f2 08 18 00 	cp.b	r8,r9
80008762:	c0 60       	breq	8000876e <udc_process_setup+0x396>
80008764:	30 39       	mov	r9,3
80008766:	f2 08 18 00 	cp.b	r8,r9
8000876a:	c2 b1       	brne	800087c0 <udc_process_setup+0x3e8>
8000876c:	c1 48       	rjmp	80008794 <udc_process_setup+0x3bc>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000876e:	4a f8       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008770:	90 39       	ld.sh	r9,r8[0x6]
80008772:	30 08       	mov	r8,0
80008774:	f0 09 19 00 	cp.h	r9,r8
80008778:	c0 c1       	brne	80008790 <udc_process_setup+0x3b8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000877a:	4a c8       	lddpc	r8,80008828 <udc_process_setup+0x450>
8000877c:	90 19       	ld.sh	r9,r8[0x2]
8000877e:	30 08       	mov	r8,0
80008780:	f0 09 19 00 	cp.h	r9,r8
80008784:	c0 61       	brne	80008790 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80008786:	4a 98       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008788:	11 dc       	ld.ub	r12,r8[0x5]
8000878a:	f0 1f 00 3b 	mcall	80008874 <udc_process_setup+0x49c>
8000878e:	c1 a8       	rjmp	800087c2 <udc_process_setup+0x3ea>
80008790:	30 0c       	mov	r12,0
80008792:	c1 88       	rjmp	800087c2 <udc_process_setup+0x3ea>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80008794:	4a 58       	lddpc	r8,80008828 <udc_process_setup+0x450>
80008796:	90 39       	ld.sh	r9,r8[0x6]
80008798:	30 08       	mov	r8,0
8000879a:	f0 09 19 00 	cp.h	r9,r8
8000879e:	c0 f1       	brne	800087bc <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800087a0:	4a 28       	lddpc	r8,80008828 <udc_process_setup+0x450>
800087a2:	90 19       	ld.sh	r9,r8[0x2]
800087a4:	30 08       	mov	r8,0
800087a6:	f0 09 19 00 	cp.h	r9,r8
800087aa:	c0 91       	brne	800087bc <udc_process_setup+0x3e4>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
800087ac:	49 f7       	lddpc	r7,80008828 <udc_process_setup+0x450>
800087ae:	0f dc       	ld.ub	r12,r7[0x5]
800087b0:	f0 1f 00 32 	mcall	80008878 <udc_process_setup+0x4a0>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800087b4:	0f dc       	ld.ub	r12,r7[0x5]
800087b6:	f0 1f 00 32 	mcall	8000887c <udc_process_setup+0x4a4>
800087ba:	c0 48       	rjmp	800087c2 <udc_process_setup+0x3ea>
800087bc:	30 0c       	mov	r12,0
800087be:	c0 28       	rjmp	800087c2 <udc_process_setup+0x3ea>
800087c0:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
800087c2:	58 0c       	cp.w	r12,0
800087c4:	c0 30       	breq	800087ca <udc_process_setup+0x3f2>
800087c6:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800087ca:	49 88       	lddpc	r8,80008828 <udc_process_setup+0x450>
800087cc:	11 88       	ld.ub	r8,r8[0x0]
800087ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800087d2:	58 18       	cp.w	r8,1
800087d4:	c2 71       	brne	80008822 <udc_process_setup+0x44a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800087d6:	49 d8       	lddpc	r8,80008848 <udc_process_setup+0x470>
800087d8:	11 89       	ld.ub	r9,r8[0x0]
800087da:	30 08       	mov	r8,0
800087dc:	f0 09 18 00 	cp.b	r9,r8
800087e0:	c2 10       	breq	80008822 <udc_process_setup+0x44a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800087e2:	49 28       	lddpc	r8,80008828 <udc_process_setup+0x450>
800087e4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800087e6:	49 a8       	lddpc	r8,8000884c <udc_process_setup+0x474>
800087e8:	70 08       	ld.w	r8,r8[0x0]
800087ea:	70 08       	ld.w	r8,r8[0x0]
800087ec:	11 c8       	ld.ub	r8,r8[0x4]
800087ee:	ee 08 18 00 	cp.b	r8,r7
800087f2:	e0 88 00 18 	brls	80008822 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800087f6:	0e 96       	mov	r6,r7
800087f8:	30 0b       	mov	r11,0
800087fa:	0e 9c       	mov	r12,r7
800087fc:	f0 1f 00 15 	mcall	80008850 <udc_process_setup+0x478>
80008800:	c1 10       	breq	80008822 <udc_process_setup+0x44a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80008802:	49 38       	lddpc	r8,8000884c <udc_process_setup+0x474>
80008804:	70 08       	ld.w	r8,r8[0x0]
80008806:	70 18       	ld.w	r8,r8[0x4]
80008808:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000880c:	6e 3c       	ld.w	r12,r7[0xc]
8000880e:	5d 1c       	icall	r12
80008810:	18 9b       	mov	r11,r12
80008812:	0c 9c       	mov	r12,r6
80008814:	f0 1f 00 0f 	mcall	80008850 <udc_process_setup+0x478>
80008818:	c0 50       	breq	80008822 <udc_process_setup+0x44a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000881a:	6e 2c       	ld.w	r12,r7[0x8]
8000881c:	5d 1c       	icall	r12
8000881e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008822:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80008826:	00 00       	add	r0,r0
80008828:	00 00       	add	r0,r0
8000882a:	11 5c       	ld.sh	r12,--r8
8000882c:	00 00       	add	r0,r0
8000882e:	0e 2c       	rsub	r12,r7
80008830:	80 00       	ld.sh	r0,r0[0x0]
80008832:	3e 9c       	mov	r12,-23
80008834:	00 00       	add	r0,r0
80008836:	00 3c       	cp.w	r12,r0
80008838:	00 00       	add	r0,r0
8000883a:	00 a4       	st.w	r0++,r4
8000883c:	00 00       	add	r0,r0
8000883e:	00 c8       	st.b	r0++,r8
80008840:	00 00       	add	r0,r0
80008842:	00 a8       	st.w	r0++,r8
80008844:	00 00       	add	r0,r0
80008846:	00 b4       	st.h	r0++,r4
80008848:	00 00       	add	r0,r0
8000884a:	0e 2e       	rsub	lr,r7
8000884c:	00 00       	add	r0,r0
8000884e:	0e 28       	rsub	r8,r7
80008850:	80 00       	ld.sh	r0,r0[0x0]
80008852:	81 c8       	st.w	r0[0x30],r8
80008854:	00 00       	add	r0,r0
80008856:	0e 34       	cp.w	r4,r7
80008858:	80 00       	ld.sh	r0,r0[0x0]
8000885a:	3e a8       	mov	r8,-22
8000885c:	00 00       	add	r0,r0
8000885e:	0e 26       	rsub	r6,r7
80008860:	80 00       	ld.sh	r0,r0[0x0]
80008862:	82 9c       	ld.uh	r12,r1[0x2]
80008864:	80 00       	ld.sh	r0,r0[0x0]
80008866:	3e 82       	mov	r2,-24
80008868:	80 00       	ld.sh	r0,r0[0x0]
8000886a:	83 78       	st.w	r1[0x1c],r8
8000886c:	80 00       	ld.sh	r0,r0[0x0]
8000886e:	82 b4       	ld.uh	r4,r1[0x6]
80008870:	80 00       	ld.sh	r0,r0[0x0]
80008872:	83 14       	st.w	r1[0x4],r4
80008874:	80 00       	ld.sh	r0,r0[0x0]
80008876:	3e bc       	mov	r12,-21
80008878:	80 00       	ld.sh	r0,r0[0x0]
8000887a:	40 1c       	lddsp	r12,sp[0x4]
8000887c:	80 00       	ld.sh	r0,r0[0x0]
8000887e:	40 88       	lddsp	r8,sp[0x20]

80008880 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80008880:	d4 01       	pushm	lr
	udd_enable();
80008882:	f0 1f 00 02 	mcall	80008888 <udc_start+0x8>
}
80008886:	d8 02       	popm	pc
80008888:	80 00       	ld.sh	r0,r0[0x0]
8000888a:	4c 00       	lddpc	r0,80008988 <stdio_usb_getchar+0x1c>

8000888c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
8000888c:	eb cd 40 f8 	pushm	r3-r7,lr
80008890:	16 94       	mov	r4,r11
80008892:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0) {
80008894:	58 0c       	cp.w	r12,0
80008896:	c0 30       	breq	8000889c <_read+0x10>
80008898:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
		return -1;
	}

	for (; len > 0; --len) {
8000889c:	58 0a       	cp.w	r10,0
8000889e:	e0 89 00 04 	brgt	800088a6 <_read+0x1a>
800088a2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
800088a6:	30 07       	mov	r7,0
		ptr_get(stdio_base, ptr);
800088a8:	48 83       	lddpc	r3,800088c8 <_read+0x3c>
800088aa:	48 96       	lddpc	r6,800088cc <_read+0x40>
800088ac:	66 0c       	ld.w	r12,r3[0x0]
800088ae:	6c 08       	ld.w	r8,r6[0x0]
800088b0:	e8 07 00 0b 	add	r11,r4,r7
800088b4:	5d 18       	icall	r8
		ptr++;
		nChars++;
800088b6:	2f f7       	sub	r7,-1

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
800088b8:	ea 07 01 08 	sub	r8,r5,r7

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
800088bc:	58 08       	cp.w	r8,0
800088be:	fe 99 ff f7 	brgt	800088ac <_read+0x20>
800088c2:	0a 9c       	mov	r12,r5
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
800088c4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800088c8:	00 00       	add	r0,r0
800088ca:	14 d4       	st.w	--r10,r4
800088cc:	00 00       	add	r0,r0
800088ce:	14 cc       	st.b	r10++,r12

800088d0 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
800088d0:	30 19       	mov	r9,1
800088d2:	48 28       	lddpc	r8,800088d8 <stdio_usb_enable+0x8>
800088d4:	b0 89       	st.b	r8[0x0],r9
	return true;
}
800088d6:	5e ff       	retal	1
800088d8:	00 00       	add	r0,r0
800088da:	0e 35       	cp.w	r5,r7

800088dc <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
800088dc:	30 09       	mov	r9,0
800088de:	48 28       	lddpc	r8,800088e4 <stdio_usb_disable+0x8>
800088e0:	b0 89       	st.b	r8[0x0],r9
}
800088e2:	5e fc       	retal	r12
800088e4:	00 00       	add	r0,r0
800088e6:	0e 35       	cp.w	r5,r7

800088e8 <stdio_usb_vbus_event>:

	*data = (char)udi_cdc_getc();
}

void stdio_usb_vbus_event(bool b_high)
{
800088e8:	d4 01       	pushm	lr
	if (b_high) {
800088ea:	58 0c       	cp.w	r12,0
800088ec:	c0 40       	breq	800088f4 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
800088ee:	f0 1f 00 04 	mcall	800088fc <stdio_usb_vbus_event+0x14>
800088f2:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
800088f4:	f0 1f 00 03 	mcall	80008900 <stdio_usb_vbus_event+0x18>
800088f8:	d8 02       	popm	pc
800088fa:	00 00       	add	r0,r0
800088fc:	80 00       	ld.sh	r0,r0[0x0]
800088fe:	41 4c       	lddsp	r12,sp[0x50]
80008900:	80 00       	ld.sh	r0,r0[0x0]
80008902:	41 24       	lddsp	r4,sp[0x48]

80008904 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
80008904:	eb cd 40 80 	pushm	r7,lr
	stdio_base = NULL;
80008908:	30 09       	mov	r9,0
8000890a:	48 f8       	lddpc	r8,80008944 <stdio_usb_init+0x40>
8000890c:	91 09       	st.w	r8[0x0],r9
	ptr_put = stdio_usb_putchar;
8000890e:	48 f9       	lddpc	r9,80008948 <stdio_usb_init+0x44>
80008910:	48 f8       	lddpc	r8,8000894c <stdio_usb_init+0x48>
80008912:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80008914:	48 f9       	lddpc	r9,80008950 <stdio_usb_init+0x4c>
80008916:	49 08       	lddpc	r8,80008954 <stdio_usb_init+0x50>
80008918:	91 09       	st.w	r8[0x0],r9
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
8000891a:	f0 1f 00 10 	mcall	80008958 <stdio_usb_init+0x54>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
8000891e:	f0 1f 00 10 	mcall	8000895c <stdio_usb_init+0x58>

	if (!udc_include_vbus_monitoring()) {
80008922:	c0 41       	brne	8000892a <stdio_usb_init+0x26>
		stdio_usb_vbus_event(true);
80008924:	30 1c       	mov	r12,1
80008926:	f0 1f 00 0f 	mcall	80008960 <stdio_usb_init+0x5c>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
8000892a:	48 f7       	lddpc	r7,80008964 <stdio_usb_init+0x60>
8000892c:	6e 08       	ld.w	r8,r7[0x0]
8000892e:	30 0b       	mov	r11,0
80008930:	70 1c       	ld.w	r12,r8[0x4]
80008932:	f0 1f 00 0e 	mcall	80008968 <stdio_usb_init+0x64>
	setbuf(stdin, NULL);
80008936:	6e 08       	ld.w	r8,r7[0x0]
80008938:	30 0b       	mov	r11,0
8000893a:	70 0c       	ld.w	r12,r8[0x0]
8000893c:	f0 1f 00 0b 	mcall	80008968 <stdio_usb_init+0x64>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
80008940:	e3 cd 80 80 	ldm	sp++,r7,pc
80008944:	00 00       	add	r0,r0
80008946:	14 d4       	st.w	--r10,r4
80008948:	80 00       	ld.sh	r0,r0[0x0]
8000894a:	89 98       	st.w	r4[0x24],r8
8000894c:	00 00       	add	r0,r0
8000894e:	14 d0       	st.w	--r10,r0
80008950:	80 00       	ld.sh	r0,r0[0x0]
80008952:	89 6c       	st.w	r4[0x18],r12
80008954:	00 00       	add	r0,r0
80008956:	14 cc       	st.b	r10++,r12
80008958:	80 00       	ld.sh	r0,r0[0x0]
8000895a:	88 80       	ld.uh	r0,r4[0x0]
8000895c:	80 00       	ld.sh	r0,r0[0x0]
8000895e:	3e 5c       	mov	r12,-27
80008960:	80 00       	ld.sh	r0,r0[0x0]
80008962:	88 e8       	ld.uh	r8,r4[0xc]
80008964:	00 00       	add	r0,r0
80008966:	01 c0       	ld.ub	r0,r0[0x4]
80008968:	80 00       	ld.sh	r0,r0[0x0]
8000896a:	a2 14       	st.h	r1[0x2],r4

8000896c <stdio_usb_getchar>:

	return udi_cdc_putc(data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * unused, char *data)
{
8000896c:	eb cd 40 80 	pushm	r7,lr
80008970:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80008972:	48 88       	lddpc	r8,80008990 <stdio_usb_getchar+0x24>
80008974:	11 89       	ld.ub	r9,r8[0x0]
80008976:	30 08       	mov	r8,0
80008978:	f0 09 18 00 	cp.b	r9,r8
8000897c:	c0 41       	brne	80008984 <stdio_usb_getchar+0x18>
		*data = 0;  // -1
8000897e:	b6 88       	st.b	r11[0x0],r8
		return;
80008980:	e3 cd 80 80 	ldm	sp++,r7,pc
	}

	*data = (char)udi_cdc_getc();
80008984:	f0 1f 00 04 	mcall	80008994 <stdio_usb_getchar+0x28>
80008988:	ae 8c       	st.b	r7[0x0],r12
8000898a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000898e:	00 00       	add	r0,r0
80008990:	00 00       	add	r0,r0
80008992:	0e 35       	cp.w	r5,r7
80008994:	80 00       	ld.sh	r0,r0[0x0]
80008996:	7e 9c       	ld.w	r12,pc[0x24]

80008998 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
80008998:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
8000899a:	48 78       	lddpc	r8,800089b4 <stdio_usb_putchar+0x1c>
8000899c:	11 89       	ld.ub	r9,r8[0x0]
8000899e:	30 08       	mov	r8,0
800089a0:	f0 09 18 00 	cp.b	r9,r8
800089a4:	c0 60       	breq	800089b0 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
800089a6:	16 9c       	mov	r12,r11
800089a8:	f0 1f 00 04 	mcall	800089b8 <stdio_usb_putchar+0x20>
800089ac:	c0 21       	brne	800089b0 <stdio_usb_putchar+0x18>
800089ae:	dc 0a       	popm	pc,r12=-1
800089b0:	d8 0a       	popm	pc,r12=0
800089b2:	00 00       	add	r0,r0
800089b4:	00 00       	add	r0,r0
800089b6:	0e 35       	cp.w	r5,r7
800089b8:	80 00       	ld.sh	r0,r0[0x0]
800089ba:	7d 44       	ld.w	r4,lr[0x50]

800089bc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
800089bc:	eb cd 40 f8 	pushm	r3-r7,lr
800089c0:	16 94       	mov	r4,r11
800089c2:	14 95       	mov	r5,r10
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
800089c4:	20 1c       	sub	r12,1
800089c6:	58 2c       	cp.w	r12,2
800089c8:	e0 8b 00 13 	brhi	800089ee <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
800089cc:	58 0a       	cp.w	r10,0
800089ce:	c0 31       	brne	800089d4 <_write+0x18>
800089d0:	30 07       	mov	r7,0
800089d2:	c0 f8       	rjmp	800089f0 <_write+0x34>
800089d4:	30 07       	mov	r7,0
		if (ptr_put(stdio_base, *ptr++) < 0) {
800089d6:	48 93       	lddpc	r3,800089f8 <_write+0x3c>
800089d8:	48 96       	lddpc	r6,800089fc <_write+0x40>
800089da:	66 0c       	ld.w	r12,r3[0x0]
800089dc:	6c 08       	ld.w	r8,r6[0x0]
800089de:	e8 07 07 0b 	ld.ub	r11,r4[r7]
800089e2:	5d 18       	icall	r8
800089e4:	c0 55       	brlt	800089ee <_write+0x32>
			return -1;
		}
		++nChars;
800089e6:	2f f7       	sub	r7,-1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
800089e8:	0e 35       	cp.w	r5,r7
800089ea:	cf 81       	brne	800089da <_write+0x1e>
800089ec:	c0 28       	rjmp	800089f0 <_write+0x34>
800089ee:	3f f7       	mov	r7,-1
			return -1;
		}
		++nChars;
	}
	return nChars;
}
800089f0:	0e 9c       	mov	r12,r7
800089f2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800089f6:	00 00       	add	r0,r0
800089f8:	00 00       	add	r0,r0
800089fa:	14 d4       	st.w	--r10,r4
800089fc:	00 00       	add	r0,r0
800089fe:	14 d0       	st.w	--r10,r0

80008a00 <Motors_Moving>:
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
{
	if(Motor_Cntrl.Left_State != STOP)
80008a00:	48 58       	lddpc	r8,80008a14 <Motors_Moving+0x14>
80008a02:	70 08       	ld.w	r8,r8[0x0]
80008a04:	58 68       	cp.w	r8,6
80008a06:	c0 21       	brne	80008a0a <Motors_Moving+0xa>
80008a08:	5e fd       	retal	0
	Motor_Cntrl.Right_State = FORWARD;
	Motor_Cntrl.Right_Count = 1;
	Motor_Start(MOTOR_L | MOTOR_R);
}

bool Motors_Moving()
80008a0a:	48 38       	lddpc	r8,80008a14 <Motors_Moving+0x14>
80008a0c:	70 18       	ld.w	r8,r8[0x4]
80008a0e:	58 68       	cp.w	r8,6
80008a10:	5f 1c       	srne	r12
	else
	{
		return false;
	}
	
80008a12:	5e fc       	retal	r12
80008a14:	00 00       	add	r0,r0
80008a16:	14 d8       	st.w	--r10,r8

80008a18 <Motor_Stop>:
		pwm_start_channels((1 << MOTOR_R));
	}	
}

void Motor_Stop(int Motors)
{
80008a18:	eb cd 40 80 	pushm	r7,lr
80008a1c:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80008a1e:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80008a22:	c0 a0       	breq	80008a36 <Motor_Stop+0x1e>
	{
		ML_STANDBY;
80008a24:	32 8c       	mov	r12,40
80008a26:	f0 1f 00 0c 	mcall	80008a54 <Motor_Stop+0x3c>
		Motor_Cntrl.Left_State = STOP;
80008a2a:	30 69       	mov	r9,6
80008a2c:	48 b8       	lddpc	r8,80008a58 <Motor_Stop+0x40>
80008a2e:	91 09       	st.w	r8[0x0],r9
		pwm_stop_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80008a30:	30 2c       	mov	r12,2
80008a32:	f0 1f 00 0b 	mcall	80008a5c <Motor_Stop+0x44>
	}
	
	if(Motors & MOTOR_R)
80008a36:	e2 17 00 02 	andl	r7,0x2,COH
80008a3a:	c0 a0       	breq	80008a4e <Motor_Stop+0x36>
	{
		MR_STANDBY;
80008a3c:	33 0c       	mov	r12,48
80008a3e:	f0 1f 00 06 	mcall	80008a54 <Motor_Stop+0x3c>
		Motor_Cntrl.Right_State = STOP;
80008a42:	30 69       	mov	r9,6
80008a44:	48 58       	lddpc	r8,80008a58 <Motor_Stop+0x40>
80008a46:	91 19       	st.w	r8[0x4],r9
		pwm_stop_channels((1 << MOTOR_R));
80008a48:	30 4c       	mov	r12,4
80008a4a:	f0 1f 00 05 	mcall	80008a5c <Motor_Stop+0x44>
80008a4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a52:	00 00       	add	r0,r0
80008a54:	80 00       	ld.sh	r0,r0[0x0]
80008a56:	32 2a       	mov	r10,34
80008a58:	00 00       	add	r0,r0
80008a5a:	14 d8       	st.w	--r10,r8
80008a5c:	80 00       	ld.sh	r0,r0[0x0]
80008a5e:	34 c4       	mov	r4,76

80008a60 <Motor_Start>:
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
	
//	Enable_global_interrupt();
}
void Motor_Start(int Motors)
{
80008a60:	eb cd 40 80 	pushm	r7,lr
80008a64:	18 97       	mov	r7,r12
	if(Motors & MOTOR_L)
80008a66:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80008a6a:	c2 30       	breq	80008ab0 <Motor_Start+0x50>
	{
		if(Motor_Cntrl.Left_State == FORWARD)
80008a6c:	4a 58       	lddpc	r8,80008b00 <Motor_Start+0xa0>
80008a6e:	70 08       	ld.w	r8,r8[0x0]
80008a70:	58 28       	cp.w	r8,2
80008a72:	c0 81       	brne	80008a82 <Motor_Start+0x22>
		{
			ML_IN1_SET;
80008a74:	32 9c       	mov	r12,41
80008a76:	f0 1f 00 24 	mcall	80008b04 <Motor_Start+0xa4>
			ML_IN2_CLR;
80008a7a:	32 ac       	mov	r12,42
80008a7c:	f0 1f 00 23 	mcall	80008b08 <Motor_Start+0xa8>
80008a80:	c1 28       	rjmp	80008aa4 <Motor_Start+0x44>
		}
		else if (Motor_Cntrl.Left_State == BACKWARD)
80008a82:	58 38       	cp.w	r8,3
80008a84:	c0 81       	brne	80008a94 <Motor_Start+0x34>
		{
			ML_IN1_CLR;
80008a86:	32 9c       	mov	r12,41
80008a88:	f0 1f 00 20 	mcall	80008b08 <Motor_Start+0xa8>
			ML_IN2_SET;
80008a8c:	32 ac       	mov	r12,42
80008a8e:	f0 1f 00 1e 	mcall	80008b04 <Motor_Start+0xa4>
80008a92:	c0 98       	rjmp	80008aa4 <Motor_Start+0x44>
		}
		else //Somethings gone wrong
		{
			ML_IN1_CLR;
80008a94:	32 9c       	mov	r12,41
80008a96:	f0 1f 00 1d 	mcall	80008b08 <Motor_Start+0xa8>
			ML_IN2_CLR;
80008a9a:	32 ac       	mov	r12,42
80008a9c:	f0 1f 00 1b 	mcall	80008b08 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80008aa0:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		ML_GO;
80008aa4:	32 8c       	mov	r12,40
80008aa6:	f0 1f 00 18 	mcall	80008b04 <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_L)); //Start PWM Channel on M0 line
80008aaa:	30 2c       	mov	r12,2
80008aac:	f0 1f 00 18 	mcall	80008b0c <Motor_Start+0xac>
	}
	
	if(Motors & MOTOR_R)
80008ab0:	e2 17 00 02 	andl	r7,0x2,COH
80008ab4:	c2 30       	breq	80008afa <Motor_Start+0x9a>
	{
		if(Motor_Cntrl.Right_State == FORWARD)
80008ab6:	49 38       	lddpc	r8,80008b00 <Motor_Start+0xa0>
80008ab8:	70 18       	ld.w	r8,r8[0x4]
80008aba:	58 28       	cp.w	r8,2
80008abc:	c0 81       	brne	80008acc <Motor_Start+0x6c>
		{
			MR_IN1_SET;
80008abe:	32 fc       	mov	r12,47
80008ac0:	f0 1f 00 11 	mcall	80008b04 <Motor_Start+0xa4>
			MR_IN2_CLR;
80008ac4:	32 ec       	mov	r12,46
80008ac6:	f0 1f 00 11 	mcall	80008b08 <Motor_Start+0xa8>
80008aca:	c1 28       	rjmp	80008aee <Motor_Start+0x8e>
		}
		else if (Motor_Cntrl.Right_State == BACKWARD)
80008acc:	58 38       	cp.w	r8,3
80008ace:	c0 81       	brne	80008ade <Motor_Start+0x7e>
		{
			MR_IN1_CLR;
80008ad0:	32 fc       	mov	r12,47
80008ad2:	f0 1f 00 0e 	mcall	80008b08 <Motor_Start+0xa8>
			MR_IN2_SET;
80008ad6:	32 ec       	mov	r12,46
80008ad8:	f0 1f 00 0b 	mcall	80008b04 <Motor_Start+0xa4>
80008adc:	c0 98       	rjmp	80008aee <Motor_Start+0x8e>
		}
		else //Somethings gone wrong
		{
			MR_IN1_CLR;
80008ade:	32 fc       	mov	r12,47
80008ae0:	f0 1f 00 0a 	mcall	80008b08 <Motor_Start+0xa8>
			MR_IN2_CLR;
80008ae4:	32 ec       	mov	r12,46
80008ae6:	f0 1f 00 09 	mcall	80008b08 <Motor_Start+0xa8>
			return;//don't start any pwm channel
80008aea:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		MR_GO;
80008aee:	33 0c       	mov	r12,48
80008af0:	f0 1f 00 05 	mcall	80008b04 <Motor_Start+0xa4>
		pwm_start_channels((1 << MOTOR_R));
80008af4:	30 4c       	mov	r12,4
80008af6:	f0 1f 00 06 	mcall	80008b0c <Motor_Start+0xac>
80008afa:	e3 cd 80 80 	ldm	sp++,r7,pc
80008afe:	00 00       	add	r0,r0
80008b00:	00 00       	add	r0,r0
80008b02:	14 d8       	st.w	--r10,r8
80008b04:	80 00       	ld.sh	r0,r0[0x0]
80008b06:	32 0e       	mov	lr,32
80008b08:	80 00       	ld.sh	r0,r0[0x0]
80008b0a:	32 2a       	mov	r10,34
80008b0c:	80 00       	ld.sh	r0,r0[0x0]
80008b0e:	34 b2       	mov	r2,75

80008b10 <Motors_Reset>:
{
	//Calculate number of interrupts of each wheel
}

void Motors_Reset(void)
{
80008b10:	d4 01       	pushm	lr
	Motor_Cntrl.Left_State = FORWARD;
80008b12:	48 68       	lddpc	r8,80008b28 <Motors_Reset+0x18>
80008b14:	30 2a       	mov	r10,2
80008b16:	91 0a       	st.w	r8[0x0],r10
	Motor_Cntrl.Left_Count = 1;
80008b18:	30 19       	mov	r9,1
80008b1a:	91 29       	st.w	r8[0x8],r9
	Motor_Cntrl.Right_State = FORWARD;
80008b1c:	91 1a       	st.w	r8[0x4],r10
	Motor_Cntrl.Right_Count = 1;
80008b1e:	91 39       	st.w	r8[0xc],r9
	Motor_Start(MOTOR_L | MOTOR_R);
80008b20:	30 3c       	mov	r12,3
80008b22:	f0 1f 00 03 	mcall	80008b2c <Motors_Reset+0x1c>
}
80008b26:	d8 02       	popm	pc
80008b28:	00 00       	add	r0,r0
80008b2a:	14 d8       	st.w	--r10,r8
80008b2c:	80 00       	ld.sh	r0,r0[0x0]
80008b2e:	8a 60       	ld.sh	r0,r5[0xc]

80008b30 <Analogue_Comparator_Init>:
		temp |= MOTOR_R;
		
	Motor_Stop(temp); //Stop the Right Motor
}
void Analogue_Comparator_Init()
{
80008b30:	d4 01       	pushm	lr
	{POT1_AC1BP1_PIN, POT1_AC1BP1_FUNCTION},
	{SENSE0_AC1AN1_PIN, SENSE0_AC1AN1_FUNCTION},
	{SENSE1_AC1BN1_PIN, SENSE1_AC1BN1_FUNCTION},
	};
	
	gpio_enable_module(ACIFA_GPIO_MAP, sizeof(ACIFA_GPIO_MAP) / sizeof(ACIFA_GPIO_MAP[0]));
80008b32:	30 4b       	mov	r11,4
80008b34:	4a 0c       	lddpc	r12,80008bb4 <Analogue_Comparator_Init+0x84>
80008b36:	f0 1f 00 21 	mcall	80008bb8 <Analogue_Comparator_Init+0x88>
	//Make it an interrupt
//	Disable_global_interrupt();
	
	//INTC_init_interrupts();
	
	acifa_configure(&AVR32_ACIFA1,
80008b3a:	e0 68 24 00 	mov	r8,9216
80008b3e:	ea 18 00 f4 	orh	r8,0xf4
80008b42:	30 19       	mov	r9,1
80008b44:	12 9a       	mov	r10,r9
80008b46:	12 9b       	mov	r11,r9
80008b48:	fe 7c 64 00 	mov	r12,-39936
80008b4c:	f0 1f 00 1c 	mcall	80008bbc <Analogue_Comparator_Init+0x8c>
	ACIFA_COMP_SELA,
	POT0_AC1AP1_INPUT,
	SENSE0_AC1AN1_INPUT,
	FOSC0);
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELA, 2);
80008b50:	30 2a       	mov	r10,2
80008b52:	30 1b       	mov	r11,1
80008b54:	fe 7c 64 00 	mov	r12,-39936
80008b58:	f0 1f 00 1a 	mcall	80008bc0 <Analogue_Comparator_Init+0x90>
	acifa_configure_hysteresis(&AVR32_ACIFA1, ACIFA_COMP_SELB, 2);
80008b5c:	30 2a       	mov	r10,2
80008b5e:	14 9b       	mov	r11,r10
80008b60:	fe 7c 64 00 	mov	r12,-39936
80008b64:	f0 1f 00 17 	mcall	80008bc0 <Analogue_Comparator_Init+0x90>
	acifa_configure(&AVR32_ACIFA1,
80008b68:	e0 68 24 00 	mov	r8,9216
80008b6c:	ea 18 00 f4 	orh	r8,0xf4
80008b70:	30 19       	mov	r9,1
80008b72:	30 3a       	mov	r10,3
80008b74:	30 2b       	mov	r11,2
80008b76:	fe 7c 64 00 	mov	r12,-39936
80008b7a:	f0 1f 00 11 	mcall	80008bbc <Analogue_Comparator_Init+0x8c>
	// 			;
	// 		M1_IN1_CLR;
	
	
	//Motor_Go(S)
	acifa_enable_interrupt(&AVR32_ACIFA1, 3);//Enable ACBINT and ACAINT
80008b7e:	30 3b       	mov	r11,3
80008b80:	fe 7c 64 00 	mov	r12,-39936
80008b84:	f0 1f 00 10 	mcall	80008bc4 <Analogue_Comparator_Init+0x94>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELA);
80008b88:	30 1b       	mov	r11,1
80008b8a:	fe 7c 64 00 	mov	r12,-39936
80008b8e:	f0 1f 00 0f 	mcall	80008bc8 <Analogue_Comparator_Init+0x98>
	acifa_enable_interrupt_toggle(&AVR32_ACIFA1, ACIFA_COMP_SELB);
80008b92:	30 2b       	mov	r11,2
80008b94:	fe 7c 64 00 	mov	r12,-39936
80008b98:	f0 1f 00 0c 	mcall	80008bc8 <Analogue_Comparator_Init+0x98>

	acifa_start(&AVR32_ACIFA1, (ACIFA_COMP_SELA|ACIFA_COMP_SELB));
80008b9c:	30 3b       	mov	r11,3
80008b9e:	fe 7c 64 00 	mov	r12,-39936
80008ba2:	f0 1f 00 0b 	mcall	80008bcc <Analogue_Comparator_Init+0x9c>
	
	
	
	
	INTC_register_interrupt(&ACInterruptHandler,AVR32_ACIFA1_IRQ ,AVR32_INTC_INT0);
80008ba6:	30 0a       	mov	r10,0
80008ba8:	e0 6b 04 c0 	mov	r11,1216
80008bac:	48 9c       	lddpc	r12,80008bd0 <Analogue_Comparator_Init+0xa0>
80008bae:	f0 1f 00 0a 	mcall	80008bd4 <Analogue_Comparator_Init+0xa4>
	
//	Enable_global_interrupt();
}
80008bb2:	d8 02       	popm	pc
80008bb4:	80 01       	ld.sh	r1,r0[0x0]
80008bb6:	37 98       	mov	r8,121
80008bb8:	80 00       	ld.sh	r0,r0[0x0]
80008bba:	31 c4       	mov	r4,28
80008bbc:	80 00       	ld.sh	r0,r0[0x0]
80008bbe:	2c e0       	sub	r0,-50
80008bc0:	80 00       	ld.sh	r0,r0[0x0]
80008bc2:	2d 24       	sub	r4,-46
80008bc4:	80 00       	ld.sh	r0,r0[0x0]
80008bc6:	2d de       	sub	lr,-35
80008bc8:	80 00       	ld.sh	r0,r0[0x0]
80008bca:	2d b6       	sub	r6,-37
80008bcc:	80 00       	ld.sh	r0,r0[0x0]
80008bce:	2d 48       	sub	r8,-44
80008bd0:	80 00       	ld.sh	r0,r0[0x0]
80008bd2:	8b d8       	st.w	r5[0x34],r8
80008bd4:	80 00       	ld.sh	r0,r0[0x0]
80008bd6:	32 48       	mov	r8,36

80008bd8 <ACInterruptHandler>:
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
}
__attribute__((__interrupt__)) static void ACInterruptHandler(void)
{
80008bd8:	d4 01       	pushm	lr
	//print_dbg("\n\rACIFA Interrupt Entered.");
	acifa_clear_flags(&AVR32_ACIFA1, 3);
80008bda:	30 3b       	mov	r11,3
80008bdc:	fe 7c 64 00 	mov	r12,-39936
80008be0:	f0 1f 00 1a 	mcall	80008c48 <ACInterruptHandler+0x70>
	
	if (acifa_is_acb_inp_higher(&AVR32_ACIFA1)) //LEFT MOTOR
80008be4:	fe 7c 64 00 	mov	r12,-39936
80008be8:	f0 1f 00 19 	mcall	80008c4c <ACInterruptHandler+0x74>
80008bec:	c0 50       	breq	80008bf6 <ACInterruptHandler+0x1e>
	{
		LED5_SET; //wheel not on white tab
80008bee:	33 cc       	mov	r12,60
80008bf0:	f0 1f 00 18 	mcall	80008c50 <ACInterruptHandler+0x78>
80008bf4:	c0 88       	rjmp	80008c04 <ACInterruptHandler+0x2c>
	}
	else
	{
		LED5_CLR;
80008bf6:	33 cc       	mov	r12,60
80008bf8:	f0 1f 00 17 	mcall	80008c54 <ACInterruptHandler+0x7c>
		Motor_Cntrl.Left_Count --;
80008bfc:	49 78       	lddpc	r8,80008c58 <ACInterruptHandler+0x80>
80008bfe:	70 29       	ld.w	r9,r8[0x8]
80008c00:	20 19       	sub	r9,1
80008c02:	91 29       	st.w	r8[0x8],r9
	}
	
	if (acifa_is_aca_inp_higher(&AVR32_ACIFA1))
80008c04:	fe 7c 64 00 	mov	r12,-39936
80008c08:	f0 1f 00 15 	mcall	80008c5c <ACInterruptHandler+0x84>
80008c0c:	c0 50       	breq	80008c16 <ACInterruptHandler+0x3e>
	{

		LED6_SET;
80008c0e:	33 dc       	mov	r12,61
80008c10:	f0 1f 00 10 	mcall	80008c50 <ACInterruptHandler+0x78>
80008c14:	c0 88       	rjmp	80008c24 <ACInterruptHandler+0x4c>
		
	}
	else
	{
		LED6_CLR;
80008c16:	33 dc       	mov	r12,61
80008c18:	f0 1f 00 0f 	mcall	80008c54 <ACInterruptHandler+0x7c>
		Motor_Cntrl.Right_Count --;
80008c1c:	48 f8       	lddpc	r8,80008c58 <ACInterruptHandler+0x80>
80008c1e:	70 39       	ld.w	r9,r8[0xc]
80008c20:	20 19       	sub	r9,1
80008c22:	91 39       	st.w	r8[0xc],r9
80008c24:	48 d8       	lddpc	r8,80008c58 <ACInterruptHandler+0x80>
80008c26:	70 29       	ld.w	r9,r8[0x8]
80008c28:	f2 cc 00 01 	sub	r12,r9,1
80008c2c:	f9 e9 10 09 	or	r9,r12,r9
80008c30:	f2 0c 16 1f 	lsr	r12,r9,0x1f
	}
	int temp = 0;
	if(Motor_Cntrl.Left_Count <= 0) //if we have reached the end of the movement on left wheel
		temp |= MOTOR_L;
	
	if(Motor_Cntrl.Right_Count <= 0)
80008c34:	70 38       	ld.w	r8,r8[0xc]
80008c36:	58 08       	cp.w	r8,0
80008c38:	e0 89 00 03 	brgt	80008c3e <ACInterruptHandler+0x66>
		temp |= MOTOR_R;
80008c3c:	a1 bc       	sbr	r12,0x1
		
	Motor_Stop(temp); //Stop the Right Motor
80008c3e:	f0 1f 00 09 	mcall	80008c60 <ACInterruptHandler+0x88>
}
80008c42:	d4 02       	popm	lr
80008c44:	d6 03       	rete
80008c46:	00 00       	add	r0,r0
80008c48:	80 00       	ld.sh	r0,r0[0x0]
80008c4a:	2d b0       	sub	r0,-37
80008c4c:	80 00       	ld.sh	r0,r0[0x0]
80008c4e:	2d a8       	sub	r8,-38
80008c50:	80 00       	ld.sh	r0,r0[0x0]
80008c52:	32 0e       	mov	lr,32
80008c54:	80 00       	ld.sh	r0,r0[0x0]
80008c56:	32 2a       	mov	r10,34
80008c58:	00 00       	add	r0,r0
80008c5a:	14 d8       	st.w	--r10,r8
80008c5c:	80 00       	ld.sh	r0,r0[0x0]
80008c5e:	2d a0       	sub	r0,-38
80008c60:	80 00       	ld.sh	r0,r0[0x0]
80008c62:	8a 18       	ld.sh	r8,r5[0x2]

80008c64 <Motor_Init>:
// #  define EXAMPLE_PWM_L_FUNCTION        AVR32_PWM_PWML_0_1_FUNCTION
// #  define EXAMPLE_PWM_H_PIN             AVR32_PWM_PWMH_0_1_PIN
// #  define EXAMPLE_PWM_H_FUNCTION        AVR32_PWM_PWMH_0_1_FUNCTION
// #  define EXAMPLE_PWM_CHANNEL_ID        0
void Motor_Init()
{
80008c64:	eb cd 40 c0 	pushm	r6-r7,lr
80008c68:	20 dd       	sub	sp,52
	//Turn boths motors off
	ML_STANDBY;
80008c6a:	32 8c       	mov	r12,40
80008c6c:	f0 1f 00 41 	mcall	80008d70 <Motor_Init+0x10c>
	MR_STANDBY;
80008c70:	33 0c       	mov	r12,48
80008c72:	f0 1f 00 40 	mcall	80008d70 <Motor_Init+0x10c>
	
	ML_IN1_CLR;
80008c76:	32 9c       	mov	r12,41
80008c78:	f0 1f 00 3e 	mcall	80008d70 <Motor_Init+0x10c>
	ML_IN2_CLR;
80008c7c:	32 ac       	mov	r12,42
80008c7e:	f0 1f 00 3d 	mcall	80008d70 <Motor_Init+0x10c>
	
	MR_IN1_CLR;
80008c82:	32 fc       	mov	r12,47
80008c84:	f0 1f 00 3b 	mcall	80008d70 <Motor_Init+0x10c>
	MR_IN2_CLR;
80008c88:	32 ec       	mov	r12,46
80008c8a:	f0 1f 00 3a 	mcall	80008d70 <Motor_Init+0x10c>
	
	Motor_Cntrl.Left_Count = 0;
80008c8e:	4b a8       	lddpc	r8,80008d74 <Motor_Init+0x110>
80008c90:	30 07       	mov	r7,0
80008c92:	91 27       	st.w	r8[0x8],r7
	Motor_Cntrl.Right_Count = 0;
80008c94:	91 37       	st.w	r8[0xc],r7
	Motor_Cntrl.Left_State = STOP;
80008c96:	30 69       	mov	r9,6
80008c98:	91 09       	st.w	r8[0x0],r9
	Motor_Cntrl.Right_State = STOP;
80008c9a:	91 19       	st.w	r8[0x4],r9
											{0}, // cdtyupd
											{0}, // cprd
											{0}, // cprdupd
											{0}, // ccnt
											{0}, // dt
											{0}};// dtupd  ;  One channel config.
80008c9c:	30 08       	mov	r8,0
80008c9e:	30 09       	mov	r9,0
80008ca0:	fa e9 00 14 	st.d	sp[20],r8
80008ca4:	fa e9 00 1c 	st.d	sp[28],r8
80008ca8:	fa e9 00 24 	st.d	sp[36],r8
80008cac:	fa e9 00 2c 	st.d	sp[44],r8
            .div = 1,             // DIV=1 in the formula
            .mul = 6,             // MUL=7 in the formula
            .pll_div2 = 1,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
            .pll_wbwdisable = 0,  // pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
            .pll_freq = 1,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
  };
80008cb0:	4b 28       	lddpc	r8,80008d78 <Motor_Init+0x114>
80008cb2:	1a 9b       	mov	r11,sp
80008cb4:	70 09       	ld.w	r9,r8[0x0]
80008cb6:	50 09       	stdsp	sp[0x0],r9
80008cb8:	70 19       	ld.w	r9,r8[0x4]
80008cba:	50 19       	stdsp	sp[0x4],r9
80008cbc:	70 29       	ld.w	r9,r8[0x8]
80008cbe:	50 29       	stdsp	sp[0x8],r9
80008cc0:	70 39       	ld.w	r9,r8[0xc]
80008cc2:	50 39       	stdsp	sp[0xc],r9
80008cc4:	70 48       	ld.w	r8,r8[0x10]
80008cc6:	50 48       	stdsp	sp[0x10],r8
  // Switch main clock to Osc0.
//  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

  /* Setup PLL0 on Osc0, mul=7 ,no divisor, lockcount=16, ie. (16Mhzx7)/(div2) = 56MHz output */
  scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
80008cc8:	0e 9c       	mov	r12,r7
80008cca:	f0 1f 00 2d 	mcall	80008d7c <Motor_Init+0x118>

  /* Enable PLL0 */
  scif_pll_enable(SCIF_PLL0);
80008cce:	0e 9c       	mov	r12,r7
80008cd0:	f0 1f 00 2c 	mcall	80008d80 <Motor_Init+0x11c>

  /* Wait for PLL0 locked */
  scif_wait_for_pll_locked(SCIF_PLL0) ;
80008cd4:	0e 9c       	mov	r12,r7
80008cd6:	f0 1f 00 2c 	mcall	80008d84 <Motor_Init+0x120>
}
static void pwm_start_gc(void)
{
  scif_gc_setup(AVR32_SCIF_GCLK_PWM,
80008cda:	0e 99       	mov	r9,r7
80008cdc:	0e 9a       	mov	r10,r7
80008cde:	30 5b       	mov	r11,5
80008ce0:	30 4c       	mov	r12,4
80008ce2:	f0 1f 00 2a 	mcall	80008d88 <Motor_Init+0x124>
//   scif_gc_setup(  AVR32_SCIF_GCLK_PWM,
// 				  SCIF_GCCTRL_OSC0,
// 				  AVR32_SCIF_GC_NO_DIV_CLOCK,
// 				  0);
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_PWM);
80008ce6:	30 4c       	mov	r12,4
80008ce8:	f0 1f 00 29 	mcall	80008d8c <Motor_Init+0x128>
	
// 	gpio_enable_module_pin(EXAMPLE_PWM_L_PIN, EXAMPLE_PWM_L_FUNCTION);
// 	gpio_enable_module_pin(EXAMPLE_PWM_H_PIN, EXAMPLE_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(AVR32_PIN_PB10, AVR32_PWM_PWMH_1_1_FUNCTION); //PWM1 Low
	gpio_enable_module_pin(ML_PWM_H_PIN, ML_PWM_H_FUNCTION);
80008cec:	30 2b       	mov	r11,2
80008cee:	32 bc       	mov	r12,43
80008cf0:	f0 1f 00 28 	mcall	80008d90 <Motor_Init+0x12c>
	gpio_enable_module_pin(MR_PWM_H_PIN, MR_PWM_H_FUNCTION); //PWM1 Low
80008cf4:	30 2b       	mov	r11,2
80008cf6:	32 dc       	mov	r12,45
80008cf8:	f0 1f 00 26 	mcall	80008d90 <Motor_Init+0x12c>
	//gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION);
	// PWM controller configuration.
	pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80008cfc:	4a 6c       	lddpc	r12,80008d94 <Motor_Init+0x130>
80008cfe:	99 17       	st.w	r12[0x4],r7
	pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
80008d00:	99 07       	st.w	r12[0x0],r7
	pwm_opt.prea = AVR32_PWM_PREA_CCK;
80008d02:	99 37       	st.w	r12[0xc],r7
	pwm_opt.preb = AVR32_PWM_PREB_CCK;
80008d04:	99 27       	st.w	r12[0x8],r7
	
	pwm_opt.fault_detection_activated = false;
80008d06:	f9 67 00 14 	st.b	r12[20],r7
	pwm_opt.sync_channel_activated    = true;
80008d0a:	30 18       	mov	r8,1
80008d0c:	f9 68 00 15 	st.b	r12[21],r8
	pwm_opt.sync_update_channel_mode  = PWM_SYNC_UPDATE_MANUAL_WRITE_MANUAL_UPDATE;
80008d10:	f9 67 00 16 	st.b	r12[22],r7
	pwm_opt.sync_channel_select[0]    = false;
80008d14:	f9 67 00 17 	st.b	r12[23],r7
	pwm_opt.sync_channel_select[1]    = false;
80008d18:	f9 67 00 18 	st.b	r12[24],r7
	pwm_opt.sync_channel_select[2]    = false;
80008d1c:	f9 67 00 19 	st.b	r12[25],r7
	pwm_opt.sync_channel_select[3]    = false;
80008d20:	f9 67 00 1a 	st.b	r12[26],r7
	pwm_opt.cksel                     = PWM_CKSEL_GCLK;
80008d24:	30 16       	mov	r6,1
80008d26:	99 46       	st.w	r12[0x10],r6
	pwm_init(&pwm_opt);
80008d28:	f0 1f 00 1c 	mcall	80008d98 <Motor_Init+0x134>
	
	// Update the period
	pwm_update_period_value(10);
80008d2c:	30 ac       	mov	r12,10
80008d2e:	f0 1f 00 1c 	mcall	80008d9c <Motor_Init+0x138>
	pwm_channel.CMR.dte   = 0;        // Enable Deadtime for complementary Mode
	pwm_channel.CMR.dthi  = 0;        // Deadtime Inverted on PWMH
	pwm_channel.CMR.dtli  = 0;        // Deadtime Not Inverted on PWML
	pwm_channel.CMR.ces   = 0;        // 0/1 Channel Event at the End of PWM Period
	pwm_channel.CMR.calg  = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
	pwm_channel.CMR.cpol  = PWM_POLARITY_HIGH;            // Channel polarity.
80008d32:	40 58       	lddsp	r8,sp[0x14]
80008d34:	e4 18 ff f8 	andh	r8,0xfff8
80008d38:	e0 18 fa ff 	andl	r8,0xfaff
80008d3c:	f1 d6 d1 21 	bfins	r8,r6,0x9,0x1
	pwm_channel.CMR.cpre  = AVR32_PWM_CPRE_CCK;           // Channel prescaler.
80008d40:	f1 d7 d0 04 	bfins	r8,r7,0x0,0x4
80008d44:	50 58       	stdsp	sp[0x14],r8
	pwm_channel.cdty      = 50;       // Channel duty cycle, should be < CPRD.
80008d46:	33 28       	mov	r8,50
80008d48:	50 68       	stdsp	sp[0x18],r8
	pwm_channel.cprd      = 200;       // Channel period.
80008d4a:	e0 68 00 c8 	mov	r8,200
80008d4e:	50 88       	stdsp	sp[0x20],r8
	
/*	channel_id = M0_PWM_CHANNEL_ID;*/
	pwm_channel_init(ML_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80008d50:	fa c7 ff ec 	sub	r7,sp,-20
80008d54:	0e 9b       	mov	r11,r7
80008d56:	0c 9c       	mov	r12,r6
80008d58:	f0 1f 00 12 	mcall	80008da0 <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
/*	channel_id = M1_PWM_CHANNEL_ID; */
	pwm_channel_init(MR_PWM_CHANNEL_ID, &pwm_channel); // Set channel configuration to channel 0
80008d5c:	0e 9b       	mov	r11,r7
80008d5e:	30 2c       	mov	r12,2
80008d60:	f0 1f 00 10 	mcall	80008da0 <Motor_Init+0x13c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	Analogue_Comparator_Init();
80008d64:	f0 1f 00 10 	mcall	80008da4 <Motor_Init+0x140>
}
80008d68:	2f 3d       	sub	sp,-52
80008d6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008d6e:	00 00       	add	r0,r0
80008d70:	80 00       	ld.sh	r0,r0[0x0]
80008d72:	32 2a       	mov	r10,34
80008d74:	00 00       	add	r0,r0
80008d76:	14 d8       	st.w	--r10,r8
80008d78:	80 01       	ld.sh	r1,r0[0x0]
80008d7a:	37 b8       	mov	r8,123
80008d7c:	80 00       	ld.sh	r0,r0[0x0]
80008d7e:	37 34       	mov	r4,115
80008d80:	80 00       	ld.sh	r0,r0[0x0]
80008d82:	36 f0       	mov	r0,111
80008d84:	80 00       	ld.sh	r0,r0[0x0]
80008d86:	35 f6       	mov	r6,95
80008d88:	80 00       	ld.sh	r0,r0[0x0]
80008d8a:	36 48       	mov	r8,100
80008d8c:	80 00       	ld.sh	r0,r0[0x0]
80008d8e:	36 cc       	mov	r12,108
80008d90:	80 00       	ld.sh	r0,r0[0x0]
80008d92:	31 30       	mov	r0,19
80008d94:	00 00       	add	r0,r0
80008d96:	15 10       	ld.sh	r0,r10++
80008d98:	80 00       	ld.sh	r0,r0[0x0]
80008d9a:	34 e0       	mov	r0,78
80008d9c:	80 00       	ld.sh	r0,r0[0x0]
80008d9e:	34 d6       	mov	r6,77
80008da0:	80 00       	ld.sh	r0,r0[0x0]
80008da2:	34 74       	mov	r4,71
80008da4:	80 00       	ld.sh	r0,r0[0x0]
80008da6:	8b 30       	st.w	r5[0xc],r0

80008da8 <Photos_Ready>:
}

bool Photos_Ready(void)
{
	int status = 0;
	if(OV7670_Status.Camera_0_Found == true) //If camera is there
80008da8:	49 78       	lddpc	r8,80008e04 <Photos_Ready+0x5c>
80008daa:	11 99       	ld.ub	r9,r8[0x1]
80008dac:	30 08       	mov	r8,0
80008dae:	f0 09 18 00 	cp.b	r9,r8
80008db2:	c0 e0       	breq	80008dce <Photos_Ready+0x26>
	{ 
		if(OV7670_Status.Camera_0_Error == false)//and has no errors
80008db4:	49 48       	lddpc	r8,80008e04 <Photos_Ready+0x5c>
80008db6:	11 b9       	ld.ub	r9,r8[0x3]
80008db8:	30 08       	mov	r8,0
80008dba:	f0 09 18 00 	cp.b	r9,r8
80008dbe:	c0 81       	brne	80008dce <Photos_Ready+0x26>
80008dc0:	49 18       	lddpc	r8,80008e04 <Photos_Ready+0x5c>
80008dc2:	11 d9       	ld.ub	r9,r8[0x5]
80008dc4:	30 38       	mov	r8,3
80008dc6:	f0 09 18 00 	cp.b	r9,r8
80008dca:	5f 08       	sreq	r8
80008dcc:	c0 28       	rjmp	80008dd0 <Photos_Ready+0x28>
80008dce:	30 18       	mov	r8,1
			status |= 1;
	}
	else
		status |= 1;		
		
	if(OV7670_Status.Camera_1_Found == true) //If camera is there
80008dd0:	48 d9       	lddpc	r9,80008e04 <Photos_Ready+0x5c>
80008dd2:	13 aa       	ld.ub	r10,r9[0x2]
80008dd4:	30 09       	mov	r9,0
80008dd6:	f2 0a 18 00 	cp.b	r10,r9
80008dda:	c1 10       	breq	80008dfc <Photos_Ready+0x54>
	{
		if(OV7670_Status.Camera_1_Error == false)//and has no errors
80008ddc:	48 a9       	lddpc	r9,80008e04 <Photos_Ready+0x5c>
80008dde:	13 ca       	ld.ub	r10,r9[0x4]
80008de0:	30 09       	mov	r9,0
80008de2:	f2 0a 18 00 	cp.b	r10,r9
80008de6:	c0 91       	brne	80008df8 <Photos_Ready+0x50>
		{
			if(OV7670_Status.VSYNC1_State == TAKEN_PHOTO)
80008de8:	48 79       	lddpc	r9,80008e04 <Photos_Ready+0x5c>
80008dea:	13 ea       	ld.ub	r10,r9[0x6]
80008dec:	30 39       	mov	r9,3
80008dee:	f2 0a 18 00 	cp.b	r10,r9
80008df2:	c0 61       	brne	80008dfe <Photos_Ready+0x56>
			{
				status |= 1; //camera0 has taken photo
80008df4:	a1 a8       	sbr	r8,0x0
80008df6:	c0 48       	rjmp	80008dfe <Photos_Ready+0x56>
			}
		}
		else
		status |= 1;
80008df8:	a1 a8       	sbr	r8,0x0
80008dfa:	c0 28       	rjmp	80008dfe <Photos_Ready+0x56>
	}
	else
		status |= 1;
80008dfc:	a1 a8       	sbr	r8,0x0
80008dfe:	58 08       	cp.w	r8,0
		
	if(status)
		return true;
	else
		return false;
}
80008e00:	5f 1c       	srne	r12
80008e02:	5e fc       	retal	r12
80008e04:	00 00       	add	r0,r0
80008e06:	14 e8       	st.h	--r10,r8

80008e08 <FIFO_Reset>:
	delay_us(10);
	FIFO_1_WRST_SET;
}

void FIFO_Reset(uint8_t CameraID)
{
80008e08:	eb cd 40 80 	pushm	r7,lr
80008e0c:	18 97       	mov	r7,r12
	FIFO_0_nOE_SET;
80008e0e:	31 cc       	mov	r12,28
80008e10:	f0 1f 00 19 	mcall	80008e74 <FIFO_Reset+0x6c>
	FIFO_1_nOE_SET;
80008e14:	31 bc       	mov	r12,27
80008e16:	f0 1f 00 18 	mcall	80008e74 <FIFO_Reset+0x6c>
	if(CameraID & CAMERA_LEFT)
80008e1a:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80008e1e:	c1 30       	breq	80008e44 <FIFO_Reset+0x3c>
	{
		FIFO_0_WRST_CLR;
80008e20:	31 5c       	mov	r12,21
80008e22:	f0 1f 00 16 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_0_nRRST_CLR;
80008e26:	30 fc       	mov	r12,15
80008e28:	f0 1f 00 14 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_0_RCLK_SET;
80008e2c:	31 3c       	mov	r12,19
80008e2e:	f0 1f 00 12 	mcall	80008e74 <FIFO_Reset+0x6c>
		FIFO_0_RCLK_CLR;
80008e32:	31 3c       	mov	r12,19
80008e34:	f0 1f 00 11 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_0_nRRST_SET;
80008e38:	30 fc       	mov	r12,15
80008e3a:	f0 1f 00 0f 	mcall	80008e74 <FIFO_Reset+0x6c>
		FIFO_0_WRST_SET;
80008e3e:	31 5c       	mov	r12,21
80008e40:	f0 1f 00 0d 	mcall	80008e74 <FIFO_Reset+0x6c>
	}
	if(CameraID & CAMERA_RIGHT)
80008e44:	e2 17 00 02 	andl	r7,0x2,COH
80008e48:	c1 30       	breq	80008e6e <FIFO_Reset+0x66>
	{
		FIFO_1_WRST_CLR;
80008e4a:	31 9c       	mov	r12,25
80008e4c:	f0 1f 00 0b 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_1_nRRST_CLR;
80008e50:	31 6c       	mov	r12,22
80008e52:	f0 1f 00 0a 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_1_RCLK_SET;
80008e56:	31 7c       	mov	r12,23
80008e58:	f0 1f 00 07 	mcall	80008e74 <FIFO_Reset+0x6c>
		FIFO_1_RCLK_CLR;
80008e5c:	31 7c       	mov	r12,23
80008e5e:	f0 1f 00 07 	mcall	80008e78 <FIFO_Reset+0x70>
		FIFO_1_nRRST_SET;
80008e62:	31 6c       	mov	r12,22
80008e64:	f0 1f 00 04 	mcall	80008e74 <FIFO_Reset+0x6c>
		FIFO_1_WRST_SET;
80008e68:	31 9c       	mov	r12,25
80008e6a:	f0 1f 00 03 	mcall	80008e74 <FIFO_Reset+0x6c>
80008e6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e72:	00 00       	add	r0,r0
80008e74:	80 00       	ld.sh	r0,r0[0x0]
80008e76:	32 0e       	mov	lr,32
80008e78:	80 00       	ld.sh	r0,r0[0x0]
80008e7a:	32 2a       	mov	r10,34

80008e7c <Store_Image_0>:
	FIFO_Reset(CAMERA_LEFT);
	
	return true;
}
void Store_Image_0()
{ 
80008e7c:	d4 31       	pushm	r0-r7,lr
80008e7e:	fa cd 02 90 	sub	sp,sp,656
80008e82:	30 07       	mov	r7,0
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
		sprintf(&Filename_buff, Image0Name, i++);
80008e84:	4b 44       	lddpc	r4,80008f54 <Store_Image_0+0xd8>
80008e86:	fa c5 fd 80 	sub	r5,sp,-640
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80008e8a:	0e 93       	mov	r3,r7
	//delete file if it exits already
	char Filename_buff[15];
	i = 0;
	while(1)
	{
		nav_filelist_reset();
80008e8c:	f0 1f 00 33 	mcall	80008f58 <Store_Image_0+0xdc>
		sprintf(&Filename_buff, Image0Name, i++);
80008e90:	ee c6 ff ff 	sub	r6,r7,-1
80008e94:	1a d7       	st.w	--sp,r7
80008e96:	08 9b       	mov	r11,r4
80008e98:	0a 9c       	mov	r12,r5
80008e9a:	f0 1f 00 31 	mcall	80008f5c <Store_Image_0+0xe0>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80008e9e:	06 9b       	mov	r11,r3
80008ea0:	0a 9c       	mov	r12,r5
80008ea2:	f0 1f 00 30 	mcall	80008f60 <Store_Image_0+0xe4>
80008ea6:	2f fd       	sub	sp,-4
80008ea8:	58 0c       	cp.w	r12,0
80008eaa:	c0 30       	breq	80008eb0 <Store_Image_0+0x34>
80008eac:	0c 97       	mov	r7,r6
80008eae:	ce fb       	rjmp	80008e8c <Store_Image_0+0x10>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
80008eb0:	fa cc fd 80 	sub	r12,sp,-640
80008eb4:	f0 1f 00 2c 	mcall	80008f64 <Store_Image_0+0xe8>
	
	file_open(FOPEN_MODE_W);
80008eb8:	30 ec       	mov	r12,14
80008eba:	f0 1f 00 2c 	mcall	80008f68 <Store_Image_0+0xec>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
80008ebe:	30 eb       	mov	r11,14
80008ec0:	4a bc       	lddpc	r12,80008f6c <Store_Image_0+0xf0>
80008ec2:	f0 1f 00 2c 	mcall	80008f70 <Store_Image_0+0xf4>
	file_write_buf(DIBHead, DIBHEADERSIZE);
80008ec6:	37 cb       	mov	r11,124
80008ec8:	4a bc       	lddpc	r12,80008f74 <Store_Image_0+0xf8>
80008eca:	f0 1f 00 2a 	mcall	80008f70 <Store_Image_0+0xf4>
	
	//read and write image data
	//Image0
	//reset read pointer
	FIFO_0_nRRST_CLR;
80008ece:	30 fc       	mov	r12,15
80008ed0:	f0 1f 00 2a 	mcall	80008f78 <Store_Image_0+0xfc>
	FIFO_0_RCLK_SET;
80008ed4:	31 3c       	mov	r12,19
80008ed6:	f0 1f 00 2a 	mcall	80008f7c <Store_Image_0+0x100>

	FIFO_0_RCLK_CLR;
80008eda:	31 3c       	mov	r12,19
80008edc:	f0 1f 00 27 	mcall	80008f78 <Store_Image_0+0xfc>
	FIFO_0_nRRST_SET;
80008ee0:	30 fc       	mov	r12,15
80008ee2:	f0 1f 00 27 	mcall	80008f7c <Store_Image_0+0x100>
	
	//enable output
	FIFO_0_nOE_CLR;
80008ee6:	31 cc       	mov	r12,28
80008ee8:	f0 1f 00 24 	mcall	80008f78 <Store_Image_0+0xfc>
80008eec:	30 03       	mov	r3,0
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
80008eee:	fa c2 ff ff 	sub	r2,sp,-1
	Store_Image_0();
	FIFO_Reset(CAMERA_LEFT);
	
	return true;
}
void Store_Image_0()
80008ef2:	fa c4 fd 7f 	sub	r4,sp,-641
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
80008ef6:	31 36       	mov	r6,19
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80008ef8:	fe 75 20 00 	mov	r5,-57344
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80008efc:	1a 91       	mov	r1,sp
80008efe:	e0 60 02 80 	mov	r0,640
80008f02:	c1 f8       	rjmp	80008f40 <Store_Image_0+0xc4>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_0_RCLK_SET;
80008f04:	0c 9c       	mov	r12,r6
80008f06:	f0 1f 00 1e 	mcall	80008f7c <Store_Image_0+0x100>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80008f0a:	ea f8 02 60 	ld.w	r8,r5[608]
80008f0e:	ae 88       	st.b	r7[0x0],r8
			FIFO_0_RCLK_CLR;
80008f10:	0c 9c       	mov	r12,r6
80008f12:	f0 1f 00 1a 	mcall	80008f78 <Store_Image_0+0xfc>
			FIFO_0_RCLK_SET;
80008f16:	0c 9c       	mov	r12,r6
80008f18:	f0 1f 00 19 	mcall	80008f7c <Store_Image_0+0x100>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80008f1c:	ea f8 02 60 	ld.w	r8,r5[608]
80008f20:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_0_RCLK_CLR;
80008f24:	0c 9c       	mov	r12,r6
80008f26:	f0 1f 00 15 	mcall	80008f78 <Store_Image_0+0xfc>
80008f2a:	2f e7       	sub	r7,-2
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
80008f2c:	08 37       	cp.w	r7,r4
80008f2e:	ce b1       	brne	80008f04 <Store_Image_0+0x88>
			FIFO_0_RCLK_CLR;
			FIFO_0_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80008f30:	00 9b       	mov	r11,r0
80008f32:	1a 9c       	mov	r12,sp
80008f34:	f0 1f 00 0f 	mcall	80008f70 <Store_Image_0+0xf4>
	
	//enable output
	FIFO_0_nOE_CLR;
	uint8_t buffer[WIDTH * 2];
	
	for(j = 0; j < HEIGHT; j++)
80008f38:	2f f3       	sub	r3,-1
80008f3a:	e0 43 00 f0 	cp.w	r3,240
80008f3e:	c0 30       	breq	80008f44 <Store_Image_0+0xc8>
80008f40:	04 97       	mov	r7,r2
80008f42:	ce 1b       	rjmp	80008f04 <Store_Image_0+0x88>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_0_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_0_nOE_SET;
80008f44:	31 cc       	mov	r12,28
80008f46:	f0 1f 00 0e 	mcall	80008f7c <Store_Image_0+0x100>
	file_close();
80008f4a:	f0 1f 00 0e 	mcall	80008f80 <Store_Image_0+0x104>

	
}
80008f4e:	fe 3d fd 70 	sub	sp,-656
80008f52:	d8 32       	popm	r0-r7,pc
80008f54:	80 01       	ld.sh	r1,r0[0x0]
80008f56:	37 cc       	mov	r12,124
80008f58:	80 00       	ld.sh	r0,r0[0x0]
80008f5a:	72 78       	ld.w	r8,r9[0x1c]
80008f5c:	80 00       	ld.sh	r0,r0[0x0]
80008f5e:	a3 34       	mul	r4,r1
80008f60:	80 00       	ld.sh	r0,r0[0x0]
80008f62:	72 48       	ld.w	r8,r9[0x10]
80008f64:	80 00       	ld.sh	r0,r0[0x0]
80008f66:	72 90       	ld.w	r0,r9[0x24]
80008f68:	80 00       	ld.sh	r0,r0[0x0]
80008f6a:	6f 30       	ld.w	r0,r7[0x4c]
80008f6c:	80 01       	ld.sh	r1,r0[0x0]
80008f6e:	37 0c       	mov	r12,112
80008f70:	80 00       	ld.sh	r0,r0[0x0]
80008f72:	6d bc       	ld.w	r12,r6[0x6c]
80008f74:	80 01       	ld.sh	r1,r0[0x0]
80008f76:	37 1c       	mov	r12,113
80008f78:	80 00       	ld.sh	r0,r0[0x0]
80008f7a:	32 2a       	mov	r10,34
80008f7c:	80 00       	ld.sh	r0,r0[0x0]
80008f7e:	32 0e       	mov	lr,32
80008f80:	80 00       	ld.sh	r0,r0[0x0]
80008f82:	6d 80       	ld.w	r0,r6[0x60]

80008f84 <Store_Image_1>:

void Store_Image_1()
{
80008f84:	d4 31       	pushm	r0-r7,lr
80008f86:	fa cd 02 90 	sub	sp,sp,656
	uint8_t buffer[WIDTH * 2];
	char Filename_buff[15];
	i = 0;
	//make file
	//delete file if it exits already
	nav_filelist_reset();
80008f8a:	f0 1f 00 3f 	mcall	80009084 <Store_Image_1+0x100>
80008f8e:	30 08       	mov	r8,0
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
80008f90:	4b e5       	lddpc	r5,80009088 <Store_Image_1+0x104>
80008f92:	1a 97       	mov	r7,sp
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80008f94:	10 94       	mov	r4,r8
	//make file
	//delete file if it exits already
	nav_filelist_reset();
	while(1)
	{
		sprintf(&Filename_buff, Image1Name, i++);
80008f96:	f0 c6 ff ff 	sub	r6,r8,-1
80008f9a:	1a d8       	st.w	--sp,r8
80008f9c:	0a 9b       	mov	r11,r5
80008f9e:	0e 9c       	mov	r12,r7
80008fa0:	f0 1f 00 3b 	mcall	8000908c <Store_Image_1+0x108>
		if(nav_filelist_findname((FS_STRING)Filename_buff, false))
80008fa4:	08 9b       	mov	r11,r4
80008fa6:	0e 9c       	mov	r12,r7
80008fa8:	f0 1f 00 3a 	mcall	80009090 <Store_Image_1+0x10c>
80008fac:	0c 98       	mov	r8,r6
80008fae:	2f fd       	sub	sp,-4
80008fb0:	58 0c       	cp.w	r12,0
80008fb2:	cf 21       	brne	80008f96 <Store_Image_1+0x12>
		else
		{
			break;
		}
	}	
	nav_file_create((FS_STRING)Filename_buff);//create file
80008fb4:	1a 9c       	mov	r12,sp
80008fb6:	f0 1f 00 38 	mcall	80009094 <Store_Image_1+0x110>
	file_open(FOPEN_MODE_W);
80008fba:	30 ec       	mov	r12,14
80008fbc:	f0 1f 00 37 	mcall	80009098 <Store_Image_1+0x114>
	//write bitmap headers
	file_write_buf(BMPHeader, BMPHEADERSIZE);
80008fc0:	30 eb       	mov	r11,14
80008fc2:	4b 7c       	lddpc	r12,8000909c <Store_Image_1+0x118>
80008fc4:	f0 1f 00 37 	mcall	800090a0 <Store_Image_1+0x11c>
	file_write_buf(DIBHead, DIBHEADERSIZE);
80008fc8:	37 cb       	mov	r11,124
80008fca:	4b 7c       	lddpc	r12,800090a4 <Store_Image_1+0x120>
80008fcc:	f0 1f 00 35 	mcall	800090a0 <Store_Image_1+0x11c>
	//Image1
	//reset read pointer
	FIFO_1_nRRST_CLR;
80008fd0:	31 6c       	mov	r12,22
80008fd2:	f0 1f 00 36 	mcall	800090a8 <Store_Image_1+0x124>
	FIFO_1_RCLK_SET;
80008fd6:	31 7c       	mov	r12,23
80008fd8:	f0 1f 00 35 	mcall	800090ac <Store_Image_1+0x128>

	FIFO_1_RCLK_CLR;
80008fdc:	31 7c       	mov	r12,23
80008fde:	f0 1f 00 33 	mcall	800090a8 <Store_Image_1+0x124>
	FIFO_1_nRRST_SET;
80008fe2:	31 6c       	mov	r12,22
80008fe4:	f0 1f 00 32 	mcall	800090ac <Store_Image_1+0x128>
	
	//enable output
	FIFO_1_nOE_CLR;
80008fe8:	31 bc       	mov	r12,27
80008fea:	f0 1f 00 30 	mcall	800090a8 <Store_Image_1+0x124>
80008fee:	30 03       	mov	r3,0
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
80008ff0:	fa c2 ff ef 	sub	r2,sp,-17
	file_close();

	
}

void Store_Image_1()
80008ff4:	fa c4 fd 6f 	sub	r4,sp,-657
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
80008ff8:	31 76       	mov	r6,23
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
80008ffa:	fe 75 20 00 	mov	r5,-57344
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80008ffe:	fa c1 ff f0 	sub	r1,sp,-16
80009002:	e0 60 02 80 	mov	r0,640
80009006:	c2 78       	rjmp	80009054 <Store_Image_1+0xd0>
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
		{
			FIFO_1_RCLK_SET;
80009008:	0c 9c       	mov	r12,r6
8000900a:	f0 1f 00 29 	mcall	800090ac <Store_Image_1+0x128>
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000900e:	ea f8 02 60 	ld.w	r8,r5[608]
80009012:	ae 88       	st.b	r7[0x0],r8
			FIFO_1_RCLK_CLR;
80009014:	0c 9c       	mov	r12,r6
80009016:	f0 1f 00 25 	mcall	800090a8 <Store_Image_1+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000901a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000901e:	f0 ca ff f0 	sub	r10,r8,-16
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009022:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009026:	14 38       	cp.w	r8,r10
80009028:	e0 88 00 08 	brls	80009038 <Store_Image_1+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000902c:	12 38       	cp.w	r8,r9
8000902e:	fe 98 ff fa 	brls	80009022 <Store_Image_1+0x9e>
80009032:	12 3a       	cp.w	r10,r9
80009034:	c1 a3       	brcs	80009068 <Store_Image_1+0xe4>
80009036:	cf 6b       	rjmp	80009022 <Store_Image_1+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009038:	12 38       	cp.w	r8,r9
8000903a:	e0 8b 00 17 	brhi	80009068 <Store_Image_1+0xe4>
8000903e:	12 3a       	cp.w	r10,r9
80009040:	c1 43       	brcs	80009068 <Store_Image_1+0xe4>
80009042:	cf 0b       	rjmp	80009022 <Store_Image_1+0x9e>
			delay_us(1);
			FIFO_1_RCLK_SET;
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
80009044:	00 9b       	mov	r11,r0
80009046:	02 9c       	mov	r12,r1
80009048:	f0 1f 00 16 	mcall	800090a0 <Store_Image_1+0x11c>
	
	//enable output
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
8000904c:	2f f3       	sub	r3,-1
8000904e:	e0 43 00 f0 	cp.w	r3,240
80009052:	c0 30       	breq	80009058 <Store_Image_1+0xd4>
80009054:	04 97       	mov	r7,r2
80009056:	cd 9b       	rjmp	80009008 <Store_Image_1+0x84>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
		}
		file_write_buf(&buffer, WIDTH * 2);
	}
	FIFO_1_nOE_SET;//disable output
80009058:	31 bc       	mov	r12,27
8000905a:	f0 1f 00 15 	mcall	800090ac <Store_Image_1+0x128>
	file_close();
8000905e:	f0 1f 00 15 	mcall	800090b0 <Store_Image_1+0x12c>
80009062:	fe 3d fd 70 	sub	sp,-656
80009066:	d8 32       	popm	r0-r7,pc
		{
			FIFO_1_RCLK_SET;
			buffer[i+1] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
			FIFO_1_RCLK_CLR;
			delay_us(1);
			FIFO_1_RCLK_SET;
80009068:	0c 9c       	mov	r12,r6
8000906a:	f0 1f 00 11 	mcall	800090ac <Store_Image_1+0x128>
			buffer[i] = ((AVR32_GPIO.port[1].pvr) & 0xFF);//CAMERA_INPUT;
8000906e:	ea f8 02 60 	ld.w	r8,r5[608]
80009072:	ef 68 ff ff 	st.b	r7[-1],r8
			FIFO_1_RCLK_CLR;
80009076:	0c 9c       	mov	r12,r6
80009078:	f0 1f 00 0c 	mcall	800090a8 <Store_Image_1+0x124>
8000907c:	2f e7       	sub	r7,-2
	FIFO_1_nOE_CLR;
	/*uint8_t buffer[WIDTH * 2];*/
	
	for(j = 0; j < HEIGHT; j++)
	{
		for(i = 0; i < WIDTH*2; i+=2)
8000907e:	08 37       	cp.w	r7,r4
80009080:	cc 41       	brne	80009008 <Store_Image_1+0x84>
80009082:	ce 1b       	rjmp	80009044 <Store_Image_1+0xc0>
80009084:	80 00       	ld.sh	r0,r0[0x0]
80009086:	72 78       	ld.w	r8,r9[0x1c]
80009088:	80 01       	ld.sh	r1,r0[0x0]
8000908a:	37 dc       	mov	r12,125
8000908c:	80 00       	ld.sh	r0,r0[0x0]
8000908e:	a3 34       	mul	r4,r1
80009090:	80 00       	ld.sh	r0,r0[0x0]
80009092:	72 48       	ld.w	r8,r9[0x10]
80009094:	80 00       	ld.sh	r0,r0[0x0]
80009096:	72 90       	ld.w	r0,r9[0x24]
80009098:	80 00       	ld.sh	r0,r0[0x0]
8000909a:	6f 30       	ld.w	r0,r7[0x4c]
8000909c:	80 01       	ld.sh	r1,r0[0x0]
8000909e:	37 0c       	mov	r12,112
800090a0:	80 00       	ld.sh	r0,r0[0x0]
800090a2:	6d bc       	ld.w	r12,r6[0x6c]
800090a4:	80 01       	ld.sh	r1,r0[0x0]
800090a6:	37 1c       	mov	r12,113
800090a8:	80 00       	ld.sh	r0,r0[0x0]
800090aa:	32 2a       	mov	r10,34
800090ac:	80 00       	ld.sh	r0,r0[0x0]
800090ae:	32 0e       	mov	lr,32
800090b0:	80 00       	ld.sh	r0,r0[0x0]
800090b2:	6d 80       	ld.w	r0,r6[0x60]

800090b4 <Store_Both_Images>:
}



bool Store_Both_Images()
{
800090b4:	d4 01       	pushm	lr
	if(Photos_Ready() == false)
800090b6:	f0 1f 00 08 	mcall	800090d4 <Store_Both_Images+0x20>
800090ba:	c0 c0       	breq	800090d2 <Store_Both_Images+0x1e>
		return false;
	
	Store_Image_1();
800090bc:	f0 1f 00 07 	mcall	800090d8 <Store_Both_Images+0x24>
	FIFO_Reset(CAMERA_RIGHT);
800090c0:	30 2c       	mov	r12,2
800090c2:	f0 1f 00 07 	mcall	800090dc <Store_Both_Images+0x28>
	
	Store_Image_0();
800090c6:	f0 1f 00 07 	mcall	800090e0 <Store_Both_Images+0x2c>
	FIFO_Reset(CAMERA_LEFT);
800090ca:	30 1c       	mov	r12,1
800090cc:	f0 1f 00 04 	mcall	800090dc <Store_Both_Images+0x28>
800090d0:	30 1c       	mov	r12,1
	
	return true;
}
800090d2:	d8 02       	popm	pc
800090d4:	80 00       	ld.sh	r0,r0[0x0]
800090d6:	8d a8       	st.w	r6[0x28],r8
800090d8:	80 00       	ld.sh	r0,r0[0x0]
800090da:	8f 84       	st.w	r7[0x20],r4
800090dc:	80 00       	ld.sh	r0,r0[0x0]
800090de:	8e 08       	ld.sh	r8,r7[0x0]
800090e0:	80 00       	ld.sh	r0,r0[0x0]
800090e2:	8e 7c       	ld.sh	r12,r7[0xe]

800090e4 <FIFO_Init>:
	FIFO_Init();
	//Enable_global_interrupt();
	
}
void FIFO_Init()
{
800090e4:	d4 01       	pushm	lr
	//Disable both outputs
	FIFO_0_nOE_SET
800090e6:	31 cc       	mov	r12,28
800090e8:	f0 1f 00 97 	mcall	80009344 <FIFO_Init+0x260>
	FIFO_1_nOE_SET
800090ec:	31 bc       	mov	r12,27
800090ee:	f0 1f 00 96 	mcall	80009344 <FIFO_Init+0x260>
	
	//Reset Buffer 0
	FIFO_0_WRST_CLR;
800090f2:	31 5c       	mov	r12,21
800090f4:	f0 1f 00 95 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_0_RCLK_CLR;
800090f8:	31 3c       	mov	r12,19
800090fa:	f0 1f 00 94 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
800090fe:	30 fc       	mov	r12,15
80009100:	f0 1f 00 91 	mcall	80009344 <FIFO_Init+0x260>
	FIFO_0_WEN_CLR;
80009104:	31 4c       	mov	r12,20
80009106:	f0 1f 00 91 	mcall	80009348 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000910a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000910e:	f0 ca ff 60 	sub	r10,r8,-160
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009112:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009116:	14 38       	cp.w	r8,r10
80009118:	e0 88 00 09 	brls	8000912a <FIFO_Init+0x46>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000911c:	12 38       	cp.w	r8,r9
8000911e:	fe 98 ff fa 	brls	80009112 <FIFO_Init+0x2e>
80009122:	12 3a       	cp.w	r10,r9
80009124:	e0 83 00 ac 	brlo	8000927c <FIFO_Init+0x198>
80009128:	cf 5b       	rjmp	80009112 <FIFO_Init+0x2e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000912a:	12 38       	cp.w	r8,r9
8000912c:	e0 8b 00 a8 	brhi	8000927c <FIFO_Init+0x198>
80009130:	12 3a       	cp.w	r10,r9
80009132:	e0 83 00 a5 	brlo	8000927c <FIFO_Init+0x198>
80009136:	ce eb       	rjmp	80009112 <FIFO_Init+0x2e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009138:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000913c:	14 38       	cp.w	r8,r10
8000913e:	e0 88 00 09 	brls	80009150 <FIFO_Init+0x6c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009142:	12 38       	cp.w	r8,r9
80009144:	fe 98 ff fa 	brls	80009138 <FIFO_Init+0x54>
80009148:	12 3a       	cp.w	r10,r9
8000914a:	e0 83 00 a1 	brlo	8000928c <FIFO_Init+0x1a8>
8000914e:	cf 5b       	rjmp	80009138 <FIFO_Init+0x54>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009150:	12 38       	cp.w	r8,r9
80009152:	e0 8b 00 9d 	brhi	8000928c <FIFO_Init+0x1a8>
80009156:	12 3a       	cp.w	r10,r9
80009158:	e0 83 00 9a 	brlo	8000928c <FIFO_Init+0x1a8>
8000915c:	ce eb       	rjmp	80009138 <FIFO_Init+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000915e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009162:	14 38       	cp.w	r8,r10
80009164:	e0 88 00 09 	brls	80009176 <FIFO_Init+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009168:	12 38       	cp.w	r8,r9
8000916a:	fe 98 ff fa 	brls	8000915e <FIFO_Init+0x7a>
8000916e:	12 3a       	cp.w	r10,r9
80009170:	e0 83 00 99 	brlo	800092a2 <FIFO_Init+0x1be>
80009174:	cf 5b       	rjmp	8000915e <FIFO_Init+0x7a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009176:	12 38       	cp.w	r8,r9
80009178:	e0 8b 00 95 	brhi	800092a2 <FIFO_Init+0x1be>
8000917c:	12 3a       	cp.w	r10,r9
8000917e:	e0 83 00 92 	brlo	800092a2 <FIFO_Init+0x1be>
80009182:	ce eb       	rjmp	8000915e <FIFO_Init+0x7a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009184:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009188:	14 38       	cp.w	r8,r10
8000918a:	e0 88 00 09 	brls	8000919c <FIFO_Init+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000918e:	12 38       	cp.w	r8,r9
80009190:	fe 98 ff fa 	brls	80009184 <FIFO_Init+0xa0>
80009194:	12 3a       	cp.w	r10,r9
80009196:	e0 83 00 8e 	brlo	800092b2 <FIFO_Init+0x1ce>
8000919a:	cf 5b       	rjmp	80009184 <FIFO_Init+0xa0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000919c:	12 38       	cp.w	r8,r9
8000919e:	e0 8b 00 8a 	brhi	800092b2 <FIFO_Init+0x1ce>
800091a2:	12 3a       	cp.w	r10,r9
800091a4:	e0 83 00 87 	brlo	800092b2 <FIFO_Init+0x1ce>
800091a8:	ce eb       	rjmp	80009184 <FIFO_Init+0xa0>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091aa:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800091ae:	14 38       	cp.w	r8,r10
800091b0:	e0 88 00 09 	brls	800091c2 <FIFO_Init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800091b4:	12 38       	cp.w	r8,r9
800091b6:	fe 98 ff fa 	brls	800091aa <FIFO_Init+0xc6>
800091ba:	12 3a       	cp.w	r10,r9
800091bc:	e0 83 00 86 	brlo	800092c8 <FIFO_Init+0x1e4>
800091c0:	cf 5b       	rjmp	800091aa <FIFO_Init+0xc6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800091c2:	12 38       	cp.w	r8,r9
800091c4:	e0 8b 00 82 	brhi	800092c8 <FIFO_Init+0x1e4>
800091c8:	12 3a       	cp.w	r10,r9
800091ca:	c7 f3       	brcs	800092c8 <FIFO_Init+0x1e4>
800091cc:	ce fb       	rjmp	800091aa <FIFO_Init+0xc6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091ce:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800091d2:	14 38       	cp.w	r8,r10
800091d4:	e0 88 00 09 	brls	800091e6 <FIFO_Init+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800091d8:	12 38       	cp.w	r8,r9
800091da:	fe 98 ff fa 	brls	800091ce <FIFO_Init+0xea>
800091de:	12 3a       	cp.w	r10,r9
800091e0:	e0 83 00 88 	brlo	800092f0 <FIFO_Init+0x20c>
800091e4:	cf 5b       	rjmp	800091ce <FIFO_Init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800091e6:	12 38       	cp.w	r8,r9
800091e8:	e0 8b 00 84 	brhi	800092f0 <FIFO_Init+0x20c>
800091ec:	12 3a       	cp.w	r10,r9
800091ee:	e0 83 00 81 	brlo	800092f0 <FIFO_Init+0x20c>
800091f2:	ce eb       	rjmp	800091ce <FIFO_Init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091f4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800091f8:	14 38       	cp.w	r8,r10
800091fa:	e0 88 00 08 	brls	8000920a <FIFO_Init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800091fe:	12 38       	cp.w	r8,r9
80009200:	fe 98 ff fa 	brls	800091f4 <FIFO_Init+0x110>
80009204:	12 3a       	cp.w	r10,r9
80009206:	c7 d3       	brcs	80009300 <FIFO_Init+0x21c>
80009208:	cf 6b       	rjmp	800091f4 <FIFO_Init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000920a:	12 38       	cp.w	r8,r9
8000920c:	e0 8b 00 7a 	brhi	80009300 <FIFO_Init+0x21c>
80009210:	12 3a       	cp.w	r10,r9
80009212:	c7 73       	brcs	80009300 <FIFO_Init+0x21c>
80009214:	cf 0b       	rjmp	800091f4 <FIFO_Init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009216:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000921a:	14 38       	cp.w	r8,r10
8000921c:	e0 88 00 08 	brls	8000922c <FIFO_Init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009220:	12 38       	cp.w	r8,r9
80009222:	fe 98 ff fa 	brls	80009216 <FIFO_Init+0x132>
80009226:	12 3a       	cp.w	r10,r9
80009228:	c7 73       	brcs	80009316 <FIFO_Init+0x232>
8000922a:	cf 6b       	rjmp	80009216 <FIFO_Init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000922c:	12 38       	cp.w	r8,r9
8000922e:	e0 8b 00 74 	brhi	80009316 <FIFO_Init+0x232>
80009232:	12 3a       	cp.w	r10,r9
80009234:	c7 13       	brcs	80009316 <FIFO_Init+0x232>
80009236:	cf 0b       	rjmp	80009216 <FIFO_Init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009238:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000923c:	14 38       	cp.w	r8,r10
8000923e:	e0 88 00 08 	brls	8000924e <FIFO_Init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009242:	12 38       	cp.w	r8,r9
80009244:	fe 98 ff fa 	brls	80009238 <FIFO_Init+0x154>
80009248:	12 3a       	cp.w	r10,r9
8000924a:	c6 e3       	brcs	80009326 <FIFO_Init+0x242>
8000924c:	cf 6b       	rjmp	80009238 <FIFO_Init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000924e:	12 38       	cp.w	r8,r9
80009250:	e0 8b 00 6b 	brhi	80009326 <FIFO_Init+0x242>
80009254:	12 3a       	cp.w	r10,r9
80009256:	c6 83       	brcs	80009326 <FIFO_Init+0x242>
80009258:	cf 0b       	rjmp	80009238 <FIFO_Init+0x154>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000925a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000925e:	14 38       	cp.w	r8,r10
80009260:	e0 88 00 08 	brls	80009270 <FIFO_Init+0x18c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009264:	12 38       	cp.w	r8,r9
80009266:	fe 98 ff fa 	brls	8000925a <FIFO_Init+0x176>
8000926a:	12 3a       	cp.w	r10,r9
8000926c:	c6 83       	brcs	8000933c <FIFO_Init+0x258>
8000926e:	cf 6b       	rjmp	8000925a <FIFO_Init+0x176>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009270:	12 38       	cp.w	r8,r9
80009272:	e0 8b 00 65 	brhi	8000933c <FIFO_Init+0x258>
80009276:	12 3a       	cp.w	r10,r9
80009278:	c6 23       	brcs	8000933c <FIFO_Init+0x258>
8000927a:	cf 0b       	rjmp	8000925a <FIFO_Init+0x176>
	delay_us(10);
	FIFO_0_RCLK_SET;
8000927c:	31 3c       	mov	r12,19
8000927e:	f0 1f 00 32 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009282:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009286:	f0 ca ff 60 	sub	r10,r8,-160
8000928a:	c5 7b       	rjmp	80009138 <FIFO_Init+0x54>
	delay_us(10);
	FIFO_0_RCLK_CLR;
8000928c:	31 3c       	mov	r12,19
8000928e:	f0 1f 00 2f 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_0_nRRST_CLR;
80009292:	30 fc       	mov	r12,15
80009294:	f0 1f 00 2d 	mcall	80009348 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009298:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000929c:	f0 ca ff 60 	sub	r10,r8,-160
800092a0:	c5 fb       	rjmp	8000915e <FIFO_Init+0x7a>
	delay_us(10);
	FIFO_0_RCLK_SET;
800092a2:	31 3c       	mov	r12,19
800092a4:	f0 1f 00 28 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092a8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092ac:	f0 ca ff 60 	sub	r10,r8,-160
800092b0:	c6 ab       	rjmp	80009184 <FIFO_Init+0xa0>
	delay_us(10);
	FIFO_0_RCLK_CLR;
800092b2:	31 3c       	mov	r12,19
800092b4:	f0 1f 00 25 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_0_nRRST_SET;
800092b8:	30 fc       	mov	r12,15
800092ba:	f0 1f 00 23 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092be:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092c2:	f0 ca ff 60 	sub	r10,r8,-160
800092c6:	c7 2b       	rjmp	800091aa <FIFO_Init+0xc6>
	delay_us(10);
	FIFO_0_WRST_SET;
800092c8:	31 5c       	mov	r12,21
800092ca:	f0 1f 00 1f 	mcall	80009344 <FIFO_Init+0x260>
	
	//Reset Buffer 1
	FIFO_1_WRST_CLR;
800092ce:	31 9c       	mov	r12,25
800092d0:	f0 1f 00 1e 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_1_RCLK_CLR;
800092d4:	31 7c       	mov	r12,23
800092d6:	f0 1f 00 1d 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
800092da:	31 6c       	mov	r12,22
800092dc:	f0 1f 00 1a 	mcall	80009344 <FIFO_Init+0x260>
	FIFO_1_WEN_CLR;
800092e0:	31 8c       	mov	r12,24
800092e2:	f0 1f 00 1a 	mcall	80009348 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092e6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092ea:	f0 ca ff 60 	sub	r10,r8,-160
800092ee:	c7 0b       	rjmp	800091ce <FIFO_Init+0xea>
	delay_us(10);
	FIFO_1_RCLK_SET;
800092f0:	31 7c       	mov	r12,23
800092f2:	f0 1f 00 15 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092f6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092fa:	f0 ca ff 60 	sub	r10,r8,-160
800092fe:	c7 bb       	rjmp	800091f4 <FIFO_Init+0x110>
	delay_us(10);
	FIFO_0_RCLK_CLR;
80009300:	31 3c       	mov	r12,19
80009302:	f0 1f 00 12 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_1_nRRST_CLR;
80009306:	31 6c       	mov	r12,22
80009308:	f0 1f 00 10 	mcall	80009348 <FIFO_Init+0x264>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000930c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009310:	f0 ca ff 60 	sub	r10,r8,-160
80009314:	c8 1b       	rjmp	80009216 <FIFO_Init+0x132>
	delay_us(10);
	FIFO_1_RCLK_SET;
80009316:	31 7c       	mov	r12,23
80009318:	f0 1f 00 0b 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000931c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009320:	f0 ca ff 60 	sub	r10,r8,-160
80009324:	c8 ab       	rjmp	80009238 <FIFO_Init+0x154>
	delay_us(10);
	FIFO_1_RCLK_CLR;
80009326:	31 7c       	mov	r12,23
80009328:	f0 1f 00 08 	mcall	80009348 <FIFO_Init+0x264>
	FIFO_1_nRRST_SET;
8000932c:	31 6c       	mov	r12,22
8000932e:	f0 1f 00 06 	mcall	80009344 <FIFO_Init+0x260>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009332:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009336:	f0 ca ff 60 	sub	r10,r8,-160
8000933a:	c9 0b       	rjmp	8000925a <FIFO_Init+0x176>
	delay_us(10);
	FIFO_1_WRST_SET;
8000933c:	31 9c       	mov	r12,25
8000933e:	f0 1f 00 02 	mcall	80009344 <FIFO_Init+0x260>
}
80009342:	d8 02       	popm	pc
80009344:	80 00       	ld.sh	r0,r0[0x0]
80009346:	32 0e       	mov	lr,32
80009348:	80 00       	ld.sh	r0,r0[0x0]
8000934a:	32 2a       	mov	r10,34

8000934c <TakePhoto>:
	}
	
}

int TakePhoto(uint8_t Cameras)
{
8000934c:	d4 01       	pushm	lr
	
	//Only want to take pictures on cameras found
	if(((OV7670_Status.VSYNC0_State != IDLE) || !OV7670_Status.Camera_0_Found) && ((OV7670_Status.VSYNC1_State != IDLE) || !OV7670_Status.Camera_1_Found))
8000934e:	49 a8       	lddpc	r8,800093b4 <TakePhoto+0x68>
80009350:	11 d9       	ld.ub	r9,r8[0x5]
80009352:	30 08       	mov	r8,0
80009354:	f0 09 18 00 	cp.b	r9,r8
80009358:	c0 71       	brne	80009366 <TakePhoto+0x1a>
8000935a:	49 78       	lddpc	r8,800093b4 <TakePhoto+0x68>
8000935c:	11 99       	ld.ub	r9,r8[0x1]
8000935e:	30 08       	mov	r8,0
80009360:	f0 09 18 00 	cp.b	r9,r8
80009364:	c0 d1       	brne	8000937e <TakePhoto+0x32>
80009366:	49 48       	lddpc	r8,800093b4 <TakePhoto+0x68>
80009368:	11 e9       	ld.ub	r9,r8[0x6]
8000936a:	30 08       	mov	r8,0
8000936c:	f0 09 18 00 	cp.b	r9,r8
80009370:	c1 f1       	brne	800093ae <TakePhoto+0x62>
80009372:	49 18       	lddpc	r8,800093b4 <TakePhoto+0x68>
80009374:	11 a9       	ld.ub	r9,r8[0x2]
80009376:	30 08       	mov	r8,0
80009378:	f0 09 18 00 	cp.b	r9,r8
8000937c:	c1 90       	breq	800093ae <TakePhoto+0x62>
		return CAMERAS_BUSY; //wait for cameras to be idle if they are found
	
	if(Cameras & CAMERA_LEFT)
8000937e:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80009382:	c0 40       	breq	8000938a <TakePhoto+0x3e>
		OV7670_Status.VSYNC0_State = TAKE_PHOTO;
80009384:	30 19       	mov	r9,1
80009386:	48 c8       	lddpc	r8,800093b4 <TakePhoto+0x68>
80009388:	b0 d9       	st.b	r8[0x5],r9
		
	if(Cameras & CAMERA_RIGHT)
8000938a:	e2 1c 00 02 	andl	r12,0x2,COH
8000938e:	c0 40       	breq	80009396 <TakePhoto+0x4a>
		OV7670_Status.VSYNC1_State = TAKE_PHOTO;
80009390:	30 19       	mov	r9,1
80009392:	48 98       	lddpc	r8,800093b4 <TakePhoto+0x68>
80009394:	b0 e9       	st.b	r8[0x6],r9
	VSYNC_0_ENABLE_INTERRUPT;
80009396:	30 4b       	mov	r11,4
80009398:	fe 7c 14 00 	mov	r12,-60416
8000939c:	f0 1f 00 07 	mcall	800093b8 <TakePhoto+0x6c>
	VSYNC_1_ENABLE_INTERRUPT;
800093a0:	30 1b       	mov	r11,1
800093a2:	fe 7c 14 00 	mov	r12,-60416
800093a6:	f0 1f 00 05 	mcall	800093b8 <TakePhoto+0x6c>
800093aa:	30 2c       	mov	r12,2
	return TAKING_PHOTO;
800093ac:	d8 02       	popm	pc
800093ae:	30 4c       	mov	r12,4
	
}
800093b0:	d8 02       	popm	pc
800093b2:	00 00       	add	r0,r0
800093b4:	00 00       	add	r0,r0
800093b6:	14 e8       	st.h	--r10,r8
800093b8:	80 00       	ld.sh	r0,r0[0x0]
800093ba:	30 2a       	mov	r10,2

800093bc <VSYNC0_Handler>:
// /*#include "CustomDevices/MotorDriver.h"*/
// SDCard
// #include "CustomDevices/SD_Card.h"

__attribute__((__interrupt__)) static void VSYNC0_Handler (void)
{
800093bc:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC0 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_0_LINE);
800093be:	30 4b       	mov	r11,4
800093c0:	fe 7c 14 00 	mov	r12,-60416
800093c4:	f0 1f 00 18 	mcall	80009424 <VSYNC0_Handler+0x68>
	//VSYNC_0_DISABLE_INTERRUPT;
	switch(OV7670_Status.VSYNC0_State)
800093c8:	49 88       	lddpc	r8,80009428 <VSYNC0_Handler+0x6c>
800093ca:	11 d8       	ld.ub	r8,r8[0x5]
800093cc:	30 29       	mov	r9,2
800093ce:	f2 08 18 00 	cp.b	r8,r9
800093d2:	c1 00       	breq	800093f2 <VSYNC0_Handler+0x36>
800093d4:	30 39       	mov	r9,3
800093d6:	f2 08 18 00 	cp.b	r8,r9
800093da:	c1 30       	breq	80009400 <VSYNC0_Handler+0x44>
800093dc:	30 19       	mov	r9,1
800093de:	f2 08 18 00 	cp.b	r8,r9
800093e2:	c1 31       	brne	80009408 <VSYNC0_Handler+0x4c>
	{
		case(TAKE_PHOTO):
			FIFO_0_WEN_SET;
800093e4:	31 4c       	mov	r12,20
800093e6:	f0 1f 00 12 	mcall	8000942c <VSYNC0_Handler+0x70>
			OV7670_Status.VSYNC0_State = TAKING_PHOTO;
800093ea:	30 29       	mov	r9,2
800093ec:	48 f8       	lddpc	r8,80009428 <VSYNC0_Handler+0x6c>
800093ee:	b0 d9       	st.b	r8[0x5],r9
			break;
800093f0:	c1 78       	rjmp	8000941e <VSYNC0_Handler+0x62>
			
		case(TAKING_PHOTO):
			FIFO_0_WEN_CLR;
800093f2:	31 4c       	mov	r12,20
800093f4:	f0 1f 00 0f 	mcall	80009430 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = TAKEN_PHOTO;
800093f8:	30 39       	mov	r9,3
800093fa:	48 c8       	lddpc	r8,80009428 <VSYNC0_Handler+0x6c>
800093fc:	b0 d9       	st.b	r8[0x5],r9
			break;
800093fe:	c1 08       	rjmp	8000941e <VSYNC0_Handler+0x62>
		
		case (TAKEN_PHOTO):
			FIFO_0_WEN_CLR;
80009400:	31 4c       	mov	r12,20
80009402:	f0 1f 00 0c 	mcall	80009430 <VSYNC0_Handler+0x74>
			break;
80009406:	c0 c8       	rjmp	8000941e <VSYNC0_Handler+0x62>
			
		case(IDLE):
		default:
			VSYNC_0_DISABLE_INTERRUPT;
80009408:	30 4b       	mov	r11,4
8000940a:	fe 7c 14 00 	mov	r12,-60416
8000940e:	f0 1f 00 0a 	mcall	80009434 <VSYNC0_Handler+0x78>
			FIFO_0_WEN_CLR;
80009412:	31 4c       	mov	r12,20
80009414:	f0 1f 00 07 	mcall	80009430 <VSYNC0_Handler+0x74>
			OV7670_Status.VSYNC0_State = IDLE;
80009418:	30 09       	mov	r9,0
8000941a:	48 48       	lddpc	r8,80009428 <VSYNC0_Handler+0x6c>
8000941c:	b0 d9       	st.b	r8[0x5],r9
			break;
	}
}
8000941e:	d4 02       	popm	lr
80009420:	d6 03       	rete
80009422:	00 00       	add	r0,r0
80009424:	80 00       	ld.sh	r0,r0[0x0]
80009426:	30 34       	mov	r4,3
80009428:	00 00       	add	r0,r0
8000942a:	14 e8       	st.h	--r10,r8
8000942c:	80 00       	ld.sh	r0,r0[0x0]
8000942e:	32 0e       	mov	lr,32
80009430:	80 00       	ld.sh	r0,r0[0x0]
80009432:	32 2a       	mov	r10,34
80009434:	80 00       	ld.sh	r0,r0[0x0]
80009436:	30 4a       	mov	r10,4

80009438 <VSYNC1_Handler>:

__attribute__((__interrupt__)) static void VSYNC1_Handler (void)
{
80009438:	d4 01       	pushm	lr
	//print_dbg("\n\rVSYNC1 Detected!");
	eic_clear_interrupt_line(&AVR32_EIC, VSYNC_1_LINE);
8000943a:	30 1b       	mov	r11,1
8000943c:	fe 7c 14 00 	mov	r12,-60416
80009440:	f0 1f 00 18 	mcall	800094a0 <VSYNC1_Handler+0x68>
	//VSYNC_1_DISABLE_INTERRUPT;
		switch(OV7670_Status.VSYNC1_State)
80009444:	49 88       	lddpc	r8,800094a4 <VSYNC1_Handler+0x6c>
80009446:	11 e8       	ld.ub	r8,r8[0x6]
80009448:	30 29       	mov	r9,2
8000944a:	f2 08 18 00 	cp.b	r8,r9
8000944e:	c1 00       	breq	8000946e <VSYNC1_Handler+0x36>
80009450:	30 39       	mov	r9,3
80009452:	f2 08 18 00 	cp.b	r8,r9
80009456:	c1 30       	breq	8000947c <VSYNC1_Handler+0x44>
80009458:	30 19       	mov	r9,1
8000945a:	f2 08 18 00 	cp.b	r8,r9
8000945e:	c1 31       	brne	80009484 <VSYNC1_Handler+0x4c>
		{
			case(TAKE_PHOTO):
			FIFO_1_WEN_SET;
80009460:	31 8c       	mov	r12,24
80009462:	f0 1f 00 12 	mcall	800094a8 <VSYNC1_Handler+0x70>
			OV7670_Status.VSYNC1_State = TAKING_PHOTO;
80009466:	30 29       	mov	r9,2
80009468:	48 f8       	lddpc	r8,800094a4 <VSYNC1_Handler+0x6c>
8000946a:	b0 e9       	st.b	r8[0x6],r9
			break;
8000946c:	c1 78       	rjmp	8000949a <VSYNC1_Handler+0x62>
			
			case(TAKING_PHOTO):
			FIFO_1_WEN_CLR;
8000946e:	31 8c       	mov	r12,24
80009470:	f0 1f 00 0f 	mcall	800094ac <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = TAKEN_PHOTO;
80009474:	30 39       	mov	r9,3
80009476:	48 c8       	lddpc	r8,800094a4 <VSYNC1_Handler+0x6c>
80009478:	b0 e9       	st.b	r8[0x6],r9
			break;
8000947a:	c1 08       	rjmp	8000949a <VSYNC1_Handler+0x62>
			
			case (TAKEN_PHOTO):
			FIFO_1_WEN_CLR;
8000947c:	31 8c       	mov	r12,24
8000947e:	f0 1f 00 0c 	mcall	800094ac <VSYNC1_Handler+0x74>
			break;
80009482:	c0 c8       	rjmp	8000949a <VSYNC1_Handler+0x62>
			
			case(IDLE):
			default:
			VSYNC_1_DISABLE_INTERRUPT;
80009484:	30 1b       	mov	r11,1
80009486:	fe 7c 14 00 	mov	r12,-60416
8000948a:	f0 1f 00 0a 	mcall	800094b0 <VSYNC1_Handler+0x78>
			FIFO_1_WEN_CLR;
8000948e:	31 8c       	mov	r12,24
80009490:	f0 1f 00 07 	mcall	800094ac <VSYNC1_Handler+0x74>
			OV7670_Status.VSYNC1_State = IDLE;
80009494:	30 09       	mov	r9,0
80009496:	48 48       	lddpc	r8,800094a4 <VSYNC1_Handler+0x6c>
80009498:	b0 e9       	st.b	r8[0x6],r9
			break;
		}
}
8000949a:	d4 02       	popm	lr
8000949c:	d6 03       	rete
8000949e:	00 00       	add	r0,r0
800094a0:	80 00       	ld.sh	r0,r0[0x0]
800094a2:	30 34       	mov	r4,3
800094a4:	00 00       	add	r0,r0
800094a6:	14 e8       	st.h	--r10,r8
800094a8:	80 00       	ld.sh	r0,r0[0x0]
800094aa:	32 0e       	mov	lr,32
800094ac:	80 00       	ld.sh	r0,r0[0x0]
800094ae:	32 2a       	mov	r10,34
800094b0:	80 00       	ld.sh	r0,r0[0x0]
800094b2:	30 4a       	mov	r10,4

800094b4 <Write_Reg>:
unsigned char Write_Reg(unsigned char Register, unsigned char Data)
{
800094b4:	d4 01       	pushm	lr
800094b6:	20 1d       	sub	sp,4
	/*	I2C Traffic Generated:
	 *	S | OV_7670 + W | A | RegID | A | Data | A | P |
	 */
	uint8_t Buff[2] = {Register, Data};
800094b8:	ba 8c       	st.b	sp[0x0],r12
800094ba:	ba 9b       	st.b	sp[0x1],r11
	int status = twim_write(&AVR32_TWIM0, &Buff, 2, OV7670_ADDR, false);
800094bc:	30 08       	mov	r8,0
800094be:	32 19       	mov	r9,33
800094c0:	30 2a       	mov	r10,2
800094c2:	1a 9b       	mov	r11,sp
800094c4:	fe 7c 38 00 	mov	r12,-51200
800094c8:	f0 1f 00 03 	mcall	800094d4 <Write_Reg+0x20>
	return status;
}
800094cc:	5c 5c       	castu.b	r12
800094ce:	2f fd       	sub	sp,-4
800094d0:	d8 02       	popm	pc
800094d2:	00 00       	add	r0,r0
800094d4:	80 00       	ld.sh	r0,r0[0x0]
800094d6:	3c 74       	mov	r4,-57

800094d8 <OV7670_Init>:
	
	return status;
	
}
void OV7670_Init()
{
800094d8:	eb cd 40 c0 	pushm	r6-r7,lr
800094dc:	20 2d       	sub	sp,8
	
	//Check Cameras Exist
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
800094de:	30 4c       	mov	r12,4
800094e0:	f0 1f 00 8f 	mcall	8000971c <OV7670_Init+0x244>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
800094e4:	32 1b       	mov	r11,33
800094e6:	fe 7c 38 00 	mov	r12,-51200
800094ea:	f0 1f 00 8e 	mcall	80009720 <OV7670_Init+0x248>
800094ee:	c0 61       	brne	800094fa <OV7670_Init+0x22>
		OV7670_Status.Camera_0_Found = true;
800094f0:	30 19       	mov	r9,1
800094f2:	fe f8 02 32 	ld.w	r8,pc[562]
800094f6:	b0 99       	st.b	r8[0x1],r9
800094f8:	c0 58       	rjmp	80009502 <OV7670_Init+0x2a>
	else
		OV7670_Status.Camera_0_Found = false;
800094fa:	30 09       	mov	r9,0
800094fc:	fe f8 02 28 	ld.w	r8,pc[552]
80009500:	b0 99       	st.b	r8[0x1],r9
		
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80009502:	30 5c       	mov	r12,5
80009504:	f0 1f 00 86 	mcall	8000971c <OV7670_Init+0x244>
	if (twim_probe(&AVR32_TWIM0, OV7670_ADDR) == STATUS_OK)
80009508:	32 1b       	mov	r11,33
8000950a:	fe 7c 38 00 	mov	r12,-51200
8000950e:	f0 1f 00 85 	mcall	80009720 <OV7670_Init+0x248>
80009512:	c0 61       	brne	8000951e <OV7670_Init+0x46>
		OV7670_Status.Camera_1_Found = true;
80009514:	30 19       	mov	r9,1
80009516:	fe f8 02 0e 	ld.w	r8,pc[526]
8000951a:	b0 a9       	st.b	r8[0x2],r9
8000951c:	c0 58       	rjmp	80009526 <OV7670_Init+0x4e>
	else
		OV7670_Status.Camera_1_Found = false;
8000951e:	30 09       	mov	r9,0
80009520:	fe f8 02 04 	ld.w	r8,pc[516]
80009524:	b0 a9       	st.b	r8[0x2],r9
		
	
	//Iniialise Cameras
	if(OV7670_Status.Camera_0_Found)
80009526:	fe f8 01 fe 	ld.w	r8,pc[510]
8000952a:	11 99       	ld.ub	r9,r8[0x1]
8000952c:	30 08       	mov	r8,0
8000952e:	f0 09 18 00 	cp.b	r9,r8
80009532:	c5 30       	breq	800095d8 <OV7670_Init+0x100>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80009534:	30 4c       	mov	r12,4
80009536:	f0 1f 00 7a 	mcall	8000971c <OV7670_Init+0x244>
		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
8000953a:	e0 6b 00 80 	mov	r11,128
8000953e:	31 2c       	mov	r12,18
80009540:	f0 1f 00 7a 	mcall	80009728 <OV7670_Init+0x250>
80009544:	c0 80       	breq	80009554 <OV7670_Init+0x7c>
		{
			print_dbg("\n\rCamera Reset Fail");
80009546:	4f ac       	lddpc	r12,8000972c <OV7670_Init+0x254>
80009548:	f0 1f 00 7a 	mcall	80009730 <OV7670_Init+0x258>
			OV7670_Status.Camera_0_Error = true;
8000954c:	4f 68       	lddpc	r8,80009724 <OV7670_Init+0x24c>
8000954e:	30 19       	mov	r9,1
80009550:	b0 b9       	st.b	r8[0x3],r9
			OV7670_Status.Error = true;
80009552:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009554:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009558:	e2 69 71 00 	mov	r9,160000
8000955c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009560:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009564:	14 38       	cp.w	r8,r10
80009566:	e0 88 00 08 	brls	80009576 <OV7670_Init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000956a:	12 38       	cp.w	r8,r9
8000956c:	fe 98 ff fa 	brls	80009560 <OV7670_Init+0x88>
80009570:	12 3a       	cp.w	r10,r9
80009572:	c0 53       	brcs	8000957c <OV7670_Init+0xa4>
80009574:	cf 6b       	rjmp	80009560 <OV7670_Init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009576:	12 38       	cp.w	r8,r9
80009578:	e0 88 00 08 	brls	80009588 <OV7670_Init+0xb0>
8000957c:	4e e6       	lddpc	r6,80009734 <OV7670_Init+0x25c>
8000957e:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80009582:	ec c6 fe b1 	sub	r6,r6,-335
80009586:	c0 48       	rjmp	8000958e <OV7670_Init+0xb6>
80009588:	12 3a       	cp.w	r10,r9
8000958a:	cf 93       	brcs	8000957c <OV7670_Init+0xa4>
8000958c:	ce ab       	rjmp	80009560 <OV7670_Init+0x88>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
8000958e:	0f 8b       	ld.ub	r11,r7[0x0]
80009590:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80009594:	f0 1f 00 65 	mcall	80009728 <OV7670_Init+0x250>
80009598:	c0 90       	breq	800095aa <OV7670_Init+0xd2>
			{
				print_dbg("\n\rCamera Initialise Fail");
8000959a:	4e 8c       	lddpc	r12,80009738 <OV7670_Init+0x260>
8000959c:	f0 1f 00 65 	mcall	80009730 <OV7670_Init+0x258>
				//return FAIL;
				OV7670_Status.Camera_0_Error = true;	
800095a0:	4e 18       	lddpc	r8,80009724 <OV7670_Init+0x24c>
800095a2:	30 19       	mov	r9,1
800095a4:	b0 b9       	st.b	r8[0x3],r9
				OV7670_Status.Error = true;	
800095a6:	b0 89       	st.b	r8[0x0],r9
				break;
800095a8:	c1 88       	rjmp	800095d8 <OV7670_Init+0x100>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800095aa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800095ae:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800095b2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800095b6:	14 38       	cp.w	r8,r10
800095b8:	e0 88 00 09 	brls	800095ca <OV7670_Init+0xf2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800095bc:	12 38       	cp.w	r8,r9
800095be:	fe 98 ff fa 	brls	800095b2 <OV7670_Init+0xda>
800095c2:	12 3a       	cp.w	r10,r9
800095c4:	e0 83 00 a2 	brlo	80009708 <OV7670_Init+0x230>
800095c8:	cf 5b       	rjmp	800095b2 <OV7670_Init+0xda>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800095ca:	12 38       	cp.w	r8,r9
800095cc:	e0 8b 00 9e 	brhi	80009708 <OV7670_Init+0x230>
800095d0:	12 3a       	cp.w	r10,r9
800095d2:	e0 83 00 9b 	brlo	80009708 <OV7670_Init+0x230>
800095d6:	ce eb       	rjmp	800095b2 <OV7670_Init+0xda>
			}
			delay_ms(1);
		}	
	}
	if(OV7670_Status.Camera_1_Found)
800095d8:	4d 38       	lddpc	r8,80009724 <OV7670_Init+0x24c>
800095da:	11 a9       	ld.ub	r9,r8[0x2]
800095dc:	30 08       	mov	r8,0
800095de:	f0 09 18 00 	cp.b	r9,r8
800095e2:	c5 10       	breq	80009684 <OV7670_Init+0x1ac>
	{
		PCA9542A_Chan_Sel(I2C_CHANNEL_1);
800095e4:	30 5c       	mov	r12,5
800095e6:	f0 1f 00 4e 	mcall	8000971c <OV7670_Init+0x244>

		//Reset Camera
		if(STATUS_OK != Write_Reg(OV_COM7, 0x80))
800095ea:	e0 6b 00 80 	mov	r11,128
800095ee:	31 2c       	mov	r12,18
800095f0:	f0 1f 00 4e 	mcall	80009728 <OV7670_Init+0x250>
800095f4:	c0 80       	breq	80009604 <OV7670_Init+0x12c>
		{
			print_dbg("\n\rCamera Reset Fail");
800095f6:	4c ec       	lddpc	r12,8000972c <OV7670_Init+0x254>
800095f8:	f0 1f 00 4e 	mcall	80009730 <OV7670_Init+0x258>
			OV7670_Status.Camera_1_Error = true;
800095fc:	4c a8       	lddpc	r8,80009724 <OV7670_Init+0x24c>
800095fe:	30 19       	mov	r9,1
80009600:	b0 c9       	st.b	r8[0x4],r9
			OV7670_Status.Error = true;
80009602:	b0 89       	st.b	r8[0x0],r9
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009604:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009608:	e2 69 71 00 	mov	r9,160000
8000960c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009610:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009614:	14 38       	cp.w	r8,r10
80009616:	e0 88 00 08 	brls	80009626 <OV7670_Init+0x14e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000961a:	12 38       	cp.w	r8,r9
8000961c:	fe 98 ff fa 	brls	80009610 <OV7670_Init+0x138>
80009620:	12 3a       	cp.w	r10,r9
80009622:	c0 53       	brcs	8000962c <OV7670_Init+0x154>
80009624:	cf 6b       	rjmp	80009610 <OV7670_Init+0x138>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009626:	12 38       	cp.w	r8,r9
80009628:	e0 88 00 08 	brls	80009638 <OV7670_Init+0x160>
8000962c:	4c 26       	lddpc	r6,80009734 <OV7670_Init+0x25c>
8000962e:	ec c7 ff ff 	sub	r7,r6,-1
	*Data = Buff[0];
	
	return status;
	
}
void OV7670_Init()
80009632:	ec c6 fe b1 	sub	r6,r6,-335
80009636:	c0 48       	rjmp	8000963e <OV7670_Init+0x166>
80009638:	12 3a       	cp.w	r10,r9
8000963a:	cf 93       	brcs	8000962c <OV7670_Init+0x154>
8000963c:	ce ab       	rjmp	80009610 <OV7670_Init+0x138>
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
		{
			if(STATUS_OK != Write_Reg(default_settings[i][0], default_settings[i][1]))
8000963e:	0f 8b       	ld.ub	r11,r7[0x0]
80009640:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80009644:	f0 1f 00 39 	mcall	80009728 <OV7670_Init+0x250>
80009648:	c0 90       	breq	8000965a <OV7670_Init+0x182>
			{
				print_dbg("\n\rCamera Initialise Fail");
8000964a:	4b cc       	lddpc	r12,80009738 <OV7670_Init+0x260>
8000964c:	f0 1f 00 39 	mcall	80009730 <OV7670_Init+0x258>
				//return FAIL;
				OV7670_Status.Camera_1_Error = true;
80009650:	4b 58       	lddpc	r8,80009724 <OV7670_Init+0x24c>
80009652:	30 19       	mov	r9,1
80009654:	b0 c9       	st.b	r8[0x4],r9
				OV7670_Status.Error = true;				
80009656:	b0 89       	st.b	r8[0x0],r9
				break;
80009658:	c1 68       	rjmp	80009684 <OV7670_Init+0x1ac>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000965a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000965e:	f0 ca c1 80 	sub	r10,r8,-16000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009662:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009666:	14 38       	cp.w	r8,r10
80009668:	e0 88 00 08 	brls	80009678 <OV7670_Init+0x1a0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000966c:	12 38       	cp.w	r8,r9
8000966e:	fe 98 ff fa 	brls	80009662 <OV7670_Init+0x18a>
80009672:	12 3a       	cp.w	r10,r9
80009674:	c4 f3       	brcs	80009712 <OV7670_Init+0x23a>
80009676:	cf 6b       	rjmp	80009662 <OV7670_Init+0x18a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009678:	12 38       	cp.w	r8,r9
8000967a:	e0 8b 00 4c 	brhi	80009712 <OV7670_Init+0x23a>
8000967e:	12 3a       	cp.w	r10,r9
80009680:	c4 93       	brcs	80009712 <OV7670_Init+0x23a>
80009682:	cf 0b       	rjmp	80009662 <OV7670_Init+0x18a>
			}
			delay_ms(1);
		}
	}
	PCA9542A_Chan_Sel(NO_SELECT);
80009684:	30 0c       	mov	r12,0
80009686:	f0 1f 00 26 	mcall	8000971c <OV7670_Init+0x244>
	
	//Initialise VSYNC Interrupts
	eic_options_t eic_options;
	eic_options.eic_mode = EIC_MODE_EDGE_TRIGGERED;
8000968a:	30 08       	mov	r8,0
8000968c:	ba b8       	st.b	sp[0x3],r8
	eic_options.eic_edge = EIC_EDGE_FALLING_EDGE;
8000968e:	ba c8       	st.b	sp[0x4],r8
	eic_options.eic_async = EIC_SYNCH_MODE;
80009690:	ba f8       	st.b	sp[0x7],r8
	eic_options.eic_line = VSYNC_1_LINE;
80009692:	30 18       	mov	r8,1
80009694:	ba a8       	st.b	sp[0x2],r8
	//eic_options.eic_line = VSYNC_0_LINE;
	
	//Disable_global_interrupt();
	gpio_enable_module_pin(VSYNC_1_PIN, VSYNC_1_FUNCTION);
80009696:	30 1b       	mov	r11,1
80009698:	31 ac       	mov	r12,26
8000969a:	f0 1f 00 29 	mcall	8000973c <OV7670_Init+0x264>
	gpio_enable_module_pin(VSYNC_0_PIN, VSYNC_0_FUNCTION);
8000969e:	30 1b       	mov	r11,1
800096a0:	30 ac       	mov	r12,10
800096a2:	f0 1f 00 27 	mcall	8000973c <OV7670_Init+0x264>
	
	gpio_enable_pin_pull_up(VSYNC_1_PIN); //Enable pull up as it is a low level interrupt
800096a6:	31 ac       	mov	r12,26
800096a8:	f0 1f 00 26 	mcall	80009740 <OV7670_Init+0x268>
	gpio_enable_pin_pull_up(VSYNC_0_PIN);
800096ac:	30 ac       	mov	r12,10
800096ae:	f0 1f 00 25 	mcall	80009740 <OV7670_Init+0x268>
	//Initialise EIC
	eic_init(&AVR32_EIC, &eic_options, 1);
800096b2:	fa c7 ff fe 	sub	r7,sp,-2
800096b6:	30 1a       	mov	r10,1
800096b8:	0e 9b       	mov	r11,r7
800096ba:	fe 7c 14 00 	mov	r12,-60416
800096be:	f0 1f 00 22 	mcall	80009744 <OV7670_Init+0x26c>
	eic_options.eic_line = VSYNC_0_LINE;
800096c2:	30 48       	mov	r8,4
800096c4:	ba a8       	st.b	sp[0x2],r8
	eic_init(&AVR32_EIC, &eic_options, 1);
800096c6:	30 1a       	mov	r10,1
800096c8:	0e 9b       	mov	r11,r7
800096ca:	fe 7c 14 00 	mov	r12,-60416
800096ce:	f0 1f 00 1e 	mcall	80009744 <OV7670_Init+0x26c>
	
	INTC_register_interrupt(&VSYNC1_Handler, AVR32_EIC_IRQ_1, AVR32_INTC_INT0);
800096d2:	30 0a       	mov	r10,0
800096d4:	e0 6b 01 e0 	mov	r11,480
800096d8:	49 cc       	lddpc	r12,80009748 <OV7670_Init+0x270>
800096da:	f0 1f 00 1d 	mcall	8000974c <OV7670_Init+0x274>
	INTC_register_interrupt(&VSYNC0_Handler, AVR32_EIC_IRQ_4, AVR32_INTC_INT0);
800096de:	30 0a       	mov	r10,0
800096e0:	e0 6b 01 e3 	mov	r11,483
800096e4:	49 bc       	lddpc	r12,80009750 <OV7670_Init+0x278>
800096e6:	f0 1f 00 1a 	mcall	8000974c <OV7670_Init+0x274>
	//Enable interrupt on VSYNC1
	eic_enable_line(&AVR32_EIC, VSYNC_1_LINE);
800096ea:	30 1b       	mov	r11,1
800096ec:	fe 7c 14 00 	mov	r12,-60416
800096f0:	f0 1f 00 19 	mcall	80009754 <OV7670_Init+0x27c>
	eic_enable_line(&AVR32_EIC, (VSYNC_0_LINE));
800096f4:	30 4b       	mov	r11,4
800096f6:	fe 7c 14 00 	mov	r12,-60416
800096fa:	f0 1f 00 17 	mcall	80009754 <OV7670_Init+0x27c>
 //	VSYNC_1_ENABLE_INTERRUPT;
 //	VSYNC_0_ENABLE_INTERRUPT;
	
	FIFO_Init();
800096fe:	f0 1f 00 17 	mcall	80009758 <OV7670_Init+0x280>
	//Enable_global_interrupt();
	
}
80009702:	2f ed       	sub	sp,-8
80009704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009708:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_0_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
8000970a:	0c 37       	cp.w	r7,r6
8000970c:	fe 91 ff 41 	brne	8000958e <OV7670_Init+0xb6>
80009710:	c6 4b       	rjmp	800095d8 <OV7670_Init+0x100>
80009712:	2f e7       	sub	r7,-2
			OV7670_Status.Camera_1_Error = true;
			OV7670_Status.Error = true;
			//return FAIL;
		}
		delay_ms(10); //wait for Camera to reset
		for (int i = 0; i < SETTINGS_LENGTH; i++)
80009714:	0c 37       	cp.w	r7,r6
80009716:	c9 41       	brne	8000963e <OV7670_Init+0x166>
80009718:	cb 6b       	rjmp	80009684 <OV7670_Init+0x1ac>
8000971a:	00 00       	add	r0,r0
8000971c:	80 00       	ld.sh	r0,r0[0x0]
8000971e:	97 5c       	st.w	r11[0x14],r12
80009720:	80 00       	ld.sh	r0,r0[0x0]
80009722:	3d 28       	mov	r8,-46
80009724:	00 00       	add	r0,r0
80009726:	14 e8       	st.h	--r10,r8
80009728:	80 00       	ld.sh	r0,r0[0x0]
8000972a:	94 b4       	ld.uh	r4,r10[0x6]
8000972c:	80 01       	ld.sh	r1,r0[0x0]
8000972e:	37 ec       	mov	r12,126
80009730:	80 00       	ld.sh	r0,r0[0x0]
80009732:	79 fc       	ld.w	r12,r12[0x7c]
80009734:	80 01       	ld.sh	r1,r0[0x0]
80009736:	38 19       	mov	r9,-127
80009738:	80 01       	ld.sh	r1,r0[0x0]
8000973a:	38 00       	mov	r0,-128
8000973c:	80 00       	ld.sh	r0,r0[0x0]
8000973e:	31 30       	mov	r0,19
80009740:	80 00       	ld.sh	r0,r0[0x0]
80009742:	31 f4       	mov	r4,31
80009744:	80 00       	ld.sh	r0,r0[0x0]
80009746:	2f 50       	sub	r0,-11
80009748:	80 00       	ld.sh	r0,r0[0x0]
8000974a:	94 38       	ld.sh	r8,r10[0x6]
8000974c:	80 00       	ld.sh	r0,r0[0x0]
8000974e:	32 48       	mov	r8,36
80009750:	80 00       	ld.sh	r0,r0[0x0]
80009752:	93 bc       	st.w	r9[0x2c],r12
80009754:	80 00       	ld.sh	r0,r0[0x0]
80009756:	30 20       	mov	r0,2
80009758:	80 00       	ld.sh	r0,r0[0x0]
8000975a:	90 e4       	ld.uh	r4,r8[0xc]

8000975c <PCA9542A_Chan_Sel>:
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
	//return status;
}

void PCA9542A_Chan_Sel(unsigned char Channel)
{
8000975c:	d4 01       	pushm	lr
8000975e:	20 1d       	sub	sp,4
	int status = 0;
	char buff[2] = {Channel, 0};
80009760:	ba 8c       	st.b	sp[0x0],r12
80009762:	30 08       	mov	r8,0
80009764:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
80009766:	30 08       	mov	r8,0
80009768:	37 49       	mov	r9,116
8000976a:	30 1a       	mov	r10,1
8000976c:	1a 9b       	mov	r11,sp
8000976e:	fe 7c 38 00 	mov	r12,-51200
80009772:	f0 1f 00 03 	mcall	8000977c <PCA9542A_Chan_Sel+0x20>
80009776:	2f fd       	sub	sp,-4
80009778:	d8 02       	popm	pc
8000977a:	00 00       	add	r0,r0
8000977c:	80 00       	ld.sh	r0,r0[0x0]
8000977e:	3c 74       	mov	r4,-57

80009780 <PCA9542A_Init>:
/*#include "CustomDevices/MotorDriver.h"*/
//SDCard
/*#include "CustomDevices/SD_Card.h"*/

int PCA9542A_Init()
{
80009780:	d4 01       	pushm	lr
80009782:	20 1d       	sub	sp,4
	int status = twim_probe(&AVR32_TWIM0, PCA9542A_ADDR);
80009784:	37 4b       	mov	r11,116
80009786:	fe 7c 38 00 	mov	r12,-51200
8000978a:	f0 1f 00 0a 	mcall	800097b0 <PCA9542A_Init+0x30>
	if (status != STATUS_OK)
8000978e:	c0 30       	breq	80009794 <PCA9542A_Init+0x14>
80009790:	30 2c       	mov	r12,2
80009792:	c0 c8       	rjmp	800097aa <PCA9542A_Init+0x2a>
		return DEVICE_NOT_FOUND;
	char buff[2] = {NO_SELECT, 0};
80009794:	30 08       	mov	r8,0
80009796:	ba 88       	st.b	sp[0x0],r8
80009798:	ba 98       	st.b	sp[0x1],r8
	status = twim_write(&AVR32_TWIM0, &buff, 1, PCA9542A_ADDR, false);
8000979a:	30 08       	mov	r8,0
8000979c:	37 49       	mov	r9,116
8000979e:	30 1a       	mov	r10,1
800097a0:	1a 9b       	mov	r11,sp
800097a2:	fe 7c 38 00 	mov	r12,-51200
800097a6:	f0 1f 00 04 	mcall	800097b4 <PCA9542A_Init+0x34>
	
	return status;
}
800097aa:	2f fd       	sub	sp,-4
800097ac:	d8 02       	popm	pc
800097ae:	00 00       	add	r0,r0
800097b0:	80 00       	ld.sh	r0,r0[0x0]
800097b2:	3d 28       	mov	r8,-46
800097b4:	80 00       	ld.sh	r0,r0[0x0]
800097b6:	3c 74       	mov	r4,-57

800097b8 <sd_mmc_resources_init>:
}

/*! \brief Initializes SD/MMC resources: GPIO, SPI and SD/MMC.
 */
void sd_mmc_resources_init(void)
{
800097b8:	eb cd 40 80 	pushm	r7,lr
800097bc:	20 4d       	sub	sp,16
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
800097be:	49 98       	lddpc	r8,80009820 <sd_mmc_resources_init+0x68>
800097c0:	1a 97       	mov	r7,sp
800097c2:	70 09       	ld.w	r9,r8[0x0]
800097c4:	50 09       	stdsp	sp[0x0],r9
800097c6:	70 19       	ld.w	r9,r8[0x4]
800097c8:	50 19       	stdsp	sp[0x4],r9
800097ca:	70 29       	ld.w	r9,r8[0x8]
800097cc:	50 29       	stdsp	sp[0x8],r9
800097ce:	70 38       	ld.w	r8,r8[0xc]
800097d0:	50 38       	stdsp	sp[0xc],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
800097d2:	30 4b       	mov	r11,4
800097d4:	49 4c       	lddpc	r12,80009824 <sd_mmc_resources_init+0x6c>
800097d6:	f0 1f 00 15 	mcall	80009828 <sd_mmc_resources_init+0x70>
                     sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
800097da:	1a 9b       	mov	r11,sp
800097dc:	fe 7c 34 00 	mov	r12,-52224
800097e0:	f0 1f 00 13 	mcall	8000982c <sd_mmc_resources_init+0x74>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
800097e4:	30 09       	mov	r9,0
800097e6:	12 9a       	mov	r10,r9
800097e8:	12 9b       	mov	r11,r9
800097ea:	fe 7c 34 00 	mov	r12,-52224
800097ee:	f0 1f 00 11 	mcall	80009830 <sd_mmc_resources_init+0x78>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
800097f2:	fe 7c 34 00 	mov	r12,-52224
800097f6:	f0 1f 00 10 	mcall	80009834 <sd_mmc_resources_init+0x7c>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
800097fa:	20 4d       	sub	sp,16
800097fc:	6e 08       	ld.w	r8,r7[0x0]
800097fe:	50 08       	stdsp	sp[0x0],r8
80009800:	6e 18       	ld.w	r8,r7[0x4]
80009802:	50 18       	stdsp	sp[0x4],r8
80009804:	6e 28       	ld.w	r8,r7[0x8]
80009806:	50 28       	stdsp	sp[0x8],r8
80009808:	6e 38       	ld.w	r8,r7[0xc]
8000980a:	50 38       	stdsp	sp[0xc],r8
8000980c:	e0 6c 24 00 	mov	r12,9216
80009810:	ea 1c 00 f4 	orh	r12,0xf4
80009814:	f0 1f 00 09 	mcall	80009838 <sd_mmc_resources_init+0x80>
80009818:	2f cd       	sub	sp,-16
}
8000981a:	2f cd       	sub	sp,-16
8000981c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009820:	80 01       	ld.sh	r1,r0[0x0]
80009822:	39 88       	mov	r8,-104
80009824:	80 01       	ld.sh	r1,r0[0x0]
80009826:	39 68       	mov	r8,-106
80009828:	80 00       	ld.sh	r0,r0[0x0]
8000982a:	31 c4       	mov	r4,28
8000982c:	80 00       	ld.sh	r0,r0[0x0]
8000982e:	39 20       	mov	r0,-110
80009830:	80 00       	ld.sh	r0,r0[0x0]
80009832:	39 58       	mov	r8,-107
80009834:	80 00       	ld.sh	r0,r0[0x0]
80009836:	3a c0       	mov	r0,-84
80009838:	80 00       	ld.sh	r0,r0[0x0]
8000983a:	2b 10       	sub	r0,-79

8000983c <LED_Flash>:

#define LOG_FILE "log.txt"


void LED_Flash()
{
8000983c:	d4 01       	pushm	lr
	LED2_SET;
8000983e:	33 1c       	mov	r12,49
80009840:	f0 1f 00 1d 	mcall	800098b4 <LED_Flash+0x78>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009844:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009848:	e0 6a 24 00 	mov	r10,9216
8000984c:	ea 1a 00 f4 	orh	r10,0xf4
80009850:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009854:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009858:	14 38       	cp.w	r8,r10
8000985a:	e0 88 00 08 	brls	8000986a <LED_Flash+0x2e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000985e:	12 38       	cp.w	r8,r9
80009860:	fe 98 ff fa 	brls	80009854 <LED_Flash+0x18>
80009864:	12 3a       	cp.w	r10,r9
80009866:	c1 93       	brcs	80009898 <LED_Flash+0x5c>
80009868:	cf 6b       	rjmp	80009854 <LED_Flash+0x18>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000986a:	12 38       	cp.w	r8,r9
8000986c:	e0 8b 00 16 	brhi	80009898 <LED_Flash+0x5c>
80009870:	12 3a       	cp.w	r10,r9
80009872:	c1 33       	brcs	80009898 <LED_Flash+0x5c>
80009874:	cf 0b       	rjmp	80009854 <LED_Flash+0x18>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009876:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000987a:	14 38       	cp.w	r8,r10
8000987c:	e0 88 00 08 	brls	8000988c <LED_Flash+0x50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009880:	12 38       	cp.w	r8,r9
80009882:	fe 98 ff fa 	brls	80009876 <LED_Flash+0x3a>
80009886:	12 3a       	cp.w	r10,r9
80009888:	c1 43       	brcs	800098b0 <LED_Flash+0x74>
8000988a:	cf 6b       	rjmp	80009876 <LED_Flash+0x3a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000988c:	12 38       	cp.w	r8,r9
8000988e:	e0 8b 00 11 	brhi	800098b0 <LED_Flash+0x74>
80009892:	12 3a       	cp.w	r10,r9
80009894:	c0 e3       	brcs	800098b0 <LED_Flash+0x74>
80009896:	cf 0b       	rjmp	80009876 <LED_Flash+0x3a>
	delay_s(1);
	LED2_CLR;
80009898:	33 1c       	mov	r12,49
8000989a:	f0 1f 00 08 	mcall	800098b8 <LED_Flash+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000989e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800098a2:	e0 6a 24 00 	mov	r10,9216
800098a6:	ea 1a 00 f4 	orh	r10,0xf4
800098aa:	f0 0a 00 0a 	add	r10,r8,r10
800098ae:	ce 4b       	rjmp	80009876 <LED_Flash+0x3a>
800098b0:	d8 02       	popm	pc
800098b2:	00 00       	add	r0,r0
800098b4:	80 00       	ld.sh	r0,r0[0x0]
800098b6:	32 0e       	mov	lr,32
800098b8:	80 00       	ld.sh	r0,r0[0x0]
800098ba:	32 2a       	mov	r10,34

800098bc <Log_Write>:
}

#define TOGGLE LED_Flash

void Log_Write(char *buff, int length) 
{
800098bc:	eb cd 40 c0 	pushm	r6-r7,lr
800098c0:	18 96       	mov	r6,r12
800098c2:	16 97       	mov	r7,r11
	nav_setcwd((FS_STRING)LOG_FILE, true, false);
800098c4:	30 0a       	mov	r10,0
800098c6:	30 1b       	mov	r11,1
800098c8:	48 9c       	lddpc	r12,800098ec <Log_Write+0x30>
800098ca:	f0 1f 00 0a 	mcall	800098f0 <Log_Write+0x34>
	file_open(FOPEN_MODE_APPEND);
800098ce:	30 2c       	mov	r12,2
800098d0:	f0 1f 00 09 	mcall	800098f4 <Log_Write+0x38>
	if(length == -1)
800098d4:	5b f7       	cp.w	r7,-1
800098d6:	f9 b7 00 04 	moveq	r7,4
		length = sizeof(buff);
	file_write_buf(buff, length);
800098da:	0e 9b       	mov	r11,r7
800098dc:	5c 7b       	castu.h	r11
800098de:	0c 9c       	mov	r12,r6
800098e0:	f0 1f 00 06 	mcall	800098f8 <Log_Write+0x3c>
	file_close();
800098e4:	f0 1f 00 06 	mcall	800098fc <Log_Write+0x40>
}
800098e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800098ec:	80 01       	ld.sh	r1,r0[0x0]
800098ee:	39 a8       	mov	r8,-102
800098f0:	80 00       	ld.sh	r0,r0[0x0]
800098f2:	77 10       	ld.w	r0,r11[0x44]
800098f4:	80 00       	ld.sh	r0,r0[0x0]
800098f6:	6f 30       	ld.w	r0,r7[0x4c]
800098f8:	80 00       	ld.sh	r0,r0[0x0]
800098fa:	6d bc       	ld.w	r12,r6[0x6c]
800098fc:	80 00       	ld.sh	r0,r0[0x0]
800098fe:	6d 80       	ld.w	r0,r6[0x60]

80009900 <main>:

	// Transmit the resulting string with the given USART.
	Log_Write(tmp + i, -1);
}
int main (void)
{
80009900:	d4 31       	pushm	r0-r7,lr
80009902:	20 ad       	sub	sp,40
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
80009904:	f0 1f 01 37 	mcall	80009de0 <main+0x4e0>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80009908:	30 3a       	mov	r10,3
8000990a:	e0 6b 24 00 	mov	r11,9216
8000990e:	ea 1b 00 f4 	orh	r11,0xf4
80009912:	30 0c       	mov	r12,0
80009914:	f0 1f 01 34 	mcall	80009de4 <main+0x4e4>
	
	// Initialize interrupt vector table support.
	irq_initialize_vectors();
80009918:	f0 1f 01 34 	mcall	80009de8 <main+0x4e8>

	// Enable interrupts
	sd_mmc_resources_init();
8000991c:	f0 1f 01 34 	mcall	80009dec <main+0x4ec>
	INTC_init_interrupts();
80009920:	f0 1f 01 32 	mcall	80009de8 <main+0x4e8>
	stdio_usb_init();
80009924:	f0 1f 01 33 	mcall	80009df0 <main+0x4f0>
	* \endinternal
	*/
	const gpio_map_t TWIM_GPIO_MAP = {
	{AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION},
	{AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION}
	};
80009928:	fe f8 04 cc 	ld.w	r8,pc[1228]
8000992c:	fa cc ff f0 	sub	r12,sp,-16
80009930:	70 09       	ld.w	r9,r8[0x0]
80009932:	99 09       	st.w	r12[0x0],r9
80009934:	70 19       	ld.w	r9,r8[0x4]
80009936:	99 19       	st.w	r12[0x4],r9
80009938:	70 29       	ld.w	r9,r8[0x8]
8000993a:	99 29       	st.w	r12[0x8],r9
8000993c:	70 38       	ld.w	r8,r8[0xc]
8000993e:	99 38       	st.w	r12[0xc],r8
	const twi_options_t TWIM_OPTIONS = {
		.pba_hz = FOSC0,
		.speed = TWIM_MASTER_SPEED,
		.chip = TARGET_ADDRESS,
		.smbus = false,
	};
80009940:	fe f8 04 b8 	ld.w	r8,pc[1208]
80009944:	70 09       	ld.w	r9,r8[0x0]
80009946:	50 09       	stdsp	sp[0x0],r9
80009948:	70 19       	ld.w	r9,r8[0x4]
8000994a:	50 19       	stdsp	sp[0x4],r9
8000994c:	70 29       	ld.w	r9,r8[0x8]
8000994e:	50 29       	stdsp	sp[0x8],r9
80009950:	70 38       	ld.w	r8,r8[0xc]
80009952:	50 38       	stdsp	sp[0xc],r8
	// TWIM gpio pins configuration
	gpio_enable_module (TWIM_GPIO_MAP,
80009954:	30 2b       	mov	r11,2
80009956:	f0 1f 01 2a 	mcall	80009dfc <main+0x4fc>
			sizeof (TWIM_GPIO_MAP) / sizeof (TWIM_GPIO_MAP[0]));
	
	// Initialize as master.
	status = twim_master_init (TWIM, &TWIM_OPTIONS);
8000995a:	1a 9b       	mov	r11,sp
8000995c:	fe 7c 38 00 	mov	r12,-51200
80009960:	f0 1f 01 28 	mcall	80009e00 <main+0x500>
	// Enable interrupts
	sd_mmc_resources_init();
	INTC_init_interrupts();
	stdio_usb_init();
	twim_init();
	PCA9542A_Init();
80009964:	f0 1f 01 28 	mcall	80009e04 <main+0x504>
	sdramc_init(FOSC0);
80009968:	e0 6c 24 00 	mov	r12,9216
8000996c:	ea 1c 00 f4 	orh	r12,0xf4
80009970:	f0 1f 01 26 	mcall	80009e08 <main+0x508>
	OV7670_Init();
80009974:	f0 1f 01 26 	mcall	80009e0c <main+0x50c>
	Motor_Init();
80009978:	f0 1f 01 26 	mcall	80009e10 <main+0x510>
	Enable_global_interrupt();
8000997c:	d5 03       	csrf	0x10
	//stdio_usb_init();
	uint8_t ch;
	
	while (true) {

		scanf("%c",&ch); // get one input character
8000997e:	fe f6 04 96 	ld.w	r6,pc[1174]
80009982:	fa c5 ff dd 	sub	r5,sp,-35

		if (ch) {
			printf("%c",ch); // echo to output
		}
		if(ch == 13)
80009986:	30 d7       	mov	r7,13
	//stdio_usb_init();
	uint8_t ch;
	
	while (true) {

		scanf("%c",&ch); // get one input character
80009988:	1a d5       	st.w	--sp,r5
8000998a:	0c 9c       	mov	r12,r6
8000998c:	f0 1f 01 23 	mcall	80009e18 <main+0x518>

		if (ch) {
80009990:	fb 3c 00 27 	ld.ub	r12,sp[39]
80009994:	2f fd       	sub	sp,-4
80009996:	58 0c       	cp.w	r12,0
80009998:	cf 80       	breq	80009988 <main+0x88>
			printf("%c",ch); // echo to output
8000999a:	f0 1f 01 21 	mcall	80009e1c <main+0x51c>
		}
		if(ch == 13)
8000999e:	fb 38 00 23 	ld.ub	r8,sp[35]
800099a2:	ee 08 18 00 	cp.b	r8,r7
800099a6:	cf 11       	brne	80009988 <main+0x88>
			break;
	}
	//init_dbg_rs232(FOSC0);
	printf("\xC");
800099a8:	30 cc       	mov	r12,12
800099aa:	f0 1f 01 1d 	mcall	80009e1c <main+0x51c>
	printf("Columbus Board Tester\n\n\r");
800099ae:	fe fc 04 72 	ld.w	r12,pc[1138]
800099b2:	f0 1f 01 1d 	mcall	80009e24 <main+0x524>
// 	sd_mmc_resources_init();
// 	INTC_init_interrupts();
// 	
	
	printf("\n\n\rSD Card Memory Test:\n\r");
800099b6:	fe fc 04 72 	ld.w	r12,pc[1138]
800099ba:	f0 1f 01 1b 	mcall	80009e24 <main+0x524>
	// Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
800099be:	30 0c       	mov	r12,0
800099c0:	f0 1f 01 1b 	mcall	80009e2c <main+0x52c>
800099c4:	c1 71       	brne	800099f2 <main+0xf2>
	{
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
800099c6:	fa cb ff dc 	sub	r11,sp,-36
800099ca:	f0 1f 01 1a 	mcall	80009e30 <main+0x530>
		printf("OK:\t");
800099ce:	fe fc 04 66 	ld.w	r12,pc[1126]
800099d2:	f0 1f 01 15 	mcall	80009e24 <main+0x524>
		//printf_ulong((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
		i = ((VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
		printf("%dMB\r\n", i);
800099d6:	40 98       	lddsp	r8,sp[0x24]
800099d8:	2f f8       	sub	r8,-1
800099da:	ab 98       	lsr	r8,0xb
800099dc:	1a d8       	st.w	--sp,r8
800099de:	fe fc 04 5a 	ld.w	r12,pc[1114]
800099e2:	f0 1f 01 11 	mcall	80009e24 <main+0x524>
		printf("SD Card Okay.\n\r");
800099e6:	fe fc 04 56 	ld.w	r12,pc[1110]
800099ea:	f0 1f 01 0f 	mcall	80009e24 <main+0x524>
800099ee:	2f fd       	sub	sp,-4
800099f0:	c0 58       	rjmp	800099fa <main+0xfa>
	}
	else
	{
		// Display an error message
		printf("Not initialized: Check if memory is ready...\r\n");
800099f2:	fe fc 04 4e 	ld.w	r12,pc[1102]
800099f6:	f0 1f 01 14 	mcall	80009e44 <main+0x544>
	}
	nav_reset();
800099fa:	f0 1f 01 14 	mcall	80009e48 <main+0x548>
	// Use the last drive available as default.
	nav_drive_set(nav_drive_nb() - 1);
800099fe:	f0 1f 01 14 	mcall	80009e4c <main+0x54c>
80009a02:	20 1c       	sub	r12,1
80009a04:	5c 5c       	castu.b	r12
80009a06:	f0 1f 01 13 	mcall	80009e50 <main+0x550>
	// Mount it.
	nav_partition_mount();
80009a0a:	f0 1f 01 13 	mcall	80009e54 <main+0x554>
	nav_filelist_reset();
80009a0e:	f0 1f 01 13 	mcall	80009e58 <main+0x558>
	if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
80009a12:	30 0b       	mov	r11,0
80009a14:	fe fc 04 48 	ld.w	r12,pc[1096]
80009a18:	f0 1f 01 12 	mcall	80009e60 <main+0x560>
80009a1c:	c1 d0       	breq	80009a56 <main+0x156>
	{
		printf("\n\rLog File Already Exists\n\rAttempting to delete...");	
80009a1e:	fe fc 04 46 	ld.w	r12,pc[1094]
80009a22:	f0 1f 01 01 	mcall	80009e24 <main+0x524>
		nav_setcwd((FS_STRING)LOG_FILE, true, false);
80009a26:	fe f7 04 36 	ld.w	r7,pc[1078]
80009a2a:	30 0a       	mov	r10,0
80009a2c:	30 1b       	mov	r11,1
80009a2e:	0e 9c       	mov	r12,r7
80009a30:	f0 1f 01 0e 	mcall	80009e68 <main+0x568>
		nav_file_del(false);
80009a34:	30 0c       	mov	r12,0
80009a36:	f0 1f 01 0e 	mcall	80009e6c <main+0x56c>
		
		if(nav_filelist_findname((FS_STRING)LOG_FILE, false))
80009a3a:	30 0b       	mov	r11,0
80009a3c:	0e 9c       	mov	r12,r7
80009a3e:	f0 1f 01 09 	mcall	80009e60 <main+0x560>
80009a42:	c0 60       	breq	80009a4e <main+0x14e>
			printf("\n\rLog File Still Exists...");
80009a44:	fe fc 04 2c 	ld.w	r12,pc[1068]
80009a48:	f0 1f 00 f7 	mcall	80009e24 <main+0x524>
80009a4c:	c0 58       	rjmp	80009a56 <main+0x156>
		else
			printf("\n\rLog File Deleted!");
80009a4e:	fe fc 04 26 	ld.w	r12,pc[1062]
80009a52:	f0 1f 00 f5 	mcall	80009e24 <main+0x524>
	}
	
	
	printf("\n\rCreating Log File.");
80009a56:	fe fc 04 22 	ld.w	r12,pc[1058]
80009a5a:	f0 1f 00 f3 	mcall	80009e24 <main+0x524>
	//char buff[20] = "log.txt";
	if(nav_file_create((FS_STRING)LOG_FILE) == true)
80009a5e:	fe fc 03 fe 	ld.w	r12,pc[1022]
80009a62:	f0 1f 01 07 	mcall	80009e7c <main+0x57c>
80009a66:	c0 60       	breq	80009a72 <main+0x172>
		printf("\n\rSuccess!");
80009a68:	fe fc 04 18 	ld.w	r12,pc[1048]
80009a6c:	f0 1f 00 ee 	mcall	80009e24 <main+0x524>
80009a70:	c0 58       	rjmp	80009a7a <main+0x17a>
	else
		printf("\n\rNot worked...");
80009a72:	fe fc 04 12 	ld.w	r12,pc[1042]
80009a76:	f0 1f 00 ec 	mcall	80009e24 <main+0x524>
	
	printf("\n\rWriting to log file.");
80009a7a:	fe fc 04 0e 	ld.w	r12,pc[1038]
80009a7e:	f0 1f 00 ea 	mcall	80009e24 <main+0x524>
	
	Log_Write("Columbus Tester:\n\r", -1);
80009a82:	3f fb       	mov	r11,-1
80009a84:	fe fc 04 08 	ld.w	r12,pc[1032]
80009a88:	f0 1f 01 02 	mcall	80009e90 <main+0x590>


	printf("\n\rLED Test:\n\rAll LEDS on;");
80009a8c:	fe fc 04 08 	ld.w	r12,pc[1032]
80009a90:	f0 1f 00 e5 	mcall	80009e24 <main+0x524>
	LEDMOTOR_SET;
80009a94:	32 cc       	mov	r12,44
80009a96:	f0 1f 01 01 	mcall	80009e98 <main+0x598>
	LED2_SET;
80009a9a:	33 1c       	mov	r12,49
80009a9c:	f0 1f 00 ff 	mcall	80009e98 <main+0x598>
	LED3_SET;
80009aa0:	33 2c       	mov	r12,50
80009aa2:	f0 1f 00 fe 	mcall	80009e98 <main+0x598>
	LED4_SET;
80009aa6:	33 bc       	mov	r12,59
80009aa8:	f0 1f 00 fc 	mcall	80009e98 <main+0x598>
	LED5_SET;
80009aac:	33 cc       	mov	r12,60
80009aae:	f0 1f 00 fb 	mcall	80009e98 <main+0x598>
	LED6_SET;
80009ab2:	33 dc       	mov	r12,61
80009ab4:	f0 1f 00 f9 	mcall	80009e98 <main+0x598>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009ab8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009abc:	e0 6a 24 00 	mov	r10,9216
80009ac0:	ea 1a 00 f4 	orh	r10,0xf4
80009ac4:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009ac8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009acc:	14 38       	cp.w	r8,r10
80009ace:	e0 88 00 09 	brls	80009ae0 <main+0x1e0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009ad2:	12 38       	cp.w	r8,r9
80009ad4:	fe 98 ff fa 	brls	80009ac8 <main+0x1c8>
80009ad8:	12 3a       	cp.w	r10,r9
80009ada:	e0 83 01 4b 	brlo	80009d70 <main+0x470>
80009ade:	cf 5b       	rjmp	80009ac8 <main+0x1c8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009ae0:	12 38       	cp.w	r8,r9
80009ae2:	e0 8b 01 47 	brhi	80009d70 <main+0x470>
80009ae6:	12 3a       	cp.w	r10,r9
80009ae8:	e0 83 01 44 	brlo	80009d70 <main+0x470>
80009aec:	ce eb       	rjmp	80009ac8 <main+0x1c8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009aee:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009af2:	14 38       	cp.w	r8,r10
80009af4:	e0 88 00 09 	brls	80009b06 <main+0x206>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009af8:	12 38       	cp.w	r8,r9
80009afa:	fe 98 ff fa 	brls	80009aee <main+0x1ee>
80009afe:	12 3a       	cp.w	r10,r9
80009b00:	e0 83 01 57 	brlo	80009dae <main+0x4ae>
80009b04:	cf 5b       	rjmp	80009aee <main+0x1ee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009b06:	12 38       	cp.w	r8,r9
80009b08:	e0 8b 01 53 	brhi	80009dae <main+0x4ae>
80009b0c:	12 3a       	cp.w	r10,r9
80009b0e:	e0 83 01 50 	brlo	80009dae <main+0x4ae>
80009b12:	ce eb       	rjmp	80009aee <main+0x1ee>
80009b14:	0c 98       	mov	r8,r6
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80009b16:	f0 04 02 49 	mul	r9,r8,r4
80009b1a:	0e 39       	cp.w	r9,r7
80009b1c:	c0 30       	breq	80009b22 <main+0x222>
80009b1e:	10 96       	mov	r6,r8
80009b20:	c0 88       	rjmp	80009b30 <main+0x230>
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			printf("\rFilling SDRAM with test pattern: %d\%", j++);
80009b22:	f0 c6 ff ff 	sub	r6,r8,-1
80009b26:	1a d8       	st.w	--sp,r8
80009b28:	06 9c       	mov	r12,r3
80009b2a:	f0 1f 00 bf 	mcall	80009e24 <main+0x524>
80009b2e:	2f fd       	sub	sp,-4
			//printf_ulong(j++);
			//printf_char('%');
		}
		sdram[i] = i;
80009b30:	0a a7       	st.w	r5++,r7

	// Determine the increment of SDRAM word address requiring an update of the
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
80009b32:	2f f7       	sub	r7,-1
80009b34:	fc 18 00 10 	movh	r8,0x10
80009b38:	10 37       	cp.w	r7,r8
80009b3a:	ce d1       	brne	80009b14 <main+0x214>
			//printf_char('%');
		}
		sdram[i] = i;
		
	}
	printf("\rSDRAM filled with test pattern       \r\n");
80009b3c:	fe fc 03 60 	ld.w	r12,pc[864]
80009b40:	f0 1f 00 c1 	mcall	80009e44 <main+0x544>
80009b44:	fc 16 d0 00 	movh	r6,0xd000
80009b48:	30 05       	mov	r5,0
80009b4a:	0a 98       	mov	r8,r5
80009b4c:	0a 97       	mov	r7,r5
	// Recover the test pattern from the SDRAM and verify it.
	
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80009b4e:	e0 63 28 f6 	mov	r3,10486
		{
			printf("\rRecovering test pattern from SDRAM: %d\%", j++);
80009b52:	fe f2 03 4e 	ld.w	r2,pc[846]
	// Recover the test pattern from the SDRAM and verify it.
	
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		
		if (i == j * progress_inc)
80009b56:	f0 03 02 49 	mul	r9,r8,r3
80009b5a:	0e 39       	cp.w	r9,r7
80009b5c:	c0 30       	breq	80009b62 <main+0x262>
80009b5e:	10 94       	mov	r4,r8
80009b60:	c0 88       	rjmp	80009b70 <main+0x270>
		{
			printf("\rRecovering test pattern from SDRAM: %d\%", j++);
80009b62:	f0 c4 ff ff 	sub	r4,r8,-1
80009b66:	1a d8       	st.w	--sp,r8
80009b68:	04 9c       	mov	r12,r2
80009b6a:	f0 1f 00 af 	mcall	80009e24 <main+0x524>
80009b6e:	2f fd       	sub	sp,-4
// 			print_dbg_ulong(j++);
// 			print_dbg_char('%');
		}
		tmp = sdram[i];
80009b70:	6c 08       	ld.w	r8,r6[0x0]
		if (tmp != i)//failed
		{
			noErrors++;
80009b72:	0e 38       	cp.w	r8,r7
80009b74:	f7 b5 01 ff 	subne	r5,-1
		
	}
	printf("\rSDRAM filled with test pattern       \r\n");
	// Recover the test pattern from the SDRAM and verify it.
	
	for (i = 0, j = 0; i < sdram_size; i++)
80009b78:	2f f7       	sub	r7,-1
80009b7a:	2f c6       	sub	r6,-4
80009b7c:	fc 18 00 10 	movh	r8,0x10
80009b80:	10 37       	cp.w	r7,r8
80009b82:	c0 30       	breq	80009b88 <main+0x288>
80009b84:	08 98       	mov	r8,r4
80009b86:	ce 8b       	rjmp	80009b56 <main+0x256>
		if (tmp != i)//failed
		{
			noErrors++;
		}
	}
	printf("\rSDRAM tested: ");
80009b88:	fe fc 03 1c 	ld.w	r12,pc[796]
80009b8c:	f0 1f 00 a6 	mcall	80009e24 <main+0x524>
	print_dbg_ulong(noErrors);
80009b90:	0a 9c       	mov	r12,r5
80009b92:	f0 1f 00 c6 	mcall	80009ea8 <main+0x5a8>
	printf(" corrupted word(s)       \r\n");
80009b96:	fe fc 03 16 	ld.w	r12,pc[790]
80009b9a:	f0 1f 00 ab 	mcall	80009e44 <main+0x544>
	if (noErrors)
80009b9e:	58 05       	cp.w	r5,0
80009ba0:	c0 50       	breq	80009baa <main+0x2aa>
	{
			LED3_SET;
80009ba2:	33 2c       	mov	r12,50
80009ba4:	f0 1f 00 bd 	mcall	80009e98 <main+0x598>
80009ba8:	c0 48       	rjmp	80009bb0 <main+0x2b0>
	}
	else
	{
			LED2_SET;
80009baa:	33 1c       	mov	r12,49
80009bac:	f0 1f 00 bb 	mcall	80009e98 <main+0x598>
	}

 	printf("\n\n\rTWI Test:\n\r");
80009bb0:	fe f7 03 00 	ld.w	r7,pc[768]
80009bb4:	0e 9c       	mov	r12,r7
80009bb6:	f0 1f 00 9c 	mcall	80009e24 <main+0x524>
	Log_Write("\n\n\rTWI Test:\n\r", 14);
80009bba:	30 eb       	mov	r11,14
80009bbc:	0e 9c       	mov	r12,r7
80009bbe:	f0 1f 00 b5 	mcall	80009e90 <main+0x590>
//  	twim_init();
// 	printf("\n\rInitialising the I2C Mux");
// 	PCA9542A_Init();
	
	printf("Scanning all Channels\n\r");
80009bc2:	fe fc 02 f2 	ld.w	r12,pc[754]
80009bc6:	f0 1f 00 98 	mcall	80009e24 <main+0x524>
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80009bca:	fe fc 02 ee 	ld.w	r12,pc[750]
80009bce:	f0 1f 00 96 	mcall	80009e24 <main+0x524>
80009bd2:	30 07       	mov	r7,0
80009bd4:	0e 90       	mov	r0,r7
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009bd6:	fe 74 38 00 	mov	r4,-51200
			{
				printf("A");
			}
			else
			{
				printf("-");
80009bda:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				printf("A");
80009bdc:	34 11       	mov	r1,65
			}
			else
			{
				printf("-");
			}
			printf(" ");
80009bde:	32 03       	mov	r3,32
	printf("Scanning all Channels\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
80009be0:	1a d0       	st.w	--sp,r0
80009be2:	fe fc 02 da 	ld.w	r12,pc[730]
80009be6:	f0 1f 00 90 	mcall	80009e24 <main+0x524>
80009bea:	ee c5 ff f0 	sub	r5,r7,-16
80009bee:	2f fd       	sub	sp,-4
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009bf0:	ee c6 ff ff 	sub	r6,r7,-1
80009bf4:	0e 9b       	mov	r11,r7
80009bf6:	08 9c       	mov	r12,r4
80009bf8:	f0 1f 00 b2 	mcall	80009ec0 <main+0x5c0>
			if(status == STATUS_OK)
80009bfc:	c0 51       	brne	80009c06 <main+0x306>
			{
				printf("A");
80009bfe:	02 9c       	mov	r12,r1
80009c00:	f0 1f 00 87 	mcall	80009e1c <main+0x51c>
80009c04:	c0 48       	rjmp	80009c0c <main+0x30c>
			}
			else
			{
				printf("-");
80009c06:	04 9c       	mov	r12,r2
80009c08:	f0 1f 00 85 	mcall	80009e1c <main+0x51c>
			}
			printf(" ");
80009c0c:	06 9c       	mov	r12,r3
80009c0e:	f0 1f 00 84 	mcall	80009e1c <main+0x51c>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
80009c12:	0a 36       	cp.w	r6,r5
80009c14:	c0 30       	breq	80009c1a <main+0x31a>
80009c16:	0c 97       	mov	r7,r6
80009c18:	ce cb       	rjmp	80009bf0 <main+0x2f0>
			{
				printf("-");
			}
			printf(" ");
		}
		printf("\n\r");
80009c1a:	fe fc 02 aa 	ld.w	r12,pc[682]
80009c1e:	f0 1f 00 82 	mcall	80009e24 <main+0x524>
// 	PCA9542A_Init();
	
	printf("Scanning all Channels\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80009c22:	2f f0       	sub	r0,-1
80009c24:	58 80       	cp.w	r0,8
80009c26:	c0 30       	breq	80009c2c <main+0x32c>
80009c28:	0c 97       	mov	r7,r6
80009c2a:	cd bb       	rjmp	80009be0 <main+0x2e0>
		printf("\n\r");
	}
	
	
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
80009c2c:	30 4c       	mov	r12,4
80009c2e:	f0 1f 00 a7 	mcall	80009ec8 <main+0x5c8>
	printf("\n\rScanning Channel 0\n\r");
80009c32:	fe fc 02 9a 	ld.w	r12,pc[666]
80009c36:	f0 1f 00 7c 	mcall	80009e24 <main+0x524>
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80009c3a:	fe fc 02 7e 	ld.w	r12,pc[638]
80009c3e:	f0 1f 00 7a 	mcall	80009e24 <main+0x524>
80009c42:	30 07       	mov	r7,0
80009c44:	0e 90       	mov	r0,r7
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009c46:	fe 74 38 00 	mov	r4,-51200
			{
				printf("A");
			}
			else
			{
				printf("-");
80009c4a:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				printf("A");
80009c4c:	34 11       	mov	r1,65
			}
			else
			{
				printf("-");
			}
			printf(" ");
80009c4e:	32 03       	mov	r3,32
	printf("\n\rScanning Channel 0\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
80009c50:	1a d0       	st.w	--sp,r0
80009c52:	fe fc 02 6a 	ld.w	r12,pc[618]
80009c56:	f0 1f 00 74 	mcall	80009e24 <main+0x524>
80009c5a:	ee c5 ff f0 	sub	r5,r7,-16
80009c5e:	2f fd       	sub	sp,-4
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009c60:	ee c6 ff ff 	sub	r6,r7,-1
80009c64:	0e 9b       	mov	r11,r7
80009c66:	08 9c       	mov	r12,r4
80009c68:	f0 1f 00 96 	mcall	80009ec0 <main+0x5c0>
			if(status == STATUS_OK)
80009c6c:	c0 51       	brne	80009c76 <main+0x376>
			{
				printf("A");
80009c6e:	02 9c       	mov	r12,r1
80009c70:	f0 1f 00 6b 	mcall	80009e1c <main+0x51c>
80009c74:	c0 48       	rjmp	80009c7c <main+0x37c>
			}
			else
			{
				printf("-");
80009c76:	04 9c       	mov	r12,r2
80009c78:	f0 1f 00 69 	mcall	80009e1c <main+0x51c>
			}
			printf(" ");
80009c7c:	06 9c       	mov	r12,r3
80009c7e:	f0 1f 00 68 	mcall	80009e1c <main+0x51c>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
80009c82:	0a 36       	cp.w	r6,r5
80009c84:	c0 30       	breq	80009c8a <main+0x38a>
80009c86:	0c 97       	mov	r7,r6
80009c88:	ce cb       	rjmp	80009c60 <main+0x360>
			{
				printf("-");
			}
			printf(" ");
		}
		printf("\n\r");
80009c8a:	fe fc 02 3a 	ld.w	r12,pc[570]
80009c8e:	f0 1f 00 66 	mcall	80009e24 <main+0x524>
	//Channel 0
	PCA9542A_Chan_Sel(I2C_CHANNEL_0);
	printf("\n\rScanning Channel 0\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80009c92:	2f f0       	sub	r0,-1
80009c94:	58 80       	cp.w	r0,8
80009c96:	c0 30       	breq	80009c9c <main+0x39c>
80009c98:	0c 97       	mov	r7,r6
80009c9a:	cd bb       	rjmp	80009c50 <main+0x350>
		}
		printf("\n\r");
	}
		
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
80009c9c:	30 5c       	mov	r12,5
80009c9e:	f0 1f 00 8b 	mcall	80009ec8 <main+0x5c8>
	printf("\n\rScanning Channel 1\n\r");
80009ca2:	fe fc 02 2e 	ld.w	r12,pc[558]
80009ca6:	f0 1f 00 60 	mcall	80009e24 <main+0x524>
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
80009caa:	fe fc 02 0e 	ld.w	r12,pc[526]
80009cae:	f0 1f 00 5e 	mcall	80009e24 <main+0x524>
80009cb2:	30 07       	mov	r7,0
80009cb4:	0e 90       	mov	r0,r7
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009cb6:	fe 74 38 00 	mov	r4,-51200
			{
				printf("A");
			}
			else
			{
				printf("-");
80009cba:	32 d2       	mov	r2,45
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
			if(status == STATUS_OK)
			{
				printf("A");
80009cbc:	34 11       	mov	r1,65
			}
			else
			{
				printf("-");
			}
			printf(" ");
80009cbe:	32 03       	mov	r3,32
	printf("\n\rScanning Channel 1\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
80009cc0:	1a d0       	st.w	--sp,r0
80009cc2:	4f fc       	lddpc	r12,80009ebc <main+0x5bc>
80009cc4:	f0 1f 00 58 	mcall	80009e24 <main+0x524>
80009cc8:	ee c5 ff f0 	sub	r5,r7,-16
80009ccc:	2f fd       	sub	sp,-4
		//printf_char(' ');
		for(j = 0; j < 16; j++)
		{
			int status = twim_probe(TWIM, tmp++);
80009cce:	ee c6 ff ff 	sub	r6,r7,-1
80009cd2:	0e 9b       	mov	r11,r7
80009cd4:	08 9c       	mov	r12,r4
80009cd6:	f0 1f 00 7b 	mcall	80009ec0 <main+0x5c0>
			if(status == STATUS_OK)
80009cda:	c0 51       	brne	80009ce4 <main+0x3e4>
			{
				printf("A");
80009cdc:	02 9c       	mov	r12,r1
80009cde:	f0 1f 00 50 	mcall	80009e1c <main+0x51c>
80009ce2:	c0 48       	rjmp	80009cea <main+0x3ea>
			}
			else
			{
				printf("-");
80009ce4:	04 9c       	mov	r12,r2
80009ce6:	f0 1f 00 4e 	mcall	80009e1c <main+0x51c>
			}
			printf(" ");
80009cea:	06 9c       	mov	r12,r3
80009cec:	f0 1f 00 4c 	mcall	80009e1c <main+0x51c>
	tmp = 0;
	for(i = 0; i < 8; i++)
	{
		printf("%d ", i);
		//printf_char(' ');
		for(j = 0; j < 16; j++)
80009cf0:	0a 36       	cp.w	r6,r5
80009cf2:	c0 30       	breq	80009cf8 <main+0x3f8>
80009cf4:	0c 97       	mov	r7,r6
80009cf6:	ce cb       	rjmp	80009cce <main+0x3ce>
			{
				printf("-");
			}
			printf(" ");
		}
		printf("\n\r");
80009cf8:	4f 3c       	lddpc	r12,80009ec4 <main+0x5c4>
80009cfa:	f0 1f 00 4b 	mcall	80009e24 <main+0x524>
	//Channel 1
	PCA9542A_Chan_Sel(I2C_CHANNEL_1);
	printf("\n\rScanning Channel 1\n\r");
	printf("h 0 1 2 3 4 5 6 7 8 9 A B C D E F\n\r");
	tmp = 0;
	for(i = 0; i < 8; i++)
80009cfe:	2f f0       	sub	r0,-1
80009d00:	58 80       	cp.w	r0,8
80009d02:	c0 30       	breq	80009d08 <main+0x408>
80009d04:	0c 97       	mov	r7,r6
80009d06:	cd db       	rjmp	80009cc0 <main+0x3c0>
			printf(" ");
		}
		printf("\n\r");
	}

	printf("\n\rInitialising Cameras");
80009d08:	4f 3c       	lddpc	r12,80009ed4 <main+0x5d4>
80009d0a:	f0 1f 00 47 	mcall	80009e24 <main+0x524>
	OV7670_Init();
80009d0e:	f0 1f 00 40 	mcall	80009e0c <main+0x50c>
	FIFO_Reset(CAMERA_LEFT | CAMERA_RIGHT);
80009d12:	30 3c       	mov	r12,3
80009d14:	f0 1f 00 71 	mcall	80009ed8 <main+0x5d8>
	if(STATUS_OK == OV7670_Status.Error)
80009d18:	4f 18       	lddpc	r8,80009edc <main+0x5dc>
80009d1a:	11 89       	ld.ub	r9,r8[0x0]
80009d1c:	30 08       	mov	r8,0
80009d1e:	f0 09 18 00 	cp.b	r9,r8
80009d22:	c0 51       	brne	80009d2c <main+0x42c>
	{
		printf("\n\rCamera Initialise Okay!");
80009d24:	4e fc       	lddpc	r12,80009ee0 <main+0x5e0>
80009d26:	f0 1f 00 40 	mcall	80009e24 <main+0x524>
80009d2a:	c0 48       	rjmp	80009d32 <main+0x432>
	}
	else
		printf("\n\rCamara Initialise Fail.");
80009d2c:	4e ec       	lddpc	r12,80009ee4 <main+0x5e4>
80009d2e:	f0 1f 00 3e 	mcall	80009e24 <main+0x524>
		
	printf("\n\rTaking Photos");
80009d32:	4e ec       	lddpc	r12,80009ee8 <main+0x5e8>
80009d34:	f0 1f 00 3c 	mcall	80009e24 <main+0x524>

	TakePhoto(CAMERA_LEFT | CAMERA_RIGHT);
80009d38:	30 3c       	mov	r12,3
80009d3a:	f0 1f 00 6d 	mcall	80009eec <main+0x5ec>
	while(Photos_Ready() == false)
80009d3e:	f0 1f 00 6d 	mcall	80009ef0 <main+0x5f0>
80009d42:	cf e0       	breq	80009d3e <main+0x43e>
		;

	if(Store_Both_Images() == true)
80009d44:	f0 1f 00 6c 	mcall	80009ef4 <main+0x5f4>
80009d48:	c0 40       	breq	80009d50 <main+0x450>
		printf("\n\rImages Stored Successfully!");
80009d4a:	4e cc       	lddpc	r12,80009ef8 <main+0x5f8>
80009d4c:	f0 1f 00 36 	mcall	80009e24 <main+0x524>
		
	printf("\n\rMotor Testing:\n\rMotor Initialised");
80009d50:	4e bc       	lddpc	r12,80009efc <main+0x5fc>
80009d52:	f0 1f 00 35 	mcall	80009e24 <main+0x524>
 	Motor_Init();
80009d56:	f0 1f 00 2f 	mcall	80009e10 <main+0x510>
	Motors_Reset();//reset the motors to test them
80009d5a:	f0 1f 00 6a 	mcall	80009f00 <main+0x600>
	while(Motors_Moving() == true)
80009d5e:	f0 1f 00 6a 	mcall	80009f04 <main+0x604>
80009d62:	cf e1       	brne	80009d5e <main+0x45e>
		;//wait for the motors to finish moving
		
	printf("\n\rTest Complete!");
80009d64:	4e 9c       	lddpc	r12,80009f08 <main+0x608>
80009d66:	f0 1f 00 30 	mcall	80009e24 <main+0x524>
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		TOGGLE();
80009d6a:	f0 1f 00 69 	mcall	80009f0c <main+0x60c>
80009d6e:	cf eb       	rjmp	80009d6a <main+0x46a>
	LED3_SET;
	LED4_SET;
	LED5_SET;
	LED6_SET;
	delay_s(1);
	printf("\n\rAll LEDS off;");
80009d70:	4e 8c       	lddpc	r12,80009f10 <main+0x610>
80009d72:	f0 1f 00 2d 	mcall	80009e24 <main+0x524>
	LEDMOTOR_CLR;
80009d76:	32 cc       	mov	r12,44
80009d78:	f0 1f 00 67 	mcall	80009f14 <main+0x614>
	LED2_CLR;
80009d7c:	33 1c       	mov	r12,49
80009d7e:	f0 1f 00 66 	mcall	80009f14 <main+0x614>
	LED3_CLR;
80009d82:	33 2c       	mov	r12,50
80009d84:	f0 1f 00 64 	mcall	80009f14 <main+0x614>
	LED4_CLR;
80009d88:	33 bc       	mov	r12,59
80009d8a:	f0 1f 00 63 	mcall	80009f14 <main+0x614>
	LED5_CLR;
80009d8e:	33 cc       	mov	r12,60
80009d90:	f0 1f 00 61 	mcall	80009f14 <main+0x614>
	LED6_CLR;
80009d94:	33 dc       	mov	r12,61
80009d96:	f0 1f 00 60 	mcall	80009f14 <main+0x614>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009d9a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009d9e:	e0 6a 24 00 	mov	r10,9216
80009da2:	ea 1a 00 f4 	orh	r10,0xf4
80009da6:	f0 0a 00 0a 	add	r10,r8,r10
80009daa:	fe 9f fe a2 	bral	80009aee <main+0x1ee>
	delay_s(1);
	
	printf("\n\n\rSDRAM Test:");
80009dae:	4d bc       	lddpc	r12,80009f18 <main+0x618>
80009db0:	f0 1f 00 1d 	mcall	80009e24 <main+0x524>
	sdram_size = SDRAM_SIZE >> 2;
	printf("\n\rSDRAM size: %d", SDRAM_SIZE >> 20);
80009db4:	30 48       	mov	r8,4
80009db6:	1a d8       	st.w	--sp,r8
80009db8:	4d 9c       	lddpc	r12,80009f1c <main+0x61c>
80009dba:	f0 1f 00 1b 	mcall	80009e24 <main+0x524>
//	printflong(SDRAM_SIZE >> 20);
	printf(" MB\r\n");
80009dbe:	4d 9c       	lddpc	r12,80009f20 <main+0x620>
80009dc0:	f0 1f 00 21 	mcall	80009e44 <main+0x544>
//	printf_ulong(sdram_size);
	//sdramc_init(FOSC0);
	printf("\n\rSDRAM initialized\r\n");
80009dc4:	4d 8c       	lddpc	r12,80009f24 <main+0x624>
80009dc6:	f0 1f 00 20 	mcall	80009e44 <main+0x544>
80009dca:	fc 15 d0 00 	movh	r5,0xd000
80009dce:	30 08       	mov	r8,0
80009dd0:	10 97       	mov	r7,r8
80009dd2:	2f fd       	sub	sp,-4
	// printed progression status.
	progress_inc = (sdram_size + 50) / 100;
	// Fill the SDRAM with the test pattern.
	for (i = 0, j = 0; i < sdram_size; i++)
	{
		if (i == j * progress_inc)
80009dd4:	e0 64 28 f6 	mov	r4,10486
		{
			//LED_Toggle(LED_SDRAM_WRITE);
			printf("\rFilling SDRAM with test pattern: %d\%", j++);
80009dd8:	4d 43       	lddpc	r3,80009f28 <main+0x628>
80009dda:	fe 9f fe 9e 	bral	80009b16 <main+0x216>
80009dde:	00 00       	add	r0,r0
80009de0:	80 00       	ld.sh	r0,r0[0x0]
80009de2:	7a 60       	ld.w	r0,sp[0x18]
80009de4:	80 00       	ld.sh	r0,r0[0x0]
80009de6:	33 74       	mov	r4,55
80009de8:	80 00       	ld.sh	r0,r0[0x0]
80009dea:	32 c8       	mov	r8,44
80009dec:	80 00       	ld.sh	r0,r0[0x0]
80009dee:	97 b8       	st.w	r11[0x2c],r8
80009df0:	80 00       	ld.sh	r0,r0[0x0]
80009df2:	89 04       	st.w	r4[0x0],r4
80009df4:	80 01       	ld.sh	r1,r0[0x0]
80009df6:	3d 50       	mov	r0,-43
80009df8:	80 01       	ld.sh	r1,r0[0x0]
80009dfa:	39 98       	mov	r8,-103
80009dfc:	80 00       	ld.sh	r0,r0[0x0]
80009dfe:	31 c4       	mov	r4,28
80009e00:	80 00       	ld.sh	r0,r0[0x0]
80009e02:	3d 44       	mov	r4,-44
80009e04:	80 00       	ld.sh	r0,r0[0x0]
80009e06:	97 80       	st.w	r11[0x20],r0
80009e08:	80 00       	ld.sh	r0,r0[0x0]
80009e0a:	2e 04       	sub	r4,-32
80009e0c:	80 00       	ld.sh	r0,r0[0x0]
80009e0e:	94 d8       	ld.uh	r8,r10[0xa]
80009e10:	80 00       	ld.sh	r0,r0[0x0]
80009e12:	8c 64       	ld.sh	r4,r6[0xc]
80009e14:	80 01       	ld.sh	r1,r0[0x0]
80009e16:	39 b0       	mov	r0,-101
80009e18:	80 00       	ld.sh	r0,r0[0x0]
80009e1a:	a1 e4       	*unknown*
80009e1c:	80 00       	ld.sh	r0,r0[0x0]
80009e1e:	a0 d8       	st.b	r0[0x5],r8
80009e20:	80 01       	ld.sh	r1,r0[0x0]
80009e22:	39 b4       	mov	r4,-101
80009e24:	80 00       	ld.sh	r0,r0[0x0]
80009e26:	a0 a8       	st.b	r0[0x2],r8
80009e28:	80 01       	ld.sh	r1,r0[0x0]
80009e2a:	39 d0       	mov	r0,-99
80009e2c:	80 00       	ld.sh	r0,r0[0x0]
80009e2e:	7b 20       	ld.w	r0,sp[0x48]
80009e30:	80 00       	ld.sh	r0,r0[0x0]
80009e32:	7b 34       	ld.w	r4,sp[0x4c]
80009e34:	80 01       	ld.sh	r1,r0[0x0]
80009e36:	39 ec       	mov	r12,-98
80009e38:	80 01       	ld.sh	r1,r0[0x0]
80009e3a:	39 f4       	mov	r4,-97
80009e3c:	80 01       	ld.sh	r1,r0[0x0]
80009e3e:	39 fc       	mov	r12,-97
80009e40:	80 01       	ld.sh	r1,r0[0x0]
80009e42:	3a 0c       	mov	r12,-96
80009e44:	80 00       	ld.sh	r0,r0[0x0]
80009e46:	a1 d4       	cbr	r4,0x1
80009e48:	80 00       	ld.sh	r0,r0[0x0]
80009e4a:	79 28       	ld.w	r8,r12[0x48]
80009e4c:	80 00       	ld.sh	r0,r0[0x0]
80009e4e:	78 d4       	ld.w	r4,r12[0x34]
80009e50:	80 00       	ld.sh	r0,r0[0x0]
80009e52:	76 60       	ld.w	r0,r11[0x18]
80009e54:	80 00       	ld.sh	r0,r0[0x0]
80009e56:	76 18       	ld.w	r8,r11[0x4]
80009e58:	80 00       	ld.sh	r0,r0[0x0]
80009e5a:	72 78       	ld.w	r8,r9[0x1c]
80009e5c:	80 01       	ld.sh	r1,r0[0x0]
80009e5e:	39 a8       	mov	r8,-102
80009e60:	80 00       	ld.sh	r0,r0[0x0]
80009e62:	72 48       	ld.w	r8,r9[0x10]
80009e64:	80 01       	ld.sh	r1,r0[0x0]
80009e66:	3a 3c       	mov	r12,-93
80009e68:	80 00       	ld.sh	r0,r0[0x0]
80009e6a:	77 10       	ld.w	r0,r11[0x44]
80009e6c:	80 00       	ld.sh	r0,r0[0x0]
80009e6e:	73 dc       	ld.w	r12,r9[0x74]
80009e70:	80 01       	ld.sh	r1,r0[0x0]
80009e72:	3a 70       	mov	r0,-89
80009e74:	80 01       	ld.sh	r1,r0[0x0]
80009e76:	3a 8c       	mov	r12,-88
80009e78:	80 01       	ld.sh	r1,r0[0x0]
80009e7a:	3a a0       	mov	r0,-86
80009e7c:	80 00       	ld.sh	r0,r0[0x0]
80009e7e:	72 90       	ld.w	r0,r9[0x24]
80009e80:	80 01       	ld.sh	r1,r0[0x0]
80009e82:	3a b8       	mov	r8,-85
80009e84:	80 01       	ld.sh	r1,r0[0x0]
80009e86:	3a c4       	mov	r4,-84
80009e88:	80 01       	ld.sh	r1,r0[0x0]
80009e8a:	3a d4       	mov	r4,-83
80009e8c:	80 01       	ld.sh	r1,r0[0x0]
80009e8e:	3a ec       	mov	r12,-82
80009e90:	80 00       	ld.sh	r0,r0[0x0]
80009e92:	98 bc       	ld.uh	r12,r12[0x6]
80009e94:	80 01       	ld.sh	r1,r0[0x0]
80009e96:	3b 00       	mov	r0,-80
80009e98:	80 00       	ld.sh	r0,r0[0x0]
80009e9a:	32 0e       	mov	lr,32
80009e9c:	80 01       	ld.sh	r1,r0[0x0]
80009e9e:	3b 44       	mov	r4,-76
80009ea0:	80 01       	ld.sh	r1,r0[0x0]
80009ea2:	3b 6c       	mov	r12,-74
80009ea4:	80 01       	ld.sh	r1,r0[0x0]
80009ea6:	3b 98       	mov	r8,-71
80009ea8:	80 00       	ld.sh	r0,r0[0x0]
80009eaa:	79 e8       	ld.w	r8,r12[0x78]
80009eac:	80 01       	ld.sh	r1,r0[0x0]
80009eae:	3b a8       	mov	r8,-70
80009eb0:	80 01       	ld.sh	r1,r0[0x0]
80009eb2:	3b c4       	mov	r4,-68
80009eb4:	80 01       	ld.sh	r1,r0[0x0]
80009eb6:	3b d4       	mov	r4,-67
80009eb8:	80 01       	ld.sh	r1,r0[0x0]
80009eba:	3b ec       	mov	r12,-66
80009ebc:	80 01       	ld.sh	r1,r0[0x0]
80009ebe:	3c 10       	mov	r0,-63
80009ec0:	80 00       	ld.sh	r0,r0[0x0]
80009ec2:	3d 28       	mov	r8,-46
80009ec4:	80 01       	ld.sh	r1,r0[0x0]
80009ec6:	3c 28       	mov	r8,-62
80009ec8:	80 00       	ld.sh	r0,r0[0x0]
80009eca:	97 5c       	st.w	r11[0x14],r12
80009ecc:	80 01       	ld.sh	r1,r0[0x0]
80009ece:	3c 14       	mov	r4,-63
80009ed0:	80 01       	ld.sh	r1,r0[0x0]
80009ed2:	3c 2c       	mov	r12,-62
80009ed4:	80 01       	ld.sh	r1,r0[0x0]
80009ed6:	3c 44       	mov	r4,-60
80009ed8:	80 00       	ld.sh	r0,r0[0x0]
80009eda:	8e 08       	ld.sh	r8,r7[0x0]
80009edc:	00 00       	add	r0,r0
80009ede:	14 e8       	st.h	--r10,r8
80009ee0:	80 01       	ld.sh	r1,r0[0x0]
80009ee2:	3c 5c       	mov	r12,-59
80009ee4:	80 01       	ld.sh	r1,r0[0x0]
80009ee6:	3c 78       	mov	r8,-57
80009ee8:	80 01       	ld.sh	r1,r0[0x0]
80009eea:	3c 94       	mov	r4,-55
80009eec:	80 00       	ld.sh	r0,r0[0x0]
80009eee:	93 4c       	st.w	r9[0x10],r12
80009ef0:	80 00       	ld.sh	r0,r0[0x0]
80009ef2:	8d a8       	st.w	r6[0x28],r8
80009ef4:	80 00       	ld.sh	r0,r0[0x0]
80009ef6:	90 b4       	ld.uh	r4,r8[0x6]
80009ef8:	80 01       	ld.sh	r1,r0[0x0]
80009efa:	3c a4       	mov	r4,-54
80009efc:	80 01       	ld.sh	r1,r0[0x0]
80009efe:	3c c4       	mov	r4,-52
80009f00:	80 00       	ld.sh	r0,r0[0x0]
80009f02:	8b 10       	st.w	r5[0x4],r0
80009f04:	80 00       	ld.sh	r0,r0[0x0]
80009f06:	8a 00       	ld.sh	r0,r5[0x0]
80009f08:	80 01       	ld.sh	r1,r0[0x0]
80009f0a:	3c e8       	mov	r8,-50
80009f0c:	80 00       	ld.sh	r0,r0[0x0]
80009f0e:	98 3c       	ld.sh	r12,r12[0x6]
80009f10:	80 01       	ld.sh	r1,r0[0x0]
80009f12:	3c fc       	mov	r12,-49
80009f14:	80 00       	ld.sh	r0,r0[0x0]
80009f16:	32 2a       	mov	r10,34
80009f18:	80 01       	ld.sh	r1,r0[0x0]
80009f1a:	3d 0c       	mov	r12,-48
80009f1c:	80 01       	ld.sh	r1,r0[0x0]
80009f1e:	3d 1c       	mov	r12,-47
80009f20:	80 01       	ld.sh	r1,r0[0x0]
80009f22:	3d 30       	mov	r0,-45
80009f24:	80 01       	ld.sh	r1,r0[0x0]
80009f26:	3d 38       	mov	r8,-45
80009f28:	80 01       	ld.sh	r1,r0[0x0]
80009f2a:	3b 1c       	mov	r12,-79

80009f2c <memcmp>:
80009f2c:	d4 01       	pushm	lr
80009f2e:	30 08       	mov	r8,0
80009f30:	c0 d8       	rjmp	80009f4a <memcmp+0x1e>
80009f32:	f8 08 07 0e 	ld.ub	lr,r12[r8]
80009f36:	f6 08 07 09 	ld.ub	r9,r11[r8]
80009f3a:	20 1a       	sub	r10,1
80009f3c:	2f f8       	sub	r8,-1
80009f3e:	f2 0e 18 00 	cp.b	lr,r9
80009f42:	c0 40       	breq	80009f4a <memcmp+0x1e>
80009f44:	fc 09 01 0c 	sub	r12,lr,r9
80009f48:	d8 02       	popm	pc
80009f4a:	58 0a       	cp.w	r10,0
80009f4c:	cf 31       	brne	80009f32 <memcmp+0x6>
80009f4e:	14 9c       	mov	r12,r10
80009f50:	d8 02       	popm	pc

80009f52 <memcpy>:
80009f52:	58 8a       	cp.w	r10,8
80009f54:	c2 f5       	brlt	80009fb2 <memcpy+0x60>
80009f56:	f9 eb 10 09 	or	r9,r12,r11
80009f5a:	e2 19 00 03 	andl	r9,0x3,COH
80009f5e:	e0 81 00 97 	brne	8000a08c <memcpy+0x13a>
80009f62:	e0 4a 00 20 	cp.w	r10,32
80009f66:	c3 b4       	brge	80009fdc <memcpy+0x8a>
80009f68:	f4 08 14 02 	asr	r8,r10,0x2
80009f6c:	f0 09 11 08 	rsub	r9,r8,8
80009f70:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009f74:	76 69       	ld.w	r9,r11[0x18]
80009f76:	99 69       	st.w	r12[0x18],r9
80009f78:	76 59       	ld.w	r9,r11[0x14]
80009f7a:	99 59       	st.w	r12[0x14],r9
80009f7c:	76 49       	ld.w	r9,r11[0x10]
80009f7e:	99 49       	st.w	r12[0x10],r9
80009f80:	76 39       	ld.w	r9,r11[0xc]
80009f82:	99 39       	st.w	r12[0xc],r9
80009f84:	76 29       	ld.w	r9,r11[0x8]
80009f86:	99 29       	st.w	r12[0x8],r9
80009f88:	76 19       	ld.w	r9,r11[0x4]
80009f8a:	99 19       	st.w	r12[0x4],r9
80009f8c:	76 09       	ld.w	r9,r11[0x0]
80009f8e:	99 09       	st.w	r12[0x0],r9
80009f90:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009f94:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009f98:	e0 1a 00 03 	andl	r10,0x3
80009f9c:	f4 0a 11 04 	rsub	r10,r10,4
80009fa0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009fa4:	17 a9       	ld.ub	r9,r11[0x2]
80009fa6:	b0 a9       	st.b	r8[0x2],r9
80009fa8:	17 99       	ld.ub	r9,r11[0x1]
80009faa:	b0 99       	st.b	r8[0x1],r9
80009fac:	17 89       	ld.ub	r9,r11[0x0]
80009fae:	b0 89       	st.b	r8[0x0],r9
80009fb0:	5e fc       	retal	r12
80009fb2:	f4 0a 11 09 	rsub	r10,r10,9
80009fb6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009fba:	17 f9       	ld.ub	r9,r11[0x7]
80009fbc:	b8 f9       	st.b	r12[0x7],r9
80009fbe:	17 e9       	ld.ub	r9,r11[0x6]
80009fc0:	b8 e9       	st.b	r12[0x6],r9
80009fc2:	17 d9       	ld.ub	r9,r11[0x5]
80009fc4:	b8 d9       	st.b	r12[0x5],r9
80009fc6:	17 c9       	ld.ub	r9,r11[0x4]
80009fc8:	b8 c9       	st.b	r12[0x4],r9
80009fca:	17 b9       	ld.ub	r9,r11[0x3]
80009fcc:	b8 b9       	st.b	r12[0x3],r9
80009fce:	17 a9       	ld.ub	r9,r11[0x2]
80009fd0:	b8 a9       	st.b	r12[0x2],r9
80009fd2:	17 99       	ld.ub	r9,r11[0x1]
80009fd4:	b8 99       	st.b	r12[0x1],r9
80009fd6:	17 89       	ld.ub	r9,r11[0x0]
80009fd8:	b8 89       	st.b	r12[0x0],r9
80009fda:	5e fc       	retal	r12
80009fdc:	eb cd 40 c0 	pushm	r6-r7,lr
80009fe0:	18 99       	mov	r9,r12
80009fe2:	22 0a       	sub	r10,32
80009fe4:	b7 07       	ld.d	r6,r11++
80009fe6:	b3 26       	st.d	r9++,r6
80009fe8:	b7 07       	ld.d	r6,r11++
80009fea:	b3 26       	st.d	r9++,r6
80009fec:	b7 07       	ld.d	r6,r11++
80009fee:	b3 26       	st.d	r9++,r6
80009ff0:	b7 07       	ld.d	r6,r11++
80009ff2:	b3 26       	st.d	r9++,r6
80009ff4:	22 0a       	sub	r10,32
80009ff6:	cf 74       	brge	80009fe4 <memcpy+0x92>
80009ff8:	2f 0a       	sub	r10,-16
80009ffa:	c0 65       	brlt	8000a006 <memcpy+0xb4>
80009ffc:	b7 07       	ld.d	r6,r11++
80009ffe:	b3 26       	st.d	r9++,r6
8000a000:	b7 07       	ld.d	r6,r11++
8000a002:	b3 26       	st.d	r9++,r6
8000a004:	21 0a       	sub	r10,16
8000a006:	5c 3a       	neg	r10
8000a008:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000a00c:	d7 03       	nop
8000a00e:	d7 03       	nop
8000a010:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000a014:	f3 66 00 0e 	st.b	r9[14],r6
8000a018:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000a01c:	f3 66 00 0d 	st.b	r9[13],r6
8000a020:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000a024:	f3 66 00 0c 	st.b	r9[12],r6
8000a028:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000a02c:	f3 66 00 0b 	st.b	r9[11],r6
8000a030:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000a034:	f3 66 00 0a 	st.b	r9[10],r6
8000a038:	f7 36 00 09 	ld.ub	r6,r11[9]
8000a03c:	f3 66 00 09 	st.b	r9[9],r6
8000a040:	f7 36 00 08 	ld.ub	r6,r11[8]
8000a044:	f3 66 00 08 	st.b	r9[8],r6
8000a048:	f7 36 00 07 	ld.ub	r6,r11[7]
8000a04c:	f3 66 00 07 	st.b	r9[7],r6
8000a050:	f7 36 00 06 	ld.ub	r6,r11[6]
8000a054:	f3 66 00 06 	st.b	r9[6],r6
8000a058:	f7 36 00 05 	ld.ub	r6,r11[5]
8000a05c:	f3 66 00 05 	st.b	r9[5],r6
8000a060:	f7 36 00 04 	ld.ub	r6,r11[4]
8000a064:	f3 66 00 04 	st.b	r9[4],r6
8000a068:	f7 36 00 03 	ld.ub	r6,r11[3]
8000a06c:	f3 66 00 03 	st.b	r9[3],r6
8000a070:	f7 36 00 02 	ld.ub	r6,r11[2]
8000a074:	f3 66 00 02 	st.b	r9[2],r6
8000a078:	f7 36 00 01 	ld.ub	r6,r11[1]
8000a07c:	f3 66 00 01 	st.b	r9[1],r6
8000a080:	f7 36 00 00 	ld.ub	r6,r11[0]
8000a084:	f3 66 00 00 	st.b	r9[0],r6
8000a088:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a08c:	20 1a       	sub	r10,1
8000a08e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000a092:	f8 0a 0b 09 	st.b	r12[r10],r9
8000a096:	cf b1       	brne	8000a08c <memcpy+0x13a>
8000a098:	5e fc       	retal	r12

8000a09a <memset>:
8000a09a:	18 98       	mov	r8,r12
8000a09c:	c0 38       	rjmp	8000a0a2 <memset+0x8>
8000a09e:	10 cb       	st.b	r8++,r11
8000a0a0:	20 1a       	sub	r10,1
8000a0a2:	58 0a       	cp.w	r10,0
8000a0a4:	cf d1       	brne	8000a09e <memset+0x4>
8000a0a6:	5e fc       	retal	r12

8000a0a8 <printf>:
8000a0a8:	d4 21       	pushm	r4-r7,lr
8000a0aa:	48 b8       	lddpc	r8,8000a0d4 <printf+0x2c>
8000a0ac:	fa c4 ff ec 	sub	r4,sp,-20
8000a0b0:	18 96       	mov	r6,r12
8000a0b2:	70 07       	ld.w	r7,r8[0x0]
8000a0b4:	58 07       	cp.w	r7,0
8000a0b6:	c0 70       	breq	8000a0c4 <printf+0x1c>
8000a0b8:	6e 68       	ld.w	r8,r7[0x18]
8000a0ba:	58 08       	cp.w	r8,0
8000a0bc:	c0 41       	brne	8000a0c4 <printf+0x1c>
8000a0be:	0e 9c       	mov	r12,r7
8000a0c0:	e0 a0 25 12 	rcall	8000eae4 <__sinit>
8000a0c4:	08 99       	mov	r9,r4
8000a0c6:	0c 9a       	mov	r10,r6
8000a0c8:	0e 9c       	mov	r12,r7
8000a0ca:	6e 1b       	ld.w	r11,r7[0x4]
8000a0cc:	e0 a0 02 fa 	rcall	8000a6c0 <_vfprintf_r>
8000a0d0:	d8 22       	popm	r4-r7,pc
8000a0d2:	d7 03       	nop
8000a0d4:	00 00       	add	r0,r0
8000a0d6:	01 c0       	ld.ub	r0,r0[0x4]

8000a0d8 <putchar>:
8000a0d8:	d4 21       	pushm	r4-r7,lr
8000a0da:	48 98       	lddpc	r8,8000a0fc <putchar+0x24>
8000a0dc:	18 97       	mov	r7,r12
8000a0de:	70 0c       	ld.w	r12,r8[0x0]
8000a0e0:	58 0c       	cp.w	r12,0
8000a0e2:	c0 60       	breq	8000a0ee <putchar+0x16>
8000a0e4:	78 68       	ld.w	r8,r12[0x18]
8000a0e6:	58 08       	cp.w	r8,0
8000a0e8:	c0 31       	brne	8000a0ee <putchar+0x16>
8000a0ea:	e0 a0 24 fd 	rcall	8000eae4 <__sinit>
8000a0ee:	48 48       	lddpc	r8,8000a0fc <putchar+0x24>
8000a0f0:	70 08       	ld.w	r8,r8[0x0]
8000a0f2:	0e 9b       	mov	r11,r7
8000a0f4:	10 9c       	mov	r12,r8
8000a0f6:	70 1a       	ld.w	r10,r8[0x4]
8000a0f8:	c0 4c       	rcall	8000a100 <_putc_r>
8000a0fa:	d8 22       	popm	r4-r7,pc
8000a0fc:	00 00       	add	r0,r0
8000a0fe:	01 c0       	ld.ub	r0,r0[0x4]

8000a100 <_putc_r>:
8000a100:	d4 21       	pushm	r4-r7,lr
8000a102:	20 2d       	sub	sp,8
8000a104:	18 97       	mov	r7,r12
8000a106:	58 0c       	cp.w	r12,0
8000a108:	c0 a0       	breq	8000a11c <_putc_r+0x1c>
8000a10a:	78 68       	ld.w	r8,r12[0x18]
8000a10c:	58 08       	cp.w	r8,0
8000a10e:	c0 71       	brne	8000a11c <_putc_r+0x1c>
8000a110:	50 1b       	stdsp	sp[0x4],r11
8000a112:	50 0a       	stdsp	sp[0x0],r10
8000a114:	e0 a0 24 e8 	rcall	8000eae4 <__sinit>
8000a118:	40 0a       	lddsp	r10,sp[0x0]
8000a11a:	40 1b       	lddsp	r11,sp[0x4]
8000a11c:	49 78       	lddpc	r8,8000a178 <_putc_r+0x78>
8000a11e:	10 3a       	cp.w	r10,r8
8000a120:	c0 31       	brne	8000a126 <_putc_r+0x26>
8000a122:	6e 0a       	ld.w	r10,r7[0x0]
8000a124:	c0 a8       	rjmp	8000a138 <_putc_r+0x38>
8000a126:	49 68       	lddpc	r8,8000a17c <_putc_r+0x7c>
8000a128:	10 3a       	cp.w	r10,r8
8000a12a:	c0 31       	brne	8000a130 <_putc_r+0x30>
8000a12c:	6e 1a       	ld.w	r10,r7[0x4]
8000a12e:	c0 58       	rjmp	8000a138 <_putc_r+0x38>
8000a130:	49 48       	lddpc	r8,8000a180 <_putc_r+0x80>
8000a132:	10 3a       	cp.w	r10,r8
8000a134:	ef fa 00 02 	ld.weq	r10,r7[0x8]
8000a138:	74 28       	ld.w	r8,r10[0x8]
8000a13a:	20 18       	sub	r8,1
8000a13c:	95 28       	st.w	r10[0x8],r8
8000a13e:	c1 57       	brpl	8000a168 <_putc_r+0x68>
8000a140:	74 69       	ld.w	r9,r10[0x18]
8000a142:	12 38       	cp.w	r8,r9
8000a144:	c0 e5       	brlt	8000a160 <_putc_r+0x60>
8000a146:	74 08       	ld.w	r8,r10[0x0]
8000a148:	b0 8b       	st.b	r8[0x0],r11
8000a14a:	30 a9       	mov	r9,10
8000a14c:	74 08       	ld.w	r8,r10[0x0]
8000a14e:	11 8c       	ld.ub	r12,r8[0x0]
8000a150:	f2 0c 18 00 	cp.b	r12,r9
8000a154:	c0 30       	breq	8000a15a <_putc_r+0x5a>
8000a156:	2f f8       	sub	r8,-1
8000a158:	c0 c8       	rjmp	8000a170 <_putc_r+0x70>
8000a15a:	0e 9c       	mov	r12,r7
8000a15c:	30 ab       	mov	r11,10
8000a15e:	c0 28       	rjmp	8000a162 <_putc_r+0x62>
8000a160:	0e 9c       	mov	r12,r7
8000a162:	e0 a0 1c 8d 	rcall	8000da7c <__swbuf_r>
8000a166:	c0 68       	rjmp	8000a172 <_putc_r+0x72>
8000a168:	74 08       	ld.w	r8,r10[0x0]
8000a16a:	b0 8b       	st.b	r8[0x0],r11
8000a16c:	74 08       	ld.w	r8,r10[0x0]
8000a16e:	11 3c       	ld.ub	r12,r8++
8000a170:	95 08       	st.w	r10[0x0],r8
8000a172:	2f ed       	sub	sp,-8
8000a174:	d8 22       	popm	r4-r7,pc
8000a176:	d7 03       	nop
8000a178:	80 01       	ld.sh	r1,r0[0x0]
8000a17a:	42 80       	lddsp	r0,sp[0xa0]
8000a17c:	80 01       	ld.sh	r1,r0[0x0]
8000a17e:	42 a0       	lddsp	r0,sp[0xa8]
8000a180:	80 01       	ld.sh	r1,r0[0x0]
8000a182:	42 c0       	lddsp	r0,sp[0xb0]

8000a184 <_puts_r>:
8000a184:	d4 21       	pushm	r4-r7,lr
8000a186:	20 7d       	sub	sp,28
8000a188:	16 96       	mov	r6,r11
8000a18a:	18 97       	mov	r7,r12
8000a18c:	16 9c       	mov	r12,r11
8000a18e:	cf 1c       	rcall	8000a370 <strlen>
8000a190:	f8 c8 ff ff 	sub	r8,r12,-1
8000a194:	50 68       	stdsp	sp[0x18],r8
8000a196:	48 f8       	lddpc	r8,8000a1d0 <_puts_r+0x4c>
8000a198:	50 28       	stdsp	sp[0x8],r8
8000a19a:	30 18       	mov	r8,1
8000a19c:	50 06       	stdsp	sp[0x0],r6
8000a19e:	50 38       	stdsp	sp[0xc],r8
8000a1a0:	50 1c       	stdsp	sp[0x4],r12
8000a1a2:	30 28       	mov	r8,2
8000a1a4:	50 4d       	stdsp	sp[0x10],sp
8000a1a6:	50 58       	stdsp	sp[0x14],r8
8000a1a8:	58 07       	cp.w	r7,0
8000a1aa:	c0 70       	breq	8000a1b8 <_puts_r+0x34>
8000a1ac:	6e 68       	ld.w	r8,r7[0x18]
8000a1ae:	58 08       	cp.w	r8,0
8000a1b0:	c0 41       	brne	8000a1b8 <_puts_r+0x34>
8000a1b2:	0e 9c       	mov	r12,r7
8000a1b4:	e0 a0 24 98 	rcall	8000eae4 <__sinit>
8000a1b8:	0e 9c       	mov	r12,r7
8000a1ba:	fa ca ff f0 	sub	r10,sp,-16
8000a1be:	6e 1b       	ld.w	r11,r7[0x4]
8000a1c0:	e0 a0 26 56 	rcall	8000ee6c <__sfvwrite_r>
8000a1c4:	f9 bc 01 ff 	movne	r12,-1
8000a1c8:	f9 bc 00 0a 	moveq	r12,10
8000a1cc:	2f 9d       	sub	sp,-28
8000a1ce:	d8 22       	popm	r4-r7,pc
8000a1d0:	80 01       	ld.sh	r1,r0[0x0]
8000a1d2:	3e 6c       	mov	r12,-26

8000a1d4 <puts>:
8000a1d4:	d4 01       	pushm	lr
8000a1d6:	48 38       	lddpc	r8,8000a1e0 <puts+0xc>
8000a1d8:	18 9b       	mov	r11,r12
8000a1da:	70 0c       	ld.w	r12,r8[0x0]
8000a1dc:	cd 4f       	rcall	8000a184 <_puts_r>
8000a1de:	d8 02       	popm	pc
8000a1e0:	00 00       	add	r0,r0
8000a1e2:	01 c0       	ld.ub	r0,r0[0x4]

8000a1e4 <scanf>:
8000a1e4:	d4 21       	pushm	r4-r7,lr
8000a1e6:	48 b8       	lddpc	r8,8000a210 <scanf+0x2c>
8000a1e8:	18 97       	mov	r7,r12
8000a1ea:	fa c4 ff ec 	sub	r4,sp,-20
8000a1ee:	70 0c       	ld.w	r12,r8[0x0]
8000a1f0:	58 0c       	cp.w	r12,0
8000a1f2:	c0 60       	breq	8000a1fe <scanf+0x1a>
8000a1f4:	78 68       	ld.w	r8,r12[0x18]
8000a1f6:	58 08       	cp.w	r8,0
8000a1f8:	c0 31       	brne	8000a1fe <scanf+0x1a>
8000a1fa:	e0 a0 24 75 	rcall	8000eae4 <__sinit>
8000a1fe:	48 58       	lddpc	r8,8000a210 <scanf+0x2c>
8000a200:	70 08       	ld.w	r8,r8[0x0]
8000a202:	08 99       	mov	r9,r4
8000a204:	0e 9a       	mov	r10,r7
8000a206:	10 9c       	mov	r12,r8
8000a208:	70 0b       	ld.w	r11,r8[0x0]
8000a20a:	e0 a0 11 e9 	rcall	8000c5dc <__svfscanf_r>
8000a20e:	d8 22       	popm	r4-r7,pc
8000a210:	00 00       	add	r0,r0
8000a212:	01 c0       	ld.ub	r0,r0[0x4]

8000a214 <setbuf>:
8000a214:	d4 01       	pushm	lr
8000a216:	e0 69 04 00 	mov	r9,1024
8000a21a:	58 0b       	cp.w	r11,0
8000a21c:	f9 ba 00 02 	moveq	r10,2
8000a220:	f9 ba 01 00 	movne	r10,0
8000a224:	c0 2c       	rcall	8000a228 <setvbuf>
8000a226:	d8 02       	popm	pc

8000a228 <setvbuf>:
8000a228:	d4 31       	pushm	r0-r7,lr
8000a22a:	4b f8       	lddpc	r8,8000a324 <setvbuf+0xfc>
8000a22c:	18 97       	mov	r7,r12
8000a22e:	16 96       	mov	r6,r11
8000a230:	14 95       	mov	r5,r10
8000a232:	12 94       	mov	r4,r9
8000a234:	70 0c       	ld.w	r12,r8[0x0]
8000a236:	58 0c       	cp.w	r12,0
8000a238:	c0 60       	breq	8000a244 <setvbuf+0x1c>
8000a23a:	78 68       	ld.w	r8,r12[0x18]
8000a23c:	58 08       	cp.w	r8,0
8000a23e:	c0 31       	brne	8000a244 <setvbuf+0x1c>
8000a240:	e0 a0 24 52 	rcall	8000eae4 <__sinit>
8000a244:	4b 98       	lddpc	r8,8000a328 <setvbuf+0x100>
8000a246:	10 37       	cp.w	r7,r8
8000a248:	c0 51       	brne	8000a252 <setvbuf+0x2a>
8000a24a:	4b 78       	lddpc	r8,8000a324 <setvbuf+0xfc>
8000a24c:	70 08       	ld.w	r8,r8[0x0]
8000a24e:	70 07       	ld.w	r7,r8[0x0]
8000a250:	c0 e8       	rjmp	8000a26c <setvbuf+0x44>
8000a252:	4b 78       	lddpc	r8,8000a32c <setvbuf+0x104>
8000a254:	10 37       	cp.w	r7,r8
8000a256:	c0 51       	brne	8000a260 <setvbuf+0x38>
8000a258:	4b 38       	lddpc	r8,8000a324 <setvbuf+0xfc>
8000a25a:	70 08       	ld.w	r8,r8[0x0]
8000a25c:	70 17       	ld.w	r7,r8[0x4]
8000a25e:	c0 78       	rjmp	8000a26c <setvbuf+0x44>
8000a260:	4b 48       	lddpc	r8,8000a330 <setvbuf+0x108>
8000a262:	10 37       	cp.w	r7,r8
8000a264:	c0 41       	brne	8000a26c <setvbuf+0x44>
8000a266:	4b 08       	lddpc	r8,8000a324 <setvbuf+0xfc>
8000a268:	70 08       	ld.w	r8,r8[0x0]
8000a26a:	70 27       	ld.w	r7,r8[0x8]
8000a26c:	58 25       	cp.w	r5,2
8000a26e:	5f b8       	srhi	r8
8000a270:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
8000a274:	c0 20       	breq	8000a278 <setvbuf+0x50>
8000a276:	dc 3a       	popm	r0-r7,pc,r12=-1
8000a278:	4a b3       	lddpc	r3,8000a324 <setvbuf+0xfc>
8000a27a:	0e 9b       	mov	r11,r7
8000a27c:	66 0c       	ld.w	r12,r3[0x0]
8000a27e:	e0 a0 23 43 	rcall	8000e904 <_fflush_r>
8000a282:	30 08       	mov	r8,0
8000a284:	8f 68       	st.w	r7[0x18],r8
8000a286:	8f 18       	st.w	r7[0x4],r8
8000a288:	8e 68       	ld.sh	r8,r7[0xc]
8000a28a:	ed b8 00 07 	bld	r8,0x7
8000a28e:	c0 51       	brne	8000a298 <setvbuf+0x70>
8000a290:	66 0c       	ld.w	r12,r3[0x0]
8000a292:	6e 4b       	ld.w	r11,r7[0x10]
8000a294:	e0 a0 25 24 	rcall	8000ecdc <_free_r>
8000a298:	8e 68       	ld.sh	r8,r7[0xc]
8000a29a:	e0 18 ff 7c 	andl	r8,0xff7c
8000a29e:	ae 68       	st.h	r7[0xc],r8
8000a2a0:	58 25       	cp.w	r5,2
8000a2a2:	c0 31       	brne	8000a2a8 <setvbuf+0x80>
8000a2a4:	30 0c       	mov	r12,0
8000a2a6:	c1 38       	rjmp	8000a2cc <setvbuf+0xa4>
8000a2a8:	58 06       	cp.w	r6,0
8000a2aa:	c2 11       	brne	8000a2ec <setvbuf+0xc4>
8000a2ac:	e0 63 04 00 	mov	r3,1024
8000a2b0:	58 04       	cp.w	r4,0
8000a2b2:	e6 04 17 00 	moveq	r4,r3
8000a2b6:	08 9c       	mov	r12,r4
8000a2b8:	e0 a0 27 ee 	rcall	8000f294 <malloc>
8000a2bc:	18 96       	mov	r6,r12
8000a2be:	c1 41       	brne	8000a2e6 <setvbuf+0xbe>
8000a2c0:	06 9c       	mov	r12,r3
8000a2c2:	e0 a0 27 e9 	rcall	8000f294 <malloc>
8000a2c6:	18 96       	mov	r6,r12
8000a2c8:	c0 e1       	brne	8000a2e4 <setvbuf+0xbc>
8000a2ca:	3f fc       	mov	r12,-1
8000a2cc:	8e 68       	ld.sh	r8,r7[0xc]
8000a2ce:	a1 b8       	sbr	r8,0x1
8000a2d0:	ae 68       	st.h	r7[0xc],r8
8000a2d2:	ee c8 ff b9 	sub	r8,r7,-71
8000a2d6:	8f 48       	st.w	r7[0x10],r8
8000a2d8:	8f 08       	st.w	r7[0x0],r8
8000a2da:	30 08       	mov	r8,0
8000a2dc:	8f 28       	st.w	r7[0x8],r8
8000a2de:	30 18       	mov	r8,1
8000a2e0:	8f 58       	st.w	r7[0x14],r8
8000a2e2:	d8 32       	popm	r0-r7,pc
8000a2e4:	06 94       	mov	r4,r3
8000a2e6:	8e 68       	ld.sh	r8,r7[0xc]
8000a2e8:	a7 b8       	sbr	r8,0x7
8000a2ea:	ae 68       	st.h	r7[0xc],r8
8000a2ec:	58 15       	cp.w	r5,1
8000a2ee:	c0 71       	brne	8000a2fc <setvbuf+0xd4>
8000a2f0:	8e 68       	ld.sh	r8,r7[0xc]
8000a2f2:	a1 a8       	sbr	r8,0x0
8000a2f4:	ae 68       	st.h	r7[0xc],r8
8000a2f6:	e8 08 11 00 	rsub	r8,r4,0
8000a2fa:	8f 68       	st.w	r7[0x18],r8
8000a2fc:	48 a8       	lddpc	r8,8000a324 <setvbuf+0xfc>
8000a2fe:	fe c9 b8 be 	sub	r9,pc,-18242
8000a302:	70 08       	ld.w	r8,r8[0x0]
8000a304:	8f 46       	st.w	r7[0x10],r6
8000a306:	91 a9       	st.w	r8[0x28],r9
8000a308:	8f 06       	st.w	r7[0x0],r6
8000a30a:	8f 54       	st.w	r7[0x14],r4
8000a30c:	8e 68       	ld.sh	r8,r7[0xc]
8000a30e:	10 9c       	mov	r12,r8
8000a310:	e2 1c 00 08 	andl	r12,0x8,COH
8000a314:	c0 70       	breq	8000a322 <setvbuf+0xfa>
8000a316:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000a31a:	30 0c       	mov	r12,0
8000a31c:	f9 b4 01 00 	movne	r4,0
8000a320:	8f 24       	st.w	r7[0x8],r4
8000a322:	d8 32       	popm	r0-r7,pc
8000a324:	00 00       	add	r0,r0
8000a326:	01 c0       	ld.ub	r0,r0[0x4]
8000a328:	80 01       	ld.sh	r1,r0[0x0]
8000a32a:	42 80       	lddsp	r0,sp[0xa0]
8000a32c:	80 01       	ld.sh	r1,r0[0x0]
8000a32e:	42 a0       	lddsp	r0,sp[0xa8]
8000a330:	80 01       	ld.sh	r1,r0[0x0]
8000a332:	42 c0       	lddsp	r0,sp[0xb0]

8000a334 <sprintf>:
8000a334:	d4 01       	pushm	lr
8000a336:	21 7d       	sub	sp,92
8000a338:	e0 68 ff ff 	mov	r8,65535
8000a33c:	ea 18 7f ff 	orh	r8,0x7fff
8000a340:	50 58       	stdsp	sp[0x14],r8
8000a342:	50 28       	stdsp	sp[0x8],r8
8000a344:	e0 68 02 08 	mov	r8,520
8000a348:	ba 68       	st.h	sp[0xc],r8
8000a34a:	3f f8       	mov	r8,-1
8000a34c:	ba 78       	st.h	sp[0xe],r8
8000a34e:	48 88       	lddpc	r8,8000a36c <sprintf+0x38>
8000a350:	50 4c       	stdsp	sp[0x10],r12
8000a352:	16 9a       	mov	r10,r11
8000a354:	50 0c       	stdsp	sp[0x0],r12
8000a356:	fa c9 ff a0 	sub	r9,sp,-96
8000a35a:	70 0c       	ld.w	r12,r8[0x0]
8000a35c:	1a 9b       	mov	r11,sp
8000a35e:	cb 1d       	rcall	8000a6c0 <_vfprintf_r>
8000a360:	30 09       	mov	r9,0
8000a362:	40 08       	lddsp	r8,sp[0x0]
8000a364:	b0 89       	st.b	r8[0x0],r9
8000a366:	2e 9d       	sub	sp,-92
8000a368:	d8 02       	popm	pc
8000a36a:	d7 03       	nop
8000a36c:	00 00       	add	r0,r0
8000a36e:	01 c0       	ld.ub	r0,r0[0x4]

8000a370 <strlen>:
8000a370:	30 09       	mov	r9,0
8000a372:	18 98       	mov	r8,r12
8000a374:	c0 28       	rjmp	8000a378 <strlen+0x8>
8000a376:	2f f8       	sub	r8,-1
8000a378:	11 8a       	ld.ub	r10,r8[0x0]
8000a37a:	f2 0a 18 00 	cp.b	r10,r9
8000a37e:	cf c1       	brne	8000a376 <strlen+0x6>
8000a380:	f0 0c 01 0c 	sub	r12,r8,r12
8000a384:	5e fc       	retal	r12
8000a386:	d7 03       	nop

8000a388 <get_arg>:
8000a388:	d4 31       	pushm	r0-r7,lr
8000a38a:	20 8d       	sub	sp,32
8000a38c:	fa c4 ff bc 	sub	r4,sp,-68
8000a390:	50 4b       	stdsp	sp[0x10],r11
8000a392:	68 2e       	ld.w	lr,r4[0x8]
8000a394:	50 58       	stdsp	sp[0x14],r8
8000a396:	12 96       	mov	r6,r9
8000a398:	7c 0b       	ld.w	r11,lr[0x0]
8000a39a:	70 05       	ld.w	r5,r8[0x0]
8000a39c:	50 6e       	stdsp	sp[0x18],lr
8000a39e:	58 0b       	cp.w	r11,0
8000a3a0:	f4 0b 17 00 	moveq	r11,r10
8000a3a4:	68 03       	ld.w	r3,r4[0x0]
8000a3a6:	68 11       	ld.w	r1,r4[0x4]
8000a3a8:	40 49       	lddsp	r9,sp[0x10]
8000a3aa:	30 08       	mov	r8,0
8000a3ac:	c2 c9       	rjmp	8000a604 <get_arg+0x27c>
8000a3ae:	2f fb       	sub	r11,-1
8000a3b0:	32 5c       	mov	r12,37
8000a3b2:	17 8a       	ld.ub	r10,r11[0x0]
8000a3b4:	f8 0a 18 00 	cp.b	r10,r12
8000a3b8:	5f 1e       	srne	lr
8000a3ba:	f0 0a 18 00 	cp.b	r10,r8
8000a3be:	5f 1c       	srne	r12
8000a3c0:	fd ec 00 0c 	and	r12,lr,r12
8000a3c4:	f0 0c 18 00 	cp.b	r12,r8
8000a3c8:	cf 31       	brne	8000a3ae <get_arg+0x26>
8000a3ca:	58 0a       	cp.w	r10,0
8000a3cc:	e0 80 01 29 	breq	8000a61e <get_arg+0x296>
8000a3d0:	30 0c       	mov	r12,0
8000a3d2:	3f fa       	mov	r10,-1
8000a3d4:	18 90       	mov	r0,r12
8000a3d6:	50 3a       	stdsp	sp[0xc],r10
8000a3d8:	18 94       	mov	r4,r12
8000a3da:	18 92       	mov	r2,r12
8000a3dc:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000a3e0:	16 97       	mov	r7,r11
8000a3e2:	50 7c       	stdsp	sp[0x1c],r12
8000a3e4:	4c dc       	lddpc	r12,8000a518 <get_arg+0x190>
8000a3e6:	0f 3a       	ld.ub	r10,r7++
8000a3e8:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000a3ec:	40 7c       	lddsp	r12,sp[0x1c]
8000a3ee:	1c 0c       	add	r12,lr
8000a3f0:	4c be       	lddpc	lr,8000a51c <get_arg+0x194>
8000a3f2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000a3f6:	20 1e       	sub	lr,1
8000a3f8:	50 0e       	stdsp	sp[0x0],lr
8000a3fa:	4c ae       	lddpc	lr,8000a520 <get_arg+0x198>
8000a3fc:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000a400:	50 7c       	stdsp	sp[0x1c],r12
8000a402:	40 0c       	lddsp	r12,sp[0x0]
8000a404:	58 7c       	cp.w	r12,7
8000a406:	e0 8b 00 f8 	brhi	8000a5f6 <get_arg+0x26e>
8000a40a:	4c 7e       	lddpc	lr,8000a524 <get_arg+0x19c>
8000a40c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000a410:	36 8b       	mov	r11,104
8000a412:	f6 0a 18 00 	cp.b	r10,r11
8000a416:	e0 80 00 f0 	breq	8000a5f6 <get_arg+0x26e>
8000a41a:	37 1b       	mov	r11,113
8000a41c:	f6 0a 18 00 	cp.b	r10,r11
8000a420:	c0 70       	breq	8000a42e <get_arg+0xa6>
8000a422:	34 cb       	mov	r11,76
8000a424:	f6 0a 18 00 	cp.b	r10,r11
8000a428:	c0 51       	brne	8000a432 <get_arg+0xaa>
8000a42a:	a3 b4       	sbr	r4,0x3
8000a42c:	ce 58       	rjmp	8000a5f6 <get_arg+0x26e>
8000a42e:	a5 b4       	sbr	r4,0x5
8000a430:	ce 38       	rjmp	8000a5f6 <get_arg+0x26e>
8000a432:	0f 8b       	ld.ub	r11,r7[0x0]
8000a434:	36 ca       	mov	r10,108
8000a436:	f4 0b 18 00 	cp.b	r11,r10
8000a43a:	c0 51       	brne	8000a444 <get_arg+0xbc>
8000a43c:	a5 b4       	sbr	r4,0x5
8000a43e:	ee cb ff ff 	sub	r11,r7,-1
8000a442:	cd b8       	rjmp	8000a5f8 <get_arg+0x270>
8000a444:	a5 a4       	sbr	r4,0x4
8000a446:	cd 88       	rjmp	8000a5f6 <get_arg+0x26e>
8000a448:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000a44c:	36 7c       	mov	r12,103
8000a44e:	f8 0a 18 00 	cp.b	r10,r12
8000a452:	e0 8b 00 27 	brhi	8000a4a0 <get_arg+0x118>
8000a456:	36 5b       	mov	r11,101
8000a458:	f6 0a 18 00 	cp.b	r10,r11
8000a45c:	c4 82       	brcc	8000a4ec <get_arg+0x164>
8000a45e:	34 fb       	mov	r11,79
8000a460:	f6 0a 18 00 	cp.b	r10,r11
8000a464:	c4 80       	breq	8000a4f4 <get_arg+0x16c>
8000a466:	e0 8b 00 0c 	brhi	8000a47e <get_arg+0xf6>
8000a46a:	34 5b       	mov	r11,69
8000a46c:	f6 0a 18 00 	cp.b	r10,r11
8000a470:	c3 e0       	breq	8000a4ec <get_arg+0x164>
8000a472:	34 7b       	mov	r11,71
8000a474:	f6 0a 18 00 	cp.b	r10,r11
8000a478:	c3 a0       	breq	8000a4ec <get_arg+0x164>
8000a47a:	34 4b       	mov	r11,68
8000a47c:	c0 88       	rjmp	8000a48c <get_arg+0x104>
8000a47e:	35 8b       	mov	r11,88
8000a480:	f6 0a 18 00 	cp.b	r10,r11
8000a484:	c2 c0       	breq	8000a4dc <get_arg+0x154>
8000a486:	e0 8b 00 07 	brhi	8000a494 <get_arg+0x10c>
8000a48a:	35 5b       	mov	r11,85
8000a48c:	f6 0a 18 00 	cp.b	r10,r11
8000a490:	c3 51       	brne	8000a4fa <get_arg+0x172>
8000a492:	c3 18       	rjmp	8000a4f4 <get_arg+0x16c>
8000a494:	36 3b       	mov	r11,99
8000a496:	f6 0a 18 00 	cp.b	r10,r11
8000a49a:	c2 f0       	breq	8000a4f8 <get_arg+0x170>
8000a49c:	36 4b       	mov	r11,100
8000a49e:	c0 e8       	rjmp	8000a4ba <get_arg+0x132>
8000a4a0:	37 0b       	mov	r11,112
8000a4a2:	f6 0a 18 00 	cp.b	r10,r11
8000a4a6:	c2 50       	breq	8000a4f0 <get_arg+0x168>
8000a4a8:	e0 8b 00 0d 	brhi	8000a4c2 <get_arg+0x13a>
8000a4ac:	36 eb       	mov	r11,110
8000a4ae:	f6 0a 18 00 	cp.b	r10,r11
8000a4b2:	c1 f0       	breq	8000a4f0 <get_arg+0x168>
8000a4b4:	e0 8b 00 14 	brhi	8000a4dc <get_arg+0x154>
8000a4b8:	36 9b       	mov	r11,105
8000a4ba:	f6 0a 18 00 	cp.b	r10,r11
8000a4be:	c1 e1       	brne	8000a4fa <get_arg+0x172>
8000a4c0:	c0 e8       	rjmp	8000a4dc <get_arg+0x154>
8000a4c2:	37 5b       	mov	r11,117
8000a4c4:	f6 0a 18 00 	cp.b	r10,r11
8000a4c8:	c0 a0       	breq	8000a4dc <get_arg+0x154>
8000a4ca:	37 8b       	mov	r11,120
8000a4cc:	f6 0a 18 00 	cp.b	r10,r11
8000a4d0:	c0 60       	breq	8000a4dc <get_arg+0x154>
8000a4d2:	37 3b       	mov	r11,115
8000a4d4:	f6 0a 18 00 	cp.b	r10,r11
8000a4d8:	c1 11       	brne	8000a4fa <get_arg+0x172>
8000a4da:	c0 b8       	rjmp	8000a4f0 <get_arg+0x168>
8000a4dc:	ed b4 00 04 	bld	r4,0x4
8000a4e0:	c0 a0       	breq	8000a4f4 <get_arg+0x16c>
8000a4e2:	ed b4 00 05 	bld	r4,0x5
8000a4e6:	c0 91       	brne	8000a4f8 <get_arg+0x170>
8000a4e8:	30 20       	mov	r0,2
8000a4ea:	c0 88       	rjmp	8000a4fa <get_arg+0x172>
8000a4ec:	30 40       	mov	r0,4
8000a4ee:	c0 68       	rjmp	8000a4fa <get_arg+0x172>
8000a4f0:	30 30       	mov	r0,3
8000a4f2:	c0 48       	rjmp	8000a4fa <get_arg+0x172>
8000a4f4:	30 10       	mov	r0,1
8000a4f6:	c0 28       	rjmp	8000a4fa <get_arg+0x172>
8000a4f8:	30 00       	mov	r0,0
8000a4fa:	40 3b       	lddsp	r11,sp[0xc]
8000a4fc:	5b fb       	cp.w	r11,-1
8000a4fe:	c0 40       	breq	8000a506 <get_arg+0x17e>
8000a500:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000a504:	c7 98       	rjmp	8000a5f6 <get_arg+0x26e>
8000a506:	58 60       	cp.w	r0,6
8000a508:	e0 8b 00 77 	brhi	8000a5f6 <get_arg+0x26e>
8000a50c:	6c 0a       	ld.w	r10,r6[0x0]
8000a50e:	ea cc ff ff 	sub	r12,r5,-1
8000a512:	48 6e       	lddpc	lr,8000a528 <get_arg+0x1a0>
8000a514:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000a518:	80 01       	ld.sh	r1,r0[0x0]
8000a51a:	41 44       	lddsp	r4,sp[0x50]
8000a51c:	80 01       	ld.sh	r1,r0[0x0]
8000a51e:	40 7c       	lddsp	r12,sp[0x1c]
8000a520:	80 01       	ld.sh	r1,r0[0x0]
8000a522:	40 10       	lddsp	r0,sp[0x4]
8000a524:	80 01       	ld.sh	r1,r0[0x0]
8000a526:	3e 70       	mov	r0,-25
8000a528:	80 01       	ld.sh	r1,r0[0x0]
8000a52a:	3e 90       	mov	r0,-23
8000a52c:	f4 cb ff f8 	sub	r11,r10,-8
8000a530:	8d 0b       	st.w	r6[0x0],r11
8000a532:	f4 ea 00 00 	ld.d	r10,r10[0]
8000a536:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000a53a:	c0 f8       	rjmp	8000a558 <get_arg+0x1d0>
8000a53c:	f4 cb ff fc 	sub	r11,r10,-4
8000a540:	8d 0b       	st.w	r6[0x0],r11
8000a542:	74 0a       	ld.w	r10,r10[0x0]
8000a544:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000a548:	c0 88       	rjmp	8000a558 <get_arg+0x1d0>
8000a54a:	f4 cb ff f8 	sub	r11,r10,-8
8000a54e:	8d 0b       	st.w	r6[0x0],r11
8000a550:	f4 ea 00 00 	ld.d	r10,r10[0]
8000a554:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000a558:	0e 9b       	mov	r11,r7
8000a55a:	18 95       	mov	r5,r12
8000a55c:	c4 e8       	rjmp	8000a5f8 <get_arg+0x270>
8000a55e:	62 0a       	ld.w	r10,r1[0x0]
8000a560:	5b fa       	cp.w	r10,-1
8000a562:	c0 b1       	brne	8000a578 <get_arg+0x1f0>
8000a564:	50 19       	stdsp	sp[0x4],r9
8000a566:	50 28       	stdsp	sp[0x8],r8
8000a568:	e0 6a 00 80 	mov	r10,128
8000a56c:	30 0b       	mov	r11,0
8000a56e:	02 9c       	mov	r12,r1
8000a570:	fe b0 fd 95 	rcall	8000a09a <memset>
8000a574:	40 28       	lddsp	r8,sp[0x8]
8000a576:	40 19       	lddsp	r9,sp[0x4]
8000a578:	e4 cc 00 01 	sub	r12,r2,1
8000a57c:	0e 9b       	mov	r11,r7
8000a57e:	50 3c       	stdsp	sp[0xc],r12
8000a580:	f2 0c 0c 49 	max	r9,r9,r12
8000a584:	c3 a8       	rjmp	8000a5f8 <get_arg+0x270>
8000a586:	62 0a       	ld.w	r10,r1[0x0]
8000a588:	5b fa       	cp.w	r10,-1
8000a58a:	c0 b1       	brne	8000a5a0 <get_arg+0x218>
8000a58c:	50 19       	stdsp	sp[0x4],r9
8000a58e:	50 28       	stdsp	sp[0x8],r8
8000a590:	e0 6a 00 80 	mov	r10,128
8000a594:	30 0b       	mov	r11,0
8000a596:	02 9c       	mov	r12,r1
8000a598:	fe b0 fd 81 	rcall	8000a09a <memset>
8000a59c:	40 28       	lddsp	r8,sp[0x8]
8000a59e:	40 19       	lddsp	r9,sp[0x4]
8000a5a0:	20 12       	sub	r2,1
8000a5a2:	30 0a       	mov	r10,0
8000a5a4:	0e 9b       	mov	r11,r7
8000a5a6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000a5aa:	f2 02 0c 49 	max	r9,r9,r2
8000a5ae:	c2 58       	rjmp	8000a5f8 <get_arg+0x270>
8000a5b0:	16 97       	mov	r7,r11
8000a5b2:	6c 0a       	ld.w	r10,r6[0x0]
8000a5b4:	f4 cb ff fc 	sub	r11,r10,-4
8000a5b8:	8d 0b       	st.w	r6[0x0],r11
8000a5ba:	74 0a       	ld.w	r10,r10[0x0]
8000a5bc:	0e 9b       	mov	r11,r7
8000a5be:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000a5c2:	2f f5       	sub	r5,-1
8000a5c4:	c1 a8       	rjmp	8000a5f8 <get_arg+0x270>
8000a5c6:	f4 c2 00 30 	sub	r2,r10,48
8000a5ca:	c0 68       	rjmp	8000a5d6 <get_arg+0x24e>
8000a5cc:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000a5d0:	2f f7       	sub	r7,-1
8000a5d2:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000a5d6:	0f 8a       	ld.ub	r10,r7[0x0]
8000a5d8:	58 0a       	cp.w	r10,0
8000a5da:	c0 e0       	breq	8000a5f6 <get_arg+0x26e>
8000a5dc:	23 0a       	sub	r10,48
8000a5de:	58 9a       	cp.w	r10,9
8000a5e0:	fe 98 ff f6 	brls	8000a5cc <get_arg+0x244>
8000a5e4:	c0 98       	rjmp	8000a5f6 <get_arg+0x26e>
8000a5e6:	2f f7       	sub	r7,-1
8000a5e8:	0f 8a       	ld.ub	r10,r7[0x0]
8000a5ea:	58 0a       	cp.w	r10,0
8000a5ec:	c0 50       	breq	8000a5f6 <get_arg+0x26e>
8000a5ee:	23 0a       	sub	r10,48
8000a5f0:	58 9a       	cp.w	r10,9
8000a5f2:	fe 98 ff fa 	brls	8000a5e6 <get_arg+0x25e>
8000a5f6:	0e 9b       	mov	r11,r7
8000a5f8:	40 7c       	lddsp	r12,sp[0x1c]
8000a5fa:	30 ba       	mov	r10,11
8000a5fc:	f4 0c 18 00 	cp.b	r12,r10
8000a600:	fe 91 fe ee 	brne	8000a3dc <get_arg+0x54>
8000a604:	40 42       	lddsp	r2,sp[0x10]
8000a606:	17 8c       	ld.ub	r12,r11[0x0]
8000a608:	0a 32       	cp.w	r2,r5
8000a60a:	5f 4a       	srge	r10
8000a60c:	f0 0c 18 00 	cp.b	r12,r8
8000a610:	5f 1c       	srne	r12
8000a612:	f9 ea 00 0a 	and	r10,r12,r10
8000a616:	f0 0a 18 00 	cp.b	r10,r8
8000a61a:	fe 91 fe cb 	brne	8000a3b0 <get_arg+0x28>
8000a61e:	30 08       	mov	r8,0
8000a620:	40 4e       	lddsp	lr,sp[0x10]
8000a622:	17 8a       	ld.ub	r10,r11[0x0]
8000a624:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000a628:	f0 0a 18 00 	cp.b	r10,r8
8000a62c:	fc 09 17 10 	movne	r9,lr
8000a630:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000a634:	06 9e       	mov	lr,r3
8000a636:	c2 a8       	rjmp	8000a68a <get_arg+0x302>
8000a638:	62 0a       	ld.w	r10,r1[0x0]
8000a63a:	58 3a       	cp.w	r10,3
8000a63c:	c1 e0       	breq	8000a678 <get_arg+0x2f0>
8000a63e:	e0 89 00 07 	brgt	8000a64c <get_arg+0x2c4>
8000a642:	58 1a       	cp.w	r10,1
8000a644:	c1 a0       	breq	8000a678 <get_arg+0x2f0>
8000a646:	58 2a       	cp.w	r10,2
8000a648:	c1 81       	brne	8000a678 <get_arg+0x2f0>
8000a64a:	c0 58       	rjmp	8000a654 <get_arg+0x2cc>
8000a64c:	58 5a       	cp.w	r10,5
8000a64e:	c0 c0       	breq	8000a666 <get_arg+0x2de>
8000a650:	c0 b5       	brlt	8000a666 <get_arg+0x2de>
8000a652:	c1 38       	rjmp	8000a678 <get_arg+0x2f0>
8000a654:	6c 0a       	ld.w	r10,r6[0x0]
8000a656:	f4 cc ff f8 	sub	r12,r10,-8
8000a65a:	8d 0c       	st.w	r6[0x0],r12
8000a65c:	f4 e2 00 00 	ld.d	r2,r10[0]
8000a660:	f0 e3 00 00 	st.d	r8[0],r2
8000a664:	c1 08       	rjmp	8000a684 <get_arg+0x2fc>
8000a666:	6c 0a       	ld.w	r10,r6[0x0]
8000a668:	f4 cc ff f8 	sub	r12,r10,-8
8000a66c:	8d 0c       	st.w	r6[0x0],r12
8000a66e:	f4 e2 00 00 	ld.d	r2,r10[0]
8000a672:	f0 e3 00 00 	st.d	r8[0],r2
8000a676:	c0 78       	rjmp	8000a684 <get_arg+0x2fc>
8000a678:	6c 0a       	ld.w	r10,r6[0x0]
8000a67a:	f4 cc ff fc 	sub	r12,r10,-4
8000a67e:	8d 0c       	st.w	r6[0x0],r12
8000a680:	74 0a       	ld.w	r10,r10[0x0]
8000a682:	91 0a       	st.w	r8[0x0],r10
8000a684:	2f f5       	sub	r5,-1
8000a686:	2f 88       	sub	r8,-8
8000a688:	2f c1       	sub	r1,-4
8000a68a:	12 35       	cp.w	r5,r9
8000a68c:	fe 9a ff d6 	brle	8000a638 <get_arg+0x2b0>
8000a690:	1c 93       	mov	r3,lr
8000a692:	40 52       	lddsp	r2,sp[0x14]
8000a694:	40 6e       	lddsp	lr,sp[0x18]
8000a696:	85 05       	st.w	r2[0x0],r5
8000a698:	9d 0b       	st.w	lr[0x0],r11
8000a69a:	40 4b       	lddsp	r11,sp[0x10]
8000a69c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000a6a0:	2f 8d       	sub	sp,-32
8000a6a2:	d8 32       	popm	r0-r7,pc

8000a6a4 <__sprint_r>:
8000a6a4:	d4 21       	pushm	r4-r7,lr
8000a6a6:	14 97       	mov	r7,r10
8000a6a8:	74 28       	ld.w	r8,r10[0x8]
8000a6aa:	58 08       	cp.w	r8,0
8000a6ac:	c0 41       	brne	8000a6b4 <__sprint_r+0x10>
8000a6ae:	95 18       	st.w	r10[0x4],r8
8000a6b0:	10 9c       	mov	r12,r8
8000a6b2:	d8 22       	popm	r4-r7,pc
8000a6b4:	e0 a0 23 dc 	rcall	8000ee6c <__sfvwrite_r>
8000a6b8:	30 08       	mov	r8,0
8000a6ba:	8f 18       	st.w	r7[0x4],r8
8000a6bc:	8f 28       	st.w	r7[0x8],r8
8000a6be:	d8 22       	popm	r4-r7,pc

8000a6c0 <_vfprintf_r>:
8000a6c0:	d4 31       	pushm	r0-r7,lr
8000a6c2:	fa cd 06 bc 	sub	sp,sp,1724
8000a6c6:	51 09       	stdsp	sp[0x40],r9
8000a6c8:	16 91       	mov	r1,r11
8000a6ca:	14 97       	mov	r7,r10
8000a6cc:	18 95       	mov	r5,r12
8000a6ce:	e0 a0 25 7d 	rcall	8000f1c8 <_localeconv_r>
8000a6d2:	78 0c       	ld.w	r12,r12[0x0]
8000a6d4:	50 cc       	stdsp	sp[0x30],r12
8000a6d6:	58 05       	cp.w	r5,0
8000a6d8:	c0 70       	breq	8000a6e6 <_vfprintf_r+0x26>
8000a6da:	6a 68       	ld.w	r8,r5[0x18]
8000a6dc:	58 08       	cp.w	r8,0
8000a6de:	c0 41       	brne	8000a6e6 <_vfprintf_r+0x26>
8000a6e0:	0a 9c       	mov	r12,r5
8000a6e2:	e0 a0 22 01 	rcall	8000eae4 <__sinit>
8000a6e6:	4c f8       	lddpc	r8,8000a820 <_vfprintf_r+0x160>
8000a6e8:	10 31       	cp.w	r1,r8
8000a6ea:	c0 31       	brne	8000a6f0 <_vfprintf_r+0x30>
8000a6ec:	6a 01       	ld.w	r1,r5[0x0]
8000a6ee:	c0 a8       	rjmp	8000a702 <_vfprintf_r+0x42>
8000a6f0:	4c d8       	lddpc	r8,8000a824 <_vfprintf_r+0x164>
8000a6f2:	10 31       	cp.w	r1,r8
8000a6f4:	c0 31       	brne	8000a6fa <_vfprintf_r+0x3a>
8000a6f6:	6a 11       	ld.w	r1,r5[0x4]
8000a6f8:	c0 58       	rjmp	8000a702 <_vfprintf_r+0x42>
8000a6fa:	4c c8       	lddpc	r8,8000a828 <_vfprintf_r+0x168>
8000a6fc:	10 31       	cp.w	r1,r8
8000a6fe:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000a702:	82 68       	ld.sh	r8,r1[0xc]
8000a704:	ed b8 00 03 	bld	r8,0x3
8000a708:	c0 41       	brne	8000a710 <_vfprintf_r+0x50>
8000a70a:	62 48       	ld.w	r8,r1[0x10]
8000a70c:	58 08       	cp.w	r8,0
8000a70e:	c0 71       	brne	8000a71c <_vfprintf_r+0x5c>
8000a710:	02 9b       	mov	r11,r1
8000a712:	0a 9c       	mov	r12,r5
8000a714:	e0 a0 1a 0a 	rcall	8000db28 <__swsetup_r>
8000a718:	e0 81 0f 5c 	brne	8000c5d0 <_vfprintf_r+0x1f10>
8000a71c:	82 68       	ld.sh	r8,r1[0xc]
8000a71e:	10 99       	mov	r9,r8
8000a720:	e2 19 00 1a 	andl	r9,0x1a,COH
8000a724:	58 a9       	cp.w	r9,10
8000a726:	c3 c1       	brne	8000a79e <_vfprintf_r+0xde>
8000a728:	82 79       	ld.sh	r9,r1[0xe]
8000a72a:	30 0a       	mov	r10,0
8000a72c:	f4 09 19 00 	cp.h	r9,r10
8000a730:	c3 75       	brlt	8000a79e <_vfprintf_r+0xde>
8000a732:	a1 d8       	cbr	r8,0x1
8000a734:	fb 58 05 d0 	st.h	sp[1488],r8
8000a738:	62 88       	ld.w	r8,r1[0x20]
8000a73a:	fb 48 05 e4 	st.w	sp[1508],r8
8000a73e:	62 a8       	ld.w	r8,r1[0x28]
8000a740:	fb 48 05 ec 	st.w	sp[1516],r8
8000a744:	fa c8 ff bc 	sub	r8,sp,-68
8000a748:	fb 48 05 d4 	st.w	sp[1492],r8
8000a74c:	fb 48 05 c4 	st.w	sp[1476],r8
8000a750:	e0 68 04 00 	mov	r8,1024
8000a754:	fb 48 05 d8 	st.w	sp[1496],r8
8000a758:	fb 48 05 cc 	st.w	sp[1484],r8
8000a75c:	30 08       	mov	r8,0
8000a75e:	fb 59 05 d2 	st.h	sp[1490],r9
8000a762:	0e 9a       	mov	r10,r7
8000a764:	41 09       	lddsp	r9,sp[0x40]
8000a766:	fa c7 fa 3c 	sub	r7,sp,-1476
8000a76a:	fb 48 05 dc 	st.w	sp[1500],r8
8000a76e:	0a 9c       	mov	r12,r5
8000a770:	0e 9b       	mov	r11,r7
8000a772:	ca 7f       	rcall	8000a6c0 <_vfprintf_r>
8000a774:	50 bc       	stdsp	sp[0x2c],r12
8000a776:	c0 95       	brlt	8000a788 <_vfprintf_r+0xc8>
8000a778:	0e 9b       	mov	r11,r7
8000a77a:	0a 9c       	mov	r12,r5
8000a77c:	e0 a0 20 c4 	rcall	8000e904 <_fflush_r>
8000a780:	40 be       	lddsp	lr,sp[0x2c]
8000a782:	f9 be 01 ff 	movne	lr,-1
8000a786:	50 be       	stdsp	sp[0x2c],lr
8000a788:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000a78c:	ed b8 00 06 	bld	r8,0x6
8000a790:	e0 81 0f 22 	brne	8000c5d4 <_vfprintf_r+0x1f14>
8000a794:	82 68       	ld.sh	r8,r1[0xc]
8000a796:	a7 a8       	sbr	r8,0x6
8000a798:	a2 68       	st.h	r1[0xc],r8
8000a79a:	e0 8f 0f 1d 	bral	8000c5d4 <_vfprintf_r+0x1f14>
8000a79e:	30 08       	mov	r8,0
8000a7a0:	fb 48 06 b4 	st.w	sp[1716],r8
8000a7a4:	fb 48 06 90 	st.w	sp[1680],r8
8000a7a8:	fb 48 06 8c 	st.w	sp[1676],r8
8000a7ac:	fb 48 06 b0 	st.w	sp[1712],r8
8000a7b0:	30 08       	mov	r8,0
8000a7b2:	30 09       	mov	r9,0
8000a7b4:	50 a7       	stdsp	sp[0x28],r7
8000a7b6:	50 78       	stdsp	sp[0x1c],r8
8000a7b8:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a7bc:	3f f8       	mov	r8,-1
8000a7be:	50 59       	stdsp	sp[0x14],r9
8000a7c0:	fb 44 06 88 	st.w	sp[1672],r4
8000a7c4:	fb 48 05 44 	st.w	sp[1348],r8
8000a7c8:	12 9c       	mov	r12,r9
8000a7ca:	50 69       	stdsp	sp[0x18],r9
8000a7cc:	50 d9       	stdsp	sp[0x34],r9
8000a7ce:	50 e9       	stdsp	sp[0x38],r9
8000a7d0:	50 b9       	stdsp	sp[0x2c],r9
8000a7d2:	12 97       	mov	r7,r9
8000a7d4:	40 a2       	lddsp	r2,sp[0x28]
8000a7d6:	32 5a       	mov	r10,37
8000a7d8:	30 08       	mov	r8,0
8000a7da:	c0 28       	rjmp	8000a7de <_vfprintf_r+0x11e>
8000a7dc:	2f f2       	sub	r2,-1
8000a7de:	05 89       	ld.ub	r9,r2[0x0]
8000a7e0:	f0 09 18 00 	cp.b	r9,r8
8000a7e4:	5f 1b       	srne	r11
8000a7e6:	f4 09 18 00 	cp.b	r9,r10
8000a7ea:	5f 19       	srne	r9
8000a7ec:	f3 eb 00 0b 	and	r11,r9,r11
8000a7f0:	f0 0b 18 00 	cp.b	r11,r8
8000a7f4:	cf 41       	brne	8000a7dc <_vfprintf_r+0x11c>
8000a7f6:	40 ab       	lddsp	r11,sp[0x28]
8000a7f8:	e4 0b 01 06 	sub	r6,r2,r11
8000a7fc:	c2 40       	breq	8000a844 <_vfprintf_r+0x184>
8000a7fe:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a802:	0c 08       	add	r8,r6
8000a804:	89 0b       	st.w	r4[0x0],r11
8000a806:	fb 48 06 90 	st.w	sp[1680],r8
8000a80a:	89 16       	st.w	r4[0x4],r6
8000a80c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a810:	2f f8       	sub	r8,-1
8000a812:	fb 48 06 8c 	st.w	sp[1676],r8
8000a816:	58 78       	cp.w	r8,7
8000a818:	e0 89 00 0a 	brgt	8000a82c <_vfprintf_r+0x16c>
8000a81c:	2f 84       	sub	r4,-8
8000a81e:	c1 08       	rjmp	8000a83e <_vfprintf_r+0x17e>
8000a820:	80 01       	ld.sh	r1,r0[0x0]
8000a822:	42 80       	lddsp	r0,sp[0xa0]
8000a824:	80 01       	ld.sh	r1,r0[0x0]
8000a826:	42 a0       	lddsp	r0,sp[0xa8]
8000a828:	80 01       	ld.sh	r1,r0[0x0]
8000a82a:	42 c0       	lddsp	r0,sp[0xb0]
8000a82c:	fa ca f9 78 	sub	r10,sp,-1672
8000a830:	02 9b       	mov	r11,r1
8000a832:	0a 9c       	mov	r12,r5
8000a834:	c3 8f       	rcall	8000a6a4 <__sprint_r>
8000a836:	e0 81 0e c9 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000a83a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000a83e:	40 ba       	lddsp	r10,sp[0x2c]
8000a840:	0c 0a       	add	r10,r6
8000a842:	50 ba       	stdsp	sp[0x2c],r10
8000a844:	05 89       	ld.ub	r9,r2[0x0]
8000a846:	30 08       	mov	r8,0
8000a848:	f0 09 18 00 	cp.b	r9,r8
8000a84c:	e0 80 0e ae 	breq	8000c5a8 <_vfprintf_r+0x1ee8>
8000a850:	30 09       	mov	r9,0
8000a852:	fb 68 06 bb 	st.b	sp[1723],r8
8000a856:	0e 96       	mov	r6,r7
8000a858:	e4 c8 ff ff 	sub	r8,r2,-1
8000a85c:	3f fe       	mov	lr,-1
8000a85e:	50 94       	stdsp	sp[0x24],r4
8000a860:	50 41       	stdsp	sp[0x10],r1
8000a862:	0e 94       	mov	r4,r7
8000a864:	04 91       	mov	r1,r2
8000a866:	50 89       	stdsp	sp[0x20],r9
8000a868:	50 a8       	stdsp	sp[0x28],r8
8000a86a:	50 2e       	stdsp	sp[0x8],lr
8000a86c:	50 39       	stdsp	sp[0xc],r9
8000a86e:	12 93       	mov	r3,r9
8000a870:	12 90       	mov	r0,r9
8000a872:	10 97       	mov	r7,r8
8000a874:	0a 92       	mov	r2,r5
8000a876:	c0 78       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000a878:	3f fc       	mov	r12,-1
8000a87a:	0a 97       	mov	r7,r5
8000a87c:	50 2c       	stdsp	sp[0x8],r12
8000a87e:	c0 38       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000a880:	30 0b       	mov	r11,0
8000a882:	50 3b       	stdsp	sp[0xc],r11
8000a884:	0f 38       	ld.ub	r8,r7++
8000a886:	c0 28       	rjmp	8000a88a <_vfprintf_r+0x1ca>
8000a888:	12 90       	mov	r0,r9
8000a88a:	f0 c9 00 20 	sub	r9,r8,32
8000a88e:	e0 49 00 58 	cp.w	r9,88
8000a892:	e0 8b 0a 33 	brhi	8000bcf8 <_vfprintf_r+0x1638>
8000a896:	4d 9a       	lddpc	r10,8000a9f8 <_vfprintf_r+0x338>
8000a898:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000a89c:	50 a7       	stdsp	sp[0x28],r7
8000a89e:	50 80       	stdsp	sp[0x20],r0
8000a8a0:	0c 97       	mov	r7,r6
8000a8a2:	04 95       	mov	r5,r2
8000a8a4:	08 96       	mov	r6,r4
8000a8a6:	02 92       	mov	r2,r1
8000a8a8:	4d 59       	lddpc	r9,8000a9fc <_vfprintf_r+0x33c>
8000a8aa:	40 94       	lddsp	r4,sp[0x24]
8000a8ac:	10 90       	mov	r0,r8
8000a8ae:	40 41       	lddsp	r1,sp[0x10]
8000a8b0:	50 d9       	stdsp	sp[0x34],r9
8000a8b2:	e0 8f 08 95 	bral	8000b9dc <_vfprintf_r+0x131c>
8000a8b6:	30 08       	mov	r8,0
8000a8b8:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000a8bc:	f0 09 18 00 	cp.b	r9,r8
8000a8c0:	ce 21       	brne	8000a884 <_vfprintf_r+0x1c4>
8000a8c2:	32 08       	mov	r8,32
8000a8c4:	c6 e8       	rjmp	8000a9a0 <_vfprintf_r+0x2e0>
8000a8c6:	a1 a3       	sbr	r3,0x0
8000a8c8:	cd eb       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000a8ca:	0f 89       	ld.ub	r9,r7[0x0]
8000a8cc:	f2 c8 00 30 	sub	r8,r9,48
8000a8d0:	58 98       	cp.w	r8,9
8000a8d2:	e0 8b 00 1d 	brhi	8000a90c <_vfprintf_r+0x24c>
8000a8d6:	ee c8 ff ff 	sub	r8,r7,-1
8000a8da:	30 0b       	mov	r11,0
8000a8dc:	23 09       	sub	r9,48
8000a8de:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000a8e2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000a8e6:	11 39       	ld.ub	r9,r8++
8000a8e8:	f2 ca 00 30 	sub	r10,r9,48
8000a8ec:	58 9a       	cp.w	r10,9
8000a8ee:	fe 98 ff f7 	brls	8000a8dc <_vfprintf_r+0x21c>
8000a8f2:	e0 49 00 24 	cp.w	r9,36
8000a8f6:	cc 51       	brne	8000a880 <_vfprintf_r+0x1c0>
8000a8f8:	e0 4b 00 20 	cp.w	r11,32
8000a8fc:	e0 89 0e 65 	brgt	8000c5c6 <_vfprintf_r+0x1f06>
8000a900:	20 1b       	sub	r11,1
8000a902:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000a906:	12 3b       	cp.w	r11,r9
8000a908:	c0 95       	brlt	8000a91a <_vfprintf_r+0x25a>
8000a90a:	c1 08       	rjmp	8000a92a <_vfprintf_r+0x26a>
8000a90c:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000a910:	ec ca ff ff 	sub	r10,r6,-1
8000a914:	12 36       	cp.w	r6,r9
8000a916:	c1 f5       	brlt	8000a954 <_vfprintf_r+0x294>
8000a918:	c2 68       	rjmp	8000a964 <_vfprintf_r+0x2a4>
8000a91a:	fa ce f9 44 	sub	lr,sp,-1724
8000a91e:	10 97       	mov	r7,r8
8000a920:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000a924:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000a928:	c3 58       	rjmp	8000a992 <_vfprintf_r+0x2d2>
8000a92a:	10 97       	mov	r7,r8
8000a92c:	fa c8 f9 50 	sub	r8,sp,-1712
8000a930:	1a d8       	st.w	--sp,r8
8000a932:	fa c8 fa b8 	sub	r8,sp,-1352
8000a936:	1a d8       	st.w	--sp,r8
8000a938:	fa c8 fb b4 	sub	r8,sp,-1100
8000a93c:	02 9a       	mov	r10,r1
8000a93e:	1a d8       	st.w	--sp,r8
8000a940:	04 9c       	mov	r12,r2
8000a942:	fa c8 f9 40 	sub	r8,sp,-1728
8000a946:	fa c9 ff b4 	sub	r9,sp,-76
8000a94a:	fe b0 fd 1f 	rcall	8000a388 <get_arg>
8000a94e:	2f dd       	sub	sp,-12
8000a950:	78 00       	ld.w	r0,r12[0x0]
8000a952:	c2 08       	rjmp	8000a992 <_vfprintf_r+0x2d2>
8000a954:	fa cc f9 44 	sub	r12,sp,-1724
8000a958:	14 96       	mov	r6,r10
8000a95a:	f8 04 00 38 	add	r8,r12,r4<<0x3
8000a95e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000a962:	c1 88       	rjmp	8000a992 <_vfprintf_r+0x2d2>
8000a964:	41 08       	lddsp	r8,sp[0x40]
8000a966:	59 f9       	cp.w	r9,31
8000a968:	e0 89 00 11 	brgt	8000a98a <_vfprintf_r+0x2ca>
8000a96c:	f0 cb ff fc 	sub	r11,r8,-4
8000a970:	51 0b       	stdsp	sp[0x40],r11
8000a972:	70 00       	ld.w	r0,r8[0x0]
8000a974:	fa cb f9 44 	sub	r11,sp,-1724
8000a978:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000a97c:	f1 40 fd 88 	st.w	r8[-632],r0
8000a980:	2f f9       	sub	r9,-1
8000a982:	14 96       	mov	r6,r10
8000a984:	fb 49 06 b4 	st.w	sp[1716],r9
8000a988:	c0 58       	rjmp	8000a992 <_vfprintf_r+0x2d2>
8000a98a:	70 00       	ld.w	r0,r8[0x0]
8000a98c:	14 96       	mov	r6,r10
8000a98e:	2f c8       	sub	r8,-4
8000a990:	51 08       	stdsp	sp[0x40],r8
8000a992:	58 00       	cp.w	r0,0
8000a994:	fe 94 ff 78 	brge	8000a884 <_vfprintf_r+0x1c4>
8000a998:	5c 30       	neg	r0
8000a99a:	a3 a3       	sbr	r3,0x2
8000a99c:	c7 4b       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000a99e:	32 b8       	mov	r8,43
8000a9a0:	fb 68 06 bb 	st.b	sp[1723],r8
8000a9a4:	c7 0b       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000a9a6:	0f 38       	ld.ub	r8,r7++
8000a9a8:	e0 48 00 2a 	cp.w	r8,42
8000a9ac:	c0 30       	breq	8000a9b2 <_vfprintf_r+0x2f2>
8000a9ae:	30 09       	mov	r9,0
8000a9b0:	c7 d8       	rjmp	8000aaaa <_vfprintf_r+0x3ea>
8000a9b2:	0f 88       	ld.ub	r8,r7[0x0]
8000a9b4:	f0 c9 00 30 	sub	r9,r8,48
8000a9b8:	58 99       	cp.w	r9,9
8000a9ba:	e0 8b 00 23 	brhi	8000aa00 <_vfprintf_r+0x340>
8000a9be:	ee c5 ff ff 	sub	r5,r7,-1
8000a9c2:	30 0b       	mov	r11,0
8000a9c4:	23 08       	sub	r8,48
8000a9c6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000a9ca:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000a9ce:	0b 38       	ld.ub	r8,r5++
8000a9d0:	f0 c9 00 30 	sub	r9,r8,48
8000a9d4:	58 99       	cp.w	r9,9
8000a9d6:	fe 98 ff f7 	brls	8000a9c4 <_vfprintf_r+0x304>
8000a9da:	e0 48 00 24 	cp.w	r8,36
8000a9de:	fe 91 ff 51 	brne	8000a880 <_vfprintf_r+0x1c0>
8000a9e2:	e0 4b 00 20 	cp.w	r11,32
8000a9e6:	e0 89 0d f0 	brgt	8000c5c6 <_vfprintf_r+0x1f06>
8000a9ea:	20 1b       	sub	r11,1
8000a9ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a9f0:	10 3b       	cp.w	r11,r8
8000a9f2:	c0 e5       	brlt	8000aa0e <_vfprintf_r+0x34e>
8000a9f4:	c1 58       	rjmp	8000aa1e <_vfprintf_r+0x35e>
8000a9f6:	d7 03       	nop
8000a9f8:	80 01       	ld.sh	r1,r0[0x0]
8000a9fa:	3e ac       	mov	r12,-22
8000a9fc:	80 01       	ld.sh	r1,r0[0x0]
8000a9fe:	40 e8       	lddsp	r8,sp[0x38]
8000aa00:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000aa04:	ec c9 ff ff 	sub	r9,r6,-1
8000aa08:	14 36       	cp.w	r6,r10
8000aa0a:	c1 f5       	brlt	8000aa48 <_vfprintf_r+0x388>
8000aa0c:	c2 88       	rjmp	8000aa5c <_vfprintf_r+0x39c>
8000aa0e:	fa ca f9 44 	sub	r10,sp,-1724
8000aa12:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000aa16:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000aa1a:	50 2b       	stdsp	sp[0x8],r11
8000aa1c:	c3 c8       	rjmp	8000aa94 <_vfprintf_r+0x3d4>
8000aa1e:	fa c8 f9 50 	sub	r8,sp,-1712
8000aa22:	1a d8       	st.w	--sp,r8
8000aa24:	fa c8 fa b8 	sub	r8,sp,-1352
8000aa28:	1a d8       	st.w	--sp,r8
8000aa2a:	fa c8 fb b4 	sub	r8,sp,-1100
8000aa2e:	02 9a       	mov	r10,r1
8000aa30:	1a d8       	st.w	--sp,r8
8000aa32:	04 9c       	mov	r12,r2
8000aa34:	fa c8 f9 40 	sub	r8,sp,-1728
8000aa38:	fa c9 ff b4 	sub	r9,sp,-76
8000aa3c:	fe b0 fc a6 	rcall	8000a388 <get_arg>
8000aa40:	2f dd       	sub	sp,-12
8000aa42:	78 0c       	ld.w	r12,r12[0x0]
8000aa44:	50 2c       	stdsp	sp[0x8],r12
8000aa46:	c2 78       	rjmp	8000aa94 <_vfprintf_r+0x3d4>
8000aa48:	12 96       	mov	r6,r9
8000aa4a:	0e 95       	mov	r5,r7
8000aa4c:	fa c9 f9 44 	sub	r9,sp,-1724
8000aa50:	f2 04 00 38 	add	r8,r9,r4<<0x3
8000aa54:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000aa58:	50 28       	stdsp	sp[0x8],r8
8000aa5a:	c1 d8       	rjmp	8000aa94 <_vfprintf_r+0x3d4>
8000aa5c:	41 08       	lddsp	r8,sp[0x40]
8000aa5e:	59 fa       	cp.w	r10,31
8000aa60:	e0 89 00 14 	brgt	8000aa88 <_vfprintf_r+0x3c8>
8000aa64:	f0 cb ff fc 	sub	r11,r8,-4
8000aa68:	70 08       	ld.w	r8,r8[0x0]
8000aa6a:	51 0b       	stdsp	sp[0x40],r11
8000aa6c:	50 28       	stdsp	sp[0x8],r8
8000aa6e:	fa c6 f9 44 	sub	r6,sp,-1724
8000aa72:	40 2e       	lddsp	lr,sp[0x8]
8000aa74:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000aa78:	f1 4e fd 88 	st.w	r8[-632],lr
8000aa7c:	2f fa       	sub	r10,-1
8000aa7e:	0e 95       	mov	r5,r7
8000aa80:	fb 4a 06 b4 	st.w	sp[1716],r10
8000aa84:	12 96       	mov	r6,r9
8000aa86:	c0 78       	rjmp	8000aa94 <_vfprintf_r+0x3d4>
8000aa88:	70 0c       	ld.w	r12,r8[0x0]
8000aa8a:	0e 95       	mov	r5,r7
8000aa8c:	2f c8       	sub	r8,-4
8000aa8e:	50 2c       	stdsp	sp[0x8],r12
8000aa90:	12 96       	mov	r6,r9
8000aa92:	51 08       	stdsp	sp[0x40],r8
8000aa94:	40 2b       	lddsp	r11,sp[0x8]
8000aa96:	58 0b       	cp.w	r11,0
8000aa98:	fe 95 fe f0 	brlt	8000a878 <_vfprintf_r+0x1b8>
8000aa9c:	0a 97       	mov	r7,r5
8000aa9e:	cf 3a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000aaa0:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000aaa4:	0f 38       	ld.ub	r8,r7++
8000aaa6:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000aaaa:	f0 ca 00 30 	sub	r10,r8,48
8000aaae:	58 9a       	cp.w	r10,9
8000aab0:	fe 98 ff f8 	brls	8000aaa0 <_vfprintf_r+0x3e0>
8000aab4:	3f fa       	mov	r10,-1
8000aab6:	f2 0a 0c 49 	max	r9,r9,r10
8000aaba:	50 29       	stdsp	sp[0x8],r9
8000aabc:	ce 7a       	rjmp	8000a88a <_vfprintf_r+0x1ca>
8000aabe:	a7 b3       	sbr	r3,0x7
8000aac0:	ce 2a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000aac2:	30 09       	mov	r9,0
8000aac4:	23 08       	sub	r8,48
8000aac6:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000aaca:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000aace:	0f 38       	ld.ub	r8,r7++
8000aad0:	f0 ca 00 30 	sub	r10,r8,48
8000aad4:	58 9a       	cp.w	r10,9
8000aad6:	fe 98 ff f7 	brls	8000aac4 <_vfprintf_r+0x404>
8000aada:	e0 48 00 24 	cp.w	r8,36
8000aade:	fe 91 fe d5 	brne	8000a888 <_vfprintf_r+0x1c8>
8000aae2:	e0 49 00 20 	cp.w	r9,32
8000aae6:	e0 89 0d 70 	brgt	8000c5c6 <_vfprintf_r+0x1f06>
8000aaea:	f2 c4 00 01 	sub	r4,r9,1
8000aaee:	30 19       	mov	r9,1
8000aaf0:	50 39       	stdsp	sp[0xc],r9
8000aaf2:	cc 9a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000aaf4:	a3 b3       	sbr	r3,0x3
8000aaf6:	cc 7a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000aaf8:	a7 a3       	sbr	r3,0x6
8000aafa:	cc 5a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000aafc:	0f 88       	ld.ub	r8,r7[0x0]
8000aafe:	36 ce       	mov	lr,108
8000ab00:	fc 08 18 00 	cp.b	r8,lr
8000ab04:	c0 41       	brne	8000ab0c <_vfprintf_r+0x44c>
8000ab06:	2f f7       	sub	r7,-1
8000ab08:	a5 b3       	sbr	r3,0x5
8000ab0a:	cb da       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000ab0c:	a5 a3       	sbr	r3,0x4
8000ab0e:	cb ba       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000ab10:	a5 b3       	sbr	r3,0x5
8000ab12:	cb 9a       	rjmp	8000a884 <_vfprintf_r+0x1c4>
8000ab14:	50 a7       	stdsp	sp[0x28],r7
8000ab16:	50 80       	stdsp	sp[0x20],r0
8000ab18:	0c 97       	mov	r7,r6
8000ab1a:	10 90       	mov	r0,r8
8000ab1c:	08 96       	mov	r6,r4
8000ab1e:	04 95       	mov	r5,r2
8000ab20:	40 94       	lddsp	r4,sp[0x24]
8000ab22:	02 92       	mov	r2,r1
8000ab24:	0e 99       	mov	r9,r7
8000ab26:	40 41       	lddsp	r1,sp[0x10]
8000ab28:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ab2c:	40 3c       	lddsp	r12,sp[0xc]
8000ab2e:	58 0c       	cp.w	r12,0
8000ab30:	c1 d0       	breq	8000ab6a <_vfprintf_r+0x4aa>
8000ab32:	10 36       	cp.w	r6,r8
8000ab34:	c0 64       	brge	8000ab40 <_vfprintf_r+0x480>
8000ab36:	fa cb f9 44 	sub	r11,sp,-1724
8000ab3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ab3e:	c1 d8       	rjmp	8000ab78 <_vfprintf_r+0x4b8>
8000ab40:	fa c8 f9 50 	sub	r8,sp,-1712
8000ab44:	1a d8       	st.w	--sp,r8
8000ab46:	fa c8 fa b8 	sub	r8,sp,-1352
8000ab4a:	1a d8       	st.w	--sp,r8
8000ab4c:	fa c8 fb b4 	sub	r8,sp,-1100
8000ab50:	1a d8       	st.w	--sp,r8
8000ab52:	fa c8 f9 40 	sub	r8,sp,-1728
8000ab56:	fa c9 ff b4 	sub	r9,sp,-76
8000ab5a:	04 9a       	mov	r10,r2
8000ab5c:	0c 9b       	mov	r11,r6
8000ab5e:	0a 9c       	mov	r12,r5
8000ab60:	fe b0 fc 14 	rcall	8000a388 <get_arg>
8000ab64:	2f dd       	sub	sp,-12
8000ab66:	19 b8       	ld.ub	r8,r12[0x3]
8000ab68:	c2 28       	rjmp	8000abac <_vfprintf_r+0x4ec>
8000ab6a:	2f f7       	sub	r7,-1
8000ab6c:	10 39       	cp.w	r9,r8
8000ab6e:	c0 84       	brge	8000ab7e <_vfprintf_r+0x4be>
8000ab70:	fa ca f9 44 	sub	r10,sp,-1724
8000ab74:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ab78:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000ab7c:	c1 88       	rjmp	8000abac <_vfprintf_r+0x4ec>
8000ab7e:	41 09       	lddsp	r9,sp[0x40]
8000ab80:	59 f8       	cp.w	r8,31
8000ab82:	e0 89 00 12 	brgt	8000aba6 <_vfprintf_r+0x4e6>
8000ab86:	f2 ca ff fc 	sub	r10,r9,-4
8000ab8a:	51 0a       	stdsp	sp[0x40],r10
8000ab8c:	72 09       	ld.w	r9,r9[0x0]
8000ab8e:	fa c6 f9 44 	sub	r6,sp,-1724
8000ab92:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000ab96:	2f f8       	sub	r8,-1
8000ab98:	f5 49 fd 88 	st.w	r10[-632],r9
8000ab9c:	fb 48 06 b4 	st.w	sp[1716],r8
8000aba0:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000aba4:	c0 48       	rjmp	8000abac <_vfprintf_r+0x4ec>
8000aba6:	13 b8       	ld.ub	r8,r9[0x3]
8000aba8:	2f c9       	sub	r9,-4
8000abaa:	51 09       	stdsp	sp[0x40],r9
8000abac:	fb 68 06 60 	st.b	sp[1632],r8
8000abb0:	30 0e       	mov	lr,0
8000abb2:	30 08       	mov	r8,0
8000abb4:	30 12       	mov	r2,1
8000abb6:	fb 68 06 bb 	st.b	sp[1723],r8
8000abba:	50 2e       	stdsp	sp[0x8],lr
8000abbc:	e0 8f 08 b0 	bral	8000bd1c <_vfprintf_r+0x165c>
8000abc0:	50 a7       	stdsp	sp[0x28],r7
8000abc2:	50 80       	stdsp	sp[0x20],r0
8000abc4:	0c 97       	mov	r7,r6
8000abc6:	04 95       	mov	r5,r2
8000abc8:	08 96       	mov	r6,r4
8000abca:	02 92       	mov	r2,r1
8000abcc:	40 94       	lddsp	r4,sp[0x24]
8000abce:	10 90       	mov	r0,r8
8000abd0:	40 41       	lddsp	r1,sp[0x10]
8000abd2:	a5 a3       	sbr	r3,0x4
8000abd4:	c0 a8       	rjmp	8000abe8 <_vfprintf_r+0x528>
8000abd6:	50 a7       	stdsp	sp[0x28],r7
8000abd8:	50 80       	stdsp	sp[0x20],r0
8000abda:	0c 97       	mov	r7,r6
8000abdc:	04 95       	mov	r5,r2
8000abde:	08 96       	mov	r6,r4
8000abe0:	02 92       	mov	r2,r1
8000abe2:	40 94       	lddsp	r4,sp[0x24]
8000abe4:	10 90       	mov	r0,r8
8000abe6:	40 41       	lddsp	r1,sp[0x10]
8000abe8:	ed b3 00 05 	bld	r3,0x5
8000abec:	c5 11       	brne	8000ac8e <_vfprintf_r+0x5ce>
8000abee:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000abf2:	40 3c       	lddsp	r12,sp[0xc]
8000abf4:	58 0c       	cp.w	r12,0
8000abf6:	c1 e0       	breq	8000ac32 <_vfprintf_r+0x572>
8000abf8:	10 36       	cp.w	r6,r8
8000abfa:	c0 64       	brge	8000ac06 <_vfprintf_r+0x546>
8000abfc:	fa cb f9 44 	sub	r11,sp,-1724
8000ac00:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ac04:	c2 08       	rjmp	8000ac44 <_vfprintf_r+0x584>
8000ac06:	fa c8 f9 50 	sub	r8,sp,-1712
8000ac0a:	1a d8       	st.w	--sp,r8
8000ac0c:	fa c8 fa b8 	sub	r8,sp,-1352
8000ac10:	0c 9b       	mov	r11,r6
8000ac12:	1a d8       	st.w	--sp,r8
8000ac14:	fa c8 fb b4 	sub	r8,sp,-1100
8000ac18:	1a d8       	st.w	--sp,r8
8000ac1a:	fa c9 ff b4 	sub	r9,sp,-76
8000ac1e:	fa c8 f9 40 	sub	r8,sp,-1728
8000ac22:	04 9a       	mov	r10,r2
8000ac24:	0a 9c       	mov	r12,r5
8000ac26:	fe b0 fb b1 	rcall	8000a388 <get_arg>
8000ac2a:	2f dd       	sub	sp,-12
8000ac2c:	78 1b       	ld.w	r11,r12[0x4]
8000ac2e:	78 09       	ld.w	r9,r12[0x0]
8000ac30:	c2 b8       	rjmp	8000ac86 <_vfprintf_r+0x5c6>
8000ac32:	ee ca ff ff 	sub	r10,r7,-1
8000ac36:	10 37       	cp.w	r7,r8
8000ac38:	c0 b4       	brge	8000ac4e <_vfprintf_r+0x58e>
8000ac3a:	fa c9 f9 44 	sub	r9,sp,-1724
8000ac3e:	14 97       	mov	r7,r10
8000ac40:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ac44:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000ac48:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000ac4c:	c1 d8       	rjmp	8000ac86 <_vfprintf_r+0x5c6>
8000ac4e:	41 09       	lddsp	r9,sp[0x40]
8000ac50:	59 f8       	cp.w	r8,31
8000ac52:	e0 89 00 14 	brgt	8000ac7a <_vfprintf_r+0x5ba>
8000ac56:	f2 cb ff f8 	sub	r11,r9,-8
8000ac5a:	51 0b       	stdsp	sp[0x40],r11
8000ac5c:	fa c6 f9 44 	sub	r6,sp,-1724
8000ac60:	72 1b       	ld.w	r11,r9[0x4]
8000ac62:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000ac66:	72 09       	ld.w	r9,r9[0x0]
8000ac68:	f9 4b fd 8c 	st.w	r12[-628],r11
8000ac6c:	f9 49 fd 88 	st.w	r12[-632],r9
8000ac70:	2f f8       	sub	r8,-1
8000ac72:	14 97       	mov	r7,r10
8000ac74:	fb 48 06 b4 	st.w	sp[1716],r8
8000ac78:	c0 78       	rjmp	8000ac86 <_vfprintf_r+0x5c6>
8000ac7a:	f2 c8 ff f8 	sub	r8,r9,-8
8000ac7e:	72 1b       	ld.w	r11,r9[0x4]
8000ac80:	14 97       	mov	r7,r10
8000ac82:	51 08       	stdsp	sp[0x40],r8
8000ac84:	72 09       	ld.w	r9,r9[0x0]
8000ac86:	16 98       	mov	r8,r11
8000ac88:	fa e9 00 00 	st.d	sp[0],r8
8000ac8c:	ca e8       	rjmp	8000ade8 <_vfprintf_r+0x728>
8000ac8e:	ed b3 00 04 	bld	r3,0x4
8000ac92:	c1 71       	brne	8000acc0 <_vfprintf_r+0x600>
8000ac94:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ac98:	40 3e       	lddsp	lr,sp[0xc]
8000ac9a:	58 0e       	cp.w	lr,0
8000ac9c:	c0 80       	breq	8000acac <_vfprintf_r+0x5ec>
8000ac9e:	10 36       	cp.w	r6,r8
8000aca0:	c6 94       	brge	8000ad72 <_vfprintf_r+0x6b2>
8000aca2:	fa cc f9 44 	sub	r12,sp,-1724
8000aca6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000acaa:	c8 28       	rjmp	8000adae <_vfprintf_r+0x6ee>
8000acac:	ee ca ff ff 	sub	r10,r7,-1
8000acb0:	10 37       	cp.w	r7,r8
8000acb2:	e0 84 00 81 	brge	8000adb4 <_vfprintf_r+0x6f4>
8000acb6:	fa cb f9 44 	sub	r11,sp,-1724
8000acba:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000acbe:	c7 78       	rjmp	8000adac <_vfprintf_r+0x6ec>
8000acc0:	ed b3 00 06 	bld	r3,0x6
8000acc4:	c4 b1       	brne	8000ad5a <_vfprintf_r+0x69a>
8000acc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000acca:	40 3c       	lddsp	r12,sp[0xc]
8000accc:	58 0c       	cp.w	r12,0
8000acce:	c1 d0       	breq	8000ad08 <_vfprintf_r+0x648>
8000acd0:	10 36       	cp.w	r6,r8
8000acd2:	c0 64       	brge	8000acde <_vfprintf_r+0x61e>
8000acd4:	fa cb f9 44 	sub	r11,sp,-1724
8000acd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000acdc:	c1 f8       	rjmp	8000ad1a <_vfprintf_r+0x65a>
8000acde:	fa c8 f9 50 	sub	r8,sp,-1712
8000ace2:	1a d8       	st.w	--sp,r8
8000ace4:	fa c8 fa b8 	sub	r8,sp,-1352
8000ace8:	1a d8       	st.w	--sp,r8
8000acea:	fa c8 fb b4 	sub	r8,sp,-1100
8000acee:	1a d8       	st.w	--sp,r8
8000acf0:	fa c8 f9 40 	sub	r8,sp,-1728
8000acf4:	fa c9 ff b4 	sub	r9,sp,-76
8000acf8:	04 9a       	mov	r10,r2
8000acfa:	0c 9b       	mov	r11,r6
8000acfc:	0a 9c       	mov	r12,r5
8000acfe:	fe b0 fb 45 	rcall	8000a388 <get_arg>
8000ad02:	2f dd       	sub	sp,-12
8000ad04:	98 18       	ld.sh	r8,r12[0x2]
8000ad06:	c2 68       	rjmp	8000ad52 <_vfprintf_r+0x692>
8000ad08:	ee ca ff ff 	sub	r10,r7,-1
8000ad0c:	10 37       	cp.w	r7,r8
8000ad0e:	c0 94       	brge	8000ad20 <_vfprintf_r+0x660>
8000ad10:	fa c9 f9 44 	sub	r9,sp,-1724
8000ad14:	14 97       	mov	r7,r10
8000ad16:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ad1a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000ad1e:	c1 a8       	rjmp	8000ad52 <_vfprintf_r+0x692>
8000ad20:	41 09       	lddsp	r9,sp[0x40]
8000ad22:	59 f8       	cp.w	r8,31
8000ad24:	e0 89 00 13 	brgt	8000ad4a <_vfprintf_r+0x68a>
8000ad28:	f2 cb ff fc 	sub	r11,r9,-4
8000ad2c:	51 0b       	stdsp	sp[0x40],r11
8000ad2e:	72 09       	ld.w	r9,r9[0x0]
8000ad30:	fa c6 f9 44 	sub	r6,sp,-1724
8000ad34:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000ad38:	2f f8       	sub	r8,-1
8000ad3a:	f7 49 fd 88 	st.w	r11[-632],r9
8000ad3e:	fb 48 06 b4 	st.w	sp[1716],r8
8000ad42:	14 97       	mov	r7,r10
8000ad44:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000ad48:	c0 58       	rjmp	8000ad52 <_vfprintf_r+0x692>
8000ad4a:	92 18       	ld.sh	r8,r9[0x2]
8000ad4c:	14 97       	mov	r7,r10
8000ad4e:	2f c9       	sub	r9,-4
8000ad50:	51 09       	stdsp	sp[0x40],r9
8000ad52:	50 18       	stdsp	sp[0x4],r8
8000ad54:	bf 58       	asr	r8,0x1f
8000ad56:	50 08       	stdsp	sp[0x0],r8
8000ad58:	c4 88       	rjmp	8000ade8 <_vfprintf_r+0x728>
8000ad5a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ad5e:	40 3c       	lddsp	r12,sp[0xc]
8000ad60:	58 0c       	cp.w	r12,0
8000ad62:	c1 d0       	breq	8000ad9c <_vfprintf_r+0x6dc>
8000ad64:	10 36       	cp.w	r6,r8
8000ad66:	c0 64       	brge	8000ad72 <_vfprintf_r+0x6b2>
8000ad68:	fa cb f9 44 	sub	r11,sp,-1724
8000ad6c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ad70:	c1 f8       	rjmp	8000adae <_vfprintf_r+0x6ee>
8000ad72:	fa c8 f9 50 	sub	r8,sp,-1712
8000ad76:	1a d8       	st.w	--sp,r8
8000ad78:	fa c8 fa b8 	sub	r8,sp,-1352
8000ad7c:	0c 9b       	mov	r11,r6
8000ad7e:	1a d8       	st.w	--sp,r8
8000ad80:	fa c8 fb b4 	sub	r8,sp,-1100
8000ad84:	04 9a       	mov	r10,r2
8000ad86:	1a d8       	st.w	--sp,r8
8000ad88:	0a 9c       	mov	r12,r5
8000ad8a:	fa c8 f9 40 	sub	r8,sp,-1728
8000ad8e:	fa c9 ff b4 	sub	r9,sp,-76
8000ad92:	fe b0 fa fb 	rcall	8000a388 <get_arg>
8000ad96:	2f dd       	sub	sp,-12
8000ad98:	78 0b       	ld.w	r11,r12[0x0]
8000ad9a:	c2 48       	rjmp	8000ade2 <_vfprintf_r+0x722>
8000ad9c:	ee ca ff ff 	sub	r10,r7,-1
8000ada0:	10 37       	cp.w	r7,r8
8000ada2:	c0 94       	brge	8000adb4 <_vfprintf_r+0x6f4>
8000ada4:	fa c9 f9 44 	sub	r9,sp,-1724
8000ada8:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000adac:	14 97       	mov	r7,r10
8000adae:	ec fb fd 88 	ld.w	r11,r6[-632]
8000adb2:	c1 88       	rjmp	8000ade2 <_vfprintf_r+0x722>
8000adb4:	41 09       	lddsp	r9,sp[0x40]
8000adb6:	59 f8       	cp.w	r8,31
8000adb8:	e0 89 00 11 	brgt	8000adda <_vfprintf_r+0x71a>
8000adbc:	f2 cb ff fc 	sub	r11,r9,-4
8000adc0:	51 0b       	stdsp	sp[0x40],r11
8000adc2:	fa c6 f9 44 	sub	r6,sp,-1724
8000adc6:	72 0b       	ld.w	r11,r9[0x0]
8000adc8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000adcc:	f3 4b fd 88 	st.w	r9[-632],r11
8000add0:	2f f8       	sub	r8,-1
8000add2:	14 97       	mov	r7,r10
8000add4:	fb 48 06 b4 	st.w	sp[1716],r8
8000add8:	c0 58       	rjmp	8000ade2 <_vfprintf_r+0x722>
8000adda:	72 0b       	ld.w	r11,r9[0x0]
8000addc:	14 97       	mov	r7,r10
8000adde:	2f c9       	sub	r9,-4
8000ade0:	51 09       	stdsp	sp[0x40],r9
8000ade2:	50 1b       	stdsp	sp[0x4],r11
8000ade4:	bf 5b       	asr	r11,0x1f
8000ade6:	50 0b       	stdsp	sp[0x0],r11
8000ade8:	fa ea 00 00 	ld.d	r10,sp[0]
8000adec:	58 0a       	cp.w	r10,0
8000adee:	5c 2b       	cpc	r11
8000adf0:	c0 e4       	brge	8000ae0c <_vfprintf_r+0x74c>
8000adf2:	30 08       	mov	r8,0
8000adf4:	fa ea 00 00 	ld.d	r10,sp[0]
8000adf8:	30 09       	mov	r9,0
8000adfa:	f0 0a 01 0a 	sub	r10,r8,r10
8000adfe:	f2 0b 01 4b 	sbc	r11,r9,r11
8000ae02:	32 d8       	mov	r8,45
8000ae04:	fa eb 00 00 	st.d	sp[0],r10
8000ae08:	fb 68 06 bb 	st.b	sp[1723],r8
8000ae0c:	30 18       	mov	r8,1
8000ae0e:	e0 8f 06 fd 	bral	8000bc08 <_vfprintf_r+0x1548>
8000ae12:	50 a7       	stdsp	sp[0x28],r7
8000ae14:	50 80       	stdsp	sp[0x20],r0
8000ae16:	0c 97       	mov	r7,r6
8000ae18:	04 95       	mov	r5,r2
8000ae1a:	08 96       	mov	r6,r4
8000ae1c:	02 92       	mov	r2,r1
8000ae1e:	40 94       	lddsp	r4,sp[0x24]
8000ae20:	10 90       	mov	r0,r8
8000ae22:	40 41       	lddsp	r1,sp[0x10]
8000ae24:	0e 99       	mov	r9,r7
8000ae26:	ed b3 00 03 	bld	r3,0x3
8000ae2a:	c4 11       	brne	8000aeac <_vfprintf_r+0x7ec>
8000ae2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ae30:	40 3a       	lddsp	r10,sp[0xc]
8000ae32:	58 0a       	cp.w	r10,0
8000ae34:	c1 90       	breq	8000ae66 <_vfprintf_r+0x7a6>
8000ae36:	10 36       	cp.w	r6,r8
8000ae38:	c6 45       	brlt	8000af00 <_vfprintf_r+0x840>
8000ae3a:	fa c8 f9 50 	sub	r8,sp,-1712
8000ae3e:	1a d8       	st.w	--sp,r8
8000ae40:	fa c8 fa b8 	sub	r8,sp,-1352
8000ae44:	1a d8       	st.w	--sp,r8
8000ae46:	fa c8 fb b4 	sub	r8,sp,-1100
8000ae4a:	0c 9b       	mov	r11,r6
8000ae4c:	1a d8       	st.w	--sp,r8
8000ae4e:	04 9a       	mov	r10,r2
8000ae50:	fa c8 f9 40 	sub	r8,sp,-1728
8000ae54:	fa c9 ff b4 	sub	r9,sp,-76
8000ae58:	0a 9c       	mov	r12,r5
8000ae5a:	fe b0 fa 97 	rcall	8000a388 <get_arg>
8000ae5e:	2f dd       	sub	sp,-12
8000ae60:	78 16       	ld.w	r6,r12[0x4]
8000ae62:	50 76       	stdsp	sp[0x1c],r6
8000ae64:	c4 88       	rjmp	8000aef4 <_vfprintf_r+0x834>
8000ae66:	2f f7       	sub	r7,-1
8000ae68:	10 39       	cp.w	r9,r8
8000ae6a:	c0 c4       	brge	8000ae82 <_vfprintf_r+0x7c2>
8000ae6c:	fa ce f9 44 	sub	lr,sp,-1724
8000ae70:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000ae74:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000ae78:	50 7c       	stdsp	sp[0x1c],r12
8000ae7a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000ae7e:	50 56       	stdsp	sp[0x14],r6
8000ae80:	c6 68       	rjmp	8000af4c <_vfprintf_r+0x88c>
8000ae82:	41 09       	lddsp	r9,sp[0x40]
8000ae84:	59 f8       	cp.w	r8,31
8000ae86:	e0 89 00 10 	brgt	8000aea6 <_vfprintf_r+0x7e6>
8000ae8a:	f2 ca ff f8 	sub	r10,r9,-8
8000ae8e:	72 1b       	ld.w	r11,r9[0x4]
8000ae90:	51 0a       	stdsp	sp[0x40],r10
8000ae92:	72 09       	ld.w	r9,r9[0x0]
8000ae94:	fa ca f9 44 	sub	r10,sp,-1724
8000ae98:	50 7b       	stdsp	sp[0x1c],r11
8000ae9a:	50 59       	stdsp	sp[0x14],r9
8000ae9c:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000aea0:	40 5b       	lddsp	r11,sp[0x14]
8000aea2:	40 7a       	lddsp	r10,sp[0x1c]
8000aea4:	c4 78       	rjmp	8000af32 <_vfprintf_r+0x872>
8000aea6:	72 18       	ld.w	r8,r9[0x4]
8000aea8:	50 78       	stdsp	sp[0x1c],r8
8000aeaa:	c4 c8       	rjmp	8000af42 <_vfprintf_r+0x882>
8000aeac:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000aeb0:	40 3e       	lddsp	lr,sp[0xc]
8000aeb2:	58 0e       	cp.w	lr,0
8000aeb4:	c2 30       	breq	8000aefa <_vfprintf_r+0x83a>
8000aeb6:	10 36       	cp.w	r6,r8
8000aeb8:	c0 94       	brge	8000aeca <_vfprintf_r+0x80a>
8000aeba:	fa cc f9 44 	sub	r12,sp,-1724
8000aebe:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000aec2:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000aec6:	50 7b       	stdsp	sp[0x1c],r11
8000aec8:	cd 9b       	rjmp	8000ae7a <_vfprintf_r+0x7ba>
8000aeca:	fa c8 f9 50 	sub	r8,sp,-1712
8000aece:	1a d8       	st.w	--sp,r8
8000aed0:	fa c8 fa b8 	sub	r8,sp,-1352
8000aed4:	04 9a       	mov	r10,r2
8000aed6:	1a d8       	st.w	--sp,r8
8000aed8:	fa c8 fb b4 	sub	r8,sp,-1100
8000aedc:	0c 9b       	mov	r11,r6
8000aede:	1a d8       	st.w	--sp,r8
8000aee0:	0a 9c       	mov	r12,r5
8000aee2:	fa c8 f9 40 	sub	r8,sp,-1728
8000aee6:	fa c9 ff b4 	sub	r9,sp,-76
8000aeea:	fe b0 fa 4f 	rcall	8000a388 <get_arg>
8000aeee:	2f dd       	sub	sp,-12
8000aef0:	78 1a       	ld.w	r10,r12[0x4]
8000aef2:	50 7a       	stdsp	sp[0x1c],r10
8000aef4:	78 0c       	ld.w	r12,r12[0x0]
8000aef6:	50 5c       	stdsp	sp[0x14],r12
8000aef8:	c2 a8       	rjmp	8000af4c <_vfprintf_r+0x88c>
8000aefa:	2f f7       	sub	r7,-1
8000aefc:	10 39       	cp.w	r9,r8
8000aefe:	c0 94       	brge	8000af10 <_vfprintf_r+0x850>
8000af00:	fa c9 f9 44 	sub	r9,sp,-1724
8000af04:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000af08:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000af0c:	50 78       	stdsp	sp[0x1c],r8
8000af0e:	cb 6b       	rjmp	8000ae7a <_vfprintf_r+0x7ba>
8000af10:	41 09       	lddsp	r9,sp[0x40]
8000af12:	59 f8       	cp.w	r8,31
8000af14:	e0 89 00 15 	brgt	8000af3e <_vfprintf_r+0x87e>
8000af18:	f2 ca ff f8 	sub	r10,r9,-8
8000af1c:	72 16       	ld.w	r6,r9[0x4]
8000af1e:	72 09       	ld.w	r9,r9[0x0]
8000af20:	51 0a       	stdsp	sp[0x40],r10
8000af22:	50 59       	stdsp	sp[0x14],r9
8000af24:	fa ce f9 44 	sub	lr,sp,-1724
8000af28:	50 76       	stdsp	sp[0x1c],r6
8000af2a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000af2e:	40 5b       	lddsp	r11,sp[0x14]
8000af30:	0c 9a       	mov	r10,r6
8000af32:	f2 eb fd 88 	st.d	r9[-632],r10
8000af36:	2f f8       	sub	r8,-1
8000af38:	fb 48 06 b4 	st.w	sp[1716],r8
8000af3c:	c0 88       	rjmp	8000af4c <_vfprintf_r+0x88c>
8000af3e:	72 1c       	ld.w	r12,r9[0x4]
8000af40:	50 7c       	stdsp	sp[0x1c],r12
8000af42:	f2 c8 ff f8 	sub	r8,r9,-8
8000af46:	51 08       	stdsp	sp[0x40],r8
8000af48:	72 09       	ld.w	r9,r9[0x0]
8000af4a:	50 59       	stdsp	sp[0x14],r9
8000af4c:	40 5b       	lddsp	r11,sp[0x14]
8000af4e:	40 7a       	lddsp	r10,sp[0x1c]
8000af50:	e0 a0 2a 6c 	rcall	80010428 <__isinfd>
8000af54:	18 96       	mov	r6,r12
8000af56:	c1 50       	breq	8000af80 <_vfprintf_r+0x8c0>
8000af58:	30 08       	mov	r8,0
8000af5a:	30 09       	mov	r9,0
8000af5c:	40 5b       	lddsp	r11,sp[0x14]
8000af5e:	40 7a       	lddsp	r10,sp[0x1c]
8000af60:	e0 a0 3c 0e 	rcall	8001277c <__avr32_f64_cmp_lt>
8000af64:	c0 40       	breq	8000af6c <_vfprintf_r+0x8ac>
8000af66:	32 d8       	mov	r8,45
8000af68:	fb 68 06 bb 	st.b	sp[1723],r8
8000af6c:	4a f8       	lddpc	r8,8000b028 <_vfprintf_r+0x968>
8000af6e:	4b 06       	lddpc	r6,8000b02c <_vfprintf_r+0x96c>
8000af70:	a7 d3       	cbr	r3,0x7
8000af72:	e0 40 00 47 	cp.w	r0,71
8000af76:	f0 06 17 a0 	movle	r6,r8
8000af7a:	30 32       	mov	r2,3
8000af7c:	e0 8f 06 d3 	bral	8000bd22 <_vfprintf_r+0x1662>
8000af80:	40 5b       	lddsp	r11,sp[0x14]
8000af82:	40 7a       	lddsp	r10,sp[0x1c]
8000af84:	e0 a0 2a 67 	rcall	80010452 <__isnand>
8000af88:	c0 c0       	breq	8000afa0 <_vfprintf_r+0x8e0>
8000af8a:	50 26       	stdsp	sp[0x8],r6
8000af8c:	4a 98       	lddpc	r8,8000b030 <_vfprintf_r+0x970>
8000af8e:	4a a6       	lddpc	r6,8000b034 <_vfprintf_r+0x974>
8000af90:	a7 d3       	cbr	r3,0x7
8000af92:	e0 40 00 47 	cp.w	r0,71
8000af96:	f0 06 17 a0 	movle	r6,r8
8000af9a:	30 32       	mov	r2,3
8000af9c:	e0 8f 06 c9 	bral	8000bd2e <_vfprintf_r+0x166e>
8000afa0:	40 2a       	lddsp	r10,sp[0x8]
8000afa2:	5b fa       	cp.w	r10,-1
8000afa4:	c0 41       	brne	8000afac <_vfprintf_r+0x8ec>
8000afa6:	30 69       	mov	r9,6
8000afa8:	50 29       	stdsp	sp[0x8],r9
8000afaa:	c1 18       	rjmp	8000afcc <_vfprintf_r+0x90c>
8000afac:	e0 40 00 47 	cp.w	r0,71
8000afb0:	5f 09       	sreq	r9
8000afb2:	e0 40 00 67 	cp.w	r0,103
8000afb6:	5f 08       	sreq	r8
8000afb8:	f3 e8 10 08 	or	r8,r9,r8
8000afbc:	f8 08 18 00 	cp.b	r8,r12
8000afc0:	c0 60       	breq	8000afcc <_vfprintf_r+0x90c>
8000afc2:	40 28       	lddsp	r8,sp[0x8]
8000afc4:	58 08       	cp.w	r8,0
8000afc6:	f9 b8 00 01 	moveq	r8,1
8000afca:	50 28       	stdsp	sp[0x8],r8
8000afcc:	40 78       	lddsp	r8,sp[0x1c]
8000afce:	40 59       	lddsp	r9,sp[0x14]
8000afd0:	fa e9 06 94 	st.d	sp[1684],r8
8000afd4:	a9 a3       	sbr	r3,0x8
8000afd6:	fa f8 06 94 	ld.w	r8,sp[1684]
8000afda:	58 08       	cp.w	r8,0
8000afdc:	c0 65       	brlt	8000afe8 <_vfprintf_r+0x928>
8000afde:	40 5e       	lddsp	lr,sp[0x14]
8000afe0:	30 0c       	mov	r12,0
8000afe2:	50 6e       	stdsp	sp[0x18],lr
8000afe4:	50 9c       	stdsp	sp[0x24],r12
8000afe6:	c0 78       	rjmp	8000aff4 <_vfprintf_r+0x934>
8000afe8:	40 5b       	lddsp	r11,sp[0x14]
8000afea:	32 da       	mov	r10,45
8000afec:	ee 1b 80 00 	eorh	r11,0x8000
8000aff0:	50 9a       	stdsp	sp[0x24],r10
8000aff2:	50 6b       	stdsp	sp[0x18],r11
8000aff4:	e0 40 00 46 	cp.w	r0,70
8000aff8:	5f 09       	sreq	r9
8000affa:	e0 40 00 66 	cp.w	r0,102
8000affe:	5f 08       	sreq	r8
8000b000:	f3 e8 10 08 	or	r8,r9,r8
8000b004:	50 48       	stdsp	sp[0x10],r8
8000b006:	c0 40       	breq	8000b00e <_vfprintf_r+0x94e>
8000b008:	40 22       	lddsp	r2,sp[0x8]
8000b00a:	30 39       	mov	r9,3
8000b00c:	c1 a8       	rjmp	8000b040 <_vfprintf_r+0x980>
8000b00e:	e0 40 00 45 	cp.w	r0,69
8000b012:	5f 09       	sreq	r9
8000b014:	e0 40 00 65 	cp.w	r0,101
8000b018:	5f 08       	sreq	r8
8000b01a:	40 46       	lddsp	r6,sp[0x10]
8000b01c:	10 49       	or	r9,r8
8000b01e:	ec 09 18 00 	cp.b	r9,r6
8000b022:	c0 b1       	brne	8000b038 <_vfprintf_r+0x978>
8000b024:	40 22       	lddsp	r2,sp[0x8]
8000b026:	c0 c8       	rjmp	8000b03e <_vfprintf_r+0x97e>
8000b028:	80 01       	ld.sh	r1,r0[0x0]
8000b02a:	40 fc       	lddsp	r12,sp[0x3c]
8000b02c:	80 01       	ld.sh	r1,r0[0x0]
8000b02e:	41 00       	lddsp	r0,sp[0x40]
8000b030:	80 01       	ld.sh	r1,r0[0x0]
8000b032:	41 04       	lddsp	r4,sp[0x40]
8000b034:	80 01       	ld.sh	r1,r0[0x0]
8000b036:	41 08       	lddsp	r8,sp[0x40]
8000b038:	40 2e       	lddsp	lr,sp[0x8]
8000b03a:	fc c2 ff ff 	sub	r2,lr,-1
8000b03e:	30 29       	mov	r9,2
8000b040:	fa c8 f9 5c 	sub	r8,sp,-1700
8000b044:	1a d8       	st.w	--sp,r8
8000b046:	fa c8 f9 54 	sub	r8,sp,-1708
8000b04a:	1a d8       	st.w	--sp,r8
8000b04c:	fa c8 f9 4c 	sub	r8,sp,-1716
8000b050:	0a 9c       	mov	r12,r5
8000b052:	1a d8       	st.w	--sp,r8
8000b054:	04 98       	mov	r8,r2
8000b056:	40 9b       	lddsp	r11,sp[0x24]
8000b058:	40 aa       	lddsp	r10,sp[0x28]
8000b05a:	e0 a0 16 65 	rcall	8000dd24 <_dtoa_r>
8000b05e:	e0 40 00 47 	cp.w	r0,71
8000b062:	5f 19       	srne	r9
8000b064:	e0 40 00 67 	cp.w	r0,103
8000b068:	5f 18       	srne	r8
8000b06a:	18 96       	mov	r6,r12
8000b06c:	2f dd       	sub	sp,-12
8000b06e:	f3 e8 00 08 	and	r8,r9,r8
8000b072:	c0 41       	brne	8000b07a <_vfprintf_r+0x9ba>
8000b074:	ed b3 00 00 	bld	r3,0x0
8000b078:	c3 01       	brne	8000b0d8 <_vfprintf_r+0xa18>
8000b07a:	ec 02 00 0c 	add	r12,r6,r2
8000b07e:	50 3c       	stdsp	sp[0xc],r12
8000b080:	40 4b       	lddsp	r11,sp[0x10]
8000b082:	58 0b       	cp.w	r11,0
8000b084:	c1 50       	breq	8000b0ae <_vfprintf_r+0x9ee>
8000b086:	0d 89       	ld.ub	r9,r6[0x0]
8000b088:	33 08       	mov	r8,48
8000b08a:	f0 09 18 00 	cp.b	r9,r8
8000b08e:	c0 b1       	brne	8000b0a4 <_vfprintf_r+0x9e4>
8000b090:	30 08       	mov	r8,0
8000b092:	30 09       	mov	r9,0
8000b094:	40 6b       	lddsp	r11,sp[0x18]
8000b096:	40 7a       	lddsp	r10,sp[0x1c]
8000b098:	e0 a0 3b 2b 	rcall	800126ee <__avr32_f64_cmp_eq>
8000b09c:	fb b2 00 01 	rsubeq	r2,1
8000b0a0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000b0a4:	40 3a       	lddsp	r10,sp[0xc]
8000b0a6:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b0aa:	10 0a       	add	r10,r8
8000b0ac:	50 3a       	stdsp	sp[0xc],r10
8000b0ae:	40 6b       	lddsp	r11,sp[0x18]
8000b0b0:	30 08       	mov	r8,0
8000b0b2:	30 09       	mov	r9,0
8000b0b4:	40 7a       	lddsp	r10,sp[0x1c]
8000b0b6:	e0 a0 3b 1c 	rcall	800126ee <__avr32_f64_cmp_eq>
8000b0ba:	c0 90       	breq	8000b0cc <_vfprintf_r+0xa0c>
8000b0bc:	40 39       	lddsp	r9,sp[0xc]
8000b0be:	fb 49 06 a4 	st.w	sp[1700],r9
8000b0c2:	c0 58       	rjmp	8000b0cc <_vfprintf_r+0xa0c>
8000b0c4:	10 c9       	st.b	r8++,r9
8000b0c6:	fb 48 06 a4 	st.w	sp[1700],r8
8000b0ca:	c0 28       	rjmp	8000b0ce <_vfprintf_r+0xa0e>
8000b0cc:	33 09       	mov	r9,48
8000b0ce:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000b0d2:	40 3e       	lddsp	lr,sp[0xc]
8000b0d4:	1c 38       	cp.w	r8,lr
8000b0d6:	cf 73       	brcs	8000b0c4 <_vfprintf_r+0xa04>
8000b0d8:	e0 40 00 47 	cp.w	r0,71
8000b0dc:	5f 09       	sreq	r9
8000b0de:	e0 40 00 67 	cp.w	r0,103
8000b0e2:	5f 08       	sreq	r8
8000b0e4:	f3 e8 10 08 	or	r8,r9,r8
8000b0e8:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000b0ec:	0c 19       	sub	r9,r6
8000b0ee:	50 69       	stdsp	sp[0x18],r9
8000b0f0:	58 08       	cp.w	r8,0
8000b0f2:	c0 b0       	breq	8000b108 <_vfprintf_r+0xa48>
8000b0f4:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b0f8:	5b d8       	cp.w	r8,-3
8000b0fa:	c0 55       	brlt	8000b104 <_vfprintf_r+0xa44>
8000b0fc:	40 2c       	lddsp	r12,sp[0x8]
8000b0fe:	18 38       	cp.w	r8,r12
8000b100:	e0 8a 00 6a 	brle	8000b1d4 <_vfprintf_r+0xb14>
8000b104:	20 20       	sub	r0,2
8000b106:	c0 58       	rjmp	8000b110 <_vfprintf_r+0xa50>
8000b108:	e0 40 00 65 	cp.w	r0,101
8000b10c:	e0 89 00 46 	brgt	8000b198 <_vfprintf_r+0xad8>
8000b110:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000b114:	fb 60 06 9c 	st.b	sp[1692],r0
8000b118:	20 1b       	sub	r11,1
8000b11a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000b11e:	c0 47       	brpl	8000b126 <_vfprintf_r+0xa66>
8000b120:	5c 3b       	neg	r11
8000b122:	32 d8       	mov	r8,45
8000b124:	c0 28       	rjmp	8000b128 <_vfprintf_r+0xa68>
8000b126:	32 b8       	mov	r8,43
8000b128:	fb 68 06 9d 	st.b	sp[1693],r8
8000b12c:	58 9b       	cp.w	r11,9
8000b12e:	e0 8a 00 1d 	brle	8000b168 <_vfprintf_r+0xaa8>
8000b132:	fa c9 fa 35 	sub	r9,sp,-1483
8000b136:	30 aa       	mov	r10,10
8000b138:	12 98       	mov	r8,r9
8000b13a:	0e 9c       	mov	r12,r7
8000b13c:	0c 92       	mov	r2,r6
8000b13e:	f6 0a 0c 06 	divs	r6,r11,r10
8000b142:	0e 9b       	mov	r11,r7
8000b144:	2d 0b       	sub	r11,-48
8000b146:	10 fb       	st.b	--r8,r11
8000b148:	0c 9b       	mov	r11,r6
8000b14a:	58 96       	cp.w	r6,9
8000b14c:	fe 99 ff f9 	brgt	8000b13e <_vfprintf_r+0xa7e>
8000b150:	2d 0b       	sub	r11,-48
8000b152:	18 97       	mov	r7,r12
8000b154:	04 96       	mov	r6,r2
8000b156:	10 fb       	st.b	--r8,r11
8000b158:	fa ca f9 62 	sub	r10,sp,-1694
8000b15c:	c0 38       	rjmp	8000b162 <_vfprintf_r+0xaa2>
8000b15e:	11 3b       	ld.ub	r11,r8++
8000b160:	14 cb       	st.b	r10++,r11
8000b162:	12 38       	cp.w	r8,r9
8000b164:	cf d3       	brcs	8000b15e <_vfprintf_r+0xa9e>
8000b166:	c0 98       	rjmp	8000b178 <_vfprintf_r+0xab8>
8000b168:	2d 0b       	sub	r11,-48
8000b16a:	33 08       	mov	r8,48
8000b16c:	fb 6b 06 9f 	st.b	sp[1695],r11
8000b170:	fb 68 06 9e 	st.b	sp[1694],r8
8000b174:	fa ca f9 60 	sub	r10,sp,-1696
8000b178:	fa c8 f9 64 	sub	r8,sp,-1692
8000b17c:	f4 08 01 08 	sub	r8,r10,r8
8000b180:	50 e8       	stdsp	sp[0x38],r8
8000b182:	10 92       	mov	r2,r8
8000b184:	40 6b       	lddsp	r11,sp[0x18]
8000b186:	16 02       	add	r2,r11
8000b188:	58 1b       	cp.w	r11,1
8000b18a:	e0 89 00 05 	brgt	8000b194 <_vfprintf_r+0xad4>
8000b18e:	ed b3 00 00 	bld	r3,0x0
8000b192:	c3 51       	brne	8000b1fc <_vfprintf_r+0xb3c>
8000b194:	2f f2       	sub	r2,-1
8000b196:	c3 38       	rjmp	8000b1fc <_vfprintf_r+0xb3c>
8000b198:	e0 40 00 66 	cp.w	r0,102
8000b19c:	c1 c1       	brne	8000b1d4 <_vfprintf_r+0xb14>
8000b19e:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b1a2:	58 02       	cp.w	r2,0
8000b1a4:	e0 8a 00 0c 	brle	8000b1bc <_vfprintf_r+0xafc>
8000b1a8:	40 2a       	lddsp	r10,sp[0x8]
8000b1aa:	58 0a       	cp.w	r10,0
8000b1ac:	c0 41       	brne	8000b1b4 <_vfprintf_r+0xaf4>
8000b1ae:	ed b3 00 00 	bld	r3,0x0
8000b1b2:	c2 51       	brne	8000b1fc <_vfprintf_r+0xb3c>
8000b1b4:	2f f2       	sub	r2,-1
8000b1b6:	40 29       	lddsp	r9,sp[0x8]
8000b1b8:	12 02       	add	r2,r9
8000b1ba:	c0 b8       	rjmp	8000b1d0 <_vfprintf_r+0xb10>
8000b1bc:	40 28       	lddsp	r8,sp[0x8]
8000b1be:	58 08       	cp.w	r8,0
8000b1c0:	c0 61       	brne	8000b1cc <_vfprintf_r+0xb0c>
8000b1c2:	ed b3 00 00 	bld	r3,0x0
8000b1c6:	c0 30       	breq	8000b1cc <_vfprintf_r+0xb0c>
8000b1c8:	30 12       	mov	r2,1
8000b1ca:	c1 98       	rjmp	8000b1fc <_vfprintf_r+0xb3c>
8000b1cc:	40 22       	lddsp	r2,sp[0x8]
8000b1ce:	2f e2       	sub	r2,-2
8000b1d0:	36 60       	mov	r0,102
8000b1d2:	c1 58       	rjmp	8000b1fc <_vfprintf_r+0xb3c>
8000b1d4:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b1d8:	40 6e       	lddsp	lr,sp[0x18]
8000b1da:	1c 32       	cp.w	r2,lr
8000b1dc:	c0 65       	brlt	8000b1e8 <_vfprintf_r+0xb28>
8000b1de:	ed b3 00 00 	bld	r3,0x0
8000b1e2:	f7 b2 00 ff 	subeq	r2,-1
8000b1e6:	c0 a8       	rjmp	8000b1fa <_vfprintf_r+0xb3a>
8000b1e8:	e4 08 11 02 	rsub	r8,r2,2
8000b1ec:	40 6c       	lddsp	r12,sp[0x18]
8000b1ee:	58 02       	cp.w	r2,0
8000b1f0:	f0 02 17 a0 	movle	r2,r8
8000b1f4:	f9 b2 09 01 	movgt	r2,1
8000b1f8:	18 02       	add	r2,r12
8000b1fa:	36 70       	mov	r0,103
8000b1fc:	40 9b       	lddsp	r11,sp[0x24]
8000b1fe:	58 0b       	cp.w	r11,0
8000b200:	e0 80 05 91 	breq	8000bd22 <_vfprintf_r+0x1662>
8000b204:	32 d8       	mov	r8,45
8000b206:	fb 68 06 bb 	st.b	sp[1723],r8
8000b20a:	e0 8f 05 90 	bral	8000bd2a <_vfprintf_r+0x166a>
8000b20e:	50 a7       	stdsp	sp[0x28],r7
8000b210:	04 95       	mov	r5,r2
8000b212:	0c 97       	mov	r7,r6
8000b214:	02 92       	mov	r2,r1
8000b216:	08 96       	mov	r6,r4
8000b218:	40 41       	lddsp	r1,sp[0x10]
8000b21a:	40 94       	lddsp	r4,sp[0x24]
8000b21c:	0e 99       	mov	r9,r7
8000b21e:	ed b3 00 05 	bld	r3,0x5
8000b222:	c4 81       	brne	8000b2b2 <_vfprintf_r+0xbf2>
8000b224:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b228:	40 3e       	lddsp	lr,sp[0xc]
8000b22a:	58 0e       	cp.w	lr,0
8000b22c:	c1 d0       	breq	8000b266 <_vfprintf_r+0xba6>
8000b22e:	10 36       	cp.w	r6,r8
8000b230:	c0 64       	brge	8000b23c <_vfprintf_r+0xb7c>
8000b232:	fa cc f9 44 	sub	r12,sp,-1724
8000b236:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b23a:	c1 d8       	rjmp	8000b274 <_vfprintf_r+0xbb4>
8000b23c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b240:	1a d8       	st.w	--sp,r8
8000b242:	fa c8 fa b8 	sub	r8,sp,-1352
8000b246:	04 9a       	mov	r10,r2
8000b248:	1a d8       	st.w	--sp,r8
8000b24a:	fa c8 fb b4 	sub	r8,sp,-1100
8000b24e:	0c 9b       	mov	r11,r6
8000b250:	1a d8       	st.w	--sp,r8
8000b252:	0a 9c       	mov	r12,r5
8000b254:	fa c8 f9 40 	sub	r8,sp,-1728
8000b258:	fa c9 ff b4 	sub	r9,sp,-76
8000b25c:	fe b0 f8 96 	rcall	8000a388 <get_arg>
8000b260:	2f dd       	sub	sp,-12
8000b262:	78 0a       	ld.w	r10,r12[0x0]
8000b264:	c2 08       	rjmp	8000b2a4 <_vfprintf_r+0xbe4>
8000b266:	2f f7       	sub	r7,-1
8000b268:	10 39       	cp.w	r9,r8
8000b26a:	c0 84       	brge	8000b27a <_vfprintf_r+0xbba>
8000b26c:	fa cb f9 44 	sub	r11,sp,-1724
8000b270:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b274:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b278:	c1 68       	rjmp	8000b2a4 <_vfprintf_r+0xbe4>
8000b27a:	41 09       	lddsp	r9,sp[0x40]
8000b27c:	59 f8       	cp.w	r8,31
8000b27e:	e0 89 00 10 	brgt	8000b29e <_vfprintf_r+0xbde>
8000b282:	f2 ca ff fc 	sub	r10,r9,-4
8000b286:	51 0a       	stdsp	sp[0x40],r10
8000b288:	fa c6 f9 44 	sub	r6,sp,-1724
8000b28c:	72 0a       	ld.w	r10,r9[0x0]
8000b28e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b292:	f3 4a fd 88 	st.w	r9[-632],r10
8000b296:	2f f8       	sub	r8,-1
8000b298:	fb 48 06 b4 	st.w	sp[1716],r8
8000b29c:	c0 48       	rjmp	8000b2a4 <_vfprintf_r+0xbe4>
8000b29e:	72 0a       	ld.w	r10,r9[0x0]
8000b2a0:	2f c9       	sub	r9,-4
8000b2a2:	51 09       	stdsp	sp[0x40],r9
8000b2a4:	40 be       	lddsp	lr,sp[0x2c]
8000b2a6:	1c 98       	mov	r8,lr
8000b2a8:	95 1e       	st.w	r10[0x4],lr
8000b2aa:	bf 58       	asr	r8,0x1f
8000b2ac:	95 08       	st.w	r10[0x0],r8
8000b2ae:	fe 9f fa 93 	bral	8000a7d4 <_vfprintf_r+0x114>
8000b2b2:	ed b3 00 04 	bld	r3,0x4
8000b2b6:	c4 80       	breq	8000b346 <_vfprintf_r+0xc86>
8000b2b8:	e2 13 00 40 	andl	r3,0x40,COH
8000b2bc:	c4 50       	breq	8000b346 <_vfprintf_r+0xc86>
8000b2be:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b2c2:	40 3c       	lddsp	r12,sp[0xc]
8000b2c4:	58 0c       	cp.w	r12,0
8000b2c6:	c1 d0       	breq	8000b300 <_vfprintf_r+0xc40>
8000b2c8:	10 36       	cp.w	r6,r8
8000b2ca:	c0 64       	brge	8000b2d6 <_vfprintf_r+0xc16>
8000b2cc:	fa cb f9 44 	sub	r11,sp,-1724
8000b2d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b2d4:	c1 d8       	rjmp	8000b30e <_vfprintf_r+0xc4e>
8000b2d6:	fa c8 f9 50 	sub	r8,sp,-1712
8000b2da:	1a d8       	st.w	--sp,r8
8000b2dc:	fa c8 fa b8 	sub	r8,sp,-1352
8000b2e0:	04 9a       	mov	r10,r2
8000b2e2:	1a d8       	st.w	--sp,r8
8000b2e4:	fa c8 fb b4 	sub	r8,sp,-1100
8000b2e8:	0c 9b       	mov	r11,r6
8000b2ea:	1a d8       	st.w	--sp,r8
8000b2ec:	0a 9c       	mov	r12,r5
8000b2ee:	fa c8 f9 40 	sub	r8,sp,-1728
8000b2f2:	fa c9 ff b4 	sub	r9,sp,-76
8000b2f6:	fe b0 f8 49 	rcall	8000a388 <get_arg>
8000b2fa:	2f dd       	sub	sp,-12
8000b2fc:	78 0a       	ld.w	r10,r12[0x0]
8000b2fe:	c2 08       	rjmp	8000b33e <_vfprintf_r+0xc7e>
8000b300:	2f f7       	sub	r7,-1
8000b302:	10 39       	cp.w	r9,r8
8000b304:	c0 84       	brge	8000b314 <_vfprintf_r+0xc54>
8000b306:	fa ca f9 44 	sub	r10,sp,-1724
8000b30a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b30e:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b312:	c1 68       	rjmp	8000b33e <_vfprintf_r+0xc7e>
8000b314:	41 09       	lddsp	r9,sp[0x40]
8000b316:	59 f8       	cp.w	r8,31
8000b318:	e0 89 00 10 	brgt	8000b338 <_vfprintf_r+0xc78>
8000b31c:	f2 ca ff fc 	sub	r10,r9,-4
8000b320:	51 0a       	stdsp	sp[0x40],r10
8000b322:	fa c6 f9 44 	sub	r6,sp,-1724
8000b326:	72 0a       	ld.w	r10,r9[0x0]
8000b328:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b32c:	f3 4a fd 88 	st.w	r9[-632],r10
8000b330:	2f f8       	sub	r8,-1
8000b332:	fb 48 06 b4 	st.w	sp[1716],r8
8000b336:	c0 48       	rjmp	8000b33e <_vfprintf_r+0xc7e>
8000b338:	72 0a       	ld.w	r10,r9[0x0]
8000b33a:	2f c9       	sub	r9,-4
8000b33c:	51 09       	stdsp	sp[0x40],r9
8000b33e:	40 be       	lddsp	lr,sp[0x2c]
8000b340:	b4 0e       	st.h	r10[0x0],lr
8000b342:	fe 9f fa 49 	bral	8000a7d4 <_vfprintf_r+0x114>
8000b346:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b34a:	40 3c       	lddsp	r12,sp[0xc]
8000b34c:	58 0c       	cp.w	r12,0
8000b34e:	c1 d0       	breq	8000b388 <_vfprintf_r+0xcc8>
8000b350:	10 36       	cp.w	r6,r8
8000b352:	c0 64       	brge	8000b35e <_vfprintf_r+0xc9e>
8000b354:	fa cb f9 44 	sub	r11,sp,-1724
8000b358:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b35c:	c1 d8       	rjmp	8000b396 <_vfprintf_r+0xcd6>
8000b35e:	fa c8 f9 50 	sub	r8,sp,-1712
8000b362:	1a d8       	st.w	--sp,r8
8000b364:	fa c8 fa b8 	sub	r8,sp,-1352
8000b368:	04 9a       	mov	r10,r2
8000b36a:	1a d8       	st.w	--sp,r8
8000b36c:	fa c8 fb b4 	sub	r8,sp,-1100
8000b370:	0c 9b       	mov	r11,r6
8000b372:	1a d8       	st.w	--sp,r8
8000b374:	0a 9c       	mov	r12,r5
8000b376:	fa c8 f9 40 	sub	r8,sp,-1728
8000b37a:	fa c9 ff b4 	sub	r9,sp,-76
8000b37e:	fe b0 f8 05 	rcall	8000a388 <get_arg>
8000b382:	2f dd       	sub	sp,-12
8000b384:	78 0a       	ld.w	r10,r12[0x0]
8000b386:	c2 08       	rjmp	8000b3c6 <_vfprintf_r+0xd06>
8000b388:	2f f7       	sub	r7,-1
8000b38a:	10 39       	cp.w	r9,r8
8000b38c:	c0 84       	brge	8000b39c <_vfprintf_r+0xcdc>
8000b38e:	fa ca f9 44 	sub	r10,sp,-1724
8000b392:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b396:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b39a:	c1 68       	rjmp	8000b3c6 <_vfprintf_r+0xd06>
8000b39c:	41 09       	lddsp	r9,sp[0x40]
8000b39e:	59 f8       	cp.w	r8,31
8000b3a0:	e0 89 00 10 	brgt	8000b3c0 <_vfprintf_r+0xd00>
8000b3a4:	f2 ca ff fc 	sub	r10,r9,-4
8000b3a8:	51 0a       	stdsp	sp[0x40],r10
8000b3aa:	fa c6 f9 44 	sub	r6,sp,-1724
8000b3ae:	72 0a       	ld.w	r10,r9[0x0]
8000b3b0:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b3b4:	f3 4a fd 88 	st.w	r9[-632],r10
8000b3b8:	2f f8       	sub	r8,-1
8000b3ba:	fb 48 06 b4 	st.w	sp[1716],r8
8000b3be:	c0 48       	rjmp	8000b3c6 <_vfprintf_r+0xd06>
8000b3c0:	72 0a       	ld.w	r10,r9[0x0]
8000b3c2:	2f c9       	sub	r9,-4
8000b3c4:	51 09       	stdsp	sp[0x40],r9
8000b3c6:	40 be       	lddsp	lr,sp[0x2c]
8000b3c8:	95 0e       	st.w	r10[0x0],lr
8000b3ca:	fe 9f fa 05 	bral	8000a7d4 <_vfprintf_r+0x114>
8000b3ce:	50 a7       	stdsp	sp[0x28],r7
8000b3d0:	50 80       	stdsp	sp[0x20],r0
8000b3d2:	0c 97       	mov	r7,r6
8000b3d4:	04 95       	mov	r5,r2
8000b3d6:	08 96       	mov	r6,r4
8000b3d8:	02 92       	mov	r2,r1
8000b3da:	40 94       	lddsp	r4,sp[0x24]
8000b3dc:	10 90       	mov	r0,r8
8000b3de:	40 41       	lddsp	r1,sp[0x10]
8000b3e0:	a5 a3       	sbr	r3,0x4
8000b3e2:	c0 a8       	rjmp	8000b3f6 <_vfprintf_r+0xd36>
8000b3e4:	50 a7       	stdsp	sp[0x28],r7
8000b3e6:	50 80       	stdsp	sp[0x20],r0
8000b3e8:	0c 97       	mov	r7,r6
8000b3ea:	04 95       	mov	r5,r2
8000b3ec:	08 96       	mov	r6,r4
8000b3ee:	02 92       	mov	r2,r1
8000b3f0:	40 94       	lddsp	r4,sp[0x24]
8000b3f2:	10 90       	mov	r0,r8
8000b3f4:	40 41       	lddsp	r1,sp[0x10]
8000b3f6:	ed b3 00 05 	bld	r3,0x5
8000b3fa:	c5 d1       	brne	8000b4b4 <_vfprintf_r+0xdf4>
8000b3fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b400:	40 3c       	lddsp	r12,sp[0xc]
8000b402:	58 0c       	cp.w	r12,0
8000b404:	c2 60       	breq	8000b450 <_vfprintf_r+0xd90>
8000b406:	10 36       	cp.w	r6,r8
8000b408:	c0 a4       	brge	8000b41c <_vfprintf_r+0xd5c>
8000b40a:	fa cb f9 44 	sub	r11,sp,-1724
8000b40e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b412:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000b416:	fa e9 00 00 	st.d	sp[0],r8
8000b41a:	c1 88       	rjmp	8000b44a <_vfprintf_r+0xd8a>
8000b41c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b420:	1a d8       	st.w	--sp,r8
8000b422:	fa c8 fa b8 	sub	r8,sp,-1352
8000b426:	04 9a       	mov	r10,r2
8000b428:	1a d8       	st.w	--sp,r8
8000b42a:	0c 9b       	mov	r11,r6
8000b42c:	fa c8 fb b4 	sub	r8,sp,-1100
8000b430:	0a 9c       	mov	r12,r5
8000b432:	1a d8       	st.w	--sp,r8
8000b434:	fa c8 f9 40 	sub	r8,sp,-1728
8000b438:	fa c9 ff b4 	sub	r9,sp,-76
8000b43c:	fe b0 f7 a6 	rcall	8000a388 <get_arg>
8000b440:	2f dd       	sub	sp,-12
8000b442:	f8 ea 00 00 	ld.d	r10,r12[0]
8000b446:	fa eb 00 00 	st.d	sp[0],r10
8000b44a:	30 08       	mov	r8,0
8000b44c:	e0 8f 03 db 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b450:	ee ca ff ff 	sub	r10,r7,-1
8000b454:	10 37       	cp.w	r7,r8
8000b456:	c0 b4       	brge	8000b46c <_vfprintf_r+0xdac>
8000b458:	fa c9 f9 44 	sub	r9,sp,-1724
8000b45c:	14 97       	mov	r7,r10
8000b45e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b462:	ec ea fd 88 	ld.d	r10,r6[-632]
8000b466:	fa eb 00 00 	st.d	sp[0],r10
8000b46a:	c1 88       	rjmp	8000b49a <_vfprintf_r+0xdda>
8000b46c:	41 09       	lddsp	r9,sp[0x40]
8000b46e:	59 f8       	cp.w	r8,31
8000b470:	e0 89 00 18 	brgt	8000b4a0 <_vfprintf_r+0xde0>
8000b474:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b478:	f2 cb ff f8 	sub	r11,r9,-8
8000b47c:	fa e7 00 00 	st.d	sp[0],r6
8000b480:	51 0b       	stdsp	sp[0x40],r11
8000b482:	fa c6 f9 44 	sub	r6,sp,-1724
8000b486:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b48a:	fa e6 00 00 	ld.d	r6,sp[0]
8000b48e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000b492:	2f f8       	sub	r8,-1
8000b494:	14 97       	mov	r7,r10
8000b496:	fb 48 06 b4 	st.w	sp[1716],r8
8000b49a:	40 38       	lddsp	r8,sp[0xc]
8000b49c:	e0 8f 03 b3 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b4a0:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b4a4:	40 38       	lddsp	r8,sp[0xc]
8000b4a6:	fa e7 00 00 	st.d	sp[0],r6
8000b4aa:	2f 89       	sub	r9,-8
8000b4ac:	14 97       	mov	r7,r10
8000b4ae:	51 09       	stdsp	sp[0x40],r9
8000b4b0:	e0 8f 03 a9 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b4b4:	ed b3 00 04 	bld	r3,0x4
8000b4b8:	c1 61       	brne	8000b4e4 <_vfprintf_r+0xe24>
8000b4ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b4be:	40 3e       	lddsp	lr,sp[0xc]
8000b4c0:	58 0e       	cp.w	lr,0
8000b4c2:	c0 80       	breq	8000b4d2 <_vfprintf_r+0xe12>
8000b4c4:	10 36       	cp.w	r6,r8
8000b4c6:	c6 74       	brge	8000b594 <_vfprintf_r+0xed4>
8000b4c8:	fa cc f9 44 	sub	r12,sp,-1724
8000b4cc:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b4d0:	c8 08       	rjmp	8000b5d0 <_vfprintf_r+0xf10>
8000b4d2:	ee ca ff ff 	sub	r10,r7,-1
8000b4d6:	10 37       	cp.w	r7,r8
8000b4d8:	c7 f4       	brge	8000b5d6 <_vfprintf_r+0xf16>
8000b4da:	fa cb f9 44 	sub	r11,sp,-1724
8000b4de:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b4e2:	c7 68       	rjmp	8000b5ce <_vfprintf_r+0xf0e>
8000b4e4:	ed b3 00 06 	bld	r3,0x6
8000b4e8:	c4 a1       	brne	8000b57c <_vfprintf_r+0xebc>
8000b4ea:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b4ee:	40 3c       	lddsp	r12,sp[0xc]
8000b4f0:	58 0c       	cp.w	r12,0
8000b4f2:	c1 d0       	breq	8000b52c <_vfprintf_r+0xe6c>
8000b4f4:	10 36       	cp.w	r6,r8
8000b4f6:	c0 64       	brge	8000b502 <_vfprintf_r+0xe42>
8000b4f8:	fa cb f9 44 	sub	r11,sp,-1724
8000b4fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b500:	c1 f8       	rjmp	8000b53e <_vfprintf_r+0xe7e>
8000b502:	fa c8 f9 50 	sub	r8,sp,-1712
8000b506:	1a d8       	st.w	--sp,r8
8000b508:	fa c8 fa b8 	sub	r8,sp,-1352
8000b50c:	1a d8       	st.w	--sp,r8
8000b50e:	fa c8 fb b4 	sub	r8,sp,-1100
8000b512:	1a d8       	st.w	--sp,r8
8000b514:	fa c8 f9 40 	sub	r8,sp,-1728
8000b518:	fa c9 ff b4 	sub	r9,sp,-76
8000b51c:	04 9a       	mov	r10,r2
8000b51e:	0c 9b       	mov	r11,r6
8000b520:	0a 9c       	mov	r12,r5
8000b522:	fe b0 f7 33 	rcall	8000a388 <get_arg>
8000b526:	2f dd       	sub	sp,-12
8000b528:	98 18       	ld.sh	r8,r12[0x2]
8000b52a:	c2 68       	rjmp	8000b576 <_vfprintf_r+0xeb6>
8000b52c:	ee ca ff ff 	sub	r10,r7,-1
8000b530:	10 37       	cp.w	r7,r8
8000b532:	c0 94       	brge	8000b544 <_vfprintf_r+0xe84>
8000b534:	fa c9 f9 44 	sub	r9,sp,-1724
8000b538:	14 97       	mov	r7,r10
8000b53a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b53e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000b542:	c1 a8       	rjmp	8000b576 <_vfprintf_r+0xeb6>
8000b544:	41 09       	lddsp	r9,sp[0x40]
8000b546:	59 f8       	cp.w	r8,31
8000b548:	e0 89 00 13 	brgt	8000b56e <_vfprintf_r+0xeae>
8000b54c:	f2 cb ff fc 	sub	r11,r9,-4
8000b550:	51 0b       	stdsp	sp[0x40],r11
8000b552:	72 09       	ld.w	r9,r9[0x0]
8000b554:	fa c6 f9 44 	sub	r6,sp,-1724
8000b558:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000b55c:	2f f8       	sub	r8,-1
8000b55e:	f7 49 fd 88 	st.w	r11[-632],r9
8000b562:	fb 48 06 b4 	st.w	sp[1716],r8
8000b566:	14 97       	mov	r7,r10
8000b568:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000b56c:	c0 58       	rjmp	8000b576 <_vfprintf_r+0xeb6>
8000b56e:	92 18       	ld.sh	r8,r9[0x2]
8000b570:	14 97       	mov	r7,r10
8000b572:	2f c9       	sub	r9,-4
8000b574:	51 09       	stdsp	sp[0x40],r9
8000b576:	5c 78       	castu.h	r8
8000b578:	50 18       	stdsp	sp[0x4],r8
8000b57a:	c4 68       	rjmp	8000b606 <_vfprintf_r+0xf46>
8000b57c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b580:	40 3c       	lddsp	r12,sp[0xc]
8000b582:	58 0c       	cp.w	r12,0
8000b584:	c1 d0       	breq	8000b5be <_vfprintf_r+0xefe>
8000b586:	10 36       	cp.w	r6,r8
8000b588:	c0 64       	brge	8000b594 <_vfprintf_r+0xed4>
8000b58a:	fa cb f9 44 	sub	r11,sp,-1724
8000b58e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b592:	c1 f8       	rjmp	8000b5d0 <_vfprintf_r+0xf10>
8000b594:	fa c8 f9 50 	sub	r8,sp,-1712
8000b598:	1a d8       	st.w	--sp,r8
8000b59a:	fa c8 fa b8 	sub	r8,sp,-1352
8000b59e:	0c 9b       	mov	r11,r6
8000b5a0:	1a d8       	st.w	--sp,r8
8000b5a2:	fa c8 fb b4 	sub	r8,sp,-1100
8000b5a6:	04 9a       	mov	r10,r2
8000b5a8:	1a d8       	st.w	--sp,r8
8000b5aa:	0a 9c       	mov	r12,r5
8000b5ac:	fa c8 f9 40 	sub	r8,sp,-1728
8000b5b0:	fa c9 ff b4 	sub	r9,sp,-76
8000b5b4:	fe b0 f6 ea 	rcall	8000a388 <get_arg>
8000b5b8:	2f dd       	sub	sp,-12
8000b5ba:	78 0b       	ld.w	r11,r12[0x0]
8000b5bc:	c2 48       	rjmp	8000b604 <_vfprintf_r+0xf44>
8000b5be:	ee ca ff ff 	sub	r10,r7,-1
8000b5c2:	10 37       	cp.w	r7,r8
8000b5c4:	c0 94       	brge	8000b5d6 <_vfprintf_r+0xf16>
8000b5c6:	fa c9 f9 44 	sub	r9,sp,-1724
8000b5ca:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b5ce:	14 97       	mov	r7,r10
8000b5d0:	ec fb fd 88 	ld.w	r11,r6[-632]
8000b5d4:	c1 88       	rjmp	8000b604 <_vfprintf_r+0xf44>
8000b5d6:	41 09       	lddsp	r9,sp[0x40]
8000b5d8:	59 f8       	cp.w	r8,31
8000b5da:	e0 89 00 11 	brgt	8000b5fc <_vfprintf_r+0xf3c>
8000b5de:	f2 cb ff fc 	sub	r11,r9,-4
8000b5e2:	51 0b       	stdsp	sp[0x40],r11
8000b5e4:	fa c6 f9 44 	sub	r6,sp,-1724
8000b5e8:	72 0b       	ld.w	r11,r9[0x0]
8000b5ea:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b5ee:	f3 4b fd 88 	st.w	r9[-632],r11
8000b5f2:	2f f8       	sub	r8,-1
8000b5f4:	14 97       	mov	r7,r10
8000b5f6:	fb 48 06 b4 	st.w	sp[1716],r8
8000b5fa:	c0 58       	rjmp	8000b604 <_vfprintf_r+0xf44>
8000b5fc:	72 0b       	ld.w	r11,r9[0x0]
8000b5fe:	14 97       	mov	r7,r10
8000b600:	2f c9       	sub	r9,-4
8000b602:	51 09       	stdsp	sp[0x40],r9
8000b604:	50 1b       	stdsp	sp[0x4],r11
8000b606:	30 0e       	mov	lr,0
8000b608:	50 0e       	stdsp	sp[0x0],lr
8000b60a:	1c 98       	mov	r8,lr
8000b60c:	e0 8f 02 fb 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b610:	50 a7       	stdsp	sp[0x28],r7
8000b612:	50 80       	stdsp	sp[0x20],r0
8000b614:	0c 97       	mov	r7,r6
8000b616:	04 95       	mov	r5,r2
8000b618:	08 96       	mov	r6,r4
8000b61a:	02 92       	mov	r2,r1
8000b61c:	40 94       	lddsp	r4,sp[0x24]
8000b61e:	40 41       	lddsp	r1,sp[0x10]
8000b620:	0e 99       	mov	r9,r7
8000b622:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b626:	40 3c       	lddsp	r12,sp[0xc]
8000b628:	58 0c       	cp.w	r12,0
8000b62a:	c1 d0       	breq	8000b664 <_vfprintf_r+0xfa4>
8000b62c:	10 36       	cp.w	r6,r8
8000b62e:	c0 64       	brge	8000b63a <_vfprintf_r+0xf7a>
8000b630:	fa cb f9 44 	sub	r11,sp,-1724
8000b634:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b638:	c1 d8       	rjmp	8000b672 <_vfprintf_r+0xfb2>
8000b63a:	fa c8 f9 50 	sub	r8,sp,-1712
8000b63e:	1a d8       	st.w	--sp,r8
8000b640:	fa c8 fa b8 	sub	r8,sp,-1352
8000b644:	1a d8       	st.w	--sp,r8
8000b646:	fa c8 fb b4 	sub	r8,sp,-1100
8000b64a:	1a d8       	st.w	--sp,r8
8000b64c:	fa c9 ff b4 	sub	r9,sp,-76
8000b650:	fa c8 f9 40 	sub	r8,sp,-1728
8000b654:	04 9a       	mov	r10,r2
8000b656:	0c 9b       	mov	r11,r6
8000b658:	0a 9c       	mov	r12,r5
8000b65a:	fe b0 f6 97 	rcall	8000a388 <get_arg>
8000b65e:	2f dd       	sub	sp,-12
8000b660:	78 09       	ld.w	r9,r12[0x0]
8000b662:	c2 18       	rjmp	8000b6a4 <_vfprintf_r+0xfe4>
8000b664:	2f f7       	sub	r7,-1
8000b666:	10 39       	cp.w	r9,r8
8000b668:	c0 84       	brge	8000b678 <_vfprintf_r+0xfb8>
8000b66a:	fa ca f9 44 	sub	r10,sp,-1724
8000b66e:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b672:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000b676:	c1 78       	rjmp	8000b6a4 <_vfprintf_r+0xfe4>
8000b678:	41 09       	lddsp	r9,sp[0x40]
8000b67a:	59 f8       	cp.w	r8,31
8000b67c:	e0 89 00 10 	brgt	8000b69c <_vfprintf_r+0xfdc>
8000b680:	f2 ca ff fc 	sub	r10,r9,-4
8000b684:	51 0a       	stdsp	sp[0x40],r10
8000b686:	fa c6 f9 44 	sub	r6,sp,-1724
8000b68a:	72 09       	ld.w	r9,r9[0x0]
8000b68c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000b690:	f5 49 fd 88 	st.w	r10[-632],r9
8000b694:	2f f8       	sub	r8,-1
8000b696:	fb 48 06 b4 	st.w	sp[1716],r8
8000b69a:	c0 58       	rjmp	8000b6a4 <_vfprintf_r+0xfe4>
8000b69c:	f2 c8 ff fc 	sub	r8,r9,-4
8000b6a0:	51 08       	stdsp	sp[0x40],r8
8000b6a2:	72 09       	ld.w	r9,r9[0x0]
8000b6a4:	33 08       	mov	r8,48
8000b6a6:	fb 68 06 b8 	st.b	sp[1720],r8
8000b6aa:	37 88       	mov	r8,120
8000b6ac:	30 0e       	mov	lr,0
8000b6ae:	fb 68 06 b9 	st.b	sp[1721],r8
8000b6b2:	4c ac       	lddpc	r12,8000b7d8 <_vfprintf_r+0x1118>
8000b6b4:	50 19       	stdsp	sp[0x4],r9
8000b6b6:	a1 b3       	sbr	r3,0x1
8000b6b8:	50 0e       	stdsp	sp[0x0],lr
8000b6ba:	50 dc       	stdsp	sp[0x34],r12
8000b6bc:	30 28       	mov	r8,2
8000b6be:	37 80       	mov	r0,120
8000b6c0:	e0 8f 02 a1 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b6c4:	50 a7       	stdsp	sp[0x28],r7
8000b6c6:	50 80       	stdsp	sp[0x20],r0
8000b6c8:	10 90       	mov	r0,r8
8000b6ca:	30 08       	mov	r8,0
8000b6cc:	fb 68 06 bb 	st.b	sp[1723],r8
8000b6d0:	0c 97       	mov	r7,r6
8000b6d2:	04 95       	mov	r5,r2
8000b6d4:	08 96       	mov	r6,r4
8000b6d6:	02 92       	mov	r2,r1
8000b6d8:	40 94       	lddsp	r4,sp[0x24]
8000b6da:	40 41       	lddsp	r1,sp[0x10]
8000b6dc:	0e 99       	mov	r9,r7
8000b6de:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b6e2:	40 3b       	lddsp	r11,sp[0xc]
8000b6e4:	58 0b       	cp.w	r11,0
8000b6e6:	c1 d0       	breq	8000b720 <_vfprintf_r+0x1060>
8000b6e8:	10 36       	cp.w	r6,r8
8000b6ea:	c0 64       	brge	8000b6f6 <_vfprintf_r+0x1036>
8000b6ec:	fa ca f9 44 	sub	r10,sp,-1724
8000b6f0:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b6f4:	c1 d8       	rjmp	8000b72e <_vfprintf_r+0x106e>
8000b6f6:	fa c8 f9 50 	sub	r8,sp,-1712
8000b6fa:	1a d8       	st.w	--sp,r8
8000b6fc:	fa c8 fa b8 	sub	r8,sp,-1352
8000b700:	1a d8       	st.w	--sp,r8
8000b702:	fa c8 fb b4 	sub	r8,sp,-1100
8000b706:	0c 9b       	mov	r11,r6
8000b708:	1a d8       	st.w	--sp,r8
8000b70a:	04 9a       	mov	r10,r2
8000b70c:	fa c8 f9 40 	sub	r8,sp,-1728
8000b710:	fa c9 ff b4 	sub	r9,sp,-76
8000b714:	0a 9c       	mov	r12,r5
8000b716:	fe b0 f6 39 	rcall	8000a388 <get_arg>
8000b71a:	2f dd       	sub	sp,-12
8000b71c:	78 06       	ld.w	r6,r12[0x0]
8000b71e:	c2 08       	rjmp	8000b75e <_vfprintf_r+0x109e>
8000b720:	2f f7       	sub	r7,-1
8000b722:	10 39       	cp.w	r9,r8
8000b724:	c0 84       	brge	8000b734 <_vfprintf_r+0x1074>
8000b726:	fa c9 f9 44 	sub	r9,sp,-1724
8000b72a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b72e:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000b732:	c1 68       	rjmp	8000b75e <_vfprintf_r+0x109e>
8000b734:	41 09       	lddsp	r9,sp[0x40]
8000b736:	59 f8       	cp.w	r8,31
8000b738:	e0 89 00 10 	brgt	8000b758 <_vfprintf_r+0x1098>
8000b73c:	f2 ca ff fc 	sub	r10,r9,-4
8000b740:	51 0a       	stdsp	sp[0x40],r10
8000b742:	72 06       	ld.w	r6,r9[0x0]
8000b744:	fa ce f9 44 	sub	lr,sp,-1724
8000b748:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000b74c:	f3 46 fd 88 	st.w	r9[-632],r6
8000b750:	2f f8       	sub	r8,-1
8000b752:	fb 48 06 b4 	st.w	sp[1716],r8
8000b756:	c0 48       	rjmp	8000b75e <_vfprintf_r+0x109e>
8000b758:	72 06       	ld.w	r6,r9[0x0]
8000b75a:	2f c9       	sub	r9,-4
8000b75c:	51 09       	stdsp	sp[0x40],r9
8000b75e:	40 2c       	lddsp	r12,sp[0x8]
8000b760:	58 0c       	cp.w	r12,0
8000b762:	c1 05       	brlt	8000b782 <_vfprintf_r+0x10c2>
8000b764:	18 9a       	mov	r10,r12
8000b766:	30 0b       	mov	r11,0
8000b768:	0c 9c       	mov	r12,r6
8000b76a:	e0 a0 1f e7 	rcall	8000f738 <memchr>
8000b76e:	e0 80 02 dd 	breq	8000bd28 <_vfprintf_r+0x1668>
8000b772:	f8 06 01 02 	sub	r2,r12,r6
8000b776:	40 2b       	lddsp	r11,sp[0x8]
8000b778:	16 32       	cp.w	r2,r11
8000b77a:	e0 89 02 d7 	brgt	8000bd28 <_vfprintf_r+0x1668>
8000b77e:	e0 8f 02 d2 	bral	8000bd22 <_vfprintf_r+0x1662>
8000b782:	30 0a       	mov	r10,0
8000b784:	0c 9c       	mov	r12,r6
8000b786:	50 2a       	stdsp	sp[0x8],r10
8000b788:	fe b0 f5 f4 	rcall	8000a370 <strlen>
8000b78c:	18 92       	mov	r2,r12
8000b78e:	e0 8f 02 d0 	bral	8000bd2e <_vfprintf_r+0x166e>
8000b792:	50 a7       	stdsp	sp[0x28],r7
8000b794:	50 80       	stdsp	sp[0x20],r0
8000b796:	0c 97       	mov	r7,r6
8000b798:	04 95       	mov	r5,r2
8000b79a:	08 96       	mov	r6,r4
8000b79c:	02 92       	mov	r2,r1
8000b79e:	40 94       	lddsp	r4,sp[0x24]
8000b7a0:	10 90       	mov	r0,r8
8000b7a2:	40 41       	lddsp	r1,sp[0x10]
8000b7a4:	a5 a3       	sbr	r3,0x4
8000b7a6:	c0 a8       	rjmp	8000b7ba <_vfprintf_r+0x10fa>
8000b7a8:	50 a7       	stdsp	sp[0x28],r7
8000b7aa:	50 80       	stdsp	sp[0x20],r0
8000b7ac:	0c 97       	mov	r7,r6
8000b7ae:	04 95       	mov	r5,r2
8000b7b0:	08 96       	mov	r6,r4
8000b7b2:	02 92       	mov	r2,r1
8000b7b4:	40 94       	lddsp	r4,sp[0x24]
8000b7b6:	10 90       	mov	r0,r8
8000b7b8:	40 41       	lddsp	r1,sp[0x10]
8000b7ba:	ed b3 00 05 	bld	r3,0x5
8000b7be:	c5 71       	brne	8000b86c <_vfprintf_r+0x11ac>
8000b7c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b7c4:	40 39       	lddsp	r9,sp[0xc]
8000b7c6:	58 09       	cp.w	r9,0
8000b7c8:	c2 20       	breq	8000b80c <_vfprintf_r+0x114c>
8000b7ca:	10 36       	cp.w	r6,r8
8000b7cc:	c0 84       	brge	8000b7dc <_vfprintf_r+0x111c>
8000b7ce:	fa c8 f9 44 	sub	r8,sp,-1724
8000b7d2:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000b7d6:	c2 48       	rjmp	8000b81e <_vfprintf_r+0x115e>
8000b7d8:	80 01       	ld.sh	r1,r0[0x0]
8000b7da:	41 0c       	lddsp	r12,sp[0x40]
8000b7dc:	fa c8 f9 50 	sub	r8,sp,-1712
8000b7e0:	1a d8       	st.w	--sp,r8
8000b7e2:	fa c8 fa b8 	sub	r8,sp,-1352
8000b7e6:	1a d8       	st.w	--sp,r8
8000b7e8:	fa c8 fb b4 	sub	r8,sp,-1100
8000b7ec:	1a d8       	st.w	--sp,r8
8000b7ee:	fa c8 f9 40 	sub	r8,sp,-1728
8000b7f2:	fa c9 ff b4 	sub	r9,sp,-76
8000b7f6:	04 9a       	mov	r10,r2
8000b7f8:	0c 9b       	mov	r11,r6
8000b7fa:	0a 9c       	mov	r12,r5
8000b7fc:	fe b0 f5 c6 	rcall	8000a388 <get_arg>
8000b800:	2f dd       	sub	sp,-12
8000b802:	f8 e8 00 00 	ld.d	r8,r12[0]
8000b806:	fa e9 00 00 	st.d	sp[0],r8
8000b80a:	c2 e8       	rjmp	8000b866 <_vfprintf_r+0x11a6>
8000b80c:	ee ca ff ff 	sub	r10,r7,-1
8000b810:	10 37       	cp.w	r7,r8
8000b812:	c0 b4       	brge	8000b828 <_vfprintf_r+0x1168>
8000b814:	fa c8 f9 44 	sub	r8,sp,-1724
8000b818:	14 97       	mov	r7,r10
8000b81a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000b81e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000b822:	fa eb 00 00 	st.d	sp[0],r10
8000b826:	c2 08       	rjmp	8000b866 <_vfprintf_r+0x11a6>
8000b828:	41 09       	lddsp	r9,sp[0x40]
8000b82a:	59 f8       	cp.w	r8,31
8000b82c:	e0 89 00 16 	brgt	8000b858 <_vfprintf_r+0x1198>
8000b830:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b834:	f2 cb ff f8 	sub	r11,r9,-8
8000b838:	fa e7 00 00 	st.d	sp[0],r6
8000b83c:	51 0b       	stdsp	sp[0x40],r11
8000b83e:	fa c6 f9 44 	sub	r6,sp,-1724
8000b842:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b846:	fa e6 00 00 	ld.d	r6,sp[0]
8000b84a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000b84e:	2f f8       	sub	r8,-1
8000b850:	14 97       	mov	r7,r10
8000b852:	fb 48 06 b4 	st.w	sp[1716],r8
8000b856:	c0 88       	rjmp	8000b866 <_vfprintf_r+0x11a6>
8000b858:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b85c:	2f 89       	sub	r9,-8
8000b85e:	fa e7 00 00 	st.d	sp[0],r6
8000b862:	51 09       	stdsp	sp[0x40],r9
8000b864:	14 97       	mov	r7,r10
8000b866:	30 18       	mov	r8,1
8000b868:	e0 8f 01 cd 	bral	8000bc02 <_vfprintf_r+0x1542>
8000b86c:	ed b3 00 04 	bld	r3,0x4
8000b870:	c1 61       	brne	8000b89c <_vfprintf_r+0x11dc>
8000b872:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b876:	40 3e       	lddsp	lr,sp[0xc]
8000b878:	58 0e       	cp.w	lr,0
8000b87a:	c0 80       	breq	8000b88a <_vfprintf_r+0x11ca>
8000b87c:	10 36       	cp.w	r6,r8
8000b87e:	c6 74       	brge	8000b94c <_vfprintf_r+0x128c>
8000b880:	fa cc f9 44 	sub	r12,sp,-1724
8000b884:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b888:	c8 08       	rjmp	8000b988 <_vfprintf_r+0x12c8>
8000b88a:	ee ca ff ff 	sub	r10,r7,-1
8000b88e:	10 37       	cp.w	r7,r8
8000b890:	c7 f4       	brge	8000b98e <_vfprintf_r+0x12ce>
8000b892:	fa cb f9 44 	sub	r11,sp,-1724
8000b896:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b89a:	c7 68       	rjmp	8000b986 <_vfprintf_r+0x12c6>
8000b89c:	ed b3 00 06 	bld	r3,0x6
8000b8a0:	c4 a1       	brne	8000b934 <_vfprintf_r+0x1274>
8000b8a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b8a6:	40 3c       	lddsp	r12,sp[0xc]
8000b8a8:	58 0c       	cp.w	r12,0
8000b8aa:	c1 d0       	breq	8000b8e4 <_vfprintf_r+0x1224>
8000b8ac:	10 36       	cp.w	r6,r8
8000b8ae:	c0 64       	brge	8000b8ba <_vfprintf_r+0x11fa>
8000b8b0:	fa cb f9 44 	sub	r11,sp,-1724
8000b8b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b8b8:	c1 f8       	rjmp	8000b8f6 <_vfprintf_r+0x1236>
8000b8ba:	fa c8 f9 50 	sub	r8,sp,-1712
8000b8be:	1a d8       	st.w	--sp,r8
8000b8c0:	fa c8 fa b8 	sub	r8,sp,-1352
8000b8c4:	1a d8       	st.w	--sp,r8
8000b8c6:	fa c8 fb b4 	sub	r8,sp,-1100
8000b8ca:	1a d8       	st.w	--sp,r8
8000b8cc:	fa c8 f9 40 	sub	r8,sp,-1728
8000b8d0:	fa c9 ff b4 	sub	r9,sp,-76
8000b8d4:	04 9a       	mov	r10,r2
8000b8d6:	0c 9b       	mov	r11,r6
8000b8d8:	0a 9c       	mov	r12,r5
8000b8da:	fe b0 f5 57 	rcall	8000a388 <get_arg>
8000b8de:	2f dd       	sub	sp,-12
8000b8e0:	98 18       	ld.sh	r8,r12[0x2]
8000b8e2:	c2 68       	rjmp	8000b92e <_vfprintf_r+0x126e>
8000b8e4:	ee ca ff ff 	sub	r10,r7,-1
8000b8e8:	10 37       	cp.w	r7,r8
8000b8ea:	c0 94       	brge	8000b8fc <_vfprintf_r+0x123c>
8000b8ec:	fa c9 f9 44 	sub	r9,sp,-1724
8000b8f0:	14 97       	mov	r7,r10
8000b8f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b8f6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000b8fa:	c1 a8       	rjmp	8000b92e <_vfprintf_r+0x126e>
8000b8fc:	41 09       	lddsp	r9,sp[0x40]
8000b8fe:	59 f8       	cp.w	r8,31
8000b900:	e0 89 00 13 	brgt	8000b926 <_vfprintf_r+0x1266>
8000b904:	f2 cb ff fc 	sub	r11,r9,-4
8000b908:	51 0b       	stdsp	sp[0x40],r11
8000b90a:	72 09       	ld.w	r9,r9[0x0]
8000b90c:	fa c6 f9 44 	sub	r6,sp,-1724
8000b910:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000b914:	2f f8       	sub	r8,-1
8000b916:	f7 49 fd 88 	st.w	r11[-632],r9
8000b91a:	fb 48 06 b4 	st.w	sp[1716],r8
8000b91e:	14 97       	mov	r7,r10
8000b920:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000b924:	c0 58       	rjmp	8000b92e <_vfprintf_r+0x126e>
8000b926:	92 18       	ld.sh	r8,r9[0x2]
8000b928:	14 97       	mov	r7,r10
8000b92a:	2f c9       	sub	r9,-4
8000b92c:	51 09       	stdsp	sp[0x40],r9
8000b92e:	5c 78       	castu.h	r8
8000b930:	50 18       	stdsp	sp[0x4],r8
8000b932:	c4 68       	rjmp	8000b9be <_vfprintf_r+0x12fe>
8000b934:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b938:	40 3c       	lddsp	r12,sp[0xc]
8000b93a:	58 0c       	cp.w	r12,0
8000b93c:	c1 d0       	breq	8000b976 <_vfprintf_r+0x12b6>
8000b93e:	10 36       	cp.w	r6,r8
8000b940:	c0 64       	brge	8000b94c <_vfprintf_r+0x128c>
8000b942:	fa cb f9 44 	sub	r11,sp,-1724
8000b946:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b94a:	c1 f8       	rjmp	8000b988 <_vfprintf_r+0x12c8>
8000b94c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b950:	1a d8       	st.w	--sp,r8
8000b952:	fa c8 fa b8 	sub	r8,sp,-1352
8000b956:	0c 9b       	mov	r11,r6
8000b958:	1a d8       	st.w	--sp,r8
8000b95a:	fa c8 fb b4 	sub	r8,sp,-1100
8000b95e:	04 9a       	mov	r10,r2
8000b960:	1a d8       	st.w	--sp,r8
8000b962:	0a 9c       	mov	r12,r5
8000b964:	fa c8 f9 40 	sub	r8,sp,-1728
8000b968:	fa c9 ff b4 	sub	r9,sp,-76
8000b96c:	fe b0 f5 0e 	rcall	8000a388 <get_arg>
8000b970:	2f dd       	sub	sp,-12
8000b972:	78 0b       	ld.w	r11,r12[0x0]
8000b974:	c2 48       	rjmp	8000b9bc <_vfprintf_r+0x12fc>
8000b976:	ee ca ff ff 	sub	r10,r7,-1
8000b97a:	10 37       	cp.w	r7,r8
8000b97c:	c0 94       	brge	8000b98e <_vfprintf_r+0x12ce>
8000b97e:	fa c9 f9 44 	sub	r9,sp,-1724
8000b982:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b986:	14 97       	mov	r7,r10
8000b988:	ec fb fd 88 	ld.w	r11,r6[-632]
8000b98c:	c1 88       	rjmp	8000b9bc <_vfprintf_r+0x12fc>
8000b98e:	41 09       	lddsp	r9,sp[0x40]
8000b990:	59 f8       	cp.w	r8,31
8000b992:	e0 89 00 11 	brgt	8000b9b4 <_vfprintf_r+0x12f4>
8000b996:	f2 cb ff fc 	sub	r11,r9,-4
8000b99a:	51 0b       	stdsp	sp[0x40],r11
8000b99c:	fa c6 f9 44 	sub	r6,sp,-1724
8000b9a0:	72 0b       	ld.w	r11,r9[0x0]
8000b9a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b9a6:	f3 4b fd 88 	st.w	r9[-632],r11
8000b9aa:	2f f8       	sub	r8,-1
8000b9ac:	14 97       	mov	r7,r10
8000b9ae:	fb 48 06 b4 	st.w	sp[1716],r8
8000b9b2:	c0 58       	rjmp	8000b9bc <_vfprintf_r+0x12fc>
8000b9b4:	72 0b       	ld.w	r11,r9[0x0]
8000b9b6:	14 97       	mov	r7,r10
8000b9b8:	2f c9       	sub	r9,-4
8000b9ba:	51 09       	stdsp	sp[0x40],r9
8000b9bc:	50 1b       	stdsp	sp[0x4],r11
8000b9be:	30 0e       	mov	lr,0
8000b9c0:	30 18       	mov	r8,1
8000b9c2:	50 0e       	stdsp	sp[0x0],lr
8000b9c4:	c1 f9       	rjmp	8000bc02 <_vfprintf_r+0x1542>
8000b9c6:	50 a7       	stdsp	sp[0x28],r7
8000b9c8:	50 80       	stdsp	sp[0x20],r0
8000b9ca:	0c 97       	mov	r7,r6
8000b9cc:	04 95       	mov	r5,r2
8000b9ce:	08 96       	mov	r6,r4
8000b9d0:	02 92       	mov	r2,r1
8000b9d2:	4d 3c       	lddpc	r12,8000bb1c <_vfprintf_r+0x145c>
8000b9d4:	40 94       	lddsp	r4,sp[0x24]
8000b9d6:	10 90       	mov	r0,r8
8000b9d8:	40 41       	lddsp	r1,sp[0x10]
8000b9da:	50 dc       	stdsp	sp[0x34],r12
8000b9dc:	ed b3 00 05 	bld	r3,0x5
8000b9e0:	c5 51       	brne	8000ba8a <_vfprintf_r+0x13ca>
8000b9e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b9e6:	40 3b       	lddsp	r11,sp[0xc]
8000b9e8:	58 0b       	cp.w	r11,0
8000b9ea:	c2 20       	breq	8000ba2e <_vfprintf_r+0x136e>
8000b9ec:	10 36       	cp.w	r6,r8
8000b9ee:	c0 a4       	brge	8000ba02 <_vfprintf_r+0x1342>
8000b9f0:	fa ca f9 44 	sub	r10,sp,-1724
8000b9f4:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b9f8:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000b9fc:	fa e9 00 00 	st.d	sp[0],r8
8000ba00:	cf 38       	rjmp	8000bbe6 <_vfprintf_r+0x1526>
8000ba02:	fa c8 f9 50 	sub	r8,sp,-1712
8000ba06:	1a d8       	st.w	--sp,r8
8000ba08:	fa c8 fa b8 	sub	r8,sp,-1352
8000ba0c:	04 9a       	mov	r10,r2
8000ba0e:	1a d8       	st.w	--sp,r8
8000ba10:	0c 9b       	mov	r11,r6
8000ba12:	fa c8 fb b4 	sub	r8,sp,-1100
8000ba16:	0a 9c       	mov	r12,r5
8000ba18:	1a d8       	st.w	--sp,r8
8000ba1a:	fa c8 f9 40 	sub	r8,sp,-1728
8000ba1e:	fa c9 ff b4 	sub	r9,sp,-76
8000ba22:	fe b0 f4 b3 	rcall	8000a388 <get_arg>
8000ba26:	2f dd       	sub	sp,-12
8000ba28:	f8 ea 00 00 	ld.d	r10,r12[0]
8000ba2c:	c0 c8       	rjmp	8000ba44 <_vfprintf_r+0x1384>
8000ba2e:	ee ca ff ff 	sub	r10,r7,-1
8000ba32:	10 37       	cp.w	r7,r8
8000ba34:	c0 b4       	brge	8000ba4a <_vfprintf_r+0x138a>
8000ba36:	fa c9 f9 44 	sub	r9,sp,-1724
8000ba3a:	14 97       	mov	r7,r10
8000ba3c:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ba40:	ec ea fd 88 	ld.d	r10,r6[-632]
8000ba44:	fa eb 00 00 	st.d	sp[0],r10
8000ba48:	cc f8       	rjmp	8000bbe6 <_vfprintf_r+0x1526>
8000ba4a:	41 09       	lddsp	r9,sp[0x40]
8000ba4c:	59 f8       	cp.w	r8,31
8000ba4e:	e0 89 00 16 	brgt	8000ba7a <_vfprintf_r+0x13ba>
8000ba52:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ba56:	f2 cb ff f8 	sub	r11,r9,-8
8000ba5a:	fa e7 00 00 	st.d	sp[0],r6
8000ba5e:	51 0b       	stdsp	sp[0x40],r11
8000ba60:	fa c6 f9 44 	sub	r6,sp,-1724
8000ba64:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ba68:	fa e6 00 00 	ld.d	r6,sp[0]
8000ba6c:	f2 e7 fd 88 	st.d	r9[-632],r6
8000ba70:	2f f8       	sub	r8,-1
8000ba72:	14 97       	mov	r7,r10
8000ba74:	fb 48 06 b4 	st.w	sp[1716],r8
8000ba78:	cb 78       	rjmp	8000bbe6 <_vfprintf_r+0x1526>
8000ba7a:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ba7e:	2f 89       	sub	r9,-8
8000ba80:	fa e7 00 00 	st.d	sp[0],r6
8000ba84:	51 09       	stdsp	sp[0x40],r9
8000ba86:	14 97       	mov	r7,r10
8000ba88:	ca f8       	rjmp	8000bbe6 <_vfprintf_r+0x1526>
8000ba8a:	ed b3 00 04 	bld	r3,0x4
8000ba8e:	c1 71       	brne	8000babc <_vfprintf_r+0x13fc>
8000ba90:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ba94:	40 3e       	lddsp	lr,sp[0xc]
8000ba96:	58 0e       	cp.w	lr,0
8000ba98:	c0 80       	breq	8000baa8 <_vfprintf_r+0x13e8>
8000ba9a:	10 36       	cp.w	r6,r8
8000ba9c:	c6 a4       	brge	8000bb70 <_vfprintf_r+0x14b0>
8000ba9e:	fa cc f9 44 	sub	r12,sp,-1724
8000baa2:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000baa6:	c8 38       	rjmp	8000bbac <_vfprintf_r+0x14ec>
8000baa8:	ee ca ff ff 	sub	r10,r7,-1
8000baac:	10 37       	cp.w	r7,r8
8000baae:	e0 84 00 82 	brge	8000bbb2 <_vfprintf_r+0x14f2>
8000bab2:	fa cb f9 44 	sub	r11,sp,-1724
8000bab6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000baba:	c7 88       	rjmp	8000bbaa <_vfprintf_r+0x14ea>
8000babc:	ed b3 00 06 	bld	r3,0x6
8000bac0:	c4 c1       	brne	8000bb58 <_vfprintf_r+0x1498>
8000bac2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bac6:	40 3c       	lddsp	r12,sp[0xc]
8000bac8:	58 0c       	cp.w	r12,0
8000baca:	c1 d0       	breq	8000bb04 <_vfprintf_r+0x1444>
8000bacc:	10 36       	cp.w	r6,r8
8000bace:	c0 64       	brge	8000bada <_vfprintf_r+0x141a>
8000bad0:	fa cb f9 44 	sub	r11,sp,-1724
8000bad4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bad8:	c1 f8       	rjmp	8000bb16 <_vfprintf_r+0x1456>
8000bada:	fa c8 f9 50 	sub	r8,sp,-1712
8000bade:	1a d8       	st.w	--sp,r8
8000bae0:	fa c8 fa b8 	sub	r8,sp,-1352
8000bae4:	1a d8       	st.w	--sp,r8
8000bae6:	fa c8 fb b4 	sub	r8,sp,-1100
8000baea:	1a d8       	st.w	--sp,r8
8000baec:	fa c8 f9 40 	sub	r8,sp,-1728
8000baf0:	fa c9 ff b4 	sub	r9,sp,-76
8000baf4:	04 9a       	mov	r10,r2
8000baf6:	0c 9b       	mov	r11,r6
8000baf8:	0a 9c       	mov	r12,r5
8000bafa:	fe b0 f4 47 	rcall	8000a388 <get_arg>
8000bafe:	2f dd       	sub	sp,-12
8000bb00:	98 18       	ld.sh	r8,r12[0x2]
8000bb02:	c2 88       	rjmp	8000bb52 <_vfprintf_r+0x1492>
8000bb04:	ee ca ff ff 	sub	r10,r7,-1
8000bb08:	10 37       	cp.w	r7,r8
8000bb0a:	c0 b4       	brge	8000bb20 <_vfprintf_r+0x1460>
8000bb0c:	fa c9 f9 44 	sub	r9,sp,-1724
8000bb10:	14 97       	mov	r7,r10
8000bb12:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bb16:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000bb1a:	c1 c8       	rjmp	8000bb52 <_vfprintf_r+0x1492>
8000bb1c:	80 01       	ld.sh	r1,r0[0x0]
8000bb1e:	41 0c       	lddsp	r12,sp[0x40]
8000bb20:	41 09       	lddsp	r9,sp[0x40]
8000bb22:	59 f8       	cp.w	r8,31
8000bb24:	e0 89 00 13 	brgt	8000bb4a <_vfprintf_r+0x148a>
8000bb28:	f2 cb ff fc 	sub	r11,r9,-4
8000bb2c:	51 0b       	stdsp	sp[0x40],r11
8000bb2e:	72 09       	ld.w	r9,r9[0x0]
8000bb30:	fa c6 f9 44 	sub	r6,sp,-1724
8000bb34:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000bb38:	2f f8       	sub	r8,-1
8000bb3a:	f7 49 fd 88 	st.w	r11[-632],r9
8000bb3e:	fb 48 06 b4 	st.w	sp[1716],r8
8000bb42:	14 97       	mov	r7,r10
8000bb44:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000bb48:	c0 58       	rjmp	8000bb52 <_vfprintf_r+0x1492>
8000bb4a:	92 18       	ld.sh	r8,r9[0x2]
8000bb4c:	14 97       	mov	r7,r10
8000bb4e:	2f c9       	sub	r9,-4
8000bb50:	51 09       	stdsp	sp[0x40],r9
8000bb52:	5c 78       	castu.h	r8
8000bb54:	50 18       	stdsp	sp[0x4],r8
8000bb56:	c4 68       	rjmp	8000bbe2 <_vfprintf_r+0x1522>
8000bb58:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bb5c:	40 3c       	lddsp	r12,sp[0xc]
8000bb5e:	58 0c       	cp.w	r12,0
8000bb60:	c1 d0       	breq	8000bb9a <_vfprintf_r+0x14da>
8000bb62:	10 36       	cp.w	r6,r8
8000bb64:	c0 64       	brge	8000bb70 <_vfprintf_r+0x14b0>
8000bb66:	fa cb f9 44 	sub	r11,sp,-1724
8000bb6a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bb6e:	c1 f8       	rjmp	8000bbac <_vfprintf_r+0x14ec>
8000bb70:	fa c8 f9 50 	sub	r8,sp,-1712
8000bb74:	1a d8       	st.w	--sp,r8
8000bb76:	fa c8 fa b8 	sub	r8,sp,-1352
8000bb7a:	0c 9b       	mov	r11,r6
8000bb7c:	1a d8       	st.w	--sp,r8
8000bb7e:	fa c8 fb b4 	sub	r8,sp,-1100
8000bb82:	04 9a       	mov	r10,r2
8000bb84:	1a d8       	st.w	--sp,r8
8000bb86:	0a 9c       	mov	r12,r5
8000bb88:	fa c8 f9 40 	sub	r8,sp,-1728
8000bb8c:	fa c9 ff b4 	sub	r9,sp,-76
8000bb90:	fe b0 f3 fc 	rcall	8000a388 <get_arg>
8000bb94:	2f dd       	sub	sp,-12
8000bb96:	78 0b       	ld.w	r11,r12[0x0]
8000bb98:	c2 48       	rjmp	8000bbe0 <_vfprintf_r+0x1520>
8000bb9a:	ee ca ff ff 	sub	r10,r7,-1
8000bb9e:	10 37       	cp.w	r7,r8
8000bba0:	c0 94       	brge	8000bbb2 <_vfprintf_r+0x14f2>
8000bba2:	fa c9 f9 44 	sub	r9,sp,-1724
8000bba6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bbaa:	14 97       	mov	r7,r10
8000bbac:	ec fb fd 88 	ld.w	r11,r6[-632]
8000bbb0:	c1 88       	rjmp	8000bbe0 <_vfprintf_r+0x1520>
8000bbb2:	41 09       	lddsp	r9,sp[0x40]
8000bbb4:	59 f8       	cp.w	r8,31
8000bbb6:	e0 89 00 11 	brgt	8000bbd8 <_vfprintf_r+0x1518>
8000bbba:	f2 cb ff fc 	sub	r11,r9,-4
8000bbbe:	51 0b       	stdsp	sp[0x40],r11
8000bbc0:	fa c6 f9 44 	sub	r6,sp,-1724
8000bbc4:	72 0b       	ld.w	r11,r9[0x0]
8000bbc6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000bbca:	f3 4b fd 88 	st.w	r9[-632],r11
8000bbce:	2f f8       	sub	r8,-1
8000bbd0:	14 97       	mov	r7,r10
8000bbd2:	fb 48 06 b4 	st.w	sp[1716],r8
8000bbd6:	c0 58       	rjmp	8000bbe0 <_vfprintf_r+0x1520>
8000bbd8:	72 0b       	ld.w	r11,r9[0x0]
8000bbda:	14 97       	mov	r7,r10
8000bbdc:	2f c9       	sub	r9,-4
8000bbde:	51 09       	stdsp	sp[0x40],r9
8000bbe0:	50 1b       	stdsp	sp[0x4],r11
8000bbe2:	30 0e       	mov	lr,0
8000bbe4:	50 0e       	stdsp	sp[0x0],lr
8000bbe6:	40 08       	lddsp	r8,sp[0x0]
8000bbe8:	40 1c       	lddsp	r12,sp[0x4]
8000bbea:	18 48       	or	r8,r12
8000bbec:	5f 18       	srne	r8
8000bbee:	e7 e8 00 08 	and	r8,r3,r8
8000bbf2:	c0 70       	breq	8000bc00 <_vfprintf_r+0x1540>
8000bbf4:	33 08       	mov	r8,48
8000bbf6:	fb 60 06 b9 	st.b	sp[1721],r0
8000bbfa:	a1 b3       	sbr	r3,0x1
8000bbfc:	fb 68 06 b8 	st.b	sp[1720],r8
8000bc00:	30 28       	mov	r8,2
8000bc02:	30 09       	mov	r9,0
8000bc04:	fb 69 06 bb 	st.b	sp[1723],r9
8000bc08:	40 2b       	lddsp	r11,sp[0x8]
8000bc0a:	58 0b       	cp.w	r11,0
8000bc0c:	c0 25       	brlt	8000bc10 <_vfprintf_r+0x1550>
8000bc0e:	a7 d3       	cbr	r3,0x7
8000bc10:	40 2a       	lddsp	r10,sp[0x8]
8000bc12:	40 09       	lddsp	r9,sp[0x0]
8000bc14:	58 0a       	cp.w	r10,0
8000bc16:	5f 1a       	srne	r10
8000bc18:	40 16       	lddsp	r6,sp[0x4]
8000bc1a:	fa c2 f9 78 	sub	r2,sp,-1672
8000bc1e:	0c 49       	or	r9,r6
8000bc20:	5f 19       	srne	r9
8000bc22:	f5 e9 10 09 	or	r9,r10,r9
8000bc26:	c5 c0       	breq	8000bcde <_vfprintf_r+0x161e>
8000bc28:	30 19       	mov	r9,1
8000bc2a:	f2 08 18 00 	cp.b	r8,r9
8000bc2e:	c0 60       	breq	8000bc3a <_vfprintf_r+0x157a>
8000bc30:	30 29       	mov	r9,2
8000bc32:	f2 08 18 00 	cp.b	r8,r9
8000bc36:	c0 41       	brne	8000bc3e <_vfprintf_r+0x157e>
8000bc38:	c3 c8       	rjmp	8000bcb0 <_vfprintf_r+0x15f0>
8000bc3a:	04 96       	mov	r6,r2
8000bc3c:	c3 08       	rjmp	8000bc9c <_vfprintf_r+0x15dc>
8000bc3e:	04 96       	mov	r6,r2
8000bc40:	fa e8 00 00 	ld.d	r8,sp[0]
8000bc44:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000bc48:	2d 0a       	sub	r10,-48
8000bc4a:	0c fa       	st.b	--r6,r10
8000bc4c:	f0 0b 16 03 	lsr	r11,r8,0x3
8000bc50:	f2 0c 16 03 	lsr	r12,r9,0x3
8000bc54:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000bc58:	18 99       	mov	r9,r12
8000bc5a:	16 98       	mov	r8,r11
8000bc5c:	58 08       	cp.w	r8,0
8000bc5e:	5c 29       	cpc	r9
8000bc60:	cf 21       	brne	8000bc44 <_vfprintf_r+0x1584>
8000bc62:	fa e9 00 00 	st.d	sp[0],r8
8000bc66:	ed b3 00 00 	bld	r3,0x0
8000bc6a:	c4 51       	brne	8000bcf4 <_vfprintf_r+0x1634>
8000bc6c:	33 09       	mov	r9,48
8000bc6e:	f2 0a 18 00 	cp.b	r10,r9
8000bc72:	c4 10       	breq	8000bcf4 <_vfprintf_r+0x1634>
8000bc74:	0c f9       	st.b	--r6,r9
8000bc76:	c3 f8       	rjmp	8000bcf4 <_vfprintf_r+0x1634>
8000bc78:	fa ea 00 00 	ld.d	r10,sp[0]
8000bc7c:	30 a8       	mov	r8,10
8000bc7e:	30 09       	mov	r9,0
8000bc80:	e0 a0 38 cc 	rcall	80012e18 <__avr32_umod64>
8000bc84:	30 a8       	mov	r8,10
8000bc86:	2d 0a       	sub	r10,-48
8000bc88:	30 09       	mov	r9,0
8000bc8a:	ac 8a       	st.b	r6[0x0],r10
8000bc8c:	fa ea 00 00 	ld.d	r10,sp[0]
8000bc90:	e0 a0 37 7b 	rcall	80012b86 <__avr32_udiv64>
8000bc94:	16 99       	mov	r9,r11
8000bc96:	14 98       	mov	r8,r10
8000bc98:	fa e9 00 00 	st.d	sp[0],r8
8000bc9c:	20 16       	sub	r6,1
8000bc9e:	fa ea 00 00 	ld.d	r10,sp[0]
8000bca2:	58 9a       	cp.w	r10,9
8000bca4:	5c 2b       	cpc	r11
8000bca6:	fe 9b ff e9 	brhi	8000bc78 <_vfprintf_r+0x15b8>
8000bcaa:	1b f8       	ld.ub	r8,sp[0x7]
8000bcac:	2d 08       	sub	r8,-48
8000bcae:	c2 08       	rjmp	8000bcee <_vfprintf_r+0x162e>
8000bcb0:	04 96       	mov	r6,r2
8000bcb2:	fa e8 00 00 	ld.d	r8,sp[0]
8000bcb6:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000bcba:	40 de       	lddsp	lr,sp[0x34]
8000bcbc:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000bcc0:	0c fa       	st.b	--r6,r10
8000bcc2:	f2 0b 16 04 	lsr	r11,r9,0x4
8000bcc6:	f0 0a 16 04 	lsr	r10,r8,0x4
8000bcca:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000bcce:	16 99       	mov	r9,r11
8000bcd0:	14 98       	mov	r8,r10
8000bcd2:	58 08       	cp.w	r8,0
8000bcd4:	5c 29       	cpc	r9
8000bcd6:	cf 01       	brne	8000bcb6 <_vfprintf_r+0x15f6>
8000bcd8:	fa e9 00 00 	st.d	sp[0],r8
8000bcdc:	c0 c8       	rjmp	8000bcf4 <_vfprintf_r+0x1634>
8000bcde:	58 08       	cp.w	r8,0
8000bce0:	c0 91       	brne	8000bcf2 <_vfprintf_r+0x1632>
8000bce2:	ed b3 00 00 	bld	r3,0x0
8000bce6:	c0 61       	brne	8000bcf2 <_vfprintf_r+0x1632>
8000bce8:	fa c6 f9 79 	sub	r6,sp,-1671
8000bcec:	33 08       	mov	r8,48
8000bcee:	ac 88       	st.b	r6[0x0],r8
8000bcf0:	c0 28       	rjmp	8000bcf4 <_vfprintf_r+0x1634>
8000bcf2:	04 96       	mov	r6,r2
8000bcf4:	0c 12       	sub	r2,r6
8000bcf6:	c1 c8       	rjmp	8000bd2e <_vfprintf_r+0x166e>
8000bcf8:	50 a7       	stdsp	sp[0x28],r7
8000bcfa:	50 80       	stdsp	sp[0x20],r0
8000bcfc:	40 94       	lddsp	r4,sp[0x24]
8000bcfe:	0c 97       	mov	r7,r6
8000bd00:	10 90       	mov	r0,r8
8000bd02:	04 95       	mov	r5,r2
8000bd04:	40 41       	lddsp	r1,sp[0x10]
8000bd06:	58 08       	cp.w	r8,0
8000bd08:	e0 80 04 50 	breq	8000c5a8 <_vfprintf_r+0x1ee8>
8000bd0c:	fb 68 06 60 	st.b	sp[1632],r8
8000bd10:	30 0c       	mov	r12,0
8000bd12:	30 08       	mov	r8,0
8000bd14:	30 12       	mov	r2,1
8000bd16:	fb 68 06 bb 	st.b	sp[1723],r8
8000bd1a:	50 2c       	stdsp	sp[0x8],r12
8000bd1c:	fa c6 f9 a0 	sub	r6,sp,-1632
8000bd20:	c0 78       	rjmp	8000bd2e <_vfprintf_r+0x166e>
8000bd22:	30 0b       	mov	r11,0
8000bd24:	50 2b       	stdsp	sp[0x8],r11
8000bd26:	c0 48       	rjmp	8000bd2e <_vfprintf_r+0x166e>
8000bd28:	40 22       	lddsp	r2,sp[0x8]
8000bd2a:	30 0a       	mov	r10,0
8000bd2c:	50 2a       	stdsp	sp[0x8],r10
8000bd2e:	40 29       	lddsp	r9,sp[0x8]
8000bd30:	e4 09 0c 49 	max	r9,r2,r9
8000bd34:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000bd38:	50 39       	stdsp	sp[0xc],r9
8000bd3a:	06 9e       	mov	lr,r3
8000bd3c:	30 09       	mov	r9,0
8000bd3e:	e2 1e 00 02 	andl	lr,0x2,COH
8000bd42:	f2 08 18 00 	cp.b	r8,r9
8000bd46:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000bd4a:	f7 b8 01 ff 	subne	r8,-1
8000bd4e:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000bd52:	06 9b       	mov	r11,r3
8000bd54:	58 0e       	cp.w	lr,0
8000bd56:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000bd5a:	f7 bc 01 fe 	subne	r12,-2
8000bd5e:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000bd62:	e2 1b 00 84 	andl	r11,0x84,COH
8000bd66:	50 fe       	stdsp	sp[0x3c],lr
8000bd68:	50 9b       	stdsp	sp[0x24],r11
8000bd6a:	c4 51       	brne	8000bdf4 <_vfprintf_r+0x1734>
8000bd6c:	40 8a       	lddsp	r10,sp[0x20]
8000bd6e:	40 39       	lddsp	r9,sp[0xc]
8000bd70:	12 1a       	sub	r10,r9
8000bd72:	50 4a       	stdsp	sp[0x10],r10
8000bd74:	58 0a       	cp.w	r10,0
8000bd76:	e0 89 00 1f 	brgt	8000bdb4 <_vfprintf_r+0x16f4>
8000bd7a:	c3 d8       	rjmp	8000bdf4 <_vfprintf_r+0x1734>
8000bd7c:	2f 09       	sub	r9,-16
8000bd7e:	2f f8       	sub	r8,-1
8000bd80:	4c de       	lddpc	lr,8000beb4 <_vfprintf_r+0x17f4>
8000bd82:	31 0c       	mov	r12,16
8000bd84:	fb 49 06 90 	st.w	sp[1680],r9
8000bd88:	89 0e       	st.w	r4[0x0],lr
8000bd8a:	89 1c       	st.w	r4[0x4],r12
8000bd8c:	fb 48 06 8c 	st.w	sp[1676],r8
8000bd90:	58 78       	cp.w	r8,7
8000bd92:	e0 89 00 04 	brgt	8000bd9a <_vfprintf_r+0x16da>
8000bd96:	2f 84       	sub	r4,-8
8000bd98:	c0 b8       	rjmp	8000bdae <_vfprintf_r+0x16ee>
8000bd9a:	fa ca f9 78 	sub	r10,sp,-1672
8000bd9e:	02 9b       	mov	r11,r1
8000bda0:	0a 9c       	mov	r12,r5
8000bda2:	fe b0 f4 81 	rcall	8000a6a4 <__sprint_r>
8000bda6:	e0 81 04 11 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000bdaa:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bdae:	40 4b       	lddsp	r11,sp[0x10]
8000bdb0:	21 0b       	sub	r11,16
8000bdb2:	50 4b       	stdsp	sp[0x10],r11
8000bdb4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000bdb8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bdbc:	4b ea       	lddpc	r10,8000beb4 <_vfprintf_r+0x17f4>
8000bdbe:	40 4e       	lddsp	lr,sp[0x10]
8000bdc0:	59 0e       	cp.w	lr,16
8000bdc2:	fe 99 ff dd 	brgt	8000bd7c <_vfprintf_r+0x16bc>
8000bdc6:	1c 09       	add	r9,lr
8000bdc8:	2f f8       	sub	r8,-1
8000bdca:	89 0a       	st.w	r4[0x0],r10
8000bdcc:	fb 49 06 90 	st.w	sp[1680],r9
8000bdd0:	89 1e       	st.w	r4[0x4],lr
8000bdd2:	fb 48 06 8c 	st.w	sp[1676],r8
8000bdd6:	58 78       	cp.w	r8,7
8000bdd8:	e0 89 00 04 	brgt	8000bde0 <_vfprintf_r+0x1720>
8000bddc:	2f 84       	sub	r4,-8
8000bdde:	c0 b8       	rjmp	8000bdf4 <_vfprintf_r+0x1734>
8000bde0:	fa ca f9 78 	sub	r10,sp,-1672
8000bde4:	02 9b       	mov	r11,r1
8000bde6:	0a 9c       	mov	r12,r5
8000bde8:	fe b0 f4 5e 	rcall	8000a6a4 <__sprint_r>
8000bdec:	e0 81 03 ee 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000bdf0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bdf4:	30 09       	mov	r9,0
8000bdf6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000bdfa:	f2 08 18 00 	cp.b	r8,r9
8000bdfe:	c1 f0       	breq	8000be3c <_vfprintf_r+0x177c>
8000be00:	fa f8 06 90 	ld.w	r8,sp[1680]
8000be04:	fa c9 f9 45 	sub	r9,sp,-1723
8000be08:	2f f8       	sub	r8,-1
8000be0a:	89 09       	st.w	r4[0x0],r9
8000be0c:	fb 48 06 90 	st.w	sp[1680],r8
8000be10:	30 19       	mov	r9,1
8000be12:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000be16:	89 19       	st.w	r4[0x4],r9
8000be18:	2f f8       	sub	r8,-1
8000be1a:	fb 48 06 8c 	st.w	sp[1676],r8
8000be1e:	58 78       	cp.w	r8,7
8000be20:	e0 89 00 04 	brgt	8000be28 <_vfprintf_r+0x1768>
8000be24:	2f 84       	sub	r4,-8
8000be26:	c0 b8       	rjmp	8000be3c <_vfprintf_r+0x177c>
8000be28:	fa ca f9 78 	sub	r10,sp,-1672
8000be2c:	02 9b       	mov	r11,r1
8000be2e:	0a 9c       	mov	r12,r5
8000be30:	fe b0 f4 3a 	rcall	8000a6a4 <__sprint_r>
8000be34:	e0 81 03 ca 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000be38:	fa c4 f9 e0 	sub	r4,sp,-1568
8000be3c:	40 fc       	lddsp	r12,sp[0x3c]
8000be3e:	58 0c       	cp.w	r12,0
8000be40:	c1 f0       	breq	8000be7e <_vfprintf_r+0x17be>
8000be42:	fa f8 06 90 	ld.w	r8,sp[1680]
8000be46:	fa c9 f9 48 	sub	r9,sp,-1720
8000be4a:	2f e8       	sub	r8,-2
8000be4c:	89 09       	st.w	r4[0x0],r9
8000be4e:	fb 48 06 90 	st.w	sp[1680],r8
8000be52:	30 29       	mov	r9,2
8000be54:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000be58:	89 19       	st.w	r4[0x4],r9
8000be5a:	2f f8       	sub	r8,-1
8000be5c:	fb 48 06 8c 	st.w	sp[1676],r8
8000be60:	58 78       	cp.w	r8,7
8000be62:	e0 89 00 04 	brgt	8000be6a <_vfprintf_r+0x17aa>
8000be66:	2f 84       	sub	r4,-8
8000be68:	c0 b8       	rjmp	8000be7e <_vfprintf_r+0x17be>
8000be6a:	fa ca f9 78 	sub	r10,sp,-1672
8000be6e:	02 9b       	mov	r11,r1
8000be70:	0a 9c       	mov	r12,r5
8000be72:	fe b0 f4 19 	rcall	8000a6a4 <__sprint_r>
8000be76:	e0 81 03 a9 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000be7a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000be7e:	40 9b       	lddsp	r11,sp[0x24]
8000be80:	e0 4b 00 80 	cp.w	r11,128
8000be84:	c4 91       	brne	8000bf16 <_vfprintf_r+0x1856>
8000be86:	40 8a       	lddsp	r10,sp[0x20]
8000be88:	40 39       	lddsp	r9,sp[0xc]
8000be8a:	12 1a       	sub	r10,r9
8000be8c:	50 4a       	stdsp	sp[0x10],r10
8000be8e:	58 0a       	cp.w	r10,0
8000be90:	e0 89 00 23 	brgt	8000bed6 <_vfprintf_r+0x1816>
8000be94:	c4 18       	rjmp	8000bf16 <_vfprintf_r+0x1856>
8000be96:	2f 09       	sub	r9,-16
8000be98:	2f f8       	sub	r8,-1
8000be9a:	48 8e       	lddpc	lr,8000beb8 <_vfprintf_r+0x17f8>
8000be9c:	31 0c       	mov	r12,16
8000be9e:	fb 49 06 90 	st.w	sp[1680],r9
8000bea2:	89 0e       	st.w	r4[0x0],lr
8000bea4:	89 1c       	st.w	r4[0x4],r12
8000bea6:	fb 48 06 8c 	st.w	sp[1676],r8
8000beaa:	58 78       	cp.w	r8,7
8000beac:	e0 89 00 08 	brgt	8000bebc <_vfprintf_r+0x17fc>
8000beb0:	2f 84       	sub	r4,-8
8000beb2:	c0 f8       	rjmp	8000bed0 <_vfprintf_r+0x1810>
8000beb4:	80 01       	ld.sh	r1,r0[0x0]
8000beb6:	41 24       	lddsp	r4,sp[0x48]
8000beb8:	80 01       	ld.sh	r1,r0[0x0]
8000beba:	41 34       	lddsp	r4,sp[0x4c]
8000bebc:	fa ca f9 78 	sub	r10,sp,-1672
8000bec0:	02 9b       	mov	r11,r1
8000bec2:	0a 9c       	mov	r12,r5
8000bec4:	fe b0 f3 f0 	rcall	8000a6a4 <__sprint_r>
8000bec8:	e0 81 03 80 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000becc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bed0:	40 4b       	lddsp	r11,sp[0x10]
8000bed2:	21 0b       	sub	r11,16
8000bed4:	50 4b       	stdsp	sp[0x10],r11
8000bed6:	fa f9 06 90 	ld.w	r9,sp[1680]
8000beda:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bede:	4c 6a       	lddpc	r10,8000bff4 <_vfprintf_r+0x1934>
8000bee0:	40 4e       	lddsp	lr,sp[0x10]
8000bee2:	59 0e       	cp.w	lr,16
8000bee4:	fe 99 ff d9 	brgt	8000be96 <_vfprintf_r+0x17d6>
8000bee8:	1c 09       	add	r9,lr
8000beea:	2f f8       	sub	r8,-1
8000beec:	89 0a       	st.w	r4[0x0],r10
8000beee:	fb 49 06 90 	st.w	sp[1680],r9
8000bef2:	89 1e       	st.w	r4[0x4],lr
8000bef4:	fb 48 06 8c 	st.w	sp[1676],r8
8000bef8:	58 78       	cp.w	r8,7
8000befa:	e0 89 00 04 	brgt	8000bf02 <_vfprintf_r+0x1842>
8000befe:	2f 84       	sub	r4,-8
8000bf00:	c0 b8       	rjmp	8000bf16 <_vfprintf_r+0x1856>
8000bf02:	fa ca f9 78 	sub	r10,sp,-1672
8000bf06:	02 9b       	mov	r11,r1
8000bf08:	0a 9c       	mov	r12,r5
8000bf0a:	fe b0 f3 cd 	rcall	8000a6a4 <__sprint_r>
8000bf0e:	e0 81 03 5d 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000bf12:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bf16:	40 2c       	lddsp	r12,sp[0x8]
8000bf18:	04 1c       	sub	r12,r2
8000bf1a:	50 2c       	stdsp	sp[0x8],r12
8000bf1c:	58 0c       	cp.w	r12,0
8000bf1e:	e0 89 00 1f 	brgt	8000bf5c <_vfprintf_r+0x189c>
8000bf22:	c3 d8       	rjmp	8000bf9c <_vfprintf_r+0x18dc>
8000bf24:	2f 09       	sub	r9,-16
8000bf26:	2f f8       	sub	r8,-1
8000bf28:	4b 3b       	lddpc	r11,8000bff4 <_vfprintf_r+0x1934>
8000bf2a:	31 0a       	mov	r10,16
8000bf2c:	fb 49 06 90 	st.w	sp[1680],r9
8000bf30:	89 0b       	st.w	r4[0x0],r11
8000bf32:	89 1a       	st.w	r4[0x4],r10
8000bf34:	fb 48 06 8c 	st.w	sp[1676],r8
8000bf38:	58 78       	cp.w	r8,7
8000bf3a:	e0 89 00 04 	brgt	8000bf42 <_vfprintf_r+0x1882>
8000bf3e:	2f 84       	sub	r4,-8
8000bf40:	c0 b8       	rjmp	8000bf56 <_vfprintf_r+0x1896>
8000bf42:	fa ca f9 78 	sub	r10,sp,-1672
8000bf46:	02 9b       	mov	r11,r1
8000bf48:	0a 9c       	mov	r12,r5
8000bf4a:	fe b0 f3 ad 	rcall	8000a6a4 <__sprint_r>
8000bf4e:	e0 81 03 3d 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000bf52:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bf56:	40 29       	lddsp	r9,sp[0x8]
8000bf58:	21 09       	sub	r9,16
8000bf5a:	50 29       	stdsp	sp[0x8],r9
8000bf5c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000bf60:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bf64:	4a 4a       	lddpc	r10,8000bff4 <_vfprintf_r+0x1934>
8000bf66:	40 2e       	lddsp	lr,sp[0x8]
8000bf68:	59 0e       	cp.w	lr,16
8000bf6a:	fe 99 ff dd 	brgt	8000bf24 <_vfprintf_r+0x1864>
8000bf6e:	1c 09       	add	r9,lr
8000bf70:	2f f8       	sub	r8,-1
8000bf72:	89 0a       	st.w	r4[0x0],r10
8000bf74:	fb 49 06 90 	st.w	sp[1680],r9
8000bf78:	89 1e       	st.w	r4[0x4],lr
8000bf7a:	fb 48 06 8c 	st.w	sp[1676],r8
8000bf7e:	58 78       	cp.w	r8,7
8000bf80:	e0 89 00 04 	brgt	8000bf88 <_vfprintf_r+0x18c8>
8000bf84:	2f 84       	sub	r4,-8
8000bf86:	c0 b8       	rjmp	8000bf9c <_vfprintf_r+0x18dc>
8000bf88:	fa ca f9 78 	sub	r10,sp,-1672
8000bf8c:	02 9b       	mov	r11,r1
8000bf8e:	0a 9c       	mov	r12,r5
8000bf90:	fe b0 f3 8a 	rcall	8000a6a4 <__sprint_r>
8000bf94:	e0 81 03 1a 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000bf98:	fa c4 f9 e0 	sub	r4,sp,-1568
8000bf9c:	ed b3 00 08 	bld	r3,0x8
8000bfa0:	c0 b0       	breq	8000bfb6 <_vfprintf_r+0x18f6>
8000bfa2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bfa6:	89 12       	st.w	r4[0x4],r2
8000bfa8:	89 06       	st.w	r4[0x0],r6
8000bfaa:	f0 02 00 02 	add	r2,r8,r2
8000bfae:	fb 42 06 90 	st.w	sp[1680],r2
8000bfb2:	e0 8f 01 d5 	bral	8000c35c <_vfprintf_r+0x1c9c>
8000bfb6:	e0 40 00 65 	cp.w	r0,101
8000bfba:	e0 8a 01 d7 	brle	8000c368 <_vfprintf_r+0x1ca8>
8000bfbe:	30 08       	mov	r8,0
8000bfc0:	30 09       	mov	r9,0
8000bfc2:	40 5b       	lddsp	r11,sp[0x14]
8000bfc4:	40 7a       	lddsp	r10,sp[0x1c]
8000bfc6:	e0 a0 33 94 	rcall	800126ee <__avr32_f64_cmp_eq>
8000bfca:	c7 a0       	breq	8000c0be <_vfprintf_r+0x19fe>
8000bfcc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bfd0:	48 a9       	lddpc	r9,8000bff8 <_vfprintf_r+0x1938>
8000bfd2:	2f f8       	sub	r8,-1
8000bfd4:	89 09       	st.w	r4[0x0],r9
8000bfd6:	fb 48 06 90 	st.w	sp[1680],r8
8000bfda:	30 19       	mov	r9,1
8000bfdc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bfe0:	89 19       	st.w	r4[0x4],r9
8000bfe2:	2f f8       	sub	r8,-1
8000bfe4:	fb 48 06 8c 	st.w	sp[1676],r8
8000bfe8:	58 78       	cp.w	r8,7
8000bfea:	e0 89 00 09 	brgt	8000bffc <_vfprintf_r+0x193c>
8000bfee:	2f 84       	sub	r4,-8
8000bff0:	c1 08       	rjmp	8000c010 <_vfprintf_r+0x1950>
8000bff2:	d7 03       	nop
8000bff4:	80 01       	ld.sh	r1,r0[0x0]
8000bff6:	41 34       	lddsp	r4,sp[0x4c]
8000bff8:	80 01       	ld.sh	r1,r0[0x0]
8000bffa:	41 20       	lddsp	r0,sp[0x48]
8000bffc:	fa ca f9 78 	sub	r10,sp,-1672
8000c000:	02 9b       	mov	r11,r1
8000c002:	0a 9c       	mov	r12,r5
8000c004:	fe b0 f3 50 	rcall	8000a6a4 <__sprint_r>
8000c008:	e0 81 02 e0 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c00c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c010:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c014:	40 6c       	lddsp	r12,sp[0x18]
8000c016:	18 38       	cp.w	r8,r12
8000c018:	c0 55       	brlt	8000c022 <_vfprintf_r+0x1962>
8000c01a:	ed b3 00 00 	bld	r3,0x0
8000c01e:	e0 81 02 69 	brne	8000c4f0 <_vfprintf_r+0x1e30>
8000c022:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c026:	2f f8       	sub	r8,-1
8000c028:	40 cb       	lddsp	r11,sp[0x30]
8000c02a:	fb 48 06 90 	st.w	sp[1680],r8
8000c02e:	30 19       	mov	r9,1
8000c030:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c034:	89 0b       	st.w	r4[0x0],r11
8000c036:	2f f8       	sub	r8,-1
8000c038:	89 19       	st.w	r4[0x4],r9
8000c03a:	fb 48 06 8c 	st.w	sp[1676],r8
8000c03e:	58 78       	cp.w	r8,7
8000c040:	e0 89 00 04 	brgt	8000c048 <_vfprintf_r+0x1988>
8000c044:	2f 84       	sub	r4,-8
8000c046:	c0 b8       	rjmp	8000c05c <_vfprintf_r+0x199c>
8000c048:	fa ca f9 78 	sub	r10,sp,-1672
8000c04c:	02 9b       	mov	r11,r1
8000c04e:	0a 9c       	mov	r12,r5
8000c050:	fe b0 f3 2a 	rcall	8000a6a4 <__sprint_r>
8000c054:	e0 81 02 ba 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c058:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c05c:	40 66       	lddsp	r6,sp[0x18]
8000c05e:	20 16       	sub	r6,1
8000c060:	58 06       	cp.w	r6,0
8000c062:	e0 89 00 1d 	brgt	8000c09c <_vfprintf_r+0x19dc>
8000c066:	e0 8f 02 45 	bral	8000c4f0 <_vfprintf_r+0x1e30>
8000c06a:	2f 09       	sub	r9,-16
8000c06c:	2f f8       	sub	r8,-1
8000c06e:	fb 49 06 90 	st.w	sp[1680],r9
8000c072:	89 02       	st.w	r4[0x0],r2
8000c074:	89 10       	st.w	r4[0x4],r0
8000c076:	fb 48 06 8c 	st.w	sp[1676],r8
8000c07a:	58 78       	cp.w	r8,7
8000c07c:	e0 89 00 04 	brgt	8000c084 <_vfprintf_r+0x19c4>
8000c080:	2f 84       	sub	r4,-8
8000c082:	c0 b8       	rjmp	8000c098 <_vfprintf_r+0x19d8>
8000c084:	fa ca f9 78 	sub	r10,sp,-1672
8000c088:	02 9b       	mov	r11,r1
8000c08a:	0a 9c       	mov	r12,r5
8000c08c:	fe b0 f3 0c 	rcall	8000a6a4 <__sprint_r>
8000c090:	e0 81 02 9c 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c094:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c098:	21 06       	sub	r6,16
8000c09a:	c0 38       	rjmp	8000c0a0 <_vfprintf_r+0x19e0>
8000c09c:	4d 22       	lddpc	r2,8000c1e4 <_vfprintf_r+0x1b24>
8000c09e:	31 00       	mov	r0,16
8000c0a0:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c0a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c0a8:	4c fa       	lddpc	r10,8000c1e4 <_vfprintf_r+0x1b24>
8000c0aa:	59 06       	cp.w	r6,16
8000c0ac:	fe 99 ff df 	brgt	8000c06a <_vfprintf_r+0x19aa>
8000c0b0:	0c 09       	add	r9,r6
8000c0b2:	89 0a       	st.w	r4[0x0],r10
8000c0b4:	fb 49 06 90 	st.w	sp[1680],r9
8000c0b8:	2f f8       	sub	r8,-1
8000c0ba:	89 16       	st.w	r4[0x4],r6
8000c0bc:	c5 39       	rjmp	8000c362 <_vfprintf_r+0x1ca2>
8000c0be:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000c0c2:	58 0a       	cp.w	r10,0
8000c0c4:	e0 89 00 94 	brgt	8000c1ec <_vfprintf_r+0x1b2c>
8000c0c8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c0cc:	4c 79       	lddpc	r9,8000c1e8 <_vfprintf_r+0x1b28>
8000c0ce:	2f f8       	sub	r8,-1
8000c0d0:	89 09       	st.w	r4[0x0],r9
8000c0d2:	fb 48 06 90 	st.w	sp[1680],r8
8000c0d6:	30 19       	mov	r9,1
8000c0d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c0dc:	89 19       	st.w	r4[0x4],r9
8000c0de:	2f f8       	sub	r8,-1
8000c0e0:	fb 48 06 8c 	st.w	sp[1676],r8
8000c0e4:	58 78       	cp.w	r8,7
8000c0e6:	e0 89 00 04 	brgt	8000c0ee <_vfprintf_r+0x1a2e>
8000c0ea:	2f 84       	sub	r4,-8
8000c0ec:	c0 b8       	rjmp	8000c102 <_vfprintf_r+0x1a42>
8000c0ee:	fa ca f9 78 	sub	r10,sp,-1672
8000c0f2:	02 9b       	mov	r11,r1
8000c0f4:	0a 9c       	mov	r12,r5
8000c0f6:	fe b0 f2 d7 	rcall	8000a6a4 <__sprint_r>
8000c0fa:	e0 81 02 67 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c0fe:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c102:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c106:	58 08       	cp.w	r8,0
8000c108:	c0 81       	brne	8000c118 <_vfprintf_r+0x1a58>
8000c10a:	40 6a       	lddsp	r10,sp[0x18]
8000c10c:	58 0a       	cp.w	r10,0
8000c10e:	c0 51       	brne	8000c118 <_vfprintf_r+0x1a58>
8000c110:	ed b3 00 00 	bld	r3,0x0
8000c114:	e0 81 01 ee 	brne	8000c4f0 <_vfprintf_r+0x1e30>
8000c118:	40 c9       	lddsp	r9,sp[0x30]
8000c11a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c11e:	2f f8       	sub	r8,-1
8000c120:	89 09       	st.w	r4[0x0],r9
8000c122:	fb 48 06 90 	st.w	sp[1680],r8
8000c126:	30 19       	mov	r9,1
8000c128:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c12c:	89 19       	st.w	r4[0x4],r9
8000c12e:	2f f8       	sub	r8,-1
8000c130:	fb 48 06 8c 	st.w	sp[1676],r8
8000c134:	58 78       	cp.w	r8,7
8000c136:	e0 89 00 04 	brgt	8000c13e <_vfprintf_r+0x1a7e>
8000c13a:	2f 84       	sub	r4,-8
8000c13c:	c0 b8       	rjmp	8000c152 <_vfprintf_r+0x1a92>
8000c13e:	fa ca f9 78 	sub	r10,sp,-1672
8000c142:	02 9b       	mov	r11,r1
8000c144:	0a 9c       	mov	r12,r5
8000c146:	fe b0 f2 af 	rcall	8000a6a4 <__sprint_r>
8000c14a:	e0 81 02 3f 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c14e:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c152:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c156:	5c 32       	neg	r2
8000c158:	58 02       	cp.w	r2,0
8000c15a:	e0 89 00 1d 	brgt	8000c194 <_vfprintf_r+0x1ad4>
8000c15e:	c3 b8       	rjmp	8000c1d4 <_vfprintf_r+0x1b14>
8000c160:	2f 09       	sub	r9,-16
8000c162:	2f f8       	sub	r8,-1
8000c164:	31 0e       	mov	lr,16
8000c166:	fb 49 06 90 	st.w	sp[1680],r9
8000c16a:	89 00       	st.w	r4[0x0],r0
8000c16c:	89 1e       	st.w	r4[0x4],lr
8000c16e:	fb 48 06 8c 	st.w	sp[1676],r8
8000c172:	58 78       	cp.w	r8,7
8000c174:	e0 89 00 04 	brgt	8000c17c <_vfprintf_r+0x1abc>
8000c178:	2f 84       	sub	r4,-8
8000c17a:	c0 b8       	rjmp	8000c190 <_vfprintf_r+0x1ad0>
8000c17c:	fa ca f9 78 	sub	r10,sp,-1672
8000c180:	02 9b       	mov	r11,r1
8000c182:	0a 9c       	mov	r12,r5
8000c184:	fe b0 f2 90 	rcall	8000a6a4 <__sprint_r>
8000c188:	e0 81 02 20 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c18c:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c190:	21 02       	sub	r2,16
8000c192:	c0 28       	rjmp	8000c196 <_vfprintf_r+0x1ad6>
8000c194:	49 40       	lddpc	r0,8000c1e4 <_vfprintf_r+0x1b24>
8000c196:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c19a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c19e:	49 2a       	lddpc	r10,8000c1e4 <_vfprintf_r+0x1b24>
8000c1a0:	59 02       	cp.w	r2,16
8000c1a2:	fe 99 ff df 	brgt	8000c160 <_vfprintf_r+0x1aa0>
8000c1a6:	04 09       	add	r9,r2
8000c1a8:	2f f8       	sub	r8,-1
8000c1aa:	89 0a       	st.w	r4[0x0],r10
8000c1ac:	fb 49 06 90 	st.w	sp[1680],r9
8000c1b0:	89 12       	st.w	r4[0x4],r2
8000c1b2:	fb 48 06 8c 	st.w	sp[1676],r8
8000c1b6:	58 78       	cp.w	r8,7
8000c1b8:	e0 89 00 04 	brgt	8000c1c0 <_vfprintf_r+0x1b00>
8000c1bc:	2f 84       	sub	r4,-8
8000c1be:	c0 b8       	rjmp	8000c1d4 <_vfprintf_r+0x1b14>
8000c1c0:	fa ca f9 78 	sub	r10,sp,-1672
8000c1c4:	02 9b       	mov	r11,r1
8000c1c6:	0a 9c       	mov	r12,r5
8000c1c8:	fe b0 f2 6e 	rcall	8000a6a4 <__sprint_r>
8000c1cc:	e0 81 01 fe 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c1d0:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c1d4:	40 6c       	lddsp	r12,sp[0x18]
8000c1d6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c1da:	89 06       	st.w	r4[0x0],r6
8000c1dc:	89 1c       	st.w	r4[0x4],r12
8000c1de:	18 08       	add	r8,r12
8000c1e0:	cb c8       	rjmp	8000c358 <_vfprintf_r+0x1c98>
8000c1e2:	d7 03       	nop
8000c1e4:	80 01       	ld.sh	r1,r0[0x0]
8000c1e6:	41 34       	lddsp	r4,sp[0x4c]
8000c1e8:	80 01       	ld.sh	r1,r0[0x0]
8000c1ea:	41 20       	lddsp	r0,sp[0x48]
8000c1ec:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c1f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c1f4:	40 6b       	lddsp	r11,sp[0x18]
8000c1f6:	16 3a       	cp.w	r10,r11
8000c1f8:	c6 d5       	brlt	8000c2d2 <_vfprintf_r+0x1c12>
8000c1fa:	16 09       	add	r9,r11
8000c1fc:	2f f8       	sub	r8,-1
8000c1fe:	89 06       	st.w	r4[0x0],r6
8000c200:	fb 49 06 90 	st.w	sp[1680],r9
8000c204:	89 1b       	st.w	r4[0x4],r11
8000c206:	fb 48 06 8c 	st.w	sp[1676],r8
8000c20a:	58 78       	cp.w	r8,7
8000c20c:	e0 89 00 04 	brgt	8000c214 <_vfprintf_r+0x1b54>
8000c210:	2f 84       	sub	r4,-8
8000c212:	c0 b8       	rjmp	8000c228 <_vfprintf_r+0x1b68>
8000c214:	fa ca f9 78 	sub	r10,sp,-1672
8000c218:	02 9b       	mov	r11,r1
8000c21a:	0a 9c       	mov	r12,r5
8000c21c:	fe b0 f2 44 	rcall	8000a6a4 <__sprint_r>
8000c220:	e0 81 01 d4 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c224:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c228:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000c22c:	40 6a       	lddsp	r10,sp[0x18]
8000c22e:	14 16       	sub	r6,r10
8000c230:	58 06       	cp.w	r6,0
8000c232:	e0 89 00 1c 	brgt	8000c26a <_vfprintf_r+0x1baa>
8000c236:	c3 b8       	rjmp	8000c2ac <_vfprintf_r+0x1bec>
8000c238:	2f 09       	sub	r9,-16
8000c23a:	2f f8       	sub	r8,-1
8000c23c:	fb 49 06 90 	st.w	sp[1680],r9
8000c240:	89 02       	st.w	r4[0x0],r2
8000c242:	89 10       	st.w	r4[0x4],r0
8000c244:	fb 48 06 8c 	st.w	sp[1676],r8
8000c248:	58 78       	cp.w	r8,7
8000c24a:	e0 89 00 04 	brgt	8000c252 <_vfprintf_r+0x1b92>
8000c24e:	2f 84       	sub	r4,-8
8000c250:	c0 b8       	rjmp	8000c266 <_vfprintf_r+0x1ba6>
8000c252:	fa ca f9 78 	sub	r10,sp,-1672
8000c256:	02 9b       	mov	r11,r1
8000c258:	0a 9c       	mov	r12,r5
8000c25a:	fe b0 f2 25 	rcall	8000a6a4 <__sprint_r>
8000c25e:	e0 81 01 b5 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c262:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c266:	21 06       	sub	r6,16
8000c268:	c0 38       	rjmp	8000c26e <_vfprintf_r+0x1bae>
8000c26a:	4d c2       	lddpc	r2,8000c3d8 <_vfprintf_r+0x1d18>
8000c26c:	31 00       	mov	r0,16
8000c26e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c272:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c276:	4d 9a       	lddpc	r10,8000c3d8 <_vfprintf_r+0x1d18>
8000c278:	59 06       	cp.w	r6,16
8000c27a:	fe 99 ff df 	brgt	8000c238 <_vfprintf_r+0x1b78>
8000c27e:	0c 09       	add	r9,r6
8000c280:	2f f8       	sub	r8,-1
8000c282:	89 0a       	st.w	r4[0x0],r10
8000c284:	fb 49 06 90 	st.w	sp[1680],r9
8000c288:	89 16       	st.w	r4[0x4],r6
8000c28a:	fb 48 06 8c 	st.w	sp[1676],r8
8000c28e:	58 78       	cp.w	r8,7
8000c290:	e0 89 00 04 	brgt	8000c298 <_vfprintf_r+0x1bd8>
8000c294:	2f 84       	sub	r4,-8
8000c296:	c0 b8       	rjmp	8000c2ac <_vfprintf_r+0x1bec>
8000c298:	fa ca f9 78 	sub	r10,sp,-1672
8000c29c:	02 9b       	mov	r11,r1
8000c29e:	0a 9c       	mov	r12,r5
8000c2a0:	fe b0 f2 02 	rcall	8000a6a4 <__sprint_r>
8000c2a4:	e0 81 01 92 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c2a8:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c2ac:	ed b3 00 00 	bld	r3,0x0
8000c2b0:	e0 81 01 20 	brne	8000c4f0 <_vfprintf_r+0x1e30>
8000c2b4:	40 c9       	lddsp	r9,sp[0x30]
8000c2b6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c2ba:	2f f8       	sub	r8,-1
8000c2bc:	89 09       	st.w	r4[0x0],r9
8000c2be:	fb 48 06 90 	st.w	sp[1680],r8
8000c2c2:	30 19       	mov	r9,1
8000c2c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c2c8:	89 19       	st.w	r4[0x4],r9
8000c2ca:	2f f8       	sub	r8,-1
8000c2cc:	fb 48 06 8c 	st.w	sp[1676],r8
8000c2d0:	c0 29       	rjmp	8000c4d4 <_vfprintf_r+0x1e14>
8000c2d2:	14 09       	add	r9,r10
8000c2d4:	2f f8       	sub	r8,-1
8000c2d6:	fb 49 06 90 	st.w	sp[1680],r9
8000c2da:	89 06       	st.w	r4[0x0],r6
8000c2dc:	89 1a       	st.w	r4[0x4],r10
8000c2de:	fb 48 06 8c 	st.w	sp[1676],r8
8000c2e2:	58 78       	cp.w	r8,7
8000c2e4:	e0 89 00 04 	brgt	8000c2ec <_vfprintf_r+0x1c2c>
8000c2e8:	2f 84       	sub	r4,-8
8000c2ea:	c0 b8       	rjmp	8000c300 <_vfprintf_r+0x1c40>
8000c2ec:	fa ca f9 78 	sub	r10,sp,-1672
8000c2f0:	02 9b       	mov	r11,r1
8000c2f2:	0a 9c       	mov	r12,r5
8000c2f4:	fe b0 f1 d8 	rcall	8000a6a4 <__sprint_r>
8000c2f8:	e0 81 01 68 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c2fc:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c300:	40 c8       	lddsp	r8,sp[0x30]
8000c302:	89 08       	st.w	r4[0x0],r8
8000c304:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c308:	2f f8       	sub	r8,-1
8000c30a:	30 19       	mov	r9,1
8000c30c:	fb 48 06 90 	st.w	sp[1680],r8
8000c310:	89 19       	st.w	r4[0x4],r9
8000c312:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c316:	2f f8       	sub	r8,-1
8000c318:	fb 48 06 8c 	st.w	sp[1676],r8
8000c31c:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c320:	58 78       	cp.w	r8,7
8000c322:	e0 89 00 04 	brgt	8000c32a <_vfprintf_r+0x1c6a>
8000c326:	2f 84       	sub	r4,-8
8000c328:	c0 b8       	rjmp	8000c33e <_vfprintf_r+0x1c7e>
8000c32a:	fa ca f9 78 	sub	r10,sp,-1672
8000c32e:	02 9b       	mov	r11,r1
8000c330:	0a 9c       	mov	r12,r5
8000c332:	fe b0 f1 b9 	rcall	8000a6a4 <__sprint_r>
8000c336:	e0 81 01 49 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c33a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c33e:	04 06       	add	r6,r2
8000c340:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c344:	89 06       	st.w	r4[0x0],r6
8000c346:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c34a:	40 66       	lddsp	r6,sp[0x18]
8000c34c:	40 6e       	lddsp	lr,sp[0x18]
8000c34e:	10 16       	sub	r6,r8
8000c350:	f2 08 01 08 	sub	r8,r9,r8
8000c354:	89 16       	st.w	r4[0x4],r6
8000c356:	1c 08       	add	r8,lr
8000c358:	fb 48 06 90 	st.w	sp[1680],r8
8000c35c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c360:	2f f8       	sub	r8,-1
8000c362:	fb 48 06 8c 	st.w	sp[1676],r8
8000c366:	cb 78       	rjmp	8000c4d4 <_vfprintf_r+0x1e14>
8000c368:	40 6c       	lddsp	r12,sp[0x18]
8000c36a:	58 1c       	cp.w	r12,1
8000c36c:	e0 89 00 06 	brgt	8000c378 <_vfprintf_r+0x1cb8>
8000c370:	ed b3 00 00 	bld	r3,0x0
8000c374:	e0 81 00 85 	brne	8000c47e <_vfprintf_r+0x1dbe>
8000c378:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c37c:	2f f8       	sub	r8,-1
8000c37e:	30 19       	mov	r9,1
8000c380:	fb 48 06 90 	st.w	sp[1680],r8
8000c384:	89 06       	st.w	r4[0x0],r6
8000c386:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c38a:	89 19       	st.w	r4[0x4],r9
8000c38c:	2f f8       	sub	r8,-1
8000c38e:	fb 48 06 8c 	st.w	sp[1676],r8
8000c392:	58 78       	cp.w	r8,7
8000c394:	e0 89 00 04 	brgt	8000c39c <_vfprintf_r+0x1cdc>
8000c398:	2f 84       	sub	r4,-8
8000c39a:	c0 b8       	rjmp	8000c3b0 <_vfprintf_r+0x1cf0>
8000c39c:	fa ca f9 78 	sub	r10,sp,-1672
8000c3a0:	02 9b       	mov	r11,r1
8000c3a2:	0a 9c       	mov	r12,r5
8000c3a4:	fe b0 f1 80 	rcall	8000a6a4 <__sprint_r>
8000c3a8:	e0 81 01 10 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c3ac:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c3b0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c3b4:	2f f8       	sub	r8,-1
8000c3b6:	40 cb       	lddsp	r11,sp[0x30]
8000c3b8:	fb 48 06 90 	st.w	sp[1680],r8
8000c3bc:	30 19       	mov	r9,1
8000c3be:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c3c2:	89 0b       	st.w	r4[0x0],r11
8000c3c4:	2f f8       	sub	r8,-1
8000c3c6:	89 19       	st.w	r4[0x4],r9
8000c3c8:	fb 48 06 8c 	st.w	sp[1676],r8
8000c3cc:	58 78       	cp.w	r8,7
8000c3ce:	e0 89 00 07 	brgt	8000c3dc <_vfprintf_r+0x1d1c>
8000c3d2:	2f 84       	sub	r4,-8
8000c3d4:	c0 e8       	rjmp	8000c3f0 <_vfprintf_r+0x1d30>
8000c3d6:	d7 03       	nop
8000c3d8:	80 01       	ld.sh	r1,r0[0x0]
8000c3da:	41 34       	lddsp	r4,sp[0x4c]
8000c3dc:	fa ca f9 78 	sub	r10,sp,-1672
8000c3e0:	02 9b       	mov	r11,r1
8000c3e2:	0a 9c       	mov	r12,r5
8000c3e4:	fe b0 f1 60 	rcall	8000a6a4 <__sprint_r>
8000c3e8:	e0 81 00 f0 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c3ec:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c3f0:	30 08       	mov	r8,0
8000c3f2:	30 09       	mov	r9,0
8000c3f4:	40 5b       	lddsp	r11,sp[0x14]
8000c3f6:	40 7a       	lddsp	r10,sp[0x1c]
8000c3f8:	e0 a0 31 7b 	rcall	800126ee <__avr32_f64_cmp_eq>
8000c3fc:	40 68       	lddsp	r8,sp[0x18]
8000c3fe:	20 18       	sub	r8,1
8000c400:	58 0c       	cp.w	r12,0
8000c402:	c0 d1       	brne	8000c41c <_vfprintf_r+0x1d5c>
8000c404:	2f f6       	sub	r6,-1
8000c406:	89 18       	st.w	r4[0x4],r8
8000c408:	89 06       	st.w	r4[0x0],r6
8000c40a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000c40e:	10 06       	add	r6,r8
8000c410:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c414:	fb 46 06 90 	st.w	sp[1680],r6
8000c418:	2f f8       	sub	r8,-1
8000c41a:	c2 f8       	rjmp	8000c478 <_vfprintf_r+0x1db8>
8000c41c:	10 96       	mov	r6,r8
8000c41e:	58 08       	cp.w	r8,0
8000c420:	e0 89 00 1c 	brgt	8000c458 <_vfprintf_r+0x1d98>
8000c424:	c4 98       	rjmp	8000c4b6 <_vfprintf_r+0x1df6>
8000c426:	2f 09       	sub	r9,-16
8000c428:	2f f8       	sub	r8,-1
8000c42a:	fb 49 06 90 	st.w	sp[1680],r9
8000c42e:	89 02       	st.w	r4[0x0],r2
8000c430:	89 10       	st.w	r4[0x4],r0
8000c432:	fb 48 06 8c 	st.w	sp[1676],r8
8000c436:	58 78       	cp.w	r8,7
8000c438:	e0 89 00 04 	brgt	8000c440 <_vfprintf_r+0x1d80>
8000c43c:	2f 84       	sub	r4,-8
8000c43e:	c0 b8       	rjmp	8000c454 <_vfprintf_r+0x1d94>
8000c440:	fa ca f9 78 	sub	r10,sp,-1672
8000c444:	02 9b       	mov	r11,r1
8000c446:	0a 9c       	mov	r12,r5
8000c448:	fe b0 f1 2e 	rcall	8000a6a4 <__sprint_r>
8000c44c:	e0 81 00 be 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c450:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c454:	21 06       	sub	r6,16
8000c456:	c0 38       	rjmp	8000c45c <_vfprintf_r+0x1d9c>
8000c458:	4d 22       	lddpc	r2,8000c5a0 <_vfprintf_r+0x1ee0>
8000c45a:	31 00       	mov	r0,16
8000c45c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c460:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c464:	4c fa       	lddpc	r10,8000c5a0 <_vfprintf_r+0x1ee0>
8000c466:	59 06       	cp.w	r6,16
8000c468:	fe 99 ff df 	brgt	8000c426 <_vfprintf_r+0x1d66>
8000c46c:	0c 09       	add	r9,r6
8000c46e:	89 0a       	st.w	r4[0x0],r10
8000c470:	fb 49 06 90 	st.w	sp[1680],r9
8000c474:	2f f8       	sub	r8,-1
8000c476:	89 16       	st.w	r4[0x4],r6
8000c478:	fb 48 06 8c 	st.w	sp[1676],r8
8000c47c:	c0 e8       	rjmp	8000c498 <_vfprintf_r+0x1dd8>
8000c47e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c482:	2f f8       	sub	r8,-1
8000c484:	30 19       	mov	r9,1
8000c486:	fb 48 06 90 	st.w	sp[1680],r8
8000c48a:	89 06       	st.w	r4[0x0],r6
8000c48c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c490:	89 19       	st.w	r4[0x4],r9
8000c492:	2f f8       	sub	r8,-1
8000c494:	fb 48 06 8c 	st.w	sp[1676],r8
8000c498:	58 78       	cp.w	r8,7
8000c49a:	e0 89 00 04 	brgt	8000c4a2 <_vfprintf_r+0x1de2>
8000c49e:	2f 84       	sub	r4,-8
8000c4a0:	c0 b8       	rjmp	8000c4b6 <_vfprintf_r+0x1df6>
8000c4a2:	fa ca f9 78 	sub	r10,sp,-1672
8000c4a6:	02 9b       	mov	r11,r1
8000c4a8:	0a 9c       	mov	r12,r5
8000c4aa:	fe b0 f0 fd 	rcall	8000a6a4 <__sprint_r>
8000c4ae:	e0 81 00 8d 	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c4b2:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c4b6:	40 ea       	lddsp	r10,sp[0x38]
8000c4b8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c4bc:	14 08       	add	r8,r10
8000c4be:	fa c9 f9 64 	sub	r9,sp,-1692
8000c4c2:	fb 48 06 90 	st.w	sp[1680],r8
8000c4c6:	89 1a       	st.w	r4[0x4],r10
8000c4c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c4cc:	89 09       	st.w	r4[0x0],r9
8000c4ce:	2f f8       	sub	r8,-1
8000c4d0:	fb 48 06 8c 	st.w	sp[1676],r8
8000c4d4:	58 78       	cp.w	r8,7
8000c4d6:	e0 89 00 04 	brgt	8000c4de <_vfprintf_r+0x1e1e>
8000c4da:	2f 84       	sub	r4,-8
8000c4dc:	c0 a8       	rjmp	8000c4f0 <_vfprintf_r+0x1e30>
8000c4de:	fa ca f9 78 	sub	r10,sp,-1672
8000c4e2:	02 9b       	mov	r11,r1
8000c4e4:	0a 9c       	mov	r12,r5
8000c4e6:	fe b0 f0 df 	rcall	8000a6a4 <__sprint_r>
8000c4ea:	c6 f1       	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c4ec:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c4f0:	e2 13 00 04 	andl	r3,0x4,COH
8000c4f4:	c3 d0       	breq	8000c56e <_vfprintf_r+0x1eae>
8000c4f6:	40 86       	lddsp	r6,sp[0x20]
8000c4f8:	40 39       	lddsp	r9,sp[0xc]
8000c4fa:	12 16       	sub	r6,r9
8000c4fc:	58 06       	cp.w	r6,0
8000c4fe:	e0 89 00 1a 	brgt	8000c532 <_vfprintf_r+0x1e72>
8000c502:	c3 68       	rjmp	8000c56e <_vfprintf_r+0x1eae>
8000c504:	2f 09       	sub	r9,-16
8000c506:	2f f8       	sub	r8,-1
8000c508:	fb 49 06 90 	st.w	sp[1680],r9
8000c50c:	89 03       	st.w	r4[0x0],r3
8000c50e:	89 12       	st.w	r4[0x4],r2
8000c510:	fb 48 06 8c 	st.w	sp[1676],r8
8000c514:	58 78       	cp.w	r8,7
8000c516:	e0 89 00 04 	brgt	8000c51e <_vfprintf_r+0x1e5e>
8000c51a:	2f 84       	sub	r4,-8
8000c51c:	c0 98       	rjmp	8000c52e <_vfprintf_r+0x1e6e>
8000c51e:	00 9a       	mov	r10,r0
8000c520:	02 9b       	mov	r11,r1
8000c522:	0a 9c       	mov	r12,r5
8000c524:	fe b0 f0 c0 	rcall	8000a6a4 <__sprint_r>
8000c528:	c5 01       	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c52a:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c52e:	21 06       	sub	r6,16
8000c530:	c0 58       	rjmp	8000c53a <_vfprintf_r+0x1e7a>
8000c532:	49 d3       	lddpc	r3,8000c5a4 <_vfprintf_r+0x1ee4>
8000c534:	31 02       	mov	r2,16
8000c536:	fa c0 f9 78 	sub	r0,sp,-1672
8000c53a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c53e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c542:	49 9a       	lddpc	r10,8000c5a4 <_vfprintf_r+0x1ee4>
8000c544:	59 06       	cp.w	r6,16
8000c546:	fe 99 ff df 	brgt	8000c504 <_vfprintf_r+0x1e44>
8000c54a:	0c 09       	add	r9,r6
8000c54c:	2f f8       	sub	r8,-1
8000c54e:	89 0a       	st.w	r4[0x0],r10
8000c550:	89 16       	st.w	r4[0x4],r6
8000c552:	fb 49 06 90 	st.w	sp[1680],r9
8000c556:	fb 48 06 8c 	st.w	sp[1676],r8
8000c55a:	58 78       	cp.w	r8,7
8000c55c:	e0 8a 00 09 	brle	8000c56e <_vfprintf_r+0x1eae>
8000c560:	fa ca f9 78 	sub	r10,sp,-1672
8000c564:	02 9b       	mov	r11,r1
8000c566:	0a 9c       	mov	r12,r5
8000c568:	fe b0 f0 9e 	rcall	8000a6a4 <__sprint_r>
8000c56c:	c2 e1       	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c56e:	40 bc       	lddsp	r12,sp[0x2c]
8000c570:	40 36       	lddsp	r6,sp[0xc]
8000c572:	40 8e       	lddsp	lr,sp[0x20]
8000c574:	ec 0e 0c 48 	max	r8,r6,lr
8000c578:	10 0c       	add	r12,r8
8000c57a:	50 bc       	stdsp	sp[0x2c],r12
8000c57c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c580:	58 08       	cp.w	r8,0
8000c582:	c0 80       	breq	8000c592 <_vfprintf_r+0x1ed2>
8000c584:	fa ca f9 78 	sub	r10,sp,-1672
8000c588:	02 9b       	mov	r11,r1
8000c58a:	0a 9c       	mov	r12,r5
8000c58c:	fe b0 f0 8c 	rcall	8000a6a4 <__sprint_r>
8000c590:	c1 c1       	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c592:	30 0b       	mov	r11,0
8000c594:	fa c4 f9 e0 	sub	r4,sp,-1568
8000c598:	fb 4b 06 8c 	st.w	sp[1676],r11
8000c59c:	fe 9f f1 1c 	bral	8000a7d4 <_vfprintf_r+0x114>
8000c5a0:	80 01       	ld.sh	r1,r0[0x0]
8000c5a2:	41 34       	lddsp	r4,sp[0x4c]
8000c5a4:	80 01       	ld.sh	r1,r0[0x0]
8000c5a6:	41 24       	lddsp	r4,sp[0x48]
8000c5a8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c5ac:	58 08       	cp.w	r8,0
8000c5ae:	c0 80       	breq	8000c5be <_vfprintf_r+0x1efe>
8000c5b0:	0a 9c       	mov	r12,r5
8000c5b2:	fa ca f9 78 	sub	r10,sp,-1672
8000c5b6:	02 9b       	mov	r11,r1
8000c5b8:	fe b0 f0 76 	rcall	8000a6a4 <__sprint_r>
8000c5bc:	c0 61       	brne	8000c5c8 <_vfprintf_r+0x1f08>
8000c5be:	30 08       	mov	r8,0
8000c5c0:	fb 48 06 8c 	st.w	sp[1676],r8
8000c5c4:	c0 28       	rjmp	8000c5c8 <_vfprintf_r+0x1f08>
8000c5c6:	40 41       	lddsp	r1,sp[0x10]
8000c5c8:	82 68       	ld.sh	r8,r1[0xc]
8000c5ca:	ed b8 00 06 	bld	r8,0x6
8000c5ce:	c0 31       	brne	8000c5d4 <_vfprintf_r+0x1f14>
8000c5d0:	3f fa       	mov	r10,-1
8000c5d2:	50 ba       	stdsp	sp[0x2c],r10
8000c5d4:	40 bc       	lddsp	r12,sp[0x2c]
8000c5d6:	fe 3d f9 44 	sub	sp,-1724
8000c5da:	d8 32       	popm	r0-r7,pc

8000c5dc <__svfscanf_r>:
8000c5dc:	d4 31       	pushm	r0-r7,lr
8000c5de:	fa cd 03 2c 	sub	sp,sp,812
8000c5e2:	30 07       	mov	r7,0
8000c5e4:	50 4c       	stdsp	sp[0x10],r12
8000c5e6:	16 95       	mov	r5,r11
8000c5e8:	12 96       	mov	r6,r9
8000c5ea:	50 8a       	stdsp	sp[0x20],r10
8000c5ec:	50 a7       	stdsp	sp[0x28],r7
8000c5ee:	50 77       	stdsp	sp[0x1c],r7
8000c5f0:	0e 93       	mov	r3,r7
8000c5f2:	0e 90       	mov	r0,r7
8000c5f4:	50 67       	stdsp	sp[0x18],r7
8000c5f6:	40 8c       	lddsp	r12,sp[0x20]
8000c5f8:	19 89       	ld.ub	r9,r12[0x0]
8000c5fa:	fb 49 03 28 	st.w	sp[808],r9
8000c5fe:	58 09       	cp.w	r9,0
8000c600:	e0 80 0a 3a 	breq	8000da74 <__svfscanf_r+0x1498>
8000c604:	2f fc       	sub	r12,-1
8000c606:	4d 7b       	lddpc	r11,8000c760 <__svfscanf_r+0x184>
8000c608:	50 8c       	stdsp	sp[0x20],r12
8000c60a:	76 0b       	ld.w	r11,r11[0x0]
8000c60c:	50 2b       	stdsp	sp[0x8],r11
8000c60e:	f6 09 07 08 	ld.ub	r8,r11[r9]
8000c612:	e2 18 00 08 	andl	r8,0x8,COH
8000c616:	c1 b0       	breq	8000c64c <__svfscanf_r+0x70>
8000c618:	6a 18       	ld.w	r8,r5[0x4]
8000c61a:	58 08       	cp.w	r8,0
8000c61c:	e0 89 00 07 	brgt	8000c62a <__svfscanf_r+0x4e>
8000c620:	0a 9b       	mov	r11,r5
8000c622:	40 4c       	lddsp	r12,sp[0x10]
8000c624:	e0 a0 1e 1a 	rcall	80010258 <__srefill_r>
8000c628:	ce 71       	brne	8000c5f6 <__svfscanf_r+0x1a>
8000c62a:	6a 08       	ld.w	r8,r5[0x0]
8000c62c:	4c dc       	lddpc	r12,8000c760 <__svfscanf_r+0x184>
8000c62e:	f0 c9 ff ff 	sub	r9,r8,-1
8000c632:	78 0a       	ld.w	r10,r12[0x0]
8000c634:	11 88       	ld.ub	r8,r8[0x0]
8000c636:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000c63a:	ed b8 00 03 	bld	r8,0x3
8000c63e:	cd c1       	brne	8000c5f6 <__svfscanf_r+0x1a>
8000c640:	6a 18       	ld.w	r8,r5[0x4]
8000c642:	8b 09       	st.w	r5[0x0],r9
8000c644:	20 18       	sub	r8,1
8000c646:	2f f0       	sub	r0,-1
8000c648:	8b 18       	st.w	r5[0x4],r8
8000c64a:	ce 7b       	rjmp	8000c618 <__svfscanf_r+0x3c>
8000c64c:	e0 49 00 25 	cp.w	r9,37
8000c650:	e0 81 00 8c 	brne	8000c768 <__svfscanf_r+0x18c>
8000c654:	50 58       	stdsp	sp[0x14],r8
8000c656:	06 94       	mov	r4,r3
8000c658:	10 91       	mov	r1,r8
8000c65a:	10 92       	mov	r2,r8
8000c65c:	36 8a       	mov	r10,104
8000c65e:	36 c9       	mov	r9,108
8000c660:	34 5c       	mov	r12,69
8000c662:	34 fe       	mov	lr,79
8000c664:	40 8b       	lddsp	r11,sp[0x20]
8000c666:	17 38       	ld.ub	r8,r11++
8000c668:	50 8b       	stdsp	sp[0x20],r11
8000c66a:	36 4b       	mov	r11,100
8000c66c:	f6 08 18 00 	cp.b	r8,r11
8000c670:	e0 80 00 bd 	breq	8000c7ea <__svfscanf_r+0x20e>
8000c674:	e0 8b 00 48 	brhi	8000c704 <__svfscanf_r+0x128>
8000c678:	f8 08 18 00 	cp.b	r8,r12
8000c67c:	c7 40       	breq	8000c764 <__svfscanf_r+0x188>
8000c67e:	e0 8b 00 27 	brhi	8000c6cc <__svfscanf_r+0xf0>
8000c682:	33 9b       	mov	r11,57
8000c684:	f6 08 18 00 	cp.b	r8,r11
8000c688:	e0 8b 00 1c 	brhi	8000c6c0 <__svfscanf_r+0xe4>
8000c68c:	33 0b       	mov	r11,48
8000c68e:	f6 08 18 00 	cp.b	r8,r11
8000c692:	e0 82 00 96 	brhs	8000c7be <__svfscanf_r+0x1e2>
8000c696:	32 5b       	mov	r11,37
8000c698:	f6 08 18 00 	cp.b	r8,r11
8000c69c:	c6 60       	breq	8000c768 <__svfscanf_r+0x18c>
8000c69e:	e0 8b 00 0b 	brhi	8000c6b4 <__svfscanf_r+0xd8>
8000c6a2:	58 08       	cp.w	r8,0
8000c6a4:	e0 80 09 e6 	breq	8000da70 <__svfscanf_r+0x1494>
8000c6a8:	32 4b       	mov	r11,36
8000c6aa:	f6 08 18 00 	cp.b	r8,r11
8000c6ae:	e0 81 01 c9 	brne	8000ca40 <__svfscanf_r+0x464>
8000c6b2:	c8 c8       	rjmp	8000c7ca <__svfscanf_r+0x1ee>
8000c6b4:	32 ab       	mov	r11,42
8000c6b6:	f6 08 18 00 	cp.b	r8,r11
8000c6ba:	e0 81 01 c3 	brne	8000ca40 <__svfscanf_r+0x464>
8000c6be:	c6 f8       	rjmp	8000c79c <__svfscanf_r+0x1c0>
8000c6c0:	34 49       	mov	r9,68
8000c6c2:	f2 08 18 00 	cp.b	r8,r9
8000c6c6:	e0 81 01 bd 	brne	8000ca40 <__svfscanf_r+0x464>
8000c6ca:	c8 f8       	rjmp	8000c7e8 <__svfscanf_r+0x20c>
8000c6cc:	fc 08 18 00 	cp.b	r8,lr
8000c6d0:	e0 80 00 97 	breq	8000c7fe <__svfscanf_r+0x222>
8000c6d4:	e0 8b 00 0c 	brhi	8000c6ec <__svfscanf_r+0x110>
8000c6d8:	34 7b       	mov	r11,71
8000c6da:	f6 08 18 00 	cp.b	r8,r11
8000c6de:	c4 30       	breq	8000c764 <__svfscanf_r+0x188>
8000c6e0:	34 cb       	mov	r11,76
8000c6e2:	f6 08 18 00 	cp.b	r8,r11
8000c6e6:	e0 81 01 ad 	brne	8000ca40 <__svfscanf_r+0x464>
8000c6ea:	c6 68       	rjmp	8000c7b6 <__svfscanf_r+0x1da>
8000c6ec:	35 b9       	mov	r9,91
8000c6ee:	f2 08 18 00 	cp.b	r8,r9
8000c6f2:	e0 80 00 9c 	breq	8000c82a <__svfscanf_r+0x24e>
8000c6f6:	36 39       	mov	r9,99
8000c6f8:	f2 08 18 00 	cp.b	r8,r9
8000c6fc:	e0 80 00 a2 	breq	8000c840 <__svfscanf_r+0x264>
8000c700:	35 89       	mov	r9,88
8000c702:	c2 a8       	rjmp	8000c756 <__svfscanf_r+0x17a>
8000c704:	36 eb       	mov	r11,110
8000c706:	f6 08 18 00 	cp.b	r8,r11
8000c70a:	e0 80 00 a6 	breq	8000c856 <__svfscanf_r+0x27a>
8000c70e:	e0 8b 00 0f 	brhi	8000c72c <__svfscanf_r+0x150>
8000c712:	f4 08 18 00 	cp.b	r8,r10
8000c716:	c5 20       	breq	8000c7ba <__svfscanf_r+0x1de>
8000c718:	c2 63       	brcs	8000c764 <__svfscanf_r+0x188>
8000c71a:	36 9b       	mov	r11,105
8000c71c:	f6 08 18 00 	cp.b	r8,r11
8000c720:	c6 a0       	breq	8000c7f4 <__svfscanf_r+0x218>
8000c722:	f2 08 18 00 	cp.b	r8,r9
8000c726:	e0 81 01 8d 	brne	8000ca40 <__svfscanf_r+0x464>
8000c72a:	c3 b8       	rjmp	8000c7a0 <__svfscanf_r+0x1c4>
8000c72c:	37 39       	mov	r9,115
8000c72e:	f2 08 18 00 	cp.b	r8,r9
8000c732:	c7 a0       	breq	8000c826 <__svfscanf_r+0x24a>
8000c734:	e0 8b 00 0c 	brhi	8000c74c <__svfscanf_r+0x170>
8000c738:	36 f9       	mov	r9,111
8000c73a:	f2 08 18 00 	cp.b	r8,r9
8000c73e:	c6 10       	breq	8000c800 <__svfscanf_r+0x224>
8000c740:	37 09       	mov	r9,112
8000c742:	f2 08 18 00 	cp.b	r8,r9
8000c746:	e0 81 01 7d 	brne	8000ca40 <__svfscanf_r+0x464>
8000c74a:	c7 e8       	rjmp	8000c846 <__svfscanf_r+0x26a>
8000c74c:	37 59       	mov	r9,117
8000c74e:	f2 08 18 00 	cp.b	r8,r9
8000c752:	c5 d0       	breq	8000c80c <__svfscanf_r+0x230>
8000c754:	37 89       	mov	r9,120
8000c756:	f2 08 18 00 	cp.b	r8,r9
8000c75a:	e0 81 01 73 	brne	8000ca40 <__svfscanf_r+0x464>
8000c75e:	c5 d8       	rjmp	8000c818 <__svfscanf_r+0x23c>
8000c760:	00 00       	add	r0,r0
8000c762:	00 cc       	st.b	r0++,r12
8000c764:	30 48       	mov	r8,4
8000c766:	c7 a9       	rjmp	8000ca5a <__svfscanf_r+0x47e>
8000c768:	6a 18       	ld.w	r8,r5[0x4]
8000c76a:	58 08       	cp.w	r8,0
8000c76c:	e0 89 00 08 	brgt	8000c77c <__svfscanf_r+0x1a0>
8000c770:	0a 9b       	mov	r11,r5
8000c772:	40 4c       	lddsp	r12,sp[0x10]
8000c774:	e0 a0 1d 72 	rcall	80010258 <__srefill_r>
8000c778:	e0 81 09 75 	brne	8000da62 <__svfscanf_r+0x1486>
8000c77c:	40 8a       	lddsp	r10,sp[0x20]
8000c77e:	6a 08       	ld.w	r8,r5[0x0]
8000c780:	f5 39 ff ff 	ld.ub	r9,r10[-1]
8000c784:	11 8a       	ld.ub	r10,r8[0x0]
8000c786:	f2 0a 18 00 	cp.b	r10,r9
8000c78a:	e0 81 09 75 	brne	8000da74 <__svfscanf_r+0x1498>
8000c78e:	2f f8       	sub	r8,-1
8000c790:	2f f0       	sub	r0,-1
8000c792:	8b 08       	st.w	r5[0x0],r8
8000c794:	6a 18       	ld.w	r8,r5[0x4]
8000c796:	20 18       	sub	r8,1
8000c798:	8b 18       	st.w	r5[0x4],r8
8000c79a:	c2 eb       	rjmp	8000c5f6 <__svfscanf_r+0x1a>
8000c79c:	a5 a1       	sbr	r1,0x4
8000c79e:	c6 3b       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7a0:	40 8b       	lddsp	r11,sp[0x20]
8000c7a2:	17 88       	ld.ub	r8,r11[0x0]
8000c7a4:	f2 08 18 00 	cp.b	r8,r9
8000c7a8:	c0 51       	brne	8000c7b2 <__svfscanf_r+0x1d6>
8000c7aa:	2f fb       	sub	r11,-1
8000c7ac:	a1 b1       	sbr	r1,0x1
8000c7ae:	50 8b       	stdsp	sp[0x20],r11
8000c7b0:	c5 ab       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7b2:	a1 a1       	sbr	r1,0x0
8000c7b4:	c5 8b       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7b6:	a1 b1       	sbr	r1,0x1
8000c7b8:	c5 6b       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7ba:	a3 a1       	sbr	r1,0x2
8000c7bc:	c5 4b       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7be:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000c7c2:	a1 72       	lsl	r2,0x1
8000c7c4:	23 02       	sub	r2,48
8000c7c6:	10 02       	add	r2,r8
8000c7c8:	c4 eb       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7ca:	e0 42 00 20 	cp.w	r2,32
8000c7ce:	e0 8b 00 08 	brhi	8000c7de <__svfscanf_r+0x202>
8000c7d2:	e4 c4 00 01 	sub	r4,r2,1
8000c7d6:	30 18       	mov	r8,1
8000c7d8:	30 02       	mov	r2,0
8000c7da:	50 58       	stdsp	sp[0x14],r8
8000c7dc:	c4 4b       	rjmp	8000c664 <__svfscanf_r+0x88>
8000c7de:	31 68       	mov	r8,22
8000c7e0:	40 4c       	lddsp	r12,sp[0x10]
8000c7e2:	99 38       	st.w	r12[0xc],r8
8000c7e4:	e0 8f 09 3f 	bral	8000da62 <__svfscanf_r+0x1486>
8000c7e8:	a1 a1       	sbr	r1,0x0
8000c7ea:	fe cb b4 de 	sub	r11,pc,-19234
8000c7ee:	30 aa       	mov	r10,10
8000c7f0:	50 ab       	stdsp	sp[0x28],r11
8000c7f2:	c3 08       	rjmp	8000c852 <__svfscanf_r+0x276>
8000c7f4:	fe c9 b4 e8 	sub	r9,pc,-19224
8000c7f8:	30 08       	mov	r8,0
8000c7fa:	50 a9       	stdsp	sp[0x28],r9
8000c7fc:	c2 d9       	rjmp	8000ca56 <__svfscanf_r+0x47a>
8000c7fe:	a1 a1       	sbr	r1,0x0
8000c800:	fe cc b2 3c 	sub	r12,pc,-19908
8000c804:	30 8b       	mov	r11,8
8000c806:	50 ac       	stdsp	sp[0x28],r12
8000c808:	50 7b       	stdsp	sp[0x1c],r11
8000c80a:	c2 79       	rjmp	8000ca58 <__svfscanf_r+0x47c>
8000c80c:	fe ca b2 48 	sub	r10,pc,-19896
8000c810:	30 a9       	mov	r9,10
8000c812:	50 aa       	stdsp	sp[0x28],r10
8000c814:	50 79       	stdsp	sp[0x1c],r9
8000c816:	c2 19       	rjmp	8000ca58 <__svfscanf_r+0x47c>
8000c818:	fe c8 b2 54 	sub	r8,pc,-19884
8000c81c:	31 0c       	mov	r12,16
8000c81e:	a9 b1       	sbr	r1,0x9
8000c820:	50 a8       	stdsp	sp[0x28],r8
8000c822:	50 7c       	stdsp	sp[0x1c],r12
8000c824:	c1 a9       	rjmp	8000ca58 <__svfscanf_r+0x47c>
8000c826:	30 28       	mov	r8,2
8000c828:	c1 99       	rjmp	8000ca5a <__svfscanf_r+0x47e>
8000c82a:	30 18       	mov	r8,1
8000c82c:	40 8b       	lddsp	r11,sp[0x20]
8000c82e:	50 08       	stdsp	sp[0x0],r8
8000c830:	fa cc fe 60 	sub	r12,sp,-416
8000c834:	e0 a0 1d ae 	rcall	80010390 <__sccl>
8000c838:	a7 a1       	sbr	r1,0x6
8000c83a:	50 8c       	stdsp	sp[0x20],r12
8000c83c:	40 08       	lddsp	r8,sp[0x0]
8000c83e:	c0 e9       	rjmp	8000ca5a <__svfscanf_r+0x47e>
8000c840:	a7 a1       	sbr	r1,0x6
8000c842:	30 08       	mov	r8,0
8000c844:	c0 b9       	rjmp	8000ca5a <__svfscanf_r+0x47e>
8000c846:	fe cb b2 82 	sub	r11,pc,-19838
8000c84a:	e8 11 02 20 	orl	r1,0x220
8000c84e:	50 ab       	stdsp	sp[0x28],r11
8000c850:	31 0a       	mov	r10,16
8000c852:	50 7a       	stdsp	sp[0x1c],r10
8000c854:	c0 29       	rjmp	8000ca58 <__svfscanf_r+0x47c>
8000c856:	ed b1 00 04 	bld	r1,0x4
8000c85a:	fe 90 fe ce 	breq	8000c5f6 <__svfscanf_r+0x1a>
8000c85e:	ed b1 00 02 	bld	r1,0x2
8000c862:	c4 51       	brne	8000c8ec <__svfscanf_r+0x310>
8000c864:	40 59       	lddsp	r9,sp[0x14]
8000c866:	58 09       	cp.w	r9,0
8000c868:	c2 50       	breq	8000c8b2 <__svfscanf_r+0x2d6>
8000c86a:	0e 34       	cp.w	r4,r7
8000c86c:	c0 64       	brge	8000c878 <__svfscanf_r+0x29c>
8000c86e:	fa c8 fc d4 	sub	r8,sp,-812
8000c872:	f0 04 00 24 	add	r4,r8,r4<<0x2
8000c876:	c2 78       	rjmp	8000c8c4 <__svfscanf_r+0x2e8>
8000c878:	fa ca fd 60 	sub	r10,sp,-672
8000c87c:	0c 99       	mov	r9,r6
8000c87e:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000c882:	0e 98       	mov	r8,r7
8000c884:	13 0b       	ld.w	r11,r9++
8000c886:	14 ab       	st.w	r10++,r11
8000c888:	2f f8       	sub	r8,-1
8000c88a:	10 34       	cp.w	r4,r8
8000c88c:	cf c4       	brge	8000c884 <__svfscanf_r+0x2a8>
8000c88e:	ee c9 ff ff 	sub	r9,r7,-1
8000c892:	ee 08 11 ff 	rsub	r8,r7,-1
8000c896:	f0 c7 ff ff 	sub	r7,r8,-1
8000c89a:	2f e8       	sub	r8,-2
8000c89c:	08 08       	add	r8,r4
8000c89e:	08 07       	add	r7,r4
8000c8a0:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000c8a4:	f2 07 00 07 	add	r7,r9,r7
8000c8a8:	fa c8 fd 60 	sub	r8,sp,-672
8000c8ac:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000c8b0:	c1 c8       	rjmp	8000c8e8 <__svfscanf_r+0x30c>
8000c8b2:	e6 c8 ff ff 	sub	r8,r3,-1
8000c8b6:	0e 33       	cp.w	r3,r7
8000c8b8:	c0 94       	brge	8000c8ca <__svfscanf_r+0x2ee>
8000c8ba:	fa cc fc d4 	sub	r12,sp,-812
8000c8be:	10 93       	mov	r3,r8
8000c8c0:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000c8c4:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000c8c8:	c1 08       	rjmp	8000c8e8 <__svfscanf_r+0x30c>
8000c8ca:	6c 04       	ld.w	r4,r6[0x0]
8000c8cc:	2f c6       	sub	r6,-4
8000c8ce:	59 f7       	cp.w	r7,31
8000c8d0:	e0 89 00 0b 	brgt	8000c8e6 <__svfscanf_r+0x30a>
8000c8d4:	10 93       	mov	r3,r8
8000c8d6:	fa cb fc d4 	sub	r11,sp,-812
8000c8da:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000c8de:	2f f7       	sub	r7,-1
8000c8e0:	f1 44 ff 74 	st.w	r8[-140],r4
8000c8e4:	c0 28       	rjmp	8000c8e8 <__svfscanf_r+0x30c>
8000c8e6:	10 93       	mov	r3,r8
8000c8e8:	a8 00       	st.h	r4[0x0],r0
8000c8ea:	c8 6a       	rjmp	8000c5f6 <__svfscanf_r+0x1a>
8000c8ec:	ed b1 00 00 	bld	r1,0x0
8000c8f0:	c1 e1       	brne	8000c92c <__svfscanf_r+0x350>
8000c8f2:	40 5a       	lddsp	r10,sp[0x14]
8000c8f4:	58 0a       	cp.w	r10,0
8000c8f6:	e0 80 00 87 	breq	8000ca04 <__svfscanf_r+0x428>
8000c8fa:	0e 34       	cp.w	r4,r7
8000c8fc:	c6 f5       	brlt	8000c9da <__svfscanf_r+0x3fe>
8000c8fe:	fa ca fd 60 	sub	r10,sp,-672
8000c902:	0c 99       	mov	r9,r6
8000c904:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000c908:	0e 98       	mov	r8,r7
8000c90a:	13 0b       	ld.w	r11,r9++
8000c90c:	14 ab       	st.w	r10++,r11
8000c90e:	2f f8       	sub	r8,-1
8000c910:	10 34       	cp.w	r4,r8
8000c912:	cf c4       	brge	8000c90a <__svfscanf_r+0x32e>
8000c914:	ee c9 ff ff 	sub	r9,r7,-1
8000c918:	ee 08 11 ff 	rsub	r8,r7,-1
8000c91c:	f0 c7 ff ff 	sub	r7,r8,-1
8000c920:	2f e8       	sub	r8,-2
8000c922:	08 07       	add	r7,r4
8000c924:	08 08       	add	r8,r4
8000c926:	f2 07 00 07 	add	r7,r9,r7
8000c92a:	c6 68       	rjmp	8000c9f6 <__svfscanf_r+0x41a>
8000c92c:	e2 11 00 02 	andl	r1,0x2,COH
8000c930:	c4 90       	breq	8000c9c2 <__svfscanf_r+0x3e6>
8000c932:	40 5a       	lddsp	r10,sp[0x14]
8000c934:	58 0a       	cp.w	r10,0
8000c936:	c2 50       	breq	8000c980 <__svfscanf_r+0x3a4>
8000c938:	0e 34       	cp.w	r4,r7
8000c93a:	c0 64       	brge	8000c946 <__svfscanf_r+0x36a>
8000c93c:	fa c9 fc d4 	sub	r9,sp,-812
8000c940:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000c944:	c2 78       	rjmp	8000c992 <__svfscanf_r+0x3b6>
8000c946:	fa ca fd 60 	sub	r10,sp,-672
8000c94a:	0c 99       	mov	r9,r6
8000c94c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000c950:	0e 98       	mov	r8,r7
8000c952:	13 0b       	ld.w	r11,r9++
8000c954:	14 ab       	st.w	r10++,r11
8000c956:	2f f8       	sub	r8,-1
8000c958:	10 34       	cp.w	r4,r8
8000c95a:	cf c4       	brge	8000c952 <__svfscanf_r+0x376>
8000c95c:	ee c9 ff ff 	sub	r9,r7,-1
8000c960:	ee 08 11 ff 	rsub	r8,r7,-1
8000c964:	f0 c7 ff ff 	sub	r7,r8,-1
8000c968:	2f e8       	sub	r8,-2
8000c96a:	08 08       	add	r8,r4
8000c96c:	08 07       	add	r7,r4
8000c96e:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000c972:	f2 07 00 07 	add	r7,r9,r7
8000c976:	fa c8 fd 60 	sub	r8,sp,-672
8000c97a:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000c97e:	c1 c8       	rjmp	8000c9b6 <__svfscanf_r+0x3da>
8000c980:	e6 c8 ff ff 	sub	r8,r3,-1
8000c984:	0e 33       	cp.w	r3,r7
8000c986:	c0 94       	brge	8000c998 <__svfscanf_r+0x3bc>
8000c988:	fa cc fc d4 	sub	r12,sp,-812
8000c98c:	10 93       	mov	r3,r8
8000c98e:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000c992:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000c996:	c1 08       	rjmp	8000c9b6 <__svfscanf_r+0x3da>
8000c998:	6c 04       	ld.w	r4,r6[0x0]
8000c99a:	2f c6       	sub	r6,-4
8000c99c:	59 f7       	cp.w	r7,31
8000c99e:	e0 89 00 0b 	brgt	8000c9b4 <__svfscanf_r+0x3d8>
8000c9a2:	10 93       	mov	r3,r8
8000c9a4:	fa cb fc d4 	sub	r11,sp,-812
8000c9a8:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000c9ac:	2f f7       	sub	r7,-1
8000c9ae:	f1 44 ff 74 	st.w	r8[-140],r4
8000c9b2:	c0 28       	rjmp	8000c9b6 <__svfscanf_r+0x3da>
8000c9b4:	10 93       	mov	r3,r8
8000c9b6:	e0 08 14 1f 	asr	r8,r0,0x1f
8000c9ba:	89 10       	st.w	r4[0x4],r0
8000c9bc:	89 08       	st.w	r4[0x0],r8
8000c9be:	fe 9f fe 1c 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000c9c2:	40 5a       	lddsp	r10,sp[0x14]
8000c9c4:	58 0a       	cp.w	r10,0
8000c9c6:	c1 f0       	breq	8000ca04 <__svfscanf_r+0x428>
8000c9c8:	0e 34       	cp.w	r4,r7
8000c9ca:	c0 85       	brlt	8000c9da <__svfscanf_r+0x3fe>
8000c9cc:	fa ca fd 60 	sub	r10,sp,-672
8000c9d0:	0c 99       	mov	r9,r6
8000c9d2:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000c9d6:	0e 98       	mov	r8,r7
8000c9d8:	c0 68       	rjmp	8000c9e4 <__svfscanf_r+0x408>
8000c9da:	fa c9 fc d4 	sub	r9,sp,-812
8000c9de:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000c9e2:	c1 a8       	rjmp	8000ca16 <__svfscanf_r+0x43a>
8000c9e4:	13 0b       	ld.w	r11,r9++
8000c9e6:	14 ab       	st.w	r10++,r11
8000c9e8:	2f f8       	sub	r8,-1
8000c9ea:	10 34       	cp.w	r4,r8
8000c9ec:	cf c4       	brge	8000c9e4 <__svfscanf_r+0x408>
8000c9ee:	ee 08 11 01 	rsub	r8,r7,1
8000c9f2:	08 08       	add	r8,r4
8000c9f4:	10 07       	add	r7,r8
8000c9f6:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000c9fa:	fa c8 fd 60 	sub	r8,sp,-672
8000c9fe:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000ca02:	c1 c8       	rjmp	8000ca3a <__svfscanf_r+0x45e>
8000ca04:	e6 c8 ff ff 	sub	r8,r3,-1
8000ca08:	0e 33       	cp.w	r3,r7
8000ca0a:	c0 94       	brge	8000ca1c <__svfscanf_r+0x440>
8000ca0c:	fa cc fc d4 	sub	r12,sp,-812
8000ca10:	10 93       	mov	r3,r8
8000ca12:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000ca16:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000ca1a:	c1 08       	rjmp	8000ca3a <__svfscanf_r+0x45e>
8000ca1c:	6c 04       	ld.w	r4,r6[0x0]
8000ca1e:	2f c6       	sub	r6,-4
8000ca20:	59 f7       	cp.w	r7,31
8000ca22:	e0 89 00 0b 	brgt	8000ca38 <__svfscanf_r+0x45c>
8000ca26:	10 93       	mov	r3,r8
8000ca28:	fa cb fc d4 	sub	r11,sp,-812
8000ca2c:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000ca30:	2f f7       	sub	r7,-1
8000ca32:	f1 44 ff 74 	st.w	r8[-140],r4
8000ca36:	c0 28       	rjmp	8000ca3a <__svfscanf_r+0x45e>
8000ca38:	10 93       	mov	r3,r8
8000ca3a:	89 00       	st.w	r4[0x0],r0
8000ca3c:	fe 9f fd dd 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000ca40:	40 2a       	lddsp	r10,sp[0x8]
8000ca42:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000ca46:	ed b8 00 00 	bld	r8,0x0
8000ca4a:	c0 21       	brne	8000ca4e <__svfscanf_r+0x472>
8000ca4c:	a1 a1       	sbr	r1,0x0
8000ca4e:	fe c9 b7 42 	sub	r9,pc,-18622
8000ca52:	30 a8       	mov	r8,10
8000ca54:	50 a9       	stdsp	sp[0x28],r9
8000ca56:	50 78       	stdsp	sp[0x1c],r8
8000ca58:	30 38       	mov	r8,3
8000ca5a:	6a 19       	ld.w	r9,r5[0x4]
8000ca5c:	58 09       	cp.w	r9,0
8000ca5e:	e0 89 00 0a 	brgt	8000ca72 <__svfscanf_r+0x496>
8000ca62:	50 08       	stdsp	sp[0x0],r8
8000ca64:	0a 9b       	mov	r11,r5
8000ca66:	40 4c       	lddsp	r12,sp[0x10]
8000ca68:	e0 a0 1b f8 	rcall	80010258 <__srefill_r>
8000ca6c:	40 08       	lddsp	r8,sp[0x0]
8000ca6e:	e0 81 07 fa 	brne	8000da62 <__svfscanf_r+0x1486>
8000ca72:	ed b1 00 06 	bld	r1,0x6
8000ca76:	c1 31       	brne	8000ca9c <__svfscanf_r+0x4c0>
8000ca78:	c1 d8       	rjmp	8000cab2 <__svfscanf_r+0x4d6>
8000ca7a:	6a 19       	ld.w	r9,r5[0x4]
8000ca7c:	20 19       	sub	r9,1
8000ca7e:	8b 19       	st.w	r5[0x4],r9
8000ca80:	58 09       	cp.w	r9,0
8000ca82:	e0 8a 00 04 	brle	8000ca8a <__svfscanf_r+0x4ae>
8000ca86:	8b 0b       	st.w	r5[0x0],r11
8000ca88:	c0 98       	rjmp	8000ca9a <__svfscanf_r+0x4be>
8000ca8a:	50 08       	stdsp	sp[0x0],r8
8000ca8c:	0a 9b       	mov	r11,r5
8000ca8e:	40 4c       	lddsp	r12,sp[0x10]
8000ca90:	e0 a0 1b e4 	rcall	80010258 <__srefill_r>
8000ca94:	40 08       	lddsp	r8,sp[0x0]
8000ca96:	e0 81 07 e6 	brne	8000da62 <__svfscanf_r+0x1486>
8000ca9a:	2f f0       	sub	r0,-1
8000ca9c:	6a 09       	ld.w	r9,r5[0x0]
8000ca9e:	4b 5c       	lddpc	r12,8000cb70 <__svfscanf_r+0x594>
8000caa0:	f2 cb ff ff 	sub	r11,r9,-1
8000caa4:	78 0a       	ld.w	r10,r12[0x0]
8000caa6:	13 89       	ld.ub	r9,r9[0x0]
8000caa8:	f4 09 07 09 	ld.ub	r9,r10[r9]
8000caac:	ed b9 00 03 	bld	r9,0x3
8000cab0:	ce 50       	breq	8000ca7a <__svfscanf_r+0x49e>
8000cab2:	58 28       	cp.w	r8,2
8000cab4:	e0 80 01 c2 	breq	8000ce38 <__svfscanf_r+0x85c>
8000cab8:	e0 89 00 05 	brgt	8000cac2 <__svfscanf_r+0x4e6>
8000cabc:	58 18       	cp.w	r8,1
8000cabe:	c0 81       	brne	8000cace <__svfscanf_r+0x4f2>
8000cac0:	c1 c9       	rjmp	8000ccf8 <__svfscanf_r+0x71c>
8000cac2:	58 38       	cp.w	r8,3
8000cac4:	e0 80 03 14 	breq	8000d0ec <__svfscanf_r+0xb10>
8000cac8:	58 48       	cp.w	r8,4
8000caca:	e0 80 05 0f 	breq	8000d4e8 <__svfscanf_r+0xf0c>
8000cace:	02 9b       	mov	r11,r1
8000cad0:	e2 1b 00 10 	andl	r11,0x10,COH
8000cad4:	50 2b       	stdsp	sp[0x8],r11
8000cad6:	58 02       	cp.w	r2,0
8000cad8:	f9 b2 00 01 	moveq	r2,1
8000cadc:	e3 d1 c0 01 	bfextu	r1,r1,0x0,0x1
8000cae0:	e0 80 00 9d 	breq	8000cc1a <__svfscanf_r+0x63e>
8000cae4:	58 0b       	cp.w	r11,0
8000cae6:	c0 30       	breq	8000caec <__svfscanf_r+0x510>
8000cae8:	30 01       	mov	r1,0
8000caea:	c4 78       	rjmp	8000cb78 <__svfscanf_r+0x59c>
8000caec:	40 5a       	lddsp	r10,sp[0x14]
8000caee:	58 0a       	cp.w	r10,0
8000caf0:	c2 50       	breq	8000cb3a <__svfscanf_r+0x55e>
8000caf2:	0e 34       	cp.w	r4,r7
8000caf4:	c0 64       	brge	8000cb00 <__svfscanf_r+0x524>
8000caf6:	fa c9 fc d4 	sub	r9,sp,-812
8000cafa:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000cafe:	c2 78       	rjmp	8000cb4c <__svfscanf_r+0x570>
8000cb00:	fa ca fd 60 	sub	r10,sp,-672
8000cb04:	0c 99       	mov	r9,r6
8000cb06:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000cb0a:	0e 98       	mov	r8,r7
8000cb0c:	13 0b       	ld.w	r11,r9++
8000cb0e:	14 ab       	st.w	r10++,r11
8000cb10:	2f f8       	sub	r8,-1
8000cb12:	10 34       	cp.w	r4,r8
8000cb14:	cf c4       	brge	8000cb0c <__svfscanf_r+0x530>
8000cb16:	ee c9 ff ff 	sub	r9,r7,-1
8000cb1a:	ee 08 11 ff 	rsub	r8,r7,-1
8000cb1e:	f0 c7 ff ff 	sub	r7,r8,-1
8000cb22:	2f e8       	sub	r8,-2
8000cb24:	08 08       	add	r8,r4
8000cb26:	08 07       	add	r7,r4
8000cb28:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000cb2c:	f2 07 00 07 	add	r7,r9,r7
8000cb30:	fa c8 fd 60 	sub	r8,sp,-672
8000cb34:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000cb38:	c1 f8       	rjmp	8000cb76 <__svfscanf_r+0x59a>
8000cb3a:	e6 c8 ff ff 	sub	r8,r3,-1
8000cb3e:	0e 33       	cp.w	r3,r7
8000cb40:	c0 94       	brge	8000cb52 <__svfscanf_r+0x576>
8000cb42:	fa cc fc d4 	sub	r12,sp,-812
8000cb46:	10 93       	mov	r3,r8
8000cb48:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000cb4c:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000cb50:	c1 38       	rjmp	8000cb76 <__svfscanf_r+0x59a>
8000cb52:	6c 04       	ld.w	r4,r6[0x0]
8000cb54:	2f c6       	sub	r6,-4
8000cb56:	59 f7       	cp.w	r7,31
8000cb58:	e0 89 00 0e 	brgt	8000cb74 <__svfscanf_r+0x598>
8000cb5c:	10 93       	mov	r3,r8
8000cb5e:	fa cb fc d4 	sub	r11,sp,-812
8000cb62:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000cb66:	2f f7       	sub	r7,-1
8000cb68:	f1 44 ff 74 	st.w	r8[-140],r4
8000cb6c:	c0 58       	rjmp	8000cb76 <__svfscanf_r+0x59a>
8000cb6e:	d7 03       	nop
8000cb70:	00 00       	add	r0,r0
8000cb72:	00 cc       	st.b	r0++,r12
8000cb74:	10 93       	mov	r3,r8
8000cb76:	08 91       	mov	r1,r4
8000cb78:	30 04       	mov	r4,0
8000cb7a:	4d 0a       	lddpc	r10,8000ccb8 <__svfscanf_r+0x6dc>
8000cb7c:	74 08       	ld.w	r8,r10[0x0]
8000cb7e:	10 34       	cp.w	r4,r8
8000cb80:	e0 80 07 71 	breq	8000da62 <__svfscanf_r+0x1486>
8000cb84:	6a 08       	ld.w	r8,r5[0x0]
8000cb86:	11 89       	ld.ub	r9,r8[0x0]
8000cb88:	fa c8 fc d4 	sub	r8,sp,-812
8000cb8c:	08 08       	add	r8,r4
8000cb8e:	f1 69 fd 14 	st.b	r8[-748],r9
8000cb92:	6a 18       	ld.w	r8,r5[0x4]
8000cb94:	20 18       	sub	r8,1
8000cb96:	8b 18       	st.w	r5[0x4],r8
8000cb98:	6a 08       	ld.w	r8,r5[0x0]
8000cb9a:	2f f8       	sub	r8,-1
8000cb9c:	30 8a       	mov	r10,8
8000cb9e:	8b 08       	st.w	r5[0x0],r8
8000cba0:	30 0b       	mov	r11,0
8000cba2:	fa cc fc e0 	sub	r12,sp,-800
8000cba6:	fe b0 ea 7a 	rcall	8000a09a <memset>
8000cbaa:	2f f4       	sub	r4,-1
8000cbac:	fa c8 fc e0 	sub	r8,sp,-800
8000cbb0:	08 99       	mov	r9,r4
8000cbb2:	fa ca ff c0 	sub	r10,sp,-64
8000cbb6:	02 9b       	mov	r11,r1
8000cbb8:	40 4c       	lddsp	r12,sp[0x10]
8000cbba:	e0 a0 15 8f 	rcall	8000f6d8 <_mbrtowc_r>
8000cbbe:	5b fc       	cp.w	r12,-1
8000cbc0:	e0 80 07 51 	breq	8000da62 <__svfscanf_r+0x1486>
8000cbc4:	58 0c       	cp.w	r12,0
8000cbc6:	c0 61       	brne	8000cbd2 <__svfscanf_r+0x5f6>
8000cbc8:	40 29       	lddsp	r9,sp[0x8]
8000cbca:	58 09       	cp.w	r9,0
8000cbcc:	c0 51       	brne	8000cbd6 <__svfscanf_r+0x5fa>
8000cbce:	83 09       	st.w	r1[0x0],r9
8000cbd0:	c0 38       	rjmp	8000cbd6 <__svfscanf_r+0x5fa>
8000cbd2:	5b ec       	cp.w	r12,-2
8000cbd4:	c0 b0       	breq	8000cbea <__svfscanf_r+0x60e>
8000cbd6:	08 00       	add	r0,r4
8000cbd8:	40 28       	lddsp	r8,sp[0x8]
8000cbda:	20 12       	sub	r2,1
8000cbdc:	58 08       	cp.w	r8,0
8000cbde:	f9 b4 01 00 	movne	r4,0
8000cbe2:	f7 b1 00 fc 	subeq	r1,-4
8000cbe6:	fb f4 00 02 	ld.weq	r4,sp[0x8]
8000cbea:	6a 18       	ld.w	r8,r5[0x4]
8000cbec:	58 08       	cp.w	r8,0
8000cbee:	e0 89 00 0b 	brgt	8000cc04 <__svfscanf_r+0x628>
8000cbf2:	0a 9b       	mov	r11,r5
8000cbf4:	40 4c       	lddsp	r12,sp[0x10]
8000cbf6:	e0 a0 1b 31 	rcall	80010258 <__srefill_r>
8000cbfa:	c0 50       	breq	8000cc04 <__svfscanf_r+0x628>
8000cbfc:	58 04       	cp.w	r4,0
8000cbfe:	c0 50       	breq	8000cc08 <__svfscanf_r+0x62c>
8000cc00:	e0 8f 07 31 	bral	8000da62 <__svfscanf_r+0x1486>
8000cc04:	58 02       	cp.w	r2,0
8000cc06:	cb a1       	brne	8000cb7a <__svfscanf_r+0x59e>
8000cc08:	40 2c       	lddsp	r12,sp[0x8]
8000cc0a:	58 0c       	cp.w	r12,0
8000cc0c:	fe 91 fc f5 	brne	8000c5f6 <__svfscanf_r+0x1a>
8000cc10:	40 6b       	lddsp	r11,sp[0x18]
8000cc12:	2f fb       	sub	r11,-1
8000cc14:	50 6b       	stdsp	sp[0x18],r11
8000cc16:	fe 9f fc f0 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000cc1a:	40 2a       	lddsp	r10,sp[0x8]
8000cc1c:	58 0a       	cp.w	r10,0
8000cc1e:	c1 a0       	breq	8000cc52 <__svfscanf_r+0x676>
8000cc20:	6a 18       	ld.w	r8,r5[0x4]
8000cc22:	6a 09       	ld.w	r9,r5[0x0]
8000cc24:	04 38       	cp.w	r8,r2
8000cc26:	c0 f4       	brge	8000cc44 <__svfscanf_r+0x668>
8000cc28:	10 09       	add	r9,r8
8000cc2a:	10 12       	sub	r2,r8
8000cc2c:	8b 09       	st.w	r5[0x0],r9
8000cc2e:	10 01       	add	r1,r8
8000cc30:	0a 9b       	mov	r11,r5
8000cc32:	40 4c       	lddsp	r12,sp[0x10]
8000cc34:	e0 a0 1b 12 	rcall	80010258 <__srefill_r>
8000cc38:	cf 40       	breq	8000cc20 <__svfscanf_r+0x644>
8000cc3a:	58 01       	cp.w	r1,0
8000cc3c:	e0 81 01 e7 	brne	8000d00a <__svfscanf_r+0xa2e>
8000cc40:	e0 8f 07 11 	bral	8000da62 <__svfscanf_r+0x1486>
8000cc44:	04 09       	add	r9,r2
8000cc46:	04 18       	sub	r8,r2
8000cc48:	8b 09       	st.w	r5[0x0],r9
8000cc4a:	8b 18       	st.w	r5[0x4],r8
8000cc4c:	04 01       	add	r1,r2
8000cc4e:	e0 8f 01 de 	bral	8000d00a <__svfscanf_r+0xa2e>
8000cc52:	40 59       	lddsp	r9,sp[0x14]
8000cc54:	58 09       	cp.w	r9,0
8000cc56:	c2 50       	breq	8000cca0 <__svfscanf_r+0x6c4>
8000cc58:	0e 34       	cp.w	r4,r7
8000cc5a:	c0 64       	brge	8000cc66 <__svfscanf_r+0x68a>
8000cc5c:	fa c8 fc d4 	sub	r8,sp,-812
8000cc60:	f0 04 00 24 	add	r4,r8,r4<<0x2
8000cc64:	c2 78       	rjmp	8000ccb2 <__svfscanf_r+0x6d6>
8000cc66:	fa ca fd 60 	sub	r10,sp,-672
8000cc6a:	0c 99       	mov	r9,r6
8000cc6c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000cc70:	0e 98       	mov	r8,r7
8000cc72:	13 0b       	ld.w	r11,r9++
8000cc74:	14 ab       	st.w	r10++,r11
8000cc76:	2f f8       	sub	r8,-1
8000cc78:	10 34       	cp.w	r4,r8
8000cc7a:	cf c4       	brge	8000cc72 <__svfscanf_r+0x696>
8000cc7c:	ee c9 ff ff 	sub	r9,r7,-1
8000cc80:	ee 08 11 ff 	rsub	r8,r7,-1
8000cc84:	f0 c7 ff ff 	sub	r7,r8,-1
8000cc88:	2f e8       	sub	r8,-2
8000cc8a:	08 08       	add	r8,r4
8000cc8c:	08 07       	add	r7,r4
8000cc8e:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000cc92:	f2 07 00 07 	add	r7,r9,r7
8000cc96:	fa c8 fd 60 	sub	r8,sp,-672
8000cc9a:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000cc9e:	c1 e8       	rjmp	8000ccda <__svfscanf_r+0x6fe>
8000cca0:	e6 c8 ff ff 	sub	r8,r3,-1
8000cca4:	0e 33       	cp.w	r3,r7
8000cca6:	c0 b4       	brge	8000ccbc <__svfscanf_r+0x6e0>
8000cca8:	fa cc fc d4 	sub	r12,sp,-812
8000ccac:	10 93       	mov	r3,r8
8000ccae:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000ccb2:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000ccb6:	c1 28       	rjmp	8000ccda <__svfscanf_r+0x6fe>
8000ccb8:	00 00       	add	r0,r0
8000ccba:	01 c4       	ld.ub	r4,r0[0x4]
8000ccbc:	6c 04       	ld.w	r4,r6[0x0]
8000ccbe:	2f c6       	sub	r6,-4
8000ccc0:	59 f7       	cp.w	r7,31
8000ccc2:	e0 89 00 0b 	brgt	8000ccd8 <__svfscanf_r+0x6fc>
8000ccc6:	10 93       	mov	r3,r8
8000ccc8:	fa cb fc d4 	sub	r11,sp,-812
8000cccc:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000ccd0:	2f f7       	sub	r7,-1
8000ccd2:	f1 44 ff 74 	st.w	r8[-140],r4
8000ccd6:	c0 28       	rjmp	8000ccda <__svfscanf_r+0x6fe>
8000ccd8:	10 93       	mov	r3,r8
8000ccda:	04 9a       	mov	r10,r2
8000ccdc:	08 9c       	mov	r12,r4
8000ccde:	0a 99       	mov	r9,r5
8000cce0:	30 1b       	mov	r11,1
8000cce2:	e0 a0 0f a3 	rcall	8000ec28 <fread>
8000cce6:	e0 80 06 be 	breq	8000da62 <__svfscanf_r+0x1486>
8000ccea:	40 6a       	lddsp	r10,sp[0x18]
8000ccec:	f8 00 00 00 	add	r0,r12,r0
8000ccf0:	2f fa       	sub	r10,-1
8000ccf2:	50 6a       	stdsp	sp[0x18],r10
8000ccf4:	fe 9f fc 81 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000ccf8:	58 02       	cp.w	r2,0
8000ccfa:	f9 b2 00 ff 	moveq	r2,-1
8000ccfe:	ed b1 00 04 	bld	r1,0x4
8000cd02:	c2 61       	brne	8000cd4e <__svfscanf_r+0x772>
8000cd04:	30 04       	mov	r4,0
8000cd06:	08 91       	mov	r1,r4
8000cd08:	c1 28       	rjmp	8000cd2c <__svfscanf_r+0x750>
8000cd0a:	6a 18       	ld.w	r8,r5[0x4]
8000cd0c:	8b 09       	st.w	r5[0x0],r9
8000cd0e:	20 18       	sub	r8,1
8000cd10:	8b 18       	st.w	r5[0x4],r8
8000cd12:	2f f4       	sub	r4,-1
8000cd14:	08 32       	cp.w	r2,r4
8000cd16:	e0 80 00 8e 	breq	8000ce32 <__svfscanf_r+0x856>
8000cd1a:	58 08       	cp.w	r8,0
8000cd1c:	e0 89 00 08 	brgt	8000cd2c <__svfscanf_r+0x750>
8000cd20:	0a 9b       	mov	r11,r5
8000cd22:	40 4c       	lddsp	r12,sp[0x10]
8000cd24:	e0 a0 1a 9a 	rcall	80010258 <__srefill_r>
8000cd28:	e0 81 00 85 	brne	8000ce32 <__svfscanf_r+0x856>
8000cd2c:	6a 08       	ld.w	r8,r5[0x0]
8000cd2e:	fa cc fc d4 	sub	r12,sp,-812
8000cd32:	f0 c9 ff ff 	sub	r9,r8,-1
8000cd36:	11 88       	ld.ub	r8,r8[0x0]
8000cd38:	f8 08 00 08 	add	r8,r12,r8
8000cd3c:	f1 38 fe 74 	ld.ub	r8,r8[-396]
8000cd40:	e2 08 18 00 	cp.b	r8,r1
8000cd44:	ce 31       	brne	8000cd0a <__svfscanf_r+0x72e>
8000cd46:	58 04       	cp.w	r4,0
8000cd48:	c7 51       	brne	8000ce32 <__svfscanf_r+0x856>
8000cd4a:	e0 8f 06 95 	bral	8000da74 <__svfscanf_r+0x1498>
8000cd4e:	40 5b       	lddsp	r11,sp[0x14]
8000cd50:	58 0b       	cp.w	r11,0
8000cd52:	c2 50       	breq	8000cd9c <__svfscanf_r+0x7c0>
8000cd54:	0e 34       	cp.w	r4,r7
8000cd56:	c0 64       	brge	8000cd62 <__svfscanf_r+0x786>
8000cd58:	fa ca fc d4 	sub	r10,sp,-812
8000cd5c:	f4 04 00 24 	add	r4,r10,r4<<0x2
8000cd60:	c2 78       	rjmp	8000cdae <__svfscanf_r+0x7d2>
8000cd62:	fa ca fd 60 	sub	r10,sp,-672
8000cd66:	0c 99       	mov	r9,r6
8000cd68:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000cd6c:	0e 98       	mov	r8,r7
8000cd6e:	13 0b       	ld.w	r11,r9++
8000cd70:	14 ab       	st.w	r10++,r11
8000cd72:	2f f8       	sub	r8,-1
8000cd74:	10 34       	cp.w	r4,r8
8000cd76:	cf c4       	brge	8000cd6e <__svfscanf_r+0x792>
8000cd78:	ee c9 ff ff 	sub	r9,r7,-1
8000cd7c:	ee 08 11 ff 	rsub	r8,r7,-1
8000cd80:	f0 c7 ff ff 	sub	r7,r8,-1
8000cd84:	2f e8       	sub	r8,-2
8000cd86:	08 08       	add	r8,r4
8000cd88:	08 07       	add	r7,r4
8000cd8a:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000cd8e:	f2 07 00 07 	add	r7,r9,r7
8000cd92:	fa c8 fd 60 	sub	r8,sp,-672
8000cd96:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000cd9a:	c1 c8       	rjmp	8000cdd2 <__svfscanf_r+0x7f6>
8000cd9c:	e6 c8 ff ff 	sub	r8,r3,-1
8000cda0:	0e 33       	cp.w	r3,r7
8000cda2:	c0 94       	brge	8000cdb4 <__svfscanf_r+0x7d8>
8000cda4:	fa c9 fc d4 	sub	r9,sp,-812
8000cda8:	10 93       	mov	r3,r8
8000cdaa:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000cdae:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000cdb2:	c1 08       	rjmp	8000cdd2 <__svfscanf_r+0x7f6>
8000cdb4:	6c 04       	ld.w	r4,r6[0x0]
8000cdb6:	2f c6       	sub	r6,-4
8000cdb8:	59 f7       	cp.w	r7,31
8000cdba:	e0 89 00 0b 	brgt	8000cdd0 <__svfscanf_r+0x7f4>
8000cdbe:	10 93       	mov	r3,r8
8000cdc0:	fa cc fc d4 	sub	r12,sp,-812
8000cdc4:	f8 07 00 28 	add	r8,r12,r7<<0x2
8000cdc8:	2f f7       	sub	r7,-1
8000cdca:	f1 44 ff 74 	st.w	r8[-140],r4
8000cdce:	c0 28       	rjmp	8000cdd2 <__svfscanf_r+0x7f6>
8000cdd0:	10 93       	mov	r3,r8
8000cdd2:	08 91       	mov	r1,r4
8000cdd4:	30 08       	mov	r8,0
8000cdd6:	c1 88       	rjmp	8000ce06 <__svfscanf_r+0x82a>
8000cdd8:	6a 1a       	ld.w	r10,r5[0x4]
8000cdda:	20 1a       	sub	r10,1
8000cddc:	8b 1a       	st.w	r5[0x4],r10
8000cdde:	13 3a       	ld.ub	r10,r9++
8000cde0:	02 ca       	st.b	r1++,r10
8000cde2:	8b 09       	st.w	r5[0x0],r9
8000cde4:	58 02       	cp.w	r2,0
8000cde6:	c1 d0       	breq	8000ce20 <__svfscanf_r+0x844>
8000cde8:	6a 19       	ld.w	r9,r5[0x4]
8000cdea:	58 09       	cp.w	r9,0
8000cdec:	e0 89 00 0d 	brgt	8000ce06 <__svfscanf_r+0x82a>
8000cdf0:	50 08       	stdsp	sp[0x0],r8
8000cdf2:	0a 9b       	mov	r11,r5
8000cdf4:	40 4c       	lddsp	r12,sp[0x10]
8000cdf6:	e0 a0 1a 31 	rcall	80010258 <__srefill_r>
8000cdfa:	40 08       	lddsp	r8,sp[0x0]
8000cdfc:	c0 50       	breq	8000ce06 <__svfscanf_r+0x82a>
8000cdfe:	08 31       	cp.w	r1,r4
8000ce00:	c1 01       	brne	8000ce20 <__svfscanf_r+0x844>
8000ce02:	e0 8f 06 30 	bral	8000da62 <__svfscanf_r+0x1486>
8000ce06:	6a 0a       	ld.w	r10,r5[0x0]
8000ce08:	fa cb fc d4 	sub	r11,sp,-812
8000ce0c:	14 99       	mov	r9,r10
8000ce0e:	20 12       	sub	r2,1
8000ce10:	15 8a       	ld.ub	r10,r10[0x0]
8000ce12:	f6 0a 00 0a 	add	r10,r11,r10
8000ce16:	f5 3a fe 74 	ld.ub	r10,r10[-396]
8000ce1a:	f0 0a 18 00 	cp.b	r10,r8
8000ce1e:	cd d1       	brne	8000cdd8 <__svfscanf_r+0x7fc>
8000ce20:	e2 04 01 04 	sub	r4,r1,r4
8000ce24:	e0 80 06 28 	breq	8000da74 <__svfscanf_r+0x1498>
8000ce28:	40 6a       	lddsp	r10,sp[0x18]
8000ce2a:	2f fa       	sub	r10,-1
8000ce2c:	50 6a       	stdsp	sp[0x18],r10
8000ce2e:	30 08       	mov	r8,0
8000ce30:	a2 88       	st.b	r1[0x0],r8
8000ce32:	08 00       	add	r0,r4
8000ce34:	fe 9f fb e1 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000ce38:	02 99       	mov	r9,r1
8000ce3a:	e2 19 00 10 	andl	r9,0x10,COH
8000ce3e:	50 29       	stdsp	sp[0x8],r9
8000ce40:	58 02       	cp.w	r2,0
8000ce42:	f9 b2 00 ff 	moveq	r2,-1
8000ce46:	e3 d1 c0 01 	bfextu	r1,r1,0x0,0x1
8000ce4a:	e0 80 00 c2 	breq	8000cfce <__svfscanf_r+0x9f2>
8000ce4e:	58 09       	cp.w	r9,0
8000ce50:	c0 50       	breq	8000ce5a <__svfscanf_r+0x87e>
8000ce52:	fa c8 fc d8 	sub	r8,sp,-808
8000ce56:	50 58       	stdsp	sp[0x14],r8
8000ce58:	c4 48       	rjmp	8000cee0 <__svfscanf_r+0x904>
8000ce5a:	40 5c       	lddsp	r12,sp[0x14]
8000ce5c:	58 0c       	cp.w	r12,0
8000ce5e:	c2 50       	breq	8000cea8 <__svfscanf_r+0x8cc>
8000ce60:	0e 34       	cp.w	r4,r7
8000ce62:	c0 64       	brge	8000ce6e <__svfscanf_r+0x892>
8000ce64:	fa cb fc d4 	sub	r11,sp,-812
8000ce68:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000ce6c:	c2 78       	rjmp	8000ceba <__svfscanf_r+0x8de>
8000ce6e:	fa ca fd 60 	sub	r10,sp,-672
8000ce72:	0c 99       	mov	r9,r6
8000ce74:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000ce78:	0e 98       	mov	r8,r7
8000ce7a:	13 0b       	ld.w	r11,r9++
8000ce7c:	14 ab       	st.w	r10++,r11
8000ce7e:	2f f8       	sub	r8,-1
8000ce80:	10 34       	cp.w	r4,r8
8000ce82:	cf c4       	brge	8000ce7a <__svfscanf_r+0x89e>
8000ce84:	ee c9 ff ff 	sub	r9,r7,-1
8000ce88:	ee 08 11 ff 	rsub	r8,r7,-1
8000ce8c:	f0 c7 ff ff 	sub	r7,r8,-1
8000ce90:	2f e8       	sub	r8,-2
8000ce92:	08 08       	add	r8,r4
8000ce94:	08 07       	add	r7,r4
8000ce96:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000ce9a:	f2 07 00 07 	add	r7,r9,r7
8000ce9e:	fa c8 fd 60 	sub	r8,sp,-672
8000cea2:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000cea6:	c1 c8       	rjmp	8000cede <__svfscanf_r+0x902>
8000cea8:	e6 c8 ff ff 	sub	r8,r3,-1
8000ceac:	0e 33       	cp.w	r3,r7
8000ceae:	c0 94       	brge	8000cec0 <__svfscanf_r+0x8e4>
8000ceb0:	fa ca fc d4 	sub	r10,sp,-812
8000ceb4:	10 93       	mov	r3,r8
8000ceb6:	f4 04 00 24 	add	r4,r10,r4<<0x2
8000ceba:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000cebe:	c1 08       	rjmp	8000cede <__svfscanf_r+0x902>
8000cec0:	6c 04       	ld.w	r4,r6[0x0]
8000cec2:	2f c6       	sub	r6,-4
8000cec4:	59 f7       	cp.w	r7,31
8000cec6:	e0 89 00 0b 	brgt	8000cedc <__svfscanf_r+0x900>
8000ceca:	10 93       	mov	r3,r8
8000cecc:	fa c9 fc d4 	sub	r9,sp,-812
8000ced0:	f2 07 00 28 	add	r8,r9,r7<<0x2
8000ced4:	2f f7       	sub	r7,-1
8000ced6:	f1 44 ff 74 	st.w	r8[-140],r4
8000ceda:	c0 28       	rjmp	8000cede <__svfscanf_r+0x902>
8000cedc:	10 93       	mov	r3,r8
8000cede:	50 54       	stdsp	sp[0x14],r4
8000cee0:	30 01       	mov	r1,0
8000cee2:	4c c4       	lddpc	r4,8000d010 <__svfscanf_r+0xa34>
8000cee4:	c5 a8       	rjmp	8000cf98 <__svfscanf_r+0x9bc>
8000cee6:	68 08       	ld.w	r8,r4[0x0]
8000cee8:	10 31       	cp.w	r1,r8
8000ceea:	e0 80 05 bc 	breq	8000da62 <__svfscanf_r+0x1486>
8000ceee:	fa c8 fc d4 	sub	r8,sp,-812
8000cef2:	02 08       	add	r8,r1
8000cef4:	f1 69 fd 14 	st.b	r8[-748],r9
8000cef8:	6a 18       	ld.w	r8,r5[0x4]
8000cefa:	20 18       	sub	r8,1
8000cefc:	8b 18       	st.w	r5[0x4],r8
8000cefe:	6a 08       	ld.w	r8,r5[0x0]
8000cf00:	2f f8       	sub	r8,-1
8000cf02:	30 8a       	mov	r10,8
8000cf04:	8b 08       	st.w	r5[0x0],r8
8000cf06:	30 0b       	mov	r11,0
8000cf08:	fa cc fc e0 	sub	r12,sp,-800
8000cf0c:	fe b0 e8 c7 	rcall	8000a09a <memset>
8000cf10:	2f f1       	sub	r1,-1
8000cf12:	fa c8 fc e0 	sub	r8,sp,-800
8000cf16:	02 99       	mov	r9,r1
8000cf18:	fa ca ff c0 	sub	r10,sp,-64
8000cf1c:	40 5b       	lddsp	r11,sp[0x14]
8000cf1e:	40 4c       	lddsp	r12,sp[0x10]
8000cf20:	e0 a0 13 dc 	rcall	8000f6d8 <_mbrtowc_r>
8000cf24:	5b fc       	cp.w	r12,-1
8000cf26:	e0 80 05 9e 	breq	8000da62 <__svfscanf_r+0x1486>
8000cf2a:	58 0c       	cp.w	r12,0
8000cf2c:	c0 41       	brne	8000cf34 <__svfscanf_r+0x958>
8000cf2e:	40 58       	lddsp	r8,sp[0x14]
8000cf30:	91 0c       	st.w	r8[0x0],r12
8000cf32:	c0 38       	rjmp	8000cf38 <__svfscanf_r+0x95c>
8000cf34:	5b ec       	cp.w	r12,-2
8000cf36:	c2 40       	breq	8000cf7e <__svfscanf_r+0x9a2>
8000cf38:	40 5b       	lddsp	r11,sp[0x14]
8000cf3a:	76 0c       	ld.w	r12,r11[0x0]
8000cf3c:	e0 a0 11 38 	rcall	8000f1ac <iswspace>
8000cf40:	c1 10       	breq	8000cf62 <__svfscanf_r+0x986>
8000cf42:	fa c4 fc d4 	sub	r4,sp,-812
8000cf46:	02 04       	add	r4,r1
8000cf48:	e8 c4 02 ed 	sub	r4,r4,749
8000cf4c:	c0 88       	rjmp	8000cf5c <__svfscanf_r+0x980>
8000cf4e:	09 8b       	ld.ub	r11,r4[0x0]
8000cf50:	20 11       	sub	r1,1
8000cf52:	20 14       	sub	r4,1
8000cf54:	0a 9a       	mov	r10,r5
8000cf56:	40 4c       	lddsp	r12,sp[0x10]
8000cf58:	e0 a0 24 68 	rcall	80011828 <_ungetc_r>
8000cf5c:	58 01       	cp.w	r1,0
8000cf5e:	cf 81       	brne	8000cf4e <__svfscanf_r+0x972>
8000cf60:	c2 c8       	rjmp	8000cfb8 <__svfscanf_r+0x9dc>
8000cf62:	02 00       	add	r0,r1
8000cf64:	40 2a       	lddsp	r10,sp[0x8]
8000cf66:	20 12       	sub	r2,1
8000cf68:	58 0a       	cp.w	r10,0
8000cf6a:	f8 01 17 10 	movne	r1,r12
8000cf6e:	fb f9 00 05 	ld.weq	r9,sp[0x14]
8000cf72:	f7 b9 00 fc 	subeq	r9,-4
8000cf76:	fb f9 0a 05 	st.weq	sp[0x14],r9
8000cf7a:	fb f1 00 02 	ld.weq	r1,sp[0x8]
8000cf7e:	6a 18       	ld.w	r8,r5[0x4]
8000cf80:	58 08       	cp.w	r8,0
8000cf82:	e0 89 00 0b 	brgt	8000cf98 <__svfscanf_r+0x9bc>
8000cf86:	0a 9b       	mov	r11,r5
8000cf88:	40 4c       	lddsp	r12,sp[0x10]
8000cf8a:	e0 a0 19 67 	rcall	80010258 <__srefill_r>
8000cf8e:	c0 50       	breq	8000cf98 <__svfscanf_r+0x9bc>
8000cf90:	58 01       	cp.w	r1,0
8000cf92:	e0 81 05 68 	brne	8000da62 <__svfscanf_r+0x1486>
8000cf96:	c1 18       	rjmp	8000cfb8 <__svfscanf_r+0x9dc>
8000cf98:	6a 08       	ld.w	r8,r5[0x0]
8000cf9a:	58 02       	cp.w	r2,0
8000cf9c:	5f 1a       	srne	r10
8000cf9e:	11 89       	ld.ub	r9,r8[0x0]
8000cfa0:	49 dc       	lddpc	r12,8000d014 <__svfscanf_r+0xa38>
8000cfa2:	30 0b       	mov	r11,0
8000cfa4:	78 08       	ld.w	r8,r12[0x0]
8000cfa6:	f0 09 07 08 	ld.ub	r8,r8[r9]
8000cfaa:	ec 18 00 08 	eorl	r8,0x8
8000cfae:	f5 e8 02 38 	and	r8,r10,r8>>0x3
8000cfb2:	f6 08 18 00 	cp.b	r8,r11
8000cfb6:	c9 81       	brne	8000cee6 <__svfscanf_r+0x90a>
8000cfb8:	40 2a       	lddsp	r10,sp[0x8]
8000cfba:	58 0a       	cp.w	r10,0
8000cfbc:	fe 91 fb 1d 	brne	8000c5f6 <__svfscanf_r+0x1a>
8000cfc0:	40 68       	lddsp	r8,sp[0x18]
8000cfc2:	40 59       	lddsp	r9,sp[0x14]
8000cfc4:	2f f8       	sub	r8,-1
8000cfc6:	93 0a       	st.w	r9[0x0],r10
8000cfc8:	50 68       	stdsp	sp[0x18],r8
8000cfca:	fe 9f fb 16 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000cfce:	40 2c       	lddsp	r12,sp[0x8]
8000cfd0:	58 0c       	cp.w	r12,0
8000cfd2:	c2 30       	breq	8000d018 <__svfscanf_r+0xa3c>
8000cfd4:	c1 08       	rjmp	8000cff4 <__svfscanf_r+0xa18>
8000cfd6:	6a 18       	ld.w	r8,r5[0x4]
8000cfd8:	8b 0a       	st.w	r5[0x0],r10
8000cfda:	20 18       	sub	r8,1
8000cfdc:	8b 18       	st.w	r5[0x4],r8
8000cfde:	2f f1       	sub	r1,-1
8000cfe0:	02 32       	cp.w	r2,r1
8000cfe2:	c1 40       	breq	8000d00a <__svfscanf_r+0xa2e>
8000cfe4:	58 08       	cp.w	r8,0
8000cfe6:	e0 89 00 07 	brgt	8000cff4 <__svfscanf_r+0xa18>
8000cfea:	0a 9b       	mov	r11,r5
8000cfec:	40 4c       	lddsp	r12,sp[0x10]
8000cfee:	e0 a0 19 35 	rcall	80010258 <__srefill_r>
8000cff2:	c0 c1       	brne	8000d00a <__svfscanf_r+0xa2e>
8000cff4:	6a 08       	ld.w	r8,r5[0x0]
8000cff6:	48 8b       	lddpc	r11,8000d014 <__svfscanf_r+0xa38>
8000cff8:	f0 ca ff ff 	sub	r10,r8,-1
8000cffc:	76 09       	ld.w	r9,r11[0x0]
8000cffe:	11 88       	ld.ub	r8,r8[0x0]
8000d000:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000d004:	ed b8 00 03 	bld	r8,0x3
8000d008:	ce 71       	brne	8000cfd6 <__svfscanf_r+0x9fa>
8000d00a:	02 00       	add	r0,r1
8000d00c:	fe 9f fa f5 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000d010:	00 00       	add	r0,r0
8000d012:	01 c4       	ld.ub	r4,r0[0x4]
8000d014:	00 00       	add	r0,r0
8000d016:	00 cc       	st.b	r0++,r12
8000d018:	40 5a       	lddsp	r10,sp[0x14]
8000d01a:	58 0a       	cp.w	r10,0
8000d01c:	c2 50       	breq	8000d066 <__svfscanf_r+0xa8a>
8000d01e:	0e 34       	cp.w	r4,r7
8000d020:	c0 64       	brge	8000d02c <__svfscanf_r+0xa50>
8000d022:	fa c9 fc d4 	sub	r9,sp,-812
8000d026:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000d02a:	c2 78       	rjmp	8000d078 <__svfscanf_r+0xa9c>
8000d02c:	fa ca fd 60 	sub	r10,sp,-672
8000d030:	0c 99       	mov	r9,r6
8000d032:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d036:	0e 98       	mov	r8,r7
8000d038:	13 0b       	ld.w	r11,r9++
8000d03a:	14 ab       	st.w	r10++,r11
8000d03c:	2f f8       	sub	r8,-1
8000d03e:	10 34       	cp.w	r4,r8
8000d040:	cf c4       	brge	8000d038 <__svfscanf_r+0xa5c>
8000d042:	ee c9 ff ff 	sub	r9,r7,-1
8000d046:	ee 08 11 ff 	rsub	r8,r7,-1
8000d04a:	f0 c7 ff ff 	sub	r7,r8,-1
8000d04e:	2f e8       	sub	r8,-2
8000d050:	08 08       	add	r8,r4
8000d052:	08 07       	add	r7,r4
8000d054:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d058:	f2 07 00 07 	add	r7,r9,r7
8000d05c:	fa c8 fd 60 	sub	r8,sp,-672
8000d060:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000d064:	c1 c8       	rjmp	8000d09c <__svfscanf_r+0xac0>
8000d066:	e6 c8 ff ff 	sub	r8,r3,-1
8000d06a:	0e 33       	cp.w	r3,r7
8000d06c:	c0 94       	brge	8000d07e <__svfscanf_r+0xaa2>
8000d06e:	fa cc fc d4 	sub	r12,sp,-812
8000d072:	10 93       	mov	r3,r8
8000d074:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d078:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000d07c:	c1 08       	rjmp	8000d09c <__svfscanf_r+0xac0>
8000d07e:	6c 04       	ld.w	r4,r6[0x0]
8000d080:	2f c6       	sub	r6,-4
8000d082:	59 f7       	cp.w	r7,31
8000d084:	e0 89 00 0b 	brgt	8000d09a <__svfscanf_r+0xabe>
8000d088:	10 93       	mov	r3,r8
8000d08a:	fa cb fc d4 	sub	r11,sp,-812
8000d08e:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000d092:	2f f7       	sub	r7,-1
8000d094:	f1 44 ff 74 	st.w	r8[-140],r4
8000d098:	c0 28       	rjmp	8000d09c <__svfscanf_r+0xac0>
8000d09a:	10 93       	mov	r3,r8
8000d09c:	08 91       	mov	r1,r4
8000d09e:	c1 28       	rjmp	8000d0c2 <__svfscanf_r+0xae6>
8000d0a0:	6a 19       	ld.w	r9,r5[0x4]
8000d0a2:	20 19       	sub	r9,1
8000d0a4:	8b 19       	st.w	r5[0x4],r9
8000d0a6:	11 39       	ld.ub	r9,r8++
8000d0a8:	02 c9       	st.b	r1++,r9
8000d0aa:	8b 08       	st.w	r5[0x0],r8
8000d0ac:	58 02       	cp.w	r2,0
8000d0ae:	c1 50       	breq	8000d0d8 <__svfscanf_r+0xafc>
8000d0b0:	6a 18       	ld.w	r8,r5[0x4]
8000d0b2:	58 08       	cp.w	r8,0
8000d0b4:	e0 89 00 07 	brgt	8000d0c2 <__svfscanf_r+0xae6>
8000d0b8:	0a 9b       	mov	r11,r5
8000d0ba:	40 4c       	lddsp	r12,sp[0x10]
8000d0bc:	e0 a0 18 ce 	rcall	80010258 <__srefill_r>
8000d0c0:	c0 c1       	brne	8000d0d8 <__svfscanf_r+0xafc>
8000d0c2:	6a 09       	ld.w	r9,r5[0x0]
8000d0c4:	4d 5c       	lddpc	r12,8000d218 <__svfscanf_r+0xc3c>
8000d0c6:	12 98       	mov	r8,r9
8000d0c8:	78 0a       	ld.w	r10,r12[0x0]
8000d0ca:	13 89       	ld.ub	r9,r9[0x0]
8000d0cc:	20 12       	sub	r2,1
8000d0ce:	f4 09 07 09 	ld.ub	r9,r10[r9]
8000d0d2:	ed b9 00 03 	bld	r9,0x3
8000d0d6:	ce 51       	brne	8000d0a0 <__svfscanf_r+0xac4>
8000d0d8:	40 6b       	lddsp	r11,sp[0x18]
8000d0da:	2f fb       	sub	r11,-1
8000d0dc:	50 6b       	stdsp	sp[0x18],r11
8000d0de:	08 10       	sub	r0,r4
8000d0e0:	30 08       	mov	r8,0
8000d0e2:	e2 00 00 00 	add	r0,r1,r0
8000d0e6:	a2 88       	st.b	r1[0x0],r8
8000d0e8:	fe 9f fa 87 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000d0ec:	e4 c8 00 01 	sub	r8,r2,1
8000d0f0:	e0 48 01 5c 	cp.w	r8,348
8000d0f4:	e0 8b 00 04 	brhi	8000d0fc <__svfscanf_r+0xb20>
8000d0f8:	30 08       	mov	r8,0
8000d0fa:	c0 58       	rjmp	8000d104 <__svfscanf_r+0xb28>
8000d0fc:	e4 c8 01 5d 	sub	r8,r2,349
8000d100:	e0 62 01 5d 	mov	r2,349
8000d104:	fa c9 ff c0 	sub	r9,sp,-64
8000d108:	30 0a       	mov	r10,0
8000d10a:	50 29       	stdsp	sp[0x8],r9
8000d10c:	50 b7       	stdsp	sp[0x2c],r7
8000d10e:	50 c3       	stdsp	sp[0x30],r3
8000d110:	e8 11 0d 80 	orl	r1,0xd80
8000d114:	50 9a       	stdsp	sp[0x24],r10
8000d116:	35 89       	mov	r9,88
8000d118:	40 77       	lddsp	r7,sp[0x1c]
8000d11a:	10 93       	mov	r3,r8
8000d11c:	6a 0a       	ld.w	r10,r5[0x0]
8000d11e:	33 98       	mov	r8,57
8000d120:	15 8a       	ld.ub	r10,r10[0x0]
8000d122:	f0 0a 18 00 	cp.b	r10,r8
8000d126:	e0 8b 00 15 	brhi	8000d150 <__svfscanf_r+0xb74>
8000d12a:	33 8c       	mov	r12,56
8000d12c:	f8 0a 18 00 	cp.b	r10,r12
8000d130:	c4 b2       	brcc	8000d1c6 <__svfscanf_r+0xbea>
8000d132:	33 0b       	mov	r11,48
8000d134:	f6 0a 18 00 	cp.b	r10,r11
8000d138:	c2 70       	breq	8000d186 <__svfscanf_r+0xbaa>
8000d13a:	e0 8b 00 42 	brhi	8000d1be <__svfscanf_r+0xbe2>
8000d13e:	32 bb       	mov	r11,43
8000d140:	f6 0a 18 00 	cp.b	r10,r11
8000d144:	c4 e0       	breq	8000d1e0 <__svfscanf_r+0xc04>
8000d146:	32 db       	mov	r11,45
8000d148:	f6 0a 18 00 	cp.b	r10,r11
8000d14c:	c7 41       	brne	8000d234 <__svfscanf_r+0xc58>
8000d14e:	c4 98       	rjmp	8000d1e0 <__svfscanf_r+0xc04>
8000d150:	f2 0a 18 00 	cp.b	r10,r9
8000d154:	c4 b0       	breq	8000d1ea <__svfscanf_r+0xc0e>
8000d156:	e0 8b 00 0a 	brhi	8000d16a <__svfscanf_r+0xb8e>
8000d15a:	f4 cb 00 41 	sub	r11,r10,65
8000d15e:	30 58       	mov	r8,5
8000d160:	f0 0b 18 00 	cp.b	r11,r8
8000d164:	e0 8b 00 68 	brhi	8000d234 <__svfscanf_r+0xc58>
8000d168:	c3 68       	rjmp	8000d1d4 <__svfscanf_r+0xbf8>
8000d16a:	36 1c       	mov	r12,97
8000d16c:	f8 0a 18 00 	cp.b	r10,r12
8000d170:	c6 23       	brcs	8000d234 <__svfscanf_r+0xc58>
8000d172:	36 6b       	mov	r11,102
8000d174:	f6 0a 18 00 	cp.b	r10,r11
8000d178:	e0 88 00 2e 	brls	8000d1d4 <__svfscanf_r+0xbf8>
8000d17c:	37 88       	mov	r8,120
8000d17e:	f0 0a 18 00 	cp.b	r10,r8
8000d182:	c5 91       	brne	8000d234 <__svfscanf_r+0xc58>
8000d184:	c3 38       	rjmp	8000d1ea <__svfscanf_r+0xc0e>
8000d186:	02 9b       	mov	r11,r1
8000d188:	ed b1 00 0b 	bld	r1,0xb
8000d18c:	c3 91       	brne	8000d1fe <__svfscanf_r+0xc22>
8000d18e:	58 07       	cp.w	r7,0
8000d190:	e0 6b 02 00 	mov	r11,512
8000d194:	e3 db e0 31 	oreq	r1,r1,r11
8000d198:	f9 b7 00 08 	moveq	r7,8
8000d19c:	ed b1 00 0a 	bld	r1,0xa
8000d1a0:	c0 41       	brne	8000d1a8 <__svfscanf_r+0xbcc>
8000d1a2:	e0 11 fa 7f 	andl	r1,0xfa7f
8000d1a6:	c2 c8       	rjmp	8000d1fe <__svfscanf_r+0xc22>
8000d1a8:	40 9c       	lddsp	r12,sp[0x24]
8000d1aa:	58 03       	cp.w	r3,0
8000d1ac:	f7 b3 01 01 	subne	r3,1
8000d1b0:	f7 b2 01 ff 	subne	r2,-1
8000d1b4:	2f fc       	sub	r12,-1
8000d1b6:	e0 11 fc 7f 	andl	r1,0xfc7f
8000d1ba:	50 9c       	stdsp	sp[0x24],r12
8000d1bc:	c2 48       	rjmp	8000d204 <__svfscanf_r+0xc28>
8000d1be:	49 8b       	lddpc	r11,8000d21c <__svfscanf_r+0xc40>
8000d1c0:	f6 07 04 17 	ld.sh	r7,r11[r7<<0x1]
8000d1c4:	c0 b8       	rjmp	8000d1da <__svfscanf_r+0xbfe>
8000d1c6:	49 68       	lddpc	r8,8000d21c <__svfscanf_r+0xc40>
8000d1c8:	f0 07 04 17 	ld.sh	r7,r8[r7<<0x1]
8000d1cc:	58 87       	cp.w	r7,8
8000d1ce:	e0 89 00 06 	brgt	8000d1da <__svfscanf_r+0xbfe>
8000d1d2:	c3 18       	rjmp	8000d234 <__svfscanf_r+0xc58>
8000d1d4:	58 a7       	cp.w	r7,10
8000d1d6:	e0 8a 00 2f 	brle	8000d234 <__svfscanf_r+0xc58>
8000d1da:	e0 11 f4 7f 	andl	r1,0xf47f
8000d1de:	c1 08       	rjmp	8000d1fe <__svfscanf_r+0xc22>
8000d1e0:	ed b1 00 07 	bld	r1,0x7
8000d1e4:	c2 81       	brne	8000d234 <__svfscanf_r+0xc58>
8000d1e6:	a7 d1       	cbr	r1,0x7
8000d1e8:	c0 b8       	rjmp	8000d1fe <__svfscanf_r+0xc22>
8000d1ea:	02 9b       	mov	r11,r1
8000d1ec:	e2 1b 06 00 	andl	r11,0x600,COH
8000d1f0:	e0 4b 02 00 	cp.w	r11,512
8000d1f4:	c2 01       	brne	8000d234 <__svfscanf_r+0xc58>
8000d1f6:	a9 d1       	cbr	r1,0x9
8000d1f8:	31 07       	mov	r7,16
8000d1fa:	e8 11 05 00 	orl	r1,0x500
8000d1fe:	40 2c       	lddsp	r12,sp[0x8]
8000d200:	18 ca       	st.b	r12++,r10
8000d202:	50 2c       	stdsp	sp[0x8],r12
8000d204:	6a 1a       	ld.w	r10,r5[0x4]
8000d206:	20 1a       	sub	r10,1
8000d208:	8b 1a       	st.w	r5[0x4],r10
8000d20a:	58 0a       	cp.w	r10,0
8000d20c:	e0 8a 00 0a 	brle	8000d220 <__svfscanf_r+0xc44>
8000d210:	6a 0a       	ld.w	r10,r5[0x0]
8000d212:	2f fa       	sub	r10,-1
8000d214:	8b 0a       	st.w	r5[0x0],r10
8000d216:	c0 c8       	rjmp	8000d22e <__svfscanf_r+0xc52>
8000d218:	00 00       	add	r0,r0
8000d21a:	00 cc       	st.b	r0++,r12
8000d21c:	80 01       	ld.sh	r1,r0[0x0]
8000d21e:	42 44       	lddsp	r4,sp[0x90]
8000d220:	50 19       	stdsp	sp[0x4],r9
8000d222:	0a 9b       	mov	r11,r5
8000d224:	40 4c       	lddsp	r12,sp[0x10]
8000d226:	e0 a0 18 19 	rcall	80010258 <__srefill_r>
8000d22a:	40 19       	lddsp	r9,sp[0x4]
8000d22c:	c0 41       	brne	8000d234 <__svfscanf_r+0xc58>
8000d22e:	20 12       	sub	r2,1
8000d230:	fe 91 ff 76 	brne	8000d11c <__svfscanf_r+0xb40>
8000d234:	50 77       	stdsp	sp[0x1c],r7
8000d236:	40 c3       	lddsp	r3,sp[0x30]
8000d238:	40 b7       	lddsp	r7,sp[0x2c]
8000d23a:	ed b1 00 08 	bld	r1,0x8
8000d23e:	c1 41       	brne	8000d266 <__svfscanf_r+0xc8a>
8000d240:	fa c8 ff c0 	sub	r8,sp,-64
8000d244:	40 2b       	lddsp	r11,sp[0x8]
8000d246:	10 3b       	cp.w	r11,r8
8000d248:	e0 88 00 09 	brls	8000d25a <__svfscanf_r+0xc7e>
8000d24c:	16 99       	mov	r9,r11
8000d24e:	0a 9a       	mov	r10,r5
8000d250:	13 7b       	ld.ub	r11,--r9
8000d252:	40 4c       	lddsp	r12,sp[0x10]
8000d254:	50 29       	stdsp	sp[0x8],r9
8000d256:	e0 a0 22 e9 	rcall	80011828 <_ungetc_r>
8000d25a:	fa c8 ff c0 	sub	r8,sp,-64
8000d25e:	40 2c       	lddsp	r12,sp[0x8]
8000d260:	10 3c       	cp.w	r12,r8
8000d262:	e0 80 04 09 	breq	8000da74 <__svfscanf_r+0x1498>
8000d266:	02 9a       	mov	r10,r1
8000d268:	e2 1a 00 10 	andl	r10,0x10,COH
8000d26c:	e0 81 01 33 	brne	8000d4d2 <__svfscanf_r+0xef6>
8000d270:	40 2b       	lddsp	r11,sp[0x8]
8000d272:	fa c2 ff c0 	sub	r2,sp,-64
8000d276:	b6 8a       	st.b	r11[0x0],r10
8000d278:	04 9b       	mov	r11,r2
8000d27a:	40 79       	lddsp	r9,sp[0x1c]
8000d27c:	40 4c       	lddsp	r12,sp[0x10]
8000d27e:	40 a8       	lddsp	r8,sp[0x28]
8000d280:	5d 18       	icall	r8
8000d282:	ed b1 00 05 	bld	r1,0x5
8000d286:	c1 41       	brne	8000d2ae <__svfscanf_r+0xcd2>
8000d288:	40 5b       	lddsp	r11,sp[0x14]
8000d28a:	58 0b       	cp.w	r11,0
8000d28c:	e0 80 01 04 	breq	8000d494 <__svfscanf_r+0xeb8>
8000d290:	0e 34       	cp.w	r4,r7
8000d292:	e0 85 00 df 	brlt	8000d450 <__svfscanf_r+0xe74>
8000d296:	fa ca fd 60 	sub	r10,sp,-672
8000d29a:	0c 99       	mov	r9,r6
8000d29c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d2a0:	0e 98       	mov	r8,r7
8000d2a2:	13 0b       	ld.w	r11,r9++
8000d2a4:	14 ab       	st.w	r10++,r11
8000d2a6:	2f f8       	sub	r8,-1
8000d2a8:	10 34       	cp.w	r4,r8
8000d2aa:	cf c4       	brge	8000d2a2 <__svfscanf_r+0xcc6>
8000d2ac:	ce 28       	rjmp	8000d470 <__svfscanf_r+0xe94>
8000d2ae:	ed b1 00 02 	bld	r1,0x2
8000d2b2:	c4 51       	brne	8000d33c <__svfscanf_r+0xd60>
8000d2b4:	40 5a       	lddsp	r10,sp[0x14]
8000d2b6:	58 0a       	cp.w	r10,0
8000d2b8:	c2 50       	breq	8000d302 <__svfscanf_r+0xd26>
8000d2ba:	0e 34       	cp.w	r4,r7
8000d2bc:	c0 64       	brge	8000d2c8 <__svfscanf_r+0xcec>
8000d2be:	fa c9 fc d4 	sub	r9,sp,-812
8000d2c2:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000d2c6:	c2 78       	rjmp	8000d314 <__svfscanf_r+0xd38>
8000d2c8:	fa ca fd 60 	sub	r10,sp,-672
8000d2cc:	0c 99       	mov	r9,r6
8000d2ce:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d2d2:	0e 98       	mov	r8,r7
8000d2d4:	13 0b       	ld.w	r11,r9++
8000d2d6:	14 ab       	st.w	r10++,r11
8000d2d8:	2f f8       	sub	r8,-1
8000d2da:	10 34       	cp.w	r4,r8
8000d2dc:	cf c4       	brge	8000d2d4 <__svfscanf_r+0xcf8>
8000d2de:	ee c9 ff ff 	sub	r9,r7,-1
8000d2e2:	ee 08 11 ff 	rsub	r8,r7,-1
8000d2e6:	f0 c7 ff ff 	sub	r7,r8,-1
8000d2ea:	2f e8       	sub	r8,-2
8000d2ec:	08 08       	add	r8,r4
8000d2ee:	08 07       	add	r7,r4
8000d2f0:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d2f4:	f2 07 00 07 	add	r7,r9,r7
8000d2f8:	fa c8 fd 60 	sub	r8,sp,-672
8000d2fc:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000d300:	c1 c8       	rjmp	8000d338 <__svfscanf_r+0xd5c>
8000d302:	e6 c8 ff ff 	sub	r8,r3,-1
8000d306:	0e 33       	cp.w	r3,r7
8000d308:	c0 94       	brge	8000d31a <__svfscanf_r+0xd3e>
8000d30a:	fa cb fc d4 	sub	r11,sp,-812
8000d30e:	10 93       	mov	r3,r8
8000d310:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000d314:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000d318:	c1 08       	rjmp	8000d338 <__svfscanf_r+0xd5c>
8000d31a:	6c 04       	ld.w	r4,r6[0x0]
8000d31c:	2f c6       	sub	r6,-4
8000d31e:	59 f7       	cp.w	r7,31
8000d320:	e0 89 00 0b 	brgt	8000d336 <__svfscanf_r+0xd5a>
8000d324:	10 93       	mov	r3,r8
8000d326:	fa ca fc d4 	sub	r10,sp,-812
8000d32a:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000d32e:	2f f7       	sub	r7,-1
8000d330:	f1 44 ff 74 	st.w	r8[-140],r4
8000d334:	c0 28       	rjmp	8000d338 <__svfscanf_r+0xd5c>
8000d336:	10 93       	mov	r3,r8
8000d338:	a8 0c       	st.h	r4[0x0],r12
8000d33a:	cc 98       	rjmp	8000d4cc <__svfscanf_r+0xef0>
8000d33c:	f5 d1 c0 01 	bfextu	r10,r1,0x0,0x1
8000d340:	c2 b0       	breq	8000d396 <__svfscanf_r+0xdba>
8000d342:	40 59       	lddsp	r9,sp[0x14]
8000d344:	58 09       	cp.w	r9,0
8000d346:	c1 40       	breq	8000d36e <__svfscanf_r+0xd92>
8000d348:	0e 34       	cp.w	r4,r7
8000d34a:	c0 64       	brge	8000d356 <__svfscanf_r+0xd7a>
8000d34c:	fa c8 fc d4 	sub	r8,sp,-812
8000d350:	f0 04 00 24 	add	r4,r8,r4<<0x2
8000d354:	ca 98       	rjmp	8000d4a6 <__svfscanf_r+0xeca>
8000d356:	fa ca fd 60 	sub	r10,sp,-672
8000d35a:	0c 99       	mov	r9,r6
8000d35c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d360:	0e 98       	mov	r8,r7
8000d362:	13 0b       	ld.w	r11,r9++
8000d364:	14 ab       	st.w	r10++,r11
8000d366:	2f f8       	sub	r8,-1
8000d368:	10 34       	cp.w	r4,r8
8000d36a:	cf c4       	brge	8000d362 <__svfscanf_r+0xd86>
8000d36c:	c8 28       	rjmp	8000d470 <__svfscanf_r+0xe94>
8000d36e:	e6 c8 ff ff 	sub	r8,r3,-1
8000d372:	0e 33       	cp.w	r3,r7
8000d374:	c0 64       	brge	8000d380 <__svfscanf_r+0xda4>
8000d376:	fa cb fc d4 	sub	r11,sp,-812
8000d37a:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000d37e:	c9 38       	rjmp	8000d4a4 <__svfscanf_r+0xec8>
8000d380:	6c 04       	ld.w	r4,r6[0x0]
8000d382:	2f c6       	sub	r6,-4
8000d384:	59 f7       	cp.w	r7,31
8000d386:	e0 89 00 a1 	brgt	8000d4c8 <__svfscanf_r+0xeec>
8000d38a:	10 93       	mov	r3,r8
8000d38c:	fa ca fc d4 	sub	r10,sp,-812
8000d390:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000d394:	c9 68       	rjmp	8000d4c0 <__svfscanf_r+0xee4>
8000d396:	e2 11 00 02 	andl	r1,0x2,COH
8000d39a:	c5 60       	breq	8000d446 <__svfscanf_r+0xe6a>
8000d39c:	fe c8 bd d8 	sub	r8,pc,-16936
8000d3a0:	40 a9       	lddsp	r9,sp[0x28]
8000d3a2:	10 39       	cp.w	r9,r8
8000d3a4:	c0 71       	brne	8000d3b2 <__svfscanf_r+0xdd6>
8000d3a6:	04 9b       	mov	r11,r2
8000d3a8:	40 79       	lddsp	r9,sp[0x1c]
8000d3aa:	40 4c       	lddsp	r12,sp[0x10]
8000d3ac:	e0 a0 20 4c 	rcall	80011444 <_strtoull_r>
8000d3b0:	c0 68       	rjmp	8000d3bc <__svfscanf_r+0xde0>
8000d3b2:	04 9b       	mov	r11,r2
8000d3b4:	40 79       	lddsp	r9,sp[0x1c]
8000d3b6:	40 4c       	lddsp	r12,sp[0x10]
8000d3b8:	e0 a0 1e d6 	rcall	80011164 <_strtoll_r>
8000d3bc:	40 58       	lddsp	r8,sp[0x14]
8000d3be:	58 08       	cp.w	r8,0
8000d3c0:	c2 50       	breq	8000d40a <__svfscanf_r+0xe2e>
8000d3c2:	0e 34       	cp.w	r4,r7
8000d3c4:	c0 64       	brge	8000d3d0 <__svfscanf_r+0xdf4>
8000d3c6:	fa cc fc d4 	sub	r12,sp,-812
8000d3ca:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d3ce:	c2 78       	rjmp	8000d41c <__svfscanf_r+0xe40>
8000d3d0:	fa cc fd 60 	sub	r12,sp,-672
8000d3d4:	0c 99       	mov	r9,r6
8000d3d6:	f8 07 00 2c 	add	r12,r12,r7<<0x2
8000d3da:	0e 98       	mov	r8,r7
8000d3dc:	13 0e       	ld.w	lr,r9++
8000d3de:	18 ae       	st.w	r12++,lr
8000d3e0:	2f f8       	sub	r8,-1
8000d3e2:	10 34       	cp.w	r4,r8
8000d3e4:	cf c4       	brge	8000d3dc <__svfscanf_r+0xe00>
8000d3e6:	ee c9 ff ff 	sub	r9,r7,-1
8000d3ea:	ee 08 11 ff 	rsub	r8,r7,-1
8000d3ee:	f0 c7 ff ff 	sub	r7,r8,-1
8000d3f2:	2f e8       	sub	r8,-2
8000d3f4:	08 08       	add	r8,r4
8000d3f6:	08 07       	add	r7,r4
8000d3f8:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d3fc:	f2 07 00 07 	add	r7,r9,r7
8000d400:	fa c8 fd 60 	sub	r8,sp,-672
8000d404:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000d408:	c1 c8       	rjmp	8000d440 <__svfscanf_r+0xe64>
8000d40a:	e6 c8 ff ff 	sub	r8,r3,-1
8000d40e:	0e 33       	cp.w	r3,r7
8000d410:	c0 94       	brge	8000d422 <__svfscanf_r+0xe46>
8000d412:	fa c9 fc d4 	sub	r9,sp,-812
8000d416:	10 93       	mov	r3,r8
8000d418:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000d41c:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000d420:	c1 08       	rjmp	8000d440 <__svfscanf_r+0xe64>
8000d422:	6c 04       	ld.w	r4,r6[0x0]
8000d424:	2f c6       	sub	r6,-4
8000d426:	59 f7       	cp.w	r7,31
8000d428:	e0 89 00 0b 	brgt	8000d43e <__svfscanf_r+0xe62>
8000d42c:	10 93       	mov	r3,r8
8000d42e:	fa cc fc d4 	sub	r12,sp,-812
8000d432:	f8 07 00 28 	add	r8,r12,r7<<0x2
8000d436:	2f f7       	sub	r7,-1
8000d438:	f1 44 ff 74 	st.w	r8[-140],r4
8000d43c:	c0 28       	rjmp	8000d440 <__svfscanf_r+0xe64>
8000d43e:	10 93       	mov	r3,r8
8000d440:	89 1a       	st.w	r4[0x4],r10
8000d442:	89 0b       	st.w	r4[0x0],r11
8000d444:	c4 48       	rjmp	8000d4cc <__svfscanf_r+0xef0>
8000d446:	40 5b       	lddsp	r11,sp[0x14]
8000d448:	58 0b       	cp.w	r11,0
8000d44a:	c2 50       	breq	8000d494 <__svfscanf_r+0xeb8>
8000d44c:	0e 34       	cp.w	r4,r7
8000d44e:	c0 64       	brge	8000d45a <__svfscanf_r+0xe7e>
8000d450:	fa ca fc d4 	sub	r10,sp,-812
8000d454:	f4 04 00 24 	add	r4,r10,r4<<0x2
8000d458:	c2 78       	rjmp	8000d4a6 <__svfscanf_r+0xeca>
8000d45a:	fa ca fd 60 	sub	r10,sp,-672
8000d45e:	0c 99       	mov	r9,r6
8000d460:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d464:	0e 98       	mov	r8,r7
8000d466:	13 0b       	ld.w	r11,r9++
8000d468:	14 ab       	st.w	r10++,r11
8000d46a:	2f f8       	sub	r8,-1
8000d46c:	10 34       	cp.w	r4,r8
8000d46e:	cf c4       	brge	8000d466 <__svfscanf_r+0xe8a>
8000d470:	ee c9 ff ff 	sub	r9,r7,-1
8000d474:	ee 08 11 ff 	rsub	r8,r7,-1
8000d478:	f0 c7 ff ff 	sub	r7,r8,-1
8000d47c:	2f e8       	sub	r8,-2
8000d47e:	08 08       	add	r8,r4
8000d480:	08 07       	add	r7,r4
8000d482:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d486:	f2 07 00 07 	add	r7,r9,r7
8000d48a:	fa c8 fd 60 	sub	r8,sp,-672
8000d48e:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000d492:	c1 c8       	rjmp	8000d4ca <__svfscanf_r+0xeee>
8000d494:	e6 c8 ff ff 	sub	r8,r3,-1
8000d498:	0e 33       	cp.w	r3,r7
8000d49a:	c0 94       	brge	8000d4ac <__svfscanf_r+0xed0>
8000d49c:	fa c9 fc d4 	sub	r9,sp,-812
8000d4a0:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000d4a4:	10 93       	mov	r3,r8
8000d4a6:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000d4aa:	c1 08       	rjmp	8000d4ca <__svfscanf_r+0xeee>
8000d4ac:	6c 04       	ld.w	r4,r6[0x0]
8000d4ae:	2f c6       	sub	r6,-4
8000d4b0:	59 f7       	cp.w	r7,31
8000d4b2:	e0 89 00 0b 	brgt	8000d4c8 <__svfscanf_r+0xeec>
8000d4b6:	10 93       	mov	r3,r8
8000d4b8:	fa cb fc d4 	sub	r11,sp,-812
8000d4bc:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000d4c0:	f1 44 ff 74 	st.w	r8[-140],r4
8000d4c4:	2f f7       	sub	r7,-1
8000d4c6:	c0 28       	rjmp	8000d4ca <__svfscanf_r+0xeee>
8000d4c8:	10 93       	mov	r3,r8
8000d4ca:	89 0c       	st.w	r4[0x0],r12
8000d4cc:	40 6a       	lddsp	r10,sp[0x18]
8000d4ce:	2f fa       	sub	r10,-1
8000d4d0:	50 6a       	stdsp	sp[0x18],r10
8000d4d2:	fa c8 ff c0 	sub	r8,sp,-64
8000d4d6:	40 99       	lddsp	r9,sp[0x24]
8000d4d8:	10 10       	sub	r0,r8
8000d4da:	40 28       	lddsp	r8,sp[0x8]
8000d4dc:	12 00       	add	r0,r9
8000d4de:	f0 00 00 00 	add	r0,r8,r0
8000d4e2:	fe 9f f8 8a 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000d4e6:	d7 03       	nop
8000d4e8:	e4 c8 00 01 	sub	r8,r2,1
8000d4ec:	e0 48 01 5c 	cp.w	r8,348
8000d4f0:	e0 8b 00 05 	brhi	8000d4fa <__svfscanf_r+0xf1e>
8000d4f4:	30 0c       	mov	r12,0
8000d4f6:	50 bc       	stdsp	sp[0x2c],r12
8000d4f8:	c0 68       	rjmp	8000d504 <__svfscanf_r+0xf28>
8000d4fa:	e4 cb 01 5d 	sub	r11,r2,349
8000d4fe:	e0 62 01 5d 	mov	r2,349
8000d502:	50 bb       	stdsp	sp[0x2c],r11
8000d504:	02 98       	mov	r8,r1
8000d506:	fa c9 ff c0 	sub	r9,sp,-64
8000d50a:	30 01       	mov	r1,0
8000d50c:	e8 18 07 80 	orl	r8,0x780
8000d510:	50 e7       	stdsp	sp[0x38],r7
8000d512:	50 f3       	stdsp	sp[0x3c],r3
8000d514:	50 91       	stdsp	sp[0x24],r1
8000d516:	50 c1       	stdsp	sp[0x30],r1
8000d518:	50 21       	stdsp	sp[0x8],r1
8000d51a:	50 d1       	stdsp	sp[0x34],r1
8000d51c:	10 97       	mov	r7,r8
8000d51e:	02 9a       	mov	r10,r1
8000d520:	12 93       	mov	r3,r9
8000d522:	6a 0b       	ld.w	r11,r5[0x0]
8000d524:	34 e9       	mov	r9,78
8000d526:	17 8b       	ld.ub	r11,r11[0x0]
8000d528:	f2 0b 18 00 	cp.b	r11,r9
8000d52c:	e0 80 00 88 	breq	8000d63c <__svfscanf_r+0x1060>
8000d530:	e0 8b 00 36 	brhi	8000d59c <__svfscanf_r+0xfc0>
8000d534:	33 9c       	mov	r12,57
8000d536:	f8 0b 18 00 	cp.b	r11,r12
8000d53a:	e0 8b 00 1d 	brhi	8000d574 <__svfscanf_r+0xf98>
8000d53e:	33 1c       	mov	r12,49
8000d540:	f8 0b 18 00 	cp.b	r11,r12
8000d544:	c6 f2       	brcc	8000d622 <__svfscanf_r+0x1046>
8000d546:	32 ec       	mov	r12,46
8000d548:	f8 0b 18 00 	cp.b	r11,r12
8000d54c:	e0 80 00 c5 	breq	8000d6d6 <__svfscanf_r+0x10fa>
8000d550:	e0 8b 00 0c 	brhi	8000d568 <__svfscanf_r+0xf8c>
8000d554:	32 bc       	mov	r12,43
8000d556:	f8 0b 18 00 	cp.b	r11,r12
8000d55a:	c6 b0       	breq	8000d630 <__svfscanf_r+0x1054>
8000d55c:	32 dc       	mov	r12,45
8000d55e:	f8 0b 18 00 	cp.b	r11,r12
8000d562:	e0 81 00 f5 	brne	8000d74c <__svfscanf_r+0x1170>
8000d566:	c6 58       	rjmp	8000d630 <__svfscanf_r+0x1054>
8000d568:	33 0c       	mov	r12,48
8000d56a:	f8 0b 18 00 	cp.b	r11,r12
8000d56e:	e0 81 00 ef 	brne	8000d74c <__svfscanf_r+0x1170>
8000d572:	c4 98       	rjmp	8000d604 <__svfscanf_r+0x1028>
8000d574:	34 5c       	mov	r12,69
8000d576:	f8 0b 18 00 	cp.b	r11,r12
8000d57a:	e0 80 00 b6 	breq	8000d6e6 <__svfscanf_r+0x110a>
8000d57e:	e0 8b 00 08 	brhi	8000d58e <__svfscanf_r+0xfb2>
8000d582:	34 1c       	mov	r12,65
8000d584:	f8 0b 18 00 	cp.b	r11,r12
8000d588:	e0 81 00 e2 	brne	8000d74c <__svfscanf_r+0x1170>
8000d58c:	c7 08       	rjmp	8000d66c <__svfscanf_r+0x1090>
8000d58e:	34 6c       	mov	r12,70
8000d590:	f8 0b 18 00 	cp.b	r11,r12
8000d594:	e0 80 00 8f 	breq	8000d6b2 <__svfscanf_r+0x10d6>
8000d598:	34 9c       	mov	r12,73
8000d59a:	c2 68       	rjmp	8000d5e6 <__svfscanf_r+0x100a>
8000d59c:	36 6c       	mov	r12,102
8000d59e:	f8 0b 18 00 	cp.b	r11,r12
8000d5a2:	e0 80 00 88 	breq	8000d6b2 <__svfscanf_r+0x10d6>
8000d5a6:	e0 8b 00 19 	brhi	8000d5d8 <__svfscanf_r+0xffc>
8000d5aa:	35 9c       	mov	r12,89
8000d5ac:	f8 0b 18 00 	cp.b	r11,r12
8000d5b0:	e0 80 00 8d 	breq	8000d6ca <__svfscanf_r+0x10ee>
8000d5b4:	e0 8b 00 08 	brhi	8000d5c4 <__svfscanf_r+0xfe8>
8000d5b8:	35 4c       	mov	r12,84
8000d5ba:	f8 0b 18 00 	cp.b	r11,r12
8000d5be:	e0 81 00 c7 	brne	8000d74c <__svfscanf_r+0x1170>
8000d5c2:	c7 e8       	rjmp	8000d6be <__svfscanf_r+0x10e2>
8000d5c4:	36 1c       	mov	r12,97
8000d5c6:	f8 0b 18 00 	cp.b	r11,r12
8000d5ca:	c5 10       	breq	8000d66c <__svfscanf_r+0x1090>
8000d5cc:	36 5c       	mov	r12,101
8000d5ce:	f8 0b 18 00 	cp.b	r11,r12
8000d5d2:	e0 81 00 bd 	brne	8000d74c <__svfscanf_r+0x1170>
8000d5d6:	c8 88       	rjmp	8000d6e6 <__svfscanf_r+0x110a>
8000d5d8:	36 e8       	mov	r8,110
8000d5da:	f0 0b 18 00 	cp.b	r11,r8
8000d5de:	c2 f0       	breq	8000d63c <__svfscanf_r+0x1060>
8000d5e0:	e0 8b 00 08 	brhi	8000d5f0 <__svfscanf_r+0x1014>
8000d5e4:	36 9c       	mov	r12,105
8000d5e6:	f8 0b 18 00 	cp.b	r11,r12
8000d5ea:	e0 81 00 b1 	brne	8000d74c <__svfscanf_r+0x1170>
8000d5ee:	c4 58       	rjmp	8000d678 <__svfscanf_r+0x109c>
8000d5f0:	37 4c       	mov	r12,116
8000d5f2:	f8 0b 18 00 	cp.b	r11,r12
8000d5f6:	c6 40       	breq	8000d6be <__svfscanf_r+0x10e2>
8000d5f8:	37 9c       	mov	r12,121
8000d5fa:	f8 0b 18 00 	cp.b	r11,r12
8000d5fe:	e0 81 00 a7 	brne	8000d74c <__svfscanf_r+0x1170>
8000d602:	c6 48       	rjmp	8000d6ca <__svfscanf_r+0x10ee>
8000d604:	ed b7 00 08 	bld	r7,0x8
8000d608:	c0 d1       	brne	8000d622 <__svfscanf_r+0x1046>
8000d60a:	40 2c       	lddsp	r12,sp[0x8]
8000d60c:	2f fc       	sub	r12,-1
8000d60e:	50 2c       	stdsp	sp[0x8],r12
8000d610:	a7 d7       	cbr	r7,0x7
8000d612:	40 bb       	lddsp	r11,sp[0x2c]
8000d614:	58 0b       	cp.w	r11,0
8000d616:	e0 80 00 86 	breq	8000d722 <__svfscanf_r+0x1146>
8000d61a:	20 1b       	sub	r11,1
8000d61c:	2f f2       	sub	r2,-1
8000d61e:	50 bb       	stdsp	sp[0x2c],r11
8000d620:	c8 18       	rjmp	8000d722 <__svfscanf_r+0x1146>
8000d622:	e2 0a 00 0c 	add	r12,r1,r10
8000d626:	e0 81 00 93 	brne	8000d74c <__svfscanf_r+0x1170>
8000d62a:	e0 17 fe 7f 	andl	r7,0xfe7f
8000d62e:	c7 98       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d630:	ed b7 00 07 	bld	r7,0x7
8000d634:	e0 81 00 8c 	brne	8000d74c <__svfscanf_r+0x1170>
8000d638:	a7 d7       	cbr	r7,0x7
8000d63a:	c7 38       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d63c:	58 0a       	cp.w	r10,0
8000d63e:	c0 b1       	brne	8000d654 <__svfscanf_r+0x1078>
8000d640:	0e 9c       	mov	r12,r7
8000d642:	e2 1c 07 00 	andl	r12,0x700,COH
8000d646:	e0 4c 07 00 	cp.w	r12,1792
8000d64a:	c0 b1       	brne	8000d660 <__svfscanf_r+0x1084>
8000d64c:	e0 17 f8 7f 	andl	r7,0xf87f
8000d650:	30 1a       	mov	r10,1
8000d652:	c6 78       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d654:	30 29       	mov	r9,2
8000d656:	f2 0a 18 00 	cp.b	r10,r9
8000d65a:	c0 31       	brne	8000d660 <__svfscanf_r+0x1084>
8000d65c:	30 3a       	mov	r10,3
8000d65e:	c6 18       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d660:	30 48       	mov	r8,4
8000d662:	30 1c       	mov	r12,1
8000d664:	f0 01 18 00 	cp.b	r1,r8
8000d668:	5f 0e       	sreq	lr
8000d66a:	c1 88       	rjmp	8000d69a <__svfscanf_r+0x10be>
8000d66c:	30 18       	mov	r8,1
8000d66e:	f0 0a 18 00 	cp.b	r10,r8
8000d672:	c6 d1       	brne	8000d74c <__svfscanf_r+0x1170>
8000d674:	30 2a       	mov	r10,2
8000d676:	c5 58       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d678:	58 01       	cp.w	r1,0
8000d67a:	c0 b1       	brne	8000d690 <__svfscanf_r+0x10b4>
8000d67c:	0e 9c       	mov	r12,r7
8000d67e:	e2 1c 07 00 	andl	r12,0x700,COH
8000d682:	e0 4c 07 00 	cp.w	r12,1792
8000d686:	c0 51       	brne	8000d690 <__svfscanf_r+0x10b4>
8000d688:	e0 17 f8 7f 	andl	r7,0xf87f
8000d68c:	30 11       	mov	r1,1
8000d68e:	c4 98       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d690:	30 5c       	mov	r12,5
8000d692:	f8 01 18 00 	cp.b	r1,r12
8000d696:	5f 0e       	sreq	lr
8000d698:	30 3c       	mov	r12,3
8000d69a:	f8 01 18 00 	cp.b	r1,r12
8000d69e:	5f 0c       	sreq	r12
8000d6a0:	30 09       	mov	r9,0
8000d6a2:	fd ec 10 0c 	or	r12,lr,r12
8000d6a6:	f2 0c 18 00 	cp.b	r12,r9
8000d6aa:	c5 10       	breq	8000d74c <__svfscanf_r+0x1170>
8000d6ac:	2f f1       	sub	r1,-1
8000d6ae:	5c 51       	castu.b	r1
8000d6b0:	c3 88       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d6b2:	30 28       	mov	r8,2
8000d6b4:	f0 01 18 00 	cp.b	r1,r8
8000d6b8:	c4 a1       	brne	8000d74c <__svfscanf_r+0x1170>
8000d6ba:	30 31       	mov	r1,3
8000d6bc:	c3 28       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d6be:	30 6c       	mov	r12,6
8000d6c0:	f8 01 18 00 	cp.b	r1,r12
8000d6c4:	c4 41       	brne	8000d74c <__svfscanf_r+0x1170>
8000d6c6:	30 71       	mov	r1,7
8000d6c8:	c2 c8       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d6ca:	30 7c       	mov	r12,7
8000d6cc:	f8 01 18 00 	cp.b	r1,r12
8000d6d0:	c3 e1       	brne	8000d74c <__svfscanf_r+0x1170>
8000d6d2:	30 81       	mov	r1,8
8000d6d4:	c2 68       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d6d6:	ed b7 00 09 	bld	r7,0x9
8000d6da:	c3 91       	brne	8000d74c <__svfscanf_r+0x1170>
8000d6dc:	40 2c       	lddsp	r12,sp[0x8]
8000d6de:	e0 17 fd 7f 	andl	r7,0xfd7f
8000d6e2:	50 dc       	stdsp	sp[0x34],r12
8000d6e4:	c1 e8       	rjmp	8000d720 <__svfscanf_r+0x1144>
8000d6e6:	0e 9c       	mov	r12,r7
8000d6e8:	e2 1c 05 00 	andl	r12,0x500,COH
8000d6ec:	e0 4c 04 00 	cp.w	r12,1024
8000d6f0:	c0 a0       	breq	8000d704 <__svfscanf_r+0x1128>
8000d6f2:	40 29       	lddsp	r9,sp[0x8]
8000d6f4:	30 08       	mov	r8,0
8000d6f6:	58 09       	cp.w	r9,0
8000d6f8:	5f 1c       	srne	r12
8000d6fa:	f9 e7 02 ac 	and	r12,r12,r7>>0xa
8000d6fe:	f0 0c 18 00 	cp.b	r12,r8
8000d702:	c2 50       	breq	8000d74c <__svfscanf_r+0x1170>
8000d704:	ed b7 00 09 	bld	r7,0x9
8000d708:	c0 60       	breq	8000d714 <__svfscanf_r+0x1138>
8000d70a:	40 2c       	lddsp	r12,sp[0x8]
8000d70c:	40 d9       	lddsp	r9,sp[0x34]
8000d70e:	50 93       	stdsp	sp[0x24],r3
8000d710:	12 1c       	sub	r12,r9
8000d712:	50 cc       	stdsp	sp[0x30],r12
8000d714:	e0 17 f8 7f 	andl	r7,0xf87f
8000d718:	30 08       	mov	r8,0
8000d71a:	e8 17 01 80 	orl	r7,0x180
8000d71e:	50 28       	stdsp	sp[0x8],r8
8000d720:	06 cb       	st.b	r3++,r11
8000d722:	6a 1b       	ld.w	r11,r5[0x4]
8000d724:	20 1b       	sub	r11,1
8000d726:	8b 1b       	st.w	r5[0x4],r11
8000d728:	2f f0       	sub	r0,-1
8000d72a:	58 0b       	cp.w	r11,0
8000d72c:	e0 8a 00 06 	brle	8000d738 <__svfscanf_r+0x115c>
8000d730:	6a 0b       	ld.w	r11,r5[0x0]
8000d732:	2f fb       	sub	r11,-1
8000d734:	8b 0b       	st.w	r5[0x0],r11
8000d736:	c0 88       	rjmp	8000d746 <__svfscanf_r+0x116a>
8000d738:	50 1a       	stdsp	sp[0x4],r10
8000d73a:	0a 9b       	mov	r11,r5
8000d73c:	40 4c       	lddsp	r12,sp[0x10]
8000d73e:	e0 a0 15 8d 	rcall	80010258 <__srefill_r>
8000d742:	40 1a       	lddsp	r10,sp[0x4]
8000d744:	c0 41       	brne	8000d74c <__svfscanf_r+0x1170>
8000d746:	20 12       	sub	r2,1
8000d748:	fe 91 fe ed 	brne	8000d522 <__svfscanf_r+0xf46>
8000d74c:	0e 98       	mov	r8,r7
8000d74e:	14 9b       	mov	r11,r10
8000d750:	40 2c       	lddsp	r12,sp[0x8]
8000d752:	58 0c       	cp.w	r12,0
8000d754:	fe 7a fe ff 	mov	r10,-257
8000d758:	f1 da e1 28 	andne	r8,r8,r10
8000d75c:	06 99       	mov	r9,r3
8000d75e:	40 e7       	lddsp	r7,sp[0x38]
8000d760:	40 f3       	lddsp	r3,sp[0x3c]
8000d762:	f6 ca 00 01 	sub	r10,r11,1
8000d766:	58 1a       	cp.w	r10,1
8000d768:	e0 8b 00 10 	brhi	8000d788 <__svfscanf_r+0x11ac>
8000d76c:	c0 78       	rjmp	8000d77a <__svfscanf_r+0x119e>
8000d76e:	0a 9a       	mov	r10,r5
8000d770:	0d 7b       	ld.ub	r11,--r6
8000d772:	40 4c       	lddsp	r12,sp[0x10]
8000d774:	e0 a0 20 5a 	rcall	80011828 <_ungetc_r>
8000d778:	c0 48       	rjmp	8000d780 <__svfscanf_r+0x11a4>
8000d77a:	fa c7 ff c0 	sub	r7,sp,-64
8000d77e:	12 96       	mov	r6,r9
8000d780:	0e 36       	cp.w	r6,r7
8000d782:	fe 9b ff f6 	brhi	8000d76e <__svfscanf_r+0x1192>
8000d786:	c7 79       	rjmp	8000da74 <__svfscanf_r+0x1498>
8000d788:	e2 ca 00 01 	sub	r10,r1,1
8000d78c:	58 6a       	cp.w	r10,6
8000d78e:	e0 8b 00 2d 	brhi	8000d7e8 <__svfscanf_r+0x120c>
8000d792:	30 2a       	mov	r10,2
8000d794:	f4 01 18 00 	cp.b	r1,r10
8000d798:	e0 88 00 21 	brls	8000d7da <__svfscanf_r+0x11fe>
8000d79c:	02 92       	mov	r2,r1
8000d79e:	50 b9       	stdsp	sp[0x2c],r9
8000d7a0:	c0 e8       	rjmp	8000d7bc <__svfscanf_r+0x11e0>
8000d7a2:	40 bc       	lddsp	r12,sp[0x2c]
8000d7a4:	19 7b       	ld.ub	r11,--r12
8000d7a6:	0a 9a       	mov	r10,r5
8000d7a8:	50 bc       	stdsp	sp[0x2c],r12
8000d7aa:	50 19       	stdsp	sp[0x4],r9
8000d7ac:	50 08       	stdsp	sp[0x0],r8
8000d7ae:	40 4c       	lddsp	r12,sp[0x10]
8000d7b0:	e0 a0 20 3c 	rcall	80011828 <_ungetc_r>
8000d7b4:	20 12       	sub	r2,1
8000d7b6:	40 08       	lddsp	r8,sp[0x0]
8000d7b8:	5c 52       	castu.b	r2
8000d7ba:	40 19       	lddsp	r9,sp[0x4]
8000d7bc:	30 3b       	mov	r11,3
8000d7be:	f6 02 18 00 	cp.b	r2,r11
8000d7c2:	cf 01       	brne	8000d7a2 <__svfscanf_r+0x11c6>
8000d7c4:	20 31       	sub	r1,3
8000d7c6:	5c 51       	castu.b	r1
8000d7c8:	02 10       	sub	r0,r1
8000d7ca:	02 19       	sub	r9,r1
8000d7cc:	c0 e8       	rjmp	8000d7e8 <__svfscanf_r+0x120c>
8000d7ce:	0a 9a       	mov	r10,r5
8000d7d0:	0d 7b       	ld.ub	r11,--r6
8000d7d2:	40 4c       	lddsp	r12,sp[0x10]
8000d7d4:	e0 a0 20 2a 	rcall	80011828 <_ungetc_r>
8000d7d8:	c0 48       	rjmp	8000d7e0 <__svfscanf_r+0x1204>
8000d7da:	fa c7 ff c0 	sub	r7,sp,-64
8000d7de:	12 96       	mov	r6,r9
8000d7e0:	0e 36       	cp.w	r6,r7
8000d7e2:	fe 9b ff f6 	brhi	8000d7ce <__svfscanf_r+0x11f2>
8000d7e6:	c4 79       	rjmp	8000da74 <__svfscanf_r+0x1498>
8000d7e8:	ed b8 00 08 	bld	r8,0x8
8000d7ec:	c3 21       	brne	8000d850 <__svfscanf_r+0x1274>
8000d7ee:	10 9a       	mov	r10,r8
8000d7f0:	e2 1a 04 00 	andl	r10,0x400,COH
8000d7f4:	c0 f0       	breq	8000d812 <__svfscanf_r+0x1236>
8000d7f6:	c0 78       	rjmp	8000d804 <__svfscanf_r+0x1228>
8000d7f8:	0a 9a       	mov	r10,r5
8000d7fa:	0d 7b       	ld.ub	r11,--r6
8000d7fc:	40 4c       	lddsp	r12,sp[0x10]
8000d7fe:	e0 a0 20 15 	rcall	80011828 <_ungetc_r>
8000d802:	c0 48       	rjmp	8000d80a <__svfscanf_r+0x122e>
8000d804:	fa c7 ff c0 	sub	r7,sp,-64
8000d808:	12 96       	mov	r6,r9
8000d80a:	0e 36       	cp.w	r6,r7
8000d80c:	fe 9b ff f6 	brhi	8000d7f8 <__svfscanf_r+0x121c>
8000d810:	c3 29       	rjmp	8000da74 <__svfscanf_r+0x1498>
8000d812:	13 7b       	ld.ub	r11,--r9
8000d814:	20 10       	sub	r0,1
8000d816:	e0 4b 00 45 	cp.w	r11,69
8000d81a:	5f 1e       	srne	lr
8000d81c:	e0 4b 00 65 	cp.w	r11,101
8000d820:	5f 1c       	srne	r12
8000d822:	fd ec 00 0c 	and	r12,lr,r12
8000d826:	f4 0c 18 00 	cp.b	r12,r10
8000d82a:	c0 b0       	breq	8000d840 <__svfscanf_r+0x1264>
8000d82c:	50 19       	stdsp	sp[0x4],r9
8000d82e:	50 08       	stdsp	sp[0x0],r8
8000d830:	0a 9a       	mov	r10,r5
8000d832:	40 4c       	lddsp	r12,sp[0x10]
8000d834:	e0 a0 1f fa 	rcall	80011828 <_ungetc_r>
8000d838:	40 19       	lddsp	r9,sp[0x4]
8000d83a:	20 10       	sub	r0,1
8000d83c:	13 7b       	ld.ub	r11,--r9
8000d83e:	40 08       	lddsp	r8,sp[0x0]
8000d840:	50 19       	stdsp	sp[0x4],r9
8000d842:	50 08       	stdsp	sp[0x0],r8
8000d844:	0a 9a       	mov	r10,r5
8000d846:	40 4c       	lddsp	r12,sp[0x10]
8000d848:	e0 a0 1f f0 	rcall	80011828 <_ungetc_r>
8000d84c:	40 08       	lddsp	r8,sp[0x0]
8000d84e:	40 19       	lddsp	r9,sp[0x4]
8000d850:	10 9a       	mov	r10,r8
8000d852:	e2 1a 00 10 	andl	r10,0x10,COH
8000d856:	fe 91 f6 d0 	brne	8000c5f6 <__svfscanf_r+0x1a>
8000d85a:	b2 8a       	st.b	r9[0x0],r10
8000d85c:	10 9b       	mov	r11,r8
8000d85e:	e2 1b 06 00 	andl	r11,0x600,COH
8000d862:	e0 4b 04 00 	cp.w	r11,1024
8000d866:	c0 81       	brne	8000d876 <__svfscanf_r+0x129a>
8000d868:	40 2c       	lddsp	r12,sp[0x8]
8000d86a:	40 da       	lddsp	r10,sp[0x34]
8000d86c:	14 1c       	sub	r12,r10
8000d86e:	c2 10       	breq	8000d8b0 <__svfscanf_r+0x12d4>
8000d870:	5c 3c       	neg	r12
8000d872:	50 99       	stdsp	sp[0x24],r9
8000d874:	c0 e8       	rjmp	8000d890 <__svfscanf_r+0x12b4>
8000d876:	40 c9       	lddsp	r9,sp[0x30]
8000d878:	58 09       	cp.w	r9,0
8000d87a:	c1 b0       	breq	8000d8b0 <__svfscanf_r+0x12d4>
8000d87c:	40 9b       	lddsp	r11,sp[0x24]
8000d87e:	50 08       	stdsp	sp[0x0],r8
8000d880:	2f fb       	sub	r11,-1
8000d882:	30 a9       	mov	r9,10
8000d884:	40 4c       	lddsp	r12,sp[0x10]
8000d886:	e0 a0 1d 43 	rcall	8001130c <_strtol_r>
8000d88a:	40 cb       	lddsp	r11,sp[0x30]
8000d88c:	40 08       	lddsp	r8,sp[0x0]
8000d88e:	16 1c       	sub	r12,r11
8000d890:	fa c9 fe 6d 	sub	r9,sp,-403
8000d894:	40 9a       	lddsp	r10,sp[0x24]
8000d896:	12 3a       	cp.w	r10,r9
8000d898:	c0 43       	brcs	8000d8a0 <__svfscanf_r+0x12c4>
8000d89a:	fa cb fe 6e 	sub	r11,sp,-402
8000d89e:	50 9b       	stdsp	sp[0x24],r11
8000d8a0:	1a dc       	st.w	--sp,r12
8000d8a2:	4c ab       	lddpc	r11,8000d9c8 <__svfscanf_r+0x13ec>
8000d8a4:	50 18       	stdsp	sp[0x4],r8
8000d8a6:	40 ac       	lddsp	r12,sp[0x28]
8000d8a8:	fe b0 e5 46 	rcall	8000a334 <sprintf>
8000d8ac:	2f fd       	sub	sp,-4
8000d8ae:	40 08       	lddsp	r8,sp[0x0]
8000d8b0:	50 08       	stdsp	sp[0x0],r8
8000d8b2:	30 0a       	mov	r10,0
8000d8b4:	fa cb ff c0 	sub	r11,sp,-64
8000d8b8:	40 4c       	lddsp	r12,sp[0x10]
8000d8ba:	e0 a0 16 1d 	rcall	800104f4 <_strtod_r>
8000d8be:	fa eb 00 08 	st.d	sp[8],r10
8000d8c2:	40 08       	lddsp	r8,sp[0x0]
8000d8c4:	ed b8 00 00 	bld	r8,0x0
8000d8c8:	c2 b1       	brne	8000d91e <__svfscanf_r+0x1342>
8000d8ca:	40 5a       	lddsp	r10,sp[0x14]
8000d8cc:	58 0a       	cp.w	r10,0
8000d8ce:	c1 40       	breq	8000d8f6 <__svfscanf_r+0x131a>
8000d8d0:	0e 34       	cp.w	r4,r7
8000d8d2:	c0 64       	brge	8000d8de <__svfscanf_r+0x1302>
8000d8d4:	fa c9 fc d4 	sub	r9,sp,-812
8000d8d8:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000d8dc:	c5 48       	rjmp	8000d984 <__svfscanf_r+0x13a8>
8000d8de:	fa ca fd 60 	sub	r10,sp,-672
8000d8e2:	0c 99       	mov	r9,r6
8000d8e4:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d8e8:	0e 98       	mov	r8,r7
8000d8ea:	13 0b       	ld.w	r11,r9++
8000d8ec:	14 ab       	st.w	r10++,r11
8000d8ee:	2f f8       	sub	r8,-1
8000d8f0:	10 34       	cp.w	r4,r8
8000d8f2:	cf c4       	brge	8000d8ea <__svfscanf_r+0x130e>
8000d8f4:	c2 d8       	rjmp	8000d94e <__svfscanf_r+0x1372>
8000d8f6:	e6 c8 ff ff 	sub	r8,r3,-1
8000d8fa:	0e 33       	cp.w	r3,r7
8000d8fc:	c0 64       	brge	8000d908 <__svfscanf_r+0x132c>
8000d8fe:	fa cc fc d4 	sub	r12,sp,-812
8000d902:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d906:	c3 e8       	rjmp	8000d982 <__svfscanf_r+0x13a6>
8000d908:	6c 04       	ld.w	r4,r6[0x0]
8000d90a:	2f c6       	sub	r6,-4
8000d90c:	59 f7       	cp.w	r7,31
8000d90e:	e0 89 00 4c 	brgt	8000d9a6 <__svfscanf_r+0x13ca>
8000d912:	10 93       	mov	r3,r8
8000d914:	fa cb fc d4 	sub	r11,sp,-812
8000d918:	f6 07 00 28 	add	r8,r11,r7<<0x2
8000d91c:	c4 18       	rjmp	8000d99e <__svfscanf_r+0x13c2>
8000d91e:	ed b8 00 01 	bld	r8,0x1
8000d922:	c4 81       	brne	8000d9b2 <__svfscanf_r+0x13d6>
8000d924:	40 58       	lddsp	r8,sp[0x14]
8000d926:	58 08       	cp.w	r8,0
8000d928:	c2 50       	breq	8000d972 <__svfscanf_r+0x1396>
8000d92a:	0e 34       	cp.w	r4,r7
8000d92c:	c0 64       	brge	8000d938 <__svfscanf_r+0x135c>
8000d92e:	fa cc fc d4 	sub	r12,sp,-812
8000d932:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d936:	c2 78       	rjmp	8000d984 <__svfscanf_r+0x13a8>
8000d938:	fa ca fd 60 	sub	r10,sp,-672
8000d93c:	0c 99       	mov	r9,r6
8000d93e:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d942:	0e 98       	mov	r8,r7
8000d944:	13 0b       	ld.w	r11,r9++
8000d946:	14 ab       	st.w	r10++,r11
8000d948:	2f f8       	sub	r8,-1
8000d94a:	10 34       	cp.w	r4,r8
8000d94c:	cf c4       	brge	8000d944 <__svfscanf_r+0x1368>
8000d94e:	ee c9 ff ff 	sub	r9,r7,-1
8000d952:	ee 08 11 ff 	rsub	r8,r7,-1
8000d956:	f0 c7 ff ff 	sub	r7,r8,-1
8000d95a:	2f e8       	sub	r8,-2
8000d95c:	08 08       	add	r8,r4
8000d95e:	08 07       	add	r7,r4
8000d960:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d964:	f2 07 00 07 	add	r7,r9,r7
8000d968:	fa c8 fd 60 	sub	r8,sp,-672
8000d96c:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000d970:	c1 c8       	rjmp	8000d9a8 <__svfscanf_r+0x13cc>
8000d972:	e6 c8 ff ff 	sub	r8,r3,-1
8000d976:	0e 33       	cp.w	r3,r7
8000d978:	c0 94       	brge	8000d98a <__svfscanf_r+0x13ae>
8000d97a:	fa cb fc d4 	sub	r11,sp,-812
8000d97e:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000d982:	10 93       	mov	r3,r8
8000d984:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000d988:	c1 08       	rjmp	8000d9a8 <__svfscanf_r+0x13cc>
8000d98a:	6c 04       	ld.w	r4,r6[0x0]
8000d98c:	2f c6       	sub	r6,-4
8000d98e:	59 f7       	cp.w	r7,31
8000d990:	e0 89 00 0b 	brgt	8000d9a6 <__svfscanf_r+0x13ca>
8000d994:	10 93       	mov	r3,r8
8000d996:	fa ca fc d4 	sub	r10,sp,-812
8000d99a:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000d99e:	f1 44 ff 74 	st.w	r8[-140],r4
8000d9a2:	2f f7       	sub	r7,-1
8000d9a4:	c0 28       	rjmp	8000d9a8 <__svfscanf_r+0x13cc>
8000d9a6:	10 93       	mov	r3,r8
8000d9a8:	fa e8 00 08 	ld.d	r8,sp[8]
8000d9ac:	e8 e9 00 00 	st.d	r4[0],r8
8000d9b0:	c5 48       	rjmp	8000da58 <__svfscanf_r+0x147c>
8000d9b2:	40 58       	lddsp	r8,sp[0x14]
8000d9b4:	58 08       	cp.w	r8,0
8000d9b6:	c2 80       	breq	8000da06 <__svfscanf_r+0x142a>
8000d9b8:	0e 34       	cp.w	r4,r7
8000d9ba:	c0 94       	brge	8000d9cc <__svfscanf_r+0x13f0>
8000d9bc:	fa cc fc d4 	sub	r12,sp,-812
8000d9c0:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d9c4:	c2 a8       	rjmp	8000da18 <__svfscanf_r+0x143c>
8000d9c6:	d7 03       	nop
8000d9c8:	80 01       	ld.sh	r1,r0[0x0]
8000d9ca:	42 68       	lddsp	r8,sp[0x98]
8000d9cc:	fa ca fd 60 	sub	r10,sp,-672
8000d9d0:	0c 99       	mov	r9,r6
8000d9d2:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000d9d6:	0e 98       	mov	r8,r7
8000d9d8:	13 0b       	ld.w	r11,r9++
8000d9da:	14 ab       	st.w	r10++,r11
8000d9dc:	2f f8       	sub	r8,-1
8000d9de:	10 34       	cp.w	r4,r8
8000d9e0:	cf c4       	brge	8000d9d8 <__svfscanf_r+0x13fc>
8000d9e2:	ee c9 ff ff 	sub	r9,r7,-1
8000d9e6:	ee 08 11 ff 	rsub	r8,r7,-1
8000d9ea:	f0 c7 ff ff 	sub	r7,r8,-1
8000d9ee:	2f e8       	sub	r8,-2
8000d9f0:	08 08       	add	r8,r4
8000d9f2:	08 07       	add	r7,r4
8000d9f4:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000d9f8:	f2 07 00 07 	add	r7,r9,r7
8000d9fc:	fa c8 fd 60 	sub	r8,sp,-672
8000da00:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000da04:	c1 c8       	rjmp	8000da3c <__svfscanf_r+0x1460>
8000da06:	e6 c8 ff ff 	sub	r8,r3,-1
8000da0a:	0e 33       	cp.w	r3,r7
8000da0c:	c0 94       	brge	8000da1e <__svfscanf_r+0x1442>
8000da0e:	fa cb fc d4 	sub	r11,sp,-812
8000da12:	10 93       	mov	r3,r8
8000da14:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000da18:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000da1c:	c1 08       	rjmp	8000da3c <__svfscanf_r+0x1460>
8000da1e:	6c 04       	ld.w	r4,r6[0x0]
8000da20:	2f c6       	sub	r6,-4
8000da22:	59 f7       	cp.w	r7,31
8000da24:	e0 89 00 0b 	brgt	8000da3a <__svfscanf_r+0x145e>
8000da28:	10 93       	mov	r3,r8
8000da2a:	fa ca fc d4 	sub	r10,sp,-812
8000da2e:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000da32:	2f f7       	sub	r7,-1
8000da34:	f1 44 ff 74 	st.w	r8[-140],r4
8000da38:	c0 28       	rjmp	8000da3c <__svfscanf_r+0x1460>
8000da3a:	10 93       	mov	r3,r8
8000da3c:	fa ea 00 08 	ld.d	r10,sp[8]
8000da40:	e0 a0 15 09 	rcall	80010452 <__isnand>
8000da44:	c0 50       	breq	8000da4e <__svfscanf_r+0x1472>
8000da46:	30 0c       	mov	r12,0
8000da48:	e0 a0 14 ed 	rcall	80010422 <nanf>
8000da4c:	c0 58       	rjmp	8000da56 <__svfscanf_r+0x147a>
8000da4e:	fa ea 00 08 	ld.d	r10,sp[8]
8000da52:	e0 a0 28 55 	rcall	80012afc <__avr32_f64_to_f32>
8000da56:	89 0c       	st.w	r4[0x0],r12
8000da58:	40 69       	lddsp	r9,sp[0x18]
8000da5a:	2f f9       	sub	r9,-1
8000da5c:	50 69       	stdsp	sp[0x18],r9
8000da5e:	fe 9f f5 cc 	bral	8000c5f6 <__svfscanf_r+0x1a>
8000da62:	40 68       	lddsp	r8,sp[0x18]
8000da64:	58 08       	cp.w	r8,0
8000da66:	c0 50       	breq	8000da70 <__svfscanf_r+0x1494>
8000da68:	8a 68       	ld.sh	r8,r5[0xc]
8000da6a:	ed b8 00 06 	bld	r8,0x6
8000da6e:	c0 31       	brne	8000da74 <__svfscanf_r+0x1498>
8000da70:	3f fc       	mov	r12,-1
8000da72:	50 6c       	stdsp	sp[0x18],r12
8000da74:	40 6c       	lddsp	r12,sp[0x18]
8000da76:	fe 3d fc d4 	sub	sp,-812
8000da7a:	d8 32       	popm	r0-r7,pc

8000da7c <__swbuf_r>:
8000da7c:	d4 21       	pushm	r4-r7,lr
8000da7e:	16 97       	mov	r7,r11
8000da80:	14 96       	mov	r6,r10
8000da82:	18 95       	mov	r5,r12
8000da84:	58 0c       	cp.w	r12,0
8000da86:	c0 60       	breq	8000da92 <__swbuf_r+0x16>
8000da88:	78 68       	ld.w	r8,r12[0x18]
8000da8a:	58 08       	cp.w	r8,0
8000da8c:	c0 31       	brne	8000da92 <__swbuf_r+0x16>
8000da8e:	e0 a0 08 2b 	rcall	8000eae4 <__sinit>
8000da92:	4a 38       	lddpc	r8,8000db1c <__swbuf_r+0xa0>
8000da94:	10 36       	cp.w	r6,r8
8000da96:	c0 31       	brne	8000da9c <__swbuf_r+0x20>
8000da98:	6a 06       	ld.w	r6,r5[0x0]
8000da9a:	c0 a8       	rjmp	8000daae <__swbuf_r+0x32>
8000da9c:	4a 18       	lddpc	r8,8000db20 <__swbuf_r+0xa4>
8000da9e:	10 36       	cp.w	r6,r8
8000daa0:	c0 31       	brne	8000daa6 <__swbuf_r+0x2a>
8000daa2:	6a 16       	ld.w	r6,r5[0x4]
8000daa4:	c0 58       	rjmp	8000daae <__swbuf_r+0x32>
8000daa6:	4a 08       	lddpc	r8,8000db24 <__swbuf_r+0xa8>
8000daa8:	10 36       	cp.w	r6,r8
8000daaa:	eb f6 00 02 	ld.weq	r6,r5[0x8]
8000daae:	6c 68       	ld.w	r8,r6[0x18]
8000dab0:	8d 28       	st.w	r6[0x8],r8
8000dab2:	8c 68       	ld.sh	r8,r6[0xc]
8000dab4:	ed b8 00 03 	bld	r8,0x3
8000dab8:	c0 41       	brne	8000dac0 <__swbuf_r+0x44>
8000daba:	6c 48       	ld.w	r8,r6[0x10]
8000dabc:	58 08       	cp.w	r8,0
8000dabe:	c0 b1       	brne	8000dad4 <__swbuf_r+0x58>
8000dac0:	0c 9b       	mov	r11,r6
8000dac2:	0a 9c       	mov	r12,r5
8000dac4:	c3 2c       	rcall	8000db28 <__swsetup_r>
8000dac6:	c0 70       	breq	8000dad4 <__swbuf_r+0x58>
8000dac8:	8c 68       	ld.sh	r8,r6[0xc]
8000daca:	a7 a8       	sbr	r8,0x6
8000dacc:	ac 68       	st.h	r6[0xc],r8
8000dace:	30 98       	mov	r8,9
8000dad0:	8b 38       	st.w	r5[0xc],r8
8000dad2:	c2 28       	rjmp	8000db16 <__swbuf_r+0x9a>
8000dad4:	6c 48       	ld.w	r8,r6[0x10]
8000dad6:	6c 0c       	ld.w	r12,r6[0x0]
8000dad8:	10 1c       	sub	r12,r8
8000dada:	6c 58       	ld.w	r8,r6[0x14]
8000dadc:	10 3c       	cp.w	r12,r8
8000dade:	c0 65       	brlt	8000daea <__swbuf_r+0x6e>
8000dae0:	0c 9b       	mov	r11,r6
8000dae2:	0a 9c       	mov	r12,r5
8000dae4:	e0 a0 07 10 	rcall	8000e904 <_fflush_r>
8000dae8:	c1 71       	brne	8000db16 <__swbuf_r+0x9a>
8000daea:	6c 28       	ld.w	r8,r6[0x8]
8000daec:	20 18       	sub	r8,1
8000daee:	8d 28       	st.w	r6[0x8],r8
8000daf0:	5c 57       	castu.b	r7
8000daf2:	6c 08       	ld.w	r8,r6[0x0]
8000daf4:	10 c7       	st.b	r8++,r7
8000daf6:	8d 08       	st.w	r6[0x0],r8
8000daf8:	2f fc       	sub	r12,-1
8000dafa:	6c 58       	ld.w	r8,r6[0x14]
8000dafc:	10 3c       	cp.w	r12,r8
8000dafe:	c0 70       	breq	8000db0c <__swbuf_r+0x90>
8000db00:	58 a7       	cp.w	r7,10
8000db02:	5f 08       	sreq	r8
8000db04:	8c 69       	ld.sh	r9,r6[0xc]
8000db06:	f3 e8 00 08 	and	r8,r9,r8
8000db0a:	c0 70       	breq	8000db18 <__swbuf_r+0x9c>
8000db0c:	0c 9b       	mov	r11,r6
8000db0e:	0a 9c       	mov	r12,r5
8000db10:	e0 a0 06 fa 	rcall	8000e904 <_fflush_r>
8000db14:	c0 20       	breq	8000db18 <__swbuf_r+0x9c>
8000db16:	3f f7       	mov	r7,-1
8000db18:	0e 9c       	mov	r12,r7
8000db1a:	d8 22       	popm	r4-r7,pc
8000db1c:	80 01       	ld.sh	r1,r0[0x0]
8000db1e:	42 80       	lddsp	r0,sp[0xa0]
8000db20:	80 01       	ld.sh	r1,r0[0x0]
8000db22:	42 a0       	lddsp	r0,sp[0xa8]
8000db24:	80 01       	ld.sh	r1,r0[0x0]
8000db26:	42 c0       	lddsp	r0,sp[0xb0]

8000db28 <__swsetup_r>:
8000db28:	d4 21       	pushm	r4-r7,lr
8000db2a:	4b 38       	lddpc	r8,8000dbf4 <__swsetup_r+0xcc>
8000db2c:	18 96       	mov	r6,r12
8000db2e:	16 97       	mov	r7,r11
8000db30:	70 0c       	ld.w	r12,r8[0x0]
8000db32:	58 0c       	cp.w	r12,0
8000db34:	c0 60       	breq	8000db40 <__swsetup_r+0x18>
8000db36:	78 68       	ld.w	r8,r12[0x18]
8000db38:	58 08       	cp.w	r8,0
8000db3a:	c0 31       	brne	8000db40 <__swsetup_r+0x18>
8000db3c:	e0 a0 07 d4 	rcall	8000eae4 <__sinit>
8000db40:	4a e8       	lddpc	r8,8000dbf8 <__swsetup_r+0xd0>
8000db42:	10 37       	cp.w	r7,r8
8000db44:	c0 51       	brne	8000db4e <__swsetup_r+0x26>
8000db46:	4a c8       	lddpc	r8,8000dbf4 <__swsetup_r+0xcc>
8000db48:	70 08       	ld.w	r8,r8[0x0]
8000db4a:	70 07       	ld.w	r7,r8[0x0]
8000db4c:	c0 e8       	rjmp	8000db68 <__swsetup_r+0x40>
8000db4e:	4a c8       	lddpc	r8,8000dbfc <__swsetup_r+0xd4>
8000db50:	10 37       	cp.w	r7,r8
8000db52:	c0 51       	brne	8000db5c <__swsetup_r+0x34>
8000db54:	4a 88       	lddpc	r8,8000dbf4 <__swsetup_r+0xcc>
8000db56:	70 08       	ld.w	r8,r8[0x0]
8000db58:	70 17       	ld.w	r7,r8[0x4]
8000db5a:	c0 78       	rjmp	8000db68 <__swsetup_r+0x40>
8000db5c:	4a 98       	lddpc	r8,8000dc00 <__swsetup_r+0xd8>
8000db5e:	10 37       	cp.w	r7,r8
8000db60:	c0 41       	brne	8000db68 <__swsetup_r+0x40>
8000db62:	4a 58       	lddpc	r8,8000dbf4 <__swsetup_r+0xcc>
8000db64:	70 08       	ld.w	r8,r8[0x0]
8000db66:	70 27       	ld.w	r7,r8[0x8]
8000db68:	8e 68       	ld.sh	r8,r7[0xc]
8000db6a:	ed b8 00 03 	bld	r8,0x3
8000db6e:	c1 e0       	breq	8000dbaa <__swsetup_r+0x82>
8000db70:	ed b8 00 04 	bld	r8,0x4
8000db74:	c3 e1       	brne	8000dbf0 <__swsetup_r+0xc8>
8000db76:	ed b8 00 02 	bld	r8,0x2
8000db7a:	c1 51       	brne	8000dba4 <__swsetup_r+0x7c>
8000db7c:	6e db       	ld.w	r11,r7[0x34]
8000db7e:	58 0b       	cp.w	r11,0
8000db80:	c0 a0       	breq	8000db94 <__swsetup_r+0x6c>
8000db82:	ee c8 ff bc 	sub	r8,r7,-68
8000db86:	10 3b       	cp.w	r11,r8
8000db88:	c0 40       	breq	8000db90 <__swsetup_r+0x68>
8000db8a:	0c 9c       	mov	r12,r6
8000db8c:	e0 a0 08 a8 	rcall	8000ecdc <_free_r>
8000db90:	30 08       	mov	r8,0
8000db92:	8f d8       	st.w	r7[0x34],r8
8000db94:	8e 68       	ld.sh	r8,r7[0xc]
8000db96:	e0 18 ff db 	andl	r8,0xffdb
8000db9a:	ae 68       	st.h	r7[0xc],r8
8000db9c:	30 08       	mov	r8,0
8000db9e:	8f 18       	st.w	r7[0x4],r8
8000dba0:	6e 48       	ld.w	r8,r7[0x10]
8000dba2:	8f 08       	st.w	r7[0x0],r8
8000dba4:	8e 68       	ld.sh	r8,r7[0xc]
8000dba6:	a3 b8       	sbr	r8,0x3
8000dba8:	ae 68       	st.h	r7[0xc],r8
8000dbaa:	6e 48       	ld.w	r8,r7[0x10]
8000dbac:	58 08       	cp.w	r8,0
8000dbae:	c0 b1       	brne	8000dbc4 <__swsetup_r+0x9c>
8000dbb0:	8e 68       	ld.sh	r8,r7[0xc]
8000dbb2:	e2 18 02 80 	andl	r8,0x280,COH
8000dbb6:	e0 48 02 00 	cp.w	r8,512
8000dbba:	c0 50       	breq	8000dbc4 <__swsetup_r+0x9c>
8000dbbc:	0c 9c       	mov	r12,r6
8000dbbe:	0e 9b       	mov	r11,r7
8000dbc0:	e0 a0 0b 08 	rcall	8000f1d0 <__smakebuf_r>
8000dbc4:	8e 69       	ld.sh	r9,r7[0xc]
8000dbc6:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000dbca:	c0 70       	breq	8000dbd8 <__swsetup_r+0xb0>
8000dbcc:	30 08       	mov	r8,0
8000dbce:	8f 28       	st.w	r7[0x8],r8
8000dbd0:	6e 58       	ld.w	r8,r7[0x14]
8000dbd2:	5c 38       	neg	r8
8000dbd4:	8f 68       	st.w	r7[0x18],r8
8000dbd6:	c0 68       	rjmp	8000dbe2 <__swsetup_r+0xba>
8000dbd8:	ed b9 00 01 	bld	r9,0x1
8000dbdc:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000dbe0:	8f 28       	st.w	r7[0x8],r8
8000dbe2:	6e 48       	ld.w	r8,r7[0x10]
8000dbe4:	58 08       	cp.w	r8,0
8000dbe6:	c0 61       	brne	8000dbf2 <__swsetup_r+0xca>
8000dbe8:	8e 68       	ld.sh	r8,r7[0xc]
8000dbea:	ed b8 00 07 	bld	r8,0x7
8000dbee:	c0 21       	brne	8000dbf2 <__swsetup_r+0xca>
8000dbf0:	dc 2a       	popm	r4-r7,pc,r12=-1
8000dbf2:	d8 2a       	popm	r4-r7,pc,r12=0
8000dbf4:	00 00       	add	r0,r0
8000dbf6:	01 c0       	ld.ub	r0,r0[0x4]
8000dbf8:	80 01       	ld.sh	r1,r0[0x0]
8000dbfa:	42 80       	lddsp	r0,sp[0xa0]
8000dbfc:	80 01       	ld.sh	r1,r0[0x0]
8000dbfe:	42 a0       	lddsp	r0,sp[0xa8]
8000dc00:	80 01       	ld.sh	r1,r0[0x0]
8000dc02:	42 c0       	lddsp	r0,sp[0xb0]

8000dc04 <quorem>:
8000dc04:	d4 31       	pushm	r0-r7,lr
8000dc06:	20 2d       	sub	sp,8
8000dc08:	18 97       	mov	r7,r12
8000dc0a:	78 48       	ld.w	r8,r12[0x10]
8000dc0c:	76 46       	ld.w	r6,r11[0x10]
8000dc0e:	0c 38       	cp.w	r8,r6
8000dc10:	c0 34       	brge	8000dc16 <quorem+0x12>
8000dc12:	30 0c       	mov	r12,0
8000dc14:	c8 58       	rjmp	8000dd1e <quorem+0x11a>
8000dc16:	ec c2 ff fc 	sub	r2,r6,-4
8000dc1a:	f6 c3 ff ec 	sub	r3,r11,-20
8000dc1e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000dc22:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000dc26:	2f f9       	sub	r9,-1
8000dc28:	20 16       	sub	r6,1
8000dc2a:	f8 09 0d 08 	divu	r8,r12,r9
8000dc2e:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000dc32:	ee c4 ff ec 	sub	r4,r7,-20
8000dc36:	10 95       	mov	r5,r8
8000dc38:	58 08       	cp.w	r8,0
8000dc3a:	c4 10       	breq	8000dcbc <quorem+0xb8>
8000dc3c:	30 09       	mov	r9,0
8000dc3e:	06 9a       	mov	r10,r3
8000dc40:	08 98       	mov	r8,r4
8000dc42:	12 91       	mov	r1,r9
8000dc44:	50 0b       	stdsp	sp[0x0],r11
8000dc46:	70 0e       	ld.w	lr,r8[0x0]
8000dc48:	b1 8e       	lsr	lr,0x10
8000dc4a:	50 1e       	stdsp	sp[0x4],lr
8000dc4c:	15 0e       	ld.w	lr,r10++
8000dc4e:	fc 00 16 10 	lsr	r0,lr,0x10
8000dc52:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000dc56:	ea 0e 03 41 	mac	r1,r5,lr
8000dc5a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000dc5e:	b1 81       	lsr	r1,0x10
8000dc60:	40 1b       	lddsp	r11,sp[0x4]
8000dc62:	ea 00 02 40 	mul	r0,r5,r0
8000dc66:	e2 00 00 00 	add	r0,r1,r0
8000dc6a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000dc6e:	02 1b       	sub	r11,r1
8000dc70:	50 1b       	stdsp	sp[0x4],r11
8000dc72:	70 0b       	ld.w	r11,r8[0x0]
8000dc74:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000dc78:	02 09       	add	r9,r1
8000dc7a:	f2 0e 01 0e 	sub	lr,r9,lr
8000dc7e:	b0 1e       	st.h	r8[0x2],lr
8000dc80:	fc 09 14 10 	asr	r9,lr,0x10
8000dc84:	40 1e       	lddsp	lr,sp[0x4]
8000dc86:	fc 09 00 09 	add	r9,lr,r9
8000dc8a:	b0 09       	st.h	r8[0x0],r9
8000dc8c:	e0 01 16 10 	lsr	r1,r0,0x10
8000dc90:	2f c8       	sub	r8,-4
8000dc92:	b1 49       	asr	r9,0x10
8000dc94:	04 3a       	cp.w	r10,r2
8000dc96:	fe 98 ff d8 	brls	8000dc46 <quorem+0x42>
8000dc9a:	40 0b       	lddsp	r11,sp[0x0]
8000dc9c:	58 0c       	cp.w	r12,0
8000dc9e:	c0 f1       	brne	8000dcbc <quorem+0xb8>
8000dca0:	ec c8 ff fb 	sub	r8,r6,-5
8000dca4:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000dca8:	c0 28       	rjmp	8000dcac <quorem+0xa8>
8000dcaa:	20 16       	sub	r6,1
8000dcac:	20 48       	sub	r8,4
8000dcae:	08 38       	cp.w	r8,r4
8000dcb0:	e0 88 00 05 	brls	8000dcba <quorem+0xb6>
8000dcb4:	70 09       	ld.w	r9,r8[0x0]
8000dcb6:	58 09       	cp.w	r9,0
8000dcb8:	cf 90       	breq	8000dcaa <quorem+0xa6>
8000dcba:	8f 46       	st.w	r7[0x10],r6
8000dcbc:	0e 9c       	mov	r12,r7
8000dcbe:	e0 a0 0d e0 	rcall	8000f87e <__mcmp>
8000dcc2:	c2 d5       	brlt	8000dd1c <quorem+0x118>
8000dcc4:	2f f5       	sub	r5,-1
8000dcc6:	08 98       	mov	r8,r4
8000dcc8:	30 09       	mov	r9,0
8000dcca:	07 0b       	ld.w	r11,r3++
8000dccc:	f6 0a 16 10 	lsr	r10,r11,0x10
8000dcd0:	70 0c       	ld.w	r12,r8[0x0]
8000dcd2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000dcd6:	f8 0e 16 10 	lsr	lr,r12,0x10
8000dcda:	14 1e       	sub	lr,r10
8000dcdc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000dce0:	16 1a       	sub	r10,r11
8000dce2:	12 0a       	add	r10,r9
8000dce4:	b0 1a       	st.h	r8[0x2],r10
8000dce6:	b1 4a       	asr	r10,0x10
8000dce8:	fc 0a 00 09 	add	r9,lr,r10
8000dcec:	b0 09       	st.h	r8[0x0],r9
8000dcee:	2f c8       	sub	r8,-4
8000dcf0:	b1 49       	asr	r9,0x10
8000dcf2:	04 33       	cp.w	r3,r2
8000dcf4:	fe 98 ff eb 	brls	8000dcca <quorem+0xc6>
8000dcf8:	ec c8 ff fb 	sub	r8,r6,-5
8000dcfc:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000dd00:	58 09       	cp.w	r9,0
8000dd02:	c0 d1       	brne	8000dd1c <quorem+0x118>
8000dd04:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000dd08:	c0 28       	rjmp	8000dd0c <quorem+0x108>
8000dd0a:	20 16       	sub	r6,1
8000dd0c:	20 48       	sub	r8,4
8000dd0e:	08 38       	cp.w	r8,r4
8000dd10:	e0 88 00 05 	brls	8000dd1a <quorem+0x116>
8000dd14:	70 09       	ld.w	r9,r8[0x0]
8000dd16:	58 09       	cp.w	r9,0
8000dd18:	cf 90       	breq	8000dd0a <quorem+0x106>
8000dd1a:	8f 46       	st.w	r7[0x10],r6
8000dd1c:	0a 9c       	mov	r12,r5
8000dd1e:	2f ed       	sub	sp,-8
8000dd20:	d8 32       	popm	r0-r7,pc
8000dd22:	d7 03       	nop

8000dd24 <_dtoa_r>:
8000dd24:	d4 31       	pushm	r0-r7,lr
8000dd26:	21 ad       	sub	sp,104
8000dd28:	fa c4 ff 74 	sub	r4,sp,-140
8000dd2c:	18 97       	mov	r7,r12
8000dd2e:	16 95       	mov	r5,r11
8000dd30:	68 2c       	ld.w	r12,r4[0x8]
8000dd32:	50 c9       	stdsp	sp[0x30],r9
8000dd34:	68 16       	ld.w	r6,r4[0x4]
8000dd36:	68 09       	ld.w	r9,r4[0x0]
8000dd38:	50 e8       	stdsp	sp[0x38],r8
8000dd3a:	14 94       	mov	r4,r10
8000dd3c:	51 2c       	stdsp	sp[0x48],r12
8000dd3e:	fa e5 00 08 	st.d	sp[8],r4
8000dd42:	51 59       	stdsp	sp[0x54],r9
8000dd44:	6e 95       	ld.w	r5,r7[0x24]
8000dd46:	58 05       	cp.w	r5,0
8000dd48:	c0 91       	brne	8000dd5a <_dtoa_r+0x36>
8000dd4a:	31 0c       	mov	r12,16
8000dd4c:	e0 a0 0a a4 	rcall	8000f294 <malloc>
8000dd50:	99 35       	st.w	r12[0xc],r5
8000dd52:	8f 9c       	st.w	r7[0x24],r12
8000dd54:	99 15       	st.w	r12[0x4],r5
8000dd56:	99 25       	st.w	r12[0x8],r5
8000dd58:	99 05       	st.w	r12[0x0],r5
8000dd5a:	6e 99       	ld.w	r9,r7[0x24]
8000dd5c:	72 08       	ld.w	r8,r9[0x0]
8000dd5e:	58 08       	cp.w	r8,0
8000dd60:	c0 f0       	breq	8000dd7e <_dtoa_r+0x5a>
8000dd62:	72 1a       	ld.w	r10,r9[0x4]
8000dd64:	91 1a       	st.w	r8[0x4],r10
8000dd66:	30 1a       	mov	r10,1
8000dd68:	72 19       	ld.w	r9,r9[0x4]
8000dd6a:	f4 09 09 49 	lsl	r9,r10,r9
8000dd6e:	10 9b       	mov	r11,r8
8000dd70:	91 29       	st.w	r8[0x8],r9
8000dd72:	0e 9c       	mov	r12,r7
8000dd74:	e0 a0 0e 74 	rcall	8000fa5c <_Bfree>
8000dd78:	6e 98       	ld.w	r8,r7[0x24]
8000dd7a:	30 09       	mov	r9,0
8000dd7c:	91 09       	st.w	r8[0x0],r9
8000dd7e:	40 28       	lddsp	r8,sp[0x8]
8000dd80:	10 94       	mov	r4,r8
8000dd82:	58 08       	cp.w	r8,0
8000dd84:	c0 64       	brge	8000dd90 <_dtoa_r+0x6c>
8000dd86:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000dd8a:	50 28       	stdsp	sp[0x8],r8
8000dd8c:	30 18       	mov	r8,1
8000dd8e:	c0 28       	rjmp	8000dd92 <_dtoa_r+0x6e>
8000dd90:	30 08       	mov	r8,0
8000dd92:	8d 08       	st.w	r6[0x0],r8
8000dd94:	fc 1c 7f f0 	movh	r12,0x7ff0
8000dd98:	40 26       	lddsp	r6,sp[0x8]
8000dd9a:	0c 98       	mov	r8,r6
8000dd9c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000dda0:	18 38       	cp.w	r8,r12
8000dda2:	c1 c1       	brne	8000ddda <_dtoa_r+0xb6>
8000dda4:	e0 68 27 0f 	mov	r8,9999
8000dda8:	41 5b       	lddsp	r11,sp[0x54]
8000ddaa:	97 08       	st.w	r11[0x0],r8
8000ddac:	40 3a       	lddsp	r10,sp[0xc]
8000ddae:	58 0a       	cp.w	r10,0
8000ddb0:	c0 61       	brne	8000ddbc <_dtoa_r+0x98>
8000ddb2:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000ddb6:	c0 31       	brne	8000ddbc <_dtoa_r+0x98>
8000ddb8:	4a cc       	lddpc	r12,8000de68 <_dtoa_r+0x144>
8000ddba:	c0 28       	rjmp	8000ddbe <_dtoa_r+0x9a>
8000ddbc:	4a cc       	lddpc	r12,8000de6c <_dtoa_r+0x148>
8000ddbe:	41 29       	lddsp	r9,sp[0x48]
8000ddc0:	58 09       	cp.w	r9,0
8000ddc2:	e0 80 05 9e 	breq	8000e8fe <_dtoa_r+0xbda>
8000ddc6:	f8 c8 ff fd 	sub	r8,r12,-3
8000ddca:	30 09       	mov	r9,0
8000ddcc:	11 8a       	ld.ub	r10,r8[0x0]
8000ddce:	f2 0a 18 00 	cp.b	r10,r9
8000ddd2:	c1 90       	breq	8000de04 <_dtoa_r+0xe0>
8000ddd4:	f8 c8 ff f8 	sub	r8,r12,-8
8000ddd8:	c1 68       	rjmp	8000de04 <_dtoa_r+0xe0>
8000ddda:	fa ea 00 08 	ld.d	r10,sp[8]
8000ddde:	30 08       	mov	r8,0
8000dde0:	fa eb 00 3c 	st.d	sp[60],r10
8000dde4:	30 09       	mov	r9,0
8000dde6:	e0 a0 24 84 	rcall	800126ee <__avr32_f64_cmp_eq>
8000ddea:	c1 10       	breq	8000de0c <_dtoa_r+0xe8>
8000ddec:	30 18       	mov	r8,1
8000ddee:	41 5a       	lddsp	r10,sp[0x54]
8000ddf0:	95 08       	st.w	r10[0x0],r8
8000ddf2:	41 29       	lddsp	r9,sp[0x48]
8000ddf4:	49 f8       	lddpc	r8,8000de70 <_dtoa_r+0x14c>
8000ddf6:	58 09       	cp.w	r9,0
8000ddf8:	c0 41       	brne	8000de00 <_dtoa_r+0xdc>
8000ddfa:	10 9c       	mov	r12,r8
8000ddfc:	e0 8f 05 81 	bral	8000e8fe <_dtoa_r+0xbda>
8000de00:	10 9c       	mov	r12,r8
8000de02:	2f f8       	sub	r8,-1
8000de04:	41 25       	lddsp	r5,sp[0x48]
8000de06:	8b 08       	st.w	r5[0x0],r8
8000de08:	e0 8f 05 7b 	bral	8000e8fe <_dtoa_r+0xbda>
8000de0c:	fa c8 ff 9c 	sub	r8,sp,-100
8000de10:	fa c9 ff a0 	sub	r9,sp,-96
8000de14:	fa ea 00 3c 	ld.d	r10,sp[60]
8000de18:	0e 9c       	mov	r12,r7
8000de1a:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000de1e:	e0 a0 0e 71 	rcall	8000fb00 <__d2b>
8000de22:	18 93       	mov	r3,r12
8000de24:	58 05       	cp.w	r5,0
8000de26:	c0 d0       	breq	8000de40 <_dtoa_r+0x11c>
8000de28:	fa ea 00 3c 	ld.d	r10,sp[60]
8000de2c:	30 04       	mov	r4,0
8000de2e:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000de32:	ea c5 03 ff 	sub	r5,r5,1023
8000de36:	10 9b       	mov	r11,r8
8000de38:	51 74       	stdsp	sp[0x5c],r4
8000de3a:	ea 1b 3f f0 	orh	r11,0x3ff0
8000de3e:	c2 a8       	rjmp	8000de92 <_dtoa_r+0x16e>
8000de40:	41 88       	lddsp	r8,sp[0x60]
8000de42:	41 9c       	lddsp	r12,sp[0x64]
8000de44:	10 0c       	add	r12,r8
8000de46:	f8 c5 fb ce 	sub	r5,r12,-1074
8000de4a:	e0 45 00 20 	cp.w	r5,32
8000de4e:	e0 8a 00 13 	brle	8000de74 <_dtoa_r+0x150>
8000de52:	f8 cc fb ee 	sub	r12,r12,-1042
8000de56:	40 3b       	lddsp	r11,sp[0xc]
8000de58:	ea 08 11 40 	rsub	r8,r5,64
8000de5c:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000de60:	ec 08 09 46 	lsl	r6,r6,r8
8000de64:	0c 4c       	or	r12,r6
8000de66:	c0 c8       	rjmp	8000de7e <_dtoa_r+0x15a>
8000de68:	80 01       	ld.sh	r1,r0[0x0]
8000de6a:	42 70       	lddsp	r0,sp[0x9c]
8000de6c:	80 01       	ld.sh	r1,r0[0x0]
8000de6e:	42 7c       	lddsp	r12,sp[0x9c]
8000de70:	80 01       	ld.sh	r1,r0[0x0]
8000de72:	41 20       	lddsp	r0,sp[0x48]
8000de74:	ea 0c 11 20 	rsub	r12,r5,32
8000de78:	40 3a       	lddsp	r10,sp[0xc]
8000de7a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000de7e:	e0 a0 23 c4 	rcall	80012606 <__avr32_u32_to_f64>
8000de82:	fc 18 fe 10 	movh	r8,0xfe10
8000de86:	30 19       	mov	r9,1
8000de88:	ea c5 04 33 	sub	r5,r5,1075
8000de8c:	f0 0b 00 0b 	add	r11,r8,r11
8000de90:	51 79       	stdsp	sp[0x5c],r9
8000de92:	30 08       	mov	r8,0
8000de94:	fc 19 3f f8 	movh	r9,0x3ff8
8000de98:	e0 a0 22 50 	rcall	80012338 <__avr32_f64_sub>
8000de9c:	e0 68 43 61 	mov	r8,17249
8000dea0:	ea 18 63 6f 	orh	r8,0x636f
8000dea4:	e0 69 87 a7 	mov	r9,34727
8000dea8:	ea 19 3f d2 	orh	r9,0x3fd2
8000deac:	e0 a0 21 5a 	rcall	80012160 <__avr32_f64_mul>
8000deb0:	e0 68 c8 b3 	mov	r8,51379
8000deb4:	ea 18 8b 60 	orh	r8,0x8b60
8000deb8:	e0 69 8a 28 	mov	r9,35368
8000debc:	ea 19 3f c6 	orh	r9,0x3fc6
8000dec0:	e0 a0 23 0a 	rcall	800124d4 <__avr32_f64_add>
8000dec4:	0a 9c       	mov	r12,r5
8000dec6:	14 90       	mov	r0,r10
8000dec8:	16 91       	mov	r1,r11
8000deca:	e0 a0 23 a2 	rcall	8001260e <__avr32_s32_to_f64>
8000dece:	e0 68 79 fb 	mov	r8,31227
8000ded2:	ea 18 50 9f 	orh	r8,0x509f
8000ded6:	e0 69 44 13 	mov	r9,17427
8000deda:	ea 19 3f d3 	orh	r9,0x3fd3
8000dede:	e0 a0 21 41 	rcall	80012160 <__avr32_f64_mul>
8000dee2:	14 98       	mov	r8,r10
8000dee4:	16 99       	mov	r9,r11
8000dee6:	00 9a       	mov	r10,r0
8000dee8:	02 9b       	mov	r11,r1
8000deea:	e0 a0 22 f5 	rcall	800124d4 <__avr32_f64_add>
8000deee:	14 90       	mov	r0,r10
8000def0:	16 91       	mov	r1,r11
8000def2:	e0 a0 23 77 	rcall	800125e0 <__avr32_f64_to_s32>
8000def6:	30 08       	mov	r8,0
8000def8:	18 96       	mov	r6,r12
8000defa:	30 09       	mov	r9,0
8000defc:	00 9a       	mov	r10,r0
8000defe:	02 9b       	mov	r11,r1
8000df00:	e0 a0 24 3e 	rcall	8001277c <__avr32_f64_cmp_lt>
8000df04:	c0 c0       	breq	8000df1c <_dtoa_r+0x1f8>
8000df06:	0c 9c       	mov	r12,r6
8000df08:	e0 a0 23 83 	rcall	8001260e <__avr32_s32_to_f64>
8000df0c:	14 98       	mov	r8,r10
8000df0e:	16 99       	mov	r9,r11
8000df10:	00 9a       	mov	r10,r0
8000df12:	02 9b       	mov	r11,r1
8000df14:	e0 a0 23 ed 	rcall	800126ee <__avr32_f64_cmp_eq>
8000df18:	f7 b6 00 01 	subeq	r6,1
8000df1c:	59 66       	cp.w	r6,22
8000df1e:	e0 88 00 05 	brls	8000df28 <_dtoa_r+0x204>
8000df22:	30 18       	mov	r8,1
8000df24:	51 48       	stdsp	sp[0x50],r8
8000df26:	c1 28       	rjmp	8000df4a <_dtoa_r+0x226>
8000df28:	4c 08       	lddpc	r8,8000e028 <_dtoa_r+0x304>
8000df2a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000df2e:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000df32:	e0 a0 24 25 	rcall	8001277c <__avr32_f64_cmp_lt>
8000df36:	f9 b4 00 00 	moveq	r4,0
8000df3a:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000df3e:	f7 b6 01 01 	subne	r6,1
8000df42:	f9 bc 01 00 	movne	r12,0
8000df46:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000df4a:	41 90       	lddsp	r0,sp[0x64]
8000df4c:	20 10       	sub	r0,1
8000df4e:	0a 10       	sub	r0,r5
8000df50:	c0 46       	brmi	8000df58 <_dtoa_r+0x234>
8000df52:	50 40       	stdsp	sp[0x10],r0
8000df54:	30 00       	mov	r0,0
8000df56:	c0 48       	rjmp	8000df5e <_dtoa_r+0x23a>
8000df58:	30 0b       	mov	r11,0
8000df5a:	5c 30       	neg	r0
8000df5c:	50 4b       	stdsp	sp[0x10],r11
8000df5e:	ec 02 11 00 	rsub	r2,r6,0
8000df62:	58 06       	cp.w	r6,0
8000df64:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000df68:	f5 d6 e4 0a 	addge	r10,r10,r6
8000df6c:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000df70:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000df74:	f9 b2 04 00 	movge	r2,0
8000df78:	e1 d6 e5 10 	sublt	r0,r0,r6
8000df7c:	f9 b9 05 00 	movlt	r9,0
8000df80:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000df84:	40 c8       	lddsp	r8,sp[0x30]
8000df86:	58 98       	cp.w	r8,9
8000df88:	e0 8b 00 20 	brhi	8000dfc8 <_dtoa_r+0x2a4>
8000df8c:	58 58       	cp.w	r8,5
8000df8e:	f9 b4 0a 01 	movle	r4,1
8000df92:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000df96:	f7 b5 09 04 	subgt	r5,4
8000df9a:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000df9e:	f9 b4 09 00 	movgt	r4,0
8000dfa2:	40 cc       	lddsp	r12,sp[0x30]
8000dfa4:	58 3c       	cp.w	r12,3
8000dfa6:	c2 d0       	breq	8000e000 <_dtoa_r+0x2dc>
8000dfa8:	e0 89 00 05 	brgt	8000dfb2 <_dtoa_r+0x28e>
8000dfac:	58 2c       	cp.w	r12,2
8000dfae:	c1 01       	brne	8000dfce <_dtoa_r+0x2aa>
8000dfb0:	c1 88       	rjmp	8000dfe0 <_dtoa_r+0x2bc>
8000dfb2:	40 cb       	lddsp	r11,sp[0x30]
8000dfb4:	58 4b       	cp.w	r11,4
8000dfb6:	c0 60       	breq	8000dfc2 <_dtoa_r+0x29e>
8000dfb8:	58 5b       	cp.w	r11,5
8000dfba:	c0 a1       	brne	8000dfce <_dtoa_r+0x2aa>
8000dfbc:	30 1a       	mov	r10,1
8000dfbe:	50 da       	stdsp	sp[0x34],r10
8000dfc0:	c2 28       	rjmp	8000e004 <_dtoa_r+0x2e0>
8000dfc2:	30 19       	mov	r9,1
8000dfc4:	50 d9       	stdsp	sp[0x34],r9
8000dfc6:	c0 f8       	rjmp	8000dfe4 <_dtoa_r+0x2c0>
8000dfc8:	30 08       	mov	r8,0
8000dfca:	30 14       	mov	r4,1
8000dfcc:	50 c8       	stdsp	sp[0x30],r8
8000dfce:	3f f5       	mov	r5,-1
8000dfd0:	30 1c       	mov	r12,1
8000dfd2:	30 0b       	mov	r11,0
8000dfd4:	50 95       	stdsp	sp[0x24],r5
8000dfd6:	50 dc       	stdsp	sp[0x34],r12
8000dfd8:	0a 91       	mov	r1,r5
8000dfda:	31 28       	mov	r8,18
8000dfdc:	50 eb       	stdsp	sp[0x38],r11
8000dfde:	c2 08       	rjmp	8000e01e <_dtoa_r+0x2fa>
8000dfe0:	30 0a       	mov	r10,0
8000dfe2:	50 da       	stdsp	sp[0x34],r10
8000dfe4:	40 e9       	lddsp	r9,sp[0x38]
8000dfe6:	58 09       	cp.w	r9,0
8000dfe8:	e0 89 00 07 	brgt	8000dff6 <_dtoa_r+0x2d2>
8000dfec:	30 18       	mov	r8,1
8000dfee:	50 98       	stdsp	sp[0x24],r8
8000dff0:	10 91       	mov	r1,r8
8000dff2:	50 e8       	stdsp	sp[0x38],r8
8000dff4:	c1 58       	rjmp	8000e01e <_dtoa_r+0x2fa>
8000dff6:	40 e5       	lddsp	r5,sp[0x38]
8000dff8:	50 95       	stdsp	sp[0x24],r5
8000dffa:	0a 91       	mov	r1,r5
8000dffc:	0a 98       	mov	r8,r5
8000dffe:	c1 08       	rjmp	8000e01e <_dtoa_r+0x2fa>
8000e000:	30 0c       	mov	r12,0
8000e002:	50 dc       	stdsp	sp[0x34],r12
8000e004:	40 eb       	lddsp	r11,sp[0x38]
8000e006:	ec 0b 00 0b 	add	r11,r6,r11
8000e00a:	50 9b       	stdsp	sp[0x24],r11
8000e00c:	16 98       	mov	r8,r11
8000e00e:	2f f8       	sub	r8,-1
8000e010:	58 08       	cp.w	r8,0
8000e012:	e0 89 00 05 	brgt	8000e01c <_dtoa_r+0x2f8>
8000e016:	10 91       	mov	r1,r8
8000e018:	30 18       	mov	r8,1
8000e01a:	c0 28       	rjmp	8000e01e <_dtoa_r+0x2fa>
8000e01c:	10 91       	mov	r1,r8
8000e01e:	30 09       	mov	r9,0
8000e020:	6e 9a       	ld.w	r10,r7[0x24]
8000e022:	95 19       	st.w	r10[0x4],r9
8000e024:	30 49       	mov	r9,4
8000e026:	c0 78       	rjmp	8000e034 <_dtoa_r+0x310>
8000e028:	80 01       	ld.sh	r1,r0[0x0]
8000e02a:	43 28       	lddsp	r8,sp[0xc8]
8000e02c:	6a 1a       	ld.w	r10,r5[0x4]
8000e02e:	a1 79       	lsl	r9,0x1
8000e030:	2f fa       	sub	r10,-1
8000e032:	8b 1a       	st.w	r5[0x4],r10
8000e034:	6e 95       	ld.w	r5,r7[0x24]
8000e036:	f2 ca ff ec 	sub	r10,r9,-20
8000e03a:	10 3a       	cp.w	r10,r8
8000e03c:	fe 98 ff f8 	brls	8000e02c <_dtoa_r+0x308>
8000e040:	6a 1b       	ld.w	r11,r5[0x4]
8000e042:	0e 9c       	mov	r12,r7
8000e044:	e0 a0 0d 26 	rcall	8000fa90 <_Balloc>
8000e048:	58 e1       	cp.w	r1,14
8000e04a:	5f 88       	srls	r8
8000e04c:	8b 0c       	st.w	r5[0x0],r12
8000e04e:	f1 e4 00 04 	and	r4,r8,r4
8000e052:	6e 98       	ld.w	r8,r7[0x24]
8000e054:	70 08       	ld.w	r8,r8[0x0]
8000e056:	50 88       	stdsp	sp[0x20],r8
8000e058:	e0 80 01 82 	breq	8000e35c <_dtoa_r+0x638>
8000e05c:	58 06       	cp.w	r6,0
8000e05e:	e0 8a 00 40 	brle	8000e0de <_dtoa_r+0x3ba>
8000e062:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000e066:	4c b8       	lddpc	r8,8000e190 <_dtoa_r+0x46c>
8000e068:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000e06c:	fa e5 00 18 	st.d	sp[24],r4
8000e070:	ec 04 14 04 	asr	r4,r6,0x4
8000e074:	ed b4 00 04 	bld	r4,0x4
8000e078:	c0 30       	breq	8000e07e <_dtoa_r+0x35a>
8000e07a:	30 25       	mov	r5,2
8000e07c:	c0 f8       	rjmp	8000e09a <_dtoa_r+0x376>
8000e07e:	4c 68       	lddpc	r8,8000e194 <_dtoa_r+0x470>
8000e080:	f0 e8 00 20 	ld.d	r8,r8[32]
8000e084:	fa ea 00 3c 	ld.d	r10,sp[60]
8000e088:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000e08c:	e0 a0 23 ac 	rcall	800127e4 <__avr32_f64_div>
8000e090:	30 35       	mov	r5,3
8000e092:	14 98       	mov	r8,r10
8000e094:	16 99       	mov	r9,r11
8000e096:	fa e9 00 08 	st.d	sp[8],r8
8000e09a:	4b fc       	lddpc	r12,8000e194 <_dtoa_r+0x470>
8000e09c:	50 a3       	stdsp	sp[0x28],r3
8000e09e:	0c 93       	mov	r3,r6
8000e0a0:	18 96       	mov	r6,r12
8000e0a2:	c0 f8       	rjmp	8000e0c0 <_dtoa_r+0x39c>
8000e0a4:	fa ea 00 18 	ld.d	r10,sp[24]
8000e0a8:	ed b4 00 00 	bld	r4,0x0
8000e0ac:	c0 81       	brne	8000e0bc <_dtoa_r+0x398>
8000e0ae:	ec e8 00 00 	ld.d	r8,r6[0]
8000e0b2:	2f f5       	sub	r5,-1
8000e0b4:	e0 a0 20 56 	rcall	80012160 <__avr32_f64_mul>
8000e0b8:	fa eb 00 18 	st.d	sp[24],r10
8000e0bc:	a1 54       	asr	r4,0x1
8000e0be:	2f 86       	sub	r6,-8
8000e0c0:	58 04       	cp.w	r4,0
8000e0c2:	cf 11       	brne	8000e0a4 <_dtoa_r+0x380>
8000e0c4:	fa e8 00 18 	ld.d	r8,sp[24]
8000e0c8:	fa ea 00 08 	ld.d	r10,sp[8]
8000e0cc:	06 96       	mov	r6,r3
8000e0ce:	e0 a0 23 8b 	rcall	800127e4 <__avr32_f64_div>
8000e0d2:	40 a3       	lddsp	r3,sp[0x28]
8000e0d4:	14 98       	mov	r8,r10
8000e0d6:	16 99       	mov	r9,r11
8000e0d8:	fa e9 00 08 	st.d	sp[8],r8
8000e0dc:	c2 d8       	rjmp	8000e136 <_dtoa_r+0x412>
8000e0de:	ec 08 11 00 	rsub	r8,r6,0
8000e0e2:	c0 31       	brne	8000e0e8 <_dtoa_r+0x3c4>
8000e0e4:	30 25       	mov	r5,2
8000e0e6:	c2 88       	rjmp	8000e136 <_dtoa_r+0x412>
8000e0e8:	4a bc       	lddpc	r12,8000e194 <_dtoa_r+0x470>
8000e0ea:	f0 04 14 04 	asr	r4,r8,0x4
8000e0ee:	50 1c       	stdsp	sp[0x4],r12
8000e0f0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000e0f4:	4a 79       	lddpc	r9,8000e190 <_dtoa_r+0x46c>
8000e0f6:	fa ea 00 3c 	ld.d	r10,sp[60]
8000e0fa:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000e0fe:	e0 a0 20 31 	rcall	80012160 <__avr32_f64_mul>
8000e102:	40 1c       	lddsp	r12,sp[0x4]
8000e104:	50 63       	stdsp	sp[0x18],r3
8000e106:	30 25       	mov	r5,2
8000e108:	0c 93       	mov	r3,r6
8000e10a:	fa eb 00 08 	st.d	sp[8],r10
8000e10e:	18 96       	mov	r6,r12
8000e110:	c0 f8       	rjmp	8000e12e <_dtoa_r+0x40a>
8000e112:	fa ea 00 08 	ld.d	r10,sp[8]
8000e116:	ed b4 00 00 	bld	r4,0x0
8000e11a:	c0 81       	brne	8000e12a <_dtoa_r+0x406>
8000e11c:	ec e8 00 00 	ld.d	r8,r6[0]
8000e120:	2f f5       	sub	r5,-1
8000e122:	e0 a0 20 1f 	rcall	80012160 <__avr32_f64_mul>
8000e126:	fa eb 00 08 	st.d	sp[8],r10
8000e12a:	a1 54       	asr	r4,0x1
8000e12c:	2f 86       	sub	r6,-8
8000e12e:	58 04       	cp.w	r4,0
8000e130:	cf 11       	brne	8000e112 <_dtoa_r+0x3ee>
8000e132:	06 96       	mov	r6,r3
8000e134:	40 63       	lddsp	r3,sp[0x18]
8000e136:	41 4a       	lddsp	r10,sp[0x50]
8000e138:	58 0a       	cp.w	r10,0
8000e13a:	c2 f0       	breq	8000e198 <_dtoa_r+0x474>
8000e13c:	fa e8 00 08 	ld.d	r8,sp[8]
8000e140:	58 01       	cp.w	r1,0
8000e142:	5f 94       	srgt	r4
8000e144:	fa e9 00 18 	st.d	sp[24],r8
8000e148:	30 08       	mov	r8,0
8000e14a:	fc 19 3f f0 	movh	r9,0x3ff0
8000e14e:	fa ea 00 18 	ld.d	r10,sp[24]
8000e152:	e0 a0 23 15 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e156:	f9 bc 00 00 	moveq	r12,0
8000e15a:	f9 bc 01 01 	movne	r12,1
8000e15e:	e9 ec 00 0c 	and	r12,r4,r12
8000e162:	c1 b0       	breq	8000e198 <_dtoa_r+0x474>
8000e164:	40 98       	lddsp	r8,sp[0x24]
8000e166:	58 08       	cp.w	r8,0
8000e168:	e0 8a 00 f6 	brle	8000e354 <_dtoa_r+0x630>
8000e16c:	30 08       	mov	r8,0
8000e16e:	fc 19 40 24 	movh	r9,0x4024
8000e172:	ec c4 00 01 	sub	r4,r6,1
8000e176:	fa ea 00 18 	ld.d	r10,sp[24]
8000e17a:	2f f5       	sub	r5,-1
8000e17c:	50 64       	stdsp	sp[0x18],r4
8000e17e:	e0 a0 1f f1 	rcall	80012160 <__avr32_f64_mul>
8000e182:	40 94       	lddsp	r4,sp[0x24]
8000e184:	14 98       	mov	r8,r10
8000e186:	16 99       	mov	r9,r11
8000e188:	fa e9 00 08 	st.d	sp[8],r8
8000e18c:	c0 88       	rjmp	8000e19c <_dtoa_r+0x478>
8000e18e:	d7 03       	nop
8000e190:	80 01       	ld.sh	r1,r0[0x0]
8000e192:	43 28       	lddsp	r8,sp[0xc8]
8000e194:	80 01       	ld.sh	r1,r0[0x0]
8000e196:	43 f0       	lddsp	r0,sp[0xfc]
8000e198:	50 66       	stdsp	sp[0x18],r6
8000e19a:	02 94       	mov	r4,r1
8000e19c:	0a 9c       	mov	r12,r5
8000e19e:	e0 a0 22 38 	rcall	8001260e <__avr32_s32_to_f64>
8000e1a2:	fa e8 00 08 	ld.d	r8,sp[8]
8000e1a6:	e0 a0 1f dd 	rcall	80012160 <__avr32_f64_mul>
8000e1aa:	30 08       	mov	r8,0
8000e1ac:	fc 19 40 1c 	movh	r9,0x401c
8000e1b0:	e0 a0 21 92 	rcall	800124d4 <__avr32_f64_add>
8000e1b4:	14 98       	mov	r8,r10
8000e1b6:	16 99       	mov	r9,r11
8000e1b8:	fa e9 00 28 	st.d	sp[40],r8
8000e1bc:	fc 18 fc c0 	movh	r8,0xfcc0
8000e1c0:	40 a5       	lddsp	r5,sp[0x28]
8000e1c2:	10 05       	add	r5,r8
8000e1c4:	50 a5       	stdsp	sp[0x28],r5
8000e1c6:	58 04       	cp.w	r4,0
8000e1c8:	c2 11       	brne	8000e20a <_dtoa_r+0x4e6>
8000e1ca:	fa ea 00 08 	ld.d	r10,sp[8]
8000e1ce:	30 08       	mov	r8,0
8000e1d0:	fc 19 40 14 	movh	r9,0x4014
8000e1d4:	e0 a0 20 b2 	rcall	80012338 <__avr32_f64_sub>
8000e1d8:	40 bc       	lddsp	r12,sp[0x2c]
8000e1da:	fa eb 00 08 	st.d	sp[8],r10
8000e1de:	14 98       	mov	r8,r10
8000e1e0:	16 99       	mov	r9,r11
8000e1e2:	18 9a       	mov	r10,r12
8000e1e4:	0a 9b       	mov	r11,r5
8000e1e6:	e0 a0 22 cb 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e1ea:	e0 81 02 54 	brne	8000e692 <_dtoa_r+0x96e>
8000e1ee:	0a 98       	mov	r8,r5
8000e1f0:	40 b9       	lddsp	r9,sp[0x2c]
8000e1f2:	ee 18 80 00 	eorh	r8,0x8000
8000e1f6:	fa ea 00 08 	ld.d	r10,sp[8]
8000e1fa:	10 95       	mov	r5,r8
8000e1fc:	12 98       	mov	r8,r9
8000e1fe:	0a 99       	mov	r9,r5
8000e200:	e0 a0 22 be 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e204:	e0 81 02 3e 	brne	8000e680 <_dtoa_r+0x95c>
8000e208:	ca 68       	rjmp	8000e354 <_dtoa_r+0x630>
8000e20a:	4c e9       	lddpc	r9,8000e340 <_dtoa_r+0x61c>
8000e20c:	e8 c8 00 01 	sub	r8,r4,1
8000e210:	40 d5       	lddsp	r5,sp[0x34]
8000e212:	58 05       	cp.w	r5,0
8000e214:	c4 f0       	breq	8000e2b2 <_dtoa_r+0x58e>
8000e216:	30 0c       	mov	r12,0
8000e218:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000e21c:	51 3c       	stdsp	sp[0x4c],r12
8000e21e:	30 0a       	mov	r10,0
8000e220:	fc 1b 3f e0 	movh	r11,0x3fe0
8000e224:	e0 a0 22 e0 	rcall	800127e4 <__avr32_f64_div>
8000e228:	fa e8 00 28 	ld.d	r8,sp[40]
8000e22c:	40 85       	lddsp	r5,sp[0x20]
8000e22e:	e0 a0 20 85 	rcall	80012338 <__avr32_f64_sub>
8000e232:	fa eb 00 28 	st.d	sp[40],r10
8000e236:	fa ea 00 08 	ld.d	r10,sp[8]
8000e23a:	e0 a0 21 d3 	rcall	800125e0 <__avr32_f64_to_s32>
8000e23e:	51 6c       	stdsp	sp[0x58],r12
8000e240:	e0 a0 21 e7 	rcall	8001260e <__avr32_s32_to_f64>
8000e244:	14 98       	mov	r8,r10
8000e246:	16 99       	mov	r9,r11
8000e248:	fa ea 00 08 	ld.d	r10,sp[8]
8000e24c:	e0 a0 20 76 	rcall	80012338 <__avr32_f64_sub>
8000e250:	fa eb 00 08 	st.d	sp[8],r10
8000e254:	41 68       	lddsp	r8,sp[0x58]
8000e256:	2d 08       	sub	r8,-48
8000e258:	0a c8       	st.b	r5++,r8
8000e25a:	41 39       	lddsp	r9,sp[0x4c]
8000e25c:	2f f9       	sub	r9,-1
8000e25e:	51 39       	stdsp	sp[0x4c],r9
8000e260:	fa e8 00 28 	ld.d	r8,sp[40]
8000e264:	e0 a0 22 8c 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e268:	e0 81 03 3a 	brne	8000e8dc <_dtoa_r+0xbb8>
8000e26c:	fa e8 00 08 	ld.d	r8,sp[8]
8000e270:	30 0a       	mov	r10,0
8000e272:	fc 1b 3f f0 	movh	r11,0x3ff0
8000e276:	e0 a0 20 61 	rcall	80012338 <__avr32_f64_sub>
8000e27a:	fa e8 00 28 	ld.d	r8,sp[40]
8000e27e:	e0 a0 22 7f 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e282:	fa ea 00 28 	ld.d	r10,sp[40]
8000e286:	30 08       	mov	r8,0
8000e288:	fc 19 40 24 	movh	r9,0x4024
8000e28c:	e0 81 00 da 	brne	8000e440 <_dtoa_r+0x71c>
8000e290:	41 3c       	lddsp	r12,sp[0x4c]
8000e292:	08 3c       	cp.w	r12,r4
8000e294:	c6 04       	brge	8000e354 <_dtoa_r+0x630>
8000e296:	e0 a0 1f 65 	rcall	80012160 <__avr32_f64_mul>
8000e29a:	30 08       	mov	r8,0
8000e29c:	fa eb 00 28 	st.d	sp[40],r10
8000e2a0:	fc 19 40 24 	movh	r9,0x4024
8000e2a4:	fa ea 00 08 	ld.d	r10,sp[8]
8000e2a8:	e0 a0 1f 5c 	rcall	80012160 <__avr32_f64_mul>
8000e2ac:	fa eb 00 08 	st.d	sp[8],r10
8000e2b0:	cc 3b       	rjmp	8000e236 <_dtoa_r+0x512>
8000e2b2:	40 85       	lddsp	r5,sp[0x20]
8000e2b4:	08 05       	add	r5,r4
8000e2b6:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000e2ba:	51 35       	stdsp	sp[0x4c],r5
8000e2bc:	fa e8 00 28 	ld.d	r8,sp[40]
8000e2c0:	40 85       	lddsp	r5,sp[0x20]
8000e2c2:	e0 a0 1f 4f 	rcall	80012160 <__avr32_f64_mul>
8000e2c6:	fa eb 00 28 	st.d	sp[40],r10
8000e2ca:	fa ea 00 08 	ld.d	r10,sp[8]
8000e2ce:	e0 a0 21 89 	rcall	800125e0 <__avr32_f64_to_s32>
8000e2d2:	51 6c       	stdsp	sp[0x58],r12
8000e2d4:	e0 a0 21 9d 	rcall	8001260e <__avr32_s32_to_f64>
8000e2d8:	14 98       	mov	r8,r10
8000e2da:	16 99       	mov	r9,r11
8000e2dc:	fa ea 00 08 	ld.d	r10,sp[8]
8000e2e0:	e0 a0 20 2c 	rcall	80012338 <__avr32_f64_sub>
8000e2e4:	fa eb 00 08 	st.d	sp[8],r10
8000e2e8:	41 68       	lddsp	r8,sp[0x58]
8000e2ea:	2d 08       	sub	r8,-48
8000e2ec:	0a c8       	st.b	r5++,r8
8000e2ee:	41 3c       	lddsp	r12,sp[0x4c]
8000e2f0:	18 35       	cp.w	r5,r12
8000e2f2:	c2 91       	brne	8000e344 <_dtoa_r+0x620>
8000e2f4:	30 08       	mov	r8,0
8000e2f6:	fc 19 3f e0 	movh	r9,0x3fe0
8000e2fa:	fa ea 00 28 	ld.d	r10,sp[40]
8000e2fe:	e0 a0 20 eb 	rcall	800124d4 <__avr32_f64_add>
8000e302:	40 85       	lddsp	r5,sp[0x20]
8000e304:	fa e8 00 08 	ld.d	r8,sp[8]
8000e308:	08 05       	add	r5,r4
8000e30a:	e0 a0 22 39 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e30e:	e0 81 00 99 	brne	8000e440 <_dtoa_r+0x71c>
8000e312:	fa e8 00 28 	ld.d	r8,sp[40]
8000e316:	30 0a       	mov	r10,0
8000e318:	fc 1b 3f e0 	movh	r11,0x3fe0
8000e31c:	e0 a0 20 0e 	rcall	80012338 <__avr32_f64_sub>
8000e320:	14 98       	mov	r8,r10
8000e322:	16 99       	mov	r9,r11
8000e324:	fa ea 00 08 	ld.d	r10,sp[8]
8000e328:	e0 a0 22 2a 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e32c:	c1 40       	breq	8000e354 <_dtoa_r+0x630>
8000e32e:	33 09       	mov	r9,48
8000e330:	0a 98       	mov	r8,r5
8000e332:	11 7a       	ld.ub	r10,--r8
8000e334:	f2 0a 18 00 	cp.b	r10,r9
8000e338:	e0 81 02 d2 	brne	8000e8dc <_dtoa_r+0xbb8>
8000e33c:	10 95       	mov	r5,r8
8000e33e:	cf 9b       	rjmp	8000e330 <_dtoa_r+0x60c>
8000e340:	80 01       	ld.sh	r1,r0[0x0]
8000e342:	43 28       	lddsp	r8,sp[0xc8]
8000e344:	30 08       	mov	r8,0
8000e346:	fc 19 40 24 	movh	r9,0x4024
8000e34a:	e0 a0 1f 0b 	rcall	80012160 <__avr32_f64_mul>
8000e34e:	fa eb 00 08 	st.d	sp[8],r10
8000e352:	cb cb       	rjmp	8000e2ca <_dtoa_r+0x5a6>
8000e354:	fa ea 00 3c 	ld.d	r10,sp[60]
8000e358:	fa eb 00 08 	st.d	sp[8],r10
8000e35c:	58 e6       	cp.w	r6,14
8000e35e:	5f ab       	srle	r11
8000e360:	41 8a       	lddsp	r10,sp[0x60]
8000e362:	30 08       	mov	r8,0
8000e364:	f4 09 11 ff 	rsub	r9,r10,-1
8000e368:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000e36c:	f0 09 18 00 	cp.b	r9,r8
8000e370:	e0 80 00 81 	breq	8000e472 <_dtoa_r+0x74e>
8000e374:	40 ea       	lddsp	r10,sp[0x38]
8000e376:	58 01       	cp.w	r1,0
8000e378:	5f a9       	srle	r9
8000e37a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000e37e:	4c 9a       	lddpc	r10,8000e4a0 <_dtoa_r+0x77c>
8000e380:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000e384:	fa e5 00 10 	st.d	sp[16],r4
8000e388:	f0 09 18 00 	cp.b	r9,r8
8000e38c:	c1 40       	breq	8000e3b4 <_dtoa_r+0x690>
8000e38e:	58 01       	cp.w	r1,0
8000e390:	e0 81 01 78 	brne	8000e680 <_dtoa_r+0x95c>
8000e394:	30 08       	mov	r8,0
8000e396:	fc 19 40 14 	movh	r9,0x4014
8000e39a:	08 9a       	mov	r10,r4
8000e39c:	0a 9b       	mov	r11,r5
8000e39e:	e0 a0 1e e1 	rcall	80012160 <__avr32_f64_mul>
8000e3a2:	fa e8 00 08 	ld.d	r8,sp[8]
8000e3a6:	e0 a0 21 b7 	rcall	80012714 <__avr32_f64_cmp_ge>
8000e3aa:	e0 81 01 6b 	brne	8000e680 <_dtoa_r+0x95c>
8000e3ae:	02 92       	mov	r2,r1
8000e3b0:	e0 8f 01 73 	bral	8000e696 <_dtoa_r+0x972>
8000e3b4:	40 85       	lddsp	r5,sp[0x20]
8000e3b6:	30 14       	mov	r4,1
8000e3b8:	fa e8 00 10 	ld.d	r8,sp[16]
8000e3bc:	fa ea 00 08 	ld.d	r10,sp[8]
8000e3c0:	e0 a0 22 12 	rcall	800127e4 <__avr32_f64_div>
8000e3c4:	e0 a0 21 0e 	rcall	800125e0 <__avr32_f64_to_s32>
8000e3c8:	18 92       	mov	r2,r12
8000e3ca:	e0 a0 21 22 	rcall	8001260e <__avr32_s32_to_f64>
8000e3ce:	fa e8 00 10 	ld.d	r8,sp[16]
8000e3d2:	e0 a0 1e c7 	rcall	80012160 <__avr32_f64_mul>
8000e3d6:	14 98       	mov	r8,r10
8000e3d8:	16 99       	mov	r9,r11
8000e3da:	fa ea 00 08 	ld.d	r10,sp[8]
8000e3de:	e0 a0 1f ad 	rcall	80012338 <__avr32_f64_sub>
8000e3e2:	fa eb 00 08 	st.d	sp[8],r10
8000e3e6:	e4 c8 ff d0 	sub	r8,r2,-48
8000e3ea:	0a c8       	st.b	r5++,r8
8000e3ec:	fc 19 40 24 	movh	r9,0x4024
8000e3f0:	30 08       	mov	r8,0
8000e3f2:	02 34       	cp.w	r4,r1
8000e3f4:	c3 31       	brne	8000e45a <_dtoa_r+0x736>
8000e3f6:	fa e8 00 08 	ld.d	r8,sp[8]
8000e3fa:	e0 a0 20 6d 	rcall	800124d4 <__avr32_f64_add>
8000e3fe:	16 91       	mov	r1,r11
8000e400:	14 90       	mov	r0,r10
8000e402:	14 98       	mov	r8,r10
8000e404:	02 99       	mov	r9,r1
8000e406:	fa ea 00 10 	ld.d	r10,sp[16]
8000e40a:	e0 a0 21 b9 	rcall	8001277c <__avr32_f64_cmp_lt>
8000e40e:	c1 a1       	brne	8000e442 <_dtoa_r+0x71e>
8000e410:	fa e8 00 10 	ld.d	r8,sp[16]
8000e414:	00 9a       	mov	r10,r0
8000e416:	02 9b       	mov	r11,r1
8000e418:	e0 a0 21 6b 	rcall	800126ee <__avr32_f64_cmp_eq>
8000e41c:	e0 80 02 5f 	breq	8000e8da <_dtoa_r+0xbb6>
8000e420:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000e424:	c0 f1       	brne	8000e442 <_dtoa_r+0x71e>
8000e426:	e0 8f 02 5a 	bral	8000e8da <_dtoa_r+0xbb6>
8000e42a:	40 8a       	lddsp	r10,sp[0x20]
8000e42c:	14 38       	cp.w	r8,r10
8000e42e:	c0 30       	breq	8000e434 <_dtoa_r+0x710>
8000e430:	10 95       	mov	r5,r8
8000e432:	c0 98       	rjmp	8000e444 <_dtoa_r+0x720>
8000e434:	33 08       	mov	r8,48
8000e436:	40 89       	lddsp	r9,sp[0x20]
8000e438:	2f f6       	sub	r6,-1
8000e43a:	b2 88       	st.b	r9[0x0],r8
8000e43c:	40 88       	lddsp	r8,sp[0x20]
8000e43e:	c0 88       	rjmp	8000e44e <_dtoa_r+0x72a>
8000e440:	40 66       	lddsp	r6,sp[0x18]
8000e442:	33 99       	mov	r9,57
8000e444:	0a 98       	mov	r8,r5
8000e446:	11 7a       	ld.ub	r10,--r8
8000e448:	f2 0a 18 00 	cp.b	r10,r9
8000e44c:	ce f0       	breq	8000e42a <_dtoa_r+0x706>
8000e44e:	50 66       	stdsp	sp[0x18],r6
8000e450:	11 89       	ld.ub	r9,r8[0x0]
8000e452:	2f f9       	sub	r9,-1
8000e454:	b0 89       	st.b	r8[0x0],r9
8000e456:	e0 8f 02 43 	bral	8000e8dc <_dtoa_r+0xbb8>
8000e45a:	e0 a0 1e 83 	rcall	80012160 <__avr32_f64_mul>
8000e45e:	2f f4       	sub	r4,-1
8000e460:	fa eb 00 08 	st.d	sp[8],r10
8000e464:	30 08       	mov	r8,0
8000e466:	30 09       	mov	r9,0
8000e468:	e0 a0 21 43 	rcall	800126ee <__avr32_f64_cmp_eq>
8000e46c:	ca 60       	breq	8000e3b8 <_dtoa_r+0x694>
8000e46e:	e0 8f 02 36 	bral	8000e8da <_dtoa_r+0xbb6>
8000e472:	40 d8       	lddsp	r8,sp[0x34]
8000e474:	58 08       	cp.w	r8,0
8000e476:	c0 51       	brne	8000e480 <_dtoa_r+0x75c>
8000e478:	04 98       	mov	r8,r2
8000e47a:	00 95       	mov	r5,r0
8000e47c:	40 d4       	lddsp	r4,sp[0x34]
8000e47e:	c3 88       	rjmp	8000e4ee <_dtoa_r+0x7ca>
8000e480:	40 c5       	lddsp	r5,sp[0x30]
8000e482:	58 15       	cp.w	r5,1
8000e484:	e0 89 00 10 	brgt	8000e4a4 <_dtoa_r+0x780>
8000e488:	41 74       	lddsp	r4,sp[0x5c]
8000e48a:	58 04       	cp.w	r4,0
8000e48c:	c0 40       	breq	8000e494 <_dtoa_r+0x770>
8000e48e:	f4 c9 fb cd 	sub	r9,r10,-1075
8000e492:	c0 48       	rjmp	8000e49a <_dtoa_r+0x776>
8000e494:	41 99       	lddsp	r9,sp[0x64]
8000e496:	f2 09 11 36 	rsub	r9,r9,54
8000e49a:	04 98       	mov	r8,r2
8000e49c:	00 95       	mov	r5,r0
8000e49e:	c1 d8       	rjmp	8000e4d8 <_dtoa_r+0x7b4>
8000e4a0:	80 01       	ld.sh	r1,r0[0x0]
8000e4a2:	43 28       	lddsp	r8,sp[0xc8]
8000e4a4:	e2 c8 00 01 	sub	r8,r1,1
8000e4a8:	58 01       	cp.w	r1,0
8000e4aa:	e0 05 17 40 	movge	r5,r0
8000e4ae:	e2 09 17 40 	movge	r9,r1
8000e4b2:	e1 d1 e5 15 	sublt	r5,r0,r1
8000e4b6:	f9 b9 05 00 	movlt	r9,0
8000e4ba:	10 32       	cp.w	r2,r8
8000e4bc:	e5 d8 e4 18 	subge	r8,r2,r8
8000e4c0:	f1 d2 e5 18 	sublt	r8,r8,r2
8000e4c4:	e5 d8 e5 02 	addlt	r2,r2,r8
8000e4c8:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000e4cc:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000e4d0:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000e4d4:	f9 b8 05 00 	movlt	r8,0
8000e4d8:	40 4b       	lddsp	r11,sp[0x10]
8000e4da:	12 0b       	add	r11,r9
8000e4dc:	50 08       	stdsp	sp[0x0],r8
8000e4de:	50 4b       	stdsp	sp[0x10],r11
8000e4e0:	12 00       	add	r0,r9
8000e4e2:	30 1b       	mov	r11,1
8000e4e4:	0e 9c       	mov	r12,r7
8000e4e6:	e0 a0 0c 8d 	rcall	8000fe00 <__i2b>
8000e4ea:	40 08       	lddsp	r8,sp[0x0]
8000e4ec:	18 94       	mov	r4,r12
8000e4ee:	40 4a       	lddsp	r10,sp[0x10]
8000e4f0:	58 05       	cp.w	r5,0
8000e4f2:	5f 99       	srgt	r9
8000e4f4:	58 0a       	cp.w	r10,0
8000e4f6:	5f 9a       	srgt	r10
8000e4f8:	f5 e9 00 09 	and	r9,r10,r9
8000e4fc:	c0 80       	breq	8000e50c <_dtoa_r+0x7e8>
8000e4fe:	40 4c       	lddsp	r12,sp[0x10]
8000e500:	f8 05 0d 49 	min	r9,r12,r5
8000e504:	12 1c       	sub	r12,r9
8000e506:	12 10       	sub	r0,r9
8000e508:	50 4c       	stdsp	sp[0x10],r12
8000e50a:	12 15       	sub	r5,r9
8000e50c:	58 02       	cp.w	r2,0
8000e50e:	e0 8a 00 27 	brle	8000e55c <_dtoa_r+0x838>
8000e512:	40 db       	lddsp	r11,sp[0x34]
8000e514:	58 0b       	cp.w	r11,0
8000e516:	c1 d0       	breq	8000e550 <_dtoa_r+0x82c>
8000e518:	58 08       	cp.w	r8,0
8000e51a:	e0 8a 00 17 	brle	8000e548 <_dtoa_r+0x824>
8000e51e:	10 9a       	mov	r10,r8
8000e520:	50 08       	stdsp	sp[0x0],r8
8000e522:	08 9b       	mov	r11,r4
8000e524:	0e 9c       	mov	r12,r7
8000e526:	e0 a0 0c b3 	rcall	8000fe8c <__pow5mult>
8000e52a:	06 9a       	mov	r10,r3
8000e52c:	18 9b       	mov	r11,r12
8000e52e:	18 94       	mov	r4,r12
8000e530:	0e 9c       	mov	r12,r7
8000e532:	e0 a0 0b e7 	rcall	8000fd00 <__multiply>
8000e536:	18 99       	mov	r9,r12
8000e538:	06 9b       	mov	r11,r3
8000e53a:	50 19       	stdsp	sp[0x4],r9
8000e53c:	0e 9c       	mov	r12,r7
8000e53e:	e0 a0 0a 8f 	rcall	8000fa5c <_Bfree>
8000e542:	40 19       	lddsp	r9,sp[0x4]
8000e544:	40 08       	lddsp	r8,sp[0x0]
8000e546:	12 93       	mov	r3,r9
8000e548:	e4 08 01 0a 	sub	r10,r2,r8
8000e54c:	c0 80       	breq	8000e55c <_dtoa_r+0x838>
8000e54e:	c0 28       	rjmp	8000e552 <_dtoa_r+0x82e>
8000e550:	04 9a       	mov	r10,r2
8000e552:	06 9b       	mov	r11,r3
8000e554:	0e 9c       	mov	r12,r7
8000e556:	e0 a0 0c 9b 	rcall	8000fe8c <__pow5mult>
8000e55a:	18 93       	mov	r3,r12
8000e55c:	30 1b       	mov	r11,1
8000e55e:	0e 9c       	mov	r12,r7
8000e560:	e0 a0 0c 50 	rcall	8000fe00 <__i2b>
8000e564:	41 1a       	lddsp	r10,sp[0x44]
8000e566:	18 92       	mov	r2,r12
8000e568:	58 0a       	cp.w	r10,0
8000e56a:	e0 8a 00 07 	brle	8000e578 <_dtoa_r+0x854>
8000e56e:	18 9b       	mov	r11,r12
8000e570:	0e 9c       	mov	r12,r7
8000e572:	e0 a0 0c 8d 	rcall	8000fe8c <__pow5mult>
8000e576:	18 92       	mov	r2,r12
8000e578:	40 c9       	lddsp	r9,sp[0x30]
8000e57a:	58 19       	cp.w	r9,1
8000e57c:	e0 89 00 14 	brgt	8000e5a4 <_dtoa_r+0x880>
8000e580:	40 38       	lddsp	r8,sp[0xc]
8000e582:	58 08       	cp.w	r8,0
8000e584:	c1 01       	brne	8000e5a4 <_dtoa_r+0x880>
8000e586:	40 29       	lddsp	r9,sp[0x8]
8000e588:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000e58c:	c0 c1       	brne	8000e5a4 <_dtoa_r+0x880>
8000e58e:	12 98       	mov	r8,r9
8000e590:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000e594:	c0 80       	breq	8000e5a4 <_dtoa_r+0x880>
8000e596:	40 4c       	lddsp	r12,sp[0x10]
8000e598:	30 1b       	mov	r11,1
8000e59a:	2f fc       	sub	r12,-1
8000e59c:	2f f0       	sub	r0,-1
8000e59e:	50 4c       	stdsp	sp[0x10],r12
8000e5a0:	50 6b       	stdsp	sp[0x18],r11
8000e5a2:	c0 38       	rjmp	8000e5a8 <_dtoa_r+0x884>
8000e5a4:	30 0a       	mov	r10,0
8000e5a6:	50 6a       	stdsp	sp[0x18],r10
8000e5a8:	41 19       	lddsp	r9,sp[0x44]
8000e5aa:	58 09       	cp.w	r9,0
8000e5ac:	c0 31       	brne	8000e5b2 <_dtoa_r+0x88e>
8000e5ae:	30 1c       	mov	r12,1
8000e5b0:	c0 98       	rjmp	8000e5c2 <_dtoa_r+0x89e>
8000e5b2:	64 48       	ld.w	r8,r2[0x10]
8000e5b4:	2f c8       	sub	r8,-4
8000e5b6:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000e5ba:	e0 a0 08 eb 	rcall	8000f790 <__hi0bits>
8000e5be:	f8 0c 11 20 	rsub	r12,r12,32
8000e5c2:	40 4b       	lddsp	r11,sp[0x10]
8000e5c4:	f8 0b 00 08 	add	r8,r12,r11
8000e5c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e5cc:	c0 c0       	breq	8000e5e4 <_dtoa_r+0x8c0>
8000e5ce:	f0 08 11 20 	rsub	r8,r8,32
8000e5d2:	58 48       	cp.w	r8,4
8000e5d4:	e0 8a 00 06 	brle	8000e5e0 <_dtoa_r+0x8bc>
8000e5d8:	20 48       	sub	r8,4
8000e5da:	10 0b       	add	r11,r8
8000e5dc:	50 4b       	stdsp	sp[0x10],r11
8000e5de:	c0 78       	rjmp	8000e5ec <_dtoa_r+0x8c8>
8000e5e0:	58 48       	cp.w	r8,4
8000e5e2:	c0 70       	breq	8000e5f0 <_dtoa_r+0x8cc>
8000e5e4:	40 4a       	lddsp	r10,sp[0x10]
8000e5e6:	2e 48       	sub	r8,-28
8000e5e8:	10 0a       	add	r10,r8
8000e5ea:	50 4a       	stdsp	sp[0x10],r10
8000e5ec:	10 00       	add	r0,r8
8000e5ee:	10 05       	add	r5,r8
8000e5f0:	58 00       	cp.w	r0,0
8000e5f2:	e0 8a 00 08 	brle	8000e602 <_dtoa_r+0x8de>
8000e5f6:	06 9b       	mov	r11,r3
8000e5f8:	00 9a       	mov	r10,r0
8000e5fa:	0e 9c       	mov	r12,r7
8000e5fc:	e0 a0 0b 3e 	rcall	8000fc78 <__lshift>
8000e600:	18 93       	mov	r3,r12
8000e602:	40 49       	lddsp	r9,sp[0x10]
8000e604:	58 09       	cp.w	r9,0
8000e606:	e0 8a 00 08 	brle	8000e616 <_dtoa_r+0x8f2>
8000e60a:	04 9b       	mov	r11,r2
8000e60c:	12 9a       	mov	r10,r9
8000e60e:	0e 9c       	mov	r12,r7
8000e610:	e0 a0 0b 34 	rcall	8000fc78 <__lshift>
8000e614:	18 92       	mov	r2,r12
8000e616:	41 48       	lddsp	r8,sp[0x50]
8000e618:	58 08       	cp.w	r8,0
8000e61a:	c1 b0       	breq	8000e650 <_dtoa_r+0x92c>
8000e61c:	04 9b       	mov	r11,r2
8000e61e:	06 9c       	mov	r12,r3
8000e620:	e0 a0 09 2f 	rcall	8000f87e <__mcmp>
8000e624:	c1 64       	brge	8000e650 <_dtoa_r+0x92c>
8000e626:	06 9b       	mov	r11,r3
8000e628:	30 09       	mov	r9,0
8000e62a:	30 aa       	mov	r10,10
8000e62c:	0e 9c       	mov	r12,r7
8000e62e:	e0 a0 0b f1 	rcall	8000fe10 <__multadd>
8000e632:	20 16       	sub	r6,1
8000e634:	18 93       	mov	r3,r12
8000e636:	40 dc       	lddsp	r12,sp[0x34]
8000e638:	58 0c       	cp.w	r12,0
8000e63a:	c0 31       	brne	8000e640 <_dtoa_r+0x91c>
8000e63c:	40 91       	lddsp	r1,sp[0x24]
8000e63e:	c0 98       	rjmp	8000e650 <_dtoa_r+0x92c>
8000e640:	08 9b       	mov	r11,r4
8000e642:	40 91       	lddsp	r1,sp[0x24]
8000e644:	30 09       	mov	r9,0
8000e646:	30 aa       	mov	r10,10
8000e648:	0e 9c       	mov	r12,r7
8000e64a:	e0 a0 0b e3 	rcall	8000fe10 <__multadd>
8000e64e:	18 94       	mov	r4,r12
8000e650:	58 01       	cp.w	r1,0
8000e652:	5f a9       	srle	r9
8000e654:	40 cb       	lddsp	r11,sp[0x30]
8000e656:	58 2b       	cp.w	r11,2
8000e658:	5f 98       	srgt	r8
8000e65a:	f3 e8 00 08 	and	r8,r9,r8
8000e65e:	c2 50       	breq	8000e6a8 <_dtoa_r+0x984>
8000e660:	58 01       	cp.w	r1,0
8000e662:	c1 11       	brne	8000e684 <_dtoa_r+0x960>
8000e664:	04 9b       	mov	r11,r2
8000e666:	02 99       	mov	r9,r1
8000e668:	30 5a       	mov	r10,5
8000e66a:	0e 9c       	mov	r12,r7
8000e66c:	e0 a0 0b d2 	rcall	8000fe10 <__multadd>
8000e670:	18 92       	mov	r2,r12
8000e672:	18 9b       	mov	r11,r12
8000e674:	06 9c       	mov	r12,r3
8000e676:	e0 a0 09 04 	rcall	8000f87e <__mcmp>
8000e67a:	e0 89 00 0f 	brgt	8000e698 <_dtoa_r+0x974>
8000e67e:	c0 38       	rjmp	8000e684 <_dtoa_r+0x960>
8000e680:	30 02       	mov	r2,0
8000e682:	04 94       	mov	r4,r2
8000e684:	40 ea       	lddsp	r10,sp[0x38]
8000e686:	30 09       	mov	r9,0
8000e688:	5c da       	com	r10
8000e68a:	40 85       	lddsp	r5,sp[0x20]
8000e68c:	50 6a       	stdsp	sp[0x18],r10
8000e68e:	50 49       	stdsp	sp[0x10],r9
8000e690:	c0 f9       	rjmp	8000e8ae <_dtoa_r+0xb8a>
8000e692:	08 92       	mov	r2,r4
8000e694:	40 66       	lddsp	r6,sp[0x18]
8000e696:	04 94       	mov	r4,r2
8000e698:	2f f6       	sub	r6,-1
8000e69a:	50 66       	stdsp	sp[0x18],r6
8000e69c:	33 18       	mov	r8,49
8000e69e:	40 85       	lddsp	r5,sp[0x20]
8000e6a0:	0a c8       	st.b	r5++,r8
8000e6a2:	30 08       	mov	r8,0
8000e6a4:	50 48       	stdsp	sp[0x10],r8
8000e6a6:	c0 49       	rjmp	8000e8ae <_dtoa_r+0xb8a>
8000e6a8:	40 dc       	lddsp	r12,sp[0x34]
8000e6aa:	58 0c       	cp.w	r12,0
8000e6ac:	e0 80 00 b5 	breq	8000e816 <_dtoa_r+0xaf2>
8000e6b0:	58 05       	cp.w	r5,0
8000e6b2:	e0 8a 00 08 	brle	8000e6c2 <_dtoa_r+0x99e>
8000e6b6:	08 9b       	mov	r11,r4
8000e6b8:	0a 9a       	mov	r10,r5
8000e6ba:	0e 9c       	mov	r12,r7
8000e6bc:	e0 a0 0a de 	rcall	8000fc78 <__lshift>
8000e6c0:	18 94       	mov	r4,r12
8000e6c2:	40 6b       	lddsp	r11,sp[0x18]
8000e6c4:	58 0b       	cp.w	r11,0
8000e6c6:	c0 31       	brne	8000e6cc <_dtoa_r+0x9a8>
8000e6c8:	08 9c       	mov	r12,r4
8000e6ca:	c1 38       	rjmp	8000e6f0 <_dtoa_r+0x9cc>
8000e6cc:	68 1b       	ld.w	r11,r4[0x4]
8000e6ce:	0e 9c       	mov	r12,r7
8000e6d0:	e0 a0 09 e0 	rcall	8000fa90 <_Balloc>
8000e6d4:	68 4a       	ld.w	r10,r4[0x10]
8000e6d6:	18 95       	mov	r5,r12
8000e6d8:	e8 cb ff f4 	sub	r11,r4,-12
8000e6dc:	2f ea       	sub	r10,-2
8000e6de:	2f 4c       	sub	r12,-12
8000e6e0:	a3 6a       	lsl	r10,0x2
8000e6e2:	fe b0 dc 38 	rcall	80009f52 <memcpy>
8000e6e6:	0a 9b       	mov	r11,r5
8000e6e8:	30 1a       	mov	r10,1
8000e6ea:	0e 9c       	mov	r12,r7
8000e6ec:	e0 a0 0a c6 	rcall	8000fc78 <__lshift>
8000e6f0:	50 44       	stdsp	sp[0x10],r4
8000e6f2:	40 3a       	lddsp	r10,sp[0xc]
8000e6f4:	30 19       	mov	r9,1
8000e6f6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000e6fa:	18 94       	mov	r4,r12
8000e6fc:	50 da       	stdsp	sp[0x34],r10
8000e6fe:	40 85       	lddsp	r5,sp[0x20]
8000e700:	50 99       	stdsp	sp[0x24],r9
8000e702:	50 26       	stdsp	sp[0x8],r6
8000e704:	50 e1       	stdsp	sp[0x38],r1
8000e706:	04 9b       	mov	r11,r2
8000e708:	06 9c       	mov	r12,r3
8000e70a:	fe b0 fa 7d 	rcall	8000dc04 <quorem>
8000e70e:	40 4b       	lddsp	r11,sp[0x10]
8000e710:	f8 c0 ff d0 	sub	r0,r12,-48
8000e714:	06 9c       	mov	r12,r3
8000e716:	e0 a0 08 b4 	rcall	8000f87e <__mcmp>
8000e71a:	08 9a       	mov	r10,r4
8000e71c:	50 6c       	stdsp	sp[0x18],r12
8000e71e:	04 9b       	mov	r11,r2
8000e720:	0e 9c       	mov	r12,r7
8000e722:	e0 a0 0a 43 	rcall	8000fba8 <__mdiff>
8000e726:	18 91       	mov	r1,r12
8000e728:	78 38       	ld.w	r8,r12[0xc]
8000e72a:	58 08       	cp.w	r8,0
8000e72c:	c0 30       	breq	8000e732 <_dtoa_r+0xa0e>
8000e72e:	30 16       	mov	r6,1
8000e730:	c0 68       	rjmp	8000e73c <_dtoa_r+0xa18>
8000e732:	18 9b       	mov	r11,r12
8000e734:	06 9c       	mov	r12,r3
8000e736:	e0 a0 08 a4 	rcall	8000f87e <__mcmp>
8000e73a:	18 96       	mov	r6,r12
8000e73c:	0e 9c       	mov	r12,r7
8000e73e:	02 9b       	mov	r11,r1
8000e740:	e0 a0 09 8e 	rcall	8000fa5c <_Bfree>
8000e744:	40 cc       	lddsp	r12,sp[0x30]
8000e746:	ed ec 10 08 	or	r8,r6,r12
8000e74a:	c0 d1       	brne	8000e764 <_dtoa_r+0xa40>
8000e74c:	40 db       	lddsp	r11,sp[0x34]
8000e74e:	58 0b       	cp.w	r11,0
8000e750:	c0 a1       	brne	8000e764 <_dtoa_r+0xa40>
8000e752:	40 26       	lddsp	r6,sp[0x8]
8000e754:	e0 40 00 39 	cp.w	r0,57
8000e758:	c3 00       	breq	8000e7b8 <_dtoa_r+0xa94>
8000e75a:	40 6a       	lddsp	r10,sp[0x18]
8000e75c:	58 0a       	cp.w	r10,0
8000e75e:	e0 89 00 24 	brgt	8000e7a6 <_dtoa_r+0xa82>
8000e762:	c2 f8       	rjmp	8000e7c0 <_dtoa_r+0xa9c>
8000e764:	40 69       	lddsp	r9,sp[0x18]
8000e766:	58 09       	cp.w	r9,0
8000e768:	c0 85       	brlt	8000e778 <_dtoa_r+0xa54>
8000e76a:	12 98       	mov	r8,r9
8000e76c:	40 cc       	lddsp	r12,sp[0x30]
8000e76e:	18 48       	or	r8,r12
8000e770:	c1 d1       	brne	8000e7aa <_dtoa_r+0xa86>
8000e772:	40 db       	lddsp	r11,sp[0x34]
8000e774:	58 0b       	cp.w	r11,0
8000e776:	c1 a1       	brne	8000e7aa <_dtoa_r+0xa86>
8000e778:	0c 99       	mov	r9,r6
8000e77a:	40 26       	lddsp	r6,sp[0x8]
8000e77c:	58 09       	cp.w	r9,0
8000e77e:	e0 8a 00 21 	brle	8000e7c0 <_dtoa_r+0xa9c>
8000e782:	06 9b       	mov	r11,r3
8000e784:	30 1a       	mov	r10,1
8000e786:	0e 9c       	mov	r12,r7
8000e788:	e0 a0 0a 78 	rcall	8000fc78 <__lshift>
8000e78c:	04 9b       	mov	r11,r2
8000e78e:	18 93       	mov	r3,r12
8000e790:	e0 a0 08 77 	rcall	8000f87e <__mcmp>
8000e794:	e0 89 00 06 	brgt	8000e7a0 <_dtoa_r+0xa7c>
8000e798:	c1 41       	brne	8000e7c0 <_dtoa_r+0xa9c>
8000e79a:	ed b0 00 00 	bld	r0,0x0
8000e79e:	c1 11       	brne	8000e7c0 <_dtoa_r+0xa9c>
8000e7a0:	e0 40 00 39 	cp.w	r0,57
8000e7a4:	c0 a0       	breq	8000e7b8 <_dtoa_r+0xa94>
8000e7a6:	2f f0       	sub	r0,-1
8000e7a8:	c0 c8       	rjmp	8000e7c0 <_dtoa_r+0xa9c>
8000e7aa:	58 06       	cp.w	r6,0
8000e7ac:	e0 8a 00 0c 	brle	8000e7c4 <_dtoa_r+0xaa0>
8000e7b0:	40 26       	lddsp	r6,sp[0x8]
8000e7b2:	e0 40 00 39 	cp.w	r0,57
8000e7b6:	c0 41       	brne	8000e7be <_dtoa_r+0xa9a>
8000e7b8:	33 98       	mov	r8,57
8000e7ba:	0a c8       	st.b	r5++,r8
8000e7bc:	c6 78       	rjmp	8000e88a <_dtoa_r+0xb66>
8000e7be:	2f f0       	sub	r0,-1
8000e7c0:	0a c0       	st.b	r5++,r0
8000e7c2:	c7 58       	rjmp	8000e8ac <_dtoa_r+0xb88>
8000e7c4:	0a c0       	st.b	r5++,r0
8000e7c6:	40 9a       	lddsp	r10,sp[0x24]
8000e7c8:	40 e9       	lddsp	r9,sp[0x38]
8000e7ca:	12 3a       	cp.w	r10,r9
8000e7cc:	c4 30       	breq	8000e852 <_dtoa_r+0xb2e>
8000e7ce:	06 9b       	mov	r11,r3
8000e7d0:	30 09       	mov	r9,0
8000e7d2:	30 aa       	mov	r10,10
8000e7d4:	0e 9c       	mov	r12,r7
8000e7d6:	e0 a0 0b 1d 	rcall	8000fe10 <__multadd>
8000e7da:	40 48       	lddsp	r8,sp[0x10]
8000e7dc:	18 93       	mov	r3,r12
8000e7de:	08 38       	cp.w	r8,r4
8000e7e0:	c0 91       	brne	8000e7f2 <_dtoa_r+0xace>
8000e7e2:	10 9b       	mov	r11,r8
8000e7e4:	30 09       	mov	r9,0
8000e7e6:	30 aa       	mov	r10,10
8000e7e8:	0e 9c       	mov	r12,r7
8000e7ea:	e0 a0 0b 13 	rcall	8000fe10 <__multadd>
8000e7ee:	50 4c       	stdsp	sp[0x10],r12
8000e7f0:	c0 e8       	rjmp	8000e80c <_dtoa_r+0xae8>
8000e7f2:	40 4b       	lddsp	r11,sp[0x10]
8000e7f4:	30 09       	mov	r9,0
8000e7f6:	30 aa       	mov	r10,10
8000e7f8:	0e 9c       	mov	r12,r7
8000e7fa:	e0 a0 0b 0b 	rcall	8000fe10 <__multadd>
8000e7fe:	08 9b       	mov	r11,r4
8000e800:	50 4c       	stdsp	sp[0x10],r12
8000e802:	30 09       	mov	r9,0
8000e804:	30 aa       	mov	r10,10
8000e806:	0e 9c       	mov	r12,r7
8000e808:	e0 a0 0b 04 	rcall	8000fe10 <__multadd>
8000e80c:	18 94       	mov	r4,r12
8000e80e:	40 9c       	lddsp	r12,sp[0x24]
8000e810:	2f fc       	sub	r12,-1
8000e812:	50 9c       	stdsp	sp[0x24],r12
8000e814:	c7 9b       	rjmp	8000e706 <_dtoa_r+0x9e2>
8000e816:	30 18       	mov	r8,1
8000e818:	06 90       	mov	r0,r3
8000e81a:	40 85       	lddsp	r5,sp[0x20]
8000e81c:	08 93       	mov	r3,r4
8000e81e:	0c 94       	mov	r4,r6
8000e820:	10 96       	mov	r6,r8
8000e822:	04 9b       	mov	r11,r2
8000e824:	00 9c       	mov	r12,r0
8000e826:	fe b0 f9 ef 	rcall	8000dc04 <quorem>
8000e82a:	2d 0c       	sub	r12,-48
8000e82c:	0a cc       	st.b	r5++,r12
8000e82e:	02 36       	cp.w	r6,r1
8000e830:	c0 a4       	brge	8000e844 <_dtoa_r+0xb20>
8000e832:	00 9b       	mov	r11,r0
8000e834:	30 09       	mov	r9,0
8000e836:	30 aa       	mov	r10,10
8000e838:	0e 9c       	mov	r12,r7
8000e83a:	2f f6       	sub	r6,-1
8000e83c:	e0 a0 0a ea 	rcall	8000fe10 <__multadd>
8000e840:	18 90       	mov	r0,r12
8000e842:	cf 0b       	rjmp	8000e822 <_dtoa_r+0xafe>
8000e844:	08 96       	mov	r6,r4
8000e846:	30 0b       	mov	r11,0
8000e848:	06 94       	mov	r4,r3
8000e84a:	50 4b       	stdsp	sp[0x10],r11
8000e84c:	00 93       	mov	r3,r0
8000e84e:	18 90       	mov	r0,r12
8000e850:	c0 28       	rjmp	8000e854 <_dtoa_r+0xb30>
8000e852:	40 26       	lddsp	r6,sp[0x8]
8000e854:	06 9b       	mov	r11,r3
8000e856:	30 1a       	mov	r10,1
8000e858:	0e 9c       	mov	r12,r7
8000e85a:	e0 a0 0a 0f 	rcall	8000fc78 <__lshift>
8000e85e:	04 9b       	mov	r11,r2
8000e860:	18 93       	mov	r3,r12
8000e862:	e0 a0 08 0e 	rcall	8000f87e <__mcmp>
8000e866:	e0 89 00 12 	brgt	8000e88a <_dtoa_r+0xb66>
8000e86a:	c1 b1       	brne	8000e8a0 <_dtoa_r+0xb7c>
8000e86c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000e870:	c0 d1       	brne	8000e88a <_dtoa_r+0xb66>
8000e872:	c1 78       	rjmp	8000e8a0 <_dtoa_r+0xb7c>
8000e874:	40 89       	lddsp	r9,sp[0x20]
8000e876:	12 38       	cp.w	r8,r9
8000e878:	c0 30       	breq	8000e87e <_dtoa_r+0xb5a>
8000e87a:	10 95       	mov	r5,r8
8000e87c:	c0 88       	rjmp	8000e88c <_dtoa_r+0xb68>
8000e87e:	2f f6       	sub	r6,-1
8000e880:	50 66       	stdsp	sp[0x18],r6
8000e882:	33 18       	mov	r8,49
8000e884:	40 8c       	lddsp	r12,sp[0x20]
8000e886:	b8 88       	st.b	r12[0x0],r8
8000e888:	c1 38       	rjmp	8000e8ae <_dtoa_r+0xb8a>
8000e88a:	33 9a       	mov	r10,57
8000e88c:	0a 98       	mov	r8,r5
8000e88e:	11 79       	ld.ub	r9,--r8
8000e890:	f4 09 18 00 	cp.b	r9,r10
8000e894:	cf 00       	breq	8000e874 <_dtoa_r+0xb50>
8000e896:	2f f9       	sub	r9,-1
8000e898:	b0 89       	st.b	r8[0x0],r9
8000e89a:	c0 98       	rjmp	8000e8ac <_dtoa_r+0xb88>
8000e89c:	10 95       	mov	r5,r8
8000e89e:	c0 28       	rjmp	8000e8a2 <_dtoa_r+0xb7e>
8000e8a0:	33 09       	mov	r9,48
8000e8a2:	0a 98       	mov	r8,r5
8000e8a4:	11 7a       	ld.ub	r10,--r8
8000e8a6:	f2 0a 18 00 	cp.b	r10,r9
8000e8aa:	cf 90       	breq	8000e89c <_dtoa_r+0xb78>
8000e8ac:	50 66       	stdsp	sp[0x18],r6
8000e8ae:	04 9b       	mov	r11,r2
8000e8b0:	0e 9c       	mov	r12,r7
8000e8b2:	e0 a0 08 d5 	rcall	8000fa5c <_Bfree>
8000e8b6:	58 04       	cp.w	r4,0
8000e8b8:	c1 20       	breq	8000e8dc <_dtoa_r+0xbb8>
8000e8ba:	40 4b       	lddsp	r11,sp[0x10]
8000e8bc:	08 3b       	cp.w	r11,r4
8000e8be:	5f 19       	srne	r9
8000e8c0:	58 0b       	cp.w	r11,0
8000e8c2:	5f 18       	srne	r8
8000e8c4:	f3 e8 00 08 	and	r8,r9,r8
8000e8c8:	c0 40       	breq	8000e8d0 <_dtoa_r+0xbac>
8000e8ca:	0e 9c       	mov	r12,r7
8000e8cc:	e0 a0 08 c8 	rcall	8000fa5c <_Bfree>
8000e8d0:	08 9b       	mov	r11,r4
8000e8d2:	0e 9c       	mov	r12,r7
8000e8d4:	e0 a0 08 c4 	rcall	8000fa5c <_Bfree>
8000e8d8:	c0 28       	rjmp	8000e8dc <_dtoa_r+0xbb8>
8000e8da:	50 66       	stdsp	sp[0x18],r6
8000e8dc:	0e 9c       	mov	r12,r7
8000e8de:	06 9b       	mov	r11,r3
8000e8e0:	e0 a0 08 be 	rcall	8000fa5c <_Bfree>
8000e8e4:	30 08       	mov	r8,0
8000e8e6:	aa 88       	st.b	r5[0x0],r8
8000e8e8:	40 68       	lddsp	r8,sp[0x18]
8000e8ea:	41 5a       	lddsp	r10,sp[0x54]
8000e8ec:	2f f8       	sub	r8,-1
8000e8ee:	41 29       	lddsp	r9,sp[0x48]
8000e8f0:	95 08       	st.w	r10[0x0],r8
8000e8f2:	40 8c       	lddsp	r12,sp[0x20]
8000e8f4:	58 09       	cp.w	r9,0
8000e8f6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000e8fa:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000e8fe:	2e 6d       	sub	sp,-104
8000e900:	d8 32       	popm	r0-r7,pc
8000e902:	d7 03       	nop

8000e904 <_fflush_r>:
8000e904:	d4 21       	pushm	r4-r7,lr
8000e906:	16 97       	mov	r7,r11
8000e908:	18 96       	mov	r6,r12
8000e90a:	76 48       	ld.w	r8,r11[0x10]
8000e90c:	58 08       	cp.w	r8,0
8000e90e:	c7 c0       	breq	8000ea06 <_fflush_r+0x102>
8000e910:	58 0c       	cp.w	r12,0
8000e912:	c0 50       	breq	8000e91c <_fflush_r+0x18>
8000e914:	78 68       	ld.w	r8,r12[0x18]
8000e916:	58 08       	cp.w	r8,0
8000e918:	c0 21       	brne	8000e91c <_fflush_r+0x18>
8000e91a:	ce 5c       	rcall	8000eae4 <__sinit>
8000e91c:	4b b8       	lddpc	r8,8000ea08 <_fflush_r+0x104>
8000e91e:	10 37       	cp.w	r7,r8
8000e920:	c0 31       	brne	8000e926 <_fflush_r+0x22>
8000e922:	6c 07       	ld.w	r7,r6[0x0]
8000e924:	c0 a8       	rjmp	8000e938 <_fflush_r+0x34>
8000e926:	4b a8       	lddpc	r8,8000ea0c <_fflush_r+0x108>
8000e928:	10 37       	cp.w	r7,r8
8000e92a:	c0 31       	brne	8000e930 <_fflush_r+0x2c>
8000e92c:	6c 17       	ld.w	r7,r6[0x4]
8000e92e:	c0 58       	rjmp	8000e938 <_fflush_r+0x34>
8000e930:	4b 88       	lddpc	r8,8000ea10 <_fflush_r+0x10c>
8000e932:	10 37       	cp.w	r7,r8
8000e934:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000e938:	8e 6a       	ld.sh	r10,r7[0xc]
8000e93a:	14 98       	mov	r8,r10
8000e93c:	ed ba 00 03 	bld	r10,0x3
8000e940:	c4 20       	breq	8000e9c4 <_fflush_r+0xc0>
8000e942:	ab ba       	sbr	r10,0xb
8000e944:	ae 6a       	st.h	r7[0xc],r10
8000e946:	6e 18       	ld.w	r8,r7[0x4]
8000e948:	58 08       	cp.w	r8,0
8000e94a:	e0 89 00 06 	brgt	8000e956 <_fflush_r+0x52>
8000e94e:	6f 08       	ld.w	r8,r7[0x40]
8000e950:	58 08       	cp.w	r8,0
8000e952:	e0 8a 00 5a 	brle	8000ea06 <_fflush_r+0x102>
8000e956:	6e b8       	ld.w	r8,r7[0x2c]
8000e958:	58 08       	cp.w	r8,0
8000e95a:	c5 60       	breq	8000ea06 <_fflush_r+0x102>
8000e95c:	e2 1a 10 00 	andl	r10,0x1000,COH
8000e960:	c0 30       	breq	8000e966 <_fflush_r+0x62>
8000e962:	6f 55       	ld.w	r5,r7[0x54]
8000e964:	c0 f8       	rjmp	8000e982 <_fflush_r+0x7e>
8000e966:	30 19       	mov	r9,1
8000e968:	6e 8b       	ld.w	r11,r7[0x20]
8000e96a:	0c 9c       	mov	r12,r6
8000e96c:	5d 18       	icall	r8
8000e96e:	18 95       	mov	r5,r12
8000e970:	5b fc       	cp.w	r12,-1
8000e972:	c0 81       	brne	8000e982 <_fflush_r+0x7e>
8000e974:	6c 38       	ld.w	r8,r6[0xc]
8000e976:	59 d8       	cp.w	r8,29
8000e978:	c4 70       	breq	8000ea06 <_fflush_r+0x102>
8000e97a:	8e 68       	ld.sh	r8,r7[0xc]
8000e97c:	a7 a8       	sbr	r8,0x6
8000e97e:	ae 68       	st.h	r7[0xc],r8
8000e980:	d8 22       	popm	r4-r7,pc
8000e982:	8e 68       	ld.sh	r8,r7[0xc]
8000e984:	ed b8 00 02 	bld	r8,0x2
8000e988:	c0 91       	brne	8000e99a <_fflush_r+0x96>
8000e98a:	6e 18       	ld.w	r8,r7[0x4]
8000e98c:	10 15       	sub	r5,r8
8000e98e:	6e d8       	ld.w	r8,r7[0x34]
8000e990:	58 08       	cp.w	r8,0
8000e992:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000e996:	eb d8 e1 15 	subne	r5,r5,r8
8000e99a:	6e b8       	ld.w	r8,r7[0x2c]
8000e99c:	0c 9c       	mov	r12,r6
8000e99e:	30 09       	mov	r9,0
8000e9a0:	0a 9a       	mov	r10,r5
8000e9a2:	6e 8b       	ld.w	r11,r7[0x20]
8000e9a4:	5d 18       	icall	r8
8000e9a6:	8e 68       	ld.sh	r8,r7[0xc]
8000e9a8:	0a 3c       	cp.w	r12,r5
8000e9aa:	c2 61       	brne	8000e9f6 <_fflush_r+0xf2>
8000e9ac:	ab d8       	cbr	r8,0xb
8000e9ae:	30 0c       	mov	r12,0
8000e9b0:	6e 49       	ld.w	r9,r7[0x10]
8000e9b2:	ae 68       	st.h	r7[0xc],r8
8000e9b4:	8f 1c       	st.w	r7[0x4],r12
8000e9b6:	8f 09       	st.w	r7[0x0],r9
8000e9b8:	ed b8 00 0c 	bld	r8,0xc
8000e9bc:	c2 51       	brne	8000ea06 <_fflush_r+0x102>
8000e9be:	ef 45 00 54 	st.w	r7[84],r5
8000e9c2:	d8 22       	popm	r4-r7,pc
8000e9c4:	6e 45       	ld.w	r5,r7[0x10]
8000e9c6:	58 05       	cp.w	r5,0
8000e9c8:	c1 f0       	breq	8000ea06 <_fflush_r+0x102>
8000e9ca:	6e 04       	ld.w	r4,r7[0x0]
8000e9cc:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000e9d0:	8f 05       	st.w	r7[0x0],r5
8000e9d2:	f9 b8 01 00 	movne	r8,0
8000e9d6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000e9da:	0a 14       	sub	r4,r5
8000e9dc:	8f 28       	st.w	r7[0x8],r8
8000e9de:	c1 18       	rjmp	8000ea00 <_fflush_r+0xfc>
8000e9e0:	08 99       	mov	r9,r4
8000e9e2:	0a 9a       	mov	r10,r5
8000e9e4:	6e a8       	ld.w	r8,r7[0x28]
8000e9e6:	6e 8b       	ld.w	r11,r7[0x20]
8000e9e8:	0c 9c       	mov	r12,r6
8000e9ea:	5d 18       	icall	r8
8000e9ec:	18 14       	sub	r4,r12
8000e9ee:	58 0c       	cp.w	r12,0
8000e9f0:	e0 89 00 07 	brgt	8000e9fe <_fflush_r+0xfa>
8000e9f4:	8e 68       	ld.sh	r8,r7[0xc]
8000e9f6:	a7 a8       	sbr	r8,0x6
8000e9f8:	3f fc       	mov	r12,-1
8000e9fa:	ae 68       	st.h	r7[0xc],r8
8000e9fc:	d8 22       	popm	r4-r7,pc
8000e9fe:	18 05       	add	r5,r12
8000ea00:	58 04       	cp.w	r4,0
8000ea02:	fe 99 ff ef 	brgt	8000e9e0 <_fflush_r+0xdc>
8000ea06:	d8 2a       	popm	r4-r7,pc,r12=0
8000ea08:	80 01       	ld.sh	r1,r0[0x0]
8000ea0a:	42 80       	lddsp	r0,sp[0xa0]
8000ea0c:	80 01       	ld.sh	r1,r0[0x0]
8000ea0e:	42 a0       	lddsp	r0,sp[0xa8]
8000ea10:	80 01       	ld.sh	r1,r0[0x0]
8000ea12:	42 c0       	lddsp	r0,sp[0xb0]

8000ea14 <fflush>:
8000ea14:	d4 01       	pushm	lr
8000ea16:	18 9b       	mov	r11,r12
8000ea18:	58 0c       	cp.w	r12,0
8000ea1a:	c0 81       	brne	8000ea2a <fflush+0x16>
8000ea1c:	48 68       	lddpc	r8,8000ea34 <fflush+0x20>
8000ea1e:	fe cb 01 1a 	sub	r11,pc,282
8000ea22:	70 0c       	ld.w	r12,r8[0x0]
8000ea24:	e0 a0 03 76 	rcall	8000f110 <_fwalk_reent>
8000ea28:	d8 02       	popm	pc
8000ea2a:	48 48       	lddpc	r8,8000ea38 <fflush+0x24>
8000ea2c:	70 0c       	ld.w	r12,r8[0x0]
8000ea2e:	c6 bf       	rcall	8000e904 <_fflush_r>
8000ea30:	d8 02       	popm	pc
8000ea32:	d7 03       	nop
8000ea34:	80 01       	ld.sh	r1,r0[0x0]
8000ea36:	3e 68       	mov	r8,-26
8000ea38:	00 00       	add	r0,r0
8000ea3a:	01 c0       	ld.ub	r0,r0[0x4]

8000ea3c <__sfp_lock_acquire>:
8000ea3c:	5e fc       	retal	r12

8000ea3e <__sfp_lock_release>:
8000ea3e:	5e fc       	retal	r12

8000ea40 <_cleanup_r>:
8000ea40:	d4 01       	pushm	lr
8000ea42:	fe cb cf ce 	sub	r11,pc,-12338
8000ea46:	e0 a0 03 8d 	rcall	8000f160 <_fwalk>
8000ea4a:	d8 02       	popm	pc

8000ea4c <__sfmoreglue>:
8000ea4c:	d4 21       	pushm	r4-r7,lr
8000ea4e:	16 95       	mov	r5,r11
8000ea50:	f6 06 10 5c 	mul	r6,r11,92
8000ea54:	ec cb ff f4 	sub	r11,r6,-12
8000ea58:	e0 a0 04 26 	rcall	8000f2a4 <_malloc_r>
8000ea5c:	18 97       	mov	r7,r12
8000ea5e:	c0 90       	breq	8000ea70 <__sfmoreglue+0x24>
8000ea60:	99 15       	st.w	r12[0x4],r5
8000ea62:	30 0b       	mov	r11,0
8000ea64:	2f 4c       	sub	r12,-12
8000ea66:	0c 9a       	mov	r10,r6
8000ea68:	8f 2c       	st.w	r7[0x8],r12
8000ea6a:	8f 0b       	st.w	r7[0x0],r11
8000ea6c:	fe b0 db 17 	rcall	8000a09a <memset>
8000ea70:	0e 9c       	mov	r12,r7
8000ea72:	d8 22       	popm	r4-r7,pc

8000ea74 <__sfp>:
8000ea74:	d4 21       	pushm	r4-r7,lr
8000ea76:	49 b8       	lddpc	r8,8000eae0 <__sfp+0x6c>
8000ea78:	18 96       	mov	r6,r12
8000ea7a:	70 07       	ld.w	r7,r8[0x0]
8000ea7c:	6e 68       	ld.w	r8,r7[0x18]
8000ea7e:	58 08       	cp.w	r8,0
8000ea80:	c0 31       	brne	8000ea86 <__sfp+0x12>
8000ea82:	0e 9c       	mov	r12,r7
8000ea84:	c3 0c       	rcall	8000eae4 <__sinit>
8000ea86:	ee c7 ff 28 	sub	r7,r7,-216
8000ea8a:	30 05       	mov	r5,0
8000ea8c:	6e 2c       	ld.w	r12,r7[0x8]
8000ea8e:	6e 18       	ld.w	r8,r7[0x4]
8000ea90:	c0 68       	rjmp	8000ea9c <__sfp+0x28>
8000ea92:	98 69       	ld.sh	r9,r12[0xc]
8000ea94:	ea 09 19 00 	cp.h	r9,r5
8000ea98:	c1 10       	breq	8000eaba <__sfp+0x46>
8000ea9a:	2a 4c       	sub	r12,-92
8000ea9c:	20 18       	sub	r8,1
8000ea9e:	cf a7       	brpl	8000ea92 <__sfp+0x1e>
8000eaa0:	6e 08       	ld.w	r8,r7[0x0]
8000eaa2:	58 08       	cp.w	r8,0
8000eaa4:	c0 61       	brne	8000eab0 <__sfp+0x3c>
8000eaa6:	30 4b       	mov	r11,4
8000eaa8:	0c 9c       	mov	r12,r6
8000eaaa:	cd 1f       	rcall	8000ea4c <__sfmoreglue>
8000eaac:	8f 0c       	st.w	r7[0x0],r12
8000eaae:	c0 30       	breq	8000eab4 <__sfp+0x40>
8000eab0:	6e 07       	ld.w	r7,r7[0x0]
8000eab2:	ce db       	rjmp	8000ea8c <__sfp+0x18>
8000eab4:	30 c8       	mov	r8,12
8000eab6:	8d 38       	st.w	r6[0xc],r8
8000eab8:	d8 22       	popm	r4-r7,pc
8000eaba:	30 08       	mov	r8,0
8000eabc:	f9 48 00 4c 	st.w	r12[76],r8
8000eac0:	99 08       	st.w	r12[0x0],r8
8000eac2:	99 28       	st.w	r12[0x8],r8
8000eac4:	99 18       	st.w	r12[0x4],r8
8000eac6:	99 48       	st.w	r12[0x10],r8
8000eac8:	99 58       	st.w	r12[0x14],r8
8000eaca:	99 68       	st.w	r12[0x18],r8
8000eacc:	99 d8       	st.w	r12[0x34],r8
8000eace:	99 e8       	st.w	r12[0x38],r8
8000ead0:	f9 48 00 48 	st.w	r12[72],r8
8000ead4:	3f f8       	mov	r8,-1
8000ead6:	b8 78       	st.h	r12[0xe],r8
8000ead8:	30 18       	mov	r8,1
8000eada:	b8 68       	st.h	r12[0xc],r8
8000eadc:	d8 22       	popm	r4-r7,pc
8000eade:	d7 03       	nop
8000eae0:	80 01       	ld.sh	r1,r0[0x0]
8000eae2:	3e 68       	mov	r8,-26

8000eae4 <__sinit>:
8000eae4:	d4 21       	pushm	r4-r7,lr
8000eae6:	18 96       	mov	r6,r12
8000eae8:	78 67       	ld.w	r7,r12[0x18]
8000eaea:	58 07       	cp.w	r7,0
8000eaec:	c4 91       	brne	8000eb7e <__sinit+0x9a>
8000eaee:	fe c8 00 ae 	sub	r8,pc,174
8000eaf2:	30 15       	mov	r5,1
8000eaf4:	99 a8       	st.w	r12[0x28],r8
8000eaf6:	f9 47 00 d8 	st.w	r12[216],r7
8000eafa:	f9 47 00 dc 	st.w	r12[220],r7
8000eafe:	f9 47 00 e0 	st.w	r12[224],r7
8000eb02:	99 65       	st.w	r12[0x18],r5
8000eb04:	cb 8f       	rcall	8000ea74 <__sfp>
8000eb06:	8d 0c       	st.w	r6[0x0],r12
8000eb08:	0c 9c       	mov	r12,r6
8000eb0a:	cb 5f       	rcall	8000ea74 <__sfp>
8000eb0c:	8d 1c       	st.w	r6[0x4],r12
8000eb0e:	0c 9c       	mov	r12,r6
8000eb10:	cb 2f       	rcall	8000ea74 <__sfp>
8000eb12:	6c 09       	ld.w	r9,r6[0x0]
8000eb14:	30 48       	mov	r8,4
8000eb16:	93 07       	st.w	r9[0x0],r7
8000eb18:	b2 68       	st.h	r9[0xc],r8
8000eb1a:	93 17       	st.w	r9[0x4],r7
8000eb1c:	93 27       	st.w	r9[0x8],r7
8000eb1e:	6c 18       	ld.w	r8,r6[0x4]
8000eb20:	b2 77       	st.h	r9[0xe],r7
8000eb22:	93 47       	st.w	r9[0x10],r7
8000eb24:	93 57       	st.w	r9[0x14],r7
8000eb26:	93 67       	st.w	r9[0x18],r7
8000eb28:	93 89       	st.w	r9[0x20],r9
8000eb2a:	91 07       	st.w	r8[0x0],r7
8000eb2c:	91 17       	st.w	r8[0x4],r7
8000eb2e:	91 27       	st.w	r8[0x8],r7
8000eb30:	fe ce e6 5c 	sub	lr,pc,-6564
8000eb34:	fe cb e6 90 	sub	r11,pc,-6512
8000eb38:	93 9e       	st.w	r9[0x24],lr
8000eb3a:	93 ab       	st.w	r9[0x28],r11
8000eb3c:	fe ca e6 c0 	sub	r10,pc,-6464
8000eb40:	fe c4 e6 d0 	sub	r4,pc,-6448
8000eb44:	93 ba       	st.w	r9[0x2c],r10
8000eb46:	93 c4       	st.w	r9[0x30],r4
8000eb48:	30 99       	mov	r9,9
8000eb4a:	b0 69       	st.h	r8[0xc],r9
8000eb4c:	b0 75       	st.h	r8[0xe],r5
8000eb4e:	91 c4       	st.w	r8[0x30],r4
8000eb50:	91 47       	st.w	r8[0x10],r7
8000eb52:	91 57       	st.w	r8[0x14],r7
8000eb54:	91 67       	st.w	r8[0x18],r7
8000eb56:	91 88       	st.w	r8[0x20],r8
8000eb58:	91 9e       	st.w	r8[0x24],lr
8000eb5a:	91 ab       	st.w	r8[0x28],r11
8000eb5c:	91 ba       	st.w	r8[0x2c],r10
8000eb5e:	8d 2c       	st.w	r6[0x8],r12
8000eb60:	31 28       	mov	r8,18
8000eb62:	99 07       	st.w	r12[0x0],r7
8000eb64:	b8 68       	st.h	r12[0xc],r8
8000eb66:	99 17       	st.w	r12[0x4],r7
8000eb68:	99 27       	st.w	r12[0x8],r7
8000eb6a:	30 28       	mov	r8,2
8000eb6c:	b8 78       	st.h	r12[0xe],r8
8000eb6e:	99 c4       	st.w	r12[0x30],r4
8000eb70:	99 67       	st.w	r12[0x18],r7
8000eb72:	99 9e       	st.w	r12[0x24],lr
8000eb74:	99 ab       	st.w	r12[0x28],r11
8000eb76:	99 ba       	st.w	r12[0x2c],r10
8000eb78:	99 47       	st.w	r12[0x10],r7
8000eb7a:	99 57       	st.w	r12[0x14],r7
8000eb7c:	99 8c       	st.w	r12[0x20],r12
8000eb7e:	d8 22       	popm	r4-r7,pc

8000eb80 <_fread_r>:
8000eb80:	d4 31       	pushm	r0-r7,lr
8000eb82:	14 90       	mov	r0,r10
8000eb84:	12 91       	mov	r1,r9
8000eb86:	16 93       	mov	r3,r11
8000eb88:	10 97       	mov	r7,r8
8000eb8a:	18 95       	mov	r5,r12
8000eb8c:	f2 0a 02 42 	mul	r2,r9,r10
8000eb90:	58 02       	cp.w	r2,0
8000eb92:	c0 31       	brne	8000eb98 <_fread_r+0x18>
8000eb94:	04 91       	mov	r1,r2
8000eb96:	c4 08       	rjmp	8000ec16 <_fread_r+0x96>
8000eb98:	58 0c       	cp.w	r12,0
8000eb9a:	c0 50       	breq	8000eba4 <_fread_r+0x24>
8000eb9c:	78 68       	ld.w	r8,r12[0x18]
8000eb9e:	58 08       	cp.w	r8,0
8000eba0:	c0 21       	brne	8000eba4 <_fread_r+0x24>
8000eba2:	ca 1f       	rcall	8000eae4 <__sinit>
8000eba4:	49 e8       	lddpc	r8,8000ec1c <_fread_r+0x9c>
8000eba6:	10 37       	cp.w	r7,r8
8000eba8:	c0 31       	brne	8000ebae <_fread_r+0x2e>
8000ebaa:	6a 07       	ld.w	r7,r5[0x0]
8000ebac:	c0 a8       	rjmp	8000ebc0 <_fread_r+0x40>
8000ebae:	49 d8       	lddpc	r8,8000ec20 <_fread_r+0xa0>
8000ebb0:	10 37       	cp.w	r7,r8
8000ebb2:	c0 31       	brne	8000ebb8 <_fread_r+0x38>
8000ebb4:	6a 17       	ld.w	r7,r5[0x4]
8000ebb6:	c0 58       	rjmp	8000ebc0 <_fread_r+0x40>
8000ebb8:	49 b8       	lddpc	r8,8000ec24 <_fread_r+0xa4>
8000ebba:	10 37       	cp.w	r7,r8
8000ebbc:	eb f7 00 02 	ld.weq	r7,r5[0x8]
8000ebc0:	6e 18       	ld.w	r8,r7[0x4]
8000ebc2:	58 08       	cp.w	r8,0
8000ebc4:	c0 34       	brge	8000ebca <_fread_r+0x4a>
8000ebc6:	30 08       	mov	r8,0
8000ebc8:	8f 18       	st.w	r7[0x4],r8
8000ebca:	04 96       	mov	r6,r2
8000ebcc:	c1 48       	rjmp	8000ebf4 <_fread_r+0x74>
8000ebce:	fe b0 d9 c2 	rcall	80009f52 <memcpy>
8000ebd2:	6e 08       	ld.w	r8,r7[0x0]
8000ebd4:	08 03       	add	r3,r4
8000ebd6:	08 16       	sub	r6,r4
8000ebd8:	0e 9b       	mov	r11,r7
8000ebda:	f0 04 00 04 	add	r4,r8,r4
8000ebde:	0a 9c       	mov	r12,r5
8000ebe0:	8f 04       	st.w	r7[0x0],r4
8000ebe2:	e0 a0 0b 3b 	rcall	80010258 <__srefill_r>
8000ebe6:	c0 70       	breq	8000ebf4 <_fread_r+0x74>
8000ebe8:	e4 06 01 09 	sub	r9,r2,r6
8000ebec:	f2 00 0d 08 	divu	r8,r9,r0
8000ebf0:	10 91       	mov	r1,r8
8000ebf2:	c1 28       	rjmp	8000ec16 <_fread_r+0x96>
8000ebf4:	6e 14       	ld.w	r4,r7[0x4]
8000ebf6:	6e 08       	ld.w	r8,r7[0x0]
8000ebf8:	06 9c       	mov	r12,r3
8000ebfa:	08 9a       	mov	r10,r4
8000ebfc:	10 9b       	mov	r11,r8
8000ebfe:	08 36       	cp.w	r6,r4
8000ec00:	fe 9b ff e7 	brhi	8000ebce <_fread_r+0x4e>
8000ec04:	0c 9a       	mov	r10,r6
8000ec06:	fe b0 d9 a6 	rcall	80009f52 <memcpy>
8000ec0a:	6e 08       	ld.w	r8,r7[0x0]
8000ec0c:	0c 08       	add	r8,r6
8000ec0e:	8f 08       	st.w	r7[0x0],r8
8000ec10:	6e 18       	ld.w	r8,r7[0x4]
8000ec12:	0c 18       	sub	r8,r6
8000ec14:	8f 18       	st.w	r7[0x4],r8
8000ec16:	02 9c       	mov	r12,r1
8000ec18:	d8 32       	popm	r0-r7,pc
8000ec1a:	d7 03       	nop
8000ec1c:	80 01       	ld.sh	r1,r0[0x0]
8000ec1e:	42 80       	lddsp	r0,sp[0xa0]
8000ec20:	80 01       	ld.sh	r1,r0[0x0]
8000ec22:	42 a0       	lddsp	r0,sp[0xa8]
8000ec24:	80 01       	ld.sh	r1,r0[0x0]
8000ec26:	42 c0       	lddsp	r0,sp[0xb0]

8000ec28 <fread>:
8000ec28:	d4 01       	pushm	lr
8000ec2a:	12 98       	mov	r8,r9
8000ec2c:	14 99       	mov	r9,r10
8000ec2e:	16 9a       	mov	r10,r11
8000ec30:	18 9b       	mov	r11,r12
8000ec32:	48 3c       	lddpc	r12,8000ec3c <fread+0x14>
8000ec34:	78 0c       	ld.w	r12,r12[0x0]
8000ec36:	ca 5f       	rcall	8000eb80 <_fread_r>
8000ec38:	d8 02       	popm	pc
8000ec3a:	d7 03       	nop
8000ec3c:	00 00       	add	r0,r0
8000ec3e:	01 c0       	ld.ub	r0,r0[0x4]

8000ec40 <_malloc_trim_r>:
8000ec40:	d4 21       	pushm	r4-r7,lr
8000ec42:	16 95       	mov	r5,r11
8000ec44:	18 97       	mov	r7,r12
8000ec46:	e0 a0 05 a3 	rcall	8000f78c <__malloc_lock>
8000ec4a:	4a 24       	lddpc	r4,8000ecd0 <_malloc_trim_r+0x90>
8000ec4c:	68 28       	ld.w	r8,r4[0x8]
8000ec4e:	70 16       	ld.w	r6,r8[0x4]
8000ec50:	e0 16 ff fc 	andl	r6,0xfffc
8000ec54:	ec c8 ff 91 	sub	r8,r6,-111
8000ec58:	f0 05 01 05 	sub	r5,r8,r5
8000ec5c:	e0 15 ff 80 	andl	r5,0xff80
8000ec60:	ea c5 00 80 	sub	r5,r5,128
8000ec64:	e0 45 00 7f 	cp.w	r5,127
8000ec68:	e0 8a 00 23 	brle	8000ecae <_malloc_trim_r+0x6e>
8000ec6c:	30 0b       	mov	r11,0
8000ec6e:	0e 9c       	mov	r12,r7
8000ec70:	e0 a0 0b 7e 	rcall	8001036c <_sbrk_r>
8000ec74:	68 28       	ld.w	r8,r4[0x8]
8000ec76:	0c 08       	add	r8,r6
8000ec78:	10 3c       	cp.w	r12,r8
8000ec7a:	c1 a1       	brne	8000ecae <_malloc_trim_r+0x6e>
8000ec7c:	ea 0b 11 00 	rsub	r11,r5,0
8000ec80:	0e 9c       	mov	r12,r7
8000ec82:	e0 a0 0b 75 	rcall	8001036c <_sbrk_r>
8000ec86:	5b fc       	cp.w	r12,-1
8000ec88:	c1 71       	brne	8000ecb6 <_malloc_trim_r+0x76>
8000ec8a:	30 0b       	mov	r11,0
8000ec8c:	0e 9c       	mov	r12,r7
8000ec8e:	e0 a0 0b 6f 	rcall	8001036c <_sbrk_r>
8000ec92:	68 28       	ld.w	r8,r4[0x8]
8000ec94:	f8 08 01 09 	sub	r9,r12,r8
8000ec98:	58 f9       	cp.w	r9,15
8000ec9a:	e0 8a 00 0a 	brle	8000ecae <_malloc_trim_r+0x6e>
8000ec9e:	a1 a9       	sbr	r9,0x0
8000eca0:	91 19       	st.w	r8[0x4],r9
8000eca2:	48 d8       	lddpc	r8,8000ecd4 <_malloc_trim_r+0x94>
8000eca4:	70 09       	ld.w	r9,r8[0x0]
8000eca6:	48 d8       	lddpc	r8,8000ecd8 <_malloc_trim_r+0x98>
8000eca8:	f8 09 01 09 	sub	r9,r12,r9
8000ecac:	91 09       	st.w	r8[0x0],r9
8000ecae:	0e 9c       	mov	r12,r7
8000ecb0:	e0 a0 05 6f 	rcall	8000f78e <__malloc_unlock>
8000ecb4:	d8 2a       	popm	r4-r7,pc,r12=0
8000ecb6:	68 28       	ld.w	r8,r4[0x8]
8000ecb8:	0a 16       	sub	r6,r5
8000ecba:	a1 a6       	sbr	r6,0x0
8000ecbc:	91 16       	st.w	r8[0x4],r6
8000ecbe:	48 78       	lddpc	r8,8000ecd8 <_malloc_trim_r+0x98>
8000ecc0:	70 09       	ld.w	r9,r8[0x0]
8000ecc2:	0a 19       	sub	r9,r5
8000ecc4:	0e 9c       	mov	r12,r7
8000ecc6:	91 09       	st.w	r8[0x0],r9
8000ecc8:	e0 a0 05 63 	rcall	8000f78e <__malloc_unlock>
8000eccc:	da 2a       	popm	r4-r7,pc,r12=1
8000ecce:	d7 03       	nop
8000ecd0:	00 00       	add	r0,r0
8000ecd2:	01 c8       	ld.ub	r8,r0[0x4]
8000ecd4:	00 00       	add	r0,r0
8000ecd6:	05 d4       	ld.ub	r4,r2[0x5]
8000ecd8:	00 00       	add	r0,r0
8000ecda:	0e 44       	or	r4,r7

8000ecdc <_free_r>:
8000ecdc:	d4 21       	pushm	r4-r7,lr
8000ecde:	16 96       	mov	r6,r11
8000ece0:	18 97       	mov	r7,r12
8000ece2:	58 0b       	cp.w	r11,0
8000ece4:	e0 80 00 c2 	breq	8000ee68 <_free_r+0x18c>
8000ece8:	e0 a0 05 52 	rcall	8000f78c <__malloc_lock>
8000ecec:	20 86       	sub	r6,8
8000ecee:	4c ca       	lddpc	r10,8000ee1c <_free_r+0x140>
8000ecf0:	6c 18       	ld.w	r8,r6[0x4]
8000ecf2:	74 2e       	ld.w	lr,r10[0x8]
8000ecf4:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000ecf8:	a1 c8       	cbr	r8,0x0
8000ecfa:	ec 08 00 09 	add	r9,r6,r8
8000ecfe:	72 1b       	ld.w	r11,r9[0x4]
8000ed00:	e0 1b ff fc 	andl	r11,0xfffc
8000ed04:	1c 39       	cp.w	r9,lr
8000ed06:	c1 c1       	brne	8000ed3e <_free_r+0x62>
8000ed08:	f6 08 00 08 	add	r8,r11,r8
8000ed0c:	58 0c       	cp.w	r12,0
8000ed0e:	c0 81       	brne	8000ed1e <_free_r+0x42>
8000ed10:	6c 09       	ld.w	r9,r6[0x0]
8000ed12:	12 16       	sub	r6,r9
8000ed14:	12 08       	add	r8,r9
8000ed16:	6c 3b       	ld.w	r11,r6[0xc]
8000ed18:	6c 29       	ld.w	r9,r6[0x8]
8000ed1a:	97 29       	st.w	r11[0x8],r9
8000ed1c:	93 3b       	st.w	r9[0xc],r11
8000ed1e:	10 99       	mov	r9,r8
8000ed20:	95 26       	st.w	r10[0x8],r6
8000ed22:	a1 a9       	sbr	r9,0x0
8000ed24:	8d 19       	st.w	r6[0x4],r9
8000ed26:	4b f9       	lddpc	r9,8000ee20 <_free_r+0x144>
8000ed28:	72 09       	ld.w	r9,r9[0x0]
8000ed2a:	12 38       	cp.w	r8,r9
8000ed2c:	c0 53       	brcs	8000ed36 <_free_r+0x5a>
8000ed2e:	4b e8       	lddpc	r8,8000ee24 <_free_r+0x148>
8000ed30:	0e 9c       	mov	r12,r7
8000ed32:	70 0b       	ld.w	r11,r8[0x0]
8000ed34:	c8 6f       	rcall	8000ec40 <_malloc_trim_r>
8000ed36:	0e 9c       	mov	r12,r7
8000ed38:	e0 a0 05 2b 	rcall	8000f78e <__malloc_unlock>
8000ed3c:	d8 22       	popm	r4-r7,pc
8000ed3e:	93 1b       	st.w	r9[0x4],r11
8000ed40:	58 0c       	cp.w	r12,0
8000ed42:	c0 30       	breq	8000ed48 <_free_r+0x6c>
8000ed44:	30 0c       	mov	r12,0
8000ed46:	c1 08       	rjmp	8000ed66 <_free_r+0x8a>
8000ed48:	6c 0e       	ld.w	lr,r6[0x0]
8000ed4a:	f4 c5 ff f8 	sub	r5,r10,-8
8000ed4e:	1c 16       	sub	r6,lr
8000ed50:	1c 08       	add	r8,lr
8000ed52:	6c 2e       	ld.w	lr,r6[0x8]
8000ed54:	0a 3e       	cp.w	lr,r5
8000ed56:	f9 bc 00 01 	moveq	r12,1
8000ed5a:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000ed5e:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000ed62:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000ed66:	f2 0b 00 0e 	add	lr,r9,r11
8000ed6a:	7c 1e       	ld.w	lr,lr[0x4]
8000ed6c:	ed be 00 00 	bld	lr,0x0
8000ed70:	c1 30       	breq	8000ed96 <_free_r+0xba>
8000ed72:	16 08       	add	r8,r11
8000ed74:	58 0c       	cp.w	r12,0
8000ed76:	c0 c1       	brne	8000ed8e <_free_r+0xb2>
8000ed78:	4a 9e       	lddpc	lr,8000ee1c <_free_r+0x140>
8000ed7a:	72 2b       	ld.w	r11,r9[0x8]
8000ed7c:	2f 8e       	sub	lr,-8
8000ed7e:	1c 3b       	cp.w	r11,lr
8000ed80:	c0 71       	brne	8000ed8e <_free_r+0xb2>
8000ed82:	97 36       	st.w	r11[0xc],r6
8000ed84:	97 26       	st.w	r11[0x8],r6
8000ed86:	8d 2b       	st.w	r6[0x8],r11
8000ed88:	8d 3b       	st.w	r6[0xc],r11
8000ed8a:	30 1c       	mov	r12,1
8000ed8c:	c0 58       	rjmp	8000ed96 <_free_r+0xba>
8000ed8e:	72 2b       	ld.w	r11,r9[0x8]
8000ed90:	72 39       	ld.w	r9,r9[0xc]
8000ed92:	93 2b       	st.w	r9[0x8],r11
8000ed94:	97 39       	st.w	r11[0xc],r9
8000ed96:	10 99       	mov	r9,r8
8000ed98:	ec 08 09 08 	st.w	r6[r8],r8
8000ed9c:	a1 a9       	sbr	r9,0x0
8000ed9e:	8d 19       	st.w	r6[0x4],r9
8000eda0:	58 0c       	cp.w	r12,0
8000eda2:	c6 01       	brne	8000ee62 <_free_r+0x186>
8000eda4:	e0 48 01 ff 	cp.w	r8,511
8000eda8:	e0 8b 00 13 	brhi	8000edce <_free_r+0xf2>
8000edac:	a3 98       	lsr	r8,0x3
8000edae:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000edb2:	72 2b       	ld.w	r11,r9[0x8]
8000edb4:	8d 39       	st.w	r6[0xc],r9
8000edb6:	8d 2b       	st.w	r6[0x8],r11
8000edb8:	97 36       	st.w	r11[0xc],r6
8000edba:	93 26       	st.w	r9[0x8],r6
8000edbc:	a3 48       	asr	r8,0x2
8000edbe:	74 19       	ld.w	r9,r10[0x4]
8000edc0:	30 1b       	mov	r11,1
8000edc2:	f6 08 09 48 	lsl	r8,r11,r8
8000edc6:	f3 e8 10 08 	or	r8,r9,r8
8000edca:	95 18       	st.w	r10[0x4],r8
8000edcc:	c4 b8       	rjmp	8000ee62 <_free_r+0x186>
8000edce:	f0 09 16 09 	lsr	r9,r8,0x9
8000edd2:	58 49       	cp.w	r9,4
8000edd4:	e0 8b 00 06 	brhi	8000ede0 <_free_r+0x104>
8000edd8:	f0 0b 16 06 	lsr	r11,r8,0x6
8000eddc:	2c 8b       	sub	r11,-56
8000edde:	c2 68       	rjmp	8000ee2a <_free_r+0x14e>
8000ede0:	59 49       	cp.w	r9,20
8000ede2:	e0 8b 00 05 	brhi	8000edec <_free_r+0x110>
8000ede6:	f2 cb ff a5 	sub	r11,r9,-91
8000edea:	c2 08       	rjmp	8000ee2a <_free_r+0x14e>
8000edec:	e0 49 00 54 	cp.w	r9,84
8000edf0:	e0 8b 00 06 	brhi	8000edfc <_free_r+0x120>
8000edf4:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000edf8:	29 2b       	sub	r11,-110
8000edfa:	c1 88       	rjmp	8000ee2a <_free_r+0x14e>
8000edfc:	e0 49 01 54 	cp.w	r9,340
8000ee00:	e0 8b 00 06 	brhi	8000ee0c <_free_r+0x130>
8000ee04:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000ee08:	28 9b       	sub	r11,-119
8000ee0a:	c1 08       	rjmp	8000ee2a <_free_r+0x14e>
8000ee0c:	f0 0b 16 12 	lsr	r11,r8,0x12
8000ee10:	e0 49 05 54 	cp.w	r9,1364
8000ee14:	e0 88 00 0a 	brls	8000ee28 <_free_r+0x14c>
8000ee18:	37 eb       	mov	r11,126
8000ee1a:	c0 88       	rjmp	8000ee2a <_free_r+0x14e>
8000ee1c:	00 00       	add	r0,r0
8000ee1e:	01 c8       	ld.ub	r8,r0[0x4]
8000ee20:	00 00       	add	r0,r0
8000ee22:	05 d0       	ld.ub	r0,r2[0x5]
8000ee24:	00 00       	add	r0,r0
8000ee26:	0e 40       	or	r0,r7
8000ee28:	28 4b       	sub	r11,-124
8000ee2a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000ee2e:	78 29       	ld.w	r9,r12[0x8]
8000ee30:	18 39       	cp.w	r9,r12
8000ee32:	c0 e1       	brne	8000ee4e <_free_r+0x172>
8000ee34:	74 18       	ld.w	r8,r10[0x4]
8000ee36:	a3 4b       	asr	r11,0x2
8000ee38:	30 1c       	mov	r12,1
8000ee3a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000ee3e:	f1 eb 10 0b 	or	r11,r8,r11
8000ee42:	12 98       	mov	r8,r9
8000ee44:	95 1b       	st.w	r10[0x4],r11
8000ee46:	c0 a8       	rjmp	8000ee5a <_free_r+0x17e>
8000ee48:	72 29       	ld.w	r9,r9[0x8]
8000ee4a:	18 39       	cp.w	r9,r12
8000ee4c:	c0 60       	breq	8000ee58 <_free_r+0x17c>
8000ee4e:	72 1a       	ld.w	r10,r9[0x4]
8000ee50:	e0 1a ff fc 	andl	r10,0xfffc
8000ee54:	14 38       	cp.w	r8,r10
8000ee56:	cf 93       	brcs	8000ee48 <_free_r+0x16c>
8000ee58:	72 38       	ld.w	r8,r9[0xc]
8000ee5a:	8d 38       	st.w	r6[0xc],r8
8000ee5c:	8d 29       	st.w	r6[0x8],r9
8000ee5e:	93 36       	st.w	r9[0xc],r6
8000ee60:	91 26       	st.w	r8[0x8],r6
8000ee62:	0e 9c       	mov	r12,r7
8000ee64:	e0 a0 04 95 	rcall	8000f78e <__malloc_unlock>
8000ee68:	d8 22       	popm	r4-r7,pc
8000ee6a:	d7 03       	nop

8000ee6c <__sfvwrite_r>:
8000ee6c:	d4 31       	pushm	r0-r7,lr
8000ee6e:	20 3d       	sub	sp,12
8000ee70:	14 94       	mov	r4,r10
8000ee72:	18 95       	mov	r5,r12
8000ee74:	16 97       	mov	r7,r11
8000ee76:	74 28       	ld.w	r8,r10[0x8]
8000ee78:	58 08       	cp.w	r8,0
8000ee7a:	e0 80 01 48 	breq	8000f10a <__sfvwrite_r+0x29e>
8000ee7e:	96 68       	ld.sh	r8,r11[0xc]
8000ee80:	ed b8 00 03 	bld	r8,0x3
8000ee84:	c0 41       	brne	8000ee8c <__sfvwrite_r+0x20>
8000ee86:	76 48       	ld.w	r8,r11[0x10]
8000ee88:	58 08       	cp.w	r8,0
8000ee8a:	c0 c1       	brne	8000eea2 <__sfvwrite_r+0x36>
8000ee8c:	0e 9b       	mov	r11,r7
8000ee8e:	0a 9c       	mov	r12,r5
8000ee90:	fe b0 f6 4c 	rcall	8000db28 <__swsetup_r>
8000ee94:	c0 70       	breq	8000eea2 <__sfvwrite_r+0x36>
8000ee96:	8e 68       	ld.sh	r8,r7[0xc]
8000ee98:	a7 a8       	sbr	r8,0x6
8000ee9a:	ae 68       	st.h	r7[0xc],r8
8000ee9c:	30 98       	mov	r8,9
8000ee9e:	8b 38       	st.w	r5[0xc],r8
8000eea0:	c3 39       	rjmp	8000f106 <__sfvwrite_r+0x29a>
8000eea2:	8e 63       	ld.sh	r3,r7[0xc]
8000eea4:	68 00       	ld.w	r0,r4[0x0]
8000eea6:	06 96       	mov	r6,r3
8000eea8:	e2 16 00 02 	andl	r6,0x2,COH
8000eeac:	c2 10       	breq	8000eeee <__sfvwrite_r+0x82>
8000eeae:	30 03       	mov	r3,0
8000eeb0:	e0 62 04 00 	mov	r2,1024
8000eeb4:	06 96       	mov	r6,r3
8000eeb6:	c0 48       	rjmp	8000eebe <__sfvwrite_r+0x52>
8000eeb8:	60 03       	ld.w	r3,r0[0x0]
8000eeba:	60 16       	ld.w	r6,r0[0x4]
8000eebc:	2f 80       	sub	r0,-8
8000eebe:	58 06       	cp.w	r6,0
8000eec0:	cf c0       	breq	8000eeb8 <__sfvwrite_r+0x4c>
8000eec2:	e0 46 04 00 	cp.w	r6,1024
8000eec6:	ec 09 17 80 	movls	r9,r6
8000eeca:	e4 09 17 b0 	movhi	r9,r2
8000eece:	06 9a       	mov	r10,r3
8000eed0:	6e a8       	ld.w	r8,r7[0x28]
8000eed2:	6e 8b       	ld.w	r11,r7[0x20]
8000eed4:	0a 9c       	mov	r12,r5
8000eed6:	5d 18       	icall	r8
8000eed8:	18 16       	sub	r6,r12
8000eeda:	58 0c       	cp.w	r12,0
8000eedc:	e0 8a 01 12 	brle	8000f100 <__sfvwrite_r+0x294>
8000eee0:	68 28       	ld.w	r8,r4[0x8]
8000eee2:	18 18       	sub	r8,r12
8000eee4:	89 28       	st.w	r4[0x8],r8
8000eee6:	e0 80 01 12 	breq	8000f10a <__sfvwrite_r+0x29e>
8000eeea:	18 03       	add	r3,r12
8000eeec:	ce 9b       	rjmp	8000eebe <__sfvwrite_r+0x52>
8000eeee:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000eef2:	c0 70       	breq	8000ef00 <__sfvwrite_r+0x94>
8000eef4:	50 06       	stdsp	sp[0x0],r6
8000eef6:	0c 93       	mov	r3,r6
8000eef8:	0c 91       	mov	r1,r6
8000eefa:	50 15       	stdsp	sp[0x4],r5
8000eefc:	08 92       	mov	r2,r4
8000eefe:	c9 e8       	rjmp	8000f03a <__sfvwrite_r+0x1ce>
8000ef00:	06 96       	mov	r6,r3
8000ef02:	08 91       	mov	r1,r4
8000ef04:	c0 48       	rjmp	8000ef0c <__sfvwrite_r+0xa0>
8000ef06:	60 03       	ld.w	r3,r0[0x0]
8000ef08:	60 16       	ld.w	r6,r0[0x4]
8000ef0a:	2f 80       	sub	r0,-8
8000ef0c:	58 06       	cp.w	r6,0
8000ef0e:	cf c0       	breq	8000ef06 <__sfvwrite_r+0x9a>
8000ef10:	8e 68       	ld.sh	r8,r7[0xc]
8000ef12:	6e 24       	ld.w	r4,r7[0x8]
8000ef14:	10 99       	mov	r9,r8
8000ef16:	e2 19 02 00 	andl	r9,0x200,COH
8000ef1a:	c5 50       	breq	8000efc4 <__sfvwrite_r+0x158>
8000ef1c:	08 36       	cp.w	r6,r4
8000ef1e:	c4 33       	brcs	8000efa4 <__sfvwrite_r+0x138>
8000ef20:	10 99       	mov	r9,r8
8000ef22:	e2 19 04 80 	andl	r9,0x480,COH
8000ef26:	c3 f0       	breq	8000efa4 <__sfvwrite_r+0x138>
8000ef28:	6e 4b       	ld.w	r11,r7[0x10]
8000ef2a:	6e 09       	ld.w	r9,r7[0x0]
8000ef2c:	16 19       	sub	r9,r11
8000ef2e:	50 09       	stdsp	sp[0x0],r9
8000ef30:	6e 59       	ld.w	r9,r7[0x14]
8000ef32:	10 9c       	mov	r12,r8
8000ef34:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000ef38:	30 28       	mov	r8,2
8000ef3a:	f4 08 0c 08 	divs	r8,r10,r8
8000ef3e:	fa e9 00 04 	st.d	sp[4],r8
8000ef42:	10 94       	mov	r4,r8
8000ef44:	40 09       	lddsp	r9,sp[0x0]
8000ef46:	e2 1c 04 00 	andl	r12,0x400,COH
8000ef4a:	2f f9       	sub	r9,-1
8000ef4c:	0c 09       	add	r9,r6
8000ef4e:	12 38       	cp.w	r8,r9
8000ef50:	f2 04 17 30 	movlo	r4,r9
8000ef54:	58 0c       	cp.w	r12,0
8000ef56:	c1 00       	breq	8000ef76 <__sfvwrite_r+0x10a>
8000ef58:	08 9b       	mov	r11,r4
8000ef5a:	0a 9c       	mov	r12,r5
8000ef5c:	ca 4d       	rcall	8000f2a4 <_malloc_r>
8000ef5e:	18 92       	mov	r2,r12
8000ef60:	c1 40       	breq	8000ef88 <__sfvwrite_r+0x11c>
8000ef62:	40 0a       	lddsp	r10,sp[0x0]
8000ef64:	6e 4b       	ld.w	r11,r7[0x10]
8000ef66:	fe b0 d7 f6 	rcall	80009f52 <memcpy>
8000ef6a:	8e 68       	ld.sh	r8,r7[0xc]
8000ef6c:	e0 18 fb 7f 	andl	r8,0xfb7f
8000ef70:	a7 b8       	sbr	r8,0x7
8000ef72:	ae 68       	st.h	r7[0xc],r8
8000ef74:	c0 d8       	rjmp	8000ef8e <__sfvwrite_r+0x122>
8000ef76:	08 9a       	mov	r10,r4
8000ef78:	0a 9c       	mov	r12,r5
8000ef7a:	e0 a0 08 0d 	rcall	8000ff94 <_realloc_r>
8000ef7e:	18 92       	mov	r2,r12
8000ef80:	c0 71       	brne	8000ef8e <__sfvwrite_r+0x122>
8000ef82:	6e 4b       	ld.w	r11,r7[0x10]
8000ef84:	0a 9c       	mov	r12,r5
8000ef86:	ca be       	rcall	8000ecdc <_free_r>
8000ef88:	30 c8       	mov	r8,12
8000ef8a:	8b 38       	st.w	r5[0xc],r8
8000ef8c:	cb a8       	rjmp	8000f100 <__sfvwrite_r+0x294>
8000ef8e:	40 0a       	lddsp	r10,sp[0x0]
8000ef90:	40 09       	lddsp	r9,sp[0x0]
8000ef92:	e8 0a 01 0a 	sub	r10,r4,r10
8000ef96:	e4 09 00 08 	add	r8,r2,r9
8000ef9a:	8f 54       	st.w	r7[0x14],r4
8000ef9c:	8f 2a       	st.w	r7[0x8],r10
8000ef9e:	8f 08       	st.w	r7[0x0],r8
8000efa0:	8f 42       	st.w	r7[0x10],r2
8000efa2:	0c 94       	mov	r4,r6
8000efa4:	08 36       	cp.w	r6,r4
8000efa6:	ec 04 17 30 	movlo	r4,r6
8000efaa:	06 9b       	mov	r11,r3
8000efac:	08 9a       	mov	r10,r4
8000efae:	6e 0c       	ld.w	r12,r7[0x0]
8000efb0:	e0 a0 03 cf 	rcall	8000f74e <memmove>
8000efb4:	6e 08       	ld.w	r8,r7[0x0]
8000efb6:	08 08       	add	r8,r4
8000efb8:	8f 08       	st.w	r7[0x0],r8
8000efba:	6e 28       	ld.w	r8,r7[0x8]
8000efbc:	08 18       	sub	r8,r4
8000efbe:	0c 94       	mov	r4,r6
8000efc0:	8f 28       	st.w	r7[0x8],r8
8000efc2:	c3 08       	rjmp	8000f022 <__sfvwrite_r+0x1b6>
8000efc4:	08 36       	cp.w	r6,r4
8000efc6:	5f ba       	srhi	r10
8000efc8:	6e 0c       	ld.w	r12,r7[0x0]
8000efca:	6e 48       	ld.w	r8,r7[0x10]
8000efcc:	10 3c       	cp.w	r12,r8
8000efce:	5f b8       	srhi	r8
8000efd0:	f5 e8 00 08 	and	r8,r10,r8
8000efd4:	f2 08 18 00 	cp.b	r8,r9
8000efd8:	c0 e0       	breq	8000eff4 <__sfvwrite_r+0x188>
8000efda:	06 9b       	mov	r11,r3
8000efdc:	08 9a       	mov	r10,r4
8000efde:	e0 a0 03 b8 	rcall	8000f74e <memmove>
8000efe2:	6e 08       	ld.w	r8,r7[0x0]
8000efe4:	08 08       	add	r8,r4
8000efe6:	0e 9b       	mov	r11,r7
8000efe8:	8f 08       	st.w	r7[0x0],r8
8000efea:	0a 9c       	mov	r12,r5
8000efec:	fe b0 fc 8c 	rcall	8000e904 <_fflush_r>
8000eff0:	c1 90       	breq	8000f022 <__sfvwrite_r+0x1b6>
8000eff2:	c8 78       	rjmp	8000f100 <__sfvwrite_r+0x294>
8000eff4:	6e 59       	ld.w	r9,r7[0x14]
8000eff6:	12 36       	cp.w	r6,r9
8000eff8:	c0 a3       	brcs	8000f00c <__sfvwrite_r+0x1a0>
8000effa:	6e a8       	ld.w	r8,r7[0x28]
8000effc:	06 9a       	mov	r10,r3
8000effe:	6e 8b       	ld.w	r11,r7[0x20]
8000f000:	0a 9c       	mov	r12,r5
8000f002:	5d 18       	icall	r8
8000f004:	18 94       	mov	r4,r12
8000f006:	e0 89 00 0e 	brgt	8000f022 <__sfvwrite_r+0x1b6>
8000f00a:	c7 b8       	rjmp	8000f100 <__sfvwrite_r+0x294>
8000f00c:	0c 9a       	mov	r10,r6
8000f00e:	06 9b       	mov	r11,r3
8000f010:	e0 a0 03 9f 	rcall	8000f74e <memmove>
8000f014:	6e 08       	ld.w	r8,r7[0x0]
8000f016:	0c 08       	add	r8,r6
8000f018:	0c 94       	mov	r4,r6
8000f01a:	8f 08       	st.w	r7[0x0],r8
8000f01c:	6e 28       	ld.w	r8,r7[0x8]
8000f01e:	0c 18       	sub	r8,r6
8000f020:	8f 28       	st.w	r7[0x8],r8
8000f022:	62 28       	ld.w	r8,r1[0x8]
8000f024:	08 18       	sub	r8,r4
8000f026:	83 28       	st.w	r1[0x8],r8
8000f028:	c7 10       	breq	8000f10a <__sfvwrite_r+0x29e>
8000f02a:	08 16       	sub	r6,r4
8000f02c:	08 03       	add	r3,r4
8000f02e:	c6 fb       	rjmp	8000ef0c <__sfvwrite_r+0xa0>
8000f030:	60 03       	ld.w	r3,r0[0x0]
8000f032:	60 11       	ld.w	r1,r0[0x4]
8000f034:	30 08       	mov	r8,0
8000f036:	2f 80       	sub	r0,-8
8000f038:	50 08       	stdsp	sp[0x0],r8
8000f03a:	58 01       	cp.w	r1,0
8000f03c:	cf a0       	breq	8000f030 <__sfvwrite_r+0x1c4>
8000f03e:	40 0a       	lddsp	r10,sp[0x0]
8000f040:	58 0a       	cp.w	r10,0
8000f042:	c1 81       	brne	8000f072 <__sfvwrite_r+0x206>
8000f044:	02 9a       	mov	r10,r1
8000f046:	30 ab       	mov	r11,10
8000f048:	06 9c       	mov	r12,r3
8000f04a:	e0 a0 03 77 	rcall	8000f738 <memchr>
8000f04e:	f9 b8 01 01 	movne	r8,1
8000f052:	f9 d8 e1 06 	addne	r6,r12,r8
8000f056:	ed d3 e1 16 	subne	r6,r6,r3
8000f05a:	f9 b9 01 01 	movne	r9,1
8000f05e:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000f062:	f9 b8 00 01 	moveq	r8,1
8000f066:	e3 d8 e0 06 	addeq	r6,r1,r8
8000f06a:	f9 b8 00 01 	moveq	r8,1
8000f06e:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000f072:	02 36       	cp.w	r6,r1
8000f074:	ec 04 17 80 	movls	r4,r6
8000f078:	e2 04 17 b0 	movhi	r4,r1
8000f07c:	6e 59       	ld.w	r9,r7[0x14]
8000f07e:	6e 25       	ld.w	r5,r7[0x8]
8000f080:	f2 05 00 05 	add	r5,r9,r5
8000f084:	0a 34       	cp.w	r4,r5
8000f086:	5f 9a       	srgt	r10
8000f088:	6e 0c       	ld.w	r12,r7[0x0]
8000f08a:	6e 48       	ld.w	r8,r7[0x10]
8000f08c:	10 3c       	cp.w	r12,r8
8000f08e:	5f b8       	srhi	r8
8000f090:	f5 e8 00 08 	and	r8,r10,r8
8000f094:	30 0a       	mov	r10,0
8000f096:	f4 08 18 00 	cp.b	r8,r10
8000f09a:	c0 e0       	breq	8000f0b6 <__sfvwrite_r+0x24a>
8000f09c:	06 9b       	mov	r11,r3
8000f09e:	0a 9a       	mov	r10,r5
8000f0a0:	e0 a0 03 57 	rcall	8000f74e <memmove>
8000f0a4:	6e 08       	ld.w	r8,r7[0x0]
8000f0a6:	0a 08       	add	r8,r5
8000f0a8:	0e 9b       	mov	r11,r7
8000f0aa:	8f 08       	st.w	r7[0x0],r8
8000f0ac:	40 1c       	lddsp	r12,sp[0x4]
8000f0ae:	fe b0 fc 2b 	rcall	8000e904 <_fflush_r>
8000f0b2:	c1 80       	breq	8000f0e2 <__sfvwrite_r+0x276>
8000f0b4:	c2 68       	rjmp	8000f100 <__sfvwrite_r+0x294>
8000f0b6:	12 34       	cp.w	r4,r9
8000f0b8:	c0 a5       	brlt	8000f0cc <__sfvwrite_r+0x260>
8000f0ba:	6e a8       	ld.w	r8,r7[0x28]
8000f0bc:	06 9a       	mov	r10,r3
8000f0be:	6e 8b       	ld.w	r11,r7[0x20]
8000f0c0:	40 1c       	lddsp	r12,sp[0x4]
8000f0c2:	5d 18       	icall	r8
8000f0c4:	18 95       	mov	r5,r12
8000f0c6:	e0 89 00 0e 	brgt	8000f0e2 <__sfvwrite_r+0x276>
8000f0ca:	c1 b8       	rjmp	8000f100 <__sfvwrite_r+0x294>
8000f0cc:	08 9a       	mov	r10,r4
8000f0ce:	06 9b       	mov	r11,r3
8000f0d0:	e0 a0 03 3f 	rcall	8000f74e <memmove>
8000f0d4:	6e 08       	ld.w	r8,r7[0x0]
8000f0d6:	08 08       	add	r8,r4
8000f0d8:	08 95       	mov	r5,r4
8000f0da:	8f 08       	st.w	r7[0x0],r8
8000f0dc:	6e 28       	ld.w	r8,r7[0x8]
8000f0de:	08 18       	sub	r8,r4
8000f0e0:	8f 28       	st.w	r7[0x8],r8
8000f0e2:	0a 16       	sub	r6,r5
8000f0e4:	c0 71       	brne	8000f0f2 <__sfvwrite_r+0x286>
8000f0e6:	0e 9b       	mov	r11,r7
8000f0e8:	40 1c       	lddsp	r12,sp[0x4]
8000f0ea:	fe b0 fc 0d 	rcall	8000e904 <_fflush_r>
8000f0ee:	c0 91       	brne	8000f100 <__sfvwrite_r+0x294>
8000f0f0:	50 06       	stdsp	sp[0x0],r6
8000f0f2:	64 28       	ld.w	r8,r2[0x8]
8000f0f4:	0a 18       	sub	r8,r5
8000f0f6:	85 28       	st.w	r2[0x8],r8
8000f0f8:	c0 90       	breq	8000f10a <__sfvwrite_r+0x29e>
8000f0fa:	0a 11       	sub	r1,r5
8000f0fc:	0a 03       	add	r3,r5
8000f0fe:	c9 eb       	rjmp	8000f03a <__sfvwrite_r+0x1ce>
8000f100:	8e 68       	ld.sh	r8,r7[0xc]
8000f102:	a7 a8       	sbr	r8,0x6
8000f104:	ae 68       	st.h	r7[0xc],r8
8000f106:	3f fc       	mov	r12,-1
8000f108:	c0 28       	rjmp	8000f10c <__sfvwrite_r+0x2a0>
8000f10a:	30 0c       	mov	r12,0
8000f10c:	2f dd       	sub	sp,-12
8000f10e:	d8 32       	popm	r0-r7,pc

8000f110 <_fwalk_reent>:
8000f110:	d4 31       	pushm	r0-r7,lr
8000f112:	30 05       	mov	r5,0
8000f114:	18 93       	mov	r3,r12
8000f116:	16 90       	mov	r0,r11
8000f118:	0a 91       	mov	r1,r5
8000f11a:	fe b0 fc 91 	rcall	8000ea3c <__sfp_lock_acquire>
8000f11e:	3f f2       	mov	r2,-1
8000f120:	e6 c7 ff 28 	sub	r7,r3,-216
8000f124:	c1 78       	rjmp	8000f152 <_fwalk_reent+0x42>
8000f126:	6e 26       	ld.w	r6,r7[0x8]
8000f128:	6e 14       	ld.w	r4,r7[0x4]
8000f12a:	2f 46       	sub	r6,-12
8000f12c:	c0 d8       	rjmp	8000f146 <_fwalk_reent+0x36>
8000f12e:	8c 08       	ld.sh	r8,r6[0x0]
8000f130:	e2 08 19 00 	cp.h	r8,r1
8000f134:	c0 80       	breq	8000f144 <_fwalk_reent+0x34>
8000f136:	8c 18       	ld.sh	r8,r6[0x2]
8000f138:	e4 08 19 00 	cp.h	r8,r2
8000f13c:	c0 40       	breq	8000f144 <_fwalk_reent+0x34>
8000f13e:	06 9c       	mov	r12,r3
8000f140:	5d 10       	icall	r0
8000f142:	18 45       	or	r5,r12
8000f144:	2a 46       	sub	r6,-92
8000f146:	20 14       	sub	r4,1
8000f148:	ec cb 00 0c 	sub	r11,r6,12
8000f14c:	58 04       	cp.w	r4,0
8000f14e:	cf 04       	brge	8000f12e <_fwalk_reent+0x1e>
8000f150:	6e 07       	ld.w	r7,r7[0x0]
8000f152:	58 07       	cp.w	r7,0
8000f154:	ce 91       	brne	8000f126 <_fwalk_reent+0x16>
8000f156:	fe b0 fc 74 	rcall	8000ea3e <__sfp_lock_release>
8000f15a:	0a 9c       	mov	r12,r5
8000f15c:	d8 32       	popm	r0-r7,pc
8000f15e:	d7 03       	nop

8000f160 <_fwalk>:
8000f160:	d4 31       	pushm	r0-r7,lr
8000f162:	30 05       	mov	r5,0
8000f164:	16 91       	mov	r1,r11
8000f166:	f8 c7 ff 28 	sub	r7,r12,-216
8000f16a:	0a 92       	mov	r2,r5
8000f16c:	fe b0 fc 68 	rcall	8000ea3c <__sfp_lock_acquire>
8000f170:	3f f3       	mov	r3,-1
8000f172:	c1 68       	rjmp	8000f19e <_fwalk+0x3e>
8000f174:	6e 26       	ld.w	r6,r7[0x8]
8000f176:	6e 14       	ld.w	r4,r7[0x4]
8000f178:	2f 46       	sub	r6,-12
8000f17a:	c0 c8       	rjmp	8000f192 <_fwalk+0x32>
8000f17c:	8c 08       	ld.sh	r8,r6[0x0]
8000f17e:	e4 08 19 00 	cp.h	r8,r2
8000f182:	c0 70       	breq	8000f190 <_fwalk+0x30>
8000f184:	8c 18       	ld.sh	r8,r6[0x2]
8000f186:	e6 08 19 00 	cp.h	r8,r3
8000f18a:	c0 30       	breq	8000f190 <_fwalk+0x30>
8000f18c:	5d 11       	icall	r1
8000f18e:	18 45       	or	r5,r12
8000f190:	2a 46       	sub	r6,-92
8000f192:	20 14       	sub	r4,1
8000f194:	ec cc 00 0c 	sub	r12,r6,12
8000f198:	58 04       	cp.w	r4,0
8000f19a:	cf 14       	brge	8000f17c <_fwalk+0x1c>
8000f19c:	6e 07       	ld.w	r7,r7[0x0]
8000f19e:	58 07       	cp.w	r7,0
8000f1a0:	ce a1       	brne	8000f174 <_fwalk+0x14>
8000f1a2:	fe b0 fc 4e 	rcall	8000ea3e <__sfp_lock_release>
8000f1a6:	0a 9c       	mov	r12,r5
8000f1a8:	d8 32       	popm	r0-r7,pc
8000f1aa:	d7 03       	nop

8000f1ac <iswspace>:
8000f1ac:	e0 4c 00 ff 	cp.w	r12,255
8000f1b0:	e0 88 00 03 	brls	8000f1b6 <iswspace+0xa>
8000f1b4:	5e fd       	retal	0
8000f1b6:	48 48       	lddpc	r8,8000f1c4 <iswspace+0x18>
8000f1b8:	70 08       	ld.w	r8,r8[0x0]
8000f1ba:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
8000f1be:	e2 1c 00 08 	andl	r12,0x8,COH
8000f1c2:	5e fc       	retal	r12
8000f1c4:	00 00       	add	r0,r0
8000f1c6:	00 cc       	st.b	r0++,r12

8000f1c8 <_localeconv_r>:
8000f1c8:	48 1c       	lddpc	r12,8000f1cc <_localeconv_r+0x4>
8000f1ca:	5e fc       	retal	r12
8000f1cc:	80 01       	ld.sh	r1,r0[0x0]
8000f1ce:	42 e0       	lddsp	r0,sp[0xb8]

8000f1d0 <__smakebuf_r>:
8000f1d0:	d4 21       	pushm	r4-r7,lr
8000f1d2:	20 fd       	sub	sp,60
8000f1d4:	96 68       	ld.sh	r8,r11[0xc]
8000f1d6:	16 97       	mov	r7,r11
8000f1d8:	18 96       	mov	r6,r12
8000f1da:	e2 18 00 02 	andl	r8,0x2,COH
8000f1de:	c3 c1       	brne	8000f256 <__smakebuf_r+0x86>
8000f1e0:	96 7b       	ld.sh	r11,r11[0xe]
8000f1e2:	f0 0b 19 00 	cp.h	r11,r8
8000f1e6:	c0 55       	brlt	8000f1f0 <__smakebuf_r+0x20>
8000f1e8:	1a 9a       	mov	r10,sp
8000f1ea:	e0 a0 14 4d 	rcall	80011a84 <_fstat_r>
8000f1ee:	c0 f4       	brge	8000f20c <__smakebuf_r+0x3c>
8000f1f0:	8e 65       	ld.sh	r5,r7[0xc]
8000f1f2:	0a 98       	mov	r8,r5
8000f1f4:	ab b8       	sbr	r8,0xb
8000f1f6:	e2 15 00 80 	andl	r5,0x80,COH
8000f1fa:	ae 68       	st.h	r7[0xc],r8
8000f1fc:	30 04       	mov	r4,0
8000f1fe:	e0 68 04 00 	mov	r8,1024
8000f202:	f9 b5 01 40 	movne	r5,64
8000f206:	f0 05 17 00 	moveq	r5,r8
8000f20a:	c1 c8       	rjmp	8000f242 <__smakebuf_r+0x72>
8000f20c:	40 18       	lddsp	r8,sp[0x4]
8000f20e:	e2 18 f0 00 	andl	r8,0xf000,COH
8000f212:	e0 48 20 00 	cp.w	r8,8192
8000f216:	5f 04       	sreq	r4
8000f218:	e0 48 80 00 	cp.w	r8,32768
8000f21c:	c0 e1       	brne	8000f238 <__smakebuf_r+0x68>
8000f21e:	6e b9       	ld.w	r9,r7[0x2c]
8000f220:	fe c8 ed a4 	sub	r8,pc,-4700
8000f224:	10 39       	cp.w	r9,r8
8000f226:	c0 91       	brne	8000f238 <__smakebuf_r+0x68>
8000f228:	8e 68       	ld.sh	r8,r7[0xc]
8000f22a:	e0 65 04 00 	mov	r5,1024
8000f22e:	ab a8       	sbr	r8,0xa
8000f230:	ef 45 00 50 	st.w	r7[80],r5
8000f234:	ae 68       	st.h	r7[0xc],r8
8000f236:	c0 68       	rjmp	8000f242 <__smakebuf_r+0x72>
8000f238:	8e 68       	ld.sh	r8,r7[0xc]
8000f23a:	e0 65 04 00 	mov	r5,1024
8000f23e:	ab b8       	sbr	r8,0xb
8000f240:	ae 68       	st.h	r7[0xc],r8
8000f242:	0a 9b       	mov	r11,r5
8000f244:	0c 9c       	mov	r12,r6
8000f246:	c2 fc       	rcall	8000f2a4 <_malloc_r>
8000f248:	8e 68       	ld.sh	r8,r7[0xc]
8000f24a:	c0 d1       	brne	8000f264 <__smakebuf_r+0x94>
8000f24c:	ed b8 00 09 	bld	r8,0x9
8000f250:	c1 f0       	breq	8000f28e <__smakebuf_r+0xbe>
8000f252:	a1 b8       	sbr	r8,0x1
8000f254:	ae 68       	st.h	r7[0xc],r8
8000f256:	ee c8 ff b9 	sub	r8,r7,-71
8000f25a:	8f 48       	st.w	r7[0x10],r8
8000f25c:	8f 08       	st.w	r7[0x0],r8
8000f25e:	30 18       	mov	r8,1
8000f260:	8f 58       	st.w	r7[0x14],r8
8000f262:	c1 68       	rjmp	8000f28e <__smakebuf_r+0xbe>
8000f264:	a7 b8       	sbr	r8,0x7
8000f266:	8f 4c       	st.w	r7[0x10],r12
8000f268:	ae 68       	st.h	r7[0xc],r8
8000f26a:	8f 55       	st.w	r7[0x14],r5
8000f26c:	fe c8 08 2c 	sub	r8,pc,2092
8000f270:	8f 0c       	st.w	r7[0x0],r12
8000f272:	8d a8       	st.w	r6[0x28],r8
8000f274:	58 04       	cp.w	r4,0
8000f276:	c0 c0       	breq	8000f28e <__smakebuf_r+0xbe>
8000f278:	8e 7c       	ld.sh	r12,r7[0xe]
8000f27a:	e0 a0 12 49 	rcall	8001170c <isatty>
8000f27e:	ef f8 12 06 	ld.shne	r8,r7[0xc]
8000f282:	f9 b9 01 01 	movne	r9,1
8000f286:	f1 d9 e1 38 	orne	r8,r8,r9
8000f28a:	ef f8 1c 06 	st.hne	r7[0xc],r8
8000f28e:	2f 1d       	sub	sp,-60
8000f290:	d8 22       	popm	r4-r7,pc
8000f292:	d7 03       	nop

8000f294 <malloc>:
8000f294:	d4 01       	pushm	lr
8000f296:	48 38       	lddpc	r8,8000f2a0 <malloc+0xc>
8000f298:	18 9b       	mov	r11,r12
8000f29a:	70 0c       	ld.w	r12,r8[0x0]
8000f29c:	c0 4c       	rcall	8000f2a4 <_malloc_r>
8000f29e:	d8 02       	popm	pc
8000f2a0:	00 00       	add	r0,r0
8000f2a2:	01 c0       	ld.ub	r0,r0[0x4]

8000f2a4 <_malloc_r>:
8000f2a4:	d4 31       	pushm	r0-r7,lr
8000f2a6:	f6 c7 ff f5 	sub	r7,r11,-11
8000f2aa:	18 95       	mov	r5,r12
8000f2ac:	59 67       	cp.w	r7,22
8000f2ae:	f9 b7 08 10 	movls	r7,16
8000f2b2:	f9 b8 0b f8 	movhi	r8,-8
8000f2b6:	ef d8 eb 27 	andhi	r7,r7,r8
8000f2ba:	16 37       	cp.w	r7,r11
8000f2bc:	5f 38       	srlo	r8
8000f2be:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000f2c2:	c0 50       	breq	8000f2cc <_malloc_r+0x28>
8000f2c4:	30 c8       	mov	r8,12
8000f2c6:	99 38       	st.w	r12[0xc],r8
8000f2c8:	e0 8f 01 ef 	bral	8000f6a6 <_malloc_r+0x402>
8000f2cc:	e0 a0 02 60 	rcall	8000f78c <__malloc_lock>
8000f2d0:	e0 47 01 f7 	cp.w	r7,503
8000f2d4:	e0 8b 00 1c 	brhi	8000f30c <_malloc_r+0x68>
8000f2d8:	ee 03 16 03 	lsr	r3,r7,0x3
8000f2dc:	4c c8       	lddpc	r8,8000f40c <_malloc_r+0x168>
8000f2de:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000f2e2:	70 36       	ld.w	r6,r8[0xc]
8000f2e4:	10 36       	cp.w	r6,r8
8000f2e6:	c0 61       	brne	8000f2f2 <_malloc_r+0x4e>
8000f2e8:	ec c8 ff f8 	sub	r8,r6,-8
8000f2ec:	70 36       	ld.w	r6,r8[0xc]
8000f2ee:	10 36       	cp.w	r6,r8
8000f2f0:	c0 c0       	breq	8000f308 <_malloc_r+0x64>
8000f2f2:	6c 18       	ld.w	r8,r6[0x4]
8000f2f4:	e0 18 ff fc 	andl	r8,0xfffc
8000f2f8:	6c 3a       	ld.w	r10,r6[0xc]
8000f2fa:	ec 08 00 09 	add	r9,r6,r8
8000f2fe:	0a 9c       	mov	r12,r5
8000f300:	6c 28       	ld.w	r8,r6[0x8]
8000f302:	95 28       	st.w	r10[0x8],r8
8000f304:	91 3a       	st.w	r8[0xc],r10
8000f306:	c4 78       	rjmp	8000f394 <_malloc_r+0xf0>
8000f308:	2f e3       	sub	r3,-2
8000f30a:	c4 d8       	rjmp	8000f3a4 <_malloc_r+0x100>
8000f30c:	ee 08 16 09 	lsr	r8,r7,0x9
8000f310:	c0 41       	brne	8000f318 <_malloc_r+0x74>
8000f312:	ee 03 16 03 	lsr	r3,r7,0x3
8000f316:	c2 78       	rjmp	8000f364 <_malloc_r+0xc0>
8000f318:	58 48       	cp.w	r8,4
8000f31a:	e0 8b 00 06 	brhi	8000f326 <_malloc_r+0x82>
8000f31e:	ee 03 16 06 	lsr	r3,r7,0x6
8000f322:	2c 83       	sub	r3,-56
8000f324:	c2 08       	rjmp	8000f364 <_malloc_r+0xc0>
8000f326:	59 48       	cp.w	r8,20
8000f328:	e0 8b 00 05 	brhi	8000f332 <_malloc_r+0x8e>
8000f32c:	f0 c3 ff a5 	sub	r3,r8,-91
8000f330:	c1 a8       	rjmp	8000f364 <_malloc_r+0xc0>
8000f332:	e0 48 00 54 	cp.w	r8,84
8000f336:	e0 8b 00 06 	brhi	8000f342 <_malloc_r+0x9e>
8000f33a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000f33e:	29 23       	sub	r3,-110
8000f340:	c1 28       	rjmp	8000f364 <_malloc_r+0xc0>
8000f342:	e0 48 01 54 	cp.w	r8,340
8000f346:	e0 8b 00 06 	brhi	8000f352 <_malloc_r+0xae>
8000f34a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000f34e:	28 93       	sub	r3,-119
8000f350:	c0 a8       	rjmp	8000f364 <_malloc_r+0xc0>
8000f352:	ee 03 16 12 	lsr	r3,r7,0x12
8000f356:	e0 48 05 54 	cp.w	r8,1364
8000f35a:	e0 88 00 04 	brls	8000f362 <_malloc_r+0xbe>
8000f35e:	37 e3       	mov	r3,126
8000f360:	c0 28       	rjmp	8000f364 <_malloc_r+0xc0>
8000f362:	28 43       	sub	r3,-124
8000f364:	4a aa       	lddpc	r10,8000f40c <_malloc_r+0x168>
8000f366:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000f36a:	74 36       	ld.w	r6,r10[0xc]
8000f36c:	c1 98       	rjmp	8000f39e <_malloc_r+0xfa>
8000f36e:	6c 19       	ld.w	r9,r6[0x4]
8000f370:	e0 19 ff fc 	andl	r9,0xfffc
8000f374:	f2 07 01 0b 	sub	r11,r9,r7
8000f378:	58 fb       	cp.w	r11,15
8000f37a:	e0 8a 00 04 	brle	8000f382 <_malloc_r+0xde>
8000f37e:	20 13       	sub	r3,1
8000f380:	c1 18       	rjmp	8000f3a2 <_malloc_r+0xfe>
8000f382:	6c 38       	ld.w	r8,r6[0xc]
8000f384:	58 0b       	cp.w	r11,0
8000f386:	c0 b5       	brlt	8000f39c <_malloc_r+0xf8>
8000f388:	6c 2a       	ld.w	r10,r6[0x8]
8000f38a:	ec 09 00 09 	add	r9,r6,r9
8000f38e:	0a 9c       	mov	r12,r5
8000f390:	91 2a       	st.w	r8[0x8],r10
8000f392:	95 38       	st.w	r10[0xc],r8
8000f394:	72 18       	ld.w	r8,r9[0x4]
8000f396:	a1 a8       	sbr	r8,0x0
8000f398:	93 18       	st.w	r9[0x4],r8
8000f39a:	cb b8       	rjmp	8000f510 <_malloc_r+0x26c>
8000f39c:	10 96       	mov	r6,r8
8000f39e:	14 36       	cp.w	r6,r10
8000f3a0:	ce 71       	brne	8000f36e <_malloc_r+0xca>
8000f3a2:	2f f3       	sub	r3,-1
8000f3a4:	49 aa       	lddpc	r10,8000f40c <_malloc_r+0x168>
8000f3a6:	f4 cc ff f8 	sub	r12,r10,-8
8000f3aa:	78 26       	ld.w	r6,r12[0x8]
8000f3ac:	18 36       	cp.w	r6,r12
8000f3ae:	c6 d0       	breq	8000f488 <_malloc_r+0x1e4>
8000f3b0:	6c 19       	ld.w	r9,r6[0x4]
8000f3b2:	e0 19 ff fc 	andl	r9,0xfffc
8000f3b6:	f2 07 01 08 	sub	r8,r9,r7
8000f3ba:	58 f8       	cp.w	r8,15
8000f3bc:	e0 89 00 8f 	brgt	8000f4da <_malloc_r+0x236>
8000f3c0:	99 3c       	st.w	r12[0xc],r12
8000f3c2:	99 2c       	st.w	r12[0x8],r12
8000f3c4:	58 08       	cp.w	r8,0
8000f3c6:	c0 55       	brlt	8000f3d0 <_malloc_r+0x12c>
8000f3c8:	ec 09 00 09 	add	r9,r6,r9
8000f3cc:	0a 9c       	mov	r12,r5
8000f3ce:	ce 3b       	rjmp	8000f394 <_malloc_r+0xf0>
8000f3d0:	e0 49 01 ff 	cp.w	r9,511
8000f3d4:	e0 8b 00 13 	brhi	8000f3fa <_malloc_r+0x156>
8000f3d8:	a3 99       	lsr	r9,0x3
8000f3da:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000f3de:	70 2b       	ld.w	r11,r8[0x8]
8000f3e0:	8d 38       	st.w	r6[0xc],r8
8000f3e2:	8d 2b       	st.w	r6[0x8],r11
8000f3e4:	97 36       	st.w	r11[0xc],r6
8000f3e6:	91 26       	st.w	r8[0x8],r6
8000f3e8:	a3 49       	asr	r9,0x2
8000f3ea:	74 18       	ld.w	r8,r10[0x4]
8000f3ec:	30 1b       	mov	r11,1
8000f3ee:	f6 09 09 49 	lsl	r9,r11,r9
8000f3f2:	f1 e9 10 09 	or	r9,r8,r9
8000f3f6:	95 19       	st.w	r10[0x4],r9
8000f3f8:	c4 88       	rjmp	8000f488 <_malloc_r+0x1e4>
8000f3fa:	f2 08 16 09 	lsr	r8,r9,0x9
8000f3fe:	58 48       	cp.w	r8,4
8000f400:	e0 8b 00 08 	brhi	8000f410 <_malloc_r+0x16c>
8000f404:	f2 0a 16 06 	lsr	r10,r9,0x6
8000f408:	2c 8a       	sub	r10,-56
8000f40a:	c2 28       	rjmp	8000f44e <_malloc_r+0x1aa>
8000f40c:	00 00       	add	r0,r0
8000f40e:	01 c8       	ld.ub	r8,r0[0x4]
8000f410:	59 48       	cp.w	r8,20
8000f412:	e0 8b 00 05 	brhi	8000f41c <_malloc_r+0x178>
8000f416:	f0 ca ff a5 	sub	r10,r8,-91
8000f41a:	c1 a8       	rjmp	8000f44e <_malloc_r+0x1aa>
8000f41c:	e0 48 00 54 	cp.w	r8,84
8000f420:	e0 8b 00 06 	brhi	8000f42c <_malloc_r+0x188>
8000f424:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000f428:	29 2a       	sub	r10,-110
8000f42a:	c1 28       	rjmp	8000f44e <_malloc_r+0x1aa>
8000f42c:	e0 48 01 54 	cp.w	r8,340
8000f430:	e0 8b 00 06 	brhi	8000f43c <_malloc_r+0x198>
8000f434:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000f438:	28 9a       	sub	r10,-119
8000f43a:	c0 a8       	rjmp	8000f44e <_malloc_r+0x1aa>
8000f43c:	f2 0a 16 12 	lsr	r10,r9,0x12
8000f440:	e0 48 05 54 	cp.w	r8,1364
8000f444:	e0 88 00 04 	brls	8000f44c <_malloc_r+0x1a8>
8000f448:	37 ea       	mov	r10,126
8000f44a:	c0 28       	rjmp	8000f44e <_malloc_r+0x1aa>
8000f44c:	28 4a       	sub	r10,-124
8000f44e:	4c 8b       	lddpc	r11,8000f56c <_malloc_r+0x2c8>
8000f450:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000f454:	68 28       	ld.w	r8,r4[0x8]
8000f456:	08 38       	cp.w	r8,r4
8000f458:	c0 e1       	brne	8000f474 <_malloc_r+0x1d0>
8000f45a:	76 19       	ld.w	r9,r11[0x4]
8000f45c:	a3 4a       	asr	r10,0x2
8000f45e:	30 1e       	mov	lr,1
8000f460:	fc 0a 09 4a 	lsl	r10,lr,r10
8000f464:	f3 ea 10 0a 	or	r10,r9,r10
8000f468:	10 99       	mov	r9,r8
8000f46a:	97 1a       	st.w	r11[0x4],r10
8000f46c:	c0 a8       	rjmp	8000f480 <_malloc_r+0x1dc>
8000f46e:	70 28       	ld.w	r8,r8[0x8]
8000f470:	08 38       	cp.w	r8,r4
8000f472:	c0 60       	breq	8000f47e <_malloc_r+0x1da>
8000f474:	70 1a       	ld.w	r10,r8[0x4]
8000f476:	e0 1a ff fc 	andl	r10,0xfffc
8000f47a:	14 39       	cp.w	r9,r10
8000f47c:	cf 93       	brcs	8000f46e <_malloc_r+0x1ca>
8000f47e:	70 39       	ld.w	r9,r8[0xc]
8000f480:	8d 39       	st.w	r6[0xc],r9
8000f482:	8d 28       	st.w	r6[0x8],r8
8000f484:	91 36       	st.w	r8[0xc],r6
8000f486:	93 26       	st.w	r9[0x8],r6
8000f488:	e6 08 14 02 	asr	r8,r3,0x2
8000f48c:	30 1b       	mov	r11,1
8000f48e:	4b 84       	lddpc	r4,8000f56c <_malloc_r+0x2c8>
8000f490:	f6 08 09 4b 	lsl	r11,r11,r8
8000f494:	68 18       	ld.w	r8,r4[0x4]
8000f496:	10 3b       	cp.w	r11,r8
8000f498:	e0 8b 00 6c 	brhi	8000f570 <_malloc_r+0x2cc>
8000f49c:	f7 e8 00 09 	and	r9,r11,r8
8000f4a0:	c0 b1       	brne	8000f4b6 <_malloc_r+0x212>
8000f4a2:	e0 13 ff fc 	andl	r3,0xfffc
8000f4a6:	a1 7b       	lsl	r11,0x1
8000f4a8:	2f c3       	sub	r3,-4
8000f4aa:	c0 38       	rjmp	8000f4b0 <_malloc_r+0x20c>
8000f4ac:	2f c3       	sub	r3,-4
8000f4ae:	a1 7b       	lsl	r11,0x1
8000f4b0:	f7 e8 00 09 	and	r9,r11,r8
8000f4b4:	cf c0       	breq	8000f4ac <_malloc_r+0x208>
8000f4b6:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000f4ba:	06 92       	mov	r2,r3
8000f4bc:	1c 91       	mov	r1,lr
8000f4be:	62 36       	ld.w	r6,r1[0xc]
8000f4c0:	c2 d8       	rjmp	8000f51a <_malloc_r+0x276>
8000f4c2:	6c 1a       	ld.w	r10,r6[0x4]
8000f4c4:	e0 1a ff fc 	andl	r10,0xfffc
8000f4c8:	f4 07 01 08 	sub	r8,r10,r7
8000f4cc:	58 f8       	cp.w	r8,15
8000f4ce:	e0 8a 00 15 	brle	8000f4f8 <_malloc_r+0x254>
8000f4d2:	6c 3a       	ld.w	r10,r6[0xc]
8000f4d4:	6c 29       	ld.w	r9,r6[0x8]
8000f4d6:	95 29       	st.w	r10[0x8],r9
8000f4d8:	93 3a       	st.w	r9[0xc],r10
8000f4da:	0e 99       	mov	r9,r7
8000f4dc:	ec 07 00 07 	add	r7,r6,r7
8000f4e0:	a1 a9       	sbr	r9,0x0
8000f4e2:	99 37       	st.w	r12[0xc],r7
8000f4e4:	99 27       	st.w	r12[0x8],r7
8000f4e6:	8d 19       	st.w	r6[0x4],r9
8000f4e8:	ee 08 09 08 	st.w	r7[r8],r8
8000f4ec:	8f 2c       	st.w	r7[0x8],r12
8000f4ee:	8f 3c       	st.w	r7[0xc],r12
8000f4f0:	a1 a8       	sbr	r8,0x0
8000f4f2:	0a 9c       	mov	r12,r5
8000f4f4:	8f 18       	st.w	r7[0x4],r8
8000f4f6:	c0 d8       	rjmp	8000f510 <_malloc_r+0x26c>
8000f4f8:	6c 39       	ld.w	r9,r6[0xc]
8000f4fa:	58 08       	cp.w	r8,0
8000f4fc:	c0 e5       	brlt	8000f518 <_malloc_r+0x274>
8000f4fe:	ec 0a 00 0a 	add	r10,r6,r10
8000f502:	74 18       	ld.w	r8,r10[0x4]
8000f504:	a1 a8       	sbr	r8,0x0
8000f506:	0a 9c       	mov	r12,r5
8000f508:	95 18       	st.w	r10[0x4],r8
8000f50a:	6c 28       	ld.w	r8,r6[0x8]
8000f50c:	93 28       	st.w	r9[0x8],r8
8000f50e:	91 39       	st.w	r8[0xc],r9
8000f510:	c3 fd       	rcall	8000f78e <__malloc_unlock>
8000f512:	ec cc ff f8 	sub	r12,r6,-8
8000f516:	d8 32       	popm	r0-r7,pc
8000f518:	12 96       	mov	r6,r9
8000f51a:	02 36       	cp.w	r6,r1
8000f51c:	cd 31       	brne	8000f4c2 <_malloc_r+0x21e>
8000f51e:	2f f2       	sub	r2,-1
8000f520:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000f524:	c0 30       	breq	8000f52a <_malloc_r+0x286>
8000f526:	2f 81       	sub	r1,-8
8000f528:	cc bb       	rjmp	8000f4be <_malloc_r+0x21a>
8000f52a:	1c 98       	mov	r8,lr
8000f52c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000f530:	c0 81       	brne	8000f540 <_malloc_r+0x29c>
8000f532:	68 19       	ld.w	r9,r4[0x4]
8000f534:	f6 08 11 ff 	rsub	r8,r11,-1
8000f538:	f3 e8 00 08 	and	r8,r9,r8
8000f53c:	89 18       	st.w	r4[0x4],r8
8000f53e:	c0 78       	rjmp	8000f54c <_malloc_r+0x2a8>
8000f540:	f0 c9 00 08 	sub	r9,r8,8
8000f544:	20 13       	sub	r3,1
8000f546:	70 08       	ld.w	r8,r8[0x0]
8000f548:	12 38       	cp.w	r8,r9
8000f54a:	cf 10       	breq	8000f52c <_malloc_r+0x288>
8000f54c:	a1 7b       	lsl	r11,0x1
8000f54e:	68 18       	ld.w	r8,r4[0x4]
8000f550:	10 3b       	cp.w	r11,r8
8000f552:	e0 8b 00 0f 	brhi	8000f570 <_malloc_r+0x2cc>
8000f556:	58 0b       	cp.w	r11,0
8000f558:	c0 c0       	breq	8000f570 <_malloc_r+0x2cc>
8000f55a:	04 93       	mov	r3,r2
8000f55c:	c0 38       	rjmp	8000f562 <_malloc_r+0x2be>
8000f55e:	2f c3       	sub	r3,-4
8000f560:	a1 7b       	lsl	r11,0x1
8000f562:	f7 e8 00 09 	and	r9,r11,r8
8000f566:	ca 81       	brne	8000f4b6 <_malloc_r+0x212>
8000f568:	cf bb       	rjmp	8000f55e <_malloc_r+0x2ba>
8000f56a:	d7 03       	nop
8000f56c:	00 00       	add	r0,r0
8000f56e:	01 c8       	ld.ub	r8,r0[0x4]
8000f570:	68 23       	ld.w	r3,r4[0x8]
8000f572:	66 12       	ld.w	r2,r3[0x4]
8000f574:	e0 12 ff fc 	andl	r2,0xfffc
8000f578:	0e 32       	cp.w	r2,r7
8000f57a:	5f 39       	srlo	r9
8000f57c:	e4 07 01 08 	sub	r8,r2,r7
8000f580:	58 f8       	cp.w	r8,15
8000f582:	5f aa       	srle	r10
8000f584:	f5 e9 10 09 	or	r9,r10,r9
8000f588:	e0 80 00 9a 	breq	8000f6bc <_malloc_r+0x418>
8000f58c:	4c 78       	lddpc	r8,8000f6a8 <_malloc_r+0x404>
8000f58e:	70 01       	ld.w	r1,r8[0x0]
8000f590:	4c 78       	lddpc	r8,8000f6ac <_malloc_r+0x408>
8000f592:	2f 01       	sub	r1,-16
8000f594:	70 08       	ld.w	r8,r8[0x0]
8000f596:	0e 01       	add	r1,r7
8000f598:	5b f8       	cp.w	r8,-1
8000f59a:	c0 40       	breq	8000f5a2 <_malloc_r+0x2fe>
8000f59c:	28 11       	sub	r1,-127
8000f59e:	e0 11 ff 80 	andl	r1,0xff80
8000f5a2:	02 9b       	mov	r11,r1
8000f5a4:	0a 9c       	mov	r12,r5
8000f5a6:	e0 a0 06 e3 	rcall	8001036c <_sbrk_r>
8000f5aa:	18 96       	mov	r6,r12
8000f5ac:	5b fc       	cp.w	r12,-1
8000f5ae:	c6 e0       	breq	8000f68a <_malloc_r+0x3e6>
8000f5b0:	e6 02 00 08 	add	r8,r3,r2
8000f5b4:	10 3c       	cp.w	r12,r8
8000f5b6:	c0 32       	brcc	8000f5bc <_malloc_r+0x318>
8000f5b8:	08 33       	cp.w	r3,r4
8000f5ba:	c6 81       	brne	8000f68a <_malloc_r+0x3e6>
8000f5bc:	4b da       	lddpc	r10,8000f6b0 <_malloc_r+0x40c>
8000f5be:	74 09       	ld.w	r9,r10[0x0]
8000f5c0:	e2 09 00 09 	add	r9,r1,r9
8000f5c4:	95 09       	st.w	r10[0x0],r9
8000f5c6:	10 36       	cp.w	r6,r8
8000f5c8:	c0 a1       	brne	8000f5dc <_malloc_r+0x338>
8000f5ca:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000f5ce:	c0 71       	brne	8000f5dc <_malloc_r+0x338>
8000f5d0:	e2 02 00 02 	add	r2,r1,r2
8000f5d4:	68 28       	ld.w	r8,r4[0x8]
8000f5d6:	a1 a2       	sbr	r2,0x0
8000f5d8:	91 12       	st.w	r8[0x4],r2
8000f5da:	c4 c8       	rjmp	8000f672 <_malloc_r+0x3ce>
8000f5dc:	4b 4a       	lddpc	r10,8000f6ac <_malloc_r+0x408>
8000f5de:	74 0b       	ld.w	r11,r10[0x0]
8000f5e0:	5b fb       	cp.w	r11,-1
8000f5e2:	c0 31       	brne	8000f5e8 <_malloc_r+0x344>
8000f5e4:	95 06       	st.w	r10[0x0],r6
8000f5e6:	c0 68       	rjmp	8000f5f2 <_malloc_r+0x34e>
8000f5e8:	ec 09 00 09 	add	r9,r6,r9
8000f5ec:	4b 1a       	lddpc	r10,8000f6b0 <_malloc_r+0x40c>
8000f5ee:	10 19       	sub	r9,r8
8000f5f0:	95 09       	st.w	r10[0x0],r9
8000f5f2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000f5f6:	f0 09 11 08 	rsub	r9,r8,8
8000f5fa:	58 08       	cp.w	r8,0
8000f5fc:	f2 08 17 10 	movne	r8,r9
8000f600:	ed d8 e1 06 	addne	r6,r6,r8
8000f604:	28 08       	sub	r8,-128
8000f606:	ec 01 00 01 	add	r1,r6,r1
8000f60a:	0a 9c       	mov	r12,r5
8000f60c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000f610:	f0 01 01 01 	sub	r1,r8,r1
8000f614:	02 9b       	mov	r11,r1
8000f616:	e0 a0 06 ab 	rcall	8001036c <_sbrk_r>
8000f61a:	4a 68       	lddpc	r8,8000f6b0 <_malloc_r+0x40c>
8000f61c:	5b fc       	cp.w	r12,-1
8000f61e:	ec 0c 17 00 	moveq	r12,r6
8000f622:	f9 b1 00 00 	moveq	r1,0
8000f626:	70 09       	ld.w	r9,r8[0x0]
8000f628:	0c 1c       	sub	r12,r6
8000f62a:	89 26       	st.w	r4[0x8],r6
8000f62c:	02 0c       	add	r12,r1
8000f62e:	12 01       	add	r1,r9
8000f630:	a1 ac       	sbr	r12,0x0
8000f632:	91 01       	st.w	r8[0x0],r1
8000f634:	8d 1c       	st.w	r6[0x4],r12
8000f636:	08 33       	cp.w	r3,r4
8000f638:	c1 d0       	breq	8000f672 <_malloc_r+0x3ce>
8000f63a:	58 f2       	cp.w	r2,15
8000f63c:	e0 8b 00 05 	brhi	8000f646 <_malloc_r+0x3a2>
8000f640:	30 18       	mov	r8,1
8000f642:	8d 18       	st.w	r6[0x4],r8
8000f644:	c2 38       	rjmp	8000f68a <_malloc_r+0x3e6>
8000f646:	30 59       	mov	r9,5
8000f648:	20 c2       	sub	r2,12
8000f64a:	e0 12 ff f8 	andl	r2,0xfff8
8000f64e:	e6 02 00 08 	add	r8,r3,r2
8000f652:	91 29       	st.w	r8[0x8],r9
8000f654:	91 19       	st.w	r8[0x4],r9
8000f656:	66 18       	ld.w	r8,r3[0x4]
8000f658:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000f65c:	e5 e8 10 08 	or	r8,r2,r8
8000f660:	87 18       	st.w	r3[0x4],r8
8000f662:	58 f2       	cp.w	r2,15
8000f664:	e0 88 00 07 	brls	8000f672 <_malloc_r+0x3ce>
8000f668:	e6 cb ff f8 	sub	r11,r3,-8
8000f66c:	0a 9c       	mov	r12,r5
8000f66e:	fe b0 fb 37 	rcall	8000ecdc <_free_r>
8000f672:	49 19       	lddpc	r9,8000f6b4 <_malloc_r+0x410>
8000f674:	72 0a       	ld.w	r10,r9[0x0]
8000f676:	48 f8       	lddpc	r8,8000f6b0 <_malloc_r+0x40c>
8000f678:	70 08       	ld.w	r8,r8[0x0]
8000f67a:	14 38       	cp.w	r8,r10
8000f67c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000f680:	48 e9       	lddpc	r9,8000f6b8 <_malloc_r+0x414>
8000f682:	72 0a       	ld.w	r10,r9[0x0]
8000f684:	14 38       	cp.w	r8,r10
8000f686:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000f68a:	68 28       	ld.w	r8,r4[0x8]
8000f68c:	70 18       	ld.w	r8,r8[0x4]
8000f68e:	e0 18 ff fc 	andl	r8,0xfffc
8000f692:	0e 38       	cp.w	r8,r7
8000f694:	5f 39       	srlo	r9
8000f696:	0e 18       	sub	r8,r7
8000f698:	58 f8       	cp.w	r8,15
8000f69a:	5f aa       	srle	r10
8000f69c:	f5 e9 10 09 	or	r9,r10,r9
8000f6a0:	c0 e0       	breq	8000f6bc <_malloc_r+0x418>
8000f6a2:	0a 9c       	mov	r12,r5
8000f6a4:	c7 5c       	rcall	8000f78e <__malloc_unlock>
8000f6a6:	d8 3a       	popm	r0-r7,pc,r12=0
8000f6a8:	00 00       	add	r0,r0
8000f6aa:	0e 40       	or	r0,r7
8000f6ac:	00 00       	add	r0,r0
8000f6ae:	05 d4       	ld.ub	r4,r2[0x5]
8000f6b0:	00 00       	add	r0,r0
8000f6b2:	0e 44       	or	r4,r7
8000f6b4:	00 00       	add	r0,r0
8000f6b6:	0e 3c       	cp.w	r12,r7
8000f6b8:	00 00       	add	r0,r0
8000f6ba:	0e 38       	cp.w	r8,r7
8000f6bc:	68 26       	ld.w	r6,r4[0x8]
8000f6be:	a1 a8       	sbr	r8,0x0
8000f6c0:	0e 99       	mov	r9,r7
8000f6c2:	a1 a9       	sbr	r9,0x0
8000f6c4:	8d 19       	st.w	r6[0x4],r9
8000f6c6:	ec 07 00 07 	add	r7,r6,r7
8000f6ca:	0a 9c       	mov	r12,r5
8000f6cc:	89 27       	st.w	r4[0x8],r7
8000f6ce:	8f 18       	st.w	r7[0x4],r8
8000f6d0:	c5 fc       	rcall	8000f78e <__malloc_unlock>
8000f6d2:	ec cc ff f8 	sub	r12,r6,-8
8000f6d6:	d8 32       	popm	r0-r7,pc

8000f6d8 <_mbrtowc_r>:
8000f6d8:	d4 21       	pushm	r4-r7,lr
8000f6da:	18 97       	mov	r7,r12
8000f6dc:	10 96       	mov	r6,r8
8000f6de:	58 0a       	cp.w	r10,0
8000f6e0:	c0 41       	brne	8000f6e8 <_mbrtowc_r+0x10>
8000f6e2:	14 9b       	mov	r11,r10
8000f6e4:	30 19       	mov	r9,1
8000f6e6:	48 6a       	lddpc	r10,8000f6fc <_mbrtowc_r+0x24>
8000f6e8:	c0 cc       	rcall	8000f700 <_mbtowc_r>
8000f6ea:	5b fc       	cp.w	r12,-1
8000f6ec:	c0 61       	brne	8000f6f8 <_mbrtowc_r+0x20>
8000f6ee:	30 08       	mov	r8,0
8000f6f0:	8d 08       	st.w	r6[0x0],r8
8000f6f2:	e0 68 00 8a 	mov	r8,138
8000f6f6:	8f 38       	st.w	r7[0xc],r8
8000f6f8:	d8 22       	popm	r4-r7,pc
8000f6fa:	d7 03       	nop
8000f6fc:	80 01       	ld.sh	r1,r0[0x0]
8000f6fe:	39 f0       	mov	r0,-97

8000f700 <_mbtowc_r>:
8000f700:	20 1d       	sub	sp,4
8000f702:	58 09       	cp.w	r9,0
8000f704:	5f 09       	sreq	r9
8000f706:	58 0b       	cp.w	r11,0
8000f708:	fa 0b 17 00 	moveq	r11,sp
8000f70c:	58 0a       	cp.w	r10,0
8000f70e:	5f 18       	srne	r8
8000f710:	f3 e8 00 08 	and	r8,r9,r8
8000f714:	30 09       	mov	r9,0
8000f716:	f2 08 18 00 	cp.b	r8,r9
8000f71a:	c0 30       	breq	8000f720 <_mbtowc_r+0x20>
8000f71c:	3f ec       	mov	r12,-2
8000f71e:	c0 b8       	rjmp	8000f734 <_mbtowc_r+0x34>
8000f720:	58 0a       	cp.w	r10,0
8000f722:	c0 31       	brne	8000f728 <_mbtowc_r+0x28>
8000f724:	14 9c       	mov	r12,r10
8000f726:	c0 78       	rjmp	8000f734 <_mbtowc_r+0x34>
8000f728:	15 89       	ld.ub	r9,r10[0x0]
8000f72a:	97 09       	st.w	r11[0x0],r9
8000f72c:	15 89       	ld.ub	r9,r10[0x0]
8000f72e:	f0 09 18 00 	cp.b	r9,r8
8000f732:	5f 1c       	srne	r12
8000f734:	2f fd       	sub	sp,-4
8000f736:	5e fc       	retal	r12

8000f738 <memchr>:
8000f738:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000f73c:	c0 68       	rjmp	8000f748 <memchr+0x10>
8000f73e:	20 1a       	sub	r10,1
8000f740:	19 88       	ld.ub	r8,r12[0x0]
8000f742:	16 38       	cp.w	r8,r11
8000f744:	5e 0c       	reteq	r12
8000f746:	2f fc       	sub	r12,-1
8000f748:	58 0a       	cp.w	r10,0
8000f74a:	cf a1       	brne	8000f73e <memchr+0x6>
8000f74c:	5e fa       	retal	r10

8000f74e <memmove>:
8000f74e:	d4 01       	pushm	lr
8000f750:	18 3b       	cp.w	r11,r12
8000f752:	c1 92       	brcc	8000f784 <memmove+0x36>
8000f754:	f6 0a 00 09 	add	r9,r11,r10
8000f758:	12 3c       	cp.w	r12,r9
8000f75a:	c1 52       	brcc	8000f784 <memmove+0x36>
8000f75c:	f8 0a 00 0b 	add	r11,r12,r10
8000f760:	30 08       	mov	r8,0
8000f762:	c0 68       	rjmp	8000f76e <memmove+0x20>
8000f764:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000f768:	20 1a       	sub	r10,1
8000f76a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000f76e:	20 18       	sub	r8,1
8000f770:	58 0a       	cp.w	r10,0
8000f772:	cf 91       	brne	8000f764 <memmove+0x16>
8000f774:	d8 02       	popm	pc
8000f776:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000f77a:	20 1a       	sub	r10,1
8000f77c:	f8 08 0b 09 	st.b	r12[r8],r9
8000f780:	2f f8       	sub	r8,-1
8000f782:	c0 28       	rjmp	8000f786 <memmove+0x38>
8000f784:	30 08       	mov	r8,0
8000f786:	58 0a       	cp.w	r10,0
8000f788:	cf 71       	brne	8000f776 <memmove+0x28>
8000f78a:	d8 02       	popm	pc

8000f78c <__malloc_lock>:
8000f78c:	5e fc       	retal	r12

8000f78e <__malloc_unlock>:
8000f78e:	5e fc       	retal	r12

8000f790 <__hi0bits>:
8000f790:	18 98       	mov	r8,r12
8000f792:	e0 1c 00 00 	andl	r12,0x0
8000f796:	f0 09 15 10 	lsl	r9,r8,0x10
8000f79a:	58 0c       	cp.w	r12,0
8000f79c:	f2 08 17 00 	moveq	r8,r9
8000f7a0:	f9 bc 00 10 	moveq	r12,16
8000f7a4:	f9 bc 01 00 	movne	r12,0
8000f7a8:	10 9a       	mov	r10,r8
8000f7aa:	f0 09 15 08 	lsl	r9,r8,0x8
8000f7ae:	e6 1a ff 00 	andh	r10,0xff00,COH
8000f7b2:	f7 bc 00 f8 	subeq	r12,-8
8000f7b6:	f2 08 17 00 	moveq	r8,r9
8000f7ba:	10 9a       	mov	r10,r8
8000f7bc:	f0 09 15 04 	lsl	r9,r8,0x4
8000f7c0:	e6 1a f0 00 	andh	r10,0xf000,COH
8000f7c4:	f7 bc 00 fc 	subeq	r12,-4
8000f7c8:	f2 08 17 00 	moveq	r8,r9
8000f7cc:	10 9a       	mov	r10,r8
8000f7ce:	f0 09 15 02 	lsl	r9,r8,0x2
8000f7d2:	e6 1a c0 00 	andh	r10,0xc000,COH
8000f7d6:	f7 bc 00 fe 	subeq	r12,-2
8000f7da:	f2 08 17 00 	moveq	r8,r9
8000f7de:	58 08       	cp.w	r8,0
8000f7e0:	5e 5c       	retlt	r12
8000f7e2:	ed b8 00 1e 	bld	r8,0x1e
8000f7e6:	f9 bc 01 20 	movne	r12,32
8000f7ea:	f7 bc 00 ff 	subeq	r12,-1
8000f7ee:	5e fc       	retal	r12

8000f7f0 <__lo0bits>:
8000f7f0:	18 99       	mov	r9,r12
8000f7f2:	78 08       	ld.w	r8,r12[0x0]
8000f7f4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000f7f8:	c1 50       	breq	8000f822 <__lo0bits+0x32>
8000f7fa:	ed b8 00 00 	bld	r8,0x0
8000f7fe:	c0 21       	brne	8000f802 <__lo0bits+0x12>
8000f800:	5e fd       	retal	0
8000f802:	10 9b       	mov	r11,r8
8000f804:	f0 0a 16 01 	lsr	r10,r8,0x1
8000f808:	e2 1b 00 02 	andl	r11,0x2,COH
8000f80c:	a3 88       	lsr	r8,0x2
8000f80e:	58 0b       	cp.w	r11,0
8000f810:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000f814:	f9 bc 01 01 	movne	r12,1
8000f818:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000f81c:	f9 bc 00 02 	moveq	r12,2
8000f820:	5e fc       	retal	r12
8000f822:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000f826:	f0 0b 16 10 	lsr	r11,r8,0x10
8000f82a:	58 0a       	cp.w	r10,0
8000f82c:	f6 08 17 00 	moveq	r8,r11
8000f830:	f9 bc 00 10 	moveq	r12,16
8000f834:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000f838:	f0 0a 16 08 	lsr	r10,r8,0x8
8000f83c:	58 0b       	cp.w	r11,0
8000f83e:	f7 bc 00 f8 	subeq	r12,-8
8000f842:	f4 08 17 00 	moveq	r8,r10
8000f846:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000f84a:	f0 0a 16 04 	lsr	r10,r8,0x4
8000f84e:	58 0b       	cp.w	r11,0
8000f850:	f7 bc 00 fc 	subeq	r12,-4
8000f854:	f4 08 17 00 	moveq	r8,r10
8000f858:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000f85c:	f0 0a 16 02 	lsr	r10,r8,0x2
8000f860:	58 0b       	cp.w	r11,0
8000f862:	f7 bc 00 fe 	subeq	r12,-2
8000f866:	f4 08 17 00 	moveq	r8,r10
8000f86a:	ed b8 00 00 	bld	r8,0x0
8000f86e:	c0 60       	breq	8000f87a <__lo0bits+0x8a>
8000f870:	a1 98       	lsr	r8,0x1
8000f872:	c0 31       	brne	8000f878 <__lo0bits+0x88>
8000f874:	32 0c       	mov	r12,32
8000f876:	5e fc       	retal	r12
8000f878:	2f fc       	sub	r12,-1
8000f87a:	93 08       	st.w	r9[0x0],r8
8000f87c:	5e fc       	retal	r12

8000f87e <__mcmp>:
8000f87e:	d4 01       	pushm	lr
8000f880:	18 98       	mov	r8,r12
8000f882:	76 49       	ld.w	r9,r11[0x10]
8000f884:	78 4c       	ld.w	r12,r12[0x10]
8000f886:	12 1c       	sub	r12,r9
8000f888:	c1 31       	brne	8000f8ae <__mcmp+0x30>
8000f88a:	2f b9       	sub	r9,-5
8000f88c:	a3 69       	lsl	r9,0x2
8000f88e:	12 0b       	add	r11,r9
8000f890:	f0 09 00 09 	add	r9,r8,r9
8000f894:	2e c8       	sub	r8,-20
8000f896:	13 4e       	ld.w	lr,--r9
8000f898:	17 4a       	ld.w	r10,--r11
8000f89a:	14 3e       	cp.w	lr,r10
8000f89c:	c0 60       	breq	8000f8a8 <__mcmp+0x2a>
8000f89e:	f9 bc 03 ff 	movlo	r12,-1
8000f8a2:	f9 bc 02 01 	movhs	r12,1
8000f8a6:	d8 02       	popm	pc
8000f8a8:	10 39       	cp.w	r9,r8
8000f8aa:	fe 9b ff f6 	brhi	8000f896 <__mcmp+0x18>
8000f8ae:	d8 02       	popm	pc

8000f8b0 <__ulp>:
8000f8b0:	e6 1b 7f f0 	andh	r11,0x7ff0,COH
8000f8b4:	fc 18 fc c0 	movh	r8,0xfcc0
8000f8b8:	f6 08 00 08 	add	r8,r11,r8
8000f8bc:	58 08       	cp.w	r8,0
8000f8be:	e0 8a 00 04 	brle	8000f8c6 <__ulp+0x16>
8000f8c2:	10 9b       	mov	r11,r8
8000f8c4:	c0 a8       	rjmp	8000f8d8 <__ulp+0x28>
8000f8c6:	5c 38       	neg	r8
8000f8c8:	b5 48       	asr	r8,0x14
8000f8ca:	59 38       	cp.w	r8,19
8000f8cc:	e0 89 00 08 	brgt	8000f8dc <__ulp+0x2c>
8000f8d0:	e8 69 00 00 	mov	r9,524288
8000f8d4:	f2 08 08 4b 	asr	r11,r9,r8
8000f8d8:	30 0a       	mov	r10,0
8000f8da:	5e fc       	retal	r12
8000f8dc:	21 48       	sub	r8,20
8000f8de:	59 e8       	cp.w	r8,30
8000f8e0:	e0 8a 00 04 	brle	8000f8e8 <__ulp+0x38>
8000f8e4:	30 18       	mov	r8,1
8000f8e6:	c0 68       	rjmp	8000f8f2 <__ulp+0x42>
8000f8e8:	f0 08 11 1f 	rsub	r8,r8,31
8000f8ec:	30 19       	mov	r9,1
8000f8ee:	f2 08 09 48 	lsl	r8,r9,r8
8000f8f2:	30 0b       	mov	r11,0
8000f8f4:	10 9a       	mov	r10,r8
8000f8f6:	5e fc       	retal	r12

8000f8f8 <__b2d>:
8000f8f8:	d4 21       	pushm	r4-r7,lr
8000f8fa:	78 47       	ld.w	r7,r12[0x10]
8000f8fc:	16 94       	mov	r4,r11
8000f8fe:	2f b7       	sub	r7,-5
8000f900:	f8 c5 ff ec 	sub	r5,r12,-20
8000f904:	f8 07 00 27 	add	r7,r12,r7<<0x2
8000f908:	0f 46       	ld.w	r6,--r7
8000f90a:	0c 9c       	mov	r12,r6
8000f90c:	c4 2f       	rcall	8000f790 <__hi0bits>
8000f90e:	f8 08 11 20 	rsub	r8,r12,32
8000f912:	89 08       	st.w	r4[0x0],r8
8000f914:	58 ac       	cp.w	r12,10
8000f916:	e0 89 00 18 	brgt	8000f946 <__b2d+0x4e>
8000f91a:	f8 08 11 0b 	rsub	r8,r12,11
8000f91e:	0a 37       	cp.w	r7,r5
8000f920:	e0 8b 00 04 	brhi	8000f928 <__b2d+0x30>
8000f924:	30 09       	mov	r9,0
8000f926:	c0 38       	rjmp	8000f92c <__b2d+0x34>
8000f928:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f92c:	f2 08 0a 49 	lsr	r9,r9,r8
8000f930:	2e bc       	sub	r12,-21
8000f932:	ec 0c 09 4c 	lsl	r12,r6,r12
8000f936:	ec 08 0a 46 	lsr	r6,r6,r8
8000f93a:	f3 ec 10 0a 	or	r10,r9,r12
8000f93e:	0c 9b       	mov	r11,r6
8000f940:	ea 1b 3f f0 	orh	r11,0x3ff0
8000f944:	d8 22       	popm	r4-r7,pc
8000f946:	0a 37       	cp.w	r7,r5
8000f948:	e0 8b 00 04 	brhi	8000f950 <__b2d+0x58>
8000f94c:	30 08       	mov	r8,0
8000f94e:	c0 28       	rjmp	8000f952 <__b2d+0x5a>
8000f950:	0f 48       	ld.w	r8,--r7
8000f952:	20 bc       	sub	r12,11
8000f954:	c1 90       	breq	8000f986 <__b2d+0x8e>
8000f956:	f8 09 11 20 	rsub	r9,r12,32
8000f95a:	0a 37       	cp.w	r7,r5
8000f95c:	e0 8b 00 04 	brhi	8000f964 <__b2d+0x6c>
8000f960:	30 0a       	mov	r10,0
8000f962:	c0 38       	rjmp	8000f968 <__b2d+0x70>
8000f964:	ee fa ff fc 	ld.w	r10,r7[-4]
8000f968:	f0 0c 09 47 	lsl	r7,r8,r12
8000f96c:	f4 09 0a 45 	lsr	r5,r10,r9
8000f970:	ec 0c 09 4c 	lsl	r12,r6,r12
8000f974:	f0 09 0a 48 	lsr	r8,r8,r9
8000f978:	ea 1c 3f f0 	orh	r12,0x3ff0
8000f97c:	eb e7 10 0a 	or	r10,r5,r7
8000f980:	f9 e8 10 0b 	or	r11,r12,r8
8000f984:	d8 22       	popm	r4-r7,pc
8000f986:	0c 9b       	mov	r11,r6
8000f988:	10 9a       	mov	r10,r8
8000f98a:	ea 1b 3f f0 	orh	r11,0x3ff0
8000f98e:	d8 22       	popm	r4-r7,pc

8000f990 <__ratio>:
8000f990:	d4 21       	pushm	r4-r7,lr
8000f992:	20 2d       	sub	sp,8
8000f994:	16 95       	mov	r5,r11
8000f996:	18 94       	mov	r4,r12
8000f998:	fa cb ff fc 	sub	r11,sp,-4
8000f99c:	ca ef       	rcall	8000f8f8 <__b2d>
8000f99e:	16 99       	mov	r9,r11
8000f9a0:	0a 9c       	mov	r12,r5
8000f9a2:	12 97       	mov	r7,r9
8000f9a4:	14 96       	mov	r6,r10
8000f9a6:	1a 9b       	mov	r11,sp
8000f9a8:	ca 8f       	rcall	8000f8f8 <__b2d>
8000f9aa:	14 98       	mov	r8,r10
8000f9ac:	6a 4a       	ld.w	r10,r5[0x10]
8000f9ae:	16 99       	mov	r9,r11
8000f9b0:	40 1c       	lddsp	r12,sp[0x4]
8000f9b2:	68 4b       	ld.w	r11,r4[0x10]
8000f9b4:	14 1b       	sub	r11,r10
8000f9b6:	40 0a       	lddsp	r10,sp[0x0]
8000f9b8:	a5 7b       	lsl	r11,0x5
8000f9ba:	f8 0a 01 0a 	sub	r10,r12,r10
8000f9be:	16 0a       	add	r10,r11
8000f9c0:	58 0a       	cp.w	r10,0
8000f9c2:	e0 8a 00 06 	brle	8000f9ce <__ratio+0x3e>
8000f9c6:	b5 6a       	lsl	r10,0x14
8000f9c8:	0e 0a       	add	r10,r7
8000f9ca:	14 97       	mov	r7,r10
8000f9cc:	c0 38       	rjmp	8000f9d2 <__ratio+0x42>
8000f9ce:	b5 6a       	lsl	r10,0x14
8000f9d0:	14 19       	sub	r9,r10
8000f9d2:	0c 9a       	mov	r10,r6
8000f9d4:	0e 9b       	mov	r11,r7
8000f9d6:	e0 a0 17 07 	rcall	800127e4 <__avr32_f64_div>
8000f9da:	2f ed       	sub	sp,-8
8000f9dc:	d8 22       	popm	r4-r7,pc
8000f9de:	d7 03       	nop

8000f9e0 <__copybits>:
8000f9e0:	74 48       	ld.w	r8,r10[0x10]
8000f9e2:	f6 c9 00 01 	sub	r9,r11,1
8000f9e6:	2f b8       	sub	r8,-5
8000f9e8:	a5 59       	asr	r9,0x5
8000f9ea:	f4 08 00 28 	add	r8,r10,r8<<0x2
8000f9ee:	2f f9       	sub	r9,-1
8000f9f0:	2e ca       	sub	r10,-20
8000f9f2:	f8 09 00 29 	add	r9,r12,r9<<0x2
8000f9f6:	c0 38       	rjmp	8000f9fc <__copybits+0x1c>
8000f9f8:	15 0b       	ld.w	r11,r10++
8000f9fa:	18 ab       	st.w	r12++,r11
8000f9fc:	10 3a       	cp.w	r10,r8
8000f9fe:	cf d3       	brcs	8000f9f8 <__copybits+0x18>
8000fa00:	c0 38       	rjmp	8000fa06 <__copybits+0x26>
8000fa02:	18 a8       	st.w	r12++,r8
8000fa04:	c0 28       	rjmp	8000fa08 <__copybits+0x28>
8000fa06:	30 08       	mov	r8,0
8000fa08:	12 3c       	cp.w	r12,r9
8000fa0a:	cf c3       	brcs	8000fa02 <__copybits+0x22>
8000fa0c:	5e fc       	retal	r12

8000fa0e <__any_on>:
8000fa0e:	d4 01       	pushm	lr
8000fa10:	f8 ca ff ec 	sub	r10,r12,-20
8000fa14:	78 49       	ld.w	r9,r12[0x10]
8000fa16:	f6 08 14 05 	asr	r8,r11,0x5
8000fa1a:	12 38       	cp.w	r8,r9
8000fa1c:	e0 8a 00 04 	brle	8000fa24 <__any_on+0x16>
8000fa20:	12 98       	mov	r8,r9
8000fa22:	c1 08       	rjmp	8000fa42 <__any_on+0x34>
8000fa24:	12 38       	cp.w	r8,r9
8000fa26:	c0 e4       	brge	8000fa42 <__any_on+0x34>
8000fa28:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000fa2c:	c0 b0       	breq	8000fa42 <__any_on+0x34>
8000fa2e:	f0 c9 ff fb 	sub	r9,r8,-5
8000fa32:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
8000fa36:	f2 0b 0a 4e 	lsr	lr,r9,r11
8000fa3a:	fc 0b 09 4b 	lsl	r11,lr,r11
8000fa3e:	12 3b       	cp.w	r11,r9
8000fa40:	c0 c1       	brne	8000fa58 <__any_on+0x4a>
8000fa42:	2f b8       	sub	r8,-5
8000fa44:	f8 08 00 2c 	add	r12,r12,r8<<0x2
8000fa48:	c0 48       	rjmp	8000fa50 <__any_on+0x42>
8000fa4a:	19 48       	ld.w	r8,--r12
8000fa4c:	58 08       	cp.w	r8,0
8000fa4e:	c0 51       	brne	8000fa58 <__any_on+0x4a>
8000fa50:	14 3c       	cp.w	r12,r10
8000fa52:	fe 9b ff fc 	brhi	8000fa4a <__any_on+0x3c>
8000fa56:	d8 0a       	popm	pc,r12=0
8000fa58:	da 0a       	popm	pc,r12=1
8000fa5a:	d7 03       	nop

8000fa5c <_Bfree>:
8000fa5c:	d4 21       	pushm	r4-r7,lr
8000fa5e:	18 97       	mov	r7,r12
8000fa60:	16 95       	mov	r5,r11
8000fa62:	78 96       	ld.w	r6,r12[0x24]
8000fa64:	58 06       	cp.w	r6,0
8000fa66:	c0 91       	brne	8000fa78 <_Bfree+0x1c>
8000fa68:	31 0c       	mov	r12,16
8000fa6a:	fe b0 fc 15 	rcall	8000f294 <malloc>
8000fa6e:	99 36       	st.w	r12[0xc],r6
8000fa70:	8f 9c       	st.w	r7[0x24],r12
8000fa72:	99 16       	st.w	r12[0x4],r6
8000fa74:	99 26       	st.w	r12[0x8],r6
8000fa76:	99 06       	st.w	r12[0x0],r6
8000fa78:	58 05       	cp.w	r5,0
8000fa7a:	c0 90       	breq	8000fa8c <_Bfree+0x30>
8000fa7c:	6a 19       	ld.w	r9,r5[0x4]
8000fa7e:	6e 98       	ld.w	r8,r7[0x24]
8000fa80:	70 38       	ld.w	r8,r8[0xc]
8000fa82:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000fa86:	8b 0a       	st.w	r5[0x0],r10
8000fa88:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000fa8c:	d8 22       	popm	r4-r7,pc
8000fa8e:	d7 03       	nop

8000fa90 <_Balloc>:
8000fa90:	d4 21       	pushm	r4-r7,lr
8000fa92:	18 97       	mov	r7,r12
8000fa94:	16 96       	mov	r6,r11
8000fa96:	78 95       	ld.w	r5,r12[0x24]
8000fa98:	58 05       	cp.w	r5,0
8000fa9a:	c0 91       	brne	8000faac <_Balloc+0x1c>
8000fa9c:	31 0c       	mov	r12,16
8000fa9e:	fe b0 fb fb 	rcall	8000f294 <malloc>
8000faa2:	99 35       	st.w	r12[0xc],r5
8000faa4:	8f 9c       	st.w	r7[0x24],r12
8000faa6:	99 15       	st.w	r12[0x4],r5
8000faa8:	99 25       	st.w	r12[0x8],r5
8000faaa:	99 05       	st.w	r12[0x0],r5
8000faac:	6e 95       	ld.w	r5,r7[0x24]
8000faae:	6a 38       	ld.w	r8,r5[0xc]
8000fab0:	58 08       	cp.w	r8,0
8000fab2:	c0 b1       	brne	8000fac8 <_Balloc+0x38>
8000fab4:	31 0a       	mov	r10,16
8000fab6:	30 4b       	mov	r11,4
8000fab8:	0e 9c       	mov	r12,r7
8000faba:	e0 a0 0f 3d 	rcall	80011934 <_calloc_r>
8000fabe:	8b 3c       	st.w	r5[0xc],r12
8000fac0:	6e 98       	ld.w	r8,r7[0x24]
8000fac2:	70 3c       	ld.w	r12,r8[0xc]
8000fac4:	58 0c       	cp.w	r12,0
8000fac6:	c1 b0       	breq	8000fafc <_Balloc+0x6c>
8000fac8:	6e 98       	ld.w	r8,r7[0x24]
8000faca:	70 38       	ld.w	r8,r8[0xc]
8000facc:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000fad0:	70 0c       	ld.w	r12,r8[0x0]
8000fad2:	58 0c       	cp.w	r12,0
8000fad4:	c0 40       	breq	8000fadc <_Balloc+0x4c>
8000fad6:	78 09       	ld.w	r9,r12[0x0]
8000fad8:	91 09       	st.w	r8[0x0],r9
8000fada:	c0 e8       	rjmp	8000faf6 <_Balloc+0x66>
8000fadc:	0e 9c       	mov	r12,r7
8000fade:	30 17       	mov	r7,1
8000fae0:	0e 9b       	mov	r11,r7
8000fae2:	ee 06 09 47 	lsl	r7,r7,r6
8000fae6:	ee ca ff fb 	sub	r10,r7,-5
8000faea:	a3 6a       	lsl	r10,0x2
8000faec:	e0 a0 0f 24 	rcall	80011934 <_calloc_r>
8000faf0:	c0 60       	breq	8000fafc <_Balloc+0x6c>
8000faf2:	99 16       	st.w	r12[0x4],r6
8000faf4:	99 27       	st.w	r12[0x8],r7
8000faf6:	30 08       	mov	r8,0
8000faf8:	99 38       	st.w	r12[0xc],r8
8000fafa:	99 48       	st.w	r12[0x10],r8
8000fafc:	d8 22       	popm	r4-r7,pc
8000fafe:	d7 03       	nop

8000fb00 <__d2b>:
8000fb00:	d4 31       	pushm	r0-r7,lr
8000fb02:	20 2d       	sub	sp,8
8000fb04:	16 93       	mov	r3,r11
8000fb06:	12 96       	mov	r6,r9
8000fb08:	10 95       	mov	r5,r8
8000fb0a:	14 92       	mov	r2,r10
8000fb0c:	30 1b       	mov	r11,1
8000fb0e:	cc 1f       	rcall	8000fa90 <_Balloc>
8000fb10:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000fb14:	50 09       	stdsp	sp[0x0],r9
8000fb16:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000fb1a:	f0 01 16 14 	lsr	r1,r8,0x14
8000fb1e:	fc 1a 00 10 	movh	r10,0x10
8000fb22:	f3 da e1 39 	orne	r9,r9,r10
8000fb26:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000fb2a:	18 94       	mov	r4,r12
8000fb2c:	58 02       	cp.w	r2,0
8000fb2e:	c1 d0       	breq	8000fb68 <__d2b+0x68>
8000fb30:	fa cc ff f8 	sub	r12,sp,-8
8000fb34:	18 d2       	st.w	--r12,r2
8000fb36:	c5 de       	rcall	8000f7f0 <__lo0bits>
8000fb38:	40 18       	lddsp	r8,sp[0x4]
8000fb3a:	c0 d0       	breq	8000fb54 <__d2b+0x54>
8000fb3c:	40 09       	lddsp	r9,sp[0x0]
8000fb3e:	f8 0a 11 20 	rsub	r10,r12,32
8000fb42:	f2 0a 09 4a 	lsl	r10,r9,r10
8000fb46:	f5 e8 10 08 	or	r8,r10,r8
8000fb4a:	89 58       	st.w	r4[0x14],r8
8000fb4c:	f2 0c 0a 49 	lsr	r9,r9,r12
8000fb50:	50 09       	stdsp	sp[0x0],r9
8000fb52:	c0 28       	rjmp	8000fb56 <__d2b+0x56>
8000fb54:	89 58       	st.w	r4[0x14],r8
8000fb56:	40 08       	lddsp	r8,sp[0x0]
8000fb58:	58 08       	cp.w	r8,0
8000fb5a:	f9 b3 01 02 	movne	r3,2
8000fb5e:	f9 b3 00 01 	moveq	r3,1
8000fb62:	89 68       	st.w	r4[0x18],r8
8000fb64:	89 43       	st.w	r4[0x10],r3
8000fb66:	c0 88       	rjmp	8000fb76 <__d2b+0x76>
8000fb68:	1a 9c       	mov	r12,sp
8000fb6a:	c4 3e       	rcall	8000f7f0 <__lo0bits>
8000fb6c:	30 13       	mov	r3,1
8000fb6e:	40 08       	lddsp	r8,sp[0x0]
8000fb70:	2e 0c       	sub	r12,-32
8000fb72:	89 43       	st.w	r4[0x10],r3
8000fb74:	89 58       	st.w	r4[0x14],r8
8000fb76:	58 01       	cp.w	r1,0
8000fb78:	c0 90       	breq	8000fb8a <__d2b+0x8a>
8000fb7a:	e2 c1 04 33 	sub	r1,r1,1075
8000fb7e:	18 01       	add	r1,r12
8000fb80:	8d 01       	st.w	r6[0x0],r1
8000fb82:	f8 0c 11 35 	rsub	r12,r12,53
8000fb86:	8b 0c       	st.w	r5[0x0],r12
8000fb88:	c0 d8       	rjmp	8000fba2 <__d2b+0xa2>
8000fb8a:	e6 c8 ff fc 	sub	r8,r3,-4
8000fb8e:	f8 cc 04 32 	sub	r12,r12,1074
8000fb92:	a5 73       	lsl	r3,0x5
8000fb94:	8d 0c       	st.w	r6[0x0],r12
8000fb96:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000fb9a:	fe b0 fd fb 	rcall	8000f790 <__hi0bits>
8000fb9e:	18 13       	sub	r3,r12
8000fba0:	8b 03       	st.w	r5[0x0],r3
8000fba2:	08 9c       	mov	r12,r4
8000fba4:	2f ed       	sub	sp,-8
8000fba6:	d8 32       	popm	r0-r7,pc

8000fba8 <__mdiff>:
8000fba8:	d4 31       	pushm	r0-r7,lr
8000fbaa:	74 48       	ld.w	r8,r10[0x10]
8000fbac:	76 45       	ld.w	r5,r11[0x10]
8000fbae:	16 97       	mov	r7,r11
8000fbb0:	14 96       	mov	r6,r10
8000fbb2:	10 15       	sub	r5,r8
8000fbb4:	c1 31       	brne	8000fbda <__mdiff+0x32>
8000fbb6:	2f b8       	sub	r8,-5
8000fbb8:	ee ce ff ec 	sub	lr,r7,-20
8000fbbc:	a3 68       	lsl	r8,0x2
8000fbbe:	f4 08 00 0b 	add	r11,r10,r8
8000fbc2:	ee 08 00 08 	add	r8,r7,r8
8000fbc6:	11 4a       	ld.w	r10,--r8
8000fbc8:	17 49       	ld.w	r9,--r11
8000fbca:	12 3a       	cp.w	r10,r9
8000fbcc:	c0 30       	breq	8000fbd2 <__mdiff+0x2a>
8000fbce:	c0 e2       	brcc	8000fbea <__mdiff+0x42>
8000fbd0:	c0 78       	rjmp	8000fbde <__mdiff+0x36>
8000fbd2:	1c 38       	cp.w	r8,lr
8000fbd4:	fe 9b ff f9 	brhi	8000fbc6 <__mdiff+0x1e>
8000fbd8:	c4 98       	rjmp	8000fc6a <__mdiff+0xc2>
8000fbda:	58 05       	cp.w	r5,0
8000fbdc:	c0 64       	brge	8000fbe8 <__mdiff+0x40>
8000fbde:	0e 98       	mov	r8,r7
8000fbe0:	30 15       	mov	r5,1
8000fbe2:	0c 97       	mov	r7,r6
8000fbe4:	10 96       	mov	r6,r8
8000fbe6:	c0 28       	rjmp	8000fbea <__mdiff+0x42>
8000fbe8:	30 05       	mov	r5,0
8000fbea:	6e 1b       	ld.w	r11,r7[0x4]
8000fbec:	c5 2f       	rcall	8000fa90 <_Balloc>
8000fbee:	6e 49       	ld.w	r9,r7[0x10]
8000fbf0:	6c 44       	ld.w	r4,r6[0x10]
8000fbf2:	99 35       	st.w	r12[0xc],r5
8000fbf4:	2f b4       	sub	r4,-5
8000fbf6:	f2 c5 ff fb 	sub	r5,r9,-5
8000fbfa:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000fbfe:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000fc02:	2e c6       	sub	r6,-20
8000fc04:	2e c7       	sub	r7,-20
8000fc06:	f8 c8 ff ec 	sub	r8,r12,-20
8000fc0a:	30 0a       	mov	r10,0
8000fc0c:	0f 0e       	ld.w	lr,r7++
8000fc0e:	0d 0b       	ld.w	r11,r6++
8000fc10:	fc 02 16 10 	lsr	r2,lr,0x10
8000fc14:	f6 03 16 10 	lsr	r3,r11,0x10
8000fc18:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000fc1c:	e4 03 01 03 	sub	r3,r2,r3
8000fc20:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000fc24:	fc 0b 01 0b 	sub	r11,lr,r11
8000fc28:	f6 0a 00 0a 	add	r10,r11,r10
8000fc2c:	b0 1a       	st.h	r8[0x2],r10
8000fc2e:	b1 4a       	asr	r10,0x10
8000fc30:	e6 0a 00 0a 	add	r10,r3,r10
8000fc34:	b0 0a       	st.h	r8[0x0],r10
8000fc36:	2f c8       	sub	r8,-4
8000fc38:	b1 4a       	asr	r10,0x10
8000fc3a:	08 36       	cp.w	r6,r4
8000fc3c:	ce 83       	brcs	8000fc0c <__mdiff+0x64>
8000fc3e:	c0 d8       	rjmp	8000fc58 <__mdiff+0xb0>
8000fc40:	0f 0b       	ld.w	r11,r7++
8000fc42:	f6 0e 16 10 	lsr	lr,r11,0x10
8000fc46:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000fc4a:	16 0a       	add	r10,r11
8000fc4c:	b0 1a       	st.h	r8[0x2],r10
8000fc4e:	b1 4a       	asr	r10,0x10
8000fc50:	1c 0a       	add	r10,lr
8000fc52:	b0 0a       	st.h	r8[0x0],r10
8000fc54:	2f c8       	sub	r8,-4
8000fc56:	b1 4a       	asr	r10,0x10
8000fc58:	0a 37       	cp.w	r7,r5
8000fc5a:	cf 33       	brcs	8000fc40 <__mdiff+0x98>
8000fc5c:	c0 28       	rjmp	8000fc60 <__mdiff+0xb8>
8000fc5e:	20 19       	sub	r9,1
8000fc60:	11 4a       	ld.w	r10,--r8
8000fc62:	58 0a       	cp.w	r10,0
8000fc64:	cf d0       	breq	8000fc5e <__mdiff+0xb6>
8000fc66:	99 49       	st.w	r12[0x10],r9
8000fc68:	d8 32       	popm	r0-r7,pc
8000fc6a:	30 0b       	mov	r11,0
8000fc6c:	c1 2f       	rcall	8000fa90 <_Balloc>
8000fc6e:	30 18       	mov	r8,1
8000fc70:	99 48       	st.w	r12[0x10],r8
8000fc72:	30 08       	mov	r8,0
8000fc74:	99 58       	st.w	r12[0x14],r8
8000fc76:	d8 32       	popm	r0-r7,pc

8000fc78 <__lshift>:
8000fc78:	d4 31       	pushm	r0-r7,lr
8000fc7a:	16 97       	mov	r7,r11
8000fc7c:	76 46       	ld.w	r6,r11[0x10]
8000fc7e:	f4 02 14 05 	asr	r2,r10,0x5
8000fc82:	2f f6       	sub	r6,-1
8000fc84:	14 93       	mov	r3,r10
8000fc86:	18 94       	mov	r4,r12
8000fc88:	04 06       	add	r6,r2
8000fc8a:	76 1b       	ld.w	r11,r11[0x4]
8000fc8c:	6e 28       	ld.w	r8,r7[0x8]
8000fc8e:	c0 38       	rjmp	8000fc94 <__lshift+0x1c>
8000fc90:	2f fb       	sub	r11,-1
8000fc92:	a1 78       	lsl	r8,0x1
8000fc94:	10 36       	cp.w	r6,r8
8000fc96:	fe 99 ff fd 	brgt	8000fc90 <__lshift+0x18>
8000fc9a:	08 9c       	mov	r12,r4
8000fc9c:	cf ae       	rcall	8000fa90 <_Balloc>
8000fc9e:	30 09       	mov	r9,0
8000fca0:	18 95       	mov	r5,r12
8000fca2:	f8 c8 ff ec 	sub	r8,r12,-20
8000fca6:	12 9a       	mov	r10,r9
8000fca8:	c0 38       	rjmp	8000fcae <__lshift+0x36>
8000fcaa:	10 aa       	st.w	r8++,r10
8000fcac:	2f f9       	sub	r9,-1
8000fcae:	04 39       	cp.w	r9,r2
8000fcb0:	cf d5       	brlt	8000fcaa <__lshift+0x32>
8000fcb2:	6e 4b       	ld.w	r11,r7[0x10]
8000fcb4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000fcb8:	2f bb       	sub	r11,-5
8000fcba:	ee c9 ff ec 	sub	r9,r7,-20
8000fcbe:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000fcc2:	58 03       	cp.w	r3,0
8000fcc4:	c1 30       	breq	8000fcea <__lshift+0x72>
8000fcc6:	e6 0c 11 20 	rsub	r12,r3,32
8000fcca:	30 0a       	mov	r10,0
8000fccc:	72 02       	ld.w	r2,r9[0x0]
8000fcce:	e4 03 09 42 	lsl	r2,r2,r3
8000fcd2:	04 4a       	or	r10,r2
8000fcd4:	10 aa       	st.w	r8++,r10
8000fcd6:	13 0a       	ld.w	r10,r9++
8000fcd8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000fcdc:	16 39       	cp.w	r9,r11
8000fcde:	cf 73       	brcs	8000fccc <__lshift+0x54>
8000fce0:	91 0a       	st.w	r8[0x0],r10
8000fce2:	58 0a       	cp.w	r10,0
8000fce4:	c0 70       	breq	8000fcf2 <__lshift+0x7a>
8000fce6:	2f f6       	sub	r6,-1
8000fce8:	c0 58       	rjmp	8000fcf2 <__lshift+0x7a>
8000fcea:	13 0a       	ld.w	r10,r9++
8000fcec:	10 aa       	st.w	r8++,r10
8000fcee:	16 39       	cp.w	r9,r11
8000fcf0:	cf d3       	brcs	8000fcea <__lshift+0x72>
8000fcf2:	08 9c       	mov	r12,r4
8000fcf4:	20 16       	sub	r6,1
8000fcf6:	0e 9b       	mov	r11,r7
8000fcf8:	8b 46       	st.w	r5[0x10],r6
8000fcfa:	cb 1e       	rcall	8000fa5c <_Bfree>
8000fcfc:	0a 9c       	mov	r12,r5
8000fcfe:	d8 32       	popm	r0-r7,pc

8000fd00 <__multiply>:
8000fd00:	d4 31       	pushm	r0-r7,lr
8000fd02:	20 2d       	sub	sp,8
8000fd04:	76 49       	ld.w	r9,r11[0x10]
8000fd06:	74 48       	ld.w	r8,r10[0x10]
8000fd08:	16 96       	mov	r6,r11
8000fd0a:	14 95       	mov	r5,r10
8000fd0c:	10 39       	cp.w	r9,r8
8000fd0e:	ec 08 17 50 	movlt	r8,r6
8000fd12:	ea 06 17 50 	movlt	r6,r5
8000fd16:	f0 05 17 50 	movlt	r5,r8
8000fd1a:	6c 28       	ld.w	r8,r6[0x8]
8000fd1c:	76 43       	ld.w	r3,r11[0x10]
8000fd1e:	74 42       	ld.w	r2,r10[0x10]
8000fd20:	76 1b       	ld.w	r11,r11[0x4]
8000fd22:	e4 03 00 07 	add	r7,r2,r3
8000fd26:	10 37       	cp.w	r7,r8
8000fd28:	f7 bb 09 ff 	subgt	r11,-1
8000fd2c:	cb 2e       	rcall	8000fa90 <_Balloc>
8000fd2e:	ee c4 ff fb 	sub	r4,r7,-5
8000fd32:	f8 c9 ff ec 	sub	r9,r12,-20
8000fd36:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000fd3a:	30 0a       	mov	r10,0
8000fd3c:	12 98       	mov	r8,r9
8000fd3e:	c0 28       	rjmp	8000fd42 <__multiply+0x42>
8000fd40:	10 aa       	st.w	r8++,r10
8000fd42:	08 38       	cp.w	r8,r4
8000fd44:	cf e3       	brcs	8000fd40 <__multiply+0x40>
8000fd46:	2f b3       	sub	r3,-5
8000fd48:	2f b2       	sub	r2,-5
8000fd4a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000fd4e:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000fd52:	ec cb ff ec 	sub	r11,r6,-20
8000fd56:	50 12       	stdsp	sp[0x4],r2
8000fd58:	ea ca ff ec 	sub	r10,r5,-20
8000fd5c:	c4 48       	rjmp	8000fde4 <__multiply+0xe4>
8000fd5e:	94 95       	ld.uh	r5,r10[0x2]
8000fd60:	58 05       	cp.w	r5,0
8000fd62:	c2 00       	breq	8000fda2 <__multiply+0xa2>
8000fd64:	12 98       	mov	r8,r9
8000fd66:	16 96       	mov	r6,r11
8000fd68:	30 0e       	mov	lr,0
8000fd6a:	50 09       	stdsp	sp[0x0],r9
8000fd6c:	0d 02       	ld.w	r2,r6++
8000fd6e:	e4 00 16 10 	lsr	r0,r2,0x10
8000fd72:	70 01       	ld.w	r1,r8[0x0]
8000fd74:	70 09       	ld.w	r9,r8[0x0]
8000fd76:	b1 81       	lsr	r1,0x10
8000fd78:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000fd7c:	e0 05 03 41 	mac	r1,r0,r5
8000fd80:	ab 32       	mul	r2,r5
8000fd82:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000fd86:	00 02       	add	r2,r0
8000fd88:	e4 0e 00 0e 	add	lr,r2,lr
8000fd8c:	b0 1e       	st.h	r8[0x2],lr
8000fd8e:	b1 8e       	lsr	lr,0x10
8000fd90:	1c 01       	add	r1,lr
8000fd92:	b0 01       	st.h	r8[0x0],r1
8000fd94:	e2 0e 16 10 	lsr	lr,r1,0x10
8000fd98:	2f c8       	sub	r8,-4
8000fd9a:	06 36       	cp.w	r6,r3
8000fd9c:	ce 83       	brcs	8000fd6c <__multiply+0x6c>
8000fd9e:	40 09       	lddsp	r9,sp[0x0]
8000fda0:	91 0e       	st.w	r8[0x0],lr
8000fda2:	94 86       	ld.uh	r6,r10[0x0]
8000fda4:	58 06       	cp.w	r6,0
8000fda6:	c1 d0       	breq	8000fde0 <__multiply+0xe0>
8000fda8:	72 02       	ld.w	r2,r9[0x0]
8000fdaa:	12 98       	mov	r8,r9
8000fdac:	16 9e       	mov	lr,r11
8000fdae:	30 05       	mov	r5,0
8000fdb0:	b0 12       	st.h	r8[0x2],r2
8000fdb2:	1d 01       	ld.w	r1,lr++
8000fdb4:	90 82       	ld.uh	r2,r8[0x0]
8000fdb6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000fdba:	ad 30       	mul	r0,r6
8000fdbc:	e0 02 00 02 	add	r2,r0,r2
8000fdc0:	e4 05 00 05 	add	r5,r2,r5
8000fdc4:	b0 05       	st.h	r8[0x0],r5
8000fdc6:	b1 85       	lsr	r5,0x10
8000fdc8:	b1 81       	lsr	r1,0x10
8000fdca:	2f c8       	sub	r8,-4
8000fdcc:	ad 31       	mul	r1,r6
8000fdce:	90 92       	ld.uh	r2,r8[0x2]
8000fdd0:	e2 02 00 02 	add	r2,r1,r2
8000fdd4:	0a 02       	add	r2,r5
8000fdd6:	e4 05 16 10 	lsr	r5,r2,0x10
8000fdda:	06 3e       	cp.w	lr,r3
8000fddc:	ce a3       	brcs	8000fdb0 <__multiply+0xb0>
8000fdde:	91 02       	st.w	r8[0x0],r2
8000fde0:	2f ca       	sub	r10,-4
8000fde2:	2f c9       	sub	r9,-4
8000fde4:	40 18       	lddsp	r8,sp[0x4]
8000fde6:	10 3a       	cp.w	r10,r8
8000fde8:	cb b3       	brcs	8000fd5e <__multiply+0x5e>
8000fdea:	c0 28       	rjmp	8000fdee <__multiply+0xee>
8000fdec:	20 17       	sub	r7,1
8000fdee:	58 07       	cp.w	r7,0
8000fdf0:	e0 8a 00 05 	brle	8000fdfa <__multiply+0xfa>
8000fdf4:	09 48       	ld.w	r8,--r4
8000fdf6:	58 08       	cp.w	r8,0
8000fdf8:	cf a0       	breq	8000fdec <__multiply+0xec>
8000fdfa:	99 47       	st.w	r12[0x10],r7
8000fdfc:	2f ed       	sub	sp,-8
8000fdfe:	d8 32       	popm	r0-r7,pc

8000fe00 <__i2b>:
8000fe00:	d4 21       	pushm	r4-r7,lr
8000fe02:	16 97       	mov	r7,r11
8000fe04:	30 1b       	mov	r11,1
8000fe06:	c4 5e       	rcall	8000fa90 <_Balloc>
8000fe08:	30 19       	mov	r9,1
8000fe0a:	99 57       	st.w	r12[0x14],r7
8000fe0c:	99 49       	st.w	r12[0x10],r9
8000fe0e:	d8 22       	popm	r4-r7,pc

8000fe10 <__multadd>:
8000fe10:	d4 31       	pushm	r0-r7,lr
8000fe12:	30 08       	mov	r8,0
8000fe14:	12 95       	mov	r5,r9
8000fe16:	16 97       	mov	r7,r11
8000fe18:	18 96       	mov	r6,r12
8000fe1a:	76 44       	ld.w	r4,r11[0x10]
8000fe1c:	f6 c9 ff ec 	sub	r9,r11,-20
8000fe20:	72 0b       	ld.w	r11,r9[0x0]
8000fe22:	f6 0c 16 10 	lsr	r12,r11,0x10
8000fe26:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000fe2a:	f4 0c 02 4c 	mul	r12,r10,r12
8000fe2e:	f4 0b 03 45 	mac	r5,r10,r11
8000fe32:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000fe36:	b1 85       	lsr	r5,0x10
8000fe38:	18 05       	add	r5,r12
8000fe3a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000fe3e:	f8 0b 00 0b 	add	r11,r12,r11
8000fe42:	12 ab       	st.w	r9++,r11
8000fe44:	2f f8       	sub	r8,-1
8000fe46:	b1 85       	lsr	r5,0x10
8000fe48:	08 38       	cp.w	r8,r4
8000fe4a:	ce b5       	brlt	8000fe20 <__multadd+0x10>
8000fe4c:	58 05       	cp.w	r5,0
8000fe4e:	c1 c0       	breq	8000fe86 <__multadd+0x76>
8000fe50:	6e 28       	ld.w	r8,r7[0x8]
8000fe52:	10 34       	cp.w	r4,r8
8000fe54:	c1 35       	brlt	8000fe7a <__multadd+0x6a>
8000fe56:	6e 1b       	ld.w	r11,r7[0x4]
8000fe58:	0c 9c       	mov	r12,r6
8000fe5a:	2f fb       	sub	r11,-1
8000fe5c:	c1 ae       	rcall	8000fa90 <_Balloc>
8000fe5e:	6e 4a       	ld.w	r10,r7[0x10]
8000fe60:	ee cb ff f4 	sub	r11,r7,-12
8000fe64:	18 93       	mov	r3,r12
8000fe66:	2f ea       	sub	r10,-2
8000fe68:	2f 4c       	sub	r12,-12
8000fe6a:	a3 6a       	lsl	r10,0x2
8000fe6c:	fe b0 d0 73 	rcall	80009f52 <memcpy>
8000fe70:	0e 9b       	mov	r11,r7
8000fe72:	0c 9c       	mov	r12,r6
8000fe74:	fe b0 fd f4 	rcall	8000fa5c <_Bfree>
8000fe78:	06 97       	mov	r7,r3
8000fe7a:	e8 c8 ff ff 	sub	r8,r4,-1
8000fe7e:	2f b4       	sub	r4,-5
8000fe80:	8f 48       	st.w	r7[0x10],r8
8000fe82:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000fe86:	0e 9c       	mov	r12,r7
8000fe88:	d8 32       	popm	r0-r7,pc
8000fe8a:	d7 03       	nop

8000fe8c <__pow5mult>:
8000fe8c:	d4 31       	pushm	r0-r7,lr
8000fe8e:	14 96       	mov	r6,r10
8000fe90:	18 97       	mov	r7,r12
8000fe92:	16 94       	mov	r4,r11
8000fe94:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000fe98:	c0 80       	breq	8000fea8 <__pow5mult+0x1c>
8000fe9a:	20 18       	sub	r8,1
8000fe9c:	49 f9       	lddpc	r9,8000ff18 <__pow5mult+0x8c>
8000fe9e:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000fea2:	30 09       	mov	r9,0
8000fea4:	cb 6f       	rcall	8000fe10 <__multadd>
8000fea6:	18 94       	mov	r4,r12
8000fea8:	a3 46       	asr	r6,0x2
8000feaa:	c3 40       	breq	8000ff12 <__pow5mult+0x86>
8000feac:	6e 95       	ld.w	r5,r7[0x24]
8000feae:	58 05       	cp.w	r5,0
8000feb0:	c0 91       	brne	8000fec2 <__pow5mult+0x36>
8000feb2:	31 0c       	mov	r12,16
8000feb4:	fe b0 f9 f0 	rcall	8000f294 <malloc>
8000feb8:	99 35       	st.w	r12[0xc],r5
8000feba:	8f 9c       	st.w	r7[0x24],r12
8000febc:	99 15       	st.w	r12[0x4],r5
8000febe:	99 25       	st.w	r12[0x8],r5
8000fec0:	99 05       	st.w	r12[0x0],r5
8000fec2:	6e 93       	ld.w	r3,r7[0x24]
8000fec4:	66 25       	ld.w	r5,r3[0x8]
8000fec6:	58 05       	cp.w	r5,0
8000fec8:	c0 c1       	brne	8000fee0 <__pow5mult+0x54>
8000feca:	e0 6b 02 71 	mov	r11,625
8000fece:	0e 9c       	mov	r12,r7
8000fed0:	c9 8f       	rcall	8000fe00 <__i2b>
8000fed2:	87 2c       	st.w	r3[0x8],r12
8000fed4:	30 08       	mov	r8,0
8000fed6:	18 95       	mov	r5,r12
8000fed8:	99 08       	st.w	r12[0x0],r8
8000feda:	c0 38       	rjmp	8000fee0 <__pow5mult+0x54>
8000fedc:	06 9c       	mov	r12,r3
8000fede:	18 95       	mov	r5,r12
8000fee0:	ed b6 00 00 	bld	r6,0x0
8000fee4:	c0 b1       	brne	8000fefa <__pow5mult+0x6e>
8000fee6:	08 9b       	mov	r11,r4
8000fee8:	0a 9a       	mov	r10,r5
8000feea:	0e 9c       	mov	r12,r7
8000feec:	c0 af       	rcall	8000fd00 <__multiply>
8000feee:	08 9b       	mov	r11,r4
8000fef0:	18 93       	mov	r3,r12
8000fef2:	0e 9c       	mov	r12,r7
8000fef4:	06 94       	mov	r4,r3
8000fef6:	fe b0 fd b3 	rcall	8000fa5c <_Bfree>
8000fefa:	a1 56       	asr	r6,0x1
8000fefc:	c0 b0       	breq	8000ff12 <__pow5mult+0x86>
8000fefe:	6a 03       	ld.w	r3,r5[0x0]
8000ff00:	58 03       	cp.w	r3,0
8000ff02:	ce d1       	brne	8000fedc <__pow5mult+0x50>
8000ff04:	0a 9a       	mov	r10,r5
8000ff06:	0a 9b       	mov	r11,r5
8000ff08:	0e 9c       	mov	r12,r7
8000ff0a:	cf be       	rcall	8000fd00 <__multiply>
8000ff0c:	8b 0c       	st.w	r5[0x0],r12
8000ff0e:	99 03       	st.w	r12[0x0],r3
8000ff10:	ce 7b       	rjmp	8000fede <__pow5mult+0x52>
8000ff12:	08 9c       	mov	r12,r4
8000ff14:	d8 32       	popm	r0-r7,pc
8000ff16:	d7 03       	nop
8000ff18:	80 01       	ld.sh	r1,r0[0x0]
8000ff1a:	43 1c       	lddsp	r12,sp[0xc4]

8000ff1c <__s2b>:
8000ff1c:	d4 31       	pushm	r0-r7,lr
8000ff1e:	12 93       	mov	r3,r9
8000ff20:	10 94       	mov	r4,r8
8000ff22:	f2 c8 ff f8 	sub	r8,r9,-8
8000ff26:	30 99       	mov	r9,9
8000ff28:	f0 09 0c 08 	divs	r8,r8,r9
8000ff2c:	16 95       	mov	r5,r11
8000ff2e:	10 99       	mov	r9,r8
8000ff30:	18 96       	mov	r6,r12
8000ff32:	14 97       	mov	r7,r10
8000ff34:	30 18       	mov	r8,1
8000ff36:	30 0b       	mov	r11,0
8000ff38:	c0 38       	rjmp	8000ff3e <__s2b+0x22>
8000ff3a:	a1 78       	lsl	r8,0x1
8000ff3c:	2f fb       	sub	r11,-1
8000ff3e:	10 39       	cp.w	r9,r8
8000ff40:	fe 99 ff fd 	brgt	8000ff3a <__s2b+0x1e>
8000ff44:	0c 9c       	mov	r12,r6
8000ff46:	fe b0 fd a5 	rcall	8000fa90 <_Balloc>
8000ff4a:	30 18       	mov	r8,1
8000ff4c:	99 54       	st.w	r12[0x14],r4
8000ff4e:	99 48       	st.w	r12[0x10],r8
8000ff50:	58 97       	cp.w	r7,9
8000ff52:	e0 8a 00 13 	brle	8000ff78 <__s2b+0x5c>
8000ff56:	ea c2 ff f7 	sub	r2,r5,-9
8000ff5a:	30 94       	mov	r4,9
8000ff5c:	ea 04 07 09 	ld.ub	r9,r5[r4]
8000ff60:	18 9b       	mov	r11,r12
8000ff62:	2f f4       	sub	r4,-1
8000ff64:	23 09       	sub	r9,48
8000ff66:	30 aa       	mov	r10,10
8000ff68:	0c 9c       	mov	r12,r6
8000ff6a:	c5 3f       	rcall	8000fe10 <__multadd>
8000ff6c:	0e 34       	cp.w	r4,r7
8000ff6e:	cf 75       	brlt	8000ff5c <__s2b+0x40>
8000ff70:	e4 07 00 05 	add	r5,r2,r7
8000ff74:	20 85       	sub	r5,8
8000ff76:	c0 b8       	rjmp	8000ff8c <__s2b+0x70>
8000ff78:	2f 65       	sub	r5,-10
8000ff7a:	30 97       	mov	r7,9
8000ff7c:	c0 88       	rjmp	8000ff8c <__s2b+0x70>
8000ff7e:	18 9b       	mov	r11,r12
8000ff80:	0b 39       	ld.ub	r9,r5++
8000ff82:	2f f7       	sub	r7,-1
8000ff84:	23 09       	sub	r9,48
8000ff86:	30 aa       	mov	r10,10
8000ff88:	0c 9c       	mov	r12,r6
8000ff8a:	c4 3f       	rcall	8000fe10 <__multadd>
8000ff8c:	06 37       	cp.w	r7,r3
8000ff8e:	cf 85       	brlt	8000ff7e <__s2b+0x62>
8000ff90:	d8 32       	popm	r0-r7,pc
8000ff92:	d7 03       	nop

8000ff94 <_realloc_r>:
8000ff94:	d4 31       	pushm	r0-r7,lr
8000ff96:	20 1d       	sub	sp,4
8000ff98:	16 94       	mov	r4,r11
8000ff9a:	18 92       	mov	r2,r12
8000ff9c:	14 9b       	mov	r11,r10
8000ff9e:	58 04       	cp.w	r4,0
8000ffa0:	c0 51       	brne	8000ffaa <_realloc_r+0x16>
8000ffa2:	fe b0 f9 81 	rcall	8000f2a4 <_malloc_r>
8000ffa6:	18 95       	mov	r5,r12
8000ffa8:	c5 59       	rjmp	80010252 <_realloc_r+0x2be>
8000ffaa:	50 0a       	stdsp	sp[0x0],r10
8000ffac:	fe b0 fb f0 	rcall	8000f78c <__malloc_lock>
8000ffb0:	40 0b       	lddsp	r11,sp[0x0]
8000ffb2:	e8 c1 00 08 	sub	r1,r4,8
8000ffb6:	f6 c6 ff f5 	sub	r6,r11,-11
8000ffba:	62 1c       	ld.w	r12,r1[0x4]
8000ffbc:	59 66       	cp.w	r6,22
8000ffbe:	f9 b6 08 10 	movls	r6,16
8000ffc2:	f9 b8 0b f8 	movhi	r8,-8
8000ffc6:	ed d8 eb 26 	andhi	r6,r6,r8
8000ffca:	16 36       	cp.w	r6,r11
8000ffcc:	5f 38       	srlo	r8
8000ffce:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000ffd2:	c0 50       	breq	8000ffdc <_realloc_r+0x48>
8000ffd4:	30 c8       	mov	r8,12
8000ffd6:	30 05       	mov	r5,0
8000ffd8:	85 38       	st.w	r2[0xc],r8
8000ffda:	c3 c9       	rjmp	80010252 <_realloc_r+0x2be>
8000ffdc:	18 90       	mov	r0,r12
8000ffde:	e0 10 ff fc 	andl	r0,0xfffc
8000ffe2:	0c 30       	cp.w	r0,r6
8000ffe4:	e0 84 01 0c 	brge	800101fc <_realloc_r+0x268>
8000ffe8:	4c 98       	lddpc	r8,8001010c <_realloc_r+0x178>
8000ffea:	e2 00 00 09 	add	r9,r1,r0
8000ffee:	70 25       	ld.w	r5,r8[0x8]
8000fff0:	0a 39       	cp.w	r9,r5
8000fff2:	c0 90       	breq	80010004 <_realloc_r+0x70>
8000fff4:	72 1a       	ld.w	r10,r9[0x4]
8000fff6:	a1 ca       	cbr	r10,0x0
8000fff8:	f2 0a 00 0a 	add	r10,r9,r10
8000fffc:	74 1a       	ld.w	r10,r10[0x4]
8000fffe:	ed ba 00 00 	bld	r10,0x0
80010002:	c2 20       	breq	80010046 <_realloc_r+0xb2>
80010004:	72 1a       	ld.w	r10,r9[0x4]
80010006:	e0 1a ff fc 	andl	r10,0xfffc
8001000a:	f4 00 00 03 	add	r3,r10,r0
8001000e:	0a 39       	cp.w	r9,r5
80010010:	c1 31       	brne	80010036 <_realloc_r+0xa2>
80010012:	ec c7 ff f0 	sub	r7,r6,-16
80010016:	0e 33       	cp.w	r3,r7
80010018:	c1 95       	brlt	8001004a <_realloc_r+0xb6>
8001001a:	e2 06 00 09 	add	r9,r1,r6
8001001e:	0c 13       	sub	r3,r6
80010020:	a1 a3       	sbr	r3,0x0
80010022:	93 13       	st.w	r9[0x4],r3
80010024:	91 29       	st.w	r8[0x8],r9
80010026:	04 9c       	mov	r12,r2
80010028:	62 18       	ld.w	r8,r1[0x4]
8001002a:	08 95       	mov	r5,r4
8001002c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010030:	10 46       	or	r6,r8
80010032:	83 16       	st.w	r1[0x4],r6
80010034:	c0 d9       	rjmp	8001024e <_realloc_r+0x2ba>
80010036:	0c 33       	cp.w	r3,r6
80010038:	c0 95       	brlt	8001004a <_realloc_r+0xb6>
8001003a:	72 28       	ld.w	r8,r9[0x8]
8001003c:	02 97       	mov	r7,r1
8001003e:	72 39       	ld.w	r9,r9[0xc]
80010040:	93 28       	st.w	r9[0x8],r8
80010042:	91 39       	st.w	r8[0xc],r9
80010044:	cd e8       	rjmp	80010200 <_realloc_r+0x26c>
80010046:	30 0a       	mov	r10,0
80010048:	14 99       	mov	r9,r10
8001004a:	ed bc 00 00 	bld	r12,0x0
8001004e:	e0 80 00 97 	breq	8001017c <_realloc_r+0x1e8>
80010052:	62 07       	ld.w	r7,r1[0x0]
80010054:	e2 07 01 07 	sub	r7,r1,r7
80010058:	6e 1c       	ld.w	r12,r7[0x4]
8001005a:	e0 1c ff fc 	andl	r12,0xfffc
8001005e:	58 09       	cp.w	r9,0
80010060:	c5 80       	breq	80010110 <_realloc_r+0x17c>
80010062:	f8 00 00 03 	add	r3,r12,r0
80010066:	0a 39       	cp.w	r9,r5
80010068:	c4 81       	brne	800100f8 <_realloc_r+0x164>
8001006a:	14 03       	add	r3,r10
8001006c:	ec c9 ff f0 	sub	r9,r6,-16
80010070:	12 33       	cp.w	r3,r9
80010072:	c4 f5       	brlt	80010110 <_realloc_r+0x17c>
80010074:	6e 3a       	ld.w	r10,r7[0xc]
80010076:	6e 29       	ld.w	r9,r7[0x8]
80010078:	95 29       	st.w	r10[0x8],r9
8001007a:	93 3a       	st.w	r9[0xc],r10
8001007c:	ee c5 ff f8 	sub	r5,r7,-8
80010080:	e0 ca 00 04 	sub	r10,r0,4
80010084:	e0 4a 00 24 	cp.w	r10,36
80010088:	e0 8b 00 25 	brhi	800100d2 <_realloc_r+0x13e>
8001008c:	0a 99       	mov	r9,r5
8001008e:	59 3a       	cp.w	r10,19
80010090:	e0 88 00 1a 	brls	800100c4 <_realloc_r+0x130>
80010094:	09 09       	ld.w	r9,r4++
80010096:	8b 09       	st.w	r5[0x0],r9
80010098:	09 09       	ld.w	r9,r4++
8001009a:	8f 39       	st.w	r7[0xc],r9
8001009c:	ee c9 ff f0 	sub	r9,r7,-16
800100a0:	59 ba       	cp.w	r10,27
800100a2:	e0 88 00 11 	brls	800100c4 <_realloc_r+0x130>
800100a6:	09 0b       	ld.w	r11,r4++
800100a8:	93 0b       	st.w	r9[0x0],r11
800100aa:	09 09       	ld.w	r9,r4++
800100ac:	8f 59       	st.w	r7[0x14],r9
800100ae:	ee c9 ff e8 	sub	r9,r7,-24
800100b2:	e0 4a 00 24 	cp.w	r10,36
800100b6:	c0 71       	brne	800100c4 <_realloc_r+0x130>
800100b8:	09 0a       	ld.w	r10,r4++
800100ba:	93 0a       	st.w	r9[0x0],r10
800100bc:	ee c9 ff e0 	sub	r9,r7,-32
800100c0:	09 0a       	ld.w	r10,r4++
800100c2:	8f 7a       	st.w	r7[0x1c],r10
800100c4:	09 0a       	ld.w	r10,r4++
800100c6:	12 aa       	st.w	r9++,r10
800100c8:	68 0a       	ld.w	r10,r4[0x0]
800100ca:	93 0a       	st.w	r9[0x0],r10
800100cc:	68 1a       	ld.w	r10,r4[0x4]
800100ce:	93 1a       	st.w	r9[0x4],r10
800100d0:	c0 78       	rjmp	800100de <_realloc_r+0x14a>
800100d2:	50 08       	stdsp	sp[0x0],r8
800100d4:	08 9b       	mov	r11,r4
800100d6:	0a 9c       	mov	r12,r5
800100d8:	fe b0 fb 3b 	rcall	8000f74e <memmove>
800100dc:	40 08       	lddsp	r8,sp[0x0]
800100de:	ee 06 00 09 	add	r9,r7,r6
800100e2:	0c 13       	sub	r3,r6
800100e4:	a1 a3       	sbr	r3,0x0
800100e6:	93 13       	st.w	r9[0x4],r3
800100e8:	91 29       	st.w	r8[0x8],r9
800100ea:	04 9c       	mov	r12,r2
800100ec:	6e 18       	ld.w	r8,r7[0x4]
800100ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800100f2:	10 46       	or	r6,r8
800100f4:	8f 16       	st.w	r7[0x4],r6
800100f6:	ca c8       	rjmp	8001024e <_realloc_r+0x2ba>
800100f8:	14 03       	add	r3,r10
800100fa:	0c 33       	cp.w	r3,r6
800100fc:	c0 a5       	brlt	80010110 <_realloc_r+0x17c>
800100fe:	72 28       	ld.w	r8,r9[0x8]
80010100:	72 39       	ld.w	r9,r9[0xc]
80010102:	93 28       	st.w	r9[0x8],r8
80010104:	91 39       	st.w	r8[0xc],r9
80010106:	6e 28       	ld.w	r8,r7[0x8]
80010108:	6e 39       	ld.w	r9,r7[0xc]
8001010a:	c0 98       	rjmp	8001011c <_realloc_r+0x188>
8001010c:	00 00       	add	r0,r0
8001010e:	01 c8       	ld.ub	r8,r0[0x4]
80010110:	f8 00 00 03 	add	r3,r12,r0
80010114:	0c 33       	cp.w	r3,r6
80010116:	c3 35       	brlt	8001017c <_realloc_r+0x1e8>
80010118:	6e 39       	ld.w	r9,r7[0xc]
8001011a:	6e 28       	ld.w	r8,r7[0x8]
8001011c:	93 28       	st.w	r9[0x8],r8
8001011e:	91 39       	st.w	r8[0xc],r9
80010120:	e0 ca 00 04 	sub	r10,r0,4
80010124:	ee cc ff f8 	sub	r12,r7,-8
80010128:	e0 4a 00 24 	cp.w	r10,36
8001012c:	e0 8b 00 24 	brhi	80010174 <_realloc_r+0x1e0>
80010130:	59 3a       	cp.w	r10,19
80010132:	e0 88 00 1a 	brls	80010166 <_realloc_r+0x1d2>
80010136:	09 08       	ld.w	r8,r4++
80010138:	99 08       	st.w	r12[0x0],r8
8001013a:	09 08       	ld.w	r8,r4++
8001013c:	8f 38       	st.w	r7[0xc],r8
8001013e:	ee cc ff f0 	sub	r12,r7,-16
80010142:	59 ba       	cp.w	r10,27
80010144:	e0 88 00 11 	brls	80010166 <_realloc_r+0x1d2>
80010148:	09 08       	ld.w	r8,r4++
8001014a:	99 08       	st.w	r12[0x0],r8
8001014c:	09 08       	ld.w	r8,r4++
8001014e:	8f 58       	st.w	r7[0x14],r8
80010150:	ee cc ff e8 	sub	r12,r7,-24
80010154:	e0 4a 00 24 	cp.w	r10,36
80010158:	c0 71       	brne	80010166 <_realloc_r+0x1d2>
8001015a:	09 08       	ld.w	r8,r4++
8001015c:	99 08       	st.w	r12[0x0],r8
8001015e:	ee cc ff e0 	sub	r12,r7,-32
80010162:	09 08       	ld.w	r8,r4++
80010164:	8f 78       	st.w	r7[0x1c],r8
80010166:	09 08       	ld.w	r8,r4++
80010168:	18 a8       	st.w	r12++,r8
8001016a:	68 08       	ld.w	r8,r4[0x0]
8001016c:	99 08       	st.w	r12[0x0],r8
8001016e:	68 18       	ld.w	r8,r4[0x4]
80010170:	99 18       	st.w	r12[0x4],r8
80010172:	c4 78       	rjmp	80010200 <_realloc_r+0x26c>
80010174:	08 9b       	mov	r11,r4
80010176:	fe b0 fa ec 	rcall	8000f74e <memmove>
8001017a:	c4 38       	rjmp	80010200 <_realloc_r+0x26c>
8001017c:	04 9c       	mov	r12,r2
8001017e:	fe b0 f8 93 	rcall	8000f2a4 <_malloc_r>
80010182:	18 95       	mov	r5,r12
80010184:	c3 a0       	breq	800101f8 <_realloc_r+0x264>
80010186:	62 18       	ld.w	r8,r1[0x4]
80010188:	f8 c9 00 08 	sub	r9,r12,8
8001018c:	a1 c8       	cbr	r8,0x0
8001018e:	e2 08 00 08 	add	r8,r1,r8
80010192:	10 39       	cp.w	r9,r8
80010194:	c0 71       	brne	800101a2 <_realloc_r+0x20e>
80010196:	72 13       	ld.w	r3,r9[0x4]
80010198:	02 97       	mov	r7,r1
8001019a:	e0 13 ff fc 	andl	r3,0xfffc
8001019e:	00 03       	add	r3,r0
800101a0:	c3 08       	rjmp	80010200 <_realloc_r+0x26c>
800101a2:	e0 ca 00 04 	sub	r10,r0,4
800101a6:	e0 4a 00 24 	cp.w	r10,36
800101aa:	e0 8b 00 20 	brhi	800101ea <_realloc_r+0x256>
800101ae:	08 99       	mov	r9,r4
800101b0:	18 98       	mov	r8,r12
800101b2:	59 3a       	cp.w	r10,19
800101b4:	e0 88 00 14 	brls	800101dc <_realloc_r+0x248>
800101b8:	13 0b       	ld.w	r11,r9++
800101ba:	10 ab       	st.w	r8++,r11
800101bc:	13 0b       	ld.w	r11,r9++
800101be:	10 ab       	st.w	r8++,r11
800101c0:	59 ba       	cp.w	r10,27
800101c2:	e0 88 00 0d 	brls	800101dc <_realloc_r+0x248>
800101c6:	13 0b       	ld.w	r11,r9++
800101c8:	10 ab       	st.w	r8++,r11
800101ca:	13 0b       	ld.w	r11,r9++
800101cc:	10 ab       	st.w	r8++,r11
800101ce:	e0 4a 00 24 	cp.w	r10,36
800101d2:	c0 51       	brne	800101dc <_realloc_r+0x248>
800101d4:	13 0a       	ld.w	r10,r9++
800101d6:	10 aa       	st.w	r8++,r10
800101d8:	13 0a       	ld.w	r10,r9++
800101da:	10 aa       	st.w	r8++,r10
800101dc:	13 0a       	ld.w	r10,r9++
800101de:	10 aa       	st.w	r8++,r10
800101e0:	72 0a       	ld.w	r10,r9[0x0]
800101e2:	91 0a       	st.w	r8[0x0],r10
800101e4:	72 19       	ld.w	r9,r9[0x4]
800101e6:	91 19       	st.w	r8[0x4],r9
800101e8:	c0 48       	rjmp	800101f0 <_realloc_r+0x25c>
800101ea:	08 9b       	mov	r11,r4
800101ec:	fe b0 fa b1 	rcall	8000f74e <memmove>
800101f0:	08 9b       	mov	r11,r4
800101f2:	04 9c       	mov	r12,r2
800101f4:	fe b0 f5 74 	rcall	8000ecdc <_free_r>
800101f8:	04 9c       	mov	r12,r2
800101fa:	c2 a8       	rjmp	8001024e <_realloc_r+0x2ba>
800101fc:	00 93       	mov	r3,r0
800101fe:	02 97       	mov	r7,r1
80010200:	e6 06 01 09 	sub	r9,r3,r6
80010204:	6e 18       	ld.w	r8,r7[0x4]
80010206:	58 f9       	cp.w	r9,15
80010208:	e0 88 00 16 	brls	80010234 <_realloc_r+0x2a0>
8001020c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010210:	ed e8 10 08 	or	r8,r6,r8
80010214:	8f 18       	st.w	r7[0x4],r8
80010216:	12 98       	mov	r8,r9
80010218:	a1 a8       	sbr	r8,0x0
8001021a:	ee 06 00 0b 	add	r11,r7,r6
8001021e:	f6 09 00 09 	add	r9,r11,r9
80010222:	97 18       	st.w	r11[0x4],r8
80010224:	72 18       	ld.w	r8,r9[0x4]
80010226:	a1 a8       	sbr	r8,0x0
80010228:	2f 8b       	sub	r11,-8
8001022a:	93 18       	st.w	r9[0x4],r8
8001022c:	04 9c       	mov	r12,r2
8001022e:	fe b0 f5 57 	rcall	8000ecdc <_free_r>
80010232:	c0 b8       	rjmp	80010248 <_realloc_r+0x2b4>
80010234:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010238:	e7 e8 10 08 	or	r8,r3,r8
8001023c:	8f 18       	st.w	r7[0x4],r8
8001023e:	ee 03 00 03 	add	r3,r7,r3
80010242:	66 18       	ld.w	r8,r3[0x4]
80010244:	a1 a8       	sbr	r8,0x0
80010246:	87 18       	st.w	r3[0x4],r8
80010248:	04 9c       	mov	r12,r2
8001024a:	ee c5 ff f8 	sub	r5,r7,-8
8001024e:	fe b0 fa a0 	rcall	8000f78e <__malloc_unlock>
80010252:	0a 9c       	mov	r12,r5
80010254:	2f fd       	sub	sp,-4
80010256:	d8 32       	popm	r0-r7,pc

80010258 <__srefill_r>:
80010258:	d4 21       	pushm	r4-r7,lr
8001025a:	16 97       	mov	r7,r11
8001025c:	18 96       	mov	r6,r12
8001025e:	58 0c       	cp.w	r12,0
80010260:	c0 60       	breq	8001026c <__srefill_r+0x14>
80010262:	78 68       	ld.w	r8,r12[0x18]
80010264:	58 08       	cp.w	r8,0
80010266:	c0 31       	brne	8001026c <__srefill_r+0x14>
80010268:	fe b0 f4 3e 	rcall	8000eae4 <__sinit>
8001026c:	4b 78       	lddpc	r8,80010348 <__srefill_r+0xf0>
8001026e:	10 37       	cp.w	r7,r8
80010270:	c0 31       	brne	80010276 <__srefill_r+0x1e>
80010272:	6c 07       	ld.w	r7,r6[0x0]
80010274:	c0 a8       	rjmp	80010288 <__srefill_r+0x30>
80010276:	4b 68       	lddpc	r8,8001034c <__srefill_r+0xf4>
80010278:	10 37       	cp.w	r7,r8
8001027a:	c0 31       	brne	80010280 <__srefill_r+0x28>
8001027c:	6c 17       	ld.w	r7,r6[0x4]
8001027e:	c0 58       	rjmp	80010288 <__srefill_r+0x30>
80010280:	4b 48       	lddpc	r8,80010350 <__srefill_r+0xf8>
80010282:	10 37       	cp.w	r7,r8
80010284:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80010288:	30 08       	mov	r8,0
8001028a:	8f 18       	st.w	r7[0x4],r8
8001028c:	8e 68       	ld.sh	r8,r7[0xc]
8001028e:	ed b8 00 05 	bld	r8,0x5
80010292:	c5 a0       	breq	80010346 <__srefill_r+0xee>
80010294:	ed b8 00 02 	bld	r8,0x2
80010298:	c1 a0       	breq	800102cc <__srefill_r+0x74>
8001029a:	ed b8 00 04 	bld	r8,0x4
8001029e:	c0 60       	breq	800102aa <__srefill_r+0x52>
800102a0:	a7 a8       	sbr	r8,0x6
800102a2:	ae 68       	st.h	r7[0xc],r8
800102a4:	30 98       	mov	r8,9
800102a6:	8d 38       	st.w	r6[0xc],r8
800102a8:	c4 e8       	rjmp	80010344 <__srefill_r+0xec>
800102aa:	ed b8 00 03 	bld	r8,0x3
800102ae:	c0 b1       	brne	800102c4 <__srefill_r+0x6c>
800102b0:	0e 9b       	mov	r11,r7
800102b2:	0c 9c       	mov	r12,r6
800102b4:	fe b0 f3 28 	rcall	8000e904 <_fflush_r>
800102b8:	c4 71       	brne	80010346 <__srefill_r+0xee>
800102ba:	8e 68       	ld.sh	r8,r7[0xc]
800102bc:	8f 6c       	st.w	r7[0x18],r12
800102be:	a3 d8       	cbr	r8,0x3
800102c0:	8f 2c       	st.w	r7[0x8],r12
800102c2:	ae 68       	st.h	r7[0xc],r8
800102c4:	8e 68       	ld.sh	r8,r7[0xc]
800102c6:	a3 a8       	sbr	r8,0x2
800102c8:	ae 68       	st.h	r7[0xc],r8
800102ca:	c1 48       	rjmp	800102f2 <__srefill_r+0x9a>
800102cc:	6e db       	ld.w	r11,r7[0x34]
800102ce:	58 0b       	cp.w	r11,0
800102d0:	c1 10       	breq	800102f2 <__srefill_r+0x9a>
800102d2:	ee c8 ff bc 	sub	r8,r7,-68
800102d6:	10 3b       	cp.w	r11,r8
800102d8:	c0 40       	breq	800102e0 <__srefill_r+0x88>
800102da:	0c 9c       	mov	r12,r6
800102dc:	fe b0 f5 00 	rcall	8000ecdc <_free_r>
800102e0:	30 0c       	mov	r12,0
800102e2:	6f 08       	ld.w	r8,r7[0x40]
800102e4:	8f dc       	st.w	r7[0x34],r12
800102e6:	8f 18       	st.w	r7[0x4],r8
800102e8:	58 08       	cp.w	r8,0
800102ea:	c0 40       	breq	800102f2 <__srefill_r+0x9a>
800102ec:	6e f8       	ld.w	r8,r7[0x3c]
800102ee:	8f 08       	st.w	r7[0x0],r8
800102f0:	d8 22       	popm	r4-r7,pc
800102f2:	6e 48       	ld.w	r8,r7[0x10]
800102f4:	58 08       	cp.w	r8,0
800102f6:	c0 51       	brne	80010300 <__srefill_r+0xa8>
800102f8:	0e 9b       	mov	r11,r7
800102fa:	0c 9c       	mov	r12,r6
800102fc:	fe b0 f7 6a 	rcall	8000f1d0 <__smakebuf_r>
80010300:	8e 68       	ld.sh	r8,r7[0xc]
80010302:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80010306:	c0 70       	breq	80010314 <__srefill_r+0xbc>
80010308:	49 38       	lddpc	r8,80010354 <__srefill_r+0xfc>
8001030a:	fe cb ff b2 	sub	r11,pc,-78
8001030e:	70 0c       	ld.w	r12,r8[0x0]
80010310:	fe b0 f7 28 	rcall	8000f160 <_fwalk>
80010314:	6e 4a       	ld.w	r10,r7[0x10]
80010316:	6e 98       	ld.w	r8,r7[0x24]
80010318:	0c 9c       	mov	r12,r6
8001031a:	8f 0a       	st.w	r7[0x0],r10
8001031c:	6e 59       	ld.w	r9,r7[0x14]
8001031e:	6e 8b       	ld.w	r11,r7[0x20]
80010320:	5d 18       	icall	r8
80010322:	8e 68       	ld.sh	r8,r7[0xc]
80010324:	8f 1c       	st.w	r7[0x4],r12
80010326:	ad d8       	cbr	r8,0xd
80010328:	ae 68       	st.h	r7[0xc],r8
8001032a:	58 0c       	cp.w	r12,0
8001032c:	e0 8a 00 03 	brle	80010332 <__srefill_r+0xda>
80010330:	d8 2a       	popm	r4-r7,pc,r12=0
80010332:	58 0c       	cp.w	r12,0
80010334:	c0 41       	brne	8001033c <__srefill_r+0xe4>
80010336:	a5 b8       	sbr	r8,0x5
80010338:	ae 68       	st.h	r7[0xc],r8
8001033a:	c0 58       	rjmp	80010344 <__srefill_r+0xec>
8001033c:	a7 a8       	sbr	r8,0x6
8001033e:	ae 68       	st.h	r7[0xc],r8
80010340:	30 08       	mov	r8,0
80010342:	8f 18       	st.w	r7[0x4],r8
80010344:	dc 2a       	popm	r4-r7,pc,r12=-1
80010346:	dc 2a       	popm	r4-r7,pc,r12=-1
80010348:	80 01       	ld.sh	r1,r0[0x0]
8001034a:	42 80       	lddsp	r0,sp[0xa0]
8001034c:	80 01       	ld.sh	r1,r0[0x0]
8001034e:	42 a0       	lddsp	r0,sp[0xa8]
80010350:	80 01       	ld.sh	r1,r0[0x0]
80010352:	42 c0       	lddsp	r0,sp[0xb0]
80010354:	80 01       	ld.sh	r1,r0[0x0]
80010356:	3e 68       	mov	r8,-26

80010358 <lflush>:
80010358:	d4 01       	pushm	lr
8001035a:	98 68       	ld.sh	r8,r12[0xc]
8001035c:	e2 18 00 09 	andl	r8,0x9,COH
80010360:	58 98       	cp.w	r8,9
80010362:	c0 20       	breq	80010366 <lflush+0xe>
80010364:	d8 0a       	popm	pc,r12=0
80010366:	fe b0 f3 57 	rcall	8000ea14 <fflush>
8001036a:	d8 02       	popm	pc

8001036c <_sbrk_r>:
8001036c:	d4 21       	pushm	r4-r7,lr
8001036e:	30 08       	mov	r8,0
80010370:	18 97       	mov	r7,r12
80010372:	48 76       	lddpc	r6,8001038c <_sbrk_r+0x20>
80010374:	16 9c       	mov	r12,r11
80010376:	8d 08       	st.w	r6[0x0],r8
80010378:	e0 a0 0a 08 	rcall	80011788 <_sbrk>
8001037c:	5b fc       	cp.w	r12,-1
8001037e:	c0 51       	brne	80010388 <_sbrk_r+0x1c>
80010380:	6c 08       	ld.w	r8,r6[0x0]
80010382:	58 08       	cp.w	r8,0
80010384:	ef f8 1a 03 	st.wne	r7[0xc],r8
80010388:	d8 22       	popm	r4-r7,pc
8001038a:	d7 03       	nop
8001038c:	00 00       	add	r0,r0
8001038e:	16 2c       	rsub	r12,r11

80010390 <__sccl>:
80010390:	d4 31       	pushm	r0-r7,lr
80010392:	18 9e       	mov	lr,r12
80010394:	17 38       	ld.ub	r8,r11++
80010396:	e0 48 00 5e 	cp.w	r8,94
8001039a:	c0 30       	breq	800103a0 <__sccl+0x10>
8001039c:	30 0a       	mov	r10,0
8001039e:	c0 38       	rjmp	800103a4 <__sccl+0x14>
800103a0:	17 38       	ld.ub	r8,r11++
800103a2:	30 1a       	mov	r10,1
800103a4:	30 09       	mov	r9,0
800103a6:	fc 09 0b 0a 	st.b	lr[r9],r10
800103aa:	2f f9       	sub	r9,-1
800103ac:	e0 49 01 00 	cp.w	r9,256
800103b0:	cf b1       	brne	800103a6 <__sccl+0x16>
800103b2:	58 08       	cp.w	r8,0
800103b4:	c0 41       	brne	800103bc <__sccl+0x2c>
800103b6:	f6 cc 00 01 	sub	r12,r11,1
800103ba:	d8 32       	popm	r0-r7,pc
800103bc:	14 96       	mov	r6,r10
800103be:	32 d4       	mov	r4,45
800103c0:	ec 16 00 01 	eorl	r6,0x1
800103c4:	30 07       	mov	r7,0
800103c6:	35 d5       	mov	r5,93
800103c8:	c0 38       	rjmp	800103ce <__sccl+0x3e>
800103ca:	14 98       	mov	r8,r10
800103cc:	12 9b       	mov	r11,r9
800103ce:	fc 08 0b 06 	st.b	lr[r8],r6
800103d2:	f6 c9 ff ff 	sub	r9,r11,-1
800103d6:	17 8a       	ld.ub	r10,r11[0x0]
800103d8:	12 9c       	mov	r12,r9
800103da:	e8 0a 18 00 	cp.b	r10,r4
800103de:	c0 90       	breq	800103f0 <__sccl+0x60>
800103e0:	ea 0a 18 00 	cp.b	r10,r5
800103e4:	c1 e0       	breq	80010420 <__sccl+0x90>
800103e6:	ee 0a 18 00 	cp.b	r10,r7
800103ea:	cf 01       	brne	800103ca <__sccl+0x3a>
800103ec:	16 9c       	mov	r12,r11
800103ee:	d8 32       	popm	r0-r7,pc
800103f0:	13 8c       	ld.ub	r12,r9[0x0]
800103f2:	10 3c       	cp.w	r12,r8
800103f4:	5f 53       	srlt	r3
800103f6:	e0 4c 00 5d 	cp.w	r12,93
800103fa:	5f 0a       	sreq	r10
800103fc:	e7 ea 10 0a 	or	r10,r3,r10
80010400:	ee 0a 18 00 	cp.b	r10,r7
80010404:	c0 30       	breq	8001040a <__sccl+0x7a>
80010406:	32 d8       	mov	r8,45
80010408:	ce 2b       	rjmp	800103cc <__sccl+0x3c>
8001040a:	f0 ca ff ff 	sub	r10,r8,-1
8001040e:	fc 0a 00 0a 	add	r10,lr,r10
80010412:	14 c6       	st.b	r10++,r6
80010414:	2f f8       	sub	r8,-1
80010416:	18 38       	cp.w	r8,r12
80010418:	cf d5       	brlt	80010412 <__sccl+0x82>
8001041a:	2f eb       	sub	r11,-2
8001041c:	2f e9       	sub	r9,-2
8001041e:	cd cb       	rjmp	800103d6 <__sccl+0x46>
80010420:	d8 32       	popm	r0-r7,pc

80010422 <nanf>:
80010422:	fc 1c 7f c0 	movh	r12,0x7fc0
80010426:	5e fc       	retal	r12

80010428 <__isinfd>:
80010428:	14 98       	mov	r8,r10
8001042a:	fc 19 7f f0 	movh	r9,0x7ff0
8001042e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80010432:	f0 0b 11 00 	rsub	r11,r8,0
80010436:	f7 e8 10 08 	or	r8,r11,r8
8001043a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8001043e:	f2 08 01 08 	sub	r8,r9,r8
80010442:	f0 0c 11 00 	rsub	r12,r8,0
80010446:	f9 e8 10 08 	or	r8,r12,r8
8001044a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8001044e:	2f fc       	sub	r12,-1
80010450:	5e fc       	retal	r12

80010452 <__isnand>:
80010452:	14 98       	mov	r8,r10
80010454:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80010458:	f0 0c 11 00 	rsub	r12,r8,0
8001045c:	10 4c       	or	r12,r8
8001045e:	fc 18 7f f0 	movh	r8,0x7ff0
80010462:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80010466:	f0 0c 01 0c 	sub	r12,r8,r12
8001046a:	bf 9c       	lsr	r12,0x1f
8001046c:	5e fc       	retal	r12
8001046e:	d7 03       	nop

80010470 <__sclose>:
80010470:	d4 01       	pushm	lr
80010472:	96 7b       	ld.sh	r11,r11[0xe]
80010474:	e0 a0 0a 8c 	rcall	8001198c <_close_r>
80010478:	d8 02       	popm	pc
8001047a:	d7 03       	nop

8001047c <__sseek>:
8001047c:	d4 21       	pushm	r4-r7,lr
8001047e:	16 97       	mov	r7,r11
80010480:	96 7b       	ld.sh	r11,r11[0xe]
80010482:	e0 a0 0e 47 	rcall	80012110 <_lseek_r>
80010486:	8e 68       	ld.sh	r8,r7[0xc]
80010488:	10 99       	mov	r9,r8
8001048a:	ad c9       	cbr	r9,0xc
8001048c:	5b fc       	cp.w	r12,-1
8001048e:	ef f9 0c 06 	st.heq	r7[0xc],r9
80010492:	ef fc 1a 15 	st.wne	r7[0x54],r12
80010496:	e0 69 10 00 	mov	r9,4096
8001049a:	f1 d9 e1 38 	orne	r8,r8,r9
8001049e:	ef f8 1c 06 	st.hne	r7[0xc],r8
800104a2:	d8 22       	popm	r4-r7,pc

800104a4 <__swrite>:
800104a4:	d4 21       	pushm	r4-r7,lr
800104a6:	96 68       	ld.sh	r8,r11[0xc]
800104a8:	16 97       	mov	r7,r11
800104aa:	14 95       	mov	r5,r10
800104ac:	12 94       	mov	r4,r9
800104ae:	e2 18 01 00 	andl	r8,0x100,COH
800104b2:	18 96       	mov	r6,r12
800104b4:	c0 60       	breq	800104c0 <__swrite+0x1c>
800104b6:	30 29       	mov	r9,2
800104b8:	30 0a       	mov	r10,0
800104ba:	96 7b       	ld.sh	r11,r11[0xe]
800104bc:	e0 a0 0e 2a 	rcall	80012110 <_lseek_r>
800104c0:	8e 68       	ld.sh	r8,r7[0xc]
800104c2:	ad c8       	cbr	r8,0xc
800104c4:	08 99       	mov	r9,r4
800104c6:	0a 9a       	mov	r10,r5
800104c8:	8e 7b       	ld.sh	r11,r7[0xe]
800104ca:	0c 9c       	mov	r12,r6
800104cc:	ae 68       	st.h	r7[0xc],r8
800104ce:	e0 a0 0a 1f 	rcall	8001190c <_write_r>
800104d2:	d8 22       	popm	r4-r7,pc

800104d4 <__sread>:
800104d4:	d4 21       	pushm	r4-r7,lr
800104d6:	16 97       	mov	r7,r11
800104d8:	96 7b       	ld.sh	r11,r11[0xe]
800104da:	e0 a0 0e 2f 	rcall	80012138 <_read_r>
800104de:	c0 65       	brlt	800104ea <__sread+0x16>
800104e0:	6f 58       	ld.w	r8,r7[0x54]
800104e2:	18 08       	add	r8,r12
800104e4:	ef 48 00 54 	st.w	r7[84],r8
800104e8:	d8 22       	popm	r4-r7,pc
800104ea:	8e 68       	ld.sh	r8,r7[0xc]
800104ec:	ad c8       	cbr	r8,0xc
800104ee:	ae 68       	st.h	r7[0xc],r8
800104f0:	d8 22       	popm	r4-r7,pc
800104f2:	d7 03       	nop

800104f4 <_strtod_r>:
800104f4:	d4 31       	pushm	r0-r7,lr
800104f6:	21 bd       	sub	sp,108
800104f8:	50 ba       	stdsp	sp[0x2c],r10
800104fa:	51 8b       	stdsp	sp[0x60],r11
800104fc:	16 92       	mov	r2,r11
800104fe:	18 96       	mov	r6,r12
80010500:	fa c7 ff b8 	sub	r7,sp,-72
80010504:	30 08       	mov	r8,0
80010506:	30 09       	mov	r9,0
80010508:	30 d5       	mov	r5,13
8001050a:	ee e9 00 00 	st.d	r7[0],r8
8001050e:	32 be       	mov	lr,43
80010510:	32 dc       	mov	r12,45
80010512:	32 0b       	mov	r11,32
80010514:	30 9a       	mov	r10,9
80010516:	41 89       	lddsp	r9,sp[0x60]
80010518:	13 88       	ld.ub	r8,r9[0x0]
8001051a:	ea 08 18 00 	cp.b	r8,r5
8001051e:	e0 8b 00 0b 	brhi	80010534 <_strtod_r+0x40>
80010522:	f4 08 18 00 	cp.b	r8,r10
80010526:	c1 f2       	brcc	80010564 <_strtod_r+0x70>
80010528:	30 09       	mov	r9,0
8001052a:	f2 08 18 00 	cp.b	r8,r9
8001052e:	c1 e1       	brne	8001056a <_strtod_r+0x76>
80010530:	e0 8f 01 fc 	bral	80010928 <_strtod_r+0x434>
80010534:	fc 08 18 00 	cp.b	r8,lr
80010538:	c0 80       	breq	80010548 <_strtod_r+0x54>
8001053a:	f8 08 18 00 	cp.b	r8,r12
8001053e:	c0 80       	breq	8001054e <_strtod_r+0x5a>
80010540:	f6 08 18 00 	cp.b	r8,r11
80010544:	c1 31       	brne	8001056a <_strtod_r+0x76>
80010546:	c0 f8       	rjmp	80010564 <_strtod_r+0x70>
80010548:	30 0e       	mov	lr,0
8001054a:	50 8e       	stdsp	sp[0x20],lr
8001054c:	c0 38       	rjmp	80010552 <_strtod_r+0x5e>
8001054e:	30 1c       	mov	r12,1
80010550:	50 8c       	stdsp	sp[0x20],r12
80010552:	2f f9       	sub	r9,-1
80010554:	51 89       	stdsp	sp[0x60],r9
80010556:	30 08       	mov	r8,0
80010558:	13 89       	ld.ub	r9,r9[0x0]
8001055a:	f0 09 18 00 	cp.b	r9,r8
8001055e:	c0 81       	brne	8001056e <_strtod_r+0x7a>
80010560:	e0 8f 01 e4 	bral	80010928 <_strtod_r+0x434>
80010564:	2f f9       	sub	r9,-1
80010566:	51 89       	stdsp	sp[0x60],r9
80010568:	cd 7b       	rjmp	80010516 <_strtod_r+0x22>
8001056a:	30 0b       	mov	r11,0
8001056c:	50 8b       	stdsp	sp[0x20],r11
8001056e:	41 89       	lddsp	r9,sp[0x60]
80010570:	33 0a       	mov	r10,48
80010572:	13 88       	ld.ub	r8,r9[0x0]
80010574:	f4 08 18 00 	cp.b	r8,r10
80010578:	c0 30       	breq	8001057e <_strtod_r+0x8a>
8001057a:	30 00       	mov	r0,0
8001057c:	c6 98       	rjmp	8001064e <_strtod_r+0x15a>
8001057e:	13 99       	ld.ub	r9,r9[0x1]
80010580:	35 8a       	mov	r10,88
80010582:	f4 09 18 00 	cp.b	r9,r10
80010586:	c0 50       	breq	80010590 <_strtod_r+0x9c>
80010588:	37 8a       	mov	r10,120
8001058a:	f4 09 18 00 	cp.b	r9,r10
8001058e:	c5 41       	brne	80010636 <_strtod_r+0x142>
80010590:	40 8a       	lddsp	r10,sp[0x20]
80010592:	4c 97       	lddpc	r7,800106b4 <_strtod_r+0x1c0>
80010594:	1a da       	st.w	--sp,r10
80010596:	0c 9c       	mov	r12,r6
80010598:	fa c8 ff a0 	sub	r8,sp,-96
8001059c:	fa c9 ff a4 	sub	r9,sp,-92
800105a0:	fa cb ff 9c 	sub	r11,sp,-100
800105a4:	0e 9a       	mov	r10,r7
800105a6:	e0 a0 0a e7 	rcall	80011b74 <__gethex>
800105aa:	2f fd       	sub	sp,-4
800105ac:	18 94       	mov	r4,r12
800105ae:	eb dc c0 03 	bfextu	r5,r12,0x0,0x3
800105b2:	e0 80 05 c6 	breq	8001113e <_strtod_r+0xc4a>
800105b6:	58 65       	cp.w	r5,6
800105b8:	c0 61       	brne	800105c4 <_strtod_r+0xd0>
800105ba:	30 09       	mov	r9,0
800105bc:	51 82       	stdsp	sp[0x60],r2
800105be:	50 89       	stdsp	sp[0x20],r9
800105c0:	e0 8f 05 bf 	bral	8001113e <_strtod_r+0xc4a>
800105c4:	41 7a       	lddsp	r10,sp[0x5c]
800105c6:	58 0a       	cp.w	r10,0
800105c8:	c0 a0       	breq	800105dc <_strtod_r+0xe8>
800105ca:	6e 0b       	ld.w	r11,r7[0x0]
800105cc:	fa cc ff c8 	sub	r12,sp,-56
800105d0:	fe b0 fa 08 	rcall	8000f9e0 <__copybits>
800105d4:	0c 9c       	mov	r12,r6
800105d6:	41 7b       	lddsp	r11,sp[0x5c]
800105d8:	fe b0 fa 42 	rcall	8000fa5c <_Bfree>
800105dc:	41 69       	lddsp	r9,sp[0x58]
800105de:	58 65       	cp.w	r5,6
800105e0:	e0 8b 00 22 	brhi	80010624 <_strtod_r+0x130>
800105e4:	4b 58       	lddpc	r8,800106b8 <_strtod_r+0x1c4>
800105e6:	f0 05 03 2f 	ld.w	pc,r8[r5<<0x2]
800105ea:	30 08       	mov	r8,0
800105ec:	51 28       	stdsp	sp[0x48],r8
800105ee:	c1 a8       	rjmp	80010622 <_strtod_r+0x12e>
800105f0:	40 e8       	lddsp	r8,sp[0x38]
800105f2:	51 38       	stdsp	sp[0x4c],r8
800105f4:	40 f8       	lddsp	r8,sp[0x3c]
800105f6:	c0 98       	rjmp	80010608 <_strtod_r+0x114>
800105f8:	40 e8       	lddsp	r8,sp[0x38]
800105fa:	f2 c9 fb cd 	sub	r9,r9,-1075
800105fe:	51 38       	stdsp	sp[0x4c],r8
80010600:	40 f8       	lddsp	r8,sp[0x3c]
80010602:	b5 c8       	cbr	r8,0x14
80010604:	f1 e9 11 48 	or	r8,r8,r9<<0x14
80010608:	51 28       	stdsp	sp[0x48],r8
8001060a:	c0 d8       	rjmp	80010624 <_strtod_r+0x130>
8001060c:	fc 18 7f f0 	movh	r8,0x7ff0
80010610:	51 28       	stdsp	sp[0x48],r8
80010612:	30 08       	mov	r8,0
80010614:	c0 78       	rjmp	80010622 <_strtod_r+0x12e>
80010616:	e0 68 ff ff 	mov	r8,65535
8001061a:	ea 18 7f ff 	orh	r8,0x7fff
8001061e:	51 28       	stdsp	sp[0x48],r8
80010620:	3f f8       	mov	r8,-1
80010622:	51 38       	stdsp	sp[0x4c],r8
80010624:	e2 14 00 08 	andl	r4,0x8,COH
80010628:	e0 80 05 8b 	breq	8001113e <_strtod_r+0xc4a>
8001062c:	41 28       	lddsp	r8,sp[0x48]
8001062e:	bf b8       	sbr	r8,0x1f
80010630:	51 28       	stdsp	sp[0x48],r8
80010632:	e0 8f 05 86 	bral	8001113e <_strtod_r+0xc4a>
80010636:	10 9a       	mov	r10,r8
80010638:	41 88       	lddsp	r8,sp[0x60]
8001063a:	2f f8       	sub	r8,-1
8001063c:	51 88       	stdsp	sp[0x60],r8
8001063e:	11 88       	ld.ub	r8,r8[0x0]
80010640:	f4 08 18 00 	cp.b	r8,r10
80010644:	cf a0       	breq	80010638 <_strtod_r+0x144>
80010646:	58 08       	cp.w	r8,0
80010648:	e0 80 05 7b 	breq	8001113e <_strtod_r+0xc4a>
8001064c:	30 10       	mov	r0,1
8001064e:	30 04       	mov	r4,0
80010650:	41 88       	lddsp	r8,sp[0x60]
80010652:	08 93       	mov	r3,r4
80010654:	50 78       	stdsp	sp[0x1c],r8
80010656:	08 9a       	mov	r10,r4
80010658:	c1 38       	rjmp	8001067e <_strtod_r+0x18a>
8001065a:	58 8a       	cp.w	r10,8
8001065c:	e0 89 00 06 	brgt	80010668 <_strtod_r+0x174>
80010660:	23 08       	sub	r8,48
80010662:	f0 0b 00 13 	add	r3,r8,r11<<0x1
80010666:	c0 98       	rjmp	80010678 <_strtod_r+0x184>
80010668:	58 fa       	cp.w	r10,15
8001066a:	e0 89 00 07 	brgt	80010678 <_strtod_r+0x184>
8001066e:	e8 04 00 24 	add	r4,r4,r4<<0x2
80010672:	23 08       	sub	r8,48
80010674:	f0 04 00 14 	add	r4,r8,r4<<0x1
80010678:	2f f9       	sub	r9,-1
8001067a:	2f fa       	sub	r10,-1
8001067c:	51 89       	stdsp	sp[0x60],r9
8001067e:	41 89       	lddsp	r9,sp[0x60]
80010680:	e6 03 00 2b 	add	r11,r3,r3<<0x2
80010684:	13 88       	ld.ub	r8,r9[0x0]
80010686:	e0 48 00 2f 	cp.w	r8,47
8001068a:	e0 8a 00 07 	brle	80010698 <_strtod_r+0x1a4>
8001068e:	e0 48 00 39 	cp.w	r8,57
80010692:	fe 9a ff e4 	brle	8001065a <_strtod_r+0x166>
80010696:	c5 f8       	rjmp	80010754 <_strtod_r+0x260>
80010698:	14 95       	mov	r5,r10
8001069a:	e0 48 00 2e 	cp.w	r8,46
8001069e:	c5 b1       	brne	80010754 <_strtod_r+0x260>
800106a0:	2f f9       	sub	r9,-1
800106a2:	51 89       	stdsp	sp[0x60],r9
800106a4:	13 88       	ld.ub	r8,r9[0x0]
800106a6:	58 0a       	cp.w	r10,0
800106a8:	c0 40       	breq	800106b0 <_strtod_r+0x1bc>
800106aa:	30 09       	mov	r9,0
800106ac:	12 9b       	mov	r11,r9
800106ae:	c4 b8       	rjmp	80010744 <_strtod_r+0x250>
800106b0:	14 99       	mov	r9,r10
800106b2:	c0 a8       	rjmp	800106c6 <_strtod_r+0x1d2>
800106b4:	00 00       	add	r0,r0
800106b6:	05 ec       	ld.ub	r12,r2[0x6]
800106b8:	80 01       	ld.sh	r1,r0[0x0]
800106ba:	44 18       	lddsp	r8,sp[0x104]
800106bc:	41 88       	lddsp	r8,sp[0x60]
800106be:	2f f9       	sub	r9,-1
800106c0:	2f f8       	sub	r8,-1
800106c2:	51 88       	stdsp	sp[0x60],r8
800106c4:	11 88       	ld.ub	r8,r8[0x0]
800106c6:	e0 48 00 30 	cp.w	r8,48
800106ca:	cf 90       	breq	800106bc <_strtod_r+0x1c8>
800106cc:	f0 cb 00 31 	sub	r11,r8,49
800106d0:	58 8b       	cp.w	r11,8
800106d2:	e0 88 00 07 	brls	800106e0 <_strtod_r+0x1ec>
800106d6:	30 0a       	mov	r10,0
800106d8:	30 11       	mov	r1,1
800106da:	14 9b       	mov	r11,r10
800106dc:	50 11       	stdsp	sp[0x4],r1
800106de:	c3 f8       	rjmp	8001075c <_strtod_r+0x268>
800106e0:	12 9b       	mov	r11,r9
800106e2:	41 8e       	lddsp	lr,sp[0x60]
800106e4:	30 09       	mov	r9,0
800106e6:	50 7e       	stdsp	sp[0x1c],lr
800106e8:	2f f9       	sub	r9,-1
800106ea:	23 08       	sub	r8,48
800106ec:	c2 80       	breq	8001073c <_strtod_r+0x248>
800106ee:	12 0b       	add	r11,r9
800106f0:	30 1e       	mov	lr,1
800106f2:	c1 08       	rjmp	80010712 <_strtod_r+0x21e>
800106f4:	18 95       	mov	r5,r12
800106f6:	20 1c       	sub	r12,1
800106f8:	58 8c       	cp.w	r12,8
800106fa:	e0 89 00 05 	brgt	80010704 <_strtod_r+0x210>
800106fe:	e2 03 15 01 	lsl	r3,r1,0x1
80010702:	c0 78       	rjmp	80010710 <_strtod_r+0x21c>
80010704:	59 05       	cp.w	r5,16
80010706:	e0 89 00 05 	brgt	80010710 <_strtod_r+0x21c>
8001070a:	e8 04 00 24 	add	r4,r4,r4<<0x2
8001070e:	a1 74       	lsl	r4,0x1
80010710:	2f fe       	sub	lr,-1
80010712:	e6 03 00 21 	add	r1,r3,r3<<0x2
80010716:	ea cc ff ff 	sub	r12,r5,-1
8001071a:	12 3e       	cp.w	lr,r9
8001071c:	ce c5       	brlt	800106f4 <_strtod_r+0x200>
8001071e:	58 85       	cp.w	r5,8
80010720:	e0 89 00 05 	brgt	8001072a <_strtod_r+0x236>
80010724:	f0 01 00 13 	add	r3,r8,r1<<0x1
80010728:	c0 88       	rjmp	80010738 <_strtod_r+0x244>
8001072a:	59 0c       	cp.w	r12,16
8001072c:	e0 89 00 06 	brgt	80010738 <_strtod_r+0x244>
80010730:	e8 04 00 24 	add	r4,r4,r4<<0x2
80010734:	f0 04 00 14 	add	r4,r8,r4<<0x1
80010738:	18 95       	mov	r5,r12
8001073a:	30 09       	mov	r9,0
8001073c:	41 88       	lddsp	r8,sp[0x60]
8001073e:	2f f8       	sub	r8,-1
80010740:	51 88       	stdsp	sp[0x60],r8
80010742:	11 88       	ld.ub	r8,r8[0x0]
80010744:	f0 cc 00 30 	sub	r12,r8,48
80010748:	58 9c       	cp.w	r12,9
8001074a:	fe 98 ff cf 	brls	800106e8 <_strtod_r+0x1f4>
8001074e:	30 1c       	mov	r12,1
80010750:	50 1c       	stdsp	sp[0x4],r12
80010752:	c0 58       	rjmp	8001075c <_strtod_r+0x268>
80010754:	30 09       	mov	r9,0
80010756:	14 95       	mov	r5,r10
80010758:	12 9b       	mov	r11,r9
8001075a:	50 19       	stdsp	sp[0x4],r9
8001075c:	e0 48 00 45 	cp.w	r8,69
80010760:	5f 0e       	sreq	lr
80010762:	e0 48 00 65 	cp.w	r8,101
80010766:	5f 0c       	sreq	r12
80010768:	fd ec 10 0c 	or	r12,lr,r12
8001076c:	c6 60       	breq	80010838 <_strtod_r+0x344>
8001076e:	eb e9 10 08 	or	r8,r5,r9
80010772:	00 48       	or	r8,r0
80010774:	e0 80 00 da 	breq	80010928 <_strtod_r+0x434>
80010778:	41 82       	lddsp	r2,sp[0x60]
8001077a:	e4 cc ff ff 	sub	r12,r2,-1
8001077e:	51 8c       	stdsp	sp[0x60],r12
80010780:	32 be       	mov	lr,43
80010782:	19 88       	ld.ub	r8,r12[0x0]
80010784:	fc 08 18 00 	cp.b	r8,lr
80010788:	c0 60       	breq	80010794 <_strtod_r+0x2a0>
8001078a:	32 de       	mov	lr,45
8001078c:	fc 08 18 00 	cp.b	r8,lr
80010790:	c0 51       	brne	8001079a <_strtod_r+0x2a6>
80010792:	c0 78       	rjmp	800107a0 <_strtod_r+0x2ac>
80010794:	30 08       	mov	r8,0
80010796:	50 c8       	stdsp	sp[0x30],r8
80010798:	c0 68       	rjmp	800107a4 <_strtod_r+0x2b0>
8001079a:	30 01       	mov	r1,0
8001079c:	50 c1       	stdsp	sp[0x30],r1
8001079e:	c0 68       	rjmp	800107aa <_strtod_r+0x2b6>
800107a0:	30 1e       	mov	lr,1
800107a2:	50 ce       	stdsp	sp[0x30],lr
800107a4:	2f fc       	sub	r12,-1
800107a6:	51 8c       	stdsp	sp[0x60],r12
800107a8:	19 88       	ld.ub	r8,r12[0x0]
800107aa:	f0 cc 00 30 	sub	r12,r8,48
800107ae:	58 9c       	cp.w	r12,9
800107b0:	e0 88 00 08 	brls	800107c0 <_strtod_r+0x2cc>
800107b4:	c3 e8       	rjmp	80010830 <_strtod_r+0x33c>
800107b6:	41 88       	lddsp	r8,sp[0x60]
800107b8:	2f f8       	sub	r8,-1
800107ba:	51 88       	stdsp	sp[0x60],r8
800107bc:	11 88       	ld.ub	r8,r8[0x0]
800107be:	c0 28       	rjmp	800107c2 <_strtod_r+0x2ce>
800107c0:	40 ce       	lddsp	lr,sp[0x30]
800107c2:	e0 48 00 30 	cp.w	r8,48
800107c6:	cf 80       	breq	800107b6 <_strtod_r+0x2c2>
800107c8:	50 ce       	stdsp	sp[0x30],lr
800107ca:	f0 cc 00 31 	sub	r12,r8,49
800107ce:	58 8c       	cp.w	r12,8
800107d0:	e0 8b 00 34 	brhi	80010838 <_strtod_r+0x344>
800107d4:	41 8c       	lddsp	r12,sp[0x60]
800107d6:	23 08       	sub	r8,48
800107d8:	50 3c       	stdsp	sp[0xc],r12
800107da:	50 98       	stdsp	sp[0x24],r8
800107dc:	10 9c       	mov	r12,r8
800107de:	c0 58       	rjmp	800107e8 <_strtod_r+0x2f4>
800107e0:	23 08       	sub	r8,48
800107e2:	40 51       	lddsp	r1,sp[0x14]
800107e4:	f0 01 00 1c 	add	r12,r8,r1<<0x1
800107e8:	41 81       	lddsp	r1,sp[0x60]
800107ea:	f8 0c 00 28 	add	r8,r12,r12<<0x2
800107ee:	2f f1       	sub	r1,-1
800107f0:	50 58       	stdsp	sp[0x14],r8
800107f2:	51 81       	stdsp	sp[0x60],r1
800107f4:	03 88       	ld.ub	r8,r1[0x0]
800107f6:	e0 48 00 2f 	cp.w	r8,47
800107fa:	e0 8a 00 06 	brle	80010806 <_strtod_r+0x312>
800107fe:	e0 48 00 39 	cp.w	r8,57
80010802:	fe 9a ff ef 	brle	800107e0 <_strtod_r+0x2ec>
80010806:	50 ce       	stdsp	sp[0x30],lr
80010808:	40 3e       	lddsp	lr,sp[0xc]
8001080a:	1c 11       	sub	r1,lr
8001080c:	50 9c       	stdsp	sp[0x24],r12
8001080e:	58 81       	cp.w	r1,8
80010810:	5f 9c       	srgt	r12
80010812:	40 91       	lddsp	r1,sp[0x24]
80010814:	e0 41 4e 1f 	cp.w	r1,19999
80010818:	5f 9e       	srgt	lr
8001081a:	1c 4c       	or	r12,lr
8001081c:	e0 6e 4e 1f 	mov	lr,19999
80010820:	fc 01 17 10 	movne	r1,lr
80010824:	50 31       	stdsp	sp[0xc],r1
80010826:	40 cc       	lddsp	r12,sp[0x30]
80010828:	58 0c       	cp.w	r12,0
8001082a:	c0 90       	breq	8001083c <_strtod_r+0x348>
8001082c:	5c 31       	neg	r1
8001082e:	c0 38       	rjmp	80010834 <_strtod_r+0x340>
80010830:	51 82       	stdsp	sp[0x60],r2
80010832:	30 01       	mov	r1,0
80010834:	50 31       	stdsp	sp[0xc],r1
80010836:	c0 38       	rjmp	8001083c <_strtod_r+0x348>
80010838:	30 0e       	mov	lr,0
8001083a:	50 3e       	stdsp	sp[0xc],lr
8001083c:	58 05       	cp.w	r5,0
8001083e:	c7 a1       	brne	80010932 <_strtod_r+0x43e>
80010840:	00 49       	or	r9,r0
80010842:	e0 81 04 7e 	brne	8001113e <_strtod_r+0xc4a>
80010846:	40 1c       	lddsp	r12,sp[0x4]
80010848:	58 0c       	cp.w	r12,0
8001084a:	c6 f1       	brne	80010928 <_strtod_r+0x434>
8001084c:	e0 48 00 4e 	cp.w	r8,78
80010850:	c3 c0       	breq	800108c8 <_strtod_r+0x3d4>
80010852:	e0 89 00 06 	brgt	8001085e <_strtod_r+0x36a>
80010856:	e0 48 00 49 	cp.w	r8,73
8001085a:	c6 71       	brne	80010928 <_strtod_r+0x434>
8001085c:	c0 88       	rjmp	8001086c <_strtod_r+0x378>
8001085e:	e0 48 00 69 	cp.w	r8,105
80010862:	c0 50       	breq	8001086c <_strtod_r+0x378>
80010864:	e0 48 00 6e 	cp.w	r8,110
80010868:	c6 01       	brne	80010928 <_strtod_r+0x434>
8001086a:	c2 f8       	rjmp	800108c8 <_strtod_r+0x3d4>
8001086c:	41 88       	lddsp	r8,sp[0x60]
8001086e:	4d 4a       	lddpc	r10,800109bc <_strtod_r+0x4c8>
80010870:	c0 d8       	rjmp	8001088a <_strtod_r+0x396>
80010872:	2f f8       	sub	r8,-1
80010874:	11 89       	ld.ub	r9,r8[0x0]
80010876:	e0 49 00 40 	cp.w	r9,64
8001087a:	e0 8a 00 06 	brle	80010886 <_strtod_r+0x392>
8001087e:	e0 49 00 5a 	cp.w	r9,90
80010882:	f7 b9 0a e0 	suble	r9,-32
80010886:	16 39       	cp.w	r9,r11
80010888:	c5 01       	brne	80010928 <_strtod_r+0x434>
8001088a:	15 3b       	ld.ub	r11,r10++
8001088c:	58 0b       	cp.w	r11,0
8001088e:	cf 21       	brne	80010872 <_strtod_r+0x37e>
80010890:	51 88       	stdsp	sp[0x60],r8
80010892:	10 9a       	mov	r10,r8
80010894:	4c bb       	lddpc	r11,800109c0 <_strtod_r+0x4cc>
80010896:	c0 c8       	rjmp	800108ae <_strtod_r+0x3ba>
80010898:	15 89       	ld.ub	r9,r10[0x0]
8001089a:	e0 49 00 40 	cp.w	r9,64
8001089e:	e0 8a 00 06 	brle	800108aa <_strtod_r+0x3b6>
800108a2:	e0 49 00 5a 	cp.w	r9,90
800108a6:	f7 b9 0a e0 	suble	r9,-32
800108aa:	18 39       	cp.w	r9,r12
800108ac:	c0 91       	brne	800108be <_strtod_r+0x3ca>
800108ae:	f4 c9 ff ff 	sub	r9,r10,-1
800108b2:	17 3c       	ld.ub	r12,r11++
800108b4:	12 9a       	mov	r10,r9
800108b6:	58 0c       	cp.w	r12,0
800108b8:	cf 01       	brne	80010898 <_strtod_r+0x3a4>
800108ba:	51 89       	stdsp	sp[0x60],r9
800108bc:	c0 38       	rjmp	800108c2 <_strtod_r+0x3ce>
800108be:	2f f8       	sub	r8,-1
800108c0:	51 88       	stdsp	sp[0x60],r8
800108c2:	fc 18 7f f0 	movh	r8,0x7ff0
800108c6:	c2 c8       	rjmp	8001091e <_strtod_r+0x42a>
800108c8:	41 89       	lddsp	r9,sp[0x60]
800108ca:	4b fa       	lddpc	r10,800109c4 <_strtod_r+0x4d0>
800108cc:	c0 c8       	rjmp	800108e4 <_strtod_r+0x3f0>
800108ce:	13 88       	ld.ub	r8,r9[0x0]
800108d0:	e0 48 00 40 	cp.w	r8,64
800108d4:	e0 8a 00 06 	brle	800108e0 <_strtod_r+0x3ec>
800108d8:	e0 48 00 5a 	cp.w	r8,90
800108dc:	f7 b8 0a e0 	suble	r8,-32
800108e0:	16 38       	cp.w	r8,r11
800108e2:	c2 31       	brne	80010928 <_strtod_r+0x434>
800108e4:	f2 c8 ff ff 	sub	r8,r9,-1
800108e8:	15 3b       	ld.ub	r11,r10++
800108ea:	10 99       	mov	r9,r8
800108ec:	58 0b       	cp.w	r11,0
800108ee:	cf 01       	brne	800108ce <_strtod_r+0x3da>
800108f0:	51 88       	stdsp	sp[0x60],r8
800108f2:	11 89       	ld.ub	r9,r8[0x0]
800108f4:	32 88       	mov	r8,40
800108f6:	f0 09 18 00 	cp.b	r9,r8
800108fa:	c1 01       	brne	8001091a <_strtod_r+0x426>
800108fc:	fa ca ff c8 	sub	r10,sp,-56
80010900:	4b 2b       	lddpc	r11,800109c8 <_strtod_r+0x4d4>
80010902:	fa cc ff a0 	sub	r12,sp,-96
80010906:	e0 a0 0b 47 	rcall	80011f94 <__hexnan>
8001090a:	58 5c       	cp.w	r12,5
8001090c:	c0 71       	brne	8001091a <_strtod_r+0x426>
8001090e:	40 f8       	lddsp	r8,sp[0x3c]
80010910:	ea 18 7f f0 	orh	r8,0x7ff0
80010914:	8f 08       	st.w	r7[0x0],r8
80010916:	40 e8       	lddsp	r8,sp[0x38]
80010918:	c0 58       	rjmp	80010922 <_strtod_r+0x42e>
8001091a:	fc 18 7f f8 	movh	r8,0x7ff8
8001091e:	8f 08       	st.w	r7[0x0],r8
80010920:	30 08       	mov	r8,0
80010922:	8f 18       	st.w	r7[0x4],r8
80010924:	e0 8f 04 0d 	bral	8001113e <_strtod_r+0xc4a>
80010928:	30 0b       	mov	r11,0
8001092a:	51 82       	stdsp	sp[0x60],r2
8001092c:	50 8b       	stdsp	sp[0x20],r11
8001092e:	e0 8f 04 08 	bral	8001113e <_strtod_r+0xc4a>
80010932:	58 0a       	cp.w	r10,0
80010934:	ea 0a 17 00 	moveq	r10,r5
80010938:	40 31       	lddsp	r1,sp[0xc]
8001093a:	50 5a       	stdsp	sp[0x14],r10
8001093c:	16 11       	sub	r1,r11
8001093e:	06 9c       	mov	r12,r3
80010940:	e0 a0 0e 63 	rcall	80012606 <__avr32_u32_to_f64>
80010944:	ee eb 00 00 	st.d	r7[0],r10
80010948:	31 02       	mov	r2,16
8001094a:	ea 02 0d 42 	min	r2,r5,r2
8001094e:	58 92       	cp.w	r2,9
80010950:	e0 8a 00 18 	brle	80010980 <_strtod_r+0x48c>
80010954:	fa e8 00 48 	ld.d	r8,sp[72]
80010958:	e4 cb 00 09 	sub	r11,r2,9
8001095c:	49 ca       	lddpc	r10,800109cc <_strtod_r+0x4d8>
8001095e:	f4 0b 02 3a 	ld.d	r10,r10[r11<<0x3]
80010962:	e0 a0 0b ff 	rcall	80012160 <__avr32_f64_mul>
80010966:	08 9c       	mov	r12,r4
80010968:	fa eb 00 04 	st.d	sp[4],r10
8001096c:	e0 a0 0e 4d 	rcall	80012606 <__avr32_u32_to_f64>
80010970:	14 98       	mov	r8,r10
80010972:	16 99       	mov	r9,r11
80010974:	fa ea 00 04 	ld.d	r10,sp[4]
80010978:	e0 a0 0d ae 	rcall	800124d4 <__avr32_f64_add>
8001097c:	ee eb 00 00 	st.d	r7[0],r10
80010980:	58 f5       	cp.w	r5,15
80010982:	e0 89 00 33 	brgt	800109e8 <_strtod_r+0x4f4>
80010986:	58 01       	cp.w	r1,0
80010988:	e0 80 03 db 	breq	8001113e <_strtod_r+0xc4a>
8001098c:	e0 8a 00 22 	brle	800109d0 <_strtod_r+0x4dc>
80010990:	59 61       	cp.w	r1,22
80010992:	e0 8a 00 0a 	brle	800109a6 <_strtod_r+0x4b2>
80010996:	ea 08 11 0f 	rsub	r8,r5,15
8001099a:	f0 c9 ff ea 	sub	r9,r8,-22
8001099e:	12 31       	cp.w	r1,r9
800109a0:	e0 89 00 24 	brgt	800109e8 <_strtod_r+0x4f4>
800109a4:	10 11       	sub	r1,r8
800109a6:	48 a8       	lddpc	r8,800109cc <_strtod_r+0x4d8>
800109a8:	fa ea 00 48 	ld.d	r10,sp[72]
800109ac:	f0 01 02 38 	ld.d	r8,r8[r1<<0x3]
800109b0:	e0 a0 0b d8 	rcall	80012160 <__avr32_f64_mul>
800109b4:	ee eb 00 00 	st.d	r7[0],r10
800109b8:	e0 8f 03 c3 	bral	8001113e <_strtod_r+0xc4a>
800109bc:	80 01       	ld.sh	r1,r0[0x0]
800109be:	44 34       	lddsp	r4,sp[0x10c]
800109c0:	80 01       	ld.sh	r1,r0[0x0]
800109c2:	44 38       	lddsp	r8,sp[0x10c]
800109c4:	80 01       	ld.sh	r1,r0[0x0]
800109c6:	44 40       	lddsp	r0,sp[0x110]
800109c8:	00 00       	add	r0,r0
800109ca:	05 d8       	ld.ub	r8,r2[0x5]
800109cc:	80 01       	ld.sh	r1,r0[0x0]
800109ce:	43 28       	lddsp	r8,sp[0xc8]
800109d0:	5a a1       	cp.w	r1,-22
800109d2:	c0 b5       	brlt	800109e8 <_strtod_r+0x4f4>
800109d4:	4c f8       	lddpc	r8,80010b10 <_strtod_r+0x61c>
800109d6:	fa ea 00 48 	ld.d	r10,sp[72]
800109da:	f0 01 01 31 	sub	r1,r8,r1<<0x3
800109de:	e2 e8 00 00 	ld.d	r8,r1[0]
800109e2:	e0 a0 0f 01 	rcall	800127e4 <__avr32_f64_div>
800109e6:	ce 7b       	rjmp	800109b4 <_strtod_r+0x4c0>
800109e8:	ea 02 01 04 	sub	r4,r5,r2
800109ec:	02 04       	add	r4,r1
800109ee:	58 04       	cp.w	r4,0
800109f0:	e0 8a 00 6f 	brle	80010ace <_strtod_r+0x5da>
800109f4:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
800109f8:	c0 a0       	breq	80010a0c <_strtod_r+0x518>
800109fa:	fa ea 00 48 	ld.d	r10,sp[72]
800109fe:	4c 59       	lddpc	r9,80010b10 <_strtod_r+0x61c>
80010a00:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80010a04:	e0 a0 0b ae 	rcall	80012160 <__avr32_f64_mul>
80010a08:	ee eb 00 00 	st.d	r7[0],r10
80010a0c:	e0 14 ff f0 	andl	r4,0xfff0
80010a10:	e0 80 00 d4 	breq	80010bb8 <_strtod_r+0x6c4>
80010a14:	e0 44 01 34 	cp.w	r4,308
80010a18:	e0 8a 00 15 	brle	80010a42 <_strtod_r+0x54e>
80010a1c:	30 05       	mov	r5,0
80010a1e:	0a 92       	mov	r2,r5
80010a20:	50 75       	stdsp	sp[0x1c],r5
80010a22:	0a 90       	mov	r0,r5
80010a24:	c0 28       	rjmp	80010a28 <_strtod_r+0x534>
80010a26:	06 95       	mov	r5,r3
80010a28:	32 28       	mov	r8,34
80010a2a:	8d 38       	st.w	r6[0xc],r8
80010a2c:	fc 18 7f f0 	movh	r8,0x7ff0
80010a30:	8f 08       	st.w	r7[0x0],r8
80010a32:	30 08       	mov	r8,0
80010a34:	8f 18       	st.w	r7[0x4],r8
80010a36:	40 7a       	lddsp	r10,sp[0x1c]
80010a38:	58 0a       	cp.w	r10,0
80010a3a:	e0 81 03 6e 	brne	80011116 <_strtod_r+0xc22>
80010a3e:	e0 8f 03 80 	bral	8001113e <_strtod_r+0xc4a>
80010a42:	fa e8 00 48 	ld.d	r8,sp[72]
80010a46:	a5 44       	asr	r4,0x4
80010a48:	fa e9 00 04 	st.d	sp[4],r8
80010a4c:	4b 22       	lddpc	r2,80010b14 <_strtod_r+0x620>
80010a4e:	30 00       	mov	r0,0
80010a50:	c0 f8       	rjmp	80010a6e <_strtod_r+0x57a>
80010a52:	2f f0       	sub	r0,-1
80010a54:	ed b4 00 00 	bld	r4,0x0
80010a58:	c0 91       	brne	80010a6a <_strtod_r+0x576>
80010a5a:	fa ea 00 04 	ld.d	r10,sp[4]
80010a5e:	e4 e8 00 00 	ld.d	r8,r2[0]
80010a62:	e0 a0 0b 7f 	rcall	80012160 <__avr32_f64_mul>
80010a66:	ee eb 00 00 	st.d	r7[0],r10
80010a6a:	a1 54       	asr	r4,0x1
80010a6c:	2f 82       	sub	r2,-8
80010a6e:	58 14       	cp.w	r4,1
80010a70:	fe 99 ff f1 	brgt	80010a52 <_strtod_r+0x55e>
80010a74:	41 24       	lddsp	r4,sp[0x48]
80010a76:	fc 18 fc b0 	movh	r8,0xfcb0
80010a7a:	e8 08 00 08 	add	r8,r4,r8
80010a7e:	8f 08       	st.w	r7[0x0],r8
80010a80:	4a 58       	lddpc	r8,80010b14 <_strtod_r+0x620>
80010a82:	fa ea 00 48 	ld.d	r10,sp[72]
80010a86:	f0 00 02 38 	ld.d	r8,r8[r0<<0x3]
80010a8a:	e0 a0 0b 6b 	rcall	80012160 <__avr32_f64_mul>
80010a8e:	ee eb 00 00 	st.d	r7[0],r10
80010a92:	08 98       	mov	r8,r4
80010a94:	fc 1e 7c a0 	movh	lr,0x7ca0
80010a98:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80010a9c:	1c 38       	cp.w	r8,lr
80010a9e:	fe 9b ff bf 	brhi	80010a1c <_strtod_r+0x528>
80010aa2:	fc 1c 7c 90 	movh	r12,0x7c90
80010aa6:	18 38       	cp.w	r8,r12
80010aa8:	e0 88 00 0c 	brls	80010ac0 <_strtod_r+0x5cc>
80010aac:	e0 68 ff ff 	mov	r8,65535
80010ab0:	ea 18 7f ef 	orh	r8,0x7fef
80010ab4:	8f 08       	st.w	r7[0x0],r8
80010ab6:	3f f8       	mov	r8,-1
80010ab8:	8f 18       	st.w	r7[0x4],r8
80010aba:	30 0b       	mov	r11,0
80010abc:	50 1b       	stdsp	sp[0x4],r11
80010abe:	c7 f8       	rjmp	80010bbc <_strtod_r+0x6c8>
80010ac0:	fc 18 03 50 	movh	r8,0x350
80010ac4:	10 04       	add	r4,r8
80010ac6:	8f 04       	st.w	r7[0x0],r4
80010ac8:	30 0a       	mov	r10,0
80010aca:	50 1a       	stdsp	sp[0x4],r10
80010acc:	c7 88       	rjmp	80010bbc <_strtod_r+0x6c8>
80010ace:	58 04       	cp.w	r4,0
80010ad0:	c7 40       	breq	80010bb8 <_strtod_r+0x6c4>
80010ad2:	5c 34       	neg	r4
80010ad4:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
80010ad8:	c0 a0       	breq	80010aec <_strtod_r+0x5f8>
80010ada:	fa ea 00 48 	ld.d	r10,sp[72]
80010ade:	48 d9       	lddpc	r9,80010b10 <_strtod_r+0x61c>
80010ae0:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80010ae4:	e0 a0 0e 80 	rcall	800127e4 <__avr32_f64_div>
80010ae8:	ee eb 00 00 	st.d	r7[0],r10
80010aec:	a5 44       	asr	r4,0x4
80010aee:	c6 50       	breq	80010bb8 <_strtod_r+0x6c4>
80010af0:	59 f4       	cp.w	r4,31
80010af2:	e0 89 00 51 	brgt	80010b94 <_strtod_r+0x6a0>
80010af6:	08 98       	mov	r8,r4
80010af8:	e2 18 00 10 	andl	r8,0x10,COH
80010afc:	f9 b8 01 6a 	movne	r8,106
80010b00:	48 62       	lddpc	r2,80010b18 <_strtod_r+0x624>
80010b02:	50 18       	stdsp	sp[0x4],r8
80010b04:	fa e8 00 48 	ld.d	r8,sp[72]
80010b08:	fa e9 00 0c 	st.d	sp[12],r8
80010b0c:	c1 58       	rjmp	80010b36 <_strtod_r+0x642>
80010b0e:	d7 03       	nop
80010b10:	80 01       	ld.sh	r1,r0[0x0]
80010b12:	43 28       	lddsp	r8,sp[0xc8]
80010b14:	80 01       	ld.sh	r1,r0[0x0]
80010b16:	43 f0       	lddsp	r0,sp[0xfc]
80010b18:	80 01       	ld.sh	r1,r0[0x0]
80010b1a:	44 44       	lddsp	r4,sp[0x110]
80010b1c:	ed b4 00 00 	bld	r4,0x0
80010b20:	c0 91       	brne	80010b32 <_strtod_r+0x63e>
80010b22:	fa ea 00 0c 	ld.d	r10,sp[12]
80010b26:	e4 e8 00 00 	ld.d	r8,r2[0]
80010b2a:	e0 a0 0b 1b 	rcall	80012160 <__avr32_f64_mul>
80010b2e:	ee eb 00 00 	st.d	r7[0],r10
80010b32:	a1 54       	asr	r4,0x1
80010b34:	2f 82       	sub	r2,-8
80010b36:	58 04       	cp.w	r4,0
80010b38:	fe 99 ff f2 	brgt	80010b1c <_strtod_r+0x628>
80010b3c:	40 18       	lddsp	r8,sp[0x4]
80010b3e:	58 08       	cp.w	r8,0
80010b40:	c2 30       	breq	80010b86 <_strtod_r+0x692>
80010b42:	41 29       	lddsp	r9,sp[0x48]
80010b44:	f1 d9 c2 8b 	bfextu	r8,r9,0x14,0xb
80010b48:	f0 08 11 6b 	rsub	r8,r8,107
80010b4c:	58 08       	cp.w	r8,0
80010b4e:	e0 8a 00 1c 	brle	80010b86 <_strtod_r+0x692>
80010b52:	59 f8       	cp.w	r8,31
80010b54:	e0 8a 00 13 	brle	80010b7a <_strtod_r+0x686>
80010b58:	30 0a       	mov	r10,0
80010b5a:	8f 1a       	st.w	r7[0x4],r10
80010b5c:	e0 48 00 34 	cp.w	r8,52
80010b60:	e0 8a 00 06 	brle	80010b6c <_strtod_r+0x678>
80010b64:	fc 18 03 70 	movh	r8,0x370
80010b68:	8f 08       	st.w	r7[0x0],r8
80010b6a:	c0 e8       	rjmp	80010b86 <_strtod_r+0x692>
80010b6c:	3f fa       	mov	r10,-1
80010b6e:	f4 08 09 48 	lsl	r8,r10,r8
80010b72:	f1 e9 00 09 	and	r9,r8,r9
80010b76:	8f 09       	st.w	r7[0x0],r9
80010b78:	c0 78       	rjmp	80010b86 <_strtod_r+0x692>
80010b7a:	3f f9       	mov	r9,-1
80010b7c:	f2 08 09 48 	lsl	r8,r9,r8
80010b80:	41 39       	lddsp	r9,sp[0x4c]
80010b82:	12 68       	and	r8,r9
80010b84:	8f 18       	st.w	r7[0x4],r8
80010b86:	30 08       	mov	r8,0
80010b88:	30 09       	mov	r9,0
80010b8a:	fa ea 00 48 	ld.d	r10,sp[72]
80010b8e:	e0 a0 0d b0 	rcall	800126ee <__avr32_f64_cmp_eq>
80010b92:	c1 50       	breq	80010bbc <_strtod_r+0x6c8>
80010b94:	30 05       	mov	r5,0
80010b96:	0a 92       	mov	r2,r5
80010b98:	50 75       	stdsp	sp[0x1c],r5
80010b9a:	0a 90       	mov	r0,r5
80010b9c:	c0 28       	rjmp	80010ba0 <_strtod_r+0x6ac>
80010b9e:	06 95       	mov	r5,r3
80010ba0:	30 08       	mov	r8,0
80010ba2:	30 09       	mov	r9,0
80010ba4:	ee e9 00 00 	st.d	r7[0],r8
80010ba8:	32 28       	mov	r8,34
80010baa:	8d 38       	st.w	r6[0xc],r8
80010bac:	40 71       	lddsp	r1,sp[0x1c]
80010bae:	58 01       	cp.w	r1,0
80010bb0:	e0 81 02 b3 	brne	80011116 <_strtod_r+0xc22>
80010bb4:	e0 8f 02 c5 	bral	8001113e <_strtod_r+0xc4a>
80010bb8:	30 0e       	mov	lr,0
80010bba:	50 1e       	stdsp	sp[0x4],lr
80010bbc:	06 98       	mov	r8,r3
80010bbe:	0a 99       	mov	r9,r5
80010bc0:	40 5a       	lddsp	r10,sp[0x14]
80010bc2:	40 7b       	lddsp	r11,sp[0x1c]
80010bc4:	0c 9c       	mov	r12,r6
80010bc6:	fe b0 f9 ab 	rcall	8000ff1c <__s2b>
80010bca:	50 7c       	stdsp	sp[0x1c],r12
80010bcc:	2f 4c       	sub	r12,-12
80010bce:	50 dc       	stdsp	sp[0x34],r12
80010bd0:	e2 0c 11 00 	rsub	r12,r1,0
80010bd4:	50 cc       	stdsp	sp[0x30],r12
80010bd6:	40 7a       	lddsp	r10,sp[0x1c]
80010bd8:	0c 9c       	mov	r12,r6
80010bda:	74 1b       	ld.w	r11,r10[0x4]
80010bdc:	fe b0 f7 5a 	rcall	8000fa90 <_Balloc>
80010be0:	40 79       	lddsp	r9,sp[0x1c]
80010be2:	40 db       	lddsp	r11,sp[0x34]
80010be4:	72 4a       	ld.w	r10,r9[0x10]
80010be6:	18 90       	mov	r0,r12
80010be8:	2f ea       	sub	r10,-2
80010bea:	2f 4c       	sub	r12,-12
80010bec:	a3 6a       	lsl	r10,0x2
80010bee:	fe b0 c9 b2 	rcall	80009f52 <memcpy>
80010bf2:	fa ea 00 48 	ld.d	r10,sp[72]
80010bf6:	fa c8 ff 9c 	sub	r8,sp,-100
80010bfa:	fa c9 ff 98 	sub	r9,sp,-104
80010bfe:	0c 9c       	mov	r12,r6
80010c00:	fe b0 f7 80 	rcall	8000fb00 <__d2b>
80010c04:	30 1b       	mov	r11,1
80010c06:	51 7c       	stdsp	sp[0x5c],r12
80010c08:	0c 9c       	mov	r12,r6
80010c0a:	fe b0 f8 fb 	rcall	8000fe00 <__i2b>
80010c0e:	41 ab       	lddsp	r11,sp[0x68]
80010c10:	58 01       	cp.w	r1,0
80010c12:	f9 ba 04 00 	movge	r10,0
80010c16:	e2 03 17 40 	movge	r3,r1
80010c1a:	e2 05 17 40 	movge	r5,r1
80010c1e:	f4 08 17 40 	movge	r8,r10
80010c22:	f9 b3 05 00 	movlt	r3,0
80010c26:	fb fa 50 0c 	ld.wlt	r10,sp[0x30]
80010c2a:	f4 08 17 50 	movlt	r8,r10
80010c2e:	e6 05 17 50 	movlt	r5,r3
80010c32:	18 92       	mov	r2,r12
80010c34:	58 0b       	cp.w	r11,0
80010c36:	c0 45       	brlt	80010c3e <_strtod_r+0x74a>
80010c38:	f4 0b 00 08 	add	r8,r10,r11
80010c3c:	c0 28       	rjmp	80010c40 <_strtod_r+0x74c>
80010c3e:	16 15       	sub	r5,r11
80010c40:	40 1e       	lddsp	lr,sp[0x4]
80010c42:	41 99       	lddsp	r9,sp[0x64]
80010c44:	1c 1b       	sub	r11,lr
80010c46:	1c 05       	add	r5,lr
80010c48:	f6 cc fb cd 	sub	r12,r11,-1075
80010c4c:	f2 0e 11 36 	rsub	lr,r9,54
80010c50:	f6 09 00 09 	add	r9,r11,r9
80010c54:	fe 59 fc 02 	cp.w	r9,-1022
80010c58:	fc 09 17 90 	movgt	r9,lr
80010c5c:	f8 09 17 a0 	movle	r9,r12
80010c60:	12 05       	add	r5,r9
80010c62:	f2 08 00 04 	add	r4,r9,r8
80010c66:	e8 05 0d 49 	min	r9,r4,r5
80010c6a:	f2 08 0d 49 	min	r9,r9,r8
80010c6e:	58 09       	cp.w	r9,0
80010c70:	e0 89 00 04 	brgt	80010c78 <_strtod_r+0x784>
80010c74:	50 38       	stdsp	sp[0xc],r8
80010c76:	c0 58       	rjmp	80010c80 <_strtod_r+0x78c>
80010c78:	12 18       	sub	r8,r9
80010c7a:	12 14       	sub	r4,r9
80010c7c:	50 38       	stdsp	sp[0xc],r8
80010c7e:	12 15       	sub	r5,r9
80010c80:	58 0a       	cp.w	r10,0
80010c82:	c1 30       	breq	80010ca8 <_strtod_r+0x7b4>
80010c84:	04 9b       	mov	r11,r2
80010c86:	0c 9c       	mov	r12,r6
80010c88:	fe b0 f9 02 	rcall	8000fe8c <__pow5mult>
80010c8c:	41 7a       	lddsp	r10,sp[0x5c]
80010c8e:	18 9b       	mov	r11,r12
80010c90:	18 92       	mov	r2,r12
80010c92:	0c 9c       	mov	r12,r6
80010c94:	fe b0 f8 36 	rcall	8000fd00 <__multiply>
80010c98:	18 98       	mov	r8,r12
80010c9a:	41 7b       	lddsp	r11,sp[0x5c]
80010c9c:	50 08       	stdsp	sp[0x0],r8
80010c9e:	0c 9c       	mov	r12,r6
80010ca0:	fe b0 f6 de 	rcall	8000fa5c <_Bfree>
80010ca4:	40 08       	lddsp	r8,sp[0x0]
80010ca6:	51 78       	stdsp	sp[0x5c],r8
80010ca8:	58 04       	cp.w	r4,0
80010caa:	e0 8a 00 08 	brle	80010cba <_strtod_r+0x7c6>
80010cae:	08 9a       	mov	r10,r4
80010cb0:	41 7b       	lddsp	r11,sp[0x5c]
80010cb2:	0c 9c       	mov	r12,r6
80010cb4:	fe b0 f7 e2 	rcall	8000fc78 <__lshift>
80010cb8:	51 7c       	stdsp	sp[0x5c],r12
80010cba:	58 03       	cp.w	r3,0
80010cbc:	c0 70       	breq	80010cca <_strtod_r+0x7d6>
80010cbe:	00 9b       	mov	r11,r0
80010cc0:	06 9a       	mov	r10,r3
80010cc2:	0c 9c       	mov	r12,r6
80010cc4:	fe b0 f8 e4 	rcall	8000fe8c <__pow5mult>
80010cc8:	18 90       	mov	r0,r12
80010cca:	58 05       	cp.w	r5,0
80010ccc:	e0 8a 00 08 	brle	80010cdc <_strtod_r+0x7e8>
80010cd0:	00 9b       	mov	r11,r0
80010cd2:	0a 9a       	mov	r10,r5
80010cd4:	0c 9c       	mov	r12,r6
80010cd6:	fe b0 f7 d1 	rcall	8000fc78 <__lshift>
80010cda:	18 90       	mov	r0,r12
80010cdc:	40 3c       	lddsp	r12,sp[0xc]
80010cde:	58 0c       	cp.w	r12,0
80010ce0:	e0 8a 00 08 	brle	80010cf0 <_strtod_r+0x7fc>
80010ce4:	18 9a       	mov	r10,r12
80010ce6:	04 9b       	mov	r11,r2
80010ce8:	0c 9c       	mov	r12,r6
80010cea:	fe b0 f7 c7 	rcall	8000fc78 <__lshift>
80010cee:	18 92       	mov	r2,r12
80010cf0:	00 9a       	mov	r10,r0
80010cf2:	41 7b       	lddsp	r11,sp[0x5c]
80010cf4:	0c 9c       	mov	r12,r6
80010cf6:	fe b0 f7 59 	rcall	8000fba8 <__mdiff>
80010cfa:	30 09       	mov	r9,0
80010cfc:	78 3a       	ld.w	r10,r12[0xc]
80010cfe:	18 93       	mov	r3,r12
80010d00:	04 9b       	mov	r11,r2
80010d02:	50 3a       	stdsp	sp[0xc],r10
80010d04:	99 39       	st.w	r12[0xc],r9
80010d06:	fe b0 f5 bc 	rcall	8000f87e <__mcmp>
80010d0a:	c2 a4       	brge	80010d5e <_strtod_r+0x86a>
80010d0c:	06 95       	mov	r5,r3
80010d0e:	40 38       	lddsp	r8,sp[0xc]
80010d10:	58 08       	cp.w	r8,0
80010d12:	e0 81 01 e6 	brne	800110de <_strtod_r+0xbea>
80010d16:	41 38       	lddsp	r8,sp[0x4c]
80010d18:	58 08       	cp.w	r8,0
80010d1a:	e0 81 01 e2 	brne	800110de <_strtod_r+0xbea>
80010d1e:	41 28       	lddsp	r8,sp[0x48]
80010d20:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
80010d24:	e0 81 01 dd 	brne	800110de <_strtod_r+0xbea>
80010d28:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80010d2c:	fc 11 06 b0 	movh	r1,0x6b0
80010d30:	02 38       	cp.w	r8,r1
80010d32:	e0 88 01 d6 	brls	800110de <_strtod_r+0xbea>
80010d36:	66 58       	ld.w	r8,r3[0x14]
80010d38:	58 08       	cp.w	r8,0
80010d3a:	c0 51       	brne	80010d44 <_strtod_r+0x850>
80010d3c:	66 48       	ld.w	r8,r3[0x10]
80010d3e:	58 18       	cp.w	r8,1
80010d40:	e0 8a 01 cf 	brle	800110de <_strtod_r+0xbea>
80010d44:	0a 9b       	mov	r11,r5
80010d46:	30 1a       	mov	r10,1
80010d48:	0c 9c       	mov	r12,r6
80010d4a:	fe b0 f7 97 	rcall	8000fc78 <__lshift>
80010d4e:	04 9b       	mov	r11,r2
80010d50:	18 95       	mov	r5,r12
80010d52:	fe b0 f5 96 	rcall	8000f87e <__mcmp>
80010d56:	e0 89 00 33 	brgt	80010dbc <_strtod_r+0x8c8>
80010d5a:	e0 8f 01 c2 	bral	800110de <_strtod_r+0xbea>
80010d5e:	58 0c       	cp.w	r12,0
80010d60:	c7 91       	brne	80010e52 <_strtod_r+0x95e>
80010d62:	06 95       	mov	r5,r3
80010d64:	41 28       	lddsp	r8,sp[0x48]
80010d66:	40 3e       	lddsp	lr,sp[0xc]
80010d68:	58 0e       	cp.w	lr,0
80010d6a:	c2 30       	breq	80010db0 <_strtod_r+0x8bc>
80010d6c:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
80010d70:	ee 59 ff ff 	cp.w	r9,1048575
80010d74:	c4 31       	brne	80010dfa <_strtod_r+0x906>
80010d76:	41 3a       	lddsp	r10,sp[0x4c]
80010d78:	40 1c       	lddsp	r12,sp[0x4]
80010d7a:	58 0c       	cp.w	r12,0
80010d7c:	c1 00       	breq	80010d9c <_strtod_r+0x8a8>
80010d7e:	10 99       	mov	r9,r8
80010d80:	fc 1b 06 a0 	movh	r11,0x6a0
80010d84:	e6 19 7f f0 	andh	r9,0x7ff0,COH
80010d88:	16 39       	cp.w	r9,r11
80010d8a:	e0 8b 00 09 	brhi	80010d9c <_strtod_r+0x8a8>
80010d8e:	b5 89       	lsr	r9,0x14
80010d90:	3f fb       	mov	r11,-1
80010d92:	f2 09 11 6b 	rsub	r9,r9,107
80010d96:	f6 09 09 49 	lsl	r9,r11,r9
80010d9a:	c0 28       	rjmp	80010d9e <_strtod_r+0x8aa>
80010d9c:	3f f9       	mov	r9,-1
80010d9e:	12 3a       	cp.w	r10,r9
80010da0:	c2 d1       	brne	80010dfa <_strtod_r+0x906>
80010da2:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80010da6:	f0 28 00 00 	sub	r8,-1048576
80010daa:	8f 08       	st.w	r7[0x0],r8
80010dac:	30 08       	mov	r8,0
80010dae:	c2 48       	rjmp	80010df6 <_strtod_r+0x902>
80010db0:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
80010db4:	c2 31       	brne	80010dfa <_strtod_r+0x906>
80010db6:	41 38       	lddsp	r8,sp[0x4c]
80010db8:	58 08       	cp.w	r8,0
80010dba:	c2 01       	brne	80010dfa <_strtod_r+0x906>
80010dbc:	40 1a       	lddsp	r10,sp[0x4]
80010dbe:	58 0a       	cp.w	r10,0
80010dc0:	c0 f0       	breq	80010dde <_strtod_r+0x8ea>
80010dc2:	41 28       	lddsp	r8,sp[0x48]
80010dc4:	fc 19 06 b0 	movh	r9,0x6b0
80010dc8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80010dcc:	12 38       	cp.w	r8,r9
80010dce:	e0 8b 00 08 	brhi	80010dde <_strtod_r+0x8ea>
80010dd2:	fc 11 03 70 	movh	r1,0x370
80010dd6:	02 38       	cp.w	r8,r1
80010dd8:	e0 8b 01 86 	brhi	800110e4 <_strtod_r+0xbf0>
80010ddc:	ce 2a       	rjmp	80010ba0 <_strtod_r+0x6ac>
80010dde:	41 28       	lddsp	r8,sp[0x48]
80010de0:	f0 69 00 00 	mov	r9,-1048576
80010de4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80010de8:	12 08       	add	r8,r9
80010dea:	ea 18 00 0f 	orh	r8,0xf
80010dee:	e8 18 ff ff 	orl	r8,0xffff
80010df2:	8f 08       	st.w	r7[0x0],r8
80010df4:	3f f8       	mov	r8,-1
80010df6:	8f 18       	st.w	r7[0x4],r8
80010df8:	c7 39       	rjmp	800110de <_strtod_r+0xbea>
80010dfa:	41 38       	lddsp	r8,sp[0x4c]
80010dfc:	ed b8 00 00 	bld	r8,0x0
80010e00:	e0 81 01 6f 	brne	800110de <_strtod_r+0xbea>
80010e04:	fa ea 00 48 	ld.d	r10,sp[72]
80010e08:	fa eb 00 14 	st.d	sp[20],r10
80010e0c:	40 3a       	lddsp	r10,sp[0xc]
80010e0e:	58 0a       	cp.w	r10,0
80010e10:	c0 e0       	breq	80010e2c <_strtod_r+0x938>
80010e12:	fa ea 00 14 	ld.d	r10,sp[20]
80010e16:	fe b0 f5 4d 	rcall	8000f8b0 <__ulp>
80010e1a:	14 98       	mov	r8,r10
80010e1c:	16 99       	mov	r9,r11
80010e1e:	fa ea 00 14 	ld.d	r10,sp[20]
80010e22:	e0 a0 0b 59 	rcall	800124d4 <__avr32_f64_add>
80010e26:	ee eb 00 00 	st.d	r7[0],r10
80010e2a:	c5 a9       	rjmp	800110de <_strtod_r+0xbea>
80010e2c:	fa ea 00 14 	ld.d	r10,sp[20]
80010e30:	fe b0 f5 40 	rcall	8000f8b0 <__ulp>
80010e34:	14 98       	mov	r8,r10
80010e36:	16 99       	mov	r9,r11
80010e38:	fa ea 00 14 	ld.d	r10,sp[20]
80010e3c:	e0 a0 0a 7e 	rcall	80012338 <__avr32_f64_sub>
80010e40:	30 08       	mov	r8,0
80010e42:	ee eb 00 00 	st.d	r7[0],r10
80010e46:	30 09       	mov	r9,0
80010e48:	e0 a0 0c 53 	rcall	800126ee <__avr32_f64_cmp_eq>
80010e4c:	e0 80 01 49 	breq	800110de <_strtod_r+0xbea>
80010e50:	ca 8a       	rjmp	80010ba0 <_strtod_r+0x6ac>
80010e52:	04 9b       	mov	r11,r2
80010e54:	06 9c       	mov	r12,r3
80010e56:	fe b0 f5 9d 	rcall	8000f990 <__ratio>
80010e5a:	16 95       	mov	r5,r11
80010e5c:	14 94       	mov	r4,r10
80010e5e:	14 98       	mov	r8,r10
80010e60:	0a 99       	mov	r9,r5
80010e62:	30 0a       	mov	r10,0
80010e64:	fc 1b 40 00 	movh	r11,0x4000
80010e68:	e0 a0 0c 56 	rcall	80012714 <__avr32_f64_cmp_ge>
80010e6c:	c3 a0       	breq	80010ee0 <_strtod_r+0x9ec>
80010e6e:	40 39       	lddsp	r9,sp[0xc]
80010e70:	58 09       	cp.w	r9,0
80010e72:	c0 50       	breq	80010e7c <_strtod_r+0x988>
80010e74:	30 08       	mov	r8,0
80010e76:	fc 19 3f f0 	movh	r9,0x3ff0
80010e7a:	c1 28       	rjmp	80010e9e <_strtod_r+0x9aa>
80010e7c:	41 38       	lddsp	r8,sp[0x4c]
80010e7e:	58 08       	cp.w	r8,0
80010e80:	c0 61       	brne	80010e8c <_strtod_r+0x998>
80010e82:	41 28       	lddsp	r8,sp[0x48]
80010e84:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
80010e88:	c0 81       	brne	80010e98 <_strtod_r+0x9a4>
80010e8a:	c1 08       	rjmp	80010eaa <_strtod_r+0x9b6>
80010e8c:	58 18       	cp.w	r8,1
80010e8e:	c0 51       	brne	80010e98 <_strtod_r+0x9a4>
80010e90:	41 28       	lddsp	r8,sp[0x48]
80010e92:	58 08       	cp.w	r8,0
80010e94:	fe 90 fe 85 	breq	80010b9e <_strtod_r+0x6aa>
80010e98:	30 08       	mov	r8,0
80010e9a:	fc 19 bf f0 	movh	r9,0xbff0
80010e9e:	fa e9 00 50 	st.d	sp[80],r8
80010ea2:	fc 15 3f f0 	movh	r5,0x3ff0
80010ea6:	30 04       	mov	r4,0
80010ea8:	c3 28       	rjmp	80010f0c <_strtod_r+0xa18>
80010eaa:	30 08       	mov	r8,0
80010eac:	fc 19 3f f0 	movh	r9,0x3ff0
80010eb0:	08 9a       	mov	r10,r4
80010eb2:	0a 9b       	mov	r11,r5
80010eb4:	e0 a0 0c 64 	rcall	8001277c <__avr32_f64_cmp_lt>
80010eb8:	c0 50       	breq	80010ec2 <_strtod_r+0x9ce>
80010eba:	fc 15 3f e0 	movh	r5,0x3fe0
80010ebe:	30 04       	mov	r4,0
80010ec0:	c0 a8       	rjmp	80010ed4 <_strtod_r+0x9e0>
80010ec2:	08 9a       	mov	r10,r4
80010ec4:	0a 9b       	mov	r11,r5
80010ec6:	30 08       	mov	r8,0
80010ec8:	fc 19 3f e0 	movh	r9,0x3fe0
80010ecc:	e0 a0 09 4a 	rcall	80012160 <__avr32_f64_mul>
80010ed0:	16 95       	mov	r5,r11
80010ed2:	14 94       	mov	r4,r10
80010ed4:	0a 98       	mov	r8,r5
80010ed6:	51 54       	stdsp	sp[0x54],r4
80010ed8:	ee 18 80 00 	eorh	r8,0x8000
80010edc:	51 48       	stdsp	sp[0x50],r8
80010ede:	c1 78       	rjmp	80010f0c <_strtod_r+0xa18>
80010ee0:	08 9a       	mov	r10,r4
80010ee2:	0a 9b       	mov	r11,r5
80010ee4:	30 08       	mov	r8,0
80010ee6:	fc 19 3f e0 	movh	r9,0x3fe0
80010eea:	e0 a0 09 3b 	rcall	80012160 <__avr32_f64_mul>
80010eee:	40 38       	lddsp	r8,sp[0xc]
80010ef0:	16 95       	mov	r5,r11
80010ef2:	14 94       	mov	r4,r10
80010ef4:	58 08       	cp.w	r8,0
80010ef6:	c0 30       	breq	80010efc <_strtod_r+0xa08>
80010ef8:	0a 9a       	mov	r10,r5
80010efa:	c0 58       	rjmp	80010f04 <_strtod_r+0xa10>
80010efc:	fc 18 80 00 	movh	r8,0x8000
80010f00:	ea 08 00 0a 	add	r10,r5,r8
80010f04:	14 99       	mov	r9,r10
80010f06:	08 98       	mov	r8,r4
80010f08:	fa e9 00 50 	st.d	sp[80],r8
80010f0c:	41 29       	lddsp	r9,sp[0x48]
80010f0e:	12 9e       	mov	lr,r9
80010f10:	e6 1e 7f f0 	andh	lr,0x7ff0,COH
80010f14:	50 5e       	stdsp	sp[0x14],lr
80010f16:	fc 1c 7f e0 	movh	r12,0x7fe0
80010f1a:	18 3e       	cp.w	lr,r12
80010f1c:	c4 11       	brne	80010f9e <_strtod_r+0xaaa>
80010f1e:	fa ea 00 48 	ld.d	r10,sp[72]
80010f22:	fc 18 fc b0 	movh	r8,0xfcb0
80010f26:	fa eb 00 40 	st.d	sp[64],r10
80010f2a:	f2 08 00 08 	add	r8,r9,r8
80010f2e:	8f 08       	st.w	r7[0x0],r8
80010f30:	fa e8 00 50 	ld.d	r8,sp[80]
80010f34:	fa e9 00 24 	st.d	sp[36],r8
80010f38:	fe b0 f4 bc 	rcall	8000f8b0 <__ulp>
80010f3c:	14 98       	mov	r8,r10
80010f3e:	16 99       	mov	r9,r11
80010f40:	fa ea 00 24 	ld.d	r10,sp[36]
80010f44:	e0 a0 09 0e 	rcall	80012160 <__avr32_f64_mul>
80010f48:	14 98       	mov	r8,r10
80010f4a:	16 99       	mov	r9,r11
80010f4c:	fa ea 00 48 	ld.d	r10,sp[72]
80010f50:	e0 a0 0a c2 	rcall	800124d4 <__avr32_f64_add>
80010f54:	ee eb 00 00 	st.d	r7[0],r10
80010f58:	e0 6e ff ff 	mov	lr,65535
80010f5c:	ea 1e 7c 9f 	orh	lr,0x7c9f
80010f60:	41 28       	lddsp	r8,sp[0x48]
80010f62:	10 99       	mov	r9,r8
80010f64:	e6 19 7f f0 	andh	r9,0x7ff0,COH
80010f68:	1c 39       	cp.w	r9,lr
80010f6a:	e0 88 00 15 	brls	80010f94 <_strtod_r+0xaa0>
80010f6e:	41 08       	lddsp	r8,sp[0x40]
80010f70:	e0 6c ff ff 	mov	r12,65535
80010f74:	ea 1c 7f ef 	orh	r12,0x7fef
80010f78:	18 38       	cp.w	r8,r12
80010f7a:	c0 51       	brne	80010f84 <_strtod_r+0xa90>
80010f7c:	41 18       	lddsp	r8,sp[0x44]
80010f7e:	5b f8       	cp.w	r8,-1
80010f80:	fe 90 fd 53 	breq	80010a26 <_strtod_r+0x532>
80010f84:	e0 68 ff ff 	mov	r8,65535
80010f88:	ea 18 7f ef 	orh	r8,0x7fef
80010f8c:	8f 08       	st.w	r7[0x0],r8
80010f8e:	3f f8       	mov	r8,-1
80010f90:	8f 18       	st.w	r7[0x4],r8
80010f92:	c9 48       	rjmp	800110ba <_strtod_r+0xbc6>
80010f94:	fc 19 03 50 	movh	r9,0x350
80010f98:	12 08       	add	r8,r9
80010f9a:	8f 08       	st.w	r7[0x0],r8
80010f9c:	c4 b8       	rjmp	80011032 <_strtod_r+0xb3e>
80010f9e:	40 1b       	lddsp	r11,sp[0x4]
80010fa0:	40 5a       	lddsp	r10,sp[0x14]
80010fa2:	58 0b       	cp.w	r11,0
80010fa4:	5f 19       	srne	r9
80010fa6:	fc 18 06 a0 	movh	r8,0x6a0
80010faa:	10 3a       	cp.w	r10,r8
80010fac:	5f 88       	srls	r8
80010fae:	f3 e8 00 08 	and	r8,r9,r8
80010fb2:	c2 a0       	breq	80011006 <_strtod_r+0xb12>
80010fb4:	fc 1a ff c0 	movh	r10,0xffc0
80010fb8:	e0 6b ff ff 	mov	r11,65535
80010fbc:	ea 1b 41 df 	orh	r11,0x41df
80010fc0:	0a 99       	mov	r9,r5
80010fc2:	08 98       	mov	r8,r4
80010fc4:	e0 a0 0b a8 	rcall	80012714 <__avr32_f64_cmp_ge>
80010fc8:	c1 70       	breq	80010ff6 <_strtod_r+0xb02>
80010fca:	0a 9b       	mov	r11,r5
80010fcc:	08 9a       	mov	r10,r4
80010fce:	e0 a0 0b 07 	rcall	800125dc <__avr32_f64_to_u32>
80010fd2:	f9 bc 00 01 	moveq	r12,1
80010fd6:	e0 a0 0b 18 	rcall	80012606 <__avr32_u32_to_f64>
80010fda:	40 3e       	lddsp	lr,sp[0xc]
80010fdc:	14 94       	mov	r4,r10
80010fde:	16 95       	mov	r5,r11
80010fe0:	58 0e       	cp.w	lr,0
80010fe2:	ea 0a 17 10 	movne	r10,r5
80010fe6:	fc 18 80 00 	movh	r8,0x8000
80010fea:	eb d8 e0 0a 	addeq	r10,r5,r8
80010fee:	08 98       	mov	r8,r4
80010ff0:	14 99       	mov	r9,r10
80010ff2:	fa e9 00 50 	st.d	sp[80],r8
80010ff6:	41 49       	lddsp	r9,sp[0x50]
80010ff8:	fc 18 06 b0 	movh	r8,0x6b0
80010ffc:	40 5c       	lddsp	r12,sp[0x14]
80010ffe:	f2 08 00 08 	add	r8,r9,r8
80011002:	18 18       	sub	r8,r12
80011004:	51 48       	stdsp	sp[0x50],r8
80011006:	fa ea 00 50 	ld.d	r10,sp[80]
8001100a:	fa eb 00 24 	st.d	sp[36],r10
8001100e:	fa ea 00 48 	ld.d	r10,sp[72]
80011012:	fe b0 f4 4f 	rcall	8000f8b0 <__ulp>
80011016:	14 98       	mov	r8,r10
80011018:	16 99       	mov	r9,r11
8001101a:	fa ea 00 24 	ld.d	r10,sp[36]
8001101e:	e0 a0 08 a1 	rcall	80012160 <__avr32_f64_mul>
80011022:	14 98       	mov	r8,r10
80011024:	16 99       	mov	r9,r11
80011026:	fa ea 00 48 	ld.d	r10,sp[72]
8001102a:	e0 a0 0a 55 	rcall	800124d4 <__avr32_f64_add>
8001102e:	ee eb 00 00 	st.d	r7[0],r10
80011032:	41 2a       	lddsp	r10,sp[0x48]
80011034:	50 9a       	stdsp	sp[0x24],r10
80011036:	40 19       	lddsp	r9,sp[0x4]
80011038:	58 09       	cp.w	r9,0
8001103a:	c4 01       	brne	800110ba <_strtod_r+0xbc6>
8001103c:	14 98       	mov	r8,r10
8001103e:	40 5e       	lddsp	lr,sp[0x14]
80011040:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80011044:	10 3e       	cp.w	lr,r8
80011046:	c3 a1       	brne	800110ba <_strtod_r+0xbc6>
80011048:	0a 9b       	mov	r11,r5
8001104a:	08 9a       	mov	r10,r4
8001104c:	e0 a0 0a ca 	rcall	800125e0 <__avr32_f64_to_s32>
80011050:	e0 a0 0a df 	rcall	8001260e <__avr32_s32_to_f64>
80011054:	14 98       	mov	r8,r10
80011056:	16 99       	mov	r9,r11
80011058:	08 9a       	mov	r10,r4
8001105a:	0a 9b       	mov	r11,r5
8001105c:	e0 a0 09 6e 	rcall	80012338 <__avr32_f64_sub>
80011060:	40 3c       	lddsp	r12,sp[0xc]
80011062:	14 94       	mov	r4,r10
80011064:	16 95       	mov	r5,r11
80011066:	58 0c       	cp.w	r12,0
80011068:	c0 81       	brne	80011078 <_strtod_r+0xb84>
8001106a:	41 38       	lddsp	r8,sp[0x4c]
8001106c:	58 08       	cp.w	r8,0
8001106e:	c0 51       	brne	80011078 <_strtod_r+0xb84>
80011070:	40 99       	lddsp	r9,sp[0x24]
80011072:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80011076:	c1 70       	breq	800110a4 <_strtod_r+0xbb0>
80011078:	e0 68 35 95 	mov	r8,13717
8001107c:	ea 18 94 a0 	orh	r8,0x94a0
80011080:	e0 69 ff ff 	mov	r9,65535
80011084:	ea 19 3f df 	orh	r9,0x3fdf
80011088:	08 9a       	mov	r10,r4
8001108a:	0a 9b       	mov	r11,r5
8001108c:	e0 a0 0b 78 	rcall	8001277c <__avr32_f64_cmp_lt>
80011090:	c4 21       	brne	80011114 <_strtod_r+0xc20>
80011092:	08 98       	mov	r8,r4
80011094:	0a 99       	mov	r9,r5
80011096:	e0 6a e5 35 	mov	r10,58677
8001109a:	ea 1a 35 af 	orh	r10,0x35af
8001109e:	fc 1b 3f e0 	movh	r11,0x3fe0
800110a2:	c0 98       	rjmp	800110b4 <_strtod_r+0xbc0>
800110a4:	e0 68 35 95 	mov	r8,13717
800110a8:	ea 18 94 a0 	orh	r8,0x94a0
800110ac:	e0 69 ff ff 	mov	r9,65535
800110b0:	ea 19 3f cf 	orh	r9,0x3fcf
800110b4:	e0 a0 0b 64 	rcall	8001277c <__avr32_f64_cmp_lt>
800110b8:	c2 e1       	brne	80011114 <_strtod_r+0xc20>
800110ba:	41 7b       	lddsp	r11,sp[0x5c]
800110bc:	0c 9c       	mov	r12,r6
800110be:	fe b0 f4 cf 	rcall	8000fa5c <_Bfree>
800110c2:	00 9b       	mov	r11,r0
800110c4:	0c 9c       	mov	r12,r6
800110c6:	fe b0 f4 cb 	rcall	8000fa5c <_Bfree>
800110ca:	04 9b       	mov	r11,r2
800110cc:	0c 9c       	mov	r12,r6
800110ce:	fe b0 f4 c7 	rcall	8000fa5c <_Bfree>
800110d2:	06 9b       	mov	r11,r3
800110d4:	0c 9c       	mov	r12,r6
800110d6:	fe b0 f4 c3 	rcall	8000fa5c <_Bfree>
800110da:	fe 9f fd 7e 	bral	80010bd6 <_strtod_r+0x6e2>
800110de:	40 18       	lddsp	r8,sp[0x4]
800110e0:	58 08       	cp.w	r8,0
800110e2:	c1 a0       	breq	80011116 <_strtod_r+0xc22>
800110e4:	fc 19 39 50 	movh	r9,0x3950
800110e8:	fa ea 00 48 	ld.d	r10,sp[72]
800110ec:	fa c8 ff c0 	sub	r8,sp,-64
800110f0:	91 09       	st.w	r8[0x0],r9
800110f2:	30 09       	mov	r9,0
800110f4:	91 19       	st.w	r8[0x4],r9
800110f6:	fa e8 00 40 	ld.d	r8,sp[64]
800110fa:	e0 a0 08 33 	rcall	80012160 <__avr32_f64_mul>
800110fe:	ee eb 00 00 	st.d	r7[0],r10
80011102:	41 28       	lddsp	r8,sp[0x48]
80011104:	58 08       	cp.w	r8,0
80011106:	c0 81       	brne	80011116 <_strtod_r+0xc22>
80011108:	41 38       	lddsp	r8,sp[0x4c]
8001110a:	58 08       	cp.w	r8,0
8001110c:	c0 51       	brne	80011116 <_strtod_r+0xc22>
8001110e:	32 28       	mov	r8,34
80011110:	8d 38       	st.w	r6[0xc],r8
80011112:	c0 28       	rjmp	80011116 <_strtod_r+0xc22>
80011114:	06 95       	mov	r5,r3
80011116:	41 7b       	lddsp	r11,sp[0x5c]
80011118:	0c 9c       	mov	r12,r6
8001111a:	fe b0 f4 a1 	rcall	8000fa5c <_Bfree>
8001111e:	00 9b       	mov	r11,r0
80011120:	0c 9c       	mov	r12,r6
80011122:	fe b0 f4 9d 	rcall	8000fa5c <_Bfree>
80011126:	04 9b       	mov	r11,r2
80011128:	0c 9c       	mov	r12,r6
8001112a:	fe b0 f4 99 	rcall	8000fa5c <_Bfree>
8001112e:	40 7b       	lddsp	r11,sp[0x1c]
80011130:	0c 9c       	mov	r12,r6
80011132:	fe b0 f4 95 	rcall	8000fa5c <_Bfree>
80011136:	0a 9b       	mov	r11,r5
80011138:	0c 9c       	mov	r12,r6
8001113a:	fe b0 f4 91 	rcall	8000fa5c <_Bfree>
8001113e:	40 b1       	lddsp	r1,sp[0x2c]
80011140:	58 01       	cp.w	r1,0
80011142:	fb f8 10 18 	ld.wne	r8,sp[0x60]
80011146:	e3 f8 1a 00 	st.wne	r1[0x0],r8
8001114a:	40 8e       	lddsp	lr,sp[0x20]
8001114c:	41 28       	lddsp	r8,sp[0x48]
8001114e:	41 3a       	lddsp	r10,sp[0x4c]
80011150:	10 99       	mov	r9,r8
80011152:	ee 19 80 00 	eorh	r9,0x8000
80011156:	58 0e       	cp.w	lr,0
80011158:	f0 0b 17 00 	moveq	r11,r8
8001115c:	f2 0b 17 10 	movne	r11,r9
80011160:	2e 5d       	sub	sp,-108
80011162:	d8 32       	popm	r0-r7,pc

80011164 <_strtoll_r>:
80011164:	d4 31       	pushm	r0-r7,lr
80011166:	20 8d       	sub	sp,32
80011168:	4d b8       	lddpc	r8,800112d4 <_strtoll_r+0x170>
8001116a:	50 0b       	stdsp	sp[0x0],r11
8001116c:	70 08       	ld.w	r8,r8[0x0]
8001116e:	50 7c       	stdsp	sp[0x1c],r12
80011170:	50 2a       	stdsp	sp[0x8],r10
80011172:	12 95       	mov	r5,r9
80011174:	50 18       	stdsp	sp[0x4],r8
80011176:	16 97       	mov	r7,r11
80011178:	0f 36       	ld.ub	r6,r7++
8001117a:	40 1a       	lddsp	r10,sp[0x4]
8001117c:	f4 06 07 04 	ld.ub	r4,r10[r6]
80011180:	e2 14 00 08 	andl	r4,0x8,COH
80011184:	cf a1       	brne	80011178 <_strtoll_r+0x14>
80011186:	e0 46 00 2d 	cp.w	r6,45
8001118a:	c0 41       	brne	80011192 <_strtoll_r+0x2e>
8001118c:	0f 36       	ld.ub	r6,r7++
8001118e:	30 14       	mov	r4,1
80011190:	c0 58       	rjmp	8001119a <_strtoll_r+0x36>
80011192:	e0 46 00 2b 	cp.w	r6,43
80011196:	c0 21       	brne	8001119a <_strtoll_r+0x36>
80011198:	0f 36       	ld.ub	r6,r7++
8001119a:	58 05       	cp.w	r5,0
8001119c:	5f 08       	sreq	r8
8001119e:	59 05       	cp.w	r5,16
800111a0:	5f 0a       	sreq	r10
800111a2:	30 09       	mov	r9,0
800111a4:	f1 ea 10 0a 	or	r10,r8,r10
800111a8:	f2 0a 18 00 	cp.b	r10,r9
800111ac:	c1 d0       	breq	800111e6 <_strtoll_r+0x82>
800111ae:	e0 46 00 30 	cp.w	r6,48
800111b2:	c1 21       	brne	800111d6 <_strtoll_r+0x72>
800111b4:	0f 8a       	ld.ub	r10,r7[0x0]
800111b6:	35 8b       	mov	r11,88
800111b8:	37 8c       	mov	r12,120
800111ba:	f6 0a 18 00 	cp.b	r10,r11
800111be:	5f 0b       	sreq	r11
800111c0:	f8 0a 18 00 	cp.b	r10,r12
800111c4:	5f 0a       	sreq	r10
800111c6:	14 4b       	or	r11,r10
800111c8:	f2 0b 18 00 	cp.b	r11,r9
800111cc:	c0 50       	breq	800111d6 <_strtoll_r+0x72>
800111ce:	0f 96       	ld.ub	r6,r7[0x1]
800111d0:	31 05       	mov	r5,16
800111d2:	2f e7       	sub	r7,-2
800111d4:	c0 98       	rjmp	800111e6 <_strtoll_r+0x82>
800111d6:	58 08       	cp.w	r8,0
800111d8:	c0 70       	breq	800111e6 <_strtoll_r+0x82>
800111da:	e0 46 00 30 	cp.w	r6,48
800111de:	f9 b5 00 08 	moveq	r5,8
800111e2:	f9 b5 01 0a 	movne	r5,10
800111e6:	58 04       	cp.w	r4,0
800111e8:	c0 71       	brne	800111f6 <_strtoll_r+0x92>
800111ea:	3f f0       	mov	r0,-1
800111ec:	e0 61 ff ff 	mov	r1,65535
800111f0:	ea 11 7f ff 	orh	r1,0x7fff
800111f4:	c0 48       	rjmp	800111fc <_strtoll_r+0x98>
800111f6:	30 00       	mov	r0,0
800111f8:	fc 11 80 00 	movh	r1,0x8000
800111fc:	ea 03 14 1f 	asr	r3,r5,0x1f
80011200:	0a 98       	mov	r8,r5
80011202:	06 99       	mov	r9,r3
80011204:	00 9a       	mov	r10,r0
80011206:	02 9b       	mov	r11,r1
80011208:	e0 a0 0e 08 	rcall	80012e18 <__avr32_umod64>
8001120c:	06 99       	mov	r9,r3
8001120e:	50 5a       	stdsp	sp[0x14],r10
80011210:	0a 98       	mov	r8,r5
80011212:	00 9a       	mov	r10,r0
80011214:	02 9b       	mov	r11,r1
80011216:	e0 a0 0c b8 	rcall	80012b86 <__avr32_udiv64>
8001121a:	06 9c       	mov	r12,r3
8001121c:	14 98       	mov	r8,r10
8001121e:	16 99       	mov	r9,r11
80011220:	30 0a       	mov	r10,0
80011222:	30 00       	mov	r0,0
80011224:	30 01       	mov	r1,0
80011226:	14 9e       	mov	lr,r10
80011228:	10 92       	mov	r2,r8
8001122a:	12 93       	mov	r3,r9
8001122c:	40 19       	lddsp	r9,sp[0x4]
8001122e:	f2 06 07 0b 	ld.ub	r11,r9[r6]
80011232:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80011236:	f9 b9 01 37 	movne	r9,55
8001123a:	f9 b9 00 57 	moveq	r9,87
8001123e:	50 69       	stdsp	sp[0x18],r9
80011240:	ec c8 00 30 	sub	r8,r6,48
80011244:	ed bb 00 02 	bld	r11,0x2
80011248:	c0 80       	breq	80011258 <_strtoll_r+0xf4>
8001124a:	40 69       	lddsp	r9,sp[0x18]
8001124c:	f7 db c0 02 	bfextu	r11,r11,0x0,0x2
80011250:	ec 09 01 08 	sub	r8,r6,r9
80011254:	58 0b       	cp.w	r11,0
80011256:	c2 d0       	breq	800112b0 <_strtoll_r+0x14c>
80011258:	0a 38       	cp.w	r8,r5
8001125a:	c2 b4       	brge	800112b0 <_strtoll_r+0x14c>
8001125c:	04 30       	cp.w	r0,r2
8001125e:	e6 01 13 00 	cpc	r1,r3
80011262:	5f b9       	srhi	r9
80011264:	f3 ea 13 fa 	or	r10,r9,r10>>0x1f
80011268:	fc 0a 18 00 	cp.b	r10,lr
8001126c:	c1 f1       	brne	800112aa <_strtoll_r+0x146>
8001126e:	04 30       	cp.w	r0,r2
80011270:	e6 01 13 00 	cpc	r1,r3
80011274:	5f 09       	sreq	r9
80011276:	40 5a       	lddsp	r10,sp[0x14]
80011278:	14 38       	cp.w	r8,r10
8001127a:	5f 9a       	srgt	r10
8001127c:	f5 e9 00 09 	and	r9,r10,r9
80011280:	fc 09 18 00 	cp.b	r9,lr
80011284:	c1 31       	brne	800112aa <_strtoll_r+0x146>
80011286:	e0 05 06 4a 	mulu.d	r10,r0,r5
8001128a:	ea 01 02 49 	mul	r9,r5,r1
8001128e:	50 48       	stdsp	sp[0x10],r8
80011290:	f8 00 03 49 	mac	r9,r12,r0
80011294:	bf 58       	asr	r8,0x1f
80011296:	f2 0b 00 0b 	add	r11,r9,r11
8001129a:	50 38       	stdsp	sp[0xc],r8
8001129c:	fa e0 00 0c 	ld.d	r0,sp[12]
800112a0:	14 00       	add	r0,r10
800112a2:	e2 0b 00 41 	adc	r1,r1,r11
800112a6:	30 1a       	mov	r10,1
800112a8:	c0 28       	rjmp	800112ac <_strtoll_r+0x148>
800112aa:	3f fa       	mov	r10,-1
800112ac:	0f 36       	ld.ub	r6,r7++
800112ae:	cb fb       	rjmp	8001122c <_strtoll_r+0xc8>
800112b0:	5b fa       	cp.w	r10,-1
800112b2:	c1 31       	brne	800112d8 <_strtoll_r+0x174>
800112b4:	58 04       	cp.w	r4,0
800112b6:	c0 71       	brne	800112c4 <_strtoll_r+0x160>
800112b8:	3f f0       	mov	r0,-1
800112ba:	e0 61 ff ff 	mov	r1,65535
800112be:	ea 11 7f ff 	orh	r1,0x7fff
800112c2:	c0 48       	rjmp	800112ca <_strtoll_r+0x166>
800112c4:	30 00       	mov	r0,0
800112c6:	fc 11 80 00 	movh	r1,0x8000
800112ca:	32 28       	mov	r8,34
800112cc:	40 79       	lddsp	r9,sp[0x1c]
800112ce:	93 38       	st.w	r9[0xc],r8
800112d0:	c0 c8       	rjmp	800112e8 <_strtoll_r+0x184>
800112d2:	d7 03       	nop
800112d4:	00 00       	add	r0,r0
800112d6:	00 cc       	st.b	r0++,r12
800112d8:	58 04       	cp.w	r4,0
800112da:	c0 70       	breq	800112e8 <_strtoll_r+0x184>
800112dc:	30 08       	mov	r8,0
800112de:	30 09       	mov	r9,0
800112e0:	f0 00 01 00 	sub	r0,r8,r0
800112e4:	f2 01 01 41 	sbc	r1,r9,r1
800112e8:	40 28       	lddsp	r8,sp[0x8]
800112ea:	58 08       	cp.w	r8,0
800112ec:	c0 b0       	breq	80011302 <_strtoll_r+0x19e>
800112ee:	58 0a       	cp.w	r10,0
800112f0:	f9 b8 01 ff 	movne	r8,-1
800112f4:	ef d8 e1 0a 	addne	r10,r7,r8
800112f8:	fb fa 1a 00 	st.wne	sp[0x0],r10
800112fc:	40 29       	lddsp	r9,sp[0x8]
800112fe:	40 08       	lddsp	r8,sp[0x0]
80011300:	93 08       	st.w	r9[0x0],r8
80011302:	00 9a       	mov	r10,r0
80011304:	02 9b       	mov	r11,r1
80011306:	2f 8d       	sub	sp,-32
80011308:	d8 32       	popm	r0-r7,pc
8001130a:	d7 03       	nop

8001130c <_strtol_r>:
8001130c:	d4 31       	pushm	r0-r7,lr
8001130e:	20 3d       	sub	sp,12
80011310:	4c c8       	lddpc	r8,80011440 <_strtol_r+0x134>
80011312:	50 2c       	stdsp	sp[0x8],r12
80011314:	70 01       	ld.w	r1,r8[0x0]
80011316:	16 98       	mov	r8,r11
80011318:	11 3e       	ld.ub	lr,r8++
8001131a:	e2 0e 07 06 	ld.ub	r6,r1[lr]
8001131e:	e2 16 00 08 	andl	r6,0x8,COH
80011322:	cf b1       	brne	80011318 <_strtol_r+0xc>
80011324:	e0 4e 00 2d 	cp.w	lr,45
80011328:	c0 41       	brne	80011330 <_strtol_r+0x24>
8001132a:	11 3e       	ld.ub	lr,r8++
8001132c:	30 16       	mov	r6,1
8001132e:	c0 58       	rjmp	80011338 <_strtol_r+0x2c>
80011330:	e0 4e 00 2b 	cp.w	lr,43
80011334:	c0 21       	brne	80011338 <_strtol_r+0x2c>
80011336:	11 3e       	ld.ub	lr,r8++
80011338:	58 09       	cp.w	r9,0
8001133a:	5f 0c       	sreq	r12
8001133c:	59 09       	cp.w	r9,16
8001133e:	5f 05       	sreq	r5
80011340:	30 07       	mov	r7,0
80011342:	f9 e5 10 05 	or	r5,r12,r5
80011346:	ee 05 18 00 	cp.b	r5,r7
8001134a:	c1 e0       	breq	80011386 <_strtol_r+0x7a>
8001134c:	e0 4e 00 30 	cp.w	lr,48
80011350:	c1 31       	brne	80011376 <_strtol_r+0x6a>
80011352:	11 85       	ld.ub	r5,r8[0x0]
80011354:	35 84       	mov	r4,88
80011356:	37 83       	mov	r3,120
80011358:	e8 05 18 00 	cp.b	r5,r4
8001135c:	5f 04       	sreq	r4
8001135e:	e6 05 18 00 	cp.b	r5,r3
80011362:	5f 05       	sreq	r5
80011364:	e9 e5 10 05 	or	r5,r4,r5
80011368:	ee 05 18 00 	cp.b	r5,r7
8001136c:	c0 50       	breq	80011376 <_strtol_r+0x6a>
8001136e:	11 9e       	ld.ub	lr,r8[0x1]
80011370:	31 09       	mov	r9,16
80011372:	2f e8       	sub	r8,-2
80011374:	c0 98       	rjmp	80011386 <_strtol_r+0x7a>
80011376:	58 0c       	cp.w	r12,0
80011378:	c0 70       	breq	80011386 <_strtol_r+0x7a>
8001137a:	e0 4e 00 30 	cp.w	lr,48
8001137e:	f9 b9 00 08 	moveq	r9,8
80011382:	f9 b9 01 0a 	movne	r9,10
80011386:	e0 6c ff ff 	mov	r12,65535
8001138a:	ea 1c 7f ff 	orh	r12,0x7fff
8001138e:	30 07       	mov	r7,0
80011390:	fc 15 80 00 	movh	r5,0x8000
80011394:	0e 93       	mov	r3,r7
80011396:	0e 36       	cp.w	r6,r7
80011398:	f8 05 17 00 	moveq	r5,r12
8001139c:	0e 9c       	mov	r12,r7
8001139e:	ea 09 0d 04 	divu	r4,r5,r9
800113a2:	08 92       	mov	r2,r4
800113a4:	50 05       	stdsp	sp[0x0],r5
800113a6:	e2 0e 07 04 	ld.ub	r4,r1[lr]
800113aa:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
800113ae:	f9 b0 01 37 	movne	r0,55
800113b2:	f9 b0 00 57 	moveq	r0,87
800113b6:	50 10       	stdsp	sp[0x4],r0
800113b8:	fc c5 00 30 	sub	r5,lr,48
800113bc:	08 90       	mov	r0,r4
800113be:	e2 10 00 04 	andl	r0,0x4,COH
800113c2:	c0 81       	brne	800113d2 <_strtol_r+0xc6>
800113c4:	40 10       	lddsp	r0,sp[0x4]
800113c6:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
800113ca:	fc 00 01 05 	sub	r5,lr,r0
800113ce:	58 04       	cp.w	r4,0
800113d0:	c1 c0       	breq	80011408 <_strtol_r+0xfc>
800113d2:	12 35       	cp.w	r5,r9
800113d4:	c1 a4       	brge	80011408 <_strtol_r+0xfc>
800113d6:	04 3c       	cp.w	r12,r2
800113d8:	5f be       	srhi	lr
800113da:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
800113de:	e6 0e 18 00 	cp.b	lr,r3
800113e2:	c1 01       	brne	80011402 <_strtol_r+0xf6>
800113e4:	04 3c       	cp.w	r12,r2
800113e6:	5f 0e       	sreq	lr
800113e8:	40 07       	lddsp	r7,sp[0x0]
800113ea:	0e 35       	cp.w	r5,r7
800113ec:	5f 97       	srgt	r7
800113ee:	ef ee 00 0e 	and	lr,r7,lr
800113f2:	e6 0e 18 00 	cp.b	lr,r3
800113f6:	c0 61       	brne	80011402 <_strtol_r+0xf6>
800113f8:	b3 3c       	mul	r12,r9
800113fa:	30 17       	mov	r7,1
800113fc:	ea 0c 00 0c 	add	r12,r5,r12
80011400:	c0 28       	rjmp	80011404 <_strtol_r+0xf8>
80011402:	3f f7       	mov	r7,-1
80011404:	11 3e       	ld.ub	lr,r8++
80011406:	cd 0b       	rjmp	800113a6 <_strtol_r+0x9a>
80011408:	5b f7       	cp.w	r7,-1
8001140a:	c0 e1       	brne	80011426 <_strtol_r+0x11a>
8001140c:	e0 69 ff ff 	mov	r9,65535
80011410:	ea 19 7f ff 	orh	r9,0x7fff
80011414:	fc 1c 80 00 	movh	r12,0x8000
80011418:	40 20       	lddsp	r0,sp[0x8]
8001141a:	58 06       	cp.w	r6,0
8001141c:	f2 0c 17 00 	moveq	r12,r9
80011420:	32 29       	mov	r9,34
80011422:	81 39       	st.w	r0[0xc],r9
80011424:	c0 48       	rjmp	8001142c <_strtol_r+0x120>
80011426:	58 06       	cp.w	r6,0
80011428:	fb bc 01 00 	rsubne	r12,0
8001142c:	58 0a       	cp.w	r10,0
8001142e:	c0 70       	breq	8001143c <_strtol_r+0x130>
80011430:	58 07       	cp.w	r7,0
80011432:	f9 b9 01 ff 	movne	r9,-1
80011436:	f1 d9 e1 0b 	addne	r11,r8,r9
8001143a:	95 0b       	st.w	r10[0x0],r11
8001143c:	2f dd       	sub	sp,-12
8001143e:	d8 32       	popm	r0-r7,pc
80011440:	00 00       	add	r0,r0
80011442:	00 cc       	st.b	r0++,r12

80011444 <_strtoull_r>:
80011444:	d4 31       	pushm	r0-r7,lr
80011446:	20 9d       	sub	sp,36
80011448:	4d e8       	lddpc	r8,800115c0 <_strtoull_r+0x17c>
8001144a:	16 92       	mov	r2,r11
8001144c:	70 08       	ld.w	r8,r8[0x0]
8001144e:	50 8c       	stdsp	sp[0x20],r12
80011450:	50 5a       	stdsp	sp[0x14],r10
80011452:	12 95       	mov	r5,r9
80011454:	50 48       	stdsp	sp[0x10],r8
80011456:	16 97       	mov	r7,r11
80011458:	0f 36       	ld.ub	r6,r7++
8001145a:	40 4e       	lddsp	lr,sp[0x10]
8001145c:	fc 06 07 03 	ld.ub	r3,lr[r6]
80011460:	e2 13 00 08 	andl	r3,0x8,COH
80011464:	cf a1       	brne	80011458 <_strtoull_r+0x14>
80011466:	e0 46 00 2d 	cp.w	r6,45
8001146a:	c0 41       	brne	80011472 <_strtoull_r+0x2e>
8001146c:	0f 36       	ld.ub	r6,r7++
8001146e:	30 13       	mov	r3,1
80011470:	c0 58       	rjmp	8001147a <_strtoull_r+0x36>
80011472:	e0 46 00 2b 	cp.w	r6,43
80011476:	c0 21       	brne	8001147a <_strtoull_r+0x36>
80011478:	0f 36       	ld.ub	r6,r7++
8001147a:	58 05       	cp.w	r5,0
8001147c:	5f 08       	sreq	r8
8001147e:	59 05       	cp.w	r5,16
80011480:	5f 0a       	sreq	r10
80011482:	30 09       	mov	r9,0
80011484:	f1 ea 10 0a 	or	r10,r8,r10
80011488:	f2 0a 18 00 	cp.b	r10,r9
8001148c:	c1 d0       	breq	800114c6 <_strtoull_r+0x82>
8001148e:	e0 46 00 30 	cp.w	r6,48
80011492:	c1 21       	brne	800114b6 <_strtoull_r+0x72>
80011494:	0f 8a       	ld.ub	r10,r7[0x0]
80011496:	35 8b       	mov	r11,88
80011498:	37 8c       	mov	r12,120
8001149a:	f6 0a 18 00 	cp.b	r10,r11
8001149e:	5f 0b       	sreq	r11
800114a0:	f8 0a 18 00 	cp.b	r10,r12
800114a4:	5f 0a       	sreq	r10
800114a6:	14 4b       	or	r11,r10
800114a8:	f2 0b 18 00 	cp.b	r11,r9
800114ac:	c0 50       	breq	800114b6 <_strtoull_r+0x72>
800114ae:	0f 96       	ld.ub	r6,r7[0x1]
800114b0:	31 05       	mov	r5,16
800114b2:	2f e7       	sub	r7,-2
800114b4:	c0 98       	rjmp	800114c6 <_strtoull_r+0x82>
800114b6:	58 08       	cp.w	r8,0
800114b8:	c0 70       	breq	800114c6 <_strtoull_r+0x82>
800114ba:	e0 46 00 30 	cp.w	r6,48
800114be:	f9 b5 00 08 	moveq	r5,8
800114c2:	f9 b5 01 0a 	movne	r5,10
800114c6:	ea 04 14 1f 	asr	r4,r5,0x1f
800114ca:	0a 98       	mov	r8,r5
800114cc:	08 99       	mov	r9,r4
800114ce:	3f fa       	mov	r10,-1
800114d0:	3f fb       	mov	r11,-1
800114d2:	e0 a0 0b 5a 	rcall	80012b86 <__avr32_udiv64>
800114d6:	08 99       	mov	r9,r4
800114d8:	50 2b       	stdsp	sp[0x8],r11
800114da:	50 3a       	stdsp	sp[0xc],r10
800114dc:	0a 98       	mov	r8,r5
800114de:	3f fa       	mov	r10,-1
800114e0:	3f fb       	mov	r11,-1
800114e2:	e0 a0 0c 9b 	rcall	80012e18 <__avr32_umod64>
800114e6:	30 0b       	mov	r11,0
800114e8:	30 08       	mov	r8,0
800114ea:	30 09       	mov	r9,0
800114ec:	40 41       	lddsp	r1,sp[0x10]
800114ee:	e2 06 07 0e 	ld.ub	lr,r1[r6]
800114f2:	e1 de c0 01 	bfextu	r0,lr,0x0,0x1
800114f6:	ec cc 00 30 	sub	r12,r6,48
800114fa:	58 00       	cp.w	r0,0
800114fc:	f9 b1 01 37 	movne	r1,55
80011500:	f9 b1 00 57 	moveq	r1,87
80011504:	1c 90       	mov	r0,lr
80011506:	e2 10 00 04 	andl	r0,0x4,COH
8001150a:	c0 61       	brne	80011516 <_strtoull_r+0xd2>
8001150c:	ec 01 01 0c 	sub	r12,r6,r1
80011510:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80011514:	c3 70       	breq	80011582 <_strtoull_r+0x13e>
80011516:	0a 3c       	cp.w	r12,r5
80011518:	c3 54       	brge	80011582 <_strtoull_r+0x13e>
8001151a:	fa e0 00 08 	ld.d	r0,sp[8]
8001151e:	00 38       	cp.w	r8,r0
80011520:	e2 09 13 00 	cpc	r9,r1
80011524:	5f be       	srhi	lr
80011526:	30 00       	mov	r0,0
80011528:	fd eb 13 fb 	or	r11,lr,r11>>0x1f
8001152c:	e0 0b 18 00 	cp.b	r11,r0
80011530:	c2 61       	brne	8001157c <_strtoull_r+0x138>
80011532:	fa e0 00 08 	ld.d	r0,sp[8]
80011536:	14 3c       	cp.w	r12,r10
80011538:	5f 9e       	srgt	lr
8001153a:	00 38       	cp.w	r8,r0
8001153c:	e2 09 13 00 	cpc	r9,r1
80011540:	5f 0b       	sreq	r11
80011542:	30 00       	mov	r0,0
80011544:	fd eb 00 0b 	and	r11,lr,r11
80011548:	e0 0b 18 00 	cp.b	r11,r0
8001154c:	c1 81       	brne	8001157c <_strtoull_r+0x138>
8001154e:	f0 05 06 40 	mulu.d	r0,r8,r5
80011552:	ea 09 02 4b 	mul	r11,r5,r9
80011556:	fa e1 00 00 	st.d	sp[0],r0
8001155a:	e8 08 03 4b 	mac	r11,r4,r8
8001155e:	f6 01 00 01 	add	r1,r11,r1
80011562:	50 7c       	stdsp	sp[0x1c],r12
80011564:	50 01       	stdsp	sp[0x0],r1
80011566:	bf 5c       	asr	r12,0x1f
80011568:	fa e0 00 00 	ld.d	r0,sp[0]
8001156c:	50 6c       	stdsp	sp[0x18],r12
8001156e:	30 1b       	mov	r11,1
80011570:	fa e8 00 18 	ld.d	r8,sp[24]
80011574:	00 08       	add	r8,r0
80011576:	f2 01 00 49 	adc	r9,r9,r1
8001157a:	c0 28       	rjmp	8001157e <_strtoull_r+0x13a>
8001157c:	3f fb       	mov	r11,-1
8001157e:	0f 36       	ld.ub	r6,r7++
80011580:	cb 6b       	rjmp	800114ec <_strtoull_r+0xa8>
80011582:	5b fb       	cp.w	r11,-1
80011584:	c0 71       	brne	80011592 <_strtoull_r+0x14e>
80011586:	32 28       	mov	r8,34
80011588:	40 80       	lddsp	r0,sp[0x20]
8001158a:	3f f9       	mov	r9,-1
8001158c:	81 38       	st.w	r0[0xc],r8
8001158e:	3f f8       	mov	r8,-1
80011590:	c0 98       	rjmp	800115a2 <_strtoull_r+0x15e>
80011592:	58 03       	cp.w	r3,0
80011594:	c0 70       	breq	800115a2 <_strtoull_r+0x15e>
80011596:	30 04       	mov	r4,0
80011598:	30 05       	mov	r5,0
8001159a:	e8 08 01 08 	sub	r8,r4,r8
8001159e:	ea 09 01 49 	sbc	r9,r5,r9
800115a2:	40 5e       	lddsp	lr,sp[0x14]
800115a4:	58 0e       	cp.w	lr,0
800115a6:	c0 80       	breq	800115b6 <_strtoull_r+0x172>
800115a8:	58 0b       	cp.w	r11,0
800115aa:	f9 ba 01 ff 	movne	r10,-1
800115ae:	ef da e1 02 	addne	r2,r7,r10
800115b2:	40 5a       	lddsp	r10,sp[0x14]
800115b4:	95 02       	st.w	r10[0x0],r2
800115b6:	10 9a       	mov	r10,r8
800115b8:	12 9b       	mov	r11,r9
800115ba:	2f 7d       	sub	sp,-36
800115bc:	d8 32       	popm	r0-r7,pc
800115be:	d7 03       	nop
800115c0:	00 00       	add	r0,r0
800115c2:	00 cc       	st.b	r0++,r12

800115c4 <_strtoul_r>:
800115c4:	d4 31       	pushm	r0-r7,lr
800115c6:	20 3d       	sub	sp,12
800115c8:	4c 48       	lddpc	r8,800116d8 <_strtoul_r+0x114>
800115ca:	50 2c       	stdsp	sp[0x8],r12
800115cc:	70 01       	ld.w	r1,r8[0x0]
800115ce:	16 98       	mov	r8,r11
800115d0:	11 3e       	ld.ub	lr,r8++
800115d2:	e2 0e 07 05 	ld.ub	r5,r1[lr]
800115d6:	e2 15 00 08 	andl	r5,0x8,COH
800115da:	cf b1       	brne	800115d0 <_strtoul_r+0xc>
800115dc:	e0 4e 00 2d 	cp.w	lr,45
800115e0:	c0 41       	brne	800115e8 <_strtoul_r+0x24>
800115e2:	11 3e       	ld.ub	lr,r8++
800115e4:	30 15       	mov	r5,1
800115e6:	c0 58       	rjmp	800115f0 <_strtoul_r+0x2c>
800115e8:	e0 4e 00 2b 	cp.w	lr,43
800115ec:	c0 21       	brne	800115f0 <_strtoul_r+0x2c>
800115ee:	11 3e       	ld.ub	lr,r8++
800115f0:	58 09       	cp.w	r9,0
800115f2:	5f 0c       	sreq	r12
800115f4:	59 09       	cp.w	r9,16
800115f6:	5f 06       	sreq	r6
800115f8:	30 07       	mov	r7,0
800115fa:	f9 e6 10 06 	or	r6,r12,r6
800115fe:	ee 06 18 00 	cp.b	r6,r7
80011602:	c1 e0       	breq	8001163e <_strtoul_r+0x7a>
80011604:	e0 4e 00 30 	cp.w	lr,48
80011608:	c1 31       	brne	8001162e <_strtoul_r+0x6a>
8001160a:	11 86       	ld.ub	r6,r8[0x0]
8001160c:	35 84       	mov	r4,88
8001160e:	37 83       	mov	r3,120
80011610:	e8 06 18 00 	cp.b	r6,r4
80011614:	5f 04       	sreq	r4
80011616:	e6 06 18 00 	cp.b	r6,r3
8001161a:	5f 06       	sreq	r6
8001161c:	e9 e6 10 06 	or	r6,r4,r6
80011620:	ee 06 18 00 	cp.b	r6,r7
80011624:	c0 50       	breq	8001162e <_strtoul_r+0x6a>
80011626:	11 9e       	ld.ub	lr,r8[0x1]
80011628:	31 09       	mov	r9,16
8001162a:	2f e8       	sub	r8,-2
8001162c:	c0 98       	rjmp	8001163e <_strtoul_r+0x7a>
8001162e:	58 0c       	cp.w	r12,0
80011630:	c0 70       	breq	8001163e <_strtoul_r+0x7a>
80011632:	e0 4e 00 30 	cp.w	lr,48
80011636:	f9 b9 00 08 	moveq	r9,8
8001163a:	f9 b9 01 0a 	movne	r9,10
8001163e:	3f f3       	mov	r3,-1
80011640:	e6 09 0d 02 	divu	r2,r3,r9
80011644:	30 07       	mov	r7,0
80011646:	50 03       	stdsp	sp[0x0],r3
80011648:	0e 9c       	mov	r12,r7
8001164a:	0e 93       	mov	r3,r7
8001164c:	e2 0e 07 04 	ld.ub	r4,r1[lr]
80011650:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
80011654:	f9 b0 01 37 	movne	r0,55
80011658:	f9 b0 00 57 	moveq	r0,87
8001165c:	50 10       	stdsp	sp[0x4],r0
8001165e:	fc c6 00 30 	sub	r6,lr,48
80011662:	08 90       	mov	r0,r4
80011664:	e2 10 00 04 	andl	r0,0x4,COH
80011668:	c0 81       	brne	80011678 <_strtoul_r+0xb4>
8001166a:	40 10       	lddsp	r0,sp[0x4]
8001166c:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
80011670:	fc 00 01 06 	sub	r6,lr,r0
80011674:	58 04       	cp.w	r4,0
80011676:	c1 c0       	breq	800116ae <_strtoul_r+0xea>
80011678:	12 36       	cp.w	r6,r9
8001167a:	c1 a4       	brge	800116ae <_strtoul_r+0xea>
8001167c:	04 3c       	cp.w	r12,r2
8001167e:	5f be       	srhi	lr
80011680:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
80011684:	e6 0e 18 00 	cp.b	lr,r3
80011688:	c1 01       	brne	800116a8 <_strtoul_r+0xe4>
8001168a:	04 3c       	cp.w	r12,r2
8001168c:	5f 0e       	sreq	lr
8001168e:	40 07       	lddsp	r7,sp[0x0]
80011690:	0e 36       	cp.w	r6,r7
80011692:	5f 97       	srgt	r7
80011694:	ef ee 00 0e 	and	lr,r7,lr
80011698:	e6 0e 18 00 	cp.b	lr,r3
8001169c:	c0 61       	brne	800116a8 <_strtoul_r+0xe4>
8001169e:	b3 3c       	mul	r12,r9
800116a0:	30 17       	mov	r7,1
800116a2:	ec 0c 00 0c 	add	r12,r6,r12
800116a6:	c0 28       	rjmp	800116aa <_strtoul_r+0xe6>
800116a8:	3f f7       	mov	r7,-1
800116aa:	11 3e       	ld.ub	lr,r8++
800116ac:	cd 0b       	rjmp	8001164c <_strtoul_r+0x88>
800116ae:	5b f7       	cp.w	r7,-1
800116b0:	c0 61       	brne	800116bc <_strtoul_r+0xf8>
800116b2:	32 29       	mov	r9,34
800116b4:	40 20       	lddsp	r0,sp[0x8]
800116b6:	0e 9c       	mov	r12,r7
800116b8:	81 39       	st.w	r0[0xc],r9
800116ba:	c0 48       	rjmp	800116c2 <_strtoul_r+0xfe>
800116bc:	58 05       	cp.w	r5,0
800116be:	fb bc 01 00 	rsubne	r12,0
800116c2:	58 0a       	cp.w	r10,0
800116c4:	c0 70       	breq	800116d2 <_strtoul_r+0x10e>
800116c6:	58 07       	cp.w	r7,0
800116c8:	f9 b9 01 ff 	movne	r9,-1
800116cc:	f1 d9 e1 0b 	addne	r11,r8,r9
800116d0:	95 0b       	st.w	r10[0x0],r11
800116d2:	2f dd       	sub	sp,-12
800116d4:	d8 32       	popm	r0-r7,pc
800116d6:	d7 03       	nop
800116d8:	00 00       	add	r0,r0
800116da:	00 cc       	st.b	r0++,r12

800116dc <_close>:
800116dc:	30 28       	mov	r8,2
800116de:	d6 73       	breakpoint
800116e0:	3f fc       	mov	r12,-1
800116e2:	35 8b       	mov	r11,88
800116e4:	58 0c       	cp.w	r12,0
800116e6:	5e 4c       	retge	r12
800116e8:	48 2a       	lddpc	r10,800116f0 <_close+0x14>
800116ea:	95 0b       	st.w	r10[0x0],r11
800116ec:	5e fc       	retal	r12
800116ee:	d7 03       	nop
800116f0:	00 00       	add	r0,r0
800116f2:	16 2c       	rsub	r12,r11

800116f4 <_lseek>:
800116f4:	30 58       	mov	r8,5
800116f6:	d6 73       	breakpoint
800116f8:	3f fc       	mov	r12,-1
800116fa:	35 8b       	mov	r11,88
800116fc:	58 0c       	cp.w	r12,0
800116fe:	5e 4c       	retge	r12
80011700:	48 2a       	lddpc	r10,80011708 <_lseek+0x14>
80011702:	95 0b       	st.w	r10[0x0],r11
80011704:	5e fc       	retal	r12
80011706:	d7 03       	nop
80011708:	00 00       	add	r0,r0
8001170a:	16 2c       	rsub	r12,r11

8001170c <isatty>:
8001170c:	30 b8       	mov	r8,11
8001170e:	d6 73       	breakpoint
80011710:	3f fc       	mov	r12,-1
80011712:	35 8b       	mov	r11,88
80011714:	58 0c       	cp.w	r12,0
80011716:	5e 4c       	retge	r12
80011718:	48 2a       	lddpc	r10,80011720 <isatty+0x14>
8001171a:	95 0b       	st.w	r10[0x0],r11
8001171c:	5e fc       	retal	r12
8001171e:	d7 03       	nop
80011720:	00 00       	add	r0,r0
80011722:	16 2c       	rsub	r12,r11

80011724 <_fstat_host>:
80011724:	30 98       	mov	r8,9
80011726:	d6 73       	breakpoint
80011728:	3f fc       	mov	r12,-1
8001172a:	35 8b       	mov	r11,88
8001172c:	58 0c       	cp.w	r12,0
8001172e:	5e 4c       	retge	r12
80011730:	48 2a       	lddpc	r10,80011738 <_fstat_host+0x14>
80011732:	95 0b       	st.w	r10[0x0],r11
80011734:	5e fc       	retal	r12
80011736:	d7 03       	nop
80011738:	00 00       	add	r0,r0
8001173a:	16 2c       	rsub	r12,r11

8001173c <_fstat>:
8001173c:	d4 21       	pushm	r4-r7,lr
8001173e:	21 0d       	sub	sp,64
80011740:	16 97       	mov	r7,r11
80011742:	1a 9b       	mov	r11,sp
80011744:	cf 0f       	rcall	80011724 <_fstat_host>
80011746:	c0 34       	brge	8001174c <_fstat+0x10>
80011748:	3f fc       	mov	r12,-1
8001174a:	c1 c8       	rjmp	80011782 <_fstat+0x46>
8001174c:	40 08       	lddsp	r8,sp[0x0]
8001174e:	ae 08       	st.h	r7[0x0],r8
80011750:	40 18       	lddsp	r8,sp[0x4]
80011752:	ae 18       	st.h	r7[0x2],r8
80011754:	40 28       	lddsp	r8,sp[0x8]
80011756:	8f 18       	st.w	r7[0x4],r8
80011758:	40 38       	lddsp	r8,sp[0xc]
8001175a:	ae 48       	st.h	r7[0x8],r8
8001175c:	40 48       	lddsp	r8,sp[0x10]
8001175e:	ae 58       	st.h	r7[0xa],r8
80011760:	40 58       	lddsp	r8,sp[0x14]
80011762:	ae 68       	st.h	r7[0xc],r8
80011764:	40 68       	lddsp	r8,sp[0x18]
80011766:	ae 78       	st.h	r7[0xe],r8
80011768:	40 88       	lddsp	r8,sp[0x20]
8001176a:	8f 48       	st.w	r7[0x10],r8
8001176c:	40 a8       	lddsp	r8,sp[0x28]
8001176e:	8f b8       	st.w	r7[0x2c],r8
80011770:	40 c8       	lddsp	r8,sp[0x30]
80011772:	8f c8       	st.w	r7[0x30],r8
80011774:	40 d8       	lddsp	r8,sp[0x34]
80011776:	8f 58       	st.w	r7[0x14],r8
80011778:	40 e8       	lddsp	r8,sp[0x38]
8001177a:	30 0c       	mov	r12,0
8001177c:	8f 78       	st.w	r7[0x1c],r8
8001177e:	40 f8       	lddsp	r8,sp[0x3c]
80011780:	8f 98       	st.w	r7[0x24],r8
80011782:	2f 0d       	sub	sp,-64
80011784:	d8 22       	popm	r4-r7,pc
80011786:	d7 03       	nop

80011788 <_sbrk>:
80011788:	d4 01       	pushm	lr
8001178a:	48 c8       	lddpc	r8,800117b8 <_sbrk+0x30>
8001178c:	70 09       	ld.w	r9,r8[0x0]
8001178e:	58 09       	cp.w	r9,0
80011790:	c0 31       	brne	80011796 <_sbrk+0xe>
80011792:	48 b9       	lddpc	r9,800117bc <_sbrk+0x34>
80011794:	91 09       	st.w	r8[0x0],r9
80011796:	48 99       	lddpc	r9,800117b8 <_sbrk+0x30>
80011798:	48 aa       	lddpc	r10,800117c0 <_sbrk+0x38>
8001179a:	72 08       	ld.w	r8,r9[0x0]
8001179c:	f0 0c 00 0c 	add	r12,r8,r12
800117a0:	14 3c       	cp.w	r12,r10
800117a2:	e0 8b 00 04 	brhi	800117aa <_sbrk+0x22>
800117a6:	93 0c       	st.w	r9[0x0],r12
800117a8:	c0 58       	rjmp	800117b2 <_sbrk+0x2a>
800117aa:	c0 1d       	rcall	800119ac <__errno>
800117ac:	30 c8       	mov	r8,12
800117ae:	99 08       	st.w	r12[0x0],r8
800117b0:	3f f8       	mov	r8,-1
800117b2:	10 9c       	mov	r12,r8
800117b4:	d8 02       	popm	pc
800117b6:	d7 03       	nop
800117b8:	00 00       	add	r0,r0
800117ba:	0e 6c       	and	r12,r7
800117bc:	00 00       	add	r0,r0
800117be:	16 30       	cp.w	r0,r11
800117c0:	00 00       	add	r0,r0
800117c2:	f0 00       	*unknown*

800117c4 <__submore>:
800117c4:	d4 21       	pushm	r4-r7,lr
800117c6:	16 97       	mov	r7,r11
800117c8:	76 db       	ld.w	r11,r11[0x34]
800117ca:	ee c8 ff bc 	sub	r8,r7,-68
800117ce:	10 3b       	cp.w	r11,r8
800117d0:	c1 71       	brne	800117fe <__submore+0x3a>
800117d2:	e0 6b 04 00 	mov	r11,1024
800117d6:	fe b0 ed 67 	rcall	8000f2a4 <_malloc_r>
800117da:	c2 50       	breq	80011824 <__submore+0x60>
800117dc:	e0 68 04 00 	mov	r8,1024
800117e0:	8f dc       	st.w	r7[0x34],r12
800117e2:	8f e8       	st.w	r7[0x38],r8
800117e4:	ef 38 00 46 	ld.ub	r8,r7[70]
800117e8:	f8 cc fc 03 	sub	r12,r12,-1021
800117ec:	b8 a8       	st.b	r12[0x2],r8
800117ee:	ef 38 00 45 	ld.ub	r8,r7[69]
800117f2:	b8 98       	st.b	r12[0x1],r8
800117f4:	ef 38 00 44 	ld.ub	r8,r7[68]
800117f8:	b8 88       	st.b	r12[0x0],r8
800117fa:	8f 0c       	st.w	r7[0x0],r12
800117fc:	c1 38       	rjmp	80011822 <__submore+0x5e>
800117fe:	6e e5       	ld.w	r5,r7[0x38]
80011800:	ea 04 15 01 	lsl	r4,r5,0x1
80011804:	08 9a       	mov	r10,r4
80011806:	fe b0 f3 c7 	rcall	8000ff94 <_realloc_r>
8001180a:	18 96       	mov	r6,r12
8001180c:	c0 c0       	breq	80011824 <__submore+0x60>
8001180e:	0a 9a       	mov	r10,r5
80011810:	18 9b       	mov	r11,r12
80011812:	f8 05 00 05 	add	r5,r12,r5
80011816:	0a 9c       	mov	r12,r5
80011818:	fe b0 c3 9d 	rcall	80009f52 <memcpy>
8001181c:	8f e4       	st.w	r7[0x38],r4
8001181e:	8f 05       	st.w	r7[0x0],r5
80011820:	8f d6       	st.w	r7[0x34],r6
80011822:	d8 2a       	popm	r4-r7,pc,r12=0
80011824:	dc 2a       	popm	r4-r7,pc,r12=-1
80011826:	d7 03       	nop

80011828 <_ungetc_r>:
80011828:	d4 21       	pushm	r4-r7,lr
8001182a:	16 97       	mov	r7,r11
8001182c:	14 96       	mov	r6,r10
8001182e:	18 95       	mov	r5,r12
80011830:	5b fb       	cp.w	r11,-1
80011832:	c6 40       	breq	800118fa <_ungetc_r+0xd2>
80011834:	58 0c       	cp.w	r12,0
80011836:	c0 60       	breq	80011842 <_ungetc_r+0x1a>
80011838:	78 68       	ld.w	r8,r12[0x18]
8001183a:	58 08       	cp.w	r8,0
8001183c:	c0 31       	brne	80011842 <_ungetc_r+0x1a>
8001183e:	fe b0 e9 53 	rcall	8000eae4 <__sinit>
80011842:	4b 08       	lddpc	r8,80011900 <_ungetc_r+0xd8>
80011844:	10 36       	cp.w	r6,r8
80011846:	c0 31       	brne	8001184c <_ungetc_r+0x24>
80011848:	6a 06       	ld.w	r6,r5[0x0]
8001184a:	c0 a8       	rjmp	8001185e <_ungetc_r+0x36>
8001184c:	4a e8       	lddpc	r8,80011904 <_ungetc_r+0xdc>
8001184e:	10 36       	cp.w	r6,r8
80011850:	c0 31       	brne	80011856 <_ungetc_r+0x2e>
80011852:	6a 16       	ld.w	r6,r5[0x4]
80011854:	c0 58       	rjmp	8001185e <_ungetc_r+0x36>
80011856:	4a d8       	lddpc	r8,80011908 <_ungetc_r+0xe0>
80011858:	10 36       	cp.w	r6,r8
8001185a:	eb f6 00 02 	ld.weq	r6,r5[0x8]
8001185e:	8c 68       	ld.sh	r8,r6[0xc]
80011860:	a5 d8       	cbr	r8,0x5
80011862:	ac 68       	st.h	r6[0xc],r8
80011864:	ed b8 00 02 	bld	r8,0x2
80011868:	c1 40       	breq	80011890 <_ungetc_r+0x68>
8001186a:	ed b8 00 04 	bld	r8,0x4
8001186e:	c4 51       	brne	800118f8 <_ungetc_r+0xd0>
80011870:	ed b8 00 03 	bld	r8,0x3
80011874:	c0 b1       	brne	8001188a <_ungetc_r+0x62>
80011876:	0c 9b       	mov	r11,r6
80011878:	0a 9c       	mov	r12,r5
8001187a:	fe b0 e8 45 	rcall	8000e904 <_fflush_r>
8001187e:	c3 d1       	brne	800118f8 <_ungetc_r+0xd0>
80011880:	8c 68       	ld.sh	r8,r6[0xc]
80011882:	8d 6c       	st.w	r6[0x18],r12
80011884:	a3 d8       	cbr	r8,0x3
80011886:	8d 2c       	st.w	r6[0x8],r12
80011888:	ac 68       	st.h	r6[0xc],r8
8001188a:	8c 68       	ld.sh	r8,r6[0xc]
8001188c:	a3 a8       	sbr	r8,0x2
8001188e:	ac 68       	st.h	r6[0xc],r8
80011890:	0e 94       	mov	r4,r7
80011892:	6c d8       	ld.w	r8,r6[0x34]
80011894:	5c 54       	castu.b	r4
80011896:	58 08       	cp.w	r8,0
80011898:	c0 f0       	breq	800118b6 <_ungetc_r+0x8e>
8001189a:	6c 19       	ld.w	r9,r6[0x4]
8001189c:	6c e8       	ld.w	r8,r6[0x38]
8001189e:	10 39       	cp.w	r9,r8
800118a0:	c0 55       	brlt	800118aa <_ungetc_r+0x82>
800118a2:	0a 9c       	mov	r12,r5
800118a4:	0c 9b       	mov	r11,r6
800118a6:	c8 ff       	rcall	800117c4 <__submore>
800118a8:	c2 81       	brne	800118f8 <_ungetc_r+0xd0>
800118aa:	6c 08       	ld.w	r8,r6[0x0]
800118ac:	20 18       	sub	r8,1
800118ae:	8d 08       	st.w	r6[0x0],r8
800118b0:	b0 84       	st.b	r8[0x0],r4
800118b2:	08 97       	mov	r7,r4
800118b4:	c0 c8       	rjmp	800118cc <_ungetc_r+0xa4>
800118b6:	6c 49       	ld.w	r9,r6[0x10]
800118b8:	58 09       	cp.w	r9,0
800118ba:	c0 c0       	breq	800118d2 <_ungetc_r+0xaa>
800118bc:	6c 08       	ld.w	r8,r6[0x0]
800118be:	12 38       	cp.w	r8,r9
800118c0:	e0 88 00 09 	brls	800118d2 <_ungetc_r+0xaa>
800118c4:	11 77       	ld.ub	r7,--r8
800118c6:	08 37       	cp.w	r7,r4
800118c8:	c0 51       	brne	800118d2 <_ungetc_r+0xaa>
800118ca:	8d 08       	st.w	r6[0x0],r8
800118cc:	6c 18       	ld.w	r8,r6[0x4]
800118ce:	2f f8       	sub	r8,-1
800118d0:	c1 28       	rjmp	800118f4 <_ungetc_r+0xcc>
800118d2:	6c 18       	ld.w	r8,r6[0x4]
800118d4:	ed 48 00 40 	st.w	r6[64],r8
800118d8:	6c 08       	ld.w	r8,r6[0x0]
800118da:	8d f8       	st.w	r6[0x3c],r8
800118dc:	ec c8 ff bc 	sub	r8,r6,-68
800118e0:	8d d8       	st.w	r6[0x34],r8
800118e2:	30 38       	mov	r8,3
800118e4:	8d e8       	st.w	r6[0x38],r8
800118e6:	ec c8 ff ba 	sub	r8,r6,-70
800118ea:	ed 64 00 46 	st.b	r6[70],r4
800118ee:	8d 08       	st.w	r6[0x0],r8
800118f0:	08 97       	mov	r7,r4
800118f2:	30 18       	mov	r8,1
800118f4:	8d 18       	st.w	r6[0x4],r8
800118f6:	c0 28       	rjmp	800118fa <_ungetc_r+0xd2>
800118f8:	3f f7       	mov	r7,-1
800118fa:	0e 9c       	mov	r12,r7
800118fc:	d8 22       	popm	r4-r7,pc
800118fe:	d7 03       	nop
80011900:	80 01       	ld.sh	r1,r0[0x0]
80011902:	42 80       	lddsp	r0,sp[0xa0]
80011904:	80 01       	ld.sh	r1,r0[0x0]
80011906:	42 a0       	lddsp	r0,sp[0xa8]
80011908:	80 01       	ld.sh	r1,r0[0x0]
8001190a:	42 c0       	lddsp	r0,sp[0xb0]

8001190c <_write_r>:
8001190c:	d4 21       	pushm	r4-r7,lr
8001190e:	16 98       	mov	r8,r11
80011910:	18 97       	mov	r7,r12
80011912:	10 9c       	mov	r12,r8
80011914:	30 08       	mov	r8,0
80011916:	14 9b       	mov	r11,r10
80011918:	48 66       	lddpc	r6,80011930 <_write_r+0x24>
8001191a:	12 9a       	mov	r10,r9
8001191c:	8d 08       	st.w	r6[0x0],r8
8001191e:	fe b0 b8 4f 	rcall	800089bc <_write>
80011922:	5b fc       	cp.w	r12,-1
80011924:	c0 51       	brne	8001192e <_write_r+0x22>
80011926:	6c 08       	ld.w	r8,r6[0x0]
80011928:	58 08       	cp.w	r8,0
8001192a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001192e:	d8 22       	popm	r4-r7,pc
80011930:	00 00       	add	r0,r0
80011932:	16 2c       	rsub	r12,r11

80011934 <_calloc_r>:
80011934:	d4 21       	pushm	r4-r7,lr
80011936:	f4 0b 02 4b 	mul	r11,r10,r11
8001193a:	fe b0 ec b5 	rcall	8000f2a4 <_malloc_r>
8001193e:	18 97       	mov	r7,r12
80011940:	c2 30       	breq	80011986 <_calloc_r+0x52>
80011942:	f8 fa ff fc 	ld.w	r10,r12[-4]
80011946:	e0 1a ff fc 	andl	r10,0xfffc
8001194a:	20 4a       	sub	r10,4
8001194c:	e0 4a 00 24 	cp.w	r10,36
80011950:	e0 8b 00 18 	brhi	80011980 <_calloc_r+0x4c>
80011954:	18 98       	mov	r8,r12
80011956:	59 3a       	cp.w	r10,19
80011958:	e0 88 00 0f 	brls	80011976 <_calloc_r+0x42>
8001195c:	30 09       	mov	r9,0
8001195e:	10 a9       	st.w	r8++,r9
80011960:	10 a9       	st.w	r8++,r9
80011962:	59 ba       	cp.w	r10,27
80011964:	e0 88 00 09 	brls	80011976 <_calloc_r+0x42>
80011968:	10 a9       	st.w	r8++,r9
8001196a:	10 a9       	st.w	r8++,r9
8001196c:	e0 4a 00 24 	cp.w	r10,36
80011970:	c0 31       	brne	80011976 <_calloc_r+0x42>
80011972:	10 a9       	st.w	r8++,r9
80011974:	10 a9       	st.w	r8++,r9
80011976:	30 09       	mov	r9,0
80011978:	10 a9       	st.w	r8++,r9
8001197a:	91 19       	st.w	r8[0x4],r9
8001197c:	91 09       	st.w	r8[0x0],r9
8001197e:	c0 48       	rjmp	80011986 <_calloc_r+0x52>
80011980:	30 0b       	mov	r11,0
80011982:	fe b0 c3 8c 	rcall	8000a09a <memset>
80011986:	0e 9c       	mov	r12,r7
80011988:	d8 22       	popm	r4-r7,pc
8001198a:	d7 03       	nop

8001198c <_close_r>:
8001198c:	d4 21       	pushm	r4-r7,lr
8001198e:	30 08       	mov	r8,0
80011990:	18 97       	mov	r7,r12
80011992:	48 66       	lddpc	r6,800119a8 <_close_r+0x1c>
80011994:	16 9c       	mov	r12,r11
80011996:	8d 08       	st.w	r6[0x0],r8
80011998:	ca 2e       	rcall	800116dc <_close>
8001199a:	5b fc       	cp.w	r12,-1
8001199c:	c0 51       	brne	800119a6 <_close_r+0x1a>
8001199e:	6c 08       	ld.w	r8,r6[0x0]
800119a0:	58 08       	cp.w	r8,0
800119a2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800119a6:	d8 22       	popm	r4-r7,pc
800119a8:	00 00       	add	r0,r0
800119aa:	16 2c       	rsub	r12,r11

800119ac <__errno>:
800119ac:	48 28       	lddpc	r8,800119b4 <__errno+0x8>
800119ae:	70 0c       	ld.w	r12,r8[0x0]
800119b0:	2f 4c       	sub	r12,-12
800119b2:	5e fc       	retal	r12
800119b4:	00 00       	add	r0,r0
800119b6:	01 c0       	ld.ub	r0,r0[0x4]

800119b8 <_fclose_r>:
800119b8:	d4 21       	pushm	r4-r7,lr
800119ba:	18 96       	mov	r6,r12
800119bc:	16 97       	mov	r7,r11
800119be:	58 0b       	cp.w	r11,0
800119c0:	c0 31       	brne	800119c6 <_fclose_r+0xe>
800119c2:	16 95       	mov	r5,r11
800119c4:	c5 08       	rjmp	80011a64 <_fclose_r+0xac>
800119c6:	fe b0 e8 3b 	rcall	8000ea3c <__sfp_lock_acquire>
800119ca:	58 06       	cp.w	r6,0
800119cc:	c0 70       	breq	800119da <_fclose_r+0x22>
800119ce:	6c 68       	ld.w	r8,r6[0x18]
800119d0:	58 08       	cp.w	r8,0
800119d2:	c0 41       	brne	800119da <_fclose_r+0x22>
800119d4:	0c 9c       	mov	r12,r6
800119d6:	fe b0 e8 87 	rcall	8000eae4 <__sinit>
800119da:	4a 48       	lddpc	r8,80011a68 <_fclose_r+0xb0>
800119dc:	10 37       	cp.w	r7,r8
800119de:	c0 31       	brne	800119e4 <_fclose_r+0x2c>
800119e0:	6c 07       	ld.w	r7,r6[0x0]
800119e2:	c0 a8       	rjmp	800119f6 <_fclose_r+0x3e>
800119e4:	4a 28       	lddpc	r8,80011a6c <_fclose_r+0xb4>
800119e6:	10 37       	cp.w	r7,r8
800119e8:	c0 31       	brne	800119ee <_fclose_r+0x36>
800119ea:	6c 17       	ld.w	r7,r6[0x4]
800119ec:	c0 58       	rjmp	800119f6 <_fclose_r+0x3e>
800119ee:	4a 18       	lddpc	r8,80011a70 <_fclose_r+0xb8>
800119f0:	10 37       	cp.w	r7,r8
800119f2:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800119f6:	8e 69       	ld.sh	r9,r7[0xc]
800119f8:	30 08       	mov	r8,0
800119fa:	f0 09 19 00 	cp.h	r9,r8
800119fe:	c0 51       	brne	80011a08 <_fclose_r+0x50>
80011a00:	fe b0 e8 1f 	rcall	8000ea3e <__sfp_lock_release>
80011a04:	30 05       	mov	r5,0
80011a06:	c2 f8       	rjmp	80011a64 <_fclose_r+0xac>
80011a08:	0e 9b       	mov	r11,r7
80011a0a:	0c 9c       	mov	r12,r6
80011a0c:	fe b0 e7 7c 	rcall	8000e904 <_fflush_r>
80011a10:	6e c8       	ld.w	r8,r7[0x30]
80011a12:	18 95       	mov	r5,r12
80011a14:	58 08       	cp.w	r8,0
80011a16:	c0 60       	breq	80011a22 <_fclose_r+0x6a>
80011a18:	6e 8b       	ld.w	r11,r7[0x20]
80011a1a:	0c 9c       	mov	r12,r6
80011a1c:	5d 18       	icall	r8
80011a1e:	f9 b5 05 ff 	movlt	r5,-1
80011a22:	8e 68       	ld.sh	r8,r7[0xc]
80011a24:	ed b8 00 07 	bld	r8,0x7
80011a28:	c0 51       	brne	80011a32 <_fclose_r+0x7a>
80011a2a:	6e 4b       	ld.w	r11,r7[0x10]
80011a2c:	0c 9c       	mov	r12,r6
80011a2e:	fe b0 e9 57 	rcall	8000ecdc <_free_r>
80011a32:	6e db       	ld.w	r11,r7[0x34]
80011a34:	58 0b       	cp.w	r11,0
80011a36:	c0 a0       	breq	80011a4a <_fclose_r+0x92>
80011a38:	ee c8 ff bc 	sub	r8,r7,-68
80011a3c:	10 3b       	cp.w	r11,r8
80011a3e:	c0 40       	breq	80011a46 <_fclose_r+0x8e>
80011a40:	0c 9c       	mov	r12,r6
80011a42:	fe b0 e9 4d 	rcall	8000ecdc <_free_r>
80011a46:	30 08       	mov	r8,0
80011a48:	8f d8       	st.w	r7[0x34],r8
80011a4a:	6f 2b       	ld.w	r11,r7[0x48]
80011a4c:	58 0b       	cp.w	r11,0
80011a4e:	c0 70       	breq	80011a5c <_fclose_r+0xa4>
80011a50:	0c 9c       	mov	r12,r6
80011a52:	fe b0 e9 45 	rcall	8000ecdc <_free_r>
80011a56:	30 08       	mov	r8,0
80011a58:	ef 48 00 48 	st.w	r7[72],r8
80011a5c:	30 08       	mov	r8,0
80011a5e:	ae 68       	st.h	r7[0xc],r8
80011a60:	fe b0 e7 ef 	rcall	8000ea3e <__sfp_lock_release>
80011a64:	0a 9c       	mov	r12,r5
80011a66:	d8 22       	popm	r4-r7,pc
80011a68:	80 01       	ld.sh	r1,r0[0x0]
80011a6a:	42 80       	lddsp	r0,sp[0xa0]
80011a6c:	80 01       	ld.sh	r1,r0[0x0]
80011a6e:	42 a0       	lddsp	r0,sp[0xa8]
80011a70:	80 01       	ld.sh	r1,r0[0x0]
80011a72:	42 c0       	lddsp	r0,sp[0xb0]

80011a74 <fclose>:
80011a74:	d4 01       	pushm	lr
80011a76:	48 38       	lddpc	r8,80011a80 <fclose+0xc>
80011a78:	18 9b       	mov	r11,r12
80011a7a:	70 0c       	ld.w	r12,r8[0x0]
80011a7c:	c9 ef       	rcall	800119b8 <_fclose_r>
80011a7e:	d8 02       	popm	pc
80011a80:	00 00       	add	r0,r0
80011a82:	01 c0       	ld.ub	r0,r0[0x4]

80011a84 <_fstat_r>:
80011a84:	d4 21       	pushm	r4-r7,lr
80011a86:	16 98       	mov	r8,r11
80011a88:	18 97       	mov	r7,r12
80011a8a:	10 9c       	mov	r12,r8
80011a8c:	30 08       	mov	r8,0
80011a8e:	48 66       	lddpc	r6,80011aa4 <_fstat_r+0x20>
80011a90:	14 9b       	mov	r11,r10
80011a92:	8d 08       	st.w	r6[0x0],r8
80011a94:	c5 4e       	rcall	8001173c <_fstat>
80011a96:	5b fc       	cp.w	r12,-1
80011a98:	c0 51       	brne	80011aa2 <_fstat_r+0x1e>
80011a9a:	6c 08       	ld.w	r8,r6[0x0]
80011a9c:	58 08       	cp.w	r8,0
80011a9e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011aa2:	d8 22       	popm	r4-r7,pc
80011aa4:	00 00       	add	r0,r0
80011aa6:	16 2c       	rsub	r12,r11

80011aa8 <__hexdig_init>:
80011aa8:	49 49       	lddpc	r9,80011af8 <__hexdig_init+0x50>
80011aaa:	31 08       	mov	r8,16
80011aac:	49 4b       	lddpc	r11,80011afc <__hexdig_init+0x54>
80011aae:	c0 58       	rjmp	80011ab8 <__hexdig_init+0x10>
80011ab0:	f6 0a 0b 08 	st.b	r11[r10],r8
80011ab4:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
80011ab8:	f0 cc ff ff 	sub	r12,r8,-1
80011abc:	13 3a       	ld.ub	r10,r9++
80011abe:	58 0a       	cp.w	r10,0
80011ac0:	cf 81       	brne	80011ab0 <__hexdig_init+0x8>
80011ac2:	49 09       	lddpc	r9,80011b00 <__hexdig_init+0x58>
80011ac4:	31 a8       	mov	r8,26
80011ac6:	48 eb       	lddpc	r11,80011afc <__hexdig_init+0x54>
80011ac8:	c0 58       	rjmp	80011ad2 <__hexdig_init+0x2a>
80011aca:	f6 0a 0b 08 	st.b	r11[r10],r8
80011ace:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
80011ad2:	f0 cc ff ff 	sub	r12,r8,-1
80011ad6:	13 3a       	ld.ub	r10,r9++
80011ad8:	58 0a       	cp.w	r10,0
80011ada:	cf 81       	brne	80011aca <__hexdig_init+0x22>
80011adc:	48 a9       	lddpc	r9,80011b04 <__hexdig_init+0x5c>
80011ade:	31 a8       	mov	r8,26
80011ae0:	48 7b       	lddpc	r11,80011afc <__hexdig_init+0x54>
80011ae2:	c0 58       	rjmp	80011aec <__hexdig_init+0x44>
80011ae4:	f6 0a 0b 08 	st.b	r11[r10],r8
80011ae8:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
80011aec:	f0 cc ff ff 	sub	r12,r8,-1
80011af0:	13 3a       	ld.ub	r10,r9++
80011af2:	58 0a       	cp.w	r10,0
80011af4:	cf 81       	brne	80011ae4 <__hexdig_init+0x3c>
80011af6:	5e fc       	retal	r12
80011af8:	80 01       	ld.sh	r1,r0[0x0]
80011afa:	44 7c       	lddsp	r12,sp[0x11c]
80011afc:	00 00       	add	r0,r0
80011afe:	15 2c       	ld.uh	r12,r10++
80011b00:	80 01       	ld.sh	r1,r0[0x0]
80011b02:	44 74       	lddsp	r4,sp[0x11c]
80011b04:	80 01       	ld.sh	r1,r0[0x0]
80011b06:	44 6c       	lddsp	r12,sp[0x118]

80011b08 <rshift>:
80011b08:	d4 21       	pushm	r4-r7,lr
80011b0a:	f8 c8 ff ec 	sub	r8,r12,-20
80011b0e:	f6 09 14 05 	asr	r9,r11,0x5
80011b12:	78 4e       	ld.w	lr,r12[0x10]
80011b14:	1c 39       	cp.w	r9,lr
80011b16:	c2 64       	brge	80011b62 <rshift+0x5a>
80011b18:	2f be       	sub	lr,-5
80011b1a:	2f b9       	sub	r9,-5
80011b1c:	f8 0e 00 2e 	add	lr,r12,lr<<0x2
80011b20:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80011b24:	f8 09 00 2a 	add	r10,r12,r9<<0x2
80011b28:	58 0b       	cp.w	r11,0
80011b2a:	c1 a0       	breq	80011b5e <rshift+0x56>
80011b2c:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
80011b30:	2f ca       	sub	r10,-4
80011b32:	f2 0b 0a 49 	lsr	r9,r9,r11
80011b36:	f6 07 11 20 	rsub	r7,r11,32
80011b3a:	c0 98       	rjmp	80011b4c <rshift+0x44>
80011b3c:	74 06       	ld.w	r6,r10[0x0]
80011b3e:	ec 07 09 46 	lsl	r6,r6,r7
80011b42:	0c 49       	or	r9,r6
80011b44:	10 a9       	st.w	r8++,r9
80011b46:	15 09       	ld.w	r9,r10++
80011b48:	f2 0b 0a 49 	lsr	r9,r9,r11
80011b4c:	1c 3a       	cp.w	r10,lr
80011b4e:	cf 73       	brcs	80011b3c <rshift+0x34>
80011b50:	91 09       	st.w	r8[0x0],r9
80011b52:	58 09       	cp.w	r9,0
80011b54:	c0 70       	breq	80011b62 <rshift+0x5a>
80011b56:	2f c8       	sub	r8,-4
80011b58:	c0 58       	rjmp	80011b62 <rshift+0x5a>
80011b5a:	15 09       	ld.w	r9,r10++
80011b5c:	10 a9       	st.w	r8++,r9
80011b5e:	1c 3a       	cp.w	r10,lr
80011b60:	cf d3       	brcs	80011b5a <rshift+0x52>
80011b62:	f8 c9 ff ec 	sub	r9,r12,-20
80011b66:	12 18       	sub	r8,r9
80011b68:	a3 48       	asr	r8,0x2
80011b6a:	99 48       	st.w	r12[0x10],r8
80011b6c:	f9 f8 0a 05 	st.weq	r12[0x14],r8
80011b70:	d8 22       	popm	r4-r7,pc
80011b72:	d7 03       	nop

80011b74 <__gethex>:
80011b74:	d4 31       	pushm	r0-r7,lr
80011b76:	20 3d       	sub	sp,12
80011b78:	50 29       	stdsp	sp[0x8],r9
80011b7a:	50 08       	stdsp	sp[0x0],r8
80011b7c:	40 c9       	lddsp	r9,sp[0x30]
80011b7e:	4d 68       	lddpc	r8,80011cd4 <__gethex+0x160>
80011b80:	50 19       	stdsp	sp[0x4],r9
80011b82:	18 91       	mov	r1,r12
80011b84:	f1 39 00 30 	ld.ub	r9,r8[48]
80011b88:	16 96       	mov	r6,r11
80011b8a:	14 97       	mov	r7,r10
80011b8c:	30 08       	mov	r8,0
80011b8e:	f0 09 18 00 	cp.b	r9,r8
80011b92:	c0 21       	brne	80011b96 <__gethex+0x22>
80011b94:	c8 af       	rcall	80011aa8 <__hexdig_init>
80011b96:	6c 05       	ld.w	r5,r6[0x0]
80011b98:	30 03       	mov	r3,0
80011b9a:	2f e5       	sub	r5,-2
80011b9c:	33 09       	mov	r9,48
80011b9e:	c0 28       	rjmp	80011ba2 <__gethex+0x2e>
80011ba0:	2f f3       	sub	r3,-1
80011ba2:	0a 94       	mov	r4,r5
80011ba4:	0b 88       	ld.ub	r8,r5[0x0]
80011ba6:	2f f5       	sub	r5,-1
80011ba8:	f2 08 18 00 	cp.b	r8,r9
80011bac:	cf a0       	breq	80011ba0 <__gethex+0x2c>
80011bae:	4c aa       	lddpc	r10,80011cd4 <__gethex+0x160>
80011bb0:	30 0b       	mov	r11,0
80011bb2:	f4 08 07 09 	ld.ub	r9,r10[r8]
80011bb6:	f6 09 18 00 	cp.b	r9,r11
80011bba:	c0 50       	breq	80011bc4 <__gethex+0x50>
80011bbc:	30 0b       	mov	r11,0
80011bbe:	08 92       	mov	r2,r4
80011bc0:	16 95       	mov	r5,r11
80011bc2:	c2 b8       	rjmp	80011c18 <__gethex+0xa4>
80011bc4:	32 eb       	mov	r11,46
80011bc6:	f6 08 18 00 	cp.b	r8,r11
80011bca:	c0 30       	breq	80011bd0 <__gethex+0x5c>
80011bcc:	08 92       	mov	r2,r4
80011bce:	c0 88       	rjmp	80011bde <__gethex+0x6a>
80011bd0:	0b 88       	ld.ub	r8,r5[0x0]
80011bd2:	0a 92       	mov	r2,r5
80011bd4:	f4 08 07 08 	ld.ub	r8,r10[r8]
80011bd8:	f2 08 18 00 	cp.b	r8,r9
80011bdc:	c0 41       	brne	80011be4 <__gethex+0x70>
80011bde:	30 05       	mov	r5,0
80011be0:	30 1b       	mov	r11,1
80011be2:	c4 08       	rjmp	80011c62 <__gethex+0xee>
80011be4:	0a 92       	mov	r2,r5
80011be6:	33 09       	mov	r9,48
80011be8:	c0 28       	rjmp	80011bec <__gethex+0x78>
80011bea:	2f f2       	sub	r2,-1
80011bec:	05 88       	ld.ub	r8,r2[0x0]
80011bee:	f2 08 18 00 	cp.b	r8,r9
80011bf2:	cf c0       	breq	80011bea <__gethex+0x76>
80011bf4:	4b 89       	lddpc	r9,80011cd4 <__gethex+0x160>
80011bf6:	f2 08 07 09 	ld.ub	r9,r9[r8]
80011bfa:	30 08       	mov	r8,0
80011bfc:	f0 09 18 00 	cp.b	r9,r8
80011c00:	e4 04 17 10 	movne	r4,r2
80011c04:	f9 bb 01 00 	movne	r11,0
80011c08:	f9 b3 01 01 	movne	r3,1
80011c0c:	f9 bb 00 01 	moveq	r11,1
80011c10:	e4 04 17 00 	moveq	r4,r2
80011c14:	f6 03 17 00 	moveq	r3,r11
80011c18:	4a fa       	lddpc	r10,80011cd4 <__gethex+0x160>
80011c1a:	30 08       	mov	r8,0
80011c1c:	c0 28       	rjmp	80011c20 <__gethex+0xac>
80011c1e:	2f f2       	sub	r2,-1
80011c20:	05 89       	ld.ub	r9,r2[0x0]
80011c22:	f4 09 07 0c 	ld.ub	r12,r10[r9]
80011c26:	f0 0c 18 00 	cp.b	r12,r8
80011c2a:	cf a1       	brne	80011c1e <__gethex+0xaa>
80011c2c:	58 05       	cp.w	r5,0
80011c2e:	5f 0a       	sreq	r10
80011c30:	32 ec       	mov	r12,46
80011c32:	f8 09 18 00 	cp.b	r9,r12
80011c36:	5f 09       	sreq	r9
80011c38:	f3 ea 00 0a 	and	r10,r9,r10
80011c3c:	f0 0a 18 00 	cp.b	r10,r8
80011c40:	c0 d0       	breq	80011c5a <__gethex+0xe6>
80011c42:	2f f2       	sub	r2,-1
80011c44:	4a 49       	lddpc	r9,80011cd4 <__gethex+0x160>
80011c46:	04 95       	mov	r5,r2
80011c48:	30 08       	mov	r8,0
80011c4a:	c0 28       	rjmp	80011c4e <__gethex+0xda>
80011c4c:	2f f2       	sub	r2,-1
80011c4e:	05 8a       	ld.ub	r10,r2[0x0]
80011c50:	f2 0a 07 0a 	ld.ub	r10,r9[r10]
80011c54:	f0 0a 18 00 	cp.b	r10,r8
80011c58:	cf a1       	brne	80011c4c <__gethex+0xd8>
80011c5a:	58 05       	cp.w	r5,0
80011c5c:	c0 30       	breq	80011c62 <__gethex+0xee>
80011c5e:	04 15       	sub	r5,r2
80011c60:	a3 65       	lsl	r5,0x2
80011c62:	05 88       	ld.ub	r8,r2[0x0]
80011c64:	35 09       	mov	r9,80
80011c66:	f2 08 18 00 	cp.b	r8,r9
80011c6a:	c0 50       	breq	80011c74 <__gethex+0x100>
80011c6c:	37 09       	mov	r9,112
80011c6e:	f2 08 18 00 	cp.b	r8,r9
80011c72:	c3 31       	brne	80011cd8 <__gethex+0x164>
80011c74:	e4 c8 ff ff 	sub	r8,r2,-1
80011c78:	32 ba       	mov	r10,43
80011c7a:	11 89       	ld.ub	r9,r8[0x0]
80011c7c:	f4 09 18 00 	cp.b	r9,r10
80011c80:	c0 90       	breq	80011c92 <__gethex+0x11e>
80011c82:	32 da       	mov	r10,45
80011c84:	f4 09 18 00 	cp.b	r9,r10
80011c88:	c0 30       	breq	80011c8e <__gethex+0x11a>
80011c8a:	30 0a       	mov	r10,0
80011c8c:	c0 58       	rjmp	80011c96 <__gethex+0x122>
80011c8e:	30 1a       	mov	r10,1
80011c90:	c0 28       	rjmp	80011c94 <__gethex+0x120>
80011c92:	30 0a       	mov	r10,0
80011c94:	2f f8       	sub	r8,-1
80011c96:	49 0e       	lddpc	lr,80011cd4 <__gethex+0x160>
80011c98:	11 89       	ld.ub	r9,r8[0x0]
80011c9a:	fc 09 07 09 	ld.ub	r9,lr[r9]
80011c9e:	58 09       	cp.w	r9,0
80011ca0:	c1 c0       	breq	80011cd8 <__gethex+0x164>
80011ca2:	59 99       	cp.w	r9,25
80011ca4:	e0 89 00 1a 	brgt	80011cd8 <__gethex+0x164>
80011ca8:	21 09       	sub	r9,16
80011caa:	c0 48       	rjmp	80011cb2 <__gethex+0x13e>
80011cac:	21 0c       	sub	r12,16
80011cae:	f8 00 00 19 	add	r9,r12,r0<<0x1
80011cb2:	2f f8       	sub	r8,-1
80011cb4:	f2 09 00 20 	add	r0,r9,r9<<0x2
80011cb8:	11 8c       	ld.ub	r12,r8[0x0]
80011cba:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80011cbe:	58 0c       	cp.w	r12,0
80011cc0:	c0 40       	breq	80011cc8 <__gethex+0x154>
80011cc2:	59 9c       	cp.w	r12,25
80011cc4:	fe 9a ff f4 	brle	80011cac <__gethex+0x138>
80011cc8:	58 0a       	cp.w	r10,0
80011cca:	fb b9 01 00 	rsubne	r9,0
80011cce:	12 05       	add	r5,r9
80011cd0:	c0 58       	rjmp	80011cda <__gethex+0x166>
80011cd2:	d7 03       	nop
80011cd4:	00 00       	add	r0,r0
80011cd6:	15 2c       	ld.uh	r12,r10++
80011cd8:	04 98       	mov	r8,r2
80011cda:	8d 08       	st.w	r6[0x0],r8
80011cdc:	58 0b       	cp.w	r11,0
80011cde:	c0 70       	breq	80011cec <__gethex+0x178>
80011ce0:	58 03       	cp.w	r3,0
80011ce2:	f9 b3 01 00 	movne	r3,0
80011ce6:	f9 b3 00 06 	moveq	r3,6
80011cea:	c5 29       	rjmp	80011f8e <__gethex+0x41a>
80011cec:	e4 c8 00 01 	sub	r8,r2,1
80011cf0:	08 18       	sub	r8,r4
80011cf2:	c0 38       	rjmp	80011cf8 <__gethex+0x184>
80011cf4:	2f fb       	sub	r11,-1
80011cf6:	a1 58       	asr	r8,0x1
80011cf8:	58 78       	cp.w	r8,7
80011cfa:	fe 99 ff fd 	brgt	80011cf4 <__gethex+0x180>
80011cfe:	02 9c       	mov	r12,r1
80011d00:	fe b0 ee c8 	rcall	8000fa90 <_Balloc>
80011d04:	30 08       	mov	r8,0
80011d06:	f8 c0 ff ec 	sub	r0,r12,-20
80011d0a:	18 96       	mov	r6,r12
80011d0c:	00 9a       	mov	r10,r0
80011d0e:	10 99       	mov	r9,r8
80011d10:	32 eb       	mov	r11,46
80011d12:	4c be       	lddpc	lr,80011e3c <__gethex+0x2c8>
80011d14:	c1 48       	rjmp	80011d3c <__gethex+0x1c8>
80011d16:	05 7c       	ld.ub	r12,--r2
80011d18:	f6 0c 18 00 	cp.b	r12,r11
80011d1c:	c1 00       	breq	80011d3c <__gethex+0x1c8>
80011d1e:	e0 49 00 20 	cp.w	r9,32
80011d22:	c0 41       	brne	80011d2a <__gethex+0x1b6>
80011d24:	14 a8       	st.w	r10++,r8
80011d26:	30 08       	mov	r8,0
80011d28:	10 99       	mov	r9,r8
80011d2a:	05 8c       	ld.ub	r12,r2[0x0]
80011d2c:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80011d30:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80011d34:	f8 09 09 4c 	lsl	r12,r12,r9
80011d38:	2f c9       	sub	r9,-4
80011d3a:	18 48       	or	r8,r12
80011d3c:	08 32       	cp.w	r2,r4
80011d3e:	fe 9b ff ec 	brhi	80011d16 <__gethex+0x1a2>
80011d42:	14 a8       	st.w	r10++,r8
80011d44:	10 9c       	mov	r12,r8
80011d46:	ec c8 ff ec 	sub	r8,r6,-20
80011d4a:	10 1a       	sub	r10,r8
80011d4c:	a3 4a       	asr	r10,0x2
80011d4e:	f4 03 15 05 	lsl	r3,r10,0x5
80011d52:	8d 4a       	st.w	r6[0x10],r10
80011d54:	fe b0 ed 1e 	rcall	8000f790 <__hi0bits>
80011d58:	6e 04       	ld.w	r4,r7[0x0]
80011d5a:	18 13       	sub	r3,r12
80011d5c:	08 33       	cp.w	r3,r4
80011d5e:	e0 8a 00 27 	brle	80011dac <__gethex+0x238>
80011d62:	08 13       	sub	r3,r4
80011d64:	0c 9c       	mov	r12,r6
80011d66:	06 9b       	mov	r11,r3
80011d68:	fe b0 ee 53 	rcall	8000fa0e <__any_on>
80011d6c:	c0 31       	brne	80011d72 <__gethex+0x1fe>
80011d6e:	18 92       	mov	r2,r12
80011d70:	c1 98       	rjmp	80011da2 <__gethex+0x22e>
80011d72:	e6 cb 00 01 	sub	r11,r3,1
80011d76:	30 12       	mov	r2,1
80011d78:	f6 08 14 05 	asr	r8,r11,0x5
80011d7c:	e4 0b 09 49 	lsl	r9,r2,r11
80011d80:	2f b8       	sub	r8,-5
80011d82:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
80011d86:	f3 e8 00 08 	and	r8,r9,r8
80011d8a:	c0 c0       	breq	80011da2 <__gethex+0x22e>
80011d8c:	04 3b       	cp.w	r11,r2
80011d8e:	e0 8a 00 09 	brle	80011da0 <__gethex+0x22c>
80011d92:	20 1b       	sub	r11,1
80011d94:	0c 9c       	mov	r12,r6
80011d96:	fe b0 ee 3c 	rcall	8000fa0e <__any_on>
80011d9a:	c0 30       	breq	80011da0 <__gethex+0x22c>
80011d9c:	30 32       	mov	r2,3
80011d9e:	c0 28       	rjmp	80011da2 <__gethex+0x22e>
80011da0:	30 22       	mov	r2,2
80011da2:	06 05       	add	r5,r3
80011da4:	06 9b       	mov	r11,r3
80011da6:	0c 9c       	mov	r12,r6
80011da8:	cb 0e       	rcall	80011b08 <rshift>
80011daa:	c1 08       	rjmp	80011dca <__gethex+0x256>
80011dac:	08 33       	cp.w	r3,r4
80011dae:	c0 35       	brlt	80011db4 <__gethex+0x240>
80011db0:	30 02       	mov	r2,0
80011db2:	c0 c8       	rjmp	80011dca <__gethex+0x256>
80011db4:	e8 03 01 0a 	sub	r10,r4,r3
80011db8:	0c 9b       	mov	r11,r6
80011dba:	14 15       	sub	r5,r10
80011dbc:	02 9c       	mov	r12,r1
80011dbe:	30 02       	mov	r2,0
80011dc0:	fe b0 ef 5c 	rcall	8000fc78 <__lshift>
80011dc4:	18 96       	mov	r6,r12
80011dc6:	f8 c0 ff ec 	sub	r0,r12,-20
80011dca:	6e 28       	ld.w	r8,r7[0x8]
80011dcc:	10 35       	cp.w	r5,r8
80011dce:	e0 8a 00 09 	brle	80011de0 <__gethex+0x26c>
80011dd2:	0c 9b       	mov	r11,r6
80011dd4:	02 9c       	mov	r12,r1
80011dd6:	e0 63 00 a3 	mov	r3,163
80011dda:	fe b0 ee 41 	rcall	8000fa5c <_Bfree>
80011dde:	c3 68       	rjmp	80011e4a <__gethex+0x2d6>
80011de0:	6e 18       	ld.w	r8,r7[0x4]
80011de2:	10 35       	cp.w	r5,r8
80011de4:	c0 35       	brlt	80011dea <__gethex+0x276>
80011de6:	30 13       	mov	r3,1
80011de8:	c5 58       	rjmp	80011e92 <__gethex+0x31e>
80011dea:	f0 05 01 05 	sub	r5,r8,r5
80011dee:	08 35       	cp.w	r5,r4
80011df0:	c3 15       	brlt	80011e52 <__gethex+0x2de>
80011df2:	6e 38       	ld.w	r8,r7[0xc]
80011df4:	58 28       	cp.w	r8,2
80011df6:	c1 10       	breq	80011e18 <__gethex+0x2a4>
80011df8:	58 38       	cp.w	r8,3
80011dfa:	c1 30       	breq	80011e20 <__gethex+0x2ac>
80011dfc:	58 18       	cp.w	r8,1
80011dfe:	c2 11       	brne	80011e40 <__gethex+0x2cc>
80011e00:	08 35       	cp.w	r5,r4
80011e02:	c1 f1       	brne	80011e40 <__gethex+0x2cc>
80011e04:	58 14       	cp.w	r4,1
80011e06:	e0 8a 00 10 	brle	80011e26 <__gethex+0x2b2>
80011e0a:	e8 cb 00 01 	sub	r11,r4,1
80011e0e:	0c 9c       	mov	r12,r6
80011e10:	fe b0 ed ff 	rcall	8000fa0e <__any_on>
80011e14:	c0 91       	brne	80011e26 <__gethex+0x2b2>
80011e16:	c1 58       	rjmp	80011e40 <__gethex+0x2cc>
80011e18:	40 18       	lddsp	r8,sp[0x4]
80011e1a:	58 08       	cp.w	r8,0
80011e1c:	c0 50       	breq	80011e26 <__gethex+0x2b2>
80011e1e:	c1 18       	rjmp	80011e40 <__gethex+0x2cc>
80011e20:	40 19       	lddsp	r9,sp[0x4]
80011e22:	58 09       	cp.w	r9,0
80011e24:	c0 e0       	breq	80011e40 <__gethex+0x2cc>
80011e26:	6e 18       	ld.w	r8,r7[0x4]
80011e28:	40 29       	lddsp	r9,sp[0x8]
80011e2a:	93 08       	st.w	r9[0x0],r8
80011e2c:	40 08       	lddsp	r8,sp[0x0]
80011e2e:	36 23       	mov	r3,98
80011e30:	91 06       	st.w	r8[0x0],r6
80011e32:	30 18       	mov	r8,1
80011e34:	81 08       	st.w	r0[0x0],r8
80011e36:	8d 48       	st.w	r6[0x10],r8
80011e38:	ca b8       	rjmp	80011f8e <__gethex+0x41a>
80011e3a:	d7 03       	nop
80011e3c:	00 00       	add	r0,r0
80011e3e:	15 2c       	ld.uh	r12,r10++
80011e40:	0c 9b       	mov	r11,r6
80011e42:	02 9c       	mov	r12,r1
80011e44:	35 03       	mov	r3,80
80011e46:	fe b0 ee 0b 	rcall	8000fa5c <_Bfree>
80011e4a:	30 08       	mov	r8,0
80011e4c:	40 09       	lddsp	r9,sp[0x0]
80011e4e:	93 08       	st.w	r9[0x0],r8
80011e50:	c9 f8       	rjmp	80011f8e <__gethex+0x41a>
80011e52:	ea c3 00 01 	sub	r3,r5,1
80011e56:	58 02       	cp.w	r2,0
80011e58:	c0 30       	breq	80011e5e <__gethex+0x2ea>
80011e5a:	30 12       	mov	r2,1
80011e5c:	c0 98       	rjmp	80011e6e <__gethex+0x2fa>
80011e5e:	58 03       	cp.w	r3,0
80011e60:	e0 8a 00 07 	brle	80011e6e <__gethex+0x2fa>
80011e64:	06 9b       	mov	r11,r3
80011e66:	0c 9c       	mov	r12,r6
80011e68:	fe b0 ed d3 	rcall	8000fa0e <__any_on>
80011e6c:	18 92       	mov	r2,r12
80011e6e:	e6 08 14 05 	asr	r8,r3,0x5
80011e72:	30 19       	mov	r9,1
80011e74:	e0 08 03 28 	ld.w	r8,r0[r8<<0x2]
80011e78:	f2 03 09 43 	lsl	r3,r9,r3
80011e7c:	10 63       	and	r3,r8
80011e7e:	0a 9b       	mov	r11,r5
80011e80:	f9 b8 01 02 	movne	r8,2
80011e84:	e5 d8 e1 32 	orne	r2,r2,r8
80011e88:	0a 14       	sub	r4,r5
80011e8a:	0c 9c       	mov	r12,r6
80011e8c:	30 23       	mov	r3,2
80011e8e:	c3 de       	rcall	80011b08 <rshift>
80011e90:	6e 15       	ld.w	r5,r7[0x4]
80011e92:	58 02       	cp.w	r2,0
80011e94:	c7 90       	breq	80011f86 <__gethex+0x412>
80011e96:	6e 38       	ld.w	r8,r7[0xc]
80011e98:	58 28       	cp.w	r8,2
80011e9a:	c1 10       	breq	80011ebc <__gethex+0x348>
80011e9c:	58 38       	cp.w	r8,3
80011e9e:	c0 40       	breq	80011ea6 <__gethex+0x332>
80011ea0:	58 18       	cp.w	r8,1
80011ea2:	c7 11       	brne	80011f84 <__gethex+0x410>
80011ea4:	c0 38       	rjmp	80011eaa <__gethex+0x336>
80011ea6:	40 18       	lddsp	r8,sp[0x4]
80011ea8:	c0 d8       	rjmp	80011ec2 <__gethex+0x34e>
80011eaa:	ed b2 00 01 	bld	r2,0x1
80011eae:	c6 b1       	brne	80011f84 <__gethex+0x410>
80011eb0:	60 08       	ld.w	r8,r0[0x0]
80011eb2:	10 42       	or	r2,r8
80011eb4:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80011eb8:	c0 71       	brne	80011ec6 <__gethex+0x352>
80011eba:	c6 58       	rjmp	80011f84 <__gethex+0x410>
80011ebc:	40 19       	lddsp	r9,sp[0x4]
80011ebe:	f2 08 11 01 	rsub	r8,r9,1
80011ec2:	58 08       	cp.w	r8,0
80011ec4:	c6 00       	breq	80011f84 <__gethex+0x410>
80011ec6:	6c 40       	ld.w	r0,r6[0x10]
80011ec8:	ec c8 ff ec 	sub	r8,r6,-20
80011ecc:	e0 cb ff fb 	sub	r11,r0,-5
80011ed0:	30 0a       	mov	r10,0
80011ed2:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
80011ed6:	70 09       	ld.w	r9,r8[0x0]
80011ed8:	5b f9       	cp.w	r9,-1
80011eda:	c0 40       	breq	80011ee2 <__gethex+0x36e>
80011edc:	2f f9       	sub	r9,-1
80011ede:	91 09       	st.w	r8[0x0],r9
80011ee0:	c2 58       	rjmp	80011f2a <__gethex+0x3b6>
80011ee2:	10 aa       	st.w	r8++,r10
80011ee4:	16 38       	cp.w	r8,r11
80011ee6:	cf 83       	brcs	80011ed6 <__gethex+0x362>
80011ee8:	6c 49       	ld.w	r9,r6[0x10]
80011eea:	6c 28       	ld.w	r8,r6[0x8]
80011eec:	10 39       	cp.w	r9,r8
80011eee:	c0 34       	brge	80011ef4 <__gethex+0x380>
80011ef0:	0c 92       	mov	r2,r6
80011ef2:	c1 38       	rjmp	80011f18 <__gethex+0x3a4>
80011ef4:	6c 1b       	ld.w	r11,r6[0x4]
80011ef6:	02 9c       	mov	r12,r1
80011ef8:	2f fb       	sub	r11,-1
80011efa:	fe b0 ed cb 	rcall	8000fa90 <_Balloc>
80011efe:	6c 4a       	ld.w	r10,r6[0x10]
80011f00:	ec cb ff f4 	sub	r11,r6,-12
80011f04:	18 92       	mov	r2,r12
80011f06:	2f ea       	sub	r10,-2
80011f08:	2f 4c       	sub	r12,-12
80011f0a:	a3 6a       	lsl	r10,0x2
80011f0c:	fe b0 c0 23 	rcall	80009f52 <memcpy>
80011f10:	0c 9b       	mov	r11,r6
80011f12:	02 9c       	mov	r12,r1
80011f14:	fe b0 ed a4 	rcall	8000fa5c <_Bfree>
80011f18:	64 48       	ld.w	r8,r2[0x10]
80011f1a:	f0 c9 ff ff 	sub	r9,r8,-1
80011f1e:	04 96       	mov	r6,r2
80011f20:	85 49       	st.w	r2[0x10],r9
80011f22:	2f b8       	sub	r8,-5
80011f24:	30 19       	mov	r9,1
80011f26:	e4 08 09 29 	st.w	r2[r8<<0x2],r9
80011f2a:	58 23       	cp.w	r3,2
80011f2c:	c1 01       	brne	80011f4c <__gethex+0x3d8>
80011f2e:	6e 08       	ld.w	r8,r7[0x0]
80011f30:	20 18       	sub	r8,1
80011f32:	10 34       	cp.w	r4,r8
80011f34:	c2 61       	brne	80011f80 <__gethex+0x40c>
80011f36:	e8 08 14 05 	asr	r8,r4,0x5
80011f3a:	30 19       	mov	r9,1
80011f3c:	2f b8       	sub	r8,-5
80011f3e:	f2 04 09 44 	lsl	r4,r9,r4
80011f42:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
80011f46:	10 64       	and	r4,r8
80011f48:	c1 b1       	brne	80011f7e <__gethex+0x40a>
80011f4a:	c1 b8       	rjmp	80011f80 <__gethex+0x40c>
80011f4c:	6c 48       	ld.w	r8,r6[0x10]
80011f4e:	00 38       	cp.w	r8,r0
80011f50:	e0 89 00 0e 	brgt	80011f6c <__gethex+0x3f8>
80011f54:	e9 d4 c0 05 	bfextu	r4,r4,0x0,0x5
80011f58:	c1 30       	breq	80011f7e <__gethex+0x40a>
80011f5a:	2f c0       	sub	r0,-4
80011f5c:	e8 04 11 20 	rsub	r4,r4,32
80011f60:	ec 00 03 2c 	ld.w	r12,r6[r0<<0x2]
80011f64:	fe b0 ec 16 	rcall	8000f790 <__hi0bits>
80011f68:	08 3c       	cp.w	r12,r4
80011f6a:	c0 a4       	brge	80011f7e <__gethex+0x40a>
80011f6c:	30 1b       	mov	r11,1
80011f6e:	0c 9c       	mov	r12,r6
80011f70:	fe b0 fd cc 	rcall	80011b08 <rshift>
80011f74:	2f f5       	sub	r5,-1
80011f76:	6e 28       	ld.w	r8,r7[0x8]
80011f78:	10 35       	cp.w	r5,r8
80011f7a:	fe 99 ff 2c 	brgt	80011dd2 <__gethex+0x25e>
80011f7e:	30 13       	mov	r3,1
80011f80:	a5 b3       	sbr	r3,0x5
80011f82:	c0 28       	rjmp	80011f86 <__gethex+0x412>
80011f84:	a5 a3       	sbr	r3,0x4
80011f86:	40 08       	lddsp	r8,sp[0x0]
80011f88:	40 29       	lddsp	r9,sp[0x8]
80011f8a:	91 06       	st.w	r8[0x0],r6
80011f8c:	93 05       	st.w	r9[0x0],r5
80011f8e:	06 9c       	mov	r12,r3
80011f90:	2f dd       	sub	sp,-12
80011f92:	d8 32       	popm	r0-r7,pc

80011f94 <__hexnan>:
80011f94:	d4 31       	pushm	r0-r7,lr
80011f96:	20 2d       	sub	sp,8
80011f98:	4d 08       	lddpc	r8,800120d8 <__hexnan+0x144>
80011f9a:	18 97       	mov	r7,r12
80011f9c:	f1 39 00 30 	ld.ub	r9,r8[48]
80011fa0:	16 95       	mov	r5,r11
80011fa2:	14 96       	mov	r6,r10
80011fa4:	30 08       	mov	r8,0
80011fa6:	f0 09 18 00 	cp.b	r9,r8
80011faa:	c0 31       	brne	80011fb0 <__hexnan+0x1c>
80011fac:	fe b0 fd 7e 	rcall	80011aa8 <__hexdig_init>
80011fb0:	30 08       	mov	r8,0
80011fb2:	6a 09       	ld.w	r9,r5[0x0]
80011fb4:	10 9b       	mov	r11,r8
80011fb6:	e9 d9 c0 05 	bfextu	r4,r9,0x0,0x5
80011fba:	6e 05       	ld.w	r5,r7[0x0]
80011fbc:	a5 59       	asr	r9,0x5
80011fbe:	16 9a       	mov	r10,r11
80011fc0:	ec 09 00 29 	add	r9,r6,r9<<0x2
80011fc4:	16 92       	mov	r2,r11
80011fc6:	58 04       	cp.w	r4,0
80011fc8:	f7 b9 01 fc 	subne	r9,-4
80011fcc:	16 93       	mov	r3,r11
80011fce:	12 d8       	st.w	--r9,r8
80011fd0:	12 9e       	mov	lr,r9
80011fd2:	12 98       	mov	r8,r9
80011fd4:	c5 38       	rjmp	8001207a <__hexnan+0xe6>
80011fd6:	4c 10       	lddpc	r0,800120d8 <__hexnan+0x144>
80011fd8:	e0 0c 07 01 	ld.ub	r1,r0[r12]
80011fdc:	58 01       	cp.w	r1,0
80011fde:	c3 e1       	brne	8001205a <__hexnan+0xc6>
80011fe0:	e0 4c 00 20 	cp.w	r12,32
80011fe4:	e0 8b 00 2e 	brhi	80012040 <__hexnan+0xac>
80011fe8:	14 3b       	cp.w	r11,r10
80011fea:	c4 84       	brge	8001207a <__hexnan+0xe6>
80011fec:	58 72       	cp.w	r2,7
80011fee:	5f a1       	srle	r1
80011ff0:	1c 38       	cp.w	r8,lr
80011ff2:	5f 3c       	srlo	r12
80011ff4:	e3 ec 00 0c 	and	r12,r1,r12
80011ff8:	30 01       	mov	r1,0
80011ffa:	e2 0c 18 00 	cp.b	r12,r1
80011ffe:	c1 70       	breq	8001202c <__hexnan+0x98>
80012000:	e4 02 11 08 	rsub	r2,r2,8
80012004:	10 9c       	mov	r12,r8
80012006:	a3 62       	lsl	r2,0x2
80012008:	e4 00 11 20 	rsub	r0,r2,32
8001200c:	50 10       	stdsp	sp[0x4],r0
8001200e:	19 01       	ld.w	r1,r12++
80012010:	50 01       	stdsp	sp[0x0],r1
80012012:	78 01       	ld.w	r1,r12[0x0]
80012014:	e2 02 0a 40 	lsr	r0,r1,r2
80012018:	99 00       	st.w	r12[0x0],r0
8001201a:	40 10       	lddsp	r0,sp[0x4]
8001201c:	e2 00 09 41 	lsl	r1,r1,r0
80012020:	40 00       	lddsp	r0,sp[0x0]
80012022:	00 41       	or	r1,r0
80012024:	f9 41 ff fc 	st.w	r12[-4],r1
80012028:	1c 3c       	cp.w	r12,lr
8001202a:	cf 23       	brcs	8001200e <__hexnan+0x7a>
8001202c:	0c 38       	cp.w	r8,r6
8001202e:	e0 8b 00 04 	brhi	80012036 <__hexnan+0xa2>
80012032:	30 82       	mov	r2,8
80012034:	c2 38       	rjmp	8001207a <__hexnan+0xe6>
80012036:	10 d3       	st.w	--r8,r3
80012038:	14 9b       	mov	r11,r10
8001203a:	10 9e       	mov	lr,r8
8001203c:	06 92       	mov	r2,r3
8001203e:	c1 e8       	rjmp	8001207a <__hexnan+0xe6>
80012040:	58 0a       	cp.w	r10,0
80012042:	5f 1b       	srne	r11
80012044:	e0 4c 00 29 	cp.w	r12,41
80012048:	5f 0a       	sreq	r10
8001204a:	f7 ea 00 0a 	and	r10,r11,r10
8001204e:	e2 0a 18 00 	cp.b	r10,r1
80012052:	c5 b0       	breq	80012108 <__hexnan+0x174>
80012054:	2f f5       	sub	r5,-1
80012056:	8f 05       	st.w	r7[0x0],r5
80012058:	c1 78       	rjmp	80012086 <__hexnan+0xf2>
8001205a:	2f fa       	sub	r10,-1
8001205c:	2f f2       	sub	r2,-1
8001205e:	58 82       	cp.w	r2,8
80012060:	e0 8a 00 07 	brle	8001206e <__hexnan+0xda>
80012064:	0c 38       	cp.w	r8,r6
80012066:	e0 88 00 0a 	brls	8001207a <__hexnan+0xe6>
8001206a:	10 d3       	st.w	--r8,r3
8001206c:	30 12       	mov	r2,1
8001206e:	70 0c       	ld.w	r12,r8[0x0]
80012070:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
80012074:	e3 ec 10 41 	or	r1,r1,r12<<0x4
80012078:	91 01       	st.w	r8[0x0],r1
8001207a:	2f f5       	sub	r5,-1
8001207c:	0b 8c       	ld.ub	r12,r5[0x0]
8001207e:	58 0c       	cp.w	r12,0
80012080:	ca b1       	brne	80011fd6 <__hexnan+0x42>
80012082:	58 0a       	cp.w	r10,0
80012084:	c4 20       	breq	80012108 <__hexnan+0x174>
80012086:	58 72       	cp.w	r2,7
80012088:	5f ab       	srle	r11
8001208a:	1c 38       	cp.w	r8,lr
8001208c:	5f 3a       	srlo	r10
8001208e:	f7 ea 00 0a 	and	r10,r11,r10
80012092:	c1 30       	breq	800120b8 <__hexnan+0x124>
80012094:	e4 02 11 08 	rsub	r2,r2,8
80012098:	10 9a       	mov	r10,r8
8001209a:	a3 62       	lsl	r2,0x2
8001209c:	e4 0c 11 20 	rsub	r12,r2,32
800120a0:	15 07       	ld.w	r7,r10++
800120a2:	74 0b       	ld.w	r11,r10[0x0]
800120a4:	f6 02 0a 45 	lsr	r5,r11,r2
800120a8:	f6 0c 09 4b 	lsl	r11,r11,r12
800120ac:	95 05       	st.w	r10[0x0],r5
800120ae:	0e 4b       	or	r11,r7
800120b0:	f5 4b ff fc 	st.w	r10[-4],r11
800120b4:	1c 3a       	cp.w	r10,lr
800120b6:	cf 53       	brcs	800120a0 <__hexnan+0x10c>
800120b8:	0c 38       	cp.w	r8,r6
800120ba:	e0 88 00 11 	brls	800120dc <__hexnan+0x148>
800120be:	0c 9a       	mov	r10,r6
800120c0:	11 0b       	ld.w	r11,r8++
800120c2:	14 ab       	st.w	r10++,r11
800120c4:	12 38       	cp.w	r8,r9
800120c6:	fe 98 ff fd 	brls	800120c0 <__hexnan+0x12c>
800120ca:	30 08       	mov	r8,0
800120cc:	14 a8       	st.w	r10++,r8
800120ce:	12 3a       	cp.w	r10,r9
800120d0:	fe 98 ff fe 	brls	800120cc <__hexnan+0x138>
800120d4:	c0 f8       	rjmp	800120f2 <__hexnan+0x15e>
800120d6:	d7 03       	nop
800120d8:	00 00       	add	r0,r0
800120da:	15 2c       	ld.uh	r12,r10++
800120dc:	58 04       	cp.w	r4,0
800120de:	c0 a0       	breq	800120f2 <__hexnan+0x15e>
800120e0:	72 08       	ld.w	r8,r9[0x0]
800120e2:	e8 04 11 20 	rsub	r4,r4,32
800120e6:	3f fa       	mov	r10,-1
800120e8:	f4 04 0a 44 	lsr	r4,r10,r4
800120ec:	f1 e4 00 04 	and	r4,r8,r4
800120f0:	93 04       	st.w	r9[0x0],r4
800120f2:	72 08       	ld.w	r8,r9[0x0]
800120f4:	58 08       	cp.w	r8,0
800120f6:	c0 51       	brne	80012100 <__hexnan+0x16c>
800120f8:	0c 39       	cp.w	r9,r6
800120fa:	c0 51       	brne	80012104 <__hexnan+0x170>
800120fc:	30 18       	mov	r8,1
800120fe:	93 08       	st.w	r9[0x0],r8
80012100:	30 5c       	mov	r12,5
80012102:	c0 48       	rjmp	8001210a <__hexnan+0x176>
80012104:	20 49       	sub	r9,4
80012106:	cf 6b       	rjmp	800120f2 <__hexnan+0x15e>
80012108:	30 4c       	mov	r12,4
8001210a:	2f ed       	sub	sp,-8
8001210c:	d8 32       	popm	r0-r7,pc
8001210e:	d7 03       	nop

80012110 <_lseek_r>:
80012110:	d4 21       	pushm	r4-r7,lr
80012112:	16 98       	mov	r8,r11
80012114:	18 97       	mov	r7,r12
80012116:	10 9c       	mov	r12,r8
80012118:	30 08       	mov	r8,0
8001211a:	14 9b       	mov	r11,r10
8001211c:	48 66       	lddpc	r6,80012134 <_lseek_r+0x24>
8001211e:	12 9a       	mov	r10,r9
80012120:	8d 08       	st.w	r6[0x0],r8
80012122:	fe b0 fa e9 	rcall	800116f4 <_lseek>
80012126:	5b fc       	cp.w	r12,-1
80012128:	c0 51       	brne	80012132 <_lseek_r+0x22>
8001212a:	6c 08       	ld.w	r8,r6[0x0]
8001212c:	58 08       	cp.w	r8,0
8001212e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80012132:	d8 22       	popm	r4-r7,pc
80012134:	00 00       	add	r0,r0
80012136:	16 2c       	rsub	r12,r11

80012138 <_read_r>:
80012138:	d4 21       	pushm	r4-r7,lr
8001213a:	16 98       	mov	r8,r11
8001213c:	18 97       	mov	r7,r12
8001213e:	10 9c       	mov	r12,r8
80012140:	30 08       	mov	r8,0
80012142:	14 9b       	mov	r11,r10
80012144:	48 66       	lddpc	r6,8001215c <_read_r+0x24>
80012146:	12 9a       	mov	r10,r9
80012148:	8d 08       	st.w	r6[0x0],r8
8001214a:	fe b0 b3 a1 	rcall	8000888c <_read>
8001214e:	5b fc       	cp.w	r12,-1
80012150:	c0 51       	brne	8001215a <_read_r+0x22>
80012152:	6c 08       	ld.w	r8,r6[0x0]
80012154:	58 08       	cp.w	r8,0
80012156:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001215a:	d8 22       	popm	r4-r7,pc
8001215c:	00 00       	add	r0,r0
8001215e:	16 2c       	rsub	r12,r11

80012160 <__avr32_f64_mul>:
80012160:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80012164:	e0 80 00 dc 	breq	8001231c <__avr32_f64_mul_op1_zero>
80012168:	d4 21       	pushm	r4-r7,lr
8001216a:	f7 e9 20 0e 	eor	lr,r11,r9
8001216e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80012172:	30 15       	mov	r5,1
80012174:	c4 30       	breq	800121fa <__avr32_f64_mul_op1_subnormal>
80012176:	ab 6b       	lsl	r11,0xa
80012178:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8001217c:	ab 6a       	lsl	r10,0xa
8001217e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80012182:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80012186:	c5 c0       	breq	8001223e <__avr32_f64_mul_op2_subnormal>
80012188:	a1 78       	lsl	r8,0x1
8001218a:	5c f9       	rol	r9
8001218c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80012190:	e0 47 07 ff 	cp.w	r7,2047
80012194:	c7 70       	breq	80012282 <__avr32_f64_mul_op_nan_or_inf>
80012196:	e0 46 07 ff 	cp.w	r6,2047
8001219a:	c7 40       	breq	80012282 <__avr32_f64_mul_op_nan_or_inf>
8001219c:	ee 06 00 0c 	add	r12,r7,r6
800121a0:	e0 2c 03 fe 	sub	r12,1022
800121a4:	f6 08 06 44 	mulu.d	r4,r11,r8
800121a8:	f4 09 07 44 	macu.d	r4,r10,r9
800121ac:	f4 08 06 46 	mulu.d	r6,r10,r8
800121b0:	f6 09 06 4a 	mulu.d	r10,r11,r9
800121b4:	08 07       	add	r7,r4
800121b6:	f4 05 00 4a 	adc	r10,r10,r5
800121ba:	5c 0b       	acr	r11
800121bc:	ed bb 00 14 	bld	r11,0x14
800121c0:	c0 50       	breq	800121ca <__avr32_f64_mul+0x6a>
800121c2:	a1 77       	lsl	r7,0x1
800121c4:	5c fa       	rol	r10
800121c6:	5c fb       	rol	r11
800121c8:	20 1c       	sub	r12,1
800121ca:	58 0c       	cp.w	r12,0
800121cc:	e0 8a 00 6f 	brle	800122aa <__avr32_f64_mul_res_subnormal>
800121d0:	e0 4c 07 ff 	cp.w	r12,2047
800121d4:	e0 84 00 9c 	brge	8001230c <__avr32_f64_mul_res_inf>
800121d8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800121dc:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800121e0:	ef e6 12 17 	or	r7,r7,r6>>0x1
800121e4:	ee 17 80 00 	eorh	r7,0x8000
800121e8:	f1 b7 04 20 	satu	r7,0x1
800121ec:	0e 0a       	add	r10,r7
800121ee:	5c 0b       	acr	r11
800121f0:	ed be 00 1f 	bld	lr,0x1f
800121f4:	ef bb 00 1f 	bst	r11,0x1f
800121f8:	d8 22       	popm	r4-r7,pc

800121fa <__avr32_f64_mul_op1_subnormal>:
800121fa:	e4 1b 00 0f 	andh	r11,0xf
800121fe:	f4 0c 12 00 	clz	r12,r10
80012202:	f6 06 12 00 	clz	r6,r11
80012206:	f7 bc 03 e1 	sublo	r12,-31
8001220a:	f8 06 17 30 	movlo	r6,r12
8001220e:	f7 b6 02 01 	subhs	r6,1
80012212:	e0 46 00 20 	cp.w	r6,32
80012216:	c0 d4       	brge	80012230 <__avr32_f64_mul_op1_subnormal+0x36>
80012218:	ec 0c 11 20 	rsub	r12,r6,32
8001221c:	f6 06 09 4b 	lsl	r11,r11,r6
80012220:	f4 0c 0a 4c 	lsr	r12,r10,r12
80012224:	18 4b       	or	r11,r12
80012226:	f4 06 09 4a 	lsl	r10,r10,r6
8001222a:	20 b6       	sub	r6,11
8001222c:	0c 17       	sub	r7,r6
8001222e:	ca ab       	rjmp	80012182 <__avr32_f64_mul+0x22>
80012230:	f4 06 09 4b 	lsl	r11,r10,r6
80012234:	c6 40       	breq	800122fc <__avr32_f64_mul_res_zero>
80012236:	30 0a       	mov	r10,0
80012238:	20 b6       	sub	r6,11
8001223a:	0c 17       	sub	r7,r6
8001223c:	ca 3b       	rjmp	80012182 <__avr32_f64_mul+0x22>

8001223e <__avr32_f64_mul_op2_subnormal>:
8001223e:	e4 19 00 0f 	andh	r9,0xf
80012242:	f0 0c 12 00 	clz	r12,r8
80012246:	f2 05 12 00 	clz	r5,r9
8001224a:	f7 bc 03 ea 	sublo	r12,-22
8001224e:	f8 05 17 30 	movlo	r5,r12
80012252:	f7 b5 02 0a 	subhs	r5,10
80012256:	e0 45 00 20 	cp.w	r5,32
8001225a:	c0 d4       	brge	80012274 <__avr32_f64_mul_op2_subnormal+0x36>
8001225c:	ea 0c 11 20 	rsub	r12,r5,32
80012260:	f2 05 09 49 	lsl	r9,r9,r5
80012264:	f0 0c 0a 4c 	lsr	r12,r8,r12
80012268:	18 49       	or	r9,r12
8001226a:	f0 05 09 48 	lsl	r8,r8,r5
8001226e:	20 25       	sub	r5,2
80012270:	0a 16       	sub	r6,r5
80012272:	c8 fb       	rjmp	80012190 <__avr32_f64_mul+0x30>
80012274:	f0 05 09 49 	lsl	r9,r8,r5
80012278:	c4 20       	breq	800122fc <__avr32_f64_mul_res_zero>
8001227a:	30 08       	mov	r8,0
8001227c:	20 25       	sub	r5,2
8001227e:	0a 16       	sub	r6,r5
80012280:	c8 8b       	rjmp	80012190 <__avr32_f64_mul+0x30>

80012282 <__avr32_f64_mul_op_nan_or_inf>:
80012282:	e4 19 00 0f 	andh	r9,0xf
80012286:	e4 1b 00 0f 	andh	r11,0xf
8001228a:	14 4b       	or	r11,r10
8001228c:	10 49       	or	r9,r8
8001228e:	e0 47 07 ff 	cp.w	r7,2047
80012292:	c0 91       	brne	800122a4 <__avr32_f64_mul_op1_not_naninf>
80012294:	58 0b       	cp.w	r11,0
80012296:	c3 81       	brne	80012306 <__avr32_f64_mul_res_nan>
80012298:	e0 46 07 ff 	cp.w	r6,2047
8001229c:	c3 81       	brne	8001230c <__avr32_f64_mul_res_inf>
8001229e:	58 09       	cp.w	r9,0
800122a0:	c3 60       	breq	8001230c <__avr32_f64_mul_res_inf>
800122a2:	c3 28       	rjmp	80012306 <__avr32_f64_mul_res_nan>

800122a4 <__avr32_f64_mul_op1_not_naninf>:
800122a4:	58 09       	cp.w	r9,0
800122a6:	c3 30       	breq	8001230c <__avr32_f64_mul_res_inf>
800122a8:	c2 f8       	rjmp	80012306 <__avr32_f64_mul_res_nan>

800122aa <__avr32_f64_mul_res_subnormal>:
800122aa:	5c 3c       	neg	r12
800122ac:	2f fc       	sub	r12,-1
800122ae:	f1 bc 04 c0 	satu	r12,0x6
800122b2:	e0 4c 00 20 	cp.w	r12,32
800122b6:	c1 14       	brge	800122d8 <__avr32_f64_mul_res_subnormal+0x2e>
800122b8:	f8 08 11 20 	rsub	r8,r12,32
800122bc:	0e 46       	or	r6,r7
800122be:	ee 0c 0a 47 	lsr	r7,r7,r12
800122c2:	f4 08 09 49 	lsl	r9,r10,r8
800122c6:	12 47       	or	r7,r9
800122c8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800122cc:	f6 08 09 49 	lsl	r9,r11,r8
800122d0:	12 4a       	or	r10,r9
800122d2:	f6 0c 0a 4b 	lsr	r11,r11,r12
800122d6:	c8 3b       	rjmp	800121dc <__avr32_f64_mul+0x7c>
800122d8:	f8 08 11 20 	rsub	r8,r12,32
800122dc:	f9 b9 00 00 	moveq	r9,0
800122e0:	c0 30       	breq	800122e6 <__avr32_f64_mul_res_subnormal+0x3c>
800122e2:	f6 08 09 49 	lsl	r9,r11,r8
800122e6:	0e 46       	or	r6,r7
800122e8:	ed ea 10 16 	or	r6,r6,r10<<0x1
800122ec:	f4 0c 0a 4a 	lsr	r10,r10,r12
800122f0:	f3 ea 10 07 	or	r7,r9,r10
800122f4:	f6 0c 0a 4a 	lsr	r10,r11,r12
800122f8:	30 0b       	mov	r11,0
800122fa:	c7 1b       	rjmp	800121dc <__avr32_f64_mul+0x7c>

800122fc <__avr32_f64_mul_res_zero>:
800122fc:	1c 9b       	mov	r11,lr
800122fe:	e6 1b 80 00 	andh	r11,0x8000,COH
80012302:	30 0a       	mov	r10,0
80012304:	d8 22       	popm	r4-r7,pc

80012306 <__avr32_f64_mul_res_nan>:
80012306:	3f fb       	mov	r11,-1
80012308:	3f fa       	mov	r10,-1
8001230a:	d8 22       	popm	r4-r7,pc

8001230c <__avr32_f64_mul_res_inf>:
8001230c:	f0 6b 00 00 	mov	r11,-1048576
80012310:	ed be 00 1f 	bld	lr,0x1f
80012314:	ef bb 00 1f 	bst	r11,0x1f
80012318:	30 0a       	mov	r10,0
8001231a:	d8 22       	popm	r4-r7,pc

8001231c <__avr32_f64_mul_op1_zero>:
8001231c:	f7 e9 20 0b 	eor	r11,r11,r9
80012320:	e6 1b 80 00 	andh	r11,0x8000,COH
80012324:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80012328:	e0 4c 07 ff 	cp.w	r12,2047
8001232c:	5e 1c       	retne	r12
8001232e:	3f fa       	mov	r10,-1
80012330:	3f fb       	mov	r11,-1
80012332:	5e fc       	retal	r12

80012334 <__avr32_f64_sub_from_add>:
80012334:	ee 19 80 00 	eorh	r9,0x8000

80012338 <__avr32_f64_sub>:
80012338:	f7 e9 20 0c 	eor	r12,r11,r9
8001233c:	e0 86 00 ca 	brmi	800124d0 <__avr32_f64_add_from_sub>
80012340:	eb cd 40 e0 	pushm	r5-r7,lr
80012344:	16 9c       	mov	r12,r11
80012346:	e6 1c 80 00 	andh	r12,0x8000,COH
8001234a:	bf db       	cbr	r11,0x1f
8001234c:	bf d9       	cbr	r9,0x1f
8001234e:	10 3a       	cp.w	r10,r8
80012350:	f2 0b 13 00 	cpc	r11,r9
80012354:	c0 92       	brcc	80012366 <__avr32_f64_sub+0x2e>
80012356:	16 97       	mov	r7,r11
80012358:	12 9b       	mov	r11,r9
8001235a:	0e 99       	mov	r9,r7
8001235c:	14 97       	mov	r7,r10
8001235e:	10 9a       	mov	r10,r8
80012360:	0e 98       	mov	r8,r7
80012362:	ee 1c 80 00 	eorh	r12,0x8000
80012366:	f6 07 16 14 	lsr	r7,r11,0x14
8001236a:	ab 7b       	lsl	r11,0xb
8001236c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80012370:	ab 7a       	lsl	r10,0xb
80012372:	bf bb       	sbr	r11,0x1f
80012374:	f2 06 16 14 	lsr	r6,r9,0x14
80012378:	c4 40       	breq	80012400 <__avr32_f64_sub_opL_subnormal>
8001237a:	ab 79       	lsl	r9,0xb
8001237c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80012380:	ab 78       	lsl	r8,0xb
80012382:	bf b9       	sbr	r9,0x1f

80012384 <__avr32_f64_sub_opL_subnormal_done>:
80012384:	e0 47 07 ff 	cp.w	r7,2047
80012388:	c4 f0       	breq	80012426 <__avr32_f64_sub_opH_nan_or_inf>
8001238a:	0e 26       	rsub	r6,r7
8001238c:	c1 20       	breq	800123b0 <__avr32_f64_sub_shift_done>
8001238e:	ec 05 11 20 	rsub	r5,r6,32
80012392:	e0 46 00 20 	cp.w	r6,32
80012396:	c7 c2       	brcc	8001248e <__avr32_f64_sub_longshift>
80012398:	f0 05 09 4e 	lsl	lr,r8,r5
8001239c:	f2 05 09 45 	lsl	r5,r9,r5
800123a0:	f0 06 0a 48 	lsr	r8,r8,r6
800123a4:	f2 06 0a 49 	lsr	r9,r9,r6
800123a8:	0a 48       	or	r8,r5
800123aa:	58 0e       	cp.w	lr,0
800123ac:	5f 1e       	srne	lr
800123ae:	1c 48       	or	r8,lr

800123b0 <__avr32_f64_sub_shift_done>:
800123b0:	10 1a       	sub	r10,r8
800123b2:	f6 09 01 4b 	sbc	r11,r11,r9
800123b6:	f6 06 12 00 	clz	r6,r11
800123ba:	c0 e0       	breq	800123d6 <__avr32_f64_sub_longnormalize_done>
800123bc:	c7 83       	brcs	800124ac <__avr32_f64_sub_longnormalize>
800123be:	ec 0e 11 20 	rsub	lr,r6,32
800123c2:	f6 06 09 4b 	lsl	r11,r11,r6
800123c6:	f4 0e 0a 4e 	lsr	lr,r10,lr
800123ca:	1c 4b       	or	r11,lr
800123cc:	f4 06 09 4a 	lsl	r10,r10,r6
800123d0:	0c 17       	sub	r7,r6
800123d2:	e0 8a 00 39 	brle	80012444 <__avr32_f64_sub_subnormal_result>

800123d6 <__avr32_f64_sub_longnormalize_done>:
800123d6:	f4 09 15 15 	lsl	r9,r10,0x15
800123da:	ab 9a       	lsr	r10,0xb
800123dc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800123e0:	ab 9b       	lsr	r11,0xb
800123e2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800123e6:	18 4b       	or	r11,r12

800123e8 <__avr32_f64_sub_round>:
800123e8:	fc 17 80 00 	movh	r7,0x8000
800123ec:	ed ba 00 00 	bld	r10,0x0
800123f0:	f7 b7 01 ff 	subne	r7,-1
800123f4:	0e 39       	cp.w	r9,r7
800123f6:	5f 29       	srhs	r9
800123f8:	12 0a       	add	r10,r9
800123fa:	5c 0b       	acr	r11
800123fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012400 <__avr32_f64_sub_opL_subnormal>:
80012400:	ab 79       	lsl	r9,0xb
80012402:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80012406:	ab 78       	lsl	r8,0xb
80012408:	f3 e8 10 0e 	or	lr,r9,r8
8001240c:	f9 b6 01 01 	movne	r6,1
80012410:	ee 0e 11 00 	rsub	lr,r7,0
80012414:	f9 b7 00 01 	moveq	r7,1
80012418:	ef bb 00 1f 	bst	r11,0x1f
8001241c:	f7 ea 10 0e 	or	lr,r11,r10
80012420:	f9 b7 00 00 	moveq	r7,0
80012424:	cb 0b       	rjmp	80012384 <__avr32_f64_sub_opL_subnormal_done>

80012426 <__avr32_f64_sub_opH_nan_or_inf>:
80012426:	bf db       	cbr	r11,0x1f
80012428:	f7 ea 10 0e 	or	lr,r11,r10
8001242c:	c0 81       	brne	8001243c <__avr32_f64_sub_return_nan>
8001242e:	e0 46 07 ff 	cp.w	r6,2047
80012432:	c0 50       	breq	8001243c <__avr32_f64_sub_return_nan>
80012434:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80012438:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001243c <__avr32_f64_sub_return_nan>:
8001243c:	3f fa       	mov	r10,-1
8001243e:	3f fb       	mov	r11,-1
80012440:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012444 <__avr32_f64_sub_subnormal_result>:
80012444:	5c 37       	neg	r7
80012446:	2f f7       	sub	r7,-1
80012448:	f1 b7 04 c0 	satu	r7,0x6
8001244c:	e0 47 00 20 	cp.w	r7,32
80012450:	c1 14       	brge	80012472 <__avr32_f64_sub_subnormal_result+0x2e>
80012452:	ee 08 11 20 	rsub	r8,r7,32
80012456:	f4 08 09 49 	lsl	r9,r10,r8
8001245a:	5f 16       	srne	r6
8001245c:	f4 07 0a 4a 	lsr	r10,r10,r7
80012460:	0c 4a       	or	r10,r6
80012462:	f6 08 09 49 	lsl	r9,r11,r8
80012466:	f5 e9 10 0a 	or	r10,r10,r9
8001246a:	f4 07 0a 4b 	lsr	r11,r10,r7
8001246e:	30 07       	mov	r7,0
80012470:	cb 3b       	rjmp	800123d6 <__avr32_f64_sub_longnormalize_done>
80012472:	ee 08 11 40 	rsub	r8,r7,64
80012476:	f6 08 09 49 	lsl	r9,r11,r8
8001247a:	14 49       	or	r9,r10
8001247c:	5f 16       	srne	r6
8001247e:	f6 07 0a 4a 	lsr	r10,r11,r7
80012482:	0c 4a       	or	r10,r6
80012484:	30 0b       	mov	r11,0
80012486:	30 07       	mov	r7,0
80012488:	ca 7b       	rjmp	800123d6 <__avr32_f64_sub_longnormalize_done>
8001248a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001248e <__avr32_f64_sub_longshift>:
8001248e:	f1 b6 04 c0 	satu	r6,0x6
80012492:	f0 0e 17 00 	moveq	lr,r8
80012496:	c0 40       	breq	8001249e <__avr32_f64_sub_longshift+0x10>
80012498:	f2 05 09 4e 	lsl	lr,r9,r5
8001249c:	10 4e       	or	lr,r8
8001249e:	f2 06 0a 48 	lsr	r8,r9,r6
800124a2:	30 09       	mov	r9,0
800124a4:	58 0e       	cp.w	lr,0
800124a6:	5f 1e       	srne	lr
800124a8:	1c 48       	or	r8,lr
800124aa:	c8 3b       	rjmp	800123b0 <__avr32_f64_sub_shift_done>

800124ac <__avr32_f64_sub_longnormalize>:
800124ac:	f4 06 12 00 	clz	r6,r10
800124b0:	f9 b7 03 00 	movlo	r7,0
800124b4:	f9 b6 03 00 	movlo	r6,0
800124b8:	f9 bc 03 00 	movlo	r12,0
800124bc:	f7 b6 02 e0 	subhs	r6,-32
800124c0:	f4 06 09 4b 	lsl	r11,r10,r6
800124c4:	30 0a       	mov	r10,0
800124c6:	0c 17       	sub	r7,r6
800124c8:	fe 9a ff be 	brle	80012444 <__avr32_f64_sub_subnormal_result>
800124cc:	c8 5b       	rjmp	800123d6 <__avr32_f64_sub_longnormalize_done>
800124ce:	d7 03       	nop

800124d0 <__avr32_f64_add_from_sub>:
800124d0:	ee 19 80 00 	eorh	r9,0x8000

800124d4 <__avr32_f64_add>:
800124d4:	f7 e9 20 0c 	eor	r12,r11,r9
800124d8:	fe 96 ff 2e 	brmi	80012334 <__avr32_f64_sub_from_add>
800124dc:	eb cd 40 e0 	pushm	r5-r7,lr
800124e0:	16 9c       	mov	r12,r11
800124e2:	e6 1c 80 00 	andh	r12,0x8000,COH
800124e6:	bf db       	cbr	r11,0x1f
800124e8:	bf d9       	cbr	r9,0x1f
800124ea:	12 3b       	cp.w	r11,r9
800124ec:	c0 72       	brcc	800124fa <__avr32_f64_add+0x26>
800124ee:	16 97       	mov	r7,r11
800124f0:	12 9b       	mov	r11,r9
800124f2:	0e 99       	mov	r9,r7
800124f4:	14 97       	mov	r7,r10
800124f6:	10 9a       	mov	r10,r8
800124f8:	0e 98       	mov	r8,r7
800124fa:	30 0e       	mov	lr,0
800124fc:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80012500:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80012504:	b5 ab       	sbr	r11,0x14
80012506:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8001250a:	c5 f0       	breq	800125c8 <__avr32_f64_add_op2_subnormal>
8001250c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80012510:	b5 a9       	sbr	r9,0x14
80012512:	e0 47 07 ff 	cp.w	r7,2047
80012516:	c2 50       	breq	80012560 <__avr32_f64_add_opH_nan_or_inf>
80012518:	0e 26       	rsub	r6,r7
8001251a:	c0 f0       	breq	80012538 <__avr32_f64_add_shift_done>
8001251c:	ec 05 11 20 	rsub	r5,r6,32
80012520:	e0 46 00 20 	cp.w	r6,32
80012524:	c3 52       	brcc	8001258e <__avr32_f64_add_longshift>
80012526:	f0 05 09 4e 	lsl	lr,r8,r5
8001252a:	f2 05 09 45 	lsl	r5,r9,r5
8001252e:	f0 06 0a 48 	lsr	r8,r8,r6
80012532:	f2 06 0a 49 	lsr	r9,r9,r6
80012536:	0a 48       	or	r8,r5

80012538 <__avr32_f64_add_shift_done>:
80012538:	10 0a       	add	r10,r8
8001253a:	f6 09 00 4b 	adc	r11,r11,r9
8001253e:	ed bb 00 15 	bld	r11,0x15
80012542:	c3 40       	breq	800125aa <__avr32_f64_add_res_of>

80012544 <__avr32_f64_add_res_of_done>:
80012544:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80012548:	18 4b       	or	r11,r12

8001254a <__avr32_f64_add_round>:
8001254a:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8001254e:	18 4e       	or	lr,r12
80012550:	ee 1e 80 00 	eorh	lr,0x8000
80012554:	f1 be 04 20 	satu	lr,0x1
80012558:	1c 0a       	add	r10,lr
8001255a:	5c 0b       	acr	r11
8001255c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012560 <__avr32_f64_add_opH_nan_or_inf>:
80012560:	b5 cb       	cbr	r11,0x14
80012562:	f7 ea 10 0e 	or	lr,r11,r10
80012566:	c1 01       	brne	80012586 <__avr32_f64_add_return_nan>
80012568:	e0 46 07 ff 	cp.w	r6,2047
8001256c:	c0 30       	breq	80012572 <__avr32_f64_add_opL_nan_or_inf>
8001256e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012572 <__avr32_f64_add_opL_nan_or_inf>:
80012572:	b5 c9       	cbr	r9,0x14
80012574:	f3 e8 10 0e 	or	lr,r9,r8
80012578:	c0 71       	brne	80012586 <__avr32_f64_add_return_nan>
8001257a:	30 0a       	mov	r10,0
8001257c:	fc 1b 7f f0 	movh	r11,0x7ff0
80012580:	18 4b       	or	r11,r12
80012582:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012586 <__avr32_f64_add_return_nan>:
80012586:	3f fa       	mov	r10,-1
80012588:	3f fb       	mov	r11,-1
8001258a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001258e <__avr32_f64_add_longshift>:
8001258e:	f1 b6 04 c0 	satu	r6,0x6
80012592:	f0 0e 17 00 	moveq	lr,r8
80012596:	c0 60       	breq	800125a2 <__avr32_f64_add_longshift+0x14>
80012598:	f2 05 09 4e 	lsl	lr,r9,r5
8001259c:	58 08       	cp.w	r8,0
8001259e:	5f 18       	srne	r8
800125a0:	10 4e       	or	lr,r8
800125a2:	f2 06 0a 48 	lsr	r8,r9,r6
800125a6:	30 09       	mov	r9,0
800125a8:	cc 8b       	rjmp	80012538 <__avr32_f64_add_shift_done>

800125aa <__avr32_f64_add_res_of>:
800125aa:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800125ae:	a1 9b       	lsr	r11,0x1
800125b0:	5d 0a       	ror	r10
800125b2:	5d 0e       	ror	lr
800125b4:	2f f7       	sub	r7,-1
800125b6:	e0 47 07 ff 	cp.w	r7,2047
800125ba:	f9 ba 00 00 	moveq	r10,0
800125be:	f9 bb 00 00 	moveq	r11,0
800125c2:	f9 be 00 00 	moveq	lr,0
800125c6:	cb fb       	rjmp	80012544 <__avr32_f64_add_res_of_done>

800125c8 <__avr32_f64_add_op2_subnormal>:
800125c8:	30 16       	mov	r6,1
800125ca:	58 07       	cp.w	r7,0
800125cc:	ca 31       	brne	80012512 <__avr32_f64_add+0x3e>
800125ce:	b5 cb       	cbr	r11,0x14
800125d0:	10 0a       	add	r10,r8
800125d2:	f6 09 00 4b 	adc	r11,r11,r9
800125d6:	18 4b       	or	r11,r12
800125d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800125dc <__avr32_f64_to_u32>:
800125dc:	58 0b       	cp.w	r11,0
800125de:	5e 6d       	retmi	0

800125e0 <__avr32_f64_to_s32>:
800125e0:	f6 0c 15 01 	lsl	r12,r11,0x1
800125e4:	b5 9c       	lsr	r12,0x15
800125e6:	e0 2c 03 ff 	sub	r12,1023
800125ea:	5e 3d       	retlo	0
800125ec:	f8 0c 11 1f 	rsub	r12,r12,31
800125f0:	16 99       	mov	r9,r11
800125f2:	ab 7b       	lsl	r11,0xb
800125f4:	bf bb       	sbr	r11,0x1f
800125f6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800125fa:	f6 0c 0a 4b 	lsr	r11,r11,r12
800125fe:	a1 79       	lsl	r9,0x1
80012600:	5e 2b       	reths	r11
80012602:	5c 3b       	neg	r11
80012604:	5e fb       	retal	r11

80012606 <__avr32_u32_to_f64>:
80012606:	f8 cb 00 00 	sub	r11,r12,0
8001260a:	30 0c       	mov	r12,0
8001260c:	c0 38       	rjmp	80012612 <__avr32_s32_to_f64+0x4>

8001260e <__avr32_s32_to_f64>:
8001260e:	18 9b       	mov	r11,r12
80012610:	5c 4b       	abs	r11
80012612:	30 0a       	mov	r10,0
80012614:	5e 0b       	reteq	r11
80012616:	d4 01       	pushm	lr
80012618:	e0 69 04 1e 	mov	r9,1054
8001261c:	f6 08 12 00 	clz	r8,r11
80012620:	c1 70       	breq	8001264e <__avr32_s32_to_f64+0x40>
80012622:	c0 c3       	brcs	8001263a <__avr32_s32_to_f64+0x2c>
80012624:	f0 0e 11 20 	rsub	lr,r8,32
80012628:	f6 08 09 4b 	lsl	r11,r11,r8
8001262c:	f4 0e 0a 4e 	lsr	lr,r10,lr
80012630:	1c 4b       	or	r11,lr
80012632:	f4 08 09 4a 	lsl	r10,r10,r8
80012636:	10 19       	sub	r9,r8
80012638:	c0 b8       	rjmp	8001264e <__avr32_s32_to_f64+0x40>
8001263a:	f4 08 12 00 	clz	r8,r10
8001263e:	f9 b8 03 00 	movlo	r8,0
80012642:	f7 b8 02 e0 	subhs	r8,-32
80012646:	f4 08 09 4b 	lsl	r11,r10,r8
8001264a:	30 0a       	mov	r10,0
8001264c:	10 19       	sub	r9,r8
8001264e:	58 09       	cp.w	r9,0
80012650:	e0 89 00 30 	brgt	800126b0 <__avr32_s32_to_f64+0xa2>
80012654:	5c 39       	neg	r9
80012656:	2f f9       	sub	r9,-1
80012658:	e0 49 00 36 	cp.w	r9,54
8001265c:	c0 43       	brcs	80012664 <__avr32_s32_to_f64+0x56>
8001265e:	30 0b       	mov	r11,0
80012660:	30 0a       	mov	r10,0
80012662:	c2 68       	rjmp	800126ae <__avr32_s32_to_f64+0xa0>
80012664:	2f 69       	sub	r9,-10
80012666:	f2 08 11 20 	rsub	r8,r9,32
8001266a:	e0 49 00 20 	cp.w	r9,32
8001266e:	c0 b2       	brcc	80012684 <__avr32_s32_to_f64+0x76>
80012670:	f4 08 09 4e 	lsl	lr,r10,r8
80012674:	f6 08 09 48 	lsl	r8,r11,r8
80012678:	f4 09 0a 4a 	lsr	r10,r10,r9
8001267c:	f6 09 0a 4b 	lsr	r11,r11,r9
80012680:	10 4b       	or	r11,r8
80012682:	c0 88       	rjmp	80012692 <__avr32_s32_to_f64+0x84>
80012684:	f6 08 09 4e 	lsl	lr,r11,r8
80012688:	14 4e       	or	lr,r10
8001268a:	16 9a       	mov	r10,r11
8001268c:	30 0b       	mov	r11,0
8001268e:	f4 09 0a 4a 	lsr	r10,r10,r9
80012692:	ed ba 00 00 	bld	r10,0x0
80012696:	c0 92       	brcc	800126a8 <__avr32_s32_to_f64+0x9a>
80012698:	1c 7e       	tst	lr,lr
8001269a:	c0 41       	brne	800126a2 <__avr32_s32_to_f64+0x94>
8001269c:	ed ba 00 01 	bld	r10,0x1
800126a0:	c0 42       	brcc	800126a8 <__avr32_s32_to_f64+0x9a>
800126a2:	2f fa       	sub	r10,-1
800126a4:	f7 bb 02 ff 	subhs	r11,-1
800126a8:	5c fc       	rol	r12
800126aa:	5d 0b       	ror	r11
800126ac:	5d 0a       	ror	r10
800126ae:	d8 02       	popm	pc
800126b0:	e0 68 03 ff 	mov	r8,1023
800126b4:	ed ba 00 0b 	bld	r10,0xb
800126b8:	f7 b8 00 ff 	subeq	r8,-1
800126bc:	10 0a       	add	r10,r8
800126be:	5c 0b       	acr	r11
800126c0:	f7 b9 03 fe 	sublo	r9,-2
800126c4:	e0 49 07 ff 	cp.w	r9,2047
800126c8:	c0 55       	brlt	800126d2 <__avr32_s32_to_f64+0xc4>
800126ca:	30 0a       	mov	r10,0
800126cc:	fc 1b ff e0 	movh	r11,0xffe0
800126d0:	c0 c8       	rjmp	800126e8 <__floatsidf_return_op1>
800126d2:	ed bb 00 1f 	bld	r11,0x1f
800126d6:	f7 b9 01 01 	subne	r9,1
800126da:	ab 9a       	lsr	r10,0xb
800126dc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800126e0:	a1 7b       	lsl	r11,0x1
800126e2:	ab 9b       	lsr	r11,0xb
800126e4:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800126e8 <__floatsidf_return_op1>:
800126e8:	a1 7c       	lsl	r12,0x1
800126ea:	5d 0b       	ror	r11
800126ec:	d8 02       	popm	pc

800126ee <__avr32_f64_cmp_eq>:
800126ee:	10 3a       	cp.w	r10,r8
800126f0:	f2 0b 13 00 	cpc	r11,r9
800126f4:	c0 80       	breq	80012704 <__avr32_f64_cmp_eq+0x16>
800126f6:	a1 7b       	lsl	r11,0x1
800126f8:	a1 79       	lsl	r9,0x1
800126fa:	14 4b       	or	r11,r10
800126fc:	12 4b       	or	r11,r9
800126fe:	10 4b       	or	r11,r8
80012700:	5e 0f       	reteq	1
80012702:	5e fd       	retal	0
80012704:	a1 7b       	lsl	r11,0x1
80012706:	fc 1c ff e0 	movh	r12,0xffe0
8001270a:	58 0a       	cp.w	r10,0
8001270c:	f8 0b 13 00 	cpc	r11,r12
80012710:	5e 8f       	retls	1
80012712:	5e fd       	retal	0

80012714 <__avr32_f64_cmp_ge>:
80012714:	1a de       	st.w	--sp,lr
80012716:	1a d7       	st.w	--sp,r7
80012718:	a1 7b       	lsl	r11,0x1
8001271a:	5f 3c       	srlo	r12
8001271c:	a1 79       	lsl	r9,0x1
8001271e:	5f 37       	srlo	r7
80012720:	5c fc       	rol	r12
80012722:	fc 1e ff e0 	movh	lr,0xffe0
80012726:	58 0a       	cp.w	r10,0
80012728:	fc 0b 13 00 	cpc	r11,lr
8001272c:	e0 8b 00 1d 	brhi	80012766 <__avr32_f64_cmp_ge+0x52>
80012730:	58 08       	cp.w	r8,0
80012732:	fc 09 13 00 	cpc	r9,lr
80012736:	e0 8b 00 18 	brhi	80012766 <__avr32_f64_cmp_ge+0x52>
8001273a:	58 0b       	cp.w	r11,0
8001273c:	f5 ba 00 00 	subfeq	r10,0
80012740:	c1 50       	breq	8001276a <__avr32_f64_cmp_ge+0x56>
80012742:	1b 07       	ld.w	r7,sp++
80012744:	1b 0e       	ld.w	lr,sp++
80012746:	58 3c       	cp.w	r12,3
80012748:	c0 a0       	breq	8001275c <__avr32_f64_cmp_ge+0x48>
8001274a:	58 1c       	cp.w	r12,1
8001274c:	c0 33       	brcs	80012752 <__avr32_f64_cmp_ge+0x3e>
8001274e:	5e 0f       	reteq	1
80012750:	5e 1d       	retne	0
80012752:	10 3a       	cp.w	r10,r8
80012754:	f2 0b 13 00 	cpc	r11,r9
80012758:	5e 2f       	reths	1
8001275a:	5e 3d       	retlo	0
8001275c:	14 38       	cp.w	r8,r10
8001275e:	f6 09 13 00 	cpc	r9,r11
80012762:	5e 2f       	reths	1
80012764:	5e 3d       	retlo	0
80012766:	1b 07       	ld.w	r7,sp++
80012768:	d8 0a       	popm	pc,r12=0
8001276a:	58 17       	cp.w	r7,1
8001276c:	5f 0c       	sreq	r12
8001276e:	58 09       	cp.w	r9,0
80012770:	f5 b8 00 00 	subfeq	r8,0
80012774:	1b 07       	ld.w	r7,sp++
80012776:	1b 0e       	ld.w	lr,sp++
80012778:	5e 0f       	reteq	1
8001277a:	5e fc       	retal	r12

8001277c <__avr32_f64_cmp_lt>:
8001277c:	1a de       	st.w	--sp,lr
8001277e:	1a d7       	st.w	--sp,r7
80012780:	a1 7b       	lsl	r11,0x1
80012782:	5f 3c       	srlo	r12
80012784:	a1 79       	lsl	r9,0x1
80012786:	5f 37       	srlo	r7
80012788:	5c fc       	rol	r12
8001278a:	fc 1e ff e0 	movh	lr,0xffe0
8001278e:	58 0a       	cp.w	r10,0
80012790:	fc 0b 13 00 	cpc	r11,lr
80012794:	e0 8b 00 1d 	brhi	800127ce <__avr32_f64_cmp_lt+0x52>
80012798:	58 08       	cp.w	r8,0
8001279a:	fc 09 13 00 	cpc	r9,lr
8001279e:	e0 8b 00 18 	brhi	800127ce <__avr32_f64_cmp_lt+0x52>
800127a2:	58 0b       	cp.w	r11,0
800127a4:	f5 ba 00 00 	subfeq	r10,0
800127a8:	c1 50       	breq	800127d2 <__avr32_f64_cmp_lt+0x56>
800127aa:	1b 07       	ld.w	r7,sp++
800127ac:	1b 0e       	ld.w	lr,sp++
800127ae:	58 3c       	cp.w	r12,3
800127b0:	c0 a0       	breq	800127c4 <__avr32_f64_cmp_lt+0x48>
800127b2:	58 1c       	cp.w	r12,1
800127b4:	c0 33       	brcs	800127ba <__avr32_f64_cmp_lt+0x3e>
800127b6:	5e 0d       	reteq	0
800127b8:	5e 1f       	retne	1
800127ba:	10 3a       	cp.w	r10,r8
800127bc:	f2 0b 13 00 	cpc	r11,r9
800127c0:	5e 2d       	reths	0
800127c2:	5e 3f       	retlo	1
800127c4:	14 38       	cp.w	r8,r10
800127c6:	f6 09 13 00 	cpc	r9,r11
800127ca:	5e 2d       	reths	0
800127cc:	5e 3f       	retlo	1
800127ce:	1b 07       	ld.w	r7,sp++
800127d0:	d8 0a       	popm	pc,r12=0
800127d2:	58 17       	cp.w	r7,1
800127d4:	5f 1c       	srne	r12
800127d6:	58 09       	cp.w	r9,0
800127d8:	f5 b8 00 00 	subfeq	r8,0
800127dc:	1b 07       	ld.w	r7,sp++
800127de:	1b 0e       	ld.w	lr,sp++
800127e0:	5e 0d       	reteq	0
800127e2:	5e fc       	retal	r12

800127e4 <__avr32_f64_div>:
800127e4:	eb cd 40 ff 	pushm	r0-r7,lr
800127e8:	f7 e9 20 0e 	eor	lr,r11,r9
800127ec:	f6 07 16 14 	lsr	r7,r11,0x14
800127f0:	a9 7b       	lsl	r11,0x9
800127f2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800127f6:	a9 7a       	lsl	r10,0x9
800127f8:	bd bb       	sbr	r11,0x1d
800127fa:	e4 1b 3f ff 	andh	r11,0x3fff
800127fe:	ab d7       	cbr	r7,0xb
80012800:	e0 80 00 cc 	breq	80012998 <__avr32_f64_div_round_subnormal+0x54>
80012804:	e0 47 07 ff 	cp.w	r7,2047
80012808:	e0 84 00 b5 	brge	80012972 <__avr32_f64_div_round_subnormal+0x2e>
8001280c:	f2 06 16 14 	lsr	r6,r9,0x14
80012810:	a9 79       	lsl	r9,0x9
80012812:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80012816:	a9 78       	lsl	r8,0x9
80012818:	bd b9       	sbr	r9,0x1d
8001281a:	e4 19 3f ff 	andh	r9,0x3fff
8001281e:	ab d6       	cbr	r6,0xb
80012820:	e0 80 00 e2 	breq	800129e4 <__avr32_f64_div_round_subnormal+0xa0>
80012824:	e0 46 07 ff 	cp.w	r6,2047
80012828:	e0 84 00 b2 	brge	8001298c <__avr32_f64_div_round_subnormal+0x48>
8001282c:	0c 17       	sub	r7,r6
8001282e:	fe 37 fc 01 	sub	r7,-1023
80012832:	fc 1c 80 00 	movh	r12,0x8000
80012836:	f8 03 16 01 	lsr	r3,r12,0x1
8001283a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8001283e:	5c d4       	com	r4
80012840:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80012844:	e6 09 06 44 	mulu.d	r4,r3,r9
80012848:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001284c:	e6 05 06 44 	mulu.d	r4,r3,r5
80012850:	ea 03 15 02 	lsl	r3,r5,0x2
80012854:	e6 09 06 44 	mulu.d	r4,r3,r9
80012858:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001285c:	e6 05 06 44 	mulu.d	r4,r3,r5
80012860:	ea 03 15 02 	lsl	r3,r5,0x2
80012864:	e6 09 06 44 	mulu.d	r4,r3,r9
80012868:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001286c:	e6 05 06 44 	mulu.d	r4,r3,r5
80012870:	ea 03 15 02 	lsl	r3,r5,0x2
80012874:	e6 08 06 40 	mulu.d	r0,r3,r8
80012878:	e4 09 07 40 	macu.d	r0,r2,r9
8001287c:	e6 09 06 44 	mulu.d	r4,r3,r9
80012880:	02 04       	add	r4,r1
80012882:	5c 05       	acr	r5
80012884:	a3 65       	lsl	r5,0x2
80012886:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8001288a:	a3 64       	lsl	r4,0x2
8001288c:	5c 34       	neg	r4
8001288e:	f8 05 01 45 	sbc	r5,r12,r5
80012892:	e6 04 06 40 	mulu.d	r0,r3,r4
80012896:	e4 05 07 40 	macu.d	r0,r2,r5
8001289a:	e6 05 06 44 	mulu.d	r4,r3,r5
8001289e:	02 04       	add	r4,r1
800128a0:	5c 05       	acr	r5
800128a2:	ea 03 15 02 	lsl	r3,r5,0x2
800128a6:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800128aa:	e8 02 15 02 	lsl	r2,r4,0x2
800128ae:	e6 08 06 40 	mulu.d	r0,r3,r8
800128b2:	e4 09 07 40 	macu.d	r0,r2,r9
800128b6:	e6 09 06 44 	mulu.d	r4,r3,r9
800128ba:	02 04       	add	r4,r1
800128bc:	5c 05       	acr	r5
800128be:	a3 65       	lsl	r5,0x2
800128c0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800128c4:	a3 64       	lsl	r4,0x2
800128c6:	5c 34       	neg	r4
800128c8:	f8 05 01 45 	sbc	r5,r12,r5
800128cc:	e6 04 06 40 	mulu.d	r0,r3,r4
800128d0:	e4 05 07 40 	macu.d	r0,r2,r5
800128d4:	e6 05 06 44 	mulu.d	r4,r3,r5
800128d8:	02 04       	add	r4,r1
800128da:	5c 05       	acr	r5
800128dc:	ea 03 15 02 	lsl	r3,r5,0x2
800128e0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800128e4:	e8 02 15 02 	lsl	r2,r4,0x2
800128e8:	e6 0a 06 40 	mulu.d	r0,r3,r10
800128ec:	e4 0b 07 40 	macu.d	r0,r2,r11
800128f0:	e6 0b 06 42 	mulu.d	r2,r3,r11
800128f4:	02 02       	add	r2,r1
800128f6:	5c 03       	acr	r3
800128f8:	ed b3 00 1c 	bld	r3,0x1c
800128fc:	c0 90       	breq	8001290e <__avr32_f64_div+0x12a>
800128fe:	a1 72       	lsl	r2,0x1
80012900:	5c f3       	rol	r3
80012902:	20 17       	sub	r7,1
80012904:	a3 9a       	lsr	r10,0x3
80012906:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8001290a:	a3 9b       	lsr	r11,0x3
8001290c:	c0 58       	rjmp	80012916 <__avr32_f64_div+0x132>
8001290e:	a5 8a       	lsr	r10,0x4
80012910:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80012914:	a5 8b       	lsr	r11,0x4
80012916:	58 07       	cp.w	r7,0
80012918:	e0 8a 00 8b 	brle	80012a2e <__avr32_f64_div_res_subnormal>
8001291c:	e0 12 ff 00 	andl	r2,0xff00
80012920:	e8 12 00 80 	orl	r2,0x80
80012924:	e6 08 06 40 	mulu.d	r0,r3,r8
80012928:	e4 09 07 40 	macu.d	r0,r2,r9
8001292c:	e4 08 06 44 	mulu.d	r4,r2,r8
80012930:	e6 09 06 48 	mulu.d	r8,r3,r9
80012934:	00 05       	add	r5,r0
80012936:	f0 01 00 48 	adc	r8,r8,r1
8001293a:	5c 09       	acr	r9
8001293c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80012940:	58 04       	cp.w	r4,0
80012942:	5c 25       	cpc	r5

80012944 <__avr32_f64_div_round_subnormal>:
80012944:	f4 08 13 00 	cpc	r8,r10
80012948:	f6 09 13 00 	cpc	r9,r11
8001294c:	5f 36       	srlo	r6
8001294e:	f8 06 17 00 	moveq	r6,r12
80012952:	e4 0a 16 08 	lsr	r10,r2,0x8
80012956:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8001295a:	e6 0b 16 08 	lsr	r11,r3,0x8
8001295e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80012962:	ed be 00 1f 	bld	lr,0x1f
80012966:	ef bb 00 1f 	bst	r11,0x1f
8001296a:	0c 0a       	add	r10,r6
8001296c:	5c 0b       	acr	r11
8001296e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80012972:	e4 1b 00 0f 	andh	r11,0xf
80012976:	14 4b       	or	r11,r10
80012978:	e0 81 00 a7 	brne	80012ac6 <__avr32_f64_div_res_subnormal+0x98>
8001297c:	f2 06 16 14 	lsr	r6,r9,0x14
80012980:	ab d6       	cbr	r6,0xb
80012982:	e0 46 07 ff 	cp.w	r6,2047
80012986:	e0 81 00 a4 	brne	80012ace <__avr32_f64_div_res_subnormal+0xa0>
8001298a:	c9 e8       	rjmp	80012ac6 <__avr32_f64_div_res_subnormal+0x98>
8001298c:	e4 19 00 0f 	andh	r9,0xf
80012990:	10 49       	or	r9,r8
80012992:	e0 81 00 9a 	brne	80012ac6 <__avr32_f64_div_res_subnormal+0x98>
80012996:	c9 28       	rjmp	80012aba <__avr32_f64_div_res_subnormal+0x8c>
80012998:	a3 7b       	lsl	r11,0x3
8001299a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8001299e:	a3 7a       	lsl	r10,0x3
800129a0:	f5 eb 10 04 	or	r4,r10,r11
800129a4:	e0 80 00 a0 	breq	80012ae4 <__avr32_f64_div_op1_zero>
800129a8:	f6 04 12 00 	clz	r4,r11
800129ac:	c1 70       	breq	800129da <__avr32_f64_div_round_subnormal+0x96>
800129ae:	c0 c3       	brcs	800129c6 <__avr32_f64_div_round_subnormal+0x82>
800129b0:	e8 05 11 20 	rsub	r5,r4,32
800129b4:	f6 04 09 4b 	lsl	r11,r11,r4
800129b8:	f4 05 0a 45 	lsr	r5,r10,r5
800129bc:	0a 4b       	or	r11,r5
800129be:	f4 04 09 4a 	lsl	r10,r10,r4
800129c2:	08 17       	sub	r7,r4
800129c4:	c0 b8       	rjmp	800129da <__avr32_f64_div_round_subnormal+0x96>
800129c6:	f4 04 12 00 	clz	r4,r10
800129ca:	f9 b4 03 00 	movlo	r4,0
800129ce:	f7 b4 02 e0 	subhs	r4,-32
800129d2:	f4 04 09 4b 	lsl	r11,r10,r4
800129d6:	30 0a       	mov	r10,0
800129d8:	08 17       	sub	r7,r4
800129da:	a3 8a       	lsr	r10,0x2
800129dc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800129e0:	a3 8b       	lsr	r11,0x2
800129e2:	c1 1b       	rjmp	80012804 <__avr32_f64_div+0x20>
800129e4:	a3 79       	lsl	r9,0x3
800129e6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800129ea:	a3 78       	lsl	r8,0x3
800129ec:	f3 e8 10 04 	or	r4,r9,r8
800129f0:	c6 f0       	breq	80012ace <__avr32_f64_div_res_subnormal+0xa0>
800129f2:	f2 04 12 00 	clz	r4,r9
800129f6:	c1 70       	breq	80012a24 <__avr32_f64_div_round_subnormal+0xe0>
800129f8:	c0 c3       	brcs	80012a10 <__avr32_f64_div_round_subnormal+0xcc>
800129fa:	e8 05 11 20 	rsub	r5,r4,32
800129fe:	f2 04 09 49 	lsl	r9,r9,r4
80012a02:	f0 05 0a 45 	lsr	r5,r8,r5
80012a06:	0a 49       	or	r9,r5
80012a08:	f0 04 09 48 	lsl	r8,r8,r4
80012a0c:	08 16       	sub	r6,r4
80012a0e:	c0 b8       	rjmp	80012a24 <__avr32_f64_div_round_subnormal+0xe0>
80012a10:	f0 04 12 00 	clz	r4,r8
80012a14:	f9 b4 03 00 	movlo	r4,0
80012a18:	f7 b4 02 e0 	subhs	r4,-32
80012a1c:	f0 04 09 49 	lsl	r9,r8,r4
80012a20:	30 08       	mov	r8,0
80012a22:	08 16       	sub	r6,r4
80012a24:	a3 88       	lsr	r8,0x2
80012a26:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80012a2a:	a3 89       	lsr	r9,0x2
80012a2c:	cf ca       	rjmp	80012824 <__avr32_f64_div+0x40>

80012a2e <__avr32_f64_div_res_subnormal>:
80012a2e:	5c 37       	neg	r7
80012a30:	2f f7       	sub	r7,-1
80012a32:	f1 b7 04 c0 	satu	r7,0x6
80012a36:	e0 47 00 20 	cp.w	r7,32
80012a3a:	c1 54       	brge	80012a64 <__avr32_f64_div_res_subnormal+0x36>
80012a3c:	ee 06 11 20 	rsub	r6,r7,32
80012a40:	e4 07 0a 42 	lsr	r2,r2,r7
80012a44:	e6 06 09 4c 	lsl	r12,r3,r6
80012a48:	18 42       	or	r2,r12
80012a4a:	e6 07 0a 43 	lsr	r3,r3,r7
80012a4e:	f4 06 09 41 	lsl	r1,r10,r6
80012a52:	f4 07 0a 4a 	lsr	r10,r10,r7
80012a56:	f6 06 09 4c 	lsl	r12,r11,r6
80012a5a:	18 4a       	or	r10,r12
80012a5c:	f6 07 0a 4b 	lsr	r11,r11,r7
80012a60:	30 00       	mov	r0,0
80012a62:	c1 58       	rjmp	80012a8c <__avr32_f64_div_res_subnormal+0x5e>
80012a64:	ee 06 11 20 	rsub	r6,r7,32
80012a68:	f9 b0 00 00 	moveq	r0,0
80012a6c:	f9 bc 00 00 	moveq	r12,0
80012a70:	c0 50       	breq	80012a7a <__avr32_f64_div_res_subnormal+0x4c>
80012a72:	f4 06 09 40 	lsl	r0,r10,r6
80012a76:	f6 06 09 4c 	lsl	r12,r11,r6
80012a7a:	e6 07 0a 42 	lsr	r2,r3,r7
80012a7e:	30 03       	mov	r3,0
80012a80:	f4 07 0a 41 	lsr	r1,r10,r7
80012a84:	18 41       	or	r1,r12
80012a86:	f6 07 0a 4a 	lsr	r10,r11,r7
80012a8a:	30 0b       	mov	r11,0
80012a8c:	e0 12 ff 00 	andl	r2,0xff00
80012a90:	e8 12 00 80 	orl	r2,0x80
80012a94:	e6 08 06 46 	mulu.d	r6,r3,r8
80012a98:	e4 09 07 46 	macu.d	r6,r2,r9
80012a9c:	e4 08 06 44 	mulu.d	r4,r2,r8
80012aa0:	e6 09 06 48 	mulu.d	r8,r3,r9
80012aa4:	0c 05       	add	r5,r6
80012aa6:	f0 07 00 48 	adc	r8,r8,r7
80012aaa:	5c 09       	acr	r9
80012aac:	30 07       	mov	r7,0
80012aae:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80012ab2:	00 34       	cp.w	r4,r0
80012ab4:	e2 05 13 00 	cpc	r5,r1
80012ab8:	c4 6b       	rjmp	80012944 <__avr32_f64_div_round_subnormal>
80012aba:	1c 9b       	mov	r11,lr
80012abc:	e6 1b 80 00 	andh	r11,0x8000,COH
80012ac0:	30 0a       	mov	r10,0
80012ac2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80012ac6:	3f fb       	mov	r11,-1
80012ac8:	30 0a       	mov	r10,0
80012aca:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80012ace:	f5 eb 10 04 	or	r4,r10,r11
80012ad2:	c0 90       	breq	80012ae4 <__avr32_f64_div_op1_zero>
80012ad4:	1c 9b       	mov	r11,lr
80012ad6:	e6 1b 80 00 	andh	r11,0x8000,COH
80012ada:	ea 1b 7f f0 	orh	r11,0x7ff0
80012ade:	30 0a       	mov	r10,0
80012ae0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80012ae4 <__avr32_f64_div_op1_zero>:
80012ae4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80012ae8:	ce f0       	breq	80012ac6 <__avr32_f64_div_res_subnormal+0x98>
80012aea:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80012aee:	e0 44 07 ff 	cp.w	r4,2047
80012af2:	ce 41       	brne	80012aba <__avr32_f64_div_res_subnormal+0x8c>
80012af4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80012af8:	ce 10       	breq	80012aba <__avr32_f64_div_res_subnormal+0x8c>
80012afa:	ce 6b       	rjmp	80012ac6 <__avr32_f64_div_res_subnormal+0x98>

80012afc <__avr32_f64_to_f32>:
80012afc:	f6 09 15 01 	lsl	r9,r11,0x1
80012b00:	b5 99       	lsr	r9,0x15
80012b02:	5e 0d       	reteq	0
80012b04:	f6 08 15 0a 	lsl	r8,r11,0xa
80012b08:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80012b0c:	ab 6a       	lsl	r10,0xa
80012b0e:	5c 3a       	neg	r10
80012b10:	5c fc       	rol	r12
80012b12:	e0 49 07 ff 	cp.w	r9,2047
80012b16:	c1 a0       	breq	80012b4a <__truncdfsf_return_op1+0x6>
80012b18:	e0 29 03 80 	sub	r9,896
80012b1c:	bf bc       	sbr	r12,0x1f
80012b1e:	58 09       	cp.w	r9,0
80012b20:	e0 8a 00 1a 	brle	80012b54 <__truncdfsf_return_op1+0x10>
80012b24:	37 fa       	mov	r10,127
80012b26:	ed bc 00 08 	bld	r12,0x8
80012b2a:	f7 ba 00 ff 	subeq	r10,-1
80012b2e:	14 0c       	add	r12,r10
80012b30:	f7 b9 03 fe 	sublo	r9,-2
80012b34:	ed bc 00 1f 	bld	r12,0x1f
80012b38:	f7 b9 01 01 	subne	r9,1
80012b3c:	f8 0c 16 07 	lsr	r12,r12,0x7
80012b40:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80012b44 <__truncdfsf_return_op1>:
80012b44:	a1 7b       	lsl	r11,0x1
80012b46:	5d 0c       	ror	r12
80012b48:	5e fc       	retal	r12
80012b4a:	bf dc       	cbr	r12,0x1f
80012b4c:	5e 1e       	retne	-1
80012b4e:	fc 1c 7f 80 	movh	r12,0x7f80
80012b52:	5e fc       	retal	r12
80012b54:	f2 09 11 01 	rsub	r9,r9,1
80012b58:	59 99       	cp.w	r9,25
80012b5a:	f9 bc 02 00 	movhs	r12,0
80012b5e:	c1 32       	brcc	80012b84 <__truncdfsf_return_op1+0x40>
80012b60:	f2 0a 11 20 	rsub	r10,r9,32
80012b64:	f8 0a 09 4a 	lsl	r10,r12,r10
80012b68:	5f 1a       	srne	r10
80012b6a:	f8 09 0a 4c 	lsr	r12,r12,r9
80012b6e:	14 4c       	or	r12,r10
80012b70:	37 fa       	mov	r10,127
80012b72:	ed bc 00 08 	bld	r12,0x8
80012b76:	f7 ba 00 ff 	subeq	r10,-1
80012b7a:	14 0c       	add	r12,r10
80012b7c:	f8 0c 16 07 	lsr	r12,r12,0x7
80012b80:	a1 7b       	lsl	r11,0x1
80012b82:	5d 0c       	ror	r12
80012b84:	5e fc       	retal	r12

80012b86 <__avr32_udiv64>:
80012b86:	d4 31       	pushm	r0-r7,lr
80012b88:	1a 97       	mov	r7,sp
80012b8a:	20 2d       	sub	sp,8
80012b8c:	10 9e       	mov	lr,r8
80012b8e:	12 95       	mov	r5,r9
80012b90:	14 96       	mov	r6,r10
80012b92:	58 09       	cp.w	r9,0
80012b94:	c4 91       	brne	80012c26 <__avr32_udiv64+0xa0>
80012b96:	16 38       	cp.w	r8,r11
80012b98:	e0 88 00 57 	brls	80012c46 <__avr32_udiv64+0xc0>
80012b9c:	f0 08 12 00 	clz	r8,r8
80012ba0:	c0 d0       	breq	80012bba <__avr32_udiv64+0x34>
80012ba2:	f6 08 09 4b 	lsl	r11,r11,r8
80012ba6:	f0 09 11 20 	rsub	r9,r8,32
80012baa:	fc 08 09 4e 	lsl	lr,lr,r8
80012bae:	f4 09 0a 49 	lsr	r9,r10,r9
80012bb2:	f4 08 09 46 	lsl	r6,r10,r8
80012bb6:	f3 eb 10 0b 	or	r11,r9,r11
80012bba:	fc 05 16 10 	lsr	r5,lr,0x10
80012bbe:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80012bc2:	f6 05 0d 0a 	divu	r10,r11,r5
80012bc6:	ec 08 16 10 	lsr	r8,r6,0x10
80012bca:	14 99       	mov	r9,r10
80012bcc:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80012bd0:	b9 3a       	mul	r10,r12
80012bd2:	10 3a       	cp.w	r10,r8
80012bd4:	e0 88 00 0c 	brls	80012bec <__avr32_udiv64+0x66>
80012bd8:	20 19       	sub	r9,1
80012bda:	1c 08       	add	r8,lr
80012bdc:	10 3e       	cp.w	lr,r8
80012bde:	e0 8b 00 07 	brhi	80012bec <__avr32_udiv64+0x66>
80012be2:	10 3a       	cp.w	r10,r8
80012be4:	f7 b9 0b 01 	subhi	r9,1
80012be8:	f1 de eb 08 	addhi	r8,r8,lr
80012bec:	f0 0a 01 0b 	sub	r11,r8,r10
80012bf0:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80012bf4:	f6 05 0d 0a 	divu	r10,r11,r5
80012bf8:	ed eb 11 06 	or	r6,r6,r11<<0x10
80012bfc:	14 98       	mov	r8,r10
80012bfe:	f4 0c 02 4c 	mul	r12,r10,r12
80012c02:	0c 3c       	cp.w	r12,r6
80012c04:	e0 88 00 0a 	brls	80012c18 <__avr32_udiv64+0x92>
80012c08:	20 18       	sub	r8,1
80012c0a:	1c 06       	add	r6,lr
80012c0c:	0c 3e       	cp.w	lr,r6
80012c0e:	e0 8b 00 05 	brhi	80012c18 <__avr32_udiv64+0x92>
80012c12:	0c 3c       	cp.w	r12,r6
80012c14:	f7 b8 0b 01 	subhi	r8,1
80012c18:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80012c1c:	30 0c       	mov	r12,0
80012c1e:	16 9a       	mov	r10,r11
80012c20:	18 9b       	mov	r11,r12
80012c22:	2f ed       	sub	sp,-8
80012c24:	d8 32       	popm	r0-r7,pc
80012c26:	16 39       	cp.w	r9,r11
80012c28:	e0 8b 00 51 	brhi	80012cca <__avr32_udiv64+0x144>
80012c2c:	f2 0c 12 00 	clz	r12,r9
80012c30:	c5 31       	brne	80012cd6 <__avr32_udiv64+0x150>
80012c32:	14 38       	cp.w	r8,r10
80012c34:	5f 89       	srls	r9
80012c36:	16 35       	cp.w	r5,r11
80012c38:	5f 38       	srlo	r8
80012c3a:	10 49       	or	r9,r8
80012c3c:	f8 09 18 00 	cp.b	r9,r12
80012c40:	c4 50       	breq	80012cca <__avr32_udiv64+0x144>
80012c42:	30 1b       	mov	r11,1
80012c44:	c4 58       	rjmp	80012cce <__avr32_udiv64+0x148>
80012c46:	58 08       	cp.w	r8,0
80012c48:	c0 51       	brne	80012c52 <__avr32_udiv64+0xcc>
80012c4a:	30 19       	mov	r9,1
80012c4c:	f2 08 0d 08 	divu	r8,r9,r8
80012c50:	10 9e       	mov	lr,r8
80012c52:	fc 08 12 00 	clz	r8,lr
80012c56:	e0 81 00 91 	brne	80012d78 <__avr32_udiv64+0x1f2>
80012c5a:	1c 1b       	sub	r11,lr
80012c5c:	fc 05 16 10 	lsr	r5,lr,0x10
80012c60:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80012c64:	30 1c       	mov	r12,1
80012c66:	f6 05 0d 0a 	divu	r10,r11,r5
80012c6a:	ec 08 16 10 	lsr	r8,r6,0x10
80012c6e:	f4 09 02 43 	mul	r3,r10,r9
80012c72:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80012c76:	14 9b       	mov	r11,r10
80012c78:	10 33       	cp.w	r3,r8
80012c7a:	e0 88 00 0c 	brls	80012c92 <__avr32_udiv64+0x10c>
80012c7e:	20 1b       	sub	r11,1
80012c80:	1c 08       	add	r8,lr
80012c82:	10 3e       	cp.w	lr,r8
80012c84:	e0 8b 00 07 	brhi	80012c92 <__avr32_udiv64+0x10c>
80012c88:	10 33       	cp.w	r3,r8
80012c8a:	f7 bb 0b 01 	subhi	r11,1
80012c8e:	f1 de eb 08 	addhi	r8,r8,lr
80012c92:	f0 03 01 03 	sub	r3,r8,r3
80012c96:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80012c9a:	e6 05 0d 02 	divu	r2,r3,r5
80012c9e:	ed e3 11 06 	or	r6,r6,r3<<0x10
80012ca2:	04 98       	mov	r8,r2
80012ca4:	e4 09 02 49 	mul	r9,r2,r9
80012ca8:	0c 39       	cp.w	r9,r6
80012caa:	e0 88 00 0a 	brls	80012cbe <__avr32_udiv64+0x138>
80012cae:	20 18       	sub	r8,1
80012cb0:	1c 06       	add	r6,lr
80012cb2:	0c 3e       	cp.w	lr,r6
80012cb4:	e0 8b 00 05 	brhi	80012cbe <__avr32_udiv64+0x138>
80012cb8:	0c 39       	cp.w	r9,r6
80012cba:	f7 b8 0b 01 	subhi	r8,1
80012cbe:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80012cc2:	16 9a       	mov	r10,r11
80012cc4:	18 9b       	mov	r11,r12
80012cc6:	2f ed       	sub	sp,-8
80012cc8:	d8 32       	popm	r0-r7,pc
80012cca:	30 0b       	mov	r11,0
80012ccc:	16 9c       	mov	r12,r11
80012cce:	16 9a       	mov	r10,r11
80012cd0:	18 9b       	mov	r11,r12
80012cd2:	2f ed       	sub	sp,-8
80012cd4:	d8 32       	popm	r0-r7,pc
80012cd6:	f2 0c 09 45 	lsl	r5,r9,r12
80012cda:	f8 0e 11 20 	rsub	lr,r12,32
80012cde:	f0 0c 09 43 	lsl	r3,r8,r12
80012ce2:	f4 0e 0a 46 	lsr	r6,r10,lr
80012ce6:	f0 0e 0a 48 	lsr	r8,r8,lr
80012cea:	f6 0e 0a 4e 	lsr	lr,r11,lr
80012cee:	0a 48       	or	r8,r5
80012cf0:	f0 01 16 10 	lsr	r1,r8,0x10
80012cf4:	fc 01 0d 04 	divu	r4,lr,r1
80012cf8:	ee e5 ff f8 	st.d	r7[-8],r4
80012cfc:	f6 0c 09 49 	lsl	r9,r11,r12
80012d00:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80012d04:	ed e9 10 09 	or	r9,r6,r9
80012d08:	08 96       	mov	r6,r4
80012d0a:	f2 0e 16 10 	lsr	lr,r9,0x10
80012d0e:	ee f4 ff f8 	ld.w	r4,r7[-8]
80012d12:	ec 05 02 4b 	mul	r11,r6,r5
80012d16:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80012d1a:	1c 3b       	cp.w	r11,lr
80012d1c:	e0 88 00 07 	brls	80012d2a <__avr32_udiv64+0x1a4>
80012d20:	20 16       	sub	r6,1
80012d22:	10 0e       	add	lr,r8
80012d24:	1c 38       	cp.w	r8,lr
80012d26:	e0 88 00 6d 	brls	80012e00 <__avr32_udiv64+0x27a>
80012d2a:	16 1e       	sub	lr,r11
80012d2c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80012d30:	fc 01 0d 00 	divu	r0,lr,r1
80012d34:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80012d38:	00 9b       	mov	r11,r0
80012d3a:	e0 05 02 4e 	mul	lr,r0,r5
80012d3e:	12 3e       	cp.w	lr,r9
80012d40:	e0 88 00 07 	brls	80012d4e <__avr32_udiv64+0x1c8>
80012d44:	20 1b       	sub	r11,1
80012d46:	10 09       	add	r9,r8
80012d48:	12 38       	cp.w	r8,r9
80012d4a:	e0 88 00 55 	brls	80012df4 <__avr32_udiv64+0x26e>
80012d4e:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80012d52:	1c 19       	sub	r9,lr
80012d54:	f6 03 06 42 	mulu.d	r2,r11,r3
80012d58:	06 39       	cp.w	r9,r3
80012d5a:	c0 93       	brcs	80012d6c <__avr32_udiv64+0x1e6>
80012d5c:	5f 09       	sreq	r9
80012d5e:	f4 0c 09 4c 	lsl	r12,r10,r12
80012d62:	04 3c       	cp.w	r12,r2
80012d64:	5f 38       	srlo	r8
80012d66:	f3 e8 00 08 	and	r8,r9,r8
80012d6a:	c0 20       	breq	80012d6e <__avr32_udiv64+0x1e8>
80012d6c:	20 1b       	sub	r11,1
80012d6e:	30 0c       	mov	r12,0
80012d70:	16 9a       	mov	r10,r11
80012d72:	18 9b       	mov	r11,r12
80012d74:	2f ed       	sub	sp,-8
80012d76:	d8 32       	popm	r0-r7,pc
80012d78:	f6 08 09 49 	lsl	r9,r11,r8
80012d7c:	fc 08 09 4e 	lsl	lr,lr,r8
80012d80:	f0 01 11 20 	rsub	r1,r8,32
80012d84:	fc 05 16 10 	lsr	r5,lr,0x10
80012d88:	f4 01 0a 42 	lsr	r2,r10,r1
80012d8c:	f6 01 0a 41 	lsr	r1,r11,r1
80012d90:	12 42       	or	r2,r9
80012d92:	e2 05 0d 00 	divu	r0,r1,r5
80012d96:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80012d9a:	e4 06 16 10 	lsr	r6,r2,0x10
80012d9e:	00 93       	mov	r3,r0
80012da0:	ed e1 11 06 	or	r6,r6,r1<<0x10
80012da4:	e0 09 02 4c 	mul	r12,r0,r9
80012da8:	0c 3c       	cp.w	r12,r6
80012daa:	e0 88 00 07 	brls	80012db8 <__avr32_udiv64+0x232>
80012dae:	20 13       	sub	r3,1
80012db0:	1c 06       	add	r6,lr
80012db2:	0c 3e       	cp.w	lr,r6
80012db4:	e0 88 00 2c 	brls	80012e0c <__avr32_udiv64+0x286>
80012db8:	ec 0c 01 01 	sub	r1,r6,r12
80012dbc:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80012dc0:	e2 05 0d 00 	divu	r0,r1,r5
80012dc4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80012dc8:	00 9c       	mov	r12,r0
80012dca:	e0 09 02 41 	mul	r1,r0,r9
80012dce:	16 31       	cp.w	r1,r11
80012dd0:	e0 88 00 0c 	brls	80012de8 <__avr32_udiv64+0x262>
80012dd4:	20 1c       	sub	r12,1
80012dd6:	1c 0b       	add	r11,lr
80012dd8:	16 3e       	cp.w	lr,r11
80012dda:	e0 8b 00 07 	brhi	80012de8 <__avr32_udiv64+0x262>
80012dde:	16 31       	cp.w	r1,r11
80012de0:	f7 bc 0b 01 	subhi	r12,1
80012de4:	f7 de eb 0b 	addhi	r11,r11,lr
80012de8:	f4 08 09 46 	lsl	r6,r10,r8
80012dec:	02 1b       	sub	r11,r1
80012dee:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80012df2:	c3 ab       	rjmp	80012c66 <__avr32_udiv64+0xe0>
80012df4:	12 3e       	cp.w	lr,r9
80012df6:	f3 d8 eb 09 	addhi	r9,r9,r8
80012dfa:	f7 bb 0b 01 	subhi	r11,1
80012dfe:	ca 8b       	rjmp	80012d4e <__avr32_udiv64+0x1c8>
80012e00:	1c 3b       	cp.w	r11,lr
80012e02:	f7 b6 0b 01 	subhi	r6,1
80012e06:	fd d8 eb 0e 	addhi	lr,lr,r8
80012e0a:	c9 0b       	rjmp	80012d2a <__avr32_udiv64+0x1a4>
80012e0c:	0c 3c       	cp.w	r12,r6
80012e0e:	f7 b3 0b 01 	subhi	r3,1
80012e12:	ed de eb 06 	addhi	r6,r6,lr
80012e16:	cd 1b       	rjmp	80012db8 <__avr32_udiv64+0x232>

80012e18 <__avr32_umod64>:
80012e18:	d4 31       	pushm	r0-r7,lr
80012e1a:	1a 97       	mov	r7,sp
80012e1c:	20 2d       	sub	sp,8
80012e1e:	10 9c       	mov	r12,r8
80012e20:	12 95       	mov	r5,r9
80012e22:	14 9e       	mov	lr,r10
80012e24:	16 93       	mov	r3,r11
80012e26:	16 96       	mov	r6,r11
80012e28:	58 09       	cp.w	r9,0
80012e2a:	c4 41       	brne	80012eb2 <__avr32_umod64+0x9a>
80012e2c:	16 38       	cp.w	r8,r11
80012e2e:	e0 88 00 5a 	brls	80012ee2 <__avr32_umod64+0xca>
80012e32:	f0 08 12 00 	clz	r8,r8
80012e36:	c0 d0       	breq	80012e50 <__avr32_umod64+0x38>
80012e38:	f6 08 09 46 	lsl	r6,r11,r8
80012e3c:	f8 08 09 4c 	lsl	r12,r12,r8
80012e40:	f0 0b 11 20 	rsub	r11,r8,32
80012e44:	f4 08 09 4e 	lsl	lr,r10,r8
80012e48:	f4 0b 0a 4b 	lsr	r11,r10,r11
80012e4c:	f7 e6 10 06 	or	r6,r11,r6
80012e50:	f8 0a 16 10 	lsr	r10,r12,0x10
80012e54:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80012e58:	ec 0a 0d 02 	divu	r2,r6,r10
80012e5c:	fc 09 16 10 	lsr	r9,lr,0x10
80012e60:	ea 02 02 4b 	mul	r11,r5,r2
80012e64:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80012e68:	12 3b       	cp.w	r11,r9
80012e6a:	e0 88 00 09 	brls	80012e7c <__avr32_umod64+0x64>
80012e6e:	18 09       	add	r9,r12
80012e70:	12 3c       	cp.w	r12,r9
80012e72:	e0 8b 00 05 	brhi	80012e7c <__avr32_umod64+0x64>
80012e76:	12 3b       	cp.w	r11,r9
80012e78:	f3 dc eb 09 	addhi	r9,r9,r12
80012e7c:	f2 0b 01 0b 	sub	r11,r9,r11
80012e80:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80012e84:	f6 0a 0d 0a 	divu	r10,r11,r10
80012e88:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80012e8c:	ea 0a 02 4a 	mul	r10,r5,r10
80012e90:	1c 3a       	cp.w	r10,lr
80012e92:	e0 88 00 09 	brls	80012ea4 <__avr32_umod64+0x8c>
80012e96:	18 0e       	add	lr,r12
80012e98:	1c 3c       	cp.w	r12,lr
80012e9a:	e0 8b 00 05 	brhi	80012ea4 <__avr32_umod64+0x8c>
80012e9e:	1c 3a       	cp.w	r10,lr
80012ea0:	fd dc eb 0e 	addhi	lr,lr,r12
80012ea4:	fc 0a 01 0a 	sub	r10,lr,r10
80012ea8:	30 0b       	mov	r11,0
80012eaa:	f4 08 0a 4a 	lsr	r10,r10,r8
80012eae:	2f ed       	sub	sp,-8
80012eb0:	d8 32       	popm	r0-r7,pc
80012eb2:	16 39       	cp.w	r9,r11
80012eb4:	fe 9b ff fd 	brhi	80012eae <__avr32_umod64+0x96>
80012eb8:	f2 09 12 00 	clz	r9,r9
80012ebc:	c4 61       	brne	80012f48 <__avr32_umod64+0x130>
80012ebe:	14 38       	cp.w	r8,r10
80012ec0:	5f 8b       	srls	r11
80012ec2:	06 35       	cp.w	r5,r3
80012ec4:	5f 3a       	srlo	r10
80012ec6:	f7 ea 10 0a 	or	r10,r11,r10
80012eca:	f2 0a 18 00 	cp.b	r10,r9
80012ece:	c0 60       	breq	80012eda <__avr32_umod64+0xc2>
80012ed0:	fc 08 01 0a 	sub	r10,lr,r8
80012ed4:	e6 05 01 46 	sbc	r6,r3,r5
80012ed8:	14 9e       	mov	lr,r10
80012eda:	0c 9b       	mov	r11,r6
80012edc:	1c 9a       	mov	r10,lr
80012ede:	2f ed       	sub	sp,-8
80012ee0:	d8 32       	popm	r0-r7,pc
80012ee2:	58 08       	cp.w	r8,0
80012ee4:	c0 51       	brne	80012eee <__avr32_umod64+0xd6>
80012ee6:	30 19       	mov	r9,1
80012ee8:	f2 08 0d 08 	divu	r8,r9,r8
80012eec:	10 9c       	mov	r12,r8
80012eee:	f8 08 12 00 	clz	r8,r12
80012ef2:	e0 81 00 84 	brne	80012ffa <__avr32_umod64+0x1e2>
80012ef6:	ec 0c 01 0b 	sub	r11,r6,r12
80012efa:	f8 03 16 10 	lsr	r3,r12,0x10
80012efe:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80012f02:	f6 03 0d 0a 	divu	r10,r11,r3
80012f06:	fc 09 16 10 	lsr	r9,lr,0x10
80012f0a:	ea 0a 02 4a 	mul	r10,r5,r10
80012f0e:	f3 eb 11 09 	or	r9,r9,r11<<0x10
80012f12:	12 3a       	cp.w	r10,r9
80012f14:	e0 88 00 09 	brls	80012f26 <__avr32_umod64+0x10e>
80012f18:	18 09       	add	r9,r12
80012f1a:	12 3c       	cp.w	r12,r9
80012f1c:	e0 8b 00 05 	brhi	80012f26 <__avr32_umod64+0x10e>
80012f20:	12 3a       	cp.w	r10,r9
80012f22:	f3 dc eb 09 	addhi	r9,r9,r12
80012f26:	14 19       	sub	r9,r10
80012f28:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80012f2c:	f2 03 0d 02 	divu	r2,r9,r3
80012f30:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80012f34:	ea 02 02 4a 	mul	r10,r5,r2
80012f38:	1c 3a       	cp.w	r10,lr
80012f3a:	fe 98 ff b5 	brls	80012ea4 <__avr32_umod64+0x8c>
80012f3e:	18 0e       	add	lr,r12
80012f40:	1c 3c       	cp.w	r12,lr
80012f42:	fe 9b ff b1 	brhi	80012ea4 <__avr32_umod64+0x8c>
80012f46:	ca cb       	rjmp	80012e9e <__avr32_umod64+0x86>
80012f48:	f2 0e 11 20 	rsub	lr,r9,32
80012f4c:	ea 09 09 45 	lsl	r5,r5,r9
80012f50:	f6 09 09 4b 	lsl	r11,r11,r9
80012f54:	e6 0e 0a 43 	lsr	r3,r3,lr
80012f58:	f0 09 09 41 	lsl	r1,r8,r9
80012f5c:	f4 09 09 42 	lsl	r2,r10,r9
80012f60:	f0 0e 0a 48 	lsr	r8,r8,lr
80012f64:	f4 0e 0a 4a 	lsr	r10,r10,lr
80012f68:	0a 48       	or	r8,r5
80012f6a:	16 4a       	or	r10,r11
80012f6c:	f0 06 16 10 	lsr	r6,r8,0x10
80012f70:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80012f74:	e6 06 0d 04 	divu	r4,r3,r6
80012f78:	f4 03 16 10 	lsr	r3,r10,0x10
80012f7c:	08 9b       	mov	r11,r4
80012f7e:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80012f82:	e8 0c 02 45 	mul	r5,r4,r12
80012f86:	06 35       	cp.w	r5,r3
80012f88:	e0 88 00 07 	brls	80012f96 <__avr32_umod64+0x17e>
80012f8c:	20 1b       	sub	r11,1
80012f8e:	10 03       	add	r3,r8
80012f90:	06 38       	cp.w	r8,r3
80012f92:	e0 88 00 72 	brls	80013076 <__avr32_umod64+0x25e>
80012f96:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80012f9a:	0a 13       	sub	r3,r5
80012f9c:	e6 06 0d 04 	divu	r4,r3,r6
80012fa0:	f5 e5 11 06 	or	r6,r10,r5<<0x10
80012fa4:	e8 0c 02 4c 	mul	r12,r4,r12
80012fa8:	08 9a       	mov	r10,r4
80012faa:	0c 3c       	cp.w	r12,r6
80012fac:	e0 88 00 07 	brls	80012fba <__avr32_umod64+0x1a2>
80012fb0:	20 1a       	sub	r10,1
80012fb2:	10 06       	add	r6,r8
80012fb4:	0c 38       	cp.w	r8,r6
80012fb6:	e0 88 00 5a 	brls	8001306a <__avr32_umod64+0x252>
80012fba:	f5 eb 11 0b 	or	r11,r10,r11<<0x10
80012fbe:	18 16       	sub	r6,r12
80012fc0:	f6 01 06 4a 	mulu.d	r10,r11,r1
80012fc4:	14 9c       	mov	r12,r10
80012fc6:	16 36       	cp.w	r6,r11
80012fc8:	c0 73       	brcs	80012fd6 <__avr32_umod64+0x1be>
80012fca:	5f 05       	sreq	r5
80012fcc:	14 32       	cp.w	r2,r10
80012fce:	5f 3a       	srlo	r10
80012fd0:	eb ea 00 0a 	and	r10,r5,r10
80012fd4:	c0 60       	breq	80012fe0 <__avr32_umod64+0x1c8>
80012fd6:	f8 01 01 04 	sub	r4,r12,r1
80012fda:	f6 08 01 4b 	sbc	r11,r11,r8
80012fde:	08 9c       	mov	r12,r4
80012fe0:	e4 0c 01 0a 	sub	r10,r2,r12
80012fe4:	ec 0b 01 46 	sbc	r6,r6,r11
80012fe8:	ec 09 0a 4b 	lsr	r11,r6,r9
80012fec:	f4 09 0a 4a 	lsr	r10,r10,r9
80012ff0:	ec 0e 09 46 	lsl	r6,r6,lr
80012ff4:	0c 4a       	or	r10,r6
80012ff6:	2f ed       	sub	sp,-8
80012ff8:	d8 32       	popm	r0-r7,pc
80012ffa:	f0 01 11 20 	rsub	r1,r8,32
80012ffe:	f4 01 0a 4b 	lsr	r11,r10,r1
80013002:	f8 08 09 4c 	lsl	r12,r12,r8
80013006:	ec 08 09 49 	lsl	r9,r6,r8
8001300a:	ec 01 0a 41 	lsr	r1,r6,r1
8001300e:	f7 e9 10 09 	or	r9,r11,r9
80013012:	f8 03 16 10 	lsr	r3,r12,0x10
80013016:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8001301a:	e2 03 0d 00 	divu	r0,r1,r3
8001301e:	f2 0b 16 10 	lsr	r11,r9,0x10
80013022:	ea 00 02 4e 	mul	lr,r5,r0
80013026:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8001302a:	16 3e       	cp.w	lr,r11
8001302c:	e0 88 00 06 	brls	80013038 <__avr32_umod64+0x220>
80013030:	18 0b       	add	r11,r12
80013032:	16 3c       	cp.w	r12,r11
80013034:	e0 88 00 27 	brls	80013082 <__avr32_umod64+0x26a>
80013038:	f6 0e 01 01 	sub	r1,r11,lr
8001303c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80013040:	e2 03 0d 00 	divu	r0,r1,r3
80013044:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80013048:	ea 00 02 4b 	mul	r11,r5,r0
8001304c:	12 3b       	cp.w	r11,r9
8001304e:	e0 88 00 09 	brls	80013060 <__avr32_umod64+0x248>
80013052:	18 09       	add	r9,r12
80013054:	12 3c       	cp.w	r12,r9
80013056:	e0 8b 00 05 	brhi	80013060 <__avr32_umod64+0x248>
8001305a:	12 3b       	cp.w	r11,r9
8001305c:	f3 dc eb 09 	addhi	r9,r9,r12
80013060:	f2 0b 01 0b 	sub	r11,r9,r11
80013064:	f4 08 09 4e 	lsl	lr,r10,r8
80013068:	c4 db       	rjmp	80012f02 <__avr32_umod64+0xea>
8001306a:	0c 3c       	cp.w	r12,r6
8001306c:	f7 ba 0b 01 	subhi	r10,1
80013070:	ed d8 eb 06 	addhi	r6,r6,r8
80013074:	ca 3b       	rjmp	80012fba <__avr32_umod64+0x1a2>
80013076:	06 35       	cp.w	r5,r3
80013078:	f7 bb 0b 01 	subhi	r11,1
8001307c:	e7 d8 eb 03 	addhi	r3,r3,r8
80013080:	c8 bb       	rjmp	80012f96 <__avr32_umod64+0x17e>
80013082:	16 3e       	cp.w	lr,r11
80013084:	f7 dc eb 0b 	addhi	r11,r11,r12
80013088:	cd 8b       	rjmp	80013038 <__avr32_umod64+0x220>

Disassembly of section .exception:

80013200 <_evba>:
80013200:	c0 08       	rjmp	80013200 <_evba>
	...

80013204 <_handle_TLB_Multiple_Hit>:
80013204:	c0 08       	rjmp	80013204 <_handle_TLB_Multiple_Hit>
	...

80013208 <_handle_Bus_Error_Data_Fetch>:
80013208:	c0 08       	rjmp	80013208 <_handle_Bus_Error_Data_Fetch>
	...

8001320c <_handle_Bus_Error_Instruction_Fetch>:
8001320c:	c0 08       	rjmp	8001320c <_handle_Bus_Error_Instruction_Fetch>
	...

80013210 <_handle_NMI>:
80013210:	c0 08       	rjmp	80013210 <_handle_NMI>
	...

80013214 <_handle_Instruction_Address>:
80013214:	c0 08       	rjmp	80013214 <_handle_Instruction_Address>
	...

80013218 <_handle_ITLB_Protection>:
80013218:	c0 08       	rjmp	80013218 <_handle_ITLB_Protection>
	...

8001321c <_handle_Breakpoint>:
8001321c:	c0 08       	rjmp	8001321c <_handle_Breakpoint>
	...

80013220 <_handle_Illegal_Opcode>:
80013220:	c0 08       	rjmp	80013220 <_handle_Illegal_Opcode>
	...

80013224 <_handle_Unimplemented_Instruction>:
80013224:	c0 08       	rjmp	80013224 <_handle_Unimplemented_Instruction>
	...

80013228 <_handle_Privilege_Violation>:
80013228:	c0 08       	rjmp	80013228 <_handle_Privilege_Violation>
	...

8001322c <_handle_Floating_Point>:
8001322c:	c0 08       	rjmp	8001322c <_handle_Floating_Point>
	...

80013230 <_handle_Coprocessor_Absent>:
80013230:	c0 08       	rjmp	80013230 <_handle_Coprocessor_Absent>
	...

80013234 <_handle_Data_Address_Read>:
80013234:	c0 08       	rjmp	80013234 <_handle_Data_Address_Read>
	...

80013238 <_handle_Data_Address_Write>:
80013238:	c0 08       	rjmp	80013238 <_handle_Data_Address_Write>
	...

8001323c <_handle_DTLB_Protection_Read>:
8001323c:	c0 08       	rjmp	8001323c <_handle_DTLB_Protection_Read>
	...

80013240 <_handle_DTLB_Protection_Write>:
80013240:	c0 08       	rjmp	80013240 <_handle_DTLB_Protection_Write>
	...

80013244 <_handle_DTLB_Modified>:
80013244:	c0 08       	rjmp	80013244 <_handle_DTLB_Modified>
	...

80013250 <_handle_ITLB_Miss>:
80013250:	c0 08       	rjmp	80013250 <_handle_ITLB_Miss>
	...

80013260 <_handle_DTLB_Miss_Read>:
80013260:	c0 08       	rjmp	80013260 <_handle_DTLB_Miss_Read>
	...

80013270 <_handle_DTLB_Miss_Write>:
80013270:	c0 08       	rjmp	80013270 <_handle_DTLB_Miss_Write>
	...

80013300 <_handle_Supervisor_Call>:
80013300:	c0 08       	rjmp	80013300 <_handle_Supervisor_Call>
80013302:	d7 03       	nop

80013304 <_int0>:
80013304:	30 0c       	mov	r12,0
80013306:	fe b0 80 0b 	rcall	8000331c <_get_interrupt_handler>
8001330a:	58 0c       	cp.w	r12,0
8001330c:	f8 0f 17 10 	movne	pc,r12
80013310:	d6 03       	rete

80013312 <_int1>:
80013312:	30 1c       	mov	r12,1
80013314:	fe b0 80 04 	rcall	8000331c <_get_interrupt_handler>
80013318:	58 0c       	cp.w	r12,0
8001331a:	f8 0f 17 10 	movne	pc,r12
8001331e:	d6 03       	rete

80013320 <_int2>:
80013320:	30 2c       	mov	r12,2
80013322:	fe b0 7f fd 	rcall	8000331c <_get_interrupt_handler>
80013326:	58 0c       	cp.w	r12,0
80013328:	f8 0f 17 10 	movne	pc,r12
8001332c:	d6 03       	rete

8001332e <_int3>:
8001332e:	30 3c       	mov	r12,3
80013330:	fe b0 7f f6 	rcall	8000331c <_get_interrupt_handler>
80013334:	58 0c       	cp.w	r12,0
80013336:	f8 0f 17 10 	movne	pc,r12
8001333a:	d6 03       	rete
8001333c:	d7 03       	nop
8001333e:	d7 03       	nop
80013340:	d7 03       	nop
80013342:	d7 03       	nop
80013344:	d7 03       	nop
80013346:	d7 03       	nop
80013348:	d7 03       	nop
8001334a:	d7 03       	nop
8001334c:	d7 03       	nop
8001334e:	d7 03       	nop
80013350:	d7 03       	nop
80013352:	d7 03       	nop
80013354:	d7 03       	nop
80013356:	d7 03       	nop
80013358:	d7 03       	nop
8001335a:	d7 03       	nop
8001335c:	d7 03       	nop
8001335e:	d7 03       	nop
80013360:	d7 03       	nop
80013362:	d7 03       	nop
80013364:	d7 03       	nop
80013366:	d7 03       	nop
80013368:	d7 03       	nop
8001336a:	d7 03       	nop
8001336c:	d7 03       	nop
8001336e:	d7 03       	nop
80013370:	d7 03       	nop
80013372:	d7 03       	nop
80013374:	d7 03       	nop
80013376:	d7 03       	nop
80013378:	d7 03       	nop
8001337a:	d7 03       	nop
8001337c:	d7 03       	nop
8001337e:	d7 03       	nop
80013380:	d7 03       	nop
80013382:	d7 03       	nop
80013384:	d7 03       	nop
80013386:	d7 03       	nop
80013388:	d7 03       	nop
8001338a:	d7 03       	nop
8001338c:	d7 03       	nop
8001338e:	d7 03       	nop
80013390:	d7 03       	nop
80013392:	d7 03       	nop
80013394:	d7 03       	nop
80013396:	d7 03       	nop
80013398:	d7 03       	nop
8001339a:	d7 03       	nop
8001339c:	d7 03       	nop
8001339e:	d7 03       	nop
800133a0:	d7 03       	nop
800133a2:	d7 03       	nop
800133a4:	d7 03       	nop
800133a6:	d7 03       	nop
800133a8:	d7 03       	nop
800133aa:	d7 03       	nop
800133ac:	d7 03       	nop
800133ae:	d7 03       	nop
800133b0:	d7 03       	nop
800133b2:	d7 03       	nop
800133b4:	d7 03       	nop
800133b6:	d7 03       	nop
800133b8:	d7 03       	nop
800133ba:	d7 03       	nop
800133bc:	d7 03       	nop
800133be:	d7 03       	nop
800133c0:	d7 03       	nop
800133c2:	d7 03       	nop
800133c4:	d7 03       	nop
800133c6:	d7 03       	nop
800133c8:	d7 03       	nop
800133ca:	d7 03       	nop
800133cc:	d7 03       	nop
800133ce:	d7 03       	nop
800133d0:	d7 03       	nop
800133d2:	d7 03       	nop
800133d4:	d7 03       	nop
800133d6:	d7 03       	nop
800133d8:	d7 03       	nop
800133da:	d7 03       	nop
800133dc:	d7 03       	nop
800133de:	d7 03       	nop
800133e0:	d7 03       	nop
800133e2:	d7 03       	nop
800133e4:	d7 03       	nop
800133e6:	d7 03       	nop
800133e8:	d7 03       	nop
800133ea:	d7 03       	nop
800133ec:	d7 03       	nop
800133ee:	d7 03       	nop
800133f0:	d7 03       	nop
800133f2:	d7 03       	nop
800133f4:	d7 03       	nop
800133f6:	d7 03       	nop
800133f8:	d7 03       	nop
800133fa:	d7 03       	nop
800133fc:	d7 03       	nop
800133fe:	d7 03       	nop
