
ColumbusTest.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000b70  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002c00  80002c00  00003000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000214  80002e00  80002e00  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80003014  80003014  00003414  2**0
                  ALLOC
  6 .data         00000004  00000004  80003018  00003804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  00000008  8000301c  00003808  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000830  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00001807  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000f8b7  00000000  00000000  0000586f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000019aa  00000000  00000000  00015126  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007d03  00000000  00000000  00016ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001448  00000000  00000000  0001e7d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000427f  00000000  00000000  0001fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003153  00000000  00000000  00023e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00f84ac3  00000000  00000000  00026fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00000800  00000000  00000000  00fabab1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f6 60 	sub	pc,pc,-2464

Disassembly of section .text:

80002004 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002004:	fe 68 00 00 	mov	r8,-131072
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12

80002012 <flashc_is_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80002012:	fe 68 00 00 	mov	r8,-131072
80002016:	70 2c       	ld.w	r12,r8[0x8]
}
80002018:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000201c:	5e fc       	retal	r12
8000201e:	d7 03       	nop

80002020 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80002020:	d4 01       	pushm	lr
	while (!flashc_is_ready());
80002022:	f0 1f 00 03 	mcall	8000202c <flashc_default_wait_until_ready+0xc>
80002026:	cf e0       	breq	80002022 <flashc_default_wait_until_ready+0x2>
}
80002028:	d8 02       	popm	pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 12       	sub	r2,1

80002030 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80002030:	eb cd 40 c0 	pushm	r6-r7,lr
80002034:	18 96       	mov	r6,r12
80002036:	16 97       	mov	r7,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80002038:	48 e8       	lddpc	r8,80002070 <flashc_issue_command+0x40>
8000203a:	70 08       	ld.w	r8,r8[0x0]
8000203c:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000203e:	fe 68 00 00 	mov	r8,-131072
80002042:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80002044:	f1 d6 d0 06 	bfins	r8,r6,0x0,0x6
	if (page_number >= 0) {
80002048:	58 07       	cp.w	r7,0
8000204a:	c0 35       	brlt	80002050 <flashc_issue_command+0x20>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000204c:	f1 d7 d1 10 	bfins	r8,r7,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80002050:	3a 59       	mov	r9,-91
80002052:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80002056:	fe 69 00 00 	mov	r9,-131072
8000205a:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000205c:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8000205e:	e2 19 00 0c 	andl	r9,0xc,COH
80002062:	48 58       	lddpc	r8,80002074 <flashc_issue_command+0x44>
80002064:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80002066:	48 38       	lddpc	r8,80002070 <flashc_issue_command+0x40>
80002068:	70 08       	ld.w	r8,r8[0x0]
8000206a:	5d 18       	icall	r8
}
8000206c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002070:	00 00       	add	r0,r0
80002072:	00 04       	add	r4,r0
80002074:	00 00       	add	r0,r0
80002076:	00 08       	add	r8,r0

80002078 <flashc_set_flash_waitstate_and_readmode>:
}


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002078:	eb cd 40 80 	pushm	r7,lr
8000207c:	18 97       	mov	r7,r12
	#define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
	#define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
	// These defines are missing from or wrong in the toolchain header files uc3cxxx.h
	// Put a Bugzilla

	if (cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ) { // > 33MHz
8000207e:	e0 68 8a 40 	mov	r8,35392
80002082:	ea 18 01 f7 	orh	r8,0x1f7
80002086:	10 3c       	cp.w	r12,r8
80002088:	e0 88 00 18 	brls	800020b8 <flashc_set_flash_waitstate_and_readmode+0x40>
		// Set a wait-state
		flashc_set_wait_state(1);
8000208c:	30 1c       	mov	r12,1
8000208e:	f0 1f 00 10 	mcall	800020cc <flashc_set_flash_waitstate_and_readmode+0x54>
		if (cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) {   // <= 66MHz and >33Mhz
80002092:	e0 68 14 80 	mov	r8,5248
80002096:	ea 18 03 ef 	orh	r8,0x3ef
8000209a:	10 37       	cp.w	r7,r8
8000209c:	e0 8b 00 08 	brhi	800020ac <flashc_set_flash_waitstate_and_readmode+0x34>
			// Disable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800020a0:	3f fb       	mov	r11,-1
800020a2:	31 1c       	mov	r12,17
800020a4:	f0 1f 00 0b 	mcall	800020d0 <flashc_set_flash_waitstate_and_readmode+0x58>
800020a8:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else { // > 66Mhz
			// Enable the high-speed read mode.
			flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);
800020ac:	3f fb       	mov	r11,-1
800020ae:	31 0c       	mov	r12,16
800020b0:	f0 1f 00 08 	mcall	800020d0 <flashc_set_flash_waitstate_and_readmode+0x58>
800020b4:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	} else { // <= 33 MHz
		// Disable wait-state
		flashc_set_wait_state(0);
800020b8:	30 0c       	mov	r12,0
800020ba:	f0 1f 00 05 	mcall	800020cc <flashc_set_flash_waitstate_and_readmode+0x54>
		// Disable the high-speed read mode.
		flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800020be:	3f fb       	mov	r11,-1
800020c0:	31 1c       	mov	r12,17
800020c2:	f0 1f 00 04 	mcall	800020d0 <flashc_set_flash_waitstate_and_readmode+0x58>
800020c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800020ca:	00 00       	add	r0,r0
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	20 04       	sub	r4,0
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	20 30       	sub	r0,3

800020d4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d4:	f8 08 16 05 	lsr	r8,r12,0x5
800020d8:	a9 78       	lsl	r8,0x9
800020da:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
800020de:	58 7b       	cp.w	r11,7
800020e0:	e0 8b 00 05 	brhi	800020ea <gpio_enable_module_pin+0x16>
800020e4:	4a 09       	lddpc	r9,80002164 <gpio_enable_module_pin+0x90>
800020e6:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800020ea:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020ec:	30 19       	mov	r9,1
800020ee:	f2 0c 09 49 	lsl	r9,r9,r12
800020f2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020f4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800020f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800020f8:	c3 18       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020fa:	30 19       	mov	r9,1
800020fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002100:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002102:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002104:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002106:	c2 a8       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002108:	30 19       	mov	r9,1
8000210a:	f2 0c 09 49 	lsl	r9,r9,r12
8000210e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002110:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002112:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002114:	c2 38       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002116:	30 19       	mov	r9,1
80002118:	f2 0c 09 49 	lsl	r9,r9,r12
8000211c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002120:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002122:	c1 c8       	rjmp	8000215a <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002124:	30 19       	mov	r9,1
80002126:	f2 0c 09 49 	lsl	r9,r9,r12
8000212a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000212c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000212e:	91 d9       	st.w	r8[0x34],r9
		break;
80002130:	c1 58       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002132:	30 19       	mov	r9,1
80002134:	f2 0c 09 49 	lsl	r9,r9,r12
80002138:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000213a:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000213c:	91 d9       	st.w	r8[0x34],r9
		break;
8000213e:	c0 e8       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002140:	30 19       	mov	r9,1
80002142:	f2 0c 09 49 	lsl	r9,r9,r12
80002146:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002148:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000214a:	91 d9       	st.w	r8[0x34],r9
		break;
8000214c:	c0 78       	rjmp	8000215a <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002156:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002158:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000215a:	30 19       	mov	r9,1
8000215c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002160:	91 2c       	st.w	r8[0x8],r12
80002162:	5e fd       	retal	0
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	2e 00       	sub	r0,-32

80002168 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002168:	d4 21       	pushm	r4-r7,lr
8000216a:	18 97       	mov	r7,r12
8000216c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000216e:	58 0b       	cp.w	r11,0
80002170:	c0 31       	brne	80002176 <gpio_enable_module+0xe>
80002172:	30 05       	mov	r5,0
80002174:	c0 d8       	rjmp	8000218e <gpio_enable_module+0x26>
80002176:	30 05       	mov	r5,0
80002178:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000217a:	6e 1b       	ld.w	r11,r7[0x4]
8000217c:	6e 0c       	ld.w	r12,r7[0x0]
8000217e:	f0 1f 00 06 	mcall	80002194 <gpio_enable_module+0x2c>
80002182:	18 45       	or	r5,r12
		gpiomap++;
80002184:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002186:	2f f6       	sub	r6,-1
80002188:	0c 34       	cp.w	r4,r6
8000218a:	fe 9b ff f8 	brhi	8000217a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000218e:	0a 9c       	mov	r12,r5
80002190:	d8 22       	popm	r4-r7,pc
80002192:	00 00       	add	r0,r0
80002194:	80 00       	ld.sh	r0,r0[0x0]
80002196:	20 d4       	sub	r4,13

80002198 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002198:	f8 08 16 05 	lsr	r8,r12,0x5
8000219c:	a9 78       	lsl	r8,0x9
8000219e:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800021a2:	30 19       	mov	r9,1
800021a4:	f2 0c 09 4c 	lsl	r12,r9,r12
800021a8:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800021ac:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800021b0:	91 1c       	st.w	r8[0x4],r12
}
800021b2:	5e fc       	retal	r12

800021b4 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800021b4:	fe 78 00 00 	mov	r8,-65536
800021b8:	e0 69 00 83 	mov	r9,131
800021bc:	f2 0c 01 0c 	sub	r12,r9,r12
800021c0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800021c4:	f2 ca ff c0 	sub	r10,r9,-64
800021c8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021cc:	58 08       	cp.w	r8,0
800021ce:	c0 21       	brne	800021d2 <_get_interrupt_handler+0x1e>
800021d0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800021d2:	f0 08 12 00 	clz	r8,r8
800021d6:	48 5a       	lddpc	r10,800021e8 <_get_interrupt_handler+0x34>
800021d8:	f4 09 00 39 	add	r9,r10,r9<<0x3
800021dc:	f0 08 11 1f 	rsub	r8,r8,31
800021e0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021e2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021e6:	5e fc       	retal	r12
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	2e 20       	sub	r0,-30

800021ec <pm_set_mclk_source>:
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
800021ec:	e1 b9 00 00 	mfsr	r9,0x0
800021f0:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
800021f2:	fe 78 04 00 	mov	r8,-64512
800021f6:	fc 1a aa 00 	movh	r10,0xaa00
800021fa:	f1 4a 00 58 	st.w	r8[88],r10
  AVR32_PM.mcctrl = src;
800021fe:	91 0c       	st.w	r8[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80002200:	12 98       	mov	r8,r9
80002202:	e6 18 00 01 	andh	r8,0x1,COH
80002206:	c0 21       	brne	8000220a <pm_set_mclk_source+0x1e>
80002208:	d5 03       	csrf	0x10

  return PASS;
}
8000220a:	5e fd       	retal	0

8000220c <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
8000220c:	eb cd 40 c0 	pushm	r6-r7,lr
80002210:	16 97       	mov	r7,r11
80002212:	14 96       	mov	r6,r10
#else
// Implementation for UC3C, UC3L parts.
  #if AVR32_PM_VERSION_RESETVALUE < 0x400
    return PCL_NOT_SUPPORTED;
  #else
  if(PCL_OSC0 == osc)
80002214:	58 0c       	cp.w	r12,0
80002216:	c0 50       	breq	80002220 <pcl_switch_to_osc+0x14>
80002218:	fe 7c d8 f0 	mov	r12,-10000
8000221c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  {
    // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
    scif_configure_osc_crystalmode(SCIF_OSC0, fcrystal);
80002220:	30 0c       	mov	r12,0
80002222:	f0 1f 00 08 	mcall	80002240 <pcl_switch_to_osc+0x34>
    // Enable the OSC0
    scif_enable_osc(SCIF_OSC0, startup, true);
80002226:	30 1a       	mov	r10,1
80002228:	0c 9b       	mov	r11,r6
8000222a:	30 0c       	mov	r12,0
8000222c:	f0 1f 00 06 	mcall	80002244 <pcl_switch_to_osc+0x38>
    // Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
#if UC3L || UC3D
    flashcdw_set_flash_waitstate_and_readmode(fcrystal);
#elif UC3C
    flashc_set_flash_waitstate_and_readmode(fcrystal);
80002230:	0e 9c       	mov	r12,r7
80002232:	f0 1f 00 06 	mcall	80002248 <pcl_switch_to_osc+0x3c>
#endif
    // Set the main clock source as being OSC0.
    pm_set_mclk_source(PM_CLK_SRC_OSC0);
80002236:	30 1c       	mov	r12,1
80002238:	f0 1f 00 05 	mcall	8000224c <pcl_switch_to_osc+0x40>
8000223c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	26 a4       	sub	r4,106
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	26 30       	sub	r0,99
80002248:	80 00       	ld.sh	r0,r0[0x0]
8000224a:	20 78       	sub	r8,7
8000224c:	80 00       	ld.sh	r0,r0[0x0]
8000224e:	21 ec       	sub	r12,30

80002250 <pwm_write_protect_sw_unlock>:
}

int pwm_write_protect_sw_unlock(int group)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  switch(group)
80002250:	58 2c       	cp.w	r12,2
80002252:	c2 80       	breq	800022a2 <pwm_write_protect_sw_unlock+0x52>
80002254:	e0 89 00 07 	brgt	80002262 <pwm_write_protect_sw_unlock+0x12>
80002258:	58 0c       	cp.w	r12,0
8000225a:	c0 a0       	breq	8000226e <pwm_write_protect_sw_unlock+0x1e>
8000225c:	58 1c       	cp.w	r12,1
8000225e:	c5 61       	brne	8000230a <pwm_write_protect_sw_unlock+0xba>
80002260:	c1 48       	rjmp	80002288 <pwm_write_protect_sw_unlock+0x38>
80002262:	58 4c       	cp.w	r12,4
80002264:	c3 90       	breq	800022d6 <pwm_write_protect_sw_unlock+0x86>
80002266:	c2 b5       	brlt	800022bc <pwm_write_protect_sw_unlock+0x6c>
80002268:	58 5c       	cp.w	r12,5
8000226a:	c5 01       	brne	8000230a <pwm_write_protect_sw_unlock+0xba>
8000226c:	c4 28       	rjmp	800022f0 <pwm_write_protect_sw_unlock+0xa0>
  {
    case 0:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8000226e:	fe 78 4c 00 	mov	r8,-46080
80002272:	e0 69 4d 04 	mov	r9,19716
80002276:	ea 19 50 57 	orh	r9,0x5057
8000227a:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
8000227e:	f0 f8 00 e8 	ld.w	r8,r8[232]
80002282:	58 08       	cp.w	r8,0
80002284:	c4 30       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
80002286:	c4 18       	rjmp	80002308 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 1:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80002288:	fe 78 4c 00 	mov	r8,-46080
8000228c:	e0 69 4d 08 	mov	r9,19720
80002290:	ea 19 50 57 	orh	r9,0x5057
80002294:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80002298:	f0 f8 00 e8 	ld.w	r8,r8[232]
8000229c:	58 08       	cp.w	r8,0
8000229e:	c3 60       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
800022a0:	c3 48       	rjmp	80002308 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 2:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800022a2:	fe 78 4c 00 	mov	r8,-46080
800022a6:	e0 69 4d 10 	mov	r9,19728
800022aa:	ea 19 50 57 	orh	r9,0x5057
800022ae:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800022b2:	f0 f8 00 e8 	ld.w	r8,r8[232]
800022b6:	58 08       	cp.w	r8,0
800022b8:	c2 90       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
800022ba:	c2 78       	rjmp	80002308 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 3:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800022bc:	fe 78 4c 00 	mov	r8,-46080
800022c0:	e0 69 4d 20 	mov	r9,19744
800022c4:	ea 19 50 57 	orh	r9,0x5057
800022c8:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800022cc:	f0 f8 00 e8 	ld.w	r8,r8[232]
800022d0:	58 08       	cp.w	r8,0
800022d2:	c1 c0       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
800022d4:	c1 a8       	rjmp	80002308 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 4:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800022d6:	fe 78 4c 00 	mov	r8,-46080
800022da:	e0 69 4d 40 	mov	r9,19776
800022de:	ea 19 50 57 	orh	r9,0x5057
800022e2:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG4_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
800022e6:	f0 f8 00 e8 	ld.w	r8,r8[232]
800022ea:	58 08       	cp.w	r8,0
800022ec:	c0 f0       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
800022ee:	c0 d8       	rjmp	80002308 <pwm_write_protect_sw_unlock+0xb8>
      break;
    case 5:
      pwm->wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
800022f0:	fe 78 4c 00 	mov	r8,-46080
800022f4:	e0 69 4d 80 	mov	r9,19840
800022f8:	ea 19 50 57 	orh	r9,0x5057
800022fc:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG5_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);
      if (pwm->wpsr != 0) return PWM_FAILURE;
80002300:	f0 f8 00 e8 	ld.w	r8,r8[232]
80002304:	58 08       	cp.w	r8,0
80002306:	c0 20       	breq	8000230a <pwm_write_protect_sw_unlock+0xba>
80002308:	5e fe       	retal	-1
8000230a:	5e fd       	retal	0

8000230c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000230c:	58 0b       	cp.w	r11,0
8000230e:	c1 d0       	breq	80002348 <pwm_channel_init+0x3c>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002310:	58 4c       	cp.w	r12,4
80002312:	e0 8b 00 1b 	brhi	80002348 <pwm_channel_init+0x3c>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002316:	76 0a       	ld.w	r10,r11[0x0]
80002318:	fe 78 4c 00 	mov	r8,-46080
8000231c:	f8 c9 ff f0 	sub	r9,r12,-16
80002320:	a5 79       	lsl	r9,0x5
80002322:	f0 09 00 09 	add	r9,r8,r9
80002326:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002328:	76 19       	ld.w	r9,r11[0x4]
8000232a:	a5 7c       	lsl	r12,0x5
8000232c:	f0 0c 00 0c 	add	r12,r8,r12
80002330:	f8 c8 fd fc 	sub	r8,r12,-516
80002334:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002336:	76 39       	ld.w	r9,r11[0xc]
80002338:	f8 c8 fd f4 	sub	r8,r12,-524
8000233c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].dt= pwm_channel->dt; // Channel period.
8000233e:	76 68       	ld.w	r8,r11[0x18]
80002340:	f8 cc fd e8 	sub	r12,r12,-536
80002344:	99 08       	st.w	r12[0x0],r8
80002346:	5e fd       	retal	0
  return PWM_SUCCESS;
80002348:	5e ff       	retal	1

8000234a <pwm_update_period_value>:
  return PWM_SUCCESS;
}

int pwm_update_period_value(unsigned int value)
{
  AVR32_PWM.scup = value;
8000234a:	fe 78 4c 00 	mov	r8,-46080
8000234e:	91 bc       	st.w	r8[0x2c],r12
  return PWM_SUCCESS;
}
80002350:	5e fd       	retal	0
80002352:	d7 03       	nop

80002354 <pwm_init>:
  else
    return PWM_NO_WRITE_PROTECT_VIOLATION;
}

int pwm_init(pwm_opt_t *opt)
{
80002354:	eb cd 40 c0 	pushm	r6-r7,lr
80002358:	18 97       	mov	r7,r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000235a:	e1 b6 00 00 	mfsr	r6,0x0

  if (opt == 0 ) // Null pointer.
8000235e:	58 0c       	cp.w	r12,0
80002360:	c0 31       	brne	80002366 <pwm_init+0x12>
80002362:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80002366:	ee 16 00 01 	eorh	r6,0x1
8000236a:	ed d6 c2 01 	bfextu	r6,r6,0x10,0x1
    return PWM_INVALID_INPUT;

  // First Unlock Register
  pwm_write_protect_sw_unlock(0);
8000236e:	30 0c       	mov	r12,0
80002370:	f0 1f 00 37 	mcall	8000244c <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(1);
80002374:	30 1c       	mov	r12,1
80002376:	f0 1f 00 36 	mcall	8000244c <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(2);
8000237a:	30 2c       	mov	r12,2
8000237c:	f0 1f 00 34 	mcall	8000244c <pwm_init+0xf8>
  pwm_write_protect_sw_unlock(3);
80002380:	30 3c       	mov	r12,3
80002382:	f0 1f 00 33 	mcall	8000244c <pwm_init+0xf8>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002386:	58 06       	cp.w	r6,0
80002388:	c0 20       	breq	8000238c <pwm_init+0x38>
8000238a:	d3 03       	ssrf	0x10
  pwm->idr1 = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_CHID0_OFFSET;
8000238c:	31 f9       	mov	r9,31
8000238e:	fe 78 4c 00 	mov	r8,-46080
80002392:	91 59       	st.w	r8[0x14],r9
  if (opt->fault_detection_activated)
80002394:	ef 39 00 14 	ld.ub	r9,r7[20]
80002398:	30 08       	mov	r8,0
8000239a:	f0 09 18 00 	cp.b	r9,r8
8000239e:	c0 70       	breq	800023ac <pwm_init+0x58>
    pwm->idr1 |= ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR1_FCHID0_OFFSET;
800023a0:	fe 78 4c 00 	mov	r8,-46080
800023a4:	70 59       	ld.w	r9,r8[0x14]
800023a6:	ea 19 00 1f 	orh	r9,0x1f
800023aa:	91 59       	st.w	r8[0x14],r9
  pwm->isr1;
800023ac:	fe 78 4c 00 	mov	r8,-46080
800023b0:	70 78       	ld.w	r8,r8[0x1c]
  // Check if synchronous channel ...
  if (opt->sync_channel_activated)
800023b2:	ef 39 00 15 	ld.ub	r9,r7[21]
800023b6:	30 08       	mov	r8,0
800023b8:	f0 09 18 00 	cp.b	r9,r8
800023bc:	c1 40       	breq	800023e4 <pwm_init+0x90>
  {
    pwm->idr2 = (1 << AVR32_PWM_IDR2_UNRE_OFFSET) | (1 << AVR32_PWM_IDR2_WRDY_OFFSET);
800023be:	30 99       	mov	r9,9
800023c0:	fe 78 4c 00 	mov	r8,-46080
800023c4:	91 e9       	st.w	r8[0x38],r9
    if (opt->sync_update_channel_mode==PWM_SYNC_UPDATE_AUTO_WRITE_AUTO_UPDATE)
800023c6:	ef 39 00 16 	ld.ub	r9,r7[22]
800023ca:	30 28       	mov	r8,2
800023cc:	f0 09 18 00 	cp.b	r9,r8
800023d0:	c0 71       	brne	800023de <pwm_init+0x8a>
    pwm->idr2 |= (1 << AVR32_PWM_IDR2_ENDTX_OFFSET) | (1 << AVR32_PWM_IDR2_TXBUFE_OFFSET);
800023d2:	fe 78 4c 00 	mov	r8,-46080
800023d6:	70 e9       	ld.w	r9,r8[0x38]
800023d8:	e8 19 00 06 	orl	r9,0x6
800023dc:	91 e9       	st.w	r8[0x38],r9
    pwm->isr2;
800023de:	fe 78 4c 00 	mov	r8,-46080
800023e2:	71 08       	ld.w	r8,r8[0x40]
  }
  if (global_interrupt_enabled) Enable_global_interrupt();
800023e4:	58 06       	cp.w	r6,0
800023e6:	c0 20       	breq	800023ea <pwm_init+0x96>
800023e8:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->clk =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800023ea:	6e 08       	ld.w	r8,r7[0x0]
800023ec:	6e 39       	ld.w	r9,r7[0xc]
800023ee:	a9 69       	lsl	r9,0x8
800023f0:	f3 e8 11 09 	or	r9,r9,r8<<0x10
800023f4:	6e 18       	ld.w	r8,r7[0x4]
800023f6:	10 49       	or	r9,r8
800023f8:	6e 28       	ld.w	r8,r7[0x8]
800023fa:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800023fe:	6e 48       	ld.w	r8,r7[0x10]
80002400:	f3 e8 11 f9 	or	r9,r9,r8<<0x1f
    pwm->isr2;
  }
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->clk =
80002404:	fe 78 4c 00 	mov	r8,-46080
80002408:	91 09       	st.w	r8[0x0],r9
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET) |
    ((opt->cksel)<<AVR32_PWM_CLKSEL_OFFSET)
    ;

  // Set PWM Sync register
  pwm->SCM.updm = opt->sync_update_channel_mode;
8000240a:	ef 3a 00 16 	ld.ub	r10,r7[22]
8000240e:	70 89       	ld.w	r9,r8[0x20]
80002410:	f3 da d2 02 	bfins	r9,r10,0x10,0x2
80002414:	91 89       	st.w	r8[0x20],r9
  int i;
  for (i=0;i<PWM_OOV_LINES;i++)
  {
    pwm->scm     |= ((opt->sync_channel_select[i])<<(AVR32_PWM_SCM_SYNC0_OFFSET+i));
80002416:	70 89       	ld.w	r9,r8[0x20]
80002418:	ef 3a 00 17 	ld.ub	r10,r7[23]
8000241c:	f5 e9 10 09 	or	r9,r10,r9
80002420:	91 89       	st.w	r8[0x20],r9
80002422:	70 89       	ld.w	r9,r8[0x20]
80002424:	ef 3a 00 18 	ld.ub	r10,r7[24]
80002428:	f3 ea 10 19 	or	r9,r9,r10<<0x1
8000242c:	91 89       	st.w	r8[0x20],r9
8000242e:	70 89       	ld.w	r9,r8[0x20]
80002430:	ef 3a 00 19 	ld.ub	r10,r7[25]
80002434:	f3 ea 10 29 	or	r9,r9,r10<<0x2
80002438:	91 89       	st.w	r8[0x20],r9
8000243a:	70 89       	ld.w	r9,r8[0x20]
8000243c:	ef 3a 00 1a 	ld.ub	r10,r7[26]
80002440:	f3 ea 10 39 	or	r9,r9,r10<<0x3
80002444:	91 89       	st.w	r8[0x20],r9
80002446:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000244a:	00 00       	add	r0,r0
8000244c:	80 00       	ld.sh	r0,r0[0x0]
8000244e:	22 50       	sub	r0,37

80002450 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80002450:	e0 78 86 a0 	mov	r8,100000
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002454:	fe 7a 08 00 	mov	r10,-63488
80002458:	c0 48       	rjmp	80002460 <scif_pclksr_statushigh_wait+0x10>
  {
    if(--timeout == 0)
8000245a:	20 18       	sub	r8,1
8000245c:	c0 21       	brne	80002460 <scif_pclksr_statushigh_wait+0x10>
8000245e:	5e fe       	retal	-1
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002460:	74 59       	ld.w	r9,r10[0x14]
80002462:	f9 e9 00 09 	and	r9,r12,r9
80002466:	cf a0       	breq	8000245a <scif_pclksr_statushigh_wait+0xa>
80002468:	5e fd       	retal	0

8000246a <scif_wait_for_pll_locked>:
}

long int scif_wait_for_pll_locked(scif_pll_t pll)
{

  if (pll == SCIF_PLL0)
8000246a:	58 0c       	cp.w	r12,0
8000246c:	c0 81       	brne	8000247c <scif_wait_for_pll_locked+0x12>
  {
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
8000246e:	fe 79 08 00 	mov	r9,-63488
80002472:	72 58       	ld.w	r8,r9[0x14]
80002474:	e2 18 00 10 	andl	r8,0x10,COH
80002478:	cf d0       	breq	80002472 <scif_wait_for_pll_locked+0x8>
8000247a:	c0 78       	rjmp	80002488 <scif_wait_for_pll_locked+0x1e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
8000247c:	fe 79 08 00 	mov	r9,-63488
80002480:	72 58       	ld.w	r8,r9[0x14]
80002482:	e2 18 00 20 	andl	r8,0x20,COH
80002486:	cf d0       	breq	80002480 <scif_wait_for_pll_locked+0x16>
  }

  return PASS;
}
80002488:	5e fd       	retal	0

8000248a <scif_stop_gclk>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
8000248a:	fe 78 08 00 	mov	r8,-63488
8000248e:	f8 c9 ff e7 	sub	r9,r12,-25
80002492:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80002496:	a1 ca       	cbr	r10,0x0
80002498:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000249c:	e0 78 86 a0 	mov	r8,100000

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024a0:	fe 7a 08 00 	mov	r10,-63488
800024a4:	12 9c       	mov	r12,r9
800024a6:	c0 48       	rjmp	800024ae <scif_stop_gclk+0x24>
  {
    if(--timeout == 0)
800024a8:	20 18       	sub	r8,1
800024aa:	c0 21       	brne	800024ae <scif_stop_gclk+0x24>
800024ac:	5e fe       	retal	-1

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024ae:	f4 0c 03 29 	ld.w	r9,r10[r12<<0x2]
800024b2:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800024b6:	cf 91       	brne	800024a8 <scif_stop_gclk+0x1e>
800024b8:	5e fd       	retal	0
800024ba:	d7 03       	nop

800024bc <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
800024bc:	d4 21       	pushm	r4-r7,lr
800024be:	18 97       	mov	r7,r12
800024c0:	16 95       	mov	r5,r11
800024c2:	14 96       	mov	r6,r10
  bool restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
800024c4:	a1 99       	lsr	r9,0x1
800024c6:	f2 c4 00 01 	sub	r4,r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024ca:	f8 c9 ff e7 	sub	r9,r12,-25
800024ce:	fe 78 08 00 	mov	r8,-63488
800024d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800024d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800024da:	c0 50       	breq	800024e4 <scif_gc_setup+0x28>
  {
    restart_gc = true;
    if(scif_stop_gclk(gclk) < 0)
800024dc:	f0 1f 00 18 	mcall	8000253c <scif_gc_setup+0x80>
800024e0:	c1 44       	brge	80002508 <scif_gc_setup+0x4c>
800024e2:	dc 2a       	popm	r4-r7,pc,r12=-1
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800024e4:	a1 76       	lsl	r6,0x1
800024e6:	e2 16 00 02 	andl	r6,0x2,COH
800024ea:	a9 65       	lsl	r5,0x8
800024ec:	e2 15 0f 00 	andl	r5,0xf00,COH
800024f0:	0a 46       	or	r6,r5
800024f2:	b1 64       	lsl	r4,0x10
800024f4:	e6 14 00 ff 	andh	r4,0xff,COH
800024f8:	ed e4 10 04 	or	r4,r6,r4
800024fc:	2e 77       	sub	r7,-25
800024fe:	fe 78 08 00 	mov	r8,-63488
80002502:	f0 07 09 24 	st.w	r8[r7<<0x2],r4
80002506:	d8 2a       	popm	r4-r7,pc,r12=0
80002508:	ec 09 15 01 	lsl	r9,r6,0x1
8000250c:	e2 19 00 02 	andl	r9,0x2,COH
80002510:	ea 08 15 08 	lsl	r8,r5,0x8
80002514:	e2 18 0f 00 	andl	r8,0xf00,COH
80002518:	10 49       	or	r9,r8
8000251a:	e8 08 15 10 	lsl	r8,r4,0x10
8000251e:	e6 18 00 ff 	andh	r8,0xff,COH
80002522:	10 49       	or	r9,r8
80002524:	fe 78 08 00 	mov	r8,-63488
80002528:	2e 77       	sub	r7,-25
8000252a:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
8000252e:	f0 07 03 29 	ld.w	r9,r8[r7<<0x2]
80002532:	a1 a9       	sbr	r9,0x0
80002534:	f0 07 09 29 	st.w	r8[r7<<0x2],r9
80002538:	d8 2a       	popm	r4-r7,pc,r12=0
8000253a:	00 00       	add	r0,r0
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	24 8a       	sub	r10,72

80002540 <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
80002540:	f8 c9 ff e7 	sub	r9,r12,-25
80002544:	fe 78 08 00 	mov	r8,-63488
80002548:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000254c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002550:	c0 91       	brne	80002562 <scif_gc_enable+0x22>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
80002552:	fe 78 08 00 	mov	r8,-63488
80002556:	12 9c       	mov	r12,r9
80002558:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000255c:	a1 a9       	sbr	r9,0x0
8000255e:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;

}
80002562:	5e fd       	retal	0

80002564 <scif_pll_enable>:

  return PASS;
}

long int scif_pll_enable(scif_pll_t pll)
{
80002564:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80002566:	fa c8 ff f8 	sub	r8,sp,-8
8000256a:	f0 0c 00 29 	add	r9,r8,r12<<0x2
8000256e:	fe 78 08 00 	mov	r8,-63488
80002572:	2f 9c       	sub	r12,-7
80002574:	f0 0c 03 2a 	ld.w	r10,r8[r12<<0x2]
    // Modify Configuration
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80002578:	30 1b       	mov	r11,1
8000257a:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000257e:	f3 4a ff f8 	st.w	r9[-8],r10
    AVR32_ENTER_CRITICAL_REGION( );
80002582:	e1 ba 00 00 	mfsr	r10,0x0
80002586:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
80002588:	f8 0b 15 02 	lsl	r11,r12,0x2
8000258c:	ea 1b aa 00 	orh	r11,0xaa00
80002590:	91 6b       	st.w	r8[0x18],r11
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80002592:	f2 f9 ff f8 	ld.w	r9,r9[-8]
80002596:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
    AVR32_LEAVE_CRITICAL_REGION( );
8000259a:	14 98       	mov	r8,r10
8000259c:	e6 18 00 01 	andh	r8,0x1,COH
800025a0:	c0 21       	brne	800025a4 <scif_pll_enable+0x40>
800025a2:	d5 03       	csrf	0x10

  return PASS;
}
800025a4:	2f ed       	sub	sp,-8
800025a6:	5e fd       	retal	0

800025a8 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t *opt)
{
800025a8:	eb cd 40 c0 	pushm	r6-r7,lr
800025ac:	20 2d       	sub	sp,8

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800025ae:	fa c9 ff f8 	sub	r9,sp,-8
800025b2:	f2 0c 00 28 	add	r8,r9,r12<<0x2
800025b6:	fe 79 08 00 	mov	r9,-63488
800025ba:	2f 9c       	sub	r12,-7
800025bc:	f2 0c 03 2a 	ld.w	r10,r9[r12<<0x2]
800025c0:	f1 4a ff f8 	st.w	r8[-8],r10
  // Modify Configuration
  u_avr32_scif_pll.PLL[pll].pllosc  = opt->osc;
800025c4:	f7 3e 00 10 	ld.ub	lr,r11[16]
800025c8:	f5 de d0 22 	bfins	r10,lr,0x1,0x2
800025cc:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt->pll_freq | (opt->pll_div2 << 1) | (opt->pll_wbwdisable << 2);
800025d0:	17 a7       	ld.ub	r7,r11[0x2]
800025d2:	17 9e       	ld.ub	lr,r11[0x1]
800025d4:	a3 6e       	lsl	lr,0x2
800025d6:	fd e7 10 1e 	or	lr,lr,r7<<0x1
800025da:	17 87       	ld.ub	r7,r11[0x0]
800025dc:	0e 96       	mov	r6,r7
800025de:	0e 4e       	or	lr,r7
800025e0:	f5 de d0 63 	bfins	r10,lr,0x3,0x3
800025e4:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].plldiv  = opt->div;
800025e8:	76 2e       	ld.w	lr,r11[0x8]
800025ea:	f5 de d1 04 	bfins	r10,lr,0x8,0x4
800025ee:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt->mul;
800025f2:	76 1e       	ld.w	lr,r11[0x4]
800025f4:	f5 de d2 04 	bfins	r10,lr,0x10,0x4
800025f8:	f1 4a ff f8 	st.w	r8[-8],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt->lockcount;
800025fc:	76 3b       	ld.w	r11,r11[0xc]
800025fe:	f5 db d3 06 	bfins	r10,r11,0x18,0x6
80002602:	f1 4a ff f8 	st.w	r8[-8],r10
  AVR32_ENTER_CRITICAL_REGION( );
80002606:	e1 ba 00 00 	mfsr	r10,0x0
8000260a:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll);
8000260c:	f8 0b 15 02 	lsl	r11,r12,0x2
80002610:	ea 1b aa 00 	orh	r11,0xaa00
80002614:	93 6b       	st.w	r9[0x18],r11
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80002616:	f0 f8 ff f8 	ld.w	r8,r8[-8]
8000261a:	f2 0c 09 28 	st.w	r9[r12<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
8000261e:	14 98       	mov	r8,r10
80002620:	e6 18 00 01 	andh	r8,0x1,COH
80002624:	c0 21       	brne	80002628 <scif_pll_setup+0x80>
80002626:	d5 03       	csrf	0x10

  return PASS;
}
80002628:	2f ed       	sub	sp,-8
8000262a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000262e:	d7 03       	nop

80002630 <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80002630:	eb cd 40 80 	pushm	r7,lr
80002634:	20 2d       	sub	sp,8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80002636:	fa c8 ff f8 	sub	r8,sp,-8
8000263a:	f0 0c 00 2e 	add	lr,r8,r12<<0x2
8000263e:	fe 78 08 00 	mov	r8,-63488
80002642:	f8 c9 ff f7 	sub	r9,r12,-9
80002646:	f0 09 03 27 	ld.w	r7,r8[r9<<0x2]
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
8000264a:	ef db d1 04 	bfins	r7,r11,0x8,0x4
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
8000264e:	30 1b       	mov	r11,1
80002650:	ef db d2 01 	bfins	r7,r11,0x10,0x1
80002654:	fd 47 ff f8 	st.w	lr[-8],r7
  AVR32_ENTER_CRITICAL_REGION( );
80002658:	e1 bb 00 00 	mfsr	r11,0x0
8000265c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
8000265e:	f2 07 15 02 	lsl	r7,r9,0x2
80002662:	ea 17 aa 00 	orh	r7,0xaa00
80002666:	91 67       	st.w	r8[0x18],r7
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80002668:	fc fe ff f8 	ld.w	lr,lr[-8]
8000266c:	f0 09 09 2e 	st.w	r8[r9<<0x2],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80002670:	16 98       	mov	r8,r11
80002672:	e6 18 00 01 	andh	r8,0x1,COH
80002676:	c0 21       	brne	8000267a <scif_enable_osc+0x4a>
80002678:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
8000267a:	58 0a       	cp.w	r10,0
8000267c:	c0 e0       	breq	80002698 <scif_enable_osc+0x68>
  {
	  if (osc == SCIF_OSC0) {
8000267e:	58 0c       	cp.w	r12,0
80002680:	c0 61       	brne	8000268c <scif_enable_osc+0x5c>
		  // Wait until OSC0 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80002682:	30 1c       	mov	r12,1
80002684:	f0 1f 00 07 	mcall	800026a0 <scif_enable_osc+0x70>
80002688:	c0 80       	breq	80002698 <scif_enable_osc+0x68>
8000268a:	c0 58       	rjmp	80002694 <scif_enable_osc+0x64>
			return -1;
	  } else {
		  // Wait until OSC1 is stable and ready to be used.
		  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC1RDY_MASK))
8000268c:	30 2c       	mov	r12,2
8000268e:	f0 1f 00 05 	mcall	800026a0 <scif_enable_osc+0x70>
80002692:	c0 30       	breq	80002698 <scif_enable_osc+0x68>
80002694:	3f fc       	mov	r12,-1
80002696:	c0 28       	rjmp	8000269a <scif_enable_osc+0x6a>
80002698:	30 0c       	mov	r12,0
			return -1;
	  }
  }

  return PASS;
}
8000269a:	2f ed       	sub	sp,-8
8000269c:	e3 cd 80 80 	ldm	sp++,r7,pc
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	24 50       	sub	r0,69

800026a4 <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  if (osc == SCIF_OSC0)
800026a4:	58 0c       	cp.w	r12,0
800026a6:	c3 41       	brne	8000270e <scif_configure_osc_crystalmode+0x6a>
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
800026a8:	fe 78 08 00 	mov	r8,-63488
800026ac:	70 98       	ld.w	r8,r8[0x24]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800026ae:	e0 69 84 7f 	mov	r9,33919
800026b2:	ea 19 00 1e 	orh	r9,0x1e
800026b6:	12 3b       	cp.w	r11,r9
800026b8:	e0 8b 00 04 	brhi	800026c0 <scif_configure_osc_crystalmode+0x1c>
800026bc:	30 0b       	mov	r11,0
800026be:	c1 38       	rjmp	800026e4 <scif_configure_osc_crystalmode+0x40>
800026c0:	e0 69 96 7f 	mov	r9,38527
800026c4:	ea 19 00 98 	orh	r9,0x98
800026c8:	12 3b       	cp.w	r11,r9
800026ca:	e0 8b 00 04 	brhi	800026d2 <scif_configure_osc_crystalmode+0x2e>
800026ce:	30 1b       	mov	r11,1
800026d0:	c0 a8       	rjmp	800026e4 <scif_configure_osc_crystalmode+0x40>
800026d2:	e0 69 24 00 	mov	r9,9216
800026d6:	ea 19 00 f4 	orh	r9,0xf4
800026da:	12 3b       	cp.w	r11,r9
800026dc:	f9 bb 03 02 	movlo	r11,2
800026e0:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800026e4:	30 19       	mov	r9,1
800026e6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800026ea:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800026ee:	e1 ba 00 00 	mfsr	r10,0x0
800026f2:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
800026f4:	fe 79 08 00 	mov	r9,-63488
800026f8:	32 4b       	mov	r11,36
800026fa:	ea 1b aa 00 	orh	r11,0xaa00
800026fe:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80002700:	93 98       	st.w	r9[0x24],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80002702:	14 98       	mov	r8,r10
80002704:	e6 18 00 01 	andh	r8,0x1,COH
80002708:	c3 51       	brne	80002772 <scif_configure_osc_crystalmode+0xce>
8000270a:	d5 03       	csrf	0x10
8000270c:	c3 38       	rjmp	80002772 <scif_configure_osc_crystalmode+0xce>
  }
  else
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
8000270e:	fe 78 08 00 	mov	r8,-63488
80002712:	70 a8       	ld.w	r8,r8[0x28]
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80002714:	e0 69 84 7f 	mov	r9,33919
80002718:	ea 19 00 1e 	orh	r9,0x1e
8000271c:	12 3b       	cp.w	r11,r9
8000271e:	e0 8b 00 04 	brhi	80002726 <scif_configure_osc_crystalmode+0x82>
80002722:	30 0b       	mov	r11,0
80002724:	c1 38       	rjmp	8000274a <scif_configure_osc_crystalmode+0xa6>
80002726:	e0 69 96 7f 	mov	r9,38527
8000272a:	ea 19 00 98 	orh	r9,0x98
8000272e:	12 3b       	cp.w	r11,r9
80002730:	e0 8b 00 04 	brhi	80002738 <scif_configure_osc_crystalmode+0x94>
80002734:	30 1b       	mov	r11,1
80002736:	c0 a8       	rjmp	8000274a <scif_configure_osc_crystalmode+0xa6>
80002738:	e0 69 24 00 	mov	r9,9216
8000273c:	ea 19 00 f4 	orh	r9,0xf4
80002740:	12 3b       	cp.w	r11,r9
80002742:	f9 bb 03 02 	movlo	r11,2
80002746:	f9 bb 02 03 	movhs	r11,3
  {
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // crystal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000274a:	30 19       	mov	r9,1
8000274c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  2000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80002750:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                                   (fcrystal < 10000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                           AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80002754:	e1 ba 00 00 	mfsr	r10,0x0
80002758:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
8000275a:	fe 79 08 00 	mov	r9,-63488
8000275e:	32 8b       	mov	r11,40
80002760:	ea 1b aa 00 	orh	r11,0xaa00
80002764:	93 6b       	st.w	r9[0x18],r11
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80002766:	93 a8       	st.w	r9[0x28],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80002768:	14 98       	mov	r8,r10
8000276a:	e6 18 00 01 	andh	r8,0x1,COH
8000276e:	c0 21       	brne	80002772 <scif_configure_osc_crystalmode+0xce>
80002770:	d5 03       	csrf	0x10
  }

  return PASS;
}
80002772:	5e fd       	retal	0

80002774 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002774:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002776:	f6 08 15 04 	lsl	r8,r11,0x4
8000277a:	14 38       	cp.w	r8,r10
8000277c:	f9 b8 08 10 	movls	r8,16
80002780:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002784:	f0 0b 02 4b 	mul	r11,r8,r11
80002788:	f6 09 16 01 	lsr	r9,r11,0x1
8000278c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002790:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002794:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002798:	f2 cb 00 01 	sub	r11,r9,1
8000279c:	e0 4b ff fe 	cp.w	r11,65534
800027a0:	e0 88 00 03 	brls	800027a6 <usart_set_async_baudrate+0x32>
800027a4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800027a6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800027a8:	e8 6e 00 00 	mov	lr,524288
800027ac:	59 08       	cp.w	r8,16
800027ae:	fc 08 17 10 	movne	r8,lr
800027b2:	f9 b8 00 00 	moveq	r8,0
800027b6:	e4 1b ff f7 	andh	r11,0xfff7
800027ba:	e0 1b fe cf 	andl	r11,0xfecf
800027be:	16 48       	or	r8,r11
800027c0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800027c2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800027c6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800027ca:	99 89       	st.w	r12[0x20],r9
800027cc:	d8 0a       	popm	pc,r12=0

800027ce <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800027ce:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800027d0:	e2 18 00 02 	andl	r8,0x2,COH
800027d4:	c0 31       	brne	800027da <usart_write_char+0xc>
800027d6:	30 2c       	mov	r12,2
800027d8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800027da:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800027de:	99 7b       	st.w	r12[0x1c],r11
800027e0:	5e fd       	retal	0
800027e2:	d7 03       	nop

800027e4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800027e4:	eb cd 40 e0 	pushm	r5-r7,lr
800027e8:	18 96       	mov	r6,r12
800027ea:	16 95       	mov	r5,r11
800027ec:	e0 67 27 0f 	mov	r7,9999
800027f0:	c0 68       	rjmp	800027fc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800027f2:	58 07       	cp.w	r7,0
800027f4:	c0 31       	brne	800027fa <usart_putchar+0x16>
800027f6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800027fa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800027fc:	0a 9b       	mov	r11,r5
800027fe:	0c 9c       	mov	r12,r6
80002800:	f0 1f 00 03 	mcall	8000280c <usart_putchar+0x28>
80002804:	cf 71       	brne	800027f2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002806:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000280a:	00 00       	add	r0,r0
8000280c:	80 00       	ld.sh	r0,r0[0x0]
8000280e:	27 ce       	sub	lr,124

80002810 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002810:	eb cd 40 c0 	pushm	r6-r7,lr
80002814:	18 96       	mov	r6,r12
80002816:	16 97       	mov	r7,r11
  while (*string != '\0')
80002818:	17 8b       	ld.ub	r11,r11[0x0]
8000281a:	58 0b       	cp.w	r11,0
8000281c:	c0 80       	breq	8000282c <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000281e:	2f f7       	sub	r7,-1
80002820:	0c 9c       	mov	r12,r6
80002822:	f0 1f 00 04 	mcall	80002830 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002826:	0f 8b       	ld.ub	r11,r7[0x0]
80002828:	58 0b       	cp.w	r11,0
8000282a:	cf a1       	brne	8000281e <usart_write_line+0xe>
8000282c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	27 e4       	sub	r4,126

80002834 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002834:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002838:	e6 18 00 01 	andh	r8,0x1,COH
8000283c:	c0 71       	brne	8000284a <usart_reset+0x16>
8000283e:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002840:	3f f8       	mov	r8,-1
80002842:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002844:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002846:	d5 03       	csrf	0x10
80002848:	c0 48       	rjmp	80002850 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
8000284a:	3f f8       	mov	r8,-1
8000284c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
8000284e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002850:	30 08       	mov	r8,0
80002852:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002854:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002856:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002858:	ea 68 61 0c 	mov	r8,680204
8000285c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000285e:	5e fc       	retal	r12

80002860 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002860:	eb cd 40 e0 	pushm	r5-r7,lr
80002864:	18 96       	mov	r6,r12
80002866:	16 97       	mov	r7,r11
80002868:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000286a:	f0 1f 00 2f 	mcall	80002924 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000286e:	58 07       	cp.w	r7,0
80002870:	c5 80       	breq	80002920 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002872:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002874:	30 49       	mov	r9,4
80002876:	f2 08 18 00 	cp.b	r8,r9
8000287a:	e0 88 00 53 	brls	80002920 <usart_init_rs232+0xc0>
8000287e:	30 99       	mov	r9,9
80002880:	f2 08 18 00 	cp.b	r8,r9
80002884:	e0 8b 00 4e 	brhi	80002920 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002888:	0f d9       	ld.ub	r9,r7[0x5]
8000288a:	30 78       	mov	r8,7
8000288c:	f0 09 18 00 	cp.b	r9,r8
80002890:	e0 8b 00 48 	brhi	80002920 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002894:	8e 39       	ld.sh	r9,r7[0x6]
80002896:	e0 68 01 01 	mov	r8,257
8000289a:	f0 09 19 00 	cp.h	r9,r8
8000289e:	e0 8b 00 41 	brhi	80002920 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
800028a2:	ef 39 00 08 	ld.ub	r9,r7[8]
800028a6:	30 38       	mov	r8,3
800028a8:	f0 09 18 00 	cp.b	r9,r8
800028ac:	e0 8b 00 3a 	brhi	80002920 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800028b0:	0a 9a       	mov	r10,r5
800028b2:	6e 0b       	ld.w	r11,r7[0x0]
800028b4:	0c 9c       	mov	r12,r6
800028b6:	f0 1f 00 1d 	mcall	80002928 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800028ba:	58 1c       	cp.w	r12,1
800028bc:	c3 20       	breq	80002920 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800028be:	0f c8       	ld.ub	r8,r7[0x4]
800028c0:	30 99       	mov	r9,9
800028c2:	f2 08 18 00 	cp.b	r8,r9
800028c6:	c0 51       	brne	800028d0 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800028c8:	6c 18       	ld.w	r8,r6[0x4]
800028ca:	b1 b8       	sbr	r8,0x11
800028cc:	8d 18       	st.w	r6[0x4],r8
800028ce:	c0 68       	rjmp	800028da <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800028d0:	6c 19       	ld.w	r9,r6[0x4]
800028d2:	20 58       	sub	r8,5
800028d4:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800028d8:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800028da:	6c 19       	ld.w	r9,r6[0x4]
800028dc:	ef 3a 00 08 	ld.ub	r10,r7[8]
800028e0:	0f d8       	ld.ub	r8,r7[0x5]
800028e2:	a9 78       	lsl	r8,0x9
800028e4:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800028e8:	12 48       	or	r8,r9
800028ea:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800028ec:	8e 38       	ld.sh	r8,r7[0x6]
800028ee:	30 29       	mov	r9,2
800028f0:	f2 08 19 00 	cp.h	r8,r9
800028f4:	e0 88 00 09 	brls	80002906 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800028f8:	6c 18       	ld.w	r8,r6[0x4]
800028fa:	ad b8       	sbr	r8,0xd
800028fc:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800028fe:	8e b8       	ld.uh	r8,r7[0x6]
80002900:	20 28       	sub	r8,2
80002902:	8d a8       	st.w	r6[0x28],r8
80002904:	c0 68       	rjmp	80002910 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002906:	6c 19       	ld.w	r9,r6[0x4]
80002908:	5c 78       	castu.h	r8
8000290a:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
8000290e:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002910:	6c 18       	ld.w	r8,r6[0x4]
80002912:	e0 18 ff f0 	andl	r8,0xfff0
80002916:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002918:	35 08       	mov	r8,80
8000291a:	8d 08       	st.w	r6[0x0],r8
8000291c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002920:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002924:	80 00       	ld.sh	r0,r0[0x0]
80002926:	28 34       	sub	r4,-125
80002928:	80 00       	ld.sh	r0,r0[0x0]
8000292a:	27 74       	sub	r4,119

8000292c <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
8000292c:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000292e:	f0 1f 00 02 	mcall	80002934 <print+0x8>
}
80002932:	d8 02       	popm	pc
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	28 10       	sub	r0,-127

80002938 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80002938:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
8000293a:	18 9b       	mov	r11,r12
8000293c:	fe 7c 2c 00 	mov	r12,-54272
80002940:	f0 1f 00 02 	mcall	80002948 <print_dbg+0x10>
}
80002944:	d8 02       	popm	pc
80002946:	00 00       	add	r0,r0
80002948:	80 00       	ld.sh	r0,r0[0x0]
8000294a:	29 2c       	sub	r12,-110

8000294c <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000294c:	eb cd 40 80 	pushm	r7,lr
80002950:	20 3d       	sub	sp,12
80002952:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80002954:	50 0c       	stdsp	sp[0x0],r12
80002956:	30 88       	mov	r8,8
80002958:	ba c8       	st.b	sp[0x4],r8
8000295a:	30 48       	mov	r8,4
8000295c:	ba d8       	st.b	sp[0x5],r8
8000295e:	30 08       	mov	r8,0
80002960:	ba 38       	st.h	sp[0x6],r8
80002962:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80002966:	30 2b       	mov	r11,2
80002968:	48 6c       	lddpc	r12,80002980 <init_dbg_rs232_ex+0x34>
8000296a:	f0 1f 00 07 	mcall	80002984 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
8000296e:	0e 9a       	mov	r10,r7
80002970:	1a 9b       	mov	r11,sp
80002972:	fe 7c 2c 00 	mov	r12,-54272
80002976:	f0 1f 00 05 	mcall	80002988 <init_dbg_rs232_ex+0x3c>
}
8000297a:	2f dd       	sub	sp,-12
8000297c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	2f 98       	sub	r8,-7
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	21 68       	sub	r8,22
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	28 60       	sub	r0,-122

8000298c <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
8000298c:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
8000298e:	18 9b       	mov	r11,r12
80002990:	e0 6c e1 00 	mov	r12,57600
80002994:	f0 1f 00 02 	mcall	8000299c <init_dbg_rs232+0x10>
}
80002998:	d8 02       	popm	pc
8000299a:	00 00       	add	r0,r0
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	29 4c       	sub	r12,-108

800029a0 <_stext>:
800029a0:	48 dd       	lddpc	sp,800029d4 <udata_clear_loop_end+0x4>
800029a2:	fe c0 fd a2 	sub	r0,pc,-606
800029a6:	e3 b0 00 01 	mtsr	0x4,r0
800029aa:	d5 53       	csrf	0x15
800029ac:	48 b0       	lddpc	r0,800029d8 <udata_clear_loop_end+0x8>
800029ae:	48 c1       	lddpc	r1,800029dc <udata_clear_loop_end+0xc>
800029b0:	02 30       	cp.w	r0,r1
800029b2:	c0 62       	brcc	800029be <idata_load_loop_end>
800029b4:	48 b2       	lddpc	r2,800029e0 <udata_clear_loop_end+0x10>

800029b6 <idata_load_loop>:
800029b6:	a5 05       	ld.d	r4,r2++
800029b8:	a1 24       	st.d	r0++,r4
800029ba:	02 30       	cp.w	r0,r1
800029bc:	cf d3       	brcs	800029b6 <idata_load_loop>

800029be <idata_load_loop_end>:
800029be:	48 a0       	lddpc	r0,800029e4 <udata_clear_loop_end+0x14>
800029c0:	48 a1       	lddpc	r1,800029e8 <udata_clear_loop_end+0x18>
800029c2:	02 30       	cp.w	r0,r1
800029c4:	c0 62       	brcc	800029d0 <udata_clear_loop_end>
800029c6:	30 02       	mov	r2,0
800029c8:	30 03       	mov	r3,0

800029ca <udata_clear_loop>:
800029ca:	a1 22       	st.d	r0++,r2
800029cc:	02 30       	cp.w	r0,r1
800029ce:	cf e3       	brcs	800029ca <udata_clear_loop>

800029d0 <udata_clear_loop_end>:
800029d0:	fe cf fe c0 	sub	pc,pc,-320
800029d4:	00 01       	add	r1,r0
800029d6:	00 00       	add	r0,r0
800029d8:	00 00       	add	r0,r0
800029da:	00 04       	add	r4,r0
800029dc:	00 00       	add	r0,r0
800029de:	00 08       	add	r8,r0
800029e0:	80 00       	ld.sh	r0,r0[0x0]
800029e2:	30 18       	mov	r8,1
800029e4:	00 00       	add	r0,r0
800029e6:	00 08       	add	r8,r0
800029e8:	00 00       	add	r0,r0
800029ea:	02 10       	sub	r0,r1

800029ec <board_init>:
// 	static const gpio_map_t USART_GPIO_MAP =
// 	{
// 		{USART_RXD_PIN, USART_RXD_FUNCTION},
// 		{USART_TXD_PIN, USART_TXD_FUNCTION}
//	};
}
800029ec:	5e fc       	retal	r12
800029ee:	d7 03       	nop

800029f0 <Motor_Init>:
#  define EXAMPLE_PWM_L_FUNCTION        AVR32_PWM_PWML_0_1_FUNCTION
#  define EXAMPLE_PWM_H_PIN             AVR32_PWM_PWMH_0_1_PIN
#  define EXAMPLE_PWM_H_FUNCTION        AVR32_PWM_PWMH_0_1_FUNCTION
#  define EXAMPLE_PWM_CHANNEL_ID        0
void Motor_Init()
{
800029f0:	eb cd 40 c0 	pushm	r6-r7,lr
800029f4:	20 dd       	sub	sp,52
	//Turn boths motors off
// 	M0_STANDBY;
// 	M1_STANDBY;
	
	M0_IN1_CLR;
800029f6:	32 9c       	mov	r12,41
800029f8:	f0 1f 00 3a 	mcall	80002ae0 <Motor_Init+0xf0>
	M0_IN2_CLR;
800029fc:	32 ac       	mov	r12,42
800029fe:	f0 1f 00 39 	mcall	80002ae0 <Motor_Init+0xf0>
	
	M1_IN1_CLR;
80002a02:	32 fc       	mov	r12,47
80002a04:	f0 1f 00 37 	mcall	80002ae0 <Motor_Init+0xf0>
	M1_IN2_CLR;
80002a08:	32 ec       	mov	r12,46
80002a0a:	f0 1f 00 36 	mcall	80002ae0 <Motor_Init+0xf0>
											{0}, // cdtyupd
											{0}, // cprd
											{0}, // cprdupd
											{0}, // ccnt
											{0}, // dt
											{0}};// dtupd  ;  One channel config.
80002a0e:	30 08       	mov	r8,0
80002a10:	30 09       	mov	r9,0
80002a12:	fa e9 00 14 	st.d	sp[20],r8
80002a16:	fa e9 00 1c 	st.d	sp[28],r8
80002a1a:	fa e9 00 24 	st.d	sp[36],r8
80002a1e:	fa e9 00 2c 	st.d	sp[44],r8
            .div = 1,             // DIV=1 in the formula
            .mul = 6,             // MUL=7 in the formula
            .pll_div2 = 1,        // pll_div2 Divide the PLL output frequency by 2 (this settings does not change the FVCO value)
            .pll_wbwdisable = 0,  // pll_wbwdisable 1 Disable the Wide-Bandith Mode (Wide-Bandwith mode allow a faster startup time and out-of-lock time). 0 to enable the Wide-Bandith Mode.
            .pll_freq = 1,        // Set to 1 for VCO frequency range 80-180MHz, set to 0 for VCO frequency range 160-240Mhz.
  };
80002a22:	4b 18       	lddpc	r8,80002ae4 <Motor_Init+0xf4>
80002a24:	1a 9b       	mov	r11,sp
80002a26:	70 09       	ld.w	r9,r8[0x0]
80002a28:	50 09       	stdsp	sp[0x0],r9
80002a2a:	70 19       	ld.w	r9,r8[0x4]
80002a2c:	50 19       	stdsp	sp[0x4],r9
80002a2e:	70 29       	ld.w	r9,r8[0x8]
80002a30:	50 29       	stdsp	sp[0x8],r9
80002a32:	70 39       	ld.w	r9,r8[0xc]
80002a34:	50 39       	stdsp	sp[0xc],r9
80002a36:	70 48       	ld.w	r8,r8[0x10]
80002a38:	50 48       	stdsp	sp[0x10],r8
  // Switch main clock to Osc0.
//  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);

  /* Setup PLL0 on Osc0, mul=7 ,no divisor, lockcount=16, ie. (16Mhzx7)/(div2) = 56MHz output */
  scif_pll_setup(SCIF_PLL0, &opt); // lockcount in main clock for the PLL wait lock
80002a3a:	30 0c       	mov	r12,0
80002a3c:	f0 1f 00 2b 	mcall	80002ae8 <Motor_Init+0xf8>

  /* Enable PLL0 */
  scif_pll_enable(SCIF_PLL0);
80002a40:	30 0c       	mov	r12,0
80002a42:	f0 1f 00 2b 	mcall	80002aec <Motor_Init+0xfc>

  /* Wait for PLL0 locked */
  scif_wait_for_pll_locked(SCIF_PLL0) ;
80002a46:	30 0c       	mov	r12,0
80002a48:	f0 1f 00 2a 	mcall	80002af0 <Motor_Init+0x100>
}
static void pwm_start_gc(void)
{
  scif_gc_setup(AVR32_SCIF_GCLK_PWM,
80002a4c:	30 09       	mov	r9,0
80002a4e:	12 9a       	mov	r10,r9
80002a50:	30 5b       	mov	r11,5
80002a52:	30 4c       	mov	r12,4
80002a54:	f0 1f 00 28 	mcall	80002af4 <Motor_Init+0x104>
//   scif_gc_setup(  AVR32_SCIF_GCLK_PWM,
// 				  SCIF_GCCTRL_OSC0,
// 				  AVR32_SCIF_GC_NO_DIV_CLOCK,
// 				  0);
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_PWM);
80002a58:	30 4c       	mov	r12,4
80002a5a:	f0 1f 00 28 	mcall	80002af8 <Motor_Init+0x108>
	channel_id = 1;//EXAMPLE_PWM_CHANNEL_ID;
// 	gpio_enable_module_pin(EXAMPLE_PWM_L_PIN, EXAMPLE_PWM_L_FUNCTION);
// 	gpio_enable_module_pin(EXAMPLE_PWM_H_PIN, EXAMPLE_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
// 	gpio_enable_module_pin(AVR32_PIN_PB10, AVR32_PWM_PWMH_1_1_FUNCTION); //PWM1 Low
	gpio_enable_module_pin(M0_PWM_H_PIN, M0_PWM_H_FUNCTION);
80002a5e:	30 2b       	mov	r11,2
80002a60:	32 bc       	mov	r12,43
80002a62:	f0 1f 00 27 	mcall	80002afc <Motor_Init+0x10c>
	gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION); //PWM1 Low
80002a66:	30 2b       	mov	r11,2
80002a68:	32 dc       	mov	r12,45
80002a6a:	f0 1f 00 25 	mcall	80002afc <Motor_Init+0x10c>
	//gpio_enable_module_pin(M1_PWM_H_PIN, M1_PWM_H_FUNCTION);
	// PWM controller configuration.
	pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80002a6e:	4a 5c       	lddpc	r12,80002b00 <Motor_Init+0x110>
80002a70:	30 07       	mov	r7,0
80002a72:	99 17       	st.w	r12[0x4],r7
	pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
80002a74:	99 07       	st.w	r12[0x0],r7
	pwm_opt.prea = AVR32_PWM_PREA_CCK;
80002a76:	99 37       	st.w	r12[0xc],r7
	pwm_opt.preb = AVR32_PWM_PREB_CCK;
80002a78:	99 27       	st.w	r12[0x8],r7
	
	pwm_opt.fault_detection_activated = false;
80002a7a:	f9 67 00 14 	st.b	r12[20],r7
	pwm_opt.sync_channel_activated    = true;
80002a7e:	30 18       	mov	r8,1
80002a80:	f9 68 00 15 	st.b	r12[21],r8
	pwm_opt.sync_update_channel_mode  = PWM_SYNC_UPDATE_MANUAL_WRITE_MANUAL_UPDATE;
80002a84:	f9 67 00 16 	st.b	r12[22],r7
	pwm_opt.sync_channel_select[0]    = false;
80002a88:	f9 67 00 17 	st.b	r12[23],r7
	pwm_opt.sync_channel_select[1]    = false;
80002a8c:	f9 67 00 18 	st.b	r12[24],r7
	pwm_opt.sync_channel_select[2]    = false;
80002a90:	f9 67 00 19 	st.b	r12[25],r7
	pwm_opt.sync_channel_select[3]    = false;
80002a94:	f9 67 00 1a 	st.b	r12[26],r7
	pwm_opt.cksel                     = PWM_CKSEL_GCLK;
80002a98:	30 16       	mov	r6,1
80002a9a:	99 46       	st.w	r12[0x10],r6
	pwm_init(&pwm_opt);
80002a9c:	f0 1f 00 1a 	mcall	80002b04 <Motor_Init+0x114>
	
	// Update the period
	pwm_update_period_value(10);
80002aa0:	30 ac       	mov	r12,10
80002aa2:	f0 1f 00 1a 	mcall	80002b08 <Motor_Init+0x118>
	pwm_channel.CMR.dte   = 0;        // Enable Deadtime for complementary Mode
	pwm_channel.CMR.dthi  = 0;        // Deadtime Inverted on PWMH
	pwm_channel.CMR.dtli  = 0;        // Deadtime Not Inverted on PWML
	pwm_channel.CMR.ces   = 0;        // 0/1 Channel Event at the End of PWM Period
	pwm_channel.CMR.calg  = PWM_MODE_LEFT_ALIGNED;       // Channel mode.
	pwm_channel.CMR.cpol  = PWM_POLARITY_HIGH;            // Channel polarity.
80002aa6:	40 58       	lddsp	r8,sp[0x14]
80002aa8:	e4 18 ff f8 	andh	r8,0xfff8
80002aac:	e0 18 fa ff 	andl	r8,0xfaff
80002ab0:	f1 d6 d1 21 	bfins	r8,r6,0x9,0x1
	pwm_channel.CMR.cpre  = AVR32_PWM_CPRE_CCK;           // Channel prescaler.
80002ab4:	f1 d7 d0 04 	bfins	r8,r7,0x0,0x4
80002ab8:	50 58       	stdsp	sp[0x14],r8
	pwm_channel.cdty      = 100;       // Channel duty cycle, should be < CPRD.
80002aba:	36 48       	mov	r8,100
80002abc:	50 68       	stdsp	sp[0x18],r8
	pwm_channel.cprd      = 200;       // Channel period.
80002abe:	e0 68 00 c8 	mov	r8,200
80002ac2:	50 88       	stdsp	sp[0x20],r8
	

	pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 0
80002ac4:	fa c7 ff ec 	sub	r7,sp,-20
80002ac8:	0e 9b       	mov	r11,r7
80002aca:	0c 9c       	mov	r12,r6
80002acc:	f0 1f 00 10 	mcall	80002b0c <Motor_Init+0x11c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
	channel_id = 2; 
	pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 0
80002ad0:	0e 9b       	mov	r11,r7
80002ad2:	30 2c       	mov	r12,2
80002ad4:	f0 1f 00 0e 	mcall	80002b0c <Motor_Init+0x11c>
	//pwm_start_channels((1 << channel_id));  // Start channel 0 & 1.
}
80002ad8:	2f 3d       	sub	sp,-52
80002ada:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ade:	00 00       	add	r0,r0
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	21 98       	sub	r8,25
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2f a8       	sub	r8,-6
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	25 a8       	sub	r8,90
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	25 64       	sub	r4,86
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	24 6a       	sub	r10,70
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	24 bc       	sub	r12,75
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	25 40       	sub	r0,84
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	20 d4       	sub	r4,13
80002b00:	00 00       	add	r0,r0
80002b02:	01 f4       	ld.ub	r4,r0[0x7]
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	23 54       	sub	r4,53
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	23 4a       	sub	r10,52
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	23 0c       	sub	r12,48

80002b10 <main>:
}



int main (void)
{
80002b10:	d4 01       	pushm	lr
	unsigned long sdram_size, progress_inc, i, j, tmp, noErrors = 0;
	volatile unsigned long *sdram = SDRAM;
	uint32_t VarTemp;
	board_init();
80002b12:	f0 1f 00 10 	mcall	80002b50 <main+0x40>
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80002b16:	30 3a       	mov	r10,3
80002b18:	e0 6b 24 00 	mov	r11,9216
80002b1c:	ea 1b 00 f4 	orh	r11,0xf4
80002b20:	30 0c       	mov	r12,0
80002b22:	f0 1f 00 0d 	mcall	80002b54 <main+0x44>
	init_dbg_rs232(FOSC0);
80002b26:	e0 6c 24 00 	mov	r12,9216
80002b2a:	ea 1c 00 f4 	orh	r12,0xf4
80002b2e:	f0 1f 00 0b 	mcall	80002b58 <main+0x48>
	print_dbg("\x0C");
80002b32:	48 bc       	lddpc	r12,80002b5c <main+0x4c>
80002b34:	f0 1f 00 0b 	mcall	80002b60 <main+0x50>
	print_dbg("Columbus Board Tester\n\n\r");
80002b38:	48 bc       	lddpc	r12,80002b64 <main+0x54>
80002b3a:	f0 1f 00 0a 	mcall	80002b60 <main+0x50>
// 			print_dbg_char(' ');
// 		}
// 		print_dbg("\n\r");
// 	}
	
	print_dbg("\n\rMotor Testing:\n\rMotor Initialised");
80002b3e:	48 bc       	lddpc	r12,80002b68 <main+0x58>
80002b40:	f0 1f 00 08 	mcall	80002b60 <main+0x50>
	Motor_Init();
80002b44:	f0 1f 00 0a 	mcall	80002b6c <main+0x5c>
	//print_dbg("Motors Forward:");
	//Motor_Go(FORWARD);
	//delay_s(2);
// 	print_dbg("Motor Stop;");
// 	Motor_Go(STOP);
	print_dbg("\n\rTest Complete!");
80002b48:	48 ac       	lddpc	r12,80002b70 <main+0x60>
80002b4a:	f0 1f 00 06 	mcall	80002b60 <main+0x50>
80002b4e:	c0 08       	rjmp	80002b4e <main+0x3e>
80002b50:	80 00       	ld.sh	r0,r0[0x0]
80002b52:	29 ec       	sub	r12,-98
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	22 0c       	sub	r12,32
80002b58:	80 00       	ld.sh	r0,r0[0x0]
80002b5a:	29 8c       	sub	r12,-104
80002b5c:	80 00       	ld.sh	r0,r0[0x0]
80002b5e:	2f bc       	sub	r12,-5
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	29 38       	sub	r8,-109
80002b64:	80 00       	ld.sh	r0,r0[0x0]
80002b66:	2f c0       	sub	r0,-4
80002b68:	80 00       	ld.sh	r0,r0[0x0]
80002b6a:	2f dc       	sub	r12,-3
80002b6c:	80 00       	ld.sh	r0,r0[0x0]
80002b6e:	29 f0       	sub	r0,-97
80002b70:	80 00       	ld.sh	r0,r0[0x0]
80002b72:	30 00       	mov	r0,0

Disassembly of section .exception:

80002c00 <_evba>:
80002c00:	c0 08       	rjmp	80002c00 <_evba>
	...

80002c04 <_handle_TLB_Multiple_Hit>:
80002c04:	c0 08       	rjmp	80002c04 <_handle_TLB_Multiple_Hit>
	...

80002c08 <_handle_Bus_Error_Data_Fetch>:
80002c08:	c0 08       	rjmp	80002c08 <_handle_Bus_Error_Data_Fetch>
	...

80002c0c <_handle_Bus_Error_Instruction_Fetch>:
80002c0c:	c0 08       	rjmp	80002c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002c10 <_handle_NMI>:
80002c10:	c0 08       	rjmp	80002c10 <_handle_NMI>
	...

80002c14 <_handle_Instruction_Address>:
80002c14:	c0 08       	rjmp	80002c14 <_handle_Instruction_Address>
	...

80002c18 <_handle_ITLB_Protection>:
80002c18:	c0 08       	rjmp	80002c18 <_handle_ITLB_Protection>
	...

80002c1c <_handle_Breakpoint>:
80002c1c:	c0 08       	rjmp	80002c1c <_handle_Breakpoint>
	...

80002c20 <_handle_Illegal_Opcode>:
80002c20:	c0 08       	rjmp	80002c20 <_handle_Illegal_Opcode>
	...

80002c24 <_handle_Unimplemented_Instruction>:
80002c24:	c0 08       	rjmp	80002c24 <_handle_Unimplemented_Instruction>
	...

80002c28 <_handle_Privilege_Violation>:
80002c28:	c0 08       	rjmp	80002c28 <_handle_Privilege_Violation>
	...

80002c2c <_handle_Floating_Point>:
80002c2c:	c0 08       	rjmp	80002c2c <_handle_Floating_Point>
	...

80002c30 <_handle_Coprocessor_Absent>:
80002c30:	c0 08       	rjmp	80002c30 <_handle_Coprocessor_Absent>
	...

80002c34 <_handle_Data_Address_Read>:
80002c34:	c0 08       	rjmp	80002c34 <_handle_Data_Address_Read>
	...

80002c38 <_handle_Data_Address_Write>:
80002c38:	c0 08       	rjmp	80002c38 <_handle_Data_Address_Write>
	...

80002c3c <_handle_DTLB_Protection_Read>:
80002c3c:	c0 08       	rjmp	80002c3c <_handle_DTLB_Protection_Read>
	...

80002c40 <_handle_DTLB_Protection_Write>:
80002c40:	c0 08       	rjmp	80002c40 <_handle_DTLB_Protection_Write>
	...

80002c44 <_handle_DTLB_Modified>:
80002c44:	c0 08       	rjmp	80002c44 <_handle_DTLB_Modified>
	...

80002c50 <_handle_ITLB_Miss>:
80002c50:	c0 08       	rjmp	80002c50 <_handle_ITLB_Miss>
	...

80002c60 <_handle_DTLB_Miss_Read>:
80002c60:	c0 08       	rjmp	80002c60 <_handle_DTLB_Miss_Read>
	...

80002c70 <_handle_DTLB_Miss_Write>:
80002c70:	c0 08       	rjmp	80002c70 <_handle_DTLB_Miss_Write>
	...

80002d00 <_handle_Supervisor_Call>:
80002d00:	c0 08       	rjmp	80002d00 <_handle_Supervisor_Call>
80002d02:	d7 03       	nop

80002d04 <_int0>:
80002d04:	30 0c       	mov	r12,0
80002d06:	fe b0 fa 57 	rcall	800021b4 <_get_interrupt_handler>
80002d0a:	58 0c       	cp.w	r12,0
80002d0c:	f8 0f 17 10 	movne	pc,r12
80002d10:	d6 03       	rete

80002d12 <_int1>:
80002d12:	30 1c       	mov	r12,1
80002d14:	fe b0 fa 50 	rcall	800021b4 <_get_interrupt_handler>
80002d18:	58 0c       	cp.w	r12,0
80002d1a:	f8 0f 17 10 	movne	pc,r12
80002d1e:	d6 03       	rete

80002d20 <_int2>:
80002d20:	30 2c       	mov	r12,2
80002d22:	fe b0 fa 49 	rcall	800021b4 <_get_interrupt_handler>
80002d26:	58 0c       	cp.w	r12,0
80002d28:	f8 0f 17 10 	movne	pc,r12
80002d2c:	d6 03       	rete

80002d2e <_int3>:
80002d2e:	30 3c       	mov	r12,3
80002d30:	fe b0 fa 42 	rcall	800021b4 <_get_interrupt_handler>
80002d34:	58 0c       	cp.w	r12,0
80002d36:	f8 0f 17 10 	movne	pc,r12
80002d3a:	d6 03       	rete
80002d3c:	d7 03       	nop
80002d3e:	d7 03       	nop
80002d40:	d7 03       	nop
80002d42:	d7 03       	nop
80002d44:	d7 03       	nop
80002d46:	d7 03       	nop
80002d48:	d7 03       	nop
80002d4a:	d7 03       	nop
80002d4c:	d7 03       	nop
80002d4e:	d7 03       	nop
80002d50:	d7 03       	nop
80002d52:	d7 03       	nop
80002d54:	d7 03       	nop
80002d56:	d7 03       	nop
80002d58:	d7 03       	nop
80002d5a:	d7 03       	nop
80002d5c:	d7 03       	nop
80002d5e:	d7 03       	nop
80002d60:	d7 03       	nop
80002d62:	d7 03       	nop
80002d64:	d7 03       	nop
80002d66:	d7 03       	nop
80002d68:	d7 03       	nop
80002d6a:	d7 03       	nop
80002d6c:	d7 03       	nop
80002d6e:	d7 03       	nop
80002d70:	d7 03       	nop
80002d72:	d7 03       	nop
80002d74:	d7 03       	nop
80002d76:	d7 03       	nop
80002d78:	d7 03       	nop
80002d7a:	d7 03       	nop
80002d7c:	d7 03       	nop
80002d7e:	d7 03       	nop
80002d80:	d7 03       	nop
80002d82:	d7 03       	nop
80002d84:	d7 03       	nop
80002d86:	d7 03       	nop
80002d88:	d7 03       	nop
80002d8a:	d7 03       	nop
80002d8c:	d7 03       	nop
80002d8e:	d7 03       	nop
80002d90:	d7 03       	nop
80002d92:	d7 03       	nop
80002d94:	d7 03       	nop
80002d96:	d7 03       	nop
80002d98:	d7 03       	nop
80002d9a:	d7 03       	nop
80002d9c:	d7 03       	nop
80002d9e:	d7 03       	nop
80002da0:	d7 03       	nop
80002da2:	d7 03       	nop
80002da4:	d7 03       	nop
80002da6:	d7 03       	nop
80002da8:	d7 03       	nop
80002daa:	d7 03       	nop
80002dac:	d7 03       	nop
80002dae:	d7 03       	nop
80002db0:	d7 03       	nop
80002db2:	d7 03       	nop
80002db4:	d7 03       	nop
80002db6:	d7 03       	nop
80002db8:	d7 03       	nop
80002dba:	d7 03       	nop
80002dbc:	d7 03       	nop
80002dbe:	d7 03       	nop
80002dc0:	d7 03       	nop
80002dc2:	d7 03       	nop
80002dc4:	d7 03       	nop
80002dc6:	d7 03       	nop
80002dc8:	d7 03       	nop
80002dca:	d7 03       	nop
80002dcc:	d7 03       	nop
80002dce:	d7 03       	nop
80002dd0:	d7 03       	nop
80002dd2:	d7 03       	nop
80002dd4:	d7 03       	nop
80002dd6:	d7 03       	nop
80002dd8:	d7 03       	nop
80002dda:	d7 03       	nop
80002ddc:	d7 03       	nop
80002dde:	d7 03       	nop
80002de0:	d7 03       	nop
80002de2:	d7 03       	nop
80002de4:	d7 03       	nop
80002de6:	d7 03       	nop
80002de8:	d7 03       	nop
80002dea:	d7 03       	nop
80002dec:	d7 03       	nop
80002dee:	d7 03       	nop
80002df0:	d7 03       	nop
80002df2:	d7 03       	nop
80002df4:	d7 03       	nop
80002df6:	d7 03       	nop
80002df8:	d7 03       	nop
80002dfa:	d7 03       	nop
80002dfc:	d7 03       	nop
80002dfe:	d7 03       	nop
