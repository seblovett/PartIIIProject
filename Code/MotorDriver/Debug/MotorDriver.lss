
MotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003c4  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800116  00800116  0000046e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c0d  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c7  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f7  00000000  00000000  000029fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00002df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_23>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ec       	ldi	r30, 0xC4	; 196
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 31       	cpi	r26, 0x16	; 22
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a6 e1       	ldi	r26, 0x16	; 22
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 32       	cpi	r26, 0x21	; 33
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 32 01 	call	0x264	; 0x264 <main>
  b2:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <PWM_Init>:
#include "Motor.h"

void PWM_Init( void )
{
	//Set clear on Compare, 10 bit PWM
	TCCR1A = (0 << WGM11) | (1 << WGM10) | (1 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0);
  ba:	81 e8       	ldi	r24, 0x81	; 129
  bc:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (0 << WGM13) | (1 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10);
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	80 93 81 00 	sts	0x0081, r24
	OCR1A = TopSpeed;
  c6:	80 91 19 01 	lds	r24, 0x0119
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 89 00 	sts	0x0089, r25
  d0:	80 93 88 00 	sts	0x0088, r24
}
  d4:	08 95       	ret

000000d6 <ADC_Init>:
void ADC_Init(void)
{
	ADMUX = (0 << REFS1) | (1 << REFS0) ;
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADSC) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	80 93 7a 00 	sts	0x007A, r24
}
  e2:	08 95       	ret

000000e4 <ADC_Read>:
uint8_t ADC_Read(void)
{
	ADCSRA |= (1 << ADSC);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	while ((ADCSRA & (1 << ADIF)) == 0) //wait for the interrupt flag to be high
  ee:	80 81       	ld	r24, Z
  f0:	84 ff       	sbrs	r24, 4
  f2:	fd cf       	rjmp	.-6      	; 0xee <ADC_Read+0xa>
	;
	
	return (uint8_t)(ADC >> 2);
  f4:	80 91 78 00 	lds	r24, 0x0078
  f8:	90 91 79 00 	lds	r25, 0x0079
  fc:	96 95       	lsr	r25
  fe:	87 95       	ror	r24
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
}
 104:	08 95       	ret

00000106 <__vector_24>:
ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	ADC_Value = (ADC >> 2);
 118:	80 91 78 00 	lds	r24, 0x0078
 11c:	90 91 79 00 	lds	r25, 0x0079
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	80 93 16 01 	sts	0x0116, r24
	ADCSRA |= (1 << ADSC);//continually read ADC
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <AComp_Init>:

void AComp_Init(void)
{
	ACSR = (1 << ACIE) | (1 << ACIS1);//enable interrupt on falling edge
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	80 bf       	out	0x30, r24	; 48
	DIDR1 = 0x03;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 7f 00 	sts	0x007F, r24
}
 152:	08 95       	ret

00000154 <__vector_23>:
ISR(ANALOG_COMP_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
// 	if ( ACSR & (1<<ACO))
// 		PORTB |= (1<<PB4);
// 	else
// 		PORTB &= ~(1 << PB4);
	Counter++;
 160:	80 91 17 01 	lds	r24, 0x0117
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 17 01 	sts	0x0117, r24
	ACSR &= ~(1 << ACIE); //turn interrupt off. To stop edge bounce. Reenabled at timer overflow
 16a:	80 b7       	in	r24, 0x30	; 48
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	80 bf       	out	0x30, r24	; 48
	Comparator_Sleep = 10;
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	80 93 18 01 	sts	0x0118, r24
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <Motor_Init>:
void Motor_Init()
{
	MOTOR_DDR |= (1 << IN1) | (1 << IN2);
 182:	84 b1       	in	r24, 0x04	; 4
 184:	83 60       	ori	r24, 0x03	; 3
 186:	84 b9       	out	0x04, r24	; 4
	MOTOR_PORT &= ~((1 << IN1) | (1 << IN2));
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8c 7f       	andi	r24, 0xFC	; 252
 18c:	85 b9       	out	0x05, r24	; 5
	
	//ADC_Value = 0;
	Counter = 0;
 18e:	10 92 17 01 	sts	0x0117, r1
	//Motor_Threshold = 180;
	TopSpeed = 128;
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	80 93 19 01 	sts	0x0119, r24
	Comparator_Sleep = 0;
 198:	10 92 18 01 	sts	0x0118, r1
	PWM_Init();
 19c:	0e 94 5d 00 	call	0xba	; 0xba <PWM_Init>
	//ADC_Init();
	AComp_Init();
 1a0:	0e 94 a4 00 	call	0x148	; 0x148 <AComp_Init>
	
}
 1a4:	08 95       	ret

000001a6 <Motor_Go>:
void Motor_Go(uint8_t Direction)
{
	switch (Direction)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <Motor_Go+0x1a>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	28 f0       	brcs	.+10     	; 0x1b8 <Motor_Go+0x12>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <Motor_Go+0x20>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	71 f4       	brne	.+28     	; 0x1d2 <Motor_Go+0x2c>
 1b6:	0a c0       	rjmp	.+20     	; 0x1cc <Motor_Go+0x26>
	{
		case STOP:
			MOTOR_PORT &= ~((1 << IN1) | (1 << IN2));
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8c 7f       	andi	r24, 0xFC	; 252
 1bc:	85 b9       	out	0x05, r24	; 5
			break;
 1be:	08 95       	ret
			
		case FORWARD:
			MOTOR_PORT &= ~(1 << IN2);
 1c0:	29 98       	cbi	0x05, 1	; 5
			MOTOR_PORT |= (1 << IN1);
 1c2:	28 9a       	sbi	0x05, 0	; 5
			break;
 1c4:	08 95       	ret
			
		case REVERSE:
			MOTOR_PORT &= ~(1 << IN1);
 1c6:	28 98       	cbi	0x05, 0	; 5
			MOTOR_PORT |= (1 << IN2);
 1c8:	29 9a       	sbi	0x05, 1	; 5
			break;
 1ca:	08 95       	ret
			
		case BREAK:
			MOTOR_PORT |= ((1 << IN1) | (1 << IN2));
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	83 60       	ori	r24, 0x03	; 3
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	08 95       	ret

000001d4 <Motor_Execute>:
			break;
	}
}
void Motor_Execute()
{
	if (Counter >= Counter_Max)
 1d4:	90 91 17 01 	lds	r25, 0x0117
 1d8:	80 91 1a 01 	lds	r24, 0x011A
 1dc:	98 17       	cp	r25, r24
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <Motor_Execute+0x12>
		Motor_Go(STOP);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Motor_Go>
 1e6:	08 95       	ret

000001e8 <Test_Motor>:
	//printf("Motor: Counter = %d\n", Counter);
}
void Test_Motor()
{
	Counter = 0;
 1e8:	10 92 17 01 	sts	0x0117, r1
	Counter_Max = 10;
 1ec:	8a e0       	ldi	r24, 0x0A	; 10
 1ee:	80 93 1a 01 	sts	0x011A, r24
	Motor_Go(FORWARD);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Motor_Go>
 1f8:	08 95       	ret

000001fa <Timer_Init>:
#include <util/delay.h>
static FILE mystdout = FDEV_SETUP_STREAM(Usart_printf, NULL, _FDEV_SETUP_WRITE);

void Timer_Init()
{
	TCCR0B = (1 << CS02)|(1 << CS00);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 6e 00 	sts	0x006E, r24
	
}
 204:	08 95       	ret

00000206 <__vector_18>:
ISR(TIMER0_OVF_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	
	Motor_Execute();
 228:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Motor_Execute>
	if(Comparator_Sleep == 0)
 22c:	80 91 18 01 	lds	r24, 0x0118
 230:	88 23       	and	r24, r24
 232:	21 f4       	brne	.+8      	; 0x23c <__vector_18+0x36>
		ACSR |= (1 << ACIE);//reenable interrupt
 234:	80 b7       	in	r24, 0x30	; 48
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 bf       	out	0x30, r24	; 48
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_18+0x3c>
	else
		Comparator_Sleep--;
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	80 93 18 01 	sts	0x0118, r24
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <main>:
int main(void)
{
	stdout = &mystdout;
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	90 93 1e 01 	sts	0x011E, r25
 26c:	80 93 1d 01 	sts	0x011D, r24
	USART0_Init();
 270:	0e 94 4c 01 	call	0x298	; 0x298 <USART0_Init>
	printf("Hello\n\n");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 b2 01 	call	0x364	; 0x364 <puts>
	DDRB = 0x03;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x01;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	8a b9       	out	0x0a, r24	; 10
	Motor_Init();
 288:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_Init>
	Timer_Init();
 28c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Timer_Init>
	sei();
 290:	78 94       	sei
	char buff[20];
	Test_Motor();
 292:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Test_Motor>
 296:	ff cf       	rjmp	.-2      	; 0x296 <main+0x32>

00000298 <USART0_Init>:

void USART0_Init()
{
	uint16_t ubrr = UBBR;
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr >>8);
 298:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr ;
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	80 93 c2 00 	sts	0x00C2, r24
	
	//UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0); //set RX and TX interrupt on
}
 2ae:	08 95       	ret

000002b0 <Usart_SendChar>:
void Usart_SendChar(char data) 
{
    // Wait for empty transmit buffer
    while ( !(UCSR0A & (1 << UDRE0)) );
 2b0:	e0 ec       	ldi	r30, 0xC0	; 192
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <Usart_SendChar+0x4>
    // Start transmission
    UDR0 = data; 
 2ba:	80 93 c6 00 	sts	0x00C6, r24
}
 2be:	08 95       	ret

000002c0 <Usart_Receive>:
unsigned char Usart_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 2c0:	e0 ec       	ldi	r30, 0xC0	; 192
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	88 23       	and	r24, r24
 2c8:	ec f7       	brge	.-6      	; 0x2c4 <Usart_Receive+0x4>
	;
	/* Get and return received data from buffer */
	//Usart_SendChar(UDR0);
	return UDR0;
 2ca:	80 91 c6 00 	lds	r24, 0x00C6
}
 2ce:	08 95       	ret

000002d0 <Usart_printf>:
//to use this copy the following as a global- 
//		static FILE mystdout = FDEV_SETUP_STREAM(Usart_printf, NULL, _FDEV_SETUP_WRITE);
// and add this line at the beginning of main:
//		stdout = &mystdout;
//	stdio.h must be used.
int Usart_printf(char var, FILE *stream) {
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
    // translate \n to \r for br@y++ terminal
    if (var == '\n') Usart_SendChar('\r');
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	19 f4       	brne	.+6      	; 0x2de <Usart_printf+0xe>
 2d8:	8d e0       	ldi	r24, 0x0D	; 13
 2da:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
    Usart_SendChar(var);
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
    return 0;
}
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <Usart_get_line>:

void Usart_get_line (char *buff, int len)
{
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	7c 01       	movw	r14, r24
	//cli();
	char c;
	int i = 0;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
		if ((c == '\b') && i) {
			i--;
			Usart_SendChar(c);
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 2fe:	8b 01       	movw	r16, r22
 300:	01 50       	subi	r16, 0x01	; 1
 302:	10 40       	sbci	r17, 0x00	; 0
	char c;
	int i = 0;


	for (;;) {
		c = Usart_Receive();
 304:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Usart_Receive>
		if (c == '\r') break;
 308:	8d 30       	cpi	r24, 0x0D	; 13
 30a:	a9 f0       	breq	.+42     	; 0x336 <Usart_get_line+0x4a>
		if ((c == '\b') && i) {
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	31 f4       	brne	.+12     	; 0x31c <Usart_get_line+0x30>
 310:	20 97       	sbiw	r28, 0x00	; 0
 312:	c1 f3       	breq	.-16     	; 0x304 <Usart_get_line+0x18>
			i--;
 314:	21 97       	sbiw	r28, 0x01	; 1
			Usart_SendChar(c);
 316:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
			continue;
 31a:	f4 cf       	rjmp	.-24     	; 0x304 <Usart_get_line+0x18>
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 31c:	80 32       	cpi	r24, 0x20	; 32
 31e:	90 f3       	brcs	.-28     	; 0x304 <Usart_get_line+0x18>
 320:	c0 17       	cp	r28, r16
 322:	d1 07       	cpc	r29, r17
 324:	7c f7       	brge	.-34     	; 0x304 <Usart_get_line+0x18>
			buff[i++] = c;
 326:	f7 01       	movw	r30, r14
 328:	ec 0f       	add	r30, r28
 32a:	fd 1f       	adc	r31, r29
 32c:	80 83       	st	Z, r24
 32e:	21 96       	adiw	r28, 0x01	; 1
			Usart_SendChar(c);
 330:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
 334:	e7 cf       	rjmp	.-50     	; 0x304 <Usart_get_line+0x18>
		}
	}
	buff[i] = 0;
 336:	ce 0d       	add	r28, r14
 338:	df 1d       	adc	r29, r15
 33a:	18 82       	st	Y, r1
	Usart_SendChar('\n');
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
	//sei();
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	08 95       	ret

00000350 <USART0_Senduint16>:
void USART0_Senduint16 (uint16_t Data)
{
 350:	cf 93       	push	r28
 352:	c8 2f       	mov	r28, r24
	Usart_SendChar(Data >> 8);
 354:	89 2f       	mov	r24, r25
 356:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
	Usart_SendChar(Data & 0xFF);
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_SendChar>
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <puts>:
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	8c 01       	movw	r16, r24
 36e:	e0 91 1d 01 	lds	r30, 0x011D
 372:	f0 91 1e 01 	lds	r31, 0x011E
 376:	83 81       	ldd	r24, Z+3	; 0x03
 378:	81 ff       	sbrs	r24, 1
 37a:	1a c0       	rjmp	.+52     	; 0x3b0 <puts+0x4c>
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	05 c0       	rjmp	.+10     	; 0x38c <puts+0x28>
 382:	09 95       	icall
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	11 f0       	breq	.+4      	; 0x38c <puts+0x28>
 388:	cf ef       	ldi	r28, 0xFF	; 255
 38a:	df ef       	ldi	r29, 0xFF	; 255
 38c:	f8 01       	movw	r30, r16
 38e:	81 91       	ld	r24, Z+
 390:	8f 01       	movw	r16, r30
 392:	60 91 1d 01 	lds	r22, 0x011D
 396:	70 91 1e 01 	lds	r23, 0x011E
 39a:	db 01       	movw	r26, r22
 39c:	18 96       	adiw	r26, 0x08	; 8
 39e:	ed 91       	ld	r30, X+
 3a0:	fc 91       	ld	r31, X
 3a2:	19 97       	sbiw	r26, 0x09	; 9
 3a4:	88 23       	and	r24, r24
 3a6:	69 f7       	brne	.-38     	; 0x382 <puts+0x1e>
 3a8:	8a e0       	ldi	r24, 0x0A	; 10
 3aa:	09 95       	icall
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	11 f0       	breq	.+4      	; 0x3b4 <puts+0x50>
 3b0:	cf ef       	ldi	r28, 0xFF	; 255
 3b2:	df ef       	ldi	r29, 0xFF	; 255
 3b4:	ce 01       	movw	r24, r28
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
