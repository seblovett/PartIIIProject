
FatFS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00006d18  00006dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b87  008001f0  008001f0  00006e9c  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00006e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ab  00000000  00000000  000076dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007888  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fc9  00000000  00000000  000079e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  0000a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001686  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de8  00000000  00000000  0000c868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000753  00000000  00000000  0000d650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000613d  00000000  00000000  0000dda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00013ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 04 	jmp	0x90e	; 0x90e <__ctors_end>
       4:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
       8:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
       c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      10:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      14:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      18:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      1c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      20:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      24:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      28:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      2c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      30:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      34:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      38:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      3c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      40:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__vector_16>
      44:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      48:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      4c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      50:	0c 94 a6 34 	jmp	0x694c	; 0x694c <__vector_20>
      54:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <__vector_21>
      58:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      5c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      60:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      64:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      68:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      6c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      70:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      74:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      78:	0c 94 a4 04 	jmp	0x948	; 0x948 <__bad_interrupt>
      7c:	e7 31       	cpi	r30, 0x17	; 23
      7e:	62 29       	or	r22, r2
      80:	62 29       	or	r22, r2
      82:	62 29       	or	r22, r2
      84:	62 29       	or	r22, r2
      86:	62 29       	or	r22, r2
      88:	62 29       	or	r22, r2
      8a:	62 29       	or	r22, r2
      8c:	62 29       	or	r22, r2
      8e:	62 29       	or	r22, r2
      90:	45 32       	cpi	r20, 0x25	; 37
      92:	62 29       	or	r22, r2
      94:	be 2f       	mov	r27, r30
      96:	bc 30       	cpi	r27, 0x0C	; 12
      98:	c5 2f       	mov	r28, r21
      9a:	62 29       	or	r22, r2
      9c:	0b 2d       	mov	r16, r11
      9e:	62 29       	or	r22, r2
      a0:	11 2d       	mov	r17, r1
      a2:	48 34       	cpi	r20, 0x48	; 72
      a4:	03 2d       	mov	r16, r3
      a6:	fd 2c       	mov	r15, r13
      a8:	62 29       	or	r22, r2
      aa:	f5 2c       	mov	r15, r5
      ac:	9d 2f       	mov	r25, r29
      ae:	62 29       	or	r22, r2
      b0:	62 29       	or	r22, r2
      b2:	0a 30       	cpi	r16, 0x0A	; 10
      b4:	f0 2c       	mov	r15, r0
      b6:	70 32       	cpi	r23, 0x20	; 32
      b8:	e8 2c       	mov	r14, r8
      ba:	f4 31       	cpi	r31, 0x14	; 20
      bc:	22 31       	cpi	r18, 0x12	; 18
      be:	e2 2c       	mov	r14, r2

000000c0 <__c.1877>:
      c0:	0a 46 61 74 46 73 20 6d 6f 64 75 6c 65 20 74 65     .FatFs module te
      d0:	73 74 20 6d 6f 6e 69 74 6f 72 20 66 6f 72 20 41     st monitor for A
      e0:	56 52 0a 00                                         VR..

000000e4 <__c.1881>:
      e4:	4c 46 4e 20 44 69 73 61 62 6c 65 64 00              LFN Disabled.

000000f1 <__c.1883>:
      f1:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000102 <__c.1885>:
     102:	52 54 43 20 69 73 20 6e 6f 74 20 73 75 70 70 6f     RTC is not suppo
     112:	72 74 65 64 2e 0a 00                                rted...

00000119 <__c.1890>:
     119:	72 63 3d 25 64 0a 00                                rc=%d..

00000120 <__c.1892>:
     120:	53 65 63 74 6f 72 3a 25 6c 75 0a 00                 Sector:%lu..

0000012c <__c.1898>:
     12c:	72 63 3d 25 64 0a 00                                rc=%d..

00000133 <__c.1901>:
     133:	44 72 69 76 65 20 73 69 7a 65 3a 20 25 6c 75 20     Drive size: %lu 
     143:	73 65 63 74 6f 72 73 0a 00                          sectors..

0000014c <__c.1903>:
     14c:	45 72 61 73 65 20 62 6c 6f 63 6b 3a 20 25 6c 75     Erase block: %lu
     15c:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00000166 <__c.1905>:
     166:	43 61 72 64 20 74 79 70 65 3a 20 25 75 0a 00        Card type: %u..

00000175 <__c.1907>:
     175:	43 53 44 3a 0a 00                                   CSD:..

0000017b <__c.1909>:
     17b:	43 49 44 3a 0a 00                                   CID:..

00000181 <__c.1911>:
     181:	4f 43 52 3a 0a 00                                   OCR:..

00000187 <__c.1913>:
     187:	53 44 20 53 74 61 74 75 73 3a 0a 00                 SD Status:..

00000193 <__c.1918>:
     193:	4d 6f 64 65 6c 3a 20 25 73 0a 00                    Model: %s..

0000019e <__c.1920>:
     19e:	53 2f 4e 3a 20 25 73 0a 00                          S/N: %s..

000001a7 <__c.1932>:
     1a7:	25 30 34 58 20 25 30 32 58 2d 00                    %04X %02X-.

000001b2 <__c.1936>:
     1b2:	3f 3f 3f 0a 00                                      ???..

000001b7 <__c.1940>:
     1b7:	72 63 3d 25 75 0a 00                                rc=%u..

000001be <__c.1943>:
     1be:	72 63 3d 25 75 0a 00                                rc=%u..

000001c5 <__c.1953>:
     1c5:	46 41 54 20 74 79 70 65 20 3d 20 25 75 0a 42 79     FAT type = %u.By
     1d5:	74 65 73 2f 43 6c 75 73 74 65 72 20 3d 20 25 6c     tes/Cluster = %l
     1e5:	75 0a 4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73     u.Number of FATs
     1f5:	20 3d 20 25 75 0a 52 6f 6f 74 20 44 49 52 20 65      = %u.Root DIR e
     205:	6e 74 72 69 65 73 20 3d 20 25 75 0a 53 65 63 74     ntries = %u.Sect
     215:	6f 72 73 2f 46 41 54 20 3d 20 25 6c 75 0a 4e 75     ors/FAT = %lu.Nu
     225:	6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65 72 73     mber of clusters
     235:	20 3d 20 25 6c 75 0a 46 41 54 20 73 74 61 72 74      = %lu.FAT start
     245:	20 28 6c 62 61 29 20 3d 20 25 6c 75 0a 44 49 52      (lba) = %lu.DIR
     255:	20 73 74 61 72 74 20 28 6c 62 61 2c 63 6c 75 73      start (lba,clus
     265:	74 6f 72 29 20 3d 20 25 6c 75 0a 44 61 74 61 20     tor) = %lu.Data 
     275:	73 74 61 72 74 20 28 6c 62 61 29 20 3d 20 25 6c     start (lba) = %l
     285:	75 0a 0a 2e 2e 2e 00                                u......

0000028c <__c.1955>:
     28c:	0d 25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62     .%u files, %lu b
     29c:	79 74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73     ytes..%u folders
     2ac:	2e 0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64     ..%lu KB total d
     2bc:	69 73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b     isk space..%lu K
     2cc:	42 20 61 76 61 69 6c 61 62 6c 65 2e 0a 00           B available...

000002da <__c.1962>:
     2da:	25 63 25 63 25 63 25 63 25 63 20 25 75 2f 25 30     %c%c%c%c%c %u/%0
     2ea:	32 75 2f 25 30 32 75 20 25 30 32 75 3a 25 30 32     2u/%02u %02u:%02
     2fa:	75 20 25 39 6c 75 20 20 25 73 00                    u %9lu  %s.

00000305 <__c.1965>:
     305:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     315:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     325:	75 20 44 69 72 28 73 29 00                          u Dir(s).

0000032e <__c.1967>:
     32e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     33e:	72 65 65 0a 00                                      ree..

00000343 <__c.1975>:
     343:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
     353:	29 0a 00                                            )..

00000356 <__c.1981>:
     356:	25 6c 75 20 62 79 74 65 73 20 72 65 61 64 20 77     %lu bytes read w
     366:	69 74 68 20 25 6c 75 20 62 79 74 65 73 2f 73 65     ith %lu bytes/se
     376:	63 2e 0a 00                                         c...

0000037a <__c.1991>:
     37a:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     38a:	6e 20 77 69 74 68 20 25 6c 75 20 62 79 74 65 73     n with %lu bytes
     39a:	2f 73 65 63 2e 0a 00                                /sec...

000003a1 <__c.2025>:
     3a1:	4f 70 65 6e 69 6e 67 20 22 25 73 22 00              Opening "%s".

000003ae <__c.2027>:
     3ae:	0a 43 72 65 61 74 69 6e 67 20 22 25 73 22 00        .Creating "%s".

000003bd <__c.2029>:
     3bd:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 00                 .Copying....

000003c9 <__c.2033>:
     3c9:	0a 25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65     .%lu bytes copie
     3d9:	64 20 77 69 74 68 20 25 6c 75 20 62 79 74 65 73     d with %lu bytes
     3e9:	2f 73 65 63 2e 0a 00                                /sec...

000003f0 <__c.2041>:
     3f0:	5b 44 69 73 6b 20 63 6f 6e 74 6f 72 6c 73 5d 0a     [Disk contorls].
     400:	20 64 69 20 3c 70 64 23 3e 20 2d 20 49 6e 69 74      di <pd#> - Init
     410:	69 61 6c 69 7a 65 20 64 69 73 6b 0a 20 64 64 20     ialize disk. dd 
     420:	5b 3c 70 64 23 3e 20 3c 73 65 63 74 3e 5d 20 2d     [<pd#> <sect>] -
     430:	20 44 75 6d 70 20 61 20 73 65 63 72 74 6f 72 0a      Dump a secrtor.
     440:	20 64 73 20 3c 70 64 23 3e 20 2d 20 53 68 6f 77      ds <pd#> - Show
     450:	20 64 69 73 6b 20 73 74 61 74 75 73 0a 5b 42 75      disk status.[Bu
     460:	66 66 65 72 20 63 6f 6e 74 72 6f 6c 73 5d 0a 20     ffer controls]. 
     470:	62 64 20 3c 6f 66 73 3e 20 2d 20 44 75 6d 70 20     bd <ofs> - Dump 
     480:	77 6f 72 6b 69 6e 67 20 62 75 66 66 65 72 0a 20     working buffer. 
     490:	62 65 20 3c 6f 66 73 3e 20 5b 3c 64 61 74 61 3e     be <ofs> [<data>
     4a0:	5d 20 2e 2e 2e 20 2d 20 45 64 69 74 20 77 6f 72     ] ... - Edit wor
     4b0:	6b 69 6e 67 20 62 75 66 66 65 72 0a 20 62 72 20     king buffer. br 
     4c0:	3c 70 64 23 3e 20 3c 73 65 63 74 3e 20 5b 3c 6e     <pd#> <sect> [<n
     4d0:	75 6d 3e 5d 20 2d 20 52 65 61 64 20 64 69 73 6b     um>] - Read disk
     4e0:	20 69 6e 74 6f 20 77 6f 72 6b 69 6e 67 20 62 75      into working bu
     4f0:	66 66 65 72 0a 20 62 77 20 3c 70 64 23 3e 20 3c     ffer. bw <pd#> <
     500:	73 65 63 74 3e 20 5b 3c 6e 75 6d 3e 5d 20 2d 20     sect> [<num>] - 
     510:	57 72 69 74 65 20 77 6f 72 6b 69 6e 67 20 62 75     Write working bu
     520:	66 66 65 72 20 69 6e 74 6f 20 64 69 73 6b 0a 20     ffer into disk. 
     530:	62 66 20 3c 76 61 6c 3e 20 2d 20 46 69 6c 6c 20     bf <val> - Fill 
     540:	77 6f 72 6b 69 6e 67 20 62 75 66 66 65 72 0a 5b     working buffer.[
     550:	46 69 6c 65 20 73 79 73 74 65 6d 20 63 6f 6e 74     File system cont
     560:	72 6f 6c 73 5d 0a 20 66 69 20 3c 6c 64 23 3e 20     rols]. fi <ld#> 
     570:	2d 20 46 6f 72 63 65 20 69 6e 69 74 69 61 6c 69     - Force initiali
     580:	7a 65 64 20 74 68 65 20 76 6f 6c 75 6d 65 0a 20     zed the volume. 
     590:	66 73 20 5b 3c 70 61 74 68 3e 5d 20 2d 20 53 68     fs [<path>] - Sh
     5a0:	6f 77 20 76 6f 6c 75 6d 65 20 73 74 61 74 75 73     ow volume status
     5b0:	0a 20 66 6c 20 5b 3c 70 61 74 68 3e 5d 20 2d 20     . fl [<path>] - 
     5c0:	53 68 6f 77 20 61 20 64 69 72 65 63 74 6f 72 79     Show a directory
     5d0:	0a 20 66 6f 20 3c 6d 6f 64 65 3e 20 3c 66 69 6c     . fo <mode> <fil
     5e0:	65 3e 20 2d 20 4f 70 65 6e 20 61 20 66 69 6c 65     e> - Open a file
     5f0:	0a 20 66 63 20 2d 20 43 6c 6f 73 65 20 74 68 65     . fc - Close the
     600:	20 66 69 6c 65 0a 20 66 65 20 3c 6f 66 73 3e 20      file. fe <ofs> 
     610:	2d 20 4d 6f 76 65 20 66 70 20 69 6e 20 6e 6f 72     - Move fp in nor
     620:	6d 61 6c 20 73 65 65 6b 0a 20 66 64 20 3c 6c 65     mal seek. fd <le
     630:	6e 3e 20 2d 20 52 65 61 64 20 61 6e 64 20 64 75     n> - Read and du
     640:	6d 70 20 74 68 65 20 66 69 6c 65 0a 20 66 72 20     mp the file. fr 
     650:	3c 6c 65 6e 3e 20 2d 20 52 65 61 64 20 74 68 65     <len> - Read the
     660:	20 66 69 6c 65 0a 20 66 77 20 3c 6c 65 6e 3e 20      file. fw <len> 
     670:	3c 76 61 6c 3e 20 2d 20 57 72 69 74 65 20 74 6f     <val> - Write to
     680:	20 74 68 65 20 66 69 6c 65 0a 20 66 6e 20 3c 6f      the file. fn <o
     690:	72 67 20 6e 61 6d 65 3e 20 3c 6e 65 77 20 6e 61     rg name> <new na
     6a0:	6d 65 3e 20 2d 20 52 65 6e 61 6d 65 20 61 6e 20     me> - Rename an 
     6b0:	6f 62 6a 65 63 74 0a 20 66 75 20 3c 6f 62 6a 20     object. fu <obj 
     6c0:	6e 61 6d 65 3e 20 2d 20 55 6e 6c 69 6e 6b 20 61     name> - Unlink a
     6d0:	6e 20 6f 62 6a 65 63 74 0a 20 66 76 20 2d 20 54     n object. fv - T
     6e0:	72 75 6e 63 61 74 65 20 74 68 65 20 66 69 6c 65     runcate the file
     6f0:	20 61 74 20 63 75 72 72 65 6e 74 20 66 70 0a 20      at current fp. 
     700:	66 6b 20 3c 64 69 72 20 6e 61 6d 65 3e 20 2d 20     fk <dir name> - 
     710:	43 72 65 61 74 65 20 61 20 64 69 72 65 63 74 6f     Create a directo
     720:	72 79 0a 20 66 61 20 3c 61 74 72 72 3e 20 3c 6d     ry. fa <atrr> <m
     730:	61 73 6b 3e 20 3c 6f 62 6a 65 63 74 20 6e 61 6d     ask> <object nam
     740:	65 3e 20 2d 20 43 68 61 6e 67 65 20 6f 62 6a 65     e> - Change obje
     750:	63 74 20 61 74 74 72 69 62 75 74 65 0a 20 66 74     ct attribute. ft
     760:	20 3c 79 65 61 72 3e 20 3c 6d 6f 6e 74 68 3e 20      <year> <month> 
     770:	3c 64 61 79 3e 20 3c 68 6f 75 72 3e 20 3c 6d 69     <day> <hour> <mi
     780:	6e 3e 20 3c 73 65 63 3e 20 3c 6f 62 6a 65 63 74     n> <sec> <object
     790:	20 6e 61 6d 65 3e 20 2d 20 43 68 61 6e 67 65 20      name> - Change 
     7a0:	74 69 6d 65 73 74 61 6d 70 20 6f 66 20 61 6e 20     timestamp of an 
     7b0:	6f 62 6a 65 63 74 0a 20 66 78 20 3c 73 72 63 20     object. fx <src 
     7c0:	66 69 6c 65 3e 20 3c 64 73 74 20 66 69 6c 65 3e     file> <dst file>
     7d0:	20 2d 20 43 6f 70 79 20 61 20 66 69 6c 65 0a 20      - Copy a file. 
     7e0:	66 67 20 3c 70 61 74 68 3e 20 2d 20 43 68 61 6e     fg <path> - Chan
     7f0:	67 65 20 63 75 72 72 65 6e 74 20 64 69 72 65 63     ge current direc
     800:	74 6f 72 79 0a 20 66 6a 20 3c 6c 64 23 3e 20 2d     tory. fj <ld#> -
     810:	20 43 68 61 6e 67 65 20 63 75 72 72 65 6e 74 20      Change current 
     820:	64 72 69 76 65 0a 20 66 71 20 2d 20 53 68 6f 77     drive. fq - Show
     830:	20 63 75 72 72 65 6e 74 20 64 69 72 65 63 74 6f      current directo
     840:	72 79 0a 20 66 6d 20 3c 6c 64 23 3e 20 3c 72 75     ry. fm <ld#> <ru
     850:	6c 65 3e 20 3c 63 6c 75 73 74 65 72 20 73 69 7a     le> <cluster siz
     860:	65 3e 20 2d 20 43 72 65 61 74 65 20 66 69 6c 65     e> - Create file
     870:	20 73 79 73 74 65 6d 0a 5b 4d 69 73 63 20 63 6f      system.[Misc co
     880:	6d 6d 61 6e 64 73 5d 0a 20 70 20 3c 77 61 76 66     mmands]. p <wavf
     890:	69 6c 65 3e 20 2d 20 50 6c 61 79 20 52 49 46 46     ile> - Play RIFF
     8a0:	2d 57 41 56 45 20 66 69 6c 65 0a 20 74 20 5b 3c     -WAVE file. t [<
     8b0:	79 65 61 72 3e 20 3c 6d 6f 6e 74 68 3e 20 3c 6d     year> <month> <m
     8c0:	64 61 79 3e 20 3c 68 6f 75 72 3e 20 3c 6d 69 6e     day> <hour> <min
     8d0:	3e 20 3c 73 65 63 3e 5d 20 2d 20 53 65 74 2f 53     > <sec>] - Set/S
     8e0:	68 6f 77 20 63 75 72 72 65 6e 74 20 74 69 6d 65     how current time
     8f0:	0a 0a 00                                            ...

000008f3 <__c.1806>:
     8f3:	25 30 38 6c 58 20 00                                %08lX .

000008fa <__c.1808>:
     8fa:	20 25 30 32 58 00                                    %02X.

00000900 <__c.1853>:
     900:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00 00           rc=%u FR_%S...

0000090e <__ctors_end>:
     90e:	11 24       	eor	r1, r1
     910:	1f be       	out	0x3f, r1	; 63
     912:	cf ef       	ldi	r28, 0xFF	; 255
     914:	d0 e1       	ldi	r29, 0x10	; 16
     916:	de bf       	out	0x3e, r29	; 62
     918:	cd bf       	out	0x3d, r28	; 61

0000091a <__do_copy_data>:
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b1 e0       	ldi	r27, 0x01	; 1
     920:	e8 e1       	ldi	r30, 0x18	; 24
     922:	fd e6       	ldi	r31, 0x6D	; 109
     924:	02 c0       	rjmp	.+4      	; 0x92a <__do_copy_data+0x10>
     926:	05 90       	lpm	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	a0 3f       	cpi	r26, 0xF0	; 240
     92c:	b1 07       	cpc	r27, r17
     92e:	d9 f7       	brne	.-10     	; 0x926 <__do_copy_data+0xc>

00000930 <__do_clear_bss>:
     930:	1d e0       	ldi	r17, 0x0D	; 13
     932:	a0 ef       	ldi	r26, 0xF0	; 240
     934:	b1 e0       	ldi	r27, 0x01	; 1
     936:	01 c0       	rjmp	.+2      	; 0x93a <.do_clear_bss_start>

00000938 <.do_clear_bss_loop>:
     938:	1d 92       	st	X+, r1

0000093a <.do_clear_bss_start>:
     93a:	a7 37       	cpi	r26, 0x77	; 119
     93c:	b1 07       	cpc	r27, r17
     93e:	e1 f7       	brne	.-8      	; 0x938 <.do_clear_bss_loop>
     940:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <main>
     944:	0c 94 8a 36 	jmp	0x6d14	; 0x6d14 <_exit>

00000948 <__bad_interrupt>:
     948:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000094c <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     94c:	1c bc       	out	0x2c, r1	; 44
// 	DDRB  &= ~0b00110111;	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
// 	PORTB &= ~0b00000111;
// 	PORTB |=  0b00110000;


	PORTB = ~0b00010000;      // SS high
     94e:	8f ee       	ldi	r24, 0xEF	; 239
     950:	85 b9       	out	0x05, r24	; 5
	DDRB =  ~0b10110000;      // !SS,SCK and MOSI outputs
     952:	8f e4       	ldi	r24, 0x4F	; 79
     954:	84 b9       	out	0x04, r24	; 4
// 	{	/* Remove this block if no socket power control */
// 		PORTE |= _BV(7);		/* Socket power off (PE7=high) */
// 		for (Timer1 = 20; Timer1; );	/* Wait for 20ms */
// 	}
}
     956:	08 95       	ret

00000958 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     958:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <xchg_spi+0x2>
	return SPDR;
     960:	8e b5       	in	r24, 0x2e	; 46
}
     962:	08 95       	ret

00000964 <wait_ready>:
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     964:	82 e3       	ldi	r24, 0x32	; 50
     966:	80 93 f0 01 	sts	0x01F0, r24
	do
		d = xchg_spi(0xFF);
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	while (d != 0xFF && Timer2);
     970:	8f 3f       	cpi	r24, 0xFF	; 255
     972:	21 f0       	breq	.+8      	; 0x97c <wait_ready+0x18>
     974:	90 91 f0 01 	lds	r25, 0x01F0
     978:	99 23       	and	r25, r25
     97a:	b9 f7       	brne	.-18     	; 0x96a <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	11 f0       	breq	.+4      	; 0x988 <wait_ready+0x24>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
}
     988:	82 2f       	mov	r24, r18
     98a:	93 2f       	mov	r25, r19
     98c:	08 95       	ret

0000098e <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     98e:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
}
     996:	08 95       	ret

00000998 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     998:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
     9a0:	0e 94 b2 04 	call	0x964	; 0x964 <wait_ready>
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	29 f4       	brne	.+10     	; 0x9b2 <select+0x1a>
	deselect();
     9a8:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
	return 0;	/* Timeout */
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
     9b6:	08 95       	ret

000009b8 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     9c4:	84 e1       	ldi	r24, 0x14	; 20
     9c6:	80 93 f1 01 	sts	0x01F1, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <rcvr_datablock+0x2a>
     9d4:	80 91 f1 01 	lds	r24, 0x01F1
     9d8:	88 23       	and	r24, r24
     9da:	b9 f7       	brne	.-18     	; 0x9ca <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	1e c0       	rjmp	.+60     	; 0xa1e <rcvr_datablock+0x66>
     9e2:	8e 3f       	cpi	r24, 0xFE	; 254
     9e4:	d1 f4       	brne	.+52     	; 0xa1a <rcvr_datablock+0x62>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	8e bd       	out	0x2e, r24	; 46
     9ea:	0d b4       	in	r0, 0x2d	; 45
     9ec:	07 fe       	sbrs	r0, 7
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <rcvr_datablock+0x32>
     9f0:	9e b5       	in	r25, 0x2e	; 46
     9f2:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     9f4:	8e bd       	out	0x2e, r24	; 46
     9f6:	0d b4       	in	r0, 0x2d	; 45
     9f8:	07 fe       	sbrs	r0, 7
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <rcvr_datablock+0x3e>
     9fc:	9e b5       	in	r25, 0x2e	; 46
     9fe:	99 83       	std	Y+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     a00:	22 96       	adiw	r28, 0x02	; 2
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
	} while (cnt -= 2);
     a02:	02 50       	subi	r16, 0x02	; 2
     a04:	10 40       	sbci	r17, 0x00	; 0
     a06:	81 f7       	brne	.-32     	; 0x9e8 <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	xchg_spi(0xFF);
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>

	return 1;						/* Return with success */
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ec 01       	movw	r28, r24
     a30:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready()) return 0;
     a32:	0e 94 b2 04 	call	0x964	; 0x964 <wait_ready>
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	41 f1       	breq	.+80     	; 0xa8a <xmit_datablock+0x62>

	xchg_spi(token);					/* Xmit data token */
     a3a:	81 2f       	mov	r24, r17
     a3c:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     a40:	1d 3f       	cpi	r17, 0xFD	; 253
     a42:	31 f1       	breq	.+76     	; 0xa90 <xmit_datablock+0x68>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     a44:	ce 01       	movw	r24, r28
     a46:	80 50       	subi	r24, 0x00	; 0
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     a4a:	28 81       	ld	r18, Y
     a4c:	2e bd       	out	0x2e, r18	; 46
     a4e:	0d b4       	in	r0, 0x2d	; 45
     a50:	07 fe       	sbrs	r0, 7
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <xmit_datablock+0x26>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     a54:	29 81       	ldd	r18, Y+1	; 0x01
     a56:	2e bd       	out	0x2e, r18	; 46
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     a58:	22 96       	adiw	r28, 0x02	; 2
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     a5a:	0d b4       	in	r0, 0x2d	; 45
     a5c:	07 fe       	sbrs	r0, 7
     a5e:	fd cf       	rjmp	.-6      	; 0xa5a <xmit_datablock+0x32>
	} while (cnt -= 2);
     a60:	8c 17       	cp	r24, r28
     a62:	9d 07       	cpc	r25, r29
     a64:	91 f7       	brne	.-28     	; 0xa4a <xmit_datablock+0x22>
	if (!wait_ready()) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
		xchg_spi(0xFF);
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     a78:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	85 30       	cpi	r24, 0x05	; 5
     a80:	11 f0       	breq	.+4      	; 0xa86 <xmit_datablock+0x5e>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp;


	if (!wait_ready()) return 0;
     a86:	c9 01       	movw	r24, r18
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <xmit_datablock+0x6c>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <xmit_datablock+0x6c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	08 95       	ret

00000a9c <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	c8 2f       	mov	r28, r24
     aa8:	d4 2f       	mov	r29, r20
     aaa:	15 2f       	mov	r17, r21
     aac:	06 2f       	mov	r16, r22
     aae:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     ab0:	88 23       	and	r24, r24
     ab2:	4c f4       	brge	.+18     	; 0xac6 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ab4:	87 e3       	ldi	r24, 0x37	; 55
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	ba 01       	movw	r22, r20
     abc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
		if (res > 1) return res;
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	68 f5       	brcc	.+90     	; 0xb1e <send_cmd+0x82>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     ac4:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     ac6:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
	if (!select()) return 0xFF;
     aca:	0e 94 cc 04 	call	0x998	; 0x998 <select>
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	29 f1       	breq	.+74     	; 0xb1c <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     ad2:	8c 2f       	mov	r24, r28
     ad4:	80 64       	ori	r24, 0x40	; 64
     ad6:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     ada:	8f 2d       	mov	r24, r15
     adc:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     ae0:	80 2f       	mov	r24, r16
     ae2:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     ae6:	81 2f       	mov	r24, r17
     ae8:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     aec:	8d 2f       	mov	r24, r29
     aee:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     af2:	cc 23       	and	r28, r28
     af4:	f1 f0       	breq	.+60     	; 0xb32 <send_cmd+0x96>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     af6:	c8 30       	cpi	r28, 0x08	; 8
     af8:	c1 f0       	breq	.+48     	; 0xb2a <send_cmd+0x8e>
	xchg_spi(n);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     b00:	cc 30       	cpi	r28, 0x0C	; 12
     b02:	19 f4       	brne	.+6      	; 0xb0a <send_cmd+0x6e>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     b0a:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
	while ((res & 0x80) && --n);
     b12:	88 23       	and	r24, r24
     b14:	24 f4       	brge	.+8      	; 0xb1e <send_cmd+0x82>
     b16:	c1 50       	subi	r28, 0x01	; 1
     b18:	c9 f7       	brne	.-14     	; 0xb0c <send_cmd+0x70>
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <send_cmd+0x82>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	08 95       	ret
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     b2a:	87 e8       	ldi	r24, 0x87	; 135
     b2c:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
     b30:	ec cf       	rjmp	.-40     	; 0xb0a <send_cmd+0x6e>
     b32:	85 e9       	ldi	r24, 0x95	; 149
     b34:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
     b38:	e8 cf       	rjmp	.-48     	; 0xb0a <send_cmd+0x6e>

00000b3a <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <disk_initialize+0x12>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <disk_initialize+0x14>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <disk_initialize+0x1e>
     b56:	a8 c0       	rjmp	.+336    	; 0xca8 <disk_initialize+0x16e>
	power_off();						/* Turn off the socket power to reset the card */
     b58:	0e 94 a6 04 	call	0x94c	; 0x94c <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     b5c:	80 91 00 01 	lds	r24, 0x0100
     b60:	81 ff       	sbrs	r24, 1
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <disk_initialize+0x30>
     b64:	80 91 00 01 	lds	r24, 0x0100
     b68:	a0 c0       	rjmp	.+320    	; 0xcaa <disk_initialize+0x170>
	// Configure for: PB4 - /SS
	//                PB5 - MOSI
	//                PB6 - MISO
	//                PB7 - SCK

	PORTB = 0b00010000;      // SS high
     b6a:	80 e1       	ldi	r24, 0x10	; 16
     b6c:	85 b9       	out	0x05, r24	; 5
	DDRB =  0b10110000;      // !SS,SCK and MOSI outputs
     b6e:	80 eb       	ldi	r24, 0xB0	; 176
     b70:	84 b9       	out	0x04, r24	; 4

	/* Set MOSI and SCK output, all others input */
	//DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     b72:	81 e5       	ldi	r24, 0x51	; 81
     b74:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     b76:	82 e5       	ldi	r24, 0x52	; 82
     b78:	8c bd       	out	0x2c, r24	; 44
     b7a:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
     b82:	01 50       	subi	r16, 0x01	; 1
     b84:	d9 f7       	brne	.-10     	; 0xb7c <disk_initialize+0x42>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	ba 01       	movw	r22, r20
     b8e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	09 f0       	breq	.+2      	; 0xb98 <disk_initialize+0x5e>
     b96:	9c c0       	rjmp	.+312    	; 0xcd0 <disk_initialize+0x196>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     b98:	84 e6       	ldi	r24, 0x64	; 100
     b9a:	80 93 f1 01 	sts	0x01F1, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	4a ea       	ldi	r20, 0xAA	; 170
     ba2:	51 e0       	ldi	r21, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <disk_initialize+0x78>
     bb0:	42 c0       	rjmp	.+132    	; 0xc36 <disk_initialize+0xfc>
     bb2:	6e 01       	movw	r12, r28
     bb4:	08 94       	sec
     bb6:	c1 1c       	adc	r12, r1
     bb8:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
     bba:	8e 01       	movw	r16, r28
     bbc:	0b 5f       	subi	r16, 0xFB	; 251
     bbe:	1f 4f       	sbci	r17, 0xFF	; 255
     bc0:	76 01       	movw	r14, r12

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
     bc8:	f7 01       	movw	r30, r14
     bca:	81 93       	st	Z+, r24
     bcc:	7f 01       	movw	r14, r30
     bce:	e0 17       	cp	r30, r16
     bd0:	f1 07       	cpc	r31, r17
     bd2:	b9 f7       	brne	.-18     	; 0xbc2 <disk_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <disk_initialize+0xa2>
     bda:	7a c0       	rjmp	.+244    	; 0xcd0 <disk_initialize+0x196>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	8a 3a       	cpi	r24, 0xAA	; 170
     be0:	09 f0       	breq	.+2      	; 0xbe4 <disk_initialize+0xaa>
     be2:	76 c0       	rjmp	.+236    	; 0xcd0 <disk_initialize+0x196>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     be4:	80 91 f1 01 	lds	r24, 0x01F1
     be8:	88 23       	and	r24, r24
     bea:	49 f0       	breq	.+18     	; 0xbfe <disk_initialize+0xc4>
     bec:	89 ea       	ldi	r24, 0xA9	; 169
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e4       	ldi	r23, 0x40	; 64
     bf6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     bfa:	88 23       	and	r24, r24
     bfc:	99 f7       	brne	.-26     	; 0xbe4 <disk_initialize+0xaa>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     bfe:	80 91 f1 01 	lds	r24, 0x01F1
     c02:	88 23       	and	r24, r24
     c04:	09 f4       	brne	.+2      	; 0xc08 <disk_initialize+0xce>
     c06:	64 c0       	rjmp	.+200    	; 0xcd0 <disk_initialize+0x196>
     c08:	8a e3       	ldi	r24, 0x3A	; 58
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	ba 01       	movw	r22, r20
     c10:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     c14:	88 23       	and	r24, r24
     c16:	09 f0       	breq	.+2      	; 0xc1a <disk_initialize+0xe0>
     c18:	5b c0       	rjmp	.+182    	; 0xcd0 <disk_initialize+0x196>
     c1a:	04 e0       	ldi	r16, 0x04	; 4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
     c22:	f6 01       	movw	r30, r12
     c24:	81 93       	st	Z+, r24
     c26:	6f 01       	movw	r12, r30
     c28:	01 50       	subi	r16, 0x01	; 1
     c2a:	c1 f7       	brne	.-16     	; 0xc1c <disk_initialize+0xe2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	86 fd       	sbrc	r24, 6
     c30:	49 c0       	rjmp	.+146    	; 0xcc4 <disk_initialize+0x18a>
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	48 c0       	rjmp	.+144    	; 0xcc6 <disk_initialize+0x18c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     c36:	89 ea       	ldi	r24, 0xA9	; 169
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	ba 01       	movw	r22, r20
     c3e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	18 f4       	brcc	.+6      	; 0xc4c <disk_initialize+0x112>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     c46:	12 e0       	ldi	r17, 0x02	; 2
     c48:	09 ea       	ldi	r16, 0xA9	; 169
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <disk_initialize+0x116>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     c4c:	11 e0       	ldi	r17, 0x01	; 1
     c4e:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     c50:	80 91 f1 01 	lds	r24, 0x01F1
     c54:	88 23       	and	r24, r24
     c56:	41 f0       	breq	.+16     	; 0xc68 <disk_initialize+0x12e>
     c58:	80 2f       	mov	r24, r16
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	ba 01       	movw	r22, r20
     c60:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     c64:	88 23       	and	r24, r24
     c66:	a1 f7       	brne	.-24     	; 0xc50 <disk_initialize+0x116>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     c68:	80 91 f1 01 	lds	r24, 0x01F1
     c6c:	88 23       	and	r24, r24
     c6e:	81 f1       	breq	.+96     	; 0xcd0 <disk_initialize+0x196>
     c70:	80 e1       	ldi	r24, 0x10	; 16
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	52 e0       	ldi	r21, 0x02	; 2
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     c7e:	88 23       	and	r24, r24
     c80:	39 f5       	brne	.+78     	; 0xcd0 <disk_initialize+0x196>
				ty = 0;
		}
	}
	CardType = ty;
     c82:	10 93 f2 01 	sts	0x01F2, r17
	deselect();
     c86:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>

	if (ty) {			/* Initialization succeded */
     c8a:	11 23       	and	r17, r17
     c8c:	41 f0       	breq	.+16     	; 0xc9e <disk_initialize+0x164>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     c8e:	80 91 00 01 	lds	r24, 0x0100
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
     c98:	80 e5       	ldi	r24, 0x50	; 80
     c9a:	8c bd       	out	0x2c, r24	; 44
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <disk_initialize+0x168>
	} else {			/* Initialization failed */
		power_off();
     c9e:	0e 94 a6 04 	call	0x94c	; 0x94c <power_off>
	}

	return Stat;
     ca2:	80 91 00 01 	lds	r24, 0x0100
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <disk_initialize+0x170>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     ca8:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	08 95       	ret
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     cc4:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     cc6:	80 93 f2 01 	sts	0x01F2, r24
	deselect();
     cca:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
     cce:	df cf       	rjmp	.-66     	; 0xc8e <disk_initialize+0x154>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     cd0:	10 92 f2 01 	sts	0x01F2, r1
	deselect();
     cd4:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
     cd8:	e2 cf       	rjmp	.-60     	; 0xc9e <disk_initialize+0x164>

00000cda <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     cda:	88 23       	and	r24, r24
     cdc:	19 f4       	brne	.+6      	; 0xce4 <disk_status+0xa>
	return Stat;
     cde:	80 91 00 01 	lds	r24, 0x0100
     ce2:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     ce4:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     ce6:	08 95       	ret

00000ce8 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     ce8:	0f 93       	push	r16
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     cf0:	88 23       	and	r24, r24
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <disk_read+0xe>
     cf4:	46 c0       	rjmp	.+140    	; 0xd82 <disk_read+0x9a>
     cf6:	00 23       	and	r16, r16
     cf8:	09 f4       	brne	.+2      	; 0xcfc <disk_read+0x14>
     cfa:	45 c0       	rjmp	.+138    	; 0xd86 <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     cfc:	80 91 00 01 	lds	r24, 0x0100
     d00:	80 fd       	sbrc	r24, 0
     d02:	43 c0       	rjmp	.+134    	; 0xd8a <disk_read+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     d04:	80 91 f2 01 	lds	r24, 0x01F2
     d08:	83 fd       	sbrc	r24, 3
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <disk_read+0x36>
     d0c:	01 2e       	mov	r0, r17
     d0e:	19 e0       	ldi	r17, 0x09	; 9
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	44 1f       	adc	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	1a 95       	dec	r17
     d1a:	d1 f7       	brne	.-12     	; 0xd10 <disk_read+0x28>
     d1c:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     d1e:	01 30       	cpi	r16, 0x01	; 1
     d20:	79 f4       	brne	.+30     	; 0xd40 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     d22:	81 e1       	ldi	r24, 0x11	; 17
     d24:	ba 01       	movw	r22, r20
     d26:	a9 01       	movw	r20, r18
     d28:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     d2c:	88 23       	and	r24, r24
     d2e:	11 f5       	brne	.+68     	; 0xd74 <disk_read+0x8c>
			&& rcvr_datablock(buff, 512))
     d30:	ce 01       	movw	r24, r28
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	72 e0       	ldi	r23, 0x02	; 2
     d36:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	d1 f4       	brne	.+52     	; 0xd72 <disk_read+0x8a>
     d3e:	1a c0       	rjmp	.+52     	; 0xd74 <disk_read+0x8c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     d40:	82 e1       	ldi	r24, 0x12	; 18
     d42:	ba 01       	movw	r22, r20
     d44:	a9 01       	movw	r20, r18
     d46:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     d4a:	88 23       	and	r24, r24
     d4c:	99 f4       	brne	.+38     	; 0xd74 <disk_read+0x8c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     d4e:	ce 01       	movw	r24, r28
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	72 e0       	ldi	r23, 0x02	; 2
     d54:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	21 f0       	breq	.+8      	; 0xd64 <disk_read+0x7c>
				buff += 512;
     d5c:	c0 50       	subi	r28, 0x00	; 0
     d5e:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     d60:	01 50       	subi	r16, 0x01	; 1
     d62:	a9 f7       	brne	.-22     	; 0xd4e <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     d64:	8c e0       	ldi	r24, 0x0C	; 12
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	ba 01       	movw	r22, r20
     d6c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
     d72:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
     d74:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>

	return count ? RES_ERROR : RES_OK;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	00 23       	and	r16, r16
     d7c:	39 f4       	brne	.+14     	; 0xd8c <disk_read+0xa4>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <disk_read+0xa4>
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d8a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	eb 01       	movw	r28, r22
     da4:	69 01       	movw	r12, r18
     da6:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     da8:	88 23       	and	r24, r24
     daa:	09 f0       	breq	.+2      	; 0xdae <disk_write+0x1a>
     dac:	57 c0       	rjmp	.+174    	; 0xe5c <disk_write+0xc8>
     dae:	00 23       	and	r16, r16
     db0:	09 f4       	brne	.+2      	; 0xdb4 <disk_write+0x20>
     db2:	56 c0       	rjmp	.+172    	; 0xe60 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     db4:	80 91 00 01 	lds	r24, 0x0100
     db8:	80 fd       	sbrc	r24, 0
     dba:	54 c0       	rjmp	.+168    	; 0xe64 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     dbc:	80 91 00 01 	lds	r24, 0x0100
     dc0:	82 fd       	sbrc	r24, 2
     dc2:	52 c0       	rjmp	.+164    	; 0xe68 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     dc4:	80 91 f2 01 	lds	r24, 0x01F2
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	83 fd       	sbrc	r24, 3
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <disk_write+0x4c>
     dce:	0b 2e       	mov	r0, r27
     dd0:	b9 e0       	ldi	r27, 0x09	; 9
     dd2:	cc 0c       	add	r12, r12
     dd4:	dd 1c       	adc	r13, r13
     dd6:	ee 1c       	adc	r14, r14
     dd8:	ff 1c       	adc	r15, r15
     dda:	ba 95       	dec	r27
     ddc:	d1 f7       	brne	.-12     	; 0xdd2 <disk_write+0x3e>
     dde:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     de0:	01 30       	cpi	r16, 0x01	; 1
     de2:	71 f4       	brne	.+28     	; 0xe00 <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     de4:	88 e1       	ldi	r24, 0x18	; 24
     de6:	b7 01       	movw	r22, r14
     de8:	a6 01       	movw	r20, r12
     dea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     dee:	88 23       	and	r24, r24
     df0:	71 f5       	brne	.+92     	; 0xe4e <disk_write+0xba>
			&& xmit_datablock(buff, 0xFE))
     df2:	ce 01       	movw	r24, r28
     df4:	6e ef       	ldi	r22, 0xFE	; 254
     df6:	0e 94 14 05 	call	0xa28	; 0xa28 <xmit_datablock>
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	29 f5       	brne	.+74     	; 0xe48 <disk_write+0xb4>
     dfe:	27 c0       	rjmp	.+78     	; 0xe4e <disk_write+0xba>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     e00:	86 70       	andi	r24, 0x06	; 6
     e02:	90 70       	andi	r25, 0x00	; 0
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	39 f0       	breq	.+14     	; 0xe16 <disk_write+0x82>
     e08:	40 2f       	mov	r20, r16
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	87 e9       	ldi	r24, 0x97	; 151
     e12:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     e16:	89 e1       	ldi	r24, 0x19	; 25
     e18:	b7 01       	movw	r22, r14
     e1a:	a6 01       	movw	r20, r12
     e1c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     e20:	88 23       	and	r24, r24
     e22:	a9 f4       	brne	.+42     	; 0xe4e <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     e24:	ce 01       	movw	r24, r28
     e26:	6c ef       	ldi	r22, 0xFC	; 252
     e28:	0e 94 14 05 	call	0xa28	; 0xa28 <xmit_datablock>
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	21 f0       	breq	.+8      	; 0xe38 <disk_write+0xa4>
				buff += 512;
     e30:	c0 50       	subi	r28, 0x00	; 0
     e32:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     e34:	01 50       	subi	r16, 0x01	; 1
     e36:	b1 f7       	brne	.-20     	; 0xe24 <disk_write+0x90>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	6d ef       	ldi	r22, 0xFD	; 253
     e3e:	0e 94 14 05 	call	0xa28	; 0xa28 <xmit_datablock>
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	19 f0       	breq	.+6      	; 0xe4c <disk_write+0xb8>
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <disk_write+0xba>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     e4c:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
     e4e:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>

	return count ? RES_ERROR : RES_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	00 23       	and	r16, r16
     e56:	49 f4       	brne	.+18     	; 0xe6a <disk_write+0xd6>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	07 c0       	rjmp	.+14     	; 0xe6a <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <disk_write+0xd6>
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e68:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	60 97       	sbiw	r28, 0x10	; 16
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     e98:	88 23       	and	r24, r24
     e9a:	09 f0       	breq	.+2      	; 0xe9e <disk_ioctl+0x24>
     e9c:	ce c1       	rjmp	.+924    	; 0x123a <__stack+0x13b>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     e9e:	65 30       	cpi	r22, 0x05	; 5
     ea0:	89 f4       	brne	.+34     	; 0xec4 <disk_ioctl+0x4a>
		switch (ptr[0]) {
     ea2:	fa 01       	movw	r30, r20
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <disk_ioctl+0x38>
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <disk_ioctl+0x36>
     eae:	c7 c1       	rjmp	.+910    	; 0x123e <__stack+0x13f>
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <disk_ioctl+0x40>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
     eb2:	0e 94 a6 04 	call	0x94c	; 0x94c <power_off>
			res = RES_OK;
     eb6:	00 e0       	ldi	r16, 0x00	; 0
			break;
     eb8:	c5 c1       	rjmp	.+906    	; 0x1244 <__stack+0x145>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	fa 01       	movw	r30, r20
     ebe:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     ec0:	00 e0       	ldi	r16, 0x00	; 0
			break;
     ec2:	c0 c1       	rjmp	.+896    	; 0x1244 <__stack+0x145>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     ec4:	80 91 00 01 	lds	r24, 0x0100
     ec8:	80 fd       	sbrc	r24, 0
     eca:	bb c1       	rjmp	.+886    	; 0x1242 <__stack+0x143>

		switch (ctrl) {
     ecc:	6a 30       	cpi	r22, 0x0A	; 10
     ece:	09 f4       	brne	.+2      	; 0xed2 <disk_ioctl+0x58>
     ed0:	3e c1       	rjmp	.+636    	; 0x114e <__stack+0x4f>
     ed2:	6b 30       	cpi	r22, 0x0B	; 11
     ed4:	58 f4       	brcc	.+22     	; 0xeec <disk_ioctl+0x72>
     ed6:	61 30       	cpi	r22, 0x01	; 1
     ed8:	f9 f0       	breq	.+62     	; 0xf18 <disk_ioctl+0x9e>
     eda:	61 30       	cpi	r22, 0x01	; 1
     edc:	a0 f0       	brcs	.+40     	; 0xf06 <disk_ioctl+0x8c>
     ede:	62 30       	cpi	r22, 0x02	; 2
     ee0:	09 f4       	brne	.+2      	; 0xee4 <disk_ioctl+0x6a>
     ee2:	96 c0       	rjmp	.+300    	; 0x1010 <disk_ioctl+0x196>
     ee4:	63 30       	cpi	r22, 0x03	; 3
     ee6:	09 f0       	breq	.+2      	; 0xeea <disk_ioctl+0x70>
     ee8:	88 c1       	rjmp	.+784    	; 0x11fa <__stack+0xfb>
     eea:	99 c0       	rjmp	.+306    	; 0x101e <disk_ioctl+0x1a4>
     eec:	6c 30       	cpi	r22, 0x0C	; 12
     eee:	09 f4       	brne	.+2      	; 0xef2 <disk_ioctl+0x78>
     ef0:	47 c1       	rjmp	.+654    	; 0x1180 <__stack+0x81>
     ef2:	6c 30       	cpi	r22, 0x0C	; 12
     ef4:	08 f4       	brcc	.+2      	; 0xef8 <disk_ioctl+0x7e>
     ef6:	31 c1       	rjmp	.+610    	; 0x115a <__stack+0x5b>
     ef8:	6d 30       	cpi	r22, 0x0D	; 13
     efa:	09 f4       	brne	.+2      	; 0xefe <disk_ioctl+0x84>
     efc:	54 c1       	rjmp	.+680    	; 0x11a6 <__stack+0xa7>
     efe:	6e 30       	cpi	r22, 0x0E	; 14
     f00:	09 f0       	breq	.+2      	; 0xf04 <disk_ioctl+0x8a>
     f02:	7b c1       	rjmp	.+758    	; 0x11fa <__stack+0xfb>
     f04:	66 c1       	rjmp	.+716    	; 0x11d2 <__stack+0xd3>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     f06:	0e 94 cc 04 	call	0x998	; 0x998 <select>
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	09 f4       	brne	.+2      	; 0xf10 <disk_ioctl+0x96>
     f0e:	77 c1       	rjmp	.+750    	; 0x11fe <__stack+0xff>
				deselect();
     f10:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
				res = RES_OK;
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	8e c1       	rjmp	.+796    	; 0x1234 <__stack+0x135>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     f18:	89 e0       	ldi	r24, 0x09	; 9
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	ba 01       	movw	r22, r20
     f20:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <disk_ioctl+0xb0>
     f28:	6c c1       	rjmp	.+728    	; 0x1202 <__stack+0x103>
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	60 e1       	ldi	r22, 0x10	; 16
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	09 f4       	brne	.+2      	; 0xf3c <disk_ioctl+0xc2>
     f3a:	65 c1       	rjmp	.+714    	; 0x1206 <__stack+0x107>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	82 95       	swap	r24
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	83 70       	andi	r24, 0x03	; 3
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	51 f5       	brne	.+84     	; 0xf9e <disk_ioctl+0x124>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     f4a:	48 85       	ldd	r20, Y+8	; 0x08
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	4f 73       	andi	r20, 0x3F	; 63
     f54:	50 70       	andi	r21, 0x00	; 0
     f56:	60 70       	andi	r22, 0x00	; 0
     f58:	70 70       	andi	r23, 0x00	; 0
     f5a:	ba 01       	movw	r22, r20
     f5c:	55 27       	eor	r21, r21
     f5e:	44 27       	eor	r20, r20
     f60:	4f 5f       	subi	r20, 0xFF	; 255
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	6f 4f       	sbci	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	99 85       	ldd	r25, Y+9	; 0x09
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f6e:	82 0f       	add	r24, r18
     f70:	91 1d       	adc	r25, r1
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	84 0f       	add	r24, r20
     f78:	95 1f       	adc	r25, r21
     f7a:	a6 1f       	adc	r26, r22
     f7c:	b7 1f       	adc	r27, r23
					*(DWORD*)buff = csize << 10;
     f7e:	07 2e       	mov	r0, r23
     f80:	7a e0       	ldi	r23, 0x0A	; 10
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	7a 95       	dec	r23
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <disk_ioctl+0x108>
     f8e:	70 2d       	mov	r23, r0
     f90:	f7 01       	movw	r30, r14
     f92:	80 83       	st	Z, r24
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	a2 83       	std	Z+2, r26	; 0x02
     f98:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	4b c1       	rjmp	.+662    	; 0x1234 <__stack+0x135>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     f9e:	29 85       	ldd	r18, Y+9	; 0x09
     fa0:	22 95       	swap	r18
     fa2:	26 95       	lsr	r18
     fa4:	26 95       	lsr	r18
     fa6:	23 70       	andi	r18, 0x03	; 3
     fa8:	88 85       	ldd	r24, Y+8	; 0x08
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	82 0f       	add	r24, r18
     fb6:	91 1d       	adc	r25, r1
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	2f 81       	ldd	r18, Y+7	; 0x07
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	23 70       	andi	r18, 0x03	; 3
     fc0:	30 70       	andi	r19, 0x00	; 0
     fc2:	32 2f       	mov	r19, r18
     fc4:	22 27       	eor	r18, r18
     fc6:	33 0f       	add	r19, r19
     fc8:	33 0f       	add	r19, r19
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	ac 01       	movw	r20, r24
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	9f 70       	andi	r25, 0x0F	; 15
     fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fda:	88 1f       	adc	r24, r24
     fdc:	88 27       	eor	r24, r24
     fde:	88 1f       	adc	r24, r24
     fe0:	98 0f       	add	r25, r24
     fe2:	9e 5f       	subi	r25, 0xFE	; 254
     fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fe6:	83 70       	andi	r24, 0x03	; 3
     fe8:	88 0f       	add	r24, r24
     fea:	89 0f       	add	r24, r25
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	09 97       	sbiw	r24, 0x09	; 9
     ff0:	8a 01       	movw	r16, r20
     ff2:	9b 01       	movw	r18, r22
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <disk_ioctl+0x184>
     ff6:	00 0f       	add	r16, r16
     ff8:	11 1f       	adc	r17, r17
     ffa:	22 1f       	adc	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	8a 95       	dec	r24
    1000:	d2 f7       	brpl	.-12     	; 0xff6 <disk_ioctl+0x17c>
    1002:	f7 01       	movw	r30, r14
    1004:	00 83       	st	Z, r16
    1006:	11 83       	std	Z+1, r17	; 0x01
    1008:	22 83       	std	Z+2, r18	; 0x02
    100a:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
    100c:	00 e0       	ldi	r16, 0x00	; 0
    100e:	12 c1       	rjmp	.+548    	; 0x1234 <__stack+0x135>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	92 e0       	ldi	r25, 0x02	; 2
    1014:	fa 01       	movw	r30, r20
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
			res = RES_OK;
    101a:	00 e0       	ldi	r16, 0x00	; 0
			break;
    101c:	0b c1       	rjmp	.+534    	; 0x1234 <__stack+0x135>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    101e:	00 91 f2 01 	lds	r16, 0x01F2
    1022:	02 ff       	sbrs	r16, 2
    1024:	2f c0       	rjmp	.+94     	; 0x1084 <disk_ioctl+0x20a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1026:	8d e8       	ldi	r24, 0x8D	; 141
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	ba 01       	movw	r22, r20
    102e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    1032:	88 23       	and	r24, r24
    1034:	09 f0       	breq	.+2      	; 0x1038 <disk_ioctl+0x1be>
    1036:	e9 c0       	rjmp	.+466    	; 0x120a <__stack+0x10b>
					xchg_spi(0xFF);
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    103e:	ce 01       	movw	r24, r28
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	60 e1       	ldi	r22, 0x10	; 16
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	09 f4       	brne	.+2      	; 0x1050 <disk_ioctl+0x1d6>
    104e:	df c0       	rjmp	.+446    	; 0x120e <__stack+0x10f>
    1050:	00 e3       	ldi	r16, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
    1058:	01 50       	subi	r16, 0x01	; 1
    105a:	d9 f7       	brne	.-10     	; 0x1052 <disk_ioctl+0x1d8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    105c:	2b 85       	ldd	r18, Y+11	; 0x0b
    105e:	22 95       	swap	r18
    1060:	2f 70       	andi	r18, 0x0F	; 15
    1062:	80 e1       	ldi	r24, 0x10	; 16
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e0       	ldi	r26, 0x00	; 0
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <disk_ioctl+0x1fa>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	2a 95       	dec	r18
    1076:	d2 f7       	brpl	.-12     	; 0x106c <disk_ioctl+0x1f2>
    1078:	f7 01       	movw	r30, r14
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	d8 c0       	rjmp	.+432    	; 0x1234 <__stack+0x135>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1084:	89 e0       	ldi	r24, 0x09	; 9
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	ba 01       	movw	r22, r20
    108c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    1090:	88 23       	and	r24, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <disk_ioctl+0x21c>
    1094:	be c0       	rjmp	.+380    	; 0x1212 <__stack+0x113>
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	60 e1       	ldi	r22, 0x10	; 16
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <disk_ioctl+0x22e>
    10a6:	b7 c0       	rjmp	.+366    	; 0x1216 <__stack+0x117>
					if (CardType & CT_SD1) {	/* SDv1 */
    10a8:	01 ff       	sbrs	r16, 1
    10aa:	25 c0       	rjmp	.+74     	; 0x10f6 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    10ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ae:	88 1f       	adc	r24, r24
    10b0:	88 27       	eor	r24, r24
    10b2:	88 1f       	adc	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	2f 73       	andi	r18, 0x3F	; 63
    10be:	30 70       	andi	r19, 0x00	; 0
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	28 0f       	add	r18, r24
    10c6:	39 1f       	adc	r19, r25
    10c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ca:	82 95       	swap	r24
    10cc:	86 95       	lsr	r24
    10ce:	86 95       	lsr	r24
    10d0:	83 70       	andi	r24, 0x03	; 3
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	89 01       	movw	r16, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <disk_ioctl+0x264>
    10da:	00 0f       	add	r16, r16
    10dc:	11 1f       	adc	r17, r17
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <disk_ioctl+0x260>
    10e2:	c8 01       	movw	r24, r16
    10e4:	a0 e0       	ldi	r26, 0x00	; 0
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	f7 01       	movw	r30, r14
    10ea:	80 83       	st	Z, r24
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	a2 83       	std	Z+2, r26	; 0x02
    10f0:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    10f2:	00 e0       	ldi	r16, 0x00	; 0
    10f4:	9f c0       	rjmp	.+318    	; 0x1234 <__stack+0x135>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    10f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f8:	48 2f       	mov	r20, r24
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	43 70       	andi	r20, 0x03	; 3
    10fe:	50 70       	andi	r21, 0x00	; 0
    1100:	44 0f       	add	r20, r20
    1102:	55 1f       	adc	r21, r21
    1104:	44 0f       	add	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	82 95       	swap	r24
    110e:	86 95       	lsr	r24
    1110:	87 70       	andi	r24, 0x07	; 7
    1112:	48 0f       	add	r20, r24
    1114:	51 1d       	adc	r21, r1
    1116:	4f 5f       	subi	r20, 0xFF	; 255
    1118:	5f 4f       	sbci	r21, 0xFF	; 255
    111a:	2b 85       	ldd	r18, Y+11	; 0x0b
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	2c 77       	andi	r18, 0x7C	; 124
    1120:	30 70       	andi	r19, 0x00	; 0
    1122:	35 95       	asr	r19
    1124:	27 95       	ror	r18
    1126:	35 95       	asr	r19
    1128:	27 95       	ror	r18
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	42 9f       	mul	r20, r18
    1130:	c0 01       	movw	r24, r0
    1132:	43 9f       	mul	r20, r19
    1134:	90 0d       	add	r25, r0
    1136:	52 9f       	mul	r21, r18
    1138:	90 0d       	add	r25, r0
    113a:	11 24       	eor	r1, r1
    113c:	a0 e0       	ldi	r26, 0x00	; 0
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	f7 01       	movw	r30, r14
    1142:	80 83       	st	Z, r24
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	a2 83       	std	Z+2, r26	; 0x02
    1148:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    114a:	00 e0       	ldi	r16, 0x00	; 0
    114c:	73 c0       	rjmp	.+230    	; 0x1234 <__stack+0x135>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    114e:	80 91 f2 01 	lds	r24, 0x01F2
    1152:	fa 01       	movw	r30, r20
    1154:	80 83       	st	Z, r24
			res = RES_OK;
    1156:	00 e0       	ldi	r16, 0x00	; 0
			break;
    1158:	6d c0       	rjmp	.+218    	; 0x1234 <__stack+0x135>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    115a:	89 e0       	ldi	r24, 0x09	; 9
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	ba 01       	movw	r22, r20
    1162:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <__stack+0x6d>
    116a:	57 c0       	rjmp	.+174    	; 0x121a <__stack+0x11b>
				&& rcvr_datablock(ptr, 16))
    116c:	c7 01       	movw	r24, r14
    116e:	60 e1       	ldi	r22, 0x10	; 16
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	09 f0       	breq	.+2      	; 0x117c <__stack+0x7d>
    117a:	51 c0       	rjmp	.+162    	; 0x121e <__stack+0x11f>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    117c:	01 e0       	ldi	r16, 0x01	; 1
    117e:	5a c0       	rjmp	.+180    	; 0x1234 <__stack+0x135>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	ba 01       	movw	r22, r20
    1188:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    118c:	88 23       	and	r24, r24
    118e:	09 f0       	breq	.+2      	; 0x1192 <__stack+0x93>
    1190:	48 c0       	rjmp	.+144    	; 0x1222 <__stack+0x123>
				&& rcvr_datablock(ptr, 16))
    1192:	c7 01       	movw	r24, r14
    1194:	60 e1       	ldi	r22, 0x10	; 16
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	09 f0       	breq	.+2      	; 0x11a2 <__stack+0xa3>
    11a0:	42 c0       	rjmp	.+132    	; 0x1226 <__stack+0x127>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    11a2:	01 e0       	ldi	r16, 0x01	; 1
    11a4:	47 c0       	rjmp	.+142    	; 0x1234 <__stack+0x135>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    11a6:	8a e3       	ldi	r24, 0x3A	; 58
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	ba 01       	movw	r22, r20
    11ae:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    11b2:	88 23       	and	r24, r24
    11b4:	d1 f5       	brne	.+116    	; 0x122a <__stack+0x12b>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
    11b6:	87 01       	movw	r16, r14
    11b8:	0c 5f       	subi	r16, 0xFC	; 252
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
    11c2:	f7 01       	movw	r30, r14
    11c4:	81 93       	st	Z+, r24
    11c6:	7f 01       	movw	r14, r30
    11c8:	e0 17       	cp	r30, r16
    11ca:	f1 07       	cpc	r31, r17
    11cc:	b9 f7       	brne	.-18     	; 0x11bc <__stack+0xbd>
				res = RES_OK;
    11ce:	00 e0       	ldi	r16, 0x00	; 0
    11d0:	31 c0       	rjmp	.+98     	; 0x1234 <__stack+0x135>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    11d2:	8d e8       	ldi	r24, 0x8D	; 141
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	ba 01       	movw	r22, r20
    11da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <send_cmd>
    11de:	88 23       	and	r24, r24
    11e0:	31 f5       	brne	.+76     	; 0x122e <__stack+0x12f>
				xchg_spi(0xFF);
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	0e 94 ac 04 	call	0x958	; 0x958 <xchg_spi>
				if (rcvr_datablock(ptr, 64))
    11e8:	c7 01       	movw	r24, r14
    11ea:	60 e4       	ldi	r22, 0x40	; 64
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <rcvr_datablock>
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	f1 f4       	brne	.+60     	; 0x1232 <__stack+0x133>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    11f6:	01 e0       	ldi	r16, 0x01	; 1
    11f8:	1d c0       	rjmp	.+58     	; 0x1234 <__stack+0x135>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    11fa:	04 e0       	ldi	r16, 0x04	; 4
    11fc:	1b c0       	rjmp	.+54     	; 0x1234 <__stack+0x135>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    11fe:	01 e0       	ldi	r16, 0x01	; 1
    1200:	19 c0       	rjmp	.+50     	; 0x1234 <__stack+0x135>
    1202:	01 e0       	ldi	r16, 0x01	; 1
    1204:	17 c0       	rjmp	.+46     	; 0x1234 <__stack+0x135>
    1206:	01 e0       	ldi	r16, 0x01	; 1
    1208:	15 c0       	rjmp	.+42     	; 0x1234 <__stack+0x135>
    120a:	01 e0       	ldi	r16, 0x01	; 1
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <__stack+0x135>
    120e:	01 e0       	ldi	r16, 0x01	; 1
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <__stack+0x135>
    1212:	01 e0       	ldi	r16, 0x01	; 1
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <__stack+0x135>
    1216:	01 e0       	ldi	r16, 0x01	; 1
    1218:	0d c0       	rjmp	.+26     	; 0x1234 <__stack+0x135>
    121a:	01 e0       	ldi	r16, 0x01	; 1
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <__stack+0x135>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
    121e:	00 e0       	ldi	r16, 0x00	; 0
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <__stack+0x135>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    1222:	01 e0       	ldi	r16, 0x01	; 1
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <__stack+0x135>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <__stack+0x135>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    122a:	01 e0       	ldi	r16, 0x01	; 1
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <__stack+0x135>
    122e:	01 e0       	ldi	r16, 0x01	; 1
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <__stack+0x135>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
    1232:	00 e0       	ldi	r16, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
    1234:	0e 94 c7 04 	call	0x98e	; 0x98e <deselect>
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <__stack+0x145>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
    123a:	04 e0       	ldi	r16, 0x04	; 4
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <__stack+0x145>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    123e:	04 e0       	ldi	r16, 0x04	; 4
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <__stack+0x145>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    1242:	03 e0       	ldi	r16, 0x03	; 3

		deselect();
	}

	return res;
}
    1244:	80 2f       	mov	r24, r16
    1246:	60 96       	adiw	r28, 0x10	; 16
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	08 95       	ret

00001260 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    1260:	80 91 f1 01 	lds	r24, 0x01F1
	if (n) Timer1 = --n;
    1264:	88 23       	and	r24, r24
    1266:	19 f0       	breq	.+6      	; 0x126e <disk_timerproc+0xe>
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	80 93 f1 01 	sts	0x01F1, r24
	n = Timer2;
    126e:	80 91 f0 01 	lds	r24, 0x01F0
	if (n) Timer2 = --n;
    1272:	88 23       	and	r24, r24
    1274:	19 f0       	breq	.+6      	; 0x127c <disk_timerproc+0x1c>
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	80 93 f0 01 	sts	0x01F0, r24

	s = Stat;
    127c:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
    1280:	18 9b       	sbis	0x03, 0	; 3
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <disk_timerproc+0x28>
		s |= STA_PROTECT;
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	01 c0       	rjmp	.+2      	; 0x128a <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    1288:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    128a:	19 99       	sbic	0x03, 1	; 3
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    1292:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    1294:	80 93 00 01 	sts	0x0100, r24
}
    1298:	08 95       	ret

0000129a <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    129a:	41 15       	cp	r20, r1
    129c:	51 05       	cpc	r21, r1
    129e:	49 f0       	breq	.+18     	; 0x12b2 <mem_cpy+0x18>
    12a0:	a6 2f       	mov	r26, r22
    12a2:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    12a4:	e8 2f       	mov	r30, r24
    12a6:	f9 2f       	mov	r31, r25
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    12a8:	8d 91       	ld	r24, X+
    12aa:	81 93       	st	Z+, r24
    12ac:	41 50       	subi	r20, 0x01	; 1
    12ae:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <mem_cpy+0xe>
    12b2:	08 95       	ret

000012b4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    12b4:	41 15       	cp	r20, r1
    12b6:	51 05       	cpc	r21, r1
    12b8:	31 f0       	breq	.+12     	; 0x12c6 <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    12ba:	e8 2f       	mov	r30, r24
    12bc:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
    12be:	61 93       	st	Z+, r22
    12c0:	41 50       	subi	r20, 0x01	; 1
    12c2:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    12c4:	e1 f7       	brne	.-8      	; 0x12be <mem_set+0xa>
    12c6:	08 95       	ret

000012c8 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	dc 01       	movw	r26, r24
    12ce:	fb 01       	movw	r30, r22
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    12d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	02 8d       	ldd	r16, Z+26	; 0x1a
    12d6:	10 e0       	ldi	r17, 0x00	; 0
    12d8:	08 2b       	or	r16, r24
    12da:	19 2b       	or	r17, r25
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    12e0:	8c 91       	ld	r24, X
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	79 f4       	brne	.+30     	; 0x1304 <ld_clust+0x3c>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    12e6:	55 89       	ldd	r21, Z+21	; 0x15
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	84 89       	ldd	r24, Z+20	; 0x14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	84 2b       	or	r24, r20
    12f0:	95 2b       	or	r25, r21
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	dc 01       	movw	r26, r24
    12f8:	99 27       	eor	r25, r25
    12fa:	88 27       	eor	r24, r24
    12fc:	08 2b       	or	r16, r24
    12fe:	19 2b       	or	r17, r25
    1300:	2a 2b       	or	r18, r26
    1302:	3b 2b       	or	r19, r27

	return cl;
}
    1304:	60 2f       	mov	r22, r16
    1306:	71 2f       	mov	r23, r17
    1308:	82 2f       	mov	r24, r18
    130a:	93 2f       	mov	r25, r19
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
    1312:	fc 01       	movw	r30, r24
	ST_WORD(dir+DIR_FstClusLO, cl);
    1314:	42 8f       	std	Z+26, r20	; 0x1a
    1316:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    1318:	ab 01       	movw	r20, r22
    131a:	66 27       	eor	r22, r22
    131c:	77 27       	eor	r23, r23
    131e:	44 8b       	std	Z+20, r20	; 0x14
    1320:	55 8b       	std	Z+21, r21	; 0x15
}
    1322:	08 95       	ret

00001324 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	fc 01       	movw	r30, r24
    1332:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    1334:	8b 01       	movw	r16, r22
    1336:	07 5f       	subi	r16, 0xF7	; 247
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
    133a:	86 85       	ldd	r24, Z+14	; 0x0e
    133c:	97 85       	ldd	r25, Z+15	; 0x0f
    133e:	a0 89       	ldd	r26, Z+16	; 0x10
    1340:	b1 89       	ldd	r27, Z+17	; 0x11
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	a1 05       	cpc	r26, r1
    1346:	b1 05       	cpc	r27, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <get_fileinfo+0x28>
    134a:	65 c0       	rjmp	.+202    	; 0x1416 <get_fileinfo+0xf2>
		dir = dj->dir;
    134c:	c2 89       	ldd	r28, Z+18	; 0x12
    134e:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    1350:	28 81       	ld	r18, Y
			if (c == ' ') break;
    1352:	20 32       	cpi	r18, 0x20	; 32
    1354:	99 f0       	breq	.+38     	; 0x137c <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
    1356:	de 01       	movw	r26, r28
    1358:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
    135a:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
    1360:	35 ee       	ldi	r19, 0xE5	; 229
    1362:	03 c0       	rjmp	.+6      	; 0x136a <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    1364:	2d 91       	ld	r18, X+
			if (c == ' ') break;
    1366:	20 32       	cpi	r18, 0x20	; 32
    1368:	49 f0       	breq	.+18     	; 0x137c <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
    136a:	25 30       	cpi	r18, 0x05	; 5
    136c:	09 f4       	brne	.+2      	; 0x1370 <get_fileinfo+0x4c>
    136e:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    1370:	21 93       	st	Z+, r18
    1372:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	91 05       	cpc	r25, r1
    137a:	a1 f7       	brne	.-24     	; 0x1364 <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    137c:	88 85       	ldd	r24, Y+8	; 0x08
    137e:	80 32       	cpi	r24, 0x20	; 32
    1380:	81 f0       	breq	.+32     	; 0x13a2 <get_fileinfo+0x7e>
			*p++ = '.';
    1382:	8e e2       	ldi	r24, 0x2E	; 46
    1384:	f8 01       	movw	r30, r16
    1386:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1388:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
    138a:	80 32       	cpi	r24, 0x20	; 32
    138c:	09 f0       	breq	.+2      	; 0x1390 <get_fileinfo+0x6c>
    138e:	4c c0       	rjmp	.+152    	; 0x1428 <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
    1396:	8c 01       	movw	r16, r24
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    139a:	f8 01       	movw	r30, r16
    139c:	23 83       	std	Z+3, r18	; 0x03
    139e:	0c 5f       	subi	r16, 0xFC	; 252
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    13a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a4:	f7 01       	movw	r30, r14
    13a6:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    13a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	b8 2f       	mov	r27, r24
    13b2:	aa 27       	eor	r26, r26
    13b4:	99 27       	eor	r25, r25
    13b6:	88 27       	eor	r24, r24
    13b8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	ba 01       	movw	r22, r20
    13c2:	55 27       	eor	r21, r21
    13c4:	44 27       	eor	r20, r20
    13c6:	48 2b       	or	r20, r24
    13c8:	59 2b       	or	r21, r25
    13ca:	6a 2b       	or	r22, r26
    13cc:	7b 2b       	or	r23, r27
    13ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	48 2b       	or	r20, r24
    13d8:	59 2b       	or	r21, r25
    13da:	6a 2b       	or	r22, r26
    13dc:	7b 2b       	or	r23, r27
    13de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	84 2b       	or	r24, r20
    13e8:	95 2b       	or	r25, r21
    13ea:	a6 2b       	or	r26, r22
    13ec:	b7 2b       	or	r27, r23
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    13f6:	39 8d       	ldd	r19, Y+25	; 0x19
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	88 8d       	ldd	r24, Y+24	; 0x18
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	82 2b       	or	r24, r18
    1400:	93 2b       	or	r25, r19
    1402:	95 83       	std	Z+5, r25	; 0x05
    1404:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1406:	9f 89       	ldd	r25, Y+23	; 0x17
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	2e 89       	ldd	r18, Y+22	; 0x16
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	82 2b       	or	r24, r18
    1410:	93 2b       	or	r25, r19
    1412:	97 83       	std	Z+7, r25	; 0x07
    1414:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    1416:	f8 01       	movw	r30, r16
    1418:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    1428:	f8 01       	movw	r30, r16
    142a:	81 83       	std	Z+1, r24	; 0x01
    142c:	c8 01       	movw	r24, r16
    142e:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1430:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
    1432:	20 32       	cpi	r18, 0x20	; 32
    1434:	09 f4       	brne	.+2      	; 0x1438 <get_fileinfo+0x114>
    1436:	af cf       	rjmp	.-162    	; 0x1396 <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    1438:	22 83       	std	Z+2, r18	; 0x02
    143a:	c8 01       	movw	r24, r16
    143c:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    143e:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
    1440:	20 32       	cpi	r18, 0x20	; 32
    1442:	09 f0       	breq	.+2      	; 0x1446 <get_fileinfo+0x122>
    1444:	aa cf       	rjmp	.-172    	; 0x139a <get_fileinfo+0x76>
    1446:	a7 cf       	rjmp	.-178    	; 0x1396 <get_fileinfo+0x72>

00001448 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
    1448:	dc 01       	movw	r26, r24
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    144a:	ed 91       	ld	r30, X+
    144c:	fc 91       	ld	r31, X
    144e:	11 97       	sbiw	r26, 0x01	; 1
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	99 f0       	breq	.+38     	; 0x147a <validate+0x32>
    1454:	80 81       	ld	r24, Z
    1456:	88 23       	and	r24, r24
    1458:	91 f0       	breq	.+36     	; 0x147e <validate+0x36>
    145a:	26 81       	ldd	r18, Z+6	; 0x06
    145c:	37 81       	ldd	r19, Z+7	; 0x07
    145e:	12 96       	adiw	r26, 0x02	; 2
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	13 97       	sbiw	r26, 0x03	; 3
    1466:	28 17       	cp	r18, r24
    1468:	39 07       	cpc	r19, r25
    146a:	59 f4       	brne	.+22     	; 0x1482 <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	0e 94 6d 06 	call	0xcda	; 0xcda <disk_status>
    1472:	80 ff       	sbrs	r24, 0
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <validate+0x3e>
		return FR_NOT_READY;
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	08 95       	ret
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	08 95       	ret
    147e:	89 e0       	ldi	r24, 0x09	; 9
    1480:	08 95       	ret
    1482:	89 e0       	ldi	r24, 0x09	; 9
    1484:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    1486:	80 e0       	ldi	r24, 0x00	; 0
}
    1488:	08 95       	ret

0000148a <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    148a:	0f 93       	push	r16
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	ec 01       	movw	r28, r24
    1492:	9a 01       	movw	r18, r20
    1494:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1496:	bc 01       	movw	r22, r24
    1498:	6e 5c       	subi	r22, 0xCE	; 206
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	01 e0       	ldi	r16, 0x01	; 1
    14a0:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    14a4:	88 23       	and	r24, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <check_fs+0x20>
    14a8:	83 c0       	rjmp	.+262    	; 0x15b0 <check_fs+0x126>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    14aa:	fe 01       	movw	r30, r28
    14ac:	ef 5c       	subi	r30, 0xCF	; 207
    14ae:	fd 4f       	sbci	r31, 0xFD	; 253
    14b0:	90 81       	ld	r25, Z
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	fe 01       	movw	r30, r28
    14b6:	e0 5d       	subi	r30, 0xD0	; 208
    14b8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ba:	20 81       	ld	r18, Z
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	82 2b       	or	r24, r18
    14c0:	93 2b       	or	r25, r19
    14c2:	2a ea       	ldi	r18, 0xAA	; 170
    14c4:	85 35       	cpi	r24, 0x55	; 85
    14c6:	92 07       	cpc	r25, r18
    14c8:	09 f0       	breq	.+2      	; 0x14cc <check_fs+0x42>
    14ca:	74 c0       	rjmp	.+232    	; 0x15b4 <check_fs+0x12a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    14cc:	fe 01       	movw	r30, r28
    14ce:	e5 59       	subi	r30, 0x95	; 149
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	b8 2f       	mov	r27, r24
    14dc:	aa 27       	eor	r26, r26
    14de:	99 27       	eor	r25, r25
    14e0:	88 27       	eor	r24, r24
    14e2:	fe 01       	movw	r30, r28
    14e4:	e6 59       	subi	r30, 0x96	; 150
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	40 81       	ld	r20, Z
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	ba 01       	movw	r22, r20
    14f2:	55 27       	eor	r21, r21
    14f4:	44 27       	eor	r20, r20
    14f6:	48 2b       	or	r20, r24
    14f8:	59 2b       	or	r21, r25
    14fa:	6a 2b       	or	r22, r26
    14fc:	7b 2b       	or	r23, r27
    14fe:	fe 01       	movw	r30, r28
    1500:	e8 59       	subi	r30, 0x98	; 152
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	80 81       	ld	r24, Z
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	48 2b       	or	r20, r24
    150e:	59 2b       	or	r21, r25
    1510:	6a 2b       	or	r22, r26
    1512:	7b 2b       	or	r23, r27
    1514:	fe 01       	movw	r30, r28
    1516:	e7 59       	subi	r30, 0x97	; 151
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	90 81       	ld	r25, Z
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	48 2b       	or	r20, r24
    1524:	59 2b       	or	r21, r25
    1526:	6a 2b       	or	r22, r26
    1528:	7b 2b       	or	r23, r27
    152a:	70 70       	andi	r23, 0x00	; 0
    152c:	46 34       	cpi	r20, 0x46	; 70
    152e:	81 e4       	ldi	r24, 0x41	; 65
    1530:	58 07       	cpc	r21, r24
    1532:	84 e5       	ldi	r24, 0x54	; 84
    1534:	68 07       	cpc	r22, r24
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	78 07       	cpc	r23, r24
    153a:	f1 f1       	breq	.+124    	; 0x15b8 <check_fs+0x12e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    153c:	fe 01       	movw	r30, r28
    153e:	e9 57       	subi	r30, 0x79	; 121
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	b8 2f       	mov	r27, r24
    154c:	aa 27       	eor	r26, r26
    154e:	99 27       	eor	r25, r25
    1550:	88 27       	eor	r24, r24
    1552:	fe 01       	movw	r30, r28
    1554:	ea 57       	subi	r30, 0x7A	; 122
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	40 81       	ld	r20, Z
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	ba 01       	movw	r22, r20
    1562:	55 27       	eor	r21, r21
    1564:	44 27       	eor	r20, r20
    1566:	48 2b       	or	r20, r24
    1568:	59 2b       	or	r21, r25
    156a:	6a 2b       	or	r22, r26
    156c:	7b 2b       	or	r23, r27
    156e:	fe 01       	movw	r30, r28
    1570:	ec 57       	subi	r30, 0x7C	; 124
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	48 2b       	or	r20, r24
    157e:	59 2b       	or	r21, r25
    1580:	6a 2b       	or	r22, r26
    1582:	7b 2b       	or	r23, r27
    1584:	cb 57       	subi	r28, 0x7B	; 123
    1586:	df 4f       	sbci	r29, 0xFF	; 255
    1588:	98 81       	ld	r25, Y
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	48 2b       	or	r20, r24
    1592:	59 2b       	or	r21, r25
    1594:	6a 2b       	or	r22, r26
    1596:	7b 2b       	or	r23, r27
    1598:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	46 34       	cpi	r20, 0x46	; 70
    159e:	91 e4       	ldi	r25, 0x41	; 65
    15a0:	59 07       	cpc	r21, r25
    15a2:	94 e5       	ldi	r25, 0x54	; 84
    15a4:	69 07       	cpc	r22, r25
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	79 07       	cpc	r23, r25
    15aa:	39 f4       	brne	.+14     	; 0x15ba <check_fs+0x130>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <check_fs+0x130>
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <check_fs+0x130>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <check_fs+0x130>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    15c2:	2f 92       	push	r2
    15c4:	3f 92       	push	r3
    15c6:	4f 92       	push	r4
    15c8:	5f 92       	push	r5
    15ca:	6f 92       	push	r6
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	2f 97       	sbiw	r28, 0x0f	; 15
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	14 2f       	mov	r17, r20
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    15f8:	dc 01       	movw	r26, r24
    15fa:	ed 91       	ld	r30, X+
    15fc:	fc 91       	ld	r31, X
    15fe:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    1600:	80 81       	ld	r24, Z
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    1606:	8a 30       	cpi	r24, 0x0A	; 10
    1608:	91 05       	cpc	r25, r1
    160a:	40 f4       	brcc	.+16     	; 0x161c <chk_mounted+0x5a>
    160c:	21 81       	ldd	r18, Z+1	; 0x01
    160e:	2a 33       	cpi	r18, 0x3A	; 58
    1610:	29 f4       	brne	.+10     	; 0x161c <chk_mounted+0x5a>
		p += 2; *path = p;				/* Return pointer to the path name */
    1612:	32 96       	adiw	r30, 0x02	; 2
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	fc 93       	st	X, r31
    1618:	ee 93       	st	-X, r30
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <chk_mounted+0x60>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    161c:	80 91 f5 01 	lds	r24, 0x01F5
    1620:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
    1622:	fb 01       	movw	r30, r22
    1624:	11 82       	std	Z+1, r1	; 0x01
    1626:	10 82       	st	Z, r1
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	09 f0       	breq	.+2      	; 0x162e <chk_mounted+0x6c>
    162c:	d2 c3       	rjmp	.+1956   	; 0x1dd2 <chk_mounted+0x810>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    162e:	20 91 f3 01 	lds	r18, 0x01F3
    1632:	30 91 f4 01 	lds	r19, 0x01F4
    1636:	3f 87       	std	Y+15, r19	; 0x0f
    1638:	2e 87       	std	Y+14, r18	; 0x0e
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    163a:	21 15       	cp	r18, r1
    163c:	31 05       	cpc	r19, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <chk_mounted+0x80>
    1640:	ca c3       	rjmp	.+1940   	; 0x1dd6 <chk_mounted+0x814>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    1642:	31 83       	std	Z+1, r19	; 0x01
    1644:	20 83       	st	Z, r18
	if (fs->fs_type) {					/* If the volume has been mounted */
    1646:	d9 01       	movw	r26, r18
    1648:	8c 91       	ld	r24, X
    164a:	88 23       	and	r24, r24
    164c:	69 f0       	breq	.+26     	; 0x1668 <chk_mounted+0xa6>
		stat = disk_status(fs->drv);
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	8c 91       	ld	r24, X
    1652:	0e 94 6d 06 	call	0xcda	; 0xcda <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    1656:	80 fd       	sbrc	r24, 0
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <chk_mounted+0xa6>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    165a:	11 23       	and	r17, r17
    165c:	09 f4       	brne	.+2      	; 0x1660 <chk_mounted+0x9e>
    165e:	bd c3       	rjmp	.+1914   	; 0x1dda <chk_mounted+0x818>
    1660:	82 fd       	sbrc	r24, 2
    1662:	bd c3       	rjmp	.+1914   	; 0x1dde <chk_mounted+0x81c>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	dc c3       	rjmp	.+1976   	; 0x1e20 <chk_mounted+0x85e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    1668:	ee 85       	ldd	r30, Y+14	; 0x0e
    166a:	ff 85       	ldd	r31, Y+15	; 0x0f
    166c:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    166e:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 9d 05 	call	0xb3a	; 0xb3a <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    1676:	80 fd       	sbrc	r24, 0
    1678:	b4 c3       	rjmp	.+1896   	; 0x1de2 <chk_mounted+0x820>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    167a:	11 23       	and	r17, r17
    167c:	11 f0       	breq	.+4      	; 0x1682 <chk_mounted+0xc0>
    167e:	82 fd       	sbrc	r24, 2
    1680:	b2 c3       	rjmp	.+1892   	; 0x1de6 <chk_mounted+0x824>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    1682:	8e 85       	ldd	r24, Y+14	; 0x0e
    1684:	9f 85       	ldd	r25, Y+15	; 0x0f
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	ba 01       	movw	r22, r20
    168c:	0e 94 45 0a 	call	0x148a	; 0x148a <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	09 f0       	breq	.+2      	; 0x1696 <chk_mounted+0xd4>
    1694:	43 c0       	rjmp	.+134    	; 0x171c <chk_mounted+0x15a>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    1696:	ee 85       	ldd	r30, Y+14	; 0x0e
    1698:	ff 85       	ldd	r31, Y+15	; 0x0f
    169a:	ec 50       	subi	r30, 0x0C	; 12
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	80 81       	ld	r24, Z
    16a0:	88 23       	and	r24, r24
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <chk_mounted+0xe4>
    16a4:	a2 c3       	rjmp	.+1860   	; 0x1dea <chk_mounted+0x828>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    16a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    16a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    16aa:	e5 50       	subi	r30, 0x05	; 5
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	80 81       	ld	r24, Z
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	b8 2f       	mov	r27, r24
    16b8:	aa 27       	eor	r26, r26
    16ba:	99 27       	eor	r25, r25
    16bc:	88 27       	eor	r24, r24
    16be:	ee 85       	ldd	r30, Y+14	; 0x0e
    16c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    16c2:	e6 50       	subi	r30, 0x06	; 6
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	40 81       	ld	r20, Z
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	ba 01       	movw	r22, r20
    16d0:	55 27       	eor	r21, r21
    16d2:	44 27       	eor	r20, r20
    16d4:	84 2b       	or	r24, r20
    16d6:	95 2b       	or	r25, r21
    16d8:	a6 2b       	or	r26, r22
    16da:	b7 2b       	or	r27, r23
    16dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    16de:	ff 85       	ldd	r31, Y+15	; 0x0f
    16e0:	e8 50       	subi	r30, 0x08	; 8
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	40 81       	ld	r20, Z
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	48 2b       	or	r20, r24
    16ee:	59 2b       	or	r21, r25
    16f0:	6a 2b       	or	r22, r26
    16f2:	7b 2b       	or	r23, r27
    16f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    16f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    16f8:	e7 50       	subi	r30, 0x07	; 7
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	90 81       	ld	r25, Z
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	6c 01       	movw	r12, r24
    1702:	ee 24       	eor	r14, r14
    1704:	ff 24       	eor	r15, r15
    1706:	c4 2a       	or	r12, r20
    1708:	d5 2a       	or	r13, r21
    170a:	e6 2a       	or	r14, r22
    170c:	f7 2a       	or	r15, r23
			fmt = check_fs(fs, bsect);		/* Check the partition */
    170e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1710:	9f 85       	ldd	r25, Y+15	; 0x0f
    1712:	b7 01       	movw	r22, r14
    1714:	a6 01       	movw	r20, r12
    1716:	0e 94 45 0a 	call	0x148a	; 0x148a <check_fs>
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <chk_mounted+0x160>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    171c:	cc 24       	eor	r12, r12
    171e:	dd 24       	eor	r13, r13
    1720:	76 01       	movw	r14, r12
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	09 f4       	brne	.+2      	; 0x1728 <chk_mounted+0x166>
    1726:	63 c3       	rjmp	.+1734   	; 0x1dee <chk_mounted+0x82c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1728:	88 23       	and	r24, r24
    172a:	09 f0       	breq	.+2      	; 0x172e <chk_mounted+0x16c>
    172c:	62 c3       	rjmp	.+1732   	; 0x1df2 <chk_mounted+0x830>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    172e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1730:	bf 85       	ldd	r27, Y+15	; 0x0f
    1732:	de 96       	adiw	r26, 0x3e	; 62
    1734:	9c 91       	ld	r25, X
    1736:	de 97       	sbiw	r26, 0x3e	; 62
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	dd 96       	adiw	r26, 0x3d	; 61
    173c:	2c 91       	ld	r18, X
    173e:	dd 97       	sbiw	r26, 0x3d	; 61
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	82 2b       	or	r24, r18
    1744:	93 2b       	or	r25, r19
    1746:	b2 e0       	ldi	r27, 0x02	; 2
    1748:	80 30       	cpi	r24, 0x00	; 0
    174a:	9b 07       	cpc	r25, r27
    174c:	09 f0       	breq	.+2      	; 0x1750 <chk_mounted+0x18e>
    174e:	53 c3       	rjmp	.+1702   	; 0x1df6 <chk_mounted+0x834>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    1750:	ee 85       	ldd	r30, Y+14	; 0x0e
    1752:	ff 85       	ldd	r31, Y+15	; 0x0f
    1754:	e7 5b       	subi	r30, 0xB7	; 183
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	30 81       	ld	r19, Z
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	ee 85       	ldd	r30, Y+14	; 0x0e
    175e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1760:	e8 5b       	subi	r30, 0xB8	; 184
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	82 2b       	or	r24, r18
    176a:	93 2b       	or	r25, r19
    176c:	4c 01       	movw	r8, r24
    176e:	aa 24       	eor	r10, r10
    1770:	bb 24       	eor	r11, r11
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    1772:	81 14       	cp	r8, r1
    1774:	91 04       	cpc	r9, r1
    1776:	a1 04       	cpc	r10, r1
    1778:	b1 04       	cpc	r11, r1
    177a:	a9 f5       	brne	.+106    	; 0x17e6 <chk_mounted+0x224>
    177c:	ee 85       	ldd	r30, Y+14	; 0x0e
    177e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1780:	e7 5a       	subi	r30, 0xA7	; 167
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	40 81       	ld	r20, Z
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	74 2f       	mov	r23, r20
    178e:	66 27       	eor	r22, r22
    1790:	55 27       	eor	r21, r21
    1792:	44 27       	eor	r20, r20
    1794:	ee 85       	ldd	r30, Y+14	; 0x0e
    1796:	ff 85       	ldd	r31, Y+15	; 0x0f
    1798:	e8 5a       	subi	r30, 0xA8	; 168
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	dc 01       	movw	r26, r24
    17a6:	99 27       	eor	r25, r25
    17a8:	88 27       	eor	r24, r24
    17aa:	48 2b       	or	r20, r24
    17ac:	59 2b       	or	r21, r25
    17ae:	6a 2b       	or	r22, r26
    17b0:	7b 2b       	or	r23, r27
    17b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    17b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    17b6:	ea 5a       	subi	r30, 0xAA	; 170
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	48 2b       	or	r20, r24
    17c4:	59 2b       	or	r21, r25
    17c6:	6a 2b       	or	r22, r26
    17c8:	7b 2b       	or	r23, r27
    17ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    17cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    17ce:	e9 5a       	subi	r30, 0xA9	; 169
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	90 81       	ld	r25, Z
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	4a 01       	movw	r8, r20
    17dc:	5b 01       	movw	r10, r22
    17de:	88 2a       	or	r8, r24
    17e0:	99 2a       	or	r9, r25
    17e2:	aa 2a       	or	r10, r26
    17e4:	bb 2a       	or	r11, r27
	fs->fsize = fasize;
    17e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    17e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    17ea:	86 8e       	std	Z+30, r8	; 0x1e
    17ec:	97 8e       	std	Z+31, r9	; 0x1f
    17ee:	a0 a2       	lds	r26, 0x90
    17f0:	b1 a2       	lds	r27, 0x91

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    17f2:	ee 5b       	subi	r30, 0xBE	; 190
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	00 81       	ld	r16, Z
    17f8:	09 83       	std	Y+1, r16	; 0x01
    17fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    17fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    17fe:	13 96       	adiw	r26, 0x03	; 3
    1800:	0c 93       	st	X, r16
    1802:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1804:	80 2f       	mov	r24, r16
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	08 f0       	brcs	.+2      	; 0x180e <chk_mounted+0x24c>
    180c:	f6 c2       	rjmp	.+1516   	; 0x1dfa <chk_mounted+0x838>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    180e:	df 96       	adiw	r26, 0x3f	; 63
    1810:	0c 91       	ld	r16, X
    1812:	df 97       	sbiw	r26, 0x3f	; 63
    1814:	0d 83       	std	Y+5, r16	; 0x05
    1816:	12 96       	adiw	r26, 0x02	; 2
    1818:	0c 93       	st	X, r16
    181a:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    181c:	00 23       	and	r16, r16
    181e:	09 f4       	brne	.+2      	; 0x1822 <chk_mounted+0x260>
    1820:	ee c2       	rjmp	.+1500   	; 0x1dfe <chk_mounted+0x83c>
    1822:	80 2f       	mov	r24, r16
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c 01       	movw	r18, r24
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	30 40       	sbci	r19, 0x00	; 0
    182c:	82 23       	and	r24, r18
    182e:	93 23       	and	r25, r19
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	09 f0       	breq	.+2      	; 0x1836 <chk_mounted+0x274>
    1834:	e6 c2       	rjmp	.+1484   	; 0x1e02 <chk_mounted+0x840>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    1836:	fd 01       	movw	r30, r26
    1838:	ec 5b       	subi	r30, 0xBC	; 188
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	30 81       	ld	r19, Z
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	fd 01       	movw	r30, r26
    1842:	ed 5b       	subi	r30, 0xBD	; 189
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	19 01       	movw	r2, r18
    184c:	28 2a       	or	r2, r24
    184e:	39 2a       	or	r3, r25
    1850:	19 96       	adiw	r26, 0x09	; 9
    1852:	3c 92       	st	X, r3
    1854:	2e 92       	st	-X, r2
    1856:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1858:	c1 01       	movw	r24, r2
    185a:	8f 70       	andi	r24, 0x0F	; 15
    185c:	90 70       	andi	r25, 0x00	; 0
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	09 f0       	breq	.+2      	; 0x1864 <chk_mounted+0x2a2>
    1862:	d1 c2       	rjmp	.+1442   	; 0x1e06 <chk_mounted+0x844>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    1864:	fd 01       	movw	r30, r26
    1866:	ea 5b       	subi	r30, 0xBA	; 186
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	30 81       	ld	r19, Z
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	fd 01       	movw	r30, r26
    1870:	eb 5b       	subi	r30, 0xBB	; 187
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	82 2b       	or	r24, r18
    187a:	93 2b       	or	r25, r19
    187c:	2c 01       	movw	r4, r24
    187e:	66 24       	eor	r6, r6
    1880:	77 24       	eor	r7, r7
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1882:	41 14       	cp	r4, r1
    1884:	51 04       	cpc	r5, r1
    1886:	61 04       	cpc	r6, r1
    1888:	71 04       	cpc	r7, r1
    188a:	a1 f5       	brne	.+104    	; 0x18f4 <chk_mounted+0x332>
    188c:	fd 01       	movw	r30, r26
    188e:	eb 5a       	subi	r30, 0xAB	; 171
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	78 2f       	mov	r23, r24
    189c:	66 27       	eor	r22, r22
    189e:	55 27       	eor	r21, r21
    18a0:	44 27       	eor	r20, r20
    18a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    18a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    18a6:	ec 5a       	subi	r30, 0xAC	; 172
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	dc 01       	movw	r26, r24
    18b4:	99 27       	eor	r25, r25
    18b6:	88 27       	eor	r24, r24
    18b8:	48 2b       	or	r20, r24
    18ba:	59 2b       	or	r21, r25
    18bc:	6a 2b       	or	r22, r26
    18be:	7b 2b       	or	r23, r27
    18c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    18c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    18c4:	ee 5a       	subi	r30, 0xAE	; 174
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	48 2b       	or	r20, r24
    18d2:	59 2b       	or	r21, r25
    18d4:	6a 2b       	or	r22, r26
    18d6:	7b 2b       	or	r23, r27
    18d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    18da:	ff 85       	ldd	r31, Y+15	; 0x0f
    18dc:	ed 5a       	subi	r30, 0xAD	; 173
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	90 81       	ld	r25, Z
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	2a 01       	movw	r4, r20
    18ea:	3b 01       	movw	r6, r22
    18ec:	48 2a       	or	r4, r24
    18ee:	59 2a       	or	r5, r25
    18f0:	6a 2a       	or	r6, r26
    18f2:	7b 2a       	or	r7, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    18f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    18f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    18f8:	ef 5b       	subi	r30, 0xBF	; 191
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	30 81       	ld	r19, Z
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	ee 85       	ldd	r30, Y+14	; 0x0e
    1902:	ff 85       	ldd	r31, Y+15	; 0x0f
    1904:	e0 5c       	subi	r30, 0xC0	; 192
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	89 01       	movw	r16, r18
    190e:	08 2b       	or	r16, r24
    1910:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1912:	01 15       	cp	r16, r1
    1914:	11 05       	cpc	r17, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <chk_mounted+0x358>
    1918:	78 c2       	rjmp	.+1264   	; 0x1e0a <chk_mounted+0x848>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	c5 01       	movw	r24, r10
    1926:	b4 01       	movw	r22, r8
    1928:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    192c:	6a 87       	std	Y+10, r22	; 0x0a
    192e:	7b 87       	std	Y+11, r23	; 0x0b
    1930:	8c 87       	std	Y+12, r24	; 0x0c
    1932:	9d 87       	std	Y+13, r25	; 0x0d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    1934:	98 01       	movw	r18, r16
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	2e 83       	std	Y+6, r18	; 0x06
    193c:	3f 83       	std	Y+7, r19	; 0x07
    193e:	48 87       	std	Y+8, r20	; 0x08
    1940:	59 87       	std	Y+9, r21	; 0x09
    1942:	c1 01       	movw	r24, r2
    1944:	92 95       	swap	r25
    1946:	82 95       	swap	r24
    1948:	8f 70       	andi	r24, 0x0F	; 15
    194a:	89 27       	eor	r24, r25
    194c:	9f 70       	andi	r25, 0x0F	; 15
    194e:	89 27       	eor	r24, r25
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	a4 1f       	adc	r26, r20
    195a:	b5 1f       	adc	r27, r21
    195c:	0a 85       	ldd	r16, Y+10	; 0x0a
    195e:	1b 85       	ldd	r17, Y+11	; 0x0b
    1960:	2c 85       	ldd	r18, Y+12	; 0x0c
    1962:	3d 85       	ldd	r19, Y+13	; 0x0d
    1964:	08 0f       	add	r16, r24
    1966:	19 1f       	adc	r17, r25
    1968:	2a 1f       	adc	r18, r26
    196a:	3b 1f       	adc	r19, r27
    196c:	09 83       	std	Y+1, r16	; 0x01
    196e:	1a 83       	std	Y+2, r17	; 0x02
    1970:	2b 83       	std	Y+3, r18	; 0x03
    1972:	3c 83       	std	Y+4, r19	; 0x04
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1974:	40 16       	cp	r4, r16
    1976:	51 06       	cpc	r5, r17
    1978:	62 06       	cpc	r6, r18
    197a:	73 06       	cpc	r7, r19
    197c:	08 f4       	brcc	.+2      	; 0x1980 <chk_mounted+0x3be>
    197e:	47 c2       	rjmp	.+1166   	; 0x1e0e <chk_mounted+0x84c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1980:	c3 01       	movw	r24, r6
    1982:	b2 01       	movw	r22, r4
    1984:	60 1b       	sub	r22, r16
    1986:	71 0b       	sbc	r23, r17
    1988:	82 0b       	sbc	r24, r18
    198a:	93 0b       	sbc	r25, r19
    198c:	1d 81       	ldd	r17, Y+5	; 0x05
    198e:	21 2f       	mov	r18, r17
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodsi4>
    199a:	89 01       	movw	r16, r18
    199c:	9a 01       	movw	r18, r20
    199e:	d9 01       	movw	r26, r18
    19a0:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    19a2:	01 15       	cp	r16, r1
    19a4:	11 05       	cpc	r17, r1
    19a6:	21 05       	cpc	r18, r1
    19a8:	31 05       	cpc	r19, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <chk_mounted+0x3ec>
    19ac:	32 c2       	rjmp	.+1124   	; 0x1e12 <chk_mounted+0x850>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    19ae:	06 3f       	cpi	r16, 0xF6	; 246
    19b0:	4f e0       	ldi	r20, 0x0F	; 15
    19b2:	14 07       	cpc	r17, r20
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	24 07       	cpc	r18, r20
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	34 07       	cpc	r19, r20
    19bc:	18 f4       	brcc	.+6      	; 0x19c4 <chk_mounted+0x402>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    19be:	44 24       	eor	r4, r4
    19c0:	43 94       	inc	r4
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <chk_mounted+0x408>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    19c4:	44 24       	eor	r4, r4
    19c6:	68 94       	set
    19c8:	41 f8       	bld	r4, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    19ca:	86 3f       	cpi	r24, 0xF6	; 246
    19cc:	5f ef       	ldi	r21, 0xFF	; 255
    19ce:	95 07       	cpc	r25, r21
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	a5 07       	cpc	r26, r21
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	b5 07       	cpc	r27, r21
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <chk_mounted+0x41a>
    19da:	3b c2       	rjmp	.+1142   	; 0x1e52 <chk_mounted+0x890>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    19dc:	b9 01       	movw	r22, r18
    19de:	a8 01       	movw	r20, r16
    19e0:	4e 5f       	subi	r20, 0xFE	; 254
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	6f 4f       	sbci	r22, 0xFF	; 255
    19e6:	7f 4f       	sbci	r23, 0xFF	; 255
    19e8:	ae 85       	ldd	r26, Y+14	; 0x0e
    19ea:	bf 85       	ldd	r27, Y+15	; 0x0f
    19ec:	5a 96       	adiw	r26, 0x1a	; 26
    19ee:	4d 93       	st	X+, r20
    19f0:	5d 93       	st	X+, r21
    19f2:	6d 93       	st	X+, r22
    19f4:	7c 93       	st	X, r23
    19f6:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	ab 81       	ldd	r26, Y+3	; 0x03
    19fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1a00:	8c 0d       	add	r24, r12
    1a02:	9d 1d       	adc	r25, r13
    1a04:	ae 1d       	adc	r26, r14
    1a06:	bf 1d       	adc	r27, r15
    1a08:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a0c:	82 a7       	lds	r24, 0x72
    1a0e:	93 a7       	lds	r25, 0x73
    1a10:	a4 a7       	lds	r26, 0x74
    1a12:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1a14:	8e 81       	ldd	r24, Y+6	; 0x06
    1a16:	9f 81       	ldd	r25, Y+7	; 0x07
    1a18:	a8 85       	ldd	r26, Y+8	; 0x08
    1a1a:	b9 85       	ldd	r27, Y+9	; 0x09
    1a1c:	8c 0d       	add	r24, r12
    1a1e:	9d 1d       	adc	r25, r13
    1a20:	ae 1d       	adc	r26, r14
    1a22:	bf 1d       	adc	r27, r15
    1a24:	82 a3       	lds	r24, 0x52
    1a26:	93 a3       	lds	r25, 0x53
    1a28:	a4 a3       	lds	r26, 0x54
    1a2a:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
    1a2c:	f3 e0       	ldi	r31, 0x03	; 3
    1a2e:	4f 16       	cp	r4, r31
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <chk_mounted+0x472>
    1a32:	46 c0       	rjmp	.+140    	; 0x1ac0 <chk_mounted+0x4fe>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1a34:	21 14       	cp	r2, r1
    1a36:	31 04       	cpc	r3, r1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <chk_mounted+0x47a>
    1a3a:	ed c1       	rjmp	.+986    	; 0x1e16 <chk_mounted+0x854>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1a3c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a3e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a40:	ef 59       	subi	r30, 0x9F	; 159
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e0       	ldi	r26, 0x00	; 0
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	38 2f       	mov	r19, r24
    1a4e:	22 27       	eor	r18, r18
    1a50:	11 27       	eor	r17, r17
    1a52:	00 27       	eor	r16, r16
    1a54:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a56:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a58:	e0 5a       	subi	r30, 0xA0	; 160
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	dc 01       	movw	r26, r24
    1a66:	99 27       	eor	r25, r25
    1a68:	88 27       	eor	r24, r24
    1a6a:	08 2b       	or	r16, r24
    1a6c:	19 2b       	or	r17, r25
    1a6e:	2a 2b       	or	r18, r26
    1a70:	3b 2b       	or	r19, r27
    1a72:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a74:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a76:	e2 5a       	subi	r30, 0xA2	; 162
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	08 2b       	or	r16, r24
    1a84:	19 2b       	or	r17, r25
    1a86:	2a 2b       	or	r18, r26
    1a88:	3b 2b       	or	r19, r27
    1a8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a8e:	e1 5a       	subi	r30, 0xA1	; 161
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	90 81       	ld	r25, Z
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	80 2b       	or	r24, r16
    1a9c:	91 2b       	or	r25, r17
    1a9e:	a2 2b       	or	r26, r18
    1aa0:	b3 2b       	or	r27, r19
    1aa2:	ee 85       	ldd	r30, Y+14	; 0x0e
    1aa4:	ff 85       	ldd	r31, Y+15	; 0x0f
    1aa6:	86 a3       	lds	r24, 0x56
    1aa8:	97 a3       	lds	r25, 0x57
    1aaa:	a0 a7       	lds	r26, 0x70
    1aac:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1aae:	44 0f       	add	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	44 0f       	add	r20, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	66 1f       	adc	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	30 c0       	rjmp	.+96     	; 0x1b20 <chk_mounted+0x55e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1ac0:	21 14       	cp	r2, r1
    1ac2:	31 04       	cpc	r3, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <chk_mounted+0x506>
    1ac6:	a9 c1       	rjmp	.+850    	; 0x1e1a <chk_mounted+0x858>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1ac8:	0a 85       	ldd	r16, Y+10	; 0x0a
    1aca:	1b 85       	ldd	r17, Y+11	; 0x0b
    1acc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ace:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ad0:	80 0f       	add	r24, r16
    1ad2:	91 1f       	adc	r25, r17
    1ad4:	a2 1f       	adc	r26, r18
    1ad6:	b3 1f       	adc	r27, r19
    1ad8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ada:	ff 85       	ldd	r31, Y+15	; 0x0f
    1adc:	86 a3       	lds	r24, 0x56
    1ade:	97 a3       	lds	r25, 0x57
    1ae0:	a0 a7       	lds	r26, 0x70
    1ae2:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1ae4:	f2 e0       	ldi	r31, 0x02	; 2
    1ae6:	4f 16       	cp	r4, r31
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <chk_mounted+0x532>
    1aea:	44 0f       	add	r20, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	66 1f       	adc	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	16 c0       	rjmp	.+44     	; 0x1b20 <chk_mounted+0x55e>
    1af4:	db 01       	movw	r26, r22
    1af6:	ca 01       	movw	r24, r20
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	84 0f       	add	r24, r20
    1b02:	95 1f       	adc	r25, r21
    1b04:	a6 1f       	adc	r26, r22
    1b06:	b7 1f       	adc	r27, r23
    1b08:	b6 95       	lsr	r27
    1b0a:	a7 95       	ror	r26
    1b0c:	97 95       	ror	r25
    1b0e:	87 95       	ror	r24
    1b10:	41 70       	andi	r20, 0x01	; 1
    1b12:	50 70       	andi	r21, 0x00	; 0
    1b14:	60 70       	andi	r22, 0x00	; 0
    1b16:	70 70       	andi	r23, 0x00	; 0
    1b18:	48 0f       	add	r20, r24
    1b1a:	59 1f       	adc	r21, r25
    1b1c:	6a 1f       	adc	r22, r26
    1b1e:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1b20:	db 01       	movw	r26, r22
    1b22:	ca 01       	movw	r24, r20
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	af 4f       	sbci	r26, 0xFF	; 255
    1b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2c:	07 2e       	mov	r0, r23
    1b2e:	79 e0       	ldi	r23, 0x09	; 9
    1b30:	b6 95       	lsr	r27
    1b32:	a7 95       	ror	r26
    1b34:	97 95       	ror	r25
    1b36:	87 95       	ror	r24
    1b38:	7a 95       	dec	r23
    1b3a:	d1 f7       	brne	.-12     	; 0x1b30 <chk_mounted+0x56e>
    1b3c:	70 2d       	mov	r23, r0
    1b3e:	88 16       	cp	r8, r24
    1b40:	99 06       	cpc	r9, r25
    1b42:	aa 06       	cpc	r10, r26
    1b44:	bb 06       	cpc	r11, r27
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <chk_mounted+0x588>
    1b48:	6a c1       	rjmp	.+724    	; 0x1e1e <chk_mounted+0x85c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	dc 01       	movw	r26, r24
    1b50:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b52:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b54:	86 87       	std	Z+14, r24	; 0x0e
    1b56:	97 87       	std	Z+15, r25	; 0x0f
    1b58:	a0 8b       	std	Z+16, r26	; 0x10
    1b5a:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    1b5c:	12 86       	std	Z+10, r1	; 0x0a
    1b5e:	13 86       	std	Z+11, r1	; 0x0b
    1b60:	14 86       	std	Z+12, r1	; 0x0c
    1b62:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    1b64:	b3 e0       	ldi	r27, 0x03	; 3
    1b66:	4b 16       	cp	r4, r27
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <chk_mounted+0x5aa>
    1b6a:	15 c1       	rjmp	.+554    	; 0x1d96 <chk_mounted+0x7d4>
	 	fs->fsi_flag = 0;
    1b6c:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1b6e:	ed 59       	subi	r30, 0x9D	; 157
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	30 81       	ld	r19, Z
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b78:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b7a:	ee 59       	subi	r30, 0x9E	; 158
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	82 2b       	or	r24, r18
    1b84:	93 2b       	or	r25, r19
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	a7 01       	movw	r20, r14
    1b8c:	96 01       	movw	r18, r12
    1b8e:	28 0f       	add	r18, r24
    1b90:	39 1f       	adc	r19, r25
    1b92:	4a 1f       	adc	r20, r26
    1b94:	5b 1f       	adc	r21, r27
    1b96:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b98:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b9a:	52 96       	adiw	r26, 0x12	; 18
    1b9c:	2d 93       	st	X+, r18
    1b9e:	3d 93       	st	X+, r19
    1ba0:	4d 93       	st	X+, r20
    1ba2:	5c 93       	st	X, r21
    1ba4:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1ba6:	bd 01       	movw	r22, r26
    1ba8:	6e 5c       	subi	r22, 0xCE	; 206
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	11 96       	adiw	r26, 0x01	; 1
    1bae:	8c 91       	ld	r24, X
    1bb0:	01 e0       	ldi	r16, 0x01	; 1
    1bb2:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <chk_mounted+0x5fa>
    1bba:	ed c0       	rjmp	.+474    	; 0x1d96 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1bbc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bbe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bc0:	ef 5c       	subi	r30, 0xCF	; 207
    1bc2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc4:	30 81       	ld	r19, Z
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bca:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bcc:	e0 5d       	subi	r30, 0xD0	; 208
    1bce:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd0:	80 81       	ld	r24, Z
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	82 2b       	or	r24, r18
    1bd6:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1bd8:	ba ea       	ldi	r27, 0xAA	; 170
    1bda:	85 35       	cpi	r24, 0x55	; 85
    1bdc:	9b 07       	cpc	r25, r27
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <chk_mounted+0x620>
    1be0:	da c0       	rjmp	.+436    	; 0x1d96 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1be2:	ee 85       	ldd	r30, Y+14	; 0x0e
    1be4:	ff 85       	ldd	r31, Y+15	; 0x0f
    1be6:	45 a9       	sts	0x45, r20
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	74 2f       	mov	r23, r20
    1bf0:	66 27       	eor	r22, r22
    1bf2:	55 27       	eor	r21, r21
    1bf4:	44 27       	eor	r20, r20
    1bf6:	84 a9       	sts	0x44, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e0       	ldi	r26, 0x00	; 0
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	dc 01       	movw	r26, r24
    1c00:	99 27       	eor	r25, r25
    1c02:	88 27       	eor	r24, r24
    1c04:	48 2b       	or	r20, r24
    1c06:	59 2b       	or	r21, r25
    1c08:	6a 2b       	or	r22, r26
    1c0a:	7b 2b       	or	r23, r27
    1c0c:	82 a9       	sts	0x42, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	48 2b       	or	r20, r24
    1c16:	59 2b       	or	r21, r25
    1c18:	6a 2b       	or	r22, r26
    1c1a:	7b 2b       	or	r23, r27
    1c1c:	93 a9       	sts	0x43, r25
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	84 2b       	or	r24, r20
    1c26:	95 2b       	or	r25, r21
    1c28:	a6 2b       	or	r26, r22
    1c2a:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1c2c:	82 35       	cpi	r24, 0x52	; 82
    1c2e:	f2 e5       	ldi	r31, 0x52	; 82
    1c30:	9f 07       	cpc	r25, r31
    1c32:	f1 e6       	ldi	r31, 0x61	; 97
    1c34:	af 07       	cpc	r26, r31
    1c36:	f1 e4       	ldi	r31, 0x41	; 65
    1c38:	bf 07       	cpc	r27, r31
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <chk_mounted+0x67c>
    1c3c:	ac c0       	rjmp	.+344    	; 0x1d96 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1c3e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c40:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c42:	e7 5e       	subi	r30, 0xE7	; 231
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	80 81       	ld	r24, Z
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 e0       	ldi	r26, 0x00	; 0
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	b8 2f       	mov	r27, r24
    1c50:	aa 27       	eor	r26, r26
    1c52:	99 27       	eor	r25, r25
    1c54:	88 27       	eor	r24, r24
    1c56:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c58:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c5a:	e8 5e       	subi	r30, 0xE8	; 232
    1c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5e:	40 81       	ld	r20, Z
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	ba 01       	movw	r22, r20
    1c68:	55 27       	eor	r21, r21
    1c6a:	44 27       	eor	r20, r20
    1c6c:	84 2b       	or	r24, r20
    1c6e:	95 2b       	or	r25, r21
    1c70:	a6 2b       	or	r26, r22
    1c72:	b7 2b       	or	r27, r23
    1c74:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c76:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c78:	ea 5e       	subi	r30, 0xEA	; 234
    1c7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7c:	40 81       	ld	r20, Z
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	48 2b       	or	r20, r24
    1c86:	59 2b       	or	r21, r25
    1c88:	6a 2b       	or	r22, r26
    1c8a:	7b 2b       	or	r23, r27
    1c8c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c8e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c90:	e9 5e       	subi	r30, 0xE9	; 233
    1c92:	fd 4f       	sbci	r31, 0xFD	; 253
    1c94:	90 81       	ld	r25, Z
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	a0 e0       	ldi	r26, 0x00	; 0
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	84 2b       	or	r24, r20
    1c9e:	95 2b       	or	r25, r21
    1ca0:	a6 2b       	or	r26, r22
    1ca2:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1ca4:	82 37       	cpi	r24, 0x72	; 114
    1ca6:	02 e7       	ldi	r16, 0x72	; 114
    1ca8:	90 07       	cpc	r25, r16
    1caa:	01 e4       	ldi	r16, 0x41	; 65
    1cac:	a0 07       	cpc	r26, r16
    1cae:	01 e6       	ldi	r16, 0x61	; 97
    1cb0:	b0 07       	cpc	r27, r16
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <chk_mounted+0x6f4>
    1cb4:	70 c0       	rjmp	.+224    	; 0x1d96 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1cb6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cb8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cba:	ef 5d       	subi	r30, 0xDF	; 223
    1cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbe:	80 81       	ld	r24, Z
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e0       	ldi	r26, 0x00	; 0
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	b8 2f       	mov	r27, r24
    1cc8:	aa 27       	eor	r26, r26
    1cca:	99 27       	eor	r25, r25
    1ccc:	88 27       	eor	r24, r24
    1cce:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cd0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cd2:	e0 5e       	subi	r30, 0xE0	; 224
    1cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd6:	40 81       	ld	r20, Z
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	ba 01       	movw	r22, r20
    1ce0:	55 27       	eor	r21, r21
    1ce2:	44 27       	eor	r20, r20
    1ce4:	84 2b       	or	r24, r20
    1ce6:	95 2b       	or	r25, r21
    1ce8:	a6 2b       	or	r26, r22
    1cea:	b7 2b       	or	r27, r23
    1cec:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cee:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cf0:	e2 5e       	subi	r30, 0xE2	; 226
    1cf2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf4:	40 81       	ld	r20, Z
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	48 2b       	or	r20, r24
    1cfe:	59 2b       	or	r21, r25
    1d00:	6a 2b       	or	r22, r26
    1d02:	7b 2b       	or	r23, r27
    1d04:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d06:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d08:	e1 5e       	subi	r30, 0xE1	; 225
    1d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0c:	90 81       	ld	r25, Z
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	84 2b       	or	r24, r20
    1d16:	95 2b       	or	r25, r21
    1d18:	a6 2b       	or	r26, r22
    1d1a:	b7 2b       	or	r27, r23
    1d1c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d1e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d20:	82 87       	std	Z+10, r24	; 0x0a
    1d22:	93 87       	std	Z+11, r25	; 0x0b
    1d24:	a4 87       	std	Z+12, r26	; 0x0c
    1d26:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    1d28:	e3 5e       	subi	r30, 0xE3	; 227
    1d2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d2c:	80 81       	ld	r24, Z
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	b8 2f       	mov	r27, r24
    1d36:	aa 27       	eor	r26, r26
    1d38:	99 27       	eor	r25, r25
    1d3a:	88 27       	eor	r24, r24
    1d3c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d3e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d40:	e4 5e       	subi	r30, 0xE4	; 228
    1d42:	fd 4f       	sbci	r31, 0xFD	; 253
    1d44:	40 81       	ld	r20, Z
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	ba 01       	movw	r22, r20
    1d4e:	55 27       	eor	r21, r21
    1d50:	44 27       	eor	r20, r20
    1d52:	84 2b       	or	r24, r20
    1d54:	95 2b       	or	r25, r21
    1d56:	a6 2b       	or	r26, r22
    1d58:	b7 2b       	or	r27, r23
    1d5a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d5c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d5e:	e6 5e       	subi	r30, 0xE6	; 230
    1d60:	fd 4f       	sbci	r31, 0xFD	; 253
    1d62:	40 81       	ld	r20, Z
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	48 2b       	or	r20, r24
    1d6c:	59 2b       	or	r21, r25
    1d6e:	6a 2b       	or	r22, r26
    1d70:	7b 2b       	or	r23, r27
    1d72:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d74:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d76:	e5 5e       	subi	r30, 0xE5	; 229
    1d78:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7a:	90 81       	ld	r25, Z
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	84 2b       	or	r24, r20
    1d84:	95 2b       	or	r25, r21
    1d86:	a6 2b       	or	r26, r22
    1d88:	b7 2b       	or	r27, r23
    1d8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d8e:	86 87       	std	Z+14, r24	; 0x0e
    1d90:	97 87       	std	Z+15, r25	; 0x0f
    1d92:	a0 8b       	std	Z+16, r26	; 0x10
    1d94:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1d96:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d98:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d9a:	4c 92       	st	X, r4
	fs->id = ++Fsid;		/* File system mount ID */
    1d9c:	80 91 f6 01 	lds	r24, 0x01F6
    1da0:	90 91 f7 01 	lds	r25, 0x01F7
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	90 93 f7 01 	sts	0x01F7, r25
    1daa:	80 93 f6 01 	sts	0x01F6, r24
    1dae:	17 96       	adiw	r26, 0x07	; 7
    1db0:	9c 93       	st	X, r25
    1db2:	8e 93       	st	-X, r24
    1db4:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    1db6:	fd 01       	movw	r30, r26
    1db8:	16 a6       	lds	r17, 0xb6
    1dba:	17 a6       	lds	r17, 0xb7
    1dbc:	10 aa       	sts	0x90, r17
    1dbe:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
    1dc0:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    1dc2:	56 96       	adiw	r26, 0x16	; 22
    1dc4:	1d 92       	st	X+, r1
    1dc6:	1d 92       	st	X+, r1
    1dc8:	1d 92       	st	X+, r1
    1dca:	1c 92       	st	X, r1
    1dcc:	59 97       	sbiw	r26, 0x19	; 25
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	27 c0       	rjmp	.+78     	; 0x1e20 <chk_mounted+0x85e>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1dd2:	8b e0       	ldi	r24, 0x0B	; 11
    1dd4:	25 c0       	rjmp	.+74     	; 0x1e20 <chk_mounted+0x85e>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1dd6:	8c e0       	ldi	r24, 0x0C	; 12
    1dd8:	23 c0       	rjmp	.+70     	; 0x1e20 <chk_mounted+0x85e>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	21 c0       	rjmp	.+66     	; 0x1e20 <chk_mounted+0x85e>
	*rfs = fs;							/* Return pointer to the corresponding file system object */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
    1dde:	8a e0       	ldi	r24, 0x0A	; 10
    1de0:	1f c0       	rjmp	.+62     	; 0x1e20 <chk_mounted+0x85e>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	1d c0       	rjmp	.+58     	; 0x1e20 <chk_mounted+0x85e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1de6:	8a e0       	ldi	r24, 0x0A	; 10
    1de8:	1b c0       	rjmp	.+54     	; 0x1e20 <chk_mounted+0x85e>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1dea:	8d e0       	ldi	r24, 0x0D	; 13
    1dec:	19 c0       	rjmp	.+50     	; 0x1e20 <chk_mounted+0x85e>
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	17 c0       	rjmp	.+46     	; 0x1e20 <chk_mounted+0x85e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1df2:	8d e0       	ldi	r24, 0x0D	; 13
    1df4:	15 c0       	rjmp	.+42     	; 0x1e20 <chk_mounted+0x85e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    1df6:	8d e0       	ldi	r24, 0x0D	; 13
    1df8:	13 c0       	rjmp	.+38     	; 0x1e20 <chk_mounted+0x85e>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1dfa:	8d e0       	ldi	r24, 0x0D	; 13
    1dfc:	11 c0       	rjmp	.+34     	; 0x1e20 <chk_mounted+0x85e>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1dfe:	8d e0       	ldi	r24, 0x0D	; 13
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <chk_mounted+0x85e>
    1e02:	8d e0       	ldi	r24, 0x0D	; 13
    1e04:	0d c0       	rjmp	.+26     	; 0x1e20 <chk_mounted+0x85e>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1e06:	8d e0       	ldi	r24, 0x0D	; 13
    1e08:	0b c0       	rjmp	.+22     	; 0x1e20 <chk_mounted+0x85e>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1e0a:	8d e0       	ldi	r24, 0x0D	; 13
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <chk_mounted+0x85e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1e0e:	8d e0       	ldi	r24, 0x0D	; 13
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <chk_mounted+0x85e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <chk_mounted+0x85e>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1e16:	8d e0       	ldi	r24, 0x0D	; 13
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <chk_mounted+0x85e>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1e1a:	8d e0       	ldi	r24, 0x0D	; 13
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <chk_mounted+0x85e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    1e1e:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    1e20:	2f 96       	adiw	r28, 0x0f	; 15
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	7f 90       	pop	r7
    1e46:	6f 90       	pop	r6
    1e48:	5f 90       	pop	r5
    1e4a:	4f 90       	pop	r4
    1e4c:	3f 90       	pop	r3
    1e4e:	2f 90       	pop	r2
    1e50:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1e52:	b9 01       	movw	r22, r18
    1e54:	a8 01       	movw	r20, r16
    1e56:	4e 5f       	subi	r20, 0xFE	; 254
    1e58:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5a:	6f 4f       	sbci	r22, 0xFF	; 255
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e60:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e62:	42 8f       	std	Z+26, r20	; 0x1a
    1e64:	53 8f       	std	Z+27, r21	; 0x1b
    1e66:	64 8f       	std	Z+28, r22	; 0x1c
    1e68:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e70:	bc 81       	ldd	r27, Y+4	; 0x04
    1e72:	8c 0d       	add	r24, r12
    1e74:	9d 1d       	adc	r25, r13
    1e76:	ae 1d       	adc	r26, r14
    1e78:	bf 1d       	adc	r27, r15
    1e7a:	82 a7       	lds	r24, 0x72
    1e7c:	93 a7       	lds	r25, 0x73
    1e7e:	a4 a7       	lds	r26, 0x74
    1e80:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1e82:	8e 81       	ldd	r24, Y+6	; 0x06
    1e84:	9f 81       	ldd	r25, Y+7	; 0x07
    1e86:	a8 85       	ldd	r26, Y+8	; 0x08
    1e88:	b9 85       	ldd	r27, Y+9	; 0x09
    1e8a:	8c 0d       	add	r24, r12
    1e8c:	9d 1d       	adc	r25, r13
    1e8e:	ae 1d       	adc	r26, r14
    1e90:	bf 1d       	adc	r27, r15
    1e92:	82 a3       	lds	r24, 0x52
    1e94:	93 a3       	lds	r25, 0x53
    1e96:	a4 a3       	lds	r26, 0x54
    1e98:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f3 e0       	ldi	r31, 0x03	; 3
    1e9e:	4f 2e       	mov	r4, r31
    1ea0:	f0 2d       	mov	r31, r0
    1ea2:	c8 cd       	rjmp	.-1136   	; 0x1a34 <chk_mounted+0x472>

00001ea4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1ea4:	4f 92       	push	r4
    1ea6:	5f 92       	push	r5
    1ea8:	6f 92       	push	r6
    1eaa:	7f 92       	push	r7
    1eac:	8f 92       	push	r8
    1eae:	9f 92       	push	r9
    1eb0:	af 92       	push	r10
    1eb2:	bf 92       	push	r11
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	cf 93       	push	r28
    1ec0:	5c 01       	movw	r10, r24
    1ec2:	2a 01       	movw	r4, r20
    1ec4:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	c6 a4       	lds	r28, 0xa6
    1eca:	d7 a4       	lds	r29, 0xa7
    1ecc:	e0 a8       	sts	0x00, r30
    1ece:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
    1ed0:	c4 16       	cp	r12, r20
    1ed2:	d5 06       	cpc	r13, r21
    1ed4:	e6 06       	cpc	r14, r22
    1ed6:	f7 06       	cpc	r15, r23
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <move_window+0x38>
    1eda:	54 c0       	rjmp	.+168    	; 0x1f84 <move_window+0xe0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1edc:	84 81       	ldd	r24, Z+4	; 0x04
    1ede:	88 23       	and	r24, r24
    1ee0:	d1 f1       	breq	.+116    	; 0x1f56 <move_window+0xb2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1ee2:	0f 2e       	mov	r0, r31
    1ee4:	f2 e3       	ldi	r31, 0x32	; 50
    1ee6:	8f 2e       	mov	r8, r31
    1ee8:	99 24       	eor	r9, r9
    1eea:	f0 2d       	mov	r31, r0
    1eec:	8a 0c       	add	r8, r10
    1eee:	9b 1c       	adc	r9, r11
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	b4 01       	movw	r22, r8
    1ef4:	a7 01       	movw	r20, r14
    1ef6:	96 01       	movw	r18, r12
    1ef8:	01 e0       	ldi	r16, 0x01	; 1
    1efa:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    1efe:	88 23       	and	r24, r24
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <move_window+0x60>
    1f02:	42 c0       	rjmp	.+132    	; 0x1f88 <move_window+0xe4>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1f04:	f5 01       	movw	r30, r10
    1f06:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1f08:	46 8d       	ldd	r20, Z+30	; 0x1e
    1f0a:	57 8d       	ldd	r21, Z+31	; 0x1f
    1f0c:	60 a1       	lds	r22, 0x40
    1f0e:	71 a1       	lds	r23, 0x41
    1f10:	82 a1       	lds	r24, 0x42
    1f12:	93 a1       	lds	r25, 0x43
    1f14:	a4 a1       	lds	r26, 0x44
    1f16:	b5 a1       	lds	r27, 0x45
    1f18:	84 0f       	add	r24, r20
    1f1a:	95 1f       	adc	r25, r21
    1f1c:	a6 1f       	adc	r26, r22
    1f1e:	b7 1f       	adc	r27, r23
    1f20:	c8 16       	cp	r12, r24
    1f22:	d9 06       	cpc	r13, r25
    1f24:	ea 06       	cpc	r14, r26
    1f26:	fb 06       	cpc	r15, r27
    1f28:	b0 f4       	brcc	.+44     	; 0x1f56 <move_window+0xb2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1f2a:	c3 81       	ldd	r28, Z+3	; 0x03
    1f2c:	c2 30       	cpi	r28, 0x02	; 2
    1f2e:	98 f0       	brcs	.+38     	; 0x1f56 <move_window+0xb2>
					wsect += fs->fsize;
    1f30:	f5 01       	movw	r30, r10
    1f32:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f34:	97 8d       	ldd	r25, Z+31	; 0x1f
    1f36:	a0 a1       	lds	r26, 0x40
    1f38:	b1 a1       	lds	r27, 0x41
    1f3a:	c8 0e       	add	r12, r24
    1f3c:	d9 1e       	adc	r13, r25
    1f3e:	ea 1e       	adc	r14, r26
    1f40:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	b4 01       	movw	r22, r8
    1f46:	a7 01       	movw	r20, r14
    1f48:	96 01       	movw	r18, r12
    1f4a:	01 e0       	ldi	r16, 0x01	; 1
    1f4c:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1f50:	c1 50       	subi	r28, 0x01	; 1
    1f52:	c1 30       	cpi	r28, 0x01	; 1
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <move_window+0x8c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1f56:	41 14       	cp	r4, r1
    1f58:	51 04       	cpc	r5, r1
    1f5a:	61 04       	cpc	r6, r1
    1f5c:	71 04       	cpc	r7, r1
    1f5e:	b1 f0       	breq	.+44     	; 0x1f8c <move_window+0xe8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1f60:	b5 01       	movw	r22, r10
    1f62:	6e 5c       	subi	r22, 0xCE	; 206
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	f5 01       	movw	r30, r10
    1f68:	81 81       	ldd	r24, Z+1	; 0x01
    1f6a:	a3 01       	movw	r20, r6
    1f6c:	92 01       	movw	r18, r4
    1f6e:	01 e0       	ldi	r16, 0x01	; 1
    1f70:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    1f74:	88 23       	and	r24, r24
    1f76:	61 f4       	brne	.+24     	; 0x1f90 <move_window+0xec>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1f78:	f5 01       	movw	r30, r10
    1f7a:	46 a6       	lds	r20, 0xb6
    1f7c:	57 a6       	lds	r21, 0xb7
    1f7e:	60 aa       	sts	0x90, r22
    1f80:	71 aa       	sts	0x91, r23
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <move_window+0xee>
		}
	}

	return FR_OK;
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	05 c0       	rjmp	.+10     	; 0x1f92 <move_window+0xee>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <move_window+0xee>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <move_window+0xee>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1f92:	cf 91       	pop	r28
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	df 90       	pop	r13
    1f9c:	cf 90       	pop	r12
    1f9e:	bf 90       	pop	r11
    1fa0:	af 90       	pop	r10
    1fa2:	9f 90       	pop	r9
    1fa4:	8f 90       	pop	r8
    1fa6:	7f 90       	pop	r7
    1fa8:	6f 90       	pop	r6
    1faa:	5f 90       	pop	r5
    1fac:	4f 90       	pop	r4
    1fae:	08 95       	ret

00001fb0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	ba 01       	movw	r22, r20
    1fc2:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    1fc6:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f0       	breq	.+2      	; 0x1fce <sync+0x1e>
    1fcc:	76 c0       	rjmp	.+236    	; 0x20ba <sync+0x10a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1fce:	f7 01       	movw	r30, r14
    1fd0:	80 81       	ld	r24, Z
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <sync+0x28>
    1fd6:	68 c0       	rjmp	.+208    	; 0x20a8 <sync+0xf8>
    1fd8:	85 81       	ldd	r24, Z+5	; 0x05
    1fda:	88 23       	and	r24, r24
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <sync+0x30>
    1fde:	64 c0       	rjmp	.+200    	; 0x20a8 <sync+0xf8>
			fs->winsect = 0;
    1fe0:	16 a6       	lds	r17, 0xb6
    1fe2:	17 a6       	lds	r17, 0xb7
    1fe4:	10 aa       	sts	0x90, r17
    1fe6:	11 aa       	sts	0x91, r17
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1fe8:	87 01       	movw	r16, r14
    1fea:	0e 5c       	subi	r16, 0xCE	; 206
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	c8 01       	movw	r24, r16
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	52 e0       	ldi	r21, 0x02	; 2
    1ff8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1ffc:	f7 01       	movw	r30, r14
    1ffe:	e0 5d       	subi	r30, 0xD0	; 208
    2000:	fd 4f       	sbci	r31, 0xFD	; 253
    2002:	85 e5       	ldi	r24, 0x55	; 85
    2004:	80 83       	st	Z, r24
    2006:	f7 01       	movw	r30, r14
    2008:	ef 5c       	subi	r30, 0xCF	; 207
    200a:	fd 4f       	sbci	r31, 0xFD	; 253
    200c:	8a ea       	ldi	r24, 0xAA	; 170
    200e:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2010:	82 e5       	ldi	r24, 0x52	; 82
    2012:	f7 01       	movw	r30, r14
    2014:	82 ab       	sts	0x52, r24
    2016:	83 ab       	sts	0x53, r24
    2018:	81 e6       	ldi	r24, 0x61	; 97
    201a:	84 ab       	sts	0x54, r24
    201c:	91 e4       	ldi	r25, 0x41	; 65
    201e:	95 ab       	sts	0x55, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2020:	ea 5e       	subi	r30, 0xEA	; 234
    2022:	fd 4f       	sbci	r31, 0xFD	; 253
    2024:	22 e7       	ldi	r18, 0x72	; 114
    2026:	20 83       	st	Z, r18
    2028:	f7 01       	movw	r30, r14
    202a:	e9 5e       	subi	r30, 0xE9	; 233
    202c:	fd 4f       	sbci	r31, 0xFD	; 253
    202e:	20 83       	st	Z, r18
    2030:	f7 01       	movw	r30, r14
    2032:	e8 5e       	subi	r30, 0xE8	; 232
    2034:	fd 4f       	sbci	r31, 0xFD	; 253
    2036:	90 83       	st	Z, r25
    2038:	f7 01       	movw	r30, r14
    203a:	e7 5e       	subi	r30, 0xE7	; 231
    203c:	fd 4f       	sbci	r31, 0xFD	; 253
    203e:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2040:	f7 01       	movw	r30, r14
    2042:	36 85       	ldd	r19, Z+14	; 0x0e
    2044:	27 85       	ldd	r18, Z+15	; 0x0f
    2046:	90 89       	ldd	r25, Z+16	; 0x10
    2048:	81 89       	ldd	r24, Z+17	; 0x11
    204a:	e6 5e       	subi	r30, 0xE6	; 230
    204c:	fd 4f       	sbci	r31, 0xFD	; 253
    204e:	30 83       	st	Z, r19
    2050:	f7 01       	movw	r30, r14
    2052:	e5 5e       	subi	r30, 0xE5	; 229
    2054:	fd 4f       	sbci	r31, 0xFD	; 253
    2056:	20 83       	st	Z, r18
    2058:	f7 01       	movw	r30, r14
    205a:	e4 5e       	subi	r30, 0xE4	; 228
    205c:	fd 4f       	sbci	r31, 0xFD	; 253
    205e:	90 83       	st	Z, r25
    2060:	f7 01       	movw	r30, r14
    2062:	e3 5e       	subi	r30, 0xE3	; 227
    2064:	fd 4f       	sbci	r31, 0xFD	; 253
    2066:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2068:	f7 01       	movw	r30, r14
    206a:	32 85       	ldd	r19, Z+10	; 0x0a
    206c:	23 85       	ldd	r18, Z+11	; 0x0b
    206e:	94 85       	ldd	r25, Z+12	; 0x0c
    2070:	85 85       	ldd	r24, Z+13	; 0x0d
    2072:	e2 5e       	subi	r30, 0xE2	; 226
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
    2076:	30 83       	st	Z, r19
    2078:	f7 01       	movw	r30, r14
    207a:	e1 5e       	subi	r30, 0xE1	; 225
    207c:	fd 4f       	sbci	r31, 0xFD	; 253
    207e:	20 83       	st	Z, r18
    2080:	f7 01       	movw	r30, r14
    2082:	e0 5e       	subi	r30, 0xE0	; 224
    2084:	fd 4f       	sbci	r31, 0xFD	; 253
    2086:	90 83       	st	Z, r25
    2088:	f7 01       	movw	r30, r14
    208a:	ef 5d       	subi	r30, 0xDF	; 223
    208c:	fd 4f       	sbci	r31, 0xFD	; 253
    208e:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2090:	f7 01       	movw	r30, r14
    2092:	22 89       	ldd	r18, Z+18	; 0x12
    2094:	33 89       	ldd	r19, Z+19	; 0x13
    2096:	44 89       	ldd	r20, Z+20	; 0x14
    2098:	55 89       	ldd	r21, Z+21	; 0x15
    209a:	81 81       	ldd	r24, Z+1	; 0x01
    209c:	b8 01       	movw	r22, r16
    209e:	01 e0       	ldi	r16, 0x01	; 1
    20a0:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
			fs->fsi_flag = 0;
    20a4:	f7 01       	movw	r30, r14
    20a6:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    20a8:	f7 01       	movw	r30, r14
    20aa:	81 81       	ldd	r24, Z+1	; 0x01
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    20b6:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    20b8:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
    20ba:	8c 2f       	mov	r24, r28
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	08 95       	ret

000020c8 <get_fattime>:
#include "diskio.h"		/* Declarations of low level disk I/O functions */

DWORD get_fattime( void )
{
	return 0;
}
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	cb 01       	movw	r24, r22
    20ce:	08 95       	ret

000020d0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    20da:	db 01       	movw	r26, r22
    20dc:	ca 01       	movw	r24, r20
	clst -= 2;
    20de:	02 97       	sbiw	r24, 0x02	; 2
    20e0:	a1 09       	sbc	r26, r1
    20e2:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    20e4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    20e6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    20e8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    20ea:	7d 8d       	ldd	r23, Y+29	; 0x1d
    20ec:	42 50       	subi	r20, 0x02	; 2
    20ee:	50 40       	sbci	r21, 0x00	; 0
    20f0:	60 40       	sbci	r22, 0x00	; 0
    20f2:	70 40       	sbci	r23, 0x00	; 0
    20f4:	84 17       	cp	r24, r20
    20f6:	95 07       	cpc	r25, r21
    20f8:	a6 07       	cpc	r26, r22
    20fa:	b7 07       	cpc	r27, r23
    20fc:	98 f4       	brcc	.+38     	; 0x2124 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    20fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    210e:	8b 01       	movw	r16, r22
    2110:	9c 01       	movw	r18, r24
    2112:	8a a5       	lds	r24, 0x6a
    2114:	9b a5       	lds	r25, 0x6b
    2116:	ac a5       	lds	r26, 0x6c
    2118:	bd a5       	lds	r27, 0x6d
    211a:	08 0f       	add	r16, r24
    211c:	19 1f       	adc	r17, r25
    211e:	2a 1f       	adc	r18, r26
    2120:	3b 1f       	adc	r19, r27
    2122:	03 c0       	rjmp	.+6      	; 0x212a <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2124:	00 e0       	ldi	r16, 0x00	; 0
    2126:	10 e0       	ldi	r17, 0x00	; 0
    2128:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    212a:	60 2f       	mov	r22, r16
    212c:	71 2f       	mov	r23, r17
    212e:	82 2f       	mov	r24, r18
    2130:	93 2f       	mov	r25, r19
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ec 01       	movw	r28, r24
    2150:	6a 01       	movw	r12, r20
    2152:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    2154:	42 30       	cpi	r20, 0x02	; 2
    2156:	51 05       	cpc	r21, r1
    2158:	61 05       	cpc	r22, r1
    215a:	71 05       	cpc	r23, r1
    215c:	08 f4       	brcc	.+2      	; 0x2160 <get_fat+0x24>
    215e:	cf c0       	rjmp	.+414    	; 0x22fe <get_fat+0x1c2>
    2160:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2162:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2164:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2166:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2168:	48 17       	cp	r20, r24
    216a:	59 07       	cpc	r21, r25
    216c:	6a 07       	cpc	r22, r26
    216e:	7b 07       	cpc	r23, r27
    2170:	08 f0       	brcs	.+2      	; 0x2174 <get_fat+0x38>
    2172:	ca c0       	rjmp	.+404    	; 0x2308 <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
    2174:	88 81       	ld	r24, Y
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	09 f4       	brne	.+2      	; 0x217c <get_fat+0x40>
    217a:	5c c0       	rjmp	.+184    	; 0x2234 <get_fat+0xf8>
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	09 f4       	brne	.+2      	; 0x2182 <get_fat+0x46>
    2180:	7b c0       	rjmp	.+246    	; 0x2278 <get_fat+0x13c>
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	09 f0       	breq	.+2      	; 0x2188 <get_fat+0x4c>
    2186:	c5 c0       	rjmp	.+394    	; 0x2312 <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    2188:	9a 01       	movw	r18, r20
    218a:	36 95       	lsr	r19
    218c:	27 95       	ror	r18
    218e:	89 01       	movw	r16, r18
    2190:	04 0f       	add	r16, r20
    2192:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2194:	a8 01       	movw	r20, r16
    2196:	45 2f       	mov	r20, r21
    2198:	55 27       	eor	r21, r21
    219a:	46 95       	lsr	r20
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	8a a1       	lds	r24, 0x4a
    21a2:	9b a1       	lds	r25, 0x4b
    21a4:	ac a1       	lds	r26, 0x4c
    21a6:	bd a1       	lds	r27, 0x4d
    21a8:	48 0f       	add	r20, r24
    21aa:	59 1f       	adc	r21, r25
    21ac:	6a 1f       	adc	r22, r26
    21ae:	7b 1f       	adc	r23, r27
    21b0:	ce 01       	movw	r24, r28
    21b2:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    21b6:	88 23       	and	r24, r24
    21b8:	09 f0       	breq	.+2      	; 0x21bc <get_fat+0x80>
    21ba:	af c0       	rjmp	.+350    	; 0x231a <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
    21bc:	f8 01       	movw	r30, r16
    21be:	f1 70       	andi	r31, 0x01	; 1
    21c0:	ec 0f       	add	r30, r28
    21c2:	fd 1f       	adc	r31, r29
    21c4:	b2 a8       	sts	0x82, r27
    21c6:	0f 5f       	subi	r16, 0xFF	; 255
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    21ca:	a8 01       	movw	r20, r16
    21cc:	45 2f       	mov	r20, r21
    21ce:	55 27       	eor	r21, r21
    21d0:	46 95       	lsr	r20
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	8a a1       	lds	r24, 0x4a
    21d8:	9b a1       	lds	r25, 0x4b
    21da:	ac a1       	lds	r26, 0x4c
    21dc:	bd a1       	lds	r27, 0x4d
    21de:	48 0f       	add	r20, r24
    21e0:	59 1f       	adc	r21, r25
    21e2:	6a 1f       	adc	r22, r26
    21e4:	7b 1f       	adc	r23, r27
    21e6:	ce 01       	movw	r24, r28
    21e8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    21ec:	88 23       	and	r24, r24
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <get_fat+0xb6>
    21f0:	98 c0       	rjmp	.+304    	; 0x2322 <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    21f2:	2b 2d       	mov	r18, r11
    21f4:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    21f6:	f8 01       	movw	r30, r16
    21f8:	f1 70       	andi	r31, 0x01	; 1
    21fa:	ec 0f       	add	r30, r28
    21fc:	fd 1f       	adc	r31, r29
    21fe:	92 a9       	sts	0x42, r25
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	82 2b       	or	r24, r18
    2204:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2206:	21 e0       	ldi	r18, 0x01	; 1
    2208:	c2 22       	and	r12, r18
    220a:	dd 24       	eor	r13, r13
    220c:	c1 14       	cp	r12, r1
    220e:	d1 04       	cpc	r13, r1
    2210:	51 f0       	breq	.+20     	; 0x2226 <get_fat+0xea>
    2212:	92 95       	swap	r25
    2214:	82 95       	swap	r24
    2216:	8f 70       	andi	r24, 0x0F	; 15
    2218:	89 27       	eor	r24, r25
    221a:	9f 70       	andi	r25, 0x0F	; 15
    221c:	89 27       	eor	r24, r25
    221e:	8c 01       	movw	r16, r24
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	89 c0       	rjmp	.+274    	; 0x2338 <get_fat+0x1fc>
    2226:	8c 01       	movw	r16, r24
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	1f 70       	andi	r17, 0x0F	; 15
    222e:	20 70       	andi	r18, 0x00	; 0
    2230:	30 70       	andi	r19, 0x00	; 0
    2232:	82 c0       	rjmp	.+260    	; 0x2338 <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    2234:	45 2f       	mov	r20, r21
    2236:	56 2f       	mov	r21, r22
    2238:	67 2f       	mov	r22, r23
    223a:	77 27       	eor	r23, r23
    223c:	8a a1       	lds	r24, 0x4a
    223e:	9b a1       	lds	r25, 0x4b
    2240:	ac a1       	lds	r26, 0x4c
    2242:	bd a1       	lds	r27, 0x4d
    2244:	48 0f       	add	r20, r24
    2246:	59 1f       	adc	r21, r25
    2248:	6a 1f       	adc	r22, r26
    224a:	7b 1f       	adc	r23, r27
    224c:	ce 01       	movw	r24, r28
    224e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    2252:	88 23       	and	r24, r24
    2254:	09 f0       	breq	.+2      	; 0x2258 <get_fat+0x11c>
    2256:	69 c0       	rjmp	.+210    	; 0x232a <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
    2258:	f6 01       	movw	r30, r12
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    2260:	ce 0f       	add	r28, r30
    2262:	df 1f       	adc	r29, r31
    2264:	9b a9       	sts	0x4b, r25
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	0a a9       	sts	0x4a, r16
    226a:	10 e0       	ldi	r17, 0x00	; 0
    226c:	80 2b       	or	r24, r16
    226e:	91 2b       	or	r25, r17
    2270:	8c 01       	movw	r16, r24
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	60 c0       	rjmp	.+192    	; 0x2338 <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    2278:	68 94       	set
    227a:	16 f8       	bld	r1, 6
    227c:	76 95       	lsr	r23
    227e:	67 95       	ror	r22
    2280:	57 95       	ror	r21
    2282:	47 95       	ror	r20
    2284:	16 94       	lsr	r1
    2286:	d1 f7       	brne	.-12     	; 0x227c <get_fat+0x140>
    2288:	8a a1       	lds	r24, 0x4a
    228a:	9b a1       	lds	r25, 0x4b
    228c:	ac a1       	lds	r26, 0x4c
    228e:	bd a1       	lds	r27, 0x4d
    2290:	48 0f       	add	r20, r24
    2292:	59 1f       	adc	r21, r25
    2294:	6a 1f       	adc	r22, r26
    2296:	7b 1f       	adc	r23, r27
    2298:	ce 01       	movw	r24, r28
    229a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    229e:	88 23       	and	r24, r24
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <get_fat+0x168>
    22a2:	47 c0       	rjmp	.+142    	; 0x2332 <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    22a4:	f6 01       	movw	r30, r12
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    22b0:	ce 0f       	add	r28, r30
    22b2:	df 1f       	adc	r29, r31
    22b4:	0d a9       	sts	0x4d, r16
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	30 2f       	mov	r19, r16
    22be:	22 27       	eor	r18, r18
    22c0:	11 27       	eor	r17, r17
    22c2:	00 27       	eor	r16, r16
    22c4:	8c a9       	sts	0x4c, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e0       	ldi	r26, 0x00	; 0
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	dc 01       	movw	r26, r24
    22ce:	99 27       	eor	r25, r25
    22d0:	88 27       	eor	r24, r24
    22d2:	08 2b       	or	r16, r24
    22d4:	19 2b       	or	r17, r25
    22d6:	2a 2b       	or	r18, r26
    22d8:	3b 2b       	or	r19, r27
    22da:	8a a9       	sts	0x4a, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	08 2b       	or	r16, r24
    22e4:	19 2b       	or	r17, r25
    22e6:	2a 2b       	or	r18, r26
    22e8:	3b 2b       	or	r19, r27
    22ea:	9b a9       	sts	0x4b, r25
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	a0 e0       	ldi	r26, 0x00	; 0
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	08 2b       	or	r16, r24
    22f4:	19 2b       	or	r17, r25
    22f6:	2a 2b       	or	r18, r26
    22f8:	3b 2b       	or	r19, r27
    22fa:	3f 70       	andi	r19, 0x0F	; 15
    22fc:	1d c0       	rjmp	.+58     	; 0x2338 <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    22fe:	01 e0       	ldi	r16, 0x01	; 1
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	18 c0       	rjmp	.+48     	; 0x2338 <get_fat+0x1fc>
    2308:	01 e0       	ldi	r16, 0x01	; 1
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2312:	0f ef       	ldi	r16, 0xFF	; 255
    2314:	1f ef       	ldi	r17, 0xFF	; 255
    2316:	98 01       	movw	r18, r16
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <get_fat+0x1fc>
    231a:	0f ef       	ldi	r16, 0xFF	; 255
    231c:	1f ef       	ldi	r17, 0xFF	; 255
    231e:	98 01       	movw	r18, r16
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <get_fat+0x1fc>
    2322:	0f ef       	ldi	r16, 0xFF	; 255
    2324:	1f ef       	ldi	r17, 0xFF	; 255
    2326:	98 01       	movw	r18, r16
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <get_fat+0x1fc>
    232a:	0f ef       	ldi	r16, 0xFF	; 255
    232c:	1f ef       	ldi	r17, 0xFF	; 255
    232e:	98 01       	movw	r18, r16
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <get_fat+0x1fc>
    2332:	0f ef       	ldi	r16, 0xFF	; 255
    2334:	1f ef       	ldi	r17, 0xFF	; 255
    2336:	98 01       	movw	r18, r16
}
    2338:	60 2f       	mov	r22, r16
    233a:	71 2f       	mov	r23, r17
    233c:	82 2f       	mov	r24, r18
    233e:	93 2f       	mov	r25, r19
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	bf 90       	pop	r11
    2352:	08 95       	ret

00002354 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	ec 01       	movw	r28, r24
    2362:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2364:	7d 83       	std	Y+5, r23	; 0x05
    2366:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    2368:	4e 81       	ldd	r20, Y+6	; 0x06
    236a:	5f 81       	ldd	r21, Y+7	; 0x07
    236c:	68 85       	ldd	r22, Y+8	; 0x08
    236e:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2370:	41 30       	cpi	r20, 0x01	; 1
    2372:	51 05       	cpc	r21, r1
    2374:	61 05       	cpc	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <dir_sdi+0x28>
    237a:	9f c0       	rjmp	.+318    	; 0x24ba <dir_sdi+0x166>
    237c:	e8 81       	ld	r30, Y
    237e:	f9 81       	ldd	r31, Y+1	; 0x01
    2380:	82 8d       	ldd	r24, Z+26	; 0x1a
    2382:	93 8d       	ldd	r25, Z+27	; 0x1b
    2384:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2386:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2388:	48 17       	cp	r20, r24
    238a:	59 07       	cpc	r21, r25
    238c:	6a 07       	cpc	r22, r26
    238e:	7b 07       	cpc	r23, r27
    2390:	08 f0       	brcs	.+2      	; 0x2394 <dir_sdi+0x40>
    2392:	95 c0       	rjmp	.+298    	; 0x24be <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2394:	41 15       	cp	r20, r1
    2396:	51 05       	cpc	r21, r1
    2398:	61 05       	cpc	r22, r1
    239a:	71 05       	cpc	r23, r1
    239c:	69 f5       	brne	.+90     	; 0x23f8 <dir_sdi+0xa4>
    239e:	80 81       	ld	r24, Z
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	49 f4       	brne	.+18     	; 0x23b6 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    23a4:	46 a1       	lds	r20, 0x46
    23a6:	57 a1       	lds	r21, 0x47
    23a8:	60 a5       	lds	r22, 0x60
    23aa:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    23ac:	41 15       	cp	r20, r1
    23ae:	51 05       	cpc	r21, r1
    23b0:	61 05       	cpc	r22, r1
    23b2:	71 05       	cpc	r23, r1
    23b4:	09 f5       	brne	.+66     	; 0x23f8 <dir_sdi+0xa4>
		dj->clust = clst;
    23b6:	1a 86       	std	Y+10, r1	; 0x0a
    23b8:	1b 86       	std	Y+11, r1	; 0x0b
    23ba:	1c 86       	std	Y+12, r1	; 0x0c
    23bc:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    23be:	80 85       	ldd	r24, Z+8	; 0x08
    23c0:	91 85       	ldd	r25, Z+9	; 0x09
    23c2:	08 17       	cp	r16, r24
    23c4:	19 07       	cpc	r17, r25
    23c6:	08 f0       	brcs	.+2      	; 0x23ca <dir_sdi+0x76>
    23c8:	7c c0       	rjmp	.+248    	; 0x24c2 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    23ca:	c8 01       	movw	r24, r16
    23cc:	92 95       	swap	r25
    23ce:	82 95       	swap	r24
    23d0:	8f 70       	andi	r24, 0x0F	; 15
    23d2:	89 27       	eor	r24, r25
    23d4:	9f 70       	andi	r25, 0x0F	; 15
    23d6:	89 27       	eor	r24, r25
    23d8:	ac 01       	movw	r20, r24
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	86 a1       	lds	r24, 0x46
    23e0:	97 a1       	lds	r25, 0x47
    23e2:	a0 a5       	lds	r26, 0x60
    23e4:	b1 a5       	lds	r27, 0x61
    23e6:	84 0f       	add	r24, r20
    23e8:	95 1f       	adc	r25, r21
    23ea:	a6 1f       	adc	r26, r22
    23ec:	b7 1f       	adc	r27, r23
    23ee:	8e 87       	std	Y+14, r24	; 0x0e
    23f0:	9f 87       	std	Y+15, r25	; 0x0f
    23f2:	a8 8b       	std	Y+16, r26	; 0x10
    23f4:	b9 8b       	std	Y+17, r27	; 0x11
    23f6:	4e c0       	rjmp	.+156    	; 0x2494 <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	7c 01       	movw	r14, r24
    23fe:	ee 0c       	add	r14, r14
    2400:	ff 1c       	adc	r15, r15
    2402:	ee 0c       	add	r14, r14
    2404:	ff 1c       	adc	r15, r15
    2406:	ee 0c       	add	r14, r14
    2408:	ff 1c       	adc	r15, r15
    240a:	ee 0c       	add	r14, r14
    240c:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    240e:	0e 15       	cp	r16, r14
    2410:	1f 05       	cpc	r17, r15
    2412:	28 f1       	brcs	.+74     	; 0x245e <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    2414:	88 81       	ld	r24, Y
    2416:	99 81       	ldd	r25, Y+1	; 0x01
    2418:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    241c:	ab 01       	movw	r20, r22
    241e:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2420:	4f 3f       	cpi	r20, 0xFF	; 255
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	58 07       	cpc	r21, r24
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	68 07       	cpc	r22, r24
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	78 07       	cpc	r23, r24
    242e:	09 f4       	brne	.+2      	; 0x2432 <dir_sdi+0xde>
    2430:	4a c0       	rjmp	.+148    	; 0x24c6 <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2432:	42 30       	cpi	r20, 0x02	; 2
    2434:	51 05       	cpc	r21, r1
    2436:	61 05       	cpc	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	08 f4       	brcc	.+2      	; 0x243e <dir_sdi+0xea>
    243c:	46 c0       	rjmp	.+140    	; 0x24ca <dir_sdi+0x176>
    243e:	e8 81       	ld	r30, Y
    2440:	f9 81       	ldd	r31, Y+1	; 0x01
    2442:	82 8d       	ldd	r24, Z+26	; 0x1a
    2444:	93 8d       	ldd	r25, Z+27	; 0x1b
    2446:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2448:	b5 8d       	ldd	r27, Z+29	; 0x1d
    244a:	48 17       	cp	r20, r24
    244c:	59 07       	cpc	r21, r25
    244e:	6a 07       	cpc	r22, r26
    2450:	7b 07       	cpc	r23, r27
    2452:	e8 f5       	brcc	.+122    	; 0x24ce <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    2454:	0e 19       	sub	r16, r14
    2456:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2458:	0e 15       	cp	r16, r14
    245a:	1f 05       	cpc	r17, r15
    245c:	d8 f6       	brcc	.-74     	; 0x2414 <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    245e:	4a 87       	std	Y+10, r20	; 0x0a
    2460:	5b 87       	std	Y+11, r21	; 0x0b
    2462:	6c 87       	std	Y+12, r22	; 0x0c
    2464:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2466:	88 81       	ld	r24, Y
    2468:	99 81       	ldd	r25, Y+1	; 0x01
    246a:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    246e:	ab 01       	movw	r20, r22
    2470:	bc 01       	movw	r22, r24
    2472:	c8 01       	movw	r24, r16
    2474:	92 95       	swap	r25
    2476:	82 95       	swap	r24
    2478:	8f 70       	andi	r24, 0x0F	; 15
    247a:	89 27       	eor	r24, r25
    247c:	9f 70       	andi	r25, 0x0F	; 15
    247e:	89 27       	eor	r24, r25
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	84 0f       	add	r24, r20
    2486:	95 1f       	adc	r25, r21
    2488:	a6 1f       	adc	r26, r22
    248a:	b7 1f       	adc	r27, r23
    248c:	8e 87       	std	Y+14, r24	; 0x0e
    248e:	9f 87       	std	Y+15, r25	; 0x0f
    2490:	a8 8b       	std	Y+16, r26	; 0x10
    2492:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    2494:	88 81       	ld	r24, Y
    2496:	99 81       	ldd	r25, Y+1	; 0x01
    2498:	c2 96       	adiw	r24, 0x32	; 50
    249a:	0f 70       	andi	r16, 0x0F	; 15
    249c:	10 70       	andi	r17, 0x00	; 0
    249e:	00 0f       	add	r16, r16
    24a0:	11 1f       	adc	r17, r17
    24a2:	02 95       	swap	r16
    24a4:	12 95       	swap	r17
    24a6:	10 7f       	andi	r17, 0xF0	; 240
    24a8:	10 27       	eor	r17, r16
    24aa:	00 7f       	andi	r16, 0xF0	; 240
    24ac:	10 27       	eor	r17, r16
    24ae:	80 0f       	add	r24, r16
    24b0:	91 1f       	adc	r25, r17
    24b2:	9b 8b       	std	Y+19, r25	; 0x13
    24b4:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	0b c0       	rjmp	.+22     	; 0x24d0 <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	09 c0       	rjmp	.+18     	; 0x24d0 <dir_sdi+0x17c>
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	07 c0       	rjmp	.+14     	; 0x24d0 <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <dir_sdi+0x17c>
    24ce:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	08 95       	ret

000024de <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    24e4:	6c 81       	ldd	r22, Y+4	; 0x04
    24e6:	7d 81       	ldd	r23, Y+5	; 0x05
    24e8:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
	if (res == FR_OK) {
    24ec:	88 23       	and	r24, r24
    24ee:	91 f4       	brne	.+36     	; 0x2514 <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    24f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    24f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    24f4:	68 89       	ldd	r22, Y+16	; 0x10
    24f6:	79 89       	ldd	r23, Y+17	; 0x11
    24f8:	88 81       	ld	r24, Y
    24fa:	99 81       	ldd	r25, Y+1	; 0x01
    24fc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
		if (res == FR_OK) {
    2500:	88 23       	and	r24, r24
    2502:	41 f4       	brne	.+16     	; 0x2514 <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    2504:	ea 89       	ldd	r30, Y+18	; 0x12
    2506:	fb 89       	ldd	r31, Y+19	; 0x13
    2508:	95 ee       	ldi	r25, 0xE5	; 229
    250a:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    250c:	e8 81       	ld	r30, Y
    250e:	f9 81       	ldd	r31, Y+1	; 0x01
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    251a:	8f 92       	push	r8
    251c:	9f 92       	push	r9
    251e:	af 92       	push	r10
    2520:	bf 92       	push	r11
    2522:	cf 92       	push	r12
    2524:	df 92       	push	r13
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	ec 01       	movw	r28, r24
    2534:	6a 01       	movw	r12, r20
    2536:	7b 01       	movw	r14, r22
    2538:	48 01       	movw	r8, r16
    253a:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    253c:	42 30       	cpi	r20, 0x02	; 2
    253e:	51 05       	cpc	r21, r1
    2540:	61 05       	cpc	r22, r1
    2542:	71 05       	cpc	r23, r1
    2544:	08 f4       	brcc	.+2      	; 0x2548 <put_fat+0x2e>
    2546:	ca c0       	rjmp	.+404    	; 0x26dc <put_fat+0x1c2>
    2548:	8a 8d       	ldd	r24, Y+26	; 0x1a
    254a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    254c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    254e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2550:	48 17       	cp	r20, r24
    2552:	59 07       	cpc	r21, r25
    2554:	6a 07       	cpc	r22, r26
    2556:	7b 07       	cpc	r23, r27
    2558:	08 f0       	brcs	.+2      	; 0x255c <put_fat+0x42>
    255a:	c2 c0       	rjmp	.+388    	; 0x26e0 <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    255c:	88 81       	ld	r24, Y
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	09 f4       	brne	.+2      	; 0x2564 <put_fat+0x4a>
    2562:	6a c0       	rjmp	.+212    	; 0x2638 <put_fat+0x11e>
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	09 f4       	brne	.+2      	; 0x256a <put_fat+0x50>
    2568:	82 c0       	rjmp	.+260    	; 0x266e <put_fat+0x154>
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	09 f0       	breq	.+2      	; 0x2570 <put_fat+0x56>
    256e:	b2 c0       	rjmp	.+356    	; 0x26d4 <put_fat+0x1ba>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    2570:	9a 01       	movw	r18, r20
    2572:	36 95       	lsr	r19
    2574:	27 95       	ror	r18
    2576:	89 01       	movw	r16, r18
    2578:	04 0f       	add	r16, r20
    257a:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    257c:	a8 01       	movw	r20, r16
    257e:	45 2f       	mov	r20, r21
    2580:	55 27       	eor	r21, r21
    2582:	46 95       	lsr	r20
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	8a a1       	lds	r24, 0x4a
    258a:	9b a1       	lds	r25, 0x4b
    258c:	ac a1       	lds	r26, 0x4c
    258e:	bd a1       	lds	r27, 0x4d
    2590:	48 0f       	add	r20, r24
    2592:	59 1f       	adc	r21, r25
    2594:	6a 1f       	adc	r22, r26
    2596:	7b 1f       	adc	r23, r27
    2598:	ce 01       	movw	r24, r28
    259a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
			if (res != FR_OK) break;
    259e:	88 23       	and	r24, r24
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <put_fat+0x8a>
    25a2:	99 c0       	rjmp	.+306    	; 0x26d6 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    25a4:	c8 01       	movw	r24, r16
    25a6:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    25a8:	e1 e0       	ldi	r30, 0x01	; 1
    25aa:	ce 22       	and	r12, r30
    25ac:	dd 24       	eor	r13, r13
    25ae:	c1 14       	cp	r12, r1
    25b0:	d1 04       	cpc	r13, r1
    25b2:	51 f0       	breq	.+20     	; 0x25c8 <put_fat+0xae>
    25b4:	fe 01       	movw	r30, r28
    25b6:	e8 0f       	add	r30, r24
    25b8:	f9 1f       	adc	r31, r25
    25ba:	22 a9       	sts	0x42, r18
    25bc:	2f 70       	andi	r18, 0x0F	; 15
    25be:	38 2d       	mov	r19, r8
    25c0:	32 95       	swap	r19
    25c2:	30 7f       	andi	r19, 0xF0	; 240
    25c4:	23 2b       	or	r18, r19
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <put_fat+0xb0>
    25c8:	28 2d       	mov	r18, r8
    25ca:	fe 01       	movw	r30, r28
    25cc:	e8 0f       	add	r30, r24
    25ce:	f9 1f       	adc	r31, r25
    25d0:	22 ab       	sts	0x52, r18
			bc++;
    25d2:	0f 5f       	subi	r16, 0xFF	; 255
    25d4:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    25da:	a8 01       	movw	r20, r16
    25dc:	45 2f       	mov	r20, r21
    25de:	55 27       	eor	r21, r21
    25e0:	46 95       	lsr	r20
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	8a a1       	lds	r24, 0x4a
    25e8:	9b a1       	lds	r25, 0x4b
    25ea:	ac a1       	lds	r26, 0x4c
    25ec:	bd a1       	lds	r27, 0x4d
    25ee:	48 0f       	add	r20, r24
    25f0:	59 1f       	adc	r21, r25
    25f2:	6a 1f       	adc	r22, r26
    25f4:	7b 1f       	adc	r23, r27
    25f6:	ce 01       	movw	r24, r28
    25f8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
			if (res != FR_OK) break;
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <put_fat+0xe8>
    2600:	6a c0       	rjmp	.+212    	; 0x26d6 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    2602:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2604:	c1 14       	cp	r12, r1
    2606:	d1 04       	cpc	r13, r1
    2608:	49 f0       	breq	.+18     	; 0x261c <put_fat+0x102>
    260a:	68 94       	set
    260c:	13 f8       	bld	r1, 3
    260e:	b6 94       	lsr	r11
    2610:	a7 94       	ror	r10
    2612:	97 94       	ror	r9
    2614:	87 94       	ror	r8
    2616:	16 94       	lsr	r1
    2618:	d1 f7       	brne	.-12     	; 0x260e <put_fat+0xf4>
    261a:	09 c0       	rjmp	.+18     	; 0x262e <put_fat+0x114>
    261c:	fe 01       	movw	r30, r28
    261e:	e0 0f       	add	r30, r16
    2620:	f1 1f       	adc	r31, r17
    2622:	22 a9       	sts	0x42, r18
    2624:	20 7f       	andi	r18, 0xF0	; 240
    2626:	99 2d       	mov	r25, r9
    2628:	9f 70       	andi	r25, 0x0F	; 15
    262a:	82 2e       	mov	r8, r18
    262c:	89 2a       	or	r8, r25
    262e:	0c 0f       	add	r16, r28
    2630:	1d 1f       	adc	r17, r29
    2632:	f8 01       	movw	r30, r16
    2634:	82 aa       	sts	0x92, r24
			break;
    2636:	4f c0       	rjmp	.+158    	; 0x26d6 <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2638:	45 2f       	mov	r20, r21
    263a:	56 2f       	mov	r21, r22
    263c:	67 2f       	mov	r22, r23
    263e:	77 27       	eor	r23, r23
    2640:	8a a1       	lds	r24, 0x4a
    2642:	9b a1       	lds	r25, 0x4b
    2644:	ac a1       	lds	r26, 0x4c
    2646:	bd a1       	lds	r27, 0x4d
    2648:	48 0f       	add	r20, r24
    264a:	59 1f       	adc	r21, r25
    264c:	6a 1f       	adc	r22, r26
    264e:	7b 1f       	adc	r23, r27
    2650:	ce 01       	movw	r24, r28
    2652:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
			if (res != FR_OK) break;
    2656:	88 23       	and	r24, r24
    2658:	09 f0       	breq	.+2      	; 0x265c <put_fat+0x142>
    265a:	3d c0       	rjmp	.+122    	; 0x26d6 <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    265c:	f6 01       	movw	r30, r12
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    2664:	ec 0f       	add	r30, r28
    2666:	fd 1f       	adc	r31, r29
    2668:	82 aa       	sts	0x92, r24
    266a:	93 aa       	sts	0x93, r25
			break;
    266c:	34 c0       	rjmp	.+104    	; 0x26d6 <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    266e:	68 94       	set
    2670:	16 f8       	bld	r1, 6
    2672:	76 95       	lsr	r23
    2674:	67 95       	ror	r22
    2676:	57 95       	ror	r21
    2678:	47 95       	ror	r20
    267a:	16 94       	lsr	r1
    267c:	d1 f7       	brne	.-12     	; 0x2672 <put_fat+0x158>
    267e:	8a a1       	lds	r24, 0x4a
    2680:	9b a1       	lds	r25, 0x4b
    2682:	ac a1       	lds	r26, 0x4c
    2684:	bd a1       	lds	r27, 0x4d
    2686:	48 0f       	add	r20, r24
    2688:	59 1f       	adc	r21, r25
    268a:	6a 1f       	adc	r22, r26
    268c:	7b 1f       	adc	r23, r27
    268e:	ce 01       	movw	r24, r28
    2690:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
			if (res != FR_OK) break;
    2694:	88 23       	and	r24, r24
    2696:	f9 f4       	brne	.+62     	; 0x26d6 <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    2698:	96 01       	movw	r18, r12
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    26a4:	fe 01       	movw	r30, r28
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	45 a9       	sts	0x45, r20
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	74 2f       	mov	r23, r20
    26b4:	66 27       	eor	r22, r22
    26b6:	55 27       	eor	r21, r21
    26b8:	44 27       	eor	r20, r20
    26ba:	40 70       	andi	r20, 0x00	; 0
    26bc:	50 70       	andi	r21, 0x00	; 0
    26be:	60 70       	andi	r22, 0x00	; 0
    26c0:	70 7f       	andi	r23, 0xF0	; 240
    26c2:	48 29       	or	r20, r8
    26c4:	59 29       	or	r21, r9
    26c6:	6a 29       	or	r22, r10
    26c8:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    26ca:	42 ab       	sts	0x52, r20
    26cc:	53 ab       	sts	0x53, r21
    26ce:	64 ab       	sts	0x54, r22
    26d0:	75 ab       	sts	0x55, r23
			break;
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    26d4:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <put_fat+0x1c8>
    26e0:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	df 90       	pop	r13
    26f0:	cf 90       	pop	r12
    26f2:	bf 90       	pop	r11
    26f4:	af 90       	pop	r10
    26f6:	9f 90       	pop	r9
    26f8:	8f 90       	pop	r8
    26fa:	08 95       	ret

000026fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    26fc:	2f 92       	push	r2
    26fe:	3f 92       	push	r3
    2700:	4f 92       	push	r4
    2702:	5f 92       	push	r5
    2704:	6f 92       	push	r6
    2706:	7f 92       	push	r7
    2708:	8f 92       	push	r8
    270a:	9f 92       	push	r9
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	00 d0       	rcall	.+0      	; 0x2722 <create_chain+0x26>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <create_chain+0x28>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	1c 01       	movw	r2, r24
    272a:	49 83       	std	Y+1, r20	; 0x01
    272c:	5a 83       	std	Y+2, r21	; 0x02
    272e:	6b 83       	std	Y+3, r22	; 0x03
    2730:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    2732:	41 15       	cp	r20, r1
    2734:	51 05       	cpc	r21, r1
    2736:	61 05       	cpc	r22, r1
    2738:	71 05       	cpc	r23, r1
    273a:	c1 f4       	brne	.+48     	; 0x276c <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    273c:	dc 01       	movw	r26, r24
    273e:	1a 96       	adiw	r26, 0x0a	; 10
    2740:	8d 90       	ld	r8, X+
    2742:	9d 90       	ld	r9, X+
    2744:	ad 90       	ld	r10, X+
    2746:	bc 90       	ld	r11, X
    2748:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    274a:	81 14       	cp	r8, r1
    274c:	91 04       	cpc	r9, r1
    274e:	a1 04       	cpc	r10, r1
    2750:	b1 04       	cpc	r11, r1
    2752:	51 f1       	breq	.+84     	; 0x27a8 <create_chain+0xac>
    2754:	5a 96       	adiw	r26, 0x1a	; 26
    2756:	8d 91       	ld	r24, X+
    2758:	9d 91       	ld	r25, X+
    275a:	0d 90       	ld	r0, X+
    275c:	bc 91       	ld	r27, X
    275e:	a0 2d       	mov	r26, r0
    2760:	88 16       	cp	r8, r24
    2762:	99 06       	cpc	r9, r25
    2764:	aa 06       	cpc	r10, r26
    2766:	bb 06       	cpc	r11, r27
    2768:	20 f5       	brcc	.+72     	; 0x27b2 <create_chain+0xb6>
    276a:	27 c0       	rjmp	.+78     	; 0x27ba <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    276c:	49 81       	ldd	r20, Y+1	; 0x01
    276e:	5a 81       	ldd	r21, Y+2	; 0x02
    2770:	6b 81       	ldd	r22, Y+3	; 0x03
    2772:	7c 81       	ldd	r23, Y+4	; 0x04
    2774:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    2778:	8b 01       	movw	r16, r22
    277a:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    277c:	62 30       	cpi	r22, 0x02	; 2
    277e:	71 05       	cpc	r23, r1
    2780:	81 05       	cpc	r24, r1
    2782:	91 05       	cpc	r25, r1
    2784:	08 f4       	brcc	.+2      	; 0x2788 <create_chain+0x8c>
    2786:	ad c0       	rjmp	.+346    	; 0x28e2 <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2788:	f1 01       	movw	r30, r2
    278a:	82 8d       	ldd	r24, Z+26	; 0x1a
    278c:	93 8d       	ldd	r25, Z+27	; 0x1b
    278e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2790:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2792:	08 17       	cp	r16, r24
    2794:	19 07       	cpc	r17, r25
    2796:	2a 07       	cpc	r18, r26
    2798:	3b 07       	cpc	r19, r27
    279a:	08 f4       	brcc	.+2      	; 0x279e <create_chain+0xa2>
    279c:	b6 c0       	rjmp	.+364    	; 0x290a <create_chain+0x20e>
		scl = clst;
    279e:	89 80       	ldd	r8, Y+1	; 0x01
    27a0:	9a 80       	ldd	r9, Y+2	; 0x02
    27a2:	ab 80       	ldd	r10, Y+3	; 0x03
    27a4:	bc 80       	ldd	r11, Y+4	; 0x04
    27a6:	09 c0       	rjmp	.+18     	; 0x27ba <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    27a8:	88 24       	eor	r8, r8
    27aa:	99 24       	eor	r9, r9
    27ac:	54 01       	movw	r10, r8
    27ae:	83 94       	inc	r8
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <create_chain+0xbe>
    27b2:	88 24       	eor	r8, r8
    27b4:	99 24       	eor	r9, r9
    27b6:	54 01       	movw	r10, r8
    27b8:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    27ba:	75 01       	movw	r14, r10
    27bc:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    27be:	44 24       	eor	r4, r4
    27c0:	55 24       	eor	r5, r5
    27c2:	32 01       	movw	r6, r4
    27c4:	68 94       	set
    27c6:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    27c8:	08 94       	sec
    27ca:	c1 1c       	adc	r12, r1
    27cc:	d1 1c       	adc	r13, r1
    27ce:	e1 1c       	adc	r14, r1
    27d0:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    27d2:	f1 01       	movw	r30, r2
    27d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    27d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    27d8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    27da:	b5 8d       	ldd	r27, Z+29	; 0x1d
    27dc:	c8 16       	cp	r12, r24
    27de:	d9 06       	cpc	r13, r25
    27e0:	ea 06       	cpc	r14, r26
    27e2:	fb 06       	cpc	r15, r27
    27e4:	48 f0       	brcs	.+18     	; 0x27f8 <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    27e6:	f2 e0       	ldi	r31, 0x02	; 2
    27e8:	8f 16       	cp	r8, r31
    27ea:	91 04       	cpc	r9, r1
    27ec:	a1 04       	cpc	r10, r1
    27ee:	b1 04       	cpc	r11, r1
    27f0:	08 f4       	brcc	.+2      	; 0x27f4 <create_chain+0xf8>
    27f2:	7c c0       	rjmp	.+248    	; 0x28ec <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    27f4:	73 01       	movw	r14, r6
    27f6:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    27f8:	c1 01       	movw	r24, r2
    27fa:	b7 01       	movw	r22, r14
    27fc:	a6 01       	movw	r20, r12
    27fe:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    2802:	8b 01       	movw	r16, r22
    2804:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    2806:	61 15       	cp	r22, r1
    2808:	71 05       	cpc	r23, r1
    280a:	81 05       	cpc	r24, r1
    280c:	91 05       	cpc	r25, r1
    280e:	a9 f0       	breq	.+42     	; 0x283a <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2810:	0f 3f       	cpi	r16, 0xFF	; 255
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	18 07       	cpc	r17, r24
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	28 07       	cpc	r18, r24
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	38 07       	cpc	r19, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <create_chain+0x126>
    2820:	74 c0       	rjmp	.+232    	; 0x290a <create_chain+0x20e>
    2822:	01 30       	cpi	r16, 0x01	; 1
    2824:	11 05       	cpc	r17, r1
    2826:	21 05       	cpc	r18, r1
    2828:	31 05       	cpc	r19, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <create_chain+0x132>
    282c:	6e c0       	rjmp	.+220    	; 0x290a <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    282e:	c8 14       	cp	r12, r8
    2830:	d9 04       	cpc	r13, r9
    2832:	ea 04       	cpc	r14, r10
    2834:	fb 04       	cpc	r15, r11
    2836:	41 f6       	brne	.-112    	; 0x27c8 <create_chain+0xcc>
    2838:	5d c0       	rjmp	.+186    	; 0x28f4 <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    283a:	8c 2c       	mov	r8, r12
    283c:	4d 2c       	mov	r4, r13
    283e:	be 2c       	mov	r11, r14
    2840:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2842:	c1 01       	movw	r24, r2
    2844:	4c 2d       	mov	r20, r12
    2846:	5d 2d       	mov	r21, r13
    2848:	6e 2d       	mov	r22, r14
    284a:	7f 2d       	mov	r23, r15
    284c:	0f ef       	ldi	r16, 0xFF	; 255
    284e:	1f ef       	ldi	r17, 0xFF	; 255
    2850:	2f ef       	ldi	r18, 0xFF	; 255
    2852:	3f e0       	ldi	r19, 0x0F	; 15
    2854:	0e 94 8d 12 	call	0x251a	; 0x251a <put_fat>
	if (res == FR_OK && clst != 0) {
    2858:	88 23       	and	r24, r24
    285a:	e9 f5       	brne	.+122    	; 0x28d6 <create_chain+0x1da>
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	ab 81       	ldd	r26, Y+3	; 0x03
    2862:	bc 81       	ldd	r27, Y+4	; 0x04
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	a1 05       	cpc	r26, r1
    2868:	b1 05       	cpc	r27, r1
    286a:	69 f0       	breq	.+26     	; 0x2886 <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    286c:	c1 01       	movw	r24, r2
    286e:	49 81       	ldd	r20, Y+1	; 0x01
    2870:	5a 81       	ldd	r21, Y+2	; 0x02
    2872:	6b 81       	ldd	r22, Y+3	; 0x03
    2874:	7c 81       	ldd	r23, Y+4	; 0x04
    2876:	0c 2d       	mov	r16, r12
    2878:	1d 2d       	mov	r17, r13
    287a:	2e 2d       	mov	r18, r14
    287c:	3f 2d       	mov	r19, r15
    287e:	0e 94 8d 12 	call	0x251a	; 0x251a <put_fat>
	}
	if (res == FR_OK) {
    2882:	88 23       	and	r24, r24
    2884:	41 f5       	brne	.+80     	; 0x28d6 <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    2886:	d1 01       	movw	r26, r2
    2888:	1a 96       	adiw	r26, 0x0a	; 10
    288a:	8c 92       	st	X, r8
    288c:	1a 97       	sbiw	r26, 0x0a	; 10
    288e:	1b 96       	adiw	r26, 0x0b	; 11
    2890:	4c 92       	st	X, r4
    2892:	1b 97       	sbiw	r26, 0x0b	; 11
    2894:	1c 96       	adiw	r26, 0x0c	; 12
    2896:	bc 92       	st	X, r11
    2898:	1c 97       	sbiw	r26, 0x0c	; 12
    289a:	1d 96       	adiw	r26, 0x0d	; 13
    289c:	ac 92       	st	X, r10
    289e:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    28a0:	1e 96       	adiw	r26, 0x0e	; 14
    28a2:	8d 91       	ld	r24, X+
    28a4:	9d 91       	ld	r25, X+
    28a6:	0d 90       	ld	r0, X+
    28a8:	bc 91       	ld	r27, X
    28aa:	a0 2d       	mov	r26, r0
    28ac:	8f 3f       	cpi	r24, 0xFF	; 255
    28ae:	ef ef       	ldi	r30, 0xFF	; 255
    28b0:	9e 07       	cpc	r25, r30
    28b2:	ef ef       	ldi	r30, 0xFF	; 255
    28b4:	ae 07       	cpc	r26, r30
    28b6:	ef ef       	ldi	r30, 0xFF	; 255
    28b8:	be 07       	cpc	r27, r30
    28ba:	01 f1       	breq	.+64     	; 0x28fc <create_chain+0x200>
			fs->free_clust--;
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	a1 09       	sbc	r26, r1
    28c0:	b1 09       	sbc	r27, r1
    28c2:	f1 01       	movw	r30, r2
    28c4:	86 87       	std	Z+14, r24	; 0x0e
    28c6:	97 87       	std	Z+15, r25	; 0x0f
    28c8:	a0 8b       	std	Z+16, r26	; 0x10
    28ca:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	85 83       	std	Z+5, r24	; 0x05
    28d0:	97 01       	movw	r18, r14
    28d2:	86 01       	movw	r16, r12
    28d4:	1a c0       	rjmp	.+52     	; 0x290a <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	a1 f4       	brne	.+40     	; 0x2902 <create_chain+0x206>
    28da:	0f ef       	ldi	r16, 0xFF	; 255
    28dc:	1f ef       	ldi	r17, 0xFF	; 255
    28de:	98 01       	movw	r18, r16
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    28e2:	01 e0       	ldi	r16, 0x01	; 1
    28e4:	10 e0       	ldi	r17, 0x00	; 0
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    28ec:	00 e0       	ldi	r16, 0x00	; 0
    28ee:	10 e0       	ldi	r17, 0x00	; 0
    28f0:	98 01       	movw	r18, r16
    28f2:	0b c0       	rjmp	.+22     	; 0x290a <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    28f4:	00 e0       	ldi	r16, 0x00	; 0
    28f6:	10 e0       	ldi	r17, 0x00	; 0
    28f8:	98 01       	movw	r18, r16
    28fa:	07 c0       	rjmp	.+14     	; 0x290a <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    28fc:	97 01       	movw	r18, r14
    28fe:	86 01       	movw	r16, r12
    2900:	04 c0       	rjmp	.+8      	; 0x290a <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2902:	01 e0       	ldi	r16, 0x01	; 1
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    290a:	60 2f       	mov	r22, r16
    290c:	71 2f       	mov	r23, r17
    290e:	82 2f       	mov	r24, r18
    2910:	93 2f       	mov	r25, r19
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	9f 90       	pop	r9
    2930:	8f 90       	pop	r8
    2932:	7f 90       	pop	r7
    2934:	6f 90       	pop	r6
    2936:	5f 90       	pop	r5
    2938:	4f 90       	pop	r4
    293a:	3f 90       	pop	r3
    293c:	2f 90       	pop	r2
    293e:	08 95       	ret

00002940 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	8c 01       	movw	r16, r24
    295a:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    295c:	dc 01       	movw	r26, r24
    295e:	14 96       	adiw	r26, 0x04	; 4
    2960:	ed 90       	ld	r14, X+
    2962:	fc 90       	ld	r15, X
    2964:	15 97       	sbiw	r26, 0x05	; 5
    2966:	08 94       	sec
    2968:	e1 1c       	adc	r14, r1
    296a:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    296c:	e1 14       	cp	r14, r1
    296e:	f1 04       	cpc	r15, r1
    2970:	09 f4       	brne	.+2      	; 0x2974 <dir_next+0x34>
    2972:	09 c1       	rjmp	.+530    	; 0x2b86 <dir_next+0x246>
    2974:	1e 96       	adiw	r26, 0x0e	; 14
    2976:	8d 91       	ld	r24, X+
    2978:	9d 91       	ld	r25, X+
    297a:	0d 90       	ld	r0, X+
    297c:	bc 91       	ld	r27, X
    297e:	a0 2d       	mov	r26, r0
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	a1 05       	cpc	r26, r1
    2984:	b1 05       	cpc	r27, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <dir_next+0x4a>
    2988:	00 c1       	rjmp	.+512    	; 0x2b8a <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    298a:	0f 2e       	mov	r0, r31
    298c:	ff e0       	ldi	r31, 0x0F	; 15
    298e:	cf 2e       	mov	r12, r31
    2990:	dd 24       	eor	r13, r13
    2992:	f0 2d       	mov	r31, r0
    2994:	ce 20       	and	r12, r14
    2996:	df 20       	and	r13, r15
    2998:	c1 14       	cp	r12, r1
    299a:	d1 04       	cpc	r13, r1
    299c:	09 f0       	breq	.+2      	; 0x29a0 <dir_next+0x60>
    299e:	d8 c0       	rjmp	.+432    	; 0x2b50 <dir_next+0x210>
		dj->sect++;					/* Next sector */
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	a1 1d       	adc	r26, r1
    29a4:	b1 1d       	adc	r27, r1
    29a6:	f8 01       	movw	r30, r16
    29a8:	86 87       	std	Z+14, r24	; 0x0e
    29aa:	97 87       	std	Z+15, r25	; 0x0f
    29ac:	a0 8b       	std	Z+16, r26	; 0x10
    29ae:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    29b0:	42 85       	ldd	r20, Z+10	; 0x0a
    29b2:	53 85       	ldd	r21, Z+11	; 0x0b
    29b4:	64 85       	ldd	r22, Z+12	; 0x0c
    29b6:	75 85       	ldd	r23, Z+13	; 0x0d
    29b8:	41 15       	cp	r20, r1
    29ba:	51 05       	cpc	r21, r1
    29bc:	61 05       	cpc	r22, r1
    29be:	71 05       	cpc	r23, r1
    29c0:	51 f4       	brne	.+20     	; 0x29d6 <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    29c2:	01 90       	ld	r0, Z+
    29c4:	f0 81       	ld	r31, Z
    29c6:	e0 2d       	mov	r30, r0
    29c8:	80 85       	ldd	r24, Z+8	; 0x08
    29ca:	91 85       	ldd	r25, Z+9	; 0x09
    29cc:	e8 16       	cp	r14, r24
    29ce:	f9 06       	cpc	r15, r25
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <dir_next+0x94>
    29d2:	dd c0       	rjmp	.+442    	; 0x2b8e <dir_next+0x24e>
    29d4:	bd c0       	rjmp	.+378    	; 0x2b50 <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    29d6:	01 90       	ld	r0, Z+
    29d8:	f0 81       	ld	r31, Z
    29da:	e0 2d       	mov	r30, r0
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	97 01       	movw	r18, r14
    29e4:	32 95       	swap	r19
    29e6:	22 95       	swap	r18
    29e8:	2f 70       	andi	r18, 0x0F	; 15
    29ea:	23 27       	eor	r18, r19
    29ec:	3f 70       	andi	r19, 0x0F	; 15
    29ee:	23 27       	eor	r18, r19
    29f0:	82 23       	and	r24, r18
    29f2:	93 23       	and	r25, r19
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	09 f0       	breq	.+2      	; 0x29fa <dir_next+0xba>
    29f8:	ab c0       	rjmp	.+342    	; 0x2b50 <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    29fa:	cf 01       	movw	r24, r30
    29fc:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    2a00:	4b 01       	movw	r8, r22
    2a02:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    2a04:	62 30       	cpi	r22, 0x02	; 2
    2a06:	71 05       	cpc	r23, r1
    2a08:	81 05       	cpc	r24, r1
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <dir_next+0xd0>
    2a0e:	c1 c0       	rjmp	.+386    	; 0x2b92 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2a10:	6f 3f       	cpi	r22, 0xFF	; 255
    2a12:	ef ef       	ldi	r30, 0xFF	; 255
    2a14:	7e 07       	cpc	r23, r30
    2a16:	ef ef       	ldi	r30, 0xFF	; 255
    2a18:	8e 07       	cpc	r24, r30
    2a1a:	ef ef       	ldi	r30, 0xFF	; 255
    2a1c:	9e 07       	cpc	r25, r30
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <dir_next+0xe2>
    2a20:	ba c0       	rjmp	.+372    	; 0x2b96 <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2a22:	d8 01       	movw	r26, r16
    2a24:	ed 91       	ld	r30, X+
    2a26:	fc 91       	ld	r31, X
    2a28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a2a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a2c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2a2e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2a30:	88 16       	cp	r8, r24
    2a32:	99 06       	cpc	r9, r25
    2a34:	aa 06       	cpc	r10, r26
    2a36:	bb 06       	cpc	r11, r27
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <dir_next+0xfc>
    2a3a:	78 c0       	rjmp	.+240    	; 0x2b2c <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2a3c:	20 97       	sbiw	r28, 0x00	; 0
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <dir_next+0x102>
    2a40:	ac c0       	rjmp	.+344    	; 0x2b9a <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2a42:	d8 01       	movw	r26, r16
    2a44:	1a 96       	adiw	r26, 0x0a	; 10
    2a46:	4d 91       	ld	r20, X+
    2a48:	5d 91       	ld	r21, X+
    2a4a:	6d 91       	ld	r22, X+
    2a4c:	7c 91       	ld	r23, X
    2a4e:	1d 97       	sbiw	r26, 0x0d	; 13
    2a50:	cf 01       	movw	r24, r30
    2a52:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    2a56:	4b 01       	movw	r8, r22
    2a58:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2a5a:	61 15       	cp	r22, r1
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	81 05       	cpc	r24, r1
    2a60:	91 05       	cpc	r25, r1
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <dir_next+0x126>
    2a64:	9c c0       	rjmp	.+312    	; 0x2b9e <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    2a66:	61 30       	cpi	r22, 0x01	; 1
    2a68:	71 05       	cpc	r23, r1
    2a6a:	81 05       	cpc	r24, r1
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <dir_next+0x132>
    2a70:	98 c0       	rjmp	.+304    	; 0x2ba2 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2a72:	6f 3f       	cpi	r22, 0xFF	; 255
    2a74:	ef ef       	ldi	r30, 0xFF	; 255
    2a76:	7e 07       	cpc	r23, r30
    2a78:	ef ef       	ldi	r30, 0xFF	; 255
    2a7a:	8e 07       	cpc	r24, r30
    2a7c:	ef ef       	ldi	r30, 0xFF	; 255
    2a7e:	9e 07       	cpc	r25, r30
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <dir_next+0x144>
    2a82:	91 c0       	rjmp	.+290    	; 0x2ba6 <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2a84:	d8 01       	movw	r26, r16
    2a86:	8d 91       	ld	r24, X+
    2a88:	9c 91       	ld	r25, X
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	50 e0       	ldi	r21, 0x00	; 0
    2a8e:	ba 01       	movw	r22, r20
    2a90:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    2a94:	88 23       	and	r24, r24
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <dir_next+0x15a>
    2a98:	88 c0       	rjmp	.+272    	; 0x2baa <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	c2 96       	adiw	r24, 0x32	; 50
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	52 e0       	ldi	r21, 0x02	; 2
    2aaa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2aae:	d8 01       	movw	r26, r16
    2ab0:	cd 91       	ld	r28, X+
    2ab2:	dc 91       	ld	r29, X
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	b5 01       	movw	r22, r10
    2ab8:	a4 01       	movw	r20, r8
    2aba:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8e a7       	lds	r24, 0x7e
    2ac4:	9f a7       	lds	r25, 0x7f
    2ac6:	a8 ab       	sts	0x58, r26
    2ac8:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2aca:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    2acc:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2ace:	1b c0       	rjmp	.+54     	; 0x2b06 <dir_next+0x1c6>
						dj->fs->wflag = 1;
    2ad0:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	ba 01       	movw	r22, r20
    2ade:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <dir_next+0x1a8>
    2ae6:	63 c0       	rjmp	.+198    	; 0x2bae <dir_next+0x26e>
						dj->fs->winsect++;
    2ae8:	d8 01       	movw	r26, r16
    2aea:	ed 91       	ld	r30, X+
    2aec:	fc 91       	ld	r31, X
    2aee:	86 a5       	lds	r24, 0x66
    2af0:	97 a5       	lds	r25, 0x67
    2af2:	a0 a9       	sts	0x40, r26
    2af4:	b1 a9       	sts	0x41, r27
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	a1 1d       	adc	r26, r1
    2afa:	b1 1d       	adc	r27, r1
    2afc:	86 a7       	lds	r24, 0x76
    2afe:	97 a7       	lds	r25, 0x77
    2b00:	a0 ab       	sts	0x50, r26
    2b02:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2b04:	cf 5f       	subi	r28, 0xFF	; 255
    2b06:	d8 01       	movw	r26, r16
    2b08:	ed 91       	ld	r30, X+
    2b0a:	fc 91       	ld	r31, X
    2b0c:	11 97       	sbiw	r26, 0x01	; 1
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	c8 17       	cp	r28, r24
    2b12:	f0 f2       	brcs	.-68     	; 0x2ad0 <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2b14:	86 a5       	lds	r24, 0x66
    2b16:	97 a5       	lds	r25, 0x67
    2b18:	a0 a9       	sts	0x40, r26
    2b1a:	b1 a9       	sts	0x41, r27
    2b1c:	8c 1b       	sub	r24, r28
    2b1e:	91 09       	sbc	r25, r1
    2b20:	a1 09       	sbc	r26, r1
    2b22:	b1 09       	sbc	r27, r1
    2b24:	86 a7       	lds	r24, 0x76
    2b26:	97 a7       	lds	r25, 0x77
    2b28:	a0 ab       	sts	0x50, r26
    2b2a:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	82 86       	std	Z+10, r8	; 0x0a
    2b30:	93 86       	std	Z+11, r9	; 0x0b
    2b32:	a4 86       	std	Z+12, r10	; 0x0c
    2b34:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	b5 01       	movw	r22, r10
    2b3c:	a4 01       	movw	r20, r8
    2b3e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	86 87       	std	Z+14, r24	; 0x0e
    2b4a:	97 87       	std	Z+15, r25	; 0x0f
    2b4c:	a0 8b       	std	Z+16, r26	; 0x10
    2b4e:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    2b50:	d8 01       	movw	r26, r16
    2b52:	15 96       	adiw	r26, 0x05	; 5
    2b54:	fc 92       	st	X, r15
    2b56:	ee 92       	st	-X, r14
    2b58:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2b5a:	8d 91       	ld	r24, X+
    2b5c:	9c 91       	ld	r25, X
    2b5e:	11 97       	sbiw	r26, 0x01	; 1
    2b60:	c2 96       	adiw	r24, 0x32	; 50
    2b62:	cc 0c       	add	r12, r12
    2b64:	dd 1c       	adc	r13, r13
    2b66:	cc 0c       	add	r12, r12
    2b68:	dd 1c       	adc	r13, r13
    2b6a:	cc 0c       	add	r12, r12
    2b6c:	dd 1c       	adc	r13, r13
    2b6e:	cc 0c       	add	r12, r12
    2b70:	dd 1c       	adc	r13, r13
    2b72:	cc 0c       	add	r12, r12
    2b74:	dd 1c       	adc	r13, r13
    2b76:	8c 0d       	add	r24, r12
    2b78:	9d 1d       	adc	r25, r13
    2b7a:	53 96       	adiw	r26, 0x13	; 19
    2b7c:	9c 93       	st	X, r25
    2b7e:	8e 93       	st	-X, r24
    2b80:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	15 c0       	rjmp	.+42     	; 0x2bb0 <dir_next+0x270>


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	13 c0       	rjmp	.+38     	; 0x2bb0 <dir_next+0x270>
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	11 c0       	rjmp	.+34     	; 0x2bb0 <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	0d c0       	rjmp	.+26     	; 0x2bb0 <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	0b c0       	rjmp	.+22     	; 0x2bb0 <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2b9a:	84 e0       	ldi	r24, 0x04	; 4
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2b9e:	87 e0       	ldi	r24, 0x07	; 7
    2ba0:	07 c0       	rjmp	.+14     	; 0x2bb0 <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	01 c0       	rjmp	.+2      	; 0x2bb0 <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2bae:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
    2bc0:	bf 90       	pop	r11
    2bc2:	af 90       	pop	r10
    2bc4:	9f 90       	pop	r9
    2bc6:	8f 90       	pop	r8
    2bc8:	08 95       	ret

00002bca <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    2bca:	2f 92       	push	r2
    2bcc:	3f 92       	push	r3
    2bce:	4f 92       	push	r4
    2bd0:	5f 92       	push	r5
    2bd2:	6f 92       	push	r6
    2bd4:	7f 92       	push	r7
    2bd6:	8f 92       	push	r8
    2bd8:	9f 92       	push	r9
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <follow_path+0x26>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <follow_path+0x28>
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <follow_path+0x2a>
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	8c 01       	movw	r16, r24
    2bfa:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    2bfc:	db 01       	movw	r26, r22
    2bfe:	8c 91       	ld	r24, X
    2c00:	8f 32       	cpi	r24, 0x2F	; 47
    2c02:	11 f0       	breq	.+4      	; 0x2c08 <follow_path+0x3e>
    2c04:	8c 35       	cpi	r24, 0x5C	; 92
    2c06:	49 f4       	brne	.+18     	; 0x2c1a <follow_path+0x50>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    2c08:	08 94       	sec
    2c0a:	a1 1c       	adc	r10, r1
    2c0c:	b1 1c       	adc	r11, r1
    2c0e:	f8 01       	movw	r30, r16
    2c10:	16 82       	std	Z+6, r1	; 0x06
    2c12:	17 82       	std	Z+7, r1	; 0x07
    2c14:	10 86       	std	Z+8, r1	; 0x08
    2c16:	11 86       	std	Z+9, r1	; 0x09
    2c18:	0c c0       	rjmp	.+24     	; 0x2c32 <follow_path+0x68>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    2c1a:	d8 01       	movw	r26, r16
    2c1c:	ed 91       	ld	r30, X+
    2c1e:	fc 91       	ld	r31, X
    2c20:	86 89       	ldd	r24, Z+22	; 0x16
    2c22:	97 89       	ldd	r25, Z+23	; 0x17
    2c24:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c26:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c28:	f8 01       	movw	r30, r16
    2c2a:	86 83       	std	Z+6, r24	; 0x06
    2c2c:	97 83       	std	Z+7, r25	; 0x07
    2c2e:	a0 87       	std	Z+8, r26	; 0x08
    2c30:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    2c32:	d5 01       	movw	r26, r10
    2c34:	8c 91       	ld	r24, X
    2c36:	80 32       	cpi	r24, 0x20	; 32
    2c38:	50 f4       	brcc	.+20     	; 0x2c4e <follow_path+0x84>
		res = dir_sdi(dj, 0);
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
    2c44:	48 2f       	mov	r20, r24
		dj->dir = 0;
    2c46:	f8 01       	movw	r30, r16
    2c48:	13 8a       	std	Z+19, r1	; 0x13
    2c4a:	12 8a       	std	Z+18, r1	; 0x12
    2c4c:	6b c1       	rjmp	.+726    	; 0x2f24 <follow_path+0x35a>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    2c4e:	0f 2e       	mov	r0, r31
    2c50:	fb e0       	ldi	r31, 0x0B	; 11
    2c52:	6f 2e       	mov	r6, r31
    2c54:	77 24       	eor	r7, r7
    2c56:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2c58:	ee 24       	eor	r14, r14
    2c5a:	ff 24       	eor	r15, r15
    2c5c:	44 24       	eor	r4, r4
    2c5e:	55 24       	eor	r5, r5
    2c60:	68 94       	set
    2c62:	43 f8       	bld	r4, 3
    2c64:	88 24       	eor	r8, r8
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    2c66:	49 82       	std	Y+1, r4	; 0x01
    2c68:	5a 82       	std	Y+2, r5	; 0x02
    2c6a:	6b 82       	std	Y+3, r6	; 0x03
    2c6c:	7c 82       	std	Y+4, r7	; 0x04
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2c6e:	0f 2e       	mov	r0, r31
    2c70:	f3 e0       	ldi	r31, 0x03	; 3
    2c72:	2f 2e       	mov	r2, r31
    2c74:	33 24       	eor	r3, r3
    2c76:	f0 2d       	mov	r31, r0
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    2c78:	f5 01       	movw	r30, r10
    2c7a:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2c7c:	81 91       	ld	r24, Z+
    2c7e:	8f 32       	cpi	r24, 0x2F	; 47
    2c80:	e1 f3       	breq	.-8      	; 0x2c7a <follow_path+0xb0>
    2c82:	8c 35       	cpi	r24, 0x5C	; 92
    2c84:	d1 f3       	breq	.-12     	; 0x2c7a <follow_path+0xb0>
    2c86:	3e 83       	std	Y+6, r19	; 0x06
    2c88:	2d 83       	std	Y+5, r18	; 0x05
	sfn = dj->fn;
    2c8a:	d8 01       	movw	r26, r16
    2c8c:	54 96       	adiw	r26, 0x14	; 20
    2c8e:	cd 90       	ld	r12, X+
    2c90:	dc 90       	ld	r13, X
    2c92:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    2c94:	c6 01       	movw	r24, r12
    2c96:	60 e2       	ldi	r22, 0x20	; 32
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	a3 01       	movw	r20, r6
    2c9c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2ca0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ca2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca4:	80 81       	ld	r24, Z
    2ca6:	8e 32       	cpi	r24, 0x2E	; 46
    2ca8:	49 f5       	brne	.+82     	; 0x2cfc <follow_path+0x132>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    2caa:	ee e2       	ldi	r30, 0x2E	; 46
    2cac:	d6 01       	movw	r26, r12
    2cae:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2cb0:	ad 81       	ldd	r26, Y+5	; 0x05
    2cb2:	be 81       	ldd	r27, Y+6	; 0x06
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	2c 91       	ld	r18, X
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    2cba:	2e 32       	cpi	r18, 0x2E	; 46
    2cbc:	49 f4       	brne	.+18     	; 0x2cd0 <follow_path+0x106>
			sfn[i++] = c;
    2cbe:	f6 01       	movw	r30, r12
    2cc0:	81 83       	std	Z+1, r24	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2cc2:	12 96       	adiw	r26, 0x02	; 2
    2cc4:	2c 91       	ld	r18, X
    2cc6:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    2cc8:	2e 32       	cpi	r18, 0x2E	; 46
    2cca:	49 f0       	breq	.+18     	; 0x2cde <follow_path+0x114>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2ccc:	c1 01       	movw	r24, r2
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <follow_path+0x10a>
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2cd4:	2f 32       	cpi	r18, 0x2F	; 47
    2cd6:	41 f0       	breq	.+16     	; 0x2ce8 <follow_path+0x11e>
    2cd8:	2c 35       	cpi	r18, 0x5C	; 92
    2cda:	31 f0       	breq	.+12     	; 0x2ce8 <follow_path+0x11e>
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <follow_path+0x116>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2cde:	c1 01       	movw	r24, r2
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2ce0:	21 32       	cpi	r18, 0x21	; 33
    2ce2:	08 f0       	brcs	.+2      	; 0x2ce6 <follow_path+0x11c>
    2ce4:	0e c1       	rjmp	.+540    	; 0x2f02 <follow_path+0x338>
    2ce6:	38 c1       	rjmp	.+624    	; 0x2f58 <follow_path+0x38e>
		*path = &p[si];									/* Return pointer to the next segment */
    2ce8:	ad 80       	ldd	r10, Y+5	; 0x05
    2cea:	be 80       	ldd	r11, Y+6	; 0x06
    2cec:	a8 0e       	add	r10, r24
    2cee:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2cf0:	80 e2       	ldi	r24, 0x20	; 32
    2cf2:	d6 01       	movw	r26, r12
    2cf4:	1b 96       	adiw	r26, 0x0b	; 11
    2cf6:	8c 93       	st	X, r24
    2cf8:	1b 97       	sbiw	r26, 0x0b	; 11
    2cfa:	3b c1       	rjmp	.+630    	; 0x2f72 <follow_path+0x3a8>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	a7 01       	movw	r20, r14
    2d00:	d2 01       	movw	r26, r4
    2d02:	98 2c       	mov	r9, r8
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2d04:	ed 81       	ldd	r30, Y+5	; 0x05
    2d06:	fe 81       	ldd	r31, Y+6	; 0x06
    2d08:	e4 0f       	add	r30, r20
    2d0a:	f5 1f       	adc	r31, r21
    2d0c:	20 81       	ld	r18, Z
    2d0e:	5a 01       	movw	r10, r20
    2d10:	08 94       	sec
    2d12:	a1 1c       	adc	r10, r1
    2d14:	b1 1c       	adc	r11, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2d16:	21 32       	cpi	r18, 0x21	; 33
    2d18:	08 f4       	brcc	.+2      	; 0x2d1c <follow_path+0x152>
    2d1a:	69 c0       	rjmp	.+210    	; 0x2dee <follow_path+0x224>
    2d1c:	2f 32       	cpi	r18, 0x2F	; 47
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <follow_path+0x158>
    2d20:	21 c1       	rjmp	.+578    	; 0x2f64 <follow_path+0x39a>
    2d22:	2c 35       	cpi	r18, 0x5C	; 92
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <follow_path+0x15e>
    2d26:	1e c1       	rjmp	.+572    	; 0x2f64 <follow_path+0x39a>
		if (c == '.' || i >= ni) {
    2d28:	2e 32       	cpi	r18, 0x2E	; 46
    2d2a:	19 f0       	breq	.+6      	; 0x2d32 <follow_path+0x168>
    2d2c:	6a 17       	cp	r22, r26
    2d2e:	7b 07       	cpc	r23, r27
    2d30:	78 f0       	brcs	.+30     	; 0x2d50 <follow_path+0x186>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2d32:	a8 30       	cpi	r26, 0x08	; 8
    2d34:	b1 05       	cpc	r27, r1
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <follow_path+0x170>
    2d38:	e6 c0       	rjmp	.+460    	; 0x2f06 <follow_path+0x33c>
    2d3a:	2e 32       	cpi	r18, 0x2E	; 46
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <follow_path+0x176>
    2d3e:	e5 c0       	rjmp	.+458    	; 0x2f0a <follow_path+0x340>
			i = 8; ni = 11;
			b <<= 2; continue;
    2d40:	99 0c       	add	r9, r9
    2d42:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2d44:	a5 01       	movw	r20, r10
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    2d46:	69 81       	ldd	r22, Y+1	; 0x01
    2d48:	7a 81       	ldd	r23, Y+2	; 0x02
    2d4a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d4c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d4e:	da cf       	rjmp	.-76     	; 0x2d04 <follow_path+0x13a>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    2d50:	22 23       	and	r18, r18
    2d52:	14 f4       	brge	.+4      	; 0x2d58 <follow_path+0x18e>
			b |= 3;						/* Eliminate NT flag */
    2d54:	f3 e0       	ldi	r31, 0x03	; 3
    2d56:	9f 2a       	or	r9, r31
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    2d58:	82 2f       	mov	r24, r18
    2d5a:	81 58       	subi	r24, 0x81	; 129
    2d5c:	8f 31       	cpi	r24, 0x1F	; 31
    2d5e:	18 f0       	brcs	.+6      	; 0x2d66 <follow_path+0x19c>
    2d60:	8f 55       	subi	r24, 0x5F	; 95
    2d62:	8d 31       	cpi	r24, 0x1D	; 29
    2d64:	e8 f4       	brcc	.+58     	; 0x2da0 <follow_path+0x1d6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2d66:	ed 81       	ldd	r30, Y+5	; 0x05
    2d68:	fe 81       	ldd	r31, Y+6	; 0x06
    2d6a:	ea 0d       	add	r30, r10
    2d6c:	fb 1d       	adc	r31, r11
    2d6e:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2d70:	83 2f       	mov	r24, r19
    2d72:	80 54       	subi	r24, 0x40	; 64
    2d74:	8f 33       	cpi	r24, 0x3F	; 63
    2d76:	20 f0       	brcs	.+8      	; 0x2d80 <follow_path+0x1b6>
    2d78:	80 54       	subi	r24, 0x40	; 64
    2d7a:	8d 37       	cpi	r24, 0x7D	; 125
    2d7c:	08 f0       	brcs	.+2      	; 0x2d80 <follow_path+0x1b6>
    2d7e:	c7 c0       	rjmp	.+398    	; 0x2f0e <follow_path+0x344>
    2d80:	cd 01       	movw	r24, r26
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	68 17       	cp	r22, r24
    2d86:	79 07       	cpc	r23, r25
    2d88:	08 f0       	brcs	.+2      	; 0x2d8c <follow_path+0x1c2>
    2d8a:	c3 c0       	rjmp	.+390    	; 0x2f12 <follow_path+0x348>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2d8c:	4e 5f       	subi	r20, 0xFE	; 254
    2d8e:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2d90:	f6 01       	movw	r30, r12
    2d92:	e6 0f       	add	r30, r22
    2d94:	f7 1f       	adc	r31, r23
    2d96:	20 83       	st	Z, r18
			sfn[i++] = d;
    2d98:	31 83       	std	Z+1, r19	; 0x01
    2d9a:	6e 5f       	subi	r22, 0xFE	; 254
    2d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9e:	b2 cf       	rjmp	.-156    	; 0x2d04 <follow_path+0x13a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    2da0:	42 2f       	mov	r20, r18
    2da2:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2da4:	42 32       	cpi	r20, 0x22	; 34
    2da6:	51 05       	cpc	r21, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <follow_path+0x1e2>
    2daa:	b5 c0       	rjmp	.+362    	; 0x2f16 <follow_path+0x34c>
    2dac:	e2 e0       	ldi	r30, 0x02	; 2
    2dae:	f1 e0       	ldi	r31, 0x01	; 1
    2db0:	81 91       	ld	r24, Z+
    2db2:	88 23       	and	r24, r24
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <follow_path+0x1f8>
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	48 17       	cp	r20, r24
    2dba:	59 07       	cpc	r21, r25
    2dbc:	c9 f7       	brne	.-14     	; 0x2db0 <follow_path+0x1e6>
    2dbe:	46 e0       	ldi	r20, 0x06	; 6
    2dc0:	b1 c0       	rjmp	.+354    	; 0x2f24 <follow_path+0x35a>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2dc2:	82 2f       	mov	r24, r18
    2dc4:	81 54       	subi	r24, 0x41	; 65
    2dc6:	8a 31       	cpi	r24, 0x1A	; 26
    2dc8:	18 f4       	brcc	.+6      	; 0x2dd0 <follow_path+0x206>
				b |= 2;
    2dca:	f2 e0       	ldi	r31, 0x02	; 2
    2dcc:	9f 2a       	or	r9, r31
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <follow_path+0x214>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2dd0:	82 2f       	mov	r24, r18
    2dd2:	81 56       	subi	r24, 0x61	; 97
    2dd4:	8a 31       	cpi	r24, 0x1A	; 26
    2dd6:	18 f4       	brcc	.+6      	; 0x2dde <follow_path+0x214>
					b |= 1; c -= 0x20;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	98 2a       	or	r9, r24
    2ddc:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2dde:	f6 01       	movw	r30, r12
    2de0:	e6 0f       	add	r30, r22
    2de2:	f7 1f       	adc	r31, r23
    2de4:	20 83       	st	Z, r18
    2de6:	6f 5f       	subi	r22, 0xFF	; 255
    2de8:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2dea:	a5 01       	movw	r20, r10
    2dec:	8b cf       	rjmp	.-234    	; 0x2d04 <follow_path+0x13a>
    2dee:	ed 81       	ldd	r30, Y+5	; 0x05
    2df0:	fe 81       	ldd	r31, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2df2:	ae 0e       	add	r10, r30
    2df4:	bf 1e       	adc	r11, r31
    2df6:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2df8:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2dfa:	61 15       	cp	r22, r1
    2dfc:	71 05       	cpc	r23, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <follow_path+0x238>
    2e00:	8c c0       	rjmp	.+280    	; 0x2f1a <follow_path+0x350>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2e02:	f6 01       	movw	r30, r12
    2e04:	90 81       	ld	r25, Z
    2e06:	95 3e       	cpi	r25, 0xE5	; 229
    2e08:	11 f4       	brne	.+4      	; 0x2e0e <follow_path+0x244>
    2e0a:	95 e0       	ldi	r25, 0x05	; 5
    2e0c:	90 83       	st	Z, r25

	if (ni == 8) b <<= 2;
    2e0e:	a8 30       	cpi	r26, 0x08	; 8
    2e10:	b1 05       	cpc	r27, r1
    2e12:	19 f4       	brne	.+6      	; 0x2e1a <follow_path+0x250>
    2e14:	98 2e       	mov	r9, r24
    2e16:	99 0c       	add	r9, r9
    2e18:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    2e1a:	89 2d       	mov	r24, r9
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9c 01       	movw	r18, r24
    2e20:	23 70       	andi	r18, 0x03	; 3
    2e22:	30 70       	andi	r19, 0x00	; 0
    2e24:	21 30       	cpi	r18, 0x01	; 1
    2e26:	31 05       	cpc	r19, r1
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <follow_path+0x262>
    2e2a:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    2e2c:	8c 70       	andi	r24, 0x0C	; 12
    2e2e:	90 70       	andi	r25, 0x00	; 0
    2e30:	84 30       	cpi	r24, 0x04	; 4
    2e32:	91 05       	cpc	r25, r1
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <follow_path+0x26e>
    2e36:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2e38:	d6 01       	movw	r26, r12
    2e3a:	1b 96       	adiw	r26, 0x0b	; 11
    2e3c:	4c 93       	st	X, r20
    2e3e:	1b 97       	sbiw	r26, 0x0b	; 11
    2e40:	98 c0       	rjmp	.+304    	; 0x2f72 <follow_path+0x3a8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2e42:	f8 01       	movw	r30, r16
    2e44:	46 85       	ldd	r20, Z+14	; 0x0e
    2e46:	57 85       	ldd	r21, Z+15	; 0x0f
    2e48:	60 89       	ldd	r22, Z+16	; 0x10
    2e4a:	71 89       	ldd	r23, Z+17	; 0x11
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
		if (res != FR_OK) break;
    2e54:	88 23       	and	r24, r24
    2e56:	41 f5       	brne	.+80     	; 0x2ea8 <follow_path+0x2de>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2e58:	d8 01       	movw	r26, r16
    2e5a:	52 96       	adiw	r26, 0x12	; 18
    2e5c:	4d 91       	ld	r20, X+
    2e5e:	5c 91       	ld	r21, X
    2e60:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2e62:	fa 01       	movw	r30, r20
    2e64:	90 81       	ld	r25, Z
    2e66:	99 23       	and	r25, r25
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <follow_path+0x2a2>
    2e6a:	92 c0       	rjmp	.+292    	; 0x2f90 <follow_path+0x3c6>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2e6c:	93 85       	ldd	r25, Z+11	; 0x0b
    2e6e:	93 fd       	sbrc	r25, 3
    2e70:	13 c0       	rjmp	.+38     	; 0x2e98 <follow_path+0x2ce>
    2e72:	54 96       	adiw	r26, 0x14	; 20
    2e74:	6d 91       	ld	r22, X+
    2e76:	7c 91       	ld	r23, X
    2e78:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    2e7a:	9a 01       	movw	r18, r20
    2e7c:	25 5f       	subi	r18, 0xF5	; 245
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    2e80:	db 01       	movw	r26, r22
    2e82:	6a 01       	movw	r12, r20
    2e84:	48 2f       	mov	r20, r24
    2e86:	04 c0       	rjmp	.+8      	; 0x2e90 <follow_path+0x2c6>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2e88:	e2 17       	cp	r30, r18
    2e8a:	f3 07       	cpc	r31, r19
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <follow_path+0x2c6>
    2e8e:	7a c0       	rjmp	.+244    	; 0x2f84 <follow_path+0x3ba>
    2e90:	91 91       	ld	r25, Z+
    2e92:	8d 91       	ld	r24, X+
    2e94:	98 17       	cp	r25, r24
    2e96:	c1 f3       	breq	.-16     	; 0x2e88 <follow_path+0x2be>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    2e98:	c8 01       	movw	r24, r16
    2e9a:	b7 01       	movw	r22, r14
    2e9c:	0e 94 a0 14 	call	0x2940	; 0x2940 <dir_next>
	} while (res == FR_OK);
    2ea0:	88 23       	and	r24, r24
    2ea2:	79 f2       	breq	.-98     	; 0x2e42 <follow_path+0x278>
    2ea4:	48 2f       	mov	r20, r24
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <follow_path+0x2e0>
    2ea8:	48 2f       	mov	r20, r24
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2eaa:	d8 01       	movw	r26, r16
    2eac:	54 96       	adiw	r26, 0x14	; 20
    2eae:	ed 91       	ld	r30, X+
    2eb0:	fc 91       	ld	r31, X
    2eb2:	55 97       	sbiw	r26, 0x15	; 21
    2eb4:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    2eb6:	44 30       	cpi	r20, 0x04	; 4
    2eb8:	a9 f5       	brne	.+106    	; 0x2f24 <follow_path+0x35a>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    2eba:	85 ff       	sbrs	r24, 5
    2ebc:	0b c0       	rjmp	.+22     	; 0x2ed4 <follow_path+0x30a>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	16 82       	std	Z+6, r1	; 0x06
    2ec2:	17 82       	std	Z+7, r1	; 0x07
    2ec4:	10 86       	std	Z+8, r1	; 0x08
    2ec6:	11 86       	std	Z+9, r1	; 0x09
    2ec8:	13 8a       	std	Z+19, r1	; 0x13
    2eca:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    2ecc:	82 ff       	sbrs	r24, 2
    2ece:	d4 ce       	rjmp	.-600    	; 0x2c78 <follow_path+0xae>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	28 c0       	rjmp	.+80     	; 0x2f24 <follow_path+0x35a>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2ed4:	82 ff       	sbrs	r24, 2
    2ed6:	23 c0       	rjmp	.+70     	; 0x2f1e <follow_path+0x354>
		dj->dir = 0;
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    2ed8:	44 e0       	ldi	r20, 0x04	; 4
    2eda:	24 c0       	rjmp	.+72     	; 0x2f24 <follow_path+0x35a>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2edc:	1b 96       	adiw	r26, 0x0b	; 11
    2ede:	8c 91       	ld	r24, X
    2ee0:	1b 97       	sbiw	r26, 0x0b	; 11
    2ee2:	84 ff       	sbrs	r24, 4
    2ee4:	1e c0       	rjmp	.+60     	; 0x2f22 <follow_path+0x358>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	bd 01       	movw	r22, r26
    2eee:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	86 83       	std	Z+6, r24	; 0x06
    2efa:	97 83       	std	Z+7, r25	; 0x07
    2efc:	a0 87       	std	Z+8, r26	; 0x08
    2efe:	b1 87       	std	Z+9, r27	; 0x09
    2f00:	bb ce       	rjmp	.-650    	; 0x2c78 <follow_path+0xae>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2f02:	46 e0       	ldi	r20, 0x06	; 6
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <follow_path+0x35a>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2f06:	46 e0       	ldi	r20, 0x06	; 6
    2f08:	0d c0       	rjmp	.+26     	; 0x2f24 <follow_path+0x35a>
    2f0a:	46 e0       	ldi	r20, 0x06	; 6
    2f0c:	0b c0       	rjmp	.+22     	; 0x2f24 <follow_path+0x35a>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2f0e:	46 e0       	ldi	r20, 0x06	; 6
    2f10:	09 c0       	rjmp	.+18     	; 0x2f24 <follow_path+0x35a>
    2f12:	46 e0       	ldi	r20, 0x06	; 6
    2f14:	07 c0       	rjmp	.+14     	; 0x2f24 <follow_path+0x35a>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2f16:	46 e0       	ldi	r20, 0x06	; 6
    2f18:	05 c0       	rjmp	.+10     	; 0x2f24 <follow_path+0x35a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2f1a:	46 e0       	ldi	r20, 0x06	; 6
    2f1c:	03 c0       	rjmp	.+6      	; 0x2f24 <follow_path+0x35a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2f1e:	45 e0       	ldi	r20, 0x05	; 5
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <follow_path+0x35a>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    2f22:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
    2f24:	84 2f       	mov	r24, r20
    2f26:	26 96       	adiw	r28, 0x06	; 6
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	df 90       	pop	r13
    2f40:	cf 90       	pop	r12
    2f42:	bf 90       	pop	r11
    2f44:	af 90       	pop	r10
    2f46:	9f 90       	pop	r9
    2f48:	8f 90       	pop	r8
    2f4a:	7f 90       	pop	r7
    2f4c:	6f 90       	pop	r6
    2f4e:	5f 90       	pop	r5
    2f50:	4f 90       	pop	r4
    2f52:	3f 90       	pop	r3
    2f54:	2f 90       	pop	r2
    2f56:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    2f58:	ad 80       	ldd	r10, Y+5	; 0x05
    2f5a:	be 80       	ldd	r11, Y+6	; 0x06
    2f5c:	a8 0e       	add	r10, r24
    2f5e:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2f60:	84 e2       	ldi	r24, 0x24	; 36
    2f62:	c7 ce       	rjmp	.-626    	; 0x2cf2 <follow_path+0x128>
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2f68:	a8 0e       	add	r10, r24
    2f6a:	b9 1e       	adc	r11, r25
    2f6c:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2f6e:	48 2d       	mov	r20, r8
    2f70:	44 cf       	rjmp	.-376    	; 0x2dfa <follow_path+0x230>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2f72:	c8 01       	movw	r24, r16
    2f74:	b7 01       	movw	r22, r14
    2f76:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
    2f7a:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <follow_path+0x3b8>
    2f80:	60 cf       	rjmp	.-320    	; 0x2e42 <follow_path+0x278>
    2f82:	93 cf       	rjmp	.-218    	; 0x2eaa <follow_path+0x2e0>
    2f84:	d6 01       	movw	r26, r12
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    2f86:	fb 01       	movw	r30, r22
    2f88:	83 85       	ldd	r24, Z+11	; 0x0b
    2f8a:	82 ff       	sbrs	r24, 2
    2f8c:	a7 cf       	rjmp	.-178    	; 0x2edc <follow_path+0x312>
    2f8e:	ca cf       	rjmp	.-108    	; 0x2f24 <follow_path+0x35a>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2f90:	d8 01       	movw	r26, r16
    2f92:	54 96       	adiw	r26, 0x14	; 20
    2f94:	ed 91       	ld	r30, X+
    2f96:	fc 91       	ld	r31, X
    2f98:	55 97       	sbiw	r26, 0x15	; 21
    2f9a:	83 85       	ldd	r24, Z+11	; 0x0b
    2f9c:	8e cf       	rjmp	.-228    	; 0x2eba <follow_path+0x2f0>

00002f9e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
    2fb2:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    2fb4:	88 23       	and	r24, r24
    2fb6:	d9 f5       	brne	.+118    	; 0x302e <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2fb8:	d8 01       	movw	r26, r16
    2fba:	1e 96       	adiw	r26, 0x0e	; 14
    2fbc:	4d 91       	ld	r20, X+
    2fbe:	5d 91       	ld	r21, X+
    2fc0:	6d 91       	ld	r22, X+
    2fc2:	7c 91       	ld	r23, X
    2fc4:	51 97       	sbiw	r26, 0x11	; 17
    2fc6:	8d 91       	ld	r24, X+
    2fc8:	9c 91       	ld	r25, X
    2fca:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    2fce:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    2fd0:	88 23       	and	r24, r24
    2fd2:	69 f5       	brne	.+90     	; 0x302e <dir_register+0x90>
			c = *dj->dir;
    2fd4:	d8 01       	movw	r26, r16
    2fd6:	52 96       	adiw	r26, 0x12	; 18
    2fd8:	ed 91       	ld	r30, X+
    2fda:	fc 91       	ld	r31, X
    2fdc:	53 97       	sbiw	r26, 0x13	; 19
    2fde:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    2fe0:	85 3e       	cpi	r24, 0xE5	; 229
    2fe2:	61 f1       	breq	.+88     	; 0x303c <dir_register+0x9e>
    2fe4:	88 23       	and	r24, r24
    2fe6:	51 f1       	breq	.+84     	; 0x303c <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2fe8:	c8 01       	movw	r24, r16
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	0e 94 a0 14 	call	0x2940	; 0x2940 <dir_next>
    2ff2:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    2ff4:	88 23       	and	r24, r24
    2ff6:	01 f3       	breq	.-64     	; 0x2fb8 <dir_register+0x1a>
    2ff8:	1a c0       	rjmp	.+52     	; 0x302e <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	e2 88       	ldd	r14, Z+18	; 0x12
    2ffe:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    3000:	c7 01       	movw	r24, r14
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    300e:	d8 01       	movw	r26, r16
    3010:	54 96       	adiw	r26, 0x14	; 20
    3012:	6d 91       	ld	r22, X+
    3014:	7c 91       	ld	r23, X
    3016:	55 97       	sbiw	r26, 0x15	; 21
    3018:	c7 01       	movw	r24, r14
    301a:	4b e0       	ldi	r20, 0x0B	; 11
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    3022:	d8 01       	movw	r26, r16
    3024:	ed 91       	ld	r30, X+
    3026:	fc 91       	ld	r31, X
    3028:	11 97       	sbiw	r26, 0x01	; 1
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    302e:	8c 2f       	mov	r24, r28
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    303c:	f8 01       	movw	r30, r16
    303e:	46 85       	ldd	r20, Z+14	; 0x0e
    3040:	57 85       	ldd	r21, Z+15	; 0x0f
    3042:	60 89       	ldd	r22, Z+16	; 0x10
    3044:	71 89       	ldd	r23, Z+17	; 0x11
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    304e:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    3050:	88 23       	and	r24, r24
    3052:	69 f7       	brne	.-38     	; 0x302e <dir_register+0x90>
    3054:	d2 cf       	rjmp	.-92     	; 0x2ffa <dir_register+0x5c>

00003056 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    305c:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    305e:	17 c0       	rjmp	.+46     	; 0x308e <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    3060:	88 81       	ld	r24, Y
    3062:	99 81       	ldd	r25, Y+1	; 0x01
    3064:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
		if (res != FR_OK) break;
    3068:	88 23       	and	r24, r24
    306a:	e1 f4       	brne	.+56     	; 0x30a4 <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    306c:	ea 89       	ldd	r30, Y+18	; 0x12
    306e:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    3070:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3072:	99 23       	and	r25, r25
    3074:	f1 f0       	breq	.+60     	; 0x30b2 <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    3076:	95 3e       	cpi	r25, 0xE5	; 229
    3078:	19 f0       	breq	.+6      	; 0x3080 <dir_read+0x2a>
    307a:	93 85       	ldd	r25, Z+11	; 0x0b
    307c:	93 ff       	sbrs	r25, 3
    307e:	16 c0       	rjmp	.+44     	; 0x30ac <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    3080:	ce 01       	movw	r24, r28
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	0e 94 a0 14 	call	0x2940	; 0x2940 <dir_next>
		if (res != FR_OK) break;
    308a:	88 23       	and	r24, r24
    308c:	59 f4       	brne	.+22     	; 0x30a4 <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    308e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3090:	5f 85       	ldd	r21, Y+15	; 0x0f
    3092:	68 89       	ldd	r22, Y+16	; 0x10
    3094:	79 89       	ldd	r23, Y+17	; 0x11
    3096:	41 15       	cp	r20, r1
    3098:	51 05       	cpc	r21, r1
    309a:	61 05       	cpc	r22, r1
    309c:	71 05       	cpc	r23, r1
    309e:	01 f7       	brne	.-64     	; 0x3060 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    30a0:	88 23       	and	r24, r24
    30a2:	21 f0       	breq	.+8      	; 0x30ac <dir_read+0x56>
    30a4:	1e 86       	std	Y+14, r1	; 0x0e
    30a6:	1f 86       	std	Y+15, r1	; 0x0f
    30a8:	18 8a       	std	Y+16, r1	; 0x10
    30aa:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    30b2:	84 e0       	ldi	r24, 0x04	; 4
    30b4:	f7 cf       	rjmp	.-18     	; 0x30a4 <dir_read+0x4e>

000030b6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    30b6:	7f 92       	push	r7
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	ec 01       	movw	r28, r24
    30d2:	4a 01       	movw	r8, r20
    30d4:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    30d6:	42 30       	cpi	r20, 0x02	; 2
    30d8:	51 05       	cpc	r21, r1
    30da:	61 05       	cpc	r22, r1
    30dc:	71 05       	cpc	r23, r1
    30de:	08 f4       	brcc	.+2      	; 0x30e2 <remove_chain+0x2c>
    30e0:	55 c0       	rjmp	.+170    	; 0x318c <remove_chain+0xd6>
    30e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30e6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    30e8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    30ea:	48 17       	cp	r20, r24
    30ec:	59 07       	cpc	r21, r25
    30ee:	6a 07       	cpc	r22, r26
    30f0:	7b 07       	cpc	r23, r27
    30f2:	08 f0       	brcs	.+2      	; 0x30f6 <remove_chain+0x40>
    30f4:	4d c0       	rjmp	.+154    	; 0x3190 <remove_chain+0xda>
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    30f8:	46 01       	movw	r8, r12
    30fa:	57 01       	movw	r10, r14
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    30fe:	77 24       	eor	r7, r7
    3100:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3102:	ce 01       	movw	r24, r28
    3104:	b5 01       	movw	r22, r10
    3106:	a4 01       	movw	r20, r8
    3108:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    310c:	6b 01       	movw	r12, r22
    310e:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    3110:	61 15       	cp	r22, r1
    3112:	71 05       	cpc	r23, r1
    3114:	81 05       	cpc	r24, r1
    3116:	91 05       	cpc	r25, r1
    3118:	e9 f1       	breq	.+122    	; 0x3194 <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	c9 16       	cp	r12, r25
    311e:	d1 04       	cpc	r13, r1
    3120:	e1 04       	cpc	r14, r1
    3122:	f1 04       	cpc	r15, r1
    3124:	c9 f1       	breq	.+114    	; 0x3198 <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3126:	8f ef       	ldi	r24, 0xFF	; 255
    3128:	c8 16       	cp	r12, r24
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	d8 06       	cpc	r13, r24
    312e:	8f ef       	ldi	r24, 0xFF	; 255
    3130:	e8 06       	cpc	r14, r24
    3132:	8f ef       	ldi	r24, 0xFF	; 255
    3134:	f8 06       	cpc	r15, r24
    3136:	91 f1       	breq	.+100    	; 0x319c <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    3138:	ce 01       	movw	r24, r28
    313a:	b5 01       	movw	r22, r10
    313c:	a4 01       	movw	r20, r8
    313e:	00 e0       	ldi	r16, 0x00	; 0
    3140:	10 e0       	ldi	r17, 0x00	; 0
    3142:	98 01       	movw	r18, r16
    3144:	0e 94 8d 12 	call	0x251a	; 0x251a <put_fat>
			if (res != FR_OK) break;
    3148:	88 23       	and	r24, r24
    314a:	49 f5       	brne	.+82     	; 0x319e <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    314c:	4e 85       	ldd	r20, Y+14	; 0x0e
    314e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3150:	68 89       	ldd	r22, Y+16	; 0x10
    3152:	79 89       	ldd	r23, Y+17	; 0x11
    3154:	4f 3f       	cpi	r20, 0xFF	; 255
    3156:	9f ef       	ldi	r25, 0xFF	; 255
    3158:	59 07       	cpc	r21, r25
    315a:	9f ef       	ldi	r25, 0xFF	; 255
    315c:	69 07       	cpc	r22, r25
    315e:	9f ef       	ldi	r25, 0xFF	; 255
    3160:	79 07       	cpc	r23, r25
    3162:	49 f0       	breq	.+18     	; 0x3176 <remove_chain+0xc0>
				fs->free_clust++;
    3164:	4f 5f       	subi	r20, 0xFF	; 255
    3166:	5f 4f       	sbci	r21, 0xFF	; 255
    3168:	6f 4f       	sbci	r22, 0xFF	; 255
    316a:	7f 4f       	sbci	r23, 0xFF	; 255
    316c:	4e 87       	std	Y+14, r20	; 0x0e
    316e:	5f 87       	std	Y+15, r21	; 0x0f
    3170:	68 8b       	std	Y+16, r22	; 0x10
    3172:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    3174:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    3176:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3178:	5b 8d       	ldd	r21, Y+27	; 0x1b
    317a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    317c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    317e:	c4 16       	cp	r12, r20
    3180:	d5 06       	cpc	r13, r21
    3182:	e6 06       	cpc	r14, r22
    3184:	f7 06       	cpc	r15, r23
    3186:	08 f4       	brcc	.+2      	; 0x318a <remove_chain+0xd4>
    3188:	b7 cf       	rjmp	.-146    	; 0x30f8 <remove_chain+0x42>
    318a:	09 c0       	rjmp	.+18     	; 0x319e <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    318c:	82 e0       	ldi	r24, 0x02	; 2
    318e:	07 c0       	rjmp	.+14     	; 0x319e <remove_chain+0xe8>
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	05 c0       	rjmp	.+10     	; 0x319e <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	03 c0       	rjmp	.+6      	; 0x319e <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	01 c0       	rjmp	.+2      	; 0x319e <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    319c:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	bf 90       	pop	r11
    31b0:	af 90       	pop	r10
    31b2:	9f 90       	pop	r9
    31b4:	8f 90       	pop	r8
    31b6:	7f 90       	pop	r7
    31b8:	08 95       	ret

000031ba <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    31ba:	88 23       	and	r24, r24
    31bc:	91 f4       	brne	.+36     	; 0x31e2 <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    31be:	e0 91 f3 01 	lds	r30, 0x01F3
    31c2:	f0 91 f4 01 	lds	r31, 0x01F4

	if (rfs) {
    31c6:	30 97       	sbiw	r30, 0x00	; 0
    31c8:	09 f0       	breq	.+2      	; 0x31cc <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    31ca:	10 82       	st	Z, r1
	}

	if (fs) {
    31cc:	61 15       	cp	r22, r1
    31ce:	71 05       	cpc	r23, r1
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    31d2:	fb 01       	movw	r30, r22
    31d4:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    31d6:	70 93 f4 01 	sts	0x01F4, r23
    31da:	60 93 f3 01 	sts	0x01F3, r22

	return FR_OK;
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    31e2:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    31e4:	08 95       	ret

000031e6 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    31e6:	4f 92       	push	r4
    31e8:	5f 92       	push	r5
    31ea:	6f 92       	push	r6
    31ec:	7f 92       	push	r7
    31ee:	8f 92       	push	r8
    31f0:	9f 92       	push	r9
    31f2:	af 92       	push	r10
    31f4:	bf 92       	push	r11
    31f6:	cf 92       	push	r12
    31f8:	df 92       	push	r13
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	a4 97       	sbiw	r28, 0x24	; 36
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	7c 01       	movw	r14, r24
    3218:	7c a3       	lds	r23, 0x5c
    321a:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	09 f4       	brne	.+2      	; 0x3222 <f_open+0x3c>
    3220:	ea c0       	rjmp	.+468    	; 0x33f6 <f_open+0x210>
	fp->fs = 0;			/* Clear file object */
    3222:	fc 01       	movw	r30, r24
    3224:	11 82       	std	Z+1, r1	; 0x01
    3226:	10 82       	st	Z, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    3228:	04 2f       	mov	r16, r20
    322a:	0f 71       	andi	r16, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    322c:	4e 71       	andi	r20, 0x1E	; 30
    322e:	ce 01       	movw	r24, r28
    3230:	83 96       	adiw	r24, 0x23	; 35
    3232:	be 01       	movw	r22, r28
    3234:	6f 5f       	subi	r22, 0xFF	; 255
    3236:	7f 4f       	sbci	r23, 0xFF	; 255
    3238:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
    323c:	18 2f       	mov	r17, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
    323e:	88 23       	and	r24, r24
    3240:	09 f0       	breq	.+2      	; 0x3244 <f_open+0x5e>
    3242:	da c0       	rjmp	.+436    	; 0x33f8 <f_open+0x212>
		INIT_BUF(dj);
    3244:	ce 01       	movw	r24, r28
    3246:	47 96       	adiw	r24, 0x17	; 23
    3248:	9e 8b       	std	Y+22, r25	; 0x16
    324a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    324c:	6b a1       	lds	r22, 0x4b
    324e:	7c a1       	lds	r23, 0x4c
    3250:	ce 01       	movw	r24, r28
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		dir = dj.dir;
    3258:	cb 88       	ldd	r12, Y+19	; 0x13
    325a:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    325c:	88 23       	and	r24, r24
    325e:	21 f4       	brne	.+8      	; 0x3268 <f_open+0x82>
			if (!dir)	/* Current dir itself */
    3260:	c1 14       	cp	r12, r1
    3262:	d1 04       	cpc	r13, r1
    3264:	09 f4       	brne	.+2      	; 0x3268 <f_open+0x82>
				res = FR_INVALID_NAME;
    3266:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3268:	40 2f       	mov	r20, r16
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	9a 01       	movw	r18, r20
    326e:	2c 71       	andi	r18, 0x1C	; 28
    3270:	30 70       	andi	r19, 0x00	; 0
    3272:	21 15       	cp	r18, r1
    3274:	31 05       	cpc	r19, r1
    3276:	09 f4       	brne	.+2      	; 0x327a <f_open+0x94>
    3278:	5b c0       	rjmp	.+182    	; 0x3330 <f_open+0x14a>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    327a:	88 23       	and	r24, r24
    327c:	71 f0       	breq	.+28     	; 0x329a <f_open+0xb4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    327e:	84 30       	cpi	r24, 0x04	; 4
    3280:	09 f0       	breq	.+2      	; 0x3284 <f_open+0x9e>
    3282:	b7 c0       	rjmp	.+366    	; 0x33f2 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    3284:	ce 01       	movw	r24, r28
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    328c:	cb 88       	ldd	r12, Y+19	; 0x13
    328e:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3290:	88 23       	and	r24, r24
    3292:	09 f0       	breq	.+2      	; 0x3296 <f_open+0xb0>
    3294:	ae c0       	rjmp	.+348    	; 0x33f2 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3296:	08 60       	ori	r16, 0x08	; 8
    3298:	07 c0       	rjmp	.+14     	; 0x32a8 <f_open+0xc2>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    329a:	f6 01       	movw	r30, r12
    329c:	83 85       	ldd	r24, Z+11	; 0x0b
    329e:	81 71       	andi	r24, 0x11	; 17
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <f_open+0xbe>
    32a2:	c2 c0       	rjmp	.+388    	; 0x3428 <f_open+0x242>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    32a4:	02 fd       	sbrc	r16, 2
    32a6:	c2 c0       	rjmp	.+388    	; 0x342c <f_open+0x246>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    32a8:	03 ff       	sbrs	r16, 3
    32aa:	c6 c0       	rjmp	.+396    	; 0x3438 <f_open+0x252>
				dw = get_fattime();					/* Created time */
    32ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    32b0:	f6 01       	movw	r30, r12
    32b2:	66 87       	std	Z+14, r22	; 0x0e
    32b4:	77 87       	std	Z+15, r23	; 0x0f
    32b6:	80 8b       	std	Z+16, r24	; 0x10
    32b8:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    32ba:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    32bc:	14 8e       	std	Z+28, r1	; 0x1c
    32be:	15 8e       	std	Z+29, r1	; 0x1d
    32c0:	16 8e       	std	Z+30, r1	; 0x1e
    32c2:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	b6 01       	movw	r22, r12
    32ca:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    32ce:	4b 01       	movw	r8, r22
    32d0:	5c 01       	movw	r10, r24
				st_clust(dir, 0);					/* cluster = 0 */
    32d2:	c6 01       	movw	r24, r12
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	ba 01       	movw	r22, r20
    32da:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
				dj.fs->wflag = 1;
    32de:	e9 81       	ldd	r30, Y+1	; 0x01
    32e0:	fa 81       	ldd	r31, Y+2	; 0x02
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    32e6:	81 14       	cp	r8, r1
    32e8:	91 04       	cpc	r9, r1
    32ea:	a1 04       	cpc	r10, r1
    32ec:	b1 04       	cpc	r11, r1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <f_open+0x10c>
    32f0:	a3 c0       	rjmp	.+326    	; 0x3438 <f_open+0x252>
					dw = dj.fs->winsect;
    32f2:	46 a4       	lds	r20, 0xa6
    32f4:	57 a4       	lds	r21, 0xa7
    32f6:	60 a8       	sts	0x00, r22
    32f8:	71 a8       	sts	0x81, r23
					res = remove_chain(dj.fs, cl);
    32fa:	cf 01       	movw	r24, r30
    32fc:	b5 01       	movw	r22, r10
    32fe:	a4 01       	movw	r20, r8
    3300:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <remove_chain>
					if (res == FR_OK) {
    3304:	88 23       	and	r24, r24
    3306:	09 f0       	breq	.+2      	; 0x330a <f_open+0x124>
    3308:	74 c0       	rjmp	.+232    	; 0x33f2 <f_open+0x20c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    330a:	e9 81       	ldd	r30, Y+1	; 0x01
    330c:	fa 81       	ldd	r31, Y+2	; 0x02
    330e:	d5 01       	movw	r26, r10
    3310:	c4 01       	movw	r24, r8
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	a1 09       	sbc	r26, r1
    3316:	b1 09       	sbc	r27, r1
    3318:	82 87       	std	Z+10, r24	; 0x0a
    331a:	93 87       	std	Z+11, r25	; 0x0b
    331c:	a4 87       	std	Z+12, r26	; 0x0c
    331e:	b5 87       	std	Z+13, r27	; 0x0d
						res = move_window(dj.fs, dw);
    3320:	cf 01       	movw	r24, r30
    3322:	b3 01       	movw	r22, r6
    3324:	a2 01       	movw	r20, r4
    3326:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    332a:	88 23       	and	r24, r24
    332c:	69 f0       	breq	.+26     	; 0x3348 <f_open+0x162>
    332e:	61 c0       	rjmp	.+194    	; 0x33f2 <f_open+0x20c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    3330:	88 23       	and	r24, r24
    3332:	09 f0       	breq	.+2      	; 0x3336 <f_open+0x150>
    3334:	5e c0       	rjmp	.+188    	; 0x33f2 <f_open+0x20c>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    3336:	f6 01       	movw	r30, r12
    3338:	83 85       	ldd	r24, Z+11	; 0x0b
    333a:	84 fd       	sbrc	r24, 4
    333c:	79 c0       	rjmp	.+242    	; 0x3430 <f_open+0x24a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    333e:	01 ff       	sbrs	r16, 1
    3340:	7b c0       	rjmp	.+246    	; 0x3438 <f_open+0x252>
    3342:	80 fd       	sbrc	r24, 0
    3344:	77 c0       	rjmp	.+238    	; 0x3434 <f_open+0x24e>
    3346:	78 c0       	rjmp	.+240    	; 0x3438 <f_open+0x252>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    3348:	00 62       	ori	r16, 0x20	; 32
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    334a:	a9 80       	ldd	r10, Y+1	; 0x01
    334c:	ba 80       	ldd	r11, Y+2	; 0x02
    334e:	f5 01       	movw	r30, r10
    3350:	86 a5       	lds	r24, 0x66
    3352:	97 a5       	lds	r25, 0x67
    3354:	a0 a9       	sts	0x40, r26
    3356:	b1 a9       	sts	0x41, r27
    3358:	f7 01       	movw	r30, r14
    335a:	82 8f       	std	Z+26, r24	; 0x1a
    335c:	93 8f       	std	Z+27, r25	; 0x1b
    335e:	a4 8f       	std	Z+28, r26	; 0x1c
    3360:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    3362:	d7 8e       	std	Z+31, r13	; 0x1f
    3364:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    3366:	04 83       	std	Z+4, r16	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    3368:	c5 01       	movw	r24, r10
    336a:	b6 01       	movw	r22, r12
    336c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	f7 01       	movw	r30, r14
    3376:	86 87       	std	Z+14, r24	; 0x0e
    3378:	97 87       	std	Z+15, r25	; 0x0f
    337a:	a0 8b       	std	Z+16, r26	; 0x10
    337c:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    337e:	f6 01       	movw	r30, r12
    3380:	87 8d       	ldd	r24, Z+31	; 0x1f
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a0 e0       	ldi	r26, 0x00	; 0
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	78 2f       	mov	r23, r24
    338a:	66 27       	eor	r22, r22
    338c:	55 27       	eor	r21, r21
    338e:	44 27       	eor	r20, r20
    3390:	86 8d       	ldd	r24, Z+30	; 0x1e
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	a0 e0       	ldi	r26, 0x00	; 0
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	dc 01       	movw	r26, r24
    339a:	99 27       	eor	r25, r25
    339c:	88 27       	eor	r24, r24
    339e:	48 2b       	or	r20, r24
    33a0:	59 2b       	or	r21, r25
    33a2:	6a 2b       	or	r22, r26
    33a4:	7b 2b       	or	r23, r27
    33a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	48 2b       	or	r20, r24
    33b0:	59 2b       	or	r21, r25
    33b2:	6a 2b       	or	r22, r26
    33b4:	7b 2b       	or	r23, r27
    33b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	a0 e0       	ldi	r26, 0x00	; 0
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	84 2b       	or	r24, r20
    33c0:	95 2b       	or	r25, r21
    33c2:	a6 2b       	or	r26, r22
    33c4:	b7 2b       	or	r27, r23
    33c6:	f7 01       	movw	r30, r14
    33c8:	82 87       	std	Z+10, r24	; 0x0a
    33ca:	93 87       	std	Z+11, r25	; 0x0b
    33cc:	a4 87       	std	Z+12, r26	; 0x0c
    33ce:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    33d0:	16 82       	std	Z+6, r1	; 0x06
    33d2:	17 82       	std	Z+7, r1	; 0x07
    33d4:	10 86       	std	Z+8, r1	; 0x08
    33d6:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    33d8:	16 8a       	std	Z+22, r1	; 0x16
    33da:	17 8a       	std	Z+23, r1	; 0x17
    33dc:	10 8e       	std	Z+24, r1	; 0x18
    33de:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    33e0:	b1 82       	std	Z+1, r11	; 0x01
    33e2:	a0 82       	st	Z, r10
    33e4:	f5 01       	movw	r30, r10
    33e6:	86 81       	ldd	r24, Z+6	; 0x06
    33e8:	97 81       	ldd	r25, Z+7	; 0x07
    33ea:	f7 01       	movw	r30, r14
    33ec:	93 83       	std	Z+3, r25	; 0x03
    33ee:	82 83       	std	Z+2, r24	; 0x02
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <f_open+0x212>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    33f2:	18 2f       	mov	r17, r24
    33f4:	01 c0       	rjmp	.+2      	; 0x33f8 <f_open+0x212>
    33f6:	19 e0       	ldi	r17, 0x09	; 9
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    33f8:	81 2f       	mov	r24, r17
    33fa:	a4 96       	adiw	r28, 0x24	; 36
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	ff 90       	pop	r15
    3410:	ef 90       	pop	r14
    3412:	df 90       	pop	r13
    3414:	cf 90       	pop	r12
    3416:	bf 90       	pop	r11
    3418:	af 90       	pop	r10
    341a:	9f 90       	pop	r9
    341c:	8f 90       	pop	r8
    341e:	7f 90       	pop	r7
    3420:	6f 90       	pop	r6
    3422:	5f 90       	pop	r5
    3424:	4f 90       	pop	r4
    3426:	08 95       	ret
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    3428:	87 e0       	ldi	r24, 0x07	; 7
    342a:	e3 cf       	rjmp	.-58     	; 0x33f2 <f_open+0x20c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    342c:	88 e0       	ldi	r24, 0x08	; 8
    342e:	e1 cf       	rjmp	.-62     	; 0x33f2 <f_open+0x20c>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    3430:	84 e0       	ldi	r24, 0x04	; 4
    3432:	df cf       	rjmp	.-66     	; 0x33f2 <f_open+0x20c>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    3434:	87 e0       	ldi	r24, 0x07	; 7
    3436:	dd cf       	rjmp	.-70     	; 0x33f2 <f_open+0x20c>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    3438:	03 ff       	sbrs	r16, 3
    343a:	87 cf       	rjmp	.-242    	; 0x334a <f_open+0x164>
    343c:	85 cf       	rjmp	.-246    	; 0x3348 <f_open+0x162>

0000343e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    343e:	2f 92       	push	r2
    3440:	3f 92       	push	r3
    3442:	4f 92       	push	r4
    3444:	5f 92       	push	r5
    3446:	6f 92       	push	r6
    3448:	7f 92       	push	r7
    344a:	8f 92       	push	r8
    344c:	9f 92       	push	r9
    344e:	af 92       	push	r10
    3450:	bf 92       	push	r11
    3452:	cf 92       	push	r12
    3454:	df 92       	push	r13
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	00 d0       	rcall	.+0      	; 0x3462 <f_read+0x24>
    3462:	00 d0       	rcall	.+0      	; 0x3464 <f_read+0x26>
    3464:	00 d0       	rcall	.+0      	; 0x3466 <f_read+0x28>
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	9e 83       	std	Y+6, r25	; 0x06
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	06 2f       	mov	r16, r22
    3470:	17 2f       	mov	r17, r23
    3472:	6a 01       	movw	r12, r20
    3474:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    3476:	d9 01       	movw	r26, r18
    3478:	1d 92       	st	X+, r1
    347a:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    347c:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
    3480:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3482:	88 23       	and	r24, r24
    3484:	09 f0       	breq	.+2      	; 0x3488 <f_read+0x4a>
    3486:	a0 c1       	rjmp	.+832    	; 0x37c8 <f_read+0x38a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    3488:	ed 81       	ldd	r30, Y+5	; 0x05
    348a:	fe 81       	ldd	r31, Y+6	; 0x06
    348c:	84 81       	ldd	r24, Z+4	; 0x04
    348e:	88 23       	and	r24, r24
    3490:	0c f4       	brge	.+2      	; 0x3494 <f_read+0x56>
    3492:	92 c1       	rjmp	.+804    	; 0x37b8 <f_read+0x37a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    3494:	80 ff       	sbrs	r24, 0
    3496:	94 c1       	rjmp	.+808    	; 0x37c0 <f_read+0x382>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    3498:	82 85       	ldd	r24, Z+10	; 0x0a
    349a:	93 85       	ldd	r25, Z+11	; 0x0b
    349c:	a4 85       	ldd	r26, Z+12	; 0x0c
    349e:	b5 85       	ldd	r27, Z+13	; 0x0d
    34a0:	46 81       	ldd	r20, Z+6	; 0x06
    34a2:	57 81       	ldd	r21, Z+7	; 0x07
    34a4:	60 85       	ldd	r22, Z+8	; 0x08
    34a6:	71 85       	ldd	r23, Z+9	; 0x09
    34a8:	84 1b       	sub	r24, r20
    34aa:	95 0b       	sbc	r25, r21
    34ac:	a6 0b       	sbc	r26, r22
    34ae:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    34b0:	a6 01       	movw	r20, r12
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	84 17       	cp	r24, r20
    34b8:	95 07       	cpc	r25, r21
    34ba:	a6 07       	cpc	r26, r22
    34bc:	b7 07       	cpc	r27, r23
    34be:	08 f4       	brcc	.+2      	; 0x34c2 <f_read+0x84>
    34c0:	6c 01       	movw	r12, r24

	for ( ;  btr;								/* Repeat until all data read */
    34c2:	c1 14       	cp	r12, r1
    34c4:	d1 04       	cpc	r13, r1
    34c6:	09 f4       	brne	.+2      	; 0x34ca <f_read+0x8c>
    34c8:	7f c1       	rjmp	.+766    	; 0x37c8 <f_read+0x38a>
    34ca:	09 83       	std	Y+1, r16	; 0x01
    34cc:	1a 83       	std	Y+2, r17	; 0x02
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    34ce:	2d 81       	ldd	r18, Y+5	; 0x05
    34d0:	3e 81       	ldd	r19, Y+6	; 0x06
    34d2:	20 5e       	subi	r18, 0xE0	; 224
    34d4:	3f 4f       	sbci	r19, 0xFF	; 255
    34d6:	3c 83       	std	Y+4, r19	; 0x04
    34d8:	2b 83       	std	Y+3, r18	; 0x03
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    34da:	ad 81       	ldd	r26, Y+5	; 0x05
    34dc:	be 81       	ldd	r27, Y+6	; 0x06
    34de:	16 96       	adiw	r26, 0x06	; 6
    34e0:	4d 91       	ld	r20, X+
    34e2:	5d 91       	ld	r21, X+
    34e4:	6d 91       	ld	r22, X+
    34e6:	7c 91       	ld	r23, X
    34e8:	19 97       	sbiw	r26, 0x09	; 9
    34ea:	db 01       	movw	r26, r22
    34ec:	ca 01       	movw	r24, r20
    34ee:	91 70       	andi	r25, 0x01	; 1
    34f0:	a0 70       	andi	r26, 0x00	; 0
    34f2:	b0 70       	andi	r27, 0x00	; 0
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	a1 05       	cpc	r26, r1
    34f8:	b1 05       	cpc	r27, r1
    34fa:	09 f0       	breq	.+2      	; 0x34fe <f_read+0xc0>
    34fc:	1a c1       	rjmp	.+564    	; 0x3732 <f_read+0x2f4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    34fe:	ad 81       	ldd	r26, Y+5	; 0x05
    3500:	be 81       	ldd	r27, Y+6	; 0x06
    3502:	ed 91       	ld	r30, X+
    3504:	fc 91       	ld	r31, X
    3506:	db 01       	movw	r26, r22
    3508:	ca 01       	movw	r24, r20
    350a:	07 2e       	mov	r0, r23
    350c:	79 e0       	ldi	r23, 0x09	; 9
    350e:	b6 95       	lsr	r27
    3510:	a7 95       	ror	r26
    3512:	97 95       	ror	r25
    3514:	87 95       	ror	r24
    3516:	7a 95       	dec	r23
    3518:	d1 f7       	brne	.-12     	; 0x350e <f_read+0xd0>
    351a:	70 2d       	mov	r23, r0
    351c:	12 81       	ldd	r17, Z+2	; 0x02
    351e:	11 50       	subi	r17, 0x01	; 1
    3520:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    3522:	09 f0       	breq	.+2      	; 0x3526 <f_read+0xe8>
    3524:	41 c0       	rjmp	.+130    	; 0x35a8 <f_read+0x16a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    3526:	41 15       	cp	r20, r1
    3528:	51 05       	cpc	r21, r1
    352a:	61 05       	cpc	r22, r1
    352c:	71 05       	cpc	r23, r1
    352e:	39 f4       	brne	.+14     	; 0x353e <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    3530:	ed 81       	ldd	r30, Y+5	; 0x05
    3532:	fe 81       	ldd	r31, Y+6	; 0x06
    3534:	86 85       	ldd	r24, Z+14	; 0x0e
    3536:	97 85       	ldd	r25, Z+15	; 0x0f
    3538:	a0 89       	ldd	r26, Z+16	; 0x10
    353a:	b1 89       	ldd	r27, Z+17	; 0x11
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <f_read+0x11a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    353e:	ad 81       	ldd	r26, Y+5	; 0x05
    3540:	be 81       	ldd	r27, Y+6	; 0x06
    3542:	52 96       	adiw	r26, 0x12	; 18
    3544:	4d 91       	ld	r20, X+
    3546:	5d 91       	ld	r21, X+
    3548:	6d 91       	ld	r22, X+
    354a:	7c 91       	ld	r23, X
    354c:	55 97       	sbiw	r26, 0x15	; 21
    354e:	cf 01       	movw	r24, r30
    3550:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	91 05       	cpc	r25, r1
    355c:	a1 05       	cpc	r26, r1
    355e:	b1 05       	cpc	r27, r1
    3560:	48 f4       	brcc	.+18     	; 0x3574 <f_read+0x136>
    3562:	ed 81       	ldd	r30, Y+5	; 0x05
    3564:	fe 81       	ldd	r31, Y+6	; 0x06
    3566:	84 81       	ldd	r24, Z+4	; 0x04
    3568:	80 68       	ori	r24, 0x80	; 128
    356a:	84 83       	std	Z+4, r24	; 0x04
    356c:	ff 24       	eor	r15, r15
    356e:	68 94       	set
    3570:	f1 f8       	bld	r15, 1
    3572:	2a c1       	rjmp	.+596    	; 0x37c8 <f_read+0x38a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3574:	8f 3f       	cpi	r24, 0xFF	; 255
    3576:	ff ef       	ldi	r31, 0xFF	; 255
    3578:	9f 07       	cpc	r25, r31
    357a:	ff ef       	ldi	r31, 0xFF	; 255
    357c:	af 07       	cpc	r26, r31
    357e:	ff ef       	ldi	r31, 0xFF	; 255
    3580:	bf 07       	cpc	r27, r31
    3582:	61 f4       	brne	.+24     	; 0x359c <f_read+0x15e>
    3584:	ad 81       	ldd	r26, Y+5	; 0x05
    3586:	be 81       	ldd	r27, Y+6	; 0x06
    3588:	14 96       	adiw	r26, 0x04	; 4
    358a:	8c 91       	ld	r24, X
    358c:	14 97       	sbiw	r26, 0x04	; 4
    358e:	80 68       	ori	r24, 0x80	; 128
    3590:	14 96       	adiw	r26, 0x04	; 4
    3592:	8c 93       	st	X, r24
    3594:	14 97       	sbiw	r26, 0x04	; 4
    3596:	ff 24       	eor	r15, r15
    3598:	f3 94       	inc	r15
    359a:	16 c1       	rjmp	.+556    	; 0x37c8 <f_read+0x38a>
				fp->clust = clst;				/* Update current cluster */
    359c:	ed 81       	ldd	r30, Y+5	; 0x05
    359e:	fe 81       	ldd	r31, Y+6	; 0x06
    35a0:	82 8b       	std	Z+18, r24	; 0x12
    35a2:	93 8b       	std	Z+19, r25	; 0x13
    35a4:	a4 8b       	std	Z+20, r26	; 0x14
    35a6:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    35a8:	ad 81       	ldd	r26, Y+5	; 0x05
    35aa:	be 81       	ldd	r27, Y+6	; 0x06
    35ac:	4d 90       	ld	r4, X+
    35ae:	5c 90       	ld	r5, X
    35b0:	11 97       	sbiw	r26, 0x01	; 1
    35b2:	52 96       	adiw	r26, 0x12	; 18
    35b4:	4d 91       	ld	r20, X+
    35b6:	5d 91       	ld	r21, X+
    35b8:	6d 91       	ld	r22, X+
    35ba:	7c 91       	ld	r23, X
    35bc:	55 97       	sbiw	r26, 0x15	; 21
    35be:	c2 01       	movw	r24, r4
    35c0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	a1 05       	cpc	r26, r1
    35cc:	b1 05       	cpc	r27, r1
    35ce:	49 f4       	brne	.+18     	; 0x35e2 <f_read+0x1a4>
    35d0:	ed 81       	ldd	r30, Y+5	; 0x05
    35d2:	fe 81       	ldd	r31, Y+6	; 0x06
    35d4:	84 81       	ldd	r24, Z+4	; 0x04
    35d6:	80 68       	ori	r24, 0x80	; 128
    35d8:	84 83       	std	Z+4, r24	; 0x04
    35da:	ff 24       	eor	r15, r15
    35dc:	68 94       	set
    35de:	f1 f8       	bld	r15, 1
    35e0:	f3 c0       	rjmp	.+486    	; 0x37c8 <f_read+0x38a>
			sect += csect;
    35e2:	4c 01       	movw	r8, r24
    35e4:	5d 01       	movw	r10, r26
    35e6:	81 0e       	add	r8, r17
    35e8:	91 1c       	adc	r9, r1
    35ea:	a1 1c       	adc	r10, r1
    35ec:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    35ee:	36 01       	movw	r6, r12
    35f0:	67 2c       	mov	r6, r7
    35f2:	77 24       	eor	r7, r7
    35f4:	66 94       	lsr	r6
			if (cc) {							/* Read maximum contiguous sectors directly */
    35f6:	61 14       	cp	r6, r1
    35f8:	71 04       	cpc	r7, r1
    35fa:	09 f4       	brne	.+2      	; 0x35fe <f_read+0x1c0>
    35fc:	4e c0       	rjmp	.+156    	; 0x369a <f_read+0x25c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    35fe:	d2 01       	movw	r26, r4
    3600:	12 96       	adiw	r26, 0x02	; 2
    3602:	4c 91       	ld	r20, X
    3604:	12 97       	sbiw	r26, 0x02	; 2
    3606:	c3 01       	movw	r24, r6
    3608:	81 0f       	add	r24, r17
    360a:	91 1d       	adc	r25, r1
    360c:	24 2f       	mov	r18, r20
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	28 17       	cp	r18, r24
    3612:	39 07       	cpc	r19, r25
    3614:	20 f4       	brcc	.+8      	; 0x361e <f_read+0x1e0>
					cc = fp->fs->csize - csect;
    3616:	c9 01       	movw	r24, r18
    3618:	3c 01       	movw	r6, r24
    361a:	61 1a       	sub	r6, r17
    361c:	71 08       	sbc	r7, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    361e:	f2 01       	movw	r30, r4
    3620:	81 81       	ldd	r24, Z+1	; 0x01
    3622:	69 81       	ldd	r22, Y+1	; 0x01
    3624:	7a 81       	ldd	r23, Y+2	; 0x02
    3626:	a5 01       	movw	r20, r10
    3628:	94 01       	movw	r18, r8
    362a:	06 2d       	mov	r16, r6
    362c:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    3630:	88 23       	and	r24, r24
    3632:	61 f0       	breq	.+24     	; 0x364c <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
    3634:	ad 81       	ldd	r26, Y+5	; 0x05
    3636:	be 81       	ldd	r27, Y+6	; 0x06
    3638:	14 96       	adiw	r26, 0x04	; 4
    363a:	8c 91       	ld	r24, X
    363c:	14 97       	sbiw	r26, 0x04	; 4
    363e:	80 68       	ori	r24, 0x80	; 128
    3640:	14 96       	adiw	r26, 0x04	; 4
    3642:	8c 93       	st	X, r24
    3644:	14 97       	sbiw	r26, 0x04	; 4
    3646:	ff 24       	eor	r15, r15
    3648:	f3 94       	inc	r15
    364a:	be c0       	rjmp	.+380    	; 0x37c8 <f_read+0x38a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    364c:	ed 81       	ldd	r30, Y+5	; 0x05
    364e:	fe 81       	ldd	r31, Y+6	; 0x06
    3650:	84 81       	ldd	r24, Z+4	; 0x04
    3652:	86 ff       	sbrs	r24, 6
    3654:	1d c0       	rjmp	.+58     	; 0x3690 <f_read+0x252>
    3656:	86 89       	ldd	r24, Z+22	; 0x16
    3658:	97 89       	ldd	r25, Z+23	; 0x17
    365a:	a0 8d       	ldd	r26, Z+24	; 0x18
    365c:	b1 8d       	ldd	r27, Z+25	; 0x19
    365e:	88 19       	sub	r24, r8
    3660:	99 09       	sbc	r25, r9
    3662:	aa 09       	sbc	r26, r10
    3664:	bb 09       	sbc	r27, r11
    3666:	a3 01       	movw	r20, r6
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	70 e0       	ldi	r23, 0x00	; 0
    366c:	84 17       	cp	r24, r20
    366e:	95 07       	cpc	r25, r21
    3670:	a6 07       	cpc	r26, r22
    3672:	b7 07       	cpc	r27, r23
    3674:	68 f4       	brcc	.+26     	; 0x3690 <f_read+0x252>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    3676:	98 2f       	mov	r25, r24
    3678:	88 27       	eor	r24, r24
    367a:	99 0f       	add	r25, r25
    367c:	29 81       	ldd	r18, Y+1	; 0x01
    367e:	3a 81       	ldd	r19, Y+2	; 0x02
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	6b 81       	ldd	r22, Y+3	; 0x03
    3686:	7c 81       	ldd	r23, Y+4	; 0x04
    3688:	40 e0       	ldi	r20, 0x00	; 0
    368a:	52 e0       	ldi	r21, 0x02	; 2
    368c:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    3690:	83 01       	movw	r16, r6
    3692:	10 2f       	mov	r17, r16
    3694:	00 27       	eor	r16, r16
    3696:	11 0f       	add	r17, r17
				continue;
    3698:	6a c0       	rjmp	.+212    	; 0x376e <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    369a:	ad 81       	ldd	r26, Y+5	; 0x05
    369c:	be 81       	ldd	r27, Y+6	; 0x06
    369e:	56 96       	adiw	r26, 0x16	; 22
    36a0:	0d 91       	ld	r16, X+
    36a2:	1d 91       	ld	r17, X+
    36a4:	2d 91       	ld	r18, X+
    36a6:	3c 91       	ld	r19, X
    36a8:	59 97       	sbiw	r26, 0x19	; 25
    36aa:	08 15       	cp	r16, r8
    36ac:	19 05       	cpc	r17, r9
    36ae:	2a 05       	cpc	r18, r10
    36b0:	3b 05       	cpc	r19, r11
    36b2:	b9 f1       	breq	.+110    	; 0x3722 <f_read+0x2e4>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    36b4:	14 96       	adiw	r26, 0x04	; 4
    36b6:	8c 91       	ld	r24, X
    36b8:	14 97       	sbiw	r26, 0x04	; 4
    36ba:	86 ff       	sbrs	r24, 6
    36bc:	1c c0       	rjmp	.+56     	; 0x36f6 <f_read+0x2b8>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    36be:	f2 01       	movw	r30, r4
    36c0:	81 81       	ldd	r24, Z+1	; 0x01
    36c2:	6b 81       	ldd	r22, Y+3	; 0x03
    36c4:	7c 81       	ldd	r23, Y+4	; 0x04
    36c6:	a9 01       	movw	r20, r18
    36c8:	98 01       	movw	r18, r16
    36ca:	01 e0       	ldi	r16, 0x01	; 1
    36cc:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    36d0:	88 23       	and	r24, r24
    36d2:	61 f0       	breq	.+24     	; 0x36ec <f_read+0x2ae>
						ABORT(fp->fs, FR_DISK_ERR);
    36d4:	ad 81       	ldd	r26, Y+5	; 0x05
    36d6:	be 81       	ldd	r27, Y+6	; 0x06
    36d8:	14 96       	adiw	r26, 0x04	; 4
    36da:	8c 91       	ld	r24, X
    36dc:	14 97       	sbiw	r26, 0x04	; 4
    36de:	80 68       	ori	r24, 0x80	; 128
    36e0:	14 96       	adiw	r26, 0x04	; 4
    36e2:	8c 93       	st	X, r24
    36e4:	14 97       	sbiw	r26, 0x04	; 4
    36e6:	ff 24       	eor	r15, r15
    36e8:	f3 94       	inc	r15
    36ea:	6e c0       	rjmp	.+220    	; 0x37c8 <f_read+0x38a>
					fp->flag &= ~FA__DIRTY;
    36ec:	ed 81       	ldd	r30, Y+5	; 0x05
    36ee:	fe 81       	ldd	r31, Y+6	; 0x06
    36f0:	84 81       	ldd	r24, Z+4	; 0x04
    36f2:	8f 7b       	andi	r24, 0xBF	; 191
    36f4:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    36f6:	ad 81       	ldd	r26, Y+5	; 0x05
    36f8:	be 81       	ldd	r27, Y+6	; 0x06
    36fa:	ed 91       	ld	r30, X+
    36fc:	fc 91       	ld	r31, X
    36fe:	81 81       	ldd	r24, Z+1	; 0x01
    3700:	6b 81       	ldd	r22, Y+3	; 0x03
    3702:	7c 81       	ldd	r23, Y+4	; 0x04
    3704:	a5 01       	movw	r20, r10
    3706:	94 01       	movw	r18, r8
    3708:	01 e0       	ldi	r16, 0x01	; 1
    370a:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    370e:	88 23       	and	r24, r24
    3710:	41 f0       	breq	.+16     	; 0x3722 <f_read+0x2e4>
					ABORT(fp->fs, FR_DISK_ERR);
    3712:	ed 81       	ldd	r30, Y+5	; 0x05
    3714:	fe 81       	ldd	r31, Y+6	; 0x06
    3716:	84 81       	ldd	r24, Z+4	; 0x04
    3718:	80 68       	ori	r24, 0x80	; 128
    371a:	84 83       	std	Z+4, r24	; 0x04
    371c:	ff 24       	eor	r15, r15
    371e:	f3 94       	inc	r15
    3720:	53 c0       	rjmp	.+166    	; 0x37c8 <f_read+0x38a>
			}
#endif
			fp->dsect = sect;
    3722:	ad 81       	ldd	r26, Y+5	; 0x05
    3724:	be 81       	ldd	r27, Y+6	; 0x06
    3726:	56 96       	adiw	r26, 0x16	; 22
    3728:	8d 92       	st	X+, r8
    372a:	9d 92       	st	X+, r9
    372c:	ad 92       	st	X+, r10
    372e:	bc 92       	st	X, r11
    3730:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    3732:	ed 81       	ldd	r30, Y+5	; 0x05
    3734:	fe 81       	ldd	r31, Y+6	; 0x06
    3736:	46 81       	ldd	r20, Z+6	; 0x06
    3738:	57 81       	ldd	r21, Z+7	; 0x07
    373a:	60 85       	ldd	r22, Z+8	; 0x08
    373c:	71 85       	ldd	r23, Z+9	; 0x09
    373e:	ca 01       	movw	r24, r20
    3740:	91 70       	andi	r25, 0x01	; 1
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	32 e0       	ldi	r19, 0x02	; 2
    3746:	28 1b       	sub	r18, r24
    3748:	39 0b       	sbc	r19, r25
    374a:	86 01       	movw	r16, r12
    374c:	2c 15       	cp	r18, r12
    374e:	3d 05       	cpc	r19, r13
    3750:	08 f4       	brcc	.+2      	; 0x3754 <f_read+0x316>
    3752:	89 01       	movw	r16, r18
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3754:	ba 01       	movw	r22, r20
    3756:	71 70       	andi	r23, 0x01	; 1
    3758:	60 5e       	subi	r22, 0xE0	; 224
    375a:	7f 4f       	sbci	r23, 0xFF	; 255
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	68 0f       	add	r22, r24
    3762:	79 1f       	adc	r23, r25
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	9a 81       	ldd	r25, Y+2	; 0x02
    3768:	a8 01       	movw	r20, r16
    376a:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    376e:	a9 81       	ldd	r26, Y+1	; 0x01
    3770:	ba 81       	ldd	r27, Y+2	; 0x02
    3772:	a0 0f       	add	r26, r16
    3774:	b1 1f       	adc	r27, r17
    3776:	ba 83       	std	Y+2, r27	; 0x02
    3778:	a9 83       	std	Y+1, r26	; 0x01
    377a:	a8 01       	movw	r20, r16
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	ed 81       	ldd	r30, Y+5	; 0x05
    3782:	fe 81       	ldd	r31, Y+6	; 0x06
    3784:	86 81       	ldd	r24, Z+6	; 0x06
    3786:	97 81       	ldd	r25, Z+7	; 0x07
    3788:	a0 85       	ldd	r26, Z+8	; 0x08
    378a:	b1 85       	ldd	r27, Z+9	; 0x09
    378c:	84 0f       	add	r24, r20
    378e:	95 1f       	adc	r25, r21
    3790:	a6 1f       	adc	r26, r22
    3792:	b7 1f       	adc	r27, r23
    3794:	86 83       	std	Z+6, r24	; 0x06
    3796:	97 83       	std	Z+7, r25	; 0x07
    3798:	a0 87       	std	Z+8, r26	; 0x08
    379a:	b1 87       	std	Z+9, r27	; 0x09
    379c:	d1 01       	movw	r26, r2
    379e:	8d 91       	ld	r24, X+
    37a0:	9c 91       	ld	r25, X
    37a2:	11 97       	sbiw	r26, 0x01	; 1
    37a4:	80 0f       	add	r24, r16
    37a6:	91 1f       	adc	r25, r17
    37a8:	11 96       	adiw	r26, 0x01	; 1
    37aa:	9c 93       	st	X, r25
    37ac:	8e 93       	st	-X, r24
    37ae:	c0 1a       	sub	r12, r16
    37b0:	d1 0a       	sbc	r13, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <f_read+0x378>
    37b4:	92 ce       	rjmp	.-732    	; 0x34da <f_read+0x9c>
    37b6:	08 c0       	rjmp	.+16     	; 0x37c8 <f_read+0x38a>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    37b8:	ff 24       	eor	r15, r15
    37ba:	68 94       	set
    37bc:	f1 f8       	bld	r15, 1
    37be:	04 c0       	rjmp	.+8      	; 0x37c8 <f_read+0x38a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    37c0:	0f 2e       	mov	r0, r31
    37c2:	f7 e0       	ldi	r31, 0x07	; 7
    37c4:	ff 2e       	mov	r15, r31
    37c6:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    37c8:	8f 2d       	mov	r24, r15
    37ca:	26 96       	adiw	r28, 0x06	; 6
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	bf 90       	pop	r11
    37e6:	af 90       	pop	r10
    37e8:	9f 90       	pop	r9
    37ea:	8f 90       	pop	r8
    37ec:	7f 90       	pop	r7
    37ee:	6f 90       	pop	r6
    37f0:	5f 90       	pop	r5
    37f2:	4f 90       	pop	r4
    37f4:	3f 90       	pop	r3
    37f6:	2f 90       	pop	r2
    37f8:	08 95       	ret

000037fa <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	00 d0       	rcall	.+0      	; 0x3820 <f_write+0x26>
    3820:	00 d0       	rcall	.+0      	; 0x3822 <f_write+0x28>
    3822:	0f 92       	push	r0
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	7c 01       	movw	r14, r24
    382a:	86 2e       	mov	r8, r22
    382c:	67 2e       	mov	r6, r23
    382e:	6a 01       	movw	r12, r20
    3830:	29 01       	movw	r4, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    3832:	d9 01       	movw	r26, r18
    3834:	1d 92       	st	X+, r1
    3836:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    3838:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
    383c:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    383e:	88 23       	and	r24, r24
    3840:	09 f0       	breq	.+2      	; 0x3844 <f_write+0x4a>
    3842:	c6 c1       	rjmp	.+908    	; 0x3bd0 <f_write+0x3d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    3844:	f7 01       	movw	r30, r14
    3846:	84 81       	ldd	r24, Z+4	; 0x04
    3848:	88 23       	and	r24, r24
    384a:	0c f4       	brge	.+2      	; 0x384e <f_write+0x54>
    384c:	be c1       	rjmp	.+892    	; 0x3bca <f_write+0x3d0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    384e:	81 ff       	sbrs	r24, 1
    3850:	be c1       	rjmp	.+892    	; 0x3bce <f_write+0x3d4>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    3852:	42 85       	ldd	r20, Z+10	; 0x0a
    3854:	53 85       	ldd	r21, Z+11	; 0x0b
    3856:	64 85       	ldd	r22, Z+12	; 0x0c
    3858:	75 85       	ldd	r23, Z+13	; 0x0d
    385a:	c6 01       	movw	r24, r12
    385c:	a0 e0       	ldi	r26, 0x00	; 0
    385e:	b0 e0       	ldi	r27, 0x00	; 0
    3860:	84 0f       	add	r24, r20
    3862:	95 1f       	adc	r25, r21
    3864:	a6 1f       	adc	r26, r22
    3866:	b7 1f       	adc	r27, r23
    3868:	84 17       	cp	r24, r20
    386a:	95 07       	cpc	r25, r21
    386c:	a6 07       	cpc	r26, r22
    386e:	b7 07       	cpc	r27, r23
    3870:	08 f4       	brcc	.+2      	; 0x3874 <f_write+0x7a>
    3872:	90 c1       	rjmp	.+800    	; 0x3b94 <f_write+0x39a>

	for ( ;  btw;							/* Repeat until all data written */
    3874:	c1 14       	cp	r12, r1
    3876:	d1 04       	cpc	r13, r1
    3878:	09 f4       	brne	.+2      	; 0x387c <f_write+0x82>
    387a:	8c c1       	rjmp	.+792    	; 0x3b94 <f_write+0x39a>
    387c:	89 82       	std	Y+1, r8	; 0x01
    387e:	6a 82       	std	Y+2, r6	; 0x02
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3880:	97 01       	movw	r18, r14
    3882:	20 5e       	subi	r18, 0xE0	; 224
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	3c 83       	std	Y+4, r19	; 0x04
    3888:	2b 83       	std	Y+3, r18	; 0x03
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    388a:	d7 01       	movw	r26, r14
    388c:	16 96       	adiw	r26, 0x06	; 6
    388e:	4d 91       	ld	r20, X+
    3890:	5d 91       	ld	r21, X+
    3892:	6d 91       	ld	r22, X+
    3894:	7c 91       	ld	r23, X
    3896:	19 97       	sbiw	r26, 0x09	; 9
    3898:	db 01       	movw	r26, r22
    389a:	ca 01       	movw	r24, r20
    389c:	91 70       	andi	r25, 0x01	; 1
    389e:	a0 70       	andi	r26, 0x00	; 0
    38a0:	b0 70       	andi	r27, 0x00	; 0
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	a1 05       	cpc	r26, r1
    38a6:	b1 05       	cpc	r27, r1
    38a8:	09 f0       	breq	.+2      	; 0x38ac <f_write+0xb2>
    38aa:	30 c1       	rjmp	.+608    	; 0x3b0c <f_write+0x312>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    38ac:	f7 01       	movw	r30, r14
    38ae:	20 81       	ld	r18, Z
    38b0:	31 81       	ldd	r19, Z+1	; 0x01
    38b2:	db 01       	movw	r26, r22
    38b4:	ca 01       	movw	r24, r20
    38b6:	07 2e       	mov	r0, r23
    38b8:	79 e0       	ldi	r23, 0x09	; 9
    38ba:	b6 95       	lsr	r27
    38bc:	a7 95       	ror	r26
    38be:	97 95       	ror	r25
    38c0:	87 95       	ror	r24
    38c2:	7a 95       	dec	r23
    38c4:	d1 f7       	brne	.-12     	; 0x38ba <f_write+0xc0>
    38c6:	70 2d       	mov	r23, r0
    38c8:	f9 01       	movw	r30, r18
    38ca:	82 80       	ldd	r8, Z+2	; 0x02
    38cc:	e8 2d       	mov	r30, r8
    38ce:	e1 50       	subi	r30, 0x01	; 1
    38d0:	e8 23       	and	r30, r24
    38d2:	ed 83       	std	Y+5, r30	; 0x05
			if (!csect) {					/* On the cluster boundary? */
    38d4:	ee 23       	and	r30, r30
    38d6:	09 f0       	breq	.+2      	; 0x38da <f_write+0xe0>
    38d8:	4f c0       	rjmp	.+158    	; 0x3978 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    38da:	41 15       	cp	r20, r1
    38dc:	51 05       	cpc	r21, r1
    38de:	61 05       	cpc	r22, r1
    38e0:	71 05       	cpc	r23, r1
    38e2:	b9 f4       	brne	.+46     	; 0x3912 <f_write+0x118>
					clst = fp->sclust;		/* Follow from the origin */
    38e4:	f7 01       	movw	r30, r14
    38e6:	86 85       	ldd	r24, Z+14	; 0x0e
    38e8:	97 85       	ldd	r25, Z+15	; 0x0f
    38ea:	a0 89       	ldd	r26, Z+16	; 0x10
    38ec:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	a1 05       	cpc	r26, r1
    38f2:	b1 05       	cpc	r27, r1
    38f4:	f9 f4       	brne	.+62     	; 0x3934 <f_write+0x13a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    38f6:	c9 01       	movw	r24, r18
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	ba 01       	movw	r22, r20
    38fe:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	f7 01       	movw	r30, r14
    3908:	86 87       	std	Z+14, r24	; 0x0e
    390a:	97 87       	std	Z+15, r25	; 0x0f
    390c:	a0 8b       	std	Z+16, r26	; 0x10
    390e:	b1 8b       	std	Z+17, r27	; 0x11
    3910:	0c c0       	rjmp	.+24     	; 0x392a <f_write+0x130>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3912:	d7 01       	movw	r26, r14
    3914:	52 96       	adiw	r26, 0x12	; 18
    3916:	4d 91       	ld	r20, X+
    3918:	5d 91       	ld	r21, X+
    391a:	6d 91       	ld	r22, X+
    391c:	7c 91       	ld	r23, X
    391e:	55 97       	sbiw	r26, 0x15	; 21
    3920:	c9 01       	movw	r24, r18
    3922:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	a1 05       	cpc	r26, r1
    392e:	b1 05       	cpc	r27, r1
    3930:	09 f4       	brne	.+2      	; 0x3934 <f_write+0x13a>
    3932:	30 c1       	rjmp	.+608    	; 0x3b94 <f_write+0x39a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	91 05       	cpc	r25, r1
    3938:	a1 05       	cpc	r26, r1
    393a:	b1 05       	cpc	r27, r1
    393c:	31 f4       	brne	.+12     	; 0x394a <f_write+0x150>
    393e:	f7 01       	movw	r30, r14
    3940:	84 81       	ldd	r24, Z+4	; 0x04
    3942:	80 68       	ori	r24, 0x80	; 128
    3944:	84 83       	std	Z+4, r24	; 0x04
    3946:	12 e0       	ldi	r17, 0x02	; 2
    3948:	43 c1       	rjmp	.+646    	; 0x3bd0 <f_write+0x3d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    394a:	8f 3f       	cpi	r24, 0xFF	; 255
    394c:	ff ef       	ldi	r31, 0xFF	; 255
    394e:	9f 07       	cpc	r25, r31
    3950:	ff ef       	ldi	r31, 0xFF	; 255
    3952:	af 07       	cpc	r26, r31
    3954:	ff ef       	ldi	r31, 0xFF	; 255
    3956:	bf 07       	cpc	r27, r31
    3958:	51 f4       	brne	.+20     	; 0x396e <f_write+0x174>
    395a:	d7 01       	movw	r26, r14
    395c:	14 96       	adiw	r26, 0x04	; 4
    395e:	8c 91       	ld	r24, X
    3960:	14 97       	sbiw	r26, 0x04	; 4
    3962:	80 68       	ori	r24, 0x80	; 128
    3964:	14 96       	adiw	r26, 0x04	; 4
    3966:	8c 93       	st	X, r24
    3968:	14 97       	sbiw	r26, 0x04	; 4
    396a:	11 e0       	ldi	r17, 0x01	; 1
    396c:	31 c1       	rjmp	.+610    	; 0x3bd0 <f_write+0x3d6>
				fp->clust = clst;			/* Update current cluster */
    396e:	f7 01       	movw	r30, r14
    3970:	82 8b       	std	Z+18, r24	; 0x12
    3972:	93 8b       	std	Z+19, r25	; 0x13
    3974:	a4 8b       	std	Z+20, r26	; 0x14
    3976:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    3978:	d7 01       	movw	r26, r14
    397a:	14 96       	adiw	r26, 0x04	; 4
    397c:	8c 91       	ld	r24, X
    397e:	14 97       	sbiw	r26, 0x04	; 4
    3980:	86 ff       	sbrs	r24, 6
    3982:	1e c0       	rjmp	.+60     	; 0x39c0 <f_write+0x1c6>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3984:	ed 91       	ld	r30, X+
    3986:	fc 91       	ld	r31, X
    3988:	11 97       	sbiw	r26, 0x01	; 1
    398a:	56 96       	adiw	r26, 0x16	; 22
    398c:	2d 91       	ld	r18, X+
    398e:	3d 91       	ld	r19, X+
    3990:	4d 91       	ld	r20, X+
    3992:	5c 91       	ld	r21, X
    3994:	59 97       	sbiw	r26, 0x19	; 25
    3996:	81 81       	ldd	r24, Z+1	; 0x01
    3998:	6b 81       	ldd	r22, Y+3	; 0x03
    399a:	7c 81       	ldd	r23, Y+4	; 0x04
    399c:	01 e0       	ldi	r16, 0x01	; 1
    399e:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    39a2:	88 23       	and	r24, r24
    39a4:	31 f0       	breq	.+12     	; 0x39b2 <f_write+0x1b8>
					ABORT(fp->fs, FR_DISK_ERR);
    39a6:	f7 01       	movw	r30, r14
    39a8:	84 81       	ldd	r24, Z+4	; 0x04
    39aa:	80 68       	ori	r24, 0x80	; 128
    39ac:	84 83       	std	Z+4, r24	; 0x04
    39ae:	11 e0       	ldi	r17, 0x01	; 1
    39b0:	0f c1       	rjmp	.+542    	; 0x3bd0 <f_write+0x3d6>
				fp->flag &= ~FA__DIRTY;
    39b2:	d7 01       	movw	r26, r14
    39b4:	14 96       	adiw	r26, 0x04	; 4
    39b6:	8c 91       	ld	r24, X
    39b8:	14 97       	sbiw	r26, 0x04	; 4
    39ba:	8f 7b       	andi	r24, 0xBF	; 191
    39bc:	14 96       	adiw	r26, 0x04	; 4
    39be:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    39c0:	f7 01       	movw	r30, r14
    39c2:	20 80       	ld	r2, Z
    39c4:	31 80       	ldd	r3, Z+1	; 0x01
    39c6:	42 89       	ldd	r20, Z+18	; 0x12
    39c8:	53 89       	ldd	r21, Z+19	; 0x13
    39ca:	64 89       	ldd	r22, Z+20	; 0x14
    39cc:	75 89       	ldd	r23, Z+21	; 0x15
    39ce:	c1 01       	movw	r24, r2
    39d0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	a1 05       	cpc	r26, r1
    39dc:	b1 05       	cpc	r27, r1
    39de:	51 f4       	brne	.+20     	; 0x39f4 <f_write+0x1fa>
    39e0:	d7 01       	movw	r26, r14
    39e2:	14 96       	adiw	r26, 0x04	; 4
    39e4:	8c 91       	ld	r24, X
    39e6:	14 97       	sbiw	r26, 0x04	; 4
    39e8:	80 68       	ori	r24, 0x80	; 128
    39ea:	14 96       	adiw	r26, 0x04	; 4
    39ec:	8c 93       	st	X, r24
    39ee:	14 97       	sbiw	r26, 0x04	; 4
    39f0:	12 e0       	ldi	r17, 0x02	; 2
    39f2:	ee c0       	rjmp	.+476    	; 0x3bd0 <f_write+0x3d6>
			sect += csect;
    39f4:	4c 01       	movw	r8, r24
    39f6:	5d 01       	movw	r10, r26
    39f8:	ed 81       	ldd	r30, Y+5	; 0x05
    39fa:	8e 0e       	add	r8, r30
    39fc:	91 1c       	adc	r9, r1
    39fe:	a1 1c       	adc	r10, r1
    3a00:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3a02:	36 01       	movw	r6, r12
    3a04:	67 2c       	mov	r6, r7
    3a06:	77 24       	eor	r7, r7
    3a08:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3a0a:	61 14       	cp	r6, r1
    3a0c:	71 04       	cpc	r7, r1
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <f_write+0x218>
    3a10:	4d c0       	rjmp	.+154    	; 0x3aac <f_write+0x2b2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3a12:	d1 01       	movw	r26, r2
    3a14:	12 96       	adiw	r26, 0x02	; 2
    3a16:	4c 91       	ld	r20, X
    3a18:	12 97       	sbiw	r26, 0x02	; 2
    3a1a:	c3 01       	movw	r24, r6
    3a1c:	8e 0f       	add	r24, r30
    3a1e:	91 1d       	adc	r25, r1
    3a20:	24 2f       	mov	r18, r20
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	28 17       	cp	r18, r24
    3a26:	39 07       	cpc	r19, r25
    3a28:	20 f4       	brcc	.+8      	; 0x3a32 <f_write+0x238>
					cc = fp->fs->csize - csect;
    3a2a:	c9 01       	movw	r24, r18
    3a2c:	3c 01       	movw	r6, r24
    3a2e:	6e 1a       	sub	r6, r30
    3a30:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    3a32:	d1 01       	movw	r26, r2
    3a34:	11 96       	adiw	r26, 0x01	; 1
    3a36:	8c 91       	ld	r24, X
    3a38:	69 81       	ldd	r22, Y+1	; 0x01
    3a3a:	7a 81       	ldd	r23, Y+2	; 0x02
    3a3c:	a5 01       	movw	r20, r10
    3a3e:	94 01       	movw	r18, r8
    3a40:	06 2d       	mov	r16, r6
    3a42:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    3a46:	88 23       	and	r24, r24
    3a48:	31 f0       	breq	.+12     	; 0x3a56 <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
    3a4a:	f7 01       	movw	r30, r14
    3a4c:	84 81       	ldd	r24, Z+4	; 0x04
    3a4e:	80 68       	ori	r24, 0x80	; 128
    3a50:	84 83       	std	Z+4, r24	; 0x04
    3a52:	11 e0       	ldi	r17, 0x01	; 1
    3a54:	bd c0       	rjmp	.+378    	; 0x3bd0 <f_write+0x3d6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    3a56:	f7 01       	movw	r30, r14
    3a58:	86 89       	ldd	r24, Z+22	; 0x16
    3a5a:	97 89       	ldd	r25, Z+23	; 0x17
    3a5c:	a0 8d       	ldd	r26, Z+24	; 0x18
    3a5e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3a60:	88 19       	sub	r24, r8
    3a62:	99 09       	sbc	r25, r9
    3a64:	aa 09       	sbc	r26, r10
    3a66:	bb 09       	sbc	r27, r11
    3a68:	a3 01       	movw	r20, r6
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	84 17       	cp	r24, r20
    3a70:	95 07       	cpc	r25, r21
    3a72:	a6 07       	cpc	r26, r22
    3a74:	b7 07       	cpc	r27, r23
    3a76:	b0 f4       	brcc	.+44     	; 0x3aa4 <f_write+0x2aa>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    3a78:	bc 01       	movw	r22, r24
    3a7a:	76 2f       	mov	r23, r22
    3a7c:	66 27       	eor	r22, r22
    3a7e:	77 0f       	add	r23, r23
    3a80:	29 81       	ldd	r18, Y+1	; 0x01
    3a82:	3a 81       	ldd	r19, Y+2	; 0x02
    3a84:	62 0f       	add	r22, r18
    3a86:	73 1f       	adc	r23, r19
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	52 e0       	ldi	r21, 0x02	; 2
    3a90:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    3a94:	d7 01       	movw	r26, r14
    3a96:	14 96       	adiw	r26, 0x04	; 4
    3a98:	8c 91       	ld	r24, X
    3a9a:	14 97       	sbiw	r26, 0x04	; 4
    3a9c:	8f 7b       	andi	r24, 0xBF	; 191
    3a9e:	14 96       	adiw	r26, 0x04	; 4
    3aa0:	8c 93       	st	X, r24
    3aa2:	14 97       	sbiw	r26, 0x04	; 4
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3aa4:	76 2c       	mov	r7, r6
    3aa6:	66 24       	eor	r6, r6
    3aa8:	77 0c       	add	r7, r7
				continue;
    3aaa:	51 c0       	rjmp	.+162    	; 0x3b4e <f_write+0x354>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    3aac:	f7 01       	movw	r30, r14
    3aae:	86 89       	ldd	r24, Z+22	; 0x16
    3ab0:	97 89       	ldd	r25, Z+23	; 0x17
    3ab2:	a0 8d       	ldd	r26, Z+24	; 0x18
    3ab4:	b1 8d       	ldd	r27, Z+25	; 0x19
    3ab6:	88 15       	cp	r24, r8
    3ab8:	99 05       	cpc	r25, r9
    3aba:	aa 05       	cpc	r26, r10
    3abc:	bb 05       	cpc	r27, r11
    3abe:	f9 f0       	breq	.+62     	; 0x3afe <f_write+0x304>
				if (fp->fptr < fp->fsize &&
    3ac0:	86 81       	ldd	r24, Z+6	; 0x06
    3ac2:	97 81       	ldd	r25, Z+7	; 0x07
    3ac4:	a0 85       	ldd	r26, Z+8	; 0x08
    3ac6:	b1 85       	ldd	r27, Z+9	; 0x09
    3ac8:	42 85       	ldd	r20, Z+10	; 0x0a
    3aca:	53 85       	ldd	r21, Z+11	; 0x0b
    3acc:	64 85       	ldd	r22, Z+12	; 0x0c
    3ace:	75 85       	ldd	r23, Z+13	; 0x0d
    3ad0:	84 17       	cp	r24, r20
    3ad2:	95 07       	cpc	r25, r21
    3ad4:	a6 07       	cpc	r26, r22
    3ad6:	b7 07       	cpc	r27, r23
    3ad8:	90 f4       	brcc	.+36     	; 0x3afe <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3ada:	d1 01       	movw	r26, r2
    3adc:	11 96       	adiw	r26, 0x01	; 1
    3ade:	8c 91       	ld	r24, X
    3ae0:	6b 81       	ldd	r22, Y+3	; 0x03
    3ae2:	7c 81       	ldd	r23, Y+4	; 0x04
    3ae4:	a5 01       	movw	r20, r10
    3ae6:	94 01       	movw	r18, r8
    3ae8:	01 e0       	ldi	r16, 0x01	; 1
    3aea:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    3aee:	88 23       	and	r24, r24
    3af0:	31 f0       	breq	.+12     	; 0x3afe <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3af2:	f7 01       	movw	r30, r14
    3af4:	84 81       	ldd	r24, Z+4	; 0x04
    3af6:	80 68       	ori	r24, 0x80	; 128
    3af8:	84 83       	std	Z+4, r24	; 0x04
    3afa:	11 e0       	ldi	r17, 0x01	; 1
    3afc:	69 c0       	rjmp	.+210    	; 0x3bd0 <f_write+0x3d6>
			}
#endif
			fp->dsect = sect;
    3afe:	d7 01       	movw	r26, r14
    3b00:	56 96       	adiw	r26, 0x16	; 22
    3b02:	8d 92       	st	X+, r8
    3b04:	9d 92       	st	X+, r9
    3b06:	ad 92       	st	X+, r10
    3b08:	bc 92       	st	X, r11
    3b0a:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3b0c:	f7 01       	movw	r30, r14
    3b0e:	46 81       	ldd	r20, Z+6	; 0x06
    3b10:	57 81       	ldd	r21, Z+7	; 0x07
    3b12:	60 85       	ldd	r22, Z+8	; 0x08
    3b14:	71 85       	ldd	r23, Z+9	; 0x09
    3b16:	ca 01       	movw	r24, r20
    3b18:	91 70       	andi	r25, 0x01	; 1
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	32 e0       	ldi	r19, 0x02	; 2
    3b1e:	28 1b       	sub	r18, r24
    3b20:	39 0b       	sbc	r19, r25
    3b22:	36 01       	movw	r6, r12
    3b24:	2c 15       	cp	r18, r12
    3b26:	3d 05       	cpc	r19, r13
    3b28:	08 f4       	brcc	.+2      	; 0x3b2c <f_write+0x332>
    3b2a:	39 01       	movw	r6, r18
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3b2c:	ca 01       	movw	r24, r20
    3b2e:	91 70       	andi	r25, 0x01	; 1
    3b30:	80 96       	adiw	r24, 0x20	; 32
    3b32:	8e 0d       	add	r24, r14
    3b34:	9f 1d       	adc	r25, r15
    3b36:	69 81       	ldd	r22, Y+1	; 0x01
    3b38:	7a 81       	ldd	r23, Y+2	; 0x02
    3b3a:	a3 01       	movw	r20, r6
    3b3c:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
		fp->flag |= FA__DIRTY;
    3b40:	d7 01       	movw	r26, r14
    3b42:	14 96       	adiw	r26, 0x04	; 4
    3b44:	8c 91       	ld	r24, X
    3b46:	14 97       	sbiw	r26, 0x04	; 4
    3b48:	80 64       	ori	r24, 0x40	; 64
    3b4a:	14 96       	adiw	r26, 0x04	; 4
    3b4c:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b50:	fa 81       	ldd	r31, Y+2	; 0x02
    3b52:	e6 0d       	add	r30, r6
    3b54:	f7 1d       	adc	r31, r7
    3b56:	fa 83       	std	Y+2, r31	; 0x02
    3b58:	e9 83       	std	Y+1, r30	; 0x01
    3b5a:	a3 01       	movw	r20, r6
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	70 e0       	ldi	r23, 0x00	; 0
    3b60:	f7 01       	movw	r30, r14
    3b62:	86 81       	ldd	r24, Z+6	; 0x06
    3b64:	97 81       	ldd	r25, Z+7	; 0x07
    3b66:	a0 85       	ldd	r26, Z+8	; 0x08
    3b68:	b1 85       	ldd	r27, Z+9	; 0x09
    3b6a:	84 0f       	add	r24, r20
    3b6c:	95 1f       	adc	r25, r21
    3b6e:	a6 1f       	adc	r26, r22
    3b70:	b7 1f       	adc	r27, r23
    3b72:	86 83       	std	Z+6, r24	; 0x06
    3b74:	97 83       	std	Z+7, r25	; 0x07
    3b76:	a0 87       	std	Z+8, r26	; 0x08
    3b78:	b1 87       	std	Z+9, r27	; 0x09
    3b7a:	d2 01       	movw	r26, r4
    3b7c:	8d 91       	ld	r24, X+
    3b7e:	9c 91       	ld	r25, X
    3b80:	11 97       	sbiw	r26, 0x01	; 1
    3b82:	86 0d       	add	r24, r6
    3b84:	97 1d       	adc	r25, r7
    3b86:	11 96       	adiw	r26, 0x01	; 1
    3b88:	9c 93       	st	X, r25
    3b8a:	8e 93       	st	-X, r24
    3b8c:	c6 18       	sub	r12, r6
    3b8e:	d7 08       	sbc	r13, r7
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <f_write+0x39a>
    3b92:	7b ce       	rjmp	.-778    	; 0x388a <f_write+0x90>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3b94:	f7 01       	movw	r30, r14
    3b96:	86 81       	ldd	r24, Z+6	; 0x06
    3b98:	97 81       	ldd	r25, Z+7	; 0x07
    3b9a:	a0 85       	ldd	r26, Z+8	; 0x08
    3b9c:	b1 85       	ldd	r27, Z+9	; 0x09
    3b9e:	42 85       	ldd	r20, Z+10	; 0x0a
    3ba0:	53 85       	ldd	r21, Z+11	; 0x0b
    3ba2:	64 85       	ldd	r22, Z+12	; 0x0c
    3ba4:	75 85       	ldd	r23, Z+13	; 0x0d
    3ba6:	48 17       	cp	r20, r24
    3ba8:	59 07       	cpc	r21, r25
    3baa:	6a 07       	cpc	r22, r26
    3bac:	7b 07       	cpc	r23, r27
    3bae:	20 f4       	brcc	.+8      	; 0x3bb8 <f_write+0x3be>
    3bb0:	82 87       	std	Z+10, r24	; 0x0a
    3bb2:	93 87       	std	Z+11, r25	; 0x0b
    3bb4:	a4 87       	std	Z+12, r26	; 0x0c
    3bb6:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3bb8:	d7 01       	movw	r26, r14
    3bba:	14 96       	adiw	r26, 0x04	; 4
    3bbc:	8c 91       	ld	r24, X
    3bbe:	14 97       	sbiw	r26, 0x04	; 4
    3bc0:	80 62       	ori	r24, 0x20	; 32
    3bc2:	14 96       	adiw	r26, 0x04	; 4
    3bc4:	8c 93       	st	X, r24
    3bc6:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    3bc8:	03 c0       	rjmp	.+6      	; 0x3bd0 <f_write+0x3d6>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3bca:	12 e0       	ldi	r17, 0x02	; 2
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <f_write+0x3d6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3bce:	17 e0       	ldi	r17, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3bd0:	81 2f       	mov	r24, r17
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	ff 90       	pop	r15
    3be6:	ef 90       	pop	r14
    3be8:	df 90       	pop	r13
    3bea:	cf 90       	pop	r12
    3bec:	bf 90       	pop	r11
    3bee:	af 90       	pop	r10
    3bf0:	9f 90       	pop	r9
    3bf2:	8f 90       	pop	r8
    3bf4:	7f 90       	pop	r7
    3bf6:	6f 90       	pop	r6
    3bf8:	5f 90       	pop	r5
    3bfa:	4f 90       	pop	r4
    3bfc:	3f 90       	pop	r3
    3bfe:	2f 90       	pop	r2
    3c00:	08 95       	ret

00003c02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3c0c:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
	if (res == FR_OK) {
    3c10:	88 23       	and	r24, r24
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <f_sync+0x14>
    3c14:	4c c0       	rjmp	.+152    	; 0x3cae <f_sync+0xac>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	95 ff       	sbrs	r25, 5
    3c1a:	49 c0       	rjmp	.+146    	; 0x3cae <f_sync+0xac>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3c1c:	96 ff       	sbrs	r25, 6
    3c1e:	12 c0       	rjmp	.+36     	; 0x3c44 <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3c20:	e8 81       	ld	r30, Y
    3c22:	f9 81       	ldd	r31, Y+1	; 0x01
    3c24:	be 01       	movw	r22, r28
    3c26:	60 5e       	subi	r22, 0xE0	; 224
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	2e 89       	ldd	r18, Y+22	; 0x16
    3c2c:	3f 89       	ldd	r19, Y+23	; 0x17
    3c2e:	48 8d       	ldd	r20, Y+24	; 0x18
    3c30:	59 8d       	ldd	r21, Y+25	; 0x19
    3c32:	81 81       	ldd	r24, Z+1	; 0x01
    3c34:	01 e0       	ldi	r16, 0x01	; 1
    3c36:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    3c3a:	88 23       	and	r24, r24
    3c3c:	b9 f5       	brne	.+110    	; 0x3cac <f_sync+0xaa>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c40:	8f 7b       	andi	r24, 0xBF	; 191
    3c42:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3c44:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3c46:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3c48:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3c4a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3c4c:	88 81       	ld	r24, Y
    3c4e:	99 81       	ldd	r25, Y+1	; 0x01
    3c50:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
			if (res == FR_OK) {
    3c54:	88 23       	and	r24, r24
    3c56:	59 f5       	brne	.+86     	; 0x3cae <f_sync+0xac>
				dir = fp->dir_ptr;
    3c58:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3c5a:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	83 85       	ldd	r24, Z+11	; 0x0b
    3c60:	80 62       	ori	r24, 0x20	; 32
    3c62:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3c64:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c66:	84 8f       	std	Z+28, r24	; 0x1c
    3c68:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c6a:	85 8f       	std	Z+29, r24	; 0x1d
    3c6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c6e:	86 8f       	std	Z+30, r24	; 0x1e
    3c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c72:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    3c74:	4e 85       	ldd	r20, Y+14	; 0x0e
    3c76:	5f 85       	ldd	r21, Y+15	; 0x0f
    3c78:	68 89       	ldd	r22, Y+16	; 0x10
    3c7a:	79 89       	ldd	r23, Y+17	; 0x11
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
				tim = get_fattime();						/* Update updated time */
    3c82:	0e 94 64 10 	call	0x20c8	; 0x20c8 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    3c86:	f8 01       	movw	r30, r16
    3c88:	66 8b       	std	Z+22, r22	; 0x16
    3c8a:	77 8b       	std	Z+23, r23	; 0x17
    3c8c:	80 8f       	std	Z+24, r24	; 0x18
    3c8e:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    3c90:	12 8a       	std	Z+18, r1	; 0x12
    3c92:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    3c94:	8c 81       	ldd	r24, Y+4	; 0x04
    3c96:	8f 7d       	andi	r24, 0xDF	; 223
    3c98:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3c9a:	e8 81       	ld	r30, Y
    3c9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3ca2:	88 81       	ld	r24, Y
    3ca4:	99 81       	ldd	r25, Y+1	; 0x01
    3ca6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <f_sync+0xac>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    3cac:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	08 95       	ret

00003cb8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    3cbe:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    3cc2:	88 23       	and	r24, r24
    3cc4:	11 f4       	brne	.+4      	; 0x3cca <f_close+0x12>
    3cc6:	19 82       	std	Y+1, r1	; 0x01
    3cc8:	18 82       	st	Y, r1
	return res;
#endif
}
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	08 95       	ret

00003cd0 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    3cd0:	88 23       	and	r24, r24
    3cd2:	19 f4       	brne	.+6      	; 0x3cda <f_chdrive+0xa>

	CurrVol = drv;
    3cd4:	10 92 f5 01 	sts	0x01F5, r1

	return FR_OK;
    3cd8:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    3cda:	8b e0       	ldi	r24, 0x0B	; 11

	CurrVol = drv;

	return FR_OK;
}
    3cdc:	08 95       	ret

00003cde <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    3cde:	ef 92       	push	r14
    3ce0:	ff 92       	push	r15
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	a4 97       	sbiw	r28, 0x24	; 36
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	9c a3       	lds	r25, 0x5c
    3cfa:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	83 96       	adiw	r24, 0x23	; 35
    3d00:	be 01       	movw	r22, r28
    3d02:	6f 5f       	subi	r22, 0xFF	; 255
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
    3d0c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3d0e:	88 23       	and	r24, r24
    3d10:	81 f5       	brne	.+96     	; 0x3d72 <f_chdir+0x94>
		INIT_BUF(dj);
    3d12:	ce 01       	movw	r24, r28
    3d14:	47 96       	adiw	r24, 0x17	; 23
    3d16:	9e 8b       	std	Y+22, r25	; 0x16
    3d18:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    3d1a:	6b a1       	lds	r22, 0x4b
    3d1c:	7c a1       	lds	r23, 0x4c
    3d1e:	ce 01       	movw	r24, r28
    3d20:	01 96       	adiw	r24, 0x01	; 1
    3d22:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
    3d26:	18 2f       	mov	r17, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    3d28:	88 23       	and	r24, r24
    3d2a:	01 f5       	brne	.+64     	; 0x3d6c <f_chdir+0x8e>
			if (!dj.dir) {
    3d2c:	eb 89       	ldd	r30, Y+19	; 0x13
    3d2e:	fc 89       	ldd	r31, Y+20	; 0x14
    3d30:	30 97       	sbiw	r30, 0x00	; 0
    3d32:	59 f4       	brne	.+22     	; 0x3d4a <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    3d34:	e9 81       	ldd	r30, Y+1	; 0x01
    3d36:	fa 81       	ldd	r31, Y+2	; 0x02
    3d38:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3a:	98 85       	ldd	r25, Y+8	; 0x08
    3d3c:	a9 85       	ldd	r26, Y+9	; 0x09
    3d3e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d40:	86 8b       	std	Z+22, r24	; 0x16
    3d42:	97 8b       	std	Z+23, r25	; 0x17
    3d44:	a0 8f       	std	Z+24, r26	; 0x18
    3d46:	b1 8f       	std	Z+25, r27	; 0x19
    3d48:	14 c0       	rjmp	.+40     	; 0x3d72 <f_chdir+0x94>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    3d4a:	83 85       	ldd	r24, Z+11	; 0x0b
    3d4c:	84 ff       	sbrs	r24, 4
    3d4e:	1e c0       	rjmp	.+60     	; 0x3d8c <f_chdir+0xae>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    3d50:	e9 80       	ldd	r14, Y+1	; 0x01
    3d52:	fa 80       	ldd	r15, Y+2	; 0x02
    3d54:	c7 01       	movw	r24, r14
    3d56:	bf 01       	movw	r22, r30
    3d58:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	f7 01       	movw	r30, r14
    3d62:	86 8b       	std	Z+22, r24	; 0x16
    3d64:	97 8b       	std	Z+23, r25	; 0x17
    3d66:	a0 8f       	std	Z+24, r26	; 0x18
    3d68:	b1 8f       	std	Z+25, r27	; 0x19
    3d6a:	03 c0       	rjmp	.+6      	; 0x3d72 <f_chdir+0x94>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3d6c:	84 30       	cpi	r24, 0x04	; 4
    3d6e:	09 f4       	brne	.+2      	; 0x3d72 <f_chdir+0x94>
    3d70:	15 e0       	ldi	r17, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    3d72:	81 2f       	mov	r24, r17
    3d74:	a4 96       	adiw	r28, 0x24	; 36
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	ff 90       	pop	r15
    3d88:	ef 90       	pop	r14
    3d8a:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    3d8c:	15 e0       	ldi	r17, 0x05	; 5
    3d8e:	f1 cf       	rjmp	.-30     	; 0x3d72 <f_chdir+0x94>

00003d90 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3d90:	2f 92       	push	r2
    3d92:	3f 92       	push	r3
    3d94:	4f 92       	push	r4
    3d96:	5f 92       	push	r5
    3d98:	6f 92       	push	r6
    3d9a:	7f 92       	push	r7
    3d9c:	8f 92       	push	r8
    3d9e:	9f 92       	push	r9
    3da0:	af 92       	push	r10
    3da2:	bf 92       	push	r11
    3da4:	cf 92       	push	r12
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	00 d0       	rcall	.+0      	; 0x3db6 <f_lseek+0x26>
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <f_lseek+0x28>
    3db8:	00 d0       	rcall	.+0      	; 0x3dba <f_lseek+0x2a>
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	6a 01       	movw	r12, r20
    3dc4:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    3dc6:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
    3dca:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3dcc:	88 23       	and	r24, r24
    3dce:	09 f0       	breq	.+2      	; 0x3dd2 <f_lseek+0x42>
    3dd0:	e6 c1       	rjmp	.+972    	; 0x419e <f_lseek+0x40e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3dd2:	ad 81       	ldd	r26, Y+5	; 0x05
    3dd4:	be 81       	ldd	r27, Y+6	; 0x06
    3dd6:	14 96       	adiw	r26, 0x04	; 4
    3dd8:	2c 91       	ld	r18, X
    3dda:	14 97       	sbiw	r26, 0x04	; 4
    3ddc:	22 23       	and	r18, r18
    3dde:	0c f4       	brge	.+2      	; 0x3de2 <f_lseek+0x52>
    3de0:	dd c1       	rjmp	.+954    	; 0x419c <f_lseek+0x40c>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3de2:	1a 96       	adiw	r26, 0x0a	; 10
    3de4:	8d 91       	ld	r24, X+
    3de6:	9d 91       	ld	r25, X+
    3de8:	0d 90       	ld	r0, X+
    3dea:	bc 91       	ld	r27, X
    3dec:	a0 2d       	mov	r26, r0
    3dee:	8c 15       	cp	r24, r12
    3df0:	9d 05       	cpc	r25, r13
    3df2:	ae 05       	cpc	r26, r14
    3df4:	bf 05       	cpc	r27, r15
    3df6:	20 f4       	brcc	.+8      	; 0x3e00 <f_lseek+0x70>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    3df8:	21 fd       	sbrc	r18, 1
    3dfa:	02 c0       	rjmp	.+4      	; 0x3e00 <f_lseek+0x70>
#endif
			) ofs = fp->fsize;
    3dfc:	6c 01       	movw	r12, r24
    3dfe:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    3e00:	ed 81       	ldd	r30, Y+5	; 0x05
    3e02:	fe 81       	ldd	r31, Y+6	; 0x06
    3e04:	46 81       	ldd	r20, Z+6	; 0x06
    3e06:	57 81       	ldd	r21, Z+7	; 0x07
    3e08:	60 85       	ldd	r22, Z+8	; 0x08
    3e0a:	71 85       	ldd	r23, Z+9	; 0x09
		fp->fptr = nsect = 0;
    3e0c:	16 82       	std	Z+6, r1	; 0x06
    3e0e:	17 82       	std	Z+7, r1	; 0x07
    3e10:	10 86       	std	Z+8, r1	; 0x08
    3e12:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    3e14:	c1 14       	cp	r12, r1
    3e16:	d1 04       	cpc	r13, r1
    3e18:	e1 04       	cpc	r14, r1
    3e1a:	f1 04       	cpc	r15, r1
    3e1c:	09 f4       	brne	.+2      	; 0x3e20 <f_lseek+0x90>
    3e1e:	bf c1       	rjmp	.+894    	; 0x419e <f_lseek+0x40e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3e20:	20 80       	ld	r2, Z
    3e22:	31 80       	ldd	r3, Z+1	; 0x01
    3e24:	f1 01       	movw	r30, r2
    3e26:	82 81       	ldd	r24, Z+2	; 0x02
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	a0 e0       	ldi	r26, 0x00	; 0
    3e2c:	b0 e0       	ldi	r27, 0x00	; 0
    3e2e:	4c 01       	movw	r8, r24
    3e30:	5d 01       	movw	r10, r26
    3e32:	07 2e       	mov	r0, r23
    3e34:	79 e0       	ldi	r23, 0x09	; 9
    3e36:	88 0c       	add	r8, r8
    3e38:	99 1c       	adc	r9, r9
    3e3a:	aa 1c       	adc	r10, r10
    3e3c:	bb 1c       	adc	r11, r11
    3e3e:	7a 95       	dec	r23
    3e40:	d1 f7       	brne	.-12     	; 0x3e36 <f_lseek+0xa6>
    3e42:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    3e44:	41 15       	cp	r20, r1
    3e46:	51 05       	cpc	r21, r1
    3e48:	61 05       	cpc	r22, r1
    3e4a:	71 05       	cpc	r23, r1
    3e4c:	f1 f1       	breq	.+124    	; 0x3eca <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3e4e:	2a 01       	movw	r4, r20
    3e50:	3b 01       	movw	r6, r22
    3e52:	08 94       	sec
    3e54:	41 08       	sbc	r4, r1
    3e56:	51 08       	sbc	r5, r1
    3e58:	61 08       	sbc	r6, r1
    3e5a:	71 08       	sbc	r7, r1
    3e5c:	c7 01       	movw	r24, r14
    3e5e:	b6 01       	movw	r22, r12
    3e60:	61 50       	subi	r22, 0x01	; 1
    3e62:	70 40       	sbci	r23, 0x00	; 0
    3e64:	80 40       	sbci	r24, 0x00	; 0
    3e66:	90 40       	sbci	r25, 0x00	; 0
    3e68:	a5 01       	movw	r20, r10
    3e6a:	94 01       	movw	r18, r8
    3e6c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodsi4>
    3e70:	29 83       	std	Y+1, r18	; 0x01
    3e72:	3a 83       	std	Y+2, r19	; 0x02
    3e74:	4b 83       	std	Y+3, r20	; 0x03
    3e76:	5c 83       	std	Y+4, r21	; 0x04
    3e78:	c3 01       	movw	r24, r6
    3e7a:	b2 01       	movw	r22, r4
    3e7c:	a5 01       	movw	r20, r10
    3e7e:	94 01       	movw	r18, r8
    3e80:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    3e84:	89 81       	ldd	r24, Y+1	; 0x01
    3e86:	9a 81       	ldd	r25, Y+2	; 0x02
    3e88:	ab 81       	ldd	r26, Y+3	; 0x03
    3e8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e8c:	82 17       	cp	r24, r18
    3e8e:	93 07       	cpc	r25, r19
    3e90:	a4 07       	cpc	r26, r20
    3e92:	b5 07       	cpc	r27, r21
    3e94:	d0 f0       	brcs	.+52     	; 0x3eca <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3e96:	88 27       	eor	r24, r24
    3e98:	99 27       	eor	r25, r25
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	88 19       	sub	r24, r8
    3e9e:	99 09       	sbc	r25, r9
    3ea0:	aa 09       	sbc	r26, r10
    3ea2:	bb 09       	sbc	r27, r11
    3ea4:	84 21       	and	r24, r4
    3ea6:	95 21       	and	r25, r5
    3ea8:	a6 21       	and	r26, r6
    3eaa:	b7 21       	and	r27, r7
    3eac:	ed 81       	ldd	r30, Y+5	; 0x05
    3eae:	fe 81       	ldd	r31, Y+6	; 0x06
    3eb0:	86 83       	std	Z+6, r24	; 0x06
    3eb2:	97 83       	std	Z+7, r25	; 0x07
    3eb4:	a0 87       	std	Z+8, r26	; 0x08
    3eb6:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    3eb8:	c8 1a       	sub	r12, r24
    3eba:	d9 0a       	sbc	r13, r25
    3ebc:	ea 0a       	sbc	r14, r26
    3ebe:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    3ec0:	42 89       	ldd	r20, Z+18	; 0x12
    3ec2:	53 89       	ldd	r21, Z+19	; 0x13
    3ec4:	64 89       	ldd	r22, Z+20	; 0x14
    3ec6:	75 89       	ldd	r23, Z+21	; 0x15
    3ec8:	42 c0       	rjmp	.+132    	; 0x3f4e <f_lseek+0x1be>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3eca:	ad 81       	ldd	r26, Y+5	; 0x05
    3ecc:	be 81       	ldd	r27, Y+6	; 0x06
    3ece:	1e 96       	adiw	r26, 0x0e	; 14
    3ed0:	4d 91       	ld	r20, X+
    3ed2:	5d 91       	ld	r21, X+
    3ed4:	6d 91       	ld	r22, X+
    3ed6:	7c 91       	ld	r23, X
    3ed8:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3eda:	41 15       	cp	r20, r1
    3edc:	51 05       	cpc	r21, r1
    3ede:	61 05       	cpc	r22, r1
    3ee0:	71 05       	cpc	r23, r1
    3ee2:	69 f5       	brne	.+90     	; 0x3f3e <f_lseek+0x1ae>
					clst = create_chain(fp->fs, 0);
    3ee4:	c1 01       	movw	r24, r2
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	50 e0       	ldi	r21, 0x00	; 0
    3eea:	ba 01       	movw	r22, r20
    3eec:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    3ef0:	ab 01       	movw	r20, r22
    3ef2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3ef4:	41 30       	cpi	r20, 0x01	; 1
    3ef6:	51 05       	cpc	r21, r1
    3ef8:	61 05       	cpc	r22, r1
    3efa:	71 05       	cpc	r23, r1
    3efc:	39 f4       	brne	.+14     	; 0x3f0c <f_lseek+0x17c>
    3efe:	ed 81       	ldd	r30, Y+5	; 0x05
    3f00:	fe 81       	ldd	r31, Y+6	; 0x06
    3f02:	84 81       	ldd	r24, Z+4	; 0x04
    3f04:	80 68       	ori	r24, 0x80	; 128
    3f06:	84 83       	std	Z+4, r24	; 0x04
    3f08:	12 e0       	ldi	r17, 0x02	; 2
    3f0a:	49 c1       	rjmp	.+658    	; 0x419e <f_lseek+0x40e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f0c:	4f 3f       	cpi	r20, 0xFF	; 255
    3f0e:	ff ef       	ldi	r31, 0xFF	; 255
    3f10:	5f 07       	cpc	r21, r31
    3f12:	ff ef       	ldi	r31, 0xFF	; 255
    3f14:	6f 07       	cpc	r22, r31
    3f16:	ff ef       	ldi	r31, 0xFF	; 255
    3f18:	7f 07       	cpc	r23, r31
    3f1a:	59 f4       	brne	.+22     	; 0x3f32 <f_lseek+0x1a2>
    3f1c:	ad 81       	ldd	r26, Y+5	; 0x05
    3f1e:	be 81       	ldd	r27, Y+6	; 0x06
    3f20:	14 96       	adiw	r26, 0x04	; 4
    3f22:	8c 91       	ld	r24, X
    3f24:	14 97       	sbiw	r26, 0x04	; 4
    3f26:	80 68       	ori	r24, 0x80	; 128
    3f28:	14 96       	adiw	r26, 0x04	; 4
    3f2a:	8c 93       	st	X, r24
    3f2c:	14 97       	sbiw	r26, 0x04	; 4
    3f2e:	11 e0       	ldi	r17, 0x01	; 1
    3f30:	36 c1       	rjmp	.+620    	; 0x419e <f_lseek+0x40e>
					fp->sclust = clst;
    3f32:	ed 81       	ldd	r30, Y+5	; 0x05
    3f34:	fe 81       	ldd	r31, Y+6	; 0x06
    3f36:	46 87       	std	Z+14, r20	; 0x0e
    3f38:	57 87       	std	Z+15, r21	; 0x0f
    3f3a:	60 8b       	std	Z+16, r22	; 0x10
    3f3c:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    3f3e:	ad 81       	ldd	r26, Y+5	; 0x05
    3f40:	be 81       	ldd	r27, Y+6	; 0x06
    3f42:	52 96       	adiw	r26, 0x12	; 18
    3f44:	4d 93       	st	X+, r20
    3f46:	5d 93       	st	X+, r21
    3f48:	6d 93       	st	X+, r22
    3f4a:	7c 93       	st	X, r23
    3f4c:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    3f4e:	41 15       	cp	r20, r1
    3f50:	51 05       	cpc	r21, r1
    3f52:	61 05       	cpc	r22, r1
    3f54:	71 05       	cpc	r23, r1
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <f_lseek+0x1ca>
    3f58:	aa c0       	rjmp	.+340    	; 0x40ae <f_lseek+0x31e>
				while (ofs > bcs) {						/* Cluster following loop */
    3f5a:	8c 14       	cp	r8, r12
    3f5c:	9d 04       	cpc	r9, r13
    3f5e:	ae 04       	cpc	r10, r14
    3f60:	bf 04       	cpc	r11, r15
    3f62:	08 f0       	brcs	.+2      	; 0x3f66 <f_lseek+0x1d6>
    3f64:	68 c0       	rjmp	.+208    	; 0x4036 <f_lseek+0x2a6>
    3f66:	4d 80       	ldd	r4, Y+5	; 0x05
    3f68:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3f6a:	f2 01       	movw	r30, r4
    3f6c:	84 81       	ldd	r24, Z+4	; 0x04
    3f6e:	81 ff       	sbrs	r24, 1
    3f70:	0c c0       	rjmp	.+24     	; 0x3f8a <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    3f7a:	ab 01       	movw	r20, r22
    3f7c:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    3f7e:	41 15       	cp	r20, r1
    3f80:	51 05       	cpc	r21, r1
    3f82:	61 05       	cpc	r22, r1
    3f84:	71 05       	cpc	r23, r1
    3f86:	39 f4       	brne	.+14     	; 0x3f96 <f_lseek+0x206>
    3f88:	52 c0       	rjmp	.+164    	; 0x402e <f_lseek+0x29e>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3f8a:	80 81       	ld	r24, Z
    3f8c:	91 81       	ldd	r25, Z+1	; 0x01
    3f8e:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    3f92:	ab 01       	movw	r20, r22
    3f94:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3f96:	4f 3f       	cpi	r20, 0xFF	; 255
    3f98:	bf ef       	ldi	r27, 0xFF	; 255
    3f9a:	5b 07       	cpc	r21, r27
    3f9c:	bf ef       	ldi	r27, 0xFF	; 255
    3f9e:	6b 07       	cpc	r22, r27
    3fa0:	bf ef       	ldi	r27, 0xFF	; 255
    3fa2:	7b 07       	cpc	r23, r27
    3fa4:	41 f4       	brne	.+16     	; 0x3fb6 <f_lseek+0x226>
    3fa6:	5e 82       	std	Y+6, r5	; 0x06
    3fa8:	4d 82       	std	Y+5, r4	; 0x05
    3faa:	f2 01       	movw	r30, r4
    3fac:	84 81       	ldd	r24, Z+4	; 0x04
    3fae:	80 68       	ori	r24, 0x80	; 128
    3fb0:	84 83       	std	Z+4, r24	; 0x04
    3fb2:	11 e0       	ldi	r17, 0x01	; 1
    3fb4:	f4 c0       	rjmp	.+488    	; 0x419e <f_lseek+0x40e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3fb6:	42 30       	cpi	r20, 0x02	; 2
    3fb8:	51 05       	cpc	r21, r1
    3fba:	61 05       	cpc	r22, r1
    3fbc:	71 05       	cpc	r23, r1
    3fbe:	60 f0       	brcs	.+24     	; 0x3fd8 <f_lseek+0x248>
    3fc0:	d2 01       	movw	r26, r4
    3fc2:	ed 91       	ld	r30, X+
    3fc4:	fc 91       	ld	r31, X
    3fc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fc8:	93 8d       	ldd	r25, Z+27	; 0x1b
    3fca:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3fcc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3fce:	48 17       	cp	r20, r24
    3fd0:	59 07       	cpc	r21, r25
    3fd2:	6a 07       	cpc	r22, r26
    3fd4:	7b 07       	cpc	r23, r27
    3fd6:	40 f0       	brcs	.+16     	; 0x3fe8 <f_lseek+0x258>
    3fd8:	5e 82       	std	Y+6, r5	; 0x06
    3fda:	4d 82       	std	Y+5, r4	; 0x05
    3fdc:	f2 01       	movw	r30, r4
    3fde:	84 81       	ldd	r24, Z+4	; 0x04
    3fe0:	80 68       	ori	r24, 0x80	; 128
    3fe2:	84 83       	std	Z+4, r24	; 0x04
    3fe4:	12 e0       	ldi	r17, 0x02	; 2
    3fe6:	db c0       	rjmp	.+438    	; 0x419e <f_lseek+0x40e>
					fp->clust = clst;
    3fe8:	d2 01       	movw	r26, r4
    3fea:	52 96       	adiw	r26, 0x12	; 18
    3fec:	4d 93       	st	X+, r20
    3fee:	5d 93       	st	X+, r21
    3ff0:	6d 93       	st	X+, r22
    3ff2:	7c 93       	st	X, r23
    3ff4:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    3ff6:	16 96       	adiw	r26, 0x06	; 6
    3ff8:	8d 91       	ld	r24, X+
    3ffa:	9d 91       	ld	r25, X+
    3ffc:	0d 90       	ld	r0, X+
    3ffe:	bc 91       	ld	r27, X
    4000:	a0 2d       	mov	r26, r0
    4002:	88 0d       	add	r24, r8
    4004:	99 1d       	adc	r25, r9
    4006:	aa 1d       	adc	r26, r10
    4008:	bb 1d       	adc	r27, r11
    400a:	f2 01       	movw	r30, r4
    400c:	86 83       	std	Z+6, r24	; 0x06
    400e:	97 83       	std	Z+7, r25	; 0x07
    4010:	a0 87       	std	Z+8, r26	; 0x08
    4012:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    4014:	c8 18       	sub	r12, r8
    4016:	d9 08       	sbc	r13, r9
    4018:	ea 08       	sbc	r14, r10
    401a:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    401c:	8c 14       	cp	r8, r12
    401e:	9d 04       	cpc	r9, r13
    4020:	ae 04       	cpc	r10, r14
    4022:	bf 04       	cpc	r11, r15
    4024:	08 f4       	brcc	.+2      	; 0x4028 <f_lseek+0x298>
    4026:	a1 cf       	rjmp	.-190    	; 0x3f6a <f_lseek+0x1da>
    4028:	5e 82       	std	Y+6, r5	; 0x06
    402a:	4d 82       	std	Y+5, r4	; 0x05
    402c:	04 c0       	rjmp	.+8      	; 0x4036 <f_lseek+0x2a6>
    402e:	5e 82       	std	Y+6, r5	; 0x06
    4030:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    4032:	75 01       	movw	r14, r10
    4034:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    4036:	ed 81       	ldd	r30, Y+5	; 0x05
    4038:	fe 81       	ldd	r31, Y+6	; 0x06
    403a:	86 81       	ldd	r24, Z+6	; 0x06
    403c:	97 81       	ldd	r25, Z+7	; 0x07
    403e:	a0 85       	ldd	r26, Z+8	; 0x08
    4040:	b1 85       	ldd	r27, Z+9	; 0x09
    4042:	8c 0d       	add	r24, r12
    4044:	9d 1d       	adc	r25, r13
    4046:	ae 1d       	adc	r26, r14
    4048:	bf 1d       	adc	r27, r15
    404a:	86 83       	std	Z+6, r24	; 0x06
    404c:	97 83       	std	Z+7, r25	; 0x07
    404e:	a0 87       	std	Z+8, r26	; 0x08
    4050:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    4052:	d7 01       	movw	r26, r14
    4054:	c6 01       	movw	r24, r12
    4056:	91 70       	andi	r25, 0x01	; 1
    4058:	a0 70       	andi	r26, 0x00	; 0
    405a:	b0 70       	andi	r27, 0x00	; 0
    405c:	00 97       	sbiw	r24, 0x00	; 0
    405e:	a1 05       	cpc	r26, r1
    4060:	b1 05       	cpc	r27, r1
    4062:	49 f1       	breq	.+82     	; 0x40b6 <f_lseek+0x326>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    4064:	80 81       	ld	r24, Z
    4066:	91 81       	ldd	r25, Z+1	; 0x01
    4068:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	a1 05       	cpc	r26, r1
    4074:	b1 05       	cpc	r27, r1
    4076:	59 f4       	brne	.+22     	; 0x408e <f_lseek+0x2fe>
    4078:	ad 81       	ldd	r26, Y+5	; 0x05
    407a:	be 81       	ldd	r27, Y+6	; 0x06
    407c:	14 96       	adiw	r26, 0x04	; 4
    407e:	8c 91       	ld	r24, X
    4080:	14 97       	sbiw	r26, 0x04	; 4
    4082:	80 68       	ori	r24, 0x80	; 128
    4084:	14 96       	adiw	r26, 0x04	; 4
    4086:	8c 93       	st	X, r24
    4088:	14 97       	sbiw	r26, 0x04	; 4
    408a:	12 e0       	ldi	r17, 0x02	; 2
    408c:	88 c0       	rjmp	.+272    	; 0x419e <f_lseek+0x40e>
					nsect += ofs / SS(fp->fs);
    408e:	46 01       	movw	r8, r12
    4090:	57 01       	movw	r10, r14
    4092:	07 2e       	mov	r0, r23
    4094:	79 e0       	ldi	r23, 0x09	; 9
    4096:	b6 94       	lsr	r11
    4098:	a7 94       	ror	r10
    409a:	97 94       	ror	r9
    409c:	87 94       	ror	r8
    409e:	7a 95       	dec	r23
    40a0:	d1 f7       	brne	.-12     	; 0x4096 <f_lseek+0x306>
    40a2:	70 2d       	mov	r23, r0
    40a4:	88 0e       	add	r8, r24
    40a6:	99 1e       	adc	r9, r25
    40a8:	aa 1e       	adc	r10, r26
    40aa:	bb 1e       	adc	r11, r27
    40ac:	07 c0       	rjmp	.+14     	; 0x40bc <f_lseek+0x32c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    40ae:	88 24       	eor	r8, r8
    40b0:	99 24       	eor	r9, r9
    40b2:	54 01       	movw	r10, r8
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <f_lseek+0x32c>
    40b6:	88 24       	eor	r8, r8
    40b8:	99 24       	eor	r9, r9
    40ba:	54 01       	movw	r10, r8
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    40bc:	ed 81       	ldd	r30, Y+5	; 0x05
    40be:	fe 81       	ldd	r31, Y+6	; 0x06
    40c0:	86 81       	ldd	r24, Z+6	; 0x06
    40c2:	97 81       	ldd	r25, Z+7	; 0x07
    40c4:	a0 85       	ldd	r26, Z+8	; 0x08
    40c6:	b1 85       	ldd	r27, Z+9	; 0x09
    40c8:	91 70       	andi	r25, 0x01	; 1
    40ca:	a0 70       	andi	r26, 0x00	; 0
    40cc:	b0 70       	andi	r27, 0x00	; 0
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	a1 05       	cpc	r26, r1
    40d2:	b1 05       	cpc	r27, r1
    40d4:	09 f4       	brne	.+2      	; 0x40d8 <f_lseek+0x348>
    40d6:	4b c0       	rjmp	.+150    	; 0x416e <f_lseek+0x3de>
    40d8:	c6 88       	ldd	r12, Z+22	; 0x16
    40da:	d7 88       	ldd	r13, Z+23	; 0x17
    40dc:	e0 8c       	ldd	r14, Z+24	; 0x18
    40de:	f1 8c       	ldd	r15, Z+25	; 0x19
    40e0:	c8 14       	cp	r12, r8
    40e2:	d9 04       	cpc	r13, r9
    40e4:	ea 04       	cpc	r14, r10
    40e6:	fb 04       	cpc	r15, r11
    40e8:	09 f4       	brne	.+2      	; 0x40ec <f_lseek+0x35c>
    40ea:	41 c0       	rjmp	.+130    	; 0x416e <f_lseek+0x3de>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    40ec:	84 81       	ldd	r24, Z+4	; 0x04
    40ee:	86 ff       	sbrs	r24, 6
    40f0:	1f c0       	rjmp	.+62     	; 0x4130 <f_lseek+0x3a0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    40f2:	01 90       	ld	r0, Z+
    40f4:	f0 81       	ld	r31, Z
    40f6:	e0 2d       	mov	r30, r0
    40f8:	6d 81       	ldd	r22, Y+5	; 0x05
    40fa:	7e 81       	ldd	r23, Y+6	; 0x06
    40fc:	60 5e       	subi	r22, 0xE0	; 224
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4100:	81 81       	ldd	r24, Z+1	; 0x01
    4102:	a7 01       	movw	r20, r14
    4104:	96 01       	movw	r18, r12
    4106:	01 e0       	ldi	r16, 0x01	; 1
    4108:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    410c:	88 23       	and	r24, r24
    410e:	59 f0       	breq	.+22     	; 0x4126 <f_lseek+0x396>
					ABORT(fp->fs, FR_DISK_ERR);
    4110:	ad 81       	ldd	r26, Y+5	; 0x05
    4112:	be 81       	ldd	r27, Y+6	; 0x06
    4114:	14 96       	adiw	r26, 0x04	; 4
    4116:	8c 91       	ld	r24, X
    4118:	14 97       	sbiw	r26, 0x04	; 4
    411a:	80 68       	ori	r24, 0x80	; 128
    411c:	14 96       	adiw	r26, 0x04	; 4
    411e:	8c 93       	st	X, r24
    4120:	14 97       	sbiw	r26, 0x04	; 4
    4122:	11 e0       	ldi	r17, 0x01	; 1
    4124:	3c c0       	rjmp	.+120    	; 0x419e <f_lseek+0x40e>
				fp->flag &= ~FA__DIRTY;
    4126:	ed 81       	ldd	r30, Y+5	; 0x05
    4128:	fe 81       	ldd	r31, Y+6	; 0x06
    412a:	84 81       	ldd	r24, Z+4	; 0x04
    412c:	8f 7b       	andi	r24, 0xBF	; 191
    412e:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    4130:	ad 81       	ldd	r26, Y+5	; 0x05
    4132:	be 81       	ldd	r27, Y+6	; 0x06
    4134:	ed 91       	ld	r30, X+
    4136:	fc 91       	ld	r31, X
    4138:	11 97       	sbiw	r26, 0x01	; 1
    413a:	bd 01       	movw	r22, r26
    413c:	60 5e       	subi	r22, 0xE0	; 224
    413e:	7f 4f       	sbci	r23, 0xFF	; 255
    4140:	81 81       	ldd	r24, Z+1	; 0x01
    4142:	a5 01       	movw	r20, r10
    4144:	94 01       	movw	r18, r8
    4146:	01 e0       	ldi	r16, 0x01	; 1
    4148:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    414c:	88 23       	and	r24, r24
    414e:	39 f0       	breq	.+14     	; 0x415e <f_lseek+0x3ce>
				ABORT(fp->fs, FR_DISK_ERR);
    4150:	ed 81       	ldd	r30, Y+5	; 0x05
    4152:	fe 81       	ldd	r31, Y+6	; 0x06
    4154:	84 81       	ldd	r24, Z+4	; 0x04
    4156:	80 68       	ori	r24, 0x80	; 128
    4158:	84 83       	std	Z+4, r24	; 0x04
    415a:	11 e0       	ldi	r17, 0x01	; 1
    415c:	20 c0       	rjmp	.+64     	; 0x419e <f_lseek+0x40e>
#endif
			fp->dsect = nsect;
    415e:	ad 81       	ldd	r26, Y+5	; 0x05
    4160:	be 81       	ldd	r27, Y+6	; 0x06
    4162:	56 96       	adiw	r26, 0x16	; 22
    4164:	8d 92       	st	X+, r8
    4166:	9d 92       	st	X+, r9
    4168:	ad 92       	st	X+, r10
    416a:	bc 92       	st	X, r11
    416c:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    416e:	ed 81       	ldd	r30, Y+5	; 0x05
    4170:	fe 81       	ldd	r31, Y+6	; 0x06
    4172:	86 81       	ldd	r24, Z+6	; 0x06
    4174:	97 81       	ldd	r25, Z+7	; 0x07
    4176:	a0 85       	ldd	r26, Z+8	; 0x08
    4178:	b1 85       	ldd	r27, Z+9	; 0x09
    417a:	42 85       	ldd	r20, Z+10	; 0x0a
    417c:	53 85       	ldd	r21, Z+11	; 0x0b
    417e:	64 85       	ldd	r22, Z+12	; 0x0c
    4180:	75 85       	ldd	r23, Z+13	; 0x0d
    4182:	48 17       	cp	r20, r24
    4184:	59 07       	cpc	r21, r25
    4186:	6a 07       	cpc	r22, r26
    4188:	7b 07       	cpc	r23, r27
    418a:	48 f4       	brcc	.+18     	; 0x419e <f_lseek+0x40e>
			fp->fsize = fp->fptr;
    418c:	82 87       	std	Z+10, r24	; 0x0a
    418e:	93 87       	std	Z+11, r25	; 0x0b
    4190:	a4 87       	std	Z+12, r26	; 0x0c
    4192:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    4194:	84 81       	ldd	r24, Z+4	; 0x04
    4196:	80 62       	ori	r24, 0x20	; 32
    4198:	84 83       	std	Z+4, r24	; 0x04
    419a:	01 c0       	rjmp	.+2      	; 0x419e <f_lseek+0x40e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    419c:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    419e:	81 2f       	mov	r24, r17
    41a0:	26 96       	adiw	r28, 0x06	; 6
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	f8 94       	cli
    41a6:	de bf       	out	0x3e, r29	; 62
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	cd bf       	out	0x3d, r28	; 61
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	1f 91       	pop	r17
    41b2:	0f 91       	pop	r16
    41b4:	ff 90       	pop	r15
    41b6:	ef 90       	pop	r14
    41b8:	df 90       	pop	r13
    41ba:	cf 90       	pop	r12
    41bc:	bf 90       	pop	r11
    41be:	af 90       	pop	r10
    41c0:	9f 90       	pop	r9
    41c2:	8f 90       	pop	r8
    41c4:	7f 90       	pop	r7
    41c6:	6f 90       	pop	r6
    41c8:	5f 90       	pop	r5
    41ca:	4f 90       	pop	r4
    41cc:	3f 90       	pop	r3
    41ce:	2f 90       	pop	r2
    41d0:	08 95       	ret

000041d2 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    41d2:	ef 92       	push	r14
    41d4:	ff 92       	push	r15
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	2e 97       	sbiw	r28, 0x0e	; 14
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	8c 01       	movw	r16, r24
    41f0:	7e 87       	std	Y+14, r23	; 0x0e
    41f2:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	09 f4       	brne	.+2      	; 0x41fa <f_opendir+0x28>
    41f8:	4c c0       	rjmp	.+152    	; 0x4292 <f_opendir+0xc0>

	res = chk_mounted(&path, &dj->fs, 0);
    41fa:	ce 01       	movw	r24, r28
    41fc:	0d 96       	adiw	r24, 0x0d	; 13
    41fe:	b8 01       	movw	r22, r16
    4200:	40 e0       	ldi	r20, 0x00	; 0
    4202:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
	fs = dj->fs;
    4206:	d8 01       	movw	r26, r16
    4208:	ed 90       	ld	r14, X+
    420a:	fc 90       	ld	r15, X
    420c:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    420e:	88 23       	and	r24, r24
    4210:	e1 f5       	brne	.+120    	; 0x428a <f_opendir+0xb8>
		INIT_BUF(*dj);
    4212:	ce 01       	movw	r24, r28
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	55 96       	adiw	r26, 0x15	; 21
    4218:	9c 93       	st	X, r25
    421a:	8e 93       	st	-X, r24
    421c:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    421e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4220:	7e 85       	ldd	r23, Y+14	; 0x0e
    4222:	c8 01       	movw	r24, r16
    4224:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    4228:	88 23       	and	r24, r24
    422a:	11 f5       	brne	.+68     	; 0x4270 <f_opendir+0x9e>
			if (dj->dir) {						/* It is not the root dir */
    422c:	d8 01       	movw	r26, r16
    422e:	52 96       	adiw	r26, 0x12	; 18
    4230:	ed 91       	ld	r30, X+
    4232:	fc 91       	ld	r31, X
    4234:	53 97       	sbiw	r26, 0x13	; 19
    4236:	30 97       	sbiw	r30, 0x00	; 0
    4238:	71 f0       	breq	.+28     	; 0x4256 <f_opendir+0x84>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    423a:	83 85       	ldd	r24, Z+11	; 0x0b
    423c:	84 ff       	sbrs	r24, 4
    423e:	1b c0       	rjmp	.+54     	; 0x4276 <f_opendir+0xa4>
					dj->sclust = ld_clust(fs, dj->dir);
    4240:	c7 01       	movw	r24, r14
    4242:	bf 01       	movw	r22, r30
    4244:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	f8 01       	movw	r30, r16
    424e:	86 83       	std	Z+6, r24	; 0x06
    4250:	97 83       	std	Z+7, r25	; 0x07
    4252:	a0 87       	std	Z+8, r26	; 0x08
    4254:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    4256:	d7 01       	movw	r26, r14
    4258:	16 96       	adiw	r26, 0x06	; 6
    425a:	8d 91       	ld	r24, X+
    425c:	9c 91       	ld	r25, X
    425e:	17 97       	sbiw	r26, 0x07	; 7
    4260:	f8 01       	movw	r30, r16
    4262:	93 83       	std	Z+3, r25	; 0x03
    4264:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    4266:	c8 01       	movw	r24, r16
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    4270:	84 30       	cpi	r24, 0x04	; 4
    4272:	11 f4       	brne	.+4      	; 0x4278 <f_opendir+0xa6>
    4274:	04 c0       	rjmp	.+8      	; 0x427e <f_opendir+0xac>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    4276:	85 e0       	ldi	r24, 0x05	; 5
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    4278:	88 23       	and	r24, r24
    427a:	61 f0       	breq	.+24     	; 0x4294 <f_opendir+0xc2>
    427c:	01 c0       	rjmp	.+2      	; 0x4280 <f_opendir+0xae>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    427e:	85 e0       	ldi	r24, 0x05	; 5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    4280:	d8 01       	movw	r26, r16
    4282:	11 96       	adiw	r26, 0x01	; 1
    4284:	1c 92       	st	X, r1
    4286:	1e 92       	st	-X, r1
    4288:	05 c0       	rjmp	.+10     	; 0x4294 <f_opendir+0xc2>
	} else {
		dj->fs = 0;
    428a:	f8 01       	movw	r30, r16
    428c:	11 82       	std	Z+1, r1	; 0x01
    428e:	10 82       	st	Z, r1
    4290:	01 c0       	rjmp	.+2      	; 0x4294 <f_opendir+0xc2>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    4292:	89 e0       	ldi	r24, 0x09	; 9
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
    4294:	2e 96       	adiw	r28, 0x0e	; 14
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	ff 90       	pop	r15
    42aa:	ef 90       	pop	r14
    42ac:	08 95       	ret

000042ae <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	1f 93       	push	r17
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	cd b7       	in	r28, 0x3d	; 61
    42be:	de b7       	in	r29, 0x3e	; 62
    42c0:	2c 97       	sbiw	r28, 0x0c	; 12
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	7c 01       	movw	r14, r24
    42ce:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
    42d0:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
    42d4:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    42d6:	88 23       	and	r24, r24
    42d8:	81 f5       	brne	.+96     	; 0x433a <f_readdir+0x8c>
		if (!fno) {
    42da:	c1 14       	cp	r12, r1
    42dc:	d1 04       	cpc	r13, r1
    42de:	39 f4       	brne	.+14     	; 0x42ee <f_readdir+0x40>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    42e0:	c7 01       	movw	r24, r14
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	70 e0       	ldi	r23, 0x00	; 0
    42e6:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
    42ea:	18 2f       	mov	r17, r24
    42ec:	26 c0       	rjmp	.+76     	; 0x433a <f_readdir+0x8c>
		} else {
			INIT_BUF(*dj);
    42ee:	ce 01       	movw	r24, r28
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	f7 01       	movw	r30, r14
    42f4:	95 8b       	std	Z+21, r25	; 0x15
    42f6:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    42f8:	c7 01       	movw	r24, r14
    42fa:	0e 94 2b 18 	call	0x3056	; 0x3056 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    42fe:	84 30       	cpi	r24, 0x04	; 4
    4300:	31 f4       	brne	.+12     	; 0x430e <f_readdir+0x60>
				dj->sect = 0;
    4302:	f7 01       	movw	r30, r14
    4304:	16 86       	std	Z+14, r1	; 0x0e
    4306:	17 86       	std	Z+15, r1	; 0x0f
    4308:	10 8a       	std	Z+16, r1	; 0x10
    430a:	11 8a       	std	Z+17, r1	; 0x11
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    430e:	88 23       	and	r24, r24
    4310:	89 f4       	brne	.+34     	; 0x4334 <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    4312:	c7 01       	movw	r24, r14
    4314:	b6 01       	movw	r22, r12
    4316:	0e 94 92 09 	call	0x1324	; 0x1324 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    431a:	c7 01       	movw	r24, r14
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	70 e0       	ldi	r23, 0x00	; 0
    4320:	0e 94 a0 14 	call	0x2940	; 0x2940 <dir_next>
				if (res == FR_NO_FILE) {
    4324:	84 30       	cpi	r24, 0x04	; 4
    4326:	41 f4       	brne	.+16     	; 0x4338 <f_readdir+0x8a>
					dj->sect = 0;
    4328:	f7 01       	movw	r30, r14
    432a:	16 86       	std	Z+14, r1	; 0x0e
    432c:	17 86       	std	Z+15, r1	; 0x0f
    432e:	10 8a       	std	Z+16, r1	; 0x10
    4330:	11 8a       	std	Z+17, r1	; 0x11
    4332:	03 c0       	rjmp	.+6      	; 0x433a <f_readdir+0x8c>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    4334:	18 2f       	mov	r17, r24
    4336:	01 c0       	rjmp	.+2      	; 0x433a <f_readdir+0x8c>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    4338:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    433a:	81 2f       	mov	r24, r17
    433c:	2c 96       	adiw	r28, 0x0c	; 12
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	1f 91       	pop	r17
    434e:	ff 90       	pop	r15
    4350:	ef 90       	pop	r14
    4352:	df 90       	pop	r13
    4354:	cf 90       	pop	r12
    4356:	08 95       	ret

00004358 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    4358:	ef 92       	push	r14
    435a:	ff 92       	push	r15
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	a4 97       	sbiw	r28, 0x24	; 36
    4368:	0f b6       	in	r0, 0x3f	; 63
    436a:	f8 94       	cli
    436c:	de bf       	out	0x3e, r29	; 62
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	cd bf       	out	0x3d, r28	; 61
    4372:	9c a3       	lds	r25, 0x5c
    4374:	8b a3       	lds	r24, 0x5b
    4376:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    4378:	ce 01       	movw	r24, r28
    437a:	83 96       	adiw	r24, 0x23	; 35
    437c:	be 01       	movw	r22, r28
    437e:	6f 5f       	subi	r22, 0xFF	; 255
    4380:	7f 4f       	sbci	r23, 0xFF	; 255
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
    4388:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    438a:	88 23       	and	r24, r24
    438c:	c1 f4       	brne	.+48     	; 0x43be <f_stat+0x66>
		INIT_BUF(dj);
    438e:	ce 01       	movw	r24, r28
    4390:	47 96       	adiw	r24, 0x17	; 23
    4392:	9e 8b       	std	Y+22, r25	; 0x16
    4394:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    4396:	6b a1       	lds	r22, 0x4b
    4398:	7c a1       	lds	r23, 0x4c
    439a:	ce 01       	movw	r24, r28
    439c:	01 96       	adiw	r24, 0x01	; 1
    439e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
    43a2:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    43a4:	88 23       	and	r24, r24
    43a6:	59 f4       	brne	.+22     	; 0x43be <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    43a8:	8b 89       	ldd	r24, Y+19	; 0x13
    43aa:	9c 89       	ldd	r25, Y+20	; 0x14
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	31 f0       	breq	.+12     	; 0x43bc <f_stat+0x64>
				get_fileinfo(&dj, fno);
    43b0:	ce 01       	movw	r24, r28
    43b2:	01 96       	adiw	r24, 0x01	; 1
    43b4:	b7 01       	movw	r22, r14
    43b6:	0e 94 92 09 	call	0x1324	; 0x1324 <get_fileinfo>
    43ba:	01 c0       	rjmp	.+2      	; 0x43be <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    43bc:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    43be:	81 2f       	mov	r24, r17
    43c0:	a4 96       	adiw	r28, 0x24	; 36
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	1f 91       	pop	r17
    43d2:	ff 90       	pop	r15
    43d4:	ef 90       	pop	r14
    43d6:	08 95       	ret

000043d8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    43d8:	2f 92       	push	r2
    43da:	3f 92       	push	r3
    43dc:	4f 92       	push	r4
    43de:	5f 92       	push	r5
    43e0:	6f 92       	push	r6
    43e2:	7f 92       	push	r7
    43e4:	8f 92       	push	r8
    43e6:	9f 92       	push	r9
    43e8:	af 92       	push	r10
    43ea:	bf 92       	push	r11
    43ec:	cf 92       	push	r12
    43ee:	df 92       	push	r13
    43f0:	ef 92       	push	r14
    43f2:	ff 92       	push	r15
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	2c 97       	sbiw	r28, 0x0c	; 12
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	9a 83       	std	Y+2, r25	; 0x02
    440e:	89 83       	std	Y+1, r24	; 0x01
    4410:	1b 01       	movw	r2, r22
    4412:	8a 01       	movw	r16, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4414:	ce 01       	movw	r24, r28
    4416:	01 96       	adiw	r24, 0x01	; 1
    4418:	ba 01       	movw	r22, r20
    441a:	40 e0       	ldi	r20, 0x00	; 0
    441c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
    4420:	b8 2e       	mov	r11, r24
	fs = *fatfs;
    4422:	d8 01       	movw	r26, r16
    4424:	0d 91       	ld	r16, X+
    4426:	1c 91       	ld	r17, X
    4428:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    442a:	88 23       	and	r24, r24
    442c:	09 f0       	breq	.+2      	; 0x4430 <f_getfree+0x58>
    442e:	02 c1       	rjmp	.+516    	; 0x4634 <f_getfree+0x25c>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    4430:	f8 01       	movw	r30, r16
    4432:	86 85       	ldd	r24, Z+14	; 0x0e
    4434:	97 85       	ldd	r25, Z+15	; 0x0f
    4436:	a0 89       	ldd	r26, Z+16	; 0x10
    4438:	b1 89       	ldd	r27, Z+17	; 0x11
    443a:	c2 8c       	ldd	r12, Z+26	; 0x1a
    443c:	d3 8c       	ldd	r13, Z+27	; 0x1b
    443e:	e4 8c       	ldd	r14, Z+28	; 0x1c
    4440:	f5 8c       	ldd	r15, Z+29	; 0x1d
    4442:	b7 01       	movw	r22, r14
    4444:	a6 01       	movw	r20, r12
    4446:	42 50       	subi	r20, 0x02	; 2
    4448:	50 40       	sbci	r21, 0x00	; 0
    444a:	60 40       	sbci	r22, 0x00	; 0
    444c:	70 40       	sbci	r23, 0x00	; 0
    444e:	48 17       	cp	r20, r24
    4450:	59 07       	cpc	r21, r25
    4452:	6a 07       	cpc	r22, r26
    4454:	7b 07       	cpc	r23, r27
    4456:	30 f0       	brcs	.+12     	; 0x4464 <f_getfree+0x8c>
			*nclst = fs->free_clust;
    4458:	f1 01       	movw	r30, r2
    445a:	80 83       	st	Z, r24
    445c:	91 83       	std	Z+1, r25	; 0x01
    445e:	a2 83       	std	Z+2, r26	; 0x02
    4460:	b3 83       	std	Z+3, r27	; 0x03
    4462:	e8 c0       	rjmp	.+464    	; 0x4634 <f_getfree+0x25c>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    4464:	a0 80       	ld	r10, Z
			n = 0;
			if (fat == FS_FAT12) {
    4466:	b1 e0       	ldi	r27, 0x01	; 1
    4468:	ab 16       	cp	r10, r27
    446a:	d9 f5       	brne	.+118    	; 0x44e2 <f_getfree+0x10a>
    446c:	cc 24       	eor	r12, r12
    446e:	dd 24       	eor	r13, r13
    4470:	76 01       	movw	r14, r12
    4472:	68 94       	set
    4474:	c1 f8       	bld	r12, 1
    4476:	44 24       	eor	r4, r4
    4478:	55 24       	eor	r5, r5
    447a:	32 01       	movw	r6, r4
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    447c:	c8 01       	movw	r24, r16
    447e:	b7 01       	movw	r22, r14
    4480:	a6 01       	movw	r20, r12
    4482:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    448a:	8f 3f       	cpi	r24, 0xFF	; 255
    448c:	ef ef       	ldi	r30, 0xFF	; 255
    448e:	9e 07       	cpc	r25, r30
    4490:	ef ef       	ldi	r30, 0xFF	; 255
    4492:	ae 07       	cpc	r26, r30
    4494:	ef ef       	ldi	r30, 0xFF	; 255
    4496:	be 07       	cpc	r27, r30
    4498:	09 f4       	brne	.+2      	; 0x449c <f_getfree+0xc4>
    449a:	ae c0       	rjmp	.+348    	; 0x45f8 <f_getfree+0x220>
					if (stat == 1) { res = FR_INT_ERR; break; }
    449c:	81 30       	cpi	r24, 0x01	; 1
    449e:	91 05       	cpc	r25, r1
    44a0:	a1 05       	cpc	r26, r1
    44a2:	b1 05       	cpc	r27, r1
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <f_getfree+0xd0>
    44a6:	ab c0       	rjmp	.+342    	; 0x45fe <f_getfree+0x226>
					if (stat == 0) n++;
    44a8:	00 97       	sbiw	r24, 0x00	; 0
    44aa:	a1 05       	cpc	r26, r1
    44ac:	b1 05       	cpc	r27, r1
    44ae:	29 f4       	brne	.+10     	; 0x44ba <f_getfree+0xe2>
    44b0:	08 94       	sec
    44b2:	41 1c       	adc	r4, r1
    44b4:	51 1c       	adc	r5, r1
    44b6:	61 1c       	adc	r6, r1
    44b8:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    44ba:	08 94       	sec
    44bc:	c1 1c       	adc	r12, r1
    44be:	d1 1c       	adc	r13, r1
    44c0:	e1 1c       	adc	r14, r1
    44c2:	f1 1c       	adc	r15, r1
    44c4:	f8 01       	movw	r30, r16
    44c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    44c8:	93 8d       	ldd	r25, Z+27	; 0x1b
    44ca:	a4 8d       	ldd	r26, Z+28	; 0x1c
    44cc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    44ce:	c8 16       	cp	r12, r24
    44d0:	d9 06       	cpc	r13, r25
    44d2:	ea 06       	cpc	r14, r26
    44d4:	fb 06       	cpc	r15, r27
    44d6:	90 f2       	brcs	.-92     	; 0x447c <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    44d8:	46 86       	std	Z+14, r4	; 0x0e
    44da:	57 86       	std	Z+15, r5	; 0x0f
    44dc:	60 8a       	std	Z+16, r6	; 0x10
    44de:	71 8a       	std	Z+17, r7	; 0x11
    44e0:	a4 c0       	rjmp	.+328    	; 0x462a <f_getfree+0x252>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    44e2:	82 a1       	lds	r24, 0x42
    44e4:	93 a1       	lds	r25, 0x43
    44e6:	a4 a1       	lds	r26, 0x44
    44e8:	b5 a1       	lds	r27, 0x45
    44ea:	8b 83       	std	Y+3, r24	; 0x03
    44ec:	9c 83       	std	Y+4, r25	; 0x04
    44ee:	ad 83       	std	Y+5, r26	; 0x05
    44f0:	be 83       	std	Y+6, r27	; 0x06
				i = 0; p = 0;
    44f2:	e0 e0       	ldi	r30, 0x00	; 0
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    44fa:	44 24       	eor	r4, r4
    44fc:	55 24       	eor	r5, r5
    44fe:	32 01       	movw	r6, r4
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
    4500:	a8 01       	movw	r20, r16
    4502:	4e 5c       	subi	r20, 0xCE	; 206
    4504:	5f 4f       	sbci	r21, 0xFF	; 255
    4506:	5a 87       	std	Y+10, r21	; 0x0a
    4508:	49 87       	std	Y+9, r20	; 0x09
						i = SS(fs);
    450a:	3c 86       	std	Y+12, r3	; 0x0c
    450c:	2b 86       	std	Y+11, r2	; 0x0b
    450e:	18 01       	movw	r2, r16
    4510:	0a 2d       	mov	r16, r10
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    4512:	21 15       	cp	r18, r1
    4514:	31 05       	cpc	r19, r1
    4516:	c9 f4       	brne	.+50     	; 0x454a <f_getfree+0x172>
						res = move_window(fs, sect++);
    4518:	c1 01       	movw	r24, r2
    451a:	4b 81       	ldd	r20, Y+3	; 0x03
    451c:	5c 81       	ldd	r21, Y+4	; 0x04
    451e:	6d 81       	ldd	r22, Y+5	; 0x05
    4520:	7e 81       	ldd	r23, Y+6	; 0x06
    4522:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
						if (res != FR_OK) break;
    4526:	88 23       	and	r24, r24
    4528:	09 f0       	breq	.+2      	; 0x452c <f_getfree+0x154>
    452a:	6d c0       	rjmp	.+218    	; 0x4606 <f_getfree+0x22e>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    452c:	8b 81       	ldd	r24, Y+3	; 0x03
    452e:	9c 81       	ldd	r25, Y+4	; 0x04
    4530:	ad 81       	ldd	r26, Y+5	; 0x05
    4532:	be 81       	ldd	r27, Y+6	; 0x06
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	a1 1d       	adc	r26, r1
    4538:	b1 1d       	adc	r27, r1
    453a:	8b 83       	std	Y+3, r24	; 0x03
    453c:	9c 83       	std	Y+4, r25	; 0x04
    453e:	ad 83       	std	Y+5, r26	; 0x05
    4540:	be 83       	std	Y+6, r27	; 0x06
						if (res != FR_OK) break;
						p = fs->win;
    4542:	e9 85       	ldd	r30, Y+9	; 0x09
    4544:	fa 85       	ldd	r31, Y+10	; 0x0a
						i = SS(fs);
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    454a:	02 30       	cpi	r16, 0x02	; 2
    454c:	a1 f4       	brne	.+40     	; 0x4576 <f_getfree+0x19e>
						if (LD_WORD(p) == 0) n++;
    454e:	91 81       	ldd	r25, Z+1	; 0x01
    4550:	98 87       	std	Y+8, r25	; 0x08
    4552:	1f 82       	std	Y+7, r1	; 0x07
    4554:	80 81       	ld	r24, Z
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	af 81       	ldd	r26, Y+7	; 0x07
    455a:	b8 85       	ldd	r27, Y+8	; 0x08
    455c:	8a 2b       	or	r24, r26
    455e:	9b 2b       	or	r25, r27
    4560:	00 97       	sbiw	r24, 0x00	; 0
    4562:	29 f4       	brne	.+10     	; 0x456e <f_getfree+0x196>
    4564:	08 94       	sec
    4566:	41 1c       	adc	r4, r1
    4568:	51 1c       	adc	r5, r1
    456a:	61 1c       	adc	r6, r1
    456c:	71 1c       	adc	r7, r1
						p += 2; i -= 2;
    456e:	32 96       	adiw	r30, 0x02	; 2
    4570:	22 50       	subi	r18, 0x02	; 2
    4572:	30 40       	sbci	r19, 0x00	; 0
    4574:	31 c0       	rjmp	.+98     	; 0x45d8 <f_getfree+0x200>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    4576:	83 81       	ldd	r24, Z+3	; 0x03
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	a0 e0       	ldi	r26, 0x00	; 0
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	78 2f       	mov	r23, r24
    4580:	66 27       	eor	r22, r22
    4582:	55 27       	eor	r21, r21
    4584:	44 27       	eor	r20, r20
    4586:	82 81       	ldd	r24, Z+2	; 0x02
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	a0 e0       	ldi	r26, 0x00	; 0
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	dc 01       	movw	r26, r24
    4590:	99 27       	eor	r25, r25
    4592:	88 27       	eor	r24, r24
    4594:	48 2b       	or	r20, r24
    4596:	59 2b       	or	r21, r25
    4598:	6a 2b       	or	r22, r26
    459a:	7b 2b       	or	r23, r27
    459c:	80 81       	ld	r24, Z
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	a0 e0       	ldi	r26, 0x00	; 0
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	84 2b       	or	r24, r20
    45a6:	95 2b       	or	r25, r21
    45a8:	a6 2b       	or	r26, r22
    45aa:	b7 2b       	or	r27, r23
    45ac:	91 80       	ldd	r9, Z+1	; 0x01
    45ae:	88 24       	eor	r8, r8
    45b0:	a4 01       	movw	r20, r8
    45b2:	60 e0       	ldi	r22, 0x00	; 0
    45b4:	70 e0       	ldi	r23, 0x00	; 0
    45b6:	84 2b       	or	r24, r20
    45b8:	95 2b       	or	r25, r21
    45ba:	a6 2b       	or	r26, r22
    45bc:	b7 2b       	or	r27, r23
    45be:	bf 70       	andi	r27, 0x0F	; 15
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	a1 05       	cpc	r26, r1
    45c4:	b1 05       	cpc	r27, r1
    45c6:	29 f4       	brne	.+10     	; 0x45d2 <f_getfree+0x1fa>
    45c8:	08 94       	sec
    45ca:	41 1c       	adc	r4, r1
    45cc:	51 1c       	adc	r5, r1
    45ce:	61 1c       	adc	r6, r1
    45d0:	71 1c       	adc	r7, r1
						p += 4; i -= 4;
    45d2:	34 96       	adiw	r30, 0x04	; 4
    45d4:	24 50       	subi	r18, 0x04	; 4
    45d6:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    45d8:	08 94       	sec
    45da:	c1 08       	sbc	r12, r1
    45dc:	d1 08       	sbc	r13, r1
    45de:	e1 08       	sbc	r14, r1
    45e0:	f1 08       	sbc	r15, r1
    45e2:	c1 14       	cp	r12, r1
    45e4:	d1 04       	cpc	r13, r1
    45e6:	e1 04       	cpc	r14, r1
    45e8:	f1 04       	cpc	r15, r1
    45ea:	09 f0       	breq	.+2      	; 0x45ee <f_getfree+0x216>
    45ec:	92 cf       	rjmp	.-220    	; 0x4512 <f_getfree+0x13a>
    45ee:	a0 2e       	mov	r10, r16
    45f0:	81 01       	movw	r16, r2
    45f2:	2b 84       	ldd	r2, Y+11	; 0x0b
    45f4:	3c 84       	ldd	r3, Y+12	; 0x0c
    45f6:	0c c0       	rjmp	.+24     	; 0x4610 <f_getfree+0x238>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    45f8:	bb 24       	eor	r11, r11
    45fa:	b3 94       	inc	r11
    45fc:	09 c0       	rjmp	.+18     	; 0x4610 <f_getfree+0x238>
					if (stat == 1) { res = FR_INT_ERR; break; }
    45fe:	bb 24       	eor	r11, r11
    4600:	68 94       	set
    4602:	b1 f8       	bld	r11, 1
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <f_getfree+0x238>
    4606:	a0 2e       	mov	r10, r16
    4608:	81 01       	movw	r16, r2
    460a:	2b 84       	ldd	r2, Y+11	; 0x0b
    460c:	3c 84       	ldd	r3, Y+12	; 0x0c
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    460e:	b8 2e       	mov	r11, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    4610:	f8 01       	movw	r30, r16
    4612:	46 86       	std	Z+14, r4	; 0x0e
    4614:	57 86       	std	Z+15, r5	; 0x0f
    4616:	60 8a       	std	Z+16, r6	; 0x10
    4618:	71 8a       	std	Z+17, r7	; 0x11
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    461a:	f3 e0       	ldi	r31, 0x03	; 3
    461c:	af 16       	cp	r10, r31
    461e:	29 f4       	brne	.+10     	; 0x462a <f_getfree+0x252>
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	d8 01       	movw	r26, r16
    4624:	15 96       	adiw	r26, 0x05	; 5
    4626:	8c 93       	st	X, r24
    4628:	15 97       	sbiw	r26, 0x05	; 5
			*nclst = n;
    462a:	f1 01       	movw	r30, r2
    462c:	40 82       	st	Z, r4
    462e:	51 82       	std	Z+1, r5	; 0x01
    4630:	62 82       	std	Z+2, r6	; 0x02
    4632:	73 82       	std	Z+3, r7	; 0x03
		}
	}
	LEAVE_FF(fs, res);
}
    4634:	8b 2d       	mov	r24, r11
    4636:	2c 96       	adiw	r28, 0x0c	; 12
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	ff 90       	pop	r15
    464c:	ef 90       	pop	r14
    464e:	df 90       	pop	r13
    4650:	cf 90       	pop	r12
    4652:	bf 90       	pop	r11
    4654:	af 90       	pop	r10
    4656:	9f 90       	pop	r9
    4658:	8f 90       	pop	r8
    465a:	7f 90       	pop	r7
    465c:	6f 90       	pop	r6
    465e:	5f 90       	pop	r5
    4660:	4f 90       	pop	r4
    4662:	3f 90       	pop	r3
    4664:	2f 90       	pop	r2
    4666:	08 95       	ret

00004668 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	09 f4       	brne	.+2      	; 0x4680 <f_truncate+0x18>
    467e:	69 c0       	rjmp	.+210    	; 0x4752 <f_truncate+0xea>

	res = validate(fp);						/* Check validity of the object */
    4680:	0e 94 24 0a 	call	0x1448	; 0x1448 <validate>
	if (res == FR_OK) {
    4684:	88 23       	and	r24, r24
    4686:	09 f0       	breq	.+2      	; 0x468a <f_truncate+0x22>
    4688:	65 c0       	rjmp	.+202    	; 0x4754 <f_truncate+0xec>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    468a:	9c 81       	ldd	r25, Y+4	; 0x04
    468c:	99 23       	and	r25, r25
    468e:	24 f0       	brlt	.+8      	; 0x4698 <f_truncate+0x30>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    4690:	91 fd       	sbrc	r25, 1
    4692:	69 c0       	rjmp	.+210    	; 0x4766 <f_truncate+0xfe>
				res = FR_DENIED;
    4694:	87 e0       	ldi	r24, 0x07	; 7
    4696:	5e c0       	rjmp	.+188    	; 0x4754 <f_truncate+0xec>
	if (!fp) return FR_INVALID_OBJECT;

	res = validate(fp);						/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    4698:	82 e0       	ldi	r24, 0x02	; 2
    469a:	5c c0       	rjmp	.+184    	; 0x4754 <f_truncate+0xec>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    469c:	4a 87       	std	Y+10, r20	; 0x0a
    469e:	5b 87       	std	Y+11, r21	; 0x0b
    46a0:	6c 87       	std	Y+12, r22	; 0x0c
    46a2:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    46a4:	8c 81       	ldd	r24, Y+4	; 0x04
    46a6:	80 62       	ori	r24, 0x20	; 32
    46a8:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    46aa:	41 15       	cp	r20, r1
    46ac:	51 05       	cpc	r21, r1
    46ae:	61 05       	cpc	r22, r1
    46b0:	71 05       	cpc	r23, r1
    46b2:	69 f4       	brne	.+26     	; 0x46ce <f_truncate+0x66>
				res = remove_chain(fp->fs, fp->sclust);
    46b4:	4e 85       	ldd	r20, Y+14	; 0x0e
    46b6:	5f 85       	ldd	r21, Y+15	; 0x0f
    46b8:	68 89       	ldd	r22, Y+16	; 0x10
    46ba:	79 89       	ldd	r23, Y+17	; 0x11
    46bc:	88 81       	ld	r24, Y
    46be:	99 81       	ldd	r25, Y+1	; 0x01
    46c0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <remove_chain>
				fp->sclust = 0;
    46c4:	1e 86       	std	Y+14, r1	; 0x0e
    46c6:	1f 86       	std	Y+15, r1	; 0x0f
    46c8:	18 8a       	std	Y+16, r1	; 0x10
    46ca:	19 8a       	std	Y+17, r1	; 0x11
    46cc:	3c c0       	rjmp	.+120    	; 0x4746 <f_truncate+0xde>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    46ce:	4a 89       	ldd	r20, Y+18	; 0x12
    46d0:	5b 89       	ldd	r21, Y+19	; 0x13
    46d2:	6c 89       	ldd	r22, Y+20	; 0x14
    46d4:	7d 89       	ldd	r23, Y+21	; 0x15
    46d6:	88 81       	ld	r24, Y
    46d8:	99 81       	ldd	r25, Y+1	; 0x01
    46da:	0e 94 9e 10 	call	0x213c	; 0x213c <get_fat>
    46de:	6b 01       	movw	r12, r22
    46e0:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	c8 16       	cp	r12, r24
    46e6:	d1 04       	cpc	r13, r1
    46e8:	e1 04       	cpc	r14, r1
    46ea:	f1 04       	cpc	r15, r1
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <f_truncate+0x88>
    46ee:	4a c0       	rjmp	.+148    	; 0x4784 <f_truncate+0x11c>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	9f ef       	ldi	r25, 0xFF	; 255
    46f4:	c9 16       	cp	r12, r25
    46f6:	9f ef       	ldi	r25, 0xFF	; 255
    46f8:	d9 06       	cpc	r13, r25
    46fa:	9f ef       	ldi	r25, 0xFF	; 255
    46fc:	e9 06       	cpc	r14, r25
    46fe:	9f ef       	ldi	r25, 0xFF	; 255
    4700:	f9 06       	cpc	r15, r25
    4702:	09 f0       	breq	.+2      	; 0x4706 <f_truncate+0x9e>
    4704:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    4706:	88 23       	and	r24, r24
    4708:	01 f5       	brne	.+64     	; 0x474a <f_truncate+0xe2>
    470a:	e8 81       	ld	r30, Y
    470c:	f9 81       	ldd	r31, Y+1	; 0x01
    470e:	42 8d       	ldd	r20, Z+26	; 0x1a
    4710:	53 8d       	ldd	r21, Z+27	; 0x1b
    4712:	64 8d       	ldd	r22, Z+28	; 0x1c
    4714:	75 8d       	ldd	r23, Z+29	; 0x1d
    4716:	c4 16       	cp	r12, r20
    4718:	d5 06       	cpc	r13, r21
    471a:	e6 06       	cpc	r14, r22
    471c:	f7 06       	cpc	r15, r23
    471e:	d0 f4       	brcc	.+52     	; 0x4754 <f_truncate+0xec>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    4720:	4a 89       	ldd	r20, Y+18	; 0x12
    4722:	5b 89       	ldd	r21, Y+19	; 0x13
    4724:	6c 89       	ldd	r22, Y+20	; 0x14
    4726:	7d 89       	ldd	r23, Y+21	; 0x15
    4728:	cf 01       	movw	r24, r30
    472a:	0f ef       	ldi	r16, 0xFF	; 255
    472c:	1f ef       	ldi	r17, 0xFF	; 255
    472e:	2f ef       	ldi	r18, 0xFF	; 255
    4730:	3f e0       	ldi	r19, 0x0F	; 15
    4732:	0e 94 8d 12 	call	0x251a	; 0x251a <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4736:	88 23       	and	r24, r24
    4738:	41 f4       	brne	.+16     	; 0x474a <f_truncate+0xe2>
    473a:	88 81       	ld	r24, Y
    473c:	99 81       	ldd	r25, Y+1	; 0x01
    473e:	b7 01       	movw	r22, r14
    4740:	a6 01       	movw	r20, r12
    4742:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    4746:	88 23       	and	r24, r24
    4748:	29 f0       	breq	.+10     	; 0x4754 <f_truncate+0xec>
    474a:	9c 81       	ldd	r25, Y+4	; 0x04
    474c:	90 68       	ori	r25, 0x80	; 128
    474e:	9c 83       	std	Y+4, r25	; 0x04
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <f_truncate+0xec>
{
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    4752:	89 e0       	ldi	r24, 0x09	; 9
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	ff 90       	pop	r15
    475e:	ef 90       	pop	r14
    4760:	df 90       	pop	r13
    4762:	cf 90       	pop	r12
    4764:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    4766:	4e 81       	ldd	r20, Y+6	; 0x06
    4768:	5f 81       	ldd	r21, Y+7	; 0x07
    476a:	68 85       	ldd	r22, Y+8	; 0x08
    476c:	79 85       	ldd	r23, Y+9	; 0x09
    476e:	0a 85       	ldd	r16, Y+10	; 0x0a
    4770:	1b 85       	ldd	r17, Y+11	; 0x0b
    4772:	2c 85       	ldd	r18, Y+12	; 0x0c
    4774:	3d 85       	ldd	r19, Y+13	; 0x0d
    4776:	40 17       	cp	r20, r16
    4778:	51 07       	cpc	r21, r17
    477a:	62 07       	cpc	r22, r18
    477c:	73 07       	cpc	r23, r19
    477e:	08 f4       	brcc	.+2      	; 0x4782 <f_truncate+0x11a>
    4780:	8d cf       	rjmp	.-230    	; 0x469c <f_truncate+0x34>
    4782:	e8 cf       	rjmp	.-48     	; 0x4754 <f_truncate+0xec>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    4784:	82 e0       	ldi	r24, 0x02	; 2
    4786:	e1 cf       	rjmp	.-62     	; 0x474a <f_truncate+0xe2>

00004788 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    4788:	cf 92       	push	r12
    478a:	df 92       	push	r13
    478c:	ef 92       	push	r14
    478e:	ff 92       	push	r15
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    479a:	ea 97       	sbiw	r28, 0x3a	; 58
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	f8 94       	cli
    47a0:	de bf       	out	0x3e, r29	; 62
    47a2:	0f be       	out	0x3f, r0	; 63
    47a4:	cd bf       	out	0x3d, r28	; 61
    47a6:	9a af       	sts	0x7a, r25
    47a8:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    47aa:	ce 01       	movw	r24, r28
    47ac:	c9 96       	adiw	r24, 0x39	; 57
    47ae:	be 01       	movw	r22, r28
    47b0:	6f 5f       	subi	r22, 0xFF	; 255
    47b2:	7f 4f       	sbci	r23, 0xFF	; 255
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
	if (res == FR_OK) {
    47ba:	88 23       	and	r24, r24
    47bc:	09 f0       	breq	.+2      	; 0x47c0 <f_unlink+0x38>
    47be:	61 c0       	rjmp	.+194    	; 0x4882 <f_unlink+0xfa>
		INIT_BUF(dj);
    47c0:	ce 01       	movw	r24, r28
    47c2:	8d 96       	adiw	r24, 0x2d	; 45
    47c4:	9e 8b       	std	Y+22, r25	; 0x16
    47c6:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    47c8:	69 ad       	sts	0x69, r22
    47ca:	7a ad       	sts	0x6a, r23
    47cc:	ce 01       	movw	r24, r28
    47ce:	01 96       	adiw	r24, 0x01	; 1
    47d0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    47d4:	88 23       	and	r24, r24
    47d6:	09 f0       	breq	.+2      	; 0x47da <f_unlink+0x52>
    47d8:	54 c0       	rjmp	.+168    	; 0x4882 <f_unlink+0xfa>
    47da:	ed 89       	ldd	r30, Y+21	; 0x15
    47dc:	fe 89       	ldd	r31, Y+22	; 0x16
    47de:	83 85       	ldd	r24, Z+11	; 0x0b
    47e0:	85 ff       	sbrs	r24, 5
    47e2:	5d c0       	rjmp	.+186    	; 0x489e <f_unlink+0x116>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    47e4:	86 e0       	ldi	r24, 0x06	; 6
    47e6:	4d c0       	rjmp	.+154    	; 0x4882 <f_unlink+0xfa>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    47e8:	fb 01       	movw	r30, r22
    47ea:	13 85       	ldd	r17, Z+11	; 0x0b
    47ec:	10 ff       	sbrs	r17, 0
    47ee:	5e c0       	rjmp	.+188    	; 0x48ac <f_unlink+0x124>
					res = FR_DENIED;		/* Cannot remove R/O object */
    47f0:	87 e0       	ldi	r24, 0x07	; 7
    47f2:	47 c0       	rjmp	.+142    	; 0x4882 <f_unlink+0xfa>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    47f4:	86 e0       	ldi	r24, 0x06	; 6
    47f6:	45 c0       	rjmp	.+138    	; 0x4882 <f_unlink+0xfa>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    47f8:	f2 e0       	ldi	r31, 0x02	; 2
    47fa:	cf 16       	cp	r12, r31
    47fc:	d1 04       	cpc	r13, r1
    47fe:	e1 04       	cpc	r14, r1
    4800:	f1 04       	cpc	r15, r1
    4802:	08 f4       	brcc	.+2      	; 0x4806 <f_unlink+0x7e>
    4804:	5c c0       	rjmp	.+184    	; 0x48be <f_unlink+0x136>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
    4806:	ce 01       	movw	r24, r28
    4808:	47 96       	adiw	r24, 0x17	; 23
    480a:	be 01       	movw	r22, r28
    480c:	6f 5f       	subi	r22, 0xFF	; 255
    480e:	7f 4f       	sbci	r23, 0xFF	; 255
    4810:	46 e1       	ldi	r20, 0x16	; 22
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
					sdj.sclust = dclst;
    4818:	cd 8e       	std	Y+29, r12	; 0x1d
    481a:	de 8e       	std	Y+30, r13	; 0x1e
    481c:	ef 8e       	std	Y+31, r14	; 0x1f
    481e:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    4820:	ce 01       	movw	r24, r28
    4822:	47 96       	adiw	r24, 0x17	; 23
    4824:	62 e0       	ldi	r22, 0x02	; 2
    4826:	70 e0       	ldi	r23, 0x00	; 0
    4828:	0e 94 aa 11 	call	0x2354	; 0x2354 <dir_sdi>
					if (res == FR_OK) {
    482c:	88 23       	and	r24, r24
    482e:	49 f5       	brne	.+82     	; 0x4882 <f_unlink+0xfa>
						res = dir_read(&sdj);
    4830:	ce 01       	movw	r24, r28
    4832:	47 96       	adiw	r24, 0x17	; 23
    4834:	0e 94 2b 18 	call	0x3056	; 0x3056 <dir_read>
						if (res == FR_OK		/* Not empty dir */
    4838:	88 23       	and	r24, r24
    483a:	71 f0       	breq	.+28     	; 0x4858 <f_unlink+0xd0>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    483c:	e9 81       	ldd	r30, Y+1	; 0x01
    483e:	fa 81       	ldd	r31, Y+2	; 0x02
    4840:	46 89       	ldd	r20, Z+22	; 0x16
    4842:	57 89       	ldd	r21, Z+23	; 0x17
    4844:	60 8d       	ldd	r22, Z+24	; 0x18
    4846:	71 8d       	ldd	r23, Z+25	; 0x19
    4848:	4c 15       	cp	r20, r12
    484a:	5d 05       	cpc	r21, r13
    484c:	6e 05       	cpc	r22, r14
    484e:	7f 05       	cpc	r23, r15
    4850:	29 f0       	breq	.+10     	; 0x485c <f_unlink+0xd4>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    4852:	84 30       	cpi	r24, 0x04	; 4
    4854:	b1 f1       	breq	.+108    	; 0x48c2 <f_unlink+0x13a>
    4856:	15 c0       	rjmp	.+42     	; 0x4882 <f_unlink+0xfa>
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK		/* Not empty dir */
    4858:	87 e0       	ldi	r24, 0x07	; 7
    485a:	13 c0       	rjmp	.+38     	; 0x4882 <f_unlink+0xfa>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    485c:	87 e0       	ldi	r24, 0x07	; 7
    485e:	11 c0       	rjmp	.+34     	; 0x4882 <f_unlink+0xfa>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    4860:	c1 14       	cp	r12, r1
    4862:	d1 04       	cpc	r13, r1
    4864:	e1 04       	cpc	r14, r1
    4866:	f1 04       	cpc	r15, r1
    4868:	41 f0       	breq	.+16     	; 0x487a <f_unlink+0xf2>
						res = remove_chain(dj.fs, dclst);
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	b7 01       	movw	r22, r14
    4870:	a6 01       	movw	r20, r12
    4872:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    4876:	88 23       	and	r24, r24
    4878:	21 f4       	brne	.+8      	; 0x4882 <f_unlink+0xfa>
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	9a 81       	ldd	r25, Y+2	; 0x02
    487e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    4882:	ea 96       	adiw	r28, 0x3a	; 58
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	ff 90       	pop	r15
    4896:	ef 90       	pop	r14
    4898:	df 90       	pop	r13
    489a:	cf 90       	pop	r12
    489c:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    489e:	6b 89       	ldd	r22, Y+19	; 0x13
    48a0:	7c 89       	ldd	r23, Y+20	; 0x14
			if (!dir) {
    48a2:	61 15       	cp	r22, r1
    48a4:	71 05       	cpc	r23, r1
    48a6:	09 f0       	breq	.+2      	; 0x48aa <f_unlink+0x122>
    48a8:	9f cf       	rjmp	.-194    	; 0x47e8 <f_unlink+0x60>
    48aa:	a4 cf       	rjmp	.-184    	; 0x47f4 <f_unlink+0x6c>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	9a 81       	ldd	r25, Y+2	; 0x02
    48b0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    48b4:	6b 01       	movw	r12, r22
    48b6:	7c 01       	movw	r14, r24
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    48b8:	14 fd       	sbrc	r17, 4
    48ba:	9e cf       	rjmp	.-196    	; 0x47f8 <f_unlink+0x70>
    48bc:	02 c0       	rjmp	.+4      	; 0x48c2 <f_unlink+0x13a>
				if (dclst < 2) {
					res = FR_INT_ERR;
    48be:	82 e0       	ldi	r24, 0x02	; 2
    48c0:	e0 cf       	rjmp	.-64     	; 0x4882 <f_unlink+0xfa>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    48c2:	ce 01       	movw	r24, r28
    48c4:	01 96       	adiw	r24, 0x01	; 1
    48c6:	0e 94 6f 12 	call	0x24de	; 0x24de <dir_remove>
				if (res == FR_OK) {
    48ca:	88 23       	and	r24, r24
    48cc:	49 f2       	breq	.-110    	; 0x4860 <f_unlink+0xd8>
    48ce:	d9 cf       	rjmp	.-78     	; 0x4882 <f_unlink+0xfa>

000048d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    48d0:	2f 92       	push	r2
    48d2:	3f 92       	push	r3
    48d4:	4f 92       	push	r4
    48d6:	5f 92       	push	r5
    48d8:	6f 92       	push	r6
    48da:	7f 92       	push	r7
    48dc:	8f 92       	push	r8
    48de:	9f 92       	push	r9
    48e0:	af 92       	push	r10
    48e2:	bf 92       	push	r11
    48e4:	cf 92       	push	r12
    48e6:	df 92       	push	r13
    48e8:	ef 92       	push	r14
    48ea:	ff 92       	push	r15
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
    48f8:	a8 97       	sbiw	r28, 0x28	; 40
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	9c a3       	lds	r25, 0x5c
    4906:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    4908:	0e 94 64 10 	call	0x20c8	; 0x20c8 <get_fattime>
    490c:	6b 01       	movw	r12, r22
    490e:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4910:	ce 01       	movw	r24, r28
    4912:	83 96       	adiw	r24, 0x23	; 35
    4914:	be 01       	movw	r22, r28
    4916:	6f 5f       	subi	r22, 0xFF	; 255
    4918:	7f 4f       	sbci	r23, 0xFF	; 255
    491a:	41 e0       	ldi	r20, 0x01	; 1
    491c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
    4920:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    4922:	88 23       	and	r24, r24
    4924:	09 f0       	breq	.+2      	; 0x4928 <f_mkdir+0x58>
    4926:	ee c0       	rjmp	.+476    	; 0x4b04 <f_mkdir+0x234>
		INIT_BUF(dj);
    4928:	ce 01       	movw	r24, r28
    492a:	47 96       	adiw	r24, 0x17	; 23
    492c:	9e 8b       	std	Y+22, r25	; 0x16
    492e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    4930:	6b a1       	lds	r22, 0x4b
    4932:	7c a1       	lds	r23, 0x4c
    4934:	ce 01       	movw	r24, r28
    4936:	01 96       	adiw	r24, 0x01	; 1
    4938:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    493c:	88 23       	and	r24, r24
    493e:	49 f0       	breq	.+18     	; 0x4952 <f_mkdir+0x82>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    4940:	84 30       	cpi	r24, 0x04	; 4
    4942:	41 f4       	brne	.+16     	; 0x4954 <f_mkdir+0x84>
    4944:	ed 89       	ldd	r30, Y+21	; 0x15
    4946:	fe 89       	ldd	r31, Y+22	; 0x16
    4948:	83 85       	ldd	r24, Z+11	; 0x0b
    494a:	85 ff       	sbrs	r24, 5
    494c:	f5 c0       	rjmp	.+490    	; 0x4b38 <f_mkdir+0x268>
			res = FR_INVALID_NAME;
    494e:	86 e0       	ldi	r24, 0x06	; 6
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <f_mkdir+0x84>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    4952:	88 e0       	ldi	r24, 0x08	; 8
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    4954:	18 2f       	mov	r17, r24
    4956:	d6 c0       	rjmp	.+428    	; 0x4b04 <f_mkdir+0x234>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	48 16       	cp	r4, r24
    495c:	51 04       	cpc	r5, r1
    495e:	61 04       	cpc	r6, r1
    4960:	71 04       	cpc	r7, r1
    4962:	09 f4       	brne	.+2      	; 0x4966 <f_mkdir+0x96>
    4964:	f9 c0       	rjmp	.+498    	; 0x4b58 <f_mkdir+0x288>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4966:	ef ef       	ldi	r30, 0xFF	; 255
    4968:	4e 16       	cp	r4, r30
    496a:	ef ef       	ldi	r30, 0xFF	; 255
    496c:	5e 06       	cpc	r5, r30
    496e:	ef ef       	ldi	r30, 0xFF	; 255
    4970:	6e 06       	cpc	r6, r30
    4972:	ef ef       	ldi	r30, 0xFF	; 255
    4974:	7e 06       	cpc	r7, r30
    4976:	09 f4       	brne	.+2      	; 0x497a <f_mkdir+0xaa>
    4978:	f1 c0       	rjmp	.+482    	; 0x4b5c <f_mkdir+0x28c>
    497a:	01 c0       	rjmp	.+2      	; 0x497e <f_mkdir+0xae>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    497c:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    497e:	11 23       	and	r17, r17
    4980:	09 f0       	breq	.+2      	; 0x4984 <f_mkdir+0xb4>
    4982:	a0 c0       	rjmp	.+320    	; 0x4ac4 <f_mkdir+0x1f4>
				res = move_window(dj.fs, 0);
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	9a 81       	ldd	r25, Y+2	; 0x02
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	ba 01       	movw	r22, r20
    498e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    4992:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    4994:	88 23       	and	r24, r24
    4996:	09 f0       	breq	.+2      	; 0x499a <f_mkdir+0xca>
    4998:	95 c0       	rjmp	.+298    	; 0x4ac4 <f_mkdir+0x1f4>
				dsc = clust2sect(dj.fs, dcl);
    499a:	09 81       	ldd	r16, Y+1	; 0x01
    499c:	1a 81       	ldd	r17, Y+2	; 0x02
    499e:	c8 01       	movw	r24, r16
    49a0:	b3 01       	movw	r22, r6
    49a2:	a2 01       	movw	r20, r4
    49a4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    49a8:	4b 01       	movw	r8, r22
    49aa:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    49ac:	0f 2e       	mov	r0, r31
    49ae:	f2 e3       	ldi	r31, 0x32	; 50
    49b0:	2f 2e       	mov	r2, r31
    49b2:	33 24       	eor	r3, r3
    49b4:	f0 2d       	mov	r31, r0
    49b6:	20 0e       	add	r2, r16
    49b8:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    49ba:	c1 01       	movw	r24, r2
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	40 e0       	ldi	r20, 0x00	; 0
    49c2:	52 e0       	ldi	r21, 0x02	; 2
    49c4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    49c8:	c1 01       	movw	r24, r2
    49ca:	60 e2       	ldi	r22, 0x20	; 32
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	4b e0       	ldi	r20, 0x0B	; 11
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
				dir[DIR_Name] = '.';
    49d6:	8e e2       	ldi	r24, 0x2E	; 46
    49d8:	f8 01       	movw	r30, r16
    49da:	82 ab       	sts	0x52, r24
				dir[DIR_Attr] = AM_DIR;
    49dc:	80 e1       	ldi	r24, 0x10	; 16
    49de:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    49e0:	cd a2       	lds	r28, 0x9d
    49e2:	e8 5b       	subi	r30, 0xB8	; 184
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	c0 82       	st	Z, r12
    49e8:	8d 2d       	mov	r24, r13
    49ea:	99 27       	eor	r25, r25
    49ec:	8e a3       	lds	r24, 0x5e
    49ee:	f8 01       	movw	r30, r16
    49f0:	e7 5b       	subi	r30, 0xB7	; 183
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 83       	st	Z, r24
    49f6:	c7 01       	movw	r24, r14
    49f8:	aa 27       	eor	r26, r26
    49fa:	bb 27       	eor	r27, r27
    49fc:	8f a3       	lds	r24, 0x5f
    49fe:	f8 01       	movw	r30, r16
    4a00:	e6 5b       	subi	r30, 0xB6	; 182
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	80 83       	st	Z, r24
    4a06:	cf 2c       	mov	r12, r15
    4a08:	dd 24       	eor	r13, r13
    4a0a:	ee 24       	eor	r14, r14
    4a0c:	ff 24       	eor	r15, r15
    4a0e:	c8 a6       	lds	r28, 0xb8
    4a10:	f8 01       	movw	r30, r16
    4a12:	e5 5b       	subi	r30, 0xB5	; 181
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	c0 82       	st	Z, r12
				st_clust(dir, dcl);
    4a18:	c1 01       	movw	r24, r2
    4a1a:	b3 01       	movw	r22, r6
    4a1c:	a2 01       	movw	r20, r4
    4a1e:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    4a22:	0f 2e       	mov	r0, r31
    4a24:	f2 e5       	ldi	r31, 0x52	; 82
    4a26:	cf 2e       	mov	r12, r31
    4a28:	dd 24       	eor	r13, r13
    4a2a:	f0 2d       	mov	r31, r0
    4a2c:	c0 0e       	add	r12, r16
    4a2e:	d1 1e       	adc	r13, r17
    4a30:	c6 01       	movw	r24, r12
    4a32:	b1 01       	movw	r22, r2
    4a34:	40 e2       	ldi	r20, 0x20	; 32
    4a36:	50 e0       	ldi	r21, 0x00	; 0
    4a38:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    4a3c:	f8 01       	movw	r30, r16
    4a3e:	ed 5a       	subi	r30, 0xAD	; 173
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	8e e2       	ldi	r24, 0x2E	; 46
    4a44:	80 83       	st	Z, r24
    4a46:	4f 81       	ldd	r20, Y+7	; 0x07
    4a48:	58 85       	ldd	r21, Y+8	; 0x08
    4a4a:	69 85       	ldd	r22, Y+9	; 0x09
    4a4c:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    4a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a50:	fa 81       	ldd	r31, Y+2	; 0x02
    4a52:	80 81       	ld	r24, Z
    4a54:	83 30       	cpi	r24, 0x03	; 3
    4a56:	61 f4       	brne	.+24     	; 0x4a70 <f_mkdir+0x1a0>
    4a58:	86 a1       	lds	r24, 0x46
    4a5a:	97 a1       	lds	r25, 0x47
    4a5c:	a0 a5       	lds	r26, 0x60
    4a5e:	b1 a5       	lds	r27, 0x61
    4a60:	84 17       	cp	r24, r20
    4a62:	95 07       	cpc	r25, r21
    4a64:	a6 07       	cpc	r26, r22
    4a66:	b7 07       	cpc	r27, r23
    4a68:	19 f4       	brne	.+6      	; 0x4a70 <f_mkdir+0x1a0>
					pcl = 0;
    4a6a:	40 e0       	ldi	r20, 0x00	; 0
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	ba 01       	movw	r22, r20
				st_clust(dir+SZ_DIR, pcl);
    4a70:	c6 01       	movw	r24, r12
    4a72:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4a76:	e9 81       	ldd	r30, Y+1	; 0x01
    4a78:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7a:	02 81       	ldd	r16, Z+2	; 0x02
    4a7c:	00 23       	and	r16, r16
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <f_mkdir+0x1b2>
    4a80:	6f c0       	rjmp	.+222    	; 0x4b60 <f_mkdir+0x290>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    4a82:	cc 24       	eor	r12, r12
    4a84:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    4a86:	89 81       	ldd	r24, Y+1	; 0x01
    4a88:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	86 a6       	lds	r24, 0xb6
    4a8e:	97 a6       	lds	r25, 0xb7
    4a90:	a0 aa       	sts	0x90, r26
    4a92:	b1 aa       	sts	0x91, r27
    4a94:	08 94       	sec
    4a96:	81 1c       	adc	r8, r1
    4a98:	91 1c       	adc	r9, r1
    4a9a:	a1 1c       	adc	r10, r1
    4a9c:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    4a9e:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	50 e0       	ldi	r21, 0x00	; 0
    4aa4:	ba 01       	movw	r22, r20
    4aa6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
    4aaa:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    4aac:	88 23       	and	r24, r24
    4aae:	51 f4       	brne	.+20     	; 0x4ac4 <f_mkdir+0x1f4>
					mem_set(dir, 0, SS(dj.fs));
    4ab0:	c1 01       	movw	r24, r2
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	40 e0       	ldi	r20, 0x00	; 0
    4ab8:	52 e0       	ldi	r21, 0x02	; 2
    4aba:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4abe:	01 50       	subi	r16, 0x01	; 1
    4ac0:	11 f7       	brne	.-60     	; 0x4a86 <f_mkdir+0x1b6>
    4ac2:	4e c0       	rjmp	.+156    	; 0x4b60 <f_mkdir+0x290>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    4ac4:	89 81       	ldd	r24, Y+1	; 0x01
    4ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac8:	b3 01       	movw	r22, r6
    4aca:	a2 01       	movw	r20, r4
    4acc:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <remove_chain>
    4ad0:	19 c0       	rjmp	.+50     	; 0x4b04 <f_mkdir+0x234>
			} else {
				dir = dj.dir;
    4ad2:	eb 89       	ldd	r30, Y+19	; 0x13
    4ad4:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    4ad6:	80 e1       	ldi	r24, 0x10	; 16
    4ad8:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    4ada:	8d a1       	lds	r24, 0x4d
    4adc:	86 8b       	std	Z+22, r24	; 0x16
    4ade:	8e a1       	lds	r24, 0x4e
    4ae0:	87 8b       	std	Z+23, r24	; 0x17
    4ae2:	8f a1       	lds	r24, 0x4f
    4ae4:	80 8f       	std	Z+24, r24	; 0x18
    4ae6:	88 a5       	lds	r24, 0x68
    4ae8:	81 8f       	std	Z+25, r24	; 0x19
				st_clust(dir, dcl);					/* Table start cluster */
    4aea:	cf 01       	movw	r24, r30
    4aec:	b3 01       	movw	r22, r6
    4aee:	a2 01       	movw	r20, r4
    4af0:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
				dj.fs->wflag = 1;
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	21 e0       	ldi	r18, 0x01	; 1
    4afa:	fc 01       	movw	r30, r24
    4afc:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4afe:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
    4b02:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4b04:	81 2f       	mov	r24, r17
    4b06:	a8 96       	adiw	r28, 0x28	; 40
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	df 91       	pop	r29
    4b14:	cf 91       	pop	r28
    4b16:	1f 91       	pop	r17
    4b18:	0f 91       	pop	r16
    4b1a:	ff 90       	pop	r15
    4b1c:	ef 90       	pop	r14
    4b1e:	df 90       	pop	r13
    4b20:	cf 90       	pop	r12
    4b22:	bf 90       	pop	r11
    4b24:	af 90       	pop	r10
    4b26:	9f 90       	pop	r9
    4b28:	8f 90       	pop	r8
    4b2a:	7f 90       	pop	r7
    4b2c:	6f 90       	pop	r6
    4b2e:	5f 90       	pop	r5
    4b30:	4f 90       	pop	r4
    4b32:	3f 90       	pop	r3
    4b34:	2f 90       	pop	r2
    4b36:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    4b38:	89 81       	ldd	r24, Y+1	; 0x01
    4b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	50 e0       	ldi	r21, 0x00	; 0
    4b40:	ba 01       	movw	r22, r20
    4b42:	0e 94 7e 13 	call	0x26fc	; 0x26fc <create_chain>
    4b46:	2b 01       	movw	r4, r22
    4b48:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4b4a:	61 15       	cp	r22, r1
    4b4c:	71 05       	cpc	r23, r1
    4b4e:	81 05       	cpc	r24, r1
    4b50:	91 05       	cpc	r25, r1
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <f_mkdir+0x286>
    4b54:	13 cf       	rjmp	.-474    	; 0x497c <f_mkdir+0xac>
    4b56:	00 cf       	rjmp	.-512    	; 0x4958 <f_mkdir+0x88>
			if (dcl == 1) res = FR_INT_ERR;
    4b58:	12 e0       	ldi	r17, 0x02	; 2
    4b5a:	b4 cf       	rjmp	.-152    	; 0x4ac4 <f_mkdir+0x1f4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4b5c:	11 e0       	ldi	r17, 0x01	; 1
    4b5e:	b2 cf       	rjmp	.-156    	; 0x4ac4 <f_mkdir+0x1f4>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    4b60:	ce 01       	movw	r24, r28
    4b62:	01 96       	adiw	r24, 0x01	; 1
    4b64:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <dir_register>
    4b68:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    4b6a:	88 23       	and	r24, r24
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <f_mkdir+0x2a0>
    4b6e:	b1 cf       	rjmp	.-158    	; 0x4ad2 <f_mkdir+0x202>
    4b70:	a9 cf       	rjmp	.-174    	; 0x4ac4 <f_mkdir+0x1f4>

00004b72 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4b72:	0f 93       	push	r16
    4b74:	1f 93       	push	r17
    4b76:	cf 93       	push	r28
    4b78:	df 93       	push	r29
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
    4b7e:	a4 97       	sbiw	r28, 0x24	; 36
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	9c a3       	lds	r25, 0x5c
    4b8c:	8b a3       	lds	r24, 0x5b
    4b8e:	06 2f       	mov	r16, r22
    4b90:	14 2f       	mov	r17, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4b92:	ce 01       	movw	r24, r28
    4b94:	83 96       	adiw	r24, 0x23	; 35
    4b96:	be 01       	movw	r22, r28
    4b98:	6f 5f       	subi	r22, 0xFF	; 255
    4b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9c:	41 e0       	ldi	r20, 0x01	; 1
    4b9e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
	if (res == FR_OK) {
    4ba2:	88 23       	and	r24, r24
    4ba4:	29 f5       	brne	.+74     	; 0x4bf0 <f_chmod+0x7e>
		INIT_BUF(dj);
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	47 96       	adiw	r24, 0x17	; 23
    4baa:	9e 8b       	std	Y+22, r25	; 0x16
    4bac:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    4bae:	6b a1       	lds	r22, 0x4b
    4bb0:	7c a1       	lds	r23, 0x4c
    4bb2:	ce 01       	movw	r24, r28
    4bb4:	01 96       	adiw	r24, 0x01	; 1
    4bb6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    4bba:	88 23       	and	r24, r24
    4bbc:	c9 f4       	brne	.+50     	; 0x4bf0 <f_chmod+0x7e>
    4bbe:	ed 89       	ldd	r30, Y+21	; 0x15
    4bc0:	fe 89       	ldd	r31, Y+22	; 0x16
    4bc2:	83 85       	ldd	r24, Z+11	; 0x0b
    4bc4:	85 ff       	sbrs	r24, 5
    4bc6:	1f c0       	rjmp	.+62     	; 0x4c06 <f_chmod+0x94>
			res = FR_INVALID_NAME;
    4bc8:	86 e0       	ldi	r24, 0x06	; 6
    4bca:	12 c0       	rjmp	.+36     	; 0x4bf0 <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4bcc:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    4bce:	91 2f       	mov	r25, r17
    4bd0:	90 95       	com	r25
    4bd2:	83 85       	ldd	r24, Z+11	; 0x0b
    4bd4:	89 23       	and	r24, r25
    4bd6:	01 23       	and	r16, r17
    4bd8:	18 2f       	mov	r17, r24
    4bda:	10 2b       	or	r17, r16
    4bdc:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	21 e0       	ldi	r18, 0x01	; 1
    4be4:	fc 01       	movw	r30, r24
    4be6:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4be8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
    4bec:	01 c0       	rjmp	.+2      	; 0x4bf0 <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    4bee:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4bf0:	a4 96       	adiw	r28, 0x24	; 36
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	f8 94       	cli
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	df 91       	pop	r29
    4bfe:	cf 91       	pop	r28
    4c00:	1f 91       	pop	r17
    4c02:	0f 91       	pop	r16
    4c04:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    4c06:	eb 89       	ldd	r30, Y+19	; 0x13
    4c08:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    4c0a:	30 97       	sbiw	r30, 0x00	; 0
    4c0c:	f9 f6       	brne	.-66     	; 0x4bcc <f_chmod+0x5a>
    4c0e:	ef cf       	rjmp	.-34     	; 0x4bee <f_chmod+0x7c>

00004c10 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    4c10:	0f 93       	push	r16
    4c12:	1f 93       	push	r17
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	a4 97       	sbiw	r28, 0x24	; 36
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	9c a3       	lds	r25, 0x5c
    4c2a:	8b a3       	lds	r24, 0x5b
    4c2c:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4c2e:	ce 01       	movw	r24, r28
    4c30:	83 96       	adiw	r24, 0x23	; 35
    4c32:	be 01       	movw	r22, r28
    4c34:	6f 5f       	subi	r22, 0xFF	; 255
    4c36:	7f 4f       	sbci	r23, 0xFF	; 255
    4c38:	41 e0       	ldi	r20, 0x01	; 1
    4c3a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
	if (res == FR_OK) {
    4c3e:	88 23       	and	r24, r24
    4c40:	61 f5       	brne	.+88     	; 0x4c9a <f_utime+0x8a>
		INIT_BUF(dj);
    4c42:	ce 01       	movw	r24, r28
    4c44:	47 96       	adiw	r24, 0x17	; 23
    4c46:	9e 8b       	std	Y+22, r25	; 0x16
    4c48:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    4c4a:	6b a1       	lds	r22, 0x4b
    4c4c:	7c a1       	lds	r23, 0x4c
    4c4e:	ce 01       	movw	r24, r28
    4c50:	01 96       	adiw	r24, 0x01	; 1
    4c52:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    4c56:	88 23       	and	r24, r24
    4c58:	01 f5       	brne	.+64     	; 0x4c9a <f_utime+0x8a>
    4c5a:	ed 89       	ldd	r30, Y+21	; 0x15
    4c5c:	fe 89       	ldd	r31, Y+22	; 0x16
    4c5e:	83 85       	ldd	r24, Z+11	; 0x0b
    4c60:	85 ff       	sbrs	r24, 5
    4c62:	26 c0       	rjmp	.+76     	; 0x4cb0 <f_utime+0xa0>
			res = FR_INVALID_NAME;
    4c64:	86 e0       	ldi	r24, 0x06	; 6
    4c66:	19 c0       	rjmp	.+50     	; 0x4c9a <f_utime+0x8a>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4c68:	d8 01       	movw	r26, r16
    4c6a:	16 96       	adiw	r26, 0x06	; 6
    4c6c:	8c 91       	ld	r24, X
    4c6e:	16 97       	sbiw	r26, 0x06	; 6
    4c70:	86 8b       	std	Z+22, r24	; 0x16
    4c72:	17 96       	adiw	r26, 0x07	; 7
    4c74:	8c 91       	ld	r24, X
    4c76:	17 97       	sbiw	r26, 0x07	; 7
    4c78:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4c7a:	14 96       	adiw	r26, 0x04	; 4
    4c7c:	8c 91       	ld	r24, X
    4c7e:	14 97       	sbiw	r26, 0x04	; 4
    4c80:	80 8f       	std	Z+24, r24	; 0x18
    4c82:	15 96       	adiw	r26, 0x05	; 5
    4c84:	8c 91       	ld	r24, X
    4c86:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8c:	21 e0       	ldi	r18, 0x01	; 1
    4c8e:	fc 01       	movw	r30, r24
    4c90:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4c92:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
    4c96:	01 c0       	rjmp	.+2      	; 0x4c9a <f_utime+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    4c98:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4c9a:	a4 96       	adiw	r28, 0x24	; 36
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    4cb0:	eb 89       	ldd	r30, Y+19	; 0x13
    4cb2:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    4cb4:	30 97       	sbiw	r30, 0x00	; 0
    4cb6:	c1 f6       	brne	.-80     	; 0x4c68 <f_utime+0x58>
    4cb8:	ef cf       	rjmp	.-34     	; 0x4c98 <f_utime+0x88>

00004cba <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    4cba:	ef 92       	push	r14
    4cbc:	ff 92       	push	r15
    4cbe:	0f 93       	push	r16
    4cc0:	1f 93       	push	r17
    4cc2:	cf 93       	push	r28
    4cc4:	df 93       	push	r29
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	cf 54       	subi	r28, 0x4F	; 79
    4ccc:	d0 40       	sbci	r29, 0x00	; 0
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	60 96       	adiw	r28, 0x10	; 16
    4cda:	9f af       	sts	0x7f, r25
    4cdc:	8e af       	sts	0x7e, r24
    4cde:	60 97       	sbiw	r28, 0x10	; 16
    4ce0:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	82 5b       	subi	r24, 0xB2	; 178
    4ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce8:	be 01       	movw	r22, r28
    4cea:	6f 5f       	subi	r22, 0xFF	; 255
    4cec:	7f 4f       	sbci	r23, 0xFF	; 255
    4cee:	41 e0       	ldi	r20, 0x01	; 1
    4cf0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <chk_mounted>
	if (res == FR_OK) {
    4cf4:	88 23       	and	r24, r24
    4cf6:	09 f0       	breq	.+2      	; 0x4cfa <f_rename+0x40>
    4cf8:	b1 c0       	rjmp	.+354    	; 0x4e5c <f_rename+0x1a2>
		djn.fs = djo.fs;
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfe:	98 8f       	std	Y+24, r25	; 0x18
    4d00:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    4d02:	ce 01       	movw	r24, r28
    4d04:	8e 5b       	subi	r24, 0xBE	; 190
    4d06:	9f 4f       	sbci	r25, 0xFF	; 255
    4d08:	9e 8b       	std	Y+22, r25	; 0x16
    4d0a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    4d0c:	60 96       	adiw	r28, 0x10	; 16
    4d0e:	6e ad       	sts	0x6e, r22
    4d10:	7f ad       	sts	0x6f, r23
    4d12:	60 97       	sbiw	r28, 0x10	; 16
    4d14:	ce 01       	movw	r24, r28
    4d16:	01 96       	adiw	r24, 0x01	; 1
    4d18:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    4d1c:	88 23       	and	r24, r24
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <f_rename+0x68>
    4d20:	9d c0       	rjmp	.+314    	; 0x4e5c <f_rename+0x1a2>
    4d22:	ed 89       	ldd	r30, Y+21	; 0x15
    4d24:	fe 89       	ldd	r31, Y+22	; 0x16
    4d26:	83 85       	ldd	r24, Z+11	; 0x0b
    4d28:	85 ff       	sbrs	r24, 5
    4d2a:	a6 c0       	rjmp	.+332    	; 0x4e78 <f_rename+0x1be>
			res = FR_INVALID_NAME;
    4d2c:	86 e0       	ldi	r24, 0x06	; 6
    4d2e:	96 c0       	rjmp	.+300    	; 0x4e5c <f_rename+0x1a2>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    4d30:	65 5f       	subi	r22, 0xF5	; 245
    4d32:	7f 4f       	sbci	r23, 0xFF	; 255
    4d34:	ce 01       	movw	r24, r28
    4d36:	8d 96       	adiw	r24, 0x2d	; 45
    4d38:	45 e1       	ldi	r20, 0x15	; 21
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
    4d40:	ce 01       	movw	r24, r28
    4d42:	47 96       	adiw	r24, 0x17	; 23
    4d44:	be 01       	movw	r22, r28
    4d46:	6f 5f       	subi	r22, 0xFF	; 255
    4d48:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4a:	46 e1       	ldi	r20, 0x16	; 22
    4d4c:	50 e0       	ldi	r21, 0x00	; 0
    4d4e:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
				res = follow_path(&djn, path_new);
    4d52:	ce 01       	movw	r24, r28
    4d54:	47 96       	adiw	r24, 0x17	; 23
    4d56:	b8 01       	movw	r22, r16
    4d58:	0e 94 e5 15 	call	0x2bca	; 0x2bca <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    4d5c:	88 23       	and	r24, r24
    4d5e:	09 f4       	brne	.+2      	; 0x4d62 <f_rename+0xa8>
    4d60:	7a c0       	rjmp	.+244    	; 0x4e56 <f_rename+0x19c>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    4d62:	84 30       	cpi	r24, 0x04	; 4
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <f_rename+0xae>
    4d66:	7a c0       	rjmp	.+244    	; 0x4e5c <f_rename+0x1a2>
/* Start critical section that an interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    4d68:	ce 01       	movw	r24, r28
    4d6a:	47 96       	adiw	r24, 0x17	; 23
    4d6c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <dir_register>
					if (res == FR_OK) {
    4d70:	88 23       	and	r24, r24
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <f_rename+0xbc>
    4d74:	73 c0       	rjmp	.+230    	; 0x4e5c <f_rename+0x1a2>
						dir = djn.dir;					/* Copy object information except for name */
    4d76:	09 a5       	lds	r16, 0x69
    4d78:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    4d7a:	c8 01       	movw	r24, r16
    4d7c:	0d 96       	adiw	r24, 0x0d	; 13
    4d7e:	be 01       	movw	r22, r28
    4d80:	61 5d       	subi	r22, 0xD1	; 209
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	43 e1       	ldi	r20, 0x13	; 19
    4d86:	50 e0       	ldi	r21, 0x00	; 0
    4d88:	0e 94 4d 09 	call	0x129a	; 0x129a <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    4d8c:	8d a5       	lds	r24, 0x6d
    4d8e:	80 62       	ori	r24, 0x20	; 32
    4d90:	f8 01       	movw	r30, r16
    4d92:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    4d94:	e9 80       	ldd	r14, Y+1	; 0x01
    4d96:	fa 80       	ldd	r15, Y+2	; 0x02
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	f7 01       	movw	r30, r14
    4d9c:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    4d9e:	4f 81       	ldd	r20, Y+7	; 0x07
    4da0:	58 85       	ldd	r21, Y+8	; 0x08
    4da2:	69 85       	ldd	r22, Y+9	; 0x09
    4da4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4da8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4daa:	af 8d       	ldd	r26, Y+31	; 0x1f
    4dac:	b8 a1       	lds	r27, 0x48
    4dae:	48 17       	cp	r20, r24
    4db0:	59 07       	cpc	r21, r25
    4db2:	6a 07       	cpc	r22, r26
    4db4:	7b 07       	cpc	r23, r27
    4db6:	09 f4       	brne	.+2      	; 0x4dba <f_rename+0x100>
    4db8:	43 c0       	rjmp	.+134    	; 0x4e40 <f_rename+0x186>
    4dba:	f8 01       	movw	r30, r16
    4dbc:	83 85       	ldd	r24, Z+11	; 0x0b
    4dbe:	84 ff       	sbrs	r24, 4
    4dc0:	3f c0       	rjmp	.+126    	; 0x4e40 <f_rename+0x186>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    4dc2:	c7 01       	movw	r24, r14
    4dc4:	b8 01       	movw	r22, r16
    4dc6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ld_clust>
    4dca:	ab 01       	movw	r20, r22
    4dcc:	bc 01       	movw	r22, r24
    4dce:	c7 01       	movw	r24, r14
    4dd0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <clust2sect>
    4dd4:	ab 01       	movw	r20, r22
    4dd6:	bc 01       	movw	r22, r24
							if (!dw) {
    4dd8:	41 15       	cp	r20, r1
    4dda:	51 05       	cpc	r21, r1
    4ddc:	61 05       	cpc	r22, r1
    4dde:	71 05       	cpc	r23, r1
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <f_rename+0x12a>
    4de2:	51 c0       	rjmp	.+162    	; 0x4e86 <f_rename+0x1cc>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    4de4:	c7 01       	movw	r24, r14
    4de6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    4dea:	e9 81       	ldd	r30, Y+1	; 0x01
    4dec:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    4dee:	88 23       	and	r24, r24
    4df0:	a9 f5       	brne	.+106    	; 0x4e5c <f_rename+0x1a2>
    4df2:	df 01       	movw	r26, r30
    4df4:	ad 5a       	subi	r26, 0xAD	; 173
    4df6:	bf 4f       	sbci	r27, 0xFF	; 255
    4df8:	8c 91       	ld	r24, X
    4dfa:	8e 32       	cpi	r24, 0x2E	; 46
    4dfc:	09 f5       	brne	.+66     	; 0x4e40 <f_rename+0x186>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    4dfe:	80 81       	ld	r24, Z
    4e00:	83 30       	cpi	r24, 0x03	; 3
    4e02:	69 f4       	brne	.+26     	; 0x4e1e <f_rename+0x164>
    4e04:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4e06:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4e08:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4e0a:	78 a1       	lds	r23, 0x48
    4e0c:	86 a1       	lds	r24, 0x46
    4e0e:	97 a1       	lds	r25, 0x47
    4e10:	a0 a5       	lds	r26, 0x60
    4e12:	b1 a5       	lds	r27, 0x61
    4e14:	48 17       	cp	r20, r24
    4e16:	59 07       	cpc	r21, r25
    4e18:	6a 07       	cpc	r22, r26
    4e1a:	7b 07       	cpc	r23, r27
    4e1c:	29 f0       	breq	.+10     	; 0x4e28 <f_rename+0x16e>
    4e1e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4e20:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4e22:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4e24:	78 a1       	lds	r23, 0x48
    4e26:	03 c0       	rjmp	.+6      	; 0x4e2e <f_rename+0x174>
    4e28:	40 e0       	ldi	r20, 0x00	; 0
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	ba 01       	movw	r22, r20
									st_clust(dir, dw);
    4e2e:	cf 01       	movw	r24, r30
    4e30:	8e 5a       	subi	r24, 0xAE	; 174
    4e32:	9f 4f       	sbci	r25, 0xFF	; 255
    4e34:	0e 94 89 09 	call	0x1312	; 0x1312 <st_clust>
									djo.fs->wflag = 1;
    4e38:	e9 81       	ldd	r30, Y+1	; 0x01
    4e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    4e40:	ce 01       	movw	r24, r28
    4e42:	01 96       	adiw	r24, 0x01	; 1
    4e44:	0e 94 6f 12 	call	0x24de	; 0x24de <dir_remove>
							if (res == FR_OK)
    4e48:	88 23       	and	r24, r24
    4e4a:	41 f4       	brne	.+16     	; 0x4e5c <f_rename+0x1a2>
								res = sync(djo.fs);
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <sync>
    4e54:	03 c0       	rjmp	.+6      	; 0x4e5c <f_rename+0x1a2>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    4e56:	88 e0       	ldi	r24, 0x08	; 8
    4e58:	01 c0       	rjmp	.+2      	; 0x4e5c <f_rename+0x1a2>
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    4e5a:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    4e5c:	c1 5b       	subi	r28, 0xB1	; 177
    4e5e:	df 4f       	sbci	r29, 0xFF	; 255
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	1f 91       	pop	r17
    4e70:	0f 91       	pop	r16
    4e72:	ff 90       	pop	r15
    4e74:	ef 90       	pop	r14
    4e76:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    4e78:	6b 89       	ldd	r22, Y+19	; 0x13
    4e7a:	7c 89       	ldd	r23, Y+20	; 0x14
    4e7c:	61 15       	cp	r22, r1
    4e7e:	71 05       	cpc	r23, r1
    4e80:	09 f0       	breq	.+2      	; 0x4e84 <f_rename+0x1ca>
    4e82:	56 cf       	rjmp	.-340    	; 0x4d30 <f_rename+0x76>
    4e84:	ea cf       	rjmp	.-44     	; 0x4e5a <f_rename+0x1a0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    4e86:	82 e0       	ldi	r24, 0x02	; 2
    4e88:	e9 cf       	rjmp	.-46     	; 0x4e5c <f_rename+0x1a2>

00004e8a <put_rc>:
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4e8a:	88 23       	and	r24, r24
    4e8c:	b1 f0       	breq	.+44     	; 0x4eba <put_rc+0x30>
    4e8e:	ef e1       	ldi	r30, 0x1F	; 31
    4e90:	f1 e0       	ldi	r31, 0x01	; 1
    4e92:	e4 91       	lpm	r30, Z
    4e94:	ee 23       	and	r30, r30
    4e96:	a1 f0       	breq	.+40     	; 0x4ec0 <put_rc+0x36>
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	2f e1       	ldi	r18, 0x1F	; 31
    4e9c:	31 e0       	ldi	r19, 0x01	; 1
		while(pgm_read_byte_near(p++));
    4e9e:	f9 01       	movw	r30, r18
    4ea0:	2f 5f       	subi	r18, 0xFF	; 255
    4ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea4:	e4 91       	lpm	r30, Z
    4ea6:	ee 23       	and	r30, r30
    4ea8:	d1 f7       	brne	.-12     	; 0x4e9e <put_rc+0x14>
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    4eaa:	9f 5f       	subi	r25, 0xFF	; 255
    4eac:	89 17       	cp	r24, r25
    4eae:	51 f0       	breq	.+20     	; 0x4ec4 <put_rc+0x3a>
    4eb0:	f9 01       	movw	r30, r18
    4eb2:	44 91       	lpm	r20, Z
    4eb4:	44 23       	and	r20, r20
    4eb6:	99 f7       	brne	.-26     	; 0x4e9e <put_rc+0x14>
    4eb8:	05 c0       	rjmp	.+10     	; 0x4ec4 <put_rc+0x3a>
    4eba:	2f e1       	ldi	r18, 0x1F	; 31
    4ebc:	31 e0       	ldi	r19, 0x01	; 1
    4ebe:	02 c0       	rjmp	.+4      	; 0x4ec4 <put_rc+0x3a>
    4ec0:	2f e1       	ldi	r18, 0x1F	; 31
    4ec2:	31 e0       	ldi	r19, 0x01	; 1
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), rc, p);
    4ec4:	00 d0       	rcall	.+0      	; 0x4ec6 <put_rc+0x3c>
    4ec6:	00 d0       	rcall	.+0      	; 0x4ec8 <put_rc+0x3e>
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <put_rc+0x40>
    4eca:	ed b7       	in	r30, 0x3d	; 61
    4ecc:	fe b7       	in	r31, 0x3e	; 62
    4ece:	31 96       	adiw	r30, 0x01	; 1
    4ed0:	40 e0       	ldi	r20, 0x00	; 0
    4ed2:	59 e0       	ldi	r21, 0x09	; 9
    4ed4:	ad b7       	in	r26, 0x3d	; 61
    4ed6:	be b7       	in	r27, 0x3e	; 62
    4ed8:	12 96       	adiw	r26, 0x02	; 2
    4eda:	5c 93       	st	X, r21
    4edc:	4e 93       	st	-X, r20
    4ede:	11 97       	sbiw	r26, 0x01	; 1
    4ee0:	82 83       	std	Z+2, r24	; 0x02
    4ee2:	13 82       	std	Z+3, r1	; 0x03
    4ee4:	35 83       	std	Z+5, r19	; 0x05
    4ee6:	24 83       	std	Z+4, r18	; 0x04
    4ee8:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    4eec:	ed b7       	in	r30, 0x3d	; 61
    4eee:	fe b7       	in	r31, 0x3e	; 62
    4ef0:	36 96       	adiw	r30, 0x06	; 6
    4ef2:	0f b6       	in	r0, 0x3f	; 63
    4ef4:	f8 94       	cli
    4ef6:	fe bf       	out	0x3e, r31	; 62
    4ef8:	0f be       	out	0x3f, r0	; 63
    4efa:	ed bf       	out	0x3d, r30	; 61
}
    4efc:	08 95       	ret

00004efe <put_dump>:
/* Monitor                                                                  */


static
void put_dump (const BYTE *buff, DWORD ofs, BYTE cnt)
{
    4efe:	cf 92       	push	r12
    4f00:	df 92       	push	r13
    4f02:	ef 92       	push	r14
    4f04:	ff 92       	push	r15
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	c8 2f       	mov	r28, r24
    4f10:	e9 2e       	mov	r14, r25
    4f12:	d2 2f       	mov	r29, r18
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);
    4f14:	00 d0       	rcall	.+0      	; 0x4f16 <put_dump+0x18>
    4f16:	00 d0       	rcall	.+0      	; 0x4f18 <put_dump+0x1a>
    4f18:	00 d0       	rcall	.+0      	; 0x4f1a <put_dump+0x1c>
    4f1a:	83 ef       	ldi	r24, 0xF3	; 243
    4f1c:	98 e0       	ldi	r25, 0x08	; 8
    4f1e:	ad b7       	in	r26, 0x3d	; 61
    4f20:	be b7       	in	r27, 0x3e	; 62
    4f22:	12 96       	adiw	r26, 0x02	; 2
    4f24:	9c 93       	st	X, r25
    4f26:	8e 93       	st	-X, r24
    4f28:	11 97       	sbiw	r26, 0x01	; 1
    4f2a:	ed b7       	in	r30, 0x3d	; 61
    4f2c:	fe b7       	in	r31, 0x3e	; 62
    4f2e:	43 83       	std	Z+3, r20	; 0x03
    4f30:	54 83       	std	Z+4, r21	; 0x04
    4f32:	65 83       	std	Z+5, r22	; 0x05
    4f34:	76 83       	std	Z+6, r23	; 0x06
    4f36:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>

	for(i = 0; i < cnt; i++)
    4f3a:	8d b7       	in	r24, 0x3d	; 61
    4f3c:	9e b7       	in	r25, 0x3e	; 62
    4f3e:	06 96       	adiw	r24, 0x06	; 6
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	9e bf       	out	0x3e, r25	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	8d bf       	out	0x3d, r24	; 61
    4f4a:	dd 23       	and	r29, r29
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <put_dump+0x52>
    4f4e:	40 c0       	rjmp	.+128    	; 0x4fd0 <put_dump+0xd2>
    4f50:	0c 2f       	mov	r16, r28
    4f52:	1e 2d       	mov	r17, r14
    4f54:	78 01       	movw	r14, r16
    4f56:	c0 e0       	ldi	r28, 0x00	; 0
		xprintf(PSTR(" %02X"), buff[i]);
    4f58:	0f 2e       	mov	r0, r31
    4f5a:	fa ef       	ldi	r31, 0xFA	; 250
    4f5c:	cf 2e       	mov	r12, r31
    4f5e:	f8 e0       	ldi	r31, 0x08	; 8
    4f60:	df 2e       	mov	r13, r31
    4f62:	f0 2d       	mov	r31, r0
    4f64:	d7 01       	movw	r26, r14
    4f66:	8d 91       	ld	r24, X+
    4f68:	7d 01       	movw	r14, r26
    4f6a:	00 d0       	rcall	.+0      	; 0x4f6c <put_dump+0x6e>
    4f6c:	00 d0       	rcall	.+0      	; 0x4f6e <put_dump+0x70>
    4f6e:	ed b7       	in	r30, 0x3d	; 61
    4f70:	fe b7       	in	r31, 0x3e	; 62
    4f72:	31 96       	adiw	r30, 0x01	; 1
    4f74:	ad b7       	in	r26, 0x3d	; 61
    4f76:	be b7       	in	r27, 0x3e	; 62
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	dc 92       	st	X, r13
    4f7c:	ce 92       	st	-X, r12
    4f7e:	11 97       	sbiw	r26, 0x01	; 1
    4f80:	82 83       	std	Z+2, r24	; 0x02
    4f82:	13 82       	std	Z+3, r1	; 0x03
    4f84:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
    4f88:	cf 5f       	subi	r28, 0xFF	; 255
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    4f92:	cd 17       	cp	r28, r29
    4f94:	39 f7       	brne	.-50     	; 0x4f64 <put_dump+0x66>
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
    4f96:	80 e2       	ldi	r24, 0x20	; 32
    4f98:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
	for(i = 0; i < cnt; i++)
    4f9c:	c0 e0       	ldi	r28, 0x00	; 0
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');
    4f9e:	f8 01       	movw	r30, r16
    4fa0:	81 91       	ld	r24, Z+
    4fa2:	8f 01       	movw	r16, r30
    4fa4:	98 2f       	mov	r25, r24
    4fa6:	90 52       	subi	r25, 0x20	; 32
    4fa8:	9f 35       	cpi	r25, 0x5F	; 95
    4faa:	08 f0       	brcs	.+2      	; 0x4fae <put_dump+0xb0>
    4fac:	8e e2       	ldi	r24, 0x2E	; 46
    4fae:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
	for(i = 0; i < cnt; i++)
    4fb2:	cf 5f       	subi	r28, 0xFF	; 255
    4fb4:	cd 17       	cp	r28, r29
    4fb6:	99 f7       	brne	.-26     	; 0x4f9e <put_dump+0xa0>
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');

	xputc('\n');
    4fb8:	8a e0       	ldi	r24, 0x0A	; 10
    4fba:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
}
    4fbe:	df 91       	pop	r29
    4fc0:	cf 91       	pop	r28
    4fc2:	1f 91       	pop	r17
    4fc4:	0f 91       	pop	r16
    4fc6:	ff 90       	pop	r15
    4fc8:	ef 90       	pop	r14
    4fca:	df 90       	pop	r13
    4fcc:	cf 90       	pop	r12
    4fce:	08 95       	ret
	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
    4fd0:	80 e2       	ldi	r24, 0x20	; 32
    4fd2:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
    4fd6:	f0 cf       	rjmp	.-32     	; 0x4fb8 <put_dump+0xba>

00004fd8 <get_line>:
}


static
void get_line (char *buff, int len)
{
    4fd8:	ef 92       	push	r14
    4fda:	ff 92       	push	r15
    4fdc:	0f 93       	push	r16
    4fde:	1f 93       	push	r17
    4fe0:	cf 93       	push	r28
    4fe2:	df 93       	push	r29
    4fe4:	7c 01       	movw	r14, r24
	BYTE c;
	int i = 0;
    4fe6:	c0 e0       	ldi	r28, 0x00	; 0
    4fe8:	d0 e0       	ldi	r29, 0x00	; 0
		if ((c == '\b') && i) {
			i--;
			uart_put(c);
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    4fea:	8b 01       	movw	r16, r22
    4fec:	01 50       	subi	r16, 0x01	; 1
    4fee:	10 40       	sbci	r17, 0x00	; 0
	BYTE c;
	int i = 0;


	for (;;) {
		c = uart_get();
    4ff0:	0e 94 72 34 	call	0x68e4	; 0x68e4 <uart_get>
		if (c == '\r') break;
    4ff4:	8d 30       	cpi	r24, 0x0D	; 13
    4ff6:	a9 f0       	breq	.+42     	; 0x5022 <get_line+0x4a>
		if ((c == '\b') && i) {
    4ff8:	88 30       	cpi	r24, 0x08	; 8
    4ffa:	31 f4       	brne	.+12     	; 0x5008 <get_line+0x30>
    4ffc:	20 97       	sbiw	r28, 0x00	; 0
    4ffe:	c1 f3       	breq	.-16     	; 0x4ff0 <get_line+0x18>
			i--;
    5000:	21 97       	sbiw	r28, 0x01	; 1
			uart_put(c);
    5002:	0e 94 8b 34 	call	0x6916	; 0x6916 <uart_put>
			continue;
    5006:	f4 cf       	rjmp	.-24     	; 0x4ff0 <get_line+0x18>
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    5008:	80 32       	cpi	r24, 0x20	; 32
    500a:	90 f3       	brcs	.-28     	; 0x4ff0 <get_line+0x18>
    500c:	c0 17       	cp	r28, r16
    500e:	d1 07       	cpc	r29, r17
    5010:	7c f7       	brge	.-34     	; 0x4ff0 <get_line+0x18>
			buff[i++] = c;
    5012:	f7 01       	movw	r30, r14
    5014:	ec 0f       	add	r30, r28
    5016:	fd 1f       	adc	r31, r29
    5018:	80 83       	st	Z, r24
    501a:	21 96       	adiw	r28, 0x01	; 1
			xputc(c);
    501c:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
    5020:	e7 cf       	rjmp	.-50     	; 0x4ff0 <get_line+0x18>
		}
	}
	buff[i] = 0;
    5022:	ce 0d       	add	r28, r14
    5024:	df 1d       	adc	r29, r15
    5026:	18 82       	st	Y, r1
	uart_put('\n');
    5028:	8a e0       	ldi	r24, 0x0A	; 10
    502a:	0e 94 8b 34 	call	0x6916	; 0x6916 <uart_put>
}
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	1f 91       	pop	r17
    5034:	0f 91       	pop	r16
    5036:	ff 90       	pop	r15
    5038:	ef 90       	pop	r14
    503a:	08 95       	ret

0000503c <scan_files>:

static
FRESULT scan_files (
	char* path		/* Pointer to the working buffer with start path */
)
{
    503c:	4f 92       	push	r4
    503e:	5f 92       	push	r5
    5040:	7f 92       	push	r7
    5042:	8f 92       	push	r8
    5044:	9f 92       	push	r9
    5046:	af 92       	push	r10
    5048:	bf 92       	push	r11
    504a:	cf 92       	push	r12
    504c:	df 92       	push	r13
    504e:	ef 92       	push	r14
    5050:	ff 92       	push	r15
    5052:	0f 93       	push	r16
    5054:	1f 93       	push	r17
    5056:	cf 93       	push	r28
    5058:	df 93       	push	r29
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	66 97       	sbiw	r28, 0x16	; 22
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	5c 01       	movw	r10, r24
	DIR dirs;
	FRESULT res;
	int i;
	char *fn;

	res = f_opendir(&dirs, path);
    506c:	ce 01       	movw	r24, r28
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	b5 01       	movw	r22, r10
    5072:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <f_opendir>
	if (res == FR_OK) {
    5076:	88 23       	and	r24, r24
    5078:	09 f0       	breq	.+2      	; 0x507c <scan_files+0x40>
    507a:	6f c0       	rjmp	.+222    	; 0x515a <scan_files+0x11e>
		i = strlen(path);
    507c:	ea 2d       	mov	r30, r10
    507e:	fb 2d       	mov	r31, r11
    5080:	df 01       	movw	r26, r30
    5082:	0d 90       	ld	r0, X+
    5084:	00 20       	and	r0, r0
    5086:	e9 f7       	brne	.-6      	; 0x5082 <scan_files+0x46>
    5088:	cd 01       	movw	r24, r26
    508a:	01 97       	sbiw	r24, 0x01	; 1
    508c:	8e 1b       	sub	r24, r30
    508e:	9f 0b       	sbc	r25, r31
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    5090:	02 eb       	ldi	r16, 0xB2	; 178
    5092:	14 e0       	ldi	r17, 0x04	; 4
    5094:	0f 2e       	mov	r0, r31
    5096:	fb eb       	ldi	r31, 0xBB	; 187
    5098:	ef 2e       	mov	r14, r31
    509a:	f4 e0       	ldi	r31, 0x04	; 4
    509c:	ff 2e       	mov	r15, r31
    509e:	f0 2d       	mov	r31, r0
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
    50a0:	0f 2e       	mov	r0, r31
    50a2:	fa eb       	ldi	r31, 0xBA	; 186
    50a4:	cf 2e       	mov	r12, r31
    50a6:	f4 e0       	ldi	r31, 0x04	; 4
    50a8:	df 2e       	mov	r13, r31
    50aa:	f0 2d       	mov	r31, r0
				AccDirs++;
				*(path+i) = '/'; strcpy(path+i+1, fn);
    50ac:	45 01       	movw	r8, r10
    50ae:	88 0e       	add	r8, r24
    50b0:	99 1e       	adc	r9, r25
    50b2:	0f 2e       	mov	r0, r31
    50b4:	ff e2       	ldi	r31, 0x2F	; 47
    50b6:	7f 2e       	mov	r7, r31
    50b8:	f0 2d       	mov	r31, r0
    50ba:	01 96       	adiw	r24, 0x01	; 1
    50bc:	25 01       	movw	r4, r10
    50be:	48 0e       	add	r4, r24
    50c0:	59 1e       	adc	r5, r25
	char *fn;

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    50c2:	3f c0       	rjmp	.+126    	; 0x5142 <scan_files+0x106>
			if (_FS_RPATH && Finfo.fname[0] == '.') continue;
    50c4:	9e 32       	cpi	r25, 0x2E	; 46
    50c6:	e9 f1       	breq	.+122    	; 0x5142 <scan_files+0x106>
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
    50c8:	f6 01       	movw	r30, r12
    50ca:	80 81       	ld	r24, Z
    50cc:	84 ff       	sbrs	r24, 4
    50ce:	17 c0       	rjmp	.+46     	; 0x50fe <scan_files+0xc2>
				AccDirs++;
    50d0:	80 91 73 0d 	lds	r24, 0x0D73
    50d4:	90 91 74 0d 	lds	r25, 0x0D74
    50d8:	01 96       	adiw	r24, 0x01	; 1
    50da:	90 93 74 0d 	sts	0x0D74, r25
    50de:	80 93 73 0d 	sts	0x0D73, r24
				*(path+i) = '/'; strcpy(path+i+1, fn);
    50e2:	d4 01       	movw	r26, r8
    50e4:	7c 92       	st	X, r7
    50e6:	c2 01       	movw	r24, r4
    50e8:	b7 01       	movw	r22, r14
    50ea:	0e 94 83 36 	call	0x6d06	; 0x6d06 <strcpy>
				res = scan_files(path);
    50ee:	c5 01       	movw	r24, r10
    50f0:	0e 94 1e 28 	call	0x503c	; 0x503c <scan_files>
				*(path+i) = '\0';
    50f4:	f4 01       	movw	r30, r8
    50f6:	10 82       	st	Z, r1
				if (res != FR_OK) break;
    50f8:	88 23       	and	r24, r24
    50fa:	19 f1       	breq	.+70     	; 0x5142 <scan_files+0x106>
    50fc:	2e c0       	rjmp	.+92     	; 0x515a <scan_files+0x11e>
			} else {
//				xprintf(PSTR("%s/%s\n"), path, fn);
				AccFiles++;
    50fe:	80 91 75 0d 	lds	r24, 0x0D75
    5102:	90 91 76 0d 	lds	r25, 0x0D76
    5106:	01 96       	adiw	r24, 0x01	; 1
    5108:	90 93 76 0d 	sts	0x0D76, r25
    510c:	80 93 75 0d 	sts	0x0D75, r24
				AccSize += Finfo.fsize;
    5110:	80 91 0b 09 	lds	r24, 0x090B
    5114:	90 91 0c 09 	lds	r25, 0x090C
    5118:	a0 91 0d 09 	lds	r26, 0x090D
    511c:	b0 91 0e 09 	lds	r27, 0x090E
    5120:	f8 01       	movw	r30, r16
    5122:	40 81       	ld	r20, Z
    5124:	51 81       	ldd	r21, Z+1	; 0x01
    5126:	62 81       	ldd	r22, Z+2	; 0x02
    5128:	73 81       	ldd	r23, Z+3	; 0x03
    512a:	84 0f       	add	r24, r20
    512c:	95 1f       	adc	r25, r21
    512e:	a6 1f       	adc	r26, r22
    5130:	b7 1f       	adc	r27, r23
    5132:	80 93 0b 09 	sts	0x090B, r24
    5136:	90 93 0c 09 	sts	0x090C, r25
    513a:	a0 93 0d 09 	sts	0x090D, r26
    513e:	b0 93 0e 09 	sts	0x090E, r27
	char *fn;

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    5142:	ce 01       	movw	r24, r28
    5144:	01 96       	adiw	r24, 0x01	; 1
    5146:	b8 01       	movw	r22, r16
    5148:	0e 94 57 21 	call	0x42ae	; 0x42ae <f_readdir>
    514c:	88 23       	and	r24, r24
    514e:	29 f4       	brne	.+10     	; 0x515a <scan_files+0x11e>
    5150:	d7 01       	movw	r26, r14
    5152:	9c 91       	ld	r25, X
    5154:	99 23       	and	r25, r25
    5156:	09 f0       	breq	.+2      	; 0x515a <scan_files+0x11e>
    5158:	b5 cf       	rjmp	.-150    	; 0x50c4 <scan_files+0x88>
			}
		}
	}

	return res;
}
    515a:	66 96       	adiw	r28, 0x16	; 22
    515c:	0f b6       	in	r0, 0x3f	; 63
    515e:	f8 94       	cli
    5160:	de bf       	out	0x3e, r29	; 62
    5162:	0f be       	out	0x3f, r0	; 63
    5164:	cd bf       	out	0x3d, r28	; 61
    5166:	df 91       	pop	r29
    5168:	cf 91       	pop	r28
    516a:	1f 91       	pop	r17
    516c:	0f 91       	pop	r16
    516e:	ff 90       	pop	r15
    5170:	ef 90       	pop	r14
    5172:	df 90       	pop	r13
    5174:	cf 90       	pop	r12
    5176:	bf 90       	pop	r11
    5178:	af 90       	pop	r10
    517a:	9f 90       	pop	r9
    517c:	8f 90       	pop	r8
    517e:	7f 90       	pop	r7
    5180:	5f 90       	pop	r5
    5182:	4f 90       	pop	r4
    5184:	08 95       	ret

00005186 <__vector_16>:
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/


ISR(TIMER0_COMPA_vect)
{
    5186:	1f 92       	push	r1
    5188:	0f 92       	push	r0
    518a:	0f b6       	in	r0, 0x3f	; 63
    518c:	0f 92       	push	r0
    518e:	11 24       	eor	r1, r1
    5190:	2f 93       	push	r18
    5192:	3f 93       	push	r19
    5194:	4f 93       	push	r20
    5196:	5f 93       	push	r21
    5198:	6f 93       	push	r22
    519a:	7f 93       	push	r23
    519c:	8f 93       	push	r24
    519e:	9f 93       	push	r25
    51a0:	af 93       	push	r26
    51a2:	bf 93       	push	r27
    51a4:	ef 93       	push	r30
    51a6:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
    51a8:	80 91 09 09 	lds	r24, 0x0909
    51ac:	90 91 0a 09 	lds	r25, 0x090A
    51b0:	01 96       	adiw	r24, 0x01	; 1
    51b2:	90 93 0a 09 	sts	0x090A, r25
    51b6:	80 93 09 09 	sts	0x0909, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    51ba:	0e 94 30 09 	call	0x1260	; 0x1260 <disk_timerproc>
}
    51be:	ff 91       	pop	r31
    51c0:	ef 91       	pop	r30
    51c2:	bf 91       	pop	r27
    51c4:	af 91       	pop	r26
    51c6:	9f 91       	pop	r25
    51c8:	8f 91       	pop	r24
    51ca:	7f 91       	pop	r23
    51cc:	6f 91       	pop	r22
    51ce:	5f 91       	pop	r21
    51d0:	4f 91       	pop	r20
    51d2:	3f 91       	pop	r19
    51d4:	2f 91       	pop	r18
    51d6:	0f 90       	pop	r0
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	0f 90       	pop	r0
    51dc:	1f 90       	pop	r1
    51de:	18 95       	reti

000051e0 <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	cd b7       	in	r28, 0x3d	; 61
    51e6:	de b7       	in	r29, 0x3e	; 62
    51e8:	eb 97       	sbiw	r28, 0x3b	; 59
    51ea:	0f b6       	in	r0, 0x3f	; 63
    51ec:	f8 94       	cli
    51ee:	de bf       	out	0x3e, r29	; 62
    51f0:	0f be       	out	0x3f, r0	; 63
    51f2:	cd bf       	out	0x3d, r28	; 61

static
void ioinit (void)
{
	/* Pull-up all GPIO pins */
	PORTA = 0b11111111;
    51f4:	8f ef       	ldi	r24, 0xFF	; 255
    51f6:	82 b9       	out	0x02, r24	; 2
	PORTB = 0b11111111;
    51f8:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b11111111;
    51fa:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11111111;
    51fc:	8b b9       	out	0x0b, r24	; 11
// 	PORTE = 0b11111111;
// 	PORTF = 0b11111111;
// 	PORTG = 0b00011111;

	//initialise timer 0 to interrupt every 10 ms
	TIMSK0 |= (1 << OCIE0A);
    51fe:	ee e6       	ldi	r30, 0x6E	; 110
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	80 81       	ld	r24, Z
    5204:	82 60       	ori	r24, 0x02	; 2
    5206:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);
    5208:	84 b5       	in	r24, 0x24	; 36
    520a:	82 60       	ori	r24, 0x02	; 2
    520c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 117; //10ms interrupt at 12MHz
    520e:	85 e7       	ldi	r24, 0x75	; 117
    5210:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS02) | (1 << CS00);
    5212:	85 b5       	in	r24, 0x25	; 37
    5214:	85 60       	ori	r24, 0x05	; 5
    5216:	85 bd       	out	0x25, r24	; 37
	sei();
    5218:	78 94       	sei
	DIR dir;
	//RTC rtc;


	ioinit();				/* Initialize port settings and start system timer process */
	uart_init(MYUBBR0);			/* Initialize UART driver */
    521a:	8c e0       	ldi	r24, 0x0C	; 12
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	0e 94 60 34 	call	0x68c0	; 0x68c0 <uart_init>
	xdev_out(uart_put);		/* Register uart_put() to xitoa module as console output */
    5222:	8b e8       	ldi	r24, 0x8B	; 139
    5224:	94 e3       	ldi	r25, 0x34	; 52
    5226:	90 93 7f 02 	sts	0x027F, r25
    522a:	80 93 7e 02 	sts	0x027E, r24
	xputs(PSTR("\nFatFs module test monitor for AVR\n"));
    522e:	80 ec       	ldi	r24, 0xC0	; 192
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
	xputs(_USE_LFN ? PSTR("LFN Enabled") : PSTR("LFN Disabled"));
    5236:	84 ee       	ldi	r24, 0xE4	; 228
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
	xprintf(PSTR(", Code page: %u\n"), _CODE_PAGE);
    523e:	00 d0       	rcall	.+0      	; 0x5240 <main+0x60>
    5240:	00 d0       	rcall	.+0      	; 0x5242 <main+0x62>
    5242:	81 ef       	ldi	r24, 0xF1	; 241
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	ad b7       	in	r26, 0x3d	; 61
    5248:	be b7       	in	r27, 0x3e	; 62
    524a:	12 96       	adiw	r26, 0x02	; 2
    524c:	9c 93       	st	X, r25
    524e:	8e 93       	st	-X, r24
    5250:	11 97       	sbiw	r26, 0x01	; 1
    5252:	84 ea       	ldi	r24, 0xA4	; 164
    5254:	93 e0       	ldi	r25, 0x03	; 3
    5256:	14 96       	adiw	r26, 0x04	; 4
    5258:	9c 93       	st	X, r25
    525a:	8e 93       	st	-X, r24
    525c:	13 97       	sbiw	r26, 0x03	; 3
    525e:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>

// 	if (rtc_init() && rtc_gettime(&rtc)) {		/* Initialize RTC */
// 		RtcOk = 1;
// 		xprintf(PSTR("Current time: %u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
// 	} else {
		xputs(PSTR("RTC is not supported.\n"));
    5262:	0f 90       	pop	r0
    5264:	0f 90       	pop	r0
    5266:	0f 90       	pop	r0
    5268:	0f 90       	pop	r0
    526a:	82 e0       	ldi	r24, 0x02	; 2
    526c:	91 e0       	ldi	r25, 0x01	; 1
    526e:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
{
	char *ptr, *ptr2;
	long p1, p2, p3;
	BYTE res, b1, *bp;
	UINT s1, s2, cnt;
	DWORD ofs, sect = 0;
    5272:	1a aa       	sts	0x9a, r17
    5274:	1b aa       	sts	0x9b, r17
    5276:	1c aa       	sts	0x9c, r17
    5278:	1d aa       	sts	0x9d, r17
	Finfo.lfsize = sizeof Lfname;
#endif

	for (;;) {
		xputc('>');
		ptr = (char*)Line;
    527a:	0f 2e       	mov	r0, r31
    527c:	ff e0       	ldi	r31, 0x0F	; 15
    527e:	8f 2e       	mov	r8, r31
    5280:	fd e0       	ldi	r31, 0x0D	; 13
    5282:	9f 2e       	mov	r9, r31
    5284:	f0 2d       	mov	r31, r0
				put_rc(f_chmod(ptr, p1, p2));
				break;

			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
    5286:	0f 2e       	mov	r0, r31
    5288:	f6 eb       	ldi	r31, 0xB6	; 182
    528a:	4f 2e       	mov	r4, r31
    528c:	f4 e0       	ldi	r31, 0x04	; 4
    528e:	5f 2e       	mov	r5, r31
    5290:	f0 2d       	mov	r31, r0
				if (res) { put_rc(res); break; }
				p1 = s1 = s2 = 0;
				for(;;) {
					res = f_readdir(&dir, &Finfo);
					if ((res != FR_OK) || !Finfo.fname[0]) break;
					if (Finfo.fattrib & AM_DIR) {
    5292:	0f 2e       	mov	r0, r31
    5294:	fa eb       	ldi	r31, 0xBA	; 186
    5296:	6f 2e       	mov	r6, r31
    5298:	f4 e0       	ldi	r31, 0x04	; 4
    529a:	7f 2e       	mov	r7, r31
    529c:	f0 2d       	mov	r31, r0
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    529e:	f2 01       	movw	r30, r4
    52a0:	34 97       	sbiw	r30, 0x04	; 4
    52a2:	ff a7       	lds	r31, 0x7f
    52a4:	ee a7       	lds	r30, 0x7e
    52a6:	39 96       	adiw	r30, 0x09	; 9
    52a8:	f9 ab       	sts	0x59, r31
    52aa:	e8 ab       	sts	0x58, r30
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
				}
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, Line) == RES_OK)
					{ Line[40] = '\0'; xprintf(PSTR("Model: %s\n"), Line); }
				if (disk_ioctl((BYTE)p1, ATA_GET_SN, Line) == RES_OK)
					{ Line[20] = '\0'; xprintf(PSTR("S/N: %s\n"), Line); }
    52ac:	23 e2       	ldi	r18, 0x23	; 35
    52ae:	3d e0       	ldi	r19, 0x0D	; 13
    52b0:	24 51       	subi	r18, 0x14	; 20
    52b2:	30 40       	sbci	r19, 0x00	; 0
    52b4:	3f ab       	sts	0x5f, r19
    52b6:	2e ab       	sts	0x5e, r18
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
					xputs(PSTR("SD Status:\n"));
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
				}
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, Line) == RES_OK)
					{ Line[40] = '\0'; xprintf(PSTR("Model: %s\n"), Line); }
    52b8:	47 e3       	ldi	r20, 0x37	; 55
    52ba:	5d e0       	ldi	r21, 0x0D	; 13
    52bc:	48 52       	subi	r20, 0x28	; 40
    52be:	50 40       	sbci	r21, 0x00	; 0
    52c0:	59 af       	sts	0x79, r21
    52c2:	48 af       	sts	0x78, r20
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof Lfname;
#endif

	for (;;) {
		xputc('>');
    52c4:	8e e3       	ldi	r24, 0x3E	; 62
    52c6:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
		ptr = (char*)Line;
    52ca:	9a 82       	std	Y+2, r9	; 0x02
    52cc:	89 82       	std	Y+1, r8	; 0x01

		get_line(ptr, sizeof Line);
    52ce:	c4 01       	movw	r24, r8
    52d0:	64 e6       	ldi	r22, 0x64	; 100
    52d2:	70 e0       	ldi	r23, 0x00	; 0
    52d4:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <get_line>
		switch (*ptr++) {
    52d8:	29 81       	ldd	r18, Y+1	; 0x01
    52da:	3a 81       	ldd	r19, Y+2	; 0x02
    52dc:	f9 01       	movw	r30, r18
    52de:	81 91       	ld	r24, Z+
    52e0:	fa 83       	std	Y+2, r31	; 0x02
    52e2:	e9 83       	std	Y+1, r30	; 0x01
    52e4:	84 36       	cpi	r24, 0x64	; 100
    52e6:	61 f0       	breq	.+24     	; 0x5300 <main+0x120>
    52e8:	85 36       	cpi	r24, 0x65	; 101
    52ea:	38 f4       	brcc	.+14     	; 0x52fa <main+0x11a>
    52ec:	8f 33       	cpi	r24, 0x3F	; 63
    52ee:	11 f4       	brne	.+4      	; 0x52f4 <main+0x114>
    52f0:	0c 94 5a 34 	jmp	0x68b4	; 0x68b4 <main+0x16d4>
    52f4:	82 36       	cpi	r24, 0x62	; 98
    52f6:	31 f7       	brne	.-52     	; 0x52c4 <main+0xe4>
    52f8:	c8 c1       	rjmp	.+912    	; 0x568a <main+0x4aa>
    52fa:	86 36       	cpi	r24, 0x66	; 102
    52fc:	19 f7       	brne	.-58     	; 0x52c4 <main+0xe4>
    52fe:	48 c3       	rjmp	.+1680   	; 0x5990 <main+0x7b0>

		case 'd' :
			switch (*ptr++) {
    5300:	d9 01       	movw	r26, r18
    5302:	11 96       	adiw	r26, 0x01	; 1
    5304:	4c 91       	ld	r20, X
    5306:	11 97       	sbiw	r26, 0x01	; 1
    5308:	c9 01       	movw	r24, r18
    530a:	02 96       	adiw	r24, 0x02	; 2
    530c:	9a 83       	std	Y+2, r25	; 0x02
    530e:	89 83       	std	Y+1, r24	; 0x01
    5310:	49 36       	cpi	r20, 0x69	; 105
    5312:	09 f4       	brne	.+2      	; 0x5316 <main+0x136>
    5314:	86 c0       	rjmp	.+268    	; 0x5422 <main+0x242>
    5316:	43 37       	cpi	r20, 0x73	; 115
    5318:	09 f4       	brne	.+2      	; 0x531c <main+0x13c>
    531a:	a6 c0       	rjmp	.+332    	; 0x5468 <main+0x288>
    531c:	44 36       	cpi	r20, 0x64	; 100
    531e:	91 f6       	brne	.-92     	; 0x52c4 <main+0xe4>
			case 'd' :	/* dd <phy_drv#> [<sector>] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) break;
    5320:	ce 01       	movw	r24, r28
    5322:	01 96       	adiw	r24, 0x01	; 1
    5324:	be 01       	movw	r22, r28
    5326:	6d 5f       	subi	r22, 0xFD	; 253
    5328:	7f 4f       	sbci	r23, 0xFF	; 255
    532a:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    532e:	88 23       	and	r24, r24
    5330:	49 f2       	breq	.-110    	; 0x52c4 <main+0xe4>
				if (!xatoi(&ptr, &p2)) p2 = sect;
    5332:	ce 01       	movw	r24, r28
    5334:	01 96       	adiw	r24, 0x01	; 1
    5336:	be 01       	movw	r22, r28
    5338:	69 5f       	subi	r22, 0xF9	; 249
    533a:	7f 4f       	sbci	r23, 0xFF	; 255
    533c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5340:	88 23       	and	r24, r24
    5342:	41 f4       	brne	.+16     	; 0x5354 <main+0x174>
    5344:	2a a9       	sts	0x4a, r18
    5346:	3b a9       	sts	0x4b, r19
    5348:	4c a9       	sts	0x4c, r20
    534a:	5d a9       	sts	0x4d, r21
    534c:	2f 83       	std	Y+7, r18	; 0x07
    534e:	38 87       	std	Y+8, r19	; 0x08
    5350:	49 87       	std	Y+9, r20	; 0x09
    5352:	5a 87       	std	Y+10, r21	; 0x0a
				res = disk_read((BYTE)p1, Buff, p2, 1);
    5354:	2f 81       	ldd	r18, Y+7	; 0x07
    5356:	38 85       	ldd	r19, Y+8	; 0x08
    5358:	49 85       	ldd	r20, Y+9	; 0x09
    535a:	5a 85       	ldd	r21, Y+10	; 0x0a
    535c:	8b 81       	ldd	r24, Y+3	; 0x03
    535e:	6f e0       	ldi	r22, 0x0F	; 15
    5360:	79 e0       	ldi	r23, 0x09	; 9
    5362:	01 e0       	ldi	r16, 0x01	; 1
    5364:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
    5368:	88 23       	and	r24, r24
    536a:	b1 f0       	breq	.+44     	; 0x5398 <main+0x1b8>
    536c:	00 d0       	rcall	.+0      	; 0x536e <main+0x18e>
    536e:	00 d0       	rcall	.+0      	; 0x5370 <main+0x190>
    5370:	ed b7       	in	r30, 0x3d	; 61
    5372:	fe b7       	in	r31, 0x3e	; 62
    5374:	31 96       	adiw	r30, 0x01	; 1
    5376:	29 e1       	ldi	r18, 0x19	; 25
    5378:	31 e0       	ldi	r19, 0x01	; 1
    537a:	ad b7       	in	r26, 0x3d	; 61
    537c:	be b7       	in	r27, 0x3e	; 62
    537e:	12 96       	adiw	r26, 0x02	; 2
    5380:	3c 93       	st	X, r19
    5382:	2e 93       	st	-X, r18
    5384:	11 97       	sbiw	r26, 0x01	; 1
    5386:	82 83       	std	Z+2, r24	; 0x02
    5388:	13 82       	std	Z+3, r1	; 0x03
    538a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	96 cf       	rjmp	.-212    	; 0x52c4 <main+0xe4>
				sect = p2 + 1;
    5398:	8f 81       	ldd	r24, Y+7	; 0x07
    539a:	98 85       	ldd	r25, Y+8	; 0x08
    539c:	a9 85       	ldd	r26, Y+9	; 0x09
    539e:	ba 85       	ldd	r27, Y+10	; 0x0a
    53a0:	9c 01       	movw	r18, r24
    53a2:	ad 01       	movw	r20, r26
    53a4:	2f 5f       	subi	r18, 0xFF	; 255
    53a6:	3f 4f       	sbci	r19, 0xFF	; 255
    53a8:	4f 4f       	sbci	r20, 0xFF	; 255
    53aa:	5f 4f       	sbci	r21, 0xFF	; 255
    53ac:	2a ab       	sts	0x5a, r18
    53ae:	3b ab       	sts	0x5b, r19
    53b0:	4c ab       	sts	0x5c, r20
    53b2:	5d ab       	sts	0x5d, r21
				xprintf(PSTR("Sector:%lu\n"), p2);
    53b4:	00 d0       	rcall	.+0      	; 0x53b6 <main+0x1d6>
    53b6:	00 d0       	rcall	.+0      	; 0x53b8 <main+0x1d8>
    53b8:	00 d0       	rcall	.+0      	; 0x53ba <main+0x1da>
    53ba:	20 e2       	ldi	r18, 0x20	; 32
    53bc:	31 e0       	ldi	r19, 0x01	; 1
    53be:	ed b7       	in	r30, 0x3d	; 61
    53c0:	fe b7       	in	r31, 0x3e	; 62
    53c2:	32 83       	std	Z+2, r19	; 0x02
    53c4:	21 83       	std	Z+1, r18	; 0x01
    53c6:	83 83       	std	Z+3, r24	; 0x03
    53c8:	94 83       	std	Z+4, r25	; 0x04
    53ca:	a5 83       	std	Z+5, r26	; 0x05
    53cc:	b6 83       	std	Z+6, r27	; 0x06
    53ce:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    53d2:	0f 2e       	mov	r0, r31
    53d4:	ff e0       	ldi	r31, 0x0F	; 15
    53d6:	af 2e       	mov	r10, r31
    53d8:	fb e0       	ldi	r31, 0x0B	; 11
    53da:	bf 2e       	mov	r11, r31
    53dc:	f0 2d       	mov	r31, r0
    53de:	2d b7       	in	r18, 0x3d	; 61
    53e0:	3e b7       	in	r19, 0x3e	; 62
    53e2:	2a 5f       	subi	r18, 0xFA	; 250
    53e4:	3f 4f       	sbci	r19, 0xFF	; 255
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	3e bf       	out	0x3e, r19	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	2d bf       	out	0x3d, r18	; 61
				if (!xatoi(&ptr, &p2)) p2 = sect;
				res = disk_read((BYTE)p1, Buff, p2, 1);
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
				sect = p2 + 1;
				xprintf(PSTR("Sector:%lu\n"), p2);
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
    53f0:	cc 24       	eor	r12, r12
    53f2:	dd 24       	eor	r13, r13
    53f4:	76 01       	movw	r14, r12
    53f6:	0f e0       	ldi	r16, 0x0F	; 15
    53f8:	19 e0       	ldi	r17, 0x09	; 9
					put_dump(bp, ofs, 16);
    53fa:	c8 01       	movw	r24, r16
    53fc:	b7 01       	movw	r22, r14
    53fe:	a6 01       	movw	r20, r12
    5400:	20 e1       	ldi	r18, 0x10	; 16
    5402:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
				if (!xatoi(&ptr, &p2)) p2 = sect;
				res = disk_read((BYTE)p1, Buff, p2, 1);
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
				sect = p2 + 1;
				xprintf(PSTR("Sector:%lu\n"), p2);
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
    5406:	00 5f       	subi	r16, 0xF0	; 240
    5408:	1f 4f       	sbci	r17, 0xFF	; 255
    540a:	80 e1       	ldi	r24, 0x10	; 16
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	a0 e0       	ldi	r26, 0x00	; 0
    5410:	b0 e0       	ldi	r27, 0x00	; 0
    5412:	c8 0e       	add	r12, r24
    5414:	d9 1e       	adc	r13, r25
    5416:	ea 1e       	adc	r14, r26
    5418:	fb 1e       	adc	r15, r27
    541a:	0a 15       	cp	r16, r10
    541c:	1b 05       	cpc	r17, r11
    541e:	69 f7       	brne	.-38     	; 0x53fa <main+0x21a>
    5420:	51 cf       	rjmp	.-350    	; 0x52c4 <main+0xe4>
					put_dump(bp, ofs, 16);
				break;

			case 'i' :	/* di <phy_drv#> - Initialize disk */
				if (!xatoi(&ptr, &p1)) break;
    5422:	ce 01       	movw	r24, r28
    5424:	01 96       	adiw	r24, 0x01	; 1
    5426:	be 01       	movw	r22, r28
    5428:	6d 5f       	subi	r22, 0xFD	; 253
    542a:	7f 4f       	sbci	r23, 0xFF	; 255
    542c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5430:	88 23       	and	r24, r24
    5432:	09 f4       	brne	.+2      	; 0x5436 <main+0x256>
    5434:	47 cf       	rjmp	.-370    	; 0x52c4 <main+0xe4>
				xprintf(PSTR("rc=%d\n"), disk_initialize((BYTE)p1));
    5436:	8b 81       	ldd	r24, Y+3	; 0x03
    5438:	0e 94 9d 05 	call	0xb3a	; 0xb3a <disk_initialize>
    543c:	00 d0       	rcall	.+0      	; 0x543e <main+0x25e>
    543e:	00 d0       	rcall	.+0      	; 0x5440 <main+0x260>
    5440:	ed b7       	in	r30, 0x3d	; 61
    5442:	fe b7       	in	r31, 0x3e	; 62
    5444:	31 96       	adiw	r30, 0x01	; 1
    5446:	2c e2       	ldi	r18, 0x2C	; 44
    5448:	31 e0       	ldi	r19, 0x01	; 1
    544a:	ad b7       	in	r26, 0x3d	; 61
    544c:	be b7       	in	r27, 0x3e	; 62
    544e:	12 96       	adiw	r26, 0x02	; 2
    5450:	3c 93       	st	X, r19
    5452:	2e 93       	st	-X, r18
    5454:	11 97       	sbiw	r26, 0x01	; 1
    5456:	82 83       	std	Z+2, r24	; 0x02
    5458:	13 82       	std	Z+3, r1	; 0x03
    545a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				break;
    545e:	0f 90       	pop	r0
    5460:	0f 90       	pop	r0
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	2e cf       	rjmp	.-420    	; 0x52c4 <main+0xe4>

			case 's' :	/* ds <phy_drv#> - Show disk status */
				if (!xatoi(&ptr, &p1)) break;
    5468:	ce 01       	movw	r24, r28
    546a:	01 96       	adiw	r24, 0x01	; 1
    546c:	be 01       	movw	r22, r28
    546e:	6d 5f       	subi	r22, 0xFD	; 253
    5470:	7f 4f       	sbci	r23, 0xFF	; 255
    5472:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5476:	88 23       	and	r24, r24
    5478:	09 f4       	brne	.+2      	; 0x547c <main+0x29c>
    547a:	24 cf       	rjmp	.-440    	; 0x52c4 <main+0xe4>
				if (disk_ioctl((BYTE)p1, GET_SECTOR_COUNT, &p2) == RES_OK)
    547c:	8b 81       	ldd	r24, Y+3	; 0x03
    547e:	61 e0       	ldi	r22, 0x01	; 1
    5480:	ae 01       	movw	r20, r28
    5482:	49 5f       	subi	r20, 0xF9	; 249
    5484:	5f 4f       	sbci	r21, 0xFF	; 255
    5486:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    548a:	88 23       	and	r24, r24
    548c:	e1 f4       	brne	.+56     	; 0x54c6 <main+0x2e6>
					{ xprintf(PSTR("Drive size: %lu sectors\n"), p2); }
    548e:	00 d0       	rcall	.+0      	; 0x5490 <main+0x2b0>
    5490:	00 d0       	rcall	.+0      	; 0x5492 <main+0x2b2>
    5492:	00 d0       	rcall	.+0      	; 0x5494 <main+0x2b4>
    5494:	83 e3       	ldi	r24, 0x33	; 51
    5496:	91 e0       	ldi	r25, 0x01	; 1
    5498:	ed b7       	in	r30, 0x3d	; 61
    549a:	fe b7       	in	r31, 0x3e	; 62
    549c:	92 83       	std	Z+2, r25	; 0x02
    549e:	81 83       	std	Z+1, r24	; 0x01
    54a0:	8f 81       	ldd	r24, Y+7	; 0x07
    54a2:	98 85       	ldd	r25, Y+8	; 0x08
    54a4:	a9 85       	ldd	r26, Y+9	; 0x09
    54a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    54a8:	83 83       	std	Z+3, r24	; 0x03
    54aa:	94 83       	std	Z+4, r25	; 0x04
    54ac:	a5 83       	std	Z+5, r26	; 0x05
    54ae:	b6 83       	std	Z+6, r27	; 0x06
    54b0:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    54b4:	2d b7       	in	r18, 0x3d	; 61
    54b6:	3e b7       	in	r19, 0x3e	; 62
    54b8:	2a 5f       	subi	r18, 0xFA	; 250
    54ba:	3f 4f       	sbci	r19, 0xFF	; 255
    54bc:	0f b6       	in	r0, 0x3f	; 63
    54be:	f8 94       	cli
    54c0:	3e bf       	out	0x3e, r19	; 62
    54c2:	0f be       	out	0x3f, r0	; 63
    54c4:	2d bf       	out	0x3d, r18	; 61
				if (disk_ioctl((BYTE)p1, GET_BLOCK_SIZE, &p2) == RES_OK)
    54c6:	8b 81       	ldd	r24, Y+3	; 0x03
    54c8:	63 e0       	ldi	r22, 0x03	; 3
    54ca:	ae 01       	movw	r20, r28
    54cc:	49 5f       	subi	r20, 0xF9	; 249
    54ce:	5f 4f       	sbci	r21, 0xFF	; 255
    54d0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    54d4:	88 23       	and	r24, r24
    54d6:	01 f5       	brne	.+64     	; 0x5518 <main+0x338>
					{ xprintf(PSTR("Erase block: %lu sectors\n"), p2); }
    54d8:	00 d0       	rcall	.+0      	; 0x54da <main+0x2fa>
    54da:	00 d0       	rcall	.+0      	; 0x54dc <main+0x2fc>
    54dc:	00 d0       	rcall	.+0      	; 0x54de <main+0x2fe>
    54de:	8c e4       	ldi	r24, 0x4C	; 76
    54e0:	91 e0       	ldi	r25, 0x01	; 1
    54e2:	ad b7       	in	r26, 0x3d	; 61
    54e4:	be b7       	in	r27, 0x3e	; 62
    54e6:	12 96       	adiw	r26, 0x02	; 2
    54e8:	9c 93       	st	X, r25
    54ea:	8e 93       	st	-X, r24
    54ec:	11 97       	sbiw	r26, 0x01	; 1
    54ee:	8f 81       	ldd	r24, Y+7	; 0x07
    54f0:	98 85       	ldd	r25, Y+8	; 0x08
    54f2:	a9 85       	ldd	r26, Y+9	; 0x09
    54f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    54f6:	ed b7       	in	r30, 0x3d	; 61
    54f8:	fe b7       	in	r31, 0x3e	; 62
    54fa:	83 83       	std	Z+3, r24	; 0x03
    54fc:	94 83       	std	Z+4, r25	; 0x04
    54fe:	a5 83       	std	Z+5, r26	; 0x05
    5500:	b6 83       	std	Z+6, r27	; 0x06
    5502:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    5506:	2d b7       	in	r18, 0x3d	; 61
    5508:	3e b7       	in	r19, 0x3e	; 62
    550a:	2a 5f       	subi	r18, 0xFA	; 250
    550c:	3f 4f       	sbci	r19, 0xFF	; 255
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	3e bf       	out	0x3e, r19	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	2d bf       	out	0x3d, r18	; 61
				if (disk_ioctl((BYTE)p1, MMC_GET_TYPE, &b1) == RES_OK)
    5518:	8b 81       	ldd	r24, Y+3	; 0x03
    551a:	6a e0       	ldi	r22, 0x0A	; 10
    551c:	ae 01       	movw	r20, r28
    551e:	41 5f       	subi	r20, 0xF1	; 241
    5520:	5f 4f       	sbci	r21, 0xFF	; 255
    5522:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    5526:	88 23       	and	r24, r24
    5528:	b1 f4       	brne	.+44     	; 0x5556 <main+0x376>
					{ xprintf(PSTR("Card type: %u\n"), b1); }
    552a:	00 d0       	rcall	.+0      	; 0x552c <main+0x34c>
    552c:	00 d0       	rcall	.+0      	; 0x552e <main+0x34e>
    552e:	ed b7       	in	r30, 0x3d	; 61
    5530:	fe b7       	in	r31, 0x3e	; 62
    5532:	31 96       	adiw	r30, 0x01	; 1
    5534:	86 e6       	ldi	r24, 0x66	; 102
    5536:	91 e0       	ldi	r25, 0x01	; 1
    5538:	ad b7       	in	r26, 0x3d	; 61
    553a:	be b7       	in	r27, 0x3e	; 62
    553c:	12 96       	adiw	r26, 0x02	; 2
    553e:	9c 93       	st	X, r25
    5540:	8e 93       	st	-X, r24
    5542:	11 97       	sbiw	r26, 0x01	; 1
    5544:	8f 85       	ldd	r24, Y+15	; 0x0f
    5546:	82 83       	std	Z+2, r24	; 0x02
    5548:	13 82       	std	Z+3, r1	; 0x03
    554a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    554e:	0f 90       	pop	r0
    5550:	0f 90       	pop	r0
    5552:	0f 90       	pop	r0
    5554:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, MMC_GET_CSD, Buff) == RES_OK)
    5556:	8b 81       	ldd	r24, Y+3	; 0x03
    5558:	6b e0       	ldi	r22, 0x0B	; 11
    555a:	4f e0       	ldi	r20, 0x0F	; 15
    555c:	59 e0       	ldi	r21, 0x09	; 9
    555e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    5562:	88 23       	and	r24, r24
    5564:	61 f4       	brne	.+24     	; 0x557e <main+0x39e>
					{ xputs(PSTR("CSD:\n")); put_dump(Buff, 0, 16); }
    5566:	85 e7       	ldi	r24, 0x75	; 117
    5568:	91 e0       	ldi	r25, 0x01	; 1
    556a:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
    556e:	8f e0       	ldi	r24, 0x0F	; 15
    5570:	99 e0       	ldi	r25, 0x09	; 9
    5572:	40 e0       	ldi	r20, 0x00	; 0
    5574:	50 e0       	ldi	r21, 0x00	; 0
    5576:	ba 01       	movw	r22, r20
    5578:	20 e1       	ldi	r18, 0x10	; 16
    557a:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_CID, Buff) == RES_OK)
    557e:	8b 81       	ldd	r24, Y+3	; 0x03
    5580:	6c e0       	ldi	r22, 0x0C	; 12
    5582:	4f e0       	ldi	r20, 0x0F	; 15
    5584:	59 e0       	ldi	r21, 0x09	; 9
    5586:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    558a:	88 23       	and	r24, r24
    558c:	61 f4       	brne	.+24     	; 0x55a6 <main+0x3c6>
					{ xputs(PSTR("CID:\n")); put_dump(Buff, 0, 16); }
    558e:	8b e7       	ldi	r24, 0x7B	; 123
    5590:	91 e0       	ldi	r25, 0x01	; 1
    5592:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
    5596:	8f e0       	ldi	r24, 0x0F	; 15
    5598:	99 e0       	ldi	r25, 0x09	; 9
    559a:	40 e0       	ldi	r20, 0x00	; 0
    559c:	50 e0       	ldi	r21, 0x00	; 0
    559e:	ba 01       	movw	r22, r20
    55a0:	20 e1       	ldi	r18, 0x10	; 16
    55a2:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_OCR, Buff) == RES_OK)
    55a6:	8b 81       	ldd	r24, Y+3	; 0x03
    55a8:	6d e0       	ldi	r22, 0x0D	; 13
    55aa:	4f e0       	ldi	r20, 0x0F	; 15
    55ac:	59 e0       	ldi	r21, 0x09	; 9
    55ae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    55b2:	88 23       	and	r24, r24
    55b4:	61 f4       	brne	.+24     	; 0x55ce <main+0x3ee>
					{ xputs(PSTR("OCR:\n")); put_dump(Buff, 0, 4); }
    55b6:	81 e8       	ldi	r24, 0x81	; 129
    55b8:	91 e0       	ldi	r25, 0x01	; 1
    55ba:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
    55be:	8f e0       	ldi	r24, 0x0F	; 15
    55c0:	99 e0       	ldi	r25, 0x09	; 9
    55c2:	40 e0       	ldi	r20, 0x00	; 0
    55c4:	50 e0       	ldi	r21, 0x00	; 0
    55c6:	ba 01       	movw	r22, r20
    55c8:	24 e0       	ldi	r18, 0x04	; 4
    55ca:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
    55ce:	8b 81       	ldd	r24, Y+3	; 0x03
    55d0:	6e e0       	ldi	r22, 0x0E	; 14
    55d2:	4f e0       	ldi	r20, 0x0F	; 15
    55d4:	59 e0       	ldi	r21, 0x09	; 9
    55d6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    55da:	88 23       	and	r24, r24
    55dc:	c1 f4       	brne	.+48     	; 0x560e <main+0x42e>
					xputs(PSTR("SD Status:\n"));
    55de:	87 e8       	ldi	r24, 0x87	; 135
    55e0:	91 e0       	ldi	r25, 0x01	; 1
    55e2:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
    55e6:	19 8a       	std	Y+17, r1	; 0x11
    55e8:	18 8a       	std	Y+16, r1	; 0x10
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	ac 01       	movw	r20, r24
    55f0:	60 e0       	ldi	r22, 0x00	; 0
    55f2:	70 e0       	ldi	r23, 0x00	; 0
    55f4:	81 5f       	subi	r24, 0xF1	; 241
    55f6:	96 4f       	sbci	r25, 0xF6	; 246
    55f8:	20 e1       	ldi	r18, 0x10	; 16
    55fa:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
    55fe:	88 89       	ldd	r24, Y+16	; 0x10
    5600:	99 89       	ldd	r25, Y+17	; 0x11
    5602:	40 96       	adiw	r24, 0x10	; 16
    5604:	99 8b       	std	Y+17, r25	; 0x11
    5606:	88 8b       	std	Y+16, r24	; 0x10
    5608:	80 34       	cpi	r24, 0x40	; 64
    560a:	91 05       	cpc	r25, r1
    560c:	80 f3       	brcs	.-32     	; 0x55ee <main+0x40e>
				}
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, Line) == RES_OK)
    560e:	8b 81       	ldd	r24, Y+3	; 0x03
    5610:	65 e1       	ldi	r22, 0x15	; 21
    5612:	a4 01       	movw	r20, r8
    5614:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    5618:	88 23       	and	r24, r24
    561a:	c9 f4       	brne	.+50     	; 0x564e <main+0x46e>
					{ Line[40] = '\0'; xprintf(PSTR("Model: %s\n"), Line); }
    561c:	e7 e3       	ldi	r30, 0x37	; 55
    561e:	fd e0       	ldi	r31, 0x0D	; 13
    5620:	10 82       	st	Z, r1
    5622:	00 d0       	rcall	.+0      	; 0x5624 <main+0x444>
    5624:	00 d0       	rcall	.+0      	; 0x5626 <main+0x446>
    5626:	83 e9       	ldi	r24, 0x93	; 147
    5628:	91 e0       	ldi	r25, 0x01	; 1
    562a:	ad b7       	in	r26, 0x3d	; 61
    562c:	be b7       	in	r27, 0x3e	; 62
    562e:	12 96       	adiw	r26, 0x02	; 2
    5630:	9c 93       	st	X, r25
    5632:	8e 93       	st	-X, r24
    5634:	11 97       	sbiw	r26, 0x01	; 1
    5636:	e8 ad       	sts	0x68, r30
    5638:	f9 ad       	sts	0x69, r31
    563a:	14 96       	adiw	r26, 0x04	; 4
    563c:	fc 93       	st	X, r31
    563e:	ee 93       	st	-X, r30
    5640:	13 97       	sbiw	r26, 0x03	; 3
    5642:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    5646:	0f 90       	pop	r0
    5648:	0f 90       	pop	r0
    564a:	0f 90       	pop	r0
    564c:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, ATA_GET_SN, Line) == RES_OK)
    564e:	8b 81       	ldd	r24, Y+3	; 0x03
    5650:	66 e1       	ldi	r22, 0x16	; 22
    5652:	a4 01       	movw	r20, r8
    5654:	0e 94 3d 07 	call	0xe7a	; 0xe7a <disk_ioctl>
    5658:	88 23       	and	r24, r24
    565a:	09 f0       	breq	.+2      	; 0x565e <main+0x47e>
    565c:	33 ce       	rjmp	.-922    	; 0x52c4 <main+0xe4>
					{ Line[20] = '\0'; xprintf(PSTR("S/N: %s\n"), Line); }
    565e:	a3 e2       	ldi	r26, 0x23	; 35
    5660:	bd e0       	ldi	r27, 0x0D	; 13
    5662:	1c 92       	st	X, r1
    5664:	00 d0       	rcall	.+0      	; 0x5666 <main+0x486>
    5666:	00 d0       	rcall	.+0      	; 0x5668 <main+0x488>
    5668:	8e e9       	ldi	r24, 0x9E	; 158
    566a:	91 e0       	ldi	r25, 0x01	; 1
    566c:	ed b7       	in	r30, 0x3d	; 61
    566e:	fe b7       	in	r31, 0x3e	; 62
    5670:	92 83       	std	Z+2, r25	; 0x02
    5672:	81 83       	std	Z+1, r24	; 0x01
    5674:	2e a9       	sts	0x4e, r18
    5676:	3f a9       	sts	0x4f, r19
    5678:	34 83       	std	Z+4, r19	; 0x04
    567a:	23 83       	std	Z+3, r18	; 0x03
    567c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	1d ce       	rjmp	.-966    	; 0x52c4 <main+0xe4>
				break;
			}
			break;

		case 'b' :
			switch (*ptr++) {
    568a:	d9 01       	movw	r26, r18
    568c:	11 96       	adiw	r26, 0x01	; 1
    568e:	4c 91       	ld	r20, X
    5690:	11 97       	sbiw	r26, 0x01	; 1
    5692:	c9 01       	movw	r24, r18
    5694:	02 96       	adiw	r24, 0x02	; 2
    5696:	9a 83       	std	Y+2, r25	; 0x02
    5698:	89 83       	std	Y+1, r24	; 0x01
    569a:	46 36       	cpi	r20, 0x66	; 102
    569c:	09 f4       	brne	.+2      	; 0x56a0 <main+0x4c0>
    569e:	65 c1       	rjmp	.+714    	; 0x596a <main+0x78a>
    56a0:	47 36       	cpi	r20, 0x67	; 103
    56a2:	30 f4       	brcc	.+12     	; 0x56b0 <main+0x4d0>
    56a4:	44 36       	cpi	r20, 0x64	; 100
    56a6:	59 f0       	breq	.+22     	; 0x56be <main+0x4de>
    56a8:	45 36       	cpi	r20, 0x65	; 101
    56aa:	09 f0       	breq	.+2      	; 0x56ae <main+0x4ce>
    56ac:	0b ce       	rjmp	.-1002   	; 0x52c4 <main+0xe4>
    56ae:	3c c0       	rjmp	.+120    	; 0x5728 <main+0x548>
    56b0:	42 37       	cpi	r20, 0x72	; 114
    56b2:	09 f4       	brne	.+2      	; 0x56b6 <main+0x4d6>
    56b4:	d0 c0       	rjmp	.+416    	; 0x5856 <main+0x676>
    56b6:	47 37       	cpi	r20, 0x77	; 119
    56b8:	09 f0       	breq	.+2      	; 0x56bc <main+0x4dc>
    56ba:	04 ce       	rjmp	.-1016   	; 0x52c4 <main+0xe4>
    56bc:	11 c1       	rjmp	.+546    	; 0x58e0 <main+0x700>
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    56be:	ce 01       	movw	r24, r28
    56c0:	01 96       	adiw	r24, 0x01	; 1
    56c2:	be 01       	movw	r22, r28
    56c4:	6d 5f       	subi	r22, 0xFD	; 253
    56c6:	7f 4f       	sbci	r23, 0xFF	; 255
    56c8:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    56cc:	88 23       	and	r24, r24
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <main+0x4f2>
    56d0:	f9 cd       	rjmp	.-1038   	; 0x52c4 <main+0xe4>
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    56d2:	8b 81       	ldd	r24, Y+3	; 0x03
    56d4:	9c 81       	ldd	r25, Y+4	; 0x04
    56d6:	ad 81       	ldd	r26, Y+5	; 0x05
    56d8:	be 81       	ldd	r27, Y+6	; 0x06
    56da:	8c 01       	movw	r16, r24
    56dc:	01 5f       	subi	r16, 0xF1	; 241
    56de:	16 4f       	sbci	r17, 0xF6	; 246
    56e0:	6c 01       	movw	r12, r24
    56e2:	7d 01       	movw	r14, r26
    56e4:	80 e2       	ldi	r24, 0x20	; 32
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	9d 8b       	std	Y+21, r25	; 0x15
    56ea:	8c 8b       	std	Y+20, r24	; 0x14
					put_dump(bp, ofs, 16);
    56ec:	c8 01       	movw	r24, r16
    56ee:	b7 01       	movw	r22, r14
    56f0:	a6 01       	movw	r20, r12
    56f2:	20 e1       	ldi	r18, 0x10	; 16
    56f4:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>

		case 'b' :
			switch (*ptr++) {
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    56f8:	8c 89       	ldd	r24, Y+20	; 0x14
    56fa:	9d 89       	ldd	r25, Y+21	; 0x15
    56fc:	9c 01       	movw	r18, r24
    56fe:	21 50       	subi	r18, 0x01	; 1
    5700:	30 40       	sbci	r19, 0x00	; 0
    5702:	3d 8b       	std	Y+21, r19	; 0x15
    5704:	2c 8b       	std	Y+20, r18	; 0x14
    5706:	89 81       	ldd	r24, Y+1	; 0x01
    5708:	9a 81       	ldd	r25, Y+2	; 0x02
    570a:	40 96       	adiw	r24, 0x10	; 16
    570c:	9a 83       	std	Y+2, r25	; 0x02
    570e:	89 83       	std	Y+1, r24	; 0x01
    5710:	80 e1       	ldi	r24, 0x10	; 16
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	a0 e0       	ldi	r26, 0x00	; 0
    5716:	b0 e0       	ldi	r27, 0x00	; 0
    5718:	c8 0e       	add	r12, r24
    571a:	d9 1e       	adc	r13, r25
    571c:	ea 1e       	adc	r14, r26
    571e:	fb 1e       	adc	r15, r27
    5720:	21 15       	cp	r18, r1
    5722:	31 05       	cpc	r19, r1
    5724:	19 f7       	brne	.-58     	; 0x56ec <main+0x50c>
    5726:	ce cd       	rjmp	.-1124   	; 0x52c4 <main+0xe4>
					put_dump(bp, ofs, 16);
				break;

			case 'e' :	/* be <addr> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    5728:	ce 01       	movw	r24, r28
    572a:	01 96       	adiw	r24, 0x01	; 1
    572c:	be 01       	movw	r22, r28
    572e:	6d 5f       	subi	r22, 0xFD	; 253
    5730:	7f 4f       	sbci	r23, 0xFF	; 255
    5732:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5736:	88 23       	and	r24, r24
    5738:	09 f4       	brne	.+2      	; 0x573c <main+0x55c>
    573a:	c4 cd       	rjmp	.-1144   	; 0x52c4 <main+0xe4>
				if (xatoi(&ptr, &p2)) {
    573c:	ce 01       	movw	r24, r28
    573e:	01 96       	adiw	r24, 0x01	; 1
    5740:	be 01       	movw	r22, r28
    5742:	69 5f       	subi	r22, 0xF9	; 249
    5744:	7f 4f       	sbci	r23, 0xFF	; 255
    5746:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    574a:	88 23       	and	r24, r24
    574c:	e1 f0       	breq	.+56     	; 0x5786 <main+0x5a6>
					do {
						Buff[p1++] = (BYTE)p2;
    574e:	0f e0       	ldi	r16, 0x0F	; 15
    5750:	19 e0       	ldi	r17, 0x09	; 9
    5752:	8b 81       	ldd	r24, Y+3	; 0x03
    5754:	9c 81       	ldd	r25, Y+4	; 0x04
    5756:	ad 81       	ldd	r26, Y+5	; 0x05
    5758:	be 81       	ldd	r27, Y+6	; 0x06
    575a:	f8 01       	movw	r30, r16
    575c:	e8 0f       	add	r30, r24
    575e:	f9 1f       	adc	r31, r25
    5760:	2f 81       	ldd	r18, Y+7	; 0x07
    5762:	20 83       	st	Z, r18
    5764:	01 96       	adiw	r24, 0x01	; 1
    5766:	a1 1d       	adc	r26, r1
    5768:	b1 1d       	adc	r27, r1
    576a:	8b 83       	std	Y+3, r24	; 0x03
    576c:	9c 83       	std	Y+4, r25	; 0x04
    576e:	ad 83       	std	Y+5, r26	; 0x05
    5770:	be 83       	std	Y+6, r27	; 0x06
					} while (xatoi(&ptr, &p2));
    5772:	ce 01       	movw	r24, r28
    5774:	01 96       	adiw	r24, 0x01	; 1
    5776:	be 01       	movw	r22, r28
    5778:	69 5f       	subi	r22, 0xF9	; 249
    577a:	7f 4f       	sbci	r23, 0xFF	; 255
    577c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5780:	88 23       	and	r24, r24
    5782:	39 f7       	brne	.-50     	; 0x5752 <main+0x572>
    5784:	9f cd       	rjmp	.-1218   	; 0x52c4 <main+0xe4>
					break;
				}
				for (;;) {
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    5786:	0f 2e       	mov	r0, r31
    5788:	f7 ea       	ldi	r31, 0xA7	; 167
    578a:	ef 2e       	mov	r14, r31
    578c:	f1 e0       	ldi	r31, 0x01	; 1
    578e:	ff 2e       	mov	r15, r31
    5790:	f0 2d       	mov	r31, r0
    5792:	0f e0       	ldi	r16, 0x0F	; 15
    5794:	19 e0       	ldi	r17, 0x09	; 9
					if (*ptr == '.') break;
					if (*ptr < ' ') { p1++; continue; }
					if (xatoi(&ptr, &p2))
						Buff[p1++] = (BYTE)p2;
					else
						xputs(PSTR("???\n"));
    5796:	0f 2e       	mov	r0, r31
    5798:	f2 eb       	ldi	r31, 0xB2	; 178
    579a:	cf 2e       	mov	r12, r31
    579c:	f1 e0       	ldi	r31, 0x01	; 1
    579e:	df 2e       	mov	r13, r31
    57a0:	f0 2d       	mov	r31, r0
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
					break;
				}
				for (;;) {
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    57a2:	8b 81       	ldd	r24, Y+3	; 0x03
    57a4:	9c 81       	ldd	r25, Y+4	; 0x04
    57a6:	ad 81       	ldd	r26, Y+5	; 0x05
    57a8:	be 81       	ldd	r27, Y+6	; 0x06
    57aa:	00 d0       	rcall	.+0      	; 0x57ac <main+0x5cc>
    57ac:	00 d0       	rcall	.+0      	; 0x57ae <main+0x5ce>
    57ae:	00 d0       	rcall	.+0      	; 0x57b0 <main+0x5d0>
    57b0:	2d b7       	in	r18, 0x3d	; 61
    57b2:	3e b7       	in	r19, 0x3e	; 62
    57b4:	2f 5f       	subi	r18, 0xFF	; 255
    57b6:	3f 4f       	sbci	r19, 0xFF	; 255
    57b8:	ed b7       	in	r30, 0x3d	; 61
    57ba:	fe b7       	in	r31, 0x3e	; 62
    57bc:	f2 82       	std	Z+2, r15	; 0x02
    57be:	e1 82       	std	Z+1, r14	; 0x01
    57c0:	f9 01       	movw	r30, r18
    57c2:	93 83       	std	Z+3, r25	; 0x03
    57c4:	82 83       	std	Z+2, r24	; 0x02
    57c6:	80 0f       	add	r24, r16
    57c8:	91 1f       	adc	r25, r17
    57ca:	dc 01       	movw	r26, r24
    57cc:	8c 91       	ld	r24, X
    57ce:	84 83       	std	Z+4, r24	; 0x04
    57d0:	15 82       	std	Z+5, r1	; 0x05
    57d2:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
					get_line(Line, sizeof Line);
    57d6:	ed b7       	in	r30, 0x3d	; 61
    57d8:	fe b7       	in	r31, 0x3e	; 62
    57da:	36 96       	adiw	r30, 0x06	; 6
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	f8 94       	cli
    57e0:	fe bf       	out	0x3e, r31	; 62
    57e2:	0f be       	out	0x3f, r0	; 63
    57e4:	ed bf       	out	0x3d, r30	; 61
    57e6:	c4 01       	movw	r24, r8
    57e8:	64 e6       	ldi	r22, 0x64	; 100
    57ea:	70 e0       	ldi	r23, 0x00	; 0
    57ec:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <get_line>
					ptr = Line;
    57f0:	9a 82       	std	Y+2, r9	; 0x02
    57f2:	89 82       	std	Y+1, r8	; 0x01
					if (*ptr == '.') break;
    57f4:	d4 01       	movw	r26, r8
    57f6:	8c 91       	ld	r24, X
    57f8:	8e 32       	cpi	r24, 0x2E	; 46
    57fa:	09 f4       	brne	.+2      	; 0x57fe <main+0x61e>
    57fc:	63 cd       	rjmp	.-1338   	; 0x52c4 <main+0xe4>
					if (*ptr < ' ') { p1++; continue; }
    57fe:	80 32       	cpi	r24, 0x20	; 32
    5800:	60 f4       	brcc	.+24     	; 0x581a <main+0x63a>
    5802:	8b 81       	ldd	r24, Y+3	; 0x03
    5804:	9c 81       	ldd	r25, Y+4	; 0x04
    5806:	ad 81       	ldd	r26, Y+5	; 0x05
    5808:	be 81       	ldd	r27, Y+6	; 0x06
    580a:	01 96       	adiw	r24, 0x01	; 1
    580c:	a1 1d       	adc	r26, r1
    580e:	b1 1d       	adc	r27, r1
    5810:	8b 83       	std	Y+3, r24	; 0x03
    5812:	9c 83       	std	Y+4, r25	; 0x04
    5814:	ad 83       	std	Y+5, r26	; 0x05
    5816:	be 83       	std	Y+6, r27	; 0x06
    5818:	c4 cf       	rjmp	.-120    	; 0x57a2 <main+0x5c2>
					if (xatoi(&ptr, &p2))
    581a:	ce 01       	movw	r24, r28
    581c:	01 96       	adiw	r24, 0x01	; 1
    581e:	be 01       	movw	r22, r28
    5820:	69 5f       	subi	r22, 0xF9	; 249
    5822:	7f 4f       	sbci	r23, 0xFF	; 255
    5824:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5828:	88 23       	and	r24, r24
    582a:	89 f0       	breq	.+34     	; 0x584e <main+0x66e>
						Buff[p1++] = (BYTE)p2;
    582c:	8b 81       	ldd	r24, Y+3	; 0x03
    582e:	9c 81       	ldd	r25, Y+4	; 0x04
    5830:	ad 81       	ldd	r26, Y+5	; 0x05
    5832:	be 81       	ldd	r27, Y+6	; 0x06
    5834:	f8 01       	movw	r30, r16
    5836:	e8 0f       	add	r30, r24
    5838:	f9 1f       	adc	r31, r25
    583a:	2f 81       	ldd	r18, Y+7	; 0x07
    583c:	20 83       	st	Z, r18
    583e:	01 96       	adiw	r24, 0x01	; 1
    5840:	a1 1d       	adc	r26, r1
    5842:	b1 1d       	adc	r27, r1
    5844:	8b 83       	std	Y+3, r24	; 0x03
    5846:	9c 83       	std	Y+4, r25	; 0x04
    5848:	ad 83       	std	Y+5, r26	; 0x05
    584a:	be 83       	std	Y+6, r27	; 0x06
    584c:	aa cf       	rjmp	.-172    	; 0x57a2 <main+0x5c2>
					else
						xputs(PSTR("???\n"));
    584e:	c6 01       	movw	r24, r12
    5850:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
    5854:	a6 cf       	rjmp	.-180    	; 0x57a2 <main+0x5c2>
				}
				break;

			case 'r' :	/* br <phy_drv#> <sector> [<n>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    5856:	ce 01       	movw	r24, r28
    5858:	01 96       	adiw	r24, 0x01	; 1
    585a:	be 01       	movw	r22, r28
    585c:	6d 5f       	subi	r22, 0xFD	; 253
    585e:	7f 4f       	sbci	r23, 0xFF	; 255
    5860:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5864:	88 23       	and	r24, r24
    5866:	09 f4       	brne	.+2      	; 0x586a <main+0x68a>
    5868:	2d cd       	rjmp	.-1446   	; 0x52c4 <main+0xe4>
				if (!xatoi(&ptr, &p2)) break;
    586a:	ce 01       	movw	r24, r28
    586c:	01 96       	adiw	r24, 0x01	; 1
    586e:	be 01       	movw	r22, r28
    5870:	69 5f       	subi	r22, 0xF9	; 249
    5872:	7f 4f       	sbci	r23, 0xFF	; 255
    5874:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5878:	88 23       	and	r24, r24
    587a:	09 f4       	brne	.+2      	; 0x587e <main+0x69e>
    587c:	23 cd       	rjmp	.-1466   	; 0x52c4 <main+0xe4>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    587e:	ce 01       	movw	r24, r28
    5880:	01 96       	adiw	r24, 0x01	; 1
    5882:	be 01       	movw	r22, r28
    5884:	65 5f       	subi	r22, 0xF5	; 245
    5886:	7f 4f       	sbci	r23, 0xFF	; 255
    5888:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    588c:	88 23       	and	r24, r24
    588e:	41 f4       	brne	.+16     	; 0x58a0 <main+0x6c0>
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	a0 e0       	ldi	r26, 0x00	; 0
    5896:	b0 e0       	ldi	r27, 0x00	; 0
    5898:	8b 87       	std	Y+11, r24	; 0x0b
    589a:	9c 87       	std	Y+12, r25	; 0x0c
    589c:	ad 87       	std	Y+13, r26	; 0x0d
    589e:	be 87       	std	Y+14, r27	; 0x0e
				xprintf(PSTR("rc=%u\n"), disk_read((BYTE)p1, Buff, p2, p3));
    58a0:	2f 81       	ldd	r18, Y+7	; 0x07
    58a2:	38 85       	ldd	r19, Y+8	; 0x08
    58a4:	49 85       	ldd	r20, Y+9	; 0x09
    58a6:	5a 85       	ldd	r21, Y+10	; 0x0a
    58a8:	8b 81       	ldd	r24, Y+3	; 0x03
    58aa:	6f e0       	ldi	r22, 0x0F	; 15
    58ac:	79 e0       	ldi	r23, 0x09	; 9
    58ae:	0b 85       	ldd	r16, Y+11	; 0x0b
    58b0:	0e 94 74 06 	call	0xce8	; 0xce8 <disk_read>
    58b4:	00 d0       	rcall	.+0      	; 0x58b6 <main+0x6d6>
    58b6:	00 d0       	rcall	.+0      	; 0x58b8 <main+0x6d8>
    58b8:	ed b7       	in	r30, 0x3d	; 61
    58ba:	fe b7       	in	r31, 0x3e	; 62
    58bc:	31 96       	adiw	r30, 0x01	; 1
    58be:	27 eb       	ldi	r18, 0xB7	; 183
    58c0:	31 e0       	ldi	r19, 0x01	; 1
    58c2:	ad b7       	in	r26, 0x3d	; 61
    58c4:	be b7       	in	r27, 0x3e	; 62
    58c6:	12 96       	adiw	r26, 0x02	; 2
    58c8:	3c 93       	st	X, r19
    58ca:	2e 93       	st	-X, r18
    58cc:	11 97       	sbiw	r26, 0x01	; 1
    58ce:	82 83       	std	Z+2, r24	; 0x02
    58d0:	13 82       	std	Z+3, r1	; 0x03
    58d2:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				break;
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	0f 90       	pop	r0
    58dc:	0f 90       	pop	r0
    58de:	f2 cc       	rjmp	.-1564   	; 0x52c4 <main+0xe4>

			case 'w' :	/* bw <phy_drv#> <sector> [<n>] - Write R/W buffer into disk */
				if (!xatoi(&ptr, &p1)) break;
    58e0:	ce 01       	movw	r24, r28
    58e2:	01 96       	adiw	r24, 0x01	; 1
    58e4:	be 01       	movw	r22, r28
    58e6:	6d 5f       	subi	r22, 0xFD	; 253
    58e8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ea:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    58ee:	88 23       	and	r24, r24
    58f0:	09 f4       	brne	.+2      	; 0x58f4 <main+0x714>
    58f2:	e8 cc       	rjmp	.-1584   	; 0x52c4 <main+0xe4>
				if (!xatoi(&ptr, &p2)) break;
    58f4:	ce 01       	movw	r24, r28
    58f6:	01 96       	adiw	r24, 0x01	; 1
    58f8:	be 01       	movw	r22, r28
    58fa:	69 5f       	subi	r22, 0xF9	; 249
    58fc:	7f 4f       	sbci	r23, 0xFF	; 255
    58fe:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5902:	88 23       	and	r24, r24
    5904:	09 f4       	brne	.+2      	; 0x5908 <main+0x728>
    5906:	de cc       	rjmp	.-1604   	; 0x52c4 <main+0xe4>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    5908:	ce 01       	movw	r24, r28
    590a:	01 96       	adiw	r24, 0x01	; 1
    590c:	be 01       	movw	r22, r28
    590e:	65 5f       	subi	r22, 0xF5	; 245
    5910:	7f 4f       	sbci	r23, 0xFF	; 255
    5912:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5916:	88 23       	and	r24, r24
    5918:	41 f4       	brne	.+16     	; 0x592a <main+0x74a>
    591a:	81 e0       	ldi	r24, 0x01	; 1
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	a0 e0       	ldi	r26, 0x00	; 0
    5920:	b0 e0       	ldi	r27, 0x00	; 0
    5922:	8b 87       	std	Y+11, r24	; 0x0b
    5924:	9c 87       	std	Y+12, r25	; 0x0c
    5926:	ad 87       	std	Y+13, r26	; 0x0d
    5928:	be 87       	std	Y+14, r27	; 0x0e
				xprintf(PSTR("rc=%u\n"), disk_write((BYTE)p1, Buff, p2, p3));
    592a:	2f 81       	ldd	r18, Y+7	; 0x07
    592c:	38 85       	ldd	r19, Y+8	; 0x08
    592e:	49 85       	ldd	r20, Y+9	; 0x09
    5930:	5a 85       	ldd	r21, Y+10	; 0x0a
    5932:	8b 81       	ldd	r24, Y+3	; 0x03
    5934:	6f e0       	ldi	r22, 0x0F	; 15
    5936:	79 e0       	ldi	r23, 0x09	; 9
    5938:	0b 85       	ldd	r16, Y+11	; 0x0b
    593a:	0e 94 ca 06 	call	0xd94	; 0xd94 <disk_write>
    593e:	00 d0       	rcall	.+0      	; 0x5940 <main+0x760>
    5940:	00 d0       	rcall	.+0      	; 0x5942 <main+0x762>
    5942:	ed b7       	in	r30, 0x3d	; 61
    5944:	fe b7       	in	r31, 0x3e	; 62
    5946:	31 96       	adiw	r30, 0x01	; 1
    5948:	2e eb       	ldi	r18, 0xBE	; 190
    594a:	31 e0       	ldi	r19, 0x01	; 1
    594c:	ad b7       	in	r26, 0x3d	; 61
    594e:	be b7       	in	r27, 0x3e	; 62
    5950:	12 96       	adiw	r26, 0x02	; 2
    5952:	3c 93       	st	X, r19
    5954:	2e 93       	st	-X, r18
    5956:	11 97       	sbiw	r26, 0x01	; 1
    5958:	82 83       	std	Z+2, r24	; 0x02
    595a:	13 82       	std	Z+3, r1	; 0x03
    595c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				break;
    5960:	0f 90       	pop	r0
    5962:	0f 90       	pop	r0
    5964:	0f 90       	pop	r0
    5966:	0f 90       	pop	r0
    5968:	ad cc       	rjmp	.-1702   	; 0x52c4 <main+0xe4>

			case 'f' :	/* bf <n> - Fill working buffer */
				if (!xatoi(&ptr, &p1)) break;
    596a:	ce 01       	movw	r24, r28
    596c:	01 96       	adiw	r24, 0x01	; 1
    596e:	be 01       	movw	r22, r28
    5970:	6d 5f       	subi	r22, 0xFD	; 253
    5972:	7f 4f       	sbci	r23, 0xFF	; 255
    5974:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5978:	88 23       	and	r24, r24
    597a:	09 f4       	brne	.+2      	; 0x597e <main+0x79e>
    597c:	a3 cc       	rjmp	.-1722   	; 0x52c4 <main+0xe4>
				memset(Buff, (BYTE)p1, sizeof Buff);
    597e:	6b 81       	ldd	r22, Y+3	; 0x03
    5980:	8f e0       	ldi	r24, 0x0F	; 15
    5982:	99 e0       	ldi	r25, 0x09	; 9
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	54 e0       	ldi	r21, 0x04	; 4
    598a:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <memset>
				break;
    598e:	9a cc       	rjmp	.-1740   	; 0x52c4 <main+0xe4>

			}
			break;

		case 'f' :
			switch (*ptr++) {
    5990:	d9 01       	movw	r26, r18
    5992:	11 96       	adiw	r26, 0x01	; 1
    5994:	ec 91       	ld	r30, X
    5996:	11 97       	sbiw	r26, 0x01	; 1
    5998:	b9 01       	movw	r22, r18
    599a:	6e 5f       	subi	r22, 0xFE	; 254
    599c:	7f 4f       	sbci	r23, 0xFF	; 255
    599e:	7a 83       	std	Y+2, r23	; 0x02
    59a0:	69 83       	std	Y+1, r22	; 0x01
    59a2:	8e 2f       	mov	r24, r30
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	fc 01       	movw	r30, r24
    59a8:	e7 55       	subi	r30, 0x57	; 87
    59aa:	f0 40       	sbci	r31, 0x00	; 0
    59ac:	e2 32       	cpi	r30, 0x22	; 34
    59ae:	f1 05       	cpc	r31, r1
    59b0:	08 f0       	brcs	.+2      	; 0x59b4 <main+0x7d4>
    59b2:	88 cc       	rjmp	.-1776   	; 0x52c4 <main+0xe4>
    59b4:	e2 5c       	subi	r30, 0xC2	; 194
    59b6:	ff 4f       	sbci	r31, 0xFF	; 255
    59b8:	ee 0f       	add	r30, r30
    59ba:	ff 1f       	adc	r31, r31
    59bc:	05 90       	lpm	r0, Z+
    59be:	f4 91       	lpm	r31, Z
    59c0:	e0 2d       	mov	r30, r0
    59c2:	09 94       	ijmp
				while (*ptr == ' ') ptr++;
				put_rc(f_utime(ptr, &Finfo));
				break;

			case 'x' : /* fx <src_name> <dst_name> - Copy file */
				while (*ptr == ' ') ptr++;
    59c4:	f9 01       	movw	r30, r18
    59c6:	82 81       	ldd	r24, Z+2	; 0x02
    59c8:	80 32       	cpi	r24, 0x20	; 32
    59ca:	09 f4       	brne	.+2      	; 0x59ce <main+0x7ee>
    59cc:	4b c6       	rjmp	.+3222   	; 0x6664 <main+0x1484>
    59ce:	53 c6       	rjmp	.+3238   	; 0x6676 <main+0x1496>
				while (*ptr2 == ' ') ptr2++;
				put_rc(f_rename(ptr, ptr2));
				break;

			case 'u' :	/* fu <name> - Unlink a file or dir */
				while (*ptr == ' ') ptr++;
    59d0:	d9 01       	movw	r26, r18
    59d2:	12 96       	adiw	r26, 0x02	; 2
    59d4:	8c 91       	ld	r24, X
    59d6:	12 97       	sbiw	r26, 0x02	; 2
    59d8:	80 32       	cpi	r24, 0x20	; 32
    59da:	09 f4       	brne	.+2      	; 0x59de <main+0x7fe>
    59dc:	36 c5       	rjmp	.+2668   	; 0x644a <main+0x126a>
    59de:	3e c5       	rjmp	.+2684   	; 0x645c <main+0x127c>
				if (!xatoi(&ptr, &p1)) break;
				put_rc(f_mount((BYTE)p1, &Fatfs[p1]));
				break;

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
    59e0:	f9 01       	movw	r30, r18
    59e2:	82 81       	ldd	r24, Z+2	; 0x02
    59e4:	80 32       	cpi	r24, 0x20	; 32
    59e6:	e1 f1       	breq	.+120    	; 0x5a60 <main+0x880>
    59e8:	44 c0       	rjmp	.+136    	; 0x5a72 <main+0x892>
			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&File[0]));
				break;

			case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
				while (*ptr == ' ') ptr++;
    59ea:	d9 01       	movw	r26, r18
    59ec:	12 96       	adiw	r26, 0x02	; 2
    59ee:	8c 91       	ld	r24, X
    59f0:	12 97       	sbiw	r26, 0x02	; 2
    59f2:	80 32       	cpi	r24, 0x20	; 32
    59f4:	09 f4       	brne	.+2      	; 0x59f8 <main+0x818>
    59f6:	00 c5       	rjmp	.+2560   	; 0x63f8 <main+0x1218>
    59f8:	08 c5       	rjmp	.+2576   	; 0x640a <main+0x122a>
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
				);
				break;

			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
    59fa:	f9 01       	movw	r30, r18
    59fc:	82 81       	ldd	r24, Z+2	; 0x02
    59fe:	80 32       	cpi	r24, 0x20	; 32
    5a00:	09 f4       	brne	.+2      	; 0x5a04 <main+0x824>
    5a02:	44 c1       	rjmp	.+648    	; 0x5c8c <main+0xaac>
    5a04:	4c c1       	rjmp	.+664    	; 0x5c9e <main+0xabe>
				while (*ptr == ' ') ptr++;
				put_rc(f_unlink(ptr));
				break;

			case 'k' :	/* fk <name> - Create a directory */
				while (*ptr == ' ') ptr++;
    5a06:	d9 01       	movw	r26, r18
    5a08:	12 96       	adiw	r26, 0x02	; 2
    5a0a:	8c 91       	ld	r24, X
    5a0c:	12 97       	sbiw	r26, 0x02	; 2
    5a0e:	80 32       	cpi	r24, 0x20	; 32
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <main+0x834>
    5a12:	2b c5       	rjmp	.+2646   	; 0x646a <main+0x128a>
    5a14:	33 c5       	rjmp	.+2662   	; 0x647c <main+0x129c>
				f_close(&File[0]);
				f_close(&File[1]);
				break;
#if _FS_RPATH
			case 'g' :	/* fg <path> - Change current directory */
				while (*ptr == ' ') ptr++;
    5a16:	f9 01       	movw	r30, r18
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	80 32       	cpi	r24, 0x20	; 32
    5a1c:	09 f4       	brne	.+2      	; 0x5a20 <main+0x840>
    5a1e:	28 c7       	rjmp	.+3664   	; 0x6870 <main+0x1690>
    5a20:	30 c7       	rjmp	.+3680   	; 0x6882 <main+0x16a2>

		case 'f' :
			switch (*ptr++) {

			case 'i' :	/* fi <log drv#> - Initialize logical drive */
				if (!xatoi(&ptr, &p1)) break;
    5a22:	ce 01       	movw	r24, r28
    5a24:	01 96       	adiw	r24, 0x01	; 1
    5a26:	be 01       	movw	r22, r28
    5a28:	6d 5f       	subi	r22, 0xFD	; 253
    5a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2c:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5a30:	88 23       	and	r24, r24
    5a32:	09 f4       	brne	.+2      	; 0x5a36 <main+0x856>
    5a34:	47 cc       	rjmp	.-1906   	; 0x52c4 <main+0xe4>
				put_rc(f_mount((BYTE)p1, &Fatfs[p1]));
    5a36:	0b 81       	ldd	r16, Y+3	; 0x03
    5a38:	1c 81       	ldd	r17, Y+4	; 0x04
    5a3a:	2d 81       	ldd	r18, Y+5	; 0x05
    5a3c:	3e 81       	ldd	r19, Y+6	; 0x06
    5a3e:	82 e3       	ldi	r24, 0x32	; 50
    5a40:	92 e0       	ldi	r25, 0x02	; 2
    5a42:	08 9f       	mul	r16, r24
    5a44:	b0 01       	movw	r22, r0
    5a46:	09 9f       	mul	r16, r25
    5a48:	70 0d       	add	r23, r0
    5a4a:	18 9f       	mul	r17, r24
    5a4c:	70 0d       	add	r23, r0
    5a4e:	11 24       	eor	r1, r1
    5a50:	60 58       	subi	r22, 0x80	; 128
    5a52:	7d 4f       	sbci	r23, 0xFD	; 253
    5a54:	80 2f       	mov	r24, r16
    5a56:	0e 94 dd 18 	call	0x31ba	; 0x31ba <f_mount>
    5a5a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    5a5e:	32 cc       	rjmp	.-1948   	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    5a60:	f9 01       	movw	r30, r18
    5a62:	33 96       	adiw	r30, 0x03	; 3
				if (!xatoi(&ptr, &p1)) break;
				put_rc(f_mount((BYTE)p1, &Fatfs[p1]));
				break;

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
    5a64:	6f 5f       	subi	r22, 0xFF	; 255
    5a66:	7f 4f       	sbci	r23, 0xFF	; 255
    5a68:	7a 83       	std	Y+2, r23	; 0x02
    5a6a:	69 83       	std	Y+1, r22	; 0x01
    5a6c:	81 91       	ld	r24, Z+
    5a6e:	80 32       	cpi	r24, 0x20	; 32
    5a70:	c9 f3       	breq	.-14     	; 0x5a64 <main+0x884>
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
    5a72:	cb 01       	movw	r24, r22
    5a74:	be 01       	movw	r22, r28
    5a76:	69 5f       	subi	r22, 0xF9	; 249
    5a78:	7f 4f       	sbci	r23, 0xFF	; 255
    5a7a:	ae 01       	movw	r20, r28
    5a7c:	4a 5e       	subi	r20, 0xEA	; 234
    5a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a80:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <f_getfree>
				if (res) { put_rc(res); break; }
    5a84:	88 23       	and	r24, r24
    5a86:	19 f0       	breq	.+6      	; 0x5a8e <main+0x8ae>
    5a88:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    5a8c:	1b cc       	rjmp	.-1994   	; 0x52c4 <main+0xe4>
				xprintf(PSTR("FAT type = %u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
							 "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						fs->fs_type, (DWORD)fs->csize * 512, fs->n_fats,
    5a8e:	2e 89       	ldd	r18, Y+22	; 0x16
    5a90:	3f 89       	ldd	r19, Y+23	; 0x17

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("FAT type = %u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    5a92:	4d b7       	in	r20, 0x3d	; 61
    5a94:	5e b7       	in	r21, 0x3e	; 62
    5a96:	40 52       	subi	r20, 0x20	; 32
    5a98:	50 40       	sbci	r21, 0x00	; 0
    5a9a:	0f b6       	in	r0, 0x3f	; 63
    5a9c:	f8 94       	cli
    5a9e:	5e bf       	out	0x3e, r21	; 62
    5aa0:	0f be       	out	0x3f, r0	; 63
    5aa2:	4d bf       	out	0x3d, r20	; 61
    5aa4:	ed b7       	in	r30, 0x3d	; 61
    5aa6:	fe b7       	in	r31, 0x3e	; 62
    5aa8:	31 96       	adiw	r30, 0x01	; 1
    5aaa:	85 ec       	ldi	r24, 0xC5	; 197
    5aac:	91 e0       	ldi	r25, 0x01	; 1
    5aae:	ad b7       	in	r26, 0x3d	; 61
    5ab0:	be b7       	in	r27, 0x3e	; 62
    5ab2:	12 96       	adiw	r26, 0x02	; 2
    5ab4:	9c 93       	st	X, r25
    5ab6:	8e 93       	st	-X, r24
    5ab8:	11 97       	sbiw	r26, 0x01	; 1
    5aba:	d9 01       	movw	r26, r18
    5abc:	8c 91       	ld	r24, X
    5abe:	82 83       	std	Z+2, r24	; 0x02
    5ac0:	13 82       	std	Z+3, r1	; 0x03
							 "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						fs->fs_type, (DWORD)fs->csize * 512, fs->n_fats,
    5ac2:	12 96       	adiw	r26, 0x02	; 2
    5ac4:	8c 91       	ld	r24, X
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	a0 e0       	ldi	r26, 0x00	; 0
    5aca:	b0 e0       	ldi	r27, 0x00	; 0

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("FAT type = %u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    5acc:	07 2e       	mov	r0, r23
    5ace:	79 e0       	ldi	r23, 0x09	; 9
    5ad0:	88 0f       	add	r24, r24
    5ad2:	99 1f       	adc	r25, r25
    5ad4:	aa 1f       	adc	r26, r26
    5ad6:	bb 1f       	adc	r27, r27
    5ad8:	7a 95       	dec	r23
    5ada:	d1 f7       	brne	.-12     	; 0x5ad0 <main+0x8f0>
    5adc:	70 2d       	mov	r23, r0
    5ade:	84 83       	std	Z+4, r24	; 0x04
    5ae0:	95 83       	std	Z+5, r25	; 0x05
    5ae2:	a6 83       	std	Z+6, r26	; 0x06
    5ae4:	b7 83       	std	Z+7, r27	; 0x07
    5ae6:	d9 01       	movw	r26, r18
    5ae8:	13 96       	adiw	r26, 0x03	; 3
    5aea:	8c 91       	ld	r24, X
    5aec:	13 97       	sbiw	r26, 0x03	; 3
    5aee:	80 87       	std	Z+8, r24	; 0x08
    5af0:	11 86       	std	Z+9, r1	; 0x09
    5af2:	18 96       	adiw	r26, 0x08	; 8
    5af4:	8d 91       	ld	r24, X+
    5af6:	9c 91       	ld	r25, X
    5af8:	19 97       	sbiw	r26, 0x09	; 9
    5afa:	93 87       	std	Z+11, r25	; 0x0b
    5afc:	82 87       	std	Z+10, r24	; 0x0a
    5afe:	5e 96       	adiw	r26, 0x1e	; 30
    5b00:	4d 91       	ld	r20, X+
    5b02:	5d 91       	ld	r21, X+
    5b04:	6d 91       	ld	r22, X+
    5b06:	7c 91       	ld	r23, X
    5b08:	91 97       	sbiw	r26, 0x21	; 33
    5b0a:	44 87       	std	Z+12, r20	; 0x0c
    5b0c:	55 87       	std	Z+13, r21	; 0x0d
    5b0e:	66 87       	std	Z+14, r22	; 0x0e
    5b10:	77 87       	std	Z+15, r23	; 0x0f
    5b12:	5a 96       	adiw	r26, 0x1a	; 26
    5b14:	4d 91       	ld	r20, X+
    5b16:	5d 91       	ld	r21, X+
    5b18:	6d 91       	ld	r22, X+
    5b1a:	7c 91       	ld	r23, X
    5b1c:	5d 97       	sbiw	r26, 0x1d	; 29
    5b1e:	db 01       	movw	r26, r22
    5b20:	ca 01       	movw	r24, r20
    5b22:	02 97       	sbiw	r24, 0x02	; 2
    5b24:	a1 09       	sbc	r26, r1
    5b26:	b1 09       	sbc	r27, r1
    5b28:	80 8b       	std	Z+16, r24	; 0x10
    5b2a:	91 8b       	std	Z+17, r25	; 0x11
    5b2c:	a2 8b       	std	Z+18, r26	; 0x12
    5b2e:	b3 8b       	std	Z+19, r27	; 0x13
    5b30:	d9 01       	movw	r26, r18
    5b32:	92 96       	adiw	r26, 0x22	; 34
    5b34:	4d 91       	ld	r20, X+
    5b36:	5d 91       	ld	r21, X+
    5b38:	6d 91       	ld	r22, X+
    5b3a:	7c 91       	ld	r23, X
    5b3c:	95 97       	sbiw	r26, 0x25	; 37
    5b3e:	44 8b       	std	Z+20, r20	; 0x14
    5b40:	55 8b       	std	Z+21, r21	; 0x15
    5b42:	66 8b       	std	Z+22, r22	; 0x16
    5b44:	77 8b       	std	Z+23, r23	; 0x17
    5b46:	96 96       	adiw	r26, 0x26	; 38
    5b48:	4d 91       	ld	r20, X+
    5b4a:	5d 91       	ld	r21, X+
    5b4c:	6d 91       	ld	r22, X+
    5b4e:	7c 91       	ld	r23, X
    5b50:	99 97       	sbiw	r26, 0x29	; 41
    5b52:	40 8f       	std	Z+24, r20	; 0x18
    5b54:	51 8f       	std	Z+25, r21	; 0x19
    5b56:	62 8f       	std	Z+26, r22	; 0x1a
    5b58:	73 8f       	std	Z+27, r23	; 0x1b
    5b5a:	9a 96       	adiw	r26, 0x2a	; 42
    5b5c:	4d 91       	ld	r20, X+
    5b5e:	5d 91       	ld	r21, X+
    5b60:	6d 91       	ld	r22, X+
    5b62:	7c 91       	ld	r23, X
    5b64:	9d 97       	sbiw	r26, 0x2d	; 45
    5b66:	44 8f       	std	Z+28, r20	; 0x1c
    5b68:	55 8f       	std	Z+29, r21	; 0x1d
    5b6a:	66 8f       	std	Z+30, r22	; 0x1e
    5b6c:	77 8f       	std	Z+31, r23	; 0x1f
    5b6e:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						fs->fs_type, (DWORD)fs->csize * 512, fs->n_fats,
						fs->n_rootdir, fs->fsize, fs->n_fatent - 2,
						fs->fatbase, fs->dirbase, fs->database
				);
				AccSize = AccFiles = AccDirs = 0;
    5b72:	10 92 74 0d 	sts	0x0D74, r1
    5b76:	10 92 73 0d 	sts	0x0D73, r1
    5b7a:	10 92 76 0d 	sts	0x0D76, r1
    5b7e:	10 92 75 0d 	sts	0x0D75, r1
    5b82:	10 92 0b 09 	sts	0x090B, r1
    5b86:	10 92 0c 09 	sts	0x090C, r1
    5b8a:	10 92 0d 09 	sts	0x090D, r1
    5b8e:	10 92 0e 09 	sts	0x090E, r1
				strcpy((char*)Buff, ptr);
    5b92:	ed b7       	in	r30, 0x3d	; 61
    5b94:	fe b7       	in	r31, 0x3e	; 62
    5b96:	b0 96       	adiw	r30, 0x20	; 32
    5b98:	0f b6       	in	r0, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	fe bf       	out	0x3e, r31	; 62
    5b9e:	0f be       	out	0x3f, r0	; 63
    5ba0:	ed bf       	out	0x3d, r30	; 61
    5ba2:	0f e0       	ldi	r16, 0x0F	; 15
    5ba4:	19 e0       	ldi	r17, 0x09	; 9
    5ba6:	69 81       	ldd	r22, Y+1	; 0x01
    5ba8:	7a 81       	ldd	r23, Y+2	; 0x02
    5baa:	c8 01       	movw	r24, r16
    5bac:	0e 94 83 36 	call	0x6d06	; 0x6d06 <strcpy>
				res = scan_files((char*)Buff);
    5bb0:	c8 01       	movw	r24, r16
    5bb2:	0e 94 1e 28 	call	0x503c	; 0x503c <scan_files>
				if (res) { put_rc(res); break; }
    5bb6:	88 23       	and	r24, r24
    5bb8:	19 f0       	breq	.+6      	; 0x5bc0 <main+0x9e0>
    5bba:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    5bbe:	82 cb       	rjmp	.-2300   	; 0x52c4 <main+0xe4>
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
							 "%lu KB total disk space.\n%lu KB available.\n"),
						AccFiles, AccSize, AccDirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
    5bc0:	2e 89       	ldd	r18, Y+22	; 0x16
    5bc2:	3f 89       	ldd	r19, Y+23	; 0x17
				);
				AccSize = AccFiles = AccDirs = 0;
				strcpy((char*)Buff, ptr);
				res = scan_files((char*)Buff);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    5bc4:	d9 01       	movw	r26, r18
    5bc6:	12 96       	adiw	r26, 0x02	; 2
    5bc8:	cc 90       	ld	r12, X
    5bca:	c6 94       	lsr	r12
    5bcc:	ed b7       	in	r30, 0x3d	; 61
    5bce:	fe b7       	in	r31, 0x3e	; 62
    5bd0:	72 97       	sbiw	r30, 0x12	; 18
    5bd2:	0f b6       	in	r0, 0x3f	; 63
    5bd4:	f8 94       	cli
    5bd6:	fe bf       	out	0x3e, r31	; 62
    5bd8:	0f be       	out	0x3f, r0	; 63
    5bda:	ed bf       	out	0x3d, r30	; 61
    5bdc:	0d b7       	in	r16, 0x3d	; 61
    5bde:	1e b7       	in	r17, 0x3e	; 62
    5be0:	0f 5f       	subi	r16, 0xFF	; 255
    5be2:	1f 4f       	sbci	r17, 0xFF	; 255
    5be4:	8c e8       	ldi	r24, 0x8C	; 140
    5be6:	92 e0       	ldi	r25, 0x02	; 2
    5be8:	92 83       	std	Z+2, r25	; 0x02
    5bea:	81 83       	std	Z+1, r24	; 0x01
    5bec:	80 91 75 0d 	lds	r24, 0x0D75
    5bf0:	90 91 76 0d 	lds	r25, 0x0D76
    5bf4:	d8 01       	movw	r26, r16
    5bf6:	13 96       	adiw	r26, 0x03	; 3
    5bf8:	9c 93       	st	X, r25
    5bfa:	8e 93       	st	-X, r24
    5bfc:	12 97       	sbiw	r26, 0x02	; 2
    5bfe:	80 91 0b 09 	lds	r24, 0x090B
    5c02:	90 91 0c 09 	lds	r25, 0x090C
    5c06:	a0 91 0d 09 	lds	r26, 0x090D
    5c0a:	b0 91 0e 09 	lds	r27, 0x090E
    5c0e:	f8 01       	movw	r30, r16
    5c10:	84 83       	std	Z+4, r24	; 0x04
    5c12:	95 83       	std	Z+5, r25	; 0x05
    5c14:	a6 83       	std	Z+6, r26	; 0x06
    5c16:	b7 83       	std	Z+7, r27	; 0x07
    5c18:	80 91 73 0d 	lds	r24, 0x0D73
    5c1c:	90 91 74 0d 	lds	r25, 0x0D74
    5c20:	91 87       	std	Z+9, r25	; 0x09
    5c22:	80 87       	std	Z+8, r24	; 0x08
    5c24:	dd 24       	eor	r13, r13
    5c26:	ee 24       	eor	r14, r14
    5c28:	ff 24       	eor	r15, r15
							 "%lu KB total disk space.\n%lu KB available.\n"),
						AccFiles, AccSize, AccDirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
    5c2a:	f9 01       	movw	r30, r18
    5c2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c2e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5c30:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5c32:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5c34:	9c 01       	movw	r18, r24
    5c36:	ad 01       	movw	r20, r26
    5c38:	22 50       	subi	r18, 0x02	; 2
    5c3a:	30 40       	sbci	r19, 0x00	; 0
    5c3c:	40 40       	sbci	r20, 0x00	; 0
    5c3e:	50 40       	sbci	r21, 0x00	; 0
				);
				AccSize = AccFiles = AccDirs = 0;
				strcpy((char*)Buff, ptr);
				res = scan_files((char*)Buff);
				if (res) { put_rc(res); break; }
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    5c40:	c7 01       	movw	r24, r14
    5c42:	b6 01       	movw	r22, r12
    5c44:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    5c48:	dc 01       	movw	r26, r24
    5c4a:	cb 01       	movw	r24, r22
    5c4c:	f8 01       	movw	r30, r16
    5c4e:	82 87       	std	Z+10, r24	; 0x0a
    5c50:	93 87       	std	Z+11, r25	; 0x0b
    5c52:	a4 87       	std	Z+12, r26	; 0x0c
    5c54:	b5 87       	std	Z+13, r27	; 0x0d
    5c56:	2f 81       	ldd	r18, Y+7	; 0x07
    5c58:	38 85       	ldd	r19, Y+8	; 0x08
    5c5a:	49 85       	ldd	r20, Y+9	; 0x09
    5c5c:	5a 85       	ldd	r21, Y+10	; 0x0a
    5c5e:	c7 01       	movw	r24, r14
    5c60:	b6 01       	movw	r22, r12
    5c62:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    5c66:	dc 01       	movw	r26, r24
    5c68:	cb 01       	movw	r24, r22
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	86 87       	std	Z+14, r24	; 0x0e
    5c6e:	97 87       	std	Z+15, r25	; 0x0f
    5c70:	a0 8b       	std	Z+16, r26	; 0x10
    5c72:	b1 8b       	std	Z+17, r27	; 0x11
    5c74:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
							 "%lu KB total disk space.\n%lu KB available.\n"),
						AccFiles, AccSize, AccDirs,
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
				);
				break;
    5c78:	2d b7       	in	r18, 0x3d	; 61
    5c7a:	3e b7       	in	r19, 0x3e	; 62
    5c7c:	2e 5e       	subi	r18, 0xEE	; 238
    5c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	f8 94       	cli
    5c84:	3e bf       	out	0x3e, r19	; 62
    5c86:	0f be       	out	0x3f, r0	; 63
    5c88:	2d bf       	out	0x3d, r18	; 61
    5c8a:	1c cb       	rjmp	.-2504   	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    5c8c:	f9 01       	movw	r30, r18
    5c8e:	33 96       	adiw	r30, 0x03	; 3
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
				);
				break;

			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	7a 83       	std	Y+2, r23	; 0x02
    5c96:	69 83       	std	Y+1, r22	; 0x01
    5c98:	81 91       	ld	r24, Z+
    5c9a:	80 32       	cpi	r24, 0x20	; 32
    5c9c:	c9 f3       	breq	.-14     	; 0x5c90 <main+0xab0>
				res = f_opendir(&dir, ptr);
    5c9e:	ce 01       	movw	r24, r28
    5ca0:	48 96       	adiw	r24, 0x18	; 24
    5ca2:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <f_opendir>
				if (res) { put_rc(res); break; }
    5ca6:	88 23       	and	r24, r24
    5ca8:	19 f0       	breq	.+6      	; 0x5cb0 <main+0xad0>
    5caa:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    5cae:	0a cb       	rjmp	.-2540   	; 0x52c4 <main+0xe4>
				p1 = s1 = s2 = 0;
    5cb0:	1b 8a       	std	Y+19, r1	; 0x13
    5cb2:	1a 8a       	std	Y+18, r1	; 0x12
    5cb4:	19 8a       	std	Y+17, r1	; 0x11
    5cb6:	18 8a       	std	Y+16, r1	; 0x10
    5cb8:	1b 82       	std	Y+3, r1	; 0x03
    5cba:	1c 82       	std	Y+4, r1	; 0x04
    5cbc:	1d 82       	std	Y+5, r1	; 0x05
    5cbe:	1e 82       	std	Y+6, r1	; 0x06
				for(;;) {
					res = f_readdir(&dir, &Finfo);
    5cc0:	0f 2e       	mov	r0, r31
    5cc2:	f2 eb       	ldi	r31, 0xB2	; 178
    5cc4:	cf 2e       	mov	r12, r31
    5cc6:	f4 e0       	ldi	r31, 0x04	; 4
    5cc8:	df 2e       	mov	r13, r31
    5cca:	f0 2d       	mov	r31, r0
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    5ccc:	aa 24       	eor	r10, r10
    5cce:	bb 24       	eor	r11, r11
    5cd0:	68 94       	set
    5cd2:	a1 f8       	bld	r10, 1
    5cd4:	a4 0c       	add	r10, r4
    5cd6:	b5 1c       	adc	r11, r5
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5cd8:	0f 2e       	mov	r0, r31
    5cda:	fa ed       	ldi	r31, 0xDA	; 218
    5cdc:	2f 2e       	mov	r2, r31
    5cde:	f2 e0       	ldi	r31, 0x02	; 2
    5ce0:	3f 2e       	mov	r3, r31
    5ce2:	f0 2d       	mov	r31, r0
				while (*ptr == ' ') ptr++;
				res = f_opendir(&dir, ptr);
				if (res) { put_rc(res); break; }
				p1 = s1 = s2 = 0;
				for(;;) {
					res = f_readdir(&dir, &Finfo);
    5ce4:	ce 01       	movw	r24, r28
    5ce6:	48 96       	adiw	r24, 0x18	; 24
    5ce8:	b6 01       	movw	r22, r12
    5cea:	0e 94 57 21 	call	0x42ae	; 0x42ae <f_readdir>
					if ((res != FR_OK) || !Finfo.fname[0]) break;
    5cee:	88 23       	and	r24, r24
    5cf0:	09 f0       	breq	.+2      	; 0x5cf4 <main+0xb14>
    5cf2:	ba c0       	rjmp	.+372    	; 0x5e68 <main+0xc88>
    5cf4:	ab eb       	ldi	r26, 0xBB	; 187
    5cf6:	b4 e0       	ldi	r27, 0x04	; 4
    5cf8:	8c 91       	ld	r24, X
    5cfa:	88 23       	and	r24, r24
    5cfc:	09 f4       	brne	.+2      	; 0x5d00 <main+0xb20>
    5cfe:	b4 c0       	rjmp	.+360    	; 0x5e68 <main+0xc88>
					if (Finfo.fattrib & AM_DIR) {
    5d00:	f3 01       	movw	r30, r6
    5d02:	80 81       	ld	r24, Z
    5d04:	84 ff       	sbrs	r24, 4
    5d06:	06 c0       	rjmp	.+12     	; 0x5d14 <main+0xb34>
						s2++;
    5d08:	8a 89       	ldd	r24, Y+18	; 0x12
    5d0a:	9b 89       	ldd	r25, Y+19	; 0x13
    5d0c:	01 96       	adiw	r24, 0x01	; 1
    5d0e:	9b 8b       	std	Y+19, r25	; 0x13
    5d10:	8a 8b       	std	Y+18, r24	; 0x12
    5d12:	16 c0       	rjmp	.+44     	; 0x5d40 <main+0xb60>
					} else {
						s1++; p1 += Finfo.fsize;
    5d14:	88 89       	ldd	r24, Y+16	; 0x10
    5d16:	99 89       	ldd	r25, Y+17	; 0x11
    5d18:	01 96       	adiw	r24, 0x01	; 1
    5d1a:	99 8b       	std	Y+17, r25	; 0x11
    5d1c:	88 8b       	std	Y+16, r24	; 0x10
    5d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d20:	9c 81       	ldd	r25, Y+4	; 0x04
    5d22:	ad 81       	ldd	r26, Y+5	; 0x05
    5d24:	be 81       	ldd	r27, Y+6	; 0x06
    5d26:	f6 01       	movw	r30, r12
    5d28:	40 81       	ld	r20, Z
    5d2a:	51 81       	ldd	r21, Z+1	; 0x01
    5d2c:	62 81       	ldd	r22, Z+2	; 0x02
    5d2e:	73 81       	ldd	r23, Z+3	; 0x03
    5d30:	84 0f       	add	r24, r20
    5d32:	95 1f       	adc	r25, r21
    5d34:	a6 1f       	adc	r26, r22
    5d36:	b7 1f       	adc	r27, r23
    5d38:	8b 83       	std	Y+3, r24	; 0x03
    5d3a:	9c 83       	std	Y+4, r25	; 0x04
    5d3c:	ad 83       	std	Y+5, r26	; 0x05
    5d3e:	be 83       	std	Y+6, r27	; 0x06
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
    5d40:	d3 01       	movw	r26, r6
    5d42:	8c 91       	ld	r24, X
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5d44:	84 ff       	sbrs	r24, 4
    5d46:	03 c0       	rjmp	.+6      	; 0x5d4e <main+0xb6e>
    5d48:	44 e4       	ldi	r20, 0x44	; 68
    5d4a:	50 e0       	ldi	r21, 0x00	; 0
    5d4c:	02 c0       	rjmp	.+4      	; 0x5d52 <main+0xb72>
    5d4e:	4d e2       	ldi	r20, 0x2D	; 45
    5d50:	50 e0       	ldi	r21, 0x00	; 0
    5d52:	80 ff       	sbrs	r24, 0
    5d54:	03 c0       	rjmp	.+6      	; 0x5d5c <main+0xb7c>
    5d56:	62 e5       	ldi	r22, 0x52	; 82
    5d58:	70 e0       	ldi	r23, 0x00	; 0
    5d5a:	02 c0       	rjmp	.+4      	; 0x5d60 <main+0xb80>
    5d5c:	6d e2       	ldi	r22, 0x2D	; 45
    5d5e:	70 e0       	ldi	r23, 0x00	; 0
    5d60:	81 ff       	sbrs	r24, 1
    5d62:	05 c0       	rjmp	.+10     	; 0x5d6e <main+0xb8e>
    5d64:	e8 e4       	ldi	r30, 0x48	; 72
    5d66:	f0 e0       	ldi	r31, 0x00	; 0
    5d68:	fb af       	sts	0x7b, r31
    5d6a:	ea af       	sts	0x7a, r30
    5d6c:	04 c0       	rjmp	.+8      	; 0x5d76 <main+0xb96>
    5d6e:	2d e2       	ldi	r18, 0x2D	; 45
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	3b af       	sts	0x7b, r19
    5d74:	2a af       	sts	0x7a, r18
    5d76:	82 ff       	sbrs	r24, 2
    5d78:	03 c0       	rjmp	.+6      	; 0x5d80 <main+0xba0>
    5d7a:	03 e5       	ldi	r16, 0x53	; 83
    5d7c:	10 e0       	ldi	r17, 0x00	; 0
    5d7e:	02 c0       	rjmp	.+4      	; 0x5d84 <main+0xba4>
    5d80:	0d e2       	ldi	r16, 0x2D	; 45
    5d82:	10 e0       	ldi	r17, 0x00	; 0
    5d84:	85 ff       	sbrs	r24, 5
    5d86:	03 c0       	rjmp	.+6      	; 0x5d8e <main+0xbae>
    5d88:	81 e4       	ldi	r24, 0x41	; 65
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	02 c0       	rjmp	.+4      	; 0x5d92 <main+0xbb2>
    5d8e:	8d e2       	ldi	r24, 0x2D	; 45
    5d90:	90 e0       	ldi	r25, 0x00	; 0
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    5d92:	d2 01       	movw	r26, r4
    5d94:	2d 91       	ld	r18, X+
    5d96:	3c 91       	ld	r19, X
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    5d98:	f5 01       	movw	r30, r10
    5d9a:	e0 80       	ld	r14, Z
    5d9c:	f1 80       	ldd	r15, Z+1	; 0x01
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5d9e:	ad b7       	in	r26, 0x3d	; 61
    5da0:	be b7       	in	r27, 0x3e	; 62
    5da2:	5c 97       	sbiw	r26, 0x1c	; 28
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	f8 94       	cli
    5da8:	be bf       	out	0x3e, r27	; 62
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	ad bf       	out	0x3d, r26	; 61
    5dae:	ed b7       	in	r30, 0x3d	; 61
    5db0:	fe b7       	in	r31, 0x3e	; 62
    5db2:	31 96       	adiw	r30, 0x01	; 1
    5db4:	12 96       	adiw	r26, 0x02	; 2
    5db6:	3c 92       	st	X, r3
    5db8:	2e 92       	st	-X, r2
    5dba:	11 97       	sbiw	r26, 0x01	; 1
    5dbc:	53 83       	std	Z+3, r21	; 0x03
    5dbe:	42 83       	std	Z+2, r20	; 0x02
    5dc0:	75 83       	std	Z+5, r23	; 0x05
    5dc2:	64 83       	std	Z+4, r22	; 0x04
    5dc4:	4a ad       	sts	0x6a, r20
    5dc6:	5b ad       	sts	0x6b, r21
    5dc8:	57 83       	std	Z+7, r21	; 0x07
    5dca:	46 83       	std	Z+6, r20	; 0x06
    5dcc:	11 87       	std	Z+9, r17	; 0x09
    5dce:	00 87       	std	Z+8, r16	; 0x08
    5dd0:	93 87       	std	Z+11, r25	; 0x0b
    5dd2:	82 87       	std	Z+10, r24	; 0x0a
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    5dd4:	c9 01       	movw	r24, r18
    5dd6:	89 2f       	mov	r24, r25
    5dd8:	99 27       	eor	r25, r25
    5dda:	86 95       	lsr	r24
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5ddc:	84 54       	subi	r24, 0x44	; 68
    5dde:	98 4f       	sbci	r25, 0xF8	; 248
    5de0:	95 87       	std	Z+13, r25	; 0x0d
    5de2:	84 87       	std	Z+12, r24	; 0x0c
								(Finfo.fattrib & AM_DIR) ? 'D' : '-',
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    5de4:	c9 01       	movw	r24, r18
    5de6:	96 95       	lsr	r25
    5de8:	87 95       	ror	r24
    5dea:	92 95       	swap	r25
    5dec:	82 95       	swap	r24
    5dee:	8f 70       	andi	r24, 0x0F	; 15
    5df0:	89 27       	eor	r24, r25
    5df2:	9f 70       	andi	r25, 0x0F	; 15
    5df4:	89 27       	eor	r24, r25
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5df6:	8f 70       	andi	r24, 0x0F	; 15
    5df8:	90 70       	andi	r25, 0x00	; 0
    5dfa:	97 87       	std	Z+15, r25	; 0x0f
    5dfc:	86 87       	std	Z+14, r24	; 0x0e
    5dfe:	c9 01       	movw	r24, r18
    5e00:	8f 71       	andi	r24, 0x1F	; 31
    5e02:	90 70       	andi	r25, 0x00	; 0
    5e04:	91 8b       	std	Z+17, r25	; 0x11
    5e06:	80 8b       	std	Z+16, r24	; 0x10
    5e08:	8f 2d       	mov	r24, r15
    5e0a:	86 95       	lsr	r24
    5e0c:	86 95       	lsr	r24
    5e0e:	86 95       	lsr	r24
    5e10:	82 8b       	std	Z+18, r24	; 0x12
    5e12:	13 8a       	std	Z+19, r1	; 0x13
								(Finfo.fattrib & AM_RDO) ? 'R' : '-',
								(Finfo.fattrib & AM_HID) ? 'H' : '-',
								(Finfo.fattrib & AM_SYS) ? 'S' : '-',
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    5e14:	c7 01       	movw	r24, r14
    5e16:	96 95       	lsr	r25
    5e18:	87 95       	ror	r24
    5e1a:	92 95       	swap	r25
    5e1c:	82 95       	swap	r24
    5e1e:	8f 70       	andi	r24, 0x0F	; 15
    5e20:	89 27       	eor	r24, r25
    5e22:	9f 70       	andi	r25, 0x0F	; 15
    5e24:	89 27       	eor	r24, r25
					if (Finfo.fattrib & AM_DIR) {
						s2++;
					} else {
						s1++; p1 += Finfo.fsize;
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    5e26:	8f 73       	andi	r24, 0x3F	; 63
    5e28:	90 70       	andi	r25, 0x00	; 0
    5e2a:	95 8b       	std	Z+21, r25	; 0x15
    5e2c:	84 8b       	std	Z+20, r24	; 0x14
    5e2e:	ae a5       	lds	r26, 0x6e
    5e30:	bf a5       	lds	r27, 0x6f
    5e32:	4d 91       	ld	r20, X+
    5e34:	5d 91       	ld	r21, X+
    5e36:	6d 91       	ld	r22, X+
    5e38:	7c 91       	ld	r23, X
    5e3a:	46 8b       	std	Z+22, r20	; 0x16
    5e3c:	57 8b       	std	Z+23, r21	; 0x17
    5e3e:	60 8f       	std	Z+24, r22	; 0x18
    5e40:	71 8f       	std	Z+25, r23	; 0x19
    5e42:	28 a9       	sts	0x48, r18
    5e44:	39 a9       	sts	0x49, r19
    5e46:	33 8f       	std	Z+27, r19	; 0x1b
    5e48:	22 8f       	std	Z+26, r18	; 0x1a
    5e4a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
						xputc(' ');
					xprintf(PSTR("%s\n"), Lfname);
#else
					xputc('\n');
    5e4e:	4d b7       	in	r20, 0x3d	; 61
    5e50:	5e b7       	in	r21, 0x3e	; 62
    5e52:	44 5e       	subi	r20, 0xE4	; 228
    5e54:	5f 4f       	sbci	r21, 0xFF	; 255
    5e56:	0f b6       	in	r0, 0x3f	; 63
    5e58:	f8 94       	cli
    5e5a:	5e bf       	out	0x3e, r21	; 62
    5e5c:	0f be       	out	0x3f, r0	; 63
    5e5e:	4d bf       	out	0x3d, r20	; 61
    5e60:	8a e0       	ldi	r24, 0x0A	; 10
    5e62:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <xputc>
#endif
				}
    5e66:	3e cf       	rjmp	.-388    	; 0x5ce4 <main+0xb04>
				xprintf(PSTR("%4u File(s),%10lu bytes total\n%4u Dir(s)"), s1, p1, s2);
    5e68:	8d b7       	in	r24, 0x3d	; 61
    5e6a:	9e b7       	in	r25, 0x3e	; 62
    5e6c:	0a 97       	sbiw	r24, 0x0a	; 10
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	f8 94       	cli
    5e72:	9e bf       	out	0x3e, r25	; 62
    5e74:	0f be       	out	0x3f, r0	; 63
    5e76:	8d bf       	out	0x3d, r24	; 61
    5e78:	ed b7       	in	r30, 0x3d	; 61
    5e7a:	fe b7       	in	r31, 0x3e	; 62
    5e7c:	31 96       	adiw	r30, 0x01	; 1
    5e7e:	85 e0       	ldi	r24, 0x05	; 5
    5e80:	93 e0       	ldi	r25, 0x03	; 3
    5e82:	ad b7       	in	r26, 0x3d	; 61
    5e84:	be b7       	in	r27, 0x3e	; 62
    5e86:	12 96       	adiw	r26, 0x02	; 2
    5e88:	9c 93       	st	X, r25
    5e8a:	8e 93       	st	-X, r24
    5e8c:	11 97       	sbiw	r26, 0x01	; 1
    5e8e:	88 89       	ldd	r24, Y+16	; 0x10
    5e90:	99 89       	ldd	r25, Y+17	; 0x11
    5e92:	93 83       	std	Z+3, r25	; 0x03
    5e94:	82 83       	std	Z+2, r24	; 0x02
    5e96:	8b 81       	ldd	r24, Y+3	; 0x03
    5e98:	9c 81       	ldd	r25, Y+4	; 0x04
    5e9a:	ad 81       	ldd	r26, Y+5	; 0x05
    5e9c:	be 81       	ldd	r27, Y+6	; 0x06
    5e9e:	84 83       	std	Z+4, r24	; 0x04
    5ea0:	95 83       	std	Z+5, r25	; 0x05
    5ea2:	a6 83       	std	Z+6, r26	; 0x06
    5ea4:	b7 83       	std	Z+7, r27	; 0x07
    5ea6:	8a 89       	ldd	r24, Y+18	; 0x12
    5ea8:	9b 89       	ldd	r25, Y+19	; 0x13
    5eaa:	91 87       	std	Z+9, r25	; 0x09
    5eac:	80 87       	std	Z+8, r24	; 0x08
    5eae:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				if (f_getfree(ptr, (DWORD*)&p1, &fs) == FR_OK)
    5eb2:	ed b7       	in	r30, 0x3d	; 61
    5eb4:	fe b7       	in	r31, 0x3e	; 62
    5eb6:	3a 96       	adiw	r30, 0x0a	; 10
    5eb8:	0f b6       	in	r0, 0x3f	; 63
    5eba:	f8 94       	cli
    5ebc:	fe bf       	out	0x3e, r31	; 62
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	ed bf       	out	0x3d, r30	; 61
    5ec2:	89 81       	ldd	r24, Y+1	; 0x01
    5ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec6:	be 01       	movw	r22, r28
    5ec8:	6d 5f       	subi	r22, 0xFD	; 253
    5eca:	7f 4f       	sbci	r23, 0xFF	; 255
    5ecc:	ae 01       	movw	r20, r28
    5ece:	4a 5e       	subi	r20, 0xEA	; 234
    5ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ed2:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <f_getfree>
    5ed6:	88 23       	and	r24, r24
    5ed8:	09 f0       	breq	.+2      	; 0x5edc <main+0xcfc>
    5eda:	f4 c9       	rjmp	.-3096   	; 0x52c4 <main+0xe4>
					xprintf(PSTR(", %10luK bytes free\n"), p1 * fs->csize / 2);
    5edc:	00 d0       	rcall	.+0      	; 0x5ede <main+0xcfe>
    5ede:	00 d0       	rcall	.+0      	; 0x5ee0 <main+0xd00>
    5ee0:	00 d0       	rcall	.+0      	; 0x5ee2 <main+0xd02>
    5ee2:	8e e2       	ldi	r24, 0x2E	; 46
    5ee4:	93 e0       	ldi	r25, 0x03	; 3
    5ee6:	ad b7       	in	r26, 0x3d	; 61
    5ee8:	be b7       	in	r27, 0x3e	; 62
    5eea:	12 96       	adiw	r26, 0x02	; 2
    5eec:	9c 93       	st	X, r25
    5eee:	8e 93       	st	-X, r24
    5ef0:	11 97       	sbiw	r26, 0x01	; 1
    5ef2:	ee 89       	ldd	r30, Y+22	; 0x16
    5ef4:	ff 89       	ldd	r31, Y+23	; 0x17
    5ef6:	62 81       	ldd	r22, Z+2	; 0x02
    5ef8:	70 e0       	ldi	r23, 0x00	; 0
    5efa:	80 e0       	ldi	r24, 0x00	; 0
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	2b 81       	ldd	r18, Y+3	; 0x03
    5f00:	3c 81       	ldd	r19, Y+4	; 0x04
    5f02:	4d 81       	ldd	r20, Y+5	; 0x05
    5f04:	5e 81       	ldd	r21, Y+6	; 0x06
    5f06:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    5f0a:	22 e0       	ldi	r18, 0x02	; 2
    5f0c:	30 e0       	ldi	r19, 0x00	; 0
    5f0e:	40 e0       	ldi	r20, 0x00	; 0
    5f10:	50 e0       	ldi	r21, 0x00	; 0
    5f12:	0e 94 56 36 	call	0x6cac	; 0x6cac <__divmodsi4>
    5f16:	ed b7       	in	r30, 0x3d	; 61
    5f18:	fe b7       	in	r31, 0x3e	; 62
    5f1a:	23 83       	std	Z+3, r18	; 0x03
    5f1c:	34 83       	std	Z+4, r19	; 0x04
    5f1e:	45 83       	std	Z+5, r20	; 0x05
    5f20:	56 83       	std	Z+6, r21	; 0x06
    5f22:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    5f26:	2d b7       	in	r18, 0x3d	; 61
    5f28:	3e b7       	in	r19, 0x3e	; 62
    5f2a:	2a 5f       	subi	r18, 0xFA	; 250
    5f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f2e:	0f b6       	in	r0, 0x3f	; 63
    5f30:	f8 94       	cli
    5f32:	3e bf       	out	0x3e, r19	; 62
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	2d bf       	out	0x3d, r18	; 61
    5f38:	c5 c9       	rjmp	.-3190   	; 0x52c4 <main+0xe4>
				break;

			case 'o' :	/* fo <mode> <name> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	01 96       	adiw	r24, 0x01	; 1
    5f3e:	be 01       	movw	r22, r28
    5f40:	6d 5f       	subi	r22, 0xFD	; 253
    5f42:	7f 4f       	sbci	r23, 0xFF	; 255
    5f44:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5f48:	88 23       	and	r24, r24
    5f4a:	09 f4       	brne	.+2      	; 0x5f4e <main+0xd6e>
    5f4c:	bb c9       	rjmp	.-3210   	; 0x52c4 <main+0xe4>
				while (*ptr == ' ') ptr++;
    5f4e:	69 81       	ldd	r22, Y+1	; 0x01
    5f50:	7a 81       	ldd	r23, Y+2	; 0x02
    5f52:	db 01       	movw	r26, r22
    5f54:	8c 91       	ld	r24, X
    5f56:	80 32       	cpi	r24, 0x20	; 32
    5f58:	49 f4       	brne	.+18     	; 0x5f6c <main+0xd8c>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    5f5a:	fb 01       	movw	r30, r22
    5f5c:	31 96       	adiw	r30, 0x01	; 1
					xprintf(PSTR(", %10luK bytes free\n"), p1 * fs->csize / 2);
				break;

			case 'o' :	/* fo <mode> <name> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
				while (*ptr == ' ') ptr++;
    5f5e:	6f 5f       	subi	r22, 0xFF	; 255
    5f60:	7f 4f       	sbci	r23, 0xFF	; 255
    5f62:	7a 83       	std	Y+2, r23	; 0x02
    5f64:	69 83       	std	Y+1, r22	; 0x01
    5f66:	81 91       	ld	r24, Z+
    5f68:	80 32       	cpi	r24, 0x20	; 32
    5f6a:	c9 f3       	breq	.-14     	; 0x5f5e <main+0xd7e>
				put_rc(f_open(&File[0], ptr, (BYTE)p1));
    5f6c:	88 ec       	ldi	r24, 0xC8	; 200
    5f6e:	94 e0       	ldi	r25, 0x04	; 4
    5f70:	4b 81       	ldd	r20, Y+3	; 0x03
    5f72:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <f_open>
    5f76:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    5f7a:	a4 c9       	rjmp	.-3256   	; 0x52c4 <main+0xe4>

			case 'c' :	/* fc - Close a file */
				put_rc(f_close(&File[0]));
    5f7c:	88 ec       	ldi	r24, 0xC8	; 200
    5f7e:	94 e0       	ldi	r25, 0x04	; 4
    5f80:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <f_close>
    5f84:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    5f88:	9d c9       	rjmp	.-3270   	; 0x52c4 <main+0xe4>

			case 'e' :	/* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1)) break;
    5f8a:	ce 01       	movw	r24, r28
    5f8c:	01 96       	adiw	r24, 0x01	; 1
    5f8e:	be 01       	movw	r22, r28
    5f90:	6d 5f       	subi	r22, 0xFD	; 253
    5f92:	7f 4f       	sbci	r23, 0xFF	; 255
    5f94:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    5f98:	88 23       	and	r24, r24
    5f9a:	09 f4       	brne	.+2      	; 0x5f9e <main+0xdbe>
    5f9c:	93 c9       	rjmp	.-3290   	; 0x52c4 <main+0xe4>
				res = f_lseek(&File[0], p1);
    5f9e:	4b 81       	ldd	r20, Y+3	; 0x03
    5fa0:	5c 81       	ldd	r21, Y+4	; 0x04
    5fa2:	6d 81       	ldd	r22, Y+5	; 0x05
    5fa4:	7e 81       	ldd	r23, Y+6	; 0x06
    5fa6:	88 ec       	ldi	r24, 0xC8	; 200
    5fa8:	94 e0       	ldi	r25, 0x04	; 4
    5faa:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <f_lseek>
    5fae:	08 2f       	mov	r16, r24
				put_rc(res);
    5fb0:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				if (res == FR_OK)
    5fb4:	00 23       	and	r16, r16
    5fb6:	09 f0       	breq	.+2      	; 0x5fba <main+0xdda>
    5fb8:	85 c9       	rjmp	.-3318   	; 0x52c4 <main+0xe4>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), File[0].fptr, File[0].fptr);
    5fba:	80 91 ce 04 	lds	r24, 0x04CE
    5fbe:	90 91 cf 04 	lds	r25, 0x04CF
    5fc2:	a0 91 d0 04 	lds	r26, 0x04D0
    5fc6:	b0 91 d1 04 	lds	r27, 0x04D1
    5fca:	ed b7       	in	r30, 0x3d	; 61
    5fcc:	fe b7       	in	r31, 0x3e	; 62
    5fce:	3a 97       	sbiw	r30, 0x0a	; 10
    5fd0:	0f b6       	in	r0, 0x3f	; 63
    5fd2:	f8 94       	cli
    5fd4:	fe bf       	out	0x3e, r31	; 62
    5fd6:	0f be       	out	0x3f, r0	; 63
    5fd8:	ed bf       	out	0x3d, r30	; 61
    5fda:	4d b7       	in	r20, 0x3d	; 61
    5fdc:	5e b7       	in	r21, 0x3e	; 62
    5fde:	4f 5f       	subi	r20, 0xFF	; 255
    5fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe2:	23 e4       	ldi	r18, 0x43	; 67
    5fe4:	33 e0       	ldi	r19, 0x03	; 3
    5fe6:	32 83       	std	Z+2, r19	; 0x02
    5fe8:	21 83       	std	Z+1, r18	; 0x01
    5fea:	fa 01       	movw	r30, r20
    5fec:	82 83       	std	Z+2, r24	; 0x02
    5fee:	93 83       	std	Z+3, r25	; 0x03
    5ff0:	a4 83       	std	Z+4, r26	; 0x04
    5ff2:	b5 83       	std	Z+5, r27	; 0x05
    5ff4:	86 83       	std	Z+6, r24	; 0x06
    5ff6:	97 83       	std	Z+7, r25	; 0x07
    5ff8:	a0 87       	std	Z+8, r26	; 0x08
    5ffa:	b1 87       	std	Z+9, r27	; 0x09
    5ffc:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
    6000:	2d b7       	in	r18, 0x3d	; 61
    6002:	3e b7       	in	r19, 0x3e	; 62
    6004:	26 5f       	subi	r18, 0xF6	; 246
    6006:	3f 4f       	sbci	r19, 0xFF	; 255
    6008:	0f b6       	in	r0, 0x3f	; 63
    600a:	f8 94       	cli
    600c:	3e bf       	out	0x3e, r19	; 62
    600e:	0f be       	out	0x3f, r0	; 63
    6010:	2d bf       	out	0x3d, r18	; 61
    6012:	58 c9       	rjmp	.-3408   	; 0x52c4 <main+0xe4>
				break;

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
    6014:	ce 01       	movw	r24, r28
    6016:	01 96       	adiw	r24, 0x01	; 1
    6018:	be 01       	movw	r22, r28
    601a:	6d 5f       	subi	r22, 0xFD	; 253
    601c:	7f 4f       	sbci	r23, 0xFF	; 255
    601e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6022:	88 23       	and	r24, r24
    6024:	09 f4       	brne	.+2      	; 0x6028 <main+0xe48>
    6026:	4e c9       	rjmp	.-3428   	; 0x52c4 <main+0xe4>
				p2 = 0;
    6028:	1f 82       	std	Y+7, r1	; 0x07
    602a:	18 86       	std	Y+8, r1	; 0x08
    602c:	19 86       	std	Y+9, r1	; 0x09
    602e:	1a 86       	std	Y+10, r1	; 0x0a
				cli(); Timer = 0; sei();
    6030:	f8 94       	cli
    6032:	10 92 0a 09 	sts	0x090A, r1
    6036:	10 92 09 09 	sts	0x0909, r1
    603a:	78 94       	sei
				while (p1) {
					if (p1 >= sizeof Buff)	{ cnt = sizeof Buff; p1 -= sizeof Buff; }
    603c:	cc 24       	eor	r12, r12
    603e:	dd 24       	eor	r13, r13
    6040:	68 94       	set
    6042:	d2 f8       	bld	r13, 2
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_read(&File[0], Buff, cnt, &s2);
    6044:	08 ec       	ldi	r16, 0xC8	; 200
    6046:	14 e0       	ldi	r17, 0x04	; 4
    6048:	0f 2e       	mov	r0, r31
    604a:	ff e0       	ldi	r31, 0x0F	; 15
    604c:	ef 2e       	mov	r14, r31
    604e:	f9 e0       	ldi	r31, 0x09	; 9
    6050:	ff 2e       	mov	r15, r31
    6052:	f0 2d       	mov	r31, r0

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				cli(); Timer = 0; sei();
				while (p1) {
    6054:	3d c0       	rjmp	.+122    	; 0x60d0 <main+0xef0>
					if (p1 >= sizeof Buff)	{ cnt = sizeof Buff; p1 -= sizeof Buff; }
    6056:	80 30       	cpi	r24, 0x00	; 0
    6058:	34 e0       	ldi	r19, 0x04	; 4
    605a:	93 07       	cpc	r25, r19
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	a3 07       	cpc	r26, r19
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	b3 07       	cpc	r27, r19
    6064:	5c f0       	brlt	.+22     	; 0x607c <main+0xe9c>
    6066:	dd 8a       	std	Y+21, r13	; 0x15
    6068:	cc 8a       	std	Y+20, r12	; 0x14
    606a:	80 50       	subi	r24, 0x00	; 0
    606c:	94 40       	sbci	r25, 0x04	; 4
    606e:	a0 40       	sbci	r26, 0x00	; 0
    6070:	b0 40       	sbci	r27, 0x00	; 0
    6072:	8b 83       	std	Y+3, r24	; 0x03
    6074:	9c 83       	std	Y+4, r25	; 0x04
    6076:	ad 83       	std	Y+5, r26	; 0x05
    6078:	be 83       	std	Y+6, r27	; 0x06
    607a:	06 c0       	rjmp	.+12     	; 0x6088 <main+0xea8>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    607c:	9d 8b       	std	Y+21, r25	; 0x15
    607e:	8c 8b       	std	Y+20, r24	; 0x14
    6080:	1b 82       	std	Y+3, r1	; 0x03
    6082:	1c 82       	std	Y+4, r1	; 0x04
    6084:	1d 82       	std	Y+5, r1	; 0x05
    6086:	1e 82       	std	Y+6, r1	; 0x06
					res = f_read(&File[0], Buff, cnt, &s2);
    6088:	4c 89       	ldd	r20, Y+20	; 0x14
    608a:	5d 89       	ldd	r21, Y+21	; 0x15
    608c:	c8 01       	movw	r24, r16
    608e:	b7 01       	movw	r22, r14
    6090:	9e 01       	movw	r18, r28
    6092:	2e 5e       	subi	r18, 0xEE	; 238
    6094:	3f 4f       	sbci	r19, 0xFF	; 255
    6096:	0e 94 1f 1a 	call	0x343e	; 0x343e <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    609a:	88 23       	and	r24, r24
    609c:	19 f0       	breq	.+6      	; 0x60a4 <main+0xec4>
    609e:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    60a2:	1f c0       	rjmp	.+62     	; 0x60e2 <main+0xf02>
					p2 += s2;
    60a4:	2a 89       	ldd	r18, Y+18	; 0x12
    60a6:	3b 89       	ldd	r19, Y+19	; 0x13
    60a8:	a9 01       	movw	r20, r18
    60aa:	60 e0       	ldi	r22, 0x00	; 0
    60ac:	70 e0       	ldi	r23, 0x00	; 0
    60ae:	8f 81       	ldd	r24, Y+7	; 0x07
    60b0:	98 85       	ldd	r25, Y+8	; 0x08
    60b2:	a9 85       	ldd	r26, Y+9	; 0x09
    60b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    60b6:	84 0f       	add	r24, r20
    60b8:	95 1f       	adc	r25, r21
    60ba:	a6 1f       	adc	r26, r22
    60bc:	b7 1f       	adc	r27, r23
    60be:	8f 83       	std	Y+7, r24	; 0x07
    60c0:	98 87       	std	Y+8, r25	; 0x08
    60c2:	a9 87       	std	Y+9, r26	; 0x09
    60c4:	ba 87       	std	Y+10, r27	; 0x0a
					if (cnt != s2) break;
    60c6:	8c 89       	ldd	r24, Y+20	; 0x14
    60c8:	9d 89       	ldd	r25, Y+21	; 0x15
    60ca:	28 17       	cp	r18, r24
    60cc:	39 07       	cpc	r19, r25
    60ce:	49 f4       	brne	.+18     	; 0x60e2 <main+0xf02>

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				cli(); Timer = 0; sei();
				while (p1) {
    60d0:	8b 81       	ldd	r24, Y+3	; 0x03
    60d2:	9c 81       	ldd	r25, Y+4	; 0x04
    60d4:	ad 81       	ldd	r26, Y+5	; 0x05
    60d6:	be 81       	ldd	r27, Y+6	; 0x06
    60d8:	00 97       	sbiw	r24, 0x00	; 0
    60da:	a1 05       	cpc	r26, r1
    60dc:	b1 05       	cpc	r27, r1
    60de:	09 f0       	breq	.+2      	; 0x60e2 <main+0xf02>
    60e0:	ba cf       	rjmp	.-140    	; 0x6056 <main+0xe76>
					res = f_read(&File[0], Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				cli(); s2 = Timer; sei();
    60e2:	f8 94       	cli
    60e4:	80 91 09 09 	lds	r24, 0x0909
    60e8:	90 91 0a 09 	lds	r25, 0x090A
    60ec:	9b 8b       	std	Y+19, r25	; 0x13
    60ee:	8a 8b       	std	Y+18, r24	; 0x12
    60f0:	78 94       	sei
				xprintf(PSTR("%lu bytes read with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    60f2:	cf 80       	ldd	r12, Y+7	; 0x07
    60f4:	d8 84       	ldd	r13, Y+8	; 0x08
    60f6:	e9 84       	ldd	r14, Y+9	; 0x09
    60f8:	fa 84       	ldd	r15, Y+10	; 0x0a
    60fa:	0a 89       	ldd	r16, Y+18	; 0x12
    60fc:	1b 89       	ldd	r17, Y+19	; 0x13
    60fe:	01 15       	cp	r16, r1
    6100:	11 05       	cpc	r17, r1
    6102:	81 f0       	breq	.+32     	; 0x6124 <main+0xf44>
    6104:	c7 01       	movw	r24, r14
    6106:	b6 01       	movw	r22, r12
    6108:	24 e6       	ldi	r18, 0x64	; 100
    610a:	30 e0       	ldi	r19, 0x00	; 0
    610c:	40 e0       	ldi	r20, 0x00	; 0
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    6114:	98 01       	movw	r18, r16
    6116:	40 e0       	ldi	r20, 0x00	; 0
    6118:	50 e0       	ldi	r21, 0x00	; 0
    611a:	0e 94 56 36 	call	0x6cac	; 0x6cac <__divmodsi4>
    611e:	89 01       	movw	r16, r18
    6120:	9a 01       	movw	r18, r20
    6122:	03 c0       	rjmp	.+6      	; 0x612a <main+0xf4a>
    6124:	00 e0       	ldi	r16, 0x00	; 0
    6126:	10 e0       	ldi	r17, 0x00	; 0
    6128:	98 01       	movw	r18, r16
    612a:	4d b7       	in	r20, 0x3d	; 61
    612c:	5e b7       	in	r21, 0x3e	; 62
    612e:	4a 50       	subi	r20, 0x0A	; 10
    6130:	50 40       	sbci	r21, 0x00	; 0
    6132:	0f b6       	in	r0, 0x3f	; 63
    6134:	f8 94       	cli
    6136:	5e bf       	out	0x3e, r21	; 62
    6138:	0f be       	out	0x3f, r0	; 63
    613a:	4d bf       	out	0x3d, r20	; 61
    613c:	ed b7       	in	r30, 0x3d	; 61
    613e:	fe b7       	in	r31, 0x3e	; 62
    6140:	31 96       	adiw	r30, 0x01	; 1
    6142:	86 e5       	ldi	r24, 0x56	; 86
    6144:	93 e0       	ldi	r25, 0x03	; 3
    6146:	ad b7       	in	r26, 0x3d	; 61
    6148:	be b7       	in	r27, 0x3e	; 62
    614a:	12 96       	adiw	r26, 0x02	; 2
    614c:	9c 93       	st	X, r25
    614e:	8e 93       	st	-X, r24
    6150:	11 97       	sbiw	r26, 0x01	; 1
    6152:	c2 82       	std	Z+2, r12	; 0x02
    6154:	d3 82       	std	Z+3, r13	; 0x03
    6156:	e4 82       	std	Z+4, r14	; 0x04
    6158:	f5 82       	std	Z+5, r15	; 0x05
    615a:	06 83       	std	Z+6, r16	; 0x06
    615c:	17 83       	std	Z+7, r17	; 0x07
    615e:	20 87       	std	Z+8, r18	; 0x08
    6160:	31 87       	std	Z+9, r19	; 0x09
    6162:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				break;
    6166:	ed b7       	in	r30, 0x3d	; 61
    6168:	fe b7       	in	r31, 0x3e	; 62
    616a:	3a 96       	adiw	r30, 0x0a	; 10
    616c:	0f b6       	in	r0, 0x3f	; 63
    616e:	f8 94       	cli
    6170:	fe bf       	out	0x3e, r31	; 62
    6172:	0f be       	out	0x3f, r0	; 63
    6174:	ed bf       	out	0x3d, r30	; 61
    6176:	a6 c8       	rjmp	.-3764   	; 0x52c4 <main+0xe4>

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
    6178:	ce 01       	movw	r24, r28
    617a:	01 96       	adiw	r24, 0x01	; 1
    617c:	be 01       	movw	r22, r28
    617e:	6d 5f       	subi	r22, 0xFD	; 253
    6180:	7f 4f       	sbci	r23, 0xFF	; 255
    6182:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6186:	88 23       	and	r24, r24
    6188:	09 f4       	brne	.+2      	; 0x618c <main+0xfac>
    618a:	9c c8       	rjmp	.-3784   	; 0x52c4 <main+0xe4>
				ofs = File[0].fptr;
    618c:	c0 90 ce 04 	lds	r12, 0x04CE
    6190:	d0 90 cf 04 	lds	r13, 0x04CF
    6194:	e0 90 d0 04 	lds	r14, 0x04D0
    6198:	f0 90 d1 04 	lds	r15, 0x04D1
				while (p1) {
    619c:	8b 81       	ldd	r24, Y+3	; 0x03
    619e:	9c 81       	ldd	r25, Y+4	; 0x04
    61a0:	ad 81       	ldd	r26, Y+5	; 0x05
    61a2:	be 81       	ldd	r27, Y+6	; 0x06
    61a4:	00 97       	sbiw	r24, 0x00	; 0
    61a6:	a1 05       	cpc	r26, r1
    61a8:	b1 05       	cpc	r27, r1
    61aa:	09 f4       	brne	.+2      	; 0x61ae <main+0xfce>
    61ac:	8b c8       	rjmp	.-3818   	; 0x52c4 <main+0xe4>
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    61ae:	22 24       	eor	r2, r2
    61b0:	33 24       	eor	r3, r3
    61b2:	68 94       	set
    61b4:	24 f8       	bld	r2, 4
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_read(&File[0], Buff, cnt, &cnt);
    61b6:	0f 2e       	mov	r0, r31
    61b8:	f8 ec       	ldi	r31, 0xC8	; 200
    61ba:	af 2e       	mov	r10, r31
    61bc:	f4 e0       	ldi	r31, 0x04	; 4
    61be:	bf 2e       	mov	r11, r31
    61c0:	f0 2d       	mov	r31, r0
    61c2:	0f e0       	ldi	r16, 0x0F	; 15
    61c4:	19 e0       	ldi	r17, 0x09	; 9

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = File[0].fptr;
				while (p1) {
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    61c6:	80 31       	cpi	r24, 0x10	; 16
    61c8:	91 05       	cpc	r25, r1
    61ca:	a1 05       	cpc	r26, r1
    61cc:	b1 05       	cpc	r27, r1
    61ce:	54 f0       	brlt	.+20     	; 0x61e4 <main+0x1004>
    61d0:	3d 8a       	std	Y+21, r3	; 0x15
    61d2:	2c 8a       	std	Y+20, r2	; 0x14
    61d4:	40 97       	sbiw	r24, 0x10	; 16
    61d6:	a1 09       	sbc	r26, r1
    61d8:	b1 09       	sbc	r27, r1
    61da:	8b 83       	std	Y+3, r24	; 0x03
    61dc:	9c 83       	std	Y+4, r25	; 0x04
    61de:	ad 83       	std	Y+5, r26	; 0x05
    61e0:	be 83       	std	Y+6, r27	; 0x06
    61e2:	06 c0       	rjmp	.+12     	; 0x61f0 <main+0x1010>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    61e4:	9d 8b       	std	Y+21, r25	; 0x15
    61e6:	8c 8b       	std	Y+20, r24	; 0x14
    61e8:	1b 82       	std	Y+3, r1	; 0x03
    61ea:	1c 82       	std	Y+4, r1	; 0x04
    61ec:	1d 82       	std	Y+5, r1	; 0x05
    61ee:	1e 82       	std	Y+6, r1	; 0x06
					res = f_read(&File[0], Buff, cnt, &cnt);
    61f0:	4c 89       	ldd	r20, Y+20	; 0x14
    61f2:	5d 89       	ldd	r21, Y+21	; 0x15
    61f4:	c5 01       	movw	r24, r10
    61f6:	b8 01       	movw	r22, r16
    61f8:	9e 01       	movw	r18, r28
    61fa:	2c 5e       	subi	r18, 0xEC	; 236
    61fc:	3f 4f       	sbci	r19, 0xFF	; 255
    61fe:	0e 94 1f 1a 	call	0x343e	; 0x343e <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    6202:	88 23       	and	r24, r24
    6204:	19 f0       	breq	.+6      	; 0x620c <main+0x102c>
    6206:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    620a:	5c c8       	rjmp	.-3912   	; 0x52c4 <main+0xe4>
					if (!cnt) break;
    620c:	2c 89       	ldd	r18, Y+20	; 0x14
    620e:	3d 89       	ldd	r19, Y+21	; 0x15
    6210:	21 15       	cp	r18, r1
    6212:	31 05       	cpc	r19, r1
    6214:	09 f4       	brne	.+2      	; 0x6218 <main+0x1038>
    6216:	56 c8       	rjmp	.-3924   	; 0x52c4 <main+0xe4>
					put_dump(Buff, ofs, cnt);
    6218:	c8 01       	movw	r24, r16
    621a:	b7 01       	movw	r22, r14
    621c:	a6 01       	movw	r20, r12
    621e:	0e 94 7f 27 	call	0x4efe	; 0x4efe <put_dump>
					ofs += 16;
    6222:	20 e1       	ldi	r18, 0x10	; 16
    6224:	30 e0       	ldi	r19, 0x00	; 0
    6226:	40 e0       	ldi	r20, 0x00	; 0
    6228:	50 e0       	ldi	r21, 0x00	; 0
    622a:	c2 0e       	add	r12, r18
    622c:	d3 1e       	adc	r13, r19
    622e:	e4 1e       	adc	r14, r20
    6230:	f5 1e       	adc	r15, r21
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = File[0].fptr;
				while (p1) {
    6232:	8b 81       	ldd	r24, Y+3	; 0x03
    6234:	9c 81       	ldd	r25, Y+4	; 0x04
    6236:	ad 81       	ldd	r26, Y+5	; 0x05
    6238:	be 81       	ldd	r27, Y+6	; 0x06
    623a:	00 97       	sbiw	r24, 0x00	; 0
    623c:	a1 05       	cpc	r26, r1
    623e:	b1 05       	cpc	r27, r1
    6240:	11 f6       	brne	.-124    	; 0x61c6 <main+0xfe6>
    6242:	40 c8       	rjmp	.-3968   	; 0x52c4 <main+0xe4>
					ofs += 16;
				}
				break;

			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    6244:	ce 01       	movw	r24, r28
    6246:	01 96       	adiw	r24, 0x01	; 1
    6248:	be 01       	movw	r22, r28
    624a:	6d 5f       	subi	r22, 0xFD	; 253
    624c:	7f 4f       	sbci	r23, 0xFF	; 255
    624e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6252:	88 23       	and	r24, r24
    6254:	09 f4       	brne	.+2      	; 0x6258 <main+0x1078>
    6256:	36 c8       	rjmp	.-3988   	; 0x52c4 <main+0xe4>
    6258:	ce 01       	movw	r24, r28
    625a:	01 96       	adiw	r24, 0x01	; 1
    625c:	be 01       	movw	r22, r28
    625e:	69 5f       	subi	r22, 0xF9	; 249
    6260:	7f 4f       	sbci	r23, 0xFF	; 255
    6262:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6266:	88 23       	and	r24, r24
    6268:	09 f4       	brne	.+2      	; 0x626c <main+0x108c>
    626a:	2c c8       	rjmp	.-4008   	; 0x52c4 <main+0xe4>
				memset(Buff, (BYTE)p2, sizeof Buff);
    626c:	6f 81       	ldd	r22, Y+7	; 0x07
    626e:	8f e0       	ldi	r24, 0x0F	; 15
    6270:	99 e0       	ldi	r25, 0x09	; 9
    6272:	70 e0       	ldi	r23, 0x00	; 0
    6274:	40 e0       	ldi	r20, 0x00	; 0
    6276:	54 e0       	ldi	r21, 0x04	; 4
    6278:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <memset>
				p2 = 0;
    627c:	1f 82       	std	Y+7, r1	; 0x07
    627e:	18 86       	std	Y+8, r1	; 0x08
    6280:	19 86       	std	Y+9, r1	; 0x09
    6282:	1a 86       	std	Y+10, r1	; 0x0a
				cli(); Timer = 0; sei();
    6284:	f8 94       	cli
    6286:	10 92 0a 09 	sts	0x090A, r1
    628a:	10 92 09 09 	sts	0x0909, r1
    628e:	78 94       	sei
				while (p1) {
					if (p1 >= sizeof Buff)	{ cnt = sizeof Buff; p1 -= sizeof Buff; }
    6290:	cc 24       	eor	r12, r12
    6292:	dd 24       	eor	r13, r13
    6294:	68 94       	set
    6296:	d2 f8       	bld	r13, 2
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_write(&File[0], Buff, cnt, &s2);
    6298:	08 ec       	ldi	r16, 0xC8	; 200
    629a:	14 e0       	ldi	r17, 0x04	; 4
    629c:	0f 2e       	mov	r0, r31
    629e:	ff e0       	ldi	r31, 0x0F	; 15
    62a0:	ef 2e       	mov	r14, r31
    62a2:	f9 e0       	ldi	r31, 0x09	; 9
    62a4:	ff 2e       	mov	r15, r31
    62a6:	f0 2d       	mov	r31, r0
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof Buff);
				p2 = 0;
				cli(); Timer = 0; sei();
				while (p1) {
    62a8:	3d c0       	rjmp	.+122    	; 0x6324 <main+0x1144>
					if (p1 >= sizeof Buff)	{ cnt = sizeof Buff; p1 -= sizeof Buff; }
    62aa:	80 30       	cpi	r24, 0x00	; 0
    62ac:	34 e0       	ldi	r19, 0x04	; 4
    62ae:	93 07       	cpc	r25, r19
    62b0:	30 e0       	ldi	r19, 0x00	; 0
    62b2:	a3 07       	cpc	r26, r19
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	b3 07       	cpc	r27, r19
    62b8:	5c f0       	brlt	.+22     	; 0x62d0 <main+0x10f0>
    62ba:	dd 8a       	std	Y+21, r13	; 0x15
    62bc:	cc 8a       	std	Y+20, r12	; 0x14
    62be:	80 50       	subi	r24, 0x00	; 0
    62c0:	94 40       	sbci	r25, 0x04	; 4
    62c2:	a0 40       	sbci	r26, 0x00	; 0
    62c4:	b0 40       	sbci	r27, 0x00	; 0
    62c6:	8b 83       	std	Y+3, r24	; 0x03
    62c8:	9c 83       	std	Y+4, r25	; 0x04
    62ca:	ad 83       	std	Y+5, r26	; 0x05
    62cc:	be 83       	std	Y+6, r27	; 0x06
    62ce:	06 c0       	rjmp	.+12     	; 0x62dc <main+0x10fc>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    62d0:	9d 8b       	std	Y+21, r25	; 0x15
    62d2:	8c 8b       	std	Y+20, r24	; 0x14
    62d4:	1b 82       	std	Y+3, r1	; 0x03
    62d6:	1c 82       	std	Y+4, r1	; 0x04
    62d8:	1d 82       	std	Y+5, r1	; 0x05
    62da:	1e 82       	std	Y+6, r1	; 0x06
					res = f_write(&File[0], Buff, cnt, &s2);
    62dc:	4c 89       	ldd	r20, Y+20	; 0x14
    62de:	5d 89       	ldd	r21, Y+21	; 0x15
    62e0:	c8 01       	movw	r24, r16
    62e2:	b7 01       	movw	r22, r14
    62e4:	9e 01       	movw	r18, r28
    62e6:	2e 5e       	subi	r18, 0xEE	; 238
    62e8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ea:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <f_write>
					if (res != FR_OK) { put_rc(res); break; }
    62ee:	88 23       	and	r24, r24
    62f0:	19 f0       	breq	.+6      	; 0x62f8 <main+0x1118>
    62f2:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    62f6:	1f c0       	rjmp	.+62     	; 0x6336 <main+0x1156>
					p2 += s2;
    62f8:	2a 89       	ldd	r18, Y+18	; 0x12
    62fa:	3b 89       	ldd	r19, Y+19	; 0x13
    62fc:	a9 01       	movw	r20, r18
    62fe:	60 e0       	ldi	r22, 0x00	; 0
    6300:	70 e0       	ldi	r23, 0x00	; 0
    6302:	8f 81       	ldd	r24, Y+7	; 0x07
    6304:	98 85       	ldd	r25, Y+8	; 0x08
    6306:	a9 85       	ldd	r26, Y+9	; 0x09
    6308:	ba 85       	ldd	r27, Y+10	; 0x0a
    630a:	84 0f       	add	r24, r20
    630c:	95 1f       	adc	r25, r21
    630e:	a6 1f       	adc	r26, r22
    6310:	b7 1f       	adc	r27, r23
    6312:	8f 83       	std	Y+7, r24	; 0x07
    6314:	98 87       	std	Y+8, r25	; 0x08
    6316:	a9 87       	std	Y+9, r26	; 0x09
    6318:	ba 87       	std	Y+10, r27	; 0x0a
					if (cnt != s2) break;
    631a:	8c 89       	ldd	r24, Y+20	; 0x14
    631c:	9d 89       	ldd	r25, Y+21	; 0x15
    631e:	28 17       	cp	r18, r24
    6320:	39 07       	cpc	r19, r25
    6322:	49 f4       	brne	.+18     	; 0x6336 <main+0x1156>
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof Buff);
				p2 = 0;
				cli(); Timer = 0; sei();
				while (p1) {
    6324:	8b 81       	ldd	r24, Y+3	; 0x03
    6326:	9c 81       	ldd	r25, Y+4	; 0x04
    6328:	ad 81       	ldd	r26, Y+5	; 0x05
    632a:	be 81       	ldd	r27, Y+6	; 0x06
    632c:	00 97       	sbiw	r24, 0x00	; 0
    632e:	a1 05       	cpc	r26, r1
    6330:	b1 05       	cpc	r27, r1
    6332:	09 f0       	breq	.+2      	; 0x6336 <main+0x1156>
    6334:	ba cf       	rjmp	.-140    	; 0x62aa <main+0x10ca>
					res = f_write(&File[0], Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				cli(); s2 = Timer; sei();
    6336:	f8 94       	cli
    6338:	80 91 09 09 	lds	r24, 0x0909
    633c:	90 91 0a 09 	lds	r25, 0x090A
    6340:	9b 8b       	std	Y+19, r25	; 0x13
    6342:	8a 8b       	std	Y+18, r24	; 0x12
    6344:	78 94       	sei
				xprintf(PSTR("%lu bytes written with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    6346:	cf 80       	ldd	r12, Y+7	; 0x07
    6348:	d8 84       	ldd	r13, Y+8	; 0x08
    634a:	e9 84       	ldd	r14, Y+9	; 0x09
    634c:	fa 84       	ldd	r15, Y+10	; 0x0a
    634e:	0a 89       	ldd	r16, Y+18	; 0x12
    6350:	1b 89       	ldd	r17, Y+19	; 0x13
    6352:	01 15       	cp	r16, r1
    6354:	11 05       	cpc	r17, r1
    6356:	81 f0       	breq	.+32     	; 0x6378 <main+0x1198>
    6358:	c7 01       	movw	r24, r14
    635a:	b6 01       	movw	r22, r12
    635c:	24 e6       	ldi	r18, 0x64	; 100
    635e:	30 e0       	ldi	r19, 0x00	; 0
    6360:	40 e0       	ldi	r20, 0x00	; 0
    6362:	50 e0       	ldi	r21, 0x00	; 0
    6364:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    6368:	98 01       	movw	r18, r16
    636a:	40 e0       	ldi	r20, 0x00	; 0
    636c:	50 e0       	ldi	r21, 0x00	; 0
    636e:	0e 94 56 36 	call	0x6cac	; 0x6cac <__divmodsi4>
    6372:	89 01       	movw	r16, r18
    6374:	9a 01       	movw	r18, r20
    6376:	03 c0       	rjmp	.+6      	; 0x637e <main+0x119e>
    6378:	00 e0       	ldi	r16, 0x00	; 0
    637a:	10 e0       	ldi	r17, 0x00	; 0
    637c:	98 01       	movw	r18, r16
    637e:	4d b7       	in	r20, 0x3d	; 61
    6380:	5e b7       	in	r21, 0x3e	; 62
    6382:	4a 50       	subi	r20, 0x0A	; 10
    6384:	50 40       	sbci	r21, 0x00	; 0
    6386:	0f b6       	in	r0, 0x3f	; 63
    6388:	f8 94       	cli
    638a:	5e bf       	out	0x3e, r21	; 62
    638c:	0f be       	out	0x3f, r0	; 63
    638e:	4d bf       	out	0x3d, r20	; 61
    6390:	ed b7       	in	r30, 0x3d	; 61
    6392:	fe b7       	in	r31, 0x3e	; 62
    6394:	31 96       	adiw	r30, 0x01	; 1
    6396:	8a e7       	ldi	r24, 0x7A	; 122
    6398:	93 e0       	ldi	r25, 0x03	; 3
    639a:	ad b7       	in	r26, 0x3d	; 61
    639c:	be b7       	in	r27, 0x3e	; 62
    639e:	12 96       	adiw	r26, 0x02	; 2
    63a0:	9c 93       	st	X, r25
    63a2:	8e 93       	st	-X, r24
    63a4:	11 97       	sbiw	r26, 0x01	; 1
    63a6:	c2 82       	std	Z+2, r12	; 0x02
    63a8:	d3 82       	std	Z+3, r13	; 0x03
    63aa:	e4 82       	std	Z+4, r14	; 0x04
    63ac:	f5 82       	std	Z+5, r15	; 0x05
    63ae:	06 83       	std	Z+6, r16	; 0x06
    63b0:	17 83       	std	Z+7, r17	; 0x07
    63b2:	20 87       	std	Z+8, r18	; 0x08
    63b4:	31 87       	std	Z+9, r19	; 0x09
    63b6:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				break;
    63ba:	ed b7       	in	r30, 0x3d	; 61
    63bc:	fe b7       	in	r31, 0x3e	; 62
    63be:	3a 96       	adiw	r30, 0x0a	; 10
    63c0:	0f b6       	in	r0, 0x3f	; 63
    63c2:	f8 94       	cli
    63c4:	fe bf       	out	0x3e, r31	; 62
    63c6:	0f be       	out	0x3f, r0	; 63
    63c8:	ed bf       	out	0x3d, r30	; 61
    63ca:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
			case 'W':							
				f_write(&File[0], "Data Written!\n", 13, &s1);
    63ce:	88 ec       	ldi	r24, 0xC8	; 200
    63d0:	94 e0       	ldi	r25, 0x04	; 4
    63d2:	60 e1       	ldi	r22, 0x10	; 16
    63d4:	71 e0       	ldi	r23, 0x01	; 1
    63d6:	4d e0       	ldi	r20, 0x0D	; 13
    63d8:	50 e0       	ldi	r21, 0x00	; 0
    63da:	9e 01       	movw	r18, r28
    63dc:	20 5f       	subi	r18, 0xF0	; 240
    63de:	3f 4f       	sbci	r19, 0xFF	; 255
    63e0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <f_write>
				break;
    63e4:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				
			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&File[0]));
    63e8:	88 ec       	ldi	r24, 0xC8	; 200
    63ea:	94 e0       	ldi	r25, 0x04	; 4
    63ec:	0e 94 34 23 	call	0x4668	; 0x4668 <f_truncate>
    63f0:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    63f4:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    63f8:	f9 01       	movw	r30, r18
    63fa:	33 96       	adiw	r30, 0x03	; 3
			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&File[0]));
				break;

			case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
				while (*ptr == ' ') ptr++;
    63fc:	6f 5f       	subi	r22, 0xFF	; 255
    63fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6400:	7a 83       	std	Y+2, r23	; 0x02
    6402:	69 83       	std	Y+1, r22	; 0x01
    6404:	81 91       	ld	r24, Z+
    6406:	80 32       	cpi	r24, 0x20	; 32
    6408:	c9 f3       	breq	.-14     	; 0x63fc <main+0x121c>
				ptr2 = strchr(ptr, ' ');
    640a:	cb 01       	movw	r24, r22
    640c:	60 e2       	ldi	r22, 0x20	; 32
    640e:	70 e0       	ldi	r23, 0x00	; 0
    6410:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <strchr>
				if (!ptr2) break;
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	11 f4       	brne	.+4      	; 0x641c <main+0x123c>
    6418:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				*ptr2++ = 0;
    641c:	fc 01       	movw	r30, r24
    641e:	11 92       	st	Z+, r1
				while (*ptr2 == ' ') ptr2++;
    6420:	dc 01       	movw	r26, r24
    6422:	11 96       	adiw	r26, 0x01	; 1
    6424:	2c 91       	ld	r18, X
    6426:	11 97       	sbiw	r26, 0x01	; 1
    6428:	20 32       	cpi	r18, 0x20	; 32
    642a:	31 f4       	brne	.+12     	; 0x6438 <main+0x1258>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    642c:	02 96       	adiw	r24, 0x02	; 2
			case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
				while (*ptr == ' ') ptr++;
				ptr2 = strchr(ptr, ' ');
				if (!ptr2) break;
				*ptr2++ = 0;
				while (*ptr2 == ' ') ptr2++;
    642e:	fc 01       	movw	r30, r24
    6430:	01 96       	adiw	r24, 0x01	; 1
    6432:	20 81       	ld	r18, Z
    6434:	20 32       	cpi	r18, 0x20	; 32
    6436:	d9 f3       	breq	.-10     	; 0x642e <main+0x124e>
				put_rc(f_rename(ptr, ptr2));
    6438:	89 81       	ldd	r24, Y+1	; 0x01
    643a:	9a 81       	ldd	r25, Y+2	; 0x02
    643c:	bf 01       	movw	r22, r30
    643e:	0e 94 5d 26 	call	0x4cba	; 0x4cba <f_rename>
    6442:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    6446:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    644a:	f9 01       	movw	r30, r18
    644c:	33 96       	adiw	r30, 0x03	; 3
				while (*ptr2 == ' ') ptr2++;
				put_rc(f_rename(ptr, ptr2));
				break;

			case 'u' :	/* fu <name> - Unlink a file or dir */
				while (*ptr == ' ') ptr++;
    644e:	6f 5f       	subi	r22, 0xFF	; 255
    6450:	7f 4f       	sbci	r23, 0xFF	; 255
    6452:	7a 83       	std	Y+2, r23	; 0x02
    6454:	69 83       	std	Y+1, r22	; 0x01
    6456:	81 91       	ld	r24, Z+
    6458:	80 32       	cpi	r24, 0x20	; 32
    645a:	c9 f3       	breq	.-14     	; 0x644e <main+0x126e>
				put_rc(f_unlink(ptr));
    645c:	cb 01       	movw	r24, r22
    645e:	0e 94 c4 23 	call	0x4788	; 0x4788 <f_unlink>
    6462:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    6466:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    646a:	f9 01       	movw	r30, r18
    646c:	33 96       	adiw	r30, 0x03	; 3
				while (*ptr == ' ') ptr++;
				put_rc(f_unlink(ptr));
				break;

			case 'k' :	/* fk <name> - Create a directory */
				while (*ptr == ' ') ptr++;
    646e:	6f 5f       	subi	r22, 0xFF	; 255
    6470:	7f 4f       	sbci	r23, 0xFF	; 255
    6472:	7a 83       	std	Y+2, r23	; 0x02
    6474:	69 83       	std	Y+1, r22	; 0x01
    6476:	81 91       	ld	r24, Z+
    6478:	80 32       	cpi	r24, 0x20	; 32
    647a:	c9 f3       	breq	.-14     	; 0x646e <main+0x128e>
				put_rc(f_mkdir(ptr));
    647c:	cb 01       	movw	r24, r22
    647e:	0e 94 68 24 	call	0x48d0	; 0x48d0 <f_mkdir>
    6482:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    6486:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

			case 'a' :	/* fa <atrr> <mask> <name> - Change file/dir attribute */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    648a:	ce 01       	movw	r24, r28
    648c:	01 96       	adiw	r24, 0x01	; 1
    648e:	be 01       	movw	r22, r28
    6490:	6d 5f       	subi	r22, 0xFD	; 253
    6492:	7f 4f       	sbci	r23, 0xFF	; 255
    6494:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6498:	88 23       	and	r24, r24
    649a:	11 f4       	brne	.+4      	; 0x64a0 <main+0x12c0>
    649c:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
    64a0:	ce 01       	movw	r24, r28
    64a2:	01 96       	adiw	r24, 0x01	; 1
    64a4:	be 01       	movw	r22, r28
    64a6:	69 5f       	subi	r22, 0xF9	; 249
    64a8:	7f 4f       	sbci	r23, 0xFF	; 255
    64aa:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    64ae:	88 23       	and	r24, r24
    64b0:	11 f4       	brne	.+4      	; 0x64b6 <main+0x12d6>
    64b2:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				while (*ptr == ' ') ptr++;
    64b6:	89 81       	ldd	r24, Y+1	; 0x01
    64b8:	9a 81       	ldd	r25, Y+2	; 0x02
    64ba:	fc 01       	movw	r30, r24
    64bc:	20 81       	ld	r18, Z
    64be:	20 32       	cpi	r18, 0x20	; 32
    64c0:	39 f4       	brne	.+14     	; 0x64d0 <main+0x12f0>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    64c2:	31 96       	adiw	r30, 0x01	; 1
				put_rc(f_mkdir(ptr));
				break;

			case 'a' :	/* fa <atrr> <mask> <name> - Change file/dir attribute */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				while (*ptr == ' ') ptr++;
    64c4:	01 96       	adiw	r24, 0x01	; 1
    64c6:	9a 83       	std	Y+2, r25	; 0x02
    64c8:	89 83       	std	Y+1, r24	; 0x01
    64ca:	21 91       	ld	r18, Z+
    64cc:	20 32       	cpi	r18, 0x20	; 32
    64ce:	d1 f3       	breq	.-12     	; 0x64c4 <main+0x12e4>
				put_rc(f_chmod(ptr, p1, p2));
    64d0:	6b 81       	ldd	r22, Y+3	; 0x03
    64d2:	4f 81       	ldd	r20, Y+7	; 0x07
    64d4:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <f_chmod>
    64d8:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    64dc:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    64e0:	ce 01       	movw	r24, r28
    64e2:	01 96       	adiw	r24, 0x01	; 1
    64e4:	be 01       	movw	r22, r28
    64e6:	6d 5f       	subi	r22, 0xFD	; 253
    64e8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ea:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    64ee:	88 23       	and	r24, r24
    64f0:	11 f4       	brne	.+4      	; 0x64f6 <main+0x1316>
    64f2:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
    64f6:	ce 01       	movw	r24, r28
    64f8:	01 96       	adiw	r24, 0x01	; 1
    64fa:	be 01       	movw	r22, r28
    64fc:	69 5f       	subi	r22, 0xF9	; 249
    64fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6500:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    6504:	88 23       	and	r24, r24
    6506:	11 f4       	brne	.+4      	; 0x650c <main+0x132c>
    6508:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
    650c:	ce 01       	movw	r24, r28
    650e:	01 96       	adiw	r24, 0x01	; 1
    6510:	be 01       	movw	r22, r28
    6512:	65 5f       	subi	r22, 0xF5	; 245
    6514:	7f 4f       	sbci	r23, 0xFF	; 255
    6516:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    651a:	88 23       	and	r24, r24
    651c:	11 f4       	brne	.+4      	; 0x6522 <main+0x1342>
    651e:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
    6522:	8b 81       	ldd	r24, Y+3	; 0x03
    6524:	9c 81       	ldd	r25, Y+4	; 0x04
    6526:	ad 81       	ldd	r26, Y+5	; 0x05
    6528:	be 81       	ldd	r27, Y+6	; 0x06
    652a:	8c 5b       	subi	r24, 0xBC	; 188
    652c:	97 40       	sbci	r25, 0x07	; 7
    652e:	a0 40       	sbci	r26, 0x00	; 0
    6530:	b0 40       	sbci	r27, 0x00	; 0
    6532:	ac 01       	movw	r20, r24
    6534:	bd 01       	movw	r22, r26
    6536:	03 2e       	mov	r0, r19
    6538:	39 e0       	ldi	r19, 0x09	; 9
    653a:	44 0f       	add	r20, r20
    653c:	55 1f       	adc	r21, r21
    653e:	66 1f       	adc	r22, r22
    6540:	77 1f       	adc	r23, r23
    6542:	3a 95       	dec	r19
    6544:	d1 f7       	brne	.-12     	; 0x653a <main+0x135a>
    6546:	30 2d       	mov	r19, r0
    6548:	8f 81       	ldd	r24, Y+7	; 0x07
    654a:	98 85       	ldd	r25, Y+8	; 0x08
    654c:	a9 85       	ldd	r26, Y+9	; 0x09
    654e:	ba 85       	ldd	r27, Y+10	; 0x0a
    6550:	8f 70       	andi	r24, 0x0F	; 15
    6552:	90 70       	andi	r25, 0x00	; 0
    6554:	a0 70       	andi	r26, 0x00	; 0
    6556:	b0 70       	andi	r27, 0x00	; 0
    6558:	88 0f       	add	r24, r24
    655a:	99 1f       	adc	r25, r25
    655c:	aa 1f       	adc	r26, r26
    655e:	bb 1f       	adc	r27, r27
    6560:	88 0f       	add	r24, r24
    6562:	99 1f       	adc	r25, r25
    6564:	aa 1f       	adc	r26, r26
    6566:	bb 1f       	adc	r27, r27
    6568:	88 0f       	add	r24, r24
    656a:	99 1f       	adc	r25, r25
    656c:	aa 1f       	adc	r26, r26
    656e:	bb 1f       	adc	r27, r27
    6570:	88 0f       	add	r24, r24
    6572:	99 1f       	adc	r25, r25
    6574:	aa 1f       	adc	r26, r26
    6576:	bb 1f       	adc	r27, r27
    6578:	88 0f       	add	r24, r24
    657a:	99 1f       	adc	r25, r25
    657c:	aa 1f       	adc	r26, r26
    657e:	bb 1f       	adc	r27, r27
    6580:	48 2b       	or	r20, r24
    6582:	59 2b       	or	r21, r25
    6584:	8b 85       	ldd	r24, Y+11	; 0x0b
    6586:	9c 85       	ldd	r25, Y+12	; 0x0c
    6588:	8f 71       	andi	r24, 0x1F	; 31
    658a:	90 70       	andi	r25, 0x00	; 0
    658c:	84 2b       	or	r24, r20
    658e:	95 2b       	or	r25, r21
    6590:	d2 01       	movw	r26, r4
    6592:	8d 93       	st	X+, r24
    6594:	9c 93       	st	X, r25
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    6596:	ce 01       	movw	r24, r28
    6598:	01 96       	adiw	r24, 0x01	; 1
    659a:	be 01       	movw	r22, r28
    659c:	6d 5f       	subi	r22, 0xFD	; 253
    659e:	7f 4f       	sbci	r23, 0xFF	; 255
    65a0:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    65a4:	88 23       	and	r24, r24
    65a6:	11 f4       	brne	.+4      	; 0x65ac <main+0x13cc>
    65a8:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
    65ac:	ce 01       	movw	r24, r28
    65ae:	01 96       	adiw	r24, 0x01	; 1
    65b0:	be 01       	movw	r22, r28
    65b2:	69 5f       	subi	r22, 0xF9	; 249
    65b4:	7f 4f       	sbci	r23, 0xFF	; 255
    65b6:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    65ba:	88 23       	and	r24, r24
    65bc:	11 f4       	brne	.+4      	; 0x65c2 <main+0x13e2>
    65be:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
    65c2:	ce 01       	movw	r24, r28
    65c4:	01 96       	adiw	r24, 0x01	; 1
    65c6:	be 01       	movw	r22, r28
    65c8:	65 5f       	subi	r22, 0xF5	; 245
    65ca:	7f 4f       	sbci	r23, 0xFF	; 255
    65cc:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    65d0:	88 23       	and	r24, r24
    65d2:	11 f4       	brne	.+4      	; 0x65d8 <main+0x13f8>
    65d4:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
    65d8:	8f 81       	ldd	r24, Y+7	; 0x07
    65da:	98 85       	ldd	r25, Y+8	; 0x08
    65dc:	a9 85       	ldd	r26, Y+9	; 0x09
    65de:	ba 85       	ldd	r27, Y+10	; 0x0a
    65e0:	8f 73       	andi	r24, 0x3F	; 63
    65e2:	90 70       	andi	r25, 0x00	; 0
    65e4:	a0 70       	andi	r26, 0x00	; 0
    65e6:	b0 70       	andi	r27, 0x00	; 0
    65e8:	ac 01       	movw	r20, r24
    65ea:	bd 01       	movw	r22, r26
    65ec:	68 94       	set
    65ee:	14 f8       	bld	r1, 4
    65f0:	44 0f       	add	r20, r20
    65f2:	55 1f       	adc	r21, r21
    65f4:	66 1f       	adc	r22, r22
    65f6:	77 1f       	adc	r23, r23
    65f8:	16 94       	lsr	r1
    65fa:	d1 f7       	brne	.-12     	; 0x65f0 <main+0x1410>
    65fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    65fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    6600:	ad 85       	ldd	r26, Y+13	; 0x0d
    6602:	be 85       	ldd	r27, Y+14	; 0x0e
    6604:	b5 95       	asr	r27
    6606:	a7 95       	ror	r26
    6608:	97 95       	ror	r25
    660a:	87 95       	ror	r24
    660c:	8f 71       	andi	r24, 0x1F	; 31
    660e:	90 70       	andi	r25, 0x00	; 0
    6610:	48 2b       	or	r20, r24
    6612:	59 2b       	or	r21, r25
    6614:	8b 81       	ldd	r24, Y+3	; 0x03
    6616:	9c 81       	ldd	r25, Y+4	; 0x04
    6618:	ad 81       	ldd	r26, Y+5	; 0x05
    661a:	be 81       	ldd	r27, Y+6	; 0x06
    661c:	07 2e       	mov	r0, r23
    661e:	7b e0       	ldi	r23, 0x0B	; 11
    6620:	88 0f       	add	r24, r24
    6622:	99 1f       	adc	r25, r25
    6624:	aa 1f       	adc	r26, r26
    6626:	bb 1f       	adc	r27, r27
    6628:	7a 95       	dec	r23
    662a:	d1 f7       	brne	.-12     	; 0x6620 <main+0x1440>
    662c:	70 2d       	mov	r23, r0
    662e:	84 2b       	or	r24, r20
    6630:	95 2b       	or	r25, r21
    6632:	90 93 b9 04 	sts	0x04B9, r25
    6636:	80 93 b8 04 	sts	0x04B8, r24
				while (*ptr == ' ') ptr++;
    663a:	89 81       	ldd	r24, Y+1	; 0x01
    663c:	9a 81       	ldd	r25, Y+2	; 0x02
    663e:	fc 01       	movw	r30, r24
    6640:	20 81       	ld	r18, Z
    6642:	20 32       	cpi	r18, 0x20	; 32
    6644:	39 f4       	brne	.+14     	; 0x6654 <main+0x1474>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    6646:	31 96       	adiw	r30, 0x01	; 1
			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
				while (*ptr == ' ') ptr++;
    6648:	01 96       	adiw	r24, 0x01	; 1
    664a:	9a 83       	std	Y+2, r25	; 0x02
    664c:	89 83       	std	Y+1, r24	; 0x01
    664e:	21 91       	ld	r18, Z+
    6650:	20 32       	cpi	r18, 0x20	; 32
    6652:	d1 f3       	breq	.-12     	; 0x6648 <main+0x1468>
				put_rc(f_utime(ptr, &Finfo));
    6654:	62 eb       	ldi	r22, 0xB2	; 178
    6656:	74 e0       	ldi	r23, 0x04	; 4
    6658:	0e 94 08 26 	call	0x4c10	; 0x4c10 <f_utime>
    665c:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    6660:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    6664:	f9 01       	movw	r30, r18
    6666:	33 96       	adiw	r30, 0x03	; 3
				while (*ptr == ' ') ptr++;
				put_rc(f_utime(ptr, &Finfo));
				break;

			case 'x' : /* fx <src_name> <dst_name> - Copy file */
				while (*ptr == ' ') ptr++;
    6668:	6f 5f       	subi	r22, 0xFF	; 255
    666a:	7f 4f       	sbci	r23, 0xFF	; 255
    666c:	7a 83       	std	Y+2, r23	; 0x02
    666e:	69 83       	std	Y+1, r22	; 0x01
    6670:	81 91       	ld	r24, Z+
    6672:	80 32       	cpi	r24, 0x20	; 32
    6674:	c9 f3       	breq	.-14     	; 0x6668 <main+0x1488>
				ptr2 = strchr(ptr, ' ');
    6676:	cb 01       	movw	r24, r22
    6678:	60 e2       	ldi	r22, 0x20	; 32
    667a:	70 e0       	ldi	r23, 0x00	; 0
    667c:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <strchr>
				if (!ptr2) break;
    6680:	00 97       	sbiw	r24, 0x00	; 0
    6682:	11 f4       	brne	.+4      	; 0x6688 <main+0x14a8>
    6684:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				*ptr2++ = 0;
    6688:	dc 01       	movw	r26, r24
    668a:	1d 92       	st	X+, r1
    668c:	8d 01       	movw	r16, r26
				while (*ptr2 == ' ') ptr2++;
    668e:	fc 01       	movw	r30, r24
    6690:	21 81       	ldd	r18, Z+1	; 0x01
    6692:	20 32       	cpi	r18, 0x20	; 32
    6694:	39 f4       	brne	.+14     	; 0x66a4 <main+0x14c4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    6696:	02 96       	adiw	r24, 0x02	; 2
			case 'x' : /* fx <src_name> <dst_name> - Copy file */
				while (*ptr == ' ') ptr++;
				ptr2 = strchr(ptr, ' ');
				if (!ptr2) break;
				*ptr2++ = 0;
				while (*ptr2 == ' ') ptr2++;
    6698:	fc 01       	movw	r30, r24
    669a:	01 96       	adiw	r24, 0x01	; 1
    669c:	20 81       	ld	r18, Z
    669e:	20 32       	cpi	r18, 0x20	; 32
    66a0:	d9 f3       	breq	.-10     	; 0x6698 <main+0x14b8>
    66a2:	8f 01       	movw	r16, r30
				xprintf(PSTR("Opening \"%s\""), ptr);
    66a4:	00 d0       	rcall	.+0      	; 0x66a6 <main+0x14c6>
    66a6:	00 d0       	rcall	.+0      	; 0x66a8 <main+0x14c8>
    66a8:	81 ea       	ldi	r24, 0xA1	; 161
    66aa:	93 e0       	ldi	r25, 0x03	; 3
    66ac:	ad b7       	in	r26, 0x3d	; 61
    66ae:	be b7       	in	r27, 0x3e	; 62
    66b0:	12 96       	adiw	r26, 0x02	; 2
    66b2:	9c 93       	st	X, r25
    66b4:	8e 93       	st	-X, r24
    66b6:	11 97       	sbiw	r26, 0x01	; 1
    66b8:	89 81       	ldd	r24, Y+1	; 0x01
    66ba:	9a 81       	ldd	r25, Y+2	; 0x02
    66bc:	14 96       	adiw	r26, 0x04	; 4
    66be:	9c 93       	st	X, r25
    66c0:	8e 93       	st	-X, r24
    66c2:	13 97       	sbiw	r26, 0x03	; 3
    66c4:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				res = f_open(&File[0], ptr, FA_OPEN_EXISTING | FA_READ);
    66c8:	0f 90       	pop	r0
    66ca:	0f 90       	pop	r0
    66cc:	0f 90       	pop	r0
    66ce:	0f 90       	pop	r0
    66d0:	69 81       	ldd	r22, Y+1	; 0x01
    66d2:	7a 81       	ldd	r23, Y+2	; 0x02
    66d4:	88 ec       	ldi	r24, 0xC8	; 200
    66d6:	94 e0       	ldi	r25, 0x04	; 4
    66d8:	41 e0       	ldi	r20, 0x01	; 1
    66da:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <f_open>
				if (res) {
    66de:	88 23       	and	r24, r24
    66e0:	21 f0       	breq	.+8      	; 0x66ea <main+0x150a>
					put_rc(res);
    66e2:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
					break;
    66e6:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				}
				xprintf(PSTR("\nCreating \"%s\""), ptr2);
    66ea:	00 d0       	rcall	.+0      	; 0x66ec <main+0x150c>
    66ec:	00 d0       	rcall	.+0      	; 0x66ee <main+0x150e>
    66ee:	8e ea       	ldi	r24, 0xAE	; 174
    66f0:	93 e0       	ldi	r25, 0x03	; 3
    66f2:	ed b7       	in	r30, 0x3d	; 61
    66f4:	fe b7       	in	r31, 0x3e	; 62
    66f6:	92 83       	std	Z+2, r25	; 0x02
    66f8:	81 83       	std	Z+1, r24	; 0x01
    66fa:	14 83       	std	Z+4, r17	; 0x04
    66fc:	03 83       	std	Z+3, r16	; 0x03
    66fe:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				res = f_open(&File[1], ptr2, FA_CREATE_ALWAYS | FA_WRITE);
    6702:	0f 90       	pop	r0
    6704:	0f 90       	pop	r0
    6706:	0f 90       	pop	r0
    6708:	0f 90       	pop	r0
    670a:	88 ee       	ldi	r24, 0xE8	; 232
    670c:	96 e0       	ldi	r25, 0x06	; 6
    670e:	b8 01       	movw	r22, r16
    6710:	4a e0       	ldi	r20, 0x0A	; 10
    6712:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <f_open>
				if (res) {
    6716:	88 23       	and	r24, r24
    6718:	41 f0       	breq	.+16     	; 0x672a <main+0x154a>
					put_rc(res);
    671a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
					f_close(&File[0]);
    671e:	88 ec       	ldi	r24, 0xC8	; 200
    6720:	94 e0       	ldi	r25, 0x04	; 4
    6722:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <f_close>
					break;
    6726:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
				}
				xprintf(PSTR("\nCopying..."));
    672a:	00 d0       	rcall	.+0      	; 0x672c <main+0x154c>
    672c:	8d eb       	ldi	r24, 0xBD	; 189
    672e:	93 e0       	ldi	r25, 0x03	; 3
    6730:	ad b7       	in	r26, 0x3d	; 61
    6732:	be b7       	in	r27, 0x3e	; 62
    6734:	12 96       	adiw	r26, 0x02	; 2
    6736:	9c 93       	st	X, r25
    6738:	8e 93       	st	-X, r24
    673a:	11 97       	sbiw	r26, 0x01	; 1
    673c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				cli(); Timer = 0; sei();
    6740:	f8 94       	cli
    6742:	10 92 0a 09 	sts	0x090A, r1
    6746:	10 92 09 09 	sts	0x0909, r1
    674a:	78 94       	sei
				p1 = 0;
    674c:	1b 82       	std	Y+3, r1	; 0x03
    674e:	1c 82       	std	Y+4, r1	; 0x04
    6750:	1d 82       	std	Y+5, r1	; 0x05
    6752:	1e 82       	std	Y+6, r1	; 0x06
    6754:	0f 90       	pop	r0
    6756:	0f 90       	pop	r0
				for (;;) {
					res = f_read(&File[0], Buff, sizeof Buff, &s1);
    6758:	0f 2e       	mov	r0, r31
    675a:	f8 ec       	ldi	r31, 0xC8	; 200
    675c:	ef 2e       	mov	r14, r31
    675e:	f4 e0       	ldi	r31, 0x04	; 4
    6760:	ff 2e       	mov	r15, r31
    6762:	f0 2d       	mov	r31, r0
    6764:	0f e0       	ldi	r16, 0x0F	; 15
    6766:	19 e0       	ldi	r17, 0x09	; 9
					if (res || s1 == 0) break;   /* error or eof */
					res = f_write(&File[1], Buff, s1, &s2);
    6768:	0f 2e       	mov	r0, r31
    676a:	f8 ee       	ldi	r31, 0xE8	; 232
    676c:	cf 2e       	mov	r12, r31
    676e:	f6 e0       	ldi	r31, 0x06	; 6
    6770:	df 2e       	mov	r13, r31
    6772:	f0 2d       	mov	r31, r0
				}
				xprintf(PSTR("\nCopying..."));
				cli(); Timer = 0; sei();
				p1 = 0;
				for (;;) {
					res = f_read(&File[0], Buff, sizeof Buff, &s1);
    6774:	c7 01       	movw	r24, r14
    6776:	b8 01       	movw	r22, r16
    6778:	40 e0       	ldi	r20, 0x00	; 0
    677a:	54 e0       	ldi	r21, 0x04	; 4
    677c:	9e 01       	movw	r18, r28
    677e:	20 5f       	subi	r18, 0xF0	; 240
    6780:	3f 4f       	sbci	r19, 0xFF	; 255
    6782:	0e 94 1f 1a 	call	0x343e	; 0x343e <f_read>
    6786:	28 2f       	mov	r18, r24
					if (res || s1 == 0) break;   /* error or eof */
    6788:	88 23       	and	r24, r24
    678a:	31 f5       	brne	.+76     	; 0x67d8 <main+0x15f8>
    678c:	48 89       	ldd	r20, Y+16	; 0x10
    678e:	59 89       	ldd	r21, Y+17	; 0x11
    6790:	41 15       	cp	r20, r1
    6792:	51 05       	cpc	r21, r1
    6794:	21 f1       	breq	.+72     	; 0x67de <main+0x15fe>
					res = f_write(&File[1], Buff, s1, &s2);
    6796:	c6 01       	movw	r24, r12
    6798:	b8 01       	movw	r22, r16
    679a:	9e 01       	movw	r18, r28
    679c:	2e 5e       	subi	r18, 0xEE	; 238
    679e:	3f 4f       	sbci	r19, 0xFF	; 255
    67a0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <f_write>
    67a4:	28 2f       	mov	r18, r24
					p1 += s2;
    67a6:	ea 89       	ldd	r30, Y+18	; 0x12
    67a8:	fb 89       	ldd	r31, Y+19	; 0x13
    67aa:	af 01       	movw	r20, r30
    67ac:	60 e0       	ldi	r22, 0x00	; 0
    67ae:	70 e0       	ldi	r23, 0x00	; 0
    67b0:	8b 81       	ldd	r24, Y+3	; 0x03
    67b2:	9c 81       	ldd	r25, Y+4	; 0x04
    67b4:	ad 81       	ldd	r26, Y+5	; 0x05
    67b6:	be 81       	ldd	r27, Y+6	; 0x06
    67b8:	84 0f       	add	r24, r20
    67ba:	95 1f       	adc	r25, r21
    67bc:	a6 1f       	adc	r26, r22
    67be:	b7 1f       	adc	r27, r23
    67c0:	8b 83       	std	Y+3, r24	; 0x03
    67c2:	9c 83       	std	Y+4, r25	; 0x04
    67c4:	ad 83       	std	Y+5, r26	; 0x05
    67c6:	be 83       	std	Y+6, r27	; 0x06
					if (res || s2 < s1) break;   /* error or disk full */
    67c8:	22 23       	and	r18, r18
    67ca:	31 f4       	brne	.+12     	; 0x67d8 <main+0x15f8>
    67cc:	88 89       	ldd	r24, Y+16	; 0x10
    67ce:	99 89       	ldd	r25, Y+17	; 0x11
    67d0:	e8 17       	cp	r30, r24
    67d2:	f9 07       	cpc	r31, r25
    67d4:	78 f6       	brcc	.-98     	; 0x6774 <main+0x1594>
    67d6:	03 c0       	rjmp	.+6      	; 0x67de <main+0x15fe>
				}
				if (res) put_rc(res);
    67d8:	82 2f       	mov	r24, r18
    67da:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				cli(); s2 = Timer; sei();
    67de:	f8 94       	cli
    67e0:	80 91 09 09 	lds	r24, 0x0909
    67e4:	90 91 0a 09 	lds	r25, 0x090A
    67e8:	9b 8b       	std	Y+19, r25	; 0x13
    67ea:	8a 8b       	std	Y+18, r24	; 0x12
    67ec:	78 94       	sei
				xprintf(PSTR("\n%lu bytes copied with %lu bytes/sec.\n"), p1, p1 * 100 / s2);
    67ee:	6b 81       	ldd	r22, Y+3	; 0x03
    67f0:	7c 81       	ldd	r23, Y+4	; 0x04
    67f2:	8d 81       	ldd	r24, Y+5	; 0x05
    67f4:	9e 81       	ldd	r25, Y+6	; 0x06
    67f6:	ed b7       	in	r30, 0x3d	; 61
    67f8:	fe b7       	in	r31, 0x3e	; 62
    67fa:	3a 97       	sbiw	r30, 0x0a	; 10
    67fc:	0f b6       	in	r0, 0x3f	; 63
    67fe:	f8 94       	cli
    6800:	fe bf       	out	0x3e, r31	; 62
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	ed bf       	out	0x3d, r30	; 61
    6806:	0d b7       	in	r16, 0x3d	; 61
    6808:	1e b7       	in	r17, 0x3e	; 62
    680a:	0f 5f       	subi	r16, 0xFF	; 255
    680c:	1f 4f       	sbci	r17, 0xFF	; 255
    680e:	29 ec       	ldi	r18, 0xC9	; 201
    6810:	33 e0       	ldi	r19, 0x03	; 3
    6812:	32 83       	std	Z+2, r19	; 0x02
    6814:	21 83       	std	Z+1, r18	; 0x01
    6816:	d8 01       	movw	r26, r16
    6818:	12 96       	adiw	r26, 0x02	; 2
    681a:	6d 93       	st	X+, r22
    681c:	7d 93       	st	X+, r23
    681e:	8d 93       	st	X+, r24
    6820:	9c 93       	st	X, r25
    6822:	15 97       	sbiw	r26, 0x05	; 5
    6824:	24 e6       	ldi	r18, 0x64	; 100
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	40 e0       	ldi	r20, 0x00	; 0
    682a:	50 e0       	ldi	r21, 0x00	; 0
    682c:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <__mulsi3>
    6830:	2a 89       	ldd	r18, Y+18	; 0x12
    6832:	3b 89       	ldd	r19, Y+19	; 0x13
    6834:	40 e0       	ldi	r20, 0x00	; 0
    6836:	50 e0       	ldi	r21, 0x00	; 0
    6838:	0e 94 56 36 	call	0x6cac	; 0x6cac <__divmodsi4>
    683c:	f8 01       	movw	r30, r16
    683e:	26 83       	std	Z+6, r18	; 0x06
    6840:	37 83       	std	Z+7, r19	; 0x07
    6842:	40 87       	std	Z+8, r20	; 0x08
    6844:	51 87       	std	Z+9, r21	; 0x09
    6846:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <xprintf>
				f_close(&File[0]);
    684a:	2d b7       	in	r18, 0x3d	; 61
    684c:	3e b7       	in	r19, 0x3e	; 62
    684e:	26 5f       	subi	r18, 0xF6	; 246
    6850:	3f 4f       	sbci	r19, 0xFF	; 255
    6852:	0f b6       	in	r0, 0x3f	; 63
    6854:	f8 94       	cli
    6856:	3e bf       	out	0x3e, r19	; 62
    6858:	0f be       	out	0x3f, r0	; 63
    685a:	2d bf       	out	0x3d, r18	; 61
    685c:	88 ec       	ldi	r24, 0xC8	; 200
    685e:	94 e0       	ldi	r25, 0x04	; 4
    6860:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <f_close>
				f_close(&File[1]);
    6864:	88 ee       	ldi	r24, 0xE8	; 232
    6866:	96 e0       	ldi	r25, 0x06	; 6
    6868:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <f_close>
				break;
    686c:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
    6870:	f9 01       	movw	r30, r18
    6872:	33 96       	adiw	r30, 0x03	; 3
				f_close(&File[0]);
				f_close(&File[1]);
				break;
#if _FS_RPATH
			case 'g' :	/* fg <path> - Change current directory */
				while (*ptr == ' ') ptr++;
    6874:	6f 5f       	subi	r22, 0xFF	; 255
    6876:	7f 4f       	sbci	r23, 0xFF	; 255
    6878:	7a 83       	std	Y+2, r23	; 0x02
    687a:	69 83       	std	Y+1, r22	; 0x01
    687c:	81 91       	ld	r24, Z+
    687e:	80 32       	cpi	r24, 0x20	; 32
    6880:	c9 f3       	breq	.-14     	; 0x6874 <main+0x1694>
				put_rc(f_chdir(ptr));
    6882:	cb 01       	movw	r24, r22
    6884:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <f_chdir>
    6888:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
				break;
    688c:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

			case 'j' :	/* fj <drive#> - Change current drive */
				if (xatoi(&ptr, &p1)) {
    6890:	ce 01       	movw	r24, r28
    6892:	01 96       	adiw	r24, 0x01	; 1
    6894:	be 01       	movw	r22, r28
    6896:	6d 5f       	subi	r22, 0xFD	; 253
    6898:	7f 4f       	sbci	r23, 0xFF	; 255
    689a:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <xatoi>
    689e:	88 23       	and	r24, r24
    68a0:	11 f4       	brne	.+4      	; 0x68a6 <main+0x16c6>
    68a2:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
					put_rc(f_chdrive((BYTE)p1));
    68a6:	8b 81       	ldd	r24, Y+3	; 0x03
    68a8:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <f_chdrive>
    68ac:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <put_rc>
    68b0:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>
// 			rtc_gettime(&rtc);
// 			xprintf(PSTR("%u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
// 			break;

		case '?' :	/* Show Command List */
			xputs(PSTR(
    68b4:	80 ef       	ldi	r24, 0xF0	; 240
    68b6:	93 e0       	ldi	r25, 0x03	; 3
    68b8:	0e 94 18 35 	call	0x6a30	; 0x6a30 <xputs>
				"[Misc commands]\n"
				" p <wavfile> - Play RIFF-WAVE file\n"
				" t [<year> <month> <mday> <hour> <min> <sec>] - Set/Show current time\n"
				"\n")
			);
			break;
    68bc:	0c 94 62 29 	jmp	0x52c4	; 0x52c4 <main+0xe4>

000068c0 <uart_init>:
// 	UBRR0L = F_CPU / BAUD / 16 - 1;
// 	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
// 	
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    68c0:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    68c4:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    68c8:	e1 ec       	ldi	r30, 0xC1	; 193
    68ca:	f0 e0       	ldi	r31, 0x00	; 0
    68cc:	88 e1       	ldi	r24, 0x18	; 24
    68ce:	80 83       	st	Z, r24
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
    68d0:	86 e0       	ldi	r24, 0x06	; 6
    68d2:	80 93 c2 00 	sts	0x00C2, r24
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
    68d6:	80 81       	ld	r24, Z
    68d8:	80 68       	ori	r24, 0x80	; 128
    68da:	80 83       	st	Z, r24
}
    68dc:	08 95       	ret

000068de <uart_test>:

/* Get a received character */

uint8_t uart_test (void)
{
	return RxFifo.ct;
    68de:	80 91 fa 01 	lds	r24, 0x01FA
}
    68e2:	08 95       	ret

000068e4 <uart_get>:
uint8_t uart_get (void)
{
	uint8_t d, i;


	while (RxFifo.ct == 0) ;
    68e4:	ea ef       	ldi	r30, 0xFA	; 250
    68e6:	f1 e0       	ldi	r31, 0x01	; 1
    68e8:	80 81       	ld	r24, Z
    68ea:	88 23       	and	r24, r24
    68ec:	e9 f3       	breq	.-6      	; 0x68e8 <uart_get+0x4>
	i = RxFifo.ri;
    68ee:	90 91 f9 01 	lds	r25, 0x01F9
	d = RxFifo.buff[i];
    68f2:	e8 ef       	ldi	r30, 0xF8	; 248
    68f4:	f1 e0       	ldi	r31, 0x01	; 1
    68f6:	df 01       	movw	r26, r30
    68f8:	a9 0f       	add	r26, r25
    68fa:	b1 1d       	adc	r27, r1
    68fc:	13 96       	adiw	r26, 0x03	; 3
    68fe:	8c 91       	ld	r24, X
    6900:	13 97       	sbiw	r26, 0x03	; 3
	cli();
    6902:	f8 94       	cli
	RxFifo.ct--;
    6904:	22 81       	ldd	r18, Z+2	; 0x02
    6906:	21 50       	subi	r18, 0x01	; 1
    6908:	22 83       	std	Z+2, r18	; 0x02
	sei();
    690a:	78 94       	sei
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;
    690c:	9f 5f       	subi	r25, 0xFF	; 255
    690e:	9f 73       	andi	r25, 0x3F	; 63
    6910:	90 93 f9 01 	sts	0x01F9, r25

	return d;
}
    6914:	08 95       	ret

00006916 <uart_put>:
void uart_put (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    6916:	ed e3       	ldi	r30, 0x3D	; 61
    6918:	f2 e0       	ldi	r31, 0x02	; 2
    691a:	90 81       	ld	r25, Z
    691c:	90 34       	cpi	r25, 0x40	; 64
    691e:	e8 f7       	brcc	.-6      	; 0x691a <uart_put+0x4>
	i = TxFifo.wi;
    6920:	90 91 3b 02 	lds	r25, 0x023B
	TxFifo.buff[i] = d;
    6924:	e9 2f       	mov	r30, r25
    6926:	f0 e0       	ldi	r31, 0x00	; 0
    6928:	e5 5c       	subi	r30, 0xC5	; 197
    692a:	fd 4f       	sbci	r31, 0xFD	; 253
    692c:	83 83       	std	Z+3, r24	; 0x03
	cli();
    692e:	f8 94       	cli
	TxFifo.ct++;
    6930:	80 91 3d 02 	lds	r24, 0x023D
    6934:	8f 5f       	subi	r24, 0xFF	; 255
    6936:	80 93 3d 02 	sts	0x023D, r24
	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0) | _BV(UDRIE0);
    693a:	88 eb       	ldi	r24, 0xB8	; 184
    693c:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    6940:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    6942:	9f 5f       	subi	r25, 0xFF	; 255
    6944:	9f 73       	andi	r25, 0x3F	; 63
    6946:	90 93 3b 02 	sts	0x023B, r25
}
    694a:	08 95       	ret

0000694c <__vector_20>:


/* UART RXC interrupt */

ISR(USART0_RX_vect)
{
    694c:	1f 92       	push	r1
    694e:	0f 92       	push	r0
    6950:	0f b6       	in	r0, 0x3f	; 63
    6952:	0f 92       	push	r0
    6954:	11 24       	eor	r1, r1
    6956:	8f 93       	push	r24
    6958:	9f 93       	push	r25
    695a:	af 93       	push	r26
    695c:	bf 93       	push	r27
    695e:	ef 93       	push	r30
    6960:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    6962:	90 91 c6 00 	lds	r25, 0x00C6
	n = RxFifo.ct;
    6966:	80 91 fa 01 	lds	r24, 0x01FA
	if (n < sizeof RxFifo.buff) {
    696a:	80 34       	cpi	r24, 0x40	; 64
    696c:	70 f4       	brcc	.+28     	; 0x698a <__vector_20+0x3e>
		RxFifo.ct = ++n;
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	80 93 fa 01 	sts	0x01FA, r24
		i = RxFifo.wi;
    6974:	e8 ef       	ldi	r30, 0xF8	; 248
    6976:	f1 e0       	ldi	r31, 0x01	; 1
    6978:	80 81       	ld	r24, Z
		RxFifo.buff[i] = d;
    697a:	df 01       	movw	r26, r30
    697c:	a8 0f       	add	r26, r24
    697e:	b1 1d       	adc	r27, r1
    6980:	13 96       	adiw	r26, 0x03	; 3
    6982:	9c 93       	st	X, r25
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    6984:	8f 5f       	subi	r24, 0xFF	; 255
    6986:	8f 73       	andi	r24, 0x3F	; 63
    6988:	80 83       	st	Z, r24
	}
}
    698a:	ff 91       	pop	r31
    698c:	ef 91       	pop	r30
    698e:	bf 91       	pop	r27
    6990:	af 91       	pop	r26
    6992:	9f 91       	pop	r25
    6994:	8f 91       	pop	r24
    6996:	0f 90       	pop	r0
    6998:	0f be       	out	0x3f, r0	; 63
    699a:	0f 90       	pop	r0
    699c:	1f 90       	pop	r1
    699e:	18 95       	reti

000069a0 <__vector_21>:


/* UART UDRE interrupt */

ISR(USART0_UDRE_vect)
{
    69a0:	1f 92       	push	r1
    69a2:	0f 92       	push	r0
    69a4:	0f b6       	in	r0, 0x3f	; 63
    69a6:	0f 92       	push	r0
    69a8:	11 24       	eor	r1, r1
    69aa:	2f 93       	push	r18
    69ac:	3f 93       	push	r19
    69ae:	8f 93       	push	r24
    69b0:	9f 93       	push	r25
    69b2:	af 93       	push	r26
    69b4:	bf 93       	push	r27
    69b6:	ef 93       	push	r30
    69b8:	ff 93       	push	r31
	uint8_t n, i;


	n = TxFifo.ct;
    69ba:	80 91 3d 02 	lds	r24, 0x023D
	if (n) {
    69be:	88 23       	and	r24, r24
    69c0:	b1 f0       	breq	.+44     	; 0x69ee <__vector_21+0x4e>
		TxFifo.ct = --n;
    69c2:	28 2f       	mov	r18, r24
    69c4:	21 50       	subi	r18, 0x01	; 1
    69c6:	8d e3       	ldi	r24, 0x3D	; 61
    69c8:	92 e0       	ldi	r25, 0x02	; 2
    69ca:	20 93 3d 02 	sts	0x023D, r18
		i = TxFifo.ri;
    69ce:	fc 01       	movw	r30, r24
    69d0:	32 91       	ld	r19, -Z
		UDR0 = TxFifo.buff[i];
    69d2:	02 97       	sbiw	r24, 0x02	; 2
    69d4:	dc 01       	movw	r26, r24
    69d6:	a3 0f       	add	r26, r19
    69d8:	b1 1d       	adc	r27, r1
    69da:	13 96       	adiw	r26, 0x03	; 3
    69dc:	8c 91       	ld	r24, X
    69de:	13 97       	sbiw	r26, 0x03	; 3
    69e0:	80 93 c6 00 	sts	0x00C6, r24
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    69e4:	3f 5f       	subi	r19, 0xFF	; 255
    69e6:	3f 73       	andi	r19, 0x3F	; 63
    69e8:	30 83       	st	Z, r19
	}
	if (n == 0) UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
    69ea:	22 23       	and	r18, r18
    69ec:	19 f4       	brne	.+6      	; 0x69f4 <__vector_21+0x54>
    69ee:	88 e9       	ldi	r24, 0x98	; 152
    69f0:	80 93 c1 00 	sts	0x00C1, r24
}
    69f4:	ff 91       	pop	r31
    69f6:	ef 91       	pop	r30
    69f8:	bf 91       	pop	r27
    69fa:	af 91       	pop	r26
    69fc:	9f 91       	pop	r25
    69fe:	8f 91       	pop	r24
    6a00:	3f 91       	pop	r19
    6a02:	2f 91       	pop	r18
    6a04:	0f 90       	pop	r0
    6a06:	0f be       	out	0x3f, r0	; 63
    6a08:	0f 90       	pop	r0
    6a0a:	1f 90       	pop	r1
    6a0c:	18 95       	reti

00006a0e <xputc>:

.func xputc
.global xputc
xputc:
#if CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    6a0e:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    6a10:	19 f4       	brne	.+6      	; 0x6a18 <xputc+0xa>
	ldi	r24, 13		;
    6a12:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    6a14:	01 d0       	rcall	.+2      	; 0x6a18 <xputc+0xa>
	ldi	r24, 10		;/
    6a16:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    6a18:	ff 93       	push	r31
	push	ZL
    6a1a:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    6a1c:	e0 91 7e 02 	lds	r30, 0x027E
	lds	ZH, xfunc_out+1	;/
    6a20:	f0 91 7f 02 	lds	r31, 0x027F
	sbiw	ZL, 0		;Skip if null
    6a24:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    6a26:	09 f0       	breq	.+2      	; 0x6a2a <xputc+0x1c>
	icall
    6a28:	09 95       	icall
2:	pop	ZL
    6a2a:	ef 91       	pop	r30
	pop	ZH
    6a2c:	ff 91       	pop	r31
	ret
    6a2e:	08 95       	ret

00006a30 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    6a30:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    6a32:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    6a34:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    6a36:	11 f0       	breq	.+4      	; 0x6a3c <xputs+0xc>
	rcall	xputc
    6a38:	ea df       	rcall	.-44     	; 0x6a0e <xputc>
	rjmp	1b
    6a3a:	fb cf       	rjmp	.-10     	; 0x6a32 <xputs+0x2>
2:	ret
    6a3c:	08 95       	ret

00006a3e <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    6a3e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    6a40:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    6a42:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    6a44:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    6a46:	0c c0       	rjmp	.+24     	; 0x6a60 <xitoa+0x22>
	neg	r20		;
    6a48:	41 95       	neg	r20
	sbrs	r25, 7		;
    6a4a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    6a4c:	09 c0       	rjmp	.+18     	; 0x6a60 <xitoa+0x22>
	ldi	r30, '-'	;
    6a4e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    6a50:	60 95       	com	r22
	com	r23		;
    6a52:	70 95       	com	r23
	com	r24		;
    6a54:	80 95       	com	r24
	com	r25		;
    6a56:	90 95       	com	r25
	adc	r22, r1		;
    6a58:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    6a5a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    6a5c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    6a5e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    6a60:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    6a62:	02 c0       	rjmp	.+4      	; 0x6a68 <xitoa+0x2a>
	neg	r18		;
    6a64:	21 95       	neg	r18
	ldi	r19, '0'	;/
    6a66:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    6a68:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    6a6a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    6a6c:	66 0f       	add	r22, r22
	rol	r23		;
    6a6e:	77 1f       	adc	r23, r23
	rol	r24		;
    6a70:	88 1f       	adc	r24, r24
	rol	r25		;
    6a72:	99 1f       	adc	r25, r25
	rol	r26		;
    6a74:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    6a76:	a4 17       	cp	r26, r20
	brcs	3f		;
    6a78:	10 f0       	brcs	.+4      	; 0x6a7e <xitoa+0x40>
	sub	r26, r20	;
    6a7a:	a4 1b       	sub	r26, r20
	inc	r22		;
    6a7c:	63 95       	inc	r22
3:	dec	r21		;
    6a7e:	5a 95       	dec	r21
	brne	2b		;/
    6a80:	a9 f7       	brne	.-22     	; 0x6a6c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    6a82:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    6a84:	08 f0       	brcs	.+2      	; 0x6a88 <xitoa+0x4a>
	subi	r26, -7		;
    6a86:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    6a88:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    6a8a:	af 93       	push	r26
	inc	r31		;/
    6a8c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    6a8e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    6a90:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    6a92:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    6a94:	91 05       	cpc	r25, r1
	brne	1b		;/
    6a96:	41 f7       	brne	.-48     	; 0x6a68 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    6a98:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    6a9a:	11 f4       	brne	.+4      	; 0x6aa0 <xitoa+0x62>
	push	r30		;
    6a9c:	ef 93       	push	r30
	inc	r31		;/
    6a9e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    6aa0:	f2 17       	cp	r31, r18
	brcc	6f		;
    6aa2:	18 f4       	brcc	.+6      	; 0x6aaa <xitoa+0x6c>
	push	r19		;
    6aa4:	3f 93       	push	r19
	inc	r31		;
    6aa6:	f3 95       	inc	r31
	rjmp	5b		;/
    6aa8:	fb cf       	rjmp	.-10     	; 0x6aa0 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    6aaa:	8f 91       	pop	r24
	rcall	xputc		;
    6aac:	b0 df       	rcall	.-160    	; 0x6a0e <xputc>
	dec	r31		;
    6aae:	fa 95       	dec	r31
	brne	6b		;/
    6ab0:	e1 f7       	brne	.-8      	; 0x6aaa <xitoa+0x6c>

	ret
    6ab2:	08 95       	ret

00006ab4 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    6ab4:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    6ab6:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    6ab8:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    6aba:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    6abc:	21 f0       	breq	.+8      	; 0x6ac6 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    6abe:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    6ac0:	19 f0       	breq	.+6      	; 0x6ac8 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    6ac2:	a5 df       	rcall	.-182    	; 0x6a0e <xputc>
	rjmp	0b		;/
    6ac4:	f9 cf       	rjmp	.-14     	; 0x6ab8 <xvprintf+0x4>
90:	ret
    6ac6:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    6ac8:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    6aca:	e8 94       	clt
	_LPMI	r21		;Get flags
    6acc:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    6ace:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    6ad0:	c1 f3       	breq	.-16     	; 0x6ac2 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    6ad2:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    6ad4:	11 f4       	brne	.+4      	; 0x6ada <xvprintf+0x26>
	set			;/
    6ad6:	68 94       	set
22:	_LPMI	r21		;Get width
    6ad8:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    6ada:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    6adc:	48 f4       	brcc	.+18     	; 0x6af0 <xvprintf+0x3c>
	subi	r21, '0'	;
    6ade:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    6ae0:	90 f3       	brcs	.-28     	; 0x6ac6 <xvprintf+0x12>
	lsl	r18		;
    6ae2:	22 0f       	add	r18, r18
	mov	r0, r18		;
    6ae4:	02 2e       	mov	r0, r18
	lsl	r18		;
    6ae6:	22 0f       	add	r18, r18
	lsl	r18		;
    6ae8:	22 0f       	add	r18, r18
	add	r18, r0		;
    6aea:	20 0d       	add	r18, r0
	add	r18, r21	;
    6aec:	25 0f       	add	r18, r21
	rjmp	22b		;/
    6aee:	f4 cf       	rjmp	.-24     	; 0x6ad8 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    6af0:	0e f4       	brtc	.+2      	; 0x6af4 <xvprintf+0x40>
	neg	r18		;
    6af2:	21 95       	neg	r18
25:	ld	r24, Y+		;
    6af4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    6af6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    6af8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    6afa:	19 f3       	breq	.-58     	; 0x6ac2 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    6afc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    6afe:	29 f1       	breq	.+74     	; 0x6b4a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    6b00:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    6b02:	59 f1       	breq	.+86     	; 0x6b5a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    6b04:	bc 01       	movw	r22, r24
	clr	r24		;
    6b06:	88 27       	eor	r24, r24
	clr	r25		;
    6b08:	99 27       	eor	r25, r25
	clt			;/
    6b0a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    6b0c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    6b0e:	21 f4       	brne	.+8      	; 0x6b18 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    6b10:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    6b12:	99 91       	ld	r25, Y+
	set			;
    6b14:	68 94       	set
	_LPMI	r21		;/
    6b16:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    6b18:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    6b1a:	39 f4       	brne	.+14     	; 0x6b2a <xvprintf+0x76>
	ldi	r20, -10	;
    6b1c:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    6b1e:	7e f0       	brts	.+30     	; 0x6b3e <xvprintf+0x8a>
	sbrs	r23, 7		;
    6b20:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    6b22:	0d c0       	rjmp	.+26     	; 0x6b3e <xvprintf+0x8a>
	ldi	r24, -1		;
    6b24:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    6b26:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    6b28:	0a c0       	rjmp	.+20     	; 0x6b3e <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    6b2a:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    6b2c:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    6b2e:	39 f0       	breq	.+14     	; 0x6b3e <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    6b30:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    6b32:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    6b34:	21 f0       	breq	.+8      	; 0x6b3e <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    6b36:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    6b38:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    6b3a:	09 f0       	breq	.+2      	; 0x6b3e <xvprintf+0x8a>
	ret			;abort
    6b3c:	08 95       	ret
40:	push	ZH		;Output the value
    6b3e:	ff 93       	push	r31
	push	ZL		;
    6b40:	ef 93       	push	r30
	rcall	xitoa		;
    6b42:	7d df       	rcall	.-262    	; 0x6a3e <xitoa>
42:	pop	ZL		;
    6b44:	ef 91       	pop	r30
	pop	ZH		;
    6b46:	ff 91       	pop	r31
	rjmp	0b		;/
    6b48:	b7 cf       	rjmp	.-146    	; 0x6ab8 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    6b4a:	ff 93       	push	r31
	push	ZL
    6b4c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    6b4e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    6b50:	81 91       	ld	r24, Z+
	cpi	r24, 0
    6b52:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    6b54:	b9 f3       	breq	.-18     	; 0x6b44 <xvprintf+0x90>
	rcall	xputc
    6b56:	5b df       	rcall	.-330    	; 0x6a0e <xputc>
	rjmp	51b
    6b58:	fb cf       	rjmp	.-10     	; 0x6b50 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    6b5a:	ff 93       	push	r31
	push	ZL
    6b5c:	ef 93       	push	r30
	rcall	xputs
    6b5e:	68 df       	rcall	.-304    	; 0x6a30 <xputs>
	rjmp	42b
    6b60:	f1 cf       	rjmp	.-30     	; 0x6b44 <xvprintf+0x90>

00006b62 <xprintf>:


.func xprintf
.global xprintf
xprintf:
	push	YH
    6b62:	df 93       	push	r29
	push	YL
    6b64:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    6b66:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    6b68:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    6b6a:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    6b6c:	a3 df       	rcall	.-186    	; 0x6ab4 <xvprintf>
	pop	YL
    6b6e:	cf 91       	pop	r28
	pop	YH
    6b70:	df 91       	pop	r29
	ret
    6b72:	08 95       	ret

00006b74 <xatoi>:

#if USE_XATOI
.func xatoi
.global xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    6b74:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    6b76:	dc 01       	movw	r26, r24
	ld	ZL, X+
    6b78:	ed 91       	ld	r30, X+
	ld	ZH, X+
    6b7a:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    6b7c:	22 27       	eor	r18, r18
	clr	r19		;
    6b7e:	33 27       	eor	r19, r19
	clr	r20		;
    6b80:	44 27       	eor	r20, r20
	clr	r21		;/
    6b82:	55 27       	eor	r21, r21
	clt			;T = 0;
    6b84:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    6b86:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    6b8a:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    6b8c:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    6b8e:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    6b90:	e1 f3       	breq	.-8      	; 0x6b8a <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    6b92:	a8 f1       	brcs	.+106    	; 0x6bfe <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    6b94:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    6b96:	11 f4       	brne	.+4      	; 0x6b9c <xatoi+0x28>
	set			; continue;
    6b98:	68 94       	set
	rjmp	40b		;}
    6b9a:	f7 cf       	rjmp	.-18     	; 0x6b8a <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    6b9c:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    6b9e:	78 f5       	brcc	.+94     	; 0x6bfe <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    6ba0:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    6ba2:	68 f1       	brcs	.+90     	; 0x6bfe <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    6ba4:	71 f4       	brne	.+28     	; 0x6bc2 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    6ba6:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    6ba8:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    6baa:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    6bac:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    6bae:	48 f1       	brcs	.+82     	; 0x6c02 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    6bb0:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    6bb2:	11 f4       	brne	.+4      	; 0x6bb8 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    6bb4:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    6bb6:	03 c0       	rjmp	.+6      	; 0x6bbe <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    6bb8:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    6bba:	19 f4       	brne	.+6      	; 0x6bc2 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    6bbc:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    6bbe:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    6bc0:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    6bc2:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    6bc4:	f0 f0       	brcs	.+60     	; 0x6c02 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    6bc6:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    6bc8:	08 f0       	brcs	.+2      	; 0x6bcc <xatoi+0x58>
	subi	r22, 0x20	;/
    6bca:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    6bcc:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    6bce:	b8 f0       	brcs	.+46     	; 0x6bfe <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    6bd0:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    6bd2:	18 f0       	brcs	.+6      	; 0x6bda <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    6bd4:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    6bd6:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    6bd8:	90 f0       	brcs	.+36     	; 0x6bfe <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    6bda:	69 17       	cp	r22, r25
	brcc	70f		;/
    6bdc:	80 f4       	brcc	.+32     	; 0x6bfe <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    6bde:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    6be0:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    6be2:	08 f4       	brcc	.+2      	; 0x6be6 <xatoi+0x72>
	add	r23, r25	;
    6be4:	79 0f       	add	r23, r25
62:	lsr	r23		;
    6be6:	76 95       	lsr	r23
	ror	r21		;
    6be8:	57 95       	ror	r21
	ror	r20		;
    6bea:	47 95       	ror	r20
	ror	r19		;
    6bec:	37 95       	ror	r19
	ror	r18		;
    6bee:	27 95       	ror	r18
	dec	r24		;
    6bf0:	8a 95       	dec	r24
	brne	61b		;/
    6bf2:	b9 f7       	brne	.-18     	; 0x6be2 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    6bf4:	26 0f       	add	r18, r22
	adc	r19, r24	;
    6bf6:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    6bf8:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    6bfa:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    6bfc:	e0 cf       	rjmp	.-64     	; 0x6bbe <xatoi+0x4a>

70:	ldi	r24, 0
    6bfe:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    6c00:	01 c0       	rjmp	.+2      	; 0x6c04 <xatoi+0x90>
80:	ldi	r24, 1
    6c02:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    6c04:	4e f4       	brtc	.+18     	; 0x6c18 <xatoi+0xa4>
	clr	r22
    6c06:	66 27       	eor	r22, r22
	com	r18
    6c08:	20 95       	com	r18
	com	r19
    6c0a:	30 95       	com	r19
	com	r20
    6c0c:	40 95       	com	r20
	com	r21
    6c0e:	50 95       	com	r21
	adc	r18, r22
    6c10:	26 1f       	adc	r18, r22
	adc	r19, r22
    6c12:	36 1f       	adc	r19, r22
	adc	r20, r22
    6c14:	46 1f       	adc	r20, r22
	adc	r21, r22
    6c16:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    6c18:	fe 93       	st	-X, r31
	st	-X, ZL
    6c1a:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    6c1c:	d0 01       	movw	r26, r0
	st	X+, r18
    6c1e:	2d 93       	st	X+, r18
	st	X+, r19
    6c20:	3d 93       	st	X+, r19
	st	X+, r20
    6c22:	4d 93       	st	X+, r20
	st	X+, r21
    6c24:	5d 93       	st	X+, r21
	clr	r1
    6c26:	11 24       	eor	r1, r1
	ret
    6c28:	08 95       	ret

00006c2a <__mulsi3>:
    6c2a:	62 9f       	mul	r22, r18
    6c2c:	d0 01       	movw	r26, r0
    6c2e:	73 9f       	mul	r23, r19
    6c30:	f0 01       	movw	r30, r0
    6c32:	82 9f       	mul	r24, r18
    6c34:	e0 0d       	add	r30, r0
    6c36:	f1 1d       	adc	r31, r1
    6c38:	64 9f       	mul	r22, r20
    6c3a:	e0 0d       	add	r30, r0
    6c3c:	f1 1d       	adc	r31, r1
    6c3e:	92 9f       	mul	r25, r18
    6c40:	f0 0d       	add	r31, r0
    6c42:	83 9f       	mul	r24, r19
    6c44:	f0 0d       	add	r31, r0
    6c46:	74 9f       	mul	r23, r20
    6c48:	f0 0d       	add	r31, r0
    6c4a:	65 9f       	mul	r22, r21
    6c4c:	f0 0d       	add	r31, r0
    6c4e:	99 27       	eor	r25, r25
    6c50:	72 9f       	mul	r23, r18
    6c52:	b0 0d       	add	r27, r0
    6c54:	e1 1d       	adc	r30, r1
    6c56:	f9 1f       	adc	r31, r25
    6c58:	63 9f       	mul	r22, r19
    6c5a:	b0 0d       	add	r27, r0
    6c5c:	e1 1d       	adc	r30, r1
    6c5e:	f9 1f       	adc	r31, r25
    6c60:	bd 01       	movw	r22, r26
    6c62:	cf 01       	movw	r24, r30
    6c64:	11 24       	eor	r1, r1
    6c66:	08 95       	ret

00006c68 <__udivmodsi4>:
    6c68:	a1 e2       	ldi	r26, 0x21	; 33
    6c6a:	1a 2e       	mov	r1, r26
    6c6c:	aa 1b       	sub	r26, r26
    6c6e:	bb 1b       	sub	r27, r27
    6c70:	fd 01       	movw	r30, r26
    6c72:	0d c0       	rjmp	.+26     	; 0x6c8e <__udivmodsi4_ep>

00006c74 <__udivmodsi4_loop>:
    6c74:	aa 1f       	adc	r26, r26
    6c76:	bb 1f       	adc	r27, r27
    6c78:	ee 1f       	adc	r30, r30
    6c7a:	ff 1f       	adc	r31, r31
    6c7c:	a2 17       	cp	r26, r18
    6c7e:	b3 07       	cpc	r27, r19
    6c80:	e4 07       	cpc	r30, r20
    6c82:	f5 07       	cpc	r31, r21
    6c84:	20 f0       	brcs	.+8      	; 0x6c8e <__udivmodsi4_ep>
    6c86:	a2 1b       	sub	r26, r18
    6c88:	b3 0b       	sbc	r27, r19
    6c8a:	e4 0b       	sbc	r30, r20
    6c8c:	f5 0b       	sbc	r31, r21

00006c8e <__udivmodsi4_ep>:
    6c8e:	66 1f       	adc	r22, r22
    6c90:	77 1f       	adc	r23, r23
    6c92:	88 1f       	adc	r24, r24
    6c94:	99 1f       	adc	r25, r25
    6c96:	1a 94       	dec	r1
    6c98:	69 f7       	brne	.-38     	; 0x6c74 <__udivmodsi4_loop>
    6c9a:	60 95       	com	r22
    6c9c:	70 95       	com	r23
    6c9e:	80 95       	com	r24
    6ca0:	90 95       	com	r25
    6ca2:	9b 01       	movw	r18, r22
    6ca4:	ac 01       	movw	r20, r24
    6ca6:	bd 01       	movw	r22, r26
    6ca8:	cf 01       	movw	r24, r30
    6caa:	08 95       	ret

00006cac <__divmodsi4>:
    6cac:	97 fb       	bst	r25, 7
    6cae:	09 2e       	mov	r0, r25
    6cb0:	05 26       	eor	r0, r21
    6cb2:	0e d0       	rcall	.+28     	; 0x6cd0 <__divmodsi4_neg1>
    6cb4:	57 fd       	sbrc	r21, 7
    6cb6:	04 d0       	rcall	.+8      	; 0x6cc0 <__divmodsi4_neg2>
    6cb8:	d7 df       	rcall	.-82     	; 0x6c68 <__udivmodsi4>
    6cba:	0a d0       	rcall	.+20     	; 0x6cd0 <__divmodsi4_neg1>
    6cbc:	00 1c       	adc	r0, r0
    6cbe:	38 f4       	brcc	.+14     	; 0x6cce <__divmodsi4_exit>

00006cc0 <__divmodsi4_neg2>:
    6cc0:	50 95       	com	r21
    6cc2:	40 95       	com	r20
    6cc4:	30 95       	com	r19
    6cc6:	21 95       	neg	r18
    6cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    6cca:	4f 4f       	sbci	r20, 0xFF	; 255
    6ccc:	5f 4f       	sbci	r21, 0xFF	; 255

00006cce <__divmodsi4_exit>:
    6cce:	08 95       	ret

00006cd0 <__divmodsi4_neg1>:
    6cd0:	f6 f7       	brtc	.-4      	; 0x6cce <__divmodsi4_exit>
    6cd2:	90 95       	com	r25
    6cd4:	80 95       	com	r24
    6cd6:	70 95       	com	r23
    6cd8:	61 95       	neg	r22
    6cda:	7f 4f       	sbci	r23, 0xFF	; 255
    6cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    6cde:	9f 4f       	sbci	r25, 0xFF	; 255
    6ce0:	08 95       	ret

00006ce2 <memset>:
    6ce2:	dc 01       	movw	r26, r24
    6ce4:	01 c0       	rjmp	.+2      	; 0x6ce8 <memset+0x6>
    6ce6:	6d 93       	st	X+, r22
    6ce8:	41 50       	subi	r20, 0x01	; 1
    6cea:	50 40       	sbci	r21, 0x00	; 0
    6cec:	e0 f7       	brcc	.-8      	; 0x6ce6 <memset+0x4>
    6cee:	08 95       	ret

00006cf0 <strchr>:
    6cf0:	fc 01       	movw	r30, r24
    6cf2:	81 91       	ld	r24, Z+
    6cf4:	86 17       	cp	r24, r22
    6cf6:	21 f0       	breq	.+8      	; 0x6d00 <strchr+0x10>
    6cf8:	88 23       	and	r24, r24
    6cfa:	d9 f7       	brne	.-10     	; 0x6cf2 <strchr+0x2>
    6cfc:	99 27       	eor	r25, r25
    6cfe:	08 95       	ret
    6d00:	31 97       	sbiw	r30, 0x01	; 1
    6d02:	cf 01       	movw	r24, r30
    6d04:	08 95       	ret

00006d06 <strcpy>:
    6d06:	fb 01       	movw	r30, r22
    6d08:	dc 01       	movw	r26, r24
    6d0a:	01 90       	ld	r0, Z+
    6d0c:	0d 92       	st	X+, r0
    6d0e:	00 20       	and	r0, r0
    6d10:	e1 f7       	brne	.-8      	; 0x6d0a <strcpy+0x4>
    6d12:	08 95       	ret

00006d14 <_exit>:
    6d14:	f8 94       	cli

00006d16 <__stop_program>:
    6d16:	ff cf       	rjmp	.-2      	; 0x6d16 <__stop_program>
